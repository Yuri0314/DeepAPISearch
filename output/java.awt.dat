java.awt.ActiveEvent#dispatch()->void:::Dispatch the event to its target, listeners of the events source, or do whatever it is this event is supposed to do.
java.awt.Adjustable#getOrientation()->int:::Gets the orientation of the adjustable object.
java.awt.Adjustable#setMinimum(int)->void:::Sets the minimum value of the adjustable object.
java.awt.Adjustable#getMinimum()->int:::Gets the minimum value of the adjustable object.
java.awt.Adjustable#setMaximum(int)->void:::Sets the maximum value of the adjustable object.
java.awt.Adjustable#getMaximum()->int:::Gets the maximum value of the adjustable object.
java.awt.Adjustable#setUnitIncrement(int)->void:::Sets the unit value increment for the adjustable object.
java.awt.Adjustable#getUnitIncrement()->int:::Gets the unit value increment for the adjustable object.
java.awt.Adjustable#setBlockIncrement(int)->void:::Sets the block value increment for the adjustable object.
java.awt.Adjustable#getBlockIncrement()->int:::Gets the block value increment for the adjustable object.
java.awt.Adjustable#setVisibleAmount(int)->void:::Sets the length of the proportional indicator of the adjustable object.
java.awt.Adjustable#getVisibleAmount()->int:::Gets the length of the proportional indicator.
java.awt.Adjustable#setValue(int)->void:::Sets the current value of the adjustable object
java.awt.Adjustable#getValue()->int:::Gets the current value of the adjustable object.
java.awt.Adjustable#addAdjustmentListener(AdjustmentListener)->void:::Adds a listener to receive adjustment events when the value of the adjustable object changes.
java.awt.Adjustable#removeAdjustmentListener(AdjustmentListener)->void:::Removes an adjustment listener.
java.awt.AlphaComposite#getInstance(int)->AlphaComposite:::Creates an AlphaComposite object with the specified rule.
java.awt.AlphaComposite#getInstance(int, float)->AlphaComposite:::Creates an AlphaComposite object with the specified rule and the constant alpha to multiply with the alpha of the source
java.awt.AlphaComposite#createContext(ColorModel, ColorModel, RenderingHints)->CompositeContext:::Creates a context for the compositing operation
java.awt.AlphaComposite#getAlpha()->float:::Returns the alpha value of this AlphaComposite
java.awt.AlphaComposite#getRule()->int:::Returns the compositing rule of this AlphaComposite.
java.awt.AlphaComposite#derive(int)->AlphaComposite:::Returns a similar AlphaComposite object that uses the specified compositing rule
java.awt.AlphaComposite#derive(float)->AlphaComposite:::Returns a similar AlphaComposite object that uses the specified alpha value
java.awt.AlphaComposite#hashCode()->int:::Returns the hashcode for this composite.
java.awt.AlphaComposite#equals(Object)->boolean:::Determines whether the specified object is equal to this AlphaComposite
java.awt.AttributeValue#hashCode()->int::: attribute value hash code
java.awt.AttributeValue#toString()->String::: attribute value to string
java.awt.AWTEvent#getAccessControlContext()->AccessControlContext::: event get access control context
java.awt.AWTEvent#setSource(Object)->void:::Retargets an event to a new source
java.awt.AWTEvent#getID()->int:::Returns the event type.
java.awt.AWTEvent#toString()->String:::Returns a String representation of this object.
java.awt.AWTEvent#paramString()->String:::Returns a string representing the state of this Event
java.awt.AWTEvent#consume()->void:::Consumes this event, if this event can be consumed
java.awt.AWTEvent#isConsumed()->boolean:::Returns whether this event has been consumed.
java.awt.AWTEvent#convertToOld()->Event:::Converts a new event to an old one (used for compatibility)
java.awt.AWTEvent#copyPrivateDataInto(AWTEvent)->void:::Copies all private data from this event into that
java.awt.AWTEvent#dispatched()->void::: event dispatched
java.awt.AWTEventMulticaster#remove(EventListener)->EventListener:::Removes a listener from this multicaster
java.awt.AWTEventMulticaster#componentResized(ComponentEvent)->void:::Handles the componentResized event by invoking the componentResized methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#componentMoved(ComponentEvent)->void:::Handles the componentMoved event by invoking the componentMoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#componentShown(ComponentEvent)->void:::Handles the componentShown event by invoking the componentShown methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#componentHidden(ComponentEvent)->void:::Handles the componentHidden event by invoking the componentHidden methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#componentAdded(ContainerEvent)->void:::Handles the componentAdded container event by invoking the componentAdded methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#componentRemoved(ContainerEvent)->void:::Handles the componentRemoved container event by invoking the componentRemoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#focusGained(FocusEvent)->void:::Handles the focusGained event by invoking the focusGained methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#focusLost(FocusEvent)->void:::Handles the focusLost event by invoking the focusLost methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#keyTyped(KeyEvent)->void:::Handles the keyTyped event by invoking the keyTyped methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#keyPressed(KeyEvent)->void:::Handles the keyPressed event by invoking the keyPressed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#keyReleased(KeyEvent)->void:::Handles the keyReleased event by invoking the keyReleased methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseClicked(MouseEvent)->void:::Handles the mouseClicked event by invoking the mouseClicked methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mousePressed(MouseEvent)->void:::Handles the mousePressed event by invoking the mousePressed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseReleased(MouseEvent)->void:::Handles the mouseReleased event by invoking the mouseReleased methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseEntered(MouseEvent)->void:::Handles the mouseEntered event by invoking the mouseEntered methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseExited(MouseEvent)->void:::Handles the mouseExited event by invoking the mouseExited methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseDragged(MouseEvent)->void:::Handles the mouseDragged event by invoking the mouseDragged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseMoved(MouseEvent)->void:::Handles the mouseMoved event by invoking the mouseMoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowOpened(WindowEvent)->void:::Handles the windowOpened event by invoking the windowOpened methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowClosing(WindowEvent)->void:::Handles the windowClosing event by invoking the windowClosing methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowClosed(WindowEvent)->void:::Handles the windowClosed event by invoking the windowClosed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowIconified(WindowEvent)->void:::Handles the windowIconified event by invoking the windowIconified methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowDeiconified(WindowEvent)->void:::Handles the windowDeiconified event by invoking the windowDeiconified methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowActivated(WindowEvent)->void:::Handles the windowActivated event by invoking the windowActivated methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowDeactivated(WindowEvent)->void:::Handles the windowDeactivated event by invoking the windowDeactivated methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowStateChanged(WindowEvent)->void:::Handles the windowStateChanged event by invoking the windowStateChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowGainedFocus(WindowEvent)->void:::Handles the windowGainedFocus event by invoking the windowGainedFocus methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#windowLostFocus(WindowEvent)->void:::Handles the windowLostFocus event by invoking the windowLostFocus methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#actionPerformed(ActionEvent)->void:::Handles the actionPerformed event by invoking the actionPerformed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#itemStateChanged(ItemEvent)->void:::Handles the itemStateChanged event by invoking the itemStateChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#adjustmentValueChanged(AdjustmentEvent)->void:::Handles the adjustmentValueChanged event by invoking the adjustmentValueChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#textValueChanged(TextEvent)->void::: event multicaster text value changed
java.awt.AWTEventMulticaster#inputMethodTextChanged(InputMethodEvent)->void:::Handles the inputMethodTextChanged event by invoking the inputMethodTextChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#caretPositionChanged(InputMethodEvent)->void:::Handles the caretPositionChanged event by invoking the caretPositionChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#hierarchyChanged(HierarchyEvent)->void:::Handles the hierarchyChanged event by invoking the hierarchyChanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#ancestorMoved(HierarchyEvent)->void:::Handles the ancestorMoved event by invoking the ancestorMoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#ancestorResized(HierarchyEvent)->void:::Handles the ancestorResized event by invoking the ancestorResized methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#mouseWheelMoved(MouseWheelEvent)->void:::Handles the mouseWheelMoved event by invoking the mouseWheelMoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster#add(ComponentListener, ComponentListener)->ComponentListener:::Adds component-listener-a with component-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(ContainerListener, ContainerListener)->ContainerListener:::Adds container-listener-a with container-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(FocusListener, FocusListener)->FocusListener:::Adds focus-listener-a with focus-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(KeyListener, KeyListener)->KeyListener:::Adds key-listener-a with key-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(MouseListener, MouseListener)->MouseListener:::Adds mouse-listener-a with mouse-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(MouseMotionListener, MouseMotionListener)->MouseMotionListener:::Adds mouse-motion-listener-a with mouse-motion-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(WindowListener, WindowListener)->WindowListener:::Adds window-listener-a with window-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(WindowStateListener, WindowStateListener)->WindowStateListener:::Adds window-state-listener-a with window-state-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(WindowFocusListener, WindowFocusListener)->WindowFocusListener:::Adds window-focus-listener-a with window-focus-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(ActionListener, ActionListener)->ActionListener:::Adds action-listener-a with action-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(ItemListener, ItemListener)->ItemListener:::Adds item-listener-a with item-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(AdjustmentListener, AdjustmentListener)->AdjustmentListener:::Adds adjustment-listener-a with adjustment-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(TextListener, TextListener)->TextListener:::Adds text-listener-a with text-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(InputMethodListener, InputMethodListener)->InputMethodListener:::Adds input-method-listener-a with input-method-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(HierarchyListener, HierarchyListener)->HierarchyListener:::Adds hierarchy-listener-a with hierarchy-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(HierarchyBoundsListener, HierarchyBoundsListener)->HierarchyBoundsListener:::Adds hierarchy-bounds-listener-a with hierarchy-bounds-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#add(MouseWheelListener, MouseWheelListener)->MouseWheelListener:::Adds mouse-wheel-listener-a with mouse-wheel-listener-b and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(ComponentListener, ComponentListener)->ComponentListener:::Removes the old component-listener from component-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(ContainerListener, ContainerListener)->ContainerListener:::Removes the old container-listener from container-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(FocusListener, FocusListener)->FocusListener:::Removes the old focus-listener from focus-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(KeyListener, KeyListener)->KeyListener:::Removes the old key-listener from key-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(MouseListener, MouseListener)->MouseListener:::Removes the old mouse-listener from mouse-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(MouseMotionListener, MouseMotionListener)->MouseMotionListener:::Removes the old mouse-motion-listener from mouse-motion-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(WindowListener, WindowListener)->WindowListener:::Removes the old window-listener from window-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(WindowStateListener, WindowStateListener)->WindowStateListener:::Removes the old window-state-listener from window-state-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(WindowFocusListener, WindowFocusListener)->WindowFocusListener:::Removes the old window-focus-listener from window-focus-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(ActionListener, ActionListener)->ActionListener:::Removes the old action-listener from action-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(ItemListener, ItemListener)->ItemListener:::Removes the old item-listener from item-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(AdjustmentListener, AdjustmentListener)->AdjustmentListener:::Removes the old adjustment-listener from adjustment-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(TextListener, TextListener)->TextListener:::Removes the old text-listener from text-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(InputMethodListener, InputMethodListener)->InputMethodListener:::Removes the old input-method-listener from input-method-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(HierarchyListener, HierarchyListener)->HierarchyListener:::Removes the old hierarchy-listener from hierarchy-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(HierarchyBoundsListener, HierarchyBoundsListener)->HierarchyBoundsListener:::Removes the old hierarchy-bounds-listener from hierarchy-bounds-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#remove(MouseWheelListener, MouseWheelListener)->MouseWheelListener:::Removes the old mouse-wheel-listener from mouse-wheel-listener-l and returns the resulting multicast listener.
java.awt.AWTEventMulticaster#addInternal(EventListener, EventListener)->EventListener:::Returns the resulting multicast listener from adding listener-a and listener-b together
java.awt.AWTEventMulticaster#removeInternal(EventListener, EventListener)->EventListener:::Returns the resulting multicast listener after removing the old listener from listener-l
java.awt.AWTEventMulticaster#saveInternal(ObjectOutputStream, String)->void:::Serialization support
java.awt.AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)->void:::Saves a Serializable listener chain to a serialization stream.
java.awt.AWTEventMulticaster#getListeners(EventListener, Class)->T[]:::Returns an array of all the objects chained as FooListeners by the specified java.util.EventListener
java.awt.AWTKeyStroke#registerSubclass(Class)->void:::The method has no effect and is only left present to avoid introducing a binary incompatibility.
java.awt.AWTKeyStroke#getAWTKeyStroke(char)->AWTKeyStroke:::Returns a shared instance of an AWTKeyStroke that represents a KEY_TYPED event for the specified character.
java.awt.AWTKeyStroke#getAWTKeyStroke(Character, int)->AWTKeyStroke:::Returns a shared instance of an AWTKeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers
java.awt.AWTKeyStroke#getAWTKeyStroke(int, int, boolean)->AWTKeyStroke:::Returns a shared instance of an AWTKeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released
java.awt.AWTKeyStroke#getAWTKeyStroke(int, int)->AWTKeyStroke:::Returns a shared instance of an AWTKeyStroke, given a numeric key code and a set of modifiers
java.awt.AWTKeyStroke#getAWTKeyStrokeForEvent(KeyEvent)->AWTKeyStroke:::Returns an AWTKeyStroke which represents the stroke which generated a given KeyEvent
java.awt.AWTKeyStroke#getAWTKeyStroke(String)->AWTKeyStroke:::Parses a string and returns an AWTKeyStroke
java.awt.AWTKeyStroke#getKeyChar()->char:::Returns the character for this AWTKeyStroke.
java.awt.AWTKeyStroke#getKeyCode()->int:::Returns the numeric key code for this AWTKeyStroke.
java.awt.AWTKeyStroke#getModifiers()->int:::Returns the modifier keys for this AWTKeyStroke.
java.awt.AWTKeyStroke#isOnKeyRelease()->boolean:::Returns whether this AWTKeyStroke represents a key release.
java.awt.AWTKeyStroke#getKeyEventType()->int:::Returns the type of KeyEvent which corresponds to this AWTKeyStroke.
java.awt.AWTKeyStroke#hashCode()->int:::Returns a numeric value for this object that is likely to be unique, making it a good choice as the index value in a hash table.
java.awt.AWTKeyStroke#equals(Object)->boolean:::Returns true if this object is identical to the specified object.
java.awt.AWTKeyStroke#toString()->String:::Returns a string that displays and identifies this object's properties
java.awt.AWTKeyStroke#getModifiersText(int)->String::: key stroke get modifiers text
java.awt.AWTKeyStroke#getVKText(int)->String::: key stroke get text
java.awt.AWTKeyStroke#readResolve()->Object:::Returns a cached instance of AWTKeyStroke (or a subclass of AWTKeyStroke) which is equal to this instance.
java.awt.VKCollection#put(String, Integer)->void::: collection put
java.awt.VKCollection#findCode(String)->Integer::: collection find code
java.awt.VKCollection#findName(Integer)->String::: collection find name
java.awt.BasicStroke#createStrokedShape(Shape)->Shape:::Returns a Shape whose interior defines the stroked outline of a specified Shape.
java.awt.BasicStroke#getLineWidth()->float:::Returns the line width
java.awt.BasicStroke#getEndCap()->int:::Returns the end cap style.
java.awt.BasicStroke#getLineJoin()->int:::Returns the line join style.
java.awt.BasicStroke#getMiterLimit()->float:::Returns the limit of miter joins.
java.awt.BasicStroke#getDashArray()->float[]:::Returns the array representing the lengths of the dash segments
java.awt.BasicStroke#getDashPhase()->float:::Returns the current dash phase
java.awt.BasicStroke#hashCode()->int:::Returns the hashcode for this stroke.
java.awt.BasicStroke#equals(Object)->boolean:::Tests if a specified object is equal to this BasicStroke by first testing if it is a BasicStroke and then comparing its width, join, cap, miter limit, dash, and dash phase attributes with those of this BasicStroke.
java.awt.BorderLayout#getHgap()->int:::Returns the horizontal gap between components.
java.awt.BorderLayout#setHgap(int)->void:::Sets the horizontal gap between components.
java.awt.BorderLayout#getVgap()->int:::Returns the vertical gap between components.
java.awt.BorderLayout#setVgap(int)->void:::Sets the vertical gap between components.
java.awt.BorderLayout#addLayoutComponent(Component, Object)->void:::Adds the specified component to the layout, using the specified constraint object
java.awt.BorderLayout#addLayoutComponent(String, Component)->void::: border layout add layout component
java.awt.BorderLayout#removeLayoutComponent(Component)->void:::Removes the specified component from this border layout
java.awt.BorderLayout#getLayoutComponent(Object)->Component:::Gets the component that was added using the given constraint
java.awt.BorderLayout#getLayoutComponent(Container, Object)->Component:::Returns the component that corresponds to the given constraint location based on the target Container's component orientation
java.awt.BorderLayout#getConstraints(Component)->Object:::Gets the constraints for the specified component
java.awt.BorderLayout#minimumLayoutSize(Container)->Dimension:::Determines the minimum size of the target container using this layout manager
java.awt.BorderLayout#preferredLayoutSize(Container)->Dimension:::Determines the preferred size of the target container using this layout manager, based on the components in the container
java.awt.BorderLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.BorderLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis
java.awt.BorderLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis
java.awt.BorderLayout#invalidateLayout(Container)->void:::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
java.awt.BorderLayout#layoutContainer(Container)->void:::Lays out the container argument using this border layout
java.awt.BorderLayout#toString()->String:::Returns a string representation of the state of this border layout.
java.awt.BufferCapabilities#getFrontBufferCapabilities()->ImageCapabilities::: buffer capabilities get front buffer capabilities
java.awt.BufferCapabilities#getBackBufferCapabilities()->ImageCapabilities::: buffer capabilities get back buffer capabilities
java.awt.BufferCapabilities#isPageFlipping()->boolean::: buffer capabilities is page flipping
java.awt.BufferCapabilities#getFlipContents()->FlipContents::: buffer capabilities get flip contents
java.awt.BufferCapabilities#isFullScreenRequired()->boolean::: buffer capabilities is full screen required
java.awt.BufferCapabilities#isMultiBufferAvailable()->boolean::: buffer capabilities is multi buffer available
java.awt.BufferCapabilities#clone()->Object::: buffer capabilities clone
java.awt.Button#constructComponentName()->String:::Construct a name for this component
java.awt.Button#addNotify()->void:::Creates the peer of the button
java.awt.Button#getLabel()->String:::Gets the label of this button.
java.awt.Button#setLabel(String)->void:::Sets the button's label to be the specified string.
java.awt.Button#setActionCommand(String)->void:::Sets the command name for the action event fired by this button
java.awt.Button#getActionCommand()->String:::Returns the command name of the action event fired by this button
java.awt.Button#addActionListener(ActionListener)->void:::Adds the specified action listener to receive action events from this button
java.awt.Button#removeActionListener(ActionListener)->void:::Removes the specified action listener so that it no longer receives action events from this button
java.awt.Button#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this button.
java.awt.Button#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Button
java.awt.Button#eventEnabled(AWTEvent)->boolean::: button event enabled
java.awt.Button#processEvent(AWTEvent)->void:::Processes events on this button
java.awt.Button#processActionEvent(ActionEvent)->void:::Processes action events occurring on this button by dispatching them to any registered ActionListener objects
java.awt.Button#paramString()->String:::Returns a string representing the state of this Button
java.awt.Button#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Button
java.awt.Button.AccessibleAWTButton#getAccessibleName()->String:::Get the accessible name of this object.
java.awt.Button.AccessibleAWTButton#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
java.awt.Button.AccessibleAWTButton#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
java.awt.Button.AccessibleAWTButton#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
java.awt.Button.AccessibleAWTButton#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
java.awt.Button.AccessibleAWTButton#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
java.awt.Button.AccessibleAWTButton#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number.
java.awt.Button.AccessibleAWTButton#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
java.awt.Button.AccessibleAWTButton#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
java.awt.Button.AccessibleAWTButton#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
java.awt.Button.AccessibleAWTButton#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Canvas#setGraphicsConfiguration(GraphicsConfiguration)->void::: canvas set graphics configuration
java.awt.Canvas#constructComponentName()->String:::Construct a name for this component
java.awt.Canvas#addNotify()->void:::Creates the peer of the canvas
java.awt.Canvas#paint(Graphics)->void:::Paints this canvas
java.awt.Canvas#update(Graphics)->void:::Updates this canvas
java.awt.Canvas#postsOldMouseEvents()->boolean::: canvas posts old mouse events
java.awt.Canvas#createBufferStrategy(int)->void:::Creates a new strategy for multi-buffering on this component
java.awt.Canvas#createBufferStrategy(int, BufferCapabilities)->void:::Creates a new strategy for multi-buffering on this component with the required buffer capabilities
java.awt.Canvas#getBufferStrategy()->BufferStrategy:::Returns the BufferStrategy used by this component
java.awt.Canvas#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Canvas
java.awt.Canvas.AccessibleAWTCanvas#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.CardLayout#getHgap()->int:::Gets the horizontal gap between components.
java.awt.CardLayout#setHgap(int)->void:::Sets the horizontal gap between components.
java.awt.CardLayout#getVgap()->int:::Gets the vertical gap between components.
java.awt.CardLayout#setVgap(int)->void:::Sets the vertical gap between components.
java.awt.CardLayout#addLayoutComponent(Component, Object)->void:::Adds the specified component to this card layout's internal table of names
java.awt.CardLayout#addLayoutComponent(String, Component)->void::: card layout add layout component
java.awt.CardLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout
java.awt.CardLayout#preferredLayoutSize(Container)->Dimension:::Determines the preferred size of the container argument using this card layout.
java.awt.CardLayout#minimumLayoutSize(Container)->Dimension:::Calculates the minimum size for the specified panel.
java.awt.CardLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.CardLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis
java.awt.CardLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis
java.awt.CardLayout#invalidateLayout(Container)->void:::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
java.awt.CardLayout#layoutContainer(Container)->void:::Lays out the specified container using this card layout
java.awt.CardLayout#checkLayout(Container)->void:::Make sure that the Container really has a CardLayout installed
java.awt.CardLayout#first(Container)->void:::Flips to the first card of the container.
java.awt.CardLayout#next(Container)->void:::Flips to the next card of the specified container
java.awt.CardLayout#previous(Container)->void:::Flips to the previous card of the specified container
java.awt.CardLayout#showDefaultComponent(Container)->void::: card layout show default component
java.awt.CardLayout#last(Container)->void:::Flips to the last card of the container.
java.awt.CardLayout#show(Container, String)->void:::Flips to the component that was added to this layout with the specified name, using addLayoutComponent
java.awt.CardLayout#toString()->String:::Returns a string representation of the state of this card layout.
java.awt.Checkbox#setStateInternal(boolean)->void:::Helper function for setState and CheckboxGroup.setSelectedCheckbox Should remain package-private.
java.awt.Checkbox#constructComponentName()->String:::Constructs a name for this component
java.awt.Checkbox#addNotify()->void:::Creates the peer of the Checkbox
java.awt.Checkbox#getLabel()->String:::Gets the label of this check box.
java.awt.Checkbox#setLabel(String)->void:::Sets this check box's label to be the string argument.
java.awt.Checkbox#getState()->boolean:::Determines whether this check box is in the "on" or "off" state
java.awt.Checkbox#setState(boolean)->void:::Sets the state of this check box to the specified state
java.awt.Checkbox#getSelectedObjects()->Object[]:::Returns an array (length 1) containing the checkbox label or null if the checkbox is not selected.
java.awt.Checkbox#getCheckboxGroup()->CheckboxGroup:::Determines this check box's group.
java.awt.Checkbox#setCheckboxGroup(CheckboxGroup)->void:::Sets this check box's group to the specified check box group
java.awt.Checkbox#addItemListener(ItemListener)->void:::Adds the specified item listener to receive item events from this check box
java.awt.Checkbox#removeItemListener(ItemListener)->void:::Removes the specified item listener so that the item listener no longer receives item events from this check box
java.awt.Checkbox#getItemListeners()->ItemListener[]:::Returns an array of all the item listeners registered on this checkbox.
java.awt.Checkbox#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Checkbox
java.awt.Checkbox#eventEnabled(AWTEvent)->boolean::: checkbox event enabled
java.awt.Checkbox#processEvent(AWTEvent)->void:::Processes events on this check box
java.awt.Checkbox#processItemEvent(ItemEvent)->void:::Processes item events occurring on this check box by dispatching them to any registered ItemListener objects
java.awt.Checkbox#paramString()->String:::Returns a string representing the state of this Checkbox
java.awt.Checkbox#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Checkbox
java.awt.Checkbox.AccessibleAWTCheckbox#itemStateChanged(ItemEvent)->void:::Fire accessible property change events when the state of the toggle button changes.
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
java.awt.Checkbox.AccessibleAWTCheckbox#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
java.awt.Checkbox.AccessibleAWTCheckbox#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number
java.awt.Checkbox.AccessibleAWTCheckbox#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
java.awt.Checkbox.AccessibleAWTCheckbox#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
java.awt.Checkbox.AccessibleAWTCheckbox#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Checkbox.AccessibleAWTCheckbox#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
java.awt.CheckboxGroup#getSelectedCheckbox()->Checkbox:::Gets the current choice from this check box group
java.awt.CheckboxGroup#getCurrent()->Checkbox:::Returns the current choice from this check box group or null if none of checkboxes are selected.
java.awt.CheckboxGroup#setSelectedCheckbox(Checkbox)->void:::Sets the currently selected check box in this group to be the specified check box
java.awt.CheckboxGroup#setCurrent(Checkbox)->void:::Sets the currently selected check box in this group to be the specified check box and unsets all others.
java.awt.CheckboxGroup#toString()->String:::Returns a string representation of this check box group, including the value of its current selection.
java.awt.CheckboxMenuItem#constructComponentName()->String:::Construct a name for this MenuComponent
java.awt.CheckboxMenuItem#addNotify()->void:::Creates the peer of the checkbox item
java.awt.CheckboxMenuItem#getState()->boolean:::Determines whether the state of this check box menu item is "on" or "off."
java.awt.CheckboxMenuItem#setState(boolean)->void:::Sets this check box menu item to the specified state
java.awt.CheckboxMenuItem#getSelectedObjects()->Object[]:::Returns the an array (length 1) containing the checkbox menu item label or null if the checkbox is not selected.
java.awt.CheckboxMenuItem#addItemListener(ItemListener)->void:::Adds the specified item listener to receive item events from this check box menu item
java.awt.CheckboxMenuItem#removeItemListener(ItemListener)->void:::Removes the specified item listener so that it no longer receives item events from this check box menu item
java.awt.CheckboxMenuItem#getItemListeners()->ItemListener[]:::Returns an array of all the item listeners registered on this checkbox menuitem.
java.awt.CheckboxMenuItem#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this CheckboxMenuItem
java.awt.CheckboxMenuItem#eventEnabled(AWTEvent)->boolean::: checkbox menu item event enabled
java.awt.CheckboxMenuItem#processEvent(AWTEvent)->void:::Processes events on this check box menu item
java.awt.CheckboxMenuItem#processItemEvent(ItemEvent)->void:::Processes item events occurring on this check box menu item by dispatching them to any registered ItemListener objects
java.awt.CheckboxMenuItem#doMenuEvent(long, int)->void::: checkbox menu item do menu event
java.awt.CheckboxMenuItem#paramString()->String:::Returns a string representing the state of this CheckBoxMenuItem
java.awt.CheckboxMenuItem#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this CheckboxMenuItem
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Choice#constructComponentName()->String:::Constructs a name for this component
java.awt.Choice#addNotify()->void:::Creates the Choice's peer
java.awt.Choice#getItemCount()->int:::Returns the number of items in this Choice menu.
java.awt.Choice#countItems()->int:::Returns the number of items in this Choice menu.
java.awt.Choice#getItem(int)->String:::Gets the string at the specified index in this Choice menu.
java.awt.Choice#getItemImpl(int)->String::: choice get item impl
java.awt.Choice#add(String)->void:::Adds an item to this Choice menu.
java.awt.Choice#addItem(String)->void:::Obsolete as of Java 2 platform v1.1
java.awt.Choice#insert(String, int)->void:::Inserts the item into this choice at the specified position
java.awt.Choice#remove(String)->void:::Removes the first occurrence of item from the Choice menu
java.awt.Choice#remove(int)->void:::Removes an item from the choice menu at the specified position
java.awt.Choice#removeAll()->void:::Removes all items from the choice menu.
java.awt.Choice#getSelectedItem()->String:::Gets a representation of the current choice as a string.
java.awt.Choice#getSelectedObjects()->Object[]:::Returns an array (length 1) containing the currently selected item
java.awt.Choice#getSelectedIndex()->int:::Returns the index of the currently selected item
java.awt.Choice#select(int)->void:::Sets the selected item in this Choice menu to be the item at the specified position
java.awt.Choice#select(String)->void:::Sets the selected item in this Choice menu to be the item whose name is equal to the specified string
java.awt.Choice#addItemListener(ItemListener)->void:::Adds the specified item listener to receive item events from this Choice menu
java.awt.Choice#removeItemListener(ItemListener)->void:::Removes the specified item listener so that it no longer receives item events from this Choice menu
java.awt.Choice#getItemListeners()->ItemListener[]:::Returns an array of all the item listeners registered on this choice.
java.awt.Choice#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Choice
java.awt.Choice#eventEnabled(AWTEvent)->boolean::: choice event enabled
java.awt.Choice#processEvent(AWTEvent)->void:::Processes events on this choice
java.awt.Choice#processItemEvent(ItemEvent)->void:::Processes item events occurring on this Choice menu by dispatching them to any registered ItemListener objects
java.awt.Choice#paramString()->String:::Returns a string representing the state of this Choice menu
java.awt.Choice#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Choice
java.awt.Choice.AccessibleAWTChoice#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
java.awt.Choice.AccessibleAWTChoice#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Choice.AccessibleAWTChoice#getAccessibleActionCount()->int:::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object.
java.awt.Choice.AccessibleAWTChoice#getAccessibleActionDescription(int)->String:::Returns a description of the specified action of the object.
java.awt.Choice.AccessibleAWTChoice#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
java.awt.Color#getRed()->int:::Returns the red component in the range 0-255 in the default sRGB space.
java.awt.Color#getGreen()->int:::Returns the green component in the range 0-255 in the default sRGB space.
java.awt.Color#getBlue()->int:::Returns the blue component in the range 0-255 in the default sRGB space.
java.awt.Color#getAlpha()->int:::Returns the alpha component in the range 0-255.
java.awt.Color#getRGB()->int:::Returns the RGB value representing the color in the default sRGB ColorModel
java.awt.Color#brighter()->Color:::Creates a new Color that is a brighter version of this Color
java.awt.Color#darker()->Color:::Creates a new Color that is a darker version of this Color
java.awt.Color#hashCode()->int:::Computes the hash code for this Color.
java.awt.Color#equals(Object)->boolean:::Determines whether another object is equal to this Color
java.awt.Color#toString()->String:::Returns a string representation of this Color
java.awt.Color#decode(String)->Color:::Converts a String to an integer and returns the specified opaque Color
java.awt.Color#getColor(String)->Color:::Finds a color in the system properties
java.awt.Color#getColor(String, Color)->Color:::Finds a color in the system properties
java.awt.Color#getColor(String, int)->Color:::Finds a color in the system properties
java.awt.Color#HSBtoRGB(float, float, float)->int:::Converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model
java.awt.Color#RGBtoHSB(int, int, int, float[])->float[]:::Converts the components of a color, as specified by the default RGB model, to an equivalent set of values for hue, saturation, and brightness that are the three components of the HSB model
java.awt.Color#getHSBColor(float, float, float)->Color:::Creates a Color object based on the specified values for the HSB color model
java.awt.Color#getRGBComponents(float[])->float[]:::Returns a float array containing the color and alpha components of the Color, as represented in the default sRGB color space
java.awt.Color#getRGBColorComponents(float[])->float[]:::Returns a float array containing only the color components of the Color, in the default sRGB color space
java.awt.Color#getComponents(float[])->float[]:::Returns a float array containing the color and alpha components of the Color, in the ColorSpace of the Color
java.awt.Color#getColorComponents(float[])->float[]:::Returns a float array containing only the color components of the Color, in the ColorSpace of the Color
java.awt.Color#getComponents(ColorSpace, float[])->float[]:::Returns a float array containing the color and alpha components of the Color, in the ColorSpace specified by the cspace parameter
java.awt.Color#getColorComponents(ColorSpace, float[])->float[]:::Returns a float array containing only the color components of the Color in the ColorSpace specified by the cspace parameter
java.awt.Color#getColorSpace()->ColorSpace:::Returns the ColorSpace of this Color.
java.awt.Color#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate a solid color field pattern
java.awt.Color#getTransparency()->int:::Returns the transparency mode for this Color
java.awt.ColorPaintContext#dispose()->void::: color paint context dispose
java.awt.ColorPaintContext#getRGB()->int::: color paint context get b
java.awt.ColorPaintContext#getColorModel()->ColorModel::: color paint context get color model
java.awt.ColorPaintContext#getRaster(int, int, int, int)->Raster::: color paint context get raster
java.awt.Component#getObjectLock()->Object::: component get object lock
java.awt.Component#getAccessControlContext()->AccessControlContext::: component get access control context
java.awt.Component#getBoundsOp()->int:::Should only be used in subclass getBounds to check that part of bounds is actually changing
java.awt.Component#setBoundsOp(int)->void::: component set bounds op
java.awt.Component#initializeFocusTraversalKeys()->void::: component initialize focus traversal keys
java.awt.Component#constructComponentName()->String:::Constructs a name for this component
java.awt.Component#getName()->String:::Gets the name of the component.
java.awt.Component#setName(String)->void:::Sets the name of the component to the specified string.
java.awt.Component#getParent()->Container:::Gets the parent of this component.
java.awt.Component#getParent_NoClientCode()->Container::: component get parent_ no client code
java.awt.Component#getContainer()->Container::: component get container
java.awt.Component#setDropTarget(DropTarget)->void::: component set drop target
java.awt.Component#getDropTarget()->DropTarget::: component get drop target
java.awt.Component#getGraphicsConfiguration()->GraphicsConfiguration:::Gets the GraphicsConfiguration associated with this Component
java.awt.Component#getGraphicsConfiguration_NoClientCode()->GraphicsConfiguration::: component get graphics configuration_ no client code
java.awt.Component#setGraphicsConfiguration(GraphicsConfiguration)->void::: component set graphics configuration
java.awt.Component#updateGraphicsData(GraphicsConfiguration)->boolean::: component update graphics data
java.awt.Component#updateChildGraphicsData(GraphicsConfiguration)->boolean::: component update child graphics data
java.awt.Component#checkGD(String)->void:::Checks that this component's GraphicsDevice idString matches the string argument.
java.awt.Component#getTreeLock()->Object:::Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.
java.awt.Component#checkTreeLock()->void::: component check tree lock
java.awt.Component#getToolkit()->Toolkit:::Gets the toolkit of this component
java.awt.Component#getToolkitImpl()->Toolkit::: component get toolkit impl
java.awt.Component#getComponentFactory()->ComponentFactory::: component get component factory
java.awt.Component#isValid()->boolean:::Determines whether this component is valid
java.awt.Component#isDisplayable()->boolean:::Determines whether this component is displayable
java.awt.Component#isVisible()->boolean:::Determines whether this component should be visible when its parent is visible
java.awt.Component#isVisible_NoClientCode()->boolean::: component is visible_ no client code
java.awt.Component#isRecursivelyVisible()->boolean:::Determines whether this component will be displayed on the screen.
java.awt.Component#pointRelativeToComponent(Point)->Point:::Translates absolute coordinates into coordinates in the coordinate space of this component.
java.awt.Component#findUnderMouseInWindow(PointerInfo)->Component:::Assuming that mouse location is stored in PointerInfo passed to this method, it finds a Component that is in the same Window as this Component and is located under the mouse pointer
java.awt.Component#getMousePosition()->Point:::Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null
java.awt.Component#isSameOrAncestorOf(Component, boolean)->boolean:::Overridden in Container
java.awt.Component#isShowing()->boolean:::Determines whether this component is showing on screen
java.awt.Component#isEnabled()->boolean:::Determines whether this component is enabled
java.awt.Component#isEnabledImpl()->boolean::: component is enabled impl
java.awt.Component#setEnabled(boolean)->void:::Enables or disables this component, depending on the value of the parameter b
java.awt.Component#enable()->void::: component enable
java.awt.Component#enable(boolean)->void:::Enables or disables this component.
java.awt.Component#disable()->void::: component disable
java.awt.Component#isDoubleBuffered()->boolean:::Returns true if this component is painted to an offscreen image ("buffer") that's copied to the screen later
java.awt.Component#enableInputMethods(boolean)->void:::Enables or disables input method support for this component
java.awt.Component#setVisible(boolean)->void:::Shows or hides this component depending on the value of parameter b
java.awt.Component#show()->void::: component show
java.awt.Component#show(boolean)->void:::Makes this component visible or invisible.
java.awt.Component#containsFocus()->boolean::: component contains focus
java.awt.Component#clearMostRecentFocusOwnerOnHide()->void::: component clear most recent focus owner on hide
java.awt.Component#clearCurrentFocusCycleRootOnHide()->void::: component clear current focus cycle root on hide
java.awt.Component#hide()->void::: component hide
java.awt.Component#getForeground()->Color:::Gets the foreground color of this component.
java.awt.Component#setForeground(Color)->void:::Sets the foreground color of this component.
java.awt.Component#isForegroundSet()->boolean:::Returns whether the foreground color has been explicitly set for this Component
java.awt.Component#getBackground()->Color:::Gets the background color of this component.
java.awt.Component#setBackground(Color)->void:::Sets the background color of this component
java.awt.Component#isBackgroundSet()->boolean:::Returns whether the background color has been explicitly set for this Component
java.awt.Component#getFont()->Font:::Gets the font of this component.
java.awt.Component#getFont_NoClientCode()->Font::: component get font_ no client code
java.awt.Component#setFont(Font)->void:::Sets the font of this component
java.awt.Component#isFontSet()->boolean:::Returns whether the font has been explicitly set for this Component
java.awt.Component#getLocale()->Locale:::Gets the locale of this component.
java.awt.Component#setLocale(Locale)->void:::Sets the locale of this component
java.awt.Component#getColorModel()->ColorModel:::Gets the instance of ColorModel used to display the component on the output device.
java.awt.Component#getLocation()->Point:::Gets the location of this component in the form of a point specifying the component's top-left corner
java.awt.Component#getLocationOnScreen()->Point:::Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.
java.awt.Component#getLocationOnScreen_NoTreeLock()->Point::: component get location on screen_ no tree lock
java.awt.Component#location()->Point:::Returns the location of this component's top left corner.
java.awt.Component#setLocation(int, int)->void:::Moves this component to a new location
java.awt.Component#move(int, int)->void:::Moves this component to a new location.
java.awt.Component#setLocation(Point)->void:::Moves this component to a new location
java.awt.Component#getSize()->Dimension:::Returns the size of this component in the form of a Dimension object
java.awt.Component#size()->Dimension:::Returns the size of this component in the form of a Dimension object.
java.awt.Component#setSize(int, int)->void:::Resizes this component so that it has width width and height height
java.awt.Component#resize(int, int)->void:::Resizes this component.
java.awt.Component#setSize(Dimension)->void:::Resizes this component so that it has width d.width and height d.height
java.awt.Component#resize(Dimension)->void:::Resizes this component so that it has width d.width and height d.height.
java.awt.Component#getBounds()->Rectangle:::Gets the bounds of this component in the form of a Rectangle object
java.awt.Component#bounds()->Rectangle:::Returns the bounding rectangle of this component.
java.awt.Component#setBounds(int, int, int, int)->void:::Moves and resizes this component
java.awt.Component#reshape(int, int, int, int)->void:::Reshapes the bounding rectangle for this component.
java.awt.Component#setBounds(Rectangle)->void:::Moves and resizes this component to conform to the new bounding rectangle r
java.awt.Component#getX()->int:::Returns the current x coordinate of the components origin
java.awt.Component#getY()->int:::Returns the current y coordinate of the components origin
java.awt.Component#getWidth()->int:::Returns the current width of this component
java.awt.Component#getHeight()->int:::Returns the current height of this component
java.awt.Component#getBounds(Rectangle)->Rectangle:::Stores the bounds of this component into "return value" rv and return rv
java.awt.Component#getSize(Dimension)->Dimension:::Stores the width/height of this component into "return value" rv and return rv
java.awt.Component#getLocation(Point)->Point:::Stores the x,y origin of this component into "return value" rv and return rv
java.awt.Component#isOpaque()->boolean:::Returns true if this component is completely opaque, returns false by default
java.awt.Component#isLightweight()->boolean:::A lightweight component doesn't have a native toolkit peer
java.awt.Component#setPreferredSize(Dimension)->void:::Sets the preferred size of this component to a constant value
java.awt.Component#isPreferredSizeSet()->boolean:::Returns true if the preferred size has been set to a non-null value otherwise returns false.
java.awt.Component#getPreferredSize()->Dimension:::Gets the preferred size of this component.
java.awt.Component#preferredSize()->Dimension:::Returns the component's preferred size.
java.awt.Component#setMinimumSize(Dimension)->void:::Sets the minimum size of this component to a constant value
java.awt.Component#isMinimumSizeSet()->boolean:::Returns whether or not setMinimumSize has been invoked with a non-null value.
java.awt.Component#getMinimumSize()->Dimension:::Gets the minimum size of this component.
java.awt.Component#minimumSize()->Dimension:::Returns the minimum size of this component.
java.awt.Component#setMaximumSize(Dimension)->void:::Sets the maximum size of this component to a constant value
java.awt.Component#isMaximumSizeSet()->boolean:::Returns true if the maximum size has been set to a non-null value otherwise returns false.
java.awt.Component#getMaximumSize()->Dimension:::Gets the maximum size of this component.
java.awt.Component#getAlignmentX()->float:::Returns the alignment along the x axis
java.awt.Component#getAlignmentY()->float:::Returns the alignment along the y axis
java.awt.Component#getBaseline(int, int)->int:::Returns the baseline
java.awt.Component#getBaselineResizeBehavior()->BaselineResizeBehavior:::Returns an enum indicating how the baseline of the component changes as the size changes
java.awt.Component#doLayout()->void:::Prompts the layout manager to lay out this component
java.awt.Component#layout()->void::: component layout
java.awt.Component#validate()->void:::Validates this component
java.awt.Component#invalidate()->void:::Invalidates this component and its ancestors
java.awt.Component#invalidateParent()->void:::Invalidates the parent of this component if any
java.awt.Component#invalidateIfValid()->void:::Invalidates the component unless it is already invalid.
java.awt.Component#revalidate()->void:::Revalidates the component hierarchy up to the nearest validate root
java.awt.Component#revalidateSynchronously()->void:::Revalidates the component synchronously.
java.awt.Component#getGraphics()->Graphics:::Creates a graphics context for this component
java.awt.Component#getGraphics_NoClientCode()->Graphics::: component get graphics_ no client code
java.awt.Component#getFontMetrics(Font)->FontMetrics:::Gets the font metrics for the specified font
java.awt.Component#setCursor(Cursor)->void:::Sets the cursor image to the specified cursor
java.awt.Component#updateCursorImmediately()->void:::Updates the cursor
java.awt.Component#getCursor()->Cursor:::Gets the cursor set in the component
java.awt.Component#getCursor_NoClientCode()->Cursor::: component get cursor_ no client code
java.awt.Component#isCursorSet()->boolean:::Returns whether the cursor has been explicitly set for this Component
java.awt.Component#paint(Graphics)->void:::Paints this component
java.awt.Component#update(Graphics)->void:::Updates this component
java.awt.Component#paintAll(Graphics)->void:::Paints this component and all of its subcomponents
java.awt.Component#lightweightPaint(Graphics)->void:::Simulates the peer callbacks into java.awt for painting of lightweight Components.
java.awt.Component#paintHeavyweightComponents(Graphics)->void:::Paints all the heavyweight subcomponents.
java.awt.Component#repaint()->void:::Repaints this component
java.awt.Component#repaint(long)->void:::Repaints the component
java.awt.Component#repaint(int, int, int, int)->void:::Repaints the specified rectangle of this component
java.awt.Component#repaint(long, int, int, int, int)->void:::Repaints the specified rectangle of this component within tm milliseconds
java.awt.Component#print(Graphics)->void:::Prints this component
java.awt.Component#printAll(Graphics)->void:::Prints this component and all of its subcomponents
java.awt.Component#lightweightPrint(Graphics)->void:::Simulates the peer callbacks into java.awt for printing of lightweight Components.
java.awt.Component#printHeavyweightComponents(Graphics)->void:::Prints all the heavyweight subcomponents.
java.awt.Component#imageUpdate(Image, int, int, int, int, int)->boolean:::Repaints the component when the image has changed
java.awt.Component#createImage(ImageProducer)->Image:::Creates an image from the specified image producer.
java.awt.Component#createImage(int, int)->Image:::Creates an off-screen drawable image to be used for double buffering.
java.awt.Component#createVolatileImage(int, int)->VolatileImage:::Creates a volatile off-screen drawable image to be used for double buffering.
java.awt.Component#createVolatileImage(int, int, ImageCapabilities)->VolatileImage:::Creates a volatile off-screen drawable image, with the given capabilities
java.awt.Component#prepareImage(Image, ImageObserver)->boolean:::Prepares an image for rendering on this component
java.awt.Component#prepareImage(Image, int, int, ImageObserver)->boolean:::Prepares an image for rendering on this component at the specified width and height
java.awt.Component#checkImage(Image, ImageObserver)->int:::Returns the status of the construction of a screen representation of the specified image
java.awt.Component#checkImage(Image, int, int, ImageObserver)->int:::Returns the status of the construction of a screen representation of the specified image
java.awt.Component#createBufferStrategy(int)->void:::Creates a new strategy for multi-buffering on this component
java.awt.Component#createBufferStrategy(int, BufferCapabilities)->void:::Creates a new strategy for multi-buffering on this component with the required buffer capabilities
java.awt.Component#getBufferStrategy()->BufferStrategy::: component get buffer strategy
java.awt.Component#getBackBuffer()->Image::: component get back buffer
java.awt.Component.FlipBufferStrategy#createBuffers(int, BufferCapabilities)->void:::Creates one or more complex, flipping buffers with the given capabilities.
java.awt.Component.FlipBufferStrategy#getBackBuffer()->Image::: flip buffer strategy get back buffer
java.awt.Component.FlipBufferStrategy#flip(BufferCapabilities.FlipContents)->void:::Flipping moves the contents of the back buffer to the front buffer, either by copying or by moving the video pointer.
java.awt.Component.FlipBufferStrategy#flipSubRegion(int, int, int, int, BufferCapabilities.FlipContents)->void::: flip buffer strategy flip sub region
java.awt.Component.FlipBufferStrategy#destroyBuffers()->void:::Destroys the buffers created through this object
java.awt.Component.FlipBufferStrategy#getCapabilities()->BufferCapabilities::: flip buffer strategy get capabilities
java.awt.Component.FlipBufferStrategy#getDrawGraphics()->Graphics::: flip buffer strategy get draw graphics
java.awt.Component.FlipBufferStrategy#revalidate()->void:::Restore the drawing buffer if it has been lost
java.awt.Component.FlipBufferStrategy#revalidate(boolean)->void::: flip buffer strategy revalidate
java.awt.Component.FlipBufferStrategy#contentsLost()->boolean::: flip buffer strategy contents lost
java.awt.Component.FlipBufferStrategy#contentsRestored()->boolean::: flip buffer strategy contents restored
java.awt.Component.FlipBufferStrategy#show()->void:::Makes the next available buffer visible by either blitting or flipping.
java.awt.Component.FlipBufferStrategy#showSubRegion(int, int, int, int)->void:::Makes specified region of the next available buffer visible by either blitting or flipping.
java.awt.Component.FlipBufferStrategy#dispose()->void::: flip buffer strategy dispose
java.awt.Component.BltBufferStrategy#dispose()->void::: blt buffer strategy dispose
java.awt.Component.BltBufferStrategy#createBackBuffers(int)->void:::Creates the back buffers
java.awt.Component.BltBufferStrategy#getCapabilities()->BufferCapabilities::: blt buffer strategy get capabilities
java.awt.Component.BltBufferStrategy#getDrawGraphics()->Graphics::: blt buffer strategy get draw graphics
java.awt.Component.BltBufferStrategy#getBackBuffer()->Image::: blt buffer strategy get back buffer
java.awt.Component.BltBufferStrategy#show()->void:::Makes the next available buffer visible.
java.awt.Component.BltBufferStrategy#showSubRegion(int, int, int, int)->void:::Package-private method to present a specific rectangular area of this buffer
java.awt.Component.BltBufferStrategy#revalidate()->void:::Restore the drawing buffer if it has been lost
java.awt.Component.BltBufferStrategy#revalidate(boolean)->void::: blt buffer strategy revalidate
java.awt.Component.BltBufferStrategy#contentsLost()->boolean::: blt buffer strategy contents lost
java.awt.Component.BltBufferStrategy#contentsRestored()->boolean::: blt buffer strategy contents restored
java.awt.Component#setIgnoreRepaint(boolean)->void:::Sets whether or not paint messages received from the operating system should be ignored
java.awt.Component#getIgnoreRepaint()->boolean::: component get ignore repaint
java.awt.Component#contains(int, int)->boolean:::Checks whether this component "contains" the specified point, where x and y are defined to be relative to the coordinate system of this component.
java.awt.Component#inside(int, int)->boolean:::Checks whether the point is inside of this component.
java.awt.Component#contains(Point)->boolean:::Checks whether this component "contains" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.
java.awt.Component#getComponentAt(int, int)->Component:::Determines if this component or one of its immediate subcomponents contains the (x,&nbsp;y) location, and if so, returns the containing component
java.awt.Component#locate(int, int)->Component:::Returns the component occupying the position specified (this component, or immediate child component, or null if neither of the first two occupies the location).
java.awt.Component#getComponentAt(Point)->Component:::Returns the component or subcomponent that contains the specified point.
java.awt.Component#deliverEvent(Event)->void::: component deliver event
java.awt.Component#dispatchEvent(AWTEvent)->void:::Dispatches an event to this component or one of its sub components
java.awt.Component#dispatchEventImpl(AWTEvent)->void::: component dispatch event impl
java.awt.Component#autoProcessMouseWheel(MouseWheelEvent)->void::: component auto process mouse wheel
java.awt.Component#dispatchMouseWheelToAncestor(MouseWheelEvent)->boolean::: component dispatch mouse wheel to ancestor
java.awt.Component#areInputMethodsEnabled()->boolean::: component are input methods enabled
java.awt.Component#eventEnabled(AWTEvent)->boolean::: component event enabled
java.awt.Component#eventTypeEnabled(int)->boolean::: component event type enabled
java.awt.Component#postEvent(Event)->boolean::: component post event
java.awt.Component#addComponentListener(ComponentListener)->void:::Adds the specified component listener to receive component events from this component
java.awt.Component#removeComponentListener(ComponentListener)->void:::Removes the specified component listener so that it no longer receives component events from this component
java.awt.Component#getComponentListeners()->ComponentListener[]:::Returns an array of all the component listeners registered on this component.
java.awt.Component#addFocusListener(FocusListener)->void:::Adds the specified focus listener to receive focus events from this component when this component gains input focus
java.awt.Component#removeFocusListener(FocusListener)->void:::Removes the specified focus listener so that it no longer receives focus events from this component
java.awt.Component#getFocusListeners()->FocusListener[]:::Returns an array of all the focus listeners registered on this component.
java.awt.Component#addHierarchyListener(HierarchyListener)->void:::Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes
java.awt.Component#removeHierarchyListener(HierarchyListener)->void:::Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component
java.awt.Component#getHierarchyListeners()->HierarchyListener[]:::Returns an array of all the hierarchy listeners registered on this component.
java.awt.Component#addHierarchyBoundsListener(HierarchyBoundsListener)->void:::Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes
java.awt.Component#removeHierarchyBoundsListener(HierarchyBoundsListener)->void:::Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component
java.awt.Component#numListening(long)->int::: component num listening
java.awt.Component#countHierarchyMembers()->int::: component count hierarchy members
java.awt.Component#createHierarchyEvents(int, Component, Container, long, boolean)->int::: component create hierarchy events
java.awt.Component#getHierarchyBoundsListeners()->HierarchyBoundsListener[]:::Returns an array of all the hierarchy bounds listeners registered on this component.
java.awt.Component#adjustListeningChildrenOnParent(long, int)->void::: component adjust listening children on parent
java.awt.Component#addKeyListener(KeyListener)->void:::Adds the specified key listener to receive key events from this component
java.awt.Component#removeKeyListener(KeyListener)->void:::Removes the specified key listener so that it no longer receives key events from this component
java.awt.Component#getKeyListeners()->KeyListener[]:::Returns an array of all the key listeners registered on this component.
java.awt.Component#addMouseListener(MouseListener)->void:::Adds the specified mouse listener to receive mouse events from this component
java.awt.Component#removeMouseListener(MouseListener)->void:::Removes the specified mouse listener so that it no longer receives mouse events from this component
java.awt.Component#getMouseListeners()->MouseListener[]:::Returns an array of all the mouse listeners registered on this component.
java.awt.Component#addMouseMotionListener(MouseMotionListener)->void:::Adds the specified mouse motion listener to receive mouse motion events from this component
java.awt.Component#removeMouseMotionListener(MouseMotionListener)->void:::Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component
java.awt.Component#getMouseMotionListeners()->MouseMotionListener[]:::Returns an array of all the mouse motion listeners registered on this component.
java.awt.Component#addMouseWheelListener(MouseWheelListener)->void:::Adds the specified mouse wheel listener to receive mouse wheel events from this component
java.awt.Component#removeMouseWheelListener(MouseWheelListener)->void:::Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component
java.awt.Component#getMouseWheelListeners()->MouseWheelListener[]:::Returns an array of all the mouse wheel listeners registered on this component.
java.awt.Component#addInputMethodListener(InputMethodListener)->void:::Adds the specified input method listener to receive input method events from this component
java.awt.Component#removeInputMethodListener(InputMethodListener)->void:::Removes the specified input method listener so that it no longer receives input method events from this component
java.awt.Component#getInputMethodListeners()->InputMethodListener[]:::Returns an array of all the input method listeners registered on this component.
java.awt.Component#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Component
java.awt.Component#getInputMethodRequests()->InputMethodRequests:::Gets the input method request handler which supports requests from input methods for this component
java.awt.Component#getInputContext()->InputContext:::Gets the input context used by this component for handling the communication with input methods when text is entered in this component
java.awt.Component#enableEvents(long)->void:::Enables the events defined by the specified event mask parameter to be delivered to this component
java.awt.Component#disableEvents(long)->void:::Disables the events defined by the specified event mask parameter from being delivered to this component.
java.awt.Component#isCoalescingEnabled()->boolean:::Indicates whether coalesceEvents may do something.
java.awt.Component#coalesceEvents(AWTEvent, AWTEvent)->AWTEvent:::Potentially coalesce an event being posted with an existing event
java.awt.Component#processEvent(AWTEvent)->void:::Processes events occurring on this component
java.awt.Component#processComponentEvent(ComponentEvent)->void:::Processes component events occurring on this component by dispatching them to any registered ComponentListener objects
java.awt.Component#processFocusEvent(FocusEvent)->void:::Processes focus events occurring on this component by dispatching them to any registered FocusListener objects
java.awt.Component#processKeyEvent(KeyEvent)->void:::Processes key events occurring on this component by dispatching them to any registered KeyListener objects
java.awt.Component#processMouseEvent(MouseEvent)->void:::Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects
java.awt.Component#processMouseMotionEvent(MouseEvent)->void:::Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects
java.awt.Component#processMouseWheelEvent(MouseWheelEvent)->void:::Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects
java.awt.Component#postsOldMouseEvents()->boolean::: component posts old mouse events
java.awt.Component#processInputMethodEvent(InputMethodEvent)->void:::Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects
java.awt.Component#processHierarchyEvent(HierarchyEvent)->void:::Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects
java.awt.Component#processHierarchyBoundsEvent(HierarchyEvent)->void:::Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects
java.awt.Component#handleEvent(Event)->boolean::: component handle event
java.awt.Component#mouseDown(Event, int, int)->boolean::: component mouse down
java.awt.Component#mouseDrag(Event, int, int)->boolean::: component mouse drag
java.awt.Component#mouseUp(Event, int, int)->boolean::: component mouse up
java.awt.Component#mouseMove(Event, int, int)->boolean::: component mouse move
java.awt.Component#mouseEnter(Event, int, int)->boolean::: component mouse enter
java.awt.Component#mouseExit(Event, int, int)->boolean::: component mouse exit
java.awt.Component#keyDown(Event, int)->boolean::: component key down
java.awt.Component#keyUp(Event, int)->boolean::: component key up
java.awt.Component#action(Event, Object)->boolean::: component action
java.awt.Component#addNotify()->void:::Makes this Component displayable by connecting it to a native screen resource
java.awt.Component#removeNotify()->void:::Makes this Component undisplayable by destroying it native screen resource
java.awt.Component#gotFocus(Event, Object)->boolean::: component got focus
java.awt.Component#lostFocus(Event, Object)->boolean::: component lost focus
java.awt.Component#isFocusTraversable()->boolean:::Returns whether this Component can become the focus owner.
java.awt.Component#isFocusable()->boolean:::Returns whether this Component can be focused.
java.awt.Component#setFocusable(boolean)->void:::Sets the focusable state of this Component to the specified value
java.awt.Component#isFocusTraversableOverridden()->boolean::: component is focus traversable overridden
java.awt.Component#setFocusTraversalKeys(int, Set)->void:::Sets the focus traversal keys for a given traversal operation for this Component
java.awt.Component#getFocusTraversalKeys(int)->Set:::Returns the Set of focus traversal keys for a given traversal operation for this Component
java.awt.Component#setFocusTraversalKeys_NoIDCheck(int, Set)->void::: component set focus traversal keys_ no check
java.awt.Component#getFocusTraversalKeys_NoIDCheck(int)->Set::: component get focus traversal keys_ no check
java.awt.Component#areFocusTraversalKeysSet(int)->boolean:::Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component
java.awt.Component#setFocusTraversalKeysEnabled(boolean)->void:::Sets whether focus traversal keys are enabled for this Component
java.awt.Component#getFocusTraversalKeysEnabled()->boolean:::Returns whether focus traversal keys are enabled for this Component
java.awt.Component#requestFocus()->void:::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
java.awt.Component#requestFocus(FocusEvent.Cause)->void:::Requests by the reason of cause that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
java.awt.Component#requestFocus(boolean)->boolean:::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
java.awt.Component#requestFocus(boolean, FocusEvent.Cause)->boolean:::Requests by the reason of cause that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
java.awt.Component#requestFocusInWindow()->boolean:::Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window
java.awt.Component#requestFocusInWindow(FocusEvent.Cause)->boolean:::Requests by the reason of cause that this Component get the input focus, if this Component's top-level ancestor is already the focused Window
java.awt.Component#requestFocusInWindow(boolean)->boolean:::Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window
java.awt.Component#requestFocusInWindow(boolean, FocusEvent.Cause)->boolean::: component request focus in window
java.awt.Component#requestFocusHelper(boolean, boolean)->boolean::: component request focus helper
java.awt.Component#requestFocusHelper(boolean, boolean, FocusEvent.Cause)->boolean::: component request focus helper
java.awt.Component#setRequestFocusController(RequestFocusController)->void::: component set request focus controller
java.awt.Component#getFocusCycleRootAncestor()->Container:::Returns the Container which is the focus cycle root of this Component's focus traversal cycle
java.awt.Component#isFocusCycleRoot(Container)->boolean:::Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle
java.awt.Component#getTraversalRoot()->Container::: component get traversal root
java.awt.Component#transferFocus()->void:::Transfers the focus to the next component, as though this Component were the focus owner.
java.awt.Component#nextFocus()->void::: component next focus
java.awt.Component#transferFocus(boolean)->boolean::: component transfer focus
java.awt.Component#getNextFocusCandidate()->Component::: component get next focus candidate
java.awt.Component#transferFocusBackward()->void:::Transfers the focus to the previous component, as though this Component were the focus owner.
java.awt.Component#transferFocusBackward(boolean)->boolean::: component transfer focus backward
java.awt.Component#transferFocusUpCycle()->void:::Transfers the focus up one focus traversal cycle
java.awt.Component#hasFocus()->boolean:::Returns true if this Component is the focus owner
java.awt.Component#isFocusOwner()->boolean:::Returns true if this Component is the    focus owner.
java.awt.Component#setAutoFocusTransferOnDisposal(boolean)->void::: component set auto focus transfer on disposal
java.awt.Component#isAutoFocusTransferOnDisposal()->boolean::: component is auto focus transfer on disposal
java.awt.Component#add(PopupMenu)->void:::Adds the specified popup menu to the component.
java.awt.Component#remove(MenuComponent)->void:::Removes the specified popup menu from the component.
java.awt.Component#paramString()->String:::Returns a string representing the state of this component
java.awt.Component#toString()->String:::Returns a string representation of this component and its values.
java.awt.Component#list()->void:::Prints a listing of this component to the standard system output stream System.out.
java.awt.Component#list(PrintStream)->void:::Prints a listing of this component to the specified output stream.
java.awt.Component#list(PrintStream, int)->void:::Prints out a list, starting at the specified indentation, to the specified print stream.
java.awt.Component#list(PrintWriter)->void:::Prints a listing to the specified print writer.
java.awt.Component#list(PrintWriter, int)->void:::Prints out a list, starting at the specified indentation, to the specified print writer.
java.awt.Component#getNativeContainer()->Container::: component get native container
java.awt.Component#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
java.awt.Component#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
java.awt.Component#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this component.
java.awt.Component#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
java.awt.Component#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list for a specific property
java.awt.Component#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all the listeners which have been associated with the named property.
java.awt.Component#firePropertyChange(String, Object, Object)->void:::Support for reporting bound property changes for Object properties
java.awt.Component#firePropertyChange(String, boolean, boolean)->void:::Support for reporting bound property changes for boolean properties
java.awt.Component#firePropertyChange(String, int, int)->void:::Support for reporting bound property changes for integer properties
java.awt.Component#firePropertyChange(String, byte, byte)->void:::Reports a bound property change.
java.awt.Component#firePropertyChange(String, char, char)->void:::Reports a bound property change.
java.awt.Component#firePropertyChange(String, short, short)->void:::Reports a bound property change.
java.awt.Component#firePropertyChange(String, long, long)->void:::Reports a bound property change.
java.awt.Component#firePropertyChange(String, float, float)->void:::Reports a bound property change.
java.awt.Component#firePropertyChange(String, double, double)->void:::Reports a bound property change.
java.awt.Component#setComponentOrientation(ComponentOrientation)->void:::Sets the language-sensitive orientation that is to be used to order the elements or text within this component
java.awt.Component#getComponentOrientation()->ComponentOrientation:::Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component
java.awt.Component#applyComponentOrientation(ComponentOrientation)->void:::Sets the ComponentOrientation property of this component and all components contained within it
java.awt.Component#canBeFocusOwner()->boolean::: component can be focus owner
java.awt.Component#canBeFocusOwnerRecursively()->boolean:::Checks that this component meets the prerequisites to be focus owner: - it is enabled, visible, focusable - it's parents are all enabled and showing - top-level window is focusable - if focus cycle root has DefaultFocusTraversalPolicy then it also checks that this policy accepts this component as focus owner
java.awt.Component#relocateComponent()->void:::Fix the location of the HW component in a LW container hierarchy.
java.awt.Component#getContainingWindow()->Window:::Returns the Window ancestor of the component.
java.awt.Component#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Component
java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentHidden(ComponentEvent)->void::: accessible component handler component hidden
java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentShown(ComponentEvent)->void::: accessible component handler component shown
java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentMoved(ComponentEvent)->void::: accessible component handler component moved
java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentResized(ComponentEvent)->void::: accessible component handler component resized
java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler#focusGained(FocusEvent)->void::: accessible focus handler focus gained
java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler#focusLost(FocusEvent)->void::: accessible focus handler focus lost
java.awt.Component.AccessibleAWTComponent#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list.
java.awt.Component.AccessibleAWTComponent#removePropertyChangeListener(PropertyChangeListener)->void:::Remove a PropertyChangeListener from the listener list
java.awt.Component.AccessibleAWTComponent#getAccessibleName()->String:::Gets the accessible name of this object
java.awt.Component.AccessibleAWTComponent#getAccessibleDescription()->String:::Gets the accessible description of this object
java.awt.Component.AccessibleAWTComponent#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
java.awt.Component.AccessibleAWTComponent#getAccessibleStateSet()->AccessibleStateSet:::Gets the state of this object.
java.awt.Component.AccessibleAWTComponent#getAccessibleParent()->Accessible:::Gets the Accessible parent of this object
java.awt.Component.AccessibleAWTComponent#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent.
java.awt.Component.AccessibleAWTComponent#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
java.awt.Component.AccessibleAWTComponent#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
java.awt.Component.AccessibleAWTComponent#getLocale()->Locale:::Returns the locale of this object.
java.awt.Component.AccessibleAWTComponent#getAccessibleComponent()->AccessibleComponent:::Gets the AccessibleComponent associated with this object if one exists
java.awt.Component.AccessibleAWTComponent#getBackground()->Color:::Gets the background color of this object.
java.awt.Component.AccessibleAWTComponent#setBackground(Color)->void:::Sets the background color of this object
java.awt.Component.AccessibleAWTComponent#getForeground()->Color:::Gets the foreground color of this object.
java.awt.Component.AccessibleAWTComponent#setForeground(Color)->void:::Sets the foreground color of this object.
java.awt.Component.AccessibleAWTComponent#getCursor()->Cursor:::Gets the Cursor of this object.
java.awt.Component.AccessibleAWTComponent#setCursor(Cursor)->void:::Sets the Cursor of this object
java.awt.Component.AccessibleAWTComponent#getFont()->Font:::Gets the Font of this object.
java.awt.Component.AccessibleAWTComponent#setFont(Font)->void:::Sets the Font of this object.
java.awt.Component.AccessibleAWTComponent#getFontMetrics(Font)->FontMetrics:::Gets the FontMetrics of this object.
java.awt.Component.AccessibleAWTComponent#isEnabled()->boolean:::Determines if the object is enabled.
java.awt.Component.AccessibleAWTComponent#setEnabled(boolean)->void:::Sets the enabled state of the object.
java.awt.Component.AccessibleAWTComponent#isVisible()->boolean:::Determines if the object is visible
java.awt.Component.AccessibleAWTComponent#setVisible(boolean)->void:::Sets the visible state of the object.
java.awt.Component.AccessibleAWTComponent#isShowing()->boolean:::Determines if the object is showing
java.awt.Component.AccessibleAWTComponent#contains(Point)->boolean:::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.
java.awt.Component.AccessibleAWTComponent#getLocationOnScreen()->Point:::Returns the location of the object on the screen.
java.awt.Component.AccessibleAWTComponent#getLocation()->Point:::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.
java.awt.Component.AccessibleAWTComponent#setLocation(Point)->void:::Sets the location of the object relative to the parent.
java.awt.Component.AccessibleAWTComponent#getBounds()->Rectangle:::Gets the bounds of this object in the form of a Rectangle object
java.awt.Component.AccessibleAWTComponent#setBounds(Rectangle)->void:::Sets the bounds of this object in the form of a Rectangle object
java.awt.Component.AccessibleAWTComponent#getSize()->Dimension:::Returns the size of this object in the form of a Dimension object
java.awt.Component.AccessibleAWTComponent#setSize(Dimension)->void:::Resizes this object so that it has width and height.
java.awt.Component.AccessibleAWTComponent#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point
java.awt.Component.AccessibleAWTComponent#isFocusTraversable()->boolean:::Returns whether this object can accept focus or not.
java.awt.Component.AccessibleAWTComponent#requestFocus()->void:::Requests focus for this object.
java.awt.Component.AccessibleAWTComponent#addFocusListener(FocusListener)->void:::Adds the specified focus listener to receive focus events from this component.
java.awt.Component.AccessibleAWTComponent#removeFocusListener(FocusListener)->void:::Removes the specified focus listener so it no longer receives focus events from this component.
java.awt.Component#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent
java.awt.Component#getAccessibleStateSet()->AccessibleStateSet:::Gets the current state set of this object.
java.awt.Component#isInstanceOf(Object, String)->boolean:::Checks that the given object is instance of the given class.
java.awt.Component#areBoundsValid()->boolean:::Check whether we can trust the current bounds of the component
java.awt.Component#applyCompoundShape(Region)->void:::Applies the shape to the component
java.awt.Component#getLocationOnWindow()->Point::: component get location on window
java.awt.Component#getNormalShape()->Region:::Returns the full shape of the component located in window coordinates
java.awt.Component#getOpaqueShape()->Region:::Returns the "opaque shape" of the component
java.awt.Component#getSiblingIndexAbove()->int::: component get sibling index above
java.awt.Component#getHWPeerAboveMe()->ComponentPeer::: component get peer above me
java.awt.Component#getSiblingIndexBelow()->int::: component get sibling index below
java.awt.Component#isNonOpaqueForMixing()->boolean::: component is non opaque for mixing
java.awt.Component#applyCurrentShape()->void::: component apply current shape
java.awt.Component#subtractAndApplyShape(Region)->void::: component subtract and apply shape
java.awt.Component#subtractAndApplyShapeBelowMe()->void::: component subtract and apply shape below me
java.awt.Component#mixOnShowing()->void::: component mix on showing
java.awt.Component#mixOnHiding(boolean)->void::: component mix on hiding
java.awt.Component#mixOnReshaping()->void::: component mix on reshaping
java.awt.Component#mixOnZOrderChanging(int, int)->void::: component mix on order changing
java.awt.Component#mixOnValidating()->void::: component mix on validating
java.awt.Component#isMixingNeeded()->boolean::: component is mixing needed
java.awt.Component#setMixingCutoutShape(Shape)->void:::Sets a 'mixing-cutout' shape for this lightweight component
java.awt.Component#updateZOrder()->void::: component update order
java.awt.ComponentOrientation#isHorizontal()->boolean:::Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman.
java.awt.ComponentOrientation#isLeftToRight()->boolean:::HorizontalLines: Do items run left-to-right?<br> Vertical Lines:  Do lines run left-to-right?<br> This will return true for horizontal, left-to-right writing systems such as Roman.
java.awt.ComponentOrientation#getOrientation(Locale)->ComponentOrientation:::Returns the orientation that is appropriate for the given locale.
java.awt.ComponentOrientation#getOrientation(ResourceBundle)->ComponentOrientation:::Returns the orientation appropriate for the given ResourceBundle's localization
java.awt.Composite#createContext(ColorModel, ColorModel, RenderingHints)->CompositeContext:::Creates a context containing state that is used to perform the compositing operation
java.awt.CompositeContext#dispose()->void:::Releases resources allocated for a context.
java.awt.CompositeContext#compose(Raster, Raster, WritableRaster)->void:::Composes the two source Raster objects and places the result in the destination WritableRaster
java.awt.Conditional#evaluate()->boolean::: conditional evaluate
java.awt.Container#initializeFocusTraversalKeys()->void::: container initialize focus traversal keys
java.awt.Container#getComponentCount()->int:::Gets the number of components in this panel
java.awt.Container#countComponents()->int:::Returns the number of components in this container.
java.awt.Container#getComponent(int)->Component:::Gets the nth component in this container
java.awt.Container#getComponents()->Component[]:::Gets all the components in this container
java.awt.Container#getComponents_NoClientCode()->Component[]::: container get components_ no client code
java.awt.Container#getComponentsSync()->Component[]::: container get components sync
java.awt.Container#getInsets()->Insets:::Determines the insets of this container, which indicate the size of the container's border
java.awt.Container#insets()->Insets:::Returns the insets for this container.
java.awt.Container#add(Component)->Component:::Appends the specified component to the end of this container
java.awt.Container#add(String, Component)->Component:::Adds the specified component to this container
java.awt.Container#add(Component, int)->Component:::Adds the specified component to this container at the given position
java.awt.Container#canContainFocusOwner(Component)->boolean:::Checks whether this container can contain component which is focus owner
java.awt.Container#hasHeavyweightDescendants()->boolean:::Checks whether or not this container has heavyweight children
java.awt.Container#hasLightweightDescendants()->boolean:::Checks whether or not this container has lightweight children
java.awt.Container#getHeavyweightContainer()->Container:::Returns closest heavyweight component to this container
java.awt.Container#setComponentZOrder(Component, int)->void:::Moves the specified component to the specified z-order index in the container
java.awt.Container#getComponentZOrder(Component)->int:::Returns the z-order index of the component inside the container
java.awt.Container#add(Component, Object)->void:::Adds the specified component to the end of this container
java.awt.Container#add(Component, Object, int)->void:::Adds the specified component to this container with the specified constraints at the specified index
java.awt.Container#addImpl(Component, Object, int)->void:::Adds the specified component to this container at the specified index
java.awt.Container#updateChildGraphicsData(GraphicsConfiguration)->boolean::: container update child graphics data
java.awt.Container#checkGD(String)->void:::Checks that all Components that this Container contains are on the same GraphicsDevice as this Container
java.awt.Container#remove(int)->void:::Removes the component, specified by index, from this container
java.awt.Container#remove(Component)->void:::Removes the specified component from this container
java.awt.Container#removeAll()->void:::Removes all the components from this container
java.awt.Container#numListening(long)->int::: container num listening
java.awt.Container#adjustListeningChildren(long, int)->void::: container adjust listening children
java.awt.Container#adjustDescendants(int)->void::: container adjust descendants
java.awt.Container#adjustDescendantsOnParent(int)->void::: container adjust descendants on parent
java.awt.Container#countHierarchyMembers()->int::: container count hierarchy members
java.awt.Container#createHierarchyEvents(int, Component, Container, long, boolean)->int::: container create hierarchy events
java.awt.Container#createChildHierarchyEvents(int, long, boolean)->void::: container create child hierarchy events
java.awt.Container#getLayout()->LayoutManager:::Gets the layout manager for this container.
java.awt.Container#setLayout(LayoutManager)->void:::Sets the layout manager for this container
java.awt.Container#doLayout()->void:::Causes this container to lay out its components
java.awt.Container#layout()->void::: container layout
java.awt.Container#isValidateRoot()->boolean:::Indicates if this container is a validate root
java.awt.Container#invalidateParent()->void:::Invalidates the parent of the container unless the container is a validate root.
java.awt.Container#invalidate()->void:::Invalidates the container
java.awt.Container#validate()->void:::Validates this container and all of its subcomponents
java.awt.Container#validateUnconditionally()->void:::Unconditionally validate the component hierarchy.
java.awt.Container#validateTree()->void:::Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid)
java.awt.Container#invalidateTree()->void:::Recursively descends the container tree and invalidates all contained components.
java.awt.Container#setFont(Font)->void:::Sets the font of this container
java.awt.Container#getPreferredSize()->Dimension:::Returns the preferred size of this container
java.awt.Container#preferredSize()->Dimension::: container preferred size
java.awt.Container#getMinimumSize()->Dimension:::Returns the minimum size of this container
java.awt.Container#minimumSize()->Dimension::: container minimum size
java.awt.Container#getMaximumSize()->Dimension:::Returns the maximum size of this container
java.awt.Container#getAlignmentX()->float:::Returns the alignment along the x axis
java.awt.Container#getAlignmentY()->float:::Returns the alignment along the y axis
java.awt.Container#paint(Graphics)->void:::Paints the container
java.awt.Container#update(Graphics)->void:::Updates the container
java.awt.Container#print(Graphics)->void:::Prints the container
java.awt.Container#paintComponents(Graphics)->void:::Paints each of the components in this container.
java.awt.Container#lightweightPaint(Graphics)->void:::Simulates the peer callbacks into java.awt for printing of lightweight Containers.
java.awt.Container#paintHeavyweightComponents(Graphics)->void:::Prints all the heavyweight subcomponents.
java.awt.Container#printComponents(Graphics)->void:::Prints each of the components in this container.
java.awt.Container#lightweightPrint(Graphics)->void:::Simulates the peer callbacks into java.awt for printing of lightweight Containers.
java.awt.Container#printHeavyweightComponents(Graphics)->void:::Prints all the heavyweight subcomponents.
java.awt.Container#addContainerListener(ContainerListener)->void:::Adds the specified container listener to receive container events from this container
java.awt.Container#removeContainerListener(ContainerListener)->void:::Removes the specified container listener so it no longer receives container events from this container
java.awt.Container#getContainerListeners()->ContainerListener[]:::Returns an array of all the container listeners registered on this container.
java.awt.Container#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Container
java.awt.Container#eventEnabled(AWTEvent)->boolean::: container event enabled
java.awt.Container#processEvent(AWTEvent)->void:::Processes events on this container
java.awt.Container#processContainerEvent(ContainerEvent)->void:::Processes container events occurring on this container by dispatching them to any registered ContainerListener objects
java.awt.Container#dispatchEventImpl(AWTEvent)->void::: container dispatch event impl
java.awt.Container#dispatchEventToSelf(AWTEvent)->void::: container dispatch event to self
java.awt.Container#getMouseEventTarget(int, int, boolean)->Component:::Fetches the top-most (deepest) lightweight component that is interested in receiving mouse events.
java.awt.Container#getDropTargetEventTarget(int, int, boolean)->Component:::Fetches the top-most (deepest) component to receive SunDropTargetEvents.
java.awt.Container.EventTargetFilter#accept(Component)->boolean::: event target filter accept
java.awt.Container.MouseEventTargetFilter#accept(Component)->boolean::: mouse event target filter accept
java.awt.Container.DropTargetEventTargetFilter#accept(Component)->boolean::: drop target event target filter accept
java.awt.Container#proxyEnableEvents(long)->void:::This is called by lightweight components that want the containing windowed parent to enable some kind of events on their behalf
java.awt.Container#deliverEvent(Event)->void::: container deliver event
java.awt.Container#getComponentAt(int, int)->Component:::Locates the component that contains the x,y position
java.awt.Container#locate(int, int)->Component::: container locate
java.awt.Container#getComponentAt(Point)->Component:::Gets the component that contains the specified point.
java.awt.Container#getMousePosition(boolean)->Point:::Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null
java.awt.Container#isSameOrAncestorOf(Component, boolean)->boolean::: container is same or ancestor of
java.awt.Container#findComponentAt(int, int)->Component:::Locates the visible child component that contains the specified position
java.awt.Container#findComponentAt(int, int, boolean)->Component:::Private version of findComponentAt which has a controllable behavior
java.awt.Container#findComponentAtImpl(int, int, boolean)->Component::: container find component at impl
java.awt.Container#findComponentAt(Point)->Component:::Locates the visible child component that contains the specified point
java.awt.Container#addNotify()->void:::Makes this Container displayable by connecting it to a native screen resource
java.awt.Container#removeNotify()->void:::Makes this Container undisplayable by removing its connection to its native screen resource
java.awt.Container#isAncestorOf(Component)->boolean:::Checks if the component is contained in the component hierarchy of this container.
java.awt.Container.WakingRunnable#run()->void::: waking runnable run
java.awt.Container#paramString()->String:::Returns a string representing the state of this Container
java.awt.Container#list(PrintStream, int)->void:::Prints a listing of this container to the specified output stream
java.awt.Container#list(PrintWriter, int)->void:::Prints out a list, starting at the specified indentation, to the specified print writer
java.awt.Container#setFocusTraversalKeys(int, Set)->void:::Sets the focus traversal keys for a given traversal operation for this Container
java.awt.Container#getFocusTraversalKeys(int)->Set:::Returns the Set of focus traversal keys for a given traversal operation for this Container
java.awt.Container#areFocusTraversalKeysSet(int)->boolean:::Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Container
java.awt.Container#isFocusCycleRoot(Container)->boolean:::Returns whether the specified Container is the focus cycle root of this Container's focus traversal cycle
java.awt.Container#containsFocus()->boolean::: container contains focus
java.awt.Container#clearMostRecentFocusOwnerOnHide()->void::: container clear most recent focus owner on hide
java.awt.Container#clearCurrentFocusCycleRootOnHide()->void::: container clear current focus cycle root on hide
java.awt.Container#getTraversalRoot()->Container::: container get traversal root
java.awt.Container#setFocusTraversalPolicy(FocusTraversalPolicy)->void:::Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root
java.awt.Container#getFocusTraversalPolicy()->FocusTraversalPolicy:::Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root
java.awt.Container#isFocusTraversalPolicySet()->boolean:::Returns whether the focus traversal policy has been explicitly set for this Container
java.awt.Container#setFocusCycleRoot(boolean)->void:::Sets whether this Container is the root of a focus traversal cycle
java.awt.Container#isFocusCycleRoot()->boolean:::Returns whether this Container is the root of a focus traversal cycle
java.awt.Container#setFocusTraversalPolicyProvider(boolean)->void:::Sets whether this container will be used to provide focus traversal policy
java.awt.Container#isFocusTraversalPolicyProvider()->boolean:::Returns whether this container provides focus traversal policy
java.awt.Container#transferFocusDownCycle()->void:::Transfers the focus down one focus traversal cycle
java.awt.Container#preProcessKeyEvent(KeyEvent)->void::: container pre process key event
java.awt.Container#postProcessKeyEvent(KeyEvent)->void::: container post process key event
java.awt.Container#postsOldMouseEvents()->boolean::: container posts old mouse events
java.awt.Container#applyComponentOrientation(ComponentOrientation)->void:::Sets the ComponentOrientation property of this container and all components contained within it
java.awt.Container#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
java.awt.Container#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
java.awt.Container.AccessibleAWTContainer#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
java.awt.Container.AccessibleAWTContainer#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
java.awt.Container.AccessibleAWTContainer#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point.
java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler#componentAdded(ContainerEvent)->void::: accessible container handler component added
java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler#componentRemoved(ContainerEvent)->void::: accessible container handler component removed
java.awt.Container.AccessibleAWTContainer#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list.
java.awt.Container.AccessibleAWTContainer#removePropertyChangeListener(PropertyChangeListener)->void:::Remove a PropertyChangeListener from the listener list
java.awt.Container#getAccessibleAt(Point)->Accessible:::Returns the Accessible child contained at the local coordinate Point, if one exists
java.awt.Container#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
java.awt.Container#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
java.awt.Container#increaseComponentCount(Component)->void::: container increase component count
java.awt.Container#decreaseComponentCount(Component)->void::: container decrease component count
java.awt.Container#getOpaqueShape()->Region::: container get opaque shape
java.awt.Container#recursiveSubtractAndApplyShape(Region)->void::: container recursive subtract and apply shape
java.awt.Container#recursiveSubtractAndApplyShape(Region, int)->void::: container recursive subtract and apply shape
java.awt.Container#recursiveSubtractAndApplyShape(Region, int, int)->void::: container recursive subtract and apply shape
java.awt.Container#recursiveApplyCurrentShape()->void::: container recursive apply current shape
java.awt.Container#recursiveApplyCurrentShape(int)->void::: container recursive apply current shape
java.awt.Container#recursiveApplyCurrentShape(int, int)->void::: container recursive apply current shape
java.awt.Container#isRecursivelyVisibleUpToHeavyweightContainer()->boolean:::Checks if the container and its direct lightweight containers are visible
java.awt.Container#mixOnShowing()->void::: container mix on showing
java.awt.Container#mixOnHiding(boolean)->void::: container mix on hiding
java.awt.Container#mixOnReshaping()->void::: container mix on reshaping
java.awt.Container#mixOnZOrderChanging(int, int)->void::: container mix on order changing
java.awt.Container#mixOnValidating()->void::: container mix on validating
java.awt.LightweightDispatcher#dispose()->void::: lightweight dispatcher dispose
java.awt.LightweightDispatcher#enableEvents(long)->void:::Enables events to subcomponents.
java.awt.LightweightDispatcher#dispatchEvent(AWTEvent)->boolean:::Dispatches an event to a sub-component if necessary, and returns whether or not the event was forwarded to a sub-component.
java.awt.LightweightDispatcher#eventDispatched(AWTEvent)->void::: lightweight dispatcher event dispatched
java.awt.LightweightDispatcher#retargetMouseEvent(Component, int, MouseEvent)->void:::Sends a mouse event to the current mouse event recipient using the given event (sent to the windowed host) as a srcEvent
java.awt.ContainerOrderFocusTraversalPolicy#getComponentAfter(Container, Component)->Component:::Returns the Component that should receive the focus after aComponent
java.awt.ContainerOrderFocusTraversalPolicy#getComponentBefore(Container, Component)->Component:::Returns the Component that should receive the focus before aComponent
java.awt.ContainerOrderFocusTraversalPolicy#getFirstComponent(Container)->Component:::Returns the first Component in the traversal cycle
java.awt.ContainerOrderFocusTraversalPolicy#getLastComponent(Container)->Component:::Returns the last Component in the traversal cycle
java.awt.ContainerOrderFocusTraversalPolicy#getDefaultComponent(Container)->Component:::Returns the default Component to focus
java.awt.ContainerOrderFocusTraversalPolicy#setImplicitDownCycleTraversal(boolean)->void:::Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly
java.awt.ContainerOrderFocusTraversalPolicy#getImplicitDownCycleTraversal()->boolean:::Returns whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly
java.awt.ContainerOrderFocusTraversalPolicy#accept(Component)->boolean:::Determines whether a Component is an acceptable choice as the new focus owner
java.awt.Cursor.CursorDisposer#dispose()->void::: cursor disposer dispose
java.awt.Cursor#getPredefinedCursor(int)->Cursor:::Returns a cursor object with the specified predefined type.
java.awt.Cursor#getSystemCustomCursor(String)->Cursor:::Returns a system-specific custom cursor object matching the specified name
java.awt.Cursor#getDefaultCursor()->Cursor:::Return the system default cursor.
java.awt.Cursor#getType()->int:::Returns the type for this cursor.
java.awt.Cursor#getName()->String:::Returns the name of this cursor.
java.awt.Cursor#toString()->String:::Returns a string representation of this cursor.
java.awt.DefaultFocusTraversalPolicy#accept(Component)->boolean:::Determines whether a Component is an acceptable choice as the new focus owner
java.awt.DefaultKeyboardFocusManager#sendMessage(Component, AWTEvent)->boolean:::Sends a synthetic AWTEvent to a Component
java.awt.DefaultKeyboardFocusManager#dispatchEvent(AWTEvent)->boolean:::This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf
java.awt.DefaultKeyboardFocusManager#dispatchKeyEvent(KeyEvent)->boolean:::Called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered
java.awt.DefaultKeyboardFocusManager#postProcessKeyEvent(KeyEvent)->boolean:::This method will be called by dispatchKeyEvent
java.awt.DefaultKeyboardFocusManager#dumpMarkers()->void:::Dumps the list of type-ahead queue markers to stderr
java.awt.DefaultKeyboardFocusManager#clearMarkers()->void:::Clears markers queue
java.awt.DefaultKeyboardFocusManager#processKeyEvent(Component, KeyEvent)->void:::This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent
java.awt.DefaultKeyboardFocusManager#enqueueKeyEvents(long, Component)->void:::Delays dispatching of KeyEvents until the specified Component becomes the focus owner
java.awt.DefaultKeyboardFocusManager#dequeueKeyEvents(long, Component)->void:::Releases for normal dispatching to the current focus owner all KeyEvents which were enqueued because of a call to enqueueKeyEvents with the same timestamp and Component
java.awt.DefaultKeyboardFocusManager#discardKeyEvents(Component)->void:::Discards all KeyEvents which were enqueued because of one or more calls to enqueueKeyEvents with the specified Component, or one of its descendants.
java.awt.DefaultKeyboardFocusManager#focusPreviousComponent(Component)->void:::Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.
java.awt.DefaultKeyboardFocusManager#focusNextComponent(Component)->void:::Focuses the Component after aComponent, typically based on a FocusTraversalPolicy.
java.awt.DefaultKeyboardFocusManager#upFocusCycle(Component)->void:::Moves the focus up one focus traversal cycle
java.awt.DefaultKeyboardFocusManager#downFocusCycle(Container)->void:::Moves the focus down one focus traversal cycle
java.awt.Desktop#getDesktop()->Desktop:::Returns the Desktop instance of the current desktop context
java.awt.Desktop#isDesktopSupported()->boolean:::Tests whether this class is supported on the current platform
java.awt.Desktop#isSupported(Action)->boolean:::Tests whether an action is supported on the current platform
java.awt.Desktop#open(File)->void:::Launches the associated application to open the file
java.awt.Desktop#edit(File)->void:::Launches the associated editor application and opens a file for editing.
java.awt.Desktop#print(File)->void:::Prints a file with the native desktop printing facility, using the associated application's print command.
java.awt.Desktop#browse(URI)->void:::Launches the default browser to display a URI
java.awt.Desktop#mail()->void:::Launches the mail composing window of the user default mail client.
java.awt.Desktop#mail(URI)->void:::Launches the mail composing window of the user default mail client, filling the message fields specified by a mailto: URI
java.awt.Desktop#addAppEventListener(SystemEventListener)->void:::Adds sub-types of SystemEventListener to listen for notifications from the native system
java.awt.Desktop#removeAppEventListener(SystemEventListener)->void:::Removes sub-types of SystemEventListener to listen for notifications from the native system
java.awt.Desktop#setAboutHandler(AboutHandler)->void:::Installs a handler to show a custom About window for your application
java.awt.Desktop#setPreferencesHandler(PreferencesHandler)->void:::Installs a handler to show a custom Preferences window for your application
java.awt.Desktop#setOpenFileHandler(OpenFilesHandler)->void:::Installs the handler which is notified when the application is asked to open a list of files.
java.awt.Desktop#setPrintFileHandler(PrintFilesHandler)->void:::Installs the handler which is notified when the application is asked to print a list of files.
java.awt.Desktop#setOpenURIHandler(OpenURIHandler)->void:::Installs the handler which is notified when the application is asked to open a URL
java.awt.Desktop#setQuitHandler(QuitHandler)->void:::Installs the handler which determines if the application should quit
java.awt.Desktop#setQuitStrategy(QuitStrategy)->void:::Sets the default strategy used to quit this application
java.awt.Desktop#enableSuddenTermination()->void:::Enables this application to be suddenly terminated
java.awt.Desktop#disableSuddenTermination()->void:::Prevents this application from being suddenly terminated
java.awt.Desktop#requestForeground(boolean)->void:::Requests this application to move to the foreground.
java.awt.Desktop#openHelpViewer()->void:::Opens the native help viewer application.
java.awt.Desktop#setDefaultMenuBar(JMenuBar)->void:::Sets the default menu bar to use when there are no active frames.
java.awt.Desktop#browseFileDirectory(File)->void:::Opens a folder containing the file and selects it in a default system file manager.
java.awt.Desktop#moveToTrash(File)->boolean:::Moves the specified file to the trash.
java.awt.Dialog#constructComponentName()->String:::Construct a name for this component
java.awt.Dialog#addNotify()->void:::Makes this Dialog displayable by connecting it to a native screen resource
java.awt.Dialog#isModal()->boolean:::Indicates whether the dialog is modal
java.awt.Dialog#isModal_NoClientCode()->boolean::: dialog is modal_ no client code
java.awt.Dialog#setModal(boolean)->void:::Specifies whether this dialog should be modal
java.awt.Dialog#getModalityType()->ModalityType:::Returns the modality type of this dialog.
java.awt.Dialog#setModalityType(ModalityType)->void:::Sets the modality type for this dialog
java.awt.Dialog#getTitle()->String:::Gets the title of the dialog
java.awt.Dialog#setTitle(String)->void:::Sets the title of the Dialog.
java.awt.Dialog#setVisible(boolean)->void:::Shows or hides this Dialog depending on the value of parameter b.
java.awt.Dialog#show()->void:::Makes the Dialog visible
java.awt.Dialog#modalityPushed()->void::: dialog modality pushed
java.awt.Dialog#modalityPopped()->void::: dialog modality popped
java.awt.Dialog#hide()->void:::Hides the Dialog and then causes show to return if it is currently blocked.
java.awt.Dialog#doDispose()->void:::Disposes the Dialog and then causes show() to return if it is currently blocked.
java.awt.Dialog#toBack()->void:::  If this dialog is modal and blocks some windows, then all of them are also sent to the back to keep them below the blocking dialog.
java.awt.Dialog#isResizable()->boolean:::Indicates whether this dialog is resizable by the user
java.awt.Dialog#setResizable(boolean)->void:::Sets whether this dialog is resizable by the user.
java.awt.Dialog#setUndecorated(boolean)->void:::Disables or enables decorations for this dialog
java.awt.Dialog#isUndecorated()->boolean:::Indicates whether this dialog is undecorated
java.awt.Dialog#setOpacity(float)->void::: dialog set opacity
java.awt.Dialog#setShape(Shape)->void::: dialog set shape
java.awt.Dialog#setBackground(Color)->void::: dialog set background
java.awt.Dialog#paramString()->String:::Returns a string representing the state of this dialog
java.awt.Dialog#modalShow()->void::: dialog modal show
java.awt.Dialog#modalHide()->void::: dialog modal hide
java.awt.Dialog#shouldBlock(Window)->boolean::: dialog should block
java.awt.Dialog#blockWindow(Window)->void::: dialog block window
java.awt.Dialog#blockWindows(java.util.List)->void::: dialog block windows
java.awt.Dialog#unblockWindow(Window)->void::: dialog unblock window
java.awt.Dialog#checkShouldBeBlocked(Window)->void::: dialog check should be blocked
java.awt.Dialog#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Dialog
java.awt.Dialog.AccessibleAWTDialog#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Dialog.AccessibleAWTDialog#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
java.awt.Dimension#getWidth()->double::: dimension get width
java.awt.Dimension#getHeight()->double::: dimension get height
java.awt.Dimension#setSize(double, double)->void:::Sets the size of this Dimension object to the specified width and height in double precision
java.awt.Dimension#getSize()->Dimension:::Gets the size of this Dimension object
java.awt.Dimension#setSize(Dimension)->void:::Sets the size of this Dimension object to the specified size
java.awt.Dimension#setSize(int, int)->void:::Sets the size of this Dimension object to the specified width and height
java.awt.Dimension#equals(Object)->boolean:::Checks whether two dimension objects have equal values.
java.awt.Dimension#hashCode()->int:::Returns the hash code for this Dimension.
java.awt.Dimension#toString()->String:::Returns a string representation of the values of this Dimension object's height and width fields
java.awt.DisplayMode#getHeight()->int:::Returns the height of the display, in pixels.
java.awt.DisplayMode#getWidth()->int:::Returns the width of the display, in pixels.
java.awt.DisplayMode#getBitDepth()->int:::Returns the bit depth of the display, in bits per pixel
java.awt.DisplayMode#getRefreshRate()->int:::Returns the refresh rate of the display, in hertz
java.awt.DisplayMode#equals(DisplayMode)->boolean:::Returns whether the two display modes are equal.
java.awt.DisplayMode#equals(Object)->boolean::: display mode equals
java.awt.DisplayMode#hashCode()->int::: display mode hash code
java.awt.DisplayMode#toString()->String::: display mode to string
java.awt.Event#translate(int, int)->void:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#shiftDown()->boolean:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#controlDown()->boolean:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#metaDown()->boolean:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#consume()->void:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#isConsumed()->boolean:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#getOldEventKey(KeyEvent)->int::: event get old event key
java.awt.Event#getKeyEventChar()->char::: event get key event char
java.awt.Event#paramString()->String:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.Event#toString()->String:::NOTE: The Event class is obsolete and is available only for backwards compatibility
java.awt.EventDispatchThread#stopDispatching()->void::: event dispatch thread stop dispatching
java.awt.EventDispatchThread#run()->void::: event dispatch thread run
java.awt.EventDispatchThread#pumpEvents(Conditional)->void::: event dispatch thread pump events
java.awt.EventDispatchThread#pumpEventsForHierarchy(Conditional, Component)->void::: event dispatch thread pump events for hierarchy
java.awt.EventDispatchThread#pumpEvents(int, Conditional)->void::: event dispatch thread pump events
java.awt.EventDispatchThread#pumpEventsForHierarchy(int, Conditional, Component)->void::: event dispatch thread pump events for hierarchy
java.awt.EventDispatchThread#pumpEventsForFilter(Conditional, EventFilter)->void::: event dispatch thread pump events for filter
java.awt.EventDispatchThread#pumpEventsForFilter(int, Conditional, EventFilter)->void::: event dispatch thread pump events for filter
java.awt.EventDispatchThread#addEventFilter(EventFilter)->void::: event dispatch thread add event filter
java.awt.EventDispatchThread#removeEventFilter(EventFilter)->void::: event dispatch thread remove event filter
java.awt.EventDispatchThread#filterAndCheckEvent(AWTEvent)->boolean::: event dispatch thread filter and check event
java.awt.EventDispatchThread#pumpOneEventForFilters(int)->void::: event dispatch thread pump one event for filters
java.awt.EventDispatchThread#getEventQueue()->EventQueue::: event dispatch thread get event queue
java.awt.EventDispatchThread#setEventQueue(EventQueue)->void::: event dispatch thread set event queue
java.awt.EventFilter#acceptEvent(AWTEvent)->FilterAction::: event filter accept event
java.awt.EventQueue#postEvent(AWTEvent)->void:::Posts a 1.1-style event to the EventQueue
java.awt.EventQueue#getNextEvent()->AWTEvent:::Removes an event from the EventQueue and returns it
java.awt.EventQueue#getNextEventPrivate()->AWTEvent::: event queue get next event private
java.awt.EventQueue#getNextEvent(int)->AWTEvent::: event queue get next event
java.awt.EventQueue#peekEvent()->AWTEvent:::Returns the first event on the EventQueue without removing it.
java.awt.EventQueue#peekEvent(int)->AWTEvent:::Returns the first event with the specified id, if any.
java.awt.EventQueue#dispatchEvent(AWTEvent)->void:::Dispatches an event
java.awt.EventQueue#getMostRecentEventTime()->long:::Returns the timestamp of the most recent event that had a timestamp, and that was dispatched from the EventQueue associated with the calling thread
java.awt.EventQueue#getMostRecentEventTimeEx()->long::: event queue get most recent event time ex
java.awt.EventQueue#getCurrentEvent()->AWTEvent:::Returns the event currently being dispatched by the EventQueue associated with the calling thread
java.awt.EventQueue#push(EventQueue)->void:::Replaces the existing EventQueue with the specified one
java.awt.EventQueue#pop()->void:::Stops dispatching events using this EventQueue
java.awt.EventQueue#createSecondaryLoop()->SecondaryLoop:::Creates a new secondary loop associated with this event queue
java.awt.EventQueue#createSecondaryLoop(Conditional, EventFilter, long)->SecondaryLoop::: event queue create secondary loop
java.awt.EventQueue#isDispatchThread()->boolean:::Returns true if the calling thread is Toolkit#getSystemEventQueue the current AWT EventQueue's dispatch thread
java.awt.EventQueue#isDispatchThreadImpl()->boolean::: event queue is dispatch thread impl
java.awt.EventQueue#initDispatchThread()->void::: event queue init dispatch thread
java.awt.EventQueue#detachDispatchThread(EventDispatchThread)->void::: event queue detach dispatch thread
java.awt.EventQueue#getDispatchThread()->EventDispatchThread::: event queue get dispatch thread
java.awt.EventQueue#removeSourceEvents(Object, boolean)->void::: event queue remove source events
java.awt.EventQueue#getMostRecentKeyEventTime()->long::: event queue get most recent key event time
java.awt.EventQueue#setCurrentEventAndMostRecentTime(AWTEvent)->void::: event queue set current event and most recent time
java.awt.EventQueue#invokeLater(Runnable)->void:::Causes runnable to have its run method called in the #isDispatchThread dispatch thread of Toolkit#getSystemEventQueue the system EventQueue
java.awt.EventQueue#invokeAndWait(Runnable)->void:::Causes runnable to have its run method called in the #isDispatchThread dispatch thread of Toolkit#getSystemEventQueue the system EventQueue
java.awt.EventQueue#invokeAndWait(Object, Runnable)->void::: event queue invoke and wait
java.awt.FileDialog#setTitle(String)->void:::  Note: Some platforms may not support showing the user-specified title in a file dialog
java.awt.FileDialog#constructComponentName()->String:::Constructs a name for this component
java.awt.FileDialog#addNotify()->void:::Creates the file dialog's peer
java.awt.FileDialog#getMode()->int:::Indicates whether this file dialog box is for loading from a file or for saving to a file.
java.awt.FileDialog#setMode(int)->void:::Sets the mode of the file dialog
java.awt.FileDialog#getDirectory()->String:::Gets the directory of this file dialog.
java.awt.FileDialog#setDirectory(String)->void:::Sets the directory of this file dialog window to be the specified directory
java.awt.FileDialog#getFile()->String:::Gets the selected file of this file dialog
java.awt.FileDialog#getFiles()->File[]:::Returns files that the user selects
java.awt.FileDialog#setFile(String)->void:::Sets the selected file for this file dialog window to be the specified file
java.awt.FileDialog#setMultipleMode(boolean)->void:::Enables or disables multiple file selection for the file dialog.
java.awt.FileDialog#isMultipleMode()->boolean:::Returns whether the file dialog allows the multiple file selection.
java.awt.FileDialog#getFilenameFilter()->FilenameFilter:::Determines this file dialog's filename filter
java.awt.FileDialog#setFilenameFilter(FilenameFilter)->void:::Sets the filename filter for this file dialog window to the specified filter
java.awt.FileDialog#paramString()->String:::Returns a string representing the state of this FileDialog window
java.awt.FileDialog#postsOldMouseEvents()->boolean::: file dialog posts old mouse events
java.awt.FlowLayout#getAlignment()->int:::Gets the alignment for this layout
java.awt.FlowLayout#setAlignment(int)->void:::Sets the alignment for this layout
java.awt.FlowLayout#getHgap()->int:::Gets the horizontal gap between components and between the components and the borders of the Container
java.awt.FlowLayout#setHgap(int)->void:::Sets the horizontal gap between components and between the components and the borders of the Container.
java.awt.FlowLayout#getVgap()->int:::Gets the vertical gap between components and between the components and the borders of the Container.
java.awt.FlowLayout#setVgap(int)->void:::Sets the vertical gap between components and between the components and the borders of the Container.
java.awt.FlowLayout#setAlignOnBaseline(boolean)->void:::Sets whether or not components should be vertically aligned along their baseline
java.awt.FlowLayout#getAlignOnBaseline()->boolean:::Returns true if components are to be vertically aligned along their baseline
java.awt.FlowLayout#addLayoutComponent(String, Component)->void:::Adds the specified component to the layout
java.awt.FlowLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout
java.awt.FlowLayout#preferredLayoutSize(Container)->Dimension:::Returns the preferred dimensions for this layout given the visible components in the specified target container.
java.awt.FlowLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum dimensions needed to layout the visible components contained in the specified target container.
java.awt.FlowLayout#layoutContainer(Container)->void:::Lays out the container
java.awt.FlowLayout#toString()->String:::Returns a string representation of this FlowLayout object and its values.
java.awt.FocusTraversalPolicy#getComponentAfter(Container, Component)->Component:::Returns the Component that should receive the focus after aComponent
java.awt.FocusTraversalPolicy#getComponentBefore(Container, Component)->Component:::Returns the Component that should receive the focus before aComponent
java.awt.FocusTraversalPolicy#getFirstComponent(Container)->Component:::Returns the first Component in the traversal cycle
java.awt.FocusTraversalPolicy#getLastComponent(Container)->Component:::Returns the last Component in the traversal cycle
java.awt.FocusTraversalPolicy#getDefaultComponent(Container)->Component:::Returns the default Component to focus
java.awt.FocusTraversalPolicy#getInitialComponent(Window)->Component:::Returns the Component that should receive the focus when a Window is made visible for the first time
java.awt.Font#textRequiresLayout(char[], int, int)->boolean:::Returns true if any part of the specified text is from a complex script for which the implementation will need to invoke layout processing in order to render correctly when using Graphics#drawString(String,int,int) drawString(String,int,int) and other text rendering methods
java.awt.Font#getFont(Map)->Font:::Returns a Font appropriate to the attributes
java.awt.Font#createFonts(InputStream)->Font[]:::Returns a new array of Font decoded from the specified stream
java.awt.Font#createFonts(File)->Font[]:::Returns a new array of Font decoded from the specified file
java.awt.Font#createFont(int, InputStream)->Font:::Returns a new Font using the specified font type and input data
java.awt.Font#createFont(int, File)->Font:::Returns a new Font using the specified font type and the specified font file
java.awt.Font#getTransform()->AffineTransform:::Returns a copy of the transform associated with this Font
java.awt.Font#getFamily()->String:::Returns the family name of this Font
java.awt.Font#getFamily_NoClientCode()->String::: font get family_ no client code
java.awt.Font#getFamily(Locale)->String:::Returns the family name of this Font, localized for the specified locale
java.awt.Font#getPSName()->String:::Returns the postscript name of this Font
java.awt.Font#getName()->String:::Returns the logical name of this Font
java.awt.Font#getFontName()->String:::Returns the font face name of this Font
java.awt.Font#getFontName(Locale)->String:::Returns the font face name of the Font, localized for the specified locale
java.awt.Font#getStyle()->int:::Returns the style of this Font
java.awt.Font#getSize()->int:::Returns the point size of this Font, rounded to an integer
java.awt.Font#getSize2D()->float:::Returns the point size of this Font in float value.
java.awt.Font#isPlain()->boolean:::Indicates whether or not this Font object's style is PLAIN.
java.awt.Font#isBold()->boolean:::Indicates whether or not this Font object's style is BOLD.
java.awt.Font#isItalic()->boolean:::Indicates whether or not this Font object's style is ITALIC.
java.awt.Font#isTransformed()->boolean:::Indicates whether or not this Font object has a transform that affects its size in addition to the Size attribute.
java.awt.Font#hasLayoutAttributes()->boolean:::Return true if this Font contains attributes that require extra layout processing.
java.awt.Font#getFont(String)->Font:::Returns a Font object from the system properties list
java.awt.Font#decode(String)->Font:::Returns the Font that the str argument describes
java.awt.Font#getFont(String, Font)->Font:::Gets the specified Font from the system properties list
java.awt.Font#hashCode()->int:::Returns a hashcode for this Font.
java.awt.Font#equals(Object)->boolean:::Compares this Font object to the specified Object.
java.awt.Font#toString()->String::: font to string
java.awt.Font#getNumGlyphs()->int:::Returns the number of glyphs in this Font
java.awt.Font#getMissingGlyphCode()->int:::Returns the glyphCode which is used when this Font does not have a glyph for a specified unicode code point.
java.awt.Font#getBaselineFor(char)->byte:::Returns the baseline appropriate for displaying this character
java.awt.Font#getAttributes()->Map:::Returns a map of font attributes available in this Font
java.awt.Font#getAvailableAttributes()->Attribute[]:::Returns the keys of all the attributes supported by this Font
java.awt.Font#deriveFont(int, float)->Font:::Creates a new Font object by replicating this Font object and applying a new style and size.
java.awt.Font#deriveFont(int, AffineTransform)->Font:::Creates a new Font object by replicating this Font object and applying a new style and transform.
java.awt.Font#deriveFont(float)->Font:::Creates a new Font object by replicating the current Font object and applying a new size to it.
java.awt.Font#deriveFont(AffineTransform)->Font:::Creates a new Font object by replicating the current Font object and applying a new transform to it.
java.awt.Font#deriveFont(int)->Font:::Creates a new Font object by replicating the current Font object and applying a new style to it.
java.awt.Font#deriveFont(Map)->Font:::Creates a new Font object by replicating the current Font object and applying a new set of font attributes to it.
java.awt.Font#canDisplay(char)->boolean:::Checks if this Font has a glyph for the specified character
java.awt.Font#canDisplay(int)->boolean:::Checks if this Font has a glyph for the specified character.
java.awt.Font#canDisplayUpTo(String)->int:::Indicates whether or not this Font can display a specified String
java.awt.Font#canDisplayUpTo(char[], int, int)->int:::Indicates whether or not this Font can display the characters in the specified text starting at start and ending at limit
java.awt.Font#canDisplayUpTo(CharacterIterator, int, int)->int:::Indicates whether or not this Font can display the text specified by the iter starting at start and ending at limit.
java.awt.Font#getItalicAngle()->float:::Returns the italic angle of this Font
java.awt.Font#hasUniformLineMetrics()->boolean:::Checks whether or not this Font has uniform line metrics
java.awt.Font#getLineMetrics(String, FontRenderContext)->LineMetrics:::Returns a LineMetrics object created with the specified String and FontRenderContext.
java.awt.Font#getLineMetrics(String, int, int, FontRenderContext)->LineMetrics:::Returns a LineMetrics object created with the specified arguments.
java.awt.Font#getLineMetrics(char[], int, int, FontRenderContext)->LineMetrics:::Returns a LineMetrics object created with the specified arguments.
java.awt.Font#getLineMetrics(CharacterIterator, int, int, FontRenderContext)->LineMetrics:::Returns a LineMetrics object created with the specified arguments.
java.awt.Font#getStringBounds(String, FontRenderContext)->Rectangle2D:::Returns the logical bounds of the specified String in the specified FontRenderContext
java.awt.Font#getStringBounds(String, int, int, FontRenderContext)->Rectangle2D:::Returns the logical bounds of the specified String in the specified FontRenderContext
java.awt.Font#getStringBounds(char[], int, int, FontRenderContext)->Rectangle2D:::Returns the logical bounds of the specified array of characters in the specified FontRenderContext
java.awt.Font#getStringBounds(CharacterIterator, int, int, FontRenderContext)->Rectangle2D:::Returns the logical bounds of the characters indexed in the specified CharacterIterator in the specified FontRenderContext
java.awt.Font#getMaxCharBounds(FontRenderContext)->Rectangle2D:::Returns the bounds for the character with the maximum bounds as defined in the specified FontRenderContext
java.awt.Font#createGlyphVector(FontRenderContext, String)->GlyphVector:::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font
java.awt.Font#createGlyphVector(FontRenderContext, char[])->GlyphVector:::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font
java.awt.Font#createGlyphVector(FontRenderContext, CharacterIterator)->GlyphVector:::Creates a java.awt.font.GlyphVector GlyphVector by mapping the specified characters to glyphs one-to-one based on the Unicode cmap in this Font
java.awt.Font#createGlyphVector(FontRenderContext, int[])->GlyphVector:::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font
java.awt.Font#layoutGlyphVector(FontRenderContext, char[], int, int, int)->GlyphVector:::Returns a new GlyphVector object, performing full layout of the text if possible
java.awt.FontMetrics#getFont()->Font:::Gets the Font described by this FontMetrics object.
java.awt.FontMetrics#getFontRenderContext()->FontRenderContext:::Gets the FontRenderContext used by this FontMetrics object to measure text
java.awt.FontMetrics#getLeading()->int:::Determines the standard leading of the Font described by this FontMetrics object
java.awt.FontMetrics#getAscent()->int:::Determines the font ascent of the Font described by this FontMetrics object
java.awt.FontMetrics#getDescent()->int:::Determines the font descent of the Font described by this FontMetrics object
java.awt.FontMetrics#getHeight()->int:::Gets the standard height of a line of text in this font
java.awt.FontMetrics#getMaxAscent()->int:::Determines the maximum ascent of the Font described by this FontMetrics object
java.awt.FontMetrics#getMaxDescent()->int:::Determines the maximum descent of the Font described by this FontMetrics object
java.awt.FontMetrics#getMaxDecent()->int:::For backward compatibility only.
java.awt.FontMetrics#getMaxAdvance()->int:::Gets the maximum advance width of any character in this Font
java.awt.FontMetrics#charWidth(int)->int:::Returns the advance width of the specified character in this Font
java.awt.FontMetrics#charWidth(char)->int:::Returns the advance width of the specified character in this Font
java.awt.FontMetrics#stringWidth(String)->int:::Returns the total advance width for showing the specified String in this Font
java.awt.FontMetrics#charsWidth(char[], int, int)->int:::Returns the total advance width for showing the specified array of characters in this Font
java.awt.FontMetrics#bytesWidth(byte[], int, int)->int:::Returns the total advance width for showing the specified array of bytes in this Font
java.awt.FontMetrics#getWidths()->int[]:::Gets the advance widths of the first 256 characters in the Font
java.awt.FontMetrics#hasUniformLineMetrics()->boolean:::Checks to see if the Font has uniform line metrics
java.awt.FontMetrics#getLineMetrics(String, Graphics)->LineMetrics:::Returns the LineMetrics object for the specified String in the specified Graphics context.
java.awt.FontMetrics#getLineMetrics(String, int, int, Graphics)->LineMetrics:::Returns the LineMetrics object for the specified String in the specified Graphics context.
java.awt.FontMetrics#getLineMetrics(char[], int, int, Graphics)->LineMetrics:::Returns the LineMetrics object for the specified character array in the specified Graphics context.
java.awt.FontMetrics#getLineMetrics(CharacterIterator, int, int, Graphics)->LineMetrics:::Returns the LineMetrics object for the specified CharacterIterator in the specified Graphics context.
java.awt.FontMetrics#getStringBounds(String, Graphics)->Rectangle2D:::Returns the bounds of the specified String in the specified Graphics context
java.awt.FontMetrics#getStringBounds(String, int, int, Graphics)->Rectangle2D:::Returns the bounds of the specified String in the specified Graphics context
java.awt.FontMetrics#getStringBounds(char[], int, int, Graphics)->Rectangle2D:::Returns the bounds of the specified array of characters in the specified Graphics context
java.awt.FontMetrics#getStringBounds(CharacterIterator, int, int, Graphics)->Rectangle2D:::Returns the bounds of the characters indexed in the specified CharacterIterator in the specified Graphics context
java.awt.FontMetrics#getMaxCharBounds(Graphics)->Rectangle2D:::Returns the bounds for the character with the maximum bounds in the specified Graphics context.
java.awt.FontMetrics#toString()->String:::Returns a representation of this FontMetrics object's values as a String.
java.awt.Frame#constructComponentName()->String:::Construct a name for this component
java.awt.Frame#addNotify()->void:::Makes this Frame displayable by connecting it to a native screen resource
java.awt.Frame#getTitle()->String:::Gets the title of the frame
java.awt.Frame#setTitle(String)->void:::Sets the title for this frame to the specified string.
java.awt.Frame#getIconImage()->Image:::Returns the image to be displayed as the icon for this frame
java.awt.Frame#setIconImage(Image)->void::: frame set icon image
java.awt.Frame#getMenuBar()->MenuBar:::Gets the menu bar for this frame.
java.awt.Frame#setMenuBar(MenuBar)->void:::Sets the menu bar for this frame to the specified menu bar.
java.awt.Frame#isResizable()->boolean:::Indicates whether this frame is resizable by the user
java.awt.Frame#setResizable(boolean)->void:::Sets whether this frame is resizable by the user.
java.awt.Frame#setState(int)->void:::Sets the state of this frame (obsolete)
java.awt.Frame#setExtendedState(int)->void:::Sets the state of this frame
java.awt.Frame#getState()->int:::Gets the state of this frame (obsolete)
java.awt.Frame#getExtendedState()->int:::Gets the state of this frame
java.awt.Frame#setMaximizedBounds(Rectangle)->void:::Sets the maximized bounds for this frame
java.awt.Frame#getMaximizedBounds()->Rectangle:::Gets maximized bounds for this frame
java.awt.Frame#setUndecorated(boolean)->void:::Disables or enables decorations for this frame
java.awt.Frame#isUndecorated()->boolean:::Indicates whether this frame is undecorated
java.awt.Frame#setOpacity(float)->void::: frame set opacity
java.awt.Frame#setShape(Shape)->void::: frame set shape
java.awt.Frame#setBackground(Color)->void::: frame set background
java.awt.Frame#remove(MenuComponent)->void:::Removes the specified menu bar from this frame.
java.awt.Frame#removeNotify()->void:::Makes this Frame undisplayable by removing its connection to its native screen resource
java.awt.Frame#postProcessKeyEvent(KeyEvent)->void::: frame post process key event
java.awt.Frame#paramString()->String:::Returns a string representing the state of this Frame
java.awt.Frame#setCursor(int)->void:::Sets the cursor for this frame to the specified type.
java.awt.Frame#getCursorType()->int::: frame get cursor type
java.awt.Frame#getFrames()->Frame[]:::Returns an array of all Frames created by this application
java.awt.Frame#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Frame
java.awt.Frame.AccessibleAWTFrame#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Frame.AccessibleAWTFrame#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
java.awt.GradientPaint#getPoint1()->Point2D:::Returns a copy of the point P1 that anchors the first color.
java.awt.GradientPaint#getColor1()->Color:::Returns the color C1 anchored by the point P1.
java.awt.GradientPaint#getPoint2()->Point2D:::Returns a copy of the point P2 which anchors the second color.
java.awt.GradientPaint#getColor2()->Color:::Returns the color C2 anchored by the point P2.
java.awt.GradientPaint#isCyclic()->boolean:::Returns true if the gradient cycles repeatedly between the two colors C1 and C2.
java.awt.GradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate a linear color gradient pattern
java.awt.GradientPaint#getTransparency()->int:::Returns the transparency mode for this GradientPaint.
java.awt.GradientPaintContext#getCachedRaster(ColorModel, int, int)->Raster::: gradient paint context get cached raster
java.awt.GradientPaintContext#putCachedRaster(ColorModel, Raster)->void::: gradient paint context put cached raster
java.awt.GradientPaintContext#dispose()->void:::Release the resources allocated for the operation.
java.awt.GradientPaintContext#getColorModel()->ColorModel:::Return the ColorModel of the output.
java.awt.GradientPaintContext#getRaster(int, int, int, int)->Raster:::Return a Raster containing the colors generated for the graphics operation.
java.awt.GradientPaintContext#cycleFillRaster(int[], int, int, int, int, double, double, double)->void::: gradient paint context cycle fill raster
java.awt.GradientPaintContext#clipFillRaster(int[], int, int, int, int, double, double, double)->void::: gradient paint context clip fill raster
java.awt.Graphics#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
java.awt.Graphics#create(int, int, int, int)->Graphics:::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area
java.awt.Graphics#translate(int, int)->void:::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system
java.awt.Graphics#getColor()->Color:::Gets this graphics context's current color.
java.awt.Graphics#setColor(Color)->void:::Sets this graphics context's current color to the specified color
java.awt.Graphics#setPaintMode()->void:::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color
java.awt.Graphics#setXORMode(Color)->void:::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color
java.awt.Graphics#getFont()->Font:::Gets the current font.
java.awt.Graphics#setFont(Font)->void:::Sets this graphics context's font to the specified font
java.awt.Graphics#getFontMetrics()->FontMetrics:::Gets the font metrics of the current font.
java.awt.Graphics#getFontMetrics(Font)->FontMetrics:::Gets the font metrics for the specified font.
java.awt.Graphics#getClipBounds()->Rectangle:::Returns the bounding rectangle of the current clipping area
java.awt.Graphics#clipRect(int, int, int, int)->void:::Intersects the current clip with the specified rectangle
java.awt.Graphics#setClip(int, int, int, int)->void:::Sets the current clip to the rectangle specified by the given coordinates
java.awt.Graphics#getClip()->Shape:::Gets the current clipping area
java.awt.Graphics#setClip(Shape)->void:::Sets the current clipping area to an arbitrary clip shape
java.awt.Graphics#copyArea(int, int, int, int, int, int)->void:::Copies an area of the component by a distance specified by dx and dy
java.awt.Graphics#drawLine(int, int, int, int)->void:::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.
java.awt.Graphics#fillRect(int, int, int, int)->void:::Fills the specified rectangle
java.awt.Graphics#drawRect(int, int, int, int)->void:::Draws the outline of the specified rectangle
java.awt.Graphics#clearRect(int, int, int, int)->void:::Clears the specified rectangle by filling it with the background color of the current drawing surface
java.awt.Graphics#drawRoundRect(int, int, int, int, int, int)->void:::Draws an outlined round-cornered rectangle using this graphics context's current color
java.awt.Graphics#fillRoundRect(int, int, int, int, int, int)->void:::Fills the specified rounded corner rectangle with the current color
java.awt.Graphics#draw3DRect(int, int, int, int, boolean)->void:::Draws a 3-D highlighted outline of the specified rectangle
java.awt.Graphics#fill3DRect(int, int, int, int, boolean)->void:::Paints a 3-D highlighted rectangle filled with the current color
java.awt.Graphics#drawOval(int, int, int, int)->void:::Draws the outline of an oval
java.awt.Graphics#fillOval(int, int, int, int)->void:::Fills an oval bounded by the specified rectangle with the current color.
java.awt.Graphics#drawArc(int, int, int, int, int, int)->void:::Draws the outline of a circular or elliptical arc covering the specified rectangle
java.awt.Graphics#fillArc(int, int, int, int, int, int)->void:::Fills a circular or elliptical arc covering the specified rectangle
java.awt.Graphics#drawPolyline(int[], int[], int)->void:::Draws a sequence of connected lines defined by arrays of x and y coordinates
java.awt.Graphics#drawPolygon(int[], int[], int)->void:::Draws a closed polygon defined by arrays of x and y coordinates
java.awt.Graphics#drawPolygon(Polygon)->void:::Draws the outline of a polygon defined by the specified Polygon object.
java.awt.Graphics#fillPolygon(int[], int[], int)->void:::Fills a closed polygon defined by arrays of x and y coordinates
java.awt.Graphics#fillPolygon(Polygon)->void:::Fills the polygon defined by the specified Polygon object with the graphics context's current color
java.awt.Graphics#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
java.awt.Graphics#drawString(AttributedCharacterIterator, int, int)->void:::Renders the text of the specified iterator applying its attributes in accordance with the specification of the java.awt.font.TextAttribute TextAttribute class
java.awt.Graphics#drawChars(char[], int, int, int, int)->void:::Draws the text given by the specified character array, using this graphics context's current font and color
java.awt.Graphics#drawBytes(byte[], int, int, int, int)->void:::Draws the text given by the specified byte array, using this graphics context's current font and color
java.awt.Graphics#drawImage(Image, int, int, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
java.awt.Graphics#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
java.awt.Graphics#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
java.awt.Graphics#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
java.awt.Graphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
java.awt.Graphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
java.awt.Graphics#dispose()->void:::Disposes of this graphics context and releases any system resources that it is using
java.awt.Graphics#finalize()->void:::Disposes of this graphics context once it is no longer referenced.
java.awt.Graphics#toString()->String:::Returns a String object representing this                        Graphics object's value.
java.awt.Graphics#getClipRect()->Rectangle:::Returns the bounding rectangle of the current clipping area.
java.awt.Graphics#hitClip(int, int, int, int)->boolean:::Returns true if the specified rectangular area might intersect the current clipping area
java.awt.Graphics#getClipBounds(Rectangle)->Rectangle:::Returns the bounding rectangle of the current clipping area
java.awt.Graphics2D#draw3DRect(int, int, int, int, boolean)->void:::Draws a 3-D highlighted outline of the specified rectangle
java.awt.Graphics2D#fill3DRect(int, int, int, int, boolean)->void:::Paints a 3-D highlighted rectangle filled with the current color
java.awt.Graphics2D#draw(Shape)->void:::Strokes the outline of a Shape using the settings of the current Graphics2D context
java.awt.Graphics2D#drawImage(Image, AffineTransform, ImageObserver)->boolean:::Renders an image, applying a transform from image space into user space before drawing
java.awt.Graphics2D#drawImage(BufferedImage, BufferedImageOp, int, int)->void:::Renders a BufferedImage that is filtered with a BufferedImageOp
java.awt.Graphics2D#drawRenderedImage(RenderedImage, AffineTransform)->void:::Renders a RenderedImage, applying a transform from image space into user space before drawing
java.awt.Graphics2D#drawRenderableImage(RenderableImage, AffineTransform)->void:::Renders a RenderableImage, applying a transform from image space into user space before drawing
java.awt.Graphics2D#drawString(String, int, int)->void:::Renders the text of the specified String, using the current text attribute state in the Graphics2D context
java.awt.Graphics2D#drawString(String, float, float)->void:::Renders the text specified by the specified String, using the current text attribute state in the Graphics2D context
java.awt.Graphics2D#drawString(AttributedCharacterIterator, int, int)->void:::Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class
java.awt.Graphics2D#drawString(AttributedCharacterIterator, float, float)->void:::Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class
java.awt.Graphics2D#drawGlyphVector(GlyphVector, float, float)->void:::Renders the text of the specified GlyphVector using the Graphics2D context's rendering attributes
java.awt.Graphics2D#fill(Shape)->void:::Fills the interior of a Shape using the settings of the Graphics2D context
java.awt.Graphics2D#hit(Rectangle, Shape, boolean)->boolean:::Checks whether or not the specified Shape intersects the specified Rectangle, which is in device space
java.awt.Graphics2D#getDeviceConfiguration()->GraphicsConfiguration:::Returns the device configuration associated with this Graphics2D.
java.awt.Graphics2D#setComposite(Composite)->void:::Sets the Composite for the Graphics2D context
java.awt.Graphics2D#setPaint(Paint)->void:::Sets the Paint attribute for the Graphics2D context
java.awt.Graphics2D#setStroke(Stroke)->void:::Sets the Stroke for the Graphics2D context.
java.awt.Graphics2D#setRenderingHint(Key, Object)->void:::Sets the value of a single preference for the rendering algorithms
java.awt.Graphics2D#getRenderingHint(Key)->Object:::Returns the value of a single preference for the rendering algorithms
java.awt.Graphics2D#setRenderingHints(Map)->void:::Replaces the values of all preferences for the rendering algorithms with the specified hints
java.awt.Graphics2D#addRenderingHints(Map)->void:::Sets the values of an arbitrary number of preferences for the rendering algorithms
java.awt.Graphics2D#getRenderingHints()->RenderingHints:::Gets the preferences for the rendering algorithms
java.awt.Graphics2D#translate(int, int)->void:::Translates the origin of the Graphics2D context to the point (x,&nbsp;y) in the current coordinate system
java.awt.Graphics2D#translate(double, double)->void:::Concatenates the current Graphics2D Transform with a translation transform
java.awt.Graphics2D#rotate(double)->void:::Concatenates the current Graphics2D Transform with a rotation transform
java.awt.Graphics2D#rotate(double, double, double)->void:::Concatenates the current Graphics2D Transform with a translated rotation transform
java.awt.Graphics2D#scale(double, double)->void:::Concatenates the current Graphics2D Transform with a scaling transformation Subsequent rendering is resized according to the specified scaling factors relative to the previous scaling
java.awt.Graphics2D#shear(double, double)->void:::Concatenates the current Graphics2D Transform with a shearing transform
java.awt.Graphics2D#transform(AffineTransform)->void:::Composes an AffineTransform object with the Transform in this Graphics2D according to the rule last-specified-first-applied
java.awt.Graphics2D#setTransform(AffineTransform)->void:::Overwrites the Transform in the Graphics2D context
java.awt.Graphics2D#getTransform()->AffineTransform:::Returns a copy of the current Transform in the Graphics2D context.
java.awt.Graphics2D#getPaint()->Paint:::Returns the current Paint of the Graphics2D context.
java.awt.Graphics2D#getComposite()->Composite:::Returns the current Composite in the Graphics2D context.
java.awt.Graphics2D#setBackground(Color)->void:::Sets the background color for the Graphics2D context
java.awt.Graphics2D#getBackground()->Color:::Returns the background color used for clearing a region.
java.awt.Graphics2D#getStroke()->Stroke:::Returns the current Stroke in the Graphics2D context.
java.awt.Graphics2D#clip(Shape)->void:::Intersects the current Clip with the interior of the specified Shape and sets the Clip to the resulting intersection
java.awt.Graphics2D#getFontRenderContext()->FontRenderContext::: graphics2 d get font render context
java.awt.GraphicsCallback.PaintCallback#run(Component, Graphics)->void::: paint callback run
java.awt.GraphicsCallback.PaintCallback#getInstance()->PaintCallback::: paint callback get instance
java.awt.GraphicsCallback.PrintCallback#run(Component, Graphics)->void::: print callback run
java.awt.GraphicsCallback.PrintCallback#getInstance()->PrintCallback::: print callback get instance
java.awt.GraphicsCallback.PaintAllCallback#run(Component, Graphics)->void::: paint all callback run
java.awt.GraphicsCallback.PaintAllCallback#getInstance()->PaintAllCallback::: paint all callback get instance
java.awt.GraphicsCallback.PrintAllCallback#run(Component, Graphics)->void::: print all callback run
java.awt.GraphicsCallback.PrintAllCallback#getInstance()->PrintAllCallback::: print all callback get instance
java.awt.GraphicsCallback.PeerPaintCallback#run(Component, Graphics)->void::: peer paint callback run
java.awt.GraphicsCallback.PeerPaintCallback#getInstance()->PeerPaintCallback::: peer paint callback get instance
java.awt.GraphicsCallback.PeerPrintCallback#run(Component, Graphics)->void::: peer print callback run
java.awt.GraphicsCallback.PeerPrintCallback#getInstance()->PeerPrintCallback::: peer print callback get instance
java.awt.GraphicsCallback.PaintHeavyweightComponentsCallback#run(Component, Graphics)->void::: paint heavyweight components callback run
java.awt.GraphicsCallback.PaintHeavyweightComponentsCallback#getInstance()->PaintHeavyweightComponentsCallback::: paint heavyweight components callback get instance
java.awt.GraphicsCallback.PrintHeavyweightComponentsCallback#run(Component, Graphics)->void::: print heavyweight components callback run
java.awt.GraphicsCallback.PrintHeavyweightComponentsCallback#getInstance()->PrintHeavyweightComponentsCallback::: print heavyweight components callback get instance
java.awt.GraphicsConfigTemplate#getBestConfiguration(GraphicsConfiguration[])->GraphicsConfiguration:::Returns the "best" configuration possible that passes the criteria defined in the GraphicsConfigTemplate.
java.awt.GraphicsConfigTemplate#isGraphicsConfigSupported(GraphicsConfiguration)->boolean:::Returns a boolean indicating whether or not the specified GraphicsConfiguration can be used to create a drawing surface that supports the indicated features.
java.awt.GraphicsConfiguration#getDevice()->GraphicsDevice:::Returns the GraphicsDevice associated with this GraphicsConfiguration.
java.awt.GraphicsConfiguration#createCompatibleImage(int, int)->BufferedImage:::Returns a BufferedImage with a data layout and color model compatible with this GraphicsConfiguration
java.awt.GraphicsConfiguration#createCompatibleImage(int, int, int)->BufferedImage:::Returns a BufferedImage that supports the specified transparency and has a data layout and color model compatible with this GraphicsConfiguration
java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int)->VolatileImage:::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration
java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int, int)->VolatileImage:::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration
java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int, ImageCapabilities)->VolatileImage:::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities
java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int, ImageCapabilities, int)->VolatileImage:::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities and transparency value
java.awt.GraphicsConfiguration#getColorModel()->ColorModel:::Returns the ColorModel associated with this GraphicsConfiguration.
java.awt.GraphicsConfiguration#getColorModel(int)->ColorModel:::Returns the ColorModel associated with this GraphicsConfiguration that supports the specified transparency.
java.awt.GraphicsConfiguration#getDefaultTransform()->AffineTransform:::Returns the default AffineTransform for this GraphicsConfiguration
java.awt.GraphicsConfiguration#getNormalizingTransform()->AffineTransform:::Returns an AffineTransform that can be concatenated with the default AffineTransform of a GraphicsConfiguration so that 72 units in user space equals 1 inch in device space
java.awt.GraphicsConfiguration#getBounds()->Rectangle:::Returns the bounds of the GraphicsConfiguration in the device coordinates
java.awt.GraphicsConfiguration#getBufferCapabilities()->BufferCapabilities:::Returns the buffering capabilities of this GraphicsConfiguration.
java.awt.GraphicsConfiguration#getImageCapabilities()->ImageCapabilities:::Returns the image capabilities of this GraphicsConfiguration.
java.awt.GraphicsConfiguration#isTranslucencyCapable()->boolean:::Returns whether this GraphicsConfiguration supports the GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT PERPIXEL_TRANSLUCENT kind of translucency.
java.awt.GraphicsDevice#getType()->int:::Returns the type of this GraphicsDevice.
java.awt.GraphicsDevice#getIDstring()->String:::Returns the identification string associated with this GraphicsDevice
java.awt.GraphicsDevice#getConfigurations()->GraphicsConfiguration[]:::Returns all of the GraphicsConfiguration objects associated with this GraphicsDevice.
java.awt.GraphicsDevice#getDefaultConfiguration()->GraphicsConfiguration:::Returns the default GraphicsConfiguration associated with this GraphicsDevice.
java.awt.GraphicsDevice#getBestConfiguration(GraphicsConfigTemplate)->GraphicsConfiguration:::Returns the "best" configuration possible that passes the criteria defined in the GraphicsConfigTemplate.
java.awt.GraphicsDevice#isFullScreenSupported()->boolean:::Returns true if this GraphicsDevice supports full-screen exclusive mode
java.awt.GraphicsDevice#setFullScreenWindow(Window)->void:::Enter full-screen mode, or return to windowed mode
java.awt.GraphicsDevice#getFullScreenWindow()->Window:::Returns the Window object representing the full-screen window if the device is in full-screen mode.
java.awt.GraphicsDevice#isDisplayChangeSupported()->boolean:::Returns true if this GraphicsDevice supports low-level display changes
java.awt.GraphicsDevice#setDisplayMode(DisplayMode)->void:::Sets the display mode of this graphics device
java.awt.GraphicsDevice#getDisplayMode()->DisplayMode:::Returns the current display mode of this GraphicsDevice
java.awt.GraphicsDevice#getDisplayModes()->DisplayMode[]:::Returns all display modes available for this GraphicsDevice
java.awt.GraphicsDevice#getAvailableAcceleratedMemory()->int:::This method returns the number of bytes available in accelerated memory on this device
java.awt.GraphicsDevice#isWindowTranslucencySupported(WindowTranslucency)->boolean:::Returns whether the given level of translucency is supported by this graphics device.
java.awt.GraphicsDevice#isWindowShapingSupported()->boolean:::Returns whether the windowing system supports changing the shape of top-level windows
java.awt.GraphicsDevice#isWindowOpacitySupported()->boolean:::Returns whether the windowing system supports changing the opacity value of top-level windows
java.awt.GraphicsDevice#isWindowPerpixelTranslucencySupported()->boolean::: graphics device is window perpixel translucency supported
java.awt.GraphicsDevice#getTranslucencyCapableGC()->GraphicsConfiguration::: graphics device get translucency capable c
java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()->GraphicsEnvironment:::Returns the local GraphicsEnvironment.
java.awt.GraphicsEnvironment#isHeadless()->boolean:::Tests whether or not a display, keyboard, and mouse can be supported in this environment
java.awt.GraphicsEnvironment#getHeadlessMessage()->String::: graphics environment get headless message
java.awt.GraphicsEnvironment#checkHeadless()->void:::Check for headless state and throw HeadlessException if headless
java.awt.GraphicsEnvironment#isHeadlessInstance()->boolean:::Returns whether or not a display, keyboard, and mouse can be supported in this graphics environment
java.awt.GraphicsEnvironment#getScreenDevices()->GraphicsDevice[]:::Returns an array of all of the screen GraphicsDevice objects.
java.awt.GraphicsEnvironment#getDefaultScreenDevice()->GraphicsDevice:::Returns the default screen GraphicsDevice.
java.awt.GraphicsEnvironment#createGraphics(BufferedImage)->Graphics2D:::Returns a Graphics2D object for rendering into the specified BufferedImage.
java.awt.GraphicsEnvironment#getAllFonts()->Font[]:::Returns an array containing a one-point size instance of all fonts available in this GraphicsEnvironment
java.awt.GraphicsEnvironment#getAvailableFontFamilyNames()->String[]:::Returns an array containing the names of all font families in this GraphicsEnvironment localized for the default locale, as returned by Locale.getDefault()
java.awt.GraphicsEnvironment#getAvailableFontFamilyNames(Locale)->String[]:::Returns an array containing the names of all font families in this GraphicsEnvironment localized for the specified locale
java.awt.GraphicsEnvironment#registerFont(Font)->boolean:::Registers a created Font in this GraphicsEnvironment
java.awt.GraphicsEnvironment#preferLocaleFonts()->void:::Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts
java.awt.GraphicsEnvironment#preferProportionalFonts()->void:::Indicates a preference for proportional over non-proportional (e.g
java.awt.GraphicsEnvironment#getCenterPoint()->Point:::Returns the Point where Windows should be centered
java.awt.GraphicsEnvironment#getMaximumWindowBounds()->Rectangle:::Returns the maximum bounds for centered Windows
java.awt.GridBagConstraints#clone()->Object:::Creates a copy of this grid bag constraint.
java.awt.GridBagConstraints#isVerticallyResizable()->boolean::: grid bag constraints is vertically resizable
java.awt.GridBagLayout#setConstraints(Component, GridBagConstraints)->void:::Sets the constraints for the specified component in this layout.
java.awt.GridBagLayout#getConstraints(Component)->GridBagConstraints:::Gets the constraints for the specified component
java.awt.GridBagLayout#lookupConstraints(Component)->GridBagConstraints:::Retrieves the constraints for the specified component
java.awt.GridBagLayout#getLayoutOrigin()->Point:::Determines the origin of the layout area, in the graphics coordinate space of the target container
java.awt.GridBagLayout#getLayoutDimensions()->int[][]:::Determines column widths and row heights for the layout grid
java.awt.GridBagLayout#getLayoutWeights()->double[][]:::Determines the weights of the layout grid's columns and rows
java.awt.GridBagLayout#location(int, int)->Point:::Determines which cell in the layout grid contains the point specified by (x,&nbsp;y)
java.awt.GridBagLayout#addLayoutComponent(String, Component)->void:::Has no effect, since this layout manager does not use a per-component string.
java.awt.GridBagLayout#addLayoutComponent(Component, Object)->void:::Adds the specified component to the layout, using the specified constraints object
java.awt.GridBagLayout#removeLayoutComponent(Component)->void:::Removes the specified component from this layout
java.awt.GridBagLayout#preferredLayoutSize(Container)->Dimension:::Determines the preferred size of the parent container using this grid bag layout
java.awt.GridBagLayout#minimumLayoutSize(Container)->Dimension:::Determines the minimum size of the parent container using this grid bag layout
java.awt.GridBagLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.GridBagLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis
java.awt.GridBagLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis
java.awt.GridBagLayout#invalidateLayout(Container)->void:::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
java.awt.GridBagLayout#layoutContainer(Container)->void:::Lays out the specified container using this grid bag layout
java.awt.GridBagLayout#toString()->String:::Returns a string representation of this grid bag layout's values.
java.awt.GridBagLayout#getLayoutInfo(Container, int)->GridBagLayoutInfo:::Fills in an instance of GridBagLayoutInfo for the current set of managed children
java.awt.GridBagLayout#GetLayoutInfo(Container, int)->GridBagLayoutInfo:::This method is obsolete and supplied for backwards compatibility only; new code should call #getLayoutInfo(java.awt.Container, int) getLayoutInfo instead
java.awt.GridBagLayout#adjustForGravity(GridBagConstraints, Rectangle)->void:::Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads
java.awt.GridBagLayout#AdjustForGravity(GridBagConstraints, Rectangle)->void:::Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads
java.awt.GridBagLayout#getMinSize(Container, GridBagLayoutInfo)->Dimension:::Figures out the minimum size of the master based on the information from getLayoutInfo
java.awt.GridBagLayout#GetMinSize(Container, GridBagLayoutInfo)->Dimension:::This method is obsolete and supplied for backwards compatibility only; new code should call #getMinSize(java.awt.Container, GridBagLayoutInfo) getMinSize instead
java.awt.GridBagLayout#arrangeGrid(Container)->void:::Lays out the grid
java.awt.GridBagLayout#ArrangeGrid(Container)->void:::This method is obsolete and supplied for backwards compatibility only; new code should call #arrangeGrid(Container) arrangeGrid instead
java.awt.GridBagLayoutInfo#hasConstantDescent(int)->boolean:::Returns true if the specified row has any component aligned on the baseline with a baseline resize behavior of CONSTANT_DESCENT.
java.awt.GridBagLayoutInfo#hasBaseline(int)->boolean:::Returns true if there is a baseline for the specified row.
java.awt.GridLayout#getRows()->int:::Gets the number of rows in this layout.
java.awt.GridLayout#setRows(int)->void:::Sets the number of rows in this layout to the specified value.
java.awt.GridLayout#getColumns()->int:::Gets the number of columns in this layout.
java.awt.GridLayout#setColumns(int)->void:::Sets the number of columns in this layout to the specified value
java.awt.GridLayout#getHgap()->int:::Gets the horizontal gap between components.
java.awt.GridLayout#setHgap(int)->void:::Sets the horizontal gap between components to the specified value.
java.awt.GridLayout#getVgap()->int:::Gets the vertical gap between components.
java.awt.GridLayout#setVgap(int)->void:::Sets the vertical gap between components to the specified value.
java.awt.GridLayout#addLayoutComponent(String, Component)->void:::Adds the specified component with the specified name to the layout.
java.awt.GridLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout.
java.awt.GridLayout#preferredLayoutSize(Container)->Dimension:::Determines the preferred size of the container argument using this grid layout
java.awt.GridLayout#minimumLayoutSize(Container)->Dimension:::Determines the minimum size of the container argument using this grid layout
java.awt.GridLayout#layoutContainer(Container)->void:::Lays out the specified container using this layout
java.awt.GridLayout#toString()->String:::Returns the string representation of this grid layout's values.
java.awt.HeadlessException#getMessage()->String:::Returns the detail message string of this HeadlessException
java.awt.Image#getWidth(ImageObserver)->int:::Determines the width of the image
java.awt.Image#getHeight(ImageObserver)->int:::Determines the height of the image
java.awt.Image#getSource()->ImageProducer:::Gets the object that produces the pixels for the image
java.awt.Image#getGraphics()->Graphics:::Creates a graphics context for drawing to an off-screen image
java.awt.Image#getProperty(String, ImageObserver)->Object:::Gets a property of this image by name
java.awt.Image#getScaledInstance(int, int, int)->Image:::Creates a scaled version of this image
java.awt.Image#flush()->void:::Flushes all reconstructable resources being used by this Image object
java.awt.Image#getCapabilities(GraphicsConfiguration)->ImageCapabilities:::Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration
java.awt.Image#setAccelerationPriority(float)->void:::Sets a hint for this image about how important acceleration is
java.awt.Image#getAccelerationPriority()->float:::Returns the current value of the acceleration priority hint.
java.awt.ImageCapabilities#isAccelerated()->boolean:::Returns true if the object whose capabilities are encapsulated in this ImageCapabilities can be or is accelerated.
java.awt.ImageCapabilities#isTrueVolatile()->boolean:::Returns true if the VolatileImage described by this ImageCapabilities can lose its surfaces.
java.awt.ImageCapabilities#clone()->Object::: image capabilities clone
java.awt.Insets#set(int, int, int, int)->void:::Set top, left, bottom, and right to the specified values
java.awt.Insets#equals(Object)->boolean:::Checks whether two insets objects are equal
java.awt.Insets#hashCode()->int:::Returns the hash code for this Insets.
java.awt.Insets#toString()->String:::Returns a string representation of this Insets object
java.awt.Insets#clone()->Object:::Create a copy of this object.
java.awt.ItemSelectable#getSelectedObjects()->Object[]:::Returns the selected items or null if no items are selected.
java.awt.ItemSelectable#addItemListener(ItemListener)->void:::Adds a listener to receive item events when the state of an item is changed by the user
java.awt.ItemSelectable#removeItemListener(ItemListener)->void:::Removes an item listener
java.awt.JobAttributes#clone()->Object:::Creates and returns a copy of this JobAttributes.
java.awt.JobAttributes#set(JobAttributes)->void:::Sets all of the attributes of this JobAttributes to the same values as the attributes of obj.
java.awt.JobAttributes#getCopies()->int:::Returns the number of copies the application should render for jobs using these attributes
java.awt.JobAttributes#setCopies(int)->void:::Specifies the number of copies the application should render for jobs using these attributes
java.awt.JobAttributes#setCopiesToDefault()->void:::Sets the number of copies the application should render for jobs using these attributes to the default
java.awt.JobAttributes#getDefaultSelection()->DefaultSelectionType:::Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getPageRanges, or the current selection
java.awt.JobAttributes#setDefaultSelection(DefaultSelectionType)->void:::Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getPageRanges, or the current selection
java.awt.JobAttributes#getDestination()->DestinationType:::Specifies whether output will be to a printer or a file for jobs using these attributes
java.awt.JobAttributes#setDestination(DestinationType)->void:::Specifies whether output will be to a printer or a file for jobs using these attributes
java.awt.JobAttributes#getDialog()->DialogType:::Returns whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed
java.awt.JobAttributes#setDialog(DialogType)->void:::Specifies whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed
java.awt.JobAttributes#getFileName()->String:::Specifies the file name for the output file for jobs using these attributes
java.awt.JobAttributes#setFileName(String)->void:::Specifies the file name for the output file for jobs using these attributes
java.awt.JobAttributes#getFromPage()->int:::Returns, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed
java.awt.JobAttributes#setFromPage(int)->void:::Specifies, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed
java.awt.JobAttributes#getMaxPage()->int:::Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes
java.awt.JobAttributes#setMaxPage(int)->void:::Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes
java.awt.JobAttributes#getMinPage()->int:::Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes
java.awt.JobAttributes#setMinPage(int)->void:::Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes
java.awt.JobAttributes#getMultipleDocumentHandling()->MultipleDocumentHandlingType:::Specifies the handling of multiple copies, including collation, for jobs using these attributes
java.awt.JobAttributes#setMultipleDocumentHandling(MultipleDocumentHandlingType)->void:::Specifies the handling of multiple copies, including collation, for jobs using these attributes
java.awt.JobAttributes#setMultipleDocumentHandlingToDefault()->void:::Sets the handling of multiple copies, including collation, for jobs using these attributes to the default
java.awt.JobAttributes#getPageRanges()->int[][]:::Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed
java.awt.JobAttributes#setPageRanges(int[][])->void:::Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed
java.awt.JobAttributes#getPrinter()->String:::Returns the destination printer for jobs using these attributes
java.awt.JobAttributes#setPrinter(String)->void:::Specifies the destination printer for jobs using these attributes
java.awt.JobAttributes#getSides()->SidesType:::Returns how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes
java.awt.JobAttributes#setSides(SidesType)->void:::Specifies how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes
java.awt.JobAttributes#setSidesToDefault()->void:::Sets how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes to the default
java.awt.JobAttributes#getToPage()->int:::Returns, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed
java.awt.JobAttributes#setToPage(int)->void:::Specifies, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed
java.awt.JobAttributes#equals(Object)->boolean:::Determines whether two JobAttributes are equal to each other
java.awt.JobAttributes#hashCode()->int:::Returns a hash code value for this JobAttributes.
java.awt.JobAttributes#toString()->String:::Returns a string representation of this JobAttributes.
java.awt.KeyboardFocusManager#getCurrentKeyboardFocusManager()->KeyboardFocusManager:::Returns the current KeyboardFocusManager instance for the calling thread's context.
java.awt.KeyboardFocusManager#getCurrentKeyboardFocusManager(AppContext)->KeyboardFocusManager::: keyboard focus manager get current keyboard focus manager
java.awt.KeyboardFocusManager#setCurrentKeyboardFocusManager(KeyboardFocusManager)->void:::Sets the current KeyboardFocusManager instance for the calling thread's context
java.awt.KeyboardFocusManager#setCurrentSequencedEvent(SequencedEvent)->void::: keyboard focus manager set current sequenced event
java.awt.KeyboardFocusManager#getCurrentSequencedEvent()->SequencedEvent::: keyboard focus manager get current sequenced event
java.awt.KeyboardFocusManager#initFocusTraversalKeysSet(String, Set)->Set::: keyboard focus manager init focus traversal keys set
java.awt.KeyboardFocusManager#getFocusOwner()->Component:::Returns the focus owner, if the focus owner is in the same context as the calling thread
java.awt.KeyboardFocusManager#getGlobalFocusOwner()->Component:::Returns the focus owner, even if the calling thread is in a different context than the focus owner
java.awt.KeyboardFocusManager#setGlobalFocusOwner(Component)->void:::Sets the focus owner
java.awt.KeyboardFocusManager#clearFocusOwner()->void:::Clears the focus owner at both the Java and native levels if the focus owner exists and resides in the same context as the calling thread, otherwise the method returns silently
java.awt.KeyboardFocusManager#clearGlobalFocusOwner()->void:::Clears the global focus owner at both the Java and native levels
java.awt.KeyboardFocusManager#clearGlobalFocusOwnerPriv()->void::: keyboard focus manager clear global focus owner priv
java.awt.KeyboardFocusManager#getNativeFocusOwner()->Component::: keyboard focus manager get native focus owner
java.awt.KeyboardFocusManager#setNativeFocusOwner(Component)->void::: keyboard focus manager set native focus owner
java.awt.KeyboardFocusManager#getNativeFocusedWindow()->Window::: keyboard focus manager get native focused window
java.awt.KeyboardFocusManager#getPermanentFocusOwner()->Component:::Returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread
java.awt.KeyboardFocusManager#getGlobalPermanentFocusOwner()->Component:::Returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner
java.awt.KeyboardFocusManager#setGlobalPermanentFocusOwner(Component)->void:::Sets the permanent focus owner
java.awt.KeyboardFocusManager#getFocusedWindow()->Window:::Returns the focused Window, if the focused Window is in the same context as the calling thread
java.awt.KeyboardFocusManager#getGlobalFocusedWindow()->Window:::Returns the focused Window, even if the calling thread is in a different context than the focused Window
java.awt.KeyboardFocusManager#setGlobalFocusedWindow(Window)->void:::Sets the focused Window
java.awt.KeyboardFocusManager#getActiveWindow()->Window:::Returns the active Window, if the active Window is in the same context as the calling thread
java.awt.KeyboardFocusManager#getGlobalActiveWindow()->Window:::Returns the active Window, even if the calling thread is in a different context than the active Window
java.awt.KeyboardFocusManager#setGlobalActiveWindow(Window)->void:::Sets the active Window
java.awt.KeyboardFocusManager#getDefaultFocusTraversalPolicy()->FocusTraversalPolicy:::Returns the default FocusTraversalPolicy
java.awt.KeyboardFocusManager#setDefaultFocusTraversalPolicy(FocusTraversalPolicy)->void:::Sets the default FocusTraversalPolicy
java.awt.KeyboardFocusManager#setDefaultFocusTraversalKeys(int, Set)->void:::Sets the default focus traversal keys for a given traversal operation
java.awt.KeyboardFocusManager#getDefaultFocusTraversalKeys(int)->Set:::Returns a Set of default focus traversal keys for a given traversal operation
java.awt.KeyboardFocusManager#getCurrentFocusCycleRoot()->Container:::Returns the current focus cycle root, if the current focus cycle root is in the same context as the calling thread
java.awt.KeyboardFocusManager#getGlobalCurrentFocusCycleRoot()->Container:::Returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root
java.awt.KeyboardFocusManager#setGlobalCurrentFocusCycleRoot(Container)->void:::Sets the current focus cycle root
java.awt.KeyboardFocusManager#setGlobalCurrentFocusCycleRootPriv(Container)->void::: keyboard focus manager set global current focus cycle root priv
java.awt.KeyboardFocusManager#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
java.awt.KeyboardFocusManager#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
java.awt.KeyboardFocusManager#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this keyboard focus manager.
java.awt.KeyboardFocusManager#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
java.awt.KeyboardFocusManager#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list for a specific property
java.awt.KeyboardFocusManager#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all the PropertyChangeListeners associated with the named property.
java.awt.KeyboardFocusManager#firePropertyChange(String, Object, Object)->void:::Fires a PropertyChangeEvent in response to a change in a bound property
java.awt.KeyboardFocusManager#addVetoableChangeListener(VetoableChangeListener)->void:::Adds a VetoableChangeListener to the listener list
java.awt.KeyboardFocusManager#removeVetoableChangeListener(VetoableChangeListener)->void:::Removes a VetoableChangeListener from the listener list
java.awt.KeyboardFocusManager#getVetoableChangeListeners()->VetoableChangeListener[]:::Returns an array of all the vetoable change listeners registered on this keyboard focus manager.
java.awt.KeyboardFocusManager#addVetoableChangeListener(String, VetoableChangeListener)->void:::Adds a VetoableChangeListener to the listener list for a specific property
java.awt.KeyboardFocusManager#removeVetoableChangeListener(String, VetoableChangeListener)->void:::Removes a VetoableChangeListener from the listener list for a specific property
java.awt.KeyboardFocusManager#getVetoableChangeListeners(String)->VetoableChangeListener[]:::Returns an array of all the VetoableChangeListeners associated with the named property.
java.awt.KeyboardFocusManager#fireVetoableChange(String, Object, Object)->void:::Fires a PropertyChangeEvent in response to a change in a vetoable property
java.awt.KeyboardFocusManager#addKeyEventDispatcher(KeyEventDispatcher)->void:::Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher chain
java.awt.KeyboardFocusManager#removeKeyEventDispatcher(KeyEventDispatcher)->void:::Removes a KeyEventDispatcher which was previously added to this KeyboardFocusManager's dispatcher chain
java.awt.KeyboardFocusManager#getKeyEventDispatchers()->java.util.List:::Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List
java.awt.KeyboardFocusManager#addKeyEventPostProcessor(KeyEventPostProcessor)->void:::Adds a KeyEventPostProcessor to this KeyboardFocusManager's post- processor chain
java.awt.KeyboardFocusManager#removeKeyEventPostProcessor(KeyEventPostProcessor)->void:::Removes a previously added KeyEventPostProcessor from this KeyboardFocusManager's post-processor chain
java.awt.KeyboardFocusManager#getKeyEventPostProcessors()->java.util.List:::Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a List
java.awt.KeyboardFocusManager#setMostRecentFocusOwner(Component)->void::: keyboard focus manager set most recent focus owner
java.awt.KeyboardFocusManager#setMostRecentFocusOwner(Window, Component)->void::: keyboard focus manager set most recent focus owner
java.awt.KeyboardFocusManager#clearMostRecentFocusOwner(Component)->void::: keyboard focus manager clear most recent focus owner
java.awt.KeyboardFocusManager#getMostRecentFocusOwner(Window)->Component::: keyboard focus manager get most recent focus owner
java.awt.KeyboardFocusManager#dispatchEvent(AWTEvent)->boolean:::This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf
java.awt.KeyboardFocusManager#redispatchEvent(Component, AWTEvent)->void:::Redispatches an AWTEvent in such a way that the AWT event dispatcher will not recursively request that the KeyboardFocusManager, or any installed KeyEventDispatchers, dispatch the event again
java.awt.KeyboardFocusManager#dispatchKeyEvent(KeyEvent)->boolean:::Typically this method will be called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered
java.awt.KeyboardFocusManager#postProcessKeyEvent(KeyEvent)->boolean:::This method will be called by dispatchKeyEvent
java.awt.KeyboardFocusManager#processKeyEvent(Component, KeyEvent)->void:::This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent
java.awt.KeyboardFocusManager#enqueueKeyEvents(long, Component)->void:::Called by the AWT to notify the KeyboardFocusManager that it should delay dispatching of KeyEvents until the specified Component becomes the focus owner
java.awt.KeyboardFocusManager#dequeueKeyEvents(long, Component)->void:::Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents
java.awt.KeyboardFocusManager#discardKeyEvents(Component)->void:::Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents
java.awt.KeyboardFocusManager#focusNextComponent(Component)->void:::Focuses the Component after aComponent, typically based on a FocusTraversalPolicy.
java.awt.KeyboardFocusManager#focusPreviousComponent(Component)->void:::Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.
java.awt.KeyboardFocusManager#upFocusCycle(Component)->void:::Moves the focus up one focus traversal cycle
java.awt.KeyboardFocusManager#downFocusCycle(Container)->void:::Moves the focus down one focus traversal cycle
java.awt.KeyboardFocusManager#focusNextComponent()->void:::Focuses the Component after the current focus owner.
java.awt.KeyboardFocusManager#focusPreviousComponent()->void:::Focuses the Component before the current focus owner.
java.awt.KeyboardFocusManager#upFocusCycle()->void:::Moves the focus up one focus traversal cycle from the current focus owner
java.awt.KeyboardFocusManager#downFocusCycle()->void:::Moves the focus down one focus traversal cycle from the current focus owner, if and only if the current focus owner is a Container that is a focus cycle root
java.awt.KeyboardFocusManager#dumpRequests()->void:::Dumps the list of focus requests to stderr
java.awt.KeyboardFocusManager#processSynchronousLightweightTransfer(Component, Component, boolean, boolean, long)->boolean::: keyboard focus manager process synchronous lightweight transfer
java.awt.KeyboardFocusManager#shouldNativelyFocusHeavyweight(Component, Component, boolean, boolean, long, FocusEvent.Cause)->int:::Indicates whether the native implementation should proceed with a pending, native focus request
java.awt.KeyboardFocusManager#markClearGlobalFocusOwner()->Window:::Returns the Window which will be active after processing this request, or null if this is a duplicate request
java.awt.KeyboardFocusManager#getCurrentWaitingRequest(Component)->Component::: keyboard focus manager get current waiting request
java.awt.KeyboardFocusManager#isAutoFocusTransferEnabled()->boolean::: keyboard focus manager is auto focus transfer enabled
java.awt.KeyboardFocusManager#isAutoFocusTransferEnabledFor(Component)->boolean::: keyboard focus manager is auto focus transfer enabled for
java.awt.KeyboardFocusManager#processCurrentLightweightRequests()->void::: keyboard focus manager process current lightweight requests
java.awt.KeyboardFocusManager#retargetUnexpectedFocusEvent(FocusEvent)->FocusEvent::: keyboard focus manager retarget unexpected focus event
java.awt.KeyboardFocusManager#retargetFocusGained(FocusEvent)->FocusEvent::: keyboard focus manager retarget focus gained
java.awt.KeyboardFocusManager#retargetFocusLost(FocusEvent)->FocusEvent::: keyboard focus manager retarget focus lost
java.awt.KeyboardFocusManager#retargetFocusEvent(AWTEvent)->AWTEvent::: keyboard focus manager retarget focus event
java.awt.KeyboardFocusManager#clearMarkers()->void:::Clears markers queue This method is not intended to be overridden by KFM's
java.awt.KeyboardFocusManager#removeFirstRequest()->boolean::: keyboard focus manager remove first request
java.awt.KeyboardFocusManager#removeLastFocusRequest(Component)->void::: keyboard focus manager remove last focus request
java.awt.KeyboardFocusManager#getHeavyweight(Component)->Component::: keyboard focus manager get heavyweight
java.awt.KeyboardFocusManager#isProxyActive(KeyEvent)->boolean::: keyboard focus manager is proxy active
java.awt.KeyEventDispatcher#dispatchKeyEvent(KeyEvent)->boolean:::This method is called by the current KeyboardFocusManager requesting that this KeyEventDispatcher dispatch the specified event on its behalf
java.awt.KeyEventPostProcessor#postProcessKeyEvent(KeyEvent)->boolean:::This method is called by the current KeyboardFocusManager, requesting that this KeyEventPostProcessor perform any necessary post-processing which should be part of the KeyEvent's final resolution
java.awt.Label#constructComponentName()->String:::Construct a name for this component
java.awt.Label#addNotify()->void:::Creates the peer for this label
java.awt.Label#getAlignment()->int:::Gets the current alignment of this label
java.awt.Label#setAlignment(int)->void:::Sets the alignment for this label to the specified alignment
java.awt.Label#getText()->String:::Gets the text of this label.
java.awt.Label#setText(String)->void:::Sets the text for this label to the specified text.
java.awt.Label#paramString()->String:::Returns a string representing the state of this Label
java.awt.Label#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Label
java.awt.Label.AccessibleAWTLabel#getAccessibleName()->String:::Get the accessible name of this object.
java.awt.Label.AccessibleAWTLabel#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.LayoutManager#addLayoutComponent(String, Component)->void:::If the layout manager uses a per-component string, adds the component comp to the layout, associating it with the string specified by name.
java.awt.LayoutManager#removeLayoutComponent(Component)->void:::Removes the specified component from the layout.
java.awt.LayoutManager#preferredLayoutSize(Container)->Dimension:::Calculates the preferred size dimensions for the specified container, given the components it contains.
java.awt.LayoutManager#minimumLayoutSize(Container)->Dimension:::Calculates the minimum size dimensions for the specified container, given the components it contains.
java.awt.LayoutManager#layoutContainer(Container)->void:::Lays out the specified container.
java.awt.LayoutManager2#addLayoutComponent(Component, Object)->void:::Adds the specified component to the layout, using the specified constraint object.
java.awt.LayoutManager2#maximumLayoutSize(Container)->Dimension:::Calculates the maximum size dimensions for the specified container, given the components it contains.
java.awt.LayoutManager2#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis
java.awt.LayoutManager2#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis
java.awt.LayoutManager2#invalidateLayout(Container)->void:::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
java.awt.LinearGradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate a linear color gradient pattern
java.awt.LinearGradientPaint#getStartPoint()->Point2D:::Returns a copy of the start point of the gradient axis.
java.awt.LinearGradientPaint#getEndPoint()->Point2D:::Returns a copy of the end point of the gradient axis.
java.awt.LinearGradientPaintContext#fillRaster(int[], int, int, int, int, int, int)->void:::Return a Raster containing the colors generated for the graphics operation
java.awt.List#constructComponentName()->String:::Construct a name for this component
java.awt.List#addNotify()->void:::Creates the peer for the list
java.awt.List#removeNotify()->void:::Removes the peer for this list
java.awt.List#getItemCount()->int:::Gets the number of items in the list.
java.awt.List#countItems()->int:::Returns the number of items in the list.
java.awt.List#getItem(int)->String:::Gets the item associated with the specified index.
java.awt.List#getItemImpl(int)->String::: list get item impl
java.awt.List#getItems()->String[]:::Gets the items in the list.
java.awt.List#add(String)->void:::Adds the specified item to the end of scrolling list.
java.awt.List#addItem(String)->void:::Adds the specified item to the end of the list.
java.awt.List#add(String, int)->void:::Adds the specified item to the scrolling list at the position indicated by the index
java.awt.List#addItem(String, int)->void:::Adds the specified item to the list at the position indicated by the index.
java.awt.List#replaceItem(String, int)->void:::Replaces the item at the specified index in the scrolling list with the new string.
java.awt.List#removeAll()->void:::Removes all items from this list.
java.awt.List#clear()->void::: list clear
java.awt.List#remove(String)->void:::Removes the first occurrence of an item from the list
java.awt.List#remove(int)->void:::Removes the item at the specified position from this scrolling list
java.awt.List#delItem(int)->void:::Removes the item at the specified position.
java.awt.List#getSelectedIndex()->int:::Gets the index of the selected item on the list,
java.awt.List#getSelectedIndexes()->int[]:::Gets the selected indexes on the list.
java.awt.List#getSelectedItem()->String:::Gets the selected item on this scrolling list.
java.awt.List#getSelectedItems()->String[]:::Gets the selected items on this scrolling list.
java.awt.List#getSelectedObjects()->Object[]:::Gets the selected items on this scrolling list in an array of Objects.
java.awt.List#select(int)->void:::Selects the item at the specified index in the scrolling list
java.awt.List#deselect(int)->void:::Deselects the item at the specified index
java.awt.List#isIndexSelected(int)->boolean:::Determines if the specified item in this scrolling list is selected.
java.awt.List#isSelected(int)->boolean:::Determines if the specified item in the list is selected.
java.awt.List#getRows()->int:::Gets the number of visible lines in this list
java.awt.List#isMultipleMode()->boolean:::Determines whether this list allows multiple selections.
java.awt.List#allowsMultipleSelections()->boolean:::Determines whether this list allows multiple selections.
java.awt.List#setMultipleMode(boolean)->void:::Sets the flag that determines whether this list allows multiple selections
java.awt.List#setMultipleSelections(boolean)->void:::Enables or disables multiple selection mode for this list.
java.awt.List#getVisibleIndex()->int:::Gets the index of the item that was last made visible by the method makeVisible.
java.awt.List#makeVisible(int)->void:::Makes the item at the specified index visible.
java.awt.List#getPreferredSize(int)->Dimension:::Gets the preferred dimensions for a list with the specified number of rows.
java.awt.List#preferredSize(int)->Dimension:::Returns the preferred size of this component assuming it has the specified number of rows.
java.awt.List#getPreferredSize()->Dimension:::Gets the preferred size of this scrolling list.
java.awt.List#preferredSize()->Dimension::: list preferred size
java.awt.List#getMinimumSize(int)->Dimension:::Gets the minimum dimensions for a list with the specified number of rows.
java.awt.List#minimumSize(int)->Dimension:::Returns the minimum dimensions for the list with the specified number of rows.
java.awt.List#getMinimumSize()->Dimension:::Determines the minimum size of this scrolling list.
java.awt.List#minimumSize()->Dimension::: list minimum size
java.awt.List#addItemListener(ItemListener)->void:::Adds the specified item listener to receive item events from this list
java.awt.List#removeItemListener(ItemListener)->void:::Removes the specified item listener so that it no longer receives item events from this list
java.awt.List#getItemListeners()->ItemListener[]:::Returns an array of all the item listeners registered on this list.
java.awt.List#addActionListener(ActionListener)->void:::Adds the specified action listener to receive action events from this list
java.awt.List#removeActionListener(ActionListener)->void:::Removes the specified action listener so that it no longer receives action events from this list
java.awt.List#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this list.
java.awt.List#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this List
java.awt.List#eventEnabled(AWTEvent)->boolean::: list event enabled
java.awt.List#processEvent(AWTEvent)->void:::Processes events on this scrolling list
java.awt.List#processItemEvent(ItemEvent)->void:::Processes item events occurring on this list by dispatching them to any registered ItemListener objects
java.awt.List#processActionEvent(ActionEvent)->void:::Processes action events occurring on this component by dispatching them to any registered ActionListener objects
java.awt.List#paramString()->String:::Returns the parameter string representing the state of this scrolling list
java.awt.List#delItems(int, int)->void:::Deletes the list items in the specified index range.
java.awt.List#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this List
java.awt.List.AccessibleAWTList#actionPerformed(ActionEvent)->void::: accessible list action performed
java.awt.List.AccessibleAWTList#itemStateChanged(ItemEvent)->void::: accessible list item state changed
java.awt.List.AccessibleAWTList#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
java.awt.List.AccessibleAWTList#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.List.AccessibleAWTList#getAccessibleAt(Point)->Accessible:::Returns the Accessible child contained at the local coordinate Point, if one exists.
java.awt.List.AccessibleAWTList#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
java.awt.List.AccessibleAWTList#getAccessibleChild(int)->Accessible:::Return the nth Accessible child of the object.
java.awt.List.AccessibleAWTList#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
java.awt.List.AccessibleAWTList#getAccessibleSelectionCount()->int:::Returns the number of items currently selected
java.awt.List.AccessibleAWTList#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected item in the object
java.awt.List.AccessibleAWTList#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected.
java.awt.List.AccessibleAWTList#addAccessibleSelection(int)->void:::Adds the specified selected item in the object to the object's selection
java.awt.List.AccessibleAWTList#removeAccessibleSelection(int)->void:::Removes the specified selected item in the object from the object's selection
java.awt.List.AccessibleAWTList#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected.
java.awt.List.AccessibleAWTList#selectAllAccessibleSelection()->void:::Causes every selected item in the object to be selected if the object supports multiple selections.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext for this object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getLocale()->Locale:::Gets the locale of the component
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleIndexInParent()->int:::Get the 0-based index of this object in its accessible parent.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleChildrenCount()->int:::Returns the number of accessible children of the object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleChild(int)->Accessible:::Return the specified Accessible child of the object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getBackground()->Color:::Get the background color of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setBackground(Color)->void:::Set the background color of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getForeground()->Color:::Get the foreground color of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setForeground(Color)->void:::Set the foreground color of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getCursor()->Cursor:::Get the Cursor of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setCursor(Cursor)->void:::Set the Cursor of this object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getFont()->Font:::Get the Font of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setFont(Font)->void:::Set the Font of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getFontMetrics(Font)->FontMetrics:::Get the FontMetrics of this object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#isEnabled()->boolean:::Determine if the object is enabled
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setEnabled(boolean)->void:::Set the enabled state of the object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#isVisible()->boolean:::Determine if the object is visible
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setVisible(boolean)->void:::Set the visible state of the object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#isShowing()->boolean:::Determine if the object is showing
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#contains(Point)->boolean:::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getLocationOnScreen()->Point:::Returns the location of the object on the screen.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getLocation()->Point:::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setLocation(Point)->void:::Sets the location of the object relative to the parent.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getBounds()->Rectangle:::Gets the bounds of this object in the form of a Rectangle object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setBounds(Rectangle)->void:::Sets the bounds of this object in the form of a Rectangle object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getSize()->Dimension:::Returns the size of this object in the form of a Dimension object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#setSize(Dimension)->void:::Resizes this object so that it has width and height.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#isFocusTraversable()->boolean:::Returns whether this object can accept focus or not
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#requestFocus()->void:::Requests focus for this object
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#addFocusListener(FocusListener)->void:::Adds the specified focus listener to receive focus events from this component.
java.awt.List.AccessibleAWTList.AccessibleAWTListChild#removeFocusListener(FocusListener)->void:::Removes the specified focus listener so it no longer receives focus events from this component.
java.awt.MediaTracker#addImage(Image, int)->void:::Adds an image to the list of images being tracked by this media tracker
java.awt.MediaTracker#addImage(Image, int, int, int)->void:::Adds a scaled image to the list of images being tracked by this media tracker
java.awt.MediaTracker#checkAll()->boolean:::Checks to see if all images being tracked by this media tracker have finished loading
java.awt.MediaTracker#checkAll(boolean)->boolean:::Checks to see if all images being tracked by this media tracker have finished loading
java.awt.MediaTracker#isErrorAny()->boolean:::Checks the error status of all of the images.
java.awt.MediaTracker#getErrorsAny()->Object[]:::Returns a list of all media that have encountered an error.
java.awt.MediaTracker#waitForAll()->void:::Starts loading all images tracked by this media tracker
java.awt.MediaTracker#waitForAll(long)->boolean:::Starts loading all images tracked by this media tracker
java.awt.MediaTracker#statusAll(boolean)->int:::Calculates and returns the bitwise inclusive OR of the status of all media that are tracked by this media tracker
java.awt.MediaTracker#checkID(int)->boolean:::Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading
java.awt.MediaTracker#checkID(int, boolean)->boolean:::Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading
java.awt.MediaTracker#isErrorID(int)->boolean:::Checks the error status of all of the images tracked by this media tracker with the specified identifier.
java.awt.MediaTracker#getErrorsID(int)->Object[]:::Returns a list of media with the specified ID that have encountered an error.
java.awt.MediaTracker#waitForID(int)->void:::Starts loading all images tracked by this media tracker with the specified identifier
java.awt.MediaTracker#waitForID(int, long)->boolean:::Starts loading all images tracked by this media tracker with the specified identifier
java.awt.MediaTracker#statusID(int, boolean)->int:::Calculates and returns the bitwise inclusive OR of the status of all media with the specified identifier that are tracked by this media tracker
java.awt.MediaTracker#removeImage(Image)->void:::Removes the specified image from this media tracker
java.awt.MediaTracker#removeImage(Image, int)->void:::Removes the specified image from the specified tracking ID of this media tracker
java.awt.MediaTracker#removeImage(Image, int, int, int)->void:::Removes the specified image with the specified width, height, and ID from this media tracker
java.awt.MediaTracker#setDone()->void::: media tracker set done
java.awt.MediaEntry#getMedia()->Object::: media entry get media
java.awt.MediaEntry#insert(MediaEntry, MediaEntry)->MediaEntry::: media entry insert
java.awt.MediaEntry#getID()->int::: media entry get d
java.awt.MediaEntry#startLoad()->void::: media entry start load
java.awt.MediaEntry#cancel()->void::: media entry cancel
java.awt.MediaEntry#getStatus(boolean, boolean)->int::: media entry get status
java.awt.MediaEntry#setStatus(int)->void::: media entry set status
java.awt.ImageMediaEntry#matches(Image, int, int)->boolean::: image media entry matches
java.awt.ImageMediaEntry#getMedia()->Object::: image media entry get media
java.awt.ImageMediaEntry#getStatus(boolean, boolean)->int::: image media entry get status
java.awt.ImageMediaEntry#startLoad()->void::: image media entry start load
java.awt.ImageMediaEntry#parseflags(int)->int::: image media entry parseflags
java.awt.ImageMediaEntry#imageUpdate(Image, int, int, int, int, int)->boolean::: image media entry image update
java.awt.Menu#constructComponentName()->String:::Construct a name for this MenuComponent
java.awt.Menu#addNotify()->void:::Creates the menu's peer
java.awt.Menu#removeNotify()->void:::Removes the menu's peer
java.awt.Menu#isTearOff()->boolean:::Indicates whether this menu is a tear-off menu
java.awt.Menu#getItemCount()->int:::Get the number of items in this menu.
java.awt.Menu#countItems()->int:::Returns the number of items in this menu.
java.awt.Menu#countItemsImpl()->int::: menu count items impl
java.awt.Menu#getItem(int)->MenuItem:::Gets the item located at the specified index of this menu.
java.awt.Menu#getItemImpl(int)->MenuItem::: menu get item impl
java.awt.Menu#add(MenuItem)->MenuItem:::Adds the specified menu item to this menu
java.awt.Menu#add(String)->void:::Adds an item with the specified label to this menu.
java.awt.Menu#insert(MenuItem, int)->void::: menu insert
java.awt.Menu#insert(String, int)->void::: menu insert
java.awt.Menu#addSeparator()->void:::Adds a separator line, or a hypen, to the menu at the current position.
java.awt.Menu#insertSeparator(int)->void::: menu insert separator
java.awt.Menu#remove(int)->void:::Removes the menu item at the specified index from this menu.
java.awt.Menu#remove(MenuComponent)->void:::Removes the specified menu item from this menu.
java.awt.Menu#removeAll()->void:::Removes all items from this menu.
java.awt.Menu#handleShortcut(KeyEvent)->boolean::: menu handle shortcut
java.awt.Menu#getShortcutMenuItem(MenuShortcut)->MenuItem::: menu get shortcut menu item
java.awt.Menu#shortcuts()->Enumeration::: menu shortcuts
java.awt.Menu#deleteShortcut(MenuShortcut)->void::: menu delete shortcut
java.awt.Menu#paramString()->String:::Returns a string representing the state of this Menu
java.awt.Menu#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Menu
java.awt.Menu#getAccessibleChildIndex(MenuComponent)->int:::Defined in MenuComponent
java.awt.Menu.AccessibleAWTMenu#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.MenuBar#constructComponentName()->String:::Construct a name for this MenuComponent
java.awt.MenuBar#addNotify()->void:::Creates the menu bar's peer
java.awt.MenuBar#removeNotify()->void:::Removes the menu bar's peer
java.awt.MenuBar#getHelpMenu()->Menu:::Gets the help menu on the menu bar.
java.awt.MenuBar#setHelpMenu(Menu)->void:::Sets the specified menu to be this menu bar's help menu
java.awt.MenuBar#add(Menu)->Menu:::Adds the specified menu to the menu bar
java.awt.MenuBar#remove(int)->void:::Removes the menu located at the specified index from this menu bar.
java.awt.MenuBar#remove(MenuComponent)->void:::Removes the specified menu component from this menu bar.
java.awt.MenuBar#getMenuCount()->int:::Gets the number of menus on the menu bar.
java.awt.MenuBar#countMenus()->int:::Gets the number of menus on the menu bar.
java.awt.MenuBar#getMenuCountImpl()->int::: menu bar get menu count impl
java.awt.MenuBar#getMenu(int)->Menu:::Gets the specified menu.
java.awt.MenuBar#getMenuImpl(int)->Menu::: menu bar get menu impl
java.awt.MenuBar#shortcuts()->Enumeration:::Gets an enumeration of all menu shortcuts this menu bar is managing.
java.awt.MenuBar#getShortcutMenuItem(MenuShortcut)->MenuItem:::Gets the instance of MenuItem associated with the specified MenuShortcut object, or null if none of the menu items being managed by this menu bar is associated with the specified menu shortcut.
java.awt.MenuBar#handleShortcut(KeyEvent)->boolean::: menu bar handle shortcut
java.awt.MenuBar#deleteShortcut(MenuShortcut)->void:::Deletes the specified menu shortcut.
java.awt.MenuBar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this MenuBar
java.awt.MenuBar#getAccessibleChildIndex(MenuComponent)->int:::Defined in MenuComponent
java.awt.MenuBar.AccessibleAWTMenuBar#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.MenuComponent#getAccessControlContext()->AccessControlContext::: menu component get access control context
java.awt.MenuComponent#constructComponentName()->String:::Constructs a name for this MenuComponent
java.awt.MenuComponent#getComponentFactory()->ComponentFactory::: menu component get component factory
java.awt.MenuComponent#getName()->String:::Gets the name of the menu component.
java.awt.MenuComponent#setName(String)->void:::Sets the name of the component to the specified string.
java.awt.MenuComponent#getParent()->MenuContainer:::Returns the parent container for this menu component.
java.awt.MenuComponent#getParent_NoClientCode()->MenuContainer::: menu component get parent_ no client code
java.awt.MenuComponent#getFont()->Font:::Gets the font used for this menu component.
java.awt.MenuComponent#getFont_NoClientCode()->Font::: menu component get font_ no client code
java.awt.MenuComponent#setFont(Font)->void:::Sets the font to be used for this menu component to the specified font
java.awt.MenuComponent#removeNotify()->void:::Removes the menu component's peer
java.awt.MenuComponent#postEvent(Event)->boolean:::Posts the specified event to the menu
java.awt.MenuComponent#dispatchEvent(AWTEvent)->void:::Delivers an event to this component or one of its sub components.
java.awt.MenuComponent#dispatchEventImpl(AWTEvent)->void::: menu component dispatch event impl
java.awt.MenuComponent#eventEnabled(AWTEvent)->boolean::: menu component event enabled
java.awt.MenuComponent#processEvent(AWTEvent)->void:::Processes events occurring on this menu component
java.awt.MenuComponent#paramString()->String:::Returns a string representing the state of this MenuComponent
java.awt.MenuComponent#toString()->String:::Returns a representation of this menu component as a string.
java.awt.MenuComponent#getTreeLock()->Object:::Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.
java.awt.MenuComponent#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this MenuComponent
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelection()->AccessibleSelection:::Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleName()->String:::Gets the accessible name of this object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleDescription()->String:::Gets the accessible description of this object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleStateSet()->AccessibleStateSet:::Gets the state of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleParent()->Accessible:::Gets the Accessible parent of this object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getLocale()->java.util.Locale:::Returns the locale of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleComponent()->AccessibleComponent:::Gets the AccessibleComponent associated with this object if one exists
java.awt.MenuComponent.AccessibleAWTMenuComponent#getBackground()->Color:::Gets the background color of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setBackground(Color)->void:::Sets the background color of this object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getForeground()->Color:::Gets the foreground color of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setForeground(Color)->void:::Sets the foreground color of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getCursor()->Cursor:::Gets the Cursor of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setCursor(Cursor)->void:::Sets the Cursor of this object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getFont()->Font:::Gets the Font of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setFont(Font)->void:::Sets the Font of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getFontMetrics(Font)->FontMetrics:::Gets the FontMetrics of this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#isEnabled()->boolean:::Determines if the object is enabled.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setEnabled(boolean)->void:::Sets the enabled state of the object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#isVisible()->boolean:::Determines if the object is visible
java.awt.MenuComponent.AccessibleAWTMenuComponent#setVisible(boolean)->void:::Sets the visible state of the object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#isShowing()->boolean:::Determines if the object is showing
java.awt.MenuComponent.AccessibleAWTMenuComponent#contains(Point)->boolean:::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getLocationOnScreen()->Point:::Returns the location of the object on the screen.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getLocation()->Point:::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.
java.awt.MenuComponent.AccessibleAWTMenuComponent#setLocation(Point)->void:::Sets the location of the object relative to the parent.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getBounds()->Rectangle:::Gets the bounds of this object in the form of a Rectangle object
java.awt.MenuComponent.AccessibleAWTMenuComponent#setBounds(Rectangle)->void:::Sets the bounds of this object in the form of a Rectangle object
java.awt.MenuComponent.AccessibleAWTMenuComponent#getSize()->Dimension:::Returns the size of this object in the form of a Dimension object
java.awt.MenuComponent.AccessibleAWTMenuComponent#setSize(Dimension)->void:::Resizes this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point
java.awt.MenuComponent.AccessibleAWTMenuComponent#isFocusTraversable()->boolean:::Returns whether this object can accept focus or not.
java.awt.MenuComponent.AccessibleAWTMenuComponent#requestFocus()->void:::Requests focus for this object.
java.awt.MenuComponent.AccessibleAWTMenuComponent#addFocusListener(java.awt.event.FocusListener)->void:::Adds the specified focus listener to receive focus events from this component.
java.awt.MenuComponent.AccessibleAWTMenuComponent#removeFocusListener(java.awt.event.FocusListener)->void:::Removes the specified focus listener so it no longer receives focus events from this component.
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelectionCount()->int:::Returns the number of Accessible children currently selected
java.awt.MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected child in the object
java.awt.MenuComponent.AccessibleAWTMenuComponent#isAccessibleChildSelected(int)->boolean:::Determines if the current child of this object is selected.
java.awt.MenuComponent.AccessibleAWTMenuComponent#addAccessibleSelection(int)->void:::Adds the specified Accessible child of the object to the object's selection
java.awt.MenuComponent.AccessibleAWTMenuComponent#removeAccessibleSelection(int)->void:::Removes the specified child of the object from the object's selection
java.awt.MenuComponent.AccessibleAWTMenuComponent#clearAccessibleSelection()->void:::Clears the selection in the object, so that no children in the object are selected.
java.awt.MenuComponent.AccessibleAWTMenuComponent#selectAllAccessibleSelection()->void:::Causes every child of the object to be selected if the object supports multiple selections.
java.awt.MenuComponent#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent.
java.awt.MenuComponent#getAccessibleChildIndex(MenuComponent)->int:::Gets the index of the child within this MenuComponent.
java.awt.MenuComponent#getAccessibleStateSet()->AccessibleStateSet:::Gets the state of this object.
java.awt.MenuContainer#getFont()->Font:::Returns the font in use by this container.
java.awt.MenuContainer#remove(MenuComponent)->void:::Removes the specified menu component from the menu.
java.awt.MenuContainer#postEvent(Event)->boolean:::Posts an event to the listeners.
java.awt.MenuItem#constructComponentName()->String:::Construct a name for this MenuComponent
java.awt.MenuItem#addNotify()->void:::Creates the menu item's peer
java.awt.MenuItem#getLabel()->String:::Gets the label for this menu item.
java.awt.MenuItem#setLabel(String)->void:::Sets the label for this menu item to the specified label.
java.awt.MenuItem#isEnabled()->boolean:::Checks whether this menu item is enabled.
java.awt.MenuItem#setEnabled(boolean)->void:::Sets whether or not this menu item can be chosen.
java.awt.MenuItem#enable()->void::: menu item enable
java.awt.MenuItem#enable(boolean)->void:::Sets whether or not this menu item can be chosen.
java.awt.MenuItem#disable()->void::: menu item disable
java.awt.MenuItem#getShortcut()->MenuShortcut:::Get the MenuShortcut object associated with this menu item,
java.awt.MenuItem#setShortcut(MenuShortcut)->void:::Set the MenuShortcut object associated with this menu item
java.awt.MenuItem#deleteShortcut()->void:::Delete any MenuShortcut object associated with this menu item.
java.awt.MenuItem#deleteShortcut(MenuShortcut)->void::: menu item delete shortcut
java.awt.MenuItem#doMenuEvent(long, int)->void::: menu item do menu event
java.awt.MenuItem#handleShortcut(KeyEvent)->boolean::: menu item handle shortcut
java.awt.MenuItem#getShortcutMenuItem(MenuShortcut)->MenuItem::: menu item get shortcut menu item
java.awt.MenuItem#enableEvents(long)->void:::Enables event delivery to this menu item for events to be defined by the specified event mask parameter  Since event types are automatically enabled when a listener for that type is added to the menu item, this method only needs to be invoked by subclasses of MenuItem which desire to have the specified event types delivered to processEvent regardless of whether a listener is registered.
java.awt.MenuItem#disableEvents(long)->void:::Disables event delivery to this menu item for events defined by the specified event mask parameter.
java.awt.MenuItem#setActionCommand(String)->void:::Sets the command name of the action event that is fired by this menu item
java.awt.MenuItem#getActionCommand()->String:::Gets the command name of the action event that is fired by this menu item.
java.awt.MenuItem#getActionCommandImpl()->String::: menu item get action command impl
java.awt.MenuItem#addActionListener(ActionListener)->void:::Adds the specified action listener to receive action events from this menu item
java.awt.MenuItem#removeActionListener(ActionListener)->void:::Removes the specified action listener so it no longer receives action events from this menu item
java.awt.MenuItem#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this menu item.
java.awt.MenuItem#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this MenuItem
java.awt.MenuItem#processEvent(AWTEvent)->void:::Processes events on this menu item
java.awt.MenuItem#eventEnabled(AWTEvent)->boolean::: menu item event enabled
java.awt.MenuItem#processActionEvent(ActionEvent)->void:::Processes action events occurring on this menu item, by dispatching them to any registered ActionListener objects
java.awt.MenuItem#paramString()->String:::Returns a string representing the state of this MenuItem
java.awt.MenuItem#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this MenuItem
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleName()->String:::Get the accessible name of this object.
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
java.awt.MenuItem.AccessibleAWTMenuItem#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
java.awt.MenuItem.AccessibleAWTMenuItem#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
java.awt.MenuItem.AccessibleAWTMenuItem#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number.
java.awt.MenuItem.AccessibleAWTMenuItem#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
java.awt.MenuItem.AccessibleAWTMenuItem#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
java.awt.MenuItem.AccessibleAWTMenuItem#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
java.awt.MenuShortcut#getKey()->int:::Returns the raw keycode of this MenuShortcut.
java.awt.MenuShortcut#usesShiftModifier()->boolean:::Returns whether this MenuShortcut must be invoked using the SHIFT key.
java.awt.MenuShortcut#equals(MenuShortcut)->boolean:::Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key.
java.awt.MenuShortcut#equals(Object)->boolean:::Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key.
java.awt.MenuShortcut#hashCode()->int:::Returns the hashcode for this MenuShortcut.
java.awt.MenuShortcut#toString()->String:::Returns an internationalized description of the MenuShortcut.
java.awt.MenuShortcut#paramString()->String:::Returns the parameter string representing the state of this MenuShortcut
java.awt.ModalEventFilter#getModalDialog()->Dialog::: modal event filter get modal dialog
java.awt.ModalEventFilter#acceptEvent(AWTEvent)->FilterAction::: modal event filter accept event
java.awt.ModalEventFilter#acceptWindow(Window)->FilterAction::: modal event filter accept window
java.awt.ModalEventFilter#disable()->void::: modal event filter disable
java.awt.ModalEventFilter#compareTo(ModalEventFilter)->int::: modal event filter compare to
java.awt.ModalEventFilter#createFilterForDialog(Dialog)->ModalEventFilter::: modal event filter create filter for dialog
java.awt.MouseInfo#getPointerInfo()->PointerInfo:::Returns a PointerInfo instance that represents the current location of the mouse pointer
java.awt.MouseInfo#getNumberOfButtons()->int:::Returns the number of buttons on the mouse
java.awt.MultipleGradientPaint#getFractions()->float[]:::Returns a copy of the array of floats used by this gradient to calculate color distribution
java.awt.MultipleGradientPaint#getColors()->Color[]:::Returns a copy of the array of colors used by this gradient
java.awt.MultipleGradientPaint#getCycleMethod()->CycleMethod:::Returns the enumerated type which specifies cycling behavior.
java.awt.MultipleGradientPaint#getColorSpace()->ColorSpaceType:::Returns the enumerated type which specifies color space for interpolation.
java.awt.MultipleGradientPaint#getTransform()->AffineTransform:::Returns a copy of the transform applied to the gradient
java.awt.MultipleGradientPaint#getTransparency()->int:::Returns the transparency mode for this Paint object.
java.awt.MultipleGradientPaintContext#indexIntoGradientsArrays(float)->int:::Helper function to index into the gradients array
java.awt.MultipleGradientPaintContext#getRaster(int, int, int, int)->Raster::: multiple gradient paint context get raster
java.awt.MultipleGradientPaintContext#fillRaster(int[], int, int, int, int, int, int)->void::: multiple gradient paint context fill raster
java.awt.MultipleGradientPaintContext#dispose()->void::: multiple gradient paint context dispose
java.awt.MultipleGradientPaintContext#getColorModel()->ColorModel::: multiple gradient paint context get color model
java.awt.PageAttributes#clone()->Object:::Creates and returns a copy of this PageAttributes.
java.awt.PageAttributes#set(PageAttributes)->void:::Sets all of the attributes of this PageAttributes to the same values as the attributes of obj.
java.awt.PageAttributes#getColor()->ColorType:::Returns whether pages using these attributes will be rendered in color or monochrome
java.awt.PageAttributes#setColor(ColorType)->void:::Specifies whether pages using these attributes will be rendered in color or monochrome
java.awt.PageAttributes#getMedia()->MediaType:::Returns the paper size for pages using these attributes
java.awt.PageAttributes#setMedia(MediaType)->void:::Specifies the desired paper size for pages using these attributes
java.awt.PageAttributes#setMediaToDefault()->void:::Sets the paper size for pages using these attributes to the default size for the default locale
java.awt.PageAttributes#getOrientationRequested()->OrientationRequestedType:::Returns the print orientation for pages using these attributes
java.awt.PageAttributes#setOrientationRequested(OrientationRequestedType)->void:::Specifies the print orientation for pages using these attributes
java.awt.PageAttributes#setOrientationRequested(int)->void:::Specifies the print orientation for pages using these attributes
java.awt.PageAttributes#setOrientationRequestedToDefault()->void:::Sets the print orientation for pages using these attributes to the default
java.awt.PageAttributes#getOrigin()->OriginType:::Returns whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area
java.awt.PageAttributes#setOrigin(OriginType)->void:::Specifies whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area
java.awt.PageAttributes#getPrintQuality()->PrintQualityType:::Returns the print quality for pages using these attributes
java.awt.PageAttributes#setPrintQuality(PrintQualityType)->void:::Specifies the print quality for pages using these attributes
java.awt.PageAttributes#setPrintQuality(int)->void:::Specifies the print quality for pages using these attributes
java.awt.PageAttributes#setPrintQualityToDefault()->void:::Sets the print quality for pages using these attributes to the default
java.awt.PageAttributes#getPrinterResolution()->int[]:::Returns the print resolution for pages using these attributes
java.awt.PageAttributes#setPrinterResolution(int[])->void:::Specifies the desired print resolution for pages using these attributes
java.awt.PageAttributes#setPrinterResolution(int)->void:::Specifies the desired cross feed and feed print resolutions in dots per inch for pages using these attributes
java.awt.PageAttributes#setPrinterResolutionToDefault()->void:::Sets the printer resolution for pages using these attributes to the default
java.awt.PageAttributes#equals(Object)->boolean:::Determines whether two PageAttributes are equal to each other
java.awt.PageAttributes#hashCode()->int:::Returns a hash code value for this PageAttributes.
java.awt.PageAttributes#toString()->String:::Returns a string representation of this PageAttributes.
java.awt.Paint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate the color pattern
java.awt.PaintContext#dispose()->void:::Releases the resources allocated for the operation.
java.awt.PaintContext#getColorModel()->ColorModel:::Returns the ColorModel of the output
java.awt.PaintContext#getRaster(int, int, int, int)->Raster:::Returns a Raster containing the colors generated for the graphics operation.
java.awt.Panel#constructComponentName()->String:::Construct a name for this component
java.awt.Panel#addNotify()->void::: panel add notify
java.awt.Panel#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Panel
java.awt.Panel.AccessibleAWTPanel#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Point#getX()->double::: point get x
java.awt.Point#getY()->double::: point get y
java.awt.Point#getLocation()->Point:::Returns the location of this point
java.awt.Point#setLocation(Point)->void:::Sets the location of the point to the specified location
java.awt.Point#setLocation(int, int)->void:::Changes the point to have the specified location
java.awt.Point#setLocation(double, double)->void:::Sets the location of this point to the specified double coordinates
java.awt.Point#move(int, int)->void:::Moves this point to the specified location in the (x,y) coordinate plane
java.awt.Point#translate(int, int)->void:::Translates this point, at location (x,y), by dx along the x axis and dy along the y axis so that it now represents the point (x+dx,y+dy).
java.awt.Point#equals(Object)->boolean:::Determines whether or not two points are equal
java.awt.Point#toString()->String:::Returns a string representation of this point and its location in the (x,y) coordinate space
java.awt.PointerInfo#getDevice()->GraphicsDevice:::Returns the GraphicsDevice where the mouse pointer was at the moment this PointerInfo was created.
java.awt.PointerInfo#getLocation()->Point:::Returns the Point that represents the coordinates of the pointer on the screen
java.awt.Polygon#reset()->void:::Resets this Polygon object to an empty polygon
java.awt.Polygon#invalidate()->void:::Invalidates or flushes any internally-cached data that depends on the vertex coordinates of this Polygon
java.awt.Polygon#translate(int, int)->void:::Translates the vertices of the Polygon by deltaX along the x axis and by deltaY along the y axis.
java.awt.Polygon#calculateBounds(int[], int[], int)->void::: polygon calculate bounds
java.awt.Polygon#updateBounds(int, int)->void::: polygon update bounds
java.awt.Polygon#addPoint(int, int)->void:::Appends the specified coordinates to this Polygon
java.awt.Polygon#getBounds()->Rectangle:::Gets the bounding box of this Polygon
java.awt.Polygon#getBoundingBox()->Rectangle:::Returns the bounds of this Polygon.
java.awt.Polygon#contains(Point)->boolean:::Determines whether the specified Point is inside this Polygon.
java.awt.Polygon#contains(int, int)->boolean:::Determines whether the specified coordinates are inside this Polygon.
java.awt.Polygon#inside(int, int)->boolean:::Determines whether the specified coordinates are contained in this Polygon.
java.awt.Polygon#getBounds2D()->Rectangle2D::: polygon get bounds2 d
java.awt.Polygon#contains(double, double)->boolean::: polygon contains
java.awt.Polygon#contains(Point2D)->boolean::: polygon contains
java.awt.Polygon#intersects(double, double, double, double)->boolean::: polygon intersects
java.awt.Polygon#intersects(Rectangle2D)->boolean::: polygon intersects
java.awt.Polygon#contains(double, double, double, double)->boolean::: polygon contains
java.awt.Polygon#contains(Rectangle2D)->boolean::: polygon contains
java.awt.Polygon#getPathIterator(AffineTransform)->PathIterator:::Returns an iterator object that iterates along the boundary of this Polygon and provides access to the geometry of the outline of this Polygon
java.awt.Polygon#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iterator object that iterates along the boundary of the Shape and provides access to the geometry of the outline of the Shape
java.awt.Polygon.PolygonPathIterator#getWindingRule()->int:::Returns the winding rule for determining the interior of the path.
java.awt.Polygon.PolygonPathIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.Polygon.PolygonPathIterator#next()->void:::Moves the iterator forwards, along the primary direction of traversal, to the next segment of the path when there are more points in that direction.
java.awt.Polygon.PolygonPathIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.Polygon.PolygonPathIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.PopupMenu#getParent()->MenuContainer::: popup menu get parent
java.awt.PopupMenu#constructComponentName()->String:::Constructs a name for this MenuComponent
java.awt.PopupMenu#addNotify()->void:::Creates the popup menu's peer
java.awt.PopupMenu#show(Component, int, int)->void:::Shows the popup menu at the x, y position relative to an origin component
java.awt.PopupMenu#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this PopupMenu.
java.awt.PopupMenu.AccessibleAWTPopupMenu#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.PrintGraphics#getPrintJob()->PrintJob:::Returns the PrintJob object from which this PrintGraphics object originated.
java.awt.PrintJob#getGraphics()->Graphics:::Gets a Graphics object that will draw to the next page
java.awt.PrintJob#getPageDimension()->Dimension:::Returns the dimensions of the page in pixels
java.awt.PrintJob#getPageResolution()->int:::Returns the resolution of the page in pixels per inch
java.awt.PrintJob#lastPageFirst()->boolean:::Returns true if the last page will be printed first.
java.awt.PrintJob#end()->void:::Ends the print job and does any necessary cleanup.
java.awt.PrintJob#finalize()->void:::Ends this print job once it is no longer referenced.
java.awt.RadialGradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate a circular radial color gradient pattern
java.awt.RadialGradientPaint#getCenterPoint()->Point2D:::Returns a copy of the center point of the radial gradient.
java.awt.RadialGradientPaint#getFocusPoint()->Point2D:::Returns a copy of the focus point of the radial gradient
java.awt.RadialGradientPaint#getRadius()->float:::Returns the radius of the circle defining the radial gradient.
java.awt.RadialGradientPaintContext#fillRaster(int[], int, int, int, int, int, int)->void:::Return a Raster containing the colors generated for the graphics operation.
java.awt.Rectangle#getX()->double:::Returns the X coordinate of the bounding Rectangle in double precision.
java.awt.Rectangle#getY()->double:::Returns the Y coordinate of the bounding Rectangle in double precision.
java.awt.Rectangle#getWidth()->double:::Returns the width of the bounding Rectangle in double precision.
java.awt.Rectangle#getHeight()->double:::Returns the height of the bounding Rectangle in double precision.
java.awt.Rectangle#getBounds()->Rectangle:::Gets the bounding Rectangle of this Rectangle
java.awt.Rectangle#getBounds2D()->Rectangle2D::: rectangle get bounds2 d
java.awt.Rectangle#setBounds(Rectangle)->void:::Sets the bounding Rectangle of this Rectangle to match the specified Rectangle
java.awt.Rectangle#setBounds(int, int, int, int)->void:::Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height
java.awt.Rectangle#setRect(double, double, double, double)->void:::Sets the bounds of this Rectangle to the integer bounds which encompass the specified x, y, width, and height
java.awt.Rectangle#reshape(int, int, int, int)->void:::Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height.
java.awt.Rectangle#getLocation()->Point:::Returns the location of this Rectangle
java.awt.Rectangle#setLocation(Point)->void:::Moves this Rectangle to the specified location
java.awt.Rectangle#setLocation(int, int)->void:::Moves this Rectangle to the specified location
java.awt.Rectangle#move(int, int)->void:::Moves this Rectangle to the specified location.
java.awt.Rectangle#translate(int, int)->void:::Translates this Rectangle the indicated distance, to the right along the X coordinate axis, and downward along the Y coordinate axis.
java.awt.Rectangle#getSize()->Dimension:::Gets the size of this Rectangle, represented by the returned Dimension
java.awt.Rectangle#setSize(Dimension)->void:::Sets the size of this Rectangle to match the specified Dimension
java.awt.Rectangle#setSize(int, int)->void:::Sets the size of this Rectangle to the specified width and height
java.awt.Rectangle#resize(int, int)->void:::Sets the size of this Rectangle to the specified width and height.
java.awt.Rectangle#contains(Point)->boolean:::Checks whether or not this Rectangle contains the specified Point.
java.awt.Rectangle#contains(int, int)->boolean:::Checks whether or not this Rectangle contains the point at the specified location (x,y).
java.awt.Rectangle#contains(Rectangle)->boolean:::Checks whether or not this Rectangle entirely contains the specified Rectangle.
java.awt.Rectangle#contains(int, int, int, int)->boolean:::Checks whether this Rectangle entirely contains the Rectangle at the specified location (X,Y) with the specified dimensions (W,H).
java.awt.Rectangle#inside(int, int)->boolean:::Checks whether or not this Rectangle contains the point at the specified location (X,Y).
java.awt.Rectangle#intersects(Rectangle)->boolean:::Determines whether or not this Rectangle and the specified Rectangle intersect
java.awt.Rectangle#intersection(Rectangle)->Rectangle:::Computes the intersection of this Rectangle with the specified Rectangle
java.awt.Rectangle#union(Rectangle)->Rectangle:::Computes the union of this Rectangle with the specified Rectangle
java.awt.Rectangle#add(int, int)->void:::Adds a point, specified by the integer arguments newx,newy to the bounds of this Rectangle
java.awt.Rectangle#add(Point)->void:::Adds the specified Point to the bounds of this Rectangle
java.awt.Rectangle#add(Rectangle)->void:::Adds a Rectangle to this Rectangle
java.awt.Rectangle#grow(int, int)->void:::Resizes the Rectangle both horizontally and vertically
java.awt.Rectangle#isEmpty()->boolean::: rectangle is empty
java.awt.Rectangle#outcode(double, double)->int::: rectangle outcode
java.awt.Rectangle#createIntersection(Rectangle2D)->Rectangle2D::: rectangle create intersection
java.awt.Rectangle#createUnion(Rectangle2D)->Rectangle2D::: rectangle create union
java.awt.Rectangle#equals(Object)->boolean:::Checks whether two rectangles are equal
java.awt.Rectangle#toString()->String:::Returns a String representing this Rectangle and its values.
java.awt.RenderingHints.Key#isCompatibleValue(Object)->boolean:::Returns true if the specified object is a valid value for this Key.
java.awt.RenderingHints.Key#intKey()->int:::Returns the private integer key that the subclass instantiated this Key with.
java.awt.RenderingHints.Key#hashCode()->int:::The hash code for all Key objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.
java.awt.RenderingHints.Key#equals(Object)->boolean:::The equals method for all Key objects will return the same result as the equality operator '=='.
java.awt.RenderingHints#size()->int:::Returns the number of key-value mappings in this RenderingHints.
java.awt.RenderingHints#isEmpty()->boolean:::Returns true if this RenderingHints contains no key-value mappings.
java.awt.RenderingHints#containsKey(Object)->boolean:::Returns true if this RenderingHints  contains a mapping for the specified key.
java.awt.RenderingHints#containsValue(Object)->boolean:::Returns true if this RenderingHints maps one or more keys to the specified value
java.awt.RenderingHints#get(Object)->Object:::Returns the value to which the specified key is mapped.
java.awt.RenderingHints#put(Object, Object)->Object:::Maps the specified key to the specified value in this RenderingHints object
java.awt.RenderingHints#add(RenderingHints)->void:::Adds all of the keys and corresponding values from the specified RenderingHints object to this RenderingHints object
java.awt.RenderingHints#clear()->void:::Clears this RenderingHints object of all key/value pairs.
java.awt.RenderingHints#remove(Object)->Object:::Removes the key and its corresponding value from this RenderingHints object
java.awt.RenderingHints#putAll(Map)->void:::Copies all of the mappings from the specified Map to this RenderingHints
java.awt.RenderingHints#keySet()->Set:::Returns a Set view of the Keys contained in this RenderingHints
java.awt.RenderingHints#values()->Collection:::Returns a Collection view of the values contained in this RenderingHints
java.awt.RenderingHints#entrySet()->Set>:::Returns a Set view of the mappings contained in this RenderingHints
java.awt.RenderingHints#equals(Object)->boolean:::Compares the specified Object with this RenderingHints for equality
java.awt.RenderingHints#hashCode()->int:::Returns the hash code value for this RenderingHints
java.awt.RenderingHints#clone()->Object:::Creates a clone of this RenderingHints object that has the same contents as this RenderingHints object.
java.awt.RenderingHints#toString()->String:::Returns a rather long string representation of the hashmap which contains the mappings of keys to values for this RenderingHints object.
java.awt.Robot.RobotDisposer#dispose()->void::: robot disposer dispose
java.awt.Robot#mouseMove(int, int)->void:::Moves mouse pointer to given screen coordinates.
java.awt.Robot#mousePress(int)->void:::Presses one or more mouse buttons
java.awt.Robot#mouseRelease(int)->void:::Releases one or more mouse buttons.
java.awt.Robot#mouseWheel(int)->void:::Rotates the scroll wheel on wheel-equipped mice.
java.awt.Robot#keyPress(int)->void:::Presses a given key
java.awt.Robot#keyRelease(int)->void:::Releases a given key
java.awt.Robot#getPixelColor(int, int)->Color:::Returns the color of a pixel at the given screen coordinates.
java.awt.Robot#createScreenCapture(Rectangle)->BufferedImage:::Creates an image containing pixels read from the screen
java.awt.Robot#createMultiResolutionScreenCapture(Rectangle)->MultiResolutionImage:::Creates an image containing pixels read from the screen
java.awt.Robot#isAutoWaitForIdle()->boolean:::Returns whether this Robot automatically invokes waitForIdle after generating an event.
java.awt.Robot#setAutoWaitForIdle(boolean)->void:::Sets whether this Robot automatically invokes waitForIdle after generating an event.
java.awt.Robot#getAutoDelay()->int:::Returns the number of milliseconds this Robot sleeps after generating an event.
java.awt.Robot#setAutoDelay(int)->void:::Sets the number of milliseconds this Robot sleeps after generating an event.
java.awt.Robot#delay(int)->void:::Sleeps for the specified time
java.awt.Robot#waitForIdle()->void:::Waits until all events currently on the event queue have been processed.
java.awt.Robot#toString()->String:::Returns a string representation of this Robot.
java.awt.Scrollbar#constructComponentName()->String:::Constructs a name for this component
java.awt.Scrollbar#addNotify()->void:::Creates the Scrollbar's peer
java.awt.Scrollbar#getOrientation()->int:::Returns the orientation of this scroll bar.
java.awt.Scrollbar#setOrientation(int)->void:::Sets the orientation for this scroll bar.
java.awt.Scrollbar#getValue()->int:::Gets the current value of this scroll bar.
java.awt.Scrollbar#setValue(int)->void:::Sets the value of this scroll bar to the specified value
java.awt.Scrollbar#getMinimum()->int:::Gets the minimum value of this scroll bar.
java.awt.Scrollbar#setMinimum(int)->void:::Sets the minimum value of this scroll bar
java.awt.Scrollbar#getMaximum()->int:::Gets the maximum value of this scroll bar.
java.awt.Scrollbar#setMaximum(int)->void:::Sets the maximum value of this scroll bar
java.awt.Scrollbar#getVisibleAmount()->int:::Gets the visible amount of this scroll bar
java.awt.Scrollbar#getVisible()->int:::Returns the visible amount of this scroll bar.
java.awt.Scrollbar#setVisibleAmount(int)->void:::Sets the visible amount of this scroll bar
java.awt.Scrollbar#setUnitIncrement(int)->void:::Sets the unit increment for this scroll bar
java.awt.Scrollbar#setLineIncrement(int)->void:::Sets the unit increment for this scroll bar.
java.awt.Scrollbar#getUnitIncrement()->int:::Gets the unit increment for this scrollbar
java.awt.Scrollbar#getLineIncrement()->int:::Returns the unit increment for this scrollbar.
java.awt.Scrollbar#setBlockIncrement(int)->void:::Sets the block increment for this scroll bar
java.awt.Scrollbar#setPageIncrement(int)->void:::Sets the block increment for this scroll bar.
java.awt.Scrollbar#getBlockIncrement()->int:::Gets the block increment of this scroll bar
java.awt.Scrollbar#getPageIncrement()->int:::Returns the block increment of this scroll bar.
java.awt.Scrollbar#setValues(int, int, int, int)->void:::Sets the values of four properties for this scroll bar: value, visibleAmount, minimum, and maximum
java.awt.Scrollbar#getValueIsAdjusting()->boolean:::Returns true if the value is in the process of changing as a result of actions being taken by the user.
java.awt.Scrollbar#setValueIsAdjusting(boolean)->void:::Sets the valueIsAdjusting property.
java.awt.Scrollbar#addAdjustmentListener(AdjustmentListener)->void:::Adds the specified adjustment listener to receive instances of AdjustmentEvent from this scroll bar
java.awt.Scrollbar#removeAdjustmentListener(AdjustmentListener)->void:::Removes the specified adjustment listener so that it no longer receives instances of AdjustmentEvent from this scroll bar
java.awt.Scrollbar#getAdjustmentListeners()->AdjustmentListener[]:::Returns an array of all the adjustment listeners registered on this scrollbar.
java.awt.Scrollbar#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Scrollbar
java.awt.Scrollbar#eventEnabled(AWTEvent)->boolean::: scrollbar event enabled
java.awt.Scrollbar#processEvent(AWTEvent)->void:::Processes events on this scroll bar
java.awt.Scrollbar#processAdjustmentEvent(AdjustmentEvent)->void:::Processes adjustment events occurring on this scrollbar by dispatching them to any registered AdjustmentListener objects
java.awt.Scrollbar#paramString()->String:::Returns a string representing the state of this Scrollbar
java.awt.Scrollbar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Scrollbar
java.awt.Scrollbar.AccessibleAWTScrollBar#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
java.awt.Scrollbar.AccessibleAWTScrollBar#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Scrollbar.AccessibleAWTScrollBar#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
java.awt.Scrollbar.AccessibleAWTScrollBar#getCurrentAccessibleValue()->Number:::Get the accessible value of this object.
java.awt.Scrollbar.AccessibleAWTScrollBar#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
java.awt.Scrollbar.AccessibleAWTScrollBar#getMinimumAccessibleValue()->Number:::Get the minimum accessible value of this object.
java.awt.Scrollbar.AccessibleAWTScrollBar#getMaximumAccessibleValue()->Number:::Get the maximum accessible value of this object.
java.awt.ScrollPane#constructComponentName()->String:::Construct a name for this component
java.awt.ScrollPane#addImpl(Component, Object, int)->void:::Adds the specified component to this scroll pane container
java.awt.ScrollPane#getScrollbarDisplayPolicy()->int:::Returns the display policy for the scrollbars.
java.awt.ScrollPane#getViewportSize()->Dimension:::Returns the current size of the scroll pane's view port.
java.awt.ScrollPane#getHScrollbarHeight()->int:::Returns the height that would be occupied by a horizontal scrollbar, which is independent of whether it is currently displayed by the scroll pane or not.
java.awt.ScrollPane#getVScrollbarWidth()->int:::Returns the width that would be occupied by a vertical scrollbar, which is independent of whether it is currently displayed by the scroll pane or not.
java.awt.ScrollPane#getVAdjustable()->Adjustable:::Returns the ScrollPaneAdjustable object which represents the state of the vertical scrollbar
java.awt.ScrollPane#getHAdjustable()->Adjustable:::Returns the ScrollPaneAdjustable object which represents the state of the horizontal scrollbar
java.awt.ScrollPane#setScrollPosition(int, int)->void:::Scrolls to the specified position within the child component
java.awt.ScrollPane#setScrollPosition(Point)->void:::Scrolls to the specified position within the child component
java.awt.ScrollPane#getScrollPosition()->Point:::Returns the current x,y position within the child which is displayed at the 0,0 location of the scrolled panel's view port
java.awt.ScrollPane#setLayout(LayoutManager)->void:::Sets the layout manager for this container
java.awt.ScrollPane#doLayout()->void:::Lays out this container by resizing its child to its preferred size
java.awt.ScrollPane#calculateChildSize()->Dimension:::Determine the size to allocate the child component
java.awt.ScrollPane#layout()->void::: scroll pane layout
java.awt.ScrollPane#printComponents(Graphics)->void:::Prints the component in this scroll pane.
java.awt.ScrollPane#addNotify()->void:::Creates the scroll pane's peer.
java.awt.ScrollPane#paramString()->String:::Returns a string representing the state of this ScrollPane
java.awt.ScrollPane#autoProcessMouseWheel(MouseWheelEvent)->void::: scroll pane auto process mouse wheel
java.awt.ScrollPane#processMouseWheelEvent(MouseWheelEvent)->void:::Process mouse wheel events that are delivered to this ScrollPane by scrolling an appropriate amount
java.awt.ScrollPane#eventTypeEnabled(int)->boolean:::If wheel scrolling is enabled, we return true for MouseWheelEvents
java.awt.ScrollPane#setWheelScrollingEnabled(boolean)->void:::Enables/disables scrolling in response to movement of the mouse wheel
java.awt.ScrollPane#isWheelScrollingEnabled()->boolean:::Indicates whether or not scrolling will take place in response to the mouse wheel
java.awt.ScrollPane.PeerFixer#adjustmentValueChanged(AdjustmentEvent)->void:::Invoked when the value of the adjustable has changed.
java.awt.ScrollPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this ScrollPane
java.awt.ScrollPane.AccessibleAWTScrollPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.PeerFixer#adjustmentValueChanged(AdjustmentEvent)->void:::Invoked when the value of the adjustable has changed.
java.awt.ScrollPaneAdjustable#setSpan(int, int, int)->void:::This is called by the scrollpane itself to update the minimum, maximum and visible values
java.awt.ScrollPaneAdjustable#getOrientation()->int:::Returns the orientation of this scrollbar.
java.awt.ScrollPaneAdjustable#setMinimum(int)->void:::This method should NOT be called by user code
java.awt.ScrollPaneAdjustable#getMinimum()->int::: scroll pane adjustable get minimum
java.awt.ScrollPaneAdjustable#setMaximum(int)->void:::This method should NOT be called by user code
java.awt.ScrollPaneAdjustable#getMaximum()->int::: scroll pane adjustable get maximum
java.awt.ScrollPaneAdjustable#setUnitIncrement(int)->void::: scroll pane adjustable set unit increment
java.awt.ScrollPaneAdjustable#getUnitIncrement()->int::: scroll pane adjustable get unit increment
java.awt.ScrollPaneAdjustable#setBlockIncrement(int)->void::: scroll pane adjustable set block increment
java.awt.ScrollPaneAdjustable#getBlockIncrement()->int::: scroll pane adjustable get block increment
java.awt.ScrollPaneAdjustable#setVisibleAmount(int)->void:::This method should NOT be called by user code
java.awt.ScrollPaneAdjustable#getVisibleAmount()->int::: scroll pane adjustable get visible amount
java.awt.ScrollPaneAdjustable#setValueIsAdjusting(boolean)->void:::Sets the valueIsAdjusting property.
java.awt.ScrollPaneAdjustable#getValueIsAdjusting()->boolean:::Returns true if the value is in the process of changing as a result of actions being taken by the user.
java.awt.ScrollPaneAdjustable#setValue(int)->void:::Sets the value of this scrollbar to the specified value
java.awt.ScrollPaneAdjustable#getValue()->int::: scroll pane adjustable get value
java.awt.ScrollPaneAdjustable#addAdjustmentListener(AdjustmentListener)->void:::Adds the specified adjustment listener to receive adjustment events from this ScrollPaneAdjustable
java.awt.ScrollPaneAdjustable#removeAdjustmentListener(AdjustmentListener)->void:::Removes the specified adjustment listener so that it no longer receives adjustment events from this ScrollPaneAdjustable
java.awt.ScrollPaneAdjustable#getAdjustmentListeners()->AdjustmentListener[]:::Returns an array of all the adjustment listeners registered on this ScrollPaneAdjustable.
java.awt.ScrollPaneAdjustable#toString()->String:::Returns a string representation of this scrollbar and its values.
java.awt.ScrollPaneAdjustable#paramString()->String:::Returns a string representing the state of this scrollbar
java.awt.SecondaryLoop#enter()->boolean:::Blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread
java.awt.SecondaryLoop#exit()->boolean:::Unblocks the execution of the thread blocked by the #enter method and exits the secondary loop
java.awt.SentEvent#dispatch()->void::: sent event dispatch
java.awt.SentEvent#dispose()->void::: sent event dispose
java.awt.SequencedEvent#dispatch()->void:::Dispatches the nested event after all previous nested events have been dispatched or disposed
java.awt.SequencedEvent#isFirstOrDisposed()->boolean:::Sequenced events are dispatched in order, so we cannot dispatch until we are the first sequenced event in the queue (i.e
java.awt.SequencedEvent#dispose()->void:::Disposes of this instance
java.awt.Shape#getBounds()->Rectangle:::Returns an integer Rectangle that completely encloses the Shape
java.awt.Shape#getBounds2D()->Rectangle2D:::Returns a high precision and more accurate bounding box of the Shape than the getBounds method
java.awt.Shape#contains(double, double)->boolean:::Tests if the specified coordinates are inside the boundary of the Shape, as described by the  definition of insideness.
java.awt.Shape#contains(Point2D)->boolean:::Tests if a specified Point2D is inside the boundary of the Shape, as described by the  definition of insideness.
java.awt.Shape#intersects(double, double, double, double)->boolean:::Tests if the interior of the Shape intersects the interior of a specified rectangular area
java.awt.Shape#intersects(Rectangle2D)->boolean:::Tests if the interior of the Shape intersects the interior of a specified Rectangle2D
java.awt.Shape#contains(double, double, double, double)->boolean:::Tests if the interior of the Shape entirely contains the specified rectangular area
java.awt.Shape#contains(Rectangle2D)->boolean:::Tests if the interior of the Shape entirely contains the specified Rectangle2D
java.awt.Shape#getPathIterator(AffineTransform)->PathIterator:::Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline
java.awt.Shape#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry
java.awt.SplashScreen#getSplashScreen()->SplashScreen:::Returns the SplashScreen object used for Java startup splash screen control on systems that support display.
java.awt.SplashScreen#setImageURL(URL)->void:::Changes the splash screen image
java.awt.SplashScreen#getImageURL()->URL:::Returns the current splash screen image.
java.awt.SplashScreen#getBounds()->Rectangle:::Returns the bounds of the splash screen window as a Rectangle
java.awt.SplashScreen#getSize()->Dimension:::Returns the size of the splash screen window as a Dimension
java.awt.SplashScreen#createGraphics()->Graphics2D:::Creates a graphics context (as a Graphics2D object) for the splash screen overlay image, which allows you to draw over the splash screen
java.awt.SplashScreen#update()->void:::Updates the splash window with current contents of the overlay image.
java.awt.SplashScreen#close()->void:::Hides the splash screen, closes the window, and releases all associated resources.
java.awt.SplashScreen#markClosed()->void::: splash screen mark closed
java.awt.SplashScreen#isVisible()->boolean:::Determines whether the splash screen is visible
java.awt.Stroke#createStrokedShape(Shape)->Shape:::Returns an outline Shape which encloses the area that should be painted when the Shape is stroked according to the rules defined by the object implementing the Stroke interface.
java.awt.SystemColor#toString()->String:::Returns a string representation of this Color's values
java.awt.SystemTray#getSystemTray()->SystemTray:::Gets the SystemTray instance that represents the desktop's tray area
java.awt.SystemTray#isSupported()->boolean:::Returns whether the system tray is supported on the current platform
java.awt.SystemTray#add(TrayIcon)->void:::Adds a TrayIcon to the SystemTray
java.awt.SystemTray#remove(TrayIcon)->void:::Removes the specified TrayIcon from the SystemTray
java.awt.SystemTray#getTrayIcons()->TrayIcon[]:::Returns an array of all icons added to the tray by this application
java.awt.SystemTray#getTrayIconSize()->Dimension:::Returns the size, in pixels, of the space that a tray icon will occupy in the system tray
java.awt.SystemTray#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the list of listeners for the specific property
java.awt.SystemTray#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list for a specific property
java.awt.SystemTray#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all the listeners that have been associated with the named property
java.awt.SystemTray#addNotify()->void::: system tray add notify
java.awt.SystemTray#checkSystemTrayAllowed()->void::: system tray check system tray allowed
java.awt.Taskbar#isSupported(Feature)->boolean:::Tests whether a Feature is supported on the current platform.
java.awt.Taskbar#getTaskbar()->Taskbar:::Returns the Taskbar instance of the current taskbar context
java.awt.Taskbar#isTaskbarSupported()->boolean:::Tests whether this class is supported on the current platform
java.awt.Taskbar#requestUserAttention(boolean, boolean)->void:::Requests user attention to this application
java.awt.Taskbar#requestWindowUserAttention(Window)->void:::Requests user attention to the specified window
java.awt.Taskbar#setMenu(PopupMenu)->void:::Attaches the contents of the provided PopupMenu to the application icon in the task area.
java.awt.Taskbar#getMenu()->PopupMenu:::Gets PopupMenu used to add items to this application's icon in system task area.
java.awt.Taskbar#setIconImage(Image)->void:::Changes this application's icon to the provided image.
java.awt.Taskbar#getIconImage()->Image:::Obtains an image of this application's icon.
java.awt.Taskbar#setIconBadge(String)->void:::Affixes a small system-provided badge to this application's icon
java.awt.Taskbar#setWindowIconBadge(Window, Image)->void:::Affixes a small badge to this application's icon in the task area for the specified window
java.awt.Taskbar#setProgressValue(int)->void:::Affixes a small system-provided progress bar to this application's icon.
java.awt.Taskbar#setWindowProgressValue(Window, int)->void:::Displays a determinate progress bar in the task area for the specified window
java.awt.Taskbar#setWindowProgressState(Window, State)->void:::Sets a progress state for a specified window
java.awt.TextArea#constructComponentName()->String:::Construct a name for this component
java.awt.TextArea#addNotify()->void:::Creates the TextArea's peer
java.awt.TextArea#insert(String, int)->void:::Inserts the specified text at the specified position in this text area
java.awt.TextArea#insertText(String, int)->void:::Inserts the specified text at the specified position in this text area.
java.awt.TextArea#append(String)->void:::Appends the given text to the text area's current text
java.awt.TextArea#appendText(String)->void:::Appends the given text to the text area's current text.
java.awt.TextArea#replaceRange(String, int, int)->void:::Replaces text between the indicated start and end positions with the specified replacement text
java.awt.TextArea#replaceText(String, int, int)->void:::Replaces a range of characters between the indicated start and end positions with the specified replacement text (the text at the end position will not be replaced).
java.awt.TextArea#getRows()->int:::Returns the number of rows in the text area.
java.awt.TextArea#setRows(int)->void:::Sets the number of rows for this text area.
java.awt.TextArea#getColumns()->int:::Returns the number of columns in this text area.
java.awt.TextArea#setColumns(int)->void:::Sets the number of columns for this text area.
java.awt.TextArea#getScrollbarVisibility()->int:::Returns an enumerated value that indicates which scroll bars the text area uses
java.awt.TextArea#getPreferredSize(int, int)->Dimension:::Determines the preferred size of a text area with the specified number of rows and columns.
java.awt.TextArea#preferredSize(int, int)->Dimension:::Determines the preferred size of the text area with the specified number of rows and columns.
java.awt.TextArea#getPreferredSize()->Dimension:::Determines the preferred size of this text area.
java.awt.TextArea#preferredSize()->Dimension::: text area preferred size
java.awt.TextArea#getMinimumSize(int, int)->Dimension:::Determines the minimum size of a text area with the specified number of rows and columns.
java.awt.TextArea#minimumSize(int, int)->Dimension:::Determines the minimum size of the text area with the specified number of rows and columns.
java.awt.TextArea#getMinimumSize()->Dimension:::Determines the minimum size of this text area.
java.awt.TextArea#minimumSize()->Dimension::: text area minimum size
java.awt.TextArea#paramString()->String:::Returns a string representing the state of this TextArea
java.awt.TextArea#getAccessibleContext()->AccessibleContext:::Returns the AccessibleContext associated with this TextArea
java.awt.TextArea.AccessibleAWTTextArea#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
java.awt.TextComponent#enableInputMethods(boolean)->void:::Enables or disables input method support for this text component
java.awt.TextComponent#areInputMethodsEnabled()->boolean::: text component are input methods enabled
java.awt.TextComponent#getInputMethodRequests()->InputMethodRequests::: text component get input method requests
java.awt.TextComponent#addNotify()->void:::Makes this Component displayable by connecting it to a native screen resource
java.awt.TextComponent#removeNotify()->void:::Removes the TextComponent's peer
java.awt.TextComponent#setText(String)->void:::Sets the text that is presented by this text component to be the specified text.
java.awt.TextComponent#getText()->String:::Returns the text that is presented by this text component
java.awt.TextComponent#getSelectedText()->String:::Returns the selected text from the text that is presented by this text component.
java.awt.TextComponent#isEditable()->boolean:::Indicates whether or not this text component is editable.
java.awt.TextComponent#setEditable(boolean)->void:::Sets the flag that determines whether or not this text component is editable
java.awt.TextComponent#getBackground()->Color:::Gets the background color of this text component
java.awt.TextComponent#setBackground(Color)->void:::Sets the background color of this text component.
java.awt.TextComponent#getSelectionStart()->int:::Gets the start position of the selected text in this text component.
java.awt.TextComponent#setSelectionStart(int)->void:::Sets the selection start for this text component to the specified position
java.awt.TextComponent#getSelectionEnd()->int:::Gets the end position of the selected text in this text component.
java.awt.TextComponent#setSelectionEnd(int)->void:::Sets the selection end for this text component to the specified position
java.awt.TextComponent#select(int, int)->void:::Selects the text between the specified start and end positions
java.awt.TextComponent#selectAll()->void:::Selects all the text in this text component.
java.awt.TextComponent#setCaretPosition(int)->void:::Sets the position of the text insertion caret
java.awt.TextComponent#getCaretPosition()->int:::Returns the position of the text insertion caret
java.awt.TextComponent#addTextListener(TextListener)->void:::Adds the specified text event listener to receive text events from this text component
java.awt.TextComponent#removeTextListener(TextListener)->void:::Removes the specified text event listener so that it no longer receives text events from this text component If l is null, no exception is thrown and no action is performed
java.awt.TextComponent#getTextListeners()->TextListener[]:::Returns an array of all the text listeners registered on this text component.
java.awt.TextComponent#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this TextComponent
java.awt.TextComponent#eventEnabled(AWTEvent)->boolean::: text component event enabled
java.awt.TextComponent#processEvent(AWTEvent)->void:::Processes events on this text component
java.awt.TextComponent#processTextEvent(TextEvent)->void:::Processes text events occurring on this text component by dispatching them to any registered TextListener objects
java.awt.TextComponent#paramString()->String:::Returns a string representing the state of this TextComponent
java.awt.TextComponent#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this TextComponent
java.awt.TextComponent.AccessibleAWTTextComponent#textValueChanged(TextEvent)->void:::TextListener notification of a text value change.
java.awt.TextComponent.AccessibleAWTTextComponent#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of the TextComponent
java.awt.TextComponent.AccessibleAWTTextComponent#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
java.awt.TextComponent.AccessibleAWTTextComponent#getAccessibleText()->AccessibleText:::Get the AccessibleText associated with this object
java.awt.TextComponent.AccessibleAWTTextComponent#getIndexAtPoint(Point)->int:::Given a point in local coordinates, return the zero-based index of the character under that Point
java.awt.TextComponent.AccessibleAWTTextComponent#getCharacterBounds(int)->Rectangle:::Determines the bounding box of the character at the given index into the string
java.awt.TextComponent.AccessibleAWTTextComponent#getCharCount()->int:::Returns the number of characters (valid indices)
java.awt.TextComponent.AccessibleAWTTextComponent#getCaretPosition()->int:::Returns the zero-based offset of the caret
java.awt.TextComponent.AccessibleAWTTextComponent#getCharacterAttribute(int)->AttributeSet:::Returns the AttributeSet for a given character (at a given index).
java.awt.TextComponent.AccessibleAWTTextComponent#getSelectionStart()->int:::Returns the start offset within the selected text
java.awt.TextComponent.AccessibleAWTTextComponent#getSelectionEnd()->int:::Returns the end offset within the selected text
java.awt.TextComponent.AccessibleAWTTextComponent#getSelectedText()->String:::Returns the portion of the text that is selected.
java.awt.TextComponent.AccessibleAWTTextComponent#getAtIndex(int, int)->String:::Returns the String at a given index.
java.awt.TextComponent.AccessibleAWTTextComponent#getAfterIndex(int, int)->String:::Returns the String after a given index.
java.awt.TextComponent.AccessibleAWTTextComponent#getBeforeIndex(int, int)->String:::Returns the String before a given index.
java.awt.TextField#constructComponentName()->String:::Construct a name for this component
java.awt.TextField#addNotify()->void:::Creates the TextField's peer
java.awt.TextField#getEchoChar()->char:::Gets the character that is to be used for echoing
java.awt.TextField#setEchoChar(char)->void:::Sets the echo character for this text field
java.awt.TextField#setEchoCharacter(char)->void:::Sets the character to be echoed when protected input is displayed.
java.awt.TextField#setText(String)->void:::Sets the text that is presented by this text component to be the specified text.
java.awt.TextField#echoCharIsSet()->boolean:::Indicates whether or not this text field has a character set for echoing
java.awt.TextField#getColumns()->int:::Gets the number of columns in this text field
java.awt.TextField#setColumns(int)->void:::Sets the number of columns in this text field
java.awt.TextField#getPreferredSize(int)->Dimension:::Gets the preferred size of this text field with the specified number of columns.
java.awt.TextField#preferredSize(int)->Dimension:::Returns the preferred size for this text field with the specified number of columns.
java.awt.TextField#getPreferredSize()->Dimension:::Gets the preferred size of this text field.
java.awt.TextField#preferredSize()->Dimension::: text field preferred size
java.awt.TextField#getMinimumSize(int)->Dimension:::Gets the minimum dimensions for a text field with the specified number of columns.
java.awt.TextField#minimumSize(int)->Dimension:::Returns the minimum dimensions for a text field with the specified number of columns.
java.awt.TextField#getMinimumSize()->Dimension:::Gets the minimum dimensions for this text field.
java.awt.TextField#minimumSize()->Dimension::: text field minimum size
java.awt.TextField#addActionListener(ActionListener)->void:::Adds the specified action listener to receive action events from this text field
java.awt.TextField#removeActionListener(ActionListener)->void:::Removes the specified action listener so that it no longer receives action events from this text field
java.awt.TextField#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this textfield.
java.awt.TextField#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this TextField
java.awt.TextField#eventEnabled(AWTEvent)->boolean::: text field event enabled
java.awt.TextField#processEvent(AWTEvent)->void:::Processes events on this text field
java.awt.TextField#processActionEvent(ActionEvent)->void:::Processes action events occurring on this text field by dispatching them to any registered ActionListener objects
java.awt.TextField#paramString()->String:::Returns a string representing the state of this TextField
java.awt.TextField#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this TextField
java.awt.TextField.AccessibleAWTTextField#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
java.awt.TexturePaint#getImage()->BufferedImage:::Returns the BufferedImage texture used to fill the shapes.
java.awt.TexturePaint#getAnchorRect()->Rectangle2D:::Returns a copy of the anchor rectangle which positions and sizes the textured image.
java.awt.TexturePaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)->PaintContext:::Creates and returns a PaintContext used to generate a tiled image pattern
java.awt.TexturePaint#getTransparency()->int:::Returns the transparency mode for this TexturePaint.
java.awt.TexturePaintContext#getContext(BufferedImage, AffineTransform, RenderingHints, Rectangle)->PaintContext::: texture paint context get context
java.awt.TexturePaintContext#isFilterableICM(ColorModel)->boolean::: texture paint context is filterable m
java.awt.TexturePaintContext#isFilterableDCM(ColorModel)->boolean::: texture paint context is filterable m
java.awt.TexturePaintContext#isMaskOK(int, boolean)->boolean::: texture paint context is mask k
java.awt.TexturePaintContext#getInternedColorModel(ColorModel)->ColorModel::: texture paint context get interned color model
java.awt.TexturePaintContext#fractAsInt(double)->int::: texture paint context fract as int
java.awt.TexturePaintContext#mod(double, double)->double::: texture paint context mod
java.awt.TexturePaintContext#dispose()->void:::Release the resources allocated for the operation.
java.awt.TexturePaintContext#getColorModel()->ColorModel:::Return the ColorModel of the output.
java.awt.TexturePaintContext#getRaster(int, int, int, int)->Raster:::Return a Raster containing the colors generated for the graphics operation.
java.awt.TexturePaintContext#makeRaster(ColorModel, Raster, int, int)->WritableRaster::: texture paint context make raster
java.awt.TexturePaintContext#dropRaster(ColorModel, Raster)->void::: texture paint context drop raster
java.awt.TexturePaintContext#makeByteRaster(Raster, int, int)->WritableRaster::: texture paint context make byte raster
java.awt.TexturePaintContext#dropByteRaster(Raster)->void::: texture paint context drop byte raster
java.awt.TexturePaintContext#makeRaster(int, int)->WritableRaster::: texture paint context make raster
java.awt.TexturePaintContext#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)->void::: texture paint context set raster
java.awt.TexturePaintContext#blend(int[], int, int)->int::: texture paint context blend
java.awt.TexturePaintContext.Int#makeRaster(int, int)->WritableRaster::: int make raster
java.awt.TexturePaintContext.Int#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)->void::: int set raster
java.awt.TexturePaintContext.Byte#makeRaster(int, int)->WritableRaster::: byte make raster
java.awt.TexturePaintContext.Byte#dispose()->void::: byte dispose
java.awt.TexturePaintContext.Byte#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)->void::: byte set raster
java.awt.TexturePaintContext.ByteFilter#makeRaster(int, int)->WritableRaster::: byte filter make raster
java.awt.TexturePaintContext.ByteFilter#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)->void::: byte filter set raster
java.awt.TexturePaintContext.Any#makeRaster(int, int)->WritableRaster::: any make raster
java.awt.TexturePaintContext.Any#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)->void::: any set raster
java.awt.Toolkit#loadSystemColors(int[])->void:::Fills in the integer array that is supplied as an argument with the current system color values.
java.awt.Toolkit#setDynamicLayout(boolean)->void:::Controls whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete
java.awt.Toolkit#isDynamicLayoutSet()->boolean:::Returns whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete
java.awt.Toolkit#isDynamicLayoutActive()->boolean:::Returns whether dynamic layout of Containers on resize is currently enabled on the underlying operating system and/or window manager
java.awt.Toolkit#getScreenSize()->Dimension:::Gets the size of the screen
java.awt.Toolkit#getScreenResolution()->int:::Returns the screen resolution in dots-per-inch.
java.awt.Toolkit#getScreenInsets(GraphicsConfiguration)->Insets:::Gets the insets of the screen.
java.awt.Toolkit#getColorModel()->ColorModel:::Determines the color model of this toolkit's screen
java.awt.Toolkit#getFontList()->String[]:::Returns the names of the available fonts in this toolkit. For 1.1, the following font names are deprecated (the replacement name follows): <ul> <li>TimesRoman (use Serif) <li>Helvetica (use SansSerif) <li>Courier (use Monospaced) </ul> The ZapfDingbats fontname is also deprecated in 1.1 but the characters are defined in Unicode starting at 0x2700, and as of 1.1 Java supports those characters.
java.awt.Toolkit#getFontMetrics(Font)->FontMetrics:::Gets the screen device metrics for rendering of the font.
java.awt.Toolkit#sync()->void:::Synchronizes this toolkit's graphics state
java.awt.Toolkit#getDefaultToolkit()->Toolkit:::Gets the default toolkit
java.awt.Toolkit#getImage(String)->Image:::Returns an image which gets pixel data from the specified file, whose format can be either GIF, JPEG or PNG
java.awt.Toolkit#getImage(URL)->Image:::Returns an image which gets pixel data from the specified URL
java.awt.Toolkit#createImage(String)->Image:::Returns an image which gets pixel data from the specified file
java.awt.Toolkit#createImage(URL)->Image:::Returns an image which gets pixel data from the specified URL
java.awt.Toolkit#prepareImage(Image, int, int, ImageObserver)->boolean:::Prepares an image for rendering
java.awt.Toolkit#checkImage(Image, int, int, ImageObserver)->int:::Indicates the construction status of a specified image that is being prepared for display
java.awt.Toolkit#createImage(ImageProducer)->Image:::Creates an image with the specified image producer.
java.awt.Toolkit#createImage(byte[])->Image:::Creates an image which decodes the image stored in the specified byte array
java.awt.Toolkit#createImage(byte[], int, int)->Image:::Creates an image which decodes the image stored in the specified byte array, and at the specified offset and length
java.awt.Toolkit#getPrintJob(Frame, String, Properties)->PrintJob:::Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform
java.awt.Toolkit#getPrintJob(Frame, String, JobAttributes, PageAttributes)->PrintJob:::Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform
java.awt.Toolkit#beep()->void:::Emits an audio beep depending on native system settings and hardware capabilities.
java.awt.Toolkit#getSystemClipboard()->Clipboard:::Gets the singleton instance of the system Clipboard which interfaces with clipboard facilities provided by the native platform
java.awt.Toolkit#getSystemSelection()->Clipboard:::Gets the singleton instance of the system selection as a Clipboard object
java.awt.Toolkit#getMenuShortcutKeyMask()->int:::Determines which modifier key is the appropriate accelerator key for menu shortcuts
java.awt.Toolkit#getMenuShortcutKeyMaskEx()->int:::Determines which extended modifier key is the appropriate accelerator key for menu shortcuts
java.awt.Toolkit#getLockingKeyState(int)->boolean:::Returns whether the given locking key on the keyboard is currently in its "on" state
java.awt.Toolkit#setLockingKeyState(int, boolean)->void:::Sets the state of the given locking key on the keyboard
java.awt.Toolkit#getNativeContainer(Component)->Container:::Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).
java.awt.Toolkit#createCustomCursor(Image, Point, String)->Cursor:::Creates a new custom cursor object
java.awt.Toolkit#getBestCursorSize(int, int)->Dimension:::Returns the supported cursor dimension which is closest to the desired sizes
java.awt.Toolkit#getMaximumCursorColors()->int:::Returns the maximum number of colors the Toolkit supports in a custom cursor palette. Note: if an image is used which has more colors in its palette than the supported maximum, the Toolkit implementation will attempt to flatten the palette to the maximum
java.awt.Toolkit#isFrameStateSupported(int)->boolean:::Returns whether Toolkit supports this state for Frames
java.awt.Toolkit#loadLibraries()->void::: toolkit load libraries
java.awt.Toolkit#getProperty(String, String)->String:::Gets a property with the specified key and default
java.awt.Toolkit#getSystemEventQueue()->EventQueue:::Get the application's or applet's EventQueue instance
java.awt.Toolkit#getSystemEventQueueImpl()->EventQueue:::Gets the application's or applet's EventQueue instance, without checking access
java.awt.Toolkit#getEventQueue()->EventQueue::: toolkit get event queue
java.awt.Toolkit#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T:::Creates a concrete, platform dependent, subclass of the abstract DragGestureRecognizer class requested, and associates it with the DragSource, Component and DragGestureListener specified
java.awt.Toolkit#getDesktopProperty(String)->Object:::Obtains a value for the specified desktop property
java.awt.Toolkit#setDesktopProperty(String, Object)->void:::Sets the named desktop property to the specified value and fires a property change event to notify any listeners that the value has changed.
java.awt.Toolkit#lazilyLoadDesktopProperty(String)->Object:::An opportunity to lazily evaluate desktop property values.
java.awt.Toolkit#initializeDesktopProperties()->void:::initializeDesktopProperties
java.awt.Toolkit#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds the specified property change listener for the named desktop property
java.awt.Toolkit#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes the specified property change listener for the named desktop property
java.awt.Toolkit#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this toolkit
java.awt.Toolkit#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all property change listeners associated with the specified name of a desktop property.
java.awt.Toolkit#isAlwaysOnTopSupported()->boolean:::Returns whether the always-on-top mode is supported by this toolkit
java.awt.Toolkit#isModalityTypeSupported(Dialog.ModalityType)->boolean:::Returns whether the given modality type is supported by this toolkit
java.awt.Toolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType)->boolean:::Returns whether the given modal exclusion type is supported by this toolkit
java.awt.Toolkit#addAWTEventListener(AWTEventListener, long)->void:::Adds an AWTEventListener to receive all AWTEvents dispatched system-wide that conform to the given eventMask
java.awt.Toolkit#removeAWTEventListener(AWTEventListener)->void:::Removes an AWTEventListener from receiving dispatched AWTEvents
java.awt.Toolkit#enabledOnToolkit(long)->boolean::: toolkit enabled on toolkit
java.awt.Toolkit#countAWTEventListeners(long)->int::: toolkit count event listeners
java.awt.Toolkit#getAWTEventListeners()->AWTEventListener[]:::Returns an array of all the AWTEventListeners registered on this toolkit
java.awt.Toolkit#getAWTEventListeners(long)->AWTEventListener[]:::Returns an array of all the AWTEventListeners registered on this toolkit which listen to all of the event types specified in the eventMask argument
java.awt.Toolkit#notifyAWTEventListeners(AWTEvent)->void::: toolkit notify event listeners
java.awt.Toolkit#mapInputMethodHighlight(InputMethodHighlight)->Map:::Returns a map of visual attributes for the abstract level description of the given input method highlight, or null if no mapping is found
java.awt.Toolkit#areExtraMouseButtonsEnabled()->boolean:::Reports whether events from extra mouse buttons are allowed to be processed and posted into EventQueue
java.awt.Transparency#getTransparency()->int:::Returns the type of this Transparency.
java.awt.TrayIcon#getAccessControlContext()->AccessControlContext::: tray icon get access control context
java.awt.TrayIcon#setImage(Image)->void:::Sets the image for this TrayIcon
java.awt.TrayIcon#getImage()->Image:::Returns the current image used for this TrayIcon.
java.awt.TrayIcon#setPopupMenu(PopupMenu)->void:::Sets the popup menu for this TrayIcon
java.awt.TrayIcon#getPopupMenu()->PopupMenu:::Returns the popup menu associated with this TrayIcon.
java.awt.TrayIcon#setToolTip(String)->void:::Sets the tooltip string for this TrayIcon
java.awt.TrayIcon#getToolTip()->String:::Returns the tooltip string associated with this TrayIcon.
java.awt.TrayIcon#setImageAutoSize(boolean)->void:::Sets the auto-size property
java.awt.TrayIcon#isImageAutoSize()->boolean:::Returns the value of the auto-size property.
java.awt.TrayIcon#addMouseListener(MouseListener)->void:::Adds the specified mouse listener to receive mouse events from this TrayIcon
java.awt.TrayIcon#removeMouseListener(MouseListener)->void:::Removes the specified mouse listener
java.awt.TrayIcon#getMouseListeners()->MouseListener[]:::Returns an array of all the mouse listeners registered on this TrayIcon.
java.awt.TrayIcon#addMouseMotionListener(MouseMotionListener)->void:::Adds the specified mouse listener to receive mouse-motion events from this TrayIcon
java.awt.TrayIcon#removeMouseMotionListener(MouseMotionListener)->void:::Removes the specified mouse-motion listener
java.awt.TrayIcon#getMouseMotionListeners()->MouseMotionListener[]:::Returns an array of all the mouse-motion listeners registered on this TrayIcon.
java.awt.TrayIcon#getActionCommand()->String:::Returns the command name of the action event fired by this tray icon.
java.awt.TrayIcon#setActionCommand(String)->void:::Sets the command name for the action event fired by this tray icon
java.awt.TrayIcon#addActionListener(ActionListener)->void:::Adds the specified action listener to receive ActionEvents from this TrayIcon
java.awt.TrayIcon#removeActionListener(ActionListener)->void:::Removes the specified action listener
java.awt.TrayIcon#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this TrayIcon.
java.awt.TrayIcon#displayMessage(String, String, MessageType)->void:::Displays a popup message near the tray icon
java.awt.TrayIcon#getSize()->Dimension:::Returns the size, in pixels, of the space that the tray icon occupies in the system tray
java.awt.TrayIcon#addNotify()->void::: tray icon add notify
java.awt.TrayIcon#removeNotify()->void::: tray icon remove notify
java.awt.TrayIcon#setID(int)->void::: tray icon set d
java.awt.TrayIcon#getID()->int::: tray icon get d
java.awt.TrayIcon#dispatchEvent(AWTEvent)->void::: tray icon dispatch event
java.awt.TrayIcon#processEvent(AWTEvent)->void::: tray icon process event
java.awt.TrayIcon#processMouseEvent(MouseEvent)->void::: tray icon process mouse event
java.awt.TrayIcon#processMouseMotionEvent(MouseEvent)->void::: tray icon process mouse motion event
java.awt.TrayIcon#processActionEvent(ActionEvent)->void::: tray icon process action event
java.awt.WaitDispatchSupport#enter()->boolean::: wait dispatch support enter
java.awt.WaitDispatchSupport#exit()->boolean::: wait dispatch support exit
java.awt.Window.WindowDisposerRecord#updateOwner()->void::: window disposer record update owner
java.awt.Window.WindowDisposerRecord#dispose()->void::: window disposer record dispose
java.awt.Window#constructComponentName()->String:::Construct a name for this component
java.awt.Window#getIconImages()->java.util.List:::Returns the sequence of images to be displayed as the icon for this window
java.awt.Window#setIconImages(java.util.List)->void:::Sets the sequence of images to be displayed as the icon for this window
java.awt.Window#setIconImage(Image)->void:::Sets the image to be displayed as the icon for this window
java.awt.Window#addNotify()->void:::Makes this Window displayable by creating the connection to its native screen resource
java.awt.Window#removeNotify()->void::: window remove notify
java.awt.Window#pack()->void:::Causes this Window to be sized to fit the preferred size and layouts of its subcomponents
java.awt.Window#setMinimumSize(Dimension)->void:::Sets the minimum size of this window to a constant value
java.awt.Window#setSize(Dimension)->void:::The {@code d.width and d.height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize
java.awt.Window#setSize(int, int)->void:::The {@code width and height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize
java.awt.Window#setLocation(int, int)->void:::  The method changes the geometry-related data
java.awt.Window#setLocation(Point)->void:::  The method changes the geometry-related data
java.awt.Window#reshape(int, int, int, int)->void::: window reshape
java.awt.Window#setClientSize(int, int)->void::: window set client size
java.awt.Window#closeSplashScreen()->void::: window close splash screen
java.awt.Window#setVisible(boolean)->void:::Shows or hides this Window depending on the value of parameter b
java.awt.Window#show()->void:::Makes the Window visible
java.awt.Window#updateChildFocusableWindowState(Window)->void::: window update child focusable window state
java.awt.Window#postWindowEvent(int)->void::: window post window event
java.awt.Window#hide()->void:::Hide this Window, its subcomponents, and all of its owned children
java.awt.Window#clearMostRecentFocusOwnerOnHide()->void::: window clear most recent focus owner on hide
java.awt.Window#dispose()->void:::Releases all of the native screen resources used by this Window, its subcomponents, and all of its owned children
java.awt.Window#disposeImpl()->void::: window dispose impl
java.awt.Window#doDispose()->void::: window do dispose
java.awt.Window#adjustListeningChildrenOnParent(long, int)->void::: window adjust listening children on parent
java.awt.Window#adjustDescendantsOnParent(int)->void::: window adjust descendants on parent
java.awt.Window#toFront()->void:::If this Window is visible, brings this Window to the front and may make it the focused Window
java.awt.Window#toFront_NoClientCode()->void::: window to front_ no client code
java.awt.Window#toBack()->void:::If this Window is visible, sends this Window to the back and may cause it to lose focus or activation if it is the focused or active Window
java.awt.Window#toBack_NoClientCode()->void::: window to back_ no client code
java.awt.Window#getToolkit()->Toolkit:::Returns the toolkit of this frame.
java.awt.Window#getWarningString()->String:::Gets the warning string that is displayed with this window
java.awt.Window#getLocale()->Locale:::Gets the Locale object that is associated with this window, if the locale has been set
java.awt.Window#getInputContext()->InputContext:::Gets the input context for this window
java.awt.Window#setCursor(Cursor)->void:::Set the cursor image to a specified cursor
java.awt.Window#getOwner()->Window:::Returns the owner of this window.
java.awt.Window#getOwner_NoClientCode()->Window::: window get owner_ no client code
java.awt.Window#getOwnedWindows()->Window[]:::Return an array containing all the windows this window currently owns.
java.awt.Window#getOwnedWindows_NoClientCode()->Window[]::: window get owned windows_ no client code
java.awt.Window#isModalBlocked()->boolean::: window is modal blocked
java.awt.Window#setModalBlocked(Dialog, boolean, boolean)->void::: window set modal blocked
java.awt.Window#getModalBlocker()->Dialog::: window get modal blocker
java.awt.Window#getAllWindows()->IdentityArrayList::: window get all windows
java.awt.Window#getAllUnblockedWindows()->IdentityArrayList::: window get all unblocked windows
java.awt.Window#getWindows()->Window[]:::Returns an array of all Windows, both owned and ownerless, created by this application
java.awt.Window#getOwnerlessWindows()->Window[]:::Returns an array of all Windows created by this application that have no owner
java.awt.Window#getDocumentRoot()->Window::: window get document root
java.awt.Window#setModalExclusionType(Dialog.ModalExclusionType)->void:::Specifies the modal exclusion type for this window
java.awt.Window#getModalExclusionType()->Dialog.ModalExclusionType:::Returns the modal exclusion type of this window.
java.awt.Window#isModalExcluded(Dialog.ModalExclusionType)->boolean::: window is modal excluded
java.awt.Window#updateChildrenBlocking()->void::: window update children blocking
java.awt.Window#addWindowListener(WindowListener)->void:::Adds the specified window listener to receive window events from this window
java.awt.Window#addWindowStateListener(WindowStateListener)->void:::Adds the specified window state listener to receive window events from this window
java.awt.Window#addWindowFocusListener(WindowFocusListener)->void:::Adds the specified window focus listener to receive window events from this window
java.awt.Window#removeWindowListener(WindowListener)->void:::Removes the specified window listener so that it no longer receives window events from this window
java.awt.Window#removeWindowStateListener(WindowStateListener)->void:::Removes the specified window state listener so that it no longer receives window events from this window
java.awt.Window#removeWindowFocusListener(WindowFocusListener)->void:::Removes the specified window focus listener so that it no longer receives window events from this window
java.awt.Window#getWindowListeners()->WindowListener[]:::Returns an array of all the window listeners registered on this window.
java.awt.Window#getWindowFocusListeners()->WindowFocusListener[]:::Returns an array of all the window focus listeners registered on this window.
java.awt.Window#getWindowStateListeners()->WindowStateListener[]:::Returns an array of all the window state listeners registered on this window.
java.awt.Window#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Window
java.awt.Window#eventEnabled(AWTEvent)->boolean::: window event enabled
java.awt.Window#processEvent(AWTEvent)->void:::Processes events on this window
java.awt.Window#processWindowEvent(WindowEvent)->void:::Processes window events occurring on this window by dispatching them to any registered WindowListener objects
java.awt.Window#processWindowFocusEvent(WindowEvent)->void:::Processes window focus event occurring on this window by dispatching them to any registered WindowFocusListener objects
java.awt.Window#processWindowStateEvent(WindowEvent)->void:::Processes window state event occurring on this window by dispatching them to any registered WindowStateListener objects
java.awt.Window#preProcessKeyEvent(KeyEvent)->void:::Implements a debugging hook -- checks to see if the user has typed control-shift-F1
java.awt.Window#postProcessKeyEvent(KeyEvent)->void::: window post process key event
java.awt.Window#setAlwaysOnTop(boolean)->void:::Sets whether this window should always be above other windows
java.awt.Window#isAlwaysOnTopSupported()->boolean:::Returns whether the always-on-top mode is supported for this window
java.awt.Window#isAlwaysOnTop()->boolean:::Returns whether this window is an always-on-top window.
java.awt.Window#getFocusOwner()->Component:::Returns the child Component of this Window that has focus if this Window is focused; returns null otherwise.
java.awt.Window#getMostRecentFocusOwner()->Component:::Returns the child Component of this Window that will receive the focus when this Window is focused
java.awt.Window#isActive()->boolean:::Returns whether this Window is active
java.awt.Window#isFocused()->boolean:::Returns whether this Window is focused
java.awt.Window#getFocusTraversalKeys(int)->Set:::Gets a focus traversal key for this Window
java.awt.Window#setFocusCycleRoot(boolean)->void:::Does nothing because Windows must always be roots of a focus traversal cycle
java.awt.Window#isFocusCycleRoot()->boolean:::Always returns true because all Windows must be roots of a focus traversal cycle.
java.awt.Window#getFocusCycleRootAncestor()->Container:::Always returns null because Windows have no ancestors; they represent the top of the Component hierarchy.
java.awt.Window#isFocusableWindow()->boolean:::Returns whether this Window can become the focused Window, that is, whether this Window or any of its subcomponents can become the focus owner
java.awt.Window#getFocusableWindowState()->boolean:::Returns whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow
java.awt.Window#setFocusableWindowState(boolean)->void:::Sets whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow
java.awt.Window#setAutoRequestFocus(boolean)->void:::Sets whether this window should receive focus on subsequently being shown (with a call to #setVisible setVisible(true)), or being moved to the front (with a call to #toFront)
java.awt.Window#isAutoRequestFocus()->boolean:::Returns whether this window should receive focus on subsequently being shown (with a call to #setVisible setVisible(true)), or being moved to the front (with a call to #toFront)
java.awt.Window#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
java.awt.Window#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
java.awt.Window#isValidateRoot()->boolean:::Indicates if this container is a validate root
java.awt.Window#dispatchEventImpl(AWTEvent)->void:::Dispatches an event to this window or one of its sub components.
java.awt.Window#postEvent(Event)->boolean::: window post event
java.awt.Window#isShowing()->boolean:::Checks if this Window is showing on screen.
java.awt.Window#isDisposing()->boolean::: window is disposing
java.awt.Window#applyResourceBundle(ResourceBundle)->void::: window apply resource bundle
java.awt.Window#applyResourceBundle(String)->void::: window apply resource bundle
java.awt.Window#addOwnedWindow(WeakReference)->void::: window add owned window
java.awt.Window#removeOwnedWindow(WeakReference)->void::: window remove owned window
java.awt.Window#connectOwnedWindow(Window)->void::: window connect owned window
java.awt.Window#setType(Type)->void:::Sets the type of the window
java.awt.Window#getType()->Type:::Returns the type of the window.
java.awt.Window#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Window
java.awt.Window.AccessibleAWTWindow#getAccessibleRole()->AccessibleRole:::Get the role of this object.
java.awt.Window.AccessibleAWTWindow#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
java.awt.Window#setGraphicsConfiguration(GraphicsConfiguration)->void::: window set graphics configuration
java.awt.Window#setLocationRelativeTo(Component)->void:::Sets the location of the window relative to the specified component according to the following scenarios
java.awt.Window#deliverMouseWheelToAncestor(MouseWheelEvent)->void:::Overridden from Component
java.awt.Window#dispatchMouseWheelToAncestor(MouseWheelEvent)->boolean:::Overridden from Component
java.awt.Window#createBufferStrategy(int)->void:::Creates a new strategy for multi-buffering on this component
java.awt.Window#createBufferStrategy(int, BufferCapabilities)->void:::Creates a new strategy for multi-buffering on this component with the required buffer capabilities
java.awt.Window#getBufferStrategy()->BufferStrategy:::Returns the BufferStrategy used by this component
java.awt.Window#getTemporaryLostComponent()->Component::: window get temporary lost component
java.awt.Window#setTemporaryLostComponent(Component)->Component::: window set temporary lost component
java.awt.Window#canContainFocusOwner(Component)->boolean:::Checks whether this window can contain focus owner
java.awt.Window#setLocationByPlatform(boolean)->void:::Sets whether this Window should appear at the default location for the native windowing system or at the current location (returned by getLocation) the next time the Window is made visible
java.awt.Window#isLocationByPlatform()->boolean:::Returns true if this Window will appear at the default location for the native windowing system the next time this Window is made visible
java.awt.Window#setBounds(int, int, int, int)->void:::The {@code width or height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize
java.awt.Window#setBounds(Rectangle)->void:::The {@code r.width or r.height values will be automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize
java.awt.Window#isRecursivelyVisible()->boolean:::Determines whether this component will be displayed on the screen.
java.awt.Window#getOpacity()->float:::Returns the opacity of the window.
java.awt.Window#setOpacity(float)->void:::Sets the opacity of the window
java.awt.Window#getShape()->Shape:::Returns the shape of the window
java.awt.Window#setShape(Shape)->void:::Sets the shape of the window
java.awt.Window#getBackground()->Color:::Gets the background color of this window
java.awt.Window#setBackground(Color)->void:::Sets the background color of this window
java.awt.Window#isOpaque()->boolean:::Indicates if the window is currently opaque
java.awt.Window#paint(Graphics)->void::: window paint
java.awt.Window#getContainer()->Container::: window get container
java.awt.Window#applyCompoundShape(Region)->void:::Applies the shape to the component
java.awt.Window#applyCurrentShape()->void::: window apply current shape
java.awt.Window#mixOnReshaping()->void::: window mix on reshaping
java.awt.Window#getLocationOnWindow()->Point::: window get location on window
java.awt.Window#updateZOrder()->void::: window update order

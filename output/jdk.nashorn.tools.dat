PartialParser#getLastExpressionStart(Context, String):::Parse potentially partial code and keep track of the start of last expression.:::
Shell#main(String[]):::Main entry point with the default input, output and error streams.:::try->exitCode->main->if->System->exit->catch->println->System->exit->finally
Shell#main(InputStream, OutputStream, OutputStream, String[]):::Starting point for executing a Shell:::return->new->Shell->run
Shell#run(InputStream, OutputStream, OutputStream, String[]):::Run method logic.:::context->makeContext->if->return->global->context->createGlobal->env->context->getEnv->if->println->files->env->getFiles->if->files->isEmpty->return->readEvalPrint->if->return->compileScripts->if->return->runFXScripts->return->runScripts
Shell#makeContext(InputStream, OutputStream, OutputStream, String[]):::Make a new Nashorn Context to compile and/or run JavaScript files.:::pout->new->PrintStream->perr->new->PrintStream->wout->new->PrintWriter->werr->new->PrintWriter->errors->new->ErrorManager->options->new->Options->if->try->prepArgs->preprocessArgs->options->process->catch->werr->bundle->getString->println->options->displayHelp->return->finally->if->options->getBoolean->foreach->options->getFiles->firstFile->new->File->if->firstFile->isFile->try->fr->new->FileReader->firstChar->fr->read->if->options->set->break->catch->finally->return->Thread->currentThread->getContextClassLoader->new->Context
Shell#preprocessArgs(String[]):::Preprocess the command line arguments passed in by the shell:::if->return->processedArgs->new->ArrayList<>->processedArgs->Arrays->asList->addAll->if->startsWith->System->getProperty->startsWith->processedArgs->processedArgs->remove->tokenizeString->addAll->shebangFilePos->for->i->processedArgs->size->if->processedArgs->add->return->processedArgs->stream->String[]->new->toArray
Shell#tokenizeString(String)::: shell tokenize string:::tokenizer->new->StringReader->new->StreamTokenizer->tokenizer->resetSyntax->tokenizer->wordChars->tokenizer->whitespaceChars->tokenizer->commentChar->tokenizer->quoteChar->tokenizer->quoteChar->tokenList->new->ArrayList<>->toAppend->new->StringBuilder->while->nextToken->s->if->s->endsWith->toAppend->s->s->length->substring->append->append->else->tokenList->toAppend->append->toString->add->toAppend->setLength->if->toAppend->length->tokenList->toAppend->toString->add->return
Shell#nextToken(StreamTokenizer)::: shell next token:::try->return->tokenizer->nextToken->catch->return->finally
Shell#compileScripts(Context, Global, List):::Compiles the given script files in the command line This is called only when using the --compile-only flag:::oldGlobal->Context->getGlobal->globalChanged->env->context->getEnv->try->if->Context->setGlobal->errors->context->getErrorManager->foreach->functionNode->new->File->sourceFor->context->getLogger->new->Parser->parse->if->errors->getNumberOfErrors->return->Compiler->functionNode->getSource->functionNode->isStrict->forNoInstallerCompilation->compile->if->context->getErr->new->ASTWriter->println->if->context->getErr->new->PrintVisitor->println->if->errors->getNumberOfErrors->return->catch->finally->env->getOut->flush->env->getErr->flush->if->Context->setGlobal->return
Shell#runScripts(Context, Global, List):::Runs the given JavaScript files in the command line:::oldGlobal->Context->getGlobal->globalChanged->try->if->Context->setGlobal->errors->context->getErrorManager->foreach->if->equals->res->readEvalPrint->if->return->continue->file->new->File->script->context->sourceFor->compileScript->if->errors->getNumberOfErrors->if->context->getEnv->errors->hasErrors->continue->return->try->apply->catch->errors->e->toString->error->if->context->getEnv->e->context->getErr->printStackTrace->return->finally->catch->finally->context->getOut->flush->context->getErr->flush->if->Context->setGlobal->return
Shell#runFXScripts(Context, Global, List):::Runs launches "fx:bootstrap.js" with the given JavaScript files provided as arguments.:::oldGlobal->Context->getGlobal->globalChanged->try->if->Context->setGlobal->global->addOwnProperty->global->addOwnProperty->context->load->catch->context->getErrorManager->e->toString->error->if->context->getEnv->e->context->getErr->printStackTrace->return->finally->context->getOut->flush->context->getErr->flush->if->Context->setGlobal->return
Shell#apply(ScriptFunction, Object):::Hook to ScriptFunction "apply":::return->ScriptRuntime->apply
Shell#getLastExpressionStart(Context, String):::Parse potentially partial code and keep track of the start of last expression:::exprStart->p->context->getEnv->sourceFor->new->Context.ThrowErrorManager->new->Parser->try->p->parse->catch->finally->return
Shell#readEvalPrint(Context, Global):::read-eval-print loop for Nashorn shell.:::prompt->bundle->getString->in->new->InputStreamReader->new->BufferedReader->err->context->getErr->oldGlobal->Context->getGlobal->globalChanged->env->context->getEnv->try->if->Context->setGlobal->global->addShellBuiltins->while->err->print->err->flush->source->try->in->readLine->catch->err->ioe->toString->println->finally->if->break->if->source->isEmpty->continue->try->res->context->eval->if->err->toString->println->catch->err->println->if->e->printStackTrace->finally->catch->finally->if->Context->setGlobal->return
Shell#toString(Object, Global):::Converts result to a printable string:::if->return->result->toString->if->return->JSType->toPrimitive->toString->if->isArrayWithDefaultToString->sb->new->StringBuilder->iter->ArrayLikeIterator->arrayLikeIterator->while->iter->hasNext->obj->iter->next->if->sb->toString->append->if->iter->hasNext->sb->append->return->sb->toString->return->JSType->toString
Shell#isArrayWithDefaultToString(Object, Global)::: shell is array with default to string:::if->sobj->return->sobj->isArray->sobj->get->global->getArrayPrototype->get->return
ShellFunctions#input(Object, Object, Object):::Nashorn extension: global.input (shell-interactive-mode-only) Read one or more lines of input from the standard input till the given end marker is seen in standard input.:::endMarkerStr->JSType->toString->promptStr->JSType->toString->buf->new->StringBuilder->while->line->ScriptingFunctions->readLine->if->line->equals->break->buf->append->buf->append->return->buf->toString
ShellFunctions#evalinput(Object, Object, Object):::Nashorn extension: Reads zero or more lines from standard input and evaluates the concatenated string as code:::return->Global->input->eval
ShellFunctions#findOwnMH(String, Class, Class...)::: shell functions find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic

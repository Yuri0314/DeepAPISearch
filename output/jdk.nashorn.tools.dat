jdk.nashorn.tools.PartialParser#getLastExpressionStart(Context, String)->int:::Parse potentially partial code and keep track of the start of last expression.
jdk.nashorn.tools.Shell#main(String[])->void:::Main entry point with the default input, output and error streams.
jdk.nashorn.tools.Shell#main(InputStream, OutputStream, OutputStream, String[])->int:::Starting point for executing a Shell
jdk.nashorn.tools.Shell#run(InputStream, OutputStream, OutputStream, String[])->int:::Run method logic.
jdk.nashorn.tools.Shell#tokenizeString(String)->List::: shell tokenize string
jdk.nashorn.tools.Shell#apply(ScriptFunction, Object)->Object:::Hook to ScriptFunction "apply"
jdk.nashorn.tools.Shell#getLastExpressionStart(Context, String)->int:::Parse potentially partial code and keep track of the start of last expression
jdk.nashorn.tools.Shell#readEvalPrint(Context, Global)->int:::read-eval-print loop for Nashorn shell.
jdk.nashorn.tools.Shell#toString(Object, Global)->String:::Converts result to a printable string
jdk.nashorn.tools.ShellFunctions#input(Object, Object, Object)->Object:::Nashorn extension: global.input (shell-interactive-mode-only) Read one or more lines of input from the standard input till the given end marker is seen in standard input.
jdk.nashorn.tools.ShellFunctions#evalinput(Object, Object, Object)->Object:::Nashorn extension: Reads zero or more lines from standard input and evaluates the concatenated string as code

SSAUtil.PhiValueVisitor#visit(Value, Value)::: phi value visitor visit:::
SSAUtil#forEachPhiValuePair(LIR, AbstractBlockBase, AbstractBlockBase, PhiValueVisitor):::Visits each phi value pair of an edge, i.e:::if->merge->getPredecessorCount->return->jump->phiOut->label->phiIn->for->i->label->getPhiSize
SSAUtil#phiOut(LIR, AbstractBlockBase)::: util phi out:::instructions->lir->getLIRforBlock->index->instructions->size->op->instructions->get->return
SSAUtil#phiOutIndex(LIR, AbstractBlockBase)::: util phi out index:::instructions->lir->getLIRforBlock->index->instructions->size->return
SSAUtil#phiIn(LIR, AbstractBlockBase)::: util phi in:::label->lir->getLIRforBlock->get->return
SSAUtil#removePhiOut(LIR, AbstractBlockBase)::: util remove phi out:::jump->phiOut->jump->clearOutgoingValues
SSAUtil#removePhiIn(LIR, AbstractBlockBase)::: util remove phi in:::label->phiIn->label->clearIncomingValues
SSAUtil#verifySSAForm(LIR)::: util verify form:::return->new->SSAVerifier->verify
SSAUtil#verifyPhi(LIR, AbstractBlockBase)::: util verify phi:::foreach->merge->getPredecessors->forEachPhiValuePair
SSAUtil#indexOfValue(LabelOp, Value)::: util index of value:::for->i->label->getIncomingSize->return
SSAVerifier#verify()::: verifier verify:::debug->lir->getDebug->try->s->debug->scope->foreach->lir->getControlFlowGraph->getBlocks->doBlock->catch->throw->debug->handle->finally->return
SSAVerifier#doBlock(AbstractBlockBase)::: verifier do block:::if->visited->b->getId->get->return->foreach->b->getPredecessors->if->b->isLoopHeader->pred->isLoopEnd->doBlock->try->indent->lir->getDebug->logAndIndent->catch->finally
SSAVerifier#verifyBlock(AbstractBlockBase)::: verifier verify block:::visited->block->getId->set->foreach->lir->getLIRforBlock->op->this->useConsumer->visitEachAlive->op->this->useConsumer->visitEachState->op->this->useConsumer->visitEachInput->op->this->defConsumer->visitEachTemp->op->this->defConsumer->visitEachOutput->return
SSAVerifier#useConsumer(LIRInstruction, Value, OperandMode, EnumSet)::: verifier use consumer:::if->shouldProcess
SSAVerifier#defConsumer(LIRInstruction, Value, OperandMode, EnumSet)::: verifier def consumer:::if->shouldProcess->defined->new->Entry->put
SSAVerifier#shouldProcess(Value)::: verifier should process:::return->value->equals->isConstantValue->isRegister->isStackSlotValue

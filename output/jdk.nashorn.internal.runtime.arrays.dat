jdk.nashorn.internal.runtime.arrays.AnyElements#getElementWeight()->int:::Return a numeric weight of the element type - wider is higher
jdk.nashorn.internal.runtime.arrays.ArrayData#initialArray()->ArrayData:::Factory method for unspecified array - start as int
jdk.nashorn.internal.runtime.arrays.ArrayData#throwUnwarranted(ArrayData, int, int)->void:::Unwarranted thrower
jdk.nashorn.internal.runtime.arrays.ArrayData#alignUp(int)->int:::Align an array size up to the nearest array chunk size
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(long)->ArrayData:::Factory method for unspecified array with given length - start as int array data
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(Object)->ArrayData:::Factory method for unspecified given an array object
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(int[])->ArrayData:::Allocate an ArrayData wrapping a given array
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(double[])->ArrayData:::Allocate an ArrayData wrapping a given array
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(Object[])->ArrayData:::Allocate an ArrayData wrapping a given array
jdk.nashorn.internal.runtime.arrays.ArrayData#allocate(ByteBuffer)->ArrayData:::Allocate an ArrayData wrapping a given nio ByteBuffer
jdk.nashorn.internal.runtime.arrays.ArrayData#freeze(ArrayData)->ArrayData:::Apply a freeze filter to an ArrayData.
jdk.nashorn.internal.runtime.arrays.ArrayData#seal(ArrayData)->ArrayData:::Apply a seal filter to an ArrayData.
jdk.nashorn.internal.runtime.arrays.ArrayData#preventExtension(ArrayData)->ArrayData:::Prevent this array from being extended
jdk.nashorn.internal.runtime.arrays.ArrayData#setIsLengthNotWritable(ArrayData)->ArrayData:::Prevent this array from having its length reset
jdk.nashorn.internal.runtime.arrays.ArrayData#length()->long:::Return the length of the array data
jdk.nashorn.internal.runtime.arrays.ArrayData#copy()->ArrayData:::Return a copy of the array that can be modified without affecting this instance
jdk.nashorn.internal.runtime.arrays.ArrayData#asObjectArray()->Object[]:::Return a copy of the array data as an Object array.
jdk.nashorn.internal.runtime.arrays.ArrayData#asArrayOfType(Class)->Object:::Return a copy of the array data as an array of the specified type.
jdk.nashorn.internal.runtime.arrays.ArrayData#setLength(long)->void:::Set the length of the data array
jdk.nashorn.internal.runtime.arrays.ArrayData#increaseLength()->long:::Increase length by 1
jdk.nashorn.internal.runtime.arrays.ArrayData#decreaseLength()->long:::Decrease length by 1.
jdk.nashorn.internal.runtime.arrays.ArrayData#shiftLeft(int)->ArrayData:::Shift the array data left  TODO: This is used for Array.prototype.shift() which only shifts by 1, so we might consider dropping the offset parameter.
jdk.nashorn.internal.runtime.arrays.ArrayData#shiftRight(int)->ArrayData:::Shift the array right
jdk.nashorn.internal.runtime.arrays.ArrayData#ensure(long)->ArrayData:::Ensure that the given index exists and won't fail in a subsequent access
jdk.nashorn.internal.runtime.arrays.ArrayData#shrink(long)->ArrayData:::Shrink the array to a new length, may or may not retain the inner array
jdk.nashorn.internal.runtime.arrays.ArrayData#set(int, Object, boolean)->ArrayData:::Set an object value at a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#set(int, int, boolean)->ArrayData:::Set an int value at a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#set(int, double, boolean)->ArrayData:::Set an double value at a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#setEmpty(int)->ArrayData:::Set an empty value at a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#setEmpty(long, long)->ArrayData:::Set an empty value for a given range
jdk.nashorn.internal.runtime.arrays.ArrayData#getInt(int)->int:::Get an int value from a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#getOptimisticType()->Type:::Returns the optimistic type of this array data
jdk.nashorn.internal.runtime.arrays.ArrayData#getIntOptimistic(int, int)->int:::Get optimistic int - default is that it's impossible
jdk.nashorn.internal.runtime.arrays.ArrayData#getDouble(int)->double:::Get a double value from a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#getDoubleOptimistic(int, int)->double:::Get optimistic double - default is that it's impossible
jdk.nashorn.internal.runtime.arrays.ArrayData#getObject(int)->Object:::Get an Object value from a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#has(int)->boolean:::Tests to see if an entry exists (avoids boxing.)
jdk.nashorn.internal.runtime.arrays.ArrayData#canDelete(int, boolean)->boolean:::Returns if element at specific index can be deleted or not.
jdk.nashorn.internal.runtime.arrays.ArrayData#canDelete(long, boolean)->boolean:::Returns if element at specific index can be deleted or not.
jdk.nashorn.internal.runtime.arrays.ArrayData#safeDelete(long, long, boolean)->ArrayData:::Delete a range from the array if fromIndex is less than or equal to toIndex and the array supports deletion.
jdk.nashorn.internal.runtime.arrays.ArrayData#getDescriptor(Global, int)->PropertyDescriptor:::Returns property descriptor for element at a given index
jdk.nashorn.internal.runtime.arrays.ArrayData#delete(int)->ArrayData:::Delete an array value at the given index, substituting for an undefined
jdk.nashorn.internal.runtime.arrays.ArrayData#delete(long, long)->ArrayData:::Delete a given range from this array;
jdk.nashorn.internal.runtime.arrays.ArrayData#convert(Class)->ArrayData:::Convert the ArrayData to one with a different element type Currently Arrays are not collapsed to narrower types, just to wider ones
jdk.nashorn.internal.runtime.arrays.ArrayData#push(boolean, Object...)->ArrayData:::Push an array of items to the end of the array
jdk.nashorn.internal.runtime.arrays.ArrayData#push(boolean, Object)->ArrayData:::Push an array of items to the end of the array
jdk.nashorn.internal.runtime.arrays.ArrayData#pop()->Object:::Pop an element from the end of the array
jdk.nashorn.internal.runtime.arrays.ArrayData#slice(long, long)->ArrayData:::Slice out a section of the array and return that subsection as a new array data: [from, to)
jdk.nashorn.internal.runtime.arrays.ArrayData#fastSplice(int, int, int)->ArrayData:::Fast splice operation
jdk.nashorn.internal.runtime.arrays.ArrayData#widestType(Object...)->Class::: array data widest type
jdk.nashorn.internal.runtime.arrays.ArrayData#computeIteratorKeys()->List:::Return a list of keys in the array for the iterators
jdk.nashorn.internal.runtime.arrays.ArrayData#indexIterator()->Iterator:::Return an iterator that goes through all indexes of elements in this array
jdk.nashorn.internal.runtime.arrays.ArrayData#nextSize(int)->int:::Exponential growth function for array size when in need of resizing.
jdk.nashorn.internal.runtime.arrays.ArrayData#nextIndex(long)->long:::Return the next valid index from a given one
jdk.nashorn.internal.runtime.arrays.ArrayData#invoke(MethodHandle, Object)->Object::: array data invoke
jdk.nashorn.internal.runtime.arrays.ArrayData#findFastCallMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find a fast call if one exists
jdk.nashorn.internal.runtime.arrays.ArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find a fast element getter if one exists
jdk.nashorn.internal.runtime.arrays.ArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find a fast element setter if one exists
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getUnderlying()->ArrayData:::Get the underlying ArrayData that this filter wraps
jdk.nashorn.internal.runtime.arrays.ArrayFilter#setLength(long)->void::: array filter set length
jdk.nashorn.internal.runtime.arrays.ArrayFilter#asObjectArray()->Object[]::: array filter as object array
jdk.nashorn.internal.runtime.arrays.ArrayFilter#asArrayOfType(Class)->Object::: array filter as array of type
jdk.nashorn.internal.runtime.arrays.ArrayFilter#shiftLeft(int)->ArrayData::: array filter shift left
jdk.nashorn.internal.runtime.arrays.ArrayFilter#shiftRight(int)->ArrayData::: array filter shift right
jdk.nashorn.internal.runtime.arrays.ArrayFilter#ensure(long)->ArrayData::: array filter ensure
jdk.nashorn.internal.runtime.arrays.ArrayFilter#shrink(long)->ArrayData::: array filter shrink
jdk.nashorn.internal.runtime.arrays.ArrayFilter#set(int, Object, boolean)->ArrayData::: array filter set
jdk.nashorn.internal.runtime.arrays.ArrayFilter#set(int, int, boolean)->ArrayData::: array filter set
jdk.nashorn.internal.runtime.arrays.ArrayFilter#set(int, double, boolean)->ArrayData::: array filter set
jdk.nashorn.internal.runtime.arrays.ArrayFilter#setEmpty(int)->ArrayData::: array filter set empty
jdk.nashorn.internal.runtime.arrays.ArrayFilter#setEmpty(long, long)->ArrayData::: array filter set empty
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getOptimisticType()->Type::: array filter get optimistic type
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getInt(int)->int::: array filter get int
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getIntOptimistic(int, int)->int::: array filter get int optimistic
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getDouble(int)->double::: array filter get double
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getDoubleOptimistic(int, int)->double::: array filter get double optimistic
jdk.nashorn.internal.runtime.arrays.ArrayFilter#getObject(int)->Object::: array filter get object
jdk.nashorn.internal.runtime.arrays.ArrayFilter#has(int)->boolean::: array filter has
jdk.nashorn.internal.runtime.arrays.ArrayFilter#delete(int)->ArrayData::: array filter delete
jdk.nashorn.internal.runtime.arrays.ArrayFilter#delete(long, long)->ArrayData::: array filter delete
jdk.nashorn.internal.runtime.arrays.ArrayFilter#convert(Class)->ArrayData::: array filter convert
jdk.nashorn.internal.runtime.arrays.ArrayFilter#pop()->Object::: array filter pop
jdk.nashorn.internal.runtime.arrays.ArrayFilter#nextIndex(long)->long::: array filter next index
jdk.nashorn.internal.runtime.arrays.ArrayFilter#convertUndefinedValue(Class)->Object::: array filter convert undefined value
jdk.nashorn.internal.runtime.arrays.ArrayIndex#getArrayIndex(Object)->int:::Returns a valid array index in an int, if the object represents one
jdk.nashorn.internal.runtime.arrays.ArrayIndex#getArrayIndex(int)->int:::Returns a valid array index in an int, if key represents one.
jdk.nashorn.internal.runtime.arrays.ArrayIndex#getArrayIndex(long)->int:::Returns a valid array index in an int, if the long represents one.
jdk.nashorn.internal.runtime.arrays.ArrayIndex#getArrayIndex(double)->int:::Return a valid index for this double, if it represents one
jdk.nashorn.internal.runtime.arrays.ArrayIndex#getArrayIndex(String)->int:::Return a valid array index for this string, if it represents one.
jdk.nashorn.internal.runtime.arrays.ArrayIndex#isValidArrayIndex(int)->boolean:::Check whether an index is valid as an array index
jdk.nashorn.internal.runtime.arrays.ArrayIndex#toLongIndex(int)->long:::Convert an index to a long value
jdk.nashorn.internal.runtime.arrays.ArrayIndex#toKey(int)->String:::Convert an index to a key string
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#isReverse()->boolean:::Is this a reverse order iteration?
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#bumpIndex()->long:::Go the the next valid element index of the iterator
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#nextIndex()->long:::Return the next valid element index of the iterator
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#remove()->void::: array like iterator remove
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#getLength()->long:::Get the length of the iteration
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#arrayLikeIterator(Object)->ArrayLikeIterator:::ArrayLikeIterator factory
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#reverseArrayLikeIterator(Object)->ArrayLikeIterator:::ArrayLikeIterator factory (reverse order)
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#arrayLikeIterator(Object, boolean)->ArrayLikeIterator:::ArrayLikeIterator factory
jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator#reverseArrayLikeIterator(Object, boolean)->ArrayLikeIterator:::ArrayLikeIterator factory (reverse order)
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#getDescriptor(Global, int)->PropertyDescriptor:::Returns property descriptor for element at a given index
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#copy()->ArrayData::: byte buffer array data copy
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#asObjectArray()->Object[]::: byte buffer array data as object array
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#setLength(long)->void::: byte buffer array data set length
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#shiftLeft(int)->ArrayData::: byte buffer array data shift left
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#shiftRight(int)->ArrayData::: byte buffer array data shift right
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#ensure(long)->ArrayData::: byte buffer array data ensure
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#shrink(long)->ArrayData::: byte buffer array data shrink
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#set(int, Object, boolean)->ArrayData::: byte buffer array data set
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#set(int, int, boolean)->ArrayData::: byte buffer array data set
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#set(int, double, boolean)->ArrayData::: byte buffer array data set
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#getInt(int)->int::: byte buffer array data get int
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#getDouble(int)->double::: byte buffer array data get double
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#getObject(int)->Object::: byte buffer array data get object
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#has(int)->boolean::: byte buffer array data has
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#canDelete(int, boolean)->boolean::: byte buffer array data can delete
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#canDelete(long, boolean)->boolean::: byte buffer array data can delete
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#delete(int)->ArrayData::: byte buffer array data delete
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#delete(long, long)->ArrayData::: byte buffer array data delete
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#push(boolean, Object...)->ArrayData::: byte buffer array data push
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#pop()->Object::: byte buffer array data pop
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#slice(long, long)->ArrayData::: byte buffer array data slice
jdk.nashorn.internal.runtime.arrays.ByteBufferArrayData#convert(Class)->ArrayData::: byte buffer array data convert
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#hasRoomFor(int)->boolean:::Check if we can put one more element at the end of this continuous array without reallocating, or if we are overwriting an already allocated element
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#isEmpty()->boolean:::Check if an arraydata is empty
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getElementGetter(Class, int)->MethodHandle:::Return element getter for a certain type at a certain program point
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getElementSetter(Class)->MethodHandle:::Return element getter for a certain type at a certain program point
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#throwHas(int)->int:::Version of has that throws a class cast exception if element does not exist used for relinking
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#copy()->ContinuousArrayData::: continuous array data copy
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getElementType()->Class:::Returns the type used to store an element in this array
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getOptimisticType()->Type::: continuous array data get optimistic type
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getBoxedElementType()->Class:::Returns the boxed type of the type used to store an element in this array
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#widest(ContinuousArrayData)->ContinuousArrayData:::Get the widest element type of two arrays
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getContinuousElementGetter(MethodHandle, Class, int)->MethodHandle:::Look up a continuous array element getter
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getContinuousElementSetter(MethodHandle, Class)->MethodHandle:::Look up a continuous array element setter
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getContinuousElementGetter(Class, MethodHandle, Class, int)->MethodHandle:::Return element getter for a ContinuousArrayData
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#getContinuousElementSetter(Class, MethodHandle, Class)->MethodHandle:::Return element setter for a ContinuousArrayData
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Return a fast linked array getter, or null if we have to dispatch to super class
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Return a fast linked array setter, or null if we have to dispatch to super class
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPush(int)->double:::Specialization - fast push implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPush(long)->double:::Specialization - fast push implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPush(double)->double:::Specialization - fast push implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPush(Object)->double:::Specialization - fast push implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPopInt()->int:::Specialization - fast pop implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPopDouble()->double:::Specialization - fast pop implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastPopObject()->Object:::Specialization - fast pop implementation
jdk.nashorn.internal.runtime.arrays.ContinuousArrayData#fastConcat(ContinuousArrayData)->ContinuousArrayData:::Specialization - fast concat implementation
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#copy()->ArrayData::: deleted array filter copy
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#asObjectArray()->Object[]::: deleted array filter as object array
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#asArrayOfType(Class)->Object::: deleted array filter as array of type
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#shiftLeft(int)->ArrayData::: deleted array filter shift left
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#shiftRight(int)->ArrayData::: deleted array filter shift right
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#ensure(long)->ArrayData::: deleted array filter ensure
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#shrink(long)->ArrayData::: deleted array filter shrink
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#set(int, Object, boolean)->ArrayData::: deleted array filter set
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#set(int, int, boolean)->ArrayData::: deleted array filter set
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#set(int, double, boolean)->ArrayData::: deleted array filter set
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#has(int)->boolean::: deleted array filter has
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#delete(int)->ArrayData::: deleted array filter delete
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#delete(long, long)->ArrayData::: deleted array filter delete
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#pop()->Object::: deleted array filter pop
jdk.nashorn.internal.runtime.arrays.DeletedArrayFilter#slice(long, long)->ArrayData::: deleted array filter slice
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#copy()->ArrayData::: deleted range array filter copy
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#asObjectArray()->Object[]::: deleted range array filter as object array
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#asArrayOfType(Class)->Object::: deleted range array filter as array of type
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#ensure(long)->ArrayData::: deleted range array filter ensure
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#shiftLeft(int)->ArrayData::: deleted range array filter shift left
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#shiftRight(int)->ArrayData::: deleted range array filter shift right
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#shrink(long)->ArrayData::: deleted range array filter shrink
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#set(int, Object, boolean)->ArrayData::: deleted range array filter set
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#set(int, int, boolean)->ArrayData::: deleted range array filter set
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#set(int, double, boolean)->ArrayData::: deleted range array filter set
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#has(int)->boolean::: deleted range array filter has
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#delete(int)->ArrayData::: deleted range array filter delete
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#delete(long, long)->ArrayData::: deleted range array filter delete
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#pop()->Object::: deleted range array filter pop
jdk.nashorn.internal.runtime.arrays.DeletedRangeArrayFilter#slice(long, long)->ArrayData::: deleted range array filter slice
jdk.nashorn.internal.runtime.arrays.EmptyArrayLikeIterator#hasNext()->boolean::: empty array like iterator has next
jdk.nashorn.internal.runtime.arrays.EmptyArrayLikeIterator#next()->Object::: empty array like iterator next
jdk.nashorn.internal.runtime.arrays.EmptyArrayLikeIterator#getLength()->long::: empty array like iterator get length
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#copy()->ArrayData::: frozen array filter copy
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#getDescriptor(Global, int)->PropertyDescriptor::: frozen array filter get descriptor
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#set(int, int, boolean)->ArrayData::: frozen array filter set
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#set(int, double, boolean)->ArrayData::: frozen array filter set
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#set(int, Object, boolean)->ArrayData::: frozen array filter set
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#push(boolean, Object...)->ArrayData::: frozen array filter push
jdk.nashorn.internal.runtime.arrays.FrozenArrayFilter#pop()->Object::: frozen array filter pop
jdk.nashorn.internal.runtime.arrays.IntArrayData#getElementType()->Class::: int array data get element type
jdk.nashorn.internal.runtime.arrays.IntArrayData#getBoxedElementType()->Class::: int array data get boxed element type
jdk.nashorn.internal.runtime.arrays.IntArrayData#getElementWeight()->int::: int array data get element weight
jdk.nashorn.internal.runtime.arrays.IntArrayData#widest(ContinuousArrayData)->ContinuousArrayData::: int array data widest
jdk.nashorn.internal.runtime.arrays.IntArrayData#asObjectArray()->Object[]::: int array data as object array
jdk.nashorn.internal.runtime.arrays.IntArrayData#getElementGetter(Class, int)->MethodHandle::: int array data get element getter
jdk.nashorn.internal.runtime.arrays.IntArrayData#getElementSetter(Class)->MethodHandle::: int array data get element setter
jdk.nashorn.internal.runtime.arrays.IntArrayData#copy()->IntArrayData::: int array data copy
jdk.nashorn.internal.runtime.arrays.IntArrayData#asArrayOfType(Class)->Object::: int array data as array of type
jdk.nashorn.internal.runtime.arrays.IntArrayData#convert(Class)->ArrayData::: int array data convert
jdk.nashorn.internal.runtime.arrays.IntArrayData#shiftLeft(int)->ArrayData::: int array data shift left
jdk.nashorn.internal.runtime.arrays.IntArrayData#shiftRight(int)->ArrayData::: int array data shift right
jdk.nashorn.internal.runtime.arrays.IntArrayData#ensure(long)->ArrayData::: int array data ensure
jdk.nashorn.internal.runtime.arrays.IntArrayData#shrink(long)->ArrayData::: int array data shrink
jdk.nashorn.internal.runtime.arrays.IntArrayData#set(int, Object, boolean)->ArrayData::: int array data set
jdk.nashorn.internal.runtime.arrays.IntArrayData#set(int, int, boolean)->ArrayData::: int array data set
jdk.nashorn.internal.runtime.arrays.IntArrayData#set(int, double, boolean)->ArrayData::: int array data set
jdk.nashorn.internal.runtime.arrays.IntArrayData#getInt(int)->int::: int array data get int
jdk.nashorn.internal.runtime.arrays.IntArrayData#getIntOptimistic(int, int)->int::: int array data get int optimistic
jdk.nashorn.internal.runtime.arrays.IntArrayData#getDouble(int)->double::: int array data get double
jdk.nashorn.internal.runtime.arrays.IntArrayData#getDoubleOptimistic(int, int)->double::: int array data get double optimistic
jdk.nashorn.internal.runtime.arrays.IntArrayData#getObject(int)->Object::: int array data get object
jdk.nashorn.internal.runtime.arrays.IntArrayData#has(int)->boolean::: int array data has
jdk.nashorn.internal.runtime.arrays.IntArrayData#delete(int)->ArrayData::: int array data delete
jdk.nashorn.internal.runtime.arrays.IntArrayData#delete(long, long)->ArrayData::: int array data delete
jdk.nashorn.internal.runtime.arrays.IntArrayData#pop()->Object::: int array data pop
jdk.nashorn.internal.runtime.arrays.IntArrayData#slice(long, long)->ArrayData::: int array data slice
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastSplice(int, int, int)->ArrayData::: int array data fast splice
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastPush(int)->double::: int array data fast push
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastPopInt()->int::: int array data fast pop int
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastPopDouble()->double::: int array data fast pop double
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastPopObject()->Object::: int array data fast pop object
jdk.nashorn.internal.runtime.arrays.IntArrayData#fastConcat(ContinuousArrayData)->ContinuousArrayData::: int array data fast concat
jdk.nashorn.internal.runtime.arrays.IntArrayData#toString()->String::: int array data to string
jdk.nashorn.internal.runtime.arrays.IteratorAction#applyLoopBegin(ArrayLikeIterator)->void:::An action to be performed once at the start of the apply loop
jdk.nashorn.internal.runtime.arrays.IteratorAction#apply()->T:::Apply action main loop.
jdk.nashorn.internal.runtime.arrays.IteratorAction#forEach(Object, double)->boolean:::For each callback
jdk.nashorn.internal.runtime.arrays.JavaArrayIterator#indexInArray()->boolean:::Is the current index still inside the array
jdk.nashorn.internal.runtime.arrays.JavaArrayIterator#next()->Object::: java array iterator next
jdk.nashorn.internal.runtime.arrays.JavaArrayIterator#getLength()->long::: java array iterator get length
jdk.nashorn.internal.runtime.arrays.JavaArrayIterator#hasNext()->boolean::: java array iterator has next
jdk.nashorn.internal.runtime.arrays.JavaArrayIterator#remove()->void::: java array iterator remove
jdk.nashorn.internal.runtime.arrays.JavaListIterator#indexInArray()->boolean:::Is the current index still inside the array
jdk.nashorn.internal.runtime.arrays.JavaListIterator#next()->Object::: java list iterator next
jdk.nashorn.internal.runtime.arrays.JavaListIterator#getLength()->long::: java list iterator get length
jdk.nashorn.internal.runtime.arrays.JavaListIterator#hasNext()->boolean::: java list iterator has next
jdk.nashorn.internal.runtime.arrays.JavaListIterator#remove()->void::: java list iterator remove
jdk.nashorn.internal.runtime.arrays.JSObjectIterator#indexInArray()->boolean::: object iterator index in array
jdk.nashorn.internal.runtime.arrays.JSObjectIterator#getLength()->long::: object iterator get length
jdk.nashorn.internal.runtime.arrays.JSObjectIterator#hasNext()->boolean::: object iterator has next
jdk.nashorn.internal.runtime.arrays.JSObjectIterator#next()->Object::: object iterator next
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#copy()->ArrayData::: length not writable filter copy
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#has(int)->boolean::: length not writable filter has
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#setLength(long)->void:::Set the length of the data array
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#ensure(long)->ArrayData::: length not writable filter ensure
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#slice(long, long)->ArrayData::: length not writable filter slice
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#getInt(int)->int::: length not writable filter get int
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#getIntOptimistic(int, int)->int::: length not writable filter get int optimistic
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#getDouble(int)->double::: length not writable filter get double
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#getDoubleOptimistic(int, int)->double::: length not writable filter get double optimistic
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#getObject(int)->Object::: length not writable filter get object
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#set(int, Object, boolean)->ArrayData::: length not writable filter set
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#set(int, int, boolean)->ArrayData::: length not writable filter set
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#set(int, double, boolean)->ArrayData::: length not writable filter set
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#delete(int)->ArrayData::: length not writable filter delete
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#delete(long, long)->ArrayData::: length not writable filter delete
jdk.nashorn.internal.runtime.arrays.LengthNotWritableFilter#indexIterator()->Iterator::: length not writable filter index iterator
jdk.nashorn.internal.runtime.arrays.NonExtensibleArrayFilter#copy()->ArrayData::: non extensible array filter copy
jdk.nashorn.internal.runtime.arrays.NonExtensibleArrayFilter#slice(long, long)->ArrayData::: non extensible array filter slice
jdk.nashorn.internal.runtime.arrays.NonExtensibleArrayFilter#set(int, Object, boolean)->ArrayData::: non extensible array filter set
jdk.nashorn.internal.runtime.arrays.NonExtensibleArrayFilter#set(int, int, boolean)->ArrayData::: non extensible array filter set
jdk.nashorn.internal.runtime.arrays.NonExtensibleArrayFilter#set(int, double, boolean)->ArrayData::: non extensible array filter set
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getElementType()->Class::: number array data get element type
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getBoxedElementType()->Class::: number array data get boxed element type
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getElementWeight()->int::: number array data get element weight
jdk.nashorn.internal.runtime.arrays.NumberArrayData#widest(ContinuousArrayData)->ContinuousArrayData::: number array data widest
jdk.nashorn.internal.runtime.arrays.NumberArrayData#copy()->NumberArrayData::: number array data copy
jdk.nashorn.internal.runtime.arrays.NumberArrayData#asObjectArray()->Object[]::: number array data as object array
jdk.nashorn.internal.runtime.arrays.NumberArrayData#asArrayOfType(Class)->Object::: number array data as array of type
jdk.nashorn.internal.runtime.arrays.NumberArrayData#convert(Class)->ContinuousArrayData::: number array data convert
jdk.nashorn.internal.runtime.arrays.NumberArrayData#shiftLeft(int)->ArrayData::: number array data shift left
jdk.nashorn.internal.runtime.arrays.NumberArrayData#shiftRight(int)->ArrayData::: number array data shift right
jdk.nashorn.internal.runtime.arrays.NumberArrayData#ensure(long)->ArrayData::: number array data ensure
jdk.nashorn.internal.runtime.arrays.NumberArrayData#shrink(long)->ArrayData::: number array data shrink
jdk.nashorn.internal.runtime.arrays.NumberArrayData#set(int, Object, boolean)->ArrayData::: number array data set
jdk.nashorn.internal.runtime.arrays.NumberArrayData#set(int, int, boolean)->ArrayData::: number array data set
jdk.nashorn.internal.runtime.arrays.NumberArrayData#set(int, double, boolean)->ArrayData::: number array data set
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getElementGetter(Class, int)->MethodHandle::: number array data get element getter
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getElementSetter(Class)->MethodHandle::: number array data get element setter
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getInt(int)->int::: number array data get int
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getDouble(int)->double::: number array data get double
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getDoubleOptimistic(int, int)->double::: number array data get double optimistic
jdk.nashorn.internal.runtime.arrays.NumberArrayData#getObject(int)->Object::: number array data get object
jdk.nashorn.internal.runtime.arrays.NumberArrayData#has(int)->boolean::: number array data has
jdk.nashorn.internal.runtime.arrays.NumberArrayData#delete(int)->ArrayData::: number array data delete
jdk.nashorn.internal.runtime.arrays.NumberArrayData#delete(long, long)->ArrayData::: number array data delete
jdk.nashorn.internal.runtime.arrays.NumberArrayData#pop()->Object::: number array data pop
jdk.nashorn.internal.runtime.arrays.NumberArrayData#slice(long, long)->ArrayData::: number array data slice
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastSplice(int, int, int)->ArrayData::: number array data fast splice
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastPush(int)->double::: number array data fast push
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastPush(long)->double::: number array data fast push
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastPush(double)->double::: number array data fast push
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastPopDouble()->double::: number array data fast pop double
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastPopObject()->Object::: number array data fast pop object
jdk.nashorn.internal.runtime.arrays.NumberArrayData#fastConcat(ContinuousArrayData)->ContinuousArrayData::: number array data fast concat
jdk.nashorn.internal.runtime.arrays.NumberArrayData#toString()->String::: number array data to string
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getElementType()->Class::: object array data get element type
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getBoxedElementType()->Class::: object array data get boxed element type
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getElementWeight()->int::: object array data get element weight
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#widest(ContinuousArrayData)->ContinuousArrayData::: object array data widest
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#copy()->ObjectArrayData::: object array data copy
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#asObjectArray()->Object[]::: object array data as object array
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#convert(Class)->ObjectArrayData::: object array data convert
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#shiftLeft(int)->ArrayData::: object array data shift left
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#shiftRight(int)->ArrayData::: object array data shift right
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#ensure(long)->ArrayData::: object array data ensure
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#shrink(long)->ArrayData::: object array data shrink
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#set(int, Object, boolean)->ArrayData::: object array data set
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#set(int, int, boolean)->ArrayData::: object array data set
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#set(int, double, boolean)->ArrayData::: object array data set
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#setEmpty(int)->ArrayData::: object array data set empty
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#setEmpty(long, long)->ArrayData::: object array data set empty
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getElementGetter(Class, int)->MethodHandle::: object array data get element getter
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getElementSetter(Class)->MethodHandle::: object array data get element setter
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getInt(int)->int::: object array data get int
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getDouble(int)->double::: object array data get double
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#getObject(int)->Object::: object array data get object
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#has(int)->boolean::: object array data has
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#delete(int)->ArrayData::: object array data delete
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#delete(long, long)->ArrayData::: object array data delete
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastPush(int)->double::: object array data fast push
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastPush(long)->double::: object array data fast push
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastPush(double)->double::: object array data fast push
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastPush(Object)->double::: object array data fast push
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastPopObject()->Object::: object array data fast pop object
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#pop()->Object::: object array data pop
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#slice(long, long)->ArrayData::: object array data slice
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#push(boolean, Object)->ArrayData::: object array data push
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastSplice(int, int, int)->ArrayData::: object array data fast splice
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#fastConcat(ContinuousArrayData)->ContinuousArrayData::: object array data fast concat
jdk.nashorn.internal.runtime.arrays.ObjectArrayData#toString()->String::: object array data to string
jdk.nashorn.internal.runtime.arrays.ReverseJavaArrayIterator#isReverse()->boolean::: reverse java array iterator is reverse
jdk.nashorn.internal.runtime.arrays.ReverseJavaArrayIterator#indexInArray()->boolean::: reverse java array iterator index in array
jdk.nashorn.internal.runtime.arrays.ReverseJavaArrayIterator#bumpIndex()->long::: reverse java array iterator bump index
jdk.nashorn.internal.runtime.arrays.ReverseJavaListIterator#isReverse()->boolean::: reverse java list iterator is reverse
jdk.nashorn.internal.runtime.arrays.ReverseJavaListIterator#indexInArray()->boolean::: reverse java list iterator index in array
jdk.nashorn.internal.runtime.arrays.ReverseJavaListIterator#bumpIndex()->long::: reverse java list iterator bump index
jdk.nashorn.internal.runtime.arrays.ReverseJSObjectIterator#isReverse()->boolean::: reverse object iterator is reverse
jdk.nashorn.internal.runtime.arrays.ReverseJSObjectIterator#indexInArray()->boolean::: reverse object iterator index in array
jdk.nashorn.internal.runtime.arrays.ReverseJSObjectIterator#bumpIndex()->long::: reverse object iterator bump index
jdk.nashorn.internal.runtime.arrays.ReverseScriptArrayIterator#isReverse()->boolean::: reverse script array iterator is reverse
jdk.nashorn.internal.runtime.arrays.ReverseScriptArrayIterator#indexInArray()->boolean::: reverse script array iterator index in array
jdk.nashorn.internal.runtime.arrays.ReverseScriptArrayIterator#bumpIndex()->long::: reverse script array iterator bump index
jdk.nashorn.internal.runtime.arrays.ReverseScriptObjectIterator#isReverse()->boolean::: reverse script object iterator is reverse
jdk.nashorn.internal.runtime.arrays.ReverseScriptObjectIterator#indexInArray()->boolean::: reverse script object iterator index in array
jdk.nashorn.internal.runtime.arrays.ReverseScriptObjectIterator#bumpIndex()->long::: reverse script object iterator bump index
jdk.nashorn.internal.runtime.arrays.ScriptArrayIterator#indexInArray()->boolean:::Is the current index still inside the array
jdk.nashorn.internal.runtime.arrays.ScriptArrayIterator#next()->Object::: script array iterator next
jdk.nashorn.internal.runtime.arrays.ScriptArrayIterator#getLength()->long::: script array iterator get length
jdk.nashorn.internal.runtime.arrays.ScriptArrayIterator#hasNext()->boolean::: script array iterator has next
jdk.nashorn.internal.runtime.arrays.ScriptArrayIterator#remove()->void::: script array iterator remove
jdk.nashorn.internal.runtime.arrays.ScriptObjectIterator#indexInArray()->boolean::: script object iterator index in array
jdk.nashorn.internal.runtime.arrays.ScriptObjectIterator#getLength()->long::: script object iterator get length
jdk.nashorn.internal.runtime.arrays.ScriptObjectIterator#hasNext()->boolean::: script object iterator has next
jdk.nashorn.internal.runtime.arrays.ScriptObjectIterator#next()->Object::: script object iterator next
jdk.nashorn.internal.runtime.arrays.SealedArrayFilter#copy()->ArrayData::: sealed array filter copy
jdk.nashorn.internal.runtime.arrays.SealedArrayFilter#slice(long, long)->ArrayData::: sealed array filter slice
jdk.nashorn.internal.runtime.arrays.SealedArrayFilter#canDelete(int, boolean)->boolean::: sealed array filter can delete
jdk.nashorn.internal.runtime.arrays.SealedArrayFilter#canDelete(long, boolean)->boolean::: sealed array filter can delete
jdk.nashorn.internal.runtime.arrays.SealedArrayFilter#getDescriptor(Global, int)->PropertyDescriptor::: sealed array filter get descriptor
jdk.nashorn.internal.runtime.arrays.SparseArrayData#copy()->ArrayData::: sparse array data copy
jdk.nashorn.internal.runtime.arrays.SparseArrayData#asObjectArray()->Object[]::: sparse array data as object array
jdk.nashorn.internal.runtime.arrays.SparseArrayData#shiftLeft(int)->ArrayData::: sparse array data shift left
jdk.nashorn.internal.runtime.arrays.SparseArrayData#shiftRight(int)->ArrayData::: sparse array data shift right
jdk.nashorn.internal.runtime.arrays.SparseArrayData#ensure(long)->ArrayData::: sparse array data ensure
jdk.nashorn.internal.runtime.arrays.SparseArrayData#shrink(long)->ArrayData::: sparse array data shrink
jdk.nashorn.internal.runtime.arrays.SparseArrayData#set(int, Object, boolean)->ArrayData::: sparse array data set
jdk.nashorn.internal.runtime.arrays.SparseArrayData#set(int, int, boolean)->ArrayData::: sparse array data set
jdk.nashorn.internal.runtime.arrays.SparseArrayData#set(int, double, boolean)->ArrayData::: sparse array data set
jdk.nashorn.internal.runtime.arrays.SparseArrayData#setEmpty(int)->ArrayData::: sparse array data set empty
jdk.nashorn.internal.runtime.arrays.SparseArrayData#setEmpty(long, long)->ArrayData::: sparse array data set empty
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getOptimisticType()->Type::: sparse array data get optimistic type
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getInt(int)->int::: sparse array data get int
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getIntOptimistic(int, int)->int::: sparse array data get int optimistic
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getDouble(int)->double::: sparse array data get double
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getDoubleOptimistic(int, int)->double::: sparse array data get double optimistic
jdk.nashorn.internal.runtime.arrays.SparseArrayData#getObject(int)->Object::: sparse array data get object
jdk.nashorn.internal.runtime.arrays.SparseArrayData#has(int)->boolean::: sparse array data has
jdk.nashorn.internal.runtime.arrays.SparseArrayData#delete(int)->ArrayData::: sparse array data delete
jdk.nashorn.internal.runtime.arrays.SparseArrayData#delete(long, long)->ArrayData::: sparse array data delete
jdk.nashorn.internal.runtime.arrays.SparseArrayData#convert(Class)->ArrayData::: sparse array data convert
jdk.nashorn.internal.runtime.arrays.SparseArrayData#pop()->Object::: sparse array data pop
jdk.nashorn.internal.runtime.arrays.SparseArrayData#slice(long, long)->ArrayData::: sparse array data slice
jdk.nashorn.internal.runtime.arrays.SparseArrayData#nextIndex(long)->long::: sparse array data next index
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getElementLength()->int:::Length in number of elements
jdk.nashorn.internal.runtime.arrays.TypedArrayData#isUnsigned()->boolean:::Is this an unsigned array data?
jdk.nashorn.internal.runtime.arrays.TypedArrayData#isClamped()->boolean:::Is this a clamped array data?
jdk.nashorn.internal.runtime.arrays.TypedArrayData#canDelete(int, boolean)->boolean::: typed array data can delete
jdk.nashorn.internal.runtime.arrays.TypedArrayData#canDelete(long, boolean)->boolean::: typed array data can delete
jdk.nashorn.internal.runtime.arrays.TypedArrayData#copy()->TypedArrayData::: typed array data copy
jdk.nashorn.internal.runtime.arrays.TypedArrayData#asObjectArray()->Object[]::: typed array data as object array
jdk.nashorn.internal.runtime.arrays.TypedArrayData#shiftLeft(int)->ArrayData::: typed array data shift left
jdk.nashorn.internal.runtime.arrays.TypedArrayData#shiftRight(int)->ArrayData::: typed array data shift right
jdk.nashorn.internal.runtime.arrays.TypedArrayData#ensure(long)->ArrayData::: typed array data ensure
jdk.nashorn.internal.runtime.arrays.TypedArrayData#shrink(long)->ArrayData::: typed array data shrink
jdk.nashorn.internal.runtime.arrays.TypedArrayData#has(int)->boolean::: typed array data has
jdk.nashorn.internal.runtime.arrays.TypedArrayData#delete(int)->ArrayData::: typed array data delete
jdk.nashorn.internal.runtime.arrays.TypedArrayData#delete(long, long)->ArrayData::: typed array data delete
jdk.nashorn.internal.runtime.arrays.TypedArrayData#convert(Class)->TypedArrayData::: typed array data convert
jdk.nashorn.internal.runtime.arrays.TypedArrayData#pop()->Object::: typed array data pop
jdk.nashorn.internal.runtime.arrays.TypedArrayData#slice(long, long)->ArrayData::: typed array data slice
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getGetElem()->MethodHandle:::Element getter method handle
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getSetElem()->MethodHandle:::Element setter method handle
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getElementGetter(Class, int)->MethodHandle::: typed array data get element getter
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getElementSetter(Class)->MethodHandle::: typed array data get element setter
jdk.nashorn.internal.runtime.arrays.TypedArrayData#getContinuousElementSetter(Class, MethodHandle, Class)->MethodHandle::: typed array data get continuous element setter
jdk.nashorn.internal.runtime.arrays.TypedArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation::: typed array data find fast get index method
jdk.nashorn.internal.runtime.arrays.TypedArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest)->GuardedInvocation::: typed array data find fast set index method
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#copy()->ArrayData::: undefined array filter copy
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#asObjectArray()->Object[]::: undefined array filter as object array
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#asArrayOfType(Class)->Object::: undefined array filter as array of type
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#shiftLeft(int)->ArrayData::: undefined array filter shift left
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#shiftRight(int)->ArrayData::: undefined array filter shift right
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#ensure(long)->ArrayData::: undefined array filter ensure
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#shrink(long)->ArrayData::: undefined array filter shrink
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#set(int, Object, boolean)->ArrayData::: undefined array filter set
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#set(int, int, boolean)->ArrayData::: undefined array filter set
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#set(int, double, boolean)->ArrayData::: undefined array filter set
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#getInt(int)->int::: undefined array filter get int
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#getIntOptimistic(int, int)->int::: undefined array filter get int optimistic
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#getDouble(int)->double::: undefined array filter get double
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#getDoubleOptimistic(int, int)->double::: undefined array filter get double optimistic
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#getObject(int)->Object::: undefined array filter get object
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#delete(int)->ArrayData::: undefined array filter delete
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#pop()->Object::: undefined array filter pop
jdk.nashorn.internal.runtime.arrays.UndefinedArrayFilter#slice(long, long)->ArrayData::: undefined array filter slice

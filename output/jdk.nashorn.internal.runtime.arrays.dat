AnyElements#getElementWeight():::Return a numeric weight of the element type - wider is higher:::
ArrayData.UntouchedArrayData#toRealArrayData()::: untouched array data to real array data:::return->new->IntArrayData
ArrayData.UntouchedArrayData#toRealArrayData(int)::: untouched array data to real array data:::newData->new->IntArrayData->return->new->DeletedRangeArrayFilter
ArrayData.UntouchedArrayData#copy()::: untouched array data copy:::return
ArrayData.UntouchedArrayData#asArrayOfType(Class)::: untouched array data as array of type:::return->Array->newInstance
ArrayData.UntouchedArrayData#asObjectArray()::: untouched array data as object array:::return
ArrayData.UntouchedArrayData#ensure(long)::: untouched array data ensure:::if->return->new->SparseArrayData->return->toRealArrayData
ArrayData.UntouchedArrayData#convert(Class)::: untouched array data convert:::return->toRealArrayData->convert
ArrayData.UntouchedArrayData#delete(int)::: untouched array data delete:::return->new->DeletedRangeArrayFilter
ArrayData.UntouchedArrayData#delete(long, long)::: untouched array data delete:::return->new->DeletedRangeArrayFilter
ArrayData.UntouchedArrayData#shiftLeft(int)::: untouched array data shift left:::return
ArrayData.UntouchedArrayData#shiftRight(int)::: untouched array data shift right:::return
ArrayData.UntouchedArrayData#shrink(long)::: untouched array data shrink:::return
ArrayData.UntouchedArrayData#set(int, Object, boolean)::: untouched array data set:::return->toRealArrayData->set
ArrayData.UntouchedArrayData#set(int, int, boolean)::: untouched array data set:::return->toRealArrayData->set
ArrayData.UntouchedArrayData#set(int, double, boolean)::: untouched array data set:::return->toRealArrayData->set
ArrayData.UntouchedArrayData#getInt(int)::: untouched array data get int:::throw->new->ArrayIndexOutOfBoundsException
ArrayData.UntouchedArrayData#getDouble(int)::: untouched array data get double:::throw->new->ArrayIndexOutOfBoundsException
ArrayData.UntouchedArrayData#getObject(int)::: untouched array data get object:::throw->new->ArrayIndexOutOfBoundsException
ArrayData.UntouchedArrayData#has(int)::: untouched array data has:::return
ArrayData.UntouchedArrayData#pop()::: untouched array data pop:::return
ArrayData.UntouchedArrayData#push(boolean, Object)::: untouched array data push:::return->toRealArrayData->push
ArrayData.UntouchedArrayData#slice(long, long)::: untouched array data slice:::return
ArrayData.UntouchedArrayData#fastConcat(ContinuousArrayData)::: untouched array data fast concat:::return->otherData->copy
ArrayData.UntouchedArrayData#toString()::: untouched array data to string:::return->getClass->getSimpleName
ArrayData.UntouchedArrayData#getElementGetter(Class, int)::: untouched array data get element getter:::return
ArrayData.UntouchedArrayData#getElementSetter(Class)::: untouched array data get element setter:::return
ArrayData.UntouchedArrayData#getElementType()::: untouched array data get element type:::return
ArrayData.UntouchedArrayData#getBoxedElementType()::: untouched array data get boxed element type:::return
ArrayData#initialArray():::Factory method for unspecified array - start as int:::return->new->IntArrayData
ArrayData#throwUnwarranted(ArrayData, int, int):::Unwarranted thrower:::throw->data->getObject->new->UnwarrantedOptimismException
ArrayData#alignUp(int):::Align an array size up to the nearest array chunk size:::return
ArrayData#allocate(long):::Factory method for unspecified array with given length - start as int array data:::if->return->new->IntArrayData->else->if->return->new->SparseArrayData->else->return->new->IntArrayData->new->DeletedRangeArrayFilter
ArrayData#allocate(Object):::Factory method for unspecified given an array object:::clazz->array->getClass->if->return->new->IntArrayData->else->if->return->new->NumberArrayData->else->return->new->ObjectArrayData
ArrayData#allocate(int[]):::Allocate an ArrayData wrapping a given array:::return->new->IntArrayData
ArrayData#allocate(double[]):::Allocate an ArrayData wrapping a given array:::return->new->NumberArrayData
ArrayData#allocate(Object[]):::Allocate an ArrayData wrapping a given array:::return->new->ObjectArrayData
ArrayData#allocate(ByteBuffer):::Allocate an ArrayData wrapping a given nio ByteBuffer:::return->new->ByteBufferArrayData
ArrayData#freeze(ArrayData):::Apply a freeze filter to an ArrayData.:::return->new->FrozenArrayFilter
ArrayData#seal(ArrayData):::Apply a seal filter to an ArrayData.:::return->new->SealedArrayFilter
ArrayData#preventExtension(ArrayData):::Prevent this array from being extended:::return->new->NonExtensibleArrayFilter
ArrayData#setIsLengthNotWritable(ArrayData):::Prevent this array from having its length reset:::return->new->LengthNotWritableFilter
ArrayData#length():::Return the length of the array data:::return
ArrayData#copy():::Return a copy of the array that can be modified without affecting this instance:::
ArrayData#asObjectArray():::Return a copy of the array data as an Object array.:::
ArrayData#asArrayOfType(Class):::Return a copy of the array data as an array of the specified type.:::return->JSType->asObjectArray->convertArray
ArrayData#setLength(long):::Set the length of the data array:::
ArrayData#increaseLength():::Increase length by 1:::return
ArrayData#decreaseLength():::Decrease length by 1.:::return
ArrayData#shiftLeft(int):::Shift the array data left  TODO: This is used for Array.prototype.shift() which only shifts by 1, so we might consider dropping the offset parameter.:::
ArrayData#shiftRight(int):::Shift the array right:::
ArrayData#ensure(long):::Ensure that the given index exists and won't fail in a subsequent access:::
ArrayData#shrink(long):::Shrink the array to a new length, may or may not retain the inner array:::
ArrayData#set(int, Object, boolean):::Set an object value at a given index:::
ArrayData#set(int, int, boolean):::Set an int value at a given index:::
ArrayData#set(int, double, boolean):::Set an double value at a given index:::
ArrayData#setEmpty(int):::Set an empty value at a given index:::return
ArrayData#setEmpty(long, long):::Set an empty value for a given range:::return
ArrayData#getInt(int):::Get an int value from a given index:::
ArrayData#getOptimisticType():::Returns the optimistic type of this array data:::return
ArrayData#getIntOptimistic(int, int):::Get optimistic int - default is that it's impossible:::throw->getObject->getOptimisticType->new->UnwarrantedOptimismException
ArrayData#getDouble(int):::Get a double value from a given index:::
ArrayData#getDoubleOptimistic(int, int):::Get optimistic double - default is that it's impossible:::throw->getObject->getOptimisticType->new->UnwarrantedOptimismException
ArrayData#getObject(int):::Get an Object value from a given index:::
ArrayData#has(int):::Tests to see if an entry exists (avoids boxing.):::
ArrayData#canDelete(int, boolean):::Returns if element at specific index can be deleted or not.:::return
ArrayData#canDelete(long, boolean):::Returns if element at specific index can be deleted or not.:::return
ArrayData#safeDelete(long, long, boolean):::Delete a range from the array if fromIndex is less than or equal to toIndex and the array supports deletion.:::if->canDelete->return->delete->return
ArrayData#getDescriptor(Global, int):::Returns property descriptor for element at a given index:::return->global->getObject->newDataDescriptor
ArrayData#delete(int):::Delete an array value at the given index, substituting for an undefined:::
ArrayData#delete(long, long):::Delete a given range from this array;:::
ArrayData#convert(Class):::Convert the ArrayData to one with a different element type Currently Arrays are not collapsed to narrower types, just to wider ones:::
ArrayData#push(boolean, Object...):::Push an array of items to the end of the array:::if->return->widest->widestType->newData->convert->pos->foreach->newData->ensure->newData->set->return
ArrayData#push(boolean, Object):::Push an array of items to the end of the array:::return->new->ObjectArr->push
ArrayData#pop():::Pop an element from the end of the array:::
ArrayData#slice(long, long):::Slice out a section of the array and return that subsection as a new array data: [from, to):::
ArrayData#fastSplice(int, int, int):::Fast splice operation:::throw->new->UnsupportedOperationException
ArrayData#widestType(Object...)::: array data widest type:::widest->foreach->if->return->itemClass->item->getClass->if->if->else->if->return->return
ArrayData#computeIteratorKeys():::Return a list of keys in the array for the iterators:::keys->new->ArrayList<>->len->length->for->i->nextIndex->return
ArrayData#indexIterator():::Return an iterator that goes through all indexes of elements in this array:::return->computeIteratorKeys->iterator
ArrayData#nextSize(int):::Exponential growth function for array size when in need of resizing.:::return->alignUp
ArrayData#nextIndex(long):::Return the next valid index from a given one:::return
ArrayData#invoke(MethodHandle, Object)::: array data invoke:::try->return->mh->invoke->catch->throw->throw->new->RuntimeException->finally
ArrayData#findFastCallMethod(Class, CallSiteDescriptor, LinkRequest):::Find a fast call if one exists:::return
ArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest):::Find a fast element getter if one exists:::return
ArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest):::Find a fast element setter if one exists:::return
ArrayFilter#getUnderlying():::Get the underlying ArrayData that this filter wraps:::return
ArrayFilter#setLength(long)::: array filter set length:::super->setLength->underlying->setLength
ArrayFilter#asObjectArray()::: array filter as object array:::return->underlying->asObjectArray
ArrayFilter#asArrayOfType(Class)::: array filter as array of type:::return->underlying->asArrayOfType
ArrayFilter#shiftLeft(int)::: array filter shift left:::underlying->shiftLeft->underlying->length->setLength->return
ArrayFilter#shiftRight(int)::: array filter shift right:::underlying->shiftRight->underlying->length->setLength->return
ArrayFilter#ensure(long)::: array filter ensure:::underlying->ensure->underlying->length->setLength->return
ArrayFilter#shrink(long)::: array filter shrink:::underlying->shrink->underlying->length->setLength->return
ArrayFilter#set(int, Object, boolean)::: array filter set:::underlying->set->underlying->length->setLength->return
ArrayFilter#set(int, int, boolean)::: array filter set:::underlying->set->underlying->length->setLength->return
ArrayFilter#set(int, double, boolean)::: array filter set:::underlying->set->underlying->length->setLength->return
ArrayFilter#setEmpty(int)::: array filter set empty:::underlying->setEmpty->return
ArrayFilter#setEmpty(long, long)::: array filter set empty:::underlying->setEmpty->return
ArrayFilter#getOptimisticType()::: array filter get optimistic type:::return->underlying->getOptimisticType
ArrayFilter#getInt(int)::: array filter get int:::return->underlying->getInt
ArrayFilter#getIntOptimistic(int, int)::: array filter get int optimistic:::return->underlying->getIntOptimistic
ArrayFilter#getDouble(int)::: array filter get double:::return->underlying->getDouble
ArrayFilter#getDoubleOptimistic(int, int)::: array filter get double optimistic:::return->underlying->getDoubleOptimistic
ArrayFilter#getObject(int)::: array filter get object:::return->underlying->getObject
ArrayFilter#has(int)::: array filter has:::return->underlying->has
ArrayFilter#delete(int)::: array filter delete:::underlying->delete->underlying->length->setLength->return
ArrayFilter#delete(long, long)::: array filter delete:::underlying->delete->underlying->length->setLength->return
ArrayFilter#convert(Class)::: array filter convert:::underlying->convert->underlying->length->setLength->return
ArrayFilter#pop()::: array filter pop:::value->underlying->pop->underlying->length->setLength->return
ArrayFilter#nextIndex(long)::: array filter next index:::return->underlying->nextIndex
ArrayFilter#convertUndefinedValue(Class)::: array filter convert undefined value:::return->Bootstrap->getLinkerServices->getTypeConverter->invoke
ArrayIndex#fromString(String):::Fast conversion of non-negative integer string to long.:::value->length->key->length->if->key->charAt->return->for->i->return
ArrayIndex#getArrayIndex(Object):::Returns a valid array index in an int, if the object represents one:::if->return->intValue->getArrayIndex->else->if->return->doubleValue->getArrayIndex->else->if->return->fromString->else->if->return->longValue->getArrayIndex->else->if->return->key->toString->fromString->return
ArrayIndex#getArrayIndex(int):::Returns a valid array index in an int, if key represents one.:::return
ArrayIndex#getArrayIndex(long):::Returns a valid array index in an int, if the long represents one.:::if->return->return
ArrayIndex#getArrayIndex(double):::Return a valid index for this double, if it represents one:::if->JSType->isRepresentableAsInt->return->getArrayIndex->else->if->JSType->isRepresentableAsLong->return->getArrayIndex->return
ArrayIndex#getArrayIndex(String):::Return a valid array index for this string, if it represents one.:::return->fromString
ArrayIndex#isValidArrayIndex(int):::Check whether an index is valid as an array index:::return
ArrayIndex#toLongIndex(int):::Convert an index to a long value:::return->JSType->toUint32
ArrayIndex#toKey(int):::Convert an index to a key string:::return->Long->JSType->toUint32->toString
ArrayLikeIterator#isReverse():::Is this a reverse order iteration?:::return
ArrayLikeIterator#bumpIndex():::Go the the next valid element index of the iterator:::return
ArrayLikeIterator#nextIndex():::Return the next valid element index of the iterator:::return
ArrayLikeIterator#remove()::: array like iterator remove:::throw->new->UnsupportedOperationException
ArrayLikeIterator#getLength():::Get the length of the iteration:::
ArrayLikeIterator#arrayLikeIterator(Object):::ArrayLikeIterator factory:::return->arrayLikeIterator
ArrayLikeIterator#reverseArrayLikeIterator(Object):::ArrayLikeIterator factory (reverse order):::return->reverseArrayLikeIterator
ArrayLikeIterator#arrayLikeIterator(Object, boolean):::ArrayLikeIterator factory:::obj->if->ScriptObject->isArray->return->new->ScriptArrayIterator->JSType->toScriptObject->if->return->new->ScriptObjectIterator->if->return->new->JSObjectIterator->if->return->new->JavaListIterator->if->obj->getClass->isArray->return->new->JavaArrayIterator->return->new->EmptyArrayLikeIterator
ArrayLikeIterator#reverseArrayLikeIterator(Object, boolean):::ArrayLikeIterator factory (reverse order):::obj->if->ScriptObject->isArray->return->new->ReverseScriptArrayIterator->JSType->toScriptObject->if->return->new->ReverseScriptObjectIterator->if->return->new->ReverseJSObjectIterator->if->return->new->ReverseJavaListIterator->if->obj->getClass->isArray->return->new->ReverseJavaArrayIterator->return->new->EmptyArrayLikeIterator
ByteBufferArrayData#getDescriptor(Global, int):::Returns property descriptor for element at a given index:::return->global->getObject->newDataDescriptor
ByteBufferArrayData#copy()::: byte buffer array data copy:::throw->unsupported
ByteBufferArrayData#asObjectArray()::: byte buffer array data as object array:::throw->unsupported
ByteBufferArrayData#setLength(long)::: byte buffer array data set length:::throw->new->UnsupportedOperationException
ByteBufferArrayData#shiftLeft(int)::: byte buffer array data shift left:::throw->unsupported
ByteBufferArrayData#shiftRight(int)::: byte buffer array data shift right:::throw->unsupported
ByteBufferArrayData#ensure(long)::: byte buffer array data ensure:::if->buf->capacity->return->throw->unsupported
ByteBufferArrayData#shrink(long)::: byte buffer array data shrink:::throw->unsupported
ByteBufferArrayData#set(int, Object, boolean)::: byte buffer array data set:::if->buf->byteValue->put->return->throw->ScriptRuntime->safeToString->typeError
ByteBufferArrayData#set(int, int, boolean)::: byte buffer array data set:::buf->put->return
ByteBufferArrayData#set(int, double, boolean)::: byte buffer array data set:::buf->put->return
ByteBufferArrayData#getInt(int)::: byte buffer array data get int:::return->buf->get
ByteBufferArrayData#getDouble(int)::: byte buffer array data get double:::return->buf->get
ByteBufferArrayData#getObject(int)::: byte buffer array data get object:::return->buf->get
ByteBufferArrayData#has(int)::: byte buffer array data has:::return->buf->capacity
ByteBufferArrayData#canDelete(int, boolean)::: byte buffer array data can delete:::return
ByteBufferArrayData#canDelete(long, boolean)::: byte buffer array data can delete:::return
ByteBufferArrayData#delete(int)::: byte buffer array data delete:::throw->unsupported
ByteBufferArrayData#delete(long, long)::: byte buffer array data delete:::throw->unsupported
ByteBufferArrayData#push(boolean, Object...)::: byte buffer array data push:::throw->unsupported
ByteBufferArrayData#pop()::: byte buffer array data pop:::throw->unsupported
ByteBufferArrayData#slice(long, long)::: byte buffer array data slice:::throw->unsupported
ByteBufferArrayData#convert(Class)::: byte buffer array data convert:::throw->unsupported
ByteBufferArrayData#unsupported(String)::: byte buffer array data unsupported:::return->new->UnsupportedOperationException
ContinuousArrayData#hasRoomFor(int):::Check if we can put one more element at the end of this continuous array without reallocating, or if we are overwriting an already allocated element:::return->has->length->ensure
ContinuousArrayData#isEmpty():::Check if an arraydata is empty:::return->length
ContinuousArrayData#getElementGetter(Class, int):::Return element getter for a certain type at a certain program point:::
ContinuousArrayData#getElementSetter(Class):::Return element getter for a certain type at a certain program point:::
ContinuousArrayData#throwHas(int):::Version of has that throws a class cast exception if element does not exist used for relinking:::if->has->throw->new->ClassCastException->return
ContinuousArrayData#copy()::: continuous array data copy:::
ContinuousArrayData#getElementType():::Returns the type used to store an element in this array:::
ContinuousArrayData#getOptimisticType()::: continuous array data get optimistic type:::return->Type->getElementType->typeFor
ContinuousArrayData#getBoxedElementType():::Returns the boxed type of the type used to store an element in this array:::
ContinuousArrayData#widest(ContinuousArrayData):::Get the widest element type of two arrays:::elementType->getElementType->return->Type->otherData->getElementType->widest
ContinuousArrayData#getContinuousElementGetter(MethodHandle, Class, int):::Look up a continuous array element getter:::return->getClass->getContinuousElementGetter
ContinuousArrayData#getContinuousElementSetter(MethodHandle, Class):::Look up a continuous array element setter:::return->getClass->getContinuousElementSetter
ContinuousArrayData#getContinuousElementGetter(Class, MethodHandle, Class, int):::Return element getter for a ContinuousArrayData:::isOptimistic->isValid->fti->getHas->type->returnType->getAccessorTypeIndex->ti->getAccessorTypeIndex->mh->if->if->MH->methodHandle->insertArguments->MH->mh->type->changeReturnType->changeParameterType->asType->if->return->Lookup->filterReturnType->return
ContinuousArrayData#getContinuousElementSetter(Class, MethodHandle, Class):::Return element setter for a ContinuousArrayData:::return->MH->setHas->type->changeParameterType->changeParameterType->asType
ContinuousArrayData#guard(Class, ScriptObject)::: continuous array data guard:::return->sobj->getArray->getClass
ContinuousArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest):::Return a fast linked array getter, or null if we have to dispatch to super class:::callType->desc->getMethodType->indexType->callType->parameterType->returnType->callType->returnType->if->isAssignableFrom->args->request->getArguments->index->if->has->getArray->methodHandle->programPoint->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->getElement->getElementGetter->if->MH->MH->getArray->type->changeReturnType->asType->filterArguments->guard->MH->insertArguments->return->new->GuardedInvocation->return
ContinuousArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest):::Return a fast linked array setter, or null if we have to dispatch to super class:::callType->desc->getMethodType->indexType->callType->parameterType->elementType->callType->parameterType->if->isAssignableFrom->args->request->getArguments->index->if->hasRoomFor->setElement->getElementSetter->if->getArray->methodHandle->MH->getArray->type->getClass->changeReturnType->asType->MH->filterArguments->guard->MH->insertArguments->return->new->GuardedInvocation->return
ContinuousArrayData#fastPush(int):::Specialization - fast push implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPush(long):::Specialization - fast push implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPush(double):::Specialization - fast push implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPush(Object):::Specialization - fast push implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPopInt():::Specialization - fast pop implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPopDouble():::Specialization - fast pop implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastPopObject():::Specialization - fast pop implementation:::throw->String->getClass->valueOf->new->ClassCastException
ContinuousArrayData#fastConcat(ContinuousArrayData):::Specialization - fast concat implementation:::throw->String->getClass->valueOf->String->otherData->getClass->valueOf->new->ClassCastException
DeletedArrayFilter#copy()::: deleted array filter copy:::copy->underlying->copy->new->DeletedArrayFilter->copy->getDeleted->copy->return
DeletedArrayFilter#asObjectArray()::: deleted array filter as object array:::value->super->asObjectArray->for->i->return
DeletedArrayFilter#asArrayOfType(Class)::: deleted array filter as array of type:::value->super->asArrayOfType->undefValue->convertUndefinedValue->l->Array->getLength->for->i->return
DeletedArrayFilter#shiftLeft(int)::: deleted array filter shift left:::super->shiftLeft->deleted->length->shiftLeft->return
DeletedArrayFilter#shiftRight(int)::: deleted array filter shift right:::super->shiftRight->deleted->length->shiftRight->return
DeletedArrayFilter#ensure(long)::: deleted array filter ensure:::if->length->return->new->SparseArrayData->super->ensure->deleted->length->resize->return
DeletedArrayFilter#shrink(long)::: deleted array filter shrink:::super->shrink->deleted->length->resize->return
DeletedArrayFilter#set(int, Object, boolean)::: deleted array filter set:::deleted->ArrayIndex->toLongIndex->clear->return->super->set
DeletedArrayFilter#set(int, int, boolean)::: deleted array filter set:::deleted->ArrayIndex->toLongIndex->clear->return->super->set
DeletedArrayFilter#set(int, double, boolean)::: deleted array filter set:::deleted->ArrayIndex->toLongIndex->clear->return->super->set
DeletedArrayFilter#has(int)::: deleted array filter has:::return->super->has->deleted->ArrayIndex->toLongIndex->isClear
DeletedArrayFilter#delete(int)::: deleted array filter delete:::longIndex->ArrayIndex->toLongIndex->deleted->set->underlying->setEmpty->return
DeletedArrayFilter#delete(long, long)::: deleted array filter delete:::deleted->setRange->underlying->setEmpty->return
DeletedArrayFilter#pop()::: deleted array filter pop:::index->length->if->super->has->isDeleted->deleted->isSet->value->super->pop->return->return->super->pop
DeletedArrayFilter#slice(long, long)::: deleted array filter slice:::newArray->underlying->slice->newFilter->new->DeletedArrayFilter->newFilter->getDeleted->copy->newFilter->getDeleted->newFilter->length->shiftLeft->return
DeletedArrayFilter#getDeleted()::: deleted array filter get deleted:::return
DeletedRangeArrayFilter#maybeSparse(ArrayData, long)::: deleted range array filter maybe sparse:::if->return->return->underlying->length->new->SparseArrayData
DeletedRangeArrayFilter#isEmpty()::: deleted range array filter is empty:::return
DeletedRangeArrayFilter#isDeleted(int)::: deleted range array filter is deleted:::longIndex->ArrayIndex->toLongIndex->return
DeletedRangeArrayFilter#copy()::: deleted range array filter copy:::return->underlying->copy->new->DeletedRangeArrayFilter
DeletedRangeArrayFilter#asObjectArray()::: deleted range array filter as object array:::value->super->asObjectArray->if->end->Math->min->for->i->return
DeletedRangeArrayFilter#asArrayOfType(Class)::: deleted range array filter as array of type:::value->super->asArrayOfType->undefValue->convertUndefinedValue->if->end->Math->min->for->i->return
DeletedRangeArrayFilter#ensure(long)::: deleted range array filter ensure:::if->length->return->new->SparseArrayData->return->super->ensure
DeletedRangeArrayFilter#shiftLeft(int)::: deleted range array filter shift left:::super->shiftLeft->Math->max->Math->max->return->isEmpty->getUnderlying
DeletedRangeArrayFilter#shiftRight(int)::: deleted range array filter shift right:::super->shiftRight->len->length->Math->min->Math->min->return->isEmpty->getUnderlying
DeletedRangeArrayFilter#shrink(long)::: deleted range array filter shrink:::super->shrink->Math->min->Math->min->return->isEmpty->getUnderlying
DeletedRangeArrayFilter#set(int, Object, boolean)::: deleted range array filter set:::longIndex->ArrayIndex->toLongIndex->if->return->super->set->else->if->return->getDeletedArrayFilter->set->if->else->return->isEmpty->getUnderlying->set->super->set
DeletedRangeArrayFilter#set(int, int, boolean)::: deleted range array filter set:::longIndex->ArrayIndex->toLongIndex->if->return->super->set->else->if->return->getDeletedArrayFilter->set->if->else->return->isEmpty->getUnderlying->set->super->set
DeletedRangeArrayFilter#set(int, double, boolean)::: deleted range array filter set:::longIndex->ArrayIndex->toLongIndex->if->return->super->set->else->if->return->getDeletedArrayFilter->set->if->else->return->isEmpty->getUnderlying->set->super->set
DeletedRangeArrayFilter#has(int)::: deleted range array filter has:::return->super->has->isDeleted
DeletedRangeArrayFilter#getDeletedArrayFilter()::: deleted range array filter get deleted array filter:::deleteFilter->getUnderlying->new->DeletedArrayFilter->deleteFilter->delete->return
DeletedRangeArrayFilter#delete(int)::: deleted range array filter delete:::longIndex->ArrayIndex->toLongIndex->underlying->setEmpty->if->else->if->else->if->return->getDeletedArrayFilter->delete->return
DeletedRangeArrayFilter#delete(long, long)::: deleted range array filter delete:::if->return->getDeletedArrayFilter->delete->Math->min->Math->max->underlying->setEmpty->return
DeletedRangeArrayFilter#pop()::: deleted range array filter pop:::index->length->if->super->has->isDeleted->isDeleted->value->super->pop->Math->min->Math->min->return->return->super->pop
DeletedRangeArrayFilter#slice(long, long)::: deleted range array filter slice:::return->underlying->slice->Math->max->Math->max->new->DeletedRangeArrayFilter
EmptyArrayLikeIterator#hasNext()::: empty array like iterator has next:::return
EmptyArrayLikeIterator#next()::: empty array like iterator next:::throw->new->NoSuchElementException
EmptyArrayLikeIterator#getLength()::: empty array like iterator get length:::return
FrozenArrayFilter#copy()::: frozen array filter copy:::return
FrozenArrayFilter#getDescriptor(Global, int)::: frozen array filter get descriptor:::return->global->getObject->newDataDescriptor
FrozenArrayFilter#set(int, int, boolean)::: frozen array filter set:::if->throw->Integer->toString->typeError->return
FrozenArrayFilter#set(int, double, boolean)::: frozen array filter set:::if->throw->Integer->toString->typeError->return
FrozenArrayFilter#set(int, Object, boolean)::: frozen array filter set:::if->throw->Integer->toString->typeError->return
FrozenArrayFilter#push(boolean, Object...)::: frozen array filter push:::return
FrozenArrayFilter#pop()::: frozen array filter pop:::len->underlying->length->return->underlying->getObject
IntArrayData#getElementType()::: int array data get element type:::return
IntArrayData#getBoxedElementType()::: int array data get boxed element type:::return
IntArrayData#getElementWeight()::: int array data get element weight:::return
IntArrayData#widest(ContinuousArrayData)::: int array data widest:::return
IntArrayData#asObjectArray()::: int array data as object array:::return->toObjectArray
IntArrayData#getElem(int)::: int array data get elem:::if->has->return->throw->new->ClassCastException
IntArrayData#setElem(int, int)::: int array data set elem:::if->hasRoomFor->return->throw->new->ClassCastException
IntArrayData#getElementGetter(Class, int)::: int array data get element getter:::return->getContinuousElementGetter
IntArrayData#getElementSetter(Class)::: int array data get element setter:::return->getContinuousElementSetter
IntArrayData#copy()::: int array data copy:::return->array->clone->length->new->IntArrayData
IntArrayData#asArrayOfType(Class)::: int array data as array of type:::if->len->length->return->array->clone->Arrays->copyOf->return->super->asArrayOfType
IntArrayData#toObjectArray(boolean)::: int array data to object array:::len->length->oarray->new->ObjectArr->for->index->return
IntArrayData#toDoubleArray()::: int array data to double array:::len->length->darray->new->doubleArr->for->index->return
IntArrayData#convertToDouble()::: int array data convert to double:::return->toDoubleArray->length->new->NumberArrayData
IntArrayData#convertToObject()::: int array data convert to object:::return->toObjectArray->length->new->ObjectArrayData
IntArrayData#convert(Class)::: int array data convert:::if->return->else->if->return->convertToDouble->else->return->convertToObject
IntArrayData#shiftLeft(int)::: int array data shift left:::if->length->shrink->else->System->arraycopy->Math->length->max->setLength->return
IntArrayData#shiftRight(int)::: int array data shift right:::newData->length->ensure->if->newData->shiftRight->return->System->arraycopy->return
IntArrayData#ensure(long)::: int array data ensure:::if->return->new->SparseArrayData->alen->if->newLength->ArrayData->nextSize->Arrays->copyOf->if->length->setLength->return
IntArrayData#shrink(long)::: int array data shrink:::Arrays->fill->return
IntArrayData#set(int, Object, boolean)::: int array data set:::if->JSType->isRepresentableAsInt->return->JSType->toInt32->set->else->if->return->new->UndefinedArrayFilter->set->newData->value->getClass->convert->return->newData->set
IntArrayData#set(int, int, boolean)::: int array data set:::Math->length->max->setLength->return
IntArrayData#set(int, double, boolean)::: int array data set:::if->JSType->isRepresentableAsInt->Math->length->max->setLength->return->return->convert->set
IntArrayData#getInt(int)::: int array data get int:::return
IntArrayData#getIntOptimistic(int, int)::: int array data get int optimistic:::return
IntArrayData#getDouble(int)::: int array data get double:::return
IntArrayData#getDoubleOptimistic(int, int)::: int array data get double optimistic:::return
IntArrayData#getObject(int)::: int array data get object:::return
IntArrayData#has(int)::: int array data has:::return->length
IntArrayData#delete(int)::: int array data delete:::return->new->DeletedRangeArrayFilter
IntArrayData#delete(long, long)::: int array data delete:::return->new->DeletedRangeArrayFilter
IntArrayData#pop()::: int array data pop:::len->length->if->return->newLength->elem->setLength->return
IntArrayData#slice(long, long)::: int array data slice:::return->Arrays->copyOfRange->length->new->IntArrayData
IntArrayData#fastSplice(int, int, int)::: int array data fast splice:::oldLength->length->newLength->if->throw->new->UnsupportedOperationException->returnValue->Arrays->copyOfRange->new->IntArrayData->if->newArray->if->ArrayData->nextSize->new->intArr->System->arraycopy->else->System->arraycopy->setLength->return
IntArrayData#fastPush(int)::: int array data fast push:::len->length->if->Arrays->nextSize->copyOf->return->increaseLength
IntArrayData#fastPopInt()::: int array data fast pop int:::if->length->throw->new->ClassCastException->newLength->decreaseLength->elem->return
IntArrayData#fastPopDouble()::: int array data fast pop double:::return->fastPopInt
IntArrayData#fastPopObject()::: int array data fast pop object:::return->fastPopInt
IntArrayData#fastConcat(ContinuousArrayData)::: int array data fast concat:::otherLength->otherData->length->thisLength->length->otherArray->newLength->newArray->ArrayData->alignUp->new->intArr->System->arraycopy->System->arraycopy->return->new->IntArrayData
IntArrayData#toString()::: int array data to string:::return->getClass->getSimpleName->Arrays->Arrays->length->copyOf->toString
IteratorAction#applyLoopBegin(ArrayLikeIterator):::An action to be performed once at the start of the apply loop:::
IteratorAction#apply():::Apply action main loop.:::strict->Bootstrap->isStrictCallable->Context->getGlobal->applyLoopBegin->reverse->iter->isReverse->while->iter->hasNext->val->iter->next->iter->nextIndex->try->if->forEach->return->catch->throw->throw->new->RuntimeException->finally->return
IteratorAction#forEach(Object, double):::For each callback:::
JavaArrayIterator#indexInArray():::Is the current index still inside the array:::return
JavaArrayIterator#next()::: java array iterator next:::return->Array->bumpIndex->get
JavaArrayIterator#getLength()::: java array iterator get length:::return
JavaArrayIterator#hasNext()::: java array iterator has next:::return->indexInArray
JavaArrayIterator#remove()::: java array iterator remove:::throw->new->UnsupportedOperationException
JavaListIterator#indexInArray():::Is the current index still inside the array:::return
JavaListIterator#next()::: java list iterator next:::return->list->bumpIndex->get
JavaListIterator#getLength()::: java list iterator get length:::return
JavaListIterator#hasNext()::: java list iterator has next:::return->indexInArray
JavaListIterator#remove()::: java list iterator remove:::list->remove
JSObjectIterator#indexInArray()::: object iterator index in array:::return
JSObjectIterator#getLength()::: object iterator get length:::return
JSObjectIterator#hasNext()::: object iterator has next:::if->return->while->indexInArray->if->obj->hasSlot->break->bumpIndex->return->indexInArray
JSObjectIterator#next()::: object iterator next:::if->indexInArray->return->obj->bumpIndex->getSlot->throw->new->NoSuchElementException
LengthNotWritableFilter#copy()::: length not writable filter copy:::return->underlying->copy->new->TreeMap<>->new->LengthNotWritableFilter
LengthNotWritableFilter#has(int)::: length not writable filter has:::return->super->has->extraElements->containsKey
LengthNotWritableFilter#setLength(long):::Set the length of the data array:::
LengthNotWritableFilter#ensure(long)::: length not writable filter ensure:::return
LengthNotWritableFilter#slice(long, long)::: length not writable filter slice:::return->underlying->slice->extraElements->subMap->new->LengthNotWritableFilter
LengthNotWritableFilter#checkAdd(long, Object)::: length not writable filter check add:::if->length->extraElements->put->return->return
LengthNotWritableFilter#get(long)::: length not writable filter get:::obj->extraElements->get->if->return->return
LengthNotWritableFilter#getInt(int)::: length not writable filter get int:::if->length->return->JSType->get->toInt32->return->underlying->getInt
LengthNotWritableFilter#getIntOptimistic(int, int)::: length not writable filter get int optimistic:::if->length->return->JSType->get->toInt32Optimistic->return->underlying->getIntOptimistic
LengthNotWritableFilter#getDouble(int)::: length not writable filter get double:::if->length->return->JSType->get->toNumber->return->underlying->getDouble
LengthNotWritableFilter#getDoubleOptimistic(int, int)::: length not writable filter get double optimistic:::if->length->return->JSType->get->toNumberOptimistic->return->underlying->getDoubleOptimistic
LengthNotWritableFilter#getObject(int)::: length not writable filter get object:::if->length->return->get->return->underlying->getObject
LengthNotWritableFilter#set(int, Object, boolean)::: length not writable filter set:::if->checkAdd->return->underlying->set->return
LengthNotWritableFilter#set(int, int, boolean)::: length not writable filter set:::if->checkAdd->return->underlying->set->return
LengthNotWritableFilter#set(int, double, boolean)::: length not writable filter set:::if->checkAdd->return->underlying->set->return
LengthNotWritableFilter#delete(int)::: length not writable filter delete:::extraElements->ArrayIndex->toLongIndex->remove->underlying->delete->return
LengthNotWritableFilter#delete(long, long)::: length not writable filter delete:::for->iter->extraElements->keySet->iterator->iter->hasNext->underlying->delete->return
LengthNotWritableFilter#indexIterator()::: length not writable filter index iterator:::keys->computeIteratorKeys->keys->extraElements->keySet->addAll->return->keys->iterator
NonExtensibleArrayFilter#copy()::: non extensible array filter copy:::return->underlying->copy->new->NonExtensibleArrayFilter
NonExtensibleArrayFilter#slice(long, long)::: non extensible array filter slice:::return->underlying->slice->new->NonExtensibleArrayFilter
NonExtensibleArrayFilter#extensionCheck(boolean, int)::: non extensible array filter extension check:::if->return->throw->Global->instance->String->valueOf->ScriptRuntime->safeToString->typeError
NonExtensibleArrayFilter#set(int, Object, boolean)::: non extensible array filter set:::if->has->return->underlying->set->return->extensionCheck
NonExtensibleArrayFilter#set(int, int, boolean)::: non extensible array filter set:::if->has->return->underlying->set->return->extensionCheck
NonExtensibleArrayFilter#set(int, double, boolean)::: non extensible array filter set:::if->has->return->underlying->set->return->extensionCheck
NumberArrayData#getElementType()::: number array data get element type:::return
NumberArrayData#getBoxedElementType()::: number array data get boxed element type:::return
NumberArrayData#getElementWeight()::: number array data get element weight:::return
NumberArrayData#widest(ContinuousArrayData)::: number array data widest:::return
NumberArrayData#copy()::: number array data copy:::return->array->clone->length->new->NumberArrayData
NumberArrayData#asObjectArray()::: number array data as object array:::return->toObjectArray
NumberArrayData#toObjectArray(boolean)::: number array data to object array:::len->length->oarray->new->ObjectArr->for->index->return
NumberArrayData#asArrayOfType(Class)::: number array data as array of type:::if->len->length->return->array->clone->Arrays->copyOf->return->super->asArrayOfType
NumberArrayData#canWiden(Class)::: number array data can widen:::return->TypeUtilities->isWrapperType
NumberArrayData#convert(Class)::: number array data convert:::if->canWiden->len->length->return->toObjectArray->new->ObjectArrayData->return
NumberArrayData#shiftLeft(int)::: number array data shift left:::if->length->shrink->else->System->arraycopy->Math->length->max->setLength->return
NumberArrayData#shiftRight(int)::: number array data shift right:::newData->length->ensure->if->newData->shiftRight->return->System->arraycopy->return
NumberArrayData#ensure(long)::: number array data ensure:::if->return->new->SparseArrayData->alen->if->newLength->ArrayData->nextSize->Arrays->copyOf->if->length->setLength->return
NumberArrayData#shrink(long)::: number array data shrink:::Arrays->fill->return
NumberArrayData#set(int, Object, boolean)::: number array data set:::if->value->getClass->canWiden->return->doubleValue->set->else->if->return->new->UndefinedArrayFilter->set->newData->value->getClass->convert->return->newData->set
NumberArrayData#set(int, int, boolean)::: number array data set:::Math->length->max->setLength->return
NumberArrayData#set(int, double, boolean)::: number array data set:::Math->length->max->setLength->return
NumberArrayData#getElem(int)::: number array data get elem:::if->has->return->throw->new->ClassCastException
NumberArrayData#setElem(int, double)::: number array data set elem:::if->hasRoomFor->return->throw->new->ClassCastException
NumberArrayData#getElementGetter(Class, int)::: number array data get element getter:::if->return->return->getContinuousElementGetter
NumberArrayData#getElementSetter(Class)::: number array data get element setter:::return->elementType->isPrimitive->MH->SET_ELEM->type->changeParameterType->asType->getContinuousElementSetter
NumberArrayData#getInt(int)::: number array data get int:::return->JSType->toInt32
NumberArrayData#getDouble(int)::: number array data get double:::return
NumberArrayData#getDoubleOptimistic(int, int)::: number array data get double optimistic:::return
NumberArrayData#getObject(int)::: number array data get object:::return
NumberArrayData#has(int)::: number array data has:::return->length
NumberArrayData#delete(int)::: number array data delete:::return->new->DeletedRangeArrayFilter
NumberArrayData#delete(long, long)::: number array data delete:::return->new->DeletedRangeArrayFilter
NumberArrayData#pop()::: number array data pop:::len->length->if->return->newLength->elem->setLength->return
NumberArrayData#slice(long, long)::: number array data slice:::start->length->newLength->return->Arrays->copyOfRange->new->NumberArrayData
NumberArrayData#fastSplice(int, int, int)::: number array data fast splice:::oldLength->length->newLength->if->throw->new->UnsupportedOperationException->returnValue->Arrays->copyOfRange->new->NumberArrayData->if->newArray->if->ArrayData->nextSize->new->doubleArr->System->arraycopy->else->System->arraycopy->setLength->return
NumberArrayData#fastPush(int)::: number array data fast push:::return->fastPush
NumberArrayData#fastPush(long)::: number array data fast push:::return->fastPush
NumberArrayData#fastPush(double)::: number array data fast push:::len->length->if->Arrays->nextSize->copyOf->return->increaseLength
NumberArrayData#fastPopDouble()::: number array data fast pop double:::if->length->throw->new->ClassCastException->newLength->decreaseLength->elem->return
NumberArrayData#fastPopObject()::: number array data fast pop object:::return->fastPopDouble
NumberArrayData#fastConcat(ContinuousArrayData)::: number array data fast concat:::otherLength->otherData->length->thisLength->length->otherArray->newLength->newArray->ArrayData->alignUp->new->doubleArr->System->arraycopy->System->arraycopy->return->new->NumberArrayData
NumberArrayData#toString()::: number array data to string:::return->getClass->getSimpleName->Arrays->Arrays->length->copyOf->toString
ObjectArrayData#getElementType()::: object array data get element type:::return
ObjectArrayData#getBoxedElementType()::: object array data get boxed element type:::return->getElementType
ObjectArrayData#getElementWeight()::: object array data get element weight:::return
ObjectArrayData#widest(ContinuousArrayData)::: object array data widest:::return
ObjectArrayData#copy()::: object array data copy:::return->array->clone->length->new->ObjectArrayData
ObjectArrayData#asObjectArray()::: object array data as object array:::return->length->array->clone->asObjectArrayCopy
ObjectArrayData#asObjectArrayCopy()::: object array data as object array copy:::len->length->copy->new->ObjectArr->System->arraycopy->return
ObjectArrayData#convert(Class)::: object array data convert:::return
ObjectArrayData#shiftLeft(int)::: object array data shift left:::if->length->shrink->else->System->arraycopy->Math->length->max->setLength->return
ObjectArrayData#shiftRight(int)::: object array data shift right:::newData->length->ensure->if->newData->shiftRight->return->System->arraycopy->return
ObjectArrayData#ensure(long)::: object array data ensure:::if->return->new->SparseArrayData->alen->if->newLength->ArrayData->nextSize->Arrays->copyOf->if->length->setLength->return
ObjectArrayData#shrink(long)::: object array data shrink:::Arrays->fill->return
ObjectArrayData#set(int, Object, boolean)::: object array data set:::Math->length->max->setLength->return
ObjectArrayData#set(int, int, boolean)::: object array data set:::Math->length->max->setLength->return
ObjectArrayData#set(int, double, boolean)::: object array data set:::Math->length->max->setLength->return
ObjectArrayData#setEmpty(int)::: object array data set empty:::return
ObjectArrayData#setEmpty(long, long)::: object array data set empty:::Arrays->Math->max->Math->min->fill->return
ObjectArrayData#getElem(int)::: object array data get elem:::if->has->return->throw->new->ClassCastException
ObjectArrayData#setElem(int, Object)::: object array data set elem:::if->hasRoomFor->return->throw->new->ClassCastException
ObjectArrayData#getElementGetter(Class, int)::: object array data get element getter:::if->returnType->isPrimitive->return->return->getContinuousElementGetter
ObjectArrayData#getElementSetter(Class)::: object array data get element setter:::return->getContinuousElementSetter
ObjectArrayData#getInt(int)::: object array data get int:::return->JSType->toInt32
ObjectArrayData#getDouble(int)::: object array data get double:::return->JSType->toNumber
ObjectArrayData#getObject(int)::: object array data get object:::return
ObjectArrayData#has(int)::: object array data has:::return->length
ObjectArrayData#delete(int)::: object array data delete:::setEmpty->return->new->DeletedRangeArrayFilter
ObjectArrayData#delete(long, long)::: object array data delete:::setEmpty->return->new->DeletedRangeArrayFilter
ObjectArrayData#fastPush(int)::: object array data fast push:::return->fastPush
ObjectArrayData#fastPush(long)::: object array data fast push:::return->fastPush
ObjectArrayData#fastPush(double)::: object array data fast push:::return->fastPush
ObjectArrayData#fastPush(Object)::: object array data fast push:::len->length->if->Arrays->nextSize->copyOf->return->increaseLength
ObjectArrayData#fastPopObject()::: object array data fast pop object:::if->length->return->newLength->decreaseLength->elem->return
ObjectArrayData#pop()::: object array data pop:::if->length->return->newLength->length->elem->setEmpty->setLength->return
ObjectArrayData#slice(long, long)::: object array data slice:::start->length->newLength->return->Arrays->copyOfRange->new->ObjectArrayData
ObjectArrayData#push(boolean, Object)::: object array data push:::len->length->newData->ensure->if->return->return->newData->set
ObjectArrayData#fastSplice(int, int, int)::: object array data fast splice:::oldLength->length->newLength->if->throw->new->UnsupportedOperationException->returnValue->Arrays->copyOfRange->new->ObjectArrayData->if->newArray->if->ArrayData->nextSize->new->ObjectArr->System->arraycopy->else->System->arraycopy->setLength->return
ObjectArrayData#fastConcat(ContinuousArrayData)::: object array data fast concat:::otherLength->otherData->length->thisLength->length->otherArray->newLength->newArray->ArrayData->alignUp->new->ObjectArr->System->arraycopy->System->arraycopy->return->new->ObjectArrayData
ObjectArrayData#toString()::: object array data to string:::return->getClass->getSimpleName->Arrays->Arrays->length->copyOf->toString
ReverseJavaArrayIterator#isReverse()::: reverse java array iterator is reverse:::return
ReverseJavaArrayIterator#indexInArray()::: reverse java array iterator index in array:::return
ReverseJavaArrayIterator#bumpIndex()::: reverse java array iterator bump index:::return
ReverseJavaListIterator#isReverse()::: reverse java list iterator is reverse:::return
ReverseJavaListIterator#indexInArray()::: reverse java list iterator index in array:::return
ReverseJavaListIterator#bumpIndex()::: reverse java list iterator bump index:::return
ReverseJSObjectIterator#isReverse()::: reverse object iterator is reverse:::return
ReverseJSObjectIterator#indexInArray()::: reverse object iterator index in array:::return
ReverseJSObjectIterator#bumpIndex()::: reverse object iterator bump index:::return
ReverseScriptArrayIterator#isReverse()::: reverse script array iterator is reverse:::return
ReverseScriptArrayIterator#indexInArray()::: reverse script array iterator index in array:::return
ReverseScriptArrayIterator#bumpIndex()::: reverse script array iterator bump index:::return
ReverseScriptObjectIterator#isReverse()::: reverse script object iterator is reverse:::return
ReverseScriptObjectIterator#indexInArray()::: reverse script object iterator index in array:::return
ReverseScriptObjectIterator#bumpIndex()::: reverse script object iterator bump index:::return
ScriptArrayIterator#indexInArray():::Is the current index still inside the array:::return
ScriptArrayIterator#next()::: script array iterator next:::return->array->bumpIndex->get
ScriptArrayIterator#getLength()::: script array iterator get length:::return
ScriptArrayIterator#hasNext()::: script array iterator has next:::if->while->indexInArray->if->array->has->break->bumpIndex->return->indexInArray
ScriptArrayIterator#remove()::: script array iterator remove:::array->delete
ScriptObjectIterator#indexInArray()::: script object iterator index in array:::return
ScriptObjectIterator#getLength()::: script object iterator get length:::return
ScriptObjectIterator#hasNext()::: script object iterator has next:::if->return->while->indexInArray->if->obj->has->break->bumpIndex->return->indexInArray
ScriptObjectIterator#next()::: script object iterator next:::if->indexInArray->return->obj->bumpIndex->get->throw->new->NoSuchElementException
SealedArrayFilter#copy()::: sealed array filter copy:::return->underlying->copy->new->SealedArrayFilter
SealedArrayFilter#slice(long, long)::: sealed array filter slice:::return->getUnderlying->slice
SealedArrayFilter#canDelete(int, boolean)::: sealed array filter can delete:::return->ArrayIndex->toLongIndex->canDelete
SealedArrayFilter#canDelete(long, boolean)::: sealed array filter can delete:::if->throw->Long->toString->typeError->return
SealedArrayFilter#getDescriptor(Global, int)::: sealed array filter get descriptor:::return->global->getObject->newDataDescriptor
SparseArrayData#copy()::: sparse array data copy:::return->underlying->copy->length->new->TreeMap<>->new->SparseArrayData
SparseArrayData#asObjectArray()::: sparse array data as object array:::len->Math->length->min->underlyingLength->Math->underlying->length->min->objArray->new->ObjectArr->for->i->Arrays->fill->foreach->sparseMap->entrySet->key->entry->getKey->if->entry->getValue->else->break->return
SparseArrayData#shiftLeft(int)::: sparse array data shift left:::underlying->shiftLeft->newSparseMap->new->TreeMap<>->foreach->sparseMap->entrySet->newIndex->entry->getKey->if->if->oldLength->underlying->length->underlying->ensure->entry->getValue->set->safeDelete->else->newSparseMap->entry->getValue->put->Math->length->max->setLength->return->sparseMap->isEmpty
SparseArrayData#shiftRight(int)::: sparse array data shift right:::newSparseMap->new->TreeMap<>->len->underlying->length->if->tempLength->Math->max->for->i->underlying->shrink->underlying->setLength->underlying->shiftRight->foreach->sparseMap->entrySet->newIndex->entry->getKey->newSparseMap->entry->getValue->put->length->setLength->return
SparseArrayData#ensure(long)::: sparse array data ensure:::if->length->setLength->return
SparseArrayData#shrink(long)::: sparse array data shrink:::if->underlying->length->underlying->shrink->underlying->setLength->sparseMap->clear->setLength->sparseMap->subMap->clear->setLength->return
SparseArrayData#set(int, Object, boolean)::: sparse array data set:::if->oldLength->underlying->length->underlying->ensure->set->safeDelete->Math->underlying->length->length->max->setLength->else->longIndex->indexToKey->sparseMap->put->Math->length->max->setLength->return
SparseArrayData#set(int, int, boolean)::: sparse array data set:::if->oldLength->underlying->length->underlying->ensure->set->safeDelete->Math->underlying->length->length->max->setLength->else->longIndex->indexToKey->sparseMap->put->Math->length->max->setLength->return
SparseArrayData#set(int, double, boolean)::: sparse array data set:::if->oldLength->underlying->length->underlying->ensure->set->safeDelete->Math->underlying->length->length->max->setLength->else->longIndex->indexToKey->sparseMap->put->Math->length->max->setLength->return
SparseArrayData#setEmpty(int)::: sparse array data set empty:::underlying->setEmpty->return
SparseArrayData#setEmpty(long, long)::: sparse array data set empty:::underlying->setEmpty->return
SparseArrayData#getOptimisticType()::: sparse array data get optimistic type:::return->underlying->getOptimisticType
SparseArrayData#getInt(int)::: sparse array data get int:::if->return->underlying->getInt->return->JSType->sparseMap->indexToKey->get->toInt32
SparseArrayData#getIntOptimistic(int, int)::: sparse array data get int optimistic:::if->return->underlying->getIntOptimistic->return->JSType->sparseMap->indexToKey->get->toInt32Optimistic
SparseArrayData#getDouble(int)::: sparse array data get double:::if->return->underlying->getDouble->return->JSType->sparseMap->indexToKey->get->toNumber
SparseArrayData#getDoubleOptimistic(int, int)::: sparse array data get double optimistic:::if->return->underlying->getDouble->return->JSType->sparseMap->indexToKey->get->toNumberOptimistic
SparseArrayData#getObject(int)::: sparse array data get object:::if->return->underlying->getObject->key->indexToKey->if->sparseMap->containsKey->return->sparseMap->get->return
SparseArrayData#has(int)::: sparse array data has:::if->return->underlying->length->underlying->has->return->sparseMap->indexToKey->containsKey
SparseArrayData#delete(int)::: sparse array data delete:::if->if->underlying->length->underlying->delete->else->sparseMap->indexToKey->remove->return
SparseArrayData#delete(long, long)::: sparse array data delete:::if->underlying->length->underlying->Math->underlying->length->min->delete->if->sparseMap->subMap->clear->return
SparseArrayData#indexToKey(int)::: sparse array data index to key:::return->ArrayIndex->toLongIndex
SparseArrayData#convert(Class)::: sparse array data convert:::underlying->convert->return
SparseArrayData#pop()::: sparse array data pop:::len->length->underlyingLen->underlying->length->if->return->if->result->underlying->pop->underlying->length->setLength->return->setLength->key->return->sparseMap->containsKey->sparseMap->remove
SparseArrayData#slice(long, long)::: sparse array data slice:::start->length->newLength->underlyingLength->underlying->length->if->if->return->underlying->slice->return->underlying->slice->ensure->delete->sliced->sliced->ensure->for->i->nextIndex->return
SparseArrayData#nextIndex(long)::: sparse array data next index:::if->underlying->length->return->underlying->nextIndex->nextKey->sparseMap->higherKey->if->return->return->length
TypedArrayData#getElementLength():::Length in number of elements:::return->length
TypedArrayData#isUnsigned():::Is this an unsigned array data?:::return
TypedArrayData#isClamped():::Is this a clamped array data?:::return
TypedArrayData#canDelete(int, boolean)::: typed array data can delete:::return
TypedArrayData#canDelete(long, boolean)::: typed array data can delete:::return
TypedArrayData#copy()::: typed array data copy:::throw->new->UnsupportedOperationException
TypedArrayData#asObjectArray()::: typed array data as object array:::throw->new->UnsupportedOperationException
TypedArrayData#shiftLeft(int)::: typed array data shift left:::throw->new->UnsupportedOperationException
TypedArrayData#shiftRight(int)::: typed array data shift right:::throw->new->UnsupportedOperationException
TypedArrayData#ensure(long)::: typed array data ensure:::return
TypedArrayData#shrink(long)::: typed array data shrink:::throw->new->UnsupportedOperationException
TypedArrayData#has(int)::: typed array data has:::return->length
TypedArrayData#delete(int)::: typed array data delete:::return
TypedArrayData#delete(long, long)::: typed array data delete:::return
TypedArrayData#convert(Class)::: typed array data convert:::throw->new->UnsupportedOperationException
TypedArrayData#pop()::: typed array data pop:::throw->new->UnsupportedOperationException
TypedArrayData#slice(long, long)::: typed array data slice:::throw->new->UnsupportedOperationException
TypedArrayData#getGetElem():::Element getter method handle:::
TypedArrayData#getSetElem():::Element setter method handle:::
TypedArrayData#getElementGetter(Class, int)::: typed array data get element getter:::getter->getClass->getGetElem->getContinuousElementGetter->if->return->Lookup->filterReturnType->return
TypedArrayData#getElementSetter(Class)::: typed array data get element setter:::return->getClass->Lookup->getSetElem->filterArgumentType->getContinuousElementSetter
TypedArrayData#getContinuousElementSetter(Class, MethodHandle, Class)::: typed array data get continuous element setter:::mh->Lookup->filterArgumentType->return->MH->mh->type->changeParameterType->asType
TypedArrayData#findFastGetIndexMethod(Class, CallSiteDescriptor, LinkRequest)::: typed array data find fast get index method:::inv->super->findFastGetIndexMethod->if->return->return
TypedArrayData#findFastSetIndexMethod(Class, CallSiteDescriptor, LinkRequest)::: typed array data find fast set index method:::inv->super->findFastSetIndexMethod->if->return->return
UndefinedArrayFilter#copy()::: undefined array filter copy:::copy->underlying->copy->new->UndefinedArrayFilter->copy->getUndefined->copy->return
UndefinedArrayFilter#asObjectArray()::: undefined array filter as object array:::value->super->asObjectArray->for->i->return
UndefinedArrayFilter#asArrayOfType(Class)::: undefined array filter as array of type:::value->super->asArrayOfType->undefValue->convertUndefinedValue->l->Array->getLength->for->i->return
UndefinedArrayFilter#shiftLeft(int)::: undefined array filter shift left:::super->shiftLeft->undefined->length->shiftLeft->return
UndefinedArrayFilter#shiftRight(int)::: undefined array filter shift right:::super->shiftRight->undefined->length->shiftRight->return
UndefinedArrayFilter#ensure(long)::: undefined array filter ensure:::if->length->return->new->SparseArrayData->super->ensure->undefined->length->resize->return
UndefinedArrayFilter#shrink(long)::: undefined array filter shrink:::super->shrink->undefined->length->resize->return
UndefinedArrayFilter#set(int, Object, boolean)::: undefined array filter set:::undefined->clear->if->undefined->set->return->return->super->set
UndefinedArrayFilter#set(int, int, boolean)::: undefined array filter set:::undefined->clear->return->super->set
UndefinedArrayFilter#set(int, double, boolean)::: undefined array filter set:::undefined->clear->return->super->set
UndefinedArrayFilter#getInt(int)::: undefined array filter get int:::if->undefined->isSet->return->return->super->getInt
UndefinedArrayFilter#getIntOptimistic(int, int)::: undefined array filter get int optimistic:::if->undefined->isSet->throw->new->UnwarrantedOptimismException->return->super->getIntOptimistic
UndefinedArrayFilter#getDouble(int)::: undefined array filter get double:::if->undefined->isSet->return->return->super->getDouble
UndefinedArrayFilter#getDoubleOptimistic(int, int)::: undefined array filter get double optimistic:::if->undefined->isSet->throw->new->UnwarrantedOptimismException->return->super->getDoubleOptimistic
UndefinedArrayFilter#getObject(int)::: undefined array filter get object:::if->undefined->isSet->return->return->super->getObject
UndefinedArrayFilter#delete(int)::: undefined array filter delete:::undefined->clear->return->super->delete
UndefinedArrayFilter#pop()::: undefined array filter pop:::index->length->if->super->has->isUndefined->undefined->isSet->value->super->pop->return->return->super->pop
UndefinedArrayFilter#slice(long, long)::: undefined array filter slice:::newArray->underlying->slice->newFilter->new->UndefinedArrayFilter->newFilter->getUndefined->copy->newFilter->getUndefined->newFilter->length->shiftLeft->return
UndefinedArrayFilter#getUndefined()::: undefined array filter get undefined:::return

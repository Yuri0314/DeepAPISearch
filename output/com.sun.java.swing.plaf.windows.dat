WindowsBorders#getProgressBarBorder():::Returns a  border instance for a Windows Progress Bar:::table->UIManager->getLookAndFeelDefaults->progressBarBorder->table->getColor->table->getColor->new->WindowsBorders.ProgressBarBorder->new->EmptyBorder->new->BorderUIResource.CompoundBorderUIResource->return
WindowsBorders#getToolBarBorder():::Returns a border instance for a Windows ToolBar:::table->UIManager->getLookAndFeelDefaults->toolBarBorder->table->getColor->table->getColor->new->WindowsBorders.ToolBarBorder->return
WindowsBorders#getFocusCellHighlightBorder():::Returns an new instance of a border used to indicate which cell item has focus.:::return->new->ComplementDashedBorder
WindowsButtonUI#paintText(Graphics, AbstractButton, Rectangle, String):::Overridden method to render the text without the mnemonic:::WindowsGraphicsUtils->getTextShiftOffset->paintText
WindowsCheckBoxMenuItemUI#paintText(Graphics, JMenuItem, Rectangle, String):::Method which renders the text of the current menu item.:::if->WindowsMenuItemUI->isVistaPainting->WindowsMenuItemUI->paintText->return->model->menuItem->getModel->oldColor->g->getColor->if->model->isEnabled->model->isArmed->g->setColor->WindowsGraphicsUtils->paintText->g->setColor
WindowsComboBoxUI#paintCurrentValue(Graphics, Rectangle, boolean):::If necessary paints the currently selected item.:::xp->XPStyle->getXP->if->else->if->comboBox->isEditable->xp->isSkinDefined->renderer->comboBox->getRenderer->c->if->isPopupVisible->renderer->comboBox->getSelectedItem->getListCellRendererComponent->else->renderer->comboBox->getSelectedItem->getListCellRendererComponent->c->comboBox->getFont->setFont->if->comboBox->isEnabled->c->comboBox->getForeground->setForeground->c->comboBox->getBackground->setBackground->else->c->DefaultLookup->getColor->setForeground->c->DefaultLookup->getColor->setBackground->shouldValidate->if->currentValuePane->paintComponent->else->super->paintCurrentValue
WindowsComboBoxUI#createLayoutManager():::Creates a layout manager for managing the components which make up the combo box.:::return->new->BasicComboBoxUI.ComboBoxLayoutManager
WindowsComboBoxUI#createEditor():::Creates the default editor that will be used in editable combo boxes:::return->new->WindowsComboBoxEditor
WindowsComboBoxUI#createArrowButton():::Creates an button which will be used as the control to show or hide the popup portion of the combo box.:::xp->XPStyle->getXP->if->return->new->XPComboBoxButton->else->return->super->createArrowButton
WindowsDesktopIconUI#getMinimumSize(JComponent):::Windows desktop icons are restricted to a width of 160 pixels by default:::dim->super->getMinimumSize->return
WindowsDesktopProperty#updateAllUIs():::Updates the UIs of all the known Frames.:::uiClass->UIManager->getLookAndFeel->getClass->if->uiClass->getPackage->getPackage->equals->XPStyle->invalidateStyle->super->updateAllUIs
WindowsEditorPaneUI#createUI(JComponent):::Creates a UI for a JEditorPane.:::return->new->WindowsEditorPaneUI
WindowsEditorPaneUI#createCaret():::Creates the object to use for a caret:::return->new->WindowsTextUI.WindowsCaret
WindowsFileChooserUI#createListSelectionListener(JFileChooser):::Creates a selection listener for the list of files and directories.:::return->super->createListSelectionListener
WindowsFileChooserUI#getPreferredSize(JComponent):::Returns the preferred size of the specified JFileChooser:::prefWidth->d->c->getLayout->preferredLayoutSize->if->return->new->Dimension->else->return->new->Dimension
WindowsFileChooserUI#getMinimumSize(JComponent):::Returns the minimum size of the JFileChooser.:::return->new->Dimension
WindowsFileChooserUI#getMaximumSize(JComponent):::Returns the maximum size of the JFileChooser.:::return->new->Dimension
WindowsFileChooserUI#setDirectorySelected(boolean):::Property to remember whether a directory is currently selected in the UI:::super->setDirectorySelected->chooser->getFileChooser->if->approveButton->setText->approveButton->setToolTipText->approveButton->setMnemonic->else->approveButton->getApproveButtonText->setText->approveButton->getApproveButtonToolTipText->setToolTipText->approveButton->getApproveButtonMnemonic->setMnemonic
WindowsGraphicsUtils#paintText(Graphics, AbstractButton, Rectangle, String, int):::Renders a text String in Windows without the mnemonic:::fm->SwingUtilities2->getFontMetrics->mnemIndex->b->getDisplayedMnemonicIndex->if->WindowsLookAndFeel->isMnemonicHidden->xp->XPStyle->getXP->if->fm->getAscent->paintXPText->else->fm->getAscent->paintClassicText
WindowsLookAndFeel#initClassDefaults(UIDefaults):::Initialize the uiClassID to BasicComponentUI mapping:::super->initClassDefaults->windowsPackageName->uiDefaults->table->putDefaults
WindowsLookAndFeel#initSystemColorDefaults(UIDefaults):::Load the SystemColors into the defaults table:::defaultSystemColors->isNativeLookAndFeel->loadSystemColors
WindowsLookAndFeel#setMnemonicHidden(boolean):::Sets the state of the hide mnemonic flag:::if->UIManager->getBoolean->else
WindowsLookAndFeel#isMnemonicHidden():::Gets the state of the hide mnemonic flag:::if->UIManager->getBoolean->return
WindowsLookAndFeel#isClassicWindows():::Gets the state of the flag which indicates if the old Windows look and feel should be rendered:::return
WindowsLookAndFeel#provideErrorFeedback(Component)::: Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus:::super->provideErrorFeedback
WindowsLookAndFeel#createAudioAction(Object):::Returns an Action:::if->audioKey->audioValue->UIManager->get->return->new->AudioAction->else->return
WindowsMenuBarUI#isActive(JComponent):::Checks if component belongs to an active window.:::rootPane->c->getRootPane->if->component->rootPane->getParent->if->return->isActive->return
WindowsMenuItemUI#paintText(Graphics, JMenuItem, Rectangle, String):::Method which renders the text of the current menu item.:::if->WindowsMenuItemUI->isVistaPainting->WindowsMenuItemUI->paintText->return->model->menuItem->getModel->oldColor->g->getColor->if->model->isEnabled->model->isArmed->model->isSelected->g->setColor->WindowsGraphicsUtils->paintText->g->setColor
WindowsMenuUI#paintBackground(Graphics, JMenuItem, Color):::Draws the background of the menu.:::if->WindowsMenuItemUI->isVistaPainting->WindowsMenuItemUI->paintBackground->return->menu->model->menu->getModel->if->WindowsLookAndFeel->isClassicWindows->menu->isTopLevelMenu->XPStyle->getXP->model->isArmed->model->isSelected->super->paintBackground->return->oldColor->g->getColor->menuWidth->menu->getWidth->menuHeight->menu->getHeight->table->UIManager->getLookAndFeelDefaults->highlight->table->getColor->shadow->table->getColor->g->menu->getBackground->setColor->g->fillRect->if->menu->isOpaque->if->model->isArmed->model->isSelected->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->if->model->isRollover->model->isEnabled->otherMenuSelected->menus->menu->getParent->getSubElements->for->i->if->if->XPStyle->getXP->g->setColor->g->fillRect->else->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor
WindowsMenuUI#paintText(Graphics, JMenuItem, Rectangle, String):::Method which renders the text of the current menu item.:::if->WindowsMenuItemUI->isVistaPainting->WindowsMenuItemUI->paintText->return->menu->model->menuItem->getModel->oldColor->g->getColor->paintRollover->model->isRollover->if->menu->isTopLevelMenu->menus->menu->getParent->getSubElements->for->i->if->model->isSelected->WindowsLookAndFeel->isClassicWindows->menu->isTopLevelMenu->XPStyle->getXP->model->isArmed->model->isSelected->g->setColor->WindowsGraphicsUtils->paintText->g->setColor
WindowsPasswordFieldUI#createUI(JComponent):::Creates a UI for a JPasswordField:::return->new->WindowsPasswordFieldUI
WindowsPasswordFieldUI#createCaret():::Creates the object to use for a caret:::return->new->WindowsTextUI.WindowsCaret
WindowsPopupMenuUI#getPopup(JPopupMenu, int, int):::Returns the Popup that will be responsible for displaying the JPopupMenu.:::popupFactory->PopupFactory->getSharedInstance->return->popupFactory->popupMenu->getInvoker->getPopup
WindowsPopupMenuUI#getTextOffset(JComponent):::Returns offset for the text:::rv->maxTextOffset->c->getClientProperty->if->menuItemOffset->component->c->getComponent->if->component->getX->return
WindowsPopupMenuUI#getSpanBeforeGutter():::Returns span before gutter:::return
WindowsPopupMenuUI#getSpanAfterGutter():::Returns span after gutter:::return
WindowsPopupMenuUI#getGutterWidth():::Returns gutter width:::rv->xp->XPStyle->getXP->if->skin->xp->getSkin->skin->getWidth->return
WindowsProgressBarUI#getBaseline(JComponent, int, int):::Returns the baseline.:::baseline->super->getBaseline->if->XPStyle->getXP->progressBar->isStringPainted->progressBar->getOrientation->metrics->progressBar->progressBar->getFont->getFontMetrics->y->progressBar->getInsets->if->progressBar->isIndeterminate->else->metrics->getAscent->metrics->getLeading->metrics->getDescent->return
WindowsRadioButtonMenuItemUI#paintText(Graphics, JMenuItem, Rectangle, String):::Method which renders the text of the current menu item.:::if->WindowsMenuItemUI->isVistaPainting->WindowsMenuItemUI->paintText->return->model->menuItem->getModel->oldColor->g->getColor->if->model->isEnabled->model->isArmed->g->setColor->WindowsGraphicsUtils->paintText->g->setColor
WindowsRadioButtonUI#paintText(Graphics, AbstractButton, Rectangle, String):::Overridden method to render the text without the mnemonic:::WindowsGraphicsUtils->getTextShiftOffset->paintText
WindowsScrollBarUI#createUI(JComponent):::Creates a UI for a JScrollBar.:::return->new->WindowsScrollBarUI
WindowsSliderUI#createTrackListener(JSlider):::Overrides to return a private track listener subclass which handles the HOT, PRESSED, and FOCUSED states.:::return->new->WindowsTrackListener
WindowsSplitPaneDivider#paint(Graphics):::Paints the divider.:::bgColor->splitPane->hasFocus->UIManager->getColor->getBackground->size->getSize->if->g->setColor->g->fillRect->super->paint
WindowsSplitPaneUI#createUI(JComponent):::Creates a new WindowsSplitPaneUI instance:::return->new->WindowsSplitPaneUI
WindowsSplitPaneUI#createDefaultDivider():::Creates the default divider.:::return->new->WindowsSplitPaneDivider
WindowsTextAreaUI#createCaret():::Creates the object to use for a caret:::return->new->WindowsTextUI.WindowsCaret
WindowsTextAreaUI#createUI(JComponent):::Creates a UI for a JTextField.:::return->new->WindowsTextAreaUI
WindowsTextFieldUI#createUI(JComponent):::Creates a UI for a JTextField.:::return->new->WindowsTextFieldUI
WindowsTextFieldUI#paintBackground(Graphics):::Paints a background for the view:::super->paintBackground
WindowsTextFieldUI#createCaret():::Creates the caret for a field.:::return->new->WindowsFieldCaret
WindowsTextFieldUI.WindowsFieldCaret#adjustVisibility(Rectangle):::Adjusts the visibility of the caret according to the windows feel which seems to be to move the caret out into the field by about a quarter of a field length if not visible.:::SwingUtilities->new->SafeScroller->invokeLater
WindowsTextFieldUI.WindowsFieldCaret#getSelectionPainter():::Gets the painter for the Highlighter.:::return
WindowsTextPaneUI#createUI(JComponent):::Creates a UI for a JTextPane.:::return->new->WindowsTextPaneUI
WindowsTextPaneUI#createCaret():::Creates the object to use for a caret:::return->new->WindowsTextUI.WindowsCaret
WindowsTextUI#createCaret():::Creates the object to use for a caret:::return->new->WindowsCaret
WindowsTextUI.WindowsCaret#getSelectionPainter():::Gets the painter for the Highlighter.:::return
WindowsTextUI.WindowsHighlightPainter#paint(Graphics, int, int, Shape, JTextComponent):::Paints a highlight.:::alloc->bounds->getBounds->try->mapper->c->getUI->p0->mapper->modelToView->p1->mapper->modelToView->color->getColor->if->g->c->getSelectionColor->setColor->else->g->setColor->firstIsDot->secondIsDot->if->c->isEditable->dot->c->getCaretPosition->if->r->p0->union->if->if->else->if->g->fillRect->else->p0ToMarginWidth->if->g->fillRect->if->g->fillRect->if->g->fillRect->catch->finally
WindowsTextUI.WindowsHighlightPainter#paintLayer(Graphics, int, int, Shape, JTextComponent, View):::Paints a portion of a highlight.:::color->getColor->if->g->c->getSelectionColor->setColor->else->g->setColor->firstIsDot->secondIsDot->if->c->isEditable->dot->c->getCaretPosition->if->view->getStartOffset->view->getEndOffset->alloc->if->else->bounds->getBounds->if->g->fillRect->else->if->g->fillRect->else->g->fillRect->return->else->try->shape->view->modelToView->r->shape->getBounds->if->g->fillRect->else->if->g->fillRect->else->g->fillRect->return->catch->finally->return
WindowsToggleButtonUI#paintText(Graphics, AbstractButton, Rectangle, String):::Overridden method to render the text without the mnemonic:::WindowsGraphicsUtils->getTextShiftOffset->paintText
WindowsTreeUI#ensureRowsAreVisible(int, int):::Ensures that the rows identified by beginRow through endRow are visible.:::if->getRowCount->visRect->tree->getVisibleRect->if->scrollBounds->getPathForRow->getPathBounds->if->tree->scrollRectToVisible->else->beginRect->getPathForRow->getPathBounds->if->testRect->beginY->maxY->for->counter->if->return->tree->new->Rectangle->scrollRectToVisible
WindowsTreeUI#createDefaultCellRenderer():::Returns the default cell renderer that is used to do the stamping of each node.:::return->new->WindowsTreeCellRenderer
WindowsTreeUI.WindowsTreeCellRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean):::Configures the renderer based on the passed in components:::super->getTreeCellRendererComponent->if->tree->isEnabled->setEnabled->if->getLeafIcon->setDisabledIcon->else->if->getOpenIcon->setDisabledIcon->else->getClosedIcon->setDisabledIcon->else->setEnabled->if->getLeafIcon->setIcon->else->if->getOpenIcon->setIcon->else->getClosedIcon->setIcon->return
XPStyle#invalidateStyle():::Static method for clearing the hashmap and loading the current XP style and theme:::skinPainter->flush
XPStyle#getXP():::Get the singleton instance of this class:::if->toolkit->Toolkit->getDefaultToolkit->toolkit->getDesktopProperty->if->if->themeActive->booleanValue->propertyAction->new->GetPropertyAction->if->AccessController->doPrivileged->ThemeReader->isThemed->UIManager->getLookAndFeel->new->XPStyle->return->ThemeReader->isXPStyleEnabled
XPStyle#getString(Component, Part, State, Prop):::Get a named String value from the current style:::return->getTypeEnumName
XPStyle#getInt(Component, Part, State, Prop, int):::Get a named int value from the current style:::return->ThemeReader->part->getControlName->part->getValue->State->getValue->prop->getValue->getInt
XPStyle#getDimension(Component, Part, State, Prop):::Get a named Dimension value from the current style:::d->ThemeReader->part->getControlName->part->getValue->State->getValue->prop->getValue->getPosition->return->new->Dimension
XPStyle#getPoint(Component, Part, State, Prop):::Get a named Point (e.g:::d->ThemeReader->part->getControlName->part->getValue->State->getValue->prop->getValue->getPosition->return->new->Point->new->Point
XPStyle#getMargin(Component, Part, State, Prop):::Get a named Insets value from the current style:::insets->ThemeReader->part->getControlName->part->getValue->State->getValue->prop->getValue->getThemeMargins->return->new->Insets
XPStyle#getColor(Skin, Prop, Color):::Get a named Color value from the current style:::key->skin->toString->prop->name->part->color->colorMap->get->if->ThemeReader->part->getControlName->part->getValue->State->getValue->prop->getValue->getColor->if->new->ColorUIResource->colorMap->put->return
XPStyle#getBorder(Component, Part):::Get a named Border value from the current style:::if->if->return->UIManager->getColor->new->XPFillBorder->else->return->skin->new->Skin->border->borderMap->get->if->bgType->getTypeEnumName->if->equalsIgnoreCase->thickness->getInt->color->getColor->new->XPFillBorder->if->new->XPStatefulFillBorder->else->if->equalsIgnoreCase->m->getMargin->if->if->getBoolean->new->XPImageBorder->else->if->new->EmptyBorder->else->if->new->Insets->new->XPEmptyBorder->else->new->XPEmptyBorder->if->borderMap->put->return
XPStyle#getSkin(Component, Part):::Get a Skin object from the current style for a named part (component type):::return->new->Skin
XPStyle.Skin#paintSkin(Graphics, int, int, State):::Paint a skin at x, y.:::if->getWidth->getHeight->paintSkin
XPStyle.Skin#paintSkin(Graphics, Rectangle, State):::Paint a skin in an area defined by a rectangle.:::paintSkin
XPStyle.Skin#paintSkin(Graphics, int, int, int, int, State):::Paint a skin at a defined position and size  This method supports animation.:::if->XPStyle->getXP->return->if->ThemeReader->isGetThemeTransitionDurationDefined->SwingUtilities->getAncestorOfClass->AnimationController->paintSkin->else->paintSkinRaw
XPStyle.Skin#paintSkinRaw(Graphics, int, int, int, int, State):::Paint a skin at a defined position and size:::if->XPStyle->getXP->return->skinPainter->paint
XPStyle.Skin#paintSkin(Graphics, int, int, int, int, State, boolean):::Paint a skin at a defined position and size:::if->XPStyle->getXP->return->if->getTypeEnumName->equals->return->skinPainter->paint

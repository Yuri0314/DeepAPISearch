java.awt.font.CharArrayIterator#first()->char:::Sets the position to getBeginIndex() and returns the character at that position.
java.awt.font.CharArrayIterator#last()->char:::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.
java.awt.font.CharArrayIterator#current()->char:::Gets the character at the current position (as returned by getIndex()).
java.awt.font.CharArrayIterator#next()->char:::Increments the iterator's index by one and returns the character at the new index
java.awt.font.CharArrayIterator#previous()->char:::Decrements the iterator's index by one and returns the character at the new index
java.awt.font.CharArrayIterator#setIndex(int)->char:::Sets the position to the specified position in the text and returns that character.
java.awt.font.CharArrayIterator#getBeginIndex()->int:::Returns the start index of the text.
java.awt.font.CharArrayIterator#getEndIndex()->int:::Returns the end index of the text
java.awt.font.CharArrayIterator#getIndex()->int:::Returns the current index.
java.awt.font.CharArrayIterator#clone()->Object:::Create a copy of this iterator
java.awt.font.CharArrayIterator#reset(char[])->void::: char array iterator reset
java.awt.font.CharArrayIterator#reset(char[], int)->void::: char array iterator reset
java.awt.font.FontRenderContext#isTransformed()->boolean:::Indicates whether or not this FontRenderContext object measures text in a transformed render context.
java.awt.font.FontRenderContext#getTransformType()->int:::Returns the integer type of the affine transform for this FontRenderContext as specified by java.awt.geom.AffineTransform#getType()
java.awt.font.FontRenderContext#getTransform()->AffineTransform:::  Gets the transform that is used to scale typographical points   to pixels in this FontRenderContext.
java.awt.font.FontRenderContext#isAntiAliased()->boolean:::Returns a boolean which indicates whether or not some form of antialiasing is specified by this FontRenderContext
java.awt.font.FontRenderContext#usesFractionalMetrics()->boolean:::Returns a boolean which whether text fractional metrics mode is used in this FontRenderContext
java.awt.font.FontRenderContext#getAntiAliasingHint()->Object:::Return the text anti-aliasing rendering mode hint used in this FontRenderContext
java.awt.font.FontRenderContext#getFractionalMetricsHint()->Object:::Return the text fractional metrics rendering mode hint used in this FontRenderContext
java.awt.font.FontRenderContext#equals(Object)->boolean:::Return true if obj is an instance of FontRenderContext and has the same transform, antialiasing, and fractional metrics values as this.
java.awt.font.FontRenderContext#equals(FontRenderContext)->boolean:::Return true if rhs has the same transform, antialiasing, and fractional metrics values as this.
java.awt.font.FontRenderContext#hashCode()->int:::Return a hashcode for this FontRenderContext.
java.awt.font.GlyphMetrics#getAdvance()->float:::Returns the advance of the glyph along the baseline (either horizontal or vertical).
java.awt.font.GlyphMetrics#getAdvanceX()->float:::Returns the x-component of the advance of the glyph.
java.awt.font.GlyphMetrics#getAdvanceY()->float:::Returns the y-component of the advance of the glyph.
java.awt.font.GlyphMetrics#getBounds2D()->Rectangle2D:::Returns the bounds of the glyph
java.awt.font.GlyphMetrics#getLSB()->float:::Returns the left (top) side bearing of the glyph
java.awt.font.GlyphMetrics#getRSB()->float:::Returns the right (bottom) side bearing of the glyph
java.awt.font.GlyphMetrics#getType()->int:::Returns the raw glyph type code.
java.awt.font.GlyphMetrics#isStandard()->boolean:::Returns true if this is a standard glyph.
java.awt.font.GlyphMetrics#isLigature()->boolean:::Returns true if this is a ligature glyph.
java.awt.font.GlyphMetrics#isCombining()->boolean:::Returns true if this is a combining glyph.
java.awt.font.GlyphMetrics#isComponent()->boolean:::Returns true if this is a component glyph.
java.awt.font.GlyphMetrics#isWhitespace()->boolean:::Returns true if this is a whitespace glyph.
java.awt.font.GlyphVector#getFont()->Font:::Returns the Font associated with this GlyphVector.
java.awt.font.GlyphVector#getFontRenderContext()->FontRenderContext:::Returns the FontRenderContext associated with this GlyphVector.
java.awt.font.GlyphVector#performDefaultLayout()->void:::Assigns default positions to each glyph in this GlyphVector
java.awt.font.GlyphVector#getNumGlyphs()->int:::Returns the number of glyphs in this GlyphVector.
java.awt.font.GlyphVector#getGlyphCode(int)->int:::Returns the glyphcode of the specified glyph
java.awt.font.GlyphVector#getGlyphCodes(int, int, int[])->int[]:::Returns an array of glyphcodes for the specified glyphs
java.awt.font.GlyphVector#getGlyphCharIndex(int)->int:::Returns the character index of the specified glyph
java.awt.font.GlyphVector#getGlyphCharIndices(int, int, int[])->int[]:::Returns the character indices of the specified glyphs
java.awt.font.GlyphVector#getLogicalBounds()->Rectangle2D:::Returns the logical bounds of this GlyphVector
java.awt.font.GlyphVector#getVisualBounds()->Rectangle2D:::Returns the visual bounds of this GlyphVector The visual bounds is the bounding box of the outline of this GlyphVector
java.awt.font.GlyphVector#getPixelBounds(FontRenderContext, float, float)->Rectangle:::Returns the pixel bounds of this GlyphVector when rendered in a graphics with the given FontRenderContext at the given location
java.awt.font.GlyphVector#getOutline()->Shape:::Returns a Shape whose interior corresponds to the visual representation of this GlyphVector.
java.awt.font.GlyphVector#getOutline(float, float)->Shape:::Returns a Shape whose interior corresponds to the visual representation of this GlyphVector when rendered at x,&nbsp;y.
java.awt.font.GlyphVector#getGlyphOutline(int)->Shape:::Returns a Shape whose interior corresponds to the visual representation of the specified glyph within this GlyphVector
java.awt.font.GlyphVector#getGlyphOutline(int, float, float)->Shape:::Returns a Shape whose interior corresponds to the visual representation of the specified glyph within this GlyphVector, offset to x,&nbsp;y
java.awt.font.GlyphVector#getGlyphPosition(int)->Point2D:::Returns the position of the specified glyph relative to the origin of this GlyphVector
java.awt.font.GlyphVector#setGlyphPosition(int, Point2D)->void:::Sets the position of the specified glyph within this GlyphVector
java.awt.font.GlyphVector#getGlyphTransform(int)->AffineTransform:::Returns the transform of the specified glyph within this GlyphVector
java.awt.font.GlyphVector#setGlyphTransform(int, AffineTransform)->void:::Sets the transform of the specified glyph within this GlyphVector
java.awt.font.GlyphVector#getLayoutFlags()->int:::Returns flags describing the global state of the GlyphVector
java.awt.font.GlyphVector#getGlyphPositions(int, int, float[])->float[]:::Returns an array of glyph positions for the specified glyphs
java.awt.font.GlyphVector#getGlyphLogicalBounds(int)->Shape:::Returns the logical bounds of the specified glyph within this GlyphVector
java.awt.font.GlyphVector#getGlyphVisualBounds(int)->Shape:::Returns the visual bounds of the specified glyph within the GlyphVector
java.awt.font.GlyphVector#getGlyphPixelBounds(int, FontRenderContext, float, float)->Rectangle:::Returns the pixel bounds of the glyph at index when this GlyphVector is rendered in a Graphics with the given FontRenderContext at the given location
java.awt.font.GlyphVector#getGlyphMetrics(int)->GlyphMetrics:::Returns the metrics of the glyph at the specified index into this GlyphVector.
java.awt.font.GlyphVector#getGlyphJustificationInfo(int)->GlyphJustificationInfo:::Returns the justification information for the glyph at the specified index into this GlyphVector.
java.awt.font.GlyphVector#equals(GlyphVector)->boolean:::Tests if the specified GlyphVector exactly equals this GlyphVector.
java.awt.font.GraphicAttribute#getAscent()->float:::Returns the ascent of this GraphicAttribute
java.awt.font.GraphicAttribute#getDescent()->float:::Returns the descent of this GraphicAttribute
java.awt.font.GraphicAttribute#getAdvance()->float:::Returns the advance of this GraphicAttribute
java.awt.font.GraphicAttribute#getBounds()->Rectangle2D:::Returns a Rectangle2D that encloses all of the bits drawn by this GraphicAttribute relative to the rendering position
java.awt.font.GraphicAttribute#getOutline(AffineTransform)->Shape:::Return a java.awt.Shape that represents the region that this GraphicAttribute renders
java.awt.font.GraphicAttribute#draw(Graphics2D, float, float)->void:::Renders this GraphicAttribute at the specified location.
java.awt.font.GraphicAttribute#getAlignment()->int:::Returns the alignment of this GraphicAttribute
java.awt.font.GraphicAttribute#getJustificationInfo()->GlyphJustificationInfo:::Returns the justification information for this GraphicAttribute
java.awt.font.ImageGraphicAttribute#getAscent()->float:::Returns the ascent of this ImageGraphicAttribute
java.awt.font.ImageGraphicAttribute#getDescent()->float:::Returns the descent of this ImageGraphicAttribute
java.awt.font.ImageGraphicAttribute#getAdvance()->float:::Returns the advance of this ImageGraphicAttribute
java.awt.font.ImageGraphicAttribute#getBounds()->Rectangle2D:::Returns a Rectangle2D that encloses all of the bits rendered by this ImageGraphicAttribute, relative to the rendering position
java.awt.font.ImageGraphicAttribute#draw(Graphics2D, float, float)->void::: image graphic attribute draw
java.awt.font.ImageGraphicAttribute#hashCode()->int:::Returns a hashcode for this ImageGraphicAttribute.
java.awt.font.ImageGraphicAttribute#equals(Object)->boolean:::Compares this ImageGraphicAttribute to the specified Object.
java.awt.font.ImageGraphicAttribute#equals(ImageGraphicAttribute)->boolean:::Compares this ImageGraphicAttribute to the specified ImageGraphicAttribute.
java.awt.font.JavaAWTFontAccessImpl#getTextAttributeConstant(String)->Object::: java font access impl get text attribute constant
java.awt.font.JavaAWTFontAccessImpl#shape(Object, char[], int, int)->void::: java font access impl shape
java.awt.font.LayoutPath#pointToPath(Point2D, Point2D)->boolean:::Convert a point in user space to a location relative to the path
java.awt.font.LayoutPath#pathToPoint(Point2D, boolean, Point2D)->void:::Convert a location relative to the path to a point in user coordinates
java.awt.font.LineBreakMeasurer#nextOffset(float)->int:::Returns the position at the end of the next layout
java.awt.font.LineBreakMeasurer#nextOffset(float, int, boolean)->int:::Returns the position at the end of the next layout
java.awt.font.LineBreakMeasurer#nextLayout(float)->TextLayout:::Returns the next layout, and updates the current position.
java.awt.font.LineBreakMeasurer#nextLayout(float, int, boolean)->TextLayout:::Returns the next layout, and updates the current position.
java.awt.font.LineBreakMeasurer#getPosition()->int:::Returns the current position of this LineBreakMeasurer.
java.awt.font.LineBreakMeasurer#setPosition(int)->void:::Sets the current position of this LineBreakMeasurer.
java.awt.font.LineBreakMeasurer#insertChar(AttributedCharacterIterator, int)->void:::Updates this LineBreakMeasurer after a single character is inserted into the text, and sets the current position to the beginning of the paragraph.
java.awt.font.LineBreakMeasurer#deleteChar(AttributedCharacterIterator, int)->void:::Updates this LineBreakMeasurer after a single character is deleted from the text, and sets the current position to the beginning of the paragraph.
java.awt.font.LineMetrics#getNumChars()->int:::Returns the number of characters (char values) in the text whose metrics are encapsulated by this LineMetrics object.
java.awt.font.LineMetrics#getAscent()->float:::Returns the ascent of the text
java.awt.font.LineMetrics#getDescent()->float:::Returns the descent of the text
java.awt.font.LineMetrics#getLeading()->float:::Returns the leading of the text
java.awt.font.LineMetrics#getHeight()->float:::Returns the height of the text
java.awt.font.LineMetrics#getBaselineIndex()->int:::Returns the baseline index of the text
java.awt.font.LineMetrics#getBaselineOffsets()->float[]:::Returns the baseline offsets of the text, relative to the baseline of the text
java.awt.font.LineMetrics#getStrikethroughOffset()->float:::Returns the position of the strike-through line relative to the baseline.
java.awt.font.LineMetrics#getStrikethroughThickness()->float:::Returns the thickness of the strike-through line.
java.awt.font.LineMetrics#getUnderlineOffset()->float:::Returns the position of the underline relative to the baseline.
java.awt.font.LineMetrics#getUnderlineThickness()->float:::Returns the thickness of the underline.
java.awt.font.MultipleMaster#getNumDesignAxes()->int:::Returns the number of multiple master design controls
java.awt.font.MultipleMaster#getDesignAxisRanges()->float[]:::Returns an array of design limits interleaved in the form [from&rarr;to] for each axis
java.awt.font.MultipleMaster#getDesignAxisDefaults()->float[]:::Returns an array of default design values for each axis
java.awt.font.MultipleMaster#getDesignAxisNames()->String[]:::Returns the name for each design axis
java.awt.font.MultipleMaster#deriveMMFont(float[])->Font:::Creates a new instance of a multiple master font based on the design axis values contained in the specified array
java.awt.font.MultipleMaster#deriveMMFont(float[], float, float, float, float)->Font:::Creates a new instance of a multiple master font based on detailed metric information
java.awt.font.NumericShaper#getShaper(int)->NumericShaper:::Returns a shaper for the provided unicode range
java.awt.font.NumericShaper#getShaper(Range)->NumericShaper:::Returns a shaper for the provided Unicode range
java.awt.font.NumericShaper#getContextualShaper(int)->NumericShaper:::Returns a contextual shaper for the provided unicode range(s)
java.awt.font.NumericShaper#getContextualShaper(Set)->NumericShaper:::Returns a contextual shaper for the provided Unicode range(s)
java.awt.font.NumericShaper#getContextualShaper(int, int)->NumericShaper:::Returns a contextual shaper for the provided unicode range(s)
java.awt.font.NumericShaper#getContextualShaper(Set, Range)->NumericShaper:::Returns a contextual shaper for the provided Unicode range(s)
java.awt.font.NumericShaper#shape(char[], int, int)->void:::Converts the digits in the text that occur between start and start + count.
java.awt.font.NumericShaper#shape(char[], int, int, int)->void:::Converts the digits in the text that occur between start and start + count, using the provided context
java.awt.font.NumericShaper#shape(char[], int, int, Range)->void:::Converts the digits in the text that occur between start and start + count, using the provided context
java.awt.font.NumericShaper#isContextual()->boolean:::Returns a boolean indicating whether or not this shaper shapes contextually.
java.awt.font.NumericShaper#getRanges()->int:::Returns an int that ORs together the values for all the ranges that will be shaped
java.awt.font.NumericShaper#getRangeSet()->Set:::Returns a Set representing all the Unicode ranges in this NumericShaper that will be shaped.
java.awt.font.NumericShaper#hashCode()->int:::Returns a hash code for this shaper.
java.awt.font.NumericShaper#equals(Object)->boolean:::Returns true if the specified object is an instance of NumericShaper and shapes identically to this one, regardless of the range representations, the bit mask or the enum
java.awt.font.NumericShaper#toString()->String:::Returns a String that describes this shaper
java.awt.font.OpenType#getVersion()->int:::Returns the version of the OpenType font
java.awt.font.OpenType#getFontTable(int)->byte[]:::Returns the table as an array of bytes for a specified tag
java.awt.font.OpenType#getFontTable(String)->byte[]:::Returns the table as an array of bytes for a specified tag
java.awt.font.OpenType#getFontTable(int, int, int)->byte[]:::Returns a subset of the table as an array of bytes for a specified tag
java.awt.font.OpenType#getFontTable(String, int, int)->byte[]:::Returns a subset of the table as an array of bytes for a specified tag
java.awt.font.OpenType#getFontTableSize(int)->int:::Returns the size of the table for a specified tag
java.awt.font.OpenType#getFontTableSize(String)->int:::Returns the size of the table for a specified tag
java.awt.font.ShapeGraphicAttribute#getAscent()->float:::Returns the ascent of this ShapeGraphicAttribute
java.awt.font.ShapeGraphicAttribute#getDescent()->float:::Returns the descent of this ShapeGraphicAttribute
java.awt.font.ShapeGraphicAttribute#getAdvance()->float:::Returns the advance of this ShapeGraphicAttribute
java.awt.font.ShapeGraphicAttribute#draw(Graphics2D, float, float)->void::: shape graphic attribute draw
java.awt.font.ShapeGraphicAttribute#getBounds()->Rectangle2D:::Returns a Rectangle2D that encloses all of the bits drawn by this ShapeGraphicAttribute relative to the rendering position
java.awt.font.ShapeGraphicAttribute#getOutline(AffineTransform)->Shape:::Return a java.awt.Shape that represents the region that this ShapeGraphicAttribute renders
java.awt.font.ShapeGraphicAttribute#hashCode()->int:::Returns a hashcode for this ShapeGraphicAttribute.
java.awt.font.ShapeGraphicAttribute#equals(Object)->boolean:::Compares this ShapeGraphicAttribute to the specified Object.
java.awt.font.ShapeGraphicAttribute#equals(ShapeGraphicAttribute)->boolean:::Compares this ShapeGraphicAttribute to the specified ShapeGraphicAttribute.
java.awt.font.StyledParagraph#insertChar(AttributedCharacterIterator, char[], int, StyledParagraph)->StyledParagraph:::Return a StyledParagraph reflecting the insertion of a single character into the text
java.awt.font.StyledParagraph#deleteChar(AttributedCharacterIterator, char[], int, StyledParagraph)->StyledParagraph:::Return a StyledParagraph reflecting the insertion of a single character into the text
java.awt.font.StyledParagraph#getRunLimit(int)->int:::Return the index at which there is a different Font, GraphicAttribute, or Decoration than at the given index.
java.awt.font.StyledParagraph#getDecorationAt(int)->Decoration:::Return the Decoration in effect at the given index.
java.awt.font.StyledParagraph#getFontOrGraphicAt(int)->Object:::Return the Font or GraphicAttribute in effect at the given index
java.awt.font.StyledParagraph#addInputMethodAttrs(Map)->Map:::Return a Map with entries from oldStyles, as well as input method entries, if any.
java.awt.font.TextAttribute#readResolve()->Object:::Resolves instances being deserialized to the predefined constants.
java.awt.font.TextHitInfo#getCharIndex()->int:::Returns the index of the character hit.
java.awt.font.TextHitInfo#isLeadingEdge()->boolean:::Returns true if the leading edge of the character was hit.
java.awt.font.TextHitInfo#getInsertionIndex()->int:::Returns the insertion index
java.awt.font.TextHitInfo#hashCode()->int:::Returns the hash code.
java.awt.font.TextHitInfo#equals(Object)->boolean:::Returns true if the specified Object is a TextHitInfo and equals this TextHitInfo.
java.awt.font.TextHitInfo#equals(TextHitInfo)->boolean:::Returns true if the specified TextHitInfo has the same charIndex and isLeadingEdge as this TextHitInfo
java.awt.font.TextHitInfo#toString()->String:::Returns a String representing the hit for debugging use only.
java.awt.font.TextHitInfo#leading(int)->TextHitInfo:::Creates a TextHitInfo on the leading edge of the character at the specified charIndex.
java.awt.font.TextHitInfo#trailing(int)->TextHitInfo:::Creates a hit on the trailing edge of the character at the specified charIndex.
java.awt.font.TextHitInfo#beforeOffset(int)->TextHitInfo:::Creates a TextHitInfo at the specified offset, associated with the character before the offset.
java.awt.font.TextHitInfo#afterOffset(int)->TextHitInfo:::Creates a TextHitInfo at the specified offset, associated with the character after the offset.
java.awt.font.TextHitInfo#getOtherHit()->TextHitInfo:::Creates a TextHitInfo on the other side of the insertion point
java.awt.font.TextHitInfo#getOffsetHit(int)->TextHitInfo:::Creates a TextHitInfo whose character index is offset by delta from the charIndex of this TextHitInfo
java.awt.font.TextJustifier#justify(float)->float[]:::Return an array of deltas twice as long as the original info array, indicating the amount by which each side of each glyph should grow or shrink
java.awt.font.TextLayout.CaretPolicy#getStrongCaret(TextHitInfo, TextHitInfo, TextLayout)->TextHitInfo:::Chooses one of the specified TextHitInfo instances as a strong caret in the specified TextLayout.
java.awt.font.TextLayout#clone()->Object:::Creates a copy of this TextLayout.
java.awt.font.TextLayout#getJustifiedLayout(float)->TextLayout:::Creates a copy of this TextLayout justified to the specified width
java.awt.font.TextLayout#handleJustify(float)->void:::Justify this layout
java.awt.font.TextLayout#getBaseline()->byte:::Returns the baseline for this TextLayout
java.awt.font.TextLayout#getBaselineOffsets()->float[]:::Returns the offsets array for the baselines used for this TextLayout
java.awt.font.TextLayout#getAdvance()->float:::Returns the advance of this TextLayout
java.awt.font.TextLayout#getVisibleAdvance()->float:::Returns the advance of this TextLayout, minus trailing whitespace
java.awt.font.TextLayout#getAscent()->float:::Returns the ascent of this TextLayout
java.awt.font.TextLayout#getDescent()->float:::Returns the descent of this TextLayout
java.awt.font.TextLayout#getLeading()->float:::Returns the leading of the TextLayout
java.awt.font.TextLayout#getBounds()->Rectangle2D:::Returns the bounds of this TextLayout
java.awt.font.TextLayout#getPixelBounds(FontRenderContext, float, float)->Rectangle:::Returns the pixel bounds of this TextLayout when rendered in a graphics with the given FontRenderContext at the given location
java.awt.font.TextLayout#isLeftToRight()->boolean:::Returns true if this TextLayout has a left-to-right base direction or false if it has a right-to-left base direction
java.awt.font.TextLayout#isVertical()->boolean:::Returns true if this TextLayout is vertical.
java.awt.font.TextLayout#getCharacterCount()->int:::Returns the number of characters represented by this TextLayout.
java.awt.font.TextLayout#getCaretInfo(TextHitInfo, Rectangle2D)->float[]:::Returns information about the caret corresponding to hit
java.awt.font.TextLayout#getCaretInfo(TextHitInfo)->float[]:::Returns information about the caret corresponding to hit
java.awt.font.TextLayout#getNextRightHit(TextHitInfo)->TextHitInfo:::Returns the hit for the next caret to the right (bottom); if there is no such hit, returns null
java.awt.font.TextLayout#getNextRightHit(int, CaretPolicy)->TextHitInfo:::Returns the hit for the next caret to the right (bottom); if no such hit, returns null
java.awt.font.TextLayout#getNextRightHit(int)->TextHitInfo:::Returns the hit for the next caret to the right (bottom); if no such hit, returns null
java.awt.font.TextLayout#getNextLeftHit(TextHitInfo)->TextHitInfo:::Returns the hit for the next caret to the left (top); if no such hit, returns null
java.awt.font.TextLayout#getNextLeftHit(int, CaretPolicy)->TextHitInfo:::Returns the hit for the next caret to the left (top); if no such hit, returns null
java.awt.font.TextLayout#getNextLeftHit(int)->TextHitInfo:::Returns the hit for the next caret to the left (top); if no such hit, returns null
java.awt.font.TextLayout#getVisualOtherHit(TextHitInfo)->TextHitInfo:::Returns the hit on the opposite side of the specified hit's caret.
java.awt.font.TextLayout#getCaretShape(TextHitInfo, Rectangle2D)->Shape:::Returns a Shape representing the caret at the specified hit inside the specified bounds.
java.awt.font.TextLayout#getCaretShape(TextHitInfo)->Shape:::Returns a Shape representing the caret at the specified hit inside the natural bounds of this TextLayout.
java.awt.font.TextLayout#getCharacterLevel(int)->byte:::Returns the level of the character at index
java.awt.font.TextLayout#getCaretShapes(int, Rectangle2D, CaretPolicy)->Shape[]:::Returns two paths corresponding to the strong and weak caret.
java.awt.font.TextLayout#getCaretShapes(int, Rectangle2D)->Shape[]:::Returns two paths corresponding to the strong and weak caret
java.awt.font.TextLayout#getCaretShapes(int)->Shape[]:::Returns two paths corresponding to the strong and weak caret
java.awt.font.TextLayout#getLogicalRangesForVisualSelection(TextHitInfo, TextHitInfo)->int[]:::Returns the logical ranges of text corresponding to a visual selection.
java.awt.font.TextLayout#getVisualHighlightShape(TextHitInfo, TextHitInfo, Rectangle2D)->Shape:::Returns a path enclosing the visual selection in the specified range, extended to bounds
java.awt.font.TextLayout#getVisualHighlightShape(TextHitInfo, TextHitInfo)->Shape:::Returns a Shape enclosing the visual selection in the specified range, extended to the bounds
java.awt.font.TextLayout#getLogicalHighlightShape(int, int, Rectangle2D)->Shape:::Returns a Shape enclosing the logical selection in the specified range, extended to the specified bounds
java.awt.font.TextLayout#getLogicalHighlightShape(int, int)->Shape:::Returns a Shape enclosing the logical selection in the specified range, extended to the natural bounds of this TextLayout
java.awt.font.TextLayout#getBlackBoxBounds(int, int)->Shape:::Returns the black box bounds of the characters in the specified range
java.awt.font.TextLayout#hitTestChar(float, float, Rectangle2D)->TextHitInfo:::Returns a TextHitInfo corresponding to the specified point
java.awt.font.TextLayout#hitTestChar(float, float)->TextHitInfo:::Returns a TextHitInfo corresponding to the specified point
java.awt.font.TextLayout#equals(TextLayout)->boolean:::Returns true if the two layouts are equal
java.awt.font.TextLayout#toString()->String:::Returns debugging information for this TextLayout.
java.awt.font.TextLayout#draw(Graphics2D, float, float)->void:::Renders this TextLayout at the specified location in the specified java.awt.Graphics2D Graphics2D context
java.awt.font.TextLayout#getTextLineForTesting()->TextLine:::Package-only method for testing ONLY
java.awt.font.TextLayout#getBaselineFromGraphic(GraphicAttribute)->byte::: text layout get baseline from graphic
java.awt.font.TextLayout#getOutline(AffineTransform)->Shape:::Returns a Shape representing the outline of this TextLayout.
java.awt.font.TextLayout#getLayoutPath()->LayoutPath:::Return the LayoutPath, or null if the layout path is the default path (x maps to advance, y maps to offset).
java.awt.font.TextLayout#hitToPoint(TextHitInfo, Point2D)->void:::Convert a hit to a point in standard coordinates
java.awt.font.TextLine#getPixelBounds(FontRenderContext, float, float)->Rectangle::: text line get pixel bounds
java.awt.font.TextLine#computePixelBounds(BufferedImage)->Rectangle::: text line compute pixel bounds
java.awt.font.TextLine#characterCount()->int::: text line character count
java.awt.font.TextLine#isDirectionLTR()->boolean::: text line is direction r
java.awt.font.TextLine#getMetrics()->TextLineMetrics::: text line get metrics
java.awt.font.TextLine#visualToLogical(int)->int::: text line visual to logical
java.awt.font.TextLine#logicalToVisual(int)->int::: text line logical to visual
java.awt.font.TextLine#getCharLevel(int)->byte::: text line get char level
java.awt.font.TextLine#isCharLTR(int)->boolean::: text line is char r
java.awt.font.TextLine#getCharType(int)->int::: text line get char type
java.awt.font.TextLine#isCharSpace(int)->boolean::: text line is char space
java.awt.font.TextLine#isCharWhitespace(int)->boolean::: text line is char whitespace
java.awt.font.TextLine#getCharAngle(int)->float::: text line get char angle
java.awt.font.TextLine#getCoreMetricsAt(int)->CoreMetrics::: text line get core metrics at
java.awt.font.TextLine#getCharAscent(int)->float::: text line get char ascent
java.awt.font.TextLine#getCharDescent(int)->float::: text line get char descent
java.awt.font.TextLine#getCharShift(int)->float::: text line get char shift
java.awt.font.TextLine#getCharAdvance(int)->float::: text line get char advance
java.awt.font.TextLine#getCharXPosition(int)->float::: text line get char position
java.awt.font.TextLine#getCharYPosition(int)->float::: text line get char position
java.awt.font.TextLine#getCharLinePosition(int)->float::: text line get char line position
java.awt.font.TextLine#getCharLinePosition(int, boolean)->float::: text line get char line position
java.awt.font.TextLine#caretAtOffsetIsValid(int)->boolean::: text line caret at offset is valid
java.awt.font.TextLine#getCharBounds(int)->Rectangle2D::: text line get char bounds
java.awt.font.TextLine#draw(Graphics2D, float, float)->void::: text line draw
java.awt.font.TextLine#getVisualBounds()->Rectangle2D:::Return the union of the visual bounds of all the components
java.awt.font.TextLine#getItalicBounds()->Rectangle2D::: text line get italic bounds
java.awt.font.TextLine#getOutline(AffineTransform)->Shape::: text line get outline
java.awt.font.TextLine#toString()->String::: text line to string
java.awt.font.TextLine#fastCreateTextLine(FontRenderContext, char[], Font, CoreMetrics, Map)->TextLine:::Create a TextLine from the text
java.awt.font.TextLine#createComponentsOnRun(int, int, char[], int[], byte[], TextLabelFactory, Font, CoreMetrics, FontRenderContext, Decoration, TextLineComponent[], int)->TextLineComponent[]:::Returns an array in logical order of the TextLineComponents on the text in the given range, with the given attributes.
java.awt.font.TextLine#getComponents(StyledParagraph, char[], int, int, int[], byte[], TextLabelFactory)->TextLineComponent[]:::Returns an array (in logical order) of the TextLineComponents representing the text
java.awt.font.TextLine#createLineFromText(char[], StyledParagraph, TextLabelFactory, boolean, float[])->TextLine:::Create a TextLine from the Font and character data over the range
java.awt.font.TextLine#standardCreateTextLine(FontRenderContext, AttributedCharacterIterator, char[], float[])->TextLine:::Create a TextLine from the text
java.awt.font.TextLine#advanceToFirstFont(AttributedCharacterIterator)->boolean:::When this returns, the ACI's current position will be at the start of the first run which does NOT contain a GraphicAttribute
java.awt.font.TextLine#getNormalizedOffsets(float[], byte)->float[]::: text line get normalized offsets
java.awt.font.TextLine#getFontAtCurrentPos(AttributedCharacterIterator)->Font::: text line get font at current pos
java.awt.font.TextLine#getJustifiedLine(float, float, int, int)->TextLine::: text line get justified line
java.awt.font.TextLine#getAdvanceBetween(TextLineComponent[], int, int)->float::: text line get advance between
java.awt.font.TextLine#getLayoutPath()->LayoutPathImpl::: text line get layout path
java.awt.font.TextMeasurer#clone()->Object::: text measurer clone
java.awt.font.TextMeasurer#getLineBreakIndex(int, float)->int:::Returns the index of the first character which will not fit on on a line beginning at start and possible measuring up to maxAdvance in graphical width.
java.awt.font.TextMeasurer#getAdvanceBetween(int, int)->float:::Returns the graphical width of a line beginning at start and including characters up to limit
java.awt.font.TextMeasurer#getLayout(int, int)->TextLayout:::Returns a TextLayout on the given character range.
java.awt.font.TextMeasurer#insertChar(AttributedCharacterIterator, int)->void:::Updates the TextMeasurer after a single character has been inserted into the paragraph currently represented by this TextMeasurer
java.awt.font.TextMeasurer#deleteChar(AttributedCharacterIterator, int)->void:::Updates the TextMeasurer after a single character has been deleted from the paragraph currently represented by this TextMeasurer
java.awt.font.TextMeasurer#getChars()->char[]:::NOTE:  This method is only for LineBreakMeasurer's use
java.awt.font.TransformAttribute#getTransform()->AffineTransform:::Returns a copy of the wrapped transform.
java.awt.font.TransformAttribute#isIdentity()->boolean:::Returns true if the wrapped transform is an identity transform.
java.awt.font.TransformAttribute#hashCode()->int::: transform attribute hash code
java.awt.font.TransformAttribute#equals(Object)->boolean:::Returns true if rhs is a TransformAttribute whose transform is equal to this TransformAttribute's transform.

jdk.internal.module.Builder#newRequires(Set, String, String)->Requires:::Returns a Requires for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.
jdk.internal.module.Builder#newRequires(Set, String)->Requires:::Returns a Requires for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.
jdk.internal.module.Builder#newExports(Set, String, Set)->Exports:::Returns a Exports for a qualified export, with the given (and possibly empty) set of modifiers, to a set of target modules.
jdk.internal.module.Builder#newOpens(Set, String)->Opens:::Returns an Opens for an unqualified open with a given set of modifiers.
jdk.internal.module.Builder#newOpens(Set, String, Set)->Opens:::Returns an Opens for a qualified opens, with the given (and possibly empty) set of modifiers, to a set of target modules.
jdk.internal.module.Builder#newExports(Set, String)->Exports:::Returns a Exports for an unqualified export with a given set of modifiers.
jdk.internal.module.Builder#newProvides(String, List)->Provides:::Returns a Provides for a service with a given list of implementation classes.
jdk.internal.module.Builder#open(boolean)->Builder::: builder open
jdk.internal.module.Builder#synthetic(boolean)->Builder::: builder synthetic
jdk.internal.module.Builder#mandated(boolean)->Builder::: builder mandated
jdk.internal.module.Builder#exports(Exports[])->Builder:::Sets module exports.
jdk.internal.module.Builder#opens(Opens[])->Builder:::Sets module opens.
jdk.internal.module.Builder#requires(Requires[])->Builder:::Sets module requires.
jdk.internal.module.Builder#packages(Set)->Builder:::Adds a set of (possible empty) packages.
jdk.internal.module.Builder#uses(Set)->Builder:::Sets the set of service dependences.
jdk.internal.module.Builder#provides(Provides[])->Builder:::Sets module provides.
jdk.internal.module.Builder#version(String)->Builder:::Sets the module version.
jdk.internal.module.Builder#mainClass(String)->Builder:::Sets the module main class.
jdk.internal.module.Builder#build(int)->ModuleDescriptor:::Builds a ModuleDescriptor from the components.
jdk.internal.module.Checks#requireModuleName(String)->String:::Checks a name to ensure that it's a legal module name.
jdk.internal.module.Checks#isModuleName(String)->boolean:::Returns true if the given name is a legal module name.
jdk.internal.module.Checks#requirePackageName(String)->String:::Checks a name to ensure that it's a legal package name.
jdk.internal.module.Checks#isPackageName(String)->boolean:::Returns true if the given name is a legal package name.
jdk.internal.module.Checks#requireServiceTypeName(String)->String:::Checks a name to ensure that it's a legal qualified class name
jdk.internal.module.Checks#requireServiceProviderName(String)->String:::Checks a name to ensure that it's a legal qualified class name.
jdk.internal.module.Checks#requireQualifiedClassName(String, String)->String:::Checks a name to ensure that it's a legal qualified class name in a named package.
jdk.internal.module.Checks#isClassName(String)->boolean:::Returns true if the given name is a legal class name.
jdk.internal.module.DefaultRoots#compute(ModuleFinder, ModuleFinder)->Set:::Returns the default set of root modules for the unnamed module from the modules observable with the intersection of two module finders
jdk.internal.module.DefaultRoots#compute(ModuleFinder)->Set:::Returns the default set of root modules for the unnamed module from the modules observable with the given module finder
jdk.internal.module.ExplodedSystemModules#hasSplitPackages()->boolean::: exploded system modules has split packages
jdk.internal.module.ExplodedSystemModules#hasIncubatorModules()->boolean::: exploded system modules has incubator modules
jdk.internal.module.ExplodedSystemModules#moduleDescriptors()->ModuleDescriptor[]::: exploded system modules module descriptors
jdk.internal.module.ExplodedSystemModules#moduleTargets()->ModuleTarget[]::: exploded system modules module targets
jdk.internal.module.ExplodedSystemModules#moduleHashes()->ModuleHashes[]::: exploded system modules module hashes
jdk.internal.module.ExplodedSystemModules#moduleResolutions()->ModuleResolution[]::: exploded system modules module resolutions
jdk.internal.module.ExplodedSystemModules#moduleReads()->Map>::: exploded system modules module reads
jdk.internal.module.ExplodedSystemModules#concealedPackagesToOpen()->Map>::: exploded system modules concealed packages to open
jdk.internal.module.ExplodedSystemModules#exportedPackagesToOpen()->Map>::: exploded system modules exported packages to open
jdk.internal.module.IllegalAccessLogger.Builder#logAccessToConcealedPackages(Module, Set)->Builder:::Adding logging of reflective-access to any member of a type in otherwise concealed packages.
jdk.internal.module.IllegalAccessLogger.Builder#logAccessToExportedPackages(Module, Set)->Builder:::Adding logging of reflective-access to non-public members/types in otherwise exported (not open) packages.
jdk.internal.module.IllegalAccessLogger.Builder#complete()->void:::Builds the IllegalAccessLogger and sets it as the system-wise logger.
jdk.internal.module.IllegalAccessLogger#illegalAccessLogger()->IllegalAccessLogger:::Returns the system-wide IllegalAccessLogger or null if there is no logger.
jdk.internal.module.IllegalAccessLogger#isExportedForIllegalAccess(Module, String)->boolean:::Returns true if the module exports a concealed package for illegal access.
jdk.internal.module.IllegalAccessLogger#isOpenForIllegalAccess(Module, String)->boolean:::Returns true if the module opens a concealed or exported package for illegal access.
jdk.internal.module.IllegalAccessLogger#logIfExportedForIllegalAccess(Class, Class, Supplier)->void:::Logs access to the member of a target class by a caller class if the class is in a package that is exported for illegal access
jdk.internal.module.IllegalAccessLogger#logIfOpenedForIllegalAccess(Class, Class, Supplier)->void:::Logs access to the member of a target class by a caller class if the class is in a package that is opened for illegal access
jdk.internal.module.IllegalAccessLogger#logIfOpenedForIllegalAccess(MethodHandles.Lookup, Class)->void:::Logs access by caller lookup if the target class is in a package that is opened for illegal access.
jdk.internal.module.IllegalAccessMaps#concealedPackagesToOpen()->Map>:::Returns the map of concealed packages to open
jdk.internal.module.IllegalAccessMaps#exportedPackagesToOpen()->Map>:::Returns the map of exported packages to open
jdk.internal.module.IllegalAccessMaps#generate(ModuleFinder)->IllegalAccessMaps:::Generate the maps of module to concealed and exported packages for the system modules that are observable with the given module finder.
jdk.internal.module.ModuleBootstrap#patcher()->ModulePatcher:::Returns the ModulePatcher for the initial configuration.
jdk.internal.module.ModuleBootstrap#unlimitedFinder()->ModuleFinder:::Returns the ModuleFinder for the initial configuration before observability is limited by the --limit-modules command line option.
jdk.internal.module.ModuleBootstrap#limitedFinder()->ModuleFinder:::Returns the ModuleFinder for the initial configuration.
jdk.internal.module.ModuleBootstrap#boot()->ModuleLayer:::Initialize the module system, returning the boot layer.
jdk.internal.module.ModuleBootstrap#fail(String)->void:::Throws a RuntimeException with the given message
jdk.internal.module.ModuleBootstrap#warn(String)->void::: module bootstrap warn
jdk.internal.module.ModuleBootstrap#warnUnknownModule(String, String)->void::: module bootstrap warn unknown module
jdk.internal.module.ModuleBootstrap#unableToParse(String, String, String)->String::: module bootstrap unable to parse
jdk.internal.module.ModuleBootstrap#option(String)->String::: module bootstrap option
jdk.internal.module.ModuleBootstrap#concat(Iterator, Iterator)->Iterator:::Returns an iterator that yields all elements of the first iterator followed by all the elements of the second iterator.
jdk.internal.module.ModuleBootstrap.SafeModuleFinder#find(String)->Optional::: safe module finder find
jdk.internal.module.ModuleBootstrap.SafeModuleFinder#findAll()->Set::: safe module finder find all
jdk.internal.module.ModuleBootstrap.Counters#add(String, long)->void:::Add a counter
jdk.internal.module.ModuleBootstrap.Counters#publish()->void:::Publish the counters to the instrumentation buffer or stdout.
jdk.internal.module.ModuleHashes.HashSupplier#generate(String)->byte[]::: hash supplier generate
jdk.internal.module.ModuleHashes#algorithm()->String:::Returns the algorithm used to hash the modules ("SHA-256" for example).
jdk.internal.module.ModuleHashes#names()->Set:::Returns the set of module names for which hashes are recorded.
jdk.internal.module.ModuleHashes#hashFor(String)->byte[]:::Returns the hash for the given module name, null if there is no hash recorded for the module.
jdk.internal.module.ModuleHashes#hashes()->Map:::Returns unmodifiable map of module name to hash
jdk.internal.module.ModuleHashes#computeHash(Path, String)->byte[]:::Computes the hash for the given file with the given message digest algorithm.
jdk.internal.module.ModuleHashes#generate(Map, String)->ModuleHashes:::Computes the hash for every entry in the given map, returning a ModuleHashes to encapsulate the result
jdk.internal.module.ModuleHashes.Builder#hashForModule(String, byte[])->Builder:::Sets the module hash for the given module name
jdk.internal.module.ModuleHashes.Builder#build()->ModuleHashes:::Builds a ModuleHashes.
jdk.internal.module.ModuleHashesBuilder#computeHashes(Set)->Map:::Returns a map of a module M to ModuleHashes for the modules that depend upon M directly or indirectly
jdk.internal.module.ModuleHashesBuilder.Graph#nodes()->Set::: graph nodes
jdk.internal.module.ModuleHashesBuilder.Graph#edges()->Map>::: graph edges
jdk.internal.module.ModuleHashesBuilder.Graph#adjacentNodes(T)->Set::: graph adjacent nodes
jdk.internal.module.ModuleHashesBuilder.Graph#contains(T)->boolean::: graph contains
jdk.internal.module.ModuleHashesBuilder.Graph#orderedNodes()->Stream:::Returns nodes sorted in topological order.
jdk.internal.module.ModuleHashesBuilder.Graph#ordered(Consumer)->void:::Traverses this graph and performs the given action in topological order.
jdk.internal.module.ModuleHashesBuilder.Graph#reverse(Consumer)->void:::Traverses this graph and performs the given action in reverse topological order.
jdk.internal.module.ModuleHashesBuilder.Graph#transpose()->Graph:::Returns a transposed graph from this graph.
jdk.internal.module.ModuleHashesBuilder.Graph#dfs(T)->Set:::Returns all nodes reachable from the given root.
jdk.internal.module.ModuleHashesBuilder.Graph#dfs(Set)->Set:::Returns all nodes reachable from the given set of roots.
jdk.internal.module.ModuleHashesBuilder.Graph#printGraph(PrintStream)->void::: graph print graph
jdk.internal.module.ModuleHashesBuilder.Graph.Builder#addNode(T)->void::: builder add node
jdk.internal.module.ModuleHashesBuilder.Graph.Builder#addEdge(T, T)->void::: builder add edge
jdk.internal.module.ModuleHashesBuilder.Graph.Builder#build()->Graph::: builder build
jdk.internal.module.ModuleInfo.Attributes#descriptor()->ModuleDescriptor::: attributes descriptor
jdk.internal.module.ModuleInfo.Attributes#target()->ModuleTarget::: attributes target
jdk.internal.module.ModuleInfo.Attributes#recordedHashes()->ModuleHashes::: attributes recorded hashes
jdk.internal.module.ModuleInfo.Attributes#moduleResolution()->ModuleResolution::: attributes module resolution
jdk.internal.module.ModuleInfo#read(InputStream, Supplier>)->Attributes:::Reads a module-info.class from the given input stream.
jdk.internal.module.ModuleInfo#read(ByteBuffer, Supplier>)->Attributes:::Reads a module-info.class from the given byte buffer.
jdk.internal.module.ModuleInfo#readIgnoringHashes(ByteBuffer, Supplier>)->Attributes:::Reads a module-info.class from the given byte buffer but ignore the ModuleHashes attribute.
jdk.internal.module.ModuleInfoExtender#packages(Set)->ModuleInfoExtender:::Sets the packages for the ModulePackages attribute
jdk.internal.module.ModuleInfoExtender#version(Version)->ModuleInfoExtender:::Sets the value for the module version in the Module attribute
jdk.internal.module.ModuleInfoExtender#mainClass(String)->ModuleInfoExtender:::Sets the value of the ModuleMainClass attribute.
jdk.internal.module.ModuleInfoExtender#targetPlatform(String)->ModuleInfoExtender:::Sets the value for the ModuleTarget attribute.
jdk.internal.module.ModuleInfoExtender#hashes(ModuleHashes)->ModuleInfoExtender:::The ModuleHashes attribute will be emitted to the module-info with the hashes encapsulated in the given ModuleHashes object.
jdk.internal.module.ModuleInfoExtender#moduleResolution(ModuleResolution)->ModuleInfoExtender:::Sets the value for the ModuleResolution attribute.
jdk.internal.module.ModuleInfoExtender#write(OutputStream)->void:::Outputs the modified module-info.class to the given output stream
jdk.internal.module.ModuleInfoExtender#toByteArray()->byte[]:::Returns the bytes of the modified module-info.class
jdk.internal.module.ModuleInfoExtender#newExtender(InputStream)->ModuleInfoExtender:::Returns an Extender that may be used to add additional attributes to the module-info.class read from the given input stream.
jdk.internal.module.ModuleInfoWriter#write(ModuleDescriptor, ModuleTarget, OutputStream)->void:::Writes a module descriptor to the given output stream as a module-info.class.
jdk.internal.module.ModuleInfoWriter#write(ModuleDescriptor, OutputStream)->void:::Writes a module descriptor to the given output stream as a module-info.class.
jdk.internal.module.ModuleInfoWriter#toByteBuffer(ModuleDescriptor)->ByteBuffer:::Returns a ByteBuffer containing the given module descriptor in module-info.class format.
jdk.internal.module.ModuleLoaderMap.Mapper#apply(String)->ClassLoader::: mapper apply
jdk.internal.module.ModuleLoaderMap#bootModules()->Set:::Returns the names of the modules defined to the boot loader.
jdk.internal.module.ModuleLoaderMap#platformModules()->Set:::Returns the names of the modules defined to the platform loader.
jdk.internal.module.ModuleLoaderMap#mappingFunction(Configuration)->Function:::Returns the function to map modules in the given configuration to the built-in class loaders.
jdk.internal.module.ModulePatcher#patchIfNeeded(ModuleReference)->ModuleReference:::Returns a module reference that interposes on the given module if needed
jdk.internal.module.ModulePatcher#hasPatches()->boolean:::Returns true is this module patcher has patches.
jdk.internal.module.ModulePatcher#patchedModules()->Set::: module patcher patched modules
jdk.internal.module.ModulePatcher.PatchedModuleReader#findResource(String)->Resource:::Finds a resource of the given name in the patched module.
jdk.internal.module.ModulePatcher.PatchedModuleReader#find(String)->Optional::: patched module reader find
jdk.internal.module.ModulePatcher.PatchedModuleReader#open(String)->Optional::: patched module reader open
jdk.internal.module.ModulePatcher.PatchedModuleReader#read(String)->Optional::: patched module reader read
jdk.internal.module.ModulePatcher.PatchedModuleReader#release(ByteBuffer)->void::: patched module reader release
jdk.internal.module.ModulePatcher.PatchedModuleReader#list()->Stream::: patched module reader list
jdk.internal.module.ModulePatcher.PatchedModuleReader#close()->void::: patched module reader close
jdk.internal.module.ModulePath#of(ModulePatcher, Path...)->ModuleFinder:::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules
jdk.internal.module.ModulePath#of(Path...)->ModuleFinder:::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules.
jdk.internal.module.ModulePath#of(Runtime.Version, boolean, Path...)->ModuleFinder:::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules.
jdk.internal.module.ModulePath#find(String)->Optional::: module path find
jdk.internal.module.ModulePath#findAll()->Set::: module path find all
jdk.internal.module.ModulePathValidator#scanAllModules(PrintStream)->int:::Scans and the validates all modules on the module path
jdk.internal.module.ModuleReferenceImpl#open()->ModuleReader::: module reference impl open
jdk.internal.module.ModuleReferenceImpl#isPatched()->boolean:::Returns true if this module has been patched via --patch-module.
jdk.internal.module.ModuleReferenceImpl#moduleTarget()->ModuleTarget:::Returns the ModuleTarget or null if the no target platform.
jdk.internal.module.ModuleReferenceImpl#recordedHashes()->ModuleHashes:::Returns the hashes recorded in this module or null if there are no hashes recorded.
jdk.internal.module.ModuleReferenceImpl#hasher()->ModuleHashes.HashSupplier:::Returns the supplier that computes the hash of this module.
jdk.internal.module.ModuleReferenceImpl#moduleResolution()->ModuleResolution:::Returns the ModuleResolution flags.
jdk.internal.module.ModuleReferenceImpl#computeHash(String)->byte[]:::Computes the hash of this module
jdk.internal.module.ModuleReferenceImpl#hashCode()->int::: module reference impl hash code
jdk.internal.module.ModuleReferenceImpl#equals(Object)->boolean::: module reference impl equals
jdk.internal.module.ModuleReferenceImpl#toString()->String::: module reference impl to string
jdk.internal.module.ModuleReferences#newJarModule(ModuleInfo.Attributes, ModulePatcher, Path)->ModuleReference:::Creates a ModuleReference to a possibly-patched module in a modular JAR.
jdk.internal.module.ModuleReferences#newJModModule(ModuleInfo.Attributes, Path)->ModuleReference:::Creates a ModuleReference to a module in a JMOD file.
jdk.internal.module.ModuleReferences#newExplodedModule(ModuleInfo.Attributes, ModulePatcher, Path)->ModuleReference:::Creates a ModuleReference to a possibly-patched exploded module.
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#implFind(String)->Optional:::Returns a URL to  resource
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#implOpen(String)->Optional:::Returns an input stream for reading a resource
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#implList()->Stream:::Returns a stream of the names of resources in the module
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#implClose()->void:::Closes the module reader
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#find(String)->Optional::: safe close module reader find
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#open(String)->Optional::: safe close module reader open
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#list()->Stream::: safe close module reader list
jdk.internal.module.ModuleReferences.SafeCloseModuleReader#close()->void::: safe close module reader close
jdk.internal.module.ModuleReferences.JarModuleReader#newJarFile(Path)->JarFile::: jar module reader new jar file
jdk.internal.module.ModuleReferences.JarModuleReader#implFind(String)->Optional::: jar module reader impl find
jdk.internal.module.ModuleReferences.JarModuleReader#implOpen(String)->Optional::: jar module reader impl open
jdk.internal.module.ModuleReferences.JarModuleReader#implList()->Stream::: jar module reader impl list
jdk.internal.module.ModuleReferences.JarModuleReader#implClose()->void::: jar module reader impl close
jdk.internal.module.ModuleReferences.JModModuleReader#newJmodFile(Path)->JmodFile::: mod module reader new jmod file
jdk.internal.module.ModuleReferences.JModModuleReader#implFind(String)->Optional::: mod module reader impl find
jdk.internal.module.ModuleReferences.JModModuleReader#implOpen(String)->Optional::: mod module reader impl open
jdk.internal.module.ModuleReferences.JModModuleReader#implList()->Stream::: mod module reader impl list
jdk.internal.module.ModuleReferences.JModModuleReader#implClose()->void::: mod module reader impl close
jdk.internal.module.ModuleReferences.ExplodedModuleReader#find(String)->Optional::: exploded module reader find
jdk.internal.module.ModuleReferences.ExplodedModuleReader#open(String)->Optional::: exploded module reader open
jdk.internal.module.ModuleReferences.ExplodedModuleReader#read(String)->Optional::: exploded module reader read
jdk.internal.module.ModuleReferences.ExplodedModuleReader#list()->Stream::: exploded module reader list
jdk.internal.module.ModuleReferences.ExplodedModuleReader#close()->void::: exploded module reader close
jdk.internal.module.ModuleResolution#value()->int::: module resolution value
jdk.internal.module.ModuleResolution#empty()->ModuleResolution::: module resolution empty
jdk.internal.module.ModuleResolution#doNotResolveByDefault()->boolean::: module resolution do not resolve by default
jdk.internal.module.ModuleResolution#hasDeprecatedWarning()->boolean::: module resolution has deprecated warning
jdk.internal.module.ModuleResolution#hasDeprecatedForRemovalWarning()->boolean::: module resolution has deprecated for removal warning
jdk.internal.module.ModuleResolution#hasIncubatingWarning()->boolean::: module resolution has incubating warning
jdk.internal.module.ModuleResolution#withDoNotResolveByDefault()->ModuleResolution::: module resolution with do not resolve by default
jdk.internal.module.ModuleResolution#withDeprecated()->ModuleResolution::: module resolution with deprecated
jdk.internal.module.ModuleResolution#withDeprecatedForRemoval()->ModuleResolution::: module resolution with deprecated for removal
jdk.internal.module.ModuleResolution#withIncubating()->ModuleResolution::: module resolution with incubating
jdk.internal.module.ModuleResolution#doNotResolveByDefault(ModuleReference)->boolean::: module resolution do not resolve by default
jdk.internal.module.ModuleResolution#hasIncubatingWarning(ModuleReference)->boolean::: module resolution has incubating warning
jdk.internal.module.ModuleResolution#toString()->String::: module resolution to string
jdk.internal.module.Modules#defineModule(ClassLoader, ModuleDescriptor, URI)->Module:::Creates a new Module
jdk.internal.module.Modules#addReads(Module, Module)->void:::Updates m1 to read m2
jdk.internal.module.Modules#addReadsAllUnnamed(Module)->void:::Update module m to read all unnamed modules.
jdk.internal.module.Modules#addExports(Module, String, Module)->void:::Updates module m1 to export a package to module m2
jdk.internal.module.Modules#addExportsToAllUnnamed(Module, String)->void:::Updates module m to export a package to all unnamed modules.
jdk.internal.module.Modules#addOpens(Module, String, Module)->void:::Updates module m1 to open a package to module m2
jdk.internal.module.Modules#addOpensToAllUnnamed(Module, String)->void:::Updates module m to open a package to all unnamed modules.
jdk.internal.module.Modules#addUses(Module, Class)->void:::Updates module m to use a service
jdk.internal.module.Modules#addProvides(Module, Class, Class)->void:::Updates module m to provide a service
jdk.internal.module.Modules#transformedByAgent(Module)->void:::Called by the VM when code in the given Module has been transformed by an agent and so may have been instrumented to call into supporting classes on the boot class path or application class path.
jdk.internal.module.Modules#loadModule(String)->Module:::Called by the VM to load a system module, typically "java.instrument" or "jdk.management.agent"
jdk.internal.module.Modules#findLoadedModule(String)->Optional:::Finds the module with the given name in the boot layer or any child layers created to load the "java.instrument" or "jdk.management.agent" modules into a running VM.
jdk.internal.module.ModuleTarget#targetPlatform()->String::: module target target platform
jdk.internal.module.Resources#canEncapsulate(String)->boolean:::Return true if a resource can be encapsulated
jdk.internal.module.Resources#toPackageName(String)->String:::Derive a package name for a resource
jdk.internal.module.Resources#toResourceName(Path, Path)->String:::Returns a resource name corresponding to the relative file path between dir and file
jdk.internal.module.Resources#toFilePath(Path, String)->Path:::Returns a file path to a resource in a file tree
jdk.internal.module.ServicesCatalog.ServiceProvider#module()->Module::: service provider module
jdk.internal.module.ServicesCatalog.ServiceProvider#providerName()->String::: service provider provider name
jdk.internal.module.ServicesCatalog.ServiceProvider#hashCode()->int::: service provider hash code
jdk.internal.module.ServicesCatalog.ServiceProvider#equals(Object)->boolean::: service provider equals
jdk.internal.module.ServicesCatalog#create()->ServicesCatalog:::Creates a ServicesCatalog that supports concurrent registration and and lookup
jdk.internal.module.ServicesCatalog#register(Module)->void:::Registers the providers in the given module in this services catalog.
jdk.internal.module.ServicesCatalog#addProvider(Module, Class, Class)->void:::Add a provider in the given module to this services catalog
jdk.internal.module.ServicesCatalog#findServices(String)->List:::Returns the (possibly empty) list of service providers that implement the given service type.
jdk.internal.module.ServicesCatalog#getServicesCatalogOrNull(ClassLoader)->ServicesCatalog:::Returns the ServicesCatalog for the given class loader or null if there is none.
jdk.internal.module.ServicesCatalog#getServicesCatalog(ClassLoader)->ServicesCatalog:::Returns the ServicesCatalog for the given class loader, creating it if needed.
jdk.internal.module.SystemModuleFinders#allSystemModules()->SystemModules:::Returns the SystemModules object to reconstitute all modules
jdk.internal.module.SystemModuleFinders#systemModules(String)->SystemModules:::Returns a SystemModules object to reconstitute the modules for the given initial module
jdk.internal.module.SystemModuleFinders#of(SystemModules)->ModuleFinder:::Returns a ModuleFinder that is backed by the given SystemModules object.
jdk.internal.module.SystemModuleFinders#ofSystem()->ModuleFinder:::Returns the ModuleFinder to find all system modules
jdk.internal.module.SystemModuleFinders#toModuleReference(ModuleDescriptor, ModuleTarget, ModuleHashes, HashSupplier, ModuleResolution)->ModuleReference:::Creates a ModuleReference to the system module.
jdk.internal.module.SystemModuleFinders#generateNameToHash(ModuleHashes[])->Map:::Generates a map of module name to hash value.
jdk.internal.module.SystemModuleFinders#hashSupplier(Map, String)->HashSupplier:::Returns a HashSupplier that returns the hash of the given module.
jdk.internal.module.SystemModules#hasSplitPackages()->boolean:::Returns false if the module reconstituted by this SystemModules object have no overlapping packages
jdk.internal.module.SystemModules#hasIncubatorModules()->boolean:::Return false if the modules reconstituted by this SystemModules object do not include any incubator modules
jdk.internal.module.SystemModules#moduleDescriptors()->ModuleDescriptor[]:::Returns the non-empty array of ModuleDescriptor objects.
jdk.internal.module.SystemModules#moduleTargets()->ModuleTarget[]:::Returns the array of ModuleTarget objects
jdk.internal.module.SystemModules#moduleHashes()->ModuleHashes[]:::Returns the array of ModuleHashes objects
jdk.internal.module.SystemModules#moduleResolutions()->ModuleResolution[]:::Returns the array of ModuleResolution objects
jdk.internal.module.SystemModules#moduleReads()->Map>:::Returns the map representing readability graph for the modules reconstituted by this SystemModules object.
jdk.internal.module.SystemModules#concealedPackagesToOpen()->Map>:::Returns the map of module concealed packages to open
jdk.internal.module.SystemModules#exportedPackagesToOpen()->Map>:::Returns the map of module exported packages to open
jdk.internal.module.SystemModulesMap#allSystemModules()->SystemModules:::Returns the SystemModules object to reconstitute all modules or null if this is an exploded build.
jdk.internal.module.SystemModulesMap#defaultSystemModules()->SystemModules:::Returns the SystemModules object to reconstitute default modules or null if this is an exploded build.
jdk.internal.module.SystemModulesMap#moduleNames()->String[]:::Returns the array of initial module names identified at link time.
jdk.internal.module.SystemModulesMap#classNames()->String[]:::Returns the array of SystemModules class names

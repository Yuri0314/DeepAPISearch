Builder#newRequires(Set, String, String):::Returns a Requires for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.:::version->if->ver->if->compiledVersion->ver->toString->equals->else->Version->parse->return->JLMA->newRequires
Builder#newRequires(Set, String):::Returns a Requires for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.:::return->newRequires
Builder#newExports(Set, String, Set):::Returns a Exports for a qualified export, with the given (and possibly empty) set of modifiers, to a set of target modules.:::return->JLMA->newExports
Builder#newOpens(Set, String):::Returns an Opens for an unqualified open with a given set of modifiers.:::return->JLMA->newOpens
Builder#newOpens(Set, String, Set):::Returns an Opens for a qualified opens, with the given (and possibly empty) set of modifiers, to a set of target modules.:::return->JLMA->newOpens
Builder#newExports(Set, String):::Returns a Exports for an unqualified export with a given set of modifiers.:::return->JLMA->newExports
Builder#newProvides(String, List):::Returns a Provides for a service with a given list of implementation classes.:::return->JLMA->newProvides
Builder#exports(Exports[]):::Sets module exports.:::Set->of->return
Builder#opens(Opens[]):::Sets module opens.:::Set->of->return
Builder#requires(Requires[]):::Sets module requires.:::Set->of->return
Builder#packages(Set):::Adds a set of (possible empty) packages.:::return
Builder#uses(Set):::Sets the set of service dependences.:::return
Builder#provides(Provides[]):::Sets module provides.:::Set->of->return
Builder#version(String):::Sets the module version.:::ver->if->v->ver->toString->equals->else->Version->parse->return
Builder#mainClass(String):::Sets the module main class.:::return
Builder#build(int):::Builds a ModuleDescriptor from the components.:::return->JLMA->modifiers->newModuleDescriptor
Checks#requireModuleName(String):::Checks a name to ensure that it's a legal module name.:::if->throw->new->IllegalArgumentException->next->off->while->name->indexOf->id->name->substring->if->isJavaIdentifier->throw->new->IllegalArgumentException->last->name->substring->if->isJavaIdentifier->throw->new->IllegalArgumentException->return
Checks#isModuleName(String):::Returns true if the given name is a legal module name.:::next->off->while->name->indexOf->id->name->substring->if->isJavaIdentifier->return->last->name->substring->return->isJavaIdentifier
Checks#requirePackageName(String):::Checks a name to ensure that it's a legal package name.:::return->requireTypeName
Checks#isPackageName(String):::Returns true if the given name is a legal package name.:::return->isTypeName
Checks#requireServiceTypeName(String):::Checks a name to ensure that it's a legal qualified class name:::return->requireQualifiedClassName
Checks#requireServiceProviderName(String):::Checks a name to ensure that it's a legal qualified class name.:::return->requireQualifiedClassName
Checks#requireQualifiedClassName(String, String):::Checks a name to ensure that it's a legal qualified class name in a named package.:::requireTypeName->if->name->indexOf->throw->new->IllegalArgumentException->return
Checks#isClassName(String):::Returns true if the given name is a legal class name.:::return->isTypeName
DefaultRoots#compute(ModuleFinder, ModuleFinder):::Returns the default set of root modules for the unnamed module from the modules observable with the intersection of two module finders:::return->finder1->findAll->stream->ModuleResolution->doNotResolveByDefault->filter->ModuleReference->descriptor->map->finder2->descriptor->name->find->isPresent->exportsAPI->filter->ModuleDescriptor->name->map->Collectors->toSet->collect
DefaultRoots#compute(ModuleFinder):::Returns the default set of root modules for the unnamed module from the modules observable with the given module finder:::return->compute
IllegalAccessLogger.Builder#logAccessToConcealedPackages(Module, Set):::Adding logging of reflective-access to any member of a type in otherwise concealed packages.:::ensureNotComplete->moduleToConcealedPackages->unmodifiableSet->put->return
IllegalAccessLogger.Builder#logAccessToExportedPackages(Module, Set):::Adding logging of reflective-access to non-public members/types in otherwise exported (not open) packages.:::ensureNotComplete->moduleToExportedPackages->unmodifiableSet->put->return
IllegalAccessLogger.Builder#complete():::Builds the IllegalAccessLogger and sets it as the system-wise logger.:::map1->unmodifiableMap->map2->unmodifiableMap->new->IllegalAccessLogger
IllegalAccessLogger#illegalAccessLogger():::Returns the system-wide IllegalAccessLogger or null if there is no logger.:::return
IllegalAccessLogger#isExportedForIllegalAccess(Module, String):::Returns true if the module exports a concealed package for illegal access.:::packages->moduleToConcealedPackages->get->if->packages->contains->return->return
IllegalAccessLogger#isOpenForIllegalAccess(Module, String):::Returns true if the module opens a concealed or exported package for illegal access.:::if->isExportedForIllegalAccess->return->packages->moduleToExportedPackages->get->if->packages->contains->return->return
IllegalAccessLogger#logIfExportedForIllegalAccess(Class, Class, Supplier):::Logs access to the member of a target class by a caller class if the class is in a package that is exported for illegal access:::targetModule->target->getModule->targetPackage->target->getPackageName->if->isExportedForIllegalAccess->callerModule->caller->getModule->if->JLA->isReflectivelyExported->whatSupplier->get->log
IllegalAccessLogger#logIfOpenedForIllegalAccess(Class, Class, Supplier):::Logs access to the member of a target class by a caller class if the class is in a package that is opened for illegal access:::targetModule->target->getModule->targetPackage->target->getPackageName->if->isOpenForIllegalAccess->callerModule->caller->getModule->if->JLA->isReflectivelyOpened->whatSupplier->get->log
IllegalAccessLogger#logIfOpenedForIllegalAccess(MethodHandles.Lookup, Class):::Logs access by caller lookup if the target class is in a package that is opened for illegal access.:::targetModule->target->getModule->targetPackage->target->getPackageName->if->isOpenForIllegalAccess->callerClass->caller->lookupClass->callerModule->callerClass->getModule->if->JLA->isReflectivelyOpened->url->codeSource->source->if->callerClass->getName->else->callerClass->getName->target->getName->log
IllegalAccessMaps#concealedPackagesToOpen():::Returns the map of concealed packages to open:::return
IllegalAccessMaps#exportedPackagesToOpen():::Returns the map of exported packages to open:::return
IllegalAccessMaps#generate(ModuleFinder):::Generate the maps of module to concealed and exported packages for the system modules that are observable with the given module finder.:::map->new->HashMap<>->finder->findAll->stream->ModuleReference->descriptor->map->md->packages->map->putIfAbsent->forEach->forEach->concealedPackagesToOpen->new->HashMap<>->exportedPackagesToOpen->new->HashMap<>->rn->in->getResourceAsStream->if->throw->new->InternalError->try->br->new->InputStreamReader->new->BufferedReader->br->lines->line->isEmpty->line->startsWith->filter->descriptor->map->get->if->isOpen->name->descriptor->name->if->isExported->exportedPackagesToOpen->new->HashSet<>->computeIfAbsent->add->else->concealedPackagesToOpen->new->HashSet<>->computeIfAbsent->add->forEach->catch->throw->new->UncheckedIOException->finally->return->new->IllegalAccessMaps
ModuleBootstrap#patcher():::Returns the ModulePatcher for the initial configuration.:::return
ModuleBootstrap#unlimitedFinder():::Returns the ModuleFinder for the initial configuration before observability is limited by the --limit-modules command line option.:::finder->if->return->ModuleFinder->ofSystem->else->return
ModuleBootstrap#limitedFinder():::Returns the ModuleFinder for the initial configuration.:::finder->if->return->unlimitedFinder->else->return
ModuleBootstrap#boot():::Initialize the module system, returning the boot layer.:::t0->System->nanoTime->upgradeModulePath->finderFor->appModulePath->finderFor->isPatched->patcher->hasPatches->mainModule->System->getProperty->addModules->addModules->limitModules->limitModules->traceOutput->trace->getAndRemoveProperty->if->Boolean->parseBoolean->t1->System->nanoTime->systemModules->systemModuleFinder->haveModulePath->needResolution->if->addModules->isEmpty->limitModules->isEmpty->SystemModuleFinders->systemModules->if->if->SystemModuleFinders->allSystemModules->if->SystemModuleFinders->of->else->new->ExplodedSystemModules->SystemModuleFinders->ofSystem->Counters->add->t2->System->nanoTime->base->systemModuleFinder->find->orElse->if->throw->new->InternalError->baseUri->base->location->orElse->if->throw->new->InternalError->BootLoader->loadModule->Modules->base->descriptor->defineModule->Counters->add->if->getAndRemoveProperty->errors->ModulePathValidator->scanAllModules->if->fail->t3->System->nanoTime->savedModuleFinder->finder->roots->if->if->ModuleFinder->compose->if->ModuleFinder->compose->else->new->HashSet<>->if->roots->add->addAllDefaultModules->addAllSystemModules->addAllApplicationModules->foreach->switch->break->break->break->roots->add->if->limitModules->isEmpty->limitFinder->if->roots->DefaultRoots->compute->addAll->if->f->systemModuleFinder->findAll->stream->ModuleReference->descriptor->map->ModuleDescriptor->name->map->f->find->isPresent->filter->roots->add->forEach->if->f->appModulePath->findAll->stream->ModuleReference->descriptor->map->ModuleDescriptor->name->map->f->find->isPresent->filter->roots->add->forEach->else->Counters->add->t4->System->nanoTime->cf->if->JLMA->resolveAndBind->else->map->systemModules->moduleReads->JLMA->newConfiguration->if->patcher->patchedModules->stream->cf->findModule->isPresent->filter->warnUnknownModule->forEach->Counters->add->t5->System->nanoTime->clf->ModuleLoaderMap->mappingFunction->if->foreach->cf->modules->mref->resolvedModule->reference->name->mref->descriptor->name->cl->clf->apply->if->if->upgradeModulePath->find->isPresent->fail->if->systemModuleFinder->find->isPresent->fail->if->systemModules->hasSplitPackages->checkSplitPackages->loadModules->Counters->add->t6->System->nanoTime->bootLayer->ModuleLayer->empty->defineModules->Counters->add->if->systemModules->hasIncubatorModules->checkIncubatingStatus->t7->System->nanoTime->addExtraReads->extraExportsOrOpens->addExtraExportsAndOpens->addIllegalAccess->Counters->add->if->new->SafeModuleFinder->if->new->SafeModuleFinder->Counters->add->Counters->publish->return
ModuleBootstrap#fail(String):::Throws a RuntimeException with the given message:::throw->new->RuntimeException
ModuleBootstrap#concat(Iterator, Iterator):::Returns an iterator that yields all elements of the first iterator followed by all the elements of the second iterator.:::return->new->Iterator<T>
ModuleBootstrap.Counters#add(String, long):::Add a counter:::if->counters->System->nanoTime->put
ModuleBootstrap.Counters#publish():::Publish the counters to the instrumentation buffer or stdout.:::if->foreach->counters->entrySet->name->e->getKey->value->e->getValue->if->PerfCounter->newPerfCounter->set->if->println
ModuleHashes#algorithm():::Returns the algorithm used to hash the modules ("SHA-256" for example).:::return
ModuleHashes#names():::Returns the set of module names for which hashes are recorded.:::return->nameToHash->keySet
ModuleHashes#hashFor(String):::Returns the hash for the given module name, null if there is no hash recorded for the module.:::return->nameToHash->get
ModuleHashes#hashes():::Returns unmodifiable map of module name to hash:::return
ModuleHashes#computeHash(Path, String):::Computes the hash for the given file with the given message digest algorithm.:::try->md->MessageDigest->getInstance->try->fc->FileChannel->open->bb->ByteBuffer->allocate->while->fc->read->bb->flip->md->update->bb->clear->catch->finally->return->md->digest->catch->throw->new->RuntimeException->throw->new->UncheckedIOException->finally
ModuleHashes#generate(Map, String):::Computes the hash for every entry in the given map, returning a ModuleHashes to encapsulate the result:::nameToHash->new->HashMap<>->foreach->map->entrySet->name->entry->getKey->path->entry->getValue->nameToHash->computeHash->put->return->new->ModuleHashes
ModuleHashes.Builder#hashForModule(String, byte[]):::Sets the module hash for the given module name:::nameToHash->put->return
ModuleHashes.Builder#build():::Builds a ModuleHashes.:::if->nameToHash->isEmpty->return->new->ModuleHashes->else->return
ModuleHashesBuilder#computeHashes(Set):::Returns a map of a module M to ModuleHashes for the modules that depend upon M directly or indirectly:::builder->new->Graph.Builder<>->todo->configuration->modules->new->ArrayDeque<>->visited->new->HashSet<>->rm->while->todo->poll->if->visited->add->builder->rm->name->addNode->foreach->rm->reads->if->visited->contains->todo->push->builder->rm->name->dm->name->addEdge->transposedGraph->builder->build->transpose->mods->new->HashSet<>->hashes->new->HashMap<>->builder->build->orderedNodes->roots->contains->mods->contains->filter->ns->transposedGraph->dfs->stream->n->equals->hashModuleCandidates->contains->filter->toSet->collect->mods->add->mods->addAll->if->ns->isEmpty->moduleToPath->ns->stream->Function->identity->this->moduleToPath->toMap->collect->hashes->ModuleHashes->generate->put->forEach->return
ModuleHashesBuilder.Graph#orderedNodes():::Returns nodes sorted in topological order.:::sorter->new->TopoSorter<>->return->stream
ModuleHashesBuilder.Graph#ordered(Consumer):::Traverses this graph and performs the given action in topological order.:::sorter->new->TopoSorter<>->sorter->ordered
ModuleHashesBuilder.Graph#reverse(Consumer):::Traverses this graph and performs the given action in reverse topological order.:::sorter->new->TopoSorter<>->sorter->reverse
ModuleHashesBuilder.Graph#transpose():::Returns a transposed graph from this graph.:::builder->new->Builder<>->nodes->builder->addNode->forEach->edges->keySet->edges->get->builder->addEdge->forEach->forEach->return->builder->build
ModuleHashesBuilder.Graph#dfs(T):::Returns all nodes reachable from the given root.:::return->Set->of->dfs
ModuleHashesBuilder.Graph#dfs(Set):::Returns all nodes reachable from the given set of roots.:::todo->new->ArrayDeque<>->visited->new->HashSet<>->u->while->todo->poll->if->visited->add->contains->adjacentNodes->stream->visited->contains->filter->todo->push->forEach->return
ModuleInfo#read(InputStream, Supplier>):::Reads a module-info.class from the given input stream.:::try->return->new->ModuleInfo->new->DataInputStream->doRead->catch->throw->e->getMessage->invalidModuleDescriptor->throw->truncatedModuleDescriptor->finally
ModuleInfo#read(ByteBuffer, Supplier>):::Reads a module-info.class from the given byte buffer.:::try->return->new->ModuleInfo->new->DataInputWrapper->doRead->catch->throw->e->getMessage->invalidModuleDescriptor->throw->truncatedModuleDescriptor->throw->new->UncheckedIOException->finally
ModuleInfo#readIgnoringHashes(ByteBuffer, Supplier>):::Reads a module-info.class from the given byte buffer but ignore the ModuleHashes attribute.:::try->return->new->ModuleInfo->new->DataInputWrapper->doRead->catch->throw->e->getMessage->invalidModuleDescriptor->throw->truncatedModuleDescriptor->throw->new->UncheckedIOException->finally
ModuleInfoExtender#packages(Set):::Sets the packages for the ModulePackages attribute:::Collections->unmodifiableSet->return
ModuleInfoExtender#version(Version):::Sets the value for the module version in the Module attribute:::return
ModuleInfoExtender#mainClass(String):::Sets the value of the ModuleMainClass attribute.:::return
ModuleInfoExtender#targetPlatform(String):::Sets the value for the ModuleTarget attribute.:::return
ModuleInfoExtender#hashes(ModuleHashes):::The ModuleHashes attribute will be emitted to the module-info with the hashes encapsulated in the given ModuleHashes object.:::return
ModuleInfoExtender#moduleResolution(ModuleResolution):::Sets the value for the ModuleResolution attribute.:::return
ModuleInfoExtender#write(OutputStream):::Outputs the modified module-info.class to the given output stream:::out->toByteArray->write
ModuleInfoExtender#toByteArray():::Returns the bytes of the modified module-info.class:::cw->new->ClassWriter->cr->new->ClassReader->cv->new->ClassVisitor->attrs->new->ArrayList<>->attrs->new->ModuleTargetAttribute->add->attrs->new->ModuleResolutionAttribute->add->attrs->new->ModuleHashesAttribute->add->cr->attrs->new->AttributeArr->toArray->accept->if->cw->new->ModuleTargetAttribute->visitAttribute->if->flags->moduleResolution->value->cw->new->ModuleResolutionAttribute->visitAttribute->if->algorithm->hashes->algorithm->names->new->ArrayList<>->values->new->ArrayList<>->foreach->hashes->names->names->add->values->hashes->hashFor->add->cw->new->ModuleHashesAttribute->visitAttribute->return->cw->toByteArray
ModuleInfoExtender#newExtender(InputStream):::Returns an Extender that may be used to add additional attributes to the module-info.class read from the given input stream.:::return->new->ModuleInfoExtender
ModuleInfoWriter#write(ModuleDescriptor, ModuleTarget, OutputStream):::Writes a module descriptor to the given output stream as a module-info.class.:::bytes->toModuleInfo->out->write
ModuleInfoWriter#write(ModuleDescriptor, OutputStream):::Writes a module descriptor to the given output stream as a module-info.class.:::write
ModuleInfoWriter#toByteBuffer(ModuleDescriptor):::Returns a ByteBuffer containing the given module descriptor in module-info.class format.:::bytes->toModuleInfo->return->ByteBuffer->wrap
ModuleLoaderMap#bootModules():::Returns the names of the modules defined to the boot loader.:::BOOT_MODULES->new->StringArr->bootModules->new->HashSet<>->foreach->bootModules->add->return
ModuleLoaderMap#platformModules():::Returns the names of the modules defined to the platform loader.:::PLATFORM_MODULES->new->StringArr->platformModules->new->HashSet<>->foreach->platformModules->add->return
ModuleLoaderMap#mappingFunction(Configuration):::Returns the function to map modules in the given configuration to the built-in class loaders.:::bootModules->bootModules->platformModules->platformModules->platformClassLoader->ClassLoaders->platformClassLoader->appClassLoader->ClassLoaders->appClassLoader->map->new->HashMap<>->foreach->cf->modules->mn->resolvedModule->name->if->bootModules->contains->if->platformModules->contains->map->put->else->map->put->return->new->Mapper
ModulePatcher#patchIfNeeded(ModuleReference):::Returns a module reference that interposes on the given module if needed:::descriptor->mref->descriptor->mn->descriptor->name->paths->map->get->if->return->packages->new->HashSet<>->isAutomatic->descriptor->isAutomatic->try->foreach->if->Files->isRegularFile->try->jf->file->toString->new->JarFile->jf->stream->e->isDirectory->e->getName->endsWith->filter->toPackageName->map->Checks->isPackageName->filter->packages->add->forEach->catch->finally->else->if->Files->isDirectory->top->Files->attrs->isRegularFile->find->path->toString->endsWith->isHidden->filter->toPackageName->map->Checks->isPackageName->filter->packages->add->forEach->catch->throw->new->UncheckedIOException->finally->packages->descriptor->packages->removeAll->if->packages->isEmpty->builder->JLMA->descriptor->name->descriptor->modifiers->newModuleBuilder->if->descriptor->isAutomatic->descriptor->requires->builder->requires->forEach->descriptor->exports->builder->exports->forEach->descriptor->opens->builder->opens->forEach->descriptor->uses->builder->uses->forEach->descriptor->provides->builder->provides->forEach->descriptor->version->builder->version->ifPresent->descriptor->mainClass->builder->mainClass->ifPresent->builder->descriptor->packages->packages->builder->packages->builder->build->location->mref->location->orElse->target->recordedHashes->hasher->mres->if->impl->impl->moduleTarget->impl->recordedHashes->impl->hasher->impl->moduleResolution->return->new->PatchedModuleReader->new->ModuleReferenceImpl
ModulePatcher#hasPatches():::Returns true is this module patcher has patches.:::return->map->isEmpty
ModulePatcher.PatchedModuleReader#findResource(String):::Finds a resource of the given name in the patched module.:::r->findResourceInPatch->if->return->bb->delegate->read->orElse->if->return->return->new->Resource
ModulePath#of(ModulePatcher, Path...):::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules:::return->JarFile->runtimeVersion->new->ModulePath
ModulePath#of(Path...):::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules.:::return->of
ModulePath#of(Runtime.Version, boolean, Path...):::Returns a ModuleFinder that locates modules on the file system by searching a sequence of directories and/or packaged modules.:::return->new->ModulePath
ModulePathValidator#scanAllModules(PrintStream):::Scans and the validates all modules on the module path:::validator->new->ModulePathValidator->value->System->getProperty->if->Stream->value->split->of->Path->of->map->validator->scan->forEach->ModuleFinder->ofSystem->findAll->stream->Comparator->ModuleReference->descriptor->comparing->sorted->validator->process->forEach->System->getProperty->if->Stream->value->split->of->Path->of->map->validator->scan->forEach->return
ModuleReferenceImpl#isPatched():::Returns true if this module has been patched via --patch-module.:::return
ModuleReferenceImpl#moduleTarget():::Returns the ModuleTarget or null if the no target platform.:::return
ModuleReferenceImpl#recordedHashes():::Returns the hashes recorded in this module or null if there are no hashes recorded.:::return
ModuleReferenceImpl#hasher():::Returns the supplier that computes the hash of this module.:::return
ModuleReferenceImpl#moduleResolution():::Returns the ModuleResolution flags.:::return
ModuleReferenceImpl#computeHash(String):::Computes the hash of this module:::result->if->return->if->return->hasher->generate->return
ModuleReferences#newJarModule(ModuleInfo.Attributes, ModulePatcher, Path):::Creates a ModuleReference to a possibly-patched module in a modular JAR.:::uri->file->toUri->supplier->new->JarModuleReader->hasher->ModuleHashes->computeHash->return->newModule
ModuleReferences#newJModModule(ModuleInfo.Attributes, Path):::Creates a ModuleReference to a module in a JMOD file.:::uri->file->toUri->supplier->new->JModModuleReader->hasher->ModuleHashes->computeHash->return->newModule
ModuleReferences#newExplodedModule(ModuleInfo.Attributes, ModulePatcher, Path):::Creates a ModuleReference to a possibly-patched exploded module.:::supplier->new->ExplodedModuleReader->return->dir->toUri->newModule
ModuleReferences.SafeCloseModuleReader#implFind(String):::Returns a URL to  resource:::
ModuleReferences.SafeCloseModuleReader#implOpen(String):::Returns an input stream for reading a resource:::
ModuleReferences.SafeCloseModuleReader#implList():::Returns a stream of the names of resources in the module:::
ModuleReferences.SafeCloseModuleReader#implClose():::Closes the module reader:::
Modules#defineModule(ClassLoader, ModuleDescriptor, URI):::Creates a new Module:::return->JLA->defineModule
Modules#addReads(Module, Module):::Updates m1 to read m2:::JLA->addReads
Modules#addReadsAllUnnamed(Module):::Update module m to read all unnamed modules.:::JLA->addReadsAllUnnamed
Modules#addExports(Module, String, Module):::Updates module m1 to export a package to module m2:::JLA->addExports
Modules#addExportsToAllUnnamed(Module, String):::Updates module m to export a package to all unnamed modules.:::JLA->addExportsToAllUnnamed
Modules#addOpens(Module, String, Module):::Updates module m1 to open a package to module m2:::JLA->addOpens
Modules#addOpensToAllUnnamed(Module, String):::Updates module m to open a package to all unnamed modules.:::JLA->addOpensToAllUnnamed
Modules#addUses(Module, Class):::Updates module m to use a service:::JLA->addUses
Modules#addProvides(Module, Class, Class):::Updates module m to provide a service:::layer->m->getLayer->pa->m->getClassLoader->loader->AccessController->doPrivileged->platformClassLoader->ClassLoaders->platformClassLoader->if->catalog->if->BootLoader->getServicesCatalog->else->ServicesCatalog->getServicesCatalog->catalog->addProvider->if->JLA->getServicesCatalog->addProvider
Modules#transformedByAgent(Module):::Called by the VM when code in the given Module has been transformed by an agent and so may have been instrumented to call into supporting classes on the boot class path or application class path.:::BootLoader->getUnnamedModule->addReads->ClassLoaders->appClassLoader->getUnnamedModule->addReads
Modules#loadModule(String):::Called by the VM to load a system module, typically "java.instrument" or "jdk.management.agent":::top->if->ModuleLayer->boot->module->top->findModule->orElse->if->return->empty->ModuleFinder->of->finder->ModuleBootstrap->unlimitedFinder->roots->Set->of->cf->top->configuration->resolveAndBind->clf->ModuleLoaderMap->mappingFunction->newLayer->top->defineModules->map->newLayer->modules->stream->Collectors->Module->getName->Function->identity->toMap->collect->layer->while->foreach->layer->modules->m->getDescriptor->exports->stream->ModuleDescriptor.Exports->isQualified->filter->e->targets->other->map->get->if->e->source->addExports->forEach->forEach->m->getDescriptor->opens->stream->ModuleDescriptor.Opens->isQualified->filter->o->targets->other->map->get->if->o->source->addOpens->forEach->forEach->parents->layer->parents->parents->isEmpty->parents->get->JLA->addNonExportedPackages->foreach->cf->modules->mref->resolvedModule->reference->mn->mref->descriptor->name->cl->clf->apply->if->BootLoader->loadModule->else->loadModule->return->newLayer->findModule->new->InternalError->orElseThrow
Modules#findLoadedModule(String):::Finds the module with the given name in the boot layer or any child layers created to load the "java.instrument" or "jdk.management.agent" modules into a running VM.:::top->if->ModuleLayer->boot->return->top->findModule
Resources#canEncapsulate(String):::Return true if a resource can be encapsulated:::len->name->length->if->name->endsWith->return->else->return->Checks->toPackageName->isPackageName
Resources#toPackageName(String):::Derive a package name for a resource:::index->name->lastIndexOf->if->name->length->return->else->return->name->substring->replace
Resources#toResourceName(Path, Path):::Returns a resource name corresponding to the relative file path between dir and file:::s->dir->relativize->toString->replace->if->s->length->Files->isDirectory->return
Resources#toFilePath(Path, String):::Returns a file path to a resource in a file tree:::expectDirectory->name->endsWith->if->name->name->length->substring->path->dir->getFileSystem->toSafeFilePath->if->file->dir->resolve->try->attrs->Files->readAttributes->if->attrs->isDirectory->attrs->isDirectory->return->catch->finally->return
ServicesCatalog#create():::Creates a ServicesCatalog that supports concurrent registration and and lookup:::return->new->ServicesCatalog
ServicesCatalog#register(Module):::Registers the providers in the given module in this services catalog.:::descriptor->module->getDescriptor->foreach->descriptor->provides->service->provides->service->providerNames->provides->providers->count->providerNames->size->if->pn->providerNames->get->providers->new->ServiceProvider->add->else->list->new->ArrayList<>->foreach->list->new->ServiceProvider->add->providers->addAll
ServicesCatalog#addProvider(Module, Class, Class):::Add a provider in the given module to this services catalog:::list->service->getName->providers->list->impl->getName->new->ServiceProvider->add
ServicesCatalog#findServices(String):::Returns the (possibly empty) list of service providers that implement the given service type.:::return->map->List->of->getOrDefault
ServicesCatalog#getServicesCatalogOrNull(ClassLoader):::Returns the ServicesCatalog for the given class loader or null if there is none.:::return->CLV->get
ServicesCatalog#getServicesCatalog(ClassLoader):::Returns the ServicesCatalog for the given class loader, creating it if needed.:::catalog->CLV->get->if->create->previous->CLV->putIfAbsent->if->return
SystemModuleFinders#allSystemModules():::Returns the SystemModules object to reconstitute all modules:::if->return->SystemModulesMap->allSystemModules->else->return
SystemModuleFinders#systemModules(String):::Returns a SystemModules object to reconstitute the modules for the given initial module:::if->if->return->SystemModulesMap->defaultSystemModules->initialModules->SystemModulesMap->moduleNames->for->i->return
SystemModuleFinders#of(SystemModules):::Returns a ModuleFinder that is backed by the given SystemModules object.:::descriptors->systemModules->moduleDescriptors->targets->systemModules->moduleTargets->recordedHashes->systemModules->moduleHashes->moduleResolutions->systemModules->moduleResolutions->moduleCount->mrefs->new->ModuleReferenceArr->map->new->Map.EntryArr->nameToHash->generateNameToHash->for->i->return->new->SystemModuleFinder
SystemModuleFinders#ofSystem():::Returns the ModuleFinder to find all system modules:::finder->if->return->home->StaticProperty->javaHome->modules->Path->of->if->Files->isRegularFile->if->systemModules->allSystemModules->if->of->if->ofModuleInfos->return->dir->Path->of->if->Files->isDirectory->throw->new->InternalError->f->ModulePath->ModuleBootstrap->patcher->of->return->new->ModuleFinder
SystemModuleFinders#toModuleReference(ModuleDescriptor, ModuleTarget, ModuleHashes, HashSupplier, ModuleResolution):::Creates a ModuleReference to the system module.:::mn->descriptor->name->uri->JNUA->concat->create->readerSupplier->new->Supplier<>->mref->new->ModuleReferenceImpl->ModuleBootstrap->patcher->patchIfNeeded->return
SystemModuleFinders#generateNameToHash(ModuleHashes[]):::Generates a map of module name to hash value.:::nameToHash->secondSeen->foreach->if->if->mh->hashes->else->if->new->HashMap<>->nameToHash->mh->hashes->putAll->return->Map->of
SystemModuleFinders#hashSupplier(Map, String):::Returns a HashSupplier that returns the hash of the given module.:::hash->nameToHash->get->if->return->new->HashSupplier->else->return
SystemModules#hasSplitPackages():::Returns false if the module reconstituted by this SystemModules object have no overlapping packages:::
SystemModules#hasIncubatorModules():::Return false if the modules reconstituted by this SystemModules object do not include any incubator modules:::
SystemModules#moduleDescriptors():::Returns the non-empty array of ModuleDescriptor objects.:::
SystemModules#moduleTargets():::Returns the array of ModuleTarget objects:::
SystemModules#moduleHashes():::Returns the array of ModuleHashes objects:::
SystemModules#moduleResolutions():::Returns the array of ModuleResolution objects:::
SystemModules#moduleReads():::Returns the map representing readability graph for the modules reconstituted by this SystemModules object.:::
SystemModules#concealedPackagesToOpen():::Returns the map of module concealed packages to open:::
SystemModules#exportedPackagesToOpen():::Returns the map of module exported packages to open:::
SystemModulesMap#allSystemModules():::Returns the SystemModules object to reconstitute all modules or null if this is an exploded build.:::return
SystemModulesMap#defaultSystemModules():::Returns the SystemModules object to reconstitute default modules or null if this is an exploded build.:::return
SystemModulesMap#moduleNames():::Returns the array of initial module names identified at link time.:::return->new->StringArr
SystemModulesMap#classNames():::Returns the array of SystemModules class names:::return->new->StringArr

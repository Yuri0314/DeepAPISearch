SPARCArgument#getNumber()::: argument get number:::return
SPARCArgument#getIsIn()::: argument get is in:::return
SPARCArgument#getIsOut()::: argument get is out:::return->getIsIn
SPARCArgument#getSuccessor()::: argument get successor:::return->getNumber->getIsIn->new->SPARCArgument
SPARCArgument#asIn()::: argument as in:::return->getNumber->new->SPARCArgument
SPARCArgument#asOut()::: argument as out:::return->getNumber->new->SPARCArgument
SPARCArgument#isRegister():::Locating register-based arguments:::return
SPARCArgument#asRegister()::: argument as register:::if->Assert->isRegister->that->return->getIsIn->getNumber->new->SPARCRegister
SPARCRegister#getNumberOfRegisters()::: register get number of registers:::return
SPARCRegister#isIn()::: register is in:::return->getNumber
SPARCRegister#isLocal()::: register is local:::return->getNumber->getNumber
SPARCRegister#isOut()::: register is out:::return->getNumber->getNumber
SPARCRegister#isGlobal()::: register is global:::return->getNumber->getNumber
SPARCRegister#afterSave()::: register after save:::if->Assert->isOut->isGlobal->that->return->isOut->getNumber->new->SPARCRegister
SPARCRegister#afterRestore()::: register after restore:::if->Assert->isIn->isGlobal->that->return->isIn->getNumber->new->SPARCRegister
SPARCRegister#spOffsetInSavedWindow():::NOTE: this returns an offset in BYTES in this system!:::if->isIn->return->VM->getVM->getAddressSize->getNumber->else->if->isLocal->return->VM->getVM->getAddressSize->getNumber->if->Assert->isIn->isLocal->that->return
SPARCRegister#toString()::: register to string:::return->SPARCRegisters->getRegisterName
SPARCRegister#isFramePointer()::: register is frame pointer:::return
SPARCRegister#isStackPointer()::: register is stack pointer:::return
SPARCRegister#isFloat()::: register is float:::return
SPARCRegister#isV9Only()::: register is v9 only:::return
SPARCRegisters#getNumRegisters():::Prefer to use this instead of the constant above:::return
SPARCRegisters#getRegisterName(int)::: registers get register name:::if->return->if->Assert->that->return
SPARCRegisters#getRegister(int)::: registers get register:::if->Assert->that->return

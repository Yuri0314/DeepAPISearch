AnnotationMirror#getAnnotationType():::Returns the type of this annotation.:::
AnnotationMirror#getElementValues():::Returns the values of this annotation's elements:::
AnnotationValue#getValue():::Returns the value.:::
AnnotationValue#toString():::Returns a string representation of this value:::
AnnotationValue#accept(AnnotationValueVisitor, P):::Applies a visitor to this value.:::
AnnotationValueVisitor#visit(AnnotationValue, P):::Visits an annotation value.:::
AnnotationValueVisitor#visit(AnnotationValue):::A convenience method equivalent to visit(av, null).:::return->visit
AnnotationValueVisitor#visitBoolean(boolean, P):::Visits a boolean value in an annotation.:::
AnnotationValueVisitor#visitByte(byte, P):::Visits a byte value in an annotation.:::
AnnotationValueVisitor#visitChar(char, P):::Visits a char value in an annotation.:::
AnnotationValueVisitor#visitDouble(double, P):::Visits a double value in an annotation.:::
AnnotationValueVisitor#visitFloat(float, P):::Visits a float value in an annotation.:::
AnnotationValueVisitor#visitInt(int, P):::Visits an int value in an annotation.:::
AnnotationValueVisitor#visitLong(long, P):::Visits a long value in an annotation.:::
AnnotationValueVisitor#visitShort(short, P):::Visits a short value in an annotation.:::
AnnotationValueVisitor#visitString(String, P):::Visits a string value in an annotation.:::
AnnotationValueVisitor#visitType(TypeMirror, P):::Visits a type value in an annotation.:::
AnnotationValueVisitor#visitEnumConstant(VariableElement, P):::Visits an enum value in an annotation.:::
AnnotationValueVisitor#visitAnnotation(AnnotationMirror, P):::Visits an annotation value in an annotation.:::
AnnotationValueVisitor#visitArray(List, P):::Visits an array value in an annotation.:::
AnnotationValueVisitor#visitUnknown(AnnotationValue, P):::Visits an unknown kind of annotation value:::
Element#asType():::Returns the type defined by this element:::
Element#getKind():::Returns the kind of this element.:::
Element#getModifiers():::Returns the modifiers of this element, excluding annotations:::
Element#getSimpleName():::Returns the simple (unqualified) name of this element:::
Element#getEnclosingElement():::Returns the innermost element within which this element is, loosely speaking, enclosed:::
Element#getEnclosedElements():::Returns the elements that are, loosely speaking, directly enclosed by this element:::
Element#equals(Object):::Returns true if the argument represents the same element as this, or false otherwise.:::
Element#hashCode():::Obeys the general contract of Object#hashCode Object.hashCode.:::
Element#getAnnotationMirrors():::To get inherited annotations as well, use {@link Elements#getAllAnnotationMirrors(Element) getAllAnnotationMirrors.:::
Element#accept(ElementVisitor, P):::Applies a visitor to this element.:::
ElementVisitor#visit(Element, P):::Visits an element.:::
ElementVisitor#visit(Element):::A convenience method equivalent to visit(e, null).:::return->visit
ElementVisitor#visitPackage(PackageElement, P):::Visits a package element.:::
ElementVisitor#visitType(TypeElement, P):::Visits a type element.:::
ElementVisitor#visitVariable(VariableElement, P):::Visits a variable element.:::
ElementVisitor#visitExecutable(ExecutableElement, P):::Visits an executable element.:::
ElementVisitor#visitTypeParameter(TypeParameterElement, P):::Visits a type parameter element.:::
ElementVisitor#visitUnknown(Element, P):::Visits an unknown kind of element:::
ElementVisitor#visitModule(ModuleElement, P):::Visits a module element.:::return->visitUnknown
ExecutableElement#getTypeParameters():::Returns the formal type parameters of this executable in declaration order.:::
ExecutableElement#getReturnType():::Returns the return type of this executable:::
ExecutableElement#getParameters():::Returns the formal parameters of this executable:::
ExecutableElement#getReceiverType():::Returns the receiver type of this executable, or javax.lang.model.type.NoType NoType with kind javax.lang.model.type.TypeKind#NONE NONE if the executable has no receiver type:::
ExecutableElement#isVarArgs():::Returns true if this method or constructor accepts a variable number of arguments and returns false otherwise.:::
ExecutableElement#isDefault():::Returns true if this method is a default method and returns false otherwise.:::
ExecutableElement#getThrownTypes():::Returns the exceptions and other throwables listed in this method or constructor's throws clause in declaration order.:::
ExecutableElement#getDefaultValue():::Returns the default value if this executable is an annotation type element:::
ExecutableElement#getSimpleName():::Returns the simple name of a constructor, method, or initializer:::
ModuleElement#getQualifiedName():::Returns the fully qualified name of this module:::
ModuleElement#getSimpleName():::Returns the simple name of this module:::
ModuleElement#getEnclosedElements():::Returns the packages within this module.:::
ModuleElement#isOpen():::Returns true if this is an open module and false otherwise.:::
ModuleElement#isUnnamed():::Returns true if this is an unnamed module and false otherwise.:::
ModuleElement#getEnclosingElement():::Returns null since a module is not enclosed by another element.:::
ModuleElement#getDirectives():::Returns the directives contained in the declaration of this module.:::
ModuleElement.Directive#getKind():::Returns the kind of this directive.:::
ModuleElement.Directive#accept(DirectiveVisitor, P):::Applies a visitor to this directive.:::
ModuleElement.DirectiveVisitor#visit(Directive):::Visits any directive as if by passing itself to that directive's Directive#accept accept method and passing null for the additional parameter.:::return->d->accept
ModuleElement.DirectiveVisitor#visit(Directive, P):::Visits any directive as if by passing itself to that directive's Directive#accept accept method.:::return->d->accept
ModuleElement.DirectiveVisitor#visitRequires(RequiresDirective, P):::Visits a requires directive.:::
ModuleElement.DirectiveVisitor#visitExports(ExportsDirective, P):::Visits an exports directive.:::
ModuleElement.DirectiveVisitor#visitOpens(OpensDirective, P):::Visits an opens directive.:::
ModuleElement.DirectiveVisitor#visitUses(UsesDirective, P):::Visits a uses directive.:::
ModuleElement.DirectiveVisitor#visitProvides(ProvidesDirective, P):::Visits a provides directive.:::
ModuleElement.DirectiveVisitor#visitUnknown(Directive, P):::Visits an unknown directive:::throw->new->UnknownDirectiveException
ModuleElement.RequiresDirective#isStatic():::Returns whether or not this is a static dependency.:::
ModuleElement.RequiresDirective#isTransitive():::Returns whether or not this is a transitive dependency.:::
ModuleElement.RequiresDirective#getDependency():::Returns the module that is required:::
ModuleElement.ExportsDirective#getPackage():::Returns the package being exported.:::
ModuleElement.ExportsDirective#getTargetModules():::Returns the specific modules to which the package is being exported, or null, if the package is exported to all modules which have readability to this module.:::
ModuleElement.OpensDirective#getPackage():::Returns the package being opened.:::
ModuleElement.OpensDirective#getTargetModules():::Returns the specific modules to which the package is being open or null, if the package is open all modules which have readability to this module.:::
ModuleElement.ProvidesDirective#getService():::Returns the service being provided.:::
ModuleElement.ProvidesDirective#getImplementations():::Returns the implementations of the service being provided.:::
ModuleElement.UsesDirective#getService():::Returns the service that is used.:::
Name#equals(Object):::Returns true if the argument represents the same name as this, and false otherwise:::
Name#hashCode():::Obeys the general contract of Object#hashCode Object.hashCode.:::
Name#contentEquals(CharSequence):::Compares this name to the specified CharSequence:::
PackageElement#getQualifiedName():::Returns the fully qualified name of this package:::
PackageElement#getSimpleName():::Returns the simple name of this package:::
PackageElement#getEnclosedElements():::Returns the NestingKind#TOP_LEVEL top-level classes and interfaces within this package:::
PackageElement#isUnnamed():::Returns true if this is an unnamed package and false otherwise.:::
PackageElement#getEnclosingElement():::Returns the enclosing module if such a module exists; otherwise returns null:::
Parameterizable#getTypeParameters():::Returns the formal type parameters of an element in declaration order.:::
QualifiedNameable#getQualifiedName():::Returns the fully qualified name of an element.:::
TypeElement#getEnclosedElements():::Returns the fields, methods, constructors, and member types that are directly declared in this class or interface:::
TypeElement#getNestingKind():::Returns the nesting kind of this type element.:::
TypeElement#getQualifiedName():::Returns the fully qualified name of this type element:::
TypeElement#getSimpleName():::Returns the simple name of this type element:::
TypeElement#getSuperclass():::Returns the direct superclass of this type element:::
TypeElement#getInterfaces():::Returns the interface types directly implemented by this class or extended by this interface.:::
TypeElement#getTypeParameters():::Returns the formal type parameters of this type element in declaration order.:::
TypeElement#getEnclosingElement():::Returns the package of a top-level type and returns the immediately lexically enclosing element for a NestingKind#isNested nested type.:::
TypeParameterElement#getGenericElement():::Returns the generic class, interface, method, or constructor that is parameterized by this type parameter.:::
TypeParameterElement#getBounds():::Returns the bounds of this type parameter:::
TypeParameterElement#getEnclosingElement():::Returns the TypeParameterElement#getGenericElement generic element of this type parameter.:::
UnknownAnnotationValueException#getUnknownAnnotationValue():::Returns the unknown annotation value:::return
UnknownAnnotationValueException#getArgument():::Returns the additional argument.:::return
UnknownDirectiveException#getUnknownDirective():::Returns the unknown directive:::return
UnknownDirectiveException#getArgument():::Returns the additional argument.:::return
UnknownElementException#getUnknownElement():::Returns the unknown element:::return
UnknownElementException#getArgument():::Returns the additional argument.:::return
VariableElement#getConstantValue():::Returns the value of this variable if this is a final field initialized to a compile-time constant:::
VariableElement#getSimpleName():::Returns the simple name of this variable element:::
VariableElement#getEnclosingElement():::Returns the enclosing element of this variable:::

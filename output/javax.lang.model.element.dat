javax.lang.model.element.AnnotationMirror#getAnnotationType()->DeclaredType:::Returns the type of this annotation.
javax.lang.model.element.AnnotationMirror#getElementValues()->Map:::Returns the values of this annotation's elements
javax.lang.model.element.AnnotationValue#getValue()->Object:::Returns the value.
javax.lang.model.element.AnnotationValue#toString()->String:::Returns a string representation of this value
javax.lang.model.element.AnnotationValue#accept(AnnotationValueVisitor, P)->R:::Applies a visitor to this value.
javax.lang.model.element.AnnotationValueVisitor#visit(AnnotationValue, P)->R:::Visits an annotation value.
javax.lang.model.element.AnnotationValueVisitor#visit(AnnotationValue)->R:::A convenience method equivalent to visit(av, null).
javax.lang.model.element.AnnotationValueVisitor#visitBoolean(boolean, P)->R:::Visits a boolean value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitByte(byte, P)->R:::Visits a byte value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitChar(char, P)->R:::Visits a char value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitDouble(double, P)->R:::Visits a double value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitFloat(float, P)->R:::Visits a float value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitInt(int, P)->R:::Visits an int value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitLong(long, P)->R:::Visits a long value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitShort(short, P)->R:::Visits a short value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitString(String, P)->R:::Visits a string value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitType(TypeMirror, P)->R:::Visits a type value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitEnumConstant(VariableElement, P)->R:::Visits an enum value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitAnnotation(AnnotationMirror, P)->R:::Visits an annotation value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitArray(List, P)->R:::Visits an array value in an annotation.
javax.lang.model.element.AnnotationValueVisitor#visitUnknown(AnnotationValue, P)->R:::Visits an unknown kind of annotation value
javax.lang.model.element.Element#asType()->TypeMirror:::Returns the type defined by this element
javax.lang.model.element.Element#getKind()->ElementKind:::Returns the kind of this element.
javax.lang.model.element.Element#getModifiers()->Set:::Returns the modifiers of this element, excluding annotations
javax.lang.model.element.Element#getSimpleName()->Name:::Returns the simple (unqualified) name of this element
javax.lang.model.element.Element#getEnclosingElement()->Element:::Returns the innermost element within which this element is, loosely speaking, enclosed
javax.lang.model.element.Element#getEnclosedElements()->List:::Returns the elements that are, loosely speaking, directly enclosed by this element
javax.lang.model.element.Element#equals(Object)->boolean:::Returns true if the argument represents the same element as this, or false otherwise.
javax.lang.model.element.Element#hashCode()->int:::Obeys the general contract of Object#hashCode Object.hashCode.
javax.lang.model.element.Element#getAnnotationMirrors()->List:::To get inherited annotations as well, use {@link Elements#getAllAnnotationMirrors(Element) getAllAnnotationMirrors.
javax.lang.model.element.Element#getAnnotation(Class)->A::: element get annotation
javax.lang.model.element.Element#accept(ElementVisitor, P)->R:::Applies a visitor to this element.
javax.lang.model.element.ElementVisitor#visit(Element, P)->R:::Visits an element.
javax.lang.model.element.ElementVisitor#visit(Element)->R:::A convenience method equivalent to visit(e, null).
javax.lang.model.element.ElementVisitor#visitPackage(PackageElement, P)->R:::Visits a package element.
javax.lang.model.element.ElementVisitor#visitType(TypeElement, P)->R:::Visits a type element.
javax.lang.model.element.ElementVisitor#visitVariable(VariableElement, P)->R:::Visits a variable element.
javax.lang.model.element.ElementVisitor#visitExecutable(ExecutableElement, P)->R:::Visits an executable element.
javax.lang.model.element.ElementVisitor#visitTypeParameter(TypeParameterElement, P)->R:::Visits a type parameter element.
javax.lang.model.element.ElementVisitor#visitUnknown(Element, P)->R:::Visits an unknown kind of element
javax.lang.model.element.ElementVisitor#visitModule(ModuleElement, P)->R:::Visits a module element.
javax.lang.model.element.ExecutableElement#getTypeParameters()->List:::Returns the formal type parameters of this executable in declaration order.
javax.lang.model.element.ExecutableElement#getReturnType()->TypeMirror:::Returns the return type of this executable
javax.lang.model.element.ExecutableElement#getParameters()->List:::Returns the formal parameters of this executable
javax.lang.model.element.ExecutableElement#getReceiverType()->TypeMirror:::Returns the receiver type of this executable, or javax.lang.model.type.NoType NoType with kind javax.lang.model.type.TypeKind#NONE NONE if the executable has no receiver type
javax.lang.model.element.ExecutableElement#isVarArgs()->boolean:::Returns true if this method or constructor accepts a variable number of arguments and returns false otherwise.
javax.lang.model.element.ExecutableElement#isDefault()->boolean:::Returns true if this method is a default method and returns false otherwise.
javax.lang.model.element.ExecutableElement#getThrownTypes()->List:::Returns the exceptions and other throwables listed in this method or constructor's throws clause in declaration order.
javax.lang.model.element.ExecutableElement#getDefaultValue()->AnnotationValue:::Returns the default value if this executable is an annotation type element
javax.lang.model.element.ExecutableElement#getSimpleName()->Name:::Returns the simple name of a constructor, method, or initializer
javax.lang.model.element.ModuleElement#getQualifiedName()->Name:::Returns the fully qualified name of this module
javax.lang.model.element.ModuleElement#getSimpleName()->Name:::Returns the simple name of this module
javax.lang.model.element.ModuleElement#getEnclosedElements()->List:::Returns the packages within this module.
javax.lang.model.element.ModuleElement#isOpen()->boolean:::Returns true if this is an open module and false otherwise.
javax.lang.model.element.ModuleElement#isUnnamed()->boolean:::Returns true if this is an unnamed module and false otherwise.
javax.lang.model.element.ModuleElement#getEnclosingElement()->Element:::Returns null since a module is not enclosed by another element.
javax.lang.model.element.ModuleElement#getDirectives()->List:::Returns the directives contained in the declaration of this module.
javax.lang.model.element.ModuleElement.Directive#getKind()->DirectiveKind:::Returns the kind of this directive.
javax.lang.model.element.ModuleElement.Directive#accept(DirectiveVisitor, P)->R:::Applies a visitor to this directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visit(Directive)->R:::Visits any directive as if by passing itself to that directive's Directive#accept accept method and passing null for the additional parameter.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visit(Directive, P)->R:::Visits any directive as if by passing itself to that directive's Directive#accept accept method.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitRequires(RequiresDirective, P)->R:::Visits a requires directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitExports(ExportsDirective, P)->R:::Visits an exports directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitOpens(OpensDirective, P)->R:::Visits an opens directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitUses(UsesDirective, P)->R:::Visits a uses directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitProvides(ProvidesDirective, P)->R:::Visits a provides directive.
javax.lang.model.element.ModuleElement.DirectiveVisitor#visitUnknown(Directive, P)->R:::Visits an unknown directive
javax.lang.model.element.ModuleElement.RequiresDirective#isStatic()->boolean:::Returns whether or not this is a static dependency.
javax.lang.model.element.ModuleElement.RequiresDirective#isTransitive()->boolean:::Returns whether or not this is a transitive dependency.
javax.lang.model.element.ModuleElement.RequiresDirective#getDependency()->ModuleElement:::Returns the module that is required
javax.lang.model.element.ModuleElement.ExportsDirective#getPackage()->PackageElement:::Returns the package being exported.
javax.lang.model.element.ModuleElement.ExportsDirective#getTargetModules()->List:::Returns the specific modules to which the package is being exported, or null, if the package is exported to all modules which have readability to this module.
javax.lang.model.element.ModuleElement.OpensDirective#getPackage()->PackageElement:::Returns the package being opened.
javax.lang.model.element.ModuleElement.OpensDirective#getTargetModules()->List:::Returns the specific modules to which the package is being open or null, if the package is open all modules which have readability to this module.
javax.lang.model.element.ModuleElement.ProvidesDirective#getService()->TypeElement:::Returns the service being provided.
javax.lang.model.element.ModuleElement.ProvidesDirective#getImplementations()->List:::Returns the implementations of the service being provided.
javax.lang.model.element.ModuleElement.UsesDirective#getService()->TypeElement:::Returns the service that is used.
javax.lang.model.element.Name#equals(Object)->boolean:::Returns true if the argument represents the same name as this, and false otherwise
javax.lang.model.element.Name#hashCode()->int:::Obeys the general contract of Object#hashCode Object.hashCode.
javax.lang.model.element.Name#contentEquals(CharSequence)->boolean:::Compares this name to the specified CharSequence
javax.lang.model.element.PackageElement#getQualifiedName()->Name:::Returns the fully qualified name of this package
javax.lang.model.element.PackageElement#getSimpleName()->Name:::Returns the simple name of this package
javax.lang.model.element.PackageElement#getEnclosedElements()->List:::Returns the NestingKind#TOP_LEVEL top-level classes and interfaces within this package
javax.lang.model.element.PackageElement#isUnnamed()->boolean:::Returns true if this is an unnamed package and false otherwise.
javax.lang.model.element.PackageElement#getEnclosingElement()->Element:::Returns the enclosing module if such a module exists; otherwise returns null
javax.lang.model.element.Parameterizable#getTypeParameters()->List:::Returns the formal type parameters of an element in declaration order.
javax.lang.model.element.QualifiedNameable#getQualifiedName()->Name:::Returns the fully qualified name of an element.
javax.lang.model.element.TypeElement#getEnclosedElements()->List:::Returns the fields, methods, constructors, and member types that are directly declared in this class or interface
javax.lang.model.element.TypeElement#getNestingKind()->NestingKind:::Returns the nesting kind of this type element.
javax.lang.model.element.TypeElement#getQualifiedName()->Name:::Returns the fully qualified name of this type element
javax.lang.model.element.TypeElement#getSimpleName()->Name:::Returns the simple name of this type element
javax.lang.model.element.TypeElement#getSuperclass()->TypeMirror:::Returns the direct superclass of this type element
javax.lang.model.element.TypeElement#getInterfaces()->List:::Returns the interface types directly implemented by this class or extended by this interface.
javax.lang.model.element.TypeElement#getTypeParameters()->List:::Returns the formal type parameters of this type element in declaration order.
javax.lang.model.element.TypeElement#getEnclosingElement()->Element:::Returns the package of a top-level type and returns the immediately lexically enclosing element for a NestingKind#isNested nested type.
javax.lang.model.element.TypeParameterElement#getGenericElement()->Element:::Returns the generic class, interface, method, or constructor that is parameterized by this type parameter.
javax.lang.model.element.TypeParameterElement#getBounds()->List:::Returns the bounds of this type parameter
javax.lang.model.element.TypeParameterElement#getEnclosingElement()->Element:::Returns the TypeParameterElement#getGenericElement generic element of this type parameter.
javax.lang.model.element.UnknownAnnotationValueException#getUnknownAnnotationValue()->AnnotationValue:::Returns the unknown annotation value
javax.lang.model.element.UnknownAnnotationValueException#getArgument()->Object:::Returns the additional argument.
javax.lang.model.element.UnknownDirectiveException#getUnknownDirective()->ModuleElement.Directive:::Returns the unknown directive
javax.lang.model.element.UnknownDirectiveException#getArgument()->Object:::Returns the additional argument.
javax.lang.model.element.UnknownElementException#getUnknownElement()->Element:::Returns the unknown element
javax.lang.model.element.UnknownElementException#getArgument()->Object:::Returns the additional argument.
javax.lang.model.element.VariableElement#getConstantValue()->Object:::Returns the value of this variable if this is a final field initialized to a compile-time constant
javax.lang.model.element.VariableElement#getSimpleName()->Name:::Returns the simple name of this variable element
javax.lang.model.element.VariableElement#getEnclosingElement()->Element:::Returns the enclosing element of this variable

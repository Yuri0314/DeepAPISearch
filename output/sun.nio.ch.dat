AllocatedNativeObject#free():::Frees the native memory area associated with this object.:::if->unsafe->freeMemory
AsynchronousChannelGroupImpl#threadExit(Runnable, boolean):::Invoked by tasks as they terminate:::if->try->if->Invoker->isBoundToAnyGroup->pool->executor->bindToGroup->execute->else->startInternalThread->return->threadCount->get->catch->finally->return->threadCount->decrementAndGet
AsynchronousChannelGroupImpl#executeOnHandlerTask(Runnable):::Wakes up a thread waiting for I/O events to execute the given task.:::
AsynchronousChannelGroupImpl#executeOnPooledThread(Runnable):::For a fixed thread pool the task is queued to a thread waiting on I/O events:::if->isFixedThreadPool->executeOnHandlerTask->else->pool->executor->bindToGroup->execute
AsynchronousChannelGroupImpl#isEmpty():::Returns true if there are no channels in the group:::
AsynchronousChannelGroupImpl#attachForeignChannel(Channel, FileDescriptor):::Attaches a foreign channel to this group.:::
AsynchronousChannelGroupImpl#detachForeignChannel(Object):::Detaches a foreign channel from this group.:::
AsynchronousChannelGroupImpl#closeAllChannels():::Closes all channels in the group:::
AsynchronousChannelGroupImpl#shutdownHandlerTasks():::Shutdown all tasks waiting for I/O events.:::
AsynchronousChannelGroupImpl#detachFromThreadPool():::For use by AsynchronousFileChannel to release resources without shutting down the thread pool.:::if->shutdown->getAndSet->throw->new->AssertionError->if->isEmpty->throw->new->AssertionError->shutdownHandlerTasks
AsynchronousChannelGroupImpl#execute(Runnable):::Executes the given command on one of the channel group's pooled threads.:::sm->System->getSecurityManager->if->acc->AccessController->getContext->delegate->new->Runnable->executeOnPooledThread
AsynchronousFileChannelImpl#begin():::Marks the beginning of an I/O operation.:::closeLock->readLock->lock->if->throw->new->ClosedChannelException
AsynchronousFileChannelImpl#end():::Marks the end of an I/O operation.:::closeLock->readLock->unlock
AsynchronousFileChannelImpl#end(boolean):::Marks end of I/O operation:::end->if->isOpen->throw->new->AsynchronousCloseException
AsynchronousFileChannelImpl#addToFileLockTable(long, long, boolean):::Adds region to lock table:::fli->try->closeLock->readLock->lock->if->return->try->ensureFileLockTableInitialized->catch->throw->new->AssertionError->finally->new->FileLockImpl->fileLockTable->add->catch->finally->end->return
AsynchronousFileChannelImpl#implRelease(FileLockImpl):::Releases the given file lock.:::
AsynchronousFileChannelImpl#release(FileLockImpl):::Invoked by FileLockImpl to release the given file lock and remove it from the lock table.:::try->begin->implRelease->removeFromFileLockTable->catch->finally->end
AsynchronousServerSocketChannelImpl#begin():::Marks beginning of access to file descriptor/handle:::closeLock->readLock->lock->if->isOpen->throw->new->ClosedChannelException
AsynchronousServerSocketChannelImpl#end():::Marks end of access to file descriptor/handle:::closeLock->readLock->unlock
AsynchronousServerSocketChannelImpl#implClose():::Invoked to close file descriptor/handle.:::
AsynchronousServerSocketChannelImpl#implAccept(Object, CompletionHandler):::Invoked by accept to accept connection:::
AsynchronousSocketChannelImpl#begin():::Marks beginning of access to file descriptor/handle:::closeLock->readLock->lock->if->isOpen->throw->new->ClosedChannelException
AsynchronousSocketChannelImpl#end():::Marks end of access to file descriptor/handle:::closeLock->readLock->unlock
AsynchronousSocketChannelImpl#implClose():::Invoked to close socket and release other resources.:::
AsynchronousSocketChannelImpl#implConnect(SocketAddress, A, CompletionHandler):::Invoked by connect to initiate the connect operation.:::
AsynchronousSocketChannelImpl#implRead(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler):::Invoked by read to initiate the I/O operation.:::
AsynchronousSocketChannelImpl#implWrite(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler):::Invoked by write to initiate the I/O operation.:::
Cancellable#onCancel(PendingFuture):::Invoked to notify channel that cancel has been invoked while holding the Future's lock.:::
DatagramChannelImpl#block(MembershipKeyImpl, InetAddress):::Block datagrams from given source if a memory to receive all datagrams.:::synchronized->if->key->isValid->throw->new->IllegalStateException->if->source->isAnyLocalAddress->throw->new->IllegalArgumentException->if->source->isMulticastAddress->throw->new->IllegalArgumentException->if->source->getClass->key->group->getClass->throw->new->IllegalArgumentException->n->if->key6->Net->key6->groupAddress->key6->index->Net->inet6AsByteArray->block6->else->key4->Net->key4->groupAddress->key4->interfaceAddress->Net->inet4AsInt->block4->if->throw->new->UnsupportedOperationException
DatagramChannelImpl#unblock(MembershipKeyImpl, InetAddress):::Unblock given source.:::synchronized->if->key->isValid->throw->new->IllegalStateException->try->if->key6->Net->key6->groupAddress->key6->index->Net->inet6AsByteArray->unblock6->else->key4->Net->key4->groupAddress->key4->interfaceAddress->Net->inet4AsInt->unblock4->catch->throw->new->AssertionError->finally
DatagramChannelImpl#implCloseSelectableChannel():::Invoked by implCloseChannel to close the channel:::blocking->interrupted->synchronized->isBlocking->if->registry->invalidateAll->if->synchronized->reader->writer->if->nd->preClose->if->NativeThread->signal->if->NativeThread->signal->while->try->stateLock->wait->catch->finally->else->readLock->lock->try->writeLock->lock->writeLock->unlock->catch->finally->readLock->unlock->synchronized->if->isRegistered->kill->if->Thread->currentThread->interrupt
DatagramChannelImpl#translateReadyOps(int, int, SelectionKeyImpl):::Translates native poll revent set into a ready operation set:::intOps->ski->nioInterestOps->oldOps->ski->nioReadyOps->newOps->if->return->if->ski->nioReadyOps->return->if->if->ski->nioReadyOps->return
DatagramChannelImpl#pollRead(long):::Poll this channel's socket for reading up to the given timeout.:::blocking->isBlocking->readLock->lock->try->polled->try->beginRead->events->Net->poll->catch->finally->endRead->return->catch->finally->readLock->unlock
DatagramChannelImpl#translateInterestOps(int):::Translates an interest operation set into a native poll event set:::newOps->if->if->if->return
DefaultAsynchronousChannelProvider#create():::Returns the default AsynchronousChannelProvider.:::return->new->WindowsAsynchronousChannelProvider
DefaultSelectorProvider#create():::Returns the default SelectorProvider.:::return->new->sun.nio.ch.WindowsSelectorProvider
FileChannelImpl#getMappedBufferPool():::Invoked by sun.management.ManagementFactoryHelper to create the management interface for mapped buffers.:::return->new->JavaNioAccess.BufferPool
FileDispatcher#seek(FileDescriptor, long):::Sets or reports this file's position If offset is -1, the current position is returned otherwise the position is set to offset.:::
FileDispatcher#duplicateForMapping(FileDescriptor):::Returns a dup of fd if a file descriptor is required for memory-mapping operations, otherwise returns an invalid FileDescriptor (meaning a newly allocated FileDescriptor):::
Invoker#bindToGroup(AsynchronousChannelGroupImpl):::Binds this thread to the given group:::myGroupAndInvokeCount->new->GroupAndInvokeCount->set
Invoker#getGroupAndInvokeCount():::Returns the GroupAndInvokeCount object for this thread.:::return->myGroupAndInvokeCount->get
Invoker#isBoundToAnyGroup():::Returns true if the current thread is in a channel group's thread pool:::return->myGroupAndInvokeCount->get
Invoker#mayInvokeDirect(GroupAndInvokeCount, AsynchronousChannelGroupImpl):::Returns true if the current thread is in the given channel's thread pool and we haven't exceeded the maximum number of handler frames on the stack.:::if->myGroupAndInvokeCount->group->myGroupAndInvokeCount->invokeCount->return->return
Invoker#invokeUnchecked(CompletionHandler, A, V, Throwable):::Invoke handler without checking the thread identity or number of handlers on the thread stack.:::if->handler->completed->else->handler->failed->Thread->interrupted->if->System->getSecurityManager->me->Thread->currentThread->if->thisGroupAndInvokeCount->myGroupAndInvokeCount->get->eraseThreadLocals->if->myGroupAndInvokeCount->set
Invoker#invokeDirect(GroupAndInvokeCount, CompletionHandler, A, V, Throwable):::Invoke handler assuming thread identity already checked:::myGroupAndInvokeCount->incrementInvokeCount->Invoker->invokeUnchecked
Invoker#invoke(AsynchronousChannel, CompletionHandler, A, V, Throwable):::Invokes the handler:::invokeDirect->identityOkay->thisGroupAndInvokeCount->myGroupAndInvokeCount->get->if->if->thisGroupAndInvokeCount->group->group->if->thisGroupAndInvokeCount->invokeCount->if->invokeDirect->else->try->invokeIndirectly->catch->if->invokeDirect->else->throw->new->ShutdownChannelGroupException->finally
Invoker#invokeIndirectly(AsynchronousChannel, CompletionHandler, A, V, Throwable):::Invokes the handler indirectly via the channel group's thread pool.:::try->group->new->Runnable->executeOnPooledThread->catch->throw->new->ShutdownChannelGroupException->finally
Invoker#invokeIndirectly(CompletionHandler, A, V, Throwable, Executor):::Invokes the handler "indirectly" in the given Executor:::try->executor->new->Runnable->execute->catch->throw->new->ShutdownChannelGroupException->finally
Invoker#invokeOnThreadInThreadPool(Groupable, Runnable):::Invokes the given task on the thread pool associated with the given channel:::invokeDirect->thisGroupAndInvokeCount->myGroupAndInvokeCount->get->targetGroup->channel->group->if->else->try->if->task->run->else->targetGroup->executeOnPooledThread->catch->throw->new->ShutdownChannelGroupException->finally
Invoker#invokeUnchecked(PendingFuture):::Invoke handler with completed result:::handler->future->handler->if->future->attachment->future->value->future->exception->invokeUnchecked
Invoker#invoke(PendingFuture):::Invoke handler with completed result:::handler->future->handler->if->future->channel->future->attachment->future->value->future->exception->invoke
Invoker#invokeIndirectly(PendingFuture):::Invoke handler with completed result:::handler->future->handler->if->future->channel->future->attachment->future->value->future->exception->invokeIndirectly
Iocp.OverlappedChannel#getByOverlapped(long):::Returns a reference to the pending I/O result.:::
Iocp#associate(OverlappedChannel, long):::Associate the given handle with this group:::keyToChannelLock->writeLock->lock->key->try->if->isShutdown->throw->new->ShutdownChannelGroupException->do->while->keyToChannel->containsKey->if->createIoCompletionPort->keyToChannel->put->catch->finally->keyToChannelLock->writeLock->unlock->return
Iocp#disassociate(int):::Disassociate channel from the group.:::checkForShutdown->keyToChannelLock->writeLock->lock->try->keyToChannel->remove->if->keyToChannel->isEmpty->catch->finally->keyToChannelLock->writeLock->unlock->if->isShutdown->try->shutdownNow->catch->finally
Iocp#makeStale(Long):::Invoked when a channel associated with this port is closed before notifications for all outstanding I/O operations have been received.:::synchronized->staleIoSet->add
Iocp.ResultHandler#completed(int, boolean):::Invoked if the I/O operation completes successfully.:::
Iocp.ResultHandler#failed(int, IOException):::Invoked if the I/O operation fails.:::
IOUtil#makePipe(boolean):::Returns two file descriptors for a pipe encoded in a long:::
IOUtil#drain(int):::Read and discard all bytes.:::
IOUtil#drain1(int):::Read and discard at most one byte:::
IOUtil#load():::Used to trigger loading of native libraries:::
MembershipRegistry#checkMembership(InetAddress, NetworkInterface, InetAddress):::Checks registry for membership of the group on the given network interface.:::if->keys->groups->get->if->foreach->if->key->networkInterface->equals->if->if->key->sourceAddress->return->throw->new->IllegalStateException->if->key->sourceAddress->throw->new->IllegalStateException->if->source->key->sourceAddress->equals->return->return
MembershipRegistry#add(MembershipKeyImpl):::Add membership to the registry, returning a new membership key.:::group->key->group->keys->if->new->HashMap<>->else->groups->get->if->new->LinkedList<>->groups->put->keys->add
MembershipRegistry#remove(MembershipKeyImpl):::Remove a key from the registry:::group->key->group->keys->groups->get->if->i->keys->iterator->while->i->hasNext->if->i->next->i->remove->break->if->keys->isEmpty->groups->remove
MembershipRegistry#invalidateAll():::Invalidate all keys in the registry:::if->foreach->groups->keySet->foreach->groups->get->key->invalidate
NativeDispatcher#needsPositionLock():::Returns true if pread/pwrite needs to be synchronized with position sensitive methods.:::return
NativeObject#address():::Returns the native base address of this native object.:::return
NativeObject#subObject(int):::Creates a new native object starting at the given offset from the base of this native object.:::return->new->NativeObject
NativeObject#getObject(int):::Reads an address from this native object at the given offset and constructs a native object using that address.:::newAddress->switch->addressSize->unsafe->getLong->break->unsafe->getInt->break->throw->new->InternalError->return->new->NativeObject
NativeObject#putObject(int, NativeObject):::Writes the base address of the given native object at the given offset of this native object.:::switch->addressSize->putLong->break->putInt->break->throw->new->InternalError
NativeObject#getByte(int):::Reads a byte starting at the given offset from base of this native object.:::return->unsafe->getByte
NativeObject#putByte(int, byte):::Writes a byte at the specified offset from this native object's base address.:::unsafe->putByte
NativeObject#getShort(int):::Reads a short starting at the given offset from base of this native object.:::return->unsafe->getShort
NativeObject#putShort(int, short):::Writes a short at the specified offset from this native object's base address.:::unsafe->putShort
NativeObject#getChar(int):::Reads a char starting at the given offset from base of this native object.:::return->unsafe->getChar
NativeObject#putChar(int, char):::Writes a char at the specified offset from this native object's base address.:::unsafe->putChar
NativeObject#getInt(int):::Reads an int starting at the given offset from base of this native object.:::return->unsafe->getInt
NativeObject#putInt(int, int):::Writes an int at the specified offset from this native object's base address.:::unsafe->putInt
NativeObject#getLong(int):::Reads a long starting at the given offset from base of this native object.:::return->unsafe->getLong
NativeObject#putLong(int, long):::Writes a long at the specified offset from this native object's base address.:::unsafe->putLong
NativeObject#getFloat(int):::Reads a float starting at the given offset from base of this native object.:::return->unsafe->getFloat
NativeObject#putFloat(int, float):::Writes a float at the specified offset from this native object's base address.:::unsafe->putFloat
NativeObject#getDouble(int):::Reads a double starting at the given offset from base of this native object.:::return->unsafe->getDouble
NativeObject#putDouble(int, double):::Writes a double at the specified offset from this native object's base address.:::unsafe->putDouble
NativeObject#addressSize():::Returns the native architecture's address size in bytes.:::return->unsafe->addressSize
NativeObject#byteOrder():::Returns the byte order of the underlying hardware.:::if->return->a->unsafe->allocateMemory->try->unsafe->putLong->b->unsafe->getByte->switch->break->break->catch->finally->unsafe->freeMemory->return
NativeObject#pageSize():::Returns the page size of the underlying hardware.:::value->if->unsafe->pageSize->return
Net#isIPv6Available():::Tells whether dual-IPv4/IPv6 sockets should be used.:::if->isIPv6Available0->return
Net#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.:::if->isReusePortAvailable0->return
Net#useExclusiveBind():::Returns true if exclusive binding is on:::return
Net#canIPv6SocketJoinIPv4Group():::Tells whether IPv6 sockets can join IPv4 multicast groups:::return->canIPv6SocketJoinIPv4Group0
Net#canJoin6WithIPv4Group():::Tells whether #join6 can be used to join an IPv4 multicast group (IPv4 group as IPv4-mapped IPv6 address):::return->canJoin6WithIPv4Group0
Net#getRevealedLocalAddress(InetSocketAddress):::Returns the local address after performing a SecurityManager#checkConnect.:::sm->System->getSecurityManager->if->return->try->sm->addr->getAddress->getHostAddress->checkConnect->catch->addr->getPort->getLoopbackAddress->finally->return
Net#anyInet4Address(NetworkInterface):::Returns any IPv4 address of the given network interface, or null if the interface does not have any IPv4 addresses.:::return->AccessController->new->PrivilegedAction<Inet4Address>->doPrivileged
Net#inet4AsInt(InetAddress):::Returns an IPv4 address as an int.:::if->addr->ia->getAddress->address->return->throw->new->AssertionError
Net#inet4FromInt(int):::Returns an InetAddress from the given IPv4 address represented as an int.:::addr->new->byteArr->try->return->InetAddress->getByAddress->catch->throw->new->AssertionError->finally
Net#inet6AsByteArray(InetAddress):::Returns an IPv6 address as a byte array:::if->return->ia->getAddress->if->ip4address->ia->getAddress->address->new->byteArr->return->throw->new->AssertionError
Net#join4(FileDescriptor, int, int, int):::Join IPv4 multicast group:::return->joinOrDrop4
Net#drop4(FileDescriptor, int, int, int):::Drop membership of IPv4 multicast group:::joinOrDrop4
Net#block4(FileDescriptor, int, int, int):::Block IPv4 source:::return->blockOrUnblock4
Net#unblock4(FileDescriptor, int, int, int):::Unblock IPv6 source:::blockOrUnblock4
Net#join6(FileDescriptor, byte[], int, byte[]):::Join IPv6 multicast group:::return->joinOrDrop6
Net#drop6(FileDescriptor, byte[], int, byte[]):::Drop membership of IPv6 multicast group:::joinOrDrop6
Net#block6(FileDescriptor, byte[], int, byte[]):::Block IPv6 source:::return->blockOrUnblock6
Net#unblock6(FileDescriptor, byte[], int, byte[]):::Unblock IPv6 source:::blockOrUnblock6
PendingFuture#setResult(V):::Sets the result, or a no-op if the result or exception is already set.:::synchronized->if->return->if->timeoutTask->cancel->if->latch->countDown
PendingFuture#setFailure(Throwable):::Sets the result, or a no-op if the result or exception is already set.:::if->new->IOException->synchronized->if->return->if->timeoutTask->cancel->if->latch->countDown
PendingFuture#setResult(V, Throwable):::Sets the result:::if->setResult->else->setFailure
SelChImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl):::Adds the specified ops if present in interestOps:::
SelChImpl#translateAndSetReadyOps(int, SelectionKeyImpl):::Sets the specified ops if present in interestOps:::
SelChImpl#translateInterestOps(int):::Translates an interest operation set into a native event set:::
SelectorImpl#begin(boolean):::Marks the beginning of a select operation that might block:::if->begin
SelectorImpl#end(boolean):::Marks the end of a select operation that may have blocked:::if->end
SelectorImpl#doSelect(Consumer, long):::Selects the keys for channels that are ready for I/O operations.:::
SelectorImpl#implClose():::Invoked by implCloseSelector to close the selector.:::
SelectorImpl#implRegister(SelectionKeyImpl):::Register the key in the selector:::ensureOpen
SelectorImpl#implDereg(SelectionKeyImpl):::Removes the key from the selector:::
SelectorImpl#processDeregisterQueue():::Invoked by selection operations to process the cancelled-key set:::cks->cancelledKeys->synchronized->if->cks->isEmpty->i->cks->iterator->while->i->hasNext->ski->i->next->i->remove->implDereg->selectedKeys->remove->keys->remove->deregister->ch->ski->channel->if->ch->isOpen->ch->isRegistered->kill
SelectorImpl#processReadyEvents(int, SelectionKeyImpl, Consumer):::Invoked by selection operations to handle ready events:::if->ski->translateAndSetReadyOps->if->ski->nioReadyOps->ski->nioInterestOps->action->accept->ensureOpen->return->else->if->selectedKeys->contains->if->ski->translateAndUpdateReadyOps->return->else->ski->translateAndSetReadyOps->if->ski->nioReadyOps->ski->nioInterestOps->selectedKeys->add->return->return
SelectorImpl#setEventOps(SelectionKeyImpl):::Invoked by interestOps to ensure the interest ops are updated at the next selection operation.:::
ServerSocketChannelImpl#implCloseSelectableChannel():::Invoked by implCloseChannel to close the channel:::interrupted->blocking->synchronized->isBlocking->if->synchronized->th->if->nd->preClose->NativeThread->signal->while->try->stateLock->wait->catch->finally->else->acceptLock->lock->acceptLock->unlock->synchronized->if->isRegistered->kill->if->Thread->currentThread->interrupt
ServerSocketChannelImpl#isBound():::Returns true if channel's socket is bound:::synchronized->return
ServerSocketChannelImpl#localAddress():::Returns the local address, or null if not bound:::synchronized->return
ServerSocketChannelImpl#pollAccept(long):::Poll this channel's socket for a new connection up to the given timeout.:::acceptLock->lock->try->polled->try->begin->events->Net->poll->catch->finally->end->return->catch->finally->acceptLock->unlock
ServerSocketChannelImpl#translateReadyOps(int, int, SelectionKeyImpl):::Translates native poll revent set into a ready operation set:::intOps->ski->nioInterestOps->oldOps->ski->nioReadyOps->newOps->if->return->if->ski->nioReadyOps->return->if->ski->nioReadyOps->return
ServerSocketChannelImpl#translateInterestOps(int):::Translates an interest operation set into a native poll event set:::newOps->if->return
SocketChannelImpl#sendOutOfBandData(byte):::Writes a byte of out of band data.:::writeLock->lock->try->blocking->isBlocking->n->try->beginWrite->if->do->sendOutOfBandData->while->isOpen->else->sendOutOfBandData->catch->finally->endWrite->if->throw->new->AsynchronousCloseException->return->IOStatus->normalize->catch->finally->writeLock->unlock
SocketChannelImpl#localAddress():::Returns the local address, or null if not bound:::synchronized->return
SocketChannelImpl#remoteAddress():::Returns the remote address, or null if not connected:::synchronized->return
SocketChannelImpl#implCloseSelectableChannel():::Invoked by implCloseChannel to close the channel:::blocking->connected->interrupted->synchronized->isBlocking->if->synchronized->reader->writer->if->nd->preClose->if->NativeThread->signal->if->NativeThread->signal->while->try->stateLock->wait->catch->finally->else->readLock->lock->try->writeLock->lock->writeLock->unlock->catch->finally->readLock->unlock->synchronized->if->isRegistered->try->opt->interval->Net->getSocketOption->if->if->Net->setSocketOption->Net->shutdown->catch->finally->if->isRegistered->kill->if->Thread->currentThread->interrupt
SocketChannelImpl#pollRead(long):::Poll this channel's socket for reading up to the given timeout.:::blocking->isBlocking->readLock->lock->try->polled->try->beginRead->events->Net->poll->catch->finally->endRead->return->catch->finally->readLock->unlock
SocketChannelImpl#pollConnected(long):::Poll this channel's socket for a connection, up to the given timeout.:::blocking->isBlocking->readLock->lock->try->writeLock->lock->try->polled->try->beginFinishConnect->events->Net->poll->catch->finally->endFinishConnect->return->catch->finally->writeLock->unlock->catch->finally->readLock->unlock
SocketChannelImpl#translateReadyOps(int, int, SelectionKeyImpl):::Translates native poll revent ops into a ready operation ops:::intOps->ski->nioInterestOps->oldOps->ski->nioReadyOps->newOps->if->return->if->ski->nioReadyOps->return->connected->isConnected->if->if->isConnectionPending->if->ski->nioReadyOps->return
SocketChannelImpl#translateInterestOps(int):::Translates an interest operation set into a native poll event set:::newOps->if->if->if->return
Util#getTemporaryDirectBuffer(int):::Returns a temporary buffer of at least the given size:::if->isBufferTooLarge->return->ByteBuffer->allocateDirect->cache->bufferCache->get->buf->cache->get->if->return->else->if->cache->isEmpty->cache->removeFirst->free->return->ByteBuffer->allocateDirect
Util#getTemporaryAlignedDirectBuffer(int, int):::Returns a temporary buffer of at least the given size and aligned to the alignment:::if->isBufferTooLarge->return->ByteBuffer->allocateDirect->alignedSlice->cache->bufferCache->get->buf->cache->get->if->if->buf->alignmentOffset->return->else->if->cache->isEmpty->cache->removeFirst->free->return->ByteBuffer->allocateDirect->alignedSlice
Util#releaseTemporaryDirectBuffer(ByteBuffer):::Releases a temporary buffer by returning to the cache or freeing it.:::offerFirstTemporaryDirectBuffer
Util#offerFirstTemporaryDirectBuffer(ByteBuffer):::Releases a temporary buffer by returning to the cache or freeing it:::if->isBufferTooLarge->free->return->cache->bufferCache->get->if->cache->offerFirst->free
Util#offerLastTemporaryDirectBuffer(ByteBuffer):::Releases a temporary buffer by returning to the cache or freeing it:::if->isBufferTooLarge->free->return->cache->bufferCache->get->if->cache->offerLast->free
WindowsAsynchronousSocketChannelImpl#getByOverlapped(long):::Invoked by Iocp when an I/O operation competes.:::return->ioCache->remove

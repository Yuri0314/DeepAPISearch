sun.nio.ch.AllocatedNativeObject#free()->void:::Frees the native memory area associated with this object.
sun.nio.ch.AsynchronousChannelGroupImpl#executor()->ExecutorService::: asynchronous channel group impl executor
sun.nio.ch.AsynchronousChannelGroupImpl#isFixedThreadPool()->boolean::: asynchronous channel group impl is fixed thread pool
sun.nio.ch.AsynchronousChannelGroupImpl#fixedThreadCount()->int::: asynchronous channel group impl fixed thread count
sun.nio.ch.AsynchronousChannelGroupImpl#startThreads(Runnable)->void::: asynchronous channel group impl start threads
sun.nio.ch.AsynchronousChannelGroupImpl#threadCount()->int::: asynchronous channel group impl thread count
sun.nio.ch.AsynchronousChannelGroupImpl#threadExit(Runnable, boolean)->int:::Invoked by tasks as they terminate
sun.nio.ch.AsynchronousChannelGroupImpl#executeOnHandlerTask(Runnable)->void:::Wakes up a thread waiting for I/O events to execute the given task.
sun.nio.ch.AsynchronousChannelGroupImpl#executeOnPooledThread(Runnable)->void:::For a fixed thread pool the task is queued to a thread waiting on I/O events
sun.nio.ch.AsynchronousChannelGroupImpl#offerTask(Runnable)->void::: asynchronous channel group impl offer task
sun.nio.ch.AsynchronousChannelGroupImpl#pollTask()->Runnable::: asynchronous channel group impl poll task
sun.nio.ch.AsynchronousChannelGroupImpl#schedule(Runnable, long, TimeUnit)->Future::: asynchronous channel group impl schedule
sun.nio.ch.AsynchronousChannelGroupImpl#isShutdown()->boolean::: asynchronous channel group impl is shutdown
sun.nio.ch.AsynchronousChannelGroupImpl#isTerminated()->boolean::: asynchronous channel group impl is terminated
sun.nio.ch.AsynchronousChannelGroupImpl#isEmpty()->boolean:::Returns true if there are no channels in the group
sun.nio.ch.AsynchronousChannelGroupImpl#attachForeignChannel(Channel, FileDescriptor)->Object:::Attaches a foreign channel to this group.
sun.nio.ch.AsynchronousChannelGroupImpl#detachForeignChannel(Object)->void:::Detaches a foreign channel from this group.
sun.nio.ch.AsynchronousChannelGroupImpl#closeAllChannels()->void:::Closes all channels in the group
sun.nio.ch.AsynchronousChannelGroupImpl#shutdownHandlerTasks()->void:::Shutdown all tasks waiting for I/O events.
sun.nio.ch.AsynchronousChannelGroupImpl#shutdown()->void::: asynchronous channel group impl shutdown
sun.nio.ch.AsynchronousChannelGroupImpl#shutdownNow()->void::: asynchronous channel group impl shutdown now
sun.nio.ch.AsynchronousChannelGroupImpl#detachFromThreadPool()->void:::For use by AsynchronousFileChannel to release resources without shutting down the thread pool.
sun.nio.ch.AsynchronousChannelGroupImpl#awaitTermination(long, TimeUnit)->boolean::: asynchronous channel group impl await termination
sun.nio.ch.AsynchronousChannelGroupImpl#execute(Runnable)->void:::Executes the given command on one of the channel group's pooled threads.
sun.nio.ch.AsynchronousFileChannelImpl#executor()->ExecutorService::: asynchronous file channel impl executor
sun.nio.ch.AsynchronousFileChannelImpl#isOpen()->boolean::: asynchronous file channel impl is open
sun.nio.ch.AsynchronousFileChannelImpl#begin()->void:::Marks the beginning of an I/O operation.
sun.nio.ch.AsynchronousFileChannelImpl#end()->void:::Marks the end of an I/O operation.
sun.nio.ch.AsynchronousFileChannelImpl#end(boolean)->void:::Marks end of I/O operation
sun.nio.ch.AsynchronousFileChannelImpl#implLock(long, long, boolean, A, CompletionHandler)->Future::: asynchronous file channel impl impl lock
sun.nio.ch.AsynchronousFileChannelImpl#lock(long, long, boolean)->Future::: asynchronous file channel impl lock
sun.nio.ch.AsynchronousFileChannelImpl#lock(long, long, boolean, A, CompletionHandler)->void::: asynchronous file channel impl lock
sun.nio.ch.AsynchronousFileChannelImpl#ensureFileLockTableInitialized()->void::: asynchronous file channel impl ensure file lock table initialized
sun.nio.ch.AsynchronousFileChannelImpl#invalidateAllLocks()->void::: asynchronous file channel impl invalidate all locks
sun.nio.ch.AsynchronousFileChannelImpl#addToFileLockTable(long, long, boolean)->FileLockImpl:::Adds region to lock table
sun.nio.ch.AsynchronousFileChannelImpl#removeFromFileLockTable(FileLockImpl)->void::: asynchronous file channel impl remove from file lock table
sun.nio.ch.AsynchronousFileChannelImpl#implRelease(FileLockImpl)->void:::Releases the given file lock.
sun.nio.ch.AsynchronousFileChannelImpl#release(FileLockImpl)->void:::Invoked by FileLockImpl to release the given file lock and remove it from the lock table.
sun.nio.ch.AsynchronousFileChannelImpl#implRead(ByteBuffer, long, A, CompletionHandler)->Future::: asynchronous file channel impl impl read
sun.nio.ch.AsynchronousFileChannelImpl#read(ByteBuffer, long)->Future::: asynchronous file channel impl read
sun.nio.ch.AsynchronousFileChannelImpl#read(ByteBuffer, long, A, CompletionHandler)->void::: asynchronous file channel impl read
sun.nio.ch.AsynchronousFileChannelImpl#implWrite(ByteBuffer, long, A, CompletionHandler)->Future::: asynchronous file channel impl impl write
sun.nio.ch.AsynchronousFileChannelImpl#write(ByteBuffer, long)->Future::: asynchronous file channel impl write
sun.nio.ch.AsynchronousFileChannelImpl#write(ByteBuffer, long, A, CompletionHandler)->void::: asynchronous file channel impl write
sun.nio.ch.AsynchronousServerSocketChannelImpl#isOpen()->boolean::: asynchronous server socket channel impl is open
sun.nio.ch.AsynchronousServerSocketChannelImpl#begin()->void:::Marks beginning of access to file descriptor/handle
sun.nio.ch.AsynchronousServerSocketChannelImpl#end()->void:::Marks end of access to file descriptor/handle
sun.nio.ch.AsynchronousServerSocketChannelImpl#implClose()->void:::Invoked to close file descriptor/handle.
sun.nio.ch.AsynchronousServerSocketChannelImpl#close()->void::: asynchronous server socket channel impl close
sun.nio.ch.AsynchronousServerSocketChannelImpl#implAccept(Object, CompletionHandler)->Future:::Invoked by accept to accept connection
sun.nio.ch.AsynchronousServerSocketChannelImpl#accept()->Future::: asynchronous server socket channel impl accept
sun.nio.ch.AsynchronousServerSocketChannelImpl#accept(A, CompletionHandler)->void::: asynchronous server socket channel impl accept
sun.nio.ch.AsynchronousServerSocketChannelImpl#isAcceptKilled()->boolean::: asynchronous server socket channel impl is accept killed
sun.nio.ch.AsynchronousServerSocketChannelImpl#onCancel(PendingFuture)->void::: asynchronous server socket channel impl on cancel
sun.nio.ch.AsynchronousServerSocketChannelImpl#bind(SocketAddress, int)->AsynchronousServerSocketChannel::: asynchronous server socket channel impl bind
sun.nio.ch.AsynchronousServerSocketChannelImpl#getLocalAddress()->SocketAddress::: asynchronous server socket channel impl get local address
sun.nio.ch.AsynchronousServerSocketChannelImpl#setOption(SocketOption, T)->AsynchronousServerSocketChannel::: asynchronous server socket channel impl set option
sun.nio.ch.AsynchronousServerSocketChannelImpl#getOption(SocketOption)->T::: asynchronous server socket channel impl get option
sun.nio.ch.AsynchronousServerSocketChannelImpl#supportedOptions()->Set>::: asynchronous server socket channel impl supported options
sun.nio.ch.AsynchronousServerSocketChannelImpl#toString()->String::: asynchronous server socket channel impl to string
sun.nio.ch.AsynchronousSocketChannelImpl#isOpen()->boolean::: asynchronous socket channel impl is open
sun.nio.ch.AsynchronousSocketChannelImpl#begin()->void:::Marks beginning of access to file descriptor/handle
sun.nio.ch.AsynchronousSocketChannelImpl#end()->void:::Marks end of access to file descriptor/handle
sun.nio.ch.AsynchronousSocketChannelImpl#implClose()->void:::Invoked to close socket and release other resources.
sun.nio.ch.AsynchronousSocketChannelImpl#close()->void::: asynchronous socket channel impl close
sun.nio.ch.AsynchronousSocketChannelImpl#enableReading(boolean)->void::: asynchronous socket channel impl enable reading
sun.nio.ch.AsynchronousSocketChannelImpl#enableReading()->void::: asynchronous socket channel impl enable reading
sun.nio.ch.AsynchronousSocketChannelImpl#enableWriting(boolean)->void::: asynchronous socket channel impl enable writing
sun.nio.ch.AsynchronousSocketChannelImpl#enableWriting()->void::: asynchronous socket channel impl enable writing
sun.nio.ch.AsynchronousSocketChannelImpl#killReading()->void::: asynchronous socket channel impl kill reading
sun.nio.ch.AsynchronousSocketChannelImpl#killWriting()->void::: asynchronous socket channel impl kill writing
sun.nio.ch.AsynchronousSocketChannelImpl#killConnect()->void::: asynchronous socket channel impl kill connect
sun.nio.ch.AsynchronousSocketChannelImpl#implConnect(SocketAddress, A, CompletionHandler)->Future:::Invoked by connect to initiate the connect operation.
sun.nio.ch.AsynchronousSocketChannelImpl#connect(SocketAddress)->Future::: asynchronous socket channel impl connect
sun.nio.ch.AsynchronousSocketChannelImpl#connect(SocketAddress, A, CompletionHandler)->void::: asynchronous socket channel impl connect
sun.nio.ch.AsynchronousSocketChannelImpl#implRead(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler)->Future:::Invoked by read to initiate the I/O operation.
sun.nio.ch.AsynchronousSocketChannelImpl#read(ByteBuffer)->Future::: asynchronous socket channel impl read
sun.nio.ch.AsynchronousSocketChannelImpl#read(ByteBuffer, long, TimeUnit, A, CompletionHandler)->void::: asynchronous socket channel impl read
sun.nio.ch.AsynchronousSocketChannelImpl#read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler)->void::: asynchronous socket channel impl read
sun.nio.ch.AsynchronousSocketChannelImpl#implWrite(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler)->Future:::Invoked by write to initiate the I/O operation.
sun.nio.ch.AsynchronousSocketChannelImpl#write(ByteBuffer)->Future::: asynchronous socket channel impl write
sun.nio.ch.AsynchronousSocketChannelImpl#write(ByteBuffer, long, TimeUnit, A, CompletionHandler)->void::: asynchronous socket channel impl write
sun.nio.ch.AsynchronousSocketChannelImpl#write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler)->void::: asynchronous socket channel impl write
sun.nio.ch.AsynchronousSocketChannelImpl#bind(SocketAddress)->AsynchronousSocketChannel::: asynchronous socket channel impl bind
sun.nio.ch.AsynchronousSocketChannelImpl#getLocalAddress()->SocketAddress::: asynchronous socket channel impl get local address
sun.nio.ch.AsynchronousSocketChannelImpl#setOption(SocketOption, T)->AsynchronousSocketChannel::: asynchronous socket channel impl set option
sun.nio.ch.AsynchronousSocketChannelImpl#getOption(SocketOption)->T::: asynchronous socket channel impl get option
sun.nio.ch.AsynchronousSocketChannelImpl#supportedOptions()->Set>::: asynchronous socket channel impl supported options
sun.nio.ch.AsynchronousSocketChannelImpl#getRemoteAddress()->SocketAddress::: asynchronous socket channel impl get remote address
sun.nio.ch.AsynchronousSocketChannelImpl#shutdownInput()->AsynchronousSocketChannel::: asynchronous socket channel impl shutdown input
sun.nio.ch.AsynchronousSocketChannelImpl#shutdownOutput()->AsynchronousSocketChannel::: asynchronous socket channel impl shutdown output
sun.nio.ch.AsynchronousSocketChannelImpl#toString()->String::: asynchronous socket channel impl to string
sun.nio.ch.Cancellable#onCancel(PendingFuture)->void:::Invoked to notify channel that cancel has been invoked while holding the Future's lock.
sun.nio.ch.ChannelInputStream#read(ReadableByteChannel, ByteBuffer, boolean)->int::: channel input stream read
sun.nio.ch.ChannelInputStream#read()->int::: channel input stream read
sun.nio.ch.ChannelInputStream#read(byte[], int, int)->int::: channel input stream read
sun.nio.ch.ChannelInputStream#read(ByteBuffer)->int::: channel input stream read
sun.nio.ch.ChannelInputStream#available()->int::: channel input stream available
sun.nio.ch.ChannelInputStream#close()->void::: channel input stream close
sun.nio.ch.CompletedFuture#withResult(V)->CompletedFuture::: completed future with result
sun.nio.ch.CompletedFuture#withFailure(Throwable)->CompletedFuture::: completed future with failure
sun.nio.ch.CompletedFuture#withResult(V, Throwable)->CompletedFuture::: completed future with result
sun.nio.ch.CompletedFuture#get()->V::: completed future get
sun.nio.ch.CompletedFuture#get(long, TimeUnit)->V::: completed future get
sun.nio.ch.CompletedFuture#isCancelled()->boolean::: completed future is cancelled
sun.nio.ch.CompletedFuture#isDone()->boolean::: completed future is done
sun.nio.ch.CompletedFuture#cancel(boolean)->boolean::: completed future cancel
sun.nio.ch.DatagramChannelImpl#socket()->DatagramSocket::: datagram channel impl socket
sun.nio.ch.DatagramChannelImpl#getLocalAddress()->SocketAddress::: datagram channel impl get local address
sun.nio.ch.DatagramChannelImpl#getRemoteAddress()->SocketAddress::: datagram channel impl get remote address
sun.nio.ch.DatagramChannelImpl#setOption(SocketOption, T)->DatagramChannel::: datagram channel impl set option
sun.nio.ch.DatagramChannelImpl#getOption(SocketOption)->T::: datagram channel impl get option
sun.nio.ch.DatagramChannelImpl#supportedOptions()->Set>::: datagram channel impl supported options
sun.nio.ch.DatagramChannelImpl#receive(ByteBuffer)->SocketAddress::: datagram channel impl receive
sun.nio.ch.DatagramChannelImpl#send(ByteBuffer, SocketAddress)->int::: datagram channel impl send
sun.nio.ch.DatagramChannelImpl#read(ByteBuffer)->int::: datagram channel impl read
sun.nio.ch.DatagramChannelImpl#read(ByteBuffer[], int, int)->long::: datagram channel impl read
sun.nio.ch.DatagramChannelImpl#write(ByteBuffer)->int::: datagram channel impl write
sun.nio.ch.DatagramChannelImpl#write(ByteBuffer[], int, int)->long::: datagram channel impl write
sun.nio.ch.DatagramChannelImpl#implConfigureBlocking(boolean)->void::: datagram channel impl impl configure blocking
sun.nio.ch.DatagramChannelImpl#localAddress()->InetSocketAddress::: datagram channel impl local address
sun.nio.ch.DatagramChannelImpl#remoteAddress()->InetSocketAddress::: datagram channel impl remote address
sun.nio.ch.DatagramChannelImpl#bind(SocketAddress)->DatagramChannel::: datagram channel impl bind
sun.nio.ch.DatagramChannelImpl#isConnected()->boolean::: datagram channel impl is connected
sun.nio.ch.DatagramChannelImpl#connect(SocketAddress)->DatagramChannel::: datagram channel impl connect
sun.nio.ch.DatagramChannelImpl#disconnect()->DatagramChannel::: datagram channel impl disconnect
sun.nio.ch.DatagramChannelImpl#join(InetAddress, NetworkInterface)->MembershipKey::: datagram channel impl join
sun.nio.ch.DatagramChannelImpl#join(InetAddress, NetworkInterface, InetAddress)->MembershipKey::: datagram channel impl join
sun.nio.ch.DatagramChannelImpl#drop(MembershipKeyImpl)->void::: datagram channel impl drop
sun.nio.ch.DatagramChannelImpl#block(MembershipKeyImpl, InetAddress)->void:::Block datagrams from given source if a memory to receive all datagrams.
sun.nio.ch.DatagramChannelImpl#unblock(MembershipKeyImpl, InetAddress)->void:::Unblock given source.
sun.nio.ch.DatagramChannelImpl#implCloseSelectableChannel()->void:::Invoked by implCloseChannel to close the channel
sun.nio.ch.DatagramChannelImpl#kill()->void::: datagram channel impl kill
sun.nio.ch.DatagramChannelImpl#finalize()->void::: datagram channel impl finalize
sun.nio.ch.DatagramChannelImpl#translateReadyOps(int, int, SelectionKeyImpl)->boolean:::Translates native poll revent set into a ready operation set
sun.nio.ch.DatagramChannelImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean::: datagram channel impl translate and update ready ops
sun.nio.ch.DatagramChannelImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean::: datagram channel impl translate and set ready ops
sun.nio.ch.DatagramChannelImpl#pollRead(long)->boolean:::Poll this channel's socket for reading up to the given timeout.
sun.nio.ch.DatagramChannelImpl#translateInterestOps(int)->int:::Translates an interest operation set into a native poll event set
sun.nio.ch.DatagramChannelImpl#getFD()->FileDescriptor::: datagram channel impl get d
sun.nio.ch.DatagramChannelImpl#getFDVal()->int::: datagram channel impl get val
sun.nio.ch.DatagramDispatcher#read(FileDescriptor, long, int)->int::: datagram dispatcher read
sun.nio.ch.DatagramDispatcher#readv(FileDescriptor, long, int)->long::: datagram dispatcher readv
sun.nio.ch.DatagramDispatcher#write(FileDescriptor, long, int)->int::: datagram dispatcher write
sun.nio.ch.DatagramDispatcher#writev(FileDescriptor, long, int)->long::: datagram dispatcher writev
sun.nio.ch.DatagramDispatcher#close(FileDescriptor)->void::: datagram dispatcher close
sun.nio.ch.DatagramDispatcher#read0(FileDescriptor, long, int)->int::: datagram dispatcher read0
sun.nio.ch.DatagramDispatcher#readv0(FileDescriptor, long, int)->long::: datagram dispatcher readv0
sun.nio.ch.DatagramDispatcher#write0(FileDescriptor, long, int)->int::: datagram dispatcher write0
sun.nio.ch.DatagramDispatcher#writev0(FileDescriptor, long, int)->long::: datagram dispatcher writev0
sun.nio.ch.DatagramSocketAdaptor#create(DatagramChannelImpl)->DatagramSocket::: datagram socket adaptor create
sun.nio.ch.DatagramSocketAdaptor#bind(SocketAddress)->void::: datagram socket adaptor bind
sun.nio.ch.DatagramSocketAdaptor#connect(InetAddress, int)->void::: datagram socket adaptor connect
sun.nio.ch.DatagramSocketAdaptor#connect(SocketAddress)->void::: datagram socket adaptor connect
sun.nio.ch.DatagramSocketAdaptor#disconnect()->void::: datagram socket adaptor disconnect
sun.nio.ch.DatagramSocketAdaptor#isBound()->boolean::: datagram socket adaptor is bound
sun.nio.ch.DatagramSocketAdaptor#isConnected()->boolean::: datagram socket adaptor is connected
sun.nio.ch.DatagramSocketAdaptor#getInetAddress()->InetAddress::: datagram socket adaptor get inet address
sun.nio.ch.DatagramSocketAdaptor#getPort()->int::: datagram socket adaptor get port
sun.nio.ch.DatagramSocketAdaptor#getLocalSocketAddress()->SocketAddress::: datagram socket adaptor get local socket address
sun.nio.ch.DatagramSocketAdaptor#send(DatagramPacket)->void::: datagram socket adaptor send
sun.nio.ch.DatagramSocketAdaptor#receive(DatagramPacket)->void::: datagram socket adaptor receive
sun.nio.ch.DatagramSocketAdaptor#getLocalAddress()->InetAddress::: datagram socket adaptor get local address
sun.nio.ch.DatagramSocketAdaptor#getLocalPort()->int::: datagram socket adaptor get local port
sun.nio.ch.DatagramSocketAdaptor#setSoTimeout(int)->void::: datagram socket adaptor set so timeout
sun.nio.ch.DatagramSocketAdaptor#getSoTimeout()->int::: datagram socket adaptor get so timeout
sun.nio.ch.DatagramSocketAdaptor#setSendBufferSize(int)->void::: datagram socket adaptor set send buffer size
sun.nio.ch.DatagramSocketAdaptor#getSendBufferSize()->int::: datagram socket adaptor get send buffer size
sun.nio.ch.DatagramSocketAdaptor#setReceiveBufferSize(int)->void::: datagram socket adaptor set receive buffer size
sun.nio.ch.DatagramSocketAdaptor#getReceiveBufferSize()->int::: datagram socket adaptor get receive buffer size
sun.nio.ch.DatagramSocketAdaptor#setReuseAddress(boolean)->void::: datagram socket adaptor set reuse address
sun.nio.ch.DatagramSocketAdaptor#getReuseAddress()->boolean::: datagram socket adaptor get reuse address
sun.nio.ch.DatagramSocketAdaptor#setBroadcast(boolean)->void::: datagram socket adaptor set broadcast
sun.nio.ch.DatagramSocketAdaptor#getBroadcast()->boolean::: datagram socket adaptor get broadcast
sun.nio.ch.DatagramSocketAdaptor#setTrafficClass(int)->void::: datagram socket adaptor set traffic class
sun.nio.ch.DatagramSocketAdaptor#getTrafficClass()->int::: datagram socket adaptor get traffic class
sun.nio.ch.DatagramSocketAdaptor#close()->void::: datagram socket adaptor close
sun.nio.ch.DatagramSocketAdaptor#isClosed()->boolean::: datagram socket adaptor is closed
sun.nio.ch.DatagramSocketAdaptor#getChannel()->DatagramChannel::: datagram socket adaptor get channel
sun.nio.ch.DefaultAsynchronousChannelProvider#create()->AsynchronousChannelProvider:::Returns the default AsynchronousChannelProvider.
sun.nio.ch.DefaultSelectorProvider#create()->SelectorProvider:::Returns the default SelectorProvider.
sun.nio.ch.DirectBuffer#address()->long::: direct buffer address
sun.nio.ch.DirectBuffer#attachment()->Object::: direct buffer attachment
sun.nio.ch.DirectBuffer#cleaner()->Cleaner::: direct buffer cleaner
sun.nio.ch.FileChannelImpl#open(FileDescriptor, String, boolean, boolean, boolean, Object)->FileChannel::: file channel impl open
sun.nio.ch.FileChannelImpl#setUninterruptible()->void::: file channel impl set uninterruptible
sun.nio.ch.FileChannelImpl#implCloseChannel()->void::: file channel impl impl close channel
sun.nio.ch.FileChannelImpl#read(ByteBuffer)->int::: file channel impl read
sun.nio.ch.FileChannelImpl#read(ByteBuffer[], int, int)->long::: file channel impl read
sun.nio.ch.FileChannelImpl#write(ByteBuffer)->int::: file channel impl write
sun.nio.ch.FileChannelImpl#write(ByteBuffer[], int, int)->long::: file channel impl write
sun.nio.ch.FileChannelImpl#position()->long::: file channel impl position
sun.nio.ch.FileChannelImpl#position(long)->FileChannel::: file channel impl position
sun.nio.ch.FileChannelImpl#size()->long::: file channel impl size
sun.nio.ch.FileChannelImpl#truncate(long)->FileChannel::: file channel impl truncate
sun.nio.ch.FileChannelImpl#force(boolean)->void::: file channel impl force
sun.nio.ch.FileChannelImpl#transferTo(long, long, WritableByteChannel)->long::: file channel impl transfer to
sun.nio.ch.FileChannelImpl#transferFrom(ReadableByteChannel, long, long)->long::: file channel impl transfer from
sun.nio.ch.FileChannelImpl#read(ByteBuffer, long)->int::: file channel impl read
sun.nio.ch.FileChannelImpl#write(ByteBuffer, long)->int::: file channel impl write
sun.nio.ch.FileChannelImpl#map(MapMode, long, long)->MappedByteBuffer::: file channel impl map
sun.nio.ch.FileChannelImpl#getMappedBufferPool()->JavaNioAccess.BufferPool:::Invoked by sun.management.ManagementFactoryHelper to create the management interface for mapped buffers.
sun.nio.ch.FileChannelImpl#lock(long, long, boolean)->FileLock::: file channel impl lock
sun.nio.ch.FileChannelImpl#tryLock(long, long, boolean)->FileLock::: file channel impl try lock
sun.nio.ch.FileChannelImpl#release(FileLockImpl)->void::: file channel impl release
sun.nio.ch.FileDispatcher#seek(FileDescriptor, long)->long:::Sets or reports this file's position If offset is -1, the current position is returned otherwise the position is set to offset.
sun.nio.ch.FileDispatcher#force(FileDescriptor, boolean)->int::: file dispatcher force
sun.nio.ch.FileDispatcher#truncate(FileDescriptor, long)->int::: file dispatcher truncate
sun.nio.ch.FileDispatcher#size(FileDescriptor)->long::: file dispatcher size
sun.nio.ch.FileDispatcher#lock(FileDescriptor, boolean, long, long, boolean)->int::: file dispatcher lock
sun.nio.ch.FileDispatcher#release(FileDescriptor, long, long)->void::: file dispatcher release
sun.nio.ch.FileDispatcher#duplicateForMapping(FileDescriptor)->FileDescriptor:::Returns a dup of fd if a file descriptor is required for memory-mapping operations, otherwise returns an invalid FileDescriptor (meaning a newly allocated FileDescriptor)
sun.nio.ch.FileDispatcher#canTransferToDirectly(SelectableChannel)->boolean::: file dispatcher can transfer to directly
sun.nio.ch.FileDispatcher#transferToDirectlyNeedsPositionLock()->boolean::: file dispatcher transfer to directly needs position lock
sun.nio.ch.FileDispatcher#setDirectIO(FileDescriptor, String)->int::: file dispatcher set direct o
sun.nio.ch.FileDispatcherImpl#needsPositionLock()->boolean::: file dispatcher impl needs position lock
sun.nio.ch.FileDispatcherImpl#read(FileDescriptor, long, int)->int::: file dispatcher impl read
sun.nio.ch.FileDispatcherImpl#pread(FileDescriptor, long, int, long)->int::: file dispatcher impl pread
sun.nio.ch.FileDispatcherImpl#readv(FileDescriptor, long, int)->long::: file dispatcher impl readv
sun.nio.ch.FileDispatcherImpl#write(FileDescriptor, long, int)->int::: file dispatcher impl write
sun.nio.ch.FileDispatcherImpl#pwrite(FileDescriptor, long, int, long)->int::: file dispatcher impl pwrite
sun.nio.ch.FileDispatcherImpl#writev(FileDescriptor, long, int)->long::: file dispatcher impl writev
sun.nio.ch.FileDispatcherImpl#seek(FileDescriptor, long)->long::: file dispatcher impl seek
sun.nio.ch.FileDispatcherImpl#force(FileDescriptor, boolean)->int::: file dispatcher impl force
sun.nio.ch.FileDispatcherImpl#truncate(FileDescriptor, long)->int::: file dispatcher impl truncate
sun.nio.ch.FileDispatcherImpl#size(FileDescriptor)->long::: file dispatcher impl size
sun.nio.ch.FileDispatcherImpl#lock(FileDescriptor, boolean, long, long, boolean)->int::: file dispatcher impl lock
sun.nio.ch.FileDispatcherImpl#release(FileDescriptor, long, long)->void::: file dispatcher impl release
sun.nio.ch.FileDispatcherImpl#close(FileDescriptor)->void::: file dispatcher impl close
sun.nio.ch.FileDispatcherImpl#duplicateForMapping(FileDescriptor)->FileDescriptor::: file dispatcher impl duplicate for mapping
sun.nio.ch.FileDispatcherImpl#canTransferToDirectly(java.nio.channels.SelectableChannel)->boolean::: file dispatcher impl can transfer to directly
sun.nio.ch.FileDispatcherImpl#transferToDirectlyNeedsPositionLock()->boolean::: file dispatcher impl transfer to directly needs position lock
sun.nio.ch.FileDispatcherImpl#setDirectIO(FileDescriptor, String)->int::: file dispatcher impl set direct o
sun.nio.ch.FileDispatcherImpl#isFastFileTransferRequested()->boolean::: file dispatcher impl is fast file transfer requested
sun.nio.ch.FileDispatcherImpl#read0(FileDescriptor, long, int)->int::: file dispatcher impl read0
sun.nio.ch.FileDispatcherImpl#pread0(FileDescriptor, long, int, long)->int::: file dispatcher impl pread0
sun.nio.ch.FileDispatcherImpl#readv0(FileDescriptor, long, int)->long::: file dispatcher impl readv0
sun.nio.ch.FileDispatcherImpl#write0(FileDescriptor, long, int, boolean)->int::: file dispatcher impl write0
sun.nio.ch.FileDispatcherImpl#pwrite0(FileDescriptor, long, int, long)->int::: file dispatcher impl pwrite0
sun.nio.ch.FileDispatcherImpl#writev0(FileDescriptor, long, int, boolean)->long::: file dispatcher impl writev0
sun.nio.ch.FileDispatcherImpl#seek0(FileDescriptor, long)->long::: file dispatcher impl seek0
sun.nio.ch.FileDispatcherImpl#force0(FileDescriptor, boolean)->int::: file dispatcher impl force0
sun.nio.ch.FileDispatcherImpl#truncate0(FileDescriptor, long)->int::: file dispatcher impl truncate0
sun.nio.ch.FileDispatcherImpl#size0(FileDescriptor)->long::: file dispatcher impl size0
sun.nio.ch.FileDispatcherImpl#lock0(FileDescriptor, boolean, long, long, boolean)->int::: file dispatcher impl lock0
sun.nio.ch.FileDispatcherImpl#release0(FileDescriptor, long, long)->void::: file dispatcher impl release0
sun.nio.ch.FileDispatcherImpl#close0(FileDescriptor)->void::: file dispatcher impl close0
sun.nio.ch.FileDispatcherImpl#duplicateHandle(long)->long::: file dispatcher impl duplicate handle
sun.nio.ch.FileDispatcherImpl#setDirect0(FileDescriptor, CharBuffer)->int::: file dispatcher impl set direct0
sun.nio.ch.FileKey#create(FileDescriptor)->FileKey::: file key create
sun.nio.ch.FileKey#hashCode()->int::: file key hash code
sun.nio.ch.FileKey#equals(Object)->boolean::: file key equals
sun.nio.ch.FileLockImpl#isValid()->boolean::: file lock impl is valid
sun.nio.ch.FileLockImpl#invalidate()->void::: file lock impl invalidate
sun.nio.ch.FileLockImpl#release()->void::: file lock impl release
sun.nio.ch.FileLockTable#add(FileLock)->void::: file lock table add
sun.nio.ch.FileLockTable#remove(FileLock)->void::: file lock table remove
sun.nio.ch.FileLockTable#removeAll()->List::: file lock table remove all
sun.nio.ch.FileLockTable#replace(FileLock, FileLock)->void::: file lock table replace
sun.nio.ch.Groupable#group()->AsynchronousChannelGroupImpl::: groupable group
sun.nio.ch.Interruptible#interrupt(Thread)->void::: interruptible interrupt
sun.nio.ch.Invoker.GroupAndInvokeCount#group()->AsynchronousChannelGroupImpl::: group and invoke count group
sun.nio.ch.Invoker.GroupAndInvokeCount#invokeCount()->int::: group and invoke count invoke count
sun.nio.ch.Invoker.GroupAndInvokeCount#setInvokeCount(int)->void::: group and invoke count set invoke count
sun.nio.ch.Invoker.GroupAndInvokeCount#resetInvokeCount()->void::: group and invoke count reset invoke count
sun.nio.ch.Invoker.GroupAndInvokeCount#incrementInvokeCount()->void::: group and invoke count increment invoke count
sun.nio.ch.Invoker#bindToGroup(AsynchronousChannelGroupImpl)->void:::Binds this thread to the given group
sun.nio.ch.Invoker#getGroupAndInvokeCount()->GroupAndInvokeCount:::Returns the GroupAndInvokeCount object for this thread.
sun.nio.ch.Invoker#isBoundToAnyGroup()->boolean:::Returns true if the current thread is in a channel group's thread pool
sun.nio.ch.Invoker#mayInvokeDirect(GroupAndInvokeCount, AsynchronousChannelGroupImpl)->boolean:::Returns true if the current thread is in the given channel's thread pool and we haven't exceeded the maximum number of handler frames on the stack.
sun.nio.ch.Invoker#invokeUnchecked(CompletionHandler, A, V, Throwable)->void:::Invoke handler without checking the thread identity or number of handlers on the thread stack.
sun.nio.ch.Invoker#invokeDirect(GroupAndInvokeCount, CompletionHandler, A, V, Throwable)->void:::Invoke handler assuming thread identity already checked
sun.nio.ch.Invoker#invoke(AsynchronousChannel, CompletionHandler, A, V, Throwable)->void:::Invokes the handler
sun.nio.ch.Invoker#invokeIndirectly(AsynchronousChannel, CompletionHandler, A, V, Throwable)->void:::Invokes the handler indirectly via the channel group's thread pool.
sun.nio.ch.Invoker#invokeIndirectly(CompletionHandler, A, V, Throwable, Executor)->void:::Invokes the handler "indirectly" in the given Executor
sun.nio.ch.Invoker#invokeOnThreadInThreadPool(Groupable, Runnable)->void:::Invokes the given task on the thread pool associated with the given channel
sun.nio.ch.Invoker#invokeUnchecked(PendingFuture)->void:::Invoke handler with completed result
sun.nio.ch.Invoker#invoke(PendingFuture)->void:::Invoke handler with completed result
sun.nio.ch.Invoker#invokeIndirectly(PendingFuture)->void:::Invoke handler with completed result
sun.nio.ch.Iocp#start()->Iocp::: iocp start
sun.nio.ch.Iocp.OverlappedChannel#getByOverlapped(long)->PendingFuture:::Returns a reference to the pending I/O result.
sun.nio.ch.Iocp#implClose()->void::: iocp impl close
sun.nio.ch.Iocp#isEmpty()->boolean::: iocp is empty
sun.nio.ch.Iocp#attachForeignChannel(Channel, FileDescriptor)->Object::: iocp attach foreign channel
sun.nio.ch.Iocp#detachForeignChannel(Object)->void::: iocp detach foreign channel
sun.nio.ch.Iocp#closeAllChannels()->void::: iocp close all channels
sun.nio.ch.Iocp#executeOnHandlerTask(Runnable)->void::: iocp execute on handler task
sun.nio.ch.Iocp#shutdownHandlerTasks()->void::: iocp shutdown handler tasks
sun.nio.ch.Iocp#associate(OverlappedChannel, long)->int:::Associate the given handle with this group
sun.nio.ch.Iocp#disassociate(int)->void:::Disassociate channel from the group.
sun.nio.ch.Iocp#makeStale(Long)->void:::Invoked when a channel associated with this port is closed before notifications for all outstanding I/O operations have been received.
sun.nio.ch.Iocp.ResultHandler#completed(int, boolean)->void:::Invoked if the I/O operation completes successfully.
sun.nio.ch.Iocp.ResultHandler#failed(int, IOException)->void:::Invoked if the I/O operation fails.
sun.nio.ch.IOStatus#normalize(int)->int::: status normalize
sun.nio.ch.IOStatus#check(int)->boolean::: status check
sun.nio.ch.IOStatus#normalize(long)->long::: status normalize
sun.nio.ch.IOStatus#check(long)->boolean::: status check
sun.nio.ch.IOStatus#checkAll(long)->boolean::: status check all
sun.nio.ch.IOUtil#write(FileDescriptor, ByteBuffer, long, NativeDispatcher)->int::: util write
sun.nio.ch.IOUtil#write(FileDescriptor, ByteBuffer, long, boolean, int, NativeDispatcher)->int::: util write
sun.nio.ch.IOUtil#write(FileDescriptor, ByteBuffer[], NativeDispatcher)->long::: util write
sun.nio.ch.IOUtil#write(FileDescriptor, ByteBuffer[], int, int, NativeDispatcher)->long::: util write
sun.nio.ch.IOUtil#write(FileDescriptor, ByteBuffer[], int, int, boolean, int, NativeDispatcher)->long::: util write
sun.nio.ch.IOUtil#read(FileDescriptor, ByteBuffer, long, NativeDispatcher)->int::: util read
sun.nio.ch.IOUtil#read(FileDescriptor, ByteBuffer, long, boolean, int, NativeDispatcher)->int::: util read
sun.nio.ch.IOUtil#read(FileDescriptor, ByteBuffer[], NativeDispatcher)->long::: util read
sun.nio.ch.IOUtil#read(FileDescriptor, ByteBuffer[], int, int, NativeDispatcher)->long::: util read
sun.nio.ch.IOUtil#read(FileDescriptor, ByteBuffer[], int, int, boolean, int, NativeDispatcher)->long::: util read
sun.nio.ch.IOUtil#newFD(int)->FileDescriptor::: util new d
sun.nio.ch.IOUtil#randomBytes(byte[])->boolean::: util random bytes
sun.nio.ch.IOUtil#makePipe(boolean)->long:::Returns two file descriptors for a pipe encoded in a long
sun.nio.ch.IOUtil#write1(int, byte)->int::: util write1
sun.nio.ch.IOUtil#drain(int)->boolean:::Read and discard all bytes.
sun.nio.ch.IOUtil#drain1(int)->int:::Read and discard at most one byte
sun.nio.ch.IOUtil#configureBlocking(FileDescriptor, boolean)->void::: util configure blocking
sun.nio.ch.IOUtil#fdVal(FileDescriptor)->int::: util fd val
sun.nio.ch.IOUtil#setfdVal(FileDescriptor, int)->void::: util setfd val
sun.nio.ch.IOUtil#fdLimit()->int::: util fd limit
sun.nio.ch.IOUtil#iovMax()->int::: util iov max
sun.nio.ch.IOUtil#initIDs()->void::: util init ds
sun.nio.ch.IOUtil#load()->void:::Used to trigger loading of native libraries
sun.nio.ch.IOVecWrapper#get(int)->IOVecWrapper::: vec wrapper get
sun.nio.ch.IOVecWrapper#setBuffer(int, ByteBuffer, int, int)->void::: vec wrapper set buffer
sun.nio.ch.IOVecWrapper#setShadow(int, ByteBuffer)->void::: vec wrapper set shadow
sun.nio.ch.IOVecWrapper#getBuffer(int)->ByteBuffer::: vec wrapper get buffer
sun.nio.ch.IOVecWrapper#getPosition(int)->int::: vec wrapper get position
sun.nio.ch.IOVecWrapper#getRemaining(int)->int::: vec wrapper get remaining
sun.nio.ch.IOVecWrapper#getShadow(int)->ByteBuffer::: vec wrapper get shadow
sun.nio.ch.IOVecWrapper#clearRefs(int)->void::: vec wrapper clear refs
sun.nio.ch.IOVecWrapper#putBase(int, long)->void::: vec wrapper put base
sun.nio.ch.IOVecWrapper#putLen(int, long)->void::: vec wrapper put len
sun.nio.ch.MembershipKeyImpl.Type4#groupAddress()->int::: type4 group address
sun.nio.ch.MembershipKeyImpl.Type4#interfaceAddress()->int::: type4 interface address
sun.nio.ch.MembershipKeyImpl.Type4#source()->int::: type4 source
sun.nio.ch.MembershipKeyImpl.Type6#groupAddress()->byte[]::: type6 group address
sun.nio.ch.MembershipKeyImpl.Type6#index()->int::: type6 index
sun.nio.ch.MembershipKeyImpl.Type6#source()->byte[]::: type6 source
sun.nio.ch.MembershipKeyImpl#isValid()->boolean::: membership key impl is valid
sun.nio.ch.MembershipKeyImpl#invalidate()->void::: membership key impl invalidate
sun.nio.ch.MembershipKeyImpl#drop()->void::: membership key impl drop
sun.nio.ch.MembershipKeyImpl#channel()->MulticastChannel::: membership key impl channel
sun.nio.ch.MembershipKeyImpl#group()->InetAddress::: membership key impl group
sun.nio.ch.MembershipKeyImpl#networkInterface()->NetworkInterface::: membership key impl network interface
sun.nio.ch.MembershipKeyImpl#sourceAddress()->InetAddress::: membership key impl source address
sun.nio.ch.MembershipKeyImpl#block(InetAddress)->MembershipKey::: membership key impl block
sun.nio.ch.MembershipKeyImpl#unblock(InetAddress)->MembershipKey::: membership key impl unblock
sun.nio.ch.MembershipKeyImpl#toString()->String::: membership key impl to string
sun.nio.ch.MembershipRegistry#checkMembership(InetAddress, NetworkInterface, InetAddress)->MembershipKey:::Checks registry for membership of the group on the given network interface.
sun.nio.ch.MembershipRegistry#add(MembershipKeyImpl)->void:::Add membership to the registry, returning a new membership key.
sun.nio.ch.MembershipRegistry#remove(MembershipKeyImpl)->void:::Remove a key from the registry
sun.nio.ch.MembershipRegistry#invalidateAll()->void:::Invalidate all keys in the registry
sun.nio.ch.NativeDispatcher#read(FileDescriptor, long, int)->int::: native dispatcher read
sun.nio.ch.NativeDispatcher#needsPositionLock()->boolean:::Returns true if pread/pwrite needs to be synchronized with position sensitive methods.
sun.nio.ch.NativeDispatcher#pread(FileDescriptor, long, int, long)->int::: native dispatcher pread
sun.nio.ch.NativeDispatcher#readv(FileDescriptor, long, int)->long::: native dispatcher readv
sun.nio.ch.NativeDispatcher#write(FileDescriptor, long, int)->int::: native dispatcher write
sun.nio.ch.NativeDispatcher#pwrite(FileDescriptor, long, int, long)->int::: native dispatcher pwrite
sun.nio.ch.NativeDispatcher#writev(FileDescriptor, long, int)->long::: native dispatcher writev
sun.nio.ch.NativeDispatcher#close(FileDescriptor)->void::: native dispatcher close
sun.nio.ch.NativeDispatcher#preClose(FileDescriptor)->void::: native dispatcher pre close
sun.nio.ch.NativeObject#address()->long:::Returns the native base address of this native object.
sun.nio.ch.NativeObject#allocationAddress()->long::: native object allocation address
sun.nio.ch.NativeObject#subObject(int)->NativeObject:::Creates a new native object starting at the given offset from the base of this native object.
sun.nio.ch.NativeObject#getObject(int)->NativeObject:::Reads an address from this native object at the given offset and constructs a native object using that address.
sun.nio.ch.NativeObject#putObject(int, NativeObject)->void:::Writes the base address of the given native object at the given offset of this native object.
sun.nio.ch.NativeObject#getByte(int)->byte:::Reads a byte starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putByte(int, byte)->void:::Writes a byte at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getShort(int)->short:::Reads a short starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putShort(int, short)->void:::Writes a short at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getChar(int)->char:::Reads a char starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putChar(int, char)->void:::Writes a char at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getInt(int)->int:::Reads an int starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putInt(int, int)->void:::Writes an int at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getLong(int)->long:::Reads a long starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putLong(int, long)->void:::Writes a long at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getFloat(int)->float:::Reads a float starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putFloat(int, float)->void:::Writes a float at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#getDouble(int)->double:::Reads a double starting at the given offset from base of this native object.
sun.nio.ch.NativeObject#putDouble(int, double)->void:::Writes a double at the specified offset from this native object's base address.
sun.nio.ch.NativeObject#addressSize()->int:::Returns the native architecture's address size in bytes.
sun.nio.ch.NativeObject#byteOrder()->ByteOrder:::Returns the byte order of the underlying hardware.
sun.nio.ch.NativeObject#pageSize()->int:::Returns the page size of the underlying hardware.
sun.nio.ch.NativeThread#current()->long::: native thread current
sun.nio.ch.NativeThread#signal(long)->void::: native thread signal
sun.nio.ch.NativeThreadSet#add()->int::: native thread set add
sun.nio.ch.NativeThreadSet#remove(int)->void::: native thread set remove
sun.nio.ch.NativeThreadSet#signalAndWait()->void::: native thread set signal and wait
sun.nio.ch.Net#isIPv6Available()->boolean:::Tells whether dual-IPv4/IPv6 sockets should be used.
sun.nio.ch.Net#isReusePortAvailable()->boolean:::Tells whether SO_REUSEPORT is supported.
sun.nio.ch.Net#useExclusiveBind()->boolean:::Returns true if exclusive binding is on
sun.nio.ch.Net#canIPv6SocketJoinIPv4Group()->boolean:::Tells whether IPv6 sockets can join IPv4 multicast groups
sun.nio.ch.Net#canJoin6WithIPv4Group()->boolean:::Tells whether #join6 can be used to join an IPv4 multicast group (IPv4 group as IPv4-mapped IPv6 address)
sun.nio.ch.Net#checkAddress(SocketAddress)->InetSocketAddress::: net check address
sun.nio.ch.Net#checkAddress(SocketAddress, ProtocolFamily)->InetSocketAddress::: net check address
sun.nio.ch.Net#asInetSocketAddress(SocketAddress)->InetSocketAddress::: net as inet socket address
sun.nio.ch.Net#translateToSocketException(Exception)->void::: net translate to socket exception
sun.nio.ch.Net#translateException(Exception, boolean)->void::: net translate exception
sun.nio.ch.Net#translateException(Exception)->void::: net translate exception
sun.nio.ch.Net#getRevealedLocalAddress(InetSocketAddress)->InetSocketAddress:::Returns the local address after performing a SecurityManager#checkConnect.
sun.nio.ch.Net#getRevealedLocalAddressAsString(InetSocketAddress)->String::: net get revealed local address as string
sun.nio.ch.Net#anyInet4Address(NetworkInterface)->Inet4Address:::Returns any IPv4 address of the given network interface, or null if the interface does not have any IPv4 addresses.
sun.nio.ch.Net#inet4AsInt(InetAddress)->int:::Returns an IPv4 address as an int.
sun.nio.ch.Net#inet4FromInt(int)->InetAddress:::Returns an InetAddress from the given IPv4 address represented as an int.
sun.nio.ch.Net#inet6AsByteArray(InetAddress)->byte[]:::Returns an IPv6 address as a byte array
sun.nio.ch.Net#setSocketOption(FileDescriptor, ProtocolFamily, SocketOption, Object)->void::: net set socket option
sun.nio.ch.Net#getSocketOption(FileDescriptor, ProtocolFamily, SocketOption)->Object::: net get socket option
sun.nio.ch.Net#isFastTcpLoopbackRequested()->boolean::: net is fast tcp loopback requested
sun.nio.ch.Net#socket(boolean)->FileDescriptor::: net socket
sun.nio.ch.Net#socket(ProtocolFamily, boolean)->FileDescriptor::: net socket
sun.nio.ch.Net#serverSocket(boolean)->FileDescriptor::: net server socket
sun.nio.ch.Net#bind(FileDescriptor, InetAddress, int)->void::: net bind
sun.nio.ch.Net#bind(ProtocolFamily, FileDescriptor, InetAddress, int)->void::: net bind
sun.nio.ch.Net#listen(FileDescriptor, int)->void::: net listen
sun.nio.ch.Net#connect(FileDescriptor, InetAddress, int)->int::: net connect
sun.nio.ch.Net#connect(ProtocolFamily, FileDescriptor, InetAddress, int)->int::: net connect
sun.nio.ch.Net#shutdown(FileDescriptor, int)->void::: net shutdown
sun.nio.ch.Net#localAddress(FileDescriptor)->InetSocketAddress::: net local address
sun.nio.ch.Net#remoteAddress(FileDescriptor)->InetSocketAddress::: net remote address
sun.nio.ch.Net#poll(FileDescriptor, int, long)->int::: net poll
sun.nio.ch.Net#join4(FileDescriptor, int, int, int)->int:::Join IPv4 multicast group
sun.nio.ch.Net#drop4(FileDescriptor, int, int, int)->void:::Drop membership of IPv4 multicast group
sun.nio.ch.Net#block4(FileDescriptor, int, int, int)->int:::Block IPv4 source
sun.nio.ch.Net#unblock4(FileDescriptor, int, int, int)->void:::Unblock IPv6 source
sun.nio.ch.Net#join6(FileDescriptor, byte[], int, byte[])->int:::Join IPv6 multicast group
sun.nio.ch.Net#drop6(FileDescriptor, byte[], int, byte[])->void:::Drop membership of IPv6 multicast group
sun.nio.ch.Net#block6(FileDescriptor, byte[], int, byte[])->int:::Block IPv6 source
sun.nio.ch.Net#unblock6(FileDescriptor, byte[], int, byte[])->void:::Unblock IPv6 source
sun.nio.ch.Net#blockOrUnblock6(boolean, FileDescriptor, byte[], int, byte[])->int::: net block or unblock6
sun.nio.ch.Net#setInterface4(FileDescriptor, int)->void::: net set interface4
sun.nio.ch.Net#getInterface4(FileDescriptor)->int::: net get interface4
sun.nio.ch.Net#setInterface6(FileDescriptor, int)->void::: net set interface6
sun.nio.ch.Net#getInterface6(FileDescriptor)->int::: net get interface6
sun.nio.ch.Net#pollinValue()->short::: net pollin value
sun.nio.ch.Net#polloutValue()->short::: net pollout value
sun.nio.ch.Net#pollerrValue()->short::: net pollerr value
sun.nio.ch.Net#pollhupValue()->short::: net pollhup value
sun.nio.ch.Net#pollnvalValue()->short::: net pollnval value
sun.nio.ch.Net#pollconnValue()->short::: net pollconn value
sun.nio.ch.OptionKey#level()->int::: option key level
sun.nio.ch.OptionKey#name()->int::: option key name
sun.nio.ch.PendingFuture#channel()->AsynchronousChannel::: pending future channel
sun.nio.ch.PendingFuture#handler()->CompletionHandler::: pending future handler
sun.nio.ch.PendingFuture#attachment()->A::: pending future attachment
sun.nio.ch.PendingFuture#setContext(Object)->void::: pending future set context
sun.nio.ch.PendingFuture#getContext()->Object::: pending future get context
sun.nio.ch.PendingFuture#setTimeoutTask(Future)->void::: pending future set timeout task
sun.nio.ch.PendingFuture#setResult(V)->void:::Sets the result, or a no-op if the result or exception is already set.
sun.nio.ch.PendingFuture#setFailure(Throwable)->void:::Sets the result, or a no-op if the result or exception is already set.
sun.nio.ch.PendingFuture#setResult(V, Throwable)->void:::Sets the result
sun.nio.ch.PendingFuture#get()->V::: pending future get
sun.nio.ch.PendingFuture#get(long, TimeUnit)->V::: pending future get
sun.nio.ch.PendingFuture#exception()->Throwable::: pending future exception
sun.nio.ch.PendingFuture#value()->V::: pending future value
sun.nio.ch.PendingFuture#isCancelled()->boolean::: pending future is cancelled
sun.nio.ch.PendingFuture#isDone()->boolean::: pending future is done
sun.nio.ch.PendingFuture#cancel(boolean)->boolean::: pending future cancel
sun.nio.ch.PendingIoCache#add(PendingFuture)->long::: pending io cache add
sun.nio.ch.PendingIoCache#remove(long)->PendingFuture::: pending io cache remove
sun.nio.ch.PendingIoCache#close()->void::: pending io cache close
sun.nio.ch.PipeImpl#source()->SourceChannel::: pipe impl source
sun.nio.ch.PipeImpl#sink()->SinkChannel::: pipe impl sink
sun.nio.ch.PollArrayWrapper#putEntry(int, SelectionKeyImpl)->void::: poll array wrapper put entry
sun.nio.ch.PollArrayWrapper#replaceEntry(PollArrayWrapper, int, PollArrayWrapper, int)->void::: poll array wrapper replace entry
sun.nio.ch.PollArrayWrapper#grow(int)->void::: poll array wrapper grow
sun.nio.ch.PollArrayWrapper#free()->void::: poll array wrapper free
sun.nio.ch.PollArrayWrapper#putDescriptor(int, int)->void::: poll array wrapper put descriptor
sun.nio.ch.PollArrayWrapper#putEventOps(int, int)->void::: poll array wrapper put event ops
sun.nio.ch.PollArrayWrapper#getEventOps(int)->int::: poll array wrapper get event ops
sun.nio.ch.PollArrayWrapper#getDescriptor(int)->int::: poll array wrapper get descriptor
sun.nio.ch.PollArrayWrapper#addWakeupSocket(int, int)->void::: poll array wrapper add wakeup socket
sun.nio.ch.Reflect#lookupConstructor(String, Class[])->Constructor::: reflect lookup constructor
sun.nio.ch.Reflect#invoke(Constructor, Object[])->Object::: reflect invoke
sun.nio.ch.Reflect#lookupMethod(String, String, Class...)->Method::: reflect lookup method
sun.nio.ch.Reflect#invoke(Method, Object, Object[])->Object::: reflect invoke
sun.nio.ch.Reflect#invokeIO(Method, Object, Object[])->Object::: reflect invoke o
sun.nio.ch.Reflect#lookupField(String, String)->Field::: reflect lookup field
sun.nio.ch.Reflect#get(Object, Field)->Object::: reflect get
sun.nio.ch.Reflect#get(Field)->Object::: reflect get
sun.nio.ch.Reflect#set(Object, Field, Object)->void::: reflect set
sun.nio.ch.Reflect#setInt(Object, Field, int)->void::: reflect set int
sun.nio.ch.Reflect#setBoolean(Object, Field, boolean)->void::: reflect set boolean
sun.nio.ch.Secrets#newSocketChannel(FileDescriptor)->SocketChannel::: secrets new socket channel
sun.nio.ch.Secrets#newServerSocketChannel(FileDescriptor)->ServerSocketChannel::: secrets new server socket channel
sun.nio.ch.SelChImpl#getFD()->FileDescriptor::: sel ch impl get d
sun.nio.ch.SelChImpl#getFDVal()->int::: sel ch impl get val
sun.nio.ch.SelChImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean:::Adds the specified ops if present in interestOps
sun.nio.ch.SelChImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean:::Sets the specified ops if present in interestOps
sun.nio.ch.SelChImpl#translateInterestOps(int)->int:::Translates an interest operation set into a native event set
sun.nio.ch.SelChImpl#kill()->void::: sel ch impl kill
sun.nio.ch.SelectionKeyImpl#getFDVal()->int::: selection key impl get val
sun.nio.ch.SelectionKeyImpl#channel()->SelectableChannel::: selection key impl channel
sun.nio.ch.SelectionKeyImpl#selector()->Selector::: selection key impl selector
sun.nio.ch.SelectionKeyImpl#interestOps()->int::: selection key impl interest ops
sun.nio.ch.SelectionKeyImpl#interestOps(int)->SelectionKey::: selection key impl interest ops
sun.nio.ch.SelectionKeyImpl#interestOpsOr(int)->int::: selection key impl interest ops or
sun.nio.ch.SelectionKeyImpl#interestOpsAnd(int)->int::: selection key impl interest ops and
sun.nio.ch.SelectionKeyImpl#readyOps()->int::: selection key impl ready ops
sun.nio.ch.SelectionKeyImpl#nioReadyOps(int)->void::: selection key impl nio ready ops
sun.nio.ch.SelectionKeyImpl#nioReadyOps()->int::: selection key impl nio ready ops
sun.nio.ch.SelectionKeyImpl#nioInterestOps(int)->SelectionKey::: selection key impl nio interest ops
sun.nio.ch.SelectionKeyImpl#nioInterestOps()->int::: selection key impl nio interest ops
sun.nio.ch.SelectionKeyImpl#translateInterestOps()->int::: selection key impl translate interest ops
sun.nio.ch.SelectionKeyImpl#translateAndSetReadyOps(int)->boolean::: selection key impl translate and set ready ops
sun.nio.ch.SelectionKeyImpl#translateAndUpdateReadyOps(int)->boolean::: selection key impl translate and update ready ops
sun.nio.ch.SelectionKeyImpl#registeredEvents(int)->void::: selection key impl registered events
sun.nio.ch.SelectionKeyImpl#registeredEvents()->int::: selection key impl registered events
sun.nio.ch.SelectionKeyImpl#getIndex()->int::: selection key impl get index
sun.nio.ch.SelectionKeyImpl#setIndex(int)->void::: selection key impl set index
sun.nio.ch.SelectionKeyImpl#toString()->String::: selection key impl to string
sun.nio.ch.SelectorImpl#keys()->Set::: selector impl keys
sun.nio.ch.SelectorImpl#selectedKeys()->Set::: selector impl selected keys
sun.nio.ch.SelectorImpl#begin(boolean)->void:::Marks the beginning of a select operation that might block
sun.nio.ch.SelectorImpl#end(boolean)->void:::Marks the end of a select operation that may have blocked
sun.nio.ch.SelectorImpl#doSelect(Consumer, long)->int:::Selects the keys for channels that are ready for I/O operations.
sun.nio.ch.SelectorImpl#select(long)->int::: selector impl select
sun.nio.ch.SelectorImpl#select()->int::: selector impl select
sun.nio.ch.SelectorImpl#selectNow()->int::: selector impl select now
sun.nio.ch.SelectorImpl#select(Consumer, long)->int::: selector impl select
sun.nio.ch.SelectorImpl#select(Consumer)->int::: selector impl select
sun.nio.ch.SelectorImpl#selectNow(Consumer)->int::: selector impl select now
sun.nio.ch.SelectorImpl#implClose()->void:::Invoked by implCloseSelector to close the selector.
sun.nio.ch.SelectorImpl#implCloseSelector()->void::: selector impl impl close selector
sun.nio.ch.SelectorImpl#register(AbstractSelectableChannel, int, Object)->SelectionKey::: selector impl register
sun.nio.ch.SelectorImpl#implRegister(SelectionKeyImpl)->void:::Register the key in the selector
sun.nio.ch.SelectorImpl#implDereg(SelectionKeyImpl)->void:::Removes the key from the selector
sun.nio.ch.SelectorImpl#processDeregisterQueue()->void:::Invoked by selection operations to process the cancelled-key set
sun.nio.ch.SelectorImpl#processReadyEvents(int, SelectionKeyImpl, Consumer)->int:::Invoked by selection operations to handle ready events
sun.nio.ch.SelectorImpl#setEventOps(SelectionKeyImpl)->void:::Invoked by interestOps to ensure the interest ops are updated at the next selection operation.
sun.nio.ch.SelectorProviderImpl#openDatagramChannel()->DatagramChannel::: selector provider impl open datagram channel
sun.nio.ch.SelectorProviderImpl#openDatagramChannel(ProtocolFamily)->DatagramChannel::: selector provider impl open datagram channel
sun.nio.ch.SelectorProviderImpl#openPipe()->Pipe::: selector provider impl open pipe
sun.nio.ch.SelectorProviderImpl#openSelector()->AbstractSelector::: selector provider impl open selector
sun.nio.ch.SelectorProviderImpl#openServerSocketChannel()->ServerSocketChannel::: selector provider impl open server socket channel
sun.nio.ch.SelectorProviderImpl#openSocketChannel()->SocketChannel::: selector provider impl open socket channel
sun.nio.ch.ServerSocketAdaptor#create(ServerSocketChannelImpl)->ServerSocket::: server socket adaptor create
sun.nio.ch.ServerSocketAdaptor#bind(SocketAddress)->void::: server socket adaptor bind
sun.nio.ch.ServerSocketAdaptor#bind(SocketAddress, int)->void::: server socket adaptor bind
sun.nio.ch.ServerSocketAdaptor#getInetAddress()->InetAddress::: server socket adaptor get inet address
sun.nio.ch.ServerSocketAdaptor#getLocalPort()->int::: server socket adaptor get local port
sun.nio.ch.ServerSocketAdaptor#accept()->Socket::: server socket adaptor accept
sun.nio.ch.ServerSocketAdaptor#close()->void::: server socket adaptor close
sun.nio.ch.ServerSocketAdaptor#getChannel()->ServerSocketChannel::: server socket adaptor get channel
sun.nio.ch.ServerSocketAdaptor#isBound()->boolean::: server socket adaptor is bound
sun.nio.ch.ServerSocketAdaptor#isClosed()->boolean::: server socket adaptor is closed
sun.nio.ch.ServerSocketAdaptor#setSoTimeout(int)->void::: server socket adaptor set so timeout
sun.nio.ch.ServerSocketAdaptor#getSoTimeout()->int::: server socket adaptor get so timeout
sun.nio.ch.ServerSocketAdaptor#setReuseAddress(boolean)->void::: server socket adaptor set reuse address
sun.nio.ch.ServerSocketAdaptor#getReuseAddress()->boolean::: server socket adaptor get reuse address
sun.nio.ch.ServerSocketAdaptor#toString()->String::: server socket adaptor to string
sun.nio.ch.ServerSocketAdaptor#setReceiveBufferSize(int)->void::: server socket adaptor set receive buffer size
sun.nio.ch.ServerSocketAdaptor#getReceiveBufferSize()->int::: server socket adaptor get receive buffer size
sun.nio.ch.ServerSocketChannelImpl#socket()->ServerSocket::: server socket channel impl socket
sun.nio.ch.ServerSocketChannelImpl#getLocalAddress()->SocketAddress::: server socket channel impl get local address
sun.nio.ch.ServerSocketChannelImpl#setOption(SocketOption, T)->ServerSocketChannel::: server socket channel impl set option
sun.nio.ch.ServerSocketChannelImpl#getOption(SocketOption)->T::: server socket channel impl get option
sun.nio.ch.ServerSocketChannelImpl#supportedOptions()->Set>::: server socket channel impl supported options
sun.nio.ch.ServerSocketChannelImpl#bind(SocketAddress, int)->ServerSocketChannel::: server socket channel impl bind
sun.nio.ch.ServerSocketChannelImpl#accept()->SocketChannel::: server socket channel impl accept
sun.nio.ch.ServerSocketChannelImpl#implConfigureBlocking(boolean)->void::: server socket channel impl impl configure blocking
sun.nio.ch.ServerSocketChannelImpl#implCloseSelectableChannel()->void:::Invoked by implCloseChannel to close the channel
sun.nio.ch.ServerSocketChannelImpl#kill()->void::: server socket channel impl kill
sun.nio.ch.ServerSocketChannelImpl#isBound()->boolean:::Returns true if channel's socket is bound
sun.nio.ch.ServerSocketChannelImpl#localAddress()->InetSocketAddress:::Returns the local address, or null if not bound
sun.nio.ch.ServerSocketChannelImpl#pollAccept(long)->boolean:::Poll this channel's socket for a new connection up to the given timeout.
sun.nio.ch.ServerSocketChannelImpl#translateReadyOps(int, int, SelectionKeyImpl)->boolean:::Translates native poll revent set into a ready operation set
sun.nio.ch.ServerSocketChannelImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean::: server socket channel impl translate and update ready ops
sun.nio.ch.ServerSocketChannelImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean::: server socket channel impl translate and set ready ops
sun.nio.ch.ServerSocketChannelImpl#translateInterestOps(int)->int:::Translates an interest operation set into a native poll event set
sun.nio.ch.ServerSocketChannelImpl#getFD()->FileDescriptor::: server socket channel impl get d
sun.nio.ch.ServerSocketChannelImpl#getFDVal()->int::: server socket channel impl get val
sun.nio.ch.ServerSocketChannelImpl#toString()->String::: server socket channel impl to string
sun.nio.ch.SimpleAsynchronousFileChannelImpl#open(FileDescriptor, boolean, boolean, ThreadPool)->AsynchronousFileChannel::: simple asynchronous file channel impl open
sun.nio.ch.SimpleAsynchronousFileChannelImpl#close()->void::: simple asynchronous file channel impl close
sun.nio.ch.SimpleAsynchronousFileChannelImpl#size()->long::: simple asynchronous file channel impl size
sun.nio.ch.SimpleAsynchronousFileChannelImpl#truncate(long)->AsynchronousFileChannel::: simple asynchronous file channel impl truncate
sun.nio.ch.SimpleAsynchronousFileChannelImpl#force(boolean)->void::: simple asynchronous file channel impl force
sun.nio.ch.SimpleAsynchronousFileChannelImpl#implLock(long, long, boolean, A, CompletionHandler)->Future::: simple asynchronous file channel impl impl lock
sun.nio.ch.SimpleAsynchronousFileChannelImpl#tryLock(long, long, boolean)->FileLock::: simple asynchronous file channel impl try lock
sun.nio.ch.SimpleAsynchronousFileChannelImpl#implRelease(FileLockImpl)->void::: simple asynchronous file channel impl impl release
sun.nio.ch.SimpleAsynchronousFileChannelImpl#implRead(ByteBuffer, long, A, CompletionHandler)->Future::: simple asynchronous file channel impl impl read
sun.nio.ch.SimpleAsynchronousFileChannelImpl#implWrite(ByteBuffer, long, A, CompletionHandler)->Future::: simple asynchronous file channel impl impl write
sun.nio.ch.SinkChannelImpl#getFD()->FileDescriptor::: sink channel impl get d
sun.nio.ch.SinkChannelImpl#getFDVal()->int::: sink channel impl get val
sun.nio.ch.SinkChannelImpl#implCloseSelectableChannel()->void::: sink channel impl impl close selectable channel
sun.nio.ch.SinkChannelImpl#kill()->void::: sink channel impl kill
sun.nio.ch.SinkChannelImpl#implConfigureBlocking(boolean)->void::: sink channel impl impl configure blocking
sun.nio.ch.SinkChannelImpl#translateReadyOps(int, int, SelectionKeyImpl)->boolean::: sink channel impl translate ready ops
sun.nio.ch.SinkChannelImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean::: sink channel impl translate and update ready ops
sun.nio.ch.SinkChannelImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean::: sink channel impl translate and set ready ops
sun.nio.ch.SinkChannelImpl#translateInterestOps(int)->int::: sink channel impl translate interest ops
sun.nio.ch.SinkChannelImpl#write(ByteBuffer)->int::: sink channel impl write
sun.nio.ch.SinkChannelImpl#write(ByteBuffer[])->long::: sink channel impl write
sun.nio.ch.SinkChannelImpl#write(ByteBuffer[], int, int)->long::: sink channel impl write
sun.nio.ch.SocketAdaptor#create(SocketChannelImpl)->Socket::: socket adaptor create
sun.nio.ch.SocketAdaptor#getChannel()->SocketChannel::: socket adaptor get channel
sun.nio.ch.SocketAdaptor#connect(SocketAddress)->void::: socket adaptor connect
sun.nio.ch.SocketAdaptor#connect(SocketAddress, int)->void::: socket adaptor connect
sun.nio.ch.SocketAdaptor#bind(SocketAddress)->void::: socket adaptor bind
sun.nio.ch.SocketAdaptor#getInetAddress()->InetAddress::: socket adaptor get inet address
sun.nio.ch.SocketAdaptor#getLocalAddress()->InetAddress::: socket adaptor get local address
sun.nio.ch.SocketAdaptor#getPort()->int::: socket adaptor get port
sun.nio.ch.SocketAdaptor#getLocalPort()->int::: socket adaptor get local port
sun.nio.ch.SocketAdaptor#getInputStream()->InputStream::: socket adaptor get input stream
sun.nio.ch.SocketAdaptor#getOutputStream()->OutputStream::: socket adaptor get output stream
sun.nio.ch.SocketAdaptor#setTcpNoDelay(boolean)->void::: socket adaptor set tcp no delay
sun.nio.ch.SocketAdaptor#getTcpNoDelay()->boolean::: socket adaptor get tcp no delay
sun.nio.ch.SocketAdaptor#setSoLinger(boolean, int)->void::: socket adaptor set so linger
sun.nio.ch.SocketAdaptor#getSoLinger()->int::: socket adaptor get so linger
sun.nio.ch.SocketAdaptor#sendUrgentData(int)->void::: socket adaptor send urgent data
sun.nio.ch.SocketAdaptor#setOOBInline(boolean)->void::: socket adaptor set inline
sun.nio.ch.SocketAdaptor#getOOBInline()->boolean::: socket adaptor get inline
sun.nio.ch.SocketAdaptor#setSoTimeout(int)->void::: socket adaptor set so timeout
sun.nio.ch.SocketAdaptor#getSoTimeout()->int::: socket adaptor get so timeout
sun.nio.ch.SocketAdaptor#setSendBufferSize(int)->void::: socket adaptor set send buffer size
sun.nio.ch.SocketAdaptor#getSendBufferSize()->int::: socket adaptor get send buffer size
sun.nio.ch.SocketAdaptor#setReceiveBufferSize(int)->void::: socket adaptor set receive buffer size
sun.nio.ch.SocketAdaptor#getReceiveBufferSize()->int::: socket adaptor get receive buffer size
sun.nio.ch.SocketAdaptor#setKeepAlive(boolean)->void::: socket adaptor set keep alive
sun.nio.ch.SocketAdaptor#getKeepAlive()->boolean::: socket adaptor get keep alive
sun.nio.ch.SocketAdaptor#setTrafficClass(int)->void::: socket adaptor set traffic class
sun.nio.ch.SocketAdaptor#getTrafficClass()->int::: socket adaptor get traffic class
sun.nio.ch.SocketAdaptor#setReuseAddress(boolean)->void::: socket adaptor set reuse address
sun.nio.ch.SocketAdaptor#getReuseAddress()->boolean::: socket adaptor get reuse address
sun.nio.ch.SocketAdaptor#close()->void::: socket adaptor close
sun.nio.ch.SocketAdaptor#shutdownInput()->void::: socket adaptor shutdown input
sun.nio.ch.SocketAdaptor#shutdownOutput()->void::: socket adaptor shutdown output
sun.nio.ch.SocketAdaptor#toString()->String::: socket adaptor to string
sun.nio.ch.SocketAdaptor#isConnected()->boolean::: socket adaptor is connected
sun.nio.ch.SocketAdaptor#isBound()->boolean::: socket adaptor is bound
sun.nio.ch.SocketAdaptor#isClosed()->boolean::: socket adaptor is closed
sun.nio.ch.SocketAdaptor#isInputShutdown()->boolean::: socket adaptor is input shutdown
sun.nio.ch.SocketAdaptor#isOutputShutdown()->boolean::: socket adaptor is output shutdown
sun.nio.ch.SocketChannelImpl#socket()->Socket::: socket channel impl socket
sun.nio.ch.SocketChannelImpl#getLocalAddress()->SocketAddress::: socket channel impl get local address
sun.nio.ch.SocketChannelImpl#getRemoteAddress()->SocketAddress::: socket channel impl get remote address
sun.nio.ch.SocketChannelImpl#setOption(SocketOption, T)->SocketChannel::: socket channel impl set option
sun.nio.ch.SocketChannelImpl#getOption(SocketOption)->T::: socket channel impl get option
sun.nio.ch.SocketChannelImpl#supportedOptions()->Set>::: socket channel impl supported options
sun.nio.ch.SocketChannelImpl#read(ByteBuffer)->int::: socket channel impl read
sun.nio.ch.SocketChannelImpl#read(ByteBuffer[], int, int)->long::: socket channel impl read
sun.nio.ch.SocketChannelImpl#write(ByteBuffer)->int::: socket channel impl write
sun.nio.ch.SocketChannelImpl#write(ByteBuffer[], int, int)->long::: socket channel impl write
sun.nio.ch.SocketChannelImpl#sendOutOfBandData(byte)->int:::Writes a byte of out of band data.
sun.nio.ch.SocketChannelImpl#implConfigureBlocking(boolean)->void::: socket channel impl impl configure blocking
sun.nio.ch.SocketChannelImpl#localAddress()->InetSocketAddress:::Returns the local address, or null if not bound
sun.nio.ch.SocketChannelImpl#remoteAddress()->InetSocketAddress:::Returns the remote address, or null if not connected
sun.nio.ch.SocketChannelImpl#bind(SocketAddress)->SocketChannel::: socket channel impl bind
sun.nio.ch.SocketChannelImpl#isConnected()->boolean::: socket channel impl is connected
sun.nio.ch.SocketChannelImpl#isConnectionPending()->boolean::: socket channel impl is connection pending
sun.nio.ch.SocketChannelImpl#connect(SocketAddress)->boolean::: socket channel impl connect
sun.nio.ch.SocketChannelImpl#finishConnect()->boolean::: socket channel impl finish connect
sun.nio.ch.SocketChannelImpl#implCloseSelectableChannel()->void:::Invoked by implCloseChannel to close the channel
sun.nio.ch.SocketChannelImpl#kill()->void::: socket channel impl kill
sun.nio.ch.SocketChannelImpl#shutdownInput()->SocketChannel::: socket channel impl shutdown input
sun.nio.ch.SocketChannelImpl#shutdownOutput()->SocketChannel::: socket channel impl shutdown output
sun.nio.ch.SocketChannelImpl#isInputOpen()->boolean::: socket channel impl is input open
sun.nio.ch.SocketChannelImpl#isOutputOpen()->boolean::: socket channel impl is output open
sun.nio.ch.SocketChannelImpl#pollRead(long)->boolean:::Poll this channel's socket for reading up to the given timeout.
sun.nio.ch.SocketChannelImpl#pollConnected(long)->boolean:::Poll this channel's socket for a connection, up to the given timeout.
sun.nio.ch.SocketChannelImpl#translateReadyOps(int, int, SelectionKeyImpl)->boolean:::Translates native poll revent ops into a ready operation ops
sun.nio.ch.SocketChannelImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean::: socket channel impl translate and update ready ops
sun.nio.ch.SocketChannelImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean::: socket channel impl translate and set ready ops
sun.nio.ch.SocketChannelImpl#translateInterestOps(int)->int:::Translates an interest operation set into a native poll event set
sun.nio.ch.SocketChannelImpl#getFD()->FileDescriptor::: socket channel impl get d
sun.nio.ch.SocketChannelImpl#getFDVal()->int::: socket channel impl get val
sun.nio.ch.SocketChannelImpl#toString()->String::: socket channel impl to string
sun.nio.ch.SocketDispatcher#read(FileDescriptor, long, int)->int::: socket dispatcher read
sun.nio.ch.SocketDispatcher#readv(FileDescriptor, long, int)->long::: socket dispatcher readv
sun.nio.ch.SocketDispatcher#write(FileDescriptor, long, int)->int::: socket dispatcher write
sun.nio.ch.SocketDispatcher#writev(FileDescriptor, long, int)->long::: socket dispatcher writev
sun.nio.ch.SocketDispatcher#preClose(FileDescriptor)->void::: socket dispatcher pre close
sun.nio.ch.SocketDispatcher#close(FileDescriptor)->void::: socket dispatcher close
sun.nio.ch.SocketDispatcher#read0(FileDescriptor, long, int)->int::: socket dispatcher read0
sun.nio.ch.SocketDispatcher#readv0(FileDescriptor, long, int)->long::: socket dispatcher readv0
sun.nio.ch.SocketDispatcher#write0(FileDescriptor, long, int)->int::: socket dispatcher write0
sun.nio.ch.SocketDispatcher#writev0(FileDescriptor, long, int)->long::: socket dispatcher writev0
sun.nio.ch.SocketDispatcher#preClose0(FileDescriptor)->void::: socket dispatcher pre close0
sun.nio.ch.SocketDispatcher#close0(FileDescriptor)->void::: socket dispatcher close0
sun.nio.ch.SocketOptionRegistry#findOption(SocketOption, ProtocolFamily)->OptionKey::: socket option registry find option
sun.nio.ch.SourceChannelImpl#getFD()->FileDescriptor::: source channel impl get d
sun.nio.ch.SourceChannelImpl#getFDVal()->int::: source channel impl get val
sun.nio.ch.SourceChannelImpl#implCloseSelectableChannel()->void::: source channel impl impl close selectable channel
sun.nio.ch.SourceChannelImpl#kill()->void::: source channel impl kill
sun.nio.ch.SourceChannelImpl#implConfigureBlocking(boolean)->void::: source channel impl impl configure blocking
sun.nio.ch.SourceChannelImpl#translateReadyOps(int, int, SelectionKeyImpl)->boolean::: source channel impl translate ready ops
sun.nio.ch.SourceChannelImpl#translateAndUpdateReadyOps(int, SelectionKeyImpl)->boolean::: source channel impl translate and update ready ops
sun.nio.ch.SourceChannelImpl#translateAndSetReadyOps(int, SelectionKeyImpl)->boolean::: source channel impl translate and set ready ops
sun.nio.ch.SourceChannelImpl#translateInterestOps(int)->int::: source channel impl translate interest ops
sun.nio.ch.SourceChannelImpl#read(ByteBuffer)->int::: source channel impl read
sun.nio.ch.SourceChannelImpl#read(ByteBuffer[], int, int)->long::: source channel impl read
sun.nio.ch.SourceChannelImpl#read(ByteBuffer[])->long::: source channel impl read
sun.nio.ch.ThreadPool#executor()->ExecutorService::: thread pool executor
sun.nio.ch.ThreadPool#isFixedThreadPool()->boolean::: thread pool is fixed thread pool
sun.nio.ch.ThreadPool#poolSize()->int::: thread pool pool size
sun.nio.ch.ThreadPool#defaultThreadFactory()->ThreadFactory::: thread pool default thread factory
sun.nio.ch.ThreadPool#getDefault()->ThreadPool::: thread pool get default
sun.nio.ch.ThreadPool#createDefault()->ThreadPool::: thread pool create default
sun.nio.ch.ThreadPool#create(int, ThreadFactory)->ThreadPool::: thread pool create
sun.nio.ch.ThreadPool#wrap(ExecutorService, int)->ThreadPool::: thread pool wrap
sun.nio.ch.Util#getTemporaryDirectBuffer(int)->ByteBuffer:::Returns a temporary buffer of at least the given size
sun.nio.ch.Util#getTemporaryAlignedDirectBuffer(int, int)->ByteBuffer:::Returns a temporary buffer of at least the given size and aligned to the alignment
sun.nio.ch.Util#releaseTemporaryDirectBuffer(ByteBuffer)->void:::Releases a temporary buffer by returning to the cache or freeing it.
sun.nio.ch.Util#offerFirstTemporaryDirectBuffer(ByteBuffer)->void:::Releases a temporary buffer by returning to the cache or freeing it
sun.nio.ch.Util#offerLastTemporaryDirectBuffer(ByteBuffer)->void:::Releases a temporary buffer by returning to the cache or freeing it
sun.nio.ch.Util#subsequence(ByteBuffer[], int, int)->ByteBuffer[]::: util subsequence
sun.nio.ch.Util#ungrowableSet(Set)->Set::: util ungrowable set
sun.nio.ch.Util#erase(ByteBuffer)->void::: util erase
sun.nio.ch.Util#unsafe()->Unsafe::: util unsafe
sun.nio.ch.Util#pageSize()->int::: util page size
sun.nio.ch.Util#newMappedByteBuffer(int, long, FileDescriptor, Runnable)->MappedByteBuffer::: util new mapped byte buffer
sun.nio.ch.Util#newMappedByteBufferR(int, long, FileDescriptor, Runnable)->MappedByteBuffer::: util new mapped byte buffer r
sun.nio.ch.Util#checkBufferPositionAligned(ByteBuffer, int, int)->void::: util check buffer position aligned
sun.nio.ch.Util#checkRemainingBufferSizeAligned(int, int)->void::: util check remaining buffer size aligned
sun.nio.ch.Util#checkChannelPositionAligned(long, int)->void::: util check channel position aligned
sun.nio.ch.WindowsAsynchronousChannelProvider#openAsynchronousChannelGroup(int, ThreadFactory)->AsynchronousChannelGroup::: windows asynchronous channel provider open asynchronous channel group
sun.nio.ch.WindowsAsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService, int)->AsynchronousChannelGroup::: windows asynchronous channel provider open asynchronous channel group
sun.nio.ch.WindowsAsynchronousChannelProvider#openAsynchronousServerSocketChannel(AsynchronousChannelGroup)->AsynchronousServerSocketChannel::: windows asynchronous channel provider open asynchronous server socket channel
sun.nio.ch.WindowsAsynchronousChannelProvider#openAsynchronousSocketChannel(AsynchronousChannelGroup)->AsynchronousSocketChannel::: windows asynchronous channel provider open asynchronous socket channel
sun.nio.ch.WindowsAsynchronousFileChannelImpl#open(FileDescriptor, boolean, boolean, ThreadPool)->AsynchronousFileChannel::: windows asynchronous file channel impl open
sun.nio.ch.WindowsAsynchronousFileChannelImpl#getByOverlapped(long)->PendingFuture::: windows asynchronous file channel impl get by overlapped
sun.nio.ch.WindowsAsynchronousFileChannelImpl#close()->void::: windows asynchronous file channel impl close
sun.nio.ch.WindowsAsynchronousFileChannelImpl#group()->AsynchronousChannelGroupImpl::: windows asynchronous file channel impl group
sun.nio.ch.WindowsAsynchronousFileChannelImpl#size()->long::: windows asynchronous file channel impl size
sun.nio.ch.WindowsAsynchronousFileChannelImpl#truncate(long)->AsynchronousFileChannel::: windows asynchronous file channel impl truncate
sun.nio.ch.WindowsAsynchronousFileChannelImpl#force(boolean)->void::: windows asynchronous file channel impl force
sun.nio.ch.WindowsAsynchronousFileChannelImpl#implLock(long, long, boolean, A, CompletionHandler)->Future::: windows asynchronous file channel impl impl lock
sun.nio.ch.WindowsAsynchronousFileChannelImpl#tryLock(long, long, boolean)->FileLock::: windows asynchronous file channel impl try lock
sun.nio.ch.WindowsAsynchronousFileChannelImpl#implRelease(FileLockImpl)->void::: windows asynchronous file channel impl impl release
sun.nio.ch.WindowsAsynchronousFileChannelImpl#implRead(ByteBuffer, long, A, CompletionHandler)->Future::: windows asynchronous file channel impl impl read
sun.nio.ch.WindowsAsynchronousFileChannelImpl#implWrite(ByteBuffer, long, A, CompletionHandler)->Future::: windows asynchronous file channel impl impl write
sun.nio.ch.WindowsAsynchronousServerSocketChannelImpl#getByOverlapped(long)->PendingFuture::: windows asynchronous server socket channel impl get by overlapped
sun.nio.ch.WindowsAsynchronousServerSocketChannelImpl#implClose()->void::: windows asynchronous server socket channel impl impl close
sun.nio.ch.WindowsAsynchronousServerSocketChannelImpl#group()->AsynchronousChannelGroupImpl::: windows asynchronous server socket channel impl group
sun.nio.ch.WindowsAsynchronousServerSocketChannelImpl#implAccept(Object, CompletionHandler)->Future::: windows asynchronous server socket channel impl impl accept
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#group()->AsynchronousChannelGroupImpl::: windows asynchronous socket channel impl group
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#getByOverlapped(long)->PendingFuture:::Invoked by Iocp when an I/O operation competes.
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#handle()->long::: windows asynchronous socket channel impl handle
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#setConnected(InetSocketAddress, InetSocketAddress)->void::: windows asynchronous socket channel impl set connected
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#implClose()->void::: windows asynchronous socket channel impl impl close
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#onCancel(PendingFuture)->void::: windows asynchronous socket channel impl on cancel
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#implConnect(SocketAddress, A, CompletionHandler)->Future::: windows asynchronous socket channel impl impl connect
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#implRead(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler)->Future::: windows asynchronous socket channel impl impl read
sun.nio.ch.WindowsAsynchronousSocketChannelImpl#implWrite(boolean, ByteBuffer, ByteBuffer[], long, TimeUnit, A, CompletionHandler)->Future::: windows asynchronous socket channel impl impl write
sun.nio.ch.WindowsSelectorImpl#doSelect(Consumer, long)->int::: windows selector impl do select
sun.nio.ch.WindowsSelectorImpl#implClose()->void::: windows selector impl impl close
sun.nio.ch.WindowsSelectorImpl#implRegister(SelectionKeyImpl)->void::: windows selector impl impl register
sun.nio.ch.WindowsSelectorImpl#implDereg(SelectionKeyImpl)->void::: windows selector impl impl dereg
sun.nio.ch.WindowsSelectorImpl#setEventOps(SelectionKeyImpl)->void::: windows selector impl set event ops
sun.nio.ch.WindowsSelectorImpl#wakeup()->Selector::: windows selector impl wakeup
sun.nio.ch.WindowsSelectorProvider#openSelector()->AbstractSelector::: windows selector provider open selector

jdk.internal.jline.DefaultTerminal2#init()->void::: default terminal2 init
jdk.internal.jline.DefaultTerminal2#restore()->void::: default terminal2 restore
jdk.internal.jline.DefaultTerminal2#reset()->void::: default terminal2 reset
jdk.internal.jline.DefaultTerminal2#isSupported()->boolean::: default terminal2 is supported
jdk.internal.jline.DefaultTerminal2#getWidth()->int::: default terminal2 get width
jdk.internal.jline.DefaultTerminal2#getHeight()->int::: default terminal2 get height
jdk.internal.jline.DefaultTerminal2#isAnsiSupported()->boolean::: default terminal2 is ansi supported
jdk.internal.jline.DefaultTerminal2#wrapOutIfNeeded(OutputStream)->OutputStream::: default terminal2 wrap out if needed
jdk.internal.jline.DefaultTerminal2#wrapInIfNeeded(InputStream)->InputStream::: default terminal2 wrap in if needed
jdk.internal.jline.DefaultTerminal2#hasWeirdWrap()->boolean::: default terminal2 has weird wrap
jdk.internal.jline.DefaultTerminal2#isEchoEnabled()->boolean::: default terminal2 is echo enabled
jdk.internal.jline.DefaultTerminal2#setEchoEnabled(boolean)->void::: default terminal2 set echo enabled
jdk.internal.jline.DefaultTerminal2#disableInterruptCharacter()->void::: default terminal2 disable interrupt character
jdk.internal.jline.DefaultTerminal2#enableInterruptCharacter()->void::: default terminal2 enable interrupt character
jdk.internal.jline.DefaultTerminal2#getOutputEncoding()->String::: default terminal2 get output encoding
jdk.internal.jline.DefaultTerminal2#getBooleanCapability(String)->boolean::: default terminal2 get boolean capability
jdk.internal.jline.DefaultTerminal2#getNumericCapability(String)->Integer::: default terminal2 get numeric capability
jdk.internal.jline.DefaultTerminal2#getStringCapability(String)->String::: default terminal2 get string capability
jdk.internal.jline.NoInterruptUnixTerminal#init()->void::: no interrupt unix terminal init
jdk.internal.jline.NoInterruptUnixTerminal#restore()->void::: no interrupt unix terminal restore
jdk.internal.jline.OSvTerminal#init()->void::: sv terminal init
jdk.internal.jline.OSvTerminal#restore()->void::: sv terminal restore
jdk.internal.jline.Terminal#init()->void::: terminal init
jdk.internal.jline.Terminal#restore()->void::: terminal restore
jdk.internal.jline.Terminal#reset()->void::: terminal reset
jdk.internal.jline.Terminal#isSupported()->boolean::: terminal is supported
jdk.internal.jline.Terminal#getWidth()->int::: terminal get width
jdk.internal.jline.Terminal#getHeight()->int::: terminal get height
jdk.internal.jline.Terminal#isAnsiSupported()->boolean::: terminal is ansi supported
jdk.internal.jline.Terminal#wrapOutIfNeeded(OutputStream)->OutputStream:::When ANSI is not natively handled, the output will have to be wrapped.
jdk.internal.jline.Terminal#wrapInIfNeeded(InputStream)->InputStream:::When using native support, return the InputStream to use for reading characters else return the input stream passed as a parameter.
jdk.internal.jline.Terminal#hasWeirdWrap()->boolean:::For terminals that don't wrap when character is written in last column, only when the next character is written
jdk.internal.jline.Terminal#isEchoEnabled()->boolean::: terminal is echo enabled
jdk.internal.jline.Terminal#setEchoEnabled(boolean)->void::: terminal set echo enabled
jdk.internal.jline.Terminal#disableInterruptCharacter()->void::: terminal disable interrupt character
jdk.internal.jline.Terminal#enableInterruptCharacter()->void::: terminal enable interrupt character
jdk.internal.jline.Terminal#getOutputEncoding()->String::: terminal get output encoding
jdk.internal.jline.Terminal2#getBooleanCapability(String)->boolean::: terminal2 get boolean capability
jdk.internal.jline.Terminal2#getNumericCapability(String)->Integer::: terminal2 get numeric capability
jdk.internal.jline.Terminal2#getStringCapability(String)->String::: terminal2 get string capability
jdk.internal.jline.TerminalFactory#create()->Terminal::: terminal factory create
jdk.internal.jline.TerminalFactory#create(String)->Terminal::: terminal factory create
jdk.internal.jline.TerminalFactory#reset()->void::: terminal factory reset
jdk.internal.jline.TerminalFactory#resetIf(Terminal)->void::: terminal factory reset if
jdk.internal.jline.TerminalFactory#configure(String)->void::: terminal factory configure
jdk.internal.jline.TerminalFactory#configure(Type)->void::: terminal factory configure
jdk.internal.jline.TerminalFactory#get(String)->Terminal::: terminal factory get
jdk.internal.jline.TerminalFactory#get()->Terminal::: terminal factory get
jdk.internal.jline.TerminalFactory#getFlavor(Flavor)->Terminal::: terminal factory get flavor
jdk.internal.jline.TerminalFactory#getFlavor(Flavor, String)->Terminal::: terminal factory get flavor
jdk.internal.jline.TerminalFactory#registerFlavor(Flavor, TerminalConstructor)->void::: terminal factory register flavor
jdk.internal.jline.TerminalFactory.TerminalConstructor#createTerminal(String)->Terminal::: terminal constructor create terminal
jdk.internal.jline.TerminalSupport#init()->void::: terminal support init
jdk.internal.jline.TerminalSupport#restore()->void::: terminal support restore
jdk.internal.jline.TerminalSupport#reset()->void::: terminal support reset
jdk.internal.jline.TerminalSupport#isSupported()->boolean::: terminal support is supported
jdk.internal.jline.TerminalSupport#isAnsiSupported()->boolean::: terminal support is ansi supported
jdk.internal.jline.TerminalSupport#setAnsiSupported(boolean)->void::: terminal support set ansi supported
jdk.internal.jline.TerminalSupport#wrapOutIfNeeded(OutputStream)->OutputStream:::Subclass to change behavior if needed.
jdk.internal.jline.TerminalSupport#hasWeirdWrap()->boolean:::Defaults to true which was the behaviour before this method was added.
jdk.internal.jline.TerminalSupport#getWidth()->int::: terminal support get width
jdk.internal.jline.TerminalSupport#getHeight()->int::: terminal support get height
jdk.internal.jline.TerminalSupport#isEchoEnabled()->boolean::: terminal support is echo enabled
jdk.internal.jline.TerminalSupport#setEchoEnabled(boolean)->void::: terminal support set echo enabled
jdk.internal.jline.TerminalSupport#disableInterruptCharacter()->void::: terminal support disable interrupt character
jdk.internal.jline.TerminalSupport#enableInterruptCharacter()->void::: terminal support enable interrupt character
jdk.internal.jline.TerminalSupport#wrapInIfNeeded(InputStream)->InputStream::: terminal support wrap in if needed
jdk.internal.jline.TerminalSupport#getOutputEncoding()->String::: terminal support get output encoding
jdk.internal.jline.UnixTerminal#getSettings()->TerminalLineSettings::: unix terminal get settings
jdk.internal.jline.UnixTerminal#init()->void:::Remove line-buffered input by invoking "stty -icanon min 1" against the current terminal.
jdk.internal.jline.UnixTerminal#restore()->void:::Restore the original terminal configuration, which can be used when shutting down the console reader
jdk.internal.jline.UnixTerminal#getWidth()->int:::Returns the value of <tt>stty columns</tt> param.
jdk.internal.jline.UnixTerminal#getHeight()->int:::Returns the value of <tt>stty rows>/tt> param.
jdk.internal.jline.UnixTerminal#hasWeirdWrap()->boolean::: unix terminal has weird wrap
jdk.internal.jline.UnixTerminal#setEchoEnabled(boolean)->void::: unix terminal set echo enabled
jdk.internal.jline.UnixTerminal#disableInterruptCharacter()->void::: unix terminal disable interrupt character
jdk.internal.jline.UnixTerminal#enableInterruptCharacter()->void::: unix terminal enable interrupt character
jdk.internal.jline.UnixTerminal#disableLitteralNextCharacter()->void::: unix terminal disable litteral next character
jdk.internal.jline.UnixTerminal#enableLitteralNextCharacter()->void::: unix terminal enable litteral next character
jdk.internal.jline.UnixTerminal#getBooleanCapability(String)->boolean::: unix terminal get boolean capability
jdk.internal.jline.UnixTerminal#getNumericCapability(String)->Integer::: unix terminal get numeric capability
jdk.internal.jline.UnixTerminal#getStringCapability(String)->String::: unix terminal get string capability
jdk.internal.jline.WindowsTerminal#init()->void::: windows terminal init
jdk.internal.jline.WindowsTerminal#restore()->void:::Restore the original terminal configuration, which can be used when shutting down the console reader
jdk.internal.jline.WindowsTerminal#getWidth()->int::: windows terminal get width
jdk.internal.jline.WindowsTerminal#getHeight()->int::: windows terminal get height
jdk.internal.jline.WindowsTerminal#setEchoEnabled(boolean)->void::: windows terminal set echo enabled
jdk.internal.jline.WindowsTerminal#disableInterruptCharacter()->void::: windows terminal disable interrupt character
jdk.internal.jline.WindowsTerminal#enableInterruptCharacter()->void::: windows terminal enable interrupt character
jdk.internal.jline.WindowsTerminal#setDirectConsole(boolean)->void:::Whether or not to allow the use of the JNI console interaction.
jdk.internal.jline.WindowsTerminal#getDirectConsole()->Boolean:::Whether or not to allow the use of the JNI console interaction.
jdk.internal.jline.WindowsTerminal#wrapInIfNeeded(InputStream)->InputStream::: windows terminal wrap in if needed
jdk.internal.jline.WindowsTerminal#isSystemIn(InputStream)->boolean::: windows terminal is system in
jdk.internal.jline.WindowsTerminal#wrapOutIfNeeded(OutputStream)->OutputStream::: windows terminal wrap out if needed
jdk.internal.jline.WindowsTerminal#getOutputEncoding()->String::: windows terminal get output encoding
jdk.internal.jline.WindowsTerminal#getConsoleMode()->int::: windows terminal get console mode
jdk.internal.jline.WindowsTerminal#setConsoleMode(int)->void::: windows terminal set console mode
jdk.internal.jline.WindowsTerminal#convertKeys(KEY_EVENT_RECORD)->String::: windows terminal convert keys

CompilationResultBuilder_OptionDescriptors#get(String)::: compilation result builder_ option descriptors get:::switch->return->OptionDescriptor->create->return
CompilationResultBuilder_OptionDescriptors#iterator()::: compilation result builder_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
ArrayDataPointerConstant#isDefaultForKind()::: array data pointer constant is default for kind:::return
ArrayDataPointerConstant#serialize(ByteBuffer)::: array data pointer constant serialize:::buffer->put
ArrayDataPointerConstant#getSerializedSize()::: array data pointer constant get serialized size:::return
ArrayDataPointerConstant#toValueString()::: array data pointer constant to value string:::return->Arrays->toString
CompilationResultBuilder.AssemblerAnnotation#equals(Object)::: assembler annotation equals:::return
CompilationResultBuilder.AssemblerAnnotation#toString()::: assembler annotation to string:::return->assemblerCodeAnnotation->toString
CompilationResultBuilder#mustReplaceWithUncompressedNullRegister(JavaConstant)::: compilation result builder must replace with uncompressed null register:::return->uncompressedNullRegister->equals->equals
CompilationResultBuilder#setTotalFrameSize(int)::: compilation result builder set total frame size:::compilationResult->setTotalFrameSize
CompilationResultBuilder#setMaxInterpreterFrameSize(int)::: compilation result builder set max interpreter frame size:::compilationResult->setMaxInterpreterFrameSize
CompilationResultBuilder#recordMark(Object)::: compilation result builder record mark:::return->compilationResult->asm->position->recordMark
CompilationResultBuilder#blockComment(String)::: compilation result builder block comment:::compilationResult->asm->position->new->CompilationResult.CodeComment->addAnnotation
CompilationResultBuilder#finish():::Sets the CompilationResult#setTargetCode(byte[], int) code and CompilationResult#recordExceptionHandler(int, int) exception handler fields of the compilation result and then #closeCompilationResult() closes it.:::position->asm->position->compilationResult->asm->close->setTargetCode->if->foreach->codeOffset->compilationResult->label->position->recordExceptionHandler->closeCompilationResult
CompilationResultBuilder#closeCompilationResult():::Calls CompilationResult#close() on #compilationResult.:::compilationResult->close
CompilationResultBuilder#recordExceptionHandlers(int, LIRFrameState)::: compilation result builder record exception handlers:::if->if->if->new->ArrayList<>->exceptionInfoList->new->ExceptionInfo->add
CompilationResultBuilder#recordImplicitException(int, LIRFrameState)::: compilation result builder record implicit exception:::compilationResult->info->debugInfo->recordInfopoint
CompilationResultBuilder#recordDirectCall(int, int, InvokeTarget, LIRFrameState)::: compilation result builder record direct call:::debugInfo->info->debugInfo->compilationResult->recordCall
CompilationResultBuilder#recordIndirectCall(int, int, InvokeTarget, LIRFrameState)::: compilation result builder record indirect call:::debugInfo->info->debugInfo->compilationResult->recordCall
CompilationResultBuilder#recordInfopoint(int, LIRFrameState, InfopointReason)::: compilation result builder record infopoint:::debugInfo->info->debugInfo->recordInfopoint
CompilationResultBuilder#recordInfopoint(int, DebugInfo, InfopointReason)::: compilation result builder record infopoint:::compilationResult->recordInfopoint
CompilationResultBuilder#recordSourceMapping(int, int, NodeSourcePosition)::: compilation result builder record source mapping:::compilationResult->recordSourceMapping
CompilationResultBuilder#recordInlineDataInCode(Constant)::: compilation result builder record inline data in code:::pos->asm->position->debug->log->if->compilationResult->new->ConstantReference->recordDataPatch
CompilationResultBuilder#recordInlineDataInCodeWithNote(Constant, Object)::: compilation result builder record inline data in code with note:::pos->asm->position->debug->log->if->compilationResult->new->ConstantReference->recordDataPatchWithNote
CompilationResultBuilder#recordDataSectionReference(Data)::: compilation result builder record data section reference:::reference->compilationResult->getDataSection->insertData->instructionStart->asm->position->compilationResult->recordDataPatch->return->asm->getPlaceholder
CompilationResultBuilder#recordDataReferenceInCode(DataPointerConstant)::: compilation result builder record data reference in code:::return->constant->getAlignment->recordDataReferenceInCode
CompilationResultBuilder#recordDataReferenceInCode(Constant, int)::: compilation result builder record data reference in code:::debug->asm->position->log->data->createDataItem->data->updateAlignment->return->recordDataSectionReference
CompilationResultBuilder#recordDataReferenceInCode(Data, int)::: compilation result builder record data reference in code:::data->updateAlignment->return->recordDataSectionReference
CompilationResultBuilder#createDataItem(Constant)::: compilation result builder create data item:::data->dataCache->get->if->dataBuilder->createDataItem->dataCache->put->return
CompilationResultBuilder#recordDataReferenceInCode(byte[], int)::: compilation result builder record data reference in code:::if->debug->isLogEnabled->debug->asm->position->Arrays->toString->log->return->new->RawData->recordDataSectionReference
CompilationResultBuilder#recordBranch(int, boolean):::Notifies this object of a branch instruction at offset pcOffset in the code.:::
CompilationResultBuilder#recordInvokeVirtualOrInterfaceCallOp(int, NodeSourcePosition):::Notifies this object of a call instruction belonging to an INVOKEVIRTUAL or INVOKEINTERFACE at offset pcOffset in the code.:::
CompilationResultBuilder#recordInlineInvokeCallOp(int, NodeSourcePosition):::Notifies this object of a call instruction belonging to an INLINE_INVOKE at offset pcOffset in the code.:::
CompilationResultBuilder#asIntConst(Value):::Returns the integer value of any constant that can be represented by a 32-bit integer value, including long constants that fit into the 32-bit range.:::constant->asJavaConstant->c->constant->asLong->if->NumUtil->isInt->throw->GraalError->shouldNotReachHere->return
CompilationResultBuilder#asFloatConst(Value):::Returns the float value of any constant that can be represented by a 32-bit float value.:::constant->asJavaConstant->return->constant->asFloat
CompilationResultBuilder#asLongConst(Value):::Returns the long value of any constant that can be represented by a 64-bit long value.:::constant->asJavaConstant->return->constant->asLong
CompilationResultBuilder#asDoubleConst(Value):::Returns the double value of any constant that can be represented by a 64-bit float value.:::constant->asJavaConstant->return->constant->asDouble
CompilationResultBuilder#asFloatConstRef(JavaConstant):::Returns the address of a float constant that is embedded as a data reference into the code.:::return->asFloatConstRef
CompilationResultBuilder#asFloatConstRef(JavaConstant, int)::: compilation result builder as float const ref:::return->recordDataReferenceInCode
CompilationResultBuilder#asDoubleConstRef(JavaConstant):::Returns the address of a double constant that is embedded as a data reference into the code.:::return->asDoubleConstRef
CompilationResultBuilder#asDoubleConstRef(JavaConstant, int)::: compilation result builder as double const ref:::return->recordDataReferenceInCode
CompilationResultBuilder#asLongConstRef(JavaConstant):::Returns the address of a long constant that is embedded as a data reference into the code.:::return->recordDataReferenceInCode
CompilationResultBuilder#asObjectConstRef(JavaConstant):::Returns the address of an object constant that is embedded as a data reference into the code.:::return->recordDataReferenceInCode
CompilationResultBuilder#asByteAddr(Value)::: compilation result builder as byte addr:::return->asAddress
CompilationResultBuilder#asShortAddr(Value)::: compilation result builder as short addr:::return->asAddress
CompilationResultBuilder#asIntAddr(Value)::: compilation result builder as int addr:::return->asAddress
CompilationResultBuilder#asLongAddr(Value)::: compilation result builder as long addr:::return->asAddress
CompilationResultBuilder#asFloatAddr(Value)::: compilation result builder as float addr:::return->asAddress
CompilationResultBuilder#asDoubleAddr(Value)::: compilation result builder as double addr:::return->asAddress
CompilationResultBuilder#asAddress(Value)::: compilation result builder as address:::slot->asStackSlot->return->asm->frameMap->getRegisterConfig->getFrameRegister->frameMap->offsetForStackSlot->makeAddress
CompilationResultBuilder#isSuccessorEdge(LabelRef):::Determines if a given edge from the block currently being emitted goes to its lexical successor.:::order->lir->codeEmittingOrder->nextBlock->LIR->getNextBlock->return->edge->getTargetBlock
CompilationResultBuilder#emit(LIR):::Emits code for lir in its LIR#codeEmittingOrder() code emitting order.:::frameContext->enter->foreach->lir->codeEmittingOrder->emitBlock
CompilationResultBuilder#emitBlock(AbstractBlockBase)::: compilation result builder emit block:::if->return->emitComment->debug->isDumpEnabled->getOptions->getValue->if->String->block->getId->block->getLoop->format->blockComment->foreach->lir->getLIRforBlock->if->String->op->id->format->blockComment->try->if->beforeOp->accept->emitOp->if->afterOp->accept->catch->throw->e->op->id->op->getClass->getName->Arrays->lir->codeEmittingOrder->toString->addContext->finally
CompilationResultBuilder#emitOp(CompilationResultBuilder, LIRInstruction)::: compilation result builder emit op:::try->start->position->op->emitCode->if->op->getPosition->crb->position->op->getPosition->recordSourceMapping->catch->throw->throw->new->GraalError->throw->new->GraalError->finally
CompilationResultBuilder#resetForEmittingCode()::: compilation result builder reset for emitting code:::asm->reset->compilationResult->resetForEmittingCode->if->exceptionInfoList->clear->if->dataCache->clear
CompilationResultBuilder#setOpCallback(Consumer, Consumer)::: compilation result builder set op callback:::
CompilationResultBuilder#getOptions()::: compilation result builder get options:::return
CompilationResultBuilder#buildLabelOffsets(LIR):::Builds up a map for label and LIR instruction positions where labels are or labels pointing to.:::EconomicMap->create->EconomicMap->create->instructionPosition->foreach->generatedLIR->codeEmittingOrder->if->foreach->generatedLIR->getLIRforBlock->if->label->getLabel->if->labelBindLirPositions->put->lirPositions->put
CompilationResultBuilder#labelWithinRange(LIRInstruction, Label, int):::Answers the code generator whether the jump from instruction to label is within disp LIR instructions.:::if->return->labelPosition->labelBindLirPositions->get->instructionPosition->lirPositions->get->result->if->Math->abs->else->return
CompilationResultBuilder#setConservativeLabelRanges():::Sets this CompilationResultBuilder into conservative mode:::
CompilationResultBuilderFactory#createBuilder(CodeCacheProvider, ForeignCallsProvider, FrameMap, Assembler, DataBuilder, FrameContext, OptionValues, DebugContext, CompilationResult, Register):::Creates a new CompilationResultBuilder.:::
DataBuilder#createDataItem(Constant)::: data builder create data item:::
FrameContext#enter(CompilationResultBuilder):::Emits code common to all entry points of a method:::
FrameContext#leave(CompilationResultBuilder):::Emits code to be executed just prior to returning from a method:::
FrameContext#hasFrame():::Determines if a frame is set up and torn down by this object.:::

Decompressor#decompressResource(ByteOrder, StringsProvider, byte[]):::Decompress a resource.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->header->do->CompressedResourceHeader->readFromResource->if->decompressor->pluginsCache->header->getDecompressorNameOffset->get->if->pluginName->provider->header->getDecompressorNameOffset->getString->if->throw->new->IOException->storedContent->header->getStoredContent->props->new->Properties->if->try->stream->storedContent->getBytes->new->ByteArrayInputStream->props->loadFromXML->catch->finally->ResourceDecompressorRepository->newResourceDecompressor->if->throw->new->IOException->pluginsCache->header->getDecompressorNameOffset->put->try->decompressor->CompressedResourceHeader->getSize->header->getUncompressedSize->decompress->catch->throw->new->IOException->finally->while->return
ResourceDecompressor#getName():::Decompressor unique name.:::
ResourceDecompressor#decompress(StringsProvider, byte[], int, long):::Decompress a resource.:::
ResourceDecompressorFactory#getName():::The Factory name.:::return
ResourceDecompressorFactory#newDecompressor(Properties):::To build a new decompressor.:::
ResourceDecompressorRepository#newResourceDecompressor(Properties, String):::Build a new decompressor for the passed name.:::fact->factories->get->if->return->fact->newDecompressor->return

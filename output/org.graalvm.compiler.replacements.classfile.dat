Classfile#getCode(String, String)::: classfile get code:::foreach->method->code->getMethod->if->method->getName->equals->method->getSignature->toMethodDescriptor->equals->return->throw->type->toJavaName->new->NoSuchMethodError
Classfile#skipAttributes(DataInputStream)::: classfile skip attributes:::attributesCount->stream->readUnsignedShort->for->i
Classfile#skipFully(DataInputStream, int)::: classfile skip fully:::skipped->do->s->stream->skip->if->if->stream->read->throw->new->IOException->while
Classfile#findCodeAttribute(DataInputStream, ClassfileConstantPool, String, String, boolean)::: classfile find code attribute:::attributesCount->stream->readUnsignedShort->code->for->i->return
Classfile#skipFields(DataInputStream)::: classfile skip fields:::count->stream->readUnsignedShort->for->i
Classfile#readMethods(DataInputStream, ClassfileConstantPool)::: classfile read methods:::count->stream->readUnsignedShort->result->new->ArrayList<>->for->i->return
Classfile#toString()::: classfile to string:::return->getClass->getSimpleName->type->toJavaName
ClassfileBytecode#getOrigin()::: classfile bytecode get origin:::return
ClassfileBytecode#readCodeAttributes(DataInputStream)::: classfile bytecode read code attributes:::count->stream->readUnsignedShort->for->i
ClassfileBytecode#getCode()::: classfile bytecode get code:::return
ClassfileBytecode#getCodeSize()::: classfile bytecode get code size:::return
ClassfileBytecode#getMaxLocals()::: classfile bytecode get max locals:::return
ClassfileBytecode#getMaxStackSize()::: classfile bytecode get max stack size:::return
ClassfileBytecode#getExceptionHandlers()::: classfile bytecode get exception handlers:::if->return->new->ExceptionHandlerArr->exceptionTableLength->handlers->new->ExceptionHandlerArr->stream->new->ByteArrayInputStream->new->DataInputStream->for->i->return
ClassfileBytecode#asStackTraceElement(int)::: classfile bytecode as stack trace element:::line->getLineNumberTable->getLineNumber->return->method->getDeclaringClass->toJavaName->method->getName->method->getDeclaringClass->getSourceFileName->new->StackTraceElement
ClassfileBytecode#getConstantPool()::: classfile bytecode get constant pool:::return
ClassfileBytecode#getLineNumberTable()::: classfile bytecode get line number table:::if->return->lineNumberTableLength->stream->new->ByteArrayInputStream->new->DataInputStream->bci->new->intArr->line->new->intArr->for->i->return->new->LineNumberTable
ClassfileBytecode#getLocalVariableTable()::: classfile bytecode get local variable table:::if->return->localVariableTableLength->stream->new->ByteArrayInputStream->new->DataInputStream->locals->new->LocalArr->for->i->return->new->LocalVariableTable
ClassfileBytecode#getMethod()::: classfile bytecode get method:::return
ClassfileBytecode#getProfilingInfo()::: classfile bytecode get profiling info:::return->DefaultProfilingInfo->get
ClassfileBytecode#toString()::: classfile bytecode to string:::return->getClass->getName->method->format
ClassfileBytecodeProvider#getBytecode(ResolvedJavaMethod)::: classfile bytecode provider get bytecode:::classfile->method->getDeclaringClass->getName->resolveToClass->getClassfile->return->classfile->method->getName->method->getSignature->toMethodDescriptor->getCode
ClassfileBytecodeProvider#supportsInvokedynamic()::: classfile bytecode provider supports invokedynamic:::return
ClassfileBytecodeProvider#shouldRecordMethodDependencies()::: classfile bytecode provider should record method dependencies:::return
ClassfileBytecodeProvider#getClassfile(Class):::Gets a Classfile created by parsing the class file bytes for c.:::classfile->classfiles->get->if->try->type->metaAccess->lookupJavaType->try->in->GraalServices->getClassfileAsStream->if->stream->new->DataInputStream->new->Classfile->classfiles->put->return->catch->finally->throw->c->getName->new->NoClassDefFoundError->catch->throw->c->getName->new->NoClassDefFoundError->initCause->finally->return
ClassfileBytecodeProvider#resolveToClass(String)::: classfile bytecode provider resolve to class:::c->classes->get->if->if->descriptor->length->JavaKind->descriptor->charAt->fromPrimitiveOrVoidTypeChar->toJavaClass->else->dimensions->while->descriptor->charAt->name->if->descriptor->startsWith->descriptor->endsWith->descriptor->descriptor->length->substring->replace->else->descriptor->replace->try->Class->forName->classes->put->catch->throw->new->NoClassDefFoundError->finally->return
ClassfileBytecodeProvider.FieldKey#toString()::: field key to string:::return
ClassfileBytecodeProvider.FieldKey#equals(Object)::: field key equals:::if->that->return->equals->equals->return
ClassfileBytecodeProvider.FieldKey#hashCode()::: field key hash code:::return->name->hashCode->type->hashCode
ClassfileBytecodeProvider.MethodKey#toString()::: method key to string:::return
ClassfileBytecodeProvider.MethodKey#equals(Object)::: method key equals:::if->that->return->equals->equals->return
ClassfileBytecodeProvider.MethodKey#hashCode()::: method key hash code:::return->name->hashCode->descriptor->hashCode
ClassfileBytecodeProvider.MethodsCache#lookup(ResolvedJavaType, String, String)::: methods cache lookup:::key->new->MethodKey->if->name->equals->return->type->getClassInitializer->if->name->equals->if->type->getDeclaredMethods->createMethodMap->return->methods->get->else->if->type->getDeclaredConstructors->createMethodMap->return->constructors->get
ClassfileBytecodeProvider.MethodsCache#createMethodMap(ResolvedJavaMethod[])::: methods cache create method map:::map->EconomicMap->create->foreach->map->m->getName->m->getSignature->toMethodDescriptor->new->MethodKey->put->return
ClassfileBytecodeProvider.FieldsCache#lookup(ResolvedJavaType, String, String, boolean)::: fields cache lookup:::key->new->FieldKey->if->if->type->getStaticFields->createFieldMap->return->staticFields->get->else->if->type->getInstanceFields->createFieldMap->return->instanceFields->get
ClassfileBytecodeProvider.FieldsCache#createFieldMap(ResolvedJavaField[])::: fields cache create field map:::map->EconomicMap->create->foreach->map->f->getName->f->getType->getName->new->FieldKey->put->return
ClassfileBytecodeProvider#getMethods(ResolvedJavaType):::Gets the methods cache for type:::methodsCache->methods->get->if->new->MethodsCache->methods->put->return
ClassfileBytecodeProvider#getFields(ResolvedJavaType):::Gets the fields cache for type:::fieldsCache->fields->get->if->new->FieldsCache->fields->put->return
ClassfileBytecodeProvider#findField(ResolvedJavaType, String, String, boolean)::: classfile bytecode provider find field:::return->getFields->lookup
ClassfileBytecodeProvider#findMethod(ResolvedJavaType, String, String, boolean)::: classfile bytecode provider find method:::method->getMethods->lookup->if->method->isStatic->return->return
ClassfileConstant#loadReferencedType(ClassfileConstantPool, int, int):::Loads the type, if any, referenced at a specified entry.:::
ClassfileConstant#toString()::: classfile constant to string:::return->getClass->getSimpleName
ClassfileConstant.ClassRef#loadReferencedType(ClassfileConstantPool, int, int)::: class ref load referenced type:::resolve
ClassfileConstant.ClassRef#resolve(ClassfileConstantPool)::: class ref resolve:::if->typeDescriptor->cp->get->context->context->resolveToClass->lookupJavaType->return
ClassfileConstant.MemberRef#loadReferencedType(ClassfileConstantPool, int, int)::: member ref load referenced type:::cp->get->loadReferencedType
ClassfileConstant.ExecutableRef#resolve(ClassfileConstantPool, int)::: executable ref resolve:::if->cls->cp->get->resolve->nameAndType->cp->get->name->nameAndType->getName->type->nameAndType->getType->if->resolveMethod->if->throw->cls->toJavaName->new->NoSuchMethodError->if->method->isPublic->method->getDeclaringClass->isInterface->method->getDeclaringClass->isJavaLangObject->throw->method->format->new->IncompatibleClassChangeError->else->if->resolveMethod->if->throw->cls->toJavaName->new->NoSuchMethodError->else->resolveMethod->if->throw->cls->toJavaName->new->NoSuchMethodError->return
ClassfileConstant.FieldRef#resolve(ClassfileConstantPool, int)::: field ref resolve:::if->cls->cp->get->resolve->nameAndType->cp->get->name->nameAndType->getName->type->nameAndType->getType->resolveField->if->throw->cls->toJavaName->new->NoSuchFieldError->return
ClassfileConstant.StringRef#getValue(ClassfileConstantPool)::: string ref get value:::if->pool->lookupUtf8->forObject->return
ClassfileConstant.NameAndType#getName(ClassfileConstantPool)::: name and type get name:::if->cp->get->return
ClassfileConstant.NameAndType#getType(ClassfileConstantPool)::: name and type get type:::if->cp->get->return
ClassfileConstant.Unsupported#loadReferencedType(ClassfileConstantPool, int, int)::: unsupported load referenced type:::throw->getSimpleName->new->GraalError
ClassfileConstant#resolveMethod(ClassfileBytecodeProvider, ResolvedJavaType, String, String, boolean)::: classfile constant resolve method:::method->context->findMethod->if->return->if->c->isJavaLangObject->c->isInterface->c->getSuperclass->resolveMethod->if->return->foreach->c->getInterfaces->resolveMethod->if->return->return
ClassfileConstant#resolveField(ClassfileBytecodeProvider, ResolvedJavaType, String, String, boolean)::: classfile constant resolve field:::field->context->findField->if->return->if->c->isJavaLangObject->c->isInterface->c->getSuperclass->resolveField->if->return->foreach->c->getInterfaces->resolveField->if->return->return
ClassfileConstantPool#readConstant(DataInputStream)::: classfile constant pool read constant:::tag->stream->readByte->switch->return->new->ClassfileConstant.ClassRef->return->new->ClassfileConstant.FieldRef->return->new->ClassfileConstant.MethodRef->return->new->ClassfileConstant.InterfaceMethodRef->return->new->ClassfileConstant.StringRef->return->JavaConstant->stream->readInt->forInt->new->ClassfileConstant.Primitive->return->JavaConstant->stream->readFloat->forFloat->new->ClassfileConstant.Primitive->return->JavaConstant->stream->readLong->forLong->new->ClassfileConstant.Primitive->return->JavaConstant->stream->readDouble->forDouble->new->ClassfileConstant.Primitive->return->new->ClassfileConstant.NameAndType->return->stream->readUTF->new->ClassfileConstant.Utf8->skipFully->return->new->ClassfileConstant.Unsupported->skipFully->return->new->ClassfileConstant.Unsupported->skipFully->return->new->ClassfileConstant.Unsupported->skipFully->return->new->ClassfileConstant.Unsupported->throw->new->GraalError
ClassfileConstantPool#length()::: classfile constant pool length:::return
ClassfileConstantPool#get(Class, int)::: classfile constant pool get:::return->c->cast
ClassfileConstantPool#loadReferencedType(int, int)::: classfile constant pool load referenced type:::if->throw->getSimpleName->new->GraalError->loadReferencedType
ClassfileConstantPool#lookupField(int, ResolvedJavaMethod, int)::: classfile constant pool lookup field:::return->get->resolve
ClassfileConstantPool#lookupMethod(int, int)::: classfile constant pool lookup method:::if->throw->getSimpleName->new->GraalError->return->get->resolve
ClassfileConstantPool#lookupType(int, int)::: classfile constant pool lookup type:::return->get->resolve
ClassfileConstantPool#lookupUtf8(int)::: classfile constant pool lookup utf8:::return
ClassfileConstantPool#lookupSignature(int)::: classfile constant pool lookup signature:::throw->GraalError->shouldNotReachHere
ClassfileConstantPool#lookupConstant(int)::: classfile constant pool lookup constant:::c->if->p->return->switch->opcode->return->lookupType->return->getValue->throw->new->GraalError
ClassfileConstantPool#lookupAppendix(int, int)::: classfile constant pool lookup appendix:::if->return->throw->GraalError->shouldNotReachHere

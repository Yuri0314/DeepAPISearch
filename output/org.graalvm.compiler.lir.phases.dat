LIRPhase_OptionDescriptors#get(String)::: phase_ option descriptors get:::switch->return->OptionDescriptor->create->return
LIRPhase_OptionDescriptors#iterator()::: phase_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
PostAllocationOptimizationStage_OptionDescriptors#get(String)::: post allocation optimization stage_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
PostAllocationOptimizationStage_OptionDescriptors#iterator()::: post allocation optimization stage_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
GenericContext#contextAdd(T)::: generic context context add:::if->new->ArrayList<>->context->add
GenericContext#contextLookup(Class)::: generic context context lookup:::if->foreach->if->clazz->isInstance->return->return
GenericContext#contextRemove(Class)::: generic context context remove:::if->it->context->listIterator->while->it->hasNext->e->it->next->if->clazz->isInstance->it->remove->if->context->isEmpty->return->return
LIRPhase#getLIRPhaseStatistics(Class)::: phase get phase statistics:::return->statisticsClassValue->get
LIRPhase#checkName(CharSequence)::: phase check name:::return
LIRPhase#apply(TargetDescription, LIRGenerationResult, C)::: phase apply:::apply
LIRPhase#apply(TargetDescription, LIRGenerationResult, C, boolean)::: phase apply:::debug->lirGenRes->getLIR->getDebug->try->s->debug->getName->scope->try->a->timer->start->c->memUseTracker->start->run->if->debug->areScopesEnabled->dumpAfter->catch->finally->catch->throw->debug->handle->finally
LIRPhase#dumpAfter(LIRGenerationResult)::: phase dump after:::isStage->if->debug->lirGenRes->getLIR->getDebug->if->debug->isDumpEnabled->debug->lirGenRes->getLIR->getName->dump
LIRPhase#run(TargetDescription, LIRGenerationResult, C)::: phase run:::
LIRPhase#createName(Class)::: phase create name:::className->clazz->getName->s->className->className->lastIndexOf->substring->innerClassPos->s->indexOf->if->s->substring->if->s->endsWith->s->s->length->length->substring->return
LIRPhase#createName()::: phase create name:::return->getClass->createName
LIRPhase#getName()::: phase get name:::name->createName->return
LIRPhaseSuite#getPhases():::Gets an unmodifiable view on the phases in this suite.:::return->Collections->unmodifiableList
LIRPhaseSuite#prependPhase(LIRPhase):::Add a new phase at the beginning of this suite.:::phases->add
LIRPhaseSuite#appendPhase(LIRPhase):::Add a new phase at the end of this suite.:::phases->add
LIRPhaseSuite#findPhase(Class>)::: phase suite find phase:::it->phases->listIterator->if->findNextPhase->return->else->return
LIRPhaseSuite#findPhaseInstance(Class)::: phase suite find phase instance:::it->phases->listIterator->while->it->hasNext->phase->it->next->if->phaseClass->isInstance->return->phaseClass->cast->return
LIRPhaseSuite#findNextPhase(ListIterator>, Class>)::: phase suite find next phase:::while->it->hasNext->phase->it->next->if->phaseClass->isInstance->return->return
LIRPhaseSuite#run(TargetDescription, LIRGenerationResult, C)::: phase suite run:::foreach->phase->apply
LIRPhaseSuite#copy()::: phase suite copy:::suite->new->LIRPhaseSuite<>->addAll->return
LIRPhaseSuite#isImmutable()::: phase suite is immutable:::return
LIRPhaseSuite#setImmutable()::: phase suite set immutable:::if->Collections->unmodifiableList
LIRSuites#getPreAllocationOptimizationStage():::PreAllocationOptimizationPhases are executed between LIR generation and register allocation:::return
LIRSuites#getAllocationStage():::AllocationPhases are responsible for register allocation and translating VirtualStackSlots into StackSlots:::return
LIRSuites#getPostAllocationOptimizationStage():::PostAllocationOptimizationPhases are executed after register allocation and before machine code generation:::return
LIRSuites#isImmutable()::: suites is immutable:::return
LIRSuites#setImmutable()::: suites set immutable:::if->preAllocOptStage->setImmutable->allocStage->setImmutable->postAllocStage->setImmutable
LIRSuites#copy()::: suites copy:::return->preAllocOptStage->copy->allocStage->copy->postAllocStage->copy->new->LIRSuites

org.graalvm.compiler.lir.phases.LIRPhase_OptionDescriptors#get(String)->OptionDescriptor::: phase_ option descriptors get
org.graalvm.compiler.lir.phases.LIRPhase_OptionDescriptors#iterator()->Iterator::: phase_ option descriptors iterator
org.graalvm.compiler.lir.phases.PostAllocationOptimizationStage_OptionDescriptors#get(String)->OptionDescriptor::: post allocation optimization stage_ option descriptors get
org.graalvm.compiler.lir.phases.PostAllocationOptimizationStage_OptionDescriptors#iterator()->Iterator::: post allocation optimization stage_ option descriptors iterator
org.graalvm.compiler.lir.phases.GenericContext#contextAdd(T)->void::: generic context context add
org.graalvm.compiler.lir.phases.GenericContext#contextLookup(Class)->T::: generic context context lookup
org.graalvm.compiler.lir.phases.GenericContext#contextRemove(Class)->T::: generic context context remove
org.graalvm.compiler.lir.phases.LIRPhase#getLIRPhaseStatistics(Class)->LIRPhaseStatistics::: phase get phase statistics
org.graalvm.compiler.lir.phases.LIRPhase#apply(TargetDescription, LIRGenerationResult, C)->void::: phase apply
org.graalvm.compiler.lir.phases.LIRPhase#apply(TargetDescription, LIRGenerationResult, C, boolean)->void::: phase apply
org.graalvm.compiler.lir.phases.LIRPhase#run(TargetDescription, LIRGenerationResult, C)->void::: phase run
org.graalvm.compiler.lir.phases.LIRPhase#createName(Class)->CharSequence::: phase create name
org.graalvm.compiler.lir.phases.LIRPhase#createName()->CharSequence::: phase create name
org.graalvm.compiler.lir.phases.LIRPhase#getName()->CharSequence::: phase get name
org.graalvm.compiler.lir.phases.LIRPhaseSuite#getPhases()->List>:::Gets an unmodifiable view on the phases in this suite.
org.graalvm.compiler.lir.phases.LIRPhaseSuite#prependPhase(LIRPhase)->void:::Add a new phase at the beginning of this suite.
org.graalvm.compiler.lir.phases.LIRPhaseSuite#appendPhase(LIRPhase)->void:::Add a new phase at the end of this suite.
org.graalvm.compiler.lir.phases.LIRPhaseSuite#findPhase(Class>)->ListIterator>::: phase suite find phase
org.graalvm.compiler.lir.phases.LIRPhaseSuite#findPhaseInstance(Class)->T::: phase suite find phase instance
org.graalvm.compiler.lir.phases.LIRPhaseSuite#findNextPhase(ListIterator>, Class>)->boolean::: phase suite find next phase
org.graalvm.compiler.lir.phases.LIRPhaseSuite#run(TargetDescription, LIRGenerationResult, C)->void::: phase suite run
org.graalvm.compiler.lir.phases.LIRPhaseSuite#copy()->LIRPhaseSuite::: phase suite copy
org.graalvm.compiler.lir.phases.LIRPhaseSuite#isImmutable()->boolean::: phase suite is immutable
org.graalvm.compiler.lir.phases.LIRPhaseSuite#setImmutable()->void::: phase suite set immutable
org.graalvm.compiler.lir.phases.LIRSuites#getPreAllocationOptimizationStage()->LIRPhaseSuite:::PreAllocationOptimizationPhases are executed between LIR generation and register allocation
org.graalvm.compiler.lir.phases.LIRSuites#getAllocationStage()->LIRPhaseSuite:::AllocationPhases are responsible for register allocation and translating VirtualStackSlots into StackSlots
org.graalvm.compiler.lir.phases.LIRSuites#getPostAllocationOptimizationStage()->LIRPhaseSuite:::PostAllocationOptimizationPhases are executed after register allocation and before machine code generation
org.graalvm.compiler.lir.phases.LIRSuites#isImmutable()->boolean::: suites is immutable
org.graalvm.compiler.lir.phases.LIRSuites#setImmutable()->void::: suites set immutable
org.graalvm.compiler.lir.phases.LIRSuites#copy()->LIRSuites::: suites copy

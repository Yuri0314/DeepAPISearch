TIFFBaseJPEGCompressor#pruneNodes(Node, boolean):::Removes nonessential nodes from a JPEG native image metadata tree:::if->throw->new->NullPointerException->if->tree->getNodeName->equals->throw->new->IllegalArgumentException->wantedNodes->new->ArrayList<String>->wantedNodes->Arrays->new->StringArr->asList->addAll->if->wantedNodes->add->wantedNodes->add->wantedNodes->add->wantedNodes->add->iioTree->nodes->getAllNodes->numNodes->nodes->size->for->i
TIFFBaseJPEGCompressor#getAllNodes(IIOMetadataNode, List)::: base compressor get all nodes:::if->new->ArrayList<Node>->if->root->hasChildNodes->sibling->root->getFirstChild->while->nodes->add->getAllNodes->sibling->getNextSibling->return
TIFFBaseJPEGCompressor.IIOByteArrayOutputStream#writeTo(ImageOutputStream)::: byte array output stream write to:::ios->write
TIFFBaseJPEGCompressor#initJPEGWriter(boolean, boolean):::Initializes the JPEGWriter and JPEGParam instance variables:::if->spi->getOriginatingProvider->if->smName->spi->getNativeStreamMetadataFormatName->if->smName->equals->if->imName->spi->getNativeImageMetadataFormatName->if->imName->equals->if->iter->ImageIO->getImageWritersByFormatName->while->iter->hasNext->writer->iter->next->if->spi->writer->getOriginatingProvider->if->smName->spi->getNativeStreamMetadataFormatName->if->smName->equals->continue->if->imName->spi->getNativeImageMetadataFormatName->if->imName->equals->continue->break->if->throw->new->NullPointerException->if->if->else->writer->getLocale->new->JPEGImageWriteParam->if->param->getCompressionMode->JPEGParam->setCompressionMode->JPEGParam->param->getCompressionQuality->setCompressionQuality
TIFFBaseJPEGCompressor#getImageMetadata(boolean):::Retrieves image metadata with non-core nodes removed.:::if->IMAGE_METADATA_NAME->JPEGWriter->getOriginatingProvider->getNativeImageMetadataFormatName->equals->tiffWriter->JPEGWriter->tiffWriter->getImageType->getDefaultImageMetadata->tree->JPEGImageMetadata->getAsTree->try->pruneNodes->catch->throw->new->IIOException->finally->try->JPEGImageMetadata->setFromTree->catch->throw->new->IIOException->finally->return
TIFFBaseJPEGCompressor#encode(byte[], int, int, int, int[], int)::: base compressor encode:::if->throw->new->IIOException->if->throw->new->IIOException->if->new->IIOByteArrayOutputStream->else->baos->reset->ios->new->MemoryCacheImageOutputStream->JPEGWriter->setOutput->dbb->if->new->DataBufferByte->else->bytesPerSegment->btmp->new->byteArr->System->arraycopy->new->DataBufferByte->offsets->cs->if->new->intArr->ColorSpace->getInstance->else->new->intArr->ColorSpace->getInstance->cm->new->ComponentColorModel->sm->new->PixelInterleavedSampleModel->wras->Raster->new->Point->createWritableRaster->bi->new->BufferedImage->imageMetadata->getImageMetadata->compDataLength->if->JPEGWriter->prepareWriteSequence->ios->flush->baos->reset->image->new->IIOImage->JPEGWriter->writeToSequence->JPEGWriter->endWriteSequence->else->JPEGWriter->new->IIOImage->write->baos->size->baos->writeTo->baos->reset->return
TIFFBaseJPEGCompressor#finalize()::: base compressor finalize:::super->finalize->if->JPEGWriter->dispose
TIFFCIELabColorConverter#clamp(float)::: lab color converter clamp:::if->return->else->if->return->else->return
TIFFCIELabColorConverter#clamp2(float)::: lab color converter clamp2:::if->return->else->if->return->else->return
TIFFCIELabColorConverter#fromRGB(float, float, float, float[])::: lab color converter from b:::X->Y->Z->YYn->XXn->ZZn->if->else->Math->pow->if->else->Math->pow->if->else->Math->pow->LStar->aStar->bStar->if->if->clamp2->clamp2->clamp2
TIFFCIELabColorConverter#toRGB(float, float, float, float[])::: lab color converter to b:::LStar->aStar->bStar->YYn->fY->if->else->YYn_cubeRoot->Math->pow->Y->fX->X->if->else->fZ->Z->if->else->R->G->B->clamp->clamp->clamp
TIFFColorConverter#fromRGB(float, float, float, float[]):::Converts an RGB triple into the native color space of this TIFFColorConverter, and stores the result in the first three entries of the result array.:::
TIFFColorConverter#toRGB(float, float, float, float[]):::Converts  a   triple  in  the   native  color  space   of  this TIFFColorConverter into an RGB triple, and stores the result in the first three entries of the rgb array.:::
TIFFCompressor#getCompressionType():::Retrieve the name of the compression type supported by this compressor.:::return
TIFFCompressor#getCompressionTagValue():::Retrieve the value to be assigned to the TIFF Compression tag in the TIFF image metadata.:::return
TIFFCompressor#isCompressionLossless():::Retrieves a value indicating whether the compression is lossless.:::return
TIFFCompressor#setStream(ImageOutputStream):::Sets the ImageOutputStream to be written.:::
TIFFCompressor#getStream():::Returns the ImageOutputStream that will be written.:::return
TIFFCompressor#setWriter(ImageWriter):::Sets the value of the writer field.:::
TIFFCompressor#getWriter():::Returns the current ImageWriter.:::return
TIFFCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field.:::
TIFFCompressor#getMetadata():::Returns the current IIOMetadata object.:::return
TIFFCompressor#encode(byte[], int, int, int, int[], int):::Encodes the supplied image data, writing to the currently set ImageOutputStream.:::
TIFFDecompressor#createInterleavedSM(int, int):::Create a PixelInterleavedSampleModel for use in creating an ImageTypeSpecifier:::bandOffsets->new->intArr->for->i->return->new->PixelInterleavedSampleModel
TIFFDecompressor#createComponentCM(ColorSpace, int, int[], int, boolean, boolean)::: decompressor create component m:::transparency->return->new->ComponentColorModel
TIFFDecompressor#createMask(int[], int)::: decompressor create mask:::mask->for->i->return
TIFFDecompressor#getDataTypeFromNumBits(int, boolean)::: decompressor get data type from num bits:::dataType->if->else->if->else->return
TIFFDecompressor#areIntArraysEqual(int[], int[])::: decompressor are int arrays equal:::if->if->return->else->return->if->return->length->for->i->return
TIFFDecompressor#getDataTypeSize(int):::Return the number of bits occupied by dataType which must be one of the DataBuffer TYPEs.:::dataTypeSize->switch->break->break->break->break->throw->new->IIOException->return
TIFFDecompressor#getBitsPerPixel(SampleModel):::Returns the number of bits per pixel.:::bitsPerPixel->sampleSize->sm->getSampleSize->numBands->for->i->return
TIFFDecompressor#areSampleSizesEqual(SampleModel):::Returns whether all samples have the same number of bits.:::allSameSize->sampleSize->sm->getSampleSize->sampleSize0->numBands->for->i->return
TIFFDecompressor#isDataBufferBitContiguous(SampleModel, int[]):::Determines whether the DataBuffer is filled without any interspersed padding bits.:::dataTypeSize->sm->getDataType->getDataTypeSize->if->numBands->sm->getNumBands->for->i->else->if->mppsm->if->mppsm->getPixelBitStride->return->else->if->sppsm->numBands->sm->getNumBands->numBits->for->i->if->return->else->return->return
TIFFDecompressor#reformatData(byte[], int, int, short[], int[], int, int):::Reformats data read as bytes into a short or int buffer.:::if->inOffset->shortsPerRow->numExtraBytes->for->j->else->if->inOffset->intsPerRow->numExtraBytes->for->j->else->throw->new->IIOException
TIFFDecompressor#reformatDiscontiguousData(byte[], int[], int, int, int, WritableRaster):::Reformats bit-discontiguous data into the DataBuffer of the supplied WritableRaster.:::sm->raster->getSampleModel->numBands->sm->getNumBands->is->new->ByteArrayInputStream->iis->new->MemoryCacheImageInputStream->iisPosition->y->raster->getMinY->for->j
TIFFDecompressor#getRawImageTypeSpecifier(int, int, int, int[], int[], int[], char[]):::A utility method that returns an ImageTypeSpecifier suitable for decoding an image with the given parameters.:::if->if->isSigned->dataType->if->else->return->ImageTypeSpecifier->createGrayscale->else->mapSize->redLut->new->byteArr->greenLut->new->byteArr->blueLut->new->byteArr->alphaLut->idx->for->i->dataType->if->else->if->else->return->ImageTypeSpecifier->createIndexed->if->dataType->alphaPremultiplied->if->return->ImageTypeSpecifier->createGrayscale->if->dataType->alphaPremultiplied->if->isSigned->return->ImageTypeSpecifier->createGrayscale->rgb->ColorSpace->getInstance->if->bandOffsets->new->intArr->dataType->theColorSpace->if->ColorSpace->getInstance->else->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->theColorSpace->hasAlpha->alphaPremultiplied->if->SimpleCMYKColorSpace->getInstance->else->if->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->alphaPremultiplied->if->return->ImageTypeSpecifier->createInterleaved->totalBits->for->i->if->redMask->createMask->greenMask->createMask->blueMask->createMask->alphaMask->createMask->transferType->alphaPremultiplied->if->return->ImageTypeSpecifier->createPacked->if->allSameBitDepth->for->i->if->dataType->isDataTypeSet->switch->if->break->if->if->else->break->if->else->break->if->break->if->sm->createInterleavedSM->cm->if->cs->ColorSpace->getInstance->hasAlpha->alphaPremultiplied->if->createComponentCM->else->cs->new->BogusColorSpace->createComponentCM->return->new->ImageTypeSpecifier->if->maxBitsPerSample->for->i->isSigned->if->dataType->getDataTypeFromNumBits->return->ImageTypeSpecifier->createGrayscale->if->alphaPremultiplied->if->dataType->getDataTypeFromNumBits->return->ImageTypeSpecifier->createGrayscale->if->dataType->getDataTypeFromNumBits->dataTypeSize->try->getDataTypeSize->catch->finally->if->redMask->createMask->greenMask->createMask->blueMask->createMask->alphaMask->createMask->transferType->getDataTypeFromNumBits->alphaPremultiplied->if->return->ImageTypeSpecifier->createPacked->else->if->bandOffsets->new->intArr->return->ImageTypeSpecifier->createInterleaved->else->if->bandOffsets->new->intArr->alphaPremultiplied->if->return->ImageTypeSpecifier->createInterleaved->dataType->getDataTypeFromNumBits->sm->createInterleavedSM->cs->if->ColorSpace->getInstance->else->if->else->new->BogusColorSpace->cm->createComponentCM->return->new->ImageTypeSpecifier->return
TIFFDecompressor#setReader(ImageReader):::Sets the value of the reader field:::
TIFFDecompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::
TIFFDecompressor#setPhotometricInterpretation(int):::Sets the value of the photometricInterpretation field:::
TIFFDecompressor#setCompression(int):::Sets the value of the compression field:::
TIFFDecompressor#setPlanar(boolean):::Sets the value of the planar field:::
TIFFDecompressor#setPlanarBand(int):::Sets the index of the planar configuration band to be decoded:::
TIFFDecompressor#setSamplesPerPixel(int):::Sets the value of the samplesPerPixel field:::
TIFFDecompressor#setBitsPerSample(int[]):::Sets the value of the bitsPerSample field:::bitsPerSample->clone
TIFFDecompressor#setSampleFormat(int[]):::Sets the value of the sampleFormat field:::new->intArr->sampleFormat->clone
TIFFDecompressor#setExtraSamples(int[]):::Sets the value of the extraSamples field:::extraSamples->clone
TIFFDecompressor#setColorMap(char[]):::Sets the value of the colorMap field:::colorMap->clone
TIFFDecompressor#setStream(ImageInputStream):::Sets the value of the stream field:::
TIFFDecompressor#setOffset(long):::Sets the value of the offset field:::
TIFFDecompressor#setByteCount(int):::Sets the value of the byteCount field:::
TIFFDecompressor#setSrcMinX(int):::Sets the value of the srcMinX field:::
TIFFDecompressor#setSrcMinY(int):::Sets the value of the srcMinY field:::
TIFFDecompressor#setSrcWidth(int):::Sets the value of the srcWidth field:::
TIFFDecompressor#setSrcHeight(int):::Sets the value of the srcHeight field:::
TIFFDecompressor#setSourceXOffset(int):::Sets the value of the sourceXOffset field:::
TIFFDecompressor#setDstXOffset(int):::Sets the value of the dstXOffset field:::
TIFFDecompressor#setSourceYOffset(int):::Sets the value of the sourceYOffset:::
TIFFDecompressor#setDstYOffset(int):::Sets the value of the dstYOffset field:::
TIFFDecompressor#setSubsampleX(int):::Sets the value of the subsampleX field:::if->throw->new->IllegalArgumentException
TIFFDecompressor#setSubsampleY(int):::Sets the value of the subsampleY field:::if->throw->new->IllegalArgumentException
TIFFDecompressor#setSourceBands(int[]):::Sets the value of the sourceBands field:::sourceBands->clone
TIFFDecompressor#setDestinationBands(int[]):::Sets the value of the destinationBands field:::destinationBands->clone
TIFFDecompressor#setImage(BufferedImage):::Sets the value of the image field:::
TIFFDecompressor#setDstMinX(int):::Sets the value of the dstMinX field:::
TIFFDecompressor#setDstMinY(int):::Sets the value of the dstMinY field:::
TIFFDecompressor#setDstWidth(int):::Sets the value of the dstWidth field:::
TIFFDecompressor#setDstHeight(int):::Sets the value of the dstHeight field:::
TIFFDecompressor#setActiveSrcMinX(int):::Sets the value of the activeSrcMinX field:::
TIFFDecompressor#setActiveSrcMinY(int):::Sets the value of the activeSrcMinY field:::
TIFFDecompressor#setActiveSrcWidth(int):::Sets the value of the activeSrcWidth field:::
TIFFDecompressor#setActiveSrcHeight(int):::Sets the value of the activeSrcHeight field:::
TIFFDecompressor#setColorConverter(TIFFColorConverter):::Sets the TIFFColorConverter object describing the color space of the encoded data in the input stream:::
TIFFDecompressor#getRawImageType():::Returns an ImageTypeSpecifier describing an image whose underlying data array has the same format as the raw source pixel data.:::its->getRawImageTypeSpecifier->return
TIFFDecompressor#createRawImage():::Creates a BufferedImage whose underlying data array will be suitable for holding the raw decoded output of the decodeRaw method:::if->bps->dataType->if->if->else->else->if->else->if->if->else->else->csGray->ColorSpace->getInstance->its->ImageTypeSpecifier->new->intArr->createInterleaved->return->its->createBufferedImage->else->its->getRawImageType->if->return->bi->its->createBufferedImage->return
TIFFDecompressor#decodeRaw(byte[], int, int, int):::Decodes the source data into the provided byte array b, starting at the offset given by dstOffset:::
TIFFDecompressor#decodeRaw(short[], int, int, int):::Decodes the source data into the provided short array s, starting at the offset given by dstOffset:::bytesPerRow->shortsPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(int[], int, int, int):::Decodes the source data into the provided int array i, starting at the offset given by dstOffset:::numBands->intsPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(float[], int, int, int):::Decodes the source data into the provided float array f, starting at the offset given by dstOffset:::numBands->floatsPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(double[], int, int, int):::Decodes the source data into the provided double array f, starting at the offset given by dstOffset:::numBands->doublesPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#beginDecoding():::This routine is called prior to a sequence of calls to the decode method, in order to allow any necessary tables or other structures to be initialized based on metadata values:::numBands->destBitsPerSample->if->totalNumBands->new->intArr->dbps->image->getSampleModel->getSampleSize->for->b->else->image->getSampleModel->getSampleSize->for->b->if->if->areIntArraysEqual->areIntArraysEqual->areIntArraysEqual->areIntArraysEqual->destBitsPerSample->clone->sourceBands->clone->bitsPerSample->clone->destinationBands->clone->new->intArrs->for->b->else->sourceBandsNormal->destinationBandsNormal->if->for->i->ImageUtil->getRaster->getSampleModel->isBinary->ImageUtil->imageIsContiguous->image->getWidth->image->getHeight
TIFFDecompressor#decode():::Decodes the input bit stream (located in the ImageInputStream stream, at offset offset, and continuing for byteCount bytes) into the output BufferedImage image:::byteData->shortData->intData->floatData->doubleData->dstOffset->pixelBitStride->scanlineStride->if->if->else->if->image->getSubimage->isDirectCopy->if->createRawImage->if->throw->new->IIOException->ras->rawImage->getRaster->if->rect->new->Rectangle->ras->getBounds->ImageUtil->getPackedBinaryData->else->sm->ras->getSampleModel->db->ras->getDataBuffer->isSupportedType->if->csm->csm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->csm->getScanlineStride->if->dbb->dbb->getData->csm->getPixelStride->else->if->dbus->dbus->getData->csm->getPixelStride->else->if->dbs->dbs->getData->csm->getPixelStride->else->if->dbi->dbi->getData->csm->getPixelStride->else->if->dbf->dbf->getData->csm->getPixelStride->else->if->dbd->dbd->getData->csm->getPixelStride->else->if->mppsm->mppsm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->mppsm->getPixelBitStride->mppsm->getScanlineStride->if->dbb->dbb->getData->else->if->dbus->dbus->getData->else->if->dbi->dbi->getData->else->if->sppsm->sppsm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->sppsm->getScanlineStride->if->dbb->dbb->getData->else->if->dbus->dbus->getData->else->if->dbi->dbi->getData->if->throw->new->IIOException->if->decodeRaw->else->sm->ras->getSampleModel->if->isDataBufferBitContiguous->if->decodeRaw->else->if->decodeRaw->else->if->decodeRaw->else->if->if->areSampleSizesEqual->sm->getSampleSize->decodeRaw->else->bpp->getBitsPerPixel->bytesPerRow->buf->new->byteArr->decodeRaw->reformatData->else->if->if->areSampleSizesEqual->sm->getSampleSize->decodeRaw->else->bpp->getBitsPerPixel->bytesPerRow->buf->new->byteArr->decodeRaw->reformatData->else->bpp->if->else->foreach->bytesPerRow->buf->new->byteArr->decodeRaw->reformatDiscontiguousData->if->rgb->new->floatArr->if->for->j->else->if->if->for->j->else->for->j->else->if->for->j->else->if->for->j->else->if->for->j->if->if->bytesPerRow->for->y->else->if->shortsPerRow->if->for->y->else->for->y->else->if->intsPerRow->for->y->else->if->floatsPerRow->for->y->else->if->doublesPerRow->for->y->if->rect->new->Rectangle->ras->getBounds->ImageUtil->setPackedBinaryData->if->return->src->rawImage->getRaster->srcChild->src->createChild->dst->image->getRaster->dstChild->dst->createWritableChild->if->srcChild->createChild->dstChild->setRect->else->if->sy->dy->while->srcRow->srcChild->createChild->dstChild->setRect->else->p->srcChild->getPixel->numBands->sy->dy->while->sx->dx->while->srcChild->getPixel->if->for->band->dstChild->setPixel
TIFFDeflateDecompressor#decodeRaw(byte[], int, int, int)::: deflate decompressor decode raw:::if->len->for->i->stream->seek->srcData->new->byteArr->stream->readFully->bytesPerRow->buf->bufOffset->if->else->new->byteArr->inflater->setInput->try->inflater->inflate->catch->throw->new->IIOException->finally->inflater->reset->if->step->samplesPerRow->off->for->j->if->off->for->y
TIFFDeflater#encode(byte[], int, int, int, int[], int)::: deflater encode:::inputSize->blocks->compData->new->byteArr->numCompressedBytes->if->samplesPerPixel->bitsPerPixel->for->i->bytesPerRow->rowBuf->new->byteArr->maxRow->for->i->else->deflater->setInput->deflater->finish->deflater->deflate->deflater->reset->stream->write->return
TIFFExifJPEGCompressor#setMetadata(IIOMetadata)::: exif compressor set metadata:::super->setMetadata->initJPEGWriter
TIFFFaxCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->f->tim->getTIFFField->f->getAsInt
TIFFFaxCompressor#nextState(byte[], int, int, int):::Return min of maxOffset or offset of first pixel different from pixel at bitOffset.:::if->return->next->if->return->end->if->extra->testbyte->if->while->if->break->else->if->return->while->if->return->return
TIFFFaxCompressor#initBitBuf():::Initialize bit buffer machinery.:::
TIFFFaxCompressor#add1DBits(byte[], int, int, int):::Get code for run and add to compressed bitstream.:::sixtyfours->mask->len->if->for->while->while->return
TIFFFaxCompressor#add2DBits(byte[], int, int[][], int):::Place entry from mode table into compressed bitstream.:::mask->len->color->while->return
TIFFFaxCompressor#addEOL(boolean, boolean, boolean, byte[], int):::Add an End-of-Line (EOL == 0x001) to the compressed bitstream with optional byte alignment.:::len->if->if->else->while->return
TIFFFaxCompressor#addEOFB(byte[], int):::Add an End-of-Facsimile-Block (EOFB == 0x001001) to the compressed bitstream.:::len->while->return
TIFFFaxCompressor#encode1D(byte[], int, int, int, byte[], int):::One-dimensionally encode a row of data using CCITT Huffman compression:::lineAddr->bitIndex->last->outIndex->testbit->currentColor->if->add1DBits->else->while->bitCount->nextState->add1DBits->return
TIFFFaxDecompressor#beginDecoding():::Invokes the superclass method and then sets instance variables on the basis of the metadata set on this decompressor.:::super->beginDecoding->if->tmetadata->f->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->else
TIFFFaxDecompressor#decodeRaw(byte[], int, int, int)::: fax decompressor decode raw:::new->byteArr->new->intArr->new->intArr->stream->seek->stream->readFully->if->decodeRLE->else->if->decodeT4->else->if->decodeT6->else->throw->new->IIOException
TIFFFaxDecompressor#decodeRLE()::: fax decompressor decode e:::for->i
TIFFFaxDecompressor#decodeNextScanline(int)::: fax decompressor decode next scanline:::bits->code->isT->current->entry->twoBits->isWhite->dstEnd->bitOffset->while->runOffset->while->nextNBits->if->nextLesserThan8Bits->updatePointer->else->if->warning->else->if->warning->return->else->updatePointer->if->if->runLength->if->nextNBits->warning->updatePointer->break->while->nextLesserThan8Bits->if->nextNBits->if->updatePointer->nextLesserThan8Bits->setToBlack->updatePointer->else->if->warning->return->else->setToBlack->updatePointer->if->else->if->nextLesserThan8Bits->setToBlack->updatePointer->else->setToBlack->updatePointer->if->runLength->if->nextNBits->warning->updatePointer->break
TIFFFaxDecompressor#decodeT4()::: fax decompressor decode t4:::height->a0->a1->b1->b2->b->new->intArr->entry->code->bits->color->isWhite->currIndex->temp->if->throw->new->IIOException->next12->nextNBits->if->warning->updatePointer->modeFlag->lines->while->try->findNextLine->catch->throw->new->IIOException->finally->bitOffset->decodeNextScanline->while->try->findNextLine->catch->warning->break->finally->if->while->getNextChangingElement->nextLesserThan8Bits->if->if->setToBlack->updatePointer->else->if->updatePointer->number->if->decodeWhiteCodeWord->decodeBlackCodeWord->setToBlack->else->decodeBlackCodeWord->setToBlack->decodeWhiteCodeWord->else->if->if->setToBlack->updatePointer->else->warning->numLinesTested->while->try->findNextLine->catch->warning->return->finally->updatePointer->break->else->decodeNextScanline
TIFFFaxDecompressor#decodeT6()::: fax decompressor decode t6:::height->bufferOffset->a0->a1->b1->b2->entry->code->bits->color->isWhite->currIndex->temp->b->new->intArr->cce->bitOffset->for->lines
TIFFFaxDecompressor#setToBlack(int, int)::: fax decompressor set to black:::lastBit->byteNum->shift->if->maskVal->val->while->while->while
TIFFFaxDecompressor#decodeWhiteCodeWord()::: fax decompressor decode white code word:::current->entry->bits->isT->twoBits->code->runLength->isWhite->while->nextNBits->if->nextLesserThan8Bits->updatePointer->else->if->throw->new->IIOException->else->if->throw->new->IIOException->else->updatePointer->if->return
TIFFFaxDecompressor#decodeBlackCodeWord()::: fax decompressor decode black code word:::current->entry->bits->isT->twoBits->code->runLength->isWhite->while->nextLesserThan8Bits->if->nextNBits->if->updatePointer->nextLesserThan8Bits->updatePointer->else->if->throw->new->IIOException->else->updatePointer->if->else->if->nextLesserThan8Bits->updatePointer->else->updatePointer->return
TIFFFaxDecompressor#findNextLine()::: fax decompressor find next line:::bitIndexMax->bitIndexMax12->bitIndex->while->next12Bits->nextNBits->while->nextLesserThan8Bits->if->if->if->return->nextLesserThan8Bits->else->return->throw->new->EOFException
TIFFFaxDecompressor#getNextChangingElement(int, boolean, int[])::: fax decompressor get next changing element:::pce->ces->start->if->else->i->for->if
TIFFFaxDecompressor#nextNBits(int)::: fax decompressor next bits:::b->next->next2next->l->bp->if->if->else->if->else->else->if->if->else->if->else->else->throw->new->IIOException->bitsLeft->bitsFromNextByte->bitsFromNext2NextByte->if->i1->i2->i3->if->else->if->else->i->return
TIFFFaxDecompressor#nextLesserThan8Bits(int)::: fax decompressor next lesser than8 bits:::b->next->l->bp->if->if->else->else->if->if->else->else->throw->new->IIOException->bitsLeft->bitsFromNextByte->shift->i1->i2->if->if->else->return
TIFFFaxDecompressor#updatePointer(int)::: fax decompressor update pointer:::if->i->if->else
TIFFFaxDecompressor#warning(String)::: fax decompressor warning:::if->forwardWarningMessage
TIFFFieldNode#isIFD(TIFFField)::: field node is d:::type->f->getType->return->f->hasDirectory
TIFFFieldNode#getNodeName(TIFFField)::: field node get node name:::return->isIFD
TIFFFieldNode#initialize()::: field node initialize:::if->return->if->dir->field->hasDirectory->field->getDirectory->field->getData->fields->dir->getTIFFFields->if->tagSets->dir->getTagSets->tagSetList->Arrays->asList->numFields->for->i->else->child->count->field->getCount->if->field->getType->new->IIOMetadataNode->data->field->getAsBytes->sb->new->StringBuffer->for->i->child->sb->toString->setAttribute->else->TIFFField->field->getType->getTypeName->new->IIOMetadataNode->tag->field->getTag->for->i->appendChild
TIFFFieldNode#appendChild(Node)::: field node append child:::if->throw->new->NullPointerException->return->super->insertBefore
TIFFFieldNode#hasChildNodes()::: field node has child nodes:::initialize->return->super->hasChildNodes
TIFFFieldNode#getLength()::: field node get length:::initialize->return->super->getLength
TIFFFieldNode#getFirstChild()::: field node get first child:::initialize->return->super->getFirstChild
TIFFFieldNode#getLastChild()::: field node get last child:::initialize->return->super->getLastChild
TIFFFieldNode#getPreviousSibling()::: field node get previous sibling:::initialize->return->super->getPreviousSibling
TIFFFieldNode#getNextSibling()::: field node get next sibling:::initialize->return->super->getNextSibling
TIFFFieldNode#insertBefore(Node, Node)::: field node insert before:::initialize->return->super->insertBefore
TIFFFieldNode#replaceChild(Node, Node)::: field node replace child:::initialize->return->super->replaceChild
TIFFFieldNode#removeChild(Node)::: field node remove child:::initialize->return->super->removeChild
TIFFFieldNode#cloneNode(boolean)::: field node clone node:::initialize->return->super->cloneNode
TIFFIFD#initializeEssentialTags()::: d initialize essential tags:::tags->if->Set->of
TIFFIFD#getDirectoryAsIFD(TIFFDirectory):::Converts a TIFFDirectory to a TIFFIFD.:::if->return->ifd->Arrays->dir->getTagSets->asList->dir->getParentTag->new->TIFFIFD->fields->dir->getTIFFFields->numFields->for->i->return
TIFFIFD#getTag(int, List)::: d get tag:::iter->tagSets->iterator->while->iter->hasNext->tagSet->iter->next->tag->tagSet->getTag->if->return->return
TIFFIFD#getTag(String, List)::: d get tag:::iter->tagSets->iterator->while->iter->hasNext->tagSet->iter->next->tag->tagSet->getTag->if->return->return
TIFFIFD#writeTIFFFieldToStream(TIFFField, ImageOutputStream)::: d write field to stream:::count->field->getCount->data->field->getData->switch->field->getType->for->i->break->stream->write->break->stream->writeChars->break->stream->writeShorts->break->stream->writeInts->break->for->i->break->stream->writeInt->break->stream->writeFloats->break->stream->writeDoubles->break->for->i->break->for->i->break
TIFFIFD#getTagSetList()::: d get tag set list:::return->Arrays->getTagSets->asList
TIFFIFD#iterator()::: d iterator:::return->Arrays->getTIFFFields->asList->iterator
TIFFIFD#readFieldValue(ImageInputStream, int, int, Object[]):::Read the value of a field:::obj->switch->bvalues->new->byteArr->stream->readFully->if->v->new->ArrayList<>->inString->prevIndex->for->index->v->size->strings->if->new->StringArr->for->c->else->new->StringArr->else->break->cvalues->new->charArr->for->j->break->lvalues->new->longArr->for->j->break->llvalues->new->longArrs->for->j->break->svalues->new->shortArr->for->j->break->ivalues->new->intArr->for->j->break->iivalues->new->intArrs->for->j->break->fvalues->new->floatArr->for->j->break->dvalues->new->doubleArr->for->j->break->break->return
TIFFIFD#getFieldAsLong(int)::: d get field as long:::f->getTIFFField->return->f->getAsLong
TIFFIFD#getFieldAsInt(int)::: d get field as int:::f->getTIFFField->return->f->getAsInt
TIFFIFD#calculateByteCounts(int, List)::: d calculate byte counts:::if->byteCounts->isEmpty->throw->new->IllegalArgumentException->if->getFieldAsInt->return->if->getFieldAsInt->return->w->getFieldAsLong->if->return->h->getFieldAsLong->if->return->tw->getFieldAsLong->if->th->getFieldAsLong->if->getFieldAsLong->if->bitsPerSample->f->getTIFFField->if->f->getAsInts->else->samplesPerPixel->getFieldAsInt->if->new->intArr->Arrays->fill->bitsPerPixel->foreach->bytesPerRow->bytesPerPacket->nx->ny->if->return->isTiled->getTIFFField->tagNumber->if->else->t->BaselineTIFFTagSet->getInstance->getTag->getTIFFField->if->removeTIFFField->numPackets->packetByteCounts->new->longArr->Arrays->fill->if->numRowsInLastStrip->new->TIFFField->addTIFFField->byteCounts->add->return
TIFFIFD#checkFieldOffsets(long)::: d check field offsets:::if->return->offsets->new->ArrayList<>->f->getTIFFField->count->if->f->getCount->offsets->add->getTIFFField->if->sz->offsets->size->newCount->f->getCount->if->throw->new->IIOException->if->offsets->add->byteCounts->new->ArrayList<>->if->offsets->size->getTIFFField->if->if->f->getCount->throw->new->IIOException->byteCounts->add->getTIFFField->if->if->f->getCount->throw->new->IIOException->byteCounts->add->if->byteCounts->size->foreach->foreach->for->i->jpegOffset->getTIFFField->if->jpegLength->getTIFFField->if->if->jpegOffset->getAsLong->jpegLength->getAsLong->throw->new->IIOException->if->offsets->size->byteCounts->size->throwException->if->offsets->size->byteCounts->size->expectedSize->offsets->get->getCount->calculateByteCounts->if->throw->new->IIOException->getTIFFField->if->tableOffsets->f->getAsLongs->foreach->if->throw->new->IIOException->getTIFFField->if->tableOffsets->f->getAsLongs->foreach->if->throw->new->IIOException->getTIFFField->if->tableOffsets->f->getAsLongs->foreach->if->throw->new->IIOException
TIFFIFD#initialize(ImageInputStream, boolean, boolean, boolean)::: d initialize:::removeTIFFFields->streamLength->stream->length->haveStreamLength->tagSetList->getTagSetList->ensureEssentialTags->baselineTagSet->if->tagSetList->BaselineTIFFTagSet->getInstance->contains->initializeEssentialTags->BaselineTIFFTagSet->getInstance->entries->new->ArrayList<>->entryData->new->ObjectArr->numEntries->stream->readUnsignedShort->for->i->nextIFDOffset->stream->getStreamPosition->fieldData->new->ObjectArr->foreach->if->addTIFFField->else->e->tag->tagNumber->tag->getNumber->type->count->stream->seek->if->tag->isIFDPointer->tagSets->new->ArrayList<TIFFTagSet>->tagSets->tag->getTagSet->add->subIFD->new->TIFFIFD->subIFD->initialize->f->new->TIFFField->addTIFFField->else->if->stream->getStreamPosition->else->if->stream->getStreamPosition->obj->try->readFieldValue->catch->if->BaselineTIFFTagSet->getInstance->getTag->throw->finally->if->continue->f->new->TIFFField->addTIFFField->if->checkFieldOffsets->stream->seek->stream->getStreamPosition
TIFFIFD#writeToStream(ImageOutputStream)::: d write to stream:::numFields->getNumTIFFFields->stream->writeShort->nextSpace->stream->getStreamPosition->iter->iterator->while->iter->hasNext->f->iter->next->tag->f->getTag->type->f->getType->count->f->getCount->if->size->TIFFTag->getSizeOfType->if->chars->for->i->tagNumber->f->getTagNumber->stream->writeShort->stream->writeShort->stream->writeInt->stream->writeInt->stream->mark->stream->skipBytes->pos->if->tag->isIFDPointer->stream->writeInt->stream->seek->if->tag->isIFDPointer->f->hasDirectory->subIFD->f->getDirectory->getDirectoryAsIFD->subIFD->writeToStream->else->writeTIFFFieldToStream->stream->getStreamPosition->else->stream->getStreamPosition->writeTIFFFieldToStream->if->else->if->stream->reset
TIFFIFD#getStripOrTileByteCountsPosition()::: d get strip or tile byte counts position:::return
TIFFIFD#getStripOrTileOffsetsPosition()::: d get strip or tile offsets position:::return
TIFFIFD#getLastPosition()::: d get last position:::return
TIFFIFD#setPositions(long, long, long)::: d set positions:::
TIFFIFD#getShallowClone():::Returns a TIFFIFD wherein all fields from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.:::baselineTagSet->BaselineTIFFTagSet->getInstance->tagSetList->getTagSetList->if->tagSetList->contains->return->shallowClone->getParentTag->new->TIFFIFD->baselineTagNumbers->baselineTagSet->getTagNumbers->fields->iterator->while->fields->hasNext->field->fields->next->tagNumber->Integer->field->getTagNumber->valueOf->fieldClone->if->baselineTagNumbers->contains->fieldData->field->getData->fieldType->field->getType->try->switch->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->catch->finally->field->getTag->field->getCount->new->TIFFField->else->shallowClone->addTIFFField->shallowClone->setPositions->return
TIFFImageMetadata#initializeFromStream(ImageInputStream, boolean, boolean)::: image metadata initialize from stream:::rootIFD->initialize
TIFFImageMetadata#addShortOrLongField(int, long)::: image metadata add short or long field:::field->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField
TIFFImageMetadata#isReadOnly()::: image metadata is read only:::return
TIFFImageMetadata#getIFDAsTree(TIFFIFD, String, int)::: image metadata get as tree:::IFDRoot->new->IIOMetadataNode->if->IFDRoot->Integer->toString->setAttribute->if->IFDRoot->setAttribute->tagSets->ifd->getTagSetList->if->tagSets->size->iter->tagSets->iterator->tagSetNames->new->StringBuilder->while->iter->hasNext->tagSet->iter->next->tagSetNames->tagSet->getClass->getName->append->if->iter->hasNext->tagSetNames->append->IFDRoot->tagSetNames->toString->setAttribute->iter->ifd->iterator->while->iter->hasNext->f->iter->next->tagNumber->f->getTagNumber->tag->TIFFIFD->getTag->node->if->f->getAsNativeNode->else->if->tag->isIFDPointer->f->hasDirectory->subIFD->TIFFIFD->f->getDirectory->getDirectoryAsIFD->tag->getName->tag->getNumber->getIFDAsTree->else->f->getAsNativeNode->if->IFDRoot->appendChild->return
TIFFImageMetadata#getAsTree(String)::: image metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->new->IllegalArgumentException
TIFFImageMetadata#getNativeTree()::: image metadata get native tree:::root->new->IIOMetadataNode->IFDNode->getIFDAsTree->root->appendChild->return
TIFFImageMetadata#getStandardChromaNode()::: image metadata get standard chroma node:::chroma_node->new->IIOMetadataNode->node->f->photometricInterpretation->isPaletteColor->getTIFFField->if->f->getAsInt->numChannels->if->else->getTIFFField->if->f->getAsInt->else->getTIFFField->if->f->getCount->if->if->new->IIOMetadataNode->csName->if->else->node->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->chroma_node->appendChild->getTIFFField->if->hasAlpha->new->IIOMetadataNode->len->f->getCount->for->i->chroma_node->appendChild->return
TIFFImageMetadata#getStandardCompressionNode()::: image metadata get standard compression node:::compression_node->new->IIOMetadataNode->node->f->getTIFFField->if->compressionTypeName->compression->f->getAsInt->isLossless->if->else->compressionNumbers->for->i->if->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->return
TIFFImageMetadata#repeat(String, int)::: image metadata repeat:::if->return->sb->s->length->new->StringBuffer->sb->append->for->i->return->sb->toString
TIFFImageMetadata#getStandardDataNode()::: image metadata get standard data node:::data_node->new->IIOMetadataNode->node->f->isPaletteColor->getTIFFField->if->f->getAsInt->getTIFFField->planarConfiguration->if->f->getAsInt->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->getTIFFField->if->photometricInterpretation->f->getAsInt->sampleFormat->if->else->getTIFFField->if->format->f->getAsInt->if->else->if->else->if->else->if->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->getTIFFField->bitsPerSample->if->f->getAsInts->else->getTIFFField->compression->f->getAsInt->if->getTIFFField->getTIFFField->getTIFFField->if->f->getAsInt->f->getAsInt->new->intArr->else->new->intArr->else->new->intArr->sb->new->StringBuffer->for->i->new->IIOMetadataNode->if->node->sb->toString->repeat->setAttribute->else->node->sb->toString->setAttribute->data_node->appendChild->getTIFFField->fillOrder->f->getAsInt->new->StringBuffer->for->i->new->IIOMetadataNode->if->node->sb->toString->repeat->setAttribute->else->node->sb->toString->setAttribute->data_node->appendChild->return
TIFFImageMetadata#getStandardDimensionNode()::: image metadata get standard dimension node:::dimension_node->new->IIOMetadataNode->node->f->xres->yres->getTIFFField->if->f->getAsRational->clone->getTIFFField->if->f->getAsRational->clone->if->new->IIOMetadataNode->ratio->node->Float->toString->setAttribute->dimension_node->appendChild->if->getTIFFField->resolutionUnit->f->getAsInt->gotPixelSize->if->if->if->if->if->horizontalPixelSize->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->if->verticalPixelSize->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->getTIFFField->resolutionUnit->f->getAsInt->if->getTIFFField->if->xpos->f->getAsRational->xPosition->if->else->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->getTIFFField->if->ypos->f->getAsRational->yPosition->if->else->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->getTIFFField->if->o->f->getAsInt->if->new->IIOMetadataNode->node->setAttribute->dimension_node->appendChild->return
TIFFImageMetadata#getStandardDocumentNode()::: image metadata get standard document node:::document_node->new->IIOMetadataNode->node->f->new->IIOMetadataNode->node->setAttribute->document_node->appendChild->getTIFFField->if->newSubFileType->f->getAsInt->value->if->else->if->else->if->if->new->IIOMetadataNode->node->setAttribute->document_node->appendChild->getTIFFField->if->s->f->getAsString->if->s->length->new->IIOMetadataNode->appendNode->try->node->s->substring->setAttribute->node->s->substring->setAttribute->node->s->substring->setAttribute->node->s->substring->setAttribute->node->s->substring->setAttribute->node->s->substring->setAttribute->catch->finally->if->document_node->appendChild->return
TIFFImageMetadata#getStandardTextNode()::: image metadata get standard text node:::text_node->node->f->textFieldTagNumbers->new->intArr->for->i->return
TIFFImageMetadata#getStandardTransparencyNode()::: image metadata get standard transparency node:::transparency_node->new->IIOMetadataNode->node->f->new->IIOMetadataNode->value->getTIFFField->if->extraSamples->f->getAsInts->for->i->node->setAttribute->transparency_node->appendChild->return
TIFFImageMetadata#fatal(Node, String)::: image metadata fatal:::throw->new->IIOInvalidTreeException
TIFFImageMetadata#listToIntArray(String)::: image metadata list to int array:::st->new->StringTokenizer->intList->new->ArrayList<Integer>->while->st->hasMoreTokens->nextInteger->st->nextToken->nextInt->Integer->valueOf->intList->add->intArray->intList->size->new->intArr->for->i->return
TIFFImageMetadata#listToCharArray(String)::: image metadata list to char array:::st->new->StringTokenizer->intList->new->ArrayList<Integer>->while->st->hasMoreTokens->nextInteger->st->nextToken->nextInt->Integer->valueOf->intList->add->charArray->intList->size->new->charArr->for->i->return
TIFFImageMetadata#mergeStandardTree(Node)::: image metadata merge standard tree:::f->tag->node->if->node->getNodeName->equals->fatal->sampleFormat->dataNode->getChildNode->isPaletteColor->if->sampleFormatNode->getChildNode->if->getAttribute->sampleFormat->equals->if->chromaNode->getChildNode->if->getChildNode->node->getFirstChild->while->name->node->getNodeName->if->name->equals->colorSpaceType->blackIsZero->gotPalette->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->getAttribute->else->if->childName->equals->rootIFD->getTag->samplesPerPixel->Integer->getAttribute->parseInt->new->TIFFField->rootIFD->addTIFFField->else->if->childName->equals->getAttribute->else->if->childName->equals->entry->child->getFirstChild->palette->new->HashMap<>->maxIndex->while->entryName->entry->getNodeName->if->entryName->equals->idx->getAttribute->id->Integer->parseInt->if->red->Integer->getAttribute->parseInt->green->Integer->getAttribute->parseInt->blue->Integer->getAttribute->parseInt->palette->Integer->valueOf->new->charArr->put->entry->getNextSibling->if->mapSize->paletteLength->paletteEntries->new->charArr->paletteIter->palette->entrySet->iterator->while->paletteIter->hasNext->paletteEntry->paletteIter->next->index->paletteEntry->getKey->rgb->paletteEntry->getValue->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->child->getNextSibling->photometricInterpretation->if->colorSpaceType->equals->blackIsZero->equalsIgnoreCase->else->if->if->colorSpaceType->equals->isTransparency->if->iioRoot->siNodeList->iioRoot->getElementsByTagName->if->siNodeList->getLength->siNode->siNodeList->item->value->getAttribute->if->value->equals->if->else->else->if->colorSpaceType->equals->else->if->colorSpaceType->equals->else->if->colorSpaceType->equals->else->if->colorSpaceType->equals->if->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->compression->compressionTypeName->getAttribute->if->compressionTypeName->equalsIgnoreCase->else->compressionNames->for->i->if->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->child->getNextSibling->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->pc->getAttribute->planarConfiguration->if->pc->equals->else->if->pc->equals->if->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->childName->equals->bps->getAttribute->bitsPerSample->listToCharArray->rootIFD->getTag->if->new->charArr->new->TIFFField->else->new->TIFFField->rootIFD->addTIFFField->else->if->childName->equals->sMSB->getAttribute->sampleMSB->listToIntArray->isRightToLeft->for->i->fillOrder->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->child->getNextSibling->else->if->name->equals->pixelAspectRatio->gotPixelAspectRatio->horizontalPixelSize->gotHorizontalPixelSize->verticalPixelSize->gotVerticalPixelSize->sizeIsAbsolute->horizontalPosition->gotHorizontalPosition->verticalPosition->gotVerticalPosition->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->par->getAttribute->Float->parseFloat->else->if->childName->equals->orientation->getAttribute->for->i->else->if->childName->equals->hps->getAttribute->Float->parseFloat->else->if->childName->equals->vps->getAttribute->Float->parseFloat->else->if->childName->equals->hp->getAttribute->Float->parseFloat->else->if->childName->equals->vp->getAttribute->Float->parseFloat->child->getNextSibling->if->if->else->if->else->if->if->xResolution->hData->new->longArrs->new->longArr->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->if->yResolution->vData->new->longArrs->new->longArr->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->res->new->charArr->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->if->if->hData->new->longArrs->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->if->vData->new->longArrs->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->si->getAttribute->newSubFileType->if->si->equals->else->if->si->equals->else->if->si->equals->if->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->if->childName->equals->year->getAttribute->month->getAttribute->day->getAttribute->hour->getAttribute->minute->getAttribute->second->getAttribute->sb->new->StringBuffer->sb->append->sb->append->if->month->length->sb->append->sb->append->sb->append->if->day->length->sb->append->sb->append->sb->append->if->hour->length->sb->append->sb->append->sb->append->if->minute->length->sb->append->sb->append->sb->append->if->second->length->sb->append->sb->append->dt->new->StringArr->sb->toString->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->child->getNextSibling->else->if->name->equals->child->node->getFirstChild->theAuthor->theDescription->theTitle->while->childName->child->getNodeName->if->childName->equals->tagNumber->childAttrs->child->getAttributes->keywordNode->childAttrs->getNamedItem->if->keyword->keywordNode->getNodeValue->value->getAttribute->if->keyword->equals->value->equals->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->else->if->keyword->equalsIgnoreCase->if->rootIFD->getTag->new->StringArr->new->TIFFField->rootIFD->addTIFFField->child->getNextSibling->if->getTIFFField->rootIFD->getTag->new->StringArr->new->TIFFField->rootIFD->addTIFFField->if->getTIFFField->rootIFD->getTag->new->StringArr->new->TIFFField->rootIFD->addTIFFField->if->getTIFFField->rootIFD->getTag->new->StringArr->new->TIFFField->rootIFD->addTIFFField->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->alpha->getAttribute->if->alpha->equals->rootIFD->getTag->new->TIFFField->else->if->alpha->equals->rootIFD->getTag->new->TIFFField->if->rootIFD->addTIFFField->child->getNextSibling->node->getNextSibling->if->sf->if->sampleFormat->equals->else->if->sampleFormat->equals->else->if->sampleFormat->equals->else->if->sampleFormat->equals->if->count->getTIFFField->if->f->getAsInt->else->getTIFFField->if->f->getCount->sampleFormatArray->new->charArr->Arrays->fill->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField
TIFFImageMetadata#getAttribute(Node, String)::: image metadata get attribute:::attrs->node->getAttributes->attr->attrs->getNamedItem->return->attr->getNodeValue
TIFFImageMetadata#getChildNode(Node, String)::: image metadata get child node:::childNode->if->node->hasChildNodes->childNodes->node->getChildNodes->length->childNodes->getLength->for->i->return
TIFFImageMetadata#parseIFD(Node)::: image metadata parse d:::if->node->getNodeName->equals->fatal->tagSetNames->getAttribute->tagSets->new->ArrayList<TIFFTagSet>->if->st->new->StringTokenizer->while->st->hasMoreTokens->className->st->nextToken->o->setClass->try->cl->getClassLoader->Class->forName->if->isAssignableFrom->fatal->getInstanceMethod->setClass->getMethod->getInstanceMethod->invoke->catch->throw->new->RuntimeException->throw->new->RuntimeException->throw->new->RuntimeException->throw->new->RuntimeException->finally->if->fatal->else->tagSets->add->ifd->new->TIFFIFD->node->getFirstChild->while->name->node->getNodeName->f->if->name->equals->subIFD->parseIFD->parentTagName->getAttribute->parentTagNumber->getAttribute->tag->if->TIFFIFD->getTag->else->if->tagNumber->Integer->parseUnsignedInt->TIFFIFD->getTag->type->if->new->TIFFTag->else->if->tag->isDataTypeOK->else->if->tag->isDataTypeOK->else->for->new->TIFFField->else->if->name->equals->number->Integer->getAttribute->parseInt->tagSet->iter->tagSets->iterator->while->iter->hasNext->t->iter->next->if->t->getTag->break->TIFFField->createFromMetadataNode->else->fatal->ifd->addTIFFField->node->getNextSibling->return
TIFFImageMetadata#mergeNativeTree(Node)::: image metadata merge native tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->if->node->getNodeName->equals->fatal->ifd->parseIFD->rootIFDTagSets->rootIFD->getTagSetList->tagSetIter->ifd->getTagSetList->iterator->while->tagSetIter->hasNext->o->tagSetIter->next->if->rootIFDTagSets->contains->rootIFD->addTagSet->ifdIter->ifd->iterator->while->ifdIter->hasNext->field->ifdIter->next->rootIFD->addTIFFField
TIFFImageMetadata#mergeTree(String, Node)::: image metadata merge tree:::if->formatName->equals->if->throw->new->NullPointerException->mergeNativeTree->else->if->formatName->equals->if->throw->new->NullPointerException->mergeStandardTree->else->throw->new->IllegalArgumentException
TIFFImageMetadata#reset()::: image metadata reset:::new->TIFFIFD
TIFFImageMetadata#getRootIFD()::: image metadata get root d:::return
TIFFImageMetadata#getTIFFField(int)::: image metadata get field:::return->rootIFD->getTIFFField
TIFFImageMetadata#removeTIFFField(int)::: image metadata remove field:::rootIFD->removeTIFFField
TIFFImageMetadata#getShallowClone():::Returns a TIFFImageMetadata wherein all fields in the root IFD from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.:::return->rootIFD->getShallowClone->new->TIFFImageMetadata
TIFFImageMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: image metadata format can node appear:::return
TIFFImageMetadataFormat#getInstance()::: image metadata format get instance:::if->new->TIFFImageMetadataFormat->return
TIFFImageMetadataFormatResources#getContents()::: image metadata format resources get contents:::return->contents->clone
TIFFImageReader#setInput(Object, boolean, boolean)::: image reader set input:::super->setInput->resetLocal->if->if->throw->new->IllegalArgumentException->else
TIFFImageReader#readHeader()::: image reader read header:::if->return->if->throw->new->IllegalStateException->new->TIFFStreamMetadata->try->byteOrder->stream->readUnsignedShort->if->stream->setByteOrder->else->if->stream->setByteOrder->else->processWarningOccurred->stream->setByteOrder->magic->stream->readUnsignedShort->if->processWarningOccurred->offset->stream->readUnsignedInt->stream->seek->imageStartPosition->Long->valueOf->add->catch->throw->new->IIOException->finally
TIFFImageReader#locateImage(int)::: image reader locate image:::readHeader->index->Math->imageStartPosition->size->min->try->l->imageStartPosition->get->stream->l->longValue->seek->while->count->stream->readUnsignedShort->if->break->stream->skipBytes->offset->stream->readUnsignedInt->if->return->stream->seek->imageStartPosition->Long->valueOf->add->catch->forwardWarningMessage->throw->new->IIOException->finally->if->return
TIFFImageReader#getNumImages(boolean)::: image reader get num images:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->return->if->locateImage->return
TIFFImageReader#getStreamMetadata()::: image reader get stream metadata:::readHeader->return
TIFFImageReader#checkIndex(int)::: image reader check index:::if->throw->new->IndexOutOfBoundsException->if
TIFFImageReader#seekToImage(int)::: image reader seek to image:::checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->initializeFromMetadata
TIFFImageReader#readMetadata()::: image reader read metadata:::if->throw->new->IllegalStateException->if->return->try->tagSets->readUnknownTags->if->tp->tp->getAllowedTagSets->tp->getReadUnknownTags->else->new->ArrayList<TIFFTagSet>->tagSets->BaselineTIFFTagSet->getInstance->add->new->TIFFImageMetadata->imageMetadata->initializeFromStream->catch->throw->throw->new->IIOException->finally
TIFFImageReader#getWidth()::: image reader get width:::return
TIFFImageReader#getHeight()::: image reader get height:::return
TIFFImageReader#getTileOrStripWidth()::: image reader get tile or strip width:::f->imageMetadata->getTIFFField->return->getWidth->f->getAsInt
TIFFImageReader#getTileOrStripHeight()::: image reader get tile or strip height:::f->imageMetadata->getTIFFField->if->return->f->getAsInt->imageMetadata->getTIFFField->h->f->getAsInt->return->getHeight
TIFFImageReader#getPlanarConfiguration()::: image reader get planar configuration:::f->imageMetadata->getTIFFField->if->planarConfigurationValue->f->getAsInt->if->if->getCompression->imageMetadata->getTIFFField->processWarningOccurred->else->offsetField->imageMetadata->getTIFFField->if->imageMetadata->getTIFFField->tw->getTileOrStripWidth->th->getTileOrStripHeight->tAcross->getWidth->tDown->getHeight->tilesPerImage->offsetArray->offsetField->getAsLongs->if->processWarningOccurred->else->rowsPerStrip->getTileOrStripHeight->stripsPerImage->getHeight->offsetArray->offsetField->getAsLongs->if->processWarningOccurred->return->return
TIFFImageReader#getTileOrStripOffset(int)::: image reader get tile or strip offset:::f->imageMetadata->getTIFFField->if->imageMetadata->getTIFFField->if->imageMetadata->getTIFFField->if->throw->new->IIOException->return->f->getAsLong
TIFFImageReader#getTileOrStripByteCount(int)::: image reader get tile or strip byte count:::f->imageMetadata->getTIFFField->if->imageMetadata->getTIFFField->if->imageMetadata->getTIFFField->tileOrStripByteCount->if->f->getAsLong->else->processWarningOccurred->bitsPerPixel->for->i->bytesPerRow->getTileOrStripWidth->getTileOrStripHeight->streamLength->stream->length->if->Math->getTileOrStripOffset->min->else->processWarningOccurred->return
TIFFImageReader#getCompression()::: image reader get compression:::f->imageMetadata->getTIFFField->if->return->else->return->f->getAsInt
TIFFImageReader#getWidth(int)::: image reader get width:::seekToImage->return->getWidth
TIFFImageReader#getHeight(int)::: image reader get height:::seekToImage->return->getHeight
TIFFImageReader#initializeFromMetadata():::Initializes these instance variables from the image metadata:  compression width height samplesPerPixel numBands colorMap photometricInterpretation sampleFormat bitsPerSample extraSamples tileOrStripWidth tileOrStripHeight :::f->imageMetadata->getTIFFField->if->processWarningOccurred->else->f->getAsInt->isMissingDimension->imageMetadata->getTIFFField->if->f->getAsInt->else->processWarningOccurred->imageMetadata->getTIFFField->if->f->getAsInt->else->processWarningOccurred->imageMetadata->getTIFFField->if->f->getAsInt->else->defaultBitDepth->if->imageMetadata->getTIFFField->iter->ImageIO->getImageReadersByFormatName->if->iter->hasNext->jreader->iter->next->try->stream->mark->stream->f->getAsLong->seek->jreader->setInput->if->imageMetadata->getTIFFField->jreader->getWidth->if->imageMetadata->getTIFFField->jreader->getHeight->imageType->jreader->getRawImageType->if->imageMetadata->getTIFFField->imageType->getSampleModel->getNumBands->stream->reset->imageType->getColorModel->getComponentSize->catch->finally->jreader->dispose->if->throw->new->IIOException->else->if->throw->new->IIOException->imageMetadata->getTIFFField->if->f->getAsChars->imageMetadata->getTIFFField->if->if->processWarningOccurred->else->if->else->if->else->processWarningOccurred->else->f->getAsInt->replicateFirst->first->imageMetadata->getTIFFField->new->intArr->if->else->if->f->getCount->f->getAsInt->for->i->imageMetadata->getTIFFField->new->intArr->if->else->if->f->getCount->f->getAsInt->for->i->imageMetadata->getTIFFField->if->f->getAsInts
TIFFImageReader#getImageTypes(int)::: image reader get image types:::l->imageIndexInteger->Integer->valueOf->if->imageTypeMap->containsKey->imageTypeMap->get->else->new->ArrayList<ImageTypeSpecifier>->seekToImage->itsRaw->TIFFDecompressor->getRawImageTypeSpecifier->iccProfileField->imageMetadata->getTIFFField->if->itsRaw->getColorModel->cmRaw->itsRaw->getColorModel->csRaw->cmRaw->getColorSpace->smRaw->itsRaw->getSampleModel->iccColorSpace->try->iccProfileValue->iccProfileField->getAsBytes->iccProfile->ICC_Profile->getInstance->new->ICC_ColorSpace->rgb->iccColorSpace->new->floatArr->toRGB->catch->iccProfileException->getMessage->processWarningOccurred->if->switch->iccColorSpace->getType->ColorSpace->getInstance->break->ColorSpace->getInstance->break->break->else->finally->numBands->smRaw->getNumBands->numComponents->iccColorSpace->getNumComponents->if->hasAlpha->isAlphaPre->cmRaw->isAlphaPremultiplied->iccColorModel->cmRaw->getComponentSize->cmRaw->getTransparency->cmRaw->getTransferType->new->ComponentColorModel->l->new->ImageTypeSpecifier->add->if->csRaw->getType->iccColorSpace->getType->csRaw->getNumComponents->iccColorSpace->getNumComponents->l->add->else->l->add->else->l->add->imageTypeMap->put->return->l->iterator
TIFFImageReader#getImageMetadata(int)::: image reader get image metadata:::seekToImage->im->imageMetadata->getRootIFD->getTagSetList->new->TIFFImageMetadata->root->imageMetadata->getAsTree->im->setFromTree->return
TIFFImageReader#getStreamMetadata(int)::: image reader get stream metadata:::readHeader->sm->new->TIFFStreamMetadata->root->sm->getAsTree->sm->setFromTree->return
TIFFImageReader#isRandomAccessEasy(int)::: image reader is random access easy:::if->seekToImage->return->getCompression->else->return
TIFFImageReader#readSupportsThumbnails()::: image reader read supports thumbnails:::return
TIFFImageReader#hasThumbnails(int)::: image reader has thumbnails:::return
TIFFImageReader#getNumThumbnails(int)::: image reader get num thumbnails:::return
TIFFImageReader#getDefaultReadParam()::: image reader get default read param:::return->new->TIFFImageReadParam
TIFFImageReader#isImageTiled(int)::: image reader is image tiled:::seekToImage->f->imageMetadata->getTIFFField->return
TIFFImageReader#getTileWidth(int)::: image reader get tile width:::seekToImage->return->getTileOrStripWidth
TIFFImageReader#getTileHeight(int)::: image reader get tile height:::seekToImage->return->getTileOrStripHeight
TIFFImageReader#readTile(int, int, int)::: image reader read tile:::w->getWidth->h->getHeight->tw->getTileWidth->th->getTileHeight->x->y->if->throw->new->IllegalArgumentException->if->if->param->getDefaultReadParam->tileRect->new->Rectangle->param->setSourceRegion->return->read
TIFFImageReader#canReadRaster()::: image reader can read raster:::return
TIFFImageReader#readRaster(int, ImageReadParam)::: image reader read raster:::throw->new->UnsupportedOperationException
TIFFImageReader#ifloor(int, int)::: image reader ifloor:::if->return
TIFFImageReader#iceil(int, int)::: image reader iceil:::if->return
TIFFImageReader#prepareRead(int, ImageReadParam)::: image reader prepare read:::if->throw->new->IllegalStateException->if->getDefaultReadParam->seekToImage->getTileOrStripWidth->getTileOrStripHeight->getPlanarConfiguration->param->getSourceBands->if->new->intArr->for->i->imageTypes->getImageTypes->theImageType->ImageUtil->getDestinationType->destNumBands->theImageType->getSampleModel->getNumBands->param->getDestinationBands->if->new->intArr->for->i->if->throw->new->IllegalArgumentException->for->i
TIFFImageReader#readAsRenderedImage(int, ImageReadParam)::: image reader read as rendered image:::prepareRead->return->new->TIFFRenderedImage
TIFFImageReader#decodeTile(int, int, int)::: image reader decode tile:::tileRect->new->Rectangle->if->isImageTiled->tileRect->new->Rectangle->intersection->if->return->srcMinX->srcMinY->srcWidth->srcHeight->iceil->dstMaxX->ifloor->iceil->dstMaxY->ifloor->dstRect->new->Rectangle->dstRect->theImage->getRaster->getBounds->intersection->if->return->activeSrcMinX->sxmax->activeSrcWidth->activeSrcMinY->symax->activeSrcHeight->decompressor->setSrcMinX->decompressor->setSrcMinY->decompressor->setSrcWidth->decompressor->setSrcHeight->decompressor->setDstMinX->decompressor->setDstMinY->decompressor->setDstWidth->decompressor->setDstHeight->decompressor->setActiveSrcMinX->decompressor->setActiveSrcMinY->decompressor->setActiveSrcWidth->decompressor->setActiveSrcHeight->tileIndex->if->offset->getTileOrStripOffset->byteCount->getTileOrStripByteCount->decompressor->setPlanarBand->decompressor->setStream->decompressor->setOffset->decompressor->setByteCount->decompressor->beginDecoding->stream->mark->decompressor->decode->stream->reset
TIFFImageReader#reportProgress()::: image reader report progress:::processImageProgress->processImageUpdate
TIFFImageReader#read(int, ImageReadParam)::: image reader read:::prepareRead->getImageTypes->getDestination->imageReadParam->getSourceXSubsampling->imageReadParam->getSourceYSubsampling->p->imageReadParam->getDestinationOffset->srcRegion->new->Rectangle->destRegion->new->Rectangle->computeRegions->clearAbortRequest->processImageStarted->if->abortRequested->processReadAborted->return->compression->getCompression->if->fillOrderField->imageMetadata->getTIFFField->if->fillOrderField->getAsInt->new->TIFFLSBDecompressor->else->new->TIFFNullDecompressor->else->if->new->TIFFFaxDecompressor->else->if->new->TIFFFaxDecompressor->else->if->new->TIFFFaxDecompressor->else->if->new->TIFFPackBitsDecompressor->else->if->predictorField->imageMetadata->getTIFFField->predictor->predictorField->getAsInt->fillOrderField->imageMetadata->getTIFFField->fillOrder->fillOrderField->getAsInt->new->TIFFLZWDecompressor->else->if->new->TIFFJPEGDecompressor->else->if->predictorField->imageMetadata->getTIFFField->predictor->predictorField->getAsInt->new->TIFFDeflateDecompressor->else->if->JPEGProcField->imageMetadata->getTIFFField->if->processWarningOccurred->else->if->JPEGProcField->getAsInt->throw->new->IIOException->new->TIFFOldJPEGDecompressor->else->throw->new->IIOException->if->convertYCbCrToRGB->theImage->getColorModel->getColorSpace->getType->wrappedDecompressor->new->TIFFYCbCrDecompressor->colorConverter->if->theImage->getColorModel->getColorSpace->getType->new->TIFFCIELabColorConverter->else->if->new->TIFFYCbCrColorConverter->decompressor->setReader->decompressor->setMetadata->decompressor->setImage->decompressor->setPhotometricInterpretation->decompressor->setCompression->decompressor->setSamplesPerPixel->decompressor->setBitsPerSample->decompressor->setSampleFormat->decompressor->setExtraSamples->decompressor->setColorMap->decompressor->setColorConverter->decompressor->setSourceXOffset->decompressor->setSourceYOffset->decompressor->setSubsampleX->decompressor->setSubsampleY->decompressor->setDstXOffset->decompressor->setDstYOffset->decompressor->setSourceBands->decompressor->setDestinationBands->minTileX->TIFFImageWriter->XToTileX->minTileY->TIFFImageWriter->YToTileY->maxTileX->TIFFImageWriter->XToTileX->maxTileY->TIFFImageWriter->YToTileY->if->decompressor->setPlanar->sb->new->intArr->db->new->intArr->for->tj->else->for->tj->processImageComplete->return
TIFFImageReader#reset()::: image reader reset:::super->reset->resetLocal
TIFFImageReader#resetLocal()::: image reader reset local:::getDefaultReadParam->new->ArrayList<Long>->new->HashMap<Integer,List<ImageTypeSpecifier>>
TIFFImageReader#forwardWarningMessage(String):::Package scope method to allow decompressors, for example, to emit warning messages.:::processWarningOccurred
TIFFImageReaderSpi#getDescription(Locale)::: image reader spi get description:::return
TIFFImageReaderSpi#canDecodeInput(Object)::: image reader spi can decode input:::if->return->stream->b->new->byteArr->stream->mark->stream->readFully->stream->reset->return
TIFFImageReaderSpi#createReaderInstance(Object)::: image reader spi create reader instance:::return->new->TIFFImageReader
TIFFImageReaderSpi#onRegistration(ServiceRegistry, Class)::: image reader spi on registration:::if->return
TIFFImageWriter#XToTileX(int, int, int):::Converts a pixel's X coordinate into a horizontal tile index relative to a given tile grid layout specified by its X offset and tile width:::if->return
TIFFImageWriter#YToTileY(int, int, int):::Converts a pixel's Y coordinate into a vertical tile index relative to a given tile grid layout specified by its Y offset and tile height:::if->return
TIFFImageWriter#getDefaultWriteParam()::: image writer get default write param:::return->getLocale->new->TIFFImageWriteParam
TIFFImageWriter#setOutput(Object)::: image writer set output:::if->if->throw->new->IllegalArgumentException->reset->try->getStreamPosition->try->b->new->byteArr->stream->readFully->if->stream->length->else->catch->finally->stream->seek->catch->finally->else->super->setOutput
TIFFImageWriter#getDefaultStreamMetadata(ImageWriteParam)::: image writer get default stream metadata:::return->new->TIFFStreamMetadata
TIFFImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)::: image writer get default image metadata:::tagSets->new->ArrayList<TIFFTagSet>->tagSets->BaselineTIFFTagSet->getInstance->add->imageMetadata->new->TIFFImageMetadata->if->im->convertImageMetadata->if->return
TIFFImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)::: image writer convert stream metadata:::if->throw->new->NullPointerException->outData->if->new->TIFFStreamMetadata->return->else->if->Arrays->inData->getMetadataFormatNames->asList->contains->new->TIFFStreamMetadata->format->try->outData->inData->getAsTree->mergeTree->catch->return->finally->return
TIFFImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)::: image writer convert image metadata:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->outData->if->inIFD->getRootIFD->inIFD->getShallowClone->new->TIFFImageMetadata->else->if->Arrays->inData->getMetadataFormatNames->asList->contains->try->convertNativeImageMetadata->catch->return->finally->else->if->inData->isStandardMetadataFormatSupported->try->convertStandardImageMetadata->catch->return->finally->if->bogusWriter->new->TIFFImageWriter->sm->imageType->getSampleModel->try->bogusWriter->imageType->getColorModel->sm->getWidth->sm->getHeight->setupMetadata->return->catch->return->finally->return
TIFFImageWriter#convertStandardImageMetadata(IIOMetadata):::Converts a standard javax_imageio_1.0 tree to a TIFFImageMetadata object.:::if->throw->new->NullPointerException->else->if->inData->isStandardMetadataFormatSupported->throw->new->IllegalArgumentException->outData->formatName->tree->inData->getAsTree->if->tagSets->new->ArrayList<TIFFTagSet>->tagSets->BaselineTIFFTagSet->getInstance->add->new->TIFFImageMetadata->outData->setFromTree->return
TIFFImageWriter#convertNativeImageMetadata(IIOMetadata):::Converts a native javax_imageio_tiff_image_1.0 tree to a TIFFImageMetadata object.:::if->throw->new->NullPointerException->else->if->Arrays->inData->getMetadataFormatNames->asList->contains->throw->new->IllegalArgumentException->outData->formatName->tree->inData->getAsTree->if->tagSets->new->ArrayList<TIFFTagSet>->tagSets->BaselineTIFFTagSet->getInstance->add->new->TIFFImageMetadata->outData->setFromTree->return
TIFFImageWriter#setupMetadata(ColorModel, SampleModel, int, int):::Sets up the output metadata adding, removing, and overriding fields as needed:::rootIFD->imageMetadata->getRootIFD->base->BaselineTIFFTagSet->getInstance->f->rootIFD->getTIFFField->if->f->getAsInt->planarConfigurationField->base->getTag->new->TIFFField->rootIFD->addTIFFField->extraSamples->forcePhotometricInterpretation->rootIFD->getTIFFField->if->f->getAsInt->if->else->sampleSize->sm->getSampleSize->numBands->sm->getNumBands->numExtraSamples->if->cm->hasAlpha->new->charArr->if->cm->isAlphaPremultiplied->else->if->if->else->if->sm->getNumBands->icm->r0->icm->getRed->r1->icm->getRed->if->icm->getMapSize->icm->getGreen->icm->getBlue->icm->getGreen->icm->getBlue->if->else->if->else->else->if->switch->cm->getColorSpace->getType->break->break->break->else->if->compressionMode->param->getCompressionMode->switch->compressionType->param->getCompressionType->if->else->len->for->i->break->compField->rootIFD->getTIFFField->if->compField->getAsInt->else->break->predictorField->rootIFD->getTIFFField->if->predictorField->getAsInt->if->newPredictorField->base->getTag->new->TIFFField->rootIFD->addTIFFField->compressionField->base->getTag->new->TIFFField->rootIFD->addTIFFField->isExif->if->if->rootIFD->getTIFFField->if->else->if->else->if->EXIF_JPEG_COMPRESSION_TYPE->param->getCompressionType->equals->isJPEGInterchange->if->new->TIFFRLECompressor->if->else->if->new->TIFFT4Compressor->if->else->if->new->TIFFT6Compressor->if->else->if->new->TIFFLZWCompressor->else->if->if->new->TIFFExifJPEGCompressor->else->throw->new->IIOException->else->if->if->else->if->else->throw->new->IIOException->new->TIFFJPEGCompressor->else->if->new->TIFFZLibCompressor->else->if->new->TIFFPackBitsCompressor->else->if->new->TIFFDeflateCompressor->else->rootIFD->getTIFFField->inverseFill->f->getAsInt->if->new->TIFFLSBCompressor->else->new->TIFFNullCompressor->if->cm->getColorSpace->getType->if->new->TIFFYCbCrColorConverter->else->if->new->TIFFCIELabColorConverter->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->base->getTag->new->charArr->new->TIFFField->addTIFFField->rootIFD->base->getTag->new->charArr->new->TIFFField->addTIFFField->photometricInterpretationField->base->getTag->new->TIFFField->rootIFD->addTIFFField->new->charArr->for->i->if->else->if->else->if->else->if->else->if->for->i->if->bitsPerSampleField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->bitsPerSampleField->rootIFD->getTIFFField->if->bps->bitsPerSampleField->getAsInts->if->rootIFD->removeTIFFField->rootIFD->getTIFFField->if->sampleFormatValue->dataType->sm->getDataType->if->else->if->else->sampleFormatArray->new->charArr->Arrays->fill->sampleFormatTag->base->getTag->sampleFormatField->new->TIFFField->rootIFD->addTIFFField->else->if->f->getAsInt->else->if->extraSamplesField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->samplesPerPixelField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->colorMap->new->charArr->icm->mapSize->indexBound->Math->icm->getMapSize->min->for->i->colorMapField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->ImageUtil->cm->getColorSpace->isNonStandardICCColorSpace->iccColorSpace->cm->getColorSpace->iccProfileData->iccColorSpace->getProfile->getData->iccProfileField->base->getTag->new->TIFFField->rootIFD->addTIFFField->XResolutionField->rootIFD->getTIFFField->YResolutionField->rootIFD->getTIFFField->if->resRational->new->longArrs->new->longArr->ResolutionUnitField->rootIFD->getTIFFField->if->rootIFD->getTIFFField->rootIFD->getTIFFField->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->resolutionUnit->ResolutionUnitField->getAsInt->maxDimension->Math->max->switch->break->break->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->yResolution->YResolutionField->getAsRational->clone->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->xResolution->XResolutionField->getAsRational->clone->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->width->imageWidthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->height->imageLengthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rowsPerStrip->rowsPerStripField->rootIFD->getTIFFField->if->rowsPerStripField->getAsInt->if->else->bitsPerPixel->bytesPerRow->Math->Math->max->max->Math->min->useTiling->tilingMode->param->getTilingMode->if->else->if->param->getTileWidth->param->getTileHeight->else->if->rootIFD->getTIFFField->if->else->f->getAsInt->rootIFD->getTIFFField->if->else->f->getAsInt->else->throw->new->IIOException->if->subX->subY->if->else->if->MCUMultipleX->MCUMultipleY->Math->max->Math->max->else->if->MCUMultiple->Math->max->Math->max->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->else->if->else->if->tileWidthRemainder->if->Math->max->processWarningOccurred->tileLengthRemainder->if->Math->max->processWarningOccurred->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->stripOffsetsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->stripByteCountsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->tileWidthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileLengthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileOffsetsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileByteCountsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->isPrimaryIFD->isEncodingEmpty->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->else->base->getTag->new->TIFFField->rootIFD->addTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->removeTIFFField->else->if->rootIFD->getTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->exifTags->ExifTIFFTagSet->getInstance->exifIFD->rootIFD->getTIFFField->if->f->hasDirectory->TIFFIFD->f->getDirectory->getDirectoryAsIFD->else->if->exifTagSets->new->ArrayList<TIFFTagSet>->exifTagSets->add->new->TIFFIFD->tagSet->ExifParentTIFFTagSet->getInstance->exifIFDTag->tagSet->getTag->rootIFD->new->TIFFField->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->getBytes->new->TIFFField->exifIFD->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->new->byteArr->new->TIFFField->exifIFD->addTIFFField->else->exifIFD->removeTIFFField->exifIFD->removeTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->byteArr->new->TIFFField->exifIFD->addTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->charArr->new->TIFFField->exifIFD->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->new->TIFFField->exifIFD->addTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->TIFFField->exifIFD->addTIFFField->else->exifIFD->removeTIFFField
TIFFImageWriter#getImageType()::: image writer get image type:::return
TIFFImageWriter#writeTile(Rectangle, TIFFCompressor)::: image writer write tile:::activeRect->isPadded->imageBounds->image->getMinX->image->getMinY->image->getWidth->image->getHeight->new->Rectangle->if->tileRect->intersection->else->if->imageBounds->contains->else->imageBounds->intersection->if->activeRect->isEmpty->return->minX->minY->width->height->if->sm->image->getSampleModel->raster->image->getData->if->wr->raster->createCompatibleWritableRaster->wr->setRect->if->buf->ImageUtil->getPackedBinaryData->if->dbb->raster->getDataBuffer->if->getData->bbuf->new->byteArr->len->for->i->else->len->for->i->return->compressor->encode->else->if->sm->getDataType->csm->raster->getSampleModel->buf->raster->getDataBuffer->getData->off->csm->raster->getSampleModelTranslateX->raster->getSampleModelTranslateY->getOffset->return->compressor->csm->getScanlineStride->encode->xOffset->xSkip->yOffset->ySkip->hpixels->vpixels->if->return->samplesPerByte->numSamples->bytesPerRow->if->else->if->else->if->else->if->samples->fsamples->dsamples->if->if->new->floatArr->else->new->doubleArr->else->new->intArr->currTile->new->byteArr->if->sm->image->getSampleModel->if->sm->getDataType->raster->image->getData->if->wr->raster->createCompatibleWritableRaster->wr->setRect->csm->raster->getSampleModel->bankIndices->csm->getBankIndices->bankData->raster->getDataBuffer->getBankData->lineStride->csm->getScanlineStride->pixelStride->csm->getPixelStride->for->k->return->compressor->encode->tcount->activeMinX->activeMinY->activeMaxY->activeWidth->rowSampleModel->if->image->getSampleModel->createCompatibleSampleModel->for->row->bitsPerSample->new->intArr->for->i->byteCount->compressor->encode->return
TIFFImageWriter#equals(int[], int[])::: image writer equals:::if->return->if->return->for->i->return
TIFFImageWriter#initializeScaleTables(int[])::: image writer initialize scale tables:::if->equals->return->if->for->b->if->return->maxOutSample->if->new->byteArrs->for->b->else->if->new->byteArrs->new->byteArrs->for->b
TIFFImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)::: image writer write:::if->throw->new->IllegalStateException->markPositions->write->if->abortRequested->resetPositions
TIFFImageWriter#writeHeader()::: image writer write header:::if->else->stream->setByteOrder->if->stream->writeShort->else->stream->writeShort->stream->writeShort->stream->writeInt->stream->getStreamPosition
TIFFImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam, boolean, boolean)::: image writer write:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->iioimage->hasRaster->canWriteRasters->throw->new->UnsupportedOperationException->iioimage->getRenderedImage->sampleModel->image->getSampleModel->image->getMinX->image->getMinY->image->getWidth->image->getHeight->imageBounds->new->Rectangle->colorModel->if->getDefaultWriteParam->sampleModel->getNumBands->image->getColorModel->else->sourceRegion->param->getSourceRegion->if->sourceRegion->intersection->gridX->param->getSubsamplingXOffset->gridY->param->getSubsamplingYOffset->param->getSourceXSubsampling->param->getSourceYSubsampling->sBands->param->getSourceBands->if->else->sampleModel->getNumBands->destType->p->getDestinationType->if->cm->destType->getColorModel->if->cm->getNumComponents->if->image->getColorModel->new->ImageTypeSpecifier->ImageUtil->canEncodeImage->destWidth->destHeight->if->throw->new->IllegalArgumentException->clearAbortRequest->processImageStarted->if->abortRequested->processWriteAborted->return->if->if->convertStreamMetadata->if->getDefaultStreamMetadata->writeHeader->stream->seek->stream->writeInt->im->iioimage->getMetadata->if->if->getShallowClone->else->if->Arrays->im->getMetadataFormatNames->asList->contains->convertNativeImageMetadata->else->if->im->isStandardMetadataFormatSupported->convertStandardImageMetadata->if->processWarningOccurred->if->getDefaultImageMetadata->setupMetadata->compressor->setWriter->compressor->setMetadata->compressor->setStream->sampleModel->getSampleSize->sampleModel->getSampleSize->initializeScaleTables->ImageUtil->getSampleModel->isBinary->ImageUtil->imageIsContiguous->rootIFD->imageMetadata->getRootIFD->rootIFD->writeToStream->stream->getStreamPosition->stream->writeInt->lastIFDPosition->rootIFD->getLastPosition->stream->seek->if->if->return->stripOrTileByteCountsPosition->rootIFD->getStripOrTileByteCountsPosition->stripOrTileOffsetsPosition->rootIFD->getStripOrTileOffsetsPosition->for->tj->processImageComplete
TIFFImageWriter#canWriteSequence()::: image writer can write sequence:::return
TIFFImageWriter#prepareWriteSequence(IIOMetadata)::: image writer prepare write sequence:::if->getOutput->throw->new->IllegalStateException->if->convertStreamMetadata->if->getDefaultStreamMetadata->writeHeader
TIFFImageWriter#writeToSequence(IIOImage, ImageWriteParam)::: image writer write to sequence:::if->throw->new->IllegalStateException->writeInsert
TIFFImageWriter#endWriteSequence()::: image writer end write sequence:::if->getOutput->throw->new->IllegalStateException->if->throw->new->IllegalStateException->streamLength->length->if->stream->seek
TIFFImageWriter#canInsertImage(int)::: image writer can insert image:::if->getOutput->throw->new->IllegalStateException->stream->mark->ifdpos->new->longArr->ifd->new->longArr->locateIFD->stream->reset->return
TIFFImageWriter#locateIFD(int, long[], long[])::: image writer locate d:::if->throw->new->IndexOutOfBoundsException->startPos->stream->getStreamPosition->stream->seek->byteOrder->stream->readUnsignedShort->if->stream->setByteOrder->else->if->stream->setByteOrder->else->stream->seek->throw->new->IIOException->if->stream->readUnsignedShort->stream->seek->throw->new->IIOException->stream->getStreamPosition->stream->readUnsignedInt->if->if->stream->seek->throw->new->IndexOutOfBoundsException->return->stream->seek->for->i
TIFFImageWriter#writeInsert(int, IIOImage, ImageWriteParam)::: image writer write insert:::currentImageCached->try->insert->catch->throw->finally
TIFFImageWriter#insert(int, IIOImage, ImageWriteParam, boolean)::: image writer insert:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->ifdpos->new->longArr->ifd->new->longArr->locateIFD->markPositions->stream->seek->stream->mark->prevPointerValue->stream->readUnsignedInt->stream->reset->if->stream->writeInt->stream->seek->write->stream->seek->stream->writeInt->if->abortRequested->stream->seek->stream->writeInt->resetPositions
TIFFImageWriter#isEncodingEmpty()::: image writer is encoding empty:::return
TIFFImageWriter#canInsertEmpty(int)::: image writer can insert empty:::return->canInsertImage
TIFFImageWriter#canWriteEmpty()::: image writer can write empty:::if->getOutput->throw->new->IllegalStateException->return
TIFFImageWriter#checkParamsEmpty(ImageTypeSpecifier, int, int, List)::: image writer check params empty:::if->getOutput->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->numThumbs->thumbnails->size->for->i->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
TIFFImageWriter#prepareInsertEmpty(int, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)::: image writer prepare insert empty:::checkParamsEmpty->emptySM->imageType->getSampleModel->emptyImage->emptySM->getWidth->emptySM->getHeight->imageType->getColorModel->new->EmptyImage->new->IIOImage->insert
TIFFImageWriter#prepareWriteEmpty(IIOMetadata, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)::: image writer prepare write empty:::if->throw->new->IllegalStateException->checkParamsEmpty->emptySM->imageType->getSampleModel->emptyImage->emptySM->getWidth->emptySM->getHeight->imageType->getColorModel->new->EmptyImage->markPositions->new->IIOImage->write->if->abortRequested->resetPositions
TIFFImageWriter#endInsertEmpty()::: image writer end insert empty:::if->getOutput->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
TIFFImageWriter#endWriteEmpty()::: image writer end write empty:::if->getOutput->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
TIFFImageWriter#readIFD(int)::: image writer read d:::if->throw->new->IllegalStateException->if->throw->new->IndexOutOfBoundsException->stream->mark->ifdpos->new->longArr->ifd->new->longArr->locateIFD->if->stream->reset->throw->new->IndexOutOfBoundsException->tagSets->new->ArrayList<TIFFTagSet>->tagSets->BaselineTIFFTagSet->getInstance->add->rootIFD->new->TIFFIFD->rootIFD->initialize->stream->reset->return
TIFFImageWriter#canReplacePixels(int)::: image writer can replace pixels:::if->getOutput->throw->new->IllegalStateException->rootIFD->readIFD->f->rootIFD->getTIFFField->compression->f->getAsInt->return
TIFFImageWriter#prepareReplacePixels(int, Rectangle)::: image writer prepare replace pixels:::synchronized->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->region->getWidth->throw->new->IllegalArgumentException->if->region->getHeight->throw->new->IllegalArgumentException->if->throw->new->IllegalStateException->replacePixelsIFD->readIFD->f->replacePixelsIFD->getTIFFField->compression->f->getAsInt->if->throw->new->UnsupportedOperationException->replacePixelsIFD->getTIFFField->if->throw->new->IIOException->w->f->getAsInt->replacePixelsIFD->getTIFFField->if->throw->new->IIOException->h->f->getAsInt->bounds->new->Rectangle->region->intersection->if->region->isEmpty->throw->new->IIOException->replacePixelsIFD->getTIFFField->if->replacePixelsIFD->getTIFFField->f->getAsLongs->replacePixelsIFD->getTIFFField->if->replacePixelsIFD->getTIFFField->f->getAsLongs->replacePixelsIFD->getStripOrTileOffsetsPosition->replacePixelsIFD->getStripOrTileByteCountsPosition->new->TIFFImageMetadata
TIFFImageWriter#subsample(Raster, int[], int, int, int, int, int, int, Rectangle)::: image writer subsample:::x->raster->getMinX->y->raster->getMinY->w->raster->getWidth->h->raster->getHeight->b->raster->getSampleModel->getNumBands->t->raster->getSampleModel->getDataType->outMinX->XToTileX->outMinY->YToTileY->outMaxX->XToTileX->outMaxY->YToTileY->outWidth->outHeight->if->return->inMinX->inMaxX->inWidth->inMinY->inMaxY->inHeight->wr->raster->createCompatibleWritableRaster->jMax->if->fsamples->new->floatArr->fsubsamples->new->floatArr->for->k->else->if->dsamples->new->doubleArr->dsubsamples->new->doubleArr->for->k->else->samples->new->intArr->subsamples->new->intArr->for->k->return->wr->createChild
TIFFImageWriter#replacePixels(RenderedImage, ImageWriteParam)::: image writer replace pixels:::synchronized->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalStateException->stepX->stepY->gridX->gridY->if->getDefaultWriteParam->else->paramCopy->getDefaultWriteParam->paramCopy->setCompressionMode->paramCopy->setTilingMode->paramCopy->param->getDestinationOffset->setDestinationOffset->paramCopy->param->getSourceBands->setSourceBands->paramCopy->param->getSourceRegion->setSourceRegion->param->getSourceXSubsampling->param->getSourceYSubsampling->param->getSubsamplingXOffset->param->getSubsamplingYOffset->f->replacePixelsMetadata->getTIFFField->if->throw->new->IIOException->dstBitsPerSample->f->getAsInts->srcBitsPerSample->image->getSampleModel->getSampleSize->sourceBands->param->getSourceBands->if->if->throw->new->IIOException->for->i->else->srcNumBands->image->getSampleModel->getNumBands->if->throw->new->IIOException->for->i->srcImageBounds->image->getMinX->image->getMinY->image->getWidth->image->getHeight->new->Rectangle->srcRect->param->getSourceRegion->if->subPeriodX->subPeriodY->subOriginX->subOriginY->if->srcRect->equals->srcRect->intersection->if->srcRect->isEmpty->throw->new->IllegalArgumentException->dstOffset->param->getDestinationOffset->dMinX->XToTileX->dMinY->YToTileY->dMaxX->XToTileX->dMaxY->YToTileY->dstRect->new->Rectangle->dstRect->intersection->if->dstRect->isEmpty->throw->new->IllegalArgumentException->activeSrcMinX->sxmax->activeSrcWidth->activeSrcMinY->symax->activeSrcHeight->activeSrcRect->new->Rectangle->if->activeSrcRect->intersection->isEmpty->throw->new->IllegalArgumentException->if->new->TIFFImageReaderSpi->new->TIFFImageReader->else->reader->reset->stream->mark->try->stream->seek->reader->setInput->sm->image->getSampleModel->cm->image->getColorModel->sm->getNumBands->new->ImageTypeSpecifier->param->getSourceXSubsampling->param->getSourceYSubsampling->sBands->param->getSourceBands->if->reader->getWidth->reader->getHeight->setupMetadata->scaleSampleSize->sm->getSampleSize->initializeScaleTables->ImageUtil->image->getSampleModel->isBinary->ImageUtil->imageIsContiguous->minTileX->XToTileX->minTileY->YToTileY->maxTileX->XToTileX->maxTileY->YToTileY->encoder->new->TIFFNullCompressor->encoder->setWriter->encoder->setStream->encoder->setMetadata->tileRect->new->Rectangle->for->ty->catch->throw->finally->stream->reset
TIFFImageWriter#replacePixels(Raster, ImageWriteParam)::: image writer replace pixels:::if->throw->new->NullPointerException->image->getColorModel->new->SingleTileRenderedImage->replacePixels
TIFFImageWriter#endReplacePixels()::: image writer end replace pixels:::synchronized->if->throw->new->IllegalStateException
TIFFImageWriter#markPositions()::: image writer mark positions:::stream->getStreamPosition
TIFFImageWriter#resetPositions()::: image writer reset positions:::stream->seek
TIFFImageWriter#reset()::: image writer reset:::super->reset
EmptyImage#getTile(int, int)::: empty image get tile:::return
TIFFImageWriterSpi#canEncodeImage(ImageTypeSpecifier)::: image writer spi can encode image:::return
TIFFImageWriterSpi#getDescription(Locale)::: image writer spi get description:::return
TIFFImageWriterSpi#createWriterInstance(Object)::: image writer spi create writer instance:::return->new->TIFFImageWriter
TIFFImageWriterSpi#onRegistration(ServiceRegistry, Class)::: image writer spi on registration:::if->return
TIFFJPEGCompressor.JPEGSPIFilter#filter(Object)::: filter filter:::readerSPI->if->streamMetadataName->readerSPI->getNativeStreamMetadataFormatName->if->return->streamMetadataName->equals->else->return->return
TIFFJPEGCompressor#getJPEGTablesReader():::Retrieves a JPEG reader which supports native JPEG stream metadata.:::jpegReader->try->registry->IIORegistry->getDefaultInstance->readerSPIs->registry->new->JPEGSPIFilter->getServiceProviders->if->readerSPIs->hasNext->jpegReaderSPI->readerSPIs->next->jpegReaderSPI->createReaderInstance->catch->finally->return
TIFFJPEGCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->rootIFD->tim->getRootIFD->base->BaselineTIFFTagSet->getInstance->f->tim->getTIFFField->numBands->f->getAsInt->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->else->YCbCrSubSamplingField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->YCbCrPositioningField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->referenceBlackWhiteField->base->getTag->new->longArrs->new->TIFFField->rootIFD->addTIFFField->JPEGTablesField->tim->getTIFFField->if->initJPEGWriter->if->if->JPEGTablesField->getCount->tables->JPEGTablesField->getAsBytes->bais->new->ByteArrayInputStream->iis->new->MemoryCacheImageInputStream->jpegReader->getJPEGTablesReader->jpegReader->setInput->try->jpegReader->getStreamMetadata->catch->finally->jpegReader->reset->if->JPEGWriter->getDefaultStreamMetadata->tableByteStream->new->ByteArrayOutputStream->tableStream->new->MemoryCacheImageOutputStream->JPEGWriter->setOutput->try->JPEGWriter->prepareWriteSequence->tableStream->flush->JPEGWriter->endWriteSequence->tables->tableByteStream->toByteArray->base->getTag->new->TIFFField->rootIFD->addTIFFField->catch->rootIFD->removeTIFFField->finally->else->rootIFD->removeTIFFField->initJPEGWriter
TIFFJPEGDecompressor#beginDecoding()::: decompressor begin decoding:::if->iter->ImageIO->getImageReadersByFormatName->if->iter->hasNext->throw->new->IllegalStateException->iter->next->JPEGReader->getDefaultReadParam->tmetadata->f->tmetadata->getTIFFField->if->f->getAsBytes->else
TIFFJPEGDecompressor#decodeRaw(byte[], int, int, int)::: decompressor decode raw:::stream->seek->is->if->dataLength->if->new->byteArr->dataOffset->for->i->System->arraycopy->byte1->stream->read->byte2->stream->read->if->stream->readFully->bais->new->ByteArrayInputStream->new->MemoryCacheImageInputStream->else->JPEGReader->setInput->JPEGParam->setDestination->JPEGReader->read
TIFFJPEGDecompressor#finalize()::: decompressor finalize:::super->finalize->JPEGReader->dispose
TIFFLSBCompressor#encode(byte[], int, int, int, int[], int)::: compressor encode:::bitsPerPixel->for->i->bytesPerRow->compData->new->byteArr->flipTable->for->row->return
TIFFLSBDecompressor#decodeRaw(byte[], int, int, int)::: decompressor decode raw:::stream->seek->bytesPerRow->if->numBytes->stream->readFully->xMax->for->x->else->for->y
TIFFLZWCompressor#setStream(ImageOutputStream)::: compressor set stream:::super->setStream
TIFFLZWCompressor#encode(byte[], int, int, int, int[], int)::: compressor encode:::lzwCompressor->new->LZWCompressor->samplesPerPixel->bitsPerPixel->for->i->bytesPerRow->initialStreamPosition->stream->getStreamPosition->usePredictor->if->lzwCompressor->compress->else->rowBuf->new->byteArr->for->i->lzwCompressor->flush->bytesWritten->stream->getStreamPosition->return
TIFFLZWDecompressor#decodeRaw(byte[], int, int, int)::: decompressor decode raw:::if->len->for->i->stream->seek->sdata->new->byteArr->stream->readFully->if->for->i->bytesPerRow->buf->bufOffset->if->else->new->byteArr->numBytesDecoded->decode->if->off->for->y
TIFFLZWDecompressor#decode(byte[], int, byte[], int)::: decompressor decode:::if->throw->new->IIOException->initializeStringTable->code->oldCode->string->while->getNextCode->if->initializeStringTable->getNextCode->if->break->writeString->else->if->writeString->addStringToTable->else->composeString->writeString->addStringToTable->if->step->samplesPerRow->off->for->j->return
TIFFLZWDecompressor#initializeStringTable():::Initialize the string table.:::new->byteArrs->for->i
TIFFLZWDecompressor#writeString(byte[]):::Write out the string just uncompressed.:::if->maxIndex->Math->min->for->i
TIFFLZWDecompressor#addStringToTable(byte[], byte):::Add a new string to the string table.:::length->string->new->byteArr->System->arraycopy->if->else->if->else->if
TIFFLZWDecompressor#addStringToTable(byte[]):::Add a new string to the string table.:::if->else->if->else->if
TIFFLZWDecompressor#composeString(byte[], byte):::Append newString to the end of oldString.:::length->string->new->byteArr->System->arraycopy->return
TIFFLZWDecompressor#getNextCode()::: decompressor get next code:::try->if->code->return->catch->return->finally
TIFFLZWUtil#decode(byte[], int, int, int, int)::: util decode:::if->throw->new->IIOException->new->byteArr->initializeStringTable->code->oldCode->string->while->getNextCode->if->initializeStringTable->getNextCode->if->break->writeString->else->if->writeString->addStringToTable->else->composeString->writeString->addStringToTable->if->count->for->j->newDstData->new->byteArr->System->arraycopy->return
TIFFLZWUtil#initializeStringTable():::Initialize the string table.:::new->byteArrs->for->i
TIFFLZWUtil#ensureCapacity(int)::: util ensure capacity:::if->newDstData->Math->max->new->byteArr->System->arraycopy
TIFFLZWUtil#writeString(byte[]):::Write out the string just uncompressed.:::ensureCapacity->for->i
TIFFLZWUtil#addStringToTable(byte[], byte):::Add a new string to the string table.:::length->string->new->byteArr->System->arraycopy->if->else->if->else->if
TIFFLZWUtil#addStringToTable(byte[]):::Add a new string to the string table.:::if->else->if->else->if
TIFFLZWUtil#composeString(byte[], byte):::Append newString to the end of oldString.:::length->string->new->byteArr->System->arraycopy->return
TIFFLZWUtil#getNextCode()::: util get next code:::try->if->code->return->catch->return->finally
TIFFMetadataFormat#getRootName()::: metadata format get root name:::return
TIFFMetadataFormat#getResource(String, Locale)::: metadata format get resource:::if->Locale->getDefault->try->bundle->ResourceBundle->this->getClass->getModule->getBundle->return->bundle->getString->catch->return->finally
TIFFMetadataFormat#getElementInfo(String)::: metadata format get element info:::if->throw->new->NullPointerException->info->elementInfoMap->get->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getAttrInfo(String, String)::: metadata format get attr info:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->key->info->attrInfoMap->get->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getElementMinChildren(String)::: metadata format get element min children:::info->getElementInfo->return
TIFFMetadataFormat#getElementMaxChildren(String)::: metadata format get element max children:::info->getElementInfo->return
TIFFMetadataFormat#getElementDescription(String, Locale)::: metadata format get element description:::if->elementInfoMap->containsKey->throw->new->IllegalArgumentException->return->getResource
TIFFMetadataFormat#getChildPolicy(String)::: metadata format get child policy:::info->getElementInfo->return
TIFFMetadataFormat#getChildNames(String)::: metadata format get child names:::info->getElementInfo->return
TIFFMetadataFormat#getAttributeNames(String)::: metadata format get attribute names:::info->getElementInfo->return
TIFFMetadataFormat#getAttributeValueType(String, String)::: metadata format get attribute value type:::info->getAttrInfo->return
TIFFMetadataFormat#getAttributeDataType(String, String)::: metadata format get attribute data type:::info->getAttrInfo->return
TIFFMetadataFormat#isAttributeRequired(String, String)::: metadata format is attribute required:::info->getAttrInfo->return
TIFFMetadataFormat#getAttributeDefaultValue(String, String)::: metadata format get attribute default value:::return
TIFFMetadataFormat#getAttributeEnumerations(String, String)::: metadata format get attribute enumerations:::throw->new->IllegalArgumentException
TIFFMetadataFormat#getAttributeMinValue(String, String)::: metadata format get attribute min value:::throw->new->IllegalArgumentException
TIFFMetadataFormat#getAttributeMaxValue(String, String)::: metadata format get attribute max value:::throw->new->IllegalArgumentException
TIFFMetadataFormat#getAttributeListMinLength(String, String)::: metadata format get attribute list min length:::info->getAttrInfo->return
TIFFMetadataFormat#getAttributeListMaxLength(String, String)::: metadata format get attribute list max length:::info->getAttrInfo->return
TIFFMetadataFormat#getAttributeDescription(String, String, Locale)::: metadata format get attribute description:::key->if->attrInfoMap->containsKey->throw->new->IllegalArgumentException->return->getResource
TIFFMetadataFormat#getObjectValueType(String)::: metadata format get object value type:::info->getElementInfo->return
TIFFMetadataFormat#getObjectClass(String)::: metadata format get object class:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectDefaultValue(String)::: metadata format get object default value:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectEnumerations(String)::: metadata format get object enumerations:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectMinValue(String)::: metadata format get object min value:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectMaxValue(String)::: metadata format get object max value:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectArrayMinLength(String)::: metadata format get object array min length:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFMetadataFormat#getObjectArrayMaxLength(String)::: metadata format get object array max length:::info->getElementInfo->if->throw->new->IllegalArgumentException->return
TIFFNullCompressor#encode(byte[], int, int, int, int[], int)::: null compressor encode:::bitsPerPixel->for->i->bytesPerRow->numBytes->if->stream->write->else->for->row->return
TIFFNullDecompressor#beginDecoding()::: null decompressor begin decoding:::bitsPerPixel->for->i->if->else->super->beginDecoding
TIFFNullDecompressor#decode()::: null decompressor decode:::super->decode->if
TIFFNullDecompressor#decodeRaw(byte[], int, int, int)::: null decompressor decode raw:::if->activeBytesPerRow->totalBytesPerRow->bytesToSkipPerRow->stream->seek->lastRow->for->y->else->stream->seek->bytesPerRow->if->if->stream->read->throw->new->EOFException->else->for->y
TIFFOldJPEGDecompressor#initialize()::: old decompressor initialize:::if->return->tim->JPEGInterchangeFormatField->tim->getTIFFField->segmentOffsetField->tim->getTIFFField->if->tim->getTIFFField->if->segmentOffsets->segmentOffsetField->getAsLongs->isTiled->if->stream->seek->stream->mark->if->stream->read->stream->read->Long->valueOf->forwardWarningMessage->return->stream->reset->if->jpegInterchangeOffset->JPEGInterchangeFormatField->getAsLong->JPEGInterchangeFormatLengthField->tim->getTIFFField->if->Long->valueOf->forwardWarningMessage->return->else->jpegInterchangeLength->JPEGInterchangeFormatLengthField->getAsLong->if->Long->valueOf->return->YCbCrSubsamplingField->tim->getTIFFField->if->YCbCrSubsamplingField->getAsChars->YCbCrSubsamplingField->getAsChars->if->jpegInterchangeOffset->JPEGInterchangeFormatField->getAsLong->JPEGInterchangeFormatLengthField->tim->getTIFFField->if->jpegInterchangeLength->JPEGInterchangeFormatLengthField->getAsLong->if->stream->mark->stream->seek->if->stream->read->stream->read->new->byteArr->else->new->byteArr->stream->reset->stream->mark->stream->seek->stream->readFully->stream->reset->forwardWarningMessage->else->forwardWarningMessage->if->baos->new->ByteArrayOutputStream->streamLength->stream->length->baos->write->baos->write->f->tim->getTIFFField->if->throw->new->IIOException->off->f->getAsLongs->for->i->for->k->baos->write->baos->write->sval->baos->write->baos->write->baos->write->baos->write->baos->write->baos->write->baos->write->baos->write->if->baos->write->baos->write->baos->write->else->for->i->tim->getTIFFField->if->restartInterval->f->getAsChars->if->baos->write->baos->write->baos->write->baos->write->baos->write->baos->write->baos->toByteArray->idx->idxMax->while->if->break->if->tmpTables->new->byteArr->System->arraycopy->tmpOffset->sval->if->else->for->i->stream->mark->stream->seek->if->stream->read->stream->read->SOSLength->stream->read->stream->read->new->byteArr->stream->readFully->else->new->byteArr->SOSMarkerIndex->sval->if->else->for->i->stream->reset
TIFFOldJPEGDecompressor#decodeRaw(byte[], int, int, int)::: old decompressor decode raw:::initialize->tim->if->stream->JPEGStreamOffset->longValue->seek->JPEGReader->setInput->else->tableLength->bufLength->buf->new->byteArr->System->arraycopy->bufOffset->sval->stream->seek->twoBytes->new->byteArr->stream->readFully->if->System->arraycopy->stream->readFully->bais->new->ByteArrayInputStream->is->new->MemoryCacheImageInputStream->JPEGReader->setInput->JPEGParam->setDestination->JPEGReader->read
TIFFOldJPEGDecompressor#finalize()::: old decompressor finalize:::super->finalize->JPEGReader->dispose
TIFFPackBitsCompressor#packBits(byte[], int, int, byte[], int):::Performs PackBits compression for a single buffer of data:::inMax->inMaxMinus1->while->run->replicate->while->if->saveOffset->while->if->if->if->else->return
TIFFPackBitsCompressor#encode(byte[], int, int, int, int[], int)::: pack bits compressor encode:::bitsPerPixel->for->i->bytesPerRow->bufSize->compData->new->byteArr->bytesWritten->for->i->return
TIFFPackBitsDecompressor#decode(byte[], int, byte[], int)::: pack bits decompressor decode:::srcIndex->dstIndex->dstArraySize->srcArraySize->try->while->b->if->for->i->else->if->repeat->for->i->else->catch->if->forwardWarningMessage->finally->return
TIFFPackBitsDecompressor#decodeRaw(byte[], int, int, int)::: pack bits decompressor decode raw:::stream->seek->srcData->new->byteArr->stream->readFully->bytesPerRow->buf->bufOffset->if->else->new->byteArr->decode->if->off->for->y
TIFFPackBitsUtil#ensureCapacity(int)::: pack bits util ensure capacity:::if->newDstData->Math->max->new->byteArr->System->arraycopy
TIFFPackBitsUtil#decode(byte[])::: pack bits util decode:::inIndex->while->b->if->ensureCapacity->for->i->else->if->repeat->ensureCapacity->for->i->else->newDstData->new->byteArr->System->arraycopy->return
TIFFRenderedImage#cloneImageReadParam(ImageReadParam, boolean):::Creates a copy of param:::newParam->new->TIFFImageReadParam->newParam->param->getSourceXSubsampling->param->getSourceYSubsampling->param->getSubsamplingXOffset->param->getSubsamplingYOffset->setSourceSubsampling->newParam->param->getSourceBands->setSourceBands->newParam->param->getDestinationBands->setDestinationBands->newParam->param->getDestinationOffset->setDestinationOffset->if->tparam->tagSets->tparam->getAllowedTagSets->if->tagSetIter->tagSets->iterator->if->while->tagSetIter->hasNext->tagSet->tagSetIter->next->newParam->addAllowedTagSet->return
TIFFRenderedImage#getSources()::: rendered image get sources:::return
TIFFRenderedImage#getProperty(String)::: rendered image get property:::return
TIFFRenderedImage#getPropertyNames()::: rendered image get property names:::return
TIFFRenderedImage#getColorModel()::: rendered image get color model:::return->its->getColorModel
TIFFRenderedImage#getSampleModel()::: rendered image get sample model:::return->its->getSampleModel
TIFFRenderedImage#getWidth()::: rendered image get width:::return
TIFFRenderedImage#getHeight()::: rendered image get height:::return
TIFFRenderedImage#getMinX()::: rendered image get min x:::return
TIFFRenderedImage#getMinY()::: rendered image get min y:::return
TIFFRenderedImage#getNumXTiles()::: rendered image get num tiles:::return
TIFFRenderedImage#getNumYTiles()::: rendered image get num tiles:::return
TIFFRenderedImage#getMinTileX()::: rendered image get min tile x:::return
TIFFRenderedImage#getMinTileY()::: rendered image get min tile y:::return
TIFFRenderedImage#getTileWidth()::: rendered image get tile width:::return
TIFFRenderedImage#getTileHeight()::: rendered image get tile height:::return
TIFFRenderedImage#getTileGridXOffset()::: rendered image get tile grid offset:::return
TIFFRenderedImage#getTileGridYOffset()::: rendered image get tile grid offset:::return
TIFFRenderedImage#getTile(int, int)::: rendered image get tile:::tileRect->new->Rectangle->return->getData
TIFFRenderedImage#getData()::: rendered image get data:::return->getWidth->getHeight->new->Rectangle->read
TIFFRenderedImage#getData(Rectangle)::: rendered image get data:::return->read
TIFFRenderedImage#read(Rectangle)::: rendered image read:::tileParam->new->Rectangle->setSourceRegion->try->bi->reader->read->ras->bi->getRaster->return->ras->ras->getWidth->ras->getHeight->createWritableChild->catch->throw->new->RuntimeException->finally
TIFFRenderedImage#copyData(WritableRaster)::: rendered image copy data:::if->return->getWidth->getHeight->new->Rectangle->read->else->src->raster->getBounds->read->raster->setRect->return
TIFFRLECompressor#encodeRLE(byte[], int, int, int, byte[]):::Encode a row of data using Modified Huffman Compression also known as CCITT RLE (Run Lenth Encoding).:::initBitBuf->outIndex->encode1D->while->if->flipTable->for->i->return
TIFFRLECompressor#encode(byte[], int, int, int, int[], int)::: compressor encode:::if->throw->new->IIOException->maxBits->compData->new->byteArr->bytes->rowOffset->for->i->return
TIFFStreamMetadata#isReadOnly()::: stream metadata is read only:::return
TIFFStreamMetadata#fatal(Node, String)::: stream metadata fatal:::throw->new->IIOInvalidTreeException
TIFFStreamMetadata#getAsTree(String)::: stream metadata get as tree:::root->new->IIOMetadataNode->byteOrderNode->new->IIOMetadataNode->byteOrderNode->byteOrder->toString->setAttribute->root->appendChild->return
TIFFStreamMetadata#mergeNativeTree(Node)::: stream metadata merge native tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->if->node->getNodeName->equals->fatal->attrs->node->getAttributes->order->attrs->getNamedItem->getNodeValue->if->fatal->if->order->equals->else->if->order->equals->else->fatal
TIFFStreamMetadata#mergeTree(String, Node)::: stream metadata merge tree:::if->formatName->equals->if->throw->new->NullPointerException->mergeNativeTree->else->throw->new->IllegalArgumentException
TIFFStreamMetadata#reset()::: stream metadata reset:::
TIFFStreamMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: stream metadata format can node appear:::return
TIFFStreamMetadataFormat#getInstance()::: stream metadata format get instance:::if->new->TIFFStreamMetadataFormat->return
TIFFStreamMetadataFormatResources#getContents()::: stream metadata format resources get contents:::return->contents->clone
TIFFT4Compressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->f->tim->getTIFFField->if->options->f->getAsInt->else->oarray->new->longArr->base->BaselineTIFFTagSet->getInstance->T4Options->base->getTag->new->TIFFField->addTIFFField
TIFFT4Compressor#encodeT4(boolean, boolean, byte[], int, int, int, int, byte[]):::Encode a buffer of data using CCITT T.4 Compression also known as Group 3 facsimile compression.:::refData->lineAddr->outIndex->initBitBuf->KParameter->for->numRows->for->i->while->if->for->i->return
TIFFT4Compressor#encode(byte[], int, int, int, int[], int)::: t4 compressor encode:::if->throw->new->IIOException->maxBits->bufSize->compData->new->byteArr->bytes->encodeT4->stream->write->return
TIFFT6Compressor#encodeT6(byte[], int, int, int, int, byte[]):::Encode a buffer of data using CCITT T.6 Compression also known as Group 4 facsimile compression.:::refData->refAddr->lineAddr->outIndex->initBitBuf->while->a0->last->testbit->a1->nextState->b1->nextState->color->while->b2->nextState->if->add2DBits->else->tmp->if->add2DBits->else->a2->nextState->add2DBits->add1DBits->add1DBits->if->break->nextState->nextState->if->nextState->addEOFB->if->for->i->return
TIFFT6Compressor#encode(byte[], int, int, int, int[], int)::: t6 compressor encode:::if->throw->new->IIOException->if->tim->options->new->longArr->base->BaselineTIFFTagSet->getInstance->T6Options->base->getTag->new->TIFFField->addTIFFField->maxBits->bufSize->compData->new->byteArr->bytes->encodeT6->stream->write->return
TIFFYCbCrColorConverter#fromRGB(float, float, float, float[])::: cb cr color converter from b:::Y->Cb->Cr
TIFFYCbCrColorConverter#toRGB(float, float, float, float[])::: cb cr color converter to b:::Y->Cb->Cr
TIFFYCbCrDecompressor#warning(String)::: cb cr decompressor warning:::if->forwardWarningMessage
TIFFYCbCrDecompressor#setReader(ImageReader)::: cb cr decompressor set reader:::if->decompressor->setReader->super->setReader
TIFFYCbCrDecompressor#setMetadata(IIOMetadata)::: cb cr decompressor set metadata:::if->decompressor->setMetadata->super->setMetadata
TIFFYCbCrDecompressor#setPhotometricInterpretation(int)::: cb cr decompressor set photometric interpretation:::if->decompressor->setPhotometricInterpretation->super->setPhotometricInterpretation
TIFFYCbCrDecompressor#setCompression(int)::: cb cr decompressor set compression:::if->decompressor->setCompression->super->setCompression
TIFFYCbCrDecompressor#setPlanar(boolean)::: cb cr decompressor set planar:::if->decompressor->setPlanar->super->setPlanar
TIFFYCbCrDecompressor#setSamplesPerPixel(int)::: cb cr decompressor set samples per pixel:::if->decompressor->setSamplesPerPixel->super->setSamplesPerPixel
TIFFYCbCrDecompressor#setBitsPerSample(int[])::: cb cr decompressor set bits per sample:::if->decompressor->setBitsPerSample->super->setBitsPerSample
TIFFYCbCrDecompressor#setSampleFormat(int[])::: cb cr decompressor set sample format:::if->decompressor->setSampleFormat->super->setSampleFormat
TIFFYCbCrDecompressor#setExtraSamples(int[])::: cb cr decompressor set extra samples:::if->decompressor->setExtraSamples->super->setExtraSamples
TIFFYCbCrDecompressor#setColorMap(char[])::: cb cr decompressor set color map:::if->decompressor->setColorMap->super->setColorMap
TIFFYCbCrDecompressor#setStream(ImageInputStream)::: cb cr decompressor set stream:::if->decompressor->setStream->else->super->setStream
TIFFYCbCrDecompressor#setOffset(long)::: cb cr decompressor set offset:::if->decompressor->setOffset->super->setOffset
TIFFYCbCrDecompressor#setByteCount(int)::: cb cr decompressor set byte count:::if->decompressor->setByteCount->super->setByteCount
TIFFYCbCrDecompressor#setSrcMinX(int)::: cb cr decompressor set src min x:::if->decompressor->setSrcMinX->super->setSrcMinX
TIFFYCbCrDecompressor#setSrcMinY(int)::: cb cr decompressor set src min y:::if->decompressor->setSrcMinY->super->setSrcMinY
TIFFYCbCrDecompressor#setSrcWidth(int)::: cb cr decompressor set src width:::if->decompressor->setSrcWidth->super->setSrcWidth
TIFFYCbCrDecompressor#setSrcHeight(int)::: cb cr decompressor set src height:::if->decompressor->setSrcHeight->super->setSrcHeight
TIFFYCbCrDecompressor#setSourceXOffset(int)::: cb cr decompressor set source offset:::if->decompressor->setSourceXOffset->super->setSourceXOffset
TIFFYCbCrDecompressor#setDstXOffset(int)::: cb cr decompressor set dst offset:::if->decompressor->setDstXOffset->super->setDstXOffset
TIFFYCbCrDecompressor#setSourceYOffset(int)::: cb cr decompressor set source offset:::if->decompressor->setSourceYOffset->super->setSourceYOffset
TIFFYCbCrDecompressor#setDstYOffset(int)::: cb cr decompressor set dst offset:::if->decompressor->setDstYOffset->super->setDstYOffset
TIFFYCbCrDecompressor#setSourceBands(int[])::: cb cr decompressor set source bands:::if->decompressor->setSourceBands->super->setSourceBands
TIFFYCbCrDecompressor#setDestinationBands(int[])::: cb cr decompressor set destination bands:::if->decompressor->setDestinationBands->super->setDestinationBands
TIFFYCbCrDecompressor#setImage(BufferedImage)::: cb cr decompressor set image:::if->cm->image->getColorModel->image->getRaster->createCompatibleWritableRaster->cm->isAlphaPremultiplied->new->BufferedImage->decompressor->setImage->super->setImage
TIFFYCbCrDecompressor#setDstMinX(int)::: cb cr decompressor set dst min x:::if->decompressor->setDstMinX->super->setDstMinX
TIFFYCbCrDecompressor#setDstMinY(int)::: cb cr decompressor set dst min y:::if->decompressor->setDstMinY->super->setDstMinY
TIFFYCbCrDecompressor#setDstWidth(int)::: cb cr decompressor set dst width:::if->decompressor->setDstWidth->super->setDstWidth
TIFFYCbCrDecompressor#setDstHeight(int)::: cb cr decompressor set dst height:::if->decompressor->setDstHeight->super->setDstHeight
TIFFYCbCrDecompressor#setActiveSrcMinX(int)::: cb cr decompressor set active src min x:::if->decompressor->setActiveSrcMinX->super->setActiveSrcMinX
TIFFYCbCrDecompressor#setActiveSrcMinY(int)::: cb cr decompressor set active src min y:::if->decompressor->setActiveSrcMinY->super->setActiveSrcMinY
TIFFYCbCrDecompressor#setActiveSrcWidth(int)::: cb cr decompressor set active src width:::if->decompressor->setActiveSrcWidth->super->setActiveSrcWidth
TIFFYCbCrDecompressor#setActiveSrcHeight(int)::: cb cr decompressor set active src height:::if->decompressor->setActiveSrcHeight->super->setActiveSrcHeight
TIFFYCbCrDecompressor#clamp(int)::: cb cr decompressor clamp:::if->return->else->if->return->else->return
TIFFYCbCrDecompressor#beginDecoding()::: cb cr decompressor begin decoding:::if->decompressor->beginDecoding->tmetadata->f->tmetadata->getTIFFField->if->if->f->getCount->f->getAsInt->f->getAsInt->if->warning->if->warning->else->warning->tmetadata->getTIFFField->if->if->f->getCount->f->getAsFloat->f->getAsFloat->f->getAsFloat->else->warning->tmetadata->getTIFFField->if->if->f->getCount->f->getAsFloat->f->getAsFloat->f->getAsFloat->f->getAsFloat->f->getAsFloat->f->getAsFloat->else->warning->else->warning->BCb->RCr->GY->GCb->GCr->for->i
TIFFYCbCrDecompressor#decodeRaw(byte[], int, int, int)::: cb cr decompressor decode raw:::elementsPerPacket->packet->new->byteArr->if->bytesPerRow->tmpBuf->new->byteArr->decompressor->decodeRaw->byteStream->new->ByteArrayInputStream->new->MemoryCacheImageInputStream->else->stream->seek->for->y

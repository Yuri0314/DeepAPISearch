TIFFBaseJPEGCompressor#initJPEGWriter(boolean, boolean):::Initializes the JPEGWriter and JPEGParam instance variables:::if->spi->getOriginatingProvider->if->smName->spi->getNativeStreamMetadataFormatName->if->smName->equals->if->imName->spi->getNativeImageMetadataFormatName->if->imName->equals->if->iter->ImageIO->getImageWritersByFormatName->while->iter->hasNext->writer->iter->next->if->spi->writer->getOriginatingProvider->if->smName->spi->getNativeStreamMetadataFormatName->if->smName->equals->continue->if->imName->spi->getNativeImageMetadataFormatName->if->imName->equals->continue->break->if->throw->new->NullPointerException->if->if->else->writer->getLocale->new->JPEGImageWriteParam->if->param->getCompressionMode->JPEGParam->setCompressionMode->JPEGParam->param->getCompressionQuality->setCompressionQuality
TIFFColorConverter#fromRGB(float, float, float, float[]):::Converts an RGB triple into the native color space of this TIFFColorConverter, and stores the result in the first three entries of the result array.:::
TIFFColorConverter#toRGB(float, float, float, float[]):::Converts  a   triple  in  the   native  color  space   of  this TIFFColorConverter into an RGB triple, and stores the result in the first three entries of the rgb array.:::
TIFFCompressor#getCompressionType():::Retrieve the name of the compression type supported by this compressor.:::return
TIFFCompressor#getCompressionTagValue():::Retrieve the value to be assigned to the TIFF Compression tag in the TIFF image metadata.:::return
TIFFCompressor#isCompressionLossless():::Retrieves a value indicating whether the compression is lossless.:::return
TIFFCompressor#setStream(ImageOutputStream):::Sets the ImageOutputStream to be written.:::
TIFFCompressor#getStream():::Returns the ImageOutputStream that will be written.:::return
TIFFCompressor#setWriter(ImageWriter):::Sets the value of the writer field.:::
TIFFCompressor#getWriter():::Returns the current ImageWriter.:::return
TIFFCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field.:::
TIFFCompressor#getMetadata():::Returns the current IIOMetadata object.:::return
TIFFCompressor#encode(byte[], int, int, int, int[], int):::Encodes the supplied image data, writing to the currently set ImageOutputStream.:::
TIFFDecompressor#createInterleavedSM(int, int):::Create a PixelInterleavedSampleModel for use in creating an ImageTypeSpecifier:::bandOffsets->new->intArr->for->i->return->new->PixelInterleavedSampleModel
TIFFDecompressor#getRawImageTypeSpecifier(int, int, int, int[], int[], int[], char[]):::A utility method that returns an ImageTypeSpecifier suitable for decoding an image with the given parameters.:::if->if->isSigned->dataType->if->else->return->ImageTypeSpecifier->createGrayscale->else->mapSize->redLut->new->byteArr->greenLut->new->byteArr->blueLut->new->byteArr->alphaLut->idx->for->i->dataType->if->else->if->else->return->ImageTypeSpecifier->createIndexed->if->dataType->alphaPremultiplied->if->return->ImageTypeSpecifier->createGrayscale->if->dataType->alphaPremultiplied->if->isSigned->return->ImageTypeSpecifier->createGrayscale->rgb->ColorSpace->getInstance->if->bandOffsets->new->intArr->dataType->theColorSpace->if->ColorSpace->getInstance->else->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->theColorSpace->hasAlpha->alphaPremultiplied->if->SimpleCMYKColorSpace->getInstance->else->if->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->return->ImageTypeSpecifier->createInterleaved->if->bandOffsets->new->intArr->dataType->alphaPremultiplied->if->return->ImageTypeSpecifier->createInterleaved->totalBits->for->i->if->redMask->createMask->greenMask->createMask->blueMask->createMask->alphaMask->createMask->transferType->alphaPremultiplied->if->return->ImageTypeSpecifier->createPacked->if->allSameBitDepth->for->i->if->dataType->isDataTypeSet->switch->if->break->if->if->else->break->if->else->break->if->break->if->sm->createInterleavedSM->cm->if->cs->ColorSpace->getInstance->hasAlpha->alphaPremultiplied->if->createComponentCM->else->cs->new->BogusColorSpace->createComponentCM->return->new->ImageTypeSpecifier->if->maxBitsPerSample->for->i->isSigned->if->dataType->getDataTypeFromNumBits->return->ImageTypeSpecifier->createGrayscale->if->alphaPremultiplied->if->dataType->getDataTypeFromNumBits->return->ImageTypeSpecifier->createGrayscale->if->dataType->getDataTypeFromNumBits->dataTypeSize->try->getDataTypeSize->catch->finally->if->redMask->createMask->greenMask->createMask->blueMask->createMask->alphaMask->createMask->transferType->getDataTypeFromNumBits->alphaPremultiplied->if->return->ImageTypeSpecifier->createPacked->else->if->bandOffsets->new->intArr->return->ImageTypeSpecifier->createInterleaved->else->if->bandOffsets->new->intArr->alphaPremultiplied->if->return->ImageTypeSpecifier->createInterleaved->dataType->getDataTypeFromNumBits->sm->createInterleavedSM->cs->if->ColorSpace->getInstance->else->if->else->new->BogusColorSpace->cm->createComponentCM->return->new->ImageTypeSpecifier->return
TIFFDecompressor#setReader(ImageReader):::Sets the value of the reader field:::
TIFFDecompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::
TIFFDecompressor#setPhotometricInterpretation(int):::Sets the value of the photometricInterpretation field:::
TIFFDecompressor#setCompression(int):::Sets the value of the compression field:::
TIFFDecompressor#setPlanar(boolean):::Sets the value of the planar field:::
TIFFDecompressor#setPlanarBand(int):::Sets the index of the planar configuration band to be decoded:::
TIFFDecompressor#setSamplesPerPixel(int):::Sets the value of the samplesPerPixel field:::
TIFFDecompressor#setBitsPerSample(int[]):::Sets the value of the bitsPerSample field:::bitsPerSample->clone
TIFFDecompressor#setSampleFormat(int[]):::Sets the value of the sampleFormat field:::new->intArr->sampleFormat->clone
TIFFDecompressor#setExtraSamples(int[]):::Sets the value of the extraSamples field:::extraSamples->clone
TIFFDecompressor#setColorMap(char[]):::Sets the value of the colorMap field:::colorMap->clone
TIFFDecompressor#setStream(ImageInputStream):::Sets the value of the stream field:::
TIFFDecompressor#setOffset(long):::Sets the value of the offset field:::
TIFFDecompressor#setByteCount(int):::Sets the value of the byteCount field:::
TIFFDecompressor#setSrcMinX(int):::Sets the value of the srcMinX field:::
TIFFDecompressor#setSrcMinY(int):::Sets the value of the srcMinY field:::
TIFFDecompressor#setSrcWidth(int):::Sets the value of the srcWidth field:::
TIFFDecompressor#setSrcHeight(int):::Sets the value of the srcHeight field:::
TIFFDecompressor#setSourceXOffset(int):::Sets the value of the sourceXOffset field:::
TIFFDecompressor#setDstXOffset(int):::Sets the value of the dstXOffset field:::
TIFFDecompressor#setSourceYOffset(int):::Sets the value of the sourceYOffset:::
TIFFDecompressor#setDstYOffset(int):::Sets the value of the dstYOffset field:::
TIFFDecompressor#setSubsampleX(int):::Sets the value of the subsampleX field:::if->throw->new->IllegalArgumentException
TIFFDecompressor#setSubsampleY(int):::Sets the value of the subsampleY field:::if->throw->new->IllegalArgumentException
TIFFDecompressor#setSourceBands(int[]):::Sets the value of the sourceBands field:::sourceBands->clone
TIFFDecompressor#setDestinationBands(int[]):::Sets the value of the destinationBands field:::destinationBands->clone
TIFFDecompressor#setImage(BufferedImage):::Sets the value of the image field:::
TIFFDecompressor#setDstMinX(int):::Sets the value of the dstMinX field:::
TIFFDecompressor#setDstMinY(int):::Sets the value of the dstMinY field:::
TIFFDecompressor#setDstWidth(int):::Sets the value of the dstWidth field:::
TIFFDecompressor#setDstHeight(int):::Sets the value of the dstHeight field:::
TIFFDecompressor#setActiveSrcMinX(int):::Sets the value of the activeSrcMinX field:::
TIFFDecompressor#setActiveSrcMinY(int):::Sets the value of the activeSrcMinY field:::
TIFFDecompressor#setActiveSrcWidth(int):::Sets the value of the activeSrcWidth field:::
TIFFDecompressor#setActiveSrcHeight(int):::Sets the value of the activeSrcHeight field:::
TIFFDecompressor#setColorConverter(TIFFColorConverter):::Sets the TIFFColorConverter object describing the color space of the encoded data in the input stream:::
TIFFDecompressor#getRawImageType():::Returns an ImageTypeSpecifier describing an image whose underlying data array has the same format as the raw source pixel data.:::its->getRawImageTypeSpecifier->return
TIFFDecompressor#createRawImage():::Creates a BufferedImage whose underlying data array will be suitable for holding the raw decoded output of the decodeRaw method:::if->bps->dataType->if->if->else->else->if->else->if->if->else->else->csGray->ColorSpace->getInstance->its->ImageTypeSpecifier->new->intArr->createInterleaved->return->its->createBufferedImage->else->its->getRawImageType->if->return->bi->its->createBufferedImage->return
TIFFDecompressor#decodeRaw(byte[], int, int, int):::Decodes the source data into the provided byte array b, starting at the offset given by dstOffset:::
TIFFDecompressor#decodeRaw(short[], int, int, int):::Decodes the source data into the provided short array s, starting at the offset given by dstOffset:::bytesPerRow->shortsPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(int[], int, int, int):::Decodes the source data into the provided int array i, starting at the offset given by dstOffset:::numBands->intsPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(float[], int, int, int):::Decodes the source data into the provided float array f, starting at the offset given by dstOffset:::numBands->floatsPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#decodeRaw(double[], int, int, int):::Decodes the source data into the provided double array f, starting at the offset given by dstOffset:::numBands->doublesPerRow->bytesPerRow->b->new->byteArr->decodeRaw->bOffset->if->stream->getByteOrder->for->j->else->for->j
TIFFDecompressor#beginDecoding():::This routine is called prior to a sequence of calls to the decode method, in order to allow any necessary tables or other structures to be initialized based on metadata values:::numBands->destBitsPerSample->if->totalNumBands->new->intArr->dbps->image->getSampleModel->getSampleSize->for->b->else->image->getSampleModel->getSampleSize->for->b->if->if->areIntArraysEqual->areIntArraysEqual->areIntArraysEqual->areIntArraysEqual->destBitsPerSample->clone->sourceBands->clone->bitsPerSample->clone->destinationBands->clone->new->intArrs->for->b->else->sourceBandsNormal->destinationBandsNormal->if->for->i->ImageUtil->getRaster->getSampleModel->isBinary->ImageUtil->imageIsContiguous->image->getWidth->image->getHeight
TIFFDecompressor#decode():::Decodes the input bit stream (located in the ImageInputStream stream, at offset offset, and continuing for byteCount bytes) into the output BufferedImage image:::byteData->shortData->intData->floatData->doubleData->dstOffset->pixelBitStride->scanlineStride->if->if->else->if->image->getSubimage->isDirectCopy->if->createRawImage->if->throw->new->IIOException->ras->rawImage->getRaster->if->rect->new->Rectangle->ras->getBounds->ImageUtil->getPackedBinaryData->else->sm->ras->getSampleModel->db->ras->getDataBuffer->isSupportedType->if->csm->csm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->csm->getScanlineStride->if->dbb->dbb->getData->csm->getPixelStride->else->if->dbus->dbus->getData->csm->getPixelStride->else->if->dbs->dbs->getData->csm->getPixelStride->else->if->dbi->dbi->getData->csm->getPixelStride->else->if->dbf->dbf->getData->csm->getPixelStride->else->if->dbd->dbd->getData->csm->getPixelStride->else->if->mppsm->mppsm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->mppsm->getPixelBitStride->mppsm->getScanlineStride->if->dbb->dbb->getData->else->if->dbus->dbus->getData->else->if->dbi->dbi->getData->else->if->sppsm->sppsm->ras->getSampleModelTranslateX->ras->getSampleModelTranslateY->getOffset->sppsm->getScanlineStride->if->dbb->dbb->getData->else->if->dbus->dbus->getData->else->if->dbi->dbi->getData->if->throw->new->IIOException->if->decodeRaw->else->sm->ras->getSampleModel->if->isDataBufferBitContiguous->if->decodeRaw->else->if->decodeRaw->else->if->decodeRaw->else->if->if->areSampleSizesEqual->sm->getSampleSize->decodeRaw->else->bpp->getBitsPerPixel->bytesPerRow->buf->new->byteArr->decodeRaw->reformatData->else->if->if->areSampleSizesEqual->sm->getSampleSize->decodeRaw->else->bpp->getBitsPerPixel->bytesPerRow->buf->new->byteArr->decodeRaw->reformatData->else->bpp->if->else->foreach->bytesPerRow->buf->new->byteArr->decodeRaw->reformatDiscontiguousData->if->rgb->new->floatArr->if->for->j->else->if->if->for->j->else->for->j->else->if->for->j->else->if->for->j->else->if->for->j->if->if->bytesPerRow->for->y->else->if->shortsPerRow->if->for->y->else->for->y->else->if->intsPerRow->for->y->else->if->floatsPerRow->for->y->else->if->doublesPerRow->for->y->if->rect->new->Rectangle->ras->getBounds->ImageUtil->setPackedBinaryData->if->return->src->rawImage->getRaster->srcChild->src->createChild->dst->image->getRaster->dstChild->dst->createWritableChild->if->srcChild->createChild->dstChild->setRect->else->if->sy->dy->while->srcRow->srcChild->createChild->dstChild->setRect->else->p->srcChild->getPixel->numBands->sy->dy->while->sx->dx->while->srcChild->getPixel->if->for->band->dstChild->setPixel
TIFFFaxCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->f->tim->getTIFFField->f->getAsInt
TIFFFaxCompressor#nextState(byte[], int, int, int):::Return min of maxOffset or offset of first pixel different from pixel at bitOffset.:::if->return->next->if->return->end->if->extra->testbyte->if->while->if->break->else->if->return->while->if->return->return
TIFFFaxCompressor#initBitBuf():::Initialize bit buffer machinery.:::
TIFFFaxCompressor#add1DBits(byte[], int, int, int):::Get code for run and add to compressed bitstream.:::sixtyfours->mask->len->if->for->while->while->return
TIFFFaxCompressor#add2DBits(byte[], int, int[][], int):::Place entry from mode table into compressed bitstream.:::mask->len->color->while->return
TIFFFaxCompressor#addEOL(boolean, boolean, boolean, byte[], int):::Add an End-of-Line (EOL == 0x001) to the compressed bitstream with optional byte alignment.:::len->if->if->else->while->return
TIFFFaxCompressor#addEOFB(byte[], int):::Add an End-of-Facsimile-Block (EOFB == 0x001001) to the compressed bitstream.:::len->while->return
TIFFFaxCompressor#encode1D(byte[], int, int, int, byte[], int):::One-dimensionally encode a row of data using CCITT Huffman compression:::lineAddr->bitIndex->last->outIndex->testbit->currentColor->if->add1DBits->else->while->bitCount->nextState->add1DBits->return
TIFFFaxDecompressor#beginDecoding():::Invokes the superclass method and then sets instance variables on the basis of the metadata set on this decompressor.:::super->beginDecoding->if->tmetadata->f->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->tmetadata->getTIFFField->f->getAsInt->else
TIFFIFD#getDirectoryAsIFD(TIFFDirectory):::Converts a TIFFDirectory to a TIFFIFD.:::if->return->ifd->Arrays->dir->getTagSets->asList->dir->getParentTag->new->TIFFIFD->fields->dir->getTIFFFields->numFields->for->i->return
TIFFIFD#getShallowClone():::Returns a TIFFIFD wherein all fields from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.:::baselineTagSet->BaselineTIFFTagSet->getInstance->tagSetList->getTagSetList->if->tagSetList->contains->return->shallowClone->getParentTag->new->TIFFIFD->baselineTagNumbers->baselineTagSet->getTagNumbers->fields->iterator->while->fields->hasNext->field->fields->next->tagNumber->Integer->field->getTagNumber->valueOf->fieldClone->if->baselineTagNumbers->contains->fieldData->field->getData->fieldType->field->getType->try->switch->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->clone->break->catch->finally->field->getTag->field->getCount->new->TIFFField->else->shallowClone->addTIFFField->shallowClone->setPositions->return
TIFFImageMetadata#getShallowClone():::Returns a TIFFImageMetadata wherein all fields in the root IFD from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.:::return->rootIFD->getShallowClone->new->TIFFImageMetadata
TIFFImageReader#forwardWarningMessage(String):::Package scope method to allow decompressors, for example, to emit warning messages.:::processWarningOccurred
TIFFImageWriter#XToTileX(int, int, int):::Converts a pixel's X coordinate into a horizontal tile index relative to a given tile grid layout specified by its X offset and tile width:::if->return
TIFFImageWriter#YToTileY(int, int, int):::Converts a pixel's Y coordinate into a vertical tile index relative to a given tile grid layout specified by its Y offset and tile height:::if->return
TIFFImageWriter#setupMetadata(ColorModel, SampleModel, int, int):::Sets up the output metadata adding, removing, and overriding fields as needed:::rootIFD->imageMetadata->getRootIFD->base->BaselineTIFFTagSet->getInstance->f->rootIFD->getTIFFField->if->f->getAsInt->planarConfigurationField->base->getTag->new->TIFFField->rootIFD->addTIFFField->extraSamples->forcePhotometricInterpretation->rootIFD->getTIFFField->if->f->getAsInt->if->else->sampleSize->sm->getSampleSize->numBands->sm->getNumBands->numExtraSamples->if->cm->hasAlpha->new->charArr->if->cm->isAlphaPremultiplied->else->if->if->else->if->sm->getNumBands->icm->r0->icm->getRed->r1->icm->getRed->if->icm->getMapSize->icm->getGreen->icm->getBlue->icm->getGreen->icm->getBlue->if->else->if->else->else->if->switch->cm->getColorSpace->getType->break->break->break->else->if->compressionMode->param->getCompressionMode->switch->compressionType->param->getCompressionType->if->else->len->for->i->break->compField->rootIFD->getTIFFField->if->compField->getAsInt->else->break->predictorField->rootIFD->getTIFFField->if->predictorField->getAsInt->if->newPredictorField->base->getTag->new->TIFFField->rootIFD->addTIFFField->compressionField->base->getTag->new->TIFFField->rootIFD->addTIFFField->isExif->if->if->rootIFD->getTIFFField->if->else->if->else->if->EXIF_JPEG_COMPRESSION_TYPE->param->getCompressionType->equals->isJPEGInterchange->if->new->TIFFRLECompressor->if->else->if->new->TIFFT4Compressor->if->else->if->new->TIFFT6Compressor->if->else->if->new->TIFFLZWCompressor->else->if->if->new->TIFFExifJPEGCompressor->else->throw->new->IIOException->else->if->if->else->if->else->throw->new->IIOException->new->TIFFJPEGCompressor->else->if->new->TIFFZLibCompressor->else->if->new->TIFFPackBitsCompressor->else->if->new->TIFFDeflateCompressor->else->rootIFD->getTIFFField->inverseFill->f->getAsInt->if->new->TIFFLSBCompressor->else->new->TIFFNullCompressor->if->cm->getColorSpace->getType->if->new->TIFFYCbCrColorConverter->else->if->new->TIFFCIELabColorConverter->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->base->getTag->new->charArr->new->TIFFField->addTIFFField->rootIFD->base->getTag->new->charArr->new->TIFFField->addTIFFField->photometricInterpretationField->base->getTag->new->TIFFField->rootIFD->addTIFFField->new->charArr->for->i->if->else->if->else->if->else->if->else->if->for->i->if->bitsPerSampleField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->bitsPerSampleField->rootIFD->getTIFFField->if->bps->bitsPerSampleField->getAsInts->if->rootIFD->removeTIFFField->rootIFD->getTIFFField->if->sampleFormatValue->dataType->sm->getDataType->if->else->if->else->sampleFormatArray->new->charArr->Arrays->fill->sampleFormatTag->base->getTag->sampleFormatField->new->TIFFField->rootIFD->addTIFFField->else->if->f->getAsInt->else->if->extraSamplesField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->samplesPerPixelField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->colorMap->new->charArr->icm->mapSize->indexBound->Math->icm->getMapSize->min->for->i->colorMapField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->ImageUtil->cm->getColorSpace->isNonStandardICCColorSpace->iccColorSpace->cm->getColorSpace->iccProfileData->iccColorSpace->getProfile->getData->iccProfileField->base->getTag->new->TIFFField->rootIFD->addTIFFField->XResolutionField->rootIFD->getTIFFField->YResolutionField->rootIFD->getTIFFField->if->resRational->new->longArrs->new->longArr->ResolutionUnitField->rootIFD->getTIFFField->if->rootIFD->getTIFFField->rootIFD->getTIFFField->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->resolutionUnit->ResolutionUnitField->getAsInt->maxDimension->Math->max->switch->break->break->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->yResolution->YResolutionField->getAsRational->clone->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->else->if->xResolution->XResolutionField->getAsRational->clone->rootIFD->getTag->new->TIFFField->rootIFD->addTIFFField->width->imageWidthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->height->imageLengthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rowsPerStrip->rowsPerStripField->rootIFD->getTIFFField->if->rowsPerStripField->getAsInt->if->else->bitsPerPixel->bytesPerRow->Math->Math->max->max->Math->min->useTiling->tilingMode->param->getTilingMode->if->else->if->param->getTileWidth->param->getTileHeight->else->if->rootIFD->getTIFFField->if->else->f->getAsInt->rootIFD->getTIFFField->if->else->f->getAsInt->else->throw->new->IIOException->if->subX->subY->if->else->if->MCUMultipleX->MCUMultipleY->Math->max->Math->max->else->if->MCUMultiple->Math->max->Math->max->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->else->if->else->if->tileWidthRemainder->if->Math->max->processWarningOccurred->tileLengthRemainder->if->Math->max->processWarningOccurred->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->stripOffsetsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->stripByteCountsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->else->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->tileWidthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileLengthField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileOffsetsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->tileByteCountsField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->isPrimaryIFD->isEncodingEmpty->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->getTIFFField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->else->base->getTag->new->TIFFField->rootIFD->addTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->removeTIFFField->else->if->rootIFD->getTIFFField->base->getTag->new->TIFFField->rootIFD->addTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->exifTags->ExifTIFFTagSet->getInstance->exifIFD->rootIFD->getTIFFField->if->f->hasDirectory->TIFFIFD->f->getDirectory->getDirectoryAsIFD->else->if->exifTagSets->new->ArrayList<TIFFTagSet>->exifTagSets->add->new->TIFFIFD->tagSet->ExifParentTIFFTagSet->getInstance->exifIFDTag->tagSet->getTag->rootIFD->new->TIFFField->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->getBytes->new->TIFFField->exifIFD->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->new->byteArr->new->TIFFField->exifIFD->addTIFFField->else->exifIFD->removeTIFFField->exifIFD->removeTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->byteArr->new->TIFFField->exifIFD->addTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->charArr->new->TIFFField->exifIFD->addTIFFField->if->if->exifIFD->getTIFFField->exifTags->getTag->new->TIFFField->exifIFD->addTIFFField->if->exifIFD->getTIFFField->exifTags->getTag->new->TIFFField->exifIFD->addTIFFField->else->exifIFD->removeTIFFField
TIFFJPEGCompressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->rootIFD->tim->getRootIFD->base->BaselineTIFFTagSet->getInstance->f->tim->getTIFFField->numBands->f->getAsInt->if->rootIFD->removeTIFFField->rootIFD->removeTIFFField->rootIFD->removeTIFFField->else->YCbCrSubSamplingField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->YCbCrPositioningField->base->getTag->new->charArr->new->TIFFField->rootIFD->addTIFFField->referenceBlackWhiteField->base->getTag->new->longArrs->new->TIFFField->rootIFD->addTIFFField->JPEGTablesField->tim->getTIFFField->if->initJPEGWriter->if->if->JPEGTablesField->getCount->tables->JPEGTablesField->getAsBytes->bais->new->ByteArrayInputStream->iis->new->MemoryCacheImageInputStream->jpegReader->getJPEGTablesReader->jpegReader->setInput->try->jpegReader->getStreamMetadata->catch->finally->jpegReader->reset->if->JPEGWriter->getDefaultStreamMetadata->tableByteStream->new->ByteArrayOutputStream->tableStream->new->MemoryCacheImageOutputStream->JPEGWriter->setOutput->try->JPEGWriter->prepareWriteSequence->tableStream->flush->JPEGWriter->endWriteSequence->tables->tableByteStream->toByteArray->base->getTag->new->TIFFField->rootIFD->addTIFFField->catch->rootIFD->removeTIFFField->finally->else->rootIFD->removeTIFFField->initJPEGWriter
TIFFLZWDecompressor#initializeStringTable():::Initialize the string table.:::new->byteArrs->for->i
TIFFLZWDecompressor#writeString(byte[]):::Write out the string just uncompressed.:::if->maxIndex->Math->min->for->i
TIFFLZWDecompressor#addStringToTable(byte[], byte):::Add a new string to the string table.:::length->string->new->byteArr->System->arraycopy->if->else->if->else->if
TIFFLZWDecompressor#addStringToTable(byte[]):::Add a new string to the string table.:::if->else->if->else->if
TIFFLZWDecompressor#composeString(byte[], byte):::Append newString to the end of oldString.:::length->string->new->byteArr->System->arraycopy->return
TIFFLZWUtil#initializeStringTable():::Initialize the string table.:::new->byteArrs->for->i
TIFFLZWUtil#writeString(byte[]):::Write out the string just uncompressed.:::ensureCapacity->for->i
TIFFLZWUtil#addStringToTable(byte[], byte):::Add a new string to the string table.:::length->string->new->byteArr->System->arraycopy->if->else->if->else->if
TIFFLZWUtil#addStringToTable(byte[]):::Add a new string to the string table.:::if->else->if->else->if
TIFFLZWUtil#composeString(byte[], byte):::Append newString to the end of oldString.:::length->string->new->byteArr->System->arraycopy->return
TIFFRLECompressor#encodeRLE(byte[], int, int, int, byte[]):::Encode a row of data using Modified Huffman Compression also known as CCITT RLE (Run Lenth Encoding).:::initBitBuf->outIndex->encode1D->while->if->flipTable->for->i->return
TIFFT4Compressor#setMetadata(IIOMetadata):::Sets the value of the metadata field:::super->setMetadata->if->tim->f->tim->getTIFFField->if->options->f->getAsInt->else->oarray->new->longArr->base->BaselineTIFFTagSet->getInstance->T4Options->base->getTag->new->TIFFField->addTIFFField
TIFFT4Compressor#encodeT4(boolean, boolean, byte[], int, int, int, int, byte[]):::Encode a buffer of data using CCITT T.4 Compression also known as Group 3 facsimile compression.:::refData->lineAddr->outIndex->initBitBuf->KParameter->for->numRows->for->i->while->if->for->i->return
TIFFT6Compressor#encodeT6(byte[], int, int, int, int, byte[]):::Encode a buffer of data using CCITT T.6 Compression also known as Group 4 facsimile compression.:::refData->refAddr->lineAddr->outIndex->initBitBuf->while->a0->last->testbit->a1->nextState->b1->nextState->color->while->b2->nextState->if->add2DBits->else->tmp->if->add2DBits->else->a2->nextState->add2DBits->add1DBits->add1DBits->if->break->nextState->nextState->if->nextState->addEOFB->if->for->i->return

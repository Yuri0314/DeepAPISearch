com.sun.imageio.plugins.tiff.TIFFBaseJPEGCompressor#initJPEGWriter(boolean, boolean)->void:::Initializes the JPEGWriter and JPEGParam instance variables
com.sun.imageio.plugins.tiff.TIFFBaseJPEGCompressor#encode(byte[], int, int, int, int[], int)->int::: base compressor encode
com.sun.imageio.plugins.tiff.TIFFBaseJPEGCompressor#finalize()->void::: base compressor finalize
com.sun.imageio.plugins.tiff.TIFFCIELabColorConverter#fromRGB(float, float, float, float[])->void::: lab color converter from b
com.sun.imageio.plugins.tiff.TIFFCIELabColorConverter#toRGB(float, float, float, float[])->void::: lab color converter to b
com.sun.imageio.plugins.tiff.TIFFColorConverter#fromRGB(float, float, float, float[])->void:::Converts an RGB triple into the native color space of this TIFFColorConverter, and stores the result in the first three entries of the result array.
com.sun.imageio.plugins.tiff.TIFFColorConverter#toRGB(float, float, float, float[])->void:::Converts  a   triple  in  the   native  color  space   of  this TIFFColorConverter into an RGB triple, and stores the result in the first three entries of the rgb array.
com.sun.imageio.plugins.tiff.TIFFCompressor#getCompressionType()->String:::Retrieve the name of the compression type supported by this compressor.
com.sun.imageio.plugins.tiff.TIFFCompressor#getCompressionTagValue()->int:::Retrieve the value to be assigned to the TIFF Compression tag in the TIFF image metadata.
com.sun.imageio.plugins.tiff.TIFFCompressor#isCompressionLossless()->boolean:::Retrieves a value indicating whether the compression is lossless.
com.sun.imageio.plugins.tiff.TIFFCompressor#setStream(ImageOutputStream)->void:::Sets the ImageOutputStream to be written.
com.sun.imageio.plugins.tiff.TIFFCompressor#getStream()->ImageOutputStream:::Returns the ImageOutputStream that will be written.
com.sun.imageio.plugins.tiff.TIFFCompressor#setWriter(ImageWriter)->void:::Sets the value of the writer field.
com.sun.imageio.plugins.tiff.TIFFCompressor#getWriter()->ImageWriter:::Returns the current ImageWriter.
com.sun.imageio.plugins.tiff.TIFFCompressor#setMetadata(IIOMetadata)->void:::Sets the value of the metadata field.
com.sun.imageio.plugins.tiff.TIFFCompressor#getMetadata()->IIOMetadata:::Returns the current IIOMetadata object.
com.sun.imageio.plugins.tiff.TIFFCompressor#encode(byte[], int, int, int, int[], int)->int:::Encodes the supplied image data, writing to the currently set ImageOutputStream.
com.sun.imageio.plugins.tiff.TIFFDecompressor#createInterleavedSM(int, int)->SampleModel:::Create a PixelInterleavedSampleModel for use in creating an ImageTypeSpecifier
com.sun.imageio.plugins.tiff.TIFFDecompressor#createComponentCM(ColorSpace, int, int[], int, boolean, boolean)->ColorModel::: decompressor create component m
com.sun.imageio.plugins.tiff.TIFFDecompressor#getRawImageTypeSpecifier(int, int, int, int[], int[], int[], char[])->ImageTypeSpecifier:::A utility method that returns an ImageTypeSpecifier suitable for decoding an image with the given parameters.
com.sun.imageio.plugins.tiff.TIFFDecompressor#setReader(ImageReader)->void:::Sets the value of the reader field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setMetadata(IIOMetadata)->void:::Sets the value of the metadata field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setPhotometricInterpretation(int)->void:::Sets the value of the photometricInterpretation field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setCompression(int)->void:::Sets the value of the compression field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setPlanar(boolean)->void:::Sets the value of the planar field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setPlanarBand(int)->void:::Sets the index of the planar configuration band to be decoded
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSamplesPerPixel(int)->void:::Sets the value of the samplesPerPixel field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setBitsPerSample(int[])->void:::Sets the value of the bitsPerSample field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSampleFormat(int[])->void:::Sets the value of the sampleFormat field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setExtraSamples(int[])->void:::Sets the value of the extraSamples field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setColorMap(char[])->void:::Sets the value of the colorMap field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setStream(ImageInputStream)->void:::Sets the value of the stream field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setOffset(long)->void:::Sets the value of the offset field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setByteCount(int)->void:::Sets the value of the byteCount field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSrcMinX(int)->void:::Sets the value of the srcMinX field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSrcMinY(int)->void:::Sets the value of the srcMinY field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSrcWidth(int)->void:::Sets the value of the srcWidth field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSrcHeight(int)->void:::Sets the value of the srcHeight field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSourceXOffset(int)->void:::Sets the value of the sourceXOffset field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstXOffset(int)->void:::Sets the value of the dstXOffset field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSourceYOffset(int)->void:::Sets the value of the sourceYOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstYOffset(int)->void:::Sets the value of the dstYOffset field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSubsampleX(int)->void:::Sets the value of the subsampleX field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSubsampleY(int)->void:::Sets the value of the subsampleY field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setSourceBands(int[])->void:::Sets the value of the sourceBands field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDestinationBands(int[])->void:::Sets the value of the destinationBands field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setImage(BufferedImage)->void:::Sets the value of the image field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstMinX(int)->void:::Sets the value of the dstMinX field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstMinY(int)->void:::Sets the value of the dstMinY field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstWidth(int)->void:::Sets the value of the dstWidth field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setDstHeight(int)->void:::Sets the value of the dstHeight field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setActiveSrcMinX(int)->void:::Sets the value of the activeSrcMinX field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setActiveSrcMinY(int)->void:::Sets the value of the activeSrcMinY field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setActiveSrcWidth(int)->void:::Sets the value of the activeSrcWidth field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setActiveSrcHeight(int)->void:::Sets the value of the activeSrcHeight field
com.sun.imageio.plugins.tiff.TIFFDecompressor#setColorConverter(TIFFColorConverter)->void:::Sets the TIFFColorConverter object describing the color space of the encoded data in the input stream
com.sun.imageio.plugins.tiff.TIFFDecompressor#getRawImageType()->ImageTypeSpecifier:::Returns an ImageTypeSpecifier describing an image whose underlying data array has the same format as the raw source pixel data.
com.sun.imageio.plugins.tiff.TIFFDecompressor#createRawImage()->BufferedImage:::Creates a BufferedImage whose underlying data array will be suitable for holding the raw decoded output of the decodeRaw method
com.sun.imageio.plugins.tiff.TIFFDecompressor#decodeRaw(byte[], int, int, int)->void:::Decodes the source data into the provided byte array b, starting at the offset given by dstOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#decodeRaw(short[], int, int, int)->void:::Decodes the source data into the provided short array s, starting at the offset given by dstOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#decodeRaw(int[], int, int, int)->void:::Decodes the source data into the provided int array i, starting at the offset given by dstOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#decodeRaw(float[], int, int, int)->void:::Decodes the source data into the provided float array f, starting at the offset given by dstOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#decodeRaw(double[], int, int, int)->void:::Decodes the source data into the provided double array f, starting at the offset given by dstOffset
com.sun.imageio.plugins.tiff.TIFFDecompressor#beginDecoding()->void:::This routine is called prior to a sequence of calls to the decode method, in order to allow any necessary tables or other structures to be initialized based on metadata values
com.sun.imageio.plugins.tiff.TIFFDecompressor#decode()->void:::Decodes the input bit stream (located in the ImageInputStream stream, at offset offset, and continuing for byteCount bytes) into the output BufferedImage image
com.sun.imageio.plugins.tiff.TIFFDeflateDecompressor#decodeRaw(byte[], int, int, int)->void::: deflate decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFDeflater#encode(byte[], int, int, int, int[], int)->int::: deflater encode
com.sun.imageio.plugins.tiff.TIFFExifJPEGCompressor#setMetadata(IIOMetadata)->void::: exif compressor set metadata
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#setMetadata(IIOMetadata)->void:::Sets the value of the metadata field
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#nextState(byte[], int, int, int)->int:::Return min of maxOffset or offset of first pixel different from pixel at bitOffset.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#initBitBuf()->void:::Initialize bit buffer machinery.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#add1DBits(byte[], int, int, int)->int:::Get code for run and add to compressed bitstream.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#add2DBits(byte[], int, int[][], int)->int:::Place entry from mode table into compressed bitstream.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#addEOL(boolean, boolean, boolean, byte[], int)->int:::Add an End-of-Line (EOL == 0x001) to the compressed bitstream with optional byte alignment.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#addEOFB(byte[], int)->int:::Add an End-of-Facsimile-Block (EOFB == 0x001001) to the compressed bitstream.
com.sun.imageio.plugins.tiff.TIFFFaxCompressor#encode1D(byte[], int, int, int, byte[], int)->int:::One-dimensionally encode a row of data using CCITT Huffman compression
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#beginDecoding()->void:::Invokes the superclass method and then sets instance variables on the basis of the metadata set on this decompressor.
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#decodeRaw(byte[], int, int, int)->void::: fax decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#decodeRLE()->void::: fax decompressor decode e
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#decodeNextScanline(int)->void::: fax decompressor decode next scanline
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#decodeT4()->void::: fax decompressor decode t4
com.sun.imageio.plugins.tiff.TIFFFaxDecompressor#decodeT6()->void::: fax decompressor decode t6
com.sun.imageio.plugins.tiff.TIFFFieldNode#appendChild(Node)->Node::: field node append child
com.sun.imageio.plugins.tiff.TIFFFieldNode#hasChildNodes()->boolean::: field node has child nodes
com.sun.imageio.plugins.tiff.TIFFFieldNode#getLength()->int::: field node get length
com.sun.imageio.plugins.tiff.TIFFFieldNode#getFirstChild()->Node::: field node get first child
com.sun.imageio.plugins.tiff.TIFFFieldNode#getLastChild()->Node::: field node get last child
com.sun.imageio.plugins.tiff.TIFFFieldNode#getPreviousSibling()->Node::: field node get previous sibling
com.sun.imageio.plugins.tiff.TIFFFieldNode#getNextSibling()->Node::: field node get next sibling
com.sun.imageio.plugins.tiff.TIFFFieldNode#insertBefore(Node, Node)->Node::: field node insert before
com.sun.imageio.plugins.tiff.TIFFFieldNode#replaceChild(Node, Node)->Node::: field node replace child
com.sun.imageio.plugins.tiff.TIFFFieldNode#removeChild(Node)->Node::: field node remove child
com.sun.imageio.plugins.tiff.TIFFFieldNode#cloneNode(boolean)->Node::: field node clone node
com.sun.imageio.plugins.tiff.TIFFIFD#getDirectoryAsIFD(TIFFDirectory)->TIFFIFD:::Converts a TIFFDirectory to a TIFFIFD.
com.sun.imageio.plugins.tiff.TIFFIFD#getTag(int, List)->TIFFTag::: d get tag
com.sun.imageio.plugins.tiff.TIFFIFD#getTag(String, List)->TIFFTag::: d get tag
com.sun.imageio.plugins.tiff.TIFFIFD#getTagSetList()->List::: d get tag set list
com.sun.imageio.plugins.tiff.TIFFIFD#iterator()->Iterator::: d iterator
com.sun.imageio.plugins.tiff.TIFFIFD#initialize(ImageInputStream, boolean, boolean, boolean)->void::: d initialize
com.sun.imageio.plugins.tiff.TIFFIFD#writeToStream(ImageOutputStream)->void::: d write to stream
com.sun.imageio.plugins.tiff.TIFFIFD#getStripOrTileByteCountsPosition()->long::: d get strip or tile byte counts position
com.sun.imageio.plugins.tiff.TIFFIFD#getStripOrTileOffsetsPosition()->long::: d get strip or tile offsets position
com.sun.imageio.plugins.tiff.TIFFIFD#getLastPosition()->long::: d get last position
com.sun.imageio.plugins.tiff.TIFFIFD#setPositions(long, long, long)->void::: d set positions
com.sun.imageio.plugins.tiff.TIFFIFD#getShallowClone()->TIFFIFD:::Returns a TIFFIFD wherein all fields from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.
com.sun.imageio.plugins.tiff.TIFFImageMetadata#initializeFromStream(ImageInputStream, boolean, boolean)->void::: image metadata initialize from stream
com.sun.imageio.plugins.tiff.TIFFImageMetadata#addShortOrLongField(int, long)->void::: image metadata add short or long field
com.sun.imageio.plugins.tiff.TIFFImageMetadata#isReadOnly()->boolean::: image metadata is read only
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getAsTree(String)->Node::: image metadata get as tree
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardChromaNode()->IIOMetadataNode::: image metadata get standard chroma node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardCompressionNode()->IIOMetadataNode::: image metadata get standard compression node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardDataNode()->IIOMetadataNode::: image metadata get standard data node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardDimensionNode()->IIOMetadataNode::: image metadata get standard dimension node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardDocumentNode()->IIOMetadataNode::: image metadata get standard document node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardTextNode()->IIOMetadataNode::: image metadata get standard text node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getStandardTransparencyNode()->IIOMetadataNode::: image metadata get standard transparency node
com.sun.imageio.plugins.tiff.TIFFImageMetadata#parseIFD(Node)->TIFFIFD::: image metadata parse d
com.sun.imageio.plugins.tiff.TIFFImageMetadata#mergeTree(String, Node)->void::: image metadata merge tree
com.sun.imageio.plugins.tiff.TIFFImageMetadata#reset()->void::: image metadata reset
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getRootIFD()->TIFFIFD::: image metadata get root d
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getTIFFField(int)->TIFFField::: image metadata get field
com.sun.imageio.plugins.tiff.TIFFImageMetadata#removeTIFFField(int)->void::: image metadata remove field
com.sun.imageio.plugins.tiff.TIFFImageMetadata#getShallowClone()->TIFFImageMetadata:::Returns a TIFFImageMetadata wherein all fields in the root IFD from the BaselineTIFFTagSet are copied by value and all other fields copied by reference.
com.sun.imageio.plugins.tiff.TIFFImageMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: image metadata format can node appear
com.sun.imageio.plugins.tiff.TIFFImageMetadataFormat#getInstance()->IIOMetadataFormat::: image metadata format get instance
com.sun.imageio.plugins.tiff.TIFFImageMetadataFormatResources#getContents()->Object[][]::: image metadata format resources get contents
com.sun.imageio.plugins.tiff.TIFFImageReader#setInput(Object, boolean, boolean)->void::: image reader set input
com.sun.imageio.plugins.tiff.TIFFImageReader#getNumImages(boolean)->int::: image reader get num images
com.sun.imageio.plugins.tiff.TIFFImageReader#getStreamMetadata()->IIOMetadata::: image reader get stream metadata
com.sun.imageio.plugins.tiff.TIFFImageReader#getWidth(int)->int::: image reader get width
com.sun.imageio.plugins.tiff.TIFFImageReader#getHeight(int)->int::: image reader get height
com.sun.imageio.plugins.tiff.TIFFImageReader#getImageTypes(int)->Iterator::: image reader get image types
com.sun.imageio.plugins.tiff.TIFFImageReader#getImageMetadata(int)->IIOMetadata::: image reader get image metadata
com.sun.imageio.plugins.tiff.TIFFImageReader#getStreamMetadata(int)->IIOMetadata::: image reader get stream metadata
com.sun.imageio.plugins.tiff.TIFFImageReader#isRandomAccessEasy(int)->boolean::: image reader is random access easy
com.sun.imageio.plugins.tiff.TIFFImageReader#readSupportsThumbnails()->boolean::: image reader read supports thumbnails
com.sun.imageio.plugins.tiff.TIFFImageReader#hasThumbnails(int)->boolean::: image reader has thumbnails
com.sun.imageio.plugins.tiff.TIFFImageReader#getNumThumbnails(int)->int::: image reader get num thumbnails
com.sun.imageio.plugins.tiff.TIFFImageReader#getDefaultReadParam()->ImageReadParam::: image reader get default read param
com.sun.imageio.plugins.tiff.TIFFImageReader#isImageTiled(int)->boolean::: image reader is image tiled
com.sun.imageio.plugins.tiff.TIFFImageReader#getTileWidth(int)->int::: image reader get tile width
com.sun.imageio.plugins.tiff.TIFFImageReader#getTileHeight(int)->int::: image reader get tile height
com.sun.imageio.plugins.tiff.TIFFImageReader#readTile(int, int, int)->BufferedImage::: image reader read tile
com.sun.imageio.plugins.tiff.TIFFImageReader#canReadRaster()->boolean::: image reader can read raster
com.sun.imageio.plugins.tiff.TIFFImageReader#readRaster(int, ImageReadParam)->Raster::: image reader read raster
com.sun.imageio.plugins.tiff.TIFFImageReader#readAsRenderedImage(int, ImageReadParam)->RenderedImage::: image reader read as rendered image
com.sun.imageio.plugins.tiff.TIFFImageReader#read(int, ImageReadParam)->BufferedImage::: image reader read
com.sun.imageio.plugins.tiff.TIFFImageReader#reset()->void::: image reader reset
com.sun.imageio.plugins.tiff.TIFFImageReader#resetLocal()->void::: image reader reset local
com.sun.imageio.plugins.tiff.TIFFImageReader#forwardWarningMessage(String)->void:::Package scope method to allow decompressors, for example, to emit warning messages.
com.sun.imageio.plugins.tiff.TIFFImageReaderSpi#getDescription(Locale)->String::: image reader spi get description
com.sun.imageio.plugins.tiff.TIFFImageReaderSpi#canDecodeInput(Object)->boolean::: image reader spi can decode input
com.sun.imageio.plugins.tiff.TIFFImageReaderSpi#createReaderInstance(Object)->ImageReader::: image reader spi create reader instance
com.sun.imageio.plugins.tiff.TIFFImageReaderSpi#onRegistration(ServiceRegistry, Class)->void::: image reader spi on registration
com.sun.imageio.plugins.tiff.TIFFImageWriter#XToTileX(int, int, int)->int:::Converts a pixel's X coordinate into a horizontal tile index relative to a given tile grid layout specified by its X offset and tile width
com.sun.imageio.plugins.tiff.TIFFImageWriter#YToTileY(int, int, int)->int:::Converts a pixel's Y coordinate into a vertical tile index relative to a given tile grid layout specified by its Y offset and tile height
com.sun.imageio.plugins.tiff.TIFFImageWriter#getDefaultWriteParam()->ImageWriteParam::: image writer get default write param
com.sun.imageio.plugins.tiff.TIFFImageWriter#setOutput(Object)->void::: image writer set output
com.sun.imageio.plugins.tiff.TIFFImageWriter#getDefaultStreamMetadata(ImageWriteParam)->IIOMetadata::: image writer get default stream metadata
com.sun.imageio.plugins.tiff.TIFFImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer get default image metadata
com.sun.imageio.plugins.tiff.TIFFImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata::: image writer convert stream metadata
com.sun.imageio.plugins.tiff.TIFFImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer convert image metadata
com.sun.imageio.plugins.tiff.TIFFImageWriter#setupMetadata(ColorModel, SampleModel, int, int)->void:::Sets up the output metadata adding, removing, and overriding fields as needed
com.sun.imageio.plugins.tiff.TIFFImageWriter#getImageType()->ImageTypeSpecifier::: image writer get image type
com.sun.imageio.plugins.tiff.TIFFImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)->void::: image writer write
com.sun.imageio.plugins.tiff.TIFFImageWriter#canWriteSequence()->boolean::: image writer can write sequence
com.sun.imageio.plugins.tiff.TIFFImageWriter#prepareWriteSequence(IIOMetadata)->void::: image writer prepare write sequence
com.sun.imageio.plugins.tiff.TIFFImageWriter#writeToSequence(IIOImage, ImageWriteParam)->void::: image writer write to sequence
com.sun.imageio.plugins.tiff.TIFFImageWriter#endWriteSequence()->void::: image writer end write sequence
com.sun.imageio.plugins.tiff.TIFFImageWriter#canInsertImage(int)->boolean::: image writer can insert image
com.sun.imageio.plugins.tiff.TIFFImageWriter#writeInsert(int, IIOImage, ImageWriteParam)->void::: image writer write insert
com.sun.imageio.plugins.tiff.TIFFImageWriter#canInsertEmpty(int)->boolean::: image writer can insert empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#canWriteEmpty()->boolean::: image writer can write empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#prepareInsertEmpty(int, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)->void::: image writer prepare insert empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#prepareWriteEmpty(IIOMetadata, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)->void::: image writer prepare write empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#endInsertEmpty()->void::: image writer end insert empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#endWriteEmpty()->void::: image writer end write empty
com.sun.imageio.plugins.tiff.TIFFImageWriter#canReplacePixels(int)->boolean::: image writer can replace pixels
com.sun.imageio.plugins.tiff.TIFFImageWriter#prepareReplacePixels(int, Rectangle)->void::: image writer prepare replace pixels
com.sun.imageio.plugins.tiff.TIFFImageWriter#replacePixels(RenderedImage, ImageWriteParam)->void::: image writer replace pixels
com.sun.imageio.plugins.tiff.TIFFImageWriter#replacePixels(Raster, ImageWriteParam)->void::: image writer replace pixels
com.sun.imageio.plugins.tiff.TIFFImageWriter#endReplacePixels()->void::: image writer end replace pixels
com.sun.imageio.plugins.tiff.TIFFImageWriter#reset()->void::: image writer reset
com.sun.imageio.plugins.tiff.EmptyImage#getTile(int, int)->Raster::: empty image get tile
com.sun.imageio.plugins.tiff.TIFFImageWriterSpi#canEncodeImage(ImageTypeSpecifier)->boolean::: image writer spi can encode image
com.sun.imageio.plugins.tiff.TIFFImageWriterSpi#getDescription(Locale)->String::: image writer spi get description
com.sun.imageio.plugins.tiff.TIFFImageWriterSpi#createWriterInstance(Object)->ImageWriter::: image writer spi create writer instance
com.sun.imageio.plugins.tiff.TIFFImageWriterSpi#onRegistration(ServiceRegistry, Class)->void::: image writer spi on registration
com.sun.imageio.plugins.tiff.TIFFJPEGCompressor#setMetadata(IIOMetadata)->void:::Sets the value of the metadata field
com.sun.imageio.plugins.tiff.TIFFJPEGDecompressor#beginDecoding()->void::: decompressor begin decoding
com.sun.imageio.plugins.tiff.TIFFJPEGDecompressor#decodeRaw(byte[], int, int, int)->void::: decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFJPEGDecompressor#finalize()->void::: decompressor finalize
com.sun.imageio.plugins.tiff.TIFFLSBCompressor#encode(byte[], int, int, int, int[], int)->int::: compressor encode
com.sun.imageio.plugins.tiff.TIFFLSBDecompressor#decodeRaw(byte[], int, int, int)->void::: decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFLZWCompressor#setStream(ImageOutputStream)->void::: compressor set stream
com.sun.imageio.plugins.tiff.TIFFLZWCompressor#encode(byte[], int, int, int, int[], int)->int::: compressor encode
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#decodeRaw(byte[], int, int, int)->void::: decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#decode(byte[], int, byte[], int)->int::: decompressor decode
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#initializeStringTable()->void:::Initialize the string table.
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#writeString(byte[])->void:::Write out the string just uncompressed.
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#addStringToTable(byte[], byte)->void:::Add a new string to the string table.
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#addStringToTable(byte[])->void:::Add a new string to the string table.
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#composeString(byte[], byte)->byte[]:::Append newString to the end of oldString.
com.sun.imageio.plugins.tiff.TIFFLZWDecompressor#getNextCode()->int::: decompressor get next code
com.sun.imageio.plugins.tiff.TIFFLZWUtil#decode(byte[], int, int, int, int)->byte[]::: util decode
com.sun.imageio.plugins.tiff.TIFFLZWUtil#initializeStringTable()->void:::Initialize the string table.
com.sun.imageio.plugins.tiff.TIFFLZWUtil#writeString(byte[])->void:::Write out the string just uncompressed.
com.sun.imageio.plugins.tiff.TIFFLZWUtil#addStringToTable(byte[], byte)->void:::Add a new string to the string table.
com.sun.imageio.plugins.tiff.TIFFLZWUtil#addStringToTable(byte[])->void:::Add a new string to the string table.
com.sun.imageio.plugins.tiff.TIFFLZWUtil#composeString(byte[], byte)->byte[]:::Append newString to the end of oldString.
com.sun.imageio.plugins.tiff.TIFFLZWUtil#getNextCode()->int::: util get next code
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getRootName()->String::: metadata format get root name
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getElementMinChildren(String)->int::: metadata format get element min children
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getElementMaxChildren(String)->int::: metadata format get element max children
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getElementDescription(String, Locale)->String::: metadata format get element description
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getChildPolicy(String)->int::: metadata format get child policy
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getChildNames(String)->String[]::: metadata format get child names
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeNames(String)->String[]::: metadata format get attribute names
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeValueType(String, String)->int::: metadata format get attribute value type
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeDataType(String, String)->int::: metadata format get attribute data type
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#isAttributeRequired(String, String)->boolean::: metadata format is attribute required
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeDefaultValue(String, String)->String::: metadata format get attribute default value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeEnumerations(String, String)->String[]::: metadata format get attribute enumerations
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeMinValue(String, String)->String::: metadata format get attribute min value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeMaxValue(String, String)->String::: metadata format get attribute max value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeListMinLength(String, String)->int::: metadata format get attribute list min length
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeListMaxLength(String, String)->int::: metadata format get attribute list max length
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getAttributeDescription(String, String, Locale)->String::: metadata format get attribute description
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectValueType(String)->int::: metadata format get object value type
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectClass(String)->Class::: metadata format get object class
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectDefaultValue(String)->Object::: metadata format get object default value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectEnumerations(String)->Object[]::: metadata format get object enumerations
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectMinValue(String)->Comparable::: metadata format get object min value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectMaxValue(String)->Comparable::: metadata format get object max value
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectArrayMinLength(String)->int::: metadata format get object array min length
com.sun.imageio.plugins.tiff.TIFFMetadataFormat#getObjectArrayMaxLength(String)->int::: metadata format get object array max length
com.sun.imageio.plugins.tiff.TIFFNullCompressor#encode(byte[], int, int, int, int[], int)->int::: null compressor encode
com.sun.imageio.plugins.tiff.TIFFNullDecompressor#beginDecoding()->void::: null decompressor begin decoding
com.sun.imageio.plugins.tiff.TIFFNullDecompressor#decode()->void::: null decompressor decode
com.sun.imageio.plugins.tiff.TIFFNullDecompressor#decodeRaw(byte[], int, int, int)->void::: null decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFOldJPEGDecompressor#decodeRaw(byte[], int, int, int)->void::: old decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFOldJPEGDecompressor#finalize()->void::: old decompressor finalize
com.sun.imageio.plugins.tiff.TIFFPackBitsCompressor#encode(byte[], int, int, int, int[], int)->int::: pack bits compressor encode
com.sun.imageio.plugins.tiff.TIFFPackBitsDecompressor#decode(byte[], int, byte[], int)->int::: pack bits decompressor decode
com.sun.imageio.plugins.tiff.TIFFPackBitsDecompressor#decodeRaw(byte[], int, int, int)->void::: pack bits decompressor decode raw
com.sun.imageio.plugins.tiff.TIFFPackBitsUtil#decode(byte[])->byte[]::: pack bits util decode
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getSources()->Vector::: rendered image get sources
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getProperty(String)->Object::: rendered image get property
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getPropertyNames()->String[]::: rendered image get property names
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getColorModel()->ColorModel::: rendered image get color model
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getSampleModel()->SampleModel::: rendered image get sample model
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getWidth()->int::: rendered image get width
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getHeight()->int::: rendered image get height
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getMinX()->int::: rendered image get min x
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getMinY()->int::: rendered image get min y
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getNumXTiles()->int::: rendered image get num tiles
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getNumYTiles()->int::: rendered image get num tiles
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getMinTileX()->int::: rendered image get min tile x
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getMinTileY()->int::: rendered image get min tile y
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getTileWidth()->int::: rendered image get tile width
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getTileHeight()->int::: rendered image get tile height
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getTileGridXOffset()->int::: rendered image get tile grid offset
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getTileGridYOffset()->int::: rendered image get tile grid offset
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getTile(int, int)->Raster::: rendered image get tile
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getData()->Raster::: rendered image get data
com.sun.imageio.plugins.tiff.TIFFRenderedImage#getData(Rectangle)->Raster::: rendered image get data
com.sun.imageio.plugins.tiff.TIFFRenderedImage#read(Rectangle)->WritableRaster::: rendered image read
com.sun.imageio.plugins.tiff.TIFFRenderedImage#copyData(WritableRaster)->WritableRaster::: rendered image copy data
com.sun.imageio.plugins.tiff.TIFFRLECompressor#encodeRLE(byte[], int, int, int, byte[])->int:::Encode a row of data using Modified Huffman Compression also known as CCITT RLE (Run Lenth Encoding).
com.sun.imageio.plugins.tiff.TIFFRLECompressor#encode(byte[], int, int, int, int[], int)->int::: compressor encode
com.sun.imageio.plugins.tiff.TIFFStreamMetadata#isReadOnly()->boolean::: stream metadata is read only
com.sun.imageio.plugins.tiff.TIFFStreamMetadata#getAsTree(String)->Node::: stream metadata get as tree
com.sun.imageio.plugins.tiff.TIFFStreamMetadata#mergeTree(String, Node)->void::: stream metadata merge tree
com.sun.imageio.plugins.tiff.TIFFStreamMetadata#reset()->void::: stream metadata reset
com.sun.imageio.plugins.tiff.TIFFStreamMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: stream metadata format can node appear
com.sun.imageio.plugins.tiff.TIFFStreamMetadataFormat#getInstance()->IIOMetadataFormat::: stream metadata format get instance
com.sun.imageio.plugins.tiff.TIFFStreamMetadataFormatResources#getContents()->Object[][]::: stream metadata format resources get contents
com.sun.imageio.plugins.tiff.TIFFT4Compressor#setMetadata(IIOMetadata)->void:::Sets the value of the metadata field
com.sun.imageio.plugins.tiff.TIFFT4Compressor#encodeT4(boolean, boolean, byte[], int, int, int, int, byte[])->int:::Encode a buffer of data using CCITT T.4 Compression also known as Group 3 facsimile compression.
com.sun.imageio.plugins.tiff.TIFFT4Compressor#encode(byte[], int, int, int, int[], int)->int::: t4 compressor encode
com.sun.imageio.plugins.tiff.TIFFT6Compressor#encodeT6(byte[], int, int, int, int, byte[])->int:::Encode a buffer of data using CCITT T.6 Compression also known as Group 4 facsimile compression.
com.sun.imageio.plugins.tiff.TIFFT6Compressor#encode(byte[], int, int, int, int[], int)->int::: t6 compressor encode
com.sun.imageio.plugins.tiff.TIFFYCbCrColorConverter#fromRGB(float, float, float, float[])->void::: cb cr color converter from b
com.sun.imageio.plugins.tiff.TIFFYCbCrColorConverter#toRGB(float, float, float, float[])->void::: cb cr color converter to b
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setReader(ImageReader)->void::: cb cr decompressor set reader
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setMetadata(IIOMetadata)->void::: cb cr decompressor set metadata
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setPhotometricInterpretation(int)->void::: cb cr decompressor set photometric interpretation
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setCompression(int)->void::: cb cr decompressor set compression
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setPlanar(boolean)->void::: cb cr decompressor set planar
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSamplesPerPixel(int)->void::: cb cr decompressor set samples per pixel
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setBitsPerSample(int[])->void::: cb cr decompressor set bits per sample
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSampleFormat(int[])->void::: cb cr decompressor set sample format
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setExtraSamples(int[])->void::: cb cr decompressor set extra samples
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setColorMap(char[])->void::: cb cr decompressor set color map
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setStream(ImageInputStream)->void::: cb cr decompressor set stream
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setOffset(long)->void::: cb cr decompressor set offset
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setByteCount(int)->void::: cb cr decompressor set byte count
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSrcMinX(int)->void::: cb cr decompressor set src min x
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSrcMinY(int)->void::: cb cr decompressor set src min y
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSrcWidth(int)->void::: cb cr decompressor set src width
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSrcHeight(int)->void::: cb cr decompressor set src height
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSourceXOffset(int)->void::: cb cr decompressor set source offset
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstXOffset(int)->void::: cb cr decompressor set dst offset
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSourceYOffset(int)->void::: cb cr decompressor set source offset
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstYOffset(int)->void::: cb cr decompressor set dst offset
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setSourceBands(int[])->void::: cb cr decompressor set source bands
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDestinationBands(int[])->void::: cb cr decompressor set destination bands
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setImage(BufferedImage)->void::: cb cr decompressor set image
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstMinX(int)->void::: cb cr decompressor set dst min x
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstMinY(int)->void::: cb cr decompressor set dst min y
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstWidth(int)->void::: cb cr decompressor set dst width
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setDstHeight(int)->void::: cb cr decompressor set dst height
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setActiveSrcMinX(int)->void::: cb cr decompressor set active src min x
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setActiveSrcMinY(int)->void::: cb cr decompressor set active src min y
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setActiveSrcWidth(int)->void::: cb cr decompressor set active src width
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#setActiveSrcHeight(int)->void::: cb cr decompressor set active src height
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#beginDecoding()->void::: cb cr decompressor begin decoding
com.sun.imageio.plugins.tiff.TIFFYCbCrDecompressor#decodeRaw(byte[], int, int, int)->void::: cb cr decompressor decode raw

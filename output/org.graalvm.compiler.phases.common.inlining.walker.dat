CallsiteHolder#method():::Gets the method associated with the #graph() graph represented by this object.:::
CallsiteHolder#hasRemainingInvokes():::The stack realized by InliningData grows upon InliningData#moveForward() deciding to explore (depth-first) a callsite of the graph associated to this CallsiteHolder:::
CallsiteHolder#graph():::The graph about which this object contains inlining information.:::
CallsiteHolderExplorable#getFixedParams()::: Parameters for which the callsite targeting #graph() provides "fixed" arguments:::return
ComputeInliningRelevance#compute():::Initializes or updates the relevance computation:::if->graph->hasLoops->graph->start->new->Scope->else->if->EconomicMap->InliningUtil->getNodeCount->create->workList->graph->createNodeWorkList->loops->EconomicMap->create->topScope->graph->start->new->Scope->foreach->graph->getNodes->createLoopScope->topScope->process->foreach->loops->getValues->scope->process
InliningData#freshlyInstantiatedArguments(Invoke, EconomicSet):::Gets the freshly instantiated arguments:::result->argIdx->foreach->invoke->callTarget->arguments->if->isFreshInstantiation->fixedParams->contains->if->new->BitSet->result->set->return
InliningData#getInvocationStackTrace():::Gets a stack trace representing the current inlining stack represented by this object.:::result->new->ArrayList<>->foreach->result->graph->method->asStackTraceElement->add->return
InliningData#moveForward()::: The stack realized by InliningData grows and shrinks as choices are made among the alternatives below: <ol> <li>not worth inlining: pop stack top, which comprises: <ul> <li>pop any remaining graphs not yet delved into</li> <li>pop the current invocation</li> </ul> </li> <li>#processNextInvoke() delve into one of the callsites hosted in the current graph, such callsite is explored next by #moveForward()</li> <li>#tryToInline(MethodInvocation, int) try to inline: move past the current graph (remove it from the topmost element):::currentInvocation->currentInvocation->backtrack->currentInvocation->isRoot->inliningPolicy->context->getReplacements->currentInvocation->callee->inliningDepth->isWorthInlining->shouldInline->if->remainingGraphs->currentInvocation->totalGraphs->currentInvocation->processedGraphs->popGraphs->popInvocation->return->delve->currentGraph->hasRemainingInvokes->inliningPolicy->currentGraph->graph->continueInlining->if->processNextInvoke->return->popGraph->if->currentInvocation->isRoot->return->currentInvocation->incrementProcessedGraphs->if->currentInvocation->processedGraphs->currentInvocation->totalGraphs->popInvocation->try->s->debug->inliningContext->scope->if->inliningDepth->tryToInline->return->currentGraph->graph->return->catch->throw->debug->handle->finally->return
InliningData#repOK():::This method checks invariants for this class:::return

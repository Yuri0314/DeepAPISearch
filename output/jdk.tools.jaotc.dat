AOTBackend#getGraphBuilderSuite()::: backend get graph builder suite:::return
AOTBackend#getBackend()::: backend get backend:::return
AOTBackend#getProviders()::: backend get providers:::return
AOTBackend#getSuites()::: backend get suites:::return->backend->getSuites->getDefaultSuites
AOTBackend#getLirSuites()::: backend get lir suites:::return->backend->getSuites->getDefaultLIRSuites
AOTBackend#compileMethod(ResolvedJavaMethod, DebugContext)::: backend compile method:::graph->buildStructuredGraph->if->return->compileGraph->return
AOTBackend#buildStructuredGraph(ResolvedJavaMethod, DebugContext):::Build a structured graph for the member.:::try->s->debug->scope->graph->new->StructuredGraph.Builder->method->useProfilingInfo->build->graphBuilderSuite->apply->return->catch->main->handleError->finally->return
AOTBackend#compileGraph(ResolvedJavaMethod, StructuredGraph, DebugContext)::: backend compile graph:::try->s->debug->scope->profilingInfo->DefaultProfilingInfo->get->isImmutablePIC->id->new->CompilationIdentifier->compilationResult->new->CompilationResult->return->GraalCompiler->getSuites->getLirSuites->compileGraph->catch->main->handleError->finally->return
AOTBackend#initGraphBuilderSuite(HotSpotBackend, boolean, HotSpotInvokeDynamicPlugin)::: backend init graph builder suite:::graphBuilderSuite->backend->getSuites->getDefaultGraphBuilderSuite->copy->iterator->graphBuilderSuite->findPhase->baseConfig->iterator->previous->getGraphBuilderConfig->plugins->baseConfig->getPlugins->plugins->setInvokeDynamicPlugin->aotConfig->GraphBuilderConfiguration->getDefault->withEagerResolving->withOmitAssertions->iterator->next->iterator->remove->iterator->new->GraphBuilderPhase->add->return
AOTBackend#printCompiledMethod(HotSpotResolvedJavaMethod, CompilationResult)::: backend print compiled method:::installedCode->codeCache->HotSpotCompiledCodeBuilder->createCompiledCode->addCode->disassembly->codeCache->disassemble->if->printlnDebug
AOTCompilationTask#run():::Compile a method or a constructor.:::HotSpotJVMCIRuntime->runtime->AOTCompiler->JavaMethodInfo->uniqueMethodName->logCompilation->threadId->Thread->currentThread->getId->printCompilation->getValue->TTY->isSuppressed->GraalServices->isThreadAllocatedMemorySupported->if->TTY->getMethodDescription->println->start->allocatedBytesBefore->if->System->currentTimeMillis->GraalServices->getThreadAllocatedBytes->else->compResult->startTime->System->currentTimeMillis->snippetReflection->aotBackend->getProviders->getSnippetReflection->try->debug->DebugContext->new->GraalDebugHandlersFactory->create->a->debug->activate->aotBackend->compileMethod->catch->finally->endTime->System->currentTimeMillis->if->stop->System->currentTimeMillis->targetCodeSize->compResult->getTargetCodeSize->allocatedBytesAfter->GraalServices->getThreadAllocatedBytes->allocatedBytes->TTY->getMethodDescription->String->format->println->if->return->LogPrinter->toSeconds->writeLog->if->aotBackend->printCompiledMethod->aotBackend->getBackend->new->AOTHotSpotResolvedJavaMethod->new->CompiledMethodInfo
AOTCompilationTask#getMethodDescription()::: compilation task get method description:::return->String->getId->JavaMethodInfo->uniqueMethodName->getEntryBCI->getEntryBCI->format
AOTCompilationTask#getId()::: compilation task get id:::return
AOTCompilationTask#getEntryBCI()::: compilation task get entry i:::return
AOTCompilationTask#getMethod()::: compilation task get method:::return
AOTCompilationTask#getHolder():::Returns the holder of this method as a AOTCompiledClass.:::return
AOTCompilationTask#getResult():::Returns the result of this compilation task.:::return
AOTCompilationTask#compareTo(Object)::: compilation task compare to:::other->return
AOTCompilationTask#equals(Object)::: compilation task equals:::if->return->if->return->if->getClass->obj->getClass->return->other->return
AOTCompilationTask#hashCode()::: compilation task hash code:::return
AOTCompiledClass#setDynamicTypeStore(AOTDynamicTypeStore)::: compiled class set dynamic type store:::
AOTCompiledClass.AOTKlassData#getMetaspaceNames()::: klass data get metaspace names:::name->locs->dynoStore->getDynamicClassLocationsForType->if->return->new->StringArr->else->names->new->ArrayList<>->names->add->foreach->cpType->l->getHolder->data->getAOTKlassData->if->continue->cpi->l->getCpi->location->if->names->add->a->names->a->getMethodId->add->else->names->add->return->names->names->size->new->StringArr->toArray
AOTCompiledClass.AOTKlassData#getType()::: klass data get type:::return
AOTCompiledClass.AOTKlassData#getMetadataName()::: klass data get metadata name:::return
AOTCompiledClass.AOTKlassData#addDependentMethod(CompiledMethodInfo):::Add a method to the list of dependent methods.:::return->dependentMethods->add
AOTCompiledClass.AOTKlassData#getDependentMethods():::Return the array list of dependent class methods.:::return
AOTCompiledClass.AOTKlassData#hasDependentMethods():::Returns if this class has dependent methods.:::return->dependentMethods->isEmpty
AOTCompiledClass.AOTKlassData#setCompiledMethodsOffset(int)::: klass data set compiled methods offset:::
AOTCompiledClass.AOTKlassData#putAOTKlassData(BinaryContainer, ReadOnlyDataContainer)::: klass data put klass data:::cntDepMethods->dependentMethods->size->dependenciesContainer->binaryContainer->getKlassesDependenciesContainer->BinaryContainer->addMethodsCount->foreach->dependenciesContainer->methodInfo->getCodeId->appendInt->verify->offset->container->getByteStreamSize->foreach->getMetaspaceNames->container->createSymbol->container->appendInt->appendInt->appendInt->appendInt->type->getFingerprint->appendLong
AOTCompiledClass.AOTKlassData#verify()::: klass data verify:::name->type->getName->fingerprint->type->getFingerprint
AOTCompiledClass#getResolvedJavaType()::: compiled class get resolved java type:::return
AOTCompiledClass#getMethods():::Get the list of methods which should be compiled.:::m->return
AOTCompiledClass#getClassesCount():::Get the number of all AOT classes.:::return
AOTCompiledClass#getMethodCount():::Get the number of methods which should be compiled.:::return->methods->size
AOTCompiledClass#addMethod(ResolvedJavaMethod):::Add a method to the list of methods to be compiled.:::methods->add
AOTCompiledClass#hasMethods():::Returns if this class has methods which should be compiled.:::return->methods->isEmpty
AOTCompiledClass#addCompiledMethod(CompiledMethodInfo):::Add a method to the list of compiled methods:::return->compiledMethods->add
AOTCompiledClass#getCompiledMethods():::Return the array list of compiled class methods.:::return
AOTCompiledClass#hasCompiledMethods():::Returns if this class has successfully compiled methods.:::return->compiledMethods->isEmpty
AOTCompiledClass#addAOTKlassData(BinaryContainer, HotSpotResolvedObjectType):::Add a klass data.:::data->getAOTKlassData->if->new->AOTKlassData->klassData->type->getName->put->return
AOTCompiledClass#getAOTKlassData(HotSpotResolvedObjectType)::: compiled class get klass data:::name->type->getName->data->klassData->get->if->oldType->data->getType->return
AOTCompiledClass#addAOTKlassData(BinaryContainer)::: compiled class add klass data:::foreach->methodInfo->addDependentKlassData->inlinees->methodInfo->getCompilationResult->getMethods->if->foreach->methodInfo->m->getDeclaringClass->addDependentKlassData->fields->methodInfo->getCompilationResult->getFields->if->foreach->methodInfo->f->getDeclaringClass->addDependentKlassData
AOTCompiledClass#addFingerprintKlassData(BinaryContainer, HotSpotResolvedObjectType)::: compiled class add fingerprint klass data:::if->type->isArray->return->addAOTKlassData->old->getAOTKlassData->if->if->areAssertionsEnabled->s->type->getSuperclass->if->foreach->type->getInterfaces->return->s->type->getSuperclass->if->addFingerprintKlassData->foreach->type->getInterfaces->addFingerprintKlassData->return->addAOTKlassData
AOTCompiledClass#areAssertionsEnabled()::: compiled class are assertions enabled:::assertsEnabled->return
AOTCompiledClass#putMethodsData(BinaryContainer)::: compiled class put methods data:::container->binaryContainer->getMethodsOffsetsContainer->cntMethods->compiledMethods->size->startMethods->BinaryContainer->addMethodsCount->foreach->methodInfo->addMethodOffsets->name->resolvedJavaType->getName->data->getAOTKlassData->cntDepMethods->size->data->setCompiledMethodsOffset
AOTCompiledClass#putAOTKlassData(BinaryContainer)::: compiled class put klass data:::dynoTypes->dynoStore->getDynamicTypes->if->foreach->addFingerprintKlassData->container->binaryContainer->getKlassesOffsetsContainer->foreach->klassData->values->data->putAOTKlassData
AOTCompiledClass#getType(Object)::: compiled class get type:::return->getDeclaringClass
AOTCompiledClass#metadataName(HotSpotResolvedObjectType)::: compiled class metadata name:::data->getAOTKlassData->return->getAOTKlassData->getMetadataName
AOTCompiledClass#metadataName(HotSpotResolvedJavaMethod)::: compiled class metadata name:::return->m->getDeclaringClass->metadataName->m->getName->m->getSignature->toMethodDescriptor
AOTCompiledClass#metadataName(Object)::: compiled class metadata name:::if->m->return->metadataName->else->type->return->metadataName
AOTCompiledClass#representsStubs()::: compiled class represents stubs:::return
AOTCompiledClass#clear()::: compiled class clear:::foreach->c->clear
AOTCompiler.CompileQueue#afterExecute(Runnable, Throwable)::: compile queue after execute:::task->if->task->getResult->count->successfulMethodCount->incrementAndGet->if->printInfo->result->task->getResult->if->task->getHolder->addCompiledMethod->else->failedMethodCount->incrementAndGet->printlnVerbose->method->task->getMethod->method->getName->method->getSignature->toMethodDescriptor->printlnVerbose
AOTCompiler.CompileQueue#terminated()::: compile queue terminated:::endTime->System->currentTimeMillis->success->successfulMethodCount->get->failed->failedMethodCount->get->printlnInfo->printlnInfo
AOTCompiler#compileClasses(List):::Compile all methods in all classes passed.:::compileQueue->getCorePoolSize->printlnInfo->printInfo->foreach->foreach->c->getMethods->enqueueMethod->compileQueue->shutdown->compileQueue->awaitTermination->compiledClasses->new->ArrayList<>->foreach->if->compiledClass->hasCompiledMethods->compiledClasses->add->return
AOTCompiler#enqueueMethod(AOTCompiledClass, ResolvedJavaMethod):::Enqueue a method in the #compileQueue.:::task->new->AOTCompilationTask->try->compileQueue->execute->catch->e->printStackTrace->finally
AOTCompiler#logCompilation(String, String)::: compiler log compilation:::LogPrinter->writeLog
AOTDynamicTypeStore.Location#getHolder()::: location get holder:::return
AOTDynamicTypeStore.Location#getCpi()::: location get cpi:::return
AOTDynamicTypeStore.Location#toString()::: location to string:::return->getHolder->getName
AOTDynamicTypeStore.Location#hashCode()::: location hash code:::return->holder->hashCode->getClass->hashCode
AOTDynamicTypeStore.Location#equals(Object)::: location equals:::if->return->if->getClass->o->getClass->return->l->return->holder->equals
AOTDynamicTypeStore.AdapterLocation#getMethodId()::: adapter location get method id:::return
AOTDynamicTypeStore.AdapterLocation#toString()::: adapter location to string:::return->super->toString
AOTDynamicTypeStore.AppendixLocation#toString()::: appendix location to string:::return->super->toString
AOTDynamicTypeStore#getDynamicTypes()::: dynamic type store get dynamic types:::synchronized->return->typeMap->keySet
AOTDynamicTypeStore#getDynamicHolders()::: dynamic type store get dynamic holders:::synchronized->return->holderMap->keySet
AOTDynamicTypeStore#recordAdapter(int, HotSpotResolvedObjectType, int, HotSpotResolvedJavaMethod)::: dynamic type store record adapter:::cpi->holder->getConstantPool->rawIndexToConstantPoolIndex->methodId->adapter->methodIdnum->adapterType->adapter->getDeclaringClass->new->AdapterLocation->recordDynamicTypeLocation
AOTDynamicTypeStore#recordAppendix(int, HotSpotResolvedObjectType, int, JavaConstant)::: dynamic type store record appendix:::cpi->holder->getConstantPool->rawIndexToConstantPoolIndex->appendixType->getType->new->AppendixLocation->recordDynamicTypeLocation->return->HotSpotConstantPoolObject->forObject
AOTDynamicTypeStore#recordDynamicMapValue(HashMap>, HotSpotResolvedObjectType, T)::: dynamic type store record dynamic map value:::synchronized->set->map->get->if->new->HashSet<>->map->put->set->add
AOTDynamicTypeStore#recordDynamicTypeLocation(Location, HotSpotResolvedObjectType)::: dynamic type store record dynamic type location:::recordDynamicMapValue->holder->l->getHolder->recordDynamicMapValue
AOTDynamicTypeStore#getDynamicClassLocationsForType(HotSpotResolvedObjectType)::: dynamic type store get dynamic class locations for type:::synchronized->return->typeMap->get
AOTDynamicTypeStore#getDynamicTypesForHolder(HotSpotResolvedObjectType)::: dynamic type store get dynamic types for holder:::synchronized->return->holderMap->get
AOTHotSpotResolvedJavaMethod#getSymbolName()::: hot spot resolved java method get symbol name:::return->JavaMethodInfo->uniqueMethodName
AOTHotSpotResolvedJavaMethod#getNameAndSignature()::: hot spot resolved java method get name and signature:::className->method->getDeclaringClass->getName->return->method->getName->method->getSignature->toMethodDescriptor
AOTHotSpotResolvedJavaMethod#compiledCode(CompilationResult)::: hot spot resolved java method compiled code:::return->HotSpotCompiledCodeBuilder->backend->getCodeCache->createCompiledCode
AOTStub#getSymbolName()::: stub get symbol name:::return->stub->toString
AOTStub#getNameAndSignature()::: stub get name and signature:::return->stub->toString
AOTStub#compiledCode(CompilationResult)::: stub compiled code:::return->HotSpotCompiledCodeBuilder->backend->getCodeCache->createCompiledCode
CallInfo#isStaticTarget(Call)::: call info is static target:::return->hasReceiver
CallInfo#isStaticOpcode(Call)::: call info is static opcode:::opcode->getByteCode->return
CallInfo#isStaticCall(Call)::: call info is static call:::if->isJavaCall->isStaticTarget->return->return
CallInfo#isSpecialCall(Call)::: call info is special call:::if->isJavaCall->return->getByteCode->return
CallInfo#isInvokeVirtual(Call)::: call info is invoke virtual:::if->isJavaCall->return->getByteCode->getByteCode->return
CallInfo#isVirtualCall(CompiledMethodInfo, Call)::: call info is virtual call:::return->isInvokeVirtual->methodInfo->hasMark->isStaticTarget
CallInfo#isOptVirtualCall(CompiledMethodInfo, Call)::: call info is opt virtual call:::return->isInvokeVirtual->methodInfo->hasMark
CallInfo#isJavaCall(Call)::: call info is java call:::if->return->bcpos->getBytecodePosition->method->bcpos->getMethod->if->bcpos->getBCI->return->if->return->return
CallInfo#getByteCode(Call)::: call info get byte code:::m->getBytecodePosition->getMethod->callPosition->getBytecodePosition->getBCI->code->m->getCode->return
CallSiteRelocationSymbol#createCodeContainerSymbol(BinaryContainer, String, int)::: call site relocation symbol create code container symbol:::return->binaryContainer->getCodeContainer->createSymbol
CallSiteRelocationSymbol#addCodeContainerRelocation(BinaryContainer, String, int, int)::: call site relocation symbol add code container relocation:::symbol->createCodeContainerSymbol->addExternalGotToPltRelocation
CallSiteRelocationSymbol#addExtLinkageGotContainerRelocation(BinaryContainer, String, int, int)::: call site relocation symbol add ext linkage got container relocation:::container->binaryContainer->getExtLinkageGOTContainer->symbol->container->createGotSymbol->addExternalPltToGotRelocation
CallSiteRelocationSymbol#addExternalGotToPltRelocation(BinaryContainer, Symbol, int):::Add an RelocType#EXTERNAL_GOT_TO_PLT relocation to the BinaryContainer#getExtLinkageGOTContainer().:::container->binaryContainer->getExtLinkageGOTContainer->relocation->new->Relocation->binaryContainer->addRelocation
CallSiteRelocationSymbol#addExternalPltToGotRelocation(BinaryContainer, Symbol, int):::Add an RelocType#EXTERNAL_PLT_TO_GOT relocation to the BinaryContainer#getCodeContainer().:::container->binaryContainer->getCodeContainer->relocation->new->Relocation->binaryContainer->addRelocation
CodeOffsets#buildFrom(List)::: code offsets build from:::entry->verifiedEntry->exceptionHandler->deoptHandler->foreach->if->markId->MarkId->getEnum->switch->break->break->break->break->break->break->return->new->CodeOffsets
CodeOffsets#entry()::: code offsets entry:::return
CodeOffsets#verifiedEntry()::: code offsets verified entry:::return
CodeOffsets#exceptionHandler()::: code offsets exception handler:::return
CodeOffsets#deoptHandler()::: code offsets deopt handler:::return
CodeSectionProcessor#process(AOTCompiledClass):::Method that looks at code section of a compiled result compClass and records function entry point symbols along with the text section contents:::compiledMethods->compClass->getCompiledMethods->foreach->compResult->methodInfo->getCompilationResult->targetCode->compResult->getTargetCode->targetCodeSize->compResult->getTargetCodeSize->compMethod->methodInfo->getMethodInfo->foreach->compResult->getInfopoints->if->callInfopoint->if->destOffset->entry->compMethod->getSymbolName->codeSection->binaryContainer->getCodeContainer->codeIdOffset->BinaryContainer->binaryContainer->getCodeSegmentSize->alignUp->methodInfo->setCodeId->binaryContainer->methodInfo->getCodeId->appendIntToCode->textBaseOffset->BinaryContainer->binaryContainer->getCodeEntryAlignment->alignUp->codeSection->createSymbol->methodInfo->setTextSectionOffset->binaryContainer->appendCodeBytes->currentStubOffset->BinaryContainer->alignUp->methodInfo->setStubsOffset->foreach->compResult->getInfopoints->if->callInfopoint->if->call->stub->CallInfo->isVirtualCall->addCallStub->targetSymbol->JavaMethodInfo->uniqueMethodName->methodInfo->addStubCode->stub->getSize->binaryContainer->addCodeSegments
CodeSectionProcessor#addCallStub(boolean)::: code section processor add call stub:::startOffset->binaryContainer->getCodeContainer->getByteStreamSize->stub->new->StubInformation->masm->ELFMacroAssembler->getELFMacroAssembler->code->if->masm->getPLTVirtualEntryCode->else->masm->getPLTStaticEntryCode->binaryContainer->appendCodeBytes->return
Collector#collectClassesToCompile()::: collector collect classes to compile:::classesToCompile->new->HashSet<>->fileSupport->new->FileSupport->lookup->new->ClassSearch->lookup->new->ModuleSourceProvider->addProvider->lookup->new->ClassNameSourceProvider->addProvider->lookup->new->JarSourceProvider->addProvider->lookup->new->DirectorySourceProvider->addProvider->foundClasses->try->lookup->this->handleLoadingError->search->catch->reportError->return->finally->foreach->classesToCompile->loadedClass->getLoadedClass->add->return
Collector#addMethods(AOTCompiledClass, ResolvedJavaMethod[], CompilationSpec)::: collector add methods:::foreach->addMethod
Collector#addMethod(AOTCompiledClass, ResolvedJavaMethod, CompilationSpec)::: collector add method:::if->method->hasBytecodes->return->if->compilationRestrictions->shouldCompileMethod->return->if->shouldCompileMethod->return->aotClass->addMethod->method->getName->method->getSignature->toMethodDescriptor->printlnVerbose
Collector#collectMethodsToCompile(Set>, MetaAccessProvider):::Collect all method we should compile.:::total->count->classes->new->ArrayList<>->compilationRestrictions->collectSpecifiedMethods->foreach->resolvedJavaType->metaAccess->lookupJavaType->if->shouldCompileAnyMethodInClass->aotClass->new->AOTCompiledClass->c->getName->printlnVerbose->try->ctors->resolvedJavaType->getDeclaredConstructors->addMethods->catch->c->getName->handleLoadingError->finally->try->methods->resolvedJavaType->getDeclaredMethods->addMethods->catch->c->getName->handleLoadingError->finally->try->clinit->resolvedJavaType->getClassInitializer->if->addMethod->catch->c->getName->handleLoadingError->finally->if->aotClass->hasMethods->classes->add->aotClass->getMethodCount->printInfo->return
Collector#collectSpecifiedMethods():::If a file with compilation limitations is specified using flag --compile-commands, read the file's contents and collect the restrictions.:::compilationRestrictions->new->CompilationSpec->methodListFileName->if->methodListFileName->equals->try->methListFile->new->FileReader->readBuf->new->BufferedReader->line->while->readBuf->readLine->trimmedLine->line->trim->if->trimmedLine->startsWith->components->trimmedLine->split->if->directive->pattern->switch->compilationRestrictions->addCompileOnlyPattern->break->compilationRestrictions->addExcludePattern->break->println->else->if->trimmedLine->equals->println->readBuf->close->catch->throw->new->InternalError->throw->new->InternalError->finally->return
Collector#handleLoadingError(String, Throwable)::: collector handle loading error:::if->printError->else->throw->new->InternalError
CompilationSpec#addCompileOnlyPattern(String):::Add a compileOnly directive to the compile-only list.:::if->pattern->contains->compileOnlyPatterns->Pattern->compile->add->else->compileOnlyStrings->add
CompilationSpec#addExcludePattern(String):::Add an exclude directive to the exclude list.:::if->pattern->contains->excludePatterns->Pattern->compile->add->else->excludeStrings->add
CompilationSpec#shouldCompileMethod(ResolvedJavaMethod):::Check if a given method is part of a restrictive compilation.:::if->compileWithRestrictions->compileMethod->compileOnlyStrings->isEmpty->compileOnlyPatterns->isEmpty->methodName->JavaMethodInfo->uniqueMethodName->if->compileOnlyStrings->contains->if->it->compileOnlyPatterns->iterator->while->it->hasNext->pattern->it->next->pattern->matcher->matches->if->excludeStrings->contains->if->it->excludePatterns->iterator->while->it->hasNext->pattern->it->next->pattern->matcher->matches->return->return
CompilationSpec#compileWithRestrictions():::Return true if compilation restrictions are specified.:::return->compileOnlyStrings->isEmpty->compileOnlyPatterns->isEmpty->excludeStrings->isEmpty->excludePatterns->isEmpty
CompiledMethodInfo.AOTMethodOffsets#addMethodOffsets(ReadOnlyDataContainer, String)::: method offsets add method offsets:::verify->container->appendInt->appendInt->appendInt->appendInt->appendInt->appendInt
CompiledMethodInfo.AOTMethodOffsets#verify(String)::: method offsets verify:::
CompiledMethodInfo.AOTMethodOffsets#setNameOffset(int)::: method offsets set name offset:::
CompiledMethodInfo.AOTMethodOffsets#setTextSectionOffset(int)::: method offsets set text section offset:::
CompiledMethodInfo.AOTMethodOffsets#getTextSectionOffset()::: method offsets get text section offset:::return
CompiledMethodInfo.AOTMethodOffsets#setCodeId(int)::: method offsets set code id:::
CompiledMethodInfo.AOTMethodOffsets#getCodeId()::: method offsets get code id:::return
CompiledMethodInfo.AOTMethodOffsets#setMetadataOffset(int)::: method offsets set metadata offset:::
CompiledMethodInfo.AOTMethodOffsets#setMetadataGotOffset(int)::: method offsets set metadata got offset:::
CompiledMethodInfo.AOTMethodOffsets#setMetadataGotSize(int)::: method offsets set metadata got size:::
CompiledMethodInfo#name()::: compiled method info name:::return
CompiledMethodInfo#addMethodOffsets(BinaryContainer, ReadOnlyDataContainer)::: compiled method info add method offsets:::binaryContainer->addMetaspaceName->setNameOffset->addMethodOffsets->foreach->data->addDependentMethod
CompiledMethodInfo#getCompilationResult()::: compiled method info get compilation result:::return
CompiledMethodInfo#getMethodInfo()::: compiled method info get method info:::return
CompiledMethodInfo#setTextSectionOffset(int)::: compiled method info set text section offset:::methodOffsets->setTextSectionOffset
CompiledMethodInfo#getTextSectionOffset()::: compiled method info get text section offset:::return->methodOffsets->getTextSectionOffset
CompiledMethodInfo#setCodeId()::: compiled method info set code id:::methodOffsets->CompiledMethodInfo->getNextCodeId->setCodeId
CompiledMethodInfo#getCodeId()::: compiled method info get code id:::return->getCodeId
CompiledMethodInfo#getMethodsCount()::: compiled method info get methods count:::return->methodsCount->get
CompiledMethodInfo#getNextCodeId()::: compiled method info get next code id:::return->methodsCount->getAndIncrement
CompiledMethodInfo#getCodeSize()::: compiled method info get code size:::return->getStubCodeSize
CompiledMethodInfo#getStubCodeSize()::: compiled method info get stub code size:::return
CompiledMethodInfo#setMetadataOffset(int)::: compiled method info set metadata offset:::setMetadataOffset
CompiledMethodInfo#setStubsOffset(int):::Offset into the code of this method where the stub section starts.:::
CompiledMethodInfo#getStubsOffset()::: compiled method info get stubs offset:::return
CompiledMethodInfo#setMetadataGotOffset(int)::: compiled method info set metadata got offset:::setMetadataGotOffset
CompiledMethodInfo#setMetadataGotSize(int)::: compiled method info set metadata got size:::setMetadataGotSize
CompiledMethodInfo#addStubCode(String, StubInformation)::: compiled method info add stub code:::stubs->put->stub->getSize
CompiledMethodInfo#getStubFor(String)::: compiled method info get stub for:::stub->stubs->get->stub->verify->return
CompiledMethodInfo#addDependentKlassData(BinaryContainer, HotSpotResolvedObjectType)::: compiled method info add dependent klass data:::klassData->AOTCompiledClass->addFingerprintKlassData->dependentKlasses->add
CompiledMethodInfo#getDependentKlassData(HotSpotResolvedObjectType)::: compiled method info get dependent klass data:::klassData->AOTCompiledClass->getAOTKlassData->if->dependentKlasses->contains->return->return
CompiledMethodInfo#hasMark(Site, MarkId)::: compiled method info has mark:::foreach->compilationResult->getMarks->adjOffset->if->archStr->equals->else->if->MarkId->getEnum->return->return
CompiledMethodInfo#asTag()::: compiled method info as tag:::return->methodInfo->getSymbolName
CompiledMethodInfo#compiledCode()::: compiled method info compiled code:::if->methodInfo->compiledCode->return
CompiledMethodInfo#clear()::: compiled method info clear:::
CompiledMethodInfo#clearCompileData()::: compiled method info clear compile data:::
DataBuilder#fillVMAddresses(HotSpotVMConfigStore):::Returns a value-name map of all VMField fields.:::foreach->config->getFields->values->if->address->value->if->vmAddresses->put->foreach->config->getAddresses->entrySet->address->vmAddress->getValue->value->vmAddress->getKey->old->vmAddresses->put->if->throw->new->InternalError
DataBuilder#getVMFunctionNameForAddress(long):::Get the C/C++ function name associated with the foreign call target address.:::return->vmAddresses->get
DataBuilder#getBackend():::Returns the host backend used for this compilation.:::return
DataBuilder#getBinaryContainer():::Returns the binary container for this compilation.:::return
DataBuilder#prepareData(DebugContext):::Prepare data with all compiled classes and stubs.:::try->t->new->Timer->codeSectionProcessor->new->CodeSectionProcessor->foreach->c->addAOTKlassData->codeSectionProcessor->process->catch->finally->stubCompiledCode->retrieveStubCode->try->t->new->Timer->printMemoryUsage->System->gc->catch->finally->metadataBuilder->try->t->new->Timer->new->MetadataBuilder->metadataBuilder->processMetadata->catch->finally->try->t->new->Timer->printMemoryUsage->System->gc->catch->finally->try->t->new->Timer->prepareStubsBinary->catch->finally->try->t->new->Timer->prepareCompiledBinary->catch->finally
DataBuilder#retrieveStubCode(DebugContext):::Get all stubs from Graal and add them to the code section.:::stubs->new->ArrayList<>->foreignCallsProvider->backend->getProviders->getForeignCalls->foreach->foreignCallsProvider->getStubs->try->scope->debug->scope->result->stub->getCompilationResult->cm->debug->getOptions->new->AOTStub->new->CompiledMethodInfo->stubs->add->catch->throw->debug->handle->finally->stubCompiledCode->new->AOTCompiledClass->codeSectionProcessor->new->CodeSectionProcessor->codeSectionProcessor->process->return
DataBuilder#prepareCompiledBinary():::Prepare metaspace.offsets section.:::foreach->c->putMethodsData->AOTCompiledClass->putAOTKlassData->header->binaryContainer->getHeaderContainer->header->AOTCompiledClass->getClassesCount->setClassesCount->header->CompiledMethodInfo->getMethodsCount->setMethodsCount->bc->binaryContainer->getKlassesGotContainer->header->bc->getByteStreamSize->setKlassesGotSize->binaryContainer->getMetadataGotContainer->header->bc->getByteStreamSize->setMetadataGotSize->binaryContainer->getOopGotContainer->header->bc->getByteStreamSize->setOopGotSize
DataBuilder#prepareStubsBinary(AOTCompiledClass):::Prepare stubs.offsets section.:::compiledStubs->compiledClass->getCompiledMethods->cntStubs->compiledStubs->size->BinaryContainer->binaryContainer->getStubsOffsetsContainer->addMethodsCount->foreach->methodInfo->binaryContainer->getStubsOffsetsContainer->addMethodOffsets
DataPatchProcessor#process(CompiledMethodInfo, DataPatch):::Process a DataPatch generated by the compiler and create all needed binary section constructs.:::reference->if->processConstantReference->else->if->processDataSectionReference->else->throw->new->InternalError
DataPatchProcessor#processConstantReference(DataPatch, CompiledMethodInfo)::: data patch processor process constant reference:::action->constantReference->constant->constantReference->getConstant->targetSymbol->gotName->if->metaspaceConstant->if->metaspaceConstant->asResolvedJavaType->type->metaspaceConstant->asResolvedJavaType->methodInfo->addDependentKlassData->AOTCompiledClass->metadataName->else->if->metaspaceConstant->asResolvedJavaMethod->JavaMethodInfo->metaspaceConstant->asResolvedJavaMethod->uniqueMethodName->binaryContainer->addCountersSymbol->else->if->jConstant->if->cpo->cpo->toValueString->offset->binaryContainer->addOopSymbol->else->if->oopConstant->oopConstant->toValueString->offset->binaryContainer->addOopSymbol->else->if->methodInfo->getCodeId->decoder->InstructionDecoder->getInstructionDecoder->decoder->methodInfo->getCompilationResult->getTargetCode->decodePosition->instructionEndOffset->decoder->currentEndOfInstruction->textBaseOffset->methodInfo->getTextSectionOffset->relocOffset->relocationSymbol->binaryContainer->getSymbol->reloc->binaryContainer->getCodeContainer->new->Relocation->binaryContainer->addRelocation
DataPatchProcessor#processDataSectionReference(DataPatch, CompiledMethodInfo)::: data patch processor process data section reference:::dataReference->decoder->InstructionDecoder->getInstructionDecoder->decoder->methodInfo->getCompilationResult->getTargetCode->decodePosition->instructionEndOffset->decoder->currentEndOfInstruction->textBaseOffset->methodInfo->getTextSectionOffset->relocOffset->dataOffset->dataReference->getOffset->dataSection->methodInfo->getCompilationResult->getDataSection->data->dataSection->findData->size->data->getSize->alignment->data->getAlignment->value->new->byteArr->buffer->ByteBuffer->wrap->ByteOrder->nativeOrder->order->DataSection->emit->targetSymbol->methodInfo->getCodeId->relocationSymbol->binaryContainer->getSymbol->if->symSize->Math->max->symAlig->Math->max->offsetInConstantDataSection->binaryContainer->addConstantData->binaryContainer->getConstantDataContainer->createSymbol->reloc->binaryContainer->getCodeContainer->new->Relocation->binaryContainer->addRelocation
ELFMacroAssembler#getELFMacroAssembler(TargetDescription)::: macro assembler get macro assembler:::architecture->if->return->new->AMD64ELFMacroAssembler->else->if->return->new->AArch64ELFMacroAssembler->else->throw->new->InternalError
ELFMacroAssembler#currentEndOfInstruction()::: macro assembler current end of instruction:::
ELFMacroAssembler#getPLTJumpCode()::: macro assembler get jump code:::
ELFMacroAssembler#getPLTStaticEntryCode(StubInformation)::: macro assembler get static entry code:::
ELFMacroAssembler#getPLTVirtualEntryCode(StubInformation)::: macro assembler get virtual entry code:::
ForeignCallSiteRelocationInfo#getTargetSymbol(Call, HotSpotForeignCallLinkage)::: foreign call site relocation info get target symbol:::foreignCallTargetAddress->callTarget->getAddress->functionName->DataBuilder->getVMFunctionNameForAddress->if->aotSymbol->BinaryContainer->getAOTSymbolForVMFunctionName->if->throw->new->InternalError->return->if->callTarget->isCompiledStub->return->callTarget->getSymbol->throw->new->InternalError
ForeignCallSiteRelocationInfo#getRelocType(HotSpotForeignCallLinkage)::: foreign call site relocation info get reloc type:::return->callTarget->isCompiledStub
ForeignGotCallSiteRelocationSymbol#createPltSymbol(DataBuilder, CompiledMethodInfo, Call, CallSiteRelocationInfo)::: foreign got call site relocation symbol create plt symbol:::binaryContainer->dataBuilder->getBinaryContainer->vmSymbolName->pltSymbolName->pltSymbol->binaryContainer->getSymbol->if->gotSymbolName->gotSymbol->binaryContainer->getGotSymbol->pltStartOffset->binaryContainer->getCodeContainer->getByteStreamSize->pltEndOffset->addPltJump->createCodeContainerSymbol->addExternalPltToGotRelocation->return
ForeignGotCallSiteRelocationSymbol#addPltJump(DataBuilder)::: foreign got call site relocation symbol add plt jump:::masm->ELFMacroAssembler->dataBuilder->getBackend->getTarget->getELFMacroAssembler->code->masm->getPLTJumpCode->size->masm->currentEndOfInstruction->dataBuilder->getBinaryContainer->appendCodeBytes->return
GraalFilters#shouldCompileMethod(ResolvedJavaMethod)::: graal filters should compile method:::if->hasExcludedAnnotation->return->declaringClass->method->getDeclaringClass->signatureTypes->Arrays->method->toParameterTypes->asList->stream->p->resolve->map->Collectors->toList->collect->signatureTypes->method->getSignature->getReturnType->resolve->add->if->signatureTypes->stream->specialArgumentAndReturnTypes->stream->s->isAssignableFrom->filter->flatMap->findAny->isPresent->return->return
GraalFilters#hasExcludedAnnotation(ResolvedJavaMethod)::: graal filters has excluded annotation:::foreach->method->getAnnotations->if->skipAnnotations->annotation->annotationType->contains->return->return
GraalFilters#shouldCompileAnyMethodInClass(ResolvedJavaType)::: graal filters should compile any method in class:::if->specialClasses->stream->s->isAssignableFrom->filter->findAny->isPresent->return->if->getConstantPool->hasDynamicConstant->return->return
GraalFilters#getSpecialClasses(MetaAccessProvider)::: graal filters get special classes:::return->Arrays->meta->lookupJavaType->meta->lookupJavaType->meta->lookupJavaType->meta->lookupJavaType->asList
GraalFilters#getSpecialArgumentAndReturnTypes(MetaAccessProvider)::: graal filters get special argument and return types:::return->Arrays->meta->lookupJavaType->meta->lookupJavaType->asList
GraalFilters#shouldIgnoreException(Throwable)::: graal filters should ignore exception:::if->m->e->getMessage->if->m->contains->return->if->cause->e->getCause->if->m->cause->getMessage->if->m->contains->m->contains->return->return
InfopointProcessor#process(CompiledMethodInfo, Infopoint):::Parse an Infopoint generated by the compiler and create all needed binary section constructs.:::switch->processCallInfoPoint->break->break->throw->new->InternalError->if->return->bcp->getBytecodePosition->if->return->getVirtualObjectMapping->recordScopeKlasses
InfopointProcessor#recordScopeKlasses(CompiledMethodInfo, BytecodePosition, VirtualObject[])::: infopoint processor record scope klasses:::caller->bcp->getCaller->if->recordScopeKlasses->m->bcp->getMethod->klass->m->getDeclaringClass->methodInfo->addDependentKlassData->if->return->foreach->vk->vo->getType->methodInfo->addDependentKlassData
InfopointProcessor#processCallInfoPoint(CompiledMethodInfo, Call):::Process Call info points in Graal generated compilation result:::callSiteRelocation->getCallSiteRelocationInfo->callSiteRelocationSymbol->getCallSiteRelocationSymbol->relocation->methodInfo->getTextSectionOffset->binaryContainer->getCodeContainer->new->Relocation->binaryContainer->addRelocation
InfopointProcessor#getCallSiteRelocationInfo(Call):::Get information about the call site:::callTarget->if->return->new->JavaCallSiteRelocationInfo->else->if->return->new->ForeignCallSiteRelocationInfo->else->throw->new->InternalError
InfopointProcessor#getCallSiteRelocationSymbol(CompiledMethodInfo, Call, CallSiteRelocationInfo):::Return a relocation symbol for the given call site.:::switch->return->new->StubDirectCallSiteRelocationSymbol->return->new->ForeignGotCallSiteRelocationSymbol->return->new->JavaCallSiteRelocationSymbol
InstructionDecoder#getInstructionDecoder(TargetDescription)::: instruction decoder get instruction decoder:::architecture->if->return->new->AMD64InstructionDecoder->else->if->return->new->AArch64InstructionDecoder->else->throw->new->InternalError
InstructionDecoder#decodePosition(byte[], int)::: instruction decoder decode position:::
InstructionDecoder#currentEndOfInstruction()::: instruction decoder current end of instruction:::
JavaCallSiteRelocationSymbol#relocationSymbolName(String, CompiledMethodInfo, Call, CallSiteRelocationInfo):::Returns a unique symbol name with the suffix appended.:::return->mi->getCodeId
JavaCallSiteRelocationSymbol#createPltEntrySymbol(BinaryContainer, CompiledMethodInfo, Call, CallSiteRelocationInfo)::: java call site relocation symbol create plt entry symbol:::symbolName->relocationSymbolName->stub->getStub->return->stub->getOffset->createCodeContainerSymbol
JavaCallSiteRelocationSymbol#getStub(CompiledMethodInfo, Call)::: java call site relocation symbol get stub:::callTarget->callTargetSymbol->JavaMethodInfo->uniqueMethodName->return->mi->getStubFor
JavaCallSiteRelocationSymbol#addRelocations(CompiledMethodInfo, StubInformation, BinaryContainer, Call, CallSiteRelocationInfo):::Add all the required relocations.:::isVirtualCall->CallInfo->isVirtualCall->gotStartOffset->binaryContainer->appendExtLinkageGotBytes->if->else->binaryContainer->appendExtLinkageGotBytes->gotSymbolName->getResolveSymbolName->gotSymbol->binaryContainer->getGotSymbol->stub->getResolveJumpOffset->addExternalPltToGotRelocation->pltJmpSymbolName->relocationSymbolName->stub->getResolveJumpStart->addCodeContainerRelocation->gotEntrySymbolName->relocationSymbolName->stub->getDispatchJumpOffset->addExtLinkageGotContainerRelocation->slot->gotMetaOffset->binaryContainer->appendExtLinkageGotBytes->gotMoveSymbolName->relocationSymbolName->stub->getMovOffset->addExtLinkageGotContainerRelocation->if->else->gotC2ISymbolName->relocationSymbolName->stub->getC2IJumpOffset->addExtLinkageGotContainerRelocation
JavaCallSiteRelocationSymbol#getResolveSymbolName(CompiledMethodInfo, Call):::Returns the name of the resolve method for this particular call.:::resolveSymbolName->if->CallInfo->isStaticCall->BinaryContainer->getResolveStaticEntrySymbolName->else->if->CallInfo->isSpecialCall->BinaryContainer->getResolveOptVirtualEntrySymbolName->else->if->CallInfo->isOptVirtualCall->BinaryContainer->getResolveOptVirtualEntrySymbolName->else->if->CallInfo->isVirtualCall->BinaryContainer->getResolveVirtualEntrySymbolName->else->throw->mi->asTag->new->InternalError->return
JavaMethodInfo#getSymbolName()::: java method info get symbol name:::
JavaMethodInfo#getNameAndSignature():::Name a java method with J.L.S:::
JavaMethodInfo#compiledCode(CompilationResult)::: java method info compiled code:::
JavaMethodInfo#uniqueMethodName(ResolvedJavaMethod):::Name a java method with class and signature to make it unique.:::className->method->getDeclaringClass->toClassName->name->method->getName->method->getSignature->toMethodDescriptor->return
Linker#objFile()::: linker obj file:::return
Linker#libFile()::: linker lib file:::return
Linker#getLines(InputStream)::: linker get lines:::return->new->InputStreamReader->new->BufferedReader->lines
Linker#getString(InputStream)::: linker get string:::lines->getLines->sb->new->StringBuilder->lines->iterator->sb->append->forEachRemaining->return->sb->toString
Linker#link()::: linker link:::p->Runtime->getRuntime->exec->exitCode->p->waitFor->if->errorMessage->p->getErrorStream->getString->if->errorMessage->isEmpty->p->getInputStream->getString->throw->new->InternalError->objFile->new->File->keepObjFile->Boolean->System->getProperty->parseBoolean->if->objFile->exists->if->objFile->delete->throw->new->InternalError->libFile->new->File->if->libFile->exists->startsWith->if->libFile->setExecutable->throw->new->InternalError
Linker#getWindowsLinkPath():::Search for Visual Studio link.exe Search Order is: VS2017+, VS2013, VS2015, VS2012.:::try->vc141NewerLinker->getVC141AndNewerLinker->if->return->vc141NewerLinker->toString->catch->e->printStackTrace->finally->link->foreach->VSVERSIONS->values->vspath->System->vs->getEnvVariable->getenv->if->commonTools->new->File->vsRoot->commonTools->getParentFile->getParentFile->linkPath->new->File->if->linkPath->exists->return->linkPath->getPath->foreach->VSVERSIONS->values->wkp->vs->getWellKnownPath->if->new->File->exists->return->return
Linker#getVC141AndNewerLinker()::: linker get c141 and newer linker:::programFilesX86->System->getenv->if->throw->new->InternalError->vswhere->Paths->get->if->Files->exists->return->processBuilder->vswhere->toString->new->ProcessBuilder->processBuilder->redirectOutput->processBuilder->redirectError->process->processBuilder->start->exitCode->process->waitFor->if->errorMessage->process->getErrorStream->getString->if->errorMessage->isEmpty->process->getInputStream->getString->throw->new->InternalError->installationPath->process->getInputStream->getLines->findFirst->new->InternalError->orElseThrow->vcToolsVersionFilePath->Paths->get->vcToolsVersionFileLines->Files->readAllLines->if->vcToolsVersionFileLines->isEmpty->throw->vcToolsVersionFilePath->toString->new->InternalError->vcToolsVersion->vcToolsVersionFileLines->get->linkPath->Paths->get->if->Files->exists->throw->linkPath->toString->new->InternalError->return
LoadedClass#getName()::: loaded class get name:::return
LoadedClass#getLoadedClass()::: loaded class get loaded class:::return
LoadedClass#toString()::: loaded class to string:::return
LoadedClass#equals(Object)::: loaded class equals:::if->return->if->return->that->if->name->equals->return->return->clz->equals
LoadedClass#hashCode()::: loaded class hash code:::result->name->hashCode->clz->hashCode->return
LogPrinter#printInfo(String)::: log printer print info:::if->log->print->log->flush
LogPrinter#printlnInfo(String)::: log printer println info:::if->log->println->log->flush
LogPrinter#printVerbose(String)::: log printer print verbose:::if->log->print->log->flush
LogPrinter#printlnVerbose(String)::: log printer println verbose:::if->log->println->log->flush
LogPrinter#printDebug(String)::: log printer print debug:::if->log->print->log->flush
LogPrinter#printlnDebug(String)::: log printer println debug:::if->log->println->log->flush
LogPrinter#printError(String)::: log printer print error:::log->println->log->flush
LogPrinter#reportError(Throwable)::: log printer report error:::log->e->getMessage->println->if->e->printStackTrace->log->flush
LogPrinter#reportError(String, Object...)::: log printer report error:::MessageFormat->format->printError
LogPrinter#humanReadableByteCount(long)::: log printer human readable byte count:::unit->if->return->exp->Math->log->Math->log->pre->charAt->return->String->Math->pow->format
LogPrinter#printMemoryUsage()::: log printer print memory usage:::if->memusage->ManagementFactory->getMemoryMXBean->getHeapMemoryUsage->freeratio->memusage->getUsed->memusage->getCommitted->log->memusage->getUsed->humanReadableByteCount->memusage->getCommitted->humanReadableByteCount->format
LogPrinter#printContainerInfo(ByteContainer)::: log printer print container info:::container->getContainerName->container->getByteStreamSize->printlnVerbose
LogPrinter#containersInfo(BinaryContainer)::: log printer containers info:::binaryContainer->getHeaderContainer->getContainer->printContainerInfo->binaryContainer->getConfigContainer->printContainerInfo->binaryContainer->getKlassesOffsetsContainer->printContainerInfo->binaryContainer->getMethodsOffsetsContainer->printContainerInfo->binaryContainer->getKlassesDependenciesContainer->printContainerInfo->binaryContainer->getStubsOffsetsContainer->printContainerInfo->binaryContainer->getMethodMetadataContainer->printContainerInfo->binaryContainer->getCodeContainer->printContainerInfo->binaryContainer->getCodeSegmentsContainer->printContainerInfo->binaryContainer->getConstantDataContainer->printContainerInfo->binaryContainer->getKlassesGotContainer->printContainerInfo->binaryContainer->getCountersGotContainer->printContainerInfo->binaryContainer->getMetadataGotContainer->printContainerInfo->binaryContainer->getMethodStateContainer->printContainerInfo->binaryContainer->getOopGotContainer->printContainerInfo->binaryContainer->getMetaspaceNamesContainer->printContainerInfo
LogPrinter#openLog()::: log printer open log:::v->Integer->getInteger->if->return->fileName->new->Date->getTime->logFilePath->Paths->get->logFileName->logFilePath->toString->try->new->FileWriter->catch->println->finally
LogPrinter#writeLog(String)::: log printer write log:::if->try->logFile->write->logFile->flush->catch->println->finally
LogPrinter#closeLog()::: log printer close log:::if->try->logFile->close->catch->finally
Main#main(String[])::: main main:::t->new->Main->exitCode->t->parse->run->System->exit
Main#parse(String[]):::Expands '@file' in command line arguments by replacing '@file' with the content of 'file' parsed by StringTokenizer:::result->new->ArrayList<>->foreach->if->arg->length->arg->charAt->v->arg->substring->if->v->charAt->result->add->else->try->file->Files->Paths->get->lines->file->StringTokenizer->new->map->Collections->list->map->l->stream->map->flatMap->result->add->forEachOrdered->catch->finally->else->result->add->return->result->String[]->new->toArray
Main#run(String[])::: main run:::new->PrintWriter->new->LogPrinter->try->Options->handleOptions->if->showHelp->return->if->showVersion->return->printer->printlnInfo->start->System->currentTimeMillis->if->run->return->end->System->currentTimeMillis->printer->printlnInfo->return->catch->printer->reportError->if->showUsage->return->e->printStackTrace->return->finally->log->flush
Main#run()::: main run:::LogPrinter->openLog->try->linker->new->Linker->objectFileName->linker->objFile->collector->new->Collector->classesToCompile->try->t->new->Timer->collector->collectClassesToCompile->printer->classesToCompile->size->printInfo->catch->finally->graalOptions->HotSpotGraalOptionValues->defaultOptions->if->TieredAOT->hasBeenSet->new->OptionValues->new->OptionValues->graalCompiler->HotSpotGraalCompilerFactory->JVMCI->getRuntime->CompilerConfigurationFactory->selectFactory->createCompiler->runtime->graalCompiler->getGraalRuntime->backend->runtime->getCapability->getHostBackend->metaAccess->backend->getProviders->getMetaAccess->new->GraalFilters->classes->try->t->new->Timer->collector->collectMethodsToCompile->catch->finally->try->t->new->Timer->printer->printMemoryUsage->System->gc->catch->finally->dynoStore->new->AOTDynamicTypeStore->AOTCompiledClass->setDynamicTypeStore->aotBackend->new->HotSpotInvokeDynamicPlugin->new->AOTBackend->snippetReflection->aotBackend->getProviders->getSnippetReflection->compiler->new->AOTCompiler->compiler->compileClasses->graalHotSpotVMConfig->runtime->getVMConfig->graphBuilderSuite->aotBackend->getGraphBuilderSuite->iterator->graphBuilderSuite->findPhase->graphBuilderConfig->iterator->previous->getGraphBuilderConfig->try->t->new->Timer->printer->printMemoryUsage->System->gc->catch->finally->gc->runtime->getGarbageCollector->ordinal->binaryContainer->new->BinaryContainer->dataBuilder->new->DataBuilder->try->debug->DebugContext->new->GraalDebugHandlersFactory->create->a->debug->activate->dataBuilder->prepareData->catch->finally->printer->containersInfo->try->t->new->Timer->printer->printMemoryUsage->foreach->aotCompClass->clear->classes->clear->binaryContainer->freeMemory->System->gc->catch->finally->try->t->new->Timer->binaryContainer->createBinary->catch->finally->try->t->new->Timer->printer->printMemoryUsage->System->gc->catch->finally->try->t->linker->libFile->new->Timer->linker->link->catch->finally->printer->printVerbose->printer->printMemoryUsage->printer->printlnVerbose->catch->finally->LogPrinter->closeLog->return
Main#handleError(ResolvedJavaMethod, Throwable, String)::: main handle error:::methodName->JavaMethodInfo->uniqueMethodName->if->printer->printError->if->GraalFilters->shouldIgnoreException->return->LogPrinter->writeLog->if->printer->printError->if->e->printStackTrace->if->System->exit
Main#warning(String, Object...)::: main warning:::log->MessageFormat->format->println->log->flush
Main#showUsage()::: main show usage:::log->println->log->println->log->flush
Main#showHelp()::: main show help:::log->println->log->println->log->println->log->println->log->println->log->println->foreach->name->substring->name->charAt->name->substring->if->o->isHidden->name->equals->continue->log->println->log->flush
Main#showVersion()::: main show version:::log->println
MarkProcessor#process(CompiledMethodInfo, Mark):::Parse a Mark generated by the compiler and create all needed binary section constructs.:::markId->MarkId->getEnum->switch->break->if->binaryContainer->getThreadLocalHandshakes->break->vmSymbolName->switch->BinaryContainer->getPollingPageSymbolName->break->BinaryContainer->getCardTableAddressSymbolName->break->BinaryContainer->getHeapTopAddressSymbolName->break->BinaryContainer->getHeapEndAddressSymbolName->break->BinaryContainer->getNarrowKlassBaseAddressSymbolName->break->BinaryContainer->getNarrowOopBaseAddressSymbolName->break->BinaryContainer->getCrcTableAddressSymbolName->break->BinaryContainer->getLogOfHeapRegionGrainBytesSymbolName->break->BinaryContainer->getInlineContiguousAllocationSupportedSymbolName->break->throw->new->InternalError->s->gotSymbol->binaryContainer->getGotSymbol->textBaseOffset->methodInfo->getTextSectionOffset->textOffset->reloc->binaryContainer->getCodeContainer->new->Relocation->binaryContainer->addRelocation->break->break->throw->new->InternalError
MetadataBuilder#processMetadata(List, AOTCompiledClass):::Process compiled methods and create method metadata.:::foreach->processMetadataClass->processMetadataClass
MetadataBuilder#processMetadataClass(AOTCompiledClass)::: metadata builder process metadata class:::processInfopointsAndMarks->createMethodMetadata
MetadataBuilder#createMethodMetadata(AOTCompiledClass):::Add metadata for each of the compiled methods in compiledClass to read-only section of binaryContainer.:::runtime->dataBuilder->getBackend->getRuntime->methodMetadataContainer->binaryContainer->getMethodMetadataContainer->foreach->compiledClass->getCompiledMethods->startOffset->methodMetadataContainer->getByteStreamSize->methodInfo->setMetadataOffset->compiledMethod->methodInfo->compiledCode->metaData->runtime->getTarget->new->HotSpotMetaData->pcDesc->metaData->pcDescBytes->scopeDesc->metaData->scopesDescBytes->relocationInfo->metaData->relocBytes->oopMapInfo->metaData->oopMaps->implicitExceptionBytes->HotSpotGraalServices->getImplicitExceptionBytes->metadataStream->new->NativeOrderOutputStream->codeSize->methodInfo->getCodeSize->co->CodeOffsets->methodInfo->getCompilationResult->getMarks->buildFrom->unverifiedEntry->co->entry->verifiedEntry->co->verifiedEntry->exceptionHandler->co->exceptionHandler->deoptHandler->co->deoptHandler->frameSize->methodInfo->getCompilationResult->getTotalFrameSize->deoptRescueSlot->methodInfo->getCompilationResult->getCustomStackArea->origPcOffset->deoptRescueSlot->getOffset->stubsOffset->methodInfo->getStubsOffset->offset->addMetadataEntries->methodInfo->setMetadataGotOffset->methodInfo->metaData->metadataEntries->setMetadataGotSize->unsafeAccess->methodInfo->getCompilationResult->hasUnsafeAccess->try->totalSize->metadataStream->patchableInt->metadataStream->putInt->putInt->putInt->putInt->putInt->putInt->putInt->putInt->putInt->pcDescOffset->metadataStream->patchableInt->scopeOffset->metadataStream->patchableInt->relocationOffset->metadataStream->patchableInt->exceptionOffset->metadataStream->patchableInt->implictTableOffset->if->metadataStream->patchableInt->oopMapOffset->metadataStream->patchableInt->metadataStream->align->pcDescOffset->metadataStream->position->set->metadataStream->put->align->scopeOffset->metadataStream->position->set->metadataStream->put->align->relocationOffset->metadataStream->position->set->metadataStream->put->align->exceptionOffset->metadataStream->position->set->metadataStream->metaData->exceptionBytes->put->align->if->implictTableOffset->metadataStream->position->set->metadataStream->put->align->oopMapOffset->metadataStream->position->set->metadataStream->put->align->totalSize->metadataStream->position->set->data->metadataStream->array->methodMetadataContainer->appendBytes->catch->throw->methodInfo->getMethodInfo->getSymbolName->new->InternalError->finally->methodInfo->clearCompileData
MetadataBuilder#addMetadataEntries(BinaryContainer, HotSpotMetaData, CompiledMethodInfo)::: metadata builder add metadata entries:::metaDataEntries->metaData->metadataEntries->if->return->metadataGotSlotsStart->binaryContainer->getMetadataGotContainer->getByteStreamSize->for->index->return
MetadataBuilder#addMetadataEntry(BinaryContainer, String)::: metadata builder add metadata entry:::stringOffset->binaryContainer->addMetaspaceName->binaryContainer->addMetadataGotEntry
MetadataBuilder#processInfopointsAndMarks(AOTCompiledClass):::Process Infopoints, Marks and DataPatches generated by the compiler to create all needed binary section constructs.:::compiledMethods->compiledClass->getCompiledMethods->markProcessor->new->MarkProcessor->dataPatchProcessor->new->DataPatchProcessor->infopointProcessor->new->InfopointProcessor->foreach->compilationResult->methodInfo->getCompilationResult->targetSymbol->methodInfo->getCodeId->gotName->symbol->binaryContainer->getMethodStateContainer->createGotSymbol->foreach->compilationResult->getInfopoints->infopointProcessor->process->foreach->compilationResult->getMarks->markProcessor->process->foreach->compilationResult->getDataPatches->dataPatchProcessor->process
Options#defaultOutputName()::: options default output name:::System->getProperty->name->ext->switch->break->break->if->osName->startsWith->else->return
Options.BadArgs#showUsage(boolean)::: bad args show usage:::return
Options.Option#isHidden()::: option is hidden:::return
Options.Option#matches(String)::: option matches:::foreach->if->a->equals->return->else->if->opt->startsWith->opt->startsWith->return->return
Options.Option#ignoreRest()::: option ignore rest:::return
Options.Option#process(Main, String, String)::: option process:::
Options#handleOptions(Main, String[])::: options handle options:::if->return->i->while->arg->if->arg->charAt->option->getOption->param->if->if->arg->startsWith->arg->indexOf->arg->arg->indexOf->arg->length->substring->else->if->if->param->isEmpty->param->charAt->throw->new->BadArgs->showUsage->option->process->if->option->ignoreRest->break->else->new->SearchFor->add
Options#getOption(String)::: options get option:::foreach->if->o->matches->return->throw->new->BadArgs->showUsage
StubInformation#getOffset()::: stub information get offset:::return
StubInformation#isVirtual()::: stub information is virtual:::return
StubInformation#setSize(int)::: stub information set size:::
StubInformation#getSize()::: stub information get size:::return
StubInformation#setMovOffset(int)::: stub information set mov offset:::
StubInformation#getMovOffset()::: stub information get mov offset:::return
StubInformation#setC2IJumpOffset(int)::: stub information set c2 jump offset:::
StubInformation#getC2IJumpOffset()::: stub information get c2 jump offset:::return
StubInformation#setResolveJumpOffset(int)::: stub information set resolve jump offset:::
StubInformation#getResolveJumpOffset()::: stub information get resolve jump offset:::return
StubInformation#setResolveJumpStart(int)::: stub information set resolve jump start:::
StubInformation#getResolveJumpStart()::: stub information get resolve jump start:::return
StubInformation#setDispatchJumpOffset(int)::: stub information set dispatch jump offset:::
StubInformation#getDispatchJumpOffset()::: stub information get dispatch jump offset:::return
StubInformation#verify()::: stub information verify:::if
Timer#close()::: timer close:::end->System->currentTimeMillis->printlnInfo

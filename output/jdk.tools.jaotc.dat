jdk.tools.jaotc.AOTBackend#getGraphBuilderSuite()->PhaseSuite::: backend get graph builder suite
jdk.tools.jaotc.AOTBackend#getBackend()->HotSpotBackend::: backend get backend
jdk.tools.jaotc.AOTBackend#getProviders()->HotSpotProviders::: backend get providers
jdk.tools.jaotc.AOTBackend#compileMethod(ResolvedJavaMethod, DebugContext)->CompilationResult::: backend compile method
jdk.tools.jaotc.AOTBackend#printCompiledMethod(HotSpotResolvedJavaMethod, CompilationResult)->void::: backend print compiled method
jdk.tools.jaotc.AOTCompilationTask#run()->void:::Compile a method or a constructor.
jdk.tools.jaotc.AOTCompilationTask#getMethod()->ResolvedJavaMethod::: compilation task get method
jdk.tools.jaotc.AOTCompilationTask#getHolder()->AOTCompiledClass:::Returns the holder of this method as a AOTCompiledClass.
jdk.tools.jaotc.AOTCompilationTask#getResult()->CompiledMethodInfo:::Returns the result of this compilation task.
jdk.tools.jaotc.AOTCompilationTask#compareTo(Object)->int::: compilation task compare to
jdk.tools.jaotc.AOTCompilationTask#equals(Object)->boolean::: compilation task equals
jdk.tools.jaotc.AOTCompilationTask#hashCode()->int::: compilation task hash code
jdk.tools.jaotc.AOTCompiledClass#setDynamicTypeStore(AOTDynamicTypeStore)->void::: compiled class set dynamic type store
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#getType()->HotSpotResolvedObjectType::: klass data get type
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#getMetadataName()->String::: klass data get metadata name
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#addDependentMethod(CompiledMethodInfo)->boolean:::Add a method to the list of dependent methods.
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#getDependentMethods()->ArrayList:::Return the array list of dependent class methods.
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#hasDependentMethods()->boolean:::Returns if this class has dependent methods.
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#setCompiledMethodsOffset(int)->void::: klass data set compiled methods offset
jdk.tools.jaotc.AOTCompiledClass.AOTKlassData#putAOTKlassData(BinaryContainer, ReadOnlyDataContainer)->void::: klass data put klass data
jdk.tools.jaotc.AOTCompiledClass#getResolvedJavaType()->ResolvedJavaType::: compiled class get resolved java type
jdk.tools.jaotc.AOTCompiledClass#getMethods()->ArrayList:::Get the list of methods which should be compiled.
jdk.tools.jaotc.AOTCompiledClass#getClassesCount()->int:::Get the number of all AOT classes.
jdk.tools.jaotc.AOTCompiledClass#getMethodCount()->int:::Get the number of methods which should be compiled.
jdk.tools.jaotc.AOTCompiledClass#addMethod(ResolvedJavaMethod)->void:::Add a method to the list of methods to be compiled.
jdk.tools.jaotc.AOTCompiledClass#hasMethods()->boolean:::Returns if this class has methods which should be compiled.
jdk.tools.jaotc.AOTCompiledClass#addCompiledMethod(CompiledMethodInfo)->boolean:::Add a method to the list of compiled methods
jdk.tools.jaotc.AOTCompiledClass#getCompiledMethods()->ArrayList:::Return the array list of compiled class methods.
jdk.tools.jaotc.AOTCompiledClass#hasCompiledMethods()->boolean:::Returns if this class has successfully compiled methods.
jdk.tools.jaotc.AOTCompiledClass#addAOTKlassData(BinaryContainer, HotSpotResolvedObjectType)->AOTKlassData:::Add a klass data.
jdk.tools.jaotc.AOTCompiledClass#getAOTKlassData(HotSpotResolvedObjectType)->AOTKlassData::: compiled class get klass data
jdk.tools.jaotc.AOTCompiledClass#addAOTKlassData(BinaryContainer)->void::: compiled class add klass data
jdk.tools.jaotc.AOTCompiledClass#addFingerprintKlassData(BinaryContainer, HotSpotResolvedObjectType)->AOTKlassData::: compiled class add fingerprint klass data
jdk.tools.jaotc.AOTCompiledClass#putMethodsData(BinaryContainer)->void::: compiled class put methods data
jdk.tools.jaotc.AOTCompiledClass#putAOTKlassData(BinaryContainer)->void::: compiled class put klass data
jdk.tools.jaotc.AOTCompiledClass#getType(Object)->HotSpotResolvedObjectType::: compiled class get type
jdk.tools.jaotc.AOTCompiledClass#metadataName(HotSpotResolvedObjectType)->String::: compiled class metadata name
jdk.tools.jaotc.AOTCompiledClass#metadataName(Object)->String::: compiled class metadata name
jdk.tools.jaotc.AOTCompiledClass#representsStubs()->boolean::: compiled class represents stubs
jdk.tools.jaotc.AOTCompiledClass#clear()->void::: compiled class clear
jdk.tools.jaotc.AOTCompiler#compileClasses(List)->List:::Compile all methods in all classes passed.
jdk.tools.jaotc.AOTCompiler#logCompilation(String, String)->void::: compiler log compilation
jdk.tools.jaotc.AOTDynamicTypeStore.Location#getHolder()->HotSpotResolvedObjectType::: location get holder
jdk.tools.jaotc.AOTDynamicTypeStore.Location#getCpi()->int::: location get cpi
jdk.tools.jaotc.AOTDynamicTypeStore.Location#toString()->String::: location to string
jdk.tools.jaotc.AOTDynamicTypeStore.Location#hashCode()->int::: location hash code
jdk.tools.jaotc.AOTDynamicTypeStore.Location#equals(Object)->boolean::: location equals
jdk.tools.jaotc.AOTDynamicTypeStore.AdapterLocation#getMethodId()->int::: adapter location get method id
jdk.tools.jaotc.AOTDynamicTypeStore.AdapterLocation#toString()->String::: adapter location to string
jdk.tools.jaotc.AOTDynamicTypeStore.AppendixLocation#toString()->String::: appendix location to string
jdk.tools.jaotc.AOTDynamicTypeStore#getDynamicTypes()->Set::: dynamic type store get dynamic types
jdk.tools.jaotc.AOTDynamicTypeStore#getDynamicHolders()->Set::: dynamic type store get dynamic holders
jdk.tools.jaotc.AOTDynamicTypeStore#recordAdapter(int, HotSpotResolvedObjectType, int, HotSpotResolvedJavaMethod)->void::: dynamic type store record adapter
jdk.tools.jaotc.AOTDynamicTypeStore#recordAppendix(int, HotSpotResolvedObjectType, int, JavaConstant)->JavaConstant::: dynamic type store record appendix
jdk.tools.jaotc.AOTDynamicTypeStore#getDynamicClassLocationsForType(HotSpotResolvedObjectType)->Set::: dynamic type store get dynamic class locations for type
jdk.tools.jaotc.AOTDynamicTypeStore#getDynamicTypesForHolder(HotSpotResolvedObjectType)->Set::: dynamic type store get dynamic types for holder
jdk.tools.jaotc.AOTHotSpotResolvedJavaMethod#getSymbolName()->String::: hot spot resolved java method get symbol name
jdk.tools.jaotc.AOTHotSpotResolvedJavaMethod#getNameAndSignature()->String::: hot spot resolved java method get name and signature
jdk.tools.jaotc.AOTHotSpotResolvedJavaMethod#compiledCode(CompilationResult)->HotSpotCompiledCode::: hot spot resolved java method compiled code
jdk.tools.jaotc.AOTStub#getSymbolName()->String::: stub get symbol name
jdk.tools.jaotc.AOTStub#getNameAndSignature()->String::: stub get name and signature
jdk.tools.jaotc.AOTStub#compiledCode(CompilationResult)->HotSpotCompiledCode::: stub compiled code
jdk.tools.jaotc.CallInfo#isStaticTarget(Call)->boolean::: call info is static target
jdk.tools.jaotc.CallInfo#isStaticCall(Call)->boolean::: call info is static call
jdk.tools.jaotc.CallInfo#isSpecialCall(Call)->boolean::: call info is special call
jdk.tools.jaotc.CallInfo#isVirtualCall(CompiledMethodInfo, Call)->boolean::: call info is virtual call
jdk.tools.jaotc.CallInfo#isOptVirtualCall(CompiledMethodInfo, Call)->boolean::: call info is opt virtual call
jdk.tools.jaotc.CallSiteRelocationSymbol#createCodeContainerSymbol(BinaryContainer, String, int)->Symbol::: call site relocation symbol create code container symbol
jdk.tools.jaotc.CallSiteRelocationSymbol#addCodeContainerRelocation(BinaryContainer, String, int, int)->void::: call site relocation symbol add code container relocation
jdk.tools.jaotc.CallSiteRelocationSymbol#addExtLinkageGotContainerRelocation(BinaryContainer, String, int, int)->void::: call site relocation symbol add ext linkage got container relocation
jdk.tools.jaotc.CallSiteRelocationSymbol#addExternalPltToGotRelocation(BinaryContainer, Symbol, int)->void:::Add an RelocType#EXTERNAL_PLT_TO_GOT relocation to the BinaryContainer#getCodeContainer().
jdk.tools.jaotc.CodeOffsets#buildFrom(List)->CodeOffsets::: code offsets build from
jdk.tools.jaotc.CodeOffsets#entry()->int::: code offsets entry
jdk.tools.jaotc.CodeOffsets#verifiedEntry()->int::: code offsets verified entry
jdk.tools.jaotc.CodeOffsets#exceptionHandler()->int::: code offsets exception handler
jdk.tools.jaotc.CodeOffsets#deoptHandler()->int::: code offsets deopt handler
jdk.tools.jaotc.CodeSectionProcessor#process(AOTCompiledClass)->void:::Method that looks at code section of a compiled result compClass and records function entry point symbols along with the text section contents
jdk.tools.jaotc.Collector#collectClassesToCompile()->Set>::: collector collect classes to compile
jdk.tools.jaotc.Collector#collectMethodsToCompile(Set>, MetaAccessProvider)->List:::Collect all method we should compile.
jdk.tools.jaotc.CompilationSpec#addCompileOnlyPattern(String)->void:::Add a compileOnly directive to the compile-only list.
jdk.tools.jaotc.CompilationSpec#addExcludePattern(String)->void:::Add an exclude directive to the exclude list.
jdk.tools.jaotc.CompilationSpec#shouldCompileMethod(ResolvedJavaMethod)->boolean:::Check if a given method is part of a restrictive compilation.
jdk.tools.jaotc.CompiledMethodInfo#name()->String::: compiled method info name
jdk.tools.jaotc.CompiledMethodInfo#addMethodOffsets(BinaryContainer, ReadOnlyDataContainer)->void::: compiled method info add method offsets
jdk.tools.jaotc.CompiledMethodInfo#getCompilationResult()->CompilationResult::: compiled method info get compilation result
jdk.tools.jaotc.CompiledMethodInfo#getMethodInfo()->JavaMethodInfo::: compiled method info get method info
jdk.tools.jaotc.CompiledMethodInfo#setTextSectionOffset(int)->void::: compiled method info set text section offset
jdk.tools.jaotc.CompiledMethodInfo#getTextSectionOffset()->int::: compiled method info get text section offset
jdk.tools.jaotc.CompiledMethodInfo#setCodeId()->void::: compiled method info set code id
jdk.tools.jaotc.CompiledMethodInfo#getCodeId()->int::: compiled method info get code id
jdk.tools.jaotc.CompiledMethodInfo#getMethodsCount()->int::: compiled method info get methods count
jdk.tools.jaotc.CompiledMethodInfo#getNextCodeId()->int::: compiled method info get next code id
jdk.tools.jaotc.CompiledMethodInfo#getCodeSize()->int::: compiled method info get code size
jdk.tools.jaotc.CompiledMethodInfo#getStubCodeSize()->int::: compiled method info get stub code size
jdk.tools.jaotc.CompiledMethodInfo#setMetadataOffset(int)->void::: compiled method info set metadata offset
jdk.tools.jaotc.CompiledMethodInfo#setStubsOffset(int)->void:::Offset into the code of this method where the stub section starts.
jdk.tools.jaotc.CompiledMethodInfo#getStubsOffset()->int::: compiled method info get stubs offset
jdk.tools.jaotc.CompiledMethodInfo#setMetadataGotOffset(int)->void::: compiled method info set metadata got offset
jdk.tools.jaotc.CompiledMethodInfo#setMetadataGotSize(int)->void::: compiled method info set metadata got size
jdk.tools.jaotc.CompiledMethodInfo#addStubCode(String, StubInformation)->void::: compiled method info add stub code
jdk.tools.jaotc.CompiledMethodInfo#getStubFor(String)->StubInformation::: compiled method info get stub for
jdk.tools.jaotc.CompiledMethodInfo#addDependentKlassData(BinaryContainer, HotSpotResolvedObjectType)->void::: compiled method info add dependent klass data
jdk.tools.jaotc.CompiledMethodInfo#getDependentKlassData(HotSpotResolvedObjectType)->AOTKlassData::: compiled method info get dependent klass data
jdk.tools.jaotc.CompiledMethodInfo#hasMark(Site, MarkId)->boolean::: compiled method info has mark
jdk.tools.jaotc.CompiledMethodInfo#asTag()->String::: compiled method info as tag
jdk.tools.jaotc.CompiledMethodInfo#compiledCode()->HotSpotCompiledCode::: compiled method info compiled code
jdk.tools.jaotc.CompiledMethodInfo#clear()->void::: compiled method info clear
jdk.tools.jaotc.CompiledMethodInfo#clearCompileData()->void::: compiled method info clear compile data
jdk.tools.jaotc.DataBuilder#getVMFunctionNameForAddress(long)->String:::Get the C/C++ function name associated with the foreign call target address.
jdk.tools.jaotc.DataBuilder#getBackend()->HotSpotHostBackend:::Returns the host backend used for this compilation.
jdk.tools.jaotc.DataBuilder#getBinaryContainer()->BinaryContainer:::Returns the binary container for this compilation.
jdk.tools.jaotc.DataBuilder#prepareData(DebugContext)->void:::Prepare data with all compiled classes and stubs.
jdk.tools.jaotc.DataPatchProcessor#process(CompiledMethodInfo, DataPatch)->void:::Process a DataPatch generated by the compiler and create all needed binary section constructs.
jdk.tools.jaotc.ELFMacroAssembler#getELFMacroAssembler(TargetDescription)->ELFMacroAssembler::: macro assembler get macro assembler
jdk.tools.jaotc.ELFMacroAssembler#currentEndOfInstruction()->int::: macro assembler current end of instruction
jdk.tools.jaotc.ELFMacroAssembler#getPLTJumpCode()->byte[]::: macro assembler get jump code
jdk.tools.jaotc.ELFMacroAssembler#getPLTStaticEntryCode(StubInformation)->byte[]::: macro assembler get static entry code
jdk.tools.jaotc.ELFMacroAssembler#getPLTVirtualEntryCode(StubInformation)->byte[]::: macro assembler get virtual entry code
jdk.tools.jaotc.GraalFilters#shouldCompileMethod(ResolvedJavaMethod)->boolean::: graal filters should compile method
jdk.tools.jaotc.GraalFilters#shouldCompileAnyMethodInClass(ResolvedJavaType)->boolean::: graal filters should compile any method in class
jdk.tools.jaotc.GraalFilters#shouldIgnoreException(Throwable)->boolean::: graal filters should ignore exception
jdk.tools.jaotc.InfopointProcessor#process(CompiledMethodInfo, Infopoint)->void:::Parse an Infopoint generated by the compiler and create all needed binary section constructs.
jdk.tools.jaotc.InstructionDecoder#getInstructionDecoder(TargetDescription)->InstructionDecoder::: instruction decoder get instruction decoder
jdk.tools.jaotc.InstructionDecoder#decodePosition(byte[], int)->void::: instruction decoder decode position
jdk.tools.jaotc.InstructionDecoder#currentEndOfInstruction()->int::: instruction decoder current end of instruction
jdk.tools.jaotc.JavaMethodInfo#getSymbolName()->String::: java method info get symbol name
jdk.tools.jaotc.JavaMethodInfo#getNameAndSignature()->String:::Name a java method with J.L.S
jdk.tools.jaotc.JavaMethodInfo#compiledCode(CompilationResult)->HotSpotCompiledCode::: java method info compiled code
jdk.tools.jaotc.JavaMethodInfo#uniqueMethodName(ResolvedJavaMethod)->String:::Name a java method with class and signature to make it unique.
jdk.tools.jaotc.Linker#objFile()->String::: linker obj file
jdk.tools.jaotc.Linker#libFile()->String::: linker lib file
jdk.tools.jaotc.Linker#link()->void::: linker link
jdk.tools.jaotc.LoadedClass#getName()->String::: loaded class get name
jdk.tools.jaotc.LoadedClass#getLoadedClass()->Class::: loaded class get loaded class
jdk.tools.jaotc.LoadedClass#toString()->String::: loaded class to string
jdk.tools.jaotc.LoadedClass#equals(Object)->boolean::: loaded class equals
jdk.tools.jaotc.LoadedClass#hashCode()->int::: loaded class hash code
jdk.tools.jaotc.LogPrinter#printInfo(String)->void::: log printer print info
jdk.tools.jaotc.LogPrinter#printlnInfo(String)->void::: log printer println info
jdk.tools.jaotc.LogPrinter#printVerbose(String)->void::: log printer print verbose
jdk.tools.jaotc.LogPrinter#printlnVerbose(String)->void::: log printer println verbose
jdk.tools.jaotc.LogPrinter#printDebug(String)->void::: log printer print debug
jdk.tools.jaotc.LogPrinter#printlnDebug(String)->void::: log printer println debug
jdk.tools.jaotc.LogPrinter#printError(String)->void::: log printer print error
jdk.tools.jaotc.LogPrinter#reportError(Throwable)->void::: log printer report error
jdk.tools.jaotc.LogPrinter#reportError(String, Object...)->void::: log printer report error
jdk.tools.jaotc.LogPrinter#printMemoryUsage()->void::: log printer print memory usage
jdk.tools.jaotc.LogPrinter#containersInfo(BinaryContainer)->void::: log printer containers info
jdk.tools.jaotc.LogPrinter#openLog()->void::: log printer open log
jdk.tools.jaotc.LogPrinter#writeLog(String)->void::: log printer write log
jdk.tools.jaotc.LogPrinter#closeLog()->void::: log printer close log
jdk.tools.jaotc.Main#main(String[])->void::: main main
jdk.tools.jaotc.Main#handleError(ResolvedJavaMethod, Throwable, String)->void::: main handle error
jdk.tools.jaotc.Main#warning(String, Object...)->void::: main warning
jdk.tools.jaotc.MarkProcessor#process(CompiledMethodInfo, Mark)->void:::Parse a Mark generated by the compiler and create all needed binary section constructs.
jdk.tools.jaotc.MetadataBuilder#processMetadata(List, AOTCompiledClass)->void:::Process compiled methods and create method metadata.
jdk.tools.jaotc.Options.BadArgs#showUsage(boolean)->BadArgs::: bad args show usage
jdk.tools.jaotc.Options.Option#isHidden()->boolean::: option is hidden
jdk.tools.jaotc.Options.Option#matches(String)->boolean::: option matches
jdk.tools.jaotc.Options.Option#ignoreRest()->boolean::: option ignore rest
jdk.tools.jaotc.Options.Option#process(Main, String, String)->void::: option process
jdk.tools.jaotc.Options#handleOptions(Main, String[])->void::: options handle options
jdk.tools.jaotc.Options#getOption(String)->Option::: options get option
jdk.tools.jaotc.StubInformation#getOffset()->int::: stub information get offset
jdk.tools.jaotc.StubInformation#isVirtual()->boolean::: stub information is virtual
jdk.tools.jaotc.StubInformation#setSize(int)->void::: stub information set size
jdk.tools.jaotc.StubInformation#getSize()->int::: stub information get size
jdk.tools.jaotc.StubInformation#setMovOffset(int)->void::: stub information set mov offset
jdk.tools.jaotc.StubInformation#getMovOffset()->int::: stub information get mov offset
jdk.tools.jaotc.StubInformation#setC2IJumpOffset(int)->void::: stub information set c2 jump offset
jdk.tools.jaotc.StubInformation#getC2IJumpOffset()->int::: stub information get c2 jump offset
jdk.tools.jaotc.StubInformation#setResolveJumpOffset(int)->void::: stub information set resolve jump offset
jdk.tools.jaotc.StubInformation#getResolveJumpOffset()->int::: stub information get resolve jump offset
jdk.tools.jaotc.StubInformation#setResolveJumpStart(int)->void::: stub information set resolve jump start
jdk.tools.jaotc.StubInformation#getResolveJumpStart()->int::: stub information get resolve jump start
jdk.tools.jaotc.StubInformation#setDispatchJumpOffset(int)->void::: stub information set dispatch jump offset
jdk.tools.jaotc.StubInformation#getDispatchJumpOffset()->int::: stub information get dispatch jump offset
jdk.tools.jaotc.StubInformation#verify()->void::: stub information verify
jdk.tools.jaotc.Timer#close()->void::: timer close

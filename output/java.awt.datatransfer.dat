Clipboard#getName():::Returns the name of this clipboard object.:::return
Clipboard#setContents(Transferable, ClipboardOwner):::Sets the current contents of the clipboard to the specified transferable object and registers the specified clipboard owner as the owner of the new contents:::oldOwner->oldContents->if->DataFlavorUtil->getDesktopService->oldOwner->lostOwnership->invokeOnEventThread->fireFlavorsChanged
Clipboard#getContents(Object):::Returns a transferable object representing the current contents of the clipboard:::return
Clipboard#getAvailableDataFlavors():::Returns an array of DataFlavors in which the current contents of this clipboard can be provided:::cntnts->getContents->if->return->new->DataFlavorArr->return->cntnts->getTransferDataFlavors
Clipboard#isDataFlavorAvailable(DataFlavor):::Returns whether or not the current contents of this clipboard can be provided in the specified DataFlavor.:::if->throw->new->NullPointerException->cntnts->getContents->if->return->return->cntnts->isDataFlavorSupported
Clipboard#getData(DataFlavor):::Returns an object representing the current contents of this clipboard in the specified DataFlavor:::if->throw->new->NullPointerException->cntnts->getContents->if->throw->new->UnsupportedFlavorException->return->cntnts->getTransferData
Clipboard#addFlavorListener(FlavorListener):::Registers the specified FlavorListener to receive FlavorEvents from this clipboard:::if->return->if->new->HashSet<>->getAvailableDataFlavorSet->flavorListeners->add
Clipboard#removeFlavorListener(FlavorListener):::Removes the specified FlavorListener so that it no longer receives FlavorEvents from this Clipboard:::if->return->flavorListeners->remove
Clipboard#getFlavorListeners():::Returns an array of all the FlavorListeners currently registered on this Clipboard.:::return->new->FlavorListenerArr->flavorListeners->flavorListeners->size->new->FlavorListenerArr->toArray
Clipboard#fireFlavorsChanged():::Checks change of the DataFlavors and, if necessary, notifies all listeners that have registered interest for notification on FlavorEvents.:::if->return->prevDataFlavors->getAvailableDataFlavorSet->if->Objects->equals->return->flavorListeners->DataFlavorUtil->getDesktopService->listener->new->FlavorEvent->flavorsChanged->invokeOnEventThread->forEach
Clipboard#getAvailableDataFlavorSet():::Returns a set of DataFlavors currently available on this clipboard.:::set->new->HashSet<>->contents->getContents->if->flavors->contents->getTransferDataFlavors->if->set->Arrays->asList->addAll->return
ClipboardOwner#lostOwnership(Clipboard, Transferable):::Notifies this object that it is no longer the clipboard owner:::
DataFlavor#tryToLoadClass(String, ClassLoader):::Tries to load a class from: the bootstrap loader, the system loader, the context loader (if one is present) and finally the loader specified.:::ReflectUtil->checkPackageAccess->try->sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->loader->ClassLoader->getSystemClassLoader->try->return->Class->forName->catch->Thread->currentThread->getContextClassLoader->if->try->return->Class->forName->catch->finally->finally->catch->finally->return->Class->forName
DataFlavor#createConstant(Class, String)::: data flavor create constant:::try->return->new->DataFlavor->catch->return->finally
DataFlavor#createConstant(String, String)::: data flavor create constant:::try->return->new->DataFlavor->catch->return->finally
DataFlavor#initHtmlDataFlavor(String)::: data flavor init html data flavor:::try->return->new->DataFlavor->catch->return->finally
DataFlavor#initialize(String, String, ClassLoader):::Common initialization code called from various constructors.:::if->throw->new->NullPointerException->new->MimeType->rcn->getParameter->if->if->getBaseType->equals->throw->new->IllegalArgumentException->else->else->DataFlavor->tryToLoadClass->representationClass->getName->setParameter->if->getParameter->if->getPrimaryType->getSubType->removeParameter
DataFlavor#toString():::String representation of this DataFlavor and its parameters:::string->getClass->getName->paramString->return
DataFlavor#paramString()::: data flavor param string:::params->if->else->mimeType->getBaseType->if->else->representationClass->getName->if->DataFlavorUtil->isFlavorCharsetTextType->isRepresentationClassInputStream->isRepresentationClassByteBuffer->equals->DataFlavorUtil->getTextCharset->return
DataFlavor#getTextPlainUnicodeFlavor():::Returns a DataFlavor representing plain text with Unicode encoding, where:      representationClass = java.io.InputStream     mimeType            = "text/plain;                            charset=&lt;platform default Unicode encoding&gt;" :::return->DataFlavorUtil->getDesktopService->getDefaultUnicodeEncoding->new->DataFlavor
DataFlavor#selectBestTextFlavor(DataFlavor[]):::Selects the best text DataFlavor from an array of DataFlavors:::if->return->bestFlavor->Collections->Arrays->asList->DataFlavorUtil->getTextFlavorComparator->max->if->bestFlavor->isFlavorTextType->return->return
DataFlavor#getReaderForText(Transferable):::Gets a Reader for a text flavor, decoded, if necessary, for the expected charset (encoding):::transferObject->transferable->getTransferData->if->throw->new->IllegalArgumentException->if->return->else->if->return->new->StringReader->else->if->buffer->size->buffer->remaining->chars->new->charArr->buffer->get->return->new->CharArrayReader->else->if->return->new->CharArrayReader->stream->if->else->if->buffer->size->buffer->remaining->bytes->new->byteArr->buffer->get->new->ByteArrayInputStream->else->if->new->ByteArrayInputStream->if->throw->new->IllegalArgumentException->encoding->getParameter->return->new->InputStreamReader->new->InputStreamReader
DataFlavor#getMimeType():::Returns the MIME type string for this DataFlavor.:::return->mimeType->toString
DataFlavor#getRepresentationClass():::Returns the Class which objects supporting this DataFlavor will return when this DataFlavor is requested.:::return
DataFlavor#getHumanPresentableName():::Returns the human presentable name for the data format that this DataFlavor represents:::return
DataFlavor#getPrimaryType():::Returns the primary MIME type for this DataFlavor.:::return->mimeType->getPrimaryType
DataFlavor#getSubType():::Returns the sub MIME type of this DataFlavor.:::return->mimeType->getSubType
DataFlavor#getParameter(String):::Returns the human presentable name for this DataFlavor if paramName equals "humanPresentableName":::if->paramName->equals->return->else->return->mimeType->getParameter
DataFlavor#setHumanPresentableName(String):::Sets the human presentable name for the data format that this DataFlavor represents:::
DataFlavor#equals(Object):::The equals comparison for the {@code DataFlavor class is implemented as follows: Two DataFlavors are considered equal if and only if their MIME primary type and subtype and representation class are equal:::return->equals
DataFlavor#equals(DataFlavor):::This method has the same behavior as #equals(Object):::if->return->if->return->if->Objects->this->getRepresentationClass->that->getRepresentationClass->equals->return->if->if->return->else->if->mimeType->match->return->if->getPrimaryType->equals->if->DataFlavorUtil->doesSubtypeSupportCharset->isStandardTextRepresentationClass->thisCharset->DataFlavorUtil->this->getParameter->canonicalName->thatCharset->DataFlavorUtil->that->getParameter->canonicalName->if->Objects->equals->return->if->getSubType->equals->thisDocument->this->getParameter->thatDocument->that->getParameter->if->Objects->equals->return->return
DataFlavor#equals(String):::Compares only the mimeType against the passed in String and representationClass is not considered in the comparison:::if->return->return->isMimeTypeEqual
DataFlavor#hashCode():::Returns hash code for this DataFlavor:::total->if->representationClass->hashCode->if->primaryType->mimeType->getPrimaryType->if->primaryType->hashCode->if->equals->if->DataFlavorUtil->doesSubtypeSupportCharset->isStandardTextRepresentationClass->charset->DataFlavorUtil->getParameter->canonicalName->if->charset->hashCode->if->getSubType->equals->document->this->getParameter->if->document->hashCode->return
DataFlavor#match(DataFlavor):::Identical to #equals(DataFlavor).:::return->equals
DataFlavor#isMimeTypeEqual(String):::Returns whether the string representation of the MIME type passed in is equivalent to the MIME type of this DataFlavor:::if->throw->new->NullPointerException->if->return->try->return->new->MimeType->match->catch->return->finally
DataFlavor#isMimeTypeEqual(DataFlavor):::Compares the mimeType of two DataFlavor objects:::return->isMimeTypeEqual
DataFlavor#isMimeTypeEqual(MimeType):::Compares the mimeType of two DataFlavor objects:::if->return->return->mimeType->match
DataFlavor#isStandardTextRepresentationClass():::Checks if the representation class is one of the standard text representation classes.:::return->isRepresentationClassReader->equals->isRepresentationClassCharBuffer->equals
DataFlavor#isMimeTypeSerializedObject():::Does the DataFlavor represent a serialized object?:::return->isMimeTypeEqual
DataFlavor#getDefaultRepresentationClass():::Returns the default representation class.:::return
DataFlavor#getDefaultRepresentationClassAsString():::Returns the name of the default representation class.:::return->getDefaultRepresentationClass->getName
DataFlavor#isRepresentationClassInputStream():::Does the DataFlavor represent a java.io.InputStream?:::return->ioInputStreamClass->isAssignableFrom
DataFlavor#isRepresentationClassReader():::Returns whether the representation class for this DataFlavor is java.io.Reader or a subclass thereof.:::return->isAssignableFrom
DataFlavor#isRepresentationClassCharBuffer():::Returns whether the representation class for this DataFlavor is java.nio.CharBuffer or a subclass thereof.:::return->isAssignableFrom
DataFlavor#isRepresentationClassByteBuffer():::Returns whether the representation class for this DataFlavor is java.nio.ByteBuffer or a subclass thereof.:::return->isAssignableFrom
DataFlavor#isRepresentationClassSerializable():::Returns true if the representation class can be serialized.:::return->isAssignableFrom
DataFlavor#isRepresentationClassRemote():::Returns true if the representation class is Remote.:::return->isRemote
DataFlavor#isFlavorSerializedObjectType():::Returns true if the DataFlavor specified represents a serialized object.:::return->isRepresentationClassSerializable->isMimeTypeEqual
DataFlavor#isFlavorRemoteObjectType():::Returns true if the DataFlavor specified represents a remote object.:::return->isRepresentationClassRemote->isRepresentationClassSerializable->isMimeTypeEqual
DataFlavor#isFlavorJavaFileListType():::Returns true if the DataFlavor specified represents a list of file objects.:::if->return->return->isAssignableFrom->mimeType->match
DataFlavor#isFlavorTextType():::Returns whether this DataFlavor is a valid text flavor for this implementation of the Java platform:::return->DataFlavorUtil->isFlavorCharsetTextType->DataFlavorUtil->isFlavorNoncharsetTextType
DataFlavor#writeExternal(ObjectOutput):::Serializes this DataFlavor.:::if->mimeType->setParameter->os->writeObject->mimeType->removeParameter->else->os->writeObject->os->writeObject
DataFlavor#readExternal(ObjectInput):::Restores this DataFlavor from a Serialized state.:::rcn->is->readObject->if->mimeType->getParameter->mimeType->removeParameter->mimeType->getParameter->if->throw->new->IOException->try->is->readObject->catch->if->throw->if->DataFlavor->getClass->getClassLoader->tryToLoadClass->finally
DataFlavor#clone():::Returns a clone of this DataFlavor.:::newObj->super->clone->if->mimeType->clone->return
DataFlavor#normalizeMimeTypeParameter(String, String):::Called on DataFlavor for every MIME Type parameter to allow DataFlavor subclasses to handle special parameters like the text/plain charset parameters, whose values are case insensitive:::return
DataFlavor#normalizeMimeType(String):::Called for each MIME type string to give DataFlavor subtypes the opportunity to change how the normalization of MIME types is accomplished:::return
FlavorListener#flavorsChanged(FlavorEvent):::Invoked when the target Clipboard of the listener has changed its available DataFlavors:::
FlavorMap#getNativesForFlavors(DataFlavor[]):::Returns a Map of the specified DataFlavors to their corresponding String native:::
FlavorMap#getFlavorsForNatives(String[]):::Returns a Map of the specified String natives to their corresponding DataFlavor:::
FlavorTable#getNativesForFlavor(DataFlavor):::Returns a List of String natives to which the specified DataFlavor corresponds:::
FlavorTable#getFlavorsForNative(String):::Returns a List of DataFlavors to which the specified String corresponds:::
MimeType#hashCode()::: mime type hash code:::code->primaryType->hashCode->subType->hashCode->parameters->hashCode->return
MimeType#equals(Object):::MimeTypes are equal if their primary types, subtypes, and parameters are all equal:::if->return->that->isIt->equals->equals->equals->return
MimeType#parse(String):::A routine for parsing the MIME type out of a String.:::slashIndex->rawdata->indexOf->semIndex->rawdata->indexOf->if->throw->new->MimeTypeParseException->else->if->throw->new->MimeTypeParseException->else->if->rawdata->substring->trim->toLowerCase->rawdata->substring->trim->toLowerCase->new->MimeTypeParameterList->else->if->rawdata->substring->trim->toLowerCase->rawdata->substring->trim->toLowerCase->rawdata->substring->new->MimeTypeParameterList->else->throw->new->MimeTypeParseException->if->isValidToken->throw->new->MimeTypeParseException->if->isValidToken->throw->new->MimeTypeParseException
MimeType#getPrimaryType():::Retrieve the primary type of this object.:::return
MimeType#getSubType():::Retrieve the sub type of this object.:::return
MimeType#getParameters():::Retrieve a copy of this object's parameter list.:::return->parameters->clone
MimeType#getParameter(String):::Retrieve the value associated with the given name, or null if there is no current association.:::return->parameters->get
MimeType#setParameter(String, String):::Set the value to be associated with the given name, replacing any previous association.:::parameters->set
MimeType#removeParameter(String):::Remove any value associated with the given name.:::parameters->remove
MimeType#toString():::Return the String representation of this object.:::return->getBaseType->parameters->toString
MimeType#getBaseType():::Return a String representation of this object without the parameter list.:::return
MimeType#match(MimeType):::Returns true if the primary type and the subtype of this object are the same as the specified type; otherwise returns false.:::if->return->return->primaryType->type->getPrimaryType->equals->subType->equals->type->getSubType->equals->subType->type->getSubType->equals
MimeType#match(String):::Returns true if the primary type and the subtype of this object are the same as the content type described in rawdata; otherwise returns false.:::if->return->return->new->MimeType->match
MimeType#writeExternal(ObjectOutput):::The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings and arrays.:::s->toString->if->s->length->out->writeUTF->else->out->writeByte->out->writeByte->out->s->length->writeInt->out->s->getBytes->write
MimeType#readExternal(ObjectInput):::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays:::s->in->readUTF->if->s->length->ba->in->readInt->new->byteArr->in->readFully->new->String->try->parse->catch->throw->e->toString->new->IOException->finally
MimeType#clone():::Returns a clone of this object.:::newObj->try->super->clone->catch->finally->parameters->clone->return
MimeType#isTokenChar(char):::Determines whether or not a given character belongs to a legal token.:::return->TSPECIALS->indexOf
MimeType#isValidToken(String):::Determines whether or not a given string is a legal token.:::len->s->length->if->for->i->return->else->return
MimeTypeParameterList#hashCode()::: mime type parameter list hash code:::code->paramName->enum_->this->getNames->while->enum_->hasMoreElements->enum_->nextElement->paramName->hashCode->this->get->hashCode->return
MimeTypeParameterList#equals(Object):::Two parameter lists are considered equal if they have exactly the same set of parameter names and associated values:::if->return->that->if->this->size->that->size->return->name->thisValue->thatValue->entries->parameters->entrySet->iterator->entries->iterator->entry->while->iterator->hasNext->iterator->next->entry->getKey->entry->getValue->get->if->if->return->else->if->thisValue->equals->return->return
MimeTypeParameterList#parse(String):::A routine for parsing the parameter list out of a String.:::length->rawdata->length->if->currentIndex->skipWhiteSpace->lastIndex->if->currentChar->rawdata->charAt->while->name->value->foundit->skipWhiteSpace->if->rawdata->charAt->while->isTokenChar->rawdata->charAt->rawdata->substring->toLowerCase->skipWhiteSpace->if->rawdata->charAt->skipWhiteSpace->if->rawdata->charAt->if->if->while->rawdata->charAt->if->else->if->else->if->rawdata->substring->unquote->else->throw->new->MimeTypeParseException->else->throw->new->MimeTypeParseException->else->if->isTokenChar->while->rawdata->charAt->if->isTokenChar->else->rawdata->substring->else->throw->new->MimeTypeParseException->parameters->put->else->throw->new->MimeTypeParseException->else->throw->new->MimeTypeParseException->else->throw->new->MimeTypeParseException->skipWhiteSpace->if->rawdata->charAt->if->throw->new->MimeTypeParseException
MimeTypeParameterList#size():::return the number of name-value pairs in this list.:::return->parameters->size
MimeTypeParameterList#isEmpty():::Determine whether or not this list is empty.:::return->parameters->isEmpty
MimeTypeParameterList#get(String):::Retrieve the value associated with the given name, or null if there is no current association.:::return->parameters->name->trim->toLowerCase->get
MimeTypeParameterList#set(String, String):::Set the value to be associated with the given name, replacing any previous association.:::parameters->name->trim->toLowerCase->put
MimeTypeParameterList#remove(String):::Remove any value associated with the given name.:::parameters->name->trim->toLowerCase->remove
MimeTypeParameterList#getNames():::Retrieve an enumeration of all the names in this list.:::return->parameters->keys
MimeTypeParameterList#toString()::: mime type parameter list to string:::buffer->parameters->size->new->StringBuilder->keys->parameters->keys->while->keys->hasMoreElements->buffer->append->key->keys->nextElement->buffer->append->buffer->append->buffer->parameters->get->quote->append->return->buffer->toString
MimeTypeParameterList#clone():::Returns a clone of this object.:::newObj->try->super->clone->catch->finally->parameters->clone->return
MimeTypeParameterList#isTokenChar(char):::Determine whether or not a given character belongs to a legal token.:::return->TSPECIALS->indexOf
MimeTypeParameterList#skipWhiteSpace(String, int):::Returns the index of the first non white space character in rawdata at or after index i.:::length->rawdata->length->if->c->rawdata->charAt->while->Character->isWhitespace->rawdata->charAt->return
MimeTypeParameterList#quote(String):::A routine that knows how and when to quote and escape the given value.:::needsQuotes->length->value->length->for->i->if->buffer->new->StringBuilder->buffer->append->for->i->buffer->append->return->buffer->toString->else->return
MimeTypeParameterList#unquote(String):::A routine that knows how to strip the quotes and escape sequences from the given value.:::valueLength->value->length->buffer->new->StringBuilder->escaped->for->i->return->buffer->toString
StringSelection#getTransferDataFlavors():::Returns an array of flavors in which this Transferable can provide the data:::return->flavors->clone
StringSelection#isDataFlavorSupported(DataFlavor):::Returns whether the requested flavor is supported by this Transferable.:::for->i->return
StringSelection#getTransferData(DataFlavor):::Returns the Transferable's data in the requested DataFlavor if possible:::if->flavor->equals->return->else->if->flavor->equals->return->new->StringReader->else->throw->new->UnsupportedFlavorException
StringSelection#lostOwnership(Clipboard, Transferable)::: string selection lost ownership:::
SystemFlavorMap#getNativeToFlavor():::Accessor to nativeToFlavor map:::if->initSystemFlavorMap->return
SystemFlavorMap#getFlavorToNative():::Accessor to flavorToNative map:::if->initSystemFlavorMap->return
SystemFlavorMap#getTextTypeToNative():::An accessor to textTypeToNative map:::if->initSystemFlavorMap->Collections->unmodifiableMap->return
SystemFlavorMap#getDefaultFlavorMap():::Returns the default FlavorMap for this thread's ClassLoader.:::return->DataFlavorUtil->getDesktopService->SystemFlavorMap->new->getFlavorMap
SystemFlavorMap#initSystemFlavorMap():::Initializes a SystemFlavorMap by reading flavormap.properties:::if->return->is->AccessController->return->getResourceAsStream->doPrivileged->if->throw->new->InternalError->try->isr->new->InputStreamReader->reader->new->BufferedReader->line->while->reader->readLine->line->trim->if->line->startsWith->line->isEmpty->continue->while->line->endsWith->line->line->length->substring->reader->readLine->trim->delimiterPosition->line->indexOf->key->line->substring->replace->values->line->line->length->substring->split->foreach->try->loadConvert->mime->new->MimeType->if->mime->getPrimaryType->equals->charset->mime->getParameter->if->DataFlavorUtil->mime->getSubType->doesSubtypeSupportCharset->desktopService->DataFlavorUtil->getDesktopService->if->desktopService->isDesktopPresent->desktopService->mime->getParameter->mime->getParameter->registerTextFlavorProperties->mime->removeParameter->mime->removeParameter->mime->removeParameter->mime->removeParameter->mime->toString->catch->e->printStackTrace->continue->finally->flavor->try->new->DataFlavor->catch->try->new->DataFlavor->catch->ee->printStackTrace->continue->finally->finally->dfs->new->LinkedHashSet<>->dfs->add->if->flavor->getPrimaryType->equals->dfs->convertMimeTypeToDataFlavors->addAll->getBaseType->getTextTypeToNative->store->foreach->getFlavorToNative->store->getNativeToFlavor->store->catch->throw->new->InternalError->finally
SystemFlavorMap#loadConvert(String)::: system flavor map load convert:::aChar->len->theString->length->outBuffer->new->StringBuilder->for->x->return->outBuffer->toString
SystemFlavorMap#store(H, L, Map>):::Stores the listed object under the specified hash key in map:::list->map->get->if->new->LinkedHashSet<>->map->put->if->list->contains->list->add
SystemFlavorMap#nativeToFlavorLookup(String):::Semantically equivalent to 'nativeToFlavor.get(nat)':::flavors->getNativeToFlavor->get->if->disabledMappingGenerationKeys->contains->desktopService->DataFlavorUtil->getDesktopService->if->desktopService->isDesktopPresent->platformFlavors->desktopService->getPlatformMappingsForNative->if->platformFlavors->isEmpty->if->platformFlavors->addAll->if->isJavaMIMEType->decoded->decodeJavaMIMEType->flavor->try->new->DataFlavor->catch->e->getClass->getName->e->getMessage->println->finally->if->new->LinkedHashSet<>->getNativeToFlavor->put->flavors->add->flavorsForNativeCache->remove->natives->getFlavorToNative->get->if->new->LinkedHashSet<>->getFlavorToNative->put->natives->add->nativesForFlavorCache->remove->return->new->LinkedHashSet<>
SystemFlavorMap#flavorToNativeLookup(DataFlavor, boolean):::Semantically equivalent to 'flavorToNative.get(flav)':::natives->getFlavorToNative->get->if->disabledMappingGenerationKeys->contains->desktopService->DataFlavorUtil->getDesktopService->if->desktopService->isDesktopPresent->platformNatives->desktopService->getPlatformMappingsForFlavor->if->platformNatives->isEmpty->if->platformNatives->addAll->if->if->encoded->encodeDataFlavor->new->LinkedHashSet<>->getFlavorToNative->put->natives->add->flavors->getNativeToFlavor->get->if->new->LinkedHashSet<>->getNativeToFlavor->put->flavors->add->nativesForFlavorCache->remove->flavorsForNativeCache->remove->else->new->LinkedHashSet<>->return->new->LinkedHashSet<>
SystemFlavorMap#getNativesForFlavor(DataFlavor):::Returns a List of String natives to which the specified DataFlavor can be translated by the data transfer subsystem:::retval->nativesForFlavorCache->check->if->return->new->ArrayList<>->if->getNativeToFlavor->keySet->new->LinkedHashSet<>->else->if->disabledMappingGenerationKeys->contains->flavorToNativeLookup->else->if->DataFlavorUtil->isFlavorCharsetTextType->new->LinkedHashSet<>->if->flav->getPrimaryType->equals->textTypeNatives->getTextTypeToNative->getBaseType->get->if->retval->addAll->textTypeNatives->getTextTypeToNative->get->if->retval->addAll->if->retval->isEmpty->flavorToNativeLookup->else->retval->flavorToNativeLookup->addAll->else->if->DataFlavorUtil->isFlavorNoncharsetTextType->getTextTypeToNative->getBaseType->get->if->retval->isEmpty->flavorToNativeLookup->else->retval->flavorToNativeLookup->addAll->else->flavorToNativeLookup->nativesForFlavorCache->put->return->new->ArrayList<>
SystemFlavorMap#getFlavorsForNative(String):::Returns a List of DataFlavors to which the specified String native can be translated by the data transfer subsystem:::returnValue->flavorsForNativeCache->check->if->return->new->ArrayList<>->else->new->LinkedHashSet<>->if->foreach->getNativesForFlavor->returnValue->getFlavorsForNative->addAll->else->flavors->nativeToFlavorLookup->if->disabledMappingGenerationKeys->contains->return->new->ArrayList<>->flavorsWithSynthesized->nativeToFlavorLookup->foreach->returnValue->add->if->df->getPrimaryType->equals->baseType->getBaseType->returnValue->convertMimeTypeToDataFlavors->addAll->flavorsForNativeCache->put->return->new->ArrayList<>
SystemFlavorMap#convertMimeTypeToDataFlavors(String)::: system flavor map convert mime type to data flavors:::returnValue->new->LinkedHashSet<>->subType->try->mimeType->new->MimeType->mimeType->getSubType->catch->finally->if->DataFlavorUtil->doesSubtypeSupportCharset->if->TEXT_PLAIN_BASE_TYPE->equals->returnValue->add->foreach->mimeType->mimeTypes->handleHtmlMimeTypes->foreach->toAdd->try->new->DataFlavor->catch->finally->returnValue->add->foreach->DataFlavorUtil->standardEncodings->foreach->mimeType->mimeTypes->handleHtmlMimeTypes->foreach->df->try->new->DataFlavor->if->df->equals->catch->finally->returnValue->add->if->TEXT_PLAIN_BASE_TYPE->equals->returnValue->add->else->foreach->toAdd->try->new->DataFlavor->catch->finally->returnValue->add->return
SystemFlavorMap#handleHtmlMimeTypes(String, String)::: system flavor map handle html mime types:::returnValues->new->LinkedHashSet<>->if->HTML_TEXT_BASE_TYPE->equals->foreach->returnValues->add->else->returnValues->add->return
SystemFlavorMap#getNativesForFlavors(DataFlavor[]):::Returns a Map of the specified DataFlavors to their most preferred String native:::if->flavor_list->getFlavorsForNative->flavor_list->size->new->DataFlavorArr->flavor_list->toArray->retval->new->HashMap<>->foreach->natives->getNativesForFlavor->nat->natives->isEmpty->natives->get->retval->put->return
SystemFlavorMap#getFlavorsForNatives(String[]):::Returns a Map of the specified String natives to their most preferred DataFlavor:::if->nativesList->getNativesForFlavor->nativesList->size->new->StringArr->nativesList->toArray->retval->new->HashMap<>->foreach->flavors->getFlavorsForNative->flav->flavors->isEmpty->flavors->get->retval->put->return
SystemFlavorMap#addUnencodedNativeForFlavor(DataFlavor, String):::Adds a mapping from the specified DataFlavor (and all DataFlavors equal to the specified DataFlavor) to the specified String native:::Objects->requireNonNull->Objects->requireNonNull->natives->getFlavorToNative->get->if->new->LinkedHashSet<>->getFlavorToNative->put->natives->add->nativesForFlavorCache->remove
SystemFlavorMap#setNativesForFlavor(DataFlavor, String[]):::Discards the current mappings for the specified DataFlavor and all DataFlavors equal to the specified DataFlavor, and creates new mappings to the specified String natives:::Objects->requireNonNull->Objects->requireNonNull->getFlavorToNative->remove->foreach->addUnencodedNativeForFlavor->disabledMappingGenerationKeys->add->nativesForFlavorCache->remove
SystemFlavorMap#addFlavorForUnencodedNative(String, DataFlavor):::Adds a mapping from a single String native to a single DataFlavor:::Objects->requireNonNull->Objects->requireNonNull->flavors->getNativeToFlavor->get->if->new->LinkedHashSet<>->getNativeToFlavor->put->flavors->add->flavorsForNativeCache->remove
SystemFlavorMap#setFlavorsForNative(String, DataFlavor[]):::Discards the current mappings for the specified String native, and creates new mappings to the specified DataFlavors:::Objects->requireNonNull->Objects->requireNonNull->getNativeToFlavor->remove->foreach->addFlavorForUnencodedNative->disabledMappingGenerationKeys->add->flavorsForNativeCache->remove
SystemFlavorMap#encodeJavaMIMEType(String):::Encodes a MIME type for use as a String native:::return
SystemFlavorMap#encodeDataFlavor(DataFlavor):::Encodes a DataFlavor for use as a String native:::return->SystemFlavorMap->flav->getMimeType->encodeJavaMIMEType
SystemFlavorMap#isJavaMIMEType(String):::Returns whether the specified String is an encoded Java MIME type.:::return->str->startsWith
SystemFlavorMap#decodeJavaMIMEType(String):::Decodes a String native for use as a Java MIME type.:::return->isJavaMIMEType->nat->JavaMIME->length->nat->length->substring->trim
SystemFlavorMap#decodeDataFlavor(String):::Decodes a String native for use as a DataFlavor.:::retval_str->SystemFlavorMap->decodeJavaMIMEType->return->new->DataFlavor
SystemFlavorMap.SoftCache#put(K, LinkedHashSet)::: soft cache put:::if->new->HashMap<>->cache->new->SoftReference<>->put
SystemFlavorMap.SoftCache#remove(K)::: soft cache remove:::if->return->cache->remove->cache->remove
SystemFlavorMap.SoftCache#check(K)::: soft cache check:::if->return->ref->cache->get->if->return->ref->get->return
Transferable#getTransferDataFlavors():::Returns an array of DataFlavor objects indicating the flavors the data can be provided in:::
Transferable#isDataFlavorSupported(DataFlavor):::Returns whether or not the specified data flavor is supported for this object.:::
Transferable#getTransferData(DataFlavor):::Returns an object which represents the data to be transferred:::

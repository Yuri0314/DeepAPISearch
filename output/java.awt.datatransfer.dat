java.awt.datatransfer.Clipboard#getName()->String:::Returns the name of this clipboard object.
java.awt.datatransfer.Clipboard#setContents(Transferable, ClipboardOwner)->void:::Sets the current contents of the clipboard to the specified transferable object and registers the specified clipboard owner as the owner of the new contents
java.awt.datatransfer.Clipboard#getContents(Object)->Transferable:::Returns a transferable object representing the current contents of the clipboard
java.awt.datatransfer.Clipboard#getAvailableDataFlavors()->DataFlavor[]:::Returns an array of DataFlavors in which the current contents of this clipboard can be provided
java.awt.datatransfer.Clipboard#isDataFlavorAvailable(DataFlavor)->boolean:::Returns whether or not the current contents of this clipboard can be provided in the specified DataFlavor.
java.awt.datatransfer.Clipboard#getData(DataFlavor)->Object:::Returns an object representing the current contents of this clipboard in the specified DataFlavor
java.awt.datatransfer.Clipboard#addFlavorListener(FlavorListener)->void:::Registers the specified FlavorListener to receive FlavorEvents from this clipboard
java.awt.datatransfer.Clipboard#removeFlavorListener(FlavorListener)->void:::Removes the specified FlavorListener so that it no longer receives FlavorEvents from this Clipboard
java.awt.datatransfer.Clipboard#getFlavorListeners()->FlavorListener[]:::Returns an array of all the FlavorListeners currently registered on this Clipboard.
java.awt.datatransfer.ClipboardOwner#lostOwnership(Clipboard, Transferable)->void:::Notifies this object that it is no longer the clipboard owner
java.awt.datatransfer.DataFlavor#tryToLoadClass(String, ClassLoader)->Class:::Tries to load a class from: the bootstrap loader, the system loader, the context loader (if one is present) and finally the loader specified.
java.awt.datatransfer.DataFlavor#toString()->String:::String representation of this DataFlavor and its parameters
java.awt.datatransfer.DataFlavor#getTextPlainUnicodeFlavor()->DataFlavor:::Returns a DataFlavor representing plain text with Unicode encoding, where:      representationClass = java.io.InputStream     mimeType            = "text/plain;                            charset=&lt;platform default Unicode encoding&gt;" 
java.awt.datatransfer.DataFlavor#selectBestTextFlavor(DataFlavor[])->DataFlavor:::Selects the best text DataFlavor from an array of DataFlavors
java.awt.datatransfer.DataFlavor#getReaderForText(Transferable)->Reader:::Gets a Reader for a text flavor, decoded, if necessary, for the expected charset (encoding)
java.awt.datatransfer.DataFlavor#getMimeType()->String:::Returns the MIME type string for this DataFlavor.
java.awt.datatransfer.DataFlavor#getRepresentationClass()->Class:::Returns the Class which objects supporting this DataFlavor will return when this DataFlavor is requested.
java.awt.datatransfer.DataFlavor#getHumanPresentableName()->String:::Returns the human presentable name for the data format that this DataFlavor represents
java.awt.datatransfer.DataFlavor#getPrimaryType()->String:::Returns the primary MIME type for this DataFlavor.
java.awt.datatransfer.DataFlavor#getSubType()->String:::Returns the sub MIME type of this DataFlavor.
java.awt.datatransfer.DataFlavor#getParameter(String)->String:::Returns the human presentable name for this DataFlavor if paramName equals "humanPresentableName"
java.awt.datatransfer.DataFlavor#setHumanPresentableName(String)->void:::Sets the human presentable name for the data format that this DataFlavor represents
java.awt.datatransfer.DataFlavor#equals(Object)->boolean:::The equals comparison for the {@code DataFlavor class is implemented as follows: Two DataFlavors are considered equal if and only if their MIME primary type and subtype and representation class are equal
java.awt.datatransfer.DataFlavor#equals(DataFlavor)->boolean:::This method has the same behavior as #equals(Object)
java.awt.datatransfer.DataFlavor#equals(String)->boolean:::Compares only the mimeType against the passed in String and representationClass is not considered in the comparison
java.awt.datatransfer.DataFlavor#hashCode()->int:::Returns hash code for this DataFlavor
java.awt.datatransfer.DataFlavor#match(DataFlavor)->boolean:::Identical to #equals(DataFlavor).
java.awt.datatransfer.DataFlavor#isMimeTypeEqual(String)->boolean:::Returns whether the string representation of the MIME type passed in is equivalent to the MIME type of this DataFlavor
java.awt.datatransfer.DataFlavor#isMimeTypeEqual(DataFlavor)->boolean:::Compares the mimeType of two DataFlavor objects
java.awt.datatransfer.DataFlavor#isMimeTypeSerializedObject()->boolean:::Does the DataFlavor represent a serialized object?
java.awt.datatransfer.DataFlavor#getDefaultRepresentationClass()->Class:::Returns the default representation class.
java.awt.datatransfer.DataFlavor#getDefaultRepresentationClassAsString()->String:::Returns the name of the default representation class.
java.awt.datatransfer.DataFlavor#isRepresentationClassInputStream()->boolean:::Does the DataFlavor represent a java.io.InputStream?
java.awt.datatransfer.DataFlavor#isRepresentationClassReader()->boolean:::Returns whether the representation class for this DataFlavor is java.io.Reader or a subclass thereof.
java.awt.datatransfer.DataFlavor#isRepresentationClassCharBuffer()->boolean:::Returns whether the representation class for this DataFlavor is java.nio.CharBuffer or a subclass thereof.
java.awt.datatransfer.DataFlavor#isRepresentationClassByteBuffer()->boolean:::Returns whether the representation class for this DataFlavor is java.nio.ByteBuffer or a subclass thereof.
java.awt.datatransfer.DataFlavor#isRepresentationClassSerializable()->boolean:::Returns true if the representation class can be serialized.
java.awt.datatransfer.DataFlavor#isRepresentationClassRemote()->boolean:::Returns true if the representation class is Remote.
java.awt.datatransfer.DataFlavor#isFlavorSerializedObjectType()->boolean:::Returns true if the DataFlavor specified represents a serialized object.
java.awt.datatransfer.DataFlavor#isFlavorRemoteObjectType()->boolean:::Returns true if the DataFlavor specified represents a remote object.
java.awt.datatransfer.DataFlavor#isFlavorJavaFileListType()->boolean:::Returns true if the DataFlavor specified represents a list of file objects.
java.awt.datatransfer.DataFlavor#isFlavorTextType()->boolean:::Returns whether this DataFlavor is a valid text flavor for this implementation of the Java platform
java.awt.datatransfer.DataFlavor#writeExternal(ObjectOutput)->void:::Serializes this DataFlavor.
java.awt.datatransfer.DataFlavor#readExternal(ObjectInput)->void:::Restores this DataFlavor from a Serialized state.
java.awt.datatransfer.DataFlavor#clone()->Object:::Returns a clone of this DataFlavor.
java.awt.datatransfer.DataFlavor#normalizeMimeTypeParameter(String, String)->String:::Called on DataFlavor for every MIME Type parameter to allow DataFlavor subclasses to handle special parameters like the text/plain charset parameters, whose values are case insensitive
java.awt.datatransfer.DataFlavor#normalizeMimeType(String)->String:::Called for each MIME type string to give DataFlavor subtypes the opportunity to change how the normalization of MIME types is accomplished
java.awt.datatransfer.FlavorListener#flavorsChanged(FlavorEvent)->void:::Invoked when the target Clipboard of the listener has changed its available DataFlavors
java.awt.datatransfer.FlavorMap#getNativesForFlavors(DataFlavor[])->Map:::Returns a Map of the specified DataFlavors to their corresponding String native
java.awt.datatransfer.FlavorMap#getFlavorsForNatives(String[])->Map:::Returns a Map of the specified String natives to their corresponding DataFlavor
java.awt.datatransfer.FlavorTable#getNativesForFlavor(DataFlavor)->List:::Returns a List of String natives to which the specified DataFlavor corresponds
java.awt.datatransfer.FlavorTable#getFlavorsForNative(String)->List:::Returns a List of DataFlavors to which the specified String corresponds
java.awt.datatransfer.MimeType#hashCode()->int::: mime type hash code
java.awt.datatransfer.MimeType#equals(Object)->boolean:::MimeTypes are equal if their primary types, subtypes, and parameters are all equal
java.awt.datatransfer.MimeType#getPrimaryType()->String:::Retrieve the primary type of this object.
java.awt.datatransfer.MimeType#getSubType()->String:::Retrieve the sub type of this object.
java.awt.datatransfer.MimeType#getParameters()->MimeTypeParameterList:::Retrieve a copy of this object's parameter list.
java.awt.datatransfer.MimeType#getParameter(String)->String:::Retrieve the value associated with the given name, or null if there is no current association.
java.awt.datatransfer.MimeType#setParameter(String, String)->void:::Set the value to be associated with the given name, replacing any previous association.
java.awt.datatransfer.MimeType#removeParameter(String)->void:::Remove any value associated with the given name.
java.awt.datatransfer.MimeType#toString()->String:::Return the String representation of this object.
java.awt.datatransfer.MimeType#getBaseType()->String:::Return a String representation of this object without the parameter list.
java.awt.datatransfer.MimeType#match(MimeType)->boolean:::Returns true if the primary type and the subtype of this object are the same as the specified type; otherwise returns false.
java.awt.datatransfer.MimeType#match(String)->boolean:::Returns true if the primary type and the subtype of this object are the same as the content type described in rawdata; otherwise returns false.
java.awt.datatransfer.MimeType#writeExternal(ObjectOutput)->void:::The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings and arrays.
java.awt.datatransfer.MimeType#readExternal(ObjectInput)->void:::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays
java.awt.datatransfer.MimeType#clone()->Object:::Returns a clone of this object.
java.awt.datatransfer.MimeTypeParameterList#hashCode()->int::: mime type parameter list hash code
java.awt.datatransfer.MimeTypeParameterList#equals(Object)->boolean:::Two parameter lists are considered equal if they have exactly the same set of parameter names and associated values
java.awt.datatransfer.MimeTypeParameterList#parse(String)->void:::A routine for parsing the parameter list out of a String.
java.awt.datatransfer.MimeTypeParameterList#size()->int:::return the number of name-value pairs in this list.
java.awt.datatransfer.MimeTypeParameterList#isEmpty()->boolean:::Determine whether or not this list is empty.
java.awt.datatransfer.MimeTypeParameterList#get(String)->String:::Retrieve the value associated with the given name, or null if there is no current association.
java.awt.datatransfer.MimeTypeParameterList#set(String, String)->void:::Set the value to be associated with the given name, replacing any previous association.
java.awt.datatransfer.MimeTypeParameterList#remove(String)->void:::Remove any value associated with the given name.
java.awt.datatransfer.MimeTypeParameterList#getNames()->Enumeration:::Retrieve an enumeration of all the names in this list.
java.awt.datatransfer.MimeTypeParameterList#toString()->String::: mime type parameter list to string
java.awt.datatransfer.MimeTypeParameterList#clone()->Object:::Returns a clone of this object.
java.awt.datatransfer.StringSelection#getTransferDataFlavors()->DataFlavor[]:::Returns an array of flavors in which this Transferable can provide the data
java.awt.datatransfer.StringSelection#isDataFlavorSupported(DataFlavor)->boolean:::Returns whether the requested flavor is supported by this Transferable.
java.awt.datatransfer.StringSelection#getTransferData(DataFlavor)->Object:::Returns the Transferable's data in the requested DataFlavor if possible
java.awt.datatransfer.StringSelection#lostOwnership(Clipboard, Transferable)->void::: string selection lost ownership
java.awt.datatransfer.SystemFlavorMap#getDefaultFlavorMap()->FlavorMap:::Returns the default FlavorMap for this thread's ClassLoader.
java.awt.datatransfer.SystemFlavorMap#getNativesForFlavor(DataFlavor)->List:::Returns a List of String natives to which the specified DataFlavor can be translated by the data transfer subsystem
java.awt.datatransfer.SystemFlavorMap#getFlavorsForNative(String)->List:::Returns a List of DataFlavors to which the specified String native can be translated by the data transfer subsystem
java.awt.datatransfer.SystemFlavorMap#getNativesForFlavors(DataFlavor[])->Map:::Returns a Map of the specified DataFlavors to their most preferred String native
java.awt.datatransfer.SystemFlavorMap#getFlavorsForNatives(String[])->Map:::Returns a Map of the specified String natives to their most preferred DataFlavor
java.awt.datatransfer.SystemFlavorMap#addUnencodedNativeForFlavor(DataFlavor, String)->void:::Adds a mapping from the specified DataFlavor (and all DataFlavors equal to the specified DataFlavor) to the specified String native
java.awt.datatransfer.SystemFlavorMap#setNativesForFlavor(DataFlavor, String[])->void:::Discards the current mappings for the specified DataFlavor and all DataFlavors equal to the specified DataFlavor, and creates new mappings to the specified String natives
java.awt.datatransfer.SystemFlavorMap#addFlavorForUnencodedNative(String, DataFlavor)->void:::Adds a mapping from a single String native to a single DataFlavor
java.awt.datatransfer.SystemFlavorMap#setFlavorsForNative(String, DataFlavor[])->void:::Discards the current mappings for the specified String native, and creates new mappings to the specified DataFlavors
java.awt.datatransfer.SystemFlavorMap#encodeJavaMIMEType(String)->String:::Encodes a MIME type for use as a String native
java.awt.datatransfer.SystemFlavorMap#encodeDataFlavor(DataFlavor)->String:::Encodes a DataFlavor for use as a String native
java.awt.datatransfer.SystemFlavorMap#isJavaMIMEType(String)->boolean:::Returns whether the specified String is an encoded Java MIME type.
java.awt.datatransfer.SystemFlavorMap#decodeJavaMIMEType(String)->String:::Decodes a String native for use as a Java MIME type.
java.awt.datatransfer.SystemFlavorMap#decodeDataFlavor(String)->DataFlavor:::Decodes a String native for use as a DataFlavor.
java.awt.datatransfer.Transferable#getTransferDataFlavors()->DataFlavor[]:::Returns an array of DataFlavor objects indicating the flavors the data can be provided in
java.awt.datatransfer.Transferable#isDataFlavorSupported(DataFlavor)->boolean:::Returns whether or not the specified data flavor is supported for this object.
java.awt.datatransfer.Transferable#getTransferData(DataFlavor)->Object:::Returns an object which represents the data to be transferred

AccessibleObject#setAccessible(AccessibleObject[], boolean):::Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency)
AccessibleObject#setAccessible(boolean):::Set the accessible flag for this reflected object to the indicated boolean value
AccessibleObject#setAccessible0(boolean):::Sets the accessible flag and returns the new value
AccessibleObject#trySetAccessible():::Set the accessible flag for this reflected object to true if possible
AccessibleObject#checkCanSetAccessible(Class):::If the given AccessibleObject is a Constructor, Method or Field then checks that its declaring class is in a package that can be accessed by the given caller of setAccessible.
AccessibleObject#toShortString():::Returns a short descriptive string to describe this object in log messages.
AccessibleObject#isAccessible():::Get the value of the accessible flag for this reflected object.
AccessibleObject#canAccess(Object):::Test if the caller can access this reflected object
AccessibleObject#getRoot():::Returns the root AccessibleObject; or null if this object is the root
AnnotatedArrayType#getAnnotatedGenericComponentType():::Returns the potentially annotated generic component type of this array type.
AnnotatedArrayType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedElement#isAnnotationPresent(Class):::Returns true if an annotation for the specified type is present on this element, else false
AnnotatedElement#getAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is present, else null.
AnnotatedElement#getAnnotations():::Returns annotations that are present on this element
AnnotatedElement#getAnnotationsByType(Class):::Returns annotations that are associated with this element
AnnotatedElement#getDeclaredAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is directly present, else null
AnnotatedElement#getDeclaredAnnotationsByType(Class):::Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present
AnnotatedElement#getDeclaredAnnotations():::Returns annotations that are directly present on this element
AnnotatedParameterizedType#getAnnotatedActualTypeArguments():::Returns the potentially annotated actual type arguments of this parameterized type.
AnnotatedParameterizedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedType#getType():::Returns the underlying type that this annotated type represents.
AnnotatedTypeVariable#getAnnotatedBounds():::Returns the potentially annotated bounds of this type variable
AnnotatedTypeVariable#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedWildcardType#getAnnotatedLowerBounds():::Returns the potentially annotated lower bounds of this wildcard type
AnnotatedWildcardType#getAnnotatedUpperBounds():::Returns the potentially annotated upper bounds of this wildcard type
AnnotatedWildcardType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
Array#newInstance(Class, int):::Creates a new array with the specified component type and length
Array#newInstance(Class, int...):::Creates a new array with the specified component type and dimensions
Array#getLength(Object):::Returns the length of the specified array object, as an int.
Array#get(Object, int):::Returns the value of the indexed component in the specified array object
Array#getBoolean(Object, int):::Returns the value of the indexed component in the specified array object, as a boolean.
Array#getByte(Object, int):::Returns the value of the indexed component in the specified array object, as a byte.
Array#getChar(Object, int):::Returns the value of the indexed component in the specified array object, as a char.
Array#getShort(Object, int):::Returns the value of the indexed component in the specified array object, as a short.
Array#getInt(Object, int):::Returns the value of the indexed component in the specified array object, as an int.
Array#getLong(Object, int):::Returns the value of the indexed component in the specified array object, as a long.
Array#getFloat(Object, int):::Returns the value of the indexed component in the specified array object, as a float.
Array#getDouble(Object, int):::Returns the value of the indexed component in the specified array object, as a double.
Array#set(Object, int, Object):::Sets the value of the indexed component of the specified array object to the specified new value
Array#setBoolean(Object, int, boolean):::Sets the value of the indexed component of the specified array object to the specified boolean value.
Array#setByte(Object, int, byte):::Sets the value of the indexed component of the specified array object to the specified byte value.
Array#setChar(Object, int, char):::Sets the value of the indexed component of the specified array object to the specified char value.
Array#setShort(Object, int, short):::Sets the value of the indexed component of the specified array object to the specified short value.
Array#setInt(Object, int, int):::Sets the value of the indexed component of the specified array object to the specified int value.
Array#setLong(Object, int, long):::Sets the value of the indexed component of the specified array object to the specified long value.
Array#setFloat(Object, int, float):::Sets the value of the indexed component of the specified array object to the specified float value.
Array#setDouble(Object, int, double):::Sets the value of the indexed component of the specified array object to the specified double value.
Constructor#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Constructor
Constructor#setAccessible(boolean):::A {@code SecurityException is also thrown if this object is a Constructor object for the class Class and flag is true
Constructor#getDeclaringClass():::Returns the Class object representing the class that declares the constructor represented by this object.
Constructor#getName():::Returns the name of this constructor, as a string
Constructor#equals(Object):::Compares this Constructor against the specified object
Constructor#hashCode():::Returns a hashcode for this Constructor
Constructor#toString():::Returns a string describing this Constructor
Constructor#toGenericString():::Returns a string describing this Constructor, including type parameters
Constructor#newInstance(Object...):::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters
Executable#getAnnotationBytes():::Accessor method to allow code sharing
Executable#hasGenericInformation():::Does the Executable have generic information.
Executable#specificToStringHeader(StringBuilder):::Generate toString header information specific to a method or constructor.
Executable#specificToGenericStringHeader(StringBuilder):::Generate toGenericString header information specific to a method or constructor.
Executable#getDeclaringClass():::Returns the Class object representing the class or interface that declares the executable represented by this object.
Executable#getName():::Returns the name of the executable represented by this object.
Executable#getModifiers():::Returns the Java language Modifier modifiers for the executable represented by this object.
Executable#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
Executable#getParameterTypes():::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Executable#getParameterCount():::Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
Executable#getGenericParameterTypes():::Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Executable#getAllGenericParameterTypes():::Behaves like getGenericParameterTypes, but returns type information for all parameters, including synthetic parameters.
Executable#getParameters():::Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object
Executable#getExceptionTypes():::Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object
Executable#getGenericExceptionTypes():::Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object
Executable#toGenericString():::Returns a string describing this Executable, including any type parameters.
Executable#isVarArgs():::Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Executable#isSynthetic():::Returns true if this executable is a synthetic construct; returns false otherwise.
Executable#getParameterAnnotations():::Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object
Executable#getAnnotatedReturnType():::Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable
Executable#getAnnotatedReceiverType():::Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object
Executable#getAnnotatedParameterTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable
Executable#getAnnotatedExceptionTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable
Field#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field
Field#getDeclaringClass():::Returns the Class object representing the class or interface that declares the field represented by this Field object.
Field#getName():::Returns the name of the field represented by this Field object.
Field#getModifiers():::Returns the Java language modifiers for the field represented by this Field object, as an integer
Field#isEnumConstant():::Returns true if this field represents an element of an enumerated type; returns false otherwise.
Field#isSynthetic():::Returns true if this field is a synthetic field; returns false otherwise.
Field#getType():::Returns a Class object that identifies the declared type for the field represented by this Field object.
Field#getGenericType():::Returns a Type object that represents the declared type for the field represented by this Field object
Field#equals(Object):::Compares this Field against the specified object
Field#hashCode():::Returns a hashcode for this Field
Field#toString():::Returns a string describing this Field
Field#toGenericString():::Returns a string describing this Field, including its generic type
Field#get(Object):::Returns the value of the field represented by this Field, on the specified object
Field#getBoolean(Object):::Gets the value of a static or instance boolean field.
Field#getByte(Object):::Gets the value of a static or instance byte field.
Field#getChar(Object):::Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.
Field#getShort(Object):::Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.
Field#getInt(Object):::Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.
Field#getLong(Object):::Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.
Field#getFloat(Object):::Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.
Field#getDouble(Object):::Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.
Field#set(Object, Object):::Sets the field represented by this Field object on the specified object argument to the specified new value
Field#setBoolean(Object, boolean):::Sets the value of a field as a boolean on the specified object
Field#setByte(Object, byte):::Sets the value of a field as a byte on the specified object
Field#setChar(Object, char):::Sets the value of a field as a char on the specified object
Field#setShort(Object, short):::Sets the value of a field as a short on the specified object
Field#setInt(Object, int):::Sets the value of a field as an int on the specified object
Field#setLong(Object, long):::Sets the value of a field as a long on the specified object
Field#setFloat(Object, float):::Sets the value of a field as a float on the specified object
Field#setDouble(Object, double):::Sets the value of a field as a double on the specified object
Field#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.
GenericArrayType#getGenericComponentType():::Returns a Type object representing the component type of this array
GenericDeclaration#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
InvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation on a proxy instance and returns the result
InvocationTargetException#getTargetException():::Get the thrown target exception
InvocationTargetException#getCause():::Returns the cause of this exception (the thrown target exception, which may be null).
Member#getDeclaringClass():::Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.
Member#getName():::Returns the simple name of the underlying member or constructor represented by this Member.
Member#getModifiers():::Returns the Java language modifiers for the member or constructor represented by this Member, as an integer
Member#isSynthetic():::Returns true if this member was introduced by the compiler; returns false otherwise.
Method#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method
Method#leafCopy():::Make a copy of a leaf method.
Method#getDeclaringClass():::Returns the Class object representing the class or interface that declares the method represented by this object.
Method#getName():::Returns the name of the method represented by this Method object, as a String.
Method#getReturnType():::Returns a Class object that represents the formal return type of the method represented by this Method object.
Method#getGenericReturnType():::Returns a Type object that represents the formal return type of the method represented by this Method object
Method#equals(Object):::Compares this Method against the specified object
Method#hashCode():::Returns a hashcode for this Method
Method#toString():::Returns a string describing this Method
Method#toGenericString():::Returns a string describing this Method, including type parameters
Method#invoke(Object, Object...):::Invokes the underlying method represented by this Method object, on the specified object with the specified parameters
Method#isBridge():::Returns true if this method is a bridge method; returns false otherwise.
Method#isDefault():::Returns true if this method is a default method; returns false otherwise
Method#getDefaultValue():::Returns the default value for the annotation member represented by this Method instance
Modifier#isPublic(int):::Return true if the integer argument includes the public modifier, false otherwise.
Modifier#isPrivate(int):::Return true if the integer argument includes the private modifier, false otherwise.
Modifier#isProtected(int):::Return true if the integer argument includes the protected modifier, false otherwise.
Modifier#isStatic(int):::Return true if the integer argument includes the static modifier, false otherwise.
Modifier#isFinal(int):::Return true if the integer argument includes the final modifier, false otherwise.
Modifier#isSynchronized(int):::Return true if the integer argument includes the synchronized modifier, false otherwise.
Modifier#isVolatile(int):::Return true if the integer argument includes the volatile modifier, false otherwise.
Modifier#isTransient(int):::Return true if the integer argument includes the transient modifier, false otherwise.
Modifier#isNative(int):::Return true if the integer argument includes the native modifier, false otherwise.
Modifier#isInterface(int):::Return true if the integer argument includes the interface modifier, false otherwise.
Modifier#isAbstract(int):::Return true if the integer argument includes the abstract modifier, false otherwise.
Modifier#isStrict(int):::Return true if the integer argument includes the strictfp modifier, false otherwise.
Modifier#toString(int):::Return a string describing the access modifier flags in the specified modifier
Modifier#classModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a class.
Modifier#interfaceModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to an interface.
Modifier#constructorModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a constructor.
Modifier#methodModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a method.
Modifier#fieldModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a field.
Modifier#parameterModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a parameter.
Parameter#equals(Object):::Compares based on the executable and the index.
Parameter#hashCode():::Returns a hash code based on the executable's hash code and the index.
Parameter#isNamePresent():::Returns true if the parameter has a name according to the class file; returns false otherwise
Parameter#toString():::Returns a string describing this parameter
Parameter#getDeclaringExecutable():::Return the Executable which declares this parameter.
Parameter#getModifiers():::Get the modifier flags for this the parameter represented by this Parameter object.
Parameter#getName():::Returns the name of the parameter
Parameter#getParameterizedType():::Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.
Parameter#getType():::Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.
Parameter#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
Parameter#isImplicit():::Returns true if this parameter is implicitly declared in source code; returns false otherwise.
Parameter#isSynthetic():::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
Parameter#isVarArgs():::Returns true if this parameter represents a variable argument list; returns false otherwise.
ParameterizedType#getActualTypeArguments():::Returns an array of Type objects representing the actual type arguments to this type
ParameterizedType#getRawType():::Returns the Type object representing the class or interface that declared this type.
ParameterizedType#getOwnerType():::Returns a Type object representing the type that this type is a member of
Proxy#getProxyClass(ClassLoader, Class...):::Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces
Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler):::Returns a proxy instance for the specified interfaces that dispatches method invocations to the specified invocation handler
Proxy#isProxyClass(Class):::Returns true if the given class is a proxy class.
Proxy#getInvocationHandler(Object):::Returns the invocation handler for the specified proxy instance.
ProxyGenerator#generateProxyClass(String, Class[]):::Generate a public proxy class given a name and a list of proxy interfaces.
ProxyGenerator#generateProxyClass(String, Class[], int):::Generate a proxy class given a name and a list of proxy interfaces.
Type#getTypeName():::Returns a string describing this type, including information about any type parameters.
TypeVariable#getBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable
TypeVariable#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration declared this type variable.
TypeVariable#getName():::Returns the name of this type variable, as it occurs in the source code.
TypeVariable#getAnnotatedBounds():::Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable
UndeclaredThrowableException#getUndeclaredThrowable():::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null
UndeclaredThrowableException#getCause():::Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null).
WildcardType#getUpperBounds():::Returns an array of Type objects representing the  upper bound(s) of this type variable
WildcardType#getLowerBounds():::Returns an array of Type objects representing the lower bound(s) of this type variable

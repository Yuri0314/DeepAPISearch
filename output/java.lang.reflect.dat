AccessibleObject#setAccessible(AccessibleObject[], boolean):::Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency):::checkPermission->if->caller->Reflection->getCallerClass->array->clone->foreach->ao->checkCanSetAccessible->foreach->ao->setAccessible0
AccessibleObject#setAccessible(boolean):::Set the accessible flag for this reflected object to the indicated boolean value:::AccessibleObject->checkPermission->setAccessible0
AccessibleObject#setAccessible0(boolean):::Sets the accessible flag and returns the new value:::return
AccessibleObject#trySetAccessible():::Set the accessible flag for this reflected object to true if possible:::AccessibleObject->checkPermission->if->return->if->isInstance->return->setAccessible0->declaringClass->getDeclaringClass->if->return->if->Reflection->getCallerClass->checkCanSetAccessible->return->setAccessible0->else->return
AccessibleObject#checkCanSetAccessible(Class):::If the given AccessibleObject is a Constructor, Method or Field then checks that its declaring class is in a package that can be accessed by the given caller of setAccessible.:::
AccessibleObject#toShortString():::Returns a short descriptive string to describe this object in log messages.:::return->toString
AccessibleObject#isAccessible():::Get the value of the accessible flag for this reflected object.:::return
AccessibleObject#canAccess(Object):::Test if the caller can access this reflected object:::if->isInstance->return->declaringClass->getDeclaringClass->modifiers->getModifiers->if->Modifier->isStatic->if->throw->new->IllegalArgumentException->if->declaringClass->obj->getClass->isAssignableFrom->throw->declaringClass->getName->new->IllegalArgumentException->else->if->throw->new->IllegalArgumentException->if->return->caller->Reflection->getCallerClass->targetClass->if->else->Modifier->isStatic->obj->getClass->return->verifyAccess
AccessibleObject#getRoot():::Returns the root AccessibleObject; or null if this object is the root:::throw->new->InternalError
AnnotatedArrayType#getAnnotatedGenericComponentType():::Returns the potentially annotated generic component type of this array type.:::
AnnotatedArrayType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedElement#isAnnotationPresent(Class):::Returns true if an annotation for the specified type is present on this element, else false:::return->getAnnotation
AnnotatedElement#getAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is present, else null.:::
AnnotatedElement#getAnnotations():::Returns annotations that are present on this element:::
AnnotatedElement#getAnnotationsByType(Class):::Returns annotations that are associated with this element:::result->getDeclaredAnnotationsByType->if->AnnotationType->getInstance->isInherited->superClass->getSuperclass->if->superClass->getAnnotationsByType->return
AnnotatedElement#getDeclaredAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is directly present, else null:::Objects->requireNonNull->foreach->getDeclaredAnnotations->if->annotationClass->annotation->annotationType->equals->return->annotationClass->cast->return
AnnotatedElement#getDeclaredAnnotationsByType(Class):::Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present:::Objects->requireNonNull->return->AnnotationSupport->Arrays->getDeclaredAnnotations->stream->Collectors->Annotation->annotationType->Function->identity->LinkedHashMap->new->toMap->collect->getDirectlyAndIndirectlyPresent
AnnotatedElement#getDeclaredAnnotations():::Returns annotations that are directly present on this element:::
AnnotatedParameterizedType#getAnnotatedActualTypeArguments():::Returns the potentially annotated actual type arguments of this parameterized type.:::
AnnotatedParameterizedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::return
AnnotatedType#getType():::Returns the underlying type that this annotated type represents.:::
AnnotatedTypeVariable#getAnnotatedBounds():::Returns the potentially annotated bounds of this type variable:::
AnnotatedTypeVariable#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedWildcardType#getAnnotatedLowerBounds():::Returns the potentially annotated lower bounds of this wildcard type:::
AnnotatedWildcardType#getAnnotatedUpperBounds():::Returns the potentially annotated upper bounds of this wildcard type:::
AnnotatedWildcardType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
Array#newInstance(Class, int):::Creates a new array with the specified component type and length:::return->newArray
Array#newInstance(Class, int...):::Creates a new array with the specified component type and dimensions:::return->multiNewArray
Array#getLength(Object):::Returns the length of the specified array object, as an int.:::
Array#get(Object, int):::Returns the value of the indexed component in the specified array object:::
Array#getBoolean(Object, int):::Returns the value of the indexed component in the specified array object, as a boolean.:::
Array#getByte(Object, int):::Returns the value of the indexed component in the specified array object, as a byte.:::
Array#getChar(Object, int):::Returns the value of the indexed component in the specified array object, as a char.:::
Array#getShort(Object, int):::Returns the value of the indexed component in the specified array object, as a short.:::
Array#getInt(Object, int):::Returns the value of the indexed component in the specified array object, as an int.:::
Array#getLong(Object, int):::Returns the value of the indexed component in the specified array object, as a long.:::
Array#getFloat(Object, int):::Returns the value of the indexed component in the specified array object, as a float.:::
Array#getDouble(Object, int):::Returns the value of the indexed component in the specified array object, as a double.:::
Array#set(Object, int, Object):::Sets the value of the indexed component of the specified array object to the specified new value:::
Array#setBoolean(Object, int, boolean):::Sets the value of the indexed component of the specified array object to the specified boolean value.:::
Array#setByte(Object, int, byte):::Sets the value of the indexed component of the specified array object to the specified byte value.:::
Array#setChar(Object, int, char):::Sets the value of the indexed component of the specified array object to the specified char value.:::
Array#setShort(Object, int, short):::Sets the value of the indexed component of the specified array object to the specified short value.:::
Array#setInt(Object, int, int):::Sets the value of the indexed component of the specified array object to the specified int value.:::
Array#setLong(Object, int, long):::Sets the value of the indexed component of the specified array object to the specified long value.:::
Array#setFloat(Object, int, float):::Sets the value of the indexed component of the specified array object to the specified float value.:::
Array#setDouble(Object, int, double):::Sets the value of the indexed component of the specified array object to the specified double value.:::
Constructor#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Constructor:::if->throw->new->IllegalArgumentException->res->new->Constructor<>->return
Constructor#setAccessible(boolean):::A {@code SecurityException is also thrown if this object is a Constructor object for the class Class and flag is true:::AccessibleObject->checkPermission->if->Reflection->getCallerClass->checkCanSetAccessible->setAccessible0
Constructor#getDeclaringClass():::Returns the Class object representing the class that declares the constructor represented by this object.:::return
Constructor#getName():::Returns the name of this constructor, as a string:::return->getDeclaringClass->getName
Constructor#equals(Object):::Compares this Constructor against the specified object:::if->other->if->getDeclaringClass->other->getDeclaringClass->return->equalParamTypes->return
Constructor#hashCode():::Returns a hashcode for this Constructor:::return->getDeclaringClass->getName->hashCode
Constructor#toString():::Returns a string describing this Constructor:::return->Modifier->constructorModifiers->sharedToString
Constructor#toGenericString():::Returns a string describing this Constructor, including type parameters:::return->Modifier->constructorModifiers->sharedToGenericString
Constructor#newInstance(Object...):::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters:::if->caller->Reflection->getCallerClass->checkAccess->if->clazz->getModifiers->throw->new->IllegalArgumentException->ca->if->acquireConstructorAccessor->inst->ca->newInstance->return
Executable#getAnnotationBytes():::Accessor method to allow code sharing:::
Executable#hasGenericInformation():::Does the Executable have generic information.:::
Executable#specificToStringHeader(StringBuilder):::Generate toString header information specific to a method or constructor.:::
Executable#specificToGenericStringHeader(StringBuilder):::Generate toGenericString header information specific to a method or constructor.:::
Executable#getDeclaringClass():::Returns the Class object representing the class or interface that declares the executable represented by this object.:::
Executable#getName():::Returns the name of the executable represented by this object.:::
Executable#getModifiers():::Returns the Java language Modifier modifiers for the executable represented by this object.:::
Executable#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::
Executable#getParameterTypes():::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object:::
Executable#getParameterCount():::Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.:::throw->new->AbstractMethodError
Executable#getGenericParameterTypes():::Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object:::if->hasGenericInformation->return->getGenericInfo->getParameterTypes->else->return->getParameterTypes
Executable#getAllGenericParameterTypes():::Behaves like getGenericParameterTypes, but returns type information for all parameters, including synthetic parameters.:::genericInfo->hasGenericInformation->if->return->getParameterTypes->else->realParamData->hasRealParameterData->genericParamTypes->getGenericParameterTypes->nonGenericParamTypes->getParameterTypes->out->new->TypeArr->params->getParameters->fromidx->if->for->i->else->return->return
Executable#getParameters():::Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object:::return->privateGetParameters->clone
Executable#getExceptionTypes():::Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object:::
Executable#getGenericExceptionTypes():::Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object:::result->if->hasGenericInformation->getGenericInfo->getExceptionTypes->return->else->return->getExceptionTypes
Executable#toGenericString():::Returns a string describing this Executable, including any type parameters.:::
Executable#isVarArgs():::Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.:::return->getModifiers
Executable#isSynthetic():::Returns true if this executable is a synthetic construct; returns false otherwise.:::return->Modifier->getModifiers->isSynthetic
Executable#getParameterAnnotations():::Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object:::
Executable#getAnnotatedReturnType():::Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable:::
Executable#getAnnotatedReceiverType():::Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object:::if->Modifier->this->getModifiers->isStatic->return->return->TypeAnnotationParser->getTypeAnnotationBytes0->SharedSecrets->getJavaLangAccess->getDeclaringClass->getConstantPool->getDeclaringClass->getDeclaringClass->buildAnnotatedType
Executable#getAnnotatedParameterTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable:::return->TypeAnnotationParser->getTypeAnnotationBytes0->SharedSecrets->getJavaLangAccess->getDeclaringClass->getConstantPool->getDeclaringClass->getAllGenericParameterTypes->buildAnnotatedTypes
Executable#getAnnotatedExceptionTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable:::return->TypeAnnotationParser->getTypeAnnotationBytes0->SharedSecrets->getJavaLangAccess->getDeclaringClass->getConstantPool->getDeclaringClass->getGenericExceptionTypes->buildAnnotatedTypes
Field#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field:::if->throw->new->IllegalArgumentException->res->new->Field->return
Field#getDeclaringClass():::Returns the Class object representing the class or interface that declares the field represented by this Field object.:::return
Field#getName():::Returns the name of the field represented by this Field object.:::return
Field#getModifiers():::Returns the Java language modifiers for the field represented by this Field object, as an integer:::return
Field#isEnumConstant():::Returns true if this field represents an element of an enumerated type; returns false otherwise.:::return->getModifiers
Field#isSynthetic():::Returns true if this field is a synthetic field; returns false otherwise.:::return->Modifier->getModifiers->isSynthetic
Field#getType():::Returns a Class object that identifies the declared type for the field represented by this Field object.:::return
Field#getGenericType():::Returns a Type object that represents the declared type for the field represented by this Field object:::if->getGenericSignature->return->getGenericInfo->getGenericType->else->return->getType
Field#equals(Object):::Compares this Field against the specified object:::if->other->return->getDeclaringClass->other->getDeclaringClass->getName->other->getName->getType->other->getType->return
Field#hashCode():::Returns a hashcode for this Field:::return->getDeclaringClass->getName->hashCode->getName->hashCode
Field#toString():::Returns a string describing this Field:::mod->getModifiers->return->Modifier->toString->getType->getTypeName->getDeclaringClass->getTypeName->getName
Field#toGenericString():::Returns a string describing this Field, including its generic type:::mod->getModifiers->fieldType->getGenericType->return->Modifier->toString->fieldType->getTypeName->getDeclaringClass->getTypeName->getName
Field#get(Object):::Returns the value of the field represented by this Field, on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->get
Field#getBoolean(Object):::Gets the value of a static or instance boolean field.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getBoolean
Field#getByte(Object):::Gets the value of a static or instance byte field.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getByte
Field#getChar(Object):::Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getChar
Field#getShort(Object):::Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getShort
Field#getInt(Object):::Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getInt
Field#getLong(Object):::Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getLong
Field#getFloat(Object):::Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getFloat
Field#getDouble(Object):::Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.:::if->caller->Reflection->getCallerClass->checkAccess->return->getFieldAccessor->getDouble
Field#set(Object, Object):::Sets the field represented by this Field object on the specified object argument to the specified new value:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->set
Field#setBoolean(Object, boolean):::Sets the value of a field as a boolean on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setBoolean
Field#setByte(Object, byte):::Sets the value of a field as a byte on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setByte
Field#setChar(Object, char):::Sets the value of a field as a char on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setChar
Field#setShort(Object, short):::Sets the value of a field as a short on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setShort
Field#setInt(Object, int):::Sets the value of a field as an int on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setInt
Field#setLong(Object, long):::Sets the value of a field as a long on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setLong
Field#setFloat(Object, float):::Sets the value of a field as a float on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setFloat
Field#setDouble(Object, double):::Sets the value of a field as a double on the specified object:::if->caller->Reflection->getCallerClass->checkAccess->getFieldAccessor->setDouble
Field#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.:::return->TypeAnnotationParser->getTypeAnnotationBytes0->SharedSecrets->getJavaLangAccess->getDeclaringClass->getConstantPool->getDeclaringClass->getGenericType->buildAnnotatedType
GenericArrayType#getGenericComponentType():::Returns a Type object representing the component type of this array:::
GenericDeclaration#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::
InvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation on a proxy instance and returns the result:::
InvocationTargetException#getTargetException():::Get the thrown target exception:::return
InvocationTargetException#getCause():::Returns the cause of this exception (the thrown target exception, which may be null).:::return
Member#getDeclaringClass():::Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.:::
Member#getName():::Returns the simple name of the underlying member or constructor represented by this Member.:::
Member#getModifiers():::Returns the Java language modifiers for the member or constructor represented by this Member, as an integer:::
Member#isSynthetic():::Returns true if this member was introduced by the compiler; returns false otherwise.:::
Method#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method:::if->throw->new->IllegalArgumentException->res->new->Method->return
Method#leafCopy():::Make a copy of a leaf method.:::if->throw->new->IllegalArgumentException->res->new->Method->return
Method#getDeclaringClass():::Returns the Class object representing the class or interface that declares the method represented by this object.:::return
Method#getName():::Returns the name of the method represented by this Method object, as a String.:::return
Method#getReturnType():::Returns a Class object that represents the formal return type of the method represented by this Method object.:::return
Method#getGenericReturnType():::Returns a Type object that represents the formal return type of the method represented by this Method object:::if->getGenericSignature->return->getGenericInfo->getReturnType->else->return->getReturnType
Method#equals(Object):::Compares this Method against the specified object:::if->other->if->getDeclaringClass->other->getDeclaringClass->getName->other->getName->if->returnType->other->getReturnType->equals->return->return->equalParamTypes->return
Method#hashCode():::Returns a hashcode for this Method:::return->getDeclaringClass->getName->hashCode->getName->hashCode
Method#toString():::Returns a string describing this Method:::return->Modifier->methodModifiers->isDefault->sharedToString
Method#toGenericString():::Returns a string describing this Method, including type parameters:::return->Modifier->methodModifiers->isDefault->sharedToGenericString
Method#invoke(Object, Object...):::Invokes the underlying method represented by this Method object, on the specified object with the specified parameters:::if->caller->Reflection->getCallerClass->Modifier->isStatic->obj->getClass->checkAccess->ma->if->acquireMethodAccessor->return->ma->invoke
Method#isBridge():::Returns true if this method is a bridge method; returns false otherwise.:::return->getModifiers
Method#isDefault():::Returns true if this method is a default method; returns false otherwise:::return->getModifiers->getDeclaringClass->isInterface
Method#getDefaultValue():::Returns the default value for the annotation member represented by this Method instance:::if->return->memberType->AnnotationType->getReturnType->invocationHandlerReturnType->result->AnnotationParser->ByteBuffer->wrap->SharedSecrets->getJavaLangAccess->getDeclaringClass->getConstantPool->getDeclaringClass->parseMemberValue->if->if->proxy->throw->proxy->typeName->proxy->getCause->new->TypeNotPresentException->throw->new->AnnotationFormatError->return
Modifier#isPublic(int):::Return true if the integer argument includes the public modifier, false otherwise.:::return
Modifier#isPrivate(int):::Return true if the integer argument includes the private modifier, false otherwise.:::return
Modifier#isProtected(int):::Return true if the integer argument includes the protected modifier, false otherwise.:::return
Modifier#isStatic(int):::Return true if the integer argument includes the static modifier, false otherwise.:::return
Modifier#isFinal(int):::Return true if the integer argument includes the final modifier, false otherwise.:::return
Modifier#isSynchronized(int):::Return true if the integer argument includes the synchronized modifier, false otherwise.:::return
Modifier#isVolatile(int):::Return true if the integer argument includes the volatile modifier, false otherwise.:::return
Modifier#isTransient(int):::Return true if the integer argument includes the transient modifier, false otherwise.:::return
Modifier#isNative(int):::Return true if the integer argument includes the native modifier, false otherwise.:::return
Modifier#isInterface(int):::Return true if the integer argument includes the interface modifier, false otherwise.:::return
Modifier#isAbstract(int):::Return true if the integer argument includes the abstract modifier, false otherwise.:::return
Modifier#isStrict(int):::Return true if the integer argument includes the strictfp modifier, false otherwise.:::return
Modifier#toString(int):::Return a string describing the access modifier flags in the specified modifier:::sj->new->StringJoiner->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->if->sj->add->return->sj->toString
Modifier#classModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a class.:::return
Modifier#interfaceModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to an interface.:::return
Modifier#constructorModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a constructor.:::return
Modifier#methodModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a method.:::return
Modifier#fieldModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a field.:::return
Modifier#parameterModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a parameter.:::return
Parameter#equals(Object):::Compares based on the executable and the index.:::if->other->return->equals->return
Parameter#hashCode():::Returns a hash code based on the executable's hash code and the index.:::return->executable->hashCode
Parameter#isNamePresent():::Returns true if the parameter has a name according to the class file; returns false otherwise:::return->executable->hasRealParameterData
Parameter#toString():::Returns a string describing this parameter:::sb->new->StringBuilder->type->getParameterizedType->typename->type->getTypeName->sb->Modifier->getModifiers->toString->append->if->sb->append->if->isVarArgs->sb->typename->replaceFirst->append->else->sb->append->sb->append->sb->getName->append->return->sb->toString
Parameter#getDeclaringExecutable():::Return the Executable which declares this parameter.:::return
Parameter#getModifiers():::Get the modifier flags for this the parameter represented by this Parameter object.:::return
Parameter#getName():::Returns the name of the parameter:::if->name->equals->return->else->return
Parameter#getParameterizedType():::Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.:::tmp->if->executable->getAllGenericParameterTypes->return
Parameter#getType():::Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.:::tmp->if->executable->getParameterTypes->return
Parameter#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.:::return->executable->getAnnotatedParameterTypes
Parameter#isImplicit():::Returns true if this parameter is implicitly declared in source code; returns false otherwise.:::return->Modifier->getModifiers->isMandated
Parameter#isSynthetic():::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.:::return->Modifier->getModifiers->isSynthetic
Parameter#isVarArgs():::Returns true if this parameter represents a variable argument list; returns false otherwise.:::return->executable->isVarArgs->executable->getParameterCount
ParameterizedType#getActualTypeArguments():::Returns an array of Type objects representing the actual type arguments to this type:::
ParameterizedType#getRawType():::Returns the Type object representing the class or interface that declared this type.:::
ParameterizedType#getOwnerType():::Returns a Type object representing the type that this type is a member of:::
Proxy#getProxyClass(ClassLoader, Class...):::Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces:::caller->System->getSecurityManager->Reflection->getCallerClass->return->getProxyConstructor->getDeclaringClass
Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler):::Returns a proxy instance for the specified interfaces that dispatches method invocations to the specified invocation handler:::Objects->requireNonNull->caller->System->getSecurityManager->Reflection->getCallerClass->cons->getProxyConstructor->return->newProxyInstance
Proxy#isProxyClass(Class):::Returns true if the given class is a proxy class.:::return->isAssignableFrom->ProxyBuilder->isProxyClass
Proxy#getInvocationHandler(Object):::Returns the invocation handler for the specified proxy instance.:::if->proxy->getClass->isProxyClass->throw->new->IllegalArgumentException->p->ih->if->System->getSecurityManager->ihClass->ih->getClass->caller->Reflection->getCallerClass->if->ReflectUtil->caller->getClassLoader->ihClass->getClassLoader->needsPackageAccessCheck->ReflectUtil->checkPackageAccess->return
ProxyGenerator#generateProxyClass(String, Class[]):::Generate a public proxy class given a name and a list of proxy interfaces.:::return->generateProxyClass
ProxyGenerator#generateProxyClass(String, Class[], int):::Generate a proxy class given a name and a list of proxy interfaces.:::gen->new->ProxyGenerator->classFile->gen->generateClassFile->if->new->java.security.PrivilegedAction<Void>->doPrivileged->return
Type#getTypeName():::Returns a string describing this type, including information about any type parameters.:::return->toString
TypeVariable#getBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable:::
TypeVariable#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration declared this type variable.:::
TypeVariable#getName():::Returns the name of this type variable, as it occurs in the source code.:::
TypeVariable#getAnnotatedBounds():::Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable:::
UndeclaredThrowableException#getUndeclaredThrowable():::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null:::return
UndeclaredThrowableException#getCause():::Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null).:::return
WildcardType#getUpperBounds():::Returns an array of Type objects representing the  upper bound(s) of this type variable:::
WildcardType#getLowerBounds():::Returns an array of Type objects representing the lower bound(s) of this type variable:::

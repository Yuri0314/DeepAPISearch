java.lang.reflect.AccessibleObject#checkPermission()->void::: accessible object check permission
java.lang.reflect.AccessibleObject#setAccessible(AccessibleObject[], boolean)->void:::Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency)
java.lang.reflect.AccessibleObject#setAccessible(boolean)->void:::Set the accessible flag for this reflected object to the indicated boolean value
java.lang.reflect.AccessibleObject#setAccessible0(boolean)->boolean:::Sets the accessible flag and returns the new value
java.lang.reflect.AccessibleObject#trySetAccessible()->boolean:::Set the accessible flag for this reflected object to true if possible
java.lang.reflect.AccessibleObject#checkCanSetAccessible(Class)->void:::If the given AccessibleObject is a Constructor, Method or Field then checks that its declaring class is in a package that can be accessed by the given caller of setAccessible.
java.lang.reflect.AccessibleObject#checkCanSetAccessible(Class, Class)->void::: accessible object check can set accessible
java.lang.reflect.AccessibleObject#toShortString()->String:::Returns a short descriptive string to describe this object in log messages.
java.lang.reflect.AccessibleObject#isAccessible()->boolean:::Get the value of the accessible flag for this reflected object.
java.lang.reflect.AccessibleObject#canAccess(Object)->boolean:::Test if the caller can access this reflected object
java.lang.reflect.AccessibleObject#getAnnotation(Class)->T::: accessible object get annotation
java.lang.reflect.AccessibleObject#isAnnotationPresent(Class)->boolean::: accessible object is annotation present
java.lang.reflect.AccessibleObject#getAnnotationsByType(Class)->T[]::: accessible object get annotations by type
java.lang.reflect.AccessibleObject#getAnnotations()->Annotation[]::: accessible object get annotations
java.lang.reflect.AccessibleObject#getDeclaredAnnotation(Class)->T::: accessible object get declared annotation
java.lang.reflect.AccessibleObject#getDeclaredAnnotationsByType(Class)->T[]::: accessible object get declared annotations by type
java.lang.reflect.AccessibleObject#getDeclaredAnnotations()->Annotation[]::: accessible object get declared annotations
java.lang.reflect.AccessibleObject#checkAccess(Class, Class, Class, int)->void::: accessible object check access
java.lang.reflect.AccessibleObject#verifyAccess(Class, Class, Class, int)->boolean::: accessible object verify access
java.lang.reflect.AccessibleObject#getRoot()->AccessibleObject:::Returns the root AccessibleObject; or null if this object is the root
java.lang.reflect.AnnotatedArrayType#getAnnotatedGenericComponentType()->AnnotatedType:::Returns the potentially annotated generic component type of this array type.
java.lang.reflect.AnnotatedArrayType#getAnnotatedOwnerType()->AnnotatedType:::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
java.lang.reflect.AnnotatedElement#isAnnotationPresent(Class)->boolean:::Returns true if an annotation for the specified type is present on this element, else false
java.lang.reflect.AnnotatedElement#getAnnotation(Class)->T:::Returns this element's annotation for the specified type if such an annotation is present, else null.
java.lang.reflect.AnnotatedElement#getAnnotations()->Annotation[]:::Returns annotations that are present on this element
java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)->T[]:::Returns annotations that are associated with this element
java.lang.reflect.AnnotatedElement#getDeclaredAnnotation(Class)->T:::Returns this element's annotation for the specified type if such an annotation is directly present, else null
java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)->T[]:::Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present
java.lang.reflect.AnnotatedElement#getDeclaredAnnotations()->Annotation[]:::Returns annotations that are directly present on this element
java.lang.reflect.AnnotatedParameterizedType#getAnnotatedActualTypeArguments()->AnnotatedType[]:::Returns the potentially annotated actual type arguments of this parameterized type.
java.lang.reflect.AnnotatedParameterizedType#getAnnotatedOwnerType()->AnnotatedType:::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
java.lang.reflect.AnnotatedType#getAnnotatedOwnerType()->AnnotatedType:::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
java.lang.reflect.AnnotatedType#getType()->Type:::Returns the underlying type that this annotated type represents.
java.lang.reflect.AnnotatedTypeVariable#getAnnotatedBounds()->AnnotatedType[]:::Returns the potentially annotated bounds of this type variable
java.lang.reflect.AnnotatedTypeVariable#getAnnotatedOwnerType()->AnnotatedType:::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
java.lang.reflect.AnnotatedWildcardType#getAnnotatedLowerBounds()->AnnotatedType[]:::Returns the potentially annotated lower bounds of this wildcard type
java.lang.reflect.AnnotatedWildcardType#getAnnotatedUpperBounds()->AnnotatedType[]:::Returns the potentially annotated upper bounds of this wildcard type
java.lang.reflect.AnnotatedWildcardType#getAnnotatedOwnerType()->AnnotatedType:::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
java.lang.reflect.Array#newInstance(Class, int)->Object:::Creates a new array with the specified component type and length
java.lang.reflect.Array#newInstance(Class, int...)->Object:::Creates a new array with the specified component type and dimensions
java.lang.reflect.Array#getLength(Object)->int:::Returns the length of the specified array object, as an int.
java.lang.reflect.Array#get(Object, int)->Object:::Returns the value of the indexed component in the specified array object
java.lang.reflect.Array#getBoolean(Object, int)->boolean:::Returns the value of the indexed component in the specified array object, as a boolean.
java.lang.reflect.Array#getByte(Object, int)->byte:::Returns the value of the indexed component in the specified array object, as a byte.
java.lang.reflect.Array#getChar(Object, int)->char:::Returns the value of the indexed component in the specified array object, as a char.
java.lang.reflect.Array#getShort(Object, int)->short:::Returns the value of the indexed component in the specified array object, as a short.
java.lang.reflect.Array#getInt(Object, int)->int:::Returns the value of the indexed component in the specified array object, as an int.
java.lang.reflect.Array#getLong(Object, int)->long:::Returns the value of the indexed component in the specified array object, as a long.
java.lang.reflect.Array#getFloat(Object, int)->float:::Returns the value of the indexed component in the specified array object, as a float.
java.lang.reflect.Array#getDouble(Object, int)->double:::Returns the value of the indexed component in the specified array object, as a double.
java.lang.reflect.Array#set(Object, int, Object)->void:::Sets the value of the indexed component of the specified array object to the specified new value
java.lang.reflect.Array#setBoolean(Object, int, boolean)->void:::Sets the value of the indexed component of the specified array object to the specified boolean value.
java.lang.reflect.Array#setByte(Object, int, byte)->void:::Sets the value of the indexed component of the specified array object to the specified byte value.
java.lang.reflect.Array#setChar(Object, int, char)->void:::Sets the value of the indexed component of the specified array object to the specified char value.
java.lang.reflect.Array#setShort(Object, int, short)->void:::Sets the value of the indexed component of the specified array object to the specified short value.
java.lang.reflect.Array#setInt(Object, int, int)->void:::Sets the value of the indexed component of the specified array object to the specified int value.
java.lang.reflect.Array#setLong(Object, int, long)->void:::Sets the value of the indexed component of the specified array object to the specified long value.
java.lang.reflect.Array#setFloat(Object, int, float)->void:::Sets the value of the indexed component of the specified array object to the specified float value.
java.lang.reflect.Array#setDouble(Object, int, double)->void:::Sets the value of the indexed component of the specified array object to the specified double value.
java.lang.reflect.Constructor#getGenericInfo()->ConstructorRepository::: constructor get generic info
java.lang.reflect.Constructor#getRoot()->Constructor::: constructor get root
java.lang.reflect.Constructor#copy()->Constructor:::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Constructor
java.lang.reflect.Constructor#setAccessible(boolean)->void:::A {@code SecurityException is also thrown if this object is a Constructor object for the class Class and flag is true
java.lang.reflect.Constructor#checkCanSetAccessible(Class)->void::: constructor check can set accessible
java.lang.reflect.Constructor#hasGenericInformation()->boolean::: constructor has generic information
java.lang.reflect.Constructor#getAnnotationBytes()->byte[]::: constructor get annotation bytes
java.lang.reflect.Constructor#getDeclaringClass()->Class:::Returns the Class object representing the class that declares the constructor represented by this object.
java.lang.reflect.Constructor#getName()->String:::Returns the name of this constructor, as a string
java.lang.reflect.Constructor#getModifiers()->int::: constructor get modifiers
java.lang.reflect.Constructor#getTypeParameters()->TypeVariable>[]::: constructor get type parameters
java.lang.reflect.Constructor#getSharedParameterTypes()->Class[]::: constructor get shared parameter types
java.lang.reflect.Constructor#getSharedExceptionTypes()->Class[]::: constructor get shared exception types
java.lang.reflect.Constructor#getParameterTypes()->Class[]::: constructor get parameter types
java.lang.reflect.Constructor#getParameterCount()->int::: constructor get parameter count
java.lang.reflect.Constructor#getGenericParameterTypes()->Type[]::: constructor get generic parameter types
java.lang.reflect.Constructor#getExceptionTypes()->Class[]::: constructor get exception types
java.lang.reflect.Constructor#getGenericExceptionTypes()->Type[]::: constructor get generic exception types
java.lang.reflect.Constructor#equals(Object)->boolean:::Compares this Constructor against the specified object
java.lang.reflect.Constructor#hashCode()->int:::Returns a hashcode for this Constructor
java.lang.reflect.Constructor#toString()->String:::Returns a string describing this Constructor
java.lang.reflect.Constructor#specificToStringHeader(StringBuilder)->void::: constructor specific to string header
java.lang.reflect.Constructor#toShortString()->String::: constructor to short string
java.lang.reflect.Constructor#toGenericString()->String:::Returns a string describing this Constructor, including type parameters
java.lang.reflect.Constructor#specificToGenericStringHeader(StringBuilder)->void::: constructor specific to generic string header
java.lang.reflect.Constructor#newInstance(Object...)->T:::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters
java.lang.reflect.Constructor#isVarArgs()->boolean::: constructor is var args
java.lang.reflect.Constructor#isSynthetic()->boolean::: constructor is synthetic
java.lang.reflect.Constructor#getConstructorAccessor()->ConstructorAccessor::: constructor get constructor accessor
java.lang.reflect.Constructor#setConstructorAccessor(ConstructorAccessor)->void::: constructor set constructor accessor
java.lang.reflect.Constructor#getSlot()->int::: constructor get slot
java.lang.reflect.Constructor#getSignature()->String::: constructor get signature
java.lang.reflect.Constructor#getRawAnnotations()->byte[]::: constructor get raw annotations
java.lang.reflect.Constructor#getRawParameterAnnotations()->byte[]::: constructor get raw parameter annotations
java.lang.reflect.Constructor#getAnnotation(Class)->T::: constructor get annotation
java.lang.reflect.Constructor#getDeclaredAnnotations()->Annotation[]::: constructor get declared annotations
java.lang.reflect.Constructor#getParameterAnnotations()->Annotation[][]::: constructor get parameter annotations
java.lang.reflect.Constructor#handleParameterNumberMismatch(int, int)->boolean::: constructor handle parameter number mismatch
java.lang.reflect.Constructor#getAnnotatedReturnType()->AnnotatedType::: constructor get annotated return type
java.lang.reflect.Constructor#getAnnotatedReceiverType()->AnnotatedType::: constructor get annotated receiver type
java.lang.reflect.Executable#getAnnotationBytes()->byte[]:::Accessor method to allow code sharing
java.lang.reflect.Executable#hasGenericInformation()->boolean:::Does the Executable have generic information.
java.lang.reflect.Executable#getGenericInfo()->ConstructorRepository::: executable get generic info
java.lang.reflect.Executable#equalParamTypes(Class[], Class[])->boolean::: executable equal param types
java.lang.reflect.Executable#parseParameterAnnotations(byte[])->Annotation[][]::: executable parse parameter annotations
java.lang.reflect.Executable#printModifiersIfNonzero(StringBuilder, int, boolean)->void::: executable print modifiers if nonzero
java.lang.reflect.Executable#sharedToString(int, boolean, Class[], Class[])->String::: executable shared to string
java.lang.reflect.Executable#specificToStringHeader(StringBuilder)->void:::Generate toString header information specific to a method or constructor.
java.lang.reflect.Executable#sharedToGenericString(int, boolean)->String::: executable shared to generic string
java.lang.reflect.Executable#specificToGenericStringHeader(StringBuilder)->void:::Generate toGenericString header information specific to a method or constructor.
java.lang.reflect.Executable#getDeclaringClass()->Class:::Returns the Class object representing the class or interface that declares the executable represented by this object.
java.lang.reflect.Executable#getName()->String:::Returns the name of the executable represented by this object.
java.lang.reflect.Executable#getModifiers()->int:::Returns the Java language Modifier modifiers for the executable represented by this object.
java.lang.reflect.Executable#getTypeParameters()->TypeVariable[]:::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
java.lang.reflect.Executable#getSharedParameterTypes()->Class[]::: executable get shared parameter types
java.lang.reflect.Executable#getSharedExceptionTypes()->Class[]::: executable get shared exception types
java.lang.reflect.Executable#getParameterTypes()->Class[]:::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object
java.lang.reflect.Executable#getParameterCount()->int:::Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
java.lang.reflect.Executable#getGenericParameterTypes()->Type[]:::Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object
java.lang.reflect.Executable#getAllGenericParameterTypes()->Type[]:::Behaves like getGenericParameterTypes, but returns type information for all parameters, including synthetic parameters.
java.lang.reflect.Executable#getParameters()->Parameter[]:::Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object
java.lang.reflect.Executable#hasRealParameterData()->boolean::: executable has real parameter data
java.lang.reflect.Executable#getTypeAnnotationBytes0()->byte[]::: executable get type annotation bytes0
java.lang.reflect.Executable#getTypeAnnotationBytes()->byte[]::: executable get type annotation bytes
java.lang.reflect.Executable#getExceptionTypes()->Class[]:::Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object
java.lang.reflect.Executable#getGenericExceptionTypes()->Type[]:::Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object
java.lang.reflect.Executable#toGenericString()->String:::Returns a string describing this Executable, including any type parameters.
java.lang.reflect.Executable#isVarArgs()->boolean:::Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
java.lang.reflect.Executable#isSynthetic()->boolean:::Returns true if this executable is a synthetic construct; returns false otherwise.
java.lang.reflect.Executable#getParameterAnnotations()->Annotation[][]:::Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object
java.lang.reflect.Executable#sharedGetParameterAnnotations(Class[], byte[])->Annotation[][]::: executable shared get parameter annotations
java.lang.reflect.Executable#handleParameterNumberMismatch(int, int)->boolean::: executable handle parameter number mismatch
java.lang.reflect.Executable#getAnnotation(Class)->T::: executable get annotation
java.lang.reflect.Executable#getAnnotationsByType(Class)->T[]::: executable get annotations by type
java.lang.reflect.Executable#getDeclaredAnnotations()->Annotation[]::: executable get declared annotations
java.lang.reflect.Executable#getAnnotatedReturnType()->AnnotatedType:::Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable
java.lang.reflect.Executable#getAnnotatedReturnType0(Type)->AnnotatedType::: executable get annotated return type0
java.lang.reflect.Executable#getAnnotatedReceiverType()->AnnotatedType:::Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object
java.lang.reflect.Executable#getAnnotatedParameterTypes()->AnnotatedType[]:::Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable
java.lang.reflect.Executable#getAnnotatedExceptionTypes()->AnnotatedType[]:::Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable
java.lang.reflect.Field#copy()->Field:::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field
java.lang.reflect.Field#setAccessible(boolean)->void::: field set accessible
java.lang.reflect.Field#checkCanSetAccessible(Class)->void::: field check can set accessible
java.lang.reflect.Field#getDeclaringClass()->Class:::Returns the Class object representing the class or interface that declares the field represented by this Field object.
java.lang.reflect.Field#getName()->String:::Returns the name of the field represented by this Field object.
java.lang.reflect.Field#getModifiers()->int:::Returns the Java language modifiers for the field represented by this Field object, as an integer
java.lang.reflect.Field#isEnumConstant()->boolean:::Returns true if this field represents an element of an enumerated type; returns false otherwise.
java.lang.reflect.Field#isSynthetic()->boolean:::Returns true if this field is a synthetic field; returns false otherwise.
java.lang.reflect.Field#getType()->Class:::Returns a Class object that identifies the declared type for the field represented by this Field object.
java.lang.reflect.Field#getGenericType()->Type:::Returns a Type object that represents the declared type for the field represented by this Field object
java.lang.reflect.Field#equals(Object)->boolean:::Compares this Field against the specified object
java.lang.reflect.Field#hashCode()->int:::Returns a hashcode for this Field
java.lang.reflect.Field#toString()->String:::Returns a string describing this Field
java.lang.reflect.Field#toShortString()->String::: field to short string
java.lang.reflect.Field#toGenericString()->String:::Returns a string describing this Field, including its generic type
java.lang.reflect.Field#get(Object)->Object:::Returns the value of the field represented by this Field, on the specified object
java.lang.reflect.Field#getBoolean(Object)->boolean:::Gets the value of a static or instance boolean field.
java.lang.reflect.Field#getByte(Object)->byte:::Gets the value of a static or instance byte field.
java.lang.reflect.Field#getChar(Object)->char:::Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.
java.lang.reflect.Field#getShort(Object)->short:::Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.
java.lang.reflect.Field#getInt(Object)->int:::Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.
java.lang.reflect.Field#getLong(Object)->long:::Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.
java.lang.reflect.Field#getFloat(Object)->float:::Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.
java.lang.reflect.Field#getDouble(Object)->double:::Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.
java.lang.reflect.Field#set(Object, Object)->void:::Sets the field represented by this Field object on the specified object argument to the specified new value
java.lang.reflect.Field#setBoolean(Object, boolean)->void:::Sets the value of a field as a boolean on the specified object
java.lang.reflect.Field#setByte(Object, byte)->void:::Sets the value of a field as a byte on the specified object
java.lang.reflect.Field#setChar(Object, char)->void:::Sets the value of a field as a char on the specified object
java.lang.reflect.Field#setShort(Object, short)->void:::Sets the value of a field as a short on the specified object
java.lang.reflect.Field#setInt(Object, int)->void:::Sets the value of a field as an int on the specified object
java.lang.reflect.Field#setLong(Object, long)->void:::Sets the value of a field as a long on the specified object
java.lang.reflect.Field#setFloat(Object, float)->void:::Sets the value of a field as a float on the specified object
java.lang.reflect.Field#setDouble(Object, double)->void:::Sets the value of a field as a double on the specified object
java.lang.reflect.Field#getRoot()->Field::: field get root
java.lang.reflect.Field#getAnnotation(Class)->T::: field get annotation
java.lang.reflect.Field#getAnnotationsByType(Class)->T[]::: field get annotations by type
java.lang.reflect.Field#getDeclaredAnnotations()->Annotation[]::: field get declared annotations
java.lang.reflect.Field#getAnnotatedType()->AnnotatedType:::Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.
java.lang.reflect.GenericArrayType#getGenericComponentType()->Type:::Returns a Type object representing the component type of this array
java.lang.reflect.GenericDeclaration#getTypeParameters()->TypeVariable[]:::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
java.lang.reflect.InvocationHandler#invoke(Object, Method, Object[])->Object:::Processes a method invocation on a proxy instance and returns the result
java.lang.reflect.InvocationTargetException#getTargetException()->Throwable:::Get the thrown target exception
java.lang.reflect.InvocationTargetException#getCause()->Throwable:::Returns the cause of this exception (the thrown target exception, which may be null).
java.lang.reflect.Member#getDeclaringClass()->Class:::Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.
java.lang.reflect.Member#getName()->String:::Returns the simple name of the underlying member or constructor represented by this Member.
java.lang.reflect.Member#getModifiers()->int:::Returns the Java language modifiers for the member or constructor represented by this Member, as an integer
java.lang.reflect.Member#isSynthetic()->boolean:::Returns true if this member was introduced by the compiler; returns false otherwise.
java.lang.reflect.Method#getGenericInfo()->MethodRepository::: method get generic info
java.lang.reflect.Method#copy()->Method:::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method
java.lang.reflect.Method#leafCopy()->Method:::Make a copy of a leaf method.
java.lang.reflect.Method#setAccessible(boolean)->void::: method set accessible
java.lang.reflect.Method#checkCanSetAccessible(Class)->void::: method check can set accessible
java.lang.reflect.Method#getRoot()->Method::: method get root
java.lang.reflect.Method#hasGenericInformation()->boolean::: method has generic information
java.lang.reflect.Method#getAnnotationBytes()->byte[]::: method get annotation bytes
java.lang.reflect.Method#getDeclaringClass()->Class:::Returns the Class object representing the class or interface that declares the method represented by this object.
java.lang.reflect.Method#getName()->String:::Returns the name of the method represented by this Method object, as a String.
java.lang.reflect.Method#getModifiers()->int::: method get modifiers
java.lang.reflect.Method#getTypeParameters()->TypeVariable[]::: method get type parameters
java.lang.reflect.Method#getReturnType()->Class:::Returns a Class object that represents the formal return type of the method represented by this Method object.
java.lang.reflect.Method#getGenericReturnType()->Type:::Returns a Type object that represents the formal return type of the method represented by this Method object
java.lang.reflect.Method#getSharedParameterTypes()->Class[]::: method get shared parameter types
java.lang.reflect.Method#getSharedExceptionTypes()->Class[]::: method get shared exception types
java.lang.reflect.Method#getParameterTypes()->Class[]::: method get parameter types
java.lang.reflect.Method#getParameterCount()->int::: method get parameter count
java.lang.reflect.Method#getGenericParameterTypes()->Type[]::: method get generic parameter types
java.lang.reflect.Method#getExceptionTypes()->Class[]::: method get exception types
java.lang.reflect.Method#getGenericExceptionTypes()->Type[]::: method get generic exception types
java.lang.reflect.Method#equals(Object)->boolean:::Compares this Method against the specified object
java.lang.reflect.Method#hashCode()->int:::Returns a hashcode for this Method
java.lang.reflect.Method#toString()->String:::Returns a string describing this Method
java.lang.reflect.Method#specificToStringHeader(StringBuilder)->void::: method specific to string header
java.lang.reflect.Method#toShortString()->String::: method to short string
java.lang.reflect.Method#toGenericString()->String:::Returns a string describing this Method, including type parameters
java.lang.reflect.Method#specificToGenericStringHeader(StringBuilder)->void::: method specific to generic string header
java.lang.reflect.Method#invoke(Object, Object...)->Object:::Invokes the underlying method represented by this Method object, on the specified object with the specified parameters
java.lang.reflect.Method#isBridge()->boolean:::Returns true if this method is a bridge method; returns false otherwise.
java.lang.reflect.Method#isVarArgs()->boolean::: method is var args
java.lang.reflect.Method#isSynthetic()->boolean::: method is synthetic
java.lang.reflect.Method#isDefault()->boolean:::Returns true if this method is a default method; returns false otherwise
java.lang.reflect.Method#getMethodAccessor()->MethodAccessor::: method get method accessor
java.lang.reflect.Method#setMethodAccessor(MethodAccessor)->void::: method set method accessor
java.lang.reflect.Method#getDefaultValue()->Object:::Returns the default value for the annotation member represented by this Method instance
java.lang.reflect.Method#getAnnotation(Class)->T::: method get annotation
java.lang.reflect.Method#getDeclaredAnnotations()->Annotation[]::: method get declared annotations
java.lang.reflect.Method#getParameterAnnotations()->Annotation[][]::: method get parameter annotations
java.lang.reflect.Method#getAnnotatedReturnType()->AnnotatedType::: method get annotated return type
java.lang.reflect.Method#handleParameterNumberMismatch(int, int)->boolean::: method handle parameter number mismatch
java.lang.reflect.Modifier#isPublic(int)->boolean:::Return true if the integer argument includes the public modifier, false otherwise.
java.lang.reflect.Modifier#isPrivate(int)->boolean:::Return true if the integer argument includes the private modifier, false otherwise.
java.lang.reflect.Modifier#isProtected(int)->boolean:::Return true if the integer argument includes the protected modifier, false otherwise.
java.lang.reflect.Modifier#isStatic(int)->boolean:::Return true if the integer argument includes the static modifier, false otherwise.
java.lang.reflect.Modifier#isFinal(int)->boolean:::Return true if the integer argument includes the final modifier, false otherwise.
java.lang.reflect.Modifier#isSynchronized(int)->boolean:::Return true if the integer argument includes the synchronized modifier, false otherwise.
java.lang.reflect.Modifier#isVolatile(int)->boolean:::Return true if the integer argument includes the volatile modifier, false otherwise.
java.lang.reflect.Modifier#isTransient(int)->boolean:::Return true if the integer argument includes the transient modifier, false otherwise.
java.lang.reflect.Modifier#isNative(int)->boolean:::Return true if the integer argument includes the native modifier, false otherwise.
java.lang.reflect.Modifier#isInterface(int)->boolean:::Return true if the integer argument includes the interface modifier, false otherwise.
java.lang.reflect.Modifier#isAbstract(int)->boolean:::Return true if the integer argument includes the abstract modifier, false otherwise.
java.lang.reflect.Modifier#isStrict(int)->boolean:::Return true if the integer argument includes the strictfp modifier, false otherwise.
java.lang.reflect.Modifier#toString(int)->String:::Return a string describing the access modifier flags in the specified modifier
java.lang.reflect.Modifier#isSynthetic(int)->boolean::: modifier is synthetic
java.lang.reflect.Modifier#isMandated(int)->boolean::: modifier is mandated
java.lang.reflect.Modifier#classModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to a class.
java.lang.reflect.Modifier#interfaceModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to an interface.
java.lang.reflect.Modifier#constructorModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to a constructor.
java.lang.reflect.Modifier#methodModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to a method.
java.lang.reflect.Modifier#fieldModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to a field.
java.lang.reflect.Modifier#parameterModifiers()->int:::Return an int value OR-ing together the source language modifiers that can be applied to a parameter.
java.lang.reflect.Parameter#equals(Object)->boolean:::Compares based on the executable and the index.
java.lang.reflect.Parameter#hashCode()->int:::Returns a hash code based on the executable's hash code and the index.
java.lang.reflect.Parameter#isNamePresent()->boolean:::Returns true if the parameter has a name according to the class file; returns false otherwise
java.lang.reflect.Parameter#toString()->String:::Returns a string describing this parameter
java.lang.reflect.Parameter#getDeclaringExecutable()->Executable:::Return the Executable which declares this parameter.
java.lang.reflect.Parameter#getModifiers()->int:::Get the modifier flags for this the parameter represented by this Parameter object.
java.lang.reflect.Parameter#getName()->String:::Returns the name of the parameter
java.lang.reflect.Parameter#getRealName()->String::: parameter get real name
java.lang.reflect.Parameter#getParameterizedType()->Type:::Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.
java.lang.reflect.Parameter#getType()->Class:::Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.
java.lang.reflect.Parameter#getAnnotatedType()->AnnotatedType:::Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
java.lang.reflect.Parameter#isImplicit()->boolean:::Returns true if this parameter is implicitly declared in source code; returns false otherwise.
java.lang.reflect.Parameter#isSynthetic()->boolean:::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
java.lang.reflect.Parameter#isVarArgs()->boolean:::Returns true if this parameter represents a variable argument list; returns false otherwise.
java.lang.reflect.Parameter#getAnnotation(Class)->T::: parameter get annotation
java.lang.reflect.Parameter#getAnnotationsByType(Class)->T[]::: parameter get annotations by type
java.lang.reflect.Parameter#getDeclaredAnnotations()->Annotation[]::: parameter get declared annotations
java.lang.reflect.Parameter#getDeclaredAnnotation(Class)->T::: parameter get declared annotation
java.lang.reflect.Parameter#getDeclaredAnnotationsByType(Class)->T[]::: parameter get declared annotations by type
java.lang.reflect.Parameter#getAnnotations()->Annotation[]::: parameter get annotations
java.lang.reflect.ParameterizedType#getActualTypeArguments()->Type[]:::Returns an array of Type objects representing the actual type arguments to this type
java.lang.reflect.ParameterizedType#getRawType()->Type:::Returns the Type object representing the class or interface that declared this type.
java.lang.reflect.ParameterizedType#getOwnerType()->Type:::Returns a Type object representing the type that this type is a member of
java.lang.reflect.Proxy#getProxyClass(ClassLoader, Class...)->Class:::Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces
java.lang.reflect.Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler)->Object:::Returns a proxy instance for the specified interfaces that dispatches method invocations to the specified invocation handler
java.lang.reflect.Proxy#isProxyClass(Class)->boolean:::Returns true if the given class is a proxy class.
java.lang.reflect.Proxy#getInvocationHandler(Object)->InvocationHandler:::Returns the invocation handler for the specified proxy instance.
java.lang.reflect.ProxyGenerator#generateProxyClass(String, Class[])->byte[]:::Generate a public proxy class given a name and a list of proxy interfaces.
java.lang.reflect.ProxyGenerator#generateProxyClass(String, Class[], int)->byte[]:::Generate a proxy class given a name and a list of proxy interfaces.
java.lang.reflect.ReflectAccess#newField(Class, String, Class, int, int, String, byte[])->Field::: reflect access new field
java.lang.reflect.ReflectAccess#newMethod(Class, String, Class[], Class, Class[], int, int, String, byte[], byte[], byte[])->Method::: reflect access new method
java.lang.reflect.ReflectAccess#newConstructor(Class, Class[], Class[], int, int, String, byte[], byte[])->Constructor::: reflect access new constructor
java.lang.reflect.ReflectAccess#getMethodAccessor(Method)->MethodAccessor::: reflect access get method accessor
java.lang.reflect.ReflectAccess#setMethodAccessor(Method, MethodAccessor)->void::: reflect access set method accessor
java.lang.reflect.ReflectAccess#getConstructorAccessor(Constructor)->ConstructorAccessor::: reflect access get constructor accessor
java.lang.reflect.ReflectAccess#setConstructorAccessor(Constructor, ConstructorAccessor)->void::: reflect access set constructor accessor
java.lang.reflect.ReflectAccess#getConstructorSlot(Constructor)->int::: reflect access get constructor slot
java.lang.reflect.ReflectAccess#getConstructorSignature(Constructor)->String::: reflect access get constructor signature
java.lang.reflect.ReflectAccess#getConstructorAnnotations(Constructor)->byte[]::: reflect access get constructor annotations
java.lang.reflect.ReflectAccess#getConstructorParameterAnnotations(Constructor)->byte[]::: reflect access get constructor parameter annotations
java.lang.reflect.ReflectAccess#getExecutableTypeAnnotationBytes(Executable)->byte[]::: reflect access get executable type annotation bytes
java.lang.reflect.ReflectAccess#getExecutableSharedParameterTypes(Executable)->Class[]::: reflect access get executable shared parameter types
java.lang.reflect.ReflectAccess#copyMethod(Method)->Method::: reflect access copy method
java.lang.reflect.ReflectAccess#leafCopyMethod(Method)->Method::: reflect access leaf copy method
java.lang.reflect.ReflectAccess#copyField(Field)->Field::: reflect access copy field
java.lang.reflect.ReflectAccess#copyConstructor(Constructor)->Constructor::: reflect access copy constructor
java.lang.reflect.ReflectAccess#getRoot(T)->T::: reflect access get root
java.lang.reflect.Type#getTypeName()->String:::Returns a string describing this type, including information about any type parameters.
java.lang.reflect.TypeVariable#getBounds()->Type[]:::Returns an array of Type objects representing the upper bound(s) of this type variable
java.lang.reflect.TypeVariable#getGenericDeclaration()->D:::Returns the GenericDeclaration object representing the generic declaration declared this type variable.
java.lang.reflect.TypeVariable#getName()->String:::Returns the name of this type variable, as it occurs in the source code.
java.lang.reflect.TypeVariable#getAnnotatedBounds()->AnnotatedType[]:::Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable
java.lang.reflect.UndeclaredThrowableException#getUndeclaredThrowable()->Throwable:::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null
java.lang.reflect.UndeclaredThrowableException#getCause()->Throwable:::Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null).
java.lang.reflect.WildcardType#getUpperBounds()->Type[]:::Returns an array of Type objects representing the  upper bound(s) of this type variable
java.lang.reflect.WildcardType#getLowerBounds()->Type[]:::Returns an array of Type objects representing the lower bound(s) of this type variable

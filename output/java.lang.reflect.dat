AccessibleObject#setAccessible(AccessibleObject[], boolean):::Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency):::this.checkPermission->Reflection.getCallerClass->array.clone->ao.checkCanSetAccessible->ao.setAccessible0
AccessibleObject#setAccessible(boolean):::Set the accessible flag for this reflected object to the indicated boolean value:::AccessibleObject.checkPermission->this.setAccessible0
AccessibleObject#setAccessible0(boolean):::Sets the accessible flag and returns the new value:::
AccessibleObject#trySetAccessible():::Set the accessible flag for this reflected object to true if possible:::AccessibleObject.checkPermission->Member.class.isInstance->this.setAccessible0->((Member) this).getDeclaringClass->Reflection.getCallerClass->this.checkCanSetAccessible->this.setAccessible0
AccessibleObject#checkCanSetAccessible(Class):::If the given AccessibleObject is a Constructor, Method or Field then checks that its declaring class is in a package that can be accessed by the given caller of setAccessible.:::
AccessibleObject#toShortString():::Returns a short descriptive string to describe this object in log messages.:::this.toString
AccessibleObject#isAccessible():::Get the value of the accessible flag for this reflected object.:::
AccessibleObject#canAccess(Object):::Test if the caller can access this reflected object:::Member.class.isInstance->((Member) this).getDeclaringClass->((Member) this).getModifiers->Modifier.isStatic->obj.getClass->declaringClass.isAssignableFrom->declaringClass.getName->Reflection.getCallerClass->Modifier.isStatic->obj.getClass->this.verifyAccess
AccessibleObject#getRoot():::Returns the root AccessibleObject; or null if this object is the root:::
AnnotatedArrayType#getAnnotatedGenericComponentType():::Returns the potentially annotated generic component type of this array type.:::
AnnotatedArrayType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedElement#isAnnotationPresent(Class):::Returns true if an annotation for the specified type is present on this element, else false:::this.getAnnotation
AnnotatedElement#getAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is present, else null.:::
AnnotatedElement#getAnnotations():::Returns annotations that are present on this element:::
AnnotatedElement#getAnnotationsByType(Class):::Returns annotations that are associated with this element:::this.getDeclaredAnnotationsByType->AnnotationType.getInstance(annotationClass).isInherited->((Class<?>) this).getSuperclass->superClass.getAnnotationsByType
AnnotatedElement#getDeclaredAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is directly present, else null:::Objects.requireNonNull->annotation.annotationType->annotationClass.equals->annotationClass.cast->this.getDeclaredAnnotations
AnnotatedElement#getDeclaredAnnotationsByType(Class):::Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present:::Objects.requireNonNull->Function.identity->Collectors.toMap->Arrays.stream(getDeclaredAnnotations()).collect->AnnotationSupport.getDirectlyAndIndirectlyPresent
AnnotatedElement#getDeclaredAnnotations():::Returns annotations that are directly present on this element:::
AnnotatedParameterizedType#getAnnotatedActualTypeArguments():::Returns the potentially annotated actual type arguments of this parameterized type.:::
AnnotatedParameterizedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedType#getType():::Returns the underlying type that this annotated type represents.:::
AnnotatedTypeVariable#getAnnotatedBounds():::Returns the potentially annotated bounds of this type variable:::
AnnotatedTypeVariable#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
AnnotatedWildcardType#getAnnotatedLowerBounds():::Returns the potentially annotated lower bounds of this wildcard type:::
AnnotatedWildcardType#getAnnotatedUpperBounds():::Returns the potentially annotated upper bounds of this wildcard type:::
AnnotatedWildcardType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type:::
Array#newInstance(Class, int):::Creates a new array with the specified component type and length:::this.newArray
Array#newInstance(Class, int...):::Creates a new array with the specified component type and dimensions:::this.multiNewArray
Array#getLength(Object):::Returns the length of the specified array object, as an int.:::
Array#get(Object, int):::Returns the value of the indexed component in the specified array object:::
Array#getBoolean(Object, int):::Returns the value of the indexed component in the specified array object, as a boolean.:::
Array#getByte(Object, int):::Returns the value of the indexed component in the specified array object, as a byte.:::
Array#getChar(Object, int):::Returns the value of the indexed component in the specified array object, as a char.:::
Array#getShort(Object, int):::Returns the value of the indexed component in the specified array object, as a short.:::
Array#getInt(Object, int):::Returns the value of the indexed component in the specified array object, as an int.:::
Array#getLong(Object, int):::Returns the value of the indexed component in the specified array object, as a long.:::
Array#getFloat(Object, int):::Returns the value of the indexed component in the specified array object, as a float.:::
Array#getDouble(Object, int):::Returns the value of the indexed component in the specified array object, as a double.:::
Array#set(Object, int, Object):::Sets the value of the indexed component of the specified array object to the specified new value:::
Array#setBoolean(Object, int, boolean):::Sets the value of the indexed component of the specified array object to the specified boolean value.:::
Array#setByte(Object, int, byte):::Sets the value of the indexed component of the specified array object to the specified byte value.:::
Array#setChar(Object, int, char):::Sets the value of the indexed component of the specified array object to the specified char value.:::
Array#setShort(Object, int, short):::Sets the value of the indexed component of the specified array object to the specified short value.:::
Array#setInt(Object, int, int):::Sets the value of the indexed component of the specified array object to the specified int value.:::
Array#setLong(Object, int, long):::Sets the value of the indexed component of the specified array object to the specified long value.:::
Array#setFloat(Object, int, float):::Sets the value of the indexed component of the specified array object to the specified float value.:::
Array#setDouble(Object, int, double):::Sets the value of the indexed component of the specified array object to the specified double value.:::
Constructor#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Constructor:::
Constructor#setAccessible(boolean):::A {@code SecurityException is also thrown if this object is a Constructor object for the class Class and flag is true:::AccessibleObject.checkPermission->Reflection.getCallerClass->this.checkCanSetAccessible->this.setAccessible0
Constructor#getDeclaringClass():::Returns the Class object representing the class that declares the constructor represented by this object.:::
Constructor#getName():::Returns the name of this constructor, as a string:::getDeclaringClass().getName
Constructor#equals(Object):::Compares this Constructor against the specified object:::this.getDeclaringClass->other.getDeclaringClass->this.equalParamTypes
Constructor#hashCode():::Returns a hashcode for this Constructor:::getDeclaringClass().getName().hashCode
Constructor#toString():::Returns a string describing this Constructor:::Modifier.constructorModifiers->this.sharedToString
Constructor#toGenericString():::Returns a string describing this Constructor, including type parameters:::Modifier.constructorModifiers->this.sharedToGenericString
Constructor#newInstance(Object...):::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters:::Reflection.getCallerClass->this.checkAccess->clazz.getModifiers->this.acquireConstructorAccessor->ca.newInstance
Executable#getAnnotationBytes():::Accessor method to allow code sharing:::
Executable#hasGenericInformation():::Does the Executable have generic information.:::
Executable#specificToStringHeader(StringBuilder):::Generate toString header information specific to a method or constructor.:::
Executable#specificToGenericStringHeader(StringBuilder):::Generate toGenericString header information specific to a method or constructor.:::
Executable#getDeclaringClass():::Returns the Class object representing the class or interface that declares the executable represented by this object.:::
Executable#getName():::Returns the name of the executable represented by this object.:::
Executable#getModifiers():::Returns the Java language Modifier modifiers for the executable represented by this object.:::
Executable#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::
Executable#getParameterTypes():::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object:::
Executable#getParameterCount():::Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.:::
Executable#getGenericParameterTypes():::Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object:::this.hasGenericInformation->this.getParameterTypes->getGenericInfo().getParameterTypes
Executable#getAllGenericParameterTypes():::Behaves like getGenericParameterTypes, but returns type information for all parameters, including synthetic parameters.:::this.hasGenericInformation->this.hasRealParameterData->this.getGenericParameterTypes->this.getParameterTypes->this.getParameters->param.isSynthetic->param.isImplicit->this.getParameterTypes
Executable#getParameters():::Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object:::privateGetParameters().clone
Executable#getExceptionTypes():::Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object:::
Executable#getGenericExceptionTypes():::Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object:::this.hasGenericInformation->getGenericInfo().getExceptionTypes->this.getExceptionTypes
Executable#toGenericString():::Returns a string describing this Executable, including any type parameters.:::
Executable#isVarArgs():::Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.:::this.getModifiers
Executable#isSynthetic():::Returns true if this executable is a synthetic construct; returns false otherwise.:::this.getModifiers->Modifier.isSynthetic
Executable#getParameterAnnotations():::Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object:::
Executable#getAnnotatedReturnType():::Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable:::
Executable#getAnnotatedReceiverType():::Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object:::this.getModifiers->Modifier.isStatic->this.getTypeAnnotationBytes0->this.getDeclaringClass->SharedSecrets.getJavaLangAccess().getConstantPool->this.getDeclaringClass->this.getDeclaringClass->TypeAnnotationParser.buildAnnotatedType
Executable#getAnnotatedParameterTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable:::this.getTypeAnnotationBytes0->this.getDeclaringClass->SharedSecrets.getJavaLangAccess().getConstantPool->this.getDeclaringClass->this.getAllGenericParameterTypes->TypeAnnotationParser.buildAnnotatedTypes
Executable#getAnnotatedExceptionTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable:::this.getTypeAnnotationBytes0->this.getDeclaringClass->SharedSecrets.getJavaLangAccess().getConstantPool->this.getDeclaringClass->this.getGenericExceptionTypes->TypeAnnotationParser.buildAnnotatedTypes
Field#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field:::
Field#getDeclaringClass():::Returns the Class object representing the class or interface that declares the field represented by this Field object.:::
Field#getName():::Returns the name of the field represented by this Field object.:::
Field#getModifiers():::Returns the Java language modifiers for the field represented by this Field object, as an integer:::
Field#isEnumConstant():::Returns true if this field represents an element of an enumerated type; returns false otherwise.:::this.getModifiers
Field#isSynthetic():::Returns true if this field is a synthetic field; returns false otherwise.:::this.getModifiers->Modifier.isSynthetic
Field#getType():::Returns a Class object that identifies the declared type for the field represented by this Field object.:::
Field#getGenericType():::Returns a Type object that represents the declared type for the field represented by this Field object:::this.getGenericSignature->this.getType->getGenericInfo().getGenericType
Field#equals(Object):::Compares this Field against the specified object:::this.getDeclaringClass->other.getDeclaringClass->this.getName->other.getName->this.getType->other.getType
Field#hashCode():::Returns a hashcode for this Field:::getDeclaringClass().getName().hashCode->getName().hashCode
Field#toString():::Returns a string describing this Field:::this.getModifiers->Modifier.toString->getType().getTypeName->getDeclaringClass().getTypeName->this.getName
Field#toGenericString():::Returns a string describing this Field, including its generic type:::this.getModifiers->this.getGenericType->Modifier.toString->fieldType.getTypeName->getDeclaringClass().getTypeName->this.getName
Field#get(Object):::Returns the value of the field represented by this Field, on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).get
Field#getBoolean(Object):::Gets the value of a static or instance boolean field.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getBoolean
Field#getByte(Object):::Gets the value of a static or instance byte field.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getByte
Field#getChar(Object):::Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getChar
Field#getShort(Object):::Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getShort
Field#getInt(Object):::Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getInt
Field#getLong(Object):::Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getLong
Field#getFloat(Object):::Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getFloat
Field#getDouble(Object):::Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).getDouble
Field#set(Object, Object):::Sets the field represented by this Field object on the specified object argument to the specified new value:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).set
Field#setBoolean(Object, boolean):::Sets the value of a field as a boolean on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setBoolean
Field#setByte(Object, byte):::Sets the value of a field as a byte on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setByte
Field#setChar(Object, char):::Sets the value of a field as a char on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setChar
Field#setShort(Object, short):::Sets the value of a field as a short on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setShort
Field#setInt(Object, int):::Sets the value of a field as an int on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setInt
Field#setLong(Object, long):::Sets the value of a field as a long on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setLong
Field#setFloat(Object, float):::Sets the value of a field as a float on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setFloat
Field#setDouble(Object, double):::Sets the value of a field as a double on the specified object:::Reflection.getCallerClass->this.checkAccess->getFieldAccessor(obj).setDouble
Field#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.:::this.getTypeAnnotationBytes0->this.getDeclaringClass->SharedSecrets.getJavaLangAccess().getConstantPool->this.getDeclaringClass->this.getGenericType->TypeAnnotationParser.buildAnnotatedType
GenericArrayType#getGenericComponentType():::Returns a Type object representing the component type of this array:::
GenericDeclaration#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::
InvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation on a proxy instance and returns the result:::
InvocationTargetException#getTargetException():::Get the thrown target exception:::
InvocationTargetException#getCause():::Returns the cause of this exception (the thrown target exception, which may be null).:::
Member#getDeclaringClass():::Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.:::
Member#getName():::Returns the simple name of the underlying member or constructor represented by this Member.:::
Member#getModifiers():::Returns the Java language modifiers for the member or constructor represented by this Member, as an integer:::
Member#isSynthetic():::Returns true if this member was introduced by the compiler; returns false otherwise.:::
Method#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method:::
Method#leafCopy():::Make a copy of a leaf method.:::
Method#getDeclaringClass():::Returns the Class object representing the class or interface that declares the method represented by this object.:::
Method#getName():::Returns the name of the method represented by this Method object, as a String.:::
Method#getReturnType():::Returns a Class object that represents the formal return type of the method represented by this Method object.:::
Method#getGenericReturnType():::Returns a Type object that represents the formal return type of the method represented by this Method object:::this.getGenericSignature->this.getReturnType->getGenericInfo().getReturnType
Method#equals(Object):::Compares this Method against the specified object:::this.getDeclaringClass->other.getDeclaringClass->this.getName->other.getName->other.getReturnType->returnType.equals->this.equalParamTypes
Method#hashCode():::Returns a hashcode for this Method:::getDeclaringClass().getName().hashCode->getName().hashCode
Method#toString():::Returns a string describing this Method:::Modifier.methodModifiers->this.isDefault->this.sharedToString
Method#toGenericString():::Returns a string describing this Method, including type parameters:::Modifier.methodModifiers->this.isDefault->this.sharedToGenericString
Method#invoke(Object, Object...):::Invokes the underlying method represented by this Method object, on the specified object with the specified parameters:::Reflection.getCallerClass->this.checkAccess->this.acquireMethodAccessor->ma.invoke
Method#isBridge():::Returns true if this method is a bridge method; returns false otherwise.:::this.getModifiers
Method#isDefault():::Returns true if this method is a default method; returns false otherwise:::this.getModifiers->getDeclaringClass().isInterface
Method#getDefaultValue():::Returns the default value for the annotation member represented by this Method instance:::this.getReturnType->AnnotationType.invocationHandlerReturnType->ByteBuffer.wrap->this.getDeclaringClass->SharedSecrets.getJavaLangAccess().getConstantPool->this.getDeclaringClass->AnnotationParser.parseMemberValue->proxy.typeName->proxy.getCause
Modifier#isPublic(int):::Return true if the integer argument includes the public modifier, false otherwise.:::
Modifier#isPrivate(int):::Return true if the integer argument includes the private modifier, false otherwise.:::
Modifier#isProtected(int):::Return true if the integer argument includes the protected modifier, false otherwise.:::
Modifier#isStatic(int):::Return true if the integer argument includes the static modifier, false otherwise.:::
Modifier#isFinal(int):::Return true if the integer argument includes the final modifier, false otherwise.:::
Modifier#isSynchronized(int):::Return true if the integer argument includes the synchronized modifier, false otherwise.:::
Modifier#isVolatile(int):::Return true if the integer argument includes the volatile modifier, false otherwise.:::
Modifier#isTransient(int):::Return true if the integer argument includes the transient modifier, false otherwise.:::
Modifier#isNative(int):::Return true if the integer argument includes the native modifier, false otherwise.:::
Modifier#isInterface(int):::Return true if the integer argument includes the interface modifier, false otherwise.:::
Modifier#isAbstract(int):::Return true if the integer argument includes the abstract modifier, false otherwise.:::
Modifier#isStrict(int):::Return true if the integer argument includes the strictfp modifier, false otherwise.:::
Modifier#toString(int):::Return a string describing the access modifier flags in the specified modifier:::sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.add->sj.toString
Modifier#classModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a class.:::
Modifier#interfaceModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to an interface.:::
Modifier#constructorModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a constructor.:::
Modifier#methodModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a method.:::
Modifier#fieldModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a field.:::
Modifier#parameterModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a parameter.:::
Parameter#equals(Object):::Compares based on the executable and the index.:::other.executable.equals
Parameter#hashCode():::Returns a hash code based on the executable's hash code and the index.:::executable.hashCode
Parameter#isNamePresent():::Returns true if the parameter has a name according to the class file; returns false otherwise:::executable.hasRealParameterData
Parameter#toString():::Returns a string describing this parameter:::this.getParameterizedType->type.getTypeName->this.getModifiers->Modifier.toString->sb.append->sb.append->this.isVarArgs->sb.append->typename.replaceFirst->sb.append->sb.append->this.getName->sb.append->sb.toString
Parameter#getDeclaringExecutable():::Return the Executable which declares this parameter.:::
Parameter#getModifiers():::Get the modifier flags for this the parameter represented by this Parameter object.:::
Parameter#getName():::Returns the name of the parameter:::name.equals
Parameter#getParameterizedType():::Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.:::executable.getAllGenericParameterTypes
Parameter#getType():::Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.:::executable.getParameterTypes
Parameter#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.:::executable.getAnnotatedParameterTypes
Parameter#isImplicit():::Returns true if this parameter is implicitly declared in source code; returns false otherwise.:::this.getModifiers->Modifier.isMandated
Parameter#isSynthetic():::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.:::this.getModifiers->Modifier.isSynthetic
Parameter#isVarArgs():::Returns true if this parameter represents a variable argument list; returns false otherwise.:::executable.isVarArgs->executable.getParameterCount
ParameterizedType#getActualTypeArguments():::Returns an array of Type objects representing the actual type arguments to this type:::
ParameterizedType#getRawType():::Returns the Type object representing the class or interface that declared this type.:::
ParameterizedType#getOwnerType():::Returns a Type object representing the type that this type is a member of:::
Proxy#getProxyClass(ClassLoader, Class...):::Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces:::System.getSecurityManager->Reflection.getCallerClass->getProxyConstructor(caller, loader, interfaces).getDeclaringClass
Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler):::Returns a proxy instance for the specified interfaces that dispatches method invocations to the specified invocation handler:::Objects.requireNonNull->System.getSecurityManager->Reflection.getCallerClass->this.getProxyConstructor->this.newProxyInstance
Proxy#isProxyClass(Class):::Returns true if the given class is a proxy class.:::Proxy.class.isAssignableFrom->ProxyBuilder.isProxyClass
Proxy#getInvocationHandler(Object):::Returns the invocation handler for the specified proxy instance.:::proxy.getClass->this.isProxyClass->System.getSecurityManager->ih.getClass->Reflection.getCallerClass->caller.getClassLoader->ihClass.getClassLoader->ReflectUtil.needsPackageAccessCheck->ReflectUtil.checkPackageAccess
ProxyGenerator#generateProxyClass(String, Class[]):::Generate a public proxy class given a name and a list of proxy interfaces.:::this.generateProxyClass
ProxyGenerator#generateProxyClass(String, Class[], int):::Generate a proxy class given a name and a list of proxy interfaces.:::gen.generateClassFile->java.security.AccessController.doPrivileged
Type#getTypeName():::Returns a string describing this type, including information about any type parameters.:::this.toString
TypeVariable#getBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable:::
TypeVariable#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration declared this type variable.:::
TypeVariable#getName():::Returns the name of this type variable, as it occurs in the source code.:::
TypeVariable#getAnnotatedBounds():::Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable:::
UndeclaredThrowableException#getUndeclaredThrowable():::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null:::
UndeclaredThrowableException#getCause():::Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null).:::
WildcardType#getUpperBounds():::Returns an array of Type objects representing the  upper bound(s) of this type variable:::
WildcardType#getLowerBounds():::Returns an array of Type objects representing the lower bound(s) of this type variable:::

java.time.zone.Ser#writeExternal(ObjectOutput)->void:::Implements the Externalizable interface to write the object.
java.time.zone.Ser#write(Object, DataOutput)->void:::
java.time.zone.Ser#readExternal(ObjectInput)->void:::Implements the Externalizable interface to read the object.
java.time.zone.Ser#read(DataInput)->Object:::
java.time.zone.Ser#writeOffset(ZoneOffset, DataOutput)->void:::Writes the state to the stream.
java.time.zone.Ser#readOffset(DataInput)->ZoneOffset:::Reads the state from the stream.
java.time.zone.Ser#writeEpochSec(long, DataOutput)->void:::Writes the state to the stream.
java.time.zone.Ser#readEpochSec(DataInput)->long:::Reads the state from the stream.
java.time.zone.TzdbZoneRulesProvider#provideZoneIds()->Set<String>:::
java.time.zone.TzdbZoneRulesProvider#provideRules(String, boolean)->ZoneRules:::
java.time.zone.TzdbZoneRulesProvider#provideVersions(String)->NavigableMap<String, ZoneRules>:::
java.time.zone.TzdbZoneRulesProvider#toString()->String:::
java.time.zone.ZoneOffsetTransition#of(LocalDateTime, ZoneOffset, ZoneOffset)->ZoneOffsetTransition:::Obtains an instance defining a transition between two offsets
java.time.zone.ZoneOffsetTransition#writeExternal(DataOutput)->void:::Writes the state to the stream.
java.time.zone.ZoneOffsetTransition#readExternal(DataInput)->ZoneOffsetTransition:::Reads the state from the stream.
java.time.zone.ZoneOffsetTransition#getInstant()->Instant:::Gets the transition instant
java.time.zone.ZoneOffsetTransition#toEpochSecond()->long:::Gets the transition instant as an epoch second.
java.time.zone.ZoneOffsetTransition#getDateTimeBefore()->LocalDateTime:::Gets the local transition date-time, as would be expressed with the 'before' offset
java.time.zone.ZoneOffsetTransition#getDateTimeAfter()->LocalDateTime:::Gets the local transition date-time, as would be expressed with the 'after' offset
java.time.zone.ZoneOffsetTransition#getOffsetBefore()->ZoneOffset:::Gets the offset before the transition
java.time.zone.ZoneOffsetTransition#getOffsetAfter()->ZoneOffset:::Gets the offset after the transition
java.time.zone.ZoneOffsetTransition#getDuration()->Duration:::Gets the duration of the transition
java.time.zone.ZoneOffsetTransition#isGap()->boolean:::Does this transition represent a gap in the local time-line
java.time.zone.ZoneOffsetTransition#isOverlap()->boolean:::Does this transition represent an overlap in the local time-line
java.time.zone.ZoneOffsetTransition#isValidOffset(ZoneOffset)->boolean:::Checks if the specified offset is valid during this transition
java.time.zone.ZoneOffsetTransition#getValidOffsets()->List<ZoneOffset>:::Gets the valid offsets during this transition
java.time.zone.ZoneOffsetTransition#compareTo(ZoneOffsetTransition)->int:::Compares this transition to another based on the transition instant
java.time.zone.ZoneOffsetTransition#equals(Object)->boolean:::Checks if this object equals another
java.time.zone.ZoneOffsetTransition#hashCode()->int:::Returns a suitable hash code.
java.time.zone.ZoneOffsetTransition#toString()->String:::Returns a string describing this object.
java.time.zone.ZoneOffsetTransitionRule#of(Month, int, DayOfWeek, LocalTime, boolean, TimeDefinition, ZoneOffset, ZoneOffset, ZoneOffset)->ZoneOffsetTransitionRule:::Obtains an instance defining the yearly rule to create transitions between two offsets
java.time.zone.ZoneOffsetTransitionRule#writeExternal(DataOutput)->void:::Writes the state to the stream.
java.time.zone.ZoneOffsetTransitionRule#readExternal(DataInput)->ZoneOffsetTransitionRule:::Reads the state from the stream.
java.time.zone.ZoneOffsetTransitionRule#getMonth()->Month:::Gets the month of the transition
java.time.zone.ZoneOffsetTransitionRule#getDayOfMonthIndicator()->int:::Gets the indicator of the day-of-month of the transition
java.time.zone.ZoneOffsetTransitionRule#getDayOfWeek()->DayOfWeek:::Gets the day-of-week of the transition
java.time.zone.ZoneOffsetTransitionRule#getLocalTime()->LocalTime:::Gets the local time of day of the transition which must be checked with {@link #isMidnightEndOfDay()}
java.time.zone.ZoneOffsetTransitionRule#isMidnightEndOfDay()->boolean:::Is the transition local time midnight at the end of day
java.time.zone.ZoneOffsetTransitionRule#getTimeDefinition()->TimeDefinition:::Gets the time definition, specifying how to convert the time to an instant
java.time.zone.ZoneOffsetTransitionRule#getStandardOffset()->ZoneOffset:::Gets the standard offset in force at the transition.
java.time.zone.ZoneOffsetTransitionRule#getOffsetBefore()->ZoneOffset:::Gets the offset before the transition.
java.time.zone.ZoneOffsetTransitionRule#getOffsetAfter()->ZoneOffset:::Gets the offset after the transition.
java.time.zone.ZoneOffsetTransitionRule#createTransition(int)->ZoneOffsetTransition:::Creates a transition instance for the specified year
java.time.zone.ZoneOffsetTransitionRule#equals(Object)->boolean:::Checks if this object equals another
java.time.zone.ZoneOffsetTransitionRule#hashCode()->int:::Returns a suitable hash code.
java.time.zone.ZoneOffsetTransitionRule#toString()->String:::Returns a string describing this object.
java.time.zone.ZoneRules#of(ZoneOffset, ZoneOffset, List<ZoneOffsetTransition>, List<ZoneOffsetTransition>, List<ZoneOffsetTransitionRule>)->ZoneRules:::Obtains an instance of a ZoneRules.
java.time.zone.ZoneRules#of(ZoneOffset)->ZoneRules:::Obtains an instance of ZoneRules that has fixed zone rules.
java.time.zone.ZoneRules#writeExternal(DataOutput)->void:::Writes the state to the stream.
java.time.zone.ZoneRules#readExternal(DataInput)->ZoneRules:::Reads the state from the stream.
java.time.zone.ZoneRules#isFixedOffset()->boolean:::Checks of the zone rules are fixed, such that the offset never varies.
java.time.zone.ZoneRules#getOffset(Instant)->ZoneOffset:::Gets the offset applicable at the specified instant in these rules
java.time.zone.ZoneRules#getOffset(LocalDateTime)->ZoneOffset:::Gets a suitable offset for the specified local date-time in these rules
java.time.zone.ZoneRules#getValidOffsets(LocalDateTime)->List<ZoneOffset>:::Gets the offset applicable at the specified local date-time in these rules
java.time.zone.ZoneRules#getTransition(LocalDateTime)->ZoneOffsetTransition:::Gets the offset transition applicable at the specified local date-time in these rules
java.time.zone.ZoneRules#getStandardOffset(Instant)->ZoneOffset:::Gets the standard offset for the specified instant in this zone
java.time.zone.ZoneRules#getDaylightSavings(Instant)->Duration:::Gets the amount of daylight savings in use for the specified instant in this zone
java.time.zone.ZoneRules#isDaylightSavings(Instant)->boolean:::Checks if the specified instant is in daylight savings
java.time.zone.ZoneRules#isValidOffset(LocalDateTime, ZoneOffset)->boolean:::Checks if the offset date-time is valid for these rules
java.time.zone.ZoneRules#nextTransition(Instant)->ZoneOffsetTransition:::Gets the next transition after the specified instant
java.time.zone.ZoneRules#previousTransition(Instant)->ZoneOffsetTransition:::Gets the previous transition before the specified instant
java.time.zone.ZoneRules#getTransitions()->List<ZoneOffsetTransition>:::Gets the complete list of fully defined transitions
java.time.zone.ZoneRules#getTransitionRules()->List<ZoneOffsetTransitionRule>:::Gets the list of transition rules for years beyond those defined in the transition list
java.time.zone.ZoneRules#equals(Object)->boolean:::Checks if this set of rules equals another
java.time.zone.ZoneRules#hashCode()->int:::Returns a suitable hash code given the definition of #equals.
java.time.zone.ZoneRules#toString()->String:::Returns a string describing this object.
java.time.zone.ZoneRulesProvider#getAvailableZoneIds()->Set<String>:::Gets the set of available zone IDs
java.time.zone.ZoneRulesProvider#getRules(String, boolean)->ZoneRules:::Gets the rules for the zone ID
java.time.zone.ZoneRulesProvider#getVersions(String)->NavigableMap<String, ZoneRules>:::Gets the history of rules for the zone ID
java.time.zone.ZoneRulesProvider#registerProvider(ZoneRulesProvider)->void:::Registers a zone rules provider
java.time.zone.ZoneRulesProvider#refresh()->boolean:::Refreshes the rules from the underlying data provider
java.time.zone.ZoneRulesProvider#provideZoneIds()->Set<String>:::SPI method to get the available zone IDs
java.time.zone.ZoneRulesProvider#provideRules(String, boolean)->ZoneRules:::SPI method to get the rules for the zone ID
java.time.zone.ZoneRulesProvider#provideVersions(String)->NavigableMap<String, ZoneRules>:::SPI method to get the history of rules for the zone ID
java.time.zone.ZoneRulesProvider#provideRefresh()->boolean:::SPI method to refresh the rules from the underlying data provider

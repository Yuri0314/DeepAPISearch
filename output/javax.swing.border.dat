AbstractBorder#paintBorder(Component, Graphics, int, int, int, int):::This default implementation does no painting.:::
AbstractBorder#getBorderInsets(Component):::This default implementation returns a new Insets object that is initialized by the #getBorderInsets(Component,Insets) method:::return->new->Insets->getBorderInsets
AbstractBorder#getBorderInsets(Component, Insets):::Reinitializes the insets parameter with this Border's current Insets.:::return
AbstractBorder#isBorderOpaque():::This default implementation returns false.:::return
AbstractBorder#getInteriorRectangle(Component, int, int, int, int):::This convenience method calls the static method.:::return->getInteriorRectangle
AbstractBorder#getInteriorRectangle(Component, Border, int, int, int, int):::Returns a rectangle using the arguments minus the insets of the border:::insets->if->b->getBorderInsets->else->new->Insets->return->new->Rectangle
AbstractBorder#getBaseline(Component, int, int):::Returns the baseline:::if->throw->new->IllegalArgumentException->return
AbstractBorder#getBaselineResizeBehavior(Component):::Returns an enum indicating how the baseline of a component changes as the size changes:::if->throw->new->NullPointerException->return
AbstractBorder#isLeftToRight(Component)::: abstract border is left to right:::return->c->getComponentOrientation->isLeftToRight
BevelBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::if->paintRaisedBevel->else->if->paintLoweredBevel
BevelBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::insets->set->return
BevelBorder#getHighlightOuterColor(Component):::Returns the outer highlight color of the bevel border when rendered on the specified component:::highlight->getHighlightOuterColor->return->c->getBackground->brighter->brighter
BevelBorder#getHighlightInnerColor(Component):::Returns the inner highlight color of the bevel border when rendered on the specified component:::highlight->getHighlightInnerColor->return->c->getBackground->brighter
BevelBorder#getShadowInnerColor(Component):::Returns the inner shadow color of the bevel border when rendered on the specified component:::shadow->getShadowInnerColor->return->c->getBackground->darker
BevelBorder#getShadowOuterColor(Component):::Returns the outer shadow color of the bevel border when rendered on the specified component:::shadow->getShadowOuterColor->return->c->getBackground->darker->darker
BevelBorder#getHighlightOuterColor():::Returns the outer highlight color of the bevel border:::return
BevelBorder#getHighlightInnerColor():::Returns the inner highlight color of the bevel border:::return
BevelBorder#getShadowInnerColor():::Returns the inner shadow color of the bevel border:::return
BevelBorder#getShadowOuterColor():::Returns the outer shadow color of the bevel border:::return
BevelBorder#getBevelType():::Returns the type of the bevel border.:::return
BevelBorder#isBorderOpaque():::Returns whether or not the border is opaque:::return
BevelBorder#paintRaisedBevel(Component, Graphics, int, int, int, int):::Paints a raised bevel for the specified component with the specified position and size.:::oldColor->g->getColor->h->w->g->translate->g->getHighlightOuterColor->setColor->g->drawLine->g->drawLine->g->getHighlightInnerColor->setColor->g->drawLine->g->drawLine->g->getShadowOuterColor->setColor->g->drawLine->g->drawLine->g->getShadowInnerColor->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BevelBorder#paintLoweredBevel(Component, Graphics, int, int, int, int):::Paints a lowered bevel for the specified component with the specified position and size.:::oldColor->g->getColor->h->w->g->translate->g->getShadowInnerColor->setColor->g->drawLine->g->drawLine->g->getShadowOuterColor->setColor->g->drawLine->g->drawLine->g->getHighlightOuterColor->setColor->g->drawLine->g->drawLine->g->getHighlightInnerColor->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
Border#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::
Border#getBorderInsets(Component):::Returns the insets of the border.:::
Border#isBorderOpaque():::Returns whether or not the border is opaque:::
CompoundBorder#isBorderOpaque():::Returns whether or not the compound border is opaque.:::return->outsideBorder->isBorderOpaque->insideBorder->isBorderOpaque
CompoundBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the compound border by painting the outside border with the specified position and size and then painting the inside border at the specified position and size offset by the insets of the outside border.:::nextInsets->px->py->pw->ph->if->outsideBorder->paintBorder->outsideBorder->getBorderInsets->if->insideBorder->paintBorder
CompoundBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::nextInsets->if->outsideBorder->getBorderInsets->if->insideBorder->getBorderInsets->return
CompoundBorder#getOutsideBorder():::Returns the outside border object.:::return
CompoundBorder#getInsideBorder():::Returns the inside border object.:::return
EmptyBorder#paintBorder(Component, Graphics, int, int, int, int):::Does no drawing by default.:::
EmptyBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::return
EmptyBorder#getBorderInsets():::Returns the insets of the border.:::return->new->Insets
EmptyBorder#isBorderOpaque():::Returns whether or not the border is opaque:::return
EtchedBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::w->h->g->translate->g->getShadowColor->getHighlightColor->setColor->g->drawRect->g->getHighlightColor->getShadowColor->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->translate
EtchedBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::insets->set->return
EtchedBorder#isBorderOpaque():::Returns whether or not the border is opaque:::return
EtchedBorder#getEtchType():::Returns which etch-type is set on the etched border.:::return
EtchedBorder#getHighlightColor(Component):::Returns the highlight color of the etched border when rendered on the specified component:::return->c->getBackground->brighter
EtchedBorder#getHighlightColor():::Returns the highlight color of the etched border:::return
EtchedBorder#getShadowColor(Component):::Returns the shadow color of the etched border when rendered on the specified component:::return->c->getBackground->darker
EtchedBorder#getShadowColor():::Returns the shadow color of the etched border:::return
LineBorder#createBlackLineBorder():::Convenience method for getting the Color.black LineBorder of thickness 1.:::if->new->LineBorder->return
LineBorder#createGrayLineBorder():::Convenience method for getting the Color.gray LineBorder of thickness 1.:::if->new->LineBorder->return
LineBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::if->g2d->oldColor->g2d->getColor->g2d->setColor->outer->inner->offs->size->if->arc->new->RoundRectangle2D.Float->new->RoundRectangle2D.Float->else->new->Rectangle2D.Float->new->Rectangle2D.Float->path->new->Path2D.Float->path->append->path->append->g2d->fill->g2d->setColor
LineBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::insets->set->return
LineBorder#getLineColor():::Returns the color of the border.:::return
LineBorder#getThickness():::Returns the thickness of the border.:::return
LineBorder#getRoundedCorners():::Returns whether this border will be drawn with rounded corners.:::return
LineBorder#isBorderOpaque():::Returns whether or not the border is opaque.:::return
MatteBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the matte border.:::insets->getBorderInsets->oldColor->g->getColor->g->translate->if->tileIcon->getIconWidth->if->g->setColor->g->fillRect->g->fillRect->g->fillRect->g->fillRect->else->if->tileW->tileIcon->getIconWidth->tileH->tileIcon->getIconHeight->paintEdge->paintEdge->paintEdge->paintEdge->g->translate->g->setColor
MatteBorder#paintEdge(Component, Graphics, int, int, int, int, int, int)::: matte border paint edge:::g->create->sY->for->g->dispose
MatteBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::return->computeInsets
MatteBorder#getBorderInsets():::Returns the insets of the border.:::return->new->Insets->computeInsets
MatteBorder#computeInsets(Insets)::: matte border compute insets:::if->w->tileIcon->getIconWidth->h->tileIcon->getIconHeight->else->return
MatteBorder#getMatteColor():::Returns the color used for tiling the border or null if a tile icon is being used.:::return
MatteBorder#getTileIcon():::Returns the icon used for tiling the border or null if a solid color is being used.:::return
MatteBorder#isBorderOpaque():::Returns whether or not the border is opaque.:::return
SoftBevelBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::oldColor->g->getColor->g->translate->if->g->getHighlightOuterColor->setColor->g->drawLine->g->drawLine->g->drawLine->g->getHighlightInnerColor->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->getShadowOuterColor->setColor->g->drawLine->g->drawLine->g->getShadowInnerColor->setColor->g->drawLine->else->if->g->getShadowOuterColor->setColor->g->drawLine->g->drawLine->g->drawLine->g->getShadowInnerColor->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->getHighlightOuterColor->setColor->g->drawLine->g->drawLine->g->getHighlightInnerColor->setColor->g->drawLine->g->translate->g->setColor
SoftBevelBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::insets->set->return
SoftBevelBorder#isBorderOpaque():::Returns whether or not the border is opaque.:::return
StrokeBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size:::size->getLineWidth->if->g->create->if->g2d->g2d->setStroke->g2d->c->getForeground->setPaint->g2d->setRenderingHint->g2d->new->Rectangle2D.Float->draw->g->dispose
StrokeBorder#getBorderInsets(Component, Insets):::Reinitializes the insets parameter with this border's current insets:::size->Math->getLineWidth->ceil->insets->set->return
StrokeBorder#getStroke():::Returns the BasicStroke object used to stroke a shape during the border rendering.:::return
StrokeBorder#getPaint():::Returns the Paint object used to generate a color during the border rendering.:::return
TitledBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::border->getBorder->title->getTitle->if->title->isEmpty->edge->label->getLabel->size->label->getPreferredSize->insets->new->Insets->getBorderInsets->borderX->borderY->borderW->borderH->labelY->labelH->position->getPosition->switch->break->if->else->break->break->break->if->else->break->break->labelX->labelW->if->switch->getJustification->break->break->break->if->if->border->paintBorder->else->g2->g->create->if->g2d->path->new->Path2D.Float->path->new->Rectangle->append->path->new->Rectangle->append->path->new->Rectangle->append->path->new->Rectangle->append->g2d->clip->border->paintBorder->g2->dispose->g->translate->label->setSize->label->paint->g->translate->else->if->border->paintBorder
TitledBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::border->getBorder->getBorderInsets->title->getTitle->if->title->isEmpty->edge->label->getLabel->size->label->getPreferredSize->switch->getPosition->break->if->break->break->break->if->break->break->return
TitledBorder#isBorderOpaque():::Returns whether or not the border is opaque.:::return
TitledBorder#getTitle():::Returns the title of the titled border.:::return
TitledBorder#getBorder():::Returns the border of the titled border.:::return->UIManager->getBorder
TitledBorder#getTitlePosition():::Returns the title-position of the titled border.:::return
TitledBorder#getTitleJustification():::Returns the title-justification of the titled border.:::return
TitledBorder#getTitleFont():::Returns the title-font of the titled border.:::return->UIManager->getFont
TitledBorder#getTitleColor():::Returns the title-color of the titled border.:::return->UIManager->getColor
TitledBorder#setTitle(String):::Sets the title of the titled border.:::
TitledBorder#setBorder(Border):::Sets the border of the titled border.:::
TitledBorder#setTitlePosition(int):::Sets the title-position of the titled border.:::switch->break->throw->new->IllegalArgumentException
TitledBorder#setTitleJustification(int):::Sets the title-justification of the titled border.:::switch->break->throw->new->IllegalArgumentException
TitledBorder#setTitleFont(Font):::Sets the title-font of the titled border.:::
TitledBorder#setTitleColor(Color):::Sets the title-color of the titled border.:::
TitledBorder#getMinimumSize(Component):::Returns the minimum dimensions this border requires in order to fully display the border and title.:::insets->getBorderInsets->minSize->new->Dimension->title->getTitle->if->title->isEmpty->label->getLabel->size->label->getPreferredSize->position->getPosition->if->else->if->return
TitledBorder#getBaseline(Component, int, int):::Returns the baseline.:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->border->getBorder->title->getTitle->if->title->isEmpty->edge->label->getLabel->size->label->getPreferredSize->insets->new->Insets->getBorderInsets->baseline->label->getBaseline->switch->getPosition->return->return->return->return->return->return->return
TitledBorder#getBaselineResizeBehavior(Component):::Returns an enum indicating how the baseline of the border changes as the size changes.:::super->getBaselineResizeBehavior->switch->getPosition->return->return->return
TitledBorder#getPosition()::: titled border get position:::position->getTitlePosition->if->return->value->UIManager->get->if->i->if->return->else->if->s->if->s->equalsIgnoreCase->return->if->s->equalsIgnoreCase->return->if->s->equalsIgnoreCase->return->if->s->equalsIgnoreCase->return->if->s->equalsIgnoreCase->return->if->s->equalsIgnoreCase->return->return
TitledBorder#getJustification(Component)::: titled border get justification:::justification->getTitleJustification->if->return->c->getComponentOrientation->isLeftToRight->if->return->c->getComponentOrientation->isLeftToRight->return
TitledBorder#getFont(Component):::Returns default font of the titled border.:::font->getTitleFont->if->return->if->c->getFont->if->return->return->new->Font
TitledBorder#getColor(Component)::: titled border get color:::color->getTitleColor->if->return->return->c->getForeground
TitledBorder#getLabel(Component)::: titled border get label:::getTitle->setText->getFont->setFont->getColor->setForeground->c->getComponentOrientation->setComponentOrientation->c->isEnabled->setEnabled->return
TitledBorder#getBorderInsets(Border, Component, Insets)::: titled border get border insets:::if->insets->set->else->if->ab->ab->getBorderInsets->else->i->border->getBorderInsets->insets->set->return
TitledBorder#installPropertyChangeListeners()::: titled border install property change listeners:::weakReference->new->WeakReference<TitledBorder>->listener->new->PropertyChangeListener->UIManager->addPropertyChangeListener->UIManager->getDefaults->addPropertyChangeListener

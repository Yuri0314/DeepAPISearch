ASTWriter#toString():::Use the ASTWriter by instantiating it and retrieving its String representation:::sb->new->StringBuilder->printAST->return->sb->toString
ASTWriter#toArray():::Return the visited nodes in an ordered list:::preorder->new->ArrayList<>->new->StringBuilder->printAST->return->preorder->new->NodeArr->toArray
ASTWriter#printAST(StringBuilder, List, Field, String, Node, int)::: writer print t:::ASTWriter->indent->if->sb->append->sb->append->sb->append->return->if->preorder->add->isReference->field->isAnnotationPresent->clazz->node->getClass->type->clazz->getName->type->type->lastIndexOf->type->length->substring->truncate->type->indexOf->if->type->indexOf->if->type->substring->type->toLowerCase->if->symbol->if->getSymbol->else->if->if->needsScope->children->new->LinkedList<>->if->enqueueChildren->status->if->isTerminal->if->hasGoto->if->status->trim->if->equals->if->tname->getType->toString->if->tname->indexOf->tname->tname->lastIndexOf->tname->length->substring->Debug->id->if->children->isEmpty->sb->append->append->append->append->append->append->append->append->append->append->else->sb->append->append->append->append->append->Token->node->getToken->toString->append->append->append->append->foreach->if->child->isAnnotationPresent->continue->value->try->child->get->catch->Context->printStackTrace->return->finally->if->child->getName->printAST->else->if->pos->ASTWriter->indent->sb->append->child->getName->append->append->size->append->append->append->foreach->child->getName->printAST
ASTWriter#enqueueChildren(Node, Class, List)::: writer enqueue children:::stack->new->ArrayDeque<>->clazz->do->stack->push->clazz->getSuperclass->while->if->stack->stack->removeLast->push->iter->stack->descendingIterator->stack->iterator->while->iter->hasNext->c->iter->next->foreach->accessibleFields->get->try->child->f->get->if->continue->if->children->add->else->if->if->isEmpty->children->add->catch->return->finally
ASTWriter#indent(StringBuilder, int)::: writer indent:::for->i
JSONWriter#parse(Context, String, String, boolean):::Returns AST as JSON compatible string.:::parser->context->getEnv->sourceFor->new->Context.ThrowErrorManager->context->getEnv->context->getLogger->new->Parser->jsonWriter->new->JSONWriter->try->functionNode->parser->parse->functionNode->accept->return->jsonWriter->getString->catch->e->throwAsEcmaException->return->finally
JSONWriter#enterJoinPredecessorExpression(JoinPredecessorExpression)::: writer enter join predecessor expression:::expr->joinPredecessorExpression->getExpression->if->expr->accept->else->nullValue->return
JSONWriter#enterDefault(Node)::: writer enter default:::objectStart->location->return
JSONWriter#leave()::: writer leave:::objectEnd->return
JSONWriter#leaveDefault(Node)::: writer leave default:::objectEnd->return
JSONWriter#enterAccessNode(AccessNode)::: writer enter access node:::enterDefault->type->comma->property->accessNode->getBase->accept->comma->accessNode->getProperty->property->comma->property->return->leave
JSONWriter#enterBlock(Block)::: writer enter block:::enterDefault->type->comma->block->getStatements->array->return->leave
JSONWriter#enterBinaryNode(BinaryNode)::: writer enter binary node:::enterDefault->name->if->binaryNode->isAssignment->else->if->binaryNode->isLogical->else->type->comma->binaryNode->tokenType->getName->property->comma->property->binaryNode->lhs->accept->comma->property->binaryNode->rhs->accept->return->leave
JSONWriter#enterBreakNode(BreakNode)::: writer enter break node:::enterDefault->type->comma->label->breakNode->getLabelName->if->property->else->property->nullValue->return->leave
JSONWriter#enterCallNode(CallNode)::: writer enter call node:::enterDefault->type->comma->property->callNode->getFunction->accept->comma->callNode->getArgs->array->return->leave
JSONWriter#enterCaseNode(CaseNode)::: writer enter case node:::enterDefault->type->comma->test->caseNode->getTest->property->if->test->accept->else->nullValue->comma->caseNode->getBody->getStatements->array->return->leave
JSONWriter#enterCatchNode(CatchNode)::: writer enter catch node:::enterDefault->type->comma->property->catchNode->getException->accept->comma->guard->catchNode->getExceptionCondition->if->property->guard->accept->comma->property->catchNode->getBody->accept->return->leave
JSONWriter#enterContinueNode(ContinueNode)::: writer enter continue node:::enterDefault->type->comma->label->continueNode->getLabelName->if->property->else->property->nullValue->return->leave
JSONWriter#enterDebuggerNode(DebuggerNode)::: writer enter debugger node:::enterDefault->type->return->leave
JSONWriter#enterEmptyNode(EmptyNode)::: writer enter empty node:::enterDefault->type->return->leave
JSONWriter#enterExpressionStatement(ExpressionStatement)::: writer enter expression statement:::expression->expressionStatement->getExpression->if->return->enterDefault->type->comma->property->expression->accept->return->leave
JSONWriter#enterBlockStatement(BlockStatement)::: writer enter block statement:::if->blockStatement->isSynthetic->blk->blockStatement->getBlock->blk->getStatements->get->accept->return->enterDefault->type->comma->blockStatement->getBlock->getStatements->array->return->leave
JSONWriter#enterForNode(ForNode)::: writer enter for node:::enterDefault->if->forNode->isForIn->forNode->isForEach->forNode->getInit->type->comma->init->forNode->getInit->property->init->accept->comma->modify->forNode->getModify->property->modify->accept->comma->property->forNode->getBody->accept->comma->forNode->isForEach->property->else->type->comma->init->forNode->getInit->property->if->init->accept->else->nullValue->comma->test->forNode->getTest->property->if->test->accept->else->nullValue->comma->update->forNode->getModify->property->if->update->accept->else->nullValue->comma->property->forNode->getBody->accept->return->leave
JSONWriter#enterFunctionNode(FunctionNode)::: writer enter function node:::program->functionNode->isProgram->if->return->emitProgram->enterDefault->name->if->functionNode->isDeclared->else->type->comma->property->kind->functionNode->getKind->if->functionNode->isAnonymous->nullValue->else->functionNode->getIdent->accept->comma->functionNode->getParameters->array->comma->arrayStart->arrayEnd->comma->property->nullValue->comma->property->functionNode->getBody->accept->comma->property->comma->property->return->leave
JSONWriter#emitProgram(FunctionNode)::: writer emit program:::enterDefault->type->comma->stats->functionNode->getBody->getStatements->size->stats->size->idx->arrayStart->foreach->stat->accept->if->comma->arrayEnd->return->leave
JSONWriter#enterIdentNode(IdentNode)::: writer enter ident node:::enterDefault->name->identNode->getName->if->equals->type->else->type->comma->identNode->getName->property->return->leave
JSONWriter#enterIfNode(IfNode)::: writer enter if node:::enterDefault->type->comma->property->ifNode->getTest->accept->comma->property->ifNode->getPass->accept->elsePart->ifNode->getFail->comma->property->if->elsePart->accept->else->nullValue->return->leave
JSONWriter#enterIndexNode(IndexNode)::: writer enter index node:::enterDefault->type->comma->property->indexNode->getBase->accept->comma->property->indexNode->getIndex->accept->comma->property->return->leave
JSONWriter#enterLabelNode(LabelNode)::: writer enter label node:::enterDefault->type->comma->labelNode->getLabelName->property->comma->property->labelNode->getBody->accept->return->leave
JSONWriter#enterLiteralNode(LiteralNode)::: writer enter literal node:::enterDefault->if->type->comma->getElementExpressions->array->else->type->comma->property->value->literalNode->getValue->if->regex->regexBuf->new->StringBuilder->regexBuf->append->regexBuf->regex->getExpression->append->regexBuf->append->regexBuf->regex->getOptions->append->buf->regexBuf->toString->quote->append->else->str->literalNode->getString->buf->literalNode->isString->quote->append->return->leave
JSONWriter#enterObjectNode(ObjectNode)::: writer enter object node:::enterDefault->type->comma->objectNode->getElements->array->return->leave
JSONWriter#enterPropertyNode(PropertyNode)::: writer enter property node:::key->propertyNode->getKey->value->propertyNode->getValue->if->objectStart->location->property->key->accept->comma->property->value->accept->comma->property->objectEnd->else->getter->propertyNode->getGetter->if->objectStart->location->property->key->accept->comma->property->getter->accept->comma->property->objectEnd->setter->propertyNode->getSetter->if->if->comma->objectStart->location->property->key->accept->comma->property->setter->accept->comma->property->objectEnd->return
JSONWriter#enterReturnNode(ReturnNode)::: writer enter return node:::enterDefault->type->comma->arg->returnNode->getExpression->property->if->arg->accept->else->nullValue->return->leave
JSONWriter#enterRuntimeNode(RuntimeNode)::: writer enter runtime node:::return
JSONWriter#enterSplitNode(SplitNode)::: writer enter split node:::return
JSONWriter#enterSwitchNode(SwitchNode)::: writer enter switch node:::enterDefault->type->comma->property->switchNode->getExpression->accept->comma->switchNode->getCases->array->return->leave
JSONWriter#enterTernaryNode(TernaryNode)::: writer enter ternary node:::enterDefault->type->comma->property->ternaryNode->getTest->accept->comma->property->ternaryNode->getTrueExpression->accept->comma->property->ternaryNode->getFalseExpression->accept->return->leave
JSONWriter#enterThrowNode(ThrowNode)::: writer enter throw node:::enterDefault->type->comma->property->throwNode->getExpression->accept->return->leave
JSONWriter#enterTryNode(TryNode)::: writer enter try node:::enterDefault->type->comma->property->tryNode->getBody->accept->comma->catches->tryNode->getCatches->guarded->new->ArrayList<>->unguarded->if->foreach->cn->if->cn->getExceptionCondition->guarded->add->else->array->comma->property->if->unguarded->accept->else->nullValue->comma->property->finallyNode->tryNode->getFinallyBody->if->finallyNode->accept->else->nullValue->return->leave
JSONWriter#enterUnaryNode(UnaryNode)::: writer enter unary node:::enterDefault->tokenType->unaryNode->tokenType->if->type->comma->callNode->unaryNode->getExpression->property->callNode->getFunction->accept->comma->callNode->getArgs->array->else->operator->prefix->switch->break->break->break->break->tokenType->getName->break->unaryNode->isAssignment->type->comma->property->comma->property->comma->property->unaryNode->getExpression->accept->return->leave
JSONWriter#enterVarNode(VarNode)::: writer enter var node:::init->varNode->getInit->if->isDeclared->init->accept->return->enterDefault->type->comma->arrayStart->objectStart->varNode->getName->location->type->comma->property->varNode->getName->accept->comma->property->if->init->accept->else->nullValue->objectEnd->arrayEnd->return->leave
JSONWriter#enterWhileNode(WhileNode)::: writer enter while node:::enterDefault->whileNode->isDoWhile->type->comma->if->whileNode->isDoWhile->property->whileNode->getBody->accept->comma->property->whileNode->getTest->accept->else->property->whileNode->getTest->accept->comma->property->whileNode->getBody->accept->return->leave
JSONWriter#enterWithNode(WithNode)::: writer enter with node:::enterDefault->type->comma->property->withNode->getExpression->accept->comma->property->withNode->getBody->accept->return->leave
JSONWriter#getString()::: writer get string:::return->buf->toString
JSONWriter#property(String, String, boolean)::: writer property:::buf->append->buf->append->buf->append->if->if->buf->append->buf->append->if->buf->append
JSONWriter#property(String, String)::: writer property:::property
JSONWriter#property(String, boolean)::: writer property:::Boolean->toString->property
JSONWriter#property(String, int)::: writer property:::Integer->toString->property
JSONWriter#property(String)::: writer property:::property
JSONWriter#type(String)::: writer type:::property
JSONWriter#objectStart(String)::: writer object start:::buf->append->buf->append->buf->append
JSONWriter#objectStart()::: writer object start:::buf->append
JSONWriter#objectEnd()::: writer object end:::buf->append
JSONWriter#array(String, List)::: writer array:::size->nodes->size->idx->arrayStart->foreach->if->node->accept->else->nullValue->if->comma->arrayEnd
JSONWriter#arrayStart(String)::: writer array start:::buf->append->buf->append->buf->append->buf->append->buf->append
JSONWriter#arrayEnd()::: writer array end:::buf->append
JSONWriter#comma()::: writer comma:::buf->append
JSONWriter#nullValue()::: writer null value:::buf->append
JSONWriter#location(Node)::: writer location:::if->objectStart->src->lc->getCurrentFunction->getSource->src->getName->property->comma->objectStart->start->node->getStart->src->getLine->property->comma->src->getColumn->property->objectEnd->comma->objectStart->end->node->getFinish->src->getLine->property->comma->src->getColumn->property->objectEnd->objectEnd->comma
JSONWriter#quote(String)::: writer quote:::return->JSONParser->quote
NashornClassReader#getExtraLabels(String, String, String)::: nashorn class reader get extra labels:::key->fullyQualifiedName->return->labelMap->get
NashornClassReader#readByte(byte[], int)::: nashorn class reader read byte:::return
NashornClassReader#readShort(byte[], int)::: nashorn class reader read short:::return
NashornClassReader#readInt(byte[], int)::: nashorn class reader read int:::return
NashornClassReader#readLong(byte[], int)::: nashorn class reader read long:::hi->readInt->lo->readInt->return
NashornClassReader#readUTF(int, int, byte[])::: nashorn class reader read f:::endIndex->buf->new->charArr->strLen->c->st->cc->i->while->switch->if->else->if->else->break->break->break->break->return->new->String
NashornClassReader#parse(byte[])::: nashorn class reader parse:::thisClassName->u->magic->readInt->readShort->readShort->cpc->readShort->cp->new->ArrayList<>->cp->add->for->i->readShort->cls->readShort->cp->get->toString->ifc->readShort->fc->readShort->for->i->mc->readShort->for->i->ac->readShort->for->i->return
NashornClassReader#fullyQualifiedName(String, String, String)::: nashorn class reader fully qualified name:::return
NashornClassReader#parseCode(byte[], int, int, String)::: nashorn class reader parse code:::labels->new->ArrayList<>->labelMap->put->wide->for->i
NashornClassReader#accept(ClassVisitor, Attribute[], int)::: nashorn class reader accept:::super->accept
NashornClassReader#readLabel(int, Label[])::: nashorn class reader read label:::label->super->readLabel->return
NashornClassReader.Constant#getType()::: constant get type:::str->while->str->length->return
NashornClassReader.IndexInfo#toString()::: index info to string:::return->cp->get->toString
NashornClassReader.IndexInfo2#toString()::: index info2 to string:::return->super->toString->cp->get->toString
NashornClassReader.DirectInfo#toString()::: direct info to string:::return->info->toString
NashornTextifier#visit(int, int, String, String, String, String[])::: nashorn textifier visit:::major->minor->sb->new->StringBuilder->sb->append->append->append->append->append->append->append->if->sb->append->sb->append->Integer->toHexString->toUpperCase->append->append->appendDescriptor->if->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->accept->sb->append->append->sv->getDeclaration->append->append->appendAccess->if->sb->append->else->if->sb->append->else->if->sb->append->appendDescriptor->if->equals->sb->append->appendDescriptor->sb->append->if->sb->append->foreach->appendDescriptor->sb->append->sb->append->addText
NashornTextifier#visitSource(String, String)::: nashorn textifier visit source:::sb->new->StringBuilder->if->sb->append->append->append->append->if->sb->append->append->append->append->if->sb->length->addText
NashornTextifier#visitOuterClass(String, String, String)::: nashorn textifier visit outer class:::sb->new->StringBuilder->sb->append->append->appendDescriptor->sb->append->if->sb->append->append->appendDescriptor->sb->append->addText
NashornTextifier#visitField(int, String, String, String, Object)::: nashorn textifier visit field:::sb->new->StringBuilder->if->sb->append->append->if->sb->append->appendDescriptor->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->acceptType->sb->append->append->sv->getDeclaration->append->append->sb->append->appendAccess->prunedDesc->desc->endsWith->desc->desc->length->substring->appendDescriptor->sb->append->append->if->sb->append->if->sb->append->append->append->else->sb->append->sb->append->addText->t->createNashornTextifier->t->getText->addText->return
NashornTextifier#visitMethod(int, String, String, String, String[])::: nashorn textifier visit method:::new->Graph->extraLabels->cr->getExtraLabels->extraLabels->iterator->sb->new->StringBuilder->sb->append->if->sb->append->append->sb->append->append->Integer->toHexString->toUpperCase->append->append->if->sb->append->appendDescriptor->v->new->TraceSignatureVisitor->r->new->SignatureReader->r->accept->genericDecl->v->getDeclaration->genericReturn->v->getReturnType->genericExceptions->v->getExceptions->sb->append->append->append->append->append->append->if->sb->append->append->sb->append->sb->append->appendAccess->if->sb->append->if->sb->append->if->sb->append->sb->append->appendDescriptor->if->sb->append->foreach->appendDescriptor->sb->append->sb->append->addText->t->createNashornTextifier->t->getText->addText->return
NashornTextifier#visitClassEnd()::: nashorn textifier visit class end:::addText
NashornTextifier#visitFieldEnd()::: nashorn textifier visit field end:::
NashornTextifier#visitParameter(String, int)::: nashorn textifier visit parameter:::sb->new->StringBuilder->sb->append->append->appendAccess->sb->append->append->append->addText
NashornTextifier#visitCode()::: nashorn textifier visit code:::
NashornTextifier#visitFrame(int, int, Object[], int, Object[])::: nashorn textifier visit frame:::sb->new->StringBuilder->sb->append->switch->sb->append->appendFrameTypes->sb->append->appendFrameTypes->sb->append->break->sb->append->appendFrameTypes->sb->append->break->sb->append->append->break->sb->append->break->sb->append->appendFrameTypes->break->break->sb->append->sb->append->addText
NashornTextifier#appendOpcode(StringBuilder, int)::: nashorn textifier append opcode:::next->getNextLabel->if->bci->next->getOffset->if->bcis->for->i->bcis->length->sb->append->sb->append->else->sb->append->return->sb->append->toLowerCase->append
NashornTextifier#getNextLabel()::: nashorn textifier get next label:::return->labelIter->next
NashornTextifier#visitInsn(int)::: nashorn textifier visit insn:::if->if->getNextLabel->return->else->if->getNextLabel->addText->return->else->else->sb->new->StringBuilder->appendOpcode->append->addText->checkNoFallThru
NashornTextifier#visitIntInsn(int, int)::: nashorn textifier visit int insn:::sb->new->StringBuilder->appendOpcode->append->Integer->toString->append->append->addText
NashornTextifier#visitVarInsn(int, int)::: nashorn textifier visit var insn:::sb->new->StringBuilder->appendOpcode->append->append->append->addText
NashornTextifier#visitTypeInsn(int, String)::: nashorn textifier visit type insn:::sb->new->StringBuilder->appendOpcode->append->appendDescriptor->sb->append->addText
NashornTextifier#visitFieldInsn(int, String, String, String)::: nashorn textifier visit field insn:::sb->new->StringBuilder->appendOpcode->append->appendDescriptor->sb->append->append->append->appendDescriptor->sb->append->addText
NashornTextifier#visitMethodInsn(int, String, String, String, boolean)::: nashorn textifier visit method insn:::sb->new->StringBuilder->appendOpcode->append->appendDescriptor->sb->append->append->appendDescriptor->sb->append->addText
NashornTextifier#visitInvokeDynamicInsn(String, String, Handle, Object...)::: nashorn textifier visit invoke dynamic insn:::sb->new->StringBuilder->appendOpcode->append->isNashornBootstrap->isNashornBootstrap->isNashornMathBootstrap->isNashornMathBootstrap->if->sb->NashornCallSiteDescriptor->getOperationName->append->decodedName->NameCodec->decode->if->decodedName->isEmpty->sb->append->append->else->sb->append->appendDescriptor->len->sb->length->for->i->sb->append->appendHandle->if->sb->append->else->foreach->if->appendStr->else->if->sb->getDescriptor->append->append->else->if->appendHandle->else->if->NashornCallSiteDescriptor->appendFlags->else->if->sb->append->append->else->sb->append->sb->append->sb->sb->length->setLength->sb->append->addText
NashornTextifier#isNashornBootstrap(Handle)::: nashorn textifier is nashorn bootstrap:::return->bsm->getName->equals->BOOTSTRAP_CLASS_NAME->bsm->getOwner->equals
NashornTextifier#isNashornMathBootstrap(Handle)::: nashorn textifier is nashorn math bootstrap:::return->bsm->getName->equals->BOOTSTRAP_CLASS_NAME->bsm->getOwner->equals
NashornTextifier#noFallThru(int)::: nashorn textifier no fall thru:::switch->return->return
NashornTextifier#checkNoFallThru(int, String)::: nashorn textifier check no fall thru:::if->noFallThru->graph->setNoFallThru->if->graph->addEdge
NashornTextifier#visitJumpInsn(int, Label)::: nashorn textifier visit jump insn:::sb->new->StringBuilder->appendOpcode->append->to->appendLabel->sb->append->addText->checkNoFallThru
NashornTextifier#addText(Object)::: nashorn textifier add text:::text->add->if->graph->t->toString->addText
NashornTextifier#visitLabel(Label)::: nashorn textifier visit label:::sb->new->StringBuilder->sb->append->name->appendLabel->sb->append->sb->append->sb->append->sb->append->graph->addNode->if->graph->isNoFallThru->graph->addEdge->addText
NashornTextifier#visitLdcInsn(Object)::: nashorn textifier visit ldc insn:::sb->new->StringBuilder->appendOpcode->append->if->appendStr->else->if->sb->getDescriptor->append->append->else->sb->append->sb->append->addText
NashornTextifier#visitIincInsn(int, int)::: nashorn textifier visit iinc insn:::sb->new->StringBuilder->appendOpcode->append->sb->append->append->append->append->addText
NashornTextifier#visitTableSwitchInsn(int, int, Label, Label...)::: nashorn textifier visit table switch insn:::sb->new->StringBuilder->appendOpcode->append->for->i->sb->append->append->appendLabel->sb->append->addText
NashornTextifier#visitLookupSwitchInsn(Label, int[], Label[])::: nashorn textifier visit lookup switch insn:::sb->new->StringBuilder->appendOpcode->append->for->i->sb->append->append->to->appendLabel->graph->addEdge->sb->append->sb->toString->addText
NashornTextifier#visitMultiANewArrayInsn(String, int)::: nashorn textifier visit multi new array insn:::sb->new->StringBuilder->appendOpcode->append->appendDescriptor->sb->append->append->append->addText
NashornTextifier#visitTryCatchBlock(Label, Label, Label, String)::: nashorn textifier visit try catch block:::sb->new->StringBuilder->sb->append->append->from->appendLabel->sb->append->appendLabel->sb->append->to->appendLabel->sb->append->appendDescriptor->sb->append->addText->graph->setIsCatch->graph->addTryCatch
NashornTextifier#visitLocalVariable(String, String, String, Label, Label, int)::: nashorn textifier visit local variable:::sb->new->StringBuilder->if->text->add->graph->addNode->sb->append->append->append->append->len->sb->length->for->i->label->appendLabel->for->i->label->length->appendLabel->for->i->label->length->sb->append->append->appendDescriptor->sb->append->if->sb->append->appendDescriptor->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->acceptType->sb->append->append->sv->getDeclaration->append->append->sb->toString->addText
NashornTextifier#visitLineNumber(int, Label)::: nashorn textifier visit line number:::sb->new->StringBuilder->sb->append->sb->append->sb->append->sb->toString->addText
NashornTextifier#visitMaxs(int, int)::: nashorn textifier visit maxs:::sb->new->StringBuilder->sb->append->sb->append->append->append->sb->append->append->append->sb->toString->addText
NashornTextifier#printToDir(Graph)::: nashorn textifier print to dir:::if->dir->new->File->if->dir->exists->dir->mkdirs->throw->dir->toString->new->RuntimeException->file->uniqueId->do->fileName->g->getName->new->File->while->file->exists->try->pw->new->FileOutputStream->new->PrintWriter->pw->println->catch->throw->new->RuntimeException->finally
NashornTextifier#visitMethodEnd()::: nashorn textifier visit method end:::if->graph->getName->equals->if->printToDir
NashornTextifier#createNashornTextifier():::Creates a new TraceVisitor instance.:::return->new->NashornTextifier
NashornTextifier#appendDescriptor(StringBuilder, int, String)::: nashorn textifier append descriptor:::if->if->sb->append->append->append->else->appendShortDescriptor
NashornTextifier#appendLabel(StringBuilder, Label)::: nashorn textifier append label:::if->new->HashMap<>->name->labelNames->get->if->labelNames->size->labelNames->put->sb->append->return
NashornTextifier#appendHandle(StringBuilder, Handle)::: nashorn textifier append handle:::switch->h->getTag->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->break->sb->append->sb->h->getName->append->sb->append
NashornTextifier#appendAccess(StringBuilder, int)::: nashorn textifier append access:::if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append
NashornTextifier#appendFrameTypes(StringBuilder, int, Object[])::: nashorn textifier append frame types:::for->i
NashornTextifier#appendShortDescriptor(StringBuilder, String)::: nashorn textifier append short descriptor:::if->desc->charAt->for->i->desc->length->else->lastSlash->desc->lastIndexOf->lastBracket->desc->lastIndexOf->if->sb->append->sb->desc->substring->append
NashornTextifier#appendStr(StringBuilder, String)::: nashorn textifier append str:::sb->append->for->i->s->length->sb->append
NashornTextifier.Graph#addEdge(String, String)::: graph add edge:::edgeSet->edges->get->if->new->LinkedHashSet<>->edges->put->edgeSet->add->hasPreds->add
NashornTextifier.Graph#addTryCatch(String, String)::: graph add try catch:::tryNodes->exceptionMap->get->if->new->HashSet<>->exceptionMap->put->if->tryNodes->contains->addEdge->tryNodes->add
NashornTextifier.Graph#addNode(String)::: graph add node:::nodes->add
NashornTextifier.Graph#setNoFallThru(String)::: graph set no fall thru:::noFallThru->add
NashornTextifier.Graph#isNoFallThru(String)::: graph is no fall thru:::return->noFallThru->contains
NashornTextifier.Graph#setIsCatch(String, String)::: graph set is catch:::catches->put
NashornTextifier.Graph#getName()::: graph get name:::return
NashornTextifier.Graph#addText(String, String)::: graph add text:::sb->contents->get->if->new->StringBuilder->for->i->text->length->contents->put
NashornTextifier.Graph#dottyFriendly(String)::: graph dotty friendly:::return->name->replace
NashornTextifier.Graph#toString()::: graph to string:::sb->new->StringBuilder->sb->append->dottyFriendly->append->append->sb->append->sb->append->sb->append->sb->append->foreach->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->c->contents->get->toString->if->c->startsWith->c->LEFT_ALIGN->length->substring->ex->catches->get->if->sb->append->append->append->sb->append->sb->append->foreach->edges->keySet->foreach->edges->get->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->if->catches->get->sb->append->sb->append->sb->append->sb->append->foreach->sb->append->sb->append->sb->append->if->catches->get->sb->append->else->if->equals->sb->append->else->if->hasPreds->contains->sb->append->sb->append->sb->append->return->sb->toString
NashornTextifier.NashornLabel#getLabel()::: nashorn label get label:::return
NashornTextifier.NashornLabel#getOffset()::: nashorn label get offset:::return
NashornTextifier.NashornLabel#toString()::: nashorn label to string:::return
NashornTextifier#visitAnnotationDefault()::: nashorn textifier visit annotation default:::throw->new->AssertionError
NashornTextifier#visitClassAnnotation(String, boolean)::: nashorn textifier visit class annotation:::return
NashornTextifier#visitClassAttribute(Attribute)::: nashorn textifier visit class attribute:::throw->new->AssertionError
NashornTextifier#visitFieldAnnotation(String, boolean)::: nashorn textifier visit field annotation:::throw->new->AssertionError
NashornTextifier#visitFieldAttribute(Attribute)::: nashorn textifier visit field attribute:::throw->new->AssertionError
NashornTextifier#visitMethodAnnotation(String, boolean)::: nashorn textifier visit method annotation:::return
NashornTextifier#visitMethodAttribute(Attribute)::: nashorn textifier visit method attribute:::throw->new->AssertionError
NashornTextifier#visitParameterAnnotation(int, String, boolean)::: nashorn textifier visit parameter annotation:::throw->new->AssertionError
NashornTextifier#visit(String, Object)::: nashorn textifier visit:::throw->new->AssertionError
NashornTextifier#visitAnnotation(String, String)::: nashorn textifier visit annotation:::throw->new->AssertionError
NashornTextifier#visitAnnotationEnd()::: nashorn textifier visit annotation end:::
NashornTextifier#visitArray(String)::: nashorn textifier visit array:::throw->new->AssertionError
NashornTextifier#visitEnum(String, String, String)::: nashorn textifier visit enum:::throw->new->AssertionError
NashornTextifier#visitInnerClass(String, String, String, int)::: nashorn textifier visit inner class:::throw->new->AssertionError
PrintVisitor#visit(Node)::: print visitor visit:::root->accept
PrintVisitor#toString()::: print visitor to string:::return->sb->append->toString
PrintVisitor#indent():::Insert spaces before a statement.:::for->i
PrintVisitor#enterDefault(Node)::: print visitor enter default:::node->toString->return
PrintVisitor#enterContinueNode(ContinueNode)::: print visitor enter continue node:::node->toString->printLocalVariableConversion->return
PrintVisitor#enterBreakNode(BreakNode)::: print visitor enter break node:::node->toString->printLocalVariableConversion->return
PrintVisitor#enterThrowNode(ThrowNode)::: print visitor enter throw node:::node->toString->printLocalVariableConversion->return
PrintVisitor#enterBlock(Block)::: print visitor enter block:::sb->append->sb->append->statements->block->getStatements->foreach->if->lineNumber->statement->getLineNumber->sb->append->if->indent->sb->append->append->append->append->indent->statement->accept->lastIndex->sb->length->lastChar->sb->charAt->while->Character->isWhitespace->sb->charAt->if->sb->append->if->statement->hasGoto->sb->append->if->statement->isTerminal->sb->append->sb->append->indent->sb->append->printLocalVariableConversion->return
PrintVisitor#enterBlockStatement(BlockStatement)::: print visitor enter block statement:::statement->getBlock->accept->return
PrintVisitor#enterBinaryNode(BinaryNode)::: print visitor enter binary node:::binaryNode->lhs->accept->sb->append->sb->binaryNode->tokenType->append->sb->append->binaryNode->rhs->accept->return
PrintVisitor#enterJoinPredecessorExpression(JoinPredecessorExpression)::: print visitor enter join predecessor expression:::expr->getExpression->accept->printLocalVariableConversion->return
PrintVisitor#enterIdentNode(IdentNode)::: print visitor enter ident node:::identNode->toString->printLocalVariableConversion->return
PrintVisitor#printLocalVariableConversion(JoinPredecessor)::: print visitor print local variable conversion:::LocalVariableConversion->joinPredecessor->getLocalVariableConversion->toString
PrintVisitor#enterUnaryNode(UnaryNode)::: print visitor enter unary node:::unaryNode->new->Runnable->toString->return
PrintVisitor#enterExpressionStatement(ExpressionStatement)::: print visitor enter expression statement:::expressionStatement->getExpression->accept->return
PrintVisitor#enterForNode(ForNode)::: print visitor enter for node:::forNode->toString->forNode->getBody->accept->return
PrintVisitor#enterFunctionNode(FunctionNode)::: print visitor enter function node:::functionNode->toString->functionNode->getBody->enterBlock->return
PrintVisitor#enterIfNode(IfNode)::: print visitor enter if node:::ifNode->toString->ifNode->getPass->accept->fail->ifNode->getFail->if->sb->append->fail->accept->if->ifNode->getLocalVariableConversion->sb->append->printLocalVariableConversion->sb->append->return
PrintVisitor#enterLabelNode(LabelNode)::: print visitor enter label node:::indent->labeledNode->toString->labeledNode->getBody->accept->printLocalVariableConversion->return
PrintVisitor#enterSplitNode(SplitNode)::: print visitor enter split node:::splitNode->toString->sb->append->indent->return
PrintVisitor#leaveSplitNode(SplitNode)::: print visitor leave split node:::sb->append->sb->append->indent->return
PrintVisitor#enterSwitchNode(SwitchNode)::: print visitor enter switch node:::switchNode->toString->sb->append->cases->switchNode->getCases->foreach->sb->append->indent->caseNode->toString->printLocalVariableConversion->caseNode->getBody->accept->sb->append->if->switchNode->getLocalVariableConversion->sb->append->indent->sb->append->printLocalVariableConversion->sb->append->sb->append->indent->sb->append->return
PrintVisitor#enterTryNode(TryNode)::: print visitor enter try node:::tryNode->toString->printLocalVariableConversion->tryNode->getBody->accept->catchBlocks->tryNode->getCatchBlocks->foreach->catchNode->catchBlock->getStatements->get->catchNode->toString->catchNode->getBody->accept->finallyBody->tryNode->getFinallyBody->if->sb->append->finallyBody->accept->foreach->tryNode->getInlinedFinallies->inlinedFinally->accept->return
PrintVisitor#enterVarNode(VarNode)::: print visitor enter var node:::sb->varNode->isConst->varNode->isLet->append->varNode->getName->toString->varNode->getName->printLocalVariableConversion->init->varNode->getInit->if->sb->append->init->accept->return
PrintVisitor#enterWhileNode(WhileNode)::: print visitor enter while node:::printLocalVariableConversion->if->whileNode->isDoWhile->sb->append->whileNode->getBody->accept->sb->append->whileNode->toString->else->whileNode->toString->whileNode->getBody->accept->return
PrintVisitor#enterWithNode(WithNode)::: print visitor enter with node:::withNode->toString->withNode->getBody->accept->return

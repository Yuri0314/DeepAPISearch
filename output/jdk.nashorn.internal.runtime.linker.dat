Bootstrap#getExposedLinkers():::Returns a list of exposed nashorn dynalink linkers.:::nbl->new->BeansLinker->new->NashornBeansLinker->linker->new->JSObjectLinker->return->Collections->singletonList
Bootstrap#createDynamicLinker(ClassLoader, int):::Creates a Nashorn dynamic linker with the given app class loader.:::factory->new->DynamicLinkerFactory->factory->setPrioritizedLinkers->factory->setFallbackLinkers->factory->setSyncOnRelink->factory->desc->request->getCallSiteDescriptor->return->OptimisticReturnFilters->filterOptimisticReturnValue->desc->getMethodType->asType->setPrelinkTransformer->factory->Bootstrap->unboxReturnType->setAutoConversionStrategy->factory->NashornBeansLinker->createHiddenObjectFilter->setInternalObjectsFilter->factory->setUnstableRelinkThreshold->factory->setClassLoader->return->factory->createLinker
Bootstrap#getBeanLinkerForClass(Class):::Returns a dynamic linker for the specific Java class using beans semantics.:::return->beansLinker->getLinkerForClass
Bootstrap#isCallable(Object):::Returns if the given object is a "callable":::if->return->return->isJSObjectFunction->BeansLinker->isDynamicMethod->isFunctionalInterfaceObject
Bootstrap#isStrictCallable(Object):::Returns true if the given object is a strict callable:::if->return->isStrict->else->if->isJSObjectFunction->return->isStrictFunction->else->if->return->getCallable->isStrictCallable->else->if->BeansLinker->isDynamicMethod->isFunctionalInterfaceObject->return->throw->notFunction
Bootstrap#isDynamicMethod(Object):::Returns if the given object is a dynalink Dynamic method:::return->BeansLinker->getCallable->isDynamicMethod
Bootstrap#isFunctionalInterfaceObject(Object):::Returns if the given object is an instance of an interface annotated with java.lang.FunctionalInterface:::return->JSType->isPrimitive->NashornBeansLinker->obj->getClass->getFunctionalInterfaceMethodName
Bootstrap#bootstrap(Lookup, String, MethodType, int):::Create a call site and link it for Nashorn:::return->Context->lookup->lookupClass->getDynamicLinker->LinkerCallSite->newLinkerCallSite->link
Bootstrap#createDynamicInvoker(String, int, Class, Class...):::Returns a dynamic invoker for a specified dynamic operation using the public lookup:::return->MethodHandles->publicLookup->MethodType->methodType->bootstrap->dynamicInvoker
Bootstrap#createDynamicCallInvoker(Class, Class...):::Returns a dynamic invoker for the NashornCallSiteDescriptor#CALL operation using the public lookup.:::return->createDynamicInvoker
Bootstrap#createDynamicInvoker(String, int, MethodType):::Returns a dynamic invoker for a specified dynamic operation using the public lookup:::return->MethodHandles->publicLookup->bootstrap->dynamicInvoker
Bootstrap#bindCallable(Object, Object, Object[]):::Binds any object Nashorn can use as a [[Callable]] to a receiver and optionally arguments.:::if->return->createBound->else->if->return->bind->else->if->isCallable->return->new->BoundCallable->throw->notFunction
Bootstrap#createSuperAdapter(Object):::Creates a super-adapter for an adapter, that is, an adapter to the adapter that allows invocation of superclass methods on it.:::return->new->JavaSuperAdapter
Bootstrap#checkReflectionAccess(Class, boolean):::If the given class is a reflection-specific class (anything in java.lang.reflect and java.lang.invoke package, as well a Class and any subclass of ClassLoader) and there is a security manager in the system, then it checks the nashorn.JavaReflection RuntimePermission.:::ReflectionCheckLinker->checkReflectionAccess
Bootstrap#getLinkerServices():::Returns the Nashorn's internally used dynamic linker's services object:::return->Context->getDynamicLinker->getLinkerServices
Bootstrap#asTypeSafeReturn(GuardedInvocation, LinkerServices, CallSiteDescriptor):::Takes a guarded invocation, and ensures its method and guard conform to the type of the call descriptor, using all type conversions allowed by the linker's services:::return->inv->desc->getMethodType->asTypeSafeReturn
ClassAndLoader#getDefiningClassAndLoader(Class[]):::Given a list of types that define the superclass/interfaces for an adapter class, returns a single type from the list that will be used to attach the adapter to its ClassValue:::if->return->new->ClassAndLoader->return->AccessController->new->PrivilegedAction<ClassAndLoader>->doPrivileged
InvokeByName#getName():::Returns the name of the function retrieved through this invoker.:::return
InvokeByName#getGetter():::Returns the property getter that can be invoked on an object to retrieve the function object that will be subsequently invoked by the invoker returned by #getInvoker().:::return
InvokeByName#getInvoker():::Returns the function invoker that can be used to invoke a function object previously retrieved by invoking the getter retrieved with #getGetter() on the target object.:::return
JavaAdapterClassLoader#generateClass(ClassLoader, ProtectionDomain):::Loads the generated adapter class into the JVM.:::return->AccessController->new->PrivilegedAction<StaticClass>->doPrivileged
JavaAdapterFactory#getAdapterClassFor(Class[], ScriptObject, MethodHandles.Lookup):::Returns an adapter class for the specified original types:::return->getProtectionDomain->getAdapterClassFor
JavaAdapterFactory#getConstructor(Class, Class, MethodHandles.Lookup):::Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of ScriptObject, ScriptFunction, or Object, and returns an instance of the adapter for the target type:::adapterClass->new->Class<?>Arr->getAdapterClassFor->return->MH->Bootstrap->getLinkerServices->MethodType->methodType->new->CallSiteDescriptor->new->SimpleLinkRequest->getGuardedInvocation->getInvocation->bindTo
JavaAdapterFactory#isAutoConvertibleFromFunction(Class):::Returns whether an instance of the specified class/interface can be generated from a ScriptFunction:::return->new->Class<?>Arr->getAdapterInfo->isAutoConvertibleFromFunction
JavaAdapterServices#getCallThis(ScriptFunction, Object):::Given a script function used as a delegate for a SAM adapter, figure out the right object to use as its "this" when called.:::return->delegate->isStrict
JavaAdapterServices#notAnObject(Object):::Throws a "not.an.object" type error:::throw->ScriptRuntime->safeToString->typeError
JavaAdapterServices#checkFunction(Object, String):::Checks if the passed object, which is supposed to be a callee retrieved through applying the GET_METHOD_PROPERTY operation on the delegate, is a ScriptFunction, or null or undefined:::if->return->else->if->JSType->nullOrUndefined->return->throw->ScriptRuntime->safeToString->typeError
JavaAdapterServices#getClassOverrides():::Returns a thread-local JS object used to define methods for the adapter class being initialized on the current thread:::overrides->classOverrides->get->return
JavaAdapterServices#invokeNoPermissions(MethodHandle, Object):::Takes a method handle and an argument to it, and invokes the method handle passing it the argument:::NO_PERMISSIONS_INVOKER->invokeExact
JavaAdapterServices#setGlobal(ScriptObject):::Set the current global scope to that of the adapter global:::currentGlobal->Context->getGlobal->if->Context->setGlobal->return->Context->setGlobal->return
JavaAdapterServices#getNonNullGlobal():::Get the current non-null global scope:::return->Objects->Context->getGlobal->requireNonNull
JavaAdapterServices#hasOwnToString(ScriptObject):::Returns true if the object has its own toString function:::return->sobj->getMap->findProperty
JavaAdapterServices#unwrapMirror(Object, boolean):::Returns the ScriptObject or Global field value from a ScriptObjectMirror using reflection.:::try->field->return->field->get->catch->throw->new->RuntimeException->finally
JavaAdapterServices#bootstrap(Lookup, String, MethodType, int):::Delegate to Bootstrap#bootstrap(Lookup, String, MethodType, int).:::return->Bootstrap->bootstrap
JavaAdapterServices#exportReturnValue(Object):::Invoked when returning Object from an adapted method to filter out internal Nashorn objects that must not be seen by the callers:::return->NashornBeansLinker->exportArgument
JavaAdapterServices#toCharPrimitive(Object):::Invoked to convert a return value of a delegate function to primitive char:::return->JavaArgumentConverters->toCharPrimitive
JavaAdapterServices#wrapThrowable(Throwable):::Returns a new RuntimeException wrapping the passed throwable:::return->new->RuntimeException
JavaAdapterServices#unsupported():::Creates and returns a new UnsupportedOperationException:::return->new->UnsupportedOperationException
JavaAdapterServices#createArrayBootstrap(MethodHandles.Lookup, String, MethodType):::A bootstrap method used to collect invocation arguments into an Object array:::return->MethodHandles->identity->type->parameterCount->asCollector->asType->new->ConstantCallSite
LinkerCallSite#newLinkerCallSite(MethodHandles.Lookup, String, MethodType, int):::Construct a new linker call site.:::desc->NashornCallSiteDescriptor->get->if->desc->isProfile->return->ProfilingLinkerCallSite->newProfilingLinkerCallSite->if->desc->isTrace->return->new->TracingLinkerCallSite->return->new->LinkerCallSite
LinkerCallSite#getNashornDescriptor():::Get the descriptor for this callsite:::return->getDescriptor
LinkerCallSite#increaseMissCount(String, Object):::Instrumentation - increase the miss count when a callsite misses:::missCount->increment->if->r->nextInt->i->missCounts->get->if->missCounts->new->AtomicInteger->put->else->i->incrementAndGet->return
LinkerCallSite#getCount():::Get the callsite count:::return->count->longValue
LinkerCallSite#getMissCount():::Get the callsite miss count:::return->missCount->longValue
LinkerCallSite#getMissSamplingPercentage():::Get given miss sampling percentage for sampler:::return
LinkerCallSite#getMissCounts(PrintWriter):::Dump the miss counts collected so far to a given output stream:::entries->missCounts->entrySet->new->ArrayList<>->Collections->new->Comparator<Map.Entry<String,AtomicInteger>>->sort->foreach->out->entry->getKey->entry->getValue->get->println
NameCodec#encode(String):::Encodes ("mangles") an unencoded symbolic name.:::bn->mangle->return
NameCodec#decode(String):::Decodes ("demangles") an encoded symbolic name.:::sn->if->sn->isEmpty->looksMangled->demangle->return
NashornBeansLinker#getGuardedInvocation(GuardingDynamicLinker, LinkRequest, LinkerServices):::Delegates to the specified linker but injects its linker services wrapper so that it will apply all special conversions that this class does.:::return->delegateLinker->new->NashornBeansLinkerServices->getGuardedInvocation
NashornCallSiteDescriptor#appendFlags(int, StringBuilder):::Function used by NashornTextifier to represent call site flags in human readable form:::pp->if->sb->append->append->if->if->sb->append->else->sb->append->if->sb->append->else->if->sb->append->if->sb->append
NashornCallSiteDescriptor#getOperationName(int):::Given call site flags, returns the operation name encoded in them.:::switch->return->return->return->return->return->return->return->return->return->return->throw->new->AssertionError
NashornCallSiteDescriptor#get(MethodHandles.Lookup, String, MethodType, int):::Retrieves a Nashorn call site descriptor with the specified values:::opIndex->baseOp->decodedName->NameCodec->decode->op->decodedName->isEmpty->getNamedOperation->return->get
NashornCallSiteDescriptor#getOperand(CallSiteDescriptor):::Returns the named operand in the passed descriptor's operation:::operation->desc->getOperation->return->getName->toString
NashornCallSiteDescriptor#isMethodFirstOperation(CallSiteDescriptor):::Returns true if the operation of the call descriptor is operating on the method namespace first.:::return->findFirstStandardNamespace
NashornCallSiteDescriptor#hasStandardNamespace(CallSiteDescriptor):::Returns true if there's a namespace operation in the call descriptor and it is operating on at least one StandardNamespace:::return->findFirstStandardNamespace
NashornCallSiteDescriptor#getBaseOperation(CallSiteDescriptor):::Returns the base operation in this call site descriptor after unwrapping it from both a named operation and a namespace operation.:::return->NamespaceOperation->NamedOperation->desc->getOperation->getBaseOperation->getBaseOperation
NashornCallSiteDescriptor#getStandardOperation(CallSiteDescriptor):::Returns the standard operation that is the base operation in this call site descriptor.:::return->getBaseOperation
NashornCallSiteDescriptor#contains(CallSiteDescriptor, StandardOperation, StandardNamespace):::Returns true if the passed call site descriptor contains the specified standard operation on the specified standard namespace.:::return->NamespaceOperation->NamedOperation->desc->getOperation->getBaseOperation->contains
NashornCallSiteDescriptor#getFunctionErrorMessage(CallSiteDescriptor, Object):::Returns the error message to be used when CALL or NEW is used on a non-function.:::return->getFunctionErrorMessage->ScriptRuntime->safeToString
NashornCallSiteDescriptor#getFlags(CallSiteDescriptor):::Returns the Nashorn-specific flags for this call site descriptor.:::return
NashornCallSiteDescriptor#isScope(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_SCOPE flag set.:::return->isFlag
NashornCallSiteDescriptor#isFastScope(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_FAST_SCOPE flag set.:::return->isFlag
NashornCallSiteDescriptor#isStrict(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_STRICT flag set.:::return->isFlag
NashornCallSiteDescriptor#isApplyToCall(CallSiteDescriptor):::Returns true if this is an apply call that we try to call as a "call":::return->isFlag
NashornCallSiteDescriptor#isOptimistic(CallSiteDescriptor):::Is this an optimistic call site:::return->isFlag
NashornCallSiteDescriptor#isDeclaration(CallSiteDescriptor):::Does this callsite contain a declaration for its target?:::return->isFlag
NashornCallSiteDescriptor#isStrictFlag(int):::Returns true if flags has the #CALLSITE_STRICT bit set.:::return
NashornCallSiteDescriptor#isScopeFlag(int):::Returns true if flags has the #CALLSITE_SCOPE bit set.:::return
NashornCallSiteDescriptor#isDeclaration(int):::Returns true if flags has the #CALLSITE_DECLARE bit set.:::return
NashornCallSiteDescriptor#getProgramPoint(CallSiteDescriptor):::Get a program point from a descriptor (must be optimistic):::return->getFlags
NashornGuards#explicitInstanceOfCheck(CallSiteDescriptor, LinkRequest):::Given a callsite descriptor and a link request, determine whether we should use an instanceof check explicitly for the guard if needed, or if we should link it with a try/catch ClassCastException combinator as its relink criteria - i.e:::return
NashornGuards#getScriptObjectGuard():::Returns a guard that does an instanceof ScriptObject check on the receiver:::return
NashornGuards#getNotJSObjectGuard():::Get the guard that checks if an item is not a JSObject:::return
NashornGuards#getScriptObjectGuard(boolean):::Returns a guard that does an instanceof ScriptObject check on the receiver:::return
NashornGuards#getMapGuard(PropertyMap, boolean):::Get the guard that checks if a PropertyMap is equal to a known map, using reference comparison:::return->MH->insertArguments
NashornGuards#needsGuard(Property, CallSiteDescriptor):::Determine whether the given callsite needs a guard.:::return->property->isConfigurable->property->isBound->property->hasDualFields->NashornCallSiteDescriptor->isFastScope->property->canChangeType
NashornGuards#getGuard(ScriptObject, Property, CallSiteDescriptor, boolean):::Get the guard for a property access:::if->needsGuard->return->if->NashornCallSiteDescriptor->isScope->sobj->isScope->if->property->isBound->property->canChangeType->return->getIdentityGuard->if->property->isConfigurable->return->getIdentityGuard->sobj->getMap->getMapGuard->combineGuards->return->sobj->getMap->getMapGuard
NashornGuards#getIdentityGuard(ScriptObject):::Get a guard that checks referential identity of the current object.:::return->MH->new->WeakReference<>->insertArguments
NashornGuards#getStringGuard():::Get a guard that checks if in item is a JS string.:::return->methodHandle
NashornGuards#getNumberGuard():::Get a guard that checks if in item is a JS number.:::return->methodHandle
NashornGuards#combineGuards(MethodHandle, MethodHandle):::Combine two method handles of type (Object)boolean using logical AND.:::if->return->else->if->return->else->return->MH->MH->MH->constant->dropArguments->guardWithTest
NashornLinker#canLinkType(Class):::Returns true if ScriptObject is assignable from type, or it is Undefined.:::return->canLinkTypeStatic
NashornLinker#isAbstractClass(Class):::Utility method used by few other places in the code:::return->Modifier->clazz->getModifiers->isAbstract->clazz->isArray
NashornPrimitiveLinker#convertToType(Class, Class, Supplier):::This implementation of type converter factory will pretty much allow implicit conversions of anything to anything else that's allowed among JavaScript primitive types (string to number, boolean to string, etc.):::mh->JavaArgumentConverters->getConverter->if->if->return->return->return->canLinkTypeStatic->new->GuardedInvocation->mh->type->changeParameterType->asType
NashornPrimitiveLinker#compareConversion(Class, Class, Class):::Implements the somewhat involved prioritization of JavaScript primitive types conversions:::wrapper1->getWrapperTypeOrSelf->if->return->wrapper2->getWrapperTypeOrSelf->if->return->if->isAssignableFrom->if->isAssignableFrom->if->isAssignableFrom->return->else->if->isAssignableFrom->return->if->return->else->if->return->if->isAssignableFrom->primitiveType1->getPrimitiveTypeOrSelf->primitiveType2->getPrimitiveTypeOrSelf->if->TypeUtilities->isMethodInvocationConvertible->return->else->if->TypeUtilities->isMethodInvocationConvertible->return->if->return->if->return->return
PrimitiveLookup#lookupPrimitive(LinkRequest, Class, ScriptObject, MethodHandle, MethodHandle):::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.:::return->Guards->getInstanceOfGuard->lookupPrimitive
PrimitiveLookup#lookupPrimitive(LinkRequest, MethodHandle, ScriptObject, MethodHandle, MethodHandle):::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.:::desc->request->getCallSiteDescriptor->name->NashornCallSiteDescriptor->getOperand->find->wrappedReceiver->findProperty->switch->NashornCallSiteDescriptor->getStandardOperation->if->if->return->sp->find->getProperty->getBuiltinSwitchPoint->if->sp->hasBeenInvalidated->return->GlobalConstants->find->getObjectValue->staticConstantGetter->new->GuardedInvocation->if->find->isInheritedOrdinaryProperty->proto->wrappedReceiver->getProto->link->proto->lookup->if->invocation->link->getInvocation->adaptedInvocation->MH->invocation->type->changeParameterType->asType->method->MH->filterArguments->protoGuard->MH->link->getGuard->filterArguments->return->NashornGuards->combineGuards->new->GuardedInvocation->break->return->NashornCallSiteDescriptor->isStrict->getPrimitiveSetter->break->link->wrappedReceiver->lookup->if->method->link->getInvocation->receiverType->method->type->parameterType->if->wrapType->wrapFilter->type->MH->MH->wrapType->changeReturnType->asType->filterArguments->return->link->getSwitchPoints->new->GuardedInvocation->return

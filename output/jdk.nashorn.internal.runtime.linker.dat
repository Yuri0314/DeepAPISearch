AdaptationException#getAdaptationResult()::: adaptation exception get adaptation result:::return
AdaptationResult#getOutcome()::: adaptation result get outcome:::return
AdaptationResult#typeError()::: adaptation result type error:::return->ECMAErrors->typeError
Bootstrap#getExposedLinkers():::Returns a list of exposed nashorn dynalink linkers.:::nbl->new->BeansLinker->new->NashornBeansLinker->linker->new->JSObjectLinker->return->Collections->singletonList
Bootstrap#createDynamicLinker(ClassLoader, int):::Creates a Nashorn dynamic linker with the given app class loader.:::factory->new->DynamicLinkerFactory->factory->setPrioritizedLinkers->factory->setFallbackLinkers->factory->setSyncOnRelink->factory->desc->request->getCallSiteDescriptor->return->OptimisticReturnFilters->filterOptimisticReturnValue->desc->getMethodType->asType->setPrelinkTransformer->factory->Bootstrap->unboxReturnType->setAutoConversionStrategy->factory->NashornBeansLinker->createHiddenObjectFilter->setInternalObjectsFilter->factory->setUnstableRelinkThreshold->factory->setClassLoader->return->factory->createLinker
Bootstrap#getBeanLinkerForClass(Class):::Returns a dynamic linker for the specific Java class using beans semantics.:::return->beansLinker->getLinkerForClass
Bootstrap#isCallable(Object):::Returns if the given object is a "callable":::if->return->return->isJSObjectFunction->BeansLinker->isDynamicMethod->isFunctionalInterfaceObject
Bootstrap#isStrictCallable(Object):::Returns true if the given object is a strict callable:::if->return->isStrict->else->if->isJSObjectFunction->return->isStrictFunction->else->if->return->getCallable->isStrictCallable->else->if->BeansLinker->isDynamicMethod->isFunctionalInterfaceObject->return->throw->notFunction
Bootstrap#notFunction(Object)::: bootstrap not function:::return->ScriptRuntime->safeToString->typeError
Bootstrap#isJSObjectFunction(Object)::: bootstrap is object function:::return->isFunction
Bootstrap#isDynamicMethod(Object):::Returns if the given object is a dynalink Dynamic method:::return->BeansLinker->getCallable->isDynamicMethod
Bootstrap#isFunctionalInterfaceObject(Object):::Returns if the given object is an instance of an interface annotated with java.lang.FunctionalInterface:::return->JSType->isPrimitive->NashornBeansLinker->obj->getClass->getFunctionalInterfaceMethodName
Bootstrap#bootstrap(Lookup, String, MethodType, int):::Create a call site and link it for Nashorn:::return->Context->lookup->lookupClass->getDynamicLinker->LinkerCallSite->newLinkerCallSite->link
Bootstrap#createDynamicInvoker(String, int, Class, Class...):::Returns a dynamic invoker for a specified dynamic operation using the public lookup:::return->MethodHandles->publicLookup->MethodType->methodType->bootstrap->dynamicInvoker
Bootstrap#createDynamicCallInvoker(Class, Class...):::Returns a dynamic invoker for the NashornCallSiteDescriptor#CALL operation using the public lookup.:::return->createDynamicInvoker
Bootstrap#createDynamicInvoker(String, int, MethodType):::Returns a dynamic invoker for a specified dynamic operation using the public lookup:::return->MethodHandles->publicLookup->bootstrap->dynamicInvoker
Bootstrap#bindCallable(Object, Object, Object[]):::Binds any object Nashorn can use as a [[Callable]] to a receiver and optionally arguments.:::if->return->createBound->else->if->return->bind->else->if->isCallable->return->new->BoundCallable->throw->notFunction
Bootstrap#createSuperAdapter(Object):::Creates a super-adapter for an adapter, that is, an adapter to the adapter that allows invocation of superclass methods on it.:::return->new->JavaSuperAdapter
Bootstrap#checkReflectionAccess(Class, boolean):::If the given class is a reflection-specific class (anything in java.lang.reflect and java.lang.invoke package, as well a Class and any subclass of ClassLoader) and there is a security manager in the system, then it checks the nashorn.JavaReflection RuntimePermission.:::ReflectionCheckLinker->checkReflectionAccess
Bootstrap#getLinkerServices():::Returns the Nashorn's internally used dynamic linker's services object:::return->Context->getDynamicLinker->getLinkerServices
Bootstrap#asTypeSafeReturn(GuardedInvocation, LinkerServices, CallSiteDescriptor):::Takes a guarded invocation, and ensures its method and guard conform to the type of the call descriptor, using all type conversions allowed by the linker's services:::return->inv->desc->getMethodType->asTypeSafeReturn
Bootstrap#unboxReturnType(MethodHandle, MethodType):::Adapts the return type of the method handle with explicitCastArguments when it is an unboxing conversion:::targetType->target->type->oldReturnType->targetType->returnType->newReturnType->newType->returnType->if->TypeUtilities->isWrapperType->if->newReturnType->isPrimitive->return->MethodHandles->targetType->changeReturnType->explicitCastArguments->else->if->return->MethodHandles->filterReturnValue->return
Bootstrap#createMissingMemberHandler(LinkRequest, LinkerServices)::: bootstrap create missing member handler:::if->BrowserJSObjectLinker->linkRequest->getReceiver->getClass->canLinkTypeStatic->return->return->NashornBottomLinker->linkMissingBeanMember
BoundCallable#getCallable()::: bound callable get callable:::return
BoundCallable#getBoundThis()::: bound callable get bound this:::return
BoundCallable#getBoundArgs()::: bound callable get bound args:::return
BoundCallable#bind(Object[])::: bound callable bind:::if->isEmptyArray->return->return->new->BoundCallable
BoundCallable#concatenateBoundArgs(Object[])::: bound callable concatenate bound args:::if->return->extraBoundArgs->clone->origBoundArgsLen->extraBoundArgsLen->newBoundArgs->new->ObjectArr->System->arraycopy->System->arraycopy->return
BoundCallable#isEmptyArray(Object[])::: bound callable is empty array:::return
BoundCallable#toString()::: bound callable to string:::b->callable->toString->new->StringBuilder->append->append->if->b->append->Arrays->toString->append->return->b->toString
BoundCallableLinker#canLinkType(Class)::: bound callable linker can link type:::return
BoundCallableLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: bound callable linker get guarded invocation:::objBoundCallable->linkRequest->getReceiver->if->return->descriptor->linkRequest->getCallSiteDescriptor->operation->NamedOperation->descriptor->getOperation->getBaseOperation->isCall->if->else->if->else->return->boundCallable->callable->boundCallable->getCallable->boundThis->boundCallable->getBoundThis->args->linkRequest->getArguments->boundArgs->boundCallable->getBoundArgs->argsLen->boundArgsLen->newArgs->new->ObjectArr->firstArgIndex->if->else->System->arraycopy->System->arraycopy->type->descriptor->getMethodType->newMethodType->descriptor->getMethodType->callable->getClass->changeParameterType->if->newMethodType->boundThis->getClass->changeParameterType->for->i->newDescriptor->descriptor->changeMethodType->inv->linkerServices->linkRequest->replaceArguments->getGuardedInvocation->if->return->boundHandle->MethodHandles->inv->getInvocation->Arrays->copyOf->insertArguments->p0Type->type->parameterType->droppingHandle->if->MethodHandles->type->parameterType->dropArguments->else->MethodHandles->dropArguments->newGuard->Guards->getIdentityGuard->return->inv->newGuard->newGuard->type->changeParameterType->asType->replaceMethods
BrowserJSObjectLinker#canLinkType(Class)::: browser object linker can link type:::return->canLinkTypeStatic
BrowserJSObjectLinker#canLinkTypeStatic(Class)::: browser object linker can link type static:::return->jsObjectClass->isAssignableFrom
BrowserJSObjectLinker#checkJSObjectClass()::: browser object linker check object class:::
BrowserJSObjectLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: browser object linker get guarded invocation:::self->request->getReceiver->desc->request->getCallSiteDescriptor->checkJSObjectClass->inv->lookup->inv->linkerServices->inv->getInvocation->filterInternalObjects->inv->getGuard->replaceMethods->return->Bootstrap->asTypeSafeReturn
BrowserJSObjectLinker#lookup(CallSiteDescriptor, LinkRequest, LinkerServices)::: browser object linker lookup:::inv->try->nashornBeansLinker->getGuardedInvocation->catch->finally->name->NashornCallSiteDescriptor->getOperand->switch->NashornCallSiteDescriptor->getStandardOperation->return->findGetMethod->findGetIndexMethod->return->findSetMethod->findSetIndexMethod->return->findCallMethod->return
BrowserJSObjectLinker#findGetMethod(String, GuardedInvocation)::: browser object linker find get method:::if->return->getter->MH->insertArguments->return->new->GuardedInvocation
BrowserJSObjectLinker#findGetIndexMethod(GuardedInvocation)::: browser object linker find get index method:::getter->MH->inv->getInvocation->insertArguments->return->inv->inv->getGuard->replaceMethods
BrowserJSObjectLinker#findSetMethod(String, GuardedInvocation)::: browser object linker find set method:::if->return->getter->MH->insertArguments->return->new->GuardedInvocation
BrowserJSObjectLinker#findSetIndexMethod()::: browser object linker find set index method:::return->new->GuardedInvocation
BrowserJSObjectLinker#findCallMethod(CallSiteDescriptor)::: browser object linker find call method:::call->MH->insertArguments->return->MH->desc->getMethodType->parameterCount->asCollector->new->GuardedInvocation
BrowserJSObjectLinker#isJSObject(Object)::: browser object linker is object:::return->jsObjectClass->isInstance
BrowserJSObjectLinker#get(MethodHandle, Object, Object)::: browser object linker get:::if->return->JSOBJECT_GETSLOT->invokeExact->else->if->index->getIndex->if->return->JSOBJECT_GETSLOT->invokeExact->else->if->isString->name->key->toString->if->name->indexOf->return->fallback->invokeExact->return->JSOBJECT_GETMEMBER->invokeExact->return
BrowserJSObjectLinker#put(Object, Object, Object)::: browser object linker put:::if->JSOBJECT_SETSLOT->invokeExact->else->if->JSOBJECT_SETSLOT->getIndex->invokeExact->else->if->isString->JSOBJECT_SETMEMBER->key->toString->invokeExact
BrowserJSObjectLinker#getIndex(Number)::: browser object linker get index:::value->n->doubleValue->return->JSType->isRepresentableAsInt
BrowserJSObjectLinker#findOwnMH_S(String, Class, Class...)::: browser object linker find own h_ s:::return->MH->MethodHandles->lookup->MH->type->findStatic
BrowserJSObjectLinker.JSObjectHandles#findJSObjectMH_V(String, Class, Class...)::: object handles find object h_ v:::checkJSObjectClass->return->MH->MethodHandles->publicLookup->MH->type->findVirtual
BrowserJSObjectLinker#findBrowserJSObjectClass()::: browser object linker find browser object class:::extLoader->getClassLoader->if->ClassLoader->getSystemClassLoader->getParent->try->return->Class->forName->catch->return->finally
ClassAndLoader#createPermAccCtxt(String...)::: class and loader create perm acc ctxt:::perms->new->Permissions->foreach->perms->new->RuntimePermission->add->return->new->ProtectionDomainArr->new->ProtectionDomain->new->AccessControlContext
ClassAndLoader#getRepresentativeClass()::: class and loader get representative class:::return
ClassAndLoader#canSee(ClassAndLoader)::: class and loader can see:::try->otherClass->other->getRepresentativeClass->return->Class->otherClass->getName->getLoader->forName->catch->return->finally
ClassAndLoader#getLoader()::: class and loader get loader:::if->retrieveLoader->return->getRetrievedLoader
ClassAndLoader#getRetrievedLoader()::: class and loader get retrieved loader:::return
ClassAndLoader#retrieveLoader()::: class and loader retrieve loader:::representativeClass->getClassLoader
ClassAndLoader#equals(Object)::: class and loader equals:::return->getRetrievedLoader->getRetrievedLoader
ClassAndLoader#hashCode()::: class and loader hash code:::return->System->getRetrievedLoader->identityHashCode
ClassAndLoader#getDefiningClassAndLoader(Class[]):::Given a list of types that define the superclass/interfaces for an adapter class, returns a single type from the list that will be used to attach the adapter to its ClassValue:::if->return->new->ClassAndLoader->return->AccessController->new->PrivilegedAction<ClassAndLoader>->doPrivileged
ClassAndLoader#getDefiningClassAndLoaderPrivileged(Class[])::: class and loader get defining class and loader privileged:::maximumVisibilityLoaders->getMaximumVisibilityLoaders->it->maximumVisibilityLoaders->iterator->if->maximumVisibilityLoaders->size->return->it->next->b->new->StringBuilder->b->it->next->getRepresentativeClass->getCanonicalName->append->while->it->hasNext->b->append->it->next->getRepresentativeClass->getCanonicalName->append->throw->b->toString->typeError
ClassAndLoader#getMaximumVisibilityLoaders(Class[]):::Given an array of types, return a subset of their class loaders that are maximal according to the "can see other loaders' classes" relation, which is presumed to be a partial ordering.:::maximumVisibilityLoaders->new->LinkedList<>->foreach->getClassLoadersForTypes->it->maximumVisibilityLoaders->iterator->while->it->hasNext->existingMax->it->next->candidateSeesExisting->maxCandidate->canSee->exitingSeesCandidate->existingMax->canSee->if->if->it->remove->else->if->continue->maximumVisibilityLoaders->add->return
ClassAndLoader#getClassLoadersForTypes(Class[])::: class and loader get class loaders for types:::classesAndLoaders->new->LinkedHashMap<>->foreach->cl->new->ClassAndLoader->if->classesAndLoaders->containsKey->classesAndLoaders->put->return->classesAndLoaders->keySet
InvokeByName#getName():::Returns the name of the function retrieved through this invoker.:::return
InvokeByName#getGetter():::Returns the property getter that can be invoked on an object to retrieve the function object that will be subsequently invoked by the invoker returned by #getInvoker().:::return
InvokeByName#getInvoker():::Returns the function invoker that can be used to invoke a function object previously retrieved by invoking the getter retrieved with #getGetter() on the target object.:::return
JavaAdapterBytecodeGenerator#generateField(String, String)::: java adapter bytecode generator generate field:::cw->visitField->visitEnd
JavaAdapterBytecodeGenerator#createAdapterClassLoader()::: java adapter bytecode generator create adapter class loader:::return->cw->toByteArray->new->JavaAdapterClassLoader
JavaAdapterBytecodeGenerator#isAutoConvertibleFromFunction()::: java adapter bytecode generator is auto convertible from function:::return
JavaAdapterBytecodeGenerator#getGeneratedClassName(Class, List>)::: java adapter bytecode generator get generated class name:::namingType->interfaces->isEmpty->interfaces->get->pkg->namingType->getPackage->namingTypeName->Type->getInternalName->buf->new->StringBuilder->buf->append->namingTypeName->replace->append->it->interfaces->iterator->if->it->hasNext->it->next->while->it->hasNext->buf->append->it->next->getSimpleName->append->return->buf->toString->Math->buf->length->min->substring
JavaAdapterBytecodeGenerator#getInternalTypeNames(List>):::Given a list of class objects, return an array with their binary names:::interfaceCount->classes->size->interfaceNames->new->StringArr->for->i->return
JavaAdapterBytecodeGenerator#generateClassInit()::: java adapter bytecode generator generate class init:::mv->cw->visitMethod->new->InstructionAdapter->GET_NON_NULL_GLOBAL->invoke->mv->putstatic->GET_CLASS_OVERRIDES->invoke->if->mv->dup->mv->instanceOf->mv->dup->mv->putstatic->notFunction->new->Label->mv->ifeq->mv->dup->mv->checkcast->emitInitCallThis->mv->visitLabel->mv->putstatic->endInitMethod
JavaAdapterBytecodeGenerator#emitInitCallThis(InstructionAdapter):::Emit bytecode for initializing the "callThis" field.:::loadField->GET_CALL_THIS->invoke->if->mv->putstatic->else->mv->putfield
JavaAdapterBytecodeGenerator#generateConstructors()::: java adapter bytecode generator generate constructors:::gotCtor->canBeAutoConverted->foreach->superClass->getDeclaredConstructors->modifier->ctor->getModifiers->if->isCallerSensitive->generateConstructors->if->throw->superClass->getCanonicalName->new->AdaptationException->return
JavaAdapterBytecodeGenerator#generateConstructors(Constructor)::: java adapter bytecode generator generate constructors:::if->generateDelegatingConstructor->return->generateOverridingConstructor->if->return->generateOverridingConstructor->return->ctor->getParameterTypes
JavaAdapterBytecodeGenerator#generateDelegatingConstructor(Constructor)::: java adapter bytecode generator generate delegating constructor:::originalCtorType->Type->getType->argTypes->originalCtorType->getArgumentTypes->mv->cw->ctor->isVarArgs->Type->originalCtorType->getReturnType->getMethodDescriptor->visitMethod->new->InstructionAdapter->mv->visitCode->originalCtorType->getDescriptor->emitSuperConstructorCall->endInitMethod
JavaAdapterBytecodeGenerator#generateOverridingConstructor(Constructor, boolean):::Generates a constructor for the instance adapter class:::originalCtorType->Type->getType->originalArgTypes->originalCtorType->getArgumentTypes->argLen->newArgTypes->new->TypeArr->extraArgumentType->System->arraycopy->mv->cw->Type->originalCtorType->getReturnType->getMethodDescriptor->visitMethod->new->InstructionAdapter->mv->visitCode->extraArgOffset->originalCtorType->getDescriptor->emitSuperConstructorCall->mv->visitVarInsn->GET_NON_NULL_GLOBAL->invoke->mv->putfield->mv->visitVarInsn->mv->visitVarInsn->mv->putfield->if->mv->visitVarInsn->mv->iconst->mv->putfield->mv->visitVarInsn->mv->visitVarInsn->emitInitCallThis->endInitMethod->if->mv2->cw->Type->originalCtorType->getReturnType->getMethodDescriptor->visitMethod->new->InstructionAdapter->originalCtorType->getDescriptor->generateOverridingConstructorWithObjectParam
JavaAdapterBytecodeGenerator#generateOverridingConstructorWithObjectParam(InstructionAdapter, String)::: java adapter bytecode generator generate overriding constructor with object param:::mv->visitCode->extraArgOffset->emitSuperConstructorCall->mv->visitVarInsn->mv->instanceOf->notMirror->new->Label->mv->ifeq->mv->visitVarInsn->mv->visitVarInsn->mv->iconst->UNWRAP_MIRROR->invoke->mv->putfield->mv->visitVarInsn->mv->visitVarInsn->mv->iconst->UNWRAP_MIRROR->invoke->mv->putfield->done->new->Label->if->mv->visitVarInsn->mv->getfield->mv->instanceOf->mv->ifeq->mv->visitVarInsn->mv->iconst->mv->putfield->mv->visitVarInsn->mv->dup->mv->getfield->mv->checkcast->emitInitCallThis->mv->goTo->mv->visitLabel->mv->visitVarInsn->NOT_AN_OBJECT->invoke->mv->visitLabel->endInitMethod
JavaAdapterBytecodeGenerator#endInitMethod(InstructionAdapter)::: java adapter bytecode generator end init method:::mv->visitInsn->endMethod
JavaAdapterBytecodeGenerator#endMethod(InstructionAdapter)::: java adapter bytecode generator end method:::mv->visitMaxs->mv->visitEnd
JavaAdapterBytecodeGenerator.MethodInfo#equals(Object)::: method info equals:::return->equals
JavaAdapterBytecodeGenerator.MethodInfo#equals(MethodInfo)::: method info equals:::return->getName->other->getName->equals->type->equals
JavaAdapterBytecodeGenerator.MethodInfo#getName()::: method info get name:::return->method->getName
JavaAdapterBytecodeGenerator.MethodInfo#hashCode()::: method info hash code:::return->getName->hashCode->type->hashCode
JavaAdapterBytecodeGenerator#generateMethods()::: java adapter bytecode generator generate methods:::foreach->generateMethod
JavaAdapterBytecodeGenerator#generateMethod(MethodInfo):::Generates a method in the adapter class that adapts a method from the original class:::method->exceptions->method->getExceptionTypes->exceptionNames->getExceptionNames->type->methodDesc->type->toMethodDescriptorString->name->mi->getName->asmType->Type->getMethodType->asmArgTypes->asmType->getArgumentTypes->mv->cw->getAccessModifiers->visitMethod->new->InstructionAdapter->mv->visitCode->returnType->type->returnType->asmReturnType->Type->getType->nextLocalVar->foreach->t->getSize->globalRestoringRunnableVar->loadField->SET_GLOBAL->invoke->mv->visitVarInsn->tryBlockStart->new->Label->mv->visitLabel->callCallee->new->Label->defaultBehavior->new->Label->if->loadField->if->name->equals->notFunction->new->Label->mv->ifeq->loadField->loadField->mv->goTo->mv->visitLabel->else->mv->ifne->if->name->equals->loadField->HAS_OWN_TO_STRING->invoke->mv->ifeq->loadField->mv->ifnull->loadField->mv->dup->encodedName->NameCodec->encode->mv->visitInvokeDynamicInsn->mv->visitLdcInsn->CHECK_FUNCTION->invoke->hasFunction->new->Label->mv->dup->mv->ifnonnull->mv->pop2->mv->visitLabel->emitFinally->emitFinally->normalFinally->new->Label->if->Modifier->method->getModifiers->isAbstract->UNSUPPORTED->invoke->mv->athrow->else->method->getDeclaringClass->emitSuperCall->mv->goTo->mv->visitLabel->mv->swap->mv->visitLabel->varOffset->isVarArgCall->getParamListLengthInSlots->foreach->mv->load->convertParam->t->getSize->if->mv->getArrayCreatorMethodType->toMethodDescriptorString->visitInvokeDynamicInsn->mv->getCallMethodType->toMethodDescriptorString->visitInvokeDynamicInsn->convertReturnValue->mv->visitLabel->emitFinally->run->mv->areturn->throwableDeclared->isThrowableDeclared->throwableHandler->if->new->Label->mv->visitLabel->WRAP_THROWABLE->invoke->else->rethrowHandler->new->Label->mv->visitLabel->emitFinally->run->mv->athrow->if->mv->visitTryCatchBlock->else->mv->visitTryCatchBlock->mv->visitTryCatchBlock->foreach->mv->visitTryCatchBlock->mv->visitTryCatchBlock->endMethod
JavaAdapterBytecodeGenerator#getCallMethodType(boolean, MethodType)::: java adapter bytecode generator get call method type:::callParamTypes->if->new->Class<?>Arr->else->origParamTypes->type->parameterArray->new->Class<?>Arr->for->i->return->MethodType->type->returnType->getNashornReturnType->methodType
JavaAdapterBytecodeGenerator#getArrayCreatorMethodType(MethodType)::: java adapter bytecode generator get array creator method type:::callParamTypes->type->parameterArray->for->i->return->MethodType->methodType
JavaAdapterBytecodeGenerator#getNashornParamType(Class, boolean)::: java adapter bytecode generator get nashorn param type:::if->return->else->if->return->else->if->clazz->isPrimitive->return->return
JavaAdapterBytecodeGenerator#getNashornReturnType(Class)::: java adapter bytecode generator get nashorn return type:::if->return->else->if->return->else->if->return->return
JavaAdapterBytecodeGenerator#loadField(InstructionAdapter, String, String)::: java adapter bytecode generator load field:::if->mv->getstatic->else->mv->visitVarInsn->mv->getfield
JavaAdapterBytecodeGenerator#convertReturnValue(InstructionAdapter, Class)::: java adapter bytecode generator convert return value:::if->mv->pop->else->if->EXPORT_RETURN_VALUE->invoke->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->TO_CHAR_PRIMITIVE->invoke
JavaAdapterBytecodeGenerator#convertParam(InstructionAdapter, Type, boolean):::Emits instruction for converting a parameter on the top of the stack to a type that is understood by Nashorn.:::switch->t->getSort->CHAR_VALUE_OF->invoke->break->mv->visitInsn->if->DOUBLE_VALUE_OF->invoke->break->LONG_VALUE_OF->invoke->break->if->t->equals->UNWRAP->invoke->break
JavaAdapterBytecodeGenerator#getParamListLengthInSlots(Type[])::: java adapter bytecode generator get param list length in slots:::len->foreach->sort->t->getSort->if->return
JavaAdapterBytecodeGenerator#emitFinally(InstructionAdapter, int):::Emit code to restore the previous Nashorn Context when needed.:::mv->visitVarInsn->RUN->invoke
JavaAdapterBytecodeGenerator#isThrowableDeclared(Class[])::: java adapter bytecode generator is throwable declared:::foreach->if->return->return
JavaAdapterBytecodeGenerator#generateSuperMethods()::: java adapter bytecode generator generate super methods:::foreach->if->Modifier->getModifiers->isAbstract->generateSuperMethod
JavaAdapterBytecodeGenerator#generateSuperMethod(MethodInfo)::: java adapter bytecode generator generate super method:::method->methodDesc->toMethodDescriptorString->name->mi->getName->mv->cw->getAccessModifiers->method->getExceptionTypes->getExceptionNames->visitMethod->new->InstructionAdapter->mv->visitCode->method->getDeclaringClass->emitSuperCall->mv->Type->returnType->getType->areturn->endMethod
JavaAdapterBytecodeGenerator#findInvokespecialOwnerFor(Class)::: java adapter bytecode generator find invokespecial owner for:::if->cl->isAssignableFrom->return->foreach->if->cl->isAssignableFrom->return->throw->new->AssertionError
JavaAdapterBytecodeGenerator#emitSuperConstructorCall(InstructionAdapter, String)::: java adapter bytecode generator emit super constructor call:::return->emitSuperCall
JavaAdapterBytecodeGenerator#emitSuperCall(InstructionAdapter, Class, String, String)::: java adapter bytecode generator emit super call:::return->emitSuperCall
JavaAdapterBytecodeGenerator#emitSuperCall(InstructionAdapter, Class, String, String, boolean)::: java adapter bytecode generator emit super call:::mv->visitVarInsn->nextParam->methodType->Type->getMethodType->foreach->methodType->getArgumentTypes->mv->load->t->getSize->if->Modifier->owner->getModifiers->isInterface->superType->findInvokespecialOwnerFor->mv->Type->getInternalName->Modifier->superType->getModifiers->isInterface->visitMethodInsn->else->mv->invokespecial->return
JavaAdapterBytecodeGenerator#generateFinalizerMethods()::: java adapter bytecode generator generate finalizer methods:::generateFinalizerDelegate->generateFinalizerOverride
JavaAdapterBytecodeGenerator#generateFinalizerDelegate()::: java adapter bytecode generator generate finalizer delegate:::mv->cw->visitMethod->new->InstructionAdapter->mv->visitVarInsn->mv->Type->getType->checkcast->mv->invokespecial->mv->visitInsn->endMethod
JavaAdapterBytecodeGenerator#generateFinalizerOverride()::: java adapter bytecode generator generate finalizer override:::mv->cw->visitMethod->new->InstructionAdapter->mv->new->Handle->aconst->mv->visitVarInsn->INVOKE_NO_PERMISSIONS->invoke->mv->visitInsn->endMethod
JavaAdapterBytecodeGenerator#getExceptionNames(Class[])::: java adapter bytecode generator get exception names:::exceptionNames->new->StringArr->for->i->return
JavaAdapterBytecodeGenerator#getAccessModifiers(Method)::: java adapter bytecode generator get access modifiers:::return->method->isVarArgs
JavaAdapterBytecodeGenerator#gatherMethods(Class):::Gathers methods that can be implemented or overridden from the specified type into this factory's #methodInfos set:::if->Modifier->type->getModifiers->isPublic->typeMethods->type->isInterface->type->getMethods->type->getDeclaredMethods->foreach->name->typeMethod->getName->if->name->startsWith->continue->m->typeMethod->getModifiers->if->Modifier->isStatic->continue->if->Modifier->isPublic->Modifier->isProtected->if->name->equals->typeMethod->getParameterCount->if->if->Modifier->isFinal->throw->type->getCanonicalName->new->AdaptationException->continue->mi->new->MethodInfo->if->Modifier->isFinal->isCallerSensitive->finalMethods->add->else->if->finalMethods->contains->methodInfos->add->Modifier->isAbstract->abstractMethodNames->mi->getName->add->if->type->isInterface->superType->type->getSuperclass->if->gatherMethods->foreach->type->getInterfaces->gatherMethods
JavaAdapterBytecodeGenerator#gatherMethods(List>)::: java adapter bytecode generator gather methods:::foreach->gatherMethods
JavaAdapterBytecodeGenerator#getExcludedMethods():::Creates a collection of methods that are not final, but we still never allow them to be overridden in adapters, as explicitly declaring them automatically is a bad idea:::return->AccessController->new->PrivilegedAction<Collection<MethodInfo>>->doPrivileged
JavaAdapterBytecodeGenerator#getCommonSuperClass(String, String)::: java adapter bytecode generator get common super class:::try->c1->Class->type1->replace->forName->c2->Class->type2->replace->forName->if->c1->isAssignableFrom->return->if->c2->isAssignableFrom->return->if->c1->isInterface->c2->isInterface->return->OBJECT_TYPE->getInternalName->return->assignableSuperClass->getName->replace->catch->throw->new->RuntimeException->finally
JavaAdapterBytecodeGenerator#assignableSuperClass(Class, Class)::: java adapter bytecode generator assignable super class:::superClass->c1->getSuperclass->return->superClass->isAssignableFrom->assignableSuperClass
JavaAdapterBytecodeGenerator#isCallerSensitive(AccessibleObject)::: java adapter bytecode generator is caller sensitive:::return->e->isAnnotationPresent
JavaAdapterBytecodeGenerator#lookupServiceMethod(String, Class, Class...)::: java adapter bytecode generator lookup service method:::return->staticCallNoLookup
JavaAdapterClassLoader#generateClass(ClassLoader, ProtectionDomain):::Loads the generated adapter class into the JVM.:::return->AccessController->new->PrivilegedAction<StaticClass>->doPrivileged
JavaAdapterClassLoader#createClassLoader(ClassLoader, ProtectionDomain)::: java adapter class loader create class loader:::return->new->SecureClassLoader
JavaAdapterFactory#getAdapterClassFor(Class[], ScriptObject, MethodHandles.Lookup):::Returns an adapter class for the specified original types:::return->getProtectionDomain->getAdapterClassFor
JavaAdapterFactory#getAdapterClassFor(Class[], ScriptObject, ProtectionDomain)::: java adapter factory get adapter class for:::sm->System->getSecurityManager->if->foreach->Context->checkPackageAccess->ReflectionCheckLinker->checkReflectionAccess->return->getAdapterInfo->getAdapterClass
JavaAdapterFactory#getProtectionDomain(MethodHandles.Lookup)::: java adapter factory get protection domain:::if->lookup->lookupModes->return->return->lookup->lookupClass->getProtectionDomain
JavaAdapterFactory#getProtectionDomain(Class)::: java adapter factory get protection domain:::return->AccessController->new->PrivilegedAction<ProtectionDomain>->doPrivileged
JavaAdapterFactory#getConstructor(Class, Class, MethodHandles.Lookup):::Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of ScriptObject, ScriptFunction, or Object, and returns an instance of the adapter for the target type:::adapterClass->new->Class<?>Arr->getAdapterClassFor->return->MH->Bootstrap->getLinkerServices->MethodType->methodType->new->CallSiteDescriptor->new->SimpleLinkRequest->getGuardedInvocation->getInvocation->bindTo
JavaAdapterFactory#isAutoConvertibleFromFunction(Class):::Returns whether an instance of the specified class/interface can be generated from a ScriptFunction:::return->new->Class<?>Arr->getAdapterInfo->isAutoConvertibleFromFunction
JavaAdapterFactory#getAdapterInfo(Class[])::: java adapter factory get adapter info:::definingClassAndLoader->ClassAndLoader->getDefiningClassAndLoader->adapterInfoMap->ADAPTER_INFO_MAPS->definingClassAndLoader->getRepresentativeClass->get->typeList->Collections->singletonList->Arrays->types->clone->asList->adapterInfo->synchronized->adapterInfoMap->get->if->createAdapterInfo->adapterInfoMap->put->return
JavaAdapterFactory#createAdapterInfo(Class[], ClassAndLoader):::For a given class, create its adapter class and associated info.:::superClass->interfaces->new->ArrayList<>->foreach->mod->t->getModifiers->if->t->isInterface->if->return->t->getCanonicalName->superClass->getCanonicalName->new->AdapterInfo->if->Modifier->isFinal->return->t->getCanonicalName->new->AdapterInfo->else->if->interfaces->size->throw->new->IllegalArgumentException->interfaces->add->if->Modifier->isPublic->return->t->getCanonicalName->new->AdapterInfo->effectiveSuperClass->return->AccessController->new->PrivilegedAction<AdapterInfo>->doPrivileged
JavaAdapterFactory.AdapterInfo#getAdapterClass(ScriptObject, ProtectionDomain)::: adapter info get adapter class:::if->adaptationResult->getOutcome->throw->adaptationResult->typeError->return->getInstanceAdapterClass->getClassAdapterClass
JavaAdapterFactory.AdapterInfo#isAutoConvertibleFromFunction()::: adapter info is auto convertible from function:::if->adaptationResult->getOutcome->throw->adaptationResult->typeError->return
JavaAdapterFactory.AdapterInfo#getInstanceAdapterClass(ProtectionDomain)::: adapter info get instance adapter class:::codeSource->protectionDomain->getCodeSource->if->MINIMAL_PERMISSION_DOMAIN->getCodeSource->instanceAdapterClass->instanceAdapters->get->if->return->effectiveDomain->codeSource->MINIMAL_PERMISSION_DOMAIN->getCodeSource->equals->instanceAdapterGenerator->generateClass->existing->instanceAdapters->putIfAbsent->return
JavaAdapterFactory.AdapterInfo#getClassAdapterClass(ScriptObject, ProtectionDomain)::: adapter info get class adapter class:::JavaAdapterServices->setClassOverrides->try->return->classAdapterGenerator->generateClass->catch->finally->JavaAdapterServices->setClassOverrides
JavaAdapterFactory.AdapterInfo#findCommonLoader(ClassAndLoader):::Choose between the passed class loader and the class loader that defines the ScriptObject class, based on which of the two can see the classes in both.:::if->classAndLoader->canSee->return->classAndLoader->getLoader->if->SCRIPT_OBJECT_LOADER->canSee->return->SCRIPT_OBJECT_LOADER->getLoader->throw->classAndLoader->getRepresentativeClass->getCanonicalName->new->AdaptationException
JavaAdapterFactory#createMinimalPermissionDomain()::: java adapter factory create minimal permission domain:::permissions->new->Permissions->permissions->new->RuntimePermission->add->permissions->new->RuntimePermission->add->return->new->CodeSource->new->ProtectionDomain
JavaAdapterServices#getCallThis(ScriptFunction, Object):::Given a script function used as a delegate for a SAM adapter, figure out the right object to use as its "this" when called.:::return->delegate->isStrict
JavaAdapterServices#notAnObject(Object):::Throws a "not.an.object" type error:::throw->ScriptRuntime->safeToString->typeError
JavaAdapterServices#checkFunction(Object, String):::Checks if the passed object, which is supposed to be a callee retrieved through applying the GET_METHOD_PROPERTY operation on the delegate, is a ScriptFunction, or null or undefined:::if->return->else->if->JSType->nullOrUndefined->return->throw->ScriptRuntime->safeToString->typeError
JavaAdapterServices#getClassOverrides():::Returns a thread-local JS object used to define methods for the adapter class being initialized on the current thread:::overrides->classOverrides->get->return
JavaAdapterServices#invokeNoPermissions(MethodHandle, Object):::Takes a method handle and an argument to it, and invokes the method handle passing it the argument:::NO_PERMISSIONS_INVOKER->invokeExact
JavaAdapterServices#setGlobal(ScriptObject):::Set the current global scope to that of the adapter global:::currentGlobal->Context->getGlobal->if->Context->setGlobal->return->Context->setGlobal->return
JavaAdapterServices#getNonNullGlobal():::Get the current non-null global scope:::return->Objects->Context->getGlobal->requireNonNull
JavaAdapterServices#hasOwnToString(ScriptObject):::Returns true if the object has its own toString function:::return->sobj->getMap->findProperty
JavaAdapterServices#unwrapMirror(Object, boolean):::Returns the ScriptObject or Global field value from a ScriptObjectMirror using reflection.:::try->field->return->field->get->catch->throw->new->RuntimeException->finally
JavaAdapterServices#bootstrap(Lookup, String, MethodType, int):::Delegate to Bootstrap#bootstrap(Lookup, String, MethodType, int).:::return->Bootstrap->bootstrap
JavaAdapterServices#setClassOverrides(ScriptObject)::: java adapter services set class overrides:::classOverrides->set
JavaAdapterServices#createNoPermissionsInvoker()::: java adapter services create no permissions invoker:::className->cw->new->ClassWriter->cw->visit->objectType->Type->getType->methodHandleType->Type->getType->mv->cw->Type->getMethodDescriptor->visitMethod->new->InstructionAdapter->mv->visitCode->mv->visitVarInsn->mv->visitVarInsn->mv->methodHandleType->getInternalName->Type->getMethodDescriptor->invokevirtual->mv->visitInsn->mv->visitMaxs->mv->visitEnd->cw->visitEnd->bytes->cw->toByteArray->loader->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged->try->return->MethodHandles->publicLookup->Class->forName->MethodType->methodType->findStatic->catch->throw->e->getMessage->new->AssertionError->finally
JavaAdapterServices#exportReturnValue(Object):::Invoked when returning Object from an adapted method to filter out internal Nashorn objects that must not be seen by the callers:::return->NashornBeansLinker->exportArgument
JavaAdapterServices#toCharPrimitive(Object):::Invoked to convert a return value of a delegate function to primitive char:::return->JavaArgumentConverters->toCharPrimitive
JavaAdapterServices#wrapThrowable(Throwable):::Returns a new RuntimeException wrapping the passed throwable:::return->new->RuntimeException
JavaAdapterServices#unsupported():::Creates and returns a new UnsupportedOperationException:::return->new->UnsupportedOperationException
JavaAdapterServices#createArrayBootstrap(MethodHandles.Lookup, String, MethodType):::A bootstrap method used to collect invocation arguments into an Object array:::return->MethodHandles->identity->type->parameterCount->asCollector->asType->new->ConstantCallSite
JavaAdapterServices.MirrorFieldHolder#getMirrorField(String)::: mirror field holder get mirror field:::try->field->getDeclaredField->AccessController->field->setAccessible->return->doPrivileged->return->catch->throw->new->RuntimeException->finally
JavaArgumentConverters#getConverter(Class)::: java argument converters get converter:::return->CONVERTERS->get
JavaArgumentConverters#toBoolean(Object)::: java argument converters to boolean:::if->return->if->return->if->return->if->num->doubleValue->return->Double->isNaN->if->isString->return->length->if->return->throw->assertUnexpectedType
JavaArgumentConverters#toChar(Object)::: java argument converters to char:::if->return->if->ival->intValue->if->return->throw->typeError->s->toString->if->return->if->s->length->throw->typeError->return->s->charAt
JavaArgumentConverters#toCharPrimitive(Object)::: java argument converters to char primitive:::c->toChar->return
JavaArgumentConverters#toString(Object)::: java argument converters to string:::return->JSType->toString
JavaArgumentConverters#toDouble(Object)::: java argument converters to double:::for->obj
JavaArgumentConverters#toNumber(Object)::: java argument converters to number:::for->obj
JavaArgumentConverters#toLong(Object)::: java argument converters to long:::for->obj
JavaArgumentConverters#assertUnexpectedType(Object)::: java argument converters assert unexpected type:::return->obj->getClass->getName->new->AssertionError
JavaArgumentConverters#toLongPrimitive(Object)::: java argument converters to long primitive:::l->toLong->return
JavaArgumentConverters#findOwnMH(String, Class, Class...)::: java argument converters find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
JavaArgumentConverters#putDoubleConverter(Class)::: java argument converters put double converter:::primitive->TypeUtilities->getPrimitiveType->CONVERTERS->MH->methodHandle->methodHandle->type->changeReturnType->explicitCastArguments->put->CONVERTERS->MH->primitive->getName->findOwnMH->filterReturnValue->put
JavaArgumentConverters#putLongConverter(Class)::: java argument converters put long converter:::primitive->TypeUtilities->getPrimitiveType->CONVERTERS->MH->TO_LONG_PRIMITIVE->type->changeReturnType->explicitCastArguments->put->CONVERTERS->MH->primitive->getName->findOwnMH->filterReturnValue->put
JavaArgumentConverters#byteValue(Long)::: java argument converters byte value:::return->l->byteValue
JavaArgumentConverters#shortValue(Long)::: java argument converters short value:::return->l->shortValue
JavaArgumentConverters#intValue(Long)::: java argument converters int value:::return->l->intValue
JavaArgumentConverters#floatValue(Double)::: java argument converters float value:::return->d->floatValue
JavaSuperAdapter#getAdapter()::: java super adapter get adapter:::return
JavaSuperAdapterLinker#canLinkType(Class)::: java super adapter linker can link type:::return
JavaSuperAdapterLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: java super adapter linker get guarded invocation:::objSuperAdapter->linkRequest->getReceiver->if->return->descriptor->linkRequest->getCallSiteDescriptor->if->NashornCallSiteDescriptor->contains->return->adapter->getAdapter->args->linkRequest->getArguments->type->descriptor->getMethodType->adapterClass->adapter->getClass->name->NashornCallSiteDescriptor->getOperand->newOp->GET_METHOD->named->newDescriptor->NashornCallSiteDescriptor->getLookupInternal->type->changeParameterType->new->CallSiteDescriptor->guardedInv->NashornBeansLinker->linkRequest->replaceArguments->getGuardedInvocation->guard->IS_ADAPTER_OF_CLASS->bindTo->invocation->guardedInv->getInvocation->invType->invocation->type->typedBinder->BIND_DYNAMIC_METHOD->MethodType->invType->returnType->invType->parameterType->methodType->asType->droppingBinder->MethodHandles->invType->parameterList->invType->parameterCount->subList->dropArguments->bindingInvocation->MethodHandles->foldArguments->typedGetAdapter->asFilterType->adaptedInvocation->if->MethodHandles->filterArguments->else->typedAddPrefix->asFilterType->MethodHandles->filterArguments->return->guardedInv->replaceMethods->asType
JavaSuperAdapterLinker#asFilterType(MethodHandle, int, MethodType, MethodType):::Adapts the type of a method handle used as a filter in a position from a source method type to a target method type.:::return->filter->MethodType->targetType->parameterType->sourceType->parameterType->methodType->asType
JavaSuperAdapterLinker#addPrefixToMethodName(Object)::: java super adapter linker add prefix to method name:::return->SUPER_PREFIX->String->valueOf->concat
JavaSuperAdapterLinker#bindDynamicMethod(Object, Object):::Used to transform the return value of getMethod; transform a DynamicMethod into a BoundDynamicMethod while also accounting for the possibility of a non-existent method.:::return->Bootstrap->bindCallable
JavaSuperAdapterLinker#isAdapterOfClass(Class, Object):::Used as the guard of linkages, as the receiver is not guaranteed to be a JavaSuperAdapter.:::return->getAdapter->getClass
JSObjectLinker#canLinkType(Class)::: object linker can link type:::return->canLinkTypeStatic
JSObjectLinker#canLinkTypeStatic(Class)::: object linker can link type static:::return->isAssignableFrom->isAssignableFrom
JSObjectLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: object linker get guarded invocation:::self->request->getReceiver->desc->request->getCallSiteDescriptor->if->self->getClass->canLinkTypeStatic->return->inv->if->lookup->inv->linkerServices->inv->getInvocation->filterInternalObjects->inv->getGuard->replaceMethods->else->if->beanInv->nashornBeansLinker->getGuardedInvocation->beanInv->getInvocation->NashornGuards->beanInv->getGuard->NashornGuards->getNotJSObjectGuard->combineGuards->new->GuardedInvocation->else->throw->self->getClass->new->AssertionError->return->Bootstrap->asTypeSafeReturn
JSObjectLinker#lookup(CallSiteDescriptor, LinkRequest, LinkerServices)::: object linker lookup:::op->NashornCallSiteDescriptor->getBaseOperation->if->name->NashornCallSiteDescriptor->getOperand->switch->if->NashornCallSiteDescriptor->hasStandardNamespace->if->return->findGetMethod->return->nashornBeansLinker->getGuardedInvocation->findGetIndexMethod->break->if->NashornCallSiteDescriptor->hasStandardNamespace->return->findSetMethod->findSetIndexMethod->break->if->NashornCallSiteDescriptor->hasStandardNamespace->return->MH->insertArguments->new->GuardedInvocation->break->return->findCallMethod->return->findNewMethod->return
JSObjectLinker#findGetMethod(String)::: object linker find get method:::getter->MH->insertArguments->return->new->GuardedInvocation
JSObjectLinker#findGetIndexMethod(GuardedInvocation)::: object linker find get index method:::getter->MH->inv->getInvocation->insertArguments->return->inv->inv->getGuard->replaceMethods
JSObjectLinker#findSetMethod(String)::: object linker find set method:::getter->MH->insertArguments->return->new->GuardedInvocation
JSObjectLinker#findSetIndexMethod()::: object linker find set index method:::return->new->GuardedInvocation
JSObjectLinker#findCallMethod(CallSiteDescriptor)::: object linker find call method:::mh->NashornCallSiteDescriptor->isScope->if->NashornCallSiteDescriptor->isApplyToCall->MH->insertArguments->type->desc->getMethodType->type->type->parameterCount->parameterType->MH->type->parameterCount->asCollector->return->new->GuardedInvocation
JSObjectLinker#findNewMethod(CallSiteDescriptor)::: object linker find new method:::func->MH->desc->getMethodType->parameterCount->asCollector->return->new->GuardedInvocation
JSObjectLinker#isJSObject(Object)::: object linker is object:::return
JSObjectLinker#get(MethodHandle, Object, Object)::: object linker get:::if->return->getSlot->else->if->index->getIndex->if->return->getSlot->else->return->JSType->toString->getMember->else->if->isString->name->key->toString->if->name->indexOf->return->fallback->invokeExact->return->getMember->return
JSObjectLinker#put(Object, Object, Object)::: object linker put:::if->setSlot->else->if->index->getIndex->if->setSlot->else->JSType->toString->setMember->else->if->isString->key->toString->setMember
JSObjectLinker#del(Object, Object)::: object linker del:::if->return->delete->Objects->toString->removeMember->return
JSObjectLinker#getIndex(Number)::: object linker get index:::value->n->doubleValue->return->JSType->isRepresentableAsInt
JSObjectLinker#callToApply(MethodHandle, JSObject, Object, Object...)::: object linker call to apply:::receiver->arguments->new->ObjectArr->System->arraycopy->try->return->mh->new->ObjectArr->invokeExact->catch->throw->throw->new->RuntimeException->finally
JSObjectLinker#jsObjectScopeCall(JSObject, Object, Object[])::: object linker js object scope call:::modifiedThiz->if->jsObj->isStrictFunction->global->Context->getGlobal->ScriptObjectMirror->wrap->else->return->jsObj->call
JSObjectLinker#findJSObjectMH_V(String, Class, Class...)::: object linker find object h_ v:::return->MH->MethodHandles->lookup->MH->type->findVirtual
JSObjectLinker#findOwnMH_S(String, Class, Class...)::: object linker find own h_ s:::return->MH->MethodHandles->lookup->MH->type->findStatic
LinkerCallSite#newLinkerCallSite(MethodHandles.Lookup, String, MethodType, int):::Construct a new linker call site.:::desc->NashornCallSiteDescriptor->get->if->desc->isProfile->return->ProfilingLinkerCallSite->newProfilingLinkerCallSite->if->desc->isTrace->return->new->TracingLinkerCallSite->return->new->LinkerCallSite
LinkerCallSite#toString()::: linker call site to string:::return->getDescriptor->toString
LinkerCallSite#getNashornDescriptor():::Get the descriptor for this callsite:::return->getDescriptor
LinkerCallSite#relink(GuardedInvocation, MethodHandle)::: linker call site relink:::super->getDebuggingRelink->relink
LinkerCallSite#resetAndRelink(GuardedInvocation, MethodHandle)::: linker call site reset and relink:::super->getDebuggingRelink->resetAndRelink
LinkerCallSite#getDebuggingRelink(MethodHandle)::: linker call site get debugging relink:::if->return->MH->relink->type->parameterType->getIncreaseMissCounter->filterArguments->return
LinkerCallSite#getIncreaseMissCounter(Class)::: linker call site get increase miss counter:::missCounterWithDesc->MH->getDescriptor->getOperation->getScriptLocation->bindTo->if->return->return->MH->missCounterWithDesc->type->changeParameterType->changeReturnType->asType
LinkerCallSite#getScriptLocation()::: linker call site get script location:::caller->DynamicLinker->getLinkedCallSiteLocation->return->caller->getFileName->caller->getLineNumber
LinkerCallSite#increaseMissCount(String, Object):::Instrumentation - increase the miss count when a callsite misses:::missCount->increment->if->r->nextInt->i->missCounts->get->if->missCounts->new->AtomicInteger->put->else->i->incrementAndGet->return
LinkerCallSite.ProfilingLinkerCallSite#newProfilingLinkerCallSite(NashornCallSiteDescriptor)::: profiling linker call site new profiling linker call site:::if->new->LinkedList<>->profileDumperThread->new->ProfileDumper->new->Thread->Runtime->getRuntime->addShutdownHook->callSite->new->ProfilingLinkerCallSite->profileCallSites->add->return
LinkerCallSite.ProfilingLinkerCallSite#setTarget(MethodHandle)::: profiling linker call site set target:::type->type->isVoid->type->returnType->newSelfType->newTarget->type->parameterType->selfFilter->MH->bindTo->if->selfFilterType->MethodType->methodType->selfFilter->asType->methodHandle->MH->filterArguments->if->MH->MH->bindTo->filterReturnValue->else->filter->MH->type->returnType->type->returnType->type->MH->MH->MH->bindTo->asType->filterReturnValue->super->setTarget
LinkerCallSite.ProfilingLinkerCallSite#profileEntry(Object):::Start the clock for a profile entry and increase depth:::if->System->nanoTime->return
LinkerCallSite.ProfilingLinkerCallSite#profileExit(Object):::Decrease depth and stop the clock for a profile entry:::if->System->nanoTime->return
LinkerCallSite.ProfilingLinkerCallSite#profileVoidExit():::Decrease depth without return value filter:::if->System->nanoTime
LinkerCallSite.ProfilingLinkerCallSite.ProfileDumper#run()::: profile dumper run:::out->fileOutput->try->try->new->FileOutputStream->new->PrintWriter->catch->Context->getCurrentErr->finally->dump->catch->finally->if->out->close
LinkerCallSite.ProfilingLinkerCallSite.ProfileDumper#dump(PrintWriter)::: profile dumper dump:::index->foreach->out->callSite->getDescriptor->getOperation->println
LinkerCallSite.TracingLinkerCallSite#setTarget(MethodHandle)::: tracing linker call site set target:::if->getNashornDescriptor->isTraceEnterExit->super->setTarget->return->type->type->isVoid->type->returnType->traceMethodHandle->MH->bindTo->MH->bindTo->MH->type->parameterCount->asCollector->MH->asType->super->setTarget
LinkerCallSite.TracingLinkerCallSite#initialize(MethodHandle)::: tracing linker call site initialize:::super->getFallbackLoggingRelink->initialize
LinkerCallSite.TracingLinkerCallSite#relink(GuardedInvocation, MethodHandle)::: tracing linker call site relink:::super->getFallbackLoggingRelink->relink
LinkerCallSite.TracingLinkerCallSite#resetAndRelink(GuardedInvocation, MethodHandle)::: tracing linker call site reset and relink:::super->getFallbackLoggingRelink->resetAndRelink
LinkerCallSite.TracingLinkerCallSite#getFallbackLoggingRelink(MethodHandle)::: tracing linker call site get fallback logging relink:::if->getNashornDescriptor->isTraceMisses->return->type->relink->type->return->MH->MH->MH->MH->getScriptLocation->insertArguments->type->parameterCount->asCollector->type->changeReturnType->asType->foldArguments
LinkerCallSite.TracingLinkerCallSite#printObject(PrintWriter, Object)::: tracing linker call site print object:::if->getNashornDescriptor->isTraceObjects->out->print->return->if->object->isFirst->keySet->object->keySet->if->keySet->isEmpty->out->ScriptRuntime->safeToString->print->else->out->print->foreach->if->out->print->out->print->out->print->value->object->get->if->out->print->else->printObject->out->print->else->out->ScriptRuntime->safeToString->print
LinkerCallSite.TracingLinkerCallSite#tracePrint(PrintWriter, String, Object[], Object)::: tracing linker call site trace print:::out->Debug->id->print->out->getDescriptor->getOperation->print->if->printObject->for->i->out->print->if->tag->equals->out->print->printObject->out->println
LinkerCallSite.TracingLinkerCallSite#traceObject(MethodHandle, Object...):::Trace event:::out->Context->getCurrentErr->tracePrint->result->mh->invokeWithArguments->tracePrint->return
LinkerCallSite.TracingLinkerCallSite#traceVoid(MethodHandle, Object...):::Trace event:::out->Context->getCurrentErr->tracePrint->mh->invokeWithArguments->tracePrint
LinkerCallSite.TracingLinkerCallSite#traceMiss(String, Object...):::Tracer function that logs a callsite miss:::Context->getCurrentErr->tracePrint
LinkerCallSite#getMaxChainLength()::: linker call site get max chain length:::return
LinkerCallSite#getCount():::Get the callsite count:::return->count->longValue
LinkerCallSite#getMissCount():::Get the callsite miss count:::return->missCount->longValue
LinkerCallSite#getMissSamplingPercentage():::Get given miss sampling percentage for sampler:::return
LinkerCallSite#getMissCounts(PrintWriter):::Dump the miss counts collected so far to a given output stream:::entries->missCounts->entrySet->new->ArrayList<>->Collections->new->Comparator<Map.Entry<String,AtomicInteger>>->sort->foreach->out->entry->getKey->entry->getValue->get->println
NameCodec#encode(String):::Encodes ("mangles") an unencoded symbolic name.:::bn->mangle->return
NameCodec#decode(String):::Decodes ("demangles") an encoded symbolic name.:::sn->if->sn->isEmpty->looksMangled->demangle->return
NameCodec#looksMangled(String)::: name codec looks mangled:::return->s->charAt
NameCodec#mangle(String)::: name codec mangle:::if->s->length->return->sb->for->i->slen->s->length->if->return->sb->toString->return
NameCodec#demangle(String)::: name codec demangle:::sb->stringStart->if->s->startsWith->for->i->slen->s->length->if->return->sb->toString->return->s->substring
NameCodec#isSpecial(char)::: name codec is special:::if->return->else->return
NameCodec#replacementOf(char)::: name codec replacement of:::if->isSpecial->return->i->DANGEROUS_CHARS->indexOf->if->return->return->REPLACEMENT_CHARS->charAt
NameCodec#originalOfReplacement(char)::: name codec original of replacement:::if->isSpecial->return->i->REPLACEMENT_CHARS->indexOf->if->return->return->DANGEROUS_CHARS->charAt
NameCodec#isDangerous(char)::: name codec is dangerous:::if->isSpecial->return->return->DANGEROUS_CHARS->indexOf
NashornBeansLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: nashorn beans linker get guarded invocation:::self->linkRequest->getReceiver->desc->linkRequest->getCallSiteDescriptor->if->arguments->linkRequest->getArguments->forgedLinkRequest->linkRequest->replaceArguments->invocation->getGuardedInvocation->return->invocation->filterArguments->if->NamedOperation->desc->getOperation->getBaseOperation->name->self->getClass->getFunctionalInterfaceMethodName->if->getMethodDesc->NashornCallSiteDescriptor->getLookupInternal->GET_METHOD->named->new->CallSiteDescriptor->getMethodInv->linkerServices->new->SimpleLinkRequest->getGuardedInvocation->method->try->getMethodInv->getInvocation->invokeExact->catch->throw->throw->new->RuntimeException->finally->args->linkRequest->getArguments->callType->desc->getMethodType->newDesc->desc->desc->getMethodType->changeParameterType->callType->parameterType->changeParameterType->changeMethodType->gi->linkRequest->replaceArguments->new->NashornBeansLinkerServices->getGuardedInvocation->inv->gi->getInvocation->bindTo->calleeToThis->MH->callType->parameterType->dropArguments->return->gi->gi->getGuard->replaceMethods->return->getGuardedInvocation
NashornBeansLinker#getGuardedInvocation(GuardingDynamicLinker, LinkRequest, LinkerServices):::Delegates to the specified linker but injects its linker services wrapper so that it will apply all special conversions that this class does.:::return->delegateLinker->new->NashornBeansLinkerServices->getGuardedInvocation
NashornBeansLinker#exportArgument(Object)::: nashorn beans linker export argument:::return->exportArgument
NashornBeansLinker#exportArgument(Object, boolean)::: nashorn beans linker export argument:::if->return->arg->toString->else->if->return->ScriptUtils->wrap->else->return
NashornBeansLinker#importResult(Object)::: nashorn beans linker import result:::return->ScriptUtils->unwrap
NashornBeansLinker#consStringFilter(Object)::: nashorn beans linker cons string filter:::return->arg->toString
NashornBeansLinker#findFunctionalInterfaceMethodName(Class)::: nashorn beans linker find functional interface method name:::if->return->foreach->clazz->getInterfaces->if->Context->isAccessibleClass->continue->if->iface->isAnnotationPresent->foreach->iface->getMethods->if->Modifier->m->getModifiers->isAbstract->isOverridableObjectMethod->return->m->getName->return->clazz->getSuperclass->findFunctionalInterfaceMethodName
NashornBeansLinker#isOverridableObjectMethod(Method)::: nashorn beans linker is overridable object method:::switch->m->getName->if->m->getReturnType->params->m->getParameterTypes->return->return->return->m->getReturnType->m->getParameterCount->return->m->getReturnType->m->getParameterCount->return
NashornBeansLinker#getFunctionalInterfaceMethodName(Class)::: nashorn beans linker get functional interface method name:::return->FUNCTIONAL_IFACE_METHOD_NAME->get
NashornBeansLinker#createHiddenObjectFilter()::: nashorn beans linker create hidden object filter:::return->new->DefaultInternalObjectFilter
NashornBeansLinker.NashornBeansLinkerServices#asType(MethodHandle, MethodType)::: nashorn beans linker services as type:::return->linkerServices->asType
NashornBeansLinker.NashornBeansLinkerServices#getTypeConverter(Class, Class)::: nashorn beans linker services get type converter:::return->linkerServices->getTypeConverter
NashornBeansLinker.NashornBeansLinkerServices#canConvert(Class, Class)::: nashorn beans linker services can convert:::return->linkerServices->canConvert
NashornBeansLinker.NashornBeansLinkerServices#getGuardedInvocation(LinkRequest)::: nashorn beans linker services get guarded invocation:::return->linkerServices->getGuardedInvocation
NashornBeansLinker.NashornBeansLinkerServices#compareConversion(Class, Class, Class)::: nashorn beans linker services compare conversion:::if->if->return->if->return->return->linkerServices->compareConversion
NashornBeansLinker.NashornBeansLinkerServices#filterInternalObjects(MethodHandle)::: nashorn beans linker services filter internal objects:::return->linkerServices->filterInternalObjects
NashornBeansLinker.NashornBeansLinkerServices#getWithLookup(Supplier, SecureLookupSupplier)::: nashorn beans linker services get with lookup:::return->linkerServices->getWithLookup
NashornBottomLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: nashorn bottom linker get guarded invocation:::self->linkRequest->getReceiver->if->return->linkNull->return->linkBean
NashornBottomLinker#linkBean(LinkRequest)::: nashorn bottom linker link bean:::desc->linkRequest->getCallSiteDescriptor->self->linkRequest->getReceiver->switch->NashornCallSiteDescriptor->getStandardOperation->if->BeansLinker->isDynamicConstructor->throw->ScriptRuntime->safeToString->typeError->if->BeansLinker->isDynamicMethod->throw->ScriptRuntime->safeToString->typeError->throw->NashornCallSiteDescriptor->getFunctionErrorMessage->typeError->if->BeansLinker->isDynamicConstructor->throw->ScriptRuntime->safeToString->typeError->if->BeansLinker->isDynamicMethod->throw->ScriptRuntime->safeToString->typeError->throw->NashornCallSiteDescriptor->getFunctionErrorMessage->typeError->throw->new->AssertionError
NashornBottomLinker#linkMissingBeanMember(LinkRequest, LinkerServices)::: nashorn bottom linker link missing bean member:::desc->linkRequest->getCallSiteDescriptor->operand->NashornCallSiteDescriptor->getOperand->strict->NashornCallSiteDescriptor->isStrict->switch->NashornCallSiteDescriptor->getStandardOperation->if->NashornCallSiteDescriptor->isOptimistic->return->MethodHandles->NashornCallSiteDescriptor->getProgramPoint->insertArguments->adaptThrower->else->if->return->getInvocation->return->getInvocation->if->return->bindOperand->adaptThrower->else->if->return->getInvocation->return->getInvocation->if->return->bindOperand->adaptThrower->return->bindOperand->getInvocation->throw->new->AssertionError
NashornBottomLinker#bindOperand(MethodHandle, String)::: nashorn bottom linker bind operand:::return->MethodHandles->insertArguments
NashornBottomLinker#adaptThrower(MethodHandle, CallSiteDescriptor)::: nashorn bottom linker adapt thrower:::targetType->desc->getMethodType->paramCount->handle->type->parameterCount->return->MethodHandles->targetType->parameterList->targetType->parameterCount->subList->dropArguments->asType
NashornBottomLinker#throwStrictPropertySetter(Object, Object)::: nashorn bottom linker throw strict property setter:::throw->createTypeError
NashornBottomLinker#throwStrictPropertyRemover(Object, Object)::: nashorn bottom linker throw strict property remover:::if->isNonConfigurableProperty->throw->createTypeError->return
NashornBottomLinker#missingPropertyRemover(Object, Object)::: nashorn bottom linker missing property remover:::return->isNonConfigurableProperty
NashornBottomLinker#isNonConfigurableProperty(Object, Object)::: nashorn bottom linker is non configurable property:::if->clazz->getRepresentedClass->return->BeansLinker->getReadableStaticPropertyNames->contains->BeansLinker->getWritableStaticPropertyNames->contains->BeansLinker->getStaticMethodNames->contains->clazz->self->getClass->return->BeansLinker->getReadableInstancePropertyNames->contains->BeansLinker->getWritableInstancePropertyNames->contains->BeansLinker->getInstanceMethodNames->contains
NashornBottomLinker#createTypeError(Object, Object, String)::: nashorn bottom linker create type error:::return->String->valueOf->ScriptRuntime->safeToString->typeError
NashornBottomLinker#throwOptimisticUndefined(int)::: nashorn bottom linker throw optimistic undefined:::throw->new->UnwarrantedOptimismException
NashornBottomLinker#convertToType(Class, Class, Supplier)::: nashorn bottom linker convert to type:::gi->convertToTypeNoCast->return->gi->MH->type->asType
NashornBottomLinker#convertToTypeNoCast(Class, Class):::Main part of the implementation of GuardingTypeConverterFactory#convertToType that doesn't care about adapting the method signature; that's done by the invoking method:::mh->CONVERTERS->get->if->return->new->GuardedInvocation->return
NashornBottomLinker#getInvocation(MethodHandle, LinkerServices, CallSiteDescriptor)::: nashorn bottom linker get invocation:::return->linkerServices->desc->getMethodType->asTypeLosslessReturn
NashornBottomLinker#isExpectedObject(Object)::: nashorn bottom linker is expected object:::return->NashornLinker->obj->getClass->canLinkTypeStatic
NashornBottomLinker#linkNull(LinkRequest)::: nashorn bottom linker link null:::desc->linkRequest->getCallSiteDescriptor->switch->NashornCallSiteDescriptor->getStandardOperation->throw->typeError->throw->NashornCallSiteDescriptor->isMethodFirstOperation->getArgument->typeError->throw->getArgument->typeError->throw->getArgument->typeError->throw->new->AssertionError
NashornBottomLinker#getArgument(LinkRequest)::: nashorn bottom linker get argument:::op->linkRequest->getCallSiteDescriptor->getOperation->if->return->getName->toString->return->ScriptRuntime->linkRequest->getArguments->safeToString
NashornCallSiteDescriptor#appendFlags(int, StringBuilder):::Function used by NashornTextifier to represent call site flags in human readable form:::pp->if->sb->append->append->if->if->sb->append->else->sb->append->if->sb->append->else->if->sb->append->if->sb->append
NashornCallSiteDescriptor#getOperationName(int):::Given call site flags, returns the operation name encoded in them.:::switch->return->return->return->return->return->return->return->return->return->return->throw->new->AssertionError
NashornCallSiteDescriptor#get(MethodHandles.Lookup, String, MethodType, int):::Retrieves a Nashorn call site descriptor with the specified values:::opIndex->baseOp->decodedName->NameCodec->decode->op->decodedName->isEmpty->getNamedOperation->return->get
NashornCallSiteDescriptor#getNamedOperation(String, int, Operation)::: nashorn call site descriptor get named operation:::namedOps->ref->namedOps->get->if->existing->ref->get->if->return->newOp->baseOp->named->namedOps->new->WeakReference<>->put->return
NashornCallSiteDescriptor#get(MethodHandles.Lookup, Operation, MethodType, int)::: nashorn call site descriptor get:::csd->new->NashornCallSiteDescriptor->if->csd->isOptimistic->return->canonical->canonicals->lookup->lookupClass->get->putIfAbsent->return
NashornCallSiteDescriptor#getLookupInternal(CallSiteDescriptor)::: nashorn call site descriptor get lookup internal:::if->return->getLookupPrivileged->return->AccessController->csd->getLookup->doPrivileged
NashornCallSiteDescriptor#equals(Object)::: nashorn call site descriptor equals:::return->super->equals
NashornCallSiteDescriptor#hashCode()::: nashorn call site descriptor hash code:::return->super->hashCode
NashornCallSiteDescriptor#getOperand(CallSiteDescriptor):::Returns the named operand in the passed descriptor's operation:::operation->desc->getOperation->return->getName->toString
NashornCallSiteDescriptor#findFirstStandardNamespace(CallSiteDescriptor)::: nashorn call site descriptor find first standard namespace:::return->StandardNamespace->desc->getOperation->findFirst
NashornCallSiteDescriptor#isMethodFirstOperation(CallSiteDescriptor):::Returns true if the operation of the call descriptor is operating on the method namespace first.:::return->findFirstStandardNamespace
NashornCallSiteDescriptor#hasStandardNamespace(CallSiteDescriptor):::Returns true if there's a namespace operation in the call descriptor and it is operating on at least one StandardNamespace:::return->findFirstStandardNamespace
NashornCallSiteDescriptor#getBaseOperation(CallSiteDescriptor):::Returns the base operation in this call site descriptor after unwrapping it from both a named operation and a namespace operation.:::return->NamespaceOperation->NamedOperation->desc->getOperation->getBaseOperation->getBaseOperation
NashornCallSiteDescriptor#getStandardOperation(CallSiteDescriptor):::Returns the standard operation that is the base operation in this call site descriptor.:::return->getBaseOperation
NashornCallSiteDescriptor#contains(CallSiteDescriptor, StandardOperation, StandardNamespace):::Returns true if the passed call site descriptor contains the specified standard operation on the specified standard namespace.:::return->NamespaceOperation->NamedOperation->desc->getOperation->getBaseOperation->contains
NashornCallSiteDescriptor#getFunctionErrorMessage(Object):::Returns the error message to be used when CALL or NEW is used on a non-function.:::funcDesc->getOperand->return->ScriptRuntime->safeToString
NashornCallSiteDescriptor#getFunctionErrorMessage(CallSiteDescriptor, Object):::Returns the error message to be used when CALL or NEW is used on a non-function.:::return->getFunctionErrorMessage->ScriptRuntime->safeToString
NashornCallSiteDescriptor#getFlags(CallSiteDescriptor):::Returns the Nashorn-specific flags for this call site descriptor.:::return
NashornCallSiteDescriptor#isFlag(int):::Returns true if this descriptor has the specified flag set, see CALLSITE_* constants in this class.:::return
NashornCallSiteDescriptor#isFlag(CallSiteDescriptor, int):::Returns true if this descriptor has the specified flag set, see CALLSITE_* constants in this class.:::return->getFlags
NashornCallSiteDescriptor#isScope(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_SCOPE flag set.:::return->isFlag
NashornCallSiteDescriptor#isFastScope(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_FAST_SCOPE flag set.:::return->isFlag
NashornCallSiteDescriptor#isStrict(CallSiteDescriptor):::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_STRICT flag set.:::return->isFlag
NashornCallSiteDescriptor#isApplyToCall(CallSiteDescriptor):::Returns true if this is an apply call that we try to call as a "call":::return->isFlag
NashornCallSiteDescriptor#isOptimistic(CallSiteDescriptor):::Is this an optimistic call site:::return->isFlag
NashornCallSiteDescriptor#isDeclaration(CallSiteDescriptor):::Does this callsite contain a declaration for its target?:::return->isFlag
NashornCallSiteDescriptor#isStrictFlag(int):::Returns true if flags has the #CALLSITE_STRICT bit set.:::return
NashornCallSiteDescriptor#isScopeFlag(int):::Returns true if flags has the #CALLSITE_SCOPE bit set.:::return
NashornCallSiteDescriptor#isDeclaration(int):::Returns true if flags has the #CALLSITE_DECLARE bit set.:::return
NashornCallSiteDescriptor#getProgramPoint(CallSiteDescriptor):::Get a program point from a descriptor (must be optimistic):::return->getFlags
NashornCallSiteDescriptor#isProfile()::: nashorn call site descriptor is profile:::return->isFlag
NashornCallSiteDescriptor#isTrace()::: nashorn call site descriptor is trace:::return->isFlag
NashornCallSiteDescriptor#isTraceMisses()::: nashorn call site descriptor is trace misses:::return->isFlag
NashornCallSiteDescriptor#isTraceEnterExit()::: nashorn call site descriptor is trace enter exit:::return->isFlag
NashornCallSiteDescriptor#isTraceObjects()::: nashorn call site descriptor is trace objects:::return->isFlag
NashornCallSiteDescriptor#isOptimistic()::: nashorn call site descriptor is optimistic:::return->isFlag
NashornCallSiteDescriptor#changeMethodTypeInternal(MethodType)::: nashorn call site descriptor change method type internal:::return->getLookupPrivileged->getOperation->get
NashornCallSiteDescriptor#changeOperationInternal(Operation)::: nashorn call site descriptor change operation internal:::return->getLookupPrivileged->getMethodType->get
NashornGuards#explicitInstanceOfCheck(CallSiteDescriptor, LinkRequest):::Given a callsite descriptor and a link request, determine whether we should use an instanceof check explicitly for the guard if needed, or if we should link it with a try/catch ClassCastException combinator as its relink criteria - i.e:::return
NashornGuards#getScriptObjectGuard():::Returns a guard that does an instanceof ScriptObject check on the receiver:::return
NashornGuards#getNotJSObjectGuard():::Get the guard that checks if an item is not a JSObject:::return
NashornGuards#getScriptObjectGuard(boolean):::Returns a guard that does an instanceof ScriptObject check on the receiver:::return
NashornGuards#getMapGuard(PropertyMap, boolean):::Get the guard that checks if a PropertyMap is equal to a known map, using reference comparison:::return->MH->insertArguments
NashornGuards#needsGuard(Property, CallSiteDescriptor):::Determine whether the given callsite needs a guard.:::return->property->isConfigurable->property->isBound->property->hasDualFields->NashornCallSiteDescriptor->isFastScope->property->canChangeType
NashornGuards#getGuard(ScriptObject, Property, CallSiteDescriptor, boolean):::Get the guard for a property access:::if->needsGuard->return->if->NashornCallSiteDescriptor->isScope->sobj->isScope->if->property->isBound->property->canChangeType->return->getIdentityGuard->if->property->isConfigurable->return->getIdentityGuard->sobj->getMap->getMapGuard->combineGuards->return->sobj->getMap->getMapGuard
NashornGuards#getIdentityGuard(ScriptObject):::Get a guard that checks referential identity of the current object.:::return->MH->new->WeakReference<>->insertArguments
NashornGuards#getStringGuard():::Get a guard that checks if in item is a JS string.:::return->methodHandle
NashornGuards#getNumberGuard():::Get a guard that checks if in item is a JS number.:::return->methodHandle
NashornGuards#combineGuards(MethodHandle, MethodHandle):::Combine two method handles of type (Object)boolean using logical AND.:::if->return->else->if->return->else->return->MH->MH->MH->constant->dropArguments->guardWithTest
NashornGuards#isScriptObject(Object)::: nashorn guards is script object:::return
NashornGuards#isScriptObject(Class, Object)::: nashorn guards is script object:::return->clazz->isInstance
NashornGuards#isMap(ScriptObject, PropertyMap)::: nashorn guards is map:::return->self->getMap
NashornGuards#isNotJSObject(Object)::: nashorn guards is not object:::return
NashornGuards#isMap(Object, PropertyMap)::: nashorn guards is map:::return->getMap
NashornGuards#sameObject(Object, WeakReference)::: nashorn guards same object:::return->ref->get
NashornGuards#isScriptFunction(Object)::: nashorn guards is script function:::return
NashornGuards#findOwnMH(String, Class, Class...)::: nashorn guards find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
NashornLinker#canLinkType(Class):::Returns true if ScriptObject is assignable from type, or it is Undefined.:::return->canLinkTypeStatic
NashornLinker#canLinkTypeStatic(Class)::: nashorn linker can link type static:::return->isAssignableFrom
NashornLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: nashorn linker get guarded invocation:::desc->request->getCallSiteDescriptor->return->Bootstrap->getGuardedInvocation->asTypeSafeReturn
NashornLinker#getGuardedInvocation(LinkRequest, CallSiteDescriptor)::: nashorn linker get guarded invocation:::self->request->getReceiver->inv->if->lookup->else->if->Undefined->lookup->else->throw->self->getClass->getName->new->AssertionError->return
NashornLinker#convertToType(Class, Class, Supplier)::: nashorn linker convert to type:::gi->convertToTypeNoCast->if->getSamTypeConverter->return->gi->MH->type->asType
NashornLinker#convertToTypeNoCast(Class, Class, Supplier):::Main part of the implementation of GuardingTypeConverterFactory#convertToType(Class, Class) that doesn't care about adapting the method signature; that's done by the invoking method:::mh->JavaArgumentConverters->getConverter->if->return->canLinkTypeStatic->new->GuardedInvocation->arrayConverter->getArrayConverter->if->return->return->getMirrorConverter
NashornLinker#getSamTypeConverter(Class, Class, Supplier):::Returns a guarded invocation that converts from a source type that is ScriptFunction, or a subclass or a superclass of it) to a SAM type.:::isSourceTypeGeneric->sourceType->isAssignableFrom->if->isAssignableFrom->isAutoConvertibleFromFunction->paramType->ctor->JavaAdapterFactory->getCurrentLookup->getConstructor->return->new->GuardedInvocation->return
NashornLinker#getCurrentLookup(Supplier)::: nashorn linker get current lookup:::return->AccessController->new->PrivilegedAction<MethodHandles.Lookup>->doPrivileged
NashornLinker#getArrayConverter(Class, Class, Supplier):::Returns a guarded invocation that converts from a source type that is NativeArray to a Java array or List or Queue or Deque or Collection type.:::isSourceTypeNativeArray->isSourceTypeGeneric->sourceType->isAssignableFrom->if->guard->if->targetType->isArray->mh->ARRAY_CONVERTERS->get->mhWithLookup->if->mh->type->parameterCount->MH->getCurrentLookup->new->SecureLookupSupplier->insertArguments->else->return->new->GuardedInvocation->else->if->return->new->GuardedInvocation->else->if->return->new->GuardedInvocation->else->if->return->new->GuardedInvocation->else->if->return->new->GuardedInvocation->return
NashornLinker#createArrayConverter(Class)::: nashorn linker create array converter:::componentType->type->getComponentType->converterCall->if->isComponentTypeAutoConvertibleFromFunction->else->typeBoundConverter->MH->converterCall->methodHandle->insertArguments->return->MH->typeBoundConverter->type->changeReturnType->asType
NashornLinker#isComponentTypeAutoConvertibleFromFunction(Class)::: nashorn linker is component type auto convertible from function:::if->targetType->isArray->return->targetType->getComponentType->isComponentTypeAutoConvertibleFromFunction->return->isAutoConvertibleFromFunction
NashornLinker#getMirrorConverter(Class, Class)::: nashorn linker get mirror converter:::if->if->isAssignableFrom->return->new->GuardedInvocation->else->if->sourceType->isAssignableFrom->sourceType->isInterface->return->new->GuardedInvocation->return
NashornLinker#isAutoConvertibleFromFunction(Class)::: nashorn linker is auto convertible from function:::return->isAbstractClass->isAssignableFrom->JavaAdapterFactory->isAutoConvertibleFromFunction
NashornLinker#isAbstractClass(Class):::Utility method used by few other places in the code:::return->Modifier->clazz->getModifiers->isAbstract->clazz->isArray
NashornLinker#compareConversion(Class, Class, Class)::: nashorn linker compare conversion:::if->if->isArrayPreferredTarget->if->isArrayPreferredTarget->return->else->if->isArrayPreferredTarget->return->if->targetType1->isArray->if->targetType2->isArray->return->else->if->targetType2->isArray->return->if->isAssignableFrom->if->targetType1->isInterface->if->targetType2->isInterface->return->else->if->targetType2->isInterface->return->return
NashornLinker#isArrayPreferredTarget(Class)::: nashorn linker is array preferred target:::return
NashornLinker#asReturning(MethodHandle, Class)::: nashorn linker as returning:::return->mh->mh->type->changeReturnType->asType
NashornLinker#isNashornTypeOrUndefined(Object)::: nashorn linker is nashorn type or undefined:::return
NashornLinker#createMirror(Object)::: nashorn linker create mirror:::return->ScriptUtils->wrap
NashornLinker#isFunction(Object)::: nashorn linker is function:::return->isFunction
NashornLinker#findOwnMH(String, Class, Class...)::: nashorn linker find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
NashornPrimitiveLinker#canLinkType(Class)::: nashorn primitive linker can link type:::return->canLinkTypeStatic
NashornPrimitiveLinker#canLinkTypeStatic(Class)::: nashorn primitive linker can link type static:::return
NashornPrimitiveLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: nashorn primitive linker get guarded invocation:::self->request->getReceiver->return->Bootstrap->Global->primitiveLookup->request->getCallSiteDescriptor->asTypeSafeReturn
NashornPrimitiveLinker#convertToType(Class, Class, Supplier):::This implementation of type converter factory will pretty much allow implicit conversions of anything to anything else that's allowed among JavaScript primitive types (string to number, boolean to string, etc.):::mh->JavaArgumentConverters->getConverter->if->if->return->return->return->canLinkTypeStatic->new->GuardedInvocation->mh->type->changeParameterType->asType
NashornPrimitiveLinker#compareConversion(Class, Class, Class):::Implements the somewhat involved prioritization of JavaScript primitive types conversions:::wrapper1->getWrapperTypeOrSelf->if->return->wrapper2->getWrapperTypeOrSelf->if->return->if->isAssignableFrom->if->isAssignableFrom->if->isAssignableFrom->return->else->if->isAssignableFrom->return->if->return->else->if->return->if->isAssignableFrom->primitiveType1->getPrimitiveTypeOrSelf->primitiveType2->getPrimitiveTypeOrSelf->if->TypeUtilities->isMethodInvocationConvertible->return->else->if->TypeUtilities->isMethodInvocationConvertible->return->if->return->if->return->return
NashornPrimitiveLinker#getPrimitiveTypeOrSelf(Class)::: nashorn primitive linker get primitive type or self:::primitive->TypeUtilities->getPrimitiveType->return
NashornPrimitiveLinker#getWrapperTypeOrSelf(Class)::: nashorn primitive linker get wrapper type or self:::wrapper->TypeUtilities->getWrapperType->return
NashornPrimitiveLinker#isJavaScriptPrimitive(Object)::: nashorn primitive linker is java script primitive:::return->JSType->isString->JSType->isNumber
NashornPrimitiveLinker#findOwnMH(String, Class, Class...)::: nashorn primitive linker find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
NashornStaticClassLinker#canLinkType(Class)::: nashorn static class linker can link type:::return
NashornStaticClassLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: nashorn static class linker get guarded invocation:::self->request->getReceiver->if->self->getClass->return->receiverClass->getRepresentedClass->Bootstrap->checkReflectionAccess->desc->request->getCallSiteDescriptor->if->NamedOperation->desc->getOperation->getBaseOperation->if->Modifier->receiverClass->getModifiers->isPublic->throw->ECMAErrors->receiverClass->getName->typeError->Context->checkPackageAccess->if->NashornLinker->isAbstractClass->args->request->getArguments->lookup->NashornCallSiteDescriptor->request->getCallSiteDescriptor->getLookupInternal->JavaAdapterFactory->new->Class<?>Arr->getAdapterClassFor->adapterRequest->request->request->getCallSiteDescriptor->replaceArguments->gi->delegate->checkNullConstructor->return->gi->gi->getInvocation->Guards->getIdentityGuard->replaceMethods->return->delegate->checkNullConstructor->return->delegate
NashornStaticClassLinker#delegate(LinkerServices, LinkRequest)::: nashorn static class linker delegate:::return->NashornBeansLinker->getGuardedInvocation
NashornStaticClassLinker#checkNullConstructor(GuardedInvocation, Class)::: nashorn static class linker check null constructor:::if->throw->ECMAErrors->receiverClass->getName->typeError->return
PrimitiveLookup#lookupPrimitive(LinkRequest, Class, ScriptObject, MethodHandle, MethodHandle):::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.:::return->Guards->getInstanceOfGuard->lookupPrimitive
PrimitiveLookup#lookupPrimitive(LinkRequest, MethodHandle, ScriptObject, MethodHandle, MethodHandle):::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.:::desc->request->getCallSiteDescriptor->name->NashornCallSiteDescriptor->getOperand->find->wrappedReceiver->findProperty->switch->NashornCallSiteDescriptor->getStandardOperation->if->if->return->sp->find->getProperty->getBuiltinSwitchPoint->if->sp->hasBeenInvalidated->return->GlobalConstants->find->getObjectValue->staticConstantGetter->new->GuardedInvocation->if->find->isInheritedOrdinaryProperty->proto->wrappedReceiver->getProto->link->proto->lookup->if->invocation->link->getInvocation->adaptedInvocation->MH->invocation->type->changeParameterType->asType->method->MH->filterArguments->protoGuard->MH->link->getGuard->filterArguments->return->NashornGuards->combineGuards->new->GuardedInvocation->break->return->NashornCallSiteDescriptor->isStrict->getPrimitiveSetter->break->link->wrappedReceiver->lookup->if->method->link->getInvocation->receiverType->method->type->parameterType->if->wrapType->wrapFilter->type->MH->MH->wrapType->changeReturnType->asType->filterArguments->return->link->getSwitchPoints->new->GuardedInvocation->return
PrimitiveLookup#getPrimitiveSetter(String, MethodHandle, MethodHandle, boolean)::: primitive lookup get primitive setter:::filter->MH->wrapFilter->type->changeReturnType->asType->target->if->MH->dropArguments->MH->insertArguments->else->MH->dropArguments->MH->insertArguments->return->MH->foldArguments->new->GuardedInvocation
PrimitiveLookup#primitiveSetter(ScriptObject, Object, Object, boolean, Object)::: primitive lookup primitive setter:::name->JSType->toString->find->wrappedSelf->findProperty->if->find->getProperty->isAccessorProperty->find->getProperty->hasNativeSetter->if->if->find->getProperty->isAccessorProperty->throw->ScriptRuntime->safeToString->typeError->else->throw->ScriptRuntime->safeToString->typeError->return->find->setValue
PrimitiveLookup#findOwnMH(String, MethodType)::: primitive lookup find own h:::return->MH->MethodHandles->lookup->findStatic
ReflectionCheckLinker#getBeanClass(String)::: reflection check linker get bean class:::try->return->Class->forName->catch->return->finally
ReflectionCheckLinker#canLinkType(Class)::: reflection check linker can link type:::return->isReflectionClass
ReflectionCheckLinker#isReflectionClass(Class)::: reflection check linker is reflection class:::if->isAssignableFrom->return->if->STATEMENT_CLASS->isAssignableFrom->XMLENCODER_CLASS->isAssignableFrom->XMLDECODER_CLASS->isAssignableFrom->return->name->type->getName->return->name->startsWith->name->startsWith
ReflectionCheckLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: reflection check linker get guarded invocation:::checkLinkRequest->return
ReflectionCheckLinker#isReflectiveCheckNeeded(Class, boolean)::: reflection check linker is reflective check needed:::if->isAssignableFrom->if->Proxy->isProxyClass->return->return->return->isReflectionClass
ReflectionCheckLinker#checkReflectionAccess(Class, boolean)::: reflection check linker check reflection access:::global->Context->getGlobal->cf->global->getClassFilter->if->isReflectiveCheckNeeded->throw->typeError->sm->System->getSecurityManager->if->isReflectiveCheckNeeded->checkReflectionPermission
ReflectionCheckLinker#checkLinkRequest(LinkRequest)::: reflection check linker check link request:::global->Context->getGlobal->cf->global->getClassFilter->if->throw->typeError->sm->System->getSecurityManager->if->self->request->getReceiver->if->Modifier->getModifiers->isPublic->desc->request->getCallSiteDescriptor->if->NashornCallSiteDescriptor->getOperand->equals->NashornCallSiteDescriptor->contains->if->Context->isAccessibleClass->isReflectionClass->return->checkReflectionPermission
ReflectionCheckLinker#checkReflectionPermission(SecurityManager)::: reflection check linker check reflection permission:::sm->new->RuntimePermission->checkPermission

jdk.nashorn.internal.runtime.linker.AdaptationException#getAdaptationResult()->AdaptationResult::: adaptation exception get adaptation result
jdk.nashorn.internal.runtime.linker.AdaptationResult#getOutcome()->Outcome::: adaptation result get outcome
jdk.nashorn.internal.runtime.linker.AdaptationResult#typeError()->ECMAException::: adaptation result type error
jdk.nashorn.internal.runtime.linker.Bootstrap#getExposedLinkers()->List:::Returns a list of exposed nashorn dynalink linkers.
jdk.nashorn.internal.runtime.linker.Bootstrap#createDynamicLinker(ClassLoader, int)->DynamicLinker:::Creates a Nashorn dynamic linker with the given app class loader.
jdk.nashorn.internal.runtime.linker.Bootstrap#getBeanLinkerForClass(Class)->TypeBasedGuardingDynamicLinker:::Returns a dynamic linker for the specific Java class using beans semantics.
jdk.nashorn.internal.runtime.linker.Bootstrap#isCallable(Object)->boolean:::Returns if the given object is a "callable"
jdk.nashorn.internal.runtime.linker.Bootstrap#isStrictCallable(Object)->boolean:::Returns true if the given object is a strict callable
jdk.nashorn.internal.runtime.linker.Bootstrap#isDynamicMethod(Object)->boolean:::Returns if the given object is a dynalink Dynamic method
jdk.nashorn.internal.runtime.linker.Bootstrap#isFunctionalInterfaceObject(Object)->boolean:::Returns if the given object is an instance of an interface annotated with java.lang.FunctionalInterface
jdk.nashorn.internal.runtime.linker.Bootstrap#bootstrap(Lookup, String, MethodType, int)->CallSite:::Create a call site and link it for Nashorn
jdk.nashorn.internal.runtime.linker.Bootstrap#createDynamicInvoker(String, int, Class, Class...)->MethodHandle:::Returns a dynamic invoker for a specified dynamic operation using the public lookup
jdk.nashorn.internal.runtime.linker.Bootstrap#createDynamicCallInvoker(Class, Class...)->MethodHandle:::Returns a dynamic invoker for the NashornCallSiteDescriptor#CALL operation using the public lookup.
jdk.nashorn.internal.runtime.linker.Bootstrap#createDynamicInvoker(String, int, MethodType)->MethodHandle:::Returns a dynamic invoker for a specified dynamic operation using the public lookup
jdk.nashorn.internal.runtime.linker.Bootstrap#bindCallable(Object, Object, Object[])->Object:::Binds any object Nashorn can use as a [[Callable]] to a receiver and optionally arguments.
jdk.nashorn.internal.runtime.linker.Bootstrap#createSuperAdapter(Object)->Object:::Creates a super-adapter for an adapter, that is, an adapter to the adapter that allows invocation of superclass methods on it.
jdk.nashorn.internal.runtime.linker.Bootstrap#checkReflectionAccess(Class, boolean)->void:::If the given class is a reflection-specific class (anything in java.lang.reflect and java.lang.invoke package, as well a Class and any subclass of ClassLoader) and there is a security manager in the system, then it checks the nashorn.JavaReflection RuntimePermission.
jdk.nashorn.internal.runtime.linker.Bootstrap#getLinkerServices()->LinkerServices:::Returns the Nashorn's internally used dynamic linker's services object
jdk.nashorn.internal.runtime.linker.Bootstrap#asTypeSafeReturn(GuardedInvocation, LinkerServices, CallSiteDescriptor)->GuardedInvocation:::Takes a guarded invocation, and ensures its method and guard conform to the type of the call descriptor, using all type conversions allowed by the linker's services
jdk.nashorn.internal.runtime.linker.BoundCallable#getCallable()->Object::: bound callable get callable
jdk.nashorn.internal.runtime.linker.BoundCallable#getBoundThis()->Object::: bound callable get bound this
jdk.nashorn.internal.runtime.linker.BoundCallable#getBoundArgs()->Object[]::: bound callable get bound args
jdk.nashorn.internal.runtime.linker.BoundCallable#bind(Object[])->BoundCallable::: bound callable bind
jdk.nashorn.internal.runtime.linker.BoundCallable#toString()->String::: bound callable to string
jdk.nashorn.internal.runtime.linker.BoundCallableLinker#canLinkType(Class)->boolean::: bound callable linker can link type
jdk.nashorn.internal.runtime.linker.BoundCallableLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: bound callable linker get guarded invocation
jdk.nashorn.internal.runtime.linker.BrowserJSObjectLinker#canLinkType(Class)->boolean::: browser object linker can link type
jdk.nashorn.internal.runtime.linker.BrowserJSObjectLinker#canLinkTypeStatic(Class)->boolean::: browser object linker can link type static
jdk.nashorn.internal.runtime.linker.BrowserJSObjectLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: browser object linker get guarded invocation
jdk.nashorn.internal.runtime.linker.ClassAndLoader#createPermAccCtxt(String...)->AccessControlContext::: class and loader create perm acc ctxt
jdk.nashorn.internal.runtime.linker.ClassAndLoader#getRepresentativeClass()->Class::: class and loader get representative class
jdk.nashorn.internal.runtime.linker.ClassAndLoader#canSee(ClassAndLoader)->boolean::: class and loader can see
jdk.nashorn.internal.runtime.linker.ClassAndLoader#getLoader()->ClassLoader::: class and loader get loader
jdk.nashorn.internal.runtime.linker.ClassAndLoader#getRetrievedLoader()->ClassLoader::: class and loader get retrieved loader
jdk.nashorn.internal.runtime.linker.ClassAndLoader#equals(Object)->boolean::: class and loader equals
jdk.nashorn.internal.runtime.linker.ClassAndLoader#hashCode()->int::: class and loader hash code
jdk.nashorn.internal.runtime.linker.ClassAndLoader#getDefiningClassAndLoader(Class[])->ClassAndLoader:::Given a list of types that define the superclass/interfaces for an adapter class, returns a single type from the list that will be used to attach the adapter to its ClassValue
jdk.nashorn.internal.runtime.linker.ClassAndLoader#getDefiningClassAndLoaderPrivileged(Class[])->ClassAndLoader::: class and loader get defining class and loader privileged
jdk.nashorn.internal.runtime.linker.InvokeByName#getName()->String:::Returns the name of the function retrieved through this invoker.
jdk.nashorn.internal.runtime.linker.InvokeByName#getGetter()->MethodHandle:::Returns the property getter that can be invoked on an object to retrieve the function object that will be subsequently invoked by the invoker returned by #getInvoker().
jdk.nashorn.internal.runtime.linker.InvokeByName#getInvoker()->MethodHandle:::Returns the function invoker that can be used to invoke a function object previously retrieved by invoking the getter retrieved with #getGetter() on the target object.
jdk.nashorn.internal.runtime.linker.JavaAdapterBytecodeGenerator#createAdapterClassLoader()->JavaAdapterClassLoader::: java adapter bytecode generator create adapter class loader
jdk.nashorn.internal.runtime.linker.JavaAdapterBytecodeGenerator#isAutoConvertibleFromFunction()->boolean::: java adapter bytecode generator is auto convertible from function
jdk.nashorn.internal.runtime.linker.JavaAdapterClassLoader#generateClass(ClassLoader, ProtectionDomain)->StaticClass:::Loads the generated adapter class into the JVM.
jdk.nashorn.internal.runtime.linker.JavaAdapterFactory#getAdapterClassFor(Class[], ScriptObject, MethodHandles.Lookup)->StaticClass:::Returns an adapter class for the specified original types
jdk.nashorn.internal.runtime.linker.JavaAdapterFactory#getConstructor(Class, Class, MethodHandles.Lookup)->MethodHandle:::Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of ScriptObject, ScriptFunction, or Object, and returns an instance of the adapter for the target type
jdk.nashorn.internal.runtime.linker.JavaAdapterFactory#isAutoConvertibleFromFunction(Class)->boolean:::Returns whether an instance of the specified class/interface can be generated from a ScriptFunction
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#getCallThis(ScriptFunction, Object)->Object:::Given a script function used as a delegate for a SAM adapter, figure out the right object to use as its "this" when called.
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#notAnObject(Object)->void:::Throws a "not.an.object" type error
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#checkFunction(Object, String)->ScriptFunction:::Checks if the passed object, which is supposed to be a callee retrieved through applying the GET_METHOD_PROPERTY operation on the delegate, is a ScriptFunction, or null or undefined
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#getClassOverrides()->ScriptObject:::Returns a thread-local JS object used to define methods for the adapter class being initialized on the current thread
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#invokeNoPermissions(MethodHandle, Object)->void:::Takes a method handle and an argument to it, and invokes the method handle passing it the argument
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#setGlobal(ScriptObject)->Runnable:::Set the current global scope to that of the adapter global
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#getNonNullGlobal()->ScriptObject:::Get the current non-null global scope
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#hasOwnToString(ScriptObject)->boolean:::Returns true if the object has its own toString function
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#unwrapMirror(Object, boolean)->ScriptObject:::Returns the ScriptObject or Global field value from a ScriptObjectMirror using reflection.
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#bootstrap(Lookup, String, MethodType, int)->CallSite:::Delegate to Bootstrap#bootstrap(Lookup, String, MethodType, int).
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#setClassOverrides(ScriptObject)->void::: java adapter services set class overrides
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#exportReturnValue(Object)->Object:::Invoked when returning Object from an adapted method to filter out internal Nashorn objects that must not be seen by the callers
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#toCharPrimitive(Object)->char:::Invoked to convert a return value of a delegate function to primitive char
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#wrapThrowable(Throwable)->RuntimeException:::Returns a new RuntimeException wrapping the passed throwable
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#unsupported()->UnsupportedOperationException:::Creates and returns a new UnsupportedOperationException
jdk.nashorn.internal.runtime.linker.JavaAdapterServices#createArrayBootstrap(MethodHandles.Lookup, String, MethodType)->CallSite:::A bootstrap method used to collect invocation arguments into an Object array
jdk.nashorn.internal.runtime.linker.JavaArgumentConverters#getConverter(Class)->MethodHandle::: java argument converters get converter
jdk.nashorn.internal.runtime.linker.JavaArgumentConverters#toCharPrimitive(Object)->char::: java argument converters to char primitive
jdk.nashorn.internal.runtime.linker.JavaArgumentConverters#toString(Object)->String::: java argument converters to string
jdk.nashorn.internal.runtime.linker.JavaSuperAdapter#getAdapter()->Object::: java super adapter get adapter
jdk.nashorn.internal.runtime.linker.JavaSuperAdapterLinker#canLinkType(Class)->boolean::: java super adapter linker can link type
jdk.nashorn.internal.runtime.linker.JavaSuperAdapterLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: java super adapter linker get guarded invocation
jdk.nashorn.internal.runtime.linker.JSObjectLinker#canLinkType(Class)->boolean::: object linker can link type
jdk.nashorn.internal.runtime.linker.JSObjectLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: object linker get guarded invocation
jdk.nashorn.internal.runtime.linker.LinkerCallSite#newLinkerCallSite(MethodHandles.Lookup, String, MethodType, int)->LinkerCallSite:::Construct a new linker call site.
jdk.nashorn.internal.runtime.linker.LinkerCallSite#toString()->String::: linker call site to string
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getNashornDescriptor()->NashornCallSiteDescriptor:::Get the descriptor for this callsite
jdk.nashorn.internal.runtime.linker.LinkerCallSite#relink(GuardedInvocation, MethodHandle)->void::: linker call site relink
jdk.nashorn.internal.runtime.linker.LinkerCallSite#resetAndRelink(GuardedInvocation, MethodHandle)->void::: linker call site reset and relink
jdk.nashorn.internal.runtime.linker.LinkerCallSite#increaseMissCount(String, Object)->Object:::Instrumentation - increase the miss count when a callsite misses
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getMaxChainLength()->int::: linker call site get max chain length
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getCount()->long:::Get the callsite count
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getMissCount()->long:::Get the callsite miss count
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getMissSamplingPercentage()->int:::Get given miss sampling percentage for sampler
jdk.nashorn.internal.runtime.linker.LinkerCallSite#getMissCounts(PrintWriter)->void:::Dump the miss counts collected so far to a given output stream
jdk.nashorn.internal.runtime.linker.NameCodec#encode(String)->String:::Encodes ("mangles") an unencoded symbolic name.
jdk.nashorn.internal.runtime.linker.NameCodec#decode(String)->String:::Decodes ("demangles") an encoded symbolic name.
jdk.nashorn.internal.runtime.linker.NashornBeansLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: nashorn beans linker get guarded invocation
jdk.nashorn.internal.runtime.linker.NashornBeansLinker#getGuardedInvocation(GuardingDynamicLinker, LinkRequest, LinkerServices)->GuardedInvocation:::Delegates to the specified linker but injects its linker services wrapper so that it will apply all special conversions that this class does.
jdk.nashorn.internal.runtime.linker.NashornBeansLinker#exportArgument(Object, boolean)->Object::: nashorn beans linker export argument
jdk.nashorn.internal.runtime.linker.NashornBeansLinker#getFunctionalInterfaceMethodName(Class)->String::: nashorn beans linker get functional interface method name
jdk.nashorn.internal.runtime.linker.NashornBeansLinker#createHiddenObjectFilter()->MethodHandleTransformer::: nashorn beans linker create hidden object filter
jdk.nashorn.internal.runtime.linker.NashornBottomLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: nashorn bottom linker get guarded invocation
jdk.nashorn.internal.runtime.linker.NashornBottomLinker#linkMissingBeanMember(LinkRequest, LinkerServices)->MethodHandle::: nashorn bottom linker link missing bean member
jdk.nashorn.internal.runtime.linker.NashornBottomLinker#convertToType(Class, Class, Supplier)->GuardedInvocation::: nashorn bottom linker convert to type
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#appendFlags(int, StringBuilder)->void:::Function used by NashornTextifier to represent call site flags in human readable form
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getOperationName(int)->String:::Given call site flags, returns the operation name encoded in them.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#get(MethodHandles.Lookup, String, MethodType, int)->NashornCallSiteDescriptor:::Retrieves a Nashorn call site descriptor with the specified values
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getLookupInternal(CallSiteDescriptor)->Lookup::: nashorn call site descriptor get lookup internal
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#equals(Object)->boolean::: nashorn call site descriptor equals
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#hashCode()->int::: nashorn call site descriptor hash code
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getOperand(CallSiteDescriptor)->String:::Returns the named operand in the passed descriptor's operation
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isMethodFirstOperation(CallSiteDescriptor)->boolean:::Returns true if the operation of the call descriptor is operating on the method namespace first.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#hasStandardNamespace(CallSiteDescriptor)->boolean:::Returns true if there's a namespace operation in the call descriptor and it is operating on at least one StandardNamespace
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getBaseOperation(CallSiteDescriptor)->Operation:::Returns the base operation in this call site descriptor after unwrapping it from both a named operation and a namespace operation.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getStandardOperation(CallSiteDescriptor)->StandardOperation:::Returns the standard operation that is the base operation in this call site descriptor.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#contains(CallSiteDescriptor, StandardOperation, StandardNamespace)->boolean:::Returns true if the passed call site descriptor contains the specified standard operation on the specified standard namespace.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getFunctionErrorMessage(CallSiteDescriptor, Object)->String:::Returns the error message to be used when CALL or NEW is used on a non-function.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getFlags(CallSiteDescriptor)->int:::Returns the Nashorn-specific flags for this call site descriptor.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isScope(CallSiteDescriptor)->boolean:::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_SCOPE flag set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isFastScope(CallSiteDescriptor)->boolean:::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_FAST_SCOPE flag set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isStrict(CallSiteDescriptor)->boolean:::Returns true if this descriptor is a Nashorn call site descriptor and has the #CALLSITE_STRICT flag set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isApplyToCall(CallSiteDescriptor)->boolean:::Returns true if this is an apply call that we try to call as a "call"
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isOptimistic(CallSiteDescriptor)->boolean:::Is this an optimistic call site
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isDeclaration(CallSiteDescriptor)->boolean:::Does this callsite contain a declaration for its target?
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isStrictFlag(int)->boolean:::Returns true if flags has the #CALLSITE_STRICT bit set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isScopeFlag(int)->boolean:::Returns true if flags has the #CALLSITE_SCOPE bit set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isDeclaration(int)->boolean:::Returns true if flags has the #CALLSITE_DECLARE bit set.
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#getProgramPoint(CallSiteDescriptor)->int:::Get a program point from a descriptor (must be optimistic)
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isProfile()->boolean::: nashorn call site descriptor is profile
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isTrace()->boolean::: nashorn call site descriptor is trace
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isTraceMisses()->boolean::: nashorn call site descriptor is trace misses
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isTraceEnterExit()->boolean::: nashorn call site descriptor is trace enter exit
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isTraceObjects()->boolean::: nashorn call site descriptor is trace objects
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#isOptimistic()->boolean::: nashorn call site descriptor is optimistic
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#changeMethodTypeInternal(MethodType)->CallSiteDescriptor::: nashorn call site descriptor change method type internal
jdk.nashorn.internal.runtime.linker.NashornCallSiteDescriptor#changeOperationInternal(Operation)->CallSiteDescriptor::: nashorn call site descriptor change operation internal
jdk.nashorn.internal.runtime.linker.NashornGuards#explicitInstanceOfCheck(CallSiteDescriptor, LinkRequest)->boolean:::Given a callsite descriptor and a link request, determine whether we should use an instanceof check explicitly for the guard if needed, or if we should link it with a try/catch ClassCastException combinator as its relink criteria - i.e
jdk.nashorn.internal.runtime.linker.NashornGuards#getScriptObjectGuard()->MethodHandle:::Returns a guard that does an instanceof ScriptObject check on the receiver
jdk.nashorn.internal.runtime.linker.NashornGuards#getNotJSObjectGuard()->MethodHandle:::Get the guard that checks if an item is not a JSObject
jdk.nashorn.internal.runtime.linker.NashornGuards#getScriptObjectGuard(boolean)->MethodHandle:::Returns a guard that does an instanceof ScriptObject check on the receiver
jdk.nashorn.internal.runtime.linker.NashornGuards#getMapGuard(PropertyMap, boolean)->MethodHandle:::Get the guard that checks if a PropertyMap is equal to a known map, using reference comparison
jdk.nashorn.internal.runtime.linker.NashornGuards#needsGuard(Property, CallSiteDescriptor)->boolean:::Determine whether the given callsite needs a guard.
jdk.nashorn.internal.runtime.linker.NashornGuards#getGuard(ScriptObject, Property, CallSiteDescriptor, boolean)->MethodHandle:::Get the guard for a property access
jdk.nashorn.internal.runtime.linker.NashornGuards#getIdentityGuard(ScriptObject)->MethodHandle:::Get a guard that checks referential identity of the current object.
jdk.nashorn.internal.runtime.linker.NashornGuards#getStringGuard()->MethodHandle:::Get a guard that checks if in item is a JS string.
jdk.nashorn.internal.runtime.linker.NashornGuards#getNumberGuard()->MethodHandle:::Get a guard that checks if in item is a JS number.
jdk.nashorn.internal.runtime.linker.NashornGuards#combineGuards(MethodHandle, MethodHandle)->MethodHandle:::Combine two method handles of type (Object)boolean using logical AND.
jdk.nashorn.internal.runtime.linker.NashornLinker#canLinkType(Class)->boolean:::Returns true if ScriptObject is assignable from type, or it is Undefined.
jdk.nashorn.internal.runtime.linker.NashornLinker#canLinkTypeStatic(Class)->boolean::: nashorn linker can link type static
jdk.nashorn.internal.runtime.linker.NashornLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: nashorn linker get guarded invocation
jdk.nashorn.internal.runtime.linker.NashornLinker#convertToType(Class, Class, Supplier)->GuardedInvocation::: nashorn linker convert to type
jdk.nashorn.internal.runtime.linker.NashornLinker#isAbstractClass(Class)->boolean:::Utility method used by few other places in the code
jdk.nashorn.internal.runtime.linker.NashornLinker#compareConversion(Class, Class, Class)->Comparison::: nashorn linker compare conversion
jdk.nashorn.internal.runtime.linker.NashornPrimitiveLinker#canLinkType(Class)->boolean::: nashorn primitive linker can link type
jdk.nashorn.internal.runtime.linker.NashornPrimitiveLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: nashorn primitive linker get guarded invocation
jdk.nashorn.internal.runtime.linker.NashornPrimitiveLinker#convertToType(Class, Class, Supplier)->GuardedInvocation:::This implementation of type converter factory will pretty much allow implicit conversions of anything to anything else that's allowed among JavaScript primitive types (string to number, boolean to string, etc.)
jdk.nashorn.internal.runtime.linker.NashornPrimitiveLinker#compareConversion(Class, Class, Class)->Comparison:::Implements the somewhat involved prioritization of JavaScript primitive types conversions
jdk.nashorn.internal.runtime.linker.NashornStaticClassLinker#canLinkType(Class)->boolean::: nashorn static class linker can link type
jdk.nashorn.internal.runtime.linker.NashornStaticClassLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: nashorn static class linker get guarded invocation
jdk.nashorn.internal.runtime.linker.PrimitiveLookup#lookupPrimitive(LinkRequest, Class, ScriptObject, MethodHandle, MethodHandle)->GuardedInvocation:::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.
jdk.nashorn.internal.runtime.linker.PrimitiveLookup#lookupPrimitive(LinkRequest, MethodHandle, ScriptObject, MethodHandle, MethodHandle)->GuardedInvocation:::Returns a guarded invocation representing the linkage for a dynamic operation on a primitive Java value.
jdk.nashorn.internal.runtime.linker.ReflectionCheckLinker#canLinkType(Class)->boolean::: reflection check linker can link type
jdk.nashorn.internal.runtime.linker.ReflectionCheckLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: reflection check linker get guarded invocation
jdk.nashorn.internal.runtime.linker.ReflectionCheckLinker#checkReflectionAccess(Class, boolean)->void::: reflection check linker check reflection access

com.sun.management.GarbageCollectionNotificationInfo#getGcName()->String:::Returns the name of the garbage collector used to perform the collection
com.sun.management.GarbageCollectionNotificationInfo#getGcAction()->String:::Returns the action performed by the garbage collector
com.sun.management.GarbageCollectionNotificationInfo#getGcCause()->String:::Returns the cause of the garbage collection
com.sun.management.GarbageCollectionNotificationInfo#getGcInfo()->GcInfo:::Returns the GC information related to the last garbage collection
com.sun.management.GarbageCollectionNotificationInfo#from(CompositeData)->GarbageCollectionNotificationInfo:::Returns a GarbageCollectionNotificationInfo object represented by the given CompositeData
com.sun.management.GarbageCollectionNotificationInfo#toCompositeData(CompositeType)->CompositeData::: garbage collection notification info to composite data
com.sun.management.GarbageCollectorMXBean#getLastGcInfo()->GcInfo:::Returns the GC information about the most recent GC
com.sun.management.GcInfo#getId()->long:::Returns the identifier of this garbage collection which is the number of collections that this collector has done.
com.sun.management.GcInfo#getStartTime()->long:::Returns the start time of this GC in milliseconds since the Java virtual machine was started.
com.sun.management.GcInfo#getEndTime()->long:::Returns the end time of this GC in milliseconds since the Java virtual machine was started.
com.sun.management.GcInfo#getDuration()->long:::Returns the elapsed time of this GC in milliseconds.
com.sun.management.GcInfo#getMemoryUsageBeforeGc()->Map:::Returns the memory usage of all memory pools at the beginning of this GC
com.sun.management.GcInfo#getMemoryUsageAfterGc()->Map:::Returns the memory usage of all memory pools at the end of this GC
com.sun.management.GcInfo#from(CompositeData)->GcInfo:::Returns a GcInfo object represented by the given CompositeData
com.sun.management.GcInfo#containsKey(String)->boolean::: gc info contains key
com.sun.management.GcInfo#containsValue(Object)->boolean::: gc info contains value
com.sun.management.GcInfo#equals(Object)->boolean::: gc info equals
com.sun.management.GcInfo#get(String)->Object::: gc info get
com.sun.management.GcInfo#getAll(String[])->Object[]::: gc info get all
com.sun.management.GcInfo#getCompositeType()->CompositeType::: gc info get composite type
com.sun.management.GcInfo#hashCode()->int::: gc info hash code
com.sun.management.GcInfo#toString()->String::: gc info to string
com.sun.management.GcInfo#values()->Collection::: gc info values
com.sun.management.GcInfo#toCompositeData(CompositeType)->CompositeData:::Return the CompositeData representation of this GcInfo, including any GC-specific attributes
com.sun.management.HotSpotDiagnosticMXBean#dumpHeap(String, boolean)->void:::Dumps the heap to the outputFile file in the same format as the hprof heap dump
com.sun.management.HotSpotDiagnosticMXBean#getDiagnosticOptions()->java.util.List:::Returns a list of VMOption objects for all diagnostic options
com.sun.management.HotSpotDiagnosticMXBean#getVMOption(String)->VMOption:::Returns a VMOption object for a VM option of the given name.
com.sun.management.HotSpotDiagnosticMXBean#setVMOption(String, String)->void:::Sets a VM option of the given name to the specified value
com.sun.management.OperatingSystemMXBean#getCommittedVirtualMemorySize()->long:::Returns the amount of virtual memory that is guaranteed to be available to the running process in bytes, or -1 if this operation is not supported.
com.sun.management.OperatingSystemMXBean#getTotalSwapSpaceSize()->long:::Returns the total amount of swap space in bytes.
com.sun.management.OperatingSystemMXBean#getFreeSwapSpaceSize()->long:::Returns the amount of free swap space in bytes.
com.sun.management.OperatingSystemMXBean#getProcessCpuTime()->long:::Returns the CPU time used by the process on which the Java virtual machine is running in nanoseconds
com.sun.management.OperatingSystemMXBean#getFreePhysicalMemorySize()->long:::Returns the amount of free physical memory in bytes.
com.sun.management.OperatingSystemMXBean#getTotalPhysicalMemorySize()->long:::Returns the total amount of physical memory in bytes.
com.sun.management.OperatingSystemMXBean#getSystemCpuLoad()->double:::Returns the "recent cpu usage" for the whole system
com.sun.management.OperatingSystemMXBean#getProcessCpuLoad()->double:::Returns the "recent cpu usage" for the Java Virtual Machine process
com.sun.management.ThreadMXBean#getThreadCpuTime(long[])->long[]:::Returns the total CPU time for each thread whose ID is in the input array ids in nanoseconds
com.sun.management.ThreadMXBean#getThreadUserTime(long[])->long[]:::Returns the CPU time that each thread whose ID is in the input array ids has executed in user mode in nanoseconds
com.sun.management.ThreadMXBean#getThreadAllocatedBytes(long)->long:::Returns an approximation of the total amount of memory, in bytes, allocated in heap memory for the thread of the specified ID
com.sun.management.ThreadMXBean#getThreadAllocatedBytes(long[])->long[]:::Returns an approximation of the total amount of memory, in bytes, allocated in heap memory for each thread whose ID is in the input array ids
com.sun.management.ThreadMXBean#isThreadAllocatedMemorySupported()->boolean:::Tests if the Java virtual machine implementation supports thread memory allocation measurement.
com.sun.management.ThreadMXBean#isThreadAllocatedMemoryEnabled()->boolean:::Tests if thread memory allocation measurement is enabled.
com.sun.management.ThreadMXBean#setThreadAllocatedMemoryEnabled(boolean)->void:::Enables or disables thread memory allocation measurement
com.sun.management.UnixOperatingSystemMXBean#getOpenFileDescriptorCount()->long:::Returns the number of open file descriptors.
com.sun.management.UnixOperatingSystemMXBean#getMaxFileDescriptorCount()->long:::Returns the maximum number of file descriptors.
com.sun.management.VMOption#getName()->String:::Returns the name of this VM option.
com.sun.management.VMOption#getValue()->String:::Returns the value of this VM option at the time when this VMOption was created
com.sun.management.VMOption#getOrigin()->Origin:::Returns the origin of the value of this VM option
com.sun.management.VMOption#isWriteable()->boolean:::Tests if this VM option is writeable
com.sun.management.VMOption#toString()->String::: option to string
com.sun.management.VMOption#from(CompositeData)->VMOption:::Returns a VMOption object represented by the given CompositeData

sun.rmi.transport.tcp.TCPChannel#getEndpoint()->Endpoint:::Return the endpoint for this channel.
sun.rmi.transport.tcp.TCPChannel#newConnection()->Connection:::Supplies a connection to the endpoint of the address space for which this is a channel
sun.rmi.transport.tcp.TCPChannel#free(Connection, boolean)->void:::Free the connection generated by this channel.
sun.rmi.transport.tcp.TCPChannel#shedCache()->void:::Closes all the connections in the cache, whether timed out or not.
sun.rmi.transport.tcp.ConnectionAcceptor#startNewAcceptor()->void:::Start a new thread to accept connections.
sun.rmi.transport.tcp.ConnectionAcceptor#accept(Connection)->void:::Add connection to queue of connections to be accepted.
sun.rmi.transport.tcp.ConnectionAcceptor#run()->void:::Give transport next accepted connection, when available.
sun.rmi.transport.tcp.TCPConnection#getOutputStream()->OutputStream:::Gets the output stream for this connection
sun.rmi.transport.tcp.TCPConnection#releaseOutputStream()->void:::Release the output stream for this connection.
sun.rmi.transport.tcp.TCPConnection#getInputStream()->InputStream:::Gets the input stream for this connection.
sun.rmi.transport.tcp.TCPConnection#releaseInputStream()->void:::Release the input stream for this connection.
sun.rmi.transport.tcp.TCPConnection#isReusable()->boolean:::Determine if this connection can be used for multiple operations
sun.rmi.transport.tcp.TCPConnection#setExpiration(long)->void:::Set the expiration time of this connection.
sun.rmi.transport.tcp.TCPConnection#setLastUseTime(long)->void:::Set the timestamp at which this connection was last used successfully
sun.rmi.transport.tcp.TCPConnection#expired(long)->boolean:::Returns true if the timeout has expired on this connection; otherwise returns false.
sun.rmi.transport.tcp.TCPConnection#isDead()->boolean:::Probes the connection to see if it still alive and connected to a responsive server
sun.rmi.transport.tcp.TCPConnection#close()->void:::Close the connection.
sun.rmi.transport.tcp.TCPConnection#getChannel()->Channel:::Returns the channel for this connection.
sun.rmi.transport.tcp.TCPDirectSocketFactory#createSocket(String, int)->Socket::: direct socket factory create socket
sun.rmi.transport.tcp.TCPDirectSocketFactory#createServerSocket(int)->ServerSocket::: direct socket factory create server socket
sun.rmi.transport.tcp.TCPEndpoint#getLocalEndpoint(int)->TCPEndpoint:::Get an endpoint for the local address space on specified port
sun.rmi.transport.tcp.TCPEndpoint#getLocalEndpoint(int, RMIClientSocketFactory, RMIServerSocketFactory)->TCPEndpoint::: endpoint get local endpoint
sun.rmi.transport.tcp.TCPEndpoint#setLocalHost(String)->void:::Set the local host name, if currently unknown.
sun.rmi.transport.tcp.TCPEndpoint#setDefaultPort(int, RMIClientSocketFactory, RMIServerSocketFactory)->void:::Set the port of the (shared) default endpoint object
sun.rmi.transport.tcp.TCPEndpoint#getOutboundTransport()->Transport:::Returns transport for making connections to remote endpoints; (here, the default transport at port 0 is used).
sun.rmi.transport.tcp.TCPEndpoint#shedConnectionCaches()->void:::Release idle outbound connections to reduce demand on I/O resources
sun.rmi.transport.tcp.TCPEndpoint#exportObject(Target)->void:::Export the object to accept incoming calls.
sun.rmi.transport.tcp.TCPEndpoint#getChannel()->Channel:::Returns a channel for this (remote) endpoint.
sun.rmi.transport.tcp.TCPEndpoint#getHost()->String:::Returns address for endpoint
sun.rmi.transport.tcp.TCPEndpoint#getPort()->int:::Returns the port for this endpoint
sun.rmi.transport.tcp.TCPEndpoint#getListenPort()->int:::Returns the port that this endpoint's inbound transport listens on, if this endpoint was created as a server endpoint (using getLocalEndpoint)
sun.rmi.transport.tcp.TCPEndpoint#getInboundTransport()->Transport:::Returns the transport for incoming connections to this endpoint, if this endpoint was created as a server endpoint (using getLocalEndpoint).
sun.rmi.transport.tcp.TCPEndpoint#getClientSocketFactory()->RMIClientSocketFactory:::Get the client socket factory associated with this endpoint.
sun.rmi.transport.tcp.TCPEndpoint#getServerSocketFactory()->RMIServerSocketFactory:::Get the server socket factory associated with this endpoint.
sun.rmi.transport.tcp.TCPEndpoint#toString()->String:::Return string representation for endpoint.
sun.rmi.transport.tcp.TCPEndpoint#hashCode()->int::: endpoint hash code
sun.rmi.transport.tcp.TCPEndpoint#equals(Object)->boolean::: endpoint equals
sun.rmi.transport.tcp.TCPEndpoint#write(ObjectOutput)->void:::Write endpoint to output stream.
sun.rmi.transport.tcp.TCPEndpoint#read(ObjectInput)->TCPEndpoint:::Get the endpoint from the input stream.
sun.rmi.transport.tcp.TCPEndpoint#writeHostPortFormat(DataOutput)->void:::Write endpoint to output stream in older format used by UnicastRef for JDK1.1 compatibility.
sun.rmi.transport.tcp.TCPEndpoint#readHostPortFormat(DataInput)->TCPEndpoint:::Create a new endpoint from input stream data.
sun.rmi.transport.tcp.TCPEndpoint#newSocket()->Socket:::Open and return new client socket connection to endpoint.
sun.rmi.transport.tcp.TCPEndpoint#newServerSocket()->ServerSocket:::Return new server socket to listen for connections on this endpoint.
sun.rmi.transport.tcp.TCPTransport#shedConnectionCaches()->void:::Closes all cached connections in every channel subordinated to this transport
sun.rmi.transport.tcp.TCPTransport#getChannel(Endpoint)->TCPChannel:::Returns a Channel that generates connections to the endpoint ep
sun.rmi.transport.tcp.TCPTransport#free(Endpoint)->void:::Removes the Channel that generates connections to the endpoint ep.
sun.rmi.transport.tcp.TCPTransport#exportObject(Target)->void:::Export the object so that it can accept incoming calls.
sun.rmi.transport.tcp.TCPTransport#targetUnexported()->void::: transport target unexported
sun.rmi.transport.tcp.TCPTransport#checkAcceptPermission(AccessControlContext)->void:::Verify that the current access control context has permission to accept the connection being dispatched by the current thread.
sun.rmi.transport.tcp.TCPTransport#handleMessages(Connection, boolean)->void:::handleMessages decodes transport operations and handles messages appropriately
sun.rmi.transport.tcp.TCPTransport#getClientHost()->String:::Returns the client host for the current thread's connection

TCPChannel#getEndpoint():::Return the endpoint for this channel.:::return
TCPChannel#newConnection():::Supplies a connection to the endpoint of the address space for which this is a channel:::conn->do->synchronized->elementPos->freeList->size->if->checkConnectPermission->freeList->get->freeList->remove->if->if->conn->isDead->log->return->this->free->while->return->createConnection
TCPChannel#free(Connection, boolean):::Free the connection generated by this channel.:::if->return->if->conn->isReusable->lastuse->System->currentTimeMillis->tcpConnection->log->synchronized->freeList->add->if->log->scheduler->new->Runnable->scheduleWithFixedDelay->tcpConnection->setLastUseTime->tcpConnection->setExpiration->else->log->try->conn->close->catch->finally
TCPChannel#shedCache():::Closes all the connections in the cache, whether timed out or not.:::conn->synchronized->freeList->freeList->size->new->ConnectionArr->toArray->freeList->clear->for->i
ConnectionAcceptor#startNewAcceptor():::Start a new thread to accept connections.:::t->AccessController->new->NewThreadAction->doPrivileged->t->start
ConnectionAcceptor#accept(Connection):::Add connection to queue of connections to be accepted.:::synchronized->queue->add->queue->notify
ConnectionAcceptor#run():::Give transport next accepted connection, when available.:::conn->synchronized->while->queue->size->try->queue->wait->catch->finally->startNewAcceptor->queue->remove->transport->handleMessages
TCPConnection#getOutputStream():::Gets the output stream for this connection:::if->socket->getOutputStream->new->BufferedOutputStream->return
TCPConnection#releaseOutputStream():::Release the output stream for this connection.:::if->out->flush
TCPConnection#getInputStream():::Gets the input stream for this connection.:::if->socket->getInputStream->new->BufferedInputStream->return
TCPConnection#releaseInputStream():::Release the input stream for this connection.:::
TCPConnection#isReusable():::Determine if this connection can be used for multiple operations:::return
TCPConnection#setExpiration(long):::Set the expiration time of this connection.:::
TCPConnection#setLastUseTime(long):::Set the timestamp at which this connection was last used successfully:::
TCPConnection#expired(long):::Returns true if the timeout has expired on this connection; otherwise returns false.:::return
TCPConnection#isDead():::Probes the connection to see if it still alive and connected to a responsive server:::i->o->start->System->currentTimeMillis->if->return->try->getInputStream->getOutputStream->catch->return->finally->response->try->o->write->o->flush->i->read->catch->log->log->return->finally->if->System->currentTimeMillis->return->if->isLoggable->log->return
TCPConnection#close():::Close the connection.:::log->if->socket->close->else->in->close->out->close
TCPConnection#getChannel():::Returns the channel for this connection.:::return
TCPEndpoint#getLocalEndpoint(int):::Get an endpoint for the local address space on specified port:::return->getLocalEndpoint
TCPEndpoint#setLocalHost(String):::Set the local host name, if currently unknown.:::synchronized->if->if->isLoggable->log->foreach->localEndpoints->values->synchronized->foreach
TCPEndpoint#setDefaultPort(int, RMIClientSocketFactory, RMIServerSocketFactory):::Set the port of the (shared) default endpoint object:::endpointKey->new->TCPEndpoint->synchronized->epList->localEndpoints->get->synchronized->size->epList->size->lastEp->epList->getLast->foreach->if->epList->clear->epList->add->newEndpointKey->new->TCPEndpoint->localEndpoints->put->if->isLoggable->log
TCPEndpoint#getOutboundTransport():::Returns transport for making connections to remote endpoints; (here, the default transport at port 0 is used).:::localEndpoint->getLocalEndpoint->return
TCPEndpoint#shedConnectionCaches():::Release idle outbound connections to reduce demand on I/O resources:::foreach->allKnownTransports->transport->shedConnectionCaches
TCPEndpoint#exportObject(Target):::Export the object to accept incoming calls.:::transport->exportObject
TCPEndpoint#getChannel():::Returns a channel for this (remote) endpoint.:::return->getOutboundTransport->getChannel
TCPEndpoint#getHost():::Returns address for endpoint:::return
TCPEndpoint#getPort():::Returns the port for this endpoint:::return
TCPEndpoint#getListenPort():::Returns the port that this endpoint's inbound transport listens on, if this endpoint was created as a server endpoint (using getLocalEndpoint):::return
TCPEndpoint#getInboundTransport():::Returns the transport for incoming connections to this endpoint, if this endpoint was created as a server endpoint (using getLocalEndpoint).:::return
TCPEndpoint#getClientSocketFactory():::Get the client socket factory associated with this endpoint.:::return
TCPEndpoint#getServerSocketFactory():::Get the server socket factory associated with this endpoint.:::return
TCPEndpoint#toString():::Return string representation for endpoint.:::return
TCPEndpoint#write(ObjectOutput):::Write endpoint to output stream.:::if->out->writeByte->out->writeUTF->out->writeInt->else->out->writeByte->out->writeUTF->out->writeInt->out->writeObject
TCPEndpoint#read(ObjectInput):::Get the endpoint from the input stream.:::host->port->csf->format->in->readByte->switch->in->readUTF->in->readInt->break->in->readUTF->in->readInt->in->readObject->if->Proxy->csf->getClass->isProxyClass->throw->new->IOException->break->throw->new->IOException->return->new->TCPEndpoint
TCPEndpoint#writeHostPortFormat(DataOutput):::Write endpoint to output stream in older format used by UnicastRef for JDK1.1 compatibility.:::if->throw->new->InternalError->out->writeUTF->out->writeInt
TCPEndpoint#readHostPortFormat(DataInput):::Create a new endpoint from input stream data.:::host->in->readUTF->port->in->readInt->return->new->TCPEndpoint
TCPEndpoint#newSocket():::Open and return new client socket connection to endpoint.:::if->isLoggable->log->socket->try->clientFactory->if->chooseFactory->clientFactory->createSocket->catch->throw->new->java.rmi.UnknownHostException->throw->new->java.rmi.ConnectException->try->TCPEndpoint->shedConnectionCaches->catch->finally->throw->new->ConnectIOException->finally->try->socket->setTcpNoDelay->catch->finally->try->socket->setKeepAlive->catch->finally->return
TCPEndpoint#newServerSocket():::Return new server socket to listen for connections on this endpoint.:::if->isLoggable->log->serverFactory->if->chooseFactory->server->serverFactory->createServerSocket->if->server->getLocalPort->setDefaultPort->return
TCPTransport#shedConnectionCaches():::Closes all cached connections in every channel subordinated to this transport:::channels->synchronized->channelTable->values->size->new->ArrayList<TCPChannel>->foreach->channelTable->values->ch->ref->get->if->channels->add->foreach->channel->shedCache
TCPTransport#getChannel(Endpoint):::Returns a Channel that generates connections to the endpoint ep:::ch->if->synchronized->ref->channelTable->get->if->ref->get->if->tcpEndpoint->new->TCPChannel->channelTable->new->WeakReference<TCPChannel>->put->return
TCPTransport#free(Endpoint):::Removes the Channel that generates connections to the endpoint ep.:::if->synchronized->ref->channelTable->remove->if->channel->ref->get->if->channel->shedCache
TCPTransport#exportObject(Target):::Export the object so that it can accept incoming calls.:::synchronized->listen->ok->try->super->exportObject->catch->finally->if->synchronized->decrementExportCount
TCPTransport#checkAcceptPermission(AccessControlContext):::Verify that the current access control context has permission to accept the connection being dispatched by the current thread.:::sm->System->getSecurityManager->if->return->h->threadConnectionHandler->get->if->throw->new->Error->h->checkAcceptPermission
TCPTransport#handleMessages(Connection, boolean):::handleMessages decodes transport operations and handles messages appropriately:::port->getEndpoint->getPort->try->in->conn->getInputStream->new->DataInputStream->do->op->in->read->if->if->tcpLog->isLoggable->tcpLog->log->break->if->tcpLog->isLoggable->tcpLog->log->switch->call->new->StreamRemoteCall->if->serviceCall->return->break->out->conn->getOutputStream->new->DataOutputStream->out->writeByte->conn->releaseOutputStream->break->DGCAckHandler->UID->read->received->break->throw->new->IOException->while->catch->if->tcpLog->isLoggable->tcpLog->log->finally->try->conn->close->catch->finally
TCPTransport#getClientHost():::Returns the client host for the current thread's connection:::h->threadConnectionHandler->get->if->return->h->getClientHost->else->throw->new->ServerNotActiveException

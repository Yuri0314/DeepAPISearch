ArrayNotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int):::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber:::logger->trace->if->isDisposed->synchronized->return->earliestSequenceNumber->nextSequenceNumber->new->TargetedNotificationArr->new->NotificationResult->if->logger->trace->throw->new->IllegalArgumentException->if->logger->debugOn->logger->trace->if->nextSequenceNumber->msg->nextSequenceNumber->logger->trace->throw->new->IllegalArgumentException->endTime->System->currentTimeMillis->if->if->logger->debugOn->logger->debug->earliestSeq->nextSeq->notifs->new->ArrayList<TargetedNotification>->while->logger->debug->candidate->synchronized->if->earliestSequenceNumber->if->logger->debugOn->logger->debug->if->logger->debug->else->earliestSequenceNumber->if->logger->trace->break->if->nextSequenceNumber->notificationAt->if->try->ServerNotifForwarder->candidate->getObjectName->checkMBeanPermission->catch->if->logger->debugOn->logger->debug->continue->finally->if->logger->debugOn->logger->debug->logger->debug->else->if->notifs->size->logger->debug->break->toWait->System->currentTimeMillis->if->logger->debug->break->if->isDisposed->if->logger->debugOn->logger->debug->return->earliestSequenceNumber->nextSequenceNumber->new->TargetedNotificationArr->new->NotificationResult->if->logger->debugOn->logger->debug->wait->continue->name->candidate->getObjectName->notif->candidate->getNotification->matchedNotifs->new->ArrayList<TargetedNotification>->logger->debug->filter->apply->if->matchedNotifs->size->if->logger->debug->break->if->logger->debugOn->logger->debug->notifs->addAll->nnotifs->notifs->size->resultNotifs->new->TargetedNotificationArr->notifs->toArray->nr->new->NotificationResult->if->logger->debugOn->logger->nr->toString->debug->logger->trace->return
ClientCommunicatorAdmin#gotIOException(IOException):::Called by a client to inform of getting an IOException.:::restart
ClientCommunicatorAdmin#checkConnection():::Called by this class to check a client connection.:::
ClientCommunicatorAdmin#doStart():::Tells a client to re-start again.:::
ClientCommunicatorAdmin#doStop():::Tells a client to stop because failing to call checkConnection.:::
ClientCommunicatorAdmin#terminate():::Terminates this object.:::synchronized->if->return->lock->notifyAll->if->checker->stop
ClientNotifForwarder#fetchNotifs(long, int, long):::Called to fetch notifications from a server.:::
ClientNotifForwarder#lostNotifs(String, long):::Used to send out a notification about lost notifs:::
ClientNotifForwarder#postReconnection(ClientListenerInfo[]):::Called after reconnection is finished:::if->return->while->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->trace->logger->traceOn->len->for->i->notifyAll->if->Thread->currentThread->try->addListenerForMBeanRemovedNotif->catch->msg->if->logger->traceOn->logger->trace->finally->else->while->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->if->init->else->if->infoList->size->init
NotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int):::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber:::
NotificationBuffer#dispose():::Discard this buffer.:::
NotificationBufferFilter#apply(List, ObjectName, Notification):::Add the given notification coming from the given MBean to the list iff it matches this filter's rules.:::
ServerCommunicatorAdmin#reqIncoming():::Tells that a new request message is received:::if->logger->traceOn->logger->trace->synchronized->if->logger->warning->return
ServerCommunicatorAdmin#rspOutgoing():::Tells that a response is sent out for a received request.:::if->logger->traceOn->logger->trace->synchronized->if->System->currentTimeMillis->logtime->lock->notify->return
ServerCommunicatorAdmin#doStop():::Called by this class to tell an implementation to do stop.:::
ServerCommunicatorAdmin#terminate():::Terminates this object:::if->logger->traceOn->logger->trace->synchronized->if->return->lock->notify
ServerNotifForwarder#checkMBeanPermission(ObjectName, String):::Explicitly check the MBeanPermission for the current access control context.:::checkMBeanPermission

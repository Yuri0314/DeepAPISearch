ArrayNotificationBuffer#getNotificationBuffer(MBeanServer, Map)::: array notification buffer get notification buffer:::if->Collections->emptyMap->queueSize->EnvHelp->getNotifBufferSize->buf->create->sharer->synchronized->mbsToBuffer->get->if->new->ArrayNotificationBuffer->mbsToBuffer->put->buf->new->ShareBuffer->if->buf->createListeners->return
ArrayNotificationBuffer#removeNotificationBuffer(MBeanServer)::: array notification buffer remove notification buffer:::synchronized->mbsToBuffer->remove
ArrayNotificationBuffer#addSharer(ShareBuffer)::: array notification buffer add sharer:::synchronized->synchronized->if->sharer->getSize->sharer->getSize->resize->sharers->add
ArrayNotificationBuffer#removeSharer(ShareBuffer)::: array notification buffer remove sharer:::empty->synchronized->sharers->remove->sharers->isEmpty->if->removeNotificationBuffer->else->max->foreach->bufsize->buf->getSize->if->if->resize->if->synchronized->notifyAll->destroyListeners
ArrayNotificationBuffer#resize(int)::: array notification buffer resize:::if->return->while->queue->size->dropNotification->queue->resize
ArrayNotificationBuffer.ShareBuffer#fetchNotifications(NotificationBufferFilter, long, long, int)::: share buffer fetch notifications:::buf->return->buf->fetchNotifications
ArrayNotificationBuffer.ShareBuffer#dispose()::: share buffer dispose:::ArrayNotificationBuffer.this->removeSharer
ArrayNotificationBuffer.ShareBuffer#getSize()::: share buffer get size:::return
ArrayNotificationBuffer#isDisposed()::: array notification buffer is disposed:::return
ArrayNotificationBuffer#dispose()::: array notification buffer dispose:::throw->new->UnsupportedOperationException
ArrayNotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int):::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber:::logger->trace->if->isDisposed->synchronized->return->earliestSequenceNumber->nextSequenceNumber->new->TargetedNotificationArr->new->NotificationResult->if->logger->trace->throw->new->IllegalArgumentException->if->logger->debugOn->logger->trace->if->nextSequenceNumber->msg->nextSequenceNumber->logger->trace->throw->new->IllegalArgumentException->endTime->System->currentTimeMillis->if->if->logger->debugOn->logger->debug->earliestSeq->nextSeq->notifs->new->ArrayList<TargetedNotification>->while->logger->debug->candidate->synchronized->if->earliestSequenceNumber->if->logger->debugOn->logger->debug->if->logger->debug->else->earliestSequenceNumber->if->logger->trace->break->if->nextSequenceNumber->notificationAt->if->try->ServerNotifForwarder->candidate->getObjectName->checkMBeanPermission->catch->if->logger->debugOn->logger->debug->continue->finally->if->logger->debugOn->logger->debug->logger->debug->else->if->notifs->size->logger->debug->break->toWait->System->currentTimeMillis->if->logger->debug->break->if->isDisposed->if->logger->debugOn->logger->debug->return->earliestSequenceNumber->nextSequenceNumber->new->TargetedNotificationArr->new->NotificationResult->if->logger->debugOn->logger->debug->wait->continue->name->candidate->getObjectName->notif->candidate->getNotification->matchedNotifs->new->ArrayList<TargetedNotification>->logger->debug->filter->apply->if->matchedNotifs->size->if->logger->debug->break->if->logger->debugOn->logger->debug->notifs->addAll->nnotifs->notifs->size->resultNotifs->new->TargetedNotificationArr->notifs->toArray->nr->new->NotificationResult->if->logger->debugOn->logger->nr->toString->debug->logger->trace->return
ArrayNotificationBuffer#earliestSequenceNumber()::: array notification buffer earliest sequence number:::return
ArrayNotificationBuffer#nextSequenceNumber()::: array notification buffer next sequence number:::return
ArrayNotificationBuffer#addNotification(NamedNotification)::: array notification buffer add notification:::if->logger->traceOn->logger->notif->toString->trace->while->queue->size->dropNotification->if->logger->debugOn->logger->debug->queue->add->if->logger->debugOn->logger->debug->notifyAll
ArrayNotificationBuffer#dropNotification()::: array notification buffer drop notification:::queue->remove
ArrayNotificationBuffer#notificationAt(long)::: array notification buffer notification at:::index->if->msg->logger->trace->throw->new->IllegalArgumentException->return->queue->get
ArrayNotificationBuffer.NamedNotification#getObjectName()::: named notification get object name:::return
ArrayNotificationBuffer.NamedNotification#getNotification()::: named notification get notification:::return
ArrayNotificationBuffer.NamedNotification#toString()::: named notification to string:::return
ArrayNotificationBuffer#createListeners()::: array notification buffer create listeners:::logger->debug->synchronized->new->HashSet<ObjectName>->try->addNotificationListener->logger->debug->catch->msg->re->new->IllegalArgumentException->EnvHelp->initCause->logger->fine->logger->debug->throw->finally->names->queryNames->new->HashSet<ObjectName>->synchronized->names->addAll->foreach->addBufferListener->logger->debug
ArrayNotificationBuffer#addBufferListener(ObjectName)::: array notification buffer add buffer listener:::checkNoLocks->if->logger->debugOn->logger->name->toString->debug->try->addNotificationListener->catch->logger->trace->finally
ArrayNotificationBuffer#removeBufferListener(ObjectName)::: array notification buffer remove buffer listener:::checkNoLocks->if->logger->debugOn->logger->name->toString->debug->try->removeNotificationListener->catch->logger->trace->finally
ArrayNotificationBuffer#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: array notification buffer add notification listener:::try->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->catch->throw->extractException->finally
ArrayNotificationBuffer#removeNotificationListener(ObjectName, NotificationListener)::: array notification buffer remove notification listener:::try->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->catch->throw->extractException->finally
ArrayNotificationBuffer#queryNames(ObjectName, QueryExp)::: array notification buffer query names:::act->new->PrivilegedAction<Set<ObjectName>>->try->return->AccessController->doPrivileged->catch->logger->fine->logger->debug->throw->finally
ArrayNotificationBuffer#isInstanceOf(MBeanServer, ObjectName, String)::: array notification buffer is instance of:::act->new->PrivilegedExceptionAction<Boolean>->try->return->AccessController->doPrivileged->catch->logger->fine->logger->debug->return->finally
ArrayNotificationBuffer#createdNotification(MBeanServerNotification)::: array notification buffer created notification:::shouldEqual->if->n->getType->equals->logger->n->getType->warning->return->name->n->getMBeanName->if->logger->debugOn->logger->debug->synchronized->if->createdDuringQuery->add->return->if->isInstanceOf->addBufferListener->if->isDisposed->removeBufferListener
ArrayNotificationBuffer.BufferListener#handleNotification(Notification, Object)::: buffer listener handle notification:::if->logger->debugOn->logger->debug->name->new->NamedNotification->addNotification
ArrayNotificationBuffer.BroadcasterQuery#apply(ObjectName)::: broadcaster query apply:::mbs->QueryEval->getMBeanServer->return->isInstanceOf
ArrayNotificationBuffer#destroyListeners()::: array notification buffer destroy listeners:::checkNoLocks->logger->debug->try->removeNotificationListener->catch->logger->warning->finally->names->queryNames->foreach->if->logger->debugOn->logger->debug->removeBufferListener->logger->debug
ArrayNotificationBuffer#checkNoLocks()::: array notification buffer check no locks:::if->Thread->holdsLock->Thread->holdsLock->logger->warning
ArrayNotificationBuffer#extractException(Exception):::Iterate until we extract the real exception from a stack of PrivilegedActionExceptions.:::while->getException->return
ArrayQueue#resize(int)::: array queue resize:::size->size->if->throw->new->IndexOutOfBoundsException->if->return->newqueue->newArray->for->i
ArrayQueue#newArray(int)::: array queue new array:::return->new->ObjectArr
ArrayQueue#add(T)::: array queue add:::newtail->if->throw->new->IndexOutOfBoundsException->return
ArrayQueue#remove(int)::: array queue remove:::if->throw->new->IllegalArgumentException->if->throw->new->IndexOutOfBoundsException->removed->return
ArrayQueue#get(int)::: array queue get:::size->size->if->msg->throw->new->IndexOutOfBoundsException->index->return
ArrayQueue#size()::: array queue size:::diff->if->return
ClientCommunicatorAdmin#gotIOException(IOException):::Called by a client to inform of getting an IOException.:::restart
ClientCommunicatorAdmin#checkConnection():::Called by this class to check a client connection.:::
ClientCommunicatorAdmin#doStart():::Tells a client to re-start again.:::
ClientCommunicatorAdmin#doStop():::Tells a client to stop because failing to call checkConnection.:::
ClientCommunicatorAdmin#terminate():::Terminates this object.:::synchronized->if->return->lock->notifyAll->if->checker->stop
ClientCommunicatorAdmin#restart(IOException)::: client communicator admin restart:::synchronized->if->throw->new->IOException->else->if->throw->else->if->while->try->lock->wait->catch->iioe->ire->toString->new->InterruptedIOException->EnvHelp->initCause->throw->finally->if->throw->new->IOException->else->if->throw->return->else->lock->notifyAll->try->doStart->synchronized->if->throw->new->IOException->lock->notifyAll->return->catch->logger->warning->logger->debug->synchronized->if->throw->new->IOException->lock->notifyAll->try->doStop->catch->finally->terminate->throw->finally
ClientCommunicatorAdmin.Checker#run()::: checker run:::Thread->currentThread->while->myThread->isInterrupted->try->Thread->sleep->catch->finally->if->myThread->isInterrupted->break->try->checkConnection->catch->synchronized->if->myThread->isInterrupted->break->EnvHelp->getCause->if->try->gotIOException->catch->logger->warning->logger->warning->logger->debug->break->finally->else->logger->warning->logger->debug->break->finally->if->logger->traceOn->logger->trace
ClientCommunicatorAdmin.Checker#stop()::: checker stop:::if->Thread->currentThread->myThread->interrupt
ClientListenerInfo#getObjectName()::: client listener info get object name:::return
ClientListenerInfo#getListenerID()::: client listener info get listener d:::return
ClientListenerInfo#getNotificationFilter()::: client listener info get notification filter:::return
ClientListenerInfo#getListener()::: client listener info get listener:::return
ClientListenerInfo#getHandback()::: client listener info get handback:::return
ClientListenerInfo#getDelegationSubject()::: client listener info get delegation subject:::return
ClientListenerInfo#sameAs(ObjectName)::: client listener info same as:::return->getObjectName->equals
ClientListenerInfo#sameAs(ObjectName, NotificationListener)::: client listener info same as:::return->getObjectName->equals->getListener
ClientListenerInfo#sameAs(ObjectName, NotificationListener, NotificationFilter, Object)::: client listener info same as:::return->getObjectName->equals->getListener->getNotificationFilter->getHandback
ClientNotifForwarder.LinearExecutor#execute(Runnable)::: linear executor execute:::if->throw->new->IllegalArgumentException->if->while->r->synchronized->if->return->else->r->run->new->Thread->thread->setDaemon->thread->start
ClientNotifForwarder#fetchNotifs(long, int, long):::Called to fetch notifications from a server.:::
ClientNotifForwarder#addListenerForMBeanRemovedNotif()::: client notif forwarder add listener for bean removed notif:::
ClientNotifForwarder#removeListenerForMBeanRemovedNotif(Integer)::: client notif forwarder remove listener for bean removed notif:::
ClientNotifForwarder#lostNotifs(String, long):::Used to send out a notification about lost notifs:::
ClientNotifForwarder#addNotificationListener(Integer, ObjectName, NotificationListener, NotificationFilter, Object, Subject)::: client notif forwarder add notification listener:::if->logger->traceOn->logger->trace->infoList->new->ClientListenerInfo->put->init
ClientNotifForwarder#getListenerIds(ObjectName, NotificationListener)::: client notif forwarder get listener ids:::ids->new->ArrayList<Integer>->values->infoList->values->new->ArrayList<ClientListenerInfo>->for->i->values->size->if->ids->isEmpty->throw->new->ListenerNotFoundException->return->ids->new->IntegerArr->toArray
ClientNotifForwarder#getListenerId(ObjectName, NotificationListener, NotificationFilter, Object)::: client notif forwarder get listener id:::id->values->infoList->values->new->ArrayList<ClientListenerInfo>->for->i->values->size->if->throw->new->ListenerNotFoundException->return
ClientNotifForwarder#removeNotificationListener(ObjectName, NotificationListener)::: client notif forwarder remove notification listener:::beforeRemove->if->logger->traceOn->logger->trace->liIds->getListenerIds->for->i->return
ClientNotifForwarder#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: client notif forwarder remove notification listener:::if->logger->traceOn->logger->trace->beforeRemove->liId->getListenerId->infoList->remove->return
ClientNotifForwarder#removeNotificationListener(ObjectName)::: client notif forwarder remove notification listener:::if->logger->traceOn->logger->trace->ids->new->ArrayList<Integer>->values->infoList->values->new->ArrayList<ClientListenerInfo>->for->i->values->size->return->ids->new->IntegerArr->toArray
ClientNotifForwarder#preReconnection()::: client notif forwarder pre reconnection:::if->throw->new->IOException->tmp->infoList->values->new->ClientListenerInfoArr->toArray->infoList->clear->return
ClientNotifForwarder#postReconnection(ClientListenerInfo[]):::Called after reconnection is finished:::if->return->while->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->trace->logger->traceOn->len->for->i->notifyAll->if->Thread->currentThread->try->addListenerForMBeanRemovedNotif->catch->msg->if->logger->traceOn->logger->trace->finally->else->while->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->if->init->else->if->infoList->size->init
ClientNotifForwarder#terminate()::: client notif forwarder terminate:::if->return->if->logger->traceOn->logger->trace->if->infoList->clear->setState
ClientNotifForwarder.NotifFetcher#logOnce(String, SecurityException)::: notif fetcher log once:::if->return->logger->config->if->logger->fine
ClientNotifForwarder.NotifFetcher#setContextClassLoader(ClassLoader)::: notif fetcher set context class loader:::ctxt->if->logOnce->throw->new->SecurityException->return->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged
ClientNotifForwarder.NotifFetcher#run()::: notif fetcher run:::previous->if->setContextClassLoader->else->try->doRun->catch->finally->if->setContextClassLoader
ClientNotifForwarder.NotifFetcher#doRun()::: notif fetcher do run:::synchronized->Thread->currentThread->if->setState->nr->if->shouldStop->fetchNotifs->notifs->nr->getTargetedNotifications->len->listeners->myListenerID->missed->synchronized->if->nr->getEarliestSequenceNumber->nr->getNextSequenceNumber->new->HashMap<Integer,ClientListenerInfo>->for->i->if->msg->lostNotifs->logger->trace->for->i->synchronized->if->if->logger->traceOn->logger->trace->if->shouldStop->setState->try->removeListenerForMBeanRemovedNotif->catch->if->logger->traceOn->logger->trace->finally->else->try->executor->execute->catch->if->isRejectedExecutionException->if->new->LinearExecutor->executor->execute->else->throw->finally
ClientNotifForwarder.NotifFetcher#isRejectedExecutionException(Exception)::: notif fetcher is rejected execution exception:::cause->while->if->return->cause->getCause->return
ClientNotifForwarder.NotifFetcher#dispatchNotification(TargetedNotification, Integer, Map)::: notif fetcher dispatch notification:::notif->tn->getNotification->listenerID->tn->getListenerID->if->listenerID->equals->return->li->listeners->get->if->logger->trace->return->l->li->getListener->h->li->getHandback->try->l->handleNotification->catch->msg->logger->trace->finally
ClientNotifForwarder.NotifFetcher#fetchNotifs()::: notif fetcher fetch notifs:::try->nr->ClientNotifForwarder.this->fetchNotifs->if->logger->traceOn->logger->trace->return->catch->logger->trace->return->fetchOneNotif->if->shouldStop->logger->error->logger->debug->return->finally
ClientNotifForwarder.NotifFetcher#fetchOneNotif()::: notif fetcher fetch one notif:::cnf->startSequenceNumber->notFoundCount->result->firstEarliest->while->shouldStop->nr->try->cnf->fetchNotifs->catch->logger->warning->logger->debug->return->if->shouldStop->logger->trace->return->finally->if->shouldStop->return->nr->getNextSequenceNumber->if->nr->getEarliestSequenceNumber->try->cnf->fetchNotifs->catch->logger->e->toString->warning->if->logger->traceOn->logger->trace->if->shouldStop->logger->trace->return->finally->if->msg->lostNotifs->if->result->getNextSequenceNumber->result->getTargetedNotifications->new->NotificationResult->return
ClientNotifForwarder.NotifFetcher#shouldStop()::: notif fetcher should stop:::synchronized->if->return->else->if->infoList->size->setState->return->return
ClientNotifForwarder#setState(int)::: client notif forwarder set state:::if->return->this->notifyAll
ClientNotifForwarder#init(boolean)::: client notif forwarder init:::switch->return->return->throw->new->IOException->if->return->while->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->init->return->if->return->if->logger->traceOn->logger->trace->if->try->nr->fetchNotifs->if->return->nr->getNextSequenceNumber->catch->logger->warning->logger->debug->finally->try->addListenerForMBeanRemovedNotif->catch->msg->if->logger->traceOn->logger->trace->finally->setState->executor->new->NotifFetcher->execute->return->throw->new->IOException
ClientNotifForwarder#beforeRemove():::Import: should not remove a listener during reconnection, the reconnection needs to change the listener list and that will possibly make removal fail.:::while->if->throw->new->IOException->try->wait->catch->ioe->ire->toString->new->IOException->EnvHelp->initCause->throw->finally->if->throw->new->IOException
NotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int):::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber:::
NotificationBuffer#dispose():::Discard this buffer.:::
NotificationBufferFilter#apply(List, ObjectName, Notification):::Add the given notification coming from the given MBean to the list iff it matches this filter's rules.:::
ServerCommunicatorAdmin#reqIncoming():::Tells that a new request message is received:::if->logger->traceOn->logger->trace->synchronized->if->logger->warning->return
ServerCommunicatorAdmin#rspOutgoing():::Tells that a response is sent out for a received request.:::if->logger->traceOn->logger->trace->synchronized->if->System->currentTimeMillis->logtime->lock->notify->return
ServerCommunicatorAdmin#doStop():::Called by this class to tell an implementation to do stop.:::
ServerCommunicatorAdmin#terminate():::Terminates this object:::if->logger->traceOn->logger->trace->synchronized->if->return->lock->notify
ServerCommunicatorAdmin.Timeout#run()::: timeout run:::stopping->synchronized->if->System->currentTimeMillis->logtime->logtime->while->try->while->if->logger->traceOn->logger->trace->lock->wait->if->return->remaining->System->currentTimeMillis->logtime->if->if->logger->traceOn->logger->trace->lock->wait->if->continue->elapsed->System->currentTimeMillis->logtime->if->if->logger->traceOn->logger->trace->logtime->break->catch->logger->warning->logger->debug->return->finally->if->if->logger->traceOn->logger->trace->doStop
ServerCommunicatorAdmin#logtime(String, long)::: server communicator admin logtime:::timelogger->trace
ServerNotifForwarder#addNotificationListener(ObjectName, NotificationFilter)::: server notif forwarder add notification listener:::if->logger->traceOn->logger->trace->checkState->checkMBeanPermission->if->notificationAccessController->getSubject->addNotificationListener->try->instanceOf->AccessController->new->PrivilegedExceptionAction<Boolean>->doPrivileged->if->throw->new->IllegalArgumentException->catch->throw->extractException->finally->id->getListenerID->nn->if->name->getDomain->name->getDomain->equals->try->ObjectName->mbeanServer->getDefaultDomain->name->getKeyPropertyList->getInstance->catch->ioe->mfoe->getMessage->new->IOException->ioe->initCause->throw->finally->synchronized->idaf->new->IdAndFilter->set->listenerMap->get->if->Collections->singleton->else->if->set->size->new->HashSet<IdAndFilter>->set->add->listenerMap->put->return
ServerNotifForwarder#removeNotificationListener(ObjectName, Integer[])::: server notif forwarder remove notification listener:::if->logger->traceOn->logger->trace->checkState->checkMBeanPermission->if->notificationAccessController->getSubject->removeNotificationListener->re->for->i->if->throw
ServerNotifForwarder#removeNotificationListener(ObjectName, Integer)::: server notif forwarder remove notification listener:::if->logger->traceOn->logger->trace->checkState->if->name->isPattern->if->mbeanServer->isRegistered->throw->new->InstanceNotFoundException->synchronized->set->listenerMap->get->idaf->new->IdAndFilter->if->set->contains->throw->new->ListenerNotFoundException->if->set->size->listenerMap->remove->else->set->remove
ServerNotifForwarder.NotifForwarderBufferFilter#apply(List, ObjectName, Notification)::: notif forwarder buffer filter apply:::candidates->synchronized->set->listenerMap->get->if->logger->debug->return->set->size->new->IdAndFilterArr->set->toArray->foreach->nf->idaf->getFilter->if->nf->isNotificationEnabled->logger->debug->tn->idaf->getId->new->TargetedNotification->if->allowNotificationEmission->targetedNotifs->add
ServerNotifForwarder#fetchNotifs(long, long, int)::: server notif forwarder fetch notifs:::if->logger->traceOn->logger->trace->nr->t->Math->min->try->notifBuffer->fetchNotifications->snoopOnUnregister->catch->new->TargetedNotificationArr->new->NotificationResult->finally->if->logger->traceOn->logger->trace->return
ServerNotifForwarder#snoopOnUnregister(NotificationResult)::: server notif forwarder snoop on unregister:::copy->synchronized->delegateSet->listenerMap->get->if->delegateSet->isEmpty->return->new->ArrayList<>->foreach->nr->getTargetedNotifications->id->tn->getListenerID->foreach->if->n->tn->getNotification->if->n->getType->equals->mbsn->gone->mbsn->getMBeanName->synchronized->listenerMap->remove
ServerNotifForwarder#terminate()::: server notif forwarder terminate:::if->logger->traceOn->logger->trace->synchronized->if->return->synchronized->listenerMap->clear->if->logger->traceOn->logger->trace
ServerNotifForwarder#getSubject()::: server notif forwarder get subject:::return->Subject->AccessController->getContext->getSubject
ServerNotifForwarder#checkState()::: server notif forwarder check state:::synchronized->if->throw->new->IOException
ServerNotifForwarder#getListenerID()::: server notif forwarder get listener d:::synchronized->return
ServerNotifForwarder#checkMBeanPermission(ObjectName, String):::Explicitly check the MBeanPermission for the current access control context.:::checkMBeanPermission
ServerNotifForwarder#checkMBeanPermission(MBeanServer, ObjectName, String)::: server notif forwarder check bean permission:::sm->System->getSecurityManager->if->acc->AccessController->getContext->oi->try->AccessController->new->PrivilegedExceptionAction<ObjectInstance>->doPrivileged->catch->throw->extractException->finally->classname->oi->getClassName->perm->new->MBeanPermission->sm->checkPermission
ServerNotifForwarder#allowNotificationEmission(ObjectName, TargetedNotification):::Check if the caller has the right to get the following notifications.:::try->if->checkMBeanPermission->if->notificationAccessController->tn->getNotification->getSubject->fetchNotification->return->catch->if->logger->debugOn->logger->tn->getNotification->debug->return->if->logger->debugOn->logger->tn->getNotification->debug->return->finally
ServerNotifForwarder#extractException(Exception):::Iterate until we extract the real exception from a stack of PrivilegedActionExceptions.:::while->getException->return
ServerNotifForwarder.IdAndFilter#getId()::: id and filter get id:::return
ServerNotifForwarder.IdAndFilter#getFilter()::: id and filter get filter:::return
ServerNotifForwarder.IdAndFilter#hashCode()::: id and filter hash code:::return->id->hashCode
ServerNotifForwarder.IdAndFilter#equals(Object)::: id and filter equals:::return->getId->getId->equals

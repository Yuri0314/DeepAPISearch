com.sun.jmx.remote.internal.ArrayNotificationBuffer#getNotificationBuffer(MBeanServer, Map)->NotificationBuffer::: array notification buffer get notification buffer
com.sun.jmx.remote.internal.ArrayNotificationBuffer#removeNotificationBuffer(MBeanServer)->void::: array notification buffer remove notification buffer
com.sun.jmx.remote.internal.ArrayNotificationBuffer#addSharer(ShareBuffer)->void::: array notification buffer add sharer
com.sun.jmx.remote.internal.ArrayNotificationBuffer#dispose()->void::: array notification buffer dispose
com.sun.jmx.remote.internal.ArrayNotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int)->NotificationResult:::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber
com.sun.jmx.remote.internal.ArrayNotificationBuffer#earliestSequenceNumber()->long::: array notification buffer earliest sequence number
com.sun.jmx.remote.internal.ArrayNotificationBuffer#nextSequenceNumber()->long::: array notification buffer next sequence number
com.sun.jmx.remote.internal.ArrayNotificationBuffer#addNotification(NamedNotification)->void::: array notification buffer add notification
com.sun.jmx.remote.internal.ArrayNotificationBuffer#notificationAt(long)->NamedNotification::: array notification buffer notification at
com.sun.jmx.remote.internal.ArrayQueue#resize(int)->void::: array queue resize
com.sun.jmx.remote.internal.ArrayQueue#add(T)->boolean::: array queue add
com.sun.jmx.remote.internal.ArrayQueue#remove(int)->T::: array queue remove
com.sun.jmx.remote.internal.ArrayQueue#get(int)->T::: array queue get
com.sun.jmx.remote.internal.ArrayQueue#size()->int::: array queue size
com.sun.jmx.remote.internal.ClientCommunicatorAdmin#gotIOException(IOException)->void:::Called by a client to inform of getting an IOException.
com.sun.jmx.remote.internal.ClientCommunicatorAdmin#checkConnection()->void:::Called by this class to check a client connection.
com.sun.jmx.remote.internal.ClientCommunicatorAdmin#doStart()->void:::Tells a client to re-start again.
com.sun.jmx.remote.internal.ClientCommunicatorAdmin#doStop()->void:::Tells a client to stop because failing to call checkConnection.
com.sun.jmx.remote.internal.ClientCommunicatorAdmin#terminate()->void:::Terminates this object.
com.sun.jmx.remote.internal.ClientListenerInfo#getObjectName()->ObjectName::: client listener info get object name
com.sun.jmx.remote.internal.ClientListenerInfo#getListenerID()->Integer::: client listener info get listener d
com.sun.jmx.remote.internal.ClientListenerInfo#getNotificationFilter()->NotificationFilter::: client listener info get notification filter
com.sun.jmx.remote.internal.ClientListenerInfo#getListener()->NotificationListener::: client listener info get listener
com.sun.jmx.remote.internal.ClientListenerInfo#getHandback()->Object::: client listener info get handback
com.sun.jmx.remote.internal.ClientListenerInfo#getDelegationSubject()->Subject::: client listener info get delegation subject
com.sun.jmx.remote.internal.ClientListenerInfo#sameAs(ObjectName)->boolean::: client listener info same as
com.sun.jmx.remote.internal.ClientListenerInfo#sameAs(ObjectName, NotificationListener)->boolean::: client listener info same as
com.sun.jmx.remote.internal.ClientListenerInfo#sameAs(ObjectName, NotificationListener, NotificationFilter, Object)->boolean::: client listener info same as
com.sun.jmx.remote.internal.ClientNotifForwarder#fetchNotifs(long, int, long)->NotificationResult:::Called to fetch notifications from a server.
com.sun.jmx.remote.internal.ClientNotifForwarder#addListenerForMBeanRemovedNotif()->Integer::: client notif forwarder add listener for bean removed notif
com.sun.jmx.remote.internal.ClientNotifForwarder#removeListenerForMBeanRemovedNotif(Integer)->void::: client notif forwarder remove listener for bean removed notif
com.sun.jmx.remote.internal.ClientNotifForwarder#lostNotifs(String, long)->void:::Used to send out a notification about lost notifs
com.sun.jmx.remote.internal.ClientNotifForwarder#addNotificationListener(Integer, ObjectName, NotificationListener, NotificationFilter, Object, Subject)->void::: client notif forwarder add notification listener
com.sun.jmx.remote.internal.ClientNotifForwarder#getListenerIds(ObjectName, NotificationListener)->Integer[]::: client notif forwarder get listener ids
com.sun.jmx.remote.internal.ClientNotifForwarder#getListenerId(ObjectName, NotificationListener, NotificationFilter, Object)->Integer::: client notif forwarder get listener id
com.sun.jmx.remote.internal.ClientNotifForwarder#removeNotificationListener(ObjectName, NotificationListener)->Integer[]::: client notif forwarder remove notification listener
com.sun.jmx.remote.internal.ClientNotifForwarder#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->Integer::: client notif forwarder remove notification listener
com.sun.jmx.remote.internal.ClientNotifForwarder#removeNotificationListener(ObjectName)->Integer[]::: client notif forwarder remove notification listener
com.sun.jmx.remote.internal.ClientNotifForwarder#preReconnection()->ClientListenerInfo[]::: client notif forwarder pre reconnection
com.sun.jmx.remote.internal.ClientNotifForwarder#postReconnection(ClientListenerInfo[])->void:::Called after reconnection is finished
com.sun.jmx.remote.internal.ClientNotifForwarder#terminate()->void::: client notif forwarder terminate
com.sun.jmx.remote.internal.NotificationBuffer#fetchNotifications(NotificationBufferFilter, long, long, int)->NotificationResult:::Fetch notifications that match the given listeners.  The operation only considers notifications with a sequence number at least startSequenceNumber
com.sun.jmx.remote.internal.NotificationBuffer#dispose()->void:::Discard this buffer.
com.sun.jmx.remote.internal.NotificationBufferFilter#apply(List, ObjectName, Notification)->void:::Add the given notification coming from the given MBean to the list iff it matches this filter's rules.
com.sun.jmx.remote.internal.ServerCommunicatorAdmin#reqIncoming()->boolean:::Tells that a new request message is received
com.sun.jmx.remote.internal.ServerCommunicatorAdmin#rspOutgoing()->boolean:::Tells that a response is sent out for a received request.
com.sun.jmx.remote.internal.ServerCommunicatorAdmin#doStop()->void:::Called by this class to tell an implementation to do stop.
com.sun.jmx.remote.internal.ServerCommunicatorAdmin#terminate()->void:::Terminates this object
com.sun.jmx.remote.internal.ServerNotifForwarder#addNotificationListener(ObjectName, NotificationFilter)->Integer::: server notif forwarder add notification listener
com.sun.jmx.remote.internal.ServerNotifForwarder#removeNotificationListener(ObjectName, Integer[])->void::: server notif forwarder remove notification listener
com.sun.jmx.remote.internal.ServerNotifForwarder#removeNotificationListener(ObjectName, Integer)->void::: server notif forwarder remove notification listener
com.sun.jmx.remote.internal.ServerNotifForwarder.NotifForwarderBufferFilter#apply(List, ObjectName, Notification)->void::: notif forwarder buffer filter apply
com.sun.jmx.remote.internal.ServerNotifForwarder#fetchNotifs(long, long, int)->NotificationResult::: server notif forwarder fetch notifs
com.sun.jmx.remote.internal.ServerNotifForwarder#terminate()->void::: server notif forwarder terminate
com.sun.jmx.remote.internal.ServerNotifForwarder#checkMBeanPermission(ObjectName, String)->void:::Explicitly check the MBeanPermission for the current access control context.
com.sun.jmx.remote.internal.ServerNotifForwarder#checkMBeanPermission(MBeanServer, ObjectName, String)->void::: server notif forwarder check bean permission

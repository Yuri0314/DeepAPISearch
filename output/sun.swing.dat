AccumulativeRunnable#run(List):::Equivalent to Runnable.run method with the accumulated arguments to process.:::
AccumulativeRunnable#run():::This implementation calls {@code run(List<T> args) mehtod with the list of accumulated arguments.:::flush->run
AccumulativeRunnable#add(T...):::appends arguments and sends this Runnable for the execution if needed:::isSubmitted->if->new->ArrayList<T>->Collections->addAll->if->submit
AccumulativeRunnable#submit():::Sends this Runnable for the execution   This method is to be executed only from add method:::SwingUtilities->invokeLater
BakedArrayList#cacheHashCode():::Caches the hash code:::for->counter->size
CachedPainter#paint(Component, Graphics, int, int, int, int, Object...):::Renders the cached image to the passed in Graphic:::if->return->synchronized->paint0
CachedPainter#paintToImage(Component, Image, Graphics, int, int, Object[]):::Paints the representation to cache to the supplied Graphics.:::
CachedPainter#paintImage(Component, Graphics, int, int, int, int, Image, Object[]):::Paints the image to the specified location.:::g->drawImage
CachedPainter#createImage(Component, int, int, GraphicsConfiguration, Object[]):::Creates the image to cache:::if->return->new->BufferedImage->return->config->createCompatibleVolatileImage
CachedPainter#flush():::Clear the image cache:::synchronized->getClass->getCache->flush
DefaultLayoutStyle#isLabelAndNonlabel(JComponent, JComponent, int):::Returns true if the classes identify a JLabel and a non-JLabel along the horizontal axis.:::if->c1Label->c2Label->return->return
DefaultLayoutStyle#getButtonGap(JComponent, JComponent, int, int):::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border:::getButtonGap->if->flipDirection->getButtonGap->if->return->return
DefaultLayoutStyle#getButtonGap(JComponent, int, int):::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border:::getButtonGap->return->Math->max
DefaultLayoutStyle#getButtonGap(JComponent, int):::If c is a check box or radio button, and the border is not painted this returns the inset along the specified axis.:::classID->c->getUIClassID->if->isBorderPainted->border->c->getBorder->if->return->getInset->return
DefaultLayoutStyle#getIndent(JComponent, int):::Returns the amount to indent the specified component if it's a JCheckBox or JRadioButton:::classID->c->getUIClassID->if->button->insets->c->getInsets->icon->getIcon->gap->button->getIconTextGap->if->isLeftAligned->return->icon->getIconWidth->else->if->isRightAligned->return->icon->getIconWidth->return
DefaultLookup#setDefaultLookup(DefaultLookup):::Sets the DefaultLookup instance to use for the current AppContext:::synchronized->if->return->else->if->new->DefaultLookup->AppContext->getAppContext->put->Thread->currentThread
FilePane#getActions():::Fetches the command list for the FilePane:::if->actionList->new->ArrayList<Action>->action->actionList->new->FilePaneAction->add->actionList->new->FilePaneAction->add->actionList->new->FilePaneAction->add->fileChooserUIAccessor->getApproveSelectionAction->if->actionList->add->fileChooserUIAccessor->getChangeToParentDirectoryAction->if->actionList->add->getNewFolderAction->if->actionList->add->getViewTypeAction->if->actionList->add->getViewTypeAction->if->actionList->add->actionList->actionList->size->new->ActionArr->toArray->return->Arrays->copyOf
FilePane#createListSelectionListener():::Creates a selection listener for the list of files and directories.:::return->fileChooserUIAccessor->createListSelectionListener
FilePane#isDirectorySelected():::Property to remember whether a directory is currently selected in the UI.:::return->fileChooserUIAccessor->isDirectorySelected
FilePane#getDirectory():::Property to remember the directory that is currently selected in the UI.:::return->fileChooserUIAccessor->getDirectory
FilePane#usesShellFolder(JFileChooser):::Returns true if specified FileChooser should use ShellFolder:::prop->chooser->getClientProperty->return->chooser->getFileSystemView->FileSystemView->getFileSystemView->equals->prop->booleanValue
ImageCache#getImage(Object, GraphicsConfiguration, int, int, Object[]):::Returns the cached Image, or null, for the specified arguments.:::entry->getEntry->return->entry->getImage
ImageCache#setImage(Object, GraphicsConfiguration, int, int, Object[], Image):::Sets the cached image for the specified constraints.:::entry->getEntry->entry->setImage
JLightweightFrame#setContent(LightweightContent):::Sets the LightweightContent instance for this frame:::if->println->return->content->getComponent->d->getPreferredSize->content->preferredSizeChanged->getMaximumSize->content->maximumSizeChanged->getMinimumSize->content->minimumSizeChanged->initInterior
LightweightContent#getComponent():::The client application overrides this method to return the JComponent instance which the JLightweightFrame container will paint as its lightweight content:::
LightweightContent#paintLock():::JLightweightFrame calls this method to notify the client application that it acquires the paint lock:::
LightweightContent#paintUnlock():::JLightweightFrame calls this method to notify the client application that it releases the paint lock:::
LightweightContent#imageBufferReset(int[], int, int, int, int, int, int):::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer:::imageBufferReset
LightweightContent#imageBufferReset(int[], int, int, int, int, int, double, double):::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer:::Math->round->imageBufferReset
LightweightContent#imageBufferReset(int[], int, int, int, int, int):::The default implementation for #imageBufferReset uses a hard-coded value of 1 for the scale factor:::imageBufferReset
LightweightContent#imageReshaped(int, int, int, int):::JLightweightFrame calls this method to notify the client application that the content image bounds have been changed within the image's pixel buffer.:::
LightweightContent#imageUpdated(int, int, int, int):::JLightweightFrame calls this method to notify the client application that a part of the content image, or the whole image has been updated:::
LightweightContent#focusGrabbed():::JLightweightFrame calls this method to notify the client application that the frame has grabbed focus.:::
LightweightContent#focusUngrabbed():::JLightweightFrame calls this method to notify the client application that the frame has ungrabbed focus.:::
LightweightContent#preferredSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content preferred size has changed.:::
LightweightContent#maximumSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content maximum size has changed.:::
LightweightContent#minimumSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content minimum size has changed.:::
LightweightContent#setCursor(Cursor):::JLightweightFrame calls this method to notify the client application that in needs to set a cursor:::
LightweightContent#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener):::Create a drag gesture recognizer for the lightweight frame.:::return
LightweightContent#createDragSourceContextPeer(DragGestureEvent):::Create a drag source context peer for the lightweight frame.:::return
LightweightContent#addDropTarget(DropTarget):::Adds a drop target to the lightweight frame.:::
LightweightContent#removeDropTarget(DropTarget):::Removes a drop target from the lightweight frame.:::
MenuItemLayoutHelper#calcMaxValue(Object, int):::Calculates and returns maximal value through specified parent component client property.:::maxValue->getParentIntProperty->if->if->miParent->putClientProperty->return->else->return
MenuItemLayoutHelper#getParentIntProperty(Object):::Returns parent client property as int.:::value->if->miParent->getClientProperty->if->return
MenuItemLayoutHelper#isColumnLayout(boolean, int, int, int):::Answers should we do column layout for a menu item or not:::if->return->if->if->return->if->return->else->if->return->if->return->return
MenuItemLayoutHelper#layoutMenuItem():::Layout icon, text, check icon, accelerator text and arrow icon in the viewRect and return their positions:::lr->createLayoutResult->prepareForLayout->if->isColumnLayout->if->isLeftToRight->getLTRColumnAlignment->doLTRColumnLayout->else->getRTLColumnAlignment->doRTLColumnLayout->else->if->isLeftToRight->getLTRColumnAlignment->doLTRComplexLayout->else->getRTLColumnAlignment->doRTLComplexLayout->alignAccCheckAndArrowVertically->return
MenuItemLayoutHelper#getMenuItemParent(JMenuItem):::Returns parent of this component if it is not a top-level menu Otherwise returns null.:::parent->menuItem->getParent->if->isTopLevelMenu->return->else->return
MenuItemLayoutHelper#max(int...):::Finds and returns maximal integer value in the given array.:::maxValue->foreach->if->return
MenuItemLayoutHelper#useCheckAndArrow(JMenuItem):::Returns false if the component is a JMenu and it is a top level menu (on the menubar).:::b->if->isTopLevelMenu->return
PrintColorUIResource#getPrintColor():::Return the color to use during printing:::return
PrintingStatus#createPrintingStatus(Component, PrinterJob):::Creates PrintingStatus instance:::return->new->PrintingStatus
PrintingStatus#showModal(boolean):::Shows PrintingStatus dialog:::if->SwingUtilities->isEventDispatchThread->showModalOnEDT->else->try->SwingUtilities->new->Runnable->invokeAndWait->catch->throw->new->RuntimeException->cause->e->getCause->if->throw->else->if->throw->else->throw->new->RuntimeException->finally
PrintingStatus#dispose():::Disposes modal PrintingStatus dialog:::if->SwingUtilities->isEventDispatchThread->disposeOnEDT->else->SwingUtilities->new->Runnable->invokeLater
PrintingStatus#isAborted():::Returns whether the printng was aborted using this PrintingStatus:::return->isAborted->get
PrintingStatus#createNotificationPrintable(Printable):::Returns printable which is used to track the current page being printed in this PrintingStatus:::return->new->NotificationPrintable
PrintingStatus#getInt(Object, int):::Duplicated from UIManager to make it visible:::value->UIManager->get->if->return->intValue->if->try->return->Integer->parseInt->catch->finally->return
SwingAccessor.JTextComponentAccessor#dropLocationForPoint(JTextComponent, Point):::Calculates a custom drop location for the text component, representing where a drop at the given point should insert data.:::
SwingAccessor.JTextComponentAccessor#setDropLocation(JTextComponent, TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation.:::
SwingAccessor.JLightweightFrameAccessor#updateCursor(JLightweightFrame):::Notifies the JLightweight frame that it needs to update a cursor:::
SwingAccessor.UIDefaultsAccessor#addInternalBundle(UIDefaults, String):::Adds a resource bundle to the list of resource bundles.:::
SwingAccessor#setJComponentAccessor(JComponentAccessor):::Set an accessor object for the javax.swing.JComponent class.:::
SwingAccessor#getJComponentAccessor():::Retrieve the accessor object for the javax.swing.JComponent class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setJTextComponentAccessor(JTextComponentAccessor):::Set an accessor object for the javax.swing.text.JTextComponent class.:::
SwingAccessor#getJTextComponentAccessor():::Retrieve the accessor object for the javax.swing.text.JTextComponent class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setJLightweightFrameAccessor(JLightweightFrameAccessor):::Set an accessor object for the JLightweightFrame class.:::
SwingAccessor#getJLightweightFrameAccessor():::Retrieve the accessor object for the JLightweightFrame class:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setUIDefaultsAccessor(UIDefaultsAccessor):::Set an accessor object for the UIDefaults class.:::
SwingAccessor#getUIDefaultsAccessor():::Retrieve the accessor object for the JLightweightFrame class:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setRepaintManagerAccessor(RepaintManagerAccessor):::Set an accessor object for the RepaintManager class.:::
SwingAccessor#getRepaintManagerAccessor():::Retrieve the accessor object for the RepaintManager class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#getPopupFactoryAccessor():::Retrieve the accessor object for the PopupFactory class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setPopupFactoryAccessor(PopupFactoryAccessor):::Set an Accessor object for the PopupFactory class.:::
SwingAccessor#getKeyStrokeAccessor():::Retrieve the accessor object for the KeyStroke class.:::if->unsafe->ensureClassInitialized->return
SwingUtilities2#isComplexLayout(char[], int, int):::checks whether TextLayout is required to handle characters.:::return->FontUtilities->isComplexText
SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, String):::Returns the left side bearing of the first character of string:::if->string->length->return->return->string->charAt->getLeftSideBearing
SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, char):::Returns the left side bearing of the first character of string:::charIndex->if->lsbs->frc->getFontRenderContext->font->fm->getFont->synchronized->entry->if->new->LSBCacheEntry->else->searchKey->reset->foreach->if->searchKey->equals->break->if->return->entry->getLeftSideBearing->return
SwingUtilities2#getFontMetrics(JComponent, Graphics):::Returns the FontMetrics for the current Font of the passed in Graphics:::return->g->getFont->getFontMetrics
SwingUtilities2#getFontMetrics(JComponent, Graphics, Font):::Returns the FontMetrics for the specified Font:::if->return->c->getFontMetrics->return->Toolkit->getDefaultToolkit->getFontMetrics
SwingUtilities2#stringWidth(JComponent, FontMetrics, String):::Returns the width of the passed in String:::return->stringWidth
SwingUtilities2#stringWidth(JComponent, FontMetrics, String, boolean):::Returns the width of the passed in String:::if->string->equals->return->needsTextLayout->c->getClientProperty->if->synchronized->length->syncCharsBuffer->isComplexLayout->if->layout->fm->getFont->fm->getFontRenderContext->createTextLayout->return->layout->getAdvance->else->return->getFontStringWidth
SwingUtilities2#clipStringIfNecessary(JComponent, FontMetrics, String, int):::Clips the passed in String to the space provided.:::if->string->equals->return->textWidth->SwingUtilities2->stringWidth->if->return->SwingUtilities2->clipString->return
SwingUtilities2#clipString(JComponent, FontMetrics, String, int):::Clips the passed in String to the space provided:::clipString->SwingUtilities2->stringWidth->if->return->needsTextLayout->synchronized->stringLength->syncCharsBuffer->isComplexLayout->if->width->for->nChars->if->aString->new->AttributedString->if->aString->c->getClientProperty->addAttribute->measurer->aString->getIterator->BreakIterator->getCharacterInstance->getFontRenderContext->new->LineBreakMeasurer->string->measurer->nextOffset->substring->return
SwingUtilities2#drawString(JComponent, Graphics, String, int, int):::Draws the string at the specified location.:::drawString
SwingUtilities2#drawString(JComponent, Graphics, String, float, float, boolean):::Draws the string at the specified location.:::if->text->length->return->if->isPrinting->g2d->getGraphics2D->if->trimmedText->trimTrailingSpaces->if->trimmedText->isEmpty->screenWidth->g2d->getFont->getFontRenderContext->getStringBounds->getWidth->layout->g2d->getFont->g2d->getFontRenderContext->createTextLayout->if->SwingUtilities2->g2d->getFontMetrics->stringWidth->layout->getJustifiedLayout->col->g2d->getColor->if->g2d->getPrintColor->setColor->layout->draw->g2d->setColor->return->if->g2->needsTextLayout->c->getClientProperty->if->synchronized->length->syncCharsBuffer->isComplexLayout->aaHint->c->getClientProperty->if->oldContrast->oldAAValue->g2->getRenderingHint->if->g2->setRenderingHint->else->lcdContrastHint->c->getClientProperty->if->g2->getRenderingHint->if->lcdContrastHint->equals->else->g2->setRenderingHint->if->layout->g2->getFont->g2->getFontRenderContext->createTextLayout->layout->draw->else->g2->drawString->if->g2->setRenderingHint->if->g2->setRenderingHint->return->if->layout->g2->getFont->g2->getFontRenderContext->createTextLayout->layout->draw->return->g->drawString
SwingUtilities2#drawStringUnderlineCharAt(JComponent, Graphics, String, int, float, float, boolean):::Draws the string at the specified location underlining the specified character.:::if->text->length->return->SwingUtilities2->drawString->textLength->text->length->if->underlineRectY->underlineRectHeight->underlineRectX->underlineRectWidth->isPrinting->isPrinting->needsTextLayout->if->synchronized->syncCharsBuffer->isComplexLayout->if->fm->g->getFontMetrics->SwingUtilities2->text->substring->stringWidth->fm->text->charAt->charWidth->else->g2d->getGraphics2D->if->layout->g2d->getFont->g2d->getFontRenderContext->createTextLayout->if->screenWidth->g2d->getFont->getFontRenderContext->getStringBounds->getWidth->if->SwingUtilities2->g2d->getFontMetrics->stringWidth->layout->getJustifiedLayout->leading->TextHitInfo->leading->trailing->TextHitInfo->trailing->shape->layout->getVisualHighlightShape->rect->shape->getBounds->g->fillRect
SwingUtilities2#loc2IndexFileList(JList, Point):::A variation of locationToIndex() which only returns an index if the Point is within the actual bounds of a list item (not just in the cell) and if the JList has the "List.isFileList" client property set:::index->list->locationToIndex->if->bySize->list->getClientProperty->if->booleanValue->pointIsInActualBounds->return
SwingUtilities2#pointOutsidePrefSize(JTable, int, int, Point):::Returns true if the given point is outside the preferredSize of the item at the given row of the table:::if->table->convertColumnIndexToModel->return->tcr->table->getCellRenderer->value->table->getValueAt->cell->tcr->getTableCellRendererComponent->itemSize->cell->getPreferredSize->cellBounds->table->getCellRect->return
SwingUtilities2#setLeadAnchorWithoutSelection(ListSelectionModel, int, int):::Set the lead and anchor without affecting selection.:::if->if->model->setAnchorSelectionIndex->model->setLeadSelectionIndex->else->if->model->isSelectedIndex->model->addSelectionInterval->else->model->removeSelectionInterval->model->setAnchorSelectionIndex
SwingUtilities2#shouldIgnore(MouseEvent, JComponent):::Ignore mouse events if the component is null, not enabled, the event is not associated with the left mouse button, or the event has been consumed.:::return->c->isEnabled->SwingUtilities->isLeftMouseButton->me->isConsumed
SwingUtilities2#adjustFocus(JComponent):::Request focus on the given component if it doesn't already have it and isRequestFocusEnabled() returns true.:::if->c->hasFocus->c->isRequestFocusEnabled->c->requestFocus
SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, int, int):::The following draw functions have the same semantic as the Graphics methods with the same names:::return->drawChars
SwingUtilities2#drawVLine(Graphics, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->temp->g->fillRect
SwingUtilities2#drawHLine(Graphics, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->temp->g->fillRect
SwingUtilities2#drawRect(Graphics, int, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->return->if->g->fillRect->else->g->fillRect->g->fillRect->g->fillRect->g->fillRect
SwingUtilities2#useSelectedTextColor(Highlighter.Highlight, JTextComponent):::Determines whether the SelectedTextColor should be used for painting text foreground for the specified highlight:::painter->h->getPainter->painterClass->painter->getClass->getName->if->painterClass->indexOf->painterClass->indexOf->return->try->defPainter->if->defPainter->getColor->defPainter->getColor->c->getSelectionColor->equals->return->catch->return->finally->return
SwingUtilities2#canAccessSystemClipboard():::checks the security permissions for accessing system clipboard  for untrusted context (see isTrustedContext) checks the permissions for the current event being handled:::canAccess->if->GraphicsEnvironment->isHeadless->sm->System->getSecurityManager->if->else->try->sm->checkPermission->catch->finally->if->isTrustedContext->canCurrentEventAccessSystemClipboard->return
SwingUtilities2#canCurrentEventAccessSystemClipboard():::Returns true if EventQueue.getCurrentEvent() has the permissions to access the system clipboard:::return->isTrustedContext->canCurrentEventAccessSystemClipboard
SwingUtilities2#canEventAccessSystemClipboard(AWTEvent):::Returns true if the given event has permissions to access the system clipboard:::return->isTrustedContext->canEventAccessSystemClipboard
SwingUtilities2#checkAccess(int):::Utility method that throws SecurityException if SecurityManager is set and modifiers are not public:::if->System->getSecurityManager->Modifier->isPublic->throw->new->SecurityException
SwingUtilities2#makeIcon(Class, Class, String):::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name:::return->makeIcon
SwingUtilities2#makeIcon_Unprivileged(Class, Class, String):::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name:::return->makeIcon
SwingUtilities2#getUIDefaultsInt(Object):::Returns an integer from the defaults table:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, Locale):::Returns an integer from the defaults table that is appropriate for the given locale:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, int):::Returns an integer from the defaults table:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, Locale, int):::Returns an integer from the defaults table that is appropriate for the given locale:::value->UIManager->get->if->return->intValue->if->try->return->Integer->parseInt->catch->finally->return
SwingUtilities2#tabbedPaneChangeFocusTo(Component):::Change focus to the visible component in JTabbedPane:::if->if->comp->isFocusTraversable->SwingUtilities2->compositeRequestFocus->return->else->if->requestDefaultFocus->return->return
SwingUtilities2#submit(Callable):::Submits a value-returning task for execution on the EDT and returns a Future representing the pending results of the task.:::if->throw->new->NullPointerException->future->new->FutureTask<V>->execute->return
SwingUtilities2#submit(Runnable, V):::Submits a Runnable task for execution on the EDT and returns a Future representing that task.:::if->throw->new->NullPointerException->future->new->FutureTask<V>->execute->return
SwingUtilities2#setSkipClickCount(Component, int):::Sets the SKIP_CLICK_COUNT client property on the component if it is an instance of JTextComponent with a DefaultCaret:::if->getCaret->putClientProperty
SwingUtilities2#getAdjustedClickCount(JTextComponent, MouseEvent):::Return the MouseEvent's click count, possibly reduced by the value of the component's SKIP_CLICK_COUNT client property:::cc->e->getClickCount->if->comp->putClientProperty->else->sub->comp->getClientProperty->if->return->return
SwingUtilities2#liesInHorizontal(Rectangle, Point, boolean, boolean):::This method divides a rectangle into two or three sections along the horizontal axis and determines which section the given point lies in; used by drag and drop when calculating drop locations:::return->liesIn
SwingUtilities2#liesInVertical(Rectangle, Point, boolean):::This method divides a rectangle into two or three sections along the vertical axis and determines which section the given point lies in; used by drag and drop when calculating drop locations:::return->liesIn
SwingUtilities2#convertColumnIndexToModel(TableColumnModel, int):::Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model:::if->return->return->cm->getColumn->getModelIndex
SwingUtilities2#convertColumnIndexToView(TableColumnModel, int):::Maps the index of the column in the cm at modelColumnIndex to the index of the column in the view:::if->return->for->column->cm->getColumnCount->return
SwingUtilities2#setAltGraphMask(int):::Sets the InputEvent.ALT_GRAPH mask on any modifier passed to the function:::return
SwingUtilities2#getTreePath(TreeModelEvent, TreeModel):::Returns the TreePath that identifies the changed nodes.:::path->event->getTreePath->if->root->model->getRoot->if->new->TreePath->return
SwingUtilities2#getAndSetAntialisingHintForScaledGraphics(Graphics):::Enables the antialiasing rendering hint for the scaled graphics and returns the previous hint value:::if->isScaledGraphics->isLocalDisplay->g2d->hint->g2d->getRenderingHint->g2d->setRenderingHint->return->return
SwingUtilities2#setAntialiasingHintForScaledGraphics(Graphics, Object):::Sets the antialiasing rendering hint if its value is not null:::if->setRenderingHint
SwingUtilities2#getBoolean(JComponent, String):::Returns the client property for the given key if it is set; otherwise returns the  property.:::clientProperty->component->getClientProperty->if->return->equals->return->UIManager->getBoolean
SwingUtilities2#isScaleChanged(PropertyChangeEvent):::Returns whether or not the scale used by GraphicsConfiguration was changed.:::return->ev->getPropertyName->ev->getOldValue->ev->getNewValue->isScaleChanged
SwingUtilities2#isScaleChanged(String, Object, Object):::Returns whether or not the scale used by GraphicsConfiguration was changed.:::if->equals->return->newGC->oldGC->newTx->newGC->getDefaultTransform->oldTx->oldGC->getDefaultTransform->return->Objects->equals
UIAction#isEnabled():::Cover method for isEnabled(null).:::return->accept
UIAction#accept(Object):::Subclasses that need to conditionalize the enabled state should override this:::return

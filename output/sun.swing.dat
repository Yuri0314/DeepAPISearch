sun.swing.AccumulativeRunnable#run(List)->void:::Equivalent to Runnable.run method with the accumulated arguments to process.
sun.swing.AccumulativeRunnable#run()->void:::This implementation calls {@code run(List<T> args) mehtod with the list of accumulated arguments.
sun.swing.AccumulativeRunnable#add(T...)->void:::appends arguments and sends this Runnable for the execution if needed
sun.swing.AccumulativeRunnable#submit()->void:::Sends this Runnable for the execution   This method is to be executed only from add method
sun.swing.BakedArrayList#cacheHashCode()->void:::Caches the hash code
sun.swing.BakedArrayList#hashCode()->int::: baked array list hash code
sun.swing.BakedArrayList#equals(Object)->boolean::: baked array list equals
sun.swing.CachedPainter#paint(Component, Graphics, int, int, int, int, Object...)->void:::Renders the cached image to the passed in Graphic
sun.swing.CachedPainter#paintToImage(Component, Image, Graphics, int, int, Object[])->void:::Paints the representation to cache to the supplied Graphics.
sun.swing.CachedPainter#paintImage(Component, Graphics, int, int, int, int, Image, Object[])->void:::Paints the image to the specified location.
sun.swing.CachedPainter#createImage(Component, int, int, GraphicsConfiguration, Object[])->Image:::Creates the image to cache
sun.swing.CachedPainter#flush()->void:::Clear the image cache
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#setParams(Component, Object[])->void::: painter multi resolution cached image set params
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#getWidth(ImageObserver)->int::: painter multi resolution cached image get width
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#getHeight(ImageObserver)->int::: painter multi resolution cached image get height
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#getResolutionVariant(double, double)->Image::: painter multi resolution cached image get resolution variant
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#getBaseImage()->Image::: painter multi resolution cached image get base image
sun.swing.CachedPainter.PainterMultiResolutionCachedImage#getResolutionVariants()->java.util.List::: painter multi resolution cached image get resolution variants
sun.swing.DefaultLayoutStyle#getInstance()->LayoutStyle::: default layout style get instance
sun.swing.DefaultLayoutStyle#getPreferredGap(JComponent, JComponent, ComponentPlacement, int, Container)->int::: default layout style get preferred gap
sun.swing.DefaultLayoutStyle#getContainerGap(JComponent, int, Container)->int::: default layout style get container gap
sun.swing.DefaultLayoutStyle#isLabelAndNonlabel(JComponent, JComponent, int)->boolean:::Returns true if the classes identify a JLabel and a non-JLabel along the horizontal axis.
sun.swing.DefaultLayoutStyle#getButtonGap(JComponent, JComponent, int, int)->int:::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border
sun.swing.DefaultLayoutStyle#getButtonGap(JComponent, int, int)->int:::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border
sun.swing.DefaultLayoutStyle#getButtonGap(JComponent, int)->int:::If c is a check box or radio button, and the border is not painted this returns the inset along the specified axis.
sun.swing.DefaultLayoutStyle#flipDirection(int)->int::: default layout style flip direction
sun.swing.DefaultLayoutStyle#getIndent(JComponent, int)->int:::Returns the amount to indent the specified component if it's a JCheckBox or JRadioButton
sun.swing.DefaultLookup#setDefaultLookup(DefaultLookup)->void:::Sets the DefaultLookup instance to use for the current AppContext
sun.swing.DefaultLookup#get(JComponent, ComponentUI, String)->Object::: default lookup get
sun.swing.DefaultLookup#getInt(JComponent, ComponentUI, String, int)->int::: default lookup get int
sun.swing.DefaultLookup#getInt(JComponent, ComponentUI, String)->int::: default lookup get int
sun.swing.DefaultLookup#getInsets(JComponent, ComponentUI, String, Insets)->Insets::: default lookup get insets
sun.swing.DefaultLookup#getInsets(JComponent, ComponentUI, String)->Insets::: default lookup get insets
sun.swing.DefaultLookup#getBoolean(JComponent, ComponentUI, String, boolean)->boolean::: default lookup get boolean
sun.swing.DefaultLookup#getBoolean(JComponent, ComponentUI, String)->boolean::: default lookup get boolean
sun.swing.DefaultLookup#getColor(JComponent, ComponentUI, String, Color)->Color::: default lookup get color
sun.swing.DefaultLookup#getColor(JComponent, ComponentUI, String)->Color::: default lookup get color
sun.swing.DefaultLookup#getIcon(JComponent, ComponentUI, String, Icon)->Icon::: default lookup get icon
sun.swing.DefaultLookup#getIcon(JComponent, ComponentUI, String)->Icon::: default lookup get icon
sun.swing.DefaultLookup#getBorder(JComponent, ComponentUI, String, Border)->Border::: default lookup get border
sun.swing.DefaultLookup#getBorder(JComponent, ComponentUI, String)->Border::: default lookup get border
sun.swing.DefaultLookup#getDefault(JComponent, ComponentUI, String)->Object::: default lookup get default
sun.swing.FilePane#uninstallUI()->void::: file pane uninstall i
sun.swing.FilePane#getFileChooser()->JFileChooser::: file pane get file chooser
sun.swing.FilePane#getModel()->BasicDirectoryModel::: file pane get model
sun.swing.FilePane#getViewType()->int::: file pane get view type
sun.swing.FilePane#setViewType(int)->void::: file pane set view type
sun.swing.FilePane.ViewTypeAction#actionPerformed(ActionEvent)->void::: view type action action performed
sun.swing.FilePane#getViewTypeAction(int)->Action::: file pane get view type action
sun.swing.FilePane#installDefaults()->void::: file pane install defaults
sun.swing.FilePane#getActions()->Action[]:::Fetches the command list for the FilePane
sun.swing.FilePane#createActionMap()->void::: file pane create action map
sun.swing.FilePane#addActionsToMap(ActionMap, Action[])->void::: file pane add actions to map
sun.swing.FilePane#createList()->JPanel::: file pane create list
sun.swing.FilePane.DetailsTableModel#updateColumnInfo()->void::: details table model update column info
sun.swing.FilePane.DetailsTableModel#getRowCount()->int::: details table model get row count
sun.swing.FilePane.DetailsTableModel#getColumnCount()->int::: details table model get column count
sun.swing.FilePane.DetailsTableModel#getValueAt(int, int)->Object::: details table model get value at
sun.swing.FilePane.DetailsTableModel#setValueAt(Object, int, int)->void::: details table model set value at
sun.swing.FilePane.DetailsTableModel#isCellEditable(int, int)->boolean::: details table model is cell editable
sun.swing.FilePane.DetailsTableModel#contentsChanged(ListDataEvent)->void::: details table model contents changed
sun.swing.FilePane.DetailsTableModel#intervalAdded(ListDataEvent)->void::: details table model interval added
sun.swing.FilePane.DetailsTableModel#intervalRemoved(ListDataEvent)->void::: details table model interval removed
sun.swing.FilePane.DetailsTableModel#getColumns()->ShellFolderColumnInfo[]::: details table model get columns
sun.swing.FilePane.DetailsTableCellRenderer#setBounds(int, int, int, int)->void::: details table cell renderer set bounds
sun.swing.FilePane.DetailsTableCellRenderer#getInsets(Insets)->Insets::: details table cell renderer get insets
sun.swing.FilePane.DetailsTableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)->Component::: details table cell renderer get table cell renderer component
sun.swing.FilePane#createDetailsView()->JPanel::: file pane create details view
sun.swing.FilePane#createListSelectionListener()->ListSelectionListener:::Creates a selection listener for the list of files and directories.
sun.swing.FilePane.EditActionListener#actionPerformed(ActionEvent)->void::: edit action listener action performed
sun.swing.FilePane#getNewFolderAction()->Action::: file pane get new folder action
sun.swing.FilePane.FileRenderer#getListCellRendererComponent(JList, Object, int, boolean, boolean)->Component::: file renderer get list cell renderer component
sun.swing.FilePane#setFileSelected()->void::: file pane set file selected
sun.swing.FilePane#propertyChange(PropertyChangeEvent)->void::: file pane property change
sun.swing.FilePane#ensureFileIsVisible(JFileChooser, File)->void::: file pane ensure file is visible
sun.swing.FilePane#rescanCurrentDirectory()->void::: file pane rescan current directory
sun.swing.FilePane#clearSelection()->void::: file pane clear selection
sun.swing.FilePane#getViewMenu()->JMenu::: file pane get view menu
sun.swing.FilePane#getComponentPopupMenu()->JPopupMenu::: file pane get component popup menu
sun.swing.FilePane#getMouseHandler()->Handler::: file pane get mouse handler
sun.swing.FilePane#isDirectorySelected()->boolean:::Property to remember whether a directory is currently selected in the UI.
sun.swing.FilePane#getDirectory()->File:::Property to remember the directory that is currently selected in the UI.
sun.swing.FilePane#canWrite(File)->boolean::: file pane can write
sun.swing.FilePane#usesShellFolder(JFileChooser)->boolean:::Returns true if specified FileChooser should use ShellFolder
sun.swing.FilePane.FileChooserUIAccessor#getFileChooser()->JFileChooser::: file chooser accessor get file chooser
sun.swing.FilePane.FileChooserUIAccessor#getModel()->BasicDirectoryModel::: file chooser accessor get model
sun.swing.FilePane.FileChooserUIAccessor#createList()->JPanel::: file chooser accessor create list
sun.swing.FilePane.FileChooserUIAccessor#createDetailsView()->JPanel::: file chooser accessor create details view
sun.swing.FilePane.FileChooserUIAccessor#isDirectorySelected()->boolean::: file chooser accessor is directory selected
sun.swing.FilePane.FileChooserUIAccessor#getDirectory()->File::: file chooser accessor get directory
sun.swing.FilePane.FileChooserUIAccessor#getApproveSelectionAction()->Action::: file chooser accessor get approve selection action
sun.swing.FilePane.FileChooserUIAccessor#getChangeToParentDirectoryAction()->Action::: file chooser accessor get change to parent directory action
sun.swing.FilePane.FileChooserUIAccessor#getNewFolderAction()->Action::: file chooser accessor get new folder action
sun.swing.FilePane.FileChooserUIAccessor#createDoubleClickListener(JList)->MouseListener::: file chooser accessor create double click listener
sun.swing.FilePane.FileChooserUIAccessor#createListSelectionListener()->ListSelectionListener::: file chooser accessor create list selection listener
sun.swing.ImageCache#setMaxCount(int)->void::: image cache set max count
sun.swing.ImageCache#flush()->void::: image cache flush
sun.swing.ImageCache#getImage(Object, GraphicsConfiguration, int, int, Object[])->Image:::Returns the cached Image, or null, for the specified arguments.
sun.swing.ImageCache#setImage(Object, GraphicsConfiguration, int, int, Object[], Image)->void:::Sets the cached image for the specified constraints.
sun.swing.JLightweightFrame#dispose()->void::: lightweight frame dispose
sun.swing.JLightweightFrame#setContent(LightweightContent)->void:::Sets the LightweightContent instance for this frame
sun.swing.JLightweightFrame#getGraphics()->Graphics::: lightweight frame get graphics
sun.swing.JLightweightFrame#grabFocus()->void::: lightweight frame grab focus
sun.swing.JLightweightFrame#ungrabFocus()->void::: lightweight frame ungrab focus
sun.swing.JLightweightFrame#getScaleFactor()->int::: lightweight frame get scale factor
sun.swing.JLightweightFrame#getScaleFactorX()->double::: lightweight frame get scale factor x
sun.swing.JLightweightFrame#getScaleFactorY()->double::: lightweight frame get scale factor y
sun.swing.JLightweightFrame#notifyDisplayChanged(int)->void::: lightweight frame notify display changed
sun.swing.JLightweightFrame#notifyDisplayChanged(double, double)->void::: lightweight frame notify display changed
sun.swing.JLightweightFrame#addNotify()->void::: lightweight frame add notify
sun.swing.JLightweightFrame#reshape(int, int, int, int)->void::: lightweight frame reshape
sun.swing.JLightweightFrame#getRootPane()->JRootPane::: lightweight frame get root pane
sun.swing.JLightweightFrame#setContentPane(Container)->void::: lightweight frame set content pane
sun.swing.JLightweightFrame#getContentPane()->Container::: lightweight frame get content pane
sun.swing.JLightweightFrame#setLayeredPane(JLayeredPane)->void::: lightweight frame set layered pane
sun.swing.JLightweightFrame#getLayeredPane()->JLayeredPane::: lightweight frame get layered pane
sun.swing.JLightweightFrame#setGlassPane(Component)->void::: lightweight frame set glass pane
sun.swing.JLightweightFrame#getGlassPane()->Component::: lightweight frame get glass pane
sun.swing.JLightweightFrame#overrideNativeWindowHandle(long, Runnable)->void::: lightweight frame override native window handle
sun.swing.JLightweightFrame#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T::: lightweight frame create drag gesture recognizer
sun.swing.JLightweightFrame#createDragSourceContextPeer(DragGestureEvent)->DragSourceContextPeer::: lightweight frame create drag source context peer
sun.swing.JLightweightFrame#addDropTarget(DropTarget)->void::: lightweight frame add drop target
sun.swing.JLightweightFrame#removeDropTarget(DropTarget)->void::: lightweight frame remove drop target
sun.swing.LightweightContent#getComponent()->JComponent:::The client application overrides this method to return the JComponent instance which the JLightweightFrame container will paint as its lightweight content
sun.swing.LightweightContent#paintLock()->void:::JLightweightFrame calls this method to notify the client application that it acquires the paint lock
sun.swing.LightweightContent#paintUnlock()->void:::JLightweightFrame calls this method to notify the client application that it releases the paint lock
sun.swing.LightweightContent#imageBufferReset(int[], int, int, int, int, int, int)->void:::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer
sun.swing.LightweightContent#imageBufferReset(int[], int, int, int, int, int, double, double)->void:::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer
sun.swing.LightweightContent#imageBufferReset(int[], int, int, int, int, int)->void:::The default implementation for #imageBufferReset uses a hard-coded value of 1 for the scale factor
sun.swing.LightweightContent#imageReshaped(int, int, int, int)->void:::JLightweightFrame calls this method to notify the client application that the content image bounds have been changed within the image's pixel buffer.
sun.swing.LightweightContent#imageUpdated(int, int, int, int)->void:::JLightweightFrame calls this method to notify the client application that a part of the content image, or the whole image has been updated
sun.swing.LightweightContent#focusGrabbed()->void:::JLightweightFrame calls this method to notify the client application that the frame has grabbed focus.
sun.swing.LightweightContent#focusUngrabbed()->void:::JLightweightFrame calls this method to notify the client application that the frame has ungrabbed focus.
sun.swing.LightweightContent#preferredSizeChanged(int, int)->void:::JLightweightFrame calls this method to notify the client application that the content preferred size has changed.
sun.swing.LightweightContent#maximumSizeChanged(int, int)->void:::JLightweightFrame calls this method to notify the client application that the content maximum size has changed.
sun.swing.LightweightContent#minimumSizeChanged(int, int)->void:::JLightweightFrame calls this method to notify the client application that the content minimum size has changed.
sun.swing.LightweightContent#setCursor(Cursor)->void:::JLightweightFrame calls this method to notify the client application that in needs to set a cursor
sun.swing.LightweightContent#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T:::Create a drag gesture recognizer for the lightweight frame.
sun.swing.LightweightContent#createDragSourceContextPeer(DragGestureEvent)->DragSourceContextPeer:::Create a drag source context peer for the lightweight frame.
sun.swing.LightweightContent#addDropTarget(DropTarget)->void:::Adds a drop target to the lightweight frame.
sun.swing.LightweightContent#removeDropTarget(DropTarget)->void:::Removes a drop target from the lightweight frame.
sun.swing.MenuItemCheckIconFactory#getIcon(JMenuItem)->Icon::: menu item check icon factory get icon
sun.swing.MenuItemCheckIconFactory#isCompatible(Object, String)->boolean::: menu item check icon factory is compatible
sun.swing.MenuItemLayoutHelper#reset(JMenuItem, Icon, Icon, Rectangle, int, String, boolean, Font, Font, boolean, String)->void::: menu item layout helper reset
sun.swing.MenuItemLayoutHelper#calcWidthsAndHeights()->void::: menu item layout helper calc widths and heights
sun.swing.MenuItemLayoutHelper#calcMaxWidths()->void::: menu item layout helper calc max widths
sun.swing.MenuItemLayoutHelper#calcMaxWidth(RectSize, Object)->void::: menu item layout helper calc max width
sun.swing.MenuItemLayoutHelper#calcMaxValue(Object, int)->int:::Calculates and returns maximal value through specified parent component client property.
sun.swing.MenuItemLayoutHelper#getParentIntProperty(Object)->int:::Returns parent client property as int.
sun.swing.MenuItemLayoutHelper#isColumnLayout(boolean, JMenuItem)->boolean::: menu item layout helper is column layout
sun.swing.MenuItemLayoutHelper#isColumnLayout(boolean, int, int, int)->boolean:::Answers should we do column layout for a menu item or not
sun.swing.MenuItemLayoutHelper#layoutMenuItem()->LayoutResult:::Layout icon, text, check icon, accelerator text and arrow icon in the viewRect and return their positions
sun.swing.MenuItemLayoutHelper#getLTRColumnAlignment()->ColumnAlignment::: menu item layout helper get column alignment
sun.swing.MenuItemLayoutHelper#getRTLColumnAlignment()->ColumnAlignment::: menu item layout helper get column alignment
sun.swing.MenuItemLayoutHelper#prepareForLayout(LayoutResult)->void::: menu item layout helper prepare for layout
sun.swing.MenuItemLayoutHelper#layoutIconAndTextInLabelRect(LayoutResult)->void::: menu item layout helper layout icon and text in label rect
sun.swing.MenuItemLayoutHelper#getMenuItemParent(JMenuItem)->JComponent:::Returns parent of this component if it is not a top-level menu Otherwise returns null.
sun.swing.MenuItemLayoutHelper#clearUsedParentClientProperties(JMenuItem)->void::: menu item layout helper clear used parent client properties
sun.swing.MenuItemLayoutHelper#clearUsedClientProperties(JComponent)->void::: menu item layout helper clear used client properties
sun.swing.MenuItemLayoutHelper#max(int...)->int:::Finds and returns maximal integer value in the given array.
sun.swing.MenuItemLayoutHelper#createMaxRect()->Rectangle::: menu item layout helper create max rect
sun.swing.MenuItemLayoutHelper#addMaxWidth(RectSize, int, Dimension)->void::: menu item layout helper add max width
sun.swing.MenuItemLayoutHelper#addWidth(int, int, Dimension)->void::: menu item layout helper add width
sun.swing.MenuItemLayoutHelper#getMenuItem()->JMenuItem::: menu item layout helper get menu item
sun.swing.MenuItemLayoutHelper#getMenuItemParent()->JComponent::: menu item layout helper get menu item parent
sun.swing.MenuItemLayoutHelper#getFont()->Font::: menu item layout helper get font
sun.swing.MenuItemLayoutHelper#getAccFont()->Font::: menu item layout helper get acc font
sun.swing.MenuItemLayoutHelper#getFontMetrics()->FontMetrics::: menu item layout helper get font metrics
sun.swing.MenuItemLayoutHelper#getAccFontMetrics()->FontMetrics::: menu item layout helper get acc font metrics
sun.swing.MenuItemLayoutHelper#getIcon()->Icon::: menu item layout helper get icon
sun.swing.MenuItemLayoutHelper#getCheckIcon()->Icon::: menu item layout helper get check icon
sun.swing.MenuItemLayoutHelper#getArrowIcon()->Icon::: menu item layout helper get arrow icon
sun.swing.MenuItemLayoutHelper#getText()->String::: menu item layout helper get text
sun.swing.MenuItemLayoutHelper#getAccText()->String::: menu item layout helper get acc text
sun.swing.MenuItemLayoutHelper#isColumnLayout()->boolean::: menu item layout helper is column layout
sun.swing.MenuItemLayoutHelper#useCheckAndArrow()->boolean::: menu item layout helper use check and arrow
sun.swing.MenuItemLayoutHelper#isLeftToRight()->boolean::: menu item layout helper is left to right
sun.swing.MenuItemLayoutHelper#isTopLevelMenu()->boolean::: menu item layout helper is top level menu
sun.swing.MenuItemLayoutHelper#getHtmlView()->View::: menu item layout helper get html view
sun.swing.MenuItemLayoutHelper#getVerticalAlignment()->int::: menu item layout helper get vertical alignment
sun.swing.MenuItemLayoutHelper#getHorizontalAlignment()->int::: menu item layout helper get horizontal alignment
sun.swing.MenuItemLayoutHelper#getVerticalTextPosition()->int::: menu item layout helper get vertical text position
sun.swing.MenuItemLayoutHelper#getHorizontalTextPosition()->int::: menu item layout helper get horizontal text position
sun.swing.MenuItemLayoutHelper#getGap()->int::: menu item layout helper get gap
sun.swing.MenuItemLayoutHelper#getLeadingGap()->int::: menu item layout helper get leading gap
sun.swing.MenuItemLayoutHelper#getAfterCheckIconGap()->int::: menu item layout helper get after check icon gap
sun.swing.MenuItemLayoutHelper#getMinTextOffset()->int::: menu item layout helper get min text offset
sun.swing.MenuItemLayoutHelper#getViewRect()->Rectangle::: menu item layout helper get view rect
sun.swing.MenuItemLayoutHelper#getIconSize()->RectSize::: menu item layout helper get icon size
sun.swing.MenuItemLayoutHelper#getTextSize()->RectSize::: menu item layout helper get text size
sun.swing.MenuItemLayoutHelper#getAccSize()->RectSize::: menu item layout helper get acc size
sun.swing.MenuItemLayoutHelper#getCheckSize()->RectSize::: menu item layout helper get check size
sun.swing.MenuItemLayoutHelper#getArrowSize()->RectSize::: menu item layout helper get arrow size
sun.swing.MenuItemLayoutHelper#getLabelSize()->RectSize::: menu item layout helper get label size
sun.swing.MenuItemLayoutHelper#setMenuItem(JMenuItem)->void::: menu item layout helper set menu item
sun.swing.MenuItemLayoutHelper#setMenuItemParent(JComponent)->void::: menu item layout helper set menu item parent
sun.swing.MenuItemLayoutHelper#setFont(Font)->void::: menu item layout helper set font
sun.swing.MenuItemLayoutHelper#setAccFont(Font)->void::: menu item layout helper set acc font
sun.swing.MenuItemLayoutHelper#setFontMetrics(FontMetrics)->void::: menu item layout helper set font metrics
sun.swing.MenuItemLayoutHelper#setAccFontMetrics(FontMetrics)->void::: menu item layout helper set acc font metrics
sun.swing.MenuItemLayoutHelper#setIcon(Icon)->void::: menu item layout helper set icon
sun.swing.MenuItemLayoutHelper#setCheckIcon(Icon)->void::: menu item layout helper set check icon
sun.swing.MenuItemLayoutHelper#setArrowIcon(Icon)->void::: menu item layout helper set arrow icon
sun.swing.MenuItemLayoutHelper#setText(String)->void::: menu item layout helper set text
sun.swing.MenuItemLayoutHelper#setAccText(String)->void::: menu item layout helper set acc text
sun.swing.MenuItemLayoutHelper#setColumnLayout(boolean)->void::: menu item layout helper set column layout
sun.swing.MenuItemLayoutHelper#setUseCheckAndArrow(boolean)->void::: menu item layout helper set use check and arrow
sun.swing.MenuItemLayoutHelper#setLeftToRight(boolean)->void::: menu item layout helper set left to right
sun.swing.MenuItemLayoutHelper#setTopLevelMenu(boolean)->void::: menu item layout helper set top level menu
sun.swing.MenuItemLayoutHelper#setHtmlView(View)->void::: menu item layout helper set html view
sun.swing.MenuItemLayoutHelper#setVerticalAlignment(int)->void::: menu item layout helper set vertical alignment
sun.swing.MenuItemLayoutHelper#setHorizontalAlignment(int)->void::: menu item layout helper set horizontal alignment
sun.swing.MenuItemLayoutHelper#setVerticalTextPosition(int)->void::: menu item layout helper set vertical text position
sun.swing.MenuItemLayoutHelper#setHorizontalTextPosition(int)->void::: menu item layout helper set horizontal text position
sun.swing.MenuItemLayoutHelper#setGap(int)->void::: menu item layout helper set gap
sun.swing.MenuItemLayoutHelper#setLeadingGap(int)->void::: menu item layout helper set leading gap
sun.swing.MenuItemLayoutHelper#setAfterCheckIconGap(int)->void::: menu item layout helper set after check icon gap
sun.swing.MenuItemLayoutHelper#setMinTextOffset(int)->void::: menu item layout helper set min text offset
sun.swing.MenuItemLayoutHelper#setViewRect(Rectangle)->void::: menu item layout helper set view rect
sun.swing.MenuItemLayoutHelper#setIconSize(RectSize)->void::: menu item layout helper set icon size
sun.swing.MenuItemLayoutHelper#setTextSize(RectSize)->void::: menu item layout helper set text size
sun.swing.MenuItemLayoutHelper#setAccSize(RectSize)->void::: menu item layout helper set acc size
sun.swing.MenuItemLayoutHelper#setCheckSize(RectSize)->void::: menu item layout helper set check size
sun.swing.MenuItemLayoutHelper#setArrowSize(RectSize)->void::: menu item layout helper set arrow size
sun.swing.MenuItemLayoutHelper#setLabelSize(RectSize)->void::: menu item layout helper set label size
sun.swing.MenuItemLayoutHelper#getLeftTextExtraWidth()->int::: menu item layout helper get left text extra width
sun.swing.MenuItemLayoutHelper#useCheckAndArrow(JMenuItem)->boolean:::Returns false if the component is a JMenu and it is a top level menu (on the menubar).
sun.swing.MenuItemLayoutHelper.LayoutResult#getIconRect()->Rectangle::: layout result get icon rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setIconRect(Rectangle)->void::: layout result set icon rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getTextRect()->Rectangle::: layout result get text rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setTextRect(Rectangle)->void::: layout result set text rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getAccRect()->Rectangle::: layout result get acc rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setAccRect(Rectangle)->void::: layout result set acc rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getCheckRect()->Rectangle::: layout result get check rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setCheckRect(Rectangle)->void::: layout result set check rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getArrowRect()->Rectangle::: layout result get arrow rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setArrowRect(Rectangle)->void::: layout result set arrow rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getLabelRect()->Rectangle::: layout result get label rect
sun.swing.MenuItemLayoutHelper.LayoutResult#setLabelRect(Rectangle)->void::: layout result set label rect
sun.swing.MenuItemLayoutHelper.LayoutResult#getAllRects()->Map::: layout result get all rects
sun.swing.MenuItemLayoutHelper.ColumnAlignment#getCheckAlignment()->int::: column alignment get check alignment
sun.swing.MenuItemLayoutHelper.ColumnAlignment#getIconAlignment()->int::: column alignment get icon alignment
sun.swing.MenuItemLayoutHelper.ColumnAlignment#getTextAlignment()->int::: column alignment get text alignment
sun.swing.MenuItemLayoutHelper.ColumnAlignment#getAccAlignment()->int::: column alignment get acc alignment
sun.swing.MenuItemLayoutHelper.ColumnAlignment#getArrowAlignment()->int::: column alignment get arrow alignment
sun.swing.MenuItemLayoutHelper.RectSize#getWidth()->int::: rect size get width
sun.swing.MenuItemLayoutHelper.RectSize#getHeight()->int::: rect size get height
sun.swing.MenuItemLayoutHelper.RectSize#getOrigWidth()->int::: rect size get orig width
sun.swing.MenuItemLayoutHelper.RectSize#getMaxWidth()->int::: rect size get max width
sun.swing.MenuItemLayoutHelper.RectSize#setWidth(int)->void::: rect size set width
sun.swing.MenuItemLayoutHelper.RectSize#setHeight(int)->void::: rect size set height
sun.swing.MenuItemLayoutHelper.RectSize#setOrigWidth(int)->void::: rect size set orig width
sun.swing.MenuItemLayoutHelper.RectSize#setMaxWidth(int)->void::: rect size set max width
sun.swing.MenuItemLayoutHelper.RectSize#toString()->String::: rect size to string
sun.swing.PrintColorUIResource#getPrintColor()->Color:::Return the color to use during printing
sun.swing.PrintingStatus#createPrintingStatus(Component, PrinterJob)->PrintingStatus:::Creates PrintingStatus instance
sun.swing.PrintingStatus#showModal(boolean)->void:::Shows PrintingStatus dialog
sun.swing.PrintingStatus#dispose()->void:::Disposes modal PrintingStatus dialog
sun.swing.PrintingStatus#isAborted()->boolean:::Returns whether the printng was aborted using this PrintingStatus
sun.swing.PrintingStatus#createNotificationPrintable(Printable)->Printable:::Returns printable which is used to track the current page being printed in this PrintingStatus
sun.swing.PrintingStatus#getInt(Object, int)->int:::Duplicated from UIManager to make it visible
sun.swing.StringUIClientPropertyKey#toString()->String::: string client property key to string
sun.swing.SwingAccessor.JComponentAccessor#getFlag(JComponent, int)->boolean::: component accessor get flag
sun.swing.SwingAccessor.JComponentAccessor#compWriteObjectNotify(JComponent)->void::: component accessor comp write object notify
sun.swing.SwingAccessor.JTextComponentAccessor#dropLocationForPoint(JTextComponent, Point)->TransferHandler.DropLocation:::Calculates a custom drop location for the text component, representing where a drop at the given point should insert data.
sun.swing.SwingAccessor.JTextComponentAccessor#setDropLocation(JTextComponent, TransferHandler.DropLocation, Object, boolean)->Object:::Called to set or clear the drop location during a DnD operation.
sun.swing.SwingAccessor.JLightweightFrameAccessor#updateCursor(JLightweightFrame)->void:::Notifies the JLightweight frame that it needs to update a cursor
sun.swing.SwingAccessor.UIDefaultsAccessor#addInternalBundle(UIDefaults, String)->void:::Adds a resource bundle to the list of resource bundles.
sun.swing.SwingAccessor.RepaintManagerAccessor#addRepaintListener(RepaintManager, SwingUtilities2.RepaintListener)->void::: repaint manager accessor add repaint listener
sun.swing.SwingAccessor.RepaintManagerAccessor#removeRepaintListener(RepaintManager, SwingUtilities2.RepaintListener)->void::: repaint manager accessor remove repaint listener
sun.swing.SwingAccessor.PopupFactoryAccessor#getHeavyWeightPopup(PopupFactory, Component, Component, int, int)->Popup::: popup factory accessor get heavy weight popup
sun.swing.SwingAccessor.KeyStrokeAccessor#create()->KeyStroke::: key stroke accessor create
sun.swing.SwingAccessor#setJComponentAccessor(JComponentAccessor)->void:::Set an accessor object for the javax.swing.JComponent class.
sun.swing.SwingAccessor#getJComponentAccessor()->JComponentAccessor:::Retrieve the accessor object for the javax.swing.JComponent class.
sun.swing.SwingAccessor#setJTextComponentAccessor(JTextComponentAccessor)->void:::Set an accessor object for the javax.swing.text.JTextComponent class.
sun.swing.SwingAccessor#getJTextComponentAccessor()->JTextComponentAccessor:::Retrieve the accessor object for the javax.swing.text.JTextComponent class.
sun.swing.SwingAccessor#setJLightweightFrameAccessor(JLightweightFrameAccessor)->void:::Set an accessor object for the JLightweightFrame class.
sun.swing.SwingAccessor#getJLightweightFrameAccessor()->JLightweightFrameAccessor:::Retrieve the accessor object for the JLightweightFrame class
sun.swing.SwingAccessor#setUIDefaultsAccessor(UIDefaultsAccessor)->void:::Set an accessor object for the UIDefaults class.
sun.swing.SwingAccessor#getUIDefaultsAccessor()->UIDefaultsAccessor:::Retrieve the accessor object for the JLightweightFrame class
sun.swing.SwingAccessor#setRepaintManagerAccessor(RepaintManagerAccessor)->void:::Set an accessor object for the RepaintManager class.
sun.swing.SwingAccessor#getRepaintManagerAccessor()->RepaintManagerAccessor:::Retrieve the accessor object for the RepaintManager class.
sun.swing.SwingAccessor#getPopupFactoryAccessor()->PopupFactoryAccessor:::Retrieve the accessor object for the PopupFactory class.
sun.swing.SwingAccessor#setPopupFactoryAccessor(PopupFactoryAccessor)->void:::Set an Accessor object for the PopupFactory class.
sun.swing.SwingAccessor#getKeyStrokeAccessor()->KeyStrokeAccessor:::Retrieve the accessor object for the KeyStroke class.
sun.swing.SwingAccessor#setKeyStrokeAccessor(KeyStrokeAccessor)->void::: swing accessor set key stroke accessor
sun.swing.SwingUtilities2#putAATextInfo(boolean, Map)->void::: swing utilities2 put text info
sun.swing.SwingUtilities2#isComplexLayout(char[], int, int)->boolean:::checks whether TextLayout is required to handle characters.
sun.swing.SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, String)->int:::Returns the left side bearing of the first character of string
sun.swing.SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, char)->int:::Returns the left side bearing of the first character of string
sun.swing.SwingUtilities2#getFontMetrics(JComponent, Graphics)->FontMetrics:::Returns the FontMetrics for the current Font of the passed in Graphics
sun.swing.SwingUtilities2#getFontMetrics(JComponent, Graphics, Font)->FontMetrics:::Returns the FontMetrics for the specified Font
sun.swing.SwingUtilities2#stringWidth(JComponent, FontMetrics, String)->int:::Returns the width of the passed in String
sun.swing.SwingUtilities2#stringWidth(JComponent, FontMetrics, String, boolean)->float:::Returns the width of the passed in String
sun.swing.SwingUtilities2#clipStringIfNecessary(JComponent, FontMetrics, String, int)->String:::Clips the passed in String to the space provided.
sun.swing.SwingUtilities2#clipString(JComponent, FontMetrics, String, int)->String:::Clips the passed in String to the space provided
sun.swing.SwingUtilities2#drawString(JComponent, Graphics, String, int, int)->void:::Draws the string at the specified location.
sun.swing.SwingUtilities2#drawString(JComponent, Graphics, String, float, float, boolean)->void:::Draws the string at the specified location.
sun.swing.SwingUtilities2#drawStringUnderlineCharAt(JComponent, Graphics, String, int, int, int)->void::: swing utilities2 draw string underline char at
sun.swing.SwingUtilities2#drawStringUnderlineCharAt(JComponent, Graphics, String, int, float, float, boolean)->void:::Draws the string at the specified location underlining the specified character.
sun.swing.SwingUtilities2#loc2IndexFileList(JList, Point)->int:::A variation of locationToIndex() which only returns an index if the Point is within the actual bounds of a list item (not just in the cell) and if the JList has the "List.isFileList" client property set
sun.swing.SwingUtilities2#pointOutsidePrefSize(JTable, int, int, Point)->boolean:::Returns true if the given point is outside the preferredSize of the item at the given row of the table
sun.swing.SwingUtilities2#setLeadAnchorWithoutSelection(ListSelectionModel, int, int)->void:::Set the lead and anchor without affecting selection.
sun.swing.SwingUtilities2#shouldIgnore(MouseEvent, JComponent)->boolean:::Ignore mouse events if the component is null, not enabled, the event is not associated with the left mouse button, or the event has been consumed.
sun.swing.SwingUtilities2#adjustFocus(JComponent)->void:::Request focus on the given component if it doesn't already have it and isRequestFocusEnabled() returns true.
sun.swing.SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, int, int)->int:::The following draw functions have the same semantic as the Graphics methods with the same names
sun.swing.SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, float, float)->float::: swing utilities2 draw chars
sun.swing.SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, float, float, boolean)->float::: swing utilities2 draw chars
sun.swing.SwingUtilities2#getFontCharWidth(char, FontMetrics, boolean)->float::: swing utilities2 get font char width
sun.swing.SwingUtilities2#getFontCharsWidth(char[], int, int, FontMetrics, boolean)->float::: swing utilities2 get font chars width
sun.swing.SwingUtilities2#getFontStringWidth(String, FontMetrics, boolean)->float::: swing utilities2 get font string width
sun.swing.SwingUtilities2#drawString(JComponent, Graphics, AttributedCharacterIterator, int, int)->float::: swing utilities2 draw string
sun.swing.SwingUtilities2#drawString(JComponent, Graphics, AttributedCharacterIterator, float, float)->float::: swing utilities2 draw string
sun.swing.SwingUtilities2#drawVLine(Graphics, int, int, int)->void:::This method should be used for drawing a borders over a filled rectangle
sun.swing.SwingUtilities2#drawHLine(Graphics, int, int, int)->void:::This method should be used for drawing a borders over a filled rectangle
sun.swing.SwingUtilities2#drawRect(Graphics, int, int, int, int)->void:::This method should be used for drawing a borders over a filled rectangle
sun.swing.SwingUtilities2#getGraphics2D(Graphics)->Graphics2D::: swing utilities2 get graphics2 d
sun.swing.SwingUtilities2#getFontRenderContext(Component)->FontRenderContext::: swing utilities2 get font render context
sun.swing.SwingUtilities2#getFontMetrics(JComponent, Font)->FontMetrics::: swing utilities2 get font metrics
sun.swing.SwingUtilities2#isPrinting(Graphics)->boolean::: swing utilities2 is printing
sun.swing.SwingUtilities2#useSelectedTextColor(Highlighter.Highlight, JTextComponent)->boolean:::Determines whether the SelectedTextColor should be used for painting text foreground for the specified highlight
sun.swing.SwingUtilities2#canAccessSystemClipboard()->boolean:::checks the security permissions for accessing system clipboard  for untrusted context (see isTrustedContext) checks the permissions for the current event being handled
sun.swing.SwingUtilities2#canCurrentEventAccessSystemClipboard()->boolean:::Returns true if EventQueue.getCurrentEvent() has the permissions to access the system clipboard
sun.swing.SwingUtilities2#canEventAccessSystemClipboard(AWTEvent)->boolean:::Returns true if the given event has permissions to access the system clipboard
sun.swing.SwingUtilities2#checkAccess(int)->void:::Utility method that throws SecurityException if SecurityManager is set and modifiers are not public
sun.swing.SwingUtilities2#displayPropertiesToCSS(Font, Color)->String::: swing utilities2 display properties to s
sun.swing.SwingUtilities2#makeIcon(Class, Class, String)->Object:::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name
sun.swing.SwingUtilities2#makeIcon_Unprivileged(Class, Class, String)->Object:::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name
sun.swing.SwingUtilities2#isLocalDisplay()->boolean::: swing utilities2 is local display
sun.swing.SwingUtilities2#getUIDefaultsInt(Object)->int:::Returns an integer from the defaults table
sun.swing.SwingUtilities2#getUIDefaultsInt(Object, Locale)->int:::Returns an integer from the defaults table that is appropriate for the given locale
sun.swing.SwingUtilities2#getUIDefaultsInt(Object, int)->int:::Returns an integer from the defaults table
sun.swing.SwingUtilities2#getUIDefaultsInt(Object, Locale, int)->int:::Returns an integer from the defaults table that is appropriate for the given locale
sun.swing.SwingUtilities2#compositeRequestFocus(Component)->Component::: swing utilities2 composite request focus
sun.swing.SwingUtilities2#tabbedPaneChangeFocusTo(Component)->boolean:::Change focus to the visible component in JTabbedPane
sun.swing.SwingUtilities2#submit(Callable)->Future:::Submits a value-returning task for execution on the EDT and returns a Future representing the pending results of the task.
sun.swing.SwingUtilities2#submit(Runnable, V)->Future:::Submits a Runnable task for execution on the EDT and returns a Future representing that task.
sun.swing.SwingUtilities2#setSkipClickCount(Component, int)->void:::Sets the SKIP_CLICK_COUNT client property on the component if it is an instance of JTextComponent with a DefaultCaret
sun.swing.SwingUtilities2#getAdjustedClickCount(JTextComponent, MouseEvent)->int:::Return the MouseEvent's click count, possibly reduced by the value of the component's SKIP_CLICK_COUNT client property
sun.swing.SwingUtilities2#liesInHorizontal(Rectangle, Point, boolean, boolean)->Section:::This method divides a rectangle into two or three sections along the horizontal axis and determines which section the given point lies in; used by drag and drop when calculating drop locations
sun.swing.SwingUtilities2#liesInVertical(Rectangle, Point, boolean)->Section:::This method divides a rectangle into two or three sections along the vertical axis and determines which section the given point lies in; used by drag and drop when calculating drop locations
sun.swing.SwingUtilities2#convertColumnIndexToModel(TableColumnModel, int)->int:::Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model
sun.swing.SwingUtilities2#convertColumnIndexToView(TableColumnModel, int)->int:::Maps the index of the column in the cm at modelColumnIndex to the index of the column in the view
sun.swing.SwingUtilities2#setAltGraphMask(int)->int:::Sets the InputEvent.ALT_GRAPH mask on any modifier passed to the function
sun.swing.SwingUtilities2#getSystemMnemonicKeyMask()->int::: swing utilities2 get system mnemonic key mask
sun.swing.SwingUtilities2#getTreePath(TreeModelEvent, TreeModel)->TreePath:::Returns the TreePath that identifies the changed nodes.
sun.swing.SwingUtilities2#isScaledGraphics(Graphics)->boolean::: swing utilities2 is scaled graphics
sun.swing.SwingUtilities2#getAndSetAntialisingHintForScaledGraphics(Graphics)->Object:::Enables the antialiasing rendering hint for the scaled graphics and returns the previous hint value
sun.swing.SwingUtilities2#setAntialiasingHintForScaledGraphics(Graphics, Object)->void:::Sets the antialiasing rendering hint if its value is not null
sun.swing.SwingUtilities2#isFloatingPointScale(AffineTransform)->boolean::: swing utilities2 is floating point scale
sun.swing.SwingUtilities2#getBoolean(JComponent, String)->boolean:::Returns the client property for the given key if it is set; otherwise returns the  property.
sun.swing.SwingUtilities2.RepaintListener#repaintPerformed(JComponent, int, int, int, int)->void::: repaint listener repaint performed
sun.swing.SwingUtilities2#isScaleChanged(PropertyChangeEvent)->boolean:::Returns whether or not the scale used by GraphicsConfiguration was changed.
sun.swing.SwingUtilities2#isScaleChanged(String, Object, Object)->boolean:::Returns whether or not the scale used by GraphicsConfiguration was changed.
sun.swing.UIAction#getName()->String::: action get name
sun.swing.UIAction#getValue(String)->Object::: action get value
sun.swing.UIAction#putValue(String, Object)->void::: action put value
sun.swing.UIAction#setEnabled(boolean)->void::: action set enabled
sun.swing.UIAction#isEnabled()->boolean:::Cover method for isEnabled(null).
sun.swing.UIAction#accept(Object)->boolean:::Subclasses that need to conditionalize the enabled state should override this
sun.swing.UIAction#addPropertyChangeListener(PropertyChangeListener)->void::: action add property change listener
sun.swing.UIAction#removePropertyChangeListener(PropertyChangeListener)->void::: action remove property change listener
sun.swing.WindowsPlacesBar#doDirectoryChanged(File)->void::: windows places bar do directory changed
sun.swing.WindowsPlacesBar#propertyChange(PropertyChangeEvent)->void::: windows places bar property change
sun.swing.WindowsPlacesBar#actionPerformed(ActionEvent)->void::: windows places bar action performed
sun.swing.WindowsPlacesBar#getPreferredSize()->Dimension::: windows places bar get preferred size

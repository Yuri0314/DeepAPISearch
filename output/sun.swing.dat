AccumulativeRunnable#run(List):::Equivalent to Runnable.run method with the accumulated arguments to process.:::
AccumulativeRunnable#run():::This implementation calls {@code run(List<T> args) mehtod with the list of accumulated arguments.:::flush->run
AccumulativeRunnable#add(T...):::appends arguments and sends this Runnable for the execution if needed:::isSubmitted->if->new->ArrayList<T>->Collections->addAll->if->submit
AccumulativeRunnable#submit():::Sends this Runnable for the execution   This method is to be executed only from add method:::SwingUtilities->invokeLater
AccumulativeRunnable#flush():::Returns accumulated arguments and flashes the arguments storage.:::list->return
BakedArrayList#cacheHashCode():::Caches the hash code:::for->counter->size
BakedArrayList#hashCode()::: baked array list hash code:::return
BakedArrayList#equals(Object)::: baked array list equals:::list->size->size->if->list->size->return->while->if->get->list->get->equals->return->return
CachedPainter#getCache(Object)::: cached painter get cache:::synchronized->cache->cacheMap->get->if->if->new->ImageCache->else->new->ImageCache->cacheMap->put->return
CachedPainter#paint(Component, Graphics, int, int, int, int, Object...):::Renders the cached image to the passed in Graphic:::if->return->synchronized->paint0
CachedPainter#getImage(Object, Component, int, int, int, int, Object...)::: cached painter get image:::config->getGraphicsConfiguration->cache->getCache->image->cache->getImage->attempts->volatileImage->do->draw->if->switch->volatileImage->validate->volatileImage->flush->break->break->if->if->tx->config->getDefaultTransform->sx->tx->getScaleX->sy->tx->getScaleY->if->Double->compare->Double->compare->if->Math->abs->Math->abs->else->Math->ceil->Math->ceil->createImage->cache->setImage->if->g2->image->getGraphics->if->if->g2->scale->paintToImage->else->sd->SurfaceManager->getManager->getPrimarySurfaceData->sx->sd->getDefaultScaleX->sy->sd->getDefaultScaleY->if->Double->compare->Double->compare->g2->scale->Math->ceil->Math->ceil->paintToImage->g2->dispose->while->volatileImage->contentsLost->return
CachedPainter#paint0(Component, Graphics, int, int, int, int, Object...)::: cached painter paint0:::key->getClass->config->getGraphicsConfiguration->cache->getCache->image->cache->getImage->if->new->PainterMultiResolutionCachedImage->cache->setImage->if->setParams->paintImage
CachedPainter#paintToImage(Component, Image, Graphics, int, int, Object[]):::Paints the representation to cache to the supplied Graphics.:::
CachedPainter#paintImage(Component, Graphics, int, int, int, int, Image, Object[]):::Paints the image to the specified location.:::g->drawImage
CachedPainter#createImage(Component, int, int, GraphicsConfiguration, Object[]):::Creates the image to cache:::if->return->new->BufferedImage->return->config->createCompatibleVolatileImage
CachedPainter#flush():::Clear the image cache:::synchronized->getClass->getCache->flush
CachedPainter#getGraphicsConfiguration(Component)::: cached painter get graphics configuration:::if->return->return->c->getGraphicsConfiguration
CachedPainter.PainterMultiResolutionCachedImage#setParams(Component, Object[])::: painter multi resolution cached image set params:::
CachedPainter.PainterMultiResolutionCachedImage#getWidth(ImageObserver)::: painter multi resolution cached image get width:::return
CachedPainter.PainterMultiResolutionCachedImage#getHeight(ImageObserver)::: painter multi resolution cached image get height:::return
CachedPainter.PainterMultiResolutionCachedImage#getResolutionVariant(double, double)::: painter multi resolution cached image get resolution variant:::w->Math->ceil->h->Math->ceil->return->getImage
CachedPainter.PainterMultiResolutionCachedImage#getBaseImage()::: painter multi resolution cached image get base image:::return->getResolutionVariant
CachedPainter.PainterMultiResolutionCachedImage#getResolutionVariants()::: painter multi resolution cached image get resolution variants:::return->Arrays->getResolutionVariant->asList
DefaultLayoutStyle#getInstance()::: default layout style get instance:::return
DefaultLayoutStyle#getPreferredGap(JComponent, JComponent, ComponentPlacement, int, Container)::: default layout style get preferred gap:::if->throw->new->NullPointerException->checkPosition->if->indent->getIndent->if->return->return
DefaultLayoutStyle#getContainerGap(JComponent, int, Container)::: default layout style get container gap:::if->throw->new->NullPointerException->checkPosition->return
DefaultLayoutStyle#isLabelAndNonlabel(JComponent, JComponent, int):::Returns true if the classes identify a JLabel and a non-JLabel along the horizontal axis.:::if->c1Label->c2Label->return->return
DefaultLayoutStyle#getButtonGap(JComponent, JComponent, int, int):::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border:::getButtonGap->if->flipDirection->getButtonGap->if->return->return
DefaultLayoutStyle#getButtonGap(JComponent, int, int):::For some look and feels check boxs and radio buttons typically don't paint the border, yet they have padding for a border:::getButtonGap->return->Math->max
DefaultLayoutStyle#getButtonGap(JComponent, int):::If c is a check box or radio button, and the border is not painted this returns the inset along the specified axis.:::classID->c->getUIClassID->if->isBorderPainted->border->c->getBorder->if->return->getInset->return
DefaultLayoutStyle#checkPosition(int)::: default layout style check position:::if->throw->new->IllegalArgumentException
DefaultLayoutStyle#flipDirection(int)::: default layout style flip direction:::switch->return->return->return->return->return
DefaultLayoutStyle#getIndent(JComponent, int):::Returns the amount to indent the specified component if it's a JCheckBox or JRadioButton:::classID->c->getUIClassID->if->button->insets->c->getInsets->icon->getIcon->gap->button->getIconTextGap->if->isLeftAligned->return->icon->getIconWidth->else->if->isRightAligned->return->icon->getIconWidth->return
DefaultLayoutStyle#getIcon(AbstractButton)::: default layout style get icon:::icon->button->getIcon->if->return->key->if->else->if->if->oIcon->UIManager->get->if->return->return
DefaultLayoutStyle#isLeftAligned(AbstractButton, int)::: default layout style is left aligned:::if->ltr->button->getComponentOrientation->isLeftToRight->hAlign->button->getHorizontalAlignment->return->return
DefaultLayoutStyle#isRightAligned(AbstractButton, int)::: default layout style is right aligned:::if->ltr->button->getComponentOrientation->isLeftToRight->hAlign->button->getHorizontalAlignment->return->return
DefaultLayoutStyle#getInset(JComponent, int)::: default layout style get inset:::return->c->getInsets->getInset
DefaultLayoutStyle#getInset(Insets, int)::: default layout style get inset:::if->return->switch->return->return->return->return->return
DefaultLookup#setDefaultLookup(DefaultLookup):::Sets the DefaultLookup instance to use for the current AppContext:::synchronized->if->return->else->if->new->DefaultLookup->AppContext->getAppContext->put->Thread->currentThread
DefaultLookup#get(JComponent, ComponentUI, String)::: default lookup get:::lookupSet->synchronized->if->return->UIManager->c->getLocale->get->thisThread->Thread->currentThread->lookup->synchronized->if->else->AppContext->getAppContext->get->if->new->DefaultLookup->AppContext->getAppContext->put->return->lookup->getDefault
DefaultLookup#getInt(JComponent, ComponentUI, String, int)::: default lookup get int:::iValue->get->if->return->return->intValue
DefaultLookup#getInt(JComponent, ComponentUI, String)::: default lookup get int:::return->getInt
DefaultLookup#getInsets(JComponent, ComponentUI, String, Insets)::: default lookup get insets:::iValue->get->if->return->return
DefaultLookup#getInsets(JComponent, ComponentUI, String)::: default lookup get insets:::return->getInsets
DefaultLookup#getBoolean(JComponent, ComponentUI, String, boolean)::: default lookup get boolean:::iValue->get->if->return->return->booleanValue
DefaultLookup#getBoolean(JComponent, ComponentUI, String)::: default lookup get boolean:::return->getBoolean
DefaultLookup#getColor(JComponent, ComponentUI, String, Color)::: default lookup get color:::iValue->get->if->return->return
DefaultLookup#getColor(JComponent, ComponentUI, String)::: default lookup get color:::return->getColor
DefaultLookup#getIcon(JComponent, ComponentUI, String, Icon)::: default lookup get icon:::iValue->get->if->return->return
DefaultLookup#getIcon(JComponent, ComponentUI, String)::: default lookup get icon:::return->getIcon
DefaultLookup#getBorder(JComponent, ComponentUI, String, Border)::: default lookup get border:::iValue->get->if->return->return
DefaultLookup#getBorder(JComponent, ComponentUI, String)::: default lookup get border:::return->getBorder
DefaultLookup#getDefault(JComponent, ComponentUI, String)::: default lookup get default:::return->UIManager->c->getLocale->get
FilePane#uninstallUI()::: file pane uninstall i:::if->getModel->getModel->removePropertyChangeListener
FilePane#getFileChooser()::: file pane get file chooser:::return->fileChooserUIAccessor->getFileChooser
FilePane#getModel()::: file pane get model:::return->fileChooserUIAccessor->getModel
FilePane#getViewType()::: file pane get view type:::return
FilePane#setViewType(int)::: file pane set view type:::if->return->oldValue->createdViewPanel->newFocusOwner->switch->if->fileChooserUIAccessor->createList->if->createList->findChildComponent->if->list->getSelectionModel->if->detailsTable->setSelectionModel->else->list->setSelectionModel->list->setLayoutOrientation->break->if->fileChooserUIAccessor->createDetailsView->if->createDetailsView->findChildComponent->detailsTable->Math->detailsTable->getFont->getSize->max->setRowHeight->if->detailsTable->setSelectionModel->break->if->recursivelySetInheritsPopupMenu->isFocusOwner->if->owner->DefaultKeyboardFocusManager->getCurrentKeyboardFocusManager->getPermanentFocusOwner->remove->add->if->newFocusOwner->requestFocusInWindow->revalidate->repaint->updateViewMenu->firePropertyChange
FilePane.ViewTypeAction#actionPerformed(ActionEvent)::: view type action action performed:::setViewType
FilePane#getViewTypeAction(int)::: file pane get view type action:::return->new->ViewTypeAction
FilePane#recursivelySetInheritsPopupMenu(Container, boolean)::: file pane recursively set inherits popup menu:::if->setInheritsPopupMenu->n->container->getComponentCount->for->i
FilePane#installDefaults()::: file pane install defaults:::l->getFileChooser->getLocale->UIManager->getBorder->UIManager->getColor->UIManager->getBoolean->UIManager->getBoolean->UIManager->getString->UIManager->getString->UIManager->getString->new->StringArr->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getBoolean->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString
FilePane#getActions():::Fetches the command list for the FilePane:::if->actionList->new->ArrayList<Action>->action->actionList->new->FilePaneAction->add->actionList->new->FilePaneAction->add->actionList->new->FilePaneAction->add->fileChooserUIAccessor->getApproveSelectionAction->if->actionList->add->fileChooserUIAccessor->getChangeToParentDirectoryAction->if->actionList->add->getNewFolderAction->if->actionList->add->getViewTypeAction->if->actionList->add->getViewTypeAction->if->actionList->add->actionList->actionList->size->new->ActionArr->toArray->return->Arrays->copyOf
FilePane#createActionMap()::: file pane create action map:::super->getActionMap->getActions->addActionsToMap
FilePane#addActionsToMap(ActionMap, Action[])::: file pane add actions to map:::if->foreach->cmd->a->getValue->if->a->getValue->map->put
FilePane#updateListRowCount(JList)::: file pane update list row count:::if->list->getModel->getSize->setVisibleRowCount->else->list->setVisibleRowCount
FilePane#createList()::: file pane create list:::p->new->BorderLayout->new->JPanel->fileChooser->getFileChooser->list->new->JList<Object>->list->new->FileRenderer->setCellRenderer->list->setLayoutOrientation->list->putClientProperty->if->list->addFocusListener->updateListRowCount->getModel->new->ListDataListener->addListDataListener->getModel->addPropertyChangeListener->if->fileChooser->isMultiSelectionEnabled->list->setSelectionMode->else->list->setSelectionMode->list->new->SortableListModel->setModel->list->createListSelectionListener->addListSelectionListener->list->getMouseHandler->addMouseListener->scrollpane->new->JScrollPane->if->list->setBackground->if->scrollpane->setBorder->list->putClientProperty->p->add->return
FilePane.SortableListModel#getSize()::: sortable list model get size:::return->getModel->getSize
FilePane.SortableListModel#getElementAt(int)::: sortable list model get element at:::return->getModel->getRowSorter->convertRowIndexToModel->getElementAt
FilePane.SortableListModel#tableChanged(TableModelEvent)::: sortable list model table changed:::getSize->fireContentsChanged
FilePane.SortableListModel#sorterChanged(RowSorterEvent)::: sortable list model sorter changed:::getSize->fireContentsChanged
FilePane#getDetailsTableModel()::: file pane get details table model:::if->getFileChooser->new->DetailsTableModel->return
FilePane.DetailsTableModel#updateColumnInfo()::: details table model update column info:::dir->chooser->getCurrentDirectory->if->usesShellFolder->try->ShellFolder->getShellFolder->catch->finally->allColumns->ShellFolder->getFolderColumns->visibleColumns->new->ArrayList<ShellFolderColumnInfo>->new->intArr->for->i->visibleColumns->size->new->ShellFolderColumnInfoArr->visibleColumns->toArray->Arrays->copyOf->sortKeys->rowSorter->getSortKeys->fireTableStructureChanged->restoreSortKeys
FilePane.DetailsTableModel#restoreSortKeys(List)::: details table model restore sort keys:::if->for->i->sortKeys->size->if->rowSorter->setSortKeys
FilePane.DetailsTableModel#getRowCount()::: details table model get row count:::return->directoryModel->getSize
FilePane.DetailsTableModel#getColumnCount()::: details table model get column count:::return
FilePane.DetailsTableModel#getValueAt(int, int)::: details table model get value at:::return->directoryModel->getElementAt->getFileColumnValue
FilePane.DetailsTableModel#getFileColumnValue(File, int)::: details table model get file column value:::return->ShellFolder->getFolderColumnValue
FilePane.DetailsTableModel#setValueAt(Object, int, int)::: details table model set value at:::if->chooser->getFileChooser->f->getValueAt->if->oldDisplayName->chooser->getName->oldFileName->f->getName->newDisplayName->trim->newFileName->if->newDisplayName->equals->i1->oldFileName->length->i2->oldDisplayName->length->if->oldFileName->charAt->oldFileName->substring->fsv->chooser->getFileSystemView->f2->fsv->f->getParentFile->createFileObject->if->f2->exists->JOptionPane->MessageFormat->format->showMessageDialog->else->if->FilePane.this->getModel->renameFile->if->fsv->chooser->getCurrentDirectory->isParent->SwingUtilities->new->Runnable->invokeLater->else->else->JOptionPane->MessageFormat->format->showMessageDialog
FilePane.DetailsTableModel#isCellEditable(int, int)::: details table model is cell editable:::currentDirectory->getFileChooser->getCurrentDirectory->return->canWrite
FilePane.DetailsTableModel#contentsChanged(ListDataEvent)::: details table model contents changed:::new->DelayedSelectionUpdater->fireTableDataChanged
FilePane.DetailsTableModel#intervalAdded(ListDataEvent)::: details table model interval added:::i0->e->getIndex0->i1->e->getIndex1->if->file->getModel->getElementAt->if->file->equals->new->DelayedSelectionUpdater->e->getIndex0->e->getIndex1->fireTableRowsInserted
FilePane.DetailsTableModel#intervalRemoved(ListDataEvent)::: details table model interval removed:::e->getIndex0->e->getIndex1->fireTableRowsDeleted
FilePane.DetailsTableModel#getColumns()::: details table model get columns:::return
FilePane#updateDetailsColumnModel(JTable)::: file pane update details column model:::if->columns->detailsTableModel->getColumns->columnModel->new->DefaultTableColumnModel->for->i->if->columnModel->getColumnCount->columnModel->getColumn->getDetailsTableCellEditor->setCellEditor->table->setColumnModel
FilePane#getRowSorter()::: file pane get row sorter:::if->new->DetailsTableRowSorter->return
FilePane.DetailsTableRowSorter#updateComparators(ShellFolderColumnInfo[])::: details table row sorter update comparators:::for->i
FilePane.DetailsTableRowSorter#sort()::: details table row sorter sort:::ShellFolder->new->Callable<Void>->invoke
FilePane.DetailsTableRowSorter#modelStructureChanged()::: details table row sorter model structure changed:::super->modelStructureChanged->detailsTableModel->getColumns->updateComparators
FilePane.DetailsTableRowSorter.SorterModelWrapper#getModel()::: sorter model wrapper get model:::return->getDetailsTableModel
FilePane.DetailsTableRowSorter.SorterModelWrapper#getColumnCount()::: sorter model wrapper get column count:::return->getDetailsTableModel->getColumnCount
FilePane.DetailsTableRowSorter.SorterModelWrapper#getRowCount()::: sorter model wrapper get row count:::return->getDetailsTableModel->getRowCount
FilePane.DetailsTableRowSorter.SorterModelWrapper#getValueAt(int, int)::: sorter model wrapper get value at:::return->FilePane.this->getModel->getElementAt
FilePane.DetailsTableRowSorter.SorterModelWrapper#getIdentifier(int)::: sorter model wrapper get identifier:::return
FilePane.DirectoriesFirstComparatorWrapper#compare(File, File)::: directories first comparator wrapper compare:::if->traversable1->getFileChooser->isTraversable->traversable2->getFileChooser->isTraversable->if->return->if->return->if->detailsTableModel->getColumns->isCompareByColumn->return->comparator->getDetailsTableModel->getFileColumnValue->getDetailsTableModel->getFileColumnValue->compare->return->comparator->compare
FilePane#getDetailsTableCellEditor()::: file pane get details table cell editor:::if->new->JTextField->new->DetailsTableCellEditor->return
FilePane.DetailsTableCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: details table cell editor get table cell editor component:::comp->super->getTableCellEditorComponent->if->tf->getFileChooser->getName->setText->tf->selectAll->return
FilePane.DetailsTableCellRenderer#setBounds(int, int, int, int)::: details table cell renderer set bounds:::if->getHorizontalAlignment->Math->this->getPreferredSize->min->else->super->setBounds
FilePane.DetailsTableCellRenderer#getInsets(Insets)::: details table cell renderer get insets:::super->getInsets->return
FilePane.DetailsTableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: details table cell renderer get table cell renderer component:::if->table->convertColumnIndexToModel->table->isFocusOwner->super->getTableCellRendererComponent->setIcon->modelColumn->table->convertColumnIndexToModel->columnInfo->detailsTableModel->getColumns->alignment->columnInfo->getAlignment->if->setHorizontalAlignment->text->if->else->if->file->chooser->getName->icon->chooser->getIcon->setIcon->else->if->len->if->MessageFormat->format->else->if->MessageFormat->format->else->if->MessageFormat->format->else->MessageFormat->format->else->if->df->format->else->value->toString->setText->return
FilePane#createDetailsView()::: file pane create details view:::chooser->getFileChooser->p->new->BorderLayout->new->JPanel->detailsTable->getDetailsTableModel->new->JTable->detailsTable->getRowSorter->setRowSorter->detailsTable->setAutoCreateColumnsFromModel->detailsTable->chooser->getComponentOrientation->setComponentOrientation->detailsTable->setAutoResizeMode->detailsTable->setShowGrid->detailsTable->putClientProperty->detailsTable->addKeyListener->font->list->getFont->detailsTable->setFont->detailsTable->new->Dimension->setIntercellSpacing->headerRenderer->detailsTable->getTableHeader->getDefaultRenderer->new->AlignableTableHeaderRenderer->detailsTable->getTableHeader->setDefaultRenderer->cellRenderer->new->DetailsTableCellRenderer->detailsTable->setDefaultRenderer->detailsTable->getColumnModel->getSelectionModel->setSelectionMode->detailsTable->getMouseHandler->addMouseListener->detailsTable->putClientProperty->if->detailsTable->addFocusListener->am->SwingUtilities->getUIActionMap->am->remove->am->remove->am->remove->am->remove->detailsTable->setFocusTraversalKeys->detailsTable->setFocusTraversalKeys->scrollpane->new->JScrollPane->scrollpane->chooser->getComponentOrientation->setComponentOrientation->LookAndFeel->scrollpane->getViewport->installColors->scrollpane->new->ComponentAdapter->addComponentListener->scrollpane->new->MouseAdapter->addMouseListener->detailsTable->list->getForeground->setForeground->detailsTable->list->getBackground->setBackground->if->scrollpane->setBorder->p->add->detailsTableModel->fireTableStructureChanged->detailsTable->putClientProperty->return
FilePane.AlignableTableHeaderRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: alignable table header renderer get table cell renderer component:::c->wrappedRenderer->getTableCellRendererComponent->modelColumn->table->convertColumnIndexToModel->columnInfo->detailsTableModel->getColumns->alignment->columnInfo->getAlignment->if->if->setHorizontalAlignment->return
FilePane#fixNameColumnWidth(int)::: file pane fix name column width:::nameCol->detailsTable->getColumnModel->getColumn->tableWidth->detailsTable->getPreferredSize->if->nameCol->nameCol->getPreferredWidth->setPreferredWidth
FilePane.DelayedSelectionUpdater#run()::: delayed selection updater run:::setFileSelected->if->getRowSorter->getModel->indexOf->convertRowIndexToView->editFileName
FilePane#createListSelectionListener():::Creates a selection listener for the list of files and directories.:::return->fileChooserUIAccessor->createListSelectionListener
FilePane#getEditIndex()::: file pane get edit index:::return
FilePane#setEditIndex(int)::: file pane set edit index:::
FilePane#resetEditIndex()::: file pane reset edit index:::
FilePane#cancelEdit()::: file pane cancel edit:::if->list->remove->repaint->else->if->detailsTable->isEditing->detailsTable->getCellEditor->cancelCellEditing
FilePane#editFileName(int)::: file pane edit file name:::chooser->getFileChooser->currentDirectory->chooser->getCurrentDirectory->if->canWrite->return->ensureIndexIsVisible->switch->getModel->getRowSorter->convertRowIndexToModel->getElementAt->r->list->getCellBounds->if->new->JTextField->editCell->setName->editCell->new->EditActionListener->addActionListener->editCell->addFocusListener->editCell->setNextFocusableComponent->list->add->editCell->chooser->getName->setText->orientation->list->getComponentOrientation->editCell->setComponentOrientation->icon->chooser->getIcon->editX->icon->getIconWidth->if->orientation->isLeftToRight->editCell->setBounds->else->editCell->setBounds->editCell->requestFocus->editCell->selectAll->break->detailsTable->editCellAt->break
FilePane.EditActionListener#actionPerformed(ActionEvent)::: edit action listener action performed:::applyEdit
FilePane#applyEdit()::: file pane apply edit:::if->editFile->exists->chooser->getFileChooser->oldDisplayName->chooser->getName->oldFileName->editFile->getName->newDisplayName->editCell->getText->trim->newFileName->if->newDisplayName->equals->i1->oldFileName->length->i2->oldDisplayName->length->if->oldFileName->charAt->oldFileName->substring->fsv->chooser->getFileSystemView->f2->fsv->editFile->getParentFile->createFileObject->if->f2->exists->JOptionPane->MessageFormat->format->showMessageDialog->else->if->getModel->renameFile->if->fsv->chooser->getCurrentDirectory->isParent->if->chooser->isMultiSelectionEnabled->chooser->new->FileArr->setSelectedFiles->else->chooser->setSelectedFile->else->else->JOptionPane->MessageFormat->format->showMessageDialog->if->detailsTable->isEditing->detailsTable->getCellEditor->stopCellEditing->cancelEdit
FilePane#getNewFolderAction()::: file pane get new folder action:::if->new->AbstractAction->return
FilePane.FileRenderer#getListCellRendererComponent(JList, Object, int, boolean, boolean)::: file renderer get list cell renderer component:::if->list->isFocusOwner->super->getListCellRendererComponent->file->fileName->getFileChooser->getName->setText->list->getFont->setFont->icon->getFileChooser->getIcon->if->setIcon->else->if->getFileChooser->getFileSystemView->isTraversable->setText->return
FilePane#setFileSelected()::: file pane set file selected:::if->getFileChooser->isMultiSelectionEnabled->isDirectorySelected->files->getFileChooser->getSelectedFiles->selectedObjects->list->getSelectedValues->listSelectionModel->setValueIsAdjusting->try->lead->listSelectionModel->getLeadSelectionIndex->anchor->listSelectionModel->getAnchorSelectionIndex->Arrays->sort->Arrays->sort->shouldIndex->actuallyIndex->while->comparison->compareTo->if->doSelectFile->else->if->doDeselectFile->else->while->doSelectFile->while->doDeselectFile->if->moveLeadSelectionIndex->listSelectionModel->setAnchorSelectionIndex->catch->finally->listSelectionModel->setValueIsAdjusting->else->chooser->getFileChooser->f->if->isDirectorySelected->getDirectory->else->chooser->getSelectedFile->i->if->getModel->indexOf->viewIndex->getRowSorter->convertRowIndexToView->listSelectionModel->setSelectionInterval->ensureIndexIsVisible->else->clearSelection
FilePane#doSelectFile(File)::: file pane do select file:::index->getModel->indexOf->if->getRowSorter->convertRowIndexToView->listSelectionModel->addSelectionInterval
FilePane#doDeselectFile(Object)::: file pane do deselect file:::index->getRowSorter->getModel->indexOf->convertRowIndexToView->listSelectionModel->removeSelectionInterval
FilePane#doSelectedFileChanged(PropertyChangeEvent)::: file pane do selected file changed:::applyEdit->f->e->getNewValue->fc->getFileChooser->if->fc->isFileSelectionEnabled->f->isDirectory->f->isDirectory->fc->isDirectorySelectionEnabled->setFileSelected
FilePane#doSelectedFilesChanged(PropertyChangeEvent)::: file pane do selected files changed:::applyEdit->files->e->getNewValue->fc->getFileChooser->if->fc->isDirectorySelectionEnabled->isDirectory->setFileSelected
FilePane#doDirectoryChanged(PropertyChangeEvent)::: file pane do directory changed:::getDetailsTableModel->updateColumnInfo->fc->getFileChooser->fsv->fc->getFileSystemView->applyEdit->resetEditIndex->ensureIndexIsVisible->currentDirectory->fc->getCurrentDirectory->if->if->getNewFolderAction->canWrite->setEnabled->fileChooserUIAccessor->getChangeToParentDirectoryAction->fsv->isRoot->setEnabled->if->list->clearSelection
FilePane#doFilterChanged(PropertyChangeEvent)::: file pane do filter changed:::applyEdit->resetEditIndex->clearSelection
FilePane#doFileSelectionModeChanged(PropertyChangeEvent)::: file pane do file selection mode changed:::applyEdit->resetEditIndex->clearSelection
FilePane#doMultiSelectionChanged(PropertyChangeEvent)::: file pane do multi selection changed:::if->getFileChooser->isMultiSelectionEnabled->listSelectionModel->setSelectionMode->else->listSelectionModel->setSelectionMode->clearSelection->getFileChooser->setSelectedFiles
FilePane#propertyChange(PropertyChangeEvent)::: file pane property change:::if->setViewType->s->e->getPropertyName->if->s->equals->doSelectedFileChanged->else->if->s->equals->doSelectedFilesChanged->else->if->s->equals->doDirectoryChanged->else->if->s->equals->doFilterChanged->else->if->s->equals->doFileSelectionModeChanged->else->if->s->equals->doMultiSelectionChanged->else->if->s->equals->applyEdit->else->if->s->equals->e->getNewValue->setCursor->else->if->s->equals->o->e->getNewValue->cc->e->getSource->if->e->getOldValue->cc->applyComponentOrientation->if->detailsTable->setComponentOrientation->detailsTable->getParent->getParent->setComponentOrientation
FilePane#ensureIndexIsVisible(int)::: file pane ensure index is visible:::if->if->list->ensureIndexIsVisible->if->detailsTable->detailsTable->getCellRect->scrollRectToVisible
FilePane#ensureFileIsVisible(JFileChooser, File)::: file pane ensure file is visible:::modelIndex->getModel->indexOf->if->getRowSorter->convertRowIndexToView->ensureIndexIsVisible
FilePane#rescanCurrentDirectory()::: file pane rescan current directory:::getModel->validateFileCache
FilePane#clearSelection()::: file pane clear selection:::if->listSelectionModel->clearSelection->if->moveLeadSelectionIndex->listSelectionModel->setAnchorSelectionIndex
FilePane#getViewMenu()::: file pane get view menu:::if->new->JMenu->viewButtonGroup->new->ButtonGroup->for->i->updateViewMenu->return
FilePane#updateViewMenu()::: file pane update view menu:::if->comps->viewMenu->getMenuComponents->foreach->if->mi->if->mi->getAction->mi->setSelected
FilePane#getComponentPopupMenu()::: file pane get component popup menu:::popupMenu->getFileChooser->getComponentPopupMenu->if->return->viewMenu->getViewMenu->if->new->JPopupMenu->if->contextMenu->add->if->contextMenu->addSeparator->actionMap->getActionMap->refreshAction->actionMap->get->newFolderAction->actionMap->get->if->contextMenu->add->if->contextMenu->addSeparator->if->contextMenu->add->if->viewMenu->getPopupMenu->setInvoker->return
FilePane#getMouseHandler()::: file pane get mouse handler:::if->new->Handler->return
FilePane.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::source->evt->getSource->index->if->SwingUtilities2->evt->getPoint->loc2IndexFileList->else->if->table->p->evt->getPoint->table->rowAtPoint->pointOutsidePrefSize->SwingUtilities2->table->columnAtPoint->pointOutsidePrefSize->if->return->if->listSelectionModel->isSelectedIndex->r->list->getCellBounds->newEvent->evt->getID->evt->getWhen->evt->getModifiers->evt->getXOnScreen->evt->getYOnScreen->evt->getClickCount->evt->isPopupTrigger->evt->getButton->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->else->return->if->SwingUtilities->isLeftMouseButton->fc->getFileChooser->if->evt->getClickCount->if->fc->isMultiSelectionEnabled->fc->getSelectedFiles->listSelectionModel->isSelectedIndex->getEditIndex->editFileName->else->if->setEditIndex->else->resetEditIndex->else->if->evt->getClickCount->resetEditIndex->if->getDoubleClickListener->getDoubleClickListener->mouseClicked
FilePane.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::source->evt->getSource->if->table->evt->getSource->th1->getFileChooser->getTransferHandler->th2->table->getTransferHandler->if->table->setTransferHandler->dragEnabled->getFileChooser->getDragEnabled->if->table->getDragEnabled->table->setDragEnabled->else->if->if->getDoubleClickListener->getDoubleClickListener->mouseEntered
FilePane.Handler#mouseExited(MouseEvent)::: handler mouse exited:::if->evt->getSource->if->getDoubleClickListener->getDoubleClickListener->mouseExited
FilePane.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->evt->getSource->if->getDoubleClickListener->getDoubleClickListener->mousePressed
FilePane.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->evt->getSource->if->getDoubleClickListener->getDoubleClickListener->mouseReleased
FilePane.Handler#getDoubleClickListener()::: handler get double click listener:::if->fileChooserUIAccessor->createDoubleClickListener->return
FilePane#isDirectorySelected():::Property to remember whether a directory is currently selected in the UI.:::return->fileChooserUIAccessor->isDirectorySelected
FilePane#getDirectory():::Property to remember the directory that is currently selected in the UI.:::return->fileChooserUIAccessor->getDirectory
FilePane#findChildComponent(Container, Class)::: file pane find child component:::n->container->getComponentCount->for->i->return
FilePane#canWrite(File)::: file pane can write:::if->f->exists->return->try->if->return->f->canWrite->else->if->getFileChooser->usesShellFolder->try->return->ShellFolder->getShellFolder->canWrite->catch->return->finally->else->return->f->canWrite->catch->return->finally
FilePane#usesShellFolder(JFileChooser):::Returns true if specified FileChooser should use ShellFolder:::prop->chooser->getClientProperty->return->chooser->getFileSystemView->FileSystemView->getFileSystemView->equals->prop->booleanValue
FilePane.FileChooserUIAccessor#getFileChooser()::: file chooser accessor get file chooser:::
FilePane.FileChooserUIAccessor#getModel()::: file chooser accessor get model:::
FilePane.FileChooserUIAccessor#createList()::: file chooser accessor create list:::
FilePane.FileChooserUIAccessor#createDetailsView()::: file chooser accessor create details view:::
FilePane.FileChooserUIAccessor#isDirectorySelected()::: file chooser accessor is directory selected:::
FilePane.FileChooserUIAccessor#getDirectory()::: file chooser accessor get directory:::
FilePane.FileChooserUIAccessor#getApproveSelectionAction()::: file chooser accessor get approve selection action:::
FilePane.FileChooserUIAccessor#getChangeToParentDirectoryAction()::: file chooser accessor get change to parent directory action:::
FilePane.FileChooserUIAccessor#getNewFolderAction()::: file chooser accessor get new folder action:::
FilePane.FileChooserUIAccessor#createDoubleClickListener(JList)::: file chooser accessor create double click listener:::
FilePane.FileChooserUIAccessor#createListSelectionListener()::: file chooser accessor create list selection listener:::
ImageCache#setMaxCount(int)::: image cache set max count:::
ImageCache#flush()::: image cache flush:::entries->clear
ImageCache#getEntry(Object, GraphicsConfiguration, int, int, Object[])::: image cache get entry:::entry->iter->entries->listIterator->while->iter->hasNext->ref->iter->next->ref->get->if->iter->remove->else->if->entry->equals->iter->remove->entries->addFirst->return->new->Entry->if->entries->size->entries->removeLast->entries->new->SoftReference<Entry>->addFirst->return
ImageCache#getImage(Object, GraphicsConfiguration, int, int, Object[]):::Returns the cached Image, or null, for the specified arguments.:::entry->getEntry->return->entry->getImage
ImageCache#setImage(Object, GraphicsConfiguration, int, int, Object[], Image):::Sets the cached image for the specified constraints.:::entry->getEntry->entry->setImage
ImageCache.Entry#setImage(Image)::: entry set image:::
ImageCache.Entry#getImage()::: entry get image:::return
ImageCache.Entry#toString()::: entry to string:::value->super->toString->if->for->counter->return
ImageCache.Entry#equals(GraphicsConfiguration, int, int, Object[])::: entry equals:::if->equals->if->return->if->for->counter->return->return
JLightweightFrame#dispose()::: lightweight frame dispose:::SwingAccessor->getRepaintManagerAccessor->RepaintManager->currentManager->removeRepaintListener->super->dispose
JLightweightFrame#setContent(LightweightContent):::Sets the LightweightContent instance for this frame:::if->println->return->content->getComponent->d->getPreferredSize->content->preferredSizeChanged->getMaximumSize->content->maximumSizeChanged->getMinimumSize->content->minimumSizeChanged->initInterior
JLightweightFrame#getGraphics()::: lightweight frame get graphics:::if->return->g->bbImage->createGraphics->g->getBackground->setBackground->g->getForeground->setColor->g->getFont->setFont->g->scale->return
JLightweightFrame#grabFocus()::: lightweight frame grab focus:::if->content->focusGrabbed
JLightweightFrame#ungrabFocus()::: lightweight frame ungrab focus:::if->content->focusUngrabbed
JLightweightFrame#getScaleFactor()::: lightweight frame get scale factor:::return
JLightweightFrame#getScaleFactorX()::: lightweight frame get scale factor x:::return
JLightweightFrame#getScaleFactorY()::: lightweight frame get scale factor y:::return
JLightweightFrame#notifyDisplayChanged(int)::: lightweight frame notify display changed:::notifyDisplayChanged
JLightweightFrame#notifyDisplayChanged(double, double)::: lightweight frame notify display changed:::if->Double->compare->Double->compare->if->content->paintLock->try->if->getWidth->getHeight->resizeBuffer->catch->finally->if->content->paintUnlock->if->isVisible->peer->AWTAccessor->getComponentAccessor->getPeer->if->displayChanged->repaint
JLightweightFrame#addNotify()::: lightweight frame add notify:::super->addNotify->peer->AWTAccessor->getComponentAccessor->getPeer->if->displayChanged
JLightweightFrame#syncCopyBuffer(boolean, int, int, int, int, double, double)::: lightweight frame sync copy buffer:::content->paintLock->try->srcBuffer->bbImage->getRaster->getDataBuffer->getData->if->new->intArr->linestride->bbImage->getWidth->startX->Math->floor->startY->Math->floor->width->Math->ceil->height->Math->ceil->if->if->bbImage->getHeight->bbImage->getHeight->for->i->catch->finally->content->paintUnlock
JLightweightFrame#notifyImageUpdated(int, int, int, int)::: lightweight frame notify image updated:::if->syncCopyBuffer->content->imageUpdated
JLightweightFrame#initInterior()::: lightweight frame init interior:::new->JPanel->contentPane->new->BorderLayout->setLayout->contentPane->add->if->AccessController->new->GetPropertyAction->doPrivileged->equals->contentPane->setOpaque->setContentPane->contentPane->new->ContainerListener->addContainerListener
JLightweightFrame#reshape(int, int, int, int)::: lightweight frame reshape:::super->reshape->if->return->if->content->paintLock->try->createBB->newW->newH->if->imgWidth->Math->bbImage->getWidth->round->imgHeight->Math->bbImage->getHeight->round->if->if->oldW->oldH->if->else->if->else->Math->max->if->else->Math->max->if->resizeBuffer->return->content->imageReshaped->catch->finally->if->content->paintUnlock
JLightweightFrame#resizeBuffer(int, int, double, double)::: lightweight frame resize buffer:::Math->round->Math->round->new->BufferedImage->pixels->bbImage->getRaster->getDataBuffer->getData->if->syncCopyBuffer->content->bbImage->getWidth->imageBufferReset
JLightweightFrame#getRootPane()::: lightweight frame get root pane:::return
JLightweightFrame#setContentPane(Container)::: lightweight frame set content pane:::getRootPane->setContentPane
JLightweightFrame#getContentPane()::: lightweight frame get content pane:::return->getRootPane->getContentPane
JLightweightFrame#setLayeredPane(JLayeredPane)::: lightweight frame set layered pane:::getRootPane->setLayeredPane
JLightweightFrame#getLayeredPane()::: lightweight frame get layered pane:::return->getRootPane->getLayeredPane
JLightweightFrame#setGlassPane(Component)::: lightweight frame set glass pane:::getRootPane->setGlassPane
JLightweightFrame#getGlassPane()::: lightweight frame get glass pane:::return->getRootPane->getGlassPane
JLightweightFrame#updateClientCursor()::: lightweight frame update client cursor:::pointerInfo->MouseInfo->getPointerInfo->if->return->p->pointerInfo->getLocation->SwingUtilities->convertPointFromScreen->target->SwingUtilities->getDeepestComponentAt->if->content->target->getCursor->setCursor
JLightweightFrame#overrideNativeWindowHandle(long, Runnable)::: lightweight frame override native window handle:::peer->AWTAccessor->getComponentAccessor->getPeer->if->overrideWindowHandle->if->closeWindow->run
JLightweightFrame#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)::: lightweight frame create drag gesture recognizer:::return->content->createDragGestureRecognizer
JLightweightFrame#createDragSourceContextPeer(DragGestureEvent)::: lightweight frame create drag source context peer:::return->content->createDragSourceContextPeer
JLightweightFrame#addDropTarget(DropTarget)::: lightweight frame add drop target:::if->return->content->addDropTarget
JLightweightFrame#removeDropTarget(DropTarget)::: lightweight frame remove drop target:::if->return->content->removeDropTarget
LightweightContent#getComponent():::The client application overrides this method to return the JComponent instance which the JLightweightFrame container will paint as its lightweight content:::
LightweightContent#paintLock():::JLightweightFrame calls this method to notify the client application that it acquires the paint lock:::
LightweightContent#paintUnlock():::JLightweightFrame calls this method to notify the client application that it releases the paint lock:::
LightweightContent#imageBufferReset(int[], int, int, int, int, int, int):::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer:::imageBufferReset
LightweightContent#imageBufferReset(int[], int, int, int, int, int, double, double):::JLightweightFrame calls this method to notify the client application that a new data buffer has been set as a content pixel buffer:::Math->round->imageBufferReset
LightweightContent#imageBufferReset(int[], int, int, int, int, int):::The default implementation for #imageBufferReset uses a hard-coded value of 1 for the scale factor:::imageBufferReset
LightweightContent#imageReshaped(int, int, int, int):::JLightweightFrame calls this method to notify the client application that the content image bounds have been changed within the image's pixel buffer.:::
LightweightContent#imageUpdated(int, int, int, int):::JLightweightFrame calls this method to notify the client application that a part of the content image, or the whole image has been updated:::
LightweightContent#focusGrabbed():::JLightweightFrame calls this method to notify the client application that the frame has grabbed focus.:::
LightweightContent#focusUngrabbed():::JLightweightFrame calls this method to notify the client application that the frame has ungrabbed focus.:::
LightweightContent#preferredSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content preferred size has changed.:::
LightweightContent#maximumSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content maximum size has changed.:::
LightweightContent#minimumSizeChanged(int, int):::JLightweightFrame calls this method to notify the client application that the content minimum size has changed.:::
LightweightContent#setCursor(Cursor):::JLightweightFrame calls this method to notify the client application that in needs to set a cursor:::
LightweightContent#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener):::Create a drag gesture recognizer for the lightweight frame.:::return
LightweightContent#createDragSourceContextPeer(DragGestureEvent):::Create a drag source context peer for the lightweight frame.:::return
LightweightContent#addDropTarget(DropTarget):::Adds a drop target to the lightweight frame.:::
LightweightContent#removeDropTarget(DropTarget):::Removes a drop target from the lightweight frame.:::
MenuItemCheckIconFactory#getIcon(JMenuItem)::: menu item check icon factory get icon:::
MenuItemCheckIconFactory#isCompatible(Object, String)::: menu item check icon factory is compatible:::
MenuItemLayoutHelper#reset(JMenuItem, Icon, Icon, Rectangle, int, String, boolean, Font, Font, boolean, String)::: menu item layout helper reset:::getMenuItemParent->getAccText->mi->getVerticalAlignment->mi->getHorizontalAlignment->mi->getVerticalTextPosition->mi->getHorizontalTextPosition->mi->getFontMetrics->mi->getFontMetrics->isColumnLayout->getIcon->mi->getText->getAfterCheckIconGap->getMinTextOffset->mi->getClientProperty->new->RectSize->new->RectSize->new->RectSize->new->RectSize->new->RectSize->new->RectSize->calcExtraWidths->calcWidthsAndHeights->setOriginalWidths->calcMaxWidths->getLeadingGap->calcMaxTextOffset
MenuItemLayoutHelper#calcExtraWidths()::: menu item layout helper calc extra widths:::getLeftExtraWidth
MenuItemLayoutHelper#getLeftExtraWidth(String)::: menu item layout helper get left extra width:::lsb->SwingUtilities2->getLeftSideBearing->if->return->else->return
MenuItemLayoutHelper#setOriginalWidths()::: menu item layout helper set original widths:::
MenuItemLayoutHelper#getAccText(String)::: menu item layout helper get acc text:::accText->accelerator->mi->getAccelerator->if->modifiers->accelerator->getModifiers->if->KeyEvent->getKeyModifiersText->keyCode->accelerator->getKeyCode->if->KeyEvent->getKeyText->else->accelerator->getKeyChar->return
MenuItemLayoutHelper#getIcon(String)::: menu item layout helper get icon:::icon->iconFactory->UIManager->get->if->iconFactory->isCompatible->mi->getIcon->return
MenuItemLayoutHelper#getMinTextOffset(String)::: menu item layout helper get min text offset:::minimumTextOffset->minimumTextOffsetObject->UIManager->get->if->return
MenuItemLayoutHelper#getAfterCheckIconGap(String)::: menu item layout helper get after check icon gap:::afterCheckIconGap->afterCheckIconGapObject->UIManager->get->if->return
MenuItemLayoutHelper#getLeadingGap(String)::: menu item layout helper get leading gap:::if->checkSize->getMaxWidth->return->getCheckOffset->else->return
MenuItemLayoutHelper#getCheckOffset(String)::: menu item layout helper get check offset:::checkIconOffset->checkIconOffsetObject->UIManager->get->if->return
MenuItemLayoutHelper#calcWidthsAndHeights()::: menu item layout helper calc widths and heights:::if->icon->getIconWidth->icon->getIconHeight->if->accText->equals->SwingUtilities2->stringWidth->accFm->getHeight->if->else->if->text->equals->if->htmlView->getPreferredSpan->htmlView->getPreferredSpan->else->SwingUtilities2->stringWidth->fm->getHeight->if->if->checkIcon->getIconWidth->checkIcon->getIconHeight->if->arrowIcon->getIconWidth->arrowIcon->getIconHeight->if->max->else->textRect->new->Rectangle->iconRect->new->Rectangle->SwingUtilities->layoutCompoundLabel->labelRect->iconRect->union
MenuItemLayoutHelper#calcMaxWidths()::: menu item layout helper calc max widths:::calcMaxWidth->calcMaxWidth->calcMaxWidth->if->calcMaxWidth->calcMaxWidth->curGap->if->iconSize->getMaxWidth->textSize->getMaxWidth->calcMaxValue->else->getParentIntProperty->calcMaxWidth->candidateTextWidth->if->calcMaxValue
MenuItemLayoutHelper#calcMaxWidth(RectSize, Object)::: menu item layout helper calc max width:::calcMaxValue
MenuItemLayoutHelper#calcMaxValue(Object, int):::Calculates and returns maximal value through specified parent component client property.:::maxValue->getParentIntProperty->if->if->miParent->putClientProperty->return->else->return
MenuItemLayoutHelper#getParentIntProperty(Object):::Returns parent client property as int.:::value->if->miParent->getClientProperty->if->return
MenuItemLayoutHelper#isColumnLayout(boolean, JMenuItem)::: menu item layout helper is column layout:::return->mi->getHorizontalAlignment->mi->getHorizontalTextPosition->mi->getVerticalTextPosition->isColumnLayout
MenuItemLayoutHelper#isColumnLayout(boolean, int, int, int):::Answers should we do column layout for a menu item or not:::if->return->if->if->return->if->return->else->if->return->if->return->return
MenuItemLayoutHelper#calcMaxTextOffset(Rectangle):::Calculates maximal text offset:::if->return->offset->if->if->if->calcMaxValue
MenuItemLayoutHelper#layoutMenuItem():::Layout icon, text, check icon, accelerator text and arrow icon in the viewRect and return their positions:::lr->createLayoutResult->prepareForLayout->if->isColumnLayout->if->isLeftToRight->getLTRColumnAlignment->doLTRColumnLayout->else->getRTLColumnAlignment->doRTLColumnLayout->else->if->isLeftToRight->getLTRColumnAlignment->doLTRComplexLayout->else->getRTLColumnAlignment->doRTLComplexLayout->alignAccCheckAndArrowVertically->return
MenuItemLayoutHelper#createLayoutResult()::: menu item layout helper create layout result:::return->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->LayoutResult
MenuItemLayoutHelper#getLTRColumnAlignment()::: menu item layout helper get column alignment:::return
MenuItemLayoutHelper#getRTLColumnAlignment()::: menu item layout helper get column alignment:::return
MenuItemLayoutHelper#prepareForLayout(LayoutResult)::: menu item layout helper prepare for layout:::
MenuItemLayoutHelper#alignAccCheckAndArrowVertically(LayoutResult):::Aligns the accelertor text and the check and arrow icons vertically with the center of the label rect.:::fixVerticalAlignment->if->fixVerticalAlignment->fixVerticalAlignment
MenuItemLayoutHelper#fixVerticalAlignment(LayoutResult, Rectangle):::Fixes vertical alignment of all menu item elements if rect.y or (rect.y + rect.height) is out of viewRect bounds:::delta->if->else->if->if
MenuItemLayoutHelper#doLTRColumnLayout(LayoutResult, ColumnAlignment)::: menu item layout helper do column layout:::calcXPositionsLTR->if->calcXPositionsRTL->textOffset->if->alignRects->calcTextAndIconYPositions->lr->union->setLabelRect
MenuItemLayoutHelper#doLTRComplexLayout(LayoutResult, ColumnAlignment)::: menu item layout helper do complex layout:::calcXPositionsLTR->if->calcXPositionsRTL->labelOffset->if->alignRects->calcLabelYPosition->layoutIconAndTextInLabelRect
MenuItemLayoutHelper#doRTLColumnLayout(LayoutResult, ColumnAlignment)::: menu item layout helper do column layout:::calcXPositionsRTL->if->calcXPositionsLTR->textOffset->if->alignRects->calcTextAndIconYPositions->lr->union->setLabelRect
MenuItemLayoutHelper#doRTLComplexLayout(LayoutResult, ColumnAlignment)::: menu item layout helper do complex layout:::calcXPositionsRTL->if->calcXPositionsLTR->labelOffset->if->alignRects->calcLabelYPosition->layoutIconAndTextInLabelRect
MenuItemLayoutHelper#alignRects(LayoutResult, ColumnAlignment)::: menu item layout helper align rects:::alignment->getCheckAlignment->checkSize->getOrigWidth->alignRect->alignment->getIconAlignment->iconSize->getOrigWidth->alignRect->alignment->getTextAlignment->textSize->getOrigWidth->alignRect->alignment->getAccAlignment->accSize->getOrigWidth->alignRect->alignment->getArrowAlignment->arrowSize->getOrigWidth->alignRect
MenuItemLayoutHelper#alignRect(Rectangle, int, int)::: menu item layout helper align rect:::if
MenuItemLayoutHelper#layoutIconAndTextInLabelRect(LayoutResult)::: menu item layout helper layout icon and text in label rect:::lr->new->Rectangle->setTextRect->lr->new->Rectangle->setIconRect->SwingUtilities->layoutCompoundLabel
MenuItemLayoutHelper#calcXPositionsLTR(int, int, int, Rectangle...)::: menu item layout helper calc positions r:::curXPos->foreach->if
MenuItemLayoutHelper#calcXPositionsRTL(int, int, int, Rectangle...)::: menu item layout helper calc positions l:::curXPos->foreach->if
MenuItemLayoutHelper#calcTextAndIconYPositions(LayoutResult):::Sets Y coordinates of text and icon taking into account the vertical alignment:::if->else->if->else->if
MenuItemLayoutHelper#calcLabelYPosition(LayoutResult):::Sets labelRect Y coordinate taking into account the vertical alignment:::if->else->if->else->if
MenuItemLayoutHelper#getMenuItemParent(JMenuItem):::Returns parent of this component if it is not a top-level menu Otherwise returns null.:::parent->menuItem->getParent->if->isTopLevelMenu->return->else->return
MenuItemLayoutHelper#clearUsedParentClientProperties(JMenuItem)::: menu item layout helper clear used parent client properties:::getMenuItemParent->clearUsedClientProperties
MenuItemLayoutHelper#clearUsedClientProperties(JComponent)::: menu item layout helper clear used client properties:::if->c->putClientProperty->c->putClientProperty->c->putClientProperty->c->putClientProperty->c->putClientProperty->c->putClientProperty->c->putClientProperty
MenuItemLayoutHelper#max(int...):::Finds and returns maximal integer value in the given array.:::maxValue->foreach->if->return
MenuItemLayoutHelper#createMaxRect()::: menu item layout helper create max rect:::return->new->Rectangle
MenuItemLayoutHelper#addMaxWidth(RectSize, int, Dimension)::: menu item layout helper add max width:::if
MenuItemLayoutHelper#addWidth(int, int, Dimension)::: menu item layout helper add width:::if
MenuItemLayoutHelper#getMenuItem()::: menu item layout helper get menu item:::return
MenuItemLayoutHelper#getMenuItemParent()::: menu item layout helper get menu item parent:::return
MenuItemLayoutHelper#getFont()::: menu item layout helper get font:::return
MenuItemLayoutHelper#getAccFont()::: menu item layout helper get acc font:::return
MenuItemLayoutHelper#getFontMetrics()::: menu item layout helper get font metrics:::return
MenuItemLayoutHelper#getAccFontMetrics()::: menu item layout helper get acc font metrics:::return
MenuItemLayoutHelper#getIcon()::: menu item layout helper get icon:::return
MenuItemLayoutHelper#getCheckIcon()::: menu item layout helper get check icon:::return
MenuItemLayoutHelper#getArrowIcon()::: menu item layout helper get arrow icon:::return
MenuItemLayoutHelper#getText()::: menu item layout helper get text:::return
MenuItemLayoutHelper#getAccText()::: menu item layout helper get acc text:::return
MenuItemLayoutHelper#isColumnLayout()::: menu item layout helper is column layout:::return
MenuItemLayoutHelper#useCheckAndArrow()::: menu item layout helper use check and arrow:::return
MenuItemLayoutHelper#isLeftToRight()::: menu item layout helper is left to right:::return
MenuItemLayoutHelper#isTopLevelMenu()::: menu item layout helper is top level menu:::return
MenuItemLayoutHelper#getHtmlView()::: menu item layout helper get html view:::return
MenuItemLayoutHelper#getVerticalAlignment()::: menu item layout helper get vertical alignment:::return
MenuItemLayoutHelper#getHorizontalAlignment()::: menu item layout helper get horizontal alignment:::return
MenuItemLayoutHelper#getVerticalTextPosition()::: menu item layout helper get vertical text position:::return
MenuItemLayoutHelper#getHorizontalTextPosition()::: menu item layout helper get horizontal text position:::return
MenuItemLayoutHelper#getGap()::: menu item layout helper get gap:::return
MenuItemLayoutHelper#getLeadingGap()::: menu item layout helper get leading gap:::return
MenuItemLayoutHelper#getAfterCheckIconGap()::: menu item layout helper get after check icon gap:::return
MenuItemLayoutHelper#getMinTextOffset()::: menu item layout helper get min text offset:::return
MenuItemLayoutHelper#getViewRect()::: menu item layout helper get view rect:::return
MenuItemLayoutHelper#getIconSize()::: menu item layout helper get icon size:::return
MenuItemLayoutHelper#getTextSize()::: menu item layout helper get text size:::return
MenuItemLayoutHelper#getAccSize()::: menu item layout helper get acc size:::return
MenuItemLayoutHelper#getCheckSize()::: menu item layout helper get check size:::return
MenuItemLayoutHelper#getArrowSize()::: menu item layout helper get arrow size:::return
MenuItemLayoutHelper#getLabelSize()::: menu item layout helper get label size:::return
MenuItemLayoutHelper#setMenuItem(JMenuItem)::: menu item layout helper set menu item:::
MenuItemLayoutHelper#setMenuItemParent(JComponent)::: menu item layout helper set menu item parent:::
MenuItemLayoutHelper#setFont(Font)::: menu item layout helper set font:::
MenuItemLayoutHelper#setAccFont(Font)::: menu item layout helper set acc font:::
MenuItemLayoutHelper#setFontMetrics(FontMetrics)::: menu item layout helper set font metrics:::
MenuItemLayoutHelper#setAccFontMetrics(FontMetrics)::: menu item layout helper set acc font metrics:::
MenuItemLayoutHelper#setIcon(Icon)::: menu item layout helper set icon:::
MenuItemLayoutHelper#setCheckIcon(Icon)::: menu item layout helper set check icon:::
MenuItemLayoutHelper#setArrowIcon(Icon)::: menu item layout helper set arrow icon:::
MenuItemLayoutHelper#setText(String)::: menu item layout helper set text:::
MenuItemLayoutHelper#setAccText(String)::: menu item layout helper set acc text:::
MenuItemLayoutHelper#setColumnLayout(boolean)::: menu item layout helper set column layout:::
MenuItemLayoutHelper#setUseCheckAndArrow(boolean)::: menu item layout helper set use check and arrow:::
MenuItemLayoutHelper#setLeftToRight(boolean)::: menu item layout helper set left to right:::
MenuItemLayoutHelper#setTopLevelMenu(boolean)::: menu item layout helper set top level menu:::
MenuItemLayoutHelper#setHtmlView(View)::: menu item layout helper set html view:::
MenuItemLayoutHelper#setVerticalAlignment(int)::: menu item layout helper set vertical alignment:::
MenuItemLayoutHelper#setHorizontalAlignment(int)::: menu item layout helper set horizontal alignment:::
MenuItemLayoutHelper#setVerticalTextPosition(int)::: menu item layout helper set vertical text position:::
MenuItemLayoutHelper#setHorizontalTextPosition(int)::: menu item layout helper set horizontal text position:::
MenuItemLayoutHelper#setGap(int)::: menu item layout helper set gap:::
MenuItemLayoutHelper#setLeadingGap(int)::: menu item layout helper set leading gap:::
MenuItemLayoutHelper#setAfterCheckIconGap(int)::: menu item layout helper set after check icon gap:::
MenuItemLayoutHelper#setMinTextOffset(int)::: menu item layout helper set min text offset:::
MenuItemLayoutHelper#setViewRect(Rectangle)::: menu item layout helper set view rect:::
MenuItemLayoutHelper#setIconSize(RectSize)::: menu item layout helper set icon size:::
MenuItemLayoutHelper#setTextSize(RectSize)::: menu item layout helper set text size:::
MenuItemLayoutHelper#setAccSize(RectSize)::: menu item layout helper set acc size:::
MenuItemLayoutHelper#setCheckSize(RectSize)::: menu item layout helper set check size:::
MenuItemLayoutHelper#setArrowSize(RectSize)::: menu item layout helper set arrow size:::
MenuItemLayoutHelper#setLabelSize(RectSize)::: menu item layout helper set label size:::
MenuItemLayoutHelper#getLeftTextExtraWidth()::: menu item layout helper get left text extra width:::return
MenuItemLayoutHelper#useCheckAndArrow(JMenuItem):::Returns false if the component is a JMenu and it is a top level menu (on the menubar).:::b->if->isTopLevelMenu->return
MenuItemLayoutHelper.LayoutResult#getIconRect()::: layout result get icon rect:::return
MenuItemLayoutHelper.LayoutResult#setIconRect(Rectangle)::: layout result set icon rect:::
MenuItemLayoutHelper.LayoutResult#getTextRect()::: layout result get text rect:::return
MenuItemLayoutHelper.LayoutResult#setTextRect(Rectangle)::: layout result set text rect:::
MenuItemLayoutHelper.LayoutResult#getAccRect()::: layout result get acc rect:::return
MenuItemLayoutHelper.LayoutResult#setAccRect(Rectangle)::: layout result set acc rect:::
MenuItemLayoutHelper.LayoutResult#getCheckRect()::: layout result get check rect:::return
MenuItemLayoutHelper.LayoutResult#setCheckRect(Rectangle)::: layout result set check rect:::
MenuItemLayoutHelper.LayoutResult#getArrowRect()::: layout result get arrow rect:::return
MenuItemLayoutHelper.LayoutResult#setArrowRect(Rectangle)::: layout result set arrow rect:::
MenuItemLayoutHelper.LayoutResult#getLabelRect()::: layout result get label rect:::return
MenuItemLayoutHelper.LayoutResult#setLabelRect(Rectangle)::: layout result set label rect:::
MenuItemLayoutHelper.LayoutResult#getAllRects()::: layout result get all rects:::result->new->HashMap<String,Rectangle>->result->put->result->put->result->put->result->put->result->put->result->put->return
MenuItemLayoutHelper.ColumnAlignment#getCheckAlignment()::: column alignment get check alignment:::return
MenuItemLayoutHelper.ColumnAlignment#getIconAlignment()::: column alignment get icon alignment:::return
MenuItemLayoutHelper.ColumnAlignment#getTextAlignment()::: column alignment get text alignment:::return
MenuItemLayoutHelper.ColumnAlignment#getAccAlignment()::: column alignment get acc alignment:::return
MenuItemLayoutHelper.ColumnAlignment#getArrowAlignment()::: column alignment get arrow alignment:::return
MenuItemLayoutHelper.RectSize#getWidth()::: rect size get width:::return
MenuItemLayoutHelper.RectSize#getHeight()::: rect size get height:::return
MenuItemLayoutHelper.RectSize#getOrigWidth()::: rect size get orig width:::return
MenuItemLayoutHelper.RectSize#getMaxWidth()::: rect size get max width:::return
MenuItemLayoutHelper.RectSize#setWidth(int)::: rect size set width:::
MenuItemLayoutHelper.RectSize#setHeight(int)::: rect size set height:::
MenuItemLayoutHelper.RectSize#setOrigWidth(int)::: rect size set orig width:::
MenuItemLayoutHelper.RectSize#setMaxWidth(int)::: rect size set max width:::
MenuItemLayoutHelper.RectSize#toString()::: rect size to string:::return
PrintColorUIResource#getPrintColor():::Return the color to use during printing:::return
PrintColorUIResource#writeReplace():::Replaces this object with a plain ColorUIResource during serialization:::return->new->ColorUIResource
PrintingStatus#createPrintingStatus(Component, PrinterJob):::Creates PrintingStatus instance:::return->new->PrintingStatus
PrintingStatus#init()::: printing status init:::progressTitle->UIManager->getString->dialogInitialContent->UIManager->getString->UIManager->getString->new->MessageFormat->abortText->UIManager->getString->abortTooltip->UIManager->getString->abortMnemonic->getInt->abortMnemonicIndex->getInt->new->JButton->abortButton->addActionListener->abortButton->setToolTipText->if->abortButton->setMnemonic->if->abortButton->setDisplayedMnemonicIndex->new->JLabel->abortPane->new->ObjectArr->new->JOptionPane->abortPane->getActionMap->put->if->parent->getParent->abortPane->parent->getParent->createDialog->else->abortPane->createDialog->abortDialog->setDefaultCloseOperation->abortDialog->addWindowListener
PrintingStatus#showModal(boolean):::Shows PrintingStatus dialog:::if->SwingUtilities->isEventDispatchThread->showModalOnEDT->else->try->SwingUtilities->new->Runnable->invokeAndWait->catch->throw->new->RuntimeException->cause->e->getCause->if->throw->else->if->throw->else->throw->new->RuntimeException->finally
PrintingStatus#showModalOnEDT(boolean):::The EDT part of the showModal method:::init->abortDialog->setModal->abortDialog->setVisible
PrintingStatus#dispose():::Disposes modal PrintingStatus dialog:::if->SwingUtilities->isEventDispatchThread->disposeOnEDT->else->SwingUtilities->new->Runnable->invokeLater
PrintingStatus#disposeOnEDT():::The EDT part of the dispose method:::if->abortDialog->removeWindowListener->abortDialog->dispose
PrintingStatus#isAborted():::Returns whether the printng was aborted using this PrintingStatus:::return->isAborted->get
PrintingStatus#createNotificationPrintable(Printable):::Returns printable which is used to track the current page being printed in this PrintingStatus:::return->new->NotificationPrintable
PrintingStatus.NotificationPrintable#print(Graphics, PageFormat, int)::: notification printable print:::retVal->printDelegatee->print->if->isAborted->if->SwingUtilities->isEventDispatchThread->updateStatusOnEDT->else->SwingUtilities->new->Runnable->invokeLater->return
PrintingStatus.NotificationPrintable#updateStatusOnEDT(int):::The EDT part of the print method:::pageNumber->new->ObjectArr->statusLabel->statusFormat->format->setText
PrintingStatus#getInt(Object, int):::Duplicated from UIManager to make it visible:::value->UIManager->get->if->return->intValue->if->try->return->Integer->parseInt->catch->finally->return
StringUIClientPropertyKey#toString()::: string client property key to string:::return
SwingAccessor.JComponentAccessor#getFlag(JComponent, int)::: component accessor get flag:::
SwingAccessor.JComponentAccessor#compWriteObjectNotify(JComponent)::: component accessor comp write object notify:::
SwingAccessor.JTextComponentAccessor#dropLocationForPoint(JTextComponent, Point):::Calculates a custom drop location for the text component, representing where a drop at the given point should insert data.:::
SwingAccessor.JTextComponentAccessor#setDropLocation(JTextComponent, TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation.:::
SwingAccessor.JLightweightFrameAccessor#updateCursor(JLightweightFrame):::Notifies the JLightweight frame that it needs to update a cursor:::
SwingAccessor.UIDefaultsAccessor#addInternalBundle(UIDefaults, String):::Adds a resource bundle to the list of resource bundles.:::
SwingAccessor.RepaintManagerAccessor#addRepaintListener(RepaintManager, SwingUtilities2.RepaintListener)::: repaint manager accessor add repaint listener:::
SwingAccessor.RepaintManagerAccessor#removeRepaintListener(RepaintManager, SwingUtilities2.RepaintListener)::: repaint manager accessor remove repaint listener:::
SwingAccessor.PopupFactoryAccessor#getHeavyWeightPopup(PopupFactory, Component, Component, int, int)::: popup factory accessor get heavy weight popup:::
SwingAccessor.KeyStrokeAccessor#create()::: key stroke accessor create:::
SwingAccessor#setJComponentAccessor(JComponentAccessor):::Set an accessor object for the javax.swing.JComponent class.:::
SwingAccessor#getJComponentAccessor():::Retrieve the accessor object for the javax.swing.JComponent class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setJTextComponentAccessor(JTextComponentAccessor):::Set an accessor object for the javax.swing.text.JTextComponent class.:::
SwingAccessor#getJTextComponentAccessor():::Retrieve the accessor object for the javax.swing.text.JTextComponent class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setJLightweightFrameAccessor(JLightweightFrameAccessor):::Set an accessor object for the JLightweightFrame class.:::
SwingAccessor#getJLightweightFrameAccessor():::Retrieve the accessor object for the JLightweightFrame class:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setUIDefaultsAccessor(UIDefaultsAccessor):::Set an accessor object for the UIDefaults class.:::
SwingAccessor#getUIDefaultsAccessor():::Retrieve the accessor object for the JLightweightFrame class:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setRepaintManagerAccessor(RepaintManagerAccessor):::Set an accessor object for the RepaintManager class.:::
SwingAccessor#getRepaintManagerAccessor():::Retrieve the accessor object for the RepaintManager class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#getPopupFactoryAccessor():::Retrieve the accessor object for the PopupFactory class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setPopupFactoryAccessor(PopupFactoryAccessor):::Set an Accessor object for the PopupFactory class.:::
SwingAccessor#getKeyStrokeAccessor():::Retrieve the accessor object for the KeyStroke class.:::if->unsafe->ensureClassInitialized->return
SwingAccessor#setKeyStrokeAccessor(KeyStrokeAccessor)::: swing accessor set key stroke accessor:::
SwingUtilities2#putAATextInfo(boolean, Map)::: swing utilities2 put text info:::SunToolkit->setAAFontSettingsCondition->tk->Toolkit->getDefaultToolkit->desktopHints->tk->getDesktopProperty->if->hints->aaHint->hints->get->if->return->map->put->map->hints->get->put
SwingUtilities2#syncCharsBuffer(String):::Fill the character buffer cache:::length->s->length->if->s->toCharArray->else->s->getChars->return
SwingUtilities2#isComplexLayout(char[], int, int):::checks whether TextLayout is required to handle characters.:::return->FontUtilities->isComplexText
SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, String):::Returns the left side bearing of the first character of string:::if->string->length->return->return->string->charAt->getLeftSideBearing
SwingUtilities2#getLeftSideBearing(JComponent, FontMetrics, char):::Returns the left side bearing of the first character of string:::charIndex->if->lsbs->frc->getFontRenderContext->font->fm->getFont->synchronized->entry->if->new->LSBCacheEntry->else->searchKey->reset->foreach->if->searchKey->equals->break->if->return->entry->getLeftSideBearing->return
SwingUtilities2#getFontMetrics(JComponent, Graphics):::Returns the FontMetrics for the current Font of the passed in Graphics:::return->g->getFont->getFontMetrics
SwingUtilities2#getFontMetrics(JComponent, Graphics, Font):::Returns the FontMetrics for the specified Font:::if->return->c->getFontMetrics->return->Toolkit->getDefaultToolkit->getFontMetrics
SwingUtilities2#stringWidth(JComponent, FontMetrics, String):::Returns the width of the passed in String:::return->stringWidth
SwingUtilities2#stringWidth(JComponent, FontMetrics, String, boolean):::Returns the width of the passed in String:::if->string->equals->return->needsTextLayout->c->getClientProperty->if->synchronized->length->syncCharsBuffer->isComplexLayout->if->layout->fm->getFont->fm->getFontRenderContext->createTextLayout->return->layout->getAdvance->else->return->getFontStringWidth
SwingUtilities2#clipStringIfNecessary(JComponent, FontMetrics, String, int):::Clips the passed in String to the space provided.:::if->string->equals->return->textWidth->SwingUtilities2->stringWidth->if->return->SwingUtilities2->clipString->return
SwingUtilities2#clipString(JComponent, FontMetrics, String, int):::Clips the passed in String to the space provided:::clipString->SwingUtilities2->stringWidth->if->return->needsTextLayout->synchronized->stringLength->syncCharsBuffer->isComplexLayout->if->width->for->nChars->if->aString->new->AttributedString->if->aString->c->getClientProperty->addAttribute->measurer->aString->getIterator->BreakIterator->getCharacterInstance->getFontRenderContext->new->LineBreakMeasurer->string->measurer->nextOffset->substring->return
SwingUtilities2#drawString(JComponent, Graphics, String, int, int):::Draws the string at the specified location.:::drawString
SwingUtilities2#drawString(JComponent, Graphics, String, float, float, boolean):::Draws the string at the specified location.:::if->text->length->return->if->isPrinting->g2d->getGraphics2D->if->trimmedText->trimTrailingSpaces->if->trimmedText->isEmpty->screenWidth->g2d->getFont->getFontRenderContext->getStringBounds->getWidth->layout->g2d->getFont->g2d->getFontRenderContext->createTextLayout->if->SwingUtilities2->g2d->getFontMetrics->stringWidth->layout->getJustifiedLayout->col->g2d->getColor->if->g2d->getPrintColor->setColor->layout->draw->g2d->setColor->return->if->g2->needsTextLayout->c->getClientProperty->if->synchronized->length->syncCharsBuffer->isComplexLayout->aaHint->c->getClientProperty->if->oldContrast->oldAAValue->g2->getRenderingHint->if->g2->setRenderingHint->else->lcdContrastHint->c->getClientProperty->if->g2->getRenderingHint->if->lcdContrastHint->equals->else->g2->setRenderingHint->if->layout->g2->getFont->g2->getFontRenderContext->createTextLayout->layout->draw->else->g2->drawString->if->g2->setRenderingHint->if->g2->setRenderingHint->return->if->layout->g2->getFont->g2->getFontRenderContext->createTextLayout->layout->draw->return->g->drawString
SwingUtilities2#drawStringUnderlineCharAt(JComponent, Graphics, String, int, int, int)::: swing utilities2 draw string underline char at:::drawStringUnderlineCharAt
SwingUtilities2#drawStringUnderlineCharAt(JComponent, Graphics, String, int, float, float, boolean):::Draws the string at the specified location underlining the specified character.:::if->text->length->return->SwingUtilities2->drawString->textLength->text->length->if->underlineRectY->underlineRectHeight->underlineRectX->underlineRectWidth->isPrinting->isPrinting->needsTextLayout->if->synchronized->syncCharsBuffer->isComplexLayout->if->fm->g->getFontMetrics->SwingUtilities2->text->substring->stringWidth->fm->text->charAt->charWidth->else->g2d->getGraphics2D->if->layout->g2d->getFont->g2d->getFontRenderContext->createTextLayout->if->screenWidth->g2d->getFont->getFontRenderContext->getStringBounds->getWidth->if->SwingUtilities2->g2d->getFontMetrics->stringWidth->layout->getJustifiedLayout->leading->TextHitInfo->leading->trailing->TextHitInfo->trailing->shape->layout->getVisualHighlightShape->rect->shape->getBounds->g->fillRect
SwingUtilities2#loc2IndexFileList(JList, Point):::A variation of locationToIndex() which only returns an index if the Point is within the actual bounds of a list item (not just in the cell) and if the JList has the "List.isFileList" client property set:::index->list->locationToIndex->if->bySize->list->getClientProperty->if->booleanValue->pointIsInActualBounds->return
SwingUtilities2#pointIsInActualBounds(JList, int, Point):::Returns true if the given point is within the actual bounds of the JList item at index (not just inside the cell).:::renderer->list->getCellRenderer->value->list->getModel->getElementAt->item->renderer->getListCellRendererComponent->itemSize->item->getPreferredSize->cellBounds->list->getCellBounds->if->item->getComponentOrientation->isLeftToRight->return->cellBounds->contains
SwingUtilities2#pointOutsidePrefSize(JTable, int, int, Point):::Returns true if the given point is outside the preferredSize of the item at the given row of the table:::if->table->convertColumnIndexToModel->return->tcr->table->getCellRenderer->value->table->getValueAt->cell->tcr->getTableCellRendererComponent->itemSize->cell->getPreferredSize->cellBounds->table->getCellRect->return
SwingUtilities2#setLeadAnchorWithoutSelection(ListSelectionModel, int, int):::Set the lead and anchor without affecting selection.:::if->if->model->setAnchorSelectionIndex->model->setLeadSelectionIndex->else->if->model->isSelectedIndex->model->addSelectionInterval->else->model->removeSelectionInterval->model->setAnchorSelectionIndex
SwingUtilities2#shouldIgnore(MouseEvent, JComponent):::Ignore mouse events if the component is null, not enabled, the event is not associated with the left mouse button, or the event has been consumed.:::return->c->isEnabled->SwingUtilities->isLeftMouseButton->me->isConsumed
SwingUtilities2#adjustFocus(JComponent):::Request focus on the given component if it doesn't already have it and isRequestFocusEnabled() returns true.:::if->c->hasFocus->c->isRequestFocusEnabled->c->requestFocus
SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, int, int):::The following draw functions have the same semantic as the Graphics methods with the same names:::return->drawChars
SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, float, float)::: swing utilities2 draw chars:::return->drawChars
SwingUtilities2#drawChars(JComponent, Graphics, char[], int, int, float, float, boolean)::: swing utilities2 draw chars:::if->return->nextX->getFontMetrics->getFontCharsWidth->if->isPrinting->g2d->getGraphics2D->if->deviceFontRenderContext->g2d->getFontRenderContext->frc->getFontRenderContext->if->isFontRenderContextPrintCompatible->text->new->String->layout->g2d->getFont->new->TextLayout->trimmedText->trimTrailingSpaces->if->trimmedText->isEmpty->screenWidth->g2d->getFont->getStringBounds->getWidth->if->SwingUtilities2->g2d->getFontMetrics->stringWidth->layout->getJustifiedLayout->col->g2d->getColor->if->g2d->getPrintColor->setColor->layout->draw->g2d->setColor->return->aaHint->c->getClientProperty->if->g->drawChars->return->g2->if->oldContrast->oldAAValue->g2->getRenderingHint->if->g2->setRenderingHint->else->lcdContrastHint->c->getClientProperty->if->g2->getRenderingHint->if->lcdContrastHint->equals->else->g2->setRenderingHint->g2->new->String->drawString->if->g2->setRenderingHint->if->g2->setRenderingHint->else->g2->new->String->drawString->return
SwingUtilities2#getFontCharWidth(char, FontMetrics, boolean)::: swing utilities2 get font char width:::return->new->charArr->getFontCharsWidth
SwingUtilities2#getFontCharsWidth(char[], int, int, FontMetrics, boolean)::: swing utilities2 get font chars width:::if->return->if->bounds->fm->getFont->fm->getFontRenderContext->getStringBounds->return->bounds->getWidth->else->return->fm->charsWidth
SwingUtilities2#getFontStringWidth(String, FontMetrics, boolean)::: swing utilities2 get font string width:::if->bounds->fm->getFont->fm->getFontRenderContext->getStringBounds->return->bounds->getWidth->else->return->fm->stringWidth
SwingUtilities2#drawString(JComponent, Graphics, AttributedCharacterIterator, int, int)::: swing utilities2 draw string:::return->drawStringImpl
SwingUtilities2#drawString(JComponent, Graphics, AttributedCharacterIterator, float, float)::: swing utilities2 draw string:::return->drawStringImpl
SwingUtilities2#drawStringImpl(JComponent, Graphics, AttributedCharacterIterator, float, float)::: swing utilities2 draw string impl:::retVal->isPrinting->isPrinting->col->g->getColor->if->if->g->getPrintColor->setColor->g2d->getGraphics2D->if->g->drawString->else->frc->if->getFontRenderContext->if->frc->isAntiAliased->frc->usesFractionalMetrics->frc->getTransform->new->FontRenderContext->else->if->getFRCProperty->else->g2d->getFontRenderContext->layout->if->deviceFRC->g2d->getFontRenderContext->if->isFontRenderContextPrintCompatible->new->TextLayout->trimmedIt->getTrimmedTrailingSpacesIterator->if->screenWidth->new->TextLayout->getAdvance->layout->getJustifiedLayout->else->new->TextLayout->else->new->TextLayout->layout->draw->layout->getAdvance->if->g->setColor->return
SwingUtilities2#drawVLine(Graphics, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->temp->g->fillRect
SwingUtilities2#drawHLine(Graphics, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->temp->g->fillRect
SwingUtilities2#drawRect(Graphics, int, int, int, int):::This method should be used for drawing a borders over a filled rectangle:::if->return->if->g->fillRect->else->g->fillRect->g->fillRect->g->fillRect->g->fillRect
SwingUtilities2#createTextLayout(JComponent, String, Font, FontRenderContext)::: swing utilities2 create text layout:::shaper->c->getClientProperty->if->return->new->TextLayout->else->a->new->HashMap<TextAttribute,Object>->a->put->a->put->return->new->TextLayout
SwingUtilities2#isFontRenderContextPrintCompatible(FontRenderContext, FontRenderContext)::: swing utilities2 is font render context print compatible:::if->return->if->return->if->frc1->getFractionalMetricsHint->frc2->getFractionalMetricsHint->return->if->frc1->isTransformed->frc2->isTransformed->return->mat1->new->doubleArr->mat2->new->doubleArr->frc1->getTransform->getMatrix->frc2->getTransform->getMatrix->return
SwingUtilities2#getGraphics2D(Graphics)::: swing utilities2 get graphics2 d:::if->return->else->if->return->getGraphics->else->return
SwingUtilities2#getFontRenderContext(Component)::: swing utilities2 get font render context:::if->return->else->return->c->c->getFont->getFontMetrics->getFontRenderContext
SwingUtilities2#getFontRenderContext(Component, FontMetrics):::A convenience method to get FontRenderContext:::return->fm->getFontRenderContext->getFontRenderContext
SwingUtilities2#getFontMetrics(JComponent, Font)::: swing utilities2 get font metrics:::frc->getFRCProperty->if->return->FontDesignMetrics->getMetrics
SwingUtilities2#getFRCProperty(JComponent)::: swing utilities2 get property:::if->gc->c->getGraphicsConfiguration->tx->gc->getDefaultTransform->aaHint->c->getClientProperty->return->getFRCFromCache->return
SwingUtilities2#getFRCFromCache(AffineTransform, Object)::: swing utilities2 get from cache:::if->return->cache->AppContext->getAppContext->get->if->new->HashMap<>->AppContext->getAppContext->put->key->new->KeyPair->frc->cache->get->if->new->FontRenderContext->cache->put->return
SwingUtilities2.KeyPair#equals(Object)::: key pair equals:::if->return->that->return->equals->equals
SwingUtilities2.KeyPair#hashCode()::: key pair hash code:::return->key1->hashCode->key2->hashCode
SwingUtilities2#isPrinting(Graphics)::: swing utilities2 is printing:::return
SwingUtilities2#trimTrailingSpaces(String)::: swing utilities2 trim trailing spaces:::i->s->length->while->Character->s->charAt->isWhitespace->return->s->substring
SwingUtilities2#getTrimmedTrailingSpacesIterator(AttributedCharacterIterator)::: swing utilities2 get trimmed trailing spaces iterator:::curIdx->iterator->getIndex->c->iterator->last->while->Character->isWhitespace->iterator->previous->if->endIdx->iterator->getIndex->if->iterator->getEndIndex->iterator->setIndex->return->else->trimmedText->iterator->getBeginIndex->new->AttributedString->return->trimmedText->getIterator->else->return
SwingUtilities2#useSelectedTextColor(Highlighter.Highlight, JTextComponent):::Determines whether the SelectedTextColor should be used for painting text foreground for the specified highlight:::painter->h->getPainter->painterClass->painter->getClass->getName->if->painterClass->indexOf->painterClass->indexOf->return->try->defPainter->if->defPainter->getColor->defPainter->getColor->c->getSelectionColor->equals->return->catch->return->finally->return
SwingUtilities2.LSBCacheEntry#reset(FontRenderContext, Font)::: cache entry reset:::for->counter
SwingUtilities2.LSBCacheEntry#getLeftSideBearing(char)::: cache entry get left side bearing:::index->lsb->if->gv->font->createGlyphVector->gv->getGlyphPixelBounds->if->aaHint->frc->getAntiAliasingHint->if->return
SwingUtilities2.LSBCacheEntry#equals(Object)::: cache entry equals:::if->return->if->return->oEntry->return->font->equals->frc->equals
SwingUtilities2.LSBCacheEntry#hashCode()::: cache entry hash code:::result->if->font->hashCode->if->frc->hashCode->return
SwingUtilities2#canAccessSystemClipboard():::checks the security permissions for accessing system clipboard  for untrusted context (see isTrustedContext) checks the permissions for the current event being handled:::canAccess->if->GraphicsEnvironment->isHeadless->sm->System->getSecurityManager->if->else->try->sm->checkPermission->catch->finally->if->isTrustedContext->canCurrentEventAccessSystemClipboard->return
SwingUtilities2#canCurrentEventAccessSystemClipboard():::Returns true if EventQueue.getCurrentEvent() has the permissions to access the system clipboard:::return->isTrustedContext->canCurrentEventAccessSystemClipboard
SwingUtilities2#canEventAccessSystemClipboard(AWTEvent):::Returns true if the given event has permissions to access the system clipboard:::return->isTrustedContext->canEventAccessSystemClipboard
SwingUtilities2#isAccessClipboardGesture(InputEvent):::Returns true if the given event is corrent gesture for accessing clipboard:::allowedGesture->if->ke->keyCode->ke->getKeyCode->keyModifiers->ke->getModifiers->switch->break->break->break->break->return
SwingUtilities2#canEventAccessSystemClipboard(AWTEvent, boolean):::Returns true if e has the permissions to access the system clipboard and if it is allowed gesture (if checkGesture is true):::if->EventQueue->isDispatchThread->if->isAccessClipboardGesture->return->AWTAccessor->getInputEventAccessor->canAccessSystemClipboard->else->return->else->return
SwingUtilities2#checkAccess(int):::Utility method that throws SecurityException if SecurityManager is set and modifiers are not public:::if->System->getSecurityManager->Modifier->isPublic->throw->new->SecurityException
SwingUtilities2#canCurrentEventAccessSystemClipboard(boolean):::Returns true if EventQueue.getCurrentEvent() has the permissions to access the system clipboard and if it is allowed gesture (if checkGesture true):::event->EventQueue->getCurrentEvent->return->canEventAccessSystemClipboard
SwingUtilities2#isTrustedContext():::see RFE 5012841 [Per AppContect security permissions] for the details:::return->System->getSecurityManager->AppContext->getAppContext->get
SwingUtilities2#displayPropertiesToCSS(Font, Color)::: swing utilities2 display properties to s:::rule->new->StringBuilder->if->rule->append->rule->font->getFamily->append->rule->append->rule->append->rule->font->getSize->append->rule->append->if->font->isBold->rule->append->if->font->isItalic->rule->append->if->rule->append->if->fg->getRed->rule->append->rule->Integer->fg->getRed->toHexString->append->if->fg->getGreen->rule->append->rule->Integer->fg->getGreen->toHexString->append->if->fg->getBlue->rule->append->rule->Integer->fg->getBlue->toHexString->append->rule->append->rule->append->return->rule->toString
SwingUtilities2#makeIcon(Class, Class, String):::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name:::return->makeIcon
SwingUtilities2#makeIcon_Unprivileged(Class, Class, String):::Utility method that creates a UIDefaults.LazyValue that creates an ImageIcon UIResource for the specified image file name:::return->makeIcon
SwingUtilities2#makeIcon(Class, Class, String, boolean)::: swing utilities2 make icon:::return->buffer->AccessController->getIconBytes->doPrivileged->getIconBytes->if->return->if->println->return->return->new->ImageIconUIResource
SwingUtilities2#getIconBytes(Class, Class, String)::: swing utilities2 get icon bytes:::srchClass->while->try->resource->srchClass->getResourceAsStream->if->if->break->srchClass->getSuperclass->continue->try->in->new->BufferedInputStream->out->new->ByteArrayOutputStream->buffer->new->byteArr->n->while->in->read->out->write->out->flush->return->out->toByteArray->catch->finally->catch->ioe->toString->println->finally->return
SwingUtilities2#isLocalDisplay()::: swing utilities2 is local display:::isLocal->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->if->isDisplayLocal->else->return
SwingUtilities2#getUIDefaultsInt(Object):::Returns an integer from the defaults table:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, Locale):::Returns an integer from the defaults table that is appropriate for the given locale:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, int):::Returns an integer from the defaults table:::return->getUIDefaultsInt
SwingUtilities2#getUIDefaultsInt(Object, Locale, int):::Returns an integer from the defaults table that is appropriate for the given locale:::value->UIManager->get->if->return->intValue->if->try->return->Integer->parseInt->catch->finally->return
SwingUtilities2#compositeRequestFocus(Component)::: swing utilities2 composite request focus:::if->container->if->container->isFocusCycleRoot->policy->container->getFocusTraversalPolicy->comp->policy->getDefaultComponent->if->comp->requestFocus->return->rootAncestor->container->getFocusCycleRootAncestor->if->policy->rootAncestor->getFocusTraversalPolicy->comp->policy->getComponentAfter->if->SwingUtilities->isDescendingFrom->comp->requestFocus->return->if->component->isFocusable->component->requestFocus->return->return
SwingUtilities2#tabbedPaneChangeFocusTo(Component):::Change focus to the visible component in JTabbedPane:::if->if->comp->isFocusTraversable->SwingUtilities2->compositeRequestFocus->return->else->if->requestDefaultFocus->return->return
SwingUtilities2#submit(Callable):::Submits a value-returning task for execution on the EDT and returns a Future representing the pending results of the task.:::if->throw->new->NullPointerException->future->new->FutureTask<V>->execute->return
SwingUtilities2#submit(Runnable, V):::Submits a Runnable task for execution on the EDT and returns a Future representing that task.:::if->throw->new->NullPointerException->future->new->FutureTask<V>->execute->return
SwingUtilities2#execute(Runnable):::Sends a Runnable to the EDT for the execution.:::SwingUtilities->invokeLater
SwingUtilities2#setSkipClickCount(Component, int):::Sets the SKIP_CLICK_COUNT client property on the component if it is an instance of JTextComponent with a DefaultCaret:::if->getCaret->putClientProperty
SwingUtilities2#getAdjustedClickCount(JTextComponent, MouseEvent):::Return the MouseEvent's click count, possibly reduced by the value of the component's SKIP_CLICK_COUNT client property:::cc->e->getClickCount->if->comp->putClientProperty->else->sub->comp->getClientProperty->if->return->return
SwingUtilities2#liesIn(Rectangle, Point, boolean, boolean, boolean):::This method divides a rectangle into two or three sections along the specified axis and determines which section the given point lies in on that axis; used by drag and drop when calculating drop locations:::p0->pComp->length->forward->if->else->if->boundary->if->return->else->if->return->return->else->middle->if->return->else->return
SwingUtilities2#liesInHorizontal(Rectangle, Point, boolean, boolean):::This method divides a rectangle into two or three sections along the horizontal axis and determines which section the given point lies in; used by drag and drop when calculating drop locations:::return->liesIn
SwingUtilities2#liesInVertical(Rectangle, Point, boolean):::This method divides a rectangle into two or three sections along the vertical axis and determines which section the given point lies in; used by drag and drop when calculating drop locations:::return->liesIn
SwingUtilities2#convertColumnIndexToModel(TableColumnModel, int):::Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model:::if->return->return->cm->getColumn->getModelIndex
SwingUtilities2#convertColumnIndexToView(TableColumnModel, int):::Maps the index of the column in the cm at modelColumnIndex to the index of the column in the view:::if->return->for->column->cm->getColumnCount->return
SwingUtilities2#setAltGraphMask(int):::Sets the InputEvent.ALT_GRAPH mask on any modifier passed to the function:::return
SwingUtilities2#getSystemMnemonicKeyMask()::: swing utilities2 get system mnemonic key mask:::toolkit->Toolkit->getDefaultToolkit->if->return->getFocusAcceleratorKeyMask->return
SwingUtilities2#getTreePath(TreeModelEvent, TreeModel):::Returns the TreePath that identifies the changed nodes.:::path->event->getTreePath->if->root->model->getRoot->if->new->TreePath->return
SwingUtilities2#isScaledGraphics(Graphics)::: swing utilities2 is scaled graphics:::if->tx->getTransform->return->tx->getType->return
SwingUtilities2#getAndSetAntialisingHintForScaledGraphics(Graphics):::Enables the antialiasing rendering hint for the scaled graphics and returns the previous hint value:::if->isScaledGraphics->isLocalDisplay->g2d->hint->g2d->getRenderingHint->g2d->setRenderingHint->return->return
SwingUtilities2#setAntialiasingHintForScaledGraphics(Graphics, Object):::Sets the antialiasing rendering hint if its value is not null:::if->setRenderingHint
SwingUtilities2#isFloatingPointScale(AffineTransform)::: swing utilities2 is floating point scale:::type->tx->getType->if->return->else->if->scaleX->tx->getScaleX->scaleY->tx->getScaleY->return->else->return
SwingUtilities2#getBoolean(JComponent, String):::Returns the client property for the given key if it is set; otherwise returns the  property.:::clientProperty->component->getClientProperty->if->return->equals->return->UIManager->getBoolean
SwingUtilities2.RepaintListener#repaintPerformed(JComponent, int, int, int, int)::: repaint listener repaint performed:::
SwingUtilities2#isScaleChanged(PropertyChangeEvent):::Returns whether or not the scale used by GraphicsConfiguration was changed.:::return->ev->getPropertyName->ev->getOldValue->ev->getNewValue->isScaleChanged
SwingUtilities2#isScaleChanged(String, Object, Object):::Returns whether or not the scale used by GraphicsConfiguration was changed.:::if->equals->return->newGC->oldGC->newTx->newGC->getDefaultTransform->oldTx->oldGC->getDefaultTransform->return->Objects->equals
UIAction#getName()::: action get name:::return
UIAction#getValue(String)::: action get value:::if->return->return
UIAction#putValue(String, Object)::: action put value:::
UIAction#setEnabled(boolean)::: action set enabled:::
UIAction#isEnabled():::Cover method for isEnabled(null).:::return->accept
UIAction#accept(Object):::Subclasses that need to conditionalize the enabled state should override this:::return
UIAction#addPropertyChangeListener(PropertyChangeListener)::: action add property change listener:::
UIAction#removePropertyChangeListener(PropertyChangeListener)::: action remove property change listener:::
WindowsPlacesBar#doDirectoryChanged(File)::: windows places bar do directory changed:::for->i
WindowsPlacesBar#propertyChange(PropertyChangeEvent)::: windows places bar property change:::prop->e->getPropertyName->if->fc->getCurrentDirectory->doDirectoryChanged
WindowsPlacesBar#actionPerformed(ActionEvent)::: windows places bar action performed:::b->e->getSource->for->i
WindowsPlacesBar#getPreferredSize()::: windows places bar get preferred size:::min->super->getMinimumSize->pref->super->getPreferredSize->h->if->b->if->bh->b->getPreferredSize->if->if->new->Dimension->return

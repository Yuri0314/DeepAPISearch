ConnectorBootstrap.PermanentExporter#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory, ObjectInputFilter)::: permanent exporter export object:::synchronized->if->ref->if->new->LiveRef->new->UnicastServerRef->else->new->UnicastServerRef2->return->ref->exportObject
ConnectorBootstrap.PermanentExporter#unexportObject(Remote, boolean)::: permanent exporter unexport object:::return->UnicastRemoteObject->unexportObject
ConnectorBootstrap.AccessFileCheckerAuthenticator#authenticate(Object)::: access file checker authenticator authenticate:::authenticator->new->JMXPluggableAuthenticator->subject->authenticator->authenticate->checkAccessFileEntries->return
ConnectorBootstrap.AccessFileCheckerAuthenticator#checkAccessFileEntries(Subject)::: access file checker authenticator check access file entries:::if->throw->new->SecurityException->principals->subject->getPrincipals->foreach->if->properties->p1->getName->containsKey->return->principalsStr->new->HashSet<>->foreach->principalsStr->p2->getName->add->throw->new->SecurityException
ConnectorBootstrap.AccessFileCheckerAuthenticator#propertiesFromFile(String)::: access file checker authenticator properties from file:::p->new->Properties->if->return->try->fin->new->FileInputStream->p->load->catch->finally->return
ConnectorBootstrap#unexportRegistry()::: connector bootstrap unexport registry:::try->if->UnicastRemoteObject->unexportObject->catch->finally
ConnectorBootstrap#initialize():::Initializes and starts the JMX Connector Server:::props->Agent->loadManagementProperties->if->return->portStr->props->getProperty->return->startRemoteConnectorServer
ConnectorBootstrap#initialize(String, Properties):::This method is used by some jtreg tests.:::return->startRemoteConnectorServer
ConnectorBootstrap#startRemoteConnectorServer(String, Properties):::Initializes and starts a JMX Connector Server for remote monitoring and management.:::port->try->Integer->parseInt->catch->throw->new->AgentConfigurationError->finally->if->throw->new->AgentConfigurationError->rmiPort->rmiPortStr->props->getProperty->try->if->Integer->parseInt->catch->throw->new->AgentConfigurationError->finally->if->throw->new->AgentConfigurationError->useAuthenticationStr->props->getProperty->useAuthentication->Boolean->valueOf->booleanValue->useSslStr->props->getProperty->useSsl->Boolean->valueOf->booleanValue->useRegistrySslStr->props->getProperty->useRegistrySsl->Boolean->valueOf->booleanValue->enabledCipherSuites->props->getProperty->enabledCipherSuitesList->if->st->new->StringTokenizer->tokens->st->countTokens->new->StringArr->for->i->enabledProtocols->props->getProperty->enabledProtocolsList->if->st->new->StringTokenizer->tokens->st->countTokens->new->StringArr->for->i->sslNeedClientAuthStr->props->getProperty->sslNeedClientAuth->Boolean->valueOf->booleanValue->sslConfigFileName->props->getProperty->loginConfigName->passwordFileName->shouldHashPasswords->accessFileName->if->props->getProperty->if->props->getDefaultFileName->getProperty->hashPasswords->props->getProperty->Boolean->parseBoolean->checkPasswordFile->props->getDefaultFileName->getProperty->checkAccessFile->bindAddress->props->getProperty->jmxRmiFilter->props->getProperty->if->logger->isLoggable->logger->Agent->getText->Agent->getText->log->mbs->ManagementFactory->getPlatformMBeanServer->cs->url->try->data->exportMBeanServer->Agent->url->toString->getText->config->catch->throw->e->toString->new->AgentConfigurationError->finally->try->properties->new->HashMap<>->properties->url->toString->put->properties->put->properties->put->properties->put->properties->put->ConnectorAddressLink->exportRemote->catch->config->finally->return
ConnectorBootstrap#startLocalConnectorServer()::: connector bootstrap start local connector server:::System->setProperty->env->new->HashMap<>->env->new->PermanentExporter->put->env->getName->put->localhost->lh->try->InetAddress->getByName->lh->getHostAddress->catch->finally->if->lh->isLoopbackAddress->mbs->ManagementFactory->getPlatformMBeanServer->try->url->new->JMXServiceURL->props->Agent->getManagementProperties->if->new->Properties->useLocalOnlyStr->props->getProperty->useLocalOnly->Boolean->valueOf->booleanValue->if->env->new->LocalRMIServerSocketFactory->put->server->JMXConnectorServerFactory->newJMXConnectorServer->server->start->return->catch->throw->e->toString->new->AgentConfigurationError->finally
ConnectorBootstrap#checkPasswordFile(String)::: connector bootstrap check password file:::if->passwordFileName->length->throw->new->AgentConfigurationError->file->new->File->if->file->exists->throw->new->AgentConfigurationError->if->file->canRead->throw->new->AgentConfigurationError->if->file->canWrite->equalsIgnoreCase->logger->log->fs->FileSystem->open->try->if->fs->supportsFileSecurity->if->fs->isAccessUserOnly->msg->Agent->getText->config->throw->new->AgentConfigurationError->catch->throw->new->AgentConfigurationError->finally
ConnectorBootstrap#checkAccessFile(String)::: connector bootstrap check access file:::if->accessFileName->length->throw->new->AgentConfigurationError->file->new->File->if->file->exists->throw->new->AgentConfigurationError->if->file->canRead->throw->new->AgentConfigurationError
ConnectorBootstrap#checkRestrictedFile(String)::: connector bootstrap check restricted file:::if->restrictedFileName->length->throw->new->AgentConfigurationError->file->new->File->if->file->exists->throw->new->AgentConfigurationError->if->file->canRead->throw->new->AgentConfigurationError->fs->FileSystem->open->try->if->fs->supportsFileSecurity->if->fs->isAccessUserOnly->msg->Agent->getText->config->throw->new->AgentConfigurationError->catch->throw->new->AgentConfigurationError->finally
ConnectorBootstrap#getDefaultFileName(String):::Compute the full path name for a default file.:::fileSeparator->return->System->getProperty
ConnectorBootstrap#createSslRMIServerSocketFactory(String, String[], String[], boolean, String)::: connector bootstrap create ssl server socket factory:::if->return->new->HostAwareSslSocketFactory->else->checkRestrictedFile->try->p->new->Properties->try->in->new->FileInputStream->bin->new->BufferedInputStream->p->load->catch->finally->keyStore->p->getProperty->keyStorePassword->p->getProperty->trustStore->p->getProperty->trustStorePassword->p->getProperty->keyStorePasswd->if->keyStorePassword->length->keyStorePassword->toCharArray->trustStorePasswd->if->trustStorePassword->length->trustStorePassword->toCharArray->ks->if->KeyStore->KeyStore->getDefaultType->getInstance->try->ksfis->new->FileInputStream->ks->load->catch->finally->kmf->KeyManagerFactory->KeyManagerFactory->getDefaultAlgorithm->getInstance->kmf->init->ts->if->KeyStore->KeyStore->getDefaultType->getInstance->try->tsfis->new->FileInputStream->ts->load->catch->finally->tmf->TrustManagerFactory->TrustManagerFactory->getDefaultAlgorithm->getInstance->tmf->init->ctx->SSLContext->getInstance->ctx->kmf->getKeyManagers->tmf->getTrustManagers->init->return->new->HostAwareSslSocketFactory->catch->throw->e->toString->new->AgentConfigurationError->finally
ConnectorBootstrap#exportMBeanServer(MBeanServer, int, int, boolean, boolean, String, String[], String[], boolean, boolean, String, String, boolean, String, String, String)::: connector bootstrap export bean server:::System->setProperty->url->new->JMXServiceURL->env->new->HashMap<>->exporter->new->PermanentExporter->env->put->env->getName->put->if->jmxRmiFilter->isEmpty->env->put->useSocketFactory->if->if->env->put->if->env->put->if->env->put->env->put->if->env->get->env->get->env->new->AccessFileCheckerAuthenticator->put->csf->ssf->if->new->SslRMIClientSocketFactory->createSslRMIServerSocketFactory->if->env->put->env->put->if->new->HostAwareSocketFactory->env->put->connServer->try->JMXConnectorServerFactory->newJMXConnectorServer->connServer->start->catch->if->connServer->getAddress->throw->url->toString->new->AgentConfigurationError->else->throw->connServer->getAddress->toString->new->AgentConfigurationError->finally->if->new->SingleEntryRegistry->else->if->new->SingleEntryRegistry->else->new->SingleEntryRegistry->registryPort->getRef->getLiveRef->getPort->jmxUrlStr->String->url->getHost->format->remoteURL->new->JMXServiceURL->return->new->JMXConnectorServerData
ConnectorBootstrap#config(String, String)::: connector bootstrap config:::logger->log
ConnectorBootstrap#config(String, Throwable)::: connector bootstrap config:::logger->log
ConnectorBootstrap#config(String, String, Throwable)::: connector bootstrap config:::logger->log
ConnectorBootstrap.HostAwareSocketFactory#createServerSocket(int)::: host aware socket factory create server socket:::if->return->new->ServerSocket->else->try->addr->InetAddress->getByName->return->new->ServerSocket->catch->return->new->ServerSocket->finally
ConnectorBootstrap.HostAwareSslSocketFactory#createServerSocket(int)::: host aware ssl socket factory create server socket:::if->try->addr->InetAddress->getByName->return->new->SslServerSocket->catch->return->new->SslServerSocket->finally->else->return->new->SslServerSocket
ConnectorBootstrap.HostAwareSslSocketFactory#checkValues(SSLContext, String[], String[])::: host aware ssl socket factory check values:::sslSocketFactory->SSLSocketFactory->getDefault->context->getSocketFactory->sslSocket->if->try->sslSocketFactory->createSocket->catch->msg->throw->new->IllegalArgumentException->initCause->finally->if->sslSocket->setEnabledCipherSuites->if->sslSocket->setEnabledProtocols
ConnectorBootstrap.SslServerSocket#accept()::: ssl server socket accept:::sslSocketFactory->getDefaultSSLSocketFactory->context->getSocketFactory->socket->super->accept->sslSocket->sslSocketFactory->socket->getInetAddress->getHostName->socket->getPort->createSocket->sslSocket->setUseClientMode->if->sslSocket->setEnabledCipherSuites->if->sslSocket->setEnabledProtocols->sslSocket->setNeedClientAuth->return
ConnectorBootstrap.SslServerSocket#getDefaultSSLSocketFactory()::: ssl server socket get default socket factory:::if->SSLSocketFactory->getDefault->return->else->return
LocalRMIServerSocketFactory#createServerSocket(int):::Creates a server socket that only accepts connection requests from clients running on the host where the RMI remote objects have been exported.:::return->new->ServerSocket
LocalRMIServerSocketFactory#equals(Object):::Two LocalRMIServerSocketFactory objects are equal if they are of the same type.:::return
LocalRMIServerSocketFactory#hashCode():::Returns a hash code value for this LocalRMIServerSocketFactory.:::return->getClass->hashCode
SingleEntryRegistry#list()::: single entry registry list:::return->new->StringArr
SingleEntryRegistry#lookup(String)::: single entry registry lookup:::if->name->equals->return->throw->new->NotBoundException
SingleEntryRegistry#bind(String, Remote)::: single entry registry bind:::throw->new->AccessException
SingleEntryRegistry#rebind(String, Remote)::: single entry registry rebind:::throw->new->AccessException
SingleEntryRegistry#unbind(String)::: single entry registry unbind:::throw->new->AccessException
SingleEntryRegistry#singleRegistryFilter(ObjectInputFilter.FilterInfo):::ObjectInputFilter to check parameters to SingleEntryRegistry:::return->info->serialClass->info->depth->info->references->info->arrayLength

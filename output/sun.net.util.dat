IPAddressUtil#textToNumericFormatV4(String)::: address util text to numeric format v4:::res->new->byteArr->tmpValue->currByte->newOctet->len->src->length->if->return->for->i->if->return->switch->return
IPAddressUtil#textToNumericFormatV6(String)::: address util text to numeric format v6:::if->src->length->return->colonp->ch->saw_xdigit->val->srcb->src->toCharArray->dst->new->byteArr->srcb_length->pc->src->indexOf->if->return->if->i->j->if->if->return->curtok->while->chval->Character->digit->if->if->return->continue->if->if->if->return->continue->else->if->return->if->return->continue->if->ia4->src->substring->dot_count->index->while->ia4->indexOf->if->return->v4addr->textToNumericFormatV4->if->return->for->k->break->return->if->if->return->if->n->if->return->for->if->return->newdst->convertFromIPv4MappedAddress->if->return->else->return
IPAddressUtil#isIPv4LiteralAddress(String)::: address util is pv4 literal address:::return->textToNumericFormatV4
IPAddressUtil#isIPv6LiteralAddress(String)::: address util is pv6 literal address:::return->textToNumericFormatV6
IPAddressUtil#convertFromIPv4MappedAddress(byte[])::: address util convert from pv4 mapped address:::if->isIPv4MappedAddress->newAddr->new->byteArr->System->arraycopy->return->return
IPAddressUtil#isIPv4MappedAddress(byte[]):::Utility routine to check if the InetAddress is an IPv4 mapped IPv6 address.:::if->return->if->return->return
IPAddressUtil#match(char, long, long)::: address util match:::if->return->if->return->return
IPAddressUtil#scan(String, long, long)::: address util scan:::i->len->if->s->length->return->match->while->s->charAt->match->if->return->return
IPAddressUtil#scan(String, long, long, char[])::: address util scan:::i->len->if->s->length->return->match->c->c0->while->s->charAt->match->if->Arrays->binarySearch->break->if->return->return
IPAddressUtil#describeChar(char)::: address util describe char:::if->if->return->if->return->return->if->return->return
IPAddressUtil#checkUserInfo(String)::: address util check user info:::index->scan->if->return->str->charAt->describeChar->return
IPAddressUtil#checkHost(String)::: address util check host:::index->if->str->startsWith->str->endsWith->str->str->length->substring->if->isIPv6LiteralAddress->str->indexOf->if->str->substring->scan->if->return->str->charAt->describeChar->return->return->else->scan->if->return->str->charAt->describeChar->return
IPAddressUtil#checkAuth(String)::: address util check auth:::index->scan->if->return->str->charAt->describeChar->return
IPAddressUtil#checkAuthority(URL)::: address util check authority:::s->u->h->if->return->if->url->getUserInfo->checkUserInfo->return->if->url->getHost->checkHost->return->if->return->url->getAuthority->checkAuth->return
IPAddressUtil#checkExternalForm(URL)::: address util check external form:::s->if->return->index->url->getUserInfo->scan->if->return->s->charAt->describeChar->if->url->getHost->checkHostString->return->return
IPAddressUtil#checkHostString(String)::: address util check host string:::if->return->index->scan->if->return->host->charAt->describeChar->return
SocketExceptions#initTextProp()::: socket exceptions init text prop:::return->AccessController->new->PrivilegedAction<Boolean>->doPrivileged
SocketExceptions#of(IOException, InetSocketAddress):::Utility which takes an exception and returns either the same exception or a new exception of the same type with the same stack trace and detail message enhanced with addressing information from the given InetSocketAddress:::if->return->port->address->getPort->host->address->getHostString->sb->new->StringBuilder->sb->e->getMessage->append->sb->append->sb->append->sb->append->sb->Integer->toString->append->enhancedMsg->sb->toString->return->create
SocketExceptions#create(IOException, String)::: socket exceptions create:::return->AccessController->new->PrivilegedAction<IOException>->doPrivileged
URLUtil#urlNoFragString(URL):::Returns a string form of the url suitable for use as a key in HashMap/Sets:::strForm->new->StringBuilder->protocol->url->getProtocol->if->protocol->toLowerCase->strForm->append->strForm->append->host->url->getHost->if->host->toLowerCase->strForm->append->port->url->getPort->if->url->getDefaultPort->if->strForm->append->append->file->url->getFile->if->strForm->append->return->strForm->toString
URLUtil#getConnectPermission(URL)::: util get connect permission:::urlStringLowerCase->url->toString->toLowerCase->if->urlStringLowerCase->startsWith->urlStringLowerCase->startsWith->return->getURLConnectPermission->else->if->urlStringLowerCase->startsWith->urlStringLowerCase->startsWith->urlString->url->toString->bangPos->urlString->indexOf->urlString->urlString->length->substring->u->new->URL->return->getURLConnectPermission->else->return->url->openConnection->getPermission
URLUtil#getURLConnectPermission(URL)::: util get connect permission:::urlString->url->getProtocol->url->getAuthority->url->getPath->return->new->URLPermission

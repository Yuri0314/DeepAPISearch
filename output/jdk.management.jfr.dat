jdk.management.jfr.ConfigurationInfo#getProvider()->String:::Returns the provider of the configuration associated with this ConfigurationInfo (for example, "OpenJDK").
jdk.management.jfr.ConfigurationInfo#getContents()->String:::Returns the textual representation of the configuration associated with this ConfigurationInfo, typically the contents of the configuration file that was used to create the configuration.
jdk.management.jfr.ConfigurationInfo#getSettings()->Map:::Returns the settings for the configuration associated with this ConfigurationInfo.
jdk.management.jfr.ConfigurationInfo#getLabel()->String:::Returns the human-readable name (for example, "Continuous" or "Profiling") for the configuration associated with this ConfigurationInfo
jdk.management.jfr.ConfigurationInfo#getName()->String:::Returns the name of the configuration associated with this ConfigurationInfo (for example, "default").
jdk.management.jfr.ConfigurationInfo#getDescription()->String:::Returns a short sentence that describes the configuration associated with this ConfigurationInfo (for example, "Low overhead configuration safe for continuous use in production environments".
jdk.management.jfr.ConfigurationInfo#from(CompositeData)->ConfigurationInfo:::Returns a ConfigurationInfo object represented by the specified CompositeData
jdk.management.jfr.ConfigurationInfo#toString()->String:::Returns a description of the configuration that is associated with this ConfigurationInfo.
jdk.management.jfr.EventTypeInfo#getLabel()->String:::Returns the label, a human-readable name, associated with the event type for this EventTypeInfo (for example, "Garbage Collection").
jdk.management.jfr.EventTypeInfo#getCategoryNames()->List:::Returns the list of human-readable names that makes up the category for this EventTypeInfo (for example, "Java Virtual Machine" or "Garbage Collector").
jdk.management.jfr.EventTypeInfo#getId()->long:::Returns the unique ID for the event type associated with this EventTypeInfo, not guaranteed to be the same for different Java Virtual Machines (JVMs) instances.
jdk.management.jfr.EventTypeInfo#getName()->String:::Returns the name for the event type associated with this EventTypeInfo (for example, "jdk.GarbageCollection").
jdk.management.jfr.EventTypeInfo#getDescription()->String:::Returns a short sentence or two describing the event type associated with this EventTypeInfo, for example "Garbage collection performed by the JVM"".
jdk.management.jfr.EventTypeInfo#getSettingDescriptors()->List:::Returns settings for the event type associated with this EventTypeInfo.
jdk.management.jfr.EventTypeInfo#toString()->String:::Returns a description of this EventTypeInfo.
jdk.management.jfr.EventTypeInfo#from(CompositeData)->EventTypeInfo:::Returns an EventType represented by the specified CompositeData  The supplied CompositeData must have the following item names and item types to be valid
jdk.management.jfr.FlightRecorderMXBean#newRecording()->long:::Creates a recording, but doesn't start it.
jdk.management.jfr.FlightRecorderMXBean#takeSnapshot()->long:::Creates a snapshot recording of all available recorded data
jdk.management.jfr.FlightRecorderMXBean#cloneRecording(long, boolean)->long:::Creates a copy of an existing recording, useful for extracting parts of a recording
jdk.management.jfr.FlightRecorderMXBean#startRecording(long)->void:::Starts the recording with the specified ID
jdk.management.jfr.FlightRecorderMXBean#stopRecording(long)->boolean:::Stops the running recording with the specified ID.
jdk.management.jfr.FlightRecorderMXBean#closeRecording(long)->void:::Closes the recording with the specified ID and releases any system resources that are associated with the recording
jdk.management.jfr.FlightRecorderMXBean#openStream(long, Map)->long:::Opens a data stream for the recording with the specified ID, or 0 to get data irrespective of recording
jdk.management.jfr.FlightRecorderMXBean#closeStream(long)->void:::Closes the recording stream with the specified ID and releases any system resources that are associated with the stream
jdk.management.jfr.FlightRecorderMXBean#readStream(long)->byte[]:::Reads a portion of data from the stream with the specified ID, or returns null if no more data is available
jdk.management.jfr.FlightRecorderMXBean#getRecordingOptions(long)->Map:::Returns a map that contains the options for the recording with the specified ID (for example, the destination file or time span to keep recorded data)
jdk.management.jfr.FlightRecorderMXBean#getRecordingSettings(long)->Map:::Returns a Map that contains the settings for the recording with the specified ID, (for example, the event thresholds)  If multiple recordings are running at the same time, more data could be recorded than what is specified in the Map object
jdk.management.jfr.FlightRecorderMXBean#setConfiguration(long, String)->void:::Sets a configuration as a string representation for the recording with the specified ID.
jdk.management.jfr.FlightRecorderMXBean#setPredefinedConfiguration(long, String)->void:::Sets a predefined configuration for the recording with the specified ID.
jdk.management.jfr.FlightRecorderMXBean#setRecordingSettings(long, Map)->void:::Sets and replaces all previous settings for the specified recording
jdk.management.jfr.FlightRecorderMXBean#setRecordingOptions(long, Map)->void:::Configures the recording options (for example, destination file and time span to keep data)
jdk.management.jfr.FlightRecorderMXBean#getRecordings()->List:::Returns the list of the available recordings, not necessarily running
jdk.management.jfr.FlightRecorderMXBean#getConfigurations()->List:::Returns the list of predefined configurations for this Java Virtual Machine (JVM)
jdk.management.jfr.FlightRecorderMXBean#getEventTypes()->List:::Returns the list of currently registered event types
jdk.management.jfr.FlightRecorderMXBean#copyTo(long, String)->void:::Writes recording data to the specified file
jdk.management.jfr.FlightRecorderMXBeanImpl.MXBeanListener#recordingStateChanged(Recording)->void::: bean listener recording state changed
jdk.management.jfr.FlightRecorderMXBeanImpl#startRecording(long)->void::: flight recorder bean impl start recording
jdk.management.jfr.FlightRecorderMXBeanImpl#stopRecording(long)->boolean::: flight recorder bean impl stop recording
jdk.management.jfr.FlightRecorderMXBeanImpl#closeRecording(long)->void::: flight recorder bean impl close recording
jdk.management.jfr.FlightRecorderMXBeanImpl#openStream(long, Map)->long::: flight recorder bean impl open stream
jdk.management.jfr.FlightRecorderMXBeanImpl#closeStream(long)->void::: flight recorder bean impl close stream
jdk.management.jfr.FlightRecorderMXBeanImpl#readStream(long)->byte[]::: flight recorder bean impl read stream
jdk.management.jfr.FlightRecorderMXBeanImpl#getRecordings()->List::: flight recorder bean impl get recordings
jdk.management.jfr.FlightRecorderMXBeanImpl#getConfigurations()->List::: flight recorder bean impl get configurations
jdk.management.jfr.FlightRecorderMXBeanImpl#getEventTypes()->List::: flight recorder bean impl get event types
jdk.management.jfr.FlightRecorderMXBeanImpl#getRecordingSettings(long)->Map::: flight recorder bean impl get recording settings
jdk.management.jfr.FlightRecorderMXBeanImpl#setRecordingSettings(long, Map)->void::: flight recorder bean impl set recording settings
jdk.management.jfr.FlightRecorderMXBeanImpl#newRecording()->long::: flight recorder bean impl new recording
jdk.management.jfr.FlightRecorderMXBeanImpl#takeSnapshot()->long::: flight recorder bean impl take snapshot
jdk.management.jfr.FlightRecorderMXBeanImpl#setConfiguration(long, String)->void::: flight recorder bean impl set configuration
jdk.management.jfr.FlightRecorderMXBeanImpl#setPredefinedConfiguration(long, String)->void::: flight recorder bean impl set predefined configuration
jdk.management.jfr.FlightRecorderMXBeanImpl#copyTo(long, String)->void::: flight recorder bean impl copy to
jdk.management.jfr.FlightRecorderMXBeanImpl#setRecordingOptions(long, Map)->void::: flight recorder bean impl set recording options
jdk.management.jfr.FlightRecorderMXBeanImpl#getRecordingOptions(long)->Map::: flight recorder bean impl get recording options
jdk.management.jfr.FlightRecorderMXBeanImpl#cloneRecording(long, boolean)->long::: flight recorder bean impl clone recording
jdk.management.jfr.FlightRecorderMXBeanImpl#getObjectName()->ObjectName::: flight recorder bean impl get object name
jdk.management.jfr.FlightRecorderMXBeanImpl#addNotificationListener(NotificationListener, NotificationFilter, Object)->void::: flight recorder bean impl add notification listener
jdk.management.jfr.FlightRecorderMXBeanImpl#removeNotificationListener(NotificationListener)->void::: flight recorder bean impl remove notification listener
jdk.management.jfr.FlightRecorderMXBeanImpl#removeNotificationListener(NotificationListener, NotificationFilter, Object)->void::: flight recorder bean impl remove notification listener
jdk.management.jfr.MBeanUtils#createObjectName()->ObjectName::: bean utils create object name
jdk.management.jfr.MBeanUtils#checkControl()->void::: bean utils check control
jdk.management.jfr.MBeanUtils#checkMonitor()->void::: bean utils check monitor
jdk.management.jfr.MBeanUtils#transformList(List, Function)->List::: bean utils transform list
jdk.management.jfr.MBeanUtils#booleanValue(String)->boolean::: bean utils boolean value
jdk.management.jfr.MBeanUtils#duration(String)->Duration::: bean utils duration
jdk.management.jfr.MBeanUtils#parseTimestamp(String, Instant)->Instant::: bean utils parse timestamp
jdk.management.jfr.MBeanUtils#size(String)->Long::: bean utils size
jdk.management.jfr.MBeanUtils#parseBlockSize(String, int)->int::: bean utils parse block size
jdk.management.jfr.MBeanUtils#destination(Recording, String)->String::: bean utils destination
jdk.management.jfr.RecordingInfo#getName()->String:::Returns the name of the recording associated with this RecordingInfo.
jdk.management.jfr.RecordingInfo#getId()->long:::Returns the unique ID for the recording associated with this RecordingInfo.
jdk.management.jfr.RecordingInfo#getDumpOnExit()->boolean:::Returns if the recording associated with this RecordingInfo should be dumped to file when the JVM exits.
jdk.management.jfr.RecordingInfo#getMaxAge()->long:::Returns how many seconds data should be kept on disk, or 0 if data is to be kept forever
jdk.management.jfr.RecordingInfo#getMaxSize()->long:::Returns the amount of data, measured in bytes, the recording associated with this RecordingInfo, should be kept on disk, before it's rotated away, or 0 if data is to be kept indefinitely
jdk.management.jfr.RecordingInfo#getState()->String:::Returns a String representation of state of the recording associated with this RecordingInfo
jdk.management.jfr.RecordingInfo#getStartTime()->long:::Returns start time of the recording associated with this RecordingInfo, measured as ms since epoch, or null if the recording hasn't started.
jdk.management.jfr.RecordingInfo#getStopTime()->long:::Returns the actual or expected stop time of the recording associated with this RecordingInfo, measured as ms since epoch, or null if the expected or actual stop time is not known, which can only happen if the recording has not yet been stopped.
jdk.management.jfr.RecordingInfo#getSettings()->Map:::Returns the settings for the recording associated with this RecordingInfo.
jdk.management.jfr.RecordingInfo#getDestination()->String:::Returns destination path where data, for the recording associated with this RecordingInfo, should be written when the recording stops, or null if the recording should not be written.
jdk.management.jfr.RecordingInfo#toString()->String:::Returns a string description of the recording associated with this RecordingInfo
jdk.management.jfr.RecordingInfo#getSize()->long:::Returns the amount data recorded by recording
jdk.management.jfr.RecordingInfo#isToDisk()->boolean:::Returns true if the recording associated with this RecordingInfo should be flushed to disk, when memory buffers are full, false otherwise.
jdk.management.jfr.RecordingInfo#getDuration()->long:::Returns the desired duration, measured in seconds, of the recording associated with this RecordingInfo, or {code 0} if no duration has been set.
jdk.management.jfr.RecordingInfo#from(CompositeData)->RecordingInfo:::Returns a RecordingInfo represented by the specified CompositeData object
jdk.management.jfr.SettingDescriptorInfo#getLabel()->String:::Returns the human-readable name of the setting associated with this SettingDescriptorInfo (for example, "Threshold").
jdk.management.jfr.SettingDescriptorInfo#getName()->String:::Returns the name of the setting associated with this SettingDescriptorInfo (for example, "threshold").
jdk.management.jfr.SettingDescriptorInfo#getDescription()->String:::Returns the description of the setting associated this SettingDescriptorInfo (for example, "The duration an event must exceed to be be recorded").
jdk.management.jfr.SettingDescriptorInfo#getTypeName()->String:::Returns the type name of the setting associated this SettingDescriptorInfo (for example, "jdk.settings.Threshold")
jdk.management.jfr.SettingDescriptorInfo#getContentType()->String:::Returns the content type of the setting associated this SettingDescriptorInfo (for example, "jdk.jfr.Timespan")
jdk.management.jfr.SettingDescriptorInfo#getDefaultValue()->String:::Returns the default value of the setting associated this SettingDescriptorInfo (for example, "20 ms").
jdk.management.jfr.SettingDescriptorInfo#from(CompositeData)->SettingDescriptorInfo:::Returns an SettingDescriptorInfo represented by the specified CompositeData  The supplied CompositeData must have the following item names and item types to be valid
jdk.management.jfr.SettingDescriptorInfo#toString()->String:::Returns a String description of this SettingDescriptorInfo.
jdk.management.jfr.Stream#getLastTouched()->long::: stream get last touched
jdk.management.jfr.Stream#read()->byte[]::: stream read
jdk.management.jfr.Stream#close()->void::: stream close
jdk.management.jfr.Stream#getId()->long::: stream get id
jdk.management.jfr.StreamCleanupTask#run()->void::: stream cleanup task run
jdk.management.jfr.StreamManager#getStream(long)->Stream::: stream manager get stream
jdk.management.jfr.StreamManager#create(InputStream, int)->Stream::: stream manager create
jdk.management.jfr.StreamManager#destroy(Stream)->void::: stream manager destroy
jdk.management.jfr.StreamManager#scheduleAbort(Stream, long)->void::: stream manager schedule abort
jdk.management.jfr.Stringifier#add(String, Object)->void::: stringifier add
jdk.management.jfr.Stringifier#toString()->String::: stringifier to string

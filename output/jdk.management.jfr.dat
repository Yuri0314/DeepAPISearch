ConfigurationInfo#getProvider():::Returns the provider of the configuration associated with this ConfigurationInfo (for example, "OpenJDK").:::return
ConfigurationInfo#getContents():::Returns the textual representation of the configuration associated with this ConfigurationInfo, typically the contents of the configuration file that was used to create the configuration.:::return
ConfigurationInfo#getSettings():::Returns the settings for the configuration associated with this ConfigurationInfo.:::return
ConfigurationInfo#getLabel():::Returns the human-readable name (for example, "Continuous" or "Profiling") for the configuration associated with this ConfigurationInfo:::return
ConfigurationInfo#getName():::Returns the name of the configuration associated with this ConfigurationInfo (for example, "default").:::return
ConfigurationInfo#getDescription():::Returns a short sentence that describes the configuration associated with this ConfigurationInfo (for example, "Low overhead configuration safe for continuous use in production environments".:::return
ConfigurationInfo#from(CompositeData):::Returns a ConfigurationInfo object represented by the specified CompositeData:::if->return->return->new->ConfigurationInfo
ConfigurationInfo#toString():::Returns a description of the configuration that is associated with this ConfigurationInfo.:::s->new->Stringifier->s->add->s->add->s->add->s->add->return->s->toString
EventTypeInfo#getLabel():::Returns the label, a human-readable name, associated with the event type for this EventTypeInfo (for example, "Garbage Collection").:::return
EventTypeInfo#getCategoryNames():::Returns the list of human-readable names that makes up the category for this EventTypeInfo (for example, "Java Virtual Machine" or "Garbage Collector").:::return
EventTypeInfo#getId():::Returns the unique ID for the event type associated with this EventTypeInfo, not guaranteed to be the same for different Java Virtual Machines (JVMs) instances.:::return
EventTypeInfo#getName():::Returns the name for the event type associated with this EventTypeInfo (for example, "jdk.GarbageCollection").:::return
EventTypeInfo#getDescription():::Returns a short sentence or two describing the event type associated with this EventTypeInfo, for example "Garbage collection performed by the JVM"".:::return
EventTypeInfo#getSettingDescriptors():::Returns settings for the event type associated with this EventTypeInfo.:::return
EventTypeInfo#toString():::Returns a description of this EventTypeInfo.:::s->new->Stringifier->s->add->s->add->s->add->s->add->sj->new->StringJoiner->foreach->sj->add->s->sj->toString->add->return->s->toString
EventTypeInfo#from(CompositeData):::Returns an EventType represented by the specified CompositeData  The supplied CompositeData must have the following item names and item types to be valid:::if->return->return->new->EventTypeInfo
FlightRecorderMXBean#newRecording():::Creates a recording, but doesn't start it.:::
FlightRecorderMXBean#takeSnapshot():::Creates a snapshot recording of all available recorded data:::
FlightRecorderMXBean#cloneRecording(long, boolean):::Creates a copy of an existing recording, useful for extracting parts of a recording:::
FlightRecorderMXBean#startRecording(long):::Starts the recording with the specified ID:::
FlightRecorderMXBean#stopRecording(long):::Stops the running recording with the specified ID.:::
FlightRecorderMXBean#closeRecording(long):::Closes the recording with the specified ID and releases any system resources that are associated with the recording:::
FlightRecorderMXBean#openStream(long, Map):::Opens a data stream for the recording with the specified ID, or 0 to get data irrespective of recording:::
FlightRecorderMXBean#closeStream(long):::Closes the recording stream with the specified ID and releases any system resources that are associated with the stream:::
FlightRecorderMXBean#readStream(long):::Reads a portion of data from the stream with the specified ID, or returns null if no more data is available:::
FlightRecorderMXBean#getRecordingOptions(long):::Returns a map that contains the options for the recording with the specified ID (for example, the destination file or time span to keep recorded data):::
FlightRecorderMXBean#getRecordingSettings(long):::Returns a Map that contains the settings for the recording with the specified ID, (for example, the event thresholds)  If multiple recordings are running at the same time, more data could be recorded than what is specified in the Map object:::
FlightRecorderMXBean#setConfiguration(long, String):::Sets a configuration as a string representation for the recording with the specified ID.:::
FlightRecorderMXBean#setPredefinedConfiguration(long, String):::Sets a predefined configuration for the recording with the specified ID.:::
FlightRecorderMXBean#setRecordingSettings(long, Map):::Sets and replaces all previous settings for the specified recording:::
FlightRecorderMXBean#setRecordingOptions(long, Map):::Configures the recording options (for example, destination file and time span to keep data):::
FlightRecorderMXBean#getRecordings():::Returns the list of the available recordings, not necessarily running:::
FlightRecorderMXBean#getConfigurations():::Returns the list of predefined configurations for this Java Virtual Machine (JVM):::
FlightRecorderMXBean#getEventTypes():::Returns the list of currently registered event types:::
FlightRecorderMXBean#copyTo(long, String):::Writes recording data to the specified file:::
RecordingInfo#getName():::Returns the name of the recording associated with this RecordingInfo.:::return
RecordingInfo#getId():::Returns the unique ID for the recording associated with this RecordingInfo.:::return
RecordingInfo#getDumpOnExit():::Returns if the recording associated with this RecordingInfo should be dumped to file when the JVM exits.:::return
RecordingInfo#getMaxAge():::Returns how many seconds data should be kept on disk, or 0 if data is to be kept forever:::return
RecordingInfo#getMaxSize():::Returns the amount of data, measured in bytes, the recording associated with this RecordingInfo, should be kept on disk, before it's rotated away, or 0 if data is to be kept indefinitely:::return
RecordingInfo#getState():::Returns a String representation of state of the recording associated with this RecordingInfo:::return
RecordingInfo#getStartTime():::Returns start time of the recording associated with this RecordingInfo, measured as ms since epoch, or null if the recording hasn't started.:::return
RecordingInfo#getStopTime():::Returns the actual or expected stop time of the recording associated with this RecordingInfo, measured as ms since epoch, or null if the expected or actual stop time is not known, which can only happen if the recording has not yet been stopped.:::return
RecordingInfo#getSettings():::Returns the settings for the recording associated with this RecordingInfo.:::return
RecordingInfo#getDestination():::Returns destination path where data, for the recording associated with this RecordingInfo, should be written when the recording stops, or null if the recording should not be written.:::return
RecordingInfo#toString():::Returns a string description of the recording associated with this RecordingInfo:::s->new->Stringifier->s->add->s->add->s->add->s->add->return->s->toString
RecordingInfo#getSize():::Returns the amount data recorded by recording:::return
RecordingInfo#isToDisk():::Returns true if the recording associated with this RecordingInfo should be flushed to disk, when memory buffers are full, false otherwise.:::return
RecordingInfo#getDuration():::Returns the desired duration, measured in seconds, of the recording associated with this RecordingInfo, or {code 0} if no duration has been set.:::return
RecordingInfo#from(CompositeData):::Returns a RecordingInfo represented by the specified CompositeData object:::if->return->return->new->RecordingInfo
SettingDescriptorInfo#getLabel():::Returns the human-readable name of the setting associated with this SettingDescriptorInfo (for example, "Threshold").:::return
SettingDescriptorInfo#getName():::Returns the name of the setting associated with this SettingDescriptorInfo (for example, "threshold").:::return
SettingDescriptorInfo#getDescription():::Returns the description of the setting associated this SettingDescriptorInfo (for example, "The duration an event must exceed to be be recorded").:::return
SettingDescriptorInfo#getTypeName():::Returns the type name of the setting associated this SettingDescriptorInfo (for example, "jdk.settings.Threshold"):::return
SettingDescriptorInfo#getContentType():::Returns the content type of the setting associated this SettingDescriptorInfo (for example, "jdk.jfr.Timespan"):::return
SettingDescriptorInfo#getDefaultValue():::Returns the default value of the setting associated this SettingDescriptorInfo (for example, "20 ms").:::return
SettingDescriptorInfo#from(CompositeData):::Returns an SettingDescriptorInfo represented by the specified CompositeData  The supplied CompositeData must have the following item names and item types to be valid:::if->return->return->new->SettingDescriptorInfo
SettingDescriptorInfo#toString():::Returns a String description of this SettingDescriptorInfo.:::s->new->Stringifier->s->add->s->add->s->add->s->add->s->add->s->add->return->s->toString

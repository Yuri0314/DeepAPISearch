Inlineable#getInlineableElement(ResolvedJavaMethod, Invoke, HighTierContext, CanonicalizerPhase, boolean)::: inlineable get inlineable element:::return->new->InlineableGraph
Inlineable#getNodeCount()::: inlineable get node count:::
Inlineable#getInvokes()::: inlineable get invokes:::
Inlineable#getProbability(Invoke)::: inlineable get probability:::
InlineableGraph#specializeGraphToArguments(Invoke, HighTierContext, CanonicalizerPhase)::: inlineable graph specialize graph to arguments:::debug->graph->getDebug->try->s->debug->scope->parameterUsages->replaceParamsWithMoreInformativeArguments->if->canonicalizer->applyIncremental->return->else->return->catch->throw->debug->handle->finally
InlineableGraph#isArgMoreInformativeThanParam(ValueNode, ParameterNode)::: inlineable graph is arg more informative than param:::return->arg->isConstant->canStampBeImproved
InlineableGraph#canStampBeImproved(ValueNode, ParameterNode)::: inlineable graph can stamp be improved:::return->improvedStamp
InlineableGraph#improvedStamp(ValueNode, ParameterNode)::: inlineable graph improved stamp:::joinedStamp->param->stamp->arg->stamp->join->if->joinedStamp->param->stamp->equals->return->return
InlineableGraph#replaceParamsWithMoreInformativeArguments(Invoke, HighTierContext):::This method detects: <ul> <li>constants among the arguments to the invoke</li> <li>arguments with more precise type than that declared by the corresponding parameter</li> </ul>   The corresponding parameters are updated to reflect the above information:::args->invoke->callTarget->arguments->parameterUsages->params->graph->getNodes->snapshot->foreach->if->param->usages->isNotEmpty->arg->args->param->index->get->if->arg->isConstant->constant->trackParameterUsages->param->graph->ConstantNode->arg->stamp->constant->getValue->constant->getStableDimension->constant->isDefaultStable->context->getMetaAccess->forConstant->unique->replaceAtUsagesAndDelete->else->impro->improvedStamp->if->param->setStamp->trackParameterUsages->else->return
InlineableGraph#trackParameterUsages(ParameterNode, ArrayList)::: inlineable graph track parameter usages:::result->new->ArrayList<>->param->usages->snapshotTo->return
InlineableGraph#parseBytecodes(ResolvedJavaMethod, HighTierContext, CanonicalizerPhase, StructuredGraph, boolean):::This method builds the IR nodes for the given method and canonicalizes them:::debug->caller->getDebug->newGraph->caller->getOptions->AllowAssumptions->caller->getAssumptions->ifNonNull->new->StructuredGraph.Builder->method->trackNodeSourcePosition->caller->useProfilingInfo->useProfilingInfo->build->try->s->debug->scope->if->caller->isUnsafeAccessTrackingEnabled->newGraph->disableUnsafeAccessTracking->if->context->getGraphBuilderSuite->context->getGraphBuilderSuite->apply->new->DeadCodeEliminationPhase->apply->canonicalizer->apply->return->catch->throw->debug->handle->finally
InlineableGraph#getNodeCount()::: inlineable graph get node count:::return->InliningUtil->getNodeCount
InlineableGraph#getInvokes()::: inlineable graph get invokes:::return->graph->getInvokes
InlineableGraph#getProbability(Invoke)::: inlineable graph get probability:::return->probabilites->invoke->asNode->applyAsDouble
InlineableGraph#getGraph()::: inlineable graph get graph:::return

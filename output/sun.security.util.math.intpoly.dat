sun.security.util.math.intpoly.IntegerPolynomial#reduce(long[])->void:::Reduce an IntegerPolynomial representation (a) and store the result in a
sun.security.util.math.intpoly.IntegerPolynomial#multByInt(long[], long)->void:::Multiply an IntegerPolynomial representation (a) with a long (b) and store the result in an IntegerPolynomial representation in a
sun.security.util.math.intpoly.IntegerPolynomial#mult(long[], long[], long[])->void:::Multiply two IntegerPolynomial representations (a and b) and store the result in an IntegerPolynomial representation (r)
sun.security.util.math.intpoly.IntegerPolynomial#square(long[], long[])->void:::Multiply an IntegerPolynomial representation (a) with itself and store the result in an IntegerPolynomialRepresentation (r)
sun.security.util.math.intpoly.IntegerPolynomial#getNumLimbs()->int::: integer polynomial get num limbs
sun.security.util.math.intpoly.IntegerPolynomial#getMaxAdds()->int::: integer polynomial get max adds
sun.security.util.math.intpoly.IntegerPolynomial#getSize()->BigInteger::: integer polynomial get size
sun.security.util.math.intpoly.IntegerPolynomial#get0()->ImmutableElement::: integer polynomial get0
sun.security.util.math.intpoly.IntegerPolynomial#get1()->ImmutableElement::: integer polynomial get1
sun.security.util.math.intpoly.IntegerPolynomial#getElement(BigInteger)->ImmutableElement::: integer polynomial get element
sun.security.util.math.intpoly.IntegerPolynomial#getSmallValue(int)->SmallValue::: integer polynomial get small value
sun.security.util.math.intpoly.IntegerPolynomial#encode(ByteBuffer, int, byte, long[])->void:::This version of encode takes a ByteBuffer that is properly ordered, and may extract larger values (e.g
sun.security.util.math.intpoly.IntegerPolynomial#encodeSmall(ByteBuffer, int, byte, long[])->void::: integer polynomial encode small
sun.security.util.math.intpoly.IntegerPolynomial#encode(byte[], int, int, byte, long[])->void::: integer polynomial encode
sun.security.util.math.intpoly.IntegerPolynomial#postEncodeCarry(long[])->void::: integer polynomial post encode carry
sun.security.util.math.intpoly.IntegerPolynomial#getElement(byte[], int, int, byte)->ImmutableElement::: integer polynomial get element
sun.security.util.math.intpoly.IntegerPolynomial#evaluate(long[])->BigInteger::: integer polynomial evaluate
sun.security.util.math.intpoly.IntegerPolynomial#carryValue(long)->long::: integer polynomial carry value
sun.security.util.math.intpoly.IntegerPolynomial#carry(long[], int, int)->void::: integer polynomial carry
sun.security.util.math.intpoly.IntegerPolynomial#carry(long[])->void::: integer polynomial carry
sun.security.util.math.intpoly.IntegerPolynomial#carryOut(long[], int)->long:::Carry out of the specified position and return the carry value.
sun.security.util.math.intpoly.IntegerPolynomial#setLimbsValuePositive(BigInteger, long[])->void::: integer polynomial set limbs value positive
sun.security.util.math.intpoly.IntegerPolynomial#finalCarryReduceLast(long[])->void:::Carry out of the last limb and reduce back in
sun.security.util.math.intpoly.IntegerPolynomial#finalReduce(long[])->void:::Convert reduced limbs into a number between 0 and MODULUS-1
sun.security.util.math.intpoly.IntegerPolynomial#decode(long[], byte[], int, int)->void:::Decode the value in v and store it in dst
sun.security.util.math.intpoly.IntegerPolynomial#addLimbs(long[], long[], long[])->void:::Add two IntegerPolynomial representations (a and b) and store the result in an IntegerPolynomialRepresentation (dst)
sun.security.util.math.intpoly.IntegerPolynomial#conditionalAssign(int, long[], long[])->void:::Branch-free conditional assignment of b to a
sun.security.util.math.intpoly.IntegerPolynomial#conditionalSwap(int, long[], long[])->void:::Branch-free conditional swap of a and b
sun.security.util.math.intpoly.IntegerPolynomial#limbsToByteArray(long[], byte[])->void:::Stores the reduced, little-endian value of limbs in result.
sun.security.util.math.intpoly.IntegerPolynomial#addLimbsModPowerTwo(long[], long[], byte[])->void:::Add the reduced number corresponding to limbs and other, and store the low-order bytes of the sum in result
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#fixed()->ImmutableElement::: mutable element fixed
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#conditionalSet(IntegerModuloP, int)->void::: mutable element conditional set
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#conditionalSwapWith(MutableIntegerModuloP, int)->void::: mutable element conditional swap with
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setValue(IntegerModuloP)->MutableElement::: mutable element set value
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setValue(byte[], int, int, byte)->MutableElement::: mutable element set value
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setValue(ByteBuffer, int, byte)->MutableElement::: mutable element set value
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setProduct(IntegerModuloP)->MutableElement::: mutable element set product
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setProduct(SmallValue)->MutableElement::: mutable element set product
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setSum(IntegerModuloP)->MutableElement::: mutable element set sum
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setDifference(IntegerModuloP)->MutableElement::: mutable element set difference
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setSquare()->MutableElement::: mutable element set square
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setAdditiveInverse()->MutableElement::: mutable element set additive inverse
sun.security.util.math.intpoly.IntegerPolynomial.MutableElement#setReduced()->MutableElement::: mutable element set reduced
sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement#fixed()->ImmutableElement::: immutable element fixed
sun.security.util.math.intpoly.IntegerPolynomial1305#mult(long[], long[], long[])->void::: integer polynomial1305 mult
sun.security.util.math.intpoly.IntegerPolynomial1305#square(long[], long[])->void::: integer polynomial1305 square
sun.security.util.math.intpoly.IntegerPolynomial1305#encode(ByteBuffer, int, byte, long[])->void::: integer polynomial1305 encode
sun.security.util.math.intpoly.IntegerPolynomial1305#encode(long, long, byte, long[])->void::: integer polynomial1305 encode
sun.security.util.math.intpoly.IntegerPolynomial1305#encode(byte[], int, int, byte, long[])->void::: integer polynomial1305 encode
sun.security.util.math.intpoly.IntegerPolynomial1305#finalCarryReduceLast(long[])->void::: integer polynomial1305 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomial1305#modReduce(long[], int, int)->void::: integer polynomial1305 mod reduce
sun.security.util.math.intpoly.IntegerPolynomial1305#modReduce(long[])->void::: integer polynomial1305 mod reduce
sun.security.util.math.intpoly.IntegerPolynomial1305#carryValue(long)->long::: integer polynomial1305 carry value
sun.security.util.math.intpoly.IntegerPolynomial1305#postEncodeCarry(long[])->void::: integer polynomial1305 post encode carry
sun.security.util.math.intpoly.IntegerPolynomial1305#reduce(long[])->void::: integer polynomial1305 reduce
sun.security.util.math.intpoly.IntegerPolynomial25519#finalCarryReduceLast(long[])->void::: integer polynomial25519 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomial25519#reduce(long[])->void::: integer polynomial25519 reduce
sun.security.util.math.intpoly.IntegerPolynomial25519#mult(long[], long[], long[])->void::: integer polynomial25519 mult
sun.security.util.math.intpoly.IntegerPolynomial25519#square(long[], long[])->void::: integer polynomial25519 square
sun.security.util.math.intpoly.IntegerPolynomial448#finalCarryReduceLast(long[])->void::: integer polynomial448 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomial448#reduce(long[])->void::: integer polynomial448 reduce
sun.security.util.math.intpoly.IntegerPolynomial448#mult(long[], long[], long[])->void::: integer polynomial448 mult
sun.security.util.math.intpoly.IntegerPolynomial448#square(long[], long[])->void::: integer polynomial448 square
sun.security.util.math.intpoly.IntegerPolynomialP256#finalCarryReduceLast(long[])->void::: integer polynomial p256 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomialP256#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: integer polynomial p256 carry reduce0
sun.security.util.math.intpoly.IntegerPolynomialP256#mult(long[], long[], long[])->void::: integer polynomial p256 mult
sun.security.util.math.intpoly.IntegerPolynomialP256#reduce(long[])->void::: integer polynomial p256 reduce
sun.security.util.math.intpoly.IntegerPolynomialP256#square(long[], long[])->void::: integer polynomial p256 square
sun.security.util.math.intpoly.IntegerPolynomialP384#finalCarryReduceLast(long[])->void::: integer polynomial p384 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomialP384#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: integer polynomial p384 carry reduce0
sun.security.util.math.intpoly.IntegerPolynomialP384#mult(long[], long[], long[])->void::: integer polynomial p384 mult
sun.security.util.math.intpoly.IntegerPolynomialP384#reduce(long[])->void::: integer polynomial p384 reduce
sun.security.util.math.intpoly.IntegerPolynomialP384#square(long[], long[])->void::: integer polynomial p384 square
sun.security.util.math.intpoly.IntegerPolynomialP521#finalCarryReduceLast(long[])->void::: integer polynomial p521 final carry reduce last
sun.security.util.math.intpoly.IntegerPolynomialP521#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: integer polynomial p521 carry reduce0
sun.security.util.math.intpoly.IntegerPolynomialP521#mult(long[], long[], long[])->void::: integer polynomial p521 mult
sun.security.util.math.intpoly.IntegerPolynomialP521#reduce(long[])->void::: integer polynomial p521 reduce
sun.security.util.math.intpoly.IntegerPolynomialP521#square(long[], long[])->void::: integer polynomial p521 square
sun.security.util.math.intpoly.P256OrderField#finalCarryReduceLast(long[])->void::: p256 order field final carry reduce last
sun.security.util.math.intpoly.P256OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p256 order field carry reduce0
sun.security.util.math.intpoly.P256OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p256 order field carry reduce1
sun.security.util.math.intpoly.P256OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p256 order field carry reduce2
sun.security.util.math.intpoly.P256OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long)->void::: p256 order field carry reduce0
sun.security.util.math.intpoly.P256OrderField#mult(long[], long[], long[])->void::: p256 order field mult
sun.security.util.math.intpoly.P256OrderField#reduce(long[])->void::: p256 order field reduce
sun.security.util.math.intpoly.P256OrderField#square(long[], long[])->void::: p256 order field square
sun.security.util.math.intpoly.P384OrderField#finalCarryReduceLast(long[])->void::: p384 order field final carry reduce last
sun.security.util.math.intpoly.P384OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p384 order field carry reduce0
sun.security.util.math.intpoly.P384OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p384 order field carry reduce1
sun.security.util.math.intpoly.P384OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p384 order field carry reduce2
sun.security.util.math.intpoly.P384OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p384 order field carry reduce0
sun.security.util.math.intpoly.P384OrderField#mult(long[], long[], long[])->void::: p384 order field mult
sun.security.util.math.intpoly.P384OrderField#reduce(long[])->void::: p384 order field reduce
sun.security.util.math.intpoly.P384OrderField#square(long[], long[])->void::: p384 order field square
sun.security.util.math.intpoly.P521OrderField#finalCarryReduceLast(long[])->void::: p521 order field final carry reduce last
sun.security.util.math.intpoly.P521OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p521 order field carry reduce0
sun.security.util.math.intpoly.P521OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p521 order field carry reduce1
sun.security.util.math.intpoly.P521OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p521 order field carry reduce2
sun.security.util.math.intpoly.P521OrderField#carryReduce3(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p521 order field carry reduce3
sun.security.util.math.intpoly.P521OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)->void::: p521 order field carry reduce0
sun.security.util.math.intpoly.P521OrderField#mult(long[], long[], long[])->void::: p521 order field mult
sun.security.util.math.intpoly.P521OrderField#reduce(long[])->void::: p521 order field reduce
sun.security.util.math.intpoly.P521OrderField#square(long[], long[])->void::: p521 order field square

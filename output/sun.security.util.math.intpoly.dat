IntegerPolynomial#reduce(long[]):::Reduce an IntegerPolynomial representation (a) and store the result in a:::
IntegerPolynomial#multByInt(long[], long):::Multiply an IntegerPolynomial representation (a) with a long (b) and store the result in an IntegerPolynomial representation in a:::for->i->reduce
IntegerPolynomial#mult(long[], long[], long[]):::Multiply two IntegerPolynomial representations (a and b) and store the result in an IntegerPolynomial representation (r):::
IntegerPolynomial#square(long[], long[]):::Multiply an IntegerPolynomial representation (a) with itself and store the result in an IntegerPolynomialRepresentation (r):::
IntegerPolynomial#setPosModLimbs()::: integer polynomial set pos mod limbs:::result->new->longArr->setLimbsValuePositive->return
IntegerPolynomial#getNumLimbs()::: integer polynomial get num limbs:::return
IntegerPolynomial#getMaxAdds()::: integer polynomial get max adds:::return
IntegerPolynomial#getSize()::: integer polynomial get size:::return
IntegerPolynomial#get0()::: integer polynomial get0:::return->new->ImmutableElement
IntegerPolynomial#get1()::: integer polynomial get1:::return->new->ImmutableElement
IntegerPolynomial#getElement(BigInteger)::: integer polynomial get element:::return->new->ImmutableElement
IntegerPolynomial#getSmallValue(int)::: integer polynomial get small value:::maxMag->if->Math->abs->throw->new->IllegalArgumentException->return->new->Limb
IntegerPolynomial#encode(ByteBuffer, int, byte, long[]):::This version of encode takes a ByteBuffer that is properly ordered, and may extract larger values (e.g:::numHighBits->Integer->numberOfLeadingZeros->numBits->requiredLimbs->if->temp->new->longArr->encodeSmall->System->arraycopy->else->encodeSmall
IntegerPolynomial#encodeSmall(ByteBuffer, int, byte, long[])::: integer polynomial encode small:::limbIndex->curLimbValue->bitPos->for->i->if->curV->if->bitsThisLimb->else->if->Arrays->fill->postEncodeCarry
IntegerPolynomial#encode(byte[], int, int, byte, long[])::: integer polynomial encode:::buf->ByteBuffer->wrap->buf->order->encode
IntegerPolynomial#postEncodeCarry(long[])::: integer polynomial post encode carry:::reduce
IntegerPolynomial#getElement(byte[], int, int, byte)::: integer polynomial get element:::result->new->longArr->encode->return->new->ImmutableElement
IntegerPolynomial#evaluate(long[])::: integer polynomial evaluate:::result->for->i->return->result->mod
IntegerPolynomial#carryValue(long)::: integer polynomial carry value:::return
IntegerPolynomial#carry(long[], int, int)::: integer polynomial carry:::for->i
IntegerPolynomial#carry(long[])::: integer polynomial carry:::carry
IntegerPolynomial#carryOut(long[], int):::Carry out of the specified position and return the carry value.:::carry->carryValue->return
IntegerPolynomial#setLimbsValue(BigInteger, long[])::: integer polynomial set limbs value:::setLimbsValuePositive->carry
IntegerPolynomial#setLimbsValuePositive(BigInteger, long[])::: integer polynomial set limbs value positive:::mod->BigInteger->valueOf->for->i
IntegerPolynomial#finalCarryReduceLast(long[]):::Carry out of the last limb and reduce back in:::
IntegerPolynomial#finalReduce(long[]):::Convert reduced limbs into a number between 0 and MODULUS-1:::for->pass->smallerNonNegative->smaller->new->longArr->for->i->conditionalSwap
IntegerPolynomial#decode(long[], byte[], int, int):::Decode the value in v and store it in dst:::nextLimbIndex->curLimbValue->bitPos->for->i
IntegerPolynomial#addLimbs(long[], long[], long[]):::Add two IntegerPolynomial representations (a and b) and store the result in an IntegerPolynomialRepresentation (dst):::for->i
IntegerPolynomial#conditionalAssign(int, long[], long[]):::Branch-free conditional assignment of b to a:::maskValue->for->i
IntegerPolynomial#conditionalSwap(int, long[], long[]):::Branch-free conditional swap of a and b:::maskValue->for->i
IntegerPolynomial#limbsToByteArray(long[], byte[]):::Stores the reduced, little-endian value of limbs in result.:::reducedLimbs->limbs->clone->finalReduce->decode
IntegerPolynomial#addLimbsModPowerTwo(long[], long[], byte[]):::Add the reduced number corresponding to limbs and other, and store the low-order bytes of the sum in result:::reducedOther->other->clone->reducedLimbs->limbs->clone->finalReduce->finalReduce->addLimbs->carry->for->i->decode
IntegerPolynomial.Element#setValue(BigInteger)::: element set value:::setLimbsValue
IntegerPolynomial.Element#getField()::: element get field:::return
IntegerPolynomial.Element#asBigInteger()::: element as big integer:::return->evaluate
IntegerPolynomial.Element#mutable()::: element mutable:::return->limbs->clone->new->MutableElement
IntegerPolynomial.Element#isSummand()::: element is summand:::return
IntegerPolynomial.Element#add(IntegerModuloP)::: element add:::b->if->isSummand->b->isSummand->throw->new->ArithmeticException->newLimbs->new->longArr->for->i->newNumAdds->Math->max->return->new->ImmutableElement
IntegerPolynomial.Element#additiveInverse()::: element additive inverse:::newLimbs->new->longArr->for->i->result->new->ImmutableElement->return
IntegerPolynomial.Element#cloneLow(long[])::: element clone low:::newLimbs->new->longArr->copyLow->return
IntegerPolynomial.Element#copyLow(long[], long[])::: element copy low:::System->arraycopy
IntegerPolynomial.Element#multiply(IntegerModuloP)::: element multiply:::b->newLimbs->new->longArr->mult->return->new->ImmutableElement
IntegerPolynomial.Element#square()::: element square:::newLimbs->new->longArr->IntegerPolynomial.this->square->return->new->ImmutableElement
IntegerPolynomial.Element#addModPowerTwo(IntegerModuloP, byte[])::: element add mod power two:::other->if->isSummand->other->isSummand->throw->new->ArithmeticException->addLimbsModPowerTwo
IntegerPolynomial.Element#asByteArray(byte[])::: element as byte array:::if->isSummand->throw->new->ArithmeticException->limbsToByteArray
IntegerPolynomial.MutableElement#fixed()::: mutable element fixed:::return->limbs->clone->new->ImmutableElement
IntegerPolynomial.MutableElement#conditionalSet(IntegerModuloP, int)::: mutable element conditional set:::other->conditionalAssign
IntegerPolynomial.MutableElement#conditionalSwapWith(MutableIntegerModuloP, int)::: mutable element conditional swap with:::other->conditionalSwap->numAddsTemp
IntegerPolynomial.MutableElement#setValue(IntegerModuloP)::: mutable element set value:::other->System->arraycopy->return
IntegerPolynomial.MutableElement#setValue(byte[], int, int, byte)::: mutable element set value:::encode->return
IntegerPolynomial.MutableElement#setValue(ByteBuffer, int, byte)::: mutable element set value:::encode->return
IntegerPolynomial.MutableElement#setProduct(IntegerModuloP)::: mutable element set product:::b->mult->return
IntegerPolynomial.MutableElement#setProduct(SmallValue)::: mutable element set product:::value->multByInt->return
IntegerPolynomial.MutableElement#setSum(IntegerModuloP)::: mutable element set sum:::b->if->isSummand->b->isSummand->throw->new->ArithmeticException->for->i->Math->max->return
IntegerPolynomial.MutableElement#setDifference(IntegerModuloP)::: mutable element set difference:::b->if->isSummand->b->isSummand->throw->new->ArithmeticException->for->i->Math->max->return
IntegerPolynomial.MutableElement#setSquare()::: mutable element set square:::IntegerPolynomial.this->square->return
IntegerPolynomial.MutableElement#setAdditiveInverse()::: mutable element set additive inverse:::for->i->return
IntegerPolynomial.MutableElement#setReduced()::: mutable element set reduced:::reduce->return
IntegerPolynomial.ImmutableElement#fixed()::: immutable element fixed:::return
IntegerPolynomial1305#mult(long[], long[], long[])::: integer polynomial1305 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->carryReduce
IntegerPolynomial1305#carryReduce(long[], long, long, long, long, long, long, long, long, long)::: integer polynomial1305 carry reduce:::carry3->carryValue->carry4->carryValue->carry
IntegerPolynomial1305#square(long[], long[])::: integer polynomial1305 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->carryReduce
IntegerPolynomial1305#encode(ByteBuffer, int, byte, long[])::: integer polynomial1305 encode:::if->low->buf->getLong->high->buf->getLong->encode->else->super->encode
IntegerPolynomial1305#encode(long, long, byte, long[])::: integer polynomial1305 encode:::
IntegerPolynomial1305#encode(byte[], int, int, byte, long[])::: integer polynomial1305 encode:::if->low->AS_LONG_LE->get->high->AS_LONG_LE->get->encode->else->super->encode
IntegerPolynomial1305#modReduceIn(long[], int, long)::: integer polynomial1305 mod reduce in:::reducedValue
IntegerPolynomial1305#finalCarryReduceLast(long[])::: integer polynomial1305 final carry reduce last:::carry->modReduceIn
IntegerPolynomial1305#modReduce(long[], int, int)::: integer polynomial1305 mod reduce:::for->i
IntegerPolynomial1305#modReduce(long[])::: integer polynomial1305 mod reduce:::modReduce
IntegerPolynomial1305#carryValue(long)::: integer polynomial1305 carry value:::return
IntegerPolynomial1305#postEncodeCarry(long[])::: integer polynomial1305 post encode carry:::
IntegerPolynomial1305#reduce(long[])::: integer polynomial1305 reduce:::carry3->carryOut->new4->carry4->carryValue->modReduceIn->carry
IntegerPolynomial25519#finalCarryReduceLast(long[])::: integer polynomial25519 final carry reduce last:::reducedValue
IntegerPolynomial25519#reduce(long[])::: integer polynomial25519 reduce:::carry8->carryValue->carry9->carryValue->reducedValue10->carry
IntegerPolynomial25519#mult(long[], long[], long[])::: integer polynomial25519 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
IntegerPolynomial25519#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial25519 carry reduce:::reducedValue17->reducedValue18->carry8->carryValue->carry9->carryValue->reducedValue10->reducedValue11->reducedValue12->reducedValue13->reducedValue14->reducedValue15->reducedValue16->carry
IntegerPolynomial25519#square(long[], long[])::: integer polynomial25519 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
IntegerPolynomial448#modReduceIn(long[], int, long)::: integer polynomial448 mod reduce in:::
IntegerPolynomial448#finalCarryReduceLast(long[])::: integer polynomial448 final carry reduce last:::carry->modReduceIn
IntegerPolynomial448#reduce(long[])::: integer polynomial448 reduce:::carry14->carryValue->carry15->carryValue->carry
IntegerPolynomial448#mult(long[], long[], long[])::: integer polynomial448 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->carryReduce
IntegerPolynomial448#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial448 carry reduce:::carry14->carryValue->carry15->carryValue->carry
IntegerPolynomial448#square(long[], long[])::: integer polynomial448 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->carryReduce
IntegerPolynomialP256#evaluateModulus()::: integer polynomial p256 evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->pow->subtract->result->BigInteger->valueOf->pow->add->result->BigInteger->valueOf->pow->add->result->BigInteger->valueOf->subtract->return
IntegerPolynomialP256#finalCarryReduceLast(long[])::: integer polynomial p256 final carry reduce last:::c
IntegerPolynomialP256#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p256 carry reduce:::c19->carryReduce0
IntegerPolynomialP256#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p256 carry reduce0:::t0
IntegerPolynomialP256#carryReduce(long[], long, long, long, long, long, long, long, long, long, long)::: integer polynomial p256 carry reduce:::c10->t0
IntegerPolynomialP256#mult(long[], long[], long[])::: integer polynomial p256 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
IntegerPolynomialP256#reduce(long[])::: integer polynomial p256 reduce:::carryReduce
IntegerPolynomialP256#square(long[], long[])::: integer polynomial p256 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
IntegerPolynomialP384#evaluateModulus()::: integer polynomial p384 evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->pow->subtract->result->BigInteger->valueOf->pow->subtract->result->BigInteger->valueOf->pow->add->result->BigInteger->valueOf->subtract->return
IntegerPolynomialP384#finalCarryReduceLast(long[])::: integer polynomial p384 final carry reduce last:::c
IntegerPolynomialP384#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p384 carry reduce:::c27->carryReduce0
IntegerPolynomialP384#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p384 carry reduce0:::t0
IntegerPolynomialP384#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p384 carry reduce:::c14->t0
IntegerPolynomialP384#mult(long[], long[], long[])::: integer polynomial p384 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->carryReduce
IntegerPolynomialP384#reduce(long[])::: integer polynomial p384 reduce:::carryReduce
IntegerPolynomialP384#square(long[], long[])::: integer polynomial p384 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->carryReduce
IntegerPolynomialP521#evaluateModulus()::: integer polynomial p521 evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->subtract->return
IntegerPolynomialP521#finalCarryReduceLast(long[])::: integer polynomial p521 final carry reduce last:::c
IntegerPolynomialP521#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p521 carry reduce:::c37->carryReduce0
IntegerPolynomialP521#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p521 carry reduce0:::t0
IntegerPolynomialP521#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: integer polynomial p521 carry reduce:::c19->t0
IntegerPolynomialP521#mult(long[], long[], long[])::: integer polynomial p521 mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->c31->c32->c33->c34->c35->c36->carryReduce
IntegerPolynomialP521#reduce(long[])::: integer polynomial p521 reduce:::carryReduce
IntegerPolynomialP521#square(long[], long[])::: integer polynomial p521 square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->c31->c32->c33->c34->c35->c36->carryReduce
P256OrderField#evaluateModulus()::: p256 order field evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->return
P256OrderField#finalCarryReduceLast(long[])::: p256 order field final carry reduce last:::c->t0
P256OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce:::c19->t0->carryReduce0
P256OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce0:::t0->carryReduce1
P256OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce1:::t0->carryReduce2
P256OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce2:::t0
P256OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce:::c10->t0->carryReduce0
P256OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long)::: p256 order field carry reduce0:::t0
P256OrderField#mult(long[], long[], long[])::: p256 order field mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
P256OrderField#reduce(long[])::: p256 order field reduce:::carryReduce
P256OrderField#square(long[], long[])::: p256 order field square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->carryReduce
P384OrderField#evaluateModulus()::: p384 order field evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->return
P384OrderField#finalCarryReduceLast(long[])::: p384 order field final carry reduce last:::c->t0
P384OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce:::c27->t0->carryReduce0
P384OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce0:::t0->carryReduce1
P384OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce1:::t0->carryReduce2
P384OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce2:::t0
P384OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce:::c14->t0->carryReduce0
P384OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p384 order field carry reduce0:::t0
P384OrderField#mult(long[], long[], long[])::: p384 order field mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->carryReduce
P384OrderField#reduce(long[])::: p384 order field reduce:::carryReduce
P384OrderField#square(long[], long[])::: p384 order field square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->carryReduce
P521OrderField#evaluateModulus()::: p521 order field evaluate modulus:::result->BigInteger->valueOf->pow->result->BigInteger->valueOf->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->add->result->BigInteger->valueOf->pow->BigInteger->valueOf->multiply->subtract->return
P521OrderField#finalCarryReduceLast(long[])::: p521 order field final carry reduce last:::c->t0
P521OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce:::c37->t0->carryReduce0
P521OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce0:::t0->carryReduce1
P521OrderField#carryReduce1(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce1:::t0->carryReduce2
P521OrderField#carryReduce2(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce2:::t0->carryReduce3
P521OrderField#carryReduce3(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce3:::t0
P521OrderField#carryReduce(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce:::c19->t0->carryReduce0
P521OrderField#carryReduce0(long[], long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long, long)::: p521 order field carry reduce0:::t0
P521OrderField#mult(long[], long[], long[])::: p521 order field mult:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->c31->c32->c33->c34->c35->c36->carryReduce
P521OrderField#reduce(long[])::: p521 order field reduce:::carryReduce
P521OrderField#square(long[], long[])::: p521 order field square:::c0->c1->c2->c3->c4->c5->c6->c7->c8->c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->c19->c20->c21->c22->c23->c24->c25->c26->c27->c28->c29->c30->c31->c32->c33->c34->c35->c36->carryReduce

sun.jvm.hotspot.code.AdapterBlob#isAdapterBlob()->boolean::: adapter blob is adapter blob
sun.jvm.hotspot.code.AdapterBlob#getName()->String::: adapter blob get name
sun.jvm.hotspot.code.BufferBlob#isBufferBlob()->boolean::: buffer blob is buffer blob
sun.jvm.hotspot.code.CodeBlob#headerBegin()->Address::: code blob header begin
sun.jvm.hotspot.code.CodeBlob#headerEnd()->Address::: code blob header end
sun.jvm.hotspot.code.CodeBlob#contentBegin()->Address::: code blob content begin
sun.jvm.hotspot.code.CodeBlob#contentEnd()->Address::: code blob content end
sun.jvm.hotspot.code.CodeBlob#codeBegin()->Address::: code blob code begin
sun.jvm.hotspot.code.CodeBlob#codeEnd()->Address::: code blob code end
sun.jvm.hotspot.code.CodeBlob#dataBegin()->Address::: code blob data begin
sun.jvm.hotspot.code.CodeBlob#dataEnd()->Address::: code blob data end
sun.jvm.hotspot.code.CodeBlob#getFrameCompleteOffset()->long::: code blob get frame complete offset
sun.jvm.hotspot.code.CodeBlob#getDataOffset()->int::: code blob get data offset
sun.jvm.hotspot.code.CodeBlob#getSize()->int::: code blob get size
sun.jvm.hotspot.code.CodeBlob#getHeaderSize()->int::: code blob get header size
sun.jvm.hotspot.code.CodeBlob#getFrameSizeWords()->long::: code blob get frame size words
sun.jvm.hotspot.code.CodeBlob#getName()->String::: code blob get name
sun.jvm.hotspot.code.CodeBlob#getOopMaps()->ImmutableOopMapSet::: code blob get oop maps
sun.jvm.hotspot.code.CodeBlob#isBufferBlob()->boolean::: code blob is buffer blob
sun.jvm.hotspot.code.CodeBlob#isAOT()->boolean::: code blob is t
sun.jvm.hotspot.code.CodeBlob#isCompiled()->boolean::: code blob is compiled
sun.jvm.hotspot.code.CodeBlob#isNMethod()->boolean::: code blob is method
sun.jvm.hotspot.code.CodeBlob#isRuntimeStub()->boolean::: code blob is runtime stub
sun.jvm.hotspot.code.CodeBlob#isDeoptimizationStub()->boolean::: code blob is deoptimization stub
sun.jvm.hotspot.code.CodeBlob#isUncommonTrapStub()->boolean::: code blob is uncommon trap stub
sun.jvm.hotspot.code.CodeBlob#isExceptionStub()->boolean::: code blob is exception stub
sun.jvm.hotspot.code.CodeBlob#isSafepointStub()->boolean::: code blob is safepoint stub
sun.jvm.hotspot.code.CodeBlob#isAdapterBlob()->boolean::: code blob is adapter blob
sun.jvm.hotspot.code.CodeBlob#isJavaMethod()->boolean::: code blob is java method
sun.jvm.hotspot.code.CodeBlob#isNativeMethod()->boolean::: code blob is native method
sun.jvm.hotspot.code.CodeBlob#isOSRMethod()->boolean:::On-Stack Replacement method
sun.jvm.hotspot.code.CodeBlob#asNMethodOrNull()->NMethod::: code blob as method or null
sun.jvm.hotspot.code.CodeBlob#getContentSize()->int::: code blob get content size
sun.jvm.hotspot.code.CodeBlob#getCodeSize()->int::: code blob get code size
sun.jvm.hotspot.code.CodeBlob#getDataSize()->int::: code blob get data size
sun.jvm.hotspot.code.CodeBlob#blobContains(Address)->boolean::: code blob blob contains
sun.jvm.hotspot.code.CodeBlob#contentContains(Address)->boolean::: code blob content contains
sun.jvm.hotspot.code.CodeBlob#codeContains(Address)->boolean::: code blob code contains
sun.jvm.hotspot.code.CodeBlob#dataContains(Address)->boolean::: code blob data contains
sun.jvm.hotspot.code.CodeBlob#contains(Address)->boolean::: code blob contains
sun.jvm.hotspot.code.CodeBlob#isFrameCompleteAt(Address)->boolean::: code blob is frame complete at
sun.jvm.hotspot.code.CodeBlob#isZombie()->boolean::: code blob is zombie
sun.jvm.hotspot.code.CodeBlob#isLockedByVM()->boolean::: code blob is locked by m
sun.jvm.hotspot.code.CodeBlob#getOopMapForReturnAddress(Address, boolean)->ImmutableOopMap::: code blob get oop map for return address
sun.jvm.hotspot.code.CodeBlob#getFrameSize()->long:::NOTE: this returns a size in BYTES in this system!
sun.jvm.hotspot.code.CodeBlob#callerMustGCArguments()->boolean::: code blob caller must arguments
sun.jvm.hotspot.code.CodeBlob#print()->void::: code blob print
sun.jvm.hotspot.code.CodeBlob#printOn(PrintStream)->void::: code blob print on
sun.jvm.hotspot.code.CodeBlob#printComponentsOn(PrintStream)->void::: code blob print components on
sun.jvm.hotspot.code.CodeCache#scavengeRootMethods()->NMethod::: code cache scavenge root methods
sun.jvm.hotspot.code.CodeCache#contains(Address)->boolean::: code cache contains
sun.jvm.hotspot.code.CodeCache#findBlob(Address)->CodeBlob:::When VM.getVM().isDebugging() returns true, this behaves like       findBlobUnsafe
sun.jvm.hotspot.code.CodeCache#findBlobUnsafe(Address)->CodeBlob::: code cache find blob unsafe
sun.jvm.hotspot.code.CodeCache#findNMethod(Address)->NMethod::: code cache find method
sun.jvm.hotspot.code.CodeCache#findNMethodUnsafe(Address)->NMethod::: code cache find method unsafe
sun.jvm.hotspot.code.CodeCache#createCodeBlobWrapper(Address)->CodeBlob:::Routine for instantiating appropriately-typed wrapper for a       CodeBlob
sun.jvm.hotspot.code.CodeCache#iterate(CodeCacheVisitor)->void::: code cache iterate
sun.jvm.hotspot.code.CodeCacheVisitor#prologue(Address, Address)->void::: code cache visitor prologue
sun.jvm.hotspot.code.CodeCacheVisitor#visit(CodeBlob)->void::: code cache visitor visit
sun.jvm.hotspot.code.CodeCacheVisitor#epilogue()->void::: code cache visitor epilogue
sun.jvm.hotspot.code.CompiledMethod#getMethod()->Method::: compiled method get method
sun.jvm.hotspot.code.CompiledMethod#deoptHandlerBegin()->Address::: compiled method deopt handler begin
sun.jvm.hotspot.code.CompiledMethod#deoptMhHandlerBegin()->Address::: compiled method deopt mh handler begin
sun.jvm.hotspot.code.CompiledMethod#scopesDataBegin()->Address::: compiled method scopes data begin
sun.jvm.hotspot.code.CompiledMethod#getMethodOffset()->int::: compiled method get method offset
sun.jvm.hotspot.code.CompiledMethod#isCompiled()->boolean::: compiled method is compiled
sun.jvm.hotspot.code.CompressedReadStream#readBoolean()->boolean::: compressed read stream read boolean
sun.jvm.hotspot.code.CompressedReadStream#readByte()->byte::: compressed read stream read byte
sun.jvm.hotspot.code.CompressedReadStream#readChar()->char::: compressed read stream read char
sun.jvm.hotspot.code.CompressedReadStream#readShort()->short::: compressed read stream read short
sun.jvm.hotspot.code.CompressedReadStream#readSignedInt()->int::: compressed read stream read signed int
sun.jvm.hotspot.code.CompressedReadStream#readInt()->int::: compressed read stream read int
sun.jvm.hotspot.code.CompressedReadStream#readFloat()->float::: compressed read stream read float
sun.jvm.hotspot.code.CompressedReadStream#readDouble()->double::: compressed read stream read double
sun.jvm.hotspot.code.CompressedReadStream#readLong()->long::: compressed read stream read long
sun.jvm.hotspot.code.CompressedStream#getBuffer()->Address::: compressed stream get buffer
sun.jvm.hotspot.code.CompressedStream#getPosition()->int::: compressed stream get position
sun.jvm.hotspot.code.CompressedStream#setPosition(int)->void::: compressed stream set position
sun.jvm.hotspot.code.CompressedStream#encodeSign(int)->int::: compressed stream encode sign
sun.jvm.hotspot.code.CompressedStream#decodeSign(int)->int::: compressed stream decode sign
sun.jvm.hotspot.code.CompressedStream#reverseInt(int)->int::: compressed stream reverse int
sun.jvm.hotspot.code.ConstantDoubleValue#isConstantDouble()->boolean::: constant double value is constant double
sun.jvm.hotspot.code.ConstantDoubleValue#getValue()->double::: constant double value get value
sun.jvm.hotspot.code.ConstantDoubleValue#print()->void::: constant double value print
sun.jvm.hotspot.code.ConstantDoubleValue#printOn(PrintStream)->void::: constant double value print on
sun.jvm.hotspot.code.ConstantIntValue#isConstantInt()->boolean::: constant int value is constant int
sun.jvm.hotspot.code.ConstantIntValue#getValue()->int::: constant int value get value
sun.jvm.hotspot.code.ConstantIntValue#print()->void::: constant int value print
sun.jvm.hotspot.code.ConstantIntValue#printOn(PrintStream)->void::: constant int value print on
sun.jvm.hotspot.code.ConstantLongValue#isConstantLong()->boolean::: constant long value is constant long
sun.jvm.hotspot.code.ConstantLongValue#getValue()->long::: constant long value get value
sun.jvm.hotspot.code.ConstantLongValue#print()->void::: constant long value print
sun.jvm.hotspot.code.ConstantLongValue#printOn(PrintStream)->void::: constant long value print on
sun.jvm.hotspot.code.ConstantOopReadValue#isConstantOop()->boolean::: constant oop read value is constant oop
sun.jvm.hotspot.code.ConstantOopReadValue#getValue()->OopHandle::: constant oop read value get value
sun.jvm.hotspot.code.ConstantOopReadValue#print()->void::: constant oop read value print
sun.jvm.hotspot.code.ConstantOopReadValue#printOn(PrintStream)->void::: constant oop read value print on
sun.jvm.hotspot.code.DebugInfoReadStream#readOopHandle()->OopHandle::: debug info read stream read oop handle
sun.jvm.hotspot.code.DebugInfoReadStream#readMethod()->Method::: debug info read stream read method
sun.jvm.hotspot.code.DebugInfoReadStream#readObjectValue()->ScopeValue::: debug info read stream read object value
sun.jvm.hotspot.code.DebugInfoReadStream#getCachedObject()->ScopeValue::: debug info read stream get cached object
sun.jvm.hotspot.code.DebugInfoReadStream#readBCI()->int::: debug info read stream read i
sun.jvm.hotspot.code.DeoptimizationBlob#isDeoptimizationStub()->boolean::: deoptimization blob is deoptimization stub
sun.jvm.hotspot.code.ExceptionBlob#isExceptionStub()->boolean::: exception blob is exception stub
sun.jvm.hotspot.code.Location.Where#toString()->String::: where to string
sun.jvm.hotspot.code.Location.Where#getValue()->int::: where get value
sun.jvm.hotspot.code.Location.Type#toString()->String::: type to string
sun.jvm.hotspot.code.Location.Type#getValue()->int::: type get value
sun.jvm.hotspot.code.Location#getWhere()->Where::: location get where
sun.jvm.hotspot.code.Location#getType()->Type::: location get type
sun.jvm.hotspot.code.Location#getOffset()->short::: location get offset
sun.jvm.hotspot.code.Location#isRegister()->boolean::: location is register
sun.jvm.hotspot.code.Location#isStack()->boolean::: location is stack
sun.jvm.hotspot.code.Location#holdsOop()->boolean::: location holds oop
sun.jvm.hotspot.code.Location#holdsNarrowOop()->boolean::: location holds narrow oop
sun.jvm.hotspot.code.Location#holdsInt()->boolean::: location holds int
sun.jvm.hotspot.code.Location#holdsLong()->boolean::: location holds long
sun.jvm.hotspot.code.Location#holdsFloat()->boolean::: location holds float
sun.jvm.hotspot.code.Location#holdsDouble()->boolean::: location holds double
sun.jvm.hotspot.code.Location#holdsAddr()->boolean::: location holds addr
sun.jvm.hotspot.code.Location#isIllegal()->boolean::: location is illegal
sun.jvm.hotspot.code.Location#getStackOffset()->int::: location get stack offset
sun.jvm.hotspot.code.Location#getRegisterNumber()->int::: location get register number
sun.jvm.hotspot.code.Location#print()->void::: location print
sun.jvm.hotspot.code.Location#printOn(PrintStream)->void::: location print on
sun.jvm.hotspot.code.LocationValue#isLocation()->boolean::: location value is location
sun.jvm.hotspot.code.LocationValue#getLocation()->Location::: location value get location
sun.jvm.hotspot.code.LocationValue#print()->void::: location value print
sun.jvm.hotspot.code.LocationValue#printOn(PrintStream)->void::: location value print on
sun.jvm.hotspot.code.MethodHandlesAdapterBlob#isMethodHandlesAdapterBlob()->boolean::: method handles adapter blob is method handles adapter blob
sun.jvm.hotspot.code.MethodHandlesAdapterBlob#getName()->String::: method handles adapter blob get name
sun.jvm.hotspot.code.MonitorValue#owner()->ScopeValue::: monitor value owner
sun.jvm.hotspot.code.MonitorValue#basicLock()->Location::: monitor value basic lock
sun.jvm.hotspot.code.MonitorValue#eliminated()->boolean::: monitor value eliminated
sun.jvm.hotspot.code.MonitorValue#printOn(PrintStream)->void::: monitor value print on
sun.jvm.hotspot.code.NMethod#getAddress()->Address::: method get address
sun.jvm.hotspot.code.NMethod#isNMethod()->boolean::: method is method
sun.jvm.hotspot.code.NMethod#isJavaMethod()->boolean::: method is java method
sun.jvm.hotspot.code.NMethod#isNativeMethod()->boolean::: method is native method
sun.jvm.hotspot.code.NMethod#isOSRMethod()->boolean::: method is method
sun.jvm.hotspot.code.NMethod#constantsBegin()->Address:::Boundaries for different parts
sun.jvm.hotspot.code.NMethod#constantsEnd()->Address::: method constants end
sun.jvm.hotspot.code.NMethod#instsBegin()->Address::: method insts begin
sun.jvm.hotspot.code.NMethod#instsEnd()->Address::: method insts end
sun.jvm.hotspot.code.NMethod#exceptionBegin()->Address::: method exception begin
sun.jvm.hotspot.code.NMethod#stubBegin()->Address::: method stub begin
sun.jvm.hotspot.code.NMethod#stubEnd()->Address::: method stub end
sun.jvm.hotspot.code.NMethod#oopsBegin()->Address::: method oops begin
sun.jvm.hotspot.code.NMethod#oopsEnd()->Address::: method oops end
sun.jvm.hotspot.code.NMethod#metadataBegin()->Address::: method metadata begin
sun.jvm.hotspot.code.NMethod#metadataEnd()->Address::: method metadata end
sun.jvm.hotspot.code.NMethod#scopesDataEnd()->Address::: method scopes data end
sun.jvm.hotspot.code.NMethod#scopesPCsBegin()->Address::: method scopes cs begin
sun.jvm.hotspot.code.NMethod#scopesPCsEnd()->Address::: method scopes cs end
sun.jvm.hotspot.code.NMethod#dependenciesBegin()->Address::: method dependencies begin
sun.jvm.hotspot.code.NMethod#dependenciesEnd()->Address::: method dependencies end
sun.jvm.hotspot.code.NMethod#handlerTableBegin()->Address::: method handler table begin
sun.jvm.hotspot.code.NMethod#handlerTableEnd()->Address::: method handler table end
sun.jvm.hotspot.code.NMethod#nulChkTableBegin()->Address::: method nul chk table begin
sun.jvm.hotspot.code.NMethod#nulChkTableEnd()->Address::: method nul chk table end
sun.jvm.hotspot.code.NMethod#constantsSize()->int::: method constants size
sun.jvm.hotspot.code.NMethod#instsSize()->int::: method insts size
sun.jvm.hotspot.code.NMethod#stubSize()->int::: method stub size
sun.jvm.hotspot.code.NMethod#oopsSize()->int::: method oops size
sun.jvm.hotspot.code.NMethod#metadataSize()->int::: method metadata size
sun.jvm.hotspot.code.NMethod#scopesDataSize()->int::: method scopes data size
sun.jvm.hotspot.code.NMethod#scopesPCsSize()->int::: method scopes cs size
sun.jvm.hotspot.code.NMethod#dependenciesSize()->int::: method dependencies size
sun.jvm.hotspot.code.NMethod#handlerTableSize()->int::: method handler table size
sun.jvm.hotspot.code.NMethod#nulChkTableSize()->int::: method nul chk table size
sun.jvm.hotspot.code.NMethod#origPCOffset()->int::: method orig offset
sun.jvm.hotspot.code.NMethod#totalSize()->int::: method total size
sun.jvm.hotspot.code.NMethod#constantsContains(Address)->boolean::: method constants contains
sun.jvm.hotspot.code.NMethod#instsContains(Address)->boolean::: method insts contains
sun.jvm.hotspot.code.NMethod#stubContains(Address)->boolean::: method stub contains
sun.jvm.hotspot.code.NMethod#oopsContains(Address)->boolean::: method oops contains
sun.jvm.hotspot.code.NMethod#metadataContains(Address)->boolean::: method metadata contains
sun.jvm.hotspot.code.NMethod#scopesDataContains(Address)->boolean::: method scopes data contains
sun.jvm.hotspot.code.NMethod#scopesPCsContains(Address)->boolean::: method scopes cs contains
sun.jvm.hotspot.code.NMethod#handlerTableContains(Address)->boolean::: method handler table contains
sun.jvm.hotspot.code.NMethod#nulChkTableContains(Address)->boolean::: method nul chk table contains
sun.jvm.hotspot.code.NMethod#getOopsLength()->int::: method get oops length
sun.jvm.hotspot.code.NMethod#getMetadataLength()->int::: method get metadata length
sun.jvm.hotspot.code.NMethod#getEntryPoint()->Address:::Entry points
sun.jvm.hotspot.code.NMethod#getVerifiedEntryPoint()->Address::: method get verified entry point
sun.jvm.hotspot.code.NMethod#getOopAt(int)->OopHandle:::Support for oops in scopes and relocs
sun.jvm.hotspot.code.NMethod#getMetadataAt(int)->Address:::Support for metadata in scopes and relocs
sun.jvm.hotspot.code.NMethod#getMethodAt(int)->Method::: method get method at
sun.jvm.hotspot.code.NMethod#isZombie()->boolean::: method is zombie
sun.jvm.hotspot.code.NMethod#getOSREntryBCI()->int::: method get entry i
sun.jvm.hotspot.code.NMethod#getOSRLink()->NMethod::: method get link
sun.jvm.hotspot.code.NMethod#getScavengeRootLink()->NMethod::: method get scavenge root link
sun.jvm.hotspot.code.NMethod#getScavengeRootState()->int::: method get scavenge root state
sun.jvm.hotspot.code.NMethod#isMethodHandleReturn(Address)->boolean::: method is method handle return
sun.jvm.hotspot.code.NMethod#isDeoptPc(Address)->boolean::: method is deopt pc
sun.jvm.hotspot.code.NMethod#isDeoptEntry(Address)->boolean::: method is deopt entry
sun.jvm.hotspot.code.NMethod#isDeoptMhEntry(Address)->boolean::: method is deopt mh entry
sun.jvm.hotspot.code.NMethod#canBeDeoptimized()->boolean:::Tells whether frames described by this nmethod can be       deoptimized
sun.jvm.hotspot.code.NMethod#isLockedByVM()->boolean::: method is locked by m
sun.jvm.hotspot.code.NMethod#getPCDescAt(Address)->PCDesc:::Finds a PCDesc with real-pc equal to "pc"
sun.jvm.hotspot.code.NMethod#getScopeDescAt(Address)->ScopeDesc:::ScopeDesc for an instruction
sun.jvm.hotspot.code.NMethod#getPCDescNearDbg(Address)->PCDesc:::This is only for use by the debugging system, and is only       intended for use in the topmost frame, where we are not       guaranteed to be at a PC for which we have a PCDesc
sun.jvm.hotspot.code.NMethod#find_pc_desc(long, boolean)->PCDesc::: method find_pc_desc
sun.jvm.hotspot.code.NMethod#find_pc_desc_internal(long, boolean)->PCDesc::: method find_pc_desc_internal
sun.jvm.hotspot.code.NMethod#pc_desc_at(long)->PCDesc::: method pc_desc_at
sun.jvm.hotspot.code.NMethod#pc_desc_near(long)->PCDesc::: method pc_desc_near
sun.jvm.hotspot.code.NMethod#scope_desc_in(long, long)->ScopeDesc::: method scope_desc_in
sun.jvm.hotspot.code.NMethod#match_desc(PCDesc, int, boolean)->boolean::: method match_desc
sun.jvm.hotspot.code.NMethod#getScopeDescNearDbg(Address)->ScopeDesc:::This is only for use by the debugging system, and is only       intended for use in the topmost frame, where we are not       guaranteed to be at a PC for which we have a PCDesc
sun.jvm.hotspot.code.NMethod#getSafepoints()->Map::: method get safepoints
sun.jvm.hotspot.code.NMethod#getEntryPointOffset()->int:::Support for code generation
sun.jvm.hotspot.code.NMethod#getVerifiedEntryPointOffset()->int::: method get verified entry point offset
sun.jvm.hotspot.code.NMethod#getOSREntryPointOffset()->int::: method get entry point offset
sun.jvm.hotspot.code.NMethod#getEntryBCIOffset()->int::: method get entry offset
sun.jvm.hotspot.code.NMethod#print()->void::: method print
sun.jvm.hotspot.code.NMethod#printComponentsOn(PrintStream)->void::: method print components on
sun.jvm.hotspot.code.NMethod#toString()->String::: method to string
sun.jvm.hotspot.code.NMethod#flagsToString()->String::: method flags to string
sun.jvm.hotspot.code.NMethod#getName()->String::: method get name
sun.jvm.hotspot.code.NMethod#dumpReplayData(PrintStream)->void::: method dump replay data
sun.jvm.hotspot.code.ObjectValue#isObject()->boolean::: object value is object
sun.jvm.hotspot.code.ObjectValue#id()->int::: object value id
sun.jvm.hotspot.code.ObjectValue#getKlass()->ScopeValue::: object value get klass
sun.jvm.hotspot.code.ObjectValue#getFieldsValue()->List::: object value get fields value
sun.jvm.hotspot.code.ObjectValue#getFieldAt(int)->ScopeValue::: object value get field at
sun.jvm.hotspot.code.ObjectValue#fieldsSize()->int::: object value fields size
sun.jvm.hotspot.code.ObjectValue#getValue()->OopHandle::: object value get value
sun.jvm.hotspot.code.ObjectValue#readObject(DebugInfoReadStream)->void::: object value read object
sun.jvm.hotspot.code.ObjectValue#print()->void::: object value print
sun.jvm.hotspot.code.ObjectValue#printOn(PrintStream)->void::: object value print on
sun.jvm.hotspot.code.ObjectValue#printFieldsOn(PrintStream)->void::: object value print fields on
sun.jvm.hotspot.code.PCDesc#getPCOffset()->int::: desc get offset
sun.jvm.hotspot.code.PCDesc#getScopeDecodeOffset()->int::: desc get scope decode offset
sun.jvm.hotspot.code.PCDesc#getObjDecodeOffset()->int::: desc get obj decode offset
sun.jvm.hotspot.code.PCDesc#getRealPC(NMethod)->Address::: desc get real c
sun.jvm.hotspot.code.PCDesc#getReexecute()->boolean::: desc get reexecute
sun.jvm.hotspot.code.PCDesc#isMethodHandleInvoke()->boolean::: desc is method handle invoke
sun.jvm.hotspot.code.PCDesc#print(NMethod)->void::: desc print
sun.jvm.hotspot.code.PCDesc#printOn(PrintStream, NMethod)->void::: desc print on
sun.jvm.hotspot.code.RuntimeStub#isRuntimeStub()->boolean::: runtime stub is runtime stub
sun.jvm.hotspot.code.RuntimeStub#callerMustGCArguments()->boolean::: runtime stub caller must arguments
sun.jvm.hotspot.code.RuntimeStub#getName()->String::: runtime stub get name
sun.jvm.hotspot.code.SafepointBlob#isSafepointStub()->boolean::: safepoint blob is safepoint stub
sun.jvm.hotspot.code.ScopeDesc#getNMethod()->NMethod::: scope desc get method
sun.jvm.hotspot.code.ScopeDesc#getMethod()->Method::: scope desc get method
sun.jvm.hotspot.code.ScopeDesc#getBCI()->int::: scope desc get i
sun.jvm.hotspot.code.ScopeDesc#getReexecute()->boolean::: scope desc get reexecute
sun.jvm.hotspot.code.ScopeDesc#getLocals()->List:::Returns a List&lt;ScopeValue&gt;
sun.jvm.hotspot.code.ScopeDesc#getExpressions()->List:::Returns a List&lt;ScopeValue&gt;
sun.jvm.hotspot.code.ScopeDesc#getMonitors()->List:::Returns a List&lt;MonitorValue&gt;
sun.jvm.hotspot.code.ScopeDesc#getObjects()->List:::Returns a List&lt;ObjectValue&gt;
sun.jvm.hotspot.code.ScopeDesc#sender()->ScopeDesc:::Stack walking
sun.jvm.hotspot.code.ScopeDesc#getDecodeOffset()->int:::Returns where the scope was decoded
sun.jvm.hotspot.code.ScopeDesc#isTop()->boolean:::Tells whether sender() returns null
sun.jvm.hotspot.code.ScopeDesc#equals(Object)->boolean::: scope desc equals
sun.jvm.hotspot.code.ScopeDesc#printValue()->void::: scope desc print value
sun.jvm.hotspot.code.ScopeDesc#printValueOn(PrintStream)->void::: scope desc print value on
sun.jvm.hotspot.code.ScopeValue#isLocation()->boolean::: scope value is location
sun.jvm.hotspot.code.ScopeValue#isConstantInt()->boolean::: scope value is constant int
sun.jvm.hotspot.code.ScopeValue#isConstantDouble()->boolean::: scope value is constant double
sun.jvm.hotspot.code.ScopeValue#isConstantLong()->boolean::: scope value is constant long
sun.jvm.hotspot.code.ScopeValue#isConstantOop()->boolean::: scope value is constant oop
sun.jvm.hotspot.code.ScopeValue#isObject()->boolean::: scope value is object
sun.jvm.hotspot.code.ScopeValue#readFrom(DebugInfoReadStream)->ScopeValue::: scope value read from
sun.jvm.hotspot.code.ScopeValue#printOn(PrintStream)->void::: scope value print on
sun.jvm.hotspot.code.SingletonBlob#isSingletonBlob()->boolean::: singleton blob is singleton blob
sun.jvm.hotspot.code.Stub#getSize()->long:::Must return the size provided by initialize
sun.jvm.hotspot.code.Stub#getAddress()->Address:::Needed to add this for iteration
sun.jvm.hotspot.code.Stub#codeBegin()->Address:::Points to the first byte of the code
sun.jvm.hotspot.code.Stub#codeEnd()->Address:::Points to the first byte after the code
sun.jvm.hotspot.code.Stub#verify()->void:::Verifies the Stub
sun.jvm.hotspot.code.Stub#printOn(PrintStream)->void:::Prints some information about the stub
sun.jvm.hotspot.code.StubQueue#contains(Address)->boolean::: stub queue contains
sun.jvm.hotspot.code.StubQueue#getStubContaining(Address)->Stub::: stub queue get stub containing
sun.jvm.hotspot.code.StubQueue#stubContains(Stub, Address)->boolean::: stub queue stub contains
sun.jvm.hotspot.code.StubQueue#getNumberOfStubs()->int::: stub queue get number of stubs
sun.jvm.hotspot.code.StubQueue#getFirst()->Stub::: stub queue get first
sun.jvm.hotspot.code.StubQueue#getNext(Stub)->Stub::: stub queue get next
sun.jvm.hotspot.code.StubQueue#getPrev(Stub)->Stub::: stub queue get prev
sun.jvm.hotspot.code.UncommonTrapBlob#isUncommonTrapStub()->boolean::: uncommon trap blob is uncommon trap stub
sun.jvm.hotspot.code.VMRegImpl#getStack0()->VMReg::: reg impl get stack0
sun.jvm.hotspot.code.VMRegImpl#getRegisterName(int)->String::: reg impl get register name
sun.jvm.hotspot.code.VMRegImpl#getStackSlotSize()->int::: reg impl get stack slot size

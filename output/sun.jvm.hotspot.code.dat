CodeBlob#isOSRMethod():::On-Stack Replacement method:::return
CodeBlob#getFrameSize():::NOTE: this returns a size in BYTES in this system!:::return->VM->getVM->getAddressSize->getFrameSizeWords
CodeCache#findBlob(Address):::When VM.getVM().isDebugging() returns true, this behaves like       findBlobUnsafe:::result->findBlobUnsafe->if->return->if->VM->getVM->isDebugging->return->if->Assert->result->isZombie->result->isLockedByVM->that->return
CodeCache#createCodeBlobWrapper(Address):::Routine for instantiating appropriately-typed wrapper for a       CodeBlob:::try->return->virtualConstructor->instantiateWrapperFor->catch->message->if->VM->getVM->isClientCompiler->if->VM->getVM->isServerCompiler->throw->new->RuntimeException->finally
NMethod#constantsBegin():::Boundaries for different parts:::return->contentBegin
NMethod#getEntryPoint():::Entry points:::return->entryPointField->getValue
NMethod#getOopAt(int):::Support for oops in scopes and relocs:::if->return->if->Assert->getOopsLength->that->return->oopsBegin->VM->getVM->getOopSize->getOopHandleAt
NMethod#getMetadataAt(int):::Support for metadata in scopes and relocs:::if->return->if->Assert->getMetadataLength->that->return->metadataBegin->VM->getVM->getOopSize->getAddressAt
NMethod#canBeDeoptimized():::Tells whether frames described by this nmethod can be       deoptimized:::return->isJavaMethod
NMethod#getPCDescAt(Address):::Finds a PCDesc with real-pc equal to "pc":::for->p->scopesPCsBegin->p->scopesPCsEnd->lessThan->p->addOffsetTo->return
NMethod#getScopeDescAt(Address):::ScopeDesc for an instruction:::pd->getPCDescAt->if->Assert->that->return->pd->getScopeDecodeOffset->pd->getObjDecodeOffset->pd->getReexecute->new->ScopeDesc
NMethod#getPCDescNearDbg(Address):::This is only for use by the debugging system, and is only       intended for use in the topmost frame, where we are not       guaranteed to be at a PC for which we have a PCDesc:::bestGuessPCDesc->bestDistance->for->p->scopesPCsBegin->p->scopesPCsEnd->lessThan->p->addOffsetTo->return
NMethod#getScopeDescNearDbg(Address):::This is only for use by the debugging system, and is only       intended for use in the topmost frame, where we are not       guaranteed to be at a PC for which we have a PCDesc:::pd->getPCDescNearDbg->if->return->return->pd->getScopeDecodeOffset->pd->getObjDecodeOffset->pd->getReexecute->new->ScopeDesc
NMethod#getEntryPointOffset():::Support for code generation:::return->entryPointField->getOffset
ScopeDesc#getLocals():::Returns a List&lt;ScopeValue&gt;:::return->decodeScopeValues
ScopeDesc#getExpressions():::Returns a List&lt;ScopeValue&gt;:::return->decodeScopeValues
ScopeDesc#getMonitors():::Returns a List&lt;MonitorValue&gt;:::return->decodeMonitorValues
ScopeDesc#getObjects():::Returns a List&lt;ObjectValue&gt;:::return
ScopeDesc#sender():::Stack walking:::if->isTop->return->return->new->ScopeDesc
ScopeDesc#getDecodeOffset():::Returns where the scope was decoded:::return
ScopeDesc#isTop():::Tells whether sender() returns null:::return
Stub#getSize():::Must return the size provided by initialize:::Assert->that->return
Stub#getAddress():::Needed to add this for iteration:::return
Stub#codeBegin():::Points to the first byte of the code:::Assert->that->return
Stub#codeEnd():::Points to the first byte after the code:::Assert->that->return
Stub#verify():::Verifies the Stub:::Assert->that
Stub#printOn(PrintStream):::Prints some information about the stub:::Assert->that

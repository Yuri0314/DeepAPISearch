AALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitAALOAD
AASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitAASTORE
ACONST_NULL#getType(ConstantPoolGen)::: t_ l get type:::return
ACONST_NULL#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitTypedInstruction->v->visitACONST_NULL
ALOAD#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitALOAD
ANEWARRAY#getExceptions()::: y get exceptions:::return->ExceptionConst->createExceptions
ANEWARRAY#accept(Visitor):::Call corresponding visitor method(s):::v->visitLoadClass->v->visitAllocationInstruction->v->visitExceptionThrower->v->visitStackProducer->v->visitTypedInstruction->v->visitCPInstruction->v->visitANEWARRAY
ANEWARRAY#getLoadClassType(ConstantPoolGen)::: y get load class type:::t->getType->if->getBasicType->return
AnnotationElementValueGen#dump(DataOutputStream)::: annotation element value gen dump:::dos->super->getElementValueType->writeByte->a->dump
AnnotationElementValueGen#stringifyValue()::: annotation element value gen stringify value:::throw->new->RuntimeException
AnnotationElementValueGen#getElementValue():::Return immutable variant of this AnnotationElementValueGen:::return->super->getElementValueType->a->getAnnotation->getConstantPool->getConstantPool->new->AnnotationElementValue
AnnotationElementValueGen#getAnnotation()::: annotation element value gen get annotation:::return
AnnotationEntryGen#copyValues(ElementValuePair[], ConstantPoolGen, boolean)::: annotation entry gen copy values:::out->new->ArrayList<>->foreach->out->new->ElementValuePairGen->add->return
AnnotationEntryGen#getAnnotation():::Retrieve an immutable version of this AnnotationGen:::a->cpool->getConstantPool->new->AnnotationEntry->foreach->a->element->getElementNameValuePair->addElementNameValuePair->return
AnnotationEntryGen#read(DataInput, ConstantPoolGen, boolean)::: annotation entry gen read:::a->new->AnnotationEntryGen->dis->readUnsignedShort->elemValuePairCount->dis->readUnsignedShort->for->i->a->isRuntimeVisible->return
AnnotationEntryGen#dump(DataOutputStream)::: annotation entry gen dump:::dos->writeShort->dos->evs->size->writeShort->foreach->envp->dump
AnnotationEntryGen#addElementNameValuePair(ElementValuePairGen)::: annotation entry gen add element name value pair:::if->new->ArrayList<>->evs->add
AnnotationEntryGen#getTypeIndex()::: annotation entry gen get type index:::return
AnnotationEntryGen#getTypeSignature()::: annotation entry gen get type signature:::utf8->cpool->getConstant->return->utf8->getBytes
AnnotationEntryGen#getTypeName()::: annotation entry gen get type name:::return->getTypeSignature
AnnotationEntryGen#getValues():::Returns list of ElementNameValuePair objects:::return
AnnotationEntryGen#toString()::: annotation entry gen to string:::s->new->StringBuilder->s->append->getTypeName->append->append->evs->size->append->append->for->i->evs->size->s->append->return->s->toString
AnnotationEntryGen#toShortString()::: annotation entry gen to short string:::s->new->StringBuilder->s->append->getTypeName->append->append->for->i->evs->size->s->append->return->s->toString
AnnotationEntryGen#isRuntimeVisible(boolean)::: annotation entry gen is runtime visible:::
AnnotationEntryGen#isRuntimeVisible()::: annotation entry gen is runtime visible:::return
AnnotationEntryGen#getAnnotationAttributes(ConstantPoolGen, AnnotationEntryGen[]):::Converts a list of AnnotationGen objects into a set of attributes that can be attached to the class file.:::if->return->new->AttributeArr->try->countVisible->countInvisible->foreach->if->a->isRuntimeVisible->else->rvaBytes->new->ByteArrayOutputStream->riaBytes->new->ByteArrayOutputStream->try->rvaDos->new->DataOutputStream->riaDos->new->DataOutputStream->rvaDos->writeShort->riaDos->writeShort->foreach->if->a->isRuntimeVisible->a->dump->else->a->dump->catch->finally->rvaData->rvaBytes->toByteArray->riaData->riaBytes->toByteArray->rvaIndex->riaIndex->if->cp->addUtf8->if->cp->addUtf8->newAttributes->new->ArrayList<>->if->newAttributes->new->ByteArrayInputStream->new->DataInputStream->cp->getConstantPool->new->RuntimeVisibleAnnotations->add->if->newAttributes->new->ByteArrayInputStream->new->DataInputStream->cp->getConstantPool->new->RuntimeInvisibleAnnotations->add->return->newAttributes->newAttributes->size->new->AttributeArr->toArray->catch->println->e->printStackTrace->finally->return
AnnotationEntryGen#getParameterAnnotationAttributes(ConstantPoolGen, List[]):::Annotations against a class are stored in one of four attribute kinds: - RuntimeVisibleParameterAnnotations - RuntimeInvisibleParameterAnnotations:::visCount->new->intArr->totalVisCount->invisCount->new->intArr->totalInvisCount->try->for->i->rvaBytes->new->ByteArrayOutputStream->try->rvaDos->new->DataOutputStream->rvaDos->writeByte->for->i->catch->finally->riaBytes->new->ByteArrayOutputStream->try->riaDos->new->DataOutputStream->riaDos->writeByte->for->i->catch->finally->rvaData->rvaBytes->toByteArray->riaData->riaBytes->toByteArray->rvaIndex->riaIndex->if->cp->addUtf8->if->cp->addUtf8->newAttributes->new->ArrayList<>->if->newAttributes->new->ByteArrayInputStream->new->DataInputStream->cp->getConstantPool->new->RuntimeVisibleParameterAnnotations->add->if->newAttributes->new->ByteArrayInputStream->new->DataInputStream->cp->getConstantPool->new->RuntimeInvisibleParameterAnnotations->add->return->newAttributes->newAttributes->size->new->AttributeArr->toArray->catch->e->getMessage->println->finally->return
ARETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitARETURN
ArithmeticInstruction#getType(ConstantPoolGen)::: arithmetic instruction get type:::_opcode->super->getOpcode->switch->return->return->return->return->throw->new->ClassGenException
ArrayElementValueGen#getElementValue():::Return immutable variant of this ArrayElementValueGen:::immutableData->evalues->size->new->ElementValueArr->i->foreach->element->getElementValue->return->super->getElementValueType->getConstantPool->getConstantPool->new->ArrayElementValue
ArrayElementValueGen#dump(DataOutputStream)::: array element value gen dump:::dos->super->getElementValueType->writeByte->dos->evalues->size->writeShort->foreach->element->dump
ArrayElementValueGen#stringifyValue()::: array element value gen stringify value:::sb->new->StringBuilder->sb->append->comma->foreach->sb->append->sb->element->stringifyValue->append->sb->append->return->sb->toString
ArrayElementValueGen#getElementValues()::: array element value gen get element values:::return
ArrayElementValueGen#getElementValuesSize()::: array element value gen get element values size:::return->evalues->size
ArrayElementValueGen#addElement(ElementValueGen)::: array element value gen add element:::evalues->add
ArrayInstruction#getExceptions()::: array instruction get exceptions:::return->ExceptionConst->createExceptions
ArrayInstruction#getType(ConstantPoolGen)::: array instruction get type:::_opcode->super->getOpcode->switch->return->return->return->return->return->return->return->return->throw->new->ClassGenException
ARRAYLENGTH#getExceptions()::: h get exceptions:::return->new->Class<?>Arr
ARRAYLENGTH#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackProducer->v->visitARRAYLENGTH
ArrayType#getBasicType()::: array type get basic type:::return
ArrayType#getElementType()::: array type get element type:::if->return->return->new->ArrayType
ArrayType#getDimensions()::: array type get dimensions:::return
ArrayType#hashCode()::: array type hash code:::return->basic_type->hashCode
ArrayType#equals(Object)::: array type equals:::if->array->return->equals->return
ASTORE#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitASTORE
ATHROW#getExceptions()::: w get exceptions:::return->new->Class<?>Arr
ATHROW#accept(Visitor):::Call corresponding visitor method(s):::v->visitUnconditionalBranch->v->visitExceptionThrower->v->visitATHROW
BALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitBALOAD
BasicType#getType(byte)::: basic type get type:::switch->return->return->return->return->return->return->return->return->return->throw->new->ClassGenException
BasicType#hashCode()::: basic type hash code:::return->super->getType
BasicType#equals(Object)::: basic type equals:::return->getType->this->getType
BASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitBASTORE
BIPUSH#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->dump->out->writeByte
BIPUSH#toString(boolean)::: h to string:::return->super->toString
BIPUSH#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->setLength->bytes->readByte
BIPUSH#getValue()::: h get value:::return->Integer->valueOf
BIPUSH#getType(ConstantPoolGen)::: h get type:::return
BIPUSH#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitBIPUSH
BranchHandle#getBranchHandle(BranchInstruction):::Factory method.:::return->new->BranchHandle
BranchHandle#getPosition()::: branch handle get position:::return->bi->getPosition
BranchHandle#setPosition(int)::: branch handle set position:::bi->setPosition->super->setPosition
BranchHandle#updatePosition(int, int)::: branch handle update position:::x->bi->updatePosition->super->bi->getPosition->setPosition->return
BranchHandle#setTarget(InstructionHandle):::Pass new target to instruction.:::bi->setTarget
BranchHandle#updateTarget(InstructionHandle, InstructionHandle):::Update target of instruction.:::bi->updateTarget
BranchHandle#getTarget()::: branch handle get target:::return->bi->getTarget
BranchHandle#setInstruction(Instruction):::Set new contents:::super->setInstruction->if->throw->new->ClassGenException
BranchInstruction#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->getTargetOffset->if->isValidShort->throw->new->ClassGenException->out->writeShort
BranchInstruction#getTargetOffset(InstructionHandle)::: branch instruction get target offset:::if->throw->super->toString->new->ClassGenException->t->_target->getPosition->if->throw->super->toString->new->ClassGenException->return
BranchInstruction#getTargetOffset()::: branch instruction get target offset:::return->getTargetOffset
BranchInstruction#updatePosition(int, int):::Called by InstructionList.setPositions when setting the position for every instruction:::return
BranchInstruction#toString(boolean):::Long output format:  &lt;position in byte code&gt; &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt;target instruction&gt;"&gt;" "@"&lt;branch target offset&gt;:::s->super->toString->t->if->if->if->target->getInstruction->else->if->target->getInstruction->else->target->getPosition->else->if->target->getPosition->return
BranchInstruction#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->setLength->bytes->readShort
BranchInstruction#getIndex()::: branch instruction get index:::return
BranchInstruction#getTarget()::: branch instruction get target:::return
BranchInstruction#setTarget(InstructionHandle):::Set branch target:::notifyTarget
BranchInstruction#notifyTarget(InstructionHandle, InstructionHandle, InstructionTargeter):::Used by BranchInstruction, LocalVariableGen, CodeExceptionGen, LineNumberGen:::if->old_ih->removeTargeter->if->new_ih->addTargeter
BranchInstruction#updateTarget(InstructionHandle, InstructionHandle)::: branch instruction update target:::if->setTarget->else->throw->new->ClassGenException
BranchInstruction#containsTarget(InstructionHandle)::: branch instruction contains target:::return
BranchInstruction#dispose():::Inform target that it's not targeted anymore.:::setTarget
BranchInstruction#getPosition()::: branch instruction get position:::return
BranchInstruction#setPosition(int)::: branch instruction set position:::
BranchInstruction#setIndex(int)::: branch instruction set index:::
BREAKPOINT#accept(Visitor):::Call corresponding visitor method(s):::v->visitBREAKPOINT
CALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitCALOAD
CASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitCASTORE
CHECKCAST#getExceptions()::: t get exceptions:::return->ExceptionConst->createExceptions
CHECKCAST#getLoadClassType(ConstantPoolGen)::: t get load class type:::t->getType->if->getBasicType->return
CHECKCAST#accept(Visitor):::Call corresponding visitor method(s):::v->visitLoadClass->v->visitExceptionThrower->v->visitStackProducer->v->visitStackConsumer->v->visitTypedInstruction->v->visitCPInstruction->v->visitCHECKCAST
ClassElementValueGen#getElementValue():::Return immutable variant of this ClassElementValueGen:::return->super->getElementValueType->getConstantPool->getConstantPool->new->ClassElementValue
ClassElementValueGen#getIndex()::: class element value gen get index:::return
ClassElementValueGen#getClassString()::: class element value gen get class string:::cu8->getConstantPool->getConstant->return->cu8->getBytes
ClassElementValueGen#stringifyValue()::: class element value gen stringify value:::return->getClassString
ClassElementValueGen#dump(DataOutputStream)::: class element value gen dump:::dos->super->getElementValueType->writeByte->dos->writeShort
ClassGen#unpackAnnotations(Attribute[]):::Look for attributes representing annotations and unpack them.:::annotationGenObjs->new->ArrayList<>->foreach->if->rva->annos->rva->getAnnotationEntries->foreach->annotationGenObjs->getConstantPool->new->AnnotationEntryGen->add->else->if->ria->annos->ria->getAnnotationEntries->foreach->annotationGenObjs->getConstantPool->new->AnnotationEntryGen->add->return->annotationGenObjs->annotationGenObjs->size->new->AnnotationEntryGenArr->toArray
ClassGen#getJavaClass()::: class gen get java class:::interfaces->getInterfaces->fields->getFields->methods->getMethods->attributes->if->annotation_vec->isEmpty->getAttributes->else->annAttributes->AnnotationEntryGen->getAnnotationEntries->getAnnotationAttributes->attribute_vec->size->new->AttributeArr->attribute_vec->toArray->System->attribute_vec->size->arraycopy->_cp->getFinalConstantPool->return->super->getAccessFlags->new->JavaClass
ClassGen#addInterface(String):::Add an interface to this class, i.e., this class has to implement it.:::interface_vec->add
ClassGen#removeInterface(String):::Remove an interface from this class.:::interface_vec->remove
ClassGen#getMajor()::: class gen get major:::return
ClassGen#setMajor(int):::Set major version number of class file, default value is 45 (JDK 1.1):::
ClassGen#setMinor(int):::Set minor version number of class file, default value is 3 (JDK 1.1):::
ClassGen#getMinor()::: class gen get minor:::return
ClassGen#addAttribute(Attribute):::Add an attribute to this class.:::attribute_vec->add
ClassGen#addAnnotationEntry(AnnotationEntryGen)::: class gen add annotation entry:::annotation_vec->add
ClassGen#addMethod(Method):::Add a method to this class.:::method_vec->add
ClassGen#addEmptyConstructor(int):::Convenience method:::il->new->InstructionList->il->append->il->cp->addMethodref->new->INVOKESPECIAL->append->il->append->mg->new->MethodGen->mg->setMaxStack->mg->getMethod->addMethod
ClassGen#addField(Field):::Add a field to this class.:::field_vec->add
ClassGen#containsField(Field)::: class gen contains field:::return->field_vec->contains
ClassGen#containsField(String)::: class gen contains field:::foreach->if->f->getName->equals->return->return
ClassGen#containsMethod(String, String)::: class gen contains method:::foreach->if->m->getName->equals->m->getSignature->equals->return->return
ClassGen#removeAttribute(Attribute):::Remove an attribute from this class.:::attribute_vec->remove
ClassGen#removeMethod(Method):::Remove a method from this class.:::method_vec->remove
ClassGen#replaceMethod(Method, Method):::Replace given method with new one:::if->throw->new->ClassGenException->i->method_vec->indexOf->if->method_vec->add->else->method_vec->set
ClassGen#replaceField(Field, Field):::Replace given field with new one:::if->throw->new->ClassGenException->i->field_vec->indexOf->if->field_vec->add->else->field_vec->set
ClassGen#removeField(Field):::Remove a field to this class.:::field_vec->remove
ClassGen#getClassName()::: class gen get class name:::return
ClassGen#getSuperclassName()::: class gen get superclass name:::return
ClassGen#getFileName()::: class gen get file name:::return
ClassGen#setClassName(String)::: class gen set class name:::name->replace->cp->addClass
ClassGen#setSuperclassName(String)::: class gen set superclass name:::name->replace->cp->addClass
ClassGen#getMethods()::: class gen get methods:::return->method_vec->method_vec->size->new->MethodArr->toArray
ClassGen#setMethods(Method[])::: class gen set methods:::method_vec->clear->foreach->addMethod
ClassGen#setMethodAt(Method, int)::: class gen set method at:::method_vec->set
ClassGen#getMethodAt(int)::: class gen get method at:::return->method_vec->get
ClassGen#getInterfaceNames()::: class gen get interface names:::size->interface_vec->size->interfaces->new->StringArr->interface_vec->toArray->return
ClassGen#getInterfaces()::: class gen get interfaces:::size->interface_vec->size->interfaces->new->intArr->for->i->return
ClassGen#getFields()::: class gen get fields:::return->field_vec->field_vec->size->new->FieldArr->toArray
ClassGen#getAttributes()::: class gen get attributes:::return->attribute_vec->attribute_vec->size->new->AttributeArr->toArray
ClassGen#getAnnotationEntries()::: class gen get annotation entries:::return->annotation_vec->annotation_vec->size->new->AnnotationEntryGenArr->toArray
ClassGen#getConstantPool()::: class gen get constant pool:::return
ClassGen#setConstantPool(ConstantPoolGen)::: class gen set constant pool:::
ClassGen#setClassNameIndex(int)::: class gen set class name index:::cp->getConstantPool->getConstantString->replace
ClassGen#setSuperclassNameIndex(int)::: class gen set superclass name index:::cp->getConstantPool->getConstantString->replace
ClassGen#getSuperclassNameIndex()::: class gen get superclass name index:::return
ClassGen#getClassNameIndex()::: class gen get class name index:::return
ClassGen#addObserver(ClassObserver):::Add observer for this object.:::if->new->ArrayList<>->observers->add
ClassGen#removeObserver(ClassObserver):::Remove observer for this object.:::if->observers->remove
ClassGen#update():::Call notify() method on all observers:::if->foreach->observer->notify
ClassGen#clone()::: class gen clone:::try->return->super->clone->catch->throw->new->Error->finally
ClassGen#getComparator()::: class gen get comparator:::return
ClassGen#setComparator(BCELComparator)::: class gen set comparator:::
ClassGen#equals(Object):::Return value as defined by given BCELComparator strategy:::return->_cmp->equals
ClassGen#hashCode():::Return value as defined by given BCELComparator strategy:::return->_cmp->hashCode
ClassObserver#notify(ClassGen)::: class observer notify:::
CodeExceptionGen#getCodeException(ConstantPoolGen):::Get CodeException object.<BR>  This relies on that the instruction list has already been dumped to byte code or or that the `setPositions' methods has been called for the instruction list.:::return->start_pc->getPosition->end_pc->getPosition->end_pc->getInstruction->getLength->handler_pc->getPosition->cp->addClass->new->CodeException
CodeExceptionGen#setStartPC(InstructionHandle)::: code exception gen set start c:::BranchInstruction->notifyTarget
CodeExceptionGen#setEndPC(InstructionHandle)::: code exception gen set end c:::BranchInstruction->notifyTarget
CodeExceptionGen#setHandlerPC(InstructionHandle)::: code exception gen set handler c:::BranchInstruction->notifyTarget
CodeExceptionGen#updateTarget(InstructionHandle, InstructionHandle)::: code exception gen update target:::targeted->if->setStartPC->if->setEndPC->if->setHandlerPC->if->throw->new->ClassGenException
CodeExceptionGen#containsTarget(InstructionHandle)::: code exception gen contains target:::return
CodeExceptionGen#setCatchType(ObjectType):::Sets the type of the Exception to catch:::
CodeExceptionGen#getCatchType():::Gets the type of the Exception to catch, 'null' for ANY.:::return
CodeExceptionGen#getStartPC()::: code exception gen get start c:::return
CodeExceptionGen#getEndPC()::: code exception gen get end c:::return
CodeExceptionGen#getHandlerPC()::: code exception gen get handler c:::return
CodeExceptionGen#toString()::: code exception gen to string:::return
CodeExceptionGen#clone()::: code exception gen clone:::try->return->super->clone->catch->throw->new->Error->finally
CompoundInstruction#getInstructionList()::: compound instruction get instruction list:::
ConstantPoolGen#adjustSize():::Resize internal array of constants.:::if->cs->new->ConstantArr->System->arraycopy
ConstantPoolGen#lookupString(String):::Look for ConstantString in ConstantPool containing String `str'.:::index->string_table->get->return
ConstantPoolGen#addString(String):::Add a new String constant to the ConstantPool, if it is not already in there.:::ret->if->lookupString->return->utf8->addUtf8->adjustSize->s->new->ConstantString->if->string_table->containsKey->string_table->new->Index->put->return
ConstantPoolGen#lookupClass(String):::Look for ConstantClass in ConstantPool named `str'.:::index->class_table->str->replace->get->return
ConstantPoolGen#addClass_(String)::: constant pool gen add class_:::ret->if->lookupClass->return->adjustSize->c->addUtf8->new->ConstantClass->if->class_table->containsKey->class_table->new->Index->put->return
ConstantPoolGen#addClass(String):::Add a new Class reference to the ConstantPool, if it is not already in there.:::return->str->replace->addClass_
ConstantPoolGen#addClass(ObjectType):::Add a new Class reference to the ConstantPool for a given type.:::return->type->getClassName->addClass
ConstantPoolGen#addArrayClass(ArrayType):::Add a reference to an array class (e.g:::return->type->getSignature->addClass_
ConstantPoolGen#lookupInteger(int):::Look for ConstantInteger in ConstantPool.:::for->i->return
ConstantPoolGen#addInteger(int):::Add a new Integer constant to the ConstantPool, if it is not already in there.:::ret->if->lookupInteger->return->adjustSize->new->ConstantInteger->return
ConstantPoolGen#lookupFloat(float):::Look for ConstantFloat in ConstantPool.:::bits->Float->floatToIntBits->for->i->return
ConstantPoolGen#addFloat(float):::Add a new Float constant to the ConstantPool, if it is not already in there.:::ret->if->lookupFloat->return->adjustSize->new->ConstantFloat->return
ConstantPoolGen#lookupUtf8(String):::Look for ConstantUtf8 in ConstantPool.:::index->utf8_table->get->return
ConstantPoolGen#addUtf8(String):::Add a new Utf8 constant to the ConstantPool, if it is not already in there.:::ret->if->lookupUtf8->return->adjustSize->new->ConstantUtf8->if->utf8_table->containsKey->utf8_table->new->Index->put->return
ConstantPoolGen#lookupLong(long):::Look for ConstantLong in ConstantPool.:::for->i->return
ConstantPoolGen#addLong(long):::Add a new long constant to the ConstantPool, if it is not already in there.:::ret->if->lookupLong->return->adjustSize->new->ConstantLong->return
ConstantPoolGen#lookupDouble(double):::Look for ConstantDouble in ConstantPool.:::bits->Double->doubleToLongBits->for->i->return
ConstantPoolGen#addDouble(double):::Add a new double constant to the ConstantPool, if it is not already in there.:::ret->if->lookupDouble->return->adjustSize->new->ConstantDouble->return
ConstantPoolGen#lookupNameAndType(String, String):::Look for ConstantNameAndType in ConstantPool.:::_index->n_a_t_table->get->return
ConstantPoolGen#addNameAndType(String, String):::Add a new NameAndType constant to the ConstantPool if it is not already in there.:::ret->name_index->signature_index->if->lookupNameAndType->return->adjustSize->addUtf8->addUtf8->new->ConstantNameAndType->key->if->n_a_t_table->containsKey->n_a_t_table->new->Index->put->return
ConstantPoolGen#lookupMethodref(String, String, String):::Look for ConstantMethodref in ConstantPool.:::index->cp_table->get->return
ConstantPoolGen#lookupMethodref(MethodGen)::: constant pool gen lookup methodref:::return->method->getClassName->method->getName->method->getSignature->lookupMethodref
ConstantPoolGen#addMethodref(String, String, String):::Add a new Methodref constant to the ConstantPool, if it is not already in there.:::ret->class_index->name_and_type_index->if->lookupMethodref->return->adjustSize->addNameAndType->addClass->new->ConstantMethodref->key->if->cp_table->containsKey->cp_table->new->Index->put->return
ConstantPoolGen#addMethodref(MethodGen)::: constant pool gen add methodref:::return->method->getClassName->method->getName->method->getSignature->addMethodref
ConstantPoolGen#lookupInterfaceMethodref(String, String, String):::Look for ConstantInterfaceMethodref in ConstantPool.:::index->cp_table->get->return
ConstantPoolGen#lookupInterfaceMethodref(MethodGen)::: constant pool gen lookup interface methodref:::return->method->getClassName->method->getName->method->getSignature->lookupInterfaceMethodref
ConstantPoolGen#addInterfaceMethodref(String, String, String):::Add a new InterfaceMethodref constant to the ConstantPool, if it is not already in there.:::ret->class_index->name_and_type_index->if->lookupInterfaceMethodref->return->adjustSize->addClass->addNameAndType->new->ConstantInterfaceMethodref->key->if->cp_table->containsKey->cp_table->new->Index->put->return
ConstantPoolGen#addInterfaceMethodref(MethodGen)::: constant pool gen add interface methodref:::return->method->getClassName->method->getName->method->getSignature->addInterfaceMethodref
ConstantPoolGen#lookupFieldref(String, String, String):::Look for ConstantFieldref in ConstantPool.:::index->cp_table->get->return
ConstantPoolGen#addFieldref(String, String, String):::Add a new Fieldref constant to the ConstantPool, if it is not already in there.:::ret->class_index->name_and_type_index->if->lookupFieldref->return->adjustSize->addClass->addNameAndType->new->ConstantFieldref->key->if->cp_table->containsKey->cp_table->new->Index->put->return
ConstantPoolGen#getConstant(int)::: constant pool gen get constant:::return
ConstantPoolGen#setConstant(int, Constant):::Use with care!:::
ConstantPoolGen#getConstantPool()::: constant pool gen get constant pool:::return->new->ConstantPool
ConstantPoolGen#getSize()::: constant pool gen get size:::return
ConstantPoolGen#getFinalConstantPool()::: constant pool gen get final constant pool:::cs->new->ConstantArr->System->arraycopy->return->new->ConstantPool
ConstantPoolGen#toString()::: constant pool gen to string:::buf->new->StringBuilder->for->i->return->buf->toString
ConstantPoolGen#addConstant(Constant, ConstantPoolGen):::Import constant from another ConstantPool and return new index.:::constants->cp->getConstantPool->getConstantPool->switch->c->getTag->s->u8->s->getStringIndex->return->u8->getBytes->addString->s->u8->s->getNameIndex->return->u8->getBytes->addClass->n->u8->n->getNameIndex->u8_2->n->getSignatureIndex->return->u8->getBytes->u8_2->getBytes->addNameAndType->return->getBytes->addUtf8->return->getBytes->addDouble->return->getBytes->addFloat->return->getBytes->addLong->return->getBytes->addInteger->m->clazz->m->getClassIndex->n->m->getNameAndTypeIndex->u8->clazz->getNameIndex->class_name->u8->getBytes->replace->n->getNameIndex->name->u8->getBytes->n->getSignatureIndex->signature->u8->getBytes->switch->c->getTag->return->addInterfaceMethodref->return->addMethodref->return->addFieldref->throw->new->RuntimeException->throw->new->RuntimeException
ConstantPushInstruction#getValue()::: constant push instruction get value:::
ConversionInstruction#getType(ConstantPoolGen)::: conversion instruction get type:::_opcode->super->getOpcode->switch->return->return->return->return->return->return->return->throw->new->ClassGenException
CPInstruction#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->writeShort
CPInstruction#toString(boolean):::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; constant pool index&gt;"&gt;":::return->super->toString
CPInstruction#toString(ConstantPool)::: instruction to string:::c->cp->getConstant->str->cp->constantToString->if->str->replace->return->super->getOpcode->getOpcodeName
CPInstruction#initFromFile(ByteSequence, boolean):::Read needed data (i.e., index) from file.:::bytes->readUnsignedShort->setIndex->super->setLength
CPInstruction#getIndex()::: instruction get index:::return
CPInstruction#setIndex(int):::Set the index to constant pool.:::if->throw->new->ClassGenException
CPInstruction#getType(ConstantPoolGen)::: instruction get type:::cp->cpg->getConstantPool->name->cp->getConstantString->if->name->startsWith->return->Type->getType
D2F#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitD2F
D2I#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitD2I
D2L#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitD2L
DADD#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDADD
DALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitDALOAD
DASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitDASTORE
DCMPG#getType(ConstantPoolGen)::: g get type:::return
DCMPG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitDCMPG
DCMPL#getType(ConstantPoolGen)::: l get type:::return
DCMPL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitDCMPL
DCONST#getValue()::: t get value:::return
DCONST#getType(ConstantPoolGen)::: t get type:::return
DCONST#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitDCONST
DDIV#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDDIV
DLOAD#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitDLOAD
DMUL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDMUL
DNEG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDNEG
DREM#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDREM
DRETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitDRETURN
DSTORE#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitDSTORE
DSUB#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitDSUB
DUP#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitStackInstruction->v->visitDUP
DUP2#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitStackInstruction->v->visitDUP2
DUP2_X1#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackInstruction->v->visitDUP2_X1
DUP2_X2#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackInstruction->v->visitDUP2_X2
DUP_X1#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackInstruction->v->visitDUP_X1
DUP_X2#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackInstruction->v->visitDUP_X2
ElementValueGen#getElementValue():::Subtypes return an immutable variant of the ElementValueGen:::
ElementValueGen#getElementValueType()::: element value gen get element value type:::return
ElementValueGen#stringifyValue()::: element value gen stringify value:::
ElementValueGen#dump(DataOutputStream)::: element value gen dump:::
ElementValueGen#readElementValue(DataInput, ConstantPoolGen)::: element value gen read element value:::type->dis->readUnsignedByte->switch->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->new->SimpleElementValueGen->return->dis->readUnsignedShort->dis->readUnsignedShort->new->EnumElementValueGen->return->dis->readUnsignedShort->new->ClassElementValueGen->return->AnnotationEntry->cpGen->getConstantPool->read->new->AnnotationEntryGen->new->AnnotationElementValueGen->numArrayVals->dis->readUnsignedShort->evalues->new->ElementValueArr->for->j->return->new->ArrayElementValueGen->throw->new->RuntimeException
ElementValueGen#getConstantPool()::: element value gen get constant pool:::return
ElementValueGen#copy(ElementValue, ConstantPoolGen, boolean):::Creates an (modifiable) ElementValueGen copy of an (immutable) ElementValue - constant pool is assumed correct.:::switch->value->getElementValueType->return->new->SimpleElementValueGen->return->new->EnumElementValueGen->return->new->AnnotationElementValueGen->return->new->ArrayElementValueGen->return->new->ClassElementValueGen->throw->value->getElementValueType->new->RuntimeException
ElementValuePairGen#getElementNameValuePair():::Retrieve an immutable version of this ElementNameValuePairGen:::immutableValue->value->getElementValue->return->cpool->getConstantPool->new->ElementValuePair
ElementValuePairGen#dump(DataOutputStream)::: element value pair gen dump:::dos->writeShort->value->dump
ElementValuePairGen#getNameIndex()::: element value pair gen get name index:::return
ElementValuePairGen#getNameString()::: element value pair gen get name string:::return->cpool->getConstant->getBytes
ElementValuePairGen#getValue()::: element value pair gen get value:::return
ElementValuePairGen#toString()::: element value pair gen to string:::return->getNameString->value->stringifyValue
EmptyVisitor#visitStackInstruction(StackInstruction)::: empty visitor visit stack instruction:::
EmptyVisitor#visitLocalVariableInstruction(LocalVariableInstruction)::: empty visitor visit local variable instruction:::
EmptyVisitor#visitBranchInstruction(BranchInstruction)::: empty visitor visit branch instruction:::
EmptyVisitor#visitLoadClass(LoadClass)::: empty visitor visit load class:::
EmptyVisitor#visitFieldInstruction(FieldInstruction)::: empty visitor visit field instruction:::
EmptyVisitor#visitIfInstruction(IfInstruction)::: empty visitor visit if instruction:::
EmptyVisitor#visitConversionInstruction(ConversionInstruction)::: empty visitor visit conversion instruction:::
EmptyVisitor#visitPopInstruction(PopInstruction)::: empty visitor visit pop instruction:::
EmptyVisitor#visitJsrInstruction(JsrInstruction)::: empty visitor visit jsr instruction:::
EmptyVisitor#visitGotoInstruction(GotoInstruction)::: empty visitor visit goto instruction:::
EmptyVisitor#visitStoreInstruction(StoreInstruction)::: empty visitor visit store instruction:::
EmptyVisitor#visitTypedInstruction(TypedInstruction)::: empty visitor visit typed instruction:::
EmptyVisitor#visitSelect(Select)::: empty visitor visit select:::
EmptyVisitor#visitUnconditionalBranch(UnconditionalBranch)::: empty visitor visit unconditional branch:::
EmptyVisitor#visitPushInstruction(PushInstruction)::: empty visitor visit push instruction:::
EmptyVisitor#visitArithmeticInstruction(ArithmeticInstruction)::: empty visitor visit arithmetic instruction:::
EmptyVisitor#visitCPInstruction(CPInstruction)::: empty visitor visit instruction:::
EmptyVisitor#visitInvokeInstruction(InvokeInstruction)::: empty visitor visit invoke instruction:::
EmptyVisitor#visitArrayInstruction(ArrayInstruction)::: empty visitor visit array instruction:::
EmptyVisitor#visitAllocationInstruction(AllocationInstruction)::: empty visitor visit allocation instruction:::
EmptyVisitor#visitReturnInstruction(ReturnInstruction)::: empty visitor visit return instruction:::
EmptyVisitor#visitFieldOrMethod(FieldOrMethod)::: empty visitor visit field or method:::
EmptyVisitor#visitConstantPushInstruction(ConstantPushInstruction)::: empty visitor visit constant push instruction:::
EmptyVisitor#visitExceptionThrower(ExceptionThrower)::: empty visitor visit exception thrower:::
EmptyVisitor#visitLoadInstruction(LoadInstruction)::: empty visitor visit load instruction:::
EmptyVisitor#visitVariableLengthInstruction(VariableLengthInstruction)::: empty visitor visit variable length instruction:::
EmptyVisitor#visitStackProducer(StackProducer)::: empty visitor visit stack producer:::
EmptyVisitor#visitStackConsumer(StackConsumer)::: empty visitor visit stack consumer:::
EmptyVisitor#visitACONST_NULL(ACONST_NULL)::: empty visitor visit t_ l:::
EmptyVisitor#visitGETSTATIC(GETSTATIC)::: empty visitor visit c:::
EmptyVisitor#visitIF_ICMPLT(IF_ICMPLT)::: empty visitor visit f_ t:::
EmptyVisitor#visitMONITOREXIT(MONITOREXIT)::: empty visitor visit t:::
EmptyVisitor#visitIFLT(IFLT)::: empty visitor visit t:::
EmptyVisitor#visitLSTORE(LSTORE)::: empty visitor visit e:::
EmptyVisitor#visitPOP2(POP2)::: empty visitor visit p2:::
EmptyVisitor#visitBASTORE(BASTORE)::: empty visitor visit e:::
EmptyVisitor#visitISTORE(ISTORE)::: empty visitor visit e:::
EmptyVisitor#visitCHECKCAST(CHECKCAST)::: empty visitor visit t:::
EmptyVisitor#visitFCMPG(FCMPG)::: empty visitor visit g:::
EmptyVisitor#visitI2F(I2F)::: empty visitor visit i2 f:::
EmptyVisitor#visitATHROW(ATHROW)::: empty visitor visit w:::
EmptyVisitor#visitDCMPL(DCMPL)::: empty visitor visit l:::
EmptyVisitor#visitARRAYLENGTH(ARRAYLENGTH)::: empty visitor visit h:::
EmptyVisitor#visitDUP(DUP)::: empty visitor visit p:::
EmptyVisitor#visitINVOKESTATIC(INVOKESTATIC)::: empty visitor visit c:::
EmptyVisitor#visitLCONST(LCONST)::: empty visitor visit t:::
EmptyVisitor#visitDREM(DREM)::: empty visitor visit m:::
EmptyVisitor#visitIFGE(IFGE)::: empty visitor visit e:::
EmptyVisitor#visitCALOAD(CALOAD)::: empty visitor visit d:::
EmptyVisitor#visitLASTORE(LASTORE)::: empty visitor visit e:::
EmptyVisitor#visitI2D(I2D)::: empty visitor visit i2 d:::
EmptyVisitor#visitDADD(DADD)::: empty visitor visit d:::
EmptyVisitor#visitINVOKESPECIAL(INVOKESPECIAL)::: empty visitor visit l:::
EmptyVisitor#visitIAND(IAND)::: empty visitor visit d:::
EmptyVisitor#visitPUTFIELD(PUTFIELD)::: empty visitor visit d:::
EmptyVisitor#visitILOAD(ILOAD)::: empty visitor visit d:::
EmptyVisitor#visitDLOAD(DLOAD)::: empty visitor visit d:::
EmptyVisitor#visitDCONST(DCONST)::: empty visitor visit t:::
EmptyVisitor#visitNEW(NEW)::: empty visitor visit w:::
EmptyVisitor#visitIFNULL(IFNULL)::: empty visitor visit l:::
EmptyVisitor#visitLSUB(LSUB)::: empty visitor visit b:::
EmptyVisitor#visitL2I(L2I)::: empty visitor visit l2 i:::
EmptyVisitor#visitISHR(ISHR)::: empty visitor visit r:::
EmptyVisitor#visitTABLESWITCH(TABLESWITCH)::: empty visitor visit h:::
EmptyVisitor#visitIINC(IINC)::: empty visitor visit c:::
EmptyVisitor#visitDRETURN(DRETURN)::: empty visitor visit n:::
EmptyVisitor#visitFSTORE(FSTORE)::: empty visitor visit e:::
EmptyVisitor#visitDASTORE(DASTORE)::: empty visitor visit e:::
EmptyVisitor#visitIALOAD(IALOAD)::: empty visitor visit d:::
EmptyVisitor#visitDDIV(DDIV)::: empty visitor visit v:::
EmptyVisitor#visitIF_ICMPGE(IF_ICMPGE)::: empty visitor visit f_ e:::
EmptyVisitor#visitLAND(LAND)::: empty visitor visit d:::
EmptyVisitor#visitIDIV(IDIV)::: empty visitor visit v:::
EmptyVisitor#visitLOR(LOR)::: empty visitor visit r:::
EmptyVisitor#visitCASTORE(CASTORE)::: empty visitor visit e:::
EmptyVisitor#visitFREM(FREM)::: empty visitor visit m:::
EmptyVisitor#visitLDC(LDC)::: empty visitor visit c:::
EmptyVisitor#visitBIPUSH(BIPUSH)::: empty visitor visit h:::
EmptyVisitor#visitDSTORE(DSTORE)::: empty visitor visit e:::
EmptyVisitor#visitF2L(F2L)::: empty visitor visit f2 l:::
EmptyVisitor#visitFMUL(FMUL)::: empty visitor visit l:::
EmptyVisitor#visitLLOAD(LLOAD)::: empty visitor visit d:::
EmptyVisitor#visitJSR(JSR)::: empty visitor visit r:::
EmptyVisitor#visitFSUB(FSUB)::: empty visitor visit b:::
EmptyVisitor#visitSASTORE(SASTORE)::: empty visitor visit e:::
EmptyVisitor#visitALOAD(ALOAD)::: empty visitor visit d:::
EmptyVisitor#visitDUP2_X2(DUP2_X2)::: empty visitor visit p2_ x2:::
EmptyVisitor#visitRETURN(RETURN)::: empty visitor visit n:::
EmptyVisitor#visitDALOAD(DALOAD)::: empty visitor visit d:::
EmptyVisitor#visitSIPUSH(SIPUSH)::: empty visitor visit h:::
EmptyVisitor#visitDSUB(DSUB)::: empty visitor visit b:::
EmptyVisitor#visitL2F(L2F)::: empty visitor visit l2 f:::
EmptyVisitor#visitIF_ICMPGT(IF_ICMPGT)::: empty visitor visit f_ t:::
EmptyVisitor#visitF2D(F2D)::: empty visitor visit f2 d:::
EmptyVisitor#visitI2L(I2L)::: empty visitor visit i2 l:::
EmptyVisitor#visitIF_ACMPNE(IF_ACMPNE)::: empty visitor visit f_ e:::
EmptyVisitor#visitPOP(POP)::: empty visitor visit p:::
EmptyVisitor#visitI2S(I2S)::: empty visitor visit i2 s:::
EmptyVisitor#visitIFEQ(IFEQ)::: empty visitor visit q:::
EmptyVisitor#visitSWAP(SWAP)::: empty visitor visit p:::
EmptyVisitor#visitIOR(IOR)::: empty visitor visit r:::
EmptyVisitor#visitIREM(IREM)::: empty visitor visit m:::
EmptyVisitor#visitIASTORE(IASTORE)::: empty visitor visit e:::
EmptyVisitor#visitNEWARRAY(NEWARRAY)::: empty visitor visit y:::
EmptyVisitor#visitINVOKEINTERFACE(INVOKEINTERFACE)::: empty visitor visit e:::
EmptyVisitor#visitINEG(INEG)::: empty visitor visit g:::
EmptyVisitor#visitLCMP(LCMP)::: empty visitor visit p:::
EmptyVisitor#visitJSR_W(JSR_W)::: empty visitor visit r_ w:::
EmptyVisitor#visitMULTIANEWARRAY(MULTIANEWARRAY)::: empty visitor visit y:::
EmptyVisitor#visitDUP_X2(DUP_X2)::: empty visitor visit p_ x2:::
EmptyVisitor#visitSALOAD(SALOAD)::: empty visitor visit d:::
EmptyVisitor#visitIFNONNULL(IFNONNULL)::: empty visitor visit l:::
EmptyVisitor#visitDMUL(DMUL)::: empty visitor visit l:::
EmptyVisitor#visitIFNE(IFNE)::: empty visitor visit e:::
EmptyVisitor#visitIF_ICMPLE(IF_ICMPLE)::: empty visitor visit f_ e:::
EmptyVisitor#visitLDC2_W(LDC2_W)::: empty visitor visit c2_ w:::
EmptyVisitor#visitGETFIELD(GETFIELD)::: empty visitor visit d:::
EmptyVisitor#visitLADD(LADD)::: empty visitor visit d:::
EmptyVisitor#visitNOP(NOP)::: empty visitor visit p:::
EmptyVisitor#visitFALOAD(FALOAD)::: empty visitor visit d:::
EmptyVisitor#visitINSTANCEOF(INSTANCEOF)::: empty visitor visit f:::
EmptyVisitor#visitIFLE(IFLE)::: empty visitor visit e:::
EmptyVisitor#visitLXOR(LXOR)::: empty visitor visit r:::
EmptyVisitor#visitLRETURN(LRETURN)::: empty visitor visit n:::
EmptyVisitor#visitFCONST(FCONST)::: empty visitor visit t:::
EmptyVisitor#visitIUSHR(IUSHR)::: empty visitor visit r:::
EmptyVisitor#visitBALOAD(BALOAD)::: empty visitor visit d:::
EmptyVisitor#visitDUP2(DUP2)::: empty visitor visit p2:::
EmptyVisitor#visitIF_ACMPEQ(IF_ACMPEQ)::: empty visitor visit f_ q:::
EmptyVisitor#visitIMPDEP1(IMPDEP1)::: empty visitor visit p1:::
EmptyVisitor#visitMONITORENTER(MONITORENTER)::: empty visitor visit r:::
EmptyVisitor#visitLSHL(LSHL)::: empty visitor visit l:::
EmptyVisitor#visitDCMPG(DCMPG)::: empty visitor visit g:::
EmptyVisitor#visitD2L(D2L)::: empty visitor visit d2 l:::
EmptyVisitor#visitIMPDEP2(IMPDEP2)::: empty visitor visit p2:::
EmptyVisitor#visitL2D(L2D)::: empty visitor visit l2 d:::
EmptyVisitor#visitRET(RET)::: empty visitor visit t:::
EmptyVisitor#visitIFGT(IFGT)::: empty visitor visit t:::
EmptyVisitor#visitIXOR(IXOR)::: empty visitor visit r:::
EmptyVisitor#visitINVOKEVIRTUAL(INVOKEVIRTUAL)::: empty visitor visit l:::
EmptyVisitor#visitFASTORE(FASTORE)::: empty visitor visit e:::
EmptyVisitor#visitIRETURN(IRETURN)::: empty visitor visit n:::
EmptyVisitor#visitIF_ICMPNE(IF_ICMPNE)::: empty visitor visit f_ e:::
EmptyVisitor#visitFLOAD(FLOAD)::: empty visitor visit d:::
EmptyVisitor#visitLDIV(LDIV)::: empty visitor visit v:::
EmptyVisitor#visitPUTSTATIC(PUTSTATIC)::: empty visitor visit c:::
EmptyVisitor#visitAALOAD(AALOAD)::: empty visitor visit d:::
EmptyVisitor#visitD2I(D2I)::: empty visitor visit d2 i:::
EmptyVisitor#visitIF_ICMPEQ(IF_ICMPEQ)::: empty visitor visit f_ q:::
EmptyVisitor#visitAASTORE(AASTORE)::: empty visitor visit e:::
EmptyVisitor#visitARETURN(ARETURN)::: empty visitor visit n:::
EmptyVisitor#visitDUP2_X1(DUP2_X1)::: empty visitor visit p2_ x1:::
EmptyVisitor#visitFNEG(FNEG)::: empty visitor visit g:::
EmptyVisitor#visitGOTO_W(GOTO_W)::: empty visitor visit o_ w:::
EmptyVisitor#visitD2F(D2F)::: empty visitor visit d2 f:::
EmptyVisitor#visitGOTO(GOTO)::: empty visitor visit o:::
EmptyVisitor#visitISUB(ISUB)::: empty visitor visit b:::
EmptyVisitor#visitF2I(F2I)::: empty visitor visit f2 i:::
EmptyVisitor#visitDNEG(DNEG)::: empty visitor visit g:::
EmptyVisitor#visitICONST(ICONST)::: empty visitor visit t:::
EmptyVisitor#visitFDIV(FDIV)::: empty visitor visit v:::
EmptyVisitor#visitI2B(I2B)::: empty visitor visit i2 b:::
EmptyVisitor#visitLNEG(LNEG)::: empty visitor visit g:::
EmptyVisitor#visitLREM(LREM)::: empty visitor visit m:::
EmptyVisitor#visitIMUL(IMUL)::: empty visitor visit l:::
EmptyVisitor#visitIADD(IADD)::: empty visitor visit d:::
EmptyVisitor#visitLSHR(LSHR)::: empty visitor visit r:::
EmptyVisitor#visitLOOKUPSWITCH(LOOKUPSWITCH)::: empty visitor visit h:::
EmptyVisitor#visitDUP_X1(DUP_X1)::: empty visitor visit p_ x1:::
EmptyVisitor#visitFCMPL(FCMPL)::: empty visitor visit l:::
EmptyVisitor#visitI2C(I2C)::: empty visitor visit i2 c:::
EmptyVisitor#visitLMUL(LMUL)::: empty visitor visit l:::
EmptyVisitor#visitLUSHR(LUSHR)::: empty visitor visit r:::
EmptyVisitor#visitISHL(ISHL)::: empty visitor visit l:::
EmptyVisitor#visitLALOAD(LALOAD)::: empty visitor visit d:::
EmptyVisitor#visitASTORE(ASTORE)::: empty visitor visit e:::
EmptyVisitor#visitANEWARRAY(ANEWARRAY)::: empty visitor visit y:::
EmptyVisitor#visitFRETURN(FRETURN)::: empty visitor visit n:::
EmptyVisitor#visitFADD(FADD)::: empty visitor visit d:::
EmptyVisitor#visitBREAKPOINT(BREAKPOINT)::: empty visitor visit t:::
EmptyVisitor#visitINVOKEDYNAMIC(INVOKEDYNAMIC)::: empty visitor visit c:::
EnumElementValueGen#getElementValue():::Return immutable variant of this EnumElementValue:::getEnumTypeString->getEnumValueString->println->return->super->getElementValueType->getConstantPool->getConstantPool->new->EnumElementValue
EnumElementValueGen#dump(DataOutputStream)::: enum element value gen dump:::dos->super->getElementValueType->writeByte->dos->writeShort->dos->writeShort
EnumElementValueGen#stringifyValue()::: enum element value gen stringify value:::cu8->getConstantPool->getConstant->return->cu8->getBytes
EnumElementValueGen#getEnumTypeString()::: enum element value gen get enum type string:::return->getConstantPool->getConstant->getBytes
EnumElementValueGen#getEnumValueString()::: enum element value gen get enum value string:::return->getConstantPool->getConstant->getBytes
EnumElementValueGen#getValueIndex()::: enum element value gen get value index:::return
EnumElementValueGen#getTypeIndex()::: enum element value gen get type index:::return
ExceptionThrower#getExceptions()::: exception thrower get exceptions:::
F2D#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitF2D
F2I#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitF2I
F2L#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitF2L
FADD#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFADD
FALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitFALOAD
FASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitFASTORE
FCMPG#getType(ConstantPoolGen)::: g get type:::return
FCMPG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitFCMPG
FCMPL#getType(ConstantPoolGen)::: l get type:::return
FCMPL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitFCMPL
FCONST#getValue()::: t get value:::return
FCONST#getType(ConstantPoolGen)::: t get type:::return
FCONST#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitFCONST
FDIV#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFDIV
FieldGen#setValue(int)::: field gen set value:::cp->super->getConstantPool->getConstantPool->c->cp->getConstant->getConstantValue
FieldGen#setInitValue(String):::Set (optional) initial value of field, otherwise it will be set to null/0/false by the JVM automatically.:::ObjectType->getInstance->checkType->if
FieldGen#setInitValue(long)::: field gen set init value:::checkType->if->Long->valueOf
FieldGen#setInitValue(int)::: field gen set init value:::checkType->if->Integer->valueOf
FieldGen#setInitValue(short)::: field gen set init value:::checkType->if->Integer->valueOf
FieldGen#setInitValue(char)::: field gen set init value:::checkType->if->Integer->valueOf
FieldGen#setInitValue(byte)::: field gen set init value:::checkType->if->Integer->valueOf
FieldGen#setInitValue(boolean)::: field gen set init value:::checkType->if->Integer->valueOf
FieldGen#setInitValue(float)::: field gen set init value:::checkType->if
FieldGen#setInitValue(double)::: field gen set init value:::checkType->if
FieldGen#cancelInitValue():::Remove any initial value.:::
FieldGen#checkType(Type)::: field gen check type:::superType->super->getType->if->throw->new->ClassGenException->if->isFinal->throw->new->ClassGenException->if->superType->equals->throw->new->ClassGenException
FieldGen#getField():::Get field object after having set up all necessary values.:::signature->getSignature->name_index->super->getConstantPool->super->getName->addUtf8->signature_index->super->getConstantPool->addUtf8->if->super->getType->checkType->index->addConstant->super->getConstantPool->addUtf8->super->getConstantPool->getConstantPool->new->ConstantValue->addAttribute->super->getConstantPool->addAnnotationsAsAttribute->return->super->getAccessFlags->getAttributes->super->getConstantPool->getConstantPool->new->Field
FieldGen#addAnnotationsAsAttribute(ConstantPoolGen)::: field gen add annotations as attribute:::attrs->AnnotationEntryGen->super->getAnnotationEntries->getAnnotationAttributes->foreach->addAttribute
FieldGen#addConstant()::: field gen add constant:::switch->super->getType->getType->return->super->getConstantPool->addInteger->return->super->getConstantPool->addFloat->return->super->getConstantPool->addDouble->return->super->getConstantPool->addLong->return->super->getConstantPool->addString->throw->super->getType->getType->new->RuntimeException
FieldGen#getSignature()::: field gen get signature:::return->super->getType->getSignature
FieldGen#addObserver(FieldObserver):::Add observer for this object.:::if->new->ArrayList<>->observers->add
FieldGen#removeObserver(FieldObserver):::Remove observer for this object.:::if->observers->remove
FieldGen#update():::Call notify() method on all observers:::if->foreach->observer->notify
FieldGen#getInitValue()::: field gen get init value:::if->return->value->toString->return
FieldGen#toString():::Return string representation close to declaration format, `public static final short MAX = 100', e.g..:::name->signature->access->Utility->super->getAccessFlags->accessToString->access->isEmpty->super->getType->toString->getName->buf->new->StringBuilder->buf->append->append->append->append->value->getInitValue->if->buf->append->append->return->buf->toString
FieldGen#copy(ConstantPoolGen)::: field gen copy:::fg->clone->fg->setConstantPool->return
FieldGen#getComparator()::: field gen get comparator:::return
FieldGen#setComparator(BCELComparator)::: field gen set comparator:::
FieldGen#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
FieldGen#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
FieldGenOrMethodGen#setType(Type)::: field gen or method gen set type:::if->type->getType->throw->new->IllegalArgumentException
FieldGenOrMethodGen#getType()::: field gen or method gen get type:::return
FieldGenOrMethodGen#getName()::: field gen or method gen get name:::return
FieldGenOrMethodGen#setName(String)::: field gen or method gen set name:::
FieldGenOrMethodGen#getConstantPool()::: field gen or method gen get constant pool:::return
FieldGenOrMethodGen#setConstantPool(ConstantPoolGen)::: field gen or method gen set constant pool:::
FieldGenOrMethodGen#addAttribute(Attribute):::Add an attribute to this method:::attribute_vec->add
FieldGenOrMethodGen#addAnnotationEntry(AnnotationEntryGen)::: field gen or method gen add annotation entry:::annotation_vec->add
FieldGenOrMethodGen#removeAttribute(Attribute):::Remove an attribute.:::attribute_vec->remove
FieldGenOrMethodGen#removeAnnotationEntry(AnnotationEntryGen)::: field gen or method gen remove annotation entry:::annotation_vec->remove
FieldGenOrMethodGen#removeAttributes():::Remove all attributes.:::attribute_vec->clear
FieldGenOrMethodGen#removeAnnotationEntries()::: field gen or method gen remove annotation entries:::annotation_vec->clear
FieldGenOrMethodGen#getAttributes()::: field gen or method gen get attributes:::attributes->attribute_vec->size->new->AttributeArr->attribute_vec->toArray->return
FieldGenOrMethodGen#getAnnotationEntries()::: field gen or method gen get annotation entries:::annotations->annotation_vec->size->new->AnnotationEntryGenArr->annotation_vec->toArray->return
FieldGenOrMethodGen#getSignature()::: field gen or method gen get signature:::
FieldGenOrMethodGen#clone()::: field gen or method gen clone:::try->return->super->clone->catch->throw->new->Error->finally
FieldInstruction#toString(ConstantPool)::: field instruction to string:::return->super->getOpcode->getOpcodeName->cp->super->getIndex->constantToString
FieldInstruction#getFieldSize(ConstantPoolGen)::: field instruction get field size:::return->Type->Type->getSignature->getTypeSize->size
FieldInstruction#getType(ConstantPoolGen)::: field instruction get type:::return->getFieldType
FieldInstruction#getFieldType(ConstantPoolGen)::: field instruction get field type:::return->Type->getSignature->getType
FieldInstruction#getFieldName(ConstantPoolGen)::: field instruction get field name:::return->getName
FieldObserver#notify(FieldGen)::: field observer notify:::
FieldOrMethod#getSignature(ConstantPoolGen)::: field or method get signature:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->cnat->cp->cmr->getNameAndTypeIndex->getConstant->return->cp->cnat->getSignatureIndex->getConstant->getBytes
FieldOrMethod#getName(ConstantPoolGen)::: field or method get name:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->cnat->cp->cmr->getNameAndTypeIndex->getConstant->return->cp->cnat->getNameIndex->getConstant->getBytes
FieldOrMethod#getClassName(ConstantPoolGen)::: field or method get class name:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->className->cp->cmr->getClassIndex->getConstantString->if->className->startsWith->return->return->className->replace
FieldOrMethod#getClassType(ConstantPoolGen)::: field or method get class type:::return->ObjectType->getClassName->getInstance
FieldOrMethod#getReferenceType(ConstantPoolGen):::Return the reference type representing the class, interface, or array class referenced by the instruction.:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->className->cp->cmr->getClassIndex->getConstantString->if->className->startsWith->return->Type->getType->className->replace->return->ObjectType->getInstance
FieldOrMethod#getLoadClassType(ConstantPoolGen):::Get the ObjectType of the method return or field.:::rt->getReferenceType->if->return->throw->rt->getSignature->new->ClassGenException
FLOAD#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitFLOAD
FMUL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFMUL
FNEG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFNEG
FREM#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFREM
FRETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitFRETURN
FSTORE#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitFSTORE
FSUB#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitFSUB
GETFIELD#produceStack(ConstantPoolGen)::: d produce stack:::return->getFieldSize
GETFIELD#getExceptions()::: d get exceptions:::return->ExceptionConst->createExceptions
GETFIELD#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackConsumer->v->visitStackProducer->v->visitTypedInstruction->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitFieldInstruction->v->visitGETFIELD
GETSTATIC#produceStack(ConstantPoolGen)::: c produce stack:::return->getFieldSize
GETSTATIC#getExceptions()::: c get exceptions:::return->ExceptionConst->createExceptions
GETSTATIC#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitExceptionThrower->v->visitTypedInstruction->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitFieldInstruction->v->visitGETSTATIC
GOTO#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->getTargetOffset->setIndex->_opcode->getOpcode->if->super->dump->else->super->getTargetOffset->setIndex->out->writeByte->out->super->getIndex->writeInt
GOTO#updatePosition(int, int):::Called in pass 2 of InstructionList.setPositions() in order to update the branch target, that may shift due to variable length instructions.:::i->getTargetOffset->getPosition->setPosition->if->Math->abs->super->setOpcode->old_length->super->getLength->super->setLength->return->super->getLength->return
GOTO#accept(Visitor):::Call corresponding visitor method(s):::v->visitVariableLengthInstruction->v->visitUnconditionalBranch->v->visitBranchInstruction->v->visitGotoInstruction->v->visitGOTO
GOTO_W#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->getTargetOffset->setIndex->out->super->getOpcode->writeByte->out->super->getIndex->writeInt
GOTO_W#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->bytes->readInt->setIndex->super->setLength
GOTO_W#accept(Visitor):::Call corresponding visitor method(s):::v->visitUnconditionalBranch->v->visitBranchInstruction->v->visitGotoInstruction->v->visitGOTO_W
I2B#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2B
I2C#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2C
I2D#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2D
I2F#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2F
I2L#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2L
I2S#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitI2S
IADD#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIADD
IALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitIALOAD
IAND#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIAND
IASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitIASTORE
ICONST#getValue()::: t get value:::return->Integer->valueOf
ICONST#getType(ConstantPoolGen)::: t get type:::return
ICONST#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitICONST
IDIV#getExceptions()::: v get exceptions:::return->new->Class<?>Arr
IDIV#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIDIV
IFEQ#negate()::: q negate:::return->super->getTarget->new->IFNE
IFEQ#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFEQ
IFGE#negate()::: e negate:::return->super->getTarget->new->IFLT
IFGE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFGE
IFGT#negate()::: t negate:::return->super->getTarget->new->IFLE
IFGT#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFGT
IfInstruction#negate()::: if instruction negate:::
IFLE#negate()::: e negate:::return->super->getTarget->new->IFGT
IFLE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFLE
IFLT#negate()::: t negate:::return->super->getTarget->new->IFGE
IFLT#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFLT
IFNE#negate()::: e negate:::return->super->getTarget->new->IFEQ
IFNE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFNE
IFNONNULL#negate()::: l negate:::return->super->getTarget->new->IFNULL
IFNONNULL#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFNONNULL
IFNULL#negate()::: l negate:::return->super->getTarget->new->IFNONNULL
IFNULL#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIFNULL
IF_ACMPEQ#negate()::: f_ q negate:::return->super->getTarget->new->IF_ACMPNE
IF_ACMPEQ#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ACMPEQ
IF_ACMPNE#negate()::: f_ e negate:::return->super->getTarget->new->IF_ACMPEQ
IF_ACMPNE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ACMPNE
IF_ICMPEQ#negate()::: f_ q negate:::return->super->getTarget->new->IF_ICMPNE
IF_ICMPEQ#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPEQ
IF_ICMPGE#negate()::: f_ e negate:::return->super->getTarget->new->IF_ICMPLT
IF_ICMPGE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPGE
IF_ICMPGT#negate()::: f_ t negate:::return->super->getTarget->new->IF_ICMPLE
IF_ICMPGT#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPGT
IF_ICMPLE#negate()::: f_ e negate:::return->super->getTarget->new->IF_ICMPGT
IF_ICMPLE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPLE
IF_ICMPLT#negate()::: f_ t negate:::return->super->getTarget->new->IF_ICMPGE
IF_ICMPLT#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPLT
IF_ICMPNE#negate()::: f_ e negate:::return->super->getTarget->new->IF_ICMPEQ
IF_ICMPNE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitBranchInstruction->v->visitIfInstruction->v->visitIF_ICMPNE
IINC#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::if->out->writeByte->out->super->getOpcode->writeByte->if->out->super->getIndex->writeShort->out->writeShort->else->out->super->getIndex->writeByte->out->writeByte
IINC#setWide()::: c set wide:::super->getIndex->if->else->if->super->setLength->else->super->setLength
IINC#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::if->super->setLength->super->bytes->readUnsignedShort->setIndexOnly->bytes->readShort->else->super->setLength->super->bytes->readUnsignedByte->setIndexOnly->bytes->readByte
IINC#toString(boolean)::: c to string:::return->super->toString
IINC#setIndex(int):::Set index of local variable.:::if->throw->new->ClassGenException->super->setIndexOnly->setWide
IINC#getIncrement()::: c get increment:::return
IINC#setIncrement(int):::Set increment factor.:::setWide
IINC#getType(ConstantPoolGen)::: c get type:::return
IINC#accept(Visitor):::Call corresponding visitor method(s):::v->visitLocalVariableInstruction->v->visitIINC
ILOAD#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitILOAD
IMPDEP1#accept(Visitor):::Call corresponding visitor method(s):::v->visitIMPDEP1
IMPDEP2#accept(Visitor):::Call corresponding visitor method(s):::v->visitIMPDEP2
IMUL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIMUL
IndexedInstruction#getIndex()::: indexed instruction get index:::
IndexedInstruction#setIndex(int)::: indexed instruction set index:::
INEG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitINEG
INSTANCEOF#getExceptions()::: f get exceptions:::return->ExceptionConst->createExceptions
INSTANCEOF#getLoadClassType(ConstantPoolGen)::: f get load class type:::t->getType->if->getBasicType->return
INSTANCEOF#accept(Visitor):::Call corresponding visitor method(s):::v->visitLoadClass->v->visitExceptionThrower->v->visitStackProducer->v->visitStackConsumer->v->visitTypedInstruction->v->visitCPInstruction->v->visitINSTANCEOF
Instruction#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->writeByte
Instruction#getName()::: instruction get name:::return->Const->getOpcodeName
Instruction#toString(boolean):::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")":::if->return->getName->return->getName
Instruction#toString()::: instruction to string:::return->toString
Instruction#toString(ConstantPool)::: instruction to string:::return->toString
Instruction#copy():::Use with caution, since `BranchInstruction's have a `target' reference which is not copied correctly (only basic types are):::i->if->InstructionConst->this->getOpcode->getInstruction->else->try->clone->catch->println->finally->return
Instruction#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::
Instruction#readInstruction(ByteSequence)::: instruction read instruction:::wide->opcode->bytes->readUnsignedByte->obj->if->bytes->readUnsignedByte->instruction->InstructionConst->getInstruction->if->return->switch->new->BIPUSH->break->new->SIPUSH->break->new->LDC->break->new->LDC_W->break->new->LDC2_W->break->new->ILOAD->break->new->LLOAD->break->new->FLOAD->break->new->DLOAD->break->new->ALOAD->break->new->ILOAD->break->new->ILOAD->break->new->ILOAD->break->new->ILOAD->break->new->LLOAD->break->new->LLOAD->break->new->LLOAD->break->new->LLOAD->break->new->FLOAD->break->new->FLOAD->break->new->FLOAD->break->new->FLOAD->break->new->DLOAD->break->new->DLOAD->break->new->DLOAD->break->new->DLOAD->break->new->ALOAD->break->new->ALOAD->break->new->ALOAD->break->new->ALOAD->break->new->ISTORE->break->new->LSTORE->break->new->FSTORE->break->new->DSTORE->break->new->ASTORE->break->new->ISTORE->break->new->ISTORE->break->new->ISTORE->break->new->ISTORE->break->new->LSTORE->break->new->LSTORE->break->new->LSTORE->break->new->LSTORE->break->new->FSTORE->break->new->FSTORE->break->new->FSTORE->break->new->FSTORE->break->new->DSTORE->break->new->DSTORE->break->new->DSTORE->break->new->DSTORE->break->new->ASTORE->break->new->ASTORE->break->new->ASTORE->break->new->ASTORE->break->new->IINC->break->new->IFEQ->break->new->IFNE->break->new->IFLT->break->new->IFGE->break->new->IFGT->break->new->IFLE->break->new->IF_ICMPEQ->break->new->IF_ICMPNE->break->new->IF_ICMPLT->break->new->IF_ICMPGE->break->new->IF_ICMPGT->break->new->IF_ICMPLE->break->new->IF_ACMPEQ->break->new->IF_ACMPNE->break->new->GOTO->break->new->JSR->break->new->RET->break->new->TABLESWITCH->break->new->LOOKUPSWITCH->break->new->GETSTATIC->break->new->PUTSTATIC->break->new->GETFIELD->break->new->PUTFIELD->break->new->INVOKEVIRTUAL->break->new->INVOKESPECIAL->break->new->INVOKESTATIC->break->new->INVOKEINTERFACE->break->new->INVOKEDYNAMIC->break->new->NEW->break->new->NEWARRAY->break->new->ANEWARRAY->break->new->CHECKCAST->break->new->INSTANCEOF->break->new->MULTIANEWARRAY->break->new->IFNULL->break->new->IFNONNULL->break->new->GOTO_W->break->new->JSR_W->break->new->BREAKPOINT->break->new->IMPDEP1->break->new->IMPDEP2->break->throw->new->ClassGenException->if->throw->new->ClassGenException->obj->setOpcode->obj->initFromFile->return
Instruction#consumeStack(ConstantPoolGen):::This method also gives right results for instructions whose effect on the stack depends on the constant pool entry they reference.:::return->Const->getConsumeStack
Instruction#produceStack(ConstantPoolGen):::This method also gives right results for instructions whose effect on the stack depends on the constant pool entry they reference.:::return->Const->getProduceStack
Instruction#getOpcode()::: instruction get opcode:::return
Instruction#getLength()::: instruction get length:::return
Instruction#setOpcode(short):::Needed in readInstruction and subclasses in this package:::
Instruction#setLength(int):::Needed in readInstruction and subclasses in this package:::
Instruction#dispose():::Some instructions may be reused, so don't do anything by default.:::
Instruction#accept(Visitor):::Call corresponding visitor method(s):::
Instruction#getComparator():::Get Comparator object used in the equals() method to determine equality of instructions.:::return
Instruction#setComparator(InstructionComparator):::Set comparator to be used for equals().:::
Instruction#equals(Object):::Check for equality, delegated to comparator:::return->cmp->equals
Instruction#hashCode():::calculate the hashCode of this object:::return
Instruction#isValidByte(int):::Check if the value can fit in a byte (signed):::return
Instruction#isValidShort(int):::Check if the value can fit in a short (signed):::return
InstructionComparator#equals(Instruction, Instruction)::: instruction comparator equals:::
InstructionConst#getInstruction(int):::Gets the Instruction.:::return
InstructionFactory#createInvoke(String, String, Type, Type[], short):::Create an invoke instruction:::index->nargs->signature->Type->getMethodSignature->foreach->arg_type->getSize->if->cp->addInterfaceMethodref->else->cp->addMethodref->switch->return->new->INVOKESPECIAL->return->new->INVOKEVIRTUAL->return->new->INVOKESTATIC->return->new->INVOKEINTERFACE->return->new->INVOKEDYNAMIC->throw->new->RuntimeException
InstructionFactory#createPrintln(String):::Create a call to the most popular System.out.println() method.:::il->new->InstructionList->out->cp->addFieldref->println->cp->addMethodref->il->new->GETSTATIC->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->return
InstructionFactory#createConstant(Object):::Uses PUSH to push a constant value onto the stack.:::push->if->new->PUSH->else->if->new->PUSH->else->if->new->PUSH->else->if->new->PUSH->else->throw->value->getClass->new->ClassGenException->return->push->getInstruction
InstructionFactory#createInvoke(MethodObject, short)::: instruction factory create invoke:::return->createInvoke
InstructionFactory#isString(Type)::: instruction factory is string:::return->getClassName->equals
InstructionFactory#createAppend(Type)::: instruction factory create append:::t->type->getType->if->isString->return->createInvoke->switch->return->createInvoke->return->createInvoke->throw->new->RuntimeException
InstructionFactory#createFieldAccess(String, String, Type, short):::Create a field instruction.:::index->signature->type->getSignature->cp->addFieldref->switch->return->new->GETFIELD->return->new->PUTFIELD->return->new->GETSTATIC->return->new->PUTSTATIC->throw->new->RuntimeException
InstructionFactory#createThis():::Create reference to `this':::return->new->ALOAD
InstructionFactory#createReturn(Type):::Create typed return:::switch->type->getType->return->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createBinaryIntOp(char, String)::: instruction factory create binary int op:::switch->return->return->return->return->return->return->return->return->return->return->op->equals->throw->new->RuntimeException
InstructionFactory#createBinaryLongOp(char, String)::: instruction factory create binary long op:::switch->return->return->return->return->return->return->return->return->return->return->op->equals->throw->new->RuntimeException
InstructionFactory#createBinaryFloatOp(char)::: instruction factory create binary float op:::switch->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createBinaryDoubleOp(char)::: instruction factory create binary double op:::switch->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createBinaryOperation(String, Type):::Create binary operation for simple basic types, such as int and float.:::first->op->charAt->switch->type->getType->return->createBinaryIntOp->return->createBinaryLongOp->return->createBinaryFloatOp->return->createBinaryDoubleOp->throw->new->RuntimeException
InstructionFactory#createPop(int)::: instruction factory create pop:::return
InstructionFactory#createDup(int)::: instruction factory create dup:::return
InstructionFactory#createDup_2(int)::: instruction factory create dup_2:::return
InstructionFactory#createDup_1(int)::: instruction factory create dup_1:::return
InstructionFactory#createStore(Type, int)::: instruction factory create store:::switch->type->getType->return->new->ISTORE->return->new->FSTORE->return->new->DSTORE->return->new->LSTORE->return->new->ASTORE->throw->new->RuntimeException
InstructionFactory#createLoad(Type, int)::: instruction factory create load:::switch->type->getType->return->new->ILOAD->return->new->FLOAD->return->new->DLOAD->return->new->LLOAD->return->new->ALOAD->throw->new->RuntimeException
InstructionFactory#createArrayLoad(Type)::: instruction factory create array load:::switch->type->getType->return->return->return->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createArrayStore(Type)::: instruction factory create array store:::switch->type->getType->return->return->return->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createCast(Type, Type):::Create conversion operation for two stack operands, this may be an I2C, instruction, e.g., if the operands are basic types and CHECKCAST if they are reference types.:::if->dest->dest_type->getType->src->src_type->getType->if->name->i->try->forName->getDeclaredConstructor->newInstance->catch->throw->new->RuntimeException->finally->return->else->if->if->return->cp->addArrayClass->new->CHECKCAST->return->cp->getClassName->addClass->new->CHECKCAST->else->throw->new->RuntimeException
InstructionFactory#createGetField(String, String, Type)::: instruction factory create get field:::return->cp->t->getSignature->addFieldref->new->GETFIELD
InstructionFactory#createGetStatic(String, String, Type)::: instruction factory create get static:::return->cp->t->getSignature->addFieldref->new->GETSTATIC
InstructionFactory#createPutField(String, String, Type)::: instruction factory create put field:::return->cp->t->getSignature->addFieldref->new->PUTFIELD
InstructionFactory#createPutStatic(String, String, Type)::: instruction factory create put static:::return->cp->t->getSignature->addFieldref->new->PUTSTATIC
InstructionFactory#createCheckCast(ReferenceType)::: instruction factory create check cast:::if->return->cp->addArrayClass->new->CHECKCAST->return->cp->addClass->new->CHECKCAST
InstructionFactory#createInstanceOf(ReferenceType)::: instruction factory create instance of:::if->return->cp->addArrayClass->new->INSTANCEOF->return->cp->addClass->new->INSTANCEOF
InstructionFactory#createNew(ObjectType)::: instruction factory create new:::return->cp->addClass->new->NEW
InstructionFactory#createNew(String)::: instruction factory create new:::return->ObjectType->getInstance->createNew
InstructionFactory#createNewArray(Type, short):::Create new array of given size and type.:::if->if->return->cp->addClass->new->ANEWARRAY->else->if->return->cp->addArrayClass->new->ANEWARRAY->else->return->t->getType->new->NEWARRAY->at->if->else->new->ArrayType->return->cp->addArrayClass->new->MULTIANEWARRAY
InstructionFactory#createNull(Type):::Create "null" value for reference types, 0 for basic types like int:::switch->type->getType->return->return->return->return->return->return->throw->new->RuntimeException
InstructionFactory#createBranchInstruction(short, InstructionHandle):::Create branch instruction by given opcode, except LOOKUPSWITCH and TABLESWITCH:::switch->return->new->IFEQ->return->new->IFNE->return->new->IFLT->return->new->IFGE->return->new->IFGT->return->new->IFLE->return->new->IF_ICMPEQ->return->new->IF_ICMPNE->return->new->IF_ICMPLT->return->new->IF_ICMPGE->return->new->IF_ICMPGT->return->new->IF_ICMPLE->return->new->IF_ACMPEQ->return->new->IF_ACMPNE->return->new->GOTO->return->new->JSR->return->new->IFNULL->return->new->IFNONNULL->return->new->GOTO_W->return->new->JSR_W->throw->new->RuntimeException
InstructionFactory#setClassGen(ClassGen)::: instruction factory set class gen:::
InstructionFactory#getClassGen()::: instruction factory get class gen:::return
InstructionFactory#setConstantPool(ConstantPoolGen)::: instruction factory set constant pool:::
InstructionFactory#getConstantPool()::: instruction factory get constant pool:::return
InstructionHandle#addHandle():::Does nothing.:::
InstructionHandle#getNext()::: instruction handle get next:::return
InstructionHandle#getPrev()::: instruction handle get prev:::return
InstructionHandle#getInstruction()::: instruction handle get instruction:::return
InstructionHandle#setInstruction(Instruction):::Replace current instruction contained in this handle:::if->throw->new->ClassGenException->if->this->getClass->throw->new->ClassGenException->if->instruction->dispose
InstructionHandle#swapInstruction(Instruction)::: instruction handle swap instruction:::oldInstruction->return
InstructionHandle#getInstructionHandle(Instruction):::Factory method.:::return->new->InstructionHandle
InstructionHandle#updatePosition(int, int):::Called by InstructionList.setPositions when setting the position for every instruction:::return
InstructionHandle#getPosition()::: instruction handle get position:::return
InstructionHandle#setPosition(int):::Set the position, i.e., the byte code offset of the contained instruction.:::
InstructionHandle#dispose():::Delete contents, i.e., remove user access.:::instruction->dispose->removeAllTargeters
InstructionHandle#removeAllTargeters():::Remove all targeters, if any.:::if->targeters->clear
InstructionHandle#removeTargeter(InstructionTargeter):::Denote this handle isn't referenced anymore by t.:::if->targeters->remove
InstructionHandle#addTargeter(InstructionTargeter):::Denote this handle is being referenced by t.:::if->new->HashSet<>->targeters->add
InstructionHandle#hasTargeters()::: instruction handle has targeters:::return->targeters->size
InstructionHandle#getTargeters()::: instruction handle get targeters:::if->hasTargeters->return->new->InstructionTargeterArr->t->targeters->size->new->InstructionTargeterArr->targeters->toArray->return
InstructionHandle#toString(boolean)::: instruction handle to string:::return->Utility->format->instruction->toString
InstructionHandle#toString()::: instruction handle to string:::return->toString
InstructionHandle#addAttribute(Object, Object):::Add an attribute to an instruction handle.:::if->new->HashMap<>->attributes->put
InstructionHandle#removeAttribute(Object):::Delete an attribute of an instruction handle.:::if->attributes->remove
InstructionHandle#getAttribute(Object):::Get attribute of an instruction handle.:::if->return->attributes->get->return
InstructionHandle#getAttributes()::: instruction handle get attributes:::if->new->HashMap<>->return->attributes->values
InstructionHandle#accept(Visitor):::Convenience method, simply calls accept() on the contained instruction.:::instruction->accept
InstructionHandle#setNext(InstructionHandle)::: instruction handle set next:::return
InstructionHandle#setPrev(InstructionHandle)::: instruction handle set prev:::return
InstructionList#isEmpty():::Test for empty list.:::return
InstructionList#findHandle(InstructionHandle[], int[], int, int):::Find the target instruction (handle) that corresponds to the given target position (byte code offset).:::l->r->do->i->j->if->return->else->if->else->while->return
InstructionList#findHandle(int):::Get instruction handle for instruction at byte code position pos:::positions->ih->for->i->return
InstructionList#append(InstructionHandle, InstructionList):::Append another list after instruction (handle) ih contained in this list:::if->throw->new->ClassGenException->if->il->isEmpty->return->next->ih->getNext->ret->ih->setNext->setPrev->setNext->if->next->setPrev->else->il->clear->return
InstructionList#append(Instruction, InstructionList):::Append another list after instruction i contained in this list:::ih->if->findInstruction2->throw->new->ClassGenException->return->append
InstructionList#append(InstructionList):::Append another list to this one:::if->throw->new->ClassGenException->if->il->isEmpty->return->if->isEmpty->il->clear->return->return->append
InstructionList#append(InstructionHandle):::Append an instruction to the end of this list.:::if->isEmpty->ih->ih->setPrev->setNext->else->end->setNext->ih->setPrev->ih->setNext
InstructionList#append(Instruction):::Append an instruction to the end of this list.:::ih->InstructionHandle->getInstructionHandle->append->return
InstructionList#append(BranchInstruction):::Append a branch instruction to the end of this list.:::ih->BranchHandle->getBranchHandle->append->return
InstructionList#append(Instruction, Instruction):::Append a single instruction j after another instruction i, which must be in this list of course!:::return->new->InstructionList->append
InstructionList#append(Instruction, CompoundInstruction):::Append a compound instruction, after instruction i.:::return->c->getInstructionList->append
InstructionList#append(CompoundInstruction):::Append a compound instruction.:::return->c->getInstructionList->append
InstructionList#append(InstructionHandle, CompoundInstruction):::Append a compound instruction.:::return->c->getInstructionList->append
InstructionList#append(InstructionHandle, Instruction):::Append an instruction after instruction (handle) ih contained in this list.:::return->new->InstructionList->append
InstructionList#append(InstructionHandle, BranchInstruction):::Append an instruction after instruction (handle) ih contained in this list.:::bh->BranchHandle->getBranchHandle->il->new->InstructionList->il->append->append->return
InstructionList#insert(InstructionHandle, InstructionList):::Insert another list before Instruction handle ih contained in this list:::if->throw->new->ClassGenException->if->il->isEmpty->return->prev->ih->getPrev->ret->ih->setPrev->setNext->setPrev->if->prev->setNext->else->il->clear->return
InstructionList#insert(InstructionList):::Insert another list.:::if->isEmpty->append->return->return->insert
InstructionList#insert(InstructionHandle):::Insert an instruction at start of this list.:::if->isEmpty->ih->ih->setPrev->setNext->else->start->setPrev->ih->setNext->ih->setPrev
InstructionList#insert(Instruction, InstructionList):::Insert another list before Instruction i contained in this list:::ih->if->findInstruction1->throw->new->ClassGenException->return->insert
InstructionList#insert(Instruction):::Insert an instruction at start of this list.:::ih->InstructionHandle->getInstructionHandle->insert->return
InstructionList#insert(BranchInstruction):::Insert a branch instruction at start of this list.:::ih->BranchHandle->getBranchHandle->insert->return
InstructionList#insert(Instruction, Instruction):::Insert a single instruction j before another instruction i, which must be in this list of course!:::return->new->InstructionList->insert
InstructionList#insert(Instruction, CompoundInstruction):::Insert a compound instruction before instruction i.:::return->c->getInstructionList->insert
InstructionList#insert(CompoundInstruction):::Insert a compound instruction.:::return->c->getInstructionList->insert
InstructionList#insert(InstructionHandle, Instruction):::Insert an instruction before instruction (handle) ih contained in this list.:::return->new->InstructionList->insert
InstructionList#insert(InstructionHandle, CompoundInstruction):::Insert a compound instruction.:::return->c->getInstructionList->insert
InstructionList#insert(InstructionHandle, BranchInstruction):::Insert an instruction before instruction (handle) ih contained in this list.:::bh->BranchHandle->getBranchHandle->il->new->InstructionList->il->append->insert->return
InstructionList#move(InstructionHandle, InstructionHandle, InstructionHandle):::Take all instructions (handles) from "start" to "end" and append them after the new location "target":::if->throw->new->ClassGenException->if->throw->new->ClassGenException->for->ih->end->getNext->ih->getNext->prev->start->getPrev->next->end->getNext->if->prev->setNext->else->if->next->setPrev->else->start->end->setNext->setPrev->if->if->setPrev->end->setNext->else->target->getNext->target->setNext->start->setPrev->end->setNext->if->next->setPrev->else
InstructionList#move(InstructionHandle, InstructionHandle):::Move a single instruction (handle) to a new location.:::move
InstructionList#remove(InstructionHandle, InstructionHandle):::Remove from instruction `prev' to instruction `next' both contained in this list:::first->last->if->else->if->else->prev->getNext->prev->setNext->if->else->next->getPrev->next->setPrev->first->setPrev->last->setNext->target_vec->new->ArrayList<>->for->ih->ih->getNext->buf->new->StringBuilder->for->ih->buf->append->if->target_vec->isEmpty->targeted->target_vec->size->new->InstructionHandleArr->target_vec->toArray->throw->buf->toString->new->TargetLostException
InstructionList#delete(InstructionHandle):::Remove instruction from this list:::ih->getPrev->ih->getNext->remove
InstructionList#delete(Instruction):::Remove instruction from this list:::ih->if->findInstruction1->throw->new->ClassGenException->delete
InstructionList#delete(InstructionHandle, InstructionHandle):::Remove instructions from instruction `from' to instruction `to' contained in this list:::from->getPrev->to->getNext->remove
InstructionList#delete(Instruction, Instruction):::Remove instructions from instruction `from' to instruction `to' contained in this list:::from_ih->to_ih->if->findInstruction1->throw->new->ClassGenException->if->findInstruction2->throw->new->ClassGenException->delete
InstructionList#findInstruction1(Instruction):::Search for given Instruction reference, start at beginning of list.:::for->ih->ih->getNext->return
InstructionList#findInstruction2(Instruction):::Search for given Instruction reference, start at end of list:::for->ih->ih->getPrev->return
InstructionList#contains(InstructionHandle)::: instruction list contains:::if->return->for->ih->ih->getNext->return
InstructionList#contains(Instruction)::: instruction list contains:::return->findInstruction1
InstructionList#setPositions()::: instruction list set positions:::setPositions
InstructionList#setPositions(boolean):::Give all instructions their position number (offset in byte stream), i.e., make the list ready to be dumped.:::max_additional_bytes->additional_bytes->index->count->pos->new->intArr->if->for->ih->ih->getNext->for->ih->ih->getNext->for->ih->ih->getNext->for->ih->ih->getNext->if->else->new->intArr->System->arraycopy
InstructionList#getByteCode():::When everything is finished, use this method to convert the instruction list into an array of bytes.:::setPositions->b->new->ByteArrayOutputStream->out->new->DataOutputStream->try->for->ih->ih->getNext->out->flush->catch->println->return->new->byteArr->finally->return->b->toByteArray
InstructionList#getInstructions()::: instruction list get instructions:::instructions->new->ArrayList<>->try->bytes->getByteCode->new->ByteSequence->while->bytes->available->instructions->Instruction->readInstruction->add->catch->throw->e->toString->new->ClassGenException->finally->return->instructions->instructions->size->new->InstructionArr->toArray
InstructionList#toString()::: instruction list to string:::return->toString
InstructionList#toString(boolean)::: instruction list to string:::buf->new->StringBuilder->for->ih->ih->getNext->return->buf->toString
InstructionList#iterator()::: instruction list iterator:::return->new->Iterator<InstructionHandle>
InstructionList#getInstructionHandles()::: instruction list get instruction handles:::ihs->new->InstructionHandleArr->ih->for->i->return
InstructionList#getInstructionPositions():::Get positions (offsets) of all instructions in the list:::return
InstructionList#copy()::: instruction list copy:::map->new->HashMap<>->il->new->InstructionList->for->ih->ih->getNext->ih->ch->while->i->ih->getInstruction->c->ch->getInstruction->if->bi->bc->itarget->bi->getTarget->bc->map->get->setTarget->if->itargets->getTargets->ctargets->getTargets->for->j->ih->getNext->ch->getNext->return
InstructionList#replaceConstantPool(ConstantPoolGen, ConstantPoolGen):::Replace all references to the old constant pool with references to the new constant pool:::for->ih->ih->getNext
InstructionList#clear()::: instruction list clear:::
InstructionList#dispose():::Delete contents of list:::for->ih->ih->getPrev->clear
InstructionList#getStart()::: instruction list get start:::return
InstructionList#getEnd()::: instruction list get end:::return
InstructionList#getLength()::: instruction list get length:::return
InstructionList#size()::: instruction list size:::return
InstructionList#redirectBranches(InstructionHandle, InstructionHandle):::Redirect all references from old_target to new_target, i.e., update targets of branch instructions.:::for->ih->ih->getNext
InstructionList#redirectLocalVariables(LocalVariableGen[], InstructionHandle, InstructionHandle):::Redirect all references of local variables from old_target to new_target.:::foreach->start->element->getStart->end->element->getEnd->if->element->setStart->if->element->setEnd
InstructionList#redirectExceptionHandlers(CodeExceptionGen[], InstructionHandle, InstructionHandle):::Redirect all references of exception handlers from old_target to new_target.:::foreach->if->exception->getStartPC->exception->setStartPC->if->exception->getEndPC->exception->setEndPC->if->exception->getHandlerPC->exception->setHandlerPC
InstructionList#addObserver(InstructionListObserver):::Add observer for this object.:::if->new->ArrayList<>->observers->add
InstructionList#removeObserver(InstructionListObserver):::Remove observer for this object.:::if->observers->remove
InstructionList#update():::Call notify() method on all observers:::if->foreach->observer->notify
InstructionListObserver#notify(InstructionList)::: instruction list observer notify:::
InstructionTargeter#containsTarget(InstructionHandle):::Checks whether this targeter targets the specified instruction handle.:::
InstructionTargeter#updateTarget(InstructionHandle, InstructionHandle):::Replaces the target of this targeter from this old handle to the new handle.:::
INVOKEDYNAMIC#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort->out->writeByte->out->writeByte
INVOKEDYNAMIC#initFromFile(ByteSequence, boolean):::Read needed data (i.e., index) from file.:::super->initFromFile->super->setLength->bytes->readByte->bytes->readByte
INVOKEDYNAMIC#toString(ConstantPool)::: c to string:::return->super->toString
INVOKEDYNAMIC#getExceptions()::: c get exceptions:::return->ExceptionConst->createExceptions
INVOKEDYNAMIC#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitStackProducer->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitInvokeInstruction->v->visitINVOKEDYNAMIC
INVOKEDYNAMIC#getClassName(ConstantPoolGen):::Override the parent method because our classname is held elsewhere.:::cp->cpg->getConstantPool->cid->cp->super->getIndex->getConstant->return->cp->cid->getNameAndTypeIndex->getConstant->getName
INVOKEDYNAMIC#getReferenceType(ConstantPoolGen):::Since InvokeDynamic doesn't refer to a reference type, just return java.lang.Object, as that is the only type we can say for sure the reference will be.:::return->getName->new->ObjectType
InvokeInstruction#toString(ConstantPool)::: invoke instruction to string:::c->cp->super->getIndex->getConstant->tok->cp->constantToString->new->StringTokenizer->return->Const->super->getOpcode->getOpcodeName->tok->nextToken->replace->tok->nextToken
InvokeInstruction#consumeStack(ConstantPoolGen):::Also works for instructions whose stack effect depends on the constant pool entry they reference.:::sum->if->super->getOpcode->super->getOpcode->else->signature->getSignature->Type->getArgumentTypesSize->return
InvokeInstruction#produceStack(ConstantPoolGen):::Also works for instructions whose stack effect depends on the constant pool entry they reference.:::signature->getSignature->return->Type->getReturnTypeSize
InvokeInstruction#getClassName(ConstantPoolGen):::This overrides the deprecated version as we know here that the referenced class may legally be an array.:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->className->cp->cmr->getClassIndex->getConstantString->return->className->replace
InvokeInstruction#getType(ConstantPoolGen)::: invoke instruction get type:::return->getReturnType
InvokeInstruction#getMethodName(ConstantPoolGen)::: invoke instruction get method name:::return->getName
InvokeInstruction#getReturnType(ConstantPoolGen)::: invoke instruction get return type:::return->Type->getSignature->getReturnType
InvokeInstruction#getArgumentTypes(ConstantPoolGen)::: invoke instruction get argument types:::return->Type->getSignature->getArgumentTypes
INVOKEINTERFACE#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort->out->writeByte->out->writeByte
INVOKEINTERFACE#getCount():::The <B>count</B> argument according to the Java Language Specification, Second Edition.:::return
INVOKEINTERFACE#initFromFile(ByteSequence, boolean):::Read needed data (i.e., index) from file.:::super->initFromFile->super->setLength->bytes->readUnsignedByte->bytes->readByte
INVOKEINTERFACE#toString(ConstantPool)::: e to string:::return->super->toString
INVOKEINTERFACE#consumeStack(ConstantPoolGen)::: e consume stack:::return
INVOKEINTERFACE#getExceptions()::: e get exceptions:::return->ExceptionConst->createExceptions
INVOKEINTERFACE#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitStackProducer->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitInvokeInstruction->v->visitINVOKEINTERFACE
INVOKESPECIAL#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort
INVOKESPECIAL#getExceptions()::: l get exceptions:::return->ExceptionConst->createExceptions
INVOKESPECIAL#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitStackProducer->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitInvokeInstruction->v->visitINVOKESPECIAL
INVOKESTATIC#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort
INVOKESTATIC#getExceptions()::: c get exceptions:::return->ExceptionConst->createExceptions
INVOKESTATIC#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitStackProducer->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitInvokeInstruction->v->visitINVOKESTATIC
INVOKEVIRTUAL#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort
INVOKEVIRTUAL#getExceptions()::: l get exceptions:::return->ExceptionConst->createExceptions
INVOKEVIRTUAL#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitStackProducer->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitInvokeInstruction->v->visitINVOKEVIRTUAL
IOR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIOR
IREM#getExceptions()::: m get exceptions:::return->new->Class<?>Arr
IREM#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIREM
IRETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitIRETURN
ISHL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitISHL
ISHR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitISHR
ISTORE#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitISTORE
ISUB#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitISUB
IUSHR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIUSHR
IXOR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitIXOR
JSR#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->getTargetOffset->setIndex->if->super->getOpcode->super->dump->else->super->getTargetOffset->setIndex->out->super->getOpcode->writeByte->out->super->getIndex->writeInt
JSR#updatePosition(int, int)::: r update position:::i->getTargetOffset->getPosition->setPosition->if->Math->abs->super->setOpcode->old_length->super->getLength->super->setLength->return->super->getLength->return
JSR#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitVariableLengthInstruction->v->visitBranchInstruction->v->visitJsrInstruction->v->visitJSR
JsrInstruction#getType(ConstantPoolGen)::: jsr instruction get type:::return->physicalSuccessor->new->ReturnaddressType
JsrInstruction#physicalSuccessor():::Returns an InstructionHandle to the physical successor of this JsrInstruction:::ih->super->getTarget->while->ih->getPrev->ih->getPrev->while->ih->getInstruction->ih->getNext->toThis->while->ih->getNext->if->ih->getInstruction->throw->new->RuntimeException->return->toThis->getNext
JSR_W#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->getTargetOffset->setIndex->out->super->getOpcode->writeByte->out->super->getIndex->writeInt
JSR_W#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->bytes->readInt->setIndex->super->setLength
JSR_W#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitBranchInstruction->v->visitJsrInstruction->v->visitJSR_W
L2D#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitL2D
L2F#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitL2F
L2I#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitConversionInstruction->v->visitL2I
LADD#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLADD
LALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitLALOAD
LAND#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLAND
LASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitLASTORE
LCMP#getType(ConstantPoolGen)::: p get type:::return
LCMP#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitLCMP
LCONST#getValue()::: t get value:::return->Long->valueOf
LCONST#getType(ConstantPoolGen)::: t get type:::return
LCONST#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitLCONST
LDC#setSize()::: c set size:::if->super->getIndex->super->setOpcode->super->setLength->else->super->setOpcode->super->setLength
LDC#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->if->super->getLength->out->super->getIndex->writeByte->else->out->super->getIndex->writeShort
LDC#setIndex(int):::Set the index to constant pool and adjust size.:::super->setIndex->setSize
LDC#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->setLength->super->bytes->readUnsignedByte->setIndex
LDC#getValue(ConstantPoolGen)::: c get value:::c->cpg->getConstantPool->super->getIndex->getConstant->switch->c->getTag->i->getStringIndex->cpg->getConstantPool->getConstant->return->getBytes->return->getBytes->return->getBytes->nameIndex->getNameIndex->cpg->getConstantPool->getConstant->return->getBytes->new->ObjectType->throw->super->getIndex->new->RuntimeException
LDC#getType(ConstantPoolGen)::: c get type:::switch->cpg->getConstantPool->super->getIndex->getConstant->getTag->return->return->return->return->throw->super->getIndex->new->RuntimeException
LDC#getExceptions()::: c get exceptions:::return->ExceptionConst->createExceptions
LDC#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitExceptionThrower->v->visitTypedInstruction->v->visitCPInstruction->v->visitLDC
LDC2_W#getType(ConstantPoolGen)::: c2_ w get type:::switch->cpg->getConstantPool->super->getIndex->getConstant->getTag->return->return->throw->super->getOpcode->new->RuntimeException
LDC2_W#getValue(ConstantPoolGen)::: c2_ w get value:::c->cpg->getConstantPool->super->getIndex->getConstant->switch->c->getTag->return->getBytes->return->getBytes->throw->super->getIndex->new->RuntimeException
LDC2_W#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitTypedInstruction->v->visitCPInstruction->v->visitLDC2_W
LDC_W#initFromFile(ByteSequence, boolean):::Read needed data (i.e., index) from file.:::bytes->readUnsignedShort->setIndex->super->setOpcode->super->setLength
LDIV#getExceptions()::: v get exceptions:::return->new->Class<?>Arr
LDIV#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLDIV
LineNumberGen#containsTarget(InstructionHandle)::: line number gen contains target:::return
LineNumberGen#updateTarget(InstructionHandle, InstructionHandle)::: line number gen update target:::if->throw->new->ClassGenException->setInstruction
LineNumberGen#getLineNumber():::Get LineNumber attribute :::return->ih->getPosition->new->LineNumber
LineNumberGen#setInstruction(InstructionHandle)::: line number gen set instruction:::if->throw->new->NullPointerException->BranchInstruction->notifyTarget
LineNumberGen#clone()::: line number gen clone:::try->return->super->clone->catch->throw->new->Error->finally
LineNumberGen#getInstruction()::: line number gen get instruction:::return
LineNumberGen#setSourceLine(int)::: line number gen set source line:::
LineNumberGen#getSourceLine()::: line number gen get source line:::return
LLOAD#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitLLOAD
LMUL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLMUL
LNEG#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLNEG
LoadClass#getLoadClassType(ConstantPoolGen):::Returns the ObjectType of the referenced class or interface that may be loaded and resolved.:::
LoadClass#getType(ConstantPoolGen):::Returns the type associated with this instruction:::
LoadInstruction#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitPushInstruction->v->visitTypedInstruction->v->visitLocalVariableInstruction->v->visitLoadInstruction
LocalVariableGen#getLocalVariable(ConstantPoolGen):::Get LocalVariable object:::start_pc->length->if->start->getPosition->end->getPosition->if->end->getNext->end->getInstruction->getLength->name_index->cp->addUtf8->signature_index->cp->type->getSignature->addUtf8->return->cp->getConstantPool->new->LocalVariable
LocalVariableGen#setIndex(int)::: local variable gen set index:::
LocalVariableGen#getIndex()::: local variable gen get index:::return
LocalVariableGen#getOrigIndex()::: local variable gen get orig index:::return
LocalVariableGen#setLiveToEnd(boolean)::: local variable gen set live to end:::
LocalVariableGen#getLiveToEnd()::: local variable gen get live to end:::return
LocalVariableGen#setName(String)::: local variable gen set name:::
LocalVariableGen#getName()::: local variable gen get name:::return
LocalVariableGen#setType(Type)::: local variable gen set type:::
LocalVariableGen#getType()::: local variable gen get type:::return
LocalVariableGen#getStart()::: local variable gen get start:::return
LocalVariableGen#getEnd()::: local variable gen get end:::return
LocalVariableGen#setStart(InstructionHandle)::: local variable gen set start:::BranchInstruction->notifyTarget
LocalVariableGen#setEnd(InstructionHandle)::: local variable gen set end:::BranchInstruction->notifyTarget
LocalVariableGen#updateTarget(InstructionHandle, InstructionHandle)::: local variable gen update target:::targeted->if->setStart->if->setEnd->if->throw->new->ClassGenException
LocalVariableGen#dispose():::Clear the references from and to this variable when it's removed.:::setStart->setEnd
LocalVariableGen#containsTarget(InstructionHandle)::: local variable gen contains target:::return
LocalVariableGen#hashCode()::: local variable gen hash code:::return->name->hashCode->type->hashCode
LocalVariableGen#equals(Object):::We consider to local variables to be equal, if the use the same index and are valid in the same range.:::if->return->l->return
LocalVariableGen#toString()::: local variable gen to string:::return
LocalVariableGen#clone()::: local variable gen clone:::try->return->super->clone->catch->throw->new->Error->finally
LocalVariableInstruction#wide()::: local variable instruction wide:::return
LocalVariableInstruction#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::if->wide->out->writeByte->out->super->getOpcode->writeByte->if->super->getLength->if->wide->out->writeShort->else->out->writeByte
LocalVariableInstruction#toString(boolean):::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; local variable index&gt;"&gt;":::_opcode->super->getOpcode->if->return->super->toString->return->super->toString
LocalVariableInstruction#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::if->bytes->readUnsignedShort->super->setLength->else->_opcode->super->getOpcode->if->bytes->readUnsignedByte->super->setLength->else->if->super->setLength->else->super->setLength
LocalVariableInstruction#getIndex()::: local variable instruction get index:::return
LocalVariableInstruction#setIndex(int):::Set the local variable index:::if->throw->new->ClassGenException->if->super->setOpcode->super->setLength->else->super->setOpcode->if->wide->super->setLength->else->super->setLength
LocalVariableInstruction#getCanonicalTag()::: local variable instruction get canonical tag:::return
LocalVariableInstruction#getType(ConstantPoolGen):::Returns the type associated with the instruction - in case of ALOAD or ASTORE Type.OBJECT is returned:::switch->return->return->return->return->return->throw->new->ClassGenException
LocalVariableInstruction#setIndexOnly(int):::Sets the index of the referenced variable (n) only:::
LOOKUPSWITCH#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->dump->_match_length->getMatch_length->out->writeInt->for->i
LOOKUPSWITCH#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->initFromFile->_match_length->bytes->readInt->setMatch_length->_fixed_length->setFixed_length->_length->super->getPadding->super->setLength->super->new->intArr->setMatches->super->new->intArr->setIndices->super->new->InstructionHandleArr->setTargets->for->i
LOOKUPSWITCH#accept(Visitor):::Call corresponding visitor method(s):::v->visitVariableLengthInstruction->v->visitStackConsumer->v->visitBranchInstruction->v->visitSelect->v->visitLOOKUPSWITCH
LOR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLOR
LREM#getExceptions()::: m get exceptions:::return->new->Class<?>Arr
LREM#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLREM
LRETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitLRETURN
LSHL#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLSHL
LSHR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLSHR
LSTORE#accept(Visitor):::Call corresponding visitor method(s):::super->accept->v->visitLSTORE
LSUB#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLSUB
LUSHR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLUSHR
LXOR#accept(Visitor):::Call corresponding visitor method(s):::v->visitTypedInstruction->v->visitStackProducer->v->visitStackConsumer->v->visitArithmeticInstruction->v->visitLXOR
MethodGen#addLocalVariable(String, Type, int, InstructionHandle, InstructionHandle, int):::Adds a local variable to this method.:::t->type->getType->if->add->type->getSize->if->l->new->LocalVariableGen->i->if->variable_vec->indexOf->variable_vec->set->else->variable_vec->add->return->throw->new->IllegalArgumentException
MethodGen#addLocalVariable(String, Type, int, InstructionHandle, InstructionHandle):::Adds a local variable to this method.:::return->addLocalVariable
MethodGen#addLocalVariable(String, Type, InstructionHandle, InstructionHandle):::Adds a local variable to this method and assigns an index automatically.:::return->addLocalVariable
MethodGen#removeLocalVariable(LocalVariableGen):::Remove a local variable, its slot will not be reused, if you do not use addLocalVariable with an explicit index argument.:::variable_vec->remove
MethodGen#removeLocalVariables():::Remove all local variables.:::variable_vec->clear
MethodGen#getLocalVariables()::: method gen get local variables:::size->variable_vec->size->lg->new->LocalVariableGenArr->variable_vec->toArray->for->i->if->Arrays->new->Comparator<LocalVariableGen>->sort->return
MethodGen#getLocalVariableTable(ConstantPoolGen)::: method gen get local variable table:::lg->getLocalVariables->size->lv->new->LocalVariableArr->for->i->return->cp->addUtf8->cp->getConstantPool->new->LocalVariableTable
MethodGen#getLocalVariableTypeTable()::: method gen get local variable type table:::return
MethodGen#addLineNumber(InstructionHandle, int):::Give an instruction a line number corresponding to the source code line.:::l->new->LineNumberGen->line_number_vec->add->return
MethodGen#removeLineNumber(LineNumberGen):::Remove a line number.:::line_number_vec->remove
MethodGen#removeLineNumbers():::Remove all line numbers.:::line_number_vec->clear
MethodGen#getLineNumbers()::: method gen get line numbers:::lg->line_number_vec->size->new->LineNumberGenArr->line_number_vec->toArray->return
MethodGen#getLineNumberTable(ConstantPoolGen)::: method gen get line number table:::size->line_number_vec->size->ln->new->LineNumberArr->for->i->return->cp->addUtf8->cp->getConstantPool->new->LineNumberTable
MethodGen#addExceptionHandler(InstructionHandle, InstructionHandle, InstructionHandle, ObjectType):::Add an exception handler, i.e., specify region where a handler is active and an instruction where the actual handling is done.:::if->throw->new->ClassGenException->c->new->CodeExceptionGen->exception_vec->add->return
MethodGen#removeExceptionHandler(CodeExceptionGen):::Remove an exception handler.:::exception_vec->remove
MethodGen#removeExceptionHandlers():::Remove all line numbers.:::exception_vec->clear
MethodGen#getExceptionHandlers()::: method gen get exception handlers:::cg->exception_vec->size->new->CodeExceptionGenArr->exception_vec->toArray->return
MethodGen#getCodeExceptions()::: method gen get code exceptions:::size->exception_vec->size->c_exc->new->CodeExceptionArr->for->i->return
MethodGen#addException(String):::Add an exception possibly thrown by this method.:::throws_vec->add
MethodGen#removeException(String):::Remove an exception.:::throws_vec->remove
MethodGen#removeExceptions():::Remove all exceptions.:::throws_vec->clear
MethodGen#getExceptions()::: method gen get exceptions:::e->throws_vec->size->new->StringArr->throws_vec->toArray->return
MethodGen#getExceptionTable(ConstantPoolGen)::: method gen get exception table:::size->throws_vec->size->ex->new->intArr->for->i->return->cp->addUtf8->cp->getConstantPool->new->ExceptionTable
MethodGen#addCodeAttribute(Attribute):::Add an attribute to the code:::code_attrs_vec->add
MethodGen#removeLocalVariableTypeTable():::Remove the LocalVariableTypeTable:::
MethodGen#removeCodeAttribute(Attribute):::Remove a code attribute.:::code_attrs_vec->remove
MethodGen#removeCodeAttributes():::Remove all code attributes.:::code_attrs_vec->clear
MethodGen#getCodeAttributes()::: method gen get code attributes:::attributes->code_attrs_vec->size->new->AttributeArr->code_attrs_vec->toArray->return
MethodGen#addAnnotationsAsAttribute(ConstantPoolGen)::: method gen add annotations as attribute:::attrs->AnnotationEntryGen->super->getAnnotationEntries->getAnnotationAttributes->foreach->addAttribute
MethodGen#addParameterAnnotationsAsAttribute(ConstantPoolGen)::: method gen add parameter annotations as attribute:::if->return->attrs->AnnotationEntryGen->getParameterAnnotationAttributes->if->foreach->addAttribute
MethodGen#getMethod():::Get method object:::signature->getSignature->_cp->super->getConstantPool->name_index->_cp->super->getName->addUtf8->signature_index->_cp->addUtf8->byte_code->if->il->getByteCode->lnt->lvt->if->variable_vec->size->getLocalVariableTable->updateLocalVariableTable->getLocalVariableTable->addCodeAttribute->if->if->adjustLocalVariableTypeTable->addCodeAttribute->if->line_number_vec->size->getLineNumberTable->addCodeAttribute->code_attrs->getCodeAttributes->attrs_len->foreach->code_attr->getLength->c_exc->getCodeExceptions->exc_len->code->if->isAbstract->isNative->attributes->getAttributes->foreach->if->removeAttribute->_cp->addUtf8->_cp->getConstantPool->new->Code->addAttribute->addAnnotationsAsAttribute->addParameterAnnotationsAsAttribute->et->if->throws_vec->size->getExceptionTable->addAttribute->m->super->getAccessFlags->getAttributes->_cp->getConstantPool->new->Method->if->removeCodeAttribute->if->removeCodeAttribute->if->removeCodeAttribute->if->removeAttribute->if->removeAttribute->return
MethodGen#updateLocalVariableTable(LocalVariableTable)::: method gen update local variable table:::lv->a->getLocalVariableTable->removeLocalVariables->foreach->start->il->l->getStartPC->findHandle->end->il->l->getStartPC->l->getLength->findHandle->if->il->getStart->l->getName->Type->l->getSignature->getType->l->getIndex->l->getOrigIndex->addLocalVariable
MethodGen#adjustLocalVariableTypeTable(LocalVariableTable)::: method gen adjust local variable type table:::lv->lvt->getLocalVariableTable->lvg->local_variable_type_table->getLocalVariableTypeTable->foreach->foreach->if->element->getName->l->getName->equals->element->getIndex->l->getOrigIndex->element->l->getLength->setLength->element->l->getStartPC->setStartPC->element->l->getIndex->setIndex->break
MethodGen#removeNOPs():::Remove all NOPs from the instruction list (if possible) and update every object referring to them, i.e., branch instructions, local variables and exception handlers.:::if->next->for->ih->il->getStart
MethodGen#setMaxLocals(int):::Set maximum number of local variables.:::
MethodGen#getMaxLocals()::: method gen get max locals:::return
MethodGen#setMaxStack(int):::Set maximum stack size for this method.:::
MethodGen#getMaxStack()::: method gen get max stack:::return
MethodGen#getClassName()::: method gen get class name:::return
MethodGen#setClassName(String)::: method gen set class name:::
MethodGen#setReturnType(Type)::: method gen set return type:::setType
MethodGen#getReturnType()::: method gen get return type:::return->getType
MethodGen#setArgumentTypes(Type[])::: method gen set argument types:::
MethodGen#getArgumentTypes()::: method gen get argument types:::return->arg_types->clone
MethodGen#setArgumentType(int, Type)::: method gen set argument type:::
MethodGen#getArgumentType(int)::: method gen get argument type:::return
MethodGen#setArgumentNames(String[])::: method gen set argument names:::
MethodGen#getArgumentNames()::: method gen get argument names:::return->arg_names->clone
MethodGen#setArgumentName(int, String)::: method gen set argument name:::
MethodGen#getArgumentName(int)::: method gen get argument name:::return
MethodGen#getInstructionList()::: method gen get instruction list:::return
MethodGen#setInstructionList(InstructionList)::: method gen set instruction list:::
MethodGen#getSignature()::: method gen get signature:::return->Type->super->getType->getMethodSignature
MethodGen#setMaxStack():::Computes max:::if->super->getConstantPool->getExceptionHandlers->getMaxStack->else
MethodGen#setMaxLocals():::Compute maximum number of local variables.:::if->max->isStatic->if->foreach->arg_type->getSize->for->ih->il->getStart->ih->getNext->else
MethodGen#stripAttributes(boolean):::Do not/Do produce attributes code attributesLineNumberTable and LocalVariableTable, like javac -O:::
MethodGen.BranchStack#push(InstructionHandle, int)::: branch stack push:::if->visited->return->branchTargets->visit->push
MethodGen.BranchStack#pop()::: branch stack pop:::if->branchTargets->empty->bt->branchTargets->pop->return->return
MethodGen.BranchStack#visit(InstructionHandle, int)::: branch stack visit:::bt->new->BranchTarget->visitedTargets->put->return
MethodGen.BranchStack#visited(InstructionHandle)::: branch stack visited:::return->visitedTargets->get
MethodGen#getMaxStack(ConstantPoolGen, InstructionList, CodeExceptionGen[]):::Computes stack usage of an instruction list by performing control flow analysis.:::branchTargets->new->BranchStack->foreach->handler_pc->element->getHandlerPC->if->branchTargets->push->stackDepth->maxStackDepth->ih->il->getStart->while->instruction->ih->getInstruction->opcode->instruction->getOpcode->delta->instruction->produceStack->instruction->consumeStack->if->if->branch->if->select->targets->select->getTargets->foreach->branchTargets->push->else->if->if->branchTargets->ih->getNext->push->branchTargets->branch->getTarget->push->else->if->if->ih->getNext->if->bt->branchTargets->pop->if->return
MethodGen#addObserver(MethodObserver):::Add observer for this object.:::if->new->ArrayList<>->observers->add
MethodGen#removeObserver(MethodObserver):::Remove observer for this object.:::if->observers->remove
MethodGen#update():::Call notify() method on all observers:::if->foreach->observer->notify
MethodGen#toString():::Return string representation close to declaration format, `public static void main(String[]) throws IOException', e.g.:::access->Utility->super->getAccessFlags->accessToString->signature->Type->super->getType->getMethodSignature->Utility->super->getName->super->getConstantPool->getLocalVariableTable->methodSignatureToString->buf->new->StringBuilder->foreach->getAttributes->if->buf->append->append->append->if->throws_vec->size->foreach->buf->append->append->return->buf->toString
MethodGen#copy(String, ConstantPoolGen)::: method gen copy:::m->clone->getMethod->mg->super->getConstantPool->new->MethodGen->if->super->getConstantPool->mg->setConstantPool->mg->getInstructionList->super->getConstantPool->replaceConstantPool->return
MethodGen#getAnnotationsOnParameter(int):::Return a list of AnnotationGen objects representing parameter annotations:::ensureExistingParameterAnnotationsUnpacked->if->return->return
MethodGen#ensureExistingParameterAnnotationsUnpacked():::Goes through the attributes on the method and identifies any that are RuntimeParameterAnnotations, extracting their contents and storing them as parameter annotations:::if->return->attrs->getAttributes->paramAnnVisAttr->paramAnnInvisAttr->foreach->if->if->parmList->new->ListArr->for->j->rpa->if->else->parameterAnnotationEntries->rpa->getParameterAnnotationEntries->for->j->if->removeAttribute->if->removeAttribute
MethodGen#makeMutableVersion(AnnotationEntry[])::: method gen make mutable version:::result->new->ArrayList<>->foreach->result->getConstantPool->new->AnnotationEntryGen->add->return
MethodGen#addParameterAnnotation(int, AnnotationEntryGen)::: method gen add parameter annotation:::ensureExistingParameterAnnotationsUnpacked->if->parmList->new->ListArr->existingAnnotations->if->existingAnnotations->add->else->l->new->ArrayList<>->l->add
MethodGen#getComparator()::: method gen get comparator:::return
MethodGen#setComparator(BCELComparator)::: method gen set comparator:::
MethodGen#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
MethodGen#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
MethodObserver#notify(MethodGen)::: method observer notify:::
MONITORENTER#getExceptions()::: r get exceptions:::return->new->Class<?>Arr
MONITORENTER#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackConsumer->v->visitMONITORENTER
MONITOREXIT#getExceptions()::: t get exceptions:::return->new->Class<?>Arr
MONITOREXIT#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackConsumer->v->visitMONITOREXIT
MULTIANEWARRAY#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->super->getIndex->writeShort->out->writeByte
MULTIANEWARRAY#initFromFile(ByteSequence, boolean):::Read needed data (i.e., no:::super->initFromFile->bytes->readByte->super->setLength
MULTIANEWARRAY#getDimensions()::: y get dimensions:::return
MULTIANEWARRAY#toString(boolean)::: y to string:::return->super->toString->super->getIndex
MULTIANEWARRAY#toString(ConstantPool)::: y to string:::return->super->toString
MULTIANEWARRAY#consumeStack(ConstantPoolGen):::Also works for instructions whose stack effect depends on the constant pool entry they reference.:::return
MULTIANEWARRAY#getExceptions()::: y get exceptions:::return->ExceptionConst->createExceptions
MULTIANEWARRAY#getLoadClassType(ConstantPoolGen)::: y get load class type:::t->getType->if->getBasicType->return
MULTIANEWARRAY#accept(Visitor):::Call corresponding visitor method(s):::v->visitLoadClass->v->visitAllocationInstruction->v->visitExceptionThrower->v->visitTypedInstruction->v->visitCPInstruction->v->visitMULTIANEWARRAY
NamedAndTyped#getName()::: named and typed get name:::
NamedAndTyped#getType()::: named and typed get type:::
NamedAndTyped#setName(String)::: named and typed set name:::
NamedAndTyped#setType(Type)::: named and typed set type:::
NameSignatureInstruction#getNameAndType(ConstantPoolGen)::: name signature instruction get name and type:::cp->cpg->getConstantPool->cmr->cp->super->getIndex->getConstant->return->cp->cmr->getNameAndTypeIndex->getConstant
NameSignatureInstruction#getSignature(ConstantPoolGen)::: name signature instruction get signature:::cp->cpg->getConstantPool->cnat->getNameAndType->return->cp->cnat->getSignatureIndex->getConstant->getBytes
NameSignatureInstruction#getName(ConstantPoolGen)::: name signature instruction get name:::cp->cpg->getConstantPool->cnat->getNameAndType->return->cp->cnat->getNameIndex->getConstant->getBytes
NEW#getExceptions()::: w get exceptions:::return->ExceptionConst->createExceptions
NEW#getLoadClassType(ConstantPoolGen)::: w get load class type:::return->getType
NEW#accept(Visitor):::Call corresponding visitor method(s):::v->visitLoadClass->v->visitAllocationInstruction->v->visitExceptionThrower->v->visitStackProducer->v->visitTypedInstruction->v->visitCPInstruction->v->visitNEW
NEWARRAY#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->out->writeByte
NEWARRAY#getTypecode()::: y get typecode:::return
NEWARRAY#getType()::: y get type:::return->BasicType->getType->new->ArrayType
NEWARRAY#toString(boolean)::: y to string:::return->super->toString->getTypeName
NEWARRAY#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::bytes->readByte->super->setLength
NEWARRAY#getExceptions()::: y get exceptions:::return->new->Class<?>Arr
NEWARRAY#accept(Visitor):::Call corresponding visitor method(s):::v->visitAllocationInstruction->v->visitExceptionThrower->v->visitStackProducer->v->visitNEWARRAY
NOP#accept(Visitor):::Call corresponding visitor method(s):::v->visitNOP
ObjectType#getInstance(String)::: object type get instance:::return->new->ObjectType
ObjectType#getClassName()::: object type get class name:::return
ObjectType#hashCode()::: object type hash code:::return->class_name->hashCode
ObjectType#equals(Object)::: object type equals:::return->equals
ObjectType#referencesClass():::If "this" doesn't reference a class, it references an interface or a non-existant entity.:::try->jc->Repository->lookupClass->return->jc->isClass->catch->return->finally
ObjectType#referencesInterface():::If "this" doesn't reference an interface, it references a class or a non-existant entity.:::try->jc->Repository->lookupClass->return->jc->isClass->catch->return->finally
ObjectType#referencesClassExact():::Return true if this type references a class, false if it references an interface.:::jc->Repository->lookupClass->return->jc->isClass
ObjectType#referencesInterfaceExact():::Return true if this type references an interface, false if it references a class.:::jc->Repository->lookupClass->return->jc->isClass
ObjectType#subclassOf(ObjectType):::Return true if this type is a subclass of given ObjectType.:::if->this->referencesInterfaceExact->superclass->referencesInterfaceExact->return->return->Repository->instanceOf
ObjectType#accessibleTo(ObjectType):::Java Virtual Machine Specification edition 2,  5.4.4 Access Control:::jc->Repository->lookupClass->if->jc->isPublic->return->acc->Repository->lookupClass->return->acc->getPackageName->jc->getPackageName->equals
POP#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitPopInstruction->v->visitStackInstruction->v->visitPOP
POP2#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitPopInstruction->v->visitStackInstruction->v->visitPOP2
PUSH#getInstructionList()::: h get instruction list:::return->new->InstructionList
PUSH#getInstruction()::: h get instruction:::return
PUSH#toString()::: h to string:::return
PUTFIELD#consumeStack(ConstantPoolGen)::: d consume stack:::return->getFieldSize
PUTFIELD#getExceptions()::: d get exceptions:::return->ExceptionConst->createExceptions
PUTFIELD#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackConsumer->v->visitPopInstruction->v->visitTypedInstruction->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitFieldInstruction->v->visitPUTFIELD
PUTSTATIC#consumeStack(ConstantPoolGen)::: c consume stack:::return->getFieldSize
PUTSTATIC#getExceptions()::: c get exceptions:::return->ExceptionConst->createExceptions
PUTSTATIC#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitStackConsumer->v->visitPopInstruction->v->visitTypedInstruction->v->visitLoadClass->v->visitCPInstruction->v->visitFieldOrMethod->v->visitFieldInstruction->v->visitPUTSTATIC
ReferenceType#isCastableTo(Type):::Return true iff this type is castable to another type t as defined in the JVM specification:::if->this->equals->return->return->isAssignmentCompatibleWith
ReferenceType#isAssignmentCompatibleWith(Type):::Return true iff this is assignment compatible with another type t as defined in the JVM specification; see the AASTORE definition there.:::if->return->T->if->this->equals->return->if->referencesClassExact->if->referencesClassExact->if->this->equals->return->if->Repository->getClassName->getClassName->instanceOf->return->if->referencesInterfaceExact->if->Repository->getClassName->getClassName->implementationOf->return->if->referencesInterfaceExact->if->referencesClassExact->if->T->equals->return->if->referencesInterfaceExact->if->this->equals->return->if->Repository->getClassName->getClassName->implementationOf->return->if->if->referencesClassExact->if->T->equals->return->if->sc->getElementType->tc->getElementType->if->sc->equals->return->if->isAssignmentCompatibleWith->return->if->referencesInterfaceExact->foreach->Const->getInterfacesImplementedByArrays->if->T->ObjectType->getInstance->equals->return->return
ReferenceType#getFirstCommonSuperclass(ReferenceType):::This commutative operation returns the first common superclass (narrowest ReferenceType referencing a class, not an interface):::if->this->equals->return->if->t->equals->return->if->this->equals->return->if->arrType1->arrType2->if->arrType1->getDimensions->arrType2->getDimensions->arrType1->getBasicType->arrType2->getBasicType->return->arrType1->getBasicType->arrType2->getBasicType->getFirstCommonSuperclass->arrType1->getDimensions->new->ArrayType->if->return->if->referencesInterfaceExact->referencesInterfaceExact->return->thiz->other->thiz_sups->Repository->thiz->getClassName->getSuperClasses->other_sups->Repository->other->getClassName->getSuperClasses->if->return->this_sups->new->JavaClassArr->t_sups->new->JavaClassArr->System->arraycopy->System->arraycopy->Repository->thiz->getClassName->lookupClass->Repository->other->getClassName->lookupClass->foreach->foreach->if->this_sup->equals->return->ObjectType->this_sup->getClassName->getInstance->return
ReferenceType#firstCommonSuperclass(ReferenceType):::This commutative operation returns the first common superclass (narrowest ReferenceType referencing a class, not an interface):::if->this->equals->return->if->t->equals->return->if->this->equals->return->if->return->if->referencesInterface->referencesInterface->return->thiz->other->thiz_sups->Repository->thiz->getClassName->getSuperClasses->other_sups->Repository->other->getClassName->getSuperClasses->if->return->this_sups->new->JavaClassArr->t_sups->new->JavaClassArr->System->arraycopy->System->arraycopy->Repository->thiz->getClassName->lookupClass->Repository->other->getClassName->lookupClass->foreach->foreach->if->this_sup->equals->return->ObjectType->this_sup->getClassName->getInstance->return
RET#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::if->out->writeByte->out->super->getOpcode->writeByte->if->out->writeShort->else->out->writeByte
RET#setWide()::: t set wide:::if->super->setLength->else->super->setLength
RET#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::if->bytes->readUnsignedShort->super->setLength->else->bytes->readUnsignedByte->super->setLength
RET#getIndex()::: t get index:::return
RET#setIndex(int):::Set index of local variable containg the return address:::if->throw->new->ClassGenException->setWide
RET#toString(boolean)::: t to string:::return->super->toString
RET#getType(ConstantPoolGen)::: t get type:::return
RET#accept(Visitor):::Call corresponding visitor method(s):::v->visitRET
RETURN#accept(Visitor):::Call corresponding visitor method(s):::v->visitExceptionThrower->v->visitTypedInstruction->v->visitStackConsumer->v->visitReturnInstruction->v->visitRETURN
ReturnaddressType#hashCode()::: returnaddress type hash code:::if->return->return->returnTarget->hashCode
ReturnaddressType#equals(Object):::Returns if the two Returnaddresses refer to the same target.:::if->return->that->if->return->return->equals
ReturnaddressType#getTarget()::: returnaddress type get target:::return
ReturnInstruction#getType()::: return instruction get type:::_opcode->super->getOpcode->switch->return->return->return->return->return->return->throw->new->ClassGenException
ReturnInstruction#getExceptions()::: return instruction get exceptions:::return->new->Class<?>Arr
ReturnInstruction#getType(ConstantPoolGen)::: return instruction get type:::return->getType
SALOAD#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackProducer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitSALOAD
SASTORE#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitExceptionThrower->v->visitTypedInstruction->v->visitArrayInstruction->v->visitSASTORE
Select#updatePosition(int, int):::Since this is a variable length instruction, it may shift the following instructions which then need to update their position:::getPosition->setPosition->old_length->super->getLength->getPosition->super->setLength->return->super->getLength
Select#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::out->super->getOpcode->writeByte->for->i->super->getTargetOffset->setIndex->out->super->getIndex->writeInt
Select#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::bytes->getIndex->for->i->super->bytes->readInt->setIndex
Select#toString(boolean)::: select to string:::buf->super->toString->new->StringBuilder->if->for->i->else->buf->append->return->buf->toString
Select#setTarget(int, InstructionHandle):::Set branch target for `i'th case:::notifyTarget
Select#updateTarget(InstructionHandle, InstructionHandle)::: select update target:::targeted->if->super->getTarget->setTarget->for->i->if->throw->new->ClassGenException
Select#containsTarget(InstructionHandle)::: select contains target:::if->super->getTarget->return->foreach->if->return->return
Select#clone()::: select clone:::copy->super->clone->match->clone->indices->clone->targets->clone->return
Select#dispose():::Inform targets that they're not targeted anymore.:::super->dispose->foreach->target2->removeTargeter
Select#getMatchs()::: select get matchs:::return
Select#getIndices()::: select get indices:::return
Select#getTargets()::: select get targets:::return
Select#getMatch(int)::: select get match:::return
Select#getIndices(int)::: select get indices:::return
Select#getTarget(int)::: select get target:::return
Select#getFixed_length()::: select get fixed_length:::return
Select#setFixed_length(int)::: select set fixed_length:::
Select#getMatch_length()::: select get match_length:::return
Select#setMatch_length(int)::: select set match_length:::return
Select#setMatch(int, int)::: select set match:::
Select#setIndices(int[])::: select set indices:::
Select#setMatches(int[])::: select set matches:::
Select#setTargets(InstructionHandle[])::: select set targets:::
Select#getPadding()::: select get padding:::return
Select#setIndices(int, int)::: select set indices:::return
SimpleElementValueGen#getElementValue():::Return immutable variant:::return->super->getElementValueType->getConstantPool->getConstantPool->new->SimpleElementValue
SimpleElementValueGen#getIndex()::: simple element value gen get index:::return
SimpleElementValueGen#getValueString()::: simple element value gen get value string:::if->super->getElementValueType->throw->new->RuntimeException->c->getConstantPool->getConstant->return->c->getBytes
SimpleElementValueGen#getValueInt()::: simple element value gen get value int:::if->super->getElementValueType->throw->new->RuntimeException->c->getConstantPool->getConstant->return->c->getBytes
SimpleElementValueGen#stringifyValue()::: simple element value gen stringify value:::switch->super->getElementValueType->c->getConstantPool->getConstant->return->Integer->c->getBytes->toString->j->getConstantPool->getConstant->return->Long->j->getBytes->toString->d->getConstantPool->getConstant->return->Double->d->getBytes->toString->f->getConstantPool->getConstant->return->Float->f->getBytes->toString->s->getConstantPool->getConstant->return->Integer->s->getBytes->toString->b->getConstantPool->getConstant->return->Integer->b->getBytes->toString->ch->getConstantPool->getConstant->return->Integer->ch->getBytes->toString->bo->getConstantPool->getConstant->if->bo->getBytes->return->return->cu8->getConstantPool->getConstant->return->cu8->getBytes->throw->super->getElementValueType->new->RuntimeException
SimpleElementValueGen#dump(DataOutputStream)::: simple element value gen dump:::dos->super->getElementValueType->writeByte->switch->super->getElementValueType->dos->writeShort->break->throw->super->getElementValueType->new->RuntimeException
SIPUSH#dump(DataOutputStream):::Dump instruction as short code to stream out.:::super->dump->out->writeShort
SIPUSH#toString(boolean)::: h to string:::return->super->toString
SIPUSH#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->setLength->bytes->readShort
SIPUSH#getValue()::: h get value:::return->Integer->valueOf
SIPUSH#getType(ConstantPoolGen)::: h get type:::return
SIPUSH#accept(Visitor):::Call corresponding visitor method(s):::v->visitPushInstruction->v->visitStackProducer->v->visitTypedInstruction->v->visitConstantPushInstruction->v->visitSIPUSH
StackConsumer#consumeStack(ConstantPoolGen)::: stack consumer consume stack:::
StackInstruction#getType(ConstantPoolGen)::: stack instruction get type:::return
StackProducer#produceStack(ConstantPoolGen)::: stack producer produce stack:::
StoreInstruction#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitPopInstruction->v->visitTypedInstruction->v->visitLocalVariableInstruction->v->visitStoreInstruction
SWAP#accept(Visitor):::Call corresponding visitor method(s):::v->visitStackConsumer->v->visitStackProducer->v->visitStackInstruction->v->visitSWAP
SWITCH#fillup(int, InstructionHandle)::: h fillup:::max_size->m_vec->new->intArr->t_vec->new->InstructionHandleArr->count->for->i->new->intArr->new->InstructionHandleArr->System->arraycopy->System->arraycopy
SWITCH#sort(int, int):::Sort match and targets array with QuickSort.:::i->j->h->m->h2->do->while->while->if->while->if->sort->if->sort
SWITCH#matchIsOrdered(int)::: h match is ordered:::for->i->return
SWITCH#getInstructionList()::: h get instruction list:::return->new->InstructionList
SWITCH#getInstruction()::: h get instruction:::return
TABLESWITCH#dump(DataOutputStream):::Dump instruction as byte code to stream out.:::super->dump->_match_length->getMatch_length->low->super->getMatch->out->writeInt->high->super->getMatch->out->writeInt->for->i
TABLESWITCH#initFromFile(ByteSequence, boolean):::Read needed data (e.g:::super->initFromFile->low->bytes->readInt->high->bytes->readInt->_match_length->setMatch_length->_fixed_length->setFixed_length->super->super->getPadding->setLength->super->new->intArr->setMatches->super->new->intArr->setIndices->super->new->InstructionHandleArr->setTargets->for->i
TABLESWITCH#accept(Visitor):::Call corresponding visitor method(s):::v->visitVariableLengthInstruction->v->visitStackConsumer->v->visitBranchInstruction->v->visitSelect->v->visitTABLESWITCH
TargetLostException#getTargets()::: target lost exception get targets:::return
Type#hashCode()::: type hash code:::return->signature->hashCode
Type#equals(Object)::: type equals:::if->t->return->signature->equals->return
Type#getSignature()::: type get signature:::return
Type#getType()::: type get type:::return
Type#normalizeForStackOrLocal():::boolean, short and char variable are considered as int in the stack or local variable area:::if->return->return
Type#getSize()::: type get size:::switch->return->return->return
Type#toString()::: type to string:::return->this->equals->Utility->signatureToString
Type#getMethodSignature(Type, Type[]):::Convert type to Java method signature, e.g:::buf->new->StringBuilder->if->foreach->buf->arg_type->getSignature->append->buf->append->buf->return_type->getSignature->append->return->buf->toString
Type#unwrap(ThreadLocal)::: type unwrap:::return->tl->get->intValue
Type#wrap(ThreadLocal, int)::: type wrap:::tl->Integer->valueOf->set
Type#getType(String)::: type get type:::type->Utility->typeOfSignature->if->wrap->return->BasicType->getType->else->if->dim->do->while->signature->charAt->t->signature->substring->getType->_temp->unwrap->wrap->return->new->ArrayType->else->parsedSignature->Utility->signatureToString->parsedSignature->length->wrap->return->ObjectType->parsedSignature->replace->getInstance
Type#getReturnType(String):::Convert return value of a method (signature) to a Type object.:::try->index->signature->lastIndexOf->return->signature->substring->getType->catch->throw->new->ClassFormatException->finally
Type#getArgumentTypes(String):::Convert arguments of a method (signature) to an array of Type objects.:::vec->new->ArrayList<>->index->types->try->if->signature->charAt->throw->new->ClassFormatException->while->signature->charAt->vec->signature->substring->getType->add->unwrap->catch->throw->new->ClassFormatException->finally->vec->size->new->TypeArr->vec->toArray->return
Type#getType(java.lang.Class):::Convert runtime java.lang.Class to BCEL Type object.:::if->throw->new->IllegalArgumentException->if->cl->isArray->return->cl->getName->getType->else->if->cl->isPrimitive->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->throw->new->IllegalStateException->else->return->ObjectType->cl->getName->getInstance
Type#getTypes(java.lang.Class[]):::Convert runtime java.lang.Class[] to BCEL Type objects.:::ret->new->TypeArr->for->i->return
Type#getSignature(java.lang.reflect.Method)::: type get signature:::sb->new->StringBuilder->params->meth->getParameterTypes->foreach->sb->getType->getSignature->append->sb->append->sb->meth->getReturnType->getType->getSignature->append->return->sb->toString
Type#size(int)::: type size:::return
Type#consumed(int)::: type consumed:::return
Type#encode(int, int)::: type encode:::return
Type#getArgumentTypesSize(String)::: type get argument types size:::res->index->try->if->signature->charAt->throw->new->ClassFormatException->while->signature->charAt->coded->signature->substring->getTypeSize->size->consumed->catch->throw->new->ClassFormatException->finally->return
Type#getTypeSize(String)::: type get type size:::type->Utility->typeOfSignature->if->return->BasicType->getType->getSize->encode->else->if->dim->do->while->signature->charAt->consumed->signature->substring->getTypeSize->consumed->return->encode->else->index->signature->indexOf->if->throw->new->ClassFormatException->return->encode
Type#getReturnTypeSize(String)::: type get return type size:::index->signature->lastIndexOf->return->Type->signature->substring->getTypeSize->size
Type#setSignature(String)::: type set signature:::
TypedInstruction#getType(ConstantPoolGen)::: typed instruction get type:::
Visitor#visitStackInstruction(StackInstruction)::: visitor visit stack instruction:::
Visitor#visitLocalVariableInstruction(LocalVariableInstruction)::: visitor visit local variable instruction:::
Visitor#visitBranchInstruction(BranchInstruction)::: visitor visit branch instruction:::
Visitor#visitLoadClass(LoadClass)::: visitor visit load class:::
Visitor#visitFieldInstruction(FieldInstruction)::: visitor visit field instruction:::
Visitor#visitIfInstruction(IfInstruction)::: visitor visit if instruction:::
Visitor#visitConversionInstruction(ConversionInstruction)::: visitor visit conversion instruction:::
Visitor#visitPopInstruction(PopInstruction)::: visitor visit pop instruction:::
Visitor#visitStoreInstruction(StoreInstruction)::: visitor visit store instruction:::
Visitor#visitTypedInstruction(TypedInstruction)::: visitor visit typed instruction:::
Visitor#visitSelect(Select)::: visitor visit select:::
Visitor#visitJsrInstruction(JsrInstruction)::: visitor visit jsr instruction:::
Visitor#visitGotoInstruction(GotoInstruction)::: visitor visit goto instruction:::
Visitor#visitUnconditionalBranch(UnconditionalBranch)::: visitor visit unconditional branch:::
Visitor#visitPushInstruction(PushInstruction)::: visitor visit push instruction:::
Visitor#visitArithmeticInstruction(ArithmeticInstruction)::: visitor visit arithmetic instruction:::
Visitor#visitCPInstruction(CPInstruction)::: visitor visit instruction:::
Visitor#visitInvokeInstruction(InvokeInstruction)::: visitor visit invoke instruction:::
Visitor#visitArrayInstruction(ArrayInstruction)::: visitor visit array instruction:::
Visitor#visitAllocationInstruction(AllocationInstruction)::: visitor visit allocation instruction:::
Visitor#visitReturnInstruction(ReturnInstruction)::: visitor visit return instruction:::
Visitor#visitFieldOrMethod(FieldOrMethod)::: visitor visit field or method:::
Visitor#visitConstantPushInstruction(ConstantPushInstruction)::: visitor visit constant push instruction:::
Visitor#visitExceptionThrower(ExceptionThrower)::: visitor visit exception thrower:::
Visitor#visitLoadInstruction(LoadInstruction)::: visitor visit load instruction:::
Visitor#visitVariableLengthInstruction(VariableLengthInstruction)::: visitor visit variable length instruction:::
Visitor#visitStackProducer(StackProducer)::: visitor visit stack producer:::
Visitor#visitStackConsumer(StackConsumer)::: visitor visit stack consumer:::
Visitor#visitACONST_NULL(ACONST_NULL)::: visitor visit t_ l:::
Visitor#visitGETSTATIC(GETSTATIC)::: visitor visit c:::
Visitor#visitIF_ICMPLT(IF_ICMPLT)::: visitor visit f_ t:::
Visitor#visitMONITOREXIT(MONITOREXIT)::: visitor visit t:::
Visitor#visitIFLT(IFLT)::: visitor visit t:::
Visitor#visitLSTORE(LSTORE)::: visitor visit e:::
Visitor#visitPOP2(POP2)::: visitor visit p2:::
Visitor#visitBASTORE(BASTORE)::: visitor visit e:::
Visitor#visitISTORE(ISTORE)::: visitor visit e:::
Visitor#visitCHECKCAST(CHECKCAST)::: visitor visit t:::
Visitor#visitFCMPG(FCMPG)::: visitor visit g:::
Visitor#visitI2F(I2F)::: visitor visit i2 f:::
Visitor#visitATHROW(ATHROW)::: visitor visit w:::
Visitor#visitDCMPL(DCMPL)::: visitor visit l:::
Visitor#visitARRAYLENGTH(ARRAYLENGTH)::: visitor visit h:::
Visitor#visitDUP(DUP)::: visitor visit p:::
Visitor#visitINVOKESTATIC(INVOKESTATIC)::: visitor visit c:::
Visitor#visitLCONST(LCONST)::: visitor visit t:::
Visitor#visitDREM(DREM)::: visitor visit m:::
Visitor#visitIFGE(IFGE)::: visitor visit e:::
Visitor#visitCALOAD(CALOAD)::: visitor visit d:::
Visitor#visitLASTORE(LASTORE)::: visitor visit e:::
Visitor#visitI2D(I2D)::: visitor visit i2 d:::
Visitor#visitDADD(DADD)::: visitor visit d:::
Visitor#visitINVOKESPECIAL(INVOKESPECIAL)::: visitor visit l:::
Visitor#visitIAND(IAND)::: visitor visit d:::
Visitor#visitPUTFIELD(PUTFIELD)::: visitor visit d:::
Visitor#visitILOAD(ILOAD)::: visitor visit d:::
Visitor#visitDLOAD(DLOAD)::: visitor visit d:::
Visitor#visitDCONST(DCONST)::: visitor visit t:::
Visitor#visitNEW(NEW)::: visitor visit w:::
Visitor#visitIFNULL(IFNULL)::: visitor visit l:::
Visitor#visitLSUB(LSUB)::: visitor visit b:::
Visitor#visitL2I(L2I)::: visitor visit l2 i:::
Visitor#visitISHR(ISHR)::: visitor visit r:::
Visitor#visitTABLESWITCH(TABLESWITCH)::: visitor visit h:::
Visitor#visitIINC(IINC)::: visitor visit c:::
Visitor#visitDRETURN(DRETURN)::: visitor visit n:::
Visitor#visitFSTORE(FSTORE)::: visitor visit e:::
Visitor#visitDASTORE(DASTORE)::: visitor visit e:::
Visitor#visitIALOAD(IALOAD)::: visitor visit d:::
Visitor#visitDDIV(DDIV)::: visitor visit v:::
Visitor#visitIF_ICMPGE(IF_ICMPGE)::: visitor visit f_ e:::
Visitor#visitLAND(LAND)::: visitor visit d:::
Visitor#visitIDIV(IDIV)::: visitor visit v:::
Visitor#visitLOR(LOR)::: visitor visit r:::
Visitor#visitCASTORE(CASTORE)::: visitor visit e:::
Visitor#visitFREM(FREM)::: visitor visit m:::
Visitor#visitLDC(LDC)::: visitor visit c:::
Visitor#visitBIPUSH(BIPUSH)::: visitor visit h:::
Visitor#visitDSTORE(DSTORE)::: visitor visit e:::
Visitor#visitF2L(F2L)::: visitor visit f2 l:::
Visitor#visitFMUL(FMUL)::: visitor visit l:::
Visitor#visitLLOAD(LLOAD)::: visitor visit d:::
Visitor#visitJSR(JSR)::: visitor visit r:::
Visitor#visitFSUB(FSUB)::: visitor visit b:::
Visitor#visitSASTORE(SASTORE)::: visitor visit e:::
Visitor#visitALOAD(ALOAD)::: visitor visit d:::
Visitor#visitDUP2_X2(DUP2_X2)::: visitor visit p2_ x2:::
Visitor#visitRETURN(RETURN)::: visitor visit n:::
Visitor#visitDALOAD(DALOAD)::: visitor visit d:::
Visitor#visitSIPUSH(SIPUSH)::: visitor visit h:::
Visitor#visitDSUB(DSUB)::: visitor visit b:::
Visitor#visitL2F(L2F)::: visitor visit l2 f:::
Visitor#visitIF_ICMPGT(IF_ICMPGT)::: visitor visit f_ t:::
Visitor#visitF2D(F2D)::: visitor visit f2 d:::
Visitor#visitI2L(I2L)::: visitor visit i2 l:::
Visitor#visitIF_ACMPNE(IF_ACMPNE)::: visitor visit f_ e:::
Visitor#visitPOP(POP)::: visitor visit p:::
Visitor#visitI2S(I2S)::: visitor visit i2 s:::
Visitor#visitIFEQ(IFEQ)::: visitor visit q:::
Visitor#visitSWAP(SWAP)::: visitor visit p:::
Visitor#visitIOR(IOR)::: visitor visit r:::
Visitor#visitIREM(IREM)::: visitor visit m:::
Visitor#visitIASTORE(IASTORE)::: visitor visit e:::
Visitor#visitNEWARRAY(NEWARRAY)::: visitor visit y:::
Visitor#visitINVOKEINTERFACE(INVOKEINTERFACE)::: visitor visit e:::
Visitor#visitINEG(INEG)::: visitor visit g:::
Visitor#visitLCMP(LCMP)::: visitor visit p:::
Visitor#visitJSR_W(JSR_W)::: visitor visit r_ w:::
Visitor#visitMULTIANEWARRAY(MULTIANEWARRAY)::: visitor visit y:::
Visitor#visitDUP_X2(DUP_X2)::: visitor visit p_ x2:::
Visitor#visitSALOAD(SALOAD)::: visitor visit d:::
Visitor#visitIFNONNULL(IFNONNULL)::: visitor visit l:::
Visitor#visitDMUL(DMUL)::: visitor visit l:::
Visitor#visitIFNE(IFNE)::: visitor visit e:::
Visitor#visitIF_ICMPLE(IF_ICMPLE)::: visitor visit f_ e:::
Visitor#visitLDC2_W(LDC2_W)::: visitor visit c2_ w:::
Visitor#visitGETFIELD(GETFIELD)::: visitor visit d:::
Visitor#visitLADD(LADD)::: visitor visit d:::
Visitor#visitNOP(NOP)::: visitor visit p:::
Visitor#visitFALOAD(FALOAD)::: visitor visit d:::
Visitor#visitINSTANCEOF(INSTANCEOF)::: visitor visit f:::
Visitor#visitIFLE(IFLE)::: visitor visit e:::
Visitor#visitLXOR(LXOR)::: visitor visit r:::
Visitor#visitLRETURN(LRETURN)::: visitor visit n:::
Visitor#visitFCONST(FCONST)::: visitor visit t:::
Visitor#visitIUSHR(IUSHR)::: visitor visit r:::
Visitor#visitBALOAD(BALOAD)::: visitor visit d:::
Visitor#visitDUP2(DUP2)::: visitor visit p2:::
Visitor#visitIF_ACMPEQ(IF_ACMPEQ)::: visitor visit f_ q:::
Visitor#visitIMPDEP1(IMPDEP1)::: visitor visit p1:::
Visitor#visitMONITORENTER(MONITORENTER)::: visitor visit r:::
Visitor#visitLSHL(LSHL)::: visitor visit l:::
Visitor#visitDCMPG(DCMPG)::: visitor visit g:::
Visitor#visitD2L(D2L)::: visitor visit d2 l:::
Visitor#visitIMPDEP2(IMPDEP2)::: visitor visit p2:::
Visitor#visitL2D(L2D)::: visitor visit l2 d:::
Visitor#visitRET(RET)::: visitor visit t:::
Visitor#visitIFGT(IFGT)::: visitor visit t:::
Visitor#visitIXOR(IXOR)::: visitor visit r:::
Visitor#visitINVOKEVIRTUAL(INVOKEVIRTUAL)::: visitor visit l:::
Visitor#visitINVOKEDYNAMIC(INVOKEDYNAMIC)::: visitor visit c:::
Visitor#visitFASTORE(FASTORE)::: visitor visit e:::
Visitor#visitIRETURN(IRETURN)::: visitor visit n:::
Visitor#visitIF_ICMPNE(IF_ICMPNE)::: visitor visit f_ e:::
Visitor#visitFLOAD(FLOAD)::: visitor visit d:::
Visitor#visitLDIV(LDIV)::: visitor visit v:::
Visitor#visitPUTSTATIC(PUTSTATIC)::: visitor visit c:::
Visitor#visitAALOAD(AALOAD)::: visitor visit d:::
Visitor#visitD2I(D2I)::: visitor visit d2 i:::
Visitor#visitIF_ICMPEQ(IF_ICMPEQ)::: visitor visit f_ q:::
Visitor#visitAASTORE(AASTORE)::: visitor visit e:::
Visitor#visitARETURN(ARETURN)::: visitor visit n:::
Visitor#visitDUP2_X1(DUP2_X1)::: visitor visit p2_ x1:::
Visitor#visitFNEG(FNEG)::: visitor visit g:::
Visitor#visitGOTO_W(GOTO_W)::: visitor visit o_ w:::
Visitor#visitD2F(D2F)::: visitor visit d2 f:::
Visitor#visitGOTO(GOTO)::: visitor visit o:::
Visitor#visitISUB(ISUB)::: visitor visit b:::
Visitor#visitF2I(F2I)::: visitor visit f2 i:::
Visitor#visitDNEG(DNEG)::: visitor visit g:::
Visitor#visitICONST(ICONST)::: visitor visit t:::
Visitor#visitFDIV(FDIV)::: visitor visit v:::
Visitor#visitI2B(I2B)::: visitor visit i2 b:::
Visitor#visitLNEG(LNEG)::: visitor visit g:::
Visitor#visitLREM(LREM)::: visitor visit m:::
Visitor#visitIMUL(IMUL)::: visitor visit l:::
Visitor#visitIADD(IADD)::: visitor visit d:::
Visitor#visitLSHR(LSHR)::: visitor visit r:::
Visitor#visitLOOKUPSWITCH(LOOKUPSWITCH)::: visitor visit h:::
Visitor#visitDUP_X1(DUP_X1)::: visitor visit p_ x1:::
Visitor#visitFCMPL(FCMPL)::: visitor visit l:::
Visitor#visitI2C(I2C)::: visitor visit i2 c:::
Visitor#visitLMUL(LMUL)::: visitor visit l:::
Visitor#visitLUSHR(LUSHR)::: visitor visit r:::
Visitor#visitISHL(ISHL)::: visitor visit l:::
Visitor#visitLALOAD(LALOAD)::: visitor visit d:::
Visitor#visitASTORE(ASTORE)::: visitor visit e:::
Visitor#visitANEWARRAY(ANEWARRAY)::: visitor visit y:::
Visitor#visitFRETURN(FRETURN)::: visitor visit n:::
Visitor#visitFADD(FADD)::: visitor visit d:::
Visitor#visitBREAKPOINT(BREAKPOINT)::: visitor visit t:::

com.sun.org.apache.bcel.internal.generic.AALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.AASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ACONST_NULL#getType(ConstantPoolGen)->Type::: t_ l get type
com.sun.org.apache.bcel.internal.generic.ACONST_NULL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ANEWARRAY#getExceptions()->Class[]::: y get exceptions
com.sun.org.apache.bcel.internal.generic.ANEWARRAY#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ANEWARRAY#getLoadClassType(ConstantPoolGen)->ObjectType::: y get load class type
com.sun.org.apache.bcel.internal.generic.AnnotationElementValueGen#dump(DataOutputStream)->void::: annotation element value gen dump
com.sun.org.apache.bcel.internal.generic.AnnotationElementValueGen#stringifyValue()->String::: annotation element value gen stringify value
com.sun.org.apache.bcel.internal.generic.AnnotationElementValueGen#getElementValue()->ElementValue:::Return immutable variant of this AnnotationElementValueGen
com.sun.org.apache.bcel.internal.generic.AnnotationElementValueGen#getAnnotation()->AnnotationEntryGen::: annotation element value gen get annotation
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getAnnotation()->AnnotationEntry:::Retrieve an immutable version of this AnnotationGen
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#read(DataInput, ConstantPoolGen, boolean)->AnnotationEntryGen::: annotation entry gen read
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#dump(DataOutputStream)->void::: annotation entry gen dump
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#addElementNameValuePair(ElementValuePairGen)->void::: annotation entry gen add element name value pair
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getTypeIndex()->int::: annotation entry gen get type index
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getTypeSignature()->String::: annotation entry gen get type signature
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getTypeName()->String::: annotation entry gen get type name
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getValues()->List:::Returns list of ElementNameValuePair objects
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#toString()->String::: annotation entry gen to string
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#toShortString()->String::: annotation entry gen to short string
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#isRuntimeVisible()->boolean::: annotation entry gen is runtime visible
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getAnnotationAttributes(ConstantPoolGen, AnnotationEntryGen[])->Attribute[]:::Converts a list of AnnotationGen objects into a set of attributes that can be attached to the class file.
com.sun.org.apache.bcel.internal.generic.AnnotationEntryGen#getParameterAnnotationAttributes(ConstantPoolGen, List[])->Attribute[]:::Annotations against a class are stored in one of four attribute kinds: - RuntimeVisibleParameterAnnotations - RuntimeInvisibleParameterAnnotations
com.sun.org.apache.bcel.internal.generic.ARETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ArithmeticInstruction#getType(ConstantPoolGen)->Type::: arithmetic instruction get type
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#getElementValue()->ElementValue:::Return immutable variant of this ArrayElementValueGen
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#dump(DataOutputStream)->void::: array element value gen dump
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#stringifyValue()->String::: array element value gen stringify value
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#getElementValues()->List::: array element value gen get element values
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#getElementValuesSize()->int::: array element value gen get element values size
com.sun.org.apache.bcel.internal.generic.ArrayElementValueGen#addElement(ElementValueGen)->void::: array element value gen add element
com.sun.org.apache.bcel.internal.generic.ArrayInstruction#getExceptions()->Class[]::: array instruction get exceptions
com.sun.org.apache.bcel.internal.generic.ArrayInstruction#getType(ConstantPoolGen)->Type::: array instruction get type
com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH#getExceptions()->Class[]::: h get exceptions
com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ArrayType#getBasicType()->Type::: array type get basic type
com.sun.org.apache.bcel.internal.generic.ArrayType#getElementType()->Type::: array type get element type
com.sun.org.apache.bcel.internal.generic.ArrayType#getDimensions()->int::: array type get dimensions
com.sun.org.apache.bcel.internal.generic.ArrayType#hashCode()->int::: array type hash code
com.sun.org.apache.bcel.internal.generic.ArrayType#equals(Object)->boolean::: array type equals
com.sun.org.apache.bcel.internal.generic.ASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ATHROW#getExceptions()->Class[]::: w get exceptions
com.sun.org.apache.bcel.internal.generic.ATHROW#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.BALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.BasicType#getType(byte)->BasicType::: basic type get type
com.sun.org.apache.bcel.internal.generic.BasicType#hashCode()->int::: basic type hash code
com.sun.org.apache.bcel.internal.generic.BasicType#equals(Object)->boolean::: basic type equals
com.sun.org.apache.bcel.internal.generic.BASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.BIPUSH#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.BIPUSH#toString(boolean)->String::: h to string
com.sun.org.apache.bcel.internal.generic.BIPUSH#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.BIPUSH#getValue()->Number::: h get value
com.sun.org.apache.bcel.internal.generic.BIPUSH#getType(ConstantPoolGen)->Type::: h get type
com.sun.org.apache.bcel.internal.generic.BIPUSH#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.BranchHandle#getBranchHandle(BranchInstruction)->BranchHandle:::Factory method.
com.sun.org.apache.bcel.internal.generic.BranchHandle#getPosition()->int::: branch handle get position
com.sun.org.apache.bcel.internal.generic.BranchHandle#setPosition(int)->void::: branch handle set position
com.sun.org.apache.bcel.internal.generic.BranchHandle#updatePosition(int, int)->int::: branch handle update position
com.sun.org.apache.bcel.internal.generic.BranchHandle#setTarget(InstructionHandle)->void:::Pass new target to instruction.
com.sun.org.apache.bcel.internal.generic.BranchHandle#updateTarget(InstructionHandle, InstructionHandle)->void:::Update target of instruction.
com.sun.org.apache.bcel.internal.generic.BranchHandle#getTarget()->InstructionHandle::: branch handle get target
com.sun.org.apache.bcel.internal.generic.BranchHandle#setInstruction(Instruction)->void:::Set new contents
com.sun.org.apache.bcel.internal.generic.BranchInstruction#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.BranchInstruction#getTargetOffset(InstructionHandle)->int::: branch instruction get target offset
com.sun.org.apache.bcel.internal.generic.BranchInstruction#getTargetOffset()->int::: branch instruction get target offset
com.sun.org.apache.bcel.internal.generic.BranchInstruction#updatePosition(int, int)->int:::Called by InstructionList.setPositions when setting the position for every instruction
com.sun.org.apache.bcel.internal.generic.BranchInstruction#toString(boolean)->String:::Long output format:  &lt;position in byte code&gt; &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt;target instruction&gt;"&gt;" "@"&lt;branch target offset&gt;
com.sun.org.apache.bcel.internal.generic.BranchInstruction#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.BranchInstruction#getIndex()->int::: branch instruction get index
com.sun.org.apache.bcel.internal.generic.BranchInstruction#getTarget()->InstructionHandle::: branch instruction get target
com.sun.org.apache.bcel.internal.generic.BranchInstruction#setTarget(InstructionHandle)->void:::Set branch target
com.sun.org.apache.bcel.internal.generic.BranchInstruction#notifyTarget(InstructionHandle, InstructionHandle, InstructionTargeter)->void:::Used by BranchInstruction, LocalVariableGen, CodeExceptionGen, LineNumberGen
com.sun.org.apache.bcel.internal.generic.BranchInstruction#updateTarget(InstructionHandle, InstructionHandle)->void::: branch instruction update target
com.sun.org.apache.bcel.internal.generic.BranchInstruction#containsTarget(InstructionHandle)->boolean::: branch instruction contains target
com.sun.org.apache.bcel.internal.generic.BranchInstruction#dispose()->void:::Inform target that it's not targeted anymore.
com.sun.org.apache.bcel.internal.generic.BranchInstruction#getPosition()->int::: branch instruction get position
com.sun.org.apache.bcel.internal.generic.BranchInstruction#setPosition(int)->void::: branch instruction set position
com.sun.org.apache.bcel.internal.generic.BranchInstruction#setIndex(int)->void::: branch instruction set index
com.sun.org.apache.bcel.internal.generic.BREAKPOINT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.CALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.CASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.CHECKCAST#getExceptions()->Class[]::: t get exceptions
com.sun.org.apache.bcel.internal.generic.CHECKCAST#getLoadClassType(ConstantPoolGen)->ObjectType::: t get load class type
com.sun.org.apache.bcel.internal.generic.CHECKCAST#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ClassElementValueGen#getElementValue()->ElementValue:::Return immutable variant of this ClassElementValueGen
com.sun.org.apache.bcel.internal.generic.ClassElementValueGen#getIndex()->int::: class element value gen get index
com.sun.org.apache.bcel.internal.generic.ClassElementValueGen#getClassString()->String::: class element value gen get class string
com.sun.org.apache.bcel.internal.generic.ClassElementValueGen#stringifyValue()->String::: class element value gen stringify value
com.sun.org.apache.bcel.internal.generic.ClassElementValueGen#dump(DataOutputStream)->void::: class element value gen dump
com.sun.org.apache.bcel.internal.generic.ClassGen#getJavaClass()->JavaClass::: class gen get java class
com.sun.org.apache.bcel.internal.generic.ClassGen#addInterface(String)->void:::Add an interface to this class, i.e., this class has to implement it.
com.sun.org.apache.bcel.internal.generic.ClassGen#removeInterface(String)->void:::Remove an interface from this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#getMajor()->int::: class gen get major
com.sun.org.apache.bcel.internal.generic.ClassGen#setMajor(int)->void:::Set major version number of class file, default value is 45 (JDK 1.1)
com.sun.org.apache.bcel.internal.generic.ClassGen#setMinor(int)->void:::Set minor version number of class file, default value is 3 (JDK 1.1)
com.sun.org.apache.bcel.internal.generic.ClassGen#getMinor()->int::: class gen get minor
com.sun.org.apache.bcel.internal.generic.ClassGen#addAttribute(Attribute)->void:::Add an attribute to this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#addAnnotationEntry(AnnotationEntryGen)->void::: class gen add annotation entry
com.sun.org.apache.bcel.internal.generic.ClassGen#addMethod(Method)->void:::Add a method to this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#addEmptyConstructor(int)->void:::Convenience method
com.sun.org.apache.bcel.internal.generic.ClassGen#addField(Field)->void:::Add a field to this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#containsField(Field)->boolean::: class gen contains field
com.sun.org.apache.bcel.internal.generic.ClassGen#containsField(String)->Field::: class gen contains field
com.sun.org.apache.bcel.internal.generic.ClassGen#containsMethod(String, String)->Method::: class gen contains method
com.sun.org.apache.bcel.internal.generic.ClassGen#removeAttribute(Attribute)->void:::Remove an attribute from this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#removeMethod(Method)->void:::Remove a method from this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#replaceMethod(Method, Method)->void:::Replace given method with new one
com.sun.org.apache.bcel.internal.generic.ClassGen#replaceField(Field, Field)->void:::Replace given field with new one
com.sun.org.apache.bcel.internal.generic.ClassGen#removeField(Field)->void:::Remove a field to this class.
com.sun.org.apache.bcel.internal.generic.ClassGen#getClassName()->String::: class gen get class name
com.sun.org.apache.bcel.internal.generic.ClassGen#getSuperclassName()->String::: class gen get superclass name
com.sun.org.apache.bcel.internal.generic.ClassGen#getFileName()->String::: class gen get file name
com.sun.org.apache.bcel.internal.generic.ClassGen#setClassName(String)->void::: class gen set class name
com.sun.org.apache.bcel.internal.generic.ClassGen#setSuperclassName(String)->void::: class gen set superclass name
com.sun.org.apache.bcel.internal.generic.ClassGen#getMethods()->Method[]::: class gen get methods
com.sun.org.apache.bcel.internal.generic.ClassGen#setMethods(Method[])->void::: class gen set methods
com.sun.org.apache.bcel.internal.generic.ClassGen#setMethodAt(Method, int)->void::: class gen set method at
com.sun.org.apache.bcel.internal.generic.ClassGen#getMethodAt(int)->Method::: class gen get method at
com.sun.org.apache.bcel.internal.generic.ClassGen#getInterfaceNames()->String[]::: class gen get interface names
com.sun.org.apache.bcel.internal.generic.ClassGen#getInterfaces()->int[]::: class gen get interfaces
com.sun.org.apache.bcel.internal.generic.ClassGen#getFields()->Field[]::: class gen get fields
com.sun.org.apache.bcel.internal.generic.ClassGen#getAttributes()->Attribute[]::: class gen get attributes
com.sun.org.apache.bcel.internal.generic.ClassGen#getAnnotationEntries()->AnnotationEntryGen[]::: class gen get annotation entries
com.sun.org.apache.bcel.internal.generic.ClassGen#getConstantPool()->ConstantPoolGen::: class gen get constant pool
com.sun.org.apache.bcel.internal.generic.ClassGen#setConstantPool(ConstantPoolGen)->void::: class gen set constant pool
com.sun.org.apache.bcel.internal.generic.ClassGen#setClassNameIndex(int)->void::: class gen set class name index
com.sun.org.apache.bcel.internal.generic.ClassGen#setSuperclassNameIndex(int)->void::: class gen set superclass name index
com.sun.org.apache.bcel.internal.generic.ClassGen#getSuperclassNameIndex()->int::: class gen get superclass name index
com.sun.org.apache.bcel.internal.generic.ClassGen#getClassNameIndex()->int::: class gen get class name index
com.sun.org.apache.bcel.internal.generic.ClassGen#addObserver(ClassObserver)->void:::Add observer for this object.
com.sun.org.apache.bcel.internal.generic.ClassGen#removeObserver(ClassObserver)->void:::Remove observer for this object.
com.sun.org.apache.bcel.internal.generic.ClassGen#update()->void:::Call notify() method on all observers
com.sun.org.apache.bcel.internal.generic.ClassGen#clone()->Object::: class gen clone
com.sun.org.apache.bcel.internal.generic.ClassGen#getComparator()->BCELComparator::: class gen get comparator
com.sun.org.apache.bcel.internal.generic.ClassGen#setComparator(BCELComparator)->void::: class gen set comparator
com.sun.org.apache.bcel.internal.generic.ClassGen#equals(Object)->boolean:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.ClassGen#hashCode()->int:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.ClassObserver#notify(ClassGen)->void::: class observer notify
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#getCodeException(ConstantPoolGen)->CodeException:::Get CodeException object.<BR>  This relies on that the instruction list has already been dumped to byte code or or that the `setPositions' methods has been called for the instruction list.
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#setStartPC(InstructionHandle)->void::: code exception gen set start c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#setEndPC(InstructionHandle)->void::: code exception gen set end c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#setHandlerPC(InstructionHandle)->void::: code exception gen set handler c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#updateTarget(InstructionHandle, InstructionHandle)->void::: code exception gen update target
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#containsTarget(InstructionHandle)->boolean::: code exception gen contains target
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#setCatchType(ObjectType)->void:::Sets the type of the Exception to catch
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#getCatchType()->ObjectType:::Gets the type of the Exception to catch, 'null' for ANY.
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#getStartPC()->InstructionHandle::: code exception gen get start c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#getEndPC()->InstructionHandle::: code exception gen get end c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#getHandlerPC()->InstructionHandle::: code exception gen get handler c
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#toString()->String::: code exception gen to string
com.sun.org.apache.bcel.internal.generic.CodeExceptionGen#clone()->Object::: code exception gen clone
com.sun.org.apache.bcel.internal.generic.CompoundInstruction#getInstructionList()->InstructionList::: compound instruction get instruction list
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#adjustSize()->void:::Resize internal array of constants.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupString(String)->int:::Look for ConstantString in ConstantPool containing String `str'.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addString(String)->int:::Add a new String constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupClass(String)->int:::Look for ConstantClass in ConstantPool named `str'.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addClass(String)->int:::Add a new Class reference to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addClass(ObjectType)->int:::Add a new Class reference to the ConstantPool for a given type.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addArrayClass(ArrayType)->int:::Add a reference to an array class (e.g
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupInteger(int)->int:::Look for ConstantInteger in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addInteger(int)->int:::Add a new Integer constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupFloat(float)->int:::Look for ConstantFloat in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addFloat(float)->int:::Add a new Float constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupUtf8(String)->int:::Look for ConstantUtf8 in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addUtf8(String)->int:::Add a new Utf8 constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupLong(long)->int:::Look for ConstantLong in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addLong(long)->int:::Add a new long constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupDouble(double)->int:::Look for ConstantDouble in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addDouble(double)->int:::Add a new double constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupNameAndType(String, String)->int:::Look for ConstantNameAndType in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addNameAndType(String, String)->int:::Add a new NameAndType constant to the ConstantPool if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupMethodref(String, String, String)->int:::Look for ConstantMethodref in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupMethodref(MethodGen)->int::: constant pool gen lookup methodref
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addMethodref(String, String, String)->int:::Add a new Methodref constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addMethodref(MethodGen)->int::: constant pool gen add methodref
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupInterfaceMethodref(String, String, String)->int:::Look for ConstantInterfaceMethodref in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupInterfaceMethodref(MethodGen)->int::: constant pool gen lookup interface methodref
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addInterfaceMethodref(String, String, String)->int:::Add a new InterfaceMethodref constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addInterfaceMethodref(MethodGen)->int::: constant pool gen add interface methodref
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#lookupFieldref(String, String, String)->int:::Look for ConstantFieldref in ConstantPool.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addFieldref(String, String, String)->int:::Add a new Fieldref constant to the ConstantPool, if it is not already in there.
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#getConstant(int)->Constant::: constant pool gen get constant
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#setConstant(int, Constant)->void:::Use with care!
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#getConstantPool()->ConstantPool::: constant pool gen get constant pool
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#getSize()->int::: constant pool gen get size
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#getFinalConstantPool()->ConstantPool::: constant pool gen get final constant pool
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#toString()->String::: constant pool gen to string
com.sun.org.apache.bcel.internal.generic.ConstantPoolGen#addConstant(Constant, ConstantPoolGen)->int:::Import constant from another ConstantPool and return new index.
com.sun.org.apache.bcel.internal.generic.ConstantPushInstruction#getValue()->Number::: constant push instruction get value
com.sun.org.apache.bcel.internal.generic.ConversionInstruction#getType(ConstantPoolGen)->Type::: conversion instruction get type
com.sun.org.apache.bcel.internal.generic.CPInstruction#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.CPInstruction#toString(boolean)->String:::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; constant pool index&gt;"&gt;"
com.sun.org.apache.bcel.internal.generic.CPInstruction#toString(ConstantPool)->String::: instruction to string
com.sun.org.apache.bcel.internal.generic.CPInstruction#initFromFile(ByteSequence, boolean)->void:::Read needed data (i.e., index) from file.
com.sun.org.apache.bcel.internal.generic.CPInstruction#getIndex()->int::: instruction get index
com.sun.org.apache.bcel.internal.generic.CPInstruction#setIndex(int)->void:::Set the index to constant pool.
com.sun.org.apache.bcel.internal.generic.CPInstruction#getType(ConstantPoolGen)->Type::: instruction get type
com.sun.org.apache.bcel.internal.generic.D2F#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.D2I#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.D2L#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DADD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DCMPG#getType(ConstantPoolGen)->Type::: g get type
com.sun.org.apache.bcel.internal.generic.DCMPG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DCMPL#getType(ConstantPoolGen)->Type::: l get type
com.sun.org.apache.bcel.internal.generic.DCMPL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DCONST#getValue()->Number::: t get value
com.sun.org.apache.bcel.internal.generic.DCONST#getType(ConstantPoolGen)->Type::: t get type
com.sun.org.apache.bcel.internal.generic.DCONST#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DDIV#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DLOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DMUL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DNEG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DREM#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DRETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DSTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DSUB#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP2#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP2_X1#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP2_X2#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP_X1#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.DUP_X2#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ElementValueGen#getElementValue()->ElementValue:::Subtypes return an immutable variant of the ElementValueGen
com.sun.org.apache.bcel.internal.generic.ElementValueGen#getElementValueType()->int::: element value gen get element value type
com.sun.org.apache.bcel.internal.generic.ElementValueGen#stringifyValue()->String::: element value gen stringify value
com.sun.org.apache.bcel.internal.generic.ElementValueGen#dump(DataOutputStream)->void::: element value gen dump
com.sun.org.apache.bcel.internal.generic.ElementValueGen#readElementValue(DataInput, ConstantPoolGen)->ElementValueGen::: element value gen read element value
com.sun.org.apache.bcel.internal.generic.ElementValueGen#getConstantPool()->ConstantPoolGen::: element value gen get constant pool
com.sun.org.apache.bcel.internal.generic.ElementValueGen#copy(ElementValue, ConstantPoolGen, boolean)->ElementValueGen:::Creates an (modifiable) ElementValueGen copy of an (immutable) ElementValue - constant pool is assumed correct.
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#getElementNameValuePair()->ElementValuePair:::Retrieve an immutable version of this ElementNameValuePairGen
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#dump(DataOutputStream)->void::: element value pair gen dump
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#getNameIndex()->int::: element value pair gen get name index
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#getNameString()->String::: element value pair gen get name string
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#getValue()->ElementValueGen::: element value pair gen get value
com.sun.org.apache.bcel.internal.generic.ElementValuePairGen#toString()->String::: element value pair gen to string
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitStackInstruction(StackInstruction)->void::: empty visitor visit stack instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLocalVariableInstruction(LocalVariableInstruction)->void::: empty visitor visit local variable instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitBranchInstruction(BranchInstruction)->void::: empty visitor visit branch instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLoadClass(LoadClass)->void::: empty visitor visit load class
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFieldInstruction(FieldInstruction)->void::: empty visitor visit field instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIfInstruction(IfInstruction)->void::: empty visitor visit if instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitConversionInstruction(ConversionInstruction)->void::: empty visitor visit conversion instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPopInstruction(PopInstruction)->void::: empty visitor visit pop instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitJsrInstruction(JsrInstruction)->void::: empty visitor visit jsr instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitGotoInstruction(GotoInstruction)->void::: empty visitor visit goto instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitStoreInstruction(StoreInstruction)->void::: empty visitor visit store instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitTypedInstruction(TypedInstruction)->void::: empty visitor visit typed instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitSelect(Select)->void::: empty visitor visit select
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitUnconditionalBranch(UnconditionalBranch)->void::: empty visitor visit unconditional branch
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPushInstruction(PushInstruction)->void::: empty visitor visit push instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitArithmeticInstruction(ArithmeticInstruction)->void::: empty visitor visit arithmetic instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitCPInstruction(CPInstruction)->void::: empty visitor visit instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitInvokeInstruction(InvokeInstruction)->void::: empty visitor visit invoke instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitArrayInstruction(ArrayInstruction)->void::: empty visitor visit array instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitAllocationInstruction(AllocationInstruction)->void::: empty visitor visit allocation instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitReturnInstruction(ReturnInstruction)->void::: empty visitor visit return instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFieldOrMethod(FieldOrMethod)->void::: empty visitor visit field or method
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitConstantPushInstruction(ConstantPushInstruction)->void::: empty visitor visit constant push instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitExceptionThrower(ExceptionThrower)->void::: empty visitor visit exception thrower
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLoadInstruction(LoadInstruction)->void::: empty visitor visit load instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitVariableLengthInstruction(VariableLengthInstruction)->void::: empty visitor visit variable length instruction
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitStackProducer(StackProducer)->void::: empty visitor visit stack producer
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitStackConsumer(StackConsumer)->void::: empty visitor visit stack consumer
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitACONST_NULL(ACONST_NULL)->void::: empty visitor visit t_ l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitGETSTATIC(GETSTATIC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPLT(IF_ICMPLT)->void::: empty visitor visit f_ t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitMONITOREXIT(MONITOREXIT)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFLT(IFLT)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLSTORE(LSTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPOP2(POP2)->void::: empty visitor visit p2
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitBASTORE(BASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitISTORE(ISTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitCHECKCAST(CHECKCAST)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFCMPG(FCMPG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2F(I2F)->void::: empty visitor visit i2 f
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitATHROW(ATHROW)->void::: empty visitor visit w
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDCMPL(DCMPL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitARRAYLENGTH(ARRAYLENGTH)->void::: empty visitor visit h
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP(DUP)->void::: empty visitor visit p
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINVOKESTATIC(INVOKESTATIC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLCONST(LCONST)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDREM(DREM)->void::: empty visitor visit m
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFGE(IFGE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitCALOAD(CALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLASTORE(LASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2D(I2D)->void::: empty visitor visit i2 d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDADD(DADD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINVOKESPECIAL(INVOKESPECIAL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIAND(IAND)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPUTFIELD(PUTFIELD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitILOAD(ILOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDLOAD(DLOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDCONST(DCONST)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitNEW(NEW)->void::: empty visitor visit w
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFNULL(IFNULL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLSUB(LSUB)->void::: empty visitor visit b
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitL2I(L2I)->void::: empty visitor visit l2 i
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitISHR(ISHR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitTABLESWITCH(TABLESWITCH)->void::: empty visitor visit h
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIINC(IINC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDRETURN(DRETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFSTORE(FSTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDASTORE(DASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIALOAD(IALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDDIV(DDIV)->void::: empty visitor visit v
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPGE(IF_ICMPGE)->void::: empty visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLAND(LAND)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIDIV(IDIV)->void::: empty visitor visit v
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLOR(LOR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitCASTORE(CASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFREM(FREM)->void::: empty visitor visit m
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLDC(LDC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitBIPUSH(BIPUSH)->void::: empty visitor visit h
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDSTORE(DSTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitF2L(F2L)->void::: empty visitor visit f2 l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFMUL(FMUL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLLOAD(LLOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitJSR(JSR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFSUB(FSUB)->void::: empty visitor visit b
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitSASTORE(SASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitALOAD(ALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP2_X2(DUP2_X2)->void::: empty visitor visit p2_ x2
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitRETURN(RETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDALOAD(DALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitSIPUSH(SIPUSH)->void::: empty visitor visit h
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDSUB(DSUB)->void::: empty visitor visit b
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitL2F(L2F)->void::: empty visitor visit l2 f
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPGT(IF_ICMPGT)->void::: empty visitor visit f_ t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitF2D(F2D)->void::: empty visitor visit f2 d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2L(I2L)->void::: empty visitor visit i2 l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ACMPNE(IF_ACMPNE)->void::: empty visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPOP(POP)->void::: empty visitor visit p
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2S(I2S)->void::: empty visitor visit i2 s
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFEQ(IFEQ)->void::: empty visitor visit q
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitSWAP(SWAP)->void::: empty visitor visit p
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIOR(IOR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIREM(IREM)->void::: empty visitor visit m
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIASTORE(IASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitNEWARRAY(NEWARRAY)->void::: empty visitor visit y
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINVOKEINTERFACE(INVOKEINTERFACE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINEG(INEG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLCMP(LCMP)->void::: empty visitor visit p
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitJSR_W(JSR_W)->void::: empty visitor visit r_ w
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitMULTIANEWARRAY(MULTIANEWARRAY)->void::: empty visitor visit y
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP_X2(DUP_X2)->void::: empty visitor visit p_ x2
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitSALOAD(SALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFNONNULL(IFNONNULL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDMUL(DMUL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFNE(IFNE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPLE(IF_ICMPLE)->void::: empty visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLDC2_W(LDC2_W)->void::: empty visitor visit c2_ w
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitGETFIELD(GETFIELD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLADD(LADD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitNOP(NOP)->void::: empty visitor visit p
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFALOAD(FALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINSTANCEOF(INSTANCEOF)->void::: empty visitor visit f
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFLE(IFLE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLXOR(LXOR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLRETURN(LRETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFCONST(FCONST)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIUSHR(IUSHR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitBALOAD(BALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP2(DUP2)->void::: empty visitor visit p2
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ACMPEQ(IF_ACMPEQ)->void::: empty visitor visit f_ q
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIMPDEP1(IMPDEP1)->void::: empty visitor visit p1
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitMONITORENTER(MONITORENTER)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLSHL(LSHL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDCMPG(DCMPG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitD2L(D2L)->void::: empty visitor visit d2 l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIMPDEP2(IMPDEP2)->void::: empty visitor visit p2
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitL2D(L2D)->void::: empty visitor visit l2 d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitRET(RET)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIFGT(IFGT)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIXOR(IXOR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINVOKEVIRTUAL(INVOKEVIRTUAL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFASTORE(FASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIRETURN(IRETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPNE(IF_ICMPNE)->void::: empty visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFLOAD(FLOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLDIV(LDIV)->void::: empty visitor visit v
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitPUTSTATIC(PUTSTATIC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitAALOAD(AALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitD2I(D2I)->void::: empty visitor visit d2 i
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIF_ICMPEQ(IF_ICMPEQ)->void::: empty visitor visit f_ q
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitAASTORE(AASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitARETURN(ARETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP2_X1(DUP2_X1)->void::: empty visitor visit p2_ x1
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFNEG(FNEG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitGOTO_W(GOTO_W)->void::: empty visitor visit o_ w
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitD2F(D2F)->void::: empty visitor visit d2 f
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitGOTO(GOTO)->void::: empty visitor visit o
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitISUB(ISUB)->void::: empty visitor visit b
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitF2I(F2I)->void::: empty visitor visit f2 i
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDNEG(DNEG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitICONST(ICONST)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFDIV(FDIV)->void::: empty visitor visit v
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2B(I2B)->void::: empty visitor visit i2 b
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLNEG(LNEG)->void::: empty visitor visit g
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLREM(LREM)->void::: empty visitor visit m
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIMUL(IMUL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitIADD(IADD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLSHR(LSHR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLOOKUPSWITCH(LOOKUPSWITCH)->void::: empty visitor visit h
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitDUP_X1(DUP_X1)->void::: empty visitor visit p_ x1
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFCMPL(FCMPL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitI2C(I2C)->void::: empty visitor visit i2 c
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLMUL(LMUL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLUSHR(LUSHR)->void::: empty visitor visit r
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitISHL(ISHL)->void::: empty visitor visit l
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitLALOAD(LALOAD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitASTORE(ASTORE)->void::: empty visitor visit e
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitANEWARRAY(ANEWARRAY)->void::: empty visitor visit y
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFRETURN(FRETURN)->void::: empty visitor visit n
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitFADD(FADD)->void::: empty visitor visit d
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitBREAKPOINT(BREAKPOINT)->void::: empty visitor visit t
com.sun.org.apache.bcel.internal.generic.EmptyVisitor#visitINVOKEDYNAMIC(INVOKEDYNAMIC)->void::: empty visitor visit c
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#getElementValue()->ElementValue:::Return immutable variant of this EnumElementValue
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#dump(DataOutputStream)->void::: enum element value gen dump
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#stringifyValue()->String::: enum element value gen stringify value
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#getEnumTypeString()->String::: enum element value gen get enum type string
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#getEnumValueString()->String::: enum element value gen get enum value string
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#getValueIndex()->int::: enum element value gen get value index
com.sun.org.apache.bcel.internal.generic.EnumElementValueGen#getTypeIndex()->int::: enum element value gen get type index
com.sun.org.apache.bcel.internal.generic.ExceptionThrower#getExceptions()->java.lang.Class[]::: exception thrower get exceptions
com.sun.org.apache.bcel.internal.generic.F2D#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.F2I#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.F2L#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FADD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FCMPG#getType(ConstantPoolGen)->Type::: g get type
com.sun.org.apache.bcel.internal.generic.FCMPG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FCMPL#getType(ConstantPoolGen)->Type::: l get type
com.sun.org.apache.bcel.internal.generic.FCMPL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FCONST#getValue()->Number::: t get value
com.sun.org.apache.bcel.internal.generic.FCONST#getType(ConstantPoolGen)->Type::: t get type
com.sun.org.apache.bcel.internal.generic.FCONST#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FDIV#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(String)->void:::Set (optional) initial value of field, otherwise it will be set to null/0/false by the JVM automatically.
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(long)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(int)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(short)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(char)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(byte)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(boolean)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(float)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#setInitValue(double)->void::: field gen set init value
com.sun.org.apache.bcel.internal.generic.FieldGen#cancelInitValue()->void:::Remove any initial value.
com.sun.org.apache.bcel.internal.generic.FieldGen#getField()->Field:::Get field object after having set up all necessary values.
com.sun.org.apache.bcel.internal.generic.FieldGen#getSignature()->String::: field gen get signature
com.sun.org.apache.bcel.internal.generic.FieldGen#addObserver(FieldObserver)->void:::Add observer for this object.
com.sun.org.apache.bcel.internal.generic.FieldGen#removeObserver(FieldObserver)->void:::Remove observer for this object.
com.sun.org.apache.bcel.internal.generic.FieldGen#update()->void:::Call notify() method on all observers
com.sun.org.apache.bcel.internal.generic.FieldGen#getInitValue()->String::: field gen get init value
com.sun.org.apache.bcel.internal.generic.FieldGen#toString()->String:::Return string representation close to declaration format, `public static final short MAX = 100', e.g..
com.sun.org.apache.bcel.internal.generic.FieldGen#copy(ConstantPoolGen)->FieldGen::: field gen copy
com.sun.org.apache.bcel.internal.generic.FieldGen#getComparator()->BCELComparator::: field gen get comparator
com.sun.org.apache.bcel.internal.generic.FieldGen#setComparator(BCELComparator)->void::: field gen set comparator
com.sun.org.apache.bcel.internal.generic.FieldGen#equals(Object)->boolean:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.FieldGen#hashCode()->int:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#setType(Type)->void::: field gen or method gen set type
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getType()->Type::: field gen or method gen get type
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getName()->String::: field gen or method gen get name
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#setName(String)->void::: field gen or method gen set name
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getConstantPool()->ConstantPoolGen::: field gen or method gen get constant pool
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#setConstantPool(ConstantPoolGen)->void::: field gen or method gen set constant pool
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#addAttribute(Attribute)->void:::Add an attribute to this method
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#addAnnotationEntry(AnnotationEntryGen)->void::: field gen or method gen add annotation entry
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#removeAttribute(Attribute)->void:::Remove an attribute.
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#removeAnnotationEntry(AnnotationEntryGen)->void::: field gen or method gen remove annotation entry
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#removeAttributes()->void:::Remove all attributes.
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#removeAnnotationEntries()->void::: field gen or method gen remove annotation entries
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getAttributes()->Attribute[]::: field gen or method gen get attributes
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getAnnotationEntries()->AnnotationEntryGen[]::: field gen or method gen get annotation entries
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#getSignature()->String::: field gen or method gen get signature
com.sun.org.apache.bcel.internal.generic.FieldGenOrMethodGen#clone()->Object::: field gen or method gen clone
com.sun.org.apache.bcel.internal.generic.FieldInstruction#toString(ConstantPool)->String::: field instruction to string
com.sun.org.apache.bcel.internal.generic.FieldInstruction#getFieldSize(ConstantPoolGen)->int::: field instruction get field size
com.sun.org.apache.bcel.internal.generic.FieldInstruction#getType(ConstantPoolGen)->Type::: field instruction get type
com.sun.org.apache.bcel.internal.generic.FieldInstruction#getFieldType(ConstantPoolGen)->Type::: field instruction get field type
com.sun.org.apache.bcel.internal.generic.FieldInstruction#getFieldName(ConstantPoolGen)->String::: field instruction get field name
com.sun.org.apache.bcel.internal.generic.FieldObserver#notify(FieldGen)->void::: field observer notify
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getSignature(ConstantPoolGen)->String::: field or method get signature
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getName(ConstantPoolGen)->String::: field or method get name
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getClassName(ConstantPoolGen)->String::: field or method get class name
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getClassType(ConstantPoolGen)->ObjectType::: field or method get class type
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getReferenceType(ConstantPoolGen)->ReferenceType:::Return the reference type representing the class, interface, or array class referenced by the instruction.
com.sun.org.apache.bcel.internal.generic.FieldOrMethod#getLoadClassType(ConstantPoolGen)->ObjectType:::Get the ObjectType of the method return or field.
com.sun.org.apache.bcel.internal.generic.FLOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FMUL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FNEG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FREM#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FRETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FSTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.FSUB#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.GETFIELD#produceStack(ConstantPoolGen)->int::: d produce stack
com.sun.org.apache.bcel.internal.generic.GETFIELD#getExceptions()->Class[]::: d get exceptions
com.sun.org.apache.bcel.internal.generic.GETFIELD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.GETSTATIC#produceStack(ConstantPoolGen)->int::: c produce stack
com.sun.org.apache.bcel.internal.generic.GETSTATIC#getExceptions()->Class[]::: c get exceptions
com.sun.org.apache.bcel.internal.generic.GETSTATIC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.GOTO#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.GOTO#updatePosition(int, int)->int:::Called in pass 2 of InstructionList.setPositions() in order to update the branch target, that may shift due to variable length instructions.
com.sun.org.apache.bcel.internal.generic.GOTO#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.GOTO_W#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.GOTO_W#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.GOTO_W#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2B#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2C#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2D#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2F#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2L#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.I2S#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IADD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IAND#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ICONST#getValue()->Number::: t get value
com.sun.org.apache.bcel.internal.generic.ICONST#getType(ConstantPoolGen)->Type::: t get type
com.sun.org.apache.bcel.internal.generic.ICONST#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IDIV#getExceptions()->Class[]::: v get exceptions
com.sun.org.apache.bcel.internal.generic.IDIV#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFEQ#negate()->IfInstruction::: q negate
com.sun.org.apache.bcel.internal.generic.IFEQ#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFGE#negate()->IfInstruction::: e negate
com.sun.org.apache.bcel.internal.generic.IFGE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFGT#negate()->IfInstruction::: t negate
com.sun.org.apache.bcel.internal.generic.IFGT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IfInstruction#negate()->IfInstruction::: if instruction negate
com.sun.org.apache.bcel.internal.generic.IFLE#negate()->IfInstruction::: e negate
com.sun.org.apache.bcel.internal.generic.IFLE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFLT#negate()->IfInstruction::: t negate
com.sun.org.apache.bcel.internal.generic.IFLT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFNE#negate()->IfInstruction::: e negate
com.sun.org.apache.bcel.internal.generic.IFNE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFNONNULL#negate()->IfInstruction::: l negate
com.sun.org.apache.bcel.internal.generic.IFNONNULL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IFNULL#negate()->IfInstruction::: l negate
com.sun.org.apache.bcel.internal.generic.IFNULL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ACMPEQ#negate()->IfInstruction::: f_ q negate
com.sun.org.apache.bcel.internal.generic.IF_ACMPEQ#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ACMPNE#negate()->IfInstruction::: f_ e negate
com.sun.org.apache.bcel.internal.generic.IF_ACMPNE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPEQ#negate()->IfInstruction::: f_ q negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPEQ#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPGE#negate()->IfInstruction::: f_ e negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPGE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPGT#negate()->IfInstruction::: f_ t negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPGT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPLE#negate()->IfInstruction::: f_ e negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPLE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPLT#negate()->IfInstruction::: f_ t negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPLT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IF_ICMPNE#negate()->IfInstruction::: f_ e negate
com.sun.org.apache.bcel.internal.generic.IF_ICMPNE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IINC#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.IINC#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.IINC#toString(boolean)->String::: c to string
com.sun.org.apache.bcel.internal.generic.IINC#setIndex(int)->void:::Set index of local variable.
com.sun.org.apache.bcel.internal.generic.IINC#getIncrement()->int::: c get increment
com.sun.org.apache.bcel.internal.generic.IINC#setIncrement(int)->void:::Set increment factor.
com.sun.org.apache.bcel.internal.generic.IINC#getType(ConstantPoolGen)->Type::: c get type
com.sun.org.apache.bcel.internal.generic.IINC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ILOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IMPDEP1#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IMPDEP2#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IMUL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IndexedInstruction#getIndex()->int::: indexed instruction get index
com.sun.org.apache.bcel.internal.generic.IndexedInstruction#setIndex(int)->void::: indexed instruction set index
com.sun.org.apache.bcel.internal.generic.INEG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.INSTANCEOF#getExceptions()->Class[]::: f get exceptions
com.sun.org.apache.bcel.internal.generic.INSTANCEOF#getLoadClassType(ConstantPoolGen)->ObjectType::: f get load class type
com.sun.org.apache.bcel.internal.generic.INSTANCEOF#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.Instruction#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.Instruction#getName()->String::: instruction get name
com.sun.org.apache.bcel.internal.generic.Instruction#toString(boolean)->String:::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")"
com.sun.org.apache.bcel.internal.generic.Instruction#toString()->String::: instruction to string
com.sun.org.apache.bcel.internal.generic.Instruction#toString(ConstantPool)->String::: instruction to string
com.sun.org.apache.bcel.internal.generic.Instruction#copy()->Instruction:::Use with caution, since `BranchInstruction's have a `target' reference which is not copied correctly (only basic types are)
com.sun.org.apache.bcel.internal.generic.Instruction#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.Instruction#readInstruction(ByteSequence)->Instruction::: instruction read instruction
com.sun.org.apache.bcel.internal.generic.Instruction#consumeStack(ConstantPoolGen)->int:::This method also gives right results for instructions whose effect on the stack depends on the constant pool entry they reference.
com.sun.org.apache.bcel.internal.generic.Instruction#produceStack(ConstantPoolGen)->int:::This method also gives right results for instructions whose effect on the stack depends on the constant pool entry they reference.
com.sun.org.apache.bcel.internal.generic.Instruction#getOpcode()->short::: instruction get opcode
com.sun.org.apache.bcel.internal.generic.Instruction#getLength()->int::: instruction get length
com.sun.org.apache.bcel.internal.generic.Instruction#setOpcode(short)->void:::Needed in readInstruction and subclasses in this package
com.sun.org.apache.bcel.internal.generic.Instruction#setLength(int)->void:::Needed in readInstruction and subclasses in this package
com.sun.org.apache.bcel.internal.generic.Instruction#dispose()->void:::Some instructions may be reused, so don't do anything by default.
com.sun.org.apache.bcel.internal.generic.Instruction#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.Instruction#getComparator()->InstructionComparator:::Get Comparator object used in the equals() method to determine equality of instructions.
com.sun.org.apache.bcel.internal.generic.Instruction#setComparator(InstructionComparator)->void:::Set comparator to be used for equals().
com.sun.org.apache.bcel.internal.generic.Instruction#equals(Object)->boolean:::Check for equality, delegated to comparator
com.sun.org.apache.bcel.internal.generic.Instruction#hashCode()->int:::calculate the hashCode of this object
com.sun.org.apache.bcel.internal.generic.Instruction#isValidByte(int)->boolean:::Check if the value can fit in a byte (signed)
com.sun.org.apache.bcel.internal.generic.Instruction#isValidShort(int)->boolean:::Check if the value can fit in a short (signed)
com.sun.org.apache.bcel.internal.generic.InstructionComparator#equals(Instruction, Instruction)->boolean::: instruction comparator equals
com.sun.org.apache.bcel.internal.generic.InstructionConst#getInstruction(int)->Instruction:::Gets the Instruction.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createInvoke(String, String, Type, Type[], short)->InvokeInstruction:::Create an invoke instruction
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createPrintln(String)->InstructionList:::Create a call to the most popular System.out.println() method.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createConstant(Object)->Instruction:::Uses PUSH to push a constant value onto the stack.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createAppend(Type)->Instruction::: instruction factory create append
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createFieldAccess(String, String, Type, short)->FieldInstruction:::Create a field instruction.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createThis()->Instruction:::Create reference to `this'
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createReturn(Type)->ReturnInstruction:::Create typed return
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createBinaryOperation(String, Type)->ArithmeticInstruction:::Create binary operation for simple basic types, such as int and float.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createPop(int)->StackInstruction::: instruction factory create pop
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createDup(int)->StackInstruction::: instruction factory create dup
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createDup_2(int)->StackInstruction::: instruction factory create dup_2
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createDup_1(int)->StackInstruction::: instruction factory create dup_1
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createStore(Type, int)->LocalVariableInstruction::: instruction factory create store
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createLoad(Type, int)->LocalVariableInstruction::: instruction factory create load
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createArrayLoad(Type)->ArrayInstruction::: instruction factory create array load
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createArrayStore(Type)->ArrayInstruction::: instruction factory create array store
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createCast(Type, Type)->Instruction:::Create conversion operation for two stack operands, this may be an I2C, instruction, e.g., if the operands are basic types and CHECKCAST if they are reference types.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createGetField(String, String, Type)->GETFIELD::: instruction factory create get field
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createGetStatic(String, String, Type)->GETSTATIC::: instruction factory create get static
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createPutField(String, String, Type)->PUTFIELD::: instruction factory create put field
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createPutStatic(String, String, Type)->PUTSTATIC::: instruction factory create put static
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createCheckCast(ReferenceType)->CHECKCAST::: instruction factory create check cast
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createInstanceOf(ReferenceType)->INSTANCEOF::: instruction factory create instance of
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createNew(ObjectType)->NEW::: instruction factory create new
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createNew(String)->NEW::: instruction factory create new
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createNewArray(Type, short)->Instruction:::Create new array of given size and type.
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createNull(Type)->Instruction:::Create "null" value for reference types, 0 for basic types like int
com.sun.org.apache.bcel.internal.generic.InstructionFactory#createBranchInstruction(short, InstructionHandle)->BranchInstruction:::Create branch instruction by given opcode, except LOOKUPSWITCH and TABLESWITCH
com.sun.org.apache.bcel.internal.generic.InstructionFactory#setClassGen(ClassGen)->void::: instruction factory set class gen
com.sun.org.apache.bcel.internal.generic.InstructionFactory#getClassGen()->ClassGen::: instruction factory get class gen
com.sun.org.apache.bcel.internal.generic.InstructionFactory#setConstantPool(ConstantPoolGen)->void::: instruction factory set constant pool
com.sun.org.apache.bcel.internal.generic.InstructionFactory#getConstantPool()->ConstantPoolGen::: instruction factory get constant pool
com.sun.org.apache.bcel.internal.generic.InstructionHandle#addHandle()->void:::Does nothing.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getNext()->InstructionHandle::: instruction handle get next
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getPrev()->InstructionHandle::: instruction handle get prev
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getInstruction()->Instruction::: instruction handle get instruction
com.sun.org.apache.bcel.internal.generic.InstructionHandle#setInstruction(Instruction)->void:::Replace current instruction contained in this handle
com.sun.org.apache.bcel.internal.generic.InstructionHandle#swapInstruction(Instruction)->Instruction::: instruction handle swap instruction
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getInstructionHandle(Instruction)->InstructionHandle:::Factory method.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#updatePosition(int, int)->int:::Called by InstructionList.setPositions when setting the position for every instruction
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getPosition()->int::: instruction handle get position
com.sun.org.apache.bcel.internal.generic.InstructionHandle#setPosition(int)->void:::Set the position, i.e., the byte code offset of the contained instruction.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#dispose()->void:::Delete contents, i.e., remove user access.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#removeAllTargeters()->void:::Remove all targeters, if any.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#removeTargeter(InstructionTargeter)->void:::Denote this handle isn't referenced anymore by t.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#addTargeter(InstructionTargeter)->void:::Denote this handle is being referenced by t.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#hasTargeters()->boolean::: instruction handle has targeters
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getTargeters()->InstructionTargeter[]::: instruction handle get targeters
com.sun.org.apache.bcel.internal.generic.InstructionHandle#toString(boolean)->String::: instruction handle to string
com.sun.org.apache.bcel.internal.generic.InstructionHandle#toString()->String::: instruction handle to string
com.sun.org.apache.bcel.internal.generic.InstructionHandle#addAttribute(Object, Object)->void:::Add an attribute to an instruction handle.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#removeAttribute(Object)->void:::Delete an attribute of an instruction handle.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getAttribute(Object)->Object:::Get attribute of an instruction handle.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#getAttributes()->Collection::: instruction handle get attributes
com.sun.org.apache.bcel.internal.generic.InstructionHandle#accept(Visitor)->void:::Convenience method, simply calls accept() on the contained instruction.
com.sun.org.apache.bcel.internal.generic.InstructionHandle#setNext(InstructionHandle)->InstructionHandle::: instruction handle set next
com.sun.org.apache.bcel.internal.generic.InstructionHandle#setPrev(InstructionHandle)->InstructionHandle::: instruction handle set prev
com.sun.org.apache.bcel.internal.generic.InstructionList#isEmpty()->boolean:::Test for empty list.
com.sun.org.apache.bcel.internal.generic.InstructionList#findHandle(InstructionHandle[], int[], int, int)->InstructionHandle:::Find the target instruction (handle) that corresponds to the given target position (byte code offset).
com.sun.org.apache.bcel.internal.generic.InstructionList#findHandle(int)->InstructionHandle:::Get instruction handle for instruction at byte code position pos
com.sun.org.apache.bcel.internal.generic.InstructionList#append(InstructionHandle, InstructionList)->InstructionHandle:::Append another list after instruction (handle) ih contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#append(Instruction, InstructionList)->InstructionHandle:::Append another list after instruction i contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#append(InstructionList)->InstructionHandle:::Append another list to this one
com.sun.org.apache.bcel.internal.generic.InstructionList#append(Instruction)->InstructionHandle:::Append an instruction to the end of this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(BranchInstruction)->BranchHandle:::Append a branch instruction to the end of this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(Instruction, Instruction)->InstructionHandle:::Append a single instruction j after another instruction i, which must be in this list of course!
com.sun.org.apache.bcel.internal.generic.InstructionList#append(Instruction, CompoundInstruction)->InstructionHandle:::Append a compound instruction, after instruction i.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(CompoundInstruction)->InstructionHandle:::Append a compound instruction.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(InstructionHandle, CompoundInstruction)->InstructionHandle:::Append a compound instruction.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(InstructionHandle, Instruction)->InstructionHandle:::Append an instruction after instruction (handle) ih contained in this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#append(InstructionHandle, BranchInstruction)->BranchHandle:::Append an instruction after instruction (handle) ih contained in this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(InstructionHandle, InstructionList)->InstructionHandle:::Insert another list before Instruction handle ih contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(InstructionList)->InstructionHandle:::Insert another list.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(Instruction, InstructionList)->InstructionHandle:::Insert another list before Instruction i contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(Instruction)->InstructionHandle:::Insert an instruction at start of this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(BranchInstruction)->BranchHandle:::Insert a branch instruction at start of this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(Instruction, Instruction)->InstructionHandle:::Insert a single instruction j before another instruction i, which must be in this list of course!
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(Instruction, CompoundInstruction)->InstructionHandle:::Insert a compound instruction before instruction i.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(CompoundInstruction)->InstructionHandle:::Insert a compound instruction.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(InstructionHandle, Instruction)->InstructionHandle:::Insert an instruction before instruction (handle) ih contained in this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(InstructionHandle, CompoundInstruction)->InstructionHandle:::Insert a compound instruction.
com.sun.org.apache.bcel.internal.generic.InstructionList#insert(InstructionHandle, BranchInstruction)->BranchHandle:::Insert an instruction before instruction (handle) ih contained in this list.
com.sun.org.apache.bcel.internal.generic.InstructionList#move(InstructionHandle, InstructionHandle, InstructionHandle)->void:::Take all instructions (handles) from "start" to "end" and append them after the new location "target"
com.sun.org.apache.bcel.internal.generic.InstructionList#move(InstructionHandle, InstructionHandle)->void:::Move a single instruction (handle) to a new location.
com.sun.org.apache.bcel.internal.generic.InstructionList#delete(InstructionHandle)->void:::Remove instruction from this list
com.sun.org.apache.bcel.internal.generic.InstructionList#delete(Instruction)->void:::Remove instruction from this list
com.sun.org.apache.bcel.internal.generic.InstructionList#delete(InstructionHandle, InstructionHandle)->void:::Remove instructions from instruction `from' to instruction `to' contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#delete(Instruction, Instruction)->void:::Remove instructions from instruction `from' to instruction `to' contained in this list
com.sun.org.apache.bcel.internal.generic.InstructionList#contains(InstructionHandle)->boolean::: instruction list contains
com.sun.org.apache.bcel.internal.generic.InstructionList#contains(Instruction)->boolean::: instruction list contains
com.sun.org.apache.bcel.internal.generic.InstructionList#setPositions()->void::: instruction list set positions
com.sun.org.apache.bcel.internal.generic.InstructionList#setPositions(boolean)->void:::Give all instructions their position number (offset in byte stream), i.e., make the list ready to be dumped.
com.sun.org.apache.bcel.internal.generic.InstructionList#getByteCode()->byte[]:::When everything is finished, use this method to convert the instruction list into an array of bytes.
com.sun.org.apache.bcel.internal.generic.InstructionList#getInstructions()->Instruction[]::: instruction list get instructions
com.sun.org.apache.bcel.internal.generic.InstructionList#toString()->String::: instruction list to string
com.sun.org.apache.bcel.internal.generic.InstructionList#toString(boolean)->String::: instruction list to string
com.sun.org.apache.bcel.internal.generic.InstructionList#iterator()->Iterator::: instruction list iterator
com.sun.org.apache.bcel.internal.generic.InstructionList#getInstructionHandles()->InstructionHandle[]::: instruction list get instruction handles
com.sun.org.apache.bcel.internal.generic.InstructionList#getInstructionPositions()->int[]:::Get positions (offsets) of all instructions in the list
com.sun.org.apache.bcel.internal.generic.InstructionList#copy()->InstructionList::: instruction list copy
com.sun.org.apache.bcel.internal.generic.InstructionList#replaceConstantPool(ConstantPoolGen, ConstantPoolGen)->void:::Replace all references to the old constant pool with references to the new constant pool
com.sun.org.apache.bcel.internal.generic.InstructionList#dispose()->void:::Delete contents of list
com.sun.org.apache.bcel.internal.generic.InstructionList#getStart()->InstructionHandle::: instruction list get start
com.sun.org.apache.bcel.internal.generic.InstructionList#getEnd()->InstructionHandle::: instruction list get end
com.sun.org.apache.bcel.internal.generic.InstructionList#getLength()->int::: instruction list get length
com.sun.org.apache.bcel.internal.generic.InstructionList#size()->int::: instruction list size
com.sun.org.apache.bcel.internal.generic.InstructionList#redirectBranches(InstructionHandle, InstructionHandle)->void:::Redirect all references from old_target to new_target, i.e., update targets of branch instructions.
com.sun.org.apache.bcel.internal.generic.InstructionList#redirectLocalVariables(LocalVariableGen[], InstructionHandle, InstructionHandle)->void:::Redirect all references of local variables from old_target to new_target.
com.sun.org.apache.bcel.internal.generic.InstructionList#redirectExceptionHandlers(CodeExceptionGen[], InstructionHandle, InstructionHandle)->void:::Redirect all references of exception handlers from old_target to new_target.
com.sun.org.apache.bcel.internal.generic.InstructionList#addObserver(InstructionListObserver)->void:::Add observer for this object.
com.sun.org.apache.bcel.internal.generic.InstructionList#removeObserver(InstructionListObserver)->void:::Remove observer for this object.
com.sun.org.apache.bcel.internal.generic.InstructionList#update()->void:::Call notify() method on all observers
com.sun.org.apache.bcel.internal.generic.InstructionListObserver#notify(InstructionList)->void::: instruction list observer notify
com.sun.org.apache.bcel.internal.generic.InstructionTargeter#containsTarget(InstructionHandle)->boolean:::Checks whether this targeter targets the specified instruction handle.
com.sun.org.apache.bcel.internal.generic.InstructionTargeter#updateTarget(InstructionHandle, InstructionHandle)->void:::Replaces the target of this targeter from this old handle to the new handle.
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#initFromFile(ByteSequence, boolean)->void:::Read needed data (i.e., index) from file.
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#toString(ConstantPool)->String::: c to string
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#getExceptions()->Class[]::: c get exceptions
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#getClassName(ConstantPoolGen)->String:::Override the parent method because our classname is held elsewhere.
com.sun.org.apache.bcel.internal.generic.INVOKEDYNAMIC#getReferenceType(ConstantPoolGen)->ReferenceType:::Since InvokeDynamic doesn't refer to a reference type, just return java.lang.Object, as that is the only type we can say for sure the reference will be.
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#toString(ConstantPool)->String::: invoke instruction to string
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#consumeStack(ConstantPoolGen)->int:::Also works for instructions whose stack effect depends on the constant pool entry they reference.
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#produceStack(ConstantPoolGen)->int:::Also works for instructions whose stack effect depends on the constant pool entry they reference.
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#getClassName(ConstantPoolGen)->String:::This overrides the deprecated version as we know here that the referenced class may legally be an array.
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#getType(ConstantPoolGen)->Type::: invoke instruction get type
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#getMethodName(ConstantPoolGen)->String::: invoke instruction get method name
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#getReturnType(ConstantPoolGen)->Type::: invoke instruction get return type
com.sun.org.apache.bcel.internal.generic.InvokeInstruction#getArgumentTypes(ConstantPoolGen)->Type[]::: invoke instruction get argument types
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#getCount()->int:::The <B>count</B> argument according to the Java Language Specification, Second Edition.
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#initFromFile(ByteSequence, boolean)->void:::Read needed data (i.e., index) from file.
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#toString(ConstantPool)->String::: e to string
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#consumeStack(ConstantPoolGen)->int::: e consume stack
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#getExceptions()->Class[]::: e get exceptions
com.sun.org.apache.bcel.internal.generic.INVOKEINTERFACE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.INVOKESPECIAL#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.INVOKESPECIAL#getExceptions()->Class[]::: l get exceptions
com.sun.org.apache.bcel.internal.generic.INVOKESPECIAL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.INVOKESTATIC#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.INVOKESTATIC#getExceptions()->Class[]::: c get exceptions
com.sun.org.apache.bcel.internal.generic.INVOKESTATIC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.INVOKEVIRTUAL#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.INVOKEVIRTUAL#getExceptions()->Class[]::: l get exceptions
com.sun.org.apache.bcel.internal.generic.INVOKEVIRTUAL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IOR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IREM#getExceptions()->Class[]::: m get exceptions
com.sun.org.apache.bcel.internal.generic.IREM#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IRETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ISHL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ISHR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ISTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ISUB#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IUSHR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.IXOR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.JSR#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.JSR#updatePosition(int, int)->int::: r update position
com.sun.org.apache.bcel.internal.generic.JSR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.JsrInstruction#getType(ConstantPoolGen)->Type::: jsr instruction get type
com.sun.org.apache.bcel.internal.generic.JsrInstruction#physicalSuccessor()->InstructionHandle:::Returns an InstructionHandle to the physical successor of this JsrInstruction
com.sun.org.apache.bcel.internal.generic.JSR_W#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.JSR_W#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.JSR_W#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.L2D#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.L2F#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.L2I#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LADD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LAND#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LCMP#getType(ConstantPoolGen)->Type::: p get type
com.sun.org.apache.bcel.internal.generic.LCMP#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LCONST#getValue()->Number::: t get value
com.sun.org.apache.bcel.internal.generic.LCONST#getType(ConstantPoolGen)->Type::: t get type
com.sun.org.apache.bcel.internal.generic.LCONST#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LDC#setSize()->void::: c set size
com.sun.org.apache.bcel.internal.generic.LDC#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.LDC#setIndex(int)->void:::Set the index to constant pool and adjust size.
com.sun.org.apache.bcel.internal.generic.LDC#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.LDC#getValue(ConstantPoolGen)->Object::: c get value
com.sun.org.apache.bcel.internal.generic.LDC#getType(ConstantPoolGen)->Type::: c get type
com.sun.org.apache.bcel.internal.generic.LDC#getExceptions()->Class[]::: c get exceptions
com.sun.org.apache.bcel.internal.generic.LDC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LDC2_W#getType(ConstantPoolGen)->Type::: c2_ w get type
com.sun.org.apache.bcel.internal.generic.LDC2_W#getValue(ConstantPoolGen)->Number::: c2_ w get value
com.sun.org.apache.bcel.internal.generic.LDC2_W#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LDC_W#initFromFile(ByteSequence, boolean)->void:::Read needed data (i.e., index) from file.
com.sun.org.apache.bcel.internal.generic.LDIV#getExceptions()->Class[]::: v get exceptions
com.sun.org.apache.bcel.internal.generic.LDIV#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LineNumberGen#containsTarget(InstructionHandle)->boolean::: line number gen contains target
com.sun.org.apache.bcel.internal.generic.LineNumberGen#updateTarget(InstructionHandle, InstructionHandle)->void::: line number gen update target
com.sun.org.apache.bcel.internal.generic.LineNumberGen#getLineNumber()->LineNumber:::Get LineNumber attribute 
com.sun.org.apache.bcel.internal.generic.LineNumberGen#setInstruction(InstructionHandle)->void::: line number gen set instruction
com.sun.org.apache.bcel.internal.generic.LineNumberGen#clone()->Object::: line number gen clone
com.sun.org.apache.bcel.internal.generic.LineNumberGen#getInstruction()->InstructionHandle::: line number gen get instruction
com.sun.org.apache.bcel.internal.generic.LineNumberGen#setSourceLine(int)->void::: line number gen set source line
com.sun.org.apache.bcel.internal.generic.LineNumberGen#getSourceLine()->int::: line number gen get source line
com.sun.org.apache.bcel.internal.generic.LLOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LMUL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LNEG#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LoadClass#getLoadClassType(ConstantPoolGen)->ObjectType:::Returns the ObjectType of the referenced class or interface that may be loaded and resolved.
com.sun.org.apache.bcel.internal.generic.LoadClass#getType(ConstantPoolGen)->Type:::Returns the type associated with this instruction
com.sun.org.apache.bcel.internal.generic.LoadInstruction#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getLocalVariable(ConstantPoolGen)->LocalVariable:::Get LocalVariable object
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setIndex(int)->void::: local variable gen set index
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getIndex()->int::: local variable gen get index
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getOrigIndex()->int::: local variable gen get orig index
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setLiveToEnd(boolean)->void::: local variable gen set live to end
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getLiveToEnd()->boolean::: local variable gen get live to end
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setName(String)->void::: local variable gen set name
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getName()->String::: local variable gen get name
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setType(Type)->void::: local variable gen set type
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getType()->Type::: local variable gen get type
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getStart()->InstructionHandle::: local variable gen get start
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#getEnd()->InstructionHandle::: local variable gen get end
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setStart(InstructionHandle)->void::: local variable gen set start
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#setEnd(InstructionHandle)->void::: local variable gen set end
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#updateTarget(InstructionHandle, InstructionHandle)->void::: local variable gen update target
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#dispose()->void:::Clear the references from and to this variable when it's removed.
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#containsTarget(InstructionHandle)->boolean::: local variable gen contains target
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#hashCode()->int::: local variable gen hash code
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#equals(Object)->boolean:::We consider to local variables to be equal, if the use the same index and are valid in the same range.
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#toString()->String::: local variable gen to string
com.sun.org.apache.bcel.internal.generic.LocalVariableGen#clone()->Object::: local variable gen clone
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#toString(boolean)->String:::Long output format:  &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; local variable index&gt;"&gt;"
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#getIndex()->int::: local variable instruction get index
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#setIndex(int)->void:::Set the local variable index
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#getCanonicalTag()->short::: local variable instruction get canonical tag
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#getType(ConstantPoolGen)->Type:::Returns the type associated with the instruction - in case of ALOAD or ASTORE Type.OBJECT is returned
com.sun.org.apache.bcel.internal.generic.LocalVariableInstruction#setIndexOnly(int)->void:::Sets the index of the referenced variable (n) only
com.sun.org.apache.bcel.internal.generic.LOOKUPSWITCH#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.LOOKUPSWITCH#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.LOOKUPSWITCH#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LOR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LREM#getExceptions()->Class[]::: m get exceptions
com.sun.org.apache.bcel.internal.generic.LREM#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LRETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LSHL#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LSHR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LSTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LSUB#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LUSHR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.LXOR#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.MethodGen#addLocalVariable(String, Type, int, InstructionHandle, InstructionHandle, int)->LocalVariableGen:::Adds a local variable to this method.
com.sun.org.apache.bcel.internal.generic.MethodGen#addLocalVariable(String, Type, int, InstructionHandle, InstructionHandle)->LocalVariableGen:::Adds a local variable to this method.
com.sun.org.apache.bcel.internal.generic.MethodGen#addLocalVariable(String, Type, InstructionHandle, InstructionHandle)->LocalVariableGen:::Adds a local variable to this method and assigns an index automatically.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeLocalVariable(LocalVariableGen)->void:::Remove a local variable, its slot will not be reused, if you do not use addLocalVariable with an explicit index argument.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeLocalVariables()->void:::Remove all local variables.
com.sun.org.apache.bcel.internal.generic.MethodGen#getLocalVariables()->LocalVariableGen[]::: method gen get local variables
com.sun.org.apache.bcel.internal.generic.MethodGen#getLocalVariableTable(ConstantPoolGen)->LocalVariableTable::: method gen get local variable table
com.sun.org.apache.bcel.internal.generic.MethodGen#getLocalVariableTypeTable()->LocalVariableTypeTable::: method gen get local variable type table
com.sun.org.apache.bcel.internal.generic.MethodGen#addLineNumber(InstructionHandle, int)->LineNumberGen:::Give an instruction a line number corresponding to the source code line.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeLineNumber(LineNumberGen)->void:::Remove a line number.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeLineNumbers()->void:::Remove all line numbers.
com.sun.org.apache.bcel.internal.generic.MethodGen#getLineNumbers()->LineNumberGen[]::: method gen get line numbers
com.sun.org.apache.bcel.internal.generic.MethodGen#getLineNumberTable(ConstantPoolGen)->LineNumberTable::: method gen get line number table
com.sun.org.apache.bcel.internal.generic.MethodGen#addExceptionHandler(InstructionHandle, InstructionHandle, InstructionHandle, ObjectType)->CodeExceptionGen:::Add an exception handler, i.e., specify region where a handler is active and an instruction where the actual handling is done.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeExceptionHandler(CodeExceptionGen)->void:::Remove an exception handler.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeExceptionHandlers()->void:::Remove all line numbers.
com.sun.org.apache.bcel.internal.generic.MethodGen#getExceptionHandlers()->CodeExceptionGen[]::: method gen get exception handlers
com.sun.org.apache.bcel.internal.generic.MethodGen#addException(String)->void:::Add an exception possibly thrown by this method.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeException(String)->void:::Remove an exception.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeExceptions()->void:::Remove all exceptions.
com.sun.org.apache.bcel.internal.generic.MethodGen#getExceptions()->String[]::: method gen get exceptions
com.sun.org.apache.bcel.internal.generic.MethodGen#addCodeAttribute(Attribute)->void:::Add an attribute to the code
com.sun.org.apache.bcel.internal.generic.MethodGen#removeLocalVariableTypeTable()->void:::Remove the LocalVariableTypeTable
com.sun.org.apache.bcel.internal.generic.MethodGen#removeCodeAttribute(Attribute)->void:::Remove a code attribute.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeCodeAttributes()->void:::Remove all code attributes.
com.sun.org.apache.bcel.internal.generic.MethodGen#getCodeAttributes()->Attribute[]::: method gen get code attributes
com.sun.org.apache.bcel.internal.generic.MethodGen#addAnnotationsAsAttribute(ConstantPoolGen)->void::: method gen add annotations as attribute
com.sun.org.apache.bcel.internal.generic.MethodGen#addParameterAnnotationsAsAttribute(ConstantPoolGen)->void::: method gen add parameter annotations as attribute
com.sun.org.apache.bcel.internal.generic.MethodGen#getMethod()->Method:::Get method object
com.sun.org.apache.bcel.internal.generic.MethodGen#removeNOPs()->void:::Remove all NOPs from the instruction list (if possible) and update every object referring to them, i.e., branch instructions, local variables and exception handlers.
com.sun.org.apache.bcel.internal.generic.MethodGen#setMaxLocals(int)->void:::Set maximum number of local variables.
com.sun.org.apache.bcel.internal.generic.MethodGen#getMaxLocals()->int::: method gen get max locals
com.sun.org.apache.bcel.internal.generic.MethodGen#setMaxStack(int)->void:::Set maximum stack size for this method.
com.sun.org.apache.bcel.internal.generic.MethodGen#getMaxStack()->int::: method gen get max stack
com.sun.org.apache.bcel.internal.generic.MethodGen#getClassName()->String::: method gen get class name
com.sun.org.apache.bcel.internal.generic.MethodGen#setClassName(String)->void::: method gen set class name
com.sun.org.apache.bcel.internal.generic.MethodGen#setReturnType(Type)->void::: method gen set return type
com.sun.org.apache.bcel.internal.generic.MethodGen#getReturnType()->Type::: method gen get return type
com.sun.org.apache.bcel.internal.generic.MethodGen#setArgumentTypes(Type[])->void::: method gen set argument types
com.sun.org.apache.bcel.internal.generic.MethodGen#getArgumentTypes()->Type[]::: method gen get argument types
com.sun.org.apache.bcel.internal.generic.MethodGen#setArgumentType(int, Type)->void::: method gen set argument type
com.sun.org.apache.bcel.internal.generic.MethodGen#getArgumentType(int)->Type::: method gen get argument type
com.sun.org.apache.bcel.internal.generic.MethodGen#setArgumentNames(String[])->void::: method gen set argument names
com.sun.org.apache.bcel.internal.generic.MethodGen#getArgumentNames()->String[]::: method gen get argument names
com.sun.org.apache.bcel.internal.generic.MethodGen#setArgumentName(int, String)->void::: method gen set argument name
com.sun.org.apache.bcel.internal.generic.MethodGen#getArgumentName(int)->String::: method gen get argument name
com.sun.org.apache.bcel.internal.generic.MethodGen#getInstructionList()->InstructionList::: method gen get instruction list
com.sun.org.apache.bcel.internal.generic.MethodGen#setInstructionList(InstructionList)->void::: method gen set instruction list
com.sun.org.apache.bcel.internal.generic.MethodGen#getSignature()->String::: method gen get signature
com.sun.org.apache.bcel.internal.generic.MethodGen#setMaxStack()->void:::Computes max
com.sun.org.apache.bcel.internal.generic.MethodGen#setMaxLocals()->void:::Compute maximum number of local variables.
com.sun.org.apache.bcel.internal.generic.MethodGen#stripAttributes(boolean)->void:::Do not/Do produce attributes code attributesLineNumberTable and LocalVariableTable, like javac -O
com.sun.org.apache.bcel.internal.generic.MethodGen.BranchStack#push(InstructionHandle, int)->void::: branch stack push
com.sun.org.apache.bcel.internal.generic.MethodGen.BranchStack#pop()->BranchTarget::: branch stack pop
com.sun.org.apache.bcel.internal.generic.MethodGen#getMaxStack(ConstantPoolGen, InstructionList, CodeExceptionGen[])->int:::Computes stack usage of an instruction list by performing control flow analysis.
com.sun.org.apache.bcel.internal.generic.MethodGen#addObserver(MethodObserver)->void:::Add observer for this object.
com.sun.org.apache.bcel.internal.generic.MethodGen#removeObserver(MethodObserver)->void:::Remove observer for this object.
com.sun.org.apache.bcel.internal.generic.MethodGen#update()->void:::Call notify() method on all observers
com.sun.org.apache.bcel.internal.generic.MethodGen#toString()->String:::Return string representation close to declaration format, `public static void main(String[]) throws IOException', e.g.
com.sun.org.apache.bcel.internal.generic.MethodGen#copy(String, ConstantPoolGen)->MethodGen::: method gen copy
com.sun.org.apache.bcel.internal.generic.MethodGen#getAnnotationsOnParameter(int)->List:::Return a list of AnnotationGen objects representing parameter annotations
com.sun.org.apache.bcel.internal.generic.MethodGen#addParameterAnnotation(int, AnnotationEntryGen)->void::: method gen add parameter annotation
com.sun.org.apache.bcel.internal.generic.MethodGen#getComparator()->BCELComparator::: method gen get comparator
com.sun.org.apache.bcel.internal.generic.MethodGen#setComparator(BCELComparator)->void::: method gen set comparator
com.sun.org.apache.bcel.internal.generic.MethodGen#equals(Object)->boolean:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.MethodGen#hashCode()->int:::Return value as defined by given BCELComparator strategy
com.sun.org.apache.bcel.internal.generic.MethodObserver#notify(MethodGen)->void::: method observer notify
com.sun.org.apache.bcel.internal.generic.MONITORENTER#getExceptions()->Class[]::: r get exceptions
com.sun.org.apache.bcel.internal.generic.MONITORENTER#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.MONITOREXIT#getExceptions()->Class[]::: t get exceptions
com.sun.org.apache.bcel.internal.generic.MONITOREXIT#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#initFromFile(ByteSequence, boolean)->void:::Read needed data (i.e., no
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#getDimensions()->short::: y get dimensions
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#toString(boolean)->String::: y to string
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#toString(ConstantPool)->String::: y to string
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#consumeStack(ConstantPoolGen)->int:::Also works for instructions whose stack effect depends on the constant pool entry they reference.
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#getExceptions()->Class[]::: y get exceptions
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#getLoadClassType(ConstantPoolGen)->ObjectType::: y get load class type
com.sun.org.apache.bcel.internal.generic.MULTIANEWARRAY#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.NamedAndTyped#getName()->String::: named and typed get name
com.sun.org.apache.bcel.internal.generic.NamedAndTyped#getType()->Type::: named and typed get type
com.sun.org.apache.bcel.internal.generic.NamedAndTyped#setName(String)->void::: named and typed set name
com.sun.org.apache.bcel.internal.generic.NamedAndTyped#setType(Type)->void::: named and typed set type
com.sun.org.apache.bcel.internal.generic.NameSignatureInstruction#getNameAndType(ConstantPoolGen)->ConstantNameAndType::: name signature instruction get name and type
com.sun.org.apache.bcel.internal.generic.NameSignatureInstruction#getSignature(ConstantPoolGen)->String::: name signature instruction get signature
com.sun.org.apache.bcel.internal.generic.NameSignatureInstruction#getName(ConstantPoolGen)->String::: name signature instruction get name
com.sun.org.apache.bcel.internal.generic.NEW#getExceptions()->Class[]::: w get exceptions
com.sun.org.apache.bcel.internal.generic.NEW#getLoadClassType(ConstantPoolGen)->ObjectType::: w get load class type
com.sun.org.apache.bcel.internal.generic.NEW#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.NEWARRAY#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.NEWARRAY#getTypecode()->byte::: y get typecode
com.sun.org.apache.bcel.internal.generic.NEWARRAY#getType()->Type::: y get type
com.sun.org.apache.bcel.internal.generic.NEWARRAY#toString(boolean)->String::: y to string
com.sun.org.apache.bcel.internal.generic.NEWARRAY#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.NEWARRAY#getExceptions()->Class[]::: y get exceptions
com.sun.org.apache.bcel.internal.generic.NEWARRAY#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.NOP#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ObjectType#getInstance(String)->ObjectType::: object type get instance
com.sun.org.apache.bcel.internal.generic.ObjectType#getClassName()->String::: object type get class name
com.sun.org.apache.bcel.internal.generic.ObjectType#hashCode()->int::: object type hash code
com.sun.org.apache.bcel.internal.generic.ObjectType#equals(Object)->boolean::: object type equals
com.sun.org.apache.bcel.internal.generic.ObjectType#referencesClass()->boolean:::If "this" doesn't reference a class, it references an interface or a non-existant entity.
com.sun.org.apache.bcel.internal.generic.ObjectType#referencesInterface()->boolean:::If "this" doesn't reference an interface, it references a class or a non-existant entity.
com.sun.org.apache.bcel.internal.generic.ObjectType#referencesClassExact()->boolean:::Return true if this type references a class, false if it references an interface.
com.sun.org.apache.bcel.internal.generic.ObjectType#referencesInterfaceExact()->boolean:::Return true if this type references an interface, false if it references a class.
com.sun.org.apache.bcel.internal.generic.ObjectType#subclassOf(ObjectType)->boolean:::Return true if this type is a subclass of given ObjectType.
com.sun.org.apache.bcel.internal.generic.ObjectType#accessibleTo(ObjectType)->boolean:::Java Virtual Machine Specification edition 2,  5.4.4 Access Control
com.sun.org.apache.bcel.internal.generic.POP#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.POP2#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.PUSH#getInstructionList()->InstructionList::: h get instruction list
com.sun.org.apache.bcel.internal.generic.PUSH#getInstruction()->Instruction::: h get instruction
com.sun.org.apache.bcel.internal.generic.PUSH#toString()->String::: h to string
com.sun.org.apache.bcel.internal.generic.PUTFIELD#consumeStack(ConstantPoolGen)->int::: d consume stack
com.sun.org.apache.bcel.internal.generic.PUTFIELD#getExceptions()->Class[]::: d get exceptions
com.sun.org.apache.bcel.internal.generic.PUTFIELD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.PUTSTATIC#consumeStack(ConstantPoolGen)->int::: c consume stack
com.sun.org.apache.bcel.internal.generic.PUTSTATIC#getExceptions()->Class[]::: c get exceptions
com.sun.org.apache.bcel.internal.generic.PUTSTATIC#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ReferenceType#isCastableTo(Type)->boolean:::Return true iff this type is castable to another type t as defined in the JVM specification
com.sun.org.apache.bcel.internal.generic.ReferenceType#isAssignmentCompatibleWith(Type)->boolean:::Return true iff this is assignment compatible with another type t as defined in the JVM specification; see the AASTORE definition there.
com.sun.org.apache.bcel.internal.generic.ReferenceType#getFirstCommonSuperclass(ReferenceType)->ReferenceType:::This commutative operation returns the first common superclass (narrowest ReferenceType referencing a class, not an interface)
com.sun.org.apache.bcel.internal.generic.ReferenceType#firstCommonSuperclass(ReferenceType)->ReferenceType:::This commutative operation returns the first common superclass (narrowest ReferenceType referencing a class, not an interface)
com.sun.org.apache.bcel.internal.generic.RET#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.RET#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.RET#getIndex()->int::: t get index
com.sun.org.apache.bcel.internal.generic.RET#setIndex(int)->void:::Set index of local variable containg the return address
com.sun.org.apache.bcel.internal.generic.RET#toString(boolean)->String::: t to string
com.sun.org.apache.bcel.internal.generic.RET#getType(ConstantPoolGen)->Type::: t get type
com.sun.org.apache.bcel.internal.generic.RET#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.RETURN#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.ReturnaddressType#hashCode()->int::: returnaddress type hash code
com.sun.org.apache.bcel.internal.generic.ReturnaddressType#equals(Object)->boolean:::Returns if the two Returnaddresses refer to the same target.
com.sun.org.apache.bcel.internal.generic.ReturnaddressType#getTarget()->InstructionHandle::: returnaddress type get target
com.sun.org.apache.bcel.internal.generic.ReturnInstruction#getType()->Type::: return instruction get type
com.sun.org.apache.bcel.internal.generic.ReturnInstruction#getExceptions()->Class[]::: return instruction get exceptions
com.sun.org.apache.bcel.internal.generic.ReturnInstruction#getType(ConstantPoolGen)->Type::: return instruction get type
com.sun.org.apache.bcel.internal.generic.SALOAD#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.SASTORE#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.Select#updatePosition(int, int)->int:::Since this is a variable length instruction, it may shift the following instructions which then need to update their position
com.sun.org.apache.bcel.internal.generic.Select#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.Select#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.Select#toString(boolean)->String::: select to string
com.sun.org.apache.bcel.internal.generic.Select#setTarget(int, InstructionHandle)->void:::Set branch target for `i'th case
com.sun.org.apache.bcel.internal.generic.Select#updateTarget(InstructionHandle, InstructionHandle)->void::: select update target
com.sun.org.apache.bcel.internal.generic.Select#containsTarget(InstructionHandle)->boolean::: select contains target
com.sun.org.apache.bcel.internal.generic.Select#clone()->Object::: select clone
com.sun.org.apache.bcel.internal.generic.Select#dispose()->void:::Inform targets that they're not targeted anymore.
com.sun.org.apache.bcel.internal.generic.Select#getMatchs()->int[]::: select get matchs
com.sun.org.apache.bcel.internal.generic.Select#getIndices()->int[]::: select get indices
com.sun.org.apache.bcel.internal.generic.Select#getTargets()->InstructionHandle[]::: select get targets
com.sun.org.apache.bcel.internal.generic.Select#getMatch(int)->int::: select get match
com.sun.org.apache.bcel.internal.generic.Select#getIndices(int)->int::: select get indices
com.sun.org.apache.bcel.internal.generic.Select#getTarget(int)->InstructionHandle::: select get target
com.sun.org.apache.bcel.internal.generic.Select#getFixed_length()->int::: select get fixed_length
com.sun.org.apache.bcel.internal.generic.Select#setFixed_length(int)->void::: select set fixed_length
com.sun.org.apache.bcel.internal.generic.Select#getMatch_length()->int::: select get match_length
com.sun.org.apache.bcel.internal.generic.Select#setMatch_length(int)->int::: select set match_length
com.sun.org.apache.bcel.internal.generic.Select#setMatch(int, int)->void::: select set match
com.sun.org.apache.bcel.internal.generic.Select#setIndices(int[])->void::: select set indices
com.sun.org.apache.bcel.internal.generic.Select#setMatches(int[])->void::: select set matches
com.sun.org.apache.bcel.internal.generic.Select#setTargets(InstructionHandle[])->void::: select set targets
com.sun.org.apache.bcel.internal.generic.Select#getPadding()->int::: select get padding
com.sun.org.apache.bcel.internal.generic.Select#setIndices(int, int)->int::: select set indices
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#getElementValue()->ElementValue:::Return immutable variant
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#getIndex()->int::: simple element value gen get index
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#getValueString()->String::: simple element value gen get value string
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#getValueInt()->int::: simple element value gen get value int
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#stringifyValue()->String::: simple element value gen stringify value
com.sun.org.apache.bcel.internal.generic.SimpleElementValueGen#dump(DataOutputStream)->void::: simple element value gen dump
com.sun.org.apache.bcel.internal.generic.SIPUSH#dump(DataOutputStream)->void:::Dump instruction as short code to stream out.
com.sun.org.apache.bcel.internal.generic.SIPUSH#toString(boolean)->String::: h to string
com.sun.org.apache.bcel.internal.generic.SIPUSH#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.SIPUSH#getValue()->Number::: h get value
com.sun.org.apache.bcel.internal.generic.SIPUSH#getType(ConstantPoolGen)->Type::: h get type
com.sun.org.apache.bcel.internal.generic.SIPUSH#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.StackConsumer#consumeStack(ConstantPoolGen)->int::: stack consumer consume stack
com.sun.org.apache.bcel.internal.generic.StackInstruction#getType(ConstantPoolGen)->Type::: stack instruction get type
com.sun.org.apache.bcel.internal.generic.StackProducer#produceStack(ConstantPoolGen)->int::: stack producer produce stack
com.sun.org.apache.bcel.internal.generic.StoreInstruction#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.SWAP#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.SWITCH#getInstructionList()->InstructionList::: h get instruction list
com.sun.org.apache.bcel.internal.generic.SWITCH#getInstruction()->Instruction::: h get instruction
com.sun.org.apache.bcel.internal.generic.TABLESWITCH#dump(DataOutputStream)->void:::Dump instruction as byte code to stream out.
com.sun.org.apache.bcel.internal.generic.TABLESWITCH#initFromFile(ByteSequence, boolean)->void:::Read needed data (e.g
com.sun.org.apache.bcel.internal.generic.TABLESWITCH#accept(Visitor)->void:::Call corresponding visitor method(s)
com.sun.org.apache.bcel.internal.generic.TargetLostException#getTargets()->InstructionHandle[]::: target lost exception get targets
com.sun.org.apache.bcel.internal.generic.Type#hashCode()->int::: type hash code
com.sun.org.apache.bcel.internal.generic.Type#equals(Object)->boolean::: type equals
com.sun.org.apache.bcel.internal.generic.Type#getSignature()->String::: type get signature
com.sun.org.apache.bcel.internal.generic.Type#getType()->byte::: type get type
com.sun.org.apache.bcel.internal.generic.Type#normalizeForStackOrLocal()->Type:::boolean, short and char variable are considered as int in the stack or local variable area
com.sun.org.apache.bcel.internal.generic.Type#getSize()->int::: type get size
com.sun.org.apache.bcel.internal.generic.Type#toString()->String::: type to string
com.sun.org.apache.bcel.internal.generic.Type#getMethodSignature(Type, Type[])->String:::Convert type to Java method signature, e.g
com.sun.org.apache.bcel.internal.generic.Type#getType(String)->Type::: type get type
com.sun.org.apache.bcel.internal.generic.Type#getReturnType(String)->Type:::Convert return value of a method (signature) to a Type object.
com.sun.org.apache.bcel.internal.generic.Type#getArgumentTypes(String)->Type[]:::Convert arguments of a method (signature) to an array of Type objects.
com.sun.org.apache.bcel.internal.generic.Type#getType(java.lang.Class)->Type:::Convert runtime java.lang.Class to BCEL Type object.
com.sun.org.apache.bcel.internal.generic.Type#getTypes(java.lang.Class[])->Type[]:::Convert runtime java.lang.Class[] to BCEL Type objects.
com.sun.org.apache.bcel.internal.generic.Type#getSignature(java.lang.reflect.Method)->String::: type get signature
com.sun.org.apache.bcel.internal.generic.Type#size(int)->int::: type size
com.sun.org.apache.bcel.internal.generic.Type#consumed(int)->int::: type consumed
com.sun.org.apache.bcel.internal.generic.Type#encode(int, int)->int::: type encode
com.sun.org.apache.bcel.internal.generic.Type#getArgumentTypesSize(String)->int::: type get argument types size
com.sun.org.apache.bcel.internal.generic.Type#getTypeSize(String)->int::: type get type size
com.sun.org.apache.bcel.internal.generic.Type#getReturnTypeSize(String)->int::: type get return type size
com.sun.org.apache.bcel.internal.generic.Type#setSignature(String)->void::: type set signature
com.sun.org.apache.bcel.internal.generic.TypedInstruction#getType(ConstantPoolGen)->Type::: typed instruction get type
com.sun.org.apache.bcel.internal.generic.Visitor#visitStackInstruction(StackInstruction)->void::: visitor visit stack instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitLocalVariableInstruction(LocalVariableInstruction)->void::: visitor visit local variable instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitBranchInstruction(BranchInstruction)->void::: visitor visit branch instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitLoadClass(LoadClass)->void::: visitor visit load class
com.sun.org.apache.bcel.internal.generic.Visitor#visitFieldInstruction(FieldInstruction)->void::: visitor visit field instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitIfInstruction(IfInstruction)->void::: visitor visit if instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitConversionInstruction(ConversionInstruction)->void::: visitor visit conversion instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitPopInstruction(PopInstruction)->void::: visitor visit pop instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitStoreInstruction(StoreInstruction)->void::: visitor visit store instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitTypedInstruction(TypedInstruction)->void::: visitor visit typed instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitSelect(Select)->void::: visitor visit select
com.sun.org.apache.bcel.internal.generic.Visitor#visitJsrInstruction(JsrInstruction)->void::: visitor visit jsr instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitGotoInstruction(GotoInstruction)->void::: visitor visit goto instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitUnconditionalBranch(UnconditionalBranch)->void::: visitor visit unconditional branch
com.sun.org.apache.bcel.internal.generic.Visitor#visitPushInstruction(PushInstruction)->void::: visitor visit push instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitArithmeticInstruction(ArithmeticInstruction)->void::: visitor visit arithmetic instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitCPInstruction(CPInstruction)->void::: visitor visit instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitInvokeInstruction(InvokeInstruction)->void::: visitor visit invoke instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitArrayInstruction(ArrayInstruction)->void::: visitor visit array instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitAllocationInstruction(AllocationInstruction)->void::: visitor visit allocation instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitReturnInstruction(ReturnInstruction)->void::: visitor visit return instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitFieldOrMethod(FieldOrMethod)->void::: visitor visit field or method
com.sun.org.apache.bcel.internal.generic.Visitor#visitConstantPushInstruction(ConstantPushInstruction)->void::: visitor visit constant push instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitExceptionThrower(ExceptionThrower)->void::: visitor visit exception thrower
com.sun.org.apache.bcel.internal.generic.Visitor#visitLoadInstruction(LoadInstruction)->void::: visitor visit load instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitVariableLengthInstruction(VariableLengthInstruction)->void::: visitor visit variable length instruction
com.sun.org.apache.bcel.internal.generic.Visitor#visitStackProducer(StackProducer)->void::: visitor visit stack producer
com.sun.org.apache.bcel.internal.generic.Visitor#visitStackConsumer(StackConsumer)->void::: visitor visit stack consumer
com.sun.org.apache.bcel.internal.generic.Visitor#visitACONST_NULL(ACONST_NULL)->void::: visitor visit t_ l
com.sun.org.apache.bcel.internal.generic.Visitor#visitGETSTATIC(GETSTATIC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPLT(IF_ICMPLT)->void::: visitor visit f_ t
com.sun.org.apache.bcel.internal.generic.Visitor#visitMONITOREXIT(MONITOREXIT)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFLT(IFLT)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitLSTORE(LSTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitPOP2(POP2)->void::: visitor visit p2
com.sun.org.apache.bcel.internal.generic.Visitor#visitBASTORE(BASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitISTORE(ISTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitCHECKCAST(CHECKCAST)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitFCMPG(FCMPG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2F(I2F)->void::: visitor visit i2 f
com.sun.org.apache.bcel.internal.generic.Visitor#visitATHROW(ATHROW)->void::: visitor visit w
com.sun.org.apache.bcel.internal.generic.Visitor#visitDCMPL(DCMPL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitARRAYLENGTH(ARRAYLENGTH)->void::: visitor visit h
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP(DUP)->void::: visitor visit p
com.sun.org.apache.bcel.internal.generic.Visitor#visitINVOKESTATIC(INVOKESTATIC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitLCONST(LCONST)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitDREM(DREM)->void::: visitor visit m
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFGE(IFGE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitCALOAD(CALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitLASTORE(LASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2D(I2D)->void::: visitor visit i2 d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDADD(DADD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitINVOKESPECIAL(INVOKESPECIAL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitIAND(IAND)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitPUTFIELD(PUTFIELD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitILOAD(ILOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDLOAD(DLOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDCONST(DCONST)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitNEW(NEW)->void::: visitor visit w
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFNULL(IFNULL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitLSUB(LSUB)->void::: visitor visit b
com.sun.org.apache.bcel.internal.generic.Visitor#visitL2I(L2I)->void::: visitor visit l2 i
com.sun.org.apache.bcel.internal.generic.Visitor#visitISHR(ISHR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitTABLESWITCH(TABLESWITCH)->void::: visitor visit h
com.sun.org.apache.bcel.internal.generic.Visitor#visitIINC(IINC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitDRETURN(DRETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitFSTORE(FSTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitDASTORE(DASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitIALOAD(IALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDDIV(DDIV)->void::: visitor visit v
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPGE(IF_ICMPGE)->void::: visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.Visitor#visitLAND(LAND)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitIDIV(IDIV)->void::: visitor visit v
com.sun.org.apache.bcel.internal.generic.Visitor#visitLOR(LOR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitCASTORE(CASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitFREM(FREM)->void::: visitor visit m
com.sun.org.apache.bcel.internal.generic.Visitor#visitLDC(LDC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitBIPUSH(BIPUSH)->void::: visitor visit h
com.sun.org.apache.bcel.internal.generic.Visitor#visitDSTORE(DSTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitF2L(F2L)->void::: visitor visit f2 l
com.sun.org.apache.bcel.internal.generic.Visitor#visitFMUL(FMUL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitLLOAD(LLOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitJSR(JSR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitFSUB(FSUB)->void::: visitor visit b
com.sun.org.apache.bcel.internal.generic.Visitor#visitSASTORE(SASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitALOAD(ALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP2_X2(DUP2_X2)->void::: visitor visit p2_ x2
com.sun.org.apache.bcel.internal.generic.Visitor#visitRETURN(RETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitDALOAD(DALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitSIPUSH(SIPUSH)->void::: visitor visit h
com.sun.org.apache.bcel.internal.generic.Visitor#visitDSUB(DSUB)->void::: visitor visit b
com.sun.org.apache.bcel.internal.generic.Visitor#visitL2F(L2F)->void::: visitor visit l2 f
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPGT(IF_ICMPGT)->void::: visitor visit f_ t
com.sun.org.apache.bcel.internal.generic.Visitor#visitF2D(F2D)->void::: visitor visit f2 d
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2L(I2L)->void::: visitor visit i2 l
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ACMPNE(IF_ACMPNE)->void::: visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.Visitor#visitPOP(POP)->void::: visitor visit p
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2S(I2S)->void::: visitor visit i2 s
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFEQ(IFEQ)->void::: visitor visit q
com.sun.org.apache.bcel.internal.generic.Visitor#visitSWAP(SWAP)->void::: visitor visit p
com.sun.org.apache.bcel.internal.generic.Visitor#visitIOR(IOR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitIREM(IREM)->void::: visitor visit m
com.sun.org.apache.bcel.internal.generic.Visitor#visitIASTORE(IASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitNEWARRAY(NEWARRAY)->void::: visitor visit y
com.sun.org.apache.bcel.internal.generic.Visitor#visitINVOKEINTERFACE(INVOKEINTERFACE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitINEG(INEG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitLCMP(LCMP)->void::: visitor visit p
com.sun.org.apache.bcel.internal.generic.Visitor#visitJSR_W(JSR_W)->void::: visitor visit r_ w
com.sun.org.apache.bcel.internal.generic.Visitor#visitMULTIANEWARRAY(MULTIANEWARRAY)->void::: visitor visit y
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP_X2(DUP_X2)->void::: visitor visit p_ x2
com.sun.org.apache.bcel.internal.generic.Visitor#visitSALOAD(SALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFNONNULL(IFNONNULL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitDMUL(DMUL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFNE(IFNE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPLE(IF_ICMPLE)->void::: visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.Visitor#visitLDC2_W(LDC2_W)->void::: visitor visit c2_ w
com.sun.org.apache.bcel.internal.generic.Visitor#visitGETFIELD(GETFIELD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitLADD(LADD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitNOP(NOP)->void::: visitor visit p
com.sun.org.apache.bcel.internal.generic.Visitor#visitFALOAD(FALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitINSTANCEOF(INSTANCEOF)->void::: visitor visit f
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFLE(IFLE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitLXOR(LXOR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitLRETURN(LRETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitFCONST(FCONST)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitIUSHR(IUSHR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitBALOAD(BALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP2(DUP2)->void::: visitor visit p2
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ACMPEQ(IF_ACMPEQ)->void::: visitor visit f_ q
com.sun.org.apache.bcel.internal.generic.Visitor#visitIMPDEP1(IMPDEP1)->void::: visitor visit p1
com.sun.org.apache.bcel.internal.generic.Visitor#visitMONITORENTER(MONITORENTER)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitLSHL(LSHL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitDCMPG(DCMPG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitD2L(D2L)->void::: visitor visit d2 l
com.sun.org.apache.bcel.internal.generic.Visitor#visitIMPDEP2(IMPDEP2)->void::: visitor visit p2
com.sun.org.apache.bcel.internal.generic.Visitor#visitL2D(L2D)->void::: visitor visit l2 d
com.sun.org.apache.bcel.internal.generic.Visitor#visitRET(RET)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitIFGT(IFGT)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitIXOR(IXOR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitINVOKEVIRTUAL(INVOKEVIRTUAL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitINVOKEDYNAMIC(INVOKEDYNAMIC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitFASTORE(FASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitIRETURN(IRETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPNE(IF_ICMPNE)->void::: visitor visit f_ e
com.sun.org.apache.bcel.internal.generic.Visitor#visitFLOAD(FLOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitLDIV(LDIV)->void::: visitor visit v
com.sun.org.apache.bcel.internal.generic.Visitor#visitPUTSTATIC(PUTSTATIC)->void::: visitor visit c
com.sun.org.apache.bcel.internal.generic.Visitor#visitAALOAD(AALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitD2I(D2I)->void::: visitor visit d2 i
com.sun.org.apache.bcel.internal.generic.Visitor#visitIF_ICMPEQ(IF_ICMPEQ)->void::: visitor visit f_ q
com.sun.org.apache.bcel.internal.generic.Visitor#visitAASTORE(AASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitARETURN(ARETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP2_X1(DUP2_X1)->void::: visitor visit p2_ x1
com.sun.org.apache.bcel.internal.generic.Visitor#visitFNEG(FNEG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitGOTO_W(GOTO_W)->void::: visitor visit o_ w
com.sun.org.apache.bcel.internal.generic.Visitor#visitD2F(D2F)->void::: visitor visit d2 f
com.sun.org.apache.bcel.internal.generic.Visitor#visitGOTO(GOTO)->void::: visitor visit o
com.sun.org.apache.bcel.internal.generic.Visitor#visitISUB(ISUB)->void::: visitor visit b
com.sun.org.apache.bcel.internal.generic.Visitor#visitF2I(F2I)->void::: visitor visit f2 i
com.sun.org.apache.bcel.internal.generic.Visitor#visitDNEG(DNEG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitICONST(ICONST)->void::: visitor visit t
com.sun.org.apache.bcel.internal.generic.Visitor#visitFDIV(FDIV)->void::: visitor visit v
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2B(I2B)->void::: visitor visit i2 b
com.sun.org.apache.bcel.internal.generic.Visitor#visitLNEG(LNEG)->void::: visitor visit g
com.sun.org.apache.bcel.internal.generic.Visitor#visitLREM(LREM)->void::: visitor visit m
com.sun.org.apache.bcel.internal.generic.Visitor#visitIMUL(IMUL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitIADD(IADD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitLSHR(LSHR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitLOOKUPSWITCH(LOOKUPSWITCH)->void::: visitor visit h
com.sun.org.apache.bcel.internal.generic.Visitor#visitDUP_X1(DUP_X1)->void::: visitor visit p_ x1
com.sun.org.apache.bcel.internal.generic.Visitor#visitFCMPL(FCMPL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitI2C(I2C)->void::: visitor visit i2 c
com.sun.org.apache.bcel.internal.generic.Visitor#visitLMUL(LMUL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitLUSHR(LUSHR)->void::: visitor visit r
com.sun.org.apache.bcel.internal.generic.Visitor#visitISHL(ISHL)->void::: visitor visit l
com.sun.org.apache.bcel.internal.generic.Visitor#visitLALOAD(LALOAD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitASTORE(ASTORE)->void::: visitor visit e
com.sun.org.apache.bcel.internal.generic.Visitor#visitANEWARRAY(ANEWARRAY)->void::: visitor visit y
com.sun.org.apache.bcel.internal.generic.Visitor#visitFRETURN(FRETURN)->void::: visitor visit n
com.sun.org.apache.bcel.internal.generic.Visitor#visitFADD(FADD)->void::: visitor visit d
com.sun.org.apache.bcel.internal.generic.Visitor#visitBREAKPOINT(BREAKPOINT)->void::: visitor visit t

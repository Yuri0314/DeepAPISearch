awtLocalization#getContents():::awt localization get contents:::return->new->ObjectArrs
awtLocalization_ja#getContents():::awt localization_ja get contents:::return->new->ObjectArrs
awtLocalization_zh_CN#getContents():::awt localization_zh_ n get contents:::return->new->ObjectArrs
ThemeReader#flush()::: theme reader flush:::
ThemeReader#initThemes()::: theme reader init themes:::
ThemeReader#isThemed()::: theme reader is themed:::writeLock->lock->try->initThemes->return->catch->finally->writeLock->unlock
ThemeReader#isXPStyleEnabled()::: theme reader is style enabled:::return
ThemeReader#getThemeImpl(String)::: theme reader get theme impl:::theme->widgetToTheme->get->if->i->widget->indexOf->if->widget->substring->setWindowTheme->widget->substring->openTheme->setWindowTheme->else->openTheme->widgetToTheme->put->return
ThemeReader#getTheme(String)::: theme reader get theme:::if->throw->new->IllegalStateException->if->readLock->unlock->writeLock->lock->try->if->foreach->widgetToTheme->values->closeTheme->widgetToTheme->clear->catch->finally->readLock->lock->writeLock->unlock->theme->widgetToTheme->get->if->readLock->unlock->writeLock->lock->try->getThemeImpl->catch->finally->readLock->lock->writeLock->unlock->return
ThemeReader#paintBackground(int[], long, int, int, int, int, int, int, int)::: theme reader paint background:::
ThemeReader#paintBackground(int[], String, int, int, int, int, int, int, int)::: theme reader paint background:::readLock->lock->try->getTheme->paintBackground->catch->finally->readLock->unlock
ThemeReader#getThemeMargins(long, int, int, int)::: theme reader get theme margins:::
ThemeReader#getThemeMargins(String, int, int, int)::: theme reader get theme margins:::readLock->lock->try->return->getTheme->getThemeMargins->catch->finally->readLock->unlock
ThemeReader#isThemePartDefined(long, int, int)::: theme reader is theme part defined:::
ThemeReader#isThemePartDefined(String, int, int)::: theme reader is theme part defined:::readLock->lock->try->return->getTheme->isThemePartDefined->catch->finally->readLock->unlock
ThemeReader#getColor(long, int, int, int)::: theme reader get color:::
ThemeReader#getColor(String, int, int, int)::: theme reader get color:::readLock->lock->try->return->getTheme->getColor->catch->finally->readLock->unlock
ThemeReader#getInt(long, int, int, int)::: theme reader get int:::
ThemeReader#getInt(String, int, int, int)::: theme reader get int:::readLock->lock->try->return->getTheme->getInt->catch->finally->readLock->unlock
ThemeReader#getEnum(long, int, int, int)::: theme reader get enum:::
ThemeReader#getEnum(String, int, int, int)::: theme reader get enum:::readLock->lock->try->return->getTheme->getEnum->catch->finally->readLock->unlock
ThemeReader#getBoolean(long, int, int, int)::: theme reader get boolean:::
ThemeReader#getBoolean(String, int, int, int)::: theme reader get boolean:::readLock->lock->try->return->getTheme->getBoolean->catch->finally->readLock->unlock
ThemeReader#getSysBoolean(long, int)::: theme reader get sys boolean:::
ThemeReader#getSysBoolean(String, int)::: theme reader get sys boolean:::readLock->lock->try->return->getTheme->getSysBoolean->catch->finally->readLock->unlock
ThemeReader#getPoint(long, int, int, int)::: theme reader get point:::
ThemeReader#getPoint(String, int, int, int)::: theme reader get point:::readLock->lock->try->return->getTheme->getPoint->catch->finally->readLock->unlock
ThemeReader#getPosition(long, int, int, int)::: theme reader get position:::
ThemeReader#getPosition(String, int, int, int)::: theme reader get position:::readLock->lock->try->return->getTheme->getPosition->catch->finally->readLock->unlock
ThemeReader#getPartSize(long, int, int)::: theme reader get part size:::
ThemeReader#getPartSize(String, int, int)::: theme reader get part size:::readLock->lock->try->return->getTheme->getPartSize->catch->finally->readLock->unlock
ThemeReader#openTheme(String)::: theme reader open theme:::
ThemeReader#closeTheme(long)::: theme reader close theme:::
ThemeReader#setWindowTheme(String)::: theme reader set window theme:::
ThemeReader#getThemeTransitionDuration(long, int, int, int, int)::: theme reader get theme transition duration:::
ThemeReader#getThemeTransitionDuration(String, int, int, int, int)::: theme reader get theme transition duration:::readLock->lock->try->return->getTheme->getThemeTransitionDuration->catch->finally->readLock->unlock
ThemeReader#isGetThemeTransitionDurationDefined()::: theme reader is get theme transition duration defined:::
ThemeReader#getThemeBackgroundContentMargins(long, int, int, int, int)::: theme reader get theme background content margins:::
ThemeReader#getThemeBackgroundContentMargins(String, int, int, int, int)::: theme reader get theme background content margins:::readLock->lock->try->return->getTheme->getThemeBackgroundContentMargins->catch->finally->readLock->unlock
TranslucentWindowPainter#createInstance(WWindowPeer):::Creates an instance of the painter for particular peer.:::gc->peer->getGraphicsConfiguration->if->gcName->gc->getClass->getSimpleName->agc->if->agc->getContextCapabilities->getCaps->if->gcName->startsWith->return->new->VIOptD3DWindowPainter->else->if->gcName->startsWith->return->new->VIOptWGLWindowPainter->return->new->BIWindowPainter
TranslucentWindowPainter#getBackBuffer(boolean):::Creates (if needed), clears (if requested) and returns the buffer for this painter.:::
TranslucentWindowPainter#update(Image):::Updates the window associated with this painter with the contents of the passed image:::
TranslucentWindowPainter#getGraphics(boolean):::Create (if needed), clears back buffer (if requested) and return graphics for this class depending upon the buffer type:::
TranslucentWindowPainter#flush():::Flushes the resources associated with the painter:::
TranslucentWindowPainter#updateWindow(boolean):::Updates the window associated with the painter.:::done->while->if->g->getGraphics->try->window->paintAll->catch->finally->g->dispose->getBackBuffer->update->if
TranslucentWindowPainter#clearImage(Image)::: translucent window painter clear image:::g->bb->getGraphics->w->bb->getWidth->h->bb->getHeight->g->setComposite->g->new->Color->setColor->g->fillRect->return
TranslucentWindowPainter.BIWindowPainter#getBackBuffer(boolean)::: window painter get back buffer:::gc->peer->getGraphicsConfiguration->transform->gc->getDefaultTransform->w->Region->window->getWidth->transform->getScaleX->clipRound->h->Region->window->getHeight->transform->getScaleY->clipRound->if->backBuffer->getWidth->backBuffer->getHeight->flush->new->BufferedImage->return->clearImage
TranslucentWindowPainter.BIWindowPainter#update(Image)::: window painter update:::viBB->if->bi->data->bi->getRaster->getDataBuffer->getData->peer->bi->getWidth->bi->getHeight->updateWindowImpl->return->else->if->if->s->getDestSurface->if->w->viBB->getWidth->h->viBB->getHeight->bisd->data->bisd->getRaster->getDataBuffer->getData->peer->updateWindowImpl->return->bi->clearImage->data->bi->getRaster->getDataBuffer->getData->peer->bi->getWidth->bi->getHeight->updateWindowImpl->return->viBB->contentsLost
TranslucentWindowPainter.BIWindowPainter#flush()::: window painter flush:::if->backBuffer->flush
TranslucentWindowPainter.BIWindowPainter#getGraphics(boolean)::: window painter get graphics:::g->getBackBuffer->getGraphics->peer->getGraphicsConfiguration->getDefaultTransform->transform->return
TranslucentWindowPainter.VIWindowPainter#getBackBuffer(boolean)::: window painter get back buffer:::w->window->getWidth->h->window->getHeight->gc->peer->getGraphicsConfiguration->if->viBB->getWidth->viBB->getHeight->viBB->validate->flush->if->agc->agc->createCompatibleVolatileImage->if->gc->createCompatibleVolatileImage->viBB->validate->return->clearImage
TranslucentWindowPainter.VIWindowPainter#flush()::: window painter flush:::if->viBB->flush
TranslucentWindowPainter.VIWindowPainter#getGraphics(boolean)::: window painter get graphics:::return->getBackBuffer->getGraphics
TranslucentWindowPainter.VIOptWindowPainter#updateWindowAccel(long, int, int)::: opt window painter update window accel:::
TranslucentWindowPainter.VIOptWindowPainter#update(Image)::: opt window painter update:::if->s->getDestSurface->if->arr->as->w->as->getBounds->h->as->getBounds->rq->as->getContext->getRenderQueue->rq->lock->try->BufferedContext->validateContext->rq->new->Runnable->flushAndInvokeNow->catch->finally->rq->unlock->return->return->super->update
TranslucentWindowPainter.VIOptD3DWindowPainter#updateWindowAccel(long, int, int)::: opt d3 window painter update window accel:::return->peer->getData->updateWindowAccelImpl
TranslucentWindowPainter.VIOptWGLWindowPainter#updateWindowAccel(long, int, int)::: opt window painter update window accel:::return->updateWindowAccelImpl
WButtonPeer#getMinimumSize()::: button peer get minimum size:::fm->getFont->getFontMetrics->label->getLabel->if->return->fm->stringWidth->fm->getHeight->new->Dimension
WButtonPeer#isFocusable()::: button peer is focusable:::return
WButtonPeer#setLabel(String)::: button peer set label:::
WButtonPeer#create(WComponentPeer)::: button peer create:::
WButtonPeer#handleAction(long, int)::: button peer handle action:::WToolkit->new->Runnable->executeOnEventHandlerThread
WButtonPeer#shouldClearRectBeforePaint()::: button peer should clear rect before paint:::return
WButtonPeer#initIDs():::Initialize JNI field and method IDs:::
WButtonPeer#handleJavaKeyEvent(KeyEvent)::: button peer handle java key event:::switch->e->getID->if->e->getKeyCode->e->getWhen->e->getModifiers->handleAction->break->return
WCanvasPeer#create(WComponentPeer)::: canvas peer create:::
WCanvasPeer#initialize()::: canvas peer initialize:::SunToolkit->getSunAwtNoerasebackground->eraseBackgroundOnResize->SunToolkit->getSunAwtErasebackgroundonresize->if->PaintEventDispatcher->getPaintEventDispatcher->shouldDoNativeBackgroundErase->setNativeBackgroundErase->super->initialize->bg->getBackground->if->setBackground
WCanvasPeer#paint(Graphics)::: canvas peer paint:::d->getSize->if->g->clearRect->else->g->getBackground->setColor->g->fillRect->g->getForeground->setColor->super->paint
WCanvasPeer#shouldClearRectBeforePaint()::: canvas peer should clear rect before paint:::return
WCanvasPeer#disableBackgroundErase()::: canvas peer disable background erase:::setNativeBackgroundErase
WCanvasPeer#setNativeBackgroundErase(boolean, boolean)::: canvas peer set native background erase:::
WCanvasPeer#getAppropriateGraphicsConfiguration(GraphicsConfiguration)::: canvas peer get appropriate graphics configuration:::return
WCheckboxMenuItemPeer#setState(boolean)::: checkbox menu item peer set state:::
WCheckboxMenuItemPeer#handleAction(boolean)::: checkbox menu item peer handle action:::target->WToolkit->new->Runnable->executeOnEventHandlerThread
WCheckboxPeer#setState(boolean)::: checkbox peer set state:::
WCheckboxPeer#setCheckboxGroup(CheckboxGroup)::: checkbox peer set checkbox group:::
WCheckboxPeer#setLabel(String)::: checkbox peer set label:::
WCheckboxPeer#getCheckMarkSize()::: checkbox peer get check mark size:::
WCheckboxPeer#getMinimumSize()::: checkbox peer get minimum size:::lbl->getLabel->marksize->getCheckMarkSize->if->fm->getFont->getFontMetrics->return->fm->stringWidth->Math->fm->getHeight->max->new->Dimension
WCheckboxPeer#isFocusable()::: checkbox peer is focusable:::return
WCheckboxPeer#create(WComponentPeer)::: checkbox peer create:::
WCheckboxPeer#initialize()::: checkbox peer initialize:::t->t->getState->setState->t->getCheckboxGroup->setCheckboxGroup->bg->getBackground->if->setBackground->super->initialize
WCheckboxPeer#shouldClearRectBeforePaint()::: checkbox peer should clear rect before paint:::return
WCheckboxPeer#handleAction(boolean)::: checkbox peer handle action:::cb->WToolkit->new->Runnable->executeOnEventHandlerThread
WChoicePeer#getMinimumSize()::: choice peer get minimum size:::fm->getFont->getFontMetrics->c->w->for->i->c->getItemCount->return->Math->fm->getHeight->max->new->Dimension
WChoicePeer#isFocusable()::: choice peer is focusable:::return
WChoicePeer#select(int)::: choice peer select:::
WChoicePeer#add(String, int)::: choice peer add:::new->StringArr->addItems
WChoicePeer#shouldClearRectBeforePaint()::: choice peer should clear rect before paint:::return
WChoicePeer#removeAll()::: choice peer remove all:::
WChoicePeer#remove(int)::: choice peer remove:::
WChoicePeer#addItems(String[], int)::: choice peer add items:::
WChoicePeer#reshape(int, int, int, int)::: choice peer reshape:::
WChoicePeer#create(WComponentPeer)::: choice peer create:::
WChoicePeer#initialize()::: choice peer initialize:::opt->itemCount->opt->getItemCount->if->items->new->StringArr->for->i->addItems->if->opt->getSelectedIndex->opt->getSelectedIndex->select->parentWindow->SunToolkit->getContainingWindow->if->wpeer->AWTAccessor->getComponentAccessor->getPeer->if->new->WindowAdapter->wpeer->addWindowListener->super->initialize
WChoicePeer#disposeImpl()::: choice peer dispose impl:::parentWindow->SunToolkit->getContainingWindow->if->wpeer->AWTAccessor->getComponentAccessor->getPeer->if->wpeer->removeWindowListener->super->disposeImpl
WChoicePeer#handleAction(int)::: choice peer handle action:::c->WToolkit->new->Runnable->executeOnEventHandlerThread
WChoicePeer#getDropDownHeight()::: choice peer get drop down height:::c->fm->c->getFont->getFontMetrics->maxItems->Math->c->getItemCount->min->return->fm->getHeight
WChoicePeer#closeList()::: choice peer close list:::
WClipboard#getID()::: clipboard get d:::return
WClipboard#setContentsNative(Transferable)::: clipboard set contents native:::formatMap->WDataTransferer->getInstance->getDefaultFlavorTable->getFormatsForTransferable->openClipboard->try->foreach->formatMap->keySet->flavor->formatMap->get->try->bytes->WDataTransferer->getInstance->translateTransferable->publishClipboardData->catch->if->flavor->isMimeTypeEqual->e->printStackTrace->finally->catch->finally->closeClipboard
WClipboard#lostSelectionOwnershipImpl()::: clipboard lost selection ownership impl:::lostOwnershipImpl
WClipboard#clearNativeContext():::Currently delayed data rendering is not used for the Windows clipboard, so there is no native context to clear.:::
WClipboard#openClipboard(SunClipboard):::Call the Win32 OpenClipboard function:::
WClipboard#closeClipboard():::Call the Win32 CloseClipboard function if we have clipboard ownership, does nothing if we have not ownership.:::
WClipboard#publishClipboardData(long, byte[]):::Call the Win32 SetClipboardData function.:::
WClipboard#init()::: clipboard init:::
WClipboard#getClipboardFormats()::: clipboard get clipboard formats:::
WClipboard#getClipboardData(long)::: clipboard get clipboard data:::
WClipboard#registerClipboardViewerChecked()::: clipboard register clipboard viewer checked:::if->registerClipboardViewer
WClipboard#registerClipboardViewer()::: clipboard register clipboard viewer:::
WClipboard#unregisterClipboardViewerChecked():::The clipboard viewer (it's the toolkit window) is not unregistered until the toolkit window disposing since MSDN suggests removing the window from the clipboard viewer chain just before it is destroyed.:::
WClipboard#handleContentsChanged():::Upcall from native code.:::if->areFlavorListenersRegistered->return->formats->try->openClipboard->getClipboardFormats->catch->finally->closeClipboard->checkChange
WClipboard#createLocaleTransferable(long[]):::The clipboard must be opened.:::found->for->i->if->return->localeData->try->getClipboardData->catch->return->finally->localeDataFinal->return->new->Transferable
WComponentPeer#isObscured()::: component peer is obscured:::
WComponentPeer#canDetermineObscurity()::: component peer can determine obscurity:::return
WComponentPeer#pShow()::: component peer p show:::
WComponentPeer#hide()::: component peer hide:::
WComponentPeer#enable()::: component peer enable:::
WComponentPeer#disable()::: component peer disable:::
WComponentPeer#getHWnd()::: component peer get wnd:::return
WComponentPeer#getLocationOnScreen()::: component peer get location on screen:::
WComponentPeer#setVisible(boolean)::: component peer set visible:::if->show->else->hide
WComponentPeer#show()::: component peer show:::s->getSize->pShow
WComponentPeer#setEnabled(boolean)::: component peer set enabled:::if->enable->else->disable
WComponentPeer#reshapeNoCheck(int, int, int, int)::: component peer reshape no check:::
WComponentPeer#setBounds(int, int, int, int, int)::: component peer set bounds:::if->reshapeNoCheck->else->reshape->if->try->replaceSurfaceData->catch->finally
WComponentPeer#dynamicallyLayoutContainer()::: component peer dynamically layout container:::if->log->isLoggable->parent->WToolkit->getNativeContainer->if->log->fine->cont->WToolkit->new->Runnable->executeOnEventHandlerThread
WComponentPeer#paintDamagedAreaImmediately()::: component peer paint damaged area immediately:::updateWindow->SunToolkit->flushPendingEvents->paintArea->shouldClearRectBeforePaint->paint
WComponentPeer#updateWindow()::: component peer update window:::
WComponentPeer#paint(Graphics)::: component peer paint:::paint
WComponentPeer#repaint(long, int, int, int, int)::: component peer repaint:::
WComponentPeer#createPrintedPixels(int, int, int, int, int)::: component peer create printed pixels:::
WComponentPeer#print(Graphics)::: component peer print:::comp->totalW->comp->getWidth->totalH->comp->getHeight->hInc->if->for->startY->comp->print
WComponentPeer#coalescePaintEvent(PaintEvent)::: component peer coalesce paint event:::r->e->getUpdateRect->if->paintArea->e->getID->add->if->log->isLoggable->switch->e->getID->log->finest->return->log->finest->return
WComponentPeer#reshape(int, int, int, int)::: component peer reshape:::
WComponentPeer#handleJavaKeyEvent(KeyEvent)::: component peer handle java key event:::return
WComponentPeer#handleJavaMouseEvent(MouseEvent)::: component peer handle java mouse event:::switch->e->getID->if->e->getSource->isFocusOwner->WKeyboardFocusManagerPeer->shouldFocusOnClick->WKeyboardFocusManagerPeer->requestFocusFor->break
WComponentPeer#nativeHandleEvent(AWTEvent)::: component peer native handle event:::
WComponentPeer#handleEvent(AWTEvent)::: component peer handle event:::id->e->getID->if->isConsumed->isEnabled->if->handleJavaMouseEvent->else->if->if->handleJavaKeyEvent->return->switch->if->paintArea->shouldClearRectBeforePaint->paint->return->handleJavaFocusEvent->break->nativeHandleEvent
WComponentPeer#handleJavaFocusEvent(FocusEvent)::: component peer handle java focus event:::if->focusLog->isLoggable->focusLog->fe->toString->finer->fe->getID->setFocus
WComponentPeer#setFocus(boolean)::: component peer set focus:::
WComponentPeer#getMinimumSize()::: component peer get minimum size:::return->getSize
WComponentPeer#getPreferredSize()::: component peer get preferred size:::return->getMinimumSize
WComponentPeer#layout()::: component peer layout:::
WComponentPeer#getBounds()::: component peer get bounds:::return->getBounds
WComponentPeer#isFocusable()::: component peer is focusable:::return
WComponentPeer#getGraphicsConfiguration()::: component peer get graphics configuration:::if->return->else->return->getGraphicsConfiguration
WComponentPeer#getSurfaceData()::: component peer get surface data:::return
WComponentPeer#replaceSurfaceData():::Creates new surfaceData object and invalidates the previous surfaceData object:::replaceSurfaceData
WComponentPeer#createScreenSurface(boolean)::: component peer create screen surface:::gc->getGraphicsConfiguration->mgr->ScreenUpdateManager->getInstance->mgr->createScreenSurface
WComponentPeer#replaceSurfaceData(int, BufferCapabilities):::Multi-buffer version of replaceSurfaceData:::oldData->oldBB->synchronized->getTreeLock->synchronized->if->return->mgr->ScreenUpdateManager->getInstance->mgr->dropScreenSurface->createScreenSurface->if->oldData->invalidate->if->gc->getGraphicsConfiguration->gc->createBackBuffer->else->if->if->oldData->flush->if->oldBB->flush
WComponentPeer#replaceSurfaceDataLater()::: component peer replace surface data later:::r->new->Runnable->c->if->PaintEventDispatcher->getPaintEventDispatcher->queueSurfaceDataReplacing->new->InvocationEvent->postEvent
WComponentPeer#updateGraphicsData(GraphicsConfiguration)::: component peer update graphics data:::try->replaceSurfaceData->catch->finally->return
WComponentPeer#getColorModel()::: component peer get color model:::gc->getGraphicsConfiguration->if->return->gc->getColorModel->else->return
WComponentPeer#getDeviceColorModel()::: component peer get device color model:::gc->getGraphicsConfiguration->if->return->gc->getDeviceColorModel->else->return
WComponentPeer#getColorModel(int)::: component peer get color model:::gc->getGraphicsConfiguration->if->return->gc->getColorModel->else->return
WComponentPeer#getGraphics()::: component peer get graphics:::if->isDisposed->return->target->getTarget->window->SunToolkit->getContainingWindow->if->wpeer->AWTAccessor->getComponentAccessor->getPeer->g->wpeer->getTranslucentGraphics->if->x->y->for->c->c->getParent->g->translate->g->target->getWidth->target->getHeight->clipRect->return->surfaceData->if->bgColor->if->fgColor->if->font->if->mgr->ScreenUpdateManager->getInstance->return->mgr->createGraphics->return
WComponentPeer#getFontMetrics(Font)::: component peer get font metrics:::return->WFontMetrics->getFontMetrics
WComponentPeer#_dispose()::: component peer _dispose:::
WComponentPeer#disposeImpl()::: component peer dispose impl:::oldData->ScreenUpdateManager->getInstance->dropScreenSurface->oldData->invalidate->WToolkit->targetDisposedPeer->_dispose
WComponentPeer#disposeLater()::: component peer dispose later:::new->Runnable->new->InvocationEvent->postEvent
WComponentPeer#setForeground(Color)::: component peer set foreground:::c->getRGB->_setForeground
WComponentPeer#setBackground(Color)::: component peer set background:::c->getRGB->_setBackground
WComponentPeer#getBackgroundNoSync():::This method is intentionally not synchronized as it is called while holding other locks.:::return
WComponentPeer#_setForeground(int)::: component peer _set foreground:::
WComponentPeer#_setBackground(int)::: component peer _set background:::
WComponentPeer#setFont(Font)::: component peer set font:::_setFont
WComponentPeer#_setFont(Font)::: component peer _set font:::
WComponentPeer#updateCursorImmediately()::: component peer update cursor immediately:::WGlobalCursorManager->getCursorManager->updateCursorImmediately
WComponentPeer#requestFocus(Component, boolean, boolean, long, FocusEvent.Cause)::: component peer request focus:::if->WKeyboardFocusManagerPeer->processSynchronousLightweightTransfer->return->result->WKeyboardFocusManagerPeer->shouldNativelyFocusHeavyweight->switch->return->if->focusLog->isLoggable->focusLog->finer->parentWindow->SunToolkit->getContainingWindow->if->return->rejectFocusRequestHelper->wpeer->AWTAccessor->getComponentAccessor->getPeer->if->return->rejectFocusRequestHelper->res->wpeer->requestWindowFocus->if->focusLog->isLoggable->focusLog->finer->if->parentWindow->isFocused->return->rejectFocusRequestHelper->return->WKeyboardFocusManagerPeer->deliverFocus->return->return
WComponentPeer#rejectFocusRequestHelper(String)::: component peer reject focus request helper:::if->focusLog->isLoggable->focusLog->finer->WKeyboardFocusManagerPeer->removeLastFocusRequest->return
WComponentPeer#createImage(ImageProducer)::: component peer create image:::return->new->ToolkitImage
WComponentPeer#createImage(int, int)::: component peer create image:::gc->getGraphicsConfiguration->return->gc->createAcceleratedImage
WComponentPeer#createVolatileImage(int, int)::: component peer create volatile image:::return->new->SunVolatileImage
WComponentPeer#prepareImage(Image, int, int, ImageObserver)::: component peer prepare image:::return->Toolkit->getDefaultToolkit->prepareImage
WComponentPeer#checkImage(Image, int, int, ImageObserver)::: component peer check image:::return->Toolkit->getDefaultToolkit->checkImage
WComponentPeer#toString()::: component peer to string:::return->getClass->getName
WComponentPeer#create(WComponentPeer)::: component peer create:::
WComponentPeer#getNativeParent():::Gets the native parent of this peer:::parent->SunToolkit->getNativeContainer->return->WToolkit->targetToPeer
WComponentPeer#checkCreation()::: component peer check creation:::if->if->throw->else->throw->new->InternalError
WComponentPeer#start()::: component peer start:::
WComponentPeer#initialize()::: component peer initialize:::if->isVisible->show->fg->getForeground->if->setForeground->f->getFont->if->setFont->if->isEnabled->disable->r->getBounds->setBounds
WComponentPeer#handleRepaint(int, int, int, int)::: component peer handle repaint:::
WComponentPeer#handleExpose(int, int, int, int)::: component peer handle expose:::postPaintIfNecessary
WComponentPeer#handlePaint(int, int, int, int)::: component peer handle paint:::postPaintIfNecessary
WComponentPeer#postPaintIfNecessary(int, int, int, int)::: component peer post paint if necessary:::if->AWTAccessor->getComponentAccessor->getIgnoreRepaint->event->PaintEventDispatcher->getPaintEventDispatcher->createPaintEvent->if->postEvent
WComponentPeer#postEvent(AWTEvent)::: component peer post event:::preprocessPostEvent->WToolkit->WToolkit->targetToAppContext->postEvent
WComponentPeer#preprocessPostEvent(AWTEvent)::: component peer preprocess post event:::
WComponentPeer#beginLayout()::: component peer begin layout:::
WComponentPeer#endLayout()::: component peer end layout:::if->paintArea->isEmpty->getIgnoreRepaint->new->Rectangle->new->PaintEvent->postEvent
WComponentPeer#beginValidate()::: component peer begin validate:::
WComponentPeer#endValidate()::: component peer end validate:::
WComponentPeer#addDropTarget(DropTarget)::: component peer add drop target:::if->addNativeDropTarget
WComponentPeer#removeDropTarget(DropTarget)::: component peer remove drop target:::if->removeNativeDropTarget
WComponentPeer#addNativeDropTarget()::: component peer add native drop target:::
WComponentPeer#removeNativeDropTarget()::: component peer remove native drop target:::
WComponentPeer#nativeHandlesWheelScrolling()::: component peer native handles wheel scrolling:::
WComponentPeer#handlesWheelScrolling()::: component peer handles wheel scrolling:::return->nativeHandlesWheelScrolling
WComponentPeer#isPaintPending()::: component peer is paint pending:::return
WComponentPeer#createBuffers(int, BufferCapabilities)::: component peer create buffers:::gc->getGraphicsConfiguration->gc->assertOperationSupported->try->replaceSurfaceData->catch->throw->e->getMessage->new->AWTException->finally
WComponentPeer#destroyBuffers()::: component peer destroy buffers:::replaceSurfaceData
WComponentPeer#flip(int, int, int, int, BufferCapabilities.FlipContents)::: component peer flip:::backBuffer->if->throw->new->IllegalStateException->gc->getGraphicsConfiguration->gc->flip
WComponentPeer#getBackBuffer()::: component peer get back buffer:::backBuffer->if->throw->new->IllegalStateException->return
WComponentPeer#getBackBufferCaps()::: component peer get back buffer caps:::return
WComponentPeer#getBackBuffersNum()::: component peer get back buffers num:::return
WComponentPeer#shouldClearRectBeforePaint()::: component peer should clear rect before paint:::return
WComponentPeer#pSetParent(ComponentPeer)::: component peer p set parent:::
WComponentPeer#reparent(ContainerPeer)::: component peer reparent:::pSetParent
WComponentPeer#isReparentSupported()::: component peer is reparent supported:::return
WComponentPeer#setBoundsOperation(int)::: component peer set bounds operation:::
WComponentPeer#isAccelCapable():::Returns whether this component is capable of being hw accelerated:::if->isContainingTopLevelAccelCapable->return->isTranslucent->SunToolkit->isContainingTopLevelTranslucent->return->Win32GraphicsEnvironment->isVistaOS
WComponentPeer#disableAcceleration():::Disables acceleration for this peer.:::
WComponentPeer#setRectangularShape(int, int, int, int, Region)::: component peer set rectangular shape:::
WComponentPeer#isContainingTopLevelAccelCapable(Component)::: component peer is containing top level accel capable:::while->c->getParent->if->return->peer->AWTAccessor->getComponentAccessor->getPeer->return->peer->isAccelCapable
WComponentPeer#applyShape(Region):::Applies the shape to the native component window.:::if->shapeLog->isLoggable->shapeLog->finer->if->tx->winGraphicsConfig->getDefaultTransform->scaleX->tx->getScaleX->scaleY->tx->getScaleY->if->shape->getScaledRegion->shape->getLoX->shape->getLoY->shape->getHiX->shape->getHiY->shape->isRectangular->setRectangularShape->else->setRectangularShape
WComponentPeer#setZOrder(ComponentPeer):::Lowers this component at the bottom of the above component:::aboveHWND->getHWnd->setZOrder
WComponentPeer#setZOrder(long)::: component peer set order:::
WComponentPeer#isLightweightFramePeer()::: component peer is lightweight frame peer:::return
WCustomCursor#createNativeCursor(Image, int[], int, int, int, int)::: custom cursor create native cursor:::bimage->new->BufferedImage->g->bimage->getGraphics->try->if->ir->getImageRep->ir->reconstruct->g->drawImage->catch->finally->g->dispose->raster->bimage->getRaster->buffer->raster->getDataBuffer->data->getData->andMask->new->byteArr->npixels->for->i->ficW->raster->getWidth->if->getScanlineStride->bimage->getRaster->getDataBuffer->getData->raster->getWidth->raster->getHeight->createCursorIndirect
WCustomCursor#createCursorIndirect(int[], byte[], int, int, int, int, int)::: custom cursor create cursor indirect:::
WCustomCursor#getCursorWidth():::Return the current value of SM_CXCURSOR.:::
WCustomCursor#getCursorHeight():::Return the current value of SM_CYCURSOR.:::
WDataTransferer#getInstanceImpl()::: data transferer get instance impl:::if->new->WDataTransferer->return
WDataTransferer#getFormatsForFlavors(DataFlavor[], FlavorTable)::: data transferer get formats for flavors:::retval->super->getFormatsForFlavors->retval->remove->return
WDataTransferer#getDefaultUnicodeEncoding()::: data transferer get default unicode encoding:::return
WDataTransferer#translateTransferable(Transferable, DataFlavor, long)::: data transferer translate transferable:::bytes->if->if->contents->isDataFlavorSupported->super->translateTransferable->else->if->contents->isDataFlavorSupported->super->translateTransferable->else->HTMLCodec->super->translateTransferable->convertToHTMLFormat->else->super->translateTransferable->return
WDataTransferer#translateStream(InputStream, DataFlavor, long, Transferable)::: data transferer translate stream:::if->flavor->isFlavorTextType->EHTMLReadMode->getEHTMLReadMode->new->HTMLCodec->return->super->translateStream
WDataTransferer#translateBytes(byte[], DataFlavor, long, Transferable)::: data transferer translate bytes:::if->if->equals->throw->new->IOException->st->new->String->filenames->st->split->if->return->files->new->FileArr->for->i->return->Arrays->asList->if->flavor->getRepresentationClass->equals->charset->Charset->defaultCharset->name->if->localeTransferable->isDataFlavorSupported->try->localeTransferable->getTransferData->new->String->catch->finally->return->new->String->new->URL->return->super->translateBytes
WDataTransferer#isLocaleDependentTextFormat(long)::: data transferer is locale dependent text format:::return
WDataTransferer#isFileFormat(long)::: data transferer is file format:::return
WDataTransferer#getFormatForNativeAsLong(String)::: data transferer get format for native as long:::format->predefinedClipboardNameMap->get->if->Long->registerClipboardFormat->valueOf->return
WDataTransferer#getNativeForFormat(long)::: data transferer get native for format:::return->getClipboardFormatName
WDataTransferer#getToolkitThreadBlockedHandler()::: data transferer get toolkit thread blocked handler:::return
WDataTransferer#registerClipboardFormat(String):::Calls the Win32 RegisterClipboardFormat function to register a non-standard format.:::
WDataTransferer#getClipboardFormatName(long):::Calls the Win32 GetClipboardFormatName function which is the reverse operation of RegisterClipboardFormat.:::
WDataTransferer#isImageFormat(long)::: data transferer is image format:::return
WDataTransferer#imageToPlatformBytes(Image, long)::: data transferer image to platform bytes:::mimeType->if->else->if->if->return->imageToStandardBytes->width->height->if->ir->getImageRep->ir->reconstruct->ir->getWidth->ir->getHeight->else->image->getWidth->image->getHeight->mod->pad->cs->ColorSpace->getInstance->nBits->bOffs->colorModel->new->ComponentColorModel->raster->Raster->createInterleavedRaster->bimage->new->BufferedImage->imageFlipTransform->new->AffineTransform->g2d->bimage->createGraphics->try->g2d->drawImage->catch->finally->g2d->dispose->buffer->raster->getDataBuffer->imageData->buffer->getData->return->imageDataToPlatformImageBytes
WDataTransferer#convertFileListToBytes(ArrayList)::: data transferer convert file list to bytes:::bos->new->ByteArrayOutputStream->if->fileList->isEmpty->bos->write->else->for->i->fileList->size->bos->write->return
WDataTransferer#imageDataToPlatformImageBytes(byte[], int, int, long):::Returns a byte array which contains data special for the given format and for the given image data.:::
WDataTransferer#platformImageBytesToImage(byte[], long):::Translates either a byte array or an input stream which contain platform-specific image data in the given format into an Image.:::mimeType->if->else->if->if->return->standardImageBytesToImage->imageData->platformImageBytesToImageData->if->throw->new->IOException->len->width->height->buffer->new->DataBufferInt->raster->Raster->createPackedRaster->return->new->BufferedImage
WDataTransferer#platformImageBytesToImageData(byte[], long):::Translates a byte array which contains platform-specific image data in the given format into an integer array which contains pixel values in ARGB format:::
WDataTransferer#dragQueryFile(byte[])::: data transferer drag query file:::
WToolkitThreadBlockedHandler#enter()::: toolkit thread blocked handler enter:::if->isOwned->throw->new->IllegalMonitorStateException->unlock->startSecondaryEventLoop->lock
WToolkitThreadBlockedHandler#exit()::: toolkit thread blocked handler exit:::if->isOwned->throw->new->IllegalMonitorStateException->WToolkit->quitSecondaryEventLoop
WToolkitThreadBlockedHandler#startSecondaryEventLoop()::: toolkit thread blocked handler start secondary event loop:::
HTMLCodec#toPaddedString(int, int)::: codec to padded string:::string->len->string->length->if->array->new->charArr->Arrays->fill->buffer->new->StringBuffer->buffer->append->buffer->append->buffer->toString->return
HTMLCodec#convertToHTMLFormat(byte[]):::convertToHTMLFormat adds the MS HTML clipboard header to byte array that contains the parameters pairs:::htmlPrefix->htmlSuffix->stContext->new->String->stUpContext->stContext->toUpperCase->if->stUpContext->indexOf->if->stUpContext->indexOf->stBaseUrl->nStartHTML->VERSION->length->VERSION_NUM->length->EOLN->length->START_HTML->length->EOLN->length->END_HTML->length->EOLN->length->START_FRAGMENT->length->EOLN->length->END_FRAGMENT->length->EOLN->length->SOURCE_URL->length->stBaseUrl->length->EOLN->length->nStartFragment->htmlPrefix->length->nEndFragment->nEndHTML->htmlSuffix->length->header->START_FRAGMENT_CMT->length->new->StringBuilder->header->append->header->append->header->append->header->append->header->toPaddedString->append->header->append->header->append->header->toPaddedString->append->header->append->header->append->header->toPaddedString->append->header->append->header->append->header->toPaddedString->append->header->append->header->append->header->append->header->append->header->append->headerBytes->trailerBytes->try->header->toString->getBytes->htmlSuffix->getBytes->catch->finally->retval->new->byteArr->System->arraycopy->System->arraycopy->System->arraycopy->return
HTMLCodec#getBaseURL()::: codec get base l:::if->parseDescription->return
HTMLCodec#getVersion()::: codec get version:::if->parseDescription->return
HTMLCodec#parseDescription():::parseDescription parsing HTML clipboard header as it described in comment to convertToHTMLFormat:::bufferedStream->mark->astEntries->new->StringArr->bufferedReader->new->InputStreamReader->new->BufferedReader->iHeadSize->iCRSize->EOLN->length->iEntCount->bContinue->for->iEntry->if->if->if->if->if->switch->break->break->break->bufferedStream->reset->if->throw->new->IOException->curOffset->while->bufferedStream->skip->if->throw->new->IOException
HTMLCodec#read()::: codec read:::if->throw->new->IOException->if->parseDescription->if->return->retval->bufferedStream->read->if->return->return
HTMLCodec#close()::: codec close:::if->bufferedStream->close
WDefaultFontCharset#newEncoder()::: default font charset new encoder:::return->new->Encoder
WDefaultFontCharset.Encoder#canEncode(char)::: encoder can encode:::return->canConvert
WDefaultFontCharset#canConvert(char)::: default font charset can convert:::
WDefaultFontCharset#initIDs():::Initialize JNI field and method IDs:::
WDesktopPeer#init()::: desktop peer init:::
WDesktopPeer#isSupported(Action)::: desktop peer is supported:::switch->return->return
WDesktopPeer#open(File)::: desktop peer open:::this->ShellExecute
WDesktopPeer#edit(File)::: desktop peer edit:::this->ShellExecute
WDesktopPeer#print(File)::: desktop peer print:::this->ShellExecute
WDesktopPeer#mail(URI)::: desktop peer mail:::this->ShellExecute
WDesktopPeer#browse(URI)::: desktop peer browse:::this->ShellExecute
WDesktopPeer#ShellExecute(File, String)::: desktop peer  shell execute:::errMsg->file->getAbsolutePath->ShellExecute->if->throw->new->IOException
WDesktopPeer#ShellExecute(URI, String)::: desktop peer  shell execute:::errmsg->uri->toString->ShellExecute->if->throw->new->IOException
WDesktopPeer#ShellExecute(String, String)::: desktop peer  shell execute:::
WDesktopPeer#disableSuddenTermination()::: desktop peer disable sudden termination:::setSuddenTerminationEnabled
WDesktopPeer#enableSuddenTermination()::: desktop peer enable sudden termination:::setSuddenTerminationEnabled
WDesktopPeer#setSuddenTerminationEnabled(boolean)::: desktop peer set sudden termination enabled:::
WDesktopPeer#addAppEventListener(SystemEventListener)::: desktop peer add app event listener:::if->listenerList->add->if->listenerList->add
WDesktopPeer#removeAppEventListener(SystemEventListener)::: desktop peer remove app event listener:::if->listenerList->remove->if->listenerList->remove
WDesktopPeer#userSessionCallback(boolean, Reason)::: desktop peer user session callback:::listeners->listenerList->getListeners->foreach->EventQueue->if->use->new->UserSessionEvent->userSessionActivated->else->use->new->UserSessionEvent->userSessionDeactivated->invokeLater
WDesktopPeer#systemSleepCallback(boolean)::: desktop peer system sleep callback:::listeners->listenerList->getListeners->foreach->EventQueue->if->ssl->new->SystemSleepEvent->systemAwoke->else->ssl->new->SystemSleepEvent->systemAboutToSleep->invokeLater
WDesktopPeer#moveToTrash(File)::: desktop peer move to trash:::return->file->getAbsolutePath->moveToTrash
WDesktopPeer#moveToTrash(String)::: desktop peer move to trash:::
WDesktopProperties#initIDs():::Initialize JNI field and method IDs:::
WDesktopProperties#isWindowsProperty(String)::: desktop properties is windows property:::return->name->startsWith->name->startsWith->name->equals
WDesktopProperties#init()::: desktop properties init:::
WDesktopProperties#getKeyNames()::: desktop properties get key names:::keys->map->keySet->toArray->sortedKeys->new->StringArr->for->nkey->Arrays->sort->return
WDesktopProperties#getWindowsParameters()::: desktop properties get windows parameters:::
WDesktopProperties#setBooleanProperty(String, boolean)::: desktop properties set boolean property:::if->log->isLoggable->log->String->valueOf->fine->map->Boolean->valueOf->put
WDesktopProperties#setIntegerProperty(String, int)::: desktop properties set integer property:::if->log->isLoggable->log->String->valueOf->fine->map->Integer->valueOf->put
WDesktopProperties#setStringProperty(String, String)::: desktop properties set string property:::if->log->isLoggable->log->fine->map->put
WDesktopProperties#setColorProperty(String, int, int, int)::: desktop properties set color property:::color->new->Color->if->log->isLoggable->log->fine->map->put
WDesktopProperties#setFontProperty(String, String, int, int)::: desktop properties set font property:::mappedName->fontNameMap->get->if->font->new->Font->if->log->isLoggable->log->fine->map->put->sizeKey->iSize->Integer->valueOf->if->log->isLoggable->log->fine->map->put
WDesktopProperties#setSoundProperty(String, String)::: desktop properties set sound property:::soundRunnable->new->WinPlaySound->if->log->isLoggable->log->fine->map->put
WDesktopProperties#playWindowsSound(String)::: desktop properties play windows sound:::
WDesktopProperties.WinPlaySound#run()::: win play sound run:::WDesktopProperties.this->playWindowsSound
WDesktopProperties.WinPlaySound#toString()::: win play sound to string:::return
WDesktopProperties.WinPlaySound#equals(Object)::: win play sound equals:::if->return->try->return->winEventName->equals->catch->return->finally
WDesktopProperties.WinPlaySound#hashCode()::: win play sound hash code:::return->winEventName->hashCode
WDesktopProperties#getProperties()::: desktop properties get properties:::ThemeReader->flush->new->HashMap<String,Object>->getWindowsParameters->map->SunToolkit->getDesktopFontHints->put->map->getKeyNames->put->map->map->get->put->return->map->clone
WDesktopProperties#getDesktopAAHints()::: desktop properties get desktop hints:::fontSmoothingHint->fontSmoothingContrast->smoothingOn->map->get->if->smoothingOn->equals->typeID->map->get->if->typeID->intValue->typeID->intValue->else->orientID->map->get->if->orientID->intValue->else->map->get->if->Integer->valueOf->else->Integer->fontSmoothingContrast->intValue->valueOf->hints->new->RenderingHints->hints->put->if->hints->put->return
WDialogPeer#createAwtDialog(WComponentPeer)::: dialog peer create awt dialog:::
WDialogPeer#create(WComponentPeer)::: dialog peer create:::preCreate->createAwtDialog
WDialogPeer#showModal()::: dialog peer show modal:::
WDialogPeer#endModal()::: dialog peer end modal:::
WDialogPeer#initialize()::: dialog peer initialize:::target->if->target->isBackgroundSet->target->setBackground->super->initialize->if->target->getTitle->target->getTitle->setTitle->target->isResizable->setResizable
WDialogPeer#realShow()::: dialog peer real show:::dlg->if->dlg->getModalityType->showModal->else->super->realShow
WDialogPeer#hide()::: dialog peer hide:::dlg->if->dlg->getModalityType->endModal->else->super->hide
WDialogPeer#blockWindows(java.util.List)::: dialog peer block windows:::foreach->wp->AWTAccessor->getComponentAccessor->getPeer->if->wp->setModalBlocked
WDialogPeer#getMinimumSize()::: dialog peer get minimum size:::if->isUndecorated->return->super->getMinimumSize->else->return->getSysMinWidth->getSysMinHeight->new->Dimension
WDialogPeer#isTargetUndecorated()::: dialog peer is target undecorated:::return->isUndecorated
WDialogPeer#reshape(int, int, int, int)::: dialog peer reshape:::if->isUndecorated->super->reshape->else->reshapeFrame
WDialogPeer#pSetIMMOption(String)::: dialog peer p set option:::
WDialogPeer#notifyIMMOptionChange()::: dialog peer notify option change:::InputMethodManager->getInstance->notifyChangeRequest
WDragSourceContextPeer#startSecondaryEventLoop()::: drag source context peer start secondary event loop:::WToolkit->startSecondaryEventLoop
WDragSourceContextPeer#quitSecondaryEventLoop()::: drag source context peer quit secondary event loop:::WToolkit->quitSecondaryEventLoop
WDragSourceContextPeer#createDragSourceContextPeer(DragGestureEvent)::: drag source context peer create drag source context peer:::theInstance->setTrigger->return
WDragSourceContextPeer#startDrag(Transferable, long[], Map)::: drag source context peer start drag:::nativeCtxtLocal->getTrigger->getComponent->getTrigger->getTriggerEvent->getTrigger->getSourceAsDragGestureRecognizer->getSourceActions->createDragSource->if->throw->new->InvalidDnDOperationException->imageData->op->im->getDragImage->imageWidth->imageHeight->if->try->im->getWidth->im->getHeight->if->throw->new->InvalidDnDOperationException->getDragImageOffset->bi->new->BufferedImage->bi->getGraphics->drawImage->bi->getData->getDataBuffer->getData->catch->throw->ex->getMessage->new->InvalidDnDOperationException->finally->setNativeContext->WDropTargetContextPeer->setCurrentJVMLocalSourceTransferable->if->getNativeContext->getCursor->doDragDrop->else->getNativeContext->getCursor->doDragDrop
WDragSourceContextPeer#createDragSource(Component, Transferable, InputEvent, int, long[], Map)::: drag source context peer create drag source:::
WDragSourceContextPeer#doDragDrop(long, Cursor, int[], int, int, int, int)::: drag source context peer do drag drop:::
WDragSourceContextPeer#setNativeCursor(long, Cursor, int)::: drag source context peer set native cursor:::
WDropTargetContextPeer#getWDropTargetContextPeer()::: drop target context peer get drop target context peer:::return->new->WDropTargetContextPeer
WDropTargetContextPeer#getFileStream(String, long)::: drop target context peer get file stream:::return->new->WDropTargetContextPeerFileStream
WDropTargetContextPeer#getIStream(long)::: drop target context peer get stream:::return->new->WDropTargetContextPeerIStream
WDropTargetContextPeer#getNativeData(long)::: drop target context peer get native data:::return->getNativeDragContext->getData
WDropTargetContextPeer#doDropDone(boolean, int, boolean)::: drop target context peer do drop done:::getNativeDragContext->dropDone
WDropTargetContextPeer#eventPosted(SunDropTargetEvent)::: drop target context peer event posted:::if->e->getID->runnable->new->Runnable->peerEvent->e->getSource->new->PeerEvent->SunToolkit->executeOnEventHandlerThread
WDropTargetContextPeer#getData(long, long)::: drop target context peer get data:::
WDropTargetContextPeer#dropDone(long, boolean, int)::: drop target context peer drop done:::
WDropTargetContextPeerFileStream#close()::: drop target context peer file stream close:::if->super->close->freeStgMedium
WDropTargetContextPeerFileStream#freeStgMedium(long)::: drop target context peer file stream free stg medium:::
WDropTargetContextPeerIStream#available()::: drop target context peer stream available:::if->throw->new->IOException->return->Available
WDropTargetContextPeerIStream#Available(long)::: drop target context peer stream  available:::
WDropTargetContextPeerIStream#read()::: drop target context peer stream read:::if->throw->new->IOException->return->Read
WDropTargetContextPeerIStream#Read(long)::: drop target context peer stream  read:::
WDropTargetContextPeerIStream#read(byte[], int, int)::: drop target context peer stream read:::if->throw->new->IOException->return->ReadBytes
WDropTargetContextPeerIStream#ReadBytes(long, byte[], int, int)::: drop target context peer stream  read bytes:::
WDropTargetContextPeerIStream#close()::: drop target context peer stream close:::if->super->close->Close
WDropTargetContextPeerIStream#Close(long)::: drop target context peer stream  close:::
WEmbeddedFrame#addNotify()::: embedded frame add notify:::if->isDisplayable->toolkit->Toolkit->getDefaultToolkit->toolkit->createEmbeddedFrame->setPeer->super->addNotify
WEmbeddedFrame#getEmbedderHandle()::: embedded frame get embedder handle:::return
WEmbeddedFrame#print(long)::: embedded frame print:::bandImage->xscale->yscale->if->isPrinterDC->getPrintScaleFactor->frameHeight->getHeight->if->getWidth->if->if->return->Math->min->new->BufferedImage->clearGraphics->bandImage->getGraphics->clearGraphics->setColor->g2d->bandImage->getGraphics->g2d->translate->g2d->scale->ras->bandImage->getRaster->data->ras->getDataStorage->for->bandTop
WEmbeddedFrame#getPrintScaleFactor()::: embedded frame get print scale factor:::if->return->if->AccessController->new->PrivilegedAction<String>->doPrivileged->default_printDC_scale->scale->if->try->Integer->parseInt->if->catch->finally->return
WEmbeddedFrame#isPrinterDC(long)::: embedded frame is printer c:::
WEmbeddedFrame#printBand(long, byte[], int, int, int, int, int, int, int, int, int)::: embedded frame print band:::
WEmbeddedFrame#initIDs():::Initialize JNI field IDs:::
WEmbeddedFrame#activateEmbeddingTopLevel():::This method is called from the native code when this embedded frame should be activated:::
WEmbeddedFrame#synthesizeWindowActivation(boolean)::: embedded frame synthesize window activation:::peer->AWTAccessor->getComponentAccessor->getPeer->if->EventQueue->isDispatchThread->peer->emulateActivation->else->r->new->Runnable->WToolkit->WToolkit->targetToAppContext->new->InvocationEvent->postEvent
WEmbeddedFrame#registerAccelerator(AWTKeyStroke)::: embedded frame register accelerator:::
WEmbeddedFrame#unregisterAccelerator(AWTKeyStroke)::: embedded frame unregister accelerator:::
WEmbeddedFrame#notifyModalBlocked(Dialog, boolean):::Should be overridden in subclasses:::try->thisPeer->WToolkit->targetToPeer->blockerPeer->WToolkit->targetToPeer->notifyModalBlockedImpl->catch->z->printStackTrace->finally
WEmbeddedFrame#notifyModalBlockedImpl(WEmbeddedFramePeer, WWindowPeer, boolean)::: embedded frame notify modal blocked impl:::
WEmbeddedFramePeer#create(WComponentPeer)::: embedded frame peer create:::
WEmbeddedFramePeer#print(Graphics)::: embedded frame peer print:::
WEmbeddedFramePeer#updateMinimumSize()::: embedded frame peer update minimum size:::
WEmbeddedFramePeer#modalDisable(Dialog, long)::: embedded frame peer modal disable:::super->modalDisable->notifyModalBlocked
WEmbeddedFramePeer#modalEnable(Dialog)::: embedded frame peer modal enable:::super->modalEnable->notifyModalBlocked
WEmbeddedFramePeer#setBoundsPrivate(int, int, int, int)::: embedded frame peer set bounds private:::setBounds
WEmbeddedFramePeer#getBoundsPrivate()::: embedded frame peer get bounds private:::
WEmbeddedFramePeer#isAccelCapable()::: embedded frame peer is accel capable:::return->Win32GraphicsEnvironment->isDWMCompositionEnabled
WFileDialogPeer#setFilterString(String)::: file dialog peer set filter string:::
WFileDialogPeer#setFilenameFilter(FilenameFilter)::: file dialog peer set filename filter:::
WFileDialogPeer#checkFilenameFilter(String)::: file dialog peer check filename filter:::fileDialog->if->return->file->new->File->return->fileFilter->file->getParent->new->File->file->getName->accept
WFileDialogPeer#create(WComponentPeer)::: file dialog peer create:::
WFileDialogPeer#checkCreation()::: file dialog peer check creation:::
WFileDialogPeer#initialize()::: file dialog peer initialize:::getFilenameFilter->setFilenameFilter
WFileDialogPeer#_dispose()::: file dialog peer _dispose:::
WFileDialogPeer#disposeImpl()::: file dialog peer dispose impl:::WToolkit->targetDisposedPeer->_dispose
WFileDialogPeer#_show()::: file dialog peer _show:::
WFileDialogPeer#_hide()::: file dialog peer _hide:::
WFileDialogPeer#show()::: file dialog peer show:::this->_show->new->Thread->start
WFileDialogPeer#hide()::: file dialog peer hide:::_hide
WFileDialogPeer#setHWnd(long)::: file dialog peer set wnd:::if->return->foreach->if->window->modalDisable->else->window->modalEnable
WFileDialogPeer#handleSelected(char[])::: file dialog peer handle selected:::wFiles->new->String->split->multiple->jDirectory->jFile->jFiles->if->filesNumber->new->FileArr->for->i->else->index->lastIndexOf->if->else->substring->substring->new->FileArr->new->File->fileDialog->fileDialogAccessor->AWTAccessor->getFileDialogAccessor->fileDialogAccessor->setDirectory->fileDialogAccessor->setFile->fileDialogAccessor->setFiles->WToolkit->new->Runnable->executeOnEventHandlerThread
WFileDialogPeer#handleCancel()::: file dialog peer handle cancel:::fileDialog->AWTAccessor->getFileDialogAccessor->setFile->AWTAccessor->getFileDialogAccessor->setFiles->AWTAccessor->getFileDialogAccessor->setDirectory->WToolkit->new->Runnable->executeOnEventHandlerThread
WFileDialogPeer#blockWindow(WWindowPeer)::: file dialog peer block window:::blockedWindows->add->if->window->modalDisable
WFileDialogPeer#unblockWindow(WWindowPeer)::: file dialog peer unblock window:::blockedWindows->remove->if->window->modalEnable
WFileDialogPeer#blockWindows(java.util.List)::: file dialog peer block windows:::foreach->wp->AWTAccessor->getComponentAccessor->getPeer->if->blockWindow
WFileDialogPeer#toFront()::: file dialog peer to front:::
WFileDialogPeer#toBack()::: file dialog peer to back:::
WFileDialogPeer#updateAlwaysOnTopState()::: file dialog peer update always on top state:::
WFileDialogPeer#setDirectory(String)::: file dialog peer set directory:::
WFileDialogPeer#setFile(String)::: file dialog peer set file:::
WFileDialogPeer#setTitle(String)::: file dialog peer set title:::
WFileDialogPeer#setResizable(boolean)::: file dialog peer set resizable:::
WFileDialogPeer#enable()::: file dialog peer enable:::
WFileDialogPeer#disable()::: file dialog peer disable:::
WFileDialogPeer#reshape(int, int, int, int)::: file dialog peer reshape:::
WFileDialogPeer#handleEvent(Event)::: file dialog peer handle event:::return
WFileDialogPeer#setForeground(Color)::: file dialog peer set foreground:::
WFileDialogPeer#setBackground(Color)::: file dialog peer set background:::
WFileDialogPeer#setFont(Font)::: file dialog peer set font:::
WFileDialogPeer#updateMinimumSize()::: file dialog peer update minimum size:::
WFileDialogPeer#updateIconImages()::: file dialog peer update icon images:::
WFileDialogPeer#requestFocus(boolean, boolean)::: file dialog peer request focus:::return
WFileDialogPeer#requestFocus(Component, boolean, boolean, long, Cause)::: file dialog peer request focus:::return
WFileDialogPeer#start()::: file dialog peer start:::
WFileDialogPeer#beginValidate()::: file dialog peer begin validate:::
WFileDialogPeer#endValidate()::: file dialog peer end validate:::
WFileDialogPeer#invalidate(int, int, int, int)::: file dialog peer invalidate:::
WFileDialogPeer#addDropTarget(DropTarget)::: file dialog peer add drop target:::
WFileDialogPeer#removeDropTarget(DropTarget)::: file dialog peer remove drop target:::
WFileDialogPeer#updateFocusableWindowState()::: file dialog peer update focusable window state:::
WFileDialogPeer#setZOrder(ComponentPeer)::: file dialog peer set order:::
WFileDialogPeer#initIDs():::Initialize JNI field and method ids:::
WFileDialogPeer#applyShape(sun.java2d.pipe.Region)::: file dialog peer apply shape:::
WFileDialogPeer#setOpacity(float)::: file dialog peer set opacity:::
WFileDialogPeer#setOpaque(boolean)::: file dialog peer set opaque:::
WFileDialogPeer#updateWindow(java.awt.image.BufferedImage)::: file dialog peer update window:::
WFileDialogPeer#createScreenSurface(boolean)::: file dialog peer create screen surface:::
WFileDialogPeer#replaceSurfaceData()::: file dialog peer replace surface data:::
WFileDialogPeer#isMultipleMode()::: file dialog peer is multiple mode:::fileDialog->return->AWTAccessor->getFileDialogAccessor->isMultipleMode
WFileDialogPeer#getLocationOnScreen()::: file dialog peer get location on screen:::
WFontConfiguration#initReorderMap()::: font configuration init reorder map:::if->encoding->equalsIgnoreCase->new->Hashtable<>->localeMap->put->localeMap->put->localeMap->put->localeMap->put->new->HashMap<>->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->put->reorderMap->split->put
WFontConfiguration#setOsNameAndVersion()::: font configuration set os name and version:::super->setOsNameAndVersion->if->osName->startsWith->p->q->osName->indexOf->if->else->osName->indexOf->if->osName->substring->else->osName->substring
WFontConfiguration#getFallbackFamilyName(String, String)::: font configuration get fallback family name:::if->compatibilityName->getCompatibilityFamilyName->if->return->return
WFontConfiguration#makeAWTFontName(String, String)::: font configuration make font name:::windowsCharset->subsetCharsetMap->get->if->return
WFontConfiguration#getEncoding(String, String)::: font configuration get encoding:::encoding->subsetEncodingMap->get->if->return
WFontConfiguration#getDefaultFontCharset(String)::: font configuration get default font charset:::return->new->WDefaultFontCharset
WFontConfiguration#getFaceNameFromComponentFontName(String)::: font configuration get face name from component font name:::return
WFontConfiguration#getFileNameFromComponentFontName(String)::: font configuration get file name from component font name:::return->getFileNameFromPlatformName
WFontConfiguration#getTextComponentFontName(String, int):::Returns the component font name (face name plus charset) of the font that should be used for AWT text components:::fontDescriptors->getFontDescriptors->fontName->findFontWithCharset->if->findFontWithCharset->return
WFontConfiguration#findFontWithCharset(FontDescriptor[], String)::: font configuration find font with charset:::fontName->for->i->return
WFontConfiguration#initTables(String)::: font configuration init tables:::subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetCharsetMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->if->equals->subsetEncodingMap->put->else->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->subsetEncodingMap->put->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else
WFontMetrics#getLeading():::Get leading:::return
WFontMetrics#getAscent():::Get ascent.:::return
WFontMetrics#getDescent():::Get descent:::return
WFontMetrics#getHeight():::Get height:::return
WFontMetrics#getMaxAscent():::Get maxAscent:::return
WFontMetrics#getMaxDescent():::Get maxDescent:::return
WFontMetrics#getMaxAdvance():::Get maxAdvance:::return
WFontMetrics#stringWidth(String):::Return the width of the specified string in this Font.:::
WFontMetrics#charsWidth(char[], int, int):::Return the width of the specified char[] in this Font.:::
WFontMetrics#bytesWidth(byte[], int, int):::Return the width of the specified byte[] in this Font.:::
WFontMetrics#getWidths():::Get the widths of the first 256 characters in the font.:::return
WFontMetrics#init()::: font metrics init:::
WFontMetrics#getFontMetrics(Font)::: font metrics get font metrics:::fm->table->get->if->table->new->WFontMetrics->put->return
WFontMetrics#initIDs():::Initialize JNI field and method IDs:::
WFontPeer#getMissingGlyphCharacter()::: font peer get missing glyph character:::return
WFontPeer#initIDs():::Initialize JNI field and method IDs:::
WFramePeer#initIDs()::: frame peer init ds:::
WFramePeer#setState(int)::: frame peer set state:::
WFramePeer#getState()::: frame peer get state:::
WFramePeer#setExtendedState(int)::: frame peer set extended state:::AWTAccessor->getFrameAccessor->setExtendedState
WFramePeer#getExtendedState()::: frame peer get extended state:::return->AWTAccessor->getFrameAccessor->getExtendedState
WFramePeer#setMaximizedBounds(int, int, int, int)::: frame peer set maximized bounds:::
WFramePeer#clearMaximizedBounds()::: frame peer clear maximized bounds:::
WFramePeer#setMaximizedBounds(Rectangle)::: frame peer set maximized bounds:::if->clearMaximizedBounds->else->adjBounds->b->clone->adjustMaximizedBounds->setMaximizedBounds
WFramePeer#adjustMaximizedBounds(Rectangle):::The incoming bounds describe the maximized size and position of the window on the monitor that displays the window:::currentDevGC->getGraphicsConfiguration->primaryDev->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->primaryDevGC->primaryDev->getDefaultConfiguration->if->currentDevBounds->currentDevGC->getBounds->primaryDevBounds->primaryDevGC->getBounds->isCurrentDevLarger->if
WFramePeer#updateGraphicsData(GraphicsConfiguration)::: frame peer update graphics data:::result->super->updateGraphicsData->bounds->AWTAccessor->getFrameAccessor->getMaximizedBounds->if->setMaximizedBounds->return
WFramePeer#isTargetUndecorated()::: frame peer is target undecorated:::return->isUndecorated
WFramePeer#reshape(int, int, int, int)::: frame peer reshape:::if->isUndecorated->super->reshape->else->reshapeFrame
WFramePeer#getMinimumSize()::: frame peer get minimum size:::d->new->Dimension->if->isUndecorated->d->getSysMinWidth->getSysMinHeight->setSize->if->getMenuBar->getSysMenuHeight->return
WFramePeer#setMenuBar(MenuBar)::: frame peer set menu bar:::mbPeer->WToolkit->targetToPeer->if->if->mb->removeNotify->mb->addNotify->WToolkit->targetToPeer->if->throw->new->IllegalStateException->if->addChildPeer->setMenuBar0->updateInsets
WFramePeer#setMenuBar0(WMenuBarPeer)::: frame peer set menu bar0:::
WFramePeer#createAwtFrame(WComponentPeer)::: frame peer create awt frame:::
WFramePeer#create(WComponentPeer)::: frame peer create:::preCreate->createAwtFrame
WFramePeer#initialize()::: frame peer initialize:::super->initialize->target->if->target->getTitle->target->getTitle->setTitle->target->isResizable->setResizable->target->getExtendedState->setState
WFramePeer#getSysMenuHeight()::: frame peer get sys menu height:::
WFramePeer#pSetIMMOption(String)::: frame peer p set option:::
WFramePeer#notifyIMMOptionChange()::: frame peer notify option change:::InputMethodManager->getInstance->notifyChangeRequest
WFramePeer#setBoundsPrivate(int, int, int, int)::: frame peer set bounds private:::setBounds
WFramePeer#getBoundsPrivate()::: frame peer get bounds private:::return->getBounds
WFramePeer#emulateActivation(boolean)::: frame peer emulate activation:::synthesizeWmActivate
WFramePeer#synthesizeWmActivate(boolean)::: frame peer synthesize wm activate:::
WGlobalCursorManager#getCursorManager()::: global cursor manager get cursor manager:::if->new->WGlobalCursorManager->return
WGlobalCursorManager#nativeUpdateCursor(Component):::Should be called in response to a native mouse enter or native mouse button released message:::WGlobalCursorManager->getCursorManager->updateCursorLater
WGlobalCursorManager#setCursor(Component, Cursor, boolean)::: global cursor manager set cursor:::
WGlobalCursorManager#getCursorPos(Point)::: global cursor manager get cursor pos:::
WGlobalCursorManager#findHeavyweightUnderCursor(boolean)::: global cursor manager find heavyweight under cursor:::
WGlobalCursorManager#getLocationOnScreen(Component)::: global cursor manager get location on screen:::
WingDings#newEncoder()::: wing dings new encoder:::return->new->Encoder
WingDings#newDecoder()::: wing dings new decoder:::throw->new->Error
WingDings#contains(Charset)::: wing dings contains:::return
WingDings.Encoder#canEncode(char)::: encoder can encode:::if->if->return->else->return->return
WingDings.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->c->if->return->if->canEncode->return->CoderResult->unmappableForLength->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
WingDings.Encoder#isLegalReplacement(byte[])::: encoder is legal replacement:::return
WInputMethod#finalize()::: input method finalize:::if->destroyNativeContext->super->finalize
WInputMethod#setInputMethodContext(InputMethodContext)::: input method set input method context:::
WInputMethod#dispose()::: input method dispose:::
WInputMethod#getControlObject():::Returns null.:::return
WInputMethod#setLocale(Locale)::: input method set locale:::return->setLocale
WInputMethod#setLocale(Locale, boolean)::: input method set locale:::available->WInputMethodDescriptor->getAvailableLocalesInternal->for->i->return
WInputMethod#getLocale()::: input method get locale:::if->getNativeLocale->if->Locale->getDefault->return
WInputMethod#setCharacterSubsets(Subset[]):::Implements InputMethod.setCharacterSubsets for Windows.:::if->setConversionStatus->setOpenStatus->return->subset1->locale->getNativeLocale->newmode->if->return->if->locale->getLanguage->getLanguage->equals->if->setOpenStatus->else->if->else->if->else->if->else->if->else->return->setOpenStatus->getConversionStatus->setConversionStatus->else->if->locale->getLanguage->getLanguage->equals->if->setOpenStatus->else->if->else->if->else->return->setOpenStatus->setConversionStatus->else->if->locale->getLanguage->getLanguage->equals->if->setOpenStatus->else->if->else->if->else->return->setOpenStatus->setConversionStatus
WInputMethod#dispatchEvent(AWTEvent)::: input method dispatch event:::if->comp->getComponent->if->if->awtFocussedComponentPeer->isDisposed->getNearestNativePeer->if->handleNativeIMEEvent
WInputMethod#activate()::: input method activate:::isAc->haveActiveClient->if->if->disableNativeIME->if->enableNativeIME->if->setLocale->if->setStatusWindowVisible
WInputMethod#deactivate(boolean)::: input method deactivate:::getLocale->if->haveActiveClient
WInputMethod#disableInputMethod():::Explicitly disable the native IME:::if->disableNativeIME
WInputMethod#getNativeInputMethodInfo():::Returns a string with information about the windows input method, or null.:::return->getNativeIMMDescription
WInputMethod#stopListening()::: input method stop listening:::disableInputMethod
WInputMethod#setAWTFocussedComponent(Component)::: input method set focussed component:::if->return->peer->getNearestNativePeer->if->if->disableNativeIME->if->haveActiveClient->enableNativeIME
WInputMethod#hideWindows()::: input method hide windows:::if->setStatusWindowVisible
WInputMethod#removeNotify()::: input method remove notify:::endCompositionNative
WInputMethod#mapInputMethodHighlight(InputMethodHighlight)::: input method map input method highlight:::index->state->highlight->getState->if->else->if->else->return->if->highlight->isSelected->return
WInputMethod#supportsBelowTheSpot()::: input method supports below the spot:::return
WInputMethod#endComposition()::: input method end composition:::haveActiveClient->endCompositionNative
WInputMethod#setCompositionEnabled(boolean)::: input method set composition enabled:::setOpenStatus
WInputMethod#isCompositionEnabled()::: input method is composition enabled:::return->getOpenStatus
WInputMethod#sendInputMethodEvent(int, long, String, int[], String[], int[], byte[], int, int, int)::: input method send input method event:::iterator->if->attrStr->new->AttributedString->attrStr->Locale->getDefault->text->length->addAttribute->if->text->length->for->i->else->attrStr->new->Annotation->text->length->addAttribute->attrStr->new->Annotation->text->length->addAttribute->if->text->length->for->i->else->attrStr->text->length->addAttribute->attrStr->getIterator->source->getClientComponent->if->return->event->TextHitInfo->leading->TextHitInfo->leading->new->InputMethodEvent->WToolkit->WToolkit->targetToAppContext->postEvent
WInputMethod#inquireCandidatePosition()::: input method inquire candidate position:::source->getClientComponent->if->return->r->new->Runnable->WToolkit->WToolkit->targetToAppContext->new->InvocationEvent->postEvent
WInputMethod#getNearestNativePeer(Component)::: input method get nearest native peer:::if->return->acc->AWTAccessor->getComponentAccessor->peer->acc->getPeer->if->return->while->comp->getParent->if->return->acc->getPeer->if->return->if->return->else->return
WInputMethod#createNativeContext()::: input method create native context:::
WInputMethod#destroyNativeContext(int)::: input method destroy native context:::
WInputMethod#enableNativeIME(WComponentPeer, int, boolean)::: input method enable native e:::
WInputMethod#disableNativeIME(WComponentPeer)::: input method disable native e:::
WInputMethod#handleNativeIMEEvent(WComponentPeer, AWTEvent)::: input method handle native event:::
WInputMethod#endCompositionNative(int, boolean)::: input method end composition native:::
WInputMethod#setConversionStatus(int, int)::: input method set conversion status:::
WInputMethod#getConversionStatus(int)::: input method get conversion status:::
WInputMethod#setOpenStatus(int, boolean)::: input method set open status:::
WInputMethod#getOpenStatus(int)::: input method get open status:::
WInputMethod#setStatusWindowVisible(WComponentPeer, boolean)::: input method set status window visible:::
WInputMethod#getNativeIMMDescription()::: input method get native description:::
WInputMethod#getNativeLocale()::: input method get native locale:::
WInputMethod#setNativeLocale(String, boolean)::: input method set native locale:::
WInputMethod#openCandidateWindow(WComponentPeer, int, int)::: input method open candidate window:::
WInputMethodDescriptor#getAvailableLocales()::: input method descriptor get available locales:::locales->getAvailableLocalesInternal->tmp->new->LocaleArr->System->arraycopy->return
WInputMethodDescriptor#getAvailableLocalesInternal()::: input method descriptor get available locales internal:::return->getNativeAvailableLocales
WInputMethodDescriptor#hasDynamicLocaleList()::: input method descriptor has dynamic locale list:::return
WInputMethodDescriptor#getInputMethodDisplayName(Locale, Locale)::: input method descriptor get input method display name:::name->if->Locale->getDefault->equals->Toolkit->getProperty->return
WInputMethodDescriptor#getInputMethodIcon(Locale)::: input method descriptor get input method icon:::return
WInputMethodDescriptor#createInputMethod()::: input method descriptor create input method:::return->new->WInputMethod
WInputMethodDescriptor#getNativeAvailableLocales()::: input method descriptor get native available locales:::
WKeyboardFocusManagerPeer#setNativeFocusOwner(ComponentPeer)::: keyboard focus manager peer set native focus owner:::
WKeyboardFocusManagerPeer#getNativeFocusOwner()::: keyboard focus manager peer get native focus owner:::
WKeyboardFocusManagerPeer#getNativeFocusedWindow()::: keyboard focus manager peer get native focused window:::
WKeyboardFocusManagerPeer#getInstance()::: keyboard focus manager peer get instance:::return
WKeyboardFocusManagerPeer#setCurrentFocusOwner(Component)::: keyboard focus manager peer set current focus owner:::acc->AWTAccessor->getComponentAccessor->acc->getPeer->setNativeFocusOwner
WKeyboardFocusManagerPeer#getCurrentFocusOwner()::: keyboard focus manager peer get current focus owner:::return->getNativeFocusOwner
WKeyboardFocusManagerPeer#setCurrentFocusedWindow(Window)::: keyboard focus manager peer set current focused window:::throw->new->RuntimeException
WKeyboardFocusManagerPeer#getCurrentFocusedWindow()::: keyboard focus manager peer get current focused window:::return->getNativeFocusedWindow
WKeyboardFocusManagerPeer#deliverFocus(Component, Component, boolean, boolean, long, Cause)::: keyboard focus manager peer deliver focus:::return->KeyboardFocusManagerPeerImpl->getNativeFocusOwner->deliverFocus
WLabelPeer#getMinimumSize()::: label peer get minimum size:::fm->getFont->getFontMetrics->label->getText->if->return->fm->stringWidth->fm->getHeight->new->Dimension
WLabelPeer#lazyPaint()::: label peer lazy paint:::
WLabelPeer#start()::: label peer start:::super->start->lazyPaint
WLabelPeer#shouldClearRectBeforePaint()::: label peer should clear rect before paint:::return
WLabelPeer#setText(String)::: label peer set text:::
WLabelPeer#setAlignment(int)::: label peer set alignment:::
WLabelPeer#create(WComponentPeer)::: label peer create:::
WLabelPeer#initialize()::: label peer initialize:::l->txt->l->getText->if->setText->align->l->getAlignment->if->setAlignment->bg->getBackground->if->setBackground->super->initialize
WLightweightFramePeer#getLwTarget()::: lightweight frame peer get lw target:::return
WLightweightFramePeer#getGraphics()::: lightweight frame peer get graphics:::return->getLwTarget->getGraphics
WLightweightFramePeer#overrideNativeHandle(long)::: lightweight frame peer override native handle:::
WLightweightFramePeer#overrideWindowHandle(long)::: lightweight frame peer override window handle:::overrideNativeHandle
WLightweightFramePeer#show()::: lightweight frame peer show:::super->show->getTarget->new->ComponentEvent->postEvent
WLightweightFramePeer#hide()::: lightweight frame peer hide:::super->hide->getTarget->new->ComponentEvent->postEvent
WLightweightFramePeer#reshape(int, int, int, int)::: lightweight frame peer reshape:::super->reshape->getTarget->new->ComponentEvent->postEvent->getTarget->new->ComponentEvent->postEvent
WLightweightFramePeer#handleEvent(java.awt.AWTEvent)::: lightweight frame peer handle event:::if->e->getID->emulateActivation->super->handleEvent
WLightweightFramePeer#grab()::: lightweight frame peer grab:::getLwTarget->grabFocus
WLightweightFramePeer#ungrab()::: lightweight frame peer ungrab:::getLwTarget->ungrabFocus
WLightweightFramePeer#updateCursorImmediately()::: lightweight frame peer update cursor immediately:::SwingAccessor->getJLightweightFrameAccessor->getLwTarget->updateCursor
WLightweightFramePeer#isLightweightFramePeer()::: lightweight frame peer is lightweight frame peer:::return
WLightweightFramePeer#addDropTarget(DropTarget)::: lightweight frame peer add drop target:::getLwTarget->addDropTarget
WLightweightFramePeer#removeDropTarget(DropTarget)::: lightweight frame peer remove drop target:::getLwTarget->removeDropTarget
WListPeer#isFocusable()::: list peer is focusable:::return
WListPeer#getSelectedIndexes()::: list peer get selected indexes:::l->len->l->getItemCount->sel->new->intArr->nsel->for->i->selected->new->intArr->System->arraycopy->return
WListPeer#add(String, int)::: list peer add:::addItem
WListPeer#removeAll()::: list peer remove all:::clear
WListPeer#setMultipleMode(boolean)::: list peer set multiple mode:::setMultipleSelections
WListPeer#getPreferredSize(int)::: list peer get preferred size:::if->li->li->getFont->getFontMetrics->d->getMinimumSize->Math->getMaxWidth->max->return
WListPeer#getMinimumSize(int)::: list peer get minimum size:::return->fm->stringWidth->fm->getHeight->new->Dimension
WListPeer#addItem(String, int)::: list peer add item:::new->StringArr->fm->stringWidth->addItems
WListPeer#addItems(String[], int, int)::: list peer add items:::
WListPeer#delItems(int, int)::: list peer del items:::
WListPeer#clear()::: list peer clear:::l->l->getItemCount->delItems
WListPeer#select(int)::: list peer select:::
WListPeer#deselect(int)::: list peer deselect:::
WListPeer#makeVisible(int)::: list peer make visible:::
WListPeer#setMultipleSelections(boolean)::: list peer set multiple selections:::
WListPeer#getMaxWidth()::: list peer get max width:::
WListPeer#create(WComponentPeer)::: list peer create:::
WListPeer#initialize()::: list peer initialize:::li->li->getFont->getFontMetrics->f->li->getFont->if->setFont->nitems->li->getItemCount->if->items->new->StringArr->maxWidth->width->for->i->addItems->li->isMultipleMode->setMultipleSelections->sel->li->getSelectedIndexes->for->i->index->li->getVisibleIndex->if->if->makeVisible->super->initialize
WListPeer#shouldClearRectBeforePaint()::: list peer should clear rect before paint:::return
WListPeer#updateMaxItemWidth()::: list peer update max item width:::
WListPeer#isSelected(int)::: list peer is selected:::
WListPeer#_setFont(Font)::: list peer _set font:::super->_setFont->getFont->getFontMetrics->updateMaxItemWidth
WListPeer#handleAction(int, long, int)::: list peer handle action:::l->WToolkit->new->Runnable->executeOnEventHandlerThread
WListPeer#handleListChanged(int)::: list peer handle list changed:::l->WToolkit->new->Runnable->executeOnEventHandlerThread
WMenuBarPeer#addMenu(Menu)::: menu bar peer add menu:::
WMenuBarPeer#delMenu(int)::: menu bar peer del menu:::
WMenuBarPeer#addHelpMenu(Menu)::: menu bar peer add help menu:::addMenu
WMenuBarPeer#create(WFramePeer)::: menu bar peer create:::
WMenuItemPeer#_dispose()::: menu item peer _dispose:::
WMenuItemPeer#disposeImpl()::: menu item peer dispose impl:::WToolkit->targetDisposedPeer->_dispose
WMenuItemPeer#setEnabled(boolean)::: menu item peer set enabled:::enable
WMenuItemPeer#readShortcutLabel()::: menu item peer read shortcut label:::ancestor->while->if->sc->getShortcut->sc->toString->else
WMenuItemPeer#setLabel(String)::: menu item peer set label:::readShortcutLabel->_setLabel
WMenuItemPeer#_setLabel(String)::: menu item peer _set label:::
WMenuItemPeer#checkMenuCreation()::: menu item peer check menu creation:::if->if->throw->else->throw->new->InternalError
WMenuItemPeer#postEvent(AWTEvent)::: menu item peer post event:::WToolkit->WToolkit->targetToAppContext->postEvent
WMenuItemPeer#create(WMenuPeer)::: menu item peer create:::
WMenuItemPeer#enable(boolean)::: menu item peer enable:::
WMenuItemPeer#handleAction(long, int)::: menu item peer handle action:::WToolkit->new->Runnable->executeOnEventHandlerThread
WMenuItemPeer#getDefaultFont()::: menu item peer get default font:::return
WMenuItemPeer#initIDs():::Initialize JNI field and method IDs:::
WMenuItemPeer#_setFont(Font)::: menu item peer _set font:::
WMenuItemPeer#setFont(Font)::: menu item peer set font:::_setFont
WMenuPeer#addSeparator()::: menu peer add separator:::
WMenuPeer#addItem(MenuItem)::: menu peer add item:::itemPeer->WToolkit->targetToPeer
WMenuPeer#delItem(int)::: menu peer del item:::
WMenuPeer#createMenu(WMenuBarPeer)::: menu peer create menu:::
WMenuPeer#createSubMenu(WMenuPeer)::: menu peer create sub menu:::
WMouseDragGestureRecognizer#mapDragOperationFromModifiers(MouseEvent)::: mouse drag gesture recognizer map drag operation from modifiers:::mods->e->getModifiersEx->btns->if->return->return->SunDragSourceContextPeer->getSourceActions->convertModifiersToDropAction
WMouseDragGestureRecognizer#mouseClicked(MouseEvent)::: mouse drag gesture recognizer mouse clicked:::
WMouseDragGestureRecognizer#mousePressed(MouseEvent)::: mouse drag gesture recognizer mouse pressed:::events->clear->if->mapDragOperationFromModifiers->try->DragSource->getDragThreshold->catch->finally->appendEvent
WMouseDragGestureRecognizer#mouseReleased(MouseEvent)::: mouse drag gesture recognizer mouse released:::events->clear
WMouseDragGestureRecognizer#mouseEntered(MouseEvent)::: mouse drag gesture recognizer mouse entered:::events->clear
WMouseDragGestureRecognizer#mouseExited(MouseEvent)::: mouse drag gesture recognizer mouse exited:::if->events->isEmpty->dragAction->mapDragOperationFromModifiers->if->events->clear
WMouseDragGestureRecognizer#mouseDragged(MouseEvent)::: mouse drag gesture recognizer mouse dragged:::if->events->isEmpty->dop->mapDragOperationFromModifiers->if->return->trigger->events->get->origin->trigger->getPoint->current->e->getPoint->dx->Math->abs->dy->Math->abs->if->getTriggerEvent->getPoint->fireDragGestureRecognized->else->appendEvent
WMouseDragGestureRecognizer#mouseMoved(MouseEvent)::: mouse drag gesture recognizer mouse moved:::
WMouseInfoPeer#fillPointWithCoords(Point)::: mouse info peer fill point with coords:::
WMouseInfoPeer#isWindowUnderMouse(Window)::: mouse info peer is window under mouse:::
WObjectPeer#getPeerForTarget(Object)::: object peer get peer for target:::peer->WToolkit->targetToPeer->return
WObjectPeer#getData()::: object peer get data:::return
WObjectPeer#getTarget()::: object peer get target:::return
WObjectPeer#getStateLock()::: object peer get state lock:::return
WObjectPeer#disposeImpl()::: object peer dispose impl:::
WObjectPeer#dispose()::: object peer dispose:::call_disposeImpl->synchronized->if->if->if->disposeChildPeers->disposeImpl
WObjectPeer#isDisposed()::: object peer is disposed:::return
WObjectPeer#initIDs():::Initialize JNI field and method IDs:::
WObjectPeer#addChildPeer(WObjectPeer)::: object peer add child peer:::synchronized->getStateLock->if->new->WeakHashMap<>->if->isDisposed->throw->new->IllegalStateException->childPeers->put
WObjectPeer#disposeChildPeers()::: object peer dispose child peers:::synchronized->getStateLock->foreach->childPeers->keySet->if->try->child->dispose->catch->finally
WPageDialog#addNotify()::: page dialog add notify:::synchronized->getTreeLock->parent->getParent->if->parent->isDisplayable->parent->addNotify->if->isDisplayable->peer->Toolkit->getDefaultToolkit->createWPageDialog->setPeer->super->addNotify
WPageDialog#initIDs():::Initialize JNI field and method ids:::
WPageDialogPeer#_show():::Displays the page setup dialog placing the user's settings into target's 'page'.:::
WPageDialogPeer#show()::: page dialog peer show:::runnable->try->_show->setRetVal->catch->finally->setVisible->new->Thread->start
WPanelPeer#paint(Graphics)::: panel peer paint:::super->paint->getInstance->getComponents->runComponents
WPanelPeer#print(Graphics)::: panel peer print:::super->print->getInstance->getComponents->runComponents
WPanelPeer#getInsets()::: panel peer get insets:::return
WPanelPeer#initIDs():::Initialize JNI field IDs:::
WPanelPeer#initialize()::: panel peer initialize:::super->initialize->new->Insets->c->getBackground->if->setBackground->setBackground->getForeground->if->setForeground->setForeground
WPathGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->getDelegate->create->getPrinterJob->getPrintable->getPageFormat->getPageIndex->canDoRedraws->new->WPathGraphics
WPathGraphics#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::stroke->getStroke->if->lineStroke->minLineStroke->deviceLineWidth->lineWidth->deviceTransform->penSize->lineStroke->getLineWidth->new->Point2D.Float->getTransform->deviceTransform->deltaTransform->Math->Math->abs->Math->abs->min->if->minPenSize->new->Point2D.Float->try->inverse->minLineWidth->deviceTransform->createInverse->inverse->deltaTransform->Math->Math->abs->Math->abs->max->lineStroke->getEndCap->lineStroke->getLineJoin->lineStroke->getMiterLimit->lineStroke->getDashArray->lineStroke->getDashPhase->new->BasicStroke->setStroke->catch->finally->super->draw->if->setStroke->else->super->draw
WPathGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
WPathGraphics#drawString(String, float, float)::: path graphics draw string:::getFont->getFontRenderContext->drawString
WPathGraphics#platformFontCount(Font, String)::: path graphics platform font count:::deviceTransform->getTransform->fontTransform->new->AffineTransform->fontTransform->getFont->getTransform->concatenate->transformType->fontTransform->getType->directToGDI->if->return->font2D->FontUtilities->getFont2D->if->return->else->return
WPathGraphics#isXP()::: path graphics is p:::osVersion->System->getProperty->if->version->Float->valueOf->return->version->floatValue->else->return
WPathGraphics#strNeedsTextLayout(String, Font)::: path graphics str needs text layout:::chars->str->toCharArray->isComplex->FontUtilities->isComplexText->if->return->else->if->return->else->if->isXP->FontUtilities->textLayoutIsCompatible->return->else->return
WPathGraphics#getAngle(Point2D.Double)::: path graphics get angle:::angle->Math->Math->atan2->toDegrees->if->if->return->Math->round
WPathGraphics#getAwScale(double, double)::: path graphics get aw scale:::awScale->if->return
WPathGraphics#drawString(String, float, float, Font, FontRenderContext, float):::Renders the text specified by the specified String, using the current Font and Paint attributes in the Graphics2D context:::if->str->length->return->if->super->drawString->return->layoutNeeded->strNeedsTextLayout->if->font->hasLayoutAttributes->layout->new->TextLayout->layout->draw->return->else->if->super->drawString->return->deviceTransform->getTransform->fontTransform->new->AffineTransform->fontTransform->font->getTransform->concatenate->transformType->fontTransform->getType->directToGDI->wPrinterJob->getPrinterJob->try->wPrinterJob->getPaint->setTextColor->catch->finally->if->super->drawString->return->userpos->new->Point2D.Float->devpos->new->Point2D.Float->if->font->isTransformed->fontTx->font->getTransform->translateX->fontTx->getTranslateX->translateY->fontTx->getTranslateY->if->Math->abs->if->Math->abs->deviceTransform->transform->if->getClip->getClip->getPathIterator->deviceClip->fontSize->font->getSize2D->devResX->wPrinterJob->getXRes->devResY->wPrinterJob->getYRes->fontDevScaleY->orient->getPageFormat->getOrientation->if->tmp->devScaleX->devScaleY->fontTransform->scale->pty->new->Point2D.Double->fontTransform->deltaTransform->scaleFactorY->Math->sqrt->scaledFontSizeY->ptx->new->Point2D.Double->fontTransform->deltaTransform->scaleFactorX->Math->sqrt->awScale->getAwScale->iangle->getAngle->new->Point2D.Double->deviceTransform->deltaTransform->advanceScaleX->Math->sqrt->new->Point2D.Double->deviceTransform->deltaTransform->advanceScaleY->Math->sqrt->font2D->FontUtilities->getFont2D->if->textOut->else->if->compFont->userx->usery->devx->devy->chars->str->toCharArray->len->glyphs->new->intArr->compFont->getMapper->charsToGlyphs->startChar->endChar->slot->while->while->substr->new->String->slotFont->compFont->getSlotFont->textOut->bds->font->getStringBounds->xAdvance->bds->getWidth->deviceTransform->transform->else->super->drawString
WPathGraphics#printGlyphVector(GlyphVector, float, float):::return true if the Graphics instance can directly print this glyphvector:::if->gv->getLayoutFlags->return->if->gv->getNumGlyphs->return->deviceTransform->getTransform->fontTransform->new->AffineTransform->font->gv->getFont->fontTransform->font->getTransform->concatenate->transformType->fontTransform->getType->directToGDI->wPrinterJob->getPrinterJob->try->wPrinterJob->getPaint->setTextColor->catch->finally->if->return->userpos->new->Point2D.Float->g0pos->gv->getGlyphPosition->g0pos->getX->g0pos->getY->devpos->new->Point2D.Float->if->font->isTransformed->fontTx->font->getTransform->translateX->fontTx->getTranslateX->translateY->fontTx->getTranslateY->if->Math->abs->if->Math->abs->deviceTransform->transform->if->getClip->getClip->getPathIterator->deviceClip->fontSize->font->getSize2D->devResX->wPrinterJob->getXRes->devResY->wPrinterJob->getYRes->fontDevScaleY->orient->getPageFormat->getOrientation->if->tmp->devScaleX->devScaleY->fontTransform->scale->pty->new->Point2D.Double->fontTransform->deltaTransform->scaleFactorY->Math->sqrt->scaledFontSizeY->ptx->new->Point2D.Double->fontTransform->deltaTransform->scaleFactorX->Math->sqrt->awScale->getAwScale->iangle->getAngle->new->Point2D.Double->deviceTransform->deltaTransform->advanceScaleX->Math->sqrt->new->Point2D.Double->deviceTransform->deltaTransform->advanceScaleY->Math->sqrt->numGlyphs->gv->getNumGlyphs->glyphCodes->gv->getGlyphCodes->glyphPos->gv->getGlyphPositions->invisibleGlyphCnt->for->gc->if->visibleGlyphCnt->visibleGlyphCodes->new->intArr->visiblePositions->new->floatArr->index->for->i->advanceTransform->AffineTransform->getScaleInstance->glyphAdvPos->new->floatArr->advanceTransform->transform->font2D->FontUtilities->getFont2D->if->family->font2D->getFamilyName->style->font->getStyle->font2D->getStyle->if->wPrinterJob->setFont->return->wPrinterJob->glyphsOut->else->if->compFont->userx->usery->devx->devy->start->end->slot->while->while->slotFont->compFont->getSlotFont->if->return->family->slotFont->getFamilyName->style->font->getStyle->slotFont->getStyle->if->wPrinterJob->setFont->return->glyphs->Arrays->copyOfRange->posns->Arrays->copyOfRange->if->p->new->Point2D.Float->deviceTransform->transform->wPrinterJob->glyphsOut->else->return->return
WPathGraphics#textOut(String, Font, PhysicalFont, FontRenderContext, float, int, float, double, double, float, float, float, float, float)::: path graphics text out:::family->font2D->getFamilyName->style->font->getStyle->font2D->getStyle->wPrinterJob->getPrinterJob->setFont->wPrinterJob->setFont->if->super->drawString->return->glyphPos->if->okGDIMetrics->wPrinterJob->removeControlChars->chars->str->toCharArray->len->gv->if->FontUtilities->isComplexText->font->createGlyphVector->if->super->drawString->return->gv->getGlyphPositions->gvAdvPt->gv->gv->getNumGlyphs->getGlyphPosition->advanceTransform->AffineTransform->getScaleInstance->glyphAdvPos->new->floatArr->advanceTransform->transform->wPrinterJob->textOut
WPathGraphics#okGDIMetrics(String, Font, FontRenderContext, double)::: path graphics ok metrics:::bds->font->getStringBounds->jdkAdvance->bds->getWidth->Math->round->gdiAdvance->getPrinterJob->getGDIAdvance->if->diff->Math->abs->ratio->if->return->return
WPathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean):::The various drawImage() methods for WPathGraphics are all decomposed into an invocation of drawImageToPlatform:::img->getBufferedImage->if->return->wPrinterJob->getPrinterJob->fullTransform->getTransform->if->new->AffineTransform->fullTransform->concatenate->fullMatrix->new->doubleArr->fullTransform->getMatrix->unitVectorX->new->Point2D.Float->unitVectorY->new->Point2D.Float->fullTransform->deltaTransform->fullTransform->deltaTransform->origin->new->Point2D.Float->scaleX->unitVectorX->distance->scaleY->unitVectorY->distance->devResX->wPrinterJob->getXRes->devResY->wPrinterJob->getYRes->devScaleX->devScaleY->transformType->fullTransform->getType->clampScale->if->if->if->if->rotTransform->new->AffineTransform->srcRect->new->Rectangle2D.Float->rotShape->rotTransform->createTransformedShape->rotBounds->rotShape->getBounds2D->rotBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->setRect->boundsWidth->rotBounds->getWidth->boundsHeight->rotBounds->getHeight->if->drawOpaque->if->hasTransparentPixels->if->isBitmaskTransparency->if->if->drawBitmaskImage->return->else->if->bgcolor->getTransparency->if->canDoRedraws->else->if->img->getWidth->img->getHeight->canDoRedraws->if->fullTransform->getMatrix->tx->new->AffineTransform->rect->new->Rectangle2D.Float->shape->fullTransform->createTransformedShape->region->shape->getBounds2D->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->w->region->getWidth->h->region->getHeight->nbytes->maxBytes->origDpi->dpi->scaleFactor->maxSFX->maxSFY->maxSF->minDpi->if->while->if->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->wPrinterJob->getTransform->getClip->saveState->return->else->dibType->icm->cm->img->getColorModel->imgType->img->getType->if->cm->getPixelSize->if->cm->getPixelSize->rgbs->new->intArr->icm->getRGBs->transparent->icm->getTransparency->transpixel->icm->getTransparentPixel->new->IndexColorModel->iw->rotBounds->getWidth->ih->rotBounds->getHeight->deepImage->newImage->if->if->new->BufferedImage->else->new->BufferedImage->imageGraphics->deepImage->createGraphics->imageGraphics->deepImage->getWidth->deepImage->getHeight->clipRect->imageGraphics->rotBounds->getX->rotBounds->getY->translate->imageGraphics->transform->if->imageGraphics->drawImage->imageGraphics->dispose->else->scaledBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->new->Rectangle2D.Float->raster->deepImage->getRaster->data->if->getDataStorage->else->if->getDataStorage->else->return->bitsPerPixel->sm->deepImage->getSampleModel->if->csm->csm->getPixelStride->else->if->mppsm->mppsm->getPixelBitStride->else->if->diw->deepImage->getWidth->dih->deepImage->getHeight->if->holdClip->getClip->xform->createTransformedShape->clip->getClip->getTransform->getPathIterator->deviceClip->wPrinterJob->Math->rint->Math->rint->deepImage->getWidth->deepImage->getHeight->drawDIBImage->setClip->return
WPathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform):::Have the printing application redraw everything that falls within the page bounds defined by region.:::wPrinterJob->getPrinterJob->painter->getPrintable->pageFormat->getPageFormat->pageIndex->getPageIndex->deepImage->region->getWidth->region->getHeight->new->BufferedImage->g->deepImage->createGraphics->proxy->new->ProxyGraphics2D->proxy->setColor->proxy->deepImage->getWidth->deepImage->getHeight->fillRect->proxy->deepImage->getWidth->deepImage->getHeight->clipRect->proxy->region->getX->region->getY->translate->sourceResX->wPrinterJob->getXRes->sourceResY->wPrinterJob->getYRes->proxy->scale->proxy->wPrinterJob->pageFormat->getPaper->getPhysicalPrintableX->wPrinterJob->getXRes->wPrinterJob->pageFormat->getPaper->getPhysicalPrintableY->wPrinterJob->getYRes->translate->proxy->getPageFormat->getMatrix->new->AffineTransform->transform->proxy->setPaint->painter->print->g->dispose->if->savedClip->getPathIterator->deviceClip->scaledBounds->region->getX->region->getY->region->getWidth->region->getHeight->new->Rectangle2D.Float->tile->deepImage->getRaster->wPrinterJob->tile->getDataStorage->deepImage->getWidth->deepImage->getHeight->drawImage3ByteBGR
WPathGraphics#deviceFill(PathIterator, Color)::: path graphics device fill:::wPrinterJob->getPrinterJob->convertToWPath->wPrinterJob->selectSolidBrush->wPrinterJob->fillPath
WPathGraphics#deviceClip(PathIterator)::: path graphics device clip:::wPrinterJob->getPrinterJob->convertToWPath->wPrinterJob->selectClipPath
WPathGraphics#deviceFrameRect(int, int, int, int, Color):::Draw the bounding rectangle using transformed coordinates.:::deviceTransform->getTransform->transformType->deviceTransform->getType->usePath->if->new->Rectangle2D.Float->draw->return->stroke->getStroke->if->lineStroke->endCap->lineStroke->getEndCap->lineJoin->lineStroke->getLineJoin->if->lineStroke->getMiterLimit->lineWidth->lineStroke->getLineWidth->penSize->new->Point2D.Float->deviceTransform->deltaTransform->deviceLineWidth->Math->Math->abs->Math->abs->min->ul_pos->new->Point2D.Float->deviceTransform->transform->lr_pos->new->Point2D.Float->deviceTransform->transform->w->lr_pos->getX->ul_pos->getX->h->lr_pos->getY->ul_pos->getY->wPrinterJob->getPrinterJob->if->wPrinterJob->selectStylePen->wPrinterJob->ul_pos->getX->ul_pos->getY->frameRect->else->lowerRes->Math->wPrinterJob->getXRes->wPrinterJob->getYRes->min->if->wPrinterJob->selectPen->wPrinterJob->ul_pos->getX->ul_pos->getY->frameRect->else->new->Rectangle2D.Float->draw->else->new->Rectangle2D.Float->draw
WPathGraphics#deviceFillRect(int, int, int, int, Color)::: path graphics device fill rect:::deviceTransform->getTransform->transformType->deviceTransform->getType->usePath->if->new->Rectangle2D.Float->fill->return->tlc_pos->new->Point2D.Float->deviceTransform->transform->brc_pos->new->Point2D.Float->deviceTransform->transform->deviceWidth->brc_pos->getX->tlc_pos->getX->deviceHeight->brc_pos->getY->tlc_pos->getY->wPrinterJob->getPrinterJob->wPrinterJob->tlc_pos->getX->tlc_pos->getY->fillRect
WPathGraphics#deviceDrawLine(int, int, int, int, Color):::Draw a line using a pen created using the specified color and current stroke properties.:::stroke->getStroke->if->lineStroke->if->lineStroke->getDashArray->new->Line2D.Float->draw->return->lineWidth->lineStroke->getLineWidth->penSize->new->Point2D.Float->deviceTransform->getTransform->deviceTransform->deltaTransform->deviceLineWidth->Math->Math->abs->Math->abs->min->begin_pos->new->Point2D.Float->deviceTransform->transform->end_pos->new->Point2D.Float->deviceTransform->transform->endCap->lineStroke->getEndCap->lineJoin->lineStroke->getLineJoin->if->end_pos->getX->begin_pos->getX->end_pos->getY->begin_pos->getY->wPrinterJob->getPrinterJob->if->wPrinterJob->selectStylePen->wPrinterJob->begin_pos->getX->begin_pos->getY->moveTo->wPrinterJob->end_pos->getX->end_pos->getY->lineTo->else->lowerRes->Math->wPrinterJob->getXRes->wPrinterJob->getYRes->min->if->wPrinterJob->selectPen->wPrinterJob->begin_pos->getX->begin_pos->getY->moveTo->wPrinterJob->end_pos->getX->end_pos->getY->lineTo->else->new->Line2D.Float->draw
WPathGraphics#convertToWPath(PathIterator):::Given a Java2D PathIterator instance, this method translates that into a Window's path in the printer device context.:::segment->new->floatArr->segmentType->wPrinterJob->getPrinterJob->polyFillRule->if->pathIter->getWindingRule->else->wPrinterJob->setPolyFillMode->wPrinterJob->beginPath->while->pathIter->isDone->pathIter->currentSegment->switch->wPrinterJob->moveTo->break->wPrinterJob->lineTo->break->lastX->wPrinterJob->getPenX->lastY->wPrinterJob->getPenY->c1x->c1y->c2x->c2y->wPrinterJob->polyBezierTo->break->wPrinterJob->polyBezierTo->break->wPrinterJob->closeFigure->break->pathIter->next->wPrinterJob->endPath
WPopupMenuPeer#createMenu(WComponentPeer)::: popup menu peer create menu:::
WPopupMenuPeer#show(Event)::: popup menu peer show:::origin->peer->WToolkit->targetToPeer->if->nativeOrigin->WToolkit->getNativeContainer->for->c->c->getParent->_show
WPopupMenuPeer#show(Component, Point)::: popup menu peer show:::peer->WToolkit->targetToPeer->e->new->Event->if->nativeOrigin->WToolkit->getNativeContainer->_show
WPopupMenuPeer#_show(Event)::: popup menu peer _show:::
WPrintDialog#setPeer(ComponentPeer)::: print dialog set peer:::AWTAccessor->getComponentAccessor->setPeer
WPrintDialog#addNotify()::: print dialog add notify:::synchronized->getTreeLock->parent->getParent->if->parent->isDisplayable->parent->addNotify->if->isDisplayable->peer->Toolkit->getDefaultToolkit->createWPrintDialog->setPeer->super->addNotify
WPrintDialog#setRetVal(boolean)::: print dialog set ret val:::
WPrintDialog#getRetVal()::: print dialog get ret val:::return
WPrintDialog#initIDs():::Initialize JNI field and method ids:::
WPrintDialogPeer#create(WComponentPeer)::: print dialog peer create:::
WPrintDialogPeer#checkCreation()::: print dialog peer check creation:::
WPrintDialogPeer#disposeImpl()::: print dialog peer dispose impl:::WToolkit->targetDisposedPeer
WPrintDialogPeer#_show()::: print dialog peer _show:::
WPrintDialogPeer#show()::: print dialog peer show:::runnable->try->_show->setRetVal->catch->finally->setVisible->new->Thread->start
WPrintDialogPeer#setHWnd(long)::: print dialog peer set wnd:::foreach->if->window->modalDisable->else->window->modalEnable
WPrintDialogPeer#blockWindow(WWindowPeer)::: print dialog peer block window:::blockedWindows->add->if->window->modalDisable
WPrintDialogPeer#unblockWindow(WWindowPeer)::: print dialog peer unblock window:::blockedWindows->remove->if->window->modalEnable
WPrintDialogPeer#blockWindows(java.util.List)::: print dialog peer block windows:::foreach->wp->AWTAccessor->getComponentAccessor->getPeer->if->blockWindow
WPrintDialogPeer#toFront()::: print dialog peer to front:::
WPrintDialogPeer#toBack()::: print dialog peer to back:::
WPrintDialogPeer#initialize()::: print dialog peer initialize:::
WPrintDialogPeer#updateAlwaysOnTopState()::: print dialog peer update always on top state:::
WPrintDialogPeer#setResizable(boolean)::: print dialog peer set resizable:::
WPrintDialogPeer#hide()::: print dialog peer hide:::
WPrintDialogPeer#enable()::: print dialog peer enable:::
WPrintDialogPeer#disable()::: print dialog peer disable:::
WPrintDialogPeer#reshape(int, int, int, int)::: print dialog peer reshape:::
WPrintDialogPeer#handleEvent(Event)::: print dialog peer handle event:::return
WPrintDialogPeer#setForeground(Color)::: print dialog peer set foreground:::
WPrintDialogPeer#setBackground(Color)::: print dialog peer set background:::
WPrintDialogPeer#setFont(Font)::: print dialog peer set font:::
WPrintDialogPeer#updateMinimumSize()::: print dialog peer update minimum size:::
WPrintDialogPeer#updateIconImages()::: print dialog peer update icon images:::
WPrintDialogPeer#requestFocus(boolean, boolean)::: print dialog peer request focus:::return
WPrintDialogPeer#requestFocus(Component, boolean, boolean, long, Cause)::: print dialog peer request focus:::return
WPrintDialogPeer#updateFocusableWindowState()::: print dialog peer update focusable window state:::
WPrintDialogPeer#start()::: print dialog peer start:::
WPrintDialogPeer#beginValidate()::: print dialog peer begin validate:::
WPrintDialogPeer#endValidate()::: print dialog peer end validate:::
WPrintDialogPeer#invalidate(int, int, int, int)::: print dialog peer invalidate:::
WPrintDialogPeer#addDropTarget(DropTarget)::: print dialog peer add drop target:::
WPrintDialogPeer#removeDropTarget(DropTarget)::: print dialog peer remove drop target:::
WPrintDialogPeer#setZOrder(ComponentPeer)::: print dialog peer set order:::
WPrintDialogPeer#initIDs():::Initialize JNI field and method ids:::
WPrintDialogPeer#applyShape(sun.java2d.pipe.Region)::: print dialog peer apply shape:::
WPrintDialogPeer#setOpacity(float)::: print dialog peer set opacity:::
WPrintDialogPeer#setOpaque(boolean)::: print dialog peer set opaque:::
WPrintDialogPeer#updateWindow(java.awt.image.BufferedImage)::: print dialog peer update window:::
WPrintDialogPeer#createScreenSurface(boolean)::: print dialog peer create screen surface:::
WPrintDialogPeer#replaceSurfaceData()::: print dialog peer replace surface data:::
WPrinterJob.HandleRecord#dispose()::: handle record dispose:::WPrinterJob->deleteDC
WPrinterJob#getDisposerReferent()::: printer job get disposer referent:::return
WPrinterJob#pageDialog(PageFormat):::Display a dialog to the user allowing the modification of a PageFormat instance:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->getPrintService->return->super->pageDialog->pageClone->page->clone->result->dialog->new->WPageDialog->dialog->setRetVal->dialog->setVisible->dialog->getRetVal->dialog->dispose->if->printerName->getNativePrintService->if->myService->getName->equals->try->PrintServiceLookupProvider->getWin32PrintLUS->getPrintServiceByName->setPrintService->catch->finally->updatePageAttributes->return->else->return
WPrinterJob#displayNativeDialog()::: printer job display native dialog:::if->return->dlgOwner->attributes->get->owner->dlgOwner->getOwner->dialog->new->WPrintDialog->new->WPrintDialog->dialog->setRetVal->dialog->setVisible->prv->dialog->getRetVal->dialog->dispose->dest->attributes->get->if->return->else->title->strBundle->rb->ResourceBundle->getBundle->try->rb->getString->catch->finally->fileDialog->new->FileDialog->new->FileDialog->destURI->dest->getURI->pathName->destURI->getSchemeSpecificPart->if->file->new->File->fileDialog->file->getName->setFile->parent->file->getParentFile->if->fileDialog->parent->getPath->setDirectory->else->fileDialog->setFile->fileDialog->setVisible->fileName->fileDialog->getFile->if->fileDialog->dispose->return->fullName->fileDialog->getDirectory->f->new->File->pFile->f->getParentFile->while->f->exists->f->isFile->f->canWrite->pFile->exists->pFile->exists->pFile->canWrite->if->ServiceDialog->getMsg->ServiceDialog->getMsg->ServiceDialog->getMsg->new->PrintToFileErrorDialog->setVisible->else->ServiceDialog->getMsg->ServiceDialog->getMsg->ServiceDialog->getMsg->new->PrintToFileErrorDialog->setVisible->fileDialog->setVisible->fileDialog->getFile->if->fileDialog->dispose->return->fileDialog->getDirectory->new->File->f->getParentFile->fileDialog->dispose->attributes->f->toURI->new->Destination->add->return
WPrinterJob#printDialog():::Presents the user a dialog for changing properties of the print job interactively.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->new->HashPrintRequestAttributeSet->if->getPrintService->return->super->printDialog->if->return->else->return->displayNativeDialog
WPrinterJob#setPrintService(PrintService):::Associate this PrinterJob with a new PrintService:::super->setPrintService->if->return->service->getName->setNativePrintServiceIfNeeded
WPrinterJob#setNativePrintService(String)::: printer job set native print service:::
WPrinterJob#setNativePrintServiceIfNeeded(String)::: printer job set native print service if needed:::if->name->equals->setNativePrintService
WPrinterJob#getPrintService()::: printer job get print service:::if->printerName->getNativePrintService->if->PrintServiceLookupProvider->getWin32PrintLUS->getPrintServiceByName->if->return->PrintServiceLookup->lookupDefaultPrintService->if->try->myService->getName->setNativePrintServiceIfNeeded->catch->finally->return
WPrinterJob#getNativePrintService()::: printer job get native print service:::
WPrinterJob#initAttributeMembers()::: printer job init attribute members:::
WPrinterJob#setAttributes(PrintRequestAttributeSet):::copy the attributes to the native print job Note that this method, and hence the re-initialisation of the GDI values is done on each entry to the print dialog since an app could redisplay the print dialog for the same job and 1) the application may have changed attribute settings 2) the application may have changed the printer:::initAttributeMembers->super->setAttributes->getCopiesInt->if->return->attrs->attributes->toArray->for->i
WPrinterJob#getDefaultPage(PageFormat):::Alters the orientation and Paper to match defaults obtained from a printer.:::
WPrinterJob#defaultPage(PageFormat):::The passed in PageFormat will be copied and altered to describe the default page size and orientation of the PrinterJob's current printer:::newPage->page->clone->getDefaultPage->return
WPrinterJob#validatePaper(Paper, Paper):::validate the paper size against the current printer.:::
WPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int)::: printer job create path graphics:::pathGraphics->metrics->peekGraphics->getMetrics->if->metrics->hasNonSolidColors->metrics->hasCompositing->else->bufferedImage->new->BufferedImage->bufferedGraphics->bufferedImage->createGraphics->canRedraw->peekGraphics->getAWTDrawingOnly->new->WPathGraphics->return
WPrinterJob#getXRes()::: printer job get res:::if->return->else->return
WPrinterJob#getYRes()::: printer job get res:::if->return->else->return
WPrinterJob#getPhysicalPrintableX(Paper)::: printer job get physical printable x:::return
WPrinterJob#getPhysicalPrintableY(Paper)::: printer job get physical printable y:::return
WPrinterJob#getPhysicalPrintableWidth(Paper)::: printer job get physical printable width:::return
WPrinterJob#getPhysicalPrintableHeight(Paper)::: printer job get physical printable height:::return
WPrinterJob#getPhysicalPageWidth(Paper)::: printer job get physical page width:::return
WPrinterJob#getPhysicalPageHeight(Paper)::: printer job get physical page height:::return
WPrinterJob#isCollated():::We don't (yet) provide API to support collation, and when we do the logic here will require adjustment, but this method is currently necessary to honour user-originated collation requests - which can only originate from the print dialog:::return
WPrinterJob#getCollatedCopies():::Returns how many times the entire book should be printed by the PrintJob:::debug_println->if->super->isCollated->return->getCopies->return
WPrinterJob#getNoncollatedCopies():::Returns how many times each page in the book should be consecutively printed by PrinterJob:::if->super->isCollated->return->else->return->getCopies
WPrinterJob#getPrintDC():::Return the Window's device context that we are printing into.:::return
WPrinterJob#setPrintDC(long)::: printer job set print c:::
WPrinterJob#getDevMode()::: printer job get dev mode:::return
WPrinterJob#setDevMode(long)::: printer job set dev mode:::
WPrinterJob#getDevNames()::: printer job get dev names:::return
WPrinterJob#setDevNames(long)::: printer job set dev names:::
WPrinterJob#beginPath()::: printer job begin path:::getPrintDC->beginPath
WPrinterJob#endPath()::: printer job end path:::getPrintDC->endPath
WPrinterJob#closeFigure()::: printer job close figure:::getPrintDC->closeFigure
WPrinterJob#fillPath()::: printer job fill path:::getPrintDC->fillPath
WPrinterJob#moveTo(float, float)::: printer job move to:::getPrintDC->moveTo
WPrinterJob#lineTo(float, float)::: printer job line to:::getPrintDC->lineTo
WPrinterJob#polyBezierTo(float, float, float, float, float, float)::: printer job poly bezier to:::getPrintDC->polyBezierTo
WPrinterJob#setPolyFillMode(int):::Set the current polgon fill rule into the printer device context:::getPrintDC->setPolyFillMode
WPrinterJob#selectSolidBrush(Color)::: printer job select solid brush:::if->color->equals->rgb->color->getRGBColorComponents->getPrintDC->selectSolidBrush
WPrinterJob#getPenX():::Return the x coordinate of the current pen position in the print device context.:::return->getPrintDC->getPenX
WPrinterJob#getPenY():::Return the y coordinate of the current pen position in the print device context.:::return->getPrintDC->getPenY
WPrinterJob#selectClipPath():::Set the current path in the printer device's context to be clipping path.:::getPrintDC->selectClipPath
WPrinterJob#frameRect(float, float, float, float)::: printer job frame rect:::getPrintDC->frameRect
WPrinterJob#fillRect(float, float, float, float, Color)::: printer job fill rect:::rgb->color->getRGBColorComponents->getPrintDC->fillRect
WPrinterJob#selectPen(float, Color)::: printer job select pen:::rgb->color->getRGBColorComponents->getPrintDC->selectPen
WPrinterJob#selectStylePen(int, int, float, Color)::: printer job select style pen:::endCap->lineJoin->rgb->color->getRGBColorComponents->switch->break->break->break->switch->break->break->break->return->getPrintDC->selectStylePen
WPrinterJob#setFont(String, float, int, int, float):::Set a GDI font capable of drawing the java Font passed in.:::didSetFont->if->family->equals->getPrintDC->setFont->if->return
WPrinterJob#setTextColor(Color):::Set the GDI color for text drawing.:::if->color->equals->rgb->color->getRGBColorComponents->getPrintDC->setTextColor
WPrinterJob#removeControlChars(String):::Remove control characters.:::return->super->removeControlChars
WPrinterJob#textOut(String, float, float, float[]):::Draw the string text to the printer's device context at the specified position.:::text->removeControlChars->if->text->length->return->getPrintDC->text->length->textOut
WPrinterJob#glyphsOut(int[], float, float, float[]):::Draw the glyphs glyphs to the printer's device context at the specified position.:::glyphCharArray->new->charArr->for->i->glyphStr->new->String->getPrintDC->textOut
WPrinterJob#getGDIAdvance(String):::Get the advance of this text that GDI returns for the font currently selected into the GDI device context for this job:::removeControlChars->if->text->length->return->return->getPrintDC->getGDIAdvance
WPrinterJob#drawImage3ByteBGR(byte[], float, float, float, float, float, float, float, float):::Draw the 24 bit BGR image buffer represented by image to the GDI device context printDC:::getPrintDC->drawDIBImage
WPrinterJob#drawDIBImage(byte[], float, float, float, float, float, float, float, float, int, IndexColorModel)::: printer job draw image:::bitCount->bmiColors->if->icm->getPixelSize->new->byteArr->for->i->icm->getMapSize->getPrintDC->drawDIBImage
WPrinterJob#startPage(PageFormat, Printable, int, boolean):::Begin a new page.:::invalidateCachedState->deviceStartPage
WPrinterJob#endPage(PageFormat, Printable, int):::End a page.:::deviceEndPage
WPrinterJob#invalidateCachedState():::Forget any device state we may have cached.:::
WPrinterJob#setCopies(int):::Set the number of copies to be printed.:::super->setCopies->setNativeCopies
WPrinterJob#setNativeCopies(int):::Set copies in device.:::
WPrinterJob#jobSetup(Pageable, boolean):::Displays the print dialog and records the user's settings into this object:::
WPrinterJob#initPrinter()::: printer job init printer:::
WPrinterJob#_startDoc(String, String):::Call Window's StartDoc routine to begin a print job:::
WPrinterJob#startDoc()::: printer job start doc:::if->getJobName->_startDoc->cancel
WPrinterJob#endDoc():::Call Window's EndDoc routine to end a print job.:::
WPrinterJob#abortDoc():::Call Window's AbortDoc routine to abort a print job.:::
WPrinterJob#deleteDC(long, long, long):::Call Windows native resource freeing APIs:::
WPrinterJob#deviceStartPage(PageFormat, Printable, int, boolean):::Begin a new page:::
WPrinterJob#deviceEndPage(PageFormat, Printable, int):::End a page:::
WPrinterJob#printBand(byte[], int, int, int, int):::Prints the contents of the array of ints, 'data' to the current page:::
WPrinterJob#beginPath(long):::Begin a Window's rendering path in the device context printDC.:::
WPrinterJob#endPath(long):::End a Window's rendering path in the device context printDC.:::
WPrinterJob#closeFigure(long):::Close a subpath in a Window's rendering path in the device context printDC.:::
WPrinterJob#fillPath(long):::Fill a defined Window's rendering path in the device context printDC.:::
WPrinterJob#moveTo(long, float, float):::Move the Window's pen position to (x,y) in the device context printDC.:::
WPrinterJob#lineTo(long, float, float):::Draw a line from the current pen position to (x,y) in the device context printDC.:::
WPrinterJob#polyBezierTo(long, float, float, float, float, float, float)::: printer job poly bezier to:::
WPrinterJob#setPolyFillMode(long, int):::Set the current polgon fill rule into the device context printDC:::
WPrinterJob#selectSolidBrush(long, int, int, int):::Create a Window's solid brush for the color specified by (red, green, blue):::
WPrinterJob#getPenX(long):::Return the x coordinate of the current pen position in the device context printDC.:::
WPrinterJob#getPenY(long):::Return the y coordinate of the current pen position in the device context printDC.:::
WPrinterJob#selectClipPath(long):::Select the device context's current path to be the clipping path.:::
WPrinterJob#frameRect(long, float, float, float, float):::Draw a rectangle using specified brush.:::
WPrinterJob#fillRect(long, float, float, float, float, int, int, int):::Fill a rectangle specified by the coordinates using specified brush.:::
WPrinterJob#selectPen(long, float, int, int, int):::Create a solid brush using the RG & B colors and width:::
WPrinterJob#selectStylePen(long, long, long, float, int, int, int):::Create a solid brush using the RG & B colors and specified pen styles:::
WPrinterJob#setFont(long, String, float, boolean, boolean, int, float):::Set a GDI font capable of drawing the java Font passed in.:::
WPrinterJob#setTextColor(long, int, int, int):::Set the GDI color for text drawing.:::
WPrinterJob#textOut(long, String, int, boolean, float, float, float[]):::Draw the string text into the device context printDC at the specified position.:::
WPrinterJob#getGDIAdvance(long, String)::: printer job get advance:::
WPrinterJob#drawDIBImage(long, byte[], float, float, float, float, float, float, float, float, int, byte[]):::Draw the DIB compatible image buffer represented by image to the GDI device context printDC:::
WPrinterJob#getPrinterAttrib()::: printer job get printer attrib:::service->this->getPrintService->name->service->getName->return
WPrinterJob#getCollateAttrib()::: printer job get collate attrib:::return
WPrinterJob#setCollateAttrib(Attribute)::: printer job set collate attrib:::if->else
WPrinterJob#setCollateAttrib(Attribute, PrintRequestAttributeSet)::: printer job set collate attrib:::setCollateAttrib->set->add
WPrinterJob#getOrientAttrib()::: printer job get orient attrib:::orient->orientReq->attributes->get->if->myService->getDefaultAttributeValue->if->if->else->if->return
WPrinterJob#setOrientAttrib(Attribute, PrintRequestAttributeSet)::: printer job set orient attrib:::if->set->add
WPrinterJob#getCopiesAttrib()::: printer job get copies attrib:::if->return->else->return->getCopiesInt
WPrinterJob#setRangeCopiesAttribute(int, int, boolean, int)::: printer job set range copies attribute:::if->if->attributes->new->PageRanges->add->setPageRange->attributes->new->Copies->add->super->setCopies
WPrinterJob#getDestAttrib()::: printer job get dest attrib:::return
WPrinterJob#getQualityAttrib()::: printer job get quality attrib:::return
WPrinterJob#setQualityAttrib(Attribute)::: printer job set quality attrib:::if->else->if->else
WPrinterJob#setQualityAttrib(Attribute, PrintRequestAttributeSet)::: printer job set quality attrib:::setQualityAttrib->set->add
WPrinterJob#getColorAttrib()::: printer job get color attrib:::return
WPrinterJob#setColorAttrib(Attribute)::: printer job set color attrib:::if->else
WPrinterJob#setColorAttrib(Attribute, PrintRequestAttributeSet)::: printer job set color attrib:::setColorAttrib->set->add
WPrinterJob#getSidesAttrib()::: printer job get sides attrib:::return
WPrinterJob#setSidesAttrib(Attribute)::: printer job set sides attrib:::if->else->if->else
WPrinterJob#setSidesAttrib(Attribute, PrintRequestAttributeSet)::: printer job set sides attrib:::setSidesAttrib->set->add
WPrinterJob#getWin32MediaAttrib():::MediaSizeName / dmPaper:::wid_ht->if->media->attributes->get->if->msn->ms->MediaSize->getMediaSizeForName->if->ms->getX->ms->getY->return
WPrinterJob#setWin32MediaAttrib(Attribute)::: printer job set win32 media attrib:::if->return->msn->findPaperID
WPrinterJob#addPaperSize(PrintRequestAttributeSet, int, int, int)::: printer job add paper size:::if->return->msn->findWin32Media->if->findMatchingMediaSizeNameMM->if->aset->add
WPrinterJob#setWin32MediaAttrib(int, int, int)::: printer job set win32 media attrib:::addPaperSize
WPrinterJob#setMediaTrayAttrib(Attribute)::: printer job set media tray attrib:::if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else
WPrinterJob#setMediaTrayAttrib(int)::: printer job set media tray attrib:::tray->findMediaTray
WPrinterJob#getMediaTrayAttrib()::: printer job get media tray attrib:::return
WPrinterJob#getPrintToFileEnabled()::: printer job get print to file enabled:::security->System->getSecurityManager->if->printToFilePermission->new->FilePermission->try->security->checkPermission->catch->return->finally->return
WPrinterJob#setNativeAttributes(int, int, int)::: printer job set native attributes:::if->return->if->destPrn->attributes->get->if->try->attributes->new->File->toURI->new->Destination->add->catch->try->attributes->new->URI->new->Destination->add->catch->finally->finally->else->attributes->remove->if->setCollateAttrib->else->setCollateAttrib->if->if->attributes->add->else->if->attributes->add->else->attributes->add->if->if->setOrientAttrib->else->setOrientAttrib->if->if->setColorAttrib->else->setColorAttrib->if->quality->if->else->if->else->setQualityAttrib->if->sides->if->else->if->else->setSidesAttrib
WPrinterJob#getDevModeValues(PrintRequestAttributeSet, DevModeValues)::: printer job get dev mode values:::c->aset->get->if->c->getValue->sc->aset->get->if->ch->aset->get->if->if->else->s->aset->get->if->if->else->if->else->or->aset->get->if->m->aset->get->if->msn->findPaperID->mt->if->if->sam->aset->get->if->sam->getMedia->sam->getMedia->if->findTrayID->q->aset->get->if->if->else->if->else->r->aset->get->if->r->getCrossFeedResolution->r->getFeedResolution
WPrinterJob#setJobAttributes(PrintRequestAttributeSet, int, int, short, short, short, short, short, short, short)::: printer job set job attributes:::if->return->if->attributes->new->Copies->add->if->if->attributes->add->else->attributes->add->if->if->attributes->add->else->attributes->add->if->if->attributes->add->else->attributes->add->if->if->quality->if->else->if->else->attributes->add->else->if->attributes->new->PrinterResolution->add->if->sides->if->else->if->else->attributes->add->if->addPaperSize->if->tray->findMediaTray->attributes->new->SunAlternateMedia->add
WPrinterJob#showDocProperties(long, PrintRequestAttributeSet, int, short, short, short, short, short, short, short, short, short)::: printer job show doc properties:::
WPrinterJob#showDocumentProperties(Window, PrintService, PrintRequestAttributeSet)::: printer job show document properties:::try->service->getName->setNativePrintServiceIfNeeded->catch->finally->acc->AWTAccessor->getComponentAccessor->hWnd->acc->getPeer->getHWnd->info->new->DevModeValues->getDevModeValues->ok->showDocProperties->if->return->else->return
WPrinterJob#setResolutionDPI(int, int)::: printer job set resolution i:::if->res->new->PrinterResolution->attributes->add
WPrinterJob#setResolutionAttrib(Attribute)::: printer job set resolution attrib:::pr->pr->getCrossFeedResolution->pr->getFeedResolution
WPrinterJob#setPrinterNameAttrib(String)::: printer job set printer name attrib:::service->this->getPrintService->if->return->if->printerName->service->getName->equals->return->else->services->PrinterJob->lookupPrintServices->for->i
WPrinterJob.PrintToFileErrorDialog#init(Component, String, String, String)::: print to file error dialog init:::p->new->Panel->new->Label->add->btn->new->Button->btn->addActionListener->p->add->add->pack->dDim->getSize->if->fRect->parent->getBounds->setLocation
WPrinterJob.PrintToFileErrorDialog#actionPerformed(ActionEvent)::: print to file error dialog action performed:::setVisible->dispose->return
WPrinterJob#initIDs():::Initialize JNI field and method ids:::
WRobotPeer#_dispose()::: robot peer _dispose:::
WRobotPeer#disposeImpl()::: robot peer dispose impl:::_dispose
WRobotPeer#create()::: robot peer create:::
WRobotPeer#mouseMoveImpl(int, int)::: robot peer mouse move impl:::
WRobotPeer#mouseMove(int, int)::: robot peer mouse move:::point->SunGraphicsEnvironment->convertToDeviceSpace->mouseMoveImpl
WRobotPeer#mousePress(int)::: robot peer mouse press:::
WRobotPeer#mouseRelease(int)::: robot peer mouse release:::
WRobotPeer#mouseWheel(int)::: robot peer mouse wheel:::
WRobotPeer#keyPress(int)::: robot peer key press:::
WRobotPeer#keyRelease(int)::: robot peer key release:::
WRobotPeer#getRGBPixel(int, int)::: robot peer get pixel:::return->new->Rectangle->getRGBPixels
WRobotPeer#getRGBPixels(Rectangle)::: robot peer get pixels:::pixelArray->new->intArr->getRGBPixels->return
WRobotPeer#getRGBPixels(int, int, int, int, int[])::: robot peer get pixels:::
WScrollbarPeer#getScrollbarSize(int)::: scrollbar peer get scrollbar size:::
WScrollbarPeer#getMinimumSize()::: scrollbar peer get minimum size:::if->getOrientation->return->getScrollbarSize->new->Dimension->else->return->getScrollbarSize->new->Dimension
WScrollbarPeer#setValues(int, int, int, int)::: scrollbar peer set values:::
WScrollbarPeer#setLineIncrement(int)::: scrollbar peer set line increment:::
WScrollbarPeer#setPageIncrement(int)::: scrollbar peer set page increment:::
WScrollbarPeer#create(WComponentPeer)::: scrollbar peer create:::
WScrollbarPeer#initialize()::: scrollbar peer initialize:::sb->sb->getValue->sb->getVisibleAmount->sb->getMinimum->sb->getMaximum->setValues->super->initialize
WScrollbarPeer#postAdjustmentEvent(int, int, boolean)::: scrollbar peer post adjustment event:::sb->WToolkit->new->Runnable->executeOnEventHandlerThread
WScrollbarPeer#lineUp(int)::: scrollbar peer line up:::postAdjustmentEvent
WScrollbarPeer#lineDown(int)::: scrollbar peer line down:::postAdjustmentEvent
WScrollbarPeer#pageUp(int)::: scrollbar peer page up:::postAdjustmentEvent
WScrollbarPeer#pageDown(int)::: scrollbar peer page down:::postAdjustmentEvent
WScrollbarPeer#warp(int)::: scrollbar peer warp:::postAdjustmentEvent
WScrollbarPeer#drag(int)::: scrollbar peer drag:::if->postAdjustmentEvent
WScrollbarPeer#dragEnd(int)::: scrollbar peer drag end:::sb->if->return->WToolkit->new->Runnable->executeOnEventHandlerThread
WScrollbarPeer#shouldClearRectBeforePaint()::: scrollbar peer should clear rect before paint:::return
WScrollPanePeer#initIDs()::: scroll pane peer init ds:::
WScrollPanePeer#create(WComponentPeer)::: scroll pane peer create:::
WScrollPanePeer#getOffset(int)::: scroll pane peer get offset:::
WScrollPanePeer#initialize()::: scroll pane peer initialize:::super->initialize->setInsets->i->getInsets->setScrollPosition
WScrollPanePeer#setUnitIncrement(Adjustable, int)::: scroll pane peer set unit increment:::
WScrollPanePeer#setInsets()::: scroll pane peer set insets:::
WScrollPanePeer#setScrollPosition(int, int)::: scroll pane peer set scroll position:::
WScrollPanePeer#getHScrollbarHeight()::: scroll pane peer get scrollbar height:::return
WScrollPanePeer#_getHScrollbarHeight()::: scroll pane peer _get scrollbar height:::
WScrollPanePeer#getVScrollbarWidth()::: scroll pane peer get scrollbar width:::return
WScrollPanePeer#_getVScrollbarWidth()::: scroll pane peer _get scrollbar width:::
WScrollPanePeer#getScrollOffset()::: scroll pane peer get scroll offset:::x->getOffset->y->getOffset->return->new->Point
WScrollPanePeer#childResized(int, int):::The child component has been resized:::sp->vs->sp->getSize->setSpans->setInsets
WScrollPanePeer#setSpans(int, int, int, int)::: scroll pane peer set spans:::
WScrollPanePeer#setValue(Adjustable, int):::Called by ScrollPane's internal observer of the scrollpane's adjustables:::c->getScrollChild->if->return->p->c->getLocation->switch->adj->getOrientation->setScrollPosition->break->setScrollPosition->break
WScrollPanePeer#getScrollChild()::: scroll pane peer get scroll child:::sp->child->try->sp->getComponent->catch->finally->return
WScrollPanePeer#postScrollEvent(int, int, int, boolean)::: scroll pane peer post scroll event:::adjustor->new->Adjustor->WToolkit->new->ScrollEvent->executeOnEventHandlerThread
WScrollPanePeer.ScrollEvent#coalesceEvents(PeerEvent)::: scroll event coalesce events:::if->log->isLoggable->log->finest->if->return->return
WScrollPanePeer.Adjustor#run()::: adjustor run:::if->getScrollChild->return->sp->adj->if->sp->getVAdjustable->else->if->sp->getHAdjustable->else->if->log->isLoggable->log->fine->if->return->newpos->adj->getValue->switch->adj->getUnitIncrement->break->adj->getUnitIncrement->break->adj->getBlockIncrement->break->adj->getBlockIncrement->break->break->if->log->isLoggable->log->fine->return->Math->adj->getMinimum->max->Math->adj->getMaximum->min->adj->setValueIsAdjusting->AWTAccessor->getScrollPaneAdjustableAccessor->setTypedValue->hwAncestor->getScrollChild->acc->AWTAccessor->getComponentAccessor->while->acc->getPeer->hwAncestor->getParent->if->log->isLoggable->if->log->fine->hwPeer->acc->getPeer->hwPeer->paintDamagedAreaImmediately
WSystemTrayPeer#getTrayIconSize()::: system tray peer get tray icon size:::return->new->Dimension
WSystemTrayPeer#isSupported()::: system tray peer is supported:::return->Toolkit->getDefaultToolkit->isTraySupported
WSystemTrayPeer#disposeImpl()::: system tray peer dispose impl:::
WTaskbarPeer#init()::: taskbar peer init:::if->OSInfo->getWindowsVersion->compareTo->ShellFolder->nativeInit->invoke
WTaskbarPeer#isTaskbarSupported()::: taskbar peer is taskbar supported:::init->return
WTaskbarPeer#isSupported(Feature)::: taskbar peer is supported:::switch->return->return->return
WTaskbarPeer#imageToArray(Image)::: taskbar peer image to array:::if->return->w->image->getWidth->h->image->getHeight->if->return->bimg->new->BufferedImage->g2->bimg->createGraphics->g2->setComposite->g2->drawImage->g2->dispose->return->bimg->getRaster->getDataBuffer->getData
WTaskbarPeer#setWindowIconBadge(Window, Image)::: taskbar peer set window icon badge:::wp->AWTAccessor->getComponentAccessor->getPeer->if->buffer->imageToArray->ShellFolder->wp->getHWnd->image->getWidth->image->getHeight->setOverlayIcon->return->invoke
WTaskbarPeer#requestWindowUserAttention(Window)::: taskbar peer request window user attention:::wp->AWTAccessor->getComponentAccessor->getPeer->if->wp->getHWnd->flashWindow
WTaskbarPeer#setWindowProgressValue(Window, int)::: taskbar peer set window progress value:::wp->AWTAccessor->getComponentAccessor->getPeer->if->ShellFolder->wp->getHWnd->setProgressValue->return->invoke
WTaskbarPeer#setWindowProgressState(Window, State)::: taskbar peer set window progress state:::wp->AWTAccessor->getComponentAccessor->getPeer->if->ShellFolder->wp->getHWnd->setProgressState->return->invoke
WTaskbarPeer#nativeInit()::: taskbar peer native init:::
WTaskbarPeer#setProgressValue(long, int)::: taskbar peer set progress value:::
WTaskbarPeer#setProgressState(long, State)::: taskbar peer set progress state:::
WTaskbarPeer#setOverlayIcon(long, int[], int, int)::: taskbar peer set overlay icon:::
WTaskbarPeer#flashWindow(long)::: taskbar peer flash window:::
WTextAreaPeer#getMinimumSize()::: text area peer get minimum size:::return->getMinimumSize
WTextAreaPeer#insert(String, int)::: text area peer insert:::replaceRange
WTextAreaPeer#replaceRange(String, int, int)::: text area peer replace range:::
WTextAreaPeer#getPreferredSize(int, int)::: text area peer get preferred size:::return->getMinimumSize
WTextAreaPeer#getMinimumSize(int, int)::: text area peer get minimum size:::fm->getFont->getFontMetrics->return->fm->charWidth->fm->getHeight->new->Dimension
WTextAreaPeer#getInputMethodRequests()::: text area peer get input method requests:::return
WTextAreaPeer#create(WComponentPeer)::: text area peer create:::
WTextComponentPeer#setEditable(boolean)::: text component peer set editable:::enableEditing->getBackground->setBackground
WTextComponentPeer#getText()::: text component peer get text:::
WTextComponentPeer#setText(String)::: text component peer set text:::
WTextComponentPeer#getSelectionStart()::: text component peer get selection start:::
WTextComponentPeer#getSelectionEnd()::: text component peer get selection end:::
WTextComponentPeer#select(int, int)::: text component peer select:::
WTextComponentPeer#initialize()::: text component peer initialize:::tc->text->tc->getText->if->setText->tc->getSelectionStart->tc->getSelectionEnd->select->tc->isEditable->setEditable->super->initialize
WTextComponentPeer#enableEditing(boolean)::: text component peer enable editing:::
WTextComponentPeer#isFocusable()::: text component peer is focusable:::return
WTextComponentPeer#setCaretPosition(int)::: text component peer set caret position:::select
WTextComponentPeer#getCaretPosition()::: text component peer get caret position:::return->getSelectionStart
WTextComponentPeer#valueChanged()::: text component peer value changed:::new->TextEvent->postEvent
WTextComponentPeer#initIDs():::Initialize JNI field and method IDs:::
WTextComponentPeer#shouldClearRectBeforePaint()::: text component peer should clear rect before paint:::return
WTextFieldPeer#getMinimumSize()::: text field peer get minimum size:::fm->getFont->getFontMetrics->return->fm->getText->stringWidth->fm->getHeight->new->Dimension
WTextFieldPeer#handleJavaKeyEvent(KeyEvent)::: text field peer handle java key event:::switch->e->getID->if->e->getKeyChar->e->isAltDown->e->isControlDown->getText->e->getWhen->e->getModifiers->new->ActionEvent->postEvent->return->break->return
WTextFieldPeer#setEchoChar(char)::: text field peer set echo char:::
WTextFieldPeer#getPreferredSize(int)::: text field peer get preferred size:::return->getMinimumSize
WTextFieldPeer#getMinimumSize(int)::: text field peer get minimum size:::fm->getFont->getFontMetrics->return->fm->charWidth->fm->getHeight->new->Dimension
WTextFieldPeer#getInputMethodRequests()::: text field peer get input method requests:::return
WTextFieldPeer#create(WComponentPeer)::: text field peer create:::
WTextFieldPeer#initialize()::: text field peer initialize:::tf->if->tf->echoCharIsSet->tf->getEchoChar->setEchoChar->super->initialize
WToolkit#initIDs():::Initialize JNI field and method IDs:::
WToolkit#loadLibraries()::: toolkit load libraries:::if->new->java.security.PrivilegedAction<Void>->doPrivileged
WToolkit#getWindowsVersion()::: toolkit get windows version:::
WToolkit#disableCustomPalette()::: toolkit disable custom palette:::
WToolkit#embeddedInit():::Initializes the Toolkit for use in an embedded environment.:::
WToolkit#embeddedDispose():::Disposes the Toolkit in an embedded environment:::
WToolkit#embeddedEventLoopIdleProcessing():::To be called after processing the event queue by users of the above embeddedInit() function:::
WToolkit.ToolkitDisposer#dispose()::: toolkit disposer dispose:::WToolkit->postDispose
WToolkit#postDispose()::: toolkit post dispose:::
WToolkit#startToolkitThread(Runnable, ThreadGroup)::: toolkit start toolkit thread:::
WToolkit#registerShutdownHook()::: toolkit register shutdown hook:::AccessController->shutdown->ThreadGroupUtils->getRootThreadGroup->this->shutdown->new->Thread->shutdown->setContextClassLoader->Runtime->getRuntime->addShutdownHook->return->doPrivileged
WToolkit#run()::: toolkit run:::AccessController->Thread->currentThread->setContextClassLoader->Thread->currentThread->setPriority->return->doPrivileged->startPump->init->if->registerShutdownHook->synchronized->notifyAll->if->eventLoop
WToolkit#init()::: toolkit init:::
WToolkit#eventLoop()::: toolkit event loop:::
WToolkit#shutdown()::: toolkit shutdown:::
WToolkit#startSecondaryEventLoop()::: toolkit start secondary event loop:::
WToolkit#quitSecondaryEventLoop()::: toolkit quit secondary event loop:::
WToolkit#createButton(Button)::: toolkit create button:::peer->new->WButtonPeer->targetCreatedPeer->return
WToolkit#createTextField(TextField)::: toolkit create text field:::peer->new->WTextFieldPeer->targetCreatedPeer->return
WToolkit#createLabel(Label)::: toolkit create label:::peer->new->WLabelPeer->targetCreatedPeer->return
WToolkit#createList(List)::: toolkit create list:::peer->new->WListPeer->targetCreatedPeer->return
WToolkit#createCheckbox(Checkbox)::: toolkit create checkbox:::peer->new->WCheckboxPeer->targetCreatedPeer->return
WToolkit#createScrollbar(Scrollbar)::: toolkit create scrollbar:::peer->new->WScrollbarPeer->targetCreatedPeer->return
WToolkit#createScrollPane(ScrollPane)::: toolkit create scroll pane:::peer->new->WScrollPanePeer->targetCreatedPeer->return
WToolkit#createTextArea(TextArea)::: toolkit create text area:::peer->new->WTextAreaPeer->targetCreatedPeer->return
WToolkit#createChoice(Choice)::: toolkit create choice:::peer->new->WChoicePeer->targetCreatedPeer->return
WToolkit#createFrame(Frame)::: toolkit create frame:::peer->new->WFramePeer->targetCreatedPeer->return
WToolkit#createLightweightFrame(LightweightFrame)::: toolkit create lightweight frame:::peer->new->WLightweightFramePeer->targetCreatedPeer->return
WToolkit#createCanvas(Canvas)::: toolkit create canvas:::peer->new->WCanvasPeer->targetCreatedPeer->return
WToolkit#disableBackgroundErase(Canvas)::: toolkit disable background erase:::peer->AWTAccessor->getComponentAccessor->getPeer->if->throw->new->IllegalStateException->peer->disableBackgroundErase
WToolkit#createPanel(Panel)::: toolkit create panel:::peer->new->WPanelPeer->targetCreatedPeer->return
WToolkit#createWindow(Window)::: toolkit create window:::peer->new->WWindowPeer->targetCreatedPeer->return
WToolkit#createDialog(Dialog)::: toolkit create dialog:::peer->new->WDialogPeer->targetCreatedPeer->return
WToolkit#createFileDialog(FileDialog)::: toolkit create file dialog:::peer->new->WFileDialogPeer->targetCreatedPeer->return
WToolkit#createMenuBar(MenuBar)::: toolkit create menu bar:::peer->new->WMenuBarPeer->targetCreatedPeer->return
WToolkit#createMenu(Menu)::: toolkit create menu:::peer->new->WMenuPeer->targetCreatedPeer->return
WToolkit#createPopupMenu(PopupMenu)::: toolkit create popup menu:::peer->new->WPopupMenuPeer->targetCreatedPeer->return
WToolkit#createMenuItem(MenuItem)::: toolkit create menu item:::peer->new->WMenuItemPeer->targetCreatedPeer->return
WToolkit#createCheckboxMenuItem(CheckboxMenuItem)::: toolkit create checkbox menu item:::peer->new->WCheckboxMenuItemPeer->targetCreatedPeer->return
WToolkit#createRobot(Robot, GraphicsDevice)::: toolkit create robot:::return->new->WRobotPeer
WToolkit#createEmbeddedFrame(WEmbeddedFrame)::: toolkit create embedded frame:::peer->new->WEmbeddedFramePeer->targetCreatedPeer->return
WToolkit#createWPrintDialog(WPrintDialog)::: toolkit create print dialog:::peer->new->WPrintDialogPeer->targetCreatedPeer->return
WToolkit#createWPageDialog(WPageDialog)::: toolkit create page dialog:::peer->new->WPageDialogPeer->targetCreatedPeer->return
WToolkit#createTrayIcon(TrayIcon)::: toolkit create tray icon:::peer->new->WTrayIconPeer->targetCreatedPeer->return
WToolkit#createSystemTray(SystemTray)::: toolkit create system tray:::return->new->WSystemTrayPeer
WToolkit#isTraySupported()::: toolkit is tray supported:::return
WToolkit#getDataTransferer()::: toolkit get data transferer:::return->WDataTransferer->getInstanceImpl
WToolkit#getKeyboardFocusManagerPeer()::: toolkit get keyboard focus manager peer:::return->WKeyboardFocusManagerPeer->getInstance
WToolkit#getMouseInfoPeer()::: toolkit get mouse info peer:::if->new->WMouseInfoPeer->return
WToolkit#setDynamicLayoutNative(boolean)::: toolkit set dynamic layout native:::
WToolkit#setDynamicLayout(boolean)::: toolkit set dynamic layout:::if->return->setDynamicLayoutNative
WToolkit#isDynamicLayoutSet()::: toolkit is dynamic layout set:::return
WToolkit#isDynamicLayoutSupportedNative()::: toolkit is dynamic layout supported native:::
WToolkit#isDynamicLayoutActive()::: toolkit is dynamic layout active:::return->isDynamicLayoutSet->isDynamicLayoutSupported
WToolkit#isFrameStateSupported(int):::Returns true if this frame state is supported.:::switch->return->return
WToolkit#makeColorModel()::: toolkit make color model:::
WToolkit#getScreenInsets(GraphicsConfiguration)::: toolkit get screen insets:::return->gc->getDevice->getScreen->getScreenInsets
WToolkit#getScreenResolution()::: toolkit get screen resolution:::ge->GraphicsEnvironment->getLocalGraphicsEnvironment->return->ge->getXResolution
WToolkit#getScreenInsets(int)::: toolkit get screen insets:::
WToolkit#getFontMetrics(Font)::: toolkit get font metrics:::fm->FontManagerFactory->getInstance->if->usePlatformFontMetrics->return->WFontMetrics->getFontMetrics->return->super->getFontMetrics
WToolkit#getFontPeer(String, int)::: toolkit get font peer:::retval->lcName->name->toLowerCase->if->cacheFontPeer->get->if->return->new->WFontPeer->if->if->new->Hashtable<>->if->cacheFontPeer->put->return
WToolkit#nativeSync()::: toolkit native sync:::
WToolkit#sync()::: toolkit sync:::nativeSync->OGLRenderQueue->sync->D3DRenderQueue->sync
WToolkit#getPrintJob(Frame, String, Properties)::: toolkit get print job:::return->getPrintJob
WToolkit#getPrintJob(Frame, String, JobAttributes, PageAttributes)::: toolkit get print job:::if->throw->new->NullPointerException->printJob->new->PrintJob2D->if->printJob->printDialog->return
WToolkit#beep()::: toolkit beep:::
WToolkit#getLockingKeyState(int)::: toolkit get locking key state:::if->throw->new->IllegalArgumentException->return->getLockingKeyStateNative
WToolkit#getLockingKeyStateNative(int)::: toolkit get locking key state native:::
WToolkit#setLockingKeyState(int, boolean)::: toolkit set locking key state:::if->throw->new->IllegalArgumentException->setLockingKeyStateNative
WToolkit#setLockingKeyStateNative(int, boolean)::: toolkit set locking key state native:::
WToolkit#getSystemClipboard()::: toolkit get system clipboard:::security->System->getSecurityManager->if->security->checkPermission->synchronized->if->new->WClipboard->return
WToolkit#loadSystemColors(int[])::: toolkit load system colors:::
WToolkit#targetToPeer(Object)::: toolkit target to peer:::return->SunToolkit->targetToPeer
WToolkit#targetDisposedPeer(Object, Object)::: toolkit target disposed peer:::SunToolkit->targetDisposedPeer
WToolkit#getInputMethodAdapterDescriptor():::Returns a new input method adapter descriptor for native input methods.:::return->new->WInputMethodDescriptor
WToolkit#mapInputMethodHighlight(InputMethodHighlight):::Returns a style map for the input method highlight.:::return->WInputMethod->mapInputMethodHighlight
WToolkit#enableInputMethodsForTextComponent():::Returns whether enableInputMethods should be set to true for peered TextComponent instances on this platform.:::return
WToolkit#getDefaultKeyboardLocale():::Returns the default keyboard locale of the underlying operating system:::locale->WInputMethod->getNativeLocale->if->return->super->getDefaultKeyboardLocale->else->return
WToolkit#createCustomCursor(Image, Point, String):::Returns a new custom cursor.:::return->new->WCustomCursor
WToolkit#getBestCursorSize(int, int):::Returns the supported cursor size (Win32 only has one).:::return->WCustomCursor->getCursorWidth->WCustomCursor->getCursorHeight->new->Dimension
WToolkit#getMaximumCursorColors()::: toolkit get maximum cursor colors:::
WToolkit#paletteChanged()::: toolkit palette changed:::lge->GraphicsEnvironment->getLocalGraphicsEnvironment->if->paletteChanged
WToolkit#displayChanged()::: toolkit display changed:::runnable->lge->GraphicsEnvironment->getLocalGraphicsEnvironment->if->displayChanged->if->AppContext->getAppContext->EventQueue->invokeLater->else->if->Executors->t->Executors->defaultThreadFactory->newThread->t->setDaemon->return->newFixedThreadPool->displayChangeExecutor->submit
WToolkit#createDragSourceContextPeer(DragGestureEvent)::: toolkit create drag source context peer:::f->SunToolkit->dge->getComponent->getLightweightFrame->if->return->f->createDragSourceContextPeer->return->WDragSourceContextPeer->createDragSourceContextPeer
WToolkit#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)::: toolkit create drag gesture recognizer:::f->SunToolkit->getLightweightFrame->if->return->f->createDragGestureRecognizer->if->equals->return->new->WMouseDragGestureRecognizer->else->return
WToolkit#lazilyLoadDesktopProperty(String)::: toolkit lazily load desktop property:::if->name->startsWith->cursorName->name->prefix->length->name->length->substring->try->return->Cursor->getSystemCustomCursor->catch->throw->new->RuntimeException->finally->if->name->equals->return->Boolean->isDynamicLayoutSupported->valueOf->if->WDesktopProperties->isWindowsProperty->name->startsWith->name->startsWith->synchronized->lazilyInitWProps->return->desktopProperties->get->return->super->lazilyLoadDesktopProperty
WToolkit#lazilyInitWProps()::: toolkit lazily init props:::if->new->WDesktopProperties->wprops->getProperties->updateProperties
WToolkit#isDynamicLayoutSupported()::: toolkit is dynamic layout supported:::nativeDynamic->isDynamicLayoutSupportedNative->lazilyInitWProps->prop->desktopProperties->get->if->log->isLoggable->log->finer->if->prop->booleanValue->windowsSettingChange->return->return->prop->booleanValue
WToolkit#windowsSettingChange()::: toolkit windows setting change:::props->getWProps->if->return->props->get->updateXPStyleEnabled->if->AppContext->getAppContext->updateProperties->else->EventQueue->updateProperties->invokeLater
WToolkit#updateProperties(Map)::: toolkit update properties:::if->return->props->get->updateXPStyleEnabled->foreach->props->keySet->val->props->get->if->log->isLoggable->log->finer->setDesktopProperty
WToolkit#getWProps()::: toolkit get props:::return->wprops->getProperties
WToolkit#updateXPStyleEnabled(Object)::: toolkit update style enabled:::equals
WToolkit#addPropertyChangeListener(String, PropertyChangeListener)::: toolkit add property change listener:::if->return->if->WDesktopProperties->isWindowsProperty->name->startsWith->name->startsWith->lazilyInitWProps->super->addPropertyChangeListener
WToolkit#initializeDesktopProperties()::: toolkit initialize desktop properties:::desktopProperties->Integer->valueOf->put->desktopProperties->Integer->valueOf->put->desktopProperties->put->desktopProperties->put
WToolkit#getDesktopAAHints()::: toolkit get desktop hints:::if->return->else->return->wprops->getDesktopAAHints
WToolkit#isModalityTypeSupported(Dialog.ModalityType)::: toolkit is modality type supported:::return
WToolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType)::: toolkit is modal exclusion type supported:::return
WToolkit#getWToolkit()::: toolkit get toolkit:::toolkit->Toolkit->getDefaultToolkit->return
WToolkit#useBufferPerWindow():::There are two reasons why we don't use buffer per window when Vista's DWM (aka Aero) is enabled: - since with DWM all windows are already double-buffered, the application   doesn't get expose events so we don't get to use our true back-buffer,   wasting memory and performance (this is valid for both d3d and gdi   pipelines) - in some cases with buffer per window enabled it is possible for the   paint manager to redirect rendering to the screen for some operations   (like copyArea), and since bpw uses its own BufferStrategy the   d3d onscreen rendering support is disabled and rendering goes through   GDI:::return->Win32GraphicsEnvironment->isDWMCompositionEnabled
WToolkit#grab(Window)::: toolkit grab:::peer->AWTAccessor->getComponentAccessor->getPeer->if->grab
WToolkit#ungrab(Window)::: toolkit ungrab:::peer->AWTAccessor->getComponentAccessor->getPeer->if->ungrab
WToolkit#isComponentValidForTouchKeyboard(Component)::: toolkit is component valid for touch keyboard:::if->comp->isEnabled->comp->isFocusable->isEditable->isEditable->return->return
WToolkit#showOrHideTouchKeyboard(Component, AWTEvent)::: toolkit show or hide touch keyboard:::if->return->if->isComponentValidForTouchKeyboard->me->if->me->getID->if->AWTAccessor->getMouseEventAccessor->isCausedByTouchEvent->new->WeakReference<>->else->new->WeakReference<>->else->if->me->getID->if->AWTAccessor->getMouseEventAccessor->isCausedByTouchEvent->if->compOnTouchDownEvent->get->showTouchKeyboard->else->if->compOnMousePressedEvent->get->showTouchKeyboard->else->if->fe->if->fe->getID->if->fe->getOppositeComponent->isComponentValidForTouchKeyboard->hideTouchKeyboard
WToolkit#showTouchKeyboard(boolean)::: toolkit show touch keyboard:::
WToolkit#hideTouchKeyboard()::: toolkit hide touch keyboard:::
WToolkit#syncNativeQueue(long)::: toolkit sync native queue:::
WToolkit#isDesktopSupported()::: toolkit is desktop supported:::return
WToolkit#createDesktopPeer(Desktop)::: toolkit create desktop peer:::return->new->WDesktopPeer
WToolkit#isTaskbarSupported()::: toolkit is taskbar supported:::return->WTaskbarPeer->isTaskbarSupported
WToolkit#createTaskbarPeer(Taskbar)::: toolkit create taskbar peer:::return->new->WTaskbarPeer
WToolkit#setExtraMouseButtonsEnabledNative(boolean)::: toolkit set extra mouse buttons enabled native:::
WToolkit#areExtraMouseButtonsEnabled()::: toolkit are extra mouse buttons enabled:::return
WToolkit#getNumberOfButtonsImpl()::: toolkit get number of buttons impl:::
WToolkit#getNumberOfButtons()::: toolkit get number of buttons:::if->getNumberOfButtonsImpl->return
WToolkit#isWindowOpacitySupported()::: toolkit is window opacity supported:::return
WToolkit#isWindowShapingSupported()::: toolkit is window shaping supported:::return
WToolkit#isWindowTranslucencySupported()::: toolkit is window translucency supported:::return
WToolkit#isTranslucencyCapable(GraphicsConfiguration)::: toolkit is translucency capable:::return
WToolkit#needUpdateWindow()::: toolkit need update window:::return
WTrayIconPeer#disposeImpl()::: tray icon peer dispose impl:::if->popupParent->dispose->popupParent->dispose->_dispose->WToolkit->targetDisposedPeer
WTrayIconPeer#updateImage()::: tray icon peer update image:::image->getImage->if->updateNativeImage
WTrayIconPeer#setToolTip(String)::: tray icon peer set tool tip:::
WTrayIconPeer#showPopupMenu(int, int)::: tray icon peer show popup menu:::if->isDisposed->return->SunToolkit->newPopup->getPopupMenu->if->if->popupParent->remove->if->popupParent->add->if->peer->AWTAccessor->getMenuComponentAccessor->getPeer->peer->new->Point->show->executeOnEventHandlerThread
WTrayIconPeer#displayMessage(String, String, String)::: tray icon peer display message:::if->if->_displayMessage
WTrayIconPeer#updateNativeImage(Image)::: tray icon peer update native image:::if->isDisposed->return->autosize->isImageAutoSize->tx->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->getDefaultTransform->w->Region->tx->getScaleX->clipScale->h->Region->tx->getScaleY->clipScale->imgWidth->Region->image->getWidth->tx->getScaleX->clipScale->imgHeight->Region->image->getHeight->tx->getScaleY->clipScale->bufImage->new->BufferedImage->gr->bufImage->createGraphics->if->try->gr->setPaintMode->gr->drawImage->createNativeImage->updateNativeIcon->if->catch->finally->gr->dispose
WTrayIconPeer#createNativeImage(BufferedImage)::: tray icon peer create native image:::raster->bimage->getRaster->andMask->new->byteArr->pixels->raster->getDataBuffer->getData->npixels->ficW->raster->getWidth->for->i->if->getScanlineStride->bimage->getRaster->getDataBuffer->getData->raster->getWidth->raster->getHeight->setNativeIcon
WTrayIconPeer#postEvent(AWTEvent)::: tray icon peer post event:::WToolkit->WToolkit->targetToAppContext->postEvent
WTrayIconPeer#create()::: tray icon peer create:::
WTrayIconPeer#_dispose()::: tray icon peer _dispose:::
WTrayIconPeer#updateNativeIcon(boolean)::: tray icon peer update native icon:::
WTrayIconPeer#setNativeIcon(int[], byte[], int, int, int)::: tray icon peer set native icon:::
WTrayIconPeer#_displayMessage(String, String, String)::: tray icon peer _display message:::
WTrayIconPeer.IconObserver#imageUpdate(Image, int, int, int, int, int)::: icon observer image update:::if->getImage->isDisposed->return->if->updateNativeImage->return
WWindowPeer#initIDs():::Initialize JNI field IDs:::
WWindowPeer#disposeImpl()::: window peer dispose impl:::appContext->SunToolkit->targetToAppContext->synchronized->l->appContext->get->if->l->remove->gc->getGraphicsConfiguration->gc->getDevice->removeDisplayChangedListener->synchronized->getStateLock->currentPainter->if->currentPainter->flush->super->disposeImpl
WWindowPeer#toFront()::: window peer to front:::updateFocusableWindowState->_toFront
WWindowPeer#_toFront()::: window peer _to front:::
WWindowPeer#toBack()::: window peer to back:::
WWindowPeer#setAlwaysOnTopNative(boolean)::: window peer set always on top native:::
WWindowPeer#setAlwaysOnTop(boolean)::: window peer set always on top:::if->isVisible->setAlwaysOnTopNative
WWindowPeer#updateAlwaysOnTopState()::: window peer update always on top state:::isAlwaysOnTop->setAlwaysOnTop
WWindowPeer#updateFocusableWindowState()::: window peer update focusable window state:::isFocusableWindow->setFocusableWindow
WWindowPeer#setFocusableWindow(boolean)::: window peer set focusable window:::
WWindowPeer#setTitle(String)::: window peer set title:::if->_setTitle
WWindowPeer#_setTitle(String)::: window peer _set title:::
WWindowPeer#setResizable(boolean)::: window peer set resizable:::_setResizable
WWindowPeer#_setResizable(boolean)::: window peer _set resizable:::
WWindowPeer#initialize()::: window peer initialize:::super->initialize->updateInsets->if->isFontSet->setFont->setFont->if->isForegroundSet->setForeground->if->isBackgroundSet->setBackground->gc->getGraphicsConfiguration->gd->gc->getDevice->gd->addDisplayChangedListener->gd->getDefaultScaleX->gd->getDefaultScaleY->initActiveWindowsTracking->updateIconImages->shape->getShape->if->Region->getInstance->applyShape->opacity->getOpacity->if->setOpacity->synchronized->getStateLock->isOpaque->setOpaque
WWindowPeer#createAwtWindow(WComponentPeer)::: window peer create awt window:::
WWindowPeer#preCreate(WComponentPeer)::: window peer pre create:::getType
WWindowPeer#create(WComponentPeer)::: window peer create:::preCreate->createAwtWindow
WWindowPeer#getNativeParent()::: window peer get native parent:::owner->getOwner->return->WToolkit->targetToPeer
WWindowPeer#realShow()::: window peer real show:::super->show
WWindowPeer#show()::: window peer show:::updateFocusableWindowState->alwaysOnTop->isAlwaysOnTop->updateGC->realShow->updateMinimumSize->if->isAlwaysOnTopSupported->setAlwaysOnTop->synchronized->getStateLock->if->updateWindow->owner->getNativeParent->if->owner->isLightweightFramePeer->b->getBounds->handleExpose
WWindowPeer#updateInsets(Insets)::: window peer update insets:::
WWindowPeer#getSysMinWidth()::: window peer get sys min width:::
WWindowPeer#getSysMinHeight()::: window peer get sys min height:::
WWindowPeer#getSysIconWidth()::: window peer get sys icon width:::
WWindowPeer#getSysIconHeight()::: window peer get sys icon height:::
WWindowPeer#getSysSmIconWidth()::: window peer get sys sm icon width:::
WWindowPeer#getSysSmIconHeight()::: window peer get sys sm icon height:::
WWindowPeer#setIconImagesData(int[], int, int, int[], int, int):::windows/classes/sun/awt/windows/ Creates native icon from specified raster data and updates icon for window and all descendant windows that inherit icon:::
WWindowPeer#reshapeFrame(int, int, int, int)::: window peer reshape frame:::
WWindowPeer#getNativeWindowSize()::: window peer get native window size:::
WWindowPeer#getScaledWindowSize()::: window peer get scaled window size:::return->getNativeWindowSize
WWindowPeer#requestWindowFocus(FocusEvent.Cause)::: window peer request window focus:::if->focusAllowedFor->return->return->requestWindowFocus
WWindowPeer#requestWindowFocus(boolean)::: window peer request window focus:::
WWindowPeer#focusAllowedFor()::: window peer focus allowed for:::window->if->window->isVisible->window->isEnabled->window->isFocusableWindow->return->if->isModalBlocked->return->return
WWindowPeer#hide()::: window peer hide:::listener->if->listener->new->WindowEvent->windowClosing->super->hide
WWindowPeer#preprocessPostEvent(AWTEvent)::: window peer preprocess post event:::if->listener->if->switch->event->getID->listener->windowClosing->break->listener->windowIconified->break
WWindowPeer#addWindowListener(WindowListener)::: window peer add window listener:::AWTEventMulticaster->add
WWindowPeer#removeWindowListener(WindowListener)::: window peer remove window listener:::AWTEventMulticaster->remove
WWindowPeer#updateMinimumSize()::: window peer update minimum size:::minimumSize->if->isMinimumSizeSet->getMinimumSize->if->msw->getSysMinWidth->msh->getSysMinHeight->w->h->setMinSize->else->setMinSize
WWindowPeer#updateIconImages()::: window peer update icon images:::imageList->getIconImages->if->imageList->size->setIconImagesData->else->w->getSysIconWidth->h->getSysIconHeight->smw->getSysSmIconWidth->smh->getSysSmIconHeight->tx->getGraphicsConfiguration->getDefaultTransform->Region->tx->getScaleX->clipScale->Region->tx->getScaleY->clipScale->Region->tx->getScaleX->clipScale->Region->tx->getScaleY->clipScale->iconData->SunToolkit->getScaledIconData->iconSmData->SunToolkit->getScaledIconData->if->iconData->getData->iconSmData->getData->setIconImagesData->else->setIconImagesData
WWindowPeer#setMinSize(int, int)::: window peer set min size:::
WWindowPeer#isModalBlocked()::: window peer is modal blocked:::return
WWindowPeer#setModalBlocked(Dialog, boolean)::: window peer set modal blocked:::synchronized->getTarget->getTreeLock->blockerPeer->AWTAccessor->getComponentAccessor->getPeer->if->if->blockWindow->else->if->blockWindow->else->blockerPeer->getHWnd->modalDisable->else->if->unblockWindow->else->if->unblockWindow->else->modalEnable
WWindowPeer#modalDisable(Dialog, long)::: window peer modal disable:::
WWindowPeer#modalEnable(Dialog)::: window peer modal enable:::
WWindowPeer#getActiveWindowHandles(Component)::: window peer get active window handles:::appContext->SunToolkit->targetToAppContext->if->return->synchronized->l->appContext->get->if->return->result->l->size->new->longArr->for->j->l->size->return
WWindowPeer#draggedToNewScreen()::: window peer dragged to new screen:::displayChanged
WWindowPeer#updateGC()::: window peer update c:::scrn->getScreenImOn->if->screenLog->isLoggable->log->finer->oldDev->winGraphicsConfig->getDevice->newDev->devs->GraphicsEnvironment->getLocalGraphicsEnvironment->getScreenDevices->if->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->else->newDev->getDefaultConfiguration->if->screenLog->isLoggable->if->screenLog->fine->if->oldDev->removeDisplayChangedListener->newDev->addDisplayChangedListener->AWTAccessor->getComponentAccessor->setGraphicsConfiguration->checkDPIChange
WWindowPeer#checkDPIChange(Win32GraphicsDevice, Win32GraphicsDevice)::: window peer check change:::newScaleX->newDev->getDefaultScaleX->newScaleY->newDev->getDefaultScaleY->if->oldDev->getScreen->newDev->getScreen->windowDPIChange
WWindowPeer#displayChanged():::From the DisplayChangedListener interface:::SunToolkit->this->updateGC->executeOnEventHandlerThread
WWindowPeer#paletteChanged():::Part of the DisplayChangedListener interface: components do not need to react to this event:::
WWindowPeer#getScreenImOn()::: window peer get screen im on:::
WWindowPeer#setFullScreenExclusiveModeState(boolean)::: window peer set full screen exclusive mode state:::
WWindowPeer#grab()::: window peer grab:::nativeGrab
WWindowPeer#ungrab()::: window peer ungrab:::nativeUngrab
WWindowPeer#nativeGrab()::: window peer native grab:::
WWindowPeer#nativeUngrab()::: window peer native ungrab:::
WWindowPeer#hasWarningWindow()::: window peer has warning window:::return->getWarningString
WWindowPeer#isTargetUndecorated()::: window peer is target undecorated:::return
WWindowPeer#repositionSecurityWarning()::: window peer reposition security warning:::
WWindowPeer#setBounds(int, int, int, int, int)::: window peer set bounds:::cx->cy->current->getGraphicsConfiguration->other->SunGraphicsEnvironment->getGraphicsConfigurationAtPoint->if->current->equals->tx->other->getDefaultTransform->otherScaleX->tx->getScaleX->otherScaleY->tx->getScaleY->initScales->if->Math->floor->Math->floor->super->setBounds
WWindowPeer#initScales()::: window peer init scales:::if->return->gc->getGraphicsConfiguration->if->gd->getDevice->gd->getDefaultScaleX->gd->getDefaultScaleY->else->tx->gc->getDefaultTransform->tx->getScaleX->tx->getScaleY
WWindowPeer#print(Graphics)::: window peer print:::shape->getShape->if->g->setClip->super->print
WWindowPeer#replaceSurfaceDataRecursively(Component)::: window peer replace surface data recursively:::if->foreach->getComponents->replaceSurfaceDataRecursively->cp->AWTAccessor->getComponentAccessor->getPeer->if->replaceSurfaceDataLater
WWindowPeer#getTranslucentGraphics()::: window peer get translucent graphics:::synchronized->getStateLock->return->painter->getGraphics
WWindowPeer#setBackground(Color)::: window peer set background:::super->setBackground->synchronized->getStateLock->if->isVisible->updateWindow
WWindowPeer#setOpacity(int)::: window peer set opacity:::
WWindowPeer#setOpacity(float)::: window peer set opacity:::if->getToolkit->isWindowOpacitySupported->return->if->throw->new->IllegalArgumentException->if->Win32GraphicsEnvironment->isVistaOS->getTarget->replaceSurfaceDataRecursively->maxOpacity->iOpacity->if->if->setOpacity->synchronized->getStateLock->if->isVisible->updateWindow
WWindowPeer#setOpaqueImpl(boolean)::: window peer set opaque impl:::
WWindowPeer#setOpaque(boolean)::: window peer set opaque:::synchronized->getStateLock->if->return->target->getTarget->if->sunToolkit->target->getToolkit->if->sunToolkit->isWindowTranslucencySupported->sunToolkit->target->getGraphicsConfiguration->isTranslucencyCapable->return->isVistaOS->Win32GraphicsEnvironment->isVistaOS->if->replaceSurfaceDataRecursively->synchronized->getStateLock->setOpaqueImpl->if->currentPainter->if->currentPainter->flush->else->TranslucentWindowPainter->createInstance->if->shape->target->getShape->if->target->setShape->if->target->isVisible->updateWindow
WWindowPeer#updateWindowImpl(int[], int, int)::: window peer update window impl:::
WWindowPeer#updateWindow()::: window peer update window:::updateWindow
WWindowPeer#updateWindow(boolean)::: window peer update window:::w->synchronized->getStateLock->if->w->isVisible->w->getWidth->w->getHeight->return->currentPainter->if->currentPainter->updateWindow->else->if->log->isLoggable->log->finer
WWindowPeer#windowDPIChange(int, float, float, int, float, float)::: window peer window change:::
WWindowPeer#initActiveWindowsTracking(Window)::: window peer init active windows tracking:::appContext->AppContext->getAppContext->synchronized->l->appContext->get->if->new->LinkedList<WWindowPeer>->appContext->put->appContext->addPropertyChangeListener->kfm->KeyboardFocusManager->getCurrentKeyboardFocusManager->kfm->addPropertyChangeListener
WWindowPeer.GuiDisposedListener#propertyChange(PropertyChangeEvent)::: gui disposed listener property change:::isDisposed->e->getNewValue->if->if->log->isLoggable->log->fine->appContext->AppContext->getAppContext->synchronized->appContext->remove->appContext->removePropertyChangeListener->kfm->KeyboardFocusManager->getCurrentKeyboardFocusManager->kfm->removePropertyChangeListener
WWindowPeer.ActiveWindowListener#propertyChange(PropertyChangeEvent)::: active window listener property change:::w->e->getNewValue->if->return->appContext->SunToolkit->targetToAppContext->synchronized->wp->AWTAccessor->getComponentAccessor->getPeer->l->appContext->get->if->l->remove->l->add

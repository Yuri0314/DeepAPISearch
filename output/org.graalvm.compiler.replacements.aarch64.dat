Plugin_AArch64FloatArithmeticSnippets_safeRem__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 float arithmetic snippets_safe rem__0 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64FloatArithmeticSnippets.SafeFloatRemNode->b->addPush->return
Plugin_AArch64FloatArithmeticSnippets_safeRem__0#getSource()::: plugin_ arch64 float arithmetic snippets_safe rem__0 get source:::return
Plugin_AArch64FloatArithmeticSnippets_safeRem__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 float arithmetic snippets_safe rem__1 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64FloatArithmeticSnippets.SafeFloatRemNode->b->addPush->return
Plugin_AArch64FloatArithmeticSnippets_safeRem__1#getSource()::: plugin_ arch64 float arithmetic snippets_safe rem__1 get source:::return
PluginFactory_AArch64FloatArithmeticSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ arch64 float arithmetic snippets register plugins:::plugins->new->Plugin_AArch64FloatArithmeticSnippets_safeRem__0->register->plugins->new->Plugin_AArch64FloatArithmeticSnippets_safeRem__1->register
Plugin_AArch64IntegerArithmeticSnippets_safeDiv__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe div__0 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeSignedDivNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeDiv__0#getSource()::: plugin_ arch64 integer arithmetic snippets_safe div__0 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeDiv__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe div__1 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeSignedDivNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeDiv__1#getSource()::: plugin_ arch64 integer arithmetic snippets_safe div__1 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeRem__2#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe rem__2 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeSignedRemNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeRem__2#getSource()::: plugin_ arch64 integer arithmetic snippets_safe rem__2 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeRem__3#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe rem__3 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeSignedRemNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeRem__3#getSource()::: plugin_ arch64 integer arithmetic snippets_safe rem__3 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__4#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe div__4 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeUnsignedDivNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__4#getSource()::: plugin_ arch64 integer arithmetic snippets_safe div__4 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__5#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe div__5 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeUnsignedDivNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__5#getSource()::: plugin_ arch64 integer arithmetic snippets_safe div__5 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeURem__6#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe rem__6 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeUnsignedRemNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeURem__6#getSource()::: plugin_ arch64 integer arithmetic snippets_safe rem__6 get source:::return
Plugin_AArch64IntegerArithmeticSnippets_safeURem__7#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ arch64 integer arithmetic snippets_safe rem__7 execute:::arg0->arg1->node->new->org.graalvm.compiler.replacements.aarch64.AArch64IntegerArithmeticSnippets.SafeUnsignedRemNode->b->addPush->return
Plugin_AArch64IntegerArithmeticSnippets_safeURem__7#getSource()::: plugin_ arch64 integer arithmetic snippets_safe rem__7 get source:::return
PluginFactory_AArch64IntegerArithmeticSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ arch64 integer arithmetic snippets register plugins:::plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeDiv__0->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeDiv__1->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeRem__2->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeRem__3->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__4->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeUDiv__5->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeURem__6->register->plugins->new->Plugin_AArch64IntegerArithmeticSnippets_safeURem__7->register
AArch64CountLeadingZerosNode#foldStamp(Stamp)::: arch64 count leading zeros node fold stamp:::return->getValue->computeStamp
AArch64CountLeadingZerosNode#computeStamp(Stamp, ValueNode)::: arch64 count leading zeros node compute stamp:::return->StampTool->stampForLeadingZeros
AArch64CountLeadingZerosNode#tryFold(ValueNode)::: arch64 count leading zeros node try fold:::if->value->isConstant->c->value->asJavaConstant->if->value->getStackKind->return->ConstantNode->Integer->c->asInt->numberOfLeadingZeros->forInt->else->return->ConstantNode->Long->c->asLong->numberOfLeadingZeros->forInt->return
AArch64CountLeadingZerosNode#canonical(CanonicalizerTool, ValueNode)::: arch64 count leading zeros node canonical:::folded->tryFold->return
AArch64CountLeadingZerosNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: arch64 count leading zeros node generate:::builder->builder->getValue->operand->emitCountLeadingZeros->setResult
AArch64CountTrailingZerosNode#foldStamp(Stamp)::: arch64 count trailing zeros node fold stamp:::return->getValue->computeStamp
AArch64CountTrailingZerosNode#computeStamp(Stamp, ValueNode)::: arch64 count trailing zeros node compute stamp:::valueStamp->return->StampTool->stampForTrailingZeros
AArch64CountTrailingZerosNode#tryFold(ValueNode)::: arch64 count trailing zeros node try fold:::if->value->isConstant->c->value->asJavaConstant->if->value->getStackKind->return->ConstantNode->Integer->c->asInt->numberOfTrailingZeros->forInt->else->return->ConstantNode->Long->c->asLong->numberOfTrailingZeros->forInt->return
AArch64CountTrailingZerosNode#canonical(CanonicalizerTool, ValueNode)::: arch64 count trailing zeros node canonical:::folded->tryFold->return
AArch64CountTrailingZerosNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: arch64 count trailing zeros node generate:::builder->builder->getValue->operand->emitCountTrailingZeros->setResult
AArch64FloatArithmeticSnippets#lower(RemNode, LoweringTool)::: arch64 float arithmetic snippets lower:::kind->node->stamp->getStackKind->if->return->snippet->graph->node->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->node->getX->add->args->node->getY->add->template->providers->getMetaAccess->instantiate
AArch64FloatArithmeticSnippets#fremSnippet(float, float)::: arch64 float arithmetic snippets frem snippet:::if->Float->isInfinite->Float->isNaN->return->if->Float->isInfinite->return->result->safeRem->if->return->return
AArch64FloatArithmeticSnippets#dremSnippet(double, double)::: arch64 float arithmetic snippets drem snippet:::if->Double->isInfinite->Double->isNaN->return->if->Double->isInfinite->return->result->safeRem->if->return->return
AArch64FloatArithmeticSnippets#safeRem(float, float)::: arch64 float arithmetic snippets safe rem:::
AArch64FloatArithmeticSnippets#safeRem(double, double)::: arch64 float arithmetic snippets safe rem:::
AArch64GraphBuilderPlugins#register(Plugins, BytecodeProvider, boolean, boolean)::: arch64 graph builder plugins register:::register
AArch64GraphBuilderPlugins#register(Plugins, BytecodeProvider, boolean, boolean, boolean)::: arch64 graph builder plugins register:::invocationPlugins->plugins->getInvocationPlugins->invocationPlugins->new->Runnable->defer
AArch64GraphBuilderPlugins#registerIntegerLongPlugins(InvocationPlugins, JavaKind, BytecodeProvider)::: arch64 graph builder plugins register integer long plugins:::declaringClass->kind->toBoxedJavaClass->type->kind->toJavaClass->r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1
AArch64GraphBuilderPlugins#registerMathPlugins(InvocationPlugins)::: arch64 graph builder plugins register math plugins:::r->new->Registration->registerUnaryMath->registerUnaryMath->registerUnaryMath->registerUnaryMath->registerUnaryMath->registerUnaryMath->r->new->InvocationPlugin->register2->registerRound->registerRound->registerRound
AArch64GraphBuilderPlugins#registerUnaryMath(Registration, String, UnaryOperation)::: arch64 graph builder plugins register unary math:::r->new->InvocationPlugin->register1
AArch64GraphBuilderPlugins#registerRound(Registration, String, RoundingMode)::: arch64 graph builder plugins register round:::r->new->InvocationPlugin->register1
AArch64GraphBuilderPlugins#registerStringLatin1Plugins(InvocationPlugins, BytecodeProvider)::: arch64 graph builder plugins register string latin1 plugins:::if->r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution->r->registerMethodSubstitution
AArch64GraphBuilderPlugins#registerStringUTF16Plugins(InvocationPlugins, BytecodeProvider)::: arch64 graph builder plugins register string f16 plugins:::if->r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution->r->registerMethodSubstitution
AArch64GraphBuilderPlugins#registerUnsafePlugins(InvocationPlugins, BytecodeProvider)::: arch64 graph builder plugins register unsafe plugins:::new->Registration->new->JavaKindArr->registerUnsafePlugins->if->new->Registration->new->JavaKindArr->registerUnsafePlugins
AArch64GraphBuilderPlugins#registerUnsafePlugins(Registration, JavaKind[])::: arch64 graph builder plugins register unsafe plugins:::foreach->javaClass->kind->toJavaClass->r->kind->name->new->InvocationPlugin->register4->if->kind->isNumericInteger->r->kind->name->new->InvocationPlugin->register4
AArch64IntegerArithmeticSnippets#lower(IntegerDivRemNode, LoweringTool)::: arch64 integer arithmetic snippets lower:::kind->node->stamp->getStackKind->snippet->if->return->else->if->else->if->else->if->else->if->else->throw->GraalError->shouldNotReachHere->graph->node->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->node->getX->add->args->node->getY->add->yStamp->node->getY->stamp->args->node->getZeroCheck->yStamp->contains->addConst->template->providers->getMetaAccess->instantiate
AArch64IntegerArithmeticSnippets#idivSnippet(int, int, boolean)::: arch64 integer arithmetic snippets idiv snippet:::if->checkForZero->return->safeDiv
AArch64IntegerArithmeticSnippets#ldivSnippet(long, long, boolean)::: arch64 integer arithmetic snippets ldiv snippet:::if->checkForZero->return->safeDiv
AArch64IntegerArithmeticSnippets#iremSnippet(int, int, boolean)::: arch64 integer arithmetic snippets irem snippet:::if->checkForZero->return->safeRem
AArch64IntegerArithmeticSnippets#lremSnippet(long, long, boolean)::: arch64 integer arithmetic snippets lrem snippet:::if->checkForZero->return->safeRem
AArch64IntegerArithmeticSnippets#uidivSnippet(int, int, boolean)::: arch64 integer arithmetic snippets uidiv snippet:::if->checkForZero->return->safeUDiv
AArch64IntegerArithmeticSnippets#uldivSnippet(long, long, boolean)::: arch64 integer arithmetic snippets uldiv snippet:::if->checkForZero->return->safeUDiv
AArch64IntegerArithmeticSnippets#uiremSnippet(int, int, boolean)::: arch64 integer arithmetic snippets uirem snippet:::if->checkForZero->return->safeURem
AArch64IntegerArithmeticSnippets#ulremSnippet(long, long, boolean)::: arch64 integer arithmetic snippets ulrem snippet:::if->checkForZero->return->safeURem
AArch64IntegerArithmeticSnippets#checkForZero(int)::: arch64 integer arithmetic snippets check for zero:::if->DeoptimizeNode->deopt
AArch64IntegerArithmeticSnippets#checkForZero(long)::: arch64 integer arithmetic snippets check for zero:::if->DeoptimizeNode->deopt
AArch64IntegerArithmeticSnippets#safeDiv(int, int)::: arch64 integer arithmetic snippets safe div:::
AArch64IntegerArithmeticSnippets#safeDiv(long, long)::: arch64 integer arithmetic snippets safe div:::
AArch64IntegerArithmeticSnippets#safeRem(int, int)::: arch64 integer arithmetic snippets safe rem:::
AArch64IntegerArithmeticSnippets#safeRem(long, long)::: arch64 integer arithmetic snippets safe rem:::
AArch64IntegerArithmeticSnippets#safeUDiv(int, int)::: arch64 integer arithmetic snippets safe div:::
AArch64IntegerArithmeticSnippets#safeUDiv(long, long)::: arch64 integer arithmetic snippets safe div:::
AArch64IntegerArithmeticSnippets#safeURem(int, int)::: arch64 integer arithmetic snippets safe rem:::
AArch64IntegerArithmeticSnippets#safeURem(long, long)::: arch64 integer arithmetic snippets safe rem:::
AArch64IntegerArithmeticSnippets.SafeSignedDivNode#generate(NodeLIRBuilderTool)::: safe signed div node generate:::gen->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitDiv->setResult
AArch64IntegerArithmeticSnippets.SafeSignedRemNode#generate(NodeLIRBuilderTool)::: safe signed rem node generate:::gen->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitRem->setResult
AArch64IntegerArithmeticSnippets.SafeUnsignedDivNode#generate(NodeLIRBuilderTool)::: safe unsigned div node generate:::gen->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitUDiv->setResult
AArch64IntegerArithmeticSnippets.SafeUnsignedRemNode#generate(NodeLIRBuilderTool)::: safe unsigned rem node generate:::gen->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitURem->setResult
AArch64RoundNode#round(RoundingMode, double)::: arch64 round node round:::switch->return->Math->floor->return->Math->rint->return->Math->ceil->return->throw->GraalError->unimplemented
AArch64RoundNode#roundStamp(FloatStamp, RoundingMode)::: arch64 round node round stamp:::min->stamp->lowerBound->Math->round->min->max->stamp->upperBound->Math->round->max->return->stamp->getBits->stamp->isNonNaN->new->FloatStamp
AArch64RoundNode#foldStamp(Stamp)::: arch64 round node fold stamp:::return->roundStamp
AArch64RoundNode#tryFold(ValueNode)::: arch64 round node try fold:::if->input->isConstant->c->input->asJavaConstant->if->c->getJavaKind->return->ConstantNode->c->asDouble->round->forDouble->else->if->c->getJavaKind->return->ConstantNode->c->asFloat->round->forFloat->return
AArch64RoundNode#canonical(CanonicalizerTool, ValueNode)::: arch64 round node canonical:::folded->tryFold->return
AArch64RoundNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: arch64 round node generate:::builder->builder->getValue->operand->emitRound->setResult
AArch64StringLatin1Substitutions#compareTo(byte[], byte[])::: arch64 string latin1 substitutions compare to:::return->ArrayCompareToNode->compareTo
AArch64StringLatin1Substitutions#compareToUTF16(byte[], byte[])::: arch64 string latin1 substitutions compare to f16:::return->ArrayCompareToNode->compareTo
AArch64StringUTF16Substitutions#compareTo(byte[], byte[])::: arch64 string f16 substitutions compare to:::return->ArrayCompareToNode->compareTo
AArch64StringUTF16Substitutions#compareToLatin1(byte[], byte[])::: arch64 string f16 substitutions compare to latin1:::return->ArrayCompareToNode->compareTo

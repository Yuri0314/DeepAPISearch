GenericURLContext#getRootURLContext(String, Hashtable):::Resolves 'name' into a target context with remaining name:::
GenericURLContext#getURLSuffix(String, String):::Returns the suffix of the url:::suffix->url->prefix->length->substring->if->suffix->length->return->new->CompositeName->if->suffix->charAt->suffix->substring->try->return->new->CompositeName->UrlUtil->decode->add->catch->throw->e->getMessage->new->InvalidNameException->finally
GenericURLContext#getURLPrefix(String):::Finds the prefix of a URL:::start->url->indexOf->if->throw->new->OperationNotSupportedException->if->url->startsWith->posn->url->indexOf->if->else->url->length->return->url->substring
GenericURLContext#urlEquals(String, String):::Determines whether two URLs are the same:::return->url1->equals
GenericURLContext#getContinuationContext(Name):::Gets the context in which to continue the operation:::obj->n->get->lookup->cpe->new->CannotProceedException->cpe->setResolvedObj->cpe->setEnvironment->return->NamingManager->getContinuationContext
GenericURLDirContext#getContinuationDirContext(Name):::Gets the context in which to continue the operation:::obj->n->get->lookup->cpe->new->CannotProceedException->cpe->setResolvedObj->cpe->setEnvironment->return->DirectoryManager->getContinuationDirContext
Uri#init(String):::Initializes a Uri object given a URI string:::parse
Uri#getScheme():::Returns the URI's scheme.:::return
Uri#getHost():::Returns the host from the URI's authority part, or null if no host is provided:::return
Uri#getPort():::Returns the port from the URI's authority part, or -1 if no port is provided.:::return
Uri#getPath():::Returns the URI's path:::return
Uri#getQuery():::Returns the URI's query part, or null if no query is provided:::return
Uri#toString():::Returns the URI as a string.:::return
UrlUtil#decode(String):::Decode a URI string (according to RFC 2396).:::try->return->decode->catch->throw->new->MalformedURLException->finally
UrlUtil#decode(String, String):::Decode a URI string (according to RFC 2396):::try->return->URLDecoder->decode->catch->mue->new->MalformedURLException->mue->initCause->throw->finally
UrlUtil#encode(String, String):::Encode a string for inclusion in a URI (according to RFC 2396):::bytes->s->getBytes->count->allowed->buf->new->charArr->j->for->i->return->new->String

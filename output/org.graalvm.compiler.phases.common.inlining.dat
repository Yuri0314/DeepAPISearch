InliningPhase#run(StructuredGraph, HighTierContext):::This method sets in motion the inlining machinery.:::data->new->InliningData->count->limit->graph->getOptions->getValue->while->data->hasUnprocessedGraphs->wasInlined->data->moveForward->if->if->break
InliningUtil#traceInlinedMethod(InlineInfo, int, boolean, String, Object...):::Trace a decision to inline a method:::traceMethod
InliningUtil#traceInlinedMethod(Invoke, int, boolean, ResolvedJavaMethod, String, Object...):::Trace a decision to inline a method:::traceMethod
InliningUtil#traceNotInlinedMethod(InlineInfo, int, String, Object...):::Trace a decision to not inline a method:::traceMethod
InliningUtil#traceNotInlinedMethod(Invoke, int, ResolvedJavaMethod, String, Object...):::Trace a decision about not inlining a method:::traceMethod
InliningUtil#logInliningDecision(DebugContext, String, Object...):::Output a generic inlining decision to the logging stream (e.g:::logInlining
InliningUtil#logNotInlinedMethod(Invoke, String):::Output a decision about not inlining a method to the logging stream, for debugging purposes.:::debug->invoke->asNode->getDebug->if->shouldLogMethod->methodString->invoke->toString->if->invoke->callTarget->else->targetName->invoke->callTarget->targetName->if->methodString->endsWith->new->ObjectArr->logMethod
InliningUtil#inline(Invoke, StructuredGraph, boolean, ResolvedJavaMethod):::Performs an actual inlining, thereby replacing the given invoke with the given inlineGraph.:::try->return->inline->catch->ex->invoke->asNode->graph->method->addContext->ex->inlineGraph->method->addContext->throw->finally
InliningUtil#inline(Invoke, StructuredGraph, boolean, ResolvedJavaMethod, String, String):::Performs an actual inlining, thereby replacing the given invoke with the given inlineGraph.:::invokeNode->invoke->asNode->graph->invokeNode->graph->parameters->invoke->callTarget->arguments->if->invoke->callTarget->isStatic->nonNullReceiver->nodes->inlineGraph->getNodes->count->new->ArrayList<>->returnNodes->new->ArrayList<>->partialIntrinsicExits->new->ArrayList<>->unwindNode->entryPointNode->inlineGraph->start->firstCFGNode->entryPointNode->next->if->throw->new->IllegalStateException->foreach->inlineGraph->getNodes->if->entryPointNode->stateAfter->node->hasExactlyOneUsage->else->nodes->add->if->returnNodes->add->else->if->invokeInInlineGraph->if->invokeInInlineGraph->bci->target1->target2->invokeInInlineGraph->callTarget->targetMethod->partialIntrinsicExits->add->else->if->prevBegin->AbstractBeginNode->prevBegin->localReplacement->new->DuplicationReplacement->mark->graph->getMark->duplicates->try->scope->graph->getInliningLog->openDefaultUpdateScope->graph->inlineGraph->getNodeCount->addDuplicates->if->graph->getInliningLog->inlineGraph->getInliningLog->addDecision->catch->finally->stateAfter->invoke->stateAfter->stateAtExceptionEdge->if->invokeWithException->if->obj->invokeWithException->exceptionEdge->obj->stateAfter->Objects->inlineGraph->method->equals->updateSourcePositions->if->returnNodes->size->processFrameStates->callerLockDepth->stateAfter->nestedLockDepth->if->foreach->inlineGraph->getNodes->monitor->duplicates->get->invoke->stateAfter->processMonitorId->else->duplicates->get->for->i->returnNodes->size->foreach->dup->duplicates->exit->asNode->get->dup->invoke->bci->replaceBci->if->duplicates->get->inlineGraph->getAssumptions->finishInlining->GraphUtil->killCFG->return
InliningUtil#inlineForCanonicalization(Invoke, StructuredGraph, boolean, ResolvedJavaMethod, String, String):::Inline inlineGraph into the current replacing the node Invoke and return the set of nodes which should be canonicalized:::return->inlineForCanonicalization
InliningUtil#nonNullReceiver(Invoke):::Gets the receiver for an invoke, adding a guard if necessary to ensure it is non-null, and ensuring that the resulting type is compatible with the method being invoked.:::try->position->invoke->asNode->withNodeSourcePosition->callTarget->invoke->callTarget->graph->callTarget->graph->oldReceiver->callTarget->arguments->get->newReceiver->if->newReceiver->getStackKind->if->invoke->getInvokeKind->paramStamp->newReceiver->stamp->stamp->paramStamp->StampFactory->TypeReference->graph->getAssumptions->callTarget->targetMethod->getDeclaringClass->create->object->join->if->stamp->equals->graph->new->PiNode->unique->if->StampTool->isPointerNonNull->condition->graph->IsNullNode->create->unique->fixedGuard->graph->new->FixedGuardNode->add->nonNullReceiver->graph->StampFactory->objectNonNull->new->PiNode->unique->graph->invoke->asNode->addBeforeFixed->if->callTarget->replaceFirstInput->return->catch->finally
InliningUtil#getNodeCount(StructuredGraph):::This method exclude InstrumentationNode from inlining heuristics.:::return->graph->getNodeCount

InliningPhase_OptionDescriptors#get(String)::: inlining phase_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
InliningPhase_OptionDescriptors#iterator()::: inlining phase_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
InliningPhase#getCanonicalizer()::: inlining phase get canonicalizer:::return
InliningPhase#codeSizeIncrease()::: inlining phase code size increase:::return
InliningPhase#setMaxMethodsPerInlining(int)::: inlining phase set max methods per inlining:::
InliningPhase#setRootInvokes(LinkedList)::: inlining phase set root invokes:::
InliningPhase#run(StructuredGraph, HighTierContext):::This method sets in motion the inlining machinery.:::data->new->InliningData->count->limit->graph->getOptions->getValue->while->data->hasUnprocessedGraphs->wasInlined->data->moveForward->if->if->break
InliningUtil#printInlining(InlineInfo, int, boolean, String, Object...):::Print a HotSpot-style inlining message to the console.:::info->methodAt->info->invoke->printInlining
InliningUtil#printInlining(ResolvedJavaMethod, Invoke, int, boolean, String, Object...)::: inlining util print inlining:::if->HotSpotPrintInlining->invoke->asNode->getOptions->getValue->Util->invoke->bci->printInlining
InliningUtil#traceInlinedMethod(InlineInfo, int, boolean, String, Object...):::Trace a decision to inline a method:::traceMethod
InliningUtil#traceInlinedMethod(Invoke, int, boolean, ResolvedJavaMethod, String, Object...):::Trace a decision to inline a method:::traceMethod
InliningUtil#traceNotInlinedMethod(InlineInfo, int, String, Object...):::Trace a decision to not inline a method:::traceMethod
InliningUtil#traceNotInlinedMethod(Invoke, int, ResolvedJavaMethod, String, Object...):::Trace a decision about not inlining a method:::traceMethod
InliningUtil#traceMethod(Invoke, int, boolean, boolean, ResolvedJavaMethod, String, Object...)::: inlining util trace method:::if->debug->invoke->asNode->getDebug->printInlining->if->shouldLogMethod->methodString->methodName->logMethod
InliningUtil#traceMethod(InlineInfo, int, boolean, boolean, String, Object...)::: inlining util trace method:::if->printInlining->debug->info->graph->getDebug->if->shouldLogMethod->methodName->logMethod
InliningUtil#logInliningDecision(DebugContext, String, Object...):::Output a generic inlining decision to the logging stream (e.g:::logInlining
InliningUtil#logNotInlinedMethod(Invoke, String):::Output a decision about not inlining a method to the logging stream, for debugging purposes.:::debug->invoke->asNode->getDebug->if->shouldLogMethod->methodString->invoke->toString->if->invoke->callTarget->else->targetName->invoke->callTarget->targetName->if->methodString->endsWith->new->ObjectArr->logMethod
InliningUtil#logMethod(DebugContext, String, boolean, String, Object...)::: inlining util log method:::inliningMsg->if->logInlining
InliningUtil#logInlining(DebugContext, String, Object...)::: inlining util log inlining:::try->s->debug->scope->if->debug->isLogEnabled->debug->logv->catch->finally
InliningUtil#shouldLogMethod(DebugContext)::: inlining util should log method:::try->s->debug->scope->return->debug->isLogEnabled->catch->finally
InliningUtil#methodName(ResolvedJavaMethod, Invoke)::: inlining util method name:::if->invoke->stateAfter->return->invoke->stateAfter->invoke->bci->methodName->method->format->method->getCodeSize->else->return->method->format->method->getCodeSize
InliningUtil#methodName(InlineInfo)::: inlining util method name:::if->return->else->if->info->invoke->info->invoke->stateAfter->return->info->invoke->stateAfter->info->invoke->bci->methodName->info->toString->else->return->info->toString
InliningUtil#methodName(FrameState, int)::: inlining util method name:::sb->new->StringBuilder->if->frameState->outerFrameState->sb->frameState->outerFrameState->frameState->outerFrameState->methodName->append->sb->append->method->frameState->getMethod->sb->method->format->append->sb->append->append->return->sb->toString
InliningUtil#replaceInvokeCallTarget(Invoke, StructuredGraph, InvokeKind, ResolvedJavaMethod)::: inlining util replace invoke call target:::oldCallTarget->invoke->callTarget->newCallTarget->graph->oldCallTarget->arguments->new->ValueNodeArr->toArray->oldCallTarget->returnStamp->oldCallTarget->getProfile->new->MethodCallTargetNode->add->invoke->asNode->replaceFirstInput
InliningUtil#createAnchoredReceiver(StructuredGraph, GuardingNode, ResolvedJavaType, ValueNode, boolean)::: inlining util create anchored receiver:::return->StampFactory->TypeReference->createExactTrusted->objectNonNull->StampFactory->TypeReference->graph->getAssumptions->createTrusted->objectNonNull->createAnchoredReceiver
InliningUtil#createAnchoredReceiver(StructuredGraph, GuardingNode, ValueNode, Stamp)::: inlining util create anchored receiver:::return->graph->new->PiNode->unique
InliningUtil#checkInvokeConditions(Invoke)::: inlining util check invoke conditions:::if->invoke->predecessor->invoke->asNode->isAlive->return->if->invoke->callTarget->return->callTarget->invoke->callTarget->if->callTarget->targetMethod->return->if->invoke->useForInlining->return->receiver->callTarget->receiver->if->receiver->isConstant->receiver->isNullConstant->return->return
InliningUtil#inline(Invoke, StructuredGraph, boolean, ResolvedJavaMethod):::Performs an actual inlining, thereby replacing the given invoke with the given inlineGraph.:::try->return->inline->catch->ex->invoke->asNode->graph->method->addContext->ex->inlineGraph->method->addContext->throw->finally
InliningUtil#inline(Invoke, StructuredGraph, boolean, ResolvedJavaMethod, String, String):::Performs an actual inlining, thereby replacing the given invoke with the given inlineGraph.:::invokeNode->invoke->asNode->graph->invokeNode->graph->parameters->invoke->callTarget->arguments->if->invoke->callTarget->isStatic->nonNullReceiver->nodes->inlineGraph->getNodes->count->new->ArrayList<>->returnNodes->new->ArrayList<>->partialIntrinsicExits->new->ArrayList<>->unwindNode->entryPointNode->inlineGraph->start->firstCFGNode->entryPointNode->next->if->throw->new->IllegalStateException->foreach->inlineGraph->getNodes->if->entryPointNode->stateAfter->node->hasExactlyOneUsage->else->nodes->add->if->returnNodes->add->else->if->invokeInInlineGraph->if->invokeInInlineGraph->bci->target1->target2->invokeInInlineGraph->callTarget->targetMethod->partialIntrinsicExits->add->else->if->prevBegin->AbstractBeginNode->prevBegin->localReplacement->new->DuplicationReplacement->mark->graph->getMark->duplicates->try->scope->graph->getInliningLog->openDefaultUpdateScope->graph->inlineGraph->getNodeCount->addDuplicates->if->graph->getInliningLog->inlineGraph->getInliningLog->addDecision->catch->finally->stateAfter->invoke->stateAfter->stateAtExceptionEdge->if->invokeWithException->if->obj->invokeWithException->exceptionEdge->obj->stateAfter->Objects->inlineGraph->method->equals->updateSourcePositions->if->returnNodes->size->processFrameStates->callerLockDepth->stateAfter->nestedLockDepth->if->foreach->inlineGraph->getNodes->monitor->duplicates->get->invoke->stateAfter->processMonitorId->else->duplicates->get->for->i->returnNodes->size->foreach->dup->duplicates->exit->asNode->get->dup->invoke->bci->replaceBci->if->duplicates->get->inlineGraph->getAssumptions->finishInlining->GraphUtil->killCFG->return
InliningUtil#inlineForCanonicalization(Invoke, StructuredGraph, boolean, ResolvedJavaMethod, String, String):::Inline inlineGraph into the current replacing the node Invoke and return the set of nodes which should be canonicalized:::return->inlineForCanonicalization
InliningUtil#inlineForCanonicalization(Invoke, StructuredGraph, boolean, ResolvedJavaMethod, Consumer>, String, String)::: inlining util inline for canonicalization:::listener->new->EconomicSetNodeEventListener->try->nes->invoke->asNode->graph->trackNodeEvents->duplicates->InliningUtil->inline->if->duplicatesConsumer->accept->catch->finally->return->listener->getNodes
InliningUtil#finishInlining(Invoke, StructuredGraph, FixedNode, List, UnwindNode, Assumptions, StructuredGraph)::: inlining util finish inlining:::invokeNode->invoke->asNode->stateAfter->invoke->stateAfter->invokeNode->replaceAtPredecessor->if->invokeWithException->if->unwindNode->isAlive->obj->invokeWithException->exceptionEdge->obj->unwindNode->exception->replaceAtUsages->n->obj->next->obj->setNext->unwindNode->replaceAndDelete->obj->replaceAtPredecessor->obj->safeDelete->else->invokeWithException->killExceptionEdge->invokeWithException->killKillingBegin->else->if->unwindNode->isAlive->try->position->unwindNode->withNodeSourcePosition->deoptimizeNode->addDeoptimizeNode->unwindNode->replaceAndDelete->catch->finally->returnValue->if->returnNodes->isEmpty->n->invoke->next->invoke->setNext->if->returnNodes->size->returnNode->returnNodes->get->returnNode->result->invokeNode->replaceAtUsages->returnNode->replaceAndDelete->else->merge->graph->new->MergeNode->add->merge->setStateAfter->mergeReturns->invokeNode->replaceAtUsages->if->merge->isPhiAtMerge->fixFrameStates->merge->setNext->else->invokeNode->replaceAtUsages->GraphUtil->invoke->next->killCFG->assumptions->graph->getAssumptions->if->if->assumptions->record->else->graph->updateMethods->if->graph->getOptions->getValue->graph->updateFields->if->inlineGraph->hasUnsafeAccess->graph->markUnsafeAccess->return
InliningUtil#fixFrameStates(StructuredGraph, MergeNode, PhiNode)::: inlining util fix frame states:::seen->new->NodeMap<>->workList->new->ArrayDeque<>->valueList->new->ArrayDeque<>->workList->push->valueList->push->while->workList->isEmpty->current->workList->pop->currentValue->valueList->pop->if->seen->containsKey->continue->seen->put->if->stateSplit->state->stateSplit->stateAfter->if->state->values->contains->index->duplicate->state->duplicate->foreach->state->values->if->duplicate->values->set->stateSplit->setStateAfter->GraphUtil->tryKillUnused->if->currentMerge->foreach->currentMerge->cfgPredecessors->newValue->if->currentMerge->isPhiAtMerge->currentPhi->currentPhi->valueAt->workList->push->valueList->push->else->if->current->predecessor->workList->current->predecessor->push->valueList->push
InliningUtil#updateSourcePositions(Invoke, StructuredGraph, UnmodifiableEconomicMap, boolean, Mark)::: inlining util update source positions:::invokeNode->invoke->asNode->invokeGraph->invokeNode->graph->if->invokeGraph->trackNodeSourcePosition->invoke->stateAfter->isSubstitution->inlineGraph->isSubstitution->invokePos->invoke->asNode->getNodeSourcePosition->updateSourcePosition
InliningUtil#updateSourcePosition(StructuredGraph, UnmodifiableEconomicMap, Mark, NodeSourcePosition, boolean)::: inlining util update source position:::newNodes->EconomicSet->create->newNodes->invokeGraph->getNewNodes->addAll->posMap->EconomicMap->create->cursor->duplicates->getEntries->inlineeRoot->while->cursor->advance->value->cursor->getValue->if->newNodes->contains->continue->if->value->clearNodeSourcePosition->else->pos->cursor->getKey->getNodeSourcePosition->if->if->else->callerPos->posMap->get->if->pos->addCaller->posMap->put->value->setNodeSourcePosition->if->callerPos->getCaller->addCallerToNoDeoptSuccessorPosition->else->if->value->setNodeSourcePosition
InliningUtil#processMonitorId(FrameState, MonitorIdNode)::: inlining util process monitor id:::if->callerLockDepth->stateAfter->nestedLockDepth->monitorIdNode->monitorIdNode->getLockDepth->setLockDepth
InliningUtil#processFrameStates(Invoke, StructuredGraph, EconomicMap, FrameState, boolean)::: inlining util process frame states:::stateAtReturn->invoke->stateAfter->outerFrameState->invokeReturnKind->invoke->asNode->getStackKind->replacements->EconomicMap->create->foreach->inlineGraph->getNodes->frameState->duplicates->get->if->frameState->isAlive->if->stateAtReturn->invoke->bci->duplicateModifiedDuringCall->inlineGraph->method->invoke->callTarget->targetMethod->invoke->callTarget->arguments->processFrameState->duplicates->replacements->containsKey->replacements->get->replaceAll
InliningUtil#processFrameState(FrameState, Invoke, EconomicMap, ResolvedJavaMethod, FrameState, FrameState, boolean, ResolvedJavaMethod, List)::: inlining util process frame state:::stateAtReturn->invoke->stateAfter->invokeReturnKind->invoke->asNode->getStackKind->if->return->handleAfterBciFrameState->else->if->isStateAfterException->stateAfterException->if->frameState->stackSize->stateAtExceptionEdge->stackAt->frameState->stackAt->stateAtExceptionEdge->frameState->stackAt->duplicateModified->frameState->replaceAndDelete->return->else->if->frameState->graph->getGuardsStage->handleMissingAfterExceptionFrameState->return->else->if->invokeArgs->invokeArgsList->isEmpty->invokeArgsList->invokeArgsList->size->new->ValueNodeArr->toArray->stateBeforeCall->stateAtReturn->invoke->bci->invokeTargetMethod->getSignature->invokeTargetMethod->isStatic->toParameterKinds->duplicateModifiedBeforeCall->frameState->replaceAndDelete->return->else->if->frameState->outerFrameState->frameState->setOuterFrameState->return
InliningUtil#handleAfterBciFrameState(FrameState, Invoke, boolean)::: inlining util handle after bci frame state:::stateAtReturn->invoke->stateAfter->invokeReturnKind->invoke->asNode->getStackKind->stateAfterReturn->if->frameState->getCode->foreach->frameState->usages->if->foreign->foreign->invoke->bci->setBci->if->frameState->stackSize->stateAfterReturn->stackAt->frameState->stackAt->stateAtReturn->frameState->stackAt->duplicateModified->else->stateAtReturn->duplicate->foreach->frameState->usages->filter->n->clearEscapedValue->frameState->replaceAndDelete->return
InliningUtil#checkInlineeFrameState(Invoke, ResolvedJavaMethod, FrameState)::: inlining util check inlinee frame state:::if->method->frameState->getMethod->if->method->equals->else->if->method->invoke->callTarget->targetMethod->equals->else->if->method->getName->inlinedMethod->getName->equals->else->throw->String->invoke->callTarget->targetMethod->format->new->AssertionError->return
InliningUtil#isStateAfterException(FrameState)::: inlining util is state after exception:::return->frameState->getMethod->isSynchronized
InliningUtil#handleMissingAfterExceptionFrameState(FrameState, Invoke, EconomicMap, boolean)::: inlining util handle missing after exception frame state:::graph->nonReplaceableFrameState->graph->workList->graph->createNodeWorkList->workList->add->foreach->fs->foreach->fs->usages->snapshot->if->usage->isAlive->continue->if->workList->add->else->stateSplit->fixedStateSplit->stateSplit->asNode->if->merge->while->merge->isAlive->end->merge->forwardEnds->first->try->position->end->withNodeSourcePosition->deoptimizeNode->addDeoptimizeNode->end->replaceAtPredecessor->GraphUtil->killCFG->catch->finally->else->if->oldInvoke->fixedStateSplit->predecessor->newInvoke->oldInvoke->replaceWithInvoke->if->replacements->put->newInvoke->stateAfter->handleAfterBciFrameState->else->try->position->fixedStateSplit->withNodeSourcePosition->deoptimizeNode->addDeoptimizeNode->if->BeginNode->begin->fixedStateSplit->replaceAtPredecessor->GraphUtil->killCFG->catch->finally->return
InliningUtil#addDeoptimizeNode(StructuredGraph, DeoptimizationAction, DeoptimizationReason)::: inlining util add deoptimize node:::GraalError->graph->getGuardsStage->guarantee->return->graph->new->DeoptimizeNode->add
InliningUtil#checkContainsOnlyInvalidOrAfterFrameState(UnmodifiableEconomicMap):::Ensure that all states are either BytecodeFrame#INVALID_FRAMESTATE_BCI or one of BytecodeFrame#AFTER_BCI or BytecodeFrame#BEFORE_BCI:::okBci->foreach->duplicates->getValues->if->frameState->if->continue->if->if->else->else->return
InliningUtil#nonNullReceiver(Invoke):::Gets the receiver for an invoke, adding a guard if necessary to ensure it is non-null, and ensuring that the resulting type is compatible with the method being invoked.:::try->position->invoke->asNode->withNodeSourcePosition->callTarget->invoke->callTarget->graph->callTarget->graph->oldReceiver->callTarget->arguments->get->newReceiver->if->newReceiver->getStackKind->if->invoke->getInvokeKind->paramStamp->newReceiver->stamp->stamp->paramStamp->StampFactory->TypeReference->graph->getAssumptions->callTarget->targetMethod->getDeclaringClass->create->object->join->if->stamp->equals->graph->new->PiNode->unique->if->StampTool->isPointerNonNull->condition->graph->IsNullNode->create->unique->fixedGuard->graph->new->FixedGuardNode->add->nonNullReceiver->graph->StampFactory->objectNonNull->new->PiNode->unique->graph->invoke->asNode->addBeforeFixed->if->callTarget->replaceFirstInput->return->catch->finally
InliningUtil#getNodeCount(StructuredGraph):::This method exclude InstrumentationNode from inlining heuristics.:::return->graph->getNodeCount

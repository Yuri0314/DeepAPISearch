ConditionalEliminationBenchmark#nullnessSnippet(Object, Object, int, int)::: conditional elimination benchmark nullness snippet:::result->if->if->if->for->i->return->else->return->else->if->for->i->return->else->return->else->if->if->for->i->return->else->return->else->if->for->i->return->else->return
ConditionalEliminationBenchmark#nullness(Nullness, GraalState)::: conditional elimination benchmark nullness:::new->ConditionalEliminationPhase->apply
ConditionalEliminationBenchmark#newDominatorConditionalElimination(Nullness, GraalState)::: conditional elimination benchmark new dominator conditional elimination:::new->ConditionalEliminationPhase->apply
ConditionalEliminationBenchmark#searchSnippet(Entry, String, Entry)::: conditional elimination benchmark search snippet:::current->do->while->if->else->next->if->if->equals->return->if->return->while
ConditionalEliminationBenchmark#search(Search, GraalState)::: conditional elimination benchmark search:::new->ConditionalEliminationPhase->apply
FrameStateAssigmentPhaseBenchmark#nextToken(StringTokenizedNextToken)::: frame state assigment phase benchmark next token:::apply
GraphCopyBenchmark#nullnessSnippet(Object, Object)::: graph copy benchmark nullness snippet:::if->if->if->return->else->return->else->if->return->else->return->else->if->if->return->else->return->else->if->return->else->return
GraphCopyBenchmark#nullness(Nullness, GraalState)::: graph copy benchmark nullness:::return->copy
GraphCopyBenchmark#searchSnippet(Entry, String, Entry)::: graph copy benchmark search snippet:::current->do->while->if->else->next->if->if->equals->return->if->return->while
GraphCopyBenchmark#search(Search, GraalState)::: graph copy benchmark search:::return->copy
NodeBenchmark#getNodeClass(StringEquals)::: node benchmark get node class:::sum->foreach->n->getNodeClass->iterableId->return
NodeBenchmark#dataEquals(StringEquals, Blackhole)::: node benchmark data equals:::foreach->bh->n->getNodeClass->dataEquals->consume
NodeBenchmark#replaceFirstInput(StringEquals, Blackhole)::: node benchmark replace first input:::foreach->bh->n->getNodeClass->replaceFirstInput->consume
NodeBenchmark#inputsEquals(StringEquals, Blackhole)::: node benchmark inputs equals:::foreach->bh->n->getNodeClass->equalInputs->consume
NodeBenchmark#inputs(StringEquals, Blackhole)::: node benchmark inputs:::foreach->foreach->n->inputs->bh->consume
NodeBenchmark#acceptInputs(StringEquals, Blackhole)::: node benchmark accept inputs:::consumer->new->Node.EdgeVisitor->foreach->n->applyInputs
NodeBenchmark#createAndDeleteAdd(StringEquals, Blackhole)::: node benchmark create and delete add:::addNode->ConstantNode->forInt->ConstantNode->forInt->new->AddNode->addOrUniqueWithInputs->GraphUtil->killWithUnusedFloatingInputs->bh->consume
NodeBenchmark#createAndDeleteConstant(StringEquals, Blackhole)::: node benchmark create and delete constant:::constantNode->ConstantNode->forInt->addOrUnique->GraphUtil->killWithUnusedFloatingInputs->bh->consume
NodeBenchmark#usages(StringEquals, Blackhole)::: node benchmark usages:::foreach->foreach->n->usages->bh->consume
NodeBenchmark#nodeBitmap(StringEquals, GraalState)::: node benchmark node bitmap:::bitMap->createNodeBitMap->foreach->getNodes->if->bitMap->isMarked->bitMap->mark->foreach->getNodes->if->bitMap->isMarked->bitMap->clear
NodeBenchmark#valueEquals_STRING_EQUALS(StringEquals)::: node benchmark value equals_ g_ s:::result->foreach->if->valueEquals->else->return
NodeBenchmark#valueEquals_HASHMAP_COMPUTE_IF_ABSENT(HashMapComputeIfAbsent)::: node benchmark value equals_ p_ e_ f_ t:::result->foreach->if->valueEquals->else->return
NodeBenchmark#valueNumberLeaf_HASHMAP_COMPUTE_IF_ABSENT(HashMapComputeIfAbsent)::: node benchmark value number leaf_ p_ e_ f_ t:::result->foreach->n->getNodeClass->isLeafNode->return
NodeBenchmark#valueNumberLeaf_STRING_EQUALS(StringEquals)::: node benchmark value number leaf_ g_ s:::result->foreach->n->getNodeClass->isLeafNode->return
SchedulePhaseBenchmark#stringEquals(StringEquals)::: schedule phase benchmark string equals:::apply
SchedulePhaseBenchmark#cfgCompute1(StringEquals)::: schedule phase benchmark cfg compute1:::ControlFlowGraph->compute
SchedulePhaseBenchmark#cfgCompute2(StringEquals)::: schedule phase benchmark cfg compute2:::ControlFlowGraph->compute
SchedulePhaseBenchmark#cfgCompute3(StringEquals)::: schedule phase benchmark cfg compute3:::ControlFlowGraph->compute
SchedulePhaseBenchmark#cfgCompute4(StringEquals)::: schedule phase benchmark cfg compute4:::ControlFlowGraph->compute
SchedulePhaseBenchmark#intersectionSnippet(int[], int[])::: schedule phase benchmark intersection snippet:::result->Math->min->new->intArr->next->foreach->foreach->if->break->if->Arrays->copyOf->return
SchedulePhaseBenchmark#intersection_LATEST_OPTIMAL(IntersectionState_LATEST_OPTIMAL)::: schedule phase benchmark intersection_ t_ l:::apply
SchedulePhaseBenchmark#intersection_LATEST_OUT_OF_LOOPS_OPTIMAL(IntersectionState_LATEST_OUT_OF_LOOPS_OPTIMAL)::: schedule phase benchmark intersection_ t_ t_ f_ s_ l:::apply
SchedulePhaseBenchmark#intersection_EARLIEST_OPTIMAL(IntersectionState_EARLIEST_OPTIMAL)::: schedule phase benchmark intersection_ t_ l:::apply
SchedulePhaseBenchmark#intersection_EARLIEST_WITH_GUARD_ORDER_OPTIMAL(IntersectionState_EARLIEST_WITH_GUARD_ORDER_OPTIMAL)::: schedule phase benchmark intersection_ t_ h_ d_ r_ l:::apply
SchedulePhaseBenchmark#scheduleEarliestIterative_LATEST_OPTIMAL(ScheduleEarliestIterative_LATEST_OPTIMAL)::: schedule phase benchmark schedule earliest iterative_ t_ l:::apply
SchedulePhaseBenchmark#scheduleEarliestIterative_LATEST_OUT_OF_LOOPS_OPTIMAL(ScheduleEarliestIterative_LATEST_OUT_OF_LOOPS_OPTIMAL)::: schedule phase benchmark schedule earliest iterative_ t_ t_ f_ s_ l:::apply
SchedulePhaseBenchmark#scheduleEarliestIterative_EARLIEST_OPTIMAL(ScheduleEarliestIterative_EARLIEST_OPTIMAL)::: schedule phase benchmark schedule earliest iterative_ t_ l:::apply
SchedulePhaseBenchmark#scheduleEarliestIterative_EARLIEST_WITH_GUARD_ORDER_OPTIMAL(ScheduleEarliestIterative_EARLIEST_WITH_GUARD_ORDER_OPTIMAL)::: schedule phase benchmark schedule earliest iterative_ t_ h_ d_ r_ l:::apply
TestJMHWhitebox#testJMH(GraalState)::: test whitebox test h:::

org.graalvm.compiler.microbenchmarks.graal.ConditionalEliminationBenchmark#nullnessSnippet(Object, Object, int, int)->int::: conditional elimination benchmark nullness snippet
org.graalvm.compiler.microbenchmarks.graal.ConditionalEliminationBenchmark#nullness(Nullness, GraalState)->void::: conditional elimination benchmark nullness
org.graalvm.compiler.microbenchmarks.graal.ConditionalEliminationBenchmark#newDominatorConditionalElimination(Nullness, GraalState)->void::: conditional elimination benchmark new dominator conditional elimination
org.graalvm.compiler.microbenchmarks.graal.ConditionalEliminationBenchmark#searchSnippet(Entry, String, Entry)->Entry::: conditional elimination benchmark search snippet
org.graalvm.compiler.microbenchmarks.graal.ConditionalEliminationBenchmark#search(Search, GraalState)->void::: conditional elimination benchmark search
org.graalvm.compiler.microbenchmarks.graal.FrameStateAssigmentPhaseBenchmark#nextToken(StringTokenizedNextToken)->void::: frame state assigment phase benchmark next token
org.graalvm.compiler.microbenchmarks.graal.GraphCopyBenchmark#nullnessSnippet(Object, Object)->int::: graph copy benchmark nullness snippet
org.graalvm.compiler.microbenchmarks.graal.GraphCopyBenchmark#nullness(Nullness, GraalState)->StructuredGraph::: graph copy benchmark nullness
org.graalvm.compiler.microbenchmarks.graal.GraphCopyBenchmark#searchSnippet(Entry, String, Entry)->Entry::: graph copy benchmark search snippet
org.graalvm.compiler.microbenchmarks.graal.GraphCopyBenchmark#search(Search, GraalState)->StructuredGraph::: graph copy benchmark search
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#getNodeClass(StringEquals)->int::: node benchmark get node class
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#dataEquals(StringEquals, Blackhole)->void::: node benchmark data equals
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#replaceFirstInput(StringEquals, Blackhole)->void::: node benchmark replace first input
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#inputsEquals(StringEquals, Blackhole)->void::: node benchmark inputs equals
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#inputs(StringEquals, Blackhole)->void::: node benchmark inputs
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#acceptInputs(StringEquals, Blackhole)->void::: node benchmark accept inputs
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#createAndDeleteAdd(StringEquals, Blackhole)->void::: node benchmark create and delete add
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#createAndDeleteConstant(StringEquals, Blackhole)->void::: node benchmark create and delete constant
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#usages(StringEquals, Blackhole)->void::: node benchmark usages
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#nodeBitmap(StringEquals, GraalState)->void::: node benchmark node bitmap
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#valueEquals_STRING_EQUALS(StringEquals)->int::: node benchmark value equals_ g_ s
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#valueEquals_HASHMAP_COMPUTE_IF_ABSENT(HashMapComputeIfAbsent)->int::: node benchmark value equals_ p_ e_ f_ t
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#valueNumberLeaf_HASHMAP_COMPUTE_IF_ABSENT(HashMapComputeIfAbsent)->int::: node benchmark value number leaf_ p_ e_ f_ t
org.graalvm.compiler.microbenchmarks.graal.NodeBenchmark#valueNumberLeaf_STRING_EQUALS(StringEquals)->int::: node benchmark value number leaf_ g_ s
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#stringEquals(StringEquals)->void::: schedule phase benchmark string equals
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#cfgCompute1(StringEquals)->void::: schedule phase benchmark cfg compute1
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#cfgCompute2(StringEquals)->void::: schedule phase benchmark cfg compute2
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#cfgCompute3(StringEquals)->void::: schedule phase benchmark cfg compute3
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#cfgCompute4(StringEquals)->void::: schedule phase benchmark cfg compute4
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#intersectionSnippet(int[], int[])->int[]::: schedule phase benchmark intersection snippet
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#intersection_LATEST_OPTIMAL(IntersectionState_LATEST_OPTIMAL)->void::: schedule phase benchmark intersection_ t_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#intersection_LATEST_OUT_OF_LOOPS_OPTIMAL(IntersectionState_LATEST_OUT_OF_LOOPS_OPTIMAL)->void::: schedule phase benchmark intersection_ t_ t_ f_ s_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#intersection_EARLIEST_OPTIMAL(IntersectionState_EARLIEST_OPTIMAL)->void::: schedule phase benchmark intersection_ t_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#intersection_EARLIEST_WITH_GUARD_ORDER_OPTIMAL(IntersectionState_EARLIEST_WITH_GUARD_ORDER_OPTIMAL)->void::: schedule phase benchmark intersection_ t_ h_ d_ r_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#scheduleEarliestIterative_LATEST_OPTIMAL(ScheduleEarliestIterative_LATEST_OPTIMAL)->void::: schedule phase benchmark schedule earliest iterative_ t_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#scheduleEarliestIterative_LATEST_OUT_OF_LOOPS_OPTIMAL(ScheduleEarliestIterative_LATEST_OUT_OF_LOOPS_OPTIMAL)->void::: schedule phase benchmark schedule earliest iterative_ t_ t_ f_ s_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#scheduleEarliestIterative_EARLIEST_OPTIMAL(ScheduleEarliestIterative_EARLIEST_OPTIMAL)->void::: schedule phase benchmark schedule earliest iterative_ t_ l
org.graalvm.compiler.microbenchmarks.graal.SchedulePhaseBenchmark#scheduleEarliestIterative_EARLIEST_WITH_GUARD_ORDER_OPTIMAL(ScheduleEarliestIterative_EARLIEST_WITH_GUARD_ORDER_OPTIMAL)->void::: schedule phase benchmark schedule earliest iterative_ t_ h_ d_ r_ l
org.graalvm.compiler.microbenchmarks.graal.TestJMHWhitebox#testJMH(GraalState)->void::: test whitebox test h

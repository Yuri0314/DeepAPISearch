Assembler#position():::Returns the current position of the underlying code buffer.:::return->codeBuffer->position
Assembler#emitString(String):::Some GPU architectures have a text based encoding.:::emitString0->emitString0->emitString0
Assembler#close(boolean):::Closes this assembler:::checkAndClearLabelsWithPatches->return->codeBuffer->close
Assembler#createLabelName(Label, int):::Creates a name for a label.:::return
Assembler#nameOf(Label):::Gets a name for a label, creating it if it does not yet exist:::if->new->HashMap<>->name->nameMap->get->if->nameMap->size->createLabelName->nameMap->put->return
Assembler#makeAddress(Register, int):::This is used by the CompilationResultBuilder to convert a StackSlot to an AbstractAddress.:::
Assembler#getPlaceholder(int):::Returns a target specific placeholder address that can be used for code patching.:::
Assembler#ensureUniquePC():::Emits a NOP instruction to advance the current PC.:::
Buffer#close(boolean):::Closes this buffer:::result->data->array->if->Arrays->data->position->copyOf->return
Buffer#copyInto(byte[], int, int):::Copies the data from this buffer into a given array.:::System->data->array->arraycopy
Label#position():::Returns the position of this label in the code buffer.:::return
Label#bind(int, Assembler):::Binds the label to pos and patches all instructions added by #addPatchAt(int, Assembler).:::if->throw->new->GraalError->if->for->i->patchPositions->size

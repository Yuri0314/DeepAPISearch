org.graalvm.compiler.asm.Assembler#setCodePatchingAnnotationConsumer(Consumer)->void::: assembler set code patching annotation consumer
org.graalvm.compiler.asm.Assembler#position()->int:::Returns the current position of the underlying code buffer.
org.graalvm.compiler.asm.Assembler#emitByte(int)->void::: assembler emit byte
org.graalvm.compiler.asm.Assembler#emitShort(int)->void::: assembler emit short
org.graalvm.compiler.asm.Assembler#emitInt(int)->void::: assembler emit int
org.graalvm.compiler.asm.Assembler#emitLong(long)->void::: assembler emit long
org.graalvm.compiler.asm.Assembler#emitByte(int, int)->void::: assembler emit byte
org.graalvm.compiler.asm.Assembler#emitShort(int, int)->void::: assembler emit short
org.graalvm.compiler.asm.Assembler#emitInt(int, int)->void::: assembler emit int
org.graalvm.compiler.asm.Assembler#emitLong(long, int)->void::: assembler emit long
org.graalvm.compiler.asm.Assembler#getByte(int)->int::: assembler get byte
org.graalvm.compiler.asm.Assembler#getShort(int)->int::: assembler get short
org.graalvm.compiler.asm.Assembler#getInt(int)->int::: assembler get int
org.graalvm.compiler.asm.Assembler#emitString(String)->void:::Some GPU architectures have a text based encoding.
org.graalvm.compiler.asm.Assembler#emitString0(String)->void::: assembler emit string0
org.graalvm.compiler.asm.Assembler#emitString(String, int)->void::: assembler emit string
org.graalvm.compiler.asm.Assembler#close(boolean)->byte[]:::Closes this assembler
org.graalvm.compiler.asm.Assembler#bind(Label)->void::: assembler bind
org.graalvm.compiler.asm.Assembler#align(int)->void::: assembler align
org.graalvm.compiler.asm.Assembler#jmp(Label)->void::: assembler jmp
org.graalvm.compiler.asm.Assembler#patchJumpTarget(int, int)->void::: assembler patch jump target
org.graalvm.compiler.asm.Assembler#createLabelName(Label, int)->String:::Creates a name for a label.
org.graalvm.compiler.asm.Assembler#nameOf(Label)->String:::Gets a name for a label, creating it if it does not yet exist
org.graalvm.compiler.asm.Assembler#makeAddress(Register, int)->AbstractAddress:::This is used by the CompilationResultBuilder to convert a StackSlot to an AbstractAddress.
org.graalvm.compiler.asm.Assembler#getPlaceholder(int)->AbstractAddress:::Returns a target specific placeholder address that can be used for code patching.
org.graalvm.compiler.asm.Assembler#ensureUniquePC()->void:::Emits a NOP instruction to advance the current PC.
org.graalvm.compiler.asm.Assembler#reset()->void::: assembler reset
org.graalvm.compiler.asm.Assembler#requestLabelHint(Label)->LabelHint::: assembler request label hint
org.graalvm.compiler.asm.Assembler#getInstructionCounter()->InstructionCounter::: assembler get instruction counter
org.graalvm.compiler.asm.Assembler.LabelHint#capture()->void::: label hint capture
org.graalvm.compiler.asm.Assembler.LabelHint#getTarget()->int::: label hint get target
org.graalvm.compiler.asm.Assembler.LabelHint#getPosition()->int::: label hint get position
org.graalvm.compiler.asm.Assembler.LabelHint#isValid()->boolean::: label hint is valid
org.graalvm.compiler.asm.Assembler.InstructionCounter#getSupportedInstructionTypes()->String[]::: instruction counter get supported instruction types
org.graalvm.compiler.asm.Assembler.InstructionCounter#countInstructions(String[], int, int)->int[]::: instruction counter count instructions
org.graalvm.compiler.asm.Buffer#position()->int::: buffer position
org.graalvm.compiler.asm.Buffer#setPosition(int)->void::: buffer set position
org.graalvm.compiler.asm.Buffer#close(boolean)->byte[]:::Closes this buffer
org.graalvm.compiler.asm.Buffer#copyData(int, int)->byte[]::: buffer copy data
org.graalvm.compiler.asm.Buffer#copyInto(byte[], int, int)->void:::Copies the data from this buffer into a given array.
org.graalvm.compiler.asm.Buffer#ensureSize(int)->void::: buffer ensure size
org.graalvm.compiler.asm.Buffer#emitBytes(byte[], int, int)->void::: buffer emit bytes
org.graalvm.compiler.asm.Buffer#emitByte(int)->void::: buffer emit byte
org.graalvm.compiler.asm.Buffer#emitShort(int)->void::: buffer emit short
org.graalvm.compiler.asm.Buffer#emitInt(int)->void::: buffer emit int
org.graalvm.compiler.asm.Buffer#emitLong(long)->void::: buffer emit long
org.graalvm.compiler.asm.Buffer#emitBytes(byte[], int)->void::: buffer emit bytes
org.graalvm.compiler.asm.Buffer#emitByte(int, int)->void::: buffer emit byte
org.graalvm.compiler.asm.Buffer#emitShort(int, int)->void::: buffer emit short
org.graalvm.compiler.asm.Buffer#emitInt(int, int)->void::: buffer emit int
org.graalvm.compiler.asm.Buffer#emitLong(long, int)->void::: buffer emit long
org.graalvm.compiler.asm.Buffer#getByte(int)->int::: buffer get byte
org.graalvm.compiler.asm.Buffer#getShort(int)->int::: buffer get short
org.graalvm.compiler.asm.Buffer#getInt(int)->int::: buffer get int
org.graalvm.compiler.asm.Buffer#reset()->void::: buffer reset
org.graalvm.compiler.asm.Label#position()->int:::Returns the position of this label in the code buffer.
org.graalvm.compiler.asm.Label#getBlockId()->int::: label get block id
org.graalvm.compiler.asm.Label#bind(int, Assembler)->void:::Binds the label to pos and patches all instructions added by #addPatchAt(int, Assembler).
org.graalvm.compiler.asm.Label#isBound()->boolean::: label is bound
org.graalvm.compiler.asm.Label#addPatchAt(int, Assembler)->void::: label add patch at
org.graalvm.compiler.asm.Label#reset()->void::: label reset
org.graalvm.compiler.asm.Label#toString()->String::: label to string

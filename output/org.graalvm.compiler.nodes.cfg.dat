org.graalvm.compiler.nodes.cfg.Block#getBeginNode()->AbstractBeginNode::: block get begin node
org.graalvm.compiler.nodes.cfg.Block#getEndNode()->FixedNode::: block get end node
org.graalvm.compiler.nodes.cfg.Block#getLoop()->Loop::: block get loop
org.graalvm.compiler.nodes.cfg.Block#setLoop(Loop)->void::: block set loop
org.graalvm.compiler.nodes.cfg.Block#getLoopDepth()->int::: block get loop depth
org.graalvm.compiler.nodes.cfg.Block#isLoopHeader()->boolean::: block is loop header
org.graalvm.compiler.nodes.cfg.Block#isLoopEnd()->boolean::: block is loop end
org.graalvm.compiler.nodes.cfg.Block#isExceptionEntry()->boolean::: block is exception entry
org.graalvm.compiler.nodes.cfg.Block#getFirstPredecessor()->Block::: block get first predecessor
org.graalvm.compiler.nodes.cfg.Block#getFirstSuccessor()->Block::: block get first successor
org.graalvm.compiler.nodes.cfg.Block#getEarliestPostDominated()->Block::: block get earliest post dominated
org.graalvm.compiler.nodes.cfg.Block#getPostdominator()->Block::: block get postdominator
org.graalvm.compiler.nodes.cfg.Block#getNodes()->Iterable::: block get nodes
org.graalvm.compiler.nodes.cfg.Block#toString()->String::: block to string
org.graalvm.compiler.nodes.cfg.Block#toString(Verbosity)->String::: block to string
org.graalvm.compiler.nodes.cfg.Block#getRelativeFrequency()->double:::The execution frequency of this block relative to the start block as estimated by the profiling information.
org.graalvm.compiler.nodes.cfg.Block#setRelativeFrequency(double)->void::: block set relative frequency
org.graalvm.compiler.nodes.cfg.Block#getDominator(int)->Block::: block get dominator
org.graalvm.compiler.nodes.cfg.Block#canKill(LocationIdentity)->boolean::: block can kill
org.graalvm.compiler.nodes.cfg.Block#getKillLocations()->LocationSet::: block get kill locations
org.graalvm.compiler.nodes.cfg.Block#canKillBetweenThisAndDominator(LocationIdentity)->boolean::: block can kill between this and dominator
org.graalvm.compiler.nodes.cfg.Block#delete()->void::: block delete
org.graalvm.compiler.nodes.cfg.Block#setPostDominator(Block)->void::: block set post dominator
org.graalvm.compiler.nodes.cfg.ControlFlowGraph.RecursiveVisitor#enter(Block)->V::: recursive visitor enter
org.graalvm.compiler.nodes.cfg.ControlFlowGraph.RecursiveVisitor#exit(Block, V)->void::: recursive visitor exit
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#compute(StructuredGraph, boolean, boolean, boolean, boolean)->ControlFlowGraph::: control flow graph compute
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#dominatorTreeString()->String::: control flow graph dominator tree string
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#visitDominatorTreeDefault(RecursiveVisitor)->void::: control flow graph visit dominator tree default
org.graalvm.compiler.nodes.cfg.ControlFlowGraph.DeferredExit#getBlock()->Block::: deferred exit get block
org.graalvm.compiler.nodes.cfg.ControlFlowGraph.DeferredExit#getNext()->DeferredExit::: deferred exit get next
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#addDeferredExit(DeferredExit[], Block)->void::: control flow graph add deferred exit
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#visitDominatorTreeDeferLoopExits(RecursiveVisitor)->void::: control flow graph visit dominator tree defer loop exits
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#visitDominatorTree(RecursiveVisitor, boolean)->void::: control flow graph visit dominator tree
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#isDominatorTreeLoopExit(Block)->boolean::: control flow graph is dominator tree loop exit
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#getBlocks()->Block[]::: control flow graph get blocks
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#getStartBlock()->Block::: control flow graph get start block
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#reversePostOrder()->Block[]::: control flow graph reverse post order
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#getNodeToBlock()->NodeMap::: control flow graph get node to block
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#blockFor(Node)->Block::: control flow graph block for
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#getLoops()->List>::: control flow graph get loops
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#getMaxDominatorDepth()->int::: control flow graph get max dominator depth
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#computePostdominators()->void::: control flow graph compute postdominators
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#setNodeToBlock(NodeMap)->void::: control flow graph set node to block
org.graalvm.compiler.nodes.cfg.ControlFlowGraph#multiplyRelativeFrequencies(double, double)->double:::Multiplies a and b and clamps the between ControlFlowGraph#MIN_RELATIVE_FREQUENCY and ControlFlowGraph#MAX_RELATIVE_FREQUENCY.
org.graalvm.compiler.nodes.cfg.HIRLoop#numBackedges()->long::: loop num backedges
org.graalvm.compiler.nodes.cfg.HIRLoop#getKillLocations()->LocationSet::: loop get kill locations
org.graalvm.compiler.nodes.cfg.HIRLoop#canKill(LocationIdentity)->boolean::: loop can kill
org.graalvm.compiler.nodes.cfg.HIRLoop#toString()->String::: loop to string
org.graalvm.compiler.nodes.cfg.LocationSet#isEmpty()->boolean::: location set is empty
org.graalvm.compiler.nodes.cfg.LocationSet#isAny()->boolean::: location set is any
org.graalvm.compiler.nodes.cfg.LocationSet#add(LocationIdentity)->void::: location set add
org.graalvm.compiler.nodes.cfg.LocationSet#addAll(LocationSet)->void::: location set add all
org.graalvm.compiler.nodes.cfg.LocationSet#contains(LocationIdentity)->boolean::: location set contains
org.graalvm.compiler.nodes.cfg.LocationSet#getCopyAsList()->List::: location set get copy as list
org.graalvm.compiler.nodes.cfg.LocationSet#toString()->String::: location set to string

CertAndKeyGen#setRandom(SecureRandom):::Sets the source of random numbers used when generating keys:::
CertAndKeyGen#generate(int):::Generates a random public/private key pair, with a given key size:::pair->try->if->new->SecureRandom->keyGen->initialize->keyGen->generateKeyPair->catch->throw->e->getMessage->new->IllegalArgumentException->finally->pair->getPublic->pair->getPrivate->if->publicKey->getFormat->equalsIgnoreCase->throw->publicKey->getFormat->new->IllegalArgumentException->if->AlgorithmId->getDefaultSigAlgForKey->if->throw->privateKey->getAlgorithm->new->IllegalArgumentException
CertAndKeyGen#getPublicKey():::Returns the public key of the generated key pair if it is of type X509Key, or null if the public key is of a different type:::if->return->return
CertAndKeyGen#getPublicKeyAnyway():::Always returns the public key of the generated key pair:::return
CertAndKeyGen#getPrivateKey():::Returns the private key of the generated key pair:::return
CertAndKeyGen#getSelfCertificate(X500Name, Date, long):::Returns a self-signed X.509v3 certificate for the public key:::return->getSelfCertificate
CertAndKeyGen#getSelfCertificate(X500Name, Date, long, CertificateExtensions)::: cert and key gen get self certificate:::cert->lastDate->try->new->Date->lastDate->firstDate->getTime->setTime->interval->new->CertificateValidity->info->new->X509CertInfo->info->new->CertificateVersion->set->info->new->java.util.Random->nextInt->new->CertificateSerialNumber->set->algID->AlgorithmId->get->info->new->CertificateAlgorithmId->set->info->set->info->new->CertificateX509Key->set->info->set->info->set->if->info->set->new->X509CertImpl->cert->sign->return->catch->throw->e->getMessage->new->CertificateEncodingException->finally
CertAndKeyGen#getSelfCertificate(X500Name, long)::: cert and key gen get self certificate:::return->new->Date->getSelfCertificate
CertAndKeyGen#getCertRequest(X500Name):::Returns a PKCS #10 certificate request:::req->new->PKCS10->try->signature->Signature->getInstance->signature->initSign->req->encodeAndSign->catch->throw->new->SignatureException->throw->new->SignatureException->throw->new->SignatureException->finally->return
Main#main(String[])::: main main:::kt->new->Main->kt->run
Main#run(String[], PrintStream)::: main run:::try->parseArgs->if->doCommands->catch->rb->getString->println->if->e->printStackTrace->if->System->exit->else->throw->finally->printWeakWarnings->foreach->if->Arrays->fill->if->ksStream->close
Main#parseArgs(String[]):::Parse command line arguments.:::i->help->confFile->optionsSet->new->HashSet<>->for->if->KeyStoreUtil->command->toString->command->getAltName->expandArgs->Arrays->stream->collator->compare->anyMatch->if->Arrays->toString->println->for->startsWith->if->rb->getString->println->tinyHelp->if->if->usage->else->rb->getString->println->tinyHelp->else->if->usage->return
Main#isKeyStoreRelated(Command)::: main is key store related:::return
Main#doCommands(PrintStream):::Execute the commands.:::if->if->throw->rb->getString->new->IllegalArgumentException->KeyStoreUtil->getCacerts->if->P11KEYSTORE->equalsIgnoreCase->KeyStoreUtil->isWindowsKeyStore->if->if->NONE->equals->if->MessageFormat->rb->getString->format->println->println->tinyHelp->if->throw->MessageFormat->rb->getString->format->new->UnsupportedOperationException->if->throw->MessageFormat->rb->getString->format->new->IllegalArgumentException->if->if->throw->rb->getString->new->IllegalArgumentException->if->if->throw->rb->getString->new->IllegalArgumentException->if->KeyStoreUtil->isWindowsKeyStore->if->throw->rb->getString->new->IllegalArgumentException->if->KeyStoreUtil->isWindowsKeyStore->if->throw->rb->getString->new->IllegalArgumentException->if->throw->rb->getString->new->Exception->if->foreach->try->KeyStoreUtil->loadProviderByName->if->println->catch->throw->String->rb->getString->format->new->Exception->finally->if->cl->if->path->PathList->System->getProperty->appendPath->PathList->System->getProperty->appendPath->PathList->appendPath->urls->PathList->pathToURLs->new->URLClassLoader->else->ClassLoader->getSystemClassLoader->foreach->try->KeyStoreUtil->loadProviderByClass->if->println->catch->throw->String->rb->getString->format->new->Exception->throw->String->rb->getString->format->e->getCause->new->Exception->finally->if->rb->getString->println->tinyHelp->if->throw->rb->getString->new->Exception->if->throw->rb->getString->new->Exception->if->throw->rb->getString->new->Exception->if->System->getProperty->srcKeyStore->if->inplaceImportCheck->if->loadSourceKeyStore->if->if->isKeyStoreRelated->try->new->File->if->ksfile->exists->ksfile->length->throw->rb->getString->new->Exception->new->FileInputStream->catch->if->throw->rb->getString->new->Exception->finally->if->getAlias->if->equals->throw->rb->getString->new->Exception->if->getAlias->if->equals->throw->rb->getString->new->Exception->if->KeyStore->getInstance->keyStore->getType->else->if->KeyStore->getDefaultType->if->KeyStore->getInstance->else->KeyStore->getInstance->if->if->keyStore->load->else->keyStore->load->if->ksStream->close->if->P12KEYSTORE->equalsIgnoreCase->throw->rb->getString->new->UnsupportedOperationException->if->keyStore->load->else->if->if->throw->rb->getString->new->Exception->else->if->if->KeyStoreUtil->isWindowsKeyStore->count->do->if->rb->getString->print->else->rb->getString->print->flush->Password->readPassword->passwords->add->if->rb->getString->println->if->rb->getString->print->storePassAgain->Password->readPassword->passwords->add->if->Arrays->equals->rb->getString->println->while->if->rb->getString->println->return->else->if->KeyStoreUtil->isWindowsKeyStore->isKeyStoreRelated->if->rb->getString->print->flush->Password->readPassword->passwords->add->if->keyStore->load->else->if->new->FileInputStream->keyStore->load->ksStream->close->if->P12KEYSTORE->equalsIgnoreCase->form->rb->getString->new->MessageFormat->if->Arrays->equals->source->form->format->println->if->Arrays->equals->source->form->format->println->if->CertificateFactory->getInstance->if->if->KeyStoreUtil->getCacertsKeyStore->if->if->try->ps->new->FileOutputStream->new->PrintStream->doCertReq->catch->finally->else->doCertReq->if->form->rb->getString->new->MessageFormat->source->form->format->println->rb->getString->println->else->if->doDeleteEntry->else->if->if->try->ps->new->FileOutputStream->new->PrintStream->doExportCert->catch->finally->else->doExportCert->if->form->rb->getString->new->MessageFormat->source->form->format->println->else->if->if->doGenKeyPair->else->if->if->doGenSecretKey->else->if->if->doGenSecretKey->else->if->if->try->inStream->new->FileInputStream->doImportIdentityDatabase->catch->finally->else->doImportIdentityDatabase->else->if->inStream->if->new->FileInputStream->importAlias->try->if->keyStore->entryInstanceOf->installReply->if->rb->getString->println->else->rb->getString->println->else->if->keyStore->containsAlias->keyStore->entryInstanceOf->addTrustedCert->if->rb->getString->println->else->rb->getString->println->catch->finally->if->inStream->close->else->if->if->loadSourceKeyStore->doImportKeyStore->else->if->if->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->if->keyStore->entryInstanceOf->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->doCloneEntry->else->if->if->doCloneEntry->if->keyStore->containsAlias->doDeleteEntry->else->if->doChangeKeyPasswd->else->if->if->KeyStoreUtil->isWindowsKeyStore->printNoIntegrityWarning->if->rb->getString->doPrintEntry->else->doPrintEntries->else->if->doPrintCert->else->if->doSelfCert->else->if->doChangeStorePasswd->else->if->if->inStream->if->new->FileInputStream->ps->if->new->FileOutputStream->new->PrintStream->try->doGenCert->catch->finally->if->inStream->close->if->ps->close->else->if->if->if->try->ps->new->FileOutputStream->new->PrintStream->doGenCRL->catch->finally->else->doGenCRL->else->if->if->try->inStream->new->FileInputStream->doPrintCertReq->catch->finally->else->doPrintCertReq->else->if->doPrintCRL->if->if->form->rb->getString->new->MessageFormat->source->form->format->println->if->keyStore->store->else->pass->if->keyStore->store->else->bout->new->ByteArrayOutputStream->keyStore->store->try->fout->new->FileOutputStream->fout->bout->toByteArray->write->catch->finally->if->isKeyStoreRelated->f->new->File->pass->if->f->exists->realType->try->KeyStore->getInstance->keyStore->getType->if->realType->equalsIgnoreCase->realType->equalsIgnoreCase->allCerts->foreach->Collections->keyStore->aliases->list->if->keyStore->entryInstanceOf->break->if->weakWarnings->String->rb->getString->format->add->catch->finally->if->realSourceStoreType->try->KeyStore->new->File->getInstance->getType->catch->finally->format->realType->equalsIgnoreCase->rb->getString->rb->getString->weakWarnings->String->format->add
Main#doGenCert(String, String, InputStream, PrintStream):::Generate a certificate: Read PKCS10 request from in, and print certificate to out:::if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->signerCert->keyStore->getCertificate->encoded->signerCert->getEncoded->signerCertImpl->new->X509CertImpl->signerCertInfo->signerCertImpl->get->issuer->signerCertInfo->get->firstDate->getStartDate->lastDate->new->Date->lastDate->firstDate->getTime->setTime->interval->new->CertificateValidity->privateKey->recoverKey->if->getCompatibleSigAlgName->signature->Signature->getInstance->SignatureUtil->initSignWithParam->info->new->X509CertInfo->info->set->info->new->java.util.Random->nextInt->new->CertificateSerialNumber->set->info->new->CertificateVersion->set->info->AlgorithmId->get->new->CertificateAlgorithmId->set->info->set->reader->new->InputStreamReader->new->BufferedReader->canRead->sb->new->StringBuffer->while->s->reader->readLine->if->break->if->s->startsWith->s->indexOf->else->if->s->startsWith->s->indexOf->break->else->if->sb->append->rawReq->Pem->new->String->decode->req->new->PKCS10->rb->getString->checkWeak->info->req->getSubjectPublicKeyInfo->new->CertificateX509Key->set->info->req->getSubjectName->new->X500Name->set->reqex->attrs->req->getAttributes->getAttributes->iterator->while->attrs->hasNext->attr->attrs->next->if->attr->getAttributeId->equals->attr->getAttributeValue->ext->req->getSubjectPublicKeyInfo->signerCert->getPublicKey->createV3Extensions->info->set->cert->new->X509CertImpl->cert->sign->dumpCert->foreach->keyStore->getCertificateChain->if->xca->if->KeyStoreUtil->isSelfSigned->dumpCert->rb->getString->keyStore->getCertificateChain->checkWeak->rb->getString->checkWeak
Main#doGenCRL(PrintStream)::: main do gen l:::if->throw->new->Exception->signerCert->keyStore->getCertificate->encoded->signerCert->getEncoded->signerCertImpl->new->X509CertImpl->signerCertInfo->signerCertImpl->get->owner->signerCertInfo->get->firstDate->getStartDate->lastDate->firstDate->clone->lastDate->lastDate->getTime->setTime->interval->new->CertificateValidity->privateKey->recoverKey->if->getCompatibleSigAlgName->badCerts->ids->size->new->X509CRLEntryArr->for->i->ids->size->crl->new->X509CRLImpl->crl->sign->if->out->println->out->Base64->getMimeEncoder->crl->getEncodedInternal->encodeToString->println->out->println->else->out->crl->getEncodedInternal->write->rb->getString->checkWeak
Main#doCertReq(String, String, PrintStream):::Creates a PKCS#10 cert signing request, corresponding to the keys (and name) associated with a given alias.:::if->objs->recoverKey->privKey->if->cert->keyStore->getCertificate->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->request->cert->getPublicKey->new->PKCS10->ext->cert->getPublicKey->createV3Extensions->request->getAttributes->new->PKCS10Attribute->setAttribute->if->getCompatibleSigAlgName->signature->Signature->getInstance->SignatureUtil->initSignWithParam->subject->getSubjectDN->toString->new->X500Name->new->X500Name->request->encodeAndSign->request->print->rb->getString->checkWeak
Main#doDeleteEntry(String):::Deletes an entry from the keystore.:::if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->keyStore->deleteEntry
Main#doExportCert(String, PrintStream):::Exports a certificate from the keystore.:::if->KeyStoreUtil->isWindowsKeyStore->printNoIntegrityWarning->if->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->cert->keyStore->getCertificate->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->dumpCert->rb->getString->checkWeak
Main#promptForKeyPass(String, String, char[]):::Prompt the user for a keypass when generating a key entry.:::if->P12KEYSTORE->equalsIgnoreCase->return->else->if->count->for->if->if->throw->rb->getString->new->Exception->else->throw->rb->getString->new->Exception->return
Main#promptForCredential()::: main prompt for credential:::if->System->console->importPass->Password->readPassword->passwords->add->return->count->for->if->throw->rb->getString->new->Exception->return
Main#doGenSecretKey(String, String, int):::Creates a new secret key.:::if->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->useDefaultPBEAlgorithm->secKey->if->keyAlgName->toUpperCase->startsWith->factory->SecretKeyFactory->getInstance->factory->promptForCredential->new->PBEKeySpec->generateSecret->if->equalsIgnoreCase->if->form->rb->getString->new->MessageFormat->source->secKey->getAlgorithm->form->format->println->else->keygen->KeyGenerator->getInstance->if->if->equalsIgnoreCase->else->if->equalsIgnoreCase->else->throw->rb->getString->new->Exception->keygen->init->keygen->generateKey->if->form->rb->getString->new->MessageFormat->source->secKey->getAlgorithm->form->format->println->if->promptForKeyPass->if->keyStore->setKeyEntry->else->keyStore->new->KeyStore.SecretKeyEntry->new->KeyStore.PasswordProtection->setEntry
Main#getCompatibleSigAlgName(PrivateKey):::If no signature algorithm was specified at the command line, we choose one that is compatible with the selected private key:::result->AlgorithmId->getDefaultSigAlgForKey->if->return->else->throw->rb->getString->new->Exception
Main#doGenKeyPair(String, String, String, int, String):::Creates a new key pair and self-signed certificate.:::if->if->equalsIgnoreCase->else->if->equalsIgnoreCase->else->if->equalsIgnoreCase->if->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->keypair->new->CertAndKeyGen->x500Name->if->getX500Name->else->new->X500Name->keypair->generate->privKey->keypair->getPrivateKey->ext->keypair->getPublicKeyAnyway->createV3Extensions->chain->new->X509CertificateArr->keypair->getStartDate->getSelfCertificate->if->form->rb->getString->new->MessageFormat->source->privKey->getAlgorithm->getSigAlgName->form->format->println->if->promptForKeyPass->rb->getString->checkWeak->keyStore->setKeyEntry
Main#doCloneEntry(String, String, boolean):::Clones an entry:::if->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->objs->recoverEntry->entry->pp->if->if->P12KEYSTORE->equalsIgnoreCase->else->if->promptForKeyPass->new->PasswordProtection->keyStore->setEntry
Main#doChangeKeyPasswd(String):::Changes a key password.:::if->objs->recoverKey->privKey->if->if->form->rb->getString->new->MessageFormat->source->form->format->getNewPasswd->keyStore->keyStore->getCertificateChain->setKeyEntry
Main#doImportIdentityDatabase(InputStream):::Imports a JDK 1.1-style identity database:::rb->getString->println
Main#doPrintEntry(String, String, PrintStream):::Prints a single keystore entry.:::if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->if->form->rb->getString->new->MessageFormat->source->out->form->format->println->if->rb->getString->new->MessageFormat->src->keyStore->getCreationDate->out->form->format->println->else->if->form->rb->getString->new->MessageFormat->source->keyStore->getCreationDate->out->form->format->print->else->form->rb->getString->new->MessageFormat->source->out->form->format->print->if->keyStore->entryInstanceOf->if->source->out->rb->getString->new->MessageFormat->format->println->else->out->println->else->if->keyStore->entryInstanceOf->if->source->out->rb->getString->new->MessageFormat->format->println->else->out->println->chain->keyStore->getCertificateChain->if->if->out->rb->getString->println->for->i->else->out->rb->getString->getCertFingerPrint->println->checkWeak->else->if->keyStore->entryInstanceOf->cert->keyStore->getCertificate->source->mf->rb->getString->new->MessageFormat->format->if->out->println->printX509Cert->else->if->out->println->dumpCert->else->if->out->cert->toString->println->else->out->println->out->rb->getString->getCertFingerPrint->println->checkWeak->else->out->rb->getString->println
Main#inplaceImportCheck()::: main inplace import check:::if->P11KEYSTORE->equalsIgnoreCase->KeyStoreUtil->isWindowsKeyStore->return->if->srcksfile->new->File->if->srcksfile->exists->srcksfile->length->throw->rb->getString->new->Exception->if->srcksfile->getCanonicalFile->new->File->getCanonicalFile->equals->return->else->String->rb->getString->format->println->return->else->throw->rb->getString->new->Exception
Main#loadSourceKeyStore():::Load the srckeystore from a stream, used in -importkeystore:::is->srcksfile->if->P11KEYSTORE->equalsIgnoreCase->KeyStoreUtil->isWindowsKeyStore->if->NONE->equals->MessageFormat->rb->getString->format->println->println->tinyHelp->else->new->File->new->FileInputStream->store->try->if->KeyStore->getInstance->store->getType->else->if->KeyStore->getDefaultType->if->KeyStore->getInstance->else->KeyStore->getInstance->if->KeyStoreUtil->isWindowsKeyStore->rb->getString->print->flush->Password->readPassword->passwords->add->if->P12KEYSTORE->equalsIgnoreCase->if->Arrays->equals->form->rb->getString->new->MessageFormat->source->form->format->println->store->load->catch->finally->if->is->close->if->KeyStoreUtil->isWindowsKeyStore->println->rb->getString->println->rb->getString->println->rb->getString->println->println->return
Main#doImportKeyStore(KeyStore):::import all keys and certs from importkeystore:::if->doImportKeyStoreSingle->else->if->throw->rb->getString->new->Exception->doImportKeyStoreAll->if->for->n
Main#doImportKeyStoreSingle(KeyStore, String):::Import a single entry named alias from srckeystore:::newAlias->if->keyStore->containsAlias->source->if->rb->getString->new->MessageFormat->format->println->else->reply->rb->getString->new->MessageFormat->format->getYesNoReply->if->equals->rb->getString->inputStringFromStdin->if->equals->rb->getString->new->MessageFormat->format->println->return->objs->recoverEntry->entry->pp->newPass->if->new->PasswordProtection->else->if->P12KEYSTORE->equalsIgnoreCase->new->PasswordProtection->try->c->srckeystore->getCertificate->if->checkWeak->keyStore->setEntry->if->P12KEYSTORE->equalsIgnoreCase->if->Arrays->equals->throw->rb->getString->new->Exception->return->catch->source2->kse->toString->form->rb->getString->new->MessageFormat->form->format->println->return->finally
Main#doImportKeyStoreAll(KeyStore)::: main do import key store all:::ok->count->srckeystore->size->for->e->srckeystore->aliases->e->hasMoreElements->source->form->rb->getString->new->MessageFormat->form->format->println
Main#doPrintEntries(PrintStream):::Prints all keystore entries.:::out->rb->getString->keyStore->getType->println->out->rb->getString->keyStore->getProvider->getName->println->out->println->form->keyStore->size->rb->getString->new->MessageFormat->rb->getString->new->MessageFormat->source->keyStore->size->out->form->format->println->out->println->aliases->Collections->keyStore->aliases->list->aliases->String->compareTo->sort->foreach->doPrintEntry->if->out->rb->getString->println->out->rb->getString->println->out->rb->getString->println
Main#e2i(Enumeration)::: main e2i:::return->new->Iterable<T>
Main#loadCRLs(String):::Loads CRLs from a source:::in->uri->if->else->try->new->URI->if->uri->getScheme->equals->else->uri->toURL->openStream->catch->try->new->FileInputStream->catch->if->uri->getScheme->throw->else->throw->finally->finally->if->try->bout->new->ByteArrayOutputStream->b->new->byteArr->while->len->in->read->if->break->bout->write->return->CertificateFactory->getInstance->bout->toByteArray->new->ByteArrayInputStream->generateCRLs->catch->finally->if->in->close->else->params->new->URICertStoreParameters->s->CertStore->getInstance->return->s->new->X509CRLSelector->getCRLs
Main#readCRLsFromCert(X509Certificate):::Returns CRLs described in a X509Certificate's CRLDistributionPoints Extension:::crls->new->ArrayList<>->ext->X509CertImpl->toImpl->getCRLDistributionPointsExtension->if->return->distPoints->ext->get->foreach->names->o->getFullName->if->foreach->names->names->if->name->getType->uriName->name->getName->foreach->uriName->getName->loadCRLs->if->crls->add->break->return
Main#verifyCRL(KeyStore, CRL)::: main verify l:::xcrl->issuer->xcrl->getIssuerX500Principal->foreach->ks->aliases->e2i->cert->ks->getCertificate->if->xcert->if->xcert->getSubjectX500Principal->equals->try->cert->getPublicKey->verify->return->catch->finally->return
Main#doPrintCRL(String, PrintStream)::: main do print l:::foreach->loadCRLs->printCRL->issuer->signer->if->verifyCRL->if->caks->getCertificate->out->rb->getString->signer->getPublicKey->withWeak->printf->out->println->if->verifyCRL->if->keyStore->getCertificate->out->rb->getString->signer->getPublicKey->withWeak->printf->out->println->if->out->rb->getString->println->out->rb->getString->println->out->rb->getString->println->rb->getString->signer->getPublicKey->checkWeak
Main#printCRL(CRL, PrintStream)::: main print l:::xcrl->if->out->println->out->Base64->getMimeEncoder->xcrl->getEncoded->encodeToString->println->out->println->else->s->if->x509crl->x509crl->x509crl->getSigAlgId->withWeak->toStringWithAlgName->else->crl->toString->out->println
Main#doPrintCertReq(InputStream, PrintStream)::: main do print cert req:::reader->new->InputStreamReader->new->BufferedReader->sb->new->StringBuffer->started->while->s->reader->readLine->if->break->if->if->s->startsWith->else->if->s->startsWith->break->sb->append->req->Pem->new->String->decode->new->PKCS10->pkey->req->getSubjectPublicKeyInfo->out->rb->getString->req->getSubjectName->pkey->getFormat->withWeak->req->getSigAlg->withWeak->printf->foreach->req->getAttributes->getAttributes->oid->attr->getAttributeId->if->oid->equals->exts->attr->getAttributeValue->if->rb->getString->printExtensions->else->out->attr->getAttributeId->println->pkcs9Attr->attr->getAttributeId->attr->getAttributeValue->new->PKCS9Attribute->out->pkcs9Attr->getName->print->attrVal->attr->getAttributeValue->out->Arrays->toString->println->if->out->println->rb->getString->checkWeak
Main#printCertFromStream(InputStream, PrintStream):::Reads a certificate (or certificate chain) and prints its contents in a human readable format.:::c->try->cf->generateCertificates->catch->throw->rb->getString->new->Exception->finally->if->c->isEmpty->throw->rb->getString->new->Exception->certs->c->c->size->new->CertificateArr->toArray->for->i
Main#oneInMany(String, int, int)::: main one in many:::if->return->else->return->String->rb->getString->format
Main#doPrintCert(PrintStream)::: main do print cert:::if->Security->setProperty->jf->new->JarFile->entries->jf->entries->ss->new->HashSet<>->buffer->new->byteArr->pos->while->entries->hasMoreElements->je->entries->nextElement->try->is->jf->getInputStream->while->is->read->catch->finally->signers->je->getCodeSigners->if->foreach->if->ss->contains->ss->add->out->rb->getString->printf->out->println->out->println->out->rb->getString->println->out->println->certs->signer->getSignerCertPath->getCertificates->cc->foreach->x->if->out->rb->getString->x->getSubjectDN->println->dumpCert->else->printX509Cert->out->println->rb->getString->certs->size->oneInMany->checkWeak->ts->signer->getTimestamp->if->out->rb->getString->println->out->println->ts->getSignerCertPath->getCertificates->foreach->x->if->out->rb->getString->x->getSubjectDN->println->dumpCert->else->printX509Cert->out->println->rb->getString->certs->size->oneInMany->checkWeak->jf->close->if->ss->isEmpty->out->rb->getString->println->else->if->cs->SSLServerCertStore->new->URI->getInstance->chain->try->cs->getCertificates->if->chain->isEmpty->throw->rb->getString->new->Exception->catch->if->cse->getCause->throw->rb->getString->cse->getCause->new->Exception->else->throw->finally->i->foreach->try->if->dumpCert->else->out->println->out->println->printX509Cert->out->println->rb->getString->chain->size->oneInMany->checkWeak->catch->if->e->printStackTrace->finally->else->if->try->inStream->new->FileInputStream->printCertFromStream->catch->finally->else->printCertFromStream
Main#doChangeStorePasswd()::: main do change store passwd:::if->getNewPasswd->if->P12KEYSTORE->equalsIgnoreCase->foreach->Collections->keyStore->aliases->list->if->keyStore->isCertificateEntry->objs->recoverEntry->keyStore->new->PasswordProtection->setEntry
Main#doSelfCert(String, String, String):::Creates a self-signed certificate, and stores it as a single-element certificate chain.:::if->objs->recoverKey->privKey->if->if->getCompatibleSigAlgName->oldCert->keyStore->getCertificate->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->encoded->oldCert->getEncoded->certImpl->new->X509CertImpl->certInfo->certImpl->get->firstDate->getStartDate->lastDate->new->Date->lastDate->firstDate->getTime->setTime->interval->new->CertificateValidity->certInfo->set->certInfo->new->java.util.Random->nextInt->new->CertificateSerialNumber->set->owner->if->certInfo->get->else->new->X500Name->certInfo->set->certInfo->set->newCert->new->X509CertImpl->newCert->sign->sigAlgid->newCert->get->certInfo->set->certInfo->new->CertificateVersion->set->ext->certInfo->get->oldCert->getPublicKey->createV3Extensions->certInfo->set->new->X509CertImpl->newCert->sign->keyStore->new->CertificateArr->setKeyEntry->if->rb->getString->println->newCert->toString->print->println
Main#installReply(String, InputStream):::Processes a certificate reply from a certificate authority:::if->objs->recoverKey->privKey->if->userCert->keyStore->getCertificate->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->c->cf->generateCertificates->if->c->isEmpty->throw->rb->getString->new->Exception->replyCerts->c->c->size->new->CertificateArr->toArray->newChain->if->establishCertChain->else->validateReply->if->keyStore->setKeyEntry->return->else->return
Main#addTrustedCert(String, InputStream):::Imports a certificate and adds it to the list of trusted certificates.:::if->throw->rb->getString->new->Exception->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->cert->try->cf->generateCertificate->catch->throw->rb->getString->new->Exception->finally->if->rb->getString->checkWeak->keyStore->setCertificateEntry->return->selfSigned->if->KeyStoreUtil->isSelfSigned->cert->cert->getPublicKey->verify->reply->trustalias->keyStore->getCertificateAlias->if->form->rb->getString->new->MessageFormat->source->form->format->println->rb->getString->checkWeak->printWeakWarnings->rb->getString->getYesNoReply->else->if->if->caks->getCertificateAlias->form->rb->getString->new->MessageFormat->source->form->format->println->rb->getString->checkWeak->printWeakWarnings->rb->getString->getYesNoReply->if->printX509Cert->rb->getString->checkWeak->printWeakWarnings->rb->getString->getYesNoReply->if->if->equals->keyStore->setCertificateEntry->return->else->return->try->chain->establishCertChain->if->keyStore->setCertificateEntry->return->catch->printX509Cert->rb->getString->checkWeak->printWeakWarnings->rb->getString->getYesNoReply->if->equals->keyStore->setCertificateEntry->return->else->return->finally->return
Main#getNewPasswd(String, char[]):::Prompts user for new password:::entered->reentered->for->count->throw->rb->getString->new->Exception
Main#getAlias(String):::Prompts user for alias name.:::if->form->rb->getString->new->MessageFormat->source->form->format->print->else->rb->getString->print->return->new->InputStreamReader->new->BufferedReader->readLine
Main#inputStringFromStdin(String):::Prompts user for an input string from the command line (System.in):::print->return->new->InputStreamReader->new->BufferedReader->readLine
Main#getKeyPasswd(String, String, char[]):::Prompts user for key password:::count->keyPass->do->if->form->rb->getString->new->MessageFormat->source->form->format->println->rb->getString->new->MessageFormat->src->form->format->print->else->form->rb->getString->new->MessageFormat->source->form->format->print->flush->Password->readPassword->passwords->add->if->while->if->throw->rb->getString->new->Exception->return
Main#withWeak(String)::: main with weak:::if->DISABLED_CHECK->permits->return->else->return->String->rb->getString->format
Main#withWeak(PublicKey)::: main with weak:::if->DISABLED_CHECK->permits->kLen->KeyUtil->getKeySize->if->return->String->rb->getString->key->getAlgorithm->format->else->return->String->rb->getString->key->getAlgorithm->format->else->return->String->rb->getString->KeyUtil->getKeySize->key->getAlgorithm->format
Main#printX509Cert(X509Certificate, PrintStream):::Prints a certificate in a human readable format.:::form->rb->getString->new->MessageFormat->pkey->cert->getPublicKey->sigName->cert->getSigAlgName->if->isTrustedCert->withWeak->source->cert->getSubjectDN->toString->cert->getIssuerDN->toString->cert->getSerialNumber->toString->cert->getNotBefore->toString->cert->getNotAfter->toString->getCertFingerPrint->getCertFingerPrint->withWeak->cert->getVersion->out->form->format->println->if->impl->certInfo->impl->get->exts->certInfo->get->if->rb->getString->printExtensions
Main#printExtensions(String, CertificateExtensions, PrintStream)::: main print extensions:::extnum->i1->exts->getAllExtensions->iterator->i2->exts->getUnparseableExtensions->values->iterator->while->i1->hasNext->i2->hasNext->ext->i1->hasNext->i1->next->i2->next->if->out->println->out->println->out->println->out->print->if->ext->getClass->v->ext->getExtensionValue->if->out->rb->getString->println->else->new->sun.security.util.HexDumpEncoder->ext->getExtensionValue->encodeBuffer->out->println->out->println
Main#getSigner(Certificate, KeyStore):::Locates a signer for a given certificate from a given keystore and returns the signer's certificate.:::if->ks->getCertificateAlias->return->new->Pair<>->for->aliases->ks->aliases->aliases->hasMoreElements->return
Main#getX500Name():::Gets an X.500 name suitable for inclusion in a certification request.:::in->new->InputStreamReader->new->BufferedReader->commonName->organizationalUnit->organization->city->state->country->name->userInput->maxRetry->do->if->throw->rb->getString->new->RuntimeException->rb->getString->inputString->rb->getString->inputString->rb->getString->inputString->rb->getString->inputString->rb->getString->inputString->rb->getString->inputString->new->X500Name->form->rb->getString->new->MessageFormat->source->form->format->rb->getString->inputString->while->collator->rb->getString->compare->collator->rb->getString->compare->println->return
Main#inputString(BufferedReader, String, String)::: main input string:::println->form->rb->getString->new->MessageFormat->source->form->format->print->flush->value->in->readLine->if->collator->compare->return
Main#dumpCert(Certificate, PrintStream):::Writes an X.509 certificate in base64 or binary encoding to an output stream.:::if->out->println->out->Base64->getMimeEncoder->cert->getEncoded->encodeToString->println->out->println->else->out->cert->getEncoded->write
Main#byte2hex(byte, StringBuffer):::Converts a byte to hex digit and writes to the supplied buffer:::hexChars->high->low->buf->append->buf->append
Main#toHexString(byte[]):::Converts a byte array to hex string:::buf->new->StringBuffer->len->for->i->return->buf->toString
Main#recoverKey(String, char[], char[]):::Recovers (private) key associated with given alias.:::key->if->KeyStoreUtil->isWindowsKeyStore->keyStore->getKey->return->Pair->of->if->keyStore->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->if->keyStore->entryInstanceOf->keyStore->entryInstanceOf->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->if->try->keyStore->getKey->passwords->add->catch->if->getKeyPasswd->keyStore->getKey->else->throw->finally->else->keyStore->getKey->return->Pair->of
Main#recoverEntry(KeyStore, String, char[], char[]):::Recovers entry associated with given alias.:::if->ks->containsAlias->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->pp->entry->try->ks->getEntry->catch->if->P11KEYSTORE->ks->getType->equalsIgnoreCase->KeyStoreUtil->ks->getType->isWindowsKeyStore->throw->if->new->PasswordProtection->ks->getEntry->else->try->new->PasswordProtection->ks->getEntry->catch->if->P12KEYSTORE->ks->getType->equalsIgnoreCase->throw->else->getKeyPasswd->new->PasswordProtection->ks->getEntry->finally->finally->return->Pair->of
Main#getCertFingerPrint(String, Certificate):::Gets the requested finger print of the certificate.:::encCertInfo->cert->getEncoded->md->MessageDigest->getInstance->digest->md->digest->return->toHexString
Main#printNoIntegrityWarning():::Prints warning about missing integrity check.:::println->rb->getString->println->rb->getString->println->rb->getString->println->println
Main#validateReply(String, Certificate, Certificate[]):::Validates chain in certification reply, and returns the ordered elements of the chain (with user certificate first, and root certificate last in the array).:::rb->getString->checkWeak->i->userPubKey->userCert->getPublicKey->nodup->Arrays->asList->new->HashSet<>->nodup->nodup->size->new->CertificateArr->toArray->for->if->form->rb->getString->new->MessageFormat->source->throw->form->format->new->Exception->tmpCert->thisCert->for->if->return->topCert->fromKeyStore->root->getSigner->if->getSigner->if->println->rb->getString->println->printX509Cert->println->rb->getString->print->printWeakWarnings->reply->rb->getString->getYesNoReply->if->equals->return->else->if->tmpCerts->new->CertificateArr->System->arraycopy->String->rb->getString->format->checkWeak->return
Main#establishCertChain(Certificate, Certificate):::Establishes a certificate chain (using trusted certificates in the keystore and cacerts), starting with the reply (certToVerify) and ending at a self-signed certificate found in the keystore.:::if->origPubKey->userCert->getPublicKey->replyPubKey->certToVerify->getPublicKey->if->origPubKey->equals->throw->rb->getString->new->Exception->if->certToVerify->equals->throw->rb->getString->new->Exception->certs->if->keyStore->size->new->Hashtable<>->keystorecerts2Hashtable->if->if->caks->size->if->new->Hashtable<>->keystorecerts2Hashtable->chain->new->Vector<>->if->rb->getString->new->Pair<>->buildChain->foreach->checkWeak->newChain->chain->size->new->CertificateArr->j->for->i->chain->size->return->else->throw->rb->getString->new->Exception
Main#buildChain(Pair, Vector>, Hashtable>>):::Recursively tries to establish chain from pool of certs starting from certToVerify until a self-signed cert is found, and fill the certs found into chain:::if->KeyStoreUtil->isSelfSigned->chain->addElement->return->issuer->getIssuerDN->vec->certs->get->if->return->for->issuerCerts->vec->elements->issuerCerts->hasMoreElements->return
Main#getYesNoReply(String):::Prompts user for yes/no decision.:::reply->maxRetry->do->if->throw->rb->getString->new->RuntimeException->print->flush->new->InputStreamReader->new->BufferedReader->readLine->if->collator->compare->collator->rb->getString->compare->collator->rb->getString->compare->else->if->collator->rb->getString->compare->collator->rb->getString->compare->else->rb->getString->println->while->return
Main#keystorecerts2Hashtable(KeyStore, Hashtable>>):::Stores the (leaf) certificates of a keystore in a hashtable:::for->aliases->ks->aliases->aliases->hasMoreElements
Main#getStartDate(String):::Returns the issue time that's specified the -startdate option:::c->new->GregorianCalendar->if->ioe->rb->getString->new->IOException->len->s->length->if->throw->if->s->charAt->s->charAt->start->while->sign->switch->s->charAt->break->break->throw->i->for->if->throw->number->Integer->s->substring->parseInt->if->throw->unit->switch->s->charAt->break->break->break->break->break->break->throw->c->add->else->date->time->if->s->substring->s->substring->if->s->charAt->throw->else->if->else->if->else->throw->if->if->date->matches->c->Integer->date->substring->valueOf->Integer->date->substring->valueOf->Integer->date->substring->valueOf->set->else->throw->if->if->time->matches->c->Integer->time->substring->valueOf->set->c->Integer->time->substring->valueOf->set->c->Integer->time->substring->valueOf->set->c->set->else->throw->return->c->getTime
Main#oneOf(String, String...):::Match a command (may be abbreviated) with a command set.:::match->new->intArr->nmatch->experiment->for->i->if->return->else->if->return->else->if->return->sb->new->StringBuilder->form->rb->getString->new->MessageFormat->source->sb->form->format->append->sb->append->for->i->throw->sb->toString->new->Exception
Main#createGeneralName(String, String):::Create a GeneralName object from known types:::gn->p->oneOf->if->throw->rb->getString->new->Exception->switch->new->RFC822Name->break->new->URIName->break->new->DNSName->break->new->IPAddressName->break->new->OIDName->break->return->new->GeneralName
Main#findOidForExtName(String)::: main find oid for ext name:::switch->oneOf->return->return->return->return->return->return->return->return->return->new->ObjectIdentifier
Main#setExt(CertificateExtensions, Extension)::: main set ext:::result->ex->getId->set
Main#createV3Extensions(CertificateExtensions, CertificateExtensions, List, PublicKey, PublicKey):::Create X509v3 extensions from a string representation:::if->throw->new->Exception->result->new->CertificateExtensions->if->foreach->existingEx->getAllExtensions->setExt->try->if->request2->new->CertificateExtensions->foreach->requestedEx->getAllExtensions->request2->ex->getId->set->foreach->if->extstr->toLowerCase->startsWith->list->Arrays->extstr->toLowerCase->substring->split->asList->if->list->contains->foreach->request2->getAllExtensions->setExt->foreach->if->item->equals->continue->add->action->type->if->item->startsWith->item->substring->else->colonpos->item->indexOf->if->item->substring->item->substring->oneOf->if->throw->rb->getString->new->Exception->else->n->findOidForExtName->toString->if->e->request2->get->if->e->isCritical->e->isCritical->Extension->e->getExtensionId->e->isCritical->e->getExtensionValue->newExtension->setExt->else->result->delete->break->foreach->name->value->isCritical->eqpos->extstr->indexOf->if->extstr->substring->extstr->substring->else->colonpos->name->indexOf->if->if->name->substring->oneOf->name->substring->if->name->equalsIgnoreCase->continue->exttype->oneOf->switch->pathLen->isCA->if->else->try->Integer->parseInt->catch->foreach->value->split->nv->part->split->if->throw->rb->getString->new->Exception->else->if->equalsIgnoreCase->Boolean->parseBoolean->else->if->equalsIgnoreCase->Integer->parseInt->else->throw->rb->getString->new->Exception->finally->new->BasicConstraintsExtension->setExt->break->if->ok->new->booleanArr->foreach->value->split->p->oneOf->if->throw->rb->getString->new->Exception->if->kue->new->KeyUsageExtension->Extension->kue->getExtensionId->kue->getExtensionValue->newExtension->setExt->else->throw->rb->getString->new->Exception->break->if->v->new->Vector<>->foreach->value->split->p->oneOf->if->try->v->new->ObjectIdentifier->add->catch->throw->rb->getString->new->Exception->finally->else->if->v->new->ObjectIdentifier->add->else->v->new->ObjectIdentifier->add->new->ExtendedKeyUsageExtension->setExt->else->throw->rb->getString->new->Exception->break->if->ps->value->split->gnames->new->GeneralNames->foreach->item->indexOf->if->throw->new->Exception->t->item->substring->v->item->substring->gnames->createGeneralName->add->if->new->SubjectAlternativeNameExtension->setExt->else->new->IssuerAlternativeNameExtension->setExt->else->throw->rb->getString->new->Exception->break->if->throw->rb->getString->new->Exception->if->accessDescriptions->new->ArrayList<>->ps->value->split->foreach->item->indexOf->colonpos2->item->indexOf->if->throw->rb->getString->new->Exception->m->item->substring->t->item->substring->v->item->substring->p->oneOf->oid->if->try->new->ObjectIdentifier->catch->throw->rb->getString->new->Exception->finally->else->new->ObjectIdentifier->accessDescriptions->createGeneralName->new->AccessDescription->add->if->new->SubjectInfoAccessExtension->setExt->else->new->AuthorityInfoAccessExtension->setExt->else->throw->rb->getString->new->Exception->break->if->ps->value->split->gnames->new->GeneralNames->foreach->item->indexOf->if->throw->new->Exception->t->item->substring->v->item->substring->gnames->createGeneralName->add->Collections->new->DistributionPoint->singletonList->new->CRLDistributionPointsExtension->setExt->else->throw->rb->getString->new->Exception->break->oid->new->ObjectIdentifier->data->if->value->length->new->byteArr->pos->foreach->value->toCharArray->hex->if->else->if->else->if->else->continue->if->else->if->throw->rb->getString->new->Exception->Arrays->copyOf->else->new->byteArr->new->DerValue->toByteArray->new->Extension->setExt->break->throw->rb->getString->new->Exception->new->KeyIdentifier->getIdentifier->new->SubjectKeyIdentifierExtension->setExt->if->pkey->equals->new->KeyIdentifier->new->AuthorityKeyIdentifierExtension->setExt->catch->throw->new->RuntimeException->finally->return
Main#isTrustedCert(Certificate)::: main is trusted cert:::if->caks->getCertificateAlias->return->else->inKS->keyStore->getCertificateAlias->return->keyStore->isCertificateEntry
Main#checkWeak(String, String, Key)::: main check weak:::if->DISABLED_CHECK->permits->weakWarnings->String->rb->getString->format->add->if->DISABLED_CHECK->permits->weakWarnings->String->rb->getString->String->rb->getString->KeyUtil->getKeySize->key->getAlgorithm->format->format->add
Main#checkWeak(String, Certificate[])::: main check weak:::for->i
Main#checkWeak(String, Certificate)::: main check weak:::if->xc->sigAlg->isTrustedCert->xc->getSigAlgName->xc->getPublicKey->checkWeak
Main#checkWeak(String, PKCS10)::: main check weak:::p10->getSigAlg->p10->getSubjectPublicKeyInfo->checkWeak
Main#checkWeak(String, CRL, Key)::: main check weak:::if->impl->impl->getSigAlgName->checkWeak
Main#printWeakWarnings(boolean)::: main print weak warnings:::if->weakWarnings->isEmpty->println->foreach->println->if->println->weakWarnings->clear
Main#usage():::Prints the usage of this tool.:::if->rb->getString->println->println->rb->getString->println->println->rb->getString->println->println->left->new->StringArr->right->new->StringArr->lenLeft->for->j->for->j->println->rb->getString->println->else->rb->getString->println->println->rb->getString->println->println->foreach->Command->values->if->break->rb->getString->printf->println->rb->getString->println->rb->getString->println
Main#tinyHelp()::: main tiny help:::usage->if->throw->new->RuntimeException->else->System->exit
Main#errorNeedArgument(String)::: main error need argument:::source->rb->getString->new->MessageFormat->format->println->tinyHelp
Main#getPass(String, String)::: main get pass:::output->KeyStoreUtil->getPassWithModifier->if->return->tinyHelp->return
Pair#toString()::: pair to string:::return
Pair#equals(Object)::: pair equals:::return->Objects->equals->Objects->equals
Pair#hashCode()::: pair hash code:::if->return->snd->hashCode->else->if->return->fst->hashCode->else->return->fst->hashCode->snd->hashCode
Pair#of(A, B)::: pair of:::return->new->Pair<>
Resources#getContents():::Returns the contents of this ResourceBundle:::return
Resources_ja#getContents():::Returns the contents of this ResourceBundle:::return
Resources_zh_CN#getContents():::Returns the contents of this ResourceBundle:::return

HotSpotZapRegistersPhase#run(TargetDescription, LIRGenerationResult, PostAllocationOptimizationContext)::: hot spot zap registers phase run:::stub->getStub->zapRegisters->stub->preservesRegisters->zapStack->foreach->lirGenRes->getCallingConvention->getArguments->if->isStackSlot->break->if->lir->lirGenRes->getLIR->processLIR
HotSpotZapRegistersPhase#processLIR(DiagnosticLIRGeneratorTool, HotSpotLIRGenerationResult, LIR, boolean, boolean)::: hot spot zap registers phase process r:::buffer->new->LIRInsertionBuffer->foreach->lir->codeEmittingOrder->if->processBlock
HotSpotZapRegistersPhase#processBlock(DiagnosticLIRGeneratorTool, HotSpotLIRGenerationResult, LIR, LIRInsertionBuffer, AbstractBlockBase, boolean, boolean)::: hot spot zap registers phase process block:::debug->lir->getDebug->try->indent->debug->logAndIndent->instructions->lir->getLIRforBlock->buffer->init->for->index->instructions->size->buffer->finish->catch->finally
HotSpotZapRegistersPhase#getLIRState(LIRInstruction):::Returns the LIRFrameState of an instruction.:::lirState->inst->forEachState->return
VerifyMaxRegisterSizePhase#run(TargetDescription, LIRGenerationResult, PostAllocationOptimizationContext)::: verify max register size phase run:::lir->lirGenRes->getLIR->foreach->lir->getControlFlowGraph->getBlocks->verifyBlock
VerifyMaxRegisterSizePhase#verifyBlock(LIR, AbstractBlockBase)::: verify max register size phase verify block:::foreach->lir->getLIRforBlock->verifyInstruction
VerifyMaxRegisterSizePhase#verifyInstruction(LIRInstruction)::: verify max register size phase verify instruction:::inst->this->verifyOperands->visitEachInput->inst->this->verifyOperands->visitEachOutput->inst->this->verifyOperands->visitEachAlive->inst->this->verifyOperands->visitEachTemp
VerifyMaxRegisterSizePhase#verifyOperands(LIRInstruction, Value, OperandMode, EnumSet)::: verify max register size phase verify operands:::if->isRegister

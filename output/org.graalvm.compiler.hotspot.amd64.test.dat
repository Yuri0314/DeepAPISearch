org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest.CodeGenerator#generateCode(AMD64Assembler)->void::: code generator generate code
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test1snippet()->void::: d64 hot spot frame omission test test1snippet
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test1()->void::: d64 hot spot frame omission test test1
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test2snippet(int)->int::: d64 hot spot frame omission test test2snippet
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test2()->void::: d64 hot spot frame omission test test2
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test3snippet(long)->long::: d64 hot spot frame omission test test3snippet
org.graalvm.compiler.hotspot.amd64.test.AMD64HotSpotFrameOmissionTest#test3()->void::: d64 hot spot frame omission test test3
org.graalvm.compiler.hotspot.amd64.test.ArrayAccessInLoopToAddressTest#positiveInductionVariable(short[])->int::: array access in loop to address test positive induction variable
org.graalvm.compiler.hotspot.amd64.test.ArrayAccessInLoopToAddressTest#testPositiveInductionVariable()->void::: array access in loop to address test test positive induction variable
org.graalvm.compiler.hotspot.amd64.test.ArrayAccessInLoopToAddressTest#negativeInductionVariable(short[])->int::: array access in loop to address test negative induction variable
org.graalvm.compiler.hotspot.amd64.test.ArrayAccessInLoopToAddressTest#testNegativeInductionVariable()->void::: array access in loop to address test test negative induction variable
org.graalvm.compiler.hotspot.amd64.test.ArrayAccessInLoopToAddressTest#getSpeculationLog()->SpeculationLog::: array access in loop to address test get speculation log
org.graalvm.compiler.hotspot.amd64.test.BinaryMathStubTest#data()->List::: binary math stub test data
org.graalvm.compiler.hotspot.amd64.test.BinaryMathStubTest#checkAMD64()->void::: binary math stub test check d64
org.graalvm.compiler.hotspot.amd64.test.BinaryMathStubTest#pow(double, double)->double::: binary math stub test pow
org.graalvm.compiler.hotspot.amd64.test.BinaryMathStubTest#testStub()->void::: binary math stub test test stub
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#andni(int, int)->int::: bmi andn andni
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#andnl(long, long)->long::: bmi andn andnl
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#test1()->void::: bmi andn test1
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#test2()->void::: bmi andn test2
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#test3()->void::: bmi andn test3
org.graalvm.compiler.hotspot.amd64.test.BmiAndn#test4()->void::: bmi andn test4
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#blsii(int)->int::: bmi blsi blsii
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#blsil(long)->long::: bmi blsi blsil
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#test1()->void::: bmi blsi test1
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#test2()->void::: bmi blsi test2
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#test3()->void::: bmi blsi test3
org.graalvm.compiler.hotspot.amd64.test.BmiBlsi#test4()->void::: bmi blsi test4
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#blsmski(int)->int::: bmi blsmsk blsmski
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#blsmskl(long)->long::: bmi blsmsk blsmskl
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#test1()->void::: bmi blsmsk test1
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#test2()->void::: bmi blsmsk test2
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#test3()->void::: bmi blsmsk test3
org.graalvm.compiler.hotspot.amd64.test.BmiBlsmsk#test4()->void::: bmi blsmsk test4
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#blsri(int)->int::: bmi blsr blsri
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#blsrl(long)->long::: bmi blsr blsrl
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#test1()->void::: bmi blsr test1
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#test2()->void::: bmi blsr test2
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#test3()->void::: bmi blsr test3
org.graalvm.compiler.hotspot.amd64.test.BmiBlsr#test4()->void::: bmi blsr test4
org.graalvm.compiler.hotspot.amd64.test.BmiCompilerTest#checkAMD64()->void::: bmi compiler test check d64
org.graalvm.compiler.hotspot.amd64.test.BmiCompilerTest#verifyPositive(String, byte[], byte[])->boolean::: bmi compiler test verify positive
org.graalvm.compiler.hotspot.amd64.test.BmiCompilerTest#countCpuInstructions(byte[], byte[], byte[])->int::: bmi compiler test count cpu instructions
org.graalvm.compiler.hotspot.amd64.test.CompressedNullCheckTest#testSnippet(Container)->void::: compressed null check test test snippet
org.graalvm.compiler.hotspot.amd64.test.CompressedNullCheckTest#implicit()->void::: compressed null check test implicit
org.graalvm.compiler.hotspot.amd64.test.CompressedNullCheckTest#implicitNull()->void::: compressed null check test implicit null
org.graalvm.compiler.hotspot.amd64.test.CompressedNullCheckTest#explicit()->void::: compressed null check test explicit
org.graalvm.compiler.hotspot.amd64.test.CompressedNullCheckTest#explicitNull()->void::: compressed null check test explicit null
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#checkAMD64()->void::: data patch in constants test check d64
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#oopSnippet()->Object::: data patch in constants test oop snippet
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#oopTest()->void::: data patch in constants test oop test
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#narrowOopSnippet()->Object::: data patch in constants test narrow oop snippet
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#narrowOopTest()->void::: data patch in constants test narrow oop test
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#compareSnippet()->Object::: data patch in constants test compare snippet
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#compareTest()->void::: data patch in constants test compare test
org.graalvm.compiler.hotspot.amd64.test.DataPatchInConstantsTest#registerInvocationPlugins(InvocationPlugins)->void::: data patch in constants test register invocation plugins
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#checkAMD64()->void::: stub test check d64
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#loadAVXConstant(LIRTestSpecification)->Object::: stub test load constant
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#compareAVXRegister(LIRTestSpecification, Object, Object)->int::: stub test compare register
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)->GraphBuilderConfiguration::: stub test edit graph builder configuration
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#testStub()->int::: stub test test stub
org.graalvm.compiler.hotspot.amd64.test.StubAVXTest#test()->void::: stub test test
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#data()->List::: unary math stub test data
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#checkAMD64()->void::: unary math stub test check d64
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#sin(double)->double::: unary math stub test sin
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#cos(double)->double::: unary math stub test cos
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#tan(double)->double::: unary math stub test tan
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#exp(double)->double::: unary math stub test exp
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#log(double)->double::: unary math stub test log
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#log10(double)->double::: unary math stub test log10
org.graalvm.compiler.hotspot.amd64.test.UnaryMathStubTest#testStub()->void::: unary math stub test test stub

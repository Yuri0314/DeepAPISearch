AMD64HotSpotFrameOmissionTest.CodeGenerator#generateCode(AMD64Assembler)::: code generator generate code:::
AMD64HotSpotFrameOmissionTest#test1snippet()::: d64 hot spot frame omission test test1snippet:::return
AMD64HotSpotFrameOmissionTest#test1()::: d64 hot spot frame omission test test1:::new->CodeGenerator->testHelper
AMD64HotSpotFrameOmissionTest#test2snippet(int)::: d64 hot spot frame omission test test2snippet:::return
AMD64HotSpotFrameOmissionTest#test2()::: d64 hot spot frame omission test test2:::new->CodeGenerator->testHelper
AMD64HotSpotFrameOmissionTest#test3snippet(long)::: d64 hot spot frame omission test test3snippet:::return
AMD64HotSpotFrameOmissionTest#test3()::: d64 hot spot frame omission test test3:::new->CodeGenerator->testHelper
AMD64HotSpotFrameOmissionTest#testHelper(String, CodeGenerator)::: d64 hot spot frame omission test test helper:::javaMethod->getResolvedJavaMethod->installedCode->getCode->target->getCodeCache->getTarget->asm->new->AMD64Assembler->gen->generateCode->expectedCode->asm->close->actualCode->Arrays->installedCode->getCode->copyOf->Assert->assertArrayEquals
AMD64HotSpotFrameOmissionTest#getArgumentRegister(int, JavaKind)::: d64 hot spot frame omission test get argument register:::regs->getCodeCache->getRegisterConfig->getCallingConventionRegisters->return->regs->get
ArrayAccessInLoopToAddressTest#positiveInductionVariable(short[])::: array access in loop to address test positive induction variable:::sum->for->i->return
ArrayAccessInLoopToAddressTest#testPositiveInductionVariable()::: array access in loop to address test test positive induction variable:::new->shortArr->test
ArrayAccessInLoopToAddressTest#negativeInductionVariable(short[])::: array access in loop to address test negative induction variable:::sum->for->i->return
ArrayAccessInLoopToAddressTest#testNegativeInductionVariable()::: array access in loop to address test test negative induction variable:::new->shortArr->test
ArrayAccessInLoopToAddressTest#getSpeculationLog()::: array access in loop to address test get speculation log:::return->new->HotSpotSpeculationLog
BinaryMathStubTest#data()::: binary math stub test data:::ret->new->ArrayList<>->ret->new->ObjectArr->add->return
BinaryMathStubTest#checkAMD64()::: binary math stub test check d64:::arch->Graal->getRequiredCapability->getHostBackend->getTarget->assumeTrue
BinaryMathStubTest#pow(double, double)::: binary math stub test pow:::return->Math->pow
BinaryMathStubTest#testStub()::: binary math stub test test stub:::foreach->foreach->test
BmiAndn#andni(int, int)::: bmi andn andni:::return
BmiAndn#andnl(long, long)::: bmi andn andnl:::return
BmiAndn#test1()::: bmi andn test1:::Assert->verifyPositive->assertTrue
BmiAndn#test2()::: bmi andn test2:::Assert->verifyPositive->assertTrue
BmiAndn#test3()::: bmi andn test3:::n1->n2->test
BmiAndn#test4()::: bmi andn test4:::n1->n2->test
BmiBlsi#blsii(int)::: bmi blsi blsii:::return
BmiBlsi#blsil(long)::: bmi blsi blsil:::return
BmiBlsi#test1()::: bmi blsi test1:::Assert->verifyPositive->assertTrue
BmiBlsi#test2()::: bmi blsi test2:::Assert->verifyPositive->assertTrue
BmiBlsi#test3()::: bmi blsi test3:::n1->test
BmiBlsi#test4()::: bmi blsi test4:::n1->test
BmiBlsmsk#blsmski(int)::: bmi blsmsk blsmski:::return
BmiBlsmsk#blsmskl(long)::: bmi blsmsk blsmskl:::return
BmiBlsmsk#test1()::: bmi blsmsk test1:::Assert->verifyPositive->assertTrue
BmiBlsmsk#test2()::: bmi blsmsk test2:::Assert->verifyPositive->assertTrue
BmiBlsmsk#test3()::: bmi blsmsk test3:::n1->test
BmiBlsmsk#test4()::: bmi blsmsk test4:::n1->test
BmiBlsr#blsri(int)::: bmi blsr blsri:::return
BmiBlsr#blsrl(long)::: bmi blsr blsrl:::return
BmiBlsr#test1()::: bmi blsr test1:::Assert->verifyPositive->assertTrue
BmiBlsr#test2()::: bmi blsr test2:::Assert->verifyPositive->assertTrue
BmiBlsr#test3()::: bmi blsr test3:::n1->test
BmiBlsr#test4()::: bmi blsr test4:::n1->test
BmiCompilerTest#checkAMD64()::: bmi compiler test check d64:::arch->Graal->getRequiredCapability->getHostBackend->getTarget->assumeTrue->getFeatures->contains->assumeTrue
BmiCompilerTest#verifyPositive(String, byte[], byte[])::: bmi compiler test verify positive:::method->getResolvedJavaMethod->graph->parseForCompile->c->compile->targetCode->c->getTargetCode->return->countCpuInstructions
BmiCompilerTest#countCpuInstructions(byte[], byte[], byte[])::: bmi compiler test count cpu instructions:::count->patternSize->Math->min->found->Assert->assertTrue->for->i->n->return
CompressedNullCheckTest#testSnippet(Container)::: compressed null check test test snippet:::intValue
CompressedNullCheckTest#testImplicit(Integer)::: compressed null check test test implicit:::Assume->runtime->getVMConfig->assumeTrue->c->new->Container->method->getResolvedJavaMethod->expect->executeExpected->method->reprofile->options->getInitialOptions->new->OptionValues->actual->executeActual->assertEquals
CompressedNullCheckTest#testExplicit(Integer)::: compressed null check test test explicit:::Assume->runtime->getVMConfig->assumeTrue->c->new->Container->getInitialOptions->new->OptionValues->test
CompressedNullCheckTest#implicit()::: compressed null check test implicit:::Integer->valueOf->testImplicit
CompressedNullCheckTest#implicitNull()::: compressed null check test implicit null:::testImplicit
CompressedNullCheckTest#explicit()::: compressed null check test explicit:::Integer->valueOf->testExplicit
CompressedNullCheckTest#explicitNull()::: compressed null check test explicit null:::testExplicit
DataPatchInConstantsTest#checkAMD64()::: data patch in constants test check d64:::Assume->getTarget->assumeTrue
DataPatchInConstantsTest#loadThroughPatch(Object)::: data patch in constants test load through patch:::return
DataPatchInConstantsTest#oopSnippet()::: data patch in constants test oop snippet:::patch->loadThroughPatch->if->return->System->gc->loadThroughPatch->if->return->return
DataPatchInConstantsTest#oopTest()::: data patch in constants test oop test:::test
DataPatchInConstantsTest#loadThroughCompressedPatch(Object)::: data patch in constants test load through compressed patch:::return
DataPatchInConstantsTest#narrowOopSnippet()::: data patch in constants test narrow oop snippet:::patch->loadThroughCompressedPatch->if->return->System->gc->loadThroughCompressedPatch->if->return->return
DataPatchInConstantsTest#narrowOopTest()::: data patch in constants test narrow oop test:::Assume->runtime->getVMConfig->assumeTrue->test
DataPatchInConstantsTest#compareSnippet()::: data patch in constants test compare snippet:::uncompressed->loadThroughPatch->compressed->loadThroughCompressedPatch->if->return->if->return->if->return->return
DataPatchInConstantsTest#compareTest()::: data patch in constants test compare test:::Assume->runtime->getVMConfig->assumeTrue->test
DataPatchInConstantsTest#registerInvocationPlugins(InvocationPlugins)::: data patch in constants test register invocation plugins:::r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->super->registerInvocationPlugins
DataPatchInConstantsTest.LoadThroughPatchNode#generate(NodeLIRBuilderTool)::: load through patch node generate:::gen->generator->getLIRGeneratorTool->ret->gen->gen->stamp->getLIRKind->newVariable->gen->input->asConstant->stamp->new->LoadThroughPatchOp->append->generator->setResult
DataPatchInConstantsTest.LoadThroughPatchOp#emitCode(CompilationResultBuilder)::: load through patch op emit code:::address->crb->recordDataReferenceInCode->asm->if->asm->asRegister->movl->else->asm->asRegister->movq
StubAVXTest#checkAMD64()::: stub test check d64:::Assume->getTarget->assumeTrue->Assume->getTarget->getFeatures->contains->assumeTrue->if->getBackend->backend->getBackend->Assume->backend->getRuntime->getVMConfig->assumeTrue
StubAVXTest.LoadAVXConstant#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: load constant emit code:::masm->ValueUtil->asRegister->crb->recordDataReferenceInCode->vmovdqu
StubAVXTest#loadAVXConstant(LIRTestSpecification)::: stub test load constant:::return
StubAVXTest.CompareAVXRegister#getRXB(Register, Register)::: compare register get b:::rxb->return
StubAVXTest.CompareAVXRegister#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: compare register emit code:::res->ValueUtil->asRegister->x->ValueUtil->asRegister->y->ValueUtil->asRegister->tmp->ValueUtil->asRegister->masm->emitByte->masm->getRXB->emitByte->masm->emitByte->masm->emitByte->masm->emitByte->masm->emitByte->masm->emitByte->masm->getRXB->emitByte->masm->emitByte->masm->emitByte->masm->emitByte
StubAVXTest.TestStub#testStub()::: test stub test stub:::
StubAVXTest.TestStub#registerSnippet()::: test stub register snippet:::
StubAVXTest.TestStub#buildInitialGraph(DebugContext, CompilationIdentifier, Object[])::: test stub build initial graph:::d->providers->getReplacements->metaAccess->d->getProviders->getMetaAccess->bytecodes->ClassLoader->getSystemClassLoader->new->ClassfileBytecodeProvider->return->d->makeGraph
StubAVXTest#compareAVXRegister(LIRTestSpecification, Object, Object)::: stub test compare register:::return
StubAVXTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)::: stub test edit graph builder configuration:::invocationPlugins->conf->getPlugins->getInvocationPlugins->r->new->InvocationPlugins.Registration->r->new->InvocationPlugin->register0->return->super->editGraphBuilderConfiguration
StubAVXTest#testStub()::: stub test test stub:::preStub->loadAVXConstant->TestStub->testStub->postStub->loadAVXConstant->return->compareAVXRegister
StubAVXTest#test()::: stub test test:::providers->getProviders->foreignCalls->providers->getForeignCalls->linkage->foreignCalls->registerStubCall->linkage->getInitialOptions->new->TestStub->setCompiledStub->runTest
UnaryMathStubTest#data()::: unary math stub test data:::ret->new->ArrayList<>->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
UnaryMathStubTest#checkAMD64()::: unary math stub test check d64:::arch->Graal->getRequiredCapability->getHostBackend->getTarget->assumeTrue
UnaryMathStubTest#sin(double)::: unary math stub test sin:::return->Math->sin
UnaryMathStubTest#cos(double)::: unary math stub test cos:::return->Math->cos
UnaryMathStubTest#tan(double)::: unary math stub test tan:::return->Math->tan
UnaryMathStubTest#exp(double)::: unary math stub test exp:::return->Math->exp
UnaryMathStubTest#log(double)::: unary math stub test log:::return->Math->log
UnaryMathStubTest#log10(double)::: unary math stub test log10:::return->Math->log10
UnaryMathStubTest#testStub()::: unary math stub test test stub:::foreach->test

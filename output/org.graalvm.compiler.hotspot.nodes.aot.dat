org.graalvm.compiler.hotspot.nodes.aot.Plugin_EncodedSymbolNode_encode#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ encoded symbol node_encode execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_EncodedSymbolNode_encode#getSource()->Class::: plugin_ encoded symbol node_encode get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_EncodedSymbolNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ encoded symbol node register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_InitializeKlassStubCall_initializeKlass#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ initialize klass stub call_initialize klass execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_InitializeKlassStubCall_initializeKlass#getSource()->Class::: plugin_ initialize klass stub call_initialize klass get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_InitializeKlassStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ initialize klass stub call register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly fixed node_load klass__0 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadKlass__0#getSource()->Class::: plugin_ load constant indirectly fixed node_load klass__0 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly fixed node_load klass__1 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadKlass__1#getSource()->Class::: plugin_ load constant indirectly fixed node_load klass__1 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadMethod#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly fixed node_load method execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadMethod#getSource()->Class::: plugin_ load constant indirectly fixed node_load method get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly fixed node_load object execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyFixedNode_loadObject#getSource()->Class::: plugin_ load constant indirectly fixed node_load object get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_LoadConstantIndirectlyFixedNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ load constant indirectly fixed node register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly node_load klass__0 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadKlass__0#getSource()->Class::: plugin_ load constant indirectly node_load klass__0 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly node_load klass__1 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadKlass__1#getSource()->Class::: plugin_ load constant indirectly node_load klass__1 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load constant indirectly node_load object execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadConstantIndirectlyNode_loadObject#getSource()->Class::: plugin_ load constant indirectly node_load object get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_LoadConstantIndirectlyNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ load constant indirectly node register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadMethodCountersIndirectlyNode_loadMethodCounters#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ load method counters indirectly node_load method counters execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_LoadMethodCountersIndirectlyNode_loadMethodCounters#getSource()->Class::: plugin_ load method counters indirectly node_load method counters get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_LoadMethodCountersIndirectlyNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ load method counters indirectly node register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ resolve constant stub call_resolve klass__0 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveKlass__0#getSource()->Class::: plugin_ resolve constant stub call_resolve klass__0 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ resolve constant stub call_resolve klass__1 execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveKlass__1#getSource()->Class::: plugin_ resolve constant stub call_resolve klass__1 get source
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ resolve constant stub call_resolve object execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveConstantStubCall_resolveObject#getSource()->Class::: plugin_ resolve constant stub call_resolve object get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_ResolveConstantStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ resolve constant stub call register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveDynamicStubCall_resolveInvoke#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ resolve dynamic stub call_resolve invoke execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveDynamicStubCall_resolveInvoke#getSource()->Class::: plugin_ resolve dynamic stub call_resolve invoke get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_ResolveDynamicStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ resolve dynamic stub call register plugins
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveMethodAndLoadCountersStubCall_resolveMethodAndLoadCounters#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ resolve method and load counters stub call_resolve method and load counters execute
org.graalvm.compiler.hotspot.nodes.aot.Plugin_ResolveMethodAndLoadCountersStubCall_resolveMethodAndLoadCounters#getSource()->Class::: plugin_ resolve method and load counters stub call_resolve method and load counters get source
org.graalvm.compiler.hotspot.nodes.aot.PluginFactory_ResolveMethodAndLoadCountersStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ resolve method and load counters stub call register plugins
org.graalvm.compiler.hotspot.nodes.aot.EncodedSymbolNode#canonical(CanonicalizerTool)->Node::: encoded symbol node canonical
org.graalvm.compiler.hotspot.nodes.aot.EncodedSymbolNode#encode(Object)->Word::: encoded symbol node encode
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassNode#lower(LoweringTool)->void::: initialize klass node lower
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassNode#value()->ValueNode::: initialize klass node value
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassNode#canDeoptimize()->boolean::: initialize klass node can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassNode#getLocationIdentity()->LocationIdentity::: initialize klass node get location identity
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#initializeKlass(KlassPointer, Word)->KlassPointer::: initialize klass stub call initialize klass
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#canonical(CanonicalizerTool)->Node::: initialize klass stub call canonical
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#generate(NodeLIRBuilderTool)->void::: initialize klass stub call generate
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#canDeoptimize()->boolean::: initialize klass stub call can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#getLocationIdentity()->LocationIdentity::: initialize klass stub call get location identity
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#stateBefore()->FrameState::: initialize klass stub call state before
org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall#setStateBefore(FrameState)->void::: initialize klass stub call set state before
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#canonical(CanonicalizerTool)->Node::: load constant indirectly fixed node canonical
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#generate(NodeLIRBuilderTool)->void::: load constant indirectly fixed node generate
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#loadKlass(KlassPointer, HotSpotConstantLoadAction)->KlassPointer::: load constant indirectly fixed node load klass
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#loadKlass(KlassPointer)->KlassPointer::: load constant indirectly fixed node load klass
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#loadMethod(MethodPointer)->MethodPointer::: load constant indirectly fixed node load method
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode#loadObject(Object)->Object::: load constant indirectly fixed node load object
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode#canonical(CanonicalizerTool)->Node::: load constant indirectly node canonical
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode#generate(NodeLIRBuilderTool)->void::: load constant indirectly node generate
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode#loadKlass(KlassPointer, HotSpotConstantLoadAction)->KlassPointer::: load constant indirectly node load klass
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode#loadKlass(KlassPointer)->KlassPointer::: load constant indirectly node load klass
org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode#loadObject(Object)->Object::: load constant indirectly node load object
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersIndirectlyNode#canonical(CanonicalizerTool)->Node::: load method counters indirectly node canonical
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersIndirectlyNode#generate(NodeLIRBuilderTool)->void::: load method counters indirectly node generate
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersIndirectlyNode#loadMethodCounters(MethodPointer)->MethodCountersPointer::: load method counters indirectly node load method counters
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersNode#getMethod()->ResolvedJavaMethod::: load method counters node get method
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersNode#getLoadMethodCountersNodes(StructuredGraph)->NodeIterable::: load method counters node get load method counters nodes
org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersNode#generate(NodeLIRBuilderTool)->void::: load method counters node generate
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantNode#lower(LoweringTool)->void::: resolve constant node lower
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantNode#value()->ValueNode::: resolve constant node value
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantNode#action()->HotSpotConstantLoadAction::: resolve constant node action
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantNode#canDeoptimize()->boolean::: resolve constant node can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall#resolveObject(Object, Object)->Object::: resolve constant stub call resolve object
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall#resolveKlass(KlassPointer, Word)->KlassPointer::: resolve constant stub call resolve klass
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall#resolveKlass(KlassPointer, Word, HotSpotConstantLoadAction)->KlassPointer::: resolve constant stub call resolve klass
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall#canonical(CanonicalizerTool)->Node::: resolve constant stub call canonical
org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall#generate(NodeLIRBuilderTool)->void::: resolve constant stub call generate
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicConstantNode#value()->ValueNode::: resolve dynamic constant node value
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicConstantNode#lower(LoweringTool)->void::: resolve dynamic constant node lower
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicConstantNode#canDeoptimize()->boolean::: resolve dynamic constant node can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicConstantNode#getLocationIdentity()->LocationIdentity::: resolve dynamic constant node get location identity
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#resolveInvoke(Object)->Object::: resolve dynamic stub call resolve invoke
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#canonical(CanonicalizerTool)->Node::: resolve dynamic stub call canonical
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#generate(NodeLIRBuilderTool)->void::: resolve dynamic stub call generate
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#canDeoptimize()->boolean::: resolve dynamic stub call can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#getLocationIdentity()->LocationIdentity::: resolve dynamic stub call get location identity
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#stateBefore()->FrameState::: resolve dynamic stub call state before
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#setStateBefore(FrameState)->void::: resolve dynamic stub call set state before
org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall#markDeleted()->void::: resolve dynamic stub call mark deleted
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersNode#lower(LoweringTool)->void::: resolve method and load counters node lower
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersNode#getMethod()->ResolvedJavaMethod::: resolve method and load counters node get method
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersNode#getHub()->ValueNode::: resolve method and load counters node get hub
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersNode#canDeoptimize()->boolean::: resolve method and load counters node can deoptimize
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersStubCall#resolveMethodAndLoadCounters(MethodPointer, KlassPointer, Word)->MethodCountersPointer::: resolve method and load counters stub call resolve method and load counters
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersStubCall#canonical(CanonicalizerTool)->Node::: resolve method and load counters stub call canonical
org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersStubCall#generate(NodeLIRBuilderTool)->void::: resolve method and load counters stub call generate

Plugin_EncodedSymbolNode_encode#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ encoded symbol node_encode execute:::arg0->arg1->node->new->org.graalvm.compiler.hotspot.nodes.aot.EncodedSymbolNode->b->addPush->return
Plugin_EncodedSymbolNode_encode#getSource()::: plugin_ encoded symbol node_encode get source:::return
PluginFactory_EncodedSymbolNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ encoded symbol node register plugins:::plugins->new->Plugin_EncodedSymbolNode_encode->register
Plugin_InitializeKlassStubCall_initializeKlass#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ initialize klass stub call_initialize klass execute:::arg0->arg1->node->new->org.graalvm.compiler.hotspot.nodes.aot.InitializeKlassStubCall->b->addPush->return
Plugin_InitializeKlassStubCall_initializeKlass#getSource()::: plugin_ initialize klass stub call_initialize klass get source:::return
PluginFactory_InitializeKlassStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ initialize klass stub call register plugins:::plugins->new->Plugin_InitializeKlassStubCall_initializeKlass->register
Plugin_LoadConstantIndirectlyFixedNode_loadKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly fixed node_load klass__0 execute:::arg0->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode->b->addPush->return
Plugin_LoadConstantIndirectlyFixedNode_loadKlass__0#getSource()::: plugin_ load constant indirectly fixed node_load klass__0 get source:::return
Plugin_LoadConstantIndirectlyFixedNode_loadKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly fixed node_load klass__1 execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode->b->addPush->return
Plugin_LoadConstantIndirectlyFixedNode_loadKlass__1#getSource()::: plugin_ load constant indirectly fixed node_load klass__1 get source:::return
Plugin_LoadConstantIndirectlyFixedNode_loadMethod#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly fixed node_load method execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode->b->addPush->return
Plugin_LoadConstantIndirectlyFixedNode_loadMethod#getSource()::: plugin_ load constant indirectly fixed node_load method get source:::return
Plugin_LoadConstantIndirectlyFixedNode_loadObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly fixed node_load object execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyFixedNode->b->addPush->return
Plugin_LoadConstantIndirectlyFixedNode_loadObject#getSource()::: plugin_ load constant indirectly fixed node_load object get source:::return
PluginFactory_LoadConstantIndirectlyFixedNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ load constant indirectly fixed node register plugins:::plugins->new->Plugin_LoadConstantIndirectlyFixedNode_loadKlass__0->register->plugins->new->Plugin_LoadConstantIndirectlyFixedNode_loadKlass__1->register->plugins->new->Plugin_LoadConstantIndirectlyFixedNode_loadMethod->register->plugins->new->Plugin_LoadConstantIndirectlyFixedNode_loadObject->register
Plugin_LoadConstantIndirectlyNode_loadKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly node_load klass__0 execute:::arg0->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode->b->addPush->return
Plugin_LoadConstantIndirectlyNode_loadKlass__0#getSource()::: plugin_ load constant indirectly node_load klass__0 get source:::return
Plugin_LoadConstantIndirectlyNode_loadKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly node_load klass__1 execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode->b->addPush->return
Plugin_LoadConstantIndirectlyNode_loadKlass__1#getSource()::: plugin_ load constant indirectly node_load klass__1 get source:::return
Plugin_LoadConstantIndirectlyNode_loadObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load constant indirectly node_load object execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadConstantIndirectlyNode->b->addPush->return
Plugin_LoadConstantIndirectlyNode_loadObject#getSource()::: plugin_ load constant indirectly node_load object get source:::return
PluginFactory_LoadConstantIndirectlyNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ load constant indirectly node register plugins:::plugins->new->Plugin_LoadConstantIndirectlyNode_loadKlass__0->register->plugins->new->Plugin_LoadConstantIndirectlyNode_loadKlass__1->register->plugins->new->Plugin_LoadConstantIndirectlyNode_loadObject->register
Plugin_LoadMethodCountersIndirectlyNode_loadMethodCounters#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ load method counters indirectly node_load method counters execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.LoadMethodCountersIndirectlyNode->b->addPush->return
Plugin_LoadMethodCountersIndirectlyNode_loadMethodCounters#getSource()::: plugin_ load method counters indirectly node_load method counters get source:::return
PluginFactory_LoadMethodCountersIndirectlyNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ load method counters indirectly node register plugins:::plugins->new->Plugin_LoadMethodCountersIndirectlyNode_loadMethodCounters->register
Plugin_ResolveConstantStubCall_resolveKlass__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ resolve constant stub call_resolve klass__0 execute:::arg0->arg1->node->new->org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall->b->addPush->return
Plugin_ResolveConstantStubCall_resolveKlass__0#getSource()::: plugin_ resolve constant stub call_resolve klass__0 get source:::return
Plugin_ResolveConstantStubCall_resolveKlass__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ resolve constant stub call_resolve klass__1 execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall->b->addPush->return
Plugin_ResolveConstantStubCall_resolveKlass__1#getSource()::: plugin_ resolve constant stub call_resolve klass__1 get source:::return
Plugin_ResolveConstantStubCall_resolveObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ resolve constant stub call_resolve object execute:::arg0->arg1->node->new->org.graalvm.compiler.hotspot.nodes.aot.ResolveConstantStubCall->b->addPush->return
Plugin_ResolveConstantStubCall_resolveObject#getSource()::: plugin_ resolve constant stub call_resolve object get source:::return
PluginFactory_ResolveConstantStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ resolve constant stub call register plugins:::plugins->new->Plugin_ResolveConstantStubCall_resolveKlass__0->register->plugins->new->Plugin_ResolveConstantStubCall_resolveKlass__1->register->plugins->new->Plugin_ResolveConstantStubCall_resolveObject->register
Plugin_ResolveDynamicStubCall_resolveInvoke#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ resolve dynamic stub call_resolve invoke execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.aot.ResolveDynamicStubCall->b->addPush->return
Plugin_ResolveDynamicStubCall_resolveInvoke#getSource()::: plugin_ resolve dynamic stub call_resolve invoke get source:::return
PluginFactory_ResolveDynamicStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ resolve dynamic stub call register plugins:::plugins->new->Plugin_ResolveDynamicStubCall_resolveInvoke->register
Plugin_ResolveMethodAndLoadCountersStubCall_resolveMethodAndLoadCounters#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ resolve method and load counters stub call_resolve method and load counters execute:::arg0->arg1->arg2->node->new->org.graalvm.compiler.hotspot.nodes.aot.ResolveMethodAndLoadCountersStubCall->b->addPush->return
Plugin_ResolveMethodAndLoadCountersStubCall_resolveMethodAndLoadCounters#getSource()::: plugin_ resolve method and load counters stub call_resolve method and load counters get source:::return
PluginFactory_ResolveMethodAndLoadCountersStubCall#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ resolve method and load counters stub call register plugins:::plugins->new->Plugin_ResolveMethodAndLoadCountersStubCall_resolveMethodAndLoadCounters->register
EncodedSymbolNode#canonical(CanonicalizerTool)::: encoded symbol node canonical:::if->constant->GraphUtil->foldIfConstantAndRemove->if->return->new->EncodedSymbolConstant->StampFactory->pointer->new->ConstantNode->return
EncodedSymbolNode#encode(Object)::: encoded symbol node encode:::
InitializeKlassNode#lower(LoweringTool)::: initialize klass node lower:::tool->getLowerer->lower
InitializeKlassNode#value()::: initialize klass node value:::return
InitializeKlassNode#canDeoptimize()::: initialize klass node can deoptimize:::return
InitializeKlassNode#getLocationIdentity()::: initialize klass node get location identity:::return->LocationIdentity->any
InitializeKlassStubCall#initializeKlass(KlassPointer, Word)::: initialize klass stub call initialize klass:::
InitializeKlassStubCall#canonical(CanonicalizerTool)::: initialize klass stub call canonical:::if->GraphUtil->foldIfConstantAndRemove->return
InitializeKlassStubCall#generate(NodeLIRBuilderTool)::: initialize klass stub call generate:::stringValue->gen->operand->fs->gen->state->result->gen->getLIRGeneratorTool->emitKlassInitializationAndRetrieval->gen->setResult
InitializeKlassStubCall#canDeoptimize()::: initialize klass stub call can deoptimize:::return
InitializeKlassStubCall#getLocationIdentity()::: initialize klass stub call get location identity:::return->LocationIdentity->any
InitializeKlassStubCall#stateBefore()::: initialize klass stub call state before:::return
InitializeKlassStubCall#setStateBefore(FrameState)::: initialize klass stub call set state before:::updateUsages
LoadConstantIndirectlyFixedNode#canonical(CanonicalizerTool)::: load constant indirectly fixed node canonical:::if->GraphUtil->foldIfConstantAndRemove->return
LoadConstantIndirectlyFixedNode#generate(NodeLIRBuilderTool)::: load constant indirectly fixed node generate:::result->if->gen->getLIRGeneratorTool->emitLoadObjectAddress->else->if->gen->getLIRGeneratorTool->emitLoadMetaspaceAddress->else->throw->new->PermanentBailoutException->gen->setResult
LoadConstantIndirectlyFixedNode#loadKlass(KlassPointer, HotSpotConstantLoadAction)::: load constant indirectly fixed node load klass:::
LoadConstantIndirectlyFixedNode#loadKlass(KlassPointer)::: load constant indirectly fixed node load klass:::
LoadConstantIndirectlyFixedNode#loadMethod(MethodPointer)::: load constant indirectly fixed node load method:::
LoadConstantIndirectlyFixedNode#loadObject(Object)::: load constant indirectly fixed node load object:::
LoadConstantIndirectlyNode#canonical(CanonicalizerTool)::: load constant indirectly node canonical:::if->GraphUtil->foldIfConstantAndRemove->return
LoadConstantIndirectlyNode#generate(NodeLIRBuilderTool)::: load constant indirectly node generate:::result->if->gen->getLIRGeneratorTool->emitLoadObjectAddress->else->if->gen->getLIRGeneratorTool->emitLoadMetaspaceAddress->else->throw->new->PermanentBailoutException->gen->setResult
LoadConstantIndirectlyNode#loadKlass(KlassPointer, HotSpotConstantLoadAction)::: load constant indirectly node load klass:::
LoadConstantIndirectlyNode#loadKlass(KlassPointer)::: load constant indirectly node load klass:::
LoadConstantIndirectlyNode#loadObject(Object)::: load constant indirectly node load object:::
LoadMethodCountersIndirectlyNode#canonical(CanonicalizerTool)::: load method counters indirectly node canonical:::if->GraphUtil->foldIfConstantAndRemove->return
LoadMethodCountersIndirectlyNode#generate(NodeLIRBuilderTool)::: load method counters indirectly node generate:::result->if->gen->getLIRGeneratorTool->emitLoadMetaspaceAddress->else->throw->new->PermanentBailoutException->gen->setResult
LoadMethodCountersIndirectlyNode#loadMethodCounters(MethodPointer)::: load method counters indirectly node load method counters:::
LoadMethodCountersNode#getMethod()::: load method counters node get method:::return
LoadMethodCountersNode#getLoadMethodCountersNodes(StructuredGraph)::: load method counters node get load method counters nodes:::return->graph->getNodes->filter
LoadMethodCountersNode#generate(NodeLIRBuilderTool)::: load method counters node generate:::throw->GraalError->unimplemented
ResolveConstantNode#lower(LoweringTool)::: resolve constant node lower:::tool->getLowerer->lower
ResolveConstantNode#value()::: resolve constant node value:::return
ResolveConstantNode#action()::: resolve constant node action:::return
ResolveConstantNode#canDeoptimize()::: resolve constant node can deoptimize:::return
ResolveConstantStubCall#resolveObject(Object, Object)::: resolve constant stub call resolve object:::
ResolveConstantStubCall#resolveKlass(KlassPointer, Word)::: resolve constant stub call resolve klass:::
ResolveConstantStubCall#resolveKlass(KlassPointer, Word, HotSpotConstantLoadAction)::: resolve constant stub call resolve klass:::
ResolveConstantStubCall#canonical(CanonicalizerTool)::: resolve constant stub call canonical:::if->GraphUtil->foldIfConstantAndRemove->return
ResolveConstantStubCall#generate(NodeLIRBuilderTool)::: resolve constant stub call generate:::stringValue->gen->operand->result->fs->gen->state->if->gen->getLIRGeneratorTool->emitObjectConstantRetrieval->else->if->if->gen->getLIRGeneratorTool->emitMetaspaceConstantRetrieval->else->gen->getLIRGeneratorTool->emitKlassInitializationAndRetrieval->else->throw->new->PermanentBailoutException->gen->setResult
ResolveDynamicConstantNode#value()::: resolve dynamic constant node value:::return
ResolveDynamicConstantNode#lower(LoweringTool)::: resolve dynamic constant node lower:::tool->getLowerer->lower
ResolveDynamicConstantNode#canDeoptimize()::: resolve dynamic constant node can deoptimize:::return
ResolveDynamicConstantNode#getLocationIdentity()::: resolve dynamic constant node get location identity:::return->LocationIdentity->any
ResolveDynamicStubCall#resolveInvoke(Object)::: resolve dynamic stub call resolve invoke:::
ResolveDynamicStubCall#canonical(CanonicalizerTool)::: resolve dynamic stub call canonical:::if->GraphUtil->foldIfConstantAndRemove->return
ResolveDynamicStubCall#generate(NodeLIRBuilderTool)::: resolve dynamic stub call generate:::result->fs->gen->state->gen->getLIRGeneratorTool->emitResolveDynamicInvoke->gen->setResult
ResolveDynamicStubCall#canDeoptimize()::: resolve dynamic stub call can deoptimize:::return
ResolveDynamicStubCall#getLocationIdentity()::: resolve dynamic stub call get location identity:::return->LocationIdentity->any
ResolveDynamicStubCall#stateBefore()::: resolve dynamic stub call state before:::return
ResolveDynamicStubCall#setStateBefore(FrameState)::: resolve dynamic stub call set state before:::updateUsages
ResolveDynamicStubCall#markDeleted()::: resolve dynamic stub call mark deleted:::throw->GraalError->shouldNotReachHere
ResolveMethodAndLoadCountersNode#lower(LoweringTool)::: resolve method and load counters node lower:::tool->getLowerer->lower
ResolveMethodAndLoadCountersNode#getMethod()::: resolve method and load counters node get method:::return
ResolveMethodAndLoadCountersNode#getHub()::: resolve method and load counters node get hub:::return
ResolveMethodAndLoadCountersNode#canDeoptimize()::: resolve method and load counters node can deoptimize:::return
ResolveMethodAndLoadCountersStubCall#resolveMethodAndLoadCounters(MethodPointer, KlassPointer, Word)::: resolve method and load counters stub call resolve method and load counters:::
ResolveMethodAndLoadCountersStubCall#canonical(CanonicalizerTool)::: resolve method and load counters stub call canonical:::if->GraphUtil->foldIfConstantAndRemove->return
ResolveMethodAndLoadCountersStubCall#generate(NodeLIRBuilderTool)::: resolve method and load counters stub call generate:::methodDescriptionValue->gen->operand->klassHintValue->gen->operand->fs->gen->state->result->gen->getLIRGeneratorTool->emitResolveMethodAndLoadCounters->gen->setResult

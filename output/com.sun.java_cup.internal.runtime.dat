com.sun.java_cup.internal.runtime.lr_parser#error_sync_size()->int:::The number of Symbols after an error we much match to consider it  recovered from.
com.sun.java_cup.internal.runtime.lr_parser#production_table()->short[][]:::Table of production information (supplied by generated subclass)
com.sun.java_cup.internal.runtime.lr_parser#action_table()->short[][]:::The action table (supplied by generated subclass)
com.sun.java_cup.internal.runtime.lr_parser#reduce_table()->short[][]:::The reduce-goto table (supplied by generated subclass)
com.sun.java_cup.internal.runtime.lr_parser#start_state()->int:::The index of the start state (supplied by generated subclass).
com.sun.java_cup.internal.runtime.lr_parser#start_production()->int:::The index of the start production (supplied by generated subclass).
com.sun.java_cup.internal.runtime.lr_parser#EOF_sym()->int:::The index of the end of file terminal Symbol (supplied by generated  subclass).
com.sun.java_cup.internal.runtime.lr_parser#error_sym()->int:::The index of the special error Symbol (supplied by generated subclass).
com.sun.java_cup.internal.runtime.lr_parser#done_parsing()->void:::This method is called to indicate that the parser should quit
com.sun.java_cup.internal.runtime.lr_parser#setScanner(Scanner)->void:::Simple accessor method to set the default scanner.
com.sun.java_cup.internal.runtime.lr_parser#getScanner()->Scanner:::Simple accessor method to get the default scanner.
com.sun.java_cup.internal.runtime.lr_parser#do_action(int, lr_parser, Stack, int)->Symbol:::Perform a bit of user supplied action code (supplied by generated  subclass)
com.sun.java_cup.internal.runtime.lr_parser#user_init()->void:::User code for initialization inside the parser
com.sun.java_cup.internal.runtime.lr_parser#init_actions()->void:::Initialize the action object
com.sun.java_cup.internal.runtime.lr_parser#scan()->Symbol:::Get the next Symbol from the input (supplied by generated subclass)
com.sun.java_cup.internal.runtime.lr_parser#report_fatal_error(String, Object)->void:::Report a fatal error
com.sun.java_cup.internal.runtime.lr_parser#report_error(String, Object)->void:::Report a non fatal error (or warning)
com.sun.java_cup.internal.runtime.lr_parser#syntax_error(Symbol)->void:::This method is called when a syntax error has been detected and recovery  is about to be invoked
com.sun.java_cup.internal.runtime.lr_parser#unrecovered_syntax_error(Symbol)->void:::This method is called if it is determined that syntax error recovery  has been unsuccessful
com.sun.java_cup.internal.runtime.lr_parser#get_action(int, int)->short:::Fetch an action from the action table
com.sun.java_cup.internal.runtime.lr_parser#get_reduce(int, int)->short:::Fetch a state from the reduce-goto table
com.sun.java_cup.internal.runtime.lr_parser#parse()->Symbol:::This method provides the main parsing routine
com.sun.java_cup.internal.runtime.lr_parser#debug_message(String)->void:::Write a debugging message to System.err for the debugging version  of the parser.
com.sun.java_cup.internal.runtime.lr_parser#dump_stack()->void:::Dump the parse stack for debugging purposes.
com.sun.java_cup.internal.runtime.lr_parser#debug_reduce(int, int, int)->void:::Do debug output for a reduce.
com.sun.java_cup.internal.runtime.lr_parser#debug_shift(Symbol)->void:::Do debug output for shift.
com.sun.java_cup.internal.runtime.lr_parser#debug_stack()->void:::Do debug output for stack state
com.sun.java_cup.internal.runtime.lr_parser#debug_parse()->Symbol:::Perform a parse with debugging output
com.sun.java_cup.internal.runtime.lr_parser#error_recovery(boolean)->boolean:::Attempt to recover from a syntax error
com.sun.java_cup.internal.runtime.lr_parser#shift_under_error()->boolean:::Determine if we can shift under the special error Symbol out of the  state currently on the top of the (real) parse stack.
com.sun.java_cup.internal.runtime.lr_parser#find_recovery_config(boolean)->boolean:::Put the (real) parse stack into error recovery configuration by  popping the stack down to a state that can shift on the special  error Symbol, then doing the shift
com.sun.java_cup.internal.runtime.lr_parser#read_lookahead()->void:::Read from input to establish our buffer of "parse ahead" lookahead  Symbols.
com.sun.java_cup.internal.runtime.lr_parser#cur_err_token()->Symbol:::Return the current lookahead in our error "parse ahead" buffer.
com.sun.java_cup.internal.runtime.lr_parser#advance_lookahead()->boolean:::Advance to next "parse ahead" input Symbol
com.sun.java_cup.internal.runtime.lr_parser#restart_lookahead()->void:::Reset the parse ahead input to one Symbol past where we started error  recovery (this consumes one new Symbol from the real input).
com.sun.java_cup.internal.runtime.lr_parser#try_parse_ahead(boolean)->boolean:::Do a simulated parse forward (a "parse ahead") from the current  stack configuration using stored lookahead input and a virtual parse  stack
com.sun.java_cup.internal.runtime.lr_parser#parse_lookahead(boolean)->void:::Parse forward using stored lookahead Symbols
com.sun.java_cup.internal.runtime.lr_parser#unpackFromStrings(String[])->short[][]:::Utility function: unpacks parse tables from strings
com.sun.java_cup.internal.runtime.Scanner#next_token()->Symbol::: scanner next_token
com.sun.java_cup.internal.runtime.Symbol#toString()->String:::**************************     Printing this token out
com.sun.java_cup.internal.runtime.virtual_parse_stack#get_from_real()->void:::Transfer an element from the real to the virtual stack
com.sun.java_cup.internal.runtime.virtual_parse_stack#empty()->boolean:::Indicate whether the stack is empty.
com.sun.java_cup.internal.runtime.virtual_parse_stack#top()->int:::Return value on the top of the stack (without popping it).
com.sun.java_cup.internal.runtime.virtual_parse_stack#pop()->void:::Pop the stack.
com.sun.java_cup.internal.runtime.virtual_parse_stack#push(int)->void:::Push a state number onto the stack.

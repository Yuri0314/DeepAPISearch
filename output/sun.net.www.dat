sun.net.www.HeaderParser#subsequence(int, int)->HeaderParser:::create a new HeaderParser from this, whose keys (and corresponding values) range from "start" to "end-1"
sun.net.www.HeaderParser#findKey(int)->String::: header parser find key
sun.net.www.HeaderParser#findValue(int)->String::: header parser find value
sun.net.www.HeaderParser#findValue(String)->String::: header parser find value
sun.net.www.HeaderParser#findValue(String, String)->String::: header parser find value
sun.net.www.HeaderParser.ParserIterator#hasNext()->boolean::: parser iterator has next
sun.net.www.HeaderParser.ParserIterator#next()->String::: parser iterator next
sun.net.www.HeaderParser.ParserIterator#remove()->void::: parser iterator remove
sun.net.www.HeaderParser#keys()->Iterator::: header parser keys
sun.net.www.HeaderParser#values()->Iterator::: header parser values
sun.net.www.HeaderParser#toString()->String::: header parser to string
sun.net.www.HeaderParser#findInt(String, int)->int::: header parser find int
sun.net.www.MessageHeader#getHeaderNamesInList()->String:::Returns list of header names in a comma separated list
sun.net.www.MessageHeader#reset()->void:::Reset a message header (all key/values removed)
sun.net.www.MessageHeader#findValue(String)->String:::Find the value that corresponds to this key
sun.net.www.MessageHeader#getKey(String)->int::: message header get key
sun.net.www.MessageHeader#getKey(int)->String::: message header get key
sun.net.www.MessageHeader#getValue(int)->String::: message header get value
sun.net.www.MessageHeader#findNextValue(String, String)->String:::Deprecated: Use multiValueIterator() instead
sun.net.www.MessageHeader#filterNTLMResponses(String)->boolean:::Removes bare Negotiate and Kerberos headers when an "NTLM ..." appears
sun.net.www.MessageHeader.HeaderIterator#hasNext()->boolean::: header iterator has next
sun.net.www.MessageHeader.HeaderIterator#next()->String::: header iterator next
sun.net.www.MessageHeader.HeaderIterator#remove()->void::: header iterator remove
sun.net.www.MessageHeader#multiValueIterator(String)->Iterator:::return an Iterator that returns all values of a particular key in sequence
sun.net.www.MessageHeader#getHeaders()->Map>::: message header get headers
sun.net.www.MessageHeader#getHeaders(String[])->Map>::: message header get headers
sun.net.www.MessageHeader#filterAndAddHeaders(String[], Map>)->Map>::: message header filter and add headers
sun.net.www.MessageHeader#print(PrintStream)->void:::Prints the key-value pairs represented by this         header
sun.net.www.MessageHeader#add(String, String)->void:::Adds a key value pair to the end of the         header
sun.net.www.MessageHeader#prepend(String, String)->void:::Prepends a key value pair to the beginning of the         header
sun.net.www.MessageHeader#set(int, String, String)->void::: message header set
sun.net.www.MessageHeader#remove(String)->void:::Remove the key from the header
sun.net.www.MessageHeader#set(String, String)->void:::Sets the value of a key
sun.net.www.MessageHeader#setIfNotSet(String, String)->void::: message header set if not set
sun.net.www.MessageHeader#canonicalID(String)->String:::Convert a message-id string to canonical form (strips off         leading and trailing <>s)
sun.net.www.MessageHeader#parseHeader(InputStream)->void:::Parse a MIME header from an input stream.
sun.net.www.MessageHeader#mergeHeader(InputStream)->void:::Parse and merge a MIME header from an input stream.
sun.net.www.MessageHeader#toString()->String::: message header to string
sun.net.www.MeteredStream#read()->int::: metered stream read
sun.net.www.MeteredStream#read(byte[], int, int)->int::: metered stream read
sun.net.www.MeteredStream#skip(long)->long::: metered stream skip
sun.net.www.MeteredStream#close()->void::: metered stream close
sun.net.www.MeteredStream#available()->int::: metered stream available
sun.net.www.MeteredStream#mark(int)->void::: metered stream mark
sun.net.www.MeteredStream#reset()->void::: metered stream reset
sun.net.www.MeteredStream#markSupported()->boolean::: metered stream mark supported
sun.net.www.MeteredStream#finalize()->void::: metered stream finalize
sun.net.www.MimeEntry#getType()->String::: mime entry get type
sun.net.www.MimeEntry#setType(String)->void::: mime entry set type
sun.net.www.MimeEntry#getAction()->int::: mime entry get action
sun.net.www.MimeEntry#setAction(int, String)->void::: mime entry set action
sun.net.www.MimeEntry#setAction(int)->void::: mime entry set action
sun.net.www.MimeEntry#getLaunchString()->String::: mime entry get launch string
sun.net.www.MimeEntry#setCommand(String)->void::: mime entry set command
sun.net.www.MimeEntry#getDescription()->String::: mime entry get description
sun.net.www.MimeEntry#setDescription(String)->void::: mime entry set description
sun.net.www.MimeEntry#getImageFileName()->String::: mime entry get image file name
sun.net.www.MimeEntry#setImageFileName(String)->void::: mime entry set image file name
sun.net.www.MimeEntry#getTempFileTemplate()->String::: mime entry get temp file template
sun.net.www.MimeEntry#getExtensions()->String[]::: mime entry get extensions
sun.net.www.MimeEntry#getExtensionsAsList()->String::: mime entry get extensions as list
sun.net.www.MimeEntry#setExtensions(String)->void::: mime entry set extensions
sun.net.www.MimeEntry#launch(java.net.URLConnection, InputStream, MimeTable)->Object:::Invoke the MIME type specific behavior for this MIME type
sun.net.www.MimeEntry#matches(String)->boolean::: mime entry matches
sun.net.www.MimeEntry#clone()->Object::: mime entry clone
sun.net.www.MimeEntry#toProperty()->String::: mime entry to property
sun.net.www.MimeEntry#toString()->String::: mime entry to string
sun.net.www.MimeLauncher#getTempFileName(URL, String)->String::: mime launcher get temp file name
sun.net.www.MimeLauncher#run()->void::: mime launcher run
sun.net.www.MimeTable#getDefaultTable()->MimeTable:::Get the single instance of this class
sun.net.www.MimeTable#loadTable()->FileNameMap::: mime table load table
sun.net.www.MimeTable#getSize()->int::: mime table get size
sun.net.www.MimeTable#getContentTypeFor(String)->String::: mime table get content type for
sun.net.www.MimeTable#add(MimeEntry)->void::: mime table add
sun.net.www.MimeTable#remove(String)->MimeEntry::: mime table remove
sun.net.www.MimeTable#remove(MimeEntry)->MimeEntry::: mime table remove
sun.net.www.MimeTable#find(String)->MimeEntry::: mime table find
sun.net.www.MimeTable#findByFileName(String)->MimeEntry:::Locate a MimeEntry by the file extension that has been associated with it
sun.net.www.MimeTable#findByExt(String)->MimeEntry:::Locate a MimeEntry by the file extension that has been associated with it.
sun.net.www.MimeTable#findByDescription(String)->MimeEntry::: mime table find by description
sun.net.www.MimeTable#getTempFileTemplate()->String::: mime table get temp file template
sun.net.www.MimeTable#elements()->Enumeration::: mime table elements
sun.net.www.MimeTable#load()->void::: mime table load
sun.net.www.MimeTable#parse(Properties)->void::: mime table parse
sun.net.www.MimeTable#parse(String, String)->void::: mime table parse
sun.net.www.MimeTable#parse(String, MimeEntry)->void::: mime table parse
sun.net.www.MimeTable#fill(MimeEntry, String, String)->void::: mime table fill
sun.net.www.MimeTable#getExtensions(String)->String[]::: mime table get extensions
sun.net.www.MimeTable#getActionCode(String)->int::: mime table get action code
sun.net.www.MimeTable#getAsProperties()->Properties::: mime table get as properties
sun.net.www.MimeTable#saveAsProperties(File)->boolean::: mime table save as properties
sun.net.www.ParseUtil#encodePath(String)->String:::Constructs an encoded version of the specified path string suitable for use in the construction of a URL
sun.net.www.ParseUtil#encodePath(String, boolean)->String::: parse util encode path
sun.net.www.ParseUtil#decode(String)->String:::Returns a new String constructed from the specified String by replacing the URL escape sequences and UTF8 encoding with the characters they represent.
sun.net.www.ParseUtil#canonizeString(String)->String:::Returns a canonical version of the specified string.
sun.net.www.ParseUtil#fileToEncodedURL(File)->URL::: parse util file to encoded l
sun.net.www.ParseUtil#toURI(URL)->java.net.URI::: parse util to i
sun.net.www.URLConnection#getProperties()->MessageHeader:::Call this routine to get the property list for this object
sun.net.www.URLConnection#setProperties(MessageHeader)->void:::Call this routine to set the property list for this object.
sun.net.www.URLConnection#setRequestProperty(String, String)->void::: connection set request property
sun.net.www.URLConnection#addRequestProperty(String, String)->void:::The following three methods addRequestProperty, getRequestProperty, and getRequestProperties were copied from the superclass implementation before it was changed by CR:6230836, to maintain backward compatibility.
sun.net.www.URLConnection#getRequestProperty(String)->String::: connection get request property
sun.net.www.URLConnection#getRequestProperties()->Map>::: connection get request properties
sun.net.www.URLConnection#getHeaderField(String)->String::: connection get header field
sun.net.www.URLConnection#getHeaderFieldKey(int)->String:::Return the key for the nth header field
sun.net.www.URLConnection#getHeaderField(int)->String:::Return the value for the nth header field
sun.net.www.URLConnection#getContentType()->String:::Call this routine to get the content-type associated with this object.
sun.net.www.URLConnection#setContentType(String)->void:::Set the content type of this URL to a specific value.
sun.net.www.URLConnection#getContentLength()->int:::Call this routine to get the content-length associated with this object.
sun.net.www.URLConnection#setContentLength(int)->void:::Call this routine to set the content-length associated with this object.
sun.net.www.URLConnection#canCache()->boolean:::Returns true if the data associated with this URL can be cached.
sun.net.www.URLConnection#close()->void:::Call this to close the connection and flush any remaining data
sun.net.www.URLConnection#setProxiedHost(String)->void::: connection set proxied host
sun.net.www.URLConnection#isProxiedHost(String)->boolean::: connection is proxied host

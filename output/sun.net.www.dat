HeaderParser#subsequence(int, int):::create a new HeaderParser from this, whose keys (and corresponding values) range from "start" to "end-1":::if->return->if->throw->new->IllegalArgumentException->n->new->HeaderParser->new->StringArrs->System->arraycopy->return
MessageHeader#getHeaderNamesInList():::Returns list of header names in a comma separated list:::joiner->new->StringJoiner->for->i->return->joiner->toString
MessageHeader#reset():::Reset a message header (all key/values removed):::grow
MessageHeader#findValue(String):::Find the value that corresponds to this key:::if->for->i->else->for->i->return
MessageHeader#findNextValue(String, String):::Deprecated: Use multiValueIterator() instead:::foundV->if->for->i->else->for->i->return
MessageHeader#filterNTLMResponses(String):::Removes bare Negotiate and Kerberos headers when an "NTLM ..." appears:::found->for->i->if->j->for->i->if->return->return
MessageHeader#multiValueIterator(String):::return an Iterator that returns all values of a particular key in sequence:::return->new->HeaderIterator
MessageHeader#print(PrintStream):::Prints the key-value pairs represented by this         header:::for->i->p->print->p->flush
MessageHeader#add(String, String):::Adds a key value pair to the end of the         header:::grow
MessageHeader#prepend(String, String):::Prepends a key value pair to the beginning of the         header:::grow->for->i
MessageHeader#remove(String):::Remove the key from the header:::if->for->i->else->for->i
MessageHeader#set(String, String):::Sets the value of a key:::for->i->add
MessageHeader#canonicalID(String):::Convert a message-id string to canonical form (strips off         leading and trailing <>s):::if->return->st->len->id->length->substr->c->while->id->charAt->while->id->charAt->return->id->substring
MessageHeader#parseHeader(InputStream):::Parse a MIME header from an input stream.:::synchronized->mergeHeader
MessageHeader#mergeHeader(InputStream):::Parse and merge a MIME header from an input stream.:::if->return->s->new->charArr->firstc->is->read->while->len->keyend->c->inKey->while->is->read->switch->if->break->break->is->read->if->is->read->if->is->read->if->break->break->if->ns->new->charArr->System->arraycopy->while->k->if->else->String->copyValueOf->if->while->v->if->new->String->else->String->copyValueOf->add
MimeEntry#launch(java.net.URLConnection, InputStream, MimeTable):::Invoke the MIME type specific behavior for this MIME type:::switch->try->return->catch->return->finally->try->return->urlc->getContent->catch->return->finally->threadName->fst->threadName->indexOf->if->threadName->substring->return->mt->getTempFileTemplate->new->MimeLauncher->return->return
MimeTable#getDefaultTable():::Get the single instance of this class:::return
MimeTable#findByFileName(String):::Locate a MimeEntry by the file extension that has been associated with it:::ext->i->fname->lastIndexOf->if->fname->substring->fname->lastIndexOf->Math->fname->lastIndexOf->max->Math->fname->lastIndexOf->max->if->fname->charAt->fname->substring->toLowerCase->return->findByExt
MimeTable#findByExt(String):::Locate a MimeEntry by the file extension that has been associated with it.:::return->extensionMap->get
ParseUtil#encodePath(String):::Constructs an encoded version of the specified path string suitable for use in the construction of a URL:::return->encodePath
ParseUtil#decode(String):::Returns a new String constructed from the specified String by replacing the URL escape sequences and UTF8 encoding with the characters they represent.:::n->s->length->if->s->indexOf->return->sb->new->StringBuilder->bb->ByteBuffer->allocate->cb->CharBuffer->allocate->dec->ThreadLocalCoders->decoderFor->onMalformedInput->onUnmappableCharacter->c->s->charAt->for->i->return->sb->toString
ParseUtil#canonizeString(String):::Returns a canonical version of the specified string.:::len->file->length->if->file->indexOf->file->charAt->return->else->return->doCanonize
URLConnection#getProperties():::Call this routine to get the property list for this object:::return
URLConnection#setProperties(MessageHeader):::Call this routine to set the property list for this object.:::
URLConnection#addRequestProperty(String, String):::The following three methods addRequestProperty, getRequestProperty, and getRequestProperties were copied from the superclass implementation before it was changed by CR:6230836, to maintain backward compatibility.:::if->throw->new->IllegalStateException->if->throw->new->NullPointerException
URLConnection#getHeaderFieldKey(int):::Return the key for the nth header field:::try->getInputStream->catch->return->finally->props->return->props->getKey
URLConnection#getHeaderField(int):::Return the value for the nth header field:::try->getInputStream->catch->return->finally->props->return->props->getValue
URLConnection#getContentType():::Call this routine to get the content-type associated with this object.:::if->getHeaderField->if->ct->try->getInputStream->guessContentTypeFromStream->catch->finally->ce->properties->findValue->if->properties->findValue->if->if->url->getFile->endsWith->else->url->getFile->guessContentTypeFromName->if->ce->equalsIgnoreCase->ce->equalsIgnoreCase->ce->equalsIgnoreCase->setContentType->return
URLConnection#setContentType(String):::Set the content type of this URL to a specific value.:::properties->set
URLConnection#getContentLength():::Call this routine to get the content-length associated with this object.:::try->getInputStream->catch->return->finally->l->if->try->Integer->properties->findValue->parseInt->setContentLength->catch->finally->return
URLConnection#setContentLength(int):::Call this routine to set the content-length associated with this object.:::properties->String->valueOf->set
URLConnection#canCache():::Returns true if the data associated with this URL can be cached.:::return->url->getFile->indexOf
URLConnection#close():::Call this to close the connection and flush any remaining data:::

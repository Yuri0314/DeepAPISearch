jdk.swing.interop.DispatcherWrapper#isDispatchThread()->boolean::: dispatcher wrapper is dispatch thread
jdk.swing.interop.DispatcherWrapper#scheduleDispatch(Runnable)->void::: dispatcher wrapper schedule dispatch
jdk.swing.interop.DispatcherWrapper#createSecondaryLoop()->SecondaryLoop::: dispatcher wrapper create secondary loop
jdk.swing.interop.DispatcherWrapper#setFwDispatcher(EventQueue, DispatcherWrapper)->void::: dispatcher wrapper set fw dispatcher
jdk.swing.interop.DragSourceContextWrapper#getPeer()->DragSourceContextPeer::: drag source context wrapper get peer
jdk.swing.interop.DragSourceContextWrapper#convertModifiersToDropAction(int, int)->int::: drag source context wrapper convert modifiers to drop action
jdk.swing.interop.DragSourceContextWrapper#setNativeCursor(Cursor, int)->void::: drag source context wrapper set native cursor
jdk.swing.interop.DragSourceContextWrapper#startDrag(Transferable, long[], Map)->void::: drag source context wrapper start drag
jdk.swing.interop.DragSourceContextWrapper#startSecondaryEventLoop()->void::: drag source context wrapper start secondary event loop
jdk.swing.interop.DragSourceContextWrapper#quitSecondaryEventLoop()->void::: drag source context wrapper quit secondary event loop
jdk.swing.interop.DragSourceContextWrapper#dragDropFinished(boolean, int, int, int)->void::: drag source context wrapper drag drop finished
jdk.swing.interop.DragSourceContextWrapper#getDragSourceContext()->DragSourceContext::: drag source context wrapper get drag source context
jdk.swing.interop.DropTargetContextWrapper#setDropTargetContext(DropTargetContext, DropTargetContextWrapper)->void::: drop target context wrapper set drop target context
jdk.swing.interop.DropTargetContextWrapper#reset(DropTargetContext)->void::: drop target context wrapper reset
jdk.swing.interop.DropTargetContextWrapper#setTargetActions(int)->void::: drop target context wrapper set target actions
jdk.swing.interop.DropTargetContextWrapper#getTargetActions()->int::: drop target context wrapper get target actions
jdk.swing.interop.DropTargetContextWrapper#getDropTarget()->DropTarget::: drop target context wrapper get drop target
jdk.swing.interop.DropTargetContextWrapper#getTransferDataFlavors()->DataFlavor[]::: drop target context wrapper get transfer data flavors
jdk.swing.interop.DropTargetContextWrapper#getTransferable()->Transferable::: drop target context wrapper get transferable
jdk.swing.interop.DropTargetContextWrapper#isTransferableJVMLocal()->boolean::: drop target context wrapper is transferable local
jdk.swing.interop.DropTargetContextWrapper#acceptDrag(int)->void::: drop target context wrapper accept drag
jdk.swing.interop.DropTargetContextWrapper#rejectDrag()->void::: drop target context wrapper reject drag
jdk.swing.interop.DropTargetContextWrapper#acceptDrop(int)->void::: drop target context wrapper accept drop
jdk.swing.interop.DropTargetContextWrapper#rejectDrop()->void::: drop target context wrapper reject drop
jdk.swing.interop.DropTargetContextWrapper#dropComplete(boolean)->void::: drop target context wrapper drop complete
jdk.swing.interop.LightweightContentWrapper#getContent()->LightweightContentProxy::: lightweight content wrapper get content
jdk.swing.interop.LightweightContentWrapper#imageBufferReset(int[], int, int, int, int, int)->void::: lightweight content wrapper image buffer reset
jdk.swing.interop.LightweightContentWrapper#imageBufferReset(int[], int, int, int, int, int, double, double)->void::: lightweight content wrapper image buffer reset
jdk.swing.interop.LightweightContentWrapper#getComponent()->JComponent::: lightweight content wrapper get component
jdk.swing.interop.LightweightContentWrapper#paintLock()->void::: lightweight content wrapper paint lock
jdk.swing.interop.LightweightContentWrapper#paintUnlock()->void::: lightweight content wrapper paint unlock
jdk.swing.interop.LightweightContentWrapper#imageReshaped(int, int, int, int)->void::: lightweight content wrapper image reshaped
jdk.swing.interop.LightweightContentWrapper#imageUpdated(int, int, int, int)->void::: lightweight content wrapper image updated
jdk.swing.interop.LightweightContentWrapper#focusGrabbed()->void::: lightweight content wrapper focus grabbed
jdk.swing.interop.LightweightContentWrapper#focusUngrabbed()->void::: lightweight content wrapper focus ungrabbed
jdk.swing.interop.LightweightContentWrapper#preferredSizeChanged(int, int)->void::: lightweight content wrapper preferred size changed
jdk.swing.interop.LightweightContentWrapper#maximumSizeChanged(int, int)->void::: lightweight content wrapper maximum size changed
jdk.swing.interop.LightweightContentWrapper#minimumSizeChanged(int, int)->void::: lightweight content wrapper minimum size changed
jdk.swing.interop.LightweightContentWrapper#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T::: lightweight content wrapper create drag gesture recognizer
jdk.swing.interop.LightweightContentWrapper#createDragSourceContext(DragGestureEvent)->DragSourceContextWrapper::: lightweight content wrapper create drag source context
jdk.swing.interop.LightweightContentWrapper#addDropTarget(DropTarget)->void::: lightweight content wrapper add drop target
jdk.swing.interop.LightweightContentWrapper#removeDropTarget(DropTarget)->void::: lightweight content wrapper remove drop target
jdk.swing.interop.LightweightFrameWrapper#notifyDisplayChanged(int)->void::: lightweight frame wrapper notify display changed
jdk.swing.interop.LightweightFrameWrapper#overrideNativeWindowHandle(long, Runnable)->void:::overrideNativeWindowHandle() is package private but part of the interface of this class
jdk.swing.interop.LightweightFrameWrapper#setHostBounds(int, int, int, int)->void::: lightweight frame wrapper set host bounds
jdk.swing.interop.LightweightFrameWrapper#dispose()->void::: lightweight frame wrapper dispose
jdk.swing.interop.LightweightFrameWrapper#addWindowFocusListener(WindowFocusListener)->void::: lightweight frame wrapper add window focus listener
jdk.swing.interop.LightweightFrameWrapper#setVisible(boolean)->void::: lightweight frame wrapper set visible
jdk.swing.interop.LightweightFrameWrapper#setBounds(int, int, int, int)->void::: lightweight frame wrapper set bounds
jdk.swing.interop.LightweightFrameWrapper#setContent(LightweightContentWrapper)->void::: lightweight frame wrapper set content
jdk.swing.interop.LightweightFrameWrapper#emulateActivation(boolean)->void::: lightweight frame wrapper emulate activation
jdk.swing.interop.LightweightFrameWrapper#createMouseEvent(LightweightFrameWrapper, int, long, int, int, int, int, int, int, boolean, int)->MouseEvent::: lightweight frame wrapper create mouse event
jdk.swing.interop.LightweightFrameWrapper#createMouseWheelEvent(LightweightFrameWrapper, int, int, int, int)->MouseWheelEvent::: lightweight frame wrapper create mouse wheel event
jdk.swing.interop.LightweightFrameWrapper#createKeyEvent(LightweightFrameWrapper, int, long, int, int, char)->KeyEvent::: lightweight frame wrapper create key event
jdk.swing.interop.LightweightFrameWrapper#createUngrabEvent(LightweightFrameWrapper)->AWTEvent::: lightweight frame wrapper create ungrab event
jdk.swing.interop.LightweightFrameWrapper#findComponentAt(LightweightFrameWrapper, int, int, boolean)->Component::: lightweight frame wrapper find component at
jdk.swing.interop.LightweightFrameWrapper#isCompEqual(Component, LightweightFrameWrapper)->boolean::: lightweight frame wrapper is comp equal
jdk.swing.interop.SwingInterOpUtils#postEvent(Object, java.awt.AWTEvent)->void::: swing inter op utils post event
jdk.swing.interop.SwingInterOpUtils#grab(Toolkit, Window)->void::: swing inter op utils grab
jdk.swing.interop.SwingInterOpUtils#ungrab(Toolkit, Window)->void::: swing inter op utils ungrab
jdk.swing.interop.SwingInterOpUtils#isUngrabEvent(AWTEvent)->boolean::: swing inter op utils is ungrab event

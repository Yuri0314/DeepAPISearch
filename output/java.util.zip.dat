Adler32#update(int):::Updates the checksum with the specified byte (the low eight bits of the argument b).:::this.update
Adler32#update(byte[], int, int):::Updates the checksum with the specified array of bytes.:::this.updateBytes
Adler32#update(ByteBuffer):::Updates the checksum with the bytes from the specified buffer:::buffer.position->buffer.limit->buffer.hasArray->buffer.remaining->Math.min->buffer.remaining->Math.min->buffer.get->this.update->buffer.hasRemaining->buffer.array->buffer.arrayOffset->this.updateBytes->((DirectBuffer) buffer).address->this.updateByteBuffer->buffer.position
Adler32#reset():::Resets the checksum to initial value.:::
Adler32#getValue():::Returns the checksum value.:::
CheckedInputStream#read():::Reads a byte:::in.read->cksum.update
CheckedInputStream#read(byte[], int, int):::Reads into an array of bytes:::in.read->cksum.update
CheckedInputStream#skip(long):::Skips specified number of bytes of input.:::this.read
CheckedInputStream#getChecksum():::Returns the Checksum for this input stream.:::
CheckedOutputStream#write(int):::Writes a byte:::out.write->cksum.update
CheckedOutputStream#write(byte[], int, int):::Writes an array of bytes:::out.write->cksum.update
CheckedOutputStream#getChecksum():::Returns the Checksum for this output stream.:::
Checksum#update(int):::Updates the current checksum with the specified byte.:::
Checksum#update(byte[]):::Updates the current checksum with the specified array of bytes.:::this.update
Checksum#update(byte[], int, int):::Updates the current checksum with the specified array of bytes.:::
Checksum#update(ByteBuffer):::Updates the current checksum with the bytes from the specified buffer:::buffer.position->buffer.limit->buffer.hasArray->buffer.remaining->Math.min->buffer.remaining->Math.min->buffer.get->this.update->buffer.hasRemaining->buffer.array->buffer.arrayOffset->this.update->buffer.position
Checksum#getValue():::Returns the current checksum value.:::
Checksum#reset():::Resets the checksum to its initial value.:::
CRC32#update(int):::Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).:::this.update
CRC32#update(byte[], int, int):::Updates the CRC-32 checksum with the specified array of bytes.:::this.updateBytes
CRC32#update(ByteBuffer):::Updates the CRC-32 checksum with the bytes from the specified buffer:::buffer.position->buffer.limit->buffer.hasArray->buffer.remaining->Math.min->buffer.remaining->Math.min->buffer.get->this.update->buffer.hasRemaining->buffer.array->buffer.arrayOffset->this.updateBytes->((DirectBuffer) buffer).address->this.updateByteBuffer->buffer.position
CRC32#reset():::Resets CRC-32 to initial value.:::
CRC32#getValue():::Returns CRC-32 value.:::
CRC32C#update(int):::Updates the CRC-32C checksum with the specified byte (the low eight bits of the argument b).:::
CRC32C#update(byte[], int, int):::Updates the CRC-32C checksum with the specified array of bytes.:::this.updateBytes
CRC32C#update(ByteBuffer):::Updates the CRC-32C checksum with the bytes from the specified buffer:::buffer.position->buffer.limit->buffer.hasArray->buffer.remaining->Math.min->buffer.remaining->Math.min->buffer.get->this.update->buffer.hasRemaining->buffer.array->buffer.arrayOffset->buffer.arrayOffset->this.updateBytes->((DirectBuffer) buffer).address->this.updateDirectByteBuffer->buffer.position
CRC32C#reset():::Resets CRC-32C to initial value.:::
CRC32C#getValue():::Returns CRC-32C value.:::
Deflater#setInput(byte[], int, int):::Sets input data for compression:::
Deflater#setInput(byte[]):::Sets input data for compression:::this.setInput
Deflater#setInput(ByteBuffer):::Sets input data for compression:::Objects.requireNonNull
Deflater#setDictionary(byte[], int, int):::Sets preset dictionary for compression:::this.ensureOpen->zsRef.address->this.setDictionary
Deflater#setDictionary(byte[]):::Sets preset dictionary for compression:::this.setDictionary
Deflater#setDictionary(ByteBuffer):::Sets preset dictionary for compression:::dictionary.position->dictionary.limit->Math.max->this.ensureOpen->dictionary.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.setDictionary->((DirectBuffer) dictionary).address->Reference.reachabilityFence->zsRef.address->this.setDictionaryBuffer->dictionary.position
Deflater#setStrategy(int):::Sets the compression strategy to the specified value:::
Deflater#setLevel(int):::Sets the compression level to the specified value:::
Deflater#needsInput():::Returns true if no data remains in the input buffer:::input.hasRemaining
Deflater#finish():::When called, indicates that compression should end with the current contents of the input buffer.:::
Deflater#finished():::Returns true if the end of the compressed data output stream has been reached.:::
Deflater#deflate(byte[], int, int):::Compresses the input data and fills specified buffer with compressed data:::this.deflate
Deflater#deflate(byte[]):::Compresses the input data and fills specified buffer with compressed data:::this.deflate
Deflater#deflate(ByteBuffer):::Compresses the input data and fills specified buffer with compressed data:::this.deflate
Deflater#deflate(byte[], int, int, int):::Compresses the input data and fills the specified buffer with compressed data:::this.ensureOpen->input.position->input.limit->Math.max->input.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.deflateBytesBytes->Reference.reachabilityFence->((DirectBuffer) input).address->zsRef.address->this.deflateBufferBytes->zsRef.address->this.deflateBytesBytes->input.position
Deflater#deflate(ByteBuffer, int):::Compresses the input data and fills the specified buffer with compressed data:::output.isReadOnly->this.ensureOpen->output.position->output.limit->Math.max->input.position->input.limit->Math.max->input.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.deflateBytesBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.deflateBytesBuffer->((DirectBuffer) input).address->Reference.reachabilityFence->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.deflateBufferBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.deflateBufferBuffer->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.deflateBytesBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.deflateBytesBuffer->input.position->output.position
Deflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.:::this.ensureOpen->zsRef.address->this.getAdler
Deflater#getTotalIn():::Returns the total number of uncompressed bytes input so far:::this.getBytesRead
Deflater#getBytesRead():::Returns the total number of uncompressed bytes input so far.:::this.ensureOpen
Deflater#getTotalOut():::Returns the total number of compressed bytes output so far:::this.getBytesWritten
Deflater#getBytesWritten():::Returns the total number of compressed bytes output so far.:::this.ensureOpen
Deflater#reset():::Resets deflater so that a new set of input data can be processed:::this.ensureOpen->zsRef.address->this.reset
Deflater#end():::Closes the compressor and discards any unprocessed input:::zsRef.clean
Deflater#finalize():::Closes the compressor when garbage is collected.:::
DeflaterInputStream#close():::Closes this input stream and its underlying input stream, discarding any pending uncompressed data.:::def.end->in.close
DeflaterInputStream#read():::Reads a single byte of compressed data from the input stream:::this.read
DeflaterInputStream#read(byte[], int, int):::Reads compressed data into a byte array:::this.ensureOpen->def.needsInput->in.read->def.setInput->def.finish->def.deflate->def.finished->def.finished
DeflaterInputStream#skip(long):::Skips over and discards data from the input stream:::this.ensureOpen->Math.min->this.read
DeflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1:::this.ensureOpen
DeflaterInputStream#markSupported():::Always returns false because this input stream does not support the #mark mark() and #reset reset() methods.:::
DeflaterInputStream#mark(int):::This operation is not supported.:::
DeflaterInputStream#reset():::This operation is not supported.:::
DeflaterOutputStream#write(int):::Writes a byte to the compressed output stream:::this.write
DeflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the compressed output stream:::def.finished->def.finished->def.setInput->this.deflate->def.needsInput
DeflaterOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream:::def.finished->def.finish->this.deflate->def.finished
DeflaterOutputStream#close():::Writes remaining compressed data to the output stream and closes the underlying stream.:::this.finish->def.end->out.close
DeflaterOutputStream#deflate():::Writes next block of compressed data to the output stream.:::def.deflate->out.write
DeflaterOutputStream#flush():::Flushes the compressed output stream:::def.finished->out.write->def.deflate->out.flush
GZIPInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes:::this.ensureOpen->super.read->crc.update->this.readTrailer->this.read
GZIPInputStream#close():::Closes this input stream and releases any system resources associated with the stream.:::super.close
GZIPOutputStream#write(byte[], int, int):::Writes array of bytes to the compressed output stream:::super.write->crc.update
GZIPOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream:::def.finished->def.finish->def.deflate->def.finished->this.writeTrailer->out.write->out.write->def.finished->this.writeTrailer->out.write
Inflater#setInput(byte[], int, int):::Sets input data for decompression:::
Inflater#setInput(byte[]):::Sets input data for decompression:::this.setInput
Inflater#setInput(ByteBuffer):::Sets input data for decompression:::Objects.requireNonNull
Inflater#setDictionary(byte[], int, int):::Sets the preset dictionary to the given array of bytes:::this.ensureOpen->zsRef.address->this.setDictionary
Inflater#setDictionary(byte[]):::Sets the preset dictionary to the given array of bytes:::this.setDictionary
Inflater#setDictionary(ByteBuffer):::Sets the preset dictionary to the bytes in the given buffer:::dictionary.position->dictionary.limit->Math.max->this.ensureOpen->dictionary.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.setDictionary->((DirectBuffer) dictionary).address->Reference.reachabilityFence->zsRef.address->this.setDictionaryBuffer->dictionary.position
Inflater#getRemaining():::Returns the total number of bytes remaining in the input buffer:::input.remaining
Inflater#needsInput():::Returns true if no data remains in the input buffer:::input.hasRemaining
Inflater#needsDictionary():::Returns true if a preset dictionary is needed for decompression.:::
Inflater#finished():::Returns true if the end of the compressed data stream has been reached.:::
Inflater#inflate(byte[], int, int):::Uncompresses bytes into specified buffer:::this.ensureOpen->input.position->input.position->input.limit->Math.max->input.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.inflateBytesBytes->Reference.reachabilityFence->((DirectBuffer) input).address->zsRef.address->this.inflateBufferBytes->zsRef.address->this.inflateBytesBytes->input.position
Inflater#inflate(byte[]):::Uncompresses bytes into specified buffer:::this.inflate
Inflater#inflate(ByteBuffer):::Uncompresses bytes into specified buffer:::output.isReadOnly->this.ensureOpen->output.position->output.limit->Math.max->output.position->input.position->input.limit->Math.max->input.position->input.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.inflateBytesBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.inflateBytesBuffer->((DirectBuffer) input).address->Reference.reachabilityFence->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.inflateBufferBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.inflateBufferBuffer->output.isDirect->ZipUtils.getBufferArray->ZipUtils.getBufferOffset->zsRef.address->this.inflateBytesBytes->((DirectBuffer) output).address->Reference.reachabilityFence->zsRef.address->this.inflateBytesBuffer->input.position->output.position
Inflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.:::this.ensureOpen->zsRef.address->this.getAdler
Inflater#getTotalIn():::Returns the total number of compressed bytes input so far:::this.getBytesRead
Inflater#getBytesRead():::Returns the total number of compressed bytes input so far.:::this.ensureOpen
Inflater#getTotalOut():::Returns the total number of uncompressed bytes output so far:::this.getBytesWritten
Inflater#getBytesWritten():::Returns the total number of uncompressed bytes output so far.:::this.ensureOpen
Inflater#reset():::Resets inflater so that a new set of input data can be processed.:::this.ensureOpen->zsRef.address->this.reset
Inflater#end():::Closes the decompressor and discards any unprocessed input:::zsRef.clean
Inflater#finalize():::Closes the decompressor when garbage is collected.:::
InflaterInputStream#read():::Reads a byte of uncompressed data:::this.ensureOpen->this.read->Byte.toUnsignedInt
InflaterInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes:::this.ensureOpen->e.getMessage->inf.finished->inf.needsDictionary->inf.needsInput->this.fill->inf.inflate
InflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1:::this.ensureOpen->inf.finished
InflaterInputStream#skip(long):::Skips specified number of bytes of uncompressed data.:::this.ensureOpen->Math.min->this.read
InflaterInputStream#close():::Closes this input stream and releases any system resources associated with the stream.:::inf.end->in.close
InflaterInputStream#fill():::Fills input buffer with more data to decompress.:::this.ensureOpen->in.read->inf.setInput
InflaterInputStream#markSupported():::Tests if this input stream supports the mark and reset methods:::
InflaterInputStream#mark(int):::Marks the current position in this input stream:::
InflaterInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream:::
InflaterOutputStream#close():::Writes any remaining uncompressed data to the output stream and closes the underlying output stream.:::out.close->this.finish
InflaterOutputStream#flush():::Flushes this output stream, forcing any pending buffered output bytes to be written.:::this.ensureOpen->inf.finished->ex.getMessage->inf.inflate->out.write->inf.finished->inf.needsInput->super.flush
InflaterOutputStream#finish():::Finishes writing uncompressed data to the output stream without closing the underlying stream:::this.ensureOpen->this.flush->inf.end
InflaterOutputStream#write(int):::Writes a byte to the uncompressed output stream.:::this.write
InflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the uncompressed output stream.:::this.ensureOpen->ex.getMessage->inf.needsInput->inf.setInput->inf.inflate->out.write->inf.finished->inf.needsDictionary
ZipEntry#getName():::Returns the name of the entry.:::
ZipEntry#setTime(long):::Sets the last modification time of the entry:::this.javaToExtendedDosTime->FileTime.from
ZipEntry#getTime():::Returns the last modification time of the entry:::mtime.toMillis->this.extendedDosToJavaTime
ZipEntry#setTimeLocal(LocalDateTime):::Sets the last modification time of the entry in local date-time:::time.getYear->time.getMonthValue->time.getDayOfMonth->time.getHour->time.getMinute->time.getSecond->time.getSecond->time.getNano->ZonedDateTime.of(time, ZoneId.systemDefault()).toInstant->FileTime.from
ZipEntry#getTimeLocal():::Returns the last modification time of the entry in local date-time:::mtime.toInstant->ZoneId.systemDefault->LocalDateTime.ofInstant->LocalDateTime.of
ZipEntry#setLastModifiedTime(FileTime):::Sets the last modification time of the entry:::Objects.requireNonNull->time.to->this.javaToExtendedDosTime
ZipEntry#getLastModifiedTime():::Returns the last modification time of the entry:::this.getTime->FileTime.from
ZipEntry#setLastAccessTime(FileTime):::Sets the last access time of the entry:::Objects.requireNonNull
ZipEntry#getLastAccessTime():::Returns the last access time of the entry:::
ZipEntry#setCreationTime(FileTime):::Sets the creation time of the entry:::Objects.requireNonNull
ZipEntry#getCreationTime():::Returns the creation time of the entry:::
ZipEntry#setSize(long):::Sets the uncompressed size of the entry data.:::
ZipEntry#getSize():::Returns the uncompressed size of the entry data.:::
ZipEntry#getCompressedSize():::Returns the size of the compressed entry data:::
ZipEntry#setCompressedSize(long):::Sets the size of the compressed entry data.:::
ZipEntry#setCrc(long):::Sets the CRC-32 checksum of the uncompressed entry data.:::
ZipEntry#getCrc():::Returns the CRC-32 checksum of the uncompressed entry data.:::
ZipEntry#setMethod(int):::Sets the compression method for the entry.:::
ZipEntry#getMethod():::Returns the compression method of the entry.:::
ZipEntry#setExtra(byte[]):::Sets the optional extra field data for the entry:::this.setExtra0
ZipEntry#setExtra0(byte[], boolean):::Sets the optional extra field data for the entry.:::this.get16->this.get16->this.get64->this.get64->this.get16->this.get16->this.get64->this.winTimeToFileTime->this.get64->this.winTimeToFileTime->this.get64->this.winTimeToFileTime->Byte.toUnsignedInt->this.get32S->this.unixTimeToFileTime->this.get32S->this.unixTimeToFileTime->this.get32S->this.unixTimeToFileTime
ZipEntry#getExtra():::Returns the extra field data for the entry.:::
ZipEntry#setComment(String):::Sets the optional comment string for the entry:::
ZipEntry#getComment():::Returns the comment string for the entry.:::
ZipEntry#isDirectory():::Returns true if this is a directory entry:::name.endsWith
ZipEntry#toString():::Returns a string representation of the ZIP entry.:::this.getName
ZipEntry#hashCode():::Returns the hash code value for this entry.:::name.hashCode
ZipEntry#clone():::Returns a copy of this entry.:::super.clone->extra.clone
ZipFile#getComment():::Returns the zip file comment, or null if none.:::this.ensureOpen->zc.toString
ZipFile#getEntry(String):::Returns the zip file entry for the specified name, or null if not found.:::this.getEntry
ZipFile#getInputStream(ZipEntry):::Returns an input stream for reading the contents of the specified zip file entry:::Objects.requireNonNull->this.ensureOpen->Objects.equals->zc.isUTF8->zc.getBytes->zsrc.getEntryPos->zc.getBytesUTF8->zsrc.getEntryPos->istreams.add->this.CENLEN->istreams.add->this.CENHOW
ZipFile#getName():::Returns the path name of the ZIP file.:::
ZipFile#entries():::Returns an enumeration of the ZIP file entries.:::this.ensureOpen
ZipFile#stream():::Returns an ordered Stream over the ZIP file entries:::this.ensureOpen->StreamSupport.stream
ZipFile#size():::Returns the number of entries in the ZIP file.:::this.ensureOpen
ZipFile#close():::Closes the ZIP file:::ioe.getCause->res.clean
ZipFile#finalize():::Ensures that the system resources held by this ZipFile object are released when there are no more references to it.:::
ZipInputStream#getNextEntry():::Reads the next ZIP file entry and positions the stream at the beginning of the entry data.:::this.ensureOpen->this.closeEntry->crc.reset->inf.reset->this.readLOC
ZipInputStream#closeEntry():::Closes the current ZIP entry and positions the stream for reading the next entry.:::this.ensureOpen->this.read
ZipInputStream#available():::Returns 0 after EOF has reached for the current entry data, otherwise always return 1:::this.ensureOpen
ZipInputStream#read(byte[], int, int):::Reads from the current ZIP entry into an array of bytes:::this.ensureOpen->super.read->crc.update->this.readEnd->in.read->crc.update->crc.getValue->Long.toHexString->crc.getValue->Long.toHexString
ZipInputStream#skip(long):::Skips specified number of bytes in the current ZIP entry.:::this.ensureOpen->Math.min->this.read
ZipInputStream#close():::Closes this input stream and releases any system resources associated with the stream.:::super.close
ZipInputStream#createZipEntry(String):::Creates a new ZipEntry object for the specified entry name.:::
ZipOutputStream#setComment(String):::Sets the ZIP file comment.:::zc.getBytes
ZipOutputStream#setMethod(int):::Sets the default compression method for subsequent entries:::
ZipOutputStream#setLevel(int):::Sets the compression level for subsequent entries which are DEFLATED:::def.setLevel
ZipOutputStream#putNextEntry(ZipEntry):::Begins writing a new ZIP file entry and positions the stream to the start of the entry data:::this.ensureOpen->this.closeEntry->System.currentTimeMillis->e.setTime->names.add->zc.isUTF8->xentries.add->this.writeLOC
ZipOutputStream#closeEntry():::Closes the current ZIP entry and positions the stream for writing the next entry.:::this.ensureOpen->def.finish->this.deflate->def.finished->def.getBytesRead->def.getBytesWritten->crc.getValue->this.writeEXT->def.getBytesRead->def.getBytesRead->def.getBytesWritten->def.getBytesWritten->crc.getValue->Long.toHexString->crc.getValue->Long.toHexString->def.reset->crc.getValue->Long.toHexString->crc.getValue->Long.toHexString->crc.reset
ZipOutputStream#write(byte[], int, int):::Writes an array of bytes to the current ZIP entry data:::this.ensureOpen->super.write->out.write->crc.update
ZipOutputStream#finish():::Finishes writing the contents of the ZIP output stream without closing the underlying stream:::this.ensureOpen->this.closeEntry->this.writeCEN->this.writeEND
ZipOutputStream#close():::Closes the ZIP output stream as well as the stream being filtered.:::super.close
ZipUtils#winTimeToFileTime(long):::Converts Windows time (in microseconds, UTC/GMT) time to FileTime.:::FileTime.from
ZipUtils#fileTimeToWinTime(FileTime):::Converts FileTime to Windows time.:::ftime.to
ZipUtils#unixTimeToFileTime(long):::Converts "standard Unix time"(in seconds, UTC/GMT) to FileTime:::FileTime.from
ZipUtils#fileTimeToUnixTime(FileTime):::Converts FileTime to "standard Unix time".:::ftime.to
ZipUtils#dosToJavaTime(long):::Converts DOS time to Java time (number of milliseconds since epoch).:::LocalDateTime.of->ZoneId.systemDefault().getRules().getOffset->ldt.toEpochSecond->TimeUnit.MILLISECONDS.convert->this.overflowDosToJavaTime
ZipUtils#extendedDosToJavaTime(long):::Converts extended DOS time to Java time, where up to 1999 milliseconds might be encoded into the upper half of the returned long.:::this.dosToJavaTime
ZipUtils#javaToExtendedDosTime(long):::Converts Java time to DOS time, encoding any milliseconds lost in the conversion into the upper half of the returned long.:::this.javaToDosTime
ZipUtils#get16(byte[], int):::Fetches unsigned 16-bit value from byte array at specified offset:::
ZipUtils#get32(byte[], int):::Fetches unsigned 32-bit value from byte array at specified offset:::this.get16->this.get16
ZipUtils#get64(byte[], int):::Fetches signed 64-bit value from byte array at specified offset:::this.get32->this.get32
ZipUtils#get32S(byte[], int):::Fetches signed 32-bit value from byte array at specified offset:::this.get16->this.get16
ZipUtils#loadLibrary():::Loads zip native library, if not already laoded:::System.getSecurityManager->System.loadLibrary->AccessController.doPrivileged->System.loadLibrary

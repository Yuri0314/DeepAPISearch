Adler32#update(int):::Updates the checksum with the specified byte (the low eight bits of the argument b).
Adler32#update(byte[], int, int):::Updates the checksum with the specified array of bytes.
Adler32#update(ByteBuffer):::Updates the checksum with the bytes from the specified buffer
Adler32#reset():::Resets the checksum to initial value.
Adler32#getValue():::Returns the checksum value.
CheckedInputStream#read():::Reads a byte
CheckedInputStream#read(byte[], int, int):::Reads into an array of bytes
CheckedInputStream#skip(long):::Skips specified number of bytes of input.
CheckedInputStream#getChecksum():::Returns the Checksum for this input stream.
CheckedOutputStream#write(int):::Writes a byte
CheckedOutputStream#write(byte[], int, int):::Writes an array of bytes
CheckedOutputStream#getChecksum():::Returns the Checksum for this output stream.
Checksum#update(int):::Updates the current checksum with the specified byte.
Checksum#update(byte[]):::Updates the current checksum with the specified array of bytes.
Checksum#update(byte[], int, int):::Updates the current checksum with the specified array of bytes.
Checksum#update(ByteBuffer):::Updates the current checksum with the bytes from the specified buffer
Checksum#getValue():::Returns the current checksum value.
Checksum#reset():::Resets the checksum to its initial value.
CRC32#update(int):::Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).
CRC32#update(byte[], int, int):::Updates the CRC-32 checksum with the specified array of bytes.
CRC32#update(ByteBuffer):::Updates the CRC-32 checksum with the bytes from the specified buffer
CRC32#reset():::Resets CRC-32 to initial value.
CRC32#getValue():::Returns CRC-32 value.
CRC32C#update(int):::Updates the CRC-32C checksum with the specified byte (the low eight bits of the argument b).
CRC32C#update(byte[], int, int):::Updates the CRC-32C checksum with the specified array of bytes.
CRC32C#update(ByteBuffer):::Updates the CRC-32C checksum with the bytes from the specified buffer
CRC32C#reset():::Resets CRC-32C to initial value.
CRC32C#getValue():::Returns CRC-32C value.
Deflater#setInput(byte[], int, int):::Sets input data for compression
Deflater#setInput(byte[]):::Sets input data for compression
Deflater#setInput(ByteBuffer):::Sets input data for compression
Deflater#setDictionary(byte[], int, int):::Sets preset dictionary for compression
Deflater#setDictionary(byte[]):::Sets preset dictionary for compression
Deflater#setDictionary(ByteBuffer):::Sets preset dictionary for compression
Deflater#setStrategy(int):::Sets the compression strategy to the specified value
Deflater#setLevel(int):::Sets the compression level to the specified value
Deflater#needsInput():::Returns true if no data remains in the input buffer
Deflater#finish():::When called, indicates that compression should end with the current contents of the input buffer.
Deflater#finished():::Returns true if the end of the compressed data output stream has been reached.
Deflater#deflate(byte[], int, int):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(byte[]):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(ByteBuffer):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(byte[], int, int, int):::Compresses the input data and fills the specified buffer with compressed data
Deflater#deflate(ByteBuffer, int):::Compresses the input data and fills the specified buffer with compressed data
Deflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.
Deflater#getTotalIn():::Returns the total number of uncompressed bytes input so far
Deflater#getBytesRead():::Returns the total number of uncompressed bytes input so far.
Deflater#getTotalOut():::Returns the total number of compressed bytes output so far
Deflater#getBytesWritten():::Returns the total number of compressed bytes output so far.
Deflater#reset():::Resets deflater so that a new set of input data can be processed
Deflater#end():::Closes the compressor and discards any unprocessed input
Deflater#finalize():::Closes the compressor when garbage is collected.
DeflaterInputStream#close():::Closes this input stream and its underlying input stream, discarding any pending uncompressed data.
DeflaterInputStream#read():::Reads a single byte of compressed data from the input stream
DeflaterInputStream#read(byte[], int, int):::Reads compressed data into a byte array
DeflaterInputStream#skip(long):::Skips over and discards data from the input stream
DeflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1
DeflaterInputStream#markSupported():::Always returns false because this input stream does not support the #mark mark() and #reset reset() methods.
DeflaterInputStream#mark(int):::This operation is not supported.
DeflaterInputStream#reset():::This operation is not supported.
DeflaterOutputStream#write(int):::Writes a byte to the compressed output stream
DeflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the compressed output stream
DeflaterOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream
DeflaterOutputStream#close():::Writes remaining compressed data to the output stream and closes the underlying stream.
DeflaterOutputStream#deflate():::Writes next block of compressed data to the output stream.
DeflaterOutputStream#flush():::Flushes the compressed output stream
GZIPInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes
GZIPInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
GZIPOutputStream#write(byte[], int, int):::Writes array of bytes to the compressed output stream
GZIPOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream
Inflater#setInput(byte[], int, int):::Sets input data for decompression
Inflater#setInput(byte[]):::Sets input data for decompression
Inflater#setInput(ByteBuffer):::Sets input data for decompression
Inflater#setDictionary(byte[], int, int):::Sets the preset dictionary to the given array of bytes
Inflater#setDictionary(byte[]):::Sets the preset dictionary to the given array of bytes
Inflater#setDictionary(ByteBuffer):::Sets the preset dictionary to the bytes in the given buffer
Inflater#getRemaining():::Returns the total number of bytes remaining in the input buffer
Inflater#needsInput():::Returns true if no data remains in the input buffer
Inflater#needsDictionary():::Returns true if a preset dictionary is needed for decompression.
Inflater#finished():::Returns true if the end of the compressed data stream has been reached.
Inflater#inflate(byte[], int, int):::Uncompresses bytes into specified buffer
Inflater#inflate(byte[]):::Uncompresses bytes into specified buffer
Inflater#inflate(ByteBuffer):::Uncompresses bytes into specified buffer
Inflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.
Inflater#getTotalIn():::Returns the total number of compressed bytes input so far
Inflater#getBytesRead():::Returns the total number of compressed bytes input so far.
Inflater#getTotalOut():::Returns the total number of uncompressed bytes output so far
Inflater#getBytesWritten():::Returns the total number of uncompressed bytes output so far.
Inflater#reset():::Resets inflater so that a new set of input data can be processed.
Inflater#end():::Closes the decompressor and discards any unprocessed input
Inflater#finalize():::Closes the decompressor when garbage is collected.
InflaterInputStream#read():::Reads a byte of uncompressed data
InflaterInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes
InflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1
InflaterInputStream#skip(long):::Skips specified number of bytes of uncompressed data.
InflaterInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
InflaterInputStream#fill():::Fills input buffer with more data to decompress.
InflaterInputStream#markSupported():::Tests if this input stream supports the mark and reset methods
InflaterInputStream#mark(int):::Marks the current position in this input stream
InflaterInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
InflaterOutputStream#close():::Writes any remaining uncompressed data to the output stream and closes the underlying output stream.
InflaterOutputStream#flush():::Flushes this output stream, forcing any pending buffered output bytes to be written.
InflaterOutputStream#finish():::Finishes writing uncompressed data to the output stream without closing the underlying stream
InflaterOutputStream#write(int):::Writes a byte to the uncompressed output stream.
InflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the uncompressed output stream.
ZipEntry#getName():::Returns the name of the entry.
ZipEntry#setTime(long):::Sets the last modification time of the entry
ZipEntry#getTime():::Returns the last modification time of the entry
ZipEntry#setTimeLocal(LocalDateTime):::Sets the last modification time of the entry in local date-time
ZipEntry#getTimeLocal():::Returns the last modification time of the entry in local date-time
ZipEntry#setLastModifiedTime(FileTime):::Sets the last modification time of the entry
ZipEntry#getLastModifiedTime():::Returns the last modification time of the entry
ZipEntry#setLastAccessTime(FileTime):::Sets the last access time of the entry
ZipEntry#getLastAccessTime():::Returns the last access time of the entry
ZipEntry#setCreationTime(FileTime):::Sets the creation time of the entry
ZipEntry#getCreationTime():::Returns the creation time of the entry
ZipEntry#setSize(long):::Sets the uncompressed size of the entry data.
ZipEntry#getSize():::Returns the uncompressed size of the entry data.
ZipEntry#getCompressedSize():::Returns the size of the compressed entry data
ZipEntry#setCompressedSize(long):::Sets the size of the compressed entry data.
ZipEntry#setCrc(long):::Sets the CRC-32 checksum of the uncompressed entry data.
ZipEntry#getCrc():::Returns the CRC-32 checksum of the uncompressed entry data.
ZipEntry#setMethod(int):::Sets the compression method for the entry.
ZipEntry#getMethod():::Returns the compression method of the entry.
ZipEntry#setExtra(byte[]):::Sets the optional extra field data for the entry
ZipEntry#setExtra0(byte[], boolean):::Sets the optional extra field data for the entry.
ZipEntry#getExtra():::Returns the extra field data for the entry.
ZipEntry#setComment(String):::Sets the optional comment string for the entry
ZipEntry#getComment():::Returns the comment string for the entry.
ZipEntry#isDirectory():::Returns true if this is a directory entry
ZipEntry#toString():::Returns a string representation of the ZIP entry.
ZipEntry#hashCode():::Returns the hash code value for this entry.
ZipEntry#clone():::Returns a copy of this entry.
ZipFile#getComment():::Returns the zip file comment, or null if none.
ZipFile#getEntry(String):::Returns the zip file entry for the specified name, or null if not found.
ZipFile#getInputStream(ZipEntry):::Returns an input stream for reading the contents of the specified zip file entry
ZipFile#getName():::Returns the path name of the ZIP file.
ZipFile#entries():::Returns an enumeration of the ZIP file entries.
ZipFile#stream():::Returns an ordered Stream over the ZIP file entries
ZipFile#size():::Returns the number of entries in the ZIP file.
ZipFile#close():::Closes the ZIP file
ZipFile#finalize():::Ensures that the system resources held by this ZipFile object are released when there are no more references to it.
ZipInputStream#getNextEntry():::Reads the next ZIP file entry and positions the stream at the beginning of the entry data.
ZipInputStream#closeEntry():::Closes the current ZIP entry and positions the stream for reading the next entry.
ZipInputStream#available():::Returns 0 after EOF has reached for the current entry data, otherwise always return 1
ZipInputStream#read(byte[], int, int):::Reads from the current ZIP entry into an array of bytes
ZipInputStream#skip(long):::Skips specified number of bytes in the current ZIP entry.
ZipInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
ZipInputStream#createZipEntry(String):::Creates a new ZipEntry object for the specified entry name.
ZipOutputStream#setComment(String):::Sets the ZIP file comment.
ZipOutputStream#setMethod(int):::Sets the default compression method for subsequent entries
ZipOutputStream#setLevel(int):::Sets the compression level for subsequent entries which are DEFLATED
ZipOutputStream#putNextEntry(ZipEntry):::Begins writing a new ZIP file entry and positions the stream to the start of the entry data
ZipOutputStream#closeEntry():::Closes the current ZIP entry and positions the stream for writing the next entry.
ZipOutputStream#write(byte[], int, int):::Writes an array of bytes to the current ZIP entry data
ZipOutputStream#finish():::Finishes writing the contents of the ZIP output stream without closing the underlying stream
ZipOutputStream#close():::Closes the ZIP output stream as well as the stream being filtered.
ZipUtils#winTimeToFileTime(long):::Converts Windows time (in microseconds, UTC/GMT) time to FileTime.
ZipUtils#fileTimeToWinTime(FileTime):::Converts FileTime to Windows time.
ZipUtils#unixTimeToFileTime(long):::Converts "standard Unix time"(in seconds, UTC/GMT) to FileTime
ZipUtils#fileTimeToUnixTime(FileTime):::Converts FileTime to "standard Unix time".
ZipUtils#dosToJavaTime(long):::Converts DOS time to Java time (number of milliseconds since epoch).
ZipUtils#extendedDosToJavaTime(long):::Converts extended DOS time to Java time, where up to 1999 milliseconds might be encoded into the upper half of the returned long.
ZipUtils#javaToExtendedDosTime(long):::Converts Java time to DOS time, encoding any milliseconds lost in the conversion into the upper half of the returned long.
ZipUtils#get16(byte[], int):::Fetches unsigned 16-bit value from byte array at specified offset
ZipUtils#get32(byte[], int):::Fetches unsigned 32-bit value from byte array at specified offset
ZipUtils#get64(byte[], int):::Fetches signed 64-bit value from byte array at specified offset
ZipUtils#get32S(byte[], int):::Fetches signed 32-bit value from byte array at specified offset
ZipUtils#loadLibrary():::Loads zip native library, if not already laoded

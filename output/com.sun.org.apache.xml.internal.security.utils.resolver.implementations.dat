ResolverAnonymous#engineIsThreadSafe()::: resolver anonymous engine is thread safe:::return
ResolverAnonymous#engineResolveURI(ResourceResolverContext)::: resolver anonymous engine resolve i:::input->new->XMLSignatureInput->input->setSecureValidation->return
ResolverAnonymous#engineCanResolveURI(ResourceResolverContext)::: resolver anonymous engine can resolve i:::if->return->return
ResolverAnonymous#engineGetPropertyKeys()::: resolver anonymous engine get property keys:::return->new->StringArr
ResolverDirectHTTP#engineIsThreadSafe()::: resolver direct p engine is thread safe:::return
ResolverDirectHTTP#engineResolveURI(ResourceResolverContext)::: resolver direct p engine resolve i:::try->uriNew->getNewURI->url->uriNew->toURL->urlConnection->openConnection->auth->urlConnection->getHeaderField->if->auth->startsWith->user->engineGetProperty->pass->engineGetProperty->if->openConnection->password->encodedPassword->XMLUtils->password->getBytes->encodeToString->urlConnection->setRequestProperty->mimeType->urlConnection->getHeaderField->try->baos->new->ByteArrayOutputStream->inputStream->urlConnection->getInputStream->buf->new->byteArr->read->summarized->while->inputStream->read->baos->write->LOG->uriNew->toString->debug->result->baos->toByteArray->new->XMLSignatureInput->result->setSecureValidation->result->uriNew->toString->setSourceURI->result->setMIMEType->return->catch->finally->catch->throw->new->ResourceResolverException->throw->new->ResourceResolverException->throw->new->ResourceResolverException->throw->new->ResourceResolverException->finally
ResolverDirectHTTP#openConnection(URL)::: resolver direct p open connection:::proxyHostProp->engineGetProperty->proxyPortProp->engineGetProperty->proxyUser->engineGetProperty->proxyPass->engineGetProperty->proxy->if->port->Integer->parseInt->new->InetSocketAddress->new->Proxy->urlConnection->if->url->openConnection->if->password->authString->XMLUtils->password->getBytes->encodeToString->urlConnection->setRequestProperty->else->url->openConnection->return
ResolverDirectHTTP#engineCanResolveURI(ResourceResolverContext):::We resolve http URIs without fragment...:::if->LOG->debug->return->if->equals->charAt->LOG->debug->return->LOG->debug->if->startsWith->startsWith->LOG->debug->return->LOG->debug->return
ResolverDirectHTTP#engineGetPropertyKeys()::: resolver direct p engine get property keys:::return->clone
ResolverDirectHTTP#getNewURI(String, String)::: resolver direct p get new i:::newUri->if->equals->new->URI->else->new->URI->resolve->if->newUri->getFragment->uriNewNoFrag->newUri->getScheme->newUri->getSchemeSpecificPart->new->URI->return->return
ResolverFragment#engineIsThreadSafe()::: resolver fragment engine is thread safe:::return
ResolverFragment#engineResolveURI(ResourceResolverContext)::: resolver fragment engine resolve i:::doc->getOwnerElement->getOwnerDocument->selectedElem->if->equals->LOG->debug->else->id->substring->doc->getElementById->if->exArgs->throw->new->ResourceResolverException->if->start->getOwnerDocument->getDocumentElement->if->XMLUtils->protectAgainstWrappingAttack->exArgs->throw->new->ResourceResolverException->LOG->debug->result->new->XMLSignatureInput->result->setSecureValidation->result->setExcludeComments->result->setMIMEType->if->length->result->concat->setSourceURI->else->result->setSourceURI->return
ResolverFragment#engineCanResolveURI(ResourceResolverContext):::Method engineCanResolve :::if->LOG->debug->return->if->equals->charAt->startsWith->LOG->debug->return->LOG->debug->return
ResolverLocalFilesystem#engineIsThreadSafe()::: resolver local filesystem engine is thread safe:::return
ResolverLocalFilesystem#engineResolveURI(ResourceResolverContext)::: resolver local filesystem engine resolve i:::try->uriNew->getNewURI->fileName->ResolverLocalFilesystem->uriNew->toString->translateUriToFilename->inputStream->Files->Paths->get->newInputStream->result->new->XMLSignatureInput->result->setSecureValidation->result->uriNew->toString->setSourceURI->return->catch->throw->new->ResourceResolverException->finally
ResolverLocalFilesystem#translateUriToFilename(String):::Method translateUriToFilename:::subStr->uri->substring->if->subStr->indexOf->offset->index->temp->subStr->length->new->StringBuilder->do->subStr->indexOf->if->temp->subStr->substring->append->else->temp->subStr->substring->append->temp->append->while->temp->toString->if->subStr->charAt->return->return
ResolverLocalFilesystem#engineCanResolveURI(ResourceResolverContext)::: resolver local filesystem engine can resolve i:::if->return->if->equals->charAt->startsWith->return->try->LOG->debug->if->startsWith->startsWith->LOG->debug->return->catch->LOG->e->getMessage->debug->finally->LOG->debug->return
ResolverLocalFilesystem#getNewURI(String, String)::: resolver local filesystem get new i:::newUri->if->equals->new->URI->else->new->URI->resolve->if->newUri->getFragment->uriNewNoFrag->newUri->getScheme->newUri->getSchemeSpecificPart->new->URI->return->return
ResolverXPointer#engineIsThreadSafe()::: resolver pointer engine is thread safe:::return
ResolverXPointer#engineResolveURI(ResourceResolverContext)::: resolver pointer engine resolve i:::resultNode->doc->getOwnerElement->getOwnerDocument->if->isXPointerSlash->else->if->isXPointerId->id->getXPointerId->doc->getElementById->if->start->getOwnerDocument->getDocumentElement->if->XMLUtils->protectAgainstWrappingAttack->exArgs->throw->new->ResourceResolverException->if->exArgs->throw->new->ResourceResolverException->result->new->XMLSignatureInput->result->setSecureValidation->result->setMIMEType->if->length->result->concat->setSourceURI->else->result->setSourceURI->return
ResolverXPointer#engineCanResolveURI(ResourceResolverContext)::: resolver pointer engine can resolve i:::if->return->if->isXPointerSlash->isXPointerId->return->return
ResolverXPointer#isXPointerSlash(String):::Method isXPointerSlash:::if->uri->equals->return->return
ResolverXPointer#isXPointerId(String):::Method isXPointerId:::if->uri->startsWith->uri->endsWith->idPlusDelim->uri->uri->length->substring->idLen->idPlusDelim->length->if->idPlusDelim->charAt->idPlusDelim->charAt->idPlusDelim->charAt->idPlusDelim->charAt->LOG->idPlusDelim->substring->debug->return->return
ResolverXPointer#getXPointerId(String):::Method getXPointerId:::if->uri->startsWith->uri->endsWith->idPlusDelim->uri->uri->length->substring->idLen->idPlusDelim->length->if->idPlusDelim->charAt->idPlusDelim->charAt->idPlusDelim->charAt->idPlusDelim->charAt->return->idPlusDelim->substring->return

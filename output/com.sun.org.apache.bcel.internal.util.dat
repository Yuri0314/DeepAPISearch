AttributeHTML#codeLink(int, int)::: attribute l code link:::return
AttributeHTML#close()::: attribute l close:::file->println->file->close
AttributeHTML#writeAttribute(Attribute, String)::: attribute l write attribute:::writeAttribute
AttributeHTML#writeAttribute(Attribute, String, int)::: attribute l write attribute:::tag->attribute->getTag->index->if->return->if->file->print->else->file->print->file->Const->getAttributeName->println->switch->c->file->c->getMaxStack->c->getMaxLocals->print->ce->c->getExceptionTable->len->if->file->print->foreach->catch_type->cex->getCatchType->file->print->if->file->constant_html->referenceConstant->print->else->file->print->file->cex->getStartPC->codeLink->cex->getEndPC->codeLink->cex->getHandlerPC->codeLink->print->file->print->break->getConstantValueIndex->file->print->break->getSourceFileIndex->file->print->break->indices->getExceptionIndexTable->file->print->foreach->file->print->file->print->break->line_numbers->getLineNumberTable->file->print->for->i->break->vars->getLocalVariableTable->file->print->foreach->var->getSignatureIndex->signature->constant_pool->getConstant->getBytes->Utility->signatureToString->start->var->getStartPC->end->var->getLength->file->Class2HTML->referenceType->var->getName->var->getIndex->println->file->print->break->classes->getInnerClasses->file->print->foreach->name->access->classe->getInnerNameIndex->if->constant_pool->getConstant->getBytes->else->Utility->classe->getInnerAccessFlags->accessToString->file->constant_html->classe->getInnerClassIndex->referenceConstant->constant_html->classe->getOuterClassIndex->referenceConstant->print->file->print->break->file->print->file->println->file->flush
BCELComparator#equals(Object, Object):::Compare two objects and return what THIS.equals(THAT) should return:::
BCELComparator#hashCode(Object):::Return hashcode for THIS.hashCode():::
BCELFactory#start()::: factory start:::if->_mg->isAbstract->_mg->isNative->for->ih->_mg->getInstructionList->getStart->ih->getNext->updateBranchTargets->updateExceptionHandlers
BCELFactory#visitInstruction(Instruction)::: factory visit instruction:::opcode->i->getOpcode->if->InstructionConst->getInstruction->_out->i->getName->toUpperCase->println->return->return
BCELFactory#visitLocalVariableInstruction(LocalVariableInstruction)::: factory visit local variable instruction:::opcode->i->getOpcode->type->i->getType->if->_out->i->getIndex->getIncrement->println->else->kind->_out->BCELifier->printType->i->getIndex->println
BCELFactory#visitArrayInstruction(ArrayInstruction)::: factory visit array instruction:::opcode->i->getOpcode->type->i->getType->kind->_out->BCELifier->printType->println
BCELFactory#visitFieldInstruction(FieldInstruction)::: factory visit field instruction:::opcode->i->getOpcode->class_name->i->getReferenceType->getSignature->field_name->i->getFieldName->type->i->getFieldType->_out->BCELifier->printType->Const->getOpcodeName->toUpperCase->println
BCELFactory#visitInvokeInstruction(InvokeInstruction)::: factory visit invoke instruction:::opcode->i->getOpcode->class_name->i->getReferenceType->getSignature->method_name->i->getMethodName->type->i->getReturnType->arg_types->i->getArgumentTypes->_out->BCELifier->printType->BCELifier->printArgumentTypes->Const->getOpcodeName->toUpperCase->println
BCELFactory#visitAllocationInstruction(AllocationInstruction)::: factory visit allocation instruction:::type->if->getType->else->getType->opcode->getOpcode->dim->switch->_out->getClassName->println->break->getDimensions->if->getBasicType->_out->BCELifier->printType->println->break->throw->new->RuntimeException
BCELFactory#createConstant(Object)::: factory create constant:::embed->value->toString->if->Utility->convertString->else->if->Integer->charValue->toHexString->else->if->else->if->else->if->ot->ot->getClassName->_out->println
BCELFactory#visitLDC(LDC)::: factory visit c:::i->getValue->createConstant
BCELFactory#visitLDC2_W(LDC2_W)::: factory visit c2_ w:::i->getValue->createConstant
BCELFactory#visitConstantPushInstruction(ConstantPushInstruction)::: factory visit constant push instruction:::i->getValue->createConstant
BCELFactory#visitINSTANCEOF(INSTANCEOF)::: factory visit f:::type->i->getType->_out->BCELifier->printType->println
BCELFactory#visitCHECKCAST(CHECKCAST)::: factory visit t:::type->i->getType->_out->BCELifier->printType->println
BCELFactory#visitReturnInstruction(ReturnInstruction)::: factory visit return instruction:::type->i->getType->_out->BCELifier->printType->println
BCELFactory#visitBranchInstruction(BranchInstruction)::: factory visit branch instruction:::bh->branch_map->get->pos->bh->getPosition->name->bi->getName->if->s->branches->add->args->new->StringBuilder->matchs->s->getMatchs->for->i->args->append->_out->bi->getName->toUpperCase->print->for->i->_out->println->else->t_pos->bh->getTarget->getPosition->target->if->else->branches->add->_out->bi->getName->toUpperCase->println->if->bh->hasTargeters->_out->println->else->_out->println
BCELFactory#visitRET(RET)::: factory visit t:::_out->i->getIndex->println
BCELFactory#updateBranchTargets()::: factory update branch targets:::foreach->bh->branch_map->get->pos->bh->getPosition->name->bi->getName->t_pos->bh->getTarget->getPosition->_out->println->if->ihs->getTargets->for->j
BCELFactory#updateExceptionHandlers()::: factory update exception handlers:::handlers->_mg->getExceptionHandlers->foreach->type->h->getCatchType->BCELifier->h->getCatchType->printType->_out->h->getStartPC->getPosition->h->getEndPC->getPosition->h->getHandlerPC->getPosition->println
BCELifier#start():::Start Java code generation:::visitJavaClass->_out->flush
BCELifier#visitJavaClass(JavaClass)::: lifier visit java class:::class_name->clazz->getClassName->super_name->clazz->getSuperclassName->package_name->clazz->getPackageName->inter->Utility->clazz->getInterfaceNames->printArray->if->equals->class_name->package_name->length->substring->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->println->_out->equals->clazz->getSourceFileName->clazz->getAccessFlags->printFlags->println->_out->println->_out->println->_out->println->_out->println->_out->println->printCreate->fields->clazz->getFields->if->_out->println->_out->println->foreach->field->accept->_out->println->_out->println->methods->clazz->getMethods->for->i->printMain->_out->println
BCELifier#printCreate()::: lifier print create:::_out->println->fields->_clazz->getFields->if->_out->println->methods->_clazz->getMethods->for->i->_out->println->_out->println->_out->println
BCELifier#printMain()::: lifier print main:::class_name->_clazz->getClassName->_out->println->_out->println->_out->println->_out->println
BCELifier#visitField(Field)::: lifier visit field:::_out->println->_out->field->getAccessFlags->printFlags->field->getSignature->printType->field->getName->println->cv->field->getConstantValue->if->value->cv->toString->_out->println->_out->println
BCELifier#visitMethod(Method)::: lifier visit method:::mg->_clazz->getClassName->new->MethodGen->_out->println->_out->method->getAccessFlags->printFlags->mg->getReturnType->printType->mg->getArgumentTypes->printArgumentTypes->Utility->mg->getArgumentNames->printArray->method->getName->_clazz->getClassName->println->_out->println->factory->new->BCELFactory->factory->start->_out->println->_out->println->_out->println->_out->println
BCELifier#printFlags(int)::: lifier print flags:::return->printFlags
BCELifier#printFlags(int, FLAGS):::Return a string with the flag settings:::if->return->buf->new->StringBuilder->for->i->pow->str->buf->toString->return->str->str->length->substring
BCELifier#printArgumentTypes(Type[])::: lifier print argument types:::if->return->args->new->StringBuilder->for->i->return->args->toString
BCELifier#printType(Type)::: lifier print type:::return->type->getSignature->printType
BCELifier#printType(String)::: lifier print type:::type->Type->getType->t->type->getType->if->return->Const->getTypeName->toUpperCase->else->if->type->toString->equals->return->else->if->type->toString->equals->return->else->if->type->toString->equals->return->else->if->at->return->at->getBasicType->printType->at->getDimensions->else->return->Utility->signatureToString
BCELifier#main(String[]):::Default main method:::if->println->println->return->java_class->getJavaClass->bcelifier->new->BCELifier->bcelifier->start
BCELifier#getJavaClass(String)::: lifier get java class:::java_class->if->Repository->lookupClass->new->ClassParser->parse->return
ByteSequence#getIndex()::: byte sequence get index:::return->byteStream->getPosition
ByteSequence#unreadByte()::: byte sequence unread byte:::byteStream->unreadByte
ByteSequence.ByteArrayStream#getPosition()::: byte array stream get position:::return
ByteSequence.ByteArrayStream#unreadByte()::: byte array stream unread byte:::if
Class2HTML#main(String[])::: class2 l main:::file_name->new->StringArr->files->parser->java_class->zip_file->sep->dir->for->i->if->println->else->for->i
Class2HTML#referenceClass(int):::Utility method that converts a class reference in the constant pool, i.e., an index to a string.:::str->constant_pool->getConstantString->Utility->compactClassName->Utility->compactClassName->return
Class2HTML#referenceType(String)::: class2 l reference type:::short_type->Utility->compactClassName->Utility->compactClassName->index->type->indexOf->base_type->if->type->substring->if->basic_types->contains->return->return
Class2HTML#toHTML(String)::: class2 l to l:::buf->new->StringBuilder->for->i->str->length->return->buf->toString
Class2HTML#writeMainHTML(AttributeHTML)::: class2 l write main l:::try->file->new->FileOutputStream->new->PrintWriter->file->println->catch->finally->attributes->java_class->getAttributes->for->i
ClassQueue#enqueue(JavaClass)::: class queue enqueue:::vec->addLast
ClassQueue#dequeue()::: class queue dequeue:::return->vec->removeFirst
ClassQueue#empty()::: class queue empty:::return->vec->isEmpty
ClassQueue#toString()::: class queue to string:::return->vec->toString
ClassSet#add(JavaClass)::: class set add:::result->if->map->clazz->getClassName->containsKey->map->clazz->getClassName->put->return
ClassSet#remove(JavaClass)::: class set remove:::map->clazz->getClassName->remove
ClassSet#empty()::: class set empty:::return->map->isEmpty
ClassSet#toArray()::: class set to array:::values->map->values->classes->values->size->new->JavaClassArr->values->toArray->return
ClassSet#getClassNames()::: class set get class names:::return->map->keySet->map->size->new->StringArr->toArray
ClassStack#push(JavaClass)::: class stack push:::stack->push
ClassStack#pop()::: class stack pop:::return->stack->pop
ClassStack#top()::: class stack top:::return->stack->peek
ClassStack#empty()::: class stack empty:::return->stack->empty
CodeHTML#codeToHTML(ByteSequence, int):::Disassemble a stream of byte codes and return the string representation.:::opcode->bytes->readUnsignedByte->name->signature->default_offset->low->high->index->class_index->vindex->constant->jump_table->no_pad_bytes->offset->buf->new->StringBuilder->buf->append->Const->getOpcodeName->append->append->if->remainder->bytes->getIndex->for->i->bytes->readInt->switch->bytes->readInt->bytes->readInt->bytes->getIndex->buf->append->new->intArr->for->i->buf->append->foreach->buf->append->append->append->append->append->append->append->buf->append->append->append->append->append->append->append->break->npairs->bytes->readInt->bytes->getIndex->new->intArr->buf->append->for->i->buf->append->for->i->buf->append->append->append->append->append->append->append->break->bytes->getIndex->bytes->readShort->buf->append->append->append->append->append->append->append->break->windex->bytes->getIndex->bytes->readInt->buf->append->append->append->append->append->append->append->break->if->bytes->readShort->else->bytes->readUnsignedByte->buf->append->append->break->buf->append->break->buf->append->Const->bytes->readByte->getTypeName->append->append->break->bytes->readShort->c1->constant_pool->getConstant->c1->getClassIndex->constant_pool->getConstantString->Utility->compactClassName->c1->getNameAndTypeIndex->field_name->constant_pool->constantToString->if->name->equals->buf->append->append->append->append->append->append->append->else->buf->constant_html->referenceConstant->append->append->append->break->bytes->readShort->buf->constant_html->referenceConstant->append->break->m_index->bytes->readShort->str->if->bytes->readUnsignedByte->bytes->readUnsignedByte->c->constant_pool->getConstant->c->getClassIndex->c->getNameAndTypeIndex->Class2HTML->referenceClass->else->if->bytes->readUnsignedByte->bytes->readUnsignedByte->c->constant_pool->getConstant->c->getNameAndTypeIndex->c->getBootstrapMethodAttrIndex->else->c->constant_pool->getConstant->c->getClassIndex->c->getNameAndTypeIndex->Class2HTML->referenceClass->Class2HTML->constant_pool->constant_pool->getConstant->constantToString->toHTML->c2->constant_pool->getConstant->constant_pool->c2->getSignatureIndex->constantToString->args->Utility->methodSignatureArgumentTypes->type->Utility->methodSignatureReturnType->buf->append->append->append->append->append->append->append->append->append->for->i->buf->append->Class2HTML->referenceType->append->break->bytes->readShort->buf->append->append->append->append->append->Class2HTML->constant_pool->constant_pool->getConstant->getTag->constantToString->toHTML->append->append->break->bytes->readUnsignedByte->buf->append->append->append->append->append->Class2HTML->constant_pool->constant_pool->getConstant->getTag->constantToString->toHTML->append->append->break->bytes->readShort->buf->constant_html->referenceConstant->append->break->bytes->readShort->dimensions->bytes->readByte->buf->constant_html->referenceConstant->append->append->append->append->break->if->bytes->readShort->bytes->readShort->else->bytes->readUnsignedByte->bytes->readByte->buf->append->append->append->append->break->if->Const->getNoOfOperands->for->i->Const->getOperandTypeCount->buf->append->return->buf->toString
CodeHTML#findGotos(ByteSequence, Code):::Find all target addresses in code, so that they can be marked with &lt;A NAME = ...&gt;:::index->bytes->available->new->BitSet->opcode->if->ce->code->getExceptionTable->foreach->goto_set->cex->getStartPC->set->goto_set->cex->getEndPC->set->goto_set->cex->getHandlerPC->set->attributes->code->getAttributes->foreach->if->attribute->getTag->vars->getLocalVariableTable->foreach->start->var->getStartPC->end->var->getLength->goto_set->set->goto_set->set->break->for->bytes->available
CodeHTML#writeMethod(Method, int):::Write a single method with the byte code associated with it.:::signature->method->getSignature->args->Utility->methodSignatureArgumentTypes->type->Utility->methodSignatureReturnType->name->method->getName->html_name->Class2HTML->toHTML->access->Utility->method->getAccessFlags->accessToString->Utility->replace->attributes->method->getAttributes->file->Class2HTML->referenceType->print->for->i->file->println->c->code->if->file->print->for->i->file->println->if->try->stream->new->ByteSequence->stream->stream->available->mark->findGotos->stream->reset->file->println->for->stream->available->catch->finally->file->println->file->println
ConstantHTML#referenceConstant(int)::: constant l reference constant:::return
ConstantHTML#writeConstant(int)::: constant l write constant:::tag->getTag->class_index->name_index->ref->file->Const->getConstantName->println->switch->if->c->constant_pool->getConstant->c->getClassIndex->c->getNameAndTypeIndex->else->c1->constant_pool->getConstant->c1->getClassIndex->c1->getNameAndTypeIndex->method_name->constant_pool->constantToString->html_method_name->Class2HTML->toHTML->method_class->constant_pool->constantToString->short_method_class->Utility->compactClassName->Utility->compactClassName->c2->constant_pool->getConstant->signature->constant_pool->c2->getSignatureIndex->constantToString->args->Utility->methodSignatureArgumentTypes->type->Utility->methodSignatureReturnType->ret_type->Class2HTML->referenceType->buf->new->StringBuilder->for->i->buf->append->arg_types->buf->toString->if->method_class->equals->getMethodNumber->else->file->println->break->c3->constant_pool->getConstant->c3->getClassIndex->c3->getNameAndTypeIndex->field_class->constant_pool->constantToString->short_field_class->Utility->compactClassName->Utility->compactClassName->field_name->constant_pool->constantToString->if->field_class->equals->else->file->println->break->c4->constant_pool->getConstant->c4->getNameIndex->class_name2->constant_pool->constantToString->short_class_name->Utility->compactClassName->Utility->compactClassName->file->println->break->c5->constant_pool->getConstant->c5->getStringIndex->str->Class2HTML->constant_pool->constantToString->toHTML->file->println->break->c6->constant_pool->getConstant->c6->getNameIndex->signature_index->c6->getSignatureIndex->file->Class2HTML->constant_pool->constantToString->toHTML->println->break->file->Class2HTML->constant_pool->constantToString->toHTML->println
ConstantHTML#getMethodNumber(String)::: constant l get method number:::for->i->return
InstructionFinder#reread():::Reread the instruction list, e.g., after you've altered the list upon a match.:::size->il->getLength->buf->new->charArr->il->getInstructionHandles->for->i->new->String
InstructionFinder#mapName(String):::Map symbolic instruction names like "getfield" to a single character.:::result->map->get->if->return->for->i->throw->new->RuntimeException
InstructionFinder#compilePattern(String):::Replace symbolic names of instructions with the appropiate character and remove all white space from string:::lower->pattern->toLowerCase->buf->new->StringBuilder->size->pattern->length->for->i->return->buf->toString
InstructionFinder#getMatch(int, int)::: instruction finder get match:::match->new->InstructionHandleArr->System->arraycopy->return
InstructionFinder#search(String, InstructionHandle, CodeConstraint):::Search for the given pattern in the instruction list:::search->compilePattern->start->for->i->if->throw->new->ClassGenException->regex->Pattern->compile->matches->new->ArrayList<>->matcher->regex->matcher->while->il_string->length->matcher->find->startExpr->matcher->start->endExpr->matcher->end->lenExpr->match->getMatch->if->constraint->checkCode->matches->add->return->matches->iterator
InstructionFinder#search(String):::Start search beginning from the start of the given instruction list.:::return->il->getStart->search
InstructionFinder#search(String, InstructionHandle):::Start search beginning from `from'.:::return->search
InstructionFinder#search(String, CodeConstraint):::Start search beginning from the start of the given instruction list:::return->il->getStart->search
InstructionFinder#makeChar(short):::Convert opcode number to char.:::return
InstructionFinder#getInstructionList()::: instruction finder get instruction list:::return
InstructionFinder.CodeConstraint#checkCode(InstructionHandle[])::: code constraint check code:::
InstructionFinder#precompile(short, short, short)::: instruction finder precompile:::buf->new->StringBuilder->for->i->buf->makeChar->append->buf->append->return->buf->toString
MethodHTML#writeField(Field):::Print field of class.:::type->Utility->field->getSignature->signatureToString->name->field->getName->access->Utility->field->getAccessFlags->accessToString->attributes->Utility->replace->file->Class2HTML->referenceType->print->field->getAttributes->for->i->for->i->file->println
MethodHTML#writeMethod(Method, int)::: method l write method:::signature->method->getSignature->args->Utility->methodSignatureArgumentTypes->type->Utility->methodSignatureReturnType->name->method->getName->html_name->access->Utility->method->getAccessFlags->accessToString->attributes->method->getAttributes->Utility->replace->Class2HTML->toHTML->file->print->file->Class2HTML->referenceType->print->for->i->file->print->for->i
ModularRuntimeImage#close()::: modular runtime image close:::if->if->classLoader->close->if->fileSystem->close
ModularRuntimeImage#list(Path):::Lists all entries in the given directory.:::list->new->ArrayList<>->try->ds->Files->newDirectoryStream->iterator->ds->iterator->while->iterator->hasNext->list->iterator->next->add->catch->finally->return
ModularRuntimeImage#list(String):::Lists all entries in the given directory.:::return->fileSystem->getPath->list
ModularRuntimeImage#modules():::Lists all modules.:::return->list
ModularRuntimeImage#packages():::Lists all packages.:::return->list
ModularRuntimeImage#getFileSystem()::: modular runtime image get file system:::return
Repository#storeClass(JavaClass):::Stores the provided class under "clazz.getClassName()":::
Repository#removeClass(JavaClass):::Removes class from repository:::
Repository#findClass(String):::Finds the class with the name provided, if the class isn't there, return NULL.:::
Repository#loadClass(String):::Finds the class with the name provided, if the class isn't there, make an attempt to load it.:::
Repository#loadClass(Class):::Finds the JavaClass instance for the given run-time class object:::
Repository#clear():::Clears all entries from cache.:::
SyntheticRepository#getInstance()::: synthetic repository get instance:::return->new->SyntheticRepository
SyntheticRepository#storeClass(JavaClass):::Store a new JavaClass instance into this Repository.:::loadedClasses->clazz->getClassName->new->SoftReference<>->put->clazz->setRepository
SyntheticRepository#removeClass(JavaClass):::Remove class from repository:::loadedClasses->clazz->getClassName->remove
SyntheticRepository#findClass(String):::Find an already defined (cached) JavaClass object by name.:::ref->loadedClasses->get->if->return->return->ref->get
SyntheticRepository#loadClass(String):::Finds a JavaClass object by name:::if->className->isEmpty->throw->new->IllegalArgumentException->className->replace->clazz->findClass->if->return->e->new->IOException->throw->new->ClassNotFoundException
SyntheticRepository#loadClass(Class):::Find the JavaClass object for a runtime Class object:::className->clazz->getName->repositoryClass->findClass->if->return->name->i->name->lastIndexOf->if->name->substring->cls->try->clsStream->clazz->getResourceAsStream->return->loadClass->catch->return->finally
SyntheticRepository#loadClass(InputStream, String)::: synthetic repository load class:::try->if->parser->new->ClassParser->clazz->parser->parse->storeClass->return->catch->throw->new->ClassNotFoundException->finally->if->try->is->close->catch->finally->throw->new->ClassNotFoundException
SyntheticRepository#clear():::Clear all entries from cache.:::loadedClasses->clear

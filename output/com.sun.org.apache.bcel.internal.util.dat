BCELComparator#equals(Object, Object):::Compare two objects and return what THIS.equals(THAT) should return:::
BCELComparator#hashCode(Object):::Return hashcode for THIS.hashCode():::
BCELifier#start():::Start Java code generation:::visitJavaClass->_out->flush
BCELifier#printFlags(int, FLAGS):::Return a string with the flag settings:::if->return->buf->new->StringBuilder->for->i->pow->str->buf->toString->return->str->str->length->substring
BCELifier#main(String[]):::Default main method:::if->println->println->return->java_class->getJavaClass->bcelifier->new->BCELifier->bcelifier->start
Class2HTML#referenceClass(int):::Utility method that converts a class reference in the constant pool, i.e., an index to a string.:::str->constant_pool->getConstantString->Utility->compactClassName->Utility->compactClassName->return
InstructionFinder#reread():::Reread the instruction list, e.g., after you've altered the list upon a match.:::size->il->getLength->buf->new->charArr->il->getInstructionHandles->for->i->new->String
InstructionFinder#search(String, InstructionHandle, CodeConstraint):::Search for the given pattern in the instruction list:::search->compilePattern->start->for->i->if->throw->new->ClassGenException->regex->Pattern->compile->matches->new->ArrayList<>->matcher->regex->matcher->while->il_string->length->matcher->find->startExpr->matcher->start->endExpr->matcher->end->lenExpr->match->getMatch->if->constraint->checkCode->matches->add->return->matches->iterator
InstructionFinder#search(String):::Start search beginning from the start of the given instruction list.:::return->il->getStart->search
InstructionFinder#search(String, InstructionHandle):::Start search beginning from `from'.:::return->search
InstructionFinder#search(String, CodeConstraint):::Start search beginning from the start of the given instruction list:::return->il->getStart->search
ModularRuntimeImage#list(Path):::Lists all entries in the given directory.:::list->new->ArrayList<>->try->ds->Files->newDirectoryStream->iterator->ds->iterator->while->iterator->hasNext->list->iterator->next->add->catch->finally->return
ModularRuntimeImage#list(String):::Lists all entries in the given directory.:::return->fileSystem->getPath->list
ModularRuntimeImage#modules():::Lists all modules.:::return->list
ModularRuntimeImage#packages():::Lists all packages.:::return->list
Repository#storeClass(JavaClass):::Stores the provided class under "clazz.getClassName()":::
Repository#removeClass(JavaClass):::Removes class from repository:::
Repository#findClass(String):::Finds the class with the name provided, if the class isn't there, return NULL.:::
Repository#loadClass(String):::Finds the class with the name provided, if the class isn't there, make an attempt to load it.:::
Repository#loadClass(Class):::Finds the JavaClass instance for the given run-time class object:::
Repository#clear():::Clears all entries from cache.:::
SyntheticRepository#storeClass(JavaClass):::Store a new JavaClass instance into this Repository.:::loadedClasses->clazz->getClassName->new->SoftReference<>->put->clazz->setRepository
SyntheticRepository#removeClass(JavaClass):::Remove class from repository:::loadedClasses->clazz->getClassName->remove
SyntheticRepository#findClass(String):::Find an already defined (cached) JavaClass object by name.:::ref->loadedClasses->get->if->return->return->ref->get
SyntheticRepository#loadClass(String):::Finds a JavaClass object by name:::if->className->isEmpty->throw->new->IllegalArgumentException->className->replace->clazz->findClass->if->return->e->new->IOException->throw->new->ClassNotFoundException
SyntheticRepository#loadClass(Class):::Find the JavaClass object for a runtime Class object:::className->clazz->getName->repositoryClass->findClass->if->return->name->i->name->lastIndexOf->if->name->substring->cls->try->clsStream->clazz->getResourceAsStream->return->loadClass->catch->return->finally
SyntheticRepository#clear():::Clear all entries from cache.:::loadedClasses->clear

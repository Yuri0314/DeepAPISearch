com.sun.org.apache.bcel.internal.util.AttributeHTML#close()->void::: attribute l close
com.sun.org.apache.bcel.internal.util.AttributeHTML#writeAttribute(Attribute, String)->void::: attribute l write attribute
com.sun.org.apache.bcel.internal.util.AttributeHTML#writeAttribute(Attribute, String, int)->void::: attribute l write attribute
com.sun.org.apache.bcel.internal.util.BCELComparator#equals(Object, Object)->boolean:::Compare two objects and return what THIS.equals(THAT) should return
com.sun.org.apache.bcel.internal.util.BCELComparator#hashCode(Object)->int:::Return hashcode for THIS.hashCode()
com.sun.org.apache.bcel.internal.util.BCELFactory#start()->void::: factory start
com.sun.org.apache.bcel.internal.util.BCELFactory#visitLocalVariableInstruction(LocalVariableInstruction)->void::: factory visit local variable instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitArrayInstruction(ArrayInstruction)->void::: factory visit array instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitFieldInstruction(FieldInstruction)->void::: factory visit field instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitInvokeInstruction(InvokeInstruction)->void::: factory visit invoke instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitAllocationInstruction(AllocationInstruction)->void::: factory visit allocation instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitLDC(LDC)->void::: factory visit c
com.sun.org.apache.bcel.internal.util.BCELFactory#visitLDC2_W(LDC2_W)->void::: factory visit c2_ w
com.sun.org.apache.bcel.internal.util.BCELFactory#visitConstantPushInstruction(ConstantPushInstruction)->void::: factory visit constant push instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitINSTANCEOF(INSTANCEOF)->void::: factory visit f
com.sun.org.apache.bcel.internal.util.BCELFactory#visitCHECKCAST(CHECKCAST)->void::: factory visit t
com.sun.org.apache.bcel.internal.util.BCELFactory#visitReturnInstruction(ReturnInstruction)->void::: factory visit return instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitBranchInstruction(BranchInstruction)->void::: factory visit branch instruction
com.sun.org.apache.bcel.internal.util.BCELFactory#visitRET(RET)->void::: factory visit t
com.sun.org.apache.bcel.internal.util.BCELifier#start()->void:::Start Java code generation
com.sun.org.apache.bcel.internal.util.BCELifier#visitJavaClass(JavaClass)->void::: lifier visit java class
com.sun.org.apache.bcel.internal.util.BCELifier#visitField(Field)->void::: lifier visit field
com.sun.org.apache.bcel.internal.util.BCELifier#visitMethod(Method)->void::: lifier visit method
com.sun.org.apache.bcel.internal.util.BCELifier#printFlags(int)->String::: lifier print flags
com.sun.org.apache.bcel.internal.util.BCELifier#printFlags(int, FLAGS)->String:::Return a string with the flag settings
com.sun.org.apache.bcel.internal.util.BCELifier#printArgumentTypes(Type[])->String::: lifier print argument types
com.sun.org.apache.bcel.internal.util.BCELifier#printType(Type)->String::: lifier print type
com.sun.org.apache.bcel.internal.util.BCELifier#printType(String)->String::: lifier print type
com.sun.org.apache.bcel.internal.util.BCELifier#main(String[])->void:::Default main method
com.sun.org.apache.bcel.internal.util.BCELifier#getJavaClass(String)->JavaClass::: lifier get java class
com.sun.org.apache.bcel.internal.util.ByteSequence#getIndex()->int::: byte sequence get index
com.sun.org.apache.bcel.internal.util.ByteSequence#unreadByte()->void::: byte sequence unread byte
com.sun.org.apache.bcel.internal.util.Class2HTML#main(String[])->void::: class2 l main
com.sun.org.apache.bcel.internal.util.Class2HTML#referenceClass(int)->String:::Utility method that converts a class reference in the constant pool, i.e., an index to a string.
com.sun.org.apache.bcel.internal.util.Class2HTML#referenceType(String)->String::: class2 l reference type
com.sun.org.apache.bcel.internal.util.Class2HTML#toHTML(String)->String::: class2 l to l
com.sun.org.apache.bcel.internal.util.ClassQueue#enqueue(JavaClass)->void::: class queue enqueue
com.sun.org.apache.bcel.internal.util.ClassQueue#dequeue()->JavaClass::: class queue dequeue
com.sun.org.apache.bcel.internal.util.ClassQueue#empty()->boolean::: class queue empty
com.sun.org.apache.bcel.internal.util.ClassQueue#toString()->String::: class queue to string
com.sun.org.apache.bcel.internal.util.ClassSet#add(JavaClass)->boolean::: class set add
com.sun.org.apache.bcel.internal.util.ClassSet#remove(JavaClass)->void::: class set remove
com.sun.org.apache.bcel.internal.util.ClassSet#empty()->boolean::: class set empty
com.sun.org.apache.bcel.internal.util.ClassSet#toArray()->JavaClass[]::: class set to array
com.sun.org.apache.bcel.internal.util.ClassSet#getClassNames()->String[]::: class set get class names
com.sun.org.apache.bcel.internal.util.ClassStack#push(JavaClass)->void::: class stack push
com.sun.org.apache.bcel.internal.util.ClassStack#pop()->JavaClass::: class stack pop
com.sun.org.apache.bcel.internal.util.ClassStack#top()->JavaClass::: class stack top
com.sun.org.apache.bcel.internal.util.ClassStack#empty()->boolean::: class stack empty
com.sun.org.apache.bcel.internal.util.ConstantHTML#referenceConstant(int)->String::: constant l reference constant
com.sun.org.apache.bcel.internal.util.InstructionFinder#reread()->void:::Reread the instruction list, e.g., after you've altered the list upon a match.
com.sun.org.apache.bcel.internal.util.InstructionFinder#search(String, InstructionHandle, CodeConstraint)->Iterator:::Search for the given pattern in the instruction list
com.sun.org.apache.bcel.internal.util.InstructionFinder#search(String)->Iterator:::Start search beginning from the start of the given instruction list.
com.sun.org.apache.bcel.internal.util.InstructionFinder#search(String, InstructionHandle)->Iterator:::Start search beginning from `from'.
com.sun.org.apache.bcel.internal.util.InstructionFinder#search(String, CodeConstraint)->Iterator:::Start search beginning from the start of the given instruction list
com.sun.org.apache.bcel.internal.util.InstructionFinder#getInstructionList()->InstructionList::: instruction finder get instruction list
com.sun.org.apache.bcel.internal.util.InstructionFinder.CodeConstraint#checkCode(InstructionHandle[])->boolean::: code constraint check code
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#close()->void::: modular runtime image close
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#list(Path)->List:::Lists all entries in the given directory.
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#list(String)->List:::Lists all entries in the given directory.
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#modules()->List:::Lists all modules.
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#packages()->List:::Lists all packages.
com.sun.org.apache.bcel.internal.util.ModularRuntimeImage#getFileSystem()->FileSystem::: modular runtime image get file system
com.sun.org.apache.bcel.internal.util.Repository#storeClass(JavaClass)->void:::Stores the provided class under "clazz.getClassName()"
com.sun.org.apache.bcel.internal.util.Repository#removeClass(JavaClass)->void:::Removes class from repository
com.sun.org.apache.bcel.internal.util.Repository#findClass(String)->JavaClass:::Finds the class with the name provided, if the class isn't there, return NULL.
com.sun.org.apache.bcel.internal.util.Repository#loadClass(String)->JavaClass:::Finds the class with the name provided, if the class isn't there, make an attempt to load it.
com.sun.org.apache.bcel.internal.util.Repository#loadClass(Class)->JavaClass:::Finds the JavaClass instance for the given run-time class object
com.sun.org.apache.bcel.internal.util.Repository#clear()->void:::Clears all entries from cache.
com.sun.org.apache.bcel.internal.util.SyntheticRepository#getInstance()->SyntheticRepository::: synthetic repository get instance
com.sun.org.apache.bcel.internal.util.SyntheticRepository#storeClass(JavaClass)->void:::Store a new JavaClass instance into this Repository.
com.sun.org.apache.bcel.internal.util.SyntheticRepository#removeClass(JavaClass)->void:::Remove class from repository
com.sun.org.apache.bcel.internal.util.SyntheticRepository#findClass(String)->JavaClass:::Find an already defined (cached) JavaClass object by name.
com.sun.org.apache.bcel.internal.util.SyntheticRepository#loadClass(String)->JavaClass:::Finds a JavaClass object by name
com.sun.org.apache.bcel.internal.util.SyntheticRepository#loadClass(Class)->JavaClass:::Find the JavaClass object for a runtime Class object
com.sun.org.apache.bcel.internal.util.SyntheticRepository#clear()->void:::Clear all entries from cache.

com.sun.tools.sjavac.comp.CompilationService#getSysInfo()->SysInfo::: compilation service get sys info
com.sun.tools.sjavac.comp.CompilationService#compile(String, String, String[], List, Set, Set)->CompilationSubResult::: compilation service compile
com.sun.tools.sjavac.comp.FileObjectWithLocation#getLocation()->Location::: file object with location get location
com.sun.tools.sjavac.comp.FileObjectWithLocation#getDelegate()->FileObject::: file object with location get delegate
com.sun.tools.sjavac.comp.FileObjectWithLocation#toString()->String::: file object with location to string
com.sun.tools.sjavac.comp.JavaFileObjectWithLocation#getLocation()->Location::: java file object with location get location
com.sun.tools.sjavac.comp.JavaFileObjectWithLocation#getDelegate()->F::: java file object with location get delegate
com.sun.tools.sjavac.comp.JavaFileObjectWithLocation#toString()->String::: java file object with location to string
com.sun.tools.sjavac.comp.JavaFileObjectWithLocation#hashCode()->int::: java file object with location hash code
com.sun.tools.sjavac.comp.JavaFileObjectWithLocation#equals(Object)->boolean::: java file object with location equals
com.sun.tools.sjavac.comp.PathAndPackageVerifier#finished(TaskEvent)->void::: path and package verifier finished
com.sun.tools.sjavac.comp.PathAndPackageVerifier#errorsDiscovered()->boolean::: path and package verifier errors discovered
com.sun.tools.sjavac.comp.PooledSjavac#compile(String[])->Result::: pooled sjavac compile
com.sun.tools.sjavac.comp.PooledSjavac#shutdown()->void::: pooled sjavac shutdown
com.sun.tools.sjavac.comp.PubAPIs#instance(Context)->PubAPIs::: pub is instance
com.sun.tools.sjavac.comp.PubAPIs#getPubapis(Collection, boolean)->Map:::Convert the map from class names to their pubapi to a map from package names to their pubapi.
com.sun.tools.sjavac.comp.PubAPIs#visitPubapi(Element)->void:::Visit the api of a class and construct a pubapi and store it into the pubapi_perclass map.
com.sun.tools.sjavac.comp.PubapiVisitor#visitType(TypeElement, Void)->Void::: pubapi visitor visit type
com.sun.tools.sjavac.comp.PubapiVisitor#visitVariable(VariableElement, Void)->Void::: pubapi visitor visit variable
com.sun.tools.sjavac.comp.PubapiVisitor#visitExecutable(ExecutableElement, Void)->Void::: pubapi visitor visit executable
com.sun.tools.sjavac.comp.PubapiVisitor#getCollectedPubApi()->PubApi::: pubapi visitor get collected pub api
com.sun.tools.sjavac.comp.SjavacImpl#compile(String[])->Result::: sjavac impl compile
com.sun.tools.sjavac.comp.SjavacImpl#shutdown()->void::: sjavac impl shutdown
com.sun.tools.sjavac.comp.SjavacImpl#findSourceFiles(List, Set, Map, Map, Module, boolean, boolean)->void:::Find source files in the given source locations.
com.sun.tools.sjavac.comp.SmartFileManager#setVisibleSources(Set)->void::: smart file manager set visible sources
com.sun.tools.sjavac.comp.SmartFileManager#cleanArtifacts()->void::: smart file manager clean artifacts
com.sun.tools.sjavac.comp.SmartFileManager#setSymbolFileEnabled(boolean)->void:::Set whether or not to use ct.sym as an alternate to rt.jar.
com.sun.tools.sjavac.comp.SmartFileManager#inferBinaryName(Location, JavaFileObject)->String::: smart file manager infer binary name
com.sun.tools.sjavac.comp.SmartFileManager#getPackageArtifacts()->Map>::: smart file manager get package artifacts
com.sun.tools.sjavac.comp.SmartFileManager#list(Location, String, Set, boolean)->Iterable::: smart file manager list
com.sun.tools.sjavac.comp.SmartFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject::: smart file manager get java file for input
com.sun.tools.sjavac.comp.SmartFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject::: smart file manager get java file for output
com.sun.tools.sjavac.comp.SmartFileManager#getFileForInput(Location, String, String)->FileObject::: smart file manager get file for input
com.sun.tools.sjavac.comp.SmartFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: smart file manager get file for output
com.sun.tools.sjavac.comp.SmartFileManager#getLocationForModule(Location, JavaFileObject)->Location::: smart file manager get location for module
com.sun.tools.sjavac.comp.SmartFileManager#addArtifact(String, URI)->void::: smart file manager add artifact
com.sun.tools.sjavac.comp.SmartFileManager#locWrap(JavaFileObject, Location)->JavaFileObject::: smart file manager loc wrap
com.sun.tools.sjavac.comp.SmartFileManager#isSameFile(FileObject, FileObject)->boolean::: smart file manager is same file
com.sun.tools.sjavac.comp.SmartFileObject#equals(Object)->boolean::: smart file object equals
com.sun.tools.sjavac.comp.SmartFileObject#hashCode()->int::: smart file object hash code
com.sun.tools.sjavac.comp.SmartFileObject#getKind()->Kind::: smart file object get kind
com.sun.tools.sjavac.comp.SmartFileObject#isNameCompatible(String, Kind)->boolean::: smart file object is name compatible
com.sun.tools.sjavac.comp.SmartFileObject#toUri()->URI::: smart file object to uri
com.sun.tools.sjavac.comp.SmartFileObject#getName()->String::: smart file object get name
com.sun.tools.sjavac.comp.SmartFileObject#openInputStream()->InputStream::: smart file object open input stream
com.sun.tools.sjavac.comp.SmartFileObject#openOutputStream()->OutputStream::: smart file object open output stream
com.sun.tools.sjavac.comp.SmartFileObject#getCharContent(boolean)->CharSequence::: smart file object get char content
com.sun.tools.sjavac.comp.SmartFileObject#openWriter()->Writer::: smart file object open writer
com.sun.tools.sjavac.comp.SmartFileObject#getLastModified()->long::: smart file object get last modified
com.sun.tools.sjavac.comp.SmartFileObject#delete()->boolean::: smart file object delete
com.sun.tools.sjavac.comp.SmartFileObject#getAccessLevel()->Modifier::: smart file object get access level
com.sun.tools.sjavac.comp.SmartFileObject#getNestingKind()->NestingKind::: smart file object get nesting kind
com.sun.tools.sjavac.comp.SmartFileObject#openReader(boolean)->Reader::: smart file object open reader
com.sun.tools.sjavac.comp.SmartWriter#write(char[], int, int)->void::: smart writer write
com.sun.tools.sjavac.comp.SmartWriter#close()->void::: smart writer close
com.sun.tools.sjavac.comp.SmartWriter#flush()->void::: smart writer flush

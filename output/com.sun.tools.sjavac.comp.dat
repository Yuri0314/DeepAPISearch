CompilationService#getSysInfo()::: compilation service get sys info:::return->Runtime->getRuntime->availableProcessors->Runtime->getRuntime->maxMemory->new->SysInfo
CompilationService#compile(String, String, String[], List, Set, Set)::: compilation service compile:::compiler->ToolProvider->getSystemJavaCompiler->try->fm->compiler->getStandardFileManager->sfm->new->SmartFileManager->context->new->Context->preRegister->compilationResult->new->CompilationSubResult->explicitJFOs->new->ListBuffer<>->foreach->fm->getJavaFileObjectsFromFiles->explicitJFOs->SmartFileManager->locWrap->append->sourcesToCompileFiles->new->ListBuffer<>->foreach->sourcesToCompileFiles->new->File->append->foreach->fm->getJavaFileObjectsFromFiles->explicitJFOs->SmartFileManager->locWrap->append->stderrLog->new->StringWriter->result->pubApiCollector->new->PublicApiCollector->papVerifier->new->PathAndPackageVerifier->depsCollector->new->NewDependencyCollector->try->if->explicitJFOs->size->sfm->setVisibleSources->sfm->cleanArtifacts->task->compiler->new->PrintWriter->Arrays->asList->getTask->sfm->instance->isSet->setSymbolFileEnabled->task->addTaskListener->task->addTaskListener->task->addTaskListener->logJavacInvocation->task->doCall->Log->debug->sfm->flush->else->catch->Log->Util->getStackTrace->error->stderrLog->Util->getStackTrace->append->finally->sfm->getPackageArtifacts->if->papVerifier->errorsDiscovered->depsCollector->getDependencies->depsCollector->getDependencies->pubApiCollector->getPubApis->pubApiCollector->getPubApis->stderrLog->toString->return->catch->throw->new->Error->finally
CompilationService#logJavacInvocation(String[])::: compilation service log javac invocation:::Log->debug->argIter->Arrays->asList->iterator->while->argIter->hasNext->arg->argIter->next->line->if->arg->matches->argIter->hasNext->argIter->next->Log->debug
FileObjectWithLocation#getLocation()::: file object with location get location:::return
FileObjectWithLocation#getDelegate()::: file object with location get delegate:::return
FileObjectWithLocation#toString()::: file object with location to string:::return
JavaFileObjectWithLocation#getLocation()::: java file object with location get location:::return
JavaFileObjectWithLocation#getDelegate()::: java file object with location get delegate:::return
JavaFileObjectWithLocation#toString()::: java file object with location to string:::return
JavaFileObjectWithLocation#hashCode()::: java file object with location hash code:::return->loc->hashCode->fileObject->hashCode
JavaFileObjectWithLocation#equals(Object)::: java file object with location equals:::if->return->other->return->loc->equals->fileObject->equals
PathAndPackageVerifier#finished(TaskEvent)::: path and package verifier finished:::if->e->getKind->cu->e->getCompilationUnit->if->return->jfo->cu->getSourceFile->if->return->pkg->cu->getPackageName->if->return->dir->Paths->jfo->toUri->get->normalize->getParent->if->checkPathAndPackage->misplacedCompilationUnits->add->if->e->getKind->foreach->Log->error->Log->Paths->cu->getSourceFile->toUri->get->getParent->error->Log->cu->getPackageName->error
PathAndPackageVerifier#errorsDiscovered()::: path and package verifier errors discovered:::return->misplacedCompilationUnits->size
PathAndPackageVerifier#checkPathAndPackage(Path, JCTree)::: path and package verifier check path and package:::pathIter->new->ParentIterator->pkgIter->new->EnclosingPkgIterator->while->pathIter->hasNext->pkgIter->hasNext->if->pathIter->next->pkgIter->next->equals->return->return->pkgIter->hasNext
PathAndPackageVerifier.ParentIterator#hasNext()::: parent iterator has next:::return
PathAndPackageVerifier.ParentIterator#next()::: parent iterator next:::tmp->next->getFileName->toString->next->getParent->return
PathAndPackageVerifier.EnclosingPkgIterator#hasNext()::: enclosing pkg iterator has next:::return
PathAndPackageVerifier.EnclosingPkgIterator#next()::: enclosing pkg iterator next:::name->if->else->fa->return->name->toString
PooledSjavac#compile(String[])::: pooled sjavac compile:::log->Log->get->try->return->pool->Log->setLogForCurrentThread->return->delegate->compile->submit->get->catch->e->printStackTrace->throw->new->RuntimeException->finally
PooledSjavac#shutdown()::: pooled sjavac shutdown:::Log->debug->pool->shutdown->try->if->pool->awaitTermination->pool->shutdownNow->if->pool->awaitTermination->Log->error->catch->pool->shutdownNow->Thread->currentThread->interrupt->finally->delegate->shutdown
PubAPIs#instance(Context)::: pub is instance:::instance->context->get->if->new->PubAPIs->return
PubAPIs#getPubapis(Collection, boolean):::Convert the map from class names to their pubapi to a map from package names to their pubapi.:::result->new->HashMap<>->foreach->publicApiPerClass->keySet->amongExplicits->explicitJFOs->contains->if->continue->pkg->cs->packge->currentPubApi->result->new->PubApi->getOrDefault->result->PubApi->publicApiPerClass->get->mergeTypes->put->return
PubAPIs#visitPubapi(Element):::Visit the api of a class and construct a pubapi and store it into the pubapi_perclass map.:::if->return->v->new->PubapiVisitor->v->visit->publicApiPerClass->v->getCollectedPubApi->put
PubapiVisitor#isNonPrivate(Element)::: pubapi visitor is non private:::return->e->getModifiers->contains
PubapiVisitor#visitType(TypeElement, Void)::: pubapi visitor visit type:::if->isNonPrivate->prevApi->new->PubApi->super->visitType->if->isAnonymous->name->toString->t->e->getModifiers->new->PubType->put->return
PubapiVisitor#isAnonymous(TypeElement)::: pubapi visitor is anonymous:::return->e->getQualifiedName->length
PubapiVisitor#encodeChar(int)::: pubapi visitor encode char:::return->String->format
PubapiVisitor#visitVariable(VariableElement, Void)::: pubapi visitor visit variable:::if->isNonPrivate->constVal->e->getConstantValue->constValStr->if->if->e->asType->toString->equals->c->constVal->toString->charAt->encodeChar->else->constVal->toString->chars->PubapiVisitor->encodeChar->mapToObj->Collectors->joining->collect->v->e->getModifiers->TypeDesc->e->asType->fromType->e->toString->new->PubVar->put->return
PubapiVisitor#visitExecutable(ExecutableElement, Void)::: pubapi visitor visit executable:::if->isNonPrivate->m->e->getModifiers->e->getTypeParameters->getTypeParameters->TypeDesc->e->getReturnType->fromType->e->getSimpleName->toString->getParamTypes->getTypeDescs->e->getThrownTypes->getTypeDescs->new->PubMethod->m->asSignatureString->put->return
PubapiVisitor#getTypeParameters(List)::: pubapi visitor get type parameters:::return->elements->stream->e->getSimpleName->toString->e->getBounds->getTypeDescs->new->PubApiTypeParam->map->Collectors->toList->collect
PubapiVisitor#getParamTypes(ExecutableElement)::: pubapi visitor get param types:::return->e->getParameters->stream->VariableElement->asType->map->Collectors->toList->collect
PubapiVisitor#getTypeDescs(List)::: pubapi visitor get type descs:::return->list->stream->TypeDesc->fromType->map->Collectors->toList->collect
PubapiVisitor#getCollectedPubApi()::: pubapi visitor get collected pub api:::return
SjavacImpl#compile(String[])::: sjavac impl compile:::options->try->Options->parseArgs->catch->Log->e->getMessage->error->return->finally->if->validateOptions->return->if->options->getSources->options->getDestDir->srcDstOverlap->return->if->options->getDestDir->createIfMissing->return->stateDir->options->getStateDir->if->options->getStateDir->createIfMissing->return->gensrc->options->getGenSrcDir->if->createIfMissing->return->hdrdir->options->getHeaderDir->if->createIfMissing->return->if->context->new->Context->strWriter->new->StringWriter->printWriter->new->PrintWriter->preRegister->JavacFileManager->preRegister->passThroughArgs->Stream->of->arg->startsWith->filter->String[]->new->toArray->result->new->Main->compile->printWriter->flush->Util->strWriter->toString->getLines->Log->error->forEach->fileManager->context->get->if->try->close->catch->throw->new->UncheckedIOException->finally->return->else->javac_state->JavacState->load->suffixRules->new->HashMap<>->suffixRules->javac_state->getJavaSuffixRule->putAll->suffixRules->options->getTranslationRules->putAll->modules->new->HashMap<>->current_module->new->Module->modules->put->try->sources->new->HashMap<>->options->getSources->suffixRules->keySet->options->isDefaultPackagePermitted->findSourceFiles->if->sources->isEmpty->Log->error->return->sources_to_link_to->new->HashMap<>->sourceResolutionLocations->new->ArrayList<>->sourceResolutionLocations->options->getSources->addAll->sourceResolutionLocations->options->getSourceSearchPaths->addAll->Collections->singleton->options->isDefaultPackagePermitted->findSourceFiles->javac_state->now->flattenPackagesSourcesAndArtifacts->javac_state->now->checkInternalState->javac_state->now->checkInternalState->javac_state->setVisibleSources->round->printRound->javac_state->checkSourceStatus->javac_state->findAllArtifacts->if->options->areUnidentifiedArtifactsPermitted->javac_state->removeUnidentifiedArtifacts->javac_state->taintPackagesThatMissArtifacts->javac_state->taintPackagesDependingOnChangedClasspathPackages->javac_state->deleteClassArtifactsInTaintedPackages->javac_state->Util->options->getDestDir->pathToFile->performCopying->javac_state->Util->pathToFile->performTranslation->generated_sources->new->HashMap<>->Source->Util->options->getGenSrcDir->pathToFile->Util->set->Collections->emptyList->Collections->emptyList->scanRoot->javac_state->now->flattenPackagesSourcesAndArtifacts->javac_state->checkSourceStatus->javac_state->Util->options->getSourceReferenceList->pathToFile->compareWithMakefileList->again->recently_compiled->new->HashSet<>->rc->new->booleanArr->compilationService->new->CompilationService->do->if->printRound->javac_state->deleteClassArtifactsInTaintedPackages->javac_state->performJavaCompilations->if->Log->debug->break->if->Log->debug->while->Log->debug->if->javac_state->save->javac_state->now->flattenArtifacts->javac_state->removeSuperfluousArtifacts->return->catch->Log->e->getMessage->error->Log->debug->return->Log->error->return->finally
SjavacImpl#shutdown()::: sjavac impl shutdown:::
SjavacImpl#validateOptions(Options)::: sjavac impl validate options:::err->if->options->getDestDir->else->if->options->isJavaFilesAmongJavacArgs->else->if->options->getImplicitPolicy->equals->else->if->options->getSources->isEmpty->options->getStateDir->else->if->options->getTranslationRules->size->options->getGenSrcDir->if->Log->error->return
SjavacImpl#srcDstOverlap(List, Path)::: sjavac impl src dst overlap:::foreach->if->loc->getPath->isOverlapping->Log->loc->getPath->error->return->return
SjavacImpl#isOverlapping(Path, Path)::: sjavac impl is overlapping:::p1->toAbsolutePath->normalize->p2->toAbsolutePath->normalize->return->p1->startsWith->p2->startsWith
SjavacImpl#createIfMissing(Path)::: sjavac impl create if missing:::if->Files->isDirectory->return->if->Files->exists->Log->error->return->try->Files->createDirectories->catch->Log->e->getMessage->error->return->finally->return
SjavacImpl#findSourceFiles(List, Set, Map, Map, Module, boolean, boolean):::Find source files in the given source locations.:::foreach->source->findSourceFiles
SjavacImpl#printRound(int)::: sjavac impl print round:::Log->debug->Log->debug->Log->debug
SmartFileManager#setVisibleSources(Set)::: smart file manager set visible sources:::
SmartFileManager#cleanArtifacts()::: smart file manager clean artifacts:::new->HashMap<>
SmartFileManager#setSymbolFileEnabled(boolean):::Set whether or not to use ct.sym as an alternate to rt.jar.:::if->throw->new->IllegalStateException->setSymbolFileEnabled
SmartFileManager#inferBinaryName(Location, JavaFileObject)::: smart file manager infer binary name:::return->super->locUnwrap->inferBinaryName
SmartFileManager#getPackageArtifacts()::: smart file manager get package artifacts:::return
SmartFileManager#list(Location, String, Set, boolean)::: smart file manager list:::files->super->list->if->visibleSources->isEmpty->return->locWrapMany->filteredFiles->new->ListBuffer<>->foreach->uri->f->toUri->t->uri->toString->if->t->startsWith->t->endsWith->visibleSources->contains->filteredFiles->add->return->locWrapMany
SmartFileManager#getJavaFileForInput(Location, String, Kind)::: smart file manager get java file for input:::file->super->getJavaFileForInput->locWrap->if->visibleSources->isEmpty->return->if->visibleSources->file->toUri->contains->isModuleInfo->return->return
SmartFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)::: smart file manager get java file for output:::file->super->getJavaFileForOutput->locWrap->if->return->dp->className->lastIndexOf->pkg_name->if->className->substring->mod_name->file->toUri->addArtifact->return
SmartFileManager#getFileForInput(Location, String, String)::: smart file manager get file for input:::file->super->getFileForInput->locWrap->if->visibleSources->isEmpty->return->if->visibleSources->file->toUri->contains->isModuleInfo->return->return
SmartFileManager#isModuleInfo(FileObject)::: smart file manager is module info:::if->jfo->return->jfo->isNameCompatible->jfo->isNameCompatible->return
SmartFileManager#getFileForOutput(Location, String, String, FileObject)::: smart file manager get file for output:::superFile->super->getFileForOutput->file->locWrap->if->return->if->location->equals->new->SmartFileObject->packageNameFromFileName->if->packageName->equals->file->toUri->addArtifact->return
SmartFileManager#getLocationForModule(Location, JavaFileObject)::: smart file manager get location for module:::return->super->locUnwrap->getLocationForModule
SmartFileManager#packageNameFromFileName(String)::: smart file manager package name from file name:::sb->new->StringBuilder->p->fn->indexOf->pp->while->if->sb->length->sb->append->sb->fn->substring->append->if->fn->length->break->fn->indexOf->return->sb->toString
SmartFileManager#addArtifact(String, URI)::: smart file manager add artifact:::s->packageArtifacts->get->if->new->HashSet<>->packageArtifacts->put->s->add
SmartFileManager#locWrap(JavaFileObject, Location)::: smart file manager loc wrap:::if->return->return->new->JavaFileObjectWithLocation<>
SmartFileManager#locWrap(FileObject, Location)::: smart file manager loc wrap:::if->return->locWrap->return->new->FileObjectWithLocation<>
SmartFileManager#isSameFile(FileObject, FileObject)::: smart file manager is same file:::return->super->locUnwrap->locUnwrap->isSameFile
SmartFileManager#locWrapMany(Iterable, Location)::: smart file manager loc wrap many:::locWrapped->new->ListBuffer<>->foreach->locWrapped->locWrap->add->return
SmartFileManager#locUnwrap(FileObject)::: smart file manager loc unwrap:::if->return->getDelegate->if->return->getDelegate->return
SmartFileManager#locUnwrap(JavaFileObject)::: smart file manager loc unwrap:::if->return->getDelegate->return
SmartFileObject#equals(Object)::: smart file object equals:::return->file->equals
SmartFileObject#hashCode()::: smart file object hash code:::return->file->hashCode
SmartFileObject#getKind()::: smart file object get kind:::return->file->getKind
SmartFileObject#isNameCompatible(String, Kind)::: smart file object is name compatible:::return->file->isNameCompatible
SmartFileObject#toUri()::: smart file object to uri:::return->file->toUri
SmartFileObject#getName()::: smart file object get name:::return->file->getName
SmartFileObject#openInputStream()::: smart file object open input stream:::return->file->openInputStream
SmartFileObject#openOutputStream()::: smart file object open output stream:::return->file->openOutputStream
SmartFileObject#getCharContent(boolean)::: smart file object get char content:::return->file->getCharContent
SmartFileObject#openWriter()::: smart file object open writer:::s->new->StringBuilder->try->r->file->openReader->new->BufferedReader->while->r->ready->s->r->readLine->append->catch->finally->return->s->toString->file->getName->new->SmartWriter
SmartFileObject#getLastModified()::: smart file object get last modified:::return->file->getLastModified
SmartFileObject#delete()::: smart file object delete:::return->file->delete
SmartFileObject#getAccessLevel()::: smart file object get access level:::return->file->getAccessLevel
SmartFileObject#getNestingKind()::: smart file object get nesting kind:::return->file->getNestingKind
SmartFileObject#openReader(boolean)::: smart file object open reader:::return->file->openReader
SmartWriter#write(char[], int, int)::: smart writer write:::newContent->write
SmartWriter#close()::: smart writer close:::if->return->s->newContent->toString->if->oldContent->equals->p->file->getName->lastIndexOf->try->writer->file->openWriter->writer->write->catch->finally->Log->file->getName->substring->debug
SmartWriter#flush()::: smart writer flush:::

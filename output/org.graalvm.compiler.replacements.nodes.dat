org.graalvm.compiler.replacements.nodes.Plugin_ArrayCompareToNode_compareTo#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ array compare to node_compare to execute
org.graalvm.compiler.replacements.nodes.Plugin_ArrayCompareToNode_compareTo#getSource()->Class::: plugin_ array compare to node_compare to get source
org.graalvm.compiler.replacements.nodes.PluginFactory_ArrayCompareToNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ array compare to node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_ArrayEqualsNode_equals#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ array equals node_equals execute
org.graalvm.compiler.replacements.nodes.Plugin_ArrayEqualsNode_equals#getSource()->Class::: plugin_ array equals node_equals get source
org.graalvm.compiler.replacements.nodes.PluginFactory_ArrayEqualsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ array equals node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_ArrayRegionEqualsNode_regionEquals#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ array region equals node_region equals execute
org.graalvm.compiler.replacements.nodes.Plugin_ArrayRegionEqualsNode_regionEquals#getSource()->Class::: plugin_ array region equals node_region equals get source
org.graalvm.compiler.replacements.nodes.PluginFactory_ArrayRegionEqualsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ array region equals node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_AssertionNode_assertion#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ assertion node_assertion execute
org.graalvm.compiler.replacements.nodes.Plugin_AssertionNode_assertion#getSource()->Class::: plugin_ assertion node_assertion get source
org.graalvm.compiler.replacements.nodes.PluginFactory_AssertionNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ assertion node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_BinaryMathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ binary math intrinsic node_compute execute
org.graalvm.compiler.replacements.nodes.Plugin_BinaryMathIntrinsicNode_compute#getSource()->Class::: plugin_ binary math intrinsic node_compute get source
org.graalvm.compiler.replacements.nodes.PluginFactory_BinaryMathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ binary math intrinsic node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_BitScanForwardNode_unsafeScan__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ bit scan forward node_unsafe scan__0 execute
org.graalvm.compiler.replacements.nodes.Plugin_BitScanForwardNode_unsafeScan__0#getSource()->Class::: plugin_ bit scan forward node_unsafe scan__0 get source
org.graalvm.compiler.replacements.nodes.Plugin_BitScanForwardNode_unsafeScan__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ bit scan forward node_unsafe scan__1 execute
org.graalvm.compiler.replacements.nodes.Plugin_BitScanForwardNode_unsafeScan__1#getSource()->Class::: plugin_ bit scan forward node_unsafe scan__1 get source
org.graalvm.compiler.replacements.nodes.PluginFactory_BitScanForwardNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ bit scan forward node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_BitScanReverseNode_unsafeScan__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ bit scan reverse node_unsafe scan__0 execute
org.graalvm.compiler.replacements.nodes.Plugin_BitScanReverseNode_unsafeScan__0#getSource()->Class::: plugin_ bit scan reverse node_unsafe scan__0 get source
org.graalvm.compiler.replacements.nodes.Plugin_BitScanReverseNode_unsafeScan__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ bit scan reverse node_unsafe scan__1 execute
org.graalvm.compiler.replacements.nodes.Plugin_BitScanReverseNode_unsafeScan__1#getSource()->Class::: plugin_ bit scan reverse node_unsafe scan__1 get source
org.graalvm.compiler.replacements.nodes.PluginFactory_BitScanReverseNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ bit scan reverse node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_CStringConstant_cstring#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ string constant_cstring execute
org.graalvm.compiler.replacements.nodes.Plugin_CStringConstant_cstring#getSource()->Class::: plugin_ string constant_cstring get source
org.graalvm.compiler.replacements.nodes.PluginFactory_CStringConstant#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ string constant register plugins
org.graalvm.compiler.replacements.nodes.Plugin_ExplodeLoopNode_explodeLoop#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ explode loop node_explode loop execute
org.graalvm.compiler.replacements.nodes.Plugin_ExplodeLoopNode_explodeLoop#getSource()->Class::: plugin_ explode loop node_explode loop get source
org.graalvm.compiler.replacements.nodes.PluginFactory_ExplodeLoopNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ explode loop node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_UnaryMathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ unary math intrinsic node_compute execute
org.graalvm.compiler.replacements.nodes.Plugin_UnaryMathIntrinsicNode_compute#getSource()->Class::: plugin_ unary math intrinsic node_compute get source
org.graalvm.compiler.replacements.nodes.PluginFactory_UnaryMathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ unary math intrinsic node register plugins
org.graalvm.compiler.replacements.nodes.Plugin_ZeroMemoryNode_zero#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ zero memory node_zero execute
org.graalvm.compiler.replacements.nodes.Plugin_ZeroMemoryNode_zero#getSource()->Class::: plugin_ zero memory node_zero get source
org.graalvm.compiler.replacements.nodes.PluginFactory_ZeroMemoryNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ zero memory node register plugins
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#canonical(CanonicalizerTool)->Node::: array compare to node canonical
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#virtualize(VirtualizerTool)->void::: array compare to node virtualize
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#compareTo(Object, Object, int, int, JavaKind, JavaKind)->int::: array compare to node compare to
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#getKind1()->JavaKind::: array compare to node get kind1
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#getKind2()->JavaKind::: array compare to node get kind2
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#generate(NodeLIRBuilderTool)->void::: array compare to node generate
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#getLocationIdentity()->LocationIdentity::: array compare to node get location identity
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#getLastLocationAccess()->MemoryNode::: array compare to node get last location access
org.graalvm.compiler.replacements.nodes.ArrayCompareToNode#setLastLocationAccess(MemoryNode)->void::: array compare to node set last location access
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#canonical(CanonicalizerTool)->Node::: array equals node canonical
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#virtualize(VirtualizerTool)->void::: array equals node virtualize
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(Object, Object, int, JavaKind)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(boolean[], boolean[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(byte[], byte[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(char[], char[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(short[], short[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(int[], int[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(long[], long[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(float[], float[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#equals(double[], double[], int)->boolean::: array equals node equals
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#getLength()->ValueNode::: array equals node get length
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#getKind()->JavaKind::: array equals node get kind
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#generate(NodeLIRBuilderTool)->void::: array equals node generate
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#getLocationIdentity()->LocationIdentity::: array equals node get location identity
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#getLastLocationAccess()->MemoryNode::: array equals node get last location access
org.graalvm.compiler.replacements.nodes.ArrayEqualsNode#setLastLocationAccess(MemoryNode)->void::: array equals node set last location access
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#regionEquals(Pointer, Pointer, int, JavaKind)->boolean::: array region equals node region equals
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#regionEquals(Pointer, Pointer, int, JavaKind, JavaKind)->boolean::: array region equals node region equals
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#getKind1()->JavaKind::: array region equals node get kind1
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#getKind2()->JavaKind::: array region equals node get kind2
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#getLength()->ValueNode::: array region equals node get length
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#generate(NodeLIRBuilderTool)->void::: array region equals node generate
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#getLocationIdentity()->LocationIdentity::: array region equals node get location identity
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#getLastLocationAccess()->MemoryNode::: array region equals node get last location access
org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode#setLastLocationAccess(MemoryNode)->void::: array region equals node set last location access
org.graalvm.compiler.replacements.nodes.AssertionNode#condition()->ValueNode::: assertion node condition
org.graalvm.compiler.replacements.nodes.AssertionNode#message()->String::: assertion node message
org.graalvm.compiler.replacements.nodes.AssertionNode#canonical(CanonicalizerTool)->Node::: assertion node canonical
org.graalvm.compiler.replacements.nodes.AssertionNode#lower(LoweringTool)->void::: assertion node lower
org.graalvm.compiler.replacements.nodes.AssertionNode#generate(NodeLIRBuilderTool)->void::: assertion node generate
org.graalvm.compiler.replacements.nodes.AssertionNode#assertion(boolean, boolean, String, Object, Object)->void::: assertion node assertion
org.graalvm.compiler.replacements.nodes.AssertionNode#assertion(boolean, boolean, String)->void::: assertion node assertion
org.graalvm.compiler.replacements.nodes.AssertionNode#assertion(boolean, boolean, String, Object)->void::: assertion node assertion
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getSource()->ValueNode::: basic array copy node get source
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getSourcePosition()->ValueNode::: basic array copy node get source position
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getDestination()->ValueNode::: basic array copy node get destination
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getDestinationPosition()->ValueNode::: basic array copy node get destination position
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getLength()->ValueNode::: basic array copy node get length
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getBci()->int::: basic array copy node get bci
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getElementKind()->JavaKind::: basic array copy node get element kind
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getLocationIdentity()->LocationIdentity::: basic array copy node get location identity
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#getLastLocationAccess()->MemoryNode::: basic array copy node get last location access
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#setLastLocationAccess(MemoryNode)->void::: basic array copy node set last location access
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#lower(LoweringTool)->void::: basic array copy node lower
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#isExact()->boolean::: basic array copy node is exact
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#virtualize(VirtualizerTool)->void::: basic array copy node virtualize
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#canDeoptimize()->boolean::: basic array copy node can deoptimize
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#stateDuring()->FrameState::: basic array copy node state during
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#setStateDuring(FrameState)->void::: basic array copy node set state during
org.graalvm.compiler.replacements.nodes.BasicArrayCopyNode#computeStateDuring(FrameState)->void::: basic array copy node compute state during
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#inferStamp()->boolean::: basic object clone node infer stamp
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#computeStamp(ValueNode)->Stamp::: basic object clone node compute stamp
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#getObject()->ValueNode::: basic object clone node get object
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#getConcreteType(Stamp)->ResolvedJavaType::: basic object clone node get concrete type
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#genLoadFieldNode(Assumptions, ValueNode, ResolvedJavaField)->LoadFieldNode::: basic object clone node gen load field node
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#genLoadIndexedNode(Assumptions, ValueNode, ValueNode, JavaKind)->LoadIndexedNode::: basic object clone node gen load indexed node
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#virtualize(VirtualizerTool)->void::: basic object clone node virtualize
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#createVirtualInstanceNode(ResolvedJavaType, boolean)->VirtualInstanceNode::: basic object clone node create virtual instance node
org.graalvm.compiler.replacements.nodes.BasicObjectCloneNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: basic object clone node find length
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#getOperation()->BinaryOperation::: binary math intrinsic node get operation
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#create(ValueNode, ValueNode, BinaryOperation)->ValueNode::: binary math intrinsic node create
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#tryConstantFold(ValueNode, ValueNode, BinaryOperation)->ValueNode::: binary math intrinsic node try constant fold
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#foldStamp(Stamp, Stamp)->Stamp::: binary math intrinsic node fold stamp
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#lower(LoweringTool)->void::: binary math intrinsic node lower
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: binary math intrinsic node generate
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: binary math intrinsic node canonical
org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode#compute(double, double, BinaryOperation)->double::: binary math intrinsic node compute
org.graalvm.compiler.replacements.nodes.BitCountNode#foldStamp(Stamp)->Stamp::: bit count node fold stamp
org.graalvm.compiler.replacements.nodes.BitCountNode#computeStamp(Stamp, ValueNode)->Stamp::: bit count node compute stamp
org.graalvm.compiler.replacements.nodes.BitCountNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: bit count node canonical
org.graalvm.compiler.replacements.nodes.BitCountNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: bit count node generate
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#foldStamp(Stamp)->Stamp::: bit scan forward node fold stamp
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#tryFold(ValueNode)->ValueNode::: bit scan forward node try fold
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: bit scan forward node canonical
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#scan(long)->int:::Utility method with defined return value for 0.
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#scan(int)->int:::Utility method with defined return value for 0.
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#unsafeScan(long)->int:::Raw intrinsic for bsf instruction.
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#unsafeScan(int)->int:::Raw intrinsic for bsf instruction.
org.graalvm.compiler.replacements.nodes.BitScanForwardNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: bit scan forward node generate
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#foldStamp(Stamp)->Stamp::: bit scan reverse node fold stamp
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: bit scan reverse node canonical
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#scan(long)->int:::Utility method with defined return value for 0.
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#scan(int)->int:::Utility method with defined return value for 0.
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#unsafeScan(int)->int:::Raw intrinsic for bsr instruction.
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#unsafeScan(long)->int:::Raw intrinsic for bsr instruction.
org.graalvm.compiler.replacements.nodes.BitScanReverseNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: bit scan reverse node generate
org.graalvm.compiler.replacements.nodes.CStringConstant#getSerializedSize()->int::: string constant get serialized size
org.graalvm.compiler.replacements.nodes.CStringConstant#serialize(ByteBuffer)->void::: string constant serialize
org.graalvm.compiler.replacements.nodes.CStringConstant#toValueString()->String::: string constant to value string
org.graalvm.compiler.replacements.nodes.CStringConstant#intrinsify(GraphBuilderContext, ResolvedJavaMethod, String)->boolean::: string constant intrinsify
org.graalvm.compiler.replacements.nodes.CStringConstant#cstring(String)->Word::: string constant cstring
org.graalvm.compiler.replacements.nodes.ExplodeLoopNode#findLoopBegin()->LoopBeginNode::: explode loop node find loop begin
org.graalvm.compiler.replacements.nodes.ExplodeLoopNode#explodeLoop()->void:::A call to this method must be placed immediately prior to the loop that is to be exploded.
org.graalvm.compiler.replacements.nodes.FusedMultiplyAddNode#foldStamp(Stamp, Stamp, Stamp)->Stamp::: fused multiply add node fold stamp
org.graalvm.compiler.replacements.nodes.FusedMultiplyAddNode#canonical(CanonicalizerTool, ValueNode, ValueNode, ValueNode)->ValueNode::: fused multiply add node canonical
org.graalvm.compiler.replacements.nodes.FusedMultiplyAddNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: fused multiply add node generate
org.graalvm.compiler.replacements.nodes.LoadSnippetVarargParameterNode#canonical(CanonicalizerTool)->Node::: load snippet vararg parameter node canonical
org.graalvm.compiler.replacements.nodes.MacroNode#assertArgumentCount(ResolvedJavaMethod, ValueNode...)->void::: macro node assert argument count
org.graalvm.compiler.replacements.nodes.MacroNode#getArgument(int)->ValueNode::: macro node get argument
org.graalvm.compiler.replacements.nodes.MacroNode#getArgumentCount()->int::: macro node get argument count
org.graalvm.compiler.replacements.nodes.MacroNode#toArgumentArray()->ValueNode[]::: macro node to argument array
org.graalvm.compiler.replacements.nodes.MacroNode#bci()->int::: macro node bci
org.graalvm.compiler.replacements.nodes.MacroNode#getTargetMethod()->ResolvedJavaMethod::: macro node get target method
org.graalvm.compiler.replacements.nodes.MacroNode#stateAfter()->FrameState::: macro node state after
org.graalvm.compiler.replacements.nodes.MacroNode#afterClone(Node)->void::: macro node after clone
org.graalvm.compiler.replacements.nodes.MacroNode#asFixedNode()->FixedNode::: macro node as fixed node
org.graalvm.compiler.replacements.nodes.MacroNode#getLoweredSnippetGraph(LoweringTool)->StructuredGraph:::Gets a snippet to be used for lowering this macro node
org.graalvm.compiler.replacements.nodes.MacroNode#lowerReplacement(StructuredGraph, LoweringTool)->StructuredGraph:::Applies LoweringPhase lowering to a replacement graph.
org.graalvm.compiler.replacements.nodes.MacroNode#lower(LoweringTool)->void::: macro node lower
org.graalvm.compiler.replacements.nodes.MacroNode#replaceWithInvoke()->InvokeNode::: macro node replace with invoke
org.graalvm.compiler.replacements.nodes.MacroNode#getLocationIdentity()->LocationIdentity::: macro node get location identity
org.graalvm.compiler.replacements.nodes.MacroNode#createInvoke()->InvokeNode::: macro node create invoke
org.graalvm.compiler.replacements.nodes.MacroStateSplitNode#stateAfter()->FrameState::: macro state split node state after
org.graalvm.compiler.replacements.nodes.MacroStateSplitNode#setStateAfter(FrameState)->void::: macro state split node set state after
org.graalvm.compiler.replacements.nodes.MacroStateSplitNode#hasSideEffect()->boolean::: macro state split node has side effect
org.graalvm.compiler.replacements.nodes.MacroStateSplitNode#getLocationIdentity()->LocationIdentity::: macro state split node get location identity
org.graalvm.compiler.replacements.nodes.MacroStateSplitNode#replaceSnippetInvokes(StructuredGraph)->void::: macro state split node replace snippet invokes
org.graalvm.compiler.replacements.nodes.MethodHandleNode#tryResolveTargetInvoke(GraphAdder, MethodHandleAccessProvider, IntrinsicMethod, ResolvedJavaMethod, int, StampPair, ValueNode...)->InvokeNode:::Attempts to transform application of an intrinsifiable MethodHandle method into an invocation on another method with possibly transformed arguments.
org.graalvm.compiler.replacements.nodes.MethodHandleNode.GraphAdder#add(T)->T:::Call StructuredGraph#addOrUnique(org.graalvm.compiler.graph.Node) on node and link any FixedWithNextNodes into the current control flow.
org.graalvm.compiler.replacements.nodes.MethodHandleNode.GraphAdder#getGuardAnchor()->AnchoringNode::: graph adder get guard anchor
org.graalvm.compiler.replacements.nodes.MethodHandleNode.GraphAdder#getAssumptions()->Assumptions::: graph adder get assumptions
org.graalvm.compiler.replacements.nodes.MethodHandleNode#simplify(SimplifierTool)->void::: method handle node simplify
org.graalvm.compiler.replacements.nodes.ProfileBooleanNode#getResult()->ValueNode::: profile boolean node get result
org.graalvm.compiler.replacements.nodes.ProfileBooleanNode#getCounters()->ValueNode::: profile boolean node get counters
org.graalvm.compiler.replacements.nodes.ProfileBooleanNode#simplify(SimplifierTool)->void::: profile boolean node simplify
org.graalvm.compiler.replacements.nodes.PureFunctionMacroNode#evaluate(JavaConstant, MetaAccessProvider)->JavaConstant:::This method should return either a constant that represents the result of the function, or null if no such result could be determined.
org.graalvm.compiler.replacements.nodes.PureFunctionMacroNode#canonical(CanonicalizerTool)->Node::: pure function macro node canonical
org.graalvm.compiler.replacements.nodes.ReadRegisterNode#generate(NodeLIRBuilderTool)->void::: read register node generate
org.graalvm.compiler.replacements.nodes.ReadRegisterNode#toString(Verbosity)->String::: read register node to string
org.graalvm.compiler.replacements.nodes.ResolvedMethodHandleCallTargetNode#create(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, ResolvedJavaMethod, ValueNode[], StampPair)->MethodCallTargetNode:::Creates a call target for an invocation on a direct target derived by resolving a constant MethodHandle.
org.graalvm.compiler.replacements.nodes.ResolvedMethodHandleCallTargetNode#lower(LoweringTool)->void::: resolved method handle call target node lower
org.graalvm.compiler.replacements.nodes.ResolvedMethodHandleCallTargetNode#generate(NodeLIRBuilderTool)->void::: resolved method handle call target node generate
org.graalvm.compiler.replacements.nodes.ReverseBytesNode#foldStamp(Stamp)->Stamp::: reverse bytes node fold stamp
org.graalvm.compiler.replacements.nodes.ReverseBytesNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: reverse bytes node canonical
org.graalvm.compiler.replacements.nodes.ReverseBytesNode#generate(NodeLIRBuilderTool)->void::: reverse bytes node generate
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#getOperation()->UnaryOperation::: unary math intrinsic node get operation
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#create(ValueNode, UnaryOperation)->ValueNode::: unary math intrinsic node create
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#tryConstantFold(ValueNode, UnaryOperation)->ValueNode::: unary math intrinsic node try constant fold
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#foldStamp(Stamp)->Stamp::: unary math intrinsic node fold stamp
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#lower(LoweringTool)->void::: unary math intrinsic node lower
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: unary math intrinsic node generate
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: unary math intrinsic node canonical
org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode#compute(double, UnaryOperation)->double::: unary math intrinsic node compute
org.graalvm.compiler.replacements.nodes.VirtualizableInvokeMacroNode#virtualize(VirtualizerTool)->void::: virtualizable invoke macro node virtualize
org.graalvm.compiler.replacements.nodes.WriteRegisterNode#generate(NodeLIRBuilderTool)->void::: write register node generate
org.graalvm.compiler.replacements.nodes.WriteRegisterNode#toString(Verbosity)->String::: write register node to string
org.graalvm.compiler.replacements.nodes.ZeroMemoryNode#generate(NodeLIRBuilderTool)->void::: zero memory node generate
org.graalvm.compiler.replacements.nodes.ZeroMemoryNode#canNullCheck()->boolean::: zero memory node can null check
org.graalvm.compiler.replacements.nodes.ZeroMemoryNode#zero(Word, long, LocationIdentity)->void::: zero memory node zero

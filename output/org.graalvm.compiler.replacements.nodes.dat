Plugin_ArrayCompareToNode_compareTo#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ array compare to node_compare to execute:::arg0->arg1->arg2->arg3->arg4->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg5->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.ArrayCompareToNode->b->addPush->return
Plugin_ArrayCompareToNode_compareTo#getSource()::: plugin_ array compare to node_compare to get source:::return
PluginFactory_ArrayCompareToNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ array compare to node register plugins:::plugins->new->Plugin_ArrayCompareToNode_compareTo->register
Plugin_ArrayEqualsNode_equals#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ array equals node_equals execute:::arg0->arg1->arg2->arg3->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.ArrayEqualsNode->b->addPush->return
Plugin_ArrayEqualsNode_equals#getSource()::: plugin_ array equals node_equals get source:::return
PluginFactory_ArrayEqualsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ array equals node register plugins:::plugins->new->Plugin_ArrayEqualsNode_equals->register
Plugin_ArrayRegionEqualsNode_regionEquals#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ array region equals node_region equals execute:::arg0->arg1->arg2->arg3->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg4->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.ArrayRegionEqualsNode->b->addPush->return
Plugin_ArrayRegionEqualsNode_regionEquals#getSource()::: plugin_ array region equals node_region equals get source:::return
PluginFactory_ArrayRegionEqualsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ array region equals node register plugins:::plugins->new->Plugin_ArrayRegionEqualsNode_regionEquals->register
Plugin_AssertionNode_assertion#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ assertion node_assertion execute:::arg0->if->isConstant->asJavaConstant->asInt->else->return->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg4->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.AssertionNode->b->add->return
Plugin_AssertionNode_assertion#getSource()::: plugin_ assertion node_assertion get source:::return
PluginFactory_AssertionNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ assertion node register plugins:::plugins->new->Plugin_AssertionNode_assertion->register
Plugin_BinaryMathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ binary math intrinsic node_compute execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode->b->addPush->return
Plugin_BinaryMathIntrinsicNode_compute#getSource()::: plugin_ binary math intrinsic node_compute get source:::return
PluginFactory_BinaryMathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ binary math intrinsic node register plugins:::plugins->new->Plugin_BinaryMathIntrinsicNode_compute->register
Plugin_BitScanForwardNode_unsafeScan__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ bit scan forward node_unsafe scan__0 execute:::arg0->node->new->org.graalvm.compiler.replacements.nodes.BitScanForwardNode->b->addPush->return
Plugin_BitScanForwardNode_unsafeScan__0#getSource()::: plugin_ bit scan forward node_unsafe scan__0 get source:::return
Plugin_BitScanForwardNode_unsafeScan__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ bit scan forward node_unsafe scan__1 execute:::arg0->node->new->org.graalvm.compiler.replacements.nodes.BitScanForwardNode->b->addPush->return
Plugin_BitScanForwardNode_unsafeScan__1#getSource()::: plugin_ bit scan forward node_unsafe scan__1 get source:::return
PluginFactory_BitScanForwardNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ bit scan forward node register plugins:::plugins->new->Plugin_BitScanForwardNode_unsafeScan__0->register->plugins->new->Plugin_BitScanForwardNode_unsafeScan__1->register
Plugin_BitScanReverseNode_unsafeScan__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ bit scan reverse node_unsafe scan__0 execute:::arg0->node->new->org.graalvm.compiler.replacements.nodes.BitScanReverseNode->b->addPush->return
Plugin_BitScanReverseNode_unsafeScan__0#getSource()::: plugin_ bit scan reverse node_unsafe scan__0 get source:::return
Plugin_BitScanReverseNode_unsafeScan__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ bit scan reverse node_unsafe scan__1 execute:::arg0->node->new->org.graalvm.compiler.replacements.nodes.BitScanReverseNode->b->addPush->return
Plugin_BitScanReverseNode_unsafeScan__1#getSource()::: plugin_ bit scan reverse node_unsafe scan__1 get source:::return
PluginFactory_BitScanReverseNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ bit scan reverse node register plugins:::plugins->new->Plugin_BitScanReverseNode_unsafeScan__0->register->plugins->new->Plugin_BitScanReverseNode_unsafeScan__1->register
Plugin_CStringConstant_cstring#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ string constant_cstring execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->return->intrinsify
Plugin_CStringConstant_cstring#getSource()::: plugin_ string constant_cstring get source:::return
PluginFactory_CStringConstant#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ string constant register plugins:::plugins->new->Plugin_CStringConstant_cstring->register
Plugin_ExplodeLoopNode_explodeLoop#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ explode loop node_explode loop execute:::node->new->org.graalvm.compiler.replacements.nodes.ExplodeLoopNode->b->add->return
Plugin_ExplodeLoopNode_explodeLoop#getSource()::: plugin_ explode loop node_explode loop get source:::return
PluginFactory_ExplodeLoopNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ explode loop node register plugins:::plugins->new->Plugin_ExplodeLoopNode_explodeLoop->register
Plugin_UnaryMathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ unary math intrinsic node_compute execute:::arg0->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode->b->addPush->return
Plugin_UnaryMathIntrinsicNode_compute#getSource()::: plugin_ unary math intrinsic node_compute get source:::return
PluginFactory_UnaryMathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ unary math intrinsic node register plugins:::plugins->new->Plugin_UnaryMathIntrinsicNode_compute->register
Plugin_ZeroMemoryNode_zero#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ zero memory node_zero execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.nodes.ZeroMemoryNode->b->add->return
Plugin_ZeroMemoryNode_zero#getSource()::: plugin_ zero memory node_zero get source:::return
PluginFactory_ZeroMemoryNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ zero memory node register plugins:::plugins->new->Plugin_ZeroMemoryNode_zero->register
ArrayCompareToNode#canonical(CanonicalizerTool)::: array compare to node canonical:::if->tool->allUsagesAvailable->hasNoUsages->return->a1->GraphUtil->unproxify->a2->GraphUtil->unproxify->if->return->ConstantNode->forInt->return
ArrayCompareToNode#virtualize(VirtualizerTool)::: array compare to node virtualize:::alias1->tool->getAlias->alias2->tool->getAlias->if->tool->ConstantNode->graph->forInt->replaceWithValue
ArrayCompareToNode#compareTo(Object, Object, int, int, JavaKind, JavaKind)::: array compare to node compare to:::
ArrayCompareToNode#getKind1()::: array compare to node get kind1:::return
ArrayCompareToNode#getKind2()::: array compare to node get kind2:::return
ArrayCompareToNode#generate(NodeLIRBuilderTool)::: array compare to node generate:::if->UseGraalStubs->graph->getOptions->getValue->linkage->gen->lookupGraalStub->if->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->gen->operand->emitForeignCall->gen->setResult->return->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->gen->operand->emitArrayCompareTo->gen->setResult
ArrayCompareToNode#getLocationIdentity()::: array compare to node get location identity:::return->NamedLocationIdentity->getArrayLocation
ArrayCompareToNode#getLastLocationAccess()::: array compare to node get last location access:::return
ArrayCompareToNode#setLastLocationAccess(MemoryNode)::: array compare to node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
ArrayEqualsNode#isNaNFloat(JavaConstant)::: array equals node is na float:::kind->constant->getJavaKind->return->Float->constant->asFloat->isNaN->Double->constant->asDouble->isNaN
ArrayEqualsNode#arrayEquals(ConstantReflectionProvider, JavaConstant, JavaConstant, int)::: array equals node array equals:::for->i->return
ArrayEqualsNode#canonical(CanonicalizerTool)::: array equals node canonical:::if->tool->allUsagesAvailable->hasNoUsages->return->a1->GraphUtil->unproxify->a2->GraphUtil->unproxify->if->return->ConstantNode->forBoolean->if->a1->isConstant->a2->isConstant->length->isConstant->c1->c2->if->c1->getStableDimension->c2->getStableDimension->ret->tool->getConstantReflection->c1->asJavaConstant->c2->asJavaConstant->length->asJavaConstant->asInt->arrayEquals->return->ConstantNode->forBoolean->return
ArrayEqualsNode#virtualize(VirtualizerTool)::: array equals node virtualize:::alias1->tool->getAlias->alias2->tool->getAlias->if->tool->ConstantNode->graph->forBoolean->replaceWithValue->else->if->virtual1->virtual2->if->virtual1->entryCount->virtual2->entryCount->entryCount->virtual1->entryCount->allEqual->for->i->if->tool->ConstantNode->graph->forBoolean->replaceWithValue
ArrayEqualsNode#equals(Object, Object, int, JavaKind)::: array equals node equals:::
ArrayEqualsNode#equals(boolean[], boolean[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(byte[], byte[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(char[], char[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(short[], short[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(int[], int[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(long[], long[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(float[], float[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#equals(double[], double[], int)::: array equals node equals:::return->equals
ArrayEqualsNode#getLength()::: array equals node get length:::return
ArrayEqualsNode#getKind()::: array equals node get kind:::return
ArrayEqualsNode#generate(NodeLIRBuilderTool)::: array equals node generate:::if->UseGraalStubs->graph->getOptions->getValue->linkage->gen->lookupGraalStub->if->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitForeignCall->gen->setResult->return->constantLength->if->length->isConstant->length->asJavaConstant->asInt->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitArrayEquals->gen->setResult
ArrayEqualsNode#getLocationIdentity()::: array equals node get location identity:::return->NamedLocationIdentity->getArrayLocation
ArrayEqualsNode#getLastLocationAccess()::: array equals node get last location access:::return
ArrayEqualsNode#setLastLocationAccess(MemoryNode)::: array equals node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
ArrayRegionEqualsNode#regionEquals(Pointer, Pointer, int, JavaKind)::: array region equals node region equals:::return->regionEquals
ArrayRegionEqualsNode#regionEquals(Pointer, Pointer, int, JavaKind, JavaKind)::: array region equals node region equals:::
ArrayRegionEqualsNode#getKind1()::: array region equals node get kind1:::return
ArrayRegionEqualsNode#getKind2()::: array region equals node get kind2:::return
ArrayRegionEqualsNode#getLength()::: array region equals node get length:::return
ArrayRegionEqualsNode#generate(NodeLIRBuilderTool)::: array region equals node generate:::if->UseGraalStubs->graph->getOptions->getValue->linkage->gen->lookupGraalStub->if->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitForeignCall->gen->setResult->return->constantLength->if->length->isConstant->length->asJavaConstant->asInt->result->if->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitArrayEquals->else->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitArrayEquals->gen->setResult
ArrayRegionEqualsNode#getLocationIdentity()::: array region equals node get location identity:::return->NamedLocationIdentity->getArrayLocation
ArrayRegionEqualsNode#getLastLocationAccess()::: array region equals node get last location access:::return
ArrayRegionEqualsNode#setLastLocationAccess(MemoryNode)::: array region equals node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
AssertionNode#condition()::: assertion node condition:::return
AssertionNode#message()::: assertion node message:::return
AssertionNode#canonical(CanonicalizerTool)::: assertion node canonical:::if->condition->isConstant->condition->asJavaConstant->asInt->return->return
AssertionNode#lower(LoweringTool)::: assertion node lower:::if->if->getOptions->getValue->graph->removeFixed->else->tool->getLowerer->lower
AssertionNode#generate(NodeLIRBuilderTool)::: assertion node generate:::if->getOptions->getValue->return->if->condition->isConstant->if->condition->asJavaConstant->asInt->throw->new->GraalError->else->throw->new->GraalError
AssertionNode#assertion(boolean, boolean, String, Object, Object)::: assertion node assertion:::
AssertionNode#assertion(boolean, boolean, String)::: assertion node assertion:::assertion
AssertionNode#assertion(boolean, boolean, String, Object)::: assertion node assertion:::assertion
BasicArrayCopyNode#getSource()::: basic array copy node get source:::return->args->get
BasicArrayCopyNode#getSourcePosition()::: basic array copy node get source position:::return->args->get
BasicArrayCopyNode#getDestination()::: basic array copy node get destination:::return->args->get
BasicArrayCopyNode#getDestinationPosition()::: basic array copy node get destination position:::return->args->get
BasicArrayCopyNode#getLength()::: basic array copy node get length:::return->args->get
BasicArrayCopyNode#getBci()::: basic array copy node get bci:::return
BasicArrayCopyNode#getElementKind()::: basic array copy node get element kind:::return
BasicArrayCopyNode#getLocationIdentity()::: basic array copy node get location identity:::if->return->NamedLocationIdentity->getArrayLocation->return->any
BasicArrayCopyNode#getLastLocationAccess()::: basic array copy node get last location access:::return
BasicArrayCopyNode#setLastLocationAccess(MemoryNode)::: basic array copy node set last location access:::updateUsagesInterface
BasicArrayCopyNode#lower(LoweringTool)::: basic array copy node lower:::tool->getLowerer->lower
BasicArrayCopyNode#checkBounds(int, int, VirtualObjectNode)::: basic array copy node check bounds:::return->virtualObject->entryCount
BasicArrayCopyNode#checkEntryTypes(int, int, VirtualObjectNode, ResolvedJavaType, VirtualizerTool)::: basic array copy node check entry types:::if->destComponentType->getJavaKind->destComponentType->isJavaLangObject->for->i->return
BasicArrayCopyNode#isExact()::: basic array copy node is exact:::srcType->StampTool->getSource->stamp->typeOrNull->destType->StampTool->getDestination->stamp->typeOrNull->if->srcType->isArray->destType->isArray->return->if->srcType->getComponentType->getJavaKind->isPrimitive->destType->getComponentType->srcType->getComponentType->equals->getSource->getDestination->return->if->StampTool->getDestination->stamp->isExactType->if->destType->isAssignableFrom->return->return
BasicArrayCopyNode#virtualize(VirtualizerTool)::: basic array copy node virtualize:::sourcePosition->tool->getSourcePosition->getAlias->destinationPosition->tool->getDestinationPosition->getAlias->replacedLength->tool->getLength->getAlias->if->sourcePosition->isConstant->destinationPosition->isConstant->replacedLength->isConstant->srcPosInt->sourcePosition->asJavaConstant->asInt->destPosInt->destinationPosition->asJavaConstant->asInt->len->replacedLength->asJavaConstant->asInt->destAlias->tool->getDestination->getAlias->if->destVirtual->if->checkBounds->return->srcAlias->tool->getSource->getAlias->if->if->return->srcVirtual->if->destVirtual->componentType->getJavaKind->srcVirtual->componentType->getJavaKind->return->if->checkBounds->return->if->destVirtual->type->getComponentType->checkEntryTypes->return->for->i->tool->delete->debug->getDebug->if->debug->isLogEnabled->debug->getSource->getDestination->log->else->sourceType->StampTool->typeOrNull->if->sourceType->isArray->return->sourceComponentType->sourceType->getComponentType->destComponentType->destVirtual->type->getComponentType->if->sourceComponentType->equals->return->for->i->tool->delete
BasicArrayCopyNode#canDeoptimize()::: basic array copy node can deoptimize:::return
BasicArrayCopyNode#stateDuring()::: basic array copy node state during:::return
BasicArrayCopyNode#setStateDuring(FrameState)::: basic array copy node set state during:::updateUsages
BasicArrayCopyNode#computeStateDuring(FrameState)::: basic array copy node compute state during:::newStateDuring->currentStateAfter->getBci->asNode->getStackKind->duplicateModifiedDuringCall->setStateDuring
BasicObjectCloneNode#inferStamp()::: basic object clone node infer stamp:::return->stamp->getObject->computeStamp->improveWith->updateStamp
BasicObjectCloneNode#computeStamp(ValueNode)::: basic object clone node compute stamp:::objectStamp->object->stamp->if->objectStamp->StampFactory->objectNonNull->join->return
BasicObjectCloneNode#getObject()::: basic object clone node get object:::return->arguments->get
BasicObjectCloneNode#getConcreteType(Stamp)::: basic object clone node get concrete type:::if->return->objectStamp->if->objectStamp->type->return->else->if->objectStamp->isExactType->return->objectStamp->type->isCloneableWithAllocation->objectStamp->type->else->if->objectStamp->type->isArray->return->objectStamp->type->return
BasicObjectCloneNode#genLoadFieldNode(Assumptions, ValueNode, ResolvedJavaField)::: basic object clone node gen load field node:::return->LoadFieldNode->create
BasicObjectCloneNode#genLoadIndexedNode(Assumptions, ValueNode, ValueNode, JavaKind)::: basic object clone node gen load indexed node:::return->new->LoadIndexedNode
BasicObjectCloneNode#virtualize(VirtualizerTool)::: basic object clone node virtualize:::originalAlias->tool->getObject->getAlias->if->originalVirtual->if->originalVirtual->type->isCloneableWithAllocation->newEntryState->originalVirtual->entryCount->new->ValueNodeArr->for->i->newVirtual->originalVirtual->duplicate->tool->Collections->emptyList->createVirtualObject->tool->replaceWithVirtual->else->type->originalAlias->stamp->getConcreteType->if->return->if->type->isArray->newVirtual->createVirtualInstanceNode->fields->newVirtual->getFields->state->new->ValueNodeArr->for->i->tool->Collections->emptyList->createVirtualObject->tool->replaceWithVirtual->else->length->tool->getConstantReflection->findLength->if->return->lengthAlias->tool->getAlias->if->lengthAlias->isConstant->return->constantLength->lengthAlias->asJavaConstant->asInt->if->tool->getMaximumEntryCount->state->new->ValueNodeArr->componentType->type->getComponentType->for->i->virtualObject->new->VirtualArrayNode->tool->Collections->emptyList->createVirtualObject->tool->replaceWithVirtual
BasicObjectCloneNode#createVirtualInstanceNode(ResolvedJavaType, boolean)::: basic object clone node create virtual instance node:::return->new->VirtualInstanceNode
BasicObjectCloneNode#findLength(FindLengthMode, ConstantReflectionProvider)::: basic object clone node find length:::return->GraphUtil->getObject->arrayLength
BinaryMathIntrinsicNode#getOperation()::: binary math intrinsic node get operation:::return
BinaryMathIntrinsicNode#create(ValueNode, ValueNode, BinaryOperation)::: binary math intrinsic node create:::c->tryConstantFold->if->return->return->new->BinaryMathIntrinsicNode
BinaryMathIntrinsicNode#tryConstantFold(ValueNode, ValueNode, BinaryOperation)::: binary math intrinsic node try constant fold:::if->forX->isConstant->forY->isConstant->ret->forX->asJavaConstant->asDouble->forY->asJavaConstant->asDouble->doCompute->return->ConstantNode->forDouble->return
BinaryMathIntrinsicNode#foldStamp(Stamp, Stamp)::: binary math intrinsic node fold stamp:::return->stamp
BinaryMathIntrinsicNode#lower(LoweringTool)::: binary math intrinsic node lower:::tool->getLowerer->lower
BinaryMathIntrinsicNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: binary math intrinsic node generate:::xValue->nodeValueMap->getX->operand->yValue->nodeValueMap->getY->operand->result->switch->getOperation->gen->emitMathPow->break->throw->GraalError->shouldNotReachHere->nodeValueMap->setResult
BinaryMathIntrinsicNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: binary math intrinsic node canonical:::view->NodeView->from->c->getOperation->tryConstantFold->if->return->if->forY->isConstant->yValue->forY->asJavaConstant->asDouble->if->return->ConstantNode->forDouble->if->return->if->Double->isNaN->return->ConstantNode->forDouble->if->return->ConstantNode->forDouble->new->FloatDivNode->if->return->new->MulNode->if->x->stamp->x->stamp->lowerBound->return->SqrtNode->create->return
BinaryMathIntrinsicNode#compute(double, double, BinaryOperation)::: binary math intrinsic node compute:::
BinaryMathIntrinsicNode#doCompute(double, double, BinaryOperation)::: binary math intrinsic node do compute:::switch->return->Math->pow->throw->new->GraalError
BitCountNode#foldStamp(Stamp)::: bit count node fold stamp:::theValue->getValue->return->computeStamp
BitCountNode#computeStamp(Stamp, ValueNode)::: bit count node compute stamp:::valueStamp->return->StampFactory->Long->valueStamp->downMask->bitCount->Long->valueStamp->upMask->bitCount->forInteger
BitCountNode#canonical(CanonicalizerTool, ValueNode)::: bit count node canonical:::if->forValue->isConstant->c->forValue->asJavaConstant->return->ConstantNode->forValue->getStackKind->Integer->c->asInt->bitCount->Long->c->asLong->bitCount->forInt->return
BitCountNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: bit count node generate:::builder->gen->builder->getValue->operand->emitBitCount->setResult
BitScanForwardNode#foldStamp(Stamp)::: bit scan forward node fold stamp:::valueStamp->min->max->mask->CodeUtil->valueStamp->getBits->mask->firstAlwaysSetBit->valueStamp->downMask->scan->firstMaybeSetBit->valueStamp->upMask->scan->if->lastMaybeSetBit->BitScanReverseNode->valueStamp->upMask->scan->else->return->StampFactory->forInteger
BitScanForwardNode#tryFold(ValueNode)::: bit scan forward node try fold:::if->value->isConstant->c->value->asJavaConstant->if->c->asLong->return->ConstantNode->value->getStackKind->c->asInt->scan->c->asLong->scan->forInt->return
BitScanForwardNode#canonical(CanonicalizerTool, ValueNode)::: bit scan forward node canonical:::folded->tryFold->return
BitScanForwardNode#scan(long):::Utility method with defined return value for 0.:::if->return->return->Long->numberOfTrailingZeros
BitScanForwardNode#scan(int):::Utility method with defined return value for 0.:::return->scan
BitScanForwardNode#unsafeScan(long):::Raw intrinsic for bsf instruction.:::
BitScanForwardNode#unsafeScan(int):::Raw intrinsic for bsf instruction.:::
BitScanForwardNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: bit scan forward node generate:::builder->gen->builder->getValue->operand->emitBitScanForward->setResult
BitScanReverseNode#foldStamp(Stamp)::: bit scan reverse node fold stamp:::valueStamp->min->max->mask->CodeUtil->valueStamp->getBits->mask->lastAlwaysSetBit->valueStamp->downMask->scan->if->firstMaybeSetBit->BitScanForwardNode->valueStamp->upMask->scan->else->lastMaybeSetBit->valueStamp->upMask->scan->return->StampFactory->forInteger
BitScanReverseNode#canonical(CanonicalizerTool, ValueNode)::: bit scan reverse node canonical:::if->forValue->isConstant->c->forValue->asJavaConstant->if->c->asLong->return->ConstantNode->forValue->getStackKind->c->asInt->scan->c->asLong->scan->forInt->return
BitScanReverseNode#scan(long):::Utility method with defined return value for 0.:::return->Long->numberOfLeadingZeros
BitScanReverseNode#scan(int):::Utility method with defined return value for 0.:::return->Integer->numberOfLeadingZeros
BitScanReverseNode#unsafeScan(int):::Raw intrinsic for bsr instruction.:::
BitScanReverseNode#unsafeScan(long):::Raw intrinsic for bsr instruction.:::
BitScanReverseNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: bit scan reverse node generate:::builder->gen->builder->getValue->operand->emitBitScanReverse->setResult
CStringConstant#getSerializedSize()::: string constant get serialized size:::return->string->getBytes
CStringConstant#serialize(ByteBuffer)::: string constant serialize:::bytes->string->getBytes->buffer->put->buffer->put
CStringConstant#toValueString()::: string constant to value string:::return
CStringConstant#intrinsify(GraphBuilderContext, ResolvedJavaMethod, String)::: string constant intrinsify:::b->new->CStringConstant->StampFactory->pointer->new->ConstantNode->addPush->return
CStringConstant#cstring(String)::: string constant cstring:::
ExplodeLoopNode#findLoopBegin()::: explode loop node find loop begin:::currentNext->next->succs->new->ArrayList<>->while->foreach->currentNext->cfgSuccessors->succs->add->if->succs->size->succs->get->succs->get->else->return->return
ExplodeLoopNode#explodeLoop():::A call to this method must be placed immediately prior to the loop that is to be exploded.:::
FusedMultiplyAddNode#foldStamp(Stamp, Stamp, Stamp)::: fused multiply add node fold stamp:::return->computeStamp
FusedMultiplyAddNode#computeStamp(Stamp, Stamp, Stamp)::: fused multiply add node compute stamp:::m->getMul->foldStamp->return->getAdd->foldStamp
FusedMultiplyAddNode#canonical(CanonicalizerTool, ValueNode, ValueNode, ValueNode)::: fused multiply add node canonical:::if->a->isConstant->b->isConstant->c->isConstant->ca->a->asJavaConstant->cb->b->asJavaConstant->cc->c->asJavaConstant->res->if->a->getStackKind->ConstantNode->GraalServices->ca->asFloat->cb->asFloat->cc->asFloat->fma->forFloat->else->ConstantNode->GraalServices->ca->asDouble->cb->asDouble->cc->asDouble->fma->forDouble->return->return
FusedMultiplyAddNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: fused multiply add node generate:::builder->gen->builder->getX->operand->builder->getY->operand->builder->getZ->operand->emitFusedMultiplyAdd->setResult
LoadSnippetVarargParameterNode#canonical(CanonicalizerTool)::: load snippet vararg parameter node canonical:::if->index->isConstant->indexValue->index->asJavaConstant->asInt->if->parameters->size->return->parameters->get->return
MacroNode#assertArgumentCount(ResolvedJavaMethod, ValueNode...)::: macro node assert argument count:::
MacroNode#getArgument(int)::: macro node get argument:::return->arguments->get
MacroNode#getArgumentCount()::: macro node get argument count:::return->arguments->size
MacroNode#toArgumentArray()::: macro node to argument array:::return->arguments->new->ValueNodeArr->toArray
MacroNode#bci()::: macro node bci:::return
MacroNode#getTargetMethod()::: macro node get target method:::return
MacroNode#stateAfter()::: macro node state after:::return
MacroNode#afterClone(Node)::: macro node after clone:::updateInliningLogAfterClone
MacroNode#asFixedNode()::: macro node as fixed node:::return
MacroNode#getLoweredSnippetGraph(LoweringTool):::Gets a snippet to be used for lowering this macro node:::return
MacroNode#lowerReplacement(StructuredGraph, LoweringTool):::Applies LoweringPhase lowering to a replacement graph.:::c->tool->getProviders->if->graph->hasValueProxies->new->RemoveValueProxyPhase->apply->guardsStage->graph->getGuardsStage->if->guardsStage->allowsFloatingGuards->new->GuardLoweringPhase->apply->if->guardsStage->areFrameStatesAtDeopts->new->FrameStateAssignmentPhase->apply->debug->replacementGraph->getDebug->try->s->debug->scope->new->CanonicalizerPhase->tool->getLoweringStage->new->LoweringPhase->apply->catch->throw->debug->handle->finally->return
MacroNode#lower(LoweringTool)::: macro node lower:::replacementGraph->getLoweredSnippetGraph->invoke->replaceWithInvoke->if->if->targetMethod->isStatic->nonNullReceiver->InliningUtil->nonNullReceiver->if->lower->InliningUtil->inline->replacementGraph->getDebug->graph->dump->else->if->invoke->bci->isPlaceholderBci->throw->graph->new->GraalError->if->invoke->stateAfter->method->graph->method->if->if->method->getAnnotation->method->getAnnotation->throw->getClass->getSimpleName->targetMethod->format->graph->new->GraalError->throw->graph->new->GraalError->invoke->lower
MacroNode#replaceWithInvoke()::: macro node replace with invoke:::try->context->withNodeSourcePosition->invoke->createInvoke->graph->replaceFixedWithFixed->return->catch->finally
MacroNode#getLocationIdentity()::: macro node get location identity:::return->LocationIdentity->any
MacroNode#createInvoke()::: macro node create invoke:::callTarget->graph->arguments->arguments->size->new->ValueNodeArr->toArray->new->MethodCallTargetNode->add->invoke->graph->getLocationIdentity->new->InvokeNode->add->if->stateAfter->invoke->stateAfter->duplicate->setStateAfter->if->getStackKind->invoke->stateAfter->replaceFirstInput->return
MacroStateSplitNode#stateAfter()::: macro state split node state after:::return
MacroStateSplitNode#setStateAfter(FrameState)::: macro state split node set state after:::updateUsages
MacroStateSplitNode#hasSideEffect()::: macro state split node has side effect:::return
MacroStateSplitNode#getLocationIdentity()::: macro state split node get location identity:::return->LocationIdentity->any
MacroStateSplitNode#replaceSnippetInvokes(StructuredGraph)::: macro state split node replace snippet invokes:::foreach->snippetGraph->getNodes->invoke->call->invoke->if->call->targetMethod->getTargetMethod->equals->throw->getClass->getSimpleName->new->GraalError->newInvoke->snippetGraph->invoke->callTarget->bci->invoke->getLocationIdentity->new->InvokeNode->add->newInvoke->invoke->stateAfter->setStateAfter->snippetGraph->invoke->asNode->replaceFixedWithFixed
MethodHandleNode#tryResolveTargetInvoke(GraphAdder, MethodHandleAccessProvider, IntrinsicMethod, ResolvedJavaMethod, int, StampPair, ValueNode...):::Attempts to transform application of an intrinsifiable MethodHandle method into an invocation on another method with possibly transformed arguments.:::switch->return->getInvokeBasicTarget->return->getLinkToTarget->throw->GraalError->shouldNotReachHere
MethodHandleNode.GraphAdder#add(T):::Call StructuredGraph#addOrUnique(org.graalvm.compiler.graph.Node) on node and link any FixedWithNextNodes into the current control flow.:::
MethodHandleNode.GraphAdder#getGuardAnchor()::: graph adder get guard anchor:::return
MethodHandleNode.GraphAdder#getAssumptions()::: graph adder get assumptions:::return->graph->getAssumptions
MethodHandleNode#simplify(SimplifierTool)::: method handle node simplify:::methodHandleAccess->tool->getConstantReflection->getMethodHandleAccess->argumentsArray->arguments->arguments->size->new->ValueNodeArr->toArray->before->adder->graph->new->GraphAdder->invoke->tryResolveTargetInvoke->if->graph->addOrUniqueWithInputs->invoke->stateAfter->setStateAfter->currentNext->next->replaceAtUsages->GraphUtil->removeFixedWithUnusedInputs->graph->addBeforeFixed
MethodHandleNode#getReceiver(ValueNode[]):::Get the receiver of a MethodHandle.invokeBasic call.:::return
MethodHandleNode#getMemberName(ValueNode[]):::Get the MemberName argument of a MethodHandle.linkTo* call.:::return
MethodHandleNode#getInvokeBasicTarget(GraphAdder, IntrinsicMethod, MethodHandleAccessProvider, ResolvedJavaMethod, int, StampPair, ValueNode[]):::Used for the MethodHandle.invokeBasic method (the IntrinsicMethod#INVOKE_BASIC  method) to get the target InvokeNode if the method handle receiver is constant.:::methodHandleNode->getReceiver->if->methodHandleNode->isConstant->return->methodHandleAccess->methodHandleNode->asJavaConstant->resolveInvokeBasicTarget->getTargetInvokeNode->return
MethodHandleNode#getLinkToTarget(GraphAdder, IntrinsicMethod, MethodHandleAccessProvider, ResolvedJavaMethod, int, StampPair, ValueNode[]):::Used for the MethodHandle.linkTo* methods (the IntrinsicMethod#LINK_TO_STATIC, IntrinsicMethod#LINK_TO_SPECIAL, IntrinsicMethod#LINK_TO_VIRTUAL, and IntrinsicMethod#LINK_TO_INTERFACE methods) to get the target InvokeNode if the member name argument is constant.:::memberNameNode->getMemberName->if->memberNameNode->isConstant->return->methodHandleAccess->memberNameNode->asJavaConstant->resolveLinkToTarget->getTargetInvokeNode->return
MethodHandleNode#getTargetInvokeNode(GraphAdder, IntrinsicMethod, MethodHandleAccessProvider, int, StampPair, ValueNode[], ResolvedJavaMethod, ResolvedJavaMethod):::Helper function to get the InvokeNode for the targetMethod of a java.lang.invoke.MemberName.:::if->isConsistentInfo->return->signature->target->getSignature->isStatic->target->isStatic->receiverSkip->assumptions->adder->getAssumptions->realTarget->if->target->canBeStaticallyBound->else->targetType->target->getDeclaringClass->concreteMethod->targetType->findUniqueConcreteMethod->if->if->receiver->getReceiver->receiverType->StampTool->receiver->stamp->typeReferenceOrNull->if->receiverType->getType->findUniqueConcreteMethod->if->concreteMethod->canRecordTo->concreteMethod->recordTo->concreteMethod->getResult->if->arguments->originalArguments->clone->if->receiverType->target->getDeclaringClass->maybeCastArgument->for->index->signature->getParameterCount->invoke->createTargetInvokeNode->return->return
MethodHandleNode#maybeCastArgument(GraphAdder, ValueNode[], int, JavaType):::Inserts a node to cast the argument at index to the given type if the given type is more concrete than the argument type.:::argument->if->isJavaLangObject->assumptions->adder->getAssumptions->targetType->TypeReference->create->if->targetType->getType->isPrimitive->argument->getStackKind->isPrimitive->argumentType->StampTool->argument->stamp->typeOrNull->if->argumentType->targetType->getType->isAssignableFrom->argumentType->targetType->getType->equals->inst->InstanceOfNode->createAllowNull->if->inst->isTautology->adder->add->guardAnchor->adder->getGuardAnchor->reason->action->speculation->guard->if->fixedGuard->adder->new->FixedGuardNode->add->else->newGuard->adder->new->GuardNode->add->adder->new->ValueAnchorNode->add->valueNode->adder->PiNode->StampFactory->object->guard->asNode->create->add
MethodHandleNode#createTargetInvokeNode(Assumptions, IntrinsicMethod, ResolvedJavaMethod, ResolvedJavaMethod, int, StampPair, ValueNode[]):::Creates an InvokeNode for the given target method:::targetInvokeKind->target->isStatic->targetReturnType->target->getSignature->getReturnType->targetArguments->switch->break->Arrays->copyOfRange->break->throw->GraalError->shouldNotReachHere->targetReturnStamp->StampFactory->forDeclaredType->callTarget->ResolvedMethodHandleCallTargetNode->create->if->returnStamp->getTrustedStamp->getStackKind->return->StampFactory->forVoid->new->InvokeNode->else->return->new->InvokeNode
MethodHandleNode#isConsistentInfo(MethodHandleAccessProvider, ResolvedJavaMethod, ResolvedJavaMethod):::Checks basic type consistency of low level method handle intrinsics.:::originalIntrinsicMethod->methodHandleAccess->lookupMethodHandleIntrinsic->targetIntrinsicMethod->methodHandleAccess->lookupMethodHandleIntrinsic->originalSignature->original->getSignature->targetSignature->target->getSignature->invokeThroughMHIntrinsic->if->return->original->getName->target->getName->equals->originalSignature->equals->hasAppendix->if->originalSignature->original->hasReceiver->getParameterCount->targetSignature->target->hasReceiver->getParameterCount->return->senderBase->receiverBase->switch->if->target->isStatic->return->if->originalSignature->getParameterKind->isPrimitive->return->break->if->target->hasReceiver->return->break->if->target->isStatic->if->targetSignature->getParameterKind->isPrimitive->return->break->break->argCount->targetSignature->getParameterCount->for->i->if->originalSignature->getReturnKind->originalSignature->getReturnKind->getStackKind->targetSignature->getReturnKind->getStackKind->return->return
ProfileBooleanNode#getResult()::: profile boolean node get result:::return->getArgument
ProfileBooleanNode#getCounters()::: profile boolean node get counters:::return->getArgument
ProfileBooleanNode#simplify(SimplifierTool)::: profile boolean node simplify:::result->getResult->if->result->isConstant->replaceAtUsages->graph->removeFixed->return->counters->getCounters->if->counters->isConstant->newResult->counts->snippetReflection->counters->asConstant->asObject->if->falseCount->trueCount->totalCount->if->graph->graph->LogicConstantNode->contradiction->new->FixedGuardNode->addOrUniqueWithInputs->addBeforeFixed->else->if->expected->condition->graph->IntegerEqualsNode->b->getConstantReflection->b->getMetaAccess->b->getOptions->ConstantNode->forBoolean->create->addOrUniqueWithInputs->graph->graph->new->FixedGuardNode->add->addBeforeFixed->graph->ConstantNode->forBoolean->unique->else->replaceAtUsages->graph->removeFixed
PureFunctionMacroNode#evaluate(JavaConstant, MetaAccessProvider):::This method should return either a constant that represents the result of the function, or null if no such result could be determined.:::
PureFunctionMacroNode#canonical(CanonicalizerTool)::: pure function macro node canonical:::if->tool->allUsagesAvailable->hasNoUsages->return->else->param->arguments->get->if->param->isConstant->constant->param->asJavaConstant->tool->getMetaAccess->evaluate->if->return->ConstantNode->tool->getMetaAccess->forConstant->return
ReadRegisterNode#generate(NodeLIRBuilderTool)::: read register node generate:::kind->generator->getLIRGeneratorTool->stamp->getLIRKind->result->register->asValue->if->generator->getLIRGeneratorTool->new->ValueArr->emitIncomingValues->if->generator->getLIRGeneratorTool->emitReadRegister->generator->setResult
ReadRegisterNode#toString(Verbosity)::: read register node to string:::if->return->super->toString->else->return->super->toString
ResolvedMethodHandleCallTargetNode#create(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, ResolvedJavaMethod, ValueNode[], StampPair):::Creates a call target for an invocation on a direct target derived by resolving a constant MethodHandle.:::return->new->ResolvedMethodHandleCallTargetNode
ResolvedMethodHandleCallTargetNode#lower(LoweringTool)::: resolved method handle call target node lower:::replacementInvokeKind->originalTargetMethod->isStatic->replacement->graph->originalArguments->originalArguments->size->new->ValueNodeArr->toArray->new->MethodCallTargetNode->add->this->replaceAndDelete
ResolvedMethodHandleCallTargetNode#generate(NodeLIRBuilderTool)::: resolved method handle call target node generate:::throw->GraalError->shouldNotReachHere
ReverseBytesNode#foldStamp(Stamp)::: reverse bytes node fold stamp:::valueStamp->if->getStackKind->mask->CodeUtil->getBitCount->mask->return->IntegerStamp->valueStamp->getBits->Integer->valueStamp->downMask->reverseBytes->Integer->valueStamp->upMask->reverseBytes->stampForMask->else->if->getStackKind->return->IntegerStamp->valueStamp->getBits->Long->valueStamp->downMask->reverseBytes->Long->valueStamp->upMask->reverseBytes->stampForMask->else->return->stamp
ReverseBytesNode#canonical(CanonicalizerTool, ValueNode)::: reverse bytes node canonical:::if->forValue->isConstant->c->forValue->asJavaConstant->reversed->getStackKind->Integer->c->asInt->reverseBytes->Long->c->asLong->reverseBytes->return->ConstantNode->getStackKind->forIntegerKind->return
ReverseBytesNode#generate(NodeLIRBuilderTool)::: reverse bytes node generate:::result->gen->getLIRGeneratorTool->gen->getValue->operand->emitByteSwap->gen->setResult
UnaryMathIntrinsicNode#getOperation()::: unary math intrinsic node get operation:::return
UnaryMathIntrinsicNode#create(ValueNode, UnaryOperation)::: unary math intrinsic node create:::c->tryConstantFold->if->return->return->new->UnaryMathIntrinsicNode
UnaryMathIntrinsicNode#tryConstantFold(ValueNode, UnaryOperation)::: unary math intrinsic node try constant fold:::if->value->isConstant->return->ConstantNode->op->value->asJavaConstant->asDouble->compute->forDouble->return
UnaryMathIntrinsicNode#foldStamp(Stamp)::: unary math intrinsic node fold stamp:::return->getOperation->computeStamp
UnaryMathIntrinsicNode#lower(LoweringTool)::: unary math intrinsic node lower:::tool->getLowerer->lower
UnaryMathIntrinsicNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: unary math intrinsic node generate:::input->nodeValueMap->getValue->operand->result->switch->getOperation->gen->emitMathLog->break->gen->emitMathLog->break->gen->emitMathExp->break->gen->emitMathSin->break->gen->emitMathCos->break->gen->emitMathTan->break->throw->GraalError->shouldNotReachHere->nodeValueMap->setResult
UnaryMathIntrinsicNode#canonical(CanonicalizerTool, ValueNode)::: unary math intrinsic node canonical:::c->getOperation->tryConstantFold->if->return->return
UnaryMathIntrinsicNode#compute(double, UnaryOperation)::: unary math intrinsic node compute:::
VirtualizableInvokeMacroNode#virtualize(VirtualizerTool)::: virtualizable invoke macro node virtualize:::foreach->alias->tool->getAlias->if->tool->delete
WriteRegisterNode#generate(NodeLIRBuilderTool)::: write register node generate:::val->generator->operand->generator->getLIRGeneratorTool->val->getValueKind->emitWriteRegister
WriteRegisterNode#toString(Verbosity)::: write register node to string:::if->return->super->toString->else->return->super->toString
ZeroMemoryNode#generate(NodeLIRBuilderTool)::: zero memory node generate:::gen->getLIRGeneratorTool->getArithmetic->gen->getAddress->operand->gen->operand->emitZeroMemory
ZeroMemoryNode#canNullCheck()::: zero memory node can null check:::return
ZeroMemoryNode#zero(Word, long, LocationIdentity)::: zero memory node zero:::

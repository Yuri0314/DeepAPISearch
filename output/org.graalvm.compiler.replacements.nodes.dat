BitScanForwardNode#scan(long):::Utility method with defined return value for 0.:::if->return->return->Long->numberOfTrailingZeros
BitScanForwardNode#scan(int):::Utility method with defined return value for 0.:::return->scan
BitScanForwardNode#unsafeScan(long):::Raw intrinsic for bsf instruction.:::
BitScanForwardNode#unsafeScan(int):::Raw intrinsic for bsf instruction.:::
BitScanReverseNode#scan(long):::Utility method with defined return value for 0.:::return->Long->numberOfLeadingZeros
BitScanReverseNode#scan(int):::Utility method with defined return value for 0.:::return->Integer->numberOfLeadingZeros
BitScanReverseNode#unsafeScan(int):::Raw intrinsic for bsr instruction.:::
BitScanReverseNode#unsafeScan(long):::Raw intrinsic for bsr instruction.:::
ExplodeLoopNode#explodeLoop():::A call to this method must be placed immediately prior to the loop that is to be exploded.:::
MacroNode#getLoweredSnippetGraph(LoweringTool):::Gets a snippet to be used for lowering this macro node:::return
MacroNode#lowerReplacement(StructuredGraph, LoweringTool):::Applies LoweringPhase lowering to a replacement graph.:::c->tool->getProviders->if->graph->hasValueProxies->new->RemoveValueProxyPhase->apply->guardsStage->graph->getGuardsStage->if->guardsStage->allowsFloatingGuards->new->GuardLoweringPhase->apply->if->guardsStage->areFrameStatesAtDeopts->new->FrameStateAssignmentPhase->apply->debug->replacementGraph->getDebug->try->s->debug->scope->new->CanonicalizerPhase->tool->getLoweringStage->new->LoweringPhase->apply->catch->throw->debug->handle->finally->return
MethodHandleNode#tryResolveTargetInvoke(GraphAdder, MethodHandleAccessProvider, IntrinsicMethod, ResolvedJavaMethod, int, StampPair, ValueNode...):::Attempts to transform application of an intrinsifiable MethodHandle method into an invocation on another method with possibly transformed arguments.:::switch->return->getInvokeBasicTarget->return->getLinkToTarget->throw->GraalError->shouldNotReachHere
MethodHandleNode.GraphAdder#add(T):::Call StructuredGraph#addOrUnique(org.graalvm.compiler.graph.Node) on node and link any FixedWithNextNodes into the current control flow.:::
PureFunctionMacroNode#evaluate(JavaConstant, MetaAccessProvider):::This method should return either a constant that represents the result of the function, or null if no such result could be determined.:::
ResolvedMethodHandleCallTargetNode#create(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, ResolvedJavaMethod, ValueNode[], StampPair):::Creates a call target for an invocation on a direct target derived by resolving a constant MethodHandle.:::return->new->ResolvedMethodHandleCallTargetNode

Entity#isEntityDeclInExternalSubset():::Returns true if this entity was declared in the external subset.:::return
Entity#isExternal():::Returns true if this is an external entity.:::
Entity#isUnparsed():::Returns true if this is an unparsed entity.:::
Entity#clear():::Clears the entity.:::
Entity#setValues(Entity):::Sets the values of the entity.:::
Entity.InternalEntity#isExternal():::Returns true if this is an external entity.:::return
Entity.InternalEntity#isUnparsed():::Returns true if this is an unparsed entity.:::return
Entity.InternalEntity#clear():::Clears the entity.:::super->clear
Entity.InternalEntity#setValues(Entity):::Sets the values of the entity.:::super->setValues
Entity.InternalEntity#setValues(InternalEntity):::Sets the values of the entity.:::super->setValues
Entity.ExternalEntity#isExternal():::Returns true if this is an external entity.:::return
Entity.ExternalEntity#isUnparsed():::Returns true if this is an unparsed entity.:::return
Entity.ExternalEntity#clear():::Clears the entity.:::super->clear
Entity.ExternalEntity#setValues(Entity):::Sets the values of the entity.:::super->setValues
Entity.ExternalEntity#setValues(ExternalEntity):::Sets the values of the entity.:::super->setValues
Entity.ScannedEntity#getEncodingName():::returns the name of the current encoding:::return
Entity.ScannedEntity#getEntityVersion():::each 'external' parsed entity may have xml/text declaration containing version information:::return
Entity.ScannedEntity#setEntityVersion(String):::each 'external' parsed entity may have xml/text declaration containing version information:::
Entity.ScannedEntity#getEntityReader()::: Returns the java.io.Reader associated with this entity.Readers are used to read from the file:::return
Entity.ScannedEntity#getEntityInputStream():::if entity was opened using the stream, return the associated inputstream with this entity:::return
Entity.ScannedEntity#close():::Release any resources associated with this entity.:::ba->ThreadLocalBufferAllocator->getBufferAllocator->ba->returnCharBuffer->reader->close
Entity.ScannedEntity#isEncodingExternallySpecified():::Returns whether the encoding of this entity was externally specified:::return
Entity.ScannedEntity#setEncodingExternallySpecified(boolean):::Sets whether the encoding of this entity was externally specified:::
Entity.ScannedEntity#isExternal():::Returns true if this is an external entity.:::return
Entity.ScannedEntity#isUnparsed():::Returns true if this is an unparsed entity.:::return
Entity.ScannedEntity#toString():::Returns a string representation of this object.:::str->new->StringBuffer->str->append->str->new->String->append->str->append->str->append->return->str->toString
StaxErrorReporter#reset(PropertyManager):::One must call reset before using any of the function.:::propertyManager->getProperty
StaxErrorReporter#reportError(XMLLocator, String, String, Object[], short):::Reports an error at a specific location.:::messageFormatter->getMessageFormatter->message->if->messageFormatter->formatMessage->else->str->new->StringBuffer->str->append->str->append->str->append->argCount->if->str->append->for->i->str->toString->switch->try->if->fXMLReporter->convertToStaxLocation->report->catch->throw->new->XNIException->finally->break->try->if->fXMLReporter->convertToStaxLocation->report->catch->throw->new->XNIException->finally->break->if->throw->new->XNIException->break->return
XMLBufferListener#refresh():::Will be invoked by XMLEntityReader before it tries to resize,load new data into current ScannedEntities buffer.:::
XMLBufferListener#refresh(int):::receives callbacks from XMLEntityReader  when buffer is being changed.:::
XMLEntityReader#setEncoding(String):::Sets the encoding of the scanner:::
XMLEntityReader#setVersion(String):::the version of the current entity being scanned or the version of the entity on which reader is operating:::
XMLEntityReader#getVersion():::get the version of the entity on which reader is operating:::
XMLEntityReader#isExternal():::Returns true if the current entity being scanned is external.:::
XMLEntityReader#peekChar():::Returns the next character on the input:::
XMLEntityReader#scanChar():::Returns the next character on the input:::
XMLEntityReader#scanNmtoken():::Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present:::
XMLEntityReader#scanName():::Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present:::
XMLEntityReader#scanQName(QName):::Scans a qualified name from the input, setting the fields of the QName structure appropriately:::
XMLEntityReader#scanContent(XMLString):::CHANGED: Scans a range of parsed character data, This function appends the character data to the supplied buffer:::
XMLEntityReader#scanLiteral(int, XMLString):::Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately:::
XMLEntityReader#scanData(String, XMLStringBuffer):::Scans a range of character data up to the specicied delimiter, setting the fields of the XMLString structure, appropriately:::
XMLEntityReader#skipChar(int):::Skips a character appearing immediately on the input:::
XMLEntityReader#skipSpaces():::Skips space characters appearing immediately on the input:::
XMLEntityReader#skipString(String):::Skips the specified string appearing immediately on the input:::
XMLEntityStorage#reset(XMLComponentManager):::Resets the component:::componentManager->getFeature->componentManager->getProperty->fEntities->clear
XMLEntityStorage#getEntity(String):::Returns entity declaration.:::return->fEntities->get
XMLEntityStorage#addInternalEntity(String, String):::Adds an internal entity declaration:::if->fEntities->containsKey->entity->new->Entity.InternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityStorage#addExternalEntity(String, String, String, String):::Adds an external entity declaration:::if->fEntities->containsKey->if->if->getExpandedSystemId->fEntityManager->getCurrentEntity->entity->expandSystemId->new->XMLResourceIdentifierImpl->new->Entity.ExternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityStorage#isExternalEntity(String):::Checks whether an entity given by name is external.:::entity->fEntities->get->if->return->return->entity->isExternal
XMLEntityStorage#isEntityDeclInExternalSubset(String):::Checks whether the declaration of an entity given by name is // in the external subset.:::entity->fEntities->get->if->return->return->entity->isEntityDeclInExternalSubset
XMLEntityStorage#addUnparsedEntity(String, String, String, String, String):::Adds an unparsed entity declaration:::fEntityManager->getCurrentEntity->if->fEntities->containsKey->entity->new->XMLResourceIdentifierImpl->new->Entity.ExternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityStorage#isUnparsedEntity(String):::Checks whether an entity given by name is unparsed.:::entity->fEntities->get->if->return->return->entity->isUnparsed
XMLEntityStorage#isDeclaredEntity(String):::Checks whether an entity given by name is declared.:::entity->fEntities->get->return
XMLEntityStorage#expandSystemId(String):::Expands a system id and returns the system id as a URI, if it can be expanded:::return->expandSystemId
XMLEntityStorage#expandSystemId(String, String):::Expands a system id and returns the system id as a URI, if it can be expanded:::if->systemId->length->return->try->new->URI->return->catch->finally->id->fixURI->base->uri->try->if->baseSystemId->length->baseSystemId->equals->dir->getUserDir->new->URI->else->try->fixURI->new->URI->catch->if->baseSystemId->indexOf->fixURI->new->URI->else->dir->getUserDir->fixURI->new->URI->finally->new->URI->catch->finally->if->return->return->uri->toString
XMLEntityStorage#fixURI(String):::Fixes a platform dependent filename to standard URI form.:::str->replace->if->str->length->ch1->str->charAt->if->ch0->Character->str->charAt->toUpperCase->if->else->if->str->charAt->return
XMLEventReaderImpl#getElementText():::Reads the content of a text-only element:::if->fLastEvent->getEventType->throw->fLastEvent->getLocation->new->XMLStreamException->data->if->event->type->event->getEventType->if->event->asCharacters->getData->else->if->getDeclaration->getReplacementText->else->if->else->if->throw->event->getLocation->new->XMLStreamException->else->if->return->buffer->new->StringBuffer->if->data->length->buffer->append->nextEvent->while->event->getEventType->if->event->asCharacters->getData->else->if->getDeclaration->getReplacementText->else->if->else->if->throw->new->XMLStreamException->else->if->throw->event->getLocation->new->XMLStreamException->else->throw->event->getLocation->new->XMLStreamException->if->data->length->buffer->append->nextEvent->return->buffer->toString->fXMLReader->getElementText->fXMLEventAllocator->allocate->return
XMLEventReaderImpl#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::return->fXMLReader->getProperty
XMLEventReaderImpl#nextTag():::Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached:::if->event->eventType->event->getEventType->if->event->isCharacters->event->asCharacters->isWhiteSpace->nextEvent->event->getEventType->while->event->isCharacters->event->asCharacters->isWhiteSpace->nextEvent->event->getEventType->if->throw->event->getLocation->new->XMLStreamException->return->fXMLReader->nextTag->return->fXMLEventAllocator->allocate
XMLInputFactoryImpl#createXMLEventReader(XMLStreamReader):::Create a new XMLEventReader from an XMLStreamReader:::return->new->XMLEventReaderImpl
XMLInputFactoryImpl#createFilteredReader(XMLEventReader, EventFilter):::Create a filtered event reader that wraps the filter around the event reader:::return->new->EventFilterSupport
XMLInputFactoryImpl#createFilteredReader(XMLStreamReader, StreamFilter):::Create a filtered reader that wraps the filter around the reader:::if->return->new->XMLStreamFilterImpl->return
XMLInputFactoryImpl#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::if->throw->new->IllegalArgumentException->if->fPropertyManager->containsProperty->return->fPropertyManager->getProperty->throw->new->IllegalArgumentException
XMLInputFactoryImpl#isPropertySupported(String):::Query the set of fProperties that this factory supports.:::if->return->else->return->fPropertyManager->containsProperty
XMLInputFactoryImpl#setEventAllocator(XMLEventAllocator):::Set a user defined event allocator for events:::fPropertyManager->setProperty
XMLInputFactoryImpl#setProperty(java.lang.String, Object):::Allows the user to set specific feature/property on the underlying implementation:::if->fPropertyManager->containsProperty->throw->new->IllegalArgumentException->if->name->equals->booleanValue->if->println->else->fPropertyManager->setProperty
XMLOutputFactoryImpl#toStreamResult(OutputStream, Writer, String):::StreamResult object is re-used and the values are set appropriately.:::sr->new->StreamResult->sr->setOutputStream->sr->setWriter->sr->setSystemId->return

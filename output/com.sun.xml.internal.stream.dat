com.sun.xml.internal.stream.Entity#isEntityDeclInExternalSubset()->boolean:::Returns true if this entity was declared in the external subset.
com.sun.xml.internal.stream.Entity#isExternal()->boolean:::Returns true if this is an external entity.
com.sun.xml.internal.stream.Entity#isUnparsed()->boolean:::Returns true if this is an unparsed entity.
com.sun.xml.internal.stream.Entity#clear()->void:::Clears the entity.
com.sun.xml.internal.stream.Entity#setValues(Entity)->void:::Sets the values of the entity.
com.sun.xml.internal.stream.Entity.InternalEntity#isExternal()->boolean:::Returns true if this is an external entity.
com.sun.xml.internal.stream.Entity.InternalEntity#isUnparsed()->boolean:::Returns true if this is an unparsed entity.
com.sun.xml.internal.stream.Entity.InternalEntity#clear()->void:::Clears the entity.
com.sun.xml.internal.stream.Entity.InternalEntity#setValues(Entity)->void:::Sets the values of the entity.
com.sun.xml.internal.stream.Entity.InternalEntity#setValues(InternalEntity)->void:::Sets the values of the entity.
com.sun.xml.internal.stream.Entity.ExternalEntity#isExternal()->boolean:::Returns true if this is an external entity.
com.sun.xml.internal.stream.Entity.ExternalEntity#isUnparsed()->boolean:::Returns true if this is an unparsed entity.
com.sun.xml.internal.stream.Entity.ExternalEntity#clear()->void:::Clears the entity.
com.sun.xml.internal.stream.Entity.ExternalEntity#setValues(Entity)->void:::Sets the values of the entity.
com.sun.xml.internal.stream.Entity.ExternalEntity#setValues(ExternalEntity)->void:::Sets the values of the entity.
com.sun.xml.internal.stream.Entity.ScannedEntity#getEncodingName()->String:::returns the name of the current encoding
com.sun.xml.internal.stream.Entity.ScannedEntity#getEntityVersion()->String:::each 'external' parsed entity may have xml/text declaration containing version information
com.sun.xml.internal.stream.Entity.ScannedEntity#setEntityVersion(String)->void:::each 'external' parsed entity may have xml/text declaration containing version information
com.sun.xml.internal.stream.Entity.ScannedEntity#getEntityReader()->Reader::: Returns the java.io.Reader associated with this entity.Readers are used to read from the file
com.sun.xml.internal.stream.Entity.ScannedEntity#getEntityInputStream()->InputStream:::if entity was opened using the stream, return the associated inputstream with this entity
com.sun.xml.internal.stream.Entity.ScannedEntity#close()->void:::Release any resources associated with this entity.
com.sun.xml.internal.stream.Entity.ScannedEntity#isEncodingExternallySpecified()->boolean:::Returns whether the encoding of this entity was externally specified
com.sun.xml.internal.stream.Entity.ScannedEntity#setEncodingExternallySpecified(boolean)->void:::Sets whether the encoding of this entity was externally specified
com.sun.xml.internal.stream.Entity.ScannedEntity#isDeclaredEncoding()->boolean::: scanned entity is declared encoding
com.sun.xml.internal.stream.Entity.ScannedEntity#setDeclaredEncoding(boolean)->void::: scanned entity set declared encoding
com.sun.xml.internal.stream.Entity.ScannedEntity#isExternal()->boolean:::Returns true if this is an external entity.
com.sun.xml.internal.stream.Entity.ScannedEntity#isUnparsed()->boolean:::Returns true if this is an unparsed entity.
com.sun.xml.internal.stream.Entity.ScannedEntity#toString()->String:::Returns a string representation of this object.
com.sun.xml.internal.stream.EventFilterSupport#next()->Object::: event filter support next
com.sun.xml.internal.stream.EventFilterSupport#hasNext()->boolean::: event filter support has next
com.sun.xml.internal.stream.EventFilterSupport#nextEvent()->XMLEvent::: event filter support next event
com.sun.xml.internal.stream.EventFilterSupport#nextTag()->XMLEvent::: event filter support next tag
com.sun.xml.internal.stream.EventFilterSupport#peek()->XMLEvent::: event filter support peek
com.sun.xml.internal.stream.StaxEntityResolverWrapper#setStaxEntityResolver(XMLResolver)->void::: stax entity resolver wrapper set stax entity resolver
com.sun.xml.internal.stream.StaxEntityResolverWrapper#getStaxEntityResolver()->XMLResolver::: stax entity resolver wrapper get stax entity resolver
com.sun.xml.internal.stream.StaxEntityResolverWrapper#resolveEntity(XMLResourceIdentifier)->StaxXMLInputSource::: stax entity resolver wrapper resolve entity
com.sun.xml.internal.stream.StaxEntityResolverWrapper#getStaxInputSource(Object)->StaxXMLInputSource::: stax entity resolver wrapper get stax input source
com.sun.xml.internal.stream.StaxErrorReporter#reset(PropertyManager)->void:::One must call reset before using any of the function.
com.sun.xml.internal.stream.StaxErrorReporter#reportError(XMLLocator, String, String, Object[], short)->String:::Reports an error at a specific location.
com.sun.xml.internal.stream.StaxErrorReporter#convertToStaxLocation(XMLLocator)->Location::: stax error reporter convert to stax location
com.sun.xml.internal.stream.StaxXMLInputSource#getXMLStreamReader()->XMLStreamReader::: stax input source get stream reader
com.sun.xml.internal.stream.StaxXMLInputSource#getXMLEventReader()->XMLEventReader::: stax input source get event reader
com.sun.xml.internal.stream.StaxXMLInputSource#getXMLInputSource()->XMLInputSource::: stax input source get input source
com.sun.xml.internal.stream.StaxXMLInputSource#hasXMLStreamOrXMLEventReader()->boolean::: stax input source has stream or event reader
com.sun.xml.internal.stream.StaxXMLInputSource#isCreatedByResolver()->boolean::: stax input source is created by resolver
com.sun.xml.internal.stream.XMLBufferListener#refresh()->void:::Will be invoked by XMLEntityReader before it tries to resize,load new data into current ScannedEntities buffer.
com.sun.xml.internal.stream.XMLBufferListener#refresh(int)->void:::receives callbacks from XMLEntityReader  when buffer is being changed.
com.sun.xml.internal.stream.XMLEntityReader#setEncoding(String)->void:::Sets the encoding of the scanner
com.sun.xml.internal.stream.XMLEntityReader#getEncoding()->String::: entity reader get encoding
com.sun.xml.internal.stream.XMLEntityReader#getCharacterOffset()->int::: entity reader get character offset
com.sun.xml.internal.stream.XMLEntityReader#setVersion(String)->void:::the version of the current entity being scanned or the version of the entity on which reader is operating
com.sun.xml.internal.stream.XMLEntityReader#getVersion()->String:::get the version of the entity on which reader is operating
com.sun.xml.internal.stream.XMLEntityReader#isExternal()->boolean:::Returns true if the current entity being scanned is external.
com.sun.xml.internal.stream.XMLEntityReader#peekChar()->int:::Returns the next character on the input
com.sun.xml.internal.stream.XMLEntityReader#scanChar()->int:::Returns the next character on the input
com.sun.xml.internal.stream.XMLEntityReader#scanNmtoken()->String:::Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present
com.sun.xml.internal.stream.XMLEntityReader#scanName()->String:::Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present
com.sun.xml.internal.stream.XMLEntityReader#scanQName(QName)->boolean:::Scans a qualified name from the input, setting the fields of the QName structure appropriately
com.sun.xml.internal.stream.XMLEntityReader#scanContent(XMLString)->int:::CHANGED: Scans a range of parsed character data, This function appends the character data to the supplied buffer
com.sun.xml.internal.stream.XMLEntityReader#scanLiteral(int, XMLString)->int:::Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately
com.sun.xml.internal.stream.XMLEntityReader#scanData(String, XMLStringBuffer)->boolean:::Scans a range of character data up to the specicied delimiter, setting the fields of the XMLString structure, appropriately
com.sun.xml.internal.stream.XMLEntityReader#skipChar(int)->boolean:::Skips a character appearing immediately on the input
com.sun.xml.internal.stream.XMLEntityReader#skipSpaces()->boolean:::Skips space characters appearing immediately on the input
com.sun.xml.internal.stream.XMLEntityReader#skipString(String)->boolean:::Skips the specified string appearing immediately on the input
com.sun.xml.internal.stream.XMLEntityReader#registerListener(XMLBufferListener)->void::: entity reader register listener
com.sun.xml.internal.stream.XMLEntityStorage#reset(PropertyManager)->void::: entity storage reset
com.sun.xml.internal.stream.XMLEntityStorage#reset()->void::: entity storage reset
com.sun.xml.internal.stream.XMLEntityStorage#reset(XMLComponentManager)->void:::Resets the component
com.sun.xml.internal.stream.XMLEntityStorage#getEntity(String)->Entity:::Returns entity declaration.
com.sun.xml.internal.stream.XMLEntityStorage#getEntities()->Map::: entity storage get entities
com.sun.xml.internal.stream.XMLEntityStorage#addInternalEntity(String, String)->void:::Adds an internal entity declaration
com.sun.xml.internal.stream.XMLEntityStorage#addExternalEntity(String, String, String, String)->void:::Adds an external entity declaration
com.sun.xml.internal.stream.XMLEntityStorage#isExternalEntity(String)->boolean:::Checks whether an entity given by name is external.
com.sun.xml.internal.stream.XMLEntityStorage#isEntityDeclInExternalSubset(String)->boolean:::Checks whether the declaration of an entity given by name is // in the external subset.
com.sun.xml.internal.stream.XMLEntityStorage#addUnparsedEntity(String, String, String, String, String)->void:::Adds an unparsed entity declaration
com.sun.xml.internal.stream.XMLEntityStorage#isUnparsedEntity(String)->boolean:::Checks whether an entity given by name is unparsed.
com.sun.xml.internal.stream.XMLEntityStorage#isDeclaredEntity(String)->boolean:::Checks whether an entity given by name is declared.
com.sun.xml.internal.stream.XMLEntityStorage#expandSystemId(String)->String:::Expands a system id and returns the system id as a URI, if it can be expanded
com.sun.xml.internal.stream.XMLEntityStorage#expandSystemId(String, String)->String:::Expands a system id and returns the system id as a URI, if it can be expanded
com.sun.xml.internal.stream.XMLEntityStorage#fixURI(String)->String:::Fixes a platform dependent filename to standard URI form.
com.sun.xml.internal.stream.XMLEntityStorage#startExternalSubset()->void::: entity storage start external subset
com.sun.xml.internal.stream.XMLEntityStorage#endExternalSubset()->void::: entity storage end external subset
com.sun.xml.internal.stream.XMLEventReaderImpl#hasNext()->boolean::: event reader impl has next
com.sun.xml.internal.stream.XMLEventReaderImpl#nextEvent()->XMLEvent::: event reader impl next event
com.sun.xml.internal.stream.XMLEventReaderImpl#remove()->void::: event reader impl remove
com.sun.xml.internal.stream.XMLEventReaderImpl#close()->void::: event reader impl close
com.sun.xml.internal.stream.XMLEventReaderImpl#getElementText()->String:::Reads the content of a text-only element
com.sun.xml.internal.stream.XMLEventReaderImpl#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation
com.sun.xml.internal.stream.XMLEventReaderImpl#nextTag()->XMLEvent:::Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached
com.sun.xml.internal.stream.XMLEventReaderImpl#next()->Object::: event reader impl next
com.sun.xml.internal.stream.XMLEventReaderImpl#peek()->XMLEvent::: event reader impl peek
com.sun.xml.internal.stream.XMLInputFactoryImpl#initEventReader()->void::: input factory impl init event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(InputStream)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(Reader)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(Source)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(String, InputStream)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(java.io.InputStream, String)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(String, Reader)->XMLEventReader::: input factory impl create event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLEventReader(XMLStreamReader)->XMLEventReader:::Create a new XMLEventReader from an XMLStreamReader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(InputStream)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(Reader)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(String, Reader)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(Source)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(String, InputStream)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createXMLStreamReader(InputStream, String)->XMLStreamReader::: input factory impl create stream reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#getEventAllocator()->XMLEventAllocator::: input factory impl get event allocator
com.sun.xml.internal.stream.XMLInputFactoryImpl#getXMLReporter()->XMLReporter::: input factory impl get reporter
com.sun.xml.internal.stream.XMLInputFactoryImpl#getXMLResolver()->XMLResolver::: input factory impl get resolver
com.sun.xml.internal.stream.XMLInputFactoryImpl#setXMLReporter(XMLReporter)->void::: input factory impl set reporter
com.sun.xml.internal.stream.XMLInputFactoryImpl#setXMLResolver(XMLResolver)->void::: input factory impl set resolver
com.sun.xml.internal.stream.XMLInputFactoryImpl#createFilteredReader(XMLEventReader, EventFilter)->XMLEventReader:::Create a filtered event reader that wraps the filter around the event reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#createFilteredReader(XMLStreamReader, StreamFilter)->XMLStreamReader:::Create a filtered reader that wraps the filter around the reader
com.sun.xml.internal.stream.XMLInputFactoryImpl#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation
com.sun.xml.internal.stream.XMLInputFactoryImpl#isPropertySupported(String)->boolean:::Query the set of fProperties that this factory supports.
com.sun.xml.internal.stream.XMLInputFactoryImpl#setEventAllocator(XMLEventAllocator)->void:::Set a user defined event allocator for events
com.sun.xml.internal.stream.XMLInputFactoryImpl#setProperty(java.lang.String, Object)->void:::Allows the user to set specific feature/property on the underlying implementation
com.sun.xml.internal.stream.XMLInputFactoryImpl#getXMLStreamReaderImpl(XMLInputSource)->XMLStreamReader::: input factory impl get stream reader impl
com.sun.xml.internal.stream.XMLInputFactoryImpl#jaxpSourcetoXMLInputSource(Source)->XMLInputSource::: input factory impl jaxp sourceto input source
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLEventWriter(java.io.OutputStream)->javax.xml.stream.XMLEventWriter::: output factory impl create event writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLEventWriter(java.io.OutputStream, String)->javax.xml.stream.XMLEventWriter::: output factory impl create event writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLEventWriter(javax.xml.transform.Result)->javax.xml.stream.XMLEventWriter::: output factory impl create event writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLEventWriter(java.io.Writer)->javax.xml.stream.XMLEventWriter::: output factory impl create event writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLStreamWriter(javax.xml.transform.Result)->javax.xml.stream.XMLStreamWriter::: output factory impl create stream writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLStreamWriter(java.io.Writer)->javax.xml.stream.XMLStreamWriter::: output factory impl create stream writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLStreamWriter(java.io.OutputStream)->javax.xml.stream.XMLStreamWriter::: output factory impl create stream writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLStreamWriter(java.io.OutputStream, String)->javax.xml.stream.XMLStreamWriter::: output factory impl create stream writer
com.sun.xml.internal.stream.XMLOutputFactoryImpl#getProperty(String)->Object::: output factory impl get property
com.sun.xml.internal.stream.XMLOutputFactoryImpl#isPropertySupported(String)->boolean::: output factory impl is property supported
com.sun.xml.internal.stream.XMLOutputFactoryImpl#setProperty(String, Object)->void::: output factory impl set property
com.sun.xml.internal.stream.XMLOutputFactoryImpl#toStreamResult(OutputStream, Writer, String)->StreamResult:::StreamResult object is re-used and the values are set appropriately.
com.sun.xml.internal.stream.XMLOutputFactoryImpl#createXMLStreamWriter(javax.xml.transform.stream.StreamResult, String)->javax.xml.stream.XMLStreamWriter::: output factory impl create stream writer

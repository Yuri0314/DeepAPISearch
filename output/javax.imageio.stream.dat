FileCacheImageInputStream#readUntil(long):::Ensures that at least pos bytes are cached, or the end of the source is reached:::if->return->if->return->len->cache->seek->while->nbytes->stream->Math->min->read->if->return->cache->write->return
FileCacheImageInputStream#read()::: file cache image input stream read:::checkClosed->next->pos->readUntil->if->cache->seek->return->cache->read->else->return
FileCacheImageInputStream#read(byte[], int, int)::: file cache image input stream read:::checkClosed->if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->return->pos->readUntil->Math->min->if->cache->seek->cache->readFully->return->else->return
FileCacheImageInputStream#isCached():::Returns true since this ImageInputStream caches data in order to allow seeking backwards.:::return
FileCacheImageInputStream#isCachedFile():::Returns true since this ImageInputStream maintains a file cache.:::return
FileCacheImageInputStream#isCachedMemory():::Returns false since this ImageInputStream does not maintain a main memory cache.:::return
FileCacheImageInputStream#close():::Closes this FileCacheImageInputStream, closing and removing the cache file:::super->close->disposerRecord->dispose->StreamCloser->removeFromQueue
FileCacheImageInputStream#finalize()::: file cache image input stream finalize:::
FileCacheImageInputStream.StreamDisposerRecord#dispose()::: stream disposer record dispose:::if->try->cache->close->catch->finally->if->cacheFile->delete
FileCacheImageOutputStream#read()::: file cache image output stream read:::checkClosed->val->cache->read->if->return
FileCacheImageOutputStream#read(byte[], int, int)::: file cache image output stream read:::checkClosed->if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->return->nbytes->cache->read->if->return
FileCacheImageOutputStream#write(int)::: file cache image output stream write:::flushBits->cache->write->Math->max
FileCacheImageOutputStream#write(byte[], int, int)::: file cache image output stream write:::flushBits->cache->write->Math->max
FileCacheImageOutputStream#length()::: file cache image output stream length:::try->checkClosed->return->cache->length->catch->return->finally
FileCacheImageOutputStream#seek(long):::Sets the current stream position and resets the bit offset to 0:::checkClosed->if->throw->new->IndexOutOfBoundsException->cache->seek->cache->getFilePointer->Math->max
FileCacheImageOutputStream#isCached():::Returns true since this ImageOutputStream caches data in order to allow seeking backwards.:::return
FileCacheImageOutputStream#isCachedFile():::Returns true since this ImageOutputStream maintains a file cache.:::return
FileCacheImageOutputStream#isCachedMemory():::Returns false since this ImageOutputStream does not maintain a main memory cache.:::return
FileCacheImageOutputStream#close():::Closes this FileCacheImageOutputStream:::cache->length->seek->flushBefore->super->close->cache->close->cacheFile->delete->stream->flush->StreamCloser->removeFromQueue
FileCacheImageOutputStream#flushBefore(long)::: file cache image output stream flush before:::oFlushedPos->super->flushBefore->flushBytes->if->bufLen->buf->new->byteArr->cache->seek->while->len->Math->min->cache->readFully->stream->write->stream->flush
FileImageInputStream#read()::: file image input stream read:::checkClosed->val->raf->read->if->return
FileImageInputStream#read(byte[], int, int)::: file image input stream read:::checkClosed->nbytes->raf->read->if->return
FileImageInputStream#length():::Returns the length of the underlying file, or -1 if it is unknown.:::try->checkClosed->return->raf->length->catch->return->finally
FileImageInputStream#seek(long)::: file image input stream seek:::checkClosed->if->throw->new->IndexOutOfBoundsException->raf->seek->raf->getFilePointer
FileImageInputStream#close()::: file image input stream close:::super->close->disposerRecord->dispose
FileImageInputStream#finalize()::: file image input stream finalize:::
FileImageOutputStream#read()::: file image output stream read:::checkClosed->val->raf->read->if->return
FileImageOutputStream#read(byte[], int, int)::: file image output stream read:::checkClosed->nbytes->raf->read->if->return
FileImageOutputStream#write(int)::: file image output stream write:::flushBits->raf->write
FileImageOutputStream#write(byte[], int, int)::: file image output stream write:::flushBits->raf->write
FileImageOutputStream#length()::: file image output stream length:::try->checkClosed->return->raf->length->catch->return->finally
FileImageOutputStream#seek(long):::Sets the current stream position and resets the bit offset to 0:::checkClosed->if->throw->new->IndexOutOfBoundsException->raf->seek->raf->getFilePointer
FileImageOutputStream#close()::: file image output stream close:::super->close->disposerRecord->dispose
FileImageOutputStream#finalize()::: file image output stream finalize:::
IIOByteBuffer#getData():::Returns a reference to the byte array:::return
IIOByteBuffer#setData(byte[]):::Updates the array reference that will be returned by subsequent calls to the getData method.:::
IIOByteBuffer#getOffset():::Returns the offset within the byte array returned by getData at which the data of interest start.:::return
IIOByteBuffer#setOffset(int):::Updates the value that will be returned by subsequent calls to the getOffset method.:::
IIOByteBuffer#getLength():::Returns the length of the data of interest within the byte array returned by getData.:::return
IIOByteBuffer#setLength(int):::Updates the value that will be returned by subsequent calls to the getLength method.:::
ImageInputStream#setByteOrder(ByteOrder):::Sets the desired byte order for future reads of data values from this stream:::
ImageInputStream#getByteOrder():::Returns the byte order with which data values will be read from this stream as an instance of the java.nio.ByteOrder enumeration.:::
ImageInputStream#read():::Reads a single byte from the stream and returns it as an integer between 0 and 255:::
ImageInputStream#read(byte[]):::Reads up to b.length bytes from the stream, and stores them into b starting at index 0:::
ImageInputStream#read(byte[], int, int):::Reads up to len bytes from the stream, and stores them into b starting at index off:::
ImageInputStream#readBytes(IIOByteBuffer, int):::Reads up to len bytes from the stream, and modifies the supplied IIOByteBuffer to indicate the byte array, offset, and length where the data may be found:::
ImageInputStream#readBoolean():::Reads a byte from the stream and returns a boolean value of true if it is nonzero, false if it is zero:::
ImageInputStream#readByte():::Reads a byte from the stream and returns it as a byte value:::
ImageInputStream#readUnsignedByte():::Reads a byte from the stream, and (conceptually) converts it to an int, masks it with 0xff in order to strip off any sign-extension bits, and returns it as a byte value:::
ImageInputStream#readShort():::Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a short value:::
ImageInputStream#readUnsignedShort():::Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the resulting value to an int, masks it with 0xffff in order to strip off any sign-extension buts, and returns the result as an unsigned int value:::
ImageInputStream#readChar():::Equivalent to readUnsignedShort, except that the result is returned using the char datatype:::
ImageInputStream#readInt():::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as an int:::
ImageInputStream#readUnsignedInt():::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the result to a long, masks it with 0xffffffffL in order to strip off any sign-extension bits, and returns the result as an unsigned long value:::
ImageInputStream#readLong():::Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a long:::
ImageInputStream#readFloat():::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a float:::
ImageInputStream#readDouble():::Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a double:::
ImageInputStream#readLine():::Reads the next line of text from the input stream:::
ImageInputStream#readUTF():::Reads in a string that has been encoded using a modified UTF-8 format:::
ImageInputStream#readFully(byte[], int, int):::Reads len bytes from the stream, and stores them into b starting at index off:::
ImageInputStream#readFully(byte[]):::Reads b.length bytes from the stream, and stores them into b starting at index 0:::
ImageInputStream#readFully(short[], int, int):::Reads len shorts (signed 16-bit integers) from the stream according to the current byte order, and stores them into s starting at index off:::
ImageInputStream#readFully(char[], int, int):::Reads len chars (unsigned 16-bit integers) from the stream according to the current byte order, and stores them into c starting at index off:::
ImageInputStream#readFully(int[], int, int):::Reads len ints (signed 32-bit integers) from the stream according to the current byte order, and stores them into i starting at index off:::
ImageInputStream#readFully(long[], int, int):::Reads len longs (signed 64-bit integers) from the stream according to the current byte order, and stores them into l starting at index off:::
ImageInputStream#readFully(float[], int, int):::Reads len floats (32-bit IEEE single-precision floats) from the stream according to the current byte order, and stores them into f starting at index off:::
ImageInputStream#readFully(double[], int, int):::Reads len doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into d starting at index off:::
ImageInputStream#getStreamPosition():::Returns the current byte position of the stream:::
ImageInputStream#getBitOffset():::Returns the current bit offset, as an integer between 0 and 7, inclusive:::
ImageInputStream#setBitOffset(int):::Sets the bit offset to an integer between 0 and 7, inclusive:::
ImageInputStream#readBit():::Reads a single bit from the stream and returns it as an int with the value 0 or 1:::
ImageInputStream#readBits(int):::Reads a bitstring from the stream and returns it as a long, with the first bit read becoming the most significant bit of the output:::
ImageInputStream#length():::Returns the total length of the stream, if known:::
ImageInputStream#skipBytes(int):::Moves the stream position forward by a given number of bytes:::
ImageInputStream#skipBytes(long):::Moves the stream position forward by a given number of bytes:::
ImageInputStream#seek(long):::Sets the current stream position to the desired location:::
ImageInputStream#mark():::Marks a position in the stream to be returned to by a subsequent call to reset:::
ImageInputStream#reset():::Returns the stream pointer to its previous position, including the bit offset, at the time of the most recent unmatched call to mark:::
ImageInputStream#flushBefore(long):::Discards the initial portion of the stream prior to the indicated position:::
ImageInputStream#flush():::Discards the initial position of the stream prior to the current stream position:::
ImageInputStream#getFlushedPosition():::Returns the earliest position in the stream to which seeking may be performed:::
ImageInputStream#isCached():::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards:::
ImageInputStream#isCachedMemory():::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards, and the cache is kept in main memory:::
ImageInputStream#isCachedFile():::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards, and the cache is kept in a temporary file:::
ImageInputStream#close():::Closes the stream:::
ImageInputStreamImpl#checkClosed():::Throws an IOException if the stream has been closed:::if->throw->new->IOException
ImageInputStreamImpl#setByteOrder(ByteOrder)::: image input stream impl set byte order:::
ImageInputStreamImpl#getByteOrder()::: image input stream impl get byte order:::return
ImageInputStreamImpl#read():::Reads a single byte from the stream and returns it as an int between 0 and 255:::
ImageInputStreamImpl#read(byte[]):::A convenience method that calls read(b, 0, b.length):::return->read
ImageInputStreamImpl#read(byte[], int, int):::Reads up to len bytes from the stream, and stores them into b starting at index off:::
ImageInputStreamImpl#readBytes(IIOByteBuffer, int)::: image input stream impl read bytes:::if->throw->new->IndexOutOfBoundsException->if->throw->new->NullPointerException->data->new->byteArr->read->buf->setData->buf->setOffset->buf->setLength
ImageInputStreamImpl#readBoolean()::: image input stream impl read boolean:::ch->this->read->if->throw->new->EOFException->return
ImageInputStreamImpl#readByte()::: image input stream impl read byte:::ch->this->read->if->throw->new->EOFException->return
ImageInputStreamImpl#readUnsignedByte()::: image input stream impl read unsigned byte:::ch->this->read->if->throw->new->EOFException->return
ImageInputStreamImpl#readShort()::: image input stream impl read short:::if->read->throw->new->EOFException->if->return->else->return
ImageInputStreamImpl#readUnsignedShort()::: image input stream impl read unsigned short:::return->readShort
ImageInputStreamImpl#readChar()::: image input stream impl read char:::return->readShort
ImageInputStreamImpl#readInt()::: image input stream impl read int:::if->read->throw->new->EOFException->if->return->else->return
ImageInputStreamImpl#readUnsignedInt()::: image input stream impl read unsigned int:::return->readInt
ImageInputStreamImpl#readLong()::: image input stream impl read long:::i1->readInt->i2->readInt->if->return->else->return
ImageInputStreamImpl#readFloat()::: image input stream impl read float:::return->Float->readInt->intBitsToFloat
ImageInputStreamImpl#readDouble()::: image input stream impl read double:::return->Double->readLong->longBitsToDouble
ImageInputStreamImpl#readLine()::: image input stream impl read line:::input->new->StringBuilder->c->eol->while->switch->read->break->cur->getStreamPosition->if->read->seek->break->input->append->break->if->input->length->return->return->input->toString
ImageInputStreamImpl#readUTF()::: image input stream impl read f:::oldByteOrder->getByteOrder->setByteOrder->ret->try->DataInputStream->readUTF->catch->setByteOrder->throw->finally->setByteOrder->return
ImageInputStreamImpl#readFully(byte[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nbytes->read->if->throw->new->EOFException
ImageInputStreamImpl#readFully(byte[])::: image input stream impl read fully:::readFully
ImageInputStreamImpl#readFully(short[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toShorts
ImageInputStreamImpl#readFully(char[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toChars
ImageInputStreamImpl#readFully(int[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toInts
ImageInputStreamImpl#readFully(long[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toLongs
ImageInputStreamImpl#readFully(float[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toFloats
ImageInputStreamImpl#readFully(double[], int, int)::: image input stream impl read fully:::if->throw->new->IndexOutOfBoundsException->while->nelts->Math->min->readFully->toDoubles
ImageInputStreamImpl#toShorts(byte[], short[], int, int)::: image input stream impl to shorts:::boff->if->for->j->else->for->j
ImageInputStreamImpl#toChars(byte[], char[], int, int)::: image input stream impl to chars:::boff->if->for->j->else->for->j
ImageInputStreamImpl#toInts(byte[], int[], int, int)::: image input stream impl to ints:::boff->if->for->j->else->for->j
ImageInputStreamImpl#toLongs(byte[], long[], int, int)::: image input stream impl to longs:::boff->if->for->j->else->for->j
ImageInputStreamImpl#toFloats(byte[], float[], int, int)::: image input stream impl to floats:::boff->if->for->j->else->for->j
ImageInputStreamImpl#toDoubles(byte[], double[], int, int)::: image input stream impl to doubles:::boff->if->for->j->else->for->j
ImageInputStreamImpl#getStreamPosition()::: image input stream impl get stream position:::checkClosed->return
ImageInputStreamImpl#getBitOffset()::: image input stream impl get bit offset:::checkClosed->return
ImageInputStreamImpl#setBitOffset(int)::: image input stream impl set bit offset:::checkClosed->if->throw->new->IllegalArgumentException
ImageInputStreamImpl#readBit()::: image input stream impl read bit:::checkClosed->newBitOffset->val->read->if->throw->new->EOFException->if->getStreamPosition->seek->return
ImageInputStreamImpl#readBits(int)::: image input stream impl read bits:::checkClosed->if->throw->new->IllegalArgumentException->if->return->bitsToRead->newBitOffset->accum->while->val->read->if->throw->new->EOFException->if->getStreamPosition->seek->return
ImageInputStreamImpl#length():::Returns -1L to indicate that the stream has unknown length:::return
ImageInputStreamImpl#skipBytes(int):::Advances the current stream position by calling seek(getStreamPosition() + n):::pos->getStreamPosition->seek->return->getStreamPosition
ImageInputStreamImpl#skipBytes(long):::Advances the current stream position by calling seek(getStreamPosition() + n):::pos->getStreamPosition->seek->return->getStreamPosition
ImageInputStreamImpl#seek(long)::: image input stream impl seek:::checkClosed->if->throw->new->IndexOutOfBoundsException
ImageInputStreamImpl#mark():::Pushes the current stream position onto a stack of marked positions.:::try->markByteStack->Long->getStreamPosition->valueOf->push->markBitStack->Integer->getBitOffset->valueOf->push->catch->finally
ImageInputStreamImpl#reset():::Resets the current stream byte and bit positions from the stack of marked positions:::if->markByteStack->empty->return->pos->markByteStack->pop->longValue->if->throw->new->IIOException->seek->offset->markBitStack->pop->intValue->setBitOffset
ImageInputStreamImpl#flushBefore(long)::: image input stream impl flush before:::checkClosed->if->throw->new->IndexOutOfBoundsException->if->getStreamPosition->throw->new->IndexOutOfBoundsException
ImageInputStreamImpl#flush()::: image input stream impl flush:::getStreamPosition->flushBefore
ImageInputStreamImpl#getFlushedPosition()::: image input stream impl get flushed position:::return
ImageInputStreamImpl#isCached():::Default implementation returns false:::return
ImageInputStreamImpl#isCachedMemory():::Default implementation returns false:::return
ImageInputStreamImpl#isCachedFile():::Default implementation returns false:::return
ImageInputStreamImpl#close()::: image input stream impl close:::checkClosed
ImageInputStreamImpl#finalize():::Finalizes this object prior to garbage collection:::if->try->close->catch->finally->super->finalize
ImageOutputStream#write(int):::Writes a single byte to the stream at the current position:::
ImageOutputStream#write(byte[]):::Writes a sequence of bytes to the stream at the current position:::
ImageOutputStream#write(byte[], int, int):::Writes a sequence of bytes to the stream at the current position:::
ImageOutputStream#writeBoolean(boolean):::Writes a boolean value to the stream:::
ImageOutputStream#writeByte(int):::Writes the 8 low-order bits of v to the stream:::
ImageOutputStream#writeShort(int):::Writes the 16 low-order bits of v to the stream:::
ImageOutputStream#writeChar(int):::This method is a synonym for #writeShort writeShort.:::
ImageOutputStream#writeInt(int):::Writes the 32 bits of v to the stream:::
ImageOutputStream#writeLong(long):::Writes the 64 bits of v to the stream:::
ImageOutputStream#writeFloat(float):::Writes a float value, which is comprised of four bytes, to the output stream:::
ImageOutputStream#writeDouble(double):::Writes a double value, which is comprised of four bytes, to the output stream:::
ImageOutputStream#writeBytes(String):::Writes a string to the output stream:::
ImageOutputStream#writeChars(String):::Writes a string to the output stream:::
ImageOutputStream#writeUTF(String):::Writes two bytes of length information to the output stream in network byte order, followed by the modified UTF-8 representation of every character in the string s:::
ImageOutputStream#writeShorts(short[], int, int):::Writes a sequence of shorts to the stream at the current position:::
ImageOutputStream#writeChars(char[], int, int):::Writes a sequence of chars to the stream at the current position:::
ImageOutputStream#writeInts(int[], int, int):::Writes a sequence of ints to the stream at the current position:::
ImageOutputStream#writeLongs(long[], int, int):::Writes a sequence of longs to the stream at the current position:::
ImageOutputStream#writeFloats(float[], int, int):::Writes a sequence of floats to the stream at the current position:::
ImageOutputStream#writeDoubles(double[], int, int):::Writes a sequence of doubles to the stream at the current position:::
ImageOutputStream#writeBit(int):::Writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position:::
ImageOutputStream#writeBits(long, int):::Writes a sequence of bits, given by the numBits least significant bits of the bits argument in left-to-right order, to the stream at the current bit offset within the current byte position:::
ImageOutputStream#flushBefore(long):::Flushes all data prior to the given position to the underlying destination, such as an OutputStream or File:::
ImageOutputStreamImpl#write(int)::: image output stream impl write:::
ImageOutputStreamImpl#write(byte[])::: image output stream impl write:::write
ImageOutputStreamImpl#write(byte[], int, int)::: image output stream impl write:::
ImageOutputStreamImpl#writeBoolean(boolean)::: image output stream impl write boolean:::write
ImageOutputStreamImpl#writeByte(int)::: image output stream impl write byte:::write
ImageOutputStreamImpl#writeShort(int)::: image output stream impl write short:::if->else->write
ImageOutputStreamImpl#writeChar(int)::: image output stream impl write char:::writeShort
ImageOutputStreamImpl#writeInt(int)::: image output stream impl write int:::if->else->write
ImageOutputStreamImpl#writeLong(long)::: image output stream impl write long:::if->else->write->write
ImageOutputStreamImpl#writeFloat(float)::: image output stream impl write float:::Float->floatToIntBits->writeInt
ImageOutputStreamImpl#writeDouble(double)::: image output stream impl write double:::Double->doubleToLongBits->writeLong
ImageOutputStreamImpl#writeBytes(String)::: image output stream impl write bytes:::len->s->length->for->i
ImageOutputStreamImpl#writeChars(String)::: image output stream impl write chars:::len->s->length->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeUTF(String)::: image output stream impl write f:::strlen->s->length->utflen->charr->new->charArr->c->boff->s->getChars->for->i->if->throw->new->UTFDataFormatException->b->new->byteArr->for->i->write
ImageOutputStreamImpl#writeShorts(short[], int, int)::: image output stream impl write shorts:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeChars(char[], int, int)::: image output stream impl write chars:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeInts(int[], int, int)::: image output stream impl write ints:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->j->else->for->j->write
ImageOutputStreamImpl#writeLongs(long[], int, int)::: image output stream impl write longs:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeFloats(float[], int, int)::: image output stream impl write floats:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeDoubles(double[], int, int)::: image output stream impl write doubles:::if->throw->new->IndexOutOfBoundsException->b->new->byteArr->boff->if->for->i->else->for->i->write
ImageOutputStreamImpl#writeBit(int)::: image output stream impl write bit:::writeBits
ImageOutputStreamImpl#writeBits(long, int)::: image output stream impl write bits:::checkClosed->if->throw->new->IllegalArgumentException->if->return->if->getStreamPosition->offset->partialByte->read->if->getStreamPosition->seek->else->if->shift->mask->write->getStreamPosition->seek->else->num->mask->write->if->extra->for->numBytes->if->partialByte->read->if->getStreamPosition->seek->else->shift->mask->write->getStreamPosition->seek
ImageOutputStreamImpl#flushBits():::If the bit offset is non-zero, forces the remaining bits in the current byte to 0 and advances the stream position by one:::checkClosed->if->offset->partialByte->read->if->else->getStreamPosition->seek->write
MemoryCache#getCacheBlock(long)::: memory cache get cache block:::blockOffset->if->throw->new->IOException->return->cache->get
MemoryCache#loadFromStream(InputStream, long):::Ensures that at least pos bytes are cached, or the end of the source is reached:::if->return->offset->buf->len->if->getCacheBlock->while->if->try->new->byteArr->catch->throw->new->IOException->finally->left->nbytes->Math->min->stream->read->if->return->if->cache->add->if->return
MemoryCache#writeToStream(OutputStream, long, long):::Writes out a portion of the cache to an OutputStream:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->return->bufIndex->if->throw->new->IndexOutOfBoundsException->offset->buf->getCacheBlock->while->if->getCacheBlock->nbytes->Math->min->stream->write
MemoryCache#pad(long):::Ensure that there is space to write a byte at the given position:::currIndex->cache->size->lastIndex->numNewBuffers->for->i
MemoryCache#write(byte[], int, int, long):::Overwrites and/or appends the cache from a byte array:::if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->lastPos->if->pad->offset->while->buf->getCacheBlock->nbytes->Math->min->System->arraycopy
MemoryCache#write(int, long):::Overwrites or appends a single byte to the cache:::if->throw->new->ArrayIndexOutOfBoundsException->if->pad->buf->getCacheBlock->offset
MemoryCache#getLength():::Returns the total length of data that has been cached, regardless of whether any early blocks have been disposed:::return
MemoryCache#read(long):::Returns the single byte at the given position, as an int:::if->return->buf->getCacheBlock->if->return->return
MemoryCache#read(byte[], int, int, long):::Copy len bytes from the cache, starting at cache position pos, into the array b at offset off.:::if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->index->offset->while->nbytes->Math->min->buf->getCacheBlock->System->arraycopy
MemoryCache#disposeBefore(long):::Free the blocks up to the position pos:::index->if->throw->new->IndexOutOfBoundsException->numBlocks->Math->cache->size->min->for->i
MemoryCache#reset():::Erase the entire cache contents and reset the length to 0:::cache->clear
MemoryCacheImageInputStream#read()::: memory cache image input stream read:::checkClosed->pos->cache->loadFromStream->if->return->cache->read->else->return
MemoryCacheImageInputStream#read(byte[], int, int)::: memory cache image input stream read:::checkClosed->if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->return->pos->cache->loadFromStream->if->cache->read->return->else->return
MemoryCacheImageInputStream#flushBefore(long)::: memory cache image input stream flush before:::super->flushBefore->cache->disposeBefore
MemoryCacheImageInputStream#isCached():::Returns true since this ImageInputStream caches data in order to allow seeking backwards.:::return
MemoryCacheImageInputStream#isCachedFile():::Returns false since this ImageInputStream does not maintain a file cache.:::return
MemoryCacheImageInputStream#isCachedMemory():::Returns true since this ImageInputStream maintains a main memory cache.:::return
MemoryCacheImageInputStream#close():::Closes this MemoryCacheImageInputStream, freeing the cache:::super->close->disposerRecord->dispose
MemoryCacheImageInputStream#finalize()::: memory cache image input stream finalize:::
MemoryCacheImageInputStream.StreamDisposerRecord#dispose()::: stream disposer record dispose:::if->cache->reset
MemoryCacheImageOutputStream#read()::: memory cache image output stream read:::checkClosed->val->cache->read->if->return
MemoryCacheImageOutputStream#read(byte[], int, int)::: memory cache image output stream read:::checkClosed->if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->return->bytesLeftInCache->cache->getLength->if->return->Math->min->cache->read->return
MemoryCacheImageOutputStream#write(int)::: memory cache image output stream write:::flushBits->cache->write
MemoryCacheImageOutputStream#write(byte[], int, int)::: memory cache image output stream write:::flushBits->cache->write
MemoryCacheImageOutputStream#length()::: memory cache image output stream length:::try->checkClosed->return->cache->getLength->catch->return->finally
MemoryCacheImageOutputStream#isCached():::Returns true since this ImageOutputStream caches data in order to allow seeking backwards.:::return
MemoryCacheImageOutputStream#isCachedFile():::Returns false since this ImageOutputStream does not maintain a file cache.:::return
MemoryCacheImageOutputStream#isCachedMemory():::Returns true since this ImageOutputStream maintains a main memory cache.:::return
MemoryCacheImageOutputStream#close():::Closes this MemoryCacheImageOutputStream:::length->cache->getLength->seek->flushBefore->super->close->cache->reset
MemoryCacheImageOutputStream#flushBefore(long)::: memory cache image output stream flush before:::oFlushedPos->super->flushBefore->flushBytes->cache->writeToStream->cache->disposeBefore->stream->flush

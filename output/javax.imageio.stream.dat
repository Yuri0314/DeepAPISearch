javax.imageio.stream.FileCacheImageInputStream#read()->int::: file cache image input stream read
javax.imageio.stream.FileCacheImageInputStream#read(byte[], int, int)->int::: file cache image input stream read
javax.imageio.stream.FileCacheImageInputStream#isCached()->boolean:::Returns true since this ImageInputStream caches data in order to allow seeking backwards.
javax.imageio.stream.FileCacheImageInputStream#isCachedFile()->boolean:::Returns true since this ImageInputStream maintains a file cache.
javax.imageio.stream.FileCacheImageInputStream#isCachedMemory()->boolean:::Returns false since this ImageInputStream does not maintain a main memory cache.
javax.imageio.stream.FileCacheImageInputStream#close()->void:::Closes this FileCacheImageInputStream, closing and removing the cache file
javax.imageio.stream.FileCacheImageInputStream#finalize()->void::: file cache image input stream finalize
javax.imageio.stream.FileCacheImageOutputStream#read()->int::: file cache image output stream read
javax.imageio.stream.FileCacheImageOutputStream#read(byte[], int, int)->int::: file cache image output stream read
javax.imageio.stream.FileCacheImageOutputStream#write(int)->void::: file cache image output stream write
javax.imageio.stream.FileCacheImageOutputStream#write(byte[], int, int)->void::: file cache image output stream write
javax.imageio.stream.FileCacheImageOutputStream#length()->long::: file cache image output stream length
javax.imageio.stream.FileCacheImageOutputStream#seek(long)->void:::Sets the current stream position and resets the bit offset to 0
javax.imageio.stream.FileCacheImageOutputStream#isCached()->boolean:::Returns true since this ImageOutputStream caches data in order to allow seeking backwards.
javax.imageio.stream.FileCacheImageOutputStream#isCachedFile()->boolean:::Returns true since this ImageOutputStream maintains a file cache.
javax.imageio.stream.FileCacheImageOutputStream#isCachedMemory()->boolean:::Returns false since this ImageOutputStream does not maintain a main memory cache.
javax.imageio.stream.FileCacheImageOutputStream#close()->void:::Closes this FileCacheImageOutputStream
javax.imageio.stream.FileCacheImageOutputStream#flushBefore(long)->void::: file cache image output stream flush before
javax.imageio.stream.FileImageInputStream#read()->int::: file image input stream read
javax.imageio.stream.FileImageInputStream#read(byte[], int, int)->int::: file image input stream read
javax.imageio.stream.FileImageInputStream#length()->long:::Returns the length of the underlying file, or -1 if it is unknown.
javax.imageio.stream.FileImageInputStream#seek(long)->void::: file image input stream seek
javax.imageio.stream.FileImageInputStream#close()->void::: file image input stream close
javax.imageio.stream.FileImageInputStream#finalize()->void::: file image input stream finalize
javax.imageio.stream.FileImageOutputStream#read()->int::: file image output stream read
javax.imageio.stream.FileImageOutputStream#read(byte[], int, int)->int::: file image output stream read
javax.imageio.stream.FileImageOutputStream#write(int)->void::: file image output stream write
javax.imageio.stream.FileImageOutputStream#write(byte[], int, int)->void::: file image output stream write
javax.imageio.stream.FileImageOutputStream#length()->long::: file image output stream length
javax.imageio.stream.FileImageOutputStream#seek(long)->void:::Sets the current stream position and resets the bit offset to 0
javax.imageio.stream.FileImageOutputStream#close()->void::: file image output stream close
javax.imageio.stream.FileImageOutputStream#finalize()->void::: file image output stream finalize
javax.imageio.stream.IIOByteBuffer#getData()->byte[]:::Returns a reference to the byte array
javax.imageio.stream.IIOByteBuffer#setData(byte[])->void:::Updates the array reference that will be returned by subsequent calls to the getData method.
javax.imageio.stream.IIOByteBuffer#getOffset()->int:::Returns the offset within the byte array returned by getData at which the data of interest start.
javax.imageio.stream.IIOByteBuffer#setOffset(int)->void:::Updates the value that will be returned by subsequent calls to the getOffset method.
javax.imageio.stream.IIOByteBuffer#getLength()->int:::Returns the length of the data of interest within the byte array returned by getData.
javax.imageio.stream.IIOByteBuffer#setLength(int)->void:::Updates the value that will be returned by subsequent calls to the getLength method.
javax.imageio.stream.ImageInputStream#setByteOrder(ByteOrder)->void:::Sets the desired byte order for future reads of data values from this stream
javax.imageio.stream.ImageInputStream#getByteOrder()->ByteOrder:::Returns the byte order with which data values will be read from this stream as an instance of the java.nio.ByteOrder enumeration.
javax.imageio.stream.ImageInputStream#read()->int:::Reads a single byte from the stream and returns it as an integer between 0 and 255
javax.imageio.stream.ImageInputStream#read(byte[])->int:::Reads up to b.length bytes from the stream, and stores them into b starting at index 0
javax.imageio.stream.ImageInputStream#read(byte[], int, int)->int:::Reads up to len bytes from the stream, and stores them into b starting at index off
javax.imageio.stream.ImageInputStream#readBytes(IIOByteBuffer, int)->void:::Reads up to len bytes from the stream, and modifies the supplied IIOByteBuffer to indicate the byte array, offset, and length where the data may be found
javax.imageio.stream.ImageInputStream#readBoolean()->boolean:::Reads a byte from the stream and returns a boolean value of true if it is nonzero, false if it is zero
javax.imageio.stream.ImageInputStream#readByte()->byte:::Reads a byte from the stream and returns it as a byte value
javax.imageio.stream.ImageInputStream#readUnsignedByte()->int:::Reads a byte from the stream, and (conceptually) converts it to an int, masks it with 0xff in order to strip off any sign-extension bits, and returns it as a byte value
javax.imageio.stream.ImageInputStream#readShort()->short:::Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a short value
javax.imageio.stream.ImageInputStream#readUnsignedShort()->int:::Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the resulting value to an int, masks it with 0xffff in order to strip off any sign-extension buts, and returns the result as an unsigned int value
javax.imageio.stream.ImageInputStream#readChar()->char:::Equivalent to readUnsignedShort, except that the result is returned using the char datatype
javax.imageio.stream.ImageInputStream#readInt()->int:::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as an int
javax.imageio.stream.ImageInputStream#readUnsignedInt()->long:::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the result to a long, masks it with 0xffffffffL in order to strip off any sign-extension bits, and returns the result as an unsigned long value
javax.imageio.stream.ImageInputStream#readLong()->long:::Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a long
javax.imageio.stream.ImageInputStream#readFloat()->float:::Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a float
javax.imageio.stream.ImageInputStream#readDouble()->double:::Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a double
javax.imageio.stream.ImageInputStream#readLine()->String:::Reads the next line of text from the input stream
javax.imageio.stream.ImageInputStream#readUTF()->String:::Reads in a string that has been encoded using a modified UTF-8 format
javax.imageio.stream.ImageInputStream#readFully(byte[], int, int)->void:::Reads len bytes from the stream, and stores them into b starting at index off
javax.imageio.stream.ImageInputStream#readFully(byte[])->void:::Reads b.length bytes from the stream, and stores them into b starting at index 0
javax.imageio.stream.ImageInputStream#readFully(short[], int, int)->void:::Reads len shorts (signed 16-bit integers) from the stream according to the current byte order, and stores them into s starting at index off
javax.imageio.stream.ImageInputStream#readFully(char[], int, int)->void:::Reads len chars (unsigned 16-bit integers) from the stream according to the current byte order, and stores them into c starting at index off
javax.imageio.stream.ImageInputStream#readFully(int[], int, int)->void:::Reads len ints (signed 32-bit integers) from the stream according to the current byte order, and stores them into i starting at index off
javax.imageio.stream.ImageInputStream#readFully(long[], int, int)->void:::Reads len longs (signed 64-bit integers) from the stream according to the current byte order, and stores them into l starting at index off
javax.imageio.stream.ImageInputStream#readFully(float[], int, int)->void:::Reads len floats (32-bit IEEE single-precision floats) from the stream according to the current byte order, and stores them into f starting at index off
javax.imageio.stream.ImageInputStream#readFully(double[], int, int)->void:::Reads len doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into d starting at index off
javax.imageio.stream.ImageInputStream#getStreamPosition()->long:::Returns the current byte position of the stream
javax.imageio.stream.ImageInputStream#getBitOffset()->int:::Returns the current bit offset, as an integer between 0 and 7, inclusive
javax.imageio.stream.ImageInputStream#setBitOffset(int)->void:::Sets the bit offset to an integer between 0 and 7, inclusive
javax.imageio.stream.ImageInputStream#readBit()->int:::Reads a single bit from the stream and returns it as an int with the value 0 or 1
javax.imageio.stream.ImageInputStream#readBits(int)->long:::Reads a bitstring from the stream and returns it as a long, with the first bit read becoming the most significant bit of the output
javax.imageio.stream.ImageInputStream#length()->long:::Returns the total length of the stream, if known
javax.imageio.stream.ImageInputStream#skipBytes(int)->int:::Moves the stream position forward by a given number of bytes
javax.imageio.stream.ImageInputStream#skipBytes(long)->long:::Moves the stream position forward by a given number of bytes
javax.imageio.stream.ImageInputStream#seek(long)->void:::Sets the current stream position to the desired location
javax.imageio.stream.ImageInputStream#mark()->void:::Marks a position in the stream to be returned to by a subsequent call to reset
javax.imageio.stream.ImageInputStream#reset()->void:::Returns the stream pointer to its previous position, including the bit offset, at the time of the most recent unmatched call to mark
javax.imageio.stream.ImageInputStream#flushBefore(long)->void:::Discards the initial portion of the stream prior to the indicated position
javax.imageio.stream.ImageInputStream#flush()->void:::Discards the initial position of the stream prior to the current stream position
javax.imageio.stream.ImageInputStream#getFlushedPosition()->long:::Returns the earliest position in the stream to which seeking may be performed
javax.imageio.stream.ImageInputStream#isCached()->boolean:::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards
javax.imageio.stream.ImageInputStream#isCachedMemory()->boolean:::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards, and the cache is kept in main memory
javax.imageio.stream.ImageInputStream#isCachedFile()->boolean:::Returns true if this ImageInputStream caches data itself in order to allow seeking backwards, and the cache is kept in a temporary file
javax.imageio.stream.ImageInputStream#close()->void:::Closes the stream
javax.imageio.stream.ImageInputStreamImpl#checkClosed()->void:::Throws an IOException if the stream has been closed
javax.imageio.stream.ImageInputStreamImpl#setByteOrder(ByteOrder)->void::: image input stream impl set byte order
javax.imageio.stream.ImageInputStreamImpl#getByteOrder()->ByteOrder::: image input stream impl get byte order
javax.imageio.stream.ImageInputStreamImpl#read()->int:::Reads a single byte from the stream and returns it as an int between 0 and 255
javax.imageio.stream.ImageInputStreamImpl#read(byte[])->int:::A convenience method that calls read(b, 0, b.length)
javax.imageio.stream.ImageInputStreamImpl#read(byte[], int, int)->int:::Reads up to len bytes from the stream, and stores them into b starting at index off
javax.imageio.stream.ImageInputStreamImpl#readBytes(IIOByteBuffer, int)->void::: image input stream impl read bytes
javax.imageio.stream.ImageInputStreamImpl#readBoolean()->boolean::: image input stream impl read boolean
javax.imageio.stream.ImageInputStreamImpl#readByte()->byte::: image input stream impl read byte
javax.imageio.stream.ImageInputStreamImpl#readUnsignedByte()->int::: image input stream impl read unsigned byte
javax.imageio.stream.ImageInputStreamImpl#readShort()->short::: image input stream impl read short
javax.imageio.stream.ImageInputStreamImpl#readUnsignedShort()->int::: image input stream impl read unsigned short
javax.imageio.stream.ImageInputStreamImpl#readChar()->char::: image input stream impl read char
javax.imageio.stream.ImageInputStreamImpl#readInt()->int::: image input stream impl read int
javax.imageio.stream.ImageInputStreamImpl#readUnsignedInt()->long::: image input stream impl read unsigned int
javax.imageio.stream.ImageInputStreamImpl#readLong()->long::: image input stream impl read long
javax.imageio.stream.ImageInputStreamImpl#readFloat()->float::: image input stream impl read float
javax.imageio.stream.ImageInputStreamImpl#readDouble()->double::: image input stream impl read double
javax.imageio.stream.ImageInputStreamImpl#readLine()->String::: image input stream impl read line
javax.imageio.stream.ImageInputStreamImpl#readUTF()->String::: image input stream impl read f
javax.imageio.stream.ImageInputStreamImpl#readFully(byte[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(byte[])->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(short[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(char[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(int[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(long[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(float[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#readFully(double[], int, int)->void::: image input stream impl read fully
javax.imageio.stream.ImageInputStreamImpl#getStreamPosition()->long::: image input stream impl get stream position
javax.imageio.stream.ImageInputStreamImpl#getBitOffset()->int::: image input stream impl get bit offset
javax.imageio.stream.ImageInputStreamImpl#setBitOffset(int)->void::: image input stream impl set bit offset
javax.imageio.stream.ImageInputStreamImpl#readBit()->int::: image input stream impl read bit
javax.imageio.stream.ImageInputStreamImpl#readBits(int)->long::: image input stream impl read bits
javax.imageio.stream.ImageInputStreamImpl#length()->long:::Returns -1L to indicate that the stream has unknown length
javax.imageio.stream.ImageInputStreamImpl#skipBytes(int)->int:::Advances the current stream position by calling seek(getStreamPosition() + n)
javax.imageio.stream.ImageInputStreamImpl#skipBytes(long)->long:::Advances the current stream position by calling seek(getStreamPosition() + n)
javax.imageio.stream.ImageInputStreamImpl#seek(long)->void::: image input stream impl seek
javax.imageio.stream.ImageInputStreamImpl#mark()->void:::Pushes the current stream position onto a stack of marked positions.
javax.imageio.stream.ImageInputStreamImpl#reset()->void:::Resets the current stream byte and bit positions from the stack of marked positions
javax.imageio.stream.ImageInputStreamImpl#flushBefore(long)->void::: image input stream impl flush before
javax.imageio.stream.ImageInputStreamImpl#flush()->void::: image input stream impl flush
javax.imageio.stream.ImageInputStreamImpl#getFlushedPosition()->long::: image input stream impl get flushed position
javax.imageio.stream.ImageInputStreamImpl#isCached()->boolean:::Default implementation returns false
javax.imageio.stream.ImageInputStreamImpl#isCachedMemory()->boolean:::Default implementation returns false
javax.imageio.stream.ImageInputStreamImpl#isCachedFile()->boolean:::Default implementation returns false
javax.imageio.stream.ImageInputStreamImpl#close()->void::: image input stream impl close
javax.imageio.stream.ImageInputStreamImpl#finalize()->void:::Finalizes this object prior to garbage collection
javax.imageio.stream.ImageOutputStream#write(int)->void:::Writes a single byte to the stream at the current position
javax.imageio.stream.ImageOutputStream#write(byte[])->void:::Writes a sequence of bytes to the stream at the current position
javax.imageio.stream.ImageOutputStream#write(byte[], int, int)->void:::Writes a sequence of bytes to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeBoolean(boolean)->void:::Writes a boolean value to the stream
javax.imageio.stream.ImageOutputStream#writeByte(int)->void:::Writes the 8 low-order bits of v to the stream
javax.imageio.stream.ImageOutputStream#writeShort(int)->void:::Writes the 16 low-order bits of v to the stream
javax.imageio.stream.ImageOutputStream#writeChar(int)->void:::This method is a synonym for #writeShort writeShort.
javax.imageio.stream.ImageOutputStream#writeInt(int)->void:::Writes the 32 bits of v to the stream
javax.imageio.stream.ImageOutputStream#writeLong(long)->void:::Writes the 64 bits of v to the stream
javax.imageio.stream.ImageOutputStream#writeFloat(float)->void:::Writes a float value, which is comprised of four bytes, to the output stream
javax.imageio.stream.ImageOutputStream#writeDouble(double)->void:::Writes a double value, which is comprised of four bytes, to the output stream
javax.imageio.stream.ImageOutputStream#writeBytes(String)->void:::Writes a string to the output stream
javax.imageio.stream.ImageOutputStream#writeChars(String)->void:::Writes a string to the output stream
javax.imageio.stream.ImageOutputStream#writeUTF(String)->void:::Writes two bytes of length information to the output stream in network byte order, followed by the modified UTF-8 representation of every character in the string s
javax.imageio.stream.ImageOutputStream#writeShorts(short[], int, int)->void:::Writes a sequence of shorts to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeChars(char[], int, int)->void:::Writes a sequence of chars to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeInts(int[], int, int)->void:::Writes a sequence of ints to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeLongs(long[], int, int)->void:::Writes a sequence of longs to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeFloats(float[], int, int)->void:::Writes a sequence of floats to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeDoubles(double[], int, int)->void:::Writes a sequence of doubles to the stream at the current position
javax.imageio.stream.ImageOutputStream#writeBit(int)->void:::Writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position
javax.imageio.stream.ImageOutputStream#writeBits(long, int)->void:::Writes a sequence of bits, given by the numBits least significant bits of the bits argument in left-to-right order, to the stream at the current bit offset within the current byte position
javax.imageio.stream.ImageOutputStream#flushBefore(long)->void:::Flushes all data prior to the given position to the underlying destination, such as an OutputStream or File
javax.imageio.stream.ImageOutputStreamImpl#write(int)->void::: image output stream impl write
javax.imageio.stream.ImageOutputStreamImpl#write(byte[])->void::: image output stream impl write
javax.imageio.stream.ImageOutputStreamImpl#write(byte[], int, int)->void::: image output stream impl write
javax.imageio.stream.ImageOutputStreamImpl#writeBoolean(boolean)->void::: image output stream impl write boolean
javax.imageio.stream.ImageOutputStreamImpl#writeByte(int)->void::: image output stream impl write byte
javax.imageio.stream.ImageOutputStreamImpl#writeShort(int)->void::: image output stream impl write short
javax.imageio.stream.ImageOutputStreamImpl#writeChar(int)->void::: image output stream impl write char
javax.imageio.stream.ImageOutputStreamImpl#writeInt(int)->void::: image output stream impl write int
javax.imageio.stream.ImageOutputStreamImpl#writeLong(long)->void::: image output stream impl write long
javax.imageio.stream.ImageOutputStreamImpl#writeFloat(float)->void::: image output stream impl write float
javax.imageio.stream.ImageOutputStreamImpl#writeDouble(double)->void::: image output stream impl write double
javax.imageio.stream.ImageOutputStreamImpl#writeBytes(String)->void::: image output stream impl write bytes
javax.imageio.stream.ImageOutputStreamImpl#writeChars(String)->void::: image output stream impl write chars
javax.imageio.stream.ImageOutputStreamImpl#writeUTF(String)->void::: image output stream impl write f
javax.imageio.stream.ImageOutputStreamImpl#writeShorts(short[], int, int)->void::: image output stream impl write shorts
javax.imageio.stream.ImageOutputStreamImpl#writeChars(char[], int, int)->void::: image output stream impl write chars
javax.imageio.stream.ImageOutputStreamImpl#writeInts(int[], int, int)->void::: image output stream impl write ints
javax.imageio.stream.ImageOutputStreamImpl#writeLongs(long[], int, int)->void::: image output stream impl write longs
javax.imageio.stream.ImageOutputStreamImpl#writeFloats(float[], int, int)->void::: image output stream impl write floats
javax.imageio.stream.ImageOutputStreamImpl#writeDoubles(double[], int, int)->void::: image output stream impl write doubles
javax.imageio.stream.ImageOutputStreamImpl#writeBit(int)->void::: image output stream impl write bit
javax.imageio.stream.ImageOutputStreamImpl#writeBits(long, int)->void::: image output stream impl write bits
javax.imageio.stream.ImageOutputStreamImpl#flushBits()->void:::If the bit offset is non-zero, forces the remaining bits in the current byte to 0 and advances the stream position by one
javax.imageio.stream.MemoryCache#loadFromStream(InputStream, long)->long:::Ensures that at least pos bytes are cached, or the end of the source is reached
javax.imageio.stream.MemoryCache#writeToStream(OutputStream, long, long)->void:::Writes out a portion of the cache to an OutputStream
javax.imageio.stream.MemoryCache#write(byte[], int, int, long)->void:::Overwrites and/or appends the cache from a byte array
javax.imageio.stream.MemoryCache#write(int, long)->void:::Overwrites or appends a single byte to the cache
javax.imageio.stream.MemoryCache#getLength()->long:::Returns the total length of data that has been cached, regardless of whether any early blocks have been disposed
javax.imageio.stream.MemoryCache#read(long)->int:::Returns the single byte at the given position, as an int
javax.imageio.stream.MemoryCache#read(byte[], int, int, long)->void:::Copy len bytes from the cache, starting at cache position pos, into the array b at offset off.
javax.imageio.stream.MemoryCache#disposeBefore(long)->void:::Free the blocks up to the position pos
javax.imageio.stream.MemoryCache#reset()->void:::Erase the entire cache contents and reset the length to 0
javax.imageio.stream.MemoryCacheImageInputStream#read()->int::: memory cache image input stream read
javax.imageio.stream.MemoryCacheImageInputStream#read(byte[], int, int)->int::: memory cache image input stream read
javax.imageio.stream.MemoryCacheImageInputStream#flushBefore(long)->void::: memory cache image input stream flush before
javax.imageio.stream.MemoryCacheImageInputStream#isCached()->boolean:::Returns true since this ImageInputStream caches data in order to allow seeking backwards.
javax.imageio.stream.MemoryCacheImageInputStream#isCachedFile()->boolean:::Returns false since this ImageInputStream does not maintain a file cache.
javax.imageio.stream.MemoryCacheImageInputStream#isCachedMemory()->boolean:::Returns true since this ImageInputStream maintains a main memory cache.
javax.imageio.stream.MemoryCacheImageInputStream#close()->void:::Closes this MemoryCacheImageInputStream, freeing the cache
javax.imageio.stream.MemoryCacheImageInputStream#finalize()->void::: memory cache image input stream finalize
javax.imageio.stream.MemoryCacheImageOutputStream#read()->int::: memory cache image output stream read
javax.imageio.stream.MemoryCacheImageOutputStream#read(byte[], int, int)->int::: memory cache image output stream read
javax.imageio.stream.MemoryCacheImageOutputStream#write(int)->void::: memory cache image output stream write
javax.imageio.stream.MemoryCacheImageOutputStream#write(byte[], int, int)->void::: memory cache image output stream write
javax.imageio.stream.MemoryCacheImageOutputStream#length()->long::: memory cache image output stream length
javax.imageio.stream.MemoryCacheImageOutputStream#isCached()->boolean:::Returns true since this ImageOutputStream caches data in order to allow seeking backwards.
javax.imageio.stream.MemoryCacheImageOutputStream#isCachedFile()->boolean:::Returns false since this ImageOutputStream does not maintain a file cache.
javax.imageio.stream.MemoryCacheImageOutputStream#isCachedMemory()->boolean:::Returns true since this ImageOutputStream maintains a main memory cache.
javax.imageio.stream.MemoryCacheImageOutputStream#close()->void:::Closes this MemoryCacheImageOutputStream
javax.imageio.stream.MemoryCacheImageOutputStream#flushBefore(long)->void::: memory cache image output stream flush before

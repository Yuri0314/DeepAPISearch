jdk.nio.zipfs.JarFileSystem#getInode(byte[])->IndexNode::: jar file system get inode
jdk.nio.zipfs.JarFileSystemProvider#getScheme()->String::: jar file system provider get scheme
jdk.nio.zipfs.JarFileSystemProvider#uriToPath(URI)->Path::: jar file system provider uri to path
jdk.nio.zipfs.JarFileSystemProvider#getPath(URI)->Path::: jar file system provider get path
jdk.nio.zipfs.ZipCoder.UTF8#getBytes(String)->byte[]::: f8 get bytes
jdk.nio.zipfs.ZipCoder.UTF8#toString(byte[])->String::: f8 to string
jdk.nio.zipfs.ZipCoder#get(String)->ZipCoder::: zip coder get
jdk.nio.zipfs.ZipCoder#toString(byte[])->String::: zip coder to string
jdk.nio.zipfs.ZipCoder#getBytes(String)->byte[]::: zip coder get bytes
jdk.nio.zipfs.ZipCoder#isUTF8()->boolean::: zip coder is f8
jdk.nio.zipfs.ZipConstants#CH(byte[], int)->int::: zip constants  h
jdk.nio.zipfs.ZipConstants#SH(byte[], int)->int::: zip constants  h
jdk.nio.zipfs.ZipConstants#LG(byte[], int)->long::: zip constants  g
jdk.nio.zipfs.ZipConstants#LL(byte[], int)->long::: zip constants  l
jdk.nio.zipfs.ZipConstants#getSig(byte[], int)->long::: zip constants get sig
jdk.nio.zipfs.ZipConstants#cenSigAt(byte[], int)->boolean::: zip constants cen sig at
jdk.nio.zipfs.ZipConstants#locSigAt(byte[], int)->boolean::: zip constants loc sig at
jdk.nio.zipfs.ZipConstants#endSigAt(byte[], int)->boolean::: zip constants end sig at
jdk.nio.zipfs.ZipConstants#extSigAt(byte[], int)->boolean::: zip constants ext sig at
jdk.nio.zipfs.ZipConstants#end64SigAt(byte[], int)->boolean::: zip constants end64 sig at
jdk.nio.zipfs.ZipConstants#locator64SigAt(byte[], int)->boolean::: zip constants locator64 sig at
jdk.nio.zipfs.ZipConstants#LOCSIG(byte[])->long::: zip constants  g
jdk.nio.zipfs.ZipConstants#LOCVER(byte[])->int::: zip constants  r
jdk.nio.zipfs.ZipConstants#LOCFLG(byte[])->int::: zip constants  g
jdk.nio.zipfs.ZipConstants#LOCHOW(byte[])->int::: zip constants  w
jdk.nio.zipfs.ZipConstants#LOCTIM(byte[])->long::: zip constants  m
jdk.nio.zipfs.ZipConstants#LOCCRC(byte[])->long::: zip constants  c
jdk.nio.zipfs.ZipConstants#LOCSIZ(byte[])->long::: zip constants  z
jdk.nio.zipfs.ZipConstants#LOCLEN(byte[])->long::: zip constants  n
jdk.nio.zipfs.ZipConstants#LOCNAM(byte[])->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#LOCEXT(byte[])->int::: zip constants  t
jdk.nio.zipfs.ZipConstants#EXTCRC(byte[])->long::: zip constants  c
jdk.nio.zipfs.ZipConstants#EXTSIZ(byte[])->long::: zip constants  z
jdk.nio.zipfs.ZipConstants#EXTLEN(byte[])->long::: zip constants  n
jdk.nio.zipfs.ZipConstants#ENDSUB(byte[])->int::: zip constants  b
jdk.nio.zipfs.ZipConstants#ENDTOT(byte[])->int::: zip constants  t
jdk.nio.zipfs.ZipConstants#ENDSIZ(byte[])->long::: zip constants  z
jdk.nio.zipfs.ZipConstants#ENDOFF(byte[])->long::: zip constants  f
jdk.nio.zipfs.ZipConstants#ENDCOM(byte[])->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#ENDCOM(byte[], int)->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#ZIP64_ENDTOD(byte[])->long::: zip constants  p64_ d
jdk.nio.zipfs.ZipConstants#ZIP64_ENDTOT(byte[])->long::: zip constants  p64_ t
jdk.nio.zipfs.ZipConstants#ZIP64_ENDSIZ(byte[])->long::: zip constants  p64_ z
jdk.nio.zipfs.ZipConstants#ZIP64_ENDOFF(byte[])->long::: zip constants  p64_ f
jdk.nio.zipfs.ZipConstants#ZIP64_LOCOFF(byte[])->long::: zip constants  p64_ f
jdk.nio.zipfs.ZipConstants#CENSIG(byte[], int)->long::: zip constants  g
jdk.nio.zipfs.ZipConstants#CENVEM(byte[], int)->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#CENVER(byte[], int)->int::: zip constants  r
jdk.nio.zipfs.ZipConstants#CENFLG(byte[], int)->int::: zip constants  g
jdk.nio.zipfs.ZipConstants#CENHOW(byte[], int)->int::: zip constants  w
jdk.nio.zipfs.ZipConstants#CENTIM(byte[], int)->long::: zip constants  m
jdk.nio.zipfs.ZipConstants#CENCRC(byte[], int)->long::: zip constants  c
jdk.nio.zipfs.ZipConstants#CENSIZ(byte[], int)->long::: zip constants  z
jdk.nio.zipfs.ZipConstants#CENLEN(byte[], int)->long::: zip constants  n
jdk.nio.zipfs.ZipConstants#CENNAM(byte[], int)->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#CENEXT(byte[], int)->int::: zip constants  t
jdk.nio.zipfs.ZipConstants#CENCOM(byte[], int)->int::: zip constants  m
jdk.nio.zipfs.ZipConstants#CENDSK(byte[], int)->int::: zip constants  k
jdk.nio.zipfs.ZipConstants#CENATT(byte[], int)->int::: zip constants  t
jdk.nio.zipfs.ZipConstants#CENATX(byte[], int)->long::: zip constants  x
jdk.nio.zipfs.ZipConstants#CENOFF(byte[], int)->long::: zip constants  f
jdk.nio.zipfs.ZipDirectoryStream#iterator()->Iterator::: zip directory stream iterator
jdk.nio.zipfs.ZipDirectoryStream#close()->void::: zip directory stream close
jdk.nio.zipfs.ZipFileAttributes#compressedSize()->long::: zip file attributes compressed size
jdk.nio.zipfs.ZipFileAttributes#crc()->long::: zip file attributes crc
jdk.nio.zipfs.ZipFileAttributes#method()->int::: zip file attributes method
jdk.nio.zipfs.ZipFileAttributes#extra()->byte[]::: zip file attributes extra
jdk.nio.zipfs.ZipFileAttributes#comment()->byte[]::: zip file attributes comment
jdk.nio.zipfs.ZipFileAttributes#toString()->String::: zip file attributes to string
jdk.nio.zipfs.ZipFileAttributeView#get(ZipPath, Class)->V::: zip file attribute view get
jdk.nio.zipfs.ZipFileAttributeView#get(ZipPath, String)->ZipFileAttributeView::: zip file attribute view get
jdk.nio.zipfs.ZipFileAttributeView#name()->String::: zip file attribute view name
jdk.nio.zipfs.ZipFileAttributeView#readAttributes()->ZipFileAttributes::: zip file attribute view read attributes
jdk.nio.zipfs.ZipFileAttributeView#setTimes(FileTime, FileTime, FileTime)->void::: zip file attribute view set times
jdk.nio.zipfs.ZipFileAttributeView#setAttribute(String, Object)->void::: zip file attribute view set attribute
jdk.nio.zipfs.ZipFileAttributeView#readAttributes(String)->Map::: zip file attribute view read attributes
jdk.nio.zipfs.ZipFileAttributeView#attribute(AttrID, ZipFileAttributes)->Object::: zip file attribute view attribute
jdk.nio.zipfs.ZipFileStore#name()->String::: zip file store name
jdk.nio.zipfs.ZipFileStore#type()->String::: zip file store type
jdk.nio.zipfs.ZipFileStore#isReadOnly()->boolean::: zip file store is read only
jdk.nio.zipfs.ZipFileStore#supportsFileAttributeView(Class)->boolean::: zip file store supports file attribute view
jdk.nio.zipfs.ZipFileStore#supportsFileAttributeView(String)->boolean::: zip file store supports file attribute view
jdk.nio.zipfs.ZipFileStore#getFileStoreAttributeView(Class)->V::: zip file store get file store attribute view
jdk.nio.zipfs.ZipFileStore#getTotalSpace()->long::: zip file store get total space
jdk.nio.zipfs.ZipFileStore#getUsableSpace()->long::: zip file store get usable space
jdk.nio.zipfs.ZipFileStore#getUnallocatedSpace()->long::: zip file store get unallocated space
jdk.nio.zipfs.ZipFileStore#getAttribute(String)->Object::: zip file store get attribute
jdk.nio.zipfs.ZipFileSystem#provider()->FileSystemProvider::: zip file system provider
jdk.nio.zipfs.ZipFileSystem#getSeparator()->String::: zip file system get separator
jdk.nio.zipfs.ZipFileSystem#isOpen()->boolean::: zip file system is open
jdk.nio.zipfs.ZipFileSystem#isReadOnly()->boolean::: zip file system is read only
jdk.nio.zipfs.ZipFileSystem#setReadOnly()->void::: zip file system set read only
jdk.nio.zipfs.ZipFileSystem#getRootDirectories()->Iterable::: zip file system get root directories
jdk.nio.zipfs.ZipFileSystem#getRootDir()->ZipPath::: zip file system get root dir
jdk.nio.zipfs.ZipFileSystem#getPath(String, String...)->ZipPath::: zip file system get path
jdk.nio.zipfs.ZipFileSystem#getUserPrincipalLookupService()->UserPrincipalLookupService::: zip file system get user principal lookup service
jdk.nio.zipfs.ZipFileSystem#newWatchService()->WatchService::: zip file system new watch service
jdk.nio.zipfs.ZipFileSystem#getFileStore(ZipPath)->FileStore::: zip file system get file store
jdk.nio.zipfs.ZipFileSystem#getFileStores()->Iterable::: zip file system get file stores
jdk.nio.zipfs.ZipFileSystem#supportedFileAttributeViews()->Set::: zip file system supported file attribute views
jdk.nio.zipfs.ZipFileSystem#toString()->String::: zip file system to string
jdk.nio.zipfs.ZipFileSystem#getZipFile()->Path::: zip file system get zip file
jdk.nio.zipfs.ZipFileSystem#getPathMatcher(String)->PathMatcher::: zip file system get path matcher
jdk.nio.zipfs.ZipFileSystem#close()->void::: zip file system close
jdk.nio.zipfs.ZipFileSystem#getFileAttributes(byte[])->ZipFileAttributes::: zip file system get file attributes
jdk.nio.zipfs.ZipFileSystem#checkAccess(byte[])->void::: zip file system check access
jdk.nio.zipfs.ZipFileSystem#setTimes(byte[], FileTime, FileTime, FileTime)->void::: zip file system set times
jdk.nio.zipfs.ZipFileSystem#exists(byte[])->boolean::: zip file system exists
jdk.nio.zipfs.ZipFileSystem#isDirectory(byte[])->boolean::: zip file system is directory
jdk.nio.zipfs.ZipFileSystem#iteratorOf(byte[], DirectoryStream.Filter)->Iterator::: zip file system iterator of
jdk.nio.zipfs.ZipFileSystem#createDirectory(byte[], FileAttribute...)->void::: zip file system create directory
jdk.nio.zipfs.ZipFileSystem#copyFile(boolean, byte[], byte[], CopyOption...)->void::: zip file system copy file
jdk.nio.zipfs.ZipFileSystem#newOutputStream(byte[], OpenOption...)->OutputStream::: zip file system new output stream
jdk.nio.zipfs.ZipFileSystem#newInputStream(byte[])->InputStream::: zip file system new input stream
jdk.nio.zipfs.ZipFileSystem#newByteChannel(byte[], Set, FileAttribute...)->SeekableByteChannel::: zip file system new byte channel
jdk.nio.zipfs.ZipFileSystem#newFileChannel(byte[], Set, FileAttribute...)->FileChannel::: zip file system new file channel
jdk.nio.zipfs.ZipFileSystem#getBytes(String)->byte[]::: zip file system get bytes
jdk.nio.zipfs.ZipFileSystem#getString(byte[])->String::: zip file system get string
jdk.nio.zipfs.ZipFileSystem#finalize()->void::: zip file system finalize
jdk.nio.zipfs.ZipFileSystem#readFullyAt(byte[], int, long, long)->long::: zip file system read fully at
jdk.nio.zipfs.ZipFileSystem#getInode(byte[])->IndexNode::: zip file system get inode
jdk.nio.zipfs.ZipFileSystem#getEntry(byte[])->Entry::: zip file system get entry
jdk.nio.zipfs.ZipFileSystem#deleteFile(byte[], boolean)->void::: zip file system delete file
jdk.nio.zipfs.ZipFileSystem.EntryOutputStream#write(byte[], int, int)->void::: entry output stream write
jdk.nio.zipfs.ZipFileSystem.EntryOutputStream#close()->void::: entry output stream close
jdk.nio.zipfs.ZipFileSystem#zerror(String)->void::: zip file system zerror
jdk.nio.zipfs.ZipFileSystem.END#write(OutputStream, long, boolean)->void::: d write
jdk.nio.zipfs.ZipFileSystem.IndexNode#keyOf(byte[])->IndexNode::: index node key of
jdk.nio.zipfs.ZipFileSystem.IndexNode#name(byte[])->void::: index node name
jdk.nio.zipfs.ZipFileSystem.IndexNode#as(byte[])->IndexNode::: index node as
jdk.nio.zipfs.ZipFileSystem.IndexNode#isDir()->boolean::: index node is dir
jdk.nio.zipfs.ZipFileSystem.IndexNode#equals(Object)->boolean::: index node equals
jdk.nio.zipfs.ZipFileSystem.IndexNode#hashCode()->int::: index node hash code
jdk.nio.zipfs.ZipFileSystem.Entry#version()->int::: entry version
jdk.nio.zipfs.ZipFileSystem.Entry#readCEN(ZipFileSystem, IndexNode)->Entry::: entry read n
jdk.nio.zipfs.ZipFileSystem.Entry#writeCEN(OutputStream)->int::: entry write n
jdk.nio.zipfs.ZipFileSystem.Entry#writeLOC(OutputStream)->int::: entry write c
jdk.nio.zipfs.ZipFileSystem.Entry#writeEXT(OutputStream)->int::: entry write t
jdk.nio.zipfs.ZipFileSystem.Entry#readExtra(ZipFileSystem)->void::: entry read extra
jdk.nio.zipfs.ZipFileSystem.Entry#creationTime()->FileTime::: entry creation time
jdk.nio.zipfs.ZipFileSystem.Entry#isDirectory()->boolean::: entry is directory
jdk.nio.zipfs.ZipFileSystem.Entry#isOther()->boolean::: entry is other
jdk.nio.zipfs.ZipFileSystem.Entry#isRegularFile()->boolean::: entry is regular file
jdk.nio.zipfs.ZipFileSystem.Entry#lastAccessTime()->FileTime::: entry last access time
jdk.nio.zipfs.ZipFileSystem.Entry#lastModifiedTime()->FileTime::: entry last modified time
jdk.nio.zipfs.ZipFileSystem.Entry#size()->long::: entry size
jdk.nio.zipfs.ZipFileSystem.Entry#isSymbolicLink()->boolean::: entry is symbolic link
jdk.nio.zipfs.ZipFileSystem.Entry#fileKey()->Object::: entry file key
jdk.nio.zipfs.ZipFileSystem.Entry#compressedSize()->long::: entry compressed size
jdk.nio.zipfs.ZipFileSystem.Entry#crc()->long::: entry crc
jdk.nio.zipfs.ZipFileSystem.Entry#method()->int::: entry method
jdk.nio.zipfs.ZipFileSystem.Entry#extra()->byte[]::: entry extra
jdk.nio.zipfs.ZipFileSystem.Entry#comment()->byte[]::: entry comment
jdk.nio.zipfs.ZipFileSystem.Entry#toString()->String::: entry to string
jdk.nio.zipfs.ZipFileSystem.ParentLookup#as(byte[], int)->ParentLookup::: parent lookup as
jdk.nio.zipfs.ZipFileSystem.ParentLookup#name(byte[], int)->void::: parent lookup name
jdk.nio.zipfs.ZipFileSystem.ParentLookup#equals(Object)->boolean::: parent lookup equals
jdk.nio.zipfs.ZipFileSystemProvider#getScheme()->String::: zip file system provider get scheme
jdk.nio.zipfs.ZipFileSystemProvider#uriToPath(URI)->Path::: zip file system provider uri to path
jdk.nio.zipfs.ZipFileSystemProvider#newFileSystem(URI, Map)->FileSystem::: zip file system provider new file system
jdk.nio.zipfs.ZipFileSystemProvider#newFileSystem(Path, Map)->FileSystem::: zip file system provider new file system
jdk.nio.zipfs.ZipFileSystemProvider#getPath(URI)->Path::: zip file system provider get path
jdk.nio.zipfs.ZipFileSystemProvider#getFileSystem(URI)->FileSystem::: zip file system provider get file system
jdk.nio.zipfs.ZipFileSystemProvider#toZipPath(Path)->ZipPath::: zip file system provider to zip path
jdk.nio.zipfs.ZipFileSystemProvider#checkAccess(Path, AccessMode...)->void::: zip file system provider check access
jdk.nio.zipfs.ZipFileSystemProvider#copy(Path, Path, CopyOption...)->void::: zip file system provider copy
jdk.nio.zipfs.ZipFileSystemProvider#createDirectory(Path, FileAttribute...)->void::: zip file system provider create directory
jdk.nio.zipfs.ZipFileSystemProvider#delete(Path)->void::: zip file system provider delete
jdk.nio.zipfs.ZipFileSystemProvider#getFileAttributeView(Path, Class, LinkOption...)->V::: zip file system provider get file attribute view
jdk.nio.zipfs.ZipFileSystemProvider#getFileStore(Path)->FileStore::: zip file system provider get file store
jdk.nio.zipfs.ZipFileSystemProvider#isHidden(Path)->boolean::: zip file system provider is hidden
jdk.nio.zipfs.ZipFileSystemProvider#isSameFile(Path, Path)->boolean::: zip file system provider is same file
jdk.nio.zipfs.ZipFileSystemProvider#move(Path, Path, CopyOption...)->void::: zip file system provider move
jdk.nio.zipfs.ZipFileSystemProvider#newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute...)->AsynchronousFileChannel::: zip file system provider new asynchronous file channel
jdk.nio.zipfs.ZipFileSystemProvider#newByteChannel(Path, Set, FileAttribute...)->SeekableByteChannel::: zip file system provider new byte channel
jdk.nio.zipfs.ZipFileSystemProvider#newDirectoryStream(Path, Filter)->DirectoryStream::: zip file system provider new directory stream
jdk.nio.zipfs.ZipFileSystemProvider#newFileChannel(Path, Set, FileAttribute...)->FileChannel::: zip file system provider new file channel
jdk.nio.zipfs.ZipFileSystemProvider#newInputStream(Path, OpenOption...)->InputStream::: zip file system provider new input stream
jdk.nio.zipfs.ZipFileSystemProvider#newOutputStream(Path, OpenOption...)->OutputStream::: zip file system provider new output stream
jdk.nio.zipfs.ZipFileSystemProvider#readAttributes(Path, Class, LinkOption...)->A::: zip file system provider read attributes
jdk.nio.zipfs.ZipFileSystemProvider#readAttributes(Path, String, LinkOption...)->Map::: zip file system provider read attributes
jdk.nio.zipfs.ZipFileSystemProvider#readSymbolicLink(Path)->Path::: zip file system provider read symbolic link
jdk.nio.zipfs.ZipFileSystemProvider#setAttribute(Path, String, Object, LinkOption...)->void::: zip file system provider set attribute
jdk.nio.zipfs.ZipFileSystemProvider#removeFileSystem(Path, ZipFileSystem)->void::: zip file system provider remove file system
jdk.nio.zipfs.ZipInfo#main(String[])->void::: zip info main
jdk.nio.zipfs.ZipInfo#print(String, Object...)->void::: zip info print
jdk.nio.zipfs.ZipInfo#printLOC(byte[])->void::: zip info print c
jdk.nio.zipfs.ZipInfo#printCEN(byte[], int)->void::: zip info print n
jdk.nio.zipfs.ZipInfo#locoff(byte[], int)->long::: zip info locoff
jdk.nio.zipfs.ZipInfo#printExtra(byte[], int, int)->void::: zip info print extra
jdk.nio.zipfs.ZipPath#getRoot()->ZipPath::: zip path get root
jdk.nio.zipfs.ZipPath#getFileName()->Path::: zip path get file name
jdk.nio.zipfs.ZipPath#getParent()->ZipPath::: zip path get parent
jdk.nio.zipfs.ZipPath#getNameCount()->int::: zip path get name count
jdk.nio.zipfs.ZipPath#getName(int)->ZipPath::: zip path get name
jdk.nio.zipfs.ZipPath#subpath(int, int)->ZipPath::: zip path subpath
jdk.nio.zipfs.ZipPath#toRealPath(LinkOption...)->ZipPath::: zip path to real path
jdk.nio.zipfs.ZipPath#isHidden()->boolean::: zip path is hidden
jdk.nio.zipfs.ZipPath#toAbsolutePath()->ZipPath::: zip path to absolute path
jdk.nio.zipfs.ZipPath#toUri()->URI::: zip path to uri
jdk.nio.zipfs.ZipPath#relativize(Path)->Path::: zip path relativize
jdk.nio.zipfs.ZipPath#getFileSystem()->ZipFileSystem::: zip path get file system
jdk.nio.zipfs.ZipPath#isAbsolute()->boolean::: zip path is absolute
jdk.nio.zipfs.ZipPath#resolve(Path)->ZipPath::: zip path resolve
jdk.nio.zipfs.ZipPath#resolveSibling(Path)->Path::: zip path resolve sibling
jdk.nio.zipfs.ZipPath#startsWith(Path)->boolean::: zip path starts with
jdk.nio.zipfs.ZipPath#endsWith(Path)->boolean::: zip path ends with
jdk.nio.zipfs.ZipPath#resolve(String)->ZipPath::: zip path resolve
jdk.nio.zipfs.ZipPath#resolveSibling(String)->Path::: zip path resolve sibling
jdk.nio.zipfs.ZipPath#startsWith(String)->boolean::: zip path starts with
jdk.nio.zipfs.ZipPath#endsWith(String)->boolean::: zip path ends with
jdk.nio.zipfs.ZipPath#normalize()->Path::: zip path normalize
jdk.nio.zipfs.ZipPath#getResolvedPath()->byte[]::: zip path get resolved path
jdk.nio.zipfs.ZipPath#toString()->String::: zip path to string
jdk.nio.zipfs.ZipPath#hashCode()->int::: zip path hash code
jdk.nio.zipfs.ZipPath#equals(Object)->boolean::: zip path equals
jdk.nio.zipfs.ZipPath#compareTo(Path)->int::: zip path compare to
jdk.nio.zipfs.ZipPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey::: zip path register
jdk.nio.zipfs.ZipPath#register(WatchService, WatchEvent.Kind...)->WatchKey::: zip path register
jdk.nio.zipfs.ZipPath#toFile()->File::: zip path to file
jdk.nio.zipfs.ZipPath#iterator()->Iterator::: zip path iterator
jdk.nio.zipfs.ZipPath#createDirectory(FileAttribute...)->void::: zip path create directory
jdk.nio.zipfs.ZipPath#newInputStream(OpenOption...)->InputStream::: zip path new input stream
jdk.nio.zipfs.ZipPath#newDirectoryStream(Filter)->DirectoryStream::: zip path new directory stream
jdk.nio.zipfs.ZipPath#delete()->void::: zip path delete
jdk.nio.zipfs.ZipPath#deleteIfExists()->void::: zip path delete if exists
jdk.nio.zipfs.ZipPath#getAttributes()->ZipFileAttributes::: zip path get attributes
jdk.nio.zipfs.ZipPath#setAttribute(String, Object, LinkOption...)->void::: zip path set attribute
jdk.nio.zipfs.ZipPath#setTimes(FileTime, FileTime, FileTime)->void::: zip path set times
jdk.nio.zipfs.ZipPath#readAttributes(String, LinkOption...)->Map::: zip path read attributes
jdk.nio.zipfs.ZipPath#getFileStore()->FileStore::: zip path get file store
jdk.nio.zipfs.ZipPath#isSameFile(Path)->boolean::: zip path is same file
jdk.nio.zipfs.ZipPath#newByteChannel(Set, FileAttribute...)->SeekableByteChannel::: zip path new byte channel
jdk.nio.zipfs.ZipPath#newFileChannel(Set, FileAttribute...)->FileChannel::: zip path new file channel
jdk.nio.zipfs.ZipPath#checkAccess(AccessMode...)->void::: zip path check access
jdk.nio.zipfs.ZipPath#exists()->boolean::: zip path exists
jdk.nio.zipfs.ZipPath#newOutputStream(OpenOption...)->OutputStream::: zip path new output stream
jdk.nio.zipfs.ZipPath#move(ZipPath, CopyOption...)->void::: zip path move
jdk.nio.zipfs.ZipPath#copy(ZipPath, CopyOption...)->void::: zip path copy
jdk.nio.zipfs.ZipPath#decodeUri(String)->String::: zip path decode uri
jdk.nio.zipfs.ZipUtils#writeShort(OutputStream, int)->void::: zip utils write short
jdk.nio.zipfs.ZipUtils#writeInt(OutputStream, long)->void::: zip utils write int
jdk.nio.zipfs.ZipUtils#writeLong(OutputStream, long)->void::: zip utils write long
jdk.nio.zipfs.ZipUtils#writeBytes(OutputStream, byte[])->void::: zip utils write bytes
jdk.nio.zipfs.ZipUtils#writeBytes(OutputStream, byte[], int, int)->void::: zip utils write bytes
jdk.nio.zipfs.ZipUtils#toDirectoryPath(byte[])->byte[]::: zip utils to directory path
jdk.nio.zipfs.ZipUtils#dosToJavaTime(long)->long::: zip utils dos to java time
jdk.nio.zipfs.ZipUtils#javaToDosTime(long)->long::: zip utils java to dos time
jdk.nio.zipfs.ZipUtils#winToJavaTime(long)->long::: zip utils win to java time
jdk.nio.zipfs.ZipUtils#javaToWinTime(long)->long::: zip utils java to win time
jdk.nio.zipfs.ZipUtils#unixToJavaTime(long)->long::: zip utils unix to java time
jdk.nio.zipfs.ZipUtils#javaToUnixTime(long)->long::: zip utils java to unix time
jdk.nio.zipfs.ZipUtils#toRegexPattern(String)->String::: zip utils to regex pattern

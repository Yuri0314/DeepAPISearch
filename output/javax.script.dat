AbstractScriptEngine#setContext(ScriptContext):::Sets the value of the protected context field to the specified ScriptContext.:::if->throw->new->NullPointerException
AbstractScriptEngine#getContext():::Returns the value of the protected context field.:::return
AbstractScriptEngine#getBindings(int):::Returns the Bindings with the specified scope value in the protected context field.:::if->return->context->getBindings->else->if->return->context->getBindings->else->throw->new->IllegalArgumentException
AbstractScriptEngine#setBindings(Bindings, int):::Sets the Bindings with the corresponding scope value in the context field.:::if->context->setBindings->else->if->context->setBindings->else->throw->new->IllegalArgumentException
AbstractScriptEngine#put(String, Object):::Sets the specified value with the specified key in the ENGINE_SCOPE Bindings of the protected context field.:::nn->getBindings->if->nn->put
AbstractScriptEngine#get(String):::Gets the value for the specified key in the ENGINE_SCOPE of the protected context field.:::nn->getBindings->if->return->nn->get->return
AbstractScriptEngine#eval(Reader, Bindings):::eval(Reader, Bindings) calls the abstract eval(Reader, ScriptContext) method, passing it a ScriptContext whose Reader, Writers and Bindings for scopes other that ENGINE_SCOPE are identical to those members of the protected context field:::ctxt->getScriptContext->return->eval
AbstractScriptEngine#eval(String, Bindings):::Same as eval(Reader, Bindings) except that the abstract eval(String, ScriptContext) is used.:::ctxt->getScriptContext->return->eval
AbstractScriptEngine#eval(Reader):::eval(Reader) calls the abstract eval(Reader, ScriptContext) passing the value of the context field.:::return->eval
AbstractScriptEngine#eval(String):::Same as eval(Reader) except that the abstract eval(String, ScriptContext) is used.:::return->eval
AbstractScriptEngine#getScriptContext(Bindings):::Returns a SimpleScriptContext:::ctxt->context->getReader->context->getWriter->context->getErrorWriter->new->SimpleScriptContext->gs->getBindings->if->ctxt->setBindings->if->ctxt->setBindings->else->throw->new->NullPointerException->return
Bindings#put(String, Object):::Set a named value.:::
Bindings#putAll(Map):::Adds all the mappings in a given Map to this Bindings.:::
Bindings#containsKey(Object):::Returns true if this map contains a mapping for the specified key:::
Bindings#get(Object):::Returns the value to which this map maps the specified key:::
Bindings#remove(Object):::Removes the mapping for this key from this map if it is present (optional operation):::
Compilable#compile(Reader):::Compiles the script (source read from Reader) for later execution:::
CompiledScript#eval(Bindings):::Executes the program stored in the CompiledScript object using the supplied Bindings of attributes as the ENGINE_SCOPE of the associated ScriptEngine during script execution:::ctxt->getEngine->getContext->if->tempctxt->ctxt->getReader->ctxt->getWriter->ctxt->getErrorWriter->new->SimpleScriptContext->tempctxt->setBindings->tempctxt->ctxt->getBindings->setBindings->return->eval
CompiledScript#eval():::Executes the program stored in the CompiledScript object:::return->getEngine->getContext->eval
CompiledScript#getEngine():::Returns the ScriptEngine whose compile method created this CompiledScript:::
Invocable#invokeMethod(Object, String, Object...):::Calls a method on a script object compiled during a previous script execution, which is retained in the state of the ScriptEngine.:::
Invocable#invokeFunction(String, Object...):::Used to call top-level procedures and functions defined in scripts.:::
Invocable#getInterface(Class):::Returns an implementation of an interface using functions compiled in the interpreter:::
Invocable#getInterface(Object, Class):::Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter:::
ScriptContext#setBindings(Bindings, int):::Associates a Bindings instance with a particular scope in this ScriptContext:::
ScriptContext#getBindings(int):::Gets the Bindings  associated with the given scope in this ScriptContext.:::
ScriptContext#setAttribute(String, Object, int):::Sets the value of an attribute in a given scope:::
ScriptContext#getAttribute(String, int):::Gets the value of an attribute in a given scope.:::
ScriptContext#removeAttribute(String, int):::Remove an attribute in a given scope.:::
ScriptContext#getAttribute(String):::Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order:::
ScriptContext#getAttributesScope(String):::Get the lowest scope in which an attribute is defined.:::
ScriptContext#getWriter():::Returns the Writer for scripts to use when displaying output.:::
ScriptContext#getErrorWriter():::Returns the Writer used to display error output.:::
ScriptContext#setWriter(Writer):::Sets the Writer for scripts to use when displaying output.:::
ScriptContext#setErrorWriter(Writer):::Sets the Writer used to display error output.:::
ScriptContext#getReader():::Returns a Reader to be used by the script to read input.:::
ScriptContext#setReader(Reader):::Sets the Reader for scripts to read input .:::
ScriptContext#getScopes():::Returns immutable List of all the valid values for scope in the ScriptContext.:::
ScriptEngine#eval(String, ScriptContext):::Causes the immediate execution of the script whose source is the String passed as the first argument:::
ScriptEngine#eval(Reader, ScriptContext):::Same as eval(String, ScriptContext) where the source of the script is read from a Reader.:::
ScriptEngine#eval(String):::Executes the specified script:::
ScriptEngine#eval(Reader):::Same as eval(String) except that the source of the script is provided as a Reader:::
ScriptEngine#eval(String, Bindings):::Executes the script using the Bindings argument as the ENGINE_SCOPE Bindings of the ScriptEngine during the script execution:::
ScriptEngine#eval(Reader, Bindings):::Same as eval(String, Bindings) except that the source of the script is provided as a Reader.:::
ScriptEngine#put(String, Object):::Sets a key/value pair in the state of the ScriptEngine that may either create a Java Language Binding to be used in the execution of scripts or be used in some other way, depending on whether the key is reserved:::
ScriptEngine#get(String):::Retrieves a value set in the state of this engine:::
ScriptEngine#getBindings(int):::Returns a scope of named values:::
ScriptEngine#setBindings(Bindings, int):::Sets a scope of named values to be used by scripts:::
ScriptEngine#createBindings():::Returns an uninitialized Bindings.:::
ScriptEngine#getContext():::Returns the default ScriptContext of the ScriptEngine whose Bindings, Reader and Writers are used for script executions when no ScriptContext is specified.:::
ScriptEngine#setContext(ScriptContext):::Sets the default ScriptContext of the ScriptEngine whose Bindings, Reader and Writers are used for script executions when no ScriptContext is specified.:::
ScriptEngine#getFactory():::Returns a ScriptEngineFactory for the class to which this ScriptEngine belongs.:::
ScriptEngineFactory#getEngineName():::Returns the full  name of the ScriptEngine:::
ScriptEngineFactory#getEngineVersion():::Returns the version of the ScriptEngine.:::
ScriptEngineFactory#getExtensions():::Returns an immutable list of filename extensions, which generally identify scripts written in the language supported by this ScriptEngine:::
ScriptEngineFactory#getMimeTypes():::Returns an immutable list of mimetypes, associated with scripts that can be executed by the engine:::
ScriptEngineFactory#getNames():::Returns an immutable list of  short names for the ScriptEngine, which may be used to identify the ScriptEngine by the ScriptEngineManager:::
ScriptEngineFactory#getLanguageName():::Returns the name of the scripting language supported by this ScriptEngine.:::
ScriptEngineFactory#getLanguageVersion():::Returns the version of the scripting language supported by this ScriptEngine.:::
ScriptEngineFactory#getParameter(String):::Returns the value of an attribute whose meaning may be implementation-specific:::
ScriptEngineFactory#getMethodCallSyntax(String, String, String...):::Returns a String which can be used to invoke a method of a  Java object using the syntax of the supported scripting language:::
ScriptEngineFactory#getOutputStatement(String):::Returns a String that can be used as a statement to display the specified String  using the syntax of the supported scripting language:::
ScriptEngineFactory#getProgram(String...):::Returns a valid scripting language executable program with given statements:::
ScriptEngineFactory#getScriptEngine():::Returns an instance of the ScriptEngine associated with this ScriptEngineFactory:::
ScriptEngineManager#setBindings(Bindings):::setBindings stores the specified Bindings in the globalScope field:::if->throw->new->IllegalArgumentException
ScriptEngineManager#getBindings():::getBindings returns the value of the globalScope field:::return
ScriptEngineManager#put(String, Object):::Sets the specified key/value pair in the Global Scope.:::globalScope->put
ScriptEngineManager#get(String):::Gets the value for the specified key in the Global Scope:::return->globalScope->get
ScriptEngineManager#getEngineByName(String):::Looks up and creates a ScriptEngine for a given  name:::if->throw->new->NullPointerException->obj->if->nameAssociations->get->spi->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->foreach->names->try->spi->getNames->catch->if->exp->printStackTrace->finally->if->foreach->if->shortName->equals->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->return
ScriptEngineManager#getEngineByExtension(String):::Look up and create a ScriptEngine for a given extension:::if->throw->new->NullPointerException->obj->if->extensionAssociations->get->spi->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->foreach->exts->try->spi->getExtensions->catch->if->exp->printStackTrace->finally->if->continue->foreach->if->extension->equals->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->return
ScriptEngineManager#getEngineByMimeType(String):::Look up and create a ScriptEngine for a given mime type:::if->throw->new->NullPointerException->obj->if->mimeTypeAssociations->get->spi->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->foreach->types->try->spi->getMimeTypes->catch->if->exp->printStackTrace->finally->if->continue->foreach->if->mimeType->equals->try->engine->spi->getScriptEngine->engine->getBindings->setBindings->return->catch->if->exp->printStackTrace->finally->return
ScriptEngineManager#getEngineFactories():::Returns a list whose elements are instances of all the ScriptEngineFactory classes found by the discovery mechanism.:::res->engineSpis->size->new->ArrayList<ScriptEngineFactory>->foreach->res->add->return->Collections->unmodifiableList
ScriptEngineManager#registerEngineName(String, ScriptEngineFactory):::Registers a ScriptEngineFactory to handle a language name:::if->throw->new->NullPointerException->nameAssociations->put
ScriptEngineManager#registerEngineMimeType(String, ScriptEngineFactory):::Registers a ScriptEngineFactory to handle a mime type:::if->throw->new->NullPointerException->mimeTypeAssociations->put
ScriptEngineManager#registerEngineExtension(String, ScriptEngineFactory):::Registers a ScriptEngineFactory to handle an extension:::if->throw->new->NullPointerException->extensionAssociations->put
ScriptException#getMessage():::Returns a message containing the String passed to a constructor as well as line and column numbers and filename if any of these are known.:::ret->super->getMessage->if->if->if->return
ScriptException#getLineNumber():::Get the line number on which an error occurred.:::return
ScriptException#getColumnNumber():::Get the column number on which an error occurred.:::return
ScriptException#getFileName():::Get the source of the script causing the error.:::return
SimpleBindings#put(String, Object):::Sets the specified key/value in the underlying map field.:::checkKey->return->map->put
SimpleBindings#putAll(Map):::putAll is implemented using Map.putAll.:::if->throw->new->NullPointerException->foreach->toMerge->entrySet->key->entry->getKey->checkKey->entry->getValue->put
SimpleBindings#containsKey(Object):::Returns true if this map contains a mapping for the specified key:::checkKey->return->map->containsKey
SimpleBindings#get(Object):::Returns the value to which this map maps the specified key:::checkKey->return->map->get
SimpleBindings#remove(Object):::Removes the mapping for this key from this map if it is present (optional operation):::checkKey->return->map->remove
SimpleScriptContext#setBindings(Bindings, int):::Sets a Bindings of attributes for the given scope:::switch->if->throw->new->NullPointerException->break->break->throw->new->IllegalArgumentException
SimpleScriptContext#getAttribute(String):::Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order:::checkName->if->engineScope->containsKey->return->getAttribute->else->if->globalScope->containsKey->return->getAttribute->return
SimpleScriptContext#getAttribute(String, int):::Gets the value of an attribute in a given scope.:::checkName->switch->return->engineScope->get->if->return->globalScope->get->return->throw->new->IllegalArgumentException
SimpleScriptContext#removeAttribute(String, int):::Remove an attribute in a given scope.:::checkName->switch->if->getBindings->return->getBindings->remove->return->if->getBindings->return->getBindings->remove->return->throw->new->IllegalArgumentException
SimpleScriptContext#setAttribute(String, Object, int):::Sets the value of an attribute in a given scope:::checkName->switch->engineScope->put->return->if->globalScope->put->return->throw->new->IllegalArgumentException
SimpleScriptContext#getAttributesScope(String):::Get the lowest scope in which an attribute is defined.:::checkName->if->engineScope->containsKey->return->else->if->globalScope->containsKey->return->else->return
SimpleScriptContext#getBindings(int):::Returns the value of the engineScope field if specified scope is ENGINE_SCOPE:::if->return->else->if->return->else->throw->new->IllegalArgumentException

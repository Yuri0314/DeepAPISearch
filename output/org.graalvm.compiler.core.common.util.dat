CompilationAlarm#current():::Gets the current compilation alarm:::alarm->currentAlarm->get->return
CompilationAlarm#hasExpired():::Determines if this alarm has expired:::return->System->currentTimeMillis
CompilationAlarm#trackCompilationPeriod(OptionValues):::Starts an alarm for setting a time limit on a compilation if there isn't already an active alarm, if assertions are disabled and CompilationAlarm.Options#CompilationExpirationPeriod> 0:::period->Assertions->assertionsEnabled->getValue->if->current->currentAlarm->get->if->expiration->System->currentTimeMillis->new->CompilationAlarm->currentAlarm->set->return->return
FrequencyEncoder#createIdentityEncoder():::Creates an encoder that uses object identity.:::return->EconomicMap->create->new->FrequencyEncoder<>
FrequencyEncoder#createEqualityEncoder():::Creates an encoder that uses Object#equals(Object) object equality.:::return->EconomicMap->create->new->FrequencyEncoder<>
FrequencyEncoder#addObject(T):::Adds an object to the array.:::if->return->entry->map->get->if->new->Entry<>->map->put
FrequencyEncoder#getIndex(T):::Returns the index of an object in the array:::if->return->entry->map->get->return
FrequencyEncoder#getLength():::Returns the number of distinct objects that have been added, i.e., the length of the array.:::return->map->size
FrequencyEncoder#encodeAll(T[]):::Fills the provided array with the added objects:::sortedEntries->new->ArrayList<>->foreach->map->getValues->sortedEntries->add->sortedEntries->Integer->compare->sort->offset->if->for->i->sortedEntries->size->return
IntList#copy(IntList, int, int):::Makes a new int list by copying a range from a given int list.:::return->copy
IntList#copy(IntList, int, int, int):::Makes a new int list by copying a range from a given int list.:::if->return->new->IntList->else->array->new->intArr->System->arraycopy->return->new->IntList
IntList#add(int):::Appends a value to the end of this list, increasing its #size() size by 1.:::if->newSize->Arrays->copyOf
IntList#get(int):::Gets the value in this list at a given index.:::if->throw->new->IndexOutOfBoundsException->return
IntList#clear():::Sets the size of this list to 0.:::
IntList#set(int, int):::Sets a value at a given index in this list.:::if->throw->new->IndexOutOfBoundsException
IntList#setSize(int):::Adjusts the #size() size of this int list:::if->else->if->Arrays->copyOf
ReversedList#reversed(List):::Creates a list that is a view on list in reverse order.:::return->new->ReversedList<>
TypeReader#getByteIndex():::Returns the next byte index to be read.:::
TypeReader#setByteIndex(long):::Sets the next byte index to be read.:::
TypeReader#getS1():::Reads a signed 1 byte value.:::
TypeReader#getU1():::Reads an unsigned 1 byte value.:::
TypeReader#getS2():::Reads a signed 2 byte value.:::
TypeReader#getU2():::Reads an unsigned 2 byte value.:::
TypeReader#getS4():::Reads a signed 4 byte value.:::
TypeReader#getU4():::Reads an unsigned 4 byte value.:::
TypeReader#getS8():::Reads a signed 4 byte value.:::
TypeReader#getSV():::Reads a signed value that has been written using TypeWriter#putSV variable byte size encoding.:::
TypeReader#getSVInt():::Reads a signed variable byte size encoded value that is known to fit into the range of int.:::return->TypeConversion->getSV->asS4
TypeReader#getUV():::Reads an unsigned value that has been written using TypeWriter#putSV variable byte size encoding.:::
TypeReader#getUVInt():::Reads an unsigned variable byte size encoded value that is known to fit into the range of int.:::return->TypeConversion->getUV->asS4
TypeWriter#getBytesWritten():::Returns the number of bytes that have been written, i.e., the byte index of the next byte to be written.:::
TypeWriter#putS1(long):::Writes a signed 1 byte value.:::
TypeWriter#putU1(long):::Writes an unsigned 1 byte value.:::
TypeWriter#putS2(long):::Writes a signed 2 byte value.:::
TypeWriter#putU2(long):::Writes an unsigned 2 byte value.:::
TypeWriter#putS4(long):::Writes a signed 4 byte value.:::
TypeWriter#patchS4(long, long):::Patches a previously written signed 4 byte value at a given offset.:::
TypeWriter#putU4(long):::Writes an unsigned 4 byte value.:::
TypeWriter#putS8(long):::Writes a signed 8 byte value.:::
TypeWriter#putSV(long):::Writes a signed value in a variable byte size encoding.:::
TypeWriter#putUV(long):::Writes an unsigned value in a variable byte size encoding.:::
UnsafeArrayTypeWriter#toArray(byte[]):::Copies the buffer into the provided byte[] array of length #getBytesWritten().:::resultIdx->for->cur->return
UnsafeArrayTypeWriter#toByteBuffer(ByteBuffer):::Copies the buffer into the provided ByteBuffer at its current position.:::initialPos->buffer->position->for->cur->return
Util#uncheckedCast(Class, Object):::Statically cast an object to an arbitrary Object type:::return
Util#uncheckedCast(Object):::Statically cast an object to an arbitrary Object type:::return
Util#atPutGrow(List, int, T, T):::Sets the element at a given position of a list and ensures that this position exists:::if->list->size->while->list->size->list->add->list->set
Util#indent(String, String):::Prepends the String indentation to every line in String lines, including a possibly non-empty line following the final newline.:::if->lines->length->return->newLine->if->lines->endsWith->return->lines->lines->length->substring->replace->return->lines->replace
Util#zero(JavaKind):::Returns the zero value for a given numeric kind.:::switch->return->return->JavaConstant->forByte->return->JavaConstant->forChar->return->return->return->return->return->JavaConstant->forShort->throw->kind->toString->new->IllegalArgumentException
Util#one(JavaKind):::Returns the one value for a given numeric kind.:::switch->return->return->JavaConstant->forByte->return->JavaConstant->forChar->return->return->return->return->return->JavaConstant->forShort->throw->kind->toString->new->IllegalArgumentException
Util#printInlining(ResolvedJavaMethod, int, int, boolean, String, Object...):::Print a HotSpot-style inlining message to the console.:::sb->new->StringBuilder->sb->append->sb->append->sb->String->method->isSynchronized->method->isNative->format->append->sb->append->sb->append->for->i->sb->String->methodName->String->format->format->append->TTY->sb->toString->println
Util#setAccessible(Field, boolean):::Calls AccessibleObject#setAccessible(boolean) on field with the value flag.:::field->setAccessible
Util#setAccessible(Executable, boolean):::Calls AccessibleObject#setAccessible(boolean) on executable with the value flag.:::executable->setAccessible

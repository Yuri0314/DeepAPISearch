CompilationAlarm_OptionDescriptors#get(String)::: compilation alarm_ option descriptors get:::switch->return->OptionDescriptor->create->return
CompilationAlarm_OptionDescriptors#iterator()::: compilation alarm_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
AbstractTypeReader#getSV()::: abstract type reader get v:::return->read->decodeSign
AbstractTypeReader#getUV()::: abstract type reader get v:::return->read
AbstractTypeReader#decodeSign(long)::: abstract type reader decode sign:::return
AbstractTypeReader#read()::: abstract type reader read:::b0->getU1->if->return->else->return->readPacked
AbstractTypeReader#readPacked(int)::: abstract type reader read packed:::sum->shift->for->i
BitMap2D#bitIndex(int, int)::: bit map2 d bit index:::return
BitMap2D#verifyBitWithinSlotIndex(int)::: bit map2 d verify bit within slot index:::return
BitMap2D#sizeInBits()::: bit map2 d size in bits:::return->map->size
BitMap2D#sizeInSlots()::: bit map2 d size in slots:::return->map->size
BitMap2D#isValidIndex(int, int)::: bit map2 d is valid index:::return->bitIndex->sizeInBits
BitMap2D#at(int, int)::: bit map2 d at:::return->map->bitIndex->get
BitMap2D#setBit(int, int)::: bit map2 d set bit:::map->bitIndex->set
BitMap2D#clearBit(int, int)::: bit map2 d clear bit:::map->bitIndex->clear
BitMap2D#atPutGrow(int, int, boolean)::: bit map2 d at put grow:::size->sizeInSlots->if->while->newBitMap->new->BitSet->newBitMap->or->if->setBit->else->clearBit
BitMap2D#clear()::: bit map2 d clear:::map->clear
CompilationAlarm#current():::Gets the current compilation alarm:::alarm->currentAlarm->get->return
CompilationAlarm#hasExpired():::Determines if this alarm has expired:::return->System->currentTimeMillis
CompilationAlarm#close()::: compilation alarm close:::if->currentAlarm->set
CompilationAlarm#trackCompilationPeriod(OptionValues):::Starts an alarm for setting a time limit on a compilation if there isn't already an active alarm, if assertions are disabled and CompilationAlarm.Options#CompilationExpirationPeriod> 0:::period->Assertions->assertionsEnabled->getValue->if->current->currentAlarm->get->if->expiration->System->currentTimeMillis->new->CompilationAlarm->currentAlarm->set->return->return
FrequencyEncoder#createIdentityEncoder():::Creates an encoder that uses object identity.:::return->EconomicMap->create->new->FrequencyEncoder<>
FrequencyEncoder#createEqualityEncoder():::Creates an encoder that uses Object#equals(Object) object equality.:::return->EconomicMap->create->new->FrequencyEncoder<>
FrequencyEncoder#addObject(T):::Adds an object to the array.:::if->return->entry->map->get->if->new->Entry<>->map->put
FrequencyEncoder#getIndex(T):::Returns the index of an object in the array:::if->return->entry->map->get->return
FrequencyEncoder#getLength():::Returns the number of distinct objects that have been added, i.e., the length of the array.:::return->map->size
FrequencyEncoder#encodeAll(T[]):::Fills the provided array with the added objects:::sortedEntries->new->ArrayList<>->foreach->map->getValues->sortedEntries->add->sortedEntries->Integer->compare->sort->offset->if->for->i->sortedEntries->size->return
IntList#copy(IntList, int, int):::Makes a new int list by copying a range from a given int list.:::return->copy
IntList#copy(IntList, int, int, int):::Makes a new int list by copying a range from a given int list.:::if->return->new->IntList->else->array->new->intArr->System->arraycopy->return->new->IntList
IntList#size()::: int list size:::return
IntList#add(int):::Appends a value to the end of this list, increasing its #size() size by 1.:::if->newSize->Arrays->copyOf
IntList#get(int):::Gets the value in this list at a given index.:::if->throw->new->IndexOutOfBoundsException->return
IntList#clear():::Sets the size of this list to 0.:::
IntList#set(int, int):::Sets a value at a given index in this list.:::if->throw->new->IndexOutOfBoundsException
IntList#setSize(int):::Adjusts the #size() size of this int list:::if->else->if->Arrays->copyOf
IntList#toString()::: int list to string:::if->return->Arrays->toString->return->Arrays->Arrays->copyOf->toString
ReversedList#get(int)::: reversed list get:::return->original->original->size->get
ReversedList#size()::: reversed list size:::return->original->size
ReversedList#reversed(List):::Creates a list that is a view on list in reverse order.:::return->new->ReversedList<>
TypeConversion#isS1(long)::: type conversion is s1:::return
TypeConversion#isU1(long)::: type conversion is u1:::return
TypeConversion#isS2(long)::: type conversion is s2:::return
TypeConversion#isU2(long)::: type conversion is u2:::return
TypeConversion#isS4(long)::: type conversion is s4:::return
TypeConversion#isU4(long)::: type conversion is u4:::return
TypeConversion#asS1(long)::: type conversion as s1:::return
TypeConversion#asU1(long)::: type conversion as u1:::return
TypeConversion#asS2(long)::: type conversion as s2:::return
TypeConversion#asU2(long)::: type conversion as u2:::return
TypeConversion#asS4(long)::: type conversion as s4:::return
TypeConversion#asU4(long)::: type conversion as u4:::return
TypeReader#getByteIndex():::Returns the next byte index to be read.:::
TypeReader#setByteIndex(long):::Sets the next byte index to be read.:::
TypeReader#getS1():::Reads a signed 1 byte value.:::
TypeReader#getU1():::Reads an unsigned 1 byte value.:::
TypeReader#getS2():::Reads a signed 2 byte value.:::
TypeReader#getU2():::Reads an unsigned 2 byte value.:::
TypeReader#getS4():::Reads a signed 4 byte value.:::
TypeReader#getU4():::Reads an unsigned 4 byte value.:::
TypeReader#getS8():::Reads a signed 4 byte value.:::
TypeReader#getSV():::Reads a signed value that has been written using TypeWriter#putSV variable byte size encoding.:::
TypeReader#getSVInt():::Reads a signed variable byte size encoded value that is known to fit into the range of int.:::return->TypeConversion->getSV->asS4
TypeReader#getUV():::Reads an unsigned value that has been written using TypeWriter#putSV variable byte size encoding.:::
TypeReader#getUVInt():::Reads an unsigned variable byte size encoded value that is known to fit into the range of int.:::return->TypeConversion->getUV->asS4
TypeWriter#getBytesWritten():::Returns the number of bytes that have been written, i.e., the byte index of the next byte to be written.:::
TypeWriter#putS1(long):::Writes a signed 1 byte value.:::
TypeWriter#putU1(long):::Writes an unsigned 1 byte value.:::
TypeWriter#putS2(long):::Writes a signed 2 byte value.:::
TypeWriter#putU2(long):::Writes an unsigned 2 byte value.:::
TypeWriter#putS4(long):::Writes a signed 4 byte value.:::
TypeWriter#patchS4(long, long):::Patches a previously written signed 4 byte value at a given offset.:::
TypeWriter#putU4(long):::Writes an unsigned 4 byte value.:::
TypeWriter#putS8(long):::Writes a signed 8 byte value.:::
TypeWriter#putSV(long):::Writes a signed value in a variable byte size encoding.:::
TypeWriter#putUV(long):::Writes an unsigned value in a variable byte size encoding.:::
UnsafeArrayTypeReader#getS1(byte[], long)::: unsafe array type reader get s1:::return->UNSAFE->readOffset->getByte
UnsafeArrayTypeReader#getU1(byte[], long)::: unsafe array type reader get u1:::return->UNSAFE->readOffset->getByte
UnsafeArrayTypeReader#getS2(byte[], long, boolean)::: unsafe array type reader get s2:::if->return->UnalignedUnsafeArrayTypeReader->getS2->else->return->AlignedUnsafeArrayTypeReader->getS2
UnsafeArrayTypeReader#getU2(byte[], long, boolean)::: unsafe array type reader get u2:::return->getS2
UnsafeArrayTypeReader#getS4(byte[], long, boolean)::: unsafe array type reader get s4:::if->return->UnalignedUnsafeArrayTypeReader->getS4->else->return->AlignedUnsafeArrayTypeReader->getS4
UnsafeArrayTypeReader#getU4(byte[], long, boolean)::: unsafe array type reader get u4:::return->getS4
UnsafeArrayTypeReader#getS8(byte[], long, boolean)::: unsafe array type reader get s8:::if->return->UnalignedUnsafeArrayTypeReader->getS8->else->return->AlignedUnsafeArrayTypeReader->getS8
UnsafeArrayTypeReader#readOffset(byte[], long, int)::: unsafe array type reader read offset:::return
UnsafeArrayTypeReader#create(byte[], long, boolean)::: unsafe array type reader create:::if->return->new->UnalignedUnsafeArrayTypeReader->else->return->new->AlignedUnsafeArrayTypeReader
UnsafeArrayTypeReader#getByteIndex()::: unsafe array type reader get byte index:::return
UnsafeArrayTypeReader#setByteIndex(long)::: unsafe array type reader set byte index:::
UnsafeArrayTypeReader#getS1()::: unsafe array type reader get s1:::result->getS1->return
UnsafeArrayTypeReader#getU1()::: unsafe array type reader get u1:::result->getU1->return
UnsafeArrayTypeReader#getU2()::: unsafe array type reader get u2:::return->getS2
UnsafeArrayTypeReader#getU4()::: unsafe array type reader get u4:::return->getS4
UnalignedUnsafeArrayTypeReader#getS2(byte[], long)::: unaligned unsafe array type reader get s2:::return->UNSAFE->readOffset->getShort
UnalignedUnsafeArrayTypeReader#getS4(byte[], long)::: unaligned unsafe array type reader get s4:::return->UNSAFE->readOffset->getInt
UnalignedUnsafeArrayTypeReader#getS8(byte[], long)::: unaligned unsafe array type reader get s8:::return->UNSAFE->readOffset->getLong
UnalignedUnsafeArrayTypeReader#getS2()::: unaligned unsafe array type reader get s2:::result->getS2->return
UnalignedUnsafeArrayTypeReader#getS4()::: unaligned unsafe array type reader get s4:::result->getS4->return
UnalignedUnsafeArrayTypeReader#getS8()::: unaligned unsafe array type reader get s8:::result->getS8->return
AlignedUnsafeArrayTypeReader#getS2(byte[], long)::: aligned unsafe array type reader get s2:::offset->readOffset->return->UNSAFE->getByte->UNSAFE->getByte
AlignedUnsafeArrayTypeReader#getS4(byte[], long)::: aligned unsafe array type reader get s4:::offset->readOffset->return->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte
AlignedUnsafeArrayTypeReader#getS8(byte[], long)::: aligned unsafe array type reader get s8:::offset->readOffset->return->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte->UNSAFE->getByte
AlignedUnsafeArrayTypeReader#getS2()::: aligned unsafe array type reader get s2:::result->getS2->return
AlignedUnsafeArrayTypeReader#getS4()::: aligned unsafe array type reader get s4:::result->getS4->return
AlignedUnsafeArrayTypeReader#getS8()::: aligned unsafe array type reader get s8:::result->getS8->return
UnsafeArrayTypeWriter#create(boolean)::: unsafe array type writer create:::if->return->new->UnalignedUnsafeArrayTypeWriter->else->return->new->AlignedUnsafeArrayTypeWriter
UnsafeArrayTypeWriter#getBytesWritten()::: unsafe array type writer get bytes written:::return
UnsafeArrayTypeWriter#toArray(byte[]):::Copies the buffer into the provided byte[] array of length #getBytesWritten().:::resultIdx->for->cur->return
UnsafeArrayTypeWriter#toByteBuffer(ByteBuffer):::Copies the buffer into the provided ByteBuffer at its current position.:::initialPos->buffer->position->for->cur->return
UnsafeArrayTypeWriter#putS1(long)::: unsafe array type writer put s1:::offset->writeOffset->UNSAFE->asS1->putByte
UnsafeArrayTypeWriter#putU1(long)::: unsafe array type writer put u1:::offset->writeOffset->UNSAFE->asU1->putByte
UnsafeArrayTypeWriter#putU2(long)::: unsafe array type writer put u2:::asU2->putS2
UnsafeArrayTypeWriter#putU4(long)::: unsafe array type writer put u4:::asU4->putS4
UnsafeArrayTypeWriter#putS2(long)::: unsafe array type writer put s2:::offset->writeOffset->putS2
UnsafeArrayTypeWriter#putS4(long)::: unsafe array type writer put s4:::offset->writeOffset->putS4
UnsafeArrayTypeWriter#putS8(long)::: unsafe array type writer put s8:::offset->writeOffset->putS8
UnsafeArrayTypeWriter#putS2(long, Chunk, long)::: unsafe array type writer put s2:::
UnsafeArrayTypeWriter#putS4(long, Chunk, long)::: unsafe array type writer put s4:::
UnsafeArrayTypeWriter#putS8(long, Chunk, long)::: unsafe array type writer put s8:::
UnsafeArrayTypeWriter#writeOffset(int)::: unsafe array type writer write offset:::if->newChunk->Math->min->new->Chunk->result->return
UnsafeArrayTypeWriter#patchS4(long, long)::: unsafe array type writer patch s4:::chunkStartOffset->chunk->while->targetOffset->putS4
UnsafeArrayTypeWriter#putSV(long)::: unsafe array type writer put v:::encodeSign->write
UnsafeArrayTypeWriter#putUV(long)::: unsafe array type writer put v:::write
UnsafeArrayTypeWriter#encodeSign(long)::: unsafe array type writer encode sign:::return
UnsafeArrayTypeWriter#write(long)::: unsafe array type writer write:::if->UnsignedMath->belowThan->putU1->else->writePacked
UnsafeArrayTypeWriter#writePacked(long)::: unsafe array type writer write packed:::sum->for->i->UnsignedMath->aboveOrEqual->putU1
UnalignedUnsafeArrayTypeWriter#putS2(long, Chunk, long)::: unaligned unsafe array type writer put s2:::UNSAFE->asS2->putShort
UnalignedUnsafeArrayTypeWriter#putS4(long, Chunk, long)::: unaligned unsafe array type writer put s4:::UNSAFE->asS4->putInt
UnalignedUnsafeArrayTypeWriter#putS8(long, Chunk, long)::: unaligned unsafe array type writer put s8:::UNSAFE->putLong
AlignedUnsafeArrayTypeWriter#putS2(long, Chunk, long)::: aligned unsafe array type writer put s2:::UNSAFE->putByte->UNSAFE->putByte
AlignedUnsafeArrayTypeWriter#putS4(long, Chunk, long)::: aligned unsafe array type writer put s4:::UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte
AlignedUnsafeArrayTypeWriter#putS8(long, Chunk, long)::: aligned unsafe array type writer put s8:::UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte->UNSAFE->putByte
UnsignedLong#asLong()::: unsigned long as long:::return
UnsignedLong#equals(long)::: unsigned long equals:::return
UnsignedLong#isLessThan(long)::: unsigned long is less than:::return->Long->compareUnsigned
UnsignedLong#isGreaterThan(long)::: unsigned long is greater than:::return->Long->compareUnsigned
UnsignedLong#isLessOrEqualTo(long)::: unsigned long is less or equal to:::return->Long->compareUnsigned
UnsignedLong#times(long)::: unsigned long times:::if->Long->Long->divideUnsigned->compareUnsigned->throw->new->ArithmeticException->return->new->UnsignedLong
UnsignedLong#minus(long)::: unsigned long minus:::if->Long->compareUnsigned->throw->new->ArithmeticException->return->new->UnsignedLong
UnsignedLong#plus(long)::: unsigned long plus:::if->Long->compareUnsigned->throw->new->ArithmeticException->return->new->UnsignedLong
UnsignedLong#wrappingPlus(long)::: unsigned long wrapping plus:::return->new->UnsignedLong
UnsignedLong#wrappingTimes(long)::: unsigned long wrapping times:::return->new->UnsignedLong
UnsignedLong#toString()::: unsigned long to string:::return->Long->toUnsignedString
UnsignedLong#equals(Object)::: unsigned long equals:::if->return->if->getClass->o->getClass->return->that->return
UnsignedLong#hashCode()::: unsigned long hash code:::return->Long->hashCode
Util#uncheckedCast(Class, Object):::Statically cast an object to an arbitrary Object type:::return
Util#uncheckedCast(Object):::Statically cast an object to an arbitrary Object type:::return
Util#atPutGrow(List, int, T, T):::Sets the element at a given position of a list and ensures that this position exists:::if->list->size->while->list->size->list->add->list->set
Util#indent(String, String):::Prepends the String indentation to every line in String lines, including a possibly non-empty line following the final newline.:::if->lines->length->return->newLine->if->lines->endsWith->return->lines->lines->length->substring->replace->return->lines->replace
Util#zero(JavaKind):::Returns the zero value for a given numeric kind.:::switch->return->return->JavaConstant->forByte->return->JavaConstant->forChar->return->return->return->return->return->JavaConstant->forShort->throw->kind->toString->new->IllegalArgumentException
Util#one(JavaKind):::Returns the one value for a given numeric kind.:::switch->return->return->JavaConstant->forByte->return->JavaConstant->forChar->return->return->return->return->return->JavaConstant->forShort->throw->kind->toString->new->IllegalArgumentException
Util#printInlining(ResolvedJavaMethod, int, int, boolean, String, Object...):::Print a HotSpot-style inlining message to the console.:::sb->new->StringBuilder->sb->append->sb->append->sb->String->method->isSynchronized->method->isNative->format->append->sb->append->sb->append->for->i->sb->String->methodName->String->format->format->append->TTY->sb->toString->println
Util#methodName(ResolvedJavaMethod)::: util method name:::return->method->format->method->getCodeSize
Util#setAccessible(Field, boolean):::Calls AccessibleObject#setAccessible(boolean) on field with the value flag.:::field->setAccessible
Util#setAccessible(Executable, boolean):::Calls AccessibleObject#setAccessible(boolean) on executable with the value flag.:::executable->setAccessible

org.graalvm.compiler.asm.amd64.AMD64Address#toString()->String::: d64 address to string
org.graalvm.compiler.asm.amd64.AMD64Address#getBase()->Register::: d64 address get base
org.graalvm.compiler.asm.amd64.AMD64Address#getIndex()->Register::: d64 address get index
org.graalvm.compiler.asm.amd64.AMD64Address#getScale()->Scale::: d64 address get scale
org.graalvm.compiler.asm.amd64.AMD64Address#getDisplacement()->int::: d64 address get displacement
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#emitOpcode(AMD64Assembler, OperandSize, int, int, int)->void::: d64 op emit opcode
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#verify(AMD64Assembler, OperandSize, Register, Register)->boolean::: d64 op verify
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#getAllowedSizes()->OperandSize[]::: d64 op get allowed sizes
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#isSSEInstruction()->boolean::: d64 op is instruction
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#getAssertion()->OpAssertion::: d64 op get assertion
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64Op#toString()->String::: d64 op to string
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64ImmOp#emitImmediate(AMD64Assembler, OperandSize, int)->void::: d64 imm op emit immediate
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64ImmOp#immediateSize(OperandSize)->int::: d64 imm op immediate size
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64RROp#emit(AMD64Assembler, OperandSize, Register, Register)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64RMOp#emit(AMD64Assembler, OperandSize, Register, Register)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64RMOp#emit(AMD64Assembler, OperandSize, Register, AMD64Address)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MROp#emit(AMD64Assembler, OperandSize, Register, Register)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MROp#emit(AMD64Assembler, OperandSize, AMD64Address, Register)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MOp#emit(AMD64Assembler, OperandSize, Register)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MOp#emit(AMD64Assembler, OperandSize, AMD64Address)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MIOp#emit(AMD64Assembler, OperandSize, Register, int)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MIOp#emit(AMD64Assembler, OperandSize, Register, int, boolean)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MIOp#emit(AMD64Assembler, OperandSize, AMD64Address, int)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64MIOp#emit(AMD64Assembler, OperandSize, AMD64Address, int, boolean)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64RMIOp#emit(AMD64Assembler, OperandSize, Register, Register, int)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64RMIOp#emit(AMD64Assembler, OperandSize, Register, AMD64Address, int)->void::: d64 op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64BinaryArithmetic#getMIOpcode(OperandSize, boolean)->AMD64MIOp::: d64 binary arithmetic get opcode
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64BinaryArithmetic#getMROpcode(OperandSize)->AMD64MROp::: d64 binary arithmetic get opcode
org.graalvm.compiler.asm.amd64.AMD64Assembler.AMD64BinaryArithmetic#getRMOpcode(OperandSize)->AMD64RMOp::: d64 binary arithmetic get opcode
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexOp#isSupported(AMD64Assembler, AVXSize)->boolean::: vex op is supported
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexOp#toString()->String::: vex op to string
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRROp#emit(AMD64Assembler, AVXSize, Register, Register)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRMOp#emit(AMD64Assembler, AVXSize, Register, AMD64Address)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMoveOp#emit(AMD64Assembler, AVXSize, AMD64Address, Register)->void::: vex move op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMoveOp#emitReverse(AMD64Assembler, AVXSize, Register, Register)->void::: vex move op emit reverse
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRRIOp#emit(AMD64Assembler, AVXSize, Register, Register, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRMIOp#emit(AMD64Assembler, AVXSize, Register, Register, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRMIOp#emit(AMD64Assembler, AVXSize, Register, AMD64Address, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMRIOp#emit(AMD64Assembler, AVXSize, Register, Register, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMRIOp#emit(AMD64Assembler, AVXSize, AMD64Address, Register, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMROp#emit(AMD64Assembler, AVXSize, Register, Register, Register, Register)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMROp#emit(AMD64Assembler, AVXSize, Register, Register, Register, AMD64Address)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMOp#emit(AMD64Assembler, AVXSize, Register, Register, Register)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMOp#emit(AMD64Assembler, AVXSize, Register, Register, AMD64Address)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRVMOp#emit(AMD64Assembler, AVXSize, Register, Register, Register)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRVMOp#emit(AMD64Assembler, AVXSize, Register, Register, AMD64Address)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRMVOp#emit(AMD64Assembler, AVXSize, Register, Register, Register)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRMVOp#emit(AMD64Assembler, AVXSize, Register, AMD64Address, Register)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRMOp#emit(AMD64Assembler, AVXSize, Register, Register)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexGeneralPurposeRMOp#emit(AMD64Assembler, AVXSize, Register, AMD64Address)->void::: vex general purpose op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexShiftOp#emit(AMD64Assembler, AVXSize, Register, Register, int)->void::: vex shift op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMaskMoveOp#emit(AMD64Assembler, AVXSize, Register, Register, AMD64Address)->void::: vex mask move op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexMaskMoveOp#emit(AMD64Assembler, AVXSize, AMD64Address, Register, Register)->void::: vex mask move op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMIOp#emit(AMD64Assembler, AVXSize, Register, Register, Register, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexRVMIOp#emit(AMD64Assembler, AVXSize, Register, Register, AMD64Address, int)->void::: vex op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexFloatCompareOp#emit(AMD64Assembler, AVXSize, Register, Register, Register, Predicate)->void::: vex float compare op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler.VexFloatCompareOp#emit(AMD64Assembler, AVXSize, Register, Register, AMD64Address, Predicate)->void::: vex float compare op emit
org.graalvm.compiler.asm.amd64.AMD64Assembler#addl(AMD64Address, int)->void::: d64 assembler addl
org.graalvm.compiler.asm.amd64.AMD64Assembler#addl(Register, int)->void::: d64 assembler addl
org.graalvm.compiler.asm.amd64.AMD64Assembler#addl(Register, Register)->void::: d64 assembler addl
org.graalvm.compiler.asm.amd64.AMD64Assembler#addpd(Register, Register)->void::: d64 assembler addpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#addpd(Register, AMD64Address)->void::: d64 assembler addpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#addsd(Register, Register)->void::: d64 assembler addsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#addsd(Register, AMD64Address)->void::: d64 assembler addsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#andl(Register, int)->void::: d64 assembler andl
org.graalvm.compiler.asm.amd64.AMD64Assembler#andl(Register, Register)->void::: d64 assembler andl
org.graalvm.compiler.asm.amd64.AMD64Assembler#andpd(Register, Register)->void::: d64 assembler andpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#andpd(Register, AMD64Address)->void::: d64 assembler andpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#bsfq(Register, Register)->void::: d64 assembler bsfq
org.graalvm.compiler.asm.amd64.AMD64Assembler#bsrl(Register, Register)->void::: d64 assembler bsrl
org.graalvm.compiler.asm.amd64.AMD64Assembler#bswapl(Register)->void::: d64 assembler bswapl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cdql()->void::: d64 assembler cdql
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmovl(ConditionFlag, Register, Register)->void::: d64 assembler cmovl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmovl(ConditionFlag, Register, AMD64Address)->void::: d64 assembler cmovl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpb(Register, Register)->void::: d64 assembler cmpb
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpw(Register, Register)->void::: d64 assembler cmpw
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpl(Register, int)->void::: d64 assembler cmpl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpl(Register, Register)->void::: d64 assembler cmpl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpl(Register, AMD64Address)->void::: d64 assembler cmpl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpl(AMD64Address, int)->void::: d64 assembler cmpl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpxchgb(Register, AMD64Address)->void:::The 8-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpxchgw(Register, AMD64Address)->void:::The 16-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpxchgl(Register, AMD64Address)->void:::The 32-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvtsi2sdl(Register, Register)->void::: d64 assembler cvtsi2sdl
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvttsd2sil(Register, Register)->void::: d64 assembler cvttsd2sil
org.graalvm.compiler.asm.amd64.AMD64Assembler#decl(AMD64Address)->void::: d64 assembler decl
org.graalvm.compiler.asm.amd64.AMD64Assembler#divsd(Register, Register)->void::: d64 assembler divsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#hlt()->void::: d64 assembler hlt
org.graalvm.compiler.asm.amd64.AMD64Assembler#imull(Register, Register, int)->void::: d64 assembler imull
org.graalvm.compiler.asm.amd64.AMD64Assembler#incl(AMD64Address)->void::: d64 assembler incl
org.graalvm.compiler.asm.amd64.AMD64Assembler#jcc(ConditionFlag, int, boolean)->void::: d64 assembler jcc
org.graalvm.compiler.asm.amd64.AMD64Assembler#jcc(ConditionFlag, Label)->void::: d64 assembler jcc
org.graalvm.compiler.asm.amd64.AMD64Assembler#jccb(ConditionFlag, Label)->void::: d64 assembler jccb
org.graalvm.compiler.asm.amd64.AMD64Assembler#jmp(int, boolean)->void::: d64 assembler jmp
org.graalvm.compiler.asm.amd64.AMD64Assembler#jmp(Label)->void::: d64 assembler jmp
org.graalvm.compiler.asm.amd64.AMD64Assembler#jmp(Register)->void::: d64 assembler jmp
org.graalvm.compiler.asm.amd64.AMD64Assembler#jmp(AMD64Address)->void::: d64 assembler jmp
org.graalvm.compiler.asm.amd64.AMD64Assembler#jmpb(Label)->void::: d64 assembler jmpb
org.graalvm.compiler.asm.amd64.AMD64Assembler#lead(Register, AMD64Address)->void::: d64 assembler lead
org.graalvm.compiler.asm.amd64.AMD64Assembler#leaq(Register, AMD64Address)->void::: d64 assembler leaq
org.graalvm.compiler.asm.amd64.AMD64Assembler#leave()->void::: d64 assembler leave
org.graalvm.compiler.asm.amd64.AMD64Assembler#lock()->void::: d64 assembler lock
org.graalvm.compiler.asm.amd64.AMD64Assembler#movapd(Register, Register)->void::: d64 assembler movapd
org.graalvm.compiler.asm.amd64.AMD64Assembler#movaps(Register, Register)->void::: d64 assembler movaps
org.graalvm.compiler.asm.amd64.AMD64Assembler#movb(AMD64Address, int)->void::: d64 assembler movb
org.graalvm.compiler.asm.amd64.AMD64Assembler#movb(AMD64Address, Register)->void::: d64 assembler movb
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(Register, int)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(Register, int, boolean)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(Register, Register)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(Register, AMD64Address)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(Register, AMD64Address, boolean)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(AMD64Address, int)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movl(AMD64Address, Register)->void::: d64 assembler movl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movlpd(Register, AMD64Address)->void:::New CPUs require use of movsd and movss to avoid partial register stall when loading from memory
org.graalvm.compiler.asm.amd64.AMD64Assembler#movlhps(Register, Register)->void::: d64 assembler movlhps
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(Register, AMD64Address)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(Register, AMD64Address, boolean)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(Register, Register)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(AMD64Address, Register)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsbl(Register, AMD64Address)->void::: d64 assembler movsbl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsbl(Register, Register)->void::: d64 assembler movsbl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsbq(Register, AMD64Address)->void::: d64 assembler movsbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsbq(Register, Register)->void::: d64 assembler movsbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsd(Register, Register)->void::: d64 assembler movsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsd(Register, AMD64Address)->void::: d64 assembler movsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#movsd(AMD64Address, Register)->void::: d64 assembler movsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#movss(Register, Register)->void::: d64 assembler movss
org.graalvm.compiler.asm.amd64.AMD64Assembler#movss(Register, AMD64Address)->void::: d64 assembler movss
org.graalvm.compiler.asm.amd64.AMD64Assembler#movss(AMD64Address, Register)->void::: d64 assembler movss
org.graalvm.compiler.asm.amd64.AMD64Assembler#mulpd(Register, Register)->void::: d64 assembler mulpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#mulpd(Register, AMD64Address)->void::: d64 assembler mulpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#mulsd(Register, Register)->void::: d64 assembler mulsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#mulsd(Register, AMD64Address)->void::: d64 assembler mulsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#mulss(Register, Register)->void::: d64 assembler mulss
org.graalvm.compiler.asm.amd64.AMD64Assembler#movswl(Register, AMD64Address)->void::: d64 assembler movswl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movswq(Register, AMD64Address)->void::: d64 assembler movswq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movw(AMD64Address, int)->void::: d64 assembler movw
org.graalvm.compiler.asm.amd64.AMD64Assembler#movw(AMD64Address, Register)->void::: d64 assembler movw
org.graalvm.compiler.asm.amd64.AMD64Assembler#movw(Register, AMD64Address)->void::: d64 assembler movw
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzbl(Register, AMD64Address)->void::: d64 assembler movzbl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzbl(Register, Register)->void::: d64 assembler movzbl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzbq(Register, Register)->void::: d64 assembler movzbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzbq(Register, AMD64Address)->void::: d64 assembler movzbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzwl(Register, AMD64Address)->void::: d64 assembler movzwl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movzwq(Register, AMD64Address)->void::: d64 assembler movzwq
org.graalvm.compiler.asm.amd64.AMD64Assembler#negl(Register)->void::: d64 assembler negl
org.graalvm.compiler.asm.amd64.AMD64Assembler#notl(Register)->void::: d64 assembler notl
org.graalvm.compiler.asm.amd64.AMD64Assembler#notq(Register)->void::: d64 assembler notq
org.graalvm.compiler.asm.amd64.AMD64Assembler#ensureUniquePC()->void::: d64 assembler ensure unique c
org.graalvm.compiler.asm.amd64.AMD64Assembler#nop()->void::: d64 assembler nop
org.graalvm.compiler.asm.amd64.AMD64Assembler#nop(int)->void::: d64 assembler nop
org.graalvm.compiler.asm.amd64.AMD64Assembler#orl(Register, Register)->void::: d64 assembler orl
org.graalvm.compiler.asm.amd64.AMD64Assembler#orl(Register, int)->void::: d64 assembler orl
org.graalvm.compiler.asm.amd64.AMD64Assembler#packuswb(Register, Register)->void::: d64 assembler packuswb
org.graalvm.compiler.asm.amd64.AMD64Assembler#pop(Register)->void::: d64 assembler pop
org.graalvm.compiler.asm.amd64.AMD64Assembler#popfq()->void::: d64 assembler popfq
org.graalvm.compiler.asm.amd64.AMD64Assembler#ptest(Register, Register)->void::: d64 assembler ptest
org.graalvm.compiler.asm.amd64.AMD64Assembler#pcmpeqb(Register, Register)->void::: d64 assembler pcmpeqb
org.graalvm.compiler.asm.amd64.AMD64Assembler#pcmpeqw(Register, Register)->void::: d64 assembler pcmpeqw
org.graalvm.compiler.asm.amd64.AMD64Assembler#pcmpeqd(Register, Register)->void::: d64 assembler pcmpeqd
org.graalvm.compiler.asm.amd64.AMD64Assembler#pcmpestri(Register, AMD64Address, int)->void::: d64 assembler pcmpestri
org.graalvm.compiler.asm.amd64.AMD64Assembler#pcmpestri(Register, Register, int)->void::: d64 assembler pcmpestri
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovmskb(Register, Register)->void::: d64 assembler pmovmskb
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxbw(Register, AMD64Address)->void::: d64 assembler pmovsxbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxbd(Register, AMD64Address)->void::: d64 assembler pmovsxbd
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxbq(Register, AMD64Address)->void::: d64 assembler pmovsxbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxwd(Register, AMD64Address)->void::: d64 assembler pmovsxwd
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxwq(Register, AMD64Address)->void::: d64 assembler pmovsxwq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovsxdq(Register, AMD64Address)->void::: d64 assembler pmovsxdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxbw(Register, AMD64Address)->void::: d64 assembler pmovzxbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxbd(Register, AMD64Address)->void::: d64 assembler pmovzxbd
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxbq(Register, AMD64Address)->void::: d64 assembler pmovzxbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxwd(Register, AMD64Address)->void::: d64 assembler pmovzxwd
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxwq(Register, AMD64Address)->void::: d64 assembler pmovzxwq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxdq(Register, AMD64Address)->void::: d64 assembler pmovzxdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pmovzxbw(Register, Register)->void::: d64 assembler pmovzxbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#push(Register)->void::: d64 assembler push
org.graalvm.compiler.asm.amd64.AMD64Assembler#pushfq()->void::: d64 assembler pushfq
org.graalvm.compiler.asm.amd64.AMD64Assembler#paddd(Register, Register)->void::: d64 assembler paddd
org.graalvm.compiler.asm.amd64.AMD64Assembler#paddq(Register, Register)->void::: d64 assembler paddq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pextrw(Register, Register, int)->void::: d64 assembler pextrw
org.graalvm.compiler.asm.amd64.AMD64Assembler#pinsrw(Register, Register, int)->void::: d64 assembler pinsrw
org.graalvm.compiler.asm.amd64.AMD64Assembler#por(Register, Register)->void::: d64 assembler por
org.graalvm.compiler.asm.amd64.AMD64Assembler#pand(Register, Register)->void::: d64 assembler pand
org.graalvm.compiler.asm.amd64.AMD64Assembler#pxor(Register, Register)->void::: d64 assembler pxor
org.graalvm.compiler.asm.amd64.AMD64Assembler#pslld(Register, int)->void::: d64 assembler pslld
org.graalvm.compiler.asm.amd64.AMD64Assembler#psllq(Register, Register)->void::: d64 assembler psllq
org.graalvm.compiler.asm.amd64.AMD64Assembler#psllq(Register, int)->void::: d64 assembler psllq
org.graalvm.compiler.asm.amd64.AMD64Assembler#psrad(Register, int)->void::: d64 assembler psrad
org.graalvm.compiler.asm.amd64.AMD64Assembler#psrld(Register, int)->void::: d64 assembler psrld
org.graalvm.compiler.asm.amd64.AMD64Assembler#psrlq(Register, int)->void::: d64 assembler psrlq
org.graalvm.compiler.asm.amd64.AMD64Assembler#psrldq(Register, int)->void::: d64 assembler psrldq
org.graalvm.compiler.asm.amd64.AMD64Assembler#pshufb(Register, Register)->void::: d64 assembler pshufb
org.graalvm.compiler.asm.amd64.AMD64Assembler#pshuflw(Register, Register, int)->void::: d64 assembler pshuflw
org.graalvm.compiler.asm.amd64.AMD64Assembler#pshufd(Register, Register, int)->void::: d64 assembler pshufd
org.graalvm.compiler.asm.amd64.AMD64Assembler#psubd(Register, Register)->void::: d64 assembler psubd
org.graalvm.compiler.asm.amd64.AMD64Assembler#punpcklbw(Register, Register)->void::: d64 assembler punpcklbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#rcpps(Register, Register)->void::: d64 assembler rcpps
org.graalvm.compiler.asm.amd64.AMD64Assembler#ret(int)->void::: d64 assembler ret
org.graalvm.compiler.asm.amd64.AMD64Assembler#sarl(Register, int)->void::: d64 assembler sarl
org.graalvm.compiler.asm.amd64.AMD64Assembler#shll(Register, int)->void::: d64 assembler shll
org.graalvm.compiler.asm.amd64.AMD64Assembler#shll(Register)->void::: d64 assembler shll
org.graalvm.compiler.asm.amd64.AMD64Assembler#shlxl(Register, Register, Register)->void::: d64 assembler shlxl
org.graalvm.compiler.asm.amd64.AMD64Assembler#shrl(Register, int)->void::: d64 assembler shrl
org.graalvm.compiler.asm.amd64.AMD64Assembler#shrl(Register)->void::: d64 assembler shrl
org.graalvm.compiler.asm.amd64.AMD64Assembler#subl(AMD64Address, int)->void::: d64 assembler subl
org.graalvm.compiler.asm.amd64.AMD64Assembler#subl(Register, int)->void::: d64 assembler subl
org.graalvm.compiler.asm.amd64.AMD64Assembler#subl(Register, Register)->void::: d64 assembler subl
org.graalvm.compiler.asm.amd64.AMD64Assembler#subpd(Register, Register)->void::: d64 assembler subpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#subsd(Register, Register)->void::: d64 assembler subsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#subsd(Register, AMD64Address)->void::: d64 assembler subsd
org.graalvm.compiler.asm.amd64.AMD64Assembler#testl(Register, int)->void::: d64 assembler testl
org.graalvm.compiler.asm.amd64.AMD64Assembler#testl(Register, Register)->void::: d64 assembler testl
org.graalvm.compiler.asm.amd64.AMD64Assembler#testl(Register, AMD64Address)->void::: d64 assembler testl
org.graalvm.compiler.asm.amd64.AMD64Assembler#unpckhpd(Register, Register)->void::: d64 assembler unpckhpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#unpcklpd(Register, Register)->void::: d64 assembler unpcklpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#xorl(Register, Register)->void::: d64 assembler xorl
org.graalvm.compiler.asm.amd64.AMD64Assembler#xorq(Register, Register)->void::: d64 assembler xorq
org.graalvm.compiler.asm.amd64.AMD64Assembler#xorpd(Register, Register)->void::: d64 assembler xorpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#xorps(Register, Register)->void::: d64 assembler xorps
org.graalvm.compiler.asm.amd64.AMD64Assembler#decl(Register)->void::: d64 assembler decl
org.graalvm.compiler.asm.amd64.AMD64Assembler#incl(Register)->void::: d64 assembler incl
org.graalvm.compiler.asm.amd64.AMD64Assembler#addq(Register, int)->void::: d64 assembler addq
org.graalvm.compiler.asm.amd64.AMD64Assembler#addq(AMD64Address, int)->void::: d64 assembler addq
org.graalvm.compiler.asm.amd64.AMD64Assembler#addq(Register, Register)->void::: d64 assembler addq
org.graalvm.compiler.asm.amd64.AMD64Assembler#addq(AMD64Address, Register)->void::: d64 assembler addq
org.graalvm.compiler.asm.amd64.AMD64Assembler#andq(Register, int)->void::: d64 assembler andq
org.graalvm.compiler.asm.amd64.AMD64Assembler#bsrq(Register, Register)->void::: d64 assembler bsrq
org.graalvm.compiler.asm.amd64.AMD64Assembler#bswapq(Register)->void::: d64 assembler bswapq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cdqq()->void::: d64 assembler cdqq
org.graalvm.compiler.asm.amd64.AMD64Assembler#repStosb()->void::: d64 assembler rep stosb
org.graalvm.compiler.asm.amd64.AMD64Assembler#repStosq()->void::: d64 assembler rep stosq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmovq(ConditionFlag, Register, Register)->void::: d64 assembler cmovq
org.graalvm.compiler.asm.amd64.AMD64Assembler#setb(ConditionFlag, Register)->void::: d64 assembler setb
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmovq(ConditionFlag, Register, AMD64Address)->void::: d64 assembler cmovq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpq(Register, int)->void::: d64 assembler cmpq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpq(Register, Register)->void::: d64 assembler cmpq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpq(Register, AMD64Address)->void::: d64 assembler cmpq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cmpxchgq(Register, AMD64Address)->void::: d64 assembler cmpxchgq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvtdq2pd(Register, Register)->void::: d64 assembler cvtdq2pd
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvtsi2sdq(Register, Register)->void::: d64 assembler cvtsi2sdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvttsd2siq(Register, Register)->void::: d64 assembler cvttsd2siq
org.graalvm.compiler.asm.amd64.AMD64Assembler#cvttpd2dq(Register, Register)->void::: d64 assembler cvttpd2dq
org.graalvm.compiler.asm.amd64.AMD64Assembler#decq(Register)->void::: d64 assembler decq
org.graalvm.compiler.asm.amd64.AMD64Assembler#decq(AMD64Address)->void::: d64 assembler decq
org.graalvm.compiler.asm.amd64.AMD64Assembler#imulq(Register, Register)->void::: d64 assembler imulq
org.graalvm.compiler.asm.amd64.AMD64Assembler#incq(Register)->void::: d64 assembler incq
org.graalvm.compiler.asm.amd64.AMD64Assembler#incq(AMD64Address)->void::: d64 assembler incq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(Register, long)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movq(Register, long, boolean)->void::: d64 assembler movq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movslq(Register, int)->void::: d64 assembler movslq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdq(Register, AMD64Address)->void::: d64 assembler movdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdq(AMD64Address, Register)->void::: d64 assembler movdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdq(Register, Register)->void::: d64 assembler movdq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdl(Register, Register)->void::: d64 assembler movdl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdl(Register, AMD64Address)->void::: d64 assembler movdl
org.graalvm.compiler.asm.amd64.AMD64Assembler#movddup(Register, Register)->void::: d64 assembler movddup
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdqu(Register, AMD64Address)->void::: d64 assembler movdqu
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdqu(Register, Register)->void::: d64 assembler movdqu
org.graalvm.compiler.asm.amd64.AMD64Assembler#movdqu(AMD64Address, Register)->void::: d64 assembler movdqu
org.graalvm.compiler.asm.amd64.AMD64Assembler#movslq(AMD64Address, int)->void::: d64 assembler movslq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movslq(Register, AMD64Address)->void::: d64 assembler movslq
org.graalvm.compiler.asm.amd64.AMD64Assembler#movslq(Register, Register)->void::: d64 assembler movslq
org.graalvm.compiler.asm.amd64.AMD64Assembler#negq(Register)->void::: d64 assembler negq
org.graalvm.compiler.asm.amd64.AMD64Assembler#orq(Register, Register)->void::: d64 assembler orq
org.graalvm.compiler.asm.amd64.AMD64Assembler#shlq(Register, int)->void::: d64 assembler shlq
org.graalvm.compiler.asm.amd64.AMD64Assembler#shlq(Register)->void::: d64 assembler shlq
org.graalvm.compiler.asm.amd64.AMD64Assembler#shrq(Register, int)->void::: d64 assembler shrq
org.graalvm.compiler.asm.amd64.AMD64Assembler#shrq(Register)->void::: d64 assembler shrq
org.graalvm.compiler.asm.amd64.AMD64Assembler#sarq(Register, int)->void::: d64 assembler sarq
org.graalvm.compiler.asm.amd64.AMD64Assembler#sbbq(Register, Register)->void::: d64 assembler sbbq
org.graalvm.compiler.asm.amd64.AMD64Assembler#subq(Register, int)->void::: d64 assembler subq
org.graalvm.compiler.asm.amd64.AMD64Assembler#subq(AMD64Address, int)->void::: d64 assembler subq
org.graalvm.compiler.asm.amd64.AMD64Assembler#subqWide(Register, int)->void::: d64 assembler subq wide
org.graalvm.compiler.asm.amd64.AMD64Assembler#subq(Register, Register)->void::: d64 assembler subq
org.graalvm.compiler.asm.amd64.AMD64Assembler#testq(Register, Register)->void::: d64 assembler testq
org.graalvm.compiler.asm.amd64.AMD64Assembler#btrq(Register, int)->void::: d64 assembler btrq
org.graalvm.compiler.asm.amd64.AMD64Assembler#xaddb(AMD64Address, Register)->void::: d64 assembler xaddb
org.graalvm.compiler.asm.amd64.AMD64Assembler#xaddw(AMD64Address, Register)->void::: d64 assembler xaddw
org.graalvm.compiler.asm.amd64.AMD64Assembler#xaddl(AMD64Address, Register)->void::: d64 assembler xaddl
org.graalvm.compiler.asm.amd64.AMD64Assembler#xaddq(AMD64Address, Register)->void::: d64 assembler xaddq
org.graalvm.compiler.asm.amd64.AMD64Assembler#xchgb(Register, AMD64Address)->void::: d64 assembler xchgb
org.graalvm.compiler.asm.amd64.AMD64Assembler#xchgw(Register, AMD64Address)->void::: d64 assembler xchgw
org.graalvm.compiler.asm.amd64.AMD64Assembler#xchgl(Register, AMD64Address)->void::: d64 assembler xchgl
org.graalvm.compiler.asm.amd64.AMD64Assembler#xchgq(Register, AMD64Address)->void::: d64 assembler xchgq
org.graalvm.compiler.asm.amd64.AMD64Assembler#membar(int)->void::: d64 assembler membar
org.graalvm.compiler.asm.amd64.AMD64Assembler#patchJumpTarget(int, int)->void::: d64 assembler patch jump target
org.graalvm.compiler.asm.amd64.AMD64Assembler#nullCheck(AMD64Address)->void::: d64 assembler null check
org.graalvm.compiler.asm.amd64.AMD64Assembler#align(int)->void::: d64 assembler align
org.graalvm.compiler.asm.amd64.AMD64Assembler#call()->void:::Emits a direct call instruction
org.graalvm.compiler.asm.amd64.AMD64Assembler#call(Register)->void::: d64 assembler call
org.graalvm.compiler.asm.amd64.AMD64Assembler#int3()->void::: d64 assembler int3
org.graalvm.compiler.asm.amd64.AMD64Assembler#pause()->void::: d64 assembler pause
org.graalvm.compiler.asm.amd64.AMD64Assembler#fldd(AMD64Address)->void::: d64 assembler fldd
org.graalvm.compiler.asm.amd64.AMD64Assembler#flds(AMD64Address)->void::: d64 assembler flds
org.graalvm.compiler.asm.amd64.AMD64Assembler#fldln2()->void::: d64 assembler fldln2
org.graalvm.compiler.asm.amd64.AMD64Assembler#fldlg2()->void::: d64 assembler fldlg2
org.graalvm.compiler.asm.amd64.AMD64Assembler#fyl2x()->void::: d64 assembler fyl2x
org.graalvm.compiler.asm.amd64.AMD64Assembler#fstps(AMD64Address)->void::: d64 assembler fstps
org.graalvm.compiler.asm.amd64.AMD64Assembler#fstpd(AMD64Address)->void::: d64 assembler fstpd
org.graalvm.compiler.asm.amd64.AMD64Assembler#ffree(int)->void::: d64 assembler ffree
org.graalvm.compiler.asm.amd64.AMD64Assembler#fincstp()->void::: d64 assembler fincstp
org.graalvm.compiler.asm.amd64.AMD64Assembler#fxch(int)->void::: d64 assembler fxch
org.graalvm.compiler.asm.amd64.AMD64Assembler#fnstswAX()->void::: d64 assembler fnstsw x
org.graalvm.compiler.asm.amd64.AMD64Assembler#fwait()->void::: d64 assembler fwait
org.graalvm.compiler.asm.amd64.AMD64Assembler#fprem()->void::: d64 assembler fprem
org.graalvm.compiler.asm.amd64.AMD64Assembler#fsin()->void::: d64 assembler fsin
org.graalvm.compiler.asm.amd64.AMD64Assembler#fcos()->void::: d64 assembler fcos
org.graalvm.compiler.asm.amd64.AMD64Assembler#fptan()->void::: d64 assembler fptan
org.graalvm.compiler.asm.amd64.AMD64Assembler#fstp(int)->void::: d64 assembler fstp
org.graalvm.compiler.asm.amd64.AMD64Assembler#makeAddress(Register, int)->AMD64Address::: d64 assembler make address
org.graalvm.compiler.asm.amd64.AMD64Assembler#getPlaceholder(int)->AMD64Address::: d64 assembler get placeholder
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetchnta(AMD64Address)->void::: d64 assembler prefetchnta
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetchr(AMD64Address)->void::: d64 assembler prefetchr
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetcht0(AMD64Address)->void::: d64 assembler prefetcht0
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetcht1(AMD64Address)->void::: d64 assembler prefetcht1
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetcht2(AMD64Address)->void::: d64 assembler prefetcht2
org.graalvm.compiler.asm.amd64.AMD64Assembler#prefetchw(AMD64Address)->void::: d64 assembler prefetchw
org.graalvm.compiler.asm.amd64.AMD64Assembler#rdtsc()->void::: d64 assembler rdtsc
org.graalvm.compiler.asm.amd64.AMD64Assembler#illegal()->void:::Emits an instruction which is considered to be illegal
org.graalvm.compiler.asm.amd64.AMD64Assembler#lfence()->void::: d64 assembler lfence
org.graalvm.compiler.asm.amd64.AMD64Assembler#vptest(Register, Register)->void::: d64 assembler vptest
org.graalvm.compiler.asm.amd64.AMD64Assembler#vpxor(Register, Register, Register)->void::: d64 assembler vpxor
org.graalvm.compiler.asm.amd64.AMD64Assembler#vpxor(Register, Register, AMD64Address)->void::: d64 assembler vpxor
org.graalvm.compiler.asm.amd64.AMD64Assembler#vmovdqu(Register, AMD64Address)->void::: d64 assembler vmovdqu
org.graalvm.compiler.asm.amd64.AMD64Assembler#vmovdqu(AMD64Address, Register)->void::: d64 assembler vmovdqu
org.graalvm.compiler.asm.amd64.AMD64Assembler#vpmovzxbw(Register, AMD64Address)->void::: d64 assembler vpmovzxbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#vzeroupper()->void::: d64 assembler vzeroupper
org.graalvm.compiler.asm.amd64.AMD64Assembler#kortestd(Register, Register)->void::: d64 assembler kortestd
org.graalvm.compiler.asm.amd64.AMD64Assembler#kortestq(Register, Register)->void::: d64 assembler kortestq
org.graalvm.compiler.asm.amd64.AMD64Assembler#kmovd(Register, Register)->void::: d64 assembler kmovd
org.graalvm.compiler.asm.amd64.AMD64Assembler#kmovq(Register, Register)->void::: d64 assembler kmovq
org.graalvm.compiler.asm.amd64.AMD64Assembler#ktestd(Register, Register)->void::: d64 assembler ktestd
org.graalvm.compiler.asm.amd64.AMD64Assembler#evmovdqu64(Register, AMD64Address)->void::: d64 assembler evmovdqu64
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpmovzxbw(Register, AMD64Address)->void::: d64 assembler evpmovzxbw
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpcmpeqb(Register, Register, AMD64Address)->void::: d64 assembler evpcmpeqb
org.graalvm.compiler.asm.amd64.AMD64Assembler#evmovdqu16(Register, AMD64Address)->void::: d64 assembler evmovdqu16
org.graalvm.compiler.asm.amd64.AMD64Assembler#evmovdqu16(Register, Register, AMD64Address)->void::: d64 assembler evmovdqu16
org.graalvm.compiler.asm.amd64.AMD64Assembler#evmovdqu16(AMD64Address, Register)->void::: d64 assembler evmovdqu16
org.graalvm.compiler.asm.amd64.AMD64Assembler#evmovdqu16(AMD64Address, Register, Register)->void::: d64 assembler evmovdqu16
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpbroadcastw(Register, Register)->void::: d64 assembler evpbroadcastw
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpcmpuw(Register, Register, Register, int)->void::: d64 assembler evpcmpuw
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpcmpuw(Register, Register, Register, Register, int)->void::: d64 assembler evpcmpuw
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpmovwb(AMD64Address, Register)->void::: d64 assembler evpmovwb
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpmovwb(AMD64Address, Register, Register)->void::: d64 assembler evpmovwb
org.graalvm.compiler.asm.amd64.AMD64Assembler#evpmovzxbw(Register, Register, AMD64Address)->void::: d64 assembler evpmovzxbw
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler.OperandDataAnnotation#toString()->String::: operand data annotation to string
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#annotatePatchingImmediate(int, int)->void::: d64 base assembler annotate patching immediate
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#supports(CPUFeature)->boolean::: d64 base assembler supports
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#inRC(RegisterCategory, Register)->boolean::: d64 base assembler in c
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#encode(Register)->int::: d64 base assembler encode
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#rexw()->void::: d64 base assembler rexw
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(Register)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(Register, boolean)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefixq(Register)->void::: d64 base assembler prefixq
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(Register, Register)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(Register, boolean, Register, boolean)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefixq(Register, Register)->void:::Creates prefix for the operands
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(AMD64Address)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefixq(AMD64Address)->void::: d64 base assembler prefixq
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefixb(AMD64Address, Register)->void::: d64 base assembler prefixb
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(AMD64Address, Register)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefix(AMD64Address, Register, boolean)->void::: d64 base assembler prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#prefixq(AMD64Address, Register)->void::: d64 base assembler prefixq
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#getRXB(Register, Register)->int:::Get RXB bits for register-register instruction
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#getRXB(Register, AMD64Address)->int:::Get RXB bits for register-memory instruction
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitModRM(int, Register)->void:::Emit the ModR/M byte for one register operand and an opcode extension in the R field
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitModRM(Register, Register)->void:::Emit the ModR/M byte for two register operands
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitOperandHelper(Register, AMD64Address, boolean, int)->void:::Emits the ModR/M byte and optionally the SIB byte for one register and one memory operand.
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitOperandHelper(int, AMD64Address, int)->void::: d64 base assembler emit operand helper
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitOperandHelper(Register, AMD64Address, int)->void::: d64 base assembler emit operand helper
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitEVEXOperandHelper(Register, AMD64Address, int, int)->void::: d64 base assembler emit operand helper
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#simdPrefix(Register, Register, AMD64Address, OperandSize, int, int, boolean)->void::: d64 base assembler simd prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#simdPrefix(Register, Register, AMD64Address, OperandSize, int, boolean)->void::: d64 base assembler simd prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#simdPrefix(Register, Register, Register, OperandSize, int, int, boolean)->void::: d64 base assembler simd prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#simdPrefix(Register, Register, Register, OperandSize, int, boolean)->void::: d64 base assembler simd prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#emitVEX(int, int, int, int, int, int, boolean)->void:::Low-level function to encode and emit the VEX prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#getLFlag(AVXSize)->int::: d64 base assembler get flag
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#vexPrefix(Register, Register, Register, AVXSize, int, int, int, boolean)->void::: d64 base assembler vex prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#vexPrefix(Register, Register, AMD64Address, AVXSize, int, int, int, boolean)->void::: d64 base assembler vex prefix
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#evexPrefix(Register, Register, Register, Register, AVXSize, int, int, int, int, int)->void:::Helper method for emitting EVEX prefix in the form of RRRR.
org.graalvm.compiler.asm.amd64.AMD64BaseAssembler#evexPrefix(Register, Register, Register, AMD64Address, AVXSize, int, int, int, int, int)->void:::Helper method for emitting EVEX prefix in the form of RRRM
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#decrementq(Register, int)->void::: d64 macro assembler decrementq
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#decrementq(AMD64Address, int)->void::: d64 macro assembler decrementq
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#enter(int)->void::: d64 macro assembler enter
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#incrementq(Register, int)->void::: d64 macro assembler incrementq
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#incrementq(AMD64Address, int)->void::: d64 macro assembler incrementq
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movptr(Register, AMD64Address)->void::: d64 macro assembler movptr
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movptr(AMD64Address, Register)->void::: d64 macro assembler movptr
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movptr(AMD64Address, int)->void::: d64 macro assembler movptr
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#cmpptr(Register, Register)->void::: d64 macro assembler cmpptr
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#cmpptr(Register, AMD64Address)->void::: d64 macro assembler cmpptr
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#decrementl(Register)->void::: d64 macro assembler decrementl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#decrementl(Register, int)->void::: d64 macro assembler decrementl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#decrementl(AMD64Address, int)->void::: d64 macro assembler decrementl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#incrementl(Register, int)->void::: d64 macro assembler incrementl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#incrementl(AMD64Address, int)->void::: d64 macro assembler incrementl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movflt(Register, Register)->void::: d64 macro assembler movflt
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movflt(Register, AMD64Address)->void::: d64 macro assembler movflt
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movflt(AMD64Address, Register)->void::: d64 macro assembler movflt
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movdbl(Register, Register)->void::: d64 macro assembler movdbl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movdbl(Register, AMD64Address)->void::: d64 macro assembler movdbl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movdbl(AMD64Address, Register)->void::: d64 macro assembler movdbl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#movlong(AMD64Address, long)->void:::Non-atomic write of a 64-bit constant to memory
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#setl(ConditionFlag, Register)->void::: d64 macro assembler setl
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#setq(ConditionFlag, Register)->void::: d64 macro assembler setq
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#flog(Register, Register, boolean)->void::: d64 macro assembler flog
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#fsin(Register, Register)->void::: d64 macro assembler fsin
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#fcos(Register, Register)->void::: d64 macro assembler fcos
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#ftan(Register, Register)->void::: d64 macro assembler ftan
org.graalvm.compiler.asm.amd64.AMD64MacroAssembler#fpop()->void::: d64 macro assembler fpop
org.graalvm.compiler.asm.amd64.AVXKind#getRegisterSize(Value)->AVXSize::: kind get register size
org.graalvm.compiler.asm.amd64.AVXKind#getDataSize(AMD64Kind)->AVXSize::: kind get data size
org.graalvm.compiler.asm.amd64.AVXKind#getRegisterSize(AMD64Kind)->AVXSize::: kind get register size
org.graalvm.compiler.asm.amd64.AVXKind#changeSize(AMD64Kind, AVXSize)->AMD64Kind::: kind change size
org.graalvm.compiler.asm.amd64.AVXKind#getAVXKind(AMD64Kind, AVXSize)->AMD64Kind::: kind get kind
org.graalvm.compiler.asm.amd64.AVXKind#getAVXKind(AMD64Kind, int)->AMD64Kind::: kind get kind

AMD64Assembler#cmpxchgb(Register, AMD64Address):::The 8-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,:::prefixb->emitByte->emitByte->emitOperandHelper
AMD64Assembler#cmpxchgw(Register, AMD64Address):::The 16-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,:::emitByte->prefix->emitByte->emitByte->emitOperandHelper
AMD64Assembler#cmpxchgl(Register, AMD64Address):::The 32-bit cmpxchg compares the value at adr with the contents of X86.rax, and stores reg into adr if so; otherwise, the value at adr is loaded into X86.rax,:::prefix->emitByte->emitByte->emitOperandHelper
AMD64Assembler#movlpd(Register, AMD64Address):::New CPUs require use of movsd and movss to avoid partial register stall when loading from memory:::simdPrefix->emitByte->emitOperandHelper
AMD64Assembler#call():::Emits a direct call instruction:::annotatePatchingImmediate->emitByte->emitInt
AMD64Assembler#illegal():::Emits an instruction which is considered to be illegal:::emitByte->emitByte
AMD64BaseAssembler#prefixq(Register, Register):::Creates prefix for the operands:::regEnc->rmEnc->if->if->emitByte->else->emitByte->else->if->emitByte->else->emitByte
AMD64BaseAssembler#getRXB(Register, Register):::Get RXB bits for register-register instruction:::rxb->return
AMD64BaseAssembler#getRXB(Register, AMD64Address):::Get RXB bits for register-memory instruction:::rxb->if->rm->getIndex->equals->rm->getIndex->if->rm->getBase->equals->rm->getBase->return
AMD64BaseAssembler#emitModRM(int, Register):::Emit the ModR/M byte for one register operand and an opcode extension in the R field:::emitByte
AMD64BaseAssembler#emitModRM(Register, Register):::Emit the ModR/M byte for two register operands:::emitModRM
AMD64BaseAssembler#emitOperandHelper(Register, AMD64Address, boolean, int):::Emits the ModR/M byte and optionally the SIB byte for one register and one memory operand.:::encode->emitOperandHelper
AMD64BaseAssembler#emitVEX(int, int, int, int, int, int, boolean):::Low-level function to encode and emit the VEX prefix:::rxb1s->vvvv1s->if->byte2->emitByte->emitByte->else->byte2->byte3->emitByte->emitByte->emitByte
AMD64BaseAssembler#evexPrefix(Register, Register, Register, Register, AVXSize, int, int, int, int, int):::Helper method for emitting EVEX prefix in the form of RRRR.:::getLFlag->getRXBForEVEX->nds->isValid->nds->encoding->mask->isValid->emitEVEX
AMD64BaseAssembler#evexPrefix(Register, Register, Register, AMD64Address, AVXSize, int, int, int, int, int):::Helper method for emitting EVEX prefix in the form of RRRM:::getLFlag->getRXB->nds->isValid->nds->encoding->mask->isValid->emitEVEX
AMD64MacroAssembler#movlong(AMD64Address, long):::Non-atomic write of a 64-bit constant to memory:::if->NumUtil->isInt->emit->else->high->dst->getBase->dst->getIndex->dst->getScale->dst->getDisplacement->new->AMD64Address->movl->movl

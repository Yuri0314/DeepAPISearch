BoolStack#size():::Get the length of the list.:::return
BoolStack#clear():::Clears the stack.:::
BoolStack#push(boolean):::Pushes an item onto the top of this stack.:::if->grow->return
BoolStack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::return
BoolStack#popAndTop():::Removes the object at the top of this stack and returns the next object at the top as the value of this function.:::return
BoolStack#setTop(boolean):::Set the item at the top of this stack:::
BoolStack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::return
BoolStack#peekOrFalse():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#peekOrTrue():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#isEmpty():::Tests if this stack is empty.:::return
BoolStack#grow():::Grows the size of the stack:::newVector->new->booleanArr->System->arraycopy
Messages#getLocale():::Get the Locale object that is being used.:::return
Messages#createMessage(String, Object[]):::Creates a message from the specified key and replacement arguments, localized to the given locale.:::if->SecuritySupport->getResourceBundle->if->return->createMsg->else->return
Messages#createMsg(ResourceBundle, String, Object[]):::Creates a message from the specified key and replacement arguments, localized to the given locale.:::fmsg->throwex->msg->if->fResourceBundle->getString->else->if->try->new->ObjectArr->format->catch->finally->else->if->try->n->for->i->format->catch->try->new->ObjectArr->format->catch->finally->finally->else->if->throw->new->RuntimeException->return
SerializerMessages#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
SerializerMessages_ja#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
SerializerMessages_zh_CN#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
StringToIntTable#getLength():::Get the length of the list.:::return
StringToIntTable#put(String, int):::Append a string onto the vector.:::if->newMap->new->StringArr->System->arraycopy->newValues->new->intArr->System->arraycopy
StringToIntTable#get(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#getIgnoreCase(String):::Tell if the table contains the given string:::if->return->for->i->return
StringToIntTable#contains(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#keys():::Return array of keys in the table.:::keysArr->new->StringArr->for->i->return
SystemIDResolver#getAbsoluteURIFromRelative(String):::Get an absolute URI from a given relative URI (local path):::if->localPath->length->return->absolutePath->if->isAbsolutePath->try->getAbsolutePathFromRelativePath->catch->return->finally->urlString->if->if->absolutePath->startsWith->else->else->return->replaceChars
SystemIDResolver#getAbsolutePathFromRelativePath(String):::Return an absolute path from a relative path.:::return->new->File->getAbsolutePath
SystemIDResolver#isAbsoluteURI(String):::Return true if the systemId denotes an absolute URI .:::if->isWindowsAbsolutePath->return->fragmentIndex->systemId->indexOf->queryIndex->systemId->indexOf->slashIndex->systemId->indexOf->colonIndex->systemId->indexOf->index->systemId->length->if->if->if->return
SystemIDResolver#isAbsolutePath(String):::Return true if the local path is an absolute path.:::if->return->file->new->File->return->file->isAbsolute
SystemIDResolver#isWindowsAbsolutePath(String):::Return true if the local path is a Windows absolute path.:::if->isAbsolutePath->return->if->systemId->length->systemId->charAt->Character->systemId->charAt->isLetter->systemId->charAt->systemId->charAt->return->else->return
SystemIDResolver#replaceChars(String):::Replace spaces with "%20" and backslashes with forward slashes in the input string to generate a well-formed URI string.:::buf->new->StringBuffer->length->buf->length->for->i->return->buf->toString
SystemIDResolver#getAbsoluteURI(String):::Take a SystemID string and try to turn it into a good absolute URI.:::absoluteURI->if->isAbsoluteURI->if->systemId->startsWith->str->systemId->substring->if->str->startsWith->if->str->startsWith->str->startsWith->secondColonIndex->systemId->indexOf->if->localPath->systemId->substring->try->if->isAbsolutePath->systemId->substring->getAbsolutePathFromRelativePath->catch->return->finally->else->return->systemId->substring->getAbsoluteURIFromRelative->return->replaceChars->else->return->else->return->getAbsoluteURIFromRelative
SystemIDResolver#getAbsoluteURI(String, String):::Take a SystemID string and try to turn it into a good absolute URI.:::if->return->getAbsoluteURI->absoluteBase->getAbsoluteURI->uri->try->baseURI->new->URI->new->URI->catch->throw->new->TransformerException->finally->return->uri->toString->replaceChars
URI#initialize(URI):::Initialize all fields of this URI from another URI.:::p_other->getScheme->p_other->getUserinfo->p_other->getHost->p_other->getPort->p_other->getPath->p_other->getQueryString->p_other->getFragment
URI#initialize(URI, String):::Initializes this URI from a base URI and a URI specification string:::if->p_uriSpec->trim->length->throw->createMessage->new->MalformedURIException->if->p_uriSpec->trim->length->initialize->return->uriSpec->p_uriSpec->trim->uriSpecLen->uriSpec->length->index->colonIndex->uriSpec->indexOf->if->if->throw->new->ObjectArr->createMessage->new->MalformedURIException->else->initializeScheme->uriSpec->substring->uriSpec->length->if->uriSpec->substring->startsWith->startPos->testChar->while->uriSpec->charAt->if->break->if->uriSpec->substring->initializeAuthority->else->uriSpec->substring->initializePath->if->if->m_path->length->p_base->getScheme->p_base->getUserinfo->p_base->getHost->p_base->getPort->p_base->getPath->if->p_base->getQueryString->return->if->p_base->getScheme->if->p_base->getUserinfo->p_base->getHost->p_base->getPort->else->return->if->m_path->length->m_path->startsWith->return->path->basePath->p_base->getPath->if->lastSlash->basePath->lastIndexOf->if->basePath->substring->path->concat->while->path->indexOf->path->substring->path->substring->concat->if->path->endsWith->path->path->length->substring->segIndex->tempString->while->path->indexOf->path->path->indexOf->substring->tempString->lastIndexOf->if->if->tempString->substring->equals->path->substring->path->substring->concat->if->path->endsWith->path->path->length->substring->tempString->lastIndexOf->if->path->substring
URI#initializeScheme(String):::Initialize the scheme for this URI from a URI string spec.:::uriSpecLen->p_uriSpec->length->index->scheme->testChar->while->p_uriSpec->charAt->if->break->p_uriSpec->substring->if->scheme->length->throw->createMessage->new->MalformedURIException->else->setScheme
URI#initializeAuthority(String):::Initialize the authority (userinfo, host and port) for this URI from a URI string spec.:::index->start->end->p_uriSpec->length->testChar->userinfo->if->p_uriSpec->indexOf->while->p_uriSpec->charAt->if->break->p_uriSpec->substring->host->while->p_uriSpec->charAt->if->break->p_uriSpec->substring->port->if->host->length->if->while->portStr->p_uriSpec->substring->if->portStr->length->for->i->portStr->length->try->Integer->parseInt->catch->finally->setHost->setPort->setUserinfo
URI#initializePath(String):::Initialize the path for this URI from a URI string spec.:::if->throw->new->MalformedURIException->index->start->end->p_uriSpec->length->testChar->while->p_uriSpec->charAt->if->break->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->createMessage->new->MalformedURIException->else->if->isReservedCharacter->isUnreservedCharacter->if->throw->new->ObjectArr->String->valueOf->createMessage->new->MalformedURIException->p_uriSpec->substring->if->while->p_uriSpec->charAt->if->break->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isReservedCharacter->isUnreservedCharacter->throw->new->MalformedURIException->p_uriSpec->substring->if->while->p_uriSpec->charAt->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isReservedCharacter->isUnreservedCharacter->throw->new->MalformedURIException->p_uriSpec->substring
URI#getScheme():::Get the scheme for this URI.:::return
URI#getSchemeSpecificPart():::Get the scheme-specific part for this URI (everything following the scheme and the first colon):::schemespec->new->StringBuilder->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->return->schemespec->toString
URI#getUserinfo():::Get the userinfo for this URI.:::return
URI#getHost():::Get the host for this URI.:::return
URI#getPort():::Get the port for this URI.:::return
URI#getPath(boolean, boolean):::Get the path for this URI (optionally with the query string and fragment).:::pathString->new->StringBuilder->if->pathString->append->pathString->append->if->pathString->append->pathString->append->return->pathString->toString
URI#getPath():::Get the path for this URI:::return
URI#getQueryString():::Get the query string for this URI.:::return
URI#getFragment():::Get the fragment for this URI.:::return
URI#setScheme(String):::Set the scheme for this URI:::if->throw->createMessage->new->MalformedURIException->if->isConformantSchemeName->throw->createMessage->new->MalformedURIException->p_scheme->toLowerCase
URI#setUserinfo(String):::Set the userinfo for this URI:::if->else->if->throw->new->MalformedURIException->index->end->p_userinfo->length->testChar->while->p_userinfo->charAt->if->if->p_userinfo->charAt->isHex->p_userinfo->charAt->isHex->throw->new->MalformedURIException->else->if->isUnreservedCharacter->USERINFO_CHARACTERS->indexOf->throw->new->MalformedURIException
URI#setHost(String):::Set the host for this URI:::if->p_host->trim->length->else->if->isWellFormedAddress->throw->createMessage->new->MalformedURIException
URI#setPort(int):::Set the port for this URI:::if->if->throw->createMessage->new->MalformedURIException->else->if->throw->createMessage->new->MalformedURIException
URI#setPath(String):::Set the path for this URI:::if->else->initializePath
URI#appendPath(String):::Append to the end of the path of this URI:::if->p_addToPath->trim->length->return->if->isURIString->throw->new->ObjectArr->createMessage->new->MalformedURIException->if->m_path->trim->length->if->p_addToPath->startsWith->else->else->if->m_path->endsWith->if->p_addToPath->startsWith->m_path->p_addToPath->substring->concat->else->m_path->concat->else->if->p_addToPath->startsWith->m_path->concat->else->m_path->concat
URI#setQueryString(String):::Set the query string for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#setFragment(String):::Set the fragment for this URI:::if->else->if->isGenericURI->throw->createMessage->new->MalformedURIException->else->if->getPath->throw->createMessage->new->MalformedURIException->else->if->isURIString->throw->createMessage->new->MalformedURIException->else
URI#equals(Object):::Determines if the passed-in Object is equivalent to this URI.:::if->testURI->if->m_scheme->equals->m_userinfo->equals->m_host->equals->m_path->equals->m_queryString->equals->m_fragment->equals->return->return
URI#hashCode()::: i hash code:::hash->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->return
URI#toString():::Get the URI as a string specification:::uriSpecString->new->StringBuilder->if->uriSpecString->append->uriSpecString->append->uriSpecString->getSchemeSpecificPart->append->return->uriSpecString->toString
URI#isGenericURI():::Get the indicator as to whether this URI uses the "generic URI" syntax.:::return
URI#isConformantSchemeName(String):::Determine whether a scheme conforms to the rules for a scheme name:::if->p_scheme->trim->length->return->if->p_scheme->charAt->isAlpha->return->testChar->for->i->p_scheme->length->return
URI#isWellFormedAddress(String):::Determine whether a string is syntactically capable of representing a valid IPv4 address or the domain name of a network host:::if->return->address->p_address->trim->addrLength->address->length->if->return->if->address->startsWith->address->startsWith->return->index->address->lastIndexOf->if->address->endsWith->address->substring->lastIndexOf->if->p_address->charAt->isDigit->testChar->numDots->for->i->if->return->else->testChar->for->i->return
URI#isDigit(char):::Determine whether a char is a digit.:::return
URI#isHex(char):::Determine whether a character is a hexadecimal character.:::return->isDigit
URI#isAlpha(char):::Determine whether a char is an alphabetic character: a-z or A-Z:::return
URI#isAlphanum(char):::Determine whether a char is an alphanumeric: 0-9, a-z or A-Z:::return->isAlpha->isDigit
URI#isReservedCharacter(char):::Determine whether a character is a reserved character: ';', '/', '?', ':', '@', '&', '=', '+', '$' or ',':::return->RESERVED_CHARACTERS->indexOf
URI#isUnreservedCharacter(char):::Determine whether a char is an unreserved character.:::return->isAlphanum->MARK_CHARACTERS->indexOf
URI#isURIString(String):::Determine whether a given string contains only URI characters (also called "uric" in RFC 2396):::if->return->end->p_uric->length->testChar->for->i->return
WrappedRuntimeException#getException():::Get the checked exception that this runtime exception wraps.:::return

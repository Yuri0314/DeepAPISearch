BoolStack#size():::Get the length of the list.:::return
BoolStack#clear():::Clears the stack.:::
BoolStack#push(boolean):::Pushes an item onto the top of this stack.:::if->grow->return
BoolStack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::return
BoolStack#popAndTop():::Removes the object at the top of this stack and returns the next object at the top as the value of this function.:::return
BoolStack#setTop(boolean):::Set the item at the top of this stack:::
BoolStack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::return
BoolStack#peekOrFalse():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#peekOrTrue():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#isEmpty():::Tests if this stack is empty.:::return
Messages#createMessage(String, Object[]):::Creates a message from the specified key and replacement arguments, localized to the given locale.:::if->SecuritySupport->getResourceBundle->if->return->createMsg->else->return
SerializerMessages#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
SerializerMessages_ja#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
SerializerMessages_zh_CN#getContents():::The lookup table for error messages.:::contents->new->ObjectArrs->return
StringToIntTable#getLength():::Get the length of the list.:::return
StringToIntTable#put(String, int):::Append a string onto the vector.:::if->newMap->new->StringArr->System->arraycopy->newValues->new->intArr->System->arraycopy
StringToIntTable#get(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#getIgnoreCase(String):::Tell if the table contains the given string:::if->return->for->i->return
StringToIntTable#contains(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#keys():::Return array of keys in the table.:::keysArr->new->StringArr->for->i->return
SystemIDResolver#getAbsoluteURIFromRelative(String):::Get an absolute URI from a given relative URI (local path):::if->localPath->length->return->absolutePath->if->isAbsolutePath->try->getAbsolutePathFromRelativePath->catch->return->finally->urlString->if->if->absolutePath->startsWith->else->else->return->replaceChars
SystemIDResolver#isAbsoluteURI(String):::Return true if the systemId denotes an absolute URI .:::if->isWindowsAbsolutePath->return->fragmentIndex->systemId->indexOf->queryIndex->systemId->indexOf->slashIndex->systemId->indexOf->colonIndex->systemId->indexOf->index->systemId->length->if->if->if->return
SystemIDResolver#isAbsolutePath(String):::Return true if the local path is an absolute path.:::if->return->file->new->File->return->file->isAbsolute
SystemIDResolver#getAbsoluteURI(String):::Take a SystemID string and try to turn it into a good absolute URI.:::absoluteURI->if->isAbsoluteURI->if->systemId->startsWith->str->systemId->substring->if->str->startsWith->if->str->startsWith->str->startsWith->secondColonIndex->systemId->indexOf->if->localPath->systemId->substring->try->if->isAbsolutePath->systemId->substring->getAbsolutePathFromRelativePath->catch->return->finally->else->return->systemId->substring->getAbsoluteURIFromRelative->return->replaceChars->else->return->else->return->getAbsoluteURIFromRelative
SystemIDResolver#getAbsoluteURI(String, String):::Take a SystemID string and try to turn it into a good absolute URI.:::if->return->getAbsoluteURI->absoluteBase->getAbsoluteURI->uri->try->baseURI->new->URI->new->URI->catch->throw->new->TransformerException->finally->return->uri->toString->replaceChars
URI#getScheme():::Get the scheme for this URI.:::return
URI#getSchemeSpecificPart():::Get the scheme-specific part for this URI (everything following the scheme and the first colon):::schemespec->new->StringBuilder->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->return->schemespec->toString
URI#getUserinfo():::Get the userinfo for this URI.:::return
URI#getHost():::Get the host for this URI.:::return
URI#getPort():::Get the port for this URI.:::return
URI#getPath(boolean, boolean):::Get the path for this URI (optionally with the query string and fragment).:::pathString->new->StringBuilder->if->pathString->append->pathString->append->if->pathString->append->pathString->append->return->pathString->toString
URI#getPath():::Get the path for this URI:::return
URI#getQueryString():::Get the query string for this URI.:::return
URI#getFragment():::Get the fragment for this URI.:::return
URI#setScheme(String):::Set the scheme for this URI:::if->throw->createMessage->new->MalformedURIException->if->isConformantSchemeName->throw->createMessage->new->MalformedURIException->p_scheme->toLowerCase
URI#setUserinfo(String):::Set the userinfo for this URI:::if->else->if->throw->new->MalformedURIException->index->end->p_userinfo->length->testChar->while->p_userinfo->charAt->if->if->p_userinfo->charAt->isHex->p_userinfo->charAt->isHex->throw->new->MalformedURIException->else->if->isUnreservedCharacter->USERINFO_CHARACTERS->indexOf->throw->new->MalformedURIException
URI#setHost(String):::Set the host for this URI:::if->p_host->trim->length->else->if->isWellFormedAddress->throw->createMessage->new->MalformedURIException
URI#setPort(int):::Set the port for this URI:::if->if->throw->createMessage->new->MalformedURIException->else->if->throw->createMessage->new->MalformedURIException
URI#setPath(String):::Set the path for this URI:::if->else->initializePath
URI#appendPath(String):::Append to the end of the path of this URI:::if->p_addToPath->trim->length->return->if->isURIString->throw->new->ObjectArr->createMessage->new->MalformedURIException->if->m_path->trim->length->if->p_addToPath->startsWith->else->else->if->m_path->endsWith->if->p_addToPath->startsWith->m_path->p_addToPath->substring->concat->else->m_path->concat->else->if->p_addToPath->startsWith->m_path->concat->else->m_path->concat
URI#setQueryString(String):::Set the query string for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#setFragment(String):::Set the fragment for this URI:::if->else->if->isGenericURI->throw->createMessage->new->MalformedURIException->else->if->getPath->throw->createMessage->new->MalformedURIException->else->if->isURIString->throw->createMessage->new->MalformedURIException->else
URI#equals(Object):::Determines if the passed-in Object is equivalent to this URI.:::if->testURI->if->m_scheme->equals->m_userinfo->equals->m_host->equals->m_path->equals->m_queryString->equals->m_fragment->equals->return->return
URI#toString():::Get the URI as a string specification:::uriSpecString->new->StringBuilder->if->uriSpecString->append->uriSpecString->append->uriSpecString->getSchemeSpecificPart->append->return->uriSpecString->toString
URI#isGenericURI():::Get the indicator as to whether this URI uses the "generic URI" syntax.:::return
URI#isConformantSchemeName(String):::Determine whether a scheme conforms to the rules for a scheme name:::if->p_scheme->trim->length->return->if->p_scheme->charAt->isAlpha->return->testChar->for->i->p_scheme->length->return
URI#isWellFormedAddress(String):::Determine whether a string is syntactically capable of representing a valid IPv4 address or the domain name of a network host:::if->return->address->p_address->trim->addrLength->address->length->if->return->if->address->startsWith->address->startsWith->return->index->address->lastIndexOf->if->address->endsWith->address->substring->lastIndexOf->if->p_address->charAt->isDigit->testChar->numDots->for->i->if->return->else->testChar->for->i->return
WrappedRuntimeException#getException():::Get the checked exception that this runtime exception wraps.:::return

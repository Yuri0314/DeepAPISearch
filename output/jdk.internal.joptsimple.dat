jdk.internal.joptsimple.AbstractOptionSpec#options()->List::: abstract option spec options
jdk.internal.joptsimple.AbstractOptionSpec#values(OptionSet)->List::: abstract option spec values
jdk.internal.joptsimple.AbstractOptionSpec#value(OptionSet)->V::: abstract option spec value
jdk.internal.joptsimple.AbstractOptionSpec#description()->String::: abstract option spec description
jdk.internal.joptsimple.AbstractOptionSpec#forHelp()->AbstractOptionSpec::: abstract option spec for help
jdk.internal.joptsimple.AbstractOptionSpec#isForHelp()->boolean::: abstract option spec is for help
jdk.internal.joptsimple.AbstractOptionSpec#representsNonOptions()->boolean::: abstract option spec represents non options
jdk.internal.joptsimple.AbstractOptionSpec#convert(String)->V::: abstract option spec convert
jdk.internal.joptsimple.AbstractOptionSpec#convertWith(ValueConverter, String)->V::: abstract option spec convert with
jdk.internal.joptsimple.AbstractOptionSpec#argumentTypeIndicatorFrom(ValueConverter)->String::: abstract option spec argument type indicator from
jdk.internal.joptsimple.AbstractOptionSpec#handleOption(OptionParser, ArgumentList, OptionSet, String)->void::: abstract option spec handle option
jdk.internal.joptsimple.AbstractOptionSpec#equals(Object)->boolean::: abstract option spec equals
jdk.internal.joptsimple.AbstractOptionSpec#hashCode()->int::: abstract option spec hash code
jdk.internal.joptsimple.AbstractOptionSpec#toString()->String::: abstract option spec to string
jdk.internal.joptsimple.AlternativeLongOptionSpec#detectOptionArgument(OptionParser, ArgumentList, OptionSet)->void::: alternative long option spec detect option argument
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#ofType(Class)->ArgumentAcceptingOptionSpec:::Specifies a type to which arguments of this spec's option are to be converted.  JOpt Simple accepts types that have either:  <ol>   <li>a public static method called valueOf which accepts a single argument of type String   and whose return type is the same as the class on which the method is declared
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#withValuesConvertedBy(ValueConverter)->ArgumentAcceptingOptionSpec:::Specifies a converter to use to translate arguments of this spec's option into Java objects
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#describedAs(String)->ArgumentAcceptingOptionSpec:::Specifies a description for the argument of the option that this spec represents
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#withValuesSeparatedBy(char)->ArgumentAcceptingOptionSpec:::Specifies a value separator for the argument of the option that this spec represents
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#withValuesSeparatedBy(String)->ArgumentAcceptingOptionSpec:::Specifies a value separator for the argument of the option that this spec represents
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#defaultsTo(V, V...)->ArgumentAcceptingOptionSpec:::Specifies a set of default values for the argument of the option that this spec represents.
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#defaultsTo(V[])->ArgumentAcceptingOptionSpec:::Specifies a set of default values for the argument of the option that this spec represents.
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#required()->ArgumentAcceptingOptionSpec:::Marks this option as required
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#isRequired()->boolean::: argument accepting option spec is required
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#handleOption(OptionParser, ArgumentList, OptionSet, String)->void::: argument accepting option spec handle option
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#addArguments(OptionSet, String)->void::: argument accepting option spec add arguments
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#detectOptionArgument(OptionParser, ArgumentList, OptionSet)->void::: argument accepting option spec detect option argument
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#convert(String)->V::: argument accepting option spec convert
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#canConvertArgument(String)->boolean::: argument accepting option spec can convert argument
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#isArgumentOfNumberType()->boolean::: argument accepting option spec is argument of number type
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#acceptsArguments()->boolean::: argument accepting option spec accepts arguments
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#requiresArgument()->boolean::: argument accepting option spec requires argument
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#argumentDescription()->String::: argument accepting option spec argument description
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#argumentTypeIndicator()->String::: argument accepting option spec argument type indicator
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#defaultValues()->List::: argument accepting option spec default values
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#equals(Object)->boolean::: argument accepting option spec equals
jdk.internal.joptsimple.ArgumentAcceptingOptionSpec#hashCode()->int::: argument accepting option spec hash code
jdk.internal.joptsimple.ArgumentList#hasMore()->boolean::: argument list has more
jdk.internal.joptsimple.ArgumentList#next()->String::: argument list next
jdk.internal.joptsimple.ArgumentList#peek()->String::: argument list peek
jdk.internal.joptsimple.ArgumentList#treatNextAsLongOption()->void::: argument list treat next as long option
jdk.internal.joptsimple.BuiltinHelpFormatter#format(Map)->String:::This implementation: <ul>     <li>Sorts the given descriptors by their first elements of {@link OptionDescriptor#options()</li>     <li>Passes the resulting sorted set to #addRows(java.util.Collection)</li>     <li>Returns the result of #formattedHelpOutput()</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#addOptionRow(String)->void:::Adds a row of option help output in the left column, with empty space in the right column.
jdk.internal.joptsimple.BuiltinHelpFormatter#addOptionRow(String, String)->void:::Adds a row of option help output in the left and right columns.
jdk.internal.joptsimple.BuiltinHelpFormatter#addNonOptionRow(String)->void:::Adds a single row of non-option argument help.
jdk.internal.joptsimple.BuiltinHelpFormatter#fitRowsToWidth()->void:::Resizes the columns of all the rows to be no wider than the widest element in that column.
jdk.internal.joptsimple.BuiltinHelpFormatter#nonOptionOutput()->String:::Produces non-option argument help.
jdk.internal.joptsimple.BuiltinHelpFormatter#optionOutput()->String:::Produces help for options and their descriptions.
jdk.internal.joptsimple.BuiltinHelpFormatter#formattedHelpOutput()->String:::Produces help output for an entire set of options and non-option arguments.  This implementation concatenates: <ul>     <li>the result of #nonOptionOutput()</li>     <li>if there is non-option output, a line separator</li>     <li>the result of #optionOutput()</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#addRows(Collection)->void:::Adds rows of help output for the given options.  This implementation: <ul>     <li>Calls #addNonOptionsDescription(java.util.Collection) with the options as the argument</li>         <li>If there are no options, calls #addOptionRow(String) with an argument that indicates         that no options are specified.</li>         <li>Otherwise, calls #addHeaders(java.util.Collection) with the options as the argument,         followed by #addOptions(java.util.Collection) with the options as the argument.</li>     <li>Calls #fitRowsToWidth().</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#addNonOptionsDescription(Collection)->void:::Adds non-option arguments descriptions to the help output.  This implementation: <ul>     <li>#findAndRemoveNonOptionsSpec(java.util.Collection) Finds and removes the non-option     arguments descriptor</li>     <li>#shouldShowNonOptionArgumentDisplay(OptionDescriptor) Decides whether there is     anything to show for non-option arguments</li>     <li>If there is, #addNonOptionRow(String) adds a header row and     #addNonOptionRow(String) adds a     #createNonOptionArgumentsDisplay(OptionDescriptor) non-option arguments description </li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#shouldShowNonOptionArgumentDisplay(OptionDescriptor)->boolean:::Decides whether or not to show a non-option arguments help.  This implementation responds with true if the non-option descriptor has a non-null, non-empty value for any of OptionDescriptor#description(), OptionDescriptor#argumentTypeIndicator(), or OptionDescriptor#argumentDescription().
jdk.internal.joptsimple.BuiltinHelpFormatter#createNonOptionArgumentsDisplay(OptionDescriptor)->String:::Creates a non-options argument help string.  This implementation creates an empty string buffer and calls #maybeAppendOptionInfo(StringBuilder, OptionDescriptor) and #maybeAppendNonOptionsDescription(StringBuilder, OptionDescriptor), passing them the buffer and the non-option arguments descriptor.
jdk.internal.joptsimple.BuiltinHelpFormatter#maybeAppendNonOptionsDescription(StringBuilder, OptionDescriptor)->void:::Appends help for the given non-option arguments descriptor to the given buffer.  This implementation appends " -- " if the buffer has text in it and the non-option arguments descriptor has a OptionDescriptor#description(); followed by the OptionDescriptor#description().
jdk.internal.joptsimple.BuiltinHelpFormatter#findAndRemoveNonOptionsSpec(Collection)->OptionDescriptor:::Finds the non-option arguments descriptor in the given collection, removes it, and returns it.
jdk.internal.joptsimple.BuiltinHelpFormatter#addHeaders(Collection)->void:::Adds help row headers for option help columns.  This implementation uses the headers "Option" and "Description"
jdk.internal.joptsimple.BuiltinHelpFormatter#hasRequiredOption(Collection)->boolean:::Tells whether the given option descriptors contain a "required" option.
jdk.internal.joptsimple.BuiltinHelpFormatter#addOptions(Collection)->void:::Adds help rows for the given options.  This implementation loops over the given options, and for each, calls #addOptionRow(String, String) using the results of #createOptionDisplay(OptionDescriptor) and #createDescriptionDisplay(OptionDescriptor), respectively, as arguments.
jdk.internal.joptsimple.BuiltinHelpFormatter#createOptionDisplay(OptionDescriptor)->String:::Creates a string for how the given option descriptor is to be represented in help.  This implementation gives a string consisting of the concatenation of: <ul>     <li>"* " for "required" options, otherwise ""</li>     <li>For each of the OptionDescriptor#options() of the descriptor, separated by ", ":         <ul>             <li>#optionLeader(String) of the option</li>             <li>the option</li>         </ul>     </li>     <li>the result of #maybeAppendOptionInfo(StringBuilder, OptionDescriptor)</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#optionLeader(String)->String:::Gives a string that represents the given option's "option leader" in help.  This implementation answers with "--" for options of length greater than one; otherwise answers with "-".
jdk.internal.joptsimple.BuiltinHelpFormatter#maybeAppendOptionInfo(StringBuilder, OptionDescriptor)->void:::Appends additional info about the given option to the given buffer.  This implementation: <ul>     <li>calls #extractTypeIndicator(OptionDescriptor) for the descriptor</li>     <li>calls jdk.internal.joptsimple.OptionDescriptor#argumentDescription() for the descriptor</li>     <li>if either of the above is present, calls     #appendOptionHelp(StringBuilder, String, String, boolean)</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#extractTypeIndicator(OptionDescriptor)->String:::Gives an indicator of the type of arguments of the option described by the given descriptor, for use in help.  This implementation asks for the OptionDescriptor#argumentTypeIndicator() of the given descriptor, and if it is present and not "java.lang.String", parses it as a fully qualified class name and returns the base name of that class; otherwise returns "String".
jdk.internal.joptsimple.BuiltinHelpFormatter#appendOptionHelp(StringBuilder, String, String, boolean)->void:::Appends info about an option's argument to the given buffer.  This implementation calls #appendTypeIndicator(StringBuilder, String, String, char, char) with the surrounding characters '<' and '>' for options with required arguments, and with the surrounding characters '[' and ']' for options with optional arguments.
jdk.internal.joptsimple.BuiltinHelpFormatter#appendTypeIndicator(StringBuilder, String, String, char, char)->void:::Appends a type indicator for an option's argument to the given buffer.  This implementation appends, in order: <ul>     <li>' '</li>     <li>start</li>     <li>the type indicator, if not null</li>     <li>if the description is present, then ": " plus the description if the type indicator is     present; otherwise the description only</li>     <li>end</li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#createDescriptionDisplay(OptionDescriptor)->String:::Gives a string representing a description of the option with the given descriptor.  This implementation: <ul>     <li>Asks for the descriptor's OptionDescriptor#defaultValues()</li>     <li>If they're not present, answers the descriptor's OptionDescriptor#description().</li>     <li>If they are present, concatenates and returns:         <ul>             <li>the descriptor's OptionDescriptor#description()</li>             <li>' '</li>             <li>"default: " plus the result of #createDefaultValuesDisplay(java.util.List),             surrounded by parentheses</li>         </ul>     </li> </ul>
jdk.internal.joptsimple.BuiltinHelpFormatter#createDefaultValuesDisplay(List)->String:::Gives a display string for the default values of an option's argument.  This implementation gives the Object#toString() of the first value if there is only one value, otherwise gives the Object#toString() of the whole list.
jdk.internal.joptsimple.BuiltinHelpFormatter#message(String, Object...)->String:::Looks up and gives a resource bundle message.  This implementation looks in the bundle "jdk.internal.joptsimple.HelpFormatterMessages" in the default locale, using a key that is the concatenation of this class's fully qualified name, '.', and the given key suffix, formats the corresponding value using the given arguments, and returns the result.
jdk.internal.joptsimple.HelpFormatter#format(Map)->String:::Produces help text, given a set of option descriptors.
jdk.internal.joptsimple.IllegalOptionSpecificationException#messageArguments()->Object[]::: illegal option specification exception message arguments
jdk.internal.joptsimple.MissingRequiredOptionsException#messageArguments()->Object[]::: missing required options exception message arguments
jdk.internal.joptsimple.MultipleArgumentsForOptionException#messageArguments()->Object[]::: multiple arguments for option exception message arguments
jdk.internal.joptsimple.NoArgumentOptionSpec#handleOption(OptionParser, ArgumentList, OptionSet, String)->void::: no argument option spec handle option
jdk.internal.joptsimple.NoArgumentOptionSpec#acceptsArguments()->boolean::: no argument option spec accepts arguments
jdk.internal.joptsimple.NoArgumentOptionSpec#requiresArgument()->boolean::: no argument option spec requires argument
jdk.internal.joptsimple.NoArgumentOptionSpec#isRequired()->boolean::: no argument option spec is required
jdk.internal.joptsimple.NoArgumentOptionSpec#argumentDescription()->String::: no argument option spec argument description
jdk.internal.joptsimple.NoArgumentOptionSpec#argumentTypeIndicator()->String::: no argument option spec argument type indicator
jdk.internal.joptsimple.NoArgumentOptionSpec#convert(String)->Void::: no argument option spec convert
jdk.internal.joptsimple.NoArgumentOptionSpec#defaultValues()->List::: no argument option spec default values
jdk.internal.joptsimple.NonOptionArgumentSpec#ofType(Class)->NonOptionArgumentSpec:::Specifies a type to which the non-option arguments are to be converted.  JOpt Simple accepts types that have either:  <ol>   <li>a public static method called valueOf which accepts a single argument of type String   and whose return type is the same as the class on which the method is declared
jdk.internal.joptsimple.NonOptionArgumentSpec#withValuesConvertedBy(ValueConverter)->NonOptionArgumentSpec:::Specifies a converter to use to translate non-option arguments into Java objects
jdk.internal.joptsimple.NonOptionArgumentSpec#describedAs(String)->NonOptionArgumentSpec:::Specifies a description for the non-option arguments that this spec represents
jdk.internal.joptsimple.NonOptionArgumentSpec#convert(String)->V::: non option argument spec convert
jdk.internal.joptsimple.NonOptionArgumentSpec#handleOption(OptionParser, ArgumentList, OptionSet, String)->void::: non option argument spec handle option
jdk.internal.joptsimple.NonOptionArgumentSpec#defaultValues()->List::: non option argument spec default values
jdk.internal.joptsimple.NonOptionArgumentSpec#isRequired()->boolean::: non option argument spec is required
jdk.internal.joptsimple.NonOptionArgumentSpec#acceptsArguments()->boolean::: non option argument spec accepts arguments
jdk.internal.joptsimple.NonOptionArgumentSpec#requiresArgument()->boolean::: non option argument spec requires argument
jdk.internal.joptsimple.NonOptionArgumentSpec#argumentDescription()->String::: non option argument spec argument description
jdk.internal.joptsimple.NonOptionArgumentSpec#argumentTypeIndicator()->String::: non option argument spec argument type indicator
jdk.internal.joptsimple.NonOptionArgumentSpec#representsNonOptions()->boolean::: non option argument spec represents non options
jdk.internal.joptsimple.OptionalArgumentOptionSpec#detectOptionArgument(OptionParser, ArgumentList, OptionSet)->void::: optional argument option spec detect option argument
jdk.internal.joptsimple.OptionArgumentConversionException#messageArguments()->Object[]::: option argument conversion exception message arguments
jdk.internal.joptsimple.OptionDeclarer#accepts(String)->OptionSpecBuilder:::Tells the parser to recognize the given option
jdk.internal.joptsimple.OptionDeclarer#accepts(String, String)->OptionSpecBuilder:::Tells the parser to recognize the given option.
jdk.internal.joptsimple.OptionDeclarer#acceptsAll(List)->OptionSpecBuilder:::Tells the parser to recognize the given options, and treat them as synonymous.
jdk.internal.joptsimple.OptionDeclarer#acceptsAll(List, String)->OptionSpecBuilder:::Tells the parser to recognize the given options, and treat them as synonymous.
jdk.internal.joptsimple.OptionDeclarer#nonOptions()->NonOptionArgumentSpec:::Gives an object that represents an access point for non-option arguments on a command line.
jdk.internal.joptsimple.OptionDeclarer#nonOptions(String)->NonOptionArgumentSpec:::Gives an object that represents an access point for non-option arguments on a command line.
jdk.internal.joptsimple.OptionDeclarer#posixlyCorrect(boolean)->void:::Tells the parser whether or not to behave "POSIX-ly correct"-ly.
jdk.internal.joptsimple.OptionDeclarer#allowsUnrecognizedOptions()->void:::Tells the parser to treat unrecognized options as non-option arguments.  If not called, then the parser raises an OptionException when it encounters an unrecognized option.
jdk.internal.joptsimple.OptionDeclarer#recognizeAlternativeLongOptions(boolean)->void:::Tells the parser either to recognize or ignore -W-style long options.
jdk.internal.joptsimple.OptionDescriptor#options()->List:::A set of options that are mutually synonymous.
jdk.internal.joptsimple.OptionDescriptor#description()->String:::Description of this option's purpose.
jdk.internal.joptsimple.OptionDescriptor#defaultValues()->List:::What values will the option take if none are specified on the command line?
jdk.internal.joptsimple.OptionDescriptor#isRequired()->boolean:::Is this option ArgumentAcceptingOptionSpec#required() required on a command line?
jdk.internal.joptsimple.OptionDescriptor#acceptsArguments()->boolean:::Does this option ArgumentAcceptingOptionSpec accept arguments?
jdk.internal.joptsimple.OptionDescriptor#requiresArgument()->boolean:::Does this option OptionSpecBuilder#withRequiredArg() require an argument?
jdk.internal.joptsimple.OptionDescriptor#argumentDescription()->String:::Gives a short ArgumentAcceptingOptionSpec#describedAs(String) description of the option's argument.
jdk.internal.joptsimple.OptionDescriptor#argumentTypeIndicator()->String:::Gives an indication of the ArgumentAcceptingOptionSpec#ofType(Class) expected type of the option's argument.
jdk.internal.joptsimple.OptionDescriptor#representsNonOptions()->boolean:::Tells whether this object represents the non-option arguments of a command line.
jdk.internal.joptsimple.OptionException#options()->List:::Gives the option being considered when the exception was created.
jdk.internal.joptsimple.OptionException#singleOptionString()->String::: option exception single option string
jdk.internal.joptsimple.OptionException#singleOptionString(String)->String::: option exception single option string
jdk.internal.joptsimple.OptionException#multipleOptionString()->String::: option exception multiple option string
jdk.internal.joptsimple.OptionException#unrecognizedOption(String)->OptionException::: option exception unrecognized option
jdk.internal.joptsimple.OptionException#getMessage()->String::: option exception get message
jdk.internal.joptsimple.OptionException#localizedMessage(Locale)->String::: option exception localized message
jdk.internal.joptsimple.OptionException#messageArguments()->Object[]::: option exception message arguments
jdk.internal.joptsimple.OptionMissingRequiredArgumentException#messageArguments()->Object[]::: option missing required argument exception message arguments
jdk.internal.joptsimple.OptionParser#accepts(String)->OptionSpecBuilder::: option parser accepts
jdk.internal.joptsimple.OptionParser#accepts(String, String)->OptionSpecBuilder::: option parser accepts
jdk.internal.joptsimple.OptionParser#acceptsAll(List)->OptionSpecBuilder::: option parser accepts all
jdk.internal.joptsimple.OptionParser#acceptsAll(List, String)->OptionSpecBuilder::: option parser accepts all
jdk.internal.joptsimple.OptionParser#nonOptions()->NonOptionArgumentSpec::: option parser non options
jdk.internal.joptsimple.OptionParser#nonOptions(String)->NonOptionArgumentSpec::: option parser non options
jdk.internal.joptsimple.OptionParser#posixlyCorrect(boolean)->void::: option parser posixly correct
jdk.internal.joptsimple.OptionParser#posixlyCorrect()->boolean::: option parser posixly correct
jdk.internal.joptsimple.OptionParser#allowsUnrecognizedOptions()->void::: option parser allows unrecognized options
jdk.internal.joptsimple.OptionParser#doesAllowsUnrecognizedOptions()->boolean::: option parser does allows unrecognized options
jdk.internal.joptsimple.OptionParser#recognizeAlternativeLongOptions(boolean)->void::: option parser recognize alternative long options
jdk.internal.joptsimple.OptionParser#recognize(AbstractOptionSpec)->void::: option parser recognize
jdk.internal.joptsimple.OptionParser#printHelpOn(OutputStream)->void:::Writes information about the options this parser recognizes to the given output sink
jdk.internal.joptsimple.OptionParser#printHelpOn(Writer)->void:::Writes information about the options this parser recognizes to the given output sink
jdk.internal.joptsimple.OptionParser#formatHelpWith(HelpFormatter)->void:::Tells the parser to use the given formatter when asked to #printHelpOn(java.io.Writer) print help.
jdk.internal.joptsimple.OptionParser#recognizedOptions()->Map>:::Retrieves all options-spec pairings which have been configured for the parser in the same order as declared during training
jdk.internal.joptsimple.OptionParser#parse(String...)->OptionSet:::Parses the given command line arguments according to the option specifications given to the parser.
jdk.internal.joptsimple.OptionParser#mutuallyExclusive(OptionSpecBuilder...)->void:::Mandates mutual exclusiveness for the options built by the specified builders.
jdk.internal.joptsimple.OptionParser#handleLongOptionToken(String, ArgumentList, OptionSet)->void::: option parser handle long option token
jdk.internal.joptsimple.OptionParser#handleShortOptionToken(String, ArgumentList, OptionSet)->void::: option parser handle short option token
jdk.internal.joptsimple.OptionParser#handleNonOptionArgument(String, ArgumentList, OptionSet)->void::: option parser handle non option argument
jdk.internal.joptsimple.OptionParser#noMoreOptions()->void::: option parser no more options
jdk.internal.joptsimple.OptionParser#looksLikeAnOption(String)->boolean::: option parser looks like an option
jdk.internal.joptsimple.OptionParser#isRecognized(String)->boolean::: option parser is recognized
jdk.internal.joptsimple.OptionParser#requiredIf(List, String)->void::: option parser required if
jdk.internal.joptsimple.OptionParser#requiredIf(List, OptionSpec)->void::: option parser required if
jdk.internal.joptsimple.OptionParser#requiredUnless(List, String)->void::: option parser required unless
jdk.internal.joptsimple.OptionParser#requiredUnless(List, OptionSpec)->void::: option parser required unless
jdk.internal.joptsimple.OptionParser#availableIf(List, String)->void::: option parser available if
jdk.internal.joptsimple.OptionParser#availableIf(List, OptionSpec)->void::: option parser available if
jdk.internal.joptsimple.OptionParser#availableUnless(List, String)->void::: option parser available unless
jdk.internal.joptsimple.OptionParser#availableUnless(List, OptionSpec)->void::: option parser available unless
jdk.internal.joptsimple.OptionParserState#noMoreOptions()->OptionParserState::: option parser state no more options
jdk.internal.joptsimple.OptionParserState#moreOptions(boolean)->OptionParserState::: option parser state more options
jdk.internal.joptsimple.OptionParserState#handleArgument(OptionParser, ArgumentList, OptionSet)->void::: option parser state handle argument
jdk.internal.joptsimple.OptionSet#hasOptions()->boolean:::Tells whether any options were detected.
jdk.internal.joptsimple.OptionSet#has(String)->boolean:::Tells whether the given option was detected.
jdk.internal.joptsimple.OptionSet#has(OptionSpec)->boolean:::Tells whether the given option was detected
jdk.internal.joptsimple.OptionSet#hasArgument(String)->boolean:::Tells whether there are any arguments associated with the given option.
jdk.internal.joptsimple.OptionSet#hasArgument(OptionSpec)->boolean:::Tells whether there are any arguments associated with the given option
jdk.internal.joptsimple.OptionSet#valueOf(String)->Object:::Gives the argument associated with the given option
jdk.internal.joptsimple.OptionSet#valueOf(OptionSpec)->V:::Gives the argument associated with the given option
jdk.internal.joptsimple.OptionSet#valuesOf(String)->List:::Gives any arguments associated with the given option
jdk.internal.joptsimple.OptionSet#valuesOf(OptionSpec)->List:::Gives any arguments associated with the given option
jdk.internal.joptsimple.OptionSet#specs()->List>:::Gives the set of options that were detected, in the form of OptionSpecs, in the order in which the options were found on the command line.
jdk.internal.joptsimple.OptionSet#asMap()->Map, List>:::Gives all declared options as a map of string to OptionSpec.
jdk.internal.joptsimple.OptionSet#nonOptionArguments()->List::: option set non option arguments
jdk.internal.joptsimple.OptionSet#add(AbstractOptionSpec)->void::: option set add
jdk.internal.joptsimple.OptionSet#addWithArgument(AbstractOptionSpec, String)->void::: option set add with argument
jdk.internal.joptsimple.OptionSet#equals(Object)->boolean::: option set equals
jdk.internal.joptsimple.OptionSet#hashCode()->int::: option set hash code
jdk.internal.joptsimple.OptionSpec#values(OptionSet)->List:::Gives any arguments associated with the given option in the given set of detected options
jdk.internal.joptsimple.OptionSpec#value(OptionSet)->V:::Gives the argument associated with the given option in the given set of detected options
jdk.internal.joptsimple.OptionSpec#options()->List::: option spec options
jdk.internal.joptsimple.OptionSpec#isForHelp()->boolean:::Tells whether this option is designated as a "help" option
jdk.internal.joptsimple.OptionSpecBuilder#withRequiredArg()->ArgumentAcceptingOptionSpec:::Informs an option parser that this builder's option requires an argument.
jdk.internal.joptsimple.OptionSpecBuilder#withOptionalArg()->ArgumentAcceptingOptionSpec:::Informs an option parser that this builder's option accepts an optional argument.
jdk.internal.joptsimple.OptionSpecBuilder#requiredIf(String, String...)->OptionSpecBuilder:::Informs an option parser that this builder's option is required if the given option is present on the command line.  For a given option, you should not mix this with #requiredUnless(String, String...) requiredUnless to avoid conflicts.
jdk.internal.joptsimple.OptionSpecBuilder#requiredIf(OptionSpec, OptionSpec...)->OptionSpecBuilder:::Informs an option parser that this builder's option is required if the given option is present on the command line.  For a given option, you should not mix this with #requiredUnless(OptionSpec, OptionSpec[]) requiredUnless to avoid conflicts.  This method recognizes only instances of options returned from the fluent interface methods.
jdk.internal.joptsimple.OptionSpecBuilder#requiredUnless(String, String...)->OptionSpecBuilder:::Informs an option parser that this builder's option is required if the given option is absent on the command line.  For a given option, you should not mix this with #requiredIf(OptionSpec, OptionSpec[]) requiredIf to avoid conflicts.
jdk.internal.joptsimple.OptionSpecBuilder#requiredUnless(OptionSpec, OptionSpec...)->OptionSpecBuilder:::Informs an option parser that this builder's option is required if the given option is absent on the command line.  For a given option, you should not mix this with #requiredIf(OptionSpec, OptionSpec[]) requiredIf to avoid conflicts.  This method recognizes only instances of options returned from the fluent interface methods.
jdk.internal.joptsimple.OptionSpecBuilder#availableIf(String, String...)->OptionSpecBuilder:::Informs an option parser that this builder's option is allowed if the given option is present on the command line.  For a given option, you should not mix this with #availableUnless(String, String...) availableUnless to avoid conflicts.
jdk.internal.joptsimple.OptionSpecBuilder#availableIf(OptionSpec, OptionSpec...)->OptionSpecBuilder:::Informs an option parser that this builder's option is allowed if the given option is present on the command line.  For a given option, you should not mix this with #availableUnless(OptionSpec, OptionSpec[]) requiredUnless to avoid conflicts.  This method recognizes only instances of options returned from the fluent interface methods.
jdk.internal.joptsimple.OptionSpecBuilder#availableUnless(String, String...)->OptionSpecBuilder:::Informs an option parser that this builder's option is allowed if the given option is absent on the command line.  For a given option, you should not mix this with #availableIf(OptionSpec, OptionSpec[]) requiredIf to avoid conflicts.
jdk.internal.joptsimple.OptionSpecBuilder#availableUnless(OptionSpec, OptionSpec...)->OptionSpecBuilder:::Informs an option parser that this builder's option is allowed if the given option is absent on the command line.  For a given option, you should not mix this with #availableIf(OptionSpec, OptionSpec[]) requiredIf to avoid conflicts.  This method recognizes only instances of options returned from the fluent interface methods.
jdk.internal.joptsimple.OptionSpecTokenizer#hasMore()->boolean::: option spec tokenizer has more
jdk.internal.joptsimple.OptionSpecTokenizer#next()->AbstractOptionSpec::: option spec tokenizer next
jdk.internal.joptsimple.OptionSpecTokenizer#configure(OptionParser)->void::: option spec tokenizer configure
jdk.internal.joptsimple.ParserRules#isShortOptionToken(String)->boolean::: parser rules is short option token
jdk.internal.joptsimple.ParserRules#isLongOptionToken(String)->boolean::: parser rules is long option token
jdk.internal.joptsimple.ParserRules#isOptionTerminator(String)->boolean::: parser rules is option terminator
jdk.internal.joptsimple.ParserRules#ensureLegalOption(String)->void::: parser rules ensure legal option
jdk.internal.joptsimple.ParserRules#ensureLegalOptions(List)->void::: parser rules ensure legal options
jdk.internal.joptsimple.RequiredArgumentOptionSpec#detectOptionArgument(OptionParser, ArgumentList, OptionSet)->void::: required argument option spec detect option argument
jdk.internal.joptsimple.UnavailableOptionException#messageArguments()->Object[]::: unavailable option exception message arguments
jdk.internal.joptsimple.UnconfiguredOptionException#messageArguments()->Object[]::: unconfigured option exception message arguments
jdk.internal.joptsimple.UnrecognizedOptionException#messageArguments()->Object[]::: unrecognized option exception message arguments
jdk.internal.joptsimple.ValueConverter#convert(String)->V:::Converts the given string value into a Java type.
jdk.internal.joptsimple.ValueConverter#valueType()->Class:::Gives the class of the type of values this converter converts to.
jdk.internal.joptsimple.ValueConverter#valuePattern()->String:::Gives a string that describes the pattern of the values this converter expects, if any

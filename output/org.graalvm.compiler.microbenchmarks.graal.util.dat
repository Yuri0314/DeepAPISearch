FrameStateAssignmentState#preprocessOriginal(StructuredGraph)::: frame state assignment state preprocess original:::new->GuardLoweringPhase->apply->return
FrameStateAssignmentState#beforeInvocation()::: frame state assignment state before invocation:::new->FrameStateAssignmentPhase->super->beforeInvocation
GraalUtil#getMethod(Class, String, Class...)::: graal util get method:::try->if->found->foreach->declaringClass->getDeclaredMethods->if->m->getName->equals->if->throw->new->RuntimeException->if->throw->declaringClass->getName->new->NoSuchMethodException->return->else->return->declaringClass->getDeclaredMethod->catch->throw->new->RuntimeException->finally
GraalUtil#getMethodSpec(Class):::Gets the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.:::c->while->methodSpec->c->getAnnotation->if->return->c->getSuperclass->throw->getSimpleName->new->RuntimeException
GraalUtil#getMethodFromMethodSpec(Class):::Gets the method specified by the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.:::methodSpec->getMethodSpec->declaringClass->methodSpec->declaringClass->if->name->methodSpec->name->parameters->methodSpec->parameters->if->return->getMethod
GraalUtil#getGraphFromMethodSpec(Class):::Gets the graph for the method specified by the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.:::methodSpec->getMethodSpec->declaringClass->methodSpec->declaringClass->if->name->methodSpec->name->parameters->methodSpec->parameters->if->return->getGraph
GraalUtil#getGraph(Class, String, Class...)::: graal util get graph:::return->getMethod->getGraph
GraalUtil#getGraph(Method)::: graal util get graph:::graal->new->GraalState->javaMethod->lookupJavaMethod->return->getGraph
GraalUtil#getGraph(GraalState, ResolvedJavaMethod)::: graal util get graph:::return->getGraph
GraalUtil#getGraph(GraalState, ResolvedJavaMethod, boolean)::: graal util get graph:::graph->new->StructuredGraph.Builder->useProfilingInfo->method->build->graphBuilderSuite->new->PhaseSuite<>->graphBuilderSuite->GraphBuilderConfiguration->new->InvocationPlugins->new->Plugins->getDefault->new->GraphBuilderPhase->appendPhase->graphBuilderSuite->new->HighTierContext->apply->return
GraalUtil#getNodes(StructuredGraph)::: graal util get nodes:::nodeList->graph->getNodes->snapshot->return->nodeList->nodeList->size->new->NodeArr->toArray
GraphState#preprocessOriginal(StructuredGraph)::: graph state preprocess original:::return
GraphState#beforeInvocation()::: graph state before invocation:::originalGraph->originalGraph->getDebug->copy
NodesState#afterInvocation()::: nodes state after invocation:::if->for->i
ScheduleState#beforeInvocation()::: schedule state before invocation:::new->SchedulePhase->super->beforeInvocation
ScheduleState#preprocessOriginal(StructuredGraph)::: schedule state preprocess original:::g->super->preprocessOriginal->graal->new->GraalState->highTier->getSuites->getDefaultSuites->getHighTier->highTier->getSuites->getDefaultGraphBuilderSuite->new->HighTierContext->apply->return

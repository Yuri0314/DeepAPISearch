org.graalvm.compiler.microbenchmarks.graal.util.FrameStateAssignmentState#preprocessOriginal(StructuredGraph)->StructuredGraph::: frame state assignment state preprocess original
org.graalvm.compiler.microbenchmarks.graal.util.FrameStateAssignmentState#beforeInvocation()->void::: frame state assignment state before invocation
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getMethod(Class, String, Class...)->Method::: graal util get method
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getMethodSpec(Class)->MethodSpec:::Gets the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getMethodFromMethodSpec(Class)->Method:::Gets the method specified by the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getGraphFromMethodSpec(Class)->StructuredGraph:::Gets the graph for the method specified by the first MethodSpec annotation encountered in the class hierarchy terminated by startClass.
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getGraph(Class, String, Class...)->StructuredGraph::: graal util get graph
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getGraph(Method)->StructuredGraph::: graal util get graph
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getGraph(GraalState, ResolvedJavaMethod)->StructuredGraph::: graal util get graph
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getGraph(GraalState, ResolvedJavaMethod, boolean)->StructuredGraph::: graal util get graph
org.graalvm.compiler.microbenchmarks.graal.util.GraalUtil#getNodes(StructuredGraph)->Node[]::: graal util get nodes
org.graalvm.compiler.microbenchmarks.graal.util.GraphState#preprocessOriginal(StructuredGraph)->StructuredGraph::: graph state preprocess original
org.graalvm.compiler.microbenchmarks.graal.util.GraphState#beforeInvocation()->void::: graph state before invocation
org.graalvm.compiler.microbenchmarks.graal.util.NodesState#afterInvocation()->void::: nodes state after invocation
org.graalvm.compiler.microbenchmarks.graal.util.ScheduleState#beforeInvocation()->void::: schedule state before invocation
org.graalvm.compiler.microbenchmarks.graal.util.ScheduleState#preprocessOriginal(StructuredGraph)->StructuredGraph::: schedule state preprocess original

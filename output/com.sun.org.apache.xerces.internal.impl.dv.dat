DatatypeException#getKey():::Return the error code:::return
DatatypeException#getArgs():::Return the list of error arguments:::return
DatatypeException#getMessage():::Overrides this method to get the formatted&localized error message:::resourceBundle->SecuritySupport->getResourceBundle->if->throw->new->MissingResourceException->msg->resourceBundle->getString->if->resourceBundle->getString->throw->new->MissingResourceException->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->return
DatatypeValidator#validate(String, ValidationContext):::validate a given string against this DV:::
DTDDVFactory#getInstance():::Get an instance of the default DTDDVFactory implementation.:::return->getInstance
DTDDVFactory#getInstance(String):::Get an instance of DTDDVFactory implementation.:::try->if->DEFAULT_FACTORY_CLASS->equals->return->new->DTDDVFactoryImpl->else->if->XML11_DATATYPE_VALIDATOR_FACTORY->equals->return->new->XML11DTDDVFactoryImpl->else->return->ObjectFactory->newInstance->catch->throw->new->DVFactoryException->finally
DTDDVFactory#getBuiltInDV(String):::return a dtd type of the given name:::
DTDDVFactory#getBuiltInTypes():::get all built-in DVs, which are stored in a map keyed by the name:::
SchemaDVFactory#getInstance():::Get a default instance of SchemaDVFactory implementation.:::return->getInstance
SchemaDVFactory#getInstance(String):::Get an instance of SchemaDVFactory implementation.:::try->return->ObjectFactory->newInstance->catch->throw->new->DVFactoryException->finally
SchemaDVFactory#getBuiltInType(String):::Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType:::
SchemaDVFactory#getBuiltInTypes():::get all built-in simple types, which are stored in a SymbolHash keyed by the name:::
SchemaDVFactory#createTypeRestriction(String, String, short, XSSimpleType, XSObjectList):::Create a new simple type which is derived by restriction from another simple type.:::
SchemaDVFactory#createTypeList(String, String, short, XSSimpleType, XSObjectList):::Create a new simple type which is derived by list from another simple type.:::
SchemaDVFactory#createTypeUnion(String, String, short, XSSimpleType[], XSObjectList):::Create a new simple type which is derived by union from a list of other simple types.:::
ValidatedInfo#reset():::reset the state of this object:::
ValidatedInfo#stringValue():::Return a string representation of the value:::if->return->else->return->actualValue->toString
ValidatedInfo#isComparable(ValidatedInfo, ValidatedInfo):::Returns true if the two ValidatedInfo objects can be compared in the same value space.:::primitiveType1->convertToPrimitiveKind->primitiveType2->convertToPrimitiveKind->if->return->else->if->typeList1->typeList2->typeList1Length->typeList1->getLength->typeList2Length->typeList2->getLength->if->return->for->i->return
XSSimpleType#getPrimitiveKind():::return an ID representing the built-in primitive base type:::
XSSimpleType#validate(String, ValidationContext, ValidatedInfo):::validate a given string against this simple type.:::
XSSimpleType#validate(Object, ValidationContext, ValidatedInfo):::validate a given string value, represented by content.toString():::
XSSimpleType#validate(ValidationContext, ValidatedInfo):::Validate an actual value against this simple type.:::
XSSimpleType#applyFacets(XSFacets, short, short, ValidationContext):::If this type is created from restriction, then some facets can be applied to the simple type:::
XSSimpleType#isEqual(Object, Object):::Check whether two actual values are equal.:::
XSSimpleType#isIDType():::Check whether this type is or is derived from ID:::
XSSimpleType#getWhitespace():::Return the whitespace corresponding to this datatype.:::

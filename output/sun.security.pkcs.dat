ContentInfo#getContent()::: content info get content:::return
ContentInfo#getContentType()::: content info get content type:::return
ContentInfo#getData()::: content info get data:::if->contentType->equals->contentType->equals->contentType->equals->if->return->else->return->content->getOctetString->throw->new->IOException
ContentInfo#encode(DerOutputStream)::: content info encode:::contentDerCode->seq->new->DerOutputStream->seq->putOID->if->taggedContent->new->DerOutputStream->content->encode->contentDerCode->toByteArray->new->DerValue->seq->putDerValue->out->write
ContentInfo#getContentBytes():::Returns a byte array representation of the data held in the content field.:::if->return->dis->content->toByteArray->new->DerInputStream->return->dis->getOctetString
ContentInfo#toString()::: content info to string:::out->return
EncryptedPrivateKeyInfo#getAlgorithm():::Returns the encryption algorithm.:::return
EncryptedPrivateKeyInfo#getEncryptedData():::Returns the encrypted data.:::return->clone
EncryptedPrivateKeyInfo#getEncoded():::Returns the ASN.1 encoding of this class.:::if->return->clone->out->new->DerOutputStream->tmp->new->DerOutputStream->algid->encode->tmp->putOctetString->out->write->out->toByteArray->return->clone
EncryptedPrivateKeyInfo#equals(Object)::: encrypted private key info equals:::if->return->if->return->try->thisEncrInfo->this->getEncoded->otherEncrInfo->getEncoded->if->return->for->i->return->catch->return->finally
EncryptedPrivateKeyInfo#hashCode():::Returns a hashcode for this EncryptedPrivateKeyInfo.:::retval->for->i->return
PKCS7#parse(DerInputStream)::: s7 parse:::try->derin->derin->available->mark->parse->catch->try->derin->reset->parse->catch->pe->ioe1->getMessage->new->ParsingException->pe->initCause->pe->addSuppressed->throw->finally->finally
PKCS7#parse(DerInputStream, boolean):::Parses a PKCS#7 block.:::new->ContentInfo->content->contentInfo->getContent->if->contentType->equals->parseSignedData->else->if->contentType->equals->parseOldSignedData->else->if->contentType->equals->parseNetscapeCertChain->else->throw->new->ParsingException
PKCS7#parseNetscapeCertChain(DerValue)::: s7 parse netscape cert chain:::dis->val->toByteArray->new->DerInputStream->contents->dis->getSequence->new->X509CertificateArr->certfac->try->CertificateFactory->getInstance->catch->finally->for->i
PKCS7#parseSignedData(DerValue)::: s7 parse signed data:::dis->val->toDerInputStream->dis->getBigInteger->digestAlgorithmIdVals->dis->getSet->len->new->AlgorithmIdArr->try->for->i->catch->pe->e->getMessage->new->ParsingException->pe->initCause->throw->finally->new->ContentInfo->certfac->try->CertificateFactory->getInstance->catch->finally->if->dis->peekByte->certVals->dis->getSet->new->X509CertificateArr->count->for->i->if->Arrays->copyOf->if->dis->peekByte->crlVals->dis->getSet->new->X509CRLArr->for->i->signerInfoVals->dis->getSet->new->SignerInfoArr->for->i
PKCS7#parseOldSignedData(DerValue)::: s7 parse old signed data:::dis->val->toDerInputStream->dis->getBigInteger->digestAlgorithmIdVals->dis->getSet->len->new->AlgorithmIdArr->try->for->i->catch->throw->new->ParsingException->finally->new->ContentInfo->certfac->try->CertificateFactory->getInstance->catch->finally->certVals->dis->getSet->new->X509CertificateArr->for->i->dis->getSet->signerInfoVals->dis->getSet->new->SignerInfoArr->for->i
PKCS7#encodeSignedData(OutputStream):::Encodes the signed data to an output stream.:::derout->new->DerOutputStream->encodeSignedData->out->derout->toByteArray->write
PKCS7#encodeSignedData(DerOutputStream):::Encodes the signed data to a DerOutputStream.:::signedData->new->DerOutputStream->signedData->putInteger->signedData->putOrderedSetOf->contentInfo->encode->if->implCerts->new->X509CertImplArr->for->i->signedData->putOrderedSetOf->if->implCRLs->new->HashSet<>->foreach->if->implCRLs->add->else->try->encoded->crl->getEncoded->implCRLs->new->X509CRLImpl->add->catch->throw->new->IOException->finally->signedData->implCRLs->implCRLs->size->new->X509CRLImplArr->toArray->putOrderedSetOf->signedData->putOrderedSetOf->signedDataSeq->signedData->toByteArray->new->DerValue->block->new->ContentInfo->block->encode
PKCS7#verify(SignerInfo, byte[]):::This verifies a given SignerInfo.:::return->info->verify
PKCS7#verify(byte[]):::Returns all signerInfos which self-verify.:::intResult->new->Vector<>->for->i->if->intResult->isEmpty->result->intResult->size->new->SignerInfoArr->intResult->copyInto->return->return
PKCS7#verify():::Returns all signerInfos which self-verify.:::return->verify
PKCS7#getVersion():::Returns the version number of this PKCS7 block.:::return
PKCS7#getDigestAlgorithmIds():::Returns the message digest algorithms specified in this PKCS7 block.:::return
PKCS7#getContentInfo():::Returns the content information specified in this PKCS7 block.:::return
PKCS7#getCertificates():::Returns the X.509 certificates listed in this PKCS7 block.:::if->return->certificates->clone->else->return
PKCS7#getCRLs():::Returns the X.509 crls listed in this PKCS7 block.:::if->return->crls->clone->else->return
PKCS7#getSignerInfos():::Returns the signer's information specified in this PKCS7 block.:::return
PKCS7#getCertificate(BigInteger, X500Name):::Returns the X.509 certificate listed in this PKCS7 block which has a matching serial number and Issuer name, or null if one is not found.:::if->if->populateCertIssuerNames->for->i->return
PKCS7#populateCertIssuerNames():::Populate array of Issuer DNs from certificates and convert each Principal to type X500Name if necessary.:::if->return->new->PrincipalArr->for->i
PKCS7#toString():::Returns the PKCS7 block in a printable string form.:::out->if->Debug->toHexString->if->for->i->if->for->i->if->for->i->if->for->i->return
PKCS7#isOldStyle():::Returns true if this is a JDK1.1.x-style PKCS#7 block, and false otherwise.:::return
PKCS7#generateSignedData(byte[], X509Certificate[], byte[], String, URI, String, String):::Assembles a PKCS #7 signed data message that optionally includes a signature timestamp.:::unauthAttrs->if->tsa->new->HttpTimestamper->tsToken->generateTimestampToken->new->PKCS9AttributeArr->new->PKCS9Attribute->new->PKCS9Attributes->issuerName->X500Name->getIssuerX500Principal->asX500Name->serialNumber->getSerialNumber->encAlg->AlgorithmId->getEncAlgFromSigAlg->digAlg->AlgorithmId->getDigAlgFromSigAlg->signerInfo->AlgorithmId->get->AlgorithmId->get->new->SignerInfo->signerInfos->algorithms->signerInfo->getDigestAlgorithmId->contentInfo->new->ContentInfo->new->ContentInfo->pkcs7->new->PKCS7->p7out->new->ByteArrayOutputStream->pkcs7->encodeSignedData->return->p7out->toByteArray
PKCS7#generateTimestampToken(Timestamper, String, String, byte[]):::Requests, processes and validates a timestamp token from a TSA using common defaults:::messageDigest->tsQuery->try->MessageDigest->getInstance->new->TSRequest->catch->throw->new->IllegalArgumentException->finally->nonce->if->new->BigInteger->tsQuery->setNonce->tsQuery->requestCertificate->tsReply->tsa->generateTimestamp->status->tsReply->getStatusCode->if->throw->tsReply->getStatusCodeAsText->tsReply->getFailureCodeAsText->new->IOException->if->tSAPolicyID->tsReply->getTimestampToken->getPolicyID->equals->throw->new->IOException->tsToken->tsReply->getToken->tst->tsReply->getTimestampToken->try->if->tst->getHashAlgorithm->AlgorithmId->get->equals->throw->new->IOException->catch->throw->new->IllegalArgumentException->finally->if->MessageDigest->tst->getHashedMessage->tsQuery->getHashedMessage->isEqual->throw->new->IOException->replyNonce->tst->getNonce->if->throw->new->IOException->if->replyNonce->equals->throw->new->IOException->foreach->tsToken->getSignerInfos->cert->si->getCertificate->if->throw->new->CertificateException->else->if->cert->getCriticalExtensionOIDs->contains->throw->new->CertificateException->keyPurposes->cert->getExtendedKeyUsage->if->keyPurposes->contains->throw->new->CertificateException->return->tsReply->getEncodedToken
PKCS8Key#parse(DerValue)::: s8 key parse:::key->parseKey->if->return->throw->new->IOException
PKCS8Key#parseKey(DerValue):::Construct PKCS#8 subject public key from a DER value:::algorithm->privKey->if->throw->new->IOException->parsedVersion->getBigInteger->if->version->equals->throw->Debug->toHexString->Debug->toHexString->new->IOException->AlgorithmId->getDerValue->parse->try->getOctetString->buildPKCS8Key->catch->throw->new->IOException->finally->if->available->throw->new->IOException->return
PKCS8Key#parseKeyBits():::Parse the key bits:::encode
PKCS8Key#buildPKCS8Key(AlgorithmId, byte[])::: s8 key build s8 key:::pkcs8EncodedKeyStream->new->DerOutputStream->encode->pkcs8KeySpec->pkcs8EncodedKeyStream->toByteArray->new->PKCS8EncodedKeySpec->try->keyFac->KeyFactory->algid->getName->getInstance->return->keyFac->generatePrivate->catch->finally->classname->try->props->keytype->sunProvider->Security->getProvider->if->throw->new->InstantiationException->sunProvider->algid->getName->getProperty->if->throw->new->InstantiationException->keyClass->try->Class->forName->catch->cl->ClassLoader->getSystemClassLoader->if->cl->loadClass->finally->inst->keyClass->newInstance->result->if->result->parseKeyBits->return->catch->throw->new->IOException->finally->result->new->PKCS8Key->return
PKCS8Key#getAlgorithm():::Returns the algorithm to be used with this key.:::return->algid->getName
PKCS8Key#getAlgorithmId():::Returns the algorithm ID to be used with this key.:::return
PKCS8Key#encode(DerOutputStream):::PKCS#8 sequence on the DER output stream.:::encode
PKCS8Key#getEncoded():::Returns the DER-encoded form of the key as a byte array.:::result->try->encode->catch->finally->return
PKCS8Key#getFormat():::Returns the format for this key: "PKCS#8":::return
PKCS8Key#encode():::Returns the DER-encoded form of the key as a byte array.:::if->try->out->new->DerOutputStream->encode->out->toByteArray->catch->throw->e->getMessage->new->InvalidKeyException->finally->return->encodedKey->clone
PKCS8Key#decode(InputStream):::Initialize an PKCS8Key object from an input stream:::val->try->new->DerValue->if->throw->new->InvalidKeyException->version->getBigInteger->if->version->equals->throw->Debug->toHexString->Debug->toHexString->new->IOException->AlgorithmId->getDerValue->parse->getOctetString->parseKeyBits->if->available->catch->throw->e->getMessage->new->InvalidKeyException->finally
PKCS8Key#decode(byte[])::: s8 key decode:::new->ByteArrayInputStream->decode
PKCS8Key#writeReplace()::: s8 key write replace:::return->getAlgorithm->getFormat->getEncoded->new->KeyRep
PKCS8Key#readObject(ObjectInputStream):::Serialization read ..:::try->decode->catch->e->printStackTrace->throw->e->getMessage->new->IOException->finally
PKCS8Key#encode(DerOutputStream, AlgorithmId, byte[])::: s8 key encode:::tmp->new->DerOutputStream->tmp->putInteger->algid->encode->tmp->putOctetString->out->write
PKCS8Key#equals(Object):::Compares two private keys:::if->return->if->b1->if->else->getEncoded->b2->getEncoded->return->MessageDigest->isEqual->return
PKCS8Key#hashCode():::Calculates a hash code value for this object:::retval->b1->getEncoded->for->i->return
PKCS9Attribute#init(ObjectIdentifier, Object)::: s9 attribute init:::indexOf->clazz->if->clazz->isInstance->throw->value->getClass->toString->clazz->toString->new->IllegalArgumentException
PKCS9Attribute#derEncode(OutputStream):::Write the DER encoding of this attribute to an output stream:::temp->new->DerOutputStream->temp->putOID->switch->temp->write->break->values->temps->new->DerOutputStreamArr->for->i->temp->putOrderedSetOf->break->temp2->new->DerOutputStream->temp2->putOID->temp->temp2->toByteArray->write->break->temp2->new->DerOutputStream->temp2->putOctetString->temp->temp2->toByteArray->write->break->temp2->new->DerOutputStream->temp2->putUTCTime->temp->temp2->toByteArray->write->break->temp->putOrderedSetOf->break->temp2->new->DerOutputStream->temp2->putPrintableString->temp->temp2->toByteArray->write->break->values->temps->new->DerOutputStreamArr->for->i->temp->putOrderedSetOf->break->throw->new->IOException->throw->new->IOException->throw->new->IOException->throw->new->IOException->temp2->new->DerOutputStream->exts->try->exts->encode->catch->throw->ex->toString->new->IOException->finally->temp->temp2->toByteArray->write->break->throw->new->IOException->throw->new->IOException->temp->write->break->derOut->new->DerOutputStream->derOut->temp->toByteArray->write->out->derOut->toByteArray->write
PKCS9Attribute#isKnown():::Returns if the attribute is known:::return
PKCS9Attribute#getValue():::Get the value of this attribute:::return
PKCS9Attribute#isSingleValued():::Show whether this attribute is single-valued.:::return
PKCS9Attribute#getOID()::: Return the OID of this attribute.:::return
PKCS9Attribute#getName()::: Return the name of this attribute.:::return->oid->toString->OID_NAME_TABLE->get
PKCS9Attribute#getOID(String):::Return the OID for a given attribute name or null if we don't recognize the name.:::return->NAME_OID_TABLE->name->toLowerCase->get
PKCS9Attribute#getName(ObjectIdentifier):::Return the attribute name for a given OID or null if we don't recognize the oid.:::return->OID_NAME_TABLE->get
PKCS9Attribute#toString():::Returns a string representation of this attribute.:::sb->new->StringBuilder->sb->append->if->sb->oid->toString->append->else->sb->OID_NAME_TABLE->get->append->sb->append->if->if->hexDump->new->HexDumpEncoder->sb->hexDump->encodeBuffer->append->else->sb->value->toString->append->sb->append->return->sb->toString->else->first->values->for->j->return->sb->toString
PKCS9Attribute#indexOf(Object, Object[], int):::Beginning the search at start, find the first index i such that a[i] = obj.:::for->i->return
PKCS9Attribute#throwSingleValuedException():::Throw an exception when there are multiple values for a single-valued attribute.:::throw->getName->new->IOException
PKCS9Attribute#throwTagException(Byte):::Throw an exception when the tag on a value encoding is wrong for the attribute whose value it is:::expectedTags->msg->new->StringBuilder->msg->append->msg->oid->toString->append->msg->append->msg->getName->append->msg->append->msg->tag->toString->append->msg->append->msg->toString->append->for->i->msg->append->throw->msg->toString->new->IOException
PKCS9Attributes#decode(DerInputStream):::Decode this set of PKCS9 attributes from the contents of its DER encoding:::val->in->getDerValue->derEncoding->val->toByteArray->derIn->new->DerInputStream->derVals->derIn->getSet->attrib->oid->reuseEncoding->for->i->return->generateDerEncoding
PKCS9Attributes#encode(byte, OutputStream):::Put the DER encoding of this PKCS9 attribute set on an DerOutputStream, tagged with the given implicit tag.:::out->write->out->write
PKCS9Attributes#generateDerEncoding()::: s9 attributes generate der encoding:::out->new->DerOutputStream->attribVals->attributes->values->toArray->out->castToDerEncoder->putOrderedSetOf->return->out->toByteArray
PKCS9Attributes#getDerEncoding():::Return the DER encoding of this attribute set, tagged with DerValue.tag_SetOf.:::return->derEncoding->clone
PKCS9Attributes#getAttribute(ObjectIdentifier):::Get an attribute from this set.:::return->attributes->get
PKCS9Attributes#getAttribute(String):::Get an attribute from this set.:::return->attributes->PKCS9Attribute->getOID->get
PKCS9Attributes#getAttributes():::Get an array of all attributes in this set, in order of OID.:::attribs->attributes->size->new->PKCS9AttributeArr->oid->j->for->i->return
PKCS9Attributes#getAttributeValue(ObjectIdentifier):::Get an attribute value by OID.:::try->value->getAttribute->getValue->return->catch->throw->new->IOException->finally
PKCS9Attributes#getAttributeValue(String)::: Get an attribute value by type name.:::oid->PKCS9Attribute->getOID->if->throw->new->IOException->return->getAttributeValue
PKCS9Attributes#toString():::Returns the PKCS9 block in a printable string form.:::sb->new->StringBuilder->sb->append->oid->value->first->for->i->sb->append->return->sb->toString
PKCS9Attributes#castToDerEncoder(Object[]):::Cast an object array whose components are DerEncoders to DerEncoder[].:::encoders->new->DerEncoderArr->for->i->return
SignerInfo#encode(DerOutputStream)::: signer info encode:::derEncode
SignerInfo#derEncode(OutputStream):::DER encode this object onto an output stream:::seq->new->DerOutputStream->seq->putInteger->issuerAndSerialNumber->new->DerOutputStream->issuerName->encode->issuerAndSerialNumber->putInteger->seq->write->digestAlgorithmId->encode->if->authenticatedAttributes->encode->digestEncryptionAlgorithmId->encode->seq->putOctetString->if->unauthenticatedAttributes->encode->tmp->new->DerOutputStream->tmp->write->out->tmp->toByteArray->write
SignerInfo#getCertificate(PKCS7)::: signer info get certificate:::return->block->getCertificate
SignerInfo#getCertificateChain(PKCS7)::: signer info get certificate chain:::userCert->block->getCertificate->if->return->certList->new->ArrayList<>->certList->add->pkcsCerts->block->getCertificates->if->userCert->getSubjectDN->userCert->getIssuerDN->equals->return->issuer->userCert->getIssuerDN->start->while->match->i->while->if->issuer->getSubjectDN->equals->certList->add->if->getSubjectDN->getIssuerDN->equals->else->getIssuerDN->tmpCert->break->else->if->break->return
SignerInfo#verify(PKCS7, byte[])::: signer info verify:::try->content->block->getContentInfo->if->content->getContentBytes->timestamp->try->getTimestamp->catch->finally->cparams->new->ConstraintsParameters->digestAlgname->getDigestAlgorithmId->getName->dataSigned->if->else->contentType->authenticatedAttributes->getAttributeValue->if->contentType->equals->return->messageDigest->authenticatedAttributes->getAttributeValue->if->return->try->JAR_DISABLED_CHECK->permits->catch->throw->e->getMessage->new->SignatureException->finally->md->MessageDigest->getInstance->computedMessageDigest->md->digest->if->return->for->i->authenticatedAttributes->getDerEncoding->encryptionAlgname->getDigestEncryptionAlgorithmId->getName->tmp->AlgorithmId->getEncAlgFromSigAlg->if->algname->AlgorithmId->makeSigAlg->try->JAR_DISABLED_CHECK->permits->catch->throw->e->getMessage->new->SignatureException->finally->cert->getCertificate->if->return->key->cert->getPublicKey->if->JAR_DISABLED_CHECK->permits->throw->KeyUtil->getKeySize->key->getAlgorithm->new->SignatureException->if->cert->hasUnsupportedCriticalExtension->throw->new->SignatureException->keyUsageBits->cert->getKeyUsage->if->keyUsage->try->new->KeyUsageExtension->catch->throw->new->SignatureException->finally->digSigAllowed->keyUsage->get->booleanValue->nonRepuAllowed->keyUsage->get->booleanValue->if->throw->new->SignatureException->sig->Signature->getInstance->ap->digestEncryptionAlgorithmId->getParameters->try->SignatureUtil->SignatureUtil->getParamSpec->initVerifyWithParam->catch->throw->e->getMessage->new->SignatureException->finally->sig->update->if->sig->verify->return->catch->throw->e->getMessage->new->SignatureException->finally->return
SignerInfo#verify(PKCS7)::: signer info verify:::return->verify
SignerInfo#getVersion()::: signer info get version:::return
SignerInfo#getIssuerName()::: signer info get issuer name:::return
SignerInfo#getCertificateSerialNumber()::: signer info get certificate serial number:::return
SignerInfo#getDigestAlgorithmId()::: signer info get digest algorithm id:::return
SignerInfo#getAuthenticatedAttributes()::: signer info get authenticated attributes:::return
SignerInfo#getDigestEncryptionAlgorithmId()::: signer info get digest encryption algorithm id:::return
SignerInfo#getEncryptedDigest()::: signer info get encrypted digest:::return
SignerInfo#getUnauthenticatedAttributes()::: signer info get unauthenticated attributes:::return
SignerInfo#getTsToken():::Returns the timestamp PKCS7 data unverified.:::if->return->tsTokenAttr->unauthenticatedAttributes->getAttribute->if->return->return->tsTokenAttr->getValue->new->PKCS7
SignerInfo#getTimestamp()::: signer info get timestamp:::if->return->tsToken->getTsToken->if->return->encTsTokenInfo->tsToken->getContentInfo->getData->tsa->tsToken->verify->chain->getCertificateChain->cf->CertificateFactory->getInstance->tsaChain->cf->generateCertPath->tsTokenInfo->new->TimestampToken->verifyTimestamp->tsTokenInfo->getDate->new->Timestamp->return
SignerInfo#verifyTimestamp(TimestampToken)::: signer info verify timestamp:::digestAlgname->token->getHashAlgorithm->getName->if->JAR_DISABLED_CHECK->permits->throw->new->SignatureException->md->MessageDigest->getInstance->if->Arrays->token->getHashedMessage->md->digest->equals->throw->token->getSerialNumber->token->getDate->new->SignatureException->if->debug->println->debug->token->getSerialNumber->token->getDate->println->debug->println
SignerInfo#toString()::: signer info to string:::hexDump->new->HexDumpEncoder->out->Debug->toHexString->Debug->toHexString->if->hexDump->encodeBuffer->if->return
SigningCertificateInfo#toString()::: signing certificate info to string:::sb->new->StringBuilder->sb->append->for->i->sb->append->return->sb->toString
SigningCertificateInfo#parse(byte[])::: signing certificate info parse:::derValue->new->DerValue->if->throw->new->IOException->certs->getSequence->new->ESSCertIdArr->for->i->if->available->policies->getSequence->for->i
ESSCertId#toString()::: cert id to string:::sb->new->StringBuilder->sb->append->if->new->HexDumpEncoder->sb->hexDumper->encode->append->if->sb->append->sb->append->sb->append->return->sb->toString

AccessFlags#ignore(int)::: access flags ignore:::return->new->AccessFlags
AccessFlags#is(int)::: access flags is:::return
AccessFlags#byteLength()::: access flags byte length:::return
AccessFlags#getClassModifiers()::: access flags get class modifiers:::f->return->getModifiers
AccessFlags#getClassFlags()::: access flags get class flags:::return->getFlags
AccessFlags#getInnerClassModifiers()::: access flags get inner class modifiers:::f->return->getModifiers
AccessFlags#getInnerClassFlags()::: access flags get inner class flags:::return->getFlags
AccessFlags#getFieldModifiers()::: access flags get field modifiers:::return->getModifiers
AccessFlags#getFieldFlags()::: access flags get field flags:::return->getFlags
AccessFlags#getMethodModifiers()::: access flags get method modifiers:::return->getModifiers
AccessFlags#getMethodFlags()::: access flags get method flags:::return->getFlags
AccessFlags#getModifiers(int[], Kind)::: access flags get modifiers:::return->getModifiers
AccessFlags#getModifiers(int, int[], Kind)::: access flags get modifiers:::s->new->LinkedHashSet<>->foreach->if->s->flagToModifier->add->return
AccessFlags#getFlags(int[], Kind)::: access flags get flags:::s->new->LinkedHashSet<>->f->foreach->if->s->flagToName->add->while->bit->Integer->highestOneBit->s->Integer->toHexString->add->return
AccessFlags#flagToModifier(int, Kind)::: access flags flag to modifier:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return
AccessFlags#flagToName(int, Kind)::: access flags flag to name:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return
Annotation#length()::: annotation length:::n->foreach->pair->length->return
Annotation.element_value#read(ClassReader):::element_value read:::tag->cr->readUnsignedByte->switch->return->new->Primitive_element_value->return->new->Enum_element_value->return->new->Class_element_value->return->new->Annotation_element_value->return->new->Array_element_value->throw->new->InvalidAnnotation
Annotation.element_value#length():::element_value length:::
Annotation.element_value#accept(Visitor, P):::element_value accept:::
Annotation.element_value.Visitor#visitPrimitive(Primitive_element_value, P)::: visitor visit primitive:::
Annotation.element_value.Visitor#visitEnum(Enum_element_value, P)::: visitor visit enum:::
Annotation.element_value.Visitor#visitClass(Class_element_value, P)::: visitor visit class:::
Annotation.element_value.Visitor#visitAnnotation(Annotation_element_value, P)::: visitor visit annotation:::
Annotation.element_value.Visitor#visitArray(Array_element_value, P)::: visitor visit array:::
Annotation.Primitive_element_value#length()::: primitive_element_value length:::return
Annotation.Primitive_element_value#accept(Visitor, P)::: primitive_element_value accept:::return->visitor->visitPrimitive
Annotation.Enum_element_value#length()::: enum_element_value length:::return
Annotation.Enum_element_value#accept(Visitor, P)::: enum_element_value accept:::return->visitor->visitEnum
Annotation.Class_element_value#length()::: class_element_value length:::return
Annotation.Class_element_value#accept(Visitor, P)::: class_element_value accept:::return->visitor->visitClass
Annotation.Annotation_element_value#length()::: annotation_element_value length:::return->annotation_value->length
Annotation.Annotation_element_value#accept(Visitor, P)::: annotation_element_value accept:::return->visitor->visitAnnotation
Annotation.Array_element_value#length()::: array_element_value length:::n->for->i->return
Annotation.Array_element_value#accept(Visitor, P)::: array_element_value accept:::return->visitor->visitArray
Annotation.element_value_pair#length():::element_value_pair length:::return->value->length
AnnotationDefault_attribute#accept(Visitor, D)::: annotation default_attribute accept:::return->visitor->visitAnnotationDefault
Attribute.Factory#createAttribute(ClassReader, int, byte[])::: factory create attribute:::if->init->cp->cr->getConstantPool->reasonForDefaultAttr->try->name->cp->getUTF8Value->attrClass->standardAttributes->get->if->try->constrArgTypes->constr->attrClass->getDeclaredConstructor->return->constr->newInstance->catch->t->toString->finally->else->catch->e->toString->finally->return->new->DefaultAttribute
Attribute.Factory#init()::: factory init:::new->HashMap<>->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put->standardAttributes->put
Attribute#read(ClassReader)::: attribute read:::return->cr->readAttribute
Attribute#getName(ConstantPool)::: attribute get name:::return->constant_pool->getUTF8Value
Attribute#accept(Attribute.Visitor, D)::: attribute accept:::
Attribute#byteLength()::: attribute byte length:::return
Attribute.Visitor#visitBootstrapMethods(BootstrapMethods_attribute, P)::: visitor visit bootstrap methods:::
Attribute.Visitor#visitDefault(DefaultAttribute, P)::: visitor visit default:::
Attribute.Visitor#visitAnnotationDefault(AnnotationDefault_attribute, P)::: visitor visit annotation default:::
Attribute.Visitor#visitCharacterRangeTable(CharacterRangeTable_attribute, P)::: visitor visit character range table:::
Attribute.Visitor#visitCode(Code_attribute, P)::: visitor visit code:::
Attribute.Visitor#visitCompilationID(CompilationID_attribute, P)::: visitor visit compilation d:::
Attribute.Visitor#visitConstantValue(ConstantValue_attribute, P)::: visitor visit constant value:::
Attribute.Visitor#visitDeprecated(Deprecated_attribute, P)::: visitor visit deprecated:::
Attribute.Visitor#visitEnclosingMethod(EnclosingMethod_attribute, P)::: visitor visit enclosing method:::
Attribute.Visitor#visitExceptions(Exceptions_attribute, P)::: visitor visit exceptions:::
Attribute.Visitor#visitInnerClasses(InnerClasses_attribute, P)::: visitor visit inner classes:::
Attribute.Visitor#visitLineNumberTable(LineNumberTable_attribute, P)::: visitor visit line number table:::
Attribute.Visitor#visitLocalVariableTable(LocalVariableTable_attribute, P)::: visitor visit local variable table:::
Attribute.Visitor#visitLocalVariableTypeTable(LocalVariableTypeTable_attribute, P)::: visitor visit local variable type table:::
Attribute.Visitor#visitMethodParameters(MethodParameters_attribute, P)::: visitor visit method parameters:::
Attribute.Visitor#visitModule(Module_attribute, P)::: visitor visit module:::
Attribute.Visitor#visitModuleHashes(ModuleHashes_attribute, P)::: visitor visit module hashes:::
Attribute.Visitor#visitModuleMainClass(ModuleMainClass_attribute, P)::: visitor visit module main class:::
Attribute.Visitor#visitModulePackages(ModulePackages_attribute, P)::: visitor visit module packages:::
Attribute.Visitor#visitModuleResolution(ModuleResolution_attribute, P)::: visitor visit module resolution:::
Attribute.Visitor#visitModuleTarget(ModuleTarget_attribute, P)::: visitor visit module target:::
Attribute.Visitor#visitNestHost(NestHost_attribute, P)::: visitor visit nest host:::
Attribute.Visitor#visitNestMembers(NestMembers_attribute, P)::: visitor visit nest members:::
Attribute.Visitor#visitRuntimeVisibleAnnotations(RuntimeVisibleAnnotations_attribute, P)::: visitor visit runtime visible annotations:::
Attribute.Visitor#visitRuntimeInvisibleAnnotations(RuntimeInvisibleAnnotations_attribute, P)::: visitor visit runtime invisible annotations:::
Attribute.Visitor#visitRuntimeVisibleParameterAnnotations(RuntimeVisibleParameterAnnotations_attribute, P)::: visitor visit runtime visible parameter annotations:::
Attribute.Visitor#visitRuntimeInvisibleParameterAnnotations(RuntimeInvisibleParameterAnnotations_attribute, P)::: visitor visit runtime invisible parameter annotations:::
Attribute.Visitor#visitRuntimeVisibleTypeAnnotations(RuntimeVisibleTypeAnnotations_attribute, P)::: visitor visit runtime visible type annotations:::
Attribute.Visitor#visitRuntimeInvisibleTypeAnnotations(RuntimeInvisibleTypeAnnotations_attribute, P)::: visitor visit runtime invisible type annotations:::
Attribute.Visitor#visitSignature(Signature_attribute, P)::: visitor visit signature:::
Attribute.Visitor#visitSourceDebugExtension(SourceDebugExtension_attribute, P)::: visitor visit source debug extension:::
Attribute.Visitor#visitSourceFile(SourceFile_attribute, P)::: visitor visit source file:::
Attribute.Visitor#visitSourceID(SourceID_attribute, P)::: visitor visit source d:::
Attribute.Visitor#visitStackMap(StackMap_attribute, P)::: visitor visit stack map:::
Attribute.Visitor#visitStackMapTable(StackMapTable_attribute, P)::: visitor visit stack map table:::
Attribute.Visitor#visitSynthetic(Synthetic_attribute, P)::: visitor visit synthetic:::
Attributes#iterator()::: attributes iterator:::return->Arrays->asList->iterator
Attributes#get(int)::: attributes get:::return
Attributes#get(String)::: attributes get:::return->map->get
Attributes#getIndex(ConstantPool, String)::: attributes get index:::for->i->return
Attributes#size()::: attributes size:::return
Attributes#byteLength()::: attributes byte length:::length->foreach->a->byteLength->return
BootstrapMethods_attribute#length(BootstrapMethodSpecifier[])::: bootstrap methods_attribute length:::n->foreach->b->length->return
BootstrapMethods_attribute#accept(Visitor, P)::: bootstrap methods_attribute accept:::return->visitor->visitBootstrapMethods
BootstrapMethods_attribute.BootstrapMethodSpecifier#length()::: bootstrap method specifier length:::return
CharacterRangeTable_attribute#accept(Visitor, D)::: character range table_attribute accept:::return->visitor->visitCharacterRangeTable
CharacterRangeTable_attribute.Entry#length()::: entry length:::return
ClassFile#read(File)::: class file read:::return->file->toPath->new->Attribute.Factory->read
ClassFile#read(Path)::: class file read:::return->new->Attribute.Factory->read
ClassFile#read(Path, Attribute.Factory)::: class file read:::try->in->Files->newInputStream->return->new->ClassFile->catch->finally
ClassFile#read(File, Attribute.Factory)::: class file read:::return->file->toPath->read
ClassFile#read(InputStream)::: class file read:::return->new->Attribute.Factory->new->ClassFile
ClassFile#read(InputStream, Attribute.Factory)::: class file read:::return->new->ClassFile
ClassFile#getName()::: class file get name:::return->constant_pool->getClassInfo->getName
ClassFile#getSuperclassName()::: class file get superclass name:::return->constant_pool->getClassInfo->getName
ClassFile#getInterfaceName(int)::: class file get interface name:::return->constant_pool->getClassInfo->getName
ClassFile#getAttribute(String)::: class file get attribute:::return->attributes->get
ClassFile#isClass()::: class file is class:::return->isInterface
ClassFile#isInterface()::: class file is interface:::return->access_flags->is
ClassFile#byteLength()::: class file byte length:::return->constant_pool->byteLength->byteLength->byteLength->byteLength->attributes->byteLength
ClassFile#byteLength(int[])::: class file byte length:::return
ClassFile#byteLength(Field[])::: class file byte length:::length->foreach->f->byteLength->return
ClassFile#byteLength(Method[])::: class file byte length:::length->foreach->m->byteLength->return
ClassReader#getClassFile()::: class reader get class file:::return
ClassReader#getConstantPool()::: class reader get constant pool:::return
ClassReader#readAttribute()::: class reader read attribute:::name_index->readUnsignedShort->length->readInt->data->new->byteArr->readFully->prev->new->ByteArrayInputStream->new->DataInputStream->try->return->attributeFactory->createAttribute->catch->finally
ClassReader#readFully(byte[])::: class reader read fully:::in->readFully
ClassReader#readUnsignedByte()::: class reader read unsigned byte:::return->in->readUnsignedByte
ClassReader#readUnsignedShort()::: class reader read unsigned short:::return->in->readUnsignedShort
ClassReader#readInt()::: class reader read int:::return->in->readInt
ClassReader#readLong()::: class reader read long:::return->in->readLong
ClassReader#readFloat()::: class reader read float:::return->in->readFloat
ClassReader#readDouble()::: class reader read double:::return->in->readDouble
ClassReader#readUTF()::: class reader read f:::return->in->readUTF
ClassTranslator#translate(ClassFile, Map):::Create a new ClassFile from cf, such that for all entries k&nbsp;-\&gt;&nbsp;v in translations, each occurrence of k in cf will be replaced by v:::cf2->translations->get->if->constant_pool2->translate->fields2->translate->methods2->translateMethods->attributes2->translateAttributes->if->else->new->ClassFile->translations->put->return
ClassTranslator#translate(ConstantPool, Map)::: class translator translate:::cp2->translations->get->if->pool2->cp->size->new->ConstantPool.CPInfoArr->eq->for->i->cp->size->if->else->new->ConstantPool->translations->put->return
ClassTranslator#translate(ConstantPool.CPInfo, Map)::: class translator translate:::cpInfo2->translations->get->if->cpInfo->accept->translations->put->return
ClassTranslator#translate(Field[], ConstantPool, Map)::: class translator translate:::fields2->translations->get->if->new->FieldArr->for->i->if->equal->translations->put->return
ClassTranslator#translate(Field, ConstantPool, Map)::: class translator translate:::field2->translations->get->if->attributes2->translateAttributes->if->else->new->Field->translations->put->return
ClassTranslator#translateMethods(Method[], ConstantPool, Map)::: class translator translate methods:::methods2->translations->get->if->new->MethodArr->for->i->if->equal->translations->put->return
ClassTranslator#translate(Method, ConstantPool, Map)::: class translator translate:::method2->translations->get->if->attributes2->translateAttributes->if->else->new->Method->translations->put->return
ClassTranslator#translateAttributes(Attributes, ConstantPool, Map)::: class translator translate attributes:::attributes2->translations->get->if->attrArray2->attributes->size->new->AttributeArr->constant_pool2->translate->attrsEqual->for->i->attributes->size->if->else->new->Attributes->translations->put->return
ClassTranslator#translate(Attribute, Map)::: class translator translate:::attribute2->translations->get->if->translations->put->return
ClassTranslator#equal(T[], T[])::: class translator equal:::if->return->if->return->for->i->return
ClassTranslator#visitClass(CONSTANT_Class_info, Map)::: class translator visit class:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Class_info->translations->put->return
ClassTranslator#visitDouble(CONSTANT_Double_info, Map)::: class translator visit double:::info2->translations->get->if->translations->put->return
ClassTranslator#visitFieldref(CONSTANT_Fieldref_info, Map)::: class translator visit fieldref:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Fieldref_info->translations->put->return
ClassTranslator#visitFloat(CONSTANT_Float_info, Map)::: class translator visit float:::info2->translations->get->if->translations->put->return
ClassTranslator#visitInteger(CONSTANT_Integer_info, Map)::: class translator visit integer:::info2->translations->get->if->translations->put->return
ClassTranslator#visitInterfaceMethodref(CONSTANT_InterfaceMethodref_info, Map)::: class translator visit interface methodref:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_InterfaceMethodref_info->translations->put->return
ClassTranslator#visitInvokeDynamic(CONSTANT_InvokeDynamic_info, Map)::: class translator visit invoke dynamic:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_InvokeDynamic_info->translations->put->return
ClassTranslator#visitDynamicConstant(CONSTANT_Dynamic_info, Map)::: class translator visit dynamic constant:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Dynamic_info->translations->put->return
ClassTranslator#visitLong(CONSTANT_Long_info, Map)::: class translator visit long:::info2->translations->get->if->translations->put->return
ClassTranslator#visitMethodref(CONSTANT_Methodref_info, Map)::: class translator visit methodref:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Methodref_info->translations->put->return
ClassTranslator#visitMethodHandle(CONSTANT_MethodHandle_info, Map)::: class translator visit method handle:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_MethodHandle_info->translations->put->return
ClassTranslator#visitMethodType(CONSTANT_MethodType_info, Map)::: class translator visit method type:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_MethodType_info->translations->put->return
ClassTranslator#visitModule(CONSTANT_Module_info, Map)::: class translator visit module:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Module_info->translations->put->return
ClassTranslator#visitNameAndType(CONSTANT_NameAndType_info, Map)::: class translator visit name and type:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_NameAndType_info->translations->put->return
ClassTranslator#visitPackage(CONSTANT_Package_info, Map)::: class translator visit package:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_Package_info->translations->put->return
ClassTranslator#visitString(CONSTANT_String_info, Map)::: class translator visit string:::info2->translations->get->if->cp2->translate->if->else->new->CONSTANT_String_info->translations->put->return
ClassTranslator#visitUtf8(CONSTANT_Utf8_info, Map)::: class translator visit utf8:::info2->translations->get->if->translations->put->return
ClassWriter#write(ClassFile, File):::Write a ClassFile data structure to a file.:::try->f_out->new->FileOutputStream->write->catch->finally
ClassWriter#write(ClassFile, OutputStream):::Write a ClassFile data structure to a stream.:::out->reset->write->out->writeTo
ClassWriter#write()::: class writer write:::writeHeader->writeConstantPool->writeAccessFlags->writeClassInfo->writeFields->writeMethods->writeAttributes
ClassWriter#writeHeader()::: class writer write header:::out->writeInt->out->writeShort->out->writeShort
ClassWriter#writeAccessFlags(AccessFlags)::: class writer write access flags:::out->writeShort
ClassWriter#writeAttributes(Attributes)::: class writer write attributes:::size->attributes->size->out->writeShort->foreach->attributeWriter->write
ClassWriter#writeClassInfo()::: class writer write class info:::out->writeShort->out->writeShort->interfaces->out->writeShort->foreach->out->writeShort
ClassWriter#writeDescriptor(Descriptor)::: class writer write descriptor:::out->writeShort
ClassWriter#writeConstantPool()::: class writer write constant pool:::pool->size->pool->size->out->writeShort->foreach->pool->entries->constantPoolWriter->write
ClassWriter#writeFields()::: class writer write fields:::fields->out->writeShort->foreach->writeField
ClassWriter#writeField(Field)::: class writer write field:::writeAccessFlags->out->writeShort->writeDescriptor->writeAttributes
ClassWriter#writeMethods()::: class writer write methods:::methods->out->writeShort->foreach->writeMethod
ClassWriter#writeMethod(Method)::: class writer write method:::writeAccessFlags->out->writeShort->writeDescriptor->writeAttributes
ClassWriter.ClassOutputStream#writeByte(int)::: class output stream write byte:::try->d->writeByte->catch->finally
ClassWriter.ClassOutputStream#writeShort(int)::: class output stream write short:::try->d->writeShort->catch->finally
ClassWriter.ClassOutputStream#writeInt(int)::: class output stream write int:::try->d->writeInt->catch->finally
ClassWriter.ClassOutputStream#writeLong(long)::: class output stream write long:::try->d->writeLong->catch->finally
ClassWriter.ClassOutputStream#writeFloat(float)::: class output stream write float:::try->d->writeFloat->catch->finally
ClassWriter.ClassOutputStream#writeDouble(double)::: class output stream write double:::try->d->writeDouble->catch->finally
ClassWriter.ClassOutputStream#writeUTF(String)::: class output stream write f:::try->d->writeUTF->catch->finally
ClassWriter.ClassOutputStream#writeTo(ClassOutputStream)::: class output stream write to:::try->super->writeTo->catch->finally
ClassWriter.ConstantPoolWriter#write(CPInfo, ClassOutputStream)::: constant pool writer write:::out->info->getTag->writeByte->return->info->accept
ClassWriter.ConstantPoolWriter#visitClass(CONSTANT_Class_info, ClassOutputStream)::: constant pool writer visit class:::out->writeShort->return
ClassWriter.ConstantPoolWriter#visitDouble(CONSTANT_Double_info, ClassOutputStream)::: constant pool writer visit double:::out->writeDouble->return
ClassWriter.ConstantPoolWriter#visitFieldref(CONSTANT_Fieldref_info, ClassOutputStream)::: constant pool writer visit fieldref:::writeRef->return
ClassWriter.ConstantPoolWriter#visitFloat(CONSTANT_Float_info, ClassOutputStream)::: constant pool writer visit float:::out->writeFloat->return
ClassWriter.ConstantPoolWriter#visitInteger(CONSTANT_Integer_info, ClassOutputStream)::: constant pool writer visit integer:::out->writeInt->return
ClassWriter.ConstantPoolWriter#visitInterfaceMethodref(CONSTANT_InterfaceMethodref_info, ClassOutputStream)::: constant pool writer visit interface methodref:::writeRef->return
ClassWriter.ConstantPoolWriter#visitInvokeDynamic(CONSTANT_InvokeDynamic_info, ClassOutputStream)::: constant pool writer visit invoke dynamic:::out->writeShort->out->writeShort->return
ClassWriter.ConstantPoolWriter#visitDynamicConstant(CONSTANT_Dynamic_info, ClassOutputStream)::: constant pool writer visit dynamic constant:::out->writeShort->out->writeShort->return
ClassWriter.ConstantPoolWriter#visitLong(CONSTANT_Long_info, ClassOutputStream)::: constant pool writer visit long:::out->writeLong->return
ClassWriter.ConstantPoolWriter#visitMethodHandle(CONSTANT_MethodHandle_info, ClassOutputStream)::: constant pool writer visit method handle:::out->writeByte->out->writeShort->return
ClassWriter.ConstantPoolWriter#visitMethodType(CONSTANT_MethodType_info, ClassOutputStream)::: constant pool writer visit method type:::out->writeShort->return
ClassWriter.ConstantPoolWriter#visitMethodref(CONSTANT_Methodref_info, ClassOutputStream)::: constant pool writer visit methodref:::return->writeRef
ClassWriter.ConstantPoolWriter#visitModule(CONSTANT_Module_info, ClassOutputStream)::: constant pool writer visit module:::out->writeShort->return
ClassWriter.ConstantPoolWriter#visitNameAndType(CONSTANT_NameAndType_info, ClassOutputStream)::: constant pool writer visit name and type:::out->writeShort->out->writeShort->return
ClassWriter.ConstantPoolWriter#visitPackage(CONSTANT_Package_info, ClassOutputStream)::: constant pool writer visit package:::out->writeShort->return
ClassWriter.ConstantPoolWriter#visitString(CONSTANT_String_info, ClassOutputStream)::: constant pool writer visit string:::out->writeShort->return
ClassWriter.ConstantPoolWriter#visitUtf8(CONSTANT_Utf8_info, ClassOutputStream)::: constant pool writer visit utf8:::out->writeUTF->return
ClassWriter.ConstantPoolWriter#writeRef(CPRefInfo, ClassOutputStream)::: constant pool writer write ref:::out->writeShort->out->writeShort->return
ClassWriter.AttributeWriter#write(Attributes, ClassOutputStream)::: attribute writer write:::size->attributes->size->out->writeShort->foreach->write
ClassWriter.AttributeWriter#write(Attribute, ClassOutputStream)::: attribute writer write:::out->writeShort->sharedOut->reset->attr->accept->out->sharedOut->size->writeInt->sharedOut->writeTo
ClassWriter.AttributeWriter#visitDefault(DefaultAttribute, ClassOutputStream)::: attribute writer visit default:::out->write->return
ClassWriter.AttributeWriter#visitAnnotationDefault(AnnotationDefault_attribute, ClassOutputStream)::: attribute writer visit annotation default:::annotationWriter->write->return
ClassWriter.AttributeWriter#visitBootstrapMethods(BootstrapMethods_attribute, ClassOutputStream)::: attribute writer visit bootstrap methods:::out->writeShort->foreach->out->writeShort->bsm_args_count->out->writeShort->foreach->out->writeShort->return
ClassWriter.AttributeWriter#visitCharacterRangeTable(CharacterRangeTable_attribute, ClassOutputStream)::: attribute writer visit character range table:::out->writeShort->foreach->writeCharacterRangeTableEntry->return
ClassWriter.AttributeWriter#writeCharacterRangeTableEntry(CharacterRangeTable_attribute.Entry, ClassOutputStream)::: attribute writer write character range table entry:::out->writeShort->out->writeShort->out->writeInt->out->writeInt->out->writeShort
ClassWriter.AttributeWriter#visitCode(Code_attribute, ClassOutputStream)::: attribute writer visit code:::out->writeShort->out->writeShort->out->writeInt->out->write->out->writeShort->foreach->writeExceptionTableEntry->new->AttributeWriter->write->return
ClassWriter.AttributeWriter#writeExceptionTableEntry(Code_attribute.Exception_data, ClassOutputStream)::: attribute writer write exception table entry:::out->writeShort->out->writeShort->out->writeShort->out->writeShort
ClassWriter.AttributeWriter#visitCompilationID(CompilationID_attribute, ClassOutputStream)::: attribute writer visit compilation d:::out->writeShort->return
ClassWriter.AttributeWriter#visitConstantValue(ConstantValue_attribute, ClassOutputStream)::: attribute writer visit constant value:::out->writeShort->return
ClassWriter.AttributeWriter#visitDeprecated(Deprecated_attribute, ClassOutputStream)::: attribute writer visit deprecated:::return
ClassWriter.AttributeWriter#visitEnclosingMethod(EnclosingMethod_attribute, ClassOutputStream)::: attribute writer visit enclosing method:::out->writeShort->out->writeShort->return
ClassWriter.AttributeWriter#visitExceptions(Exceptions_attribute, ClassOutputStream)::: attribute writer visit exceptions:::out->writeShort->foreach->out->writeShort->return
ClassWriter.AttributeWriter#visitInnerClasses(InnerClasses_attribute, ClassOutputStream)::: attribute writer visit inner classes:::out->writeShort->foreach->writeInnerClassesInfo->return
ClassWriter.AttributeWriter#writeInnerClassesInfo(InnerClasses_attribute.Info, ClassOutputStream)::: attribute writer write inner classes info:::out->writeShort->out->writeShort->out->writeShort->writeAccessFlags
ClassWriter.AttributeWriter#visitLineNumberTable(LineNumberTable_attribute, ClassOutputStream)::: attribute writer visit line number table:::out->writeShort->foreach->writeLineNumberTableEntry->return
ClassWriter.AttributeWriter#writeLineNumberTableEntry(LineNumberTable_attribute.Entry, ClassOutputStream)::: attribute writer write line number table entry:::out->writeShort->out->writeShort
ClassWriter.AttributeWriter#visitLocalVariableTable(LocalVariableTable_attribute, ClassOutputStream)::: attribute writer visit local variable table:::out->writeShort->foreach->writeLocalVariableTableEntry->return
ClassWriter.AttributeWriter#writeLocalVariableTableEntry(LocalVariableTable_attribute.Entry, ClassOutputStream)::: attribute writer write local variable table entry:::out->writeShort->out->writeShort->out->writeShort->out->writeShort->out->writeShort
ClassWriter.AttributeWriter#visitLocalVariableTypeTable(LocalVariableTypeTable_attribute, ClassOutputStream)::: attribute writer visit local variable type table:::out->writeShort->foreach->writeLocalVariableTypeTableEntry->return
ClassWriter.AttributeWriter#writeLocalVariableTypeTableEntry(LocalVariableTypeTable_attribute.Entry, ClassOutputStream)::: attribute writer write local variable type table entry:::out->writeShort->out->writeShort->out->writeShort->out->writeShort->out->writeShort
ClassWriter.AttributeWriter#visitNestHost(NestHost_attribute, ClassOutputStream)::: attribute writer visit nest host:::out->writeShort->return
ClassWriter.AttributeWriter#visitMethodParameters(MethodParameters_attribute, ClassOutputStream)::: attribute writer visit method parameters:::out->writeByte->foreach->out->writeShort->out->writeShort->return
ClassWriter.AttributeWriter#visitModule(Module_attribute, ClassOutputStream)::: attribute writer visit module:::out->writeShort->out->writeShort->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->foreach->out->writeShort->return
ClassWriter.AttributeWriter#visitModuleHashes(ModuleHashes_attribute, ClassOutputStream)::: attribute writer visit module hashes:::out->writeShort->out->writeShort->foreach->out->writeShort->out->writeShort->foreach->out->writeByte->return
ClassWriter.AttributeWriter#visitModuleMainClass(ModuleMainClass_attribute, ClassOutputStream)::: attribute writer visit module main class:::out->writeShort->return
ClassWriter.AttributeWriter#visitModulePackages(ModulePackages_attribute, ClassOutputStream)::: attribute writer visit module packages:::out->writeShort->foreach->out->writeShort->return
ClassWriter.AttributeWriter#visitModuleResolution(ModuleResolution_attribute, ClassOutputStream)::: attribute writer visit module resolution:::out->writeShort->return
ClassWriter.AttributeWriter#visitModuleTarget(ModuleTarget_attribute, ClassOutputStream)::: attribute writer visit module target:::out->writeShort->return
ClassWriter.AttributeWriter#visitNestMembers(NestMembers_attribute, ClassOutputStream)::: attribute writer visit nest members:::out->writeShort->foreach->out->writeShort->return
ClassWriter.AttributeWriter#visitRuntimeInvisibleAnnotations(RuntimeInvisibleAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime invisible annotations:::annotationWriter->write->return
ClassWriter.AttributeWriter#visitRuntimeInvisibleParameterAnnotations(RuntimeInvisibleParameterAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime invisible parameter annotations:::out->writeByte->foreach->annotationWriter->write->return
ClassWriter.AttributeWriter#visitRuntimeInvisibleTypeAnnotations(RuntimeInvisibleTypeAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime invisible type annotations:::annotationWriter->write->return
ClassWriter.AttributeWriter#visitRuntimeVisibleAnnotations(RuntimeVisibleAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime visible annotations:::annotationWriter->write->return
ClassWriter.AttributeWriter#visitRuntimeVisibleParameterAnnotations(RuntimeVisibleParameterAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime visible parameter annotations:::out->writeByte->foreach->annotationWriter->write->return
ClassWriter.AttributeWriter#visitRuntimeVisibleTypeAnnotations(RuntimeVisibleTypeAnnotations_attribute, ClassOutputStream)::: attribute writer visit runtime visible type annotations:::annotationWriter->write->return
ClassWriter.AttributeWriter#visitSignature(Signature_attribute, ClassOutputStream)::: attribute writer visit signature:::out->writeShort->return
ClassWriter.AttributeWriter#visitSourceDebugExtension(SourceDebugExtension_attribute, ClassOutputStream)::: attribute writer visit source debug extension:::out->write->return
ClassWriter.AttributeWriter#visitSourceFile(SourceFile_attribute, ClassOutputStream)::: attribute writer visit source file:::out->writeShort->return
ClassWriter.AttributeWriter#visitSourceID(SourceID_attribute, ClassOutputStream)::: attribute writer visit source d:::out->writeShort->return
ClassWriter.AttributeWriter#visitStackMap(StackMap_attribute, ClassOutputStream)::: attribute writer visit stack map:::if->new->StackMapTableWriter->out->writeShort->foreach->stackMapWriter->write->return
ClassWriter.AttributeWriter#visitStackMapTable(StackMapTable_attribute, ClassOutputStream)::: attribute writer visit stack map table:::if->new->StackMapTableWriter->out->writeShort->foreach->stackMapWriter->write->return
ClassWriter.AttributeWriter#visitSynthetic(Synthetic_attribute, ClassOutputStream)::: attribute writer visit synthetic:::return
ClassWriter.AttributeWriter#writeAccessFlags(AccessFlags, ClassOutputStream)::: attribute writer write access flags:::sharedOut->writeShort
ClassWriter.StackMapTableWriter#write(stack_map_frame, ClassOutputStream)::: stack map table writer write:::out->write->frame->accept
ClassWriter.StackMapTableWriter#visit_same_frame(same_frame, ClassOutputStream)::: stack map table writer visit_same_frame:::return
ClassWriter.StackMapTableWriter#visit_same_locals_1_stack_item_frame(same_locals_1_stack_item_frame, ClassOutputStream)::: stack map table writer visit_same_locals_1_stack_item_frame:::writeVerificationTypeInfo->return
ClassWriter.StackMapTableWriter#visit_same_locals_1_stack_item_frame_extended(same_locals_1_stack_item_frame_extended, ClassOutputStream)::: stack map table writer visit_same_locals_1_stack_item_frame_extended:::out->writeShort->writeVerificationTypeInfo->return
ClassWriter.StackMapTableWriter#visit_chop_frame(chop_frame, ClassOutputStream)::: stack map table writer visit_chop_frame:::out->writeShort->return
ClassWriter.StackMapTableWriter#visit_same_frame_extended(same_frame_extended, ClassOutputStream)::: stack map table writer visit_same_frame_extended:::out->writeShort->return
ClassWriter.StackMapTableWriter#visit_append_frame(append_frame, ClassOutputStream)::: stack map table writer visit_append_frame:::out->writeShort->foreach->writeVerificationTypeInfo->return
ClassWriter.StackMapTableWriter#visit_full_frame(full_frame, ClassOutputStream)::: stack map table writer visit_full_frame:::out->writeShort->out->writeShort->foreach->writeVerificationTypeInfo->out->writeShort->foreach->writeVerificationTypeInfo->return
ClassWriter.StackMapTableWriter#writeVerificationTypeInfo(verification_type_info, ClassOutputStream)::: stack map table writer write verification type info:::out->write->switch->break->o->out->writeShort->break->u->out->writeShort->break->throw->new->Error
ClassWriter.AnnotationWriter#write(Annotation[], ClassOutputStream)::: annotation writer write:::out->writeShort->foreach->write
ClassWriter.AnnotationWriter#write(TypeAnnotation[], ClassOutputStream)::: annotation writer write:::out->writeShort->foreach->write
ClassWriter.AnnotationWriter#write(Annotation, ClassOutputStream)::: annotation writer write:::out->writeShort->out->writeShort->foreach->write
ClassWriter.AnnotationWriter#write(TypeAnnotation, ClassOutputStream)::: annotation writer write:::write->write
ClassWriter.AnnotationWriter#write(element_value_pair, ClassOutputStream)::: annotation writer write:::out->writeShort->write
ClassWriter.AnnotationWriter#write(element_value, ClassOutputStream)::: annotation writer write:::out->writeByte->ev->accept
ClassWriter.AnnotationWriter#visitPrimitive(Primitive_element_value, ClassOutputStream)::: annotation writer visit primitive:::out->writeShort->return
ClassWriter.AnnotationWriter#visitEnum(Enum_element_value, ClassOutputStream)::: annotation writer visit enum:::out->writeShort->out->writeShort->return
ClassWriter.AnnotationWriter#visitClass(Class_element_value, ClassOutputStream)::: annotation writer visit class:::out->writeShort->return
ClassWriter.AnnotationWriter#visitAnnotation(Annotation_element_value, ClassOutputStream)::: annotation writer visit annotation:::write->return
ClassWriter.AnnotationWriter#visitArray(Array_element_value, ClassOutputStream)::: annotation writer visit array:::out->writeShort->foreach->write->return
ClassWriter.AnnotationWriter#write(TypeAnnotation.Position, ClassOutputStream)::: annotation writer write:::out->targetTypeValue->writeByte->switch->out->writeShort->break->table_length->out->writeShort->for->i->break->out->writeShort->break->break->out->writeByte->break->out->writeByte->out->writeByte->break->out->writeShort->break->out->writeShort->break->out->writeByte->break->out->writeShort->out->writeByte->break->break->throw->new->AssertionError->throw->new->AssertionError->out->size->writeByte->foreach->getBinaryFromTypePath->out->writeByte
Code_attribute.InvalidIndex#getMessage()::: invalid index get message:::return
Code_attribute#getByte(int)::: code_attribute get byte:::if->throw->new->InvalidIndex->return
Code_attribute#getUnsignedByte(int)::: code_attribute get unsigned byte:::if->throw->new->InvalidIndex->return
Code_attribute#getShort(int)::: code_attribute get short:::if->throw->new->InvalidIndex->return
Code_attribute#getUnsignedShort(int)::: code_attribute get unsigned short:::if->throw->new->InvalidIndex->return
Code_attribute#getInt(int)::: code_attribute get int:::if->throw->new->InvalidIndex->return->getShort->getShort
Code_attribute#accept(Visitor, D)::: code_attribute accept:::return->visitor->visitCode
Code_attribute#getInstructions()::: code_attribute get instructions:::return->new->Iterator<Instruction>
CompilationID_attribute#getCompilationID(ConstantPool)::: compilation d_attribute get compilation d:::return->constant_pool->getUTF8Value
CompilationID_attribute#accept(Visitor, D)::: compilation d_attribute accept:::return->visitor->visitCompilationID
ConstantPool.InvalidIndex#getMessage()::: invalid index get message:::return
ConstantPool.UnexpectedEntry#getMessage()::: unexpected entry get message:::return
ConstantPool.InvalidEntry#getMessage()::: invalid entry get message:::return
ConstantPool.EntryNotFound#getMessage()::: entry not found get message:::return
ConstantPool#size()::: constant pool size:::return
ConstantPool#byteLength()::: constant pool byte length:::length->for->i->size->return
ConstantPool#get(int)::: constant pool get:::if->throw->new->InvalidIndex->info->if->throw->new->InvalidIndex->return
ConstantPool#get(int, int)::: constant pool get:::info->get->if->info->getTag->throw->info->getTag->new->UnexpectedEntry->return
ConstantPool#getUTF8Info(int)::: constant pool get f8 info:::return->get
ConstantPool#getClassInfo(int)::: constant pool get class info:::return->get
ConstantPool#getModuleInfo(int)::: constant pool get module info:::return->get
ConstantPool#getNameAndTypeInfo(int)::: constant pool get name and type info:::return->get
ConstantPool#getPackageInfo(int)::: constant pool get package info:::return->get
ConstantPool#getUTF8Value(int)::: constant pool get f8 value:::return->getUTF8Info
ConstantPool#getUTF8Index(String)::: constant pool get f8 index:::for->i->throw->new->EntryNotFound
ConstantPool#entries()::: constant pool entries:::return->new->Iterator<CPInfo>
ConstantPool.Visitor#visitClass(CONSTANT_Class_info, P)::: visitor visit class:::
ConstantPool.Visitor#visitDouble(CONSTANT_Double_info, P)::: visitor visit double:::
ConstantPool.Visitor#visitFieldref(CONSTANT_Fieldref_info, P)::: visitor visit fieldref:::
ConstantPool.Visitor#visitFloat(CONSTANT_Float_info, P)::: visitor visit float:::
ConstantPool.Visitor#visitInteger(CONSTANT_Integer_info, P)::: visitor visit integer:::
ConstantPool.Visitor#visitInterfaceMethodref(CONSTANT_InterfaceMethodref_info, P)::: visitor visit interface methodref:::
ConstantPool.Visitor#visitInvokeDynamic(CONSTANT_InvokeDynamic_info, P)::: visitor visit invoke dynamic:::
ConstantPool.Visitor#visitDynamicConstant(CONSTANT_Dynamic_info, P)::: visitor visit dynamic constant:::
ConstantPool.Visitor#visitLong(CONSTANT_Long_info, P)::: visitor visit long:::
ConstantPool.Visitor#visitMethodref(CONSTANT_Methodref_info, P)::: visitor visit methodref:::
ConstantPool.Visitor#visitMethodHandle(CONSTANT_MethodHandle_info, P)::: visitor visit method handle:::
ConstantPool.Visitor#visitMethodType(CONSTANT_MethodType_info, P)::: visitor visit method type:::
ConstantPool.Visitor#visitModule(CONSTANT_Module_info, P)::: visitor visit module:::
ConstantPool.Visitor#visitNameAndType(CONSTANT_NameAndType_info, P)::: visitor visit name and type:::
ConstantPool.Visitor#visitPackage(CONSTANT_Package_info, P)::: visitor visit package:::
ConstantPool.Visitor#visitString(CONSTANT_String_info, P)::: visitor visit string:::
ConstantPool.Visitor#visitUtf8(CONSTANT_Utf8_info, P)::: visitor visit utf8:::
ConstantPool.CPInfo#getTag()::: info get tag:::
ConstantPool.CPInfo#size():::The number of slots in the constant pool used by this entry:::return
ConstantPool.CPInfo#byteLength()::: info byte length:::
ConstantPool.CPInfo#accept(Visitor, D)::: info accept:::
ConstantPool.CPRefInfo#getTag()::: ref info get tag:::return
ConstantPool.CPRefInfo#byteLength()::: ref info byte length:::return
ConstantPool.CPRefInfo#getClassInfo()::: ref info get class info:::return->cp->getClassInfo
ConstantPool.CPRefInfo#getClassName()::: ref info get class name:::return->cp->getClassInfo->getName
ConstantPool.CPRefInfo#getNameAndTypeInfo()::: ref info get name and type info:::return->cp->getNameAndTypeInfo
ConstantPool.CONSTANT_Class_info#getTag()::: t_ class_info get tag:::return
ConstantPool.CONSTANT_Class_info#byteLength()::: t_ class_info byte length:::return
ConstantPool.CONSTANT_Class_info#getName():::Get the raw value of the class referenced by this constant pool entry:::return->cp->getUTF8Value
ConstantPool.CONSTANT_Class_info#getBaseName():::If this constant pool entry identifies either a class or interface type, or a possibly multi-dimensional array of a class of interface type, return the name of the class or interface in internal form:::name->getName->if->name->startsWith->index->name->indexOf->if->return->return->name->name->length->substring->else->return
ConstantPool.CONSTANT_Class_info#getDimensionCount()::: t_ class_info get dimension count:::name->getName->count->while->name->charAt->return
ConstantPool.CONSTANT_Class_info#toString()::: t_ class_info to string:::return
ConstantPool.CONSTANT_Class_info#accept(Visitor, D)::: t_ class_info accept:::return->visitor->visitClass
ConstantPool.CONSTANT_Double_info#getTag()::: t_ double_info get tag:::return
ConstantPool.CONSTANT_Double_info#byteLength()::: t_ double_info byte length:::return
ConstantPool.CONSTANT_Double_info#size()::: t_ double_info size:::return
ConstantPool.CONSTANT_Double_info#toString()::: t_ double_info to string:::return
ConstantPool.CONSTANT_Double_info#accept(Visitor, D)::: t_ double_info accept:::return->visitor->visitDouble
ConstantPool.CONSTANT_Fieldref_info#toString()::: t_ fieldref_info to string:::return
ConstantPool.CONSTANT_Fieldref_info#accept(Visitor, D)::: t_ fieldref_info accept:::return->visitor->visitFieldref
ConstantPool.CONSTANT_Float_info#getTag()::: t_ float_info get tag:::return
ConstantPool.CONSTANT_Float_info#byteLength()::: t_ float_info byte length:::return
ConstantPool.CONSTANT_Float_info#toString()::: t_ float_info to string:::return
ConstantPool.CONSTANT_Float_info#accept(Visitor, D)::: t_ float_info accept:::return->visitor->visitFloat
ConstantPool.CONSTANT_Integer_info#getTag()::: t_ integer_info get tag:::return
ConstantPool.CONSTANT_Integer_info#byteLength()::: t_ integer_info byte length:::return
ConstantPool.CONSTANT_Integer_info#toString()::: t_ integer_info to string:::return
ConstantPool.CONSTANT_Integer_info#accept(Visitor, D)::: t_ integer_info accept:::return->visitor->visitInteger
ConstantPool.CONSTANT_InterfaceMethodref_info#toString()::: t_ interface methodref_info to string:::return
ConstantPool.CONSTANT_InterfaceMethodref_info#accept(Visitor, D)::: t_ interface methodref_info accept:::return->visitor->visitInterfaceMethodref
ConstantPool.CONSTANT_InvokeDynamic_info#getTag()::: t_ invoke dynamic_info get tag:::return
ConstantPool.CONSTANT_InvokeDynamic_info#byteLength()::: t_ invoke dynamic_info byte length:::return
ConstantPool.CONSTANT_InvokeDynamic_info#toString()::: t_ invoke dynamic_info to string:::return
ConstantPool.CONSTANT_InvokeDynamic_info#accept(Visitor, D)::: t_ invoke dynamic_info accept:::return->visitor->visitInvokeDynamic
ConstantPool.CONSTANT_InvokeDynamic_info#getNameAndTypeInfo()::: t_ invoke dynamic_info get name and type info:::return->cp->getNameAndTypeInfo
ConstantPool.CONSTANT_Long_info#getTag()::: t_ long_info get tag:::return
ConstantPool.CONSTANT_Long_info#size()::: t_ long_info size:::return
ConstantPool.CONSTANT_Long_info#byteLength()::: t_ long_info byte length:::return
ConstantPool.CONSTANT_Long_info#toString()::: t_ long_info to string:::return
ConstantPool.CONSTANT_Long_info#accept(Visitor, D)::: t_ long_info accept:::return->visitor->visitLong
ConstantPool.CONSTANT_MethodHandle_info#getTag()::: t_ method handle_info get tag:::return
ConstantPool.CONSTANT_MethodHandle_info#byteLength()::: t_ method handle_info byte length:::return
ConstantPool.CONSTANT_MethodHandle_info#toString()::: t_ method handle_info to string:::return
ConstantPool.CONSTANT_MethodHandle_info#accept(Visitor, D)::: t_ method handle_info accept:::return->visitor->visitMethodHandle
ConstantPool.CONSTANT_MethodHandle_info#getCPRefInfo()::: t_ method handle_info get ref info:::expected->actual->cp->get->getTag->switch->return->cp->get
ConstantPool.CONSTANT_MethodType_info#getTag()::: t_ method type_info get tag:::return
ConstantPool.CONSTANT_MethodType_info#byteLength()::: t_ method type_info byte length:::return
ConstantPool.CONSTANT_MethodType_info#toString()::: t_ method type_info to string:::return
ConstantPool.CONSTANT_MethodType_info#accept(Visitor, D)::: t_ method type_info accept:::return->visitor->visitMethodType
ConstantPool.CONSTANT_MethodType_info#getType()::: t_ method type_info get type:::return->cp->getUTF8Value
ConstantPool.CONSTANT_Methodref_info#toString()::: t_ methodref_info to string:::return
ConstantPool.CONSTANT_Methodref_info#accept(Visitor, D)::: t_ methodref_info accept:::return->visitor->visitMethodref
ConstantPool.CONSTANT_Module_info#getTag()::: t_ module_info get tag:::return
ConstantPool.CONSTANT_Module_info#byteLength()::: t_ module_info byte length:::return
ConstantPool.CONSTANT_Module_info#getName():::Get the raw value of the module name referenced by this constant pool entry:::return->cp->getUTF8Value
ConstantPool.CONSTANT_Module_info#toString()::: t_ module_info to string:::return
ConstantPool.CONSTANT_Module_info#accept(Visitor, D)::: t_ module_info accept:::return->visitor->visitModule
ConstantPool.CONSTANT_NameAndType_info#getTag()::: t_ name and type_info get tag:::return
ConstantPool.CONSTANT_NameAndType_info#byteLength()::: t_ name and type_info byte length:::return
ConstantPool.CONSTANT_NameAndType_info#getName()::: t_ name and type_info get name:::return->cp->getUTF8Value
ConstantPool.CONSTANT_NameAndType_info#getType()::: t_ name and type_info get type:::return->cp->getUTF8Value
ConstantPool.CONSTANT_NameAndType_info#accept(Visitor, D)::: t_ name and type_info accept:::return->visitor->visitNameAndType
ConstantPool.CONSTANT_NameAndType_info#toString()::: t_ name and type_info to string:::return
ConstantPool.CONSTANT_Dynamic_info#getTag()::: t_ dynamic_info get tag:::return
ConstantPool.CONSTANT_Dynamic_info#byteLength()::: t_ dynamic_info byte length:::return
ConstantPool.CONSTANT_Dynamic_info#toString()::: t_ dynamic_info to string:::return
ConstantPool.CONSTANT_Dynamic_info#accept(Visitor, D)::: t_ dynamic_info accept:::return->visitor->visitDynamicConstant
ConstantPool.CONSTANT_Dynamic_info#getNameAndTypeInfo()::: t_ dynamic_info get name and type info:::return->cp->getNameAndTypeInfo
ConstantPool.CONSTANT_Package_info#getTag()::: t_ package_info get tag:::return
ConstantPool.CONSTANT_Package_info#byteLength()::: t_ package_info byte length:::return
ConstantPool.CONSTANT_Package_info#getName():::Get the raw value of the package name referenced by this constant pool entry:::return->cp->getUTF8Value
ConstantPool.CONSTANT_Package_info#toString()::: t_ package_info to string:::return
ConstantPool.CONSTANT_Package_info#accept(Visitor, D)::: t_ package_info accept:::return->visitor->visitPackage
ConstantPool.CONSTANT_String_info#getTag()::: t_ string_info get tag:::return
ConstantPool.CONSTANT_String_info#byteLength()::: t_ string_info byte length:::return
ConstantPool.CONSTANT_String_info#getString()::: t_ string_info get string:::return->cp->getUTF8Value
ConstantPool.CONSTANT_String_info#accept(Visitor, D)::: t_ string_info accept:::return->visitor->visitString
ConstantPool.CONSTANT_String_info#toString()::: t_ string_info to string:::return
ConstantPool.CONSTANT_Utf8_info#getTag()::: t_ utf8_info get tag:::return
ConstantPool.CONSTANT_Utf8_info#byteLength()::: t_ utf8_info byte length:::sizeOut->new->SizeOutputStream->out->new->DataOutputStream->try->out->writeUTF->catch->finally->return
ConstantPool.CONSTANT_Utf8_info#toString()::: t_ utf8_info to string:::if->value->length->isPrintableAscii->return->else->return->value->length
ConstantPool.CONSTANT_Utf8_info#isPrintableAscii(String)::: t_ utf8_info is printable ascii:::for->i->s->length->return
ConstantPool.CONSTANT_Utf8_info#accept(Visitor, D)::: t_ utf8_info accept:::return->visitor->visitUtf8
ConstantValue_attribute#accept(Visitor, D)::: constant value_attribute accept:::return->visitor->visitConstantValue
DefaultAttribute#accept(Visitor, P)::: default attribute accept:::return->visitor->visitDefault
Dependencies.ClassFileReader#getClassFile(String):::Get the ClassFile object for a specified class.:::
Dependencies.Recorder#addDependency(Dependency):::Record a dependency that has been found.:::
Dependencies#getDefaultFinder():::Get the  default finder used to locate the dependencies for a class.:::return->new->APIDependencyFinder
Dependencies#getAPIFinder(int):::Get a finder used to locate the API dependencies for a class:::return->new->APIDependencyFinder
Dependencies#getClassDependencyFinder():::Get a finder to do class dependency analysis.:::return->new->ClassDependencyFinder
Dependencies#getFinder():::Get the finder used to locate the dependencies for a class.:::if->getDefaultFinder->return
Dependencies#setFinder(Finder):::Set the finder used to locate the dependencies for a class.:::Objects->requireNonNull
Dependencies#getDefaultFilter():::Get the default filter used to determine included when searching the transitive closure of all the dependencies:::return->DefaultFilter->instance
Dependencies#getRegexFilter(Pattern):::Get a filter which uses a regular expression on the target's class name to determine if a dependency is of interest.:::return->new->TargetRegexFilter
Dependencies#getPackageFilter(Set, boolean):::Get a filter which checks the package of a target's class name to determine if a dependency is of interest:::return->new->TargetPackageFilter
Dependencies#getFilter():::Get the filter used to determine the dependencies included when searching the transitive closure of all the dependencies:::if->getDefaultFilter->return
Dependencies#setFilter(Filter):::Set the filter used to determine the dependencies included when searching the transitive closure of all the dependencies.:::Objects->requireNonNull
Dependencies#findAllDependencies(ClassFileReader, Set, boolean):::Find the dependencies of a class, using the current Dependencies#getFinder finder and Dependencies#getFilter filter:::results->new->HashSet<>->r->results->add->findAllDependencies->return
Dependencies#findAllDependencies(ClassFileReader, Set, boolean, Recorder):::Find the dependencies of a class, using the current Dependencies#getFinder finder and Dependencies#getFilter filter:::doneClasses->new->HashSet<>->getFinder->getFilter->deque->new->LinkedList<>->className->while->deque->poll->doneClasses->add->cf->classFinder->getClassFile->foreach->finder->findDependencies->recorder->addDependency->if->filter->accepts->cn->d->getTarget->getClassName->if->doneClasses->contains->deque->add
Dependencies.SimpleLocation#getName()::: simple location get name:::return
Dependencies.SimpleLocation#getClassName()::: simple location get class name:::return
Dependencies.SimpleLocation#getPackageName()::: simple location get package name:::i->name->lastIndexOf->return->name->substring->replace
Dependencies.SimpleLocation#equals(Object)::: simple location equals:::if->return->if->return->return->name->equals
Dependencies.SimpleLocation#hashCode()::: simple location hash code:::return->name->hashCode
Dependencies.SimpleLocation#toString()::: simple location to string:::return
Dependencies.SimpleDependency#getOrigin()::: simple dependency get origin:::return
Dependencies.SimpleDependency#getTarget()::: simple dependency get target:::return
Dependencies.SimpleDependency#equals(Object)::: simple dependency equals:::if->return->if->return->o->return->origin->equals->target->equals
Dependencies.SimpleDependency#hashCode()::: simple dependency hash code:::return->origin->hashCode->target->hashCode
Dependencies.SimpleDependency#toString()::: simple dependency to string:::return
Dependencies.DefaultFilter#instance()::: default filter instance:::if->new->DefaultFilter->return
Dependencies.DefaultFilter#accepts(Dependency)::: default filter accepts:::return
Dependencies.TargetRegexFilter#accepts(Dependency)::: target regex filter accepts:::return->pattern->dependency->getTarget->getClassName->matcher->matches
Dependencies.TargetPackageFilter#accepts(Dependency)::: target package filter accepts:::pn->dependency->getTarget->getPackageName->if->packageNames->contains->return->if->foreach->if->pn->startsWith->return->return
Dependencies.ClassDependencyFinder#findDependencies(ClassFile)::: class dependency finder find dependencies:::v->new->Visitor->foreach->entries->v->scan->try->v->addClass->v->addClasses->v->scan->foreach->v->scan->foreach->v->scan->e->get->if->v->addClasses->catch->throw->new->ClassFileError->finally->return
Dependencies.APIDependencyFinder#findDependencies(ClassFile)::: dependency finder find dependencies:::try->v->new->Visitor->v->addClass->v->addClasses->foreach->if->checkAccess->v->scan->foreach->if->checkAccess->v->scan->e->get->if->v->addClasses->return->catch->throw->new->ClassFileError->finally
Dependencies.APIDependencyFinder#checkAccess(AccessFlags)::: dependency finder check access:::isPublic->flags->is->isProtected->flags->is->isPrivate->flags->is->isPackage->if->return->else->if->return->else->if->return->else->return
Dependencies.BasicDependencyFinder#getLocation(String)::: basic dependency finder get location:::return->locations->SimpleLocation->new->computeIfAbsent
Dependencies.BasicDependencyFinder.Visitor#scan(Descriptor, Attributes)::: visitor scan:::try->new->Signature->getType->scan->scan->catch->throw->new->ClassFileError->finally
Dependencies.BasicDependencyFinder.Visitor#scan(CPInfo)::: visitor scan:::cpInfo->accept
Dependencies.BasicDependencyFinder.Visitor#scan(Type)::: visitor scan:::t->accept
Dependencies.BasicDependencyFinder.Visitor#scan(Attributes)::: visitor scan:::try->sa->attrs->get->if->sa->getParsedSignature->getType->scan->attrs->get->scan->attrs->get->scan->catch->throw->new->ClassFileError->finally
Dependencies.BasicDependencyFinder.Visitor#scan(RuntimeAnnotations_attribute)::: visitor scan:::if->return->for->i
Dependencies.BasicDependencyFinder.Visitor#scan(RuntimeParameterAnnotations_attribute)::: visitor scan:::if->return->for->param
Dependencies.BasicDependencyFinder.Visitor#addClass(int)::: visitor add class:::if->name->constant_pool->getClassInfo->getBaseName->if->addDependency
Dependencies.BasicDependencyFinder.Visitor#addClasses(int[])::: visitor add classes:::foreach->addClass
Dependencies.BasicDependencyFinder.Visitor#addDependency(String)::: visitor add dependency:::deps->getLocation->new->SimpleDependency->add
Dependencies.BasicDependencyFinder.Visitor#visitClass(CONSTANT_Class_info, Void)::: visitor visit class:::try->if->info->getName->startsWith->new->Signature->getType->accept->else->info->getBaseName->addDependency->return->catch->throw->new->ClassFileError->finally
Dependencies.BasicDependencyFinder.Visitor#visitDouble(CONSTANT_Double_info, Void)::: visitor visit double:::return
Dependencies.BasicDependencyFinder.Visitor#visitFieldref(CONSTANT_Fieldref_info, Void)::: visitor visit fieldref:::return->visitRef
Dependencies.BasicDependencyFinder.Visitor#visitFloat(CONSTANT_Float_info, Void)::: visitor visit float:::return
Dependencies.BasicDependencyFinder.Visitor#visitInteger(CONSTANT_Integer_info, Void)::: visitor visit integer:::return
Dependencies.BasicDependencyFinder.Visitor#visitInterfaceMethodref(CONSTANT_InterfaceMethodref_info, Void)::: visitor visit interface methodref:::return->visitRef
Dependencies.BasicDependencyFinder.Visitor#visitInvokeDynamic(CONSTANT_InvokeDynamic_info, Void)::: visitor visit invoke dynamic:::return
Dependencies.BasicDependencyFinder.Visitor#visitDynamicConstant(CONSTANT_Dynamic_info, Void)::: visitor visit dynamic constant:::return
Dependencies.BasicDependencyFinder.Visitor#visitLong(CONSTANT_Long_info, Void)::: visitor visit long:::return
Dependencies.BasicDependencyFinder.Visitor#visitMethodHandle(CONSTANT_MethodHandle_info, Void)::: visitor visit method handle:::return
Dependencies.BasicDependencyFinder.Visitor#visitMethodType(CONSTANT_MethodType_info, Void)::: visitor visit method type:::return
Dependencies.BasicDependencyFinder.Visitor#visitMethodref(CONSTANT_Methodref_info, Void)::: visitor visit methodref:::return->visitRef
Dependencies.BasicDependencyFinder.Visitor#visitModule(CONSTANT_Module_info, Void)::: visitor visit module:::return
Dependencies.BasicDependencyFinder.Visitor#visitNameAndType(CONSTANT_NameAndType_info, Void)::: visitor visit name and type:::try->new->Signature->getType->accept->return->catch->throw->new->ClassFileError->finally
Dependencies.BasicDependencyFinder.Visitor#visitPackage(CONSTANT_Package_info, Void)::: visitor visit package:::return
Dependencies.BasicDependencyFinder.Visitor#visitString(CONSTANT_String_info, Void)::: visitor visit string:::return
Dependencies.BasicDependencyFinder.Visitor#visitUtf8(CONSTANT_Utf8_info, Void)::: visitor visit utf8:::return
Dependencies.BasicDependencyFinder.Visitor#visitRef(CPRefInfo, Void)::: visitor visit ref:::try->info->getClassInfo->visitClass->return->catch->throw->new->ClassFileError->finally
Dependencies.BasicDependencyFinder.Visitor#findDependencies(Type)::: visitor find dependencies:::if->t->accept
Dependencies.BasicDependencyFinder.Visitor#findDependencies(List)::: visitor find dependencies:::if->foreach->t->accept
Dependencies.BasicDependencyFinder.Visitor#visitSimpleType(SimpleType, Void)::: visitor visit simple type:::return
Dependencies.BasicDependencyFinder.Visitor#visitArrayType(ArrayType, Void)::: visitor visit array type:::findDependencies->return
Dependencies.BasicDependencyFinder.Visitor#visitMethodType(MethodType, Void)::: visitor visit method type:::findDependencies->findDependencies->findDependencies->findDependencies->return
Dependencies.BasicDependencyFinder.Visitor#visitClassSigType(ClassSigType, Void)::: visitor visit class sig type:::findDependencies->findDependencies->return
Dependencies.BasicDependencyFinder.Visitor#visitClassType(ClassType, Void)::: visitor visit class type:::findDependencies->type->getBinaryName->addDependency->findDependencies->return
Dependencies.BasicDependencyFinder.Visitor#visitTypeParamType(TypeParamType, Void)::: visitor visit type param type:::findDependencies->findDependencies->return
Dependencies.BasicDependencyFinder.Visitor#visitWildcardType(WildcardType, Void)::: visitor visit wildcard type:::findDependencies->return
Dependency.Filter#accepts(Dependency):::Return true if the dependency is of interest.:::
Dependency.Finder#findDependencies(ClassFile):::Find the immediate dependencies of a given class file.:::
Dependency.Location#getName():::Get the name of the class containing the location:::
Dependency.Location#getClassName():::Get the fully-qualified name of the class containing the location.:::
Dependency.Location#getPackageName():::Get the package name of the class containing the location.:::
Dependency#getOrigin():::Get the location that has the dependency.:::
Dependency#getTarget():::Get the location that is being depended upon.:::
Deprecated_attribute#accept(Visitor, D)::: deprecated_attribute accept:::return->visitor->visitDeprecated
Descriptor.InvalidDescriptor#getMessage()::: invalid descriptor get message:::if->return->else->return
Descriptor#getValue(ConstantPool)::: descriptor get value:::return->constant_pool->getUTF8Value
Descriptor#getParameterCount(ConstantPool)::: descriptor get parameter count:::desc->getValue->end->desc->indexOf->if->throw->new->InvalidDescriptor->parse->return
Descriptor#getParameterTypes(ConstantPool)::: descriptor get parameter types:::desc->getValue->end->desc->indexOf->if->throw->new->InvalidDescriptor->return->parse
Descriptor#getReturnType(ConstantPool)::: descriptor get return type:::desc->getValue->end->desc->indexOf->if->throw->new->InvalidDescriptor->return->desc->length->parse
Descriptor#getFieldType(ConstantPool)::: descriptor get field type:::desc->getValue->return->desc->length->parse
Descriptor#parse(String, int, int)::: descriptor parse:::p->sb->new->StringBuilder->dims->while->type->ch->switch->desc->charAt->sb->append->continue->sb->append->continue->continue->break->break->break->break->break->break->sep->desc->indexOf->if->throw->new->InvalidDescriptor->desc->substring->replace->break->break->break->break->throw->new->InvalidDescriptor->if->sb->length->sb->charAt->sb->append->sb->append->for->return->sb->toString
EnclosingMethod_attribute#getClassName(ConstantPool)::: enclosing method_attribute get class name:::return->constant_pool->getClassInfo->getName
EnclosingMethod_attribute#getMethodName(ConstantPool)::: enclosing method_attribute get method name:::if->return->return->constant_pool->getNameAndTypeInfo->getName
EnclosingMethod_attribute#accept(Visitor, D)::: enclosing method_attribute accept:::return->visitor->visitEnclosingMethod
Exceptions_attribute#getException(int, ConstantPool)::: exceptions_attribute get exception:::exception_index->return->constant_pool->getClassInfo->getName
Exceptions_attribute#accept(Visitor, D)::: exceptions_attribute accept:::return->visitor->visitExceptions
Field#byteLength()::: field byte length:::return->attributes->byteLength
Field#getName(ConstantPool)::: field get name:::return->constant_pool->getUTF8Value
InnerClasses_attribute#accept(Visitor, D)::: inner classes_attribute accept:::return->visitor->visitInnerClasses
InnerClasses_attribute.Info#getInnerClassInfo(ConstantPool)::: info get inner class info:::if->return->return->constant_pool->getClassInfo
InnerClasses_attribute.Info#getOuterClassInfo(ConstantPool)::: info get outer class info:::if->return->return->constant_pool->getClassInfo
InnerClasses_attribute.Info#getInnerName(ConstantPool)::: info get inner name:::if->return->return->constant_pool->getUTF8Value
InnerClasses_attribute.Info#length()::: info length:::return
Instruction.KindVisitor#visitNoOperands(Instruction, P):::See Kind#NO_OPERANDS, Kind#WIDE_NO_OPERANDS.:::
Instruction.KindVisitor#visitArrayType(Instruction, TypeKind, P):::See Kind#ATYPE.:::
Instruction.KindVisitor#visitBranch(Instruction, int, P):::See Kind#BRANCH, Kind#BRANCH_W.:::
Instruction.KindVisitor#visitConstantPoolRef(Instruction, int, P):::See Kind#CPREF, Kind#CPREF_W, Kind#WIDE_CPREF_W.:::
Instruction.KindVisitor#visitConstantPoolRefAndValue(Instruction, int, int, P):::See Kind#CPREF_W_UBYTE, Kind#CPREF_W_UBYTE_ZERO, Kind#WIDE_CPREF_W_SHORT.:::
Instruction.KindVisitor#visitLocal(Instruction, int, P):::See Kind#LOCAL, Kind#WIDE_LOCAL.:::
Instruction.KindVisitor#visitLocalAndValue(Instruction, int, int, P):::See Kind#LOCAL_BYTE.:::
Instruction.KindVisitor#visitLookupSwitch(Instruction, int, int, int[], int[], P):::See Kind#DYNAMIC.:::
Instruction.KindVisitor#visitTableSwitch(Instruction, int, int, int, int[], P):::See Kind#DYNAMIC.:::
Instruction.KindVisitor#visitValue(Instruction, int, P):::See Kind#BYTE, Kind#SHORT.:::
Instruction.KindVisitor#visitUnknown(Instruction, P):::Instruction is unrecognized.:::
Instruction#getPC():::Get the position of the instruction within the bytecode array.:::return
Instruction#getByte(int):::Get a byte value, relative to the start of this instruction.:::return
Instruction#getUnsignedByte(int):::Get an unsigned byte value, relative to the start of this instruction.:::return->getByte
Instruction#getShort(int):::Get a 2-byte value, relative to the start of this instruction.:::return->getByte->getUnsignedByte
Instruction#getUnsignedShort(int):::Get a unsigned 2-byte value, relative to the start of this instruction.:::return->getShort
Instruction#getInt(int):::Get a 4-byte value, relative to the start of this instruction.:::return->getShort->getUnsignedShort
Instruction#getOpcode():::Get the Opcode for this instruction, or null if the instruction is unrecognized.:::b->getUnsignedByte->switch->return->Opcode->getUnsignedByte->get->return->Opcode->get
Instruction#getMnemonic():::Get the mnemonic for this instruction, or a default string if the instruction is unrecognized.:::opcode->getOpcode->if->return->getUnsignedByte->else->return->opcode->toString->toLowerCase
Instruction#length():::Get the length, in bytes, of this instruction, including the opcode and all its operands.:::opcode->getOpcode->if->return->switch->pad->align->low->getInt->high->getInt->return->pad->align->npairs->getInt->return->return
Instruction#getKind():::Get the Kind of this instruction.:::opcode->getOpcode->return
Instruction#accept(KindVisitor, P):::Invoke a method on the visitor according to the kind of this instruction, passing in the decoded operands for the instruction.:::switch->getKind->return->visitor->visitNoOperands->return->visitor->TypeKind->getUnsignedByte->get->visitArrayType->return->visitor->getShort->visitBranch->return->visitor->getInt->visitBranch->return->visitor->getByte->visitValue->return->visitor->getUnsignedByte->visitConstantPoolRef->return->visitor->getUnsignedShort->visitConstantPoolRef->return->visitor->getUnsignedShort->getUnsignedByte->visitConstantPoolRefAndValue->switch->getOpcode->pad->align->default_->getInt->low->getInt->high->getInt->values->new->intArr->for->i->return->visitor->visitTableSwitch->pad->align->default_->getInt->npairs->getInt->matches->new->intArr->offsets->new->intArr->for->i->return->visitor->visitLookupSwitch->throw->new->IllegalStateException->return->visitor->getUnsignedByte->visitLocal->return->visitor->getUnsignedByte->getByte->visitLocalAndValue->return->visitor->getShort->visitValue->return->visitor->visitNoOperands->return->visitor->getUnsignedShort->visitLocal->return->visitor->getUnsignedShort->visitConstantPoolRef->return->visitor->getUnsignedShort->getUnsignedByte->visitConstantPoolRefAndValue->return->visitor->getUnsignedShort->getShort->visitLocalAndValue->return->visitor->visitUnknown->throw->new->IllegalStateException
Instruction#align(int)::: instruction align:::return
LineNumberTable_attribute#accept(Visitor, D)::: line number table_attribute accept:::return->visitor->visitLineNumberTable
LineNumberTable_attribute.Entry#length()::: entry length:::return
LocalVariableTable_attribute#accept(Visitor, D)::: local variable table_attribute accept:::return->visitor->visitLocalVariableTable
LocalVariableTable_attribute.Entry#length()::: entry length:::return
LocalVariableTypeTable_attribute#accept(Visitor, D)::: local variable type table_attribute accept:::return->visitor->visitLocalVariableTypeTable
LocalVariableTypeTable_attribute.Entry#length()::: entry length:::return
Method#byteLength()::: method byte length:::return->attributes->byteLength
Method#getName(ConstantPool)::: method get name:::return->constant_pool->getUTF8Value
MethodParameters_attribute#accept(Visitor, D)::: method parameters_attribute accept:::return->visitor->visitMethodParameters
MethodParameters_attribute.Entry#length()::: entry length:::return
ModuleHashes_attribute#accept(Visitor, D)::: module hashes_attribute accept:::return->visitor->visitModuleHashes
ModuleHashes_attribute#length(Entry[])::: module hashes_attribute length:::len->foreach->e->length->return
ModuleHashes_attribute.Entry#length()::: entry length:::return
ModuleMainClass_attribute#getMainClassName(ConstantPool)::: module main class_attribute get main class name:::return->constant_pool->getClassInfo->getName
ModuleMainClass_attribute#accept(Visitor, D)::: module main class_attribute accept:::return->visitor->visitModuleMainClass
ModulePackages_attribute#getPackage(int, ConstantPool)::: module packages_attribute get package:::package_index->info->constant_pool->getPackageInfo->return->info->getName
ModulePackages_attribute#accept(Visitor, D)::: module packages_attribute accept:::return->visitor->visitModulePackages
ModuleResolution_attribute#accept(Visitor, D)::: module resolution_attribute accept:::return->visitor->visitModuleResolution
ModuleTarget_attribute#accept(Visitor, D)::: module target_attribute accept:::return->visitor->visitModuleTarget
Module_attribute#getUses(int, ConstantPool)::: module_attribute get uses:::i->return->constant_pool->getClassInfo->getName
Module_attribute#accept(Visitor, D)::: module_attribute accept:::return->visitor->visitModule
Module_attribute.RequiresEntry#getRequires(ConstantPool)::: requires entry get requires:::info->constant_pool->getModuleInfo->return->info->getName
Module_attribute.ExportsEntry#length()::: exports entry length:::return
Module_attribute.OpensEntry#length()::: opens entry length:::return
NestHost_attribute#getNestTop(ConstantPool)::: nest host_attribute get nest top:::return->constant_pool->getClassInfo
NestHost_attribute#accept(Visitor, D)::: nest host_attribute accept:::return->visitor->visitNestHost
NestMembers_attribute#getChildren(ConstantPool)::: nest members_attribute get children:::return->IntStream->of->try->return->constant_pool->getClassInfo->catch->throw->new->AssertionError->finally->mapToObj->CONSTANT_Class_info[]->new->toArray
NestMembers_attribute#accept(Visitor, D)::: nest members_attribute accept:::return->visitor->visitNestMembers
ReferenceFinder.Filter#accept(ConstantPool, CPRefInfo):::Decides if the given CPRefInfo entry should be accepted or filtered.:::
ReferenceFinder.Visitor#visit(ClassFile, Method, List):::Invoked for a method containing one or more accepted CPRefInfo entries:::
ReferenceFinder#parse(ClassFile):::Parses a given ClassFile and invoke the visitor if there is any reference to the constant pool entries referencing field, method, or interface method that are accepted:::cprefs->new->ArrayList<>->index->foreach->entries->if->cpInfo->accept->cprefs->add->cpInfo->size->if->cprefs->isEmpty->return->foreach->ids->new->HashSet<>->c_attr->get->if->foreach->c_attr->getInstructions->idx->instr->accept->if->ids->add->if->ids->size->refInfos->ids->size->new->ArrayList<>->foreach->refInfos->get->cast->add->visitor->visit->return
RuntimeAnnotations_attribute#length(Annotation[])::: runtime annotations_attribute length:::n->foreach->anno->length->return
RuntimeInvisibleAnnotations_attribute#accept(Visitor, P)::: runtime invisible annotations_attribute accept:::return->visitor->visitRuntimeInvisibleAnnotations
RuntimeInvisibleParameterAnnotations_attribute#accept(Visitor, P)::: runtime invisible parameter annotations_attribute accept:::return->visitor->visitRuntimeInvisibleParameterAnnotations
RuntimeInvisibleTypeAnnotations_attribute#accept(Visitor, P)::: runtime invisible type annotations_attribute accept:::return->visitor->visitRuntimeInvisibleTypeAnnotations
RuntimeParameterAnnotations_attribute#length(Annotation[][])::: runtime parameter annotations_attribute length:::n->foreach->foreach->anno->length->return
RuntimeTypeAnnotations_attribute#length(TypeAnnotation[])::: runtime type annotations_attribute length:::n->foreach->anno->length->return
RuntimeVisibleAnnotations_attribute#accept(Visitor, P)::: runtime visible annotations_attribute accept:::return->visitor->visitRuntimeVisibleAnnotations
RuntimeVisibleParameterAnnotations_attribute#accept(Visitor, P)::: runtime visible parameter annotations_attribute accept:::return->visitor->visitRuntimeVisibleParameterAnnotations
RuntimeVisibleTypeAnnotations_attribute#accept(Visitor, P)::: runtime visible type annotations_attribute accept:::return->visitor->visitRuntimeVisibleTypeAnnotations
Signature#getType(ConstantPool)::: signature get type:::if->getValue->parse->return
Signature#getParameterCount(ConstantPool)::: signature get parameter count:::m->getType->return->size
Signature#getParameterTypes(ConstantPool)::: signature get parameter types:::m->getType->sb->new->StringBuilder->sb->append->sep->foreach->sb->append->sb->append->sb->append->return->sb->toString
Signature#getReturnType(ConstantPool)::: signature get return type:::m->getType->return->toString
Signature#getFieldType(ConstantPool)::: signature get field type:::return->getType->toString
Signature#parse(String)::: signature parse:::typeParamTypes->if->sig->charAt->parseTypeParamTypes->if->sig->charAt->paramTypes->parseTypeSignatures->returnType->parseTypeSignature->throwsTypes->while->sig->length->sig->charAt->if->new->ArrayList<>->throwsTypes->parseTypeSignature->add->return->new->MethodType->else->t->parseTypeSignature->if->sig->length->return->superclass->superinterfaces->while->sig->length->if->new->ArrayList<>->superinterfaces->parseTypeSignature->add->return->new->ClassSigType
Signature#parseTypeSignature()::: signature parse type signature:::switch->sig->charAt->return->new->SimpleType->return->new->SimpleType->return->new->SimpleType->return->new->SimpleType->return->new->SimpleType->return->new->SimpleType->return->parseClassTypeSignature->return->new->SimpleType->return->parseTypeVariableSignature->return->new->SimpleType->return->new->SimpleType->return->parseTypeSignature->new->ArrayType->return->new->WildcardType->return->parseTypeSignature->new->WildcardType->return->parseTypeSignature->new->WildcardType->throw->debugInfo->new->IllegalStateException
Signature#parseTypeSignatures(char)::: signature parse type signatures:::types->new->ArrayList<>->while->sig->charAt->types->parseTypeSignature->add->return
Signature#parseClassTypeSignature()::: signature parse class type signature:::return->parseClassTypeSignatureRest
Signature#parseClassTypeSignatureRest()::: signature parse class type signature rest:::sb->new->StringBuilder->argTypes->t->sigch->do->switch->sig->charAt->parseTypeSignatures->break->sb->toString->new->ClassType->sb->setLength->break->sb->append->break->while->return
Signature#parseTypeParamTypes()::: signature parse type param types:::types->new->ArrayList<>->while->sig->charAt->types->parseTypeParamType->add->return
Signature#parseTypeParamType()::: signature parse type param type:::sep->sig->indexOf->name->sig->substring->classBound->interfaceBounds->if->sig->charAt->parseTypeSignature->while->sig->charAt->if->new->ArrayList<>->interfaceBounds->parseTypeSignature->add->return->new->TypeParamType
Signature#parseTypeVariableSignature()::: signature parse type variable signature:::sep->sig->indexOf->t->sig->substring->new->SimpleType->return
Signature#debugInfo()::: signature debug info:::return->sig->substring->sig->charAt->sig->substring
Signature_attribute#getSignature(ConstantPool)::: signature_attribute get signature:::return->constant_pool->getUTF8Value
Signature_attribute#getParsedSignature()::: signature_attribute get parsed signature:::return->new->Signature
Signature_attribute#accept(Visitor, D)::: signature_attribute accept:::return->visitor->visitSignature
SourceDebugExtension_attribute#getValue()::: source debug extension_attribute get value:::return->new->String
SourceDebugExtension_attribute#accept(Visitor, D)::: source debug extension_attribute accept:::return->visitor->visitSourceDebugExtension
SourceFile_attribute#getSourceFile(ConstantPool)::: source file_attribute get source file:::return->constant_pool->getUTF8Value
SourceFile_attribute#accept(Visitor, P)::: source file_attribute accept:::return->visitor->visitSourceFile
SourceID_attribute#getSourceID(ConstantPool)::: source d_attribute get source d:::return->constant_pool->getUTF8Value
SourceID_attribute#accept(Visitor, D)::: source d_attribute accept:::return->visitor->visitSourceID
StackMapTable_attribute#accept(Visitor, D)::: stack map table_attribute accept:::return->visitor->visitStackMapTable
StackMapTable_attribute#length(stack_map_frame[])::: stack map table_attribute length:::n->foreach->entry->length->return
StackMapTable_attribute.stack_map_frame#read(ClassReader):::stack_map_frame read:::frame_type->cr->readUnsignedByte->if->return->new->same_frame->else->if->return->new->same_locals_1_stack_item_frame->else->if->throw->new->Error->else->if->return->new->same_locals_1_stack_item_frame_extended->else->if->return->new->chop_frame->else->if->return->new->same_frame_extended->else->if->return->new->append_frame->else->return->new->full_frame
StackMapTable_attribute.stack_map_frame#length():::stack_map_frame length:::return
StackMapTable_attribute.stack_map_frame#getOffsetDelta():::stack_map_frame get offset delta:::
StackMapTable_attribute.stack_map_frame#accept(Visitor, D):::stack_map_frame accept:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_same_frame(same_frame, P)::: visitor visit_same_frame:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_same_locals_1_stack_item_frame(same_locals_1_stack_item_frame, P)::: visitor visit_same_locals_1_stack_item_frame:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_same_locals_1_stack_item_frame_extended(same_locals_1_stack_item_frame_extended, P)::: visitor visit_same_locals_1_stack_item_frame_extended:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_chop_frame(chop_frame, P)::: visitor visit_chop_frame:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_same_frame_extended(same_frame_extended, P)::: visitor visit_same_frame_extended:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_append_frame(append_frame, P)::: visitor visit_append_frame:::
StackMapTable_attribute.stack_map_frame.Visitor#visit_full_frame(full_frame, P)::: visitor visit_full_frame:::
StackMapTable_attribute.same_frame#accept(Visitor, D):::same_frame accept:::return->visitor->visit_same_frame
StackMapTable_attribute.same_frame#getOffsetDelta():::same_frame get offset delta:::return
StackMapTable_attribute.same_locals_1_stack_item_frame#length():::same_locals_1_stack_item_frame length:::return->super->length->length
StackMapTable_attribute.same_locals_1_stack_item_frame#accept(Visitor, D):::same_locals_1_stack_item_frame accept:::return->visitor->visit_same_locals_1_stack_item_frame
StackMapTable_attribute.same_locals_1_stack_item_frame#getOffsetDelta():::same_locals_1_stack_item_frame get offset delta:::return
StackMapTable_attribute.same_locals_1_stack_item_frame_extended#length():::same_locals_1_stack_item_frame_extended length:::return->super->length->length
StackMapTable_attribute.same_locals_1_stack_item_frame_extended#accept(Visitor, D):::same_locals_1_stack_item_frame_extended accept:::return->visitor->visit_same_locals_1_stack_item_frame_extended
StackMapTable_attribute.same_locals_1_stack_item_frame_extended#getOffsetDelta():::same_locals_1_stack_item_frame_extended get offset delta:::return
StackMapTable_attribute.chop_frame#length():::chop_frame length:::return->super->length
StackMapTable_attribute.chop_frame#accept(Visitor, D):::chop_frame accept:::return->visitor->visit_chop_frame
StackMapTable_attribute.chop_frame#getOffsetDelta():::chop_frame get offset delta:::return
StackMapTable_attribute.same_frame_extended#length():::same_frame_extended length:::return->super->length
StackMapTable_attribute.same_frame_extended#accept(Visitor, D):::same_frame_extended accept:::return->visitor->visit_same_frame_extended
StackMapTable_attribute.same_frame_extended#getOffsetDelta():::same_frame_extended get offset delta:::return
StackMapTable_attribute.append_frame#length():::append_frame length:::n->super->length->foreach->local->length->return
StackMapTable_attribute.append_frame#accept(Visitor, D):::append_frame accept:::return->visitor->visit_append_frame
StackMapTable_attribute.append_frame#getOffsetDelta():::append_frame get offset delta:::return
StackMapTable_attribute.full_frame#length():::full_frame length:::n->super->length->foreach->local->length->foreach->item->length->return
StackMapTable_attribute.full_frame#accept(Visitor, D):::full_frame accept:::return->visitor->visit_full_frame
StackMapTable_attribute.full_frame#getOffsetDelta():::full_frame get offset delta:::return
StackMapTable_attribute.verification_type_info#read(ClassReader):::verification_type_info read:::tag->cr->readUnsignedByte->switch->return->new->verification_type_info->return->new->Object_variable_info->return->new->Uninitialized_variable_info->throw->new->InvalidStackMap
StackMapTable_attribute.verification_type_info#length():::verification_type_info length:::return
StackMapTable_attribute.Object_variable_info#length()::: object_variable_info length:::return->super->length
StackMapTable_attribute.Uninitialized_variable_info#length()::: uninitialized_variable_info length:::return->super->length
StackMap_attribute#accept(Visitor, D)::: stack map_attribute accept:::return->visitor->visitStackMap
Synthetic_attribute#accept(Visitor, D)::: synthetic_attribute accept:::return->visitor->visitSynthetic
Type#isObject()::: type is object:::return
Type#accept(Visitor, D)::: type accept:::
Type#append(StringBuilder, String, List, String)::: type append:::sb->append->sep->foreach->sb->append->sb->append->sb->append
Type#appendIfNotEmpty(StringBuilder, String, List, String)::: type append if not empty:::if->types->size->append
Type.Visitor#visitSimpleType(SimpleType, P)::: visitor visit simple type:::
Type.Visitor#visitArrayType(ArrayType, P)::: visitor visit array type:::
Type.Visitor#visitMethodType(MethodType, P)::: visitor visit method type:::
Type.Visitor#visitClassSigType(ClassSigType, P)::: visitor visit class sig type:::
Type.Visitor#visitClassType(ClassType, P)::: visitor visit class type:::
Type.Visitor#visitTypeParamType(TypeParamType, P)::: visitor visit type param type:::
Type.Visitor#visitWildcardType(WildcardType, P)::: visitor visit wildcard type:::
Type.SimpleType#accept(Visitor, D)::: simple type accept:::return->visitor->visitSimpleType
Type.SimpleType#isPrimitiveType()::: simple type is primitive type:::return->primitiveTypes->contains
Type.SimpleType#toString()::: simple type to string:::return
Type.ArrayType#accept(Visitor, D)::: array type accept:::return->visitor->visitArrayType
Type.ArrayType#toString()::: array type to string:::return
Type.MethodType#accept(Visitor, D)::: method type accept:::return->visitor->visitMethodType
Type.MethodType#toString()::: method type to string:::sb->new->StringBuilder->appendIfNotEmpty->sb->append->append->appendIfNotEmpty->return->sb->toString
Type.ClassSigType#accept(Visitor, D)::: class sig type accept:::return->visitor->visitClassSigType
Type.ClassSigType#toString()::: class sig type to string:::sb->new->StringBuilder->appendIfNotEmpty->if->sb->append->sb->append->appendIfNotEmpty->return->sb->toString
Type.ClassType#accept(Visitor, D)::: class type accept:::return->visitor->visitClassType
Type.ClassType#getBinaryName()::: class type get binary name:::if->return->else->return->outerType->getBinaryName
Type.ClassType#toString()::: class type to string:::sb->new->StringBuilder->if->sb->append->sb->append->sb->append->appendIfNotEmpty->return->sb->toString
Type.ClassType#isObject()::: class type is object:::return->name->equals->typeArgs->isEmpty
Type.TypeParamType#accept(Visitor, D)::: type param type accept:::return->visitor->visitTypeParamType
Type.TypeParamType#toString()::: type param type to string:::sb->new->StringBuilder->sb->append->sep->if->sb->append->sb->append->if->foreach->sb->append->sb->append->return->sb->toString
Type.WildcardType#accept(Visitor, D)::: wildcard type accept:::return->visitor->visitWildcardType
Type.WildcardType#toString()::: wildcard type to string:::switch->return->return->return->throw->new->AssertionError
TypeAnnotation#length()::: type annotation length:::n->annotation->length->position_length->return
TypeAnnotation#toString()::: type annotation to string:::try->return->constant_pool->getUTF8Value->toString->substring->position->toString->catch->e->printStackTrace->return->e->toString->finally
TypeAnnotation#read_position(ClassReader)::: type annotation read_position:::tag->cr->readUnsignedByte->if->TargetType->isValidTargetTypeValue->throw->String->format->new->Annotation.InvalidAnnotation->type->TargetType->fromTargetTypeValue->position->new->Position->switch->cr->readUnsignedShort->break->table_length->cr->readUnsignedShort->new->intArr->new->intArr->new->intArr->for->i->break->cr->readUnsignedShort->break->break->cr->readUnsignedByte->break->cr->readUnsignedByte->cr->readUnsignedByte->break->cr->readUnsignedShort->break->cr->readUnsignedShort->break->cr->readUnsignedByte->break->cr->readUnsignedShort->cr->readUnsignedByte->break->break->throw->new->AssertionError->throw->new->AssertionError->len->cr->readUnsignedByte->loc->new->ArrayList<>->for->i->Position->getTypePathFromBinary->return
TypeAnnotation#position_length(Position)::: type annotation position_length:::n->switch->break->table_length->break->break->break->break->break->break->break->break->break->break->throw->new->AssertionError->throw->new->AssertionError->size->return
TypeAnnotation.Position.TypePathEntry#fromBinary(int, int)::: type path entry from binary:::if->throw->new->AssertionError->switch->return->return->return->return->new->TypePathEntry->throw->new->AssertionError
TypeAnnotation.Position.TypePathEntry#toString()::: type path entry to string:::return->tag->toString
TypeAnnotation.Position.TypePathEntry#equals(Object)::: type path entry equals:::if->return->tpe->return
TypeAnnotation.Position.TypePathEntry#hashCode()::: type path entry hash code:::return->hashCode
TypeAnnotation.Position#toString()::: position to string:::sb->new->StringBuilder->sb->append->sb->append->switch->sb->append->sb->append->break->if->sb->append->break->sb->append->for->i->sb->append->break->break->sb->append->sb->append->break->sb->append->sb->append->sb->append->sb->append->break->sb->append->sb->append->break->sb->append->sb->append->break->sb->append->sb->append->break->sb->append->sb->append->break->sb->append->sb->append->sb->append->sb->append->break->break->sb->append->break->throw->new->AssertionError->if->location->isEmpty->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
TypeAnnotation.Position#emitToClassfile():::Indicates whether the target tree of the annotation has been optimized away from classfile or not.:::return->type->isLocal
TypeAnnotation.Position#getTypePathFromBinary(List):::Decode the binary representation for a type path and set the location field.:::loc->list->size->new->ArrayList<>->idx->while->list->size->if->list->size->throw->new->AssertionError->loc->TypePathEntry->list->get->list->get->fromBinary->add->return
TypeAnnotation.Position#getBinaryFromTypePath(List)::: position get binary from type path:::loc->locs->size->new->ArrayList<>->foreach->loc->add->loc->add->return

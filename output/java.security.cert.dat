java.security.cert.Certificate#getType()->String:::Returns the type of this certificate.
java.security.cert.Certificate#equals(Object)->boolean:::Compares this certificate for equality with the specified object
java.security.cert.Certificate#hashCode()->int:::Returns a hashcode value for this certificate from its encoded form.
java.security.cert.Certificate#getEncoded()->byte[]:::Returns the encoded form of this certificate
java.security.cert.Certificate#verify(PublicKey)->void:::Verifies that this certificate was signed using the private key that corresponds to the specified public key.
java.security.cert.Certificate#verify(PublicKey, String)->void:::Verifies that this certificate was signed using the private key that corresponds to the specified public key
java.security.cert.Certificate#verify(PublicKey, Provider)->void:::Verifies that this certificate was signed using the private key that corresponds to the specified public key
java.security.cert.Certificate#toString()->String:::Returns a string representation of this certificate.
java.security.cert.Certificate#getPublicKey()->PublicKey:::Gets the public key from this certificate.
java.security.cert.Certificate.CertificateRep#readResolve()->Object:::Resolve the Certificate Object.
java.security.cert.Certificate#writeReplace()->Object:::Replace the Certificate to be serialized.
java.security.cert.CertificateFactory#getInstance(String)->CertificateFactory:::Returns a certificate factory object that implements the specified certificate type
java.security.cert.CertificateFactory#getInstance(String, String)->CertificateFactory:::Returns a certificate factory object for the specified certificate type
java.security.cert.CertificateFactory#getInstance(String, Provider)->CertificateFactory:::Returns a certificate factory object for the specified certificate type
java.security.cert.CertificateFactory#getProvider()->Provider:::Returns the provider of this certificate factory.
java.security.cert.CertificateFactory#getType()->String:::Returns the name of the certificate type associated with this certificate factory.
java.security.cert.CertificateFactory#generateCertificate(InputStream)->Certificate:::Generates a certificate object and initializes it with the data read from the input stream inStream
java.security.cert.CertificateFactory#getCertPathEncodings()->Iterator:::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first
java.security.cert.CertificateFactory#generateCertPath(InputStream)->CertPath:::Generates a CertPath object and initializes it with the data read from the InputStream inStream
java.security.cert.CertificateFactory#generateCertPath(InputStream, String)->CertPath:::Generates a CertPath object and initializes it with the data read from the InputStream inStream
java.security.cert.CertificateFactory#generateCertPath(List)->CertPath:::Generates a CertPath object and initializes it with a List of Certificates
java.security.cert.CertificateFactory#generateCertificates(InputStream)->Collection:::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream
java.security.cert.CertificateFactory#generateCRL(InputStream)->CRL:::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream
java.security.cert.CertificateFactory#generateCRLs(InputStream)->Collection:::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCertificate(InputStream)->Certificate:::Generates a certificate object and initializes it with the data read from the input stream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCertPath(InputStream)->CertPath:::Generates a CertPath object and initializes it with the data read from the InputStream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCertPath(InputStream, String)->CertPath:::Generates a CertPath object and initializes it with the data read from the InputStream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCertPath(List)->CertPath:::Generates a CertPath object and initializes it with a List of Certificates
java.security.cert.CertificateFactorySpi#engineGetCertPathEncodings()->Iterator:::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first
java.security.cert.CertificateFactorySpi#engineGenerateCertificates(InputStream)->Collection:::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCRL(InputStream)->CRL:::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream
java.security.cert.CertificateFactorySpi#engineGenerateCRLs(InputStream)->Collection:::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream
java.security.cert.CertificateRevokedException#getRevocationDate()->Date:::Returns the date on which the certificate was revoked
java.security.cert.CertificateRevokedException#getRevocationReason()->CRLReason:::Returns the reason the certificate was revoked.
java.security.cert.CertificateRevokedException#getAuthorityName()->X500Principal:::Returns the name of the authority that signed the certificate's revocation status information.
java.security.cert.CertificateRevokedException#getInvalidityDate()->Date:::Returns the invalidity date, as specified in the Invalidity Date extension of this CertificateRevokedException
java.security.cert.CertificateRevokedException#getExtensions()->Map:::Returns a map of X.509 extensions containing additional information about the revoked certificate, such as the Invalidity Date Extension
java.security.cert.CertificateRevokedException#getMessage()->String::: certificate revoked exception get message
java.security.cert.CertPath#getType()->String:::Returns the type of Certificates in this certification path
java.security.cert.CertPath#getEncodings()->Iterator:::Returns an iteration of the encodings supported by this certification path, with the default encoding first
java.security.cert.CertPath#equals(Object)->boolean:::Compares this certification path for equality with the specified object
java.security.cert.CertPath#hashCode()->int:::Returns the hashcode for this certification path
java.security.cert.CertPath#toString()->String:::Returns a string representation of this certification path
java.security.cert.CertPath#getEncoded()->byte[]:::Returns the encoded form of this certification path, using the default encoding.
java.security.cert.CertPath#getEncoded(String)->byte[]:::Returns the encoded form of this certification path, using the specified encoding.
java.security.cert.CertPath#getCertificates()->List:::Returns the list of certificates in this certification path
java.security.cert.CertPath#writeReplace()->Object:::Replaces the CertPath to be serialized with a CertPathRep object.
java.security.cert.CertPath.CertPathRep#readResolve()->Object:::Returns a CertPath constructed from the type and data.
java.security.cert.CertPathBuilder#getInstance(String)->CertPathBuilder:::Returns a CertPathBuilder object that implements the specified algorithm
java.security.cert.CertPathBuilder#getInstance(String, String)->CertPathBuilder:::Returns a CertPathBuilder object that implements the specified algorithm
java.security.cert.CertPathBuilder#getInstance(String, Provider)->CertPathBuilder:::Returns a CertPathBuilder object that implements the specified algorithm
java.security.cert.CertPathBuilder#getProvider()->Provider:::Returns the provider of this CertPathBuilder.
java.security.cert.CertPathBuilder#getAlgorithm()->String:::Returns the name of the algorithm of this CertPathBuilder.
java.security.cert.CertPathBuilder#build(CertPathParameters)->CertPathBuilderResult:::Attempts to build a certification path using the specified algorithm parameter set.
java.security.cert.CertPathBuilder#getDefaultType()->String:::Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string "PKIX" if no such property exists
java.security.cert.CertPathBuilder#getRevocationChecker()->CertPathChecker:::Returns a CertPathChecker that the encapsulated CertPathBuilderSpi implementation uses to check the revocation status of certificates
java.security.cert.CertPathBuilderResult#getCertPath()->CertPath:::Returns the built certification path.
java.security.cert.CertPathBuilderResult#clone()->Object:::Makes a copy of this CertPathBuilderResult
java.security.cert.CertPathBuilderSpi#engineBuild(CertPathParameters)->CertPathBuilderResult:::Attempts to build a certification path using the specified algorithm parameter set.
java.security.cert.CertPathBuilderSpi#engineGetRevocationChecker()->CertPathChecker:::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates
java.security.cert.CertPathChecker#init(boolean)->void:::Initializes the internal state of this CertPathChecker
java.security.cert.CertPathChecker#isForwardCheckingSupported()->boolean:::Indicates if forward checking is supported
java.security.cert.CertPathChecker#check(Certificate)->void:::Performs the check(s) on the specified certificate using its internal state
java.security.cert.CertPathHelperImpl#initialize()->void:::Initialize the helper framework
java.security.cert.CertPathHelperImpl#implSetPathToNames(X509CertSelector, Set)->void::: cert path helper impl impl set path to names
java.security.cert.CertPathHelperImpl#implSetDateAndTime(X509CRLSelector, Date, long)->void::: cert path helper impl impl set date and time
java.security.cert.CertPathParameters#clone()->Object:::Makes a copy of this CertPathParameters
java.security.cert.CertPathValidator#getInstance(String)->CertPathValidator:::Returns a CertPathValidator object that implements the specified algorithm
java.security.cert.CertPathValidator#getInstance(String, String)->CertPathValidator:::Returns a CertPathValidator object that implements the specified algorithm
java.security.cert.CertPathValidator#getInstance(String, Provider)->CertPathValidator:::Returns a CertPathValidator object that implements the specified algorithm
java.security.cert.CertPathValidator#getProvider()->Provider:::Returns the Provider of this CertPathValidator.
java.security.cert.CertPathValidator#getAlgorithm()->String:::Returns the algorithm name of this CertPathValidator.
java.security.cert.CertPathValidator#validate(CertPath, CertPathParameters)->CertPathValidatorResult:::Validates the specified certification path using the specified algorithm parameter set
java.security.cert.CertPathValidator#getDefaultType()->String:::Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string "PKIX" if no such property exists
java.security.cert.CertPathValidator#getRevocationChecker()->CertPathChecker:::Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates
java.security.cert.CertPathValidatorException#getCertPath()->CertPath:::Returns the certification path that was being validated when the exception was thrown.
java.security.cert.CertPathValidatorException#getIndex()->int:::Returns the index of the certificate in the certification path that caused the exception to be thrown
java.security.cert.CertPathValidatorException#getReason()->Reason:::Returns the reason that the validation failed
java.security.cert.CertPathValidatorResult#clone()->Object:::Makes a copy of this CertPathValidatorResult
java.security.cert.CertPathValidatorSpi#engineValidate(CertPath, CertPathParameters)->CertPathValidatorResult:::Validates the specified certification path using the specified algorithm parameter set
java.security.cert.CertPathValidatorSpi#engineGetRevocationChecker()->CertPathChecker:::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates
java.security.cert.CertSelector#match(Certificate)->boolean:::Decides whether a Certificate should be selected.
java.security.cert.CertSelector#clone()->Object:::Makes a copy of this CertSelector
java.security.cert.CertStore#getCertificates(CertSelector)->Collection:::Returns a Collection of Certificates that match the specified selector
java.security.cert.CertStore#getCRLs(CRLSelector)->Collection:::Returns a Collection of CRLs that match the specified selector
java.security.cert.CertStore#getInstance(String, CertStoreParameters)->CertStore:::Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters
java.security.cert.CertStore#getInstance(String, CertStoreParameters, String)->CertStore:::Returns a CertStore object that implements the specified CertStore type
java.security.cert.CertStore#getInstance(String, CertStoreParameters, Provider)->CertStore:::Returns a CertStore object that implements the specified CertStore type
java.security.cert.CertStore#getCertStoreParameters()->CertStoreParameters:::Returns the parameters used to initialize this CertStore
java.security.cert.CertStore#getType()->String:::Returns the type of this CertStore.
java.security.cert.CertStore#getProvider()->Provider:::Returns the provider of this CertStore.
java.security.cert.CertStore#getDefaultType()->String:::Returns the default CertStore type as specified by the certstore.type security property, or the string "LDAP" if no such property exists
java.security.cert.CertStoreParameters#clone()->Object:::Makes a copy of this CertStoreParameters
java.security.cert.CertStoreSpi#engineGetCertificates(CertSelector)->Collection:::Returns a Collection of Certificates that match the specified selector
java.security.cert.CertStoreSpi#engineGetCRLs(CRLSelector)->Collection:::Returns a Collection of CRLs that match the specified selector
java.security.cert.CollectionCertStoreParameters#getCollection()->Collection:::Returns the Collection from which Certificates and CRLs are retrieved
java.security.cert.CollectionCertStoreParameters#clone()->Object:::Returns a copy of this object
java.security.cert.CollectionCertStoreParameters#toString()->String:::Returns a formatted string describing the parameters.
java.security.cert.CRL#getType()->String:::Returns the type of this CRL.
java.security.cert.CRL#toString()->String:::Returns a string representation of this CRL.
java.security.cert.CRL#isRevoked(Certificate)->boolean:::Checks whether the given certificate is on this CRL.
java.security.cert.CRLSelector#match(CRL)->boolean:::Decides whether a CRL should be selected.
java.security.cert.CRLSelector#clone()->Object:::Makes a copy of this CRLSelector
java.security.cert.Extension#getId()->String:::Gets the extensions's object identifier.
java.security.cert.Extension#isCritical()->boolean:::Gets the extension's criticality setting.
java.security.cert.Extension#getValue()->byte[]:::Gets the extensions's DER-encoded value
java.security.cert.Extension#encode(OutputStream)->void:::Generates the extension's DER encoding and writes it to the output stream.
java.security.cert.LDAPCertStoreParameters#getServerName()->String:::Returns the DNS name of the LDAP server.
java.security.cert.LDAPCertStoreParameters#getPort()->int:::Returns the port number of the LDAP server.
java.security.cert.LDAPCertStoreParameters#clone()->Object:::Returns a copy of this object
java.security.cert.LDAPCertStoreParameters#toString()->String:::Returns a formatted string describing the parameters.
java.security.cert.PKIXBuilderParameters#setMaxPathLength(int)->void:::Sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path
java.security.cert.PKIXBuilderParameters#getMaxPathLength()->int:::Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path
java.security.cert.PKIXBuilderParameters#toString()->String:::Returns a formatted string describing the parameters.
java.security.cert.PKIXCertPathBuilderResult#getCertPath()->CertPath:::Returns the built and validated certification path
java.security.cert.PKIXCertPathBuilderResult#toString()->String:::Return a printable representation of this PKIXCertPathBuilderResult.
java.security.cert.PKIXCertPathChecker#init(boolean)->void:::Initializes the internal state of this PKIXCertPathChecker
java.security.cert.PKIXCertPathChecker#isForwardCheckingSupported()->boolean:::Indicates if forward checking is supported
java.security.cert.PKIXCertPathChecker#getSupportedExtensions()->Set:::Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e
java.security.cert.PKIXCertPathChecker#check(Certificate, Collection)->void:::Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions
java.security.cert.PKIXCertPathChecker#check(Certificate)->void:::This implementation calls {@code check(cert, java.util.Collections.<String>emptySet()).
java.security.cert.PKIXCertPathChecker#clone()->Object:::Returns a clone of this object
java.security.cert.PKIXCertPathValidatorResult#getTrustAnchor()->TrustAnchor:::Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.
java.security.cert.PKIXCertPathValidatorResult#getPolicyTree()->PolicyNode:::Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm
java.security.cert.PKIXCertPathValidatorResult#getPublicKey()->PublicKey:::Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable.
java.security.cert.PKIXCertPathValidatorResult#clone()->Object:::Returns a copy of this object.
java.security.cert.PKIXCertPathValidatorResult#toString()->String:::Return a printable representation of this PKIXCertPathValidatorResult.
java.security.cert.PKIXParameters#getTrustAnchors()->Set:::Returns an immutable Set of the most-trusted CAs.
java.security.cert.PKIXParameters#setTrustAnchors(Set)->void:::Sets the Set of most-trusted CAs
java.security.cert.PKIXParameters#getInitialPolicies()->Set:::Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
java.security.cert.PKIXParameters#setInitialPolicies(Set)->void:::Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
java.security.cert.PKIXParameters#setCertStores(List)->void:::Sets the list of CertStores to be used in finding certificates and CRLs
java.security.cert.PKIXParameters#addCertStore(CertStore)->void:::Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs.
java.security.cert.PKIXParameters#getCertStores()->List:::Returns an immutable List of CertStores that are used to find certificates and CRLs.
java.security.cert.PKIXParameters#setRevocationEnabled(boolean)->void:::Sets the RevocationEnabled flag
java.security.cert.PKIXParameters#isRevocationEnabled()->boolean:::Checks the RevocationEnabled flag
java.security.cert.PKIXParameters#setExplicitPolicyRequired(boolean)->void:::Sets the ExplicitPolicyRequired flag
java.security.cert.PKIXParameters#isExplicitPolicyRequired()->boolean:::Checks if explicit policy is required
java.security.cert.PKIXParameters#setPolicyMappingInhibited(boolean)->void:::Sets the PolicyMappingInhibited flag
java.security.cert.PKIXParameters#isPolicyMappingInhibited()->boolean:::Checks if policy mapping is inhibited
java.security.cert.PKIXParameters#setAnyPolicyInhibited(boolean)->void:::Sets state to determine if the any policy OID should be processed if it is included in a certificate
java.security.cert.PKIXParameters#isAnyPolicyInhibited()->boolean:::Checks whether the any policy OID should be processed if it is included in a certificate.
java.security.cert.PKIXParameters#setPolicyQualifiersRejected(boolean)->void:::Sets the PolicyQualifiersRejected flag
java.security.cert.PKIXParameters#getPolicyQualifiersRejected()->boolean:::Gets the PolicyQualifiersRejected flag
java.security.cert.PKIXParameters#getDate()->Date:::Returns the time for which the validity of the certification path should be determined
java.security.cert.PKIXParameters#setDate(Date)->void:::Sets the time for which the validity of the certification path should be determined
java.security.cert.PKIXParameters#setCertPathCheckers(List)->void:::Sets a List of additional certification path checkers
java.security.cert.PKIXParameters#getCertPathCheckers()->List:::Returns the List of certification path checkers
java.security.cert.PKIXParameters#addCertPathChecker(PKIXCertPathChecker)->void:::Adds a PKIXCertPathChecker to the list of certification path checkers
java.security.cert.PKIXParameters#getSigProvider()->String:::Returns the signature provider's name, or null if not set.
java.security.cert.PKIXParameters#setSigProvider(String)->void:::Sets the signature provider's name
java.security.cert.PKIXParameters#getTargetCertConstraints()->CertSelector:::Returns the required constraints on the target certificate
java.security.cert.PKIXParameters#setTargetCertConstraints(CertSelector)->void:::Sets the required constraints on the target certificate
java.security.cert.PKIXParameters#clone()->Object:::Makes a copy of this PKIXParameters object
java.security.cert.PKIXParameters#toString()->String:::Returns a formatted string describing the parameters.
java.security.cert.PKIXRevocationChecker#setOcspResponder(URI)->void:::Sets the URI that identifies the location of the OCSP responder
java.security.cert.PKIXRevocationChecker#getOcspResponder()->URI:::Gets the URI that identifies the location of the OCSP responder
java.security.cert.PKIXRevocationChecker#setOcspResponderCert(X509Certificate)->void:::Sets the OCSP responder's certificate
java.security.cert.PKIXRevocationChecker#getOcspResponderCert()->X509Certificate:::Gets the OCSP responder's certificate
java.security.cert.PKIXRevocationChecker#setOcspExtensions(List)->void:::Sets the optional OCSP request extensions.
java.security.cert.PKIXRevocationChecker#getOcspExtensions()->List:::Gets the optional OCSP request extensions.
java.security.cert.PKIXRevocationChecker#setOcspResponses(Map)->void:::Sets the OCSP responses
java.security.cert.PKIXRevocationChecker#getOcspResponses()->Map:::Gets the OCSP responses
java.security.cert.PKIXRevocationChecker#setOptions(Set)->void:::Sets the revocation options.
java.security.cert.PKIXRevocationChecker#getOptions()->Set:::Gets the revocation options.
java.security.cert.PKIXRevocationChecker#getSoftFailExceptions()->List:::Returns a list containing the exceptions that are ignored by the revocation checker when the Option#SOFT_FAIL SOFT_FAIL option is set
java.security.cert.PKIXRevocationChecker#clone()->PKIXRevocationChecker::: revocation checker clone
java.security.cert.PolicyNode#getParent()->PolicyNode:::Returns the parent of this node, or null if this is the root node.
java.security.cert.PolicyNode#getChildren()->Iterator:::Returns an iterator over the children of this node
java.security.cert.PolicyNode#getDepth()->int:::Returns the depth of this node in the valid policy tree.
java.security.cert.PolicyNode#getValidPolicy()->String:::Returns the valid policy represented by this node.
java.security.cert.PolicyNode#getPolicyQualifiers()->Set:::Returns the set of policy qualifiers associated with the valid policy represented by this node.
java.security.cert.PolicyNode#getExpectedPolicies()->Set:::Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed.
java.security.cert.PolicyNode#isCritical()->boolean:::Returns the criticality indicator of the certificate policy extension in the most recently processed certificate.
java.security.cert.PolicyQualifierInfo#getPolicyQualifierId()->String:::Returns the policyQualifierId field of this PolicyQualifierInfo
java.security.cert.PolicyQualifierInfo#getEncoded()->byte[]:::Returns the ASN.1 DER encoded form of this PolicyQualifierInfo.
java.security.cert.PolicyQualifierInfo#getPolicyQualifier()->byte[]:::Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo.
java.security.cert.PolicyQualifierInfo#toString()->String:::Return a printable representation of this PolicyQualifierInfo.
java.security.cert.TrustAnchor#getTrustedCert()->X509Certificate:::Returns the most-trusted CA certificate.
java.security.cert.TrustAnchor#getCA()->X500Principal:::Returns the name of the most-trusted CA as an X500Principal.
java.security.cert.TrustAnchor#getCAName()->String:::Returns the name of the most-trusted CA in RFC 2253 String format.
java.security.cert.TrustAnchor#getCAPublicKey()->PublicKey:::Returns the public key of the most-trusted CA.
java.security.cert.TrustAnchor#getNameConstraints()->byte[]:::Returns the name constraints parameter
java.security.cert.TrustAnchor#toString()->String:::Returns a formatted string describing the TrustAnchor.
java.security.cert.URICertStoreParameters#getURI()->URI:::Returns the URI used to construct this URICertStoreParameters object.
java.security.cert.URICertStoreParameters#clone()->URICertStoreParameters:::Returns a copy of this object
java.security.cert.URICertStoreParameters#hashCode()->int:::Returns a hash code value for this parameters object
java.security.cert.URICertStoreParameters#equals(Object)->boolean:::Compares the specified object with this parameters object for equality
java.security.cert.URICertStoreParameters#toString()->String:::Returns a formatted string describing the parameters including the URI used to construct this object.
java.security.cert.X509Certificate#checkValidity()->void:::Checks that the certificate is currently valid
java.security.cert.X509Certificate#checkValidity(Date)->void:::Checks that the given date is within the certificate's validity period
java.security.cert.X509Certificate#getVersion()->int:::Gets the version (version number) value from the certificate
java.security.cert.X509Certificate#getSerialNumber()->BigInteger:::Gets the serialNumber value from the certificate
java.security.cert.X509Certificate#getIssuerDN()->Principal:::Denigrated, replaced by #getIssuerX500Principal()
java.security.cert.X509Certificate#getIssuerX500Principal()->X500Principal:::Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal
java.security.cert.X509Certificate#getSubjectDN()->Principal:::Denigrated, replaced by #getSubjectX500Principal()
java.security.cert.X509Certificate#getSubjectX500Principal()->X500Principal:::Returns the subject (subject distinguished name) value from the certificate as an X500Principal
java.security.cert.X509Certificate#getNotBefore()->Date:::Gets the notBefore date from the validity period of the certificate
java.security.cert.X509Certificate#getNotAfter()->Date:::Gets the notAfter date from the validity period of the certificate
java.security.cert.X509Certificate#getTBSCertificate()->byte[]:::Gets the DER-encoded certificate information, the tbsCertificate from this certificate
java.security.cert.X509Certificate#getSignature()->byte[]:::Gets the signature value (the raw signature bits) from the certificate
java.security.cert.X509Certificate#getSigAlgName()->String:::Gets the signature algorithm name for the certificate signature algorithm
java.security.cert.X509Certificate#getSigAlgOID()->String:::Gets the signature algorithm OID string from the certificate
java.security.cert.X509Certificate#getSigAlgParams()->byte[]:::Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm
java.security.cert.X509Certificate#getIssuerUniqueID()->boolean[]:::Gets the issuerUniqueID value from the certificate
java.security.cert.X509Certificate#getSubjectUniqueID()->boolean[]:::Gets the subjectUniqueID value from the certificate
java.security.cert.X509Certificate#getKeyUsage()->boolean[]:::Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15)
java.security.cert.X509Certificate#getExtendedKeyUsage()->List:::Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37)
java.security.cert.X509Certificate#getBasicConstraints()->int:::Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19)
java.security.cert.X509Certificate#getSubjectAlternativeNames()->Collection>:::Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17)
java.security.cert.X509Certificate#getIssuerAlternativeNames()->Collection>:::Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18)
java.security.cert.X509Certificate#verify(PublicKey, Provider)->void:::Verifies that this certificate was signed using the private key that corresponds to the specified public key
java.security.cert.X509CertSelector#setCertificate(X509Certificate)->void:::Sets the certificateEquals criterion
java.security.cert.X509CertSelector#setSerialNumber(BigInteger)->void:::Sets the serialNumber criterion
java.security.cert.X509CertSelector#setIssuer(X500Principal)->void:::Sets the issuer criterion
java.security.cert.X509CertSelector#setIssuer(String)->void:::Denigrated, use #setIssuer(X500Principal) or #setIssuer(byte[]) instead
java.security.cert.X509CertSelector#setIssuer(byte[])->void:::Sets the issuer criterion
java.security.cert.X509CertSelector#setSubject(X500Principal)->void:::Sets the subject criterion
java.security.cert.X509CertSelector#setSubject(String)->void:::Denigrated, use #setSubject(X500Principal) or #setSubject(byte[]) instead
java.security.cert.X509CertSelector#setSubject(byte[])->void:::Sets the subject criterion
java.security.cert.X509CertSelector#setSubjectKeyIdentifier(byte[])->void:::Sets the subjectKeyIdentifier criterion
java.security.cert.X509CertSelector#setAuthorityKeyIdentifier(byte[])->void:::Sets the authorityKeyIdentifier criterion
java.security.cert.X509CertSelector#setCertificateValid(Date)->void:::Sets the certificateValid criterion
java.security.cert.X509CertSelector#setPrivateKeyValid(Date)->void:::Sets the privateKeyValid criterion
java.security.cert.X509CertSelector#setSubjectPublicKeyAlgID(String)->void:::Sets the subjectPublicKeyAlgID criterion
java.security.cert.X509CertSelector#setSubjectPublicKey(PublicKey)->void:::Sets the subjectPublicKey criterion
java.security.cert.X509CertSelector#setSubjectPublicKey(byte[])->void:::Sets the subjectPublicKey criterion
java.security.cert.X509CertSelector#setKeyUsage(boolean[])->void:::Sets the keyUsage criterion
java.security.cert.X509CertSelector#setExtendedKeyUsage(Set)->void:::Sets the extendedKeyUsage criterion
java.security.cert.X509CertSelector#setMatchAllSubjectAltNames(boolean)->void:::Enables/disables matching all of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods
java.security.cert.X509CertSelector#setSubjectAlternativeNames(Collection>)->void:::Sets the subjectAlternativeNames criterion
java.security.cert.X509CertSelector#addSubjectAlternativeName(int, String)->void:::Adds a name to the subjectAlternativeNames criterion
java.security.cert.X509CertSelector#addSubjectAlternativeName(int, byte[])->void:::Adds a name to the subjectAlternativeNames criterion
java.security.cert.X509CertSelector#equalNames(Collection, Collection)->boolean:::Compare for equality two objects of the form passed to setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames)
java.security.cert.X509CertSelector#makeGeneralNameInterface(int, Object)->GeneralNameInterface:::Make a GeneralNameInterface out of a name type (0-8) and an Object that may be a byte array holding the ASN.1 DER encoded name or a String form of the name
java.security.cert.X509CertSelector#setNameConstraints(byte[])->void:::Sets the name constraints criterion
java.security.cert.X509CertSelector#setBasicConstraints(int)->void:::Sets the basic constraints constraint
java.security.cert.X509CertSelector#setPolicy(Set)->void:::Sets the policy constraint
java.security.cert.X509CertSelector#setPathToNames(Collection>)->void:::Sets the pathToNames criterion
java.security.cert.X509CertSelector#setPathToNamesInternal(Set)->void::: x509 cert selector set path to names internal
java.security.cert.X509CertSelector#addPathToName(int, String)->void:::Adds a name to the pathToNames criterion
java.security.cert.X509CertSelector#addPathToName(int, byte[])->void:::Adds a name to the pathToNames criterion
java.security.cert.X509CertSelector#getCertificate()->X509Certificate:::Returns the certificateEquals criterion
java.security.cert.X509CertSelector#getSerialNumber()->BigInteger:::Returns the serialNumber criterion
java.security.cert.X509CertSelector#getIssuer()->X500Principal:::Returns the issuer criterion as an X500Principal
java.security.cert.X509CertSelector#getIssuerAsString()->String:::Denigrated, use #getIssuer() or #getIssuerAsBytes() instead
java.security.cert.X509CertSelector#getIssuerAsBytes()->byte[]:::Returns the issuer criterion as a byte array
java.security.cert.X509CertSelector#getSubject()->X500Principal:::Returns the subject criterion as an X500Principal
java.security.cert.X509CertSelector#getSubjectAsString()->String:::Denigrated, use #getSubject() or #getSubjectAsBytes() instead
java.security.cert.X509CertSelector#getSubjectAsBytes()->byte[]:::Returns the subject criterion as a byte array
java.security.cert.X509CertSelector#getSubjectKeyIdentifier()->byte[]:::Returns the subjectKeyIdentifier criterion
java.security.cert.X509CertSelector#getAuthorityKeyIdentifier()->byte[]:::Returns the authorityKeyIdentifier criterion
java.security.cert.X509CertSelector#getCertificateValid()->Date:::Returns the certificateValid criterion
java.security.cert.X509CertSelector#getPrivateKeyValid()->Date:::Returns the privateKeyValid criterion
java.security.cert.X509CertSelector#getSubjectPublicKeyAlgID()->String:::Returns the subjectPublicKeyAlgID criterion
java.security.cert.X509CertSelector#getSubjectPublicKey()->PublicKey:::Returns the subjectPublicKey criterion
java.security.cert.X509CertSelector#getKeyUsage()->boolean[]:::Returns the keyUsage criterion
java.security.cert.X509CertSelector#getExtendedKeyUsage()->Set:::Returns the extendedKeyUsage criterion
java.security.cert.X509CertSelector#getMatchAllSubjectAltNames()->boolean:::Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods
java.security.cert.X509CertSelector#getSubjectAlternativeNames()->Collection>:::Returns a copy of the subjectAlternativeNames criterion
java.security.cert.X509CertSelector#getNameConstraints()->byte[]:::Returns the name constraints criterion
java.security.cert.X509CertSelector#getBasicConstraints()->int:::Returns the basic constraints constraint
java.security.cert.X509CertSelector#getPolicy()->Set:::Returns the policy criterion
java.security.cert.X509CertSelector#getPathToNames()->Collection>:::Returns a copy of the pathToNames criterion
java.security.cert.X509CertSelector#toString()->String:::Return a printable representation of the CertSelector.
java.security.cert.X509CertSelector#match(Certificate)->boolean:::Decides whether a Certificate should be selected.
java.security.cert.X509CertSelector#clone()->Object:::Returns a copy of this object.
java.security.cert.X509CRL#equals(Object)->boolean:::Compares this CRL for equality with the given object
java.security.cert.X509CRL#hashCode()->int:::Returns a hashcode value for this CRL from its encoded form.
java.security.cert.X509CRL#getEncoded()->byte[]:::Returns the ASN.1 DER-encoded form of this CRL.
java.security.cert.X509CRL#verify(PublicKey)->void:::Verifies that this CRL was signed using the private key that corresponds to the given public key.
java.security.cert.X509CRL#verify(PublicKey, String)->void:::Verifies that this CRL was signed using the private key that corresponds to the given public key
java.security.cert.X509CRL#verify(PublicKey, Provider)->void:::Verifies that this CRL was signed using the private key that corresponds to the given public key
java.security.cert.X509CRL#getVersion()->int:::Gets the version (version number) value from the CRL
java.security.cert.X509CRL#getIssuerDN()->Principal:::Denigrated, replaced by #getIssuerX500Principal()
java.security.cert.X509CRL#getIssuerX500Principal()->X500Principal:::Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal
java.security.cert.X509CRL#getThisUpdate()->Date:::Gets the thisUpdate date from the CRL
java.security.cert.X509CRL#getNextUpdate()->Date:::Gets the nextUpdate date from the CRL.
java.security.cert.X509CRL#getRevokedCertificate(BigInteger)->X509CRLEntry:::Gets the CRL entry, if any, with the given certificate serialNumber.
java.security.cert.X509CRL#getRevokedCertificate(X509Certificate)->X509CRLEntry:::Get the CRL entry, if any, for the given certificate
java.security.cert.X509CRL#getRevokedCertificates()->Set:::Gets all the entries from this CRL
java.security.cert.X509CRL#getTBSCertList()->byte[]:::Gets the DER-encoded CRL information, the tbsCertList from this CRL
java.security.cert.X509CRL#getSignature()->byte[]:::Gets the signature value (the raw signature bits) from the CRL
java.security.cert.X509CRL#getSigAlgName()->String:::Gets the signature algorithm name for the CRL signature algorithm
java.security.cert.X509CRL#getSigAlgOID()->String:::Gets the signature algorithm OID string from the CRL
java.security.cert.X509CRL#getSigAlgParams()->byte[]:::Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm
java.security.cert.X509CRLEntry#equals(Object)->boolean:::Compares this CRL entry for equality with the given object
java.security.cert.X509CRLEntry#hashCode()->int:::Returns a hashcode value for this CRL entry from its encoded form.
java.security.cert.X509CRLEntry#getEncoded()->byte[]:::Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE.
java.security.cert.X509CRLEntry#getSerialNumber()->BigInteger:::Gets the serial number from this X509CRLEntry, the userCertificate.
java.security.cert.X509CRLEntry#getCertificateIssuer()->X500Principal:::Get the issuer of the X509Certificate described by this entry
java.security.cert.X509CRLEntry#getRevocationDate()->Date:::Gets the revocation date from this X509CRLEntry, the revocationDate.
java.security.cert.X509CRLEntry#hasExtensions()->boolean:::Returns true if this CRL entry has extensions.
java.security.cert.X509CRLEntry#toString()->String:::Returns a string representation of this CRL entry.
java.security.cert.X509CRLEntry#getRevocationReason()->CRLReason:::Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry.
java.security.cert.X509CRLSelector#setIssuers(Collection)->void:::Sets the issuerNames criterion
java.security.cert.X509CRLSelector#setIssuerNames(Collection)->void:::Note: use #setIssuers(Collection) instead or only specify the byte array form of distinguished names when using this method
java.security.cert.X509CRLSelector#addIssuer(X500Principal)->void:::Adds a name to the issuerNames criterion
java.security.cert.X509CRLSelector#addIssuerName(String)->void:::Denigrated, use #addIssuer(X500Principal) or #addIssuerName(byte[]) instead
java.security.cert.X509CRLSelector#addIssuerName(byte[])->void:::Adds a name to the issuerNames criterion
java.security.cert.X509CRLSelector#setMinCRLNumber(BigInteger)->void:::Sets the minCRLNumber criterion
java.security.cert.X509CRLSelector#setMaxCRLNumber(BigInteger)->void:::Sets the maxCRLNumber criterion
java.security.cert.X509CRLSelector#setDateAndTime(Date)->void:::Sets the dateAndTime criterion
java.security.cert.X509CRLSelector#setDateAndTime(Date, long)->void:::Sets the dateAndTime criterion and allows for the specified clock skew (in milliseconds) when checking against the validity period of the CRL.
java.security.cert.X509CRLSelector#setCertificateChecking(X509Certificate)->void:::Sets the certificate being checked
java.security.cert.X509CRLSelector#getIssuers()->Collection:::Returns the issuerNames criterion
java.security.cert.X509CRLSelector#getIssuerNames()->Collection:::Returns a copy of the issuerNames criterion
java.security.cert.X509CRLSelector#getMinCRL()->BigInteger:::Returns the minCRLNumber criterion
java.security.cert.X509CRLSelector#getMaxCRL()->BigInteger:::Returns the maxCRLNumber criterion
java.security.cert.X509CRLSelector#getDateAndTime()->Date:::Returns the dateAndTime criterion
java.security.cert.X509CRLSelector#getCertificateChecking()->X509Certificate:::Returns the certificate being checked
java.security.cert.X509CRLSelector#toString()->String:::Returns a printable representation of the X509CRLSelector.
java.security.cert.X509CRLSelector#match(CRL)->boolean:::Decides whether a CRL should be selected.
java.security.cert.X509CRLSelector#clone()->Object:::Returns a copy of this object.
java.security.cert.X509Extension#hasUnsupportedCriticalExtension()->boolean:::Check if there is a critical extension that is not supported.
java.security.cert.X509Extension#getCriticalExtensionOIDs()->Set:::Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface
java.security.cert.X509Extension#getNonCriticalExtensionOIDs()->Set:::Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface
java.security.cert.X509Extension#getExtensionValue(String)->byte[]:::Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String

Certificate#getType():::Returns the type of this certificate.:::
Certificate#equals(Object):::Compares this certificate for equality with the specified object:::X509CertImpl.getEncodedInternal->X509CertImpl.getEncodedInternal->Arrays.equals
Certificate#hashCode():::Returns a hashcode value for this certificate from its encoded form.:::X509CertImpl.getEncodedInternal->Arrays.hashCode
Certificate#getEncoded():::Returns the encoded form of this certificate:::
Certificate#verify(PublicKey):::Verifies that this certificate was signed using the private key that corresponds to the specified public key.:::
Certificate#verify(PublicKey, String):::Verifies that this certificate was signed using the private key that corresponds to the specified public key:::
Certificate#verify(PublicKey, Provider):::Verifies that this certificate was signed using the private key that corresponds to the specified public key:::
Certificate#toString():::Returns a string representation of this certificate.:::
Certificate#getPublicKey():::Gets the public key from this certificate.:::
Certificate.CertificateRep#readResolve():::Resolve the Certificate Object.:::e.getMessage->CertificateFactory.getInstance->cf.generateCertificate
Certificate#writeReplace():::Replace the Certificate to be serialized.:::e.getMessage->this.getEncoded
CertificateFactory#getInstance(String):::Returns a certificate factory object that implements the specified certificate type:::Objects.requireNonNull->GetInstance.getInstance
CertificateFactory#getInstance(String, String):::Returns a certificate factory object for the specified certificate type:::Objects.requireNonNull->GetInstance.getInstance
CertificateFactory#getInstance(String, Provider):::Returns a certificate factory object for the specified certificate type:::Objects.requireNonNull->GetInstance.getInstance
CertificateFactory#getProvider():::Returns the provider of this certificate factory.:::
CertificateFactory#getType():::Returns the name of the certificate type associated with this certificate factory.:::
CertificateFactory#generateCertificate(InputStream):::Generates a certificate object and initializes it with the data read from the input stream inStream:::certFacSpi.engineGenerateCertificate
CertificateFactory#getCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first:::certFacSpi.engineGetCertPathEncodings
CertificateFactory#generateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::certFacSpi.engineGenerateCertPath
CertificateFactory#generateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::certFacSpi.engineGenerateCertPath
CertificateFactory#generateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates:::certFacSpi.engineGenerateCertPath
CertificateFactory#generateCertificates(InputStream):::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream:::certFacSpi.engineGenerateCertificates
CertificateFactory#generateCRL(InputStream):::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream:::certFacSpi.engineGenerateCRL
CertificateFactory#generateCRLs(InputStream):::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream:::certFacSpi.engineGenerateCRLs
CertificateFactorySpi#engineGenerateCertificate(InputStream):::Generates a certificate object and initializes it with the data read from the input stream inStream:::
CertificateFactorySpi#engineGenerateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::
CertificateFactorySpi#engineGenerateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::
CertificateFactorySpi#engineGenerateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates:::
CertificateFactorySpi#engineGetCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first:::
CertificateFactorySpi#engineGenerateCertificates(InputStream):::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream:::
CertificateFactorySpi#engineGenerateCRL(InputStream):::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream:::
CertificateFactorySpi#engineGenerateCRLs(InputStream):::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream:::
CertificateRevokedException#getRevocationDate():::Returns the date on which the certificate was revoked:::revocationDate.clone
CertificateRevokedException#getRevocationReason():::Returns the reason the certificate was revoked.:::
CertificateRevokedException#getAuthorityName():::Returns the name of the authority that signed the certificate's revocation status information.:::
CertificateRevokedException#getInvalidityDate():::Returns the invalidity date, as specified in the Invalidity Date extension of this CertificateRevokedException:::getExtensions().get->InvalidityDateExtension.toImpl(ext).get->invalidity.getTime
CertificateRevokedException#getExtensions():::Returns a map of X.509 extensions containing additional information about the revoked certificate, such as the Invalidity Date Extension:::Collections.unmodifiableMap
CertPath#getType():::Returns the type of Certificates in this certification path:::
CertPath#getEncodings():::Returns an iteration of the encodings supported by this certification path, with the default encoding first:::
CertPath#equals(Object):::Compares this certification path for equality with the specified object:::otherCP.getType().equals->this.getCertificates->otherCP.getCertificates->thisCertList.equals
CertPath#hashCode():::Returns the hashcode for this certification path:::type.hashCode->getCertificates().hashCode
CertPath#toString():::Returns a string representation of this certification path:::getCertificates().iterator->getCertificates().size->sb.append->sb.append->sb.append->stringIterator.next->stringCert.toString->sb.append->sb.append->stringIterator.hasNext->sb.append->sb.toString
CertPath#getEncoded():::Returns the encoded form of this certification path, using the default encoding.:::
CertPath#getEncoded(String):::Returns the encoded form of this certification path, using the specified encoding.:::
CertPath#getCertificates():::Returns the list of certificates in this certification path:::
CertPath#writeReplace():::Replaces the CertPath to be serialized with a CertPathRep object.:::nse.initCause->this.getEncoded
CertPath.CertPathRep#readResolve():::Returns a CertPath constructed from the type and data.:::nse.initCause->CertificateFactory.getInstance->cf.generateCertPath
CertPathBuilder#getInstance(String):::Returns a CertPathBuilder object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathBuilder#getInstance(String, String):::Returns a CertPathBuilder object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathBuilder#getInstance(String, Provider):::Returns a CertPathBuilder object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathBuilder#getProvider():::Returns the provider of this CertPathBuilder.:::
CertPathBuilder#getAlgorithm():::Returns the name of the algorithm of this CertPathBuilder.:::
CertPathBuilder#build(CertPathParameters):::Attempts to build a certification path using the specified algorithm parameter set.:::builderSpi.engineBuild
CertPathBuilder#getDefaultType():::Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string "PKIX" if no such property exists:::AccessController.doPrivileged
CertPathBuilder#getRevocationChecker():::Returns a CertPathChecker that the encapsulated CertPathBuilderSpi implementation uses to check the revocation status of certificates:::builderSpi.engineGetRevocationChecker
CertPathBuilderResult#getCertPath():::Returns the built certification path.:::
CertPathBuilderResult#clone():::Makes a copy of this CertPathBuilderResult:::
CertPathBuilderSpi#engineBuild(CertPathParameters):::Attempts to build a certification path using the specified algorithm parameter set.:::
CertPathBuilderSpi#engineGetRevocationChecker():::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates:::
CertPathChecker#init(boolean):::Initializes the internal state of this CertPathChecker:::
CertPathChecker#isForwardCheckingSupported():::Indicates if forward checking is supported:::
CertPathChecker#check(Certificate):::Performs the check(s) on the specified certificate using its internal state:::
CertPathHelperImpl#initialize():::Initialize the helper framework:::
CertPathParameters#clone():::Makes a copy of this CertPathParameters:::
CertPathValidator#getInstance(String):::Returns a CertPathValidator object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathValidator#getInstance(String, String):::Returns a CertPathValidator object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathValidator#getInstance(String, Provider):::Returns a CertPathValidator object that implements the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
CertPathValidator#getProvider():::Returns the Provider of this CertPathValidator.:::
CertPathValidator#getAlgorithm():::Returns the algorithm name of this CertPathValidator.:::
CertPathValidator#validate(CertPath, CertPathParameters):::Validates the specified certification path using the specified algorithm parameter set:::validatorSpi.engineValidate
CertPathValidator#getDefaultType():::Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string "PKIX" if no such property exists:::AccessController.doPrivileged
CertPathValidator#getRevocationChecker():::Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates:::validatorSpi.engineGetRevocationChecker
CertPathValidatorException#getCertPath():::Returns the certification path that was being validated when the exception was thrown.:::
CertPathValidatorException#getIndex():::Returns the index of the certificate in the certification path that caused the exception to be thrown:::
CertPathValidatorException#getReason():::Returns the reason that the validation failed:::
CertPathValidatorResult#clone():::Makes a copy of this CertPathValidatorResult:::
CertPathValidatorSpi#engineValidate(CertPath, CertPathParameters):::Validates the specified certification path using the specified algorithm parameter set:::
CertPathValidatorSpi#engineGetRevocationChecker():::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates:::
CertSelector#match(Certificate):::Decides whether a Certificate should be selected.:::
CertSelector#clone():::Makes a copy of this CertSelector:::
CertStore#getCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::storeSpi.engineGetCertificates
CertStore#getCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::storeSpi.engineGetCRLs
CertStore#getInstance(String, CertStoreParameters):::Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters:::Objects.requireNonNull->this.handleException->GetInstance.getInstance
CertStore#getInstance(String, CertStoreParameters, String):::Returns a CertStore object that implements the specified CertStore type:::Objects.requireNonNull->this.handleException->GetInstance.getInstance
CertStore#getInstance(String, CertStoreParameters, Provider):::Returns a CertStore object that implements the specified CertStore type:::Objects.requireNonNull->this.handleException->GetInstance.getInstance
CertStore#getCertStoreParameters():::Returns the parameters used to initialize this CertStore:::params.clone
CertStore#getType():::Returns the type of this CertStore.:::
CertStore#getProvider():::Returns the provider of this CertStore.:::
CertStore#getDefaultType():::Returns the default CertStore type as specified by the certstore.type security property, or the string "LDAP" if no such property exists:::AccessController.doPrivileged
CertStoreParameters#clone():::Makes a copy of this CertStoreParameters:::
CertStoreSpi#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::
CertStoreSpi#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::
CollectionCertStoreParameters#getCollection():::Returns the Collection from which Certificates and CRLs are retrieved:::
CollectionCertStoreParameters#clone():::Returns a copy of this object:::e.toString->super.clone
CollectionCertStoreParameters#toString():::Returns a formatted string describing the parameters.:::sb.append->sb.append->sb.append->sb.toString
CRL#getType():::Returns the type of this CRL.:::
CRL#toString():::Returns a string representation of this CRL.:::
CRL#isRevoked(Certificate):::Checks whether the given certificate is on this CRL.:::
CRLSelector#match(CRL):::Decides whether a CRL should be selected.:::
CRLSelector#clone():::Makes a copy of this CRLSelector:::
Extension#getId():::Gets the extensions's object identifier.:::
Extension#isCritical():::Gets the extension's criticality setting.:::
Extension#getValue():::Gets the extensions's DER-encoded value:::
Extension#encode(OutputStream):::Generates the extension's DER encoding and writes it to the output stream.:::
LDAPCertStoreParameters#getServerName():::Returns the DNS name of the LDAP server.:::
LDAPCertStoreParameters#getPort():::Returns the port number of the LDAP server.:::
LDAPCertStoreParameters#clone():::Returns a copy of this object:::e.toString->super.clone
LDAPCertStoreParameters#toString():::Returns a formatted string describing the parameters.:::sb.append->sb.append->sb.append->sb.append->sb.toString
PKIXBuilderParameters#setMaxPathLength(int):::Sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path:::
PKIXBuilderParameters#getMaxPathLength():::Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path:::
PKIXBuilderParameters#toString():::Returns a formatted string describing the parameters.:::sb.append->super.toString->sb.append->sb.append->sb.append->sb.toString
PKIXCertPathBuilderResult#getCertPath():::Returns the built and validated certification path:::
PKIXCertPathBuilderResult#toString():::Return a printable representation of this PKIXCertPathBuilderResult.:::sb.append->sb.append->getTrustAnchor().toString->sb.append->this.getPolicyTree->String.valueOf->sb.append->this.getPublicKey->sb.append->sb.append->sb.toString
PKIXCertPathChecker#init(boolean):::Initializes the internal state of this PKIXCertPathChecker:::
PKIXCertPathChecker#isForwardCheckingSupported():::Indicates if forward checking is supported:::
PKIXCertPathChecker#getSupportedExtensions():::Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e:::
PKIXCertPathChecker#check(Certificate, Collection):::Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions:::
PKIXCertPathChecker#check(Certificate):::This implementation calls {@code check(cert, java.util.Collections.<String>emptySet()).:::java.util.Collections.emptySet->this.check
PKIXCertPathChecker#clone():::Returns a clone of this object:::e.toString->super.clone
PKIXCertPathValidatorResult#getTrustAnchor():::Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.:::
PKIXCertPathValidatorResult#getPolicyTree():::Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm:::
PKIXCertPathValidatorResult#getPublicKey():::Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable.:::
PKIXCertPathValidatorResult#clone():::Returns a copy of this object.:::e.toString->super.clone
PKIXCertPathValidatorResult#toString():::Return a printable representation of this PKIXCertPathValidatorResult.:::sb.append->trustAnchor.toString->sb.append->String.valueOf->sb.append->sb.append->sb.append->sb.toString
PKIXParameters#getTrustAnchors():::Returns an immutable Set of the most-trusted CAs.:::
PKIXParameters#setTrustAnchors(Set):::Sets the Set of most-trusted CAs:::trustAnchors.isEmpty->i.next->i.hasNext->trustAnchors.iterator->Collections.unmodifiableSet
PKIXParameters#getInitialPolicies():::Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing:::
PKIXParameters#setInitialPolicies(Set):::Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing:::Collections.emptySet->i.next->i.hasNext->initialPolicies.iterator->Collections.unmodifiableSet
PKIXParameters#setCertStores(List):::Sets the list of CertStores to be used in finding certificates and CRLs:::i.next->i.hasNext->stores.iterator
PKIXParameters#addCertStore(CertStore):::Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs.:::this.certStores.add
PKIXParameters#getCertStores():::Returns an immutable List of CertStores that are used to find certificates and CRLs.:::Collections.unmodifiableList
PKIXParameters#setRevocationEnabled(boolean):::Sets the RevocationEnabled flag:::
PKIXParameters#isRevocationEnabled():::Checks the RevocationEnabled flag:::
PKIXParameters#setExplicitPolicyRequired(boolean):::Sets the ExplicitPolicyRequired flag:::
PKIXParameters#isExplicitPolicyRequired():::Checks if explicit policy is required:::
PKIXParameters#setPolicyMappingInhibited(boolean):::Sets the PolicyMappingInhibited flag:::
PKIXParameters#isPolicyMappingInhibited():::Checks if policy mapping is inhibited:::
PKIXParameters#setAnyPolicyInhibited(boolean):::Sets state to determine if the any policy OID should be processed if it is included in a certificate:::
PKIXParameters#isAnyPolicyInhibited():::Checks whether the any policy OID should be processed if it is included in a certificate.:::
PKIXParameters#setPolicyQualifiersRejected(boolean):::Sets the PolicyQualifiersRejected flag:::
PKIXParameters#getPolicyQualifiersRejected():::Gets the PolicyQualifiersRejected flag:::
PKIXParameters#getDate():::Returns the time for which the validity of the certification path should be determined:::this.date.clone
PKIXParameters#setDate(Date):::Sets the time for which the validity of the certification path should be determined:::date.clone
PKIXParameters#setCertPathCheckers(List):::Sets a List of additional certification path checkers:::tmpList.add
PKIXParameters#getCertPathCheckers():::Returns the List of certification path checkers:::tmpList.add->Collections.unmodifiableList
PKIXParameters#addCertPathChecker(PKIXCertPathChecker):::Adds a PKIXCertPathChecker to the list of certification path checkers:::certPathCheckers.add
PKIXParameters#getSigProvider():::Returns the signature provider's name, or null if not set.:::
PKIXParameters#setSigProvider(String):::Sets the signature provider's name:::
PKIXParameters#getTargetCertConstraints():::Returns the required constraints on the target certificate:::certSelector.clone
PKIXParameters#setTargetCertConstraints(CertSelector):::Sets the required constraints on the target certificate:::selector.clone
PKIXParameters#clone():::Makes a copy of this PKIXParameters object:::e.toString->super.clone->certPathCheckers.size->copy.certPathCheckers.add
PKIXParameters#toString():::Returns a formatted string describing the parameters.:::sb.append->unmodTrustAnchors.toString->sb.append->unmodInitialPolicies.isEmpty->unmodInitialPolicies.toString->sb.append->sb.append->String.valueOf->sb.append->String.valueOf->sb.append->sb.append->sb.append->sb.append->sb.append->sb.append->String.valueOf->sb.append->certPathCheckers.toString->sb.append->certStores.toString->sb.append->sb.append->sb.toString
PKIXRevocationChecker#setOcspResponder(URI):::Sets the URI that identifies the location of the OCSP responder:::
PKIXRevocationChecker#getOcspResponder():::Gets the URI that identifies the location of the OCSP responder:::
PKIXRevocationChecker#setOcspResponderCert(X509Certificate):::Sets the OCSP responder's certificate:::
PKIXRevocationChecker#getOcspResponderCert():::Gets the OCSP responder's certificate:::
PKIXRevocationChecker#setOcspExtensions(List):::Sets the optional OCSP request extensions.:::Collections.emptyList
PKIXRevocationChecker#getOcspExtensions():::Gets the optional OCSP request extensions.:::Collections.unmodifiableList
PKIXRevocationChecker#setOcspResponses(Map):::Sets the OCSP responses:::responses.size->e.getKey->e.getValue().clone->copy.put->responses.entrySet->Collections.emptyMap
PKIXRevocationChecker#getOcspResponses():::Gets the OCSP responses:::ocspResponses.size->e.getKey->e.getValue().clone->copy.put->ocspResponses.entrySet
PKIXRevocationChecker#setOptions(Set):::Sets the revocation options.:::Collections.emptySet
PKIXRevocationChecker#getOptions():::Gets the revocation options.:::Collections.unmodifiableSet
PKIXRevocationChecker#getSoftFailExceptions():::Returns a list containing the exceptions that are ignored by the revocation checker when the Option#SOFT_FAIL SOFT_FAIL option is set:::
PolicyNode#getParent():::Returns the parent of this node, or null if this is the root node.:::
PolicyNode#getChildren():::Returns an iterator over the children of this node:::
PolicyNode#getDepth():::Returns the depth of this node in the valid policy tree.:::
PolicyNode#getValidPolicy():::Returns the valid policy represented by this node.:::
PolicyNode#getPolicyQualifiers():::Returns the set of policy qualifiers associated with the valid policy represented by this node.:::
PolicyNode#getExpectedPolicies():::Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed.:::
PolicyNode#isCritical():::Returns the criticality indicator of the certificate policy extension in the most recently processed certificate.:::
PolicyQualifierInfo#getPolicyQualifierId():::Returns the policyQualifierId field of this PolicyQualifierInfo:::
PolicyQualifierInfo#getEncoded():::Returns the ASN.1 DER encoded form of this PolicyQualifierInfo.:::mEncoded.clone
PolicyQualifierInfo#getPolicyQualifier():::Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo.:::mData.clone
PolicyQualifierInfo#toString():::Return a printable representation of this PolicyQualifierInfo.:::sb.append->sb.append->sb.append->sb.append->sb.toString
TrustAnchor#getTrustedCert():::Returns the most-trusted CA certificate.:::
TrustAnchor#getCA():::Returns the name of the most-trusted CA as an X500Principal.:::
TrustAnchor#getCAName():::Returns the name of the most-trusted CA in RFC 2253 String format.:::
TrustAnchor#getCAPublicKey():::Returns the public key of the most-trusted CA.:::
TrustAnchor#getNameConstraints():::Returns the name constraints parameter:::ncBytes.clone
TrustAnchor#toString():::Returns a formatted string describing the TrustAnchor.:::sb.append->trustedCert.toString->sb.append->pubKey.toString->sb.append->String.valueOf->sb.append->nc.toString->sb.append->sb.toString
URICertStoreParameters#getURI():::Returns the URI used to construct this URICertStoreParameters object.:::
URICertStoreParameters#clone():::Returns a copy of this object:::e.toString
URICertStoreParameters#hashCode():::Returns a hash code value for this parameters object:::uri.hashCode
URICertStoreParameters#equals(Object):::Compares the specified object with this parameters object for equality:::other.getURI->uri.equals
URICertStoreParameters#toString():::Returns a formatted string describing the parameters including the URI used to construct this object.:::uri.toString
X509Certificate#checkValidity():::Checks that the certificate is currently valid:::
X509Certificate#checkValidity(Date):::Checks that the given date is within the certificate's validity period:::
X509Certificate#getVersion():::Gets the version (version number) value from the certificate:::
X509Certificate#getSerialNumber():::Gets the serialNumber value from the certificate:::
X509Certificate#getIssuerDN():::Denigrated, replaced by #getIssuerX500Principal():::
X509Certificate#getIssuerX500Principal():::Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal:::X509CertImpl.getIssuerX500Principal
X509Certificate#getSubjectDN():::Denigrated, replaced by #getSubjectX500Principal():::
X509Certificate#getSubjectX500Principal():::Returns the subject (subject distinguished name) value from the certificate as an X500Principal:::X509CertImpl.getSubjectX500Principal
X509Certificate#getNotBefore():::Gets the notBefore date from the validity period of the certificate:::
X509Certificate#getNotAfter():::Gets the notAfter date from the validity period of the certificate:::
X509Certificate#getTBSCertificate():::Gets the DER-encoded certificate information, the tbsCertificate from this certificate:::
X509Certificate#getSignature():::Gets the signature value (the raw signature bits) from the certificate:::
X509Certificate#getSigAlgName():::Gets the signature algorithm name for the certificate signature algorithm:::
X509Certificate#getSigAlgOID():::Gets the signature algorithm OID string from the certificate:::
X509Certificate#getSigAlgParams():::Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm:::
X509Certificate#getIssuerUniqueID():::Gets the issuerUniqueID value from the certificate:::
X509Certificate#getSubjectUniqueID():::Gets the subjectUniqueID value from the certificate:::
X509Certificate#getKeyUsage():::Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15):::
X509Certificate#getExtendedKeyUsage():::Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37):::X509CertImpl.getExtendedKeyUsage
X509Certificate#getBasicConstraints():::Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19):::
X509Certificate#getSubjectAlternativeNames():::Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17):::X509CertImpl.getSubjectAlternativeNames
X509Certificate#getIssuerAlternativeNames():::Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18):::X509CertImpl.getIssuerAlternativeNames
X509Certificate#verify(PublicKey, Provider):::Verifies that this certificate was signed using the private key that corresponds to the specified public key:::this.getSigAlgName->Signature.getInstance->Signature.getInstance->e.getMessage->e.getCause->this.getSigAlgParams->SignatureUtil.getParamSpec->SignatureUtil.initVerifyWithParam->this.getTBSCertificate->sig.update->this.getSignature->sig.verify
X509CertSelector#setCertificate(X509Certificate):::Sets the certificateEquals criterion:::
X509CertSelector#setSerialNumber(BigInteger):::Sets the serialNumber criterion:::
X509CertSelector#setIssuer(X500Principal):::Sets the issuer criterion:::
X509CertSelector#setIssuer(String):::Denigrated, use #setIssuer(X500Principal) or #setIssuer(byte[]) instead:::new X500Name(issuerDN).asX500Principal
X509CertSelector#setIssuer(byte[]):::Sets the issuer criterion:::
X509CertSelector#setSubject(X500Principal):::Sets the subject criterion:::
X509CertSelector#setSubject(String):::Denigrated, use #setSubject(X500Principal) or #setSubject(byte[]) instead:::new X500Name(subjectDN).asX500Principal
X509CertSelector#setSubject(byte[]):::Sets the subject criterion:::
X509CertSelector#setSubjectKeyIdentifier(byte[]):::Sets the subjectKeyIdentifier criterion:::subjectKeyID.clone
X509CertSelector#setAuthorityKeyIdentifier(byte[]):::Sets the authorityKeyIdentifier criterion:::authorityKeyID.clone
X509CertSelector#setCertificateValid(Date):::Sets the certificateValid criterion:::certValid.clone
X509CertSelector#setPrivateKeyValid(Date):::Sets the privateKeyValid criterion:::privateKeyValid.clone
X509CertSelector#setSubjectPublicKeyAlgID(String):::Sets the subjectPublicKeyAlgID criterion:::
X509CertSelector#setSubjectPublicKey(PublicKey):::Sets the subjectPublicKey criterion:::key.getEncoded
X509CertSelector#setSubjectPublicKey(byte[]):::Sets the subjectPublicKey criterion:::key.clone->X509Key.parse
X509CertSelector#setKeyUsage(boolean[]):::Sets the keyUsage criterion:::keyUsage.clone
X509CertSelector#setExtendedKeyUsage(Set):::Sets the extendedKeyUsage criterion:::keyPurposeSet.isEmpty->Collections.unmodifiableSet->keyPurposeOIDSet.add
X509CertSelector#setMatchAllSubjectAltNames(boolean):::Enables/disables matching all of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods:::
X509CertSelector#setSubjectAlternativeNames(Collection>):::Sets the subjectAlternativeNames criterion:::names.isEmpty->this.cloneAndCheckNames->this.parseNames
X509CertSelector#addSubjectAlternativeName(int, String):::Adds a name to the subjectAlternativeNames criterion:::this.addSubjectAlternativeNameInternal
X509CertSelector#addSubjectAlternativeName(int, byte[]):::Adds a name to the subjectAlternativeNames criterion:::name.clone->this.addSubjectAlternativeNameInternal
X509CertSelector#equalNames(Collection, Collection):::Compare for equality two objects of the form passed to setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames):::object1.equals
X509CertSelector#makeGeneralNameInterface(int, Object):::Make a GeneralNameInterface out of a name type (0-8) and an Object that may be a byte array holding the ASN.1 DER encoded name or a String form of the name:::debug.println->debug.println->debug.println->result.toString->debug.println->debug.println->result.toString->debug.println
X509CertSelector#setNameConstraints(byte[]):::Sets the name constraints criterion:::bytes.clone
X509CertSelector#setBasicConstraints(int):::Sets the basic constraints constraint:::
X509CertSelector#setPolicy(Set):::Sets the policy constraint:::Collections.unmodifiableSet->tempSet.iterator->i.next->polIdVector.add->i.hasNext
X509CertSelector#setPathToNames(Collection>):::Sets the pathToNames criterion:::names.isEmpty->this.cloneAndCheckNames->this.parseNames
X509CertSelector#addPathToName(int, String):::Adds a name to the pathToNames criterion:::this.addPathToNameInternal
X509CertSelector#addPathToName(int, byte[]):::Adds a name to the pathToNames criterion:::name.clone->this.addPathToNameInternal
X509CertSelector#getCertificate():::Returns the certificateEquals criterion:::
X509CertSelector#getSerialNumber():::Returns the serialNumber criterion:::
X509CertSelector#getIssuer():::Returns the issuer criterion as an X500Principal:::
X509CertSelector#getIssuerAsString():::Denigrated, use #getIssuer() or #getIssuerAsBytes() instead:::issuer.getName
X509CertSelector#getIssuerAsBytes():::Returns the issuer criterion as a byte array:::issuer.getEncoded
X509CertSelector#getSubject():::Returns the subject criterion as an X500Principal:::
X509CertSelector#getSubjectAsString():::Denigrated, use #getSubject() or #getSubjectAsBytes() instead:::subject.getName
X509CertSelector#getSubjectAsBytes():::Returns the subject criterion as a byte array:::subject.getEncoded
X509CertSelector#getSubjectKeyIdentifier():::Returns the subjectKeyIdentifier criterion:::subjectKeyID.clone
X509CertSelector#getAuthorityKeyIdentifier():::Returns the authorityKeyIdentifier criterion:::authorityKeyID.clone
X509CertSelector#getCertificateValid():::Returns the certificateValid criterion:::certificateValid.clone
X509CertSelector#getPrivateKeyValid():::Returns the privateKeyValid criterion:::privateKeyValid.clone
X509CertSelector#getSubjectPublicKeyAlgID():::Returns the subjectPublicKeyAlgID criterion:::subjectPublicKeyAlgID.toString
X509CertSelector#getSubjectPublicKey():::Returns the subjectPublicKey criterion:::
X509CertSelector#getKeyUsage():::Returns the keyUsage criterion:::keyUsage.clone
X509CertSelector#getExtendedKeyUsage():::Returns the extendedKeyUsage criterion:::
X509CertSelector#getMatchAllSubjectAltNames():::Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods:::
X509CertSelector#getSubjectAlternativeNames():::Returns a copy of the subjectAlternativeNames criterion:::this.cloneNames
X509CertSelector#getNameConstraints():::Returns the name constraints criterion:::ncBytes.clone
X509CertSelector#getBasicConstraints():::Returns the basic constraints constraint:::
X509CertSelector#getPolicy():::Returns the policy criterion:::
X509CertSelector#getPathToNames():::Returns a copy of the pathToNames criterion:::this.cloneNames
X509CertSelector#toString():::Return a printable representation of the CertSelector.:::sb.append->x509Cert.toString->sb.append->serialNumber.toString->sb.append->this.getIssuerAsString->sb.append->this.getSubjectAsString->sb.append->String.valueOf->sb.append->sb.append->subjectAlternativeNames.iterator->i.next->list.get->list.get->sb.append->i.hasNext->enc.encodeBuffer->sb.append->enc.encodeBuffer->sb.append->certificateValid.toString->sb.append->privateKeyValid.toString->sb.append->subjectPublicKeyAlgID.toString->sb.append->subjectPublicKey.toString->sb.append->this.keyUsageToString->sb.append->keyPurposeSet.toString->sb.append->policy.toString->sb.append->sb.append->pathToGeneralNames.iterator->i.next->sb.append->i.hasNext->sb.append->sb.toString
X509CertSelector#match(Certificate):::Decides whether a Certificate should be selected.:::(xcert.getSerialNumber()).toString->xcert.getIssuerDN->xcert.getSubjectDN->debug.println->x509Cert.equals->debug.println->xcert.getSerialNumber->serialNumber.equals->debug.println->xcert.getIssuerX500Principal->issuer.equals->debug.println->xcert.getSubjectX500Principal->subject.equals->debug.println->debug.println->xcert.checkValidity->xcert.getPublicKey().getEncoded->Arrays.equals->debug.println->this.matchBasicConstraints->this.matchKeyUsage->this.matchExtendedKeyUsage->this.matchSubjectKeyID->this.matchAuthorityKeyID->this.matchPrivateKeyValid->this.matchSubjectPublicKeyAlgID->this.matchPolicy->this.matchSubjectAlternativeNames->this.matchPathToNames->this.matchNameConstraints->debug.println
X509CertSelector#clone():::Returns a copy of this object.:::e.toString->super.clone->this.cloneSet->this.cloneSet->this.cloneSet->this.cloneSet
X509CRL#equals(Object):::Compares this CRL for equality with the given object:::X509CRLImpl.getEncodedInternal->X509CRLImpl.getEncodedInternal->Arrays.equals
X509CRL#hashCode():::Returns a hashcode value for this CRL from its encoded form.:::X509CRLImpl.getEncodedInternal
X509CRL#getEncoded():::Returns the ASN.1 DER-encoded form of this CRL.:::
X509CRL#verify(PublicKey):::Verifies that this CRL was signed using the private key that corresponds to the given public key.:::
X509CRL#verify(PublicKey, String):::Verifies that this CRL was signed using the private key that corresponds to the given public key:::
X509CRL#verify(PublicKey, Provider):::Verifies that this CRL was signed using the private key that corresponds to the given public key:::this.getSigAlgName->Signature.getInstance->Signature.getInstance->e.getMessage->e.getCause->this.getSigAlgParams->SignatureUtil.getParamSpec->SignatureUtil.initVerifyWithParam->this.getTBSCertList->sig.update->this.getSignature->sig.verify
X509CRL#getVersion():::Gets the version (version number) value from the CRL:::
X509CRL#getIssuerDN():::Denigrated, replaced by #getIssuerX500Principal():::
X509CRL#getIssuerX500Principal():::Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal:::X509CRLImpl.getIssuerX500Principal
X509CRL#getThisUpdate():::Gets the thisUpdate date from the CRL:::
X509CRL#getNextUpdate():::Gets the nextUpdate date from the CRL.:::
X509CRL#getRevokedCertificate(BigInteger):::Gets the CRL entry, if any, with the given certificate serialNumber.:::
X509CRL#getRevokedCertificate(X509Certificate):::Get the CRL entry, if any, for the given certificate:::certificate.getIssuerX500Principal->this.getIssuerX500Principal->certIssuer.equals->certificate.getSerialNumber->this.getRevokedCertificate
X509CRL#getRevokedCertificates():::Gets all the entries from this CRL:::
X509CRL#getTBSCertList():::Gets the DER-encoded CRL information, the tbsCertList from this CRL:::
X509CRL#getSignature():::Gets the signature value (the raw signature bits) from the CRL:::
X509CRL#getSigAlgName():::Gets the signature algorithm name for the CRL signature algorithm:::
X509CRL#getSigAlgOID():::Gets the signature algorithm OID string from the CRL:::
X509CRL#getSigAlgParams():::Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm:::
X509CRLEntry#equals(Object):::Compares this CRL entry for equality with the given object:::this.getEncoded->((X509CRLEntry) other).getEncoded
X509CRLEntry#hashCode():::Returns a hashcode value for this CRL entry from its encoded form.:::this.getEncoded
X509CRLEntry#getEncoded():::Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE.:::
X509CRLEntry#getSerialNumber():::Gets the serial number from this X509CRLEntry, the userCertificate.:::
X509CRLEntry#getCertificateIssuer():::Get the issuer of the X509Certificate described by this entry:::
X509CRLEntry#getRevocationDate():::Gets the revocation date from this X509CRLEntry, the revocationDate.:::
X509CRLEntry#hasExtensions():::Returns true if this CRL entry has extensions.:::
X509CRLEntry#toString():::Returns a string representation of this CRL entry.:::
X509CRLEntry#getRevocationReason():::Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry.:::this.hasExtensions->X509CRLEntryImpl.getRevocationReason
X509CRLSelector#setIssuers(Collection):::Sets the issuerNames criterion:::issuers.isEmpty->p.getEncoded->issuerNames.add
X509CRLSelector#setIssuerNames(Collection):::Note: use #setIssuers(Collection) instead or only specify the byte array form of distinguished names when using this method:::names.size->this.cloneAndCheckIssuerNames->this.parseIssuerNames
X509CRLSelector#addIssuer(X500Principal):::Adds a name to the issuerNames criterion:::issuer.getEncoded->this.addIssuerNameInternal
X509CRLSelector#addIssuerName(String):::Denigrated, use #addIssuer(X500Principal) or #addIssuerName(byte[]) instead:::new X500Name(name).asX500Principal->this.addIssuerNameInternal
X509CRLSelector#addIssuerName(byte[]):::Adds a name to the issuerNames criterion:::name.clone->new X500Name(name).asX500Principal->this.addIssuerNameInternal
X509CRLSelector#setMinCRLNumber(BigInteger):::Sets the minCRLNumber criterion:::
X509CRLSelector#setMaxCRLNumber(BigInteger):::Sets the maxCRLNumber criterion:::
X509CRLSelector#setDateAndTime(Date):::Sets the dateAndTime criterion:::dateAndTime.getTime
X509CRLSelector#setDateAndTime(Date, long):::Sets the dateAndTime criterion and allows for the specified clock skew (in milliseconds) when checking against the validity period of the CRL.:::dateAndTime.getTime
X509CRLSelector#setCertificateChecking(X509Certificate):::Sets the certificate being checked:::
X509CRLSelector#getIssuers():::Returns the issuerNames criterion:::Collections.unmodifiableCollection
X509CRLSelector#getIssuerNames():::Returns a copy of the issuerNames criterion:::this.cloneIssuerNames
X509CRLSelector#getMinCRL():::Returns the minCRLNumber criterion:::
X509CRLSelector#getMaxCRL():::Returns the maxCRLNumber criterion:::
X509CRLSelector#getDateAndTime():::Returns the dateAndTime criterion:::dateAndTime.clone
X509CRLSelector#getCertificateChecking():::Returns the certificate being checked:::
X509CRLSelector#toString():::Returns a printable representation of the X509CRLSelector.:::sb.append->sb.append->issuerNames.iterator->i.next->sb.append->i.hasNext->sb.append->sb.append->sb.append->sb.append->sb.append->sb.toString
X509CRLSelector#match(CRL):::Decides whether a CRL should be selected.:::xcrl.getIssuerX500Principal->issuerX500Principals.iterator->i.next().equals->i.hasNext->debug.println->xcrl.getExtensionValue->debug.println->debug.println->in.getOctetString->crlNumExt.get->crlNum.compareTo->debug.println->crlNum.compareTo->debug.println->xcrl.getThisUpdate->xcrl.getNextUpdate->debug.println->dateAndTime.getTime->dateAndTime.getTime->nowMinusSkew.after->nowPlusSkew.before->debug.println
X509CRLSelector#clone():::Returns a copy of this object.:::e.toString->super.clone
X509Extension#hasUnsupportedCriticalExtension():::Check if there is a critical extension that is not supported.:::
X509Extension#getCriticalExtensionOIDs():::Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface:::
X509Extension#getNonCriticalExtensionOIDs():::Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface:::
X509Extension#getExtensionValue(String):::Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String:::

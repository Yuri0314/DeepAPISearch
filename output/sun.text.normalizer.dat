sun.text.normalizer.BMPSet#contains(int)->boolean::: set contains
sun.text.normalizer.BMPSet#span(CharSequence, int, SpanCondition, OutputInt)->int:::Span the initial substring for which each character c has spanCondition==contains(c)
sun.text.normalizer.BMPSet#spanBack(CharSequence, int, SpanCondition)->int:::Symmetrical with span()
sun.text.normalizer.CharacterIteratorWrapper#current()->int::: character iterator wrapper current
sun.text.normalizer.CharacterIteratorWrapper#getLength()->int::: character iterator wrapper get length
sun.text.normalizer.CharacterIteratorWrapper#getIndex()->int::: character iterator wrapper get index
sun.text.normalizer.CharacterIteratorWrapper#next()->int::: character iterator wrapper next
sun.text.normalizer.CharacterIteratorWrapper#previous()->int::: character iterator wrapper previous
sun.text.normalizer.CharacterIteratorWrapper#setIndex(int)->void::: character iterator wrapper set index
sun.text.normalizer.CharacterIteratorWrapper#getText(char[], int)->int::: character iterator wrapper get text
sun.text.normalizer.CharacterIteratorWrapper#clone()->Object:::Creates a clone of this iterator
sun.text.normalizer.CharTrie#getCodePointValue(int)->char:::Gets the value associated with the codepoint
sun.text.normalizer.CharTrie#getLeadValue(char)->char:::Gets the value to the data which this lead surrogate character points to
sun.text.normalizer.CharTrie#unserialize(InputStream)->void:::Parses the input stream and stores its trie content into a index and data array
sun.text.normalizer.CharTrie#getSurrogateOffset(char, char)->int:::Gets the offset to the data which the surrogate pair points to.
sun.text.normalizer.FilteredNormalizer2#normalize(CharSequence, StringBuilder)->StringBuilder::: filtered normalizer2 normalize
sun.text.normalizer.FilteredNormalizer2#normalize(CharSequence, Appendable)->Appendable::: filtered normalizer2 normalize
sun.text.normalizer.FilteredNormalizer2#normalizeSecondAndAppend(StringBuilder, CharSequence)->StringBuilder::: filtered normalizer2 normalize second and append
sun.text.normalizer.FilteredNormalizer2#append(StringBuilder, CharSequence)->StringBuilder::: filtered normalizer2 append
sun.text.normalizer.FilteredNormalizer2#getDecomposition(int)->String::: filtered normalizer2 get decomposition
sun.text.normalizer.FilteredNormalizer2#getCombiningClass(int)->int::: filtered normalizer2 get combining class
sun.text.normalizer.FilteredNormalizer2#isNormalized(CharSequence)->boolean::: filtered normalizer2 is normalized
sun.text.normalizer.FilteredNormalizer2#spanQuickCheckYes(CharSequence)->int::: filtered normalizer2 span quick check yes
sun.text.normalizer.FilteredNormalizer2#hasBoundaryBefore(int)->boolean::: filtered normalizer2 has boundary before
sun.text.normalizer.ICUBinary.Authenticate#isDataVersionAcceptable(byte[])->boolean:::Method used in ICUBinary.readHeader() to provide data format authentication.
sun.text.normalizer.ICUBinary#getRequiredData(String)->ByteBuffer:::Loads an ICU binary data file and returns it as a ByteBuffer
sun.text.normalizer.ICUBinary#readHeaderAndDataVersion(ByteBuffer, int, Authenticate)->VersionInfo:::Same as readHeader(), but returns a VersionInfo rather than a compact int.
sun.text.normalizer.ICUBinary#readHeader(InputStream, byte[], Authenticate)->byte[]::: binary read header
sun.text.normalizer.ICUBinary#readHeader(ByteBuffer, int, Authenticate)->int:::Reads an ICU data header, checks the data format, and returns the data version
sun.text.normalizer.ICUBinary#skipBytes(ByteBuffer, int)->void::: binary skip bytes
sun.text.normalizer.ICUBinary#getVersionInfoFromCompactInt(int)->VersionInfo:::Returns a VersionInfo for the bytes in the compact version integer.
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#normalize(CharSequence, StringBuilder)->StringBuilder::: noop normalizer2 normalize
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#normalize(CharSequence, Appendable)->Appendable::: noop normalizer2 normalize
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#normalizeSecondAndAppend(StringBuilder, CharSequence)->StringBuilder::: noop normalizer2 normalize second and append
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#append(StringBuilder, CharSequence)->StringBuilder::: noop normalizer2 append
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#getDecomposition(int)->String::: noop normalizer2 get decomposition
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#isNormalized(CharSequence)->boolean::: noop normalizer2 is normalized
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#spanQuickCheckYes(CharSequence)->int::: noop normalizer2 span quick check yes
sun.text.normalizer.Norm2AllModes.NoopNormalizer2#hasBoundaryBefore(int)->boolean::: noop normalizer2 has boundary before
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalize(CharSequence, StringBuilder)->StringBuilder::: normalizer2 with impl normalize
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalize(CharSequence, Appendable)->Appendable::: normalizer2 with impl normalize
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalize(CharSequence, NormalizerImpl.ReorderingBuffer)->void::: normalizer2 with impl normalize
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalizeSecondAndAppend(StringBuilder, CharSequence)->StringBuilder::: normalizer2 with impl normalize second and append
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#append(StringBuilder, CharSequence)->StringBuilder::: normalizer2 with impl append
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalizeSecondAndAppend(StringBuilder, CharSequence, boolean)->StringBuilder::: normalizer2 with impl normalize second and append
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#normalizeAndAppend(CharSequence, boolean, NormalizerImpl.ReorderingBuffer)->void::: normalizer2 with impl normalize and append
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#getDecomposition(int)->String::: normalizer2 with impl get decomposition
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#getCombiningClass(int)->int::: normalizer2 with impl get combining class
sun.text.normalizer.Norm2AllModes.Normalizer2WithImpl#isNormalized(CharSequence)->boolean::: normalizer2 with impl is normalized
sun.text.normalizer.Norm2AllModes.DecomposeNormalizer2#normalize(CharSequence, NormalizerImpl.ReorderingBuffer)->void::: decompose normalizer2 normalize
sun.text.normalizer.Norm2AllModes.DecomposeNormalizer2#normalizeAndAppend(CharSequence, boolean, NormalizerImpl.ReorderingBuffer)->void::: decompose normalizer2 normalize and append
sun.text.normalizer.Norm2AllModes.DecomposeNormalizer2#spanQuickCheckYes(CharSequence)->int::: decompose normalizer2 span quick check yes
sun.text.normalizer.Norm2AllModes.DecomposeNormalizer2#hasBoundaryBefore(int)->boolean::: decompose normalizer2 has boundary before
sun.text.normalizer.Norm2AllModes.ComposeNormalizer2#normalize(CharSequence, NormalizerImpl.ReorderingBuffer)->void::: compose normalizer2 normalize
sun.text.normalizer.Norm2AllModes.ComposeNormalizer2#normalizeAndAppend(CharSequence, boolean, NormalizerImpl.ReorderingBuffer)->void::: compose normalizer2 normalize and append
sun.text.normalizer.Norm2AllModes.ComposeNormalizer2#isNormalized(CharSequence)->boolean::: compose normalizer2 is normalized
sun.text.normalizer.Norm2AllModes.ComposeNormalizer2#spanQuickCheckYes(CharSequence)->int::: compose normalizer2 span quick check yes
sun.text.normalizer.Norm2AllModes.ComposeNormalizer2#hasBoundaryBefore(int)->boolean::: compose normalizer2 has boundary before
sun.text.normalizer.Norm2AllModes#getNFCInstance()->Norm2AllModes::: norm2 all modes get instance
sun.text.normalizer.Norm2AllModes#getNFKCInstance()->Norm2AllModes::: norm2 all modes get instance
sun.text.normalizer.Normalizer2#getNFCInstance()->Normalizer2:::Returns a Normalizer2 instance for Unicode NFC normalization
sun.text.normalizer.Normalizer2#getNFDInstance()->Normalizer2:::Returns a Normalizer2 instance for Unicode NFD normalization
sun.text.normalizer.Normalizer2#getNFKCInstance()->Normalizer2:::Returns a Normalizer2 instance for Unicode NFKC normalization
sun.text.normalizer.Normalizer2#getNFKDInstance()->Normalizer2:::Returns a Normalizer2 instance for Unicode NFKD normalization
sun.text.normalizer.Normalizer2#normalize(CharSequence)->String:::Returns the normalized form of the source string.
sun.text.normalizer.Normalizer2#normalize(CharSequence, StringBuilder)->StringBuilder:::Writes the normalized form of the source string to the destination string (replacing its contents) and returns the destination string
sun.text.normalizer.Normalizer2#normalize(CharSequence, Appendable)->Appendable:::Writes the normalized form of the source string to the destination Appendable and returns the destination Appendable
sun.text.normalizer.Normalizer2#normalizeSecondAndAppend(StringBuilder, CharSequence)->StringBuilder:::Appends the normalized form of the second string to the first string (merging them at the boundary) and returns the first string
sun.text.normalizer.Normalizer2#append(StringBuilder, CharSequence)->StringBuilder:::Appends the second string to the first string (merging them at the boundary) and returns the first string
sun.text.normalizer.Normalizer2#getDecomposition(int)->String:::Gets the decomposition mapping of c
sun.text.normalizer.Normalizer2#getCombiningClass(int)->int:::Gets the combining class of c
sun.text.normalizer.Normalizer2#isNormalized(CharSequence)->boolean:::Tests if the string is normalized
sun.text.normalizer.Normalizer2#spanQuickCheckYes(CharSequence)->int:::Returns the end of the normalized substring of the input string
sun.text.normalizer.Normalizer2#hasBoundaryBefore(int)->boolean:::Tests if the character always has a normalization boundary before it, regardless of context
sun.text.normalizer.NormalizerBase.Mode#getNormalizer2(int)->Normalizer2::: mode get normalizer2
sun.text.normalizer.NormalizerBase#clone()->Object:::Clones this NormalizerBase object
sun.text.normalizer.NormalizerBase#normalize(String, Mode, int)->String:::Normalizes a String using the given normalization operation
sun.text.normalizer.NormalizerBase#normalize(String, Normalizer.Form)->String::: normalizer base normalize
sun.text.normalizer.NormalizerBase#normalize(String, Normalizer.Form, int)->String::: normalizer base normalize
sun.text.normalizer.NormalizerBase#isNormalized(String, Mode, int)->boolean:::Test if a string is in a given normalization form
sun.text.normalizer.NormalizerBase#isNormalized(String, Normalizer.Form)->boolean::: normalizer base is normalized
sun.text.normalizer.NormalizerBase#isNormalized(String, Normalizer.Form, int)->boolean::: normalizer base is normalized
sun.text.normalizer.NormalizerBase#current()->int:::Return the current character in the normalized text.
sun.text.normalizer.NormalizerBase#next()->int:::Return the next character in the normalized text and advance the iteration position by one
sun.text.normalizer.NormalizerBase#previous()->int:::Return the previous character in the normalized text and decrement the iteration position by one
sun.text.normalizer.NormalizerBase#reset()->void:::Reset the index to the beginning of the text
sun.text.normalizer.NormalizerBase#setIndexOnly(int)->void:::Set the iteration position in the input text that is being normalized, without any immediate normalization
sun.text.normalizer.NormalizerBase#setIndex(int)->int:::Set the iteration position in the input text that is being normalized and return the first normalized character at that position
sun.text.normalizer.NormalizerBase#getBeginIndex()->int:::Retrieve the index of the start of the input text
sun.text.normalizer.NormalizerBase#getEndIndex()->int:::Retrieve the index of the end of the input text
sun.text.normalizer.NormalizerBase#getIndex()->int:::Retrieve the current iteration position in the input text that is being normalized
sun.text.normalizer.NormalizerBase#endIndex()->int:::Retrieve the index of the end of the input text
sun.text.normalizer.NormalizerBase#setMode(Mode)->void:::Set the normalization mode for this object
sun.text.normalizer.NormalizerBase#getMode()->Mode:::Return the basic operation performed by this NormalizerBase
sun.text.normalizer.NormalizerBase#setText(String)->void:::Set the input text over which this NormalizerBase will iterate
sun.text.normalizer.NormalizerBase#setText(CharacterIterator)->void:::Set the input text over which this NormalizerBase will iterate
sun.text.normalizer.NormalizerImpl.Hangul#isHangul(int)->boolean::: hangul is hangul
sun.text.normalizer.NormalizerImpl.Hangul#isHangulLV(int)->boolean::: hangul is hangul v
sun.text.normalizer.NormalizerImpl.Hangul#decompose(int, Appendable)->int:::Decomposes c, which must be a Hangul syllable, into buffer and returns the length of the decomposition (2 or 3).
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#isEmpty()->boolean::: reordering buffer is empty
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#length()->int::: reordering buffer length
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#getLastCC()->int::: reordering buffer get last c
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#getStringBuilder()->StringBuilder::: reordering buffer get string builder
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#equals(CharSequence, int, int)->boolean::: reordering buffer equals
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#append(int, int)->void::: reordering buffer append
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#append(CharSequence, int, int, int, int)->void::: reordering buffer append
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#append(char)->ReorderingBuffer::: reordering buffer append
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#appendZeroCC(int)->void::: reordering buffer append zero c
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#append(CharSequence)->ReorderingBuffer::: reordering buffer append
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#append(CharSequence, int, int)->ReorderingBuffer::: reordering buffer append
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#flush()->void:::Flushes from the intermediate StringBuilder to the Appendable, if they are different objects
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#flushAndAppendZeroCC(CharSequence, int, int)->ReorderingBuffer:::Flushes from the intermediate StringBuilder to the Appendable, if they are different objects
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#remove()->void::: reordering buffer remove
sun.text.normalizer.NormalizerImpl.ReorderingBuffer#removeSuffix(int)->void::: reordering buffer remove suffix
sun.text.normalizer.NormalizerImpl.UTF16Plus#isSurrogateLead(int)->boolean:::Assuming c is a surrogate code point (UTF16.isSurrogate(c)), is it a lead surrogate?
sun.text.normalizer.NormalizerImpl.UTF16Plus#equal(CharSequence, int, int, CharSequence, int, int)->boolean:::Compares two CharSequence subsequences for binary equality.
sun.text.normalizer.NormalizerImpl#load(ByteBuffer)->NormalizerImpl::: normalizer impl load
sun.text.normalizer.NormalizerImpl#load(String)->NormalizerImpl::: normalizer impl load
sun.text.normalizer.NormalizerImpl#getNorm16(int)->int::: normalizer impl get norm16
sun.text.normalizer.NormalizerImpl#isAlgorithmicNoNo(int)->boolean::: normalizer impl is algorithmic no no
sun.text.normalizer.NormalizerImpl#isCompNo(int)->boolean::: normalizer impl is comp no
sun.text.normalizer.NormalizerImpl#isDecompYes(int)->boolean::: normalizer impl is decomp yes
sun.text.normalizer.NormalizerImpl#getCC(int)->int::: normalizer impl get c
sun.text.normalizer.NormalizerImpl#getCCFromNormalYesOrMaybe(int)->int::: normalizer impl get from normal yes or maybe
sun.text.normalizer.NormalizerImpl#getCCFromYesOrMaybe(int)->int::: normalizer impl get from yes or maybe
sun.text.normalizer.NormalizerImpl#getCCFromYesOrMaybeCP(int)->int::: normalizer impl get from yes or maybe p
sun.text.normalizer.NormalizerImpl#getFCD16(int)->int:::Returns the FCD data for code point c.
sun.text.normalizer.NormalizerImpl#singleLeadMightHaveNonZeroFCD16(int)->boolean:::Returns true if the single-or-lead code unit c might have non-zero FCD data.
sun.text.normalizer.NormalizerImpl#getFCD16FromNormData(int)->int:::Gets the FCD value from the regular normalization data.
sun.text.normalizer.NormalizerImpl#getDecomposition(int)->String:::Gets the decomposition for one code point.
sun.text.normalizer.NormalizerImpl#decompose(CharSequence, int, int, StringBuilder, int)->void:::Decomposes s[src, limit[ and writes the result to dest
sun.text.normalizer.NormalizerImpl#decompose(CharSequence, int, int, ReorderingBuffer)->int::: normalizer impl decompose
sun.text.normalizer.NormalizerImpl#decomposeAndAppend(CharSequence, boolean, ReorderingBuffer)->void::: normalizer impl decompose and append
sun.text.normalizer.NormalizerImpl#compose(CharSequence, int, int, boolean, boolean, ReorderingBuffer)->boolean::: normalizer impl compose
sun.text.normalizer.NormalizerImpl#composeQuickCheck(CharSequence, int, int, boolean, boolean)->int:::Very similar to compose(): Make the same changes in both places if relevant
sun.text.normalizer.NormalizerImpl#composeAndAppend(CharSequence, boolean, boolean, ReorderingBuffer)->void::: normalizer impl compose and append
sun.text.normalizer.NormalizerImpl#makeFCD(CharSequence, int, int, ReorderingBuffer)->int::: normalizer impl make d
sun.text.normalizer.NormalizerImpl#hasDecompBoundaryBefore(int)->boolean::: normalizer impl has decomp boundary before
sun.text.normalizer.NormalizerImpl#norm16HasDecompBoundaryBefore(int)->boolean::: normalizer impl norm16 has decomp boundary before
sun.text.normalizer.NormalizerImpl#hasDecompBoundaryAfter(int)->boolean::: normalizer impl has decomp boundary after
sun.text.normalizer.NormalizerImpl#norm16HasDecompBoundaryAfter(int)->boolean::: normalizer impl norm16 has decomp boundary after
sun.text.normalizer.NormalizerImpl#isDecompInert(int)->boolean::: normalizer impl is decomp inert
sun.text.normalizer.NormalizerImpl#hasCompBoundaryBefore(int)->boolean::: normalizer impl has comp boundary before
sun.text.normalizer.NormalizerImpl#hasCompBoundaryAfter(int, boolean)->boolean::: normalizer impl has comp boundary after
sun.text.normalizer.NormalizerImpl#getTrailCCFromCompYesAndZeroCC(int)->int::: normalizer impl get trail from comp yes and zero c
sun.text.normalizer.NormalizerImpl#getDecompose(int[], String[])->int:::Get the canonical decomposition sherman  for ComposedCharIter
sun.text.normalizer.NormalizerImpl#canonicalDecomposeWithSingleQuotation(String)->String::: normalizer impl canonical decompose with single quotation
sun.text.normalizer.Replaceable#length()->int:::Returns the number of 16-bit code units in the text.
sun.text.normalizer.Replaceable#charAt(int)->char:::Returns the 16-bit code unit at the given offset into the text.
sun.text.normalizer.Replaceable#getChars(int, int, char[], int)->void:::Copies characters from this object into the destination character array
sun.text.normalizer.ReplaceableString#length()->int:::Return the number of characters contained in this object
sun.text.normalizer.ReplaceableString#charAt(int)->char:::Return the character at the given position in this object
sun.text.normalizer.ReplaceableString#getChars(int, int, char[], int)->void:::Copies characters from this object into the destination character array
sun.text.normalizer.ReplaceableUCharacterIterator#clone()->Object:::Creates a copy of this iterator, does not clone the underlying Replaceableobject
sun.text.normalizer.ReplaceableUCharacterIterator#current()->int:::Returns the current UTF16 character.
sun.text.normalizer.ReplaceableUCharacterIterator#getLength()->int:::Returns the length of the text
sun.text.normalizer.ReplaceableUCharacterIterator#getIndex()->int:::Gets the current currentIndex in text.
sun.text.normalizer.ReplaceableUCharacterIterator#next()->int:::Returns next UTF16 character and increments the iterator's currentIndex by 1
sun.text.normalizer.ReplaceableUCharacterIterator#previous()->int:::Returns previous UTF16 character and decrements the iterator's currentIndex by 1
sun.text.normalizer.ReplaceableUCharacterIterator#setIndex(int)->void:::Sets the currentIndex to the specified currentIndex in the text and returns that single UTF16 character at currentIndex
sun.text.normalizer.ReplaceableUCharacterIterator#getText(char[], int)->int::: replaceable character iterator get text
sun.text.normalizer.Trie.DataManipulate#getFoldingOffset(int)->int:::Called by com.ibm.icu.impl.Trie to extract from a lead surrogate's data the index array offset of the indexes for that lead surrogate.
sun.text.normalizer.Trie#getSurrogateOffset(char, char)->int:::Gets the offset to the data which the surrogate pair points to.
sun.text.normalizer.Trie#getRawOffset(int, char)->int:::Gets the offset to the data which the index ch after variable offset points to
sun.text.normalizer.Trie#getBMPOffset(char)->int:::Gets the offset to data which the BMP character points to Treats a lead surrogate as a normal code point.
sun.text.normalizer.Trie#getLeadOffset(char)->int:::Gets the offset to the data which this lead surrogate character points to
sun.text.normalizer.Trie#getCodePointOffset(int)->int:::Internal trie getter from a code point
sun.text.normalizer.Trie#unserialize(InputStream)->void:::Parses the inputstream and creates the trie index with it. This is overwritten by the child classes.
sun.text.normalizer.Trie#isCharTrie()->boolean:::Determines if this is a 16 bit trie
sun.text.normalizer.Trie2#createFromSerialized(ByteBuffer)->Trie2:::Create a Trie2 from its serialized form
sun.text.normalizer.Trie2#get(int)->int:::Get the value for a code point as stored in the Trie2.
sun.text.normalizer.Trie2#getFromU16SingleLead(char)->int:::Get the trie value for a UTF-16 code unit
sun.text.normalizer.Trie2.Range#equals(Object)->boolean::: range equals
sun.text.normalizer.Trie2.Range#hashCode()->int::: range hash code
sun.text.normalizer.Trie2#iterator()->Iterator::: Create an iterator over the value ranges in this Trie2
sun.text.normalizer.Trie2#iterator(ValueMapper)->Iterator:::Create an iterator over the value ranges from this Trie2
sun.text.normalizer.Trie2.ValueMapper#map(int)->int::: value mapper map
sun.text.normalizer.Trie2.Trie2Iterator#next()->Range::: The main next() function for Trie2 iterators
sun.text.normalizer.Trie2.Trie2Iterator#hasNext()->boolean::: trie2 iterator has next
sun.text.normalizer.Trie2#rangeEnd(int, int, int)->int:::Find the last character in a contiguous range of characters with the same Trie2 value as the input character.
sun.text.normalizer.Trie2_16#createFromSerialized(ByteBuffer)->Trie2_16:::Create a Trie2 from its serialized form
sun.text.normalizer.Trie2_16#get(int)->int:::Get the value for a code point as stored in the Trie2.
sun.text.normalizer.Trie2_16#getFromU16SingleLead(char)->int:::Get a Trie2 value for a UTF-16 code unit
sun.text.normalizer.Trie2_16#getSerializedLength()->int::: trie2_16 get serialized length
sun.text.normalizer.UBiDiProps#getClass(int)->int::: bi di props get class
sun.text.normalizer.UBiDiProps#getMirror(int)->int::: bi di props get mirror
sun.text.normalizer.UBiDiProps#getJoiningType(int)->int::: bi di props get joining type
sun.text.normalizer.UBiDiProps#getJoiningGroup(int)->int::: bi di props get joining group
sun.text.normalizer.UBiDiProps#getPairedBracketType(int)->int::: bi di props get paired bracket type
sun.text.normalizer.UBiDiProps#getPairedBracket(int)->int::: bi di props get paired bracket
sun.text.normalizer.UCharacter#digit(int, int)->int:::Returns the numeric value of a decimal digit code point
sun.text.normalizer.UCharacter#digit(int)->int:::Returns the numeric value of a decimal digit code point
sun.text.normalizer.UCharacter#getType(int)->int:::Returns a value indicating a code point's Unicode category
sun.text.normalizer.UCharacter#getDirection(int)->int:::Returns the Bidirection property of a code point
sun.text.normalizer.UCharacter#getMirror(int)->int:::Maps the specified code point to a "mirror-image" code point
sun.text.normalizer.UCharacter#getBidiPairedBracket(int)->int:::Maps the specified character to its paired bracket character
sun.text.normalizer.UCharacter#getCombiningClass(int)->int:::Returns the combining class of the argument codepoint
sun.text.normalizer.UCharacter#getUnicodeVersion()->VersionInfo:::Returns the version of Unicode data used.
sun.text.normalizer.UCharacter#getCodePoint(char, char)->int:::Returns a code point corresponding to the two UTF16 characters.
sun.text.normalizer.UCharacter#getAge(int)->VersionInfo:::Returns the "age" of the code point. The "age" is the Unicode version when the code point was first designated (as a non-character or for Private Use) or assigned a character
sun.text.normalizer.UCharacter#getIntPropertyValue(int, int)->int::: character get int property value
sun.text.normalizer.UCharacterIterator#getInstance(String)->UCharacterIterator:::Returns a UCharacterIterator object given a source string.
sun.text.normalizer.UCharacterIterator#getInstance(StringBuffer)->UCharacterIterator:::Returns a UCharacterIterator object given a source StringBuffer.
sun.text.normalizer.UCharacterIterator#getInstance(CharacterIterator)->UCharacterIterator:::Returns a UCharacterIterator object given a CharacterIterator.
sun.text.normalizer.UCharacterIterator#getLength()->int:::Returns the length of the text
sun.text.normalizer.UCharacterIterator#getIndex()->int:::Gets the current index in text.
sun.text.normalizer.UCharacterIterator#next()->int:::Returns the UTF16 code unit at index, and increments to the next code unit (post-increment semantics)
sun.text.normalizer.UCharacterIterator#nextCodePoint()->int:::Returns the code point at index, and increments to the next code point (post-increment semantics)
sun.text.normalizer.UCharacterIterator#previous()->int:::Decrement to the position of the previous code unit in the text, and return it (pre-decrement semantics)
sun.text.normalizer.UCharacterIterator#previousCodePoint()->int:::Retreat to the start of the previous code point in the text, and return it (pre-decrement semantics)
sun.text.normalizer.UCharacterIterator#setIndex(int)->void:::Sets the index to the specified index in the text.
sun.text.normalizer.UCharacterIterator#setToStart()->void:::Sets the current index to the start.
sun.text.normalizer.UCharacterIterator#getText(char[], int)->int:::Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a exception is thrown
sun.text.normalizer.UCharacterIterator#getText(char[])->int:::Convenience override for getText(char[], int) that provides an offset of 0.
sun.text.normalizer.UCharacterIterator#getText()->String:::Convenience method for returning the underlying text storage as a string
sun.text.normalizer.UCharacterIterator#moveCodePointIndex(int)->int:::Moves the current position by the number of code points specified, either forward or backward depending on the sign of delta (positive or negative respectively)
sun.text.normalizer.UCharacterIterator#clone()->Object:::Creates a copy of this iterator, independent from other iterators
sun.text.normalizer.UCharacterProperty#getProperty(int)->int:::Gets the main property value for code point ch.
sun.text.normalizer.UCharacterProperty#getAdditional(int, int)->int:::Gets the unicode additional properties
sun.text.normalizer.UCharacterProperty#getAge(int)->VersionInfo:::Get the "age" of the code point. The "age" is the Unicode version when the code point was first designated (as a non-character or for Private Use) or assigned a character. This can be useful to avoid emitting code points to receiving processes that do not accept newer characters. The data is from the UCD file DerivedAge.txt. This API does not check the validity of the codepoint.
sun.text.normalizer.UCharacterProperty#getType(int)->int::: character property get type
sun.text.normalizer.UCharacterProperty#getIntPropertyValue(int, int)->int::: character property get int property value
sun.text.normalizer.UCharacterProperty#getRawSupplementary(char, char)->int:::Forms a supplementary code point from the argument character<br> Note this is for internal use hence no checks for the validity of the surrogate characters are done
sun.text.normalizer.UCharacterProperty#getMask(int)->int:::Gets the type mask
sun.text.normalizer.UCharacterProperty#getEuropeanDigit(int)->int:::Returns the digit values of characters like 'A' - 'Z', normal, half-width and full-width
sun.text.normalizer.UCharacterProperty#digit(int)->int::: character property digit
sun.text.normalizer.UCharacterProperty#upropsvec_addPropertyStarts(UnicodeSet)->void::: character property upropsvec_add property starts
sun.text.normalizer.UnicodeSet#set(UnicodeSet)->UnicodeSet:::Make this object represent the same set as other.
sun.text.normalizer.UnicodeSet#size()->int:::Returns the number of elements in this set (its cardinality) Note than the elements of a set may include both individual codepoints and strings.
sun.text.normalizer.UnicodeSet#add(int)->UnicodeSet:::Adds the specified character to this set if it is not already present
sun.text.normalizer.UnicodeSet#add(CharSequence)->UnicodeSet:::Adds the specified multicharacter to this set if it is not already present
sun.text.normalizer.UnicodeSet#complement(int, int)->UnicodeSet:::Complements the specified range in this set
sun.text.normalizer.UnicodeSet#contains(int)->boolean:::Returns true if this set contains the given character.
sun.text.normalizer.UnicodeSet#retainAll(UnicodeSet)->UnicodeSet:::Retains only the elements in this set that are contained in the specified set
sun.text.normalizer.UnicodeSet#clear()->UnicodeSet:::Removes all of the elements from this set
sun.text.normalizer.UnicodeSet#getRangeCount()->int:::Iteration method that returns the number of ranges contained in this set.
sun.text.normalizer.UnicodeSet#getRangeStart(int)->int:::Iteration method that returns the first character in the specified range of this set.
sun.text.normalizer.UnicodeSet#getRangeEnd(int)->int:::Iteration method that returns the last character in the specified range of this set.
sun.text.normalizer.UnicodeSet#isFrozen()->boolean:::Is this frozen, according to the Freezable interface?
sun.text.normalizer.UnicodeSet#freeze()->UnicodeSet:::Freeze this class, according to the Freezable interface.
sun.text.normalizer.UnicodeSet#span(CharSequence, SpanCondition)->int:::Span a string using this UnicodeSet
sun.text.normalizer.UnicodeSet#span(CharSequence, int, SpanCondition)->int:::Span a string using this UnicodeSet
sun.text.normalizer.UnicodeSet#spanAndCount(CharSequence, int, SpanCondition, OutputInt)->int:::Same as span() but also counts the smallest number of set elements on any path across the span
sun.text.normalizer.UnicodeSet#spanBack(CharSequence, int, SpanCondition)->int:::Span a string backwards (from the fromIndex) using this UnicodeSet
sun.text.normalizer.UnicodeSet#cloneAsThawed()->UnicodeSet:::Clone a thawed version of this class, according to the Freezable interface.
sun.text.normalizer.UnicodeSetStringSpan#needsStringSpanUTF16()->boolean:::Do the strings need to be checked in span() etc.?
sun.text.normalizer.UnicodeSetStringSpan#contains(int)->boolean:::For fast UnicodeSet::contains(c).
sun.text.normalizer.UnicodeSetStringSpan#span(CharSequence, int, SpanCondition)->int:::Spans a string.
sun.text.normalizer.UnicodeSetStringSpan#spanAndCount(CharSequence, int, SpanCondition, OutputInt)->int:::Spans a string and counts the smallest number of set elements on any path across the span
sun.text.normalizer.UnicodeSetStringSpan#spanBack(CharSequence, int, SpanCondition)->int:::Span a string backwards.
sun.text.normalizer.UnicodeSetStringSpan#makeSpanLengthByte(int)->short::: unicode set string span make span length byte
sun.text.normalizer.UnicodeSetStringSpan#matches16CPB(CharSequence, int, int, String, int)->boolean:::Compare 16-bit Unicode strings (which may be malformed UTF-16) at code point boundaries
sun.text.normalizer.UnicodeSetStringSpan#spanOne(UnicodeSet, CharSequence, int, int)->int:::Does the set contain the next code point? If so, return its length; otherwise return its negative length.
sun.text.normalizer.UnicodeSetStringSpan#spanOneBack(UnicodeSet, CharSequence, int)->int::: unicode set string span span one back
sun.text.normalizer.UTF16#charAt(String, int)->int:::Extract a single UTF-32 value from a string
sun.text.normalizer.UTF16#charAt(CharSequence, int)->int:::Extract a single UTF-32 value from a string
sun.text.normalizer.UTF16#charAt(char[], int, int, int)->int:::Extract a single UTF-32 value from a substring
sun.text.normalizer.UTF16#getCharCount(int)->int:::Determines how many chars this char32 requires
sun.text.normalizer.UTF16#isSurrogate(char)->boolean:::Determines whether the code value is a surrogate.
sun.text.normalizer.UTF16#isTrailSurrogate(char)->boolean:::Determines whether the character is a trail surrogate.
sun.text.normalizer.UTF16#isLeadSurrogate(char)->boolean:::Determines whether the character is a lead surrogate.
sun.text.normalizer.UTF16#getLeadSurrogate(int)->char:::Returns the lead surrogate
sun.text.normalizer.UTF16#getTrailSurrogate(int)->char:::Returns the trail surrogate
sun.text.normalizer.UTF16#valueOf(int)->String:::Convenience method corresponding to String.valueOf(char)
sun.text.normalizer.UTF16#append(StringBuffer, int)->StringBuffer:::Append a single UTF-32 value to the end of a StringBuffer
sun.text.normalizer.UTF16#moveCodePointOffset(char[], int, int, int, int)->int:::Shifts offset16 by the argument number of codepoints within a subarray.
sun.text.normalizer.Utility#escape(String)->String:::Convert characters outside the range U+0020 to U+007F to Unicode escapes, and convert backslash to a double backslash.
sun.text.normalizer.Utility#unescapeAt(String, int[])->int:::Convert an escape to a 32-bit code point value
sun.text.normalizer.Utility#hex(long, int)->String:::Supplies a zero-padded hex representation of an integer (without 0x)
sun.text.normalizer.Utility#isUnprintable(int)->boolean:::Return true if the character is NOT printable ASCII
sun.text.normalizer.Utility#escapeUnprintable(T, int)->boolean:::Escape unprintable characters using <backslash>uxxxx notation for U+0000 to U+FFFF and <backslash>Uxxxxxxxx for U+10000 and above
sun.text.normalizer.VersionInfo#getInstance(String)->VersionInfo:::Returns an instance of VersionInfo with the argument version.
sun.text.normalizer.VersionInfo#getInstance(int, int, int, int)->VersionInfo:::Returns an instance of VersionInfo with the argument version.
sun.text.normalizer.VersionInfo#compareTo(VersionInfo)->int:::Compares other with this VersionInfo.

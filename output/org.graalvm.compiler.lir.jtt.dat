ConstantStackCastTest#setup()::: constant stack cast test setup:::getBackend->getTarget->getPlatformKind->LIRKind->getBackend->getTarget->fromJavaKind->LIRKind->getBackend->getTarget->fromJavaKind
ConstantStackCastTest.LoadConstantStackSpec#generate(LIRGeneratorTool, Value)::: load constant stack spec generate:::frameMapBuilder->gen->getResult->getFrameMapBuilder->s1->frameMapBuilder->allocateSpillSlot->srcValue->if->isJavaConstant->asJavaConstant->getConstant->else->gen->emitMove->gen->emitBlackhole->gen->emitMove->setResult
ConstantStackCastTest.LoadConstantStackSpec#getConstant(LIRKind, JavaConstant)::: load constant stack spec get constant:::if->srcKind->getPlatformKind->byteConst->JavaConstant->c->asInt->forByte->return->new->ConstantValue->else->throw->GraalError->shouldNotReachHere
ConstantStackCastTest#testCopyByte(LoadConstantStackSpec, byte)::: constant stack cast test test copy byte:::return
ConstantStackCastTest#testByte(byte)::: constant stack cast test test byte:::return->testCopyByte
ConstantStackCastTest#runByte()::: constant stack cast test run byte:::runTest
LIRTest.LIRTestNode#values()::: test node values:::return
LIRTest.LIRTestNode#getLIROpsNode()::: test node get ops node:::return
LIRTest.LIRTestNode#generate(NodeLIRBuilderTool)::: test node generate:::ops->getLIROperations->v->values->stream->gen->operand->map->ops->gen->getLIRGeneratorTool->v->new->ValueArr->toArray->generate->result->ops->getResult->if->gen->setResult
LIRTest.LIRTestNode#getLIROperations()::: test node get operations:::spec->snippetReflection->getLIROpsNode->asJavaConstant->asObject->return
LIRTest.LIRValueNode#getLIROpsNode()::: value node get ops node:::return
LIRTest.LIRValueNode#generate(NodeLIRBuilderTool)::: value node generate:::spec->getLIROperations->output->spec->getName->getOutput->gen->isVariable->gen->getLIRGeneratorTool->emitMove->setResult
LIRTest.LIRValueNode#getName()::: value node get name:::return->snippetReflection->name->asJavaConstant->asObject
LIRTest.LIRValueNode#getLIROperations()::: value node get operations:::return->snippetReflection->getLIROpsNode->asJavaConstant->asObject
LIRTest#registerInvocationPlugins(InvocationPlugins)::: test register invocation plugins:::c->getClass->foreach->c->getMethods->if->m->getAnnotation->p->m->getParameterTypes->invocationPlugins->m->getName->register->outputPlugin->new->InvocationPlugin->invocationPlugins->new->Class<?>Arr->register->invocationPlugins->new->Class<?>Arr->register->super->registerInvocationPlugins
LIRTest#getOutput(LIRTestSpecification, String, byte)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, short)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, int)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, long)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, float)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, double)::: test get output:::return
LIRTest#getOutput(LIRTestSpecification, String, Object)::: test get output:::return
LIRTestSpecification#generate(LIRGeneratorTool)::: test specification generate:::defaultHandler
LIRTestSpecification#generate(LIRGeneratorTool, Value)::: test specification generate:::defaultHandler
LIRTestSpecification#generate(LIRGeneratorTool, Value, Value)::: test specification generate:::defaultHandler
LIRTestSpecification#generate(LIRGeneratorTool, Value, Value, Value)::: test specification generate:::defaultHandler
LIRTestSpecification#generate(LIRGeneratorTool, Value, Value, Value, Value)::: test specification generate:::defaultHandler
LIRTestSpecification#generate(LIRGeneratorTool, Value, Value, Value, Value, Value)::: test specification generate:::defaultHandler
LIRTestSpecification#defaultHandler(LIRGeneratorTool, Value...)::: test specification default handler:::throw->new->GraalError
LIRTestSpecification#generate(LIRGeneratorTool, Value[])::: test specification generate:::if->generate->else->if->generate->else->if->generate->else->if->generate->else->if->generate->else->if->generate->else->GraalError->unimplemented
LIRTestSpecification#setOutput(String, Value)::: test specification set output:::output->put
LIRTestSpecification#getOutput(String)::: test specification get output:::return->output->get
LIRTestSpecification#setResult(Value)::: test specification set result:::
LIRTestSpecification#getResult()::: test specification get result:::return
LIRTestTest#copyInt(LIRTestSpecification, int, int)::: test test copy int:::return
LIRTestTest#testGetOutput(int, int, int[])::: test test test get output:::copyInt->getOutput->getOutput->return
LIRTestTest#runInt()::: test test run int:::new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest
SPARCBranchBailoutTest.BranchSpec#generate(LIRGeneratorTool, Value)::: branch spec generate:::gen->new->LargeOp->append->setResult
SPARCBranchBailoutTest#branch(BranchSpec, int)::: branch bailout test branch:::return
SPARCBranchBailoutTest#testBranch(int)::: branch bailout test test branch:::res->if->branch->else->branch->return->GraalDirectives->opaque
SPARCBranchBailoutTest#testBailoutOnBranchOverflow()::: branch bailout test test bailout on branch overflow:::Assume->getBackend->getTarget->assumeTrue->m->getResolvedJavaMethod->debug->getDebugContext->try->s->debug->disable->graph->parseEager->compile->catch->finally
SPARCBranchBailoutTest.LargeOp#emitCode(CompilationResultBuilder)::: large op emit code:::for->i
StackMoveTest#setUp()::: stack move test set up:::getBackend->getTarget->getPlatformKind->getBackend->getTarget->getPlatformKind
StackMoveTest.StackCopySpec#generate(LIRGeneratorTool, Value)::: stack copy spec generate:::frameMapBuilder->gen->getResult->getFrameMapBuilder->valueKind->getValueKind->s1->frameMapBuilder->allocateSpillSlot->s2->frameMapBuilder->allocateSpillSlot->gen->emitMove->copy1->gen->emitMove->gen->gen->getSpillMoveFactory->createStackMove->append->result->gen->emitMove->setResult->setOutput->setOutput->setOutput
StackMoveTest.StackCopySpec#getValueKind(Value)::: stack copy spec get value kind:::return->value->getValueKind
StackMoveTest#copyInt(LIRTestSpecification, int)::: stack move test copy int:::return
StackMoveTest#testInt(int, int[])::: stack move test test int:::copyInt->getOutput->getOutput->getOutput->return
StackMoveTest#runInt()::: stack move test run int:::new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest->new->intArr->supply->runTest
StackMoveTest#copyLong(LIRTestSpecification, long)::: stack move test copy long:::return
StackMoveTest#testLong(long, long[])::: stack move test test long:::copyLong->getOutput->getOutput->getOutput->return
StackMoveTest#runLong()::: stack move test run long:::new->longArr->supply->runTest->new->longArr->supply->runTest->new->longArr->supply->runTest->new->longArr->supply->runTest->new->longArr->supply->runTest
StackMoveTest#copyFloat(LIRTestSpecification, float)::: stack move test copy float:::return
StackMoveTest#testFloat(float, float[])::: stack move test test float:::copyFloat->getOutput->getOutput->getOutput->return
StackMoveTest#runFloat()::: stack move test run float:::new->floatArr->supply->runTest->new->floatArr->supply->runTest->new->floatArr->supply->runTest->new->floatArr->supply->runTest->new->floatArr->supply->runTest->new->floatArr->supply->runTest->new->floatArr->supply->runTest
StackMoveTest#copyDouble(LIRTestSpecification, double)::: stack move test copy double:::return
StackMoveTest#testDouble(double, double[])::: stack move test test double:::copyDouble->getOutput->getOutput->getOutput->return
StackMoveTest#runDouble()::: stack move test run double:::new->doubleArr->supply->runTest->new->doubleArr->supply->runTest->new->doubleArr->supply->runTest->new->doubleArr->supply->runTest->new->doubleArr->supply->runTest->new->doubleArr->supply->runTest->new->doubleArr->supply->runTest
StackMoveTest#copyShort(LIRTestSpecification, short)::: stack move test copy short:::return
StackMoveTest#testShort(short, short[])::: stack move test test short:::copyShort->getOutput->getOutput->getOutput->return
StackMoveTest#runShort()::: stack move test run short:::new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest
StackMoveTest#copyByte(LIRTestSpecification, byte)::: stack move test copy byte:::return
StackMoveTest#testByte(byte, byte[])::: stack move test test byte:::copyByte->getOutput->getOutput->getOutput->return
StackMoveTest#runByte()::: stack move test run byte:::new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest
StackStoreLoadTest#setUp()::: stack store load test set up:::getBackend->getTarget->getPlatformKind->getBackend->getTarget->getPlatformKind
StackStoreLoadTest.StackStoreLoadSpec#generate(LIRGeneratorTool, Value)::: stack store load spec generate:::frameMapBuilder->gen->getResult->getFrameMapBuilder->valueKind->getValueKind->s1->frameMapBuilder->allocateSpillSlot->s2->frameMapBuilder->allocateSpillSlot->s3->frameMapBuilder->allocateSpillSlot->gen->emitMove->gen->emitMove->gen->emitMove->gen->gen->getSpillMoveFactory->createStackMove->append->result->gen->emitMove->slot1->gen->emitMove->slot3->gen->emitMove->setResult->setOutput->setOutput
StackStoreLoadTest.StackStoreLoadSpec#getValueKind(Value)::: stack store load spec get value kind:::return->value->getValueKind
StackStoreLoadTest#copyShort(LIRTestSpecification, short)::: stack store load test copy short:::return
StackStoreLoadTest#testShort(short, short[])::: stack store load test test short:::copyShort->getOutput->getOutput->return
StackStoreLoadTest#runShort()::: stack store load test run short:::new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest->new->shortArr->supply->runTest
StackStoreLoadTest#copyByte(LIRTestSpecification, byte)::: stack store load test copy byte:::return
StackStoreLoadTest#testByte(byte, byte[])::: stack store load test test byte:::copyByte->getOutput->getOutput->return
StackStoreLoadTest#runByte()::: stack store load test run byte:::new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest->new->byteArr->supply->runTest

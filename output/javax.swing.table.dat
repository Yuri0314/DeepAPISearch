AbstractTableModel#getColumnName(int)::: Returns a default name for the column using spreadsheet conventions:  A, B, C, ..:::result->for->return
AbstractTableModel#findColumn(String):::Returns a column given its name:::for->i->getColumnCount->return
AbstractTableModel#getColumnClass(int)::: Returns Object.class regardless of columnIndex.:::return
AbstractTableModel#isCellEditable(int, int)::: Returns false:::return
AbstractTableModel#setValueAt(Object, int, int)::: This empty implementation is provided so users don't have to implement  this method if their data model is not editable.:::
AbstractTableModel#addTableModelListener(TableModelListener):::Adds a listener to the list that's notified each time a change to the data model occurs.:::listenerList->add
AbstractTableModel#removeTableModelListener(TableModelListener):::Removes a listener from the list that's notified each time a change to the data model occurs.:::listenerList->remove
AbstractTableModel#getTableModelListeners():::Returns an array of all the table model listeners registered on this model.:::return->listenerList->getListeners
AbstractTableModel#fireTableDataChanged():::Notifies all listeners that all cell values in the table's rows may have changed:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableStructureChanged():::Notifies all listeners that the table's structure has changed:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableRowsInserted(int, int):::Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been inserted.:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableRowsUpdated(int, int):::Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been updated.:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableRowsDeleted(int, int):::Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been deleted.:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableCellUpdated(int, int):::Notifies all listeners that the value of the cell at [row, column] has been updated.:::new->TableModelEvent->fireTableChanged
AbstractTableModel#fireTableChanged(TableModelEvent):::Forwards the given notification event to all TableModelListeners that registered themselves as listeners for this table model.:::listeners->listenerList->getListenerList->for->i
AbstractTableModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this AbstractTableModel:::return->listenerList->getListeners
DefaultTableCellRenderer#getNoFocusBorder()::: default table cell renderer get no focus border:::border->DefaultLookup->getBorder->if->System->getSecurityManager->if->return->return->else->if->if->return->return
DefaultTableCellRenderer#setForeground(Color):::Overrides JComponent.setForeground to assign the unselected-foreground color to the specified color.:::super->setForeground
DefaultTableCellRenderer#setBackground(Color):::Overrides JComponent.setBackground to assign the unselected-background color to the specified color.:::super->setBackground
DefaultTableCellRenderer#updateUI():::Notification from the UIManager that the look and feel [L&amp;F] has changed:::super->updateUI->setForeground->setBackground
DefaultTableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int):::Returns the default table cell renderer:::if->return->fg->bg->dropLocation->table->getDropLocation->if->dropLocation->isInsertRow->dropLocation->isInsertColumn->dropLocation->getRow->dropLocation->getColumn->DefaultLookup->getColor->DefaultLookup->getColor->if->super->table->getSelectionForeground->setForeground->super->table->getSelectionBackground->setBackground->else->background->table->getBackground->if->alternateColor->DefaultLookup->getColor->if->super->table->getForeground->setForeground->super->setBackground->table->getFont->setFont->if->border->if->DefaultLookup->getBorder->if->DefaultLookup->getBorder->setBorder->if->table->isCellEditable->col->DefaultLookup->getColor->if->super->setForeground->DefaultLookup->getColor->if->super->setBackground->else->getNoFocusBorder->setBorder->setValue->return
DefaultTableCellRenderer#isOpaque():::Overridden for performance reasons:::back->getBackground->p->getParent->if->p->getParent->colorMatch->back->p->getBackground->equals->p->isOpaque->return->super->isOpaque
DefaultTableCellRenderer#invalidate():::Overridden for performance reasons:::
DefaultTableCellRenderer#validate():::Overridden for performance reasons:::
DefaultTableCellRenderer#revalidate():::Overridden for performance reasons:::
DefaultTableCellRenderer#repaint(long, int, int, int, int):::Overridden for performance reasons:::
DefaultTableCellRenderer#repaint(Rectangle):::Overridden for performance reasons:::
DefaultTableCellRenderer#repaint():::Overridden for performance reasons:::
DefaultTableCellRenderer#firePropertyChange(String, Object, Object):::Overridden for performance reasons:::if->SwingUtilities2->isScaleChanged->getClientProperty->super->firePropertyChange
DefaultTableCellRenderer#firePropertyChange(String, boolean, boolean):::Overridden for performance reasons:::
DefaultTableCellRenderer#setValue(Object):::Sets the String object for the cell being rendered to value.:::value->toString->setText
DefaultTableColumnModel#addColumn(TableColumn)::: Appends aColumn to the end of the  tableColumns array:::if->throw->new->IllegalArgumentException->tableColumns->addElement->aColumn->addPropertyChangeListener->invalidateWidthCache->getColumnCount->new->TableColumnModelEvent->fireColumnAdded
DefaultTableColumnModel#removeColumn(TableColumn)::: Deletes the column from the  tableColumns array:::columnIndex->tableColumns->indexOf->if->if->selectionModel->removeIndexInterval->column->removePropertyChangeListener->tableColumns->removeElementAt->invalidateWidthCache->new->TableColumnModelEvent->fireColumnRemoved
DefaultTableColumnModel#moveColumn(int, int):::Moves the column and heading at columnIndex to newIndex:::if->getColumnCount->getColumnCount->throw->new->IllegalArgumentException->aColumn->if->new->TableColumnModelEvent->fireColumnMoved->return->tableColumns->elementAt->tableColumns->removeElementAt->selected->selectionModel->isSelectedIndex->selectionModel->removeIndexInterval->tableColumns->insertElementAt->selectionModel->insertIndexInterval->if->selectionModel->addSelectionInterval->else->selectionModel->removeSelectionInterval->new->TableColumnModelEvent->fireColumnMoved
DefaultTableColumnModel#setColumnMargin(int):::Sets the column margin to newMargin:::if->fireColumnMarginChanged
DefaultTableColumnModel#getColumnCount():::Returns the number of columns in the tableColumns array.:::return->tableColumns->size
DefaultTableColumnModel#getColumns():::Returns an Enumeration of all the columns in the model.:::return->tableColumns->elements
DefaultTableColumnModel#getColumnIndex(Object):::Returns the index of the first column in the tableColumns array whose identifier is equal to identifier, when compared using equals.:::if->throw->new->IllegalArgumentException->enumeration->getColumns->aColumn->index->while->enumeration->hasMoreElements->enumeration->nextElement->if->identifier->aColumn->getIdentifier->equals->return->throw->new->IllegalArgumentException
DefaultTableColumnModel#getColumn(int):::Returns the TableColumn object for the column at columnIndex.:::return->tableColumns->elementAt
DefaultTableColumnModel#getColumnMargin():::Returns the width margin for TableColumn:::return
DefaultTableColumnModel#getColumnIndexAtX(int):::Returns the index of the column that lies at position x, or -1 if no column covers this point:::if->return->cc->getColumnCount->for->column->return
DefaultTableColumnModel#getTotalColumnWidth():::Returns the total combined width of all columns.:::if->recalcWidthCache->return
DefaultTableColumnModel#setSelectionModel(ListSelectionModel)::: Sets the selection model for this TableColumnModel  to newModel  and registers for listener notifications from the new selection  model:::if->throw->new->IllegalArgumentException->oldModel->if->if->oldModel->removeListSelectionListener->newModel->addListSelectionListener
DefaultTableColumnModel#getSelectionModel():::Returns the ListSelectionModel that is used to maintain column selection state.:::return
DefaultTableColumnModel#setColumnSelectionAllowed(boolean):::Sets whether column selection is allowed:::
DefaultTableColumnModel#getColumnSelectionAllowed():::Returns true if column selection is allowed, otherwise false:::return
DefaultTableColumnModel#getSelectedColumns():::Returns an array of selected columns:::if->return->selectionModel->getSelectedIndices->return->new->intArr
DefaultTableColumnModel#getSelectedColumnCount():::Returns the number of columns selected.:::if->return->selectionModel->getSelectedItemsCount->return
DefaultTableColumnModel#addColumnModelListener(TableColumnModelListener):::Adds a listener for table column model events.:::listenerList->add
DefaultTableColumnModel#removeColumnModelListener(TableColumnModelListener):::Removes a listener for table column model events.:::listenerList->remove
DefaultTableColumnModel#getColumnModelListeners():::Returns an array of all the column model listeners registered on this model.:::return->listenerList->getListeners
DefaultTableColumnModel#fireColumnAdded(TableColumnModelEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultTableColumnModel#fireColumnRemoved(TableColumnModelEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultTableColumnModel#fireColumnMoved(TableColumnModelEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultTableColumnModel#fireColumnSelectionChanged(ListSelectionEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultTableColumnModel#fireColumnMarginChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultTableColumnModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultTableColumnModel#propertyChange(PropertyChangeEvent):::Property Change Listener change method:::name->evt->getPropertyName->if->invalidateWidthCache->fireColumnMarginChanged
DefaultTableColumnModel#valueChanged(ListSelectionEvent):::A ListSelectionListener that forwards ListSelectionEvents when there is a column selection change.:::fireColumnSelectionChanged
DefaultTableColumnModel#createSelectionModel():::Creates a new default list selection model.:::return->new->DefaultListSelectionModel
DefaultTableColumnModel#recalcWidthCache():::Recalculates the total combined width of all columns:::enumeration->getColumns->while->enumeration->hasMoreElements->enumeration->nextElement->getWidth
DefaultTableColumnModel#invalidateWidthCache()::: default table column model invalidate width cache:::
DefaultTableModel#newVector(int)::: default table model new vector:::v->new->Vector<>->v->setSize->return
DefaultTableModel#getDataVector()::: Returns the Vector of Vectors  that contains the table's  data values:::return
DefaultTableModel#nonNullVector(Vector)::: default table model non null vector:::return->new->Vector<>
DefaultTableModel#setDataVector(Vector, Vector)::: Replaces the current dataVector instance variable  with the new Vector of rows, dataVector:::nonNullVector->nonNullVector->getRowCount->justifyRows->fireTableStructureChanged
DefaultTableModel#setDataVector(Object[][], Object[])::: Replaces the value in the dataVector instance  variable with the values in the array dataVector:::convertToVector->convertToVector->setDataVector
DefaultTableModel#newDataAvailable(TableModelEvent)::: Equivalent to fireTableChanged.:::fireTableChanged
DefaultTableModel#justifyRows(int, int)::: default table model justify rows:::dataVector->getRowCount->setSize->for->i
DefaultTableModel#newRowsAdded(TableModelEvent)::: Ensures that the new rows have the correct number of columns:::e->getFirstRow->e->getLastRow->justifyRows->fireTableChanged
DefaultTableModel#rowsRemoved(TableModelEvent)::: Equivalent to fireTableChanged.:::fireTableChanged
DefaultTableModel#setNumRows(int):::Obsolete as of Java 2 platform v1.3:::old->getRowCount->if->return->dataVector->setSize->if->fireTableRowsDeleted->else->justifyRows->fireTableRowsInserted
DefaultTableModel#setRowCount(int)::: Sets the number of rows in the model:::setNumRows
DefaultTableModel#addRow(Vector)::: Adds a row to the end of the model:::getRowCount->insertRow
DefaultTableModel#addRow(Object[])::: Adds a row to the end of the model:::convertToVector->addRow
DefaultTableModel#insertRow(int, Vector)::: Inserts a row at row in the model:::dataVector->insertElementAt->justifyRows->fireTableRowsInserted
DefaultTableModel#insertRow(int, Object[])::: Inserts a row at row in the model:::convertToVector->insertRow
DefaultTableModel#gcd(int, int)::: default table model gcd:::return->gcd
DefaultTableModel#rotate(Vector, int, int, int)::: default table model rotate:::size->r->g->gcd->for->i
DefaultTableModel#moveRow(int, int, int)::: Moves one or more rows from the inclusive range start to  end to the to position in the model:::shift->first->last->if->else->rotate->fireTableRowsUpdated
DefaultTableModel#removeRow(int)::: Removes the row at row from the model:::dataVector->removeElementAt->fireTableRowsDeleted
DefaultTableModel#setColumnIdentifiers(Vector):::Replaces the column identifiers in the model:::setDataVector
DefaultTableModel#setColumnIdentifiers(Object[]):::Replaces the column identifiers in the model:::convertToVector->setColumnIdentifiers
DefaultTableModel#setColumnCount(int)::: Sets the number of columns in the model:::columnIdentifiers->setSize->getRowCount->justifyRows->fireTableStructureChanged
DefaultTableModel#addColumn(Object)::: Adds a column to the model:::addColumn
DefaultTableModel#addColumn(Object, Vector)::: Adds a column to the model:::columnIdentifiers->addElement->if->columnSize->columnData->size->if->getRowCount->dataVector->setSize->getRowCount->justifyRows->newColumn->getColumnCount->for->i->else->getRowCount->justifyRows->fireTableStructureChanged
DefaultTableModel#addColumn(Object, Object[])::: Adds a column to the model:::convertToVector->addColumn
DefaultTableModel#getRowCount():::Returns the number of rows in this data table.:::return->dataVector->size
DefaultTableModel#getColumnCount():::Returns the number of columns in this data table.:::return->columnIdentifiers->size
DefaultTableModel#getColumnName(int):::Returns the column name.:::id->if->columnIdentifiers->size->columnIdentifiers->elementAt->return->super->getColumnName->id->toString
DefaultTableModel#isCellEditable(int, int):::Returns true regardless of parameter values.:::return
DefaultTableModel#getValueAt(int, int):::Returns an attribute value for the cell at row and column.:::rowVector->dataVector->elementAt->return->rowVector->elementAt
DefaultTableModel#setValueAt(Object, int, int):::Sets the object value for the cell at column and row:::rowVector->dataVector->elementAt->rowVector->setElementAt->fireTableCellUpdated
DefaultTableModel#convertToVector(Object[]):::Returns a vector that contains the same objects as the array.:::if->return->v->new->Vector<>->foreach->v->addElement->return
DefaultTableModel#convertToVector(Object[][]):::Returns a vector of vectors that contains the same objects as the array.:::if->return->v->new->Vector<>->foreach->v->convertToVector->addElement->return
JTableHeader#setTable(JTable)::: Sets the table associated with this header.:::old->firePropertyChange
JTableHeader#getTable()::: Returns the table associated with this header.:::return
JTableHeader#setReorderingAllowed(boolean)::: Sets whether the user can drag column headers to reorder columns.:::old->firePropertyChange
JTableHeader#getReorderingAllowed():::Returns true if the user is allowed to rearrange columns by dragging their headers, false otherwise:::return
JTableHeader#setResizingAllowed(boolean)::: Sets whether the user can resize columns by dragging between headers.:::old->firePropertyChange
JTableHeader#getResizingAllowed():::Returns true if the user is allowed to resize columns by dragging between their headers, false otherwise:::return
JTableHeader#getDraggedColumn():::Returns the dragged column, if and only if, a drag is in process, otherwise returns null.:::return
JTableHeader#getDraggedDistance():::Returns the column's horizontal distance from its original position, if and only if, a drag is in process:::return
JTableHeader#getResizingColumn():::Returns the resizing column:::return
JTableHeader#setUpdateTableInRealTime(boolean):::Obsolete as of Java 2 platform v1.3:::
JTableHeader#getUpdateTableInRealTime():::Obsolete as of Java 2 platform v1.3:::return
JTableHeader#setDefaultRenderer(TableCellRenderer):::Sets the default renderer to be used when no headerRenderer is defined by a TableColumn.:::
JTableHeader#getDefaultRenderer():::Returns the default renderer used when no headerRenderer is defined by a TableColumn.:::return
JTableHeader#columnAtPoint(Point):::Returns the index of the column that point lies in, or -1 if it lies out of bounds.:::x->if->getComponentOrientation->isLeftToRight->getWidthInRightToLeft->return->getColumnModel->getColumnIndexAtX
JTableHeader#getHeaderRect(int):::Returns the rectangle containing the header tile at column:::r->new->Rectangle->cm->getColumnModel->getHeight->if->if->getComponentOrientation->isLeftToRight->getWidthInRightToLeft->else->if->cm->getColumnCount->if->getComponentOrientation->isLeftToRight->getWidth->else->for->i->if->getComponentOrientation->isLeftToRight->getWidthInRightToLeft->cm->getColumn->getWidth->cm->getColumn->getWidth->return
JTableHeader#getToolTipText(MouseEvent):::Allows the renderer's tips to be used if there is text set.:::tip->p->event->getPoint->column->if->columnAtPoint->aColumn->columnModel->getColumn->renderer->aColumn->getHeaderRenderer->if->component->renderer->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->if->newEvent->cellRect->getHeaderRect->p->translate->event->getID->event->getWhen->event->getModifiers->event->getXOnScreen->event->getYOnScreen->event->getClickCount->event->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->getToolTipText->if->getToolTipText->return
JTableHeader#getPreferredSize():::Returns the preferred size of the table header:::preferredSize->super->getPreferredSize->if->isPreferredSizeSet->size->ui->getPreferredSize->if->return
JTableHeader#getUI():::Returns the look and feel (L&amp;F) object that renders this component.:::return
JTableHeader#setUI(TableHeaderUI):::Sets the look and feel (L&amp;F) object that renders this component.:::if->super->setUI->repaint
JTableHeader#updateUI():::Notification from the UIManager that the look and feel (L&amp;F) has changed:::if->try->UIManager->getUI->setUI->renderer->getDefaultRenderer->if->SwingUtilities->updateComponentTreeUI->catch->finally
JTableHeader#getUIClassID():::Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component.:::return
JTableHeader#setColumnModel(TableColumnModel)::: Sets the column model for this table to newModel and registers  for listener notifications from the new column model.:::if->throw->new->IllegalArgumentException->old->if->if->old->removeColumnModelListener->columnModel->addColumnModelListener->firePropertyChange->resizeAndRepaint
JTableHeader#getColumnModel():::Returns the TableColumnModel that contains all column information of this table header.:::return
JTableHeader#columnAdded(TableColumnModelEvent):::Invoked when a column is added to the table column model:::resizeAndRepaint
JTableHeader#columnRemoved(TableColumnModelEvent):::Invoked when a column is removed from the table column model:::resizeAndRepaint
JTableHeader#columnMoved(TableColumnModelEvent):::Invoked when a column is repositioned:::repaint
JTableHeader#columnMarginChanged(ChangeEvent):::Invoked when a column is moved due to a margin change:::resizeAndRepaint
JTableHeader#columnSelectionChanged(ListSelectionEvent)::: table header column selection changed:::
JTableHeader#createDefaultColumnModel()::: Returns the default column model object which is  a DefaultTableColumnModel:::return->new->DefaultTableColumnModel
JTableHeader#createDefaultRenderer()::: Returns a default renderer to be used when no header renderer  is defined by a TableColumn.:::return->new->DefaultTableCellHeaderRenderer
JTableHeader#initializeLocalVars():::Initializes the local variables and properties with default values:::setOpaque->toolTipManager->ToolTipManager->sharedInstance->toolTipManager->registerComponent->createDefaultRenderer->setDefaultRenderer
JTableHeader#resizeAndRepaint():::Sizes the header and marks it as needing display:::revalidate->repaint
JTableHeader#setDraggedColumn(TableColumn)::: Sets the header's draggedColumn to aColumn:::
JTableHeader#setDraggedDistance(int)::: Sets the header's draggedDistance to distance.:::
JTableHeader#setResizingColumn(TableColumn)::: Sets the header's resizingColumn to aColumn:::
JTableHeader#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->ui->installUI
JTableHeader#getWidthInRightToLeft()::: table header get width in right to left:::if->table->getAutoResizeMode->return->table->getWidth->return->super->getWidth
JTableHeader#paramString():::Returns a string representation of this JTableHeader:::reorderingAllowedString->resizingAllowedString->updateTableInRealTimeString->return->super->paramString
JTableHeader#getAccessibleContext():::Gets the AccessibleContext associated with this JTableHeader:::if->new->AccessibleJTableHeader->return
JTableHeader.AccessibleJTableHeader#getAccessibleRole():::Get the role of this object.:::return
JTableHeader.AccessibleJTableHeader#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::column->if->JTableHeader.this->columnAtPoint->aColumn->getColumn->renderer->aColumn->getHeaderRenderer->if->if->else->return->component->renderer->JTableHeader.this->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->return->new->AccessibleJTableHeaderEntry->else->return
JTableHeader.AccessibleJTableHeader#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->getColumnCount
JTableHeader.AccessibleJTableHeader#getAccessibleChild(int):::Return the nth Accessible child of the object.:::if->getAccessibleChildrenCount->return->else->aColumn->getColumn->renderer->aColumn->getHeaderRenderer->if->if->else->return->component->renderer->JTableHeader.this->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->return->new->AccessibleJTableHeaderEntry
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleContext():::Get the AccessibleContext associated with this object:::return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getCurrentAccessibleContext()::: accessible table header entry get current accessible context:::tcm->table->getColumnModel->if->if->tcm->getColumnCount->return->aColumn->tcm->getColumn->renderer->aColumn->getHeaderRenderer->if->if->else->return->c->renderer->JTableHeader.this->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->if->return->getAccessibleContext->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getCurrentComponent()::: accessible table header entry get current component:::tcm->table->getColumnModel->if->if->tcm->getColumnCount->return->aColumn->tcm->getColumn->renderer->aColumn->getHeaderRenderer->if->if->else->return->return->renderer->JTableHeader.this->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleName()::: accessible table header entry get accessible name:::ac->getCurrentAccessibleContext->if->name->ac->getAccessibleName->if->return->if->return->else->name->getClientProperty->if->return->else->return->table->getColumnName
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setAccessibleName(String)::: accessible table header entry set accessible name:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName->else->super->setAccessibleName
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleDescription()::: accessible table header entry get accessible description:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return->super->getAccessibleDescription
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setAccessibleDescription(String)::: accessible table header entry set accessible description:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription->else->super->setAccessibleDescription
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleRole()::: accessible table header entry get accessible role:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleStateSet()::: accessible table header entry get accessible state set:::ac->getCurrentAccessibleContext->if->states->ac->getAccessibleStateSet->if->isShowing->states->add->return->else->return->new->AccessibleStateSet
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleIndexInParent()::: accessible table header entry get accessible index in parent:::return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleChildrenCount()::: accessible table header entry get accessible children count:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleChildrenCount->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleChild(int)::: accessible table header entry get accessible child:::ac->getCurrentAccessibleContext->if->accessibleChild->ac->getAccessibleChild->ac->setAccessibleParent->return->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getLocale()::: accessible table header entry get locale:::ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#addPropertyChangeListener(PropertyChangeListener)::: accessible table header entry add property change listener:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener->else->super->addPropertyChangeListener
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#removePropertyChangeListener(PropertyChangeListener)::: accessible table header entry remove property change listener:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener->else->super->removePropertyChangeListener
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleAction()::: accessible table header entry get accessible action:::return->getCurrentAccessibleContext->getAccessibleAction
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleComponent():::Get the AccessibleComponent associated with this object:::return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleSelection()::: accessible table header entry get accessible selection:::return->getCurrentAccessibleContext->getAccessibleSelection
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleText()::: accessible table header entry get accessible text:::return->getCurrentAccessibleContext->getAccessibleText
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleValue()::: accessible table header entry get accessible value:::return->getCurrentAccessibleContext->getAccessibleValue
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getBackground()::: accessible table header entry get background:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setBackground(Color)::: accessible table header entry set background:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getForeground()::: accessible table header entry get foreground:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setForeground(Color)::: accessible table header entry set foreground:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getCursor()::: accessible table header entry get cursor:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setCursor(Cursor)::: accessible table header entry set cursor:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getFont()::: accessible table header entry get font:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setFont(Font)::: accessible table header entry set font:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getFontMetrics(Font)::: accessible table header entry get font metrics:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#isEnabled()::: accessible table header entry is enabled:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setEnabled(boolean)::: accessible table header entry set enabled:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#isVisible()::: accessible table header entry is visible:::ac->getCurrentAccessibleContext->if->return->isVisible->else->c->getCurrentComponent->if->return->c->isVisible->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setVisible(boolean)::: accessible table header entry set visible:::ac->getCurrentAccessibleContext->if->setVisible->else->c->getCurrentComponent->if->c->setVisible
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#isShowing()::: accessible table header entry is showing:::if->isVisible->JTableHeader.this->isShowing->return->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#contains(Point)::: accessible table header entry contains:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getLocationOnScreen()::: accessible table header entry get location on screen:::if->parentLocation->parent->getLocationOnScreen->componentLocation->getLocation->componentLocation->translate->return->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getLocation()::: accessible table header entry get location:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->getLocation->else->c->getCurrentComponent->if->r->c->getBounds->return->r->getLocation->else->return->getBounds->getLocation
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setLocation(Point)::: accessible table header entry set location:::
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getBounds()::: accessible table header entry get bounds:::r->table->getCellRect->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setBounds(Rectangle)::: accessible table header entry set bounds:::ac->getCurrentAccessibleContext->if->setBounds->else->c->getCurrentComponent->if->c->setBounds
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getSize()::: accessible table header entry get size:::return->getBounds->getSize
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#setSize(Dimension)::: accessible table header entry set size:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#getAccessibleAt(Point)::: accessible table header entry get accessible at:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#isFocusTraversable()::: accessible table header entry is focus traversable:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusTraversable->else->return
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#requestFocus()::: accessible table header entry request focus:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#addFocusListener(FocusListener)::: accessible table header entry add focus listener:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry#removeFocusListener(FocusListener)::: accessible table header entry remove focus listener:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
TableCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: Sets an initial value for the editor:::
TableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int):::Returns the component used for drawing the cell:::
TableColumn#firePropertyChange(String, Object, Object)::: table column fire property change:::if->changeSupport->firePropertyChange
TableColumn#firePropertyChange(String, int, int)::: table column fire property change:::if->Integer->valueOf->Integer->valueOf->firePropertyChange
TableColumn#firePropertyChange(String, boolean, boolean)::: table column fire property change:::if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
TableColumn#setModelIndex(int):::Sets the model index for this column:::old->firePropertyChange
TableColumn#getModelIndex():::Returns the model index for this column.:::return
TableColumn#setIdentifier(Object):::Sets the TableColumn's identifier to anIdentifier:::old->firePropertyChange
TableColumn#getIdentifier()::: Returns the identifier object for this column:::return->getHeaderValue
TableColumn#setHeaderValue(Object):::Sets the Object whose string representation will be used as the value for the headerRenderer:::old->firePropertyChange
TableColumn#getHeaderValue():::Returns the Object used as the value for the header renderer.:::return
TableColumn#setHeaderRenderer(TableCellRenderer):::Sets the TableCellRenderer used to draw the TableColumn's header to headerRenderer:::old->firePropertyChange
TableColumn#getHeaderRenderer():::Returns the TableCellRenderer used to draw the header of the TableColumn:::return
TableColumn#setCellRenderer(TableCellRenderer):::Sets the TableCellRenderer used by JTable to draw individual values for this column.:::old->firePropertyChange
TableColumn#getCellRenderer():::Returns the TableCellRenderer used by the JTable to draw values for this column:::return
TableColumn#setCellEditor(TableCellEditor):::Sets the editor to used by when a cell in this column is edited.:::old->firePropertyChange
TableColumn#getCellEditor():::Returns the TableCellEditor used by the JTable to edit values for this column:::return
TableColumn#setWidth(int):::This method should not be used to set the widths of columns in the JTable, use setPreferredWidth instead:::old->Math->Math->max->min->firePropertyChange
TableColumn#getWidth():::Returns the width of the TableColumn:::return
TableColumn#setPreferredWidth(int):::Sets this column's preferred width to preferredWidth:::old->Math->Math->max->min->firePropertyChange
TableColumn#getPreferredWidth():::Returns the preferred width of the TableColumn:::return
TableColumn#setMinWidth(int):::Sets the TableColumn's minimum width to minWidth, adjusting the new minimum width if necessary to ensure that 0 &lt;= minWidth &lt;= maxWidth:::old->Math->Math->min->max->if->setWidth->if->setPreferredWidth->firePropertyChange
TableColumn#getMinWidth():::Returns the minimum width for the TableColumn:::return
TableColumn#setMaxWidth(int):::Sets the TableColumn's maximum width to maxWidth or, if maxWidth is less than the minimum width, to the minimum width:::old->Math->max->if->setWidth->if->setPreferredWidth->firePropertyChange
TableColumn#getMaxWidth():::Returns the maximum width for the TableColumn:::return
TableColumn#setResizable(boolean):::Sets whether this column can be resized.:::old->firePropertyChange
TableColumn#getResizable():::Returns true if the user is allowed to resize the TableColumn's width, false otherwise:::return
TableColumn#sizeWidthToFit():::Resizes the TableColumn to fit the width of its header cell:::if->return->c->headerRenderer->getHeaderValue->getTableCellRendererComponent->c->getMinimumSize->setMinWidth->c->getMaximumSize->setMaxWidth->c->getPreferredSize->setPreferredWidth->getPreferredWidth->setWidth
TableColumn#disableResizedPosting():::This field was not used in previous releases and there are currently no plans to support it in the future.:::
TableColumn#enableResizedPosting():::This field was not used in previous releases and there are currently no plans to support it in the future.:::
TableColumn#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->SwingPropertyChangeSupport->changeSupport->addPropertyChangeListener
TableColumn#removePropertyChangeListener(PropertyChangeListener)::: table column remove property change listener:::if->changeSupport->removePropertyChangeListener
TableColumn#getPropertyChangeListeners():::Returns an array of all the PropertyChangeListeners added to this TableColumn with addPropertyChangeListener().:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
TableColumn#createDefaultHeaderRenderer():::As of Java 2 platform v1.3, this method is not called by the TableColumn constructor:::label->new->DefaultTableCellRenderer->label->setHorizontalAlignment->return
TableColumnModel#addColumn(TableColumn)::: Appends aColumn to the end of the  tableColumns array:::
TableColumnModel#removeColumn(TableColumn)::: Deletes the TableColumn column from the  tableColumns array:::
TableColumnModel#moveColumn(int, int):::Moves the column and its header at columnIndex to newIndex:::
TableColumnModel#setColumnMargin(int):::Sets the TableColumn's column margin to newMargin:::
TableColumnModel#getColumnCount():::Returns the number of columns in the model.:::
TableColumnModel#getColumns():::Returns an Enumeration of all the columns in the model.:::
TableColumnModel#getColumnIndex(Object):::Returns the index of the first column in the table whose identifier is equal to identifier, when compared using equals.:::
TableColumnModel#getColumn(int):::Returns the TableColumn object for the column at columnIndex.:::
TableColumnModel#getColumnMargin():::Returns the width between the cells in each column.:::
TableColumnModel#getColumnIndexAtX(int):::Returns the index of the column that lies on the horizontal point, xPosition; or -1 if it lies outside the any of the column's bounds:::
TableColumnModel#getTotalColumnWidth():::Returns the total width of all the columns.:::
TableColumnModel#setColumnSelectionAllowed(boolean):::Sets whether the columns in this model may be selected.:::
TableColumnModel#getColumnSelectionAllowed():::Returns true if columns may be selected.:::
TableColumnModel#getSelectedColumns():::Returns an array of indicies of all selected columns.:::
TableColumnModel#getSelectedColumnCount():::Returns the number of selected columns.:::
TableColumnModel#setSelectionModel(ListSelectionModel):::Sets the selection model.:::
TableColumnModel#getSelectionModel():::Returns the current selection model.:::
TableColumnModel#addColumnModelListener(TableColumnModelListener):::Adds a listener for table column model events.:::
TableColumnModel#removeColumnModelListener(TableColumnModelListener):::Removes a listener for table column model events.:::
TableModel#getRowCount():::Returns the number of rows in the model:::
TableModel#getColumnCount():::Returns the number of columns in the model:::
TableModel#getColumnName(int):::Returns the name of the column at columnIndex:::
TableModel#getColumnClass(int):::Returns the most specific superclass for all the cell values in the column:::
TableModel#isCellEditable(int, int):::Returns true if the cell at rowIndex and columnIndex is editable:::
TableModel#getValueAt(int, int):::Returns the value for the cell at columnIndex and rowIndex.:::
TableModel#setValueAt(Object, int, int):::Sets the value in the cell at columnIndex and rowIndex to aValue.:::
TableModel#addTableModelListener(TableModelListener):::Adds a listener to the list that is notified each time a change to the data model occurs.:::
TableModel#removeTableModelListener(TableModelListener):::Removes a listener from the list that is notified each time a change to the data model occurs.:::
TableRowSorter#setModel(M):::Sets the TableModel to use as the underlying model for this TableRowSorter:::new->TableRowSorterModelWrapper->setModelWrapper
TableRowSorter#setStringConverter(TableStringConverter):::Sets the object responsible for converting values from the model to strings:::
TableRowSorter#getStringConverter():::Returns the object responsible for converting values from the model to strings.:::return
TableRowSorter#getComparator(int):::Returns the Comparator for the specified column:::comparator->super->getComparator->if->return->columnClass->getModel->getColumnClass->if->return->Collator->getInstance->if->isAssignableFrom->return->return->Collator->getInstance
TableRowSorter#useToString(int)::: table row sorter use to string:::comparator->super->getComparator->if->return->columnClass->getModel->getColumnClass->if->return->if->isAssignableFrom->return->return
TableRowSorter.TableRowSorterModelWrapper#getModel()::: table row sorter model wrapper get model:::return
TableRowSorter.TableRowSorterModelWrapper#getColumnCount()::: table row sorter model wrapper get column count:::return->tableModel->getColumnCount
TableRowSorter.TableRowSorterModelWrapper#getRowCount()::: table row sorter model wrapper get row count:::return->tableModel->getRowCount
TableRowSorter.TableRowSorterModelWrapper#getValueAt(int, int)::: table row sorter model wrapper get value at:::return->tableModel->getValueAt
TableRowSorter.TableRowSorterModelWrapper#getStringValueAt(int, int)::: table row sorter model wrapper get string value at:::converter->getStringConverter->if->value->converter->toString->if->return->return->o->getValueAt->if->return->string->o->toString->if->return->return
TableRowSorter.TableRowSorterModelWrapper#getIdentifier(int)::: table row sorter model wrapper get identifier:::return
TableRowSorter.ComparableComparator#compare(Object, Object)::: comparable comparator compare:::return->compareTo
TableStringConverter#toString(TableModel, int, int):::Returns the string representation of the value at the specified location.:::

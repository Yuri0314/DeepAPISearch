AccessibleHTML#getAccessibleContext():::Returns the root AccessibleContext for the document:::if->new->RootHTMLAccessibleContext->return
AccessibleHTML.HTMLAccessibleContext#getAccessibleStateSet():::Gets the state set of this object.:::states->new->AccessibleStateSet->comp->getTextComponent->if->comp->isEnabled->states->add->if->isEditable->states->add->states->add->if->comp->isVisible->states->add->if->comp->isShowing->states->add->return
AccessibleHTML.HTMLAccessibleContext#getAccessibleIndexInParent():::Gets the 0-based index of this object in its accessible parent.:::return->elementInfo->getIndexInParent
AccessibleHTML.HTMLAccessibleContext#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::return->elementInfo->getChildCount
AccessibleHTML.HTMLAccessibleContext#getAccessibleChild(int):::Returns the specified Accessible child of the object:::childInfo->elementInfo->getChild->if->return->else->return
AccessibleHTML.HTMLAccessibleContext#getLocale():::Gets the locale of the component:::return->editor->getLocale
AccessibleHTML.HTMLAccessibleContext#getBackground():::Gets the background color of this object.:::return->getTextComponent->getBackground
AccessibleHTML.HTMLAccessibleContext#setBackground(Color):::Sets the background color of this object.:::getTextComponent->setBackground
AccessibleHTML.HTMLAccessibleContext#getForeground():::Gets the foreground color of this object.:::return->getTextComponent->getForeground
AccessibleHTML.HTMLAccessibleContext#setForeground(Color):::Sets the foreground color of this object.:::getTextComponent->setForeground
AccessibleHTML.HTMLAccessibleContext#getCursor():::Gets the Cursor of this object.:::return->getTextComponent->getCursor
AccessibleHTML.HTMLAccessibleContext#setCursor(Cursor):::Sets the Cursor of this object.:::getTextComponent->setCursor
AccessibleHTML.HTMLAccessibleContext#getFont():::Gets the Font of this object.:::return->getTextComponent->getFont
AccessibleHTML.HTMLAccessibleContext#setFont(Font):::Sets the Font of this object.:::getTextComponent->setFont
AccessibleHTML.HTMLAccessibleContext#getFontMetrics(Font):::Gets the FontMetrics of this object.:::return->getTextComponent->getFontMetrics
AccessibleHTML.HTMLAccessibleContext#isEnabled():::Determines if the object is enabled:::return->getTextComponent->isEnabled
AccessibleHTML.HTMLAccessibleContext#setEnabled(boolean):::Sets the enabled state of the object.:::getTextComponent->setEnabled
AccessibleHTML.HTMLAccessibleContext#isVisible():::Determines if the object is visible:::return->getTextComponent->isVisible
AccessibleHTML.HTMLAccessibleContext#setVisible(boolean):::Sets the visible state of the object.:::getTextComponent->setVisible
AccessibleHTML.HTMLAccessibleContext#isShowing():::Determines if the object is showing:::return->getTextComponent->isShowing
AccessibleHTML.HTMLAccessibleContext#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::r->getBounds->if->return->r->contains->else->return
AccessibleHTML.HTMLAccessibleContext#getLocationOnScreen():::Returns the location of the object on the screen.:::editorLocation->getTextComponent->getLocationOnScreen->r->getBounds->if->return->new->Point->else->return
AccessibleHTML.HTMLAccessibleContext#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::r->getBounds->if->return->new->Point->else->return
AccessibleHTML.HTMLAccessibleContext#setLocation(Point):::Sets the location of the object relative to the parent.:::
AccessibleHTML.HTMLAccessibleContext#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::return->elementInfo->getBounds
AccessibleHTML.HTMLAccessibleContext#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::
AccessibleHTML.HTMLAccessibleContext#getSize():::Returns the size of this object in the form of a Dimension object:::r->getBounds->if->return->new->Dimension->else->return
AccessibleHTML.HTMLAccessibleContext#setSize(Dimension):::Resizes this object so that it has width and height.:::comp->getTextComponent->comp->setSize
AccessibleHTML.HTMLAccessibleContext#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::innerMostElement->getElementInfoAt->if->return->else->return
AccessibleHTML.HTMLAccessibleContext#isFocusTraversable():::Returns whether this object can accept focus or not:::comp->getTextComponent->if->if->isEditable->return->return
AccessibleHTML.HTMLAccessibleContext#requestFocus():::Requests focus for this object:::if->isFocusTraversable->return->comp->getTextComponent->if->comp->requestFocusInWindow->try->if->elementInfo->validateIfNecessary->elem->elementInfo->getElement->elem->getStartOffset->setCaretPosition->ac->editor->getAccessibleContext->pce->new->PropertyChangeEvent->ac->firePropertyChange->catch->finally
AccessibleHTML.HTMLAccessibleContext#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component.:::getTextComponent->addFocusListener
AccessibleHTML.HTMLAccessibleContext#removeFocusListener(FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::getTextComponent->removeFocusListener
AccessibleHTML.TextElementInfo.TextAccessibleContext#getAccessibleName():::Gets the accessibleName property of this object:::if->return->model->getProperty->else->return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getAccessibleDescription():::Gets the accessibleDescription property of this object:::return->editor->getContentType
AccessibleHTML.TextElementInfo.TextAccessibleContext#getAccessibleRole():::Gets the role of this object:::return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::v->getView->if->return->v->getBounds->viewToModel->else->return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getCharacterBounds(int):::Determine the bounding box of the character at the given index into the string:::try->return->editor->getUI->modelToView->catch->return->finally
AccessibleHTML.TextElementInfo.TextAccessibleContext#getCharCount():::Return the number of characters (valid indicies):::if->validateIfNecessary->elem->elementInfo->getElement->return->elem->getEndOffset->elem->getStartOffset->return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getCaretPosition():::Return the zero-based offset of the caret:::v->getView->if->return->c->v->getContainer->if->return->if->return->getCaretPosition->else->return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getCharacterAttribute(int):::Return the AttributeSet for a given character at a given index:::if->doc->elem->doc->getCharacterElement->if->return->elem->getAttributes->return
AccessibleHTML.TextElementInfo.TextAccessibleContext#getSelectionStart():::Returns the start offset within the selected text:::return->editor->getSelectionStart
AccessibleHTML.TextElementInfo.TextAccessibleContext#getSelectionEnd():::Returns the end offset within the selected text:::return->editor->getSelectionEnd
AccessibleHTML.TextElementInfo.TextAccessibleContext#getSelectedText():::Returns the portion of the text that is selected.:::return->editor->getSelectedText
BlockView#setParent(View):::Establishes the parent view for this view:::super->setParent->if->setPropertiesFromAttributes
BlockView#calculateMajorAxisRequirements(int, SizeRequirements):::Calculate the requirements of the block along the major axis (i.e:::if->new->SizeRequirements->if->spanSetFromAttributes->super->calculateMajorAxisRequirements->else->parentR->super->calculateMajorAxisRequirements->margin->getLeftInset->getRightInset->getTopInset->getBottomInset->constrainSize->return
BlockView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the requirements of the block along the minor axis (i.e:::if->new->SizeRequirements->if->spanSetFromAttributes->super->calculateMinorAxisRequirements->else->parentR->super->calculateMinorAxisRequirements->margin->getLeftInset->getRightInset->getTopInset->getBottomInset->constrainSize->if->o->getAttributes->getAttribute->if->align->o->toString->if->align->equals->else->if->align->equals->else->return
BlockView#spanSetFromAttributes(int, SizeRequirements, CSS.LengthValue, CSS.LengthValue):::Adjust the given requirements to the CSS width or height if it is specified along the applicable axis:::if->if->cssWidth->isPercentage->cssWidth->getValue->return->else->if->cssHeight->isPercentage->cssHeight->getValue->return->return
BlockView#layoutMinorAxis(int, int, int[], int[]):::Performs layout for the minor axis of the box (i.e:::n->getViewCount->key->for->i
BlockView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::a->painter->paint->super->paint
BlockView#getAttributes():::Fetches the attributes to use when rendering:::if->sheet->getStyleSheet->sheet->getViewAttributes->return
BlockView#getResizeWeight(int):::Gets the resize weight.:::switch->return->return->throw->new->IllegalArgumentException
BlockView#getAlignment(int):::Gets the alignment.:::switch->return->if->getViewCount->return->span->getPreferredSpan->v->getView->above->v->getPreferredSpan->a->v->getAlignment->return->throw->new->IllegalArgumentException
BlockView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::return->super->getPreferredSpan
BlockView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::return->super->getMinimumSpan
BlockView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return->super->getMaximumSpan
BlockView#setPropertiesFromAttributes():::Update any cached values that come from attributes.:::sheet->getStyleSheet->sheet->getViewAttributes->sheet->getBoxPainter->if->painter->getInset->painter->getInset->painter->getInset->painter->getInset->setInsets->attr->getAttribute->attr->getAttribute
BlockView#getStyleSheet():::Convenient method to get the StyleSheet.:::doc->getDocument->return->doc->getStyleSheet
BRView#getBreakWeight(int, float, float):::Forces a line break.:::if->return->else->return->super->getBreakWeight
CommentView#_updateModelFromText():::This is subclassed to put the text on the Comment attribute of the Element's AttributeSet.:::textC->getTextComponent->doc->getDocument->if->text->textC->getText->sas->new->SimpleAttributeSet->try->sas->addAttribute->getStartOffset->getEndOffset->getStartOffset->setCharacterAttributes->catch->finally
CSS.Attribute#toString():::The string representation of the attribute:::return
CSS.Attribute#getDefaultValue():::Fetch the default value for the attribute:::return
CSS.Attribute#isInherited():::Indicates if the attribute should be inherited from the parent or not.:::return
CSS.Value#toString():::The string representation of the attribute:::return
CSS#setBaseFontSize(int):::Sets the base font size:::if->else->if->else
CSS#setBaseFontSize(String):::Sets the base font size from the passed in string.:::relSize->absSize->diff->if->if->size->startsWith->Integer->size->substring->valueOf->intValue->setBaseFontSize->else->if->size->startsWith->Integer->size->substring->valueOf->intValue->setBaseFontSize->else->Integer->valueOf->intValue->setBaseFontSize
CSS#getBaseFontSize():::Returns the base font size.:::return
CSS#addInternalCSSValue(MutableAttributeSet, CSS.Attribute, String):::Parses the CSS property key with value value placing the result in att.:::if->ShorthandFontParser->parseShorthandFont->else->if->ShorthandBackgroundParser->parseShorthandBackground->else->if->ShorthandMarginParser->parseShorthandMargin->else->if->ShorthandMarginParser->parseShorthandMargin->else->if->ShorthandMarginParser->parseShorthandMargin->else->if->ShorthandMarginParser->parseShorthandMargin->else->if->ShorthandMarginParser->parseShorthandMargin->else->if->ShorthandBorderParser->parseShorthandBorder->else->iValue->getInternalCSSValue->if->attr->addAttribute
CSS#getInternalCSSValue(CSS.Attribute, String):::Gets the internal CSS representation of value which is a CSS value of the CSS attribute named key:::conv->valueConvertor->get->r->conv->parseCssValue->return->conv->key->getDefaultValue->parseCssValue
CSS#styleConstantsKeyToCSSKey(StyleConstants):::Maps from a StyleConstants to a CSS Attribute.:::return->styleConstantToCssMap->get
CSS#styleConstantsValueToCSSValue(StyleConstants, Object):::Maps from a StyleConstants value to a CSS value.:::cssKey->styleConstantsKeyToCSSKey->if->conv->valueConvertor->get->return->conv->fromStyleConstants->return
CSS#cssValueToStyleConstantsValue(StyleConstants, Object):::Converts the passed in CSS value to a StyleConstants value:::if->return->toStyleConstants->return
CSS#getFont(StyleContext, AttributeSet, int, StyleSheet):::Returns the font for the values in the passed in AttributeSet:::getStyleSheet->size->getFontSize->vAlignV->a->getAttribute->if->vAlign->vAlignV->toString->if->vAlign->indexOf->vAlign->indexOf->familyValue->a->getAttribute->family->familyValue->getValue->style->weightValue->a->getAttribute->if->weightValue->getValue->fs->a->getAttribute->if->fs->toString->indexOf->if->family->equalsIgnoreCase->f->sc->getFont->if->f->getFamily->equals->family->equalsIgnoreCase->sc->getFont->return
CSS#getColor(AttributeSet, CSS.Attribute):::Takes a set of attributes and turn it into a color specification:::cv->a->getAttribute->if->return->cv->getValue->return
CSS#getPointSize(String, StyleSheet):::Returns the size of a font from the passed in string.:::relSize->absSize->diff->index->getStyleSheet->if->if->size->startsWith->Integer->size->substring->valueOf->intValue->return->getPointSize->else->if->size->startsWith->Integer->size->substring->valueOf->intValue->return->getPointSize->else->Integer->valueOf->intValue->return->getPointSize->return
CSS#getLength(AttributeSet, CSS.Attribute, StyleSheet):::Returns the length of the attribute in a with key key.:::getStyleSheet->lv->a->getAttribute->isW3CLengthUnits->ss->isW3CLengthUnits->len->lv->getValue->return
CSS#translateHTMLToCSS(AttributeSet):::Convert a set of HTML attributes to an equivalent set of CSS attributes.:::cssAttrSet->new->SimpleAttributeSet->elem->tag->getHTMLTag->if->tableAttr->elem->getParentElement->getParentElement->getAttributes->borderWidth->getTableBorder->if->translateAttribute->pad->tableAttr->getAttribute->if->v->getInternalCSSValue->cssAttrSet->addAttribute->cssAttrSet->addAttribute->cssAttrSet->addAttribute->cssAttrSet->addAttribute->if->elem->isLeaf->translateEmbeddedAttributes->else->translateAttributes->if->v->htmlAttrSet->getAttribute->if->v->equals->v->equals->cssAttrSet->addAttribute->cssAttrSet->removeAttribute->else->htmlAttrSet->getAttribute->if->cssAttrSet->addAttribute->return
CSS#getAllAttributeKeys():::Return the set of all possible CSS attribute keys.:::keys->new->AttributeArr->System->arraycopy->return
CSS#getAttribute(String):::Translates a string to a CSS.Attribute object:::return->attributeMap->get
CSS#getValue(String):::Translates a string to a CSS.Value object:::return->valueMap->get
CSS#getURL(URL, String):::Returns a URL for the given CSS url string:::if->return->if->cssString->startsWith->cssString->endsWith->cssString->cssString->length->substring->try->url->new->URL->if->return->catch->finally->if->try->url->new->URL->return->catch->finally->return
CSS#colorToHex(Color):::Converts a type Color to a hex string in the format "#RRGGBB":::colorstr->str->Integer->color->getRed->toHexString->if->str->length->str->substring->else->if->str->length->else->Integer->color->getGreen->toHexString->if->str->length->str->substring->else->if->str->length->else->Integer->color->getBlue->toHexString->if->str->length->str->substring->else->if->str->length->else->return
CSS#hexToColor(String):::Convert a "#FFFFFF" hex string to a Color:::digits->n->value->length->if->value->startsWith->value->Math->value->length->min->substring->else->hstr->c->try->Color->decode->catch->finally->return
CSS#stringToColor(String):::Convert a color string such as "RED" or "#NNNNNN" or "rgb(r, g, b)" to a Color.:::color->if->return->if->str->length->else->if->str->startsWith->parseRGB->else->if->str->charAt->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->if->str->equalsIgnoreCase->hexToColor->else->hexToColor->return
CSS#getPointSize(int, StyleSheet):::Return the point size, given a size index:::getStyleSheet->sizeMap->ss->getSizeMap->if->return->else->if->return->else->return
CSS#getCssValue(CSS.Attribute, String):::Given a CSS.Attribute object and its corresponding HTML.Attribute's value, this method returns a CssValue object to associate with the CSS attribute.:::value->valueConvertor->get->o->value->parseHtmlValue->return
CSS.CssValue#parseCssValue(String):::Convert a CSS value string to the internal format (for fast processing) used in the attribute sets:::return
CSS.CssValue#parseHtmlValue(String):::Convert an HTML attribute value to a CSS attribute value:::return->parseCssValue
CSS.CssValue#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::return
CSS.CssValue#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::return
CSS.CssValue#toString():::Return the CSS format of the value:::return
CSS.StringValue#parseCssValue(String):::Convert a CSS value string to the internal format (for fast processing) used in the attribute sets:::sv->new->StringValue->return
CSS.StringValue#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::if->if->value->equals->return->parseCssValue->return->parseCssValue->else->if->if->value->equals->return->parseCssValue->return->parseCssValue->else->if->align->intValue->ta->switch->break->break->break->break->return->parseCssValue->else->if->if->value->equals->return->parseCssValue->return->parseCssValue->else->if->if->value->equals->return->parseCssValue->return->parseCssValue->else->if->if->value->equals->return->parseCssValue->return->parseCssValue->return
CSS.StringValue#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::if->if->svalue->indexOf->return->return->else->if->if->svalue->indexOf->return->return->else->if->if->svalue->equals->return->else->if->svalue->equals->return->else->if->svalue->equals->return->return->else->if->if->svalue->indexOf->return->return->else->if->if->svalue->indexOf->return->return->else->if->if->svalue->indexOf->return->return->return
CSS.FontSize#getValue(AttributeSet, StyleSheet):::Returns the size in points:::getStyleSheet->if->return->Math->getPointSize->round->else->if->return->Math->round->else->if->isW3CLengthUnits->ss->isW3CLengthUnits->return->Math->lu->getValue->round->if->resolveParent->a->getResolveParent->if->pValue->StyleConstants->getFontSize->retValue->if->else->return->Math->round->return
CSS.FontSize#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::if->fs->new->FontSize->floatValue->getIndexOfSize->Integer->toString->return->return->value->toString->parseCssValue
CSS.FontSize#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::if->return->Integer->v->getAttributes->getValue->valueOf->return->Integer->getValue->valueOf
CSS.FontFamily#getValue():::Returns the font family to use.:::return
CSS.FontFamily#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::return->value->toString->parseCssValue
CSS.FontFamily#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::return
CSS.FontWeight#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::if->value->equals->return->parseCssValue->return->parseCssValue
CSS.FontWeight#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::return
CSS.ColorValue#getValue():::Returns the color to use.:::return
CSS.ColorValue#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::colorValue->new->ColorValue->colorToHex->return
CSS.ColorValue#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::return
CSS.LengthValue#getValue():::Returns the length (span) to use.:::return->getValue
CSS.LengthValue#getValue(float):::Returns the length (span) to use:::return->getValue
CSS.LengthValue#isPercentage():::Returns true if the length represents a percentage of the containing box.:::return
CSS.LengthValue#fromStyleConstants(StyleConstants, Object):::Converts a StyleConstants attribute value to a CSS attribute value:::v->new->LengthValue->value->toString->floatValue->return
CSS.LengthValue#toStyleConstants(StyleConstants, View):::Converts a CSS attribute value to a StyleConstants value:::return->Float->getValue->valueOf
CSS.ShorthandFontParser#parseShorthandFont(CSS, String, MutableAttributeSet):::Parses the shorthand font string value, placing the result in attr.:::strings->CSS->parseStrings->count->index->found->maxC->Math->min->while->if->isFontStyle->css->addInternalCSSValue->else->if->isFontVariant->css->addInternalCSSValue->else->if->isFontWeight->css->addInternalCSSValue->else->if->equals->else->break->if->css->addInternalCSSValue->if->css->addInternalCSSValue->if->css->addInternalCSSValue->if->fontSize->slashIndex->fontSize->indexOf->if->fontSize->substring->substring->else->css->addInternalCSSValue->else->css->addInternalCSSValue->if->startsWith->lineHeight->if->equals->if->else->substring->if->css->addInternalCSSValue->else->css->addInternalCSSValue->else->css->addInternalCSSValue->if->family->while->css->addInternalCSSValue->else->css->addInternalCSSValue
CSS.ShorthandBackgroundParser#parseShorthandBackground(CSS, String, MutableAttributeSet):::Parses the shorthand font string value, placing the result in attr.:::strings->parseStrings->count->index->found->while->string->if->isImage->css->addInternalCSSValue->else->if->isRepeat->css->addInternalCSSValue->else->if->isAttachment->css->addInternalCSSValue->else->if->isPosition->if->isPosition->css->addInternalCSSValue->else->css->addInternalCSSValue->else->if->isColor->css->addInternalCSSValue->if->css->addInternalCSSValue->if->css->addInternalCSSValue->if->css->addInternalCSSValue->if->css->addInternalCSSValue
CSS.ShorthandMarginParser#parseShorthandMargin(CSS, String, MutableAttributeSet, CSS.Attribute[]):::Parses the shorthand margin/padding/border string value, placing the result in attr:::strings->parseStrings->count->index->switch->return->for->counter->break->css->addInternalCSSValue->css->addInternalCSSValue->css->addInternalCSSValue->css->addInternalCSSValue->break->css->addInternalCSSValue->css->addInternalCSSValue->css->addInternalCSSValue->css->addInternalCSSValue->break->for->counter->break
CSS#calculateTiledRequirements(LayoutIterator, SizeRequirements):::Calculate the requirements needed to tile the requirements given by the iterator that would be tiled:::minimum->maximum->preferred->lastMargin->totalSpacing->n->iter->getCount->for->i->iter->getBorderWidth->if->new->SizeRequirements->return
CSS#calculateTiledLayout(LayoutIterator, int):::Calculate a tiled layout for the given iterator:::preferred->currentPreferred->lastMargin->totalSpacing->n->iter->getCount->adjustmentWeightsCount->gain->new->longArr->loss->new->longArr->for->i->for->i->iter->getBorderWidth->for->i->allocated->desiredAdjustment->adjustmentsArray->Math->abs->adjustmentLevel->for->adjustmentFactor->if->if->maximumAdjustment->totalOffset->iter->getBorderWidth->for->i->roundError->iter->getTrailingCollapseSpan->iter->getBorderWidth->adj->canAdjust->while->offsetAdjust->for->i
CSSBorder#getAdjustedColor(Color, double):::Return the color with brightness adjusted by the specified factor:::f->Math->Math->abs->min->inc->return->c->getRed->c->getGreen->c->getBlue->new->Color
CSSBorder.BorderPainter#paint(Polygon, Graphics, Color, int):::The painter should paint the border as if it were at the top and the coordinates of the NW corner of the interior area is (0, 0):::
CSSBorder.StrokePainter#paintStrokes(Rectangle, Graphics, int, int[], Color[]):::Paint strokes repeatedly using the given length and color patterns.:::xAxis->start->end->while->for->i
CSSBorder.ShadowLightPainter#getShadowColor(Color):::Return the "shadow" border side color.:::return->CSSBorder->getAdjustedColor
CSSBorder.ShadowLightPainter#getLightColor(Color):::Return the "light" border side color.:::return->CSSBorder->getAdjustedColor
CSSBorder#registerBorderPainter(Value, BorderPainter):::Add the specified painter to the painters map.:::borderPainters->put
CSSParser.CSSParserCallback#handleImport(String):::Called when an @import is encountered.:::
FormSubmitEvent#getMethod():::Gets the form method type.:::return
FormSubmitEvent#getData():::Gets the form submission data.:::return
FormView#createComponent():::Create the component:::attr->getElement->getAttributes->t->attr->getAttribute->c->model->attr->getAttribute->removeStaleListenerForModel->if->createInputComponent->else->if->if->list->new->JList<>->size->HTML->getIntegerAttributeValue->list->setVisibleRowCount->list->setSelectionModel->new->JScrollPane->else->tmp->new->JComboBox<>->else->if->area->new->JTextArea->rows->HTML->getIntegerAttributeValue->area->setRows->cols->HTML->getIntegerAttributeValue->area->setColumns->new->JScrollPane->if->c->setAlignmentY->return
FormView#getMaximumSpan(int):::Determines the maximum span for this view along an axis:::switch->if->super->getMaximumSpan->return->getPreferredSpan->return->super->getMaximumSpan->if->super->getMaximumSpan->return->getPreferredSpan->return->super->getMaximumSpan->break->return->super->getMaximumSpan
FormView#actionPerformed(ActionEvent):::Responsible for processing the ActionEvent:::element->getElement->dataBuffer->new->StringBuilder->doc->getDocument->attr->element->getAttributes->type->attr->getAttribute->if->type->equals->getFormData->dataBuffer->toString->submitData->else->if->type->equals->resetForm->else->if->type->equals->type->equals->if->isLastTextOrPasswordField->getFormData->dataBuffer->toString->submitData->else->getComponent->transferFocus
FormView#submitData(String):::This method is responsible for submitting the form data:::form->getFormElement->attrs->form->getAttributes->doc->form->getDocument->base->doc->getBase->target->attrs->getAttribute->if->method->attrs->getAttribute->if->method->toLowerCase->isPostMethod->method->equals->if->storePostData->action->attrs->getAttribute->actionURL->try->base->getProtocol->base->getHost->base->getPort->base->getFile->new->URL->new->URL->if->query->data->toString->new->URL->catch->finally->c->getContainer->kit->c->getEditorKit->formEvent->if->kit->isAutoFormSubmission->doc->isFrameDocument->methodType->new->FormSubmitEvent->fse->url->SwingUtilities->new->Runnable->invokeLater
FormView#imageSubmit(String):::This method is called to submit a form in response to a click on an image -- an &lt;INPUT&gt; form element of type "image".:::dataBuffer->new->StringBuilder->elem->getElement->hdoc->elem->getDocument->getFormData->if->dataBuffer->length->dataBuffer->append->dataBuffer->append->dataBuffer->toString->submitData->return
FormView#isLastTextOrPasswordField():::Iterates over the element hierarchy to determine if the element parameter, which is assumed to be an &lt;INPUT&gt; element of type password or text, is the last one of either kind, in the form to which it belongs.:::parent->getFormElement->elem->getElement->if->it->new->ElementIterator->next->found->while->it->next->if->else->if->isControl->elemAttr->next->getAttributes->if->HTMLDocument->matchNameAttribute->type->elemAttr->getAttribute->if->equals->equals->return->return
FormView#resetForm():::Resets the form to its initial state by reinitializing the models associated with each form element to their initial values:::parent->getFormElement->if->it->new->ElementIterator->next->while->it->next->if->isControl->elemAttr->next->getAttributes->m->elemAttr->getAttribute->if->doc->doc->reset->else->if->try->doc->doc->doc->getLength->remove->if->HTMLDocument->matchNameAttribute->value->elemAttr->getAttribute->if->doc->insertString->catch->finally->else->if->model->size->model->getSize->for->i->selectionRange->model->getInitialSelection->for->i->selectionRange->size->else->if->model->option->model->getInitialSelection->if->model->setSelectedItem->else->if->checked->elemAttr->getAttribute->model->model->setSelected
FrameSetView#layoutMajorAxis(int, int, int[], int[]):::Perform layout for the major axis of the box (i.e:::if->init->SizeRequirements->getChildRequests->calculateTiledPositions
FrameView#setParent(View):::Sets the parent view for the FrameView:::if->t->parent->getContainer->t->isEditable->super->setParent
FrameView#paint(Graphics, Shape):::Also determines if the FrameView should be editable or not based on whether the JTextComponent that contains it is editable:::host->getContainer->if->htmlPane->isEditable->isEditable->isEditable->htmlPane->setEditable->super->paint
FrameView#getOutermostJEditorPane():::Finds the outermost FrameSetView:::parent->getParent->frameSetView->while->if->parent->getParent->if->return->frameSetView->getContainer->return
FrameView#hyperlinkUpdate(HyperlinkEvent):::Notification of a change relative to a hyperlink:::c->getOutermostJEditorPane->if->return->if->c->fireHyperlinkUpdate->return->e->if->e->getEventType->target->e->getTarget->postTarget->if->target->equals->inNestedFrameSet->if->kit->c->getEditorKit->if->kit->isAutoFormSubmission->if->target->equals->try->movePostData->c->e->getURL->setPage->catch->finally->else->doc->c->getDocument->doc->processHTMLFrameHyperlinkEvent->else->c->fireHyperlinkUpdate->return->if->target->equals->try->c->e->getURL->setPage->catch->finally->if->c->isEditable->c->e->getEventType->e->getURL->e->getDescription->getElement->e->getInputEvent->new->HTMLFrameHyperlinkEvent->fireHyperlinkUpdate
FrameView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for:::elem->getElement->attributes->elem->getAttributes->oldPage->srcAtt->attributes->getAttribute->base->elem->getDocument->getBase->try->if->return->postData->movePostData->new->URL->if->oldPage->equals->src->getRef->return->htmlPane->setPage->newDoc->htmlPane->getDocument->if->setFrameDocumentState->catch->finally
FrameView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::return
FrameView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return
HiddenTagView#setTextFromModel():::This resets the text on the text component we created to match that of the AttributeSet for the Element we represent:::if->SwingUtilities->isEventDispatchThread->_setTextFromModel->else->SwingUtilities->new->Runnable->invokeLater
HiddenTagView#_setTextFromModel():::This resets the text on the text component we created to match that of the AttributeSet for the Element we represent.:::doc->getDocument->try->if->readLock->text->getTextComponent->if->text->getRepresentedText->setText->resetBorder->host->getContainer->if->preferenceChanged->host->repaint->catch->finally->if->readUnlock
HiddenTagView#updateModelFromText():::This copies the text from the text component we've created to the Element's AttributeSet we represent:::if->if->SwingUtilities->isEventDispatchThread->_updateModelFromText->else->SwingUtilities->new->Runnable->invokeLater
HiddenTagView#_updateModelFromText():::This copies the text from the text component we've created to the Element's AttributeSet we represent.:::doc->getDocument->name->getElement->getAttributes->getAttribute->if->sas->new->SimpleAttributeSet->textComponent->getTextComponent->if->text->textComponent->getText->try->sas->new->HTML.UnknownTag->addAttribute->getStartOffset->getEndOffset->getStartOffset->setCharacterAttributes->catch->finally
HRuleView#setPropertiesFromAttributes():::Update any cached values that come from attributes.:::sheet->getDocument->getStyleSheet->eAttr->getElement->getAttributes->sheet->getViewAttributes->if->if->attr->getAttribute->StyleConstants->getAlignment->eAttr->getAttribute->value->eAttr->getAttribute->if->try->Integer->parseInt->catch->finally->attr->getAttribute->if->getLength->getLength->getLength->getLength->else->Math->max
HRuleView#paint(Graphics, Shape):::Paints the view.:::alloc->a->getBounds->x->y->width->if->widthValue->getValue->height->if->switch->break->break->break->if->g->setColor->g->fillRect->else->bg->getContainer->getBackground->bottom->top->if->bg->equals->else->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine
HRuleView#getPreferredSpan(int):::Calculates the desired shape of the rule..:::switch->return->if->return->else->if->return->else->return->throw->new->IllegalArgumentException
HRuleView#getResizeWeight(int):::Gets the resize weight for the axis:::if->return->else->if->return->else->return
HRuleView#getBreakWeight(int, float, float):::Determines how attractive a break opportunity in this view is:::if->return->return
HRuleView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::p0->getStartOffset->p1->getEndOffset->if->r->a->getBounds->if->return->return
HRuleView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->if->return->getStartOffset->return->getEndOffset
HRuleView#getAttributes():::Fetches the attributes to use when rendering:::return
HTML.Tag#isBlock():::Returns true if this tag is a block tag, which is a tag used to add structure to a document.:::return
HTML.Tag#breaksFlow():::Returns true if this tag causes a line break to the flow of data, otherwise returns false.:::return
HTML.Tag#isPreformatted():::Returns true if this tag is pre-formatted, which is true if the tag is either PRE or TEXTAREA.:::return
HTML.Tag#toString():::Returns the string representation of the tag.:::return
HTML.Tag#isParagraph():::Returns true if this tag is considered to be a paragraph in the internal HTML model:::return
HTML.UnknownTag#hashCode():::Returns the hash code which corresponds to the string for this tag.:::return->toString->hashCode
HTML.UnknownTag#equals(Object):::Compares this object to the specified object:::if->return->toString->obj->toString->equals->return
HTML.Attribute#toString():::Returns the string representation of this attribute.:::return
HTML#getAllTags():::Returns the set of actual HTML tags that are recognized by the default HTML reader:::tags->new->TagArr->System->arraycopy->return
HTML#getTag(String):::Fetches a tag constant for a well-known tag name (i.e:::t->tagHashtable->get->return
HTML#getTagForStyleConstantsKey(StyleConstants):::Returns the HTML Tag associated with the StyleConstants key sc:::return->scMapping->get
HTML#getIntegerAttributeValue(AttributeSet, Attribute, int):::Fetches an integer attribute value:::value->istr->attr->getAttribute->if->try->Integer->valueOf->intValue->catch->finally->return
HTML#getAllAttributeKeys():::Returns the set of HTML attributes recognized.:::attributes->new->AttributeArr->System->arraycopy->return
HTML#getAttributeKey(String):::Fetches an attribute constant for a well-known attribute name (i.e:::a->attHashtable->get->if->return->return
HTMLDocument#getReader(int):::Fetches the reader for the parser to use when loading the document with HTML:::desc->getProperty->if->setBase->reader->new->HTMLReader->return
HTMLDocument#getReader(int, int, int, HTML.Tag):::Returns the reader for the parser to use to load the document with HTML:::return->getReader
HTMLDocument#getReader(int, int, int, HTML.Tag, boolean):::Fetches the reader for the parser to use to load the document with HTML:::desc->getProperty->if->setBase->reader->new->HTMLReader->return
HTMLDocument#getBase():::Returns the location to resolve relative URLs against:::return
HTMLDocument#setBase(URL):::Sets the location to resolve relative URLs against:::getStyleSheet->setBase
HTMLDocument#insert(int, ElementSpec[]):::Inserts new elements in bulk:::super->insert
HTMLDocument#insertUpdate(DefaultDocumentEvent, AttributeSet):::Updates document structure as a result of text insertion:::if->else->if->attr->isDefined->addAttributes->if->attr->isDefined->removeAttribute->super->insertUpdate
HTMLDocument#create(ElementSpec[]):::Replaces the contents of the document with the given element specifications:::super->create
HTMLDocument#setParagraphAttributes(int, int, AttributeSet, boolean):::Sets attributes for a paragraph:::try->writeLock->end->Math->getLength->min->e->getParagraphElement->e->getStartOffset->getParagraphElement->Math->e->getEndOffset->max->changes->new->DefaultDocumentEvent->sCopy->s->copyAttributes->lastEnd->for->pos->changes->end->fireChangedUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->finally->writeUnlock
HTMLDocument#getStyleSheet():::Fetches the StyleSheet with the document-specific display rules (CSS) that were specified in the HTML document itself.:::return->getAttributeContext
HTMLDocument#getIterator(HTML.Tag):::Fetches an iterator for the specified HTML tag:::if->t->isBlock->return->return->new->LeafIterator
HTMLDocument#createLeafElement(Element, AttributeSet, int, int):::Creates a document leaf element that directly represents text (doesn't have any children):::return->new->RunElement
HTMLDocument#createBranchElement(Element, AttributeSet):::Creates a document branch element, that can contain other elements:::return->new->BlockElement
HTMLDocument#createDefaultRoot():::Creates the root element to be used to represent the default document structure.:::writeLock->a->new->SimpleAttributeSet->a->addAttribute->html->a->copyAttributes->new->BlockElement->a->removeAttributes->a->addAttribute->body->a->copyAttributes->new->BlockElement->a->removeAttributes->a->addAttribute->getStyleSheet->addCSSAttributeFromHTML->paragraph->a->copyAttributes->new->BlockElement->a->removeAttributes->a->addAttribute->brk->new->RunElement->buff->new->ElementArr->paragraph->replace->body->replace->html->replace->writeUnlock->return
HTMLDocument#setTokenThreshold(int):::Sets the number of tokens to buffer before trying to update the documents element structure.:::putProperty
HTMLDocument#getTokenThreshold():::Gets the number of tokens to buffer before trying to update the documents element structure:::i->getProperty->if->return->i->intValue->return
HTMLDocument#setPreservesUnknownTags(boolean):::Determines how unknown tags are handled by the parser:::
HTMLDocument#getPreservesUnknownTags():::Returns the behavior the parser observes when encountering unknown tags.:::return
HTMLDocument#processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent):::Processes HyperlinkEvents that are generated by documents in an HTML frame:::frameName->e->getTarget->element->e->getSourceElement->urlStr->e->getURL->toString->if->frameName->equals->updateFrame->else->if->frameName->equals->element->getParentElement->updateFrameSet->else->targetElement->findFrame->if->updateFrame
HTMLDocument#matchNameAttribute(AttributeSet, HTML.Tag):::Returns true if StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter.:::o->attr->getAttribute->if->name->if->return->return
HTMLDocument#isFrameDocument():::Returns true if the document will be viewed in a frame.:::return
HTMLDocument#setFrameDocumentState(boolean):::Sets a boolean state about whether the document will be viewed in a frame.:::
HTMLDocument#addMap(Map):::Adds the specified map, this will remove a Map that has been previously registered with the same name.:::name->map->getName->if->maps->getProperty->if->new->Hashtable<>->putProperty->if->tmp->tmp->put
HTMLDocument#removeMap(Map):::Removes a previously registered map.:::name->map->getName->if->maps->getProperty->if->remove
HTMLDocument#getMap(String):::Returns the Map associated with the given name.:::if->maps->getProperty->if->return->get->return
HTMLDocument#getMaps():::Returns an Enumeration of the possible Maps.:::maps->getProperty->if->tmp->return->tmp->elements->return
HTMLDocument#setParser(HTMLEditorKit.Parser):::Sets the parser that is used by the methods that insert html into the existing document, such as setInnerHTML, and setOuterHTML:::putProperty
HTMLDocument#getParser():::Returns the parser that is used when inserting HTML into the existing document.:::p->getProperty->if->return->return
HTMLDocument#setInnerHTML(Element, String):::Replaces the children of the given element with the contents specified as an HTML string:::verifyParser->if->elem->isLeaf->throw->new->IllegalArgumentException->if->oldCount->elem->getElementCount->insertPosition->elem->getStartOffset->elem->getStartOffset->insertHTML->if->elem->getElementCount->elem->getElementCount->removeElements
HTMLDocument#setOuterHTML(Element, String):::Replaces the given element in the parent with the contents specified as an HTML string:::verifyParser->if->elem->getParentElement->start->elem->getStartOffset->end->elem->getEndOffset->startLength->getLength->wantsNewline->elem->isLeaf->if->getText->charAt->parent->elem->getParentElement->oldCount->parent->getElementCount->insertHTML->newLength->getLength->if->parent->getElementCount->removeIndex->parent->getElementIndex->removeElements
HTMLDocument#insertAfterStart(Element, String):::Inserts the HTML specified as a string at the start of the element:::verifyParser->if->return->if->elem->isLeaf->throw->new->IllegalArgumentException->elem->getStartOffset->insertHTML
HTMLDocument#insertBeforeEnd(Element, String):::Inserts the HTML specified as a string at the end of the element:::verifyParser->if->elem->isLeaf->throw->new->IllegalArgumentException->if->offset->elem->getEndOffset->if->elem->elem->getElementIndex->getElement->isLeaf->getText->charAt->insertHTML
HTMLDocument#insertBeforeStart(Element, String):::Inserts the HTML specified as a string before the start of the given element:::verifyParser->if->parent->elem->getParentElement->if->elem->getStartOffset->insertHTML
HTMLDocument#insertAfterEnd(Element, String):::Inserts the HTML specified as a string after the end of the given element:::verifyParser->if->parent->elem->getParentElement->if->if->parent->getName->equals->offset->elem->getEndOffset->if->getLength->else->if->elem->isLeaf->getText->charAt->insertHTML->if
HTMLDocument#getElement(String):::Returns the element that has the given id Attribute:::if->return->return->getDefaultRootElement->getElement
HTMLDocument#getElement(Element, Object, Object):::Returns the child element of e that contains the attribute, attribute with value value, or null if one isn't found:::return->getElement
HTMLDocument#fireChangedUpdate(DocumentEvent):::Notifies all listeners that have registered interest for notification on this event type:::super->fireChangedUpdate
HTMLDocument#fireUndoableEditUpdate(UndoableEditEvent):::Notifies all listeners that have registered interest for notification on this event type:::super->fireUndoableEditUpdate
HTMLDocument.Iterator#getAttributes():::Return the attributes for this tag.:::
HTMLDocument.Iterator#getStartOffset():::Returns the start of the range for which the current occurrence of the tag is defined and has the same attributes.:::
HTMLDocument.Iterator#getEndOffset():::Returns the end of the range for which the current occurrence of the tag is defined and has the same attributes.:::
HTMLDocument.Iterator#next():::Move the iterator forward to the next occurrence of the tag it represents.:::
HTMLDocument.Iterator#isValid():::Indicates if the iterator is currently representing an occurrence of a tag:::
HTMLDocument.Iterator#getTag():::Type of tag this iterator represents.:::
HTMLDocument.LeafIterator#getAttributes():::Returns the attributes for this tag.:::elem->pos->current->if->a->elem->getAttributes->getAttribute->if->elem->getAttributes->return->return
HTMLDocument.LeafIterator#getStartOffset():::Returns the start of the range for which the current occurrence of the tag is defined and has the same attributes.:::elem->pos->current->if->return->elem->getStartOffset->return
HTMLDocument.LeafIterator#getEndOffset():::Returns the end of the range for which the current occurrence of the tag is defined and has the same attributes.:::return
HTMLDocument.LeafIterator#next():::Moves the iterator forward to the next occurrence of the tag it represents.:::for->nextLeaf->isValid->nextLeaf
HTMLDocument.LeafIterator#getTag():::Returns the type of tag this iterator represents.:::return
HTMLDocument.LeafIterator#isValid():::Returns true if the current position is not null.:::return->pos->current
HTMLDocument.LeafIterator#nextLeaf(ElementIterator):::Moves the given iterator to the next leaf element.:::for->iter->next->iter->current->iter->next
HTMLDocument.LeafIterator#setEndOffset():::Marches a cloned iterator forward to locate the end of the run:::a0->getAttributes->pos->current->getEndOffset->fwd->pos->clone->for->nextLeaf->fwd->current->nextLeaf
HTMLDocument.HTMLReader#flush():::The last method called on the reader:::if->if->HTMLDocument.this->getLength->parseBuffer->size->flushBuffer->adjustEndElement->else->flushBuffer
HTMLDocument.HTMLReader#handleText(char[], int):::Called by the parser to indicate a block of text was encountered.:::if->return->if->HTMLDocument.this->getProperty->equals->d->getProperty->if->d->equals->HTMLDocument.this->putProperty->else->if->SwingUtilities2->isComplexLayout->HTMLDocument.this->putProperty->if->textAreaContent->else->if->preContent->else->if->new->String->putProperty->else->if->option->new->String->setLabel->else->if->if->styles->new->String->addElement->else->if->if->foundInsertTag->if->addContent
HTMLDocument.HTMLReader#handleStartTag(HTML.Tag, MutableAttributeSet, int):::Callback from the parser:::if->return->if->if->return->if->if->a->isDefined->decl->a->getAttribute->a->removeAttribute->getStyleSheet->getDeclaration->a->addAttributes->else->action->tagMap->get->if->action->start
HTMLDocument.HTMLReader#handleEndTag(HTML.Tag, int):::Callback from the parser:::if->return->if->if->if->action->tagMap->get->if->action->end
HTMLDocument.HTMLReader#handleSimpleTag(HTML.Tag, MutableAttributeSet, int):::Callback from the parser:::if->return->if->a->isDefined->decl->a->getAttribute->a->removeAttribute->getStyleSheet->getDeclaration->a->addAttributes->else->action->tagMap->get->if->action->start->action->end->else->if->getPreservesUnknownTags->addSpecialElement
HTMLDocument.HTMLReader#handleEndOfLineString(String):::This is invoked after the stream has been parsed, but before flush:::if->putProperty
HTMLDocument.HTMLReader#registerTag(HTML.Tag, TagAction):::Registers a handler for the given tag:::tagMap->put
HTMLDocument.HTMLReader.TagAction#start(HTML.Tag, MutableAttributeSet):::Called when a start tag is seen for the type of tag this action was registered to:::
HTMLDocument.HTMLReader.TagAction#end(HTML.Tag):::Called when an end tag is seen for the type of tag this action was registered to:::
HTMLDocument.HTMLReader#pushCharacterStyle():::Pushes the current character style on a stack in preparation for forming a new nested character style.:::charAttrStack->charAttr->copyAttributes->push
HTMLDocument.HTMLReader#popCharacterStyle():::Pops a previously pushed character style off the stack to return to a previous style.:::if->charAttrStack->empty->charAttrStack->peek->charAttrStack->pop
HTMLDocument.HTMLReader#textAreaContent(char[]):::Adds the given content to the textarea document:::try->textAreaDocument->textAreaDocument->getLength->new->String->insertString->catch->finally
HTMLDocument.HTMLReader#preContent(char[]):::Adds the given content that was encountered in a PRE element:::last->for->i->if->addContent
HTMLDocument.HTMLReader#blockOpen(HTML.Tag, MutableAttributeSet):::Adds an instruction to the parse buffer to create a block element with the given attributes.:::if->blockClose->if->canInsertTag->return->if->attr->isDefined->attr->removeAttribute->attr->addAttribute->es->attr->copyAttributes->new->ElementSpec->parseBuffer->addElement
HTMLDocument.HTMLReader#blockClose(HTML.Tag):::Adds an instruction to the parse buffer to close out a block element of the given type.:::if->return->if->pushCharacterStyle->charAttr->addAttribute->addContent->popCharacterStyle->if->if->blockClose->prev->parseBuffer->size->parseBuffer->lastElement->if->prev->getType->one->new->charArr->addContent->es->new->ElementSpec->parseBuffer->addElement
HTMLDocument.HTMLReader#addContent(char[], int, int):::Adds some text with the current character attributes.:::addContent
HTMLDocument.HTMLReader#addContent(char[], int, int, boolean):::Adds some text with the current character attributes.:::if->return->if->new->SimpleAttributeSet->blockOpen->charAttr->addAttribute->a->charAttr->copyAttributes->es->new->ElementSpec->parseBuffer->addElement->if->parseBuffer->size->if->try->flushBuffer->catch->finally->if
HTMLDocument.HTMLReader#addSpecialElement(HTML.Tag, MutableAttributeSet):::Adds content that is basically specified entirely in the attribute set.:::if->new->SimpleAttributeSet->blockOpen->if->t->isBlock->canInsertTag->return->if->a->isDefined->a->removeAttribute->a->addAttributes->a->addAttribute->one->new->charArr->es->a->copyAttributes->new->ElementSpec->parseBuffer->addElement->if
HTMLDocument.HTMLReader#flushBuffer(boolean):::Flushes the current parse buffer into the document.:::oldLength->HTMLDocument.this->getLength->size->parseBuffer->size->if->adjustEndSpecsForPartialInsert->parseBuffer->size->spec->new->ElementSpecArr->parseBuffer->copyInto->if->create->else->insert->parseBuffer->removeAllElements->HTMLDocument.this->getLength
HTMLDocument.HTMLReader#addCSSRules(String):::Adds the CSS rules in rules.:::ss->getStyleSheet->ss->addRule
HTMLDocument.HTMLReader#linkCSSStyleSheet(String):::Adds the CSS stylesheet at href to the known list of stylesheets.:::url->try->new->URL->catch->try->new->URL->catch->finally->finally->if->getStyleSheet->importStyleSheet
HTMLDocument.RunElement#getName():::Gets the name of the element.:::o->getAttribute->if->return->o->toString->return->super->getName
HTMLDocument.RunElement#getResolveParent():::Gets the resolving parent:::return
HTMLDocument.BlockElement#getName():::Gets the name of the element.:::o->getAttribute->if->return->o->toString->return->super->getName
HTMLDocument.BlockElement#getResolveParent():::Gets the resolving parent:::return
HTMLEditorKit#getContentType():::Get the MIME type of the data that this kit represents support for:::return
HTMLEditorKit#getViewFactory():::Fetch a factory that is suitable for producing views of any models that are produced by this kit.:::return
HTMLEditorKit#createDefaultDocument():::Create an uninitialized text storage model that is appropriate for this type of editor.:::styles->getStyleSheet->ss->new->StyleSheet->ss->addStyleSheet->doc->new->HTMLDocument->doc->getParser->setParser->doc->setAsynchronousLoadPriority->doc->setTokenThreshold->return
HTMLEditorKit#read(Reader, Document, int):::Inserts content from the given stream:::if->hdoc->if->doc->getLength->throw->new->BadLocationException->p->ensureParser->receiver->hdoc->getReader->ignoreCharset->doc->getProperty->p->ignoreCharset->booleanValue->parse->receiver->flush->else->super->read
HTMLEditorKit#insertHTML(HTMLDocument, int, String, int, int, HTML.Tag):::Inserts HTML into an existing document.:::if->doc->getLength->throw->new->BadLocationException->p->ensureParser->receiver->doc->getReader->ignoreCharset->doc->getProperty->p->new->StringReader->ignoreCharset->booleanValue->parse->receiver->flush
HTMLEditorKit#write(Writer, Document, int, int):::Write content from a document to the given stream in a format appropriate for this kind of content handler.:::if->w->new->HTMLWriter->w->write->else->if->w->new->MinimalHTMLWriter->w->write->else->super->write
HTMLEditorKit#install(JEditorPane):::Called when the kit is being installed into the a JEditorPane.:::c->addMouseListener->c->addMouseMotionListener->c->addCaretListener->super->install
HTMLEditorKit#deinstall(JEditorPane):::Called when the kit is being removed from the JEditorPane:::c->removeMouseListener->c->removeMouseMotionListener->c->removeCaretListener->super->deinstall
HTMLEditorKit#setStyleSheet(StyleSheet):::Set the set of styles to be used to render the various HTML elements:::if->AppContext->getAppContext->remove->else->AppContext->getAppContext->put
HTMLEditorKit#getStyleSheet():::Get the set of styles currently being used to render the HTML elements:::appContext->AppContext->getAppContext->defaultStyles->appContext->get->if->new->StyleSheet->appContext->put->try->is->HTMLEditorKit->getResourceAsStream->r->new->InputStreamReader->new->BufferedReader->defaultStyles->loadRules->r->close->catch->finally->return
HTMLEditorKit#getResourceAsStream(String):::Fetch a resource relative to the HTMLEditorKit classfile:::return->AccessController->new->PrivilegedAction<InputStream>->doPrivileged
HTMLEditorKit#getActions():::Fetches the command list for the editor:::return->TextAction->super->getActions->augmentList
HTMLEditorKit#createInputAttributes(Element, MutableAttributeSet):::Copies the key/values in elements AttributeSet into set:::set->removeAttributes->set->element->getAttributes->addAttributes->set->removeAttribute->o->set->getAttribute->if->tag->if->set->removeAttribute->set->removeAttribute->set->removeAttribute->set->addAttribute->else->if->set->addAttribute->else->if->set->addAttribute->set->removeAttribute->else->if->set->addAttribute->set->removeAttribute->else->if->set->addAttribute->set->removeAttribute
HTMLEditorKit#getInputAttributes():::Gets the input attributes used for the styled editing actions.:::if->getStyleSheet->addStyle->return
HTMLEditorKit#setDefaultCursor(Cursor):::Sets the default cursor.:::
HTMLEditorKit#getDefaultCursor():::Returns the default cursor.:::return
HTMLEditorKit#setLinkCursor(Cursor):::Sets the cursor to use over links.:::
HTMLEditorKit#getLinkCursor():::Returns the cursor to use over hyper links.:::return
HTMLEditorKit#isAutoFormSubmission():::Indicates whether an html form submission is processed automatically or only FormSubmitEvent is fired.:::return
HTMLEditorKit#setAutoFormSubmission(boolean):::Specifies if an html form submission is processed automatically or only FormSubmitEvent is fired:::
HTMLEditorKit#clone():::Creates a copy of the editor kit.:::o->super->clone->if->new->LinkController->return
HTMLEditorKit#getParser():::Fetch the parser to use for reading HTML streams:::if->new->ParserDelegator->return
HTMLEditorKit#getAccessibleContext():::returns the AccessibleContext associated with this editor kit:::if->return->if->a->new->AccessibleHTML->a->getAccessibleContext->return
HTMLEditorKit.LinkController#mouseClicked(MouseEvent):::Called for a mouse click event:::editor->e->getSource->if->editor->isEditable->editor->isEnabled->SwingUtilities->isLeftMouseButton->pt->e->getX->e->getY->new->Point->pos->editor->viewToModel->if->activateLink
HTMLEditorKit.LinkController#activateLink(int, JEditorPane):::Calls linkActivated on the associated JEditorPane if the given position represents a link.This is implemented to forward to the method with the same name, but with the following args both == -1.:::activateLink
HTMLEditorKit.LinkController#activateLink(int, JEditorPane, MouseEvent):::Calls linkActivated on the associated JEditorPane if the given position represents a link:::doc->html->getDocument->if->hdoc->e->hdoc->getCharacterElement->a->e->getAttributes->anchor->a->getAttribute->linkEvent->description->x->y->if->mouseEvent->getX->mouseEvent->getY->if->getMapHREF->else->anchor->getAttribute->if->createHyperlinkEvent->if->html->fireHyperlinkUpdate
HTMLEditorKit.LinkController#createHyperlinkEvent(JEditorPane, HTMLDocument, String, AttributeSet, Element, MouseEvent):::Creates and returns a new instance of HyperlinkEvent:::u->try->base->hdoc->getBase->new->URL->if->u->getProtocol->equals->href->startsWith->baseFile->base->getFile->newFile->u->getFile->if->newFile->startsWith->new->URL->catch->finally->linkEvent->if->hdoc->isFrameDocument->new->HyperlinkEvent->else->target->anchor->getAttribute->if->target->equals->hdoc->getBaseTarget->if->target->equals->new->HTMLFrameHyperlinkEvent->return
HTMLEditorKit.Parser#parse(Reader, ParserCallback, boolean):::Parse the given stream and drive the given callback with the results of the parse:::
HTMLEditorKit.ParserCallback#flush():::The last method called on the reader:::
HTMLEditorKit.ParserCallback#handleText(char[], int):::Called by the parser to indicate a block of text was encountered.:::
HTMLEditorKit.ParserCallback#handleComment(char[], int):::Called by the parser to indicate a block of comment was encountered.:::
HTMLEditorKit.ParserCallback#handleStartTag(HTML.Tag, MutableAttributeSet, int):::Callback from the parser:::
HTMLEditorKit.ParserCallback#handleEndTag(HTML.Tag, int):::Callback from the parser:::
HTMLEditorKit.ParserCallback#handleSimpleTag(HTML.Tag, MutableAttributeSet, int):::Callback from the parser:::
HTMLEditorKit.ParserCallback#handleError(String, int):::Callback from the parser:::
HTMLEditorKit.ParserCallback#handleEndOfLineString(String):::This is invoked after the stream has been parsed, but before flush:::
HTMLEditorKit.HTMLFactory#create(Element):::Creates a view from an element.:::attrs->elem->getAttributes->elementName->attrs->getAttribute->o->attrs->getAttribute->if->kind->if->return->new->InlineView->else->if->ws->elem->getAttributes->getAttribute->if->ws->equals->return->new->LineView->return->new->javax.swing.text.html.ParagraphView->else->if->return->new->javax.swing.text.html.ParagraphView->else->if->return->new->ListView->else->if->return->new->BodyBlockView->else->if->return->new->BlockView->else->if->return->new->BlockView->else->if->return->new->NoFramesView->else->if->return->new->ImageView->else->if->return->new->IsindexView->else->if->return->new->HRuleView->else->if->return->new->BRView->else->if->return->new->javax.swing.text.html.TableView->else->if->return->new->FormView->else->if->return->new->ObjectView->else->if->if->elem->getAttributes->isDefined->return->new->FrameSetView->else->if->elem->getAttributes->isDefined->return->new->FrameSetView->throw->new->RuntimeException->else->if->return->new->FrameView->else->if->return->new->HiddenTagView->else->if->return->new->CommentView->else->if->return->new->BlockView->else->if->return->new->HiddenTagView->nm->elem->getName->if->if->nm->equals->return->new->LabelView->else->if->nm->equals->return->new->ParagraphView->else->if->nm->equals->return->new->BoxView->else->if->nm->equals->return->new->ComponentView->else->if->nm->equals->return->new->IconView->return->new->LabelView
HTMLEditorKit.HTMLTextAction#getElementsAt(HTMLDocument, int):::Returns an array of the Elements that contain offset:::return->doc->getDefaultRootElement->getElementsAt
HTMLEditorKit.HTMLTextAction#elementCountToTag(HTMLDocument, int, HTML.Tag):::Returns number of elements, starting at the deepest leaf, needed to get to an element representing tag:::depth->e->doc->getCharacterElement->while->e->getAttributes->getAttribute->e->getParentElement->if->return->return
HTMLEditorKit.HTMLTextAction#findElementMatchingTag(HTMLDocument, int, HTML.Tag):::Returns the deepest element at offset matching tag.:::e->doc->getDefaultRootElement->lastMatch->while->if->e->getAttributes->getAttribute->e->e->getElementIndex->getElement->return
HTMLEditorKit.InsertHTMLTextAction#insertHTML(JEditorPane, HTMLDocument, int, String, int, int, HTML.Tag):::A cover for HTMLEditorKit.insertHTML:::try->getHTMLEditorKit->insertHTML->catch->throw->new->RuntimeException->throw->new->RuntimeException->finally
HTMLEditorKit.InsertHTMLTextAction#insertAtBoundary(JEditorPane, HTMLDocument, int, Element, String, HTML.Tag, HTML.Tag):::This is invoked when inserting at a boundary:::insertAtBoundry
HTMLEditorKit.InsertHTMLTextAction#insertAtBoundry(JEditorPane, HTMLDocument, int, Element, String, HTML.Tag, HTML.Tag):::This is invoked when inserting at a boundary:::e->commonParent->isFirst->if->doc->getDefaultRootElement->while->e->getStartOffset->e->isLeaf->e->e->getElementIndex->getElement->e->getParentElement->else->if->pops->pushes->if->while->e->isLeaf->e->e->getElementIndex->getElement->else->while->e->isLeaf->e->e->getElementIndex->getElement->while->e->e->getElementIndex->getElement->Math->max->insertHTML
HTMLEditorKit.InsertHTMLTextAction#actionPerformed(ActionEvent):::Inserts the HTML into the document.:::editor->getEditor->if->doc->getHTMLDocument->offset->editor->getSelectionStart->length->doc->getLength->inserted->if->insertIntoTag->insertIntoTag->else->if->adjustSelection
HTMLEditorKit.InsertHRAction#actionPerformed(ActionEvent):::Inserts the HTML into the document.:::editor->getEditor->if->doc->getHTMLDocument->offset->editor->getSelectionStart->paragraph->doc->getParagraphElement->if->paragraph->getParentElement->paragraph->getParentElement->getAttributes->getAttribute->super->actionPerformed
HTMLEditorKit.NavigateLinkAction#caretUpdate(CaretEvent):::Called when the caret position is updated.:::src->e->getSource->if->comp->kit->getHTMLEditorKit->if->comp->getAccessibleContext->Integer->valueOf->Integer->e->getDot->valueOf->firePropertyChange
HTMLEditorKit.NavigateLinkAction.FocusHighlightPainter#paintLayer(Graphics, int, int, Shape, JTextComponent, View):::Paints a portion of a highlight.:::color->getColor->if->g->c->getSelectionColor->setColor->else->g->setColor->if->view->getStartOffset->view->getEndOffset->alloc->if->else->bounds->getBounds->g->drawRect->return->else->try->shape->view->modelToView->r->shape->getBounds->g->drawRect->return->catch->finally->return
HTMLEditorKit.BeginAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->bodyStart->getBodyElementStart->if->if->target->moveCaretPosition->else->target->setCaretPosition
HTMLFrameHyperlinkEvent#getTarget():::returns the target for the link.:::return
HTMLWriter#write():::Iterates over the Element tree and controls the writing out of all the tags and its attributes.:::it->getElementIterator->current->next->setCurrentLineLength->setCanWrapLines->if->new->Segment->forcedBody->while->it->next->if->inRange->if->next->getAttributes->getAttribute->else->continue->if->if->indentNeedsIncrementing->incrIndent->else->if->current->getParentElement->next->getParentElement->top->blockElementStack->peek->while->next->getParentElement->blockElementStack->pop->if->synthesizedElement->attrs->top->getAttributes->if->matchNameAttribute->isFormElementWithContent->isPreTagWithParagraphTag->decrIndent->endTag->blockElementStack->peek->else->if->current->getParentElement->next->getParentElement->top->blockElementStack->peek->if->blockElementStack->pop->endTag->if->next->isLeaf->next->getAttributes->isFormElementWithContent->blockElementStack->push->startTag->else->emptyTag->closeOutUnwantedEmbeddedTags->if->blockElementStack->pop->endTag->while->blockElementStack->empty->blockElementStack->pop->if->synthesizedElement->attrs->current->getAttributes->if->matchNameAttribute->isFormElementWithContent->isPreTagWithParagraphTag->decrIndent->endTag->if->writeAdditionalComments
HTMLWriter#writeAttributes(AttributeSet):::Writes out the attribute set:::convAttr->removeAttributes->convertToHTML32->names->convAttr->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->if->continue->convAttr->getAttribute->write
HTMLWriter#emptyTag(Element):::Writes out all empty elements (all tags that have no corresponding end tag).:::if->indentSmart->attr->elem->getAttributes->closeOutUnwantedEmbeddedTags->writeEmbeddedTags->if->matchNameAttribute->text->else->if->matchNameAttribute->comment->else->isBlock->elem->getAttributes->isBlockTag->if->writeLineSeparator->indentSmart->nameTag->attr->getAttribute->endTag->attr->getAttribute->outputEndTag->if->endTag->equals->if->matchNameAttribute->if->getDocument->getStyleSheet->writeStyles->write->if->write->elem->getName->write->writeAttributes->write->if->matchNameAttribute->doc->elem->getDocument->title->doc->getProperty->write->else->if->writeLineSeparator->if->indentSmart
HTMLWriter#isBlockTag(AttributeSet):::Determines if the HTML.Tag associated with the element is a block tag.:::o->attr->getAttribute->if->name->return->name->isBlock->return
HTMLWriter#startTag(Element):::Writes out a start tag for the element:::if->synthesizedElement->return->attr->elem->getAttributes->nameAttribute->attr->getAttribute->name->if->else->if->elem->getEndOffset->closeOutUnwantedEmbeddedTags->if->writeLineSeparator->if->indentSmart->write->writeLineSeparator->incrIndent->getDocument->getStyleSheet->writeStyles->decrIndent->writeLineSeparator->indentSmart->write->writeLineSeparator->indentSmart->write->elem->getName->write->writeAttributes->write->if->writeLineSeparator->if->elem->getAttributes->textAreaContent->else->if->elem->getAttributes->selectContent->else->if->getDocument->getMaps->writeMaps->else->if->document->getDocument->incrIndent->document->getStyleSheet->writeStyles->if->document->hasBaseTag->indentSmart->document->getBase->write->writeLineSeparator->decrIndent
HTMLWriter#textAreaContent(AttributeSet):::Writes out text that is contained in a TEXTAREA form element.:::doc->attr->getAttribute->if->doc->getLength->if->new->Segment->doc->doc->getLength->getText->if->incrIndent->indentSmart->setCanWrapLines->write->setCanWrapLines->writeLineSeparator->decrIndent
HTMLWriter#text(Element):::Writes out text:::start->Math->getStartOffset->elem->getStartOffset->max->end->Math->getEndOffset->elem->getEndOffset->min->if->if->new->Segment->getDocument->getText->if->if->if->if->else->return->setCanWrapLines->write->setCanWrapLines
HTMLWriter#selectContent(AttributeSet):::Writes out the content of the SELECT form element.:::model->attr->getAttribute->incrIndent->if->listModel->size->listModel->getSize->for->i->else->if->comboBoxModel->size->comboBoxModel->getSize->for->i->decrIndent
HTMLWriter#writeOption(Option):::Writes out the content of the Option form element.:::indentSmart->write->write->value->option->getAttributes->getAttribute->if->write->if->option->isSelected->write->write->if->option->getLabel->option->getLabel->write->writeLineSeparator
HTMLWriter#endTag(Element):::Writes out an end tag for the element.:::if->synthesizedElement->return->elem->getAttributes->closeOutUnwantedEmbeddedTags->if->if->writeLineSeparator->if->indentSmart->if->elem->getAttributes->matchNameAttribute->write->write->elem->getName->write->write->writeLineSeparator
HTMLWriter#comment(Element):::Writes out comments.:::as->elem->getAttributes->if->matchNameAttribute->comment->as->getAttribute->if->writeComment->else->writeComment
HTMLWriter#writeComment(String):::Writes out comment string.:::write->if->write->write->writeLineSeparator->indentSmart
HTMLWriter#writeAdditionalComments():::Writes out any additional comments (comments outside of the body) stored under the property HTMLDocument.AdditionalComments.:::comments->getDocument->getProperty->if->v->for->counter->maxCounter->v->size
HTMLWriter#synthesizedElement(Element):::Returns true if the element is a synthesized element:::if->elem->getAttributes->matchNameAttribute->return->return
HTMLWriter#matchNameAttribute(AttributeSet, HTML.Tag):::Returns true if the StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter.:::o->attr->getAttribute->if->name->if->return->return
HTMLWriter#writeEmbeddedTags(AttributeSet):::Searches for embedded tags in the AttributeSet and writes them out:::convertToHTML->names->attr->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->if->tag->if->tags->contains->continue->write->tag->toString->write->o->attr->getAttribute->if->writeAttributes->write->tags->addElement->tagValues->addElement
HTMLWriter#closeOutUnwantedEmbeddedTags(AttributeSet):::Searches the attribute set and for each tag that is stored in the tag vector:::tagsToRemove->removeAllElements->convertToHTML->t->tValue->firstIndex->size->tags->size->for->i->if->removeAll->tagsToRemove->size->for->i->tags->size->for->i
HTMLWriter#writeMaps(Enumeration):::Outputs the maps as elements:::if->while->maps->hasMoreElements->map->maps->nextElement->name->map->getName->incrIndent->indentSmart->write->if->write->write->write->else->write->writeLineSeparator->incrIndent->areas->map->getAreas->if->for->counter->maxCounter->decrIndent->indentSmart->write->writeLineSeparator->decrIndent
HTMLWriter#writeStyles(StyleSheet):::Outputs the styles as a single element:::if->styles->sheet->getStyleNames->if->outputStyle->while->styles->hasMoreElements->name->styles->nextElement->if->equals->sheet->getStyle->writeStyle->if->writeStyleEndTag
HTMLWriter#writeStyle(String, Style, boolean):::Outputs the named style:::didOutputStyle->attributes->style->getAttributeNames->if->while->attributes->hasMoreElements->attribute->attributes->nextElement->if->value->style->getAttribute->toString->if->if->writeStyleStartTag->if->indentSmart->write->write->else->write->write->attribute->toString->write->write->write->if->write->writeLineSeparator->return
HTMLWriter#convertToHTML(AttributeSet, MutableAttributeSet):::Convert the give set of attributes to be html for the purpose of writing them out:::if->to->removeAttributes->if->convertToHTML40->else->convertToHTML32->return
HTMLWriter#writeLineSeparator():::Writes the line separator:::oldReplace->super->writeLineSeparator
HTMLWriter#output(char[], int, int):::This method is overriden to map any character entities, such as &lt; to &amp;lt;:::if->super->output->return->last->for->counter->if->super->output
ImageView#getAltText():::Returns the text to display if the image cannot be loaded:::return->getElement->getAttributes->getAttribute
ImageView#getImageURL():::Return a URL for the image source, or null if it could not be determined.:::src->getElement->getAttributes->getAttribute->if->return->reference->getDocument->getBase->try->u->new->URL->return->catch->return->finally
ImageView#getNoImageIcon():::Returns the icon to use if the image could not be found.:::return->UIManager->getLookAndFeelDefaults->get
ImageView#getLoadingImageIcon():::Returns the icon to use while in the process of loading the image.:::return->UIManager->getLookAndFeelDefaults->get
ImageView#getImage():::Returns the image to render.:::sync->return
ImageView#setLoadsSynchronously(boolean):::Sets how the image is loaded:::synchronized->if->else
ImageView#getLoadsSynchronously():::Returns true if the image should be loaded when first asked for.:::return
ImageView#getStyleSheet():::Convenient method to get the StyleSheet.:::doc->getDocument->return->doc->getStyleSheet
ImageView#getAttributes():::Fetches the attributes to use when rendering:::sync->return
ImageView#getToolTipText(float, float, Shape):::For images the tooltip text comes from text specified with the ALT attribute:::return->getAltText
ImageView#setPropertiesFromAttributes():::Update any cached values that come from attributes.:::sheet->getStyleSheet->sheet->getViewAttributes->isLink->getIntAttr->getIntAttr->getIntAttr->getDocument->getAttributes->getForeground->attr->getElement->getAttributes->alignment->attr->getAttribute->if->alignment->toString->if->equals->else->if->equals->anchorAttr->attr->getAttribute->if->anchorAttr->isDefined->synchronized->else->synchronized
ImageView#setParent(View):::Establishes the parent view for this view:::oldParent->getParent->super->setParent->getContainer->if->synchronized
ImageView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Invoked when the Elements attributes have changed:::super->changedUpdate->synchronized->preferenceChanged
ImageView#paint(Graphics, Shape):::Paints the View.:::sync->rect->a->getBounds->clip->g->getClipBounds->fBounds->setBounds->paintHighlights->paintBorder->if->g->clipRect->host->getContainer->img->host->isEnabled->getImage->if->if->hasPixels->icon->getLoadingImageIcon->if->icon->paintIcon->else->g->drawImage->else->icon->getNoImageIcon->if->icon->paintIcon->view->getAltView->if->altRect->new->Rectangle->view->paint->if->g->setClip
ImageView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::sync->if->getPreferredSpanFromAltView->return->if->getPreferredSpanFromAltView->return->image->getImage->if->switch->return->return->throw->new->IllegalArgumentException->else->view->getAltView->retValue->if->view->getPreferredSpan->switch->return->return->throw->new->IllegalArgumentException
ImageView#getAlignment(int):::Determines the desired alignment for this view along an axis:::switch->return->return->super->getAlignment
ImageView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::p0->getStartOffset->p1->getEndOffset->if->r->a->getBounds->if->return->return
ImageView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->if->return->getStartOffset->return->getEndOffset
ImageView#setSize(float, float):::Sets the size of the view:::sync->if->getImage->view->getAltView->if->view->Math->max->Math->max->setSize
InlineView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::super->insertUpdate
InlineView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::super->removeUpdate
InlineView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::super->changedUpdate->sheet->getStyleSheet->sheet->getViewAttributes->preferenceChanged
InlineView#getAttributes():::Fetches the attributes to use when rendering:::return
InlineView#getBreakWeight(int, float, float):::Determines how attractive a break opportunity in this view is:::if->return->return->super->getBreakWeight
InlineView#breakView(int, int, float, float):::Tries to break this view on the given axis:::return->super->breakView
InlineView#setPropertiesFromAttributes():::Set the cached properties from the attributes.:::super->setPropertiesFromAttributes->a->getAttributes->decor->a->getAttribute->u->decor->toString->indexOf->setUnderline->s->decor->toString->indexOf->setStrikeThrough->vAlign->a->getAttribute->vAlign->toString->indexOf->setSuperscript->vAlign->toString->indexOf->setSubscript->whitespace->a->getAttribute->if->whitespace->equals->else->doc->getDocument->bg->doc->getBackground->if->setBackground
InlineView#getStyleSheet():::Convenient method to get the StyleSheet.:::doc->getDocument->return->doc->getStyleSheet
IsindexView#createComponent():::Creates the components necessary to implement this view:::attr->getElement->getAttributes->panel->new->BorderLayout->new->JPanel->panel->setBackground->prompt->attr->getAttribute->if->UIManager->getString->label->new->JLabel->new->JTextField->textField->addActionListener->panel->add->panel->add->panel->setAlignmentY->panel->setOpaque->return
IsindexView#actionPerformed(ActionEvent):::Responsible for processing the ActionEvent:::data->textField->getText->if->URLEncoder->encode->attr->getElement->getAttributes->hdoc->getElement->getDocument->action->attr->getAttribute->if->hdoc->getBase->toString->try->url->new->URL->pane->getContainer->pane->setPage->catch->finally
LineView#isVisible():::Preformatted lines are not suppressed if they have only whitespace, so they are always visible.:::return
LineView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::return->getPreferredSpan
LineView#getResizeWeight(int):::Gets the resize weight for the specified axis.:::switch->return->return->throw->new->IllegalArgumentException
LineView#getAlignment(int):::Gets the alignment for an axis.:::if->return->return->super->getAlignment
LineView#layout(int, int):::Lays out the children:::super->layout
LineView#nextTabStop(float, int):::Returns the next tab stop position given a reference position:::if->getTabSet->StyleConstants->getAttributes->getAlignment->return->getPreTab->return->super->nextTabStop
LineView#getPreTab(float, int):::Returns the location for the tab.:::d->getDocument->v->getViewAtPosition->if->f->v->getAttributes->getFont->c->getContainer->fm->c->getFontMetrics->Toolkit->getDefaultToolkit->getFontMetrics->width->getCharactersPerTab->fm->charWidth->tb->getTabBase->return->return
ListView#getAlignment(int):::Calculates the desired shape of the list.:::switch->return->return->throw->new->IllegalArgumentException
ListView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface.:::super->paint->alloc->allocation->getBounds->clip->g->getClipBounds->if->getLeftInset->childRect->getInsideAllocation->n->getViewCount->endY->for->i
ListView#paintChild(Graphics, Rectangle, int):::Paints one of the children; called by paint():::listPainter->paint->super->paintChild
Map#getName():::Returns the name of the Map.:::return
Map#addArea(AttributeSet):::Defines a region of the Map, based on the passed in AttributeSet.:::if->return->if->new->Vector<AttributeSet>->areaAttributes->as->copyAttributes->addElement
Map#removeArea(AttributeSet):::Removes the previously created area.:::if->numAreas->areas->size->for->counter->areaAttributes->size
Map#getAreas():::Returns the AttributeSets representing the differet areas of the Map.:::numAttributes->areaAttributes->size->if->retValue->new->AttributeSetArr->areaAttributes->copyInto->return->return
Map#getArea(int, int, int, int):::Returns the AttributeSet that contains the passed in location, x, y:::numAttributes->areaAttributes->size->if->numAreas->areas->size->if->new->Vector<RegionContainment>->for->counter->return
Map#createRegionContainment(AttributeSet):::Creates and returns an instance of RegionContainment that can be used to test if a particular point lies inside a region.:::shape->attributes->getAttribute->if->if->shapeString->toLowerCase->rc->try->if->shapeString->equals->new->RectangleRegionContainment->else->if->shapeString->equals->new->CircleRegionContainment->else->if->shapeString->equals->new->PolygonRegionContainment->else->if->shapeString->equals->DefaultRegionContainment->sharedInstance->catch->finally->return->return
Map#extractCoords(Object):::Creates and returns an array of integers from the String stringCoords:::if->return->st->new->StringTokenizer->retValue->numCoords->while->st->hasMoreElements->token->st->nextToken->scale->if->token->endsWith->token->token->length->substring->else->try->intValue->Integer->parseInt->if->new->intArr->else->if->temp->new->intArr->System->arraycopy->catch->return->finally->if->temp->new->intArr->System->arraycopy->return
Map.RegionContainment#contains(int, int, int, int):::Returns true if the location x, y falls inside the region defined in the receiver:::
MinimalHTMLWriter#write():::Generates HTML output from a StyledDocument.:::new->Hashtable<String,String>->writeStartTag->writeHeader->writeBody->writeEndTag
MinimalHTMLWriter#writeAttributes(AttributeSet):::Writes out all the attributes for the following types:  StyleConstants.ParagraphConstants,  StyleConstants.CharacterConstants,  StyleConstants.FontConstants,  StyleConstants.ColorConstants:::attributeNames->attr->getAttributeNames->while->attributeNames->hasMoreElements->name->attributeNames->nextElement->if->indent->name->toString->write->write->css->attr->getAttribute->styleConstantsValueToCSSValue->toString->write->write->write
MinimalHTMLWriter#text(Element):::Writes out text.:::contentStr->getText->if->contentStr->length->contentStr->contentStr->length->charAt->contentStr->contentStr->length->substring->if->contentStr->length->write
MinimalHTMLWriter#writeStartTag(String):::Writes out a start tag appropriately indented:::indent->write->write->incrIndent
MinimalHTMLWriter#writeEndTag(String):::Writes out an end tag appropriately indented:::decrIndent->indent->write->write
MinimalHTMLWriter#writeHeader():::Writes out the &lt;head&gt; and &lt;style&gt; tags, and then invokes writeStyles() to write out all the named styles as the content of the &lt;style&gt; tag:::writeStartTag->writeStartTag->writeStartTag->writeStyles->writeEndTag->writeEndTag->writeEndTag
MinimalHTMLWriter#writeStyles():::Writes out all the named styles as the content of the &lt;style&gt; tag.:::styledDoc->getDocument->styleNames->styledDoc->getStyleNames->while->styleNames->hasMoreElements->s->styledDoc->styleNames->nextElement->getStyle->if->s->getAttributeCount->s->isDefined->continue->indent->s->getName->addStyleName->write->write->incrIndent->writeAttributes->decrIndent->indent->write
MinimalHTMLWriter#writeBody():::Iterates over the elements in the document and processes elements based on whether they are branch elements or leaf elements:::it->getElementIterator->it->current->next->writeStartTag->inContent->while->it->next->if->inRange->continue->if->if->writeEndParagraph->writeStartParagraph->else->if->isText->writeContent->else->writeLeaf->if->writeEndParagraph->writeEndTag
MinimalHTMLWriter#writeEndParagraph():::Emits an end tag for a &lt;p&gt; tag:::writeEndMask->if->inFontTag->endSpanTag->else->write->writeEndTag
MinimalHTMLWriter#writeStartParagraph(Element):::Emits the start tag for a paragraph:::attr->elem->getAttributes->resolveAttr->attr->getAttribute->if->getName->mapStyleName->writeStartTag->else->writeStartTag
MinimalHTMLWriter#writeLeaf(Element):::Responsible for writing out other non-text leaf elements.:::indent->if->elem->getName->writeImage->else->if->elem->getName->writeComponent
MinimalHTMLWriter#writeImage(Element):::Responsible for handling Icon Elements; deliberately unimplemented:::
MinimalHTMLWriter#writeComponent(Element):::Responsible for handling Component Elements; deliberately unimplemented:::
MinimalHTMLWriter#isText(Element):::Returns true if the element is a text element.:::return->elem->getName
MinimalHTMLWriter#writeContent(Element, boolean):::Writes out the attribute set in an HTML-compliant manner.:::attr->elem->getAttributes->writeNonHTMLAttributes->if->indent->writeHTMLTags->text
MinimalHTMLWriter#writeNonHTMLAttributes(AttributeSet):::Writes out the remaining character-level attributes (attributes other than bold, italic, and underline) in an HTML-compliant way:::style->separator->if->inFontTag->fontAttributes->isEqual->return->first->color->attr->getAttribute->if->css->styleConstantsValueToCSSValue->size->attr->getAttribute->if->if->size->intValue->family->attr->getAttribute->if->if->if->style->length->if->writeEndMask->startSpanTag->else->if->writeEndMask->endSpanTag
MinimalHTMLWriter#inFontTag():::Returns true if we are currently in a &lt;font&gt; tag.:::return
MinimalHTMLWriter#endFontTag():::This is no longer used, instead &lt;span&gt; will be written out:::write->writeEndTag
MinimalHTMLWriter#startFontTag(String):::This is no longer used, instead &lt;span&gt; will be written out:::callIndent->if->inFontTag->endFontTag->writeStartTag->if->indent
MuxingAttributeSet#setAttributes(AttributeSet[]):::Directly sets the AttributeSets that comprise this MuxingAttributeSet.:::
MuxingAttributeSet#getAttributes():::Returns the AttributeSets multiplexing too:::return
MuxingAttributeSet#insertAttributeSetAt(AttributeSet, int):::Inserts as at index:::numAttrs->newAttrs->new->AttributeSetArr->if->if->System->arraycopy->System->arraycopy->else->System->arraycopy->else->System->arraycopy
MuxingAttributeSet#removeAttributeSetAt(int):::Removes the AttributeSet at index:::numAttrs->newAttrs->new->AttributeSetArr->if->if->System->arraycopy->else->if->System->arraycopy->System->arraycopy->else->System->arraycopy
MuxingAttributeSet#getAttributeCount():::Gets the number of attributes that are defined.:::as->getAttributes->n->for->i->return
MuxingAttributeSet#isDefined(Object):::Checks whether a given attribute is defined:::as->getAttributes->for->i->return
MuxingAttributeSet#isEqual(AttributeSet):::Checks whether two attribute sets are equal.:::return->getAttributeCount->attr->getAttributeCount->containsAttributes
MuxingAttributeSet#copyAttributes():::Copies a set of attributes.:::as->getAttributes->a->new->SimpleAttributeSet->n->for->i->return
MuxingAttributeSet#getAttribute(Object):::Gets the value of an attribute:::as->getAttributes->n->for->i->return
MuxingAttributeSet#getAttributeNames():::Gets the names of all attributes.:::return->new->MuxingAttributeNameEnumeration
MuxingAttributeSet#containsAttribute(Object, Object):::Checks whether a given attribute name/value is defined.:::return->value->getAttribute->equals
MuxingAttributeSet#containsAttributes(AttributeSet):::Checks whether the attribute set contains all of the given attributes.:::result->names->attrs->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attrs->getAttribute->getAttribute->equals->return
MuxingAttributeSet#getResolveParent():::Returns null, subclasses may wish to do something more intelligent with this.:::return
NoFramesView#paint(Graphics, Shape):::If this view is not visible, then it returns:::host->getContainer->if->isEditable->isEditable->if->isVisible->return->super->paint
NoFramesView#setParent(View):::Determines if the JTextComponent that the view is contained in is editable:::if->host->p->getContainer->if->isEditable->super->setParent
NoFramesView#isVisible():::Returns a true/false value that represents whether the view is visible or not.:::return
NoFramesView#layout(int, int):::Do nothing if the view is not visible, otherwise invoke the superclass to perform layout.:::if->isVisible->return->super->layout
NoFramesView#getPreferredSpan(int):::Determines the preferred span for this view:::if->return->return->super->getPreferredSpan
NoFramesView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::if->return->return->super->getMinimumSpan
NoFramesView#getMaximumSpan(int):::Determines the maximum span for this view along an axis:::if->return->return->super->getMaximumSpan
ObjectView#createComponent():::Create the component:::attr->getElement->getAttributes->classname->attr->getAttribute->try->ReflectUtil->checkPackageAccess->c->Class->Thread->currentThread->getContextClassLoader->forName->o->c->newInstance->if->comp->setParameters->return->catch->finally->return->getUnloadableRepresentation
ObjectView#getUnloadableRepresentation():::Fetch a component that can be used to represent the object if it can't be created.:::comp->new->JLabel->comp->setForeground->return
Option#setLabel(String):::Sets the label to be used for the option.:::
Option#getLabel():::Fetch the label associated with the option.:::return
Option#getAttributes():::Fetch the attributes associated with this option.:::return
Option#toString():::String representation is the label.:::return
Option#setSelection(boolean):::Sets the selected state.:::
Option#isSelected():::Fetches the selection state associated with this option.:::return
Option#getValue():::Convenient method to return the string associated with the value attribute:::value->attr->getAttribute->if->return
OptionComboBoxModel#setInitialSelection(Option):::Stores the Option that has been marked its selected attribute set.:::
OptionComboBoxModel#getInitialSelection():::Fetches the Option item that represents that was initially set to a selected state.:::return
OptionListModel#getListSelectionListeners():::Returns an array of all the ListSelectionListeners added to this OptionListModel with addListSelectionListener().:::return->listenerList->getListeners
OptionListModel#fireValueChanged(boolean):::Notify listeners that we are beginning or ending a series of value changes:::getMinSelectionIndex->getMaxSelectionIndex->fireValueChanged
OptionListModel#fireValueChanged(int, int):::Notify ListSelectionListeners that the value of the selection, in the closed interval firstIndex,lastIndex, has changed.:::getValueIsAdjusting->fireValueChanged
OptionListModel#setLeadAnchorNotificationEnabled(boolean):::Sets the value of the leadAnchorNotificationEnabled flag.:::
OptionListModel#isLeadAnchorNotificationEnabled():::Returns the value of the leadAnchorNotificationEnabled flag:::return
OptionListModel#insertIndexInterval(int, int, boolean):::Insert length indices beginning before/after index:::insMinIndex->insMaxIndex->for->i->setInsertedValues->value->get->for->i
OptionListModel#removeIndexInterval(int, int):::Remove the indices in the interval index0,index1 (inclusive) from the selection model:::rmMinIndex->Math->min->rmMaxIndex->Math->max->gapLength->for->i
OptionListModel#clone():::Returns a clone of the receiver with the same selection:::clone->super->clone->value->clone->new->EventListenerList->return
OptionListModel#setAnchorSelectionIndex(int):::Set the anchor selection index, leaving all selection values unchanged.:::
OptionListModel#setLeadSelectionIndex(int):::Set the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected:::anchorIndex->if->getSelectionMode->oldMin->Math->min->oldMax->Math->max->newMin->Math->min->newMax->Math->max->if->value->get->changeSelection->else->changeSelection
OptionListModel#setInitialSelection(int):::This method is responsible for storing the state of the initial selection:::if->initialValue->get->return->if->initialValue->new->BitSet->and->initialValue->set
OptionListModel#getInitialSelection():::Fetches the BitSet that represents the initial set of selected items in the list.:::return
ParagraphView#setParent(View):::Establishes the parent view for this view:::super->setParent->if->setPropertiesFromAttributes
ParagraphView#getAttributes():::Fetches the attributes to use when rendering:::if->sheet->getStyleSheet->sheet->getViewAttributes->return
ParagraphView#setPropertiesFromAttributes():::Sets up the paragraph from css attributes instead of the values found in StyleConstants (i.e:::sheet->getStyleSheet->sheet->getViewAttributes->sheet->getBoxPainter->if->super->setPropertiesFromAttributes->painter->getInset->painter->getInset->painter->getInset->painter->getInset->setInsets->o->attr->getAttribute->if->ta->o->toString->if->ta->equals->setJustification->else->if->ta->equals->setJustification->else->if->ta->equals->setJustification->else->if->ta->equals->setJustification->attr->getAttribute->attr->getAttribute
ParagraphView#getStyleSheet():::Convenient method to get the StyleSheet.:::doc->getDocument->return->doc->getStyleSheet
ParagraphView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the needs for the paragraph along the minor axis:::super->calculateMinorAxisRequirements->if->BlockView->spanSetFromAttributes->margin->getLeftInset->getRightInset->getTopInset->getBottomInset->return
ParagraphView#isVisible():::Indicates whether or not this view should be displayed:::n->getLayoutViewCount->for->i->if->v->getLayoutView->if->v->getEndOffset->v->getStartOffset->return->if->getStartOffset->getDocument->getLength->editable->c->getContainer->if->isEditable->if->return->return
ParagraphView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::if->return->r->if->else->a->getBounds->painter->paint->super->paint
ParagraphView#getPreferredSpan(int):::Determines the preferred span for this view:::if->isVisible->return->return->super->getPreferredSpan
ParagraphView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::if->isVisible->return->return->super->getMinimumSpan
ParagraphView#getMaximumSpan(int):::Determines the maximum span for this view along an axis:::if->isVisible->return->return->super->getMaximumSpan
StyleSheet#getRule(HTML.Tag, Element):::Fetches the style to use to render the given type of HTML tag:::sb->SearchBuffer->obtainSearchBuffer->try->searchContext->sb->getVector->for->p->p->getParentElement->n->searchContext->size->cacheLookup->sb->getStringBuffer->attr->eName->name->for->counter->cacheLookup->t->toString->append->searchContext->elementAt->e->getAttributes->if->e->isLeaf->testAttr->attr->getAttribute->if->else->if->if->attr->isDefined->cacheLookup->append->cacheLookup->attr->getAttribute->append->else->if->attr->isDefined->cacheLookup->append->cacheLookup->attr->getAttribute->append->style->cacheLookup->toString->getResolvedStyle->return->catch->finally->SearchBuffer->releaseSearchBuffer
StyleSheet#getRule(String):::Fetches the rule that best matches the selector given in string form:::cleanSelectorString->if->style->getResolvedStyle->return->return
StyleSheet#addRule(String):::Adds a set of rules to the sheet:::if->baseUnitsDisable->baseUnits->w3cLengthUnitsEnable->w3cLengthUnitsDisable->if->else->if->rule->startsWith->Integer->rule->baseUnits->length->substring->parseInt->rebaseSizeMap->else->if->else->if->else->parser->new->CssParser->try->parser->getBase->new->StringReader->parse->catch->finally
StyleSheet#getDeclaration(String):::Translates a CSS declaration to an AttributeSet that represents the CSS declaration:::if->return->parser->new->CssParser->return->parser->parseDeclaration
StyleSheet#loadRules(Reader, URL):::Loads a set of rules that have been specified in terms of CSS1 grammar:::parser->new->CssParser->parser->parse
StyleSheet#getViewAttributes(View):::Fetches a set of attributes to use in the view for displaying:::return->new->ViewAttributeSet
StyleSheet#removeStyle(String):::Removes a named style previously added to the document.:::aStyle->getStyle->if->selector->cleanSelectorString->selectors->getSimpleSelectors->synchronized->mapping->getRootSelectorMapping->for->i->rule->mapping->getStyle->if->mapping->setStyle->if->resolvedStyles->size->values->resolvedStyles->elements->while->values->hasMoreElements->style->values->nextElement->style->removeStyle->super->removeStyle
StyleSheet#addStyleSheet(StyleSheet):::Adds the rules from the StyleSheet ss to those of the receiver:::synchronized->if->new->Vector<StyleSheet>->if->linkedStyleSheets->contains->index->if->linkedStyleSheets->size->linkedStyleSheets->size->linkedStyleSheets->insertElementAt->linkStyleSheetAt
StyleSheet#removeStyleSheet(StyleSheet):::Removes the StyleSheet ss from those of the receiver.:::synchronized->if->index->linkedStyleSheets->indexOf->if->linkedStyleSheets->removeElementAt->unlinkStyleSheet->if->linkedStyleSheets->size
StyleSheet#getStyleSheets():::Returns an array of the linked StyleSheets:::retValue->synchronized->if->linkedStyleSheets->size->new->StyleSheetArr->linkedStyleSheets->copyInto->else->return
StyleSheet#importStyleSheet(URL):::Imports a style sheet from url:::try->is->url->openStream->r->new->InputStreamReader->new->BufferedReader->parser->new->CssParser->parser->parse->r->close->is->close->catch->finally
StyleSheet#setBase(URL):::Sets the base:::
StyleSheet#getBase():::Returns the base.:::return
StyleSheet#addCSSAttribute(MutableAttributeSet, CSS.Attribute, String):::Adds a CSS attribute to the given set.:::css->addInternalCSSValue
StyleSheet#addCSSAttributeFromHTML(MutableAttributeSet, CSS.Attribute, String):::Adds a CSS attribute to the given set.:::iValue->css->getCssValue->if->attr->addAttribute->return->return
StyleSheet#translateHTMLToCSS(AttributeSet):::Converts a set of HTML attributes to an equivalent set of CSS attributes.:::cssAttrSet->css->translateHTMLToCSS->cssStyleSet->addStyle->cssStyleSet->addAttributes->return
StyleSheet#addAttribute(AttributeSet, Object, Object):::Adds an attribute to the given set, and returns the new representative set:::if->new->CSS->if->tag->HTML->getTagForStyleConstantsKey->if->old->isDefined->removeAttribute->cssValue->css->styleConstantsValueToCSSValue->if->cssKey->css->styleConstantsKeyToCSSKey->if->return->super->addAttribute->return->super->addAttribute
StyleSheet#addAttributes(AttributeSet, AttributeSet):::Adds a set of attributes to the element:::if->removeHTMLTags->return->super->convertAttributeSet->addAttributes
StyleSheet#removeAttribute(AttributeSet, Object):::Removes an attribute from the set:::if->tag->HTML->getTagForStyleConstantsKey->if->super->removeAttribute->cssKey->css->styleConstantsKeyToCSSKey->if->return->super->removeAttribute->return->super->removeAttribute
StyleSheet#removeAttributes(AttributeSet, Enumeration):::Removes a set of attributes for the element:::return->super->removeAttributes
StyleSheet#removeAttributes(AttributeSet, AttributeSet):::Removes a set of attributes:::if->removeHTMLTags->return->super->convertAttributeSet->removeAttributes
StyleSheet#createSmallAttributeSet(AttributeSet):::Creates a compact set of attributes that might be shared:::return->new->SmallConversionSet
StyleSheet#createLargeAttributeSet(AttributeSet):::Creates a large set of attributes that should trade off space for time:::return->new->LargeConversionSet
StyleSheet#convertAttributeSet(AttributeSet):::Converts a set of attributes (if necessary) so that any attributes that were specified as StyleConstants attributes and have a CSS mapping, will be converted to CSS attributes.:::if->return->names->a->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->if->converted->new->LargeConversionSet->keys->a->getAttributeNames->while->keys->hasMoreElements->key->keys->nextElement->cssValue->if->cssKey->css->styleConstantsKeyToCSSKey->if->value->a->getAttribute->css->styleConstantsValueToCSSValue->if->converted->addAttribute->if->converted->a->getAttribute->addAttribute->return->return
StyleSheet.LargeConversionSet#isDefined(Object):::Checks whether a given attribute is defined.:::if->cssKey->css->styleConstantsKeyToCSSKey->if->return->super->isDefined->return->super->isDefined
StyleSheet.LargeConversionSet#getAttribute(Object):::Gets the value of an attribute.:::if->cssKey->css->styleConstantsKeyToCSSKey->if->value->super->getAttribute->if->return->css->cssValueToStyleConstantsValue->return->super->getAttribute
StyleSheet.SmallConversionSet#isDefined(Object):::Checks whether a given attribute is defined.:::if->cssKey->css->styleConstantsKeyToCSSKey->if->return->super->isDefined->return->super->isDefined
StyleSheet.SmallConversionSet#getAttribute(Object):::Gets the value of an attribute.:::if->cssKey->css->styleConstantsKeyToCSSKey->if->value->super->getAttribute->if->return->css->cssValueToStyleConstantsValue->return->super->getAttribute
StyleSheet#getFont(AttributeSet):::Fetches the font to use for the given set of attributes.:::return->css->getFont
StyleSheet#getForeground(AttributeSet):::Takes a set of attributes and turn it into a foreground color specification:::c->css->getColor->if->return->return
StyleSheet#getBackground(AttributeSet):::Takes a set of attributes and turn it into a background color specification:::return->css->getColor
StyleSheet#getBoxPainter(AttributeSet):::Fetches the box formatter to use for the given set of CSS attributes.:::return->new->BoxPainter
StyleSheet#getListPainter(AttributeSet):::Fetches the list formatter to use for the given set of CSS attributes.:::return->new->ListPainter
StyleSheet#setBaseFontSize(int):::Sets the base font size, with valid values between 1 and 7.:::css->setBaseFontSize
StyleSheet#setBaseFontSize(String):::Sets the base font size from the passed in String:::css->setBaseFontSize
StyleSheet#getIndexOfSize(float):::Returns the index of HTML/CSS size model.:::return->CSS->getIndexOfSize
StyleSheet#getPointSize(int):::Returns the point size, given a size index.:::return->css->getPointSize
StyleSheet#getPointSize(String)::: Given a string such as "+2", "-2", or "2",  returns a point size value.:::return->css->getPointSize
StyleSheet#stringToColor(String):::Converts a color string such as "RED" or "#NNNNNN" to a Color:::return->CSS->stringToColor
StyleSheet#getBackgroundImage(AttributeSet):::Returns the ImageIcon to draw in the background for attr.:::value->attr->getAttribute->if->return->getBase->getImage->return
StyleSheet#addRule(String[], AttributeSet, boolean):::Adds a rule into the StyleSheet.:::n->sb->new->StringBuilder->sb->append->for->counter->selectorName->sb->toString->rule->getStyle->if->altRule->addStyle->synchronized->mapping->getRootSelectorMapping->for->i->mapping->getStyle->if->mapping->setStyle->mapping->getSpecificity->refreshResolvedRules->if->getLinkedStyle->rule->addAttributes
StyleSheet.BoxPainter#getBorder(AttributeSet):::Fetches a border to render for the given attributes:::return->new->CSSBorder
StyleSheet.BoxPainter#getBorderColor(AttributeSet):::Fetches the color to use for borders:::color->css->getColor->if->css->getColor->if->return->return
StyleSheet.BoxPainter#getInset(int, View):::Fetches the inset needed on a given side to account for the margin, border, and padding.:::a->v->getAttributes->inset->switch->isLeftToRight->getOrientationMargin->getLength->break->isLeftToRight->getOrientationMargin->getLength->break->getLength->break->getLength->break->throw->new->IllegalArgumentException->return
StyleSheet.BoxPainter#paint(Graphics, float, float, float, float, View):::Paints the CSS box according to the attributes given:::dx->dy->dw->dh->a->v->getAttributes->isLeftToRight->isLeftToRight->localLeftMargin->getOrientationMargin->localRightMargin->getOrientationMargin->if->if->g->setColor->g->fillRect->if->bgPainter->paint->if->bw->getLength->for->i->else->border->paintBorder
StyleSheet.BoxPainter#getOrientationMargin(HorizontalMargin, float, AttributeSet, boolean):::for <dir>, <menu>, <ul> etc:::margin->orientationMargin->cssMarginValue->switch->getLength->getLength->a->getAttribute->break->getLength->getLength->a->getAttribute->break->if->return
StyleSheet.ListPainter#paint(Graphics, float, float, float, float, View, int):::Paints the CSS list decoration according to the attributes given.:::cv->v->getView->host->v->getContainer->name->cv->getElement->getAttributes->getAttribute->if->return->host->getComponentOrientation->isLeftToRight->align->if->cv->getViewCount->pView->cv->getView->cName->pView->getElement->getAttributes->getAttribute->if->pView->getViewCount->paintRect->setBounds->shape->cv->getChildAllocation->if->pView->getView->getChildAllocation->rect->shape->getBounds->pView->getView->getAlignment->c->host->isEnabled->ss->cv->getAttributes->getForeground->host->getForeground->UIManager->getColor->g->setColor->if->drawIcon->return->childtype->getChildType->font->cv->getDocument->cv->getAttributes->getFont->if->g->setFont->if->drawShape->else->if->getRenderIndex->drawLetter->else->if->getRenderIndex->drawLetter->else->if->getRenderIndex->drawLetter->else->if->getRenderIndex->drawLetter->else->if->getRenderIndex->drawLetter
StyleSheet.ListPainter#drawIcon(Graphics, int, int, int, int, float, Component):::Draws the bullet icon specified by the list-style-image argument.:::gap->img->getIconWidth->x->y->Math->img->getIconHeight->max->img->paintIcon
StyleSheet.ListPainter#drawShape(Graphics, CSS.Value, int, int, int, int, float):::Draws the graphical bullet item specified by the type argument.:::gap->x->y->Math->max->if->g->drawRect->else->if->g->drawOval->else->g->fillOval
StyleSheet.ListPainter#drawLetter(Graphics, char, int, int, int, int, float, int):::Draws the letter or number for an ordered list.:::str->formatItemNum->fm->SwingUtilities2->getFontMetrics->stringwidth->SwingUtilities2->stringWidth->gap->x->y->Math->fm->getAscent->max->SwingUtilities2->drawString
StyleSheet.ListPainter#formatItemNum(int, char):::Converts the item number into the ordered list number (i.e:::numStyle->uppercase->formattedNum->switch->String->valueOf->break->formatAlphaNumerals->break->formatRomanNumerals->if->formattedNum->toUpperCase->return
StyleSheet.ListPainter#formatAlphaNumerals(int):::Converts the item number into an alphabetic character:::result->if->formatAlphaNumerals->formatAlphaNumerals->else->String->valueOf->return
StyleSheet.ListPainter#formatRomanNumerals(int):::Converts the item number into a roman numeral:::return->formatRomanNumerals
StyleSheet.ListPainter#formatRomanNumerals(int, int):::Converts the item number into a roman numeral:::if->return->formatRomanDigit->else->return->formatRomanNumerals->formatRomanDigit
StyleSheet.ListPainter#formatRomanDigit(int, int):::Converts the item number into a roman numeral:::result->if->return->else->if->return->else->if->for->i->return
StyleSheet.ViewAttributeSet#isDefined(Object):::Checks whether a given attribute is defined:::if->cssKey->css->styleConstantsKeyToCSSKey->if->return->super->isDefined
StyleSheet.ViewAttributeSet#getAttribute(Object):::Gets the value of an attribute:::if->cssKey->css->styleConstantsKeyToCSSKey->if->value->doGetAttribute->if->return->toStyleConstants->return->doGetAttribute
StyleSheet.ViewAttributeSet#getResolveParent():::If not overriden, the resolving parent defaults to the parent element.:::if->return->parent->host->getParent->return->parent->getAttributes
StyleSheet.ResolvedStyle#insertStyle(Style, int):::Inserts a Style into the receiver so that the styles the receiver represents are still ordered by specificity:::attrs->getAttributes->maxCounter->counter->for->insertAttributeSetAt
StyleSheet.ResolvedStyle#removeStyle(Style):::Removes a previously added style:::attrs->getAttributes->for->counter
StyleSheet.ResolvedStyle#insertExtendedStyleAt(Style, int):::Adds s as one of the Attributesets to look up attributes in.:::insertAttributeSetAt
StyleSheet.ResolvedStyle#addExtendedStyle(Style):::Adds s as one of the AttributeSets to look up attributes in:::getAttributes->insertAttributeSetAt
StyleSheet.ResolvedStyle#removeExtendedStyleAt(int):::Removes the style at index + extendedIndex.:::removeAttributeSetAt
StyleSheet.ResolvedStyle#matches(String):::Returns true if the receiver matches selector, where a match is defined by the CSS rule matching:::sLast->selector->length->if->return->thisLast->name->length->sCurrent->selector->lastIndexOf->thisCurrent->name->lastIndexOf->if->if->if->matches->return->while->selector->lastIndexOf->if->match->while->name->lastIndexOf->if->matches->if->return->return
StyleSheet.ResolvedStyle#matches(String, int, int, int, int):::Returns true if the substring of the receiver, in the range thisCurrent, thisLast matches the substring of selector in the ranme sCurrent to sLast based on CSS selector matching.:::Math->max->Math->max->thisDotIndex->boundedIndexOf->thisPoundIndex->boundedIndexOf->sDotIndex->boundedIndexOf->sPoundIndex->boundedIndexOf->if->if->return->if->if->selector->regionMatches->return->else->if->selector->regionMatches->return->return->if->if->return->if->if->selector->regionMatches->return->else->if->selector->regionMatches->return->return->if->return->selector->regionMatches->if->return->selector->regionMatches->return->selector->regionMatches
StyleSheet.ResolvedStyle#boundedIndexOf(String, char, int, int):::Similar to String.indexOf, but allows an upper bound (this is slower in that it will still check string starting at start.:::retValue->string->indexOf->if->return->return
StyleSheet.SelectorMapping#getSpecificity():::Returns the specificity this mapping represents.:::return
StyleSheet.SelectorMapping#setStyle(Style):::Sets the Style associated with this mapping.:::
StyleSheet.SelectorMapping#getStyle():::Returns the Style associated with this mapping.:::return
StyleSheet.SelectorMapping#getChildSelectorMapping(String, boolean):::Returns the child mapping identified by the simple selector selector:::retValue->if->children->get->else->if->new->HashMap<String,SelectorMapping>->if->specificity->getChildSpecificity->createChildSelectorMapping->children->put->return
StyleSheet.SelectorMapping#createChildSelectorMapping(int):::Creates a child SelectorMapping with the specified specificity.:::return->new->SelectorMapping
StyleSheet.SelectorMapping#getChildSpecificity(String):::Returns the specificity for the child selector selector.:::firstChar->selector->charAt->specificity->getSpecificity->if->else->if->else->if->selector->indexOf->if->selector->indexOf->return
StyleSheet.CssParser#parseDeclaration(String):::Parses the passed in CSS declaration into an AttributeSet.:::try->return->new->StringReader->parseDeclaration->catch->finally->return
StyleSheet.CssParser#parseDeclaration(Reader):::Parses the passed in CSS declaration into an AttributeSet.:::parse->return->declaration->copyAttributes
StyleSheet.CssParser#parse(URL, Reader, boolean, boolean):::Parse the given CSS stream:::declaration->removeAttributes->selectorTokens->removeAllElements->selectors->removeAllElements->parser->parse
StyleSheet.CssParser#handleImport(String):::Invoked when a valid @import is encountered, will call importStyleSheet if a MalformedURLException is not thrown in creating the URL.:::url->CSS->getURL->if->importStyleSheet
StyleSheet.CssParser#handleSelector(String):::A selector has been encountered.:::if->selector->startsWith->selector->startsWith->selector->toLowerCase->length->selector->length->if->selector->endsWith->if->selector->substring->selectorTokens->addElement->addSelector->else->if->selectorTokens->addElement
StyleSheet.CssParser#startRule():::Invoked when the start of a rule is encountered.:::if->selectorTokens->size->addSelector
StyleSheet.CssParser#handleProperty(String):::Invoked when a property name is encountered.:::
StyleSheet.CssParser#handleValue(String):::Invoked when a property value is encountered.:::if->value->length->cssKey->CSS->getAttribute->if->if->if->value->equals->url->CSS->getURL->if->url->toString->addCSSAttribute
StyleSheet.CssParser#endRule():::Invoked when the end of a rule is encountered.:::n->selectors->size->for->i->declaration->removeAttributes->selectors->removeAllElements
TableView#createTableRow(Element):::Creates a new table row.:::o->elem->getAttributes->getAttribute->if->return->new->RowView->return
TableView#getColumnCount():::The number of columns in the table.:::return
TableView#getColumnSpan(int):::Fetches the span (width) of the given column:::if->return->return
TableView#getRowCount():::The number of rows in the table.:::return->rows->size
TableView#getMultiRowSpan(int, int):::Fetch the span of multiple rows:::rv0->getRow->rv1->getRow->if->index0->index1->span->getOffset->getOffset->getSpan->return->return
TableView#getRowSpan(int):::Fetches the span (height) of the given row.:::rv->getRow->if->return->getSpan->return
TableView#getColumnsOccupied(View):::Determines the number of columns occupied by the table cell represented by given element.:::a->v->getElement->getAttributes->if->a->isDefined->s->a->getAttribute->if->try->return->Integer->parseInt->catch->finally->return
TableView#getRowsOccupied(View):::Determines the number of rows occupied by the table cell represented by given element.:::a->v->getElement->getAttributes->if->a->isDefined->s->a->getAttribute->if->try->return->Integer->parseInt->catch->finally->return
TableView#updateInsets():::Update the insets, which contain the caption if there is a caption.:::top->painter->getInset->bottom->painter->getInset->if->caption->getView->h->caption->getPreferredSpan->a->caption->getAttributes->align->a->getAttribute->if->align->equals->else->painter->getInset->painter->getInset->setInsets
TableView#setPropertiesFromAttributes():::Update any cached values that come from attributes.:::sheet->getStyleSheet->sheet->getViewAttributes->sheet->getBoxPainter->if->painter->getInset->painter->getInset->painter->getInset->painter->getInset->setInsets->lv->attr->getAttribute->if->lv->getValue->else->attr->getAttribute->if->lv->getValue->else
TableView#updateGrid():::Fill in the grid locations that are placeholders for multi-column, multi-row, and missing grid locations.:::if->rows->removeAllElements->n->getViewCount->for->i->maxColumns->nrows->rows->size->for->row->new->intArr->new->intArr->new->SizeRequirementsArr->for->i
TableView#addFill(int, int):::Mark a grid location as filled in for a cells overflow.:::rv->getRow->if->rv->fillColumn
TableView#layoutColumns(int, int[], int[], SizeRequirements[]):::Layout the columns to fit within the given target span.:::Arrays->fill->Arrays->fill->colIterator->setLayoutArrays->CSS->calculateTiledLayout
TableView#calculateColumnRequirements(int):::Calculate the requirements for each column:::foreach->host->getContainer->if->if->isEditable->else->hasMultiColumn->nrows->getRowCount->for->i->if->for->i
TableView#checkSingleColumnCell(int, int, View):::check the requirements of a table cell that spans a single column.:::req->Math->v->getMinimumSpan->max->Math->v->getPreferredSpan->max
TableView#checkMultiColumnCell(int, int, int, View):::check the requirements of a table cell that spans multiple columns.:::min->pref->max->for->i->cmin->v->getMinimumSpan->if->reqs->new->SizeRequirementsArr->for->i->spans->new->intArr->offsets->new->intArr->SizeRequirements->calculateTiledPositions->for->i->cpref->v->getPreferredSpan->if->reqs->new->SizeRequirementsArr->for->i->spans->new->intArr->offsets->new->intArr->SizeRequirements->calculateTiledPositions->for->i
TableView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the requirements for the minor axis:::updateGrid->calculateColumnRequirements->if->new->SizeRequirements->min->pref->n->for->i->adjust->attr->getAttributes->cssWidth->attr->getAttribute->if->BlockView->spanSetFromAttributes->if->o->attr->getAttribute->if->ta->o->toString->if->ta->equals->else->if->ta->equals->else->if->ta->equals->else->else->return
TableView#calculateMajorAxisRequirements(int, SizeRequirements):::Calculate the requirements for the major axis:::updateInsets->rowIterator->updateAdjustments->CSS->calculateTiledRequirements->return
TableView#layoutMinorAxis(int, int, int[], int[]):::Perform layout for the minor axis of the box (i.e:::updateGrid->n->getRowCount->for->i->layoutColumns->super->layoutMinorAxis
TableView#layoutMajorAxis(int, int, int[], int[]):::Perform layout for the major axis of the box (i.e:::rowIterator->setLayoutArrays->CSS->calculateTiledLayout->if->caption->getView->h->caption->getPreferredSpan->boxBottom->painter->getInset->if->getBottomInset->else->getTopInset
TableView#getViewAtPosition(int, Rectangle):::Fetches the child view that represents the given position in the model:::n->getViewCount->for->i->if->getEndOffset->v->getView->if->this->childAllocation->return->return
TableView#getAttributes():::Fetches the attributes to use when rendering:::if->sheet->getStyleSheet->sheet->getViewAttributes->return
TableView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::a->allocation->getBounds->setSize->if->top->painter->getInset->bottom->painter->getInset->if->getTopInset->h->getTopInset->else->getBottomInset->painter->paint->n->getViewCount->for->i
TableView#setParent(View):::Establishes the parent view for this view:::super->setParent->if->setPropertiesFromAttributes
TableView#getViewFactory():::Fetches the ViewFactory implementation that is feeding the view hierarchy:::return
TableView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::super->insertUpdate
TableView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::super->removeUpdate
TableView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for:::super->changedUpdate
TableView#replace(int, int, View[]):::Change the child views:::super->replace->invalidateGrid
TableView#create(Element):::The table itself acts as a factory for the various views that actually represent pieces of the table:::o->elem->getAttributes->getAttribute->if->kind->if->return->createTableRow->else->if->return->new->CellView->else->if->return->new->javax.swing.text.html.ParagraphView->p->getParent->if->f->p->getViewFactory->if->return->f->create->return
TableView.ColumnIterator#disablePercentages():::Disable percentage adjustments which should only apply when calculating layout, not requirements.:::
TableView.ColumnIterator#setLayoutArrays(int[], int[], int):::Set the layout arrays to use for holding layout results:::updatePercentagesAndAdjustmentWeights
TableView.RowIterator#adjustMultiRowSpan(int, int, int):::Fixup preferences to accommodate a multi-row table cell if not already covered by existing preferences:::if->getCount->getCount->if->return->span->for->i->if->adjust->rowAdjust->firstAdjust->rv->getRow->Math->max->for->i
TableView.RowView#getColumnCount():::The number of columns present in this row.:::nfill->n->fillColumns->size->for->i->return->getViewCount
TableView.RowView#getAttributes():::Fetches the attributes to use when rendering:::return
TableView.RowView#preferenceChanged(View, boolean, boolean):::This is called by a child to indicate its preferred span has changed:::super->preferenceChanged->if->for->i
TableView.RowView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::a->painter->paint->super->paint
TableView.RowView#replace(int, int, View[]):::Change the child views:::super->replace->invalidateGrid
TableView.RowView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the height requirements of the table row:::min->pref->max->n->getViewCount->for->i->if->new->SizeRequirements->return
TableView.RowView#layoutMajorAxis(int, int, int[], int[]):::Perform layout for the major axis of the box (i.e:::col->ncells->getViewCount->for->cell
TableView.RowView#layoutMinorAxis(int, int, int[], int[]):::Perform layout for the minor axis of the box (i.e:::super->layoutMinorAxis->col->ncells->getViewCount->for->cell
TableView.RowView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::return
TableView.RowView#getViewAtPosition(int, Rectangle):::Fetches the child view that represents the given position in the model:::n->getViewCount->for->i->if->getEndOffset->v->getView->if->this->childAllocation->return->return
TableView.RowView#setPropertiesFromAttributes():::Update any cached values that come from attributes.:::sheet->getStyleSheet->sheet->getViewAttributes->sheet->getBoxPainter
TableView.CellView#layoutMajorAxis(int, int, int[], int[]):::Perform layout for the major axis of the box (i.e:::super->layoutMajorAxis->used->n->for->i->adjust->if->valign->getElement->getAttributes->getAttribute->if->rowAttr->getElement->getParentElement->getAttributes->rowAttr->getAttribute->if->valign->equals->else->if->valign->equals->if->for->i
TableView.CellView#calculateMajorAxisRequirements(int, SizeRequirements):::Calculate the requirements needed along the major axis:::req->super->calculateMajorAxisRequirements->return
TextAreaDocument#reset():::Resets the model by removing all the data, and restoring it to its initial state.:::try->getLength->remove->if->insertString->catch->finally
TextAreaDocument#storeInitialText():::Stores the data that the model is initially loaded with.:::try->getLength->getText->catch->finally

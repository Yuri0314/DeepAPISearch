ClientFactoryImpl#createSaslClient(String[], String, String, String, Map, CallbackHandler)::: client factory impl create sasl client:::for->i->return
ClientFactoryImpl#getMechanismNames(Map)::: client factory impl get mechanism names:::return->PolicyUtils->filterMechs
ClientFactoryImpl#getUserInfo(String, String, CallbackHandler):::Gets the authentication id and password:::if->throw->new->SaslException->try->userPrompt->passwdPrompt->ncb->new->NameCallback->new->NameCallback->pcb->new->PasswordCallback->cbh->new->CallbackArr->handle->pw->pcb->getPassword->bytepw->authId->if->new->String->getBytes->pcb->clearPassword->else->ncb->getName->return->new->ObjectArr->catch->throw->new->SaslException->throw->new->SaslException->finally
CramMD5Base#getMechanismName():::Retrieves this mechanism's name.:::return
CramMD5Base#isComplete():::Determines whether this mechanism has completed:::return
CramMD5Base#unwrap(byte[], int, int):::Unwraps the incoming buffer:::if->throw->new->IllegalStateException->else->throw->new->IllegalStateException
CramMD5Base#wrap(byte[], int, int):::Wraps the outgoing buffer:::if->throw->new->IllegalStateException->else->throw->new->IllegalStateException
CramMD5Base#getNegotiatedProperty(String):::Retrieves the negotiated property:::if->if->propName->equals->return->else->return->else->throw->new->IllegalStateException
CramMD5Base#dispose()::: cram d5 base dispose:::clearPassword
CramMD5Base#clearPassword()::: cram d5 base clear password:::if->for->i
CramMD5Base#finalize()::: cram d5 base finalize:::clearPassword
CramMD5Base#HMAC_MD5(byte[], byte[]):::Hashes its input arguments according to HMAC-MD5 (RFC 2104) and returns the resulting digest in its ASCII representation:::md5->MessageDigest->getInstance->if->md5->digest->ipad->new->byteArr->opad->new->byteArr->digest->i->for->for->md5->update->md5->update->md5->digest->md5->update->md5->update->md5->digest->digestString->new->StringBuilder->for->Arrays->fill->Arrays->fill->return->digestString->toString
CramMD5Base#initLogger():::Sets logger field.:::if->Logger->getLogger
CramMD5Client#hasInitialResponse():::CRAM-MD5 has no initial response.:::return
CramMD5Client#evaluateChallenge(byte[]):::Processes the challenge data:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->try->if->logger->isLoggable->logger->new->String->log->digest->HMAC_MD5->clearPassword->resp->logger->log->return->resp->getBytes->catch->throw->new->SaslException->throw->new->SaslException->finally
CramMD5Server#evaluateResponse(byte[]):::Generates challenge based on response sent by client:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->try->if->if->throw->new->SaslException->random->new->Random->rand->random->nextLong->timestamp->System->currentTimeMillis->sb->new->StringBuilder->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->challengeStr->sb->toString->logger->log->challengeStr->getBytes->return->challengeData->clone->else->if->logger->isLoggable->logger->new->String->log->ulen->for->i->if->throw->new->SaslException->username->new->String->logger->log->ncb->new->NameCallback->pcb->new->PasswordCallback->cbh->new->CallbackArr->handle->pwChars->pcb->getPassword->if->throw->new->SaslException->pcb->clearPassword->pwStr->new->String->for->i->pwStr->getBytes->digest->HMAC_MD5->logger->log->clearPassword->expectedDigest->digest->getBytes->digestLen->if->throw->new->SaslException->j->for->i->acb->new->AuthorizeCallback->cbh->new->CallbackArr->handle->if->acb->isAuthorized->acb->getAuthorizedID->else->throw->new->SaslException->logger->log->return->catch->throw->new->SaslException->throw->new->SaslException->throw->new->SaslException->throw->throw->new->SaslException->finally
CramMD5Server#getAuthorizationID()::: cram d5 server get authorization d:::if->return->else->throw->new->IllegalStateException
ExternalClient#getMechanismName():::Retrieves this mechanism's name for initiating the "EXTERNAL" protocol exchange.:::return
ExternalClient#hasInitialResponse():::This mechanism has an initial response.:::return
ExternalClient#dispose()::: external client dispose:::
ExternalClient#evaluateChallenge(byte[]):::Processes the challenge data:::if->throw->new->IllegalStateException->return
ExternalClient#isComplete():::Returns whether this mechanism is complete.:::return
ExternalClient#unwrap(byte[], int, int):::Unwraps the incoming buffer.:::if->throw->new->SaslException->else->throw->new->IllegalStateException
ExternalClient#wrap(byte[], int, int):::Wraps the outgoing buffer.:::if->throw->new->SaslException->else->throw->new->IllegalStateException
ExternalClient#getNegotiatedProperty(String):::Retrieves the negotiated property:::if->return->else->throw->new->IllegalStateException
PlainClient#getMechanismName():::Retrieves this mechanism's name for to initiate the PLAIN protocol exchange.:::return
PlainClient#hasInitialResponse()::: plain client has initial response:::return
PlainClient#dispose()::: plain client dispose:::clearPassword
PlainClient#evaluateChallenge(byte[]):::Retrieves the initial response for the SASL command, which for PLAIN is the concatenation of authorization ID, authentication ID and password, with each component separated by the US-ASCII <NUL> byte.:::if->throw->new->IllegalStateException->try->authz->authorizationID->getBytes->auth->authenticationID->getBytes->answer->new->byteArr->pos->if->System->arraycopy->System->arraycopy->System->arraycopy->clearPassword->return->catch->throw->new->SaslException->finally
PlainClient#isComplete():::Determines whether this mechanism has completed:::return
PlainClient#unwrap(byte[], int, int):::Unwraps the incoming buffer.:::if->throw->new->SaslException->else->throw->new->IllegalStateException
PlainClient#wrap(byte[], int, int):::Wraps the outgoing buffer.:::if->throw->new->SaslException->else->throw->new->IllegalStateException
PlainClient#getNegotiatedProperty(String):::Retrieves the negotiated property:::if->if->propName->equals->return->else->return->else->throw->new->IllegalStateException
PlainClient#clearPassword()::: plain client clear password:::if->for->i
PlainClient#finalize()::: plain client finalize:::clearPassword
Provider.ProviderService#newInstance(Object)::: provider service new instance:::type->getType->if->throw->new->InvalidParameterException->algo->getAlgorithm->try->if->algo->equals->return->new->com.sun.security.sasl.digest.FactoryImpl->if->algo->equals->return->new->com.sun.security.sasl.ntlm.FactoryImpl->if->type->equals->if->algo->equals->algo->equals->algo->equals->return->new->com.sun.security.sasl.ClientFactoryImpl->else->if->type->equals->if->algo->equals->return->new->com.sun.security.sasl.ServerFactoryImpl->catch->throw->new->NoSuchAlgorithmException->finally->throw->new->ProviderException
ServerFactoryImpl#createSaslServer(String, String, String, Map, CallbackHandler)::: server factory impl create sasl server:::if->mech->equals->PolicyUtils->checkPolicy->if->throw->new->SaslException->return->new->CramMD5Server->return
ServerFactoryImpl#getMechanismNames(Map)::: server factory impl get mechanism names:::return->PolicyUtils->filterMechs

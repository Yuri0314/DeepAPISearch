com.sun.security.sasl.ClientFactoryImpl#createSaslClient(String[], String, String, String, Map, CallbackHandler)->SaslClient::: client factory impl create sasl client
com.sun.security.sasl.ClientFactoryImpl#getMechanismNames(Map)->String[]::: client factory impl get mechanism names
com.sun.security.sasl.CramMD5Base#getMechanismName()->String:::Retrieves this mechanism's name.
com.sun.security.sasl.CramMD5Base#isComplete()->boolean:::Determines whether this mechanism has completed
com.sun.security.sasl.CramMD5Base#unwrap(byte[], int, int)->byte[]:::Unwraps the incoming buffer
com.sun.security.sasl.CramMD5Base#wrap(byte[], int, int)->byte[]:::Wraps the outgoing buffer
com.sun.security.sasl.CramMD5Base#getNegotiatedProperty(String)->Object:::Retrieves the negotiated property
com.sun.security.sasl.CramMD5Base#dispose()->void::: cram d5 base dispose
com.sun.security.sasl.CramMD5Base#clearPassword()->void::: cram d5 base clear password
com.sun.security.sasl.CramMD5Base#finalize()->void::: cram d5 base finalize
com.sun.security.sasl.CramMD5Base#HMAC_MD5(byte[], byte[])->String:::Hashes its input arguments according to HMAC-MD5 (RFC 2104) and returns the resulting digest in its ASCII representation
com.sun.security.sasl.CramMD5Client#hasInitialResponse()->boolean:::CRAM-MD5 has no initial response.
com.sun.security.sasl.CramMD5Client#evaluateChallenge(byte[])->byte[]:::Processes the challenge data
com.sun.security.sasl.CramMD5Server#evaluateResponse(byte[])->byte[]:::Generates challenge based on response sent by client
com.sun.security.sasl.CramMD5Server#getAuthorizationID()->String::: cram d5 server get authorization d
com.sun.security.sasl.ExternalClient#getMechanismName()->String:::Retrieves this mechanism's name for initiating the "EXTERNAL" protocol exchange.
com.sun.security.sasl.ExternalClient#hasInitialResponse()->boolean:::This mechanism has an initial response.
com.sun.security.sasl.ExternalClient#dispose()->void::: external client dispose
com.sun.security.sasl.ExternalClient#evaluateChallenge(byte[])->byte[]:::Processes the challenge data
com.sun.security.sasl.ExternalClient#isComplete()->boolean:::Returns whether this mechanism is complete.
com.sun.security.sasl.ExternalClient#unwrap(byte[], int, int)->byte[]:::Unwraps the incoming buffer.
com.sun.security.sasl.ExternalClient#wrap(byte[], int, int)->byte[]:::Wraps the outgoing buffer.
com.sun.security.sasl.ExternalClient#getNegotiatedProperty(String)->Object:::Retrieves the negotiated property
com.sun.security.sasl.PlainClient#getMechanismName()->String:::Retrieves this mechanism's name for to initiate the PLAIN protocol exchange.
com.sun.security.sasl.PlainClient#hasInitialResponse()->boolean::: plain client has initial response
com.sun.security.sasl.PlainClient#dispose()->void::: plain client dispose
com.sun.security.sasl.PlainClient#evaluateChallenge(byte[])->byte[]:::Retrieves the initial response for the SASL command, which for PLAIN is the concatenation of authorization ID, authentication ID and password, with each component separated by the US-ASCII <NUL> byte.
com.sun.security.sasl.PlainClient#isComplete()->boolean:::Determines whether this mechanism has completed
com.sun.security.sasl.PlainClient#unwrap(byte[], int, int)->byte[]:::Unwraps the incoming buffer.
com.sun.security.sasl.PlainClient#wrap(byte[], int, int)->byte[]:::Wraps the outgoing buffer.
com.sun.security.sasl.PlainClient#getNegotiatedProperty(String)->Object:::Retrieves the negotiated property
com.sun.security.sasl.PlainClient#finalize()->void::: plain client finalize
com.sun.security.sasl.ServerFactoryImpl#createSaslServer(String, String, String, Map, CallbackHandler)->SaslServer::: server factory impl create sasl server
com.sun.security.sasl.ServerFactoryImpl#getMechanismNames(Map)->String[]::: server factory impl get mechanism names

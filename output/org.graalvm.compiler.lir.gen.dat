LIRGenerator_OptionDescriptors#get(String)::: generator_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
LIRGenerator_OptionDescriptors#iterator()::: generator_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
ArithmeticLIRGenerator#getLIRGen()::: arithmetic generator get gen:::return
ArithmeticLIRGenerator#asAllocatable(Value)::: arithmetic generator as allocatable:::return->lirGen->asAllocatable
ArithmeticLIRGenerator#getOptions()::: arithmetic generator get options:::return->getLIRGen->getResult->getLIR->getOptions
ArithmeticLIRGenerator#isNumericInteger(PlatformKind)::: arithmetic generator is numeric integer:::
ArithmeticLIRGenerator#emitAdd(LIRKind, Value, Value, boolean)::: arithmetic generator emit add:::
ArithmeticLIRGenerator#emitSub(LIRKind, Value, Value, boolean)::: arithmetic generator emit sub:::
ArithmeticLIRGenerator#emitAdd(Value, Value, boolean)::: arithmetic generator emit add:::return->emitAddOrSub
ArithmeticLIRGenerator#emitSub(Value, Value, boolean)::: arithmetic generator emit sub:::return->emitAddOrSub
ArithmeticLIRGenerator#emitAddOrSub(Value, Value, boolean, boolean)::: arithmetic generator emit add or sub:::resultKind->a->b->if->a->getPlatformKind->isNumericInteger->aKind->a->getValueKind->bKind->b->getValueKind->if->aKind->isUnknownReference->else->if->bKind->isUnknownReference->else->if->aKind->isValue->bKind->isValue->else->if->aKind->isValue->if->bKind->isDerivedReference->else->allocatable->asAllocatable->bKind->makeDerivedReference->else->if->bKind->isValue->if->aKind->isDerivedReference->else->allocatable->asAllocatable->aKind->makeDerivedReference->else->aKind->makeUnknownReference->else->LIRKind->combine->return->emitAdd->emitSub
ArithmeticLIRGenerator#emitRor(Value, Value)::: arithmetic generator emit ror:::return->emitUShr->emitNegate->emitShl->emitOr
ArithmeticLIRGeneratorTool#emitNegate(Value)::: arithmetic generator tool emit negate:::
ArithmeticLIRGeneratorTool#emitAdd(Value, Value, boolean)::: arithmetic generator tool emit add:::
ArithmeticLIRGeneratorTool#emitSub(Value, Value, boolean)::: arithmetic generator tool emit sub:::
ArithmeticLIRGeneratorTool#emitMul(Value, Value, boolean)::: arithmetic generator tool emit mul:::
ArithmeticLIRGeneratorTool#emitMulHigh(Value, Value)::: arithmetic generator tool emit mul high:::
ArithmeticLIRGeneratorTool#emitUMulHigh(Value, Value)::: arithmetic generator tool emit mul high:::
ArithmeticLIRGeneratorTool#emitDiv(Value, Value, LIRFrameState)::: arithmetic generator tool emit div:::
ArithmeticLIRGeneratorTool#emitRem(Value, Value, LIRFrameState)::: arithmetic generator tool emit rem:::
ArithmeticLIRGeneratorTool#emitUDiv(Value, Value, LIRFrameState)::: arithmetic generator tool emit div:::
ArithmeticLIRGeneratorTool#emitURem(Value, Value, LIRFrameState)::: arithmetic generator tool emit rem:::
ArithmeticLIRGeneratorTool#emitNot(Value)::: arithmetic generator tool emit not:::
ArithmeticLIRGeneratorTool#emitAnd(Value, Value)::: arithmetic generator tool emit and:::
ArithmeticLIRGeneratorTool#emitOr(Value, Value)::: arithmetic generator tool emit or:::
ArithmeticLIRGeneratorTool#emitXor(Value, Value)::: arithmetic generator tool emit xor:::
ArithmeticLIRGeneratorTool#emitShl(Value, Value)::: arithmetic generator tool emit shl:::
ArithmeticLIRGeneratorTool#emitShr(Value, Value)::: arithmetic generator tool emit shr:::
ArithmeticLIRGeneratorTool#emitUShr(Value, Value)::: arithmetic generator tool emit shr:::
ArithmeticLIRGeneratorTool#emitFloatConvert(FloatConvert, Value)::: arithmetic generator tool emit float convert:::
ArithmeticLIRGeneratorTool#emitReinterpret(LIRKind, Value)::: arithmetic generator tool emit reinterpret:::
ArithmeticLIRGeneratorTool#emitNarrow(Value, int)::: arithmetic generator tool emit narrow:::
ArithmeticLIRGeneratorTool#emitSignExtend(Value, int, int)::: arithmetic generator tool emit sign extend:::
ArithmeticLIRGeneratorTool#emitZeroExtend(Value, int, int)::: arithmetic generator tool emit zero extend:::
ArithmeticLIRGeneratorTool#emitMathAbs(Value)::: arithmetic generator tool emit math abs:::
ArithmeticLIRGeneratorTool#emitMathSqrt(Value)::: arithmetic generator tool emit math sqrt:::
ArithmeticLIRGeneratorTool#emitBitCount(Value)::: arithmetic generator tool emit bit count:::
ArithmeticLIRGeneratorTool#emitBitScanForward(Value)::: arithmetic generator tool emit bit scan forward:::
ArithmeticLIRGeneratorTool#emitBitScanReverse(Value)::: arithmetic generator tool emit bit scan reverse:::
ArithmeticLIRGeneratorTool#emitLoad(LIRKind, Value, LIRFrameState)::: arithmetic generator tool emit load:::
ArithmeticLIRGeneratorTool#emitStore(ValueKind, Value, Value, LIRFrameState)::: arithmetic generator tool emit store:::
ArithmeticLIRGeneratorTool#emitFusedMultiplyAdd(Value, Value, Value)::: arithmetic generator tool emit fused multiply add:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathLog(Value, boolean)::: arithmetic generator tool emit math log:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathCos(Value)::: arithmetic generator tool emit math cos:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathSin(Value)::: arithmetic generator tool emit math sin:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathTan(Value)::: arithmetic generator tool emit math tan:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathExp(Value)::: arithmetic generator tool emit math exp:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitMathPow(Value, Value)::: arithmetic generator tool emit math pow:::throw->GraalError->unimplemented
ArithmeticLIRGeneratorTool#emitZeroMemory(Value, Value)::: arithmetic generator tool emit zero memory:::throw->GraalError->unimplemented
BlockValueMap#accessOperand(Value, AbstractBlockBase)::: block value map access operand:::
BlockValueMap#defineOperand(Value, AbstractBlockBase)::: block value map define operand:::
DiagnosticLIRGeneratorTool#createBenchmarkCounter(String, String, Value)::: diagnostic generator tool create benchmark counter:::
DiagnosticLIRGeneratorTool#createMultiBenchmarkCounter(String[], String[], Value[])::: diagnostic generator tool create multi benchmark counter:::
DiagnosticLIRGeneratorTool#createZapRegisters(Register[], JavaConstant[]):::Creates a SaveRegistersOp that fills a given set of registers with known garbage value:::
DiagnosticLIRGeneratorTool#createZapRegisters():::Creates a SaveRegistersOp that fills all RegisterConfig#getAllocatableRegisters() allocatable registers with a LIRGenerator#zapValueForKind known garbage value:::
DiagnosticLIRGeneratorTool#createZapArgumentSpace(StackSlot[], JavaConstant[])::: diagnostic generator tool create zap argument space:::
DiagnosticLIRGeneratorTool#zapArgumentSpace()::: diagnostic generator tool zap argument space:::
LIRGenerationResult#setComment(LIRInstruction, String):::Adds a comment to a LIRInstruction:::debug->lir->getDebug->if->debug->isDumpEnabled->if->EconomicMap->create->comments->put
LIRGenerationResult#getComment(LIRInstruction):::Gets the comment attached to a LIRInstruction.:::if->return->return->comments->get
LIRGenerationResult#getCallingConvention():::Returns the incoming calling convention for the parameters of the method that is compiled.:::return
LIRGenerationResult#getFrameMapBuilder():::Returns the FrameMapBuilder for collecting the information to build a FrameMap:::return
LIRGenerationResult#buildFrameMap():::Creates a FrameMap out of the FrameMapBuilder:::frameMapBuilder->buildFrameMap
LIRGenerationResult#getFrameMap():::Returns the FrameMap associated with this LIRGenerationResult:::return
LIRGenerationResult#getRegisterConfig()::: generation result get register config:::return->frameMapBuilder->getRegisterConfig
LIRGenerationResult#getLIR()::: generation result get r:::return
LIRGenerationResult#hasForeignCall():::Determines whether the code being generated makes at least one foreign call.:::return
LIRGenerationResult#setForeignCall(boolean)::: generation result set foreign call:::
LIRGenerationResult#getCompilationUnitName()::: generation result get compilation unit name:::if->return->return->compilationId->toString
LIRGenerationResult#getCompilationId():::Returns a unique identifier of the current compilation.:::return
LIRGenerator#getArithmetic()::: generator get arithmetic:::return
LIRGenerator#getMoveFactory()::: generator get move factory:::return
LIRGenerator#getSpillMoveFactory()::: generator get spill move factory:::if->verify->if->new->VerifyingMoveFactory->else->return
LIRGenerator#getValueKind(JavaKind)::: generator get value kind:::return->LIRKind->target->fromJavaKind
LIRGenerator#target()::: generator target:::return->getCodeCache->getTarget
LIRGenerator#getProviders()::: generator get providers:::return
LIRGenerator#getMetaAccess()::: generator get meta access:::return->providers->getMetaAccess
LIRGenerator#getCodeCache()::: generator get code cache:::return->providers->getCodeCache
LIRGenerator#getForeignCalls()::: generator get foreign calls:::return->providers->getForeignCalls
LIRGenerator#getLIRKindTool()::: generator get kind tool:::return
LIRGenerator.VariableProvider#numVariables()::: variable provider num variables:::return
LIRGenerator.VariableProvider#nextVariable()::: variable provider next variable:::return
LIRGenerator#newVariable(ValueKind)::: generator new variable:::return->res->getLIR->nextVariable->new->Variable
LIRGenerator#getRegisterConfig()::: generator get register config:::return->res->getRegisterConfig
LIRGenerator#attributes(Register)::: generator attributes:::return->getRegisterConfig->getAttributesMap
LIRGenerator#emitMove(Value)::: generator emit move:::result->input->getValueKind->newVariable->emitMove->return
LIRGenerator#emitMove(AllocatableValue, Value)::: generator emit move:::moveFactory->createMove->append
LIRGenerator#emitReadRegister(Register, ValueKind)::: generator emit read register:::return->register->asValue->emitMove
LIRGenerator#emitWriteRegister(Register, Value, ValueKind)::: generator emit write register:::dst->asValue->emitMove
LIRGenerator#emitMoveConstant(AllocatableValue, Constant)::: generator emit move constant:::moveFactory->createLoad->append
LIRGenerator#canInlineConstant(Constant)::: generator can inline constant:::return->moveFactory->canInlineConstant
LIRGenerator#mayEmbedConstantLoad(Constant)::: generator may embed constant load:::return->moveFactory->mayEmbedConstantLoad
LIRGenerator#emitConstant(LIRKind, Constant)::: generator emit constant:::if->moveFactory->canInlineConstant->return->toRegisterKind->new->ConstantValue->else->return->toRegisterKind->emitLoadConstant
LIRGenerator#emitJavaConstant(JavaConstant)::: generator emit java constant:::return->constant->getJavaKind->getValueKind->emitConstant
LIRGenerator#emitLoadConstant(ValueKind, Constant)::: generator emit load constant:::result->newVariable->emitMoveConstant->return
LIRGenerator#asAllocatable(Value)::: generator as allocatable:::if->isAllocatableValue->return->asAllocatableValue->else->if->isConstantValue->return->value->getValueKind->asConstant->emitLoadConstant->else->return->emitMove
LIRGenerator#load(Value)::: generator load:::if->isVariable->return->emitMove->return
LIRGenerator#loadNonConst(Value)::: generator load non const:::if->isConstantValue->moveFactory->asConstant->canInlineConstant->return->emitMove->return
LIRGenerator#needOnlyOopMaps():::Determines if only oop maps are required for the code generated from the LIR.:::return
LIRGenerator#resultOperandFor(JavaKind, ValueKind):::Gets the ABI specific operand used to return a value of a given kind from a method.:::reg->getRegisterConfig->getReturnRegister->return->reg->asValue
LIRGenerator#setSourcePosition(NodeSourcePosition)::: generator set source position:::
LIRGenerator#append(I)::: generator append:::lir->res->getLIR->if->TTY->op->toStringWithIdPrefix->println->TTY->println->lirForBlock->lir->getCurrentBlock->getLIRforBlock->op->setPosition->lirForBlock->add->return
LIRGenerator#hasBlockEnd(AbstractBlockBase)::: generator has block end:::ops->getResult->getLIR->getLIRforBlock->if->ops->size->return->return->ops->ops->size->get
LIRGenerator.BlockScopeImpl#doBlockStart()::: block scope impl do block start:::if->TTY->currentBlock->toString->print->res->getLIR->new->ArrayList<LIRInstruction>->setLIRforBlock->currentBlock->getId->new->Label->currentBlock->isAligned->new->LabelOp->append->if->TTY->currentBlock->getId->println
LIRGenerator.BlockScopeImpl#doBlockEnd()::: block scope impl do block end:::if->TTY->currentBlock->getId->println->if->TTY->println
LIRGenerator.BlockScopeImpl#getCurrentBlock()::: block scope impl get current block:::return
LIRGenerator.BlockScopeImpl#close()::: block scope impl close:::doBlockEnd
LIRGenerator#getBlockScope(AbstractBlockBase)::: generator get block scope:::blockScope->new->BlockScopeImpl->blockScope->doBlockStart->return
LIRGenerator.MatchScope#close()::: match scope close:::
LIRGenerator#getMatchScope(AbstractBlockBase)::: generator get match scope:::matchScope->new->MatchScope->return
LIRGenerator#emitIncomingValues(Value[])::: generator emit incoming values:::res->getLIR->getCurrentBlock->getLIRforBlock->get->setIncomingValues
LIRGenerator#emitJump(LabelRef)::: generator emit jump:::
LIRGenerator#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)::: generator emit compare branch:::
LIRGenerator#emitOverflowCheckBranch(LabelRef, LabelRef, LIRKind, double)::: generator emit overflow check branch:::
LIRGenerator#emitIntegerTestBranch(Value, Value, LabelRef, LabelRef, double)::: generator emit integer test branch:::
LIRGenerator#emitConditionalMove(PlatformKind, Value, Value, Condition, boolean, Value, Value)::: generator emit conditional move:::
LIRGenerator#emitIntegerTestMove(Value, Value, Value, Value)::: generator emit integer test move:::
LIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState):::Emits the single call operation at the heart of generating LIR for a #emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...) foreign call.:::
LIRGenerator#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)::: generator emit foreign call:::state->if->linkage->needsDebugInfo->if->else->new->LIRFrameState->linkageCc->linkage->getOutgoingCallingConvention->res->getFrameMapBuilder->callsMethod->argLocations->new->ValueArr->for->i->res->setForeignCall->linkageCc->getReturn->linkage->getTemporaries->emitForeignCallOp->if->linkageCc->getReturn->isLegal->return->linkageCc->getReturn->emitMove->else->return
LIRGenerator#emitStrategySwitch(JavaConstant[], double[], LabelRef[], LabelRef, Variable)::: generator emit strategy switch:::strategy->SwitchStrategy->getBestStrategy->keyCount->minDensity->Math->strategy->getAverageEffort->sqrt->hasher->hasherFor->hashTableSwitchDensity->hasher->h->cardinality->map->orElse->valueRange->asInt->asInt->tableSwitchDensity->if->strategy->getAverageEffort->emitStrategySwitch->else->if->h->hasher->get->cardinality->h->cardinality->targets->new->LabelRefArr->keys->new->JavaConstantArr->for->i->for->i->emitHashTableSwitch->else->minValue->asInt->targets->new->LabelRefArr->for->i->for->i->emitTableSwitch
LIRGenerator#emitStrategySwitch(SwitchStrategy, Variable, LabelRef[], LabelRef)::: generator emit strategy switch:::
LIRGenerator#emitTableSwitch(int, LabelRef, LabelRef[], Value)::: generator emit table switch:::
LIRGenerator#hasherFor(JavaConstant[], double)::: generator hasher for:::return->Optional->empty
LIRGenerator#emitHashTableSwitch(Hasher, JavaConstant[], LabelRef, LabelRef[], Value)::: generator emit hash table switch:::throw->getClass->getSimpleName->new->UnsupportedOperationException
LIRGenerator#beforeRegisterAllocation()::: generator before register allocation:::
LIRGenerator#zapValueForKind(PlatformKind):::Gets a garbage value for a given kind.:::
LIRGenerator#getLIRKind(Stamp)::: generator get kind:::return->stamp->getLIRKind
LIRGenerator#getAddressKind(Value, long, Value)::: generator get address kind:::if->LIRKind->isValue->index->equals->LIRKind->isValue->return->LIRKind->target->getWordKind->value->else->if->base->getValueKind->base->getValueKind->isReference->index->equals->return->LIRKind->target->getWordKind->reference->else->return->LIRKind->target->getWordKind->unknownReference
LIRGenerator#getCurrentBlock()::: generator get current block:::return
LIRGenerator#getResult()::: generator get result:::return
LIRGenerator#emitBlackhole(Value)::: generator emit blackhole:::new->StandardOp.BlackholeOp->append
LIRGenerator#createBenchmarkCounter(String, String, Value)::: generator create benchmark counter:::throw->GraalError->unimplemented
LIRGenerator#createMultiBenchmarkCounter(String[], String[], Value[])::: generator create multi benchmark counter:::throw->GraalError->unimplemented
LIRGenerator#createZapRegisters(Register[], JavaConstant[])::: generator create zap registers:::
LIRGenerator#createZapRegisters()::: generator create zap registers:::zappedRegisters->getResult->getFrameMap->getRegisterConfig->getAllocatableRegisters->toArray->zapValues->new->JavaConstantArr->for->i->return->createZapRegisters
LIRGenerator#createZapArgumentSpace(StackSlot[], JavaConstant[])::: generator create zap argument space:::
LIRGenerator#zapArgumentSpace()::: generator zap argument space:::slots->foreach->res->getCallingConvention->getArguments->if->isStackSlot->if->new->ArrayList<>->slots->add->else->if->return->zappedStack->slots->slots->size->new->StackSlotArr->toArray->zapValues->new->JavaConstantArr->for->i->return->createZapArgumentSpace
LIRGeneratorTool.MoveFactory#mayEmbedConstantLoad(Constant):::Checks whether the loading of the supplied constant can be deferred until usage.:::return
LIRGeneratorTool.MoveFactory#canInlineConstant(Constant):::Checks whether the supplied constant can be used without loading it into a register for most operations, i.e., for commonly used arithmetic, logical, and comparison operations.:::
LIRGeneratorTool.MoveFactory#allowConstantToStackMove(Constant)::: move factory allow constant to stack move:::
LIRGeneratorTool.MoveFactory#createMove(AllocatableValue, Value)::: move factory create move:::
LIRGeneratorTool.MoveFactory#createStackMove(AllocatableValue, AllocatableValue)::: move factory create stack move:::
LIRGeneratorTool.MoveFactory#createLoad(AllocatableValue, Constant)::: move factory create load:::
LIRGeneratorTool.MoveFactory#createStackLoad(AllocatableValue, Constant)::: move factory create stack load:::
LIRGeneratorTool.BlockScope#getCurrentBlock()::: block scope get current block:::
LIRGeneratorTool.BlockScope#close()::: block scope close:::
LIRGeneratorTool#getArithmetic()::: generator tool get arithmetic:::
LIRGeneratorTool#getProviders()::: generator tool get providers:::
LIRGeneratorTool#target()::: generator tool target:::
LIRGeneratorTool#getMetaAccess()::: generator tool get meta access:::
LIRGeneratorTool#getCodeCache()::: generator tool get code cache:::
LIRGeneratorTool#getForeignCalls()::: generator tool get foreign calls:::
LIRGeneratorTool#getCurrentBlock()::: generator tool get current block:::
LIRGeneratorTool#getResult()::: generator tool get result:::
LIRGeneratorTool#getRegisterConfig()::: generator tool get register config:::
LIRGeneratorTool#hasBlockEnd(AbstractBlockBase)::: generator tool has block end:::
LIRGeneratorTool#getMoveFactory()::: generator tool get move factory:::
LIRGeneratorTool#getSpillMoveFactory():::Get a special MoveFactory for spill moves:::
LIRGeneratorTool#getBlockScope(AbstractBlockBase)::: generator tool get block scope:::
LIRGeneratorTool#canInlineConstant(Constant)::: generator tool can inline constant:::
LIRGeneratorTool#mayEmbedConstantLoad(Constant)::: generator tool may embed constant load:::
LIRGeneratorTool#emitConstant(LIRKind, Constant)::: generator tool emit constant:::
LIRGeneratorTool#emitJavaConstant(JavaConstant)::: generator tool emit java constant:::
LIRGeneratorTool#toRegisterKind(K):::Some backends need to convert sub-word kinds to a larger kind in ArithmeticLIRGeneratorTool#emitLoad and #emitLoadConstant because sub-word registers can't be accessed:::
LIRGeneratorTool#emitLoadConstant(ValueKind, Constant)::: generator tool emit load constant:::
LIRGeneratorTool#emitNullCheck(Value, LIRFrameState)::: generator tool emit null check:::
LIRGeneratorTool#emitLogicCompareAndSwap(LIRKind, Value, Value, Value, Value, Value)::: generator tool emit logic compare and swap:::
LIRGeneratorTool#emitValueCompareAndSwap(LIRKind, Value, Value, Value)::: generator tool emit value compare and swap:::
LIRGeneratorTool#emitAtomicReadAndAdd(Value, ValueKind, Value):::Emit an atomic read-and-add instruction.:::throw->GraalError->unimplemented
LIRGeneratorTool#emitAtomicReadAndWrite(Value, ValueKind, Value):::Emit an atomic read-and-write instruction.:::throw->GraalError->unimplemented
LIRGeneratorTool#emitDeoptimize(Value, Value, LIRFrameState)::: generator tool emit deoptimize:::
LIRGeneratorTool#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)::: generator tool emit foreign call:::
LIRGeneratorTool#attributes(Register)::: generator tool attributes:::
LIRGeneratorTool#newVariable(ValueKind):::Create a new Variable.:::
LIRGeneratorTool#emitMove(Value)::: generator tool emit move:::
LIRGeneratorTool#emitMove(AllocatableValue, Value)::: generator tool emit move:::
LIRGeneratorTool#emitReadRegister(Register, ValueKind)::: generator tool emit read register:::
LIRGeneratorTool#emitWriteRegister(Register, Value, ValueKind)::: generator tool emit write register:::
LIRGeneratorTool#emitMoveConstant(AllocatableValue, Constant)::: generator tool emit move constant:::
LIRGeneratorTool#emitAddress(AllocatableValue)::: generator tool emit address:::
LIRGeneratorTool#emitMembar(int)::: generator tool emit membar:::
LIRGeneratorTool#emitUnwind(Value)::: generator tool emit unwind:::
LIRGeneratorTool#beforeRegisterAllocation():::Called just before register allocation is performed on the LIR owned by this generator:::
LIRGeneratorTool#emitIncomingValues(Value[])::: generator tool emit incoming values:::
LIRGeneratorTool#emitReturn(JavaKind, Value):::Emits a return instruction:::
LIRGeneratorTool#asAllocatable(Value)::: generator tool as allocatable:::
LIRGeneratorTool#load(Value)::: generator tool load:::
LIRGeneratorTool#loadNonConst(Value)::: generator tool load non const:::
LIRGeneratorTool#needOnlyOopMaps():::Determines if only oop maps are required for the code generated from the LIR.:::
LIRGeneratorTool#resultOperandFor(JavaKind, ValueKind):::Gets the ABI specific operand used to return a value of a given kind from a method.:::
LIRGeneratorTool#append(I)::: generator tool append:::
LIRGeneratorTool#setSourcePosition(NodeSourcePosition)::: generator tool set source position:::
LIRGeneratorTool#emitJump(LabelRef)::: generator tool emit jump:::
LIRGeneratorTool#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)::: generator tool emit compare branch:::
LIRGeneratorTool#emitOverflowCheckBranch(LabelRef, LabelRef, LIRKind, double)::: generator tool emit overflow check branch:::
LIRGeneratorTool#emitIntegerTestBranch(Value, Value, LabelRef, LabelRef, double)::: generator tool emit integer test branch:::
LIRGeneratorTool#emitConditionalMove(PlatformKind, Value, Value, Condition, boolean, Value, Value)::: generator tool emit conditional move:::
LIRGeneratorTool#emitIntegerTestMove(Value, Value, Value, Value)::: generator tool emit integer test move:::
LIRGeneratorTool#emitStrategySwitch(JavaConstant[], double[], LabelRef[], LabelRef, Variable)::: generator tool emit strategy switch:::
LIRGeneratorTool#emitStrategySwitch(SwitchStrategy, Variable, LabelRef[], LabelRef)::: generator tool emit strategy switch:::
LIRGeneratorTool#emitByteSwap(Value)::: generator tool emit byte swap:::
LIRGeneratorTool#emitArrayCompareTo(JavaKind, JavaKind, Value, Value, Value, Value)::: generator tool emit array compare to:::throw->GraalError->unimplemented
LIRGeneratorTool#emitArrayEquals(JavaKind, Value, Value, Value, int, boolean)::: generator tool emit array equals:::
LIRGeneratorTool#emitArrayEquals(JavaKind, JavaKind, Value, Value, Value, int, boolean)::: generator tool emit array equals:::throw->GraalError->unimplemented
LIRGeneratorTool#emitArrayIndexOf(JavaKind, JavaKind, boolean, Value, Value, Value, Value...)::: generator tool emit array index of:::throw->GraalError->unimplemented
LIRGeneratorTool#emitStringLatin1Inflate(Value, Value, Value)::: generator tool emit string latin1 inflate:::throw->GraalError->unimplemented
LIRGeneratorTool#emitStringUTF16Compress(Value, Value, Value)::: generator tool emit string f16 compress:::throw->GraalError->unimplemented
LIRGeneratorTool#emitBlackhole(Value)::: generator tool emit blackhole:::
LIRGeneratorTool#getLIRKind(Stamp)::: generator tool get kind:::
LIRGeneratorTool#emitPause()::: generator tool emit pause:::
LIRGeneratorTool#emitPrefetchAllocate(Value)::: generator tool emit prefetch allocate:::
LIRGeneratorTool#emitCompress(Value, CompressEncoding, boolean)::: generator tool emit compress:::
LIRGeneratorTool#emitUncompress(Value, CompressEncoding, boolean)::: generator tool emit uncompress:::
LIRGeneratorTool#emitConvertNullToZero(AllocatableValue, Value)::: generator tool emit convert null to zero:::emitMove
LIRGeneratorTool#emitConvertZeroToNull(AllocatableValue, Value)::: generator tool emit convert zero to null:::emitMove
LIRGeneratorTool#emitSpeculationFence():::Emits an instruction that prevents speculative execution from proceeding: no instruction after this fence will execute until all previous instructions have retired.:::
LIRGeneratorTool#allocateStackSlots(int)::: generator tool allocate stack slots:::return->getResult->getFrameMapBuilder->allocateStackSlots
LIRGeneratorTool#emitReadCallerStackPointer(Stamp)::: generator tool emit read caller stack pointer:::return->StackSlot->getLIRKind->get->emitAddress
LIRGeneratorTool#emitReadReturnAddress(Stamp, int)::: generator tool emit read return address:::return->StackSlot->getLIRKind->get->emitMove
PhiResolver.PhiResolverNode#toString()::: phi resolver node to string:::buf->operand->toString->new->StringBuilder->if->destinations->isEmpty->buf->append->foreach->buf->append->append->return->buf->toString
PhiResolver#create(LIRGeneratorTool)::: phi resolver create:::block->gen->getCurrentBlock->instructions->gen->getResult->getLIR->getLIRforBlock->return->new->LIRInsertionBuffer->instructions->size->new->PhiResolver
PhiResolver#create(LIRGeneratorTool, LIRInsertionBuffer, List, int)::: phi resolver create:::return->new->PhiResolver
PhiResolver#dispose()::: phi resolver dispose:::for->i->variableOperands->size->for->i->otherOperands->size->buffer->finish
PhiResolver#move(Value, Value)::: phi resolver move:::srcNode->sourceNode->destNode->destinationNode->add
PhiResolver#createNode(Value, boolean)::: phi resolver create node:::node->if->isVariable->operandToNodeMap->get->if->new->PhiResolverNode->operandToNodeMap->put->if->if->variableOperands->contains->variableOperands->add->else->new->PhiResolverNode->otherOperands->add->return
PhiResolver#destinationNode(Value)::: phi resolver destination node:::return->createNode
PhiResolver#emitMove(Value, Value)::: phi resolver emit move:::move->moveFactory->createMove->buffer->append
PhiResolver#move(PhiResolverNode, PhiResolverNode)::: phi resolver move:::if->for->i->size->else->if->moveToTemp->return->if->if->moveTempTo->else->if->emitMove
PhiResolver#moveTempTo(Value)::: phi resolver move temp to:::emitMove
PhiResolver#moveToTemp(Value)::: phi resolver move to temp:::gen->src->getValueKind->newVariable->emitMove
PhiResolver#sourceNode(Value)::: phi resolver source node:::return->createNode
VerifyingMoveFactory#canInlineConstant(Constant)::: verifying move factory can inline constant:::return->inner->canInlineConstant
VerifyingMoveFactory#allowConstantToStackMove(Constant)::: verifying move factory allow constant to stack move:::return->inner->allowConstantToStackMove
VerifyingMoveFactory#createMove(AllocatableValue, Value)::: verifying move factory create move:::inst->inner->createMove->return
VerifyingMoveFactory#createStackMove(AllocatableValue, AllocatableValue)::: verifying move factory create stack move:::inst->inner->createStackMove->return
VerifyingMoveFactory#createLoad(AllocatableValue, Constant)::: verifying move factory create load:::inst->inner->createLoad->return
VerifyingMoveFactory#createStackLoad(AllocatableValue, Constant)::: verifying move factory create stack load:::inst->inner->createStackLoad->return
VerifyingMoveFactory.CheckClosure#tempProc(LIRInstruction, Value, OperandMode, EnumSet)::: check closure temp proc:::
VerifyingMoveFactory.CheckClosure#stateProc(LIRInstruction, Value, OperandMode, EnumSet)::: check closure state proc:::
VerifyingMoveFactory.CheckClosure#aliveProc(LIRInstruction, Value, OperandMode, EnumSet)::: check closure alive proc:::
VerifyingMoveFactory.CheckClosure#inputProc(LIRInstruction, Value, OperandMode, EnumSet)::: check closure input proc:::
VerifyingMoveFactory.CheckClosure#outputProc(LIRInstruction, Value, OperandMode, EnumSet)::: check closure output proc:::
VerifyingMoveFactory#checkResult(LIRInstruction, AllocatableValue, Value):::Checks that the instructions adheres to the contract of MoveFactory.:::c->new->CheckClosure->inst->c->inputProc->visitEachInput->inst->c->outputProc->visitEachOutput->inst->c->aliveProc->visitEachAlive->inst->c->tempProc->visitEachTemp->inst->c->stateProc->visitEachState->return

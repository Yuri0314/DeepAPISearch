ArrayCompare01#test(int)::: array compare01 test:::if->return->compare->if->return->compare->return
ArrayCompare01#compare(long[], long[])::: array compare01 compare:::if->for->i->return->return
ArrayCompare01#run0()::: array compare01 run0:::runTest
ArrayCompare01#run1()::: array compare01 run1:::runTest
ArrayCompare02#test(int)::: array compare02 test:::if->return->compare->if->return->compare->if->return->compare->return
ArrayCompare02#compare(long[])::: array compare02 compare:::return
ArrayCompare02#run0()::: array compare02 run0:::runTest
ArrayCompare02#run1()::: array compare02 run1:::runTest
ArrayCompare02#run2()::: array compare02 run2:::runTest
ArrayCompare02#run3()::: array compare02 run3:::runTest
BC_invokevirtual2.Unresolved#id(int)::: unresolved id:::return
BC_invokevirtual2#object()::: c_invokevirtual2 object:::if->new->Unresolved->return
BC_invokevirtual2#test(int)::: c_invokevirtual2 test:::return->object->id
BC_invokevirtual2#run0()::: c_invokevirtual2 run0:::runTest
BC_invokevirtual2#run1()::: c_invokevirtual2 run1:::runTest
BC_invokevirtual2#run2()::: c_invokevirtual2 run2:::runTest
BC_invokevirtual2#run3()::: c_invokevirtual2 run3:::runTest
BC_invokevirtual2#run4()::: c_invokevirtual2 run4:::runTest
BigByteParams01#test(int)::: big byte params01 test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->return
BigByteParams01#testA(int, byte, byte, byte, byte, byte, byte, byte, byte, byte)::: big byte params01 test a:::switch->return->return->return->return->return->return->return->return->return->return
BigByteParams01#testB(int, long, long, long, long, long, long, long, long, long)::: big byte params01 test b:::switch->return->return->return->return->return->return->return->return->return->return
BigByteParams01#run0()::: big byte params01 run0:::runTest
BigByteParams01#run1()::: big byte params01 run1:::runTest
BigByteParams01#run2()::: big byte params01 run2:::runTest
BigByteParams01#run3()::: big byte params01 run3:::runTest
BigByteParams01#run4()::: big byte params01 run4:::runTest
BigDoubleParams02#test(int, double, double, double, double, double, double, double, double, double)::: big double params02 test:::switch->return->return->return->return->return->return->return->return->return->return
BigDoubleParams02#run0()::: big double params02 run0:::runTest
BigDoubleParams02#run1()::: big double params02 run1:::runTest
BigDoubleParams02#run2()::: big double params02 run2:::runTest
BigDoubleParams02#run3()::: big double params02 run3:::runTest
BigDoubleParams02#run4()::: big double params02 run4:::runTest
BigDoubleParams02#run5()::: big double params02 run5:::runTest
BigDoubleParams02#run6()::: big double params02 run6:::runTest
BigDoubleParams02#run7()::: big double params02 run7:::runTest
BigDoubleParams02#run8()::: big double params02 run8:::runTest
BigFloatParams01#test(int)::: big float params01 test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->return
BigFloatParams01#testA(int, float, float, float, float, float, float, float, float, float)::: big float params01 test a:::switch->return->return->return->return->return->return->return->return->return->return
BigFloatParams01#testB(int, double, double, double, double, double, double, double, double, double)::: big float params01 test b:::switch->return->return->return->return->return->return->return->return->return->return
BigFloatParams01#run0()::: big float params01 run0:::runTest
BigFloatParams01#run1()::: big float params01 run1:::runTest
BigFloatParams01#run2()::: big float params01 run2:::runTest
BigFloatParams01#run3()::: big float params01 run3:::runTest
BigFloatParams01#run4()::: big float params01 run4:::runTest
BigFloatParams02#test(int, float, float, float, float, float, float, float, float, float)::: big float params02 test:::switch->return->return->return->return->return->return->return->return->return->return
BigFloatParams02#run0()::: big float params02 run0:::runTest
BigFloatParams02#run1()::: big float params02 run1:::runTest
BigFloatParams02#run2()::: big float params02 run2:::runTest
BigFloatParams02#run3()::: big float params02 run3:::runTest
BigFloatParams02#run4()::: big float params02 run4:::runTest
BigFloatParams02#run5()::: big float params02 run5:::runTest
BigFloatParams02#run6()::: big float params02 run6:::runTest
BigFloatParams02#run7()::: big float params02 run7:::runTest
BigFloatParams02#run8()::: big float params02 run8:::runTest
BigInterfaceParams01#test(boolean, String, String, String, String, String, String, String, String, String, String)::: big interface params01 test:::i->new->A->new->B->return->i->test
BigInterfaceParams01.I#test(String, String, String, String, String, String, String, String, String, String)::: i test:::
BigInterfaceParams01.A#test(String, String, String, String, String, String, String, String, String, String)::: a test:::return
BigInterfaceParams01.B#test(String, String, String, String, String, String, String, String, String, String)::: b test:::return
BigInterfaceParams01#run0()::: big interface params01 run0:::runTest
BigInterfaceParams01#run1()::: big interface params01 run1:::runTest
BigIntParams01#test(int)::: big int params01 test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->return
BigIntParams01#testA(int, int, int, int, int, int, int, int, int, int)::: big int params01 test a:::switch->return->return->return->return->return->return->return->return->return->return
BigIntParams01#testB(int, long, long, long, long, long, long, long, long, long)::: big int params01 test b:::switch->return->return->return->return->return->return->return->return->return->return
BigIntParams01#run0()::: big int params01 run0:::runTest
BigIntParams01#run1()::: big int params01 run1:::runTest
BigIntParams01#run2()::: big int params01 run2:::runTest
BigIntParams01#run3()::: big int params01 run3:::runTest
BigIntParams01#run4()::: big int params01 run4:::runTest
BigIntParams02#test(int, int, int, int, int, int, int, int, int, int)::: big int params02 test:::switch->return->return->return->return->return->return->return->return->return->return
BigIntParams02#run0()::: big int params02 run0:::runTest
BigIntParams02#run1()::: big int params02 run1:::runTest
BigIntParams02#run2()::: big int params02 run2:::runTest
BigIntParams02#run3()::: big int params02 run3:::runTest
BigIntParams02#run4()::: big int params02 run4:::runTest
BigIntParams02#run5()::: big int params02 run5:::runTest
BigIntParams02#run6()::: big int params02 run6:::runTest
BigIntParams02#run7()::: big int params02 run7:::runTest
BigIntParams02#run8()::: big int params02 run8:::runTest
BigLongParams02#test(int, long, long, long, long, long, long, long, long, long)::: big long params02 test:::switch->return->return->return->return->return->return->return->return->return->return
BigLongParams02#run0()::: big long params02 run0:::runTest
BigLongParams02#run1()::: big long params02 run1:::runTest
BigLongParams02#run2()::: big long params02 run2:::runTest
BigLongParams02#run3()::: big long params02 run3:::runTest
BigLongParams02#run4()::: big long params02 run4:::runTest
BigLongParams02#run5()::: big long params02 run5:::runTest
BigLongParams02#run6()::: big long params02 run6:::runTest
BigLongParams02#run7()::: big long params02 run7:::runTest
BigLongParams02#run8()::: big long params02 run8:::runTest
BigMixedParams01#test(int)::: big mixed params01 test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->return
BigMixedParams01#testA(int, int, int, int, int, float, float, float, float, int, int, float, float, float, float, float)::: big mixed params01 test a:::switch->return->return->return->return->return->return->return->return->return->return
BigMixedParams01#testB(int, int, int, int, double, double, double, double, int, int, double, double, double, double, double)::: big mixed params01 test b:::switch->return->return->return->return->return->return->return->return->return->return
BigMixedParams01#run0()::: big mixed params01 run0:::runTest
BigMixedParams01#run1()::: big mixed params01 run1:::runTest
BigMixedParams01#run2()::: big mixed params01 run2:::runTest
BigMixedParams01#run3()::: big mixed params01 run3:::runTest
BigMixedParams01#run4()::: big mixed params01 run4:::runTest
BigMixedParams02#test(int, int, int, int, int, float, float, float, float, int, int, float, float, float, float, float)::: big mixed params02 test:::switch->return->return->return->return->return->return->return->return->return->return
BigMixedParams02#run0()::: big mixed params02 run0:::runTest
BigMixedParams02#run1()::: big mixed params02 run1:::runTest
BigMixedParams02#run2()::: big mixed params02 run2:::runTest
BigMixedParams02#run3()::: big mixed params02 run3:::runTest
BigMixedParams02#run4()::: big mixed params02 run4:::runTest
BigMixedParams02#run5()::: big mixed params02 run5:::runTest
BigMixedParams02#run6()::: big mixed params02 run6:::runTest
BigMixedParams02#run7()::: big mixed params02 run7:::runTest
BigMixedParams02#run8()::: big mixed params02 run8:::runTest
BigMixedParams03#test(int, int, int, int, int, double, double, double, double, int, int, double, double, double, double, double)::: big mixed params03 test:::switch->return->return->return->return->return->return->return->return->return->return
BigMixedParams03#run0()::: big mixed params03 run0:::runTest
BigMixedParams03#run1()::: big mixed params03 run1:::runTest
BigMixedParams03#run2()::: big mixed params03 run2:::runTest
BigMixedParams03#run3()::: big mixed params03 run3:::runTest
BigMixedParams03#run4()::: big mixed params03 run4:::runTest
BigMixedParams03#run5()::: big mixed params03 run5:::runTest
BigMixedParams03#run6()::: big mixed params03 run6:::runTest
BigMixedParams03#run7()::: big mixed params03 run7:::runTest
BigMixedParams03#run8()::: big mixed params03 run8:::runTest
BigMixedParams04#test(int, int, int, int, int, double, double, boolean, boolean, byte, short, char, int)::: big mixed params04 test:::switch->return->return->return->return->return->return->return
BigMixedParams04#test2(int, float, double, float, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float):::Test SPARC mixed params with double/single float register overlapping.:::for->i->orderFloat->orderDouble->if->return->Assert->fail->return
BigMixedParams04#test3(boolean, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float):::Test SPARC mixed params with double/single float register overlapping.:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->Assert->fail->return
BigMixedParams04#run0()::: big mixed params04 run0:::runTest
BigMixedParams04#run1()::: big mixed params04 run1:::runTest
BigMixedParams04#run2()::: big mixed params04 run2:::runTest
BigMixedParams04#run3()::: big mixed params04 run3:::runTest
BigMixedParams04#run4()::: big mixed params04 run4:::runTest
BigMixedParams04#run5()::: big mixed params04 run5:::runTest
BigMixedParams04#run6()::: big mixed params04 run6:::runTest
BigMixedParams04#run7()::: big mixed params04 run7:::for->i
BigObjectParams01#test(String, String, String, String, String, String, String, String, String, String)::: big object params01 test:::return
BigObjectParams01#run0()::: big object params01 run0:::runTest
BigObjectParams01#run1()::: big object params01 run1:::runTest
BigObjectParams02#test(String, String, String, String, String, String, String, String, String, String)::: big object params02 test:::return
BigObjectParams02#run0()::: big object params02 run0:::runTest
BigParamsAlignment#test(int)::: big params alignment test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->else->if->for->i->else->if->for->i->return
BigParamsAlignment#testA(int, int, int, int, int, int, int, int, int, int)::: big params alignment test a:::switch->return->return->return->return->return->return->return->return->return->return
BigParamsAlignment#testB(int, int, int, int, int, int, int, int, int, int, int)::: big params alignment test b:::switch->return->return->return->return->return->return->return->return->return->return->return
BigParamsAlignment#testC(int, int, int, int, int, int, int, int, int, int, int, int)::: big params alignment test c:::switch->return->return->return->return->return->return->return->return->return->return->return->return
BigParamsAlignment#testD(int, int, int, int, int, int, int, int, int, int, int, int, int)::: big params alignment test d:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return
BigParamsAlignment#run0()::: big params alignment run0:::runTest
BigParamsAlignment#run1()::: big params alignment run1:::runTest
BigParamsAlignment#run2()::: big params alignment run2:::runTest
BigParamsAlignment#run3()::: big params alignment run3:::runTest
BigParamsAlignment#run4()::: big params alignment run4:::runTest
BigParamsAlignment#run5()::: big params alignment run5:::runTest
BigParamsAlignment#run6()::: big params alignment run6:::runTest
BigShortParams01#test(int)::: big short params01 test:::sum->if->testA->testA->testA->testA->testA->testA->testA->testA->testA->else->if->testB->testB->testB->testB->testB->testB->testB->testB->testB->else->if->for->i->else->if->for->i->return
BigShortParams01#testA(int, short, short, short, short, short, short, short, short, short)::: big short params01 test a:::switch->return->return->return->return->return->return->return->return->return->return
BigShortParams01#testB(int, long, long, long, long, long, long, long, long, long)::: big short params01 test b:::switch->return->return->return->return->return->return->return->return->return->return
BigShortParams01#run0()::: big short params01 run0:::runTest
BigShortParams01#run1()::: big short params01 run1:::runTest
BigShortParams01#run2()::: big short params01 run2:::runTest
BigShortParams01#run3()::: big short params01 run3:::runTest
BigShortParams01#run4()::: big short params01 run4:::runTest
BigVirtualParams01#test(boolean, String, String, String, String, String, String, String, String, String, String)::: big virtual params01 test:::i->new->A->new->B->return->i->test
BigVirtualParams01.I#test(String, String, String, String, String, String, String, String, String, String)::: i test:::
BigVirtualParams01.A#test(String, String, String, String, String, String, String, String, String, String)::: a test:::return
BigVirtualParams01.B#test(String, String, String, String, String, String, String, String, String, String)::: b test:::return
BigVirtualParams01#run0()::: big virtual params01 run0:::runTest
BigVirtualParams01#run1()::: big virtual params01 run1:::runTest
Bubblesort#test(int)::: bubblesort test:::array->for->i->return
Bubblesort#run0()::: bubblesort run0:::runTest
Bubblesort#run1()::: bubblesort run1:::runTest
Bubblesort#run2()::: bubblesort run2:::runTest
Bubblesort#run3()::: bubblesort run3:::runTest
Bubblesort#run4()::: bubblesort run4:::runTest
Bubblesort#run5()::: bubblesort run5:::runTest
Bubblesort#run6()::: bubblesort run6:::runTest
Bubblesort#run7()::: bubblesort run7:::runTest
ConstantLoadTest#test(int)::: constant load test test:::if->return->if->return->r->for->i->return
ConstantLoadTest#run0()::: constant load test run0:::runTest
ConstantLoadTest#run1()::: constant load test run1:::runTest
ConstantLoadTest#run2()::: constant load test run2:::runTest
ConstantLoadTest#run3()::: constant load test run3:::runTest
Fibonacci#test(int)::: fibonacci test:::if->return->n1->n2->for->i->return
Fibonacci#run0()::: fibonacci run0:::runTest
Fibonacci#run1()::: fibonacci run1:::runTest
Fibonacci#run2()::: fibonacci run2:::runTest
Fibonacci#run3()::: fibonacci run3:::runTest
Fibonacci#run4()::: fibonacci run4:::runTest
Fibonacci#run5()::: fibonacci run5:::runTest
Fibonacci#run6()::: fibonacci run6:::runTest
Fibonacci#run7()::: fibonacci run7:::runTest
FloatingReads#test(int)::: floating reads test:::for->i->return
FloatingReads#run0()::: floating reads run0:::runTest
FloatingReads#run1()::: floating reads run1:::runTest
FloatingReads#run2()::: floating reads run2:::runTest
FloatingReads#run3()::: floating reads run3:::runTest
InvokeInterface_01.I#plus(int)::: i plus:::
InvokeInterface_01.A#plus(int)::: a plus:::return
InvokeInterface_01#test(I, int)::: invoke interface_01 test:::return->i->plus
InvokeInterface_01#setUp()::: invoke interface_01 set up:::x->new->IArr->new->C1->new->C2->new->C3->new->C4->new->C5->new->C6->new->C7->new->C8->new->C9->new->C10->new->C11->new->C12->new->C13->new->C14->new->C15->a->foreach->i->plus
InvokeInterface_01#run0()::: invoke interface_01 run0:::new->C1->runTest
InvokeInterface_01#run1()::: invoke interface_01 run1:::new->C2->runTest
InvokeInterface_02.I#plus(int)::: i plus:::
InvokeInterface_02.A#plus(int)::: a plus:::return
InvokeInterface_02#test(I, int)::: invoke interface_02 test:::return->i->plus
InvokeInterface_02#setUp()::: invoke interface_02 set up:::x->new->IArr->new->C1->new->C2->new->C3->new->C4->new->C5->new->C6->new->C7->new->C8->new->C9->new->C10->new->C11->new->C12->new->C13->new->C14->new->C15->a->foreach->i->plus
InvokeInterface_02#run0()::: invoke interface_02 run0:::new->C1->runTest
InvokeInterface_02#run1()::: invoke interface_02 run1:::new->C2->runTest
InvokeInterface_03.I#plus(int)::: i plus:::
InvokeInterface_03.C1#plus(int)::: c1 plus:::return
InvokeInterface_03.C2#plus(int)::: c2 plus:::return
InvokeInterface_03.C3#plus(int)::: c3 plus:::return
InvokeInterface_03.C4#plus(int)::: c4 plus:::return
InvokeInterface_03.C5#plus(int)::: c5 plus:::return
InvokeInterface_03.C6#plus(int)::: c6 plus:::return
InvokeInterface_03.C7#plus(int)::: c7 plus:::return
InvokeInterface_03.C8#plus(int)::: c8 plus:::return
InvokeInterface_03.C9#plus(int)::: c9 plus:::return
InvokeInterface_03.C10#plus(int)::: c10 plus:::return
InvokeInterface_03.C11#plus(int)::: c11 plus:::return
InvokeInterface_03.C12#plus(int)::: c12 plus:::return
InvokeInterface_03.C13#plus(int)::: c13 plus:::return
InvokeInterface_03.C14#plus(int)::: c14 plus:::return
InvokeInterface_03.C15#plus(int)::: c15 plus:::return
InvokeInterface_03#test(I, int)::: invoke interface_03 test:::return->i->plus
InvokeInterface_03#setUp()::: invoke interface_03 set up:::x->new->IArr->new->C1->new->C2->new->C3->new->C4->new->C5->new->C6->new->C7->new->C8->new->C9->new->C10->new->C11->new->C12->new->C13->new->C14->new->C15->a->foreach->i->plus
InvokeInterface_03#run0()::: invoke interface_03 run0:::new->C1->runTest
InvokeInterface_03#run1()::: invoke interface_03 run1:::new->C2->runTest
InvokeInterface_04.I#plus(int)::: i plus:::
InvokeInterface_04.A#plus(int)::: a plus:::
InvokeInterface_04.C1#plus(int)::: c1 plus:::return
InvokeInterface_04.C2#plus(int)::: c2 plus:::return
InvokeInterface_04.C3#plus(int)::: c3 plus:::return
InvokeInterface_04.C4#plus(int)::: c4 plus:::return
InvokeInterface_04.C5#plus(int)::: c5 plus:::return
InvokeInterface_04.C6#plus(int)::: c6 plus:::return
InvokeInterface_04.C7#plus(int)::: c7 plus:::return
InvokeInterface_04.C8#plus(int)::: c8 plus:::return
InvokeInterface_04.C9#plus(int)::: c9 plus:::return
InvokeInterface_04.C10#plus(int)::: c10 plus:::return
InvokeInterface_04.C11#plus(int)::: c11 plus:::return
InvokeInterface_04.C12#plus(int)::: c12 plus:::return
InvokeInterface_04.C13#plus(int)::: c13 plus:::return
InvokeInterface_04.C14#plus(int)::: c14 plus:::return
InvokeInterface_04.C15#plus(int)::: c15 plus:::return
InvokeInterface_04#test(I, int)::: invoke interface_04 test:::return->i->plus
InvokeInterface_04#setUp()::: invoke interface_04 set up:::x->new->IArr->new->C1->new->C2->new->C3->new->C4->new->C5->new->C6->new->C7->new->C8->new->C9->new->C10->new->C11->new->C12->new->C13->new->C14->new->C15->a->foreach->i->plus
InvokeInterface_04#run0()::: invoke interface_04 run0:::new->C1->runTest
InvokeInterface_04#run1()::: invoke interface_04 run1:::new->C2->runTest
InvokeVirtual_01.A#plus(int)::: a plus:::return
InvokeVirtual_01.B#plus(int)::: b plus:::return
InvokeVirtual_01.C#plus(int)::: c plus:::return
InvokeVirtual_01#test(int)::: invoke virtual_01 test:::if->return->aObject->plus->if->return->bObject->plus->if->return->cObject->plus->return
InvokeVirtual_01#run0()::: invoke virtual_01 run0:::runTest
InvokeVirtual_01#run1()::: invoke virtual_01 run1:::runTest
InvokeVirtual_01#run2()::: invoke virtual_01 run2:::runTest
InvokeVirtual_01#run3()::: invoke virtual_01 run3:::runTest
InvokeVirtual_02.A#plus(long)::: a plus:::return
InvokeVirtual_02.B#plus(long)::: b plus:::return
InvokeVirtual_02.C#plus(long)::: c plus:::return
InvokeVirtual_02#test(long)::: invoke virtual_02 test:::if->return->objectA->plus->if->return->objectB->plus->if->return->objectC->plus->return
InvokeVirtual_02#run0()::: invoke virtual_02 run0:::runTest
InvokeVirtual_02#run1()::: invoke virtual_02 run1:::runTest
InvokeVirtual_02#run2()::: invoke virtual_02 run2:::runTest
InvokeVirtual_02#run3()::: invoke virtual_02 run3:::runTest
Matrix01#test(int)::: matrix01 test:::if->return->matrix1->matrix1->if->return->matrix2->matrix2->if->return->matrix3->matrix3->if->return->matrix4->matrix4->if->return->matrix5->matrix5->return
Matrix01#matrix1(int)::: matrix01 matrix1:::matrix->new->MatrixArr->fillMatrix->count->foreach->if->return
Matrix01#matrix2(int)::: matrix01 matrix2:::matrix->new->MatrixArrs->fillMatrix->count->foreach->foreach->if->return
Matrix01#matrix3(int)::: matrix01 matrix3:::matrix->new->MatrixArrs->fillMatrix->count->foreach->foreach->foreach->if->return
Matrix01#matrix4(int)::: matrix01 matrix4:::matrix->new->MatrixArrs->fillMatrix->count->foreach->foreach->foreach->foreach->if->return
Matrix01#matrix5(int)::: matrix01 matrix5:::matrix->new->MatrixArrs->fillMatrix->count->foreach->foreach->foreach->foreach->foreach->if->return
Matrix01#fillMatrix(Object[], int)::: matrix01 fill matrix:::for->i
Matrix01#set(Object[], int)::: matrix01 set:::val->array->while->index->new->Matrix
Matrix01#run0()::: matrix01 run0:::runTest
Matrix01#run1()::: matrix01 run1:::runTest
Matrix01#run2()::: matrix01 run2:::runTest
Matrix01#run3()::: matrix01 run3:::runTest
Matrix01#run4()::: matrix01 run4:::runTest
Matrix01#run5()::: matrix01 run5:::runTest
ReferenceMap01#foo(String[])::: reference map01 foo:::args->new->StringArr->i1->Integer->valueOf->i2->Integer->valueOf->i3->i4->i5->Integer->valueOf->i6->Integer->valueOf->i7->Integer->valueOf->i8->Integer->valueOf->i9->Integer->valueOf->i10->Integer->valueOf->i11->Integer->valueOf->i12->Integer->valueOf->System->gc->sum->return
ReferenceMap01#test()::: reference map01 test:::return->Integer->new->StringArr->foo->valueOf
ReferenceMap01#run0()::: reference map01 run0:::runTest
StrangeFrames#test(int)::: strange frames test:::empty->oneOperandStackSlot->twoOperandStackSlots->oneLocalSlot->return
StrangeFrames#empty()::: strange frames empty:::
StrangeFrames#oneOperandStackSlot()::: strange frames one operand stack slot:::new->DummyTestClass
StrangeFrames#twoOperandStackSlots()::: strange frames two operand stack slots:::new->DummyTestClass->new->DummyTestClass->two
StrangeFrames#oneLocalSlot()::: strange frames one local slot:::a
StrangeFrames#two(Object, Object)::: strange frames two:::c
StrangeFrames#run0()::: strange frames run0:::runTest
String_format01#test(String)::: string_format01 test:::return->String->format
String_format01#run0()::: string_format01 run0:::runTest
String_format01#run1()::: string_format01 run1:::runTest
String_format02#test(int)::: string_format02 test:::return->String->format
String_format02#run0()::: string_format02 run0:::runTest
String_format02#run1()::: string_format02 run1:::runTest
String_format02#run2()::: string_format02 run2:::runTest
String_format02#run3()::: string_format02 run3:::runTest
VarArgs_boolean01#test(int)::: var args_boolean01 test:::if->return->get->return->get
VarArgs_boolean01#get(int, boolean...)::: var args_boolean01 get:::return
VarArgs_boolean01#run0()::: var args_boolean01 run0:::runTest
VarArgs_boolean01#run1()::: var args_boolean01 run1:::runTest
VarArgs_boolean01#run2()::: var args_boolean01 run2:::runTest
VarArgs_boolean01#run3()::: var args_boolean01 run3:::runTest
VarArgs_boolean01#run4()::: var args_boolean01 run4:::runTest
VarArgs_byte01#test(int)::: var args_byte01 test:::if->return->get->return->get
VarArgs_byte01#get(int, byte...)::: var args_byte01 get:::return
VarArgs_byte01#run0()::: var args_byte01 run0:::runTest
VarArgs_byte01#run1()::: var args_byte01 run1:::runTest
VarArgs_byte01#run2()::: var args_byte01 run2:::runTest
VarArgs_byte01#run3()::: var args_byte01 run3:::runTest
VarArgs_byte01#run4()::: var args_byte01 run4:::runTest
VarArgs_char01#test(int)::: var args_char01 test:::if->return->get->return->get
VarArgs_char01#get(int, char...)::: var args_char01 get:::return
VarArgs_char01#run0()::: var args_char01 run0:::runTest
VarArgs_char01#run1()::: var args_char01 run1:::runTest
VarArgs_char01#run2()::: var args_char01 run2:::runTest
VarArgs_char01#run3()::: var args_char01 run3:::runTest
VarArgs_char01#run4()::: var args_char01 run4:::runTest
VarArgs_double01#test(int)::: var args_double01 test:::if->return->get->return->get
VarArgs_double01#get(int, double...)::: var args_double01 get:::return
VarArgs_double01#run0()::: var args_double01 run0:::runTest
VarArgs_double01#run1()::: var args_double01 run1:::runTest
VarArgs_double01#run2()::: var args_double01 run2:::runTest
VarArgs_double01#run3()::: var args_double01 run3:::runTest
VarArgs_double01#run4()::: var args_double01 run4:::runTest
VarArgs_float01#test(int)::: var args_float01 test:::if->return->get->return->get
VarArgs_float01#get(int, float...)::: var args_float01 get:::return
VarArgs_float01#run0()::: var args_float01 run0:::runTest
VarArgs_float01#run1()::: var args_float01 run1:::runTest
VarArgs_float01#run2()::: var args_float01 run2:::runTest
VarArgs_float01#run3()::: var args_float01 run3:::runTest
VarArgs_float01#run4()::: var args_float01 run4:::runTest
VarArgs_int01#test(int)::: var args_int01 test:::if->return->get->return->get
VarArgs_int01#get(int, int...)::: var args_int01 get:::return
VarArgs_int01#run0()::: var args_int01 run0:::runTest
VarArgs_int01#run1()::: var args_int01 run1:::runTest
VarArgs_int01#run2()::: var args_int01 run2:::runTest
VarArgs_int01#run3()::: var args_int01 run3:::runTest
VarArgs_int01#run4()::: var args_int01 run4:::runTest
VarArgs_long01#test(int)::: var args_long01 test:::if->return->get->return->get
VarArgs_long01#get(int, long...)::: var args_long01 get:::return
VarArgs_long01#run0()::: var args_long01 run0:::runTest
VarArgs_long01#run1()::: var args_long01 run1:::runTest
VarArgs_long01#run2()::: var args_long01 run2:::runTest
VarArgs_long01#run3()::: var args_long01 run3:::runTest
VarArgs_long01#run4()::: var args_long01 run4:::runTest
VarArgs_short01#test(int)::: var args_short01 test:::if->return->get->return->get
VarArgs_short01#get(int, short...)::: var args_short01 get:::return
VarArgs_short01#run0()::: var args_short01 run0:::runTest
VarArgs_short01#run1()::: var args_short01 run1:::runTest
VarArgs_short01#run2()::: var args_short01 run2:::runTest
VarArgs_short01#run3()::: var args_short01 run3:::runTest
VarArgs_short01#run4()::: var args_short01 run4:::runTest
VarArgs_String01#test(int)::: var args_ string01 test:::if->return->get->return->get
VarArgs_String01#get(int, String...)::: var args_ string01 get:::return
VarArgs_String01#run0()::: var args_ string01 run0:::runTest
VarArgs_String01#run1()::: var args_ string01 run1:::runTest
VarArgs_String01#run2()::: var args_ string01 run2:::runTest
VarArgs_String01#run3()::: var args_ string01 run3:::runTest
VarArgs_String01#run4()::: var args_ string01 run4:::runTest
VarArgs_Unroll#test(String, String)::: var args_ unroll test:::return->check
VarArgs_Unroll#check(String...)::: var args_ unroll check:::if->return->s->foreach->if->t->equals->return->return
VarArgs_Unroll#run0()::: var args_ unroll run0:::runTest
VarArgs_Unroll#run1()::: var args_ unroll run1:::runTest

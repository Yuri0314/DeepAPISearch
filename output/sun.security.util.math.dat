IntegerFieldModuloP#getSize():::Get the size of the field as a BigInteger:::
IntegerFieldModuloP#get0():::Get the additive identity element 0:::
IntegerFieldModuloP#get1():::Get the multiplicative identity element 1:::
IntegerFieldModuloP#getElement(BigInteger):::Get the field element equivalent to the supplied BigInteger value:::
IntegerFieldModuloP#getSmallValue(int):::Get a "small" value according to this implementation:::
IntegerFieldModuloP#getElement(byte[]):::Get a field element from a little-endian unsigned integer stored in an array:::return->getElement
IntegerFieldModuloP#getElement(byte[], int, int, byte):::Get a field element from a little-endian unsigned integer stored at the specified position in an array:::
IntegerModuloP#getField():::Get the field associated with this element.:::
IntegerModuloP#asBigInteger():::Get the canonical value of this element as a BigInteger:::
IntegerModuloP#fixed():::Return this value as a fixed (immutable) element:::
IntegerModuloP#mutable():::Return this value as a mutable element:::
IntegerModuloP#add(IntegerModuloP):::Add this field element with the supplied element and return the result.:::
IntegerModuloP#additiveInverse():::Compute the additive inverse of the field element:::
IntegerModuloP#multiply(IntegerModuloP):::Multiply this field element with the supplied element and return the result.:::
IntegerModuloP#addModPowerTwo(IntegerModuloP, int):::Perform an addition modulo a power of two and return the little-endian encoding of the result:::result->new->byteArr->addModPowerTwo->return
IntegerModuloP#addModPowerTwo(IntegerModuloP, byte[]):::Perform an addition modulo a power of two and store the little-endian encoding of the result in the supplied array:::
IntegerModuloP#asByteArray(int):::Returns the little-endian encoding of this' % 2^(8 * len), where this' is the canonical integer value equivalent to this.:::result->new->byteArr->asByteArray->return
IntegerModuloP#asByteArray(byte[]):::Places the little-endian encoding of this' % 2^(8 * result.length) into the supplied array, where this' is the canonical integer value equivalent to this.:::
IntegerModuloP#multiplicativeInverse():::Compute the multiplicative inverse of this field element.:::return->getField->getSize->BigInteger->valueOf->subtract->pow
IntegerModuloP#subtract(IntegerModuloP):::Subtract the supplied element from this one and return the result.:::return->b->additiveInverse->add
IntegerModuloP#square():::Calculate the square of this element and return the result:::return->multiply
IntegerModuloP#pow(BigInteger):::Calculate the power this^b and return the result.:::y->getField->get1->mutable->x->mutable->bitLength->b->bitLength->for->bit->return->y->fixed
MutableIntegerModuloP#conditionalSet(IntegerModuloP, int):::Set this value to the value of b when set has the value 1:::
MutableIntegerModuloP#conditionalSwapWith(MutableIntegerModuloP, int):::Swap the value of this with the value of b when swap has the value 1:::
MutableIntegerModuloP#setValue(IntegerModuloP):::Set the value of this element equal to the value of the supplied element:::
MutableIntegerModuloP#setValue(byte[], int, int, byte):::Set the value equal to the little-endian unsigned integer stored at the specified position in an array:::
MutableIntegerModuloP#setValue(ByteBuffer, int, byte):::Set the value equal to the little-endian unsigned integer stored in a buffer:::
MutableIntegerModuloP#setSquare():::Set the value of this element equal to this * this.:::
MutableIntegerModuloP#setSum(IntegerModuloP):::Set the value of this element equal to this + b:::
MutableIntegerModuloP#setDifference(IntegerModuloP):::Set the value of this element equal to this - b:::
MutableIntegerModuloP#setProduct(IntegerModuloP):::Set the value of this element equal to this * b:::
MutableIntegerModuloP#setProduct(SmallValue):::Set the value of this element equal to this * v:::
MutableIntegerModuloP#setAdditiveInverse():::Set the value of this element equal to 0 - this.:::
MutableIntegerModuloP#setReduced():::Some implementations required reduction operations to be requested by the client at certain times:::

sun.security.util.math.IntegerFieldModuloP#getSize()->BigInteger:::Get the size of the field as a BigInteger
sun.security.util.math.IntegerFieldModuloP#get0()->ImmutableIntegerModuloP:::Get the additive identity element 0
sun.security.util.math.IntegerFieldModuloP#get1()->ImmutableIntegerModuloP:::Get the multiplicative identity element 1
sun.security.util.math.IntegerFieldModuloP#getElement(BigInteger)->ImmutableIntegerModuloP:::Get the field element equivalent to the supplied BigInteger value
sun.security.util.math.IntegerFieldModuloP#getSmallValue(int)->SmallValue:::Get a "small" value according to this implementation
sun.security.util.math.IntegerFieldModuloP#getElement(byte[])->ImmutableIntegerModuloP:::Get a field element from a little-endian unsigned integer stored in an array
sun.security.util.math.IntegerFieldModuloP#getElement(byte[], int, int, byte)->ImmutableIntegerModuloP:::Get a field element from a little-endian unsigned integer stored at the specified position in an array
sun.security.util.math.IntegerModuloP#getField()->IntegerFieldModuloP:::Get the field associated with this element.
sun.security.util.math.IntegerModuloP#asBigInteger()->BigInteger:::Get the canonical value of this element as a BigInteger
sun.security.util.math.IntegerModuloP#fixed()->ImmutableIntegerModuloP:::Return this value as a fixed (immutable) element
sun.security.util.math.IntegerModuloP#mutable()->MutableIntegerModuloP:::Return this value as a mutable element
sun.security.util.math.IntegerModuloP#add(IntegerModuloP)->ImmutableIntegerModuloP:::Add this field element with the supplied element and return the result.
sun.security.util.math.IntegerModuloP#additiveInverse()->ImmutableIntegerModuloP:::Compute the additive inverse of the field element
sun.security.util.math.IntegerModuloP#multiply(IntegerModuloP)->ImmutableIntegerModuloP:::Multiply this field element with the supplied element and return the result.
sun.security.util.math.IntegerModuloP#addModPowerTwo(IntegerModuloP, int)->byte[]:::Perform an addition modulo a power of two and return the little-endian encoding of the result
sun.security.util.math.IntegerModuloP#addModPowerTwo(IntegerModuloP, byte[])->void:::Perform an addition modulo a power of two and store the little-endian encoding of the result in the supplied array
sun.security.util.math.IntegerModuloP#asByteArray(int)->byte[]:::Returns the little-endian encoding of this' % 2^(8 * len), where this' is the canonical integer value equivalent to this.
sun.security.util.math.IntegerModuloP#asByteArray(byte[])->void:::Places the little-endian encoding of this' % 2^(8 * result.length) into the supplied array, where this' is the canonical integer value equivalent to this.
sun.security.util.math.IntegerModuloP#multiplicativeInverse()->ImmutableIntegerModuloP:::Compute the multiplicative inverse of this field element.
sun.security.util.math.IntegerModuloP#subtract(IntegerModuloP)->ImmutableIntegerModuloP:::Subtract the supplied element from this one and return the result.
sun.security.util.math.IntegerModuloP#square()->ImmutableIntegerModuloP:::Calculate the square of this element and return the result
sun.security.util.math.IntegerModuloP#pow(BigInteger)->ImmutableIntegerModuloP:::Calculate the power this^b and return the result.
sun.security.util.math.MutableIntegerModuloP#conditionalSet(IntegerModuloP, int)->void:::Set this value to the value of b when set has the value 1
sun.security.util.math.MutableIntegerModuloP#conditionalSwapWith(MutableIntegerModuloP, int)->void:::Swap the value of this with the value of b when swap has the value 1
sun.security.util.math.MutableIntegerModuloP#setValue(IntegerModuloP)->MutableIntegerModuloP:::Set the value of this element equal to the value of the supplied element
sun.security.util.math.MutableIntegerModuloP#setValue(byte[], int, int, byte)->MutableIntegerModuloP:::Set the value equal to the little-endian unsigned integer stored at the specified position in an array
sun.security.util.math.MutableIntegerModuloP#setValue(ByteBuffer, int, byte)->MutableIntegerModuloP:::Set the value equal to the little-endian unsigned integer stored in a buffer
sun.security.util.math.MutableIntegerModuloP#setSquare()->MutableIntegerModuloP:::Set the value of this element equal to this * this.
sun.security.util.math.MutableIntegerModuloP#setSum(IntegerModuloP)->MutableIntegerModuloP:::Set the value of this element equal to this + b
sun.security.util.math.MutableIntegerModuloP#setDifference(IntegerModuloP)->MutableIntegerModuloP:::Set the value of this element equal to this - b
sun.security.util.math.MutableIntegerModuloP#setProduct(IntegerModuloP)->MutableIntegerModuloP:::Set the value of this element equal to this * b
sun.security.util.math.MutableIntegerModuloP#setProduct(SmallValue)->MutableIntegerModuloP:::Set the value of this element equal to this * v
sun.security.util.math.MutableIntegerModuloP#setAdditiveInverse()->MutableIntegerModuloP:::Set the value of this element equal to 0 - this.
sun.security.util.math.MutableIntegerModuloP#setReduced()->MutableIntegerModuloP:::Some implementations required reduction operations to be requested by the client at certain times

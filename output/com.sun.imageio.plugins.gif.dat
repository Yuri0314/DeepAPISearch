GIFImageMetadata#isReadOnly()::: image metadata is read only:::return
GIFImageMetadata#getAsTree(String)::: image metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->new->IllegalArgumentException
GIFImageMetadata#toISO8859(byte[])::: image metadata to o8859:::try->return->new->String->catch->return->finally
GIFImageMetadata#getNativeTree()::: image metadata get native tree:::node->root->new->IIOMetadataNode->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->setAttribute->root->appendChild->if->new->IIOMetadataNode->numEntries->node->Integer->toString->setAttribute->node->setAttribute->for->i->root->appendChild->new->IIOMetadataNode->node->setAttribute->node->setAttribute->node->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->root->appendChild->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->toISO8859->setAttribute->root->appendChild->numAppExtensions->applicationIDs->size->if->new->IIOMetadataNode->for->i->root->appendChild->numComments->comments->size->if->new->IIOMetadataNode->for->i->root->appendChild->return
GIFImageMetadata#getStandardChromaNode()::: image metadata get standard chroma node:::chroma_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->if->new->IIOMetadataNode->numEntries->for->i->chroma_node->appendChild->return
GIFImageMetadata#getStandardCompressionNode()::: image metadata get standard compression node:::compression_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->return
GIFImageMetadata#getStandardDataNode()::: image metadata get standard data node:::data_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->return
GIFImageMetadata#getStandardDimensionNode()::: image metadata get standard dimension node:::dimension_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->dimension_node->appendChild->return
GIFImageMetadata#getStandardTextNode()::: image metadata get standard text node:::if->return->commentIter->comments->iterator->if->commentIter->hasNext->return->text_node->new->IIOMetadataNode->node->while->commentIter->hasNext->comment->commentIter->next->s->try->new->String->catch->throw->new->RuntimeException->finally->new->IIOMetadataNode->node->setAttribute->node->setAttribute->node->setAttribute->text_node->appendChild->return
GIFImageMetadata#getStandardTransparencyNode()::: image metadata get standard transparency node:::if->return->transparency_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->Integer->toString->setAttribute->transparency_node->appendChild->return
GIFImageMetadata#setFromTree(String, Node)::: image metadata set from tree:::throw->new->IllegalStateException
GIFImageMetadata#mergeNativeTree(Node)::: image metadata merge native tree:::throw->new->IllegalStateException
GIFImageMetadata#mergeStandardTree(Node)::: image metadata merge standard tree:::throw->new->IllegalStateException
GIFImageMetadata#reset()::: image metadata reset:::throw->new->IllegalStateException
GIFImageMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: image metadata format can node appear:::return
GIFImageMetadataFormat#getInstance()::: image metadata format get instance:::if->new->GIFImageMetadataFormat->return
GIFImageMetadataFormatResources#getContents()::: image metadata format resources get contents:::return->new->ObjectArrs
GIFImageReader#setInput(Object, boolean, boolean)::: image reader set input:::super->setInput->if->if->throw->new->IllegalArgumentException->else->resetStreamSettings
GIFImageReader#getNumImages(boolean)::: image reader get num images:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->return->if->locateImage->return
GIFImageReader#checkIndex(int)::: image reader check index:::if->throw->new->IndexOutOfBoundsException->if
GIFImageReader#getWidth(int)::: image reader get width:::checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->return
GIFImageReader#getHeight(int)::: image reader get height:::checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->return
GIFImageReader#createIndexed(byte[], byte[], byte[], int)::: image reader create indexed:::colorModel->if->idx->Math->min->new->IndexColorModel->else->new->IndexColorModel->sampleModel->if->bandOffsets->new->PixelInterleavedSampleModel->else->new->MultiPixelPackedSampleModel->return->new->ImageTypeSpecifier
GIFImageReader#getImageTypes(int)::: image reader get image types:::checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->l->new->ArrayList<>->colorTable->if->else->if->if->this->processWarningOccurred->getDefaultPalette->length->bits->if->else->if->else->if->else->lutLength->r->new->byteArr->g->new->byteArr->b->new->byteArr->rgbIndex->for->i->l->createIndexed->add->return->l->iterator
GIFImageReader#getDefaultReadParam()::: image reader get default read param:::return->new->ImageReadParam
GIFImageReader#getStreamMetadata()::: image reader get stream metadata:::readHeader->return
GIFImageReader#getImageMetadata(int)::: image reader get image metadata:::checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->return
GIFImageReader#initNext32Bits()::: image reader init next32 bits:::
GIFImageReader#getCode(int, int)::: image reader get code:::if->return->code->while->if->stream->readUnsignedByte->if->return->else->left->off->while->nbytes->stream->read->return
GIFImageReader#initializeStringTable(int[], byte[], byte[], int[])::: image reader initialize string table:::numEntries->for->i->for->i
GIFImageReader#outputRow()::: image reader output row:::width->Math->min->destX->if->theTile->setDataElements->else->for->x->if->bands->processImageUpdate
GIFImageReader#computeDecodeThisRow()::: image reader compute decode this row:::
GIFImageReader#outputPixels(byte[], int)::: image reader output pixels:::if->return->for->i
GIFImageReader#readHeader()::: image reader read header:::if->return->if->throw->new->IllegalStateException->new->GIFStreamMetadata->try->stream->setByteOrder->signature->new->byteArr->stream->readFully->version->new->StringBuilder->version->append->version->append->version->append->version->toString->stream->readUnsignedShort->stream->readUnsignedShort->packedFields->stream->readUnsignedByte->globalColorTableFlag->numGCTEntries->stream->readUnsignedByte->stream->readUnsignedByte->if->new->byteArr->stream->readFully->else->imageStartPosition->Long->stream->getStreamPosition->valueOf->add->catch->throw->new->IIOException->finally
GIFImageReader#skipImage()::: image reader skip image:::try->while->blockType->stream->readUnsignedByte->if->stream->skipBytes->packedFields->stream->readUnsignedByte->if->bits->stream->skipBytes->stream->skipBytes->length->do->stream->readUnsignedByte->stream->skipBytes->while->return->else->if->return->else->if->label->stream->readUnsignedByte->length->do->stream->readUnsignedByte->stream->skipBytes->while->else->if->return->else->length->do->stream->readUnsignedByte->stream->skipBytes->while->catch->return->throw->new->IIOException->finally
GIFImageReader#locateImage(int)::: image reader locate image:::readHeader->try->index->Math->imageStartPosition->size->min->l->imageStartPosition->get->stream->l->longValue->seek->while->if->skipImage->return->l1->stream->getStreamPosition->imageStartPosition->add->catch->throw->new->IIOException->finally->if->return
GIFImageReader#concatenateBlocks()::: image reader concatenate blocks:::data->new->byteArr->while->length->stream->readUnsignedByte->if->break->newData->new->byteArr->System->arraycopy->stream->readFully->return
GIFImageReader#readMetadata()::: image reader read metadata:::if->throw->new->IllegalStateException->try->new->GIFImageMetadata->startPosition->stream->getStreamPosition->while->blockType->stream->readUnsignedByte->if->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort->idPackedFields->stream->readUnsignedByte->localColorTableFlag->numLCTEntries->if->new->byteArr->stream->readFully->else->stream->getStreamPosition->return->else->if->label->stream->readUnsignedByte->if->gceLength->stream->readUnsignedByte->gcePackedFields->stream->readUnsignedByte->stream->readUnsignedShort->stream->readUnsignedByte->terminator->stream->readUnsignedByte->else->if->length->stream->readUnsignedByte->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte->concatenateBlocks->else->if->comment->concatenateBlocks->if->new->ArrayList<>->add->else->if->blockSize->stream->readUnsignedByte->applicationID->new->byteArr->authCode->new->byteArr->blockData->new->byteArr->stream->readFully->offset->copyData->copyData->applicationData->concatenateBlocks->if->len->data->new->byteArr->System->arraycopy->System->arraycopy->if->new->ArrayList<>->new->ArrayList<>->new->ArrayList<>->add->add->add->else->length->do->stream->readUnsignedByte->stream->skipBytes->while->else->if->throw->new->IndexOutOfBoundsException->else->throw->new->IIOException->catch->throw->throw->new->IIOException->finally
GIFImageReader#copyData(byte[], int, byte[])::: image reader copy data:::len->rest->if->System->arraycopy->return
GIFImageReader#startPass(int)::: image reader start pass:::if->return->y->yStep->vals->ReaderUtil->computeUpdatedPixels->bands->processPassStarted
GIFImageReader#read(int, ImageReadParam)::: image reader read:::if->throw->new->IllegalStateException->checkIndex->index->locateImage->if->throw->new->IndexOutOfBoundsException->readMetadata->if->getDefaultReadParam->imageTypes->getImageTypes->getDestination->theImage->getWritableTile->new->Rectangle->new->Rectangle->computeRegions->new->Point->param->getSourceXSubsampling->param->getSourceYSubsampling->Math->param->getSourceMinProgressivePass->max->Math->param->getSourceMaxProgressivePass->min->computeDecodeThisRow->clearAbortRequest->processImageStarted->if->abortRequested->processReadAborted->return->startPass->new->byteArr->try->stream->readUnsignedByte->stream->readUnsignedByte->left->off->while->nbytes->stream->read->initNext32Bits->code->oldCode->prefix->new->intArr->suffix->new->byteArr->initial->new->byteArr->length->new->intArr->string->new->byteArr->initializeStringTable->tableIndex->codeSize->codeMask->do->getCode->if->initializeStringTable->getCode->if->processImageComplete->return->else->if->processImageComplete->return->else->newSuffixIndex->if->else->if->processWarningOccurred->ti->oc->if->c->len->for->i->outputPixels->while->abortRequested->processReadAborted->return->catch->e->printStackTrace->throw->new->IIOException->finally
GIFImageReader#reset():::Remove all settings including global settings such as Locales and listeners, as well as stream settings.:::super->reset->resetStreamSettings
GIFImageReader#resetStreamSettings():::Remove local settings based on parsing of a stream.:::new->ArrayList<>
GIFImageReader#getDefaultPalette()::: image reader get default palette:::if->img->new->BufferedImage->icm->img->getColorModel->size->icm->getMapSize->r->new->byteArr->g->new->byteArr->b->new->byteArr->icm->getReds->icm->getGreens->icm->getBlues->new->byteArr->for->i->return
GIFImageReaderSpi#getDescription(Locale)::: image reader spi get description:::return
GIFImageReaderSpi#canDecodeInput(Object)::: image reader spi can decode input:::if->return->stream->b->new->byteArr->stream->mark->stream->readFully->stream->reset->return
GIFImageReaderSpi#createReaderInstance(Object)::: image reader spi create reader instance:::return->new->GIFImageReader
GIFImageWriter#getNumBits(int):::The number of bits represented by the value which should be a legal length for a color table.:::numBits->switch->break->break->break->break->break->break->break->break->throw->new->IOException->return
GIFImageWriter#computeRegions(Rectangle, Dimension, ImageWriteParam):::Compute the source region and destination dimensions taking any parameter settings into account.:::param->periodX->periodY->if->sourceBands->p->getSourceBands->if->throw->new->IllegalArgumentException->sourceRegion->p->getSourceRegion->if->sourceRegion->intersection->sourceBounds->setBounds->gridX->p->getSubsamplingXOffset->gridY->p->getSubsamplingYOffset->p->getSourceXSubsampling->p->getSourceYSubsampling->destSize->setSize->if->throw->new->IllegalArgumentException
GIFImageWriter#createColorTable(ColorModel, SampleModel):::Create a color table from the image ColorModel and SampleModel.:::colorTable->if->icm->mapSize->icm->getMapSize->ctSize->getGifPaletteSize->reds->new->byteArr->greens->new->byteArr->blues->new->byteArr->icm->getReds->icm->getGreens->icm->getBlues->for->i->new->byteArr->idx->for->i->else->if->sampleModel->getNumBands->numBits->sampleModel->getSampleSize->if->colorTableLength->new->byteArr->for->i->else->return
GIFImageWriter#getGifPaletteSize(int):::According do GIF specification size of clor table (palette here) must be in range from 2 to 256 and must be power of 2.:::if->return->return
GIFImageWriter#canWriteSequence()::: image writer can write sequence:::return
GIFImageWriter#convertMetadata(String, IIOMetadata, IIOMetadata):::Merges inData into outData:::formatName->nativeFormatName->inData->getNativeMetadataFormatName->if->nativeFormatName->equals->else->extraFormatNames->inData->getExtraMetadataFormatNames->if->for->i->if->inData->isStandardMetadataFormatSupported->if->try->root->inData->getAsTree->outData->mergeTree->catch->finally
GIFImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam):::Creates a default stream metadata object and merges in the supplied metadata.:::if->throw->new->IllegalArgumentException->sm->getDefaultStreamMetadata->convertMetadata->return
GIFImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam):::Creates a default image metadata object and merges in the supplied metadata.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->im->getDefaultImageMetadata->isProgressive->convertMetadata->if->param->canWriteProgressive->param->getProgressiveMode->return
GIFImageWriter#endWriteSequence()::: image writer end write sequence:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->writeTrailer->resetLocal
GIFImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)::: image writer get default image metadata:::imageMetadata->new->GIFWritableImageMetadata->sampleModel->imageType->getSampleModel->sourceBounds->sampleModel->getWidth->sampleModel->getHeight->new->Rectangle->destSize->new->Dimension->computeRegions->if->param->canWriteProgressive->param->getProgressiveMode->else->colorModel->imageType->getColorModel->createColorTable->if->transparentIndex->getTransparentPixel->if->return
GIFImageWriter#getDefaultStreamMetadata(ImageWriteParam)::: image writer get default stream metadata:::streamMetadata->new->GIFWritableStreamMetadata->return
GIFImageWriter#getDefaultWriteParam()::: image writer get default write param:::return->getLocale->new->GIFImageWriteParam
GIFImageWriter#prepareWriteSequence(IIOMetadata)::: image writer prepare write sequence:::if->throw->new->IllegalStateException->resetLocal->if->getDefaultStreamMetadata->else->new->GIFWritableStreamMetadata->convertMetadata
GIFImageWriter#reset()::: image writer reset:::super->reset->resetLocal
GIFImageWriter#resetLocal():::Resets locally defined instance variables.:::
GIFImageWriter#setOutput(Object)::: image writer set output:::super->setOutput->if->if->throw->new->IllegalArgumentException->setByteOrder->else
GIFImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)::: image writer write:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->iioimage->hasRaster->throw->new->UnsupportedOperationException->resetLocal->streamMetadata->if->getDefaultStreamMetadata->else->convertStreamMetadata->write
GIFImageWriter#writeToSequence(IIOImage, ImageWriteParam)::: image writer write to sequence:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->image->hasRaster->throw->new->UnsupportedOperationException->if->throw->new->IllegalStateException->write->if
GIFImageWriter#needToCreateIndex(RenderedImage)::: image writer need to create index:::sampleModel->image->getSampleModel->colorModel->image->getColorModel->return->sampleModel->getNumBands->sampleModel->getSampleSize->colorModel->getComponentSize
GIFImageWriter#write(boolean, boolean, IIOMetadata, IIOImage, ImageWriteParam):::Writes any extension blocks, the Image Descriptor, the image data, and optionally the header (Signature and Logical Screen Descriptor) and trailer (Block Terminator).:::image->iioimage->getRenderedImage->if->needToCreateIndex->PaletteBuilder->createIndexedImage->iioimage->setRenderedImage->colorModel->image->getColorModel->sampleModel->image->getSampleModel->sourceBounds->image->getMinX->image->getMinY->image->getWidth->image->getHeight->new->Rectangle->destSize->new->Dimension->computeRegions->imageMetadata->if->iioimage->getMetadata->new->GIFWritableImageMetadata->iioimage->getMetadata->convertMetadata->if->createColorTable->if->icm->index->icm->getTransparentPixel->if->globalColorTable->if->if->throw->new->IllegalArgumentException->streamMetadata->if->if->if->if->colorModel->getComponentSize->sampleModel->getSampleSize->if->if->else->if->createColorTable->bitsPerPixel->if->getNumBits->else->if->getNumBits->else->sampleModel->getSampleSize->writeHeader->else->if->else->throw->new->IllegalArgumentException->iioimage->getRenderedImage->writeImage->if->writeTrailer
GIFImageWriter#writeImage(RenderedImage, GIFWritableImageMetadata, ImageWriteParam, byte[], Rectangle, Dimension):::Writes any extension blocks, the Image Descriptor, and the image data:::colorModel->image->getColorModel->sampleModel->image->getSampleModel->writeGraphicsControlExtension->if->new->ImageTypeSpecifier->getDefaultImageMetadata->else->list->try->root->imageMetadata->getAsTree->root->getElementsByTagName->catch->finally->list->getLength->if->param->canWriteProgressive->if->param->getProgressiveMode->else->if->param->getProgressiveMode->if->Arrays->equals->if->writeGraphicControlExtension->writePlainTextExtension->writeApplicationExtension->writeCommentExtension->bitsPerPixel->sampleModel->getSampleSize->getNumBits->writeImageDescriptor->writeRasterData
GIFImageWriter#writeRows(RenderedImage, LZWCompressor, int, int, int, int, int, int, int, int, int, int, int)::: image writer write rows:::if->println->sbuf->new->intArr->dbuf->new->byteArr->raster->image->getNumXTiles->image->getNumYTiles->image->getTile->image->getData->for->y
GIFImageWriter#writeRowsOpt(byte[], int, int, LZWCompressor, int, int, int, int, int, int)::: image writer write rows opt:::if->println->for->y
GIFImageWriter#writeRasterData(RenderedImage, Rectangle, Dimension, ImageWriteParam, boolean)::: image writer write raster data:::sourceXOffset->sourceYOffset->sourceWidth->sourceHeight->destWidth->destHeight->periodX->periodY->if->else->param->getSourceXSubsampling->param->getSourceYSubsampling->sampleModel->image->getSampleModel->bitsPerPixel->sampleModel->getSampleSize->initCodeSize->if->stream->write->compressor->new->LZWCompressor->isOptimizedCase->image->getNumXTiles->image->getNumYTiles->image->getTile->image->getTile->getDataBuffer->numRowsWritten->progressReportRowPeriod->Math->max->clearAbortRequest->processImageStarted->if->abortRequested->processWriteAborted->return->if->if->println->if->tile->image->getTile->data->tile->getDataBuffer->getData->csm->tile->getSampleModel->offset->csm->getOffset->tile->getDataOffset->lineStride->csm->getScanlineStride->writeRowsOpt->if->abortRequested->return->writeRowsOpt->if->abortRequested->return->writeRowsOpt->if->abortRequested->return->writeRowsOpt->if->abortRequested->return->else->writeRows->if->abortRequested->return->writeRows->if->abortRequested->return->writeRows->if->abortRequested->return->writeRows->if->abortRequested->return->else->if->println->if->tile->image->getTile->data->tile->getDataBuffer->getData->csm->tile->getSampleModel->offset->csm->getOffset->lineStride->csm->getScanlineStride->writeRowsOpt->if->abortRequested->return->else->writeRows->if->abortRequested->return->compressor->flush->stream->write->processImageComplete
GIFImageWriter#writeHeader(String, int, int, int, int, int, boolean, int, byte[])::: image writer write header:::try->stream->writeBytes->stream->writeShort->stream->writeShort->packedFields->if->stream->write->stream->write->stream->write->if->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeHeader(IIOMetadata, int)::: image writer write header:::sm->if->else->new->GIFWritableStreamMetadata->root->streamMetadata->getAsTree->sm->setFromTree->writeHeader
GIFImageWriter#writeGraphicControlExtension(int, boolean, boolean, int, int)::: image writer write graphic control extension:::try->stream->write->stream->write->stream->write->packedFields->if->if->stream->write->stream->writeShort->stream->write->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeGraphicControlExtension(GIFWritableImageMetadata)::: image writer write graphic control extension:::writeGraphicControlExtension
GIFImageWriter#writeBlocks(byte[])::: image writer write blocks:::if->offset->while->len->Math->min->stream->write->stream->write
GIFImageWriter#writePlainTextExtension(GIFWritableImageMetadata)::: image writer write plain text extension:::if->try->stream->write->stream->write->stream->write->stream->writeShort->stream->writeShort->stream->writeShort->stream->writeShort->stream->write->stream->write->stream->write->stream->write->writeBlocks->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeApplicationExtension(GIFWritableImageMetadata)::: image writer write application extension:::if->iterIDs->iterator->iterCodes->iterator->iterData->iterator->while->iterIDs->hasNext->try->stream->write->stream->write->stream->write->stream->iterIDs->next->write->stream->iterCodes->next->write->iterData->next->writeBlocks->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeCommentExtension(GIFWritableImageMetadata)::: image writer write comment extension:::if->try->iter->iterator->while->iter->hasNext->stream->write->stream->write->iter->next->writeBlocks->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeImageDescriptor(int, int, int, int, boolean, boolean, int, byte[])::: image writer write image descriptor:::try->stream->write->stream->writeShort->stream->writeShort->stream->writeShort->stream->writeShort->packedFields->if->if->stream->write->if->stream->write->catch->throw->new->IIOException->finally
GIFImageWriter#writeImageDescriptor(GIFWritableImageMetadata, int)::: image writer write image descriptor:::writeImageDescriptor
GIFImageWriter#writeTrailer()::: image writer write trailer:::stream->write
GIFImageWriteParam#setCompressionMode(int)::: image write param set compression mode:::if->throw->new->UnsupportedOperationException->super->setCompressionMode
GIFImageWriterSpi#canEncodeImage(ImageTypeSpecifier)::: image writer spi can encode image:::if->throw->new->IllegalArgumentException->sm->type->getSampleModel->cm->type->getColorModel->canEncode->sm->getNumBands->sm->getSampleSize->sm->getWidth->sm->getHeight->cm->getComponentSize->if->return->else->return->PaletteBuilder->canCreatePalette
GIFImageWriterSpi#getDescription(Locale)::: image writer spi get description:::return
GIFImageWriterSpi#createWriterInstance(Object)::: image writer spi create writer instance:::return->new->GIFImageWriter
GIFMetadata#fatal(Node, String)::: metadata fatal:::throw->new->IIOInvalidTreeException
GIFMetadata#getStringAttribute(Node, String, String, boolean, String[])::: metadata get string attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->value->attr->getNodeValue->if->if->node->getNodeName->fatal->validValue->len->for->i->if->node->getNodeName->fatal->return
GIFMetadata#getIntAttribute(Node, String, int, boolean, boolean, int, int)::: metadata get int attribute:::value->getStringAttribute->if->equals->return->intValue->try->Integer->parseInt->catch->node->getNodeName->fatal->finally->if->node->getNodeName->fatal->return
GIFMetadata#getFloatAttribute(Node, String, float, boolean)::: metadata get float attribute:::value->getStringAttribute->if->return->return->Float->parseFloat
GIFMetadata#getIntAttribute(Node, String, boolean, int, int)::: metadata get int attribute:::return->getIntAttribute
GIFMetadata#getFloatAttribute(Node, String)::: metadata get float attribute:::return->getFloatAttribute
GIFMetadata#getBooleanAttribute(Node, String, boolean, boolean)::: metadata get boolean attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->value->attr->getNodeValue->if->value->equals->value->equals->return->else->if->value->equals->value->equals->return->else->fatal->return
GIFMetadata#getBooleanAttribute(Node, String)::: metadata get boolean attribute:::return->getBooleanAttribute
GIFMetadata#getEnumeratedAttribute(Node, String, String[], int, boolean)::: metadata get enumerated attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->value->attr->getNodeValue->for->i->fatal->return
GIFMetadata#getEnumeratedAttribute(Node, String, String[])::: metadata get enumerated attribute:::return->getEnumeratedAttribute
GIFMetadata#getAttribute(Node, String, String, boolean)::: metadata get attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->return->attr->getNodeValue
GIFMetadata#getAttribute(Node, String)::: metadata get attribute:::return->getAttribute
GIFMetadata#mergeTree(String, Node)::: metadata merge tree:::if->formatName->equals->if->throw->new->IllegalArgumentException->mergeNativeTree->else->if->formatName->equals->if->throw->new->IllegalArgumentException->mergeStandardTree->else->throw->new->IllegalArgumentException
GIFMetadata#getColorTable(Node, String, boolean, int)::: metadata get color table:::red->new->byteArr->green->new->byteArr->blue->new->byteArr->maxIndex->entry->colorTableNode->getFirstChild->if->fatal->while->if->entry->getNodeName->equals->entry->getNodeName->fatal->index->getIntAttribute->if->getIntAttribute->getIntAttribute->getIntAttribute->entry->getNextSibling->numEntries->if->fatal->colorTable->new->byteArr->for->i->j->return
GIFMetadata#mergeNativeTree(Node)::: metadata merge native tree:::
GIFMetadata#mergeStandardTree(Node)::: metadata merge standard tree:::
GIFStreamMetadata#isReadOnly()::: stream metadata is read only:::return
GIFStreamMetadata#getAsTree(String)::: stream metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->new->IllegalArgumentException
GIFStreamMetadata#getNativeTree()::: stream metadata get native tree:::node->root->new->IIOMetadataNode->new->IIOMetadataNode->node->setAttribute->root->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->root->appendChild->if->new->IIOMetadataNode->numEntries->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->setAttribute->for->i->root->appendChild->return
GIFStreamMetadata#getStandardChromaNode()::: stream metadata get standard chroma node:::chroma_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->if->new->IIOMetadataNode->numEntries->for->i->chroma_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->chroma_node->appendChild->return
GIFStreamMetadata#getStandardCompressionNode()::: stream metadata get standard compression node:::compression_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->return
GIFStreamMetadata#getStandardDataNode()::: stream metadata get standard data node:::data_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->data_node->appendChild->return
GIFStreamMetadata#getStandardDimensionNode()::: stream metadata get standard dimension node:::dimension_node->new->IIOMetadataNode->node->new->IIOMetadataNode->aspectRatio->if->node->Float->toString->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->Integer->toString->setAttribute->dimension_node->appendChild->return
GIFStreamMetadata#getStandardDocumentNode()::: stream metadata get standard document node:::document_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->document_node->appendChild->return
GIFStreamMetadata#getStandardTextNode()::: stream metadata get standard text node:::return
GIFStreamMetadata#getStandardTransparencyNode()::: stream metadata get standard transparency node:::return
GIFStreamMetadata#setFromTree(String, Node)::: stream metadata set from tree:::throw->new->IllegalStateException
GIFStreamMetadata#mergeNativeTree(Node)::: stream metadata merge native tree:::throw->new->IllegalStateException
GIFStreamMetadata#mergeStandardTree(Node)::: stream metadata merge standard tree:::throw->new->IllegalStateException
GIFStreamMetadata#reset()::: stream metadata reset:::throw->new->IllegalStateException
GIFStreamMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: stream metadata format can node appear:::return
GIFStreamMetadataFormat#getInstance()::: stream metadata format get instance:::if->new->GIFStreamMetadataFormat->return
GIFStreamMetadataFormatResources#getContents()::: stream metadata format resources get contents:::return->new->ObjectArrs
GIFWritableImageMetadata#isReadOnly()::: writable image metadata is read only:::return
GIFWritableImageMetadata#reset()::: writable image metadata reset:::
GIFWritableImageMetadata#fromISO8859(String)::: writable image metadata from o8859:::try->return->data->getBytes->catch->return->getBytes->finally
GIFWritableImageMetadata#mergeNativeTree(Node)::: writable image metadata merge native tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getBooleanAttribute->else->if->name->equals->sizeOfLocalColorTable->getIntAttribute->if->fatal->getBooleanAttribute->getColorTable->else->if->name->equals->disposalMethodName->getStringAttribute->while->disposalMethodName->equals->getBooleanAttribute->getBooleanAttribute->getIntAttribute->getIntAttribute->else->if->name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->textString->getStringAttribute->fromISO8859->else->if->name->equals->applicationExtension->node->getFirstChild->if->applicationExtension->getNodeName->equals->fatal->applicationIDString->getStringAttribute->authenticationCodeString->getStringAttribute->applicationExtensionData->applicationExtension->getUserObject->if->fatal->if->new->ArrayList<>->new->ArrayList<>->new->ArrayList<>->applicationIDs->fromISO8859->add->authenticationCodes->fromISO8859->add->applicationData->add->else->if->name->equals->commentExtension->node->getFirstChild->if->while->if->commentExtension->getNodeName->equals->fatal->if->new->ArrayList<>->comment->getStringAttribute->comments->fromISO8859->add->commentExtension->getNextSibling->else->fatal->node->getNextSibling
GIFWritableImageMetadata#mergeStandardTree(Node)::: writable image metadata merge standard tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getColorTable->break->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->numProgressiveScans->getIntAttribute->if->break->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getIntAttribute->else->if->childName->equals->getIntAttribute->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getAttribute->equals->Charset->getAttribute->isSupported->value->getAttribute->comment->fromISO8859->if->new->ArrayList<>->comments->add->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getIntAttribute->break->childNode->getNextSibling->node->getNextSibling
GIFWritableImageMetadata#setFromTree(String, Node)::: writable image metadata set from tree:::reset->mergeTree
GIFWritableStreamMetadata#isReadOnly()::: writable stream metadata is read only:::return
GIFWritableStreamMetadata#mergeTree(String, Node)::: writable stream metadata merge tree:::if->formatName->equals->if->throw->new->IllegalArgumentException->mergeNativeTree->else->if->formatName->equals->if->throw->new->IllegalArgumentException->mergeStandardTree->else->throw->new->IllegalArgumentException
GIFWritableStreamMetadata#reset()::: writable stream metadata reset:::
GIFWritableStreamMetadata#mergeNativeTree(Node)::: writable stream metadata merge native tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->getStringAttribute->else->if->name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->else->if->name->equals->sizeOfGlobalColorTable->getIntAttribute->if->fatal->getIntAttribute->getBooleanAttribute->getColorTable->else->fatal->node->getNextSibling
GIFWritableStreamMetadata#mergeStandardTree(Node)::: writable stream metadata merge standard tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getColorTable->else->if->childName->equals->getIntAttribute->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->getIntAttribute->break->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->aspectRatio->getFloatAttribute->if->else->ratio->Math->Math->min->max->else->if->childName->equals->getIntAttribute->else->if->childName->equals->getIntAttribute->childNode->getNextSibling->else->if->name->equals->childNode->node->getFirstChild->while->childName->childNode->getNodeName->if->childName->equals->formatVersion->getStringAttribute->for->i->break->childNode->getNextSibling->node->getNextSibling
GIFWritableStreamMetadata#setFromTree(String, Node)::: writable stream metadata set from tree:::reset->mergeTree

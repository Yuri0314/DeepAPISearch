AnnotatedTypeTree#getAnnotations():::Returns the annotations associated with this type expression.:::
AnnotatedTypeTree#getUnderlyingType():::Returns the underlying type with which the annotations are associated.:::
AnnotationTree#getAnnotationType():::Returns the annotation type.:::
AnnotationTree#getArguments():::Returns the arguments, if any, for the annotation.:::
ArrayAccessTree#getExpression():::Returns the expression for the array being accessed.:::
ArrayAccessTree#getIndex():::Returns the expression for the index.:::
ArrayTypeTree#getType():::Returns the element type of this array type.:::
AssertTree#getCondition():::Returns the condition being asserted.:::
AssertTree#getDetail():::Returns the detail expression.:::
AssignmentTree#getVariable():::Returns the variable being assigned to.:::
AssignmentTree#getExpression():::Returns the expression being assigned to the variable.:::
BinaryTree#getLeftOperand():::Returns the left (first) operand of the expression.:::
BinaryTree#getRightOperand():::Returns the right (second) operand of the expression.:::
BlockTree#isStatic():::Returns true if and only if this is a static initializer block.:::
BlockTree#getStatements():::Returns the statements comprising this block.:::
BreakTree#getLabel():::Returns the label for this break statement.:::
CaseTree#getExpression():::Returns the expression for the case, or null if this is the default case.:::
CaseTree#getStatements():::Returns the statements labeled by the case.:::
CatchTree#getParameter():::Returns the catch variable:::
CatchTree#getBlock():::Returns the catch block.:::
ClassTree#getModifiers():::Returns the modifiers, including any annotations, for this type declaration.:::
ClassTree#getSimpleName():::Returns the simple name of this type declaration.:::
ClassTree#getTypeParameters():::Returns any type parameters of this type declaration.:::
ClassTree#getExtendsClause():::Returns the supertype of this type declaration, or null if none is provided.:::
ClassTree#getImplementsClause():::Returns the interfaces implemented by this type declaration.:::
ClassTree#getMembers():::Returns the members declared in this type declaration.:::
CompilationUnitTree#getPackageAnnotations():::Returns the annotations listed on any package declaration at the head of this compilation unit, or null if there is no package declaration.:::
CompilationUnitTree#getPackageName():::Returns the name contained in any package declaration at the head of this compilation unit, or null if there is no package declaration.:::
CompilationUnitTree#getPackage():::Returns the package tree associated with this compilation unit, or null if there is no package declaration.:::
CompilationUnitTree#getImports():::Returns the import declarations appearing in this compilation unit.:::
CompilationUnitTree#getTypeDecls():::Returns the type declarations appearing in this compilation unit:::
CompilationUnitTree#getSourceFile():::Returns the file object containing the source for this compilation unit.:::
CompilationUnitTree#getLineMap():::Returns the line map for this compilation unit, if available:::
CompoundAssignmentTree#getVariable():::Returns the variable on the left hand side of the compound assignment.:::
CompoundAssignmentTree#getExpression():::Returns the expression on the right hand side of the compound assignment.:::
ConditionalExpressionTree#getCondition():::Returns the condition.:::
ConditionalExpressionTree#getTrueExpression():::Returns the expression to be evaluated if the condition is true.:::
ConditionalExpressionTree#getFalseExpression():::Returns the expression to be evaluated if the condition is false.:::
ContinueTree#getLabel():::Returns the label for this continue statement.:::
DoWhileLoopTree#getCondition():::Returns the condition of the loop.:::
DoWhileLoopTree#getStatement():::Returns the body of the loop.:::
EnhancedForLoopTree#getVariable():::Returns the control variable for the loop.:::
EnhancedForLoopTree#getExpression():::Returns the expression yielding the values for the control variable.:::
EnhancedForLoopTree#getStatement():::Returns the body of the loop.:::
ErroneousTree#getErrorTrees():::Returns any trees that were saved in this node.:::
ExportsTree#getPackageName():::Returns the name of the package to be exported.:::
ExportsTree#getModuleNames():::Returns the names of the modules to which the package is exported, or null, if the package is exported to all modules.:::
ExpressionStatementTree#getExpression():::Returns the expression constituting this statement.:::
ForLoopTree#getInitializer():::Returns any initializers of the for statement:::
ForLoopTree#getCondition():::Returns the condition of the for statement:::
ForLoopTree#getUpdate():::Returns any update expressions of the for statement.:::
ForLoopTree#getStatement():::Returns the body of the for statement.:::
IdentifierTree#getName():::Returns the name of the identifier.:::
IfTree#getCondition():::Returns the condition of the if-statement.:::
IfTree#getThenStatement():::Returns the statement to be executed if the condition is true:::
IfTree#getElseStatement():::Returns the statement to be executed if the condition is false, or null if there is no such statement.:::
ImportTree#isStatic():::Returns true if this is a static import declaration.:::
ImportTree#getQualifiedIdentifier():::Returns the qualified identifier for the declaration(s) being imported:::
InstanceOfTree#getExpression():::Returns the expression to be tested.:::
InstanceOfTree#getType():::Returns the type for which to check.:::
IntersectionTypeTree#getBounds():::Returns the bounds of the type.:::
LabeledStatementTree#getLabel():::Returns the label.:::
LabeledStatementTree#getStatement():::Returns the statement that is labeled.:::
LambdaExpressionTree#getParameters():::Returns the parameters of this lambda expression.:::
LambdaExpressionTree#getBody():::Returns the body of the lambda expression.:::
LambdaExpressionTree#getBodyKind():::Returns the kind of the body of the lambda expression.:::
LineMap#getStartPosition(long):::Finds the start position of a line.:::
LineMap#getPosition(long, long):::Finds the position corresponding to a (line,column).:::
LineMap#getLineNumber(long):::Finds the line containing a position; a line termination character is on the line it terminates.:::
LineMap#getColumnNumber(long):::Finds the column for a character position:::
LiteralTree#getValue():::Returns the value of the literal expression:::
MemberReferenceTree#getMode():::Returns the mode of the reference.:::
MemberReferenceTree#getQualifierExpression():::Returns the qualifier expression for the reference.:::
MemberReferenceTree#getName():::Returns the name of the reference.:::
MemberReferenceTree#getTypeArguments():::Returns the type arguments for the reference.:::
MemberSelectTree#getExpression():::Returns the expression for which a member is to be selected.:::
MemberSelectTree#getIdentifier():::Returns the name of the member to be selected.:::
MethodInvocationTree#getTypeArguments():::Returns the type arguments for this method invocation.:::
MethodInvocationTree#getMethodSelect():::Returns the expression identifying the method to be invoked.:::
MethodInvocationTree#getArguments():::Returns the arguments for the method invocation.:::
MethodTree#getModifiers():::Returns the modifiers, including any annotations for the method being declared.:::
MethodTree#getName():::Returns the name of the method being declared.:::
MethodTree#getReturnType():::Returns the return type of the method being declared:::
MethodTree#getTypeParameters():::Returns the type parameters of the method being declared.:::
MethodTree#getParameters():::Returns the parameters of the method being declared.:::
MethodTree#getReceiverParameter():::Return an explicit receiver parameter ("this" parameter), or null if none.:::
MethodTree#getThrows():::Returns the exceptions listed as being thrown by this method.:::
MethodTree#getBody():::Returns the method body, or null if this is an abstract or native method.:::
MethodTree#getDefaultValue()::: method tree get default value:::
ModifiersTree#getFlags():::Returns the flags in this modifiers tree.:::
ModifiersTree#getAnnotations():::Returns the annotations in this modifiers tree.:::
ModuleTree#getAnnotations():::Returns the annotations associated with this module declaration.:::
ModuleTree#getModuleType():::Returns the type of this module.:::
ModuleTree#getName():::Returns the name of the module.:::
ModuleTree#getDirectives():::Returns the directives in the module declaration.:::
NewArrayTree#getType():::Returns the base type of the expression:::
NewArrayTree#getDimensions():::Returns the dimension expressions for the type.:::
NewArrayTree#getInitializers():::Returns the initializer expressions.:::
NewArrayTree#getAnnotations():::Returns the annotations on the base type.:::
NewArrayTree#getDimAnnotations():::Returns the annotations on each of the dimension expressions.:::
NewClassTree#getEnclosingExpression():::Returns the enclosing expression, or null if none.:::
NewClassTree#getTypeArguments():::Returns the type arguments for the object being created.:::
NewClassTree#getIdentifier():::Returns the name of the class being instantiated.:::
NewClassTree#getArguments():::Returns the arguments for the constructor to be invoked.:::
NewClassTree#getClassBody():::Returns the class body if an anonymous class is being instantiated, and null otherwise.:::
OpensTree#getPackageName():::Returns the name of the package to be opened.:::
OpensTree#getModuleNames():::Returns the names of the modules to which the package is opened, or null, if the package is opened to all modules.:::
PackageTree#getAnnotations():::Returns the annotations associated with this package declaration.:::
PackageTree#getPackageName():::Returns the name of the package being declared.:::
ParameterizedTypeTree#getType():::Returns the base type.:::
ParameterizedTypeTree#getTypeArguments():::Returns the type arguments.:::
ParenthesizedTree#getExpression():::Returns the expression within the parentheses.:::
PrimitiveTypeTree#getPrimitiveTypeKind():::Returns the kind of this primitive type.:::
ProvidesTree#getServiceName():::Returns the name of the service type being provided.:::
ProvidesTree#getImplementationNames():::Returns the names of the implementation types being provided.:::
RequiresTree#isStatic():::Returns true if this is a "requires static" directive.:::
RequiresTree#isTransitive():::Returns true if this is a "requires transitive" directive.:::
RequiresTree#getModuleName():::Returns the name of the module that is required.:::
ReturnTree#getExpression():::Returns the expression to be returned.:::
Scope#getEnclosingScope():::Returns the enclosing scope.:::
Scope#getEnclosingClass():::Returns the innermost type element containing the position of this scope.:::
Scope#getEnclosingMethod():::Returns the innermost executable element containing the position of this scope.:::
Scope#getLocalElements():::Returns the elements directly contained in this scope.:::
SwitchTree#getExpression():::Returns the expression for the switch statement.:::
SwitchTree#getCases():::Returns the cases for the switch statement.:::
SynchronizedTree#getExpression():::Returns the expression on which to synchronize.:::
SynchronizedTree#getBlock():::Returns the block of the synchronized statement.:::
ThrowTree#getExpression():::Returns the expression to be thrown.:::
Tree#getKind():::Returns the kind of this tree.:::
Tree#accept(TreeVisitor, D):::Accept method used to implement the visitor pattern:::
TreeVisitor#visitAnnotatedType(AnnotatedTypeTree, P):::Visits an AnnotatedTypeTree node.:::
TreeVisitor#visitAnnotation(AnnotationTree, P):::Visits an AnnotatedTree node.:::
TreeVisitor#visitMethodInvocation(MethodInvocationTree, P):::Visits a MethodInvocationTree node.:::
TreeVisitor#visitAssert(AssertTree, P):::Visits an AssertTree node.:::
TreeVisitor#visitAssignment(AssignmentTree, P):::Visits an AssignmentTree node.:::
TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P):::Visits a CompoundAssignmentTree node.:::
TreeVisitor#visitBinary(BinaryTree, P):::Visits a BinaryTree node.:::
TreeVisitor#visitBlock(BlockTree, P):::Visits a BlockTree node.:::
TreeVisitor#visitBreak(BreakTree, P):::Visits a BreakTree node.:::
TreeVisitor#visitCase(CaseTree, P):::Visits a CaseTree node.:::
TreeVisitor#visitCatch(CatchTree, P):::Visits a CatchTree node.:::
TreeVisitor#visitClass(ClassTree, P):::Visits a ClassTree node.:::
TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P):::Visits a ConditionalExpressionTree node.:::
TreeVisitor#visitContinue(ContinueTree, P):::Visits a ContinueTree node.:::
TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P):::Visits a DoWhileTree node.:::
TreeVisitor#visitErroneous(ErroneousTree, P):::Visits an ErroneousTree node.:::
TreeVisitor#visitExpressionStatement(ExpressionStatementTree, P):::Visits an ExpressionStatementTree node.:::
TreeVisitor#visitEnhancedForLoop(EnhancedForLoopTree, P):::Visits an EnhancedForLoopTree node.:::
TreeVisitor#visitForLoop(ForLoopTree, P):::Visits a ForLoopTree node.:::
TreeVisitor#visitIdentifier(IdentifierTree, P):::Visits an IdentifierTree node.:::
TreeVisitor#visitIf(IfTree, P):::Visits an IfTree node.:::
TreeVisitor#visitImport(ImportTree, P):::Visits an ImportTree node.:::
TreeVisitor#visitArrayAccess(ArrayAccessTree, P):::Visits an ArrayAccessTree node.:::
TreeVisitor#visitLabeledStatement(LabeledStatementTree, P):::Visits a LabeledStatementTree node.:::
TreeVisitor#visitLiteral(LiteralTree, P):::Visits a LiteralTree node.:::
TreeVisitor#visitMethod(MethodTree, P):::Visits a MethodTree node.:::
TreeVisitor#visitModifiers(ModifiersTree, P):::Visits a ModifiersTree node.:::
TreeVisitor#visitNewArray(NewArrayTree, P):::Visits a NewArrayTree node.:::
TreeVisitor#visitNewClass(NewClassTree, P):::Visits a NewClassTree node.:::
TreeVisitor#visitLambdaExpression(LambdaExpressionTree, P):::Visits a LambdaExpressionTree node.:::
TreeVisitor#visitPackage(PackageTree, P):::Visits a PackageTree node.:::
TreeVisitor#visitParenthesized(ParenthesizedTree, P):::Visits a ParenthesizedTree node.:::
TreeVisitor#visitReturn(ReturnTree, P):::Visits a ReturnTree node.:::
TreeVisitor#visitMemberSelect(MemberSelectTree, P):::Visits a MemberSelectTree node.:::
TreeVisitor#visitMemberReference(MemberReferenceTree, P):::Visits a MemberReferenceTree node.:::
TreeVisitor#visitEmptyStatement(EmptyStatementTree, P):::Visits an EmptyStatementTree node.:::
TreeVisitor#visitSwitch(SwitchTree, P):::Visits a SwitchTree node.:::
TreeVisitor#visitSynchronized(SynchronizedTree, P):::Visits a SynchronizedTree node.:::
TreeVisitor#visitThrow(ThrowTree, P):::Visits a ThrowTree node.:::
TreeVisitor#visitCompilationUnit(CompilationUnitTree, P):::Visits a CompilationUnitTree node.:::
TreeVisitor#visitTry(TryTree, P):::Visits a TryTree node.:::
TreeVisitor#visitParameterizedType(ParameterizedTypeTree, P):::Visits a ParameterizedTypeTree node.:::
TreeVisitor#visitUnionType(UnionTypeTree, P):::Visits a UnionTypeTree node.:::
TreeVisitor#visitIntersectionType(IntersectionTypeTree, P):::Visits an IntersectionTypeTree node.:::
TreeVisitor#visitArrayType(ArrayTypeTree, P):::Visits an ArrayTypeTree node.:::
TreeVisitor#visitTypeCast(TypeCastTree, P):::Visits a TypeCastTree node.:::
TreeVisitor#visitPrimitiveType(PrimitiveTypeTree, P):::Visits a PrimitiveTypeTree node.:::
TreeVisitor#visitTypeParameter(TypeParameterTree, P):::Visits a TypeParameterTree node.:::
TreeVisitor#visitInstanceOf(InstanceOfTree, P):::Visits an InstanceOfTree node.:::
TreeVisitor#visitUnary(UnaryTree, P):::Visits a UnaryTree node.:::
TreeVisitor#visitVariable(VariableTree, P):::Visits a VariableTree node.:::
TreeVisitor#visitWhileLoop(WhileLoopTree, P):::Visits a WhileLoopTree node.:::
TreeVisitor#visitWildcard(WildcardTree, P):::Visits a WildcardTypeTree node.:::
TreeVisitor#visitModule(ModuleTree, P):::Visits a ModuleTree node.:::
TreeVisitor#visitExports(ExportsTree, P):::Visits an ExportsTree node.:::
TreeVisitor#visitOpens(OpensTree, P):::Visits an OpensTree node.:::
TreeVisitor#visitProvides(ProvidesTree, P):::Visits a ProvidesTree node.:::
TreeVisitor#visitRequires(RequiresTree, P):::Visits a RequiresTree node.:::
TreeVisitor#visitUses(UsesTree, P):::Visits a UsesTree node.:::
TreeVisitor#visitOther(Tree, P):::Visits an unknown type of Tree node:::
TryTree#getBlock():::Returns the block of the try statement.:::
TryTree#getCatches():::Returns any catch blocks provided in the try statement:::
TryTree#getFinallyBlock():::Returns the finally block provided in the try statement, or null if there is none.:::
TryTree#getResources():::Returns any resource declarations provided in the try statement:::
TypeCastTree#getType():::Returns the target type of the cast.:::
TypeCastTree#getExpression():::Returns the expression being cast.:::
TypeParameterTree#getName():::Returns the name of the type parameter.:::
TypeParameterTree#getBounds():::Returns the bounds of the type parameter.:::
TypeParameterTree#getAnnotations():::Returns annotations on the type parameter declaration:::
UnaryTree#getExpression():::Returns the expression that is the operand of the unary operator.:::
UnionTypeTree#getTypeAlternatives():::Returns the alternative type expressions.:::
UsesTree#getServiceName():::Returns the name of the service type.:::
VariableTree#getModifiers():::Returns the modifiers, including any annotations, on the declaration.:::
VariableTree#getName():::Returns the name of the variable being declared.:::
VariableTree#getNameExpression():::Returns the qualified identifier for the name being "declared":::
VariableTree#getType():::Returns the type of the variable being declared.:::
VariableTree#getInitializer():::Returns the initializer for the variable, or null if none.:::
WhileLoopTree#getCondition():::Returns the condition of the loop.:::
WhileLoopTree#getStatement():::Returns the body of the loop.:::
WildcardTree#getBound():::Returns the bound of the wildcard.:::

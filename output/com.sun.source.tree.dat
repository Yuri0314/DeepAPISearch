com.sun.source.tree.AnnotatedTypeTree#getAnnotations()->List:::Returns the annotations associated with this type expression.
com.sun.source.tree.AnnotatedTypeTree#getUnderlyingType()->ExpressionTree:::Returns the underlying type with which the annotations are associated.
com.sun.source.tree.AnnotationTree#getAnnotationType()->Tree:::Returns the annotation type.
com.sun.source.tree.AnnotationTree#getArguments()->List:::Returns the arguments, if any, for the annotation.
com.sun.source.tree.ArrayAccessTree#getExpression()->ExpressionTree:::Returns the expression for the array being accessed.
com.sun.source.tree.ArrayAccessTree#getIndex()->ExpressionTree:::Returns the expression for the index.
com.sun.source.tree.ArrayTypeTree#getType()->Tree:::Returns the element type of this array type.
com.sun.source.tree.AssertTree#getCondition()->ExpressionTree:::Returns the condition being asserted.
com.sun.source.tree.AssertTree#getDetail()->ExpressionTree:::Returns the detail expression.
com.sun.source.tree.AssignmentTree#getVariable()->ExpressionTree:::Returns the variable being assigned to.
com.sun.source.tree.AssignmentTree#getExpression()->ExpressionTree:::Returns the expression being assigned to the variable.
com.sun.source.tree.BinaryTree#getLeftOperand()->ExpressionTree:::Returns the left (first) operand of the expression.
com.sun.source.tree.BinaryTree#getRightOperand()->ExpressionTree:::Returns the right (second) operand of the expression.
com.sun.source.tree.BlockTree#isStatic()->boolean:::Returns true if and only if this is a static initializer block.
com.sun.source.tree.BlockTree#getStatements()->List:::Returns the statements comprising this block.
com.sun.source.tree.BreakTree#getLabel()->Name:::Returns the label for this break statement.
com.sun.source.tree.CaseTree#getExpression()->ExpressionTree:::Returns the expression for the case, or null if this is the default case.
com.sun.source.tree.CaseTree#getStatements()->List:::Returns the statements labeled by the case.
com.sun.source.tree.CatchTree#getParameter()->VariableTree:::Returns the catch variable
com.sun.source.tree.CatchTree#getBlock()->BlockTree:::Returns the catch block.
com.sun.source.tree.ClassTree#getModifiers()->ModifiersTree:::Returns the modifiers, including any annotations, for this type declaration.
com.sun.source.tree.ClassTree#getSimpleName()->Name:::Returns the simple name of this type declaration.
com.sun.source.tree.ClassTree#getTypeParameters()->List:::Returns any type parameters of this type declaration.
com.sun.source.tree.ClassTree#getExtendsClause()->Tree:::Returns the supertype of this type declaration, or null if none is provided.
com.sun.source.tree.ClassTree#getImplementsClause()->List:::Returns the interfaces implemented by this type declaration.
com.sun.source.tree.ClassTree#getMembers()->List:::Returns the members declared in this type declaration.
com.sun.source.tree.CompilationUnitTree#getPackageAnnotations()->List:::Returns the annotations listed on any package declaration at the head of this compilation unit, or null if there is no package declaration.
com.sun.source.tree.CompilationUnitTree#getPackageName()->ExpressionTree:::Returns the name contained in any package declaration at the head of this compilation unit, or null if there is no package declaration.
com.sun.source.tree.CompilationUnitTree#getPackage()->PackageTree:::Returns the package tree associated with this compilation unit, or null if there is no package declaration.
com.sun.source.tree.CompilationUnitTree#getImports()->List:::Returns the import declarations appearing in this compilation unit.
com.sun.source.tree.CompilationUnitTree#getTypeDecls()->List:::Returns the type declarations appearing in this compilation unit
com.sun.source.tree.CompilationUnitTree#getSourceFile()->JavaFileObject:::Returns the file object containing the source for this compilation unit.
com.sun.source.tree.CompilationUnitTree#getLineMap()->LineMap:::Returns the line map for this compilation unit, if available
com.sun.source.tree.CompoundAssignmentTree#getVariable()->ExpressionTree:::Returns the variable on the left hand side of the compound assignment.
com.sun.source.tree.CompoundAssignmentTree#getExpression()->ExpressionTree:::Returns the expression on the right hand side of the compound assignment.
com.sun.source.tree.ConditionalExpressionTree#getCondition()->ExpressionTree:::Returns the condition.
com.sun.source.tree.ConditionalExpressionTree#getTrueExpression()->ExpressionTree:::Returns the expression to be evaluated if the condition is true.
com.sun.source.tree.ConditionalExpressionTree#getFalseExpression()->ExpressionTree:::Returns the expression to be evaluated if the condition is false.
com.sun.source.tree.ContinueTree#getLabel()->Name:::Returns the label for this continue statement.
com.sun.source.tree.DoWhileLoopTree#getCondition()->ExpressionTree:::Returns the condition of the loop.
com.sun.source.tree.DoWhileLoopTree#getStatement()->StatementTree:::Returns the body of the loop.
com.sun.source.tree.EnhancedForLoopTree#getVariable()->VariableTree:::Returns the control variable for the loop.
com.sun.source.tree.EnhancedForLoopTree#getExpression()->ExpressionTree:::Returns the expression yielding the values for the control variable.
com.sun.source.tree.EnhancedForLoopTree#getStatement()->StatementTree:::Returns the body of the loop.
com.sun.source.tree.ErroneousTree#getErrorTrees()->List:::Returns any trees that were saved in this node.
com.sun.source.tree.ExportsTree#getPackageName()->ExpressionTree:::Returns the name of the package to be exported.
com.sun.source.tree.ExportsTree#getModuleNames()->List:::Returns the names of the modules to which the package is exported, or null, if the package is exported to all modules.
com.sun.source.tree.ExpressionStatementTree#getExpression()->ExpressionTree:::Returns the expression constituting this statement.
com.sun.source.tree.ForLoopTree#getInitializer()->List:::Returns any initializers of the for statement
com.sun.source.tree.ForLoopTree#getCondition()->ExpressionTree:::Returns the condition of the for statement
com.sun.source.tree.ForLoopTree#getUpdate()->List:::Returns any update expressions of the for statement.
com.sun.source.tree.ForLoopTree#getStatement()->StatementTree:::Returns the body of the for statement.
com.sun.source.tree.IdentifierTree#getName()->Name:::Returns the name of the identifier.
com.sun.source.tree.IfTree#getCondition()->ExpressionTree:::Returns the condition of the if-statement.
com.sun.source.tree.IfTree#getThenStatement()->StatementTree:::Returns the statement to be executed if the condition is true
com.sun.source.tree.IfTree#getElseStatement()->StatementTree:::Returns the statement to be executed if the condition is false, or null if there is no such statement.
com.sun.source.tree.ImportTree#isStatic()->boolean:::Returns true if this is a static import declaration.
com.sun.source.tree.ImportTree#getQualifiedIdentifier()->Tree:::Returns the qualified identifier for the declaration(s) being imported
com.sun.source.tree.InstanceOfTree#getExpression()->ExpressionTree:::Returns the expression to be tested.
com.sun.source.tree.InstanceOfTree#getType()->Tree:::Returns the type for which to check.
com.sun.source.tree.IntersectionTypeTree#getBounds()->List:::Returns the bounds of the type.
com.sun.source.tree.LabeledStatementTree#getLabel()->Name:::Returns the label.
com.sun.source.tree.LabeledStatementTree#getStatement()->StatementTree:::Returns the statement that is labeled.
com.sun.source.tree.LambdaExpressionTree#getParameters()->List:::Returns the parameters of this lambda expression.
com.sun.source.tree.LambdaExpressionTree#getBody()->Tree:::Returns the body of the lambda expression.
com.sun.source.tree.LambdaExpressionTree#getBodyKind()->BodyKind:::Returns the kind of the body of the lambda expression.
com.sun.source.tree.LineMap#getStartPosition(long)->long:::Finds the start position of a line.
com.sun.source.tree.LineMap#getPosition(long, long)->long:::Finds the position corresponding to a (line,column).
com.sun.source.tree.LineMap#getLineNumber(long)->long:::Finds the line containing a position; a line termination character is on the line it terminates.
com.sun.source.tree.LineMap#getColumnNumber(long)->long:::Finds the column for a character position
com.sun.source.tree.LiteralTree#getValue()->Object:::Returns the value of the literal expression
com.sun.source.tree.MemberReferenceTree#getMode()->ReferenceMode:::Returns the mode of the reference.
com.sun.source.tree.MemberReferenceTree#getQualifierExpression()->ExpressionTree:::Returns the qualifier expression for the reference.
com.sun.source.tree.MemberReferenceTree#getName()->Name:::Returns the name of the reference.
com.sun.source.tree.MemberReferenceTree#getTypeArguments()->List:::Returns the type arguments for the reference.
com.sun.source.tree.MemberSelectTree#getExpression()->ExpressionTree:::Returns the expression for which a member is to be selected.
com.sun.source.tree.MemberSelectTree#getIdentifier()->Name:::Returns the name of the member to be selected.
com.sun.source.tree.MethodInvocationTree#getTypeArguments()->List:::Returns the type arguments for this method invocation.
com.sun.source.tree.MethodInvocationTree#getMethodSelect()->ExpressionTree:::Returns the expression identifying the method to be invoked.
com.sun.source.tree.MethodInvocationTree#getArguments()->List:::Returns the arguments for the method invocation.
com.sun.source.tree.MethodTree#getModifiers()->ModifiersTree:::Returns the modifiers, including any annotations for the method being declared.
com.sun.source.tree.MethodTree#getName()->Name:::Returns the name of the method being declared.
com.sun.source.tree.MethodTree#getReturnType()->Tree:::Returns the return type of the method being declared
com.sun.source.tree.MethodTree#getTypeParameters()->List:::Returns the type parameters of the method being declared.
com.sun.source.tree.MethodTree#getParameters()->List:::Returns the parameters of the method being declared.
com.sun.source.tree.MethodTree#getReceiverParameter()->VariableTree:::Return an explicit receiver parameter ("this" parameter), or null if none.
com.sun.source.tree.MethodTree#getThrows()->List:::Returns the exceptions listed as being thrown by this method.
com.sun.source.tree.MethodTree#getBody()->BlockTree:::Returns the method body, or null if this is an abstract or native method.
com.sun.source.tree.MethodTree#getDefaultValue()->Tree::: method tree get default value
com.sun.source.tree.ModifiersTree#getFlags()->Set:::Returns the flags in this modifiers tree.
com.sun.source.tree.ModifiersTree#getAnnotations()->List:::Returns the annotations in this modifiers tree.
com.sun.source.tree.ModuleTree#getAnnotations()->List:::Returns the annotations associated with this module declaration.
com.sun.source.tree.ModuleTree#getModuleType()->ModuleKind:::Returns the type of this module.
com.sun.source.tree.ModuleTree#getName()->ExpressionTree:::Returns the name of the module.
com.sun.source.tree.ModuleTree#getDirectives()->List:::Returns the directives in the module declaration.
com.sun.source.tree.NewArrayTree#getType()->Tree:::Returns the base type of the expression
com.sun.source.tree.NewArrayTree#getDimensions()->List:::Returns the dimension expressions for the type.
com.sun.source.tree.NewArrayTree#getInitializers()->List:::Returns the initializer expressions.
com.sun.source.tree.NewArrayTree#getAnnotations()->List:::Returns the annotations on the base type.
com.sun.source.tree.NewArrayTree#getDimAnnotations()->List>:::Returns the annotations on each of the dimension expressions.
com.sun.source.tree.NewClassTree#getEnclosingExpression()->ExpressionTree:::Returns the enclosing expression, or null if none.
com.sun.source.tree.NewClassTree#getTypeArguments()->List:::Returns the type arguments for the object being created.
com.sun.source.tree.NewClassTree#getIdentifier()->ExpressionTree:::Returns the name of the class being instantiated.
com.sun.source.tree.NewClassTree#getArguments()->List:::Returns the arguments for the constructor to be invoked.
com.sun.source.tree.NewClassTree#getClassBody()->ClassTree:::Returns the class body if an anonymous class is being instantiated, and null otherwise.
com.sun.source.tree.OpensTree#getPackageName()->ExpressionTree:::Returns the name of the package to be opened.
com.sun.source.tree.OpensTree#getModuleNames()->List:::Returns the names of the modules to which the package is opened, or null, if the package is opened to all modules.
com.sun.source.tree.PackageTree#getAnnotations()->List:::Returns the annotations associated with this package declaration.
com.sun.source.tree.PackageTree#getPackageName()->ExpressionTree:::Returns the name of the package being declared.
com.sun.source.tree.ParameterizedTypeTree#getType()->Tree:::Returns the base type.
com.sun.source.tree.ParameterizedTypeTree#getTypeArguments()->List:::Returns the type arguments.
com.sun.source.tree.ParenthesizedTree#getExpression()->ExpressionTree:::Returns the expression within the parentheses.
com.sun.source.tree.PrimitiveTypeTree#getPrimitiveTypeKind()->TypeKind:::Returns the kind of this primitive type.
com.sun.source.tree.ProvidesTree#getServiceName()->ExpressionTree:::Returns the name of the service type being provided.
com.sun.source.tree.ProvidesTree#getImplementationNames()->List:::Returns the names of the implementation types being provided.
com.sun.source.tree.RequiresTree#isStatic()->boolean:::Returns true if this is a "requires static" directive.
com.sun.source.tree.RequiresTree#isTransitive()->boolean:::Returns true if this is a "requires transitive" directive.
com.sun.source.tree.RequiresTree#getModuleName()->ExpressionTree:::Returns the name of the module that is required.
com.sun.source.tree.ReturnTree#getExpression()->ExpressionTree:::Returns the expression to be returned.
com.sun.source.tree.Scope#getEnclosingScope()->Scope:::Returns the enclosing scope.
com.sun.source.tree.Scope#getEnclosingClass()->TypeElement:::Returns the innermost type element containing the position of this scope.
com.sun.source.tree.Scope#getEnclosingMethod()->ExecutableElement:::Returns the innermost executable element containing the position of this scope.
com.sun.source.tree.Scope#getLocalElements()->Iterable:::Returns the elements directly contained in this scope.
com.sun.source.tree.SwitchTree#getExpression()->ExpressionTree:::Returns the expression for the switch statement.
com.sun.source.tree.SwitchTree#getCases()->List:::Returns the cases for the switch statement.
com.sun.source.tree.SynchronizedTree#getExpression()->ExpressionTree:::Returns the expression on which to synchronize.
com.sun.source.tree.SynchronizedTree#getBlock()->BlockTree:::Returns the block of the synchronized statement.
com.sun.source.tree.ThrowTree#getExpression()->ExpressionTree:::Returns the expression to be thrown.
com.sun.source.tree.Tree#getKind()->Kind:::Returns the kind of this tree.
com.sun.source.tree.Tree#accept(TreeVisitor, D)->R:::Accept method used to implement the visitor pattern
com.sun.source.tree.TreeVisitor#visitAnnotatedType(AnnotatedTypeTree, P)->R:::Visits an AnnotatedTypeTree node.
com.sun.source.tree.TreeVisitor#visitAnnotation(AnnotationTree, P)->R:::Visits an AnnotatedTree node.
com.sun.source.tree.TreeVisitor#visitMethodInvocation(MethodInvocationTree, P)->R:::Visits a MethodInvocationTree node.
com.sun.source.tree.TreeVisitor#visitAssert(AssertTree, P)->R:::Visits an AssertTree node.
com.sun.source.tree.TreeVisitor#visitAssignment(AssignmentTree, P)->R:::Visits an AssignmentTree node.
com.sun.source.tree.TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P)->R:::Visits a CompoundAssignmentTree node.
com.sun.source.tree.TreeVisitor#visitBinary(BinaryTree, P)->R:::Visits a BinaryTree node.
com.sun.source.tree.TreeVisitor#visitBlock(BlockTree, P)->R:::Visits a BlockTree node.
com.sun.source.tree.TreeVisitor#visitBreak(BreakTree, P)->R:::Visits a BreakTree node.
com.sun.source.tree.TreeVisitor#visitCase(CaseTree, P)->R:::Visits a CaseTree node.
com.sun.source.tree.TreeVisitor#visitCatch(CatchTree, P)->R:::Visits a CatchTree node.
com.sun.source.tree.TreeVisitor#visitClass(ClassTree, P)->R:::Visits a ClassTree node.
com.sun.source.tree.TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P)->R:::Visits a ConditionalExpressionTree node.
com.sun.source.tree.TreeVisitor#visitContinue(ContinueTree, P)->R:::Visits a ContinueTree node.
com.sun.source.tree.TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P)->R:::Visits a DoWhileTree node.
com.sun.source.tree.TreeVisitor#visitErroneous(ErroneousTree, P)->R:::Visits an ErroneousTree node.
com.sun.source.tree.TreeVisitor#visitExpressionStatement(ExpressionStatementTree, P)->R:::Visits an ExpressionStatementTree node.
com.sun.source.tree.TreeVisitor#visitEnhancedForLoop(EnhancedForLoopTree, P)->R:::Visits an EnhancedForLoopTree node.
com.sun.source.tree.TreeVisitor#visitForLoop(ForLoopTree, P)->R:::Visits a ForLoopTree node.
com.sun.source.tree.TreeVisitor#visitIdentifier(IdentifierTree, P)->R:::Visits an IdentifierTree node.
com.sun.source.tree.TreeVisitor#visitIf(IfTree, P)->R:::Visits an IfTree node.
com.sun.source.tree.TreeVisitor#visitImport(ImportTree, P)->R:::Visits an ImportTree node.
com.sun.source.tree.TreeVisitor#visitArrayAccess(ArrayAccessTree, P)->R:::Visits an ArrayAccessTree node.
com.sun.source.tree.TreeVisitor#visitLabeledStatement(LabeledStatementTree, P)->R:::Visits a LabeledStatementTree node.
com.sun.source.tree.TreeVisitor#visitLiteral(LiteralTree, P)->R:::Visits a LiteralTree node.
com.sun.source.tree.TreeVisitor#visitMethod(MethodTree, P)->R:::Visits a MethodTree node.
com.sun.source.tree.TreeVisitor#visitModifiers(ModifiersTree, P)->R:::Visits a ModifiersTree node.
com.sun.source.tree.TreeVisitor#visitNewArray(NewArrayTree, P)->R:::Visits a NewArrayTree node.
com.sun.source.tree.TreeVisitor#visitNewClass(NewClassTree, P)->R:::Visits a NewClassTree node.
com.sun.source.tree.TreeVisitor#visitLambdaExpression(LambdaExpressionTree, P)->R:::Visits a LambdaExpressionTree node.
com.sun.source.tree.TreeVisitor#visitPackage(PackageTree, P)->R:::Visits a PackageTree node.
com.sun.source.tree.TreeVisitor#visitParenthesized(ParenthesizedTree, P)->R:::Visits a ParenthesizedTree node.
com.sun.source.tree.TreeVisitor#visitReturn(ReturnTree, P)->R:::Visits a ReturnTree node.
com.sun.source.tree.TreeVisitor#visitMemberSelect(MemberSelectTree, P)->R:::Visits a MemberSelectTree node.
com.sun.source.tree.TreeVisitor#visitMemberReference(MemberReferenceTree, P)->R:::Visits a MemberReferenceTree node.
com.sun.source.tree.TreeVisitor#visitEmptyStatement(EmptyStatementTree, P)->R:::Visits an EmptyStatementTree node.
com.sun.source.tree.TreeVisitor#visitSwitch(SwitchTree, P)->R:::Visits a SwitchTree node.
com.sun.source.tree.TreeVisitor#visitSynchronized(SynchronizedTree, P)->R:::Visits a SynchronizedTree node.
com.sun.source.tree.TreeVisitor#visitThrow(ThrowTree, P)->R:::Visits a ThrowTree node.
com.sun.source.tree.TreeVisitor#visitCompilationUnit(CompilationUnitTree, P)->R:::Visits a CompilationUnitTree node.
com.sun.source.tree.TreeVisitor#visitTry(TryTree, P)->R:::Visits a TryTree node.
com.sun.source.tree.TreeVisitor#visitParameterizedType(ParameterizedTypeTree, P)->R:::Visits a ParameterizedTypeTree node.
com.sun.source.tree.TreeVisitor#visitUnionType(UnionTypeTree, P)->R:::Visits a UnionTypeTree node.
com.sun.source.tree.TreeVisitor#visitIntersectionType(IntersectionTypeTree, P)->R:::Visits an IntersectionTypeTree node.
com.sun.source.tree.TreeVisitor#visitArrayType(ArrayTypeTree, P)->R:::Visits an ArrayTypeTree node.
com.sun.source.tree.TreeVisitor#visitTypeCast(TypeCastTree, P)->R:::Visits a TypeCastTree node.
com.sun.source.tree.TreeVisitor#visitPrimitiveType(PrimitiveTypeTree, P)->R:::Visits a PrimitiveTypeTree node.
com.sun.source.tree.TreeVisitor#visitTypeParameter(TypeParameterTree, P)->R:::Visits a TypeParameterTree node.
com.sun.source.tree.TreeVisitor#visitInstanceOf(InstanceOfTree, P)->R:::Visits an InstanceOfTree node.
com.sun.source.tree.TreeVisitor#visitUnary(UnaryTree, P)->R:::Visits a UnaryTree node.
com.sun.source.tree.TreeVisitor#visitVariable(VariableTree, P)->R:::Visits a VariableTree node.
com.sun.source.tree.TreeVisitor#visitWhileLoop(WhileLoopTree, P)->R:::Visits a WhileLoopTree node.
com.sun.source.tree.TreeVisitor#visitWildcard(WildcardTree, P)->R:::Visits a WildcardTypeTree node.
com.sun.source.tree.TreeVisitor#visitModule(ModuleTree, P)->R:::Visits a ModuleTree node.
com.sun.source.tree.TreeVisitor#visitExports(ExportsTree, P)->R:::Visits an ExportsTree node.
com.sun.source.tree.TreeVisitor#visitOpens(OpensTree, P)->R:::Visits an OpensTree node.
com.sun.source.tree.TreeVisitor#visitProvides(ProvidesTree, P)->R:::Visits a ProvidesTree node.
com.sun.source.tree.TreeVisitor#visitRequires(RequiresTree, P)->R:::Visits a RequiresTree node.
com.sun.source.tree.TreeVisitor#visitUses(UsesTree, P)->R:::Visits a UsesTree node.
com.sun.source.tree.TreeVisitor#visitOther(Tree, P)->R:::Visits an unknown type of Tree node
com.sun.source.tree.TryTree#getBlock()->BlockTree:::Returns the block of the try statement.
com.sun.source.tree.TryTree#getCatches()->List:::Returns any catch blocks provided in the try statement
com.sun.source.tree.TryTree#getFinallyBlock()->BlockTree:::Returns the finally block provided in the try statement, or null if there is none.
com.sun.source.tree.TryTree#getResources()->List:::Returns any resource declarations provided in the try statement
com.sun.source.tree.TypeCastTree#getType()->Tree:::Returns the target type of the cast.
com.sun.source.tree.TypeCastTree#getExpression()->ExpressionTree:::Returns the expression being cast.
com.sun.source.tree.TypeParameterTree#getName()->Name:::Returns the name of the type parameter.
com.sun.source.tree.TypeParameterTree#getBounds()->List:::Returns the bounds of the type parameter.
com.sun.source.tree.TypeParameterTree#getAnnotations()->List:::Returns annotations on the type parameter declaration
com.sun.source.tree.UnaryTree#getExpression()->ExpressionTree:::Returns the expression that is the operand of the unary operator.
com.sun.source.tree.UnionTypeTree#getTypeAlternatives()->List:::Returns the alternative type expressions.
com.sun.source.tree.UsesTree#getServiceName()->ExpressionTree:::Returns the name of the service type.
com.sun.source.tree.VariableTree#getModifiers()->ModifiersTree:::Returns the modifiers, including any annotations, on the declaration.
com.sun.source.tree.VariableTree#getName()->Name:::Returns the name of the variable being declared.
com.sun.source.tree.VariableTree#getNameExpression()->ExpressionTree:::Returns the qualified identifier for the name being "declared"
com.sun.source.tree.VariableTree#getType()->Tree:::Returns the type of the variable being declared.
com.sun.source.tree.VariableTree#getInitializer()->ExpressionTree:::Returns the initializer for the variable, or null if none.
com.sun.source.tree.WhileLoopTree#getCondition()->ExpressionTree:::Returns the condition of the loop.
com.sun.source.tree.WhileLoopTree#getStatement()->StatementTree:::Returns the body of the loop.
com.sun.source.tree.WildcardTree#getBound()->Tree:::Returns the bound of the wildcard.

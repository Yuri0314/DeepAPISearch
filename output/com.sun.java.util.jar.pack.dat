AdaptiveCoding#setHeadCoding(CodingMethod)::: adaptive coding set head coding:::
AdaptiveCoding#setHeadLength(int)::: adaptive coding set head length:::
AdaptiveCoding#setTailCoding(CodingMethod)::: adaptive coding set tail coding:::
AdaptiveCoding#isTrivial()::: adaptive coding is trivial:::return
AdaptiveCoding#writeArrayTo(OutputStream, int[], int, int)::: adaptive coding write array to:::writeArray
AdaptiveCoding#writeArray(AdaptiveCoding, OutputStream, int[], int, int)::: adaptive coding write array:::for->writeArrayTo
AdaptiveCoding#readArrayFrom(InputStream, int[], int, int)::: adaptive coding read array from:::readArray
AdaptiveCoding#readArray(AdaptiveCoding, InputStream, int[], int, int)::: adaptive coding read array:::for->readArrayFrom
AdaptiveCoding#getKXOf(int)::: adaptive coding get of:::for->KX->return
AdaptiveCoding#getKBOf(int)::: adaptive coding get of:::KX->getKXOf->if->return->return
AdaptiveCoding#decodeK(int, int)::: adaptive coding decode k:::return
AdaptiveCoding#getNextK(int)::: adaptive coding get next k:::if->return->KX->getKXOf->if->return->unit->mask->K1->if->return->if->return->mask2->return
AdaptiveCoding#isCodableLength(int)::: adaptive coding is codable length:::KX->getKXOf->if->return->unit->mask->return
AdaptiveCoding#getMetaCoding(Coding)::: adaptive coding get meta coding:::bytes->new->ByteArrayOutputStream->try->makeMetaCoding->catch->throw->new->RuntimeException->finally->return->bytes->toByteArray
AdaptiveCoding#makeMetaCoding(AdaptiveCoding, Coding, ByteArrayOutputStream)::: adaptive coding make meta coding:::for
AdaptiveCoding#parseMetaCoding(byte[], int, Coding, CodingMethod[])::: adaptive coding parse meta coding:::op->if->return->prevc->for->keepGoing->return
AdaptiveCoding#keyString(CodingMethod)::: adaptive coding key string:::if->return->keyString->return->m->toString
AdaptiveCoding#toString()::: adaptive coding to string:::res->new->StringBuilder->run->res->append->for->res->append->keyString->append->res->append->return->res->toString
Attribute#name()::: attribute name:::return->def->name
Attribute#layout()::: attribute layout:::return
Attribute#bytes()::: attribute bytes:::return
Attribute#size()::: attribute size:::return
Attribute#getNameRef()::: attribute get name ref:::return->def->getNameRef
Attribute#addContent(byte[], Object)::: attribute add content:::if->return->res->new->Attribute->Fixups->setBytes->return
Attribute#addContent(byte[])::: attribute add content:::return->addContent
Attribute#finishRefs(Index)::: attribute finish refs:::if->Fixups->finishRefs
Attribute#isCanonical()::: attribute is canonical:::return
Attribute#compareTo(Attribute)::: attribute compare to:::return->compareTo
Attribute#getCanonList(List)::: attribute get canon list:::synchronized->cl->canonLists->get->if->al->size->new->ArrayList<>->cl->addAll->Collections->unmodifiableList->canonLists->put->return
Attribute#find(int, String, String)::: attribute find:::key->Layout->makeKey->synchronized->a->attributes->get->if->new->Layout->canonicalInstance->attributes->put->return
Attribute#keyForLookup(int, String)::: attribute key for lookup:::return->Layout->makeKey
Attribute#lookup(Map, int, String)::: attribute lookup:::if->return->defs->Layout->makeKey->get
Attribute#define(Map, int, String, String)::: attribute define:::a->find->defs->Layout->makeKey->put->return
Attribute#contextName(int)::: attribute context name:::switch->return->return->return->return->return
Attribute.Holder#getCPMap()::: holder get map:::
Attribute.Holder#attributeSize()::: holder attribute size:::return->attributes->size
Attribute.Holder#trimToSize()::: holder trim to size:::if->return->if->attributes->isEmpty->return->if->al->al->trimToSize->allCanon->foreach->if->a->isCanonical->if->Fixups->trimToSize->if->getCanonList
Attribute.Holder#addAttribute(Attribute)::: holder add attribute:::if->new->ArrayList<>->else->if->new->ArrayList<>->attributes->add
Attribute.Holder#removeAttribute(Attribute)::: holder remove attribute:::if->return->if->attributes->contains->return->if->new->ArrayList<>->attributes->remove->return
Attribute.Holder#getAttribute(int)::: holder get attribute:::return->attributes->get
Attribute.Holder#visitRefs(int, Collection)::: holder visit refs:::if->return->foreach->a->visitRefs
Attribute.Holder#getAttributes()::: holder get attributes:::if->return->return
Attribute.Holder#setAttributes(List)::: holder set attributes:::if->attrList->isEmpty->else
Attribute.Holder#getAttribute(String)::: holder get attribute:::if->return->foreach->if->a->name->equals->return->return
Attribute.Holder#getAttribute(Layout)::: holder get attribute:::if->return->foreach->if->a->layout->return->return
Attribute.Holder#removeAttribute(String)::: holder remove attribute:::return->getAttribute->removeAttribute
Attribute.Holder#removeAttribute(Layout)::: holder remove attribute:::return->getAttribute->removeAttribute
Attribute.Holder#strip(String)::: holder strip:::getAttribute->removeAttribute
Attribute.ValueStream#getInt(int)::: value stream get int:::throw->undef
Attribute.ValueStream#putInt(int, int)::: value stream put int:::throw->undef
Attribute.ValueStream#getRef(int)::: value stream get ref:::throw->undef
Attribute.ValueStream#putRef(int, Entry)::: value stream put ref:::throw->undef
Attribute.ValueStream#decodeBCI(int)::: value stream decode i:::throw->undef
Attribute.ValueStream#encodeBCI(int)::: value stream encode i:::throw->undef
Attribute.ValueStream#noteBackCall(int)::: value stream note back call:::
Attribute.ValueStream#undef()::: value stream undef:::return->new->UnsupportedOperationException
Attribute.Layout#ctype()::: layout ctype:::return
Attribute.Layout#name()::: layout name:::return
Attribute.Layout#layout()::: layout layout:::return
Attribute.Layout#canonicalInstance()::: layout canonical instance:::return
Attribute.Layout#getNameRef()::: layout get name ref:::return->ConstantPool->name->getUtf8Entry
Attribute.Layout#isEmpty()::: layout is empty:::return->layout->isEmpty
Attribute.Layout#makeKey(int, String, String)::: layout make key:::def->new->Layout->name->intern->layout->intern->return
Attribute.Layout#makeKey(int, String)::: layout make key:::return->makeKey
Attribute.Layout#addContent(byte[], Object)::: layout add content:::return->canon->addContent
Attribute.Layout#addContent(byte[])::: layout add content:::return->canon->addContent
Attribute.Layout#equals(Object)::: layout equals:::return->x->getClass->equals
Attribute.Layout#equals(Layout)::: layout equals:::return->equals->equals
Attribute.Layout#hashCode()::: layout hash code:::return->name->hashCode->layout->hashCode
Attribute.Layout#compareTo(Layout)::: layout compare to:::r->compareTo->if->return->compareTo->if->return->return
Attribute.Layout#toString()::: layout to string:::str->contextName->return
Attribute.Layout#stringForDebug()::: layout string for debug:::return->contextName->Arrays->asList
Attribute.Layout.Element#flagTest(byte)::: element flag test:::return
Attribute.Layout.Element#removeBand()::: element remove band:::
Attribute.Layout.Element#hasBand()::: element has band:::return
Attribute.Layout.Element#toString()::: element to string:::str->return
Attribute.Layout.Element#stringForDebug()::: element string for debug:::lbody->switch->break->if->flagTest->break->return->hasBand->Arrays->asList
Attribute.Layout#hasCallables()::: layout has callables:::return
Attribute.Layout#getCallables()::: layout get callables:::if->hasCallables->nelems->Arrays->copyOf->return->else->return
Attribute.Layout#getEntryPoint()::: layout get entry point:::if->hasCallables->return->else->nelems->Arrays->copyOf->return
Attribute.Layout#parse(Holder, byte[], int, int, ValueStream):::Return a sequence of tokens from the given attribute bytes:::end->getEntryPoint->parseUsing->if->throw->new->InternalError
Attribute.Layout#unparse(ValueStream, ByteArrayOutputStream):::Given a sequence of tokens, return the attribute bytes:::fixups->getEntryPoint->unparseUsing->return
Attribute.Layout#layoutForClassVersion(Package.Version)::: layout layout for class version:::if->vers->lessThan->return->expandCaseDashNotation->return
Attribute#visitRefs(Holder, int, Collection)::: attribute visit refs:::if->refs->getNameRef->add->if->return->if->return->if->Fixups->visitRefs->return->def->new->ValueStream->parse
Attribute#parse(Holder, byte[], int, int, ValueStream)::: attribute parse:::def->parse
Attribute#unparse(ValueStream, ByteArrayOutputStream)::: attribute unparse:::return->def->unparse
Attribute#toString()::: attribute to string:::return->size->fixups->toString
Attribute#normalizeLayoutString(String):::Remove any informal "pretty printing" from the layout string:::buf->new->StringBuilder->for->i->len->layout->length->result->buf->toString->if->result->equals->info->info->info->return
Attribute#tokenizeLayout(Layout, int, String):::Parse the attribute layout language:::col->layout->length->new->ArrayList<>->tokenizeLayout->res->col->size->new->Layout.ElementArr->col->toArray->return
Attribute#tokenizeLayout(Layout, int, String, List)::: attribute tokenize layout:::prevBCI->for->len->layout->length->i
Attribute#splitBodies(String)::: attribute split bodies:::bodies->new->ArrayList<>->for->i->layout->length->res->bodies->size->new->StringArr->bodies->toArray->return
Attribute#skipBody(String, int)::: attribute skip body:::if->layout->charAt->return->for->depth->return
Attribute#tokenizeUInt(Layout.Element, String, int)::: attribute tokenize int:::switch->layout->charAt->break->break->break->break->return->return
Attribute#tokenizeSInt(Layout.Element, String, int)::: attribute tokenize int:::if->layout->charAt->return->tokenizeUInt
Attribute#isDigit(char)::: attribute is digit:::return
Attribute#findCaseDash(String, int):::Find an occurrence of hyphen '-' between two numerals.:::if->lastDash->layout->length->for
Attribute#parseIntBefore(String, int)::: attribute parse int before:::end->beg->while->layout->charAt->isDigit->if->return->Integer->parseInt->if->layout->charAt->return->Integer->layout->substring->parseInt
Attribute#parseIntAfter(String, int)::: attribute parse int after:::beg->end->limit->layout->length->if->layout->charAt->while->layout->charAt->isDigit->if->return->Integer->parseInt->return->Integer->layout->substring->parseInt
Attribute#expandCaseDashNotation(String):::For compatibility with 1.5 pack, expand 1-5 into 1,2,3,4,5.:::dash->findCaseDash->if->return->result->layout->length->new->StringBuilder->sofar->for->result->layout->length->append->return->result->toString
Attribute#parseUsing(Layout.Element[], Holder, byte[], int, int, ValueStream)::: attribute parse using:::prevBCI->prevRBCI->end->buf->for->i->return
Attribute#matchCase(Layout.Element, int)::: attribute match case:::lastj->for->j->return
Attribute#parseInt(Layout.Element, byte[], int, int[])::: attribute parse int:::value->loBits->for->bitPos->if->e->flagTest->hiBits->return
Attribute#unparseUsing(Layout.Element[], Object[], ValueStream, ByteArrayOutputStream)::: attribute unparse using:::prevBCI->prevRBCI->for->i
Attribute#unparseInt(Layout.Element, int, ByteArrayOutputStream)::: attribute unparse int:::loBits->if->return->if->hiBits->codedValue->if->e->flagTest->else->if->throw->new->InternalError->for->bitPos
BandStructure#getCPIndex(byte)::: band structure get index:::
BandStructure#initHighestClassVersion(Package.Version):::Call this exactly once, early, to specify the archive major version.:::if->throw->new->IOException->adjustToClassVersion
BandStructure#getHighestClassVersion()::: band structure get highest class version:::return
BandStructure#codingForIndex(int)::: band structure coding for index:::return
BandStructure#indexOf(Coding)::: band structure index of:::i->basicCodingIndexes->get->if->return->return->i->intValue
BandStructure#getBasicCodings()::: band structure get basic codings:::return->basicCodings->clone
BandStructure#getBandHeader(int, Coding)::: band structure get band header:::res->parseMetaCoding->return
BandStructure#parseMetaCoding(byte[], int, Coding, CodingMethod[])::: band structure parse meta coding:::if->return->pos2->Coding->parseMetaCoding->if->return->PopulationCoding->parseMetaCoding->if->return->AdaptiveCoding->parseMetaCoding->if->return->throw->new->RuntimeException
BandStructure#phaseIsRead(int)::: band structure phase is read:::return
BandStructure#phaseCmp(int, int)::: band structure phase cmp:::return
BandStructure.Band#init()::: band init:::if->readyToExpect->else->readyToCollect->return
BandStructure.Band#isReader()::: band is reader:::return
BandStructure.Band#phase()::: band phase:::return
BandStructure.Band#name()::: band name:::return
BandStructure.Band#capacity():::Return -1 if data buffer not allocated, else max length.:::
BandStructure.Band#setCapacity(int):::Allocate data buffer to specified length.:::
BandStructure.Band#length():::Return current number of values in buffer, which must exist.:::
BandStructure.Band#valuesRemainingForDebug()::: band values remaining for debug:::
BandStructure.Band#valuesExpected()::: band values expected:::return
BandStructure.Band#writeTo(OutputStream):::Write out bytes, encoding the values.:::setPhase->writeDataTo->doneWriting
BandStructure.Band#chooseBandCodings()::: band choose band codings:::
BandStructure.Band#outputSize()::: band output size:::if->size->return->return->computeOutputSize
BandStructure.Band#computeOutputSize()::: band compute output size:::
BandStructure.Band#writeDataTo(OutputStream)::: band write data to:::
BandStructure.Band#expectLength(int):::Expect a certain number of values.:::
BandStructure.Band#expectMoreLength(int):::Expect more values:::
BandStructure.Band#readyToCollect()::: band ready to collect:::setCapacity->setPhase
BandStructure.Band#doneWriting()::: band done writing:::setPhase
BandStructure.Band#readyToExpect()::: band ready to expect:::setPhase
BandStructure.Band#readFrom(InputStream):::Read in bytes, decoding the values.:::valuesExpected->setCapacity->setPhase->readDataFrom->readyToDisburse
BandStructure.Band#readDataFrom(InputStream)::: band read data from:::
BandStructure.Band#readyToDisburse()::: band ready to disburse:::if->fine->setPhase
BandStructure.Band#doneDisbursing()::: band done disbursing:::setPhase
BandStructure.Band#doneWithUnusedBand()::: band done with unused band:::if->setPhase->setPhase->setPhase->else->setPhase
BandStructure.Band#setPhase(int)::: band set phase:::
BandStructure.Band#toString()::: band to string:::length->length->str->if->if->return
BandStructure.ValueBand#capacity()::: value band capacity:::return
BandStructure.ValueBand#setCapacity(int):::Declare predicted or needed capacity.:::if->return->realloc
BandStructure.ValueBand#length()::: value band length:::return
BandStructure.ValueBand#valuesRemainingForDebug()::: value band values remaining for debug:::return
BandStructure.ValueBand#valueAtForDebug(int)::: value band value at for debug:::return
BandStructure.ValueBand#patchValue(int, int)::: value band patch value:::
BandStructure.ValueBand#initializeValues(int[])::: value band initialize values:::
BandStructure.ValueBand#addValue(int):::Collect one value, or store one decoded value.:::if->setCapacity
BandStructure.ValueBand#canVaryCoding()::: value band can vary coding:::if->return->if->return->if->return->if->return->if->return->return->regularCoding->min->regularCoding->max
BandStructure.ValueBand#shouldVaryCoding()::: value band should vary coding:::if->return->return
BandStructure.ValueBand#chooseBandCodings()::: value band choose band codings:::canVary->canVaryCoding->if->shouldVaryCoding->if->regularCoding->canRepresent->else->if->name->fine->else->sizes->name->chooseCoding->if->if->bandCoding->getMetaCoding->if->fine->else->if->decodeEscapeValue->else->if->sb->new->StringBuilder->for->i->fine->if->if->computeEscapeSize->for->i
BandStructure.ValueBand#computeOutputSize()::: value band compute output size:::getCodingChooser->computeByteSize->computeEscapeSize->return
BandStructure.ValueBand#computeEscapeSize()::: value band compute escape size:::if->return->XB->X->encodeEscapeValue->return->regularCoding->setD->getLength
BandStructure.ValueBand#writeDataTo(OutputStream)::: value band write data to:::if->return->len0->if->outputCounter->getCount->if->XB->X->encodeEscapeValue->regularCoding->setD->writeTo->bandCoding->writeArrayTo->if->if->dumpBand
BandStructure.ValueBand#readDataFrom(InputStream)::: value band read data from:::valuesExpected->if->return->if->fine->if->canVaryCoding->else->in->mark->X->regularCoding->setD->readFrom->XB->decodeEscapeValue->if->in->reset->else->if->else->if->fine->getBandHeader->p0->p1->new->byteArr->System->arraycopy->if->if->name->fine->bandCoding->readArrayFrom->if->dumpBand
BandStructure.ValueBand#doneDisbursing()::: value band done disbursing:::super->doneDisbursing
BandStructure.ValueBand#dumpBand()::: value band dump band:::try->ps->getDumpStream->new->PrintStream->irr->ps->outputSize->print->if->sb->new->StringBuilder->for->i->ps->print->printArrayTo->catch->finally->try->ds->getDumpStream->bandCoding->writeArrayTo->catch->finally
BandStructure.ValueBand#getValue():::Disburse one value.:::if->return->return
BandStructure.ValueBand#resetForSecondPass():::Reset for another pass over the same value set.:::
BandStructure.ByteBand#capacity()::: byte band capacity:::return
BandStructure.ByteBand#setCapacity(int)::: byte band set capacity:::new->ByteArrayOutputStream
BandStructure.ByteBand#destroy()::: byte band destroy:::length
BandStructure.ByteBand#length()::: byte band length:::return->bytes->size
BandStructure.ByteBand#reset()::: byte band reset:::bytes->reset
BandStructure.ByteBand#valuesRemainingForDebug()::: byte band values remaining for debug:::return->available
BandStructure.ByteBand#chooseBandCodings()::: byte band choose band codings:::
BandStructure.ByteBand#computeOutputSize()::: byte band compute output size:::return->bytes->size
BandStructure.ByteBand#writeDataTo(OutputStream)::: byte band write data to:::if->length->return->bytes->writeTo->if->dumpBand->destroy
BandStructure.ByteBand#dumpBand()::: byte band dump band:::try->ds->getDumpStream->if->bytesForDump->writeTo->else->bytes->writeTo->catch->finally
BandStructure.ByteBand#readDataFrom(InputStream)::: byte band read data from:::vex->valuesExpected->if->return->if->fine->buf->Math->min->new->byteArr->while->nr->in->Math->min->read->if->throw->new->EOFException->bytes->write->if->dumpBand
BandStructure.ByteBand#readyToDisburse()::: byte band ready to disburse:::bytes->toByteArray->new->ByteArrayInputStream->super->readyToDisburse
BandStructure.ByteBand#doneDisbursing()::: byte band done disbursing:::super->doneDisbursing->if->bytesForDump->size->try->dumpBand->catch->throw->new->RuntimeException->finally
BandStructure.ByteBand#setInputStreamFrom(InputStream)::: byte band set input stream from:::setPhase->if->new->ByteArrayOutputStream->new->FilterInputStream->super->readyToDisburse
BandStructure.ByteBand#collectorStream()::: byte band collector stream:::return
BandStructure.ByteBand#getInputStream()::: byte band get input stream:::return
BandStructure.ByteBand#getByte()::: byte band get byte:::b->getInputStream->read->if->throw->new->EOFException->return
BandStructure.ByteBand#putByte(int)::: byte band put byte:::collectorStream->write
BandStructure.ByteBand#toString()::: byte band to string:::return->super->toString
BandStructure.IntBand#putInt(int)::: int band put int:::addValue
BandStructure.IntBand#getInt()::: int band get int:::return->getValue
BandStructure.IntBand#getIntTotal():::Return the sum of all values in this band.:::total->for->k->length->resetForSecondPass->return
BandStructure.IntBand#getIntCount(int):::Return the occurrence count of a specific value in this band.:::total->for->k->length->resetForSecondPass->return
BandStructure#getIntTotal(int[])::: band structure get int total:::total->for->i->return
BandStructure.CPRefBand#setIndex(Index)::: ref band set index:::
BandStructure.CPRefBand#readDataFrom(InputStream)::: ref band read data from:::super->readDataFrom
BandStructure.CPRefBand#putRef(Entry):::Write a constant pool reference.:::encodeRefOrNull->addValue
BandStructure.CPRefBand#putRef(Entry, Index)::: ref band put ref:::encodeRefOrNull->addValue
BandStructure.CPRefBand#putRef(Entry, byte)::: ref band put ref:::getCPIndex->putRef
BandStructure.CPRefBand#getRef()::: ref band get ref:::if->warning->return->getValue->decodeRefOrNull
BandStructure.CPRefBand#getRef(Index)::: ref band get ref:::return->getValue->decodeRefOrNull
BandStructure.CPRefBand#getRef(byte)::: ref band get ref:::return->getCPIndex->getRef
BandStructure.CPRefBand#encodeRefOrNull(Entry, Index)::: ref band encode ref or null:::nonNullCode->if->else->encodeRef->return
BandStructure.CPRefBand#decodeRefOrNull(int, Index)::: ref band decode ref or null:::nonNullCode->if->return->else->return->decodeRef
BandStructure#encodeRef(Entry, Index)::: band structure encode ref:::if->throw->e->stringValue->new->RuntimeException->coding->ix->indexOf->if->fine->return
BandStructure#decodeRef(int, Index)::: band structure decode ref:::if->ix->size->warning->e->ix->getEntry->if->fine->return
BandStructure#getCodingChooser()::: band structure get coding chooser:::if->new->CodingChooser->if->classes->if->classes->isEmpty->cls->classes->get->codingChooser->cls->getName->hashCode->addStressSeed->return
BandStructure#chooseCoding(int[], int, int, Coding, String, int[])::: band structure choose coding:::if->return->cc->getCodingChooser->if->fine->return->cc->choose
BandStructure#decodeEscapeValue(int, Coding)::: band structure decode escape value:::if->regularCoding->B->regularCoding->L->return->if->regularCoding->S->if->regularCoding->min->XB->return->else->L->regularCoding->L->if->regularCoding->max->XB->return->return
BandStructure#encodeEscapeValue(int, Coding)::: band structure encode escape value:::X->if->regularCoding->S->else->L->regularCoding->L->return
BandStructure.MultiBand#init()::: multi band init:::super->init->setCapacity->if->phase->setPhase->setPhase->return
BandStructure.MultiBand#size()::: multi band size:::return
BandStructure.MultiBand#get(int)::: multi band get:::return
BandStructure.MultiBand#toArray()::: multi band to array:::return->realloc
BandStructure.MultiBand#add(Band)::: multi band add:::if->realloc
BandStructure.MultiBand#newByteBand(String)::: multi band new byte band:::b->new->ByteBand->b->init->add->return
BandStructure.MultiBand#newIntBand(String)::: multi band new int band:::b->new->IntBand->b->init->add->return
BandStructure.MultiBand#newIntBand(String, Coding)::: multi band new int band:::b->new->IntBand->b->init->add->return
BandStructure.MultiBand#newMultiBand(String, Coding)::: multi band new multi band:::b->new->MultiBand->b->init->add->return
BandStructure.MultiBand#newCPRefBand(String, byte)::: multi band new ref band:::b->new->CPRefBand->b->init->add->return
BandStructure.MultiBand#newCPRefBand(String, Coding, byte)::: multi band new ref band:::b->new->CPRefBand->b->init->add->return
BandStructure.MultiBand#newCPRefBand(String, Coding, byte, boolean)::: multi band new ref band:::b->new->CPRefBand->b->init->add->return
BandStructure.MultiBand#bandCount()::: multi band band count:::return
BandStructure.MultiBand#capacity()::: multi band capacity:::return
BandStructure.MultiBand#setCapacity(int)::: multi band set capacity:::
BandStructure.MultiBand#length()::: multi band length:::return
BandStructure.MultiBand#valuesRemainingForDebug()::: multi band values remaining for debug:::return
BandStructure.MultiBand#chooseBandCodings()::: multi band choose band codings:::for->i
BandStructure.MultiBand#computeOutputSize()::: multi band compute output size:::sum->for->i->return
BandStructure.MultiBand#writeDataTo(OutputStream)::: multi band write data to:::preCount->if->outputCounter->getCount->for->i
BandStructure.MultiBand#readDataFrom(InputStream)::: multi band read data from:::for->i
BandStructure.MultiBand#toString()::: multi band to string:::return->bandCount->super->toString
BandStructure.ByteCounter#getCount()::: byte counter get count:::return
BandStructure.ByteCounter#setCount(long)::: byte counter set count:::
BandStructure.ByteCounter#write(int)::: byte counter write:::if->out->write
BandStructure.ByteCounter#write(byte[], int, int)::: byte counter write:::if->out->write
BandStructure.ByteCounter#toString()::: byte counter to string:::return->String->getCount->valueOf
BandStructure#writeAllBandsTo(OutputStream)::: band structure write all bands to:::new->ByteCounter->all_bands->writeTo->if->nbytes->outputCounter->getCount->info
BandStructure#getAttrBand(MultiBand, int)::: band structure get attr band:::b->xxx_attr_bands->get->switch->break->break->break->break->break->break->return
BandStructure#setBandIndexes():::Given CP indexes, distribute tag-specific indexes to bands.:::foreach->b->which->b->which->byteValue->getCPIndex->setIndex->if->printCDecl
BandStructure#setBandIndex(CPRefBand, byte)::: band structure set band index:::need->Byte->valueOf->if->allKQBands->add->else->if->needPredefIndex->add->else->b->getCPIndex->setIndex
BandStructure#setConstantValueIndex(Field)::: band structure set constant value index:::ix->if->tag->f->getLiteralTag->getCPIndex->if->ConstantPool->tagName->fine->foreach->xxx_KQ->setIndex
BandStructure#adjustToClassVersion()::: band structure adjust to class version:::if->getHighestClassVersion->lessThan->if->fine->undefineAttribute
BandStructure#initAttrIndexLimit()::: band structure init attr index limit:::for->i
BandStructure#haveFlagsHi(int)::: band structure have flags hi:::mask->switch->break->break->break->break->return->testBit
BandStructure#getPredefinedAttrs(int)::: band structure get predefined attrs:::res->new->ArrayList<>->for->ai->return
BandStructure#isPredefinedAttr(int, int)::: band structure is predefined attr:::if->return->if->testBit->return->return->attrDefs->get->get
BandStructure#adjustSpecialAttrMasks()::: band structure adjust special attr masks:::for->i
BandStructure#makeClassFileVersionAttr(Package.Version)::: band structure make class file version attr:::return->attrClassFileVersion->ver->asBytes->addContent
BandStructure#parseClassFileVersionAttr(Attribute)::: band structure parse class file version attr:::return->attr->bytes->of
BandStructure#assertBandOKForElems(Band[], Attribute.Layout.Element[])::: band structure assert band for elems:::for->i->return
BandStructure#assertBandOKForElem(Band[], Attribute.Layout.Element)::: band structure assert band for elem:::b->if->rc->wantIntBand->switch->if->e->flagTest->else->if->break->if->e->flagTest->else->break->break->if->break->if->assertBandOKForElems->break->if->e->flagTest->else->if->assertBandOKForElems->break->assertBandOKForElems->return->return->assertBandOKForElems->return->break->if->return
BandStructure#predefineAttribute(int, int, Band[], String, String)::: band structure predefine attribute:::def->Attribute->find->layout->if->setAttributeLayoutIndex->if->new->BandArr->attrBandTable->put->return
BandStructure#predefineAttribute(int, String, MultiBand, Attribute)::: band structure predefine attribute:::def->attr->layout->ctype->def->ctype->return->makeNewAttributeBands->def->name->def->layout->predefineAttribute
BandStructure#undefineAttribute(int, int)::: band structure undefine attribute:::if->println->defList->attrDefs->get->def->defList->get->defList->set->attrIndexTable->put->ab->attrBandTable->get->for->j
BandStructure#makeNewAttributeBands()::: band structure make new attribute bands:::adjustSpecialAttrMasks->for->ctype
BandStructure#makeNewAttributeBands(String, Attribute.Layout, MultiBand)::: band structure make new attribute bands:::base->addHere->size->makeNewAttributeBands->nb->addHere->size->newAB->new->BandArr->for->i->return
BandStructure#makeNewAttributeBands(String, Attribute.Layout.Element[], MultiBand)::: band structure make new attribute bands:::for->i
BandStructure#newElemBand(Attribute.Layout.Element, String, MultiBand)::: band structure new elem band:::if->e->flagTest->return->ab->newIntBand->else->if->return->ab->newIntBand->else->return->ab->newIntBand
BandStructure#setAttributeLayoutIndex(Attribute.Layout, int)::: band structure set attribute layout index:::ctype->defList->attrDefs->get->if->defList->size->defList->add->if->info->attrIndexTable->put->return->if->testBit->throw->new->RuntimeException->if->defList->get->defList->get->fine->attrIndexTable->defList->get->put->defList->set->attrIndexTable->put->return
BandStructure#shortCodeHeader(Code)::: band structure short code header:::s->l0->h->if->return->siglen->code->getMethod->getArgumentSize->if->return->l1->lims->liml->if->return->sc->shortCodeHeader_h_base->if->return->return
BandStructure#shortCodeHeader_handler_count(int)::: band structure short code header_handler_count:::for->h
BandStructure#shortCodeHeader_max_stack(int)::: band structure short code header_max_stack:::h->shortCodeHeader_handler_count->lims->return->shortCodeHeader_h_base
BandStructure#shortCodeHeader_max_na_locals(int)::: band structure short code header_max_na_locals:::h->shortCodeHeader_handler_count->lims->return->shortCodeHeader_h_base
BandStructure#shortCodeHeader_h_base(int)::: band structure short code header_h_base:::sc->for->h0->return
BandStructure#putLabel(IntBand, Code, int, int)::: band structure put label:::bc_label->c->encodeBCI->c->encodeBCI->putInt
BandStructure#getLabel(IntBand, Code, int)::: band structure get label:::return->c->bc_label->getInt->c->encodeBCI->decodeBCI
BandStructure#getCPRefOpBand(int)::: band structure get ref op band:::switch->Instruction->getCPRefOpTag->return->return->return->return->return->switch->return->return->return->return->return->return->return->break->return
BandStructure#selfOpRefBand(int)::: band structure self op ref band:::idx->isSuper->if->isAload->if->origBC->isField->Instruction->isFieldOp->if->return->else->return
BandStructure#getDumpStream(Band, String)::: band structure get dump stream:::return->getDumpStream
BandStructure#getDumpStream(Index, String)::: band structure get dump stream:::if->ix->size->return->new->ByteArrayOutputStream->seq->return->getDumpStream
BandStructure#getDumpStream(String, int, String, Object)::: band structure get dump stream:::if->File->new->File->createTempFile->dumpDir->delete->if->dumpDir->mkdir->info->name->replace->replace->name->replace->name->replace->name->trim->replace->substring->dumpFile->new->File->info->return->new->FileOutputStream->new->BufferedOutputStream
BandStructure#assertCanChangeLength(Band)::: band structure assert can change length:::switch->return->return
BandStructure#assertPhase(Band, int)::: band structure assert phase:::if->b->phase->b->phase->warning->return->return
BandStructure#verbose()::: band structure verbose:::return->Utils->currentPropMap->getInteger
BandStructure#assertPhaseChangeOK(Band, int, int)::: band structure assert phase change k:::switch->return->return->return->return->return->return->return->return->if->warning->else->warning->return
BandStructure#assertDoneDisbursing(Band)::: band structure assert done disbursing:::if->warning->if->verbose->return->left->b->valuesRemainingForDebug->if->warning->if->verbose->return->if->mb->for->i->return
BandStructure#printCDecl(Band)::: band structure print decl:::if->mb->for->i->return->ixS->if->ix->if->knownc->knowns->rc->rci->Arrays->asList->indexOf->cstr->if->else->rc->keyString->b->name->println
BandStructure#notePrevForAssert(Band, Band)::: band structure note prev for assert:::if->new->HashMap<>->prevForAssertMap->put->return
BandStructure#assertReadyToReadFrom(Band, InputStream)::: band structure assert ready to read from:::p->prevForAssertMap->get->if->p->phase->phaseCmp->warning->info->info->name->if->name->startsWith->inName->bandSequenceList->removeFirst->if->inName->equals->warning->return->info->return
BandStructure#assertValidCPRefs(CPRefBand)::: band structure assert valid refs:::if->return->limit->size->for->i->b->length->return
BandStructure#assertReadyToWriteTo(Band, OutputStream)::: band structure assert ready to write to:::p->prevForAssertMap->get->if->p->phase->phaseCmp->warning->info->info->name->if->name->startsWith->if->new->LinkedList<>->bandSequenceList->add->return
BandStructure#testBit(int, int)::: band structure test bit:::return
BandStructure#setBit(int, int, boolean)::: band structure set bit:::return
BandStructure#testBit(long, long)::: band structure test bit:::return
BandStructure#setBit(long, long, boolean)::: band structure set bit:::return
BandStructure#printArrayTo(PrintStream, int[], int, int)::: band structure print array to:::len->for->i->ps->println
BandStructure#printArrayTo(PrintStream, Entry[], int, int)::: band structure print array to:::printArrayTo
BandStructure#printArrayTo(PrintStream, Entry[], int, int, boolean)::: band structure print array to:::buf->new->StringBuffer->len->for->i
BandStructure#realloc(Object[], int)::: band structure realloc:::elt->a->getClass->getComponentType->na->newInstance->System->Math->min->arraycopy->return
BandStructure#realloc(Object[])::: band structure realloc:::return->Math->max->realloc
BandStructure#realloc(int[], int)::: band structure realloc:::if->return->if->return->new->intArr->na->new->intArr->System->Math->min->arraycopy->return
BandStructure#realloc(int[])::: band structure realloc:::return->Math->max->realloc
BandStructure#realloc(byte[], int)::: band structure realloc:::if->return->if->return->new->byteArr->na->new->byteArr->System->Math->min->arraycopy->return
BandStructure#realloc(byte[])::: band structure realloc:::return->Math->max->realloc
ClassReader#setAttrDefs(Map)::: class reader set attr defs:::
ClassReader#setAttrCommands(Map)::: class reader set attr commands:::
ClassReader#skip(int, String)::: class reader skip:::warning->skipped->while->j->in->skip
ClassReader#readUnsignedShort()::: class reader read unsigned short:::return->in->readUnsignedShort
ClassReader#readInt()::: class reader read int:::return->in->readInt
ClassReader#readRef():::Read a 2-byte int, and return the global CP entry for it.:::i->in->readUnsignedShort->return
ClassReader#readRef(byte)::: class reader read ref:::e->readRef->checkTag->return
ClassReader#checkValid(Entry)::: class reader check valid:::if->throw->new->IllegalStateException->return
ClassReader#checkTag(Entry, byte):::Throw a ClassFormatException if the entry does not match the expected tag type.:::if->e->tagMatches->where->got->ConstantPool->tagName->throw->ConstantPool->tagName->new->ClassFormatException->return
ClassReader#checkTag(Entry, byte, boolean)::: class reader check tag:::return->checkTag
ClassReader#readRefOrNull(byte)::: class reader read ref or null:::e->readRef->checkTag->return
ClassReader#readUtf8Ref()::: class reader read utf8 ref:::return->readRef
ClassReader#readClassRef()::: class reader read class ref:::return->readRef
ClassReader#readClassRefOrNull()::: class reader read class ref or null:::return->readRefOrNull
ClassReader#readSignatureRef()::: class reader read signature ref:::e->readRef->return->e->getTag->ConstantPool->e->stringValue->getSignatureEntry
ClassReader#read()::: class reader read:::ok->try->readMagicNumbers->readConstantPool->readHeader->readMembers->readMembers->readAttributes->fixUnresolvedEntries->cls->finishReading->catch->finally->if->if->warning
ClassReader#readMagicNumbers()::: class reader read magic numbers:::in->readInt->if->throw->Integer->toHexString->new->Attribute.FormatException->minver->readUnsignedShort->majver->readUnsignedShort->of->bad->checkVersion->if->throw->new->Attribute.FormatException
ClassReader#checkVersion(Package.Version)::: class reader check version:::majver->minver->if->return->if->return->return
ClassReader#readConstantPool()::: class reader read constant pool:::length->in->readUnsignedShort->fixups->new->intArr->fptr->cpMap->new->EntryArr->for->i->while->if->fine->flimit->for->fi
ClassReader.UnresolvedEntry#resolve()::: unresolved entry resolve:::cls->res->switch->iboots->get->idescr->ConstantPool->getInvokeDynamicEntry->break->throw->new->AssertionError->return
ClassReader.UnresolvedEntry#unresolved()::: unresolved entry unresolved:::throw->new->RuntimeException
ClassReader.UnresolvedEntry#compareTo(Object)::: unresolved entry compare to:::unresolved->return
ClassReader.UnresolvedEntry#equals(Object)::: unresolved entry equals:::unresolved->return
ClassReader.UnresolvedEntry#computeValueHash()::: unresolved entry compute value hash:::unresolved->return
ClassReader.UnresolvedEntry#stringValue()::: unresolved entry string value:::unresolved->return->toString
ClassReader.UnresolvedEntry#toString()::: unresolved entry to string:::return->ConstantPool->tagName
ClassReader#fixUnresolvedEntries()::: class reader fix unresolved entries:::if->return->cpMap->cls->getCPMap->for->i
ClassReader#readHeader()::: class reader read header:::readUnsignedShort->readClassRef->readClassRefOrNull->ni->readUnsignedShort->new->ClassEntryArr->for->i
ClassReader#readMembers(boolean)::: class reader read members:::nm->readUnsignedShort->for->i
ClassReader#readMember(boolean)::: class reader read member:::mflags->readUnsignedShort->mname->readUtf8Ref->mtype->readSignatureRef->descr->ConstantPool->getDescriptorEntry->m->if->cls->new->Field->else->cls->new->Method->readAttributes
ClassReader#readAttributes(int, Attribute.Holder)::: class reader read attributes:::na->readUnsignedShort->if->return->if->fine->for->i
ClassReader#readCode(Code)::: class reader read code:::readUnsignedShort->readUnsignedShort->readInt->new->byteArr->in->readFully->cpMap->cls->getCPMap->Instruction->opcodeChecker->nh->readUnsignedShort->code->setHandlerCount->for->i->readAttributes
ClassReader#readBootstrapMethods(Class)::: class reader read bootstrap methods:::bsms->readUnsignedShort->new->BootstrapMethodEntryArr->for->i->cls->Arrays->asList->setBootstrapMethods
ClassReader#readInnerClasses(Class)::: class reader read inner classes:::nc->readUnsignedShort->ics->new->ArrayList<>->for->i
ClassWriter#writeShort(int)::: class writer write short:::out->writeShort
ClassWriter#writeInt(int)::: class writer write int:::out->writeInt
ClassWriter#writeRef(Entry):::Write a 2-byte int representing a CP entry, using the local cpIndex.:::writeRef
ClassWriter#writeRef(Entry, Index):::Write a 2-byte int representing a CP entry, using the given cpIndex.:::i->cpIndex->indexOf->writeShort
ClassWriter#write()::: class writer write:::ok->try->if->fine->writeMagicNumbers->writeConstantPool->writeHeader->writeMembers->writeMembers->writeAttributes->out->flush->catch->finally->if->warning
ClassWriter#writeMagicNumbers()::: class writer write magic numbers:::writeInt->writeShort->writeShort
ClassWriter#writeConstantPool()::: class writer write constant pool:::cpMap->writeShort->for->i
ClassWriter#writeHeader()::: class writer write header:::writeShort->writeRef->writeRef->writeShort->for->i
ClassWriter#writeMembers(boolean)::: class writer write members:::mems->if->cls->getFields->else->cls->getMethods->mems->size->writeShort->foreach->writeMember
ClassWriter#writeMember(Class.Member, boolean)::: class writer write member:::if->fine->writeShort->m->getDescriptor->writeRef->m->getDescriptor->writeRef->writeAttributes
ClassWriter#reorderBSMandICS(Attribute.Holder)::: class writer reorder mand s:::bsmAttr->h->getAttribute->if->return->icsAttr->h->getAttribute->if->return->bsmidx->indexOf->icsidx->indexOf->if->remove->add->return
ClassWriter#writeAttributes(int, Attribute.Holder)::: class writer write attributes:::if->writeShort->return->if->reorderBSMandICS->size->writeShort->foreach->a->finishRefs->a->getNameRef->writeRef->if->a->layout->a->layout->a->layout->savedOut->buf->reset->if->a->name->equals->m->writeCode->else->if->a->name->equals->writeBootstrapMethods->else->if->a->name->equals->writeInnerClasses->else->throw->new->AssertionError->if->a->name->buf->size->fine->buf->size->writeInt->buf->writeTo->else->if->a->name->a->size->fine->a->size->writeInt->out->a->bytes->write
ClassWriter#writeCode(Code)::: class writer write code:::code->finishRefs->writeShort->writeShort->writeInt->out->write->nh->code->getHandlerCount->writeShort->for->i->writeAttributes
ClassWriter#writeBootstrapMethods(Class)::: class writer write bootstrap methods:::bsms->cls->getBootstrapMethods->bsms->size->writeShort->foreach->writeRef->writeShort->foreach->writeRef
ClassWriter#writeInnerClasses(Class)::: class writer write inner classes:::ics->cls->getInnerClasses->ics->size->writeShort->foreach->writeRef->writeRef->writeRef->writeShort
Code#getMethod()::: code get method:::return
Code#thisClass()::: code this class:::return->m->thisClass
Code#getPackage()::: code get package:::return->m->thisClass->getPackage
Code#getCPMap()::: code get map:::return->m->getCPMap
Code#getLength()::: code get length:::return
Code#getMaxStack()::: code get max stack:::return
Code#setMaxStack(int)::: code set max stack:::
Code#getMaxNALocals()::: code get max locals:::argsize->m->getArgumentSize->return
Code#setMaxNALocals(int)::: code set max locals:::argsize->m->getArgumentSize
Code#getHandlerCount()::: code get handler count:::return
Code#setHandlerCount(int)::: code set handler count:::if->new->ConstantPool.EntryArr->new->intArr->new->intArr->new->intArr
Code#setBytes(byte[])::: code set bytes:::if->fixups->setBytes
Code#setInstructionMap(int[], int)::: code set instruction map:::allocateInstructionMap
Code#setInstructionMap(int[])::: code set instruction map:::setInstructionMap
Code#getInstructionMap()::: code get instruction map:::return->getInsnMap->expandInstructionMap
Code#addFixups(Collection)::: code add fixups:::if->new->Fixups->fixups->addAll
Code#trimToSize()::: code trim to size:::if->fixups->trimToSize->if->fixups->size->super->trimToSize
Code#visitRefs(int, Collection)::: code visit refs:::verbose->getPackage->if->println->refs->Arrays->asList->addAll->if->fixups->visitRefs->else->cpMap->getCPMap->for->i->instructionAt->i->next->super->visitRefs
Code#allocateInstructionMap(int[], int)::: code allocate instruction map:::PClimit->getLength->if->map->new->byteArr->for->i->return->else->if->map->new->shortArr->for->i->return->else->map->Arrays->copyOf->return
Code#expandInstructionMap(Object)::: code expand instruction map:::imap->if->map->new->intArr->for->i->else->if->map->new->intArr->for->i->else->map->Arrays->copyOfRange->return
Code#getInsnMap()::: code get insn map:::if->return->map->getLength->new->intArr->fillp->for->i->instructionAt->i->next->allocateInstructionMap->return
Code#encodeBCI(int):::Encode the given BCI as an instruction boundary number:::if->getLength->return->map0->getInsnMap->i->len->if->map->Arrays->binarySearch->else->if->map->Arrays->binarySearch->else->map->Arrays->binarySearch->return
Code#decodeBCI(int)::: code decode i:::if->getLength->return->map0->getInsnMap->i->len->if->map->if->return->Arrays->binarySearch->if->key->for->else->if->map->if->return->Arrays->binarySearch->if->key->for->else->map->if->return->Arrays->binarySearch->if->key->for->return
Code#finishRefs(ConstantPool.Index)::: code finish refs:::if->fixups->finishRefs
Code#instructionAt(int)::: code instruction at:::return->Instruction->at
Code#flagsRequireCode(int)::: code flags require code:::return
Code#toString()::: code to string:::return
Code#getInt(int)::: code get int:::return->Instruction->getInt
Code#getShort(int)::: code get short:::return->Instruction->getShort
Code#getByte(int)::: code get byte:::return->Instruction->getByte
Code#setInt(int, int)::: code set int:::Instruction->setInt
Code#setShort(int, int)::: code set short:::Instruction->setShort
Code#setByte(int, int)::: code set byte:::Instruction->setByte
Coding#saturate32(long)::: coding saturate32:::if->return->if->return->return
Coding#codeRangeLong(int, int)::: coding code range long:::return->codeRangeLong
Coding#codeRangeLong(int, int, int)::: coding code range long:::if->return->if->return->L->sum->H_i->for->n->if->return
Coding#codeMax(int, int, int, int):::Largest int representable by (B,H,S) in up to nMax bytes.:::range->codeRangeLong->if->return->if->return->saturate32->maxPos->while->isNegativeCode->if->return->smax->decodeSign32->if->return->return
Coding#codeMin(int, int, int, int):::Smallest int representable by (B,H,S) in up to nMax bytes:::range->codeRangeLong->if->return->if->return->maxNeg->while->isNegativeCode->if->return->return->decodeSign32
Coding#toUnsigned32(int)::: coding to unsigned32:::return
Coding#isNegativeCode(long, int)::: coding is negative code:::Smask->return
Coding#hasNegativeCode(int, int)::: coding has negative code:::return
Coding#decodeSign32(long, int)::: coding decode sign32:::if->return->sx->if->isNegativeCode->else->return
Coding#encodeSign32(int, int)::: coding encode sign32:::if->return->toUnsigned32->Smask->ux->if->hasNegativeCode->toUnsigned32->else->toUnsigned32->return
Coding#writeInt(byte[], int[], int, int, int, int)::: coding write int:::ux->encodeSign32->L->sum->pos->for->i
Coding#readInt(byte[], int[], int, int, int)::: coding read int:::L->sum->H_i->pos->for->i->return->decodeSign32
Coding#readIntFrom(InputStream, int, int, int)::: coding read int from:::L->sum->H_i->for->i->return->decodeSign32
Coding#equals(Object)::: coding equals:::if->return->that->if->return->if->return->if->return->if->return->return
Coding#hashCode()::: coding hash code:::return
Coding#of(int, int, int, int)::: coding of:::if->new->HashMap<>->x0->new->Coding->x1->codeMap->get->if->codeMap->put->return
Coding#of(int, int)::: coding of:::return->of
Coding#of(int, int, int)::: coding of:::return->of
Coding#canRepresentValue(int)::: coding can represent value:::if->isSubrange->return->canRepresentUnsigned->else->return->canRepresentSigned
Coding#canRepresentSigned(int):::Can this coding represent a single value, possibly a delta?  This ignores the D property:::return
Coding#canRepresentUnsigned(int):::Can this coding, apart from its S property,  represent a single value?  (Negative values  can only be represented via 32-bit overflow,  so this returns true for negative values  if isFullRange is true.):::return
Coding#readFrom(byte[], int[])::: coding read from:::return->readInt
Coding#writeTo(byte[], int[], int)::: coding write to:::writeInt
Coding#readFrom(InputStream)::: coding read from:::return->readIntFrom
Coding#writeTo(OutputStream, int)::: coding write to:::buf->new->byteArr->pos->new->intArr->writeInt->out->write
Coding#readArrayFrom(InputStream, int[], int, int)::: coding read array from:::for->i->for->dstep
Coding#writeArrayTo(OutputStream, int[], int, int)::: coding write array to:::if->return->for->dstep->buf->new->byteArr->bufmax->pos->for->i
Coding#isSubrange():::Tell if the range of this coding (number of distinct  representable values) can be expressed in 32 bits.:::return
Coding#isFullRange():::Tell if this coding can represent all 32-bit values:::return
Coding#getRange():::Return the number of values this coding (a subrange) can represent.:::return
Coding#setB(int)::: coding set b:::return->Coding->of
Coding#setH(int)::: coding set h:::return->Coding->of
Coding#setS(int)::: coding set s:::return->Coding->of
Coding#setL(int)::: coding set l:::return->setH
Coding#setD(int)::: coding set d:::return->Coding->of
Coding#getDeltaCoding()::: coding get delta coding:::return->setD
Coding#getValueCoding():::Return a coding suitable for representing summed, modulo-reduced values.:::if->isDelta->return->Coding->of->else->return
Coding#reduceToUnsignedRange(long):::Reduce the given value to be within this coding's unsigned range,  by adding or subtracting a multiple of (max-min+1).:::if->canRepresentUnsigned->return->range->getRange->if->return
Coding#reduceToSignedRange(int)::: coding reduce to signed range:::if->canRepresentSigned->return->return->reduceToSignedRange
Coding#reduceToSignedRange(int, int, int)::: coding reduce to signed range:::range->value0->if->if->return
Coding#isSigned():::Does this coding support at least one negative value?         Includes codings that can do so via 32-bit wraparound.:::return
Coding#isDelta():::Does this coding code arrays by making successive differences?:::return
Coding#B()::: coding  b:::return
Coding#H()::: coding  h:::return
Coding#L()::: coding  l:::return
Coding#S()::: coding  s:::return
Coding#del()::: coding del:::return
Coding#min()::: coding min:::return
Coding#max()::: coding max:::return
Coding#umin()::: coding umin:::return
Coding#umax()::: coding umax:::return
Coding#byteMin(int)::: coding byte min:::return
Coding#byteMax(int)::: coding byte max:::return
Coding#compareTo(Coding)::: coding compare to:::dkey->if->if->if->return
Coding#distanceFrom(Coding):::Heuristic measure of the difference between two codings.:::diffdel->if->diffS->if->diffB->if->diffHL->if->else->thisHL->this->getHL->thatHL->that->getHL->if->ceil_lg2->else->ceil_lg2->norm->return
Coding#getHL()::: coding get l:::if->return->if->return->return
Coding#ceil_lg2(int):::ceiling(log[2](x)): {1->0, 2->1, 3->2, 4->2, ...}:::lg->while->return
Coding#bitWidth(int):::Number of significant bits in i, not counting sign bits:::if->w->lo->if->return->hi->if->if->return
Coding#makeDeltas(int[], int, int, int, int):::Create an array of successive differences:::count->deltas->new->intArr->state->if->for->i->else->for->i->return
Coding#canRepresent(int, int)::: coding can represent:::if->if->isSubrange->return->canRepresentUnsigned->canRepresentUnsigned->else->return->isFullRange->else->return->canRepresentSigned->canRepresentSigned
Coding#canRepresent(int[], int, int)::: coding can represent:::len->if->return->if->isFullRange->return->lmax->lmin->for->i->return->canRepresent
Coding#getBitLength(int)::: coding get bit length:::return->getLength
Coding#getLength(int):::How many bytes are in the coding of this value?  Returns Integer.MAX_VALUE if the value has no coding:::if->isDelta->isSubrange->if->canRepresentUnsigned->return->reduceToSignedRange->if->for->n->else->for->n->return
Coding#getLength(int[], int, int)::: coding get length:::len->if->return->if->return->if->isDelta->deltas->if->isSubrange->makeDeltas->else->makeDeltas->sum->for->n->return
Coding#getMetaCoding(Coding)::: coding get meta coding:::if->return->new->byteArr->canonicalIndex->BandStructure->indexOf->if->return->new->byteArr->return->new->byteArr
Coding#parseMetaCoding(byte[], int, Coding, CodingMethod[])::: coding parse meta coding:::op->if->c->BandStructure->codingForIndex->return->if->dsb->H_1->del->S->B->H->if->throw->new->RuntimeException->Coding->of->return->return
Coding#keyString()::: coding key string:::return
Coding#toString()::: coding to string:::str->keyString->return
Coding#stringForDebug()::: coding string for debug:::minS->maxS->str->keyString->if->isSubrange->else->if->isFullRange->if->prev_range->for->n->return
CodingChooser.Choice#reset()::: choice reset:::
CodingChooser.Choice#isExtra()::: choice is extra:::return
CodingChooser.Choice#toString()::: choice to string:::return->stringForDebug
CodingChooser.Choice#stringForDebug()::: choice string for debug:::s->if->if->if->if->if->return
CodingChooser#makeExtraChoice(Coding)::: coding chooser make extra choice:::distance->new->intArr->for->i->c->new->Choice->c->reset->return
CodingChooser#getContext()::: coding chooser get context:::if->new->ByteArrayOutputStream->return
CodingChooser#reset(int[], int, int)::: coding chooser reset:::
CodingChooser#choose(int[], int, int, Coding, int[])::: coding chooser choose:::reset->if->if->computed->computeSizePrivate->return->if->getValueHistogram->getDeltaHistogram->for->i->numChoices->markUsableChoices->if->rand->stress->nextInt->coding->for->i->if->if->else->stressCoding->if->stressPopCoding->if->stressAdaptiveCoding->return->searchScale->for->x->searchOrderLimit->Math->ceil->evaluate->maxd->updateDistances->zipSize1->byteSize1->if->X->BandStructure->encodeEscapeValue->if->regular->canRepresentSigned->Xlen->regular->getLength->dscale->while->nextChoice->if->dhi->dlo->findChoiceNear->if->continue->evaluate->nextMaxd->updateDistances->if->if->info->plainBest->if->info->if->tryPopulationCoding->if->tryAdaptiveCoding->if->if->pct->info->lbestMethod->reset->return
CodingChooser#choose(int[], int, int, Coding)::: coding chooser choose:::return->choose
CodingChooser#choose(int[], Coding, int[])::: coding chooser choose:::return->choose
CodingChooser#choose(int[], Coding)::: coding chooser choose:::return->choose
CodingChooser#markUsableChoices(Coding)::: coding chooser mark usable choices:::numChoices->for->i->if->regular->canRepresent->makeExtraChoice->if->info->if->for->i->if->info->info->if->info->if->for->i->return
CodingChooser#findChoiceNear(Choice, int, int)::: coding chooser find choice near:::if->info->distance->found->for->i->if->info->return
CodingChooser#evaluate(Choice)::: coding chooser evaluate:::mustComputeSize->if->c->isExtra->else->if->hist->isDelta->getHistogram->Math->hist->getBitLength->ceil->else->if->sizes->computeSizePrivate->if->noteSizes->if->if->info
CodingChooser#noteSizes(CodingMethod, int, int)::: coding chooser note sizes:::better->if->pct->info->if->return->else->return
CodingChooser#updateDistances(Choice)::: coding chooser update distances:::distance->maxd->for->i->if->info->return
CodingChooser#computeSize(CodingMethod, int[], int, int, int[])::: coding chooser compute size:::if->return->try->resetData->c->writeArrayTo->getByteSize->getZipSize->catch->throw->new->RuntimeException->finally
CodingChooser#computeSize(CodingMethod, int[], int[])::: coding chooser compute size:::computeSize
CodingChooser#computeSize(CodingMethod, int[], int, int)::: coding chooser compute size:::sizes->computeSize->return
CodingChooser#computeSize(CodingMethod, int[])::: coding chooser compute size:::return->computeSize
CodingChooser#computeSizePrivate(CodingMethod)::: coding chooser compute size private:::sizes->computeSize->return
CodingChooser#computeByteSize(CodingMethod, int[], int, int)::: coding chooser compute byte size:::len->if->return->if->c->size->c->getLength->size2->return->return->countBytesToSizer
CodingChooser#countBytesToSizer(CodingMethod, int[], int, int)::: coding chooser count bytes to sizer:::try->byteOnlySizer->reset->cm->writeArrayTo->return->byteOnlySizer->getSize->catch->throw->new->RuntimeException->finally
CodingChooser#getDeltas(int, int)::: coding chooser get deltas:::if->return->Coding->makeDeltas->if->Coding->makeDeltas->return
CodingChooser#getValueHistogram()::: coding chooser get value histogram:::if->new->Histogram->if->vHist->print->else->if->vHist->print->return
CodingChooser#getDeltaHistogram()::: coding chooser get delta histogram:::if->getDeltas->new->Histogram->if->dHist->print->else->if->dHist->print->return
CodingChooser#getHistogram(boolean)::: coding chooser get histogram:::return->getDeltaHistogram->getValueHistogram
CodingChooser#tryPopulationCoding(Coding)::: coding chooser try population coding:::hist->getValueHistogram->approxL->favoredCoding->plainCoding->getValueCoding->tokenCoding->setL->unfavoredCoding->plainCoding->getValueCoding->BAND_HEADER->currentFSize->currentTSize->currentUSize->Math->favoredCoding->getLength->favoredCoding->getLength->max->ZERO_LEN->tokenCoding->getLength->Math->hist->getBitLength->ceil->bestPopSize->bestPopFVC->allFavoredValues->hist->getTotalLength->new->intArr->targetLowFVC->targetHighFVC->matrix->hist->getMatrix->mrow->mcol->mrowFreq->for->fvcount->hist->getTotalLength->if->if->if->pct->info->return->if->pct->info->oldZipSize->LValuesCoded->bestFits->new->ArrayList<>->fullFits->new->ArrayList<>->longFits->new->ArrayList<>->PACK_TO_MAX_S->if->bestFits->add->else->bestB->doFullAlso->if->fullFits->setS->add->for->i->for->i->bestFits->iterator->i->hasNext->allFits->new->ArrayList<>->for->i->bestFits->iterator->j->fullFits->iterator->k->longFits->iterator->i->hasNext->j->hasNext->k->hasNext->bestFits->clear->fullFits->clear->longFits->clear->maxFits->allFits->size->if->else->if->if->allFits->size->if->info->allFits->allFits->size->subList->clear->if->info->foreach->packToMax->if->tc->S->tc->setS->fVlen->if->else->Math->tc->umax->min->if->continue->if->continue->pop->new->PopulationCoding->pop->setHistogram->pop->tc->L->setL->pop->setFavoredValues->pop->resortFavoredValues->tcsizes->computePopSizePrivate->noteSizes->if->pct->info->if->info
CodingChooser#computePopSizePrivate(PopulationCoding, Coding, Coding)::: coding chooser compute pop size private:::if->new->CodingChooser->if->popHelper->stress->nextInt->addStressSeed->if->fVlen->if->info->info->favoredValues->vals->pop->encodeValues->tokens->unfavoredValues->if->info->pop->popHelper->choose->setFavoredCoding->if->stress->nextBoolean->if->info->tc->popHelper->choose->if->if->info->pop->setTokenCoding->if->pop->setUnfavoredCoding->else->if->info->pop->popHelper->choose->setUnfavoredCoding->if->info->sb->new->StringBuilder->sb->append->for->i->sb->append->sb->append->sb->toString->info->if->info->if->return->sizes->try->resetData->pop->writeSequencesTo->new->intArr->getByteSize->getZipSize->catch->throw->new->RuntimeException->finally->checkSizes->return
CodingChooser#tryAdaptiveCoding(Coding)::: coding chooser try adaptive coding:::oldZipSize->lstart->lend->lvalues->len->if->plainCoding->isDelta->getDeltas->sizes->new->intArr->fillp->totalSize->for->i->avgSize->sizeFuzz->sizeFuzz2->sizeFuzz3->if->if->else->else->if->else->dmeshes->new->doubleArr->logLen->Math->log->for->i->meshes->new->intArr->mfillp->for->i->BandStructure->realloc->BAND_HEADER->threshes->new->intArr->fuzzes->new->doubleArr->for->i->if->print->for->i->info->if->new->CodingChooser->if->runHelper->stress->nextInt->addStressSeed->if->for->i->if->if->info
CodingChooser#pct(double, double)::: coding chooser pct:::return->Math->round
CodingChooser.Sizer#write(int)::: sizer write:::if->out->write
CodingChooser.Sizer#write(byte[], int, int)::: sizer write:::if->out->write
CodingChooser.Sizer#reset()::: sizer reset:::
CodingChooser.Sizer#getSize()::: sizer get size:::return
CodingChooser.Sizer#toString()::: sizer to string:::str->super->toString->return
CodingChooser.Sizer#stringForDebug()::: sizer string for debug:::return->getSize
CodingChooser#resetData()::: coding chooser reset data:::flushData->zipDef->reset->if->try->context->writeTo->catch->throw->new->RuntimeException->finally->zipSizer->reset->byteSizer->reset
CodingChooser#flushData()::: coding chooser flush data:::try->zipOut->finish->catch->throw->new->RuntimeException->finally
CodingChooser#getByteSize()::: coding chooser get byte size:::return->byteSizer->getSize
CodingChooser#getZipSize()::: coding chooser get zip size:::flushData->return->zipSizer->getSize
CodingChooser#addStressSeed(int)::: coding chooser add stress seed:::if->return->stress->stress->nextInt->setSeed
CodingChooser#stressPopCoding(CodingMethod)::: coding chooser stress pop coding:::if->return->valueCoding->getValueCoding->hist->getValueHistogram->fVlen->hist->getTotalLength->stressLen->if->return->popvals->new->ArrayList<>->if->stress->nextBoolean->popset->new->HashSet<>->for->i->else->matrix->hist->getMatrix->for->mrow->reorder->stress->nextInt->if->Collections->shuffle->else->if->Collections->sort->if->Collections->reverse->if->Collections->popvals->size->stressLen->rotate->if->popvals->size->if->popvals->popvals->size->subList->clear->else->popvals->popvals->size->subList->clear->popvals->size->fvals->new->intArr->for->i->pop->new->PopulationCoding->pop->setFavoredValues->lvals->for->i->if->lmin->lmax->for->i->stressCoding->computePopSizePrivate->return
CodingChooser#stressAdaptiveCoding(CodingMethod)::: coding chooser stress adaptive coding:::if->return->plainCoding->len->if->return->spanlen->stressLen->if->return->try->allValues->values->clone->result->scan->lstart->for->split->return->catch->finally
CodingChooser#stressCoding(int, int)::: coding chooser stress coding:::for->i->return
CodingChooser#stressLen(int)::: coding chooser stress len:::rand->stress->nextInt->if->return->Math->min->else->if->return->else->return->stress->nextInt
CodingMethod#readArrayFrom(InputStream, int[], int, int)::: coding method read array from:::
CodingMethod#writeArrayTo(OutputStream, int[], int, int)::: coding method write array to:::
CodingMethod#getMetaCoding(Coding)::: coding method get meta coding:::
ConstantPool#verbose()::: constant pool verbose:::return->Utils->currentPropMap->getInteger
ConstantPool#getUtf8Entry(String):::Factory for Utf8 string constants:::utf8Entries->Utils->getTLGlobals->getUtf8Entries->e->utf8Entries->get->if->new->Utf8Entry->utf8Entries->e->stringValue->put->return
ConstantPool#getClassEntry(String):::Factory for Class constants.:::classEntries->Utils->getTLGlobals->getClassEntries->e->classEntries->get->if->getUtf8Entry->new->ClassEntry->classEntries->e->stringValue->put->return
ConstantPool#getLiteralEntry(Comparable):::Factory for literal constants (String, Integer, etc.).:::literalEntries->Utils->getTLGlobals->getLiteralEntries->e->literalEntries->get->if->if->getUtf8Entry->new->StringEntry->else->new->NumberEntry->literalEntries->put->return
ConstantPool#getStringEntry(String):::Factory for literal constants (String, Integer, etc.).:::return->getLiteralEntry
ConstantPool#getSignatureEntry(String):::Factory for signature (type) constants.:::signatureEntries->Utils->getTLGlobals->getSignatureEntries->e->signatureEntries->get->if->new->SignatureEntry->signatureEntries->put->return
ConstantPool#getSignatureEntry(Utf8Entry, ClassEntry[])::: constant pool get signature entry:::return->SignatureEntry->stringValueOf->getSignatureEntry
ConstantPool#getDescriptorEntry(Utf8Entry, SignatureEntry):::Factory for descriptor (name-and-type) constants.:::descriptorEntries->Utils->getTLGlobals->getDescriptorEntries->key->DescriptorEntry->stringValueOf->e->descriptorEntries->get->if->new->DescriptorEntry->descriptorEntries->put->return
ConstantPool#getDescriptorEntry(Utf8Entry, Utf8Entry)::: constant pool get descriptor entry:::return->typeRef->stringValue->getSignatureEntry->getDescriptorEntry
ConstantPool#getMemberEntry(byte, ClassEntry, DescriptorEntry):::Factory for member reference constants.:::memberEntries->Utils->getTLGlobals->getMemberEntries->key->MemberEntry->stringValueOf->e->memberEntries->get->if->new->MemberEntry->memberEntries->put->return
ConstantPool#getMethodHandleEntry(byte, MemberEntry):::Factory for MethodHandle constants.:::methodHandleEntries->Utils->getTLGlobals->getMethodHandleEntries->key->MethodHandleEntry->stringValueOf->e->methodHandleEntries->get->if->new->MethodHandleEntry->methodHandleEntries->put->return
ConstantPool#getMethodTypeEntry(SignatureEntry):::Factory for MethodType constants.:::methodTypeEntries->Utils->getTLGlobals->getMethodTypeEntries->key->sigRef->stringValue->e->methodTypeEntries->get->if->new->MethodTypeEntry->methodTypeEntries->put->return
ConstantPool#getMethodTypeEntry(Utf8Entry)::: constant pool get method type entry:::return->typeRef->stringValue->getSignatureEntry->getMethodTypeEntry
ConstantPool#getInvokeDynamicEntry(BootstrapMethodEntry, DescriptorEntry):::Factory for InvokeDynamic constants.:::invokeDynamicEntries->Utils->getTLGlobals->getInvokeDynamicEntries->key->InvokeDynamicEntry->stringValueOf->e->invokeDynamicEntries->get->if->new->InvokeDynamicEntry->invokeDynamicEntries->put->return
ConstantPool#getBootstrapMethodEntry(MethodHandleEntry, Entry[]):::Factory for BootstrapMethod pseudo-constants.:::bootstrapMethodEntries->Utils->getTLGlobals->getBootstrapMethodEntries->key->BootstrapMethodEntry->stringValueOf->e->bootstrapMethodEntries->get->if->new->BootstrapMethodEntry->bootstrapMethodEntries->put->return
ConstantPool.Entry#getTag()::: entry get tag:::return
ConstantPool.Entry#tagEquals(int)::: entry tag equals:::return->getTag
ConstantPool.Entry#getRef(int)::: entry get ref:::return
ConstantPool.Entry#eq(Entry)::: entry eq:::return->this->equals
ConstantPool.Entry#equals(Object)::: entry equals:::
ConstantPool.Entry#hashCode()::: entry hash code:::if->computeValueHash->if->return
ConstantPool.Entry#computeValueHash()::: entry compute value hash:::
ConstantPool.Entry#compareTo(Object)::: entry compare to:::
ConstantPool.Entry#superCompareTo(Object)::: entry super compare to:::that->if->return->return
ConstantPool.Entry#isDoubleWord()::: entry is double word:::return
ConstantPool.Entry#tagMatches(int)::: entry tag matches:::if->return->allowedTags->switch->return->return->break->break->break->return->foreach->if->return->return
ConstantPool.Entry#toString()::: entry to string:::valuePrint->stringValue->if->verbose->if->System->identityHashCode->return->tagName
ConstantPool.Entry#stringValue()::: entry string value:::
ConstantPool.Utf8Entry#computeValueHash()::: utf8 entry compute value hash:::return->value->hashCode
ConstantPool.Utf8Entry#equals(Object)::: utf8 entry equals:::return->o->getClass->equals
ConstantPool.Utf8Entry#compareTo(Object)::: utf8 entry compare to:::x->superCompareTo->if->value->compareTo->return
ConstantPool.Utf8Entry#stringValue()::: utf8 entry string value:::return
ConstantPool#isMemberTag(byte)::: constant pool is member tag:::switch->return->return
ConstantPool#numberTagOf(Number)::: constant pool number tag of:::if->return->if->return->if->return->if->return->throw->new->RuntimeException
ConstantPool#isRefKind(byte)::: constant pool is ref kind:::return
ConstantPool.LiteralEntry#literalValue()::: literal entry literal value:::
ConstantPool.NumberEntry#computeValueHash()::: number entry compute value hash:::return->value->hashCode
ConstantPool.NumberEntry#equals(Object)::: number entry equals:::return->o->getClass->equals
ConstantPool.NumberEntry#compareTo(Object)::: number entry compare to:::x->superCompareTo->if->compValue->compValue->compareTo->return
ConstantPool.NumberEntry#numberValue()::: number entry number value:::return
ConstantPool.NumberEntry#literalValue()::: number entry literal value:::return
ConstantPool.NumberEntry#stringValue()::: number entry string value:::return->value->toString
ConstantPool.StringEntry#getRef(int)::: string entry get ref:::return
ConstantPool.StringEntry#computeValueHash()::: string entry compute value hash:::return->ref->hashCode
ConstantPool.StringEntry#equals(Object)::: string entry equals:::return->o->getClass->eq
ConstantPool.StringEntry#compareTo(Object)::: string entry compare to:::x->superCompareTo->if->ref->compareTo->return
ConstantPool.StringEntry#literalValue()::: string entry literal value:::return->ref->stringValue
ConstantPool.StringEntry#stringValue()::: string entry string value:::return->ref->stringValue
ConstantPool.ClassEntry#getRef(int)::: class entry get ref:::return
ConstantPool.ClassEntry#computeValueHash()::: class entry compute value hash:::return->ref->hashCode
ConstantPool.ClassEntry#equals(Object)::: class entry equals:::return->o->getClass->eq
ConstantPool.ClassEntry#compareTo(Object)::: class entry compare to:::x->superCompareTo->if->ref->compareTo->return
ConstantPool.ClassEntry#stringValue()::: class entry string value:::return->ref->stringValue
ConstantPool.DescriptorEntry#getRef(int)::: descriptor entry get ref:::if->return->if->return->return
ConstantPool.DescriptorEntry#computeValueHash()::: descriptor entry compute value hash:::hc2->typeRef->hashCode->return->nameRef->hashCode
ConstantPool.DescriptorEntry#equals(Object)::: descriptor entry equals:::if->o->getClass->return->that->return->eq->eq
ConstantPool.DescriptorEntry#compareTo(Object)::: descriptor entry compare to:::x->superCompareTo->if->that->compareTo->if->compareTo->return
ConstantPool.DescriptorEntry#stringValue()::: descriptor entry string value:::return->stringValueOf
ConstantPool.DescriptorEntry#stringValueOf(Entry, Entry)::: descriptor entry string value of:::return->qualifiedStringValue
ConstantPool.DescriptorEntry#prettyString()::: descriptor entry pretty string:::return->nameRef->stringValue->typeRef->prettyString
ConstantPool.DescriptorEntry#isMethod()::: descriptor entry is method:::return->typeRef->isMethod
ConstantPool.DescriptorEntry#getLiteralTag()::: descriptor entry get literal tag:::return->typeRef->getLiteralTag
ConstantPool#qualifiedStringValue(Entry, Entry)::: constant pool qualified string value:::return->e1->stringValue->e2->stringValue->qualifiedStringValue
ConstantPool#qualifiedStringValue(String, String)::: constant pool qualified string value:::return
ConstantPool.MemberEntry#getRef(int)::: member entry get ref:::if->return->if->return->return
ConstantPool.MemberEntry#computeValueHash()::: member entry compute value hash:::hc2->descRef->hashCode->return->classRef->hashCode
ConstantPool.MemberEntry#equals(Object)::: member entry equals:::if->o->getClass->return->that->return->eq->eq
ConstantPool.MemberEntry#compareTo(Object)::: member entry compare to:::x->superCompareTo->if->that->if->compareTo->if->compareTo->if->compareTo->return
ConstantPool.MemberEntry#stringValue()::: member entry string value:::return->stringValueOf
ConstantPool.MemberEntry#stringValueOf(byte, ClassEntry, DescriptorEntry)::: member entry string value of:::pfx->switch->break->break->break->break->return->qualifiedStringValue
ConstantPool.MemberEntry#isMethod()::: member entry is method:::return->descRef->isMethod
ConstantPool.SignatureEntry#getRef(int)::: signature entry get ref:::if->return->return
ConstantPool.SignatureEntry#computeValueHash()::: signature entry compute value hash:::stringValue->return->value->hashCode
ConstantPool.SignatureEntry#asUtf8Entry()::: signature entry as utf8 entry:::if->stringValue->getUtf8Entry->return
ConstantPool.SignatureEntry#equals(Object)::: signature entry equals:::return->o->getClass->equals
ConstantPool.SignatureEntry#compareTo(Object)::: signature entry compare to:::x->superCompareTo->if->that->compareSignatures->return
ConstantPool.SignatureEntry#stringValue()::: signature entry string value:::if->stringValueOf->return
ConstantPool.SignatureEntry#stringValueOf(Utf8Entry, ClassEntry[])::: signature entry string value of:::parts->new->StringArr->formRef->stringValue->for->i->return->flattenSignature->intern
ConstantPool.SignatureEntry#computeSize(boolean)::: signature entry compute size:::form->formRef->stringValue->min->max->if->isMethod->form->indexOf->size->for->i->return
ConstantPool.SignatureEntry#isMethod()::: signature entry is method:::return->formRef->stringValue->charAt
ConstantPool.SignatureEntry#getLiteralTag()::: signature entry get literal tag:::switch->formRef->stringValue->charAt->return->return->return->return->return->return->return
ConstantPool.SignatureEntry#prettyString()::: signature entry pretty string:::s->if->isMethod->formRef->stringValue->s->s->indexOf->substring->else->formRef->stringValue->i->while->s->indexOf->s->substring->s->substring->return
ConstantPool#compareSignatures(String, String)::: constant pool compare signatures:::return->compareSignatures
ConstantPool#compareSignatures(String, String, String[], String[])::: constant pool compare signatures:::S1_COMES_FIRST->S2_COMES_FIRST->c1->s1->charAt->c2->s2->charAt->if->return->if->return->if->structureSignature->if->structureSignature->if->return->length->for->i->return
ConstantPool#countClassParts(Utf8Entry)::: constant pool count class parts:::num->s->formRef->stringValue->for->i->s->length->return
ConstantPool#flattenSignature(String[])::: constant pool flatten signature:::form->if->return->len->form->length->for->i->sig->new->charArr->j->k->for->i->form->length->return->new->String
ConstantPool#skipTo(char, String, int)::: constant pool skip to:::sig->indexOf->return->sig->length
ConstantPool#structureSignature(String)::: constant pool structure signature:::firstl->sig->indexOf->if->parts->return->form->parts->for->pass->new->String->return
ConstantPool.MethodHandleEntry#getRef(int)::: method handle entry get ref:::return
ConstantPool.MethodHandleEntry#computeValueHash()::: method handle entry compute value hash:::hc2->return->memRef->hashCode
ConstantPool.MethodHandleEntry#equals(Object)::: method handle entry equals:::if->o->getClass->return->that->return->eq
ConstantPool.MethodHandleEntry#compareTo(Object)::: method handle entry compare to:::x->superCompareTo->if->that->if->if->compareTo->if->return
ConstantPool.MethodHandleEntry#stringValueOf(int, MemberEntry)::: method handle entry string value of:::return->refKindName->memRef->stringValue
ConstantPool.MethodHandleEntry#stringValue()::: method handle entry string value:::return->stringValueOf
ConstantPool.MethodTypeEntry#getRef(int)::: method type entry get ref:::return
ConstantPool.MethodTypeEntry#computeValueHash()::: method type entry compute value hash:::return->typeRef->hashCode
ConstantPool.MethodTypeEntry#equals(Object)::: method type entry equals:::if->o->getClass->return->that->return->eq
ConstantPool.MethodTypeEntry#compareTo(Object)::: method type entry compare to:::x->superCompareTo->if->that->compareTo->return
ConstantPool.MethodTypeEntry#stringValue()::: method type entry string value:::return->typeRef->stringValue
ConstantPool.InvokeDynamicEntry#getRef(int)::: invoke dynamic entry get ref:::if->return->if->return->return
ConstantPool.InvokeDynamicEntry#computeValueHash()::: invoke dynamic entry compute value hash:::hc2->descRef->hashCode->return->bssRef->hashCode
ConstantPool.InvokeDynamicEntry#equals(Object)::: invoke dynamic entry equals:::if->o->getClass->return->that->return->eq->eq
ConstantPool.InvokeDynamicEntry#compareTo(Object)::: invoke dynamic entry compare to:::x->superCompareTo->if->that->if->compareTo->if->compareTo->if->compareTo->return
ConstantPool.InvokeDynamicEntry#stringValue()::: invoke dynamic entry string value:::return->stringValueOf
ConstantPool.InvokeDynamicEntry#stringValueOf(BootstrapMethodEntry, DescriptorEntry)::: invoke dynamic entry string value of:::return->bssRef->stringValue->descRef->stringValue
ConstantPool.BootstrapMethodEntry#getRef(int)::: bootstrap method entry get ref:::if->return->if->return->return
ConstantPool.BootstrapMethodEntry#computeValueHash()::: bootstrap method entry compute value hash:::hc2->bsmRef->hashCode->return->Arrays->hashCode
ConstantPool.BootstrapMethodEntry#equals(Object)::: bootstrap method entry equals:::if->o->getClass->return->that->return->eq->Arrays->equals
ConstantPool.BootstrapMethodEntry#compareTo(Object)::: bootstrap method entry compare to:::x->superCompareTo->if->that->if->compareTo->if->compareArgArrays->if->compareTo->return
ConstantPool.BootstrapMethodEntry#stringValue()::: bootstrap method entry string value:::return->stringValueOf
ConstantPool.BootstrapMethodEntry#stringValueOf(MethodHandleEntry, Entry[])::: bootstrap method entry string value of:::sb->bsmRef->stringValue->new->StringBuilder->nextSep->didOne->foreach->sb->append->argRef->stringValue->append->if->sb->append->sb->append->return->sb->toString
ConstantPool.BootstrapMethodEntry#compareArgArrays(Entry[], Entry[])::: bootstrap method entry compare arg arrays:::x->if->return->for->i->return
ConstantPool.Index#getMap()::: index get map:::return
ConstantPool.Index#setMap(Entry[])::: index set map:::clearIndex
ConstantPool.Index#setMap(Collection)::: index set map:::cpMapList->size->new->EntryArr->cpMapList->toArray->setMap
ConstantPool.Index#size()::: index size:::return
ConstantPool.Index#get(int)::: index get:::return
ConstantPool.Index#getEntry(int)::: index get entry:::return
ConstantPool.Index#findIndexOf(Entry)::: index find index of:::if->initializeIndex->probe->findIndexLocation->if->if->se->return->se->asUtf8Entry->findIndexOf->return->index->return
ConstantPool.Index#contains(Entry)::: index contains:::return->findIndexOf
ConstantPool.Index#indexOf(Entry)::: index index of:::index->findIndexOf->if->verbose->println->this->dumpString->println->Thread->dumpStack->return
ConstantPool.Index#lastIndexOf(Entry)::: index last index of:::return->indexOf
ConstantPool.Index#assertIsSorted()::: index assert is sorted:::for->i->return
ConstantPool.Index#clearIndex()::: index clear index:::
ConstantPool.Index#findIndexLocation(Entry)::: index find index location:::size->hash->e->hashCode->probe->stride->for
ConstantPool.Index#initializeIndex()::: index initialize index:::if->verbose->size->println->hsize0->hsize->while->new->EntryArr->new->intArr->for->i
ConstantPool.Index#toArray(Entry[])::: index to array:::sz->size->if->return->super->toArray->System->arraycopy->if->return
ConstantPool.Index#toArray()::: index to array:::return->size->new->EntryArr->toArray
ConstantPool.Index#clone()::: index clone:::return->cpMap->clone->new->Index
ConstantPool.Index#toString()::: index to string:::return->size
ConstantPool.Index#dumpString()::: index dump string:::s->toString->for->i->return
ConstantPool#makeIndex(String, Entry[])::: constant pool make index:::return->new->Index
ConstantPool#makeIndex(String, Collection)::: constant pool make index:::return->new->Index
ConstantPool#sort(Index):::Sort this index (destructively) into canonical order.:::ix->clearIndex->Arrays->sort->if->verbose->ix->dumpString->println
ConstantPool#partition(Index, int[]):::Return a set of indexes partitioning these entries:::parts->new->ArrayList<>->cpMap->for->i->indexes->parts->size->new->IndexArr->for->key->return
ConstantPool#partitionByTag(Index)::: constant pool partition by tag:::cpMap->keys->new->intArr->for->i->byTag->partition->for->tag->if->longer->new->IndexArr->System->arraycopy->return
ConstantPool.IndexGroup#makeTagGroupIndex(byte, byte[]):::Index of all CP entries of all types, in definition order.:::if->new->IndexArr->which->fillp->cpMap->for->pass->tagName->new->Index->return
ConstantPool.IndexGroup#untypedIndexOf(Entry)::: index group untyped index of:::if->new->intArr->fillp->for->i->if->return->tag->ix->if->return->idx->ix->findIndexOf->if->return
ConstantPool.IndexGroup#initIndexByTag(byte, Index)::: index group init index by tag:::cpMap->for->i->if->if
ConstantPool.IndexGroup#getIndexByTag(byte):::Index of all CP entries of a given tag.:::if->return->getIndexByTagGroup->ix->if->tagName->new->EntryArr->new->Index->return
ConstantPool.IndexGroup#getIndexByTagGroup(byte)::: index group get index by tag group:::if->ix->if->return->switch->return->makeTagGroupIndex->return->makeTagGroupIndex->return->makeTagGroupIndex->return->throw->new->AssertionError
ConstantPool.IndexGroup#getMemberIndex(byte, ClassEntry):::Index of all CP entries of a given tag and class.:::if->throw->tagName->new->RuntimeException->if->new->IndexArrs->allClasses->getIndexByTag->perClassIndexes->if->allMembers->getIndexByTag->whichClasses->allMembers->size->new->intArr->for->i->partition->for->i->whichClass->allClasses->indexOf->return
ConstantPool.IndexGroup#getOverloadingIndex(MemberEntry)::: index group get overloading index:::ix->getMemberIndex->nameRef->ord->for->i->throw->new->RuntimeException
ConstantPool.IndexGroup#getOverloadingForIndex(byte, ClassEntry, String, int)::: index group get overloading for index:::ix->getMemberIndex->ord->for->i->throw->new->RuntimeException
ConstantPool.IndexGroup#haveNumbers()::: index group have numbers:::foreach->if->getIndexByTag->size->return->return
ConstantPool.IndexGroup#haveExtraTags()::: index group have extra tags:::foreach->if->getIndexByTag->size->return->return
ConstantPool#completeReferencesIn(Set, boolean):::Close the set cpRefs under the getRef(*) relation:::completeReferencesIn
ConstantPool#completeReferencesIn(Set, boolean, List)::: constant pool complete references in:::cpRefs->remove->for->work->new->ArrayList<>->cpRefs->size->listIterator->work->hasPrevious
ConstantPool#percent(int, int)::: constant pool percent:::return
ConstantPool#tagName(int)::: constant pool tag name:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return
ConstantPool#refKindName(int)::: constant pool ref kind name:::switch->return->return->return->return->return->return->return->return->return->return
ConstantPool#verifyTagOrder(byte[])::: constant pool verify tag order:::prev->foreach->next->return
Driver#main(String[])::: driver main:::av->Arrays->asList->new->ArrayList<>->doPack->doUnpack->doRepack->doZip->av->remove->logFile->verboseProp->arg0->av->isEmpty->av->get->switch->av->remove->break->av->remove->break->if->printDeprecateWarning->engProps->new->HashMap<>->engProps->System->getProperty->put->optionMap->propTable->if->else->avProps->new->HashMap<>->try->for->catch->MessageFormat->RESOURCE->getString->format->println->printUsage->System->exit->return->finally->foreach->avProps->keySet->val->avProps->get->switch->break->break->break->throw->MessageFormat->RESOURCE->getString->avProps->get->format->new->InternalError->if->logFile->equals->if->logFile->equals->System->setErr->else->log->new->FileOutputStream->System->new->PrintStream->setErr->verbose->engProps->get->packfile->if->av->isEmpty->av->remove->jarfile->if->av->isEmpty->av->remove->newfile->bakfile->tmpfile->if->if->packfile->toLowerCase->endsWith->packfile->toLowerCase->endsWith->packfile->toLowerCase->endsWith->MessageFormat->RESOURCE->getString->format->println->printUsage->System->exit->if->jarfile->equals->createTempFile->getPath->if->av->isEmpty->jarfile->toLowerCase->endsWith->jarfile->toLowerCase->endsWith->jarfile->equals->printUsage->System->exit->return->if->else->if->jpack->Pack200->newPacker->junpack->Pack200->newUnpacker->jpack->properties->putAll->junpack->properties->putAll->if->newfile->equals->zipc->getZipComment->if->zipc->length->MessageFormat->RESOURCE->getString->format->println->if->zipc->indexOf->MessageFormat->RESOURCE->getString->format->println->try->if->in->new->File->new->JarFile->out->if->packfile->equals->System->setOut->else->if->if->packfile->endsWith->MessageFormat->RESOURCE->getString->format->println->printUsage->System->exit->new->FileOutputStream->new->BufferedOutputStream->new->GZIPOutputStream->else->if->packfile->toLowerCase->endsWith->packfile->toLowerCase->endsWith->MessageFormat->RESOURCE->getString->format->println->printUsage->System->exit->new->FileOutputStream->new->BufferedOutputStream->jpack->pack->out->close->if->newfile->equals->bakf->createTempFile->bakf->delete->okBackup->new->File->renameTo->if->throw->MessageFormat->RESOURCE->getString->format->new->Error->else->bakf->getPath->if->in->if->packfile->equals->else->new->File->new->FileInputStream->inBuf->new->BufferedInputStream->if->Utils->Utils->readMagic->isGZIPMagic->new->GZIPInputStream->outfile->newfile->equals->fileOut->if->outfile->equals->else->new->FileOutputStream->new->BufferedOutputStream->try->out->new->JarOutputStream->junpack->unpack->catch->finally->if->bakfile->equals->new->File->delete->catch->finally->if->bakfile->equals->jarFile->new->File->jarFile->delete->new->File->renameTo->if->tmpfile->equals->new->File->delete
Driver#createTempFile(String, String)::: driver create temp file:::base->new->File->prefix->base->getName->if->prefix->length->where->base->getParentFile->suffix->equals->new->File->getAbsoluteFile->base->getParentFile->tmpfile->Files->createTempFile->Files->where->toPath->createTempFile->return->tmpfile->toFile
Driver#printDeprecateWarning(boolean, PrintStream)::: driver print deprecate warning:::prog->out->MessageFormat->RESOURCE->getString->format->println
Driver#printUsage(boolean, boolean, PrintStream)::: driver print usage:::prog->packUsage->RESOURCE->getObject->unpackUsage->RESOURCE->getObject->usage->for->i->if->printDeprecateWarning
Driver#getZipComment(String)::: driver get zip comment:::tail->new->byteArr->filelen->new->File->length->if->return->skiplen->Math->max->try->in->new->File->new->FileInputStream->in->skip->in->read->for->i->return->catch->finally
Driver#parseCommandOptions(List, String, Map)::: driver parse command options:::resultString->optmap->new->TreeMap<>->foreach->options->split->words->optline->split->if->continue->opt->if->opt->length->if->opt->length->continue->prevWords->optmap->put->if->throw->MessageFormat->RESOURCE->getString->optline->trim->format->new->RuntimeException->argp->args->listIterator->pbp->new->ArrayList<String>->listIterator->for->args->argp->nextIndex->subList->clear->while->pbp->hasPrevious->args->pbp->previous->add->return
DriverResource#getContents()::: driver resource get contents:::return
DriverResource_ja#getContents()::: driver resource_ja get contents:::return
DriverResource_zh_CN#getContents()::: driver resource_zh_ n get contents:::return
FixedList#size()::: fixed list size:::return->flist->size
FixedList#isEmpty()::: fixed list is empty:::return->flist->isEmpty
FixedList#contains(Object)::: fixed list contains:::return->flist->contains
FixedList#iterator()::: fixed list iterator:::return->flist->iterator
FixedList#toArray()::: fixed list to array:::return->flist->toArray
FixedList#toArray(T[])::: fixed list to array:::return->flist->toArray
FixedList#add(E)::: fixed list add:::throw->new->UnsupportedOperationException
FixedList#remove(Object)::: fixed list remove:::throw->new->UnsupportedOperationException
FixedList#containsAll(Collection)::: fixed list contains all:::return->flist->containsAll
FixedList#addAll(Collection)::: fixed list add all:::throw->new->UnsupportedOperationException
FixedList#addAll(int, Collection)::: fixed list add all:::throw->new->UnsupportedOperationException
FixedList#removeAll(Collection)::: fixed list remove all:::throw->new->UnsupportedOperationException
FixedList#retainAll(Collection)::: fixed list retain all:::throw->new->UnsupportedOperationException
FixedList#clear()::: fixed list clear:::throw->new->UnsupportedOperationException
FixedList#get(int)::: fixed list get:::return->flist->get
FixedList#set(int, E)::: fixed list set:::return->flist->set
FixedList#add(int, E)::: fixed list add:::throw->new->UnsupportedOperationException
FixedList#remove(int)::: fixed list remove:::throw->new->UnsupportedOperationException
FixedList#indexOf(Object)::: fixed list index of:::return->flist->indexOf
FixedList#lastIndexOf(Object)::: fixed list last index of:::return->flist->lastIndexOf
FixedList#listIterator()::: fixed list list iterator:::return->flist->listIterator
FixedList#listIterator(int)::: fixed list list iterator:::return->flist->listIterator
FixedList#subList(int, int)::: fixed list sub list:::return->flist->subList
FixedList#toString()::: fixed list to string:::return
Fixups#size()::: fixups size:::return
Fixups#trimToSize()::: fixups trim to size:::if->oldEntries->new->EntryArr->System->arraycopy->bigSize->if->else->if->oldBigDescs->new->intArr->System->arraycopy
Fixups#visitRefs(Collection)::: fixups visit refs:::for->i
Fixups#clear()::: fixups clear:::if->foreach->fx->location->fx->format->storeIndex->if
Fixups#getBytes()::: fixups get bytes:::return
Fixups#setBytes(byte[])::: fixups set bytes:::if->return->old->if->save->new->ArrayList<>->clear->addAll->else
Fixups#fmtLen(int)::: fixups fmt len:::return
Fixups#descLoc(int)::: fixups desc loc:::return
Fixups#descFmt(int)::: fixups desc fmt:::return
Fixups#descEnd(int)::: fixups desc end:::return->descLoc->descFmt->fmtLen
Fixups#makeDesc(int, int)::: fixups make desc:::desc->return
Fixups#fetchDesc(int, int)::: fixups fetch desc:::b1->value->if->b2->else->return
Fixups#storeDesc(int, int, int)::: fixups store desc:::if->return->value->b1->b2->switch->if->return->break->if->return->break->return
Fixups#storeIndex(int, int, int)::: fixups store index:::storeIndex
Fixups#storeIndex(byte[], int, int, int)::: fixups store index:::switch->break->break
Fixups#addU1(int, Entry)::: fixups add u1:::add
Fixups#addU2(int, Entry)::: fixups add u2:::add
Fixups.Fixup#location()::: fixup location:::return->descLoc
Fixups.Fixup#format()::: fixup format:::return->descFmt
Fixups.Fixup#entry()::: fixup entry:::return
Fixups.Fixup#compareTo(Fixup)::: fixup compare to:::return->this->location->that->location
Fixups.Fixup#equals(Object)::: fixup equals:::if->return->that->return
Fixups.Fixup#hashCode()::: fixup hash code:::hash->Objects->hashCode->return
Fixups.Fixup#toString()::: fixup to string:::return->location->format
Fixups.Itr#hasNext()::: itr has next:::return
Fixups.Itr#remove()::: itr remove:::throw->new->UnsupportedOperationException
Fixups.Itr#next()::: itr next:::thisIndex->return->nextDesc->new->Fixup
Fixups.Itr#nextDesc()::: itr next desc:::thisDesc->if->loc->descLoc->fmt->descFmt->if->fetchDesc->else->return
Fixups#iterator()::: fixups iterator:::return->new->Itr
Fixups#add(int, int, Entry)::: fixups add:::makeDesc->addDesc
Fixups#add(Fixup)::: fixups add:::addDesc->return
Fixups#addAll(Collection)::: fixups add all:::if->that->if->return->if->growEntries->thatEntries->for->i->that->new->Itr->i->hasNext->return->else->return->super->addAll
Fixups#addDesc(int, Entry)::: fixups add desc:::if->growEntries->if->else->prevDesc->prevLoc->descLoc->prevFmt->descFmt->prevLen->fmtLen->thisLoc->descLoc->if->badOverlap->if->storeDesc->bigSize->if->growBigDescs
Fixups#badOverlap(int)::: fixups bad overlap:::throw->new->IllegalArgumentException
Fixups#growEntries(int)::: fixups grow entries:::oldEntries->Math->max->new->EntryArr->System->arraycopy
Fixups#growBigDescs()::: fixups grow big descs:::oldBigDescs->new->intArr->System->arraycopy
Fixups#addRefWithBytes(Object, byte[], Entry)::: fixups add ref with bytes:::return->add
Fixups#addRefWithLoc(Object, int, Entry)::: fixups add ref with loc:::return->add
Fixups#add(Object, byte[], int, int, Entry)::: fixups add:::f->if->if->return->new->Fixups->else->if->firstEntry->new->Fixups->f->add->else->f->add->return
Fixups#setBytes(Object, byte[])::: fixups set bytes:::if->f->f->setBytes
Fixups#trimToSize(Object)::: fixups trim to size:::if->f->f->trimToSize->if->f->size->return
Fixups#visitRefs(Object, Collection)::: fixups visit refs:::if->else->if->refs->add->else->f->f->visitRefs
Fixups#finishRefs(Object, byte[], ConstantPool.Index)::: fixups finish refs:::if->return->if->index->ix->indexOf->storeIndex->return->f->f->finishRefs
Fixups#finishRefs(ConstantPool.Index)::: fixups finish refs:::if->isEmpty->return->foreach->index->ix->indexOf->fx->location->fx->format->storeIndex->clear
Histogram#getMatrix():::Histogram of int values, reported compactly as a ragged matrix,  indexed by descending frequency rank:::return
Histogram#getRowCount()::: histogram get row count:::return
Histogram#getRowFrequency(int)::: histogram get row frequency:::return
Histogram#getRowLength(int)::: histogram get row length:::return
Histogram#getRowValue(int, int)::: histogram get row value:::return
Histogram#getRowWeight(int)::: histogram get row weight:::return->getRowFrequency->getRowLength
Histogram#getTotalWeight()::: histogram get total weight:::return
Histogram#getTotalLength()::: histogram get total length:::return
Histogram#getAllValues():::Returns an array of all values, sorted.:::return
Histogram#getAllFrequencies():::Returns an array parallel with #getValues,  with a frequency for each value.:::return
Histogram#getFrequency(int)::: histogram get frequency:::pos->Arrays->binarySearch->if->return->return
Histogram#getBitLength(int)::: histogram get bit length:::prob->getFrequency->getTotalWeight->return->Math->log
Histogram#getRowBitLength(int)::: histogram get row bit length:::prob->getRowFrequency->getTotalWeight->return->Math->log
Histogram.BitMetric#getBitLength(int)::: bit metric get bit length:::
Histogram#getBitMetric()::: histogram get bit metric:::return
Histogram#getBitLength():::bit-length is negative entropy:  -H(matrix).:::sum->for->i->return
Histogram#getBitLength(BitMetric):::bit-length in to another coding (cross-entropy):::sum->for->i->return
Histogram#round(double, double)::: histogram round:::return->Math->round
Histogram#normalizeMatrix(int[][]):::Sort rows and columns:::rowMap->new->longArr->for->i->Arrays->sort->newMatrix->new->intArrs->prevCount->fillp1->fillp2->for->i->if->new->intArrs->System->arraycopy->return
Histogram#getRowTitles(String)::: histogram get row titles:::totalUnique->getTotalLength->ltotalWeight->getTotalWeight->histTitles->new->StringArr->cumWeight->cumUnique->for->i->return
Histogram#print(PrintStream):::Print a report of this histogram.:::print
Histogram#print(String, PrintStream):::Print a report of this histogram.:::getRowTitles->print
Histogram#print(String, String[], PrintStream):::Print a report of this histogram.:::totalUnique->getTotalLength->ltotalWeight->getTotalWeight->tlen->getBitLength->avgLen->avg->title->round->round->round->if->out->println->else->out->println->buf->new->StringBuffer->for->i->out->println
Histogram#makeMatrix(long[])::: histogram make matrix:::Arrays->sort->counts->new->intArr->for->i->countHist->computeHistogram2Col->matrix->new->intArrs->histp->countp->for->i->return
Histogram#makeTable(long[])::: histogram make table:::table->new->intArrs->for->i->return
Histogram#computeHistogram2Col(int[]):::Simple two-column histogram:::switch->return->new->longArr->return->new->longArr->hist->for->sizeOnly->return
Histogram#regroupHistogram(int[][], int[]):::Regroup the histogram, so that it becomes an approximate histogram  whose rows are of the given lengths:::oldEntries->for->i->newEntries->for->ni->if->newlen->ok->for->ni->else->excess->newGroups->new->intArr->System->arraycopy->newMatrix->new->intArrs->i->jMin->jMax->for->ni->return
Histogram#makeByteHistogram(InputStream)::: histogram make byte histogram:::buf->new->byteArr->tally->new->intArr->for->nr->bytes->read->matrix->new->intArrs->for->i->return->new->Histogram
Histogram#sortedSlice(int[], int, int):::Slice and sort the given input array.:::if->isSorted->return->else->slice->new->intArr->System->arraycopy->Arrays->sort->return
Histogram#isSorted(int[], int, boolean):::Tell if an array is sorted.:::for->i->return
Histogram#maybeSort(int[]):::Clone and sort the array, if not already sorted.:::if->isSorted->values->clone->Arrays->sort->return
Histogram#assertWellFormed(int[])::: histogram assert well formed:::return
Instruction#reset(byte[], int, int, int, int)::: instruction reset:::
Instruction#getBC()::: instruction get c:::return
Instruction#isWide()::: instruction is wide:::return
Instruction#getBytes()::: instruction get bytes:::return
Instruction#getPC()::: instruction get c:::return
Instruction#getLength()::: instruction get length:::return
Instruction#getNextPC()::: instruction get next c:::return
Instruction#next()::: instruction next:::npc->if->return->else->return->Instruction->at
Instruction#isNonstandard()::: instruction is nonstandard:::return->isNonstandard
Instruction#setNonstandardLength(int)::: instruction set nonstandard length:::
Instruction#forceNextPC(int):::A fake instruction at this pc whose next() will be at nextpc.:::llength->return->new->Instruction
Instruction#at(byte[], int)::: instruction at:::return->Instruction->at
Instruction#at(byte[], int, Instruction)::: instruction at:::bc->getByte->prefix->w->length->if->switch->getByte->if->break->return->new->TableSwitch->return->new->LookupSwitch->break->if->reuse->reset->return->return->new->Instruction
Instruction#getCPTag()::: instruction get tag:::return
Instruction#getCPIndex()::: instruction get index:::indexLoc->if->return->if->return->getByte->else->return->getShort
Instruction#setCPIndex(int)::: instruction set index:::indexLoc->if->setByte->else->setShort
Instruction#getCPRef(ConstantPool.Entry[])::: instruction get ref:::index->getCPIndex->return
Instruction#getLocalSlot()::: instruction get local slot:::slotLoc->if->return->if->return->getByte->else->return->getShort
Instruction#getBranchLabel()::: instruction get branch label:::branchLoc->if->return->offset->if->getShort->else->getInt->return
Instruction#setBranchLabel(int)::: instruction set branch label:::branchLoc->if->setShort->else->setInt
Instruction#getConstant()::: instruction get constant:::conLoc->if->return->switch->return->getByte->return->getShort->return
Instruction#setConstant(int)::: instruction set constant:::conLoc->switch->setByte->break->setShort->break
Instruction.Switch#getCaseCount()::: switch get case count:::
Instruction.Switch#getCaseValue(int)::: switch get case value:::
Instruction.Switch#getCaseLabel(int)::: switch get case label:::
Instruction.Switch#setCaseCount(int)::: switch set case count:::
Instruction.Switch#setCaseValue(int, int)::: switch set case value:::
Instruction.Switch#setCaseLabel(int, int)::: switch set case label:::
Instruction.Switch#getLength(int)::: switch get length:::
Instruction.Switch#getDefaultLabel()::: switch get default label:::return->intAt
Instruction.Switch#setDefaultLabel(int)::: switch set default label:::setIntAt
Instruction.Switch#intAt(int)::: switch int at:::return->getInt
Instruction.Switch#setIntAt(int, int)::: switch set int at:::setInt
Instruction.Switch#getAlignedPC()::: switch get aligned c:::return
Instruction.Switch#toString()::: switch to string:::s->super->toString->getDefaultLabel->labstr->caseCount->getCaseCount->for->i->return
Instruction.Switch#alignPC(int)::: switch align c:::while->return
Instruction.TableSwitch#getLowCase()::: table switch get low case:::return->intAt
Instruction.TableSwitch#getHighCase()::: table switch get high case:::return->intAt
Instruction.TableSwitch#getCaseCount()::: table switch get case count:::return->intAt->intAt
Instruction.TableSwitch#getCaseValue(int)::: table switch get case value:::return->getLowCase
Instruction.TableSwitch#getCaseLabel(int)::: table switch get case label:::return->intAt
Instruction.TableSwitch#setLowCase(int)::: table switch set low case:::setIntAt
Instruction.TableSwitch#setHighCase(int)::: table switch set high case:::setIntAt
Instruction.TableSwitch#setCaseLabel(int, int)::: table switch set case label:::setIntAt
Instruction.TableSwitch#setCaseCount(int)::: table switch set case count:::getLowCase->setHighCase->getLength
Instruction.TableSwitch#setCaseValue(int, int)::: table switch set case value:::if->throw->new->UnsupportedOperationException->caseCount->getCaseCount->setLowCase->setCaseCount
Instruction.TableSwitch#getLength(int)::: table switch get length:::return
Instruction.LookupSwitch#getCaseCount()::: lookup switch get case count:::return->intAt
Instruction.LookupSwitch#getCaseValue(int)::: lookup switch get case value:::return->intAt
Instruction.LookupSwitch#getCaseLabel(int)::: lookup switch get case label:::return->intAt
Instruction.LookupSwitch#setCaseCount(int)::: lookup switch set case count:::setIntAt->getLength
Instruction.LookupSwitch#setCaseValue(int, int)::: lookup switch set case value:::setIntAt
Instruction.LookupSwitch#setCaseLabel(int, int)::: lookup switch set case label:::setIntAt
Instruction.LookupSwitch#getLength(int)::: lookup switch get length:::return
Instruction#equals(Object):::Two instructions are equal if they have the same bytes.:::return->o->getClass->equals
Instruction#hashCode()::: instruction hash code:::hash->Arrays->hashCode->return
Instruction#equals(Instruction)::: instruction equals:::if->return->if->return->if->return->if->return->for->i->return
Instruction#labstr(int)::: instruction labstr:::if->return->substring->return
Instruction#toString()::: instruction to string:::return->toString
Instruction#toString(ConstantPool.Entry[])::: instruction to string:::s->labstr->if->Integer->toHexString->return->if->bcname->if->return->tag->getCPTag->if->ConstantPool->tagName->idx->getCPIndex->if->stringValue->slt->getLocalSlot->if->lab->getBranchLabel->if->labstr->con->getConstant->if->return
Instruction#getIntAt(int)::: instruction get int at:::return->getInt
Instruction#getShortAt(int)::: instruction get short at:::return->getShort
Instruction#getByteAt(int)::: instruction get byte at:::return->getByte
Instruction#getInt(byte[], int)::: instruction get int:::return->getShort->getShort
Instruction#getShort(byte[], int)::: instruction get short:::return->getByte->getByte
Instruction#getByte(byte[], int)::: instruction get byte:::return
Instruction#setInt(byte[], int, int)::: instruction set int:::setShort->setShort
Instruction#setShort(byte[], int, int)::: instruction set short:::setByte->setByte
Instruction#setByte(byte[], int, int)::: instruction set byte:::
Instruction#isNonstandard(int)::: instruction is nonstandard:::return
Instruction#opLength(int)::: instruction op length:::l->return
Instruction#opWideLength(int)::: instruction op wide length:::l->return
Instruction#isLocalSlotOp(int)::: instruction is local slot op:::return
Instruction#isBranchOp(int)::: instruction is branch op:::return
Instruction#isCPRefOp(int)::: instruction is ref op:::if->return->if->return->if->return->return
Instruction#getCPRefOpTag(int)::: instruction get ref op tag:::if->return->if->return->if->return->return
Instruction#isFieldOp(int)::: instruction is field op:::return
Instruction#isInvokeInitOp(int)::: instruction is invoke init op:::return
Instruction#isSelfLinkerOp(int)::: instruction is self linker op:::return
Instruction#byteName(int)::: instruction byte name:::iname->if->else->if->isSelfLinkerOp->idx->isSuper->if->isAload->if->origBC->if->else->if->isInvokeInitOp->idx->switch->break->break->break->else->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->return
Instruction#def(String, int)::: instruction def:::def
Instruction#def(String, int, int)::: instruction def:::fmts->if->fmt->indexOf->fmt->fmt->indexOf->substring->fmt->fmt->indexOf->substring->for->w
Instruction#opcodeChecker(byte[], ConstantPool.Entry[], Package.Version)::: instruction opcode checker:::i->at->while->opcode->i->getBC->if->message->throw->new->FormatException->e->i->getCPRef->if->tag->i->getCPTag->match->e->tagMatches->if->e->tagMatches->clsVersion->greaterThan->if->message->ConstantPool->tagName->i->toString->throw->new->FormatException->i->next
NativeUnpack#initIDs()::: native unpack init ds:::
NativeUnpack#start(ByteBuffer, long)::: native unpack start:::
NativeUnpack#getNextFile(Object[])::: native unpack get next file:::
NativeUnpack#getUnusedInput()::: native unpack get unused input:::
NativeUnpack#finish()::: native unpack finish:::
NativeUnpack#setOption(String, String)::: native unpack set option:::
NativeUnpack#getOption(String)::: native unpack get option:::
NativeUnpack#currentInstance()::: native unpack current instance:::p200->Utils->getTLGlobals->return
NativeUnpack#getUnpackerPtr()::: native unpack get unpacker ptr:::return
NativeUnpack#readInputFn(ByteBuffer, long)::: native unpack read input fn:::if->return->maxlen->pbuf->capacity->pbuf->position->numread->steps->while->readlen->if->nr->in->read->if->break->pbuf->put->if->fine->if->else->updateProgress->return
NativeUnpack#updateProgress()::: native unpack update progress:::READ_WT->WRITE_WT->readProgress->if->writeProgress->scaledProgress->Math->max->Math->max->percent->Math->round->if->if->_props->setInteger->if->info
NativeUnpack#copyInOption(String)::: native unpack copy in option:::val->_props->getProperty->if->info->if->set->setOption->if->warning
NativeUnpack#run(InputStream, JarOutputStream, ByteBuffer)::: native unpack run:::in0->new->BufferedInputStream->_props->getInteger->modtime->_props->getProperty->equals->_props->getTime->copyInOption->copyInOption->if->copyInOption->updateProgress->for
NativeUnpack#run(InputStream, JarOutputStream)::: native unpack run:::run
NativeUnpack#run(File, JarOutputStream)::: native unpack run:::mappedFile->try->fis->new->FileInputStream->run->catch->finally
NativeUnpack#writeEntry(JarOutputStream, String, long, long, boolean, ByteBuffer, ByteBuffer)::: native unpack write entry:::size->if->throw->new->IOException->crc32->if->fine->if->newSize->while->if->break->new->byteArr->fillp->if->size0->data0->capacity->data0->get->if->size1->data1->capacity->data1->get->while->nr->in->read->if->throw->new->IOException->z->new->ZipEntry->z->setTime->if->z->setMethod->z->setSize->z->setCrc->z->setCompressedSize->else->if->z->setMethod->z->setSize->z->setCompressedSize->crc32->reset->crc32->update->z->crc32->getValue->setCrc->else->z->setMethod->z->setSize->j->putNextEntry->if->j->write->j->closeEntry->if->Utils->zeString->info
Package#reset()::: package reset:::new->ConstantPool.IndexGroup->classes->clear->files->clear
Package#getDefaultClassVersion()::: package get default class version:::return
Package#setHighestClassVersion():::Return the highest version number of all classes,  or 0 if there are no classes.:::if->return->res->foreach->ver->cls->getVersion->if->res->lessThan
Package#getHighestClassVersion()::: package get highest class version:::setHighestClassVersion->return
Package#getClasses()::: package get classes:::return
Package.Class#getPackage()::: class get package:::return
Package.Class#getFields()::: class get fields:::return
Package.Class#getMethods()::: class get methods:::return
Package.Class#getName()::: class get name:::return->thisClass->stringValue
Package.Class#getVersion()::: class get version:::return
Package.Class#compareTo(Class)::: class compare to:::n0->this->getName->n1->that->getName->return->n0->compareTo
Package.Class#getObviousSourceFile()::: class get obvious source file:::return->Package->getName->getObviousSourceFile
Package.Class#transformSourceFile(boolean)::: class transform source file:::olda->getAttribute->if->return->obvious->getObviousSourceFile->ref->new->ArrayList<>->olda->visitRefs->sfName->ref->get->a->if->if->Attribute->find->a->new->byteArr->addContent->else->bytes->new->byteArr->getRefString->f->Fixups->addRefWithBytes->attrSourceFileSpecial->addContent->else->if->obvious->sfName->stringValue->equals->if->attrSourceFileSpecial->new->byteArr->addContent->else->if->if->fine->newAttrs->getAttributes->new->ArrayList<>->where->newAttrs->indexOf->newAttrs->set->setAttributes
Package.Class#minimizeSourceFile()::: class minimize source file:::transformSourceFile
Package.Class#expandSourceFile()::: class expand source file:::transformSourceFile
Package.Class#getCPMap()::: class get map:::return
Package.Class#setCPMap(Entry[])::: class set map:::
Package.Class#hasBootstrapMethods()::: class has bootstrap methods:::return->bootstrapMethods->isEmpty
Package.Class#getBootstrapMethods()::: class get bootstrap methods:::return
Package.Class#getBootstrapMethodMap()::: class get bootstrap method map:::return->hasBootstrapMethods->bootstrapMethods->bootstrapMethods->size->new->BootstrapMethodEntryArr->toArray
Package.Class#setBootstrapMethods(Collection)::: class set bootstrap methods:::new->ArrayList<>
Package.Class#hasInnerClasses()::: class has inner classes:::return
Package.Class#getInnerClasses()::: class get inner classes:::return
Package.Class#setInnerClasses(Collection)::: class set inner classes:::new->ArrayList<>->a->getAttribute->if->attrInnerClassesEmpty->canonicalInstance->addAttribute->else->if->removeAttribute
Package.Class#computeGloballyImpliedICs():::Given a global map of ICs (keyed by thisClass),  compute the subset of its Map.values which are  required to be present in the local InnerClasses  attribute:::cpRefs->new->HashSet<>->innerClassesSaved->visitRefs->ConstantPool->completeReferencesIn->icRefs->new->HashSet<>->foreach->if->continue->while->ic->getGlobalInnerClass->if->break->if->icRefs->add->break->impliedICs->new->ArrayList<>->foreach->if->icRefs->contains->if->fine->impliedICs->add->return
Package.Class#computeICdiff()::: class compute cdiff:::impliedICs->computeGloballyImpliedICs->actualICs->getInnerClasses->if->Collections->emptyList->if->actualICs->isEmpty->return->if->impliedICs->isEmpty->return->center->new->HashSet<>->center->new->HashSet<>->retainAll->impliedICs->addAll->impliedICs->removeAll->return
Package.Class#minimizeLocalICs():::When packing, anticipate the effect of expandLocalICs:::diff->computeICdiff->actualICs->localICs->if->diff->isEmpty->if->actualICs->isEmpty->if->info->else->if->Collections->emptyList->else->setInnerClasses->if->fine
Package.Class#expandLocalICs():::When unpacking, undo the effect of minimizeLocalICs:::localICs->actualICs->changed->if->impliedICs->computeGloballyImpliedICs->if->impliedICs->isEmpty->else->else->if->localICs->isEmpty->else->computeICdiff->actualICs->containsAll->setInnerClasses->return
Package.Class.Member#thisClass()::: member this class:::return
Package.Class.Member#getDescriptor()::: member get descriptor:::return
Package.Class.Member#getName()::: member get name:::return->stringValue
Package.Class.Member#getType()::: member get type:::return->stringValue
Package.Class.Member#getCPMap()::: member get map:::return
Package.Class.Member#visitRefs(int, Collection)::: member visit refs:::if->fine->if->refs->add->refs->add->else->refs->add->super->visitRefs
Package.Class.Member#toString()::: member to string:::return->descriptor->prettyString
Package.Class.Field#getLiteralTag()::: field get literal tag:::return->descriptor->getLiteralTag
Package.Class.Field#compareTo(Member)::: field compare to:::that->return
Package.Class.Method#trimToSize()::: method trim to size:::super->trimToSize->if->code->trimToSize
Package.Class.Method#getArgumentSize()::: method get argument size:::argSize->computeSize->thisSize->Modifier->isStatic->return
Package.Class.Method#compareTo(Member)::: method compare to:::that->return->this->getDescriptor->that->getDescriptor->compareTo
Package.Class.Method#strip(String)::: method strip:::if->equals->if->code->strip->super->strip
Package.Class.Method#visitRefs(int, Collection)::: method visit refs:::super->visitRefs->if->if->refs->getRefString->add->code->visitRefs
Package.Class#trimToSize()::: class trim to size:::super->trimToSize->for->isM->if->innerClasses->trimToSize
Package.Class#strip(String)::: class strip:::if->equals->for->isM->super->strip
Package.Class#visitRefs(int, Collection)::: class visit refs:::if->fine->refs->add->refs->add->refs->Arrays->asList->addAll->for->isM->visitInnerClassRefs->super->visitRefs
Package.Class#visitInnerClassRefs(int, Collection)::: class visit inner class refs:::Package->visitInnerClassRefs
Package.Class#finishReading()::: class finish reading:::trimToSize->maybeChooseFileName
Package.Class#initFile(File)::: class init file:::if->canonicalFileName->newStub->maybeChooseFileName
Package.Class#maybeChooseFileName()::: class maybe choose file name:::if->return->canonName->canonicalFileName->if->equals->if->equals->getRefString->return->if->getRefString
Package.Class#canonicalFileName()::: class canonical file name:::if->return->return->thisClass->stringValue
Package.Class#getFileName(java.io.File)::: class get file name:::name->stringValue->if->name->equals->canonicalFileName->fname->name->replace->return->new->java.io.File
Package.Class#getFileName()::: class get file name:::return->getFileName
Package.Class#toString()::: class to string:::return->thisClass->stringValue
Package#addClass(Class)::: package add class:::added->classes->add->if->c->initFile->addFile
Package#getFiles()::: package get files:::return
Package#getClassStubs()::: package get class stubs:::classStubs->classes->size->new->ArrayList<>->foreach->classStubs->add->return
Package.File#isDirectory()::: file is directory:::return->nameString->endsWith
Package.File#isClassStub()::: file is class stub:::return
Package.File#getStubClass()::: file get stub class:::return
Package.File#isTrivialClassStub()::: file is trivial class stub:::return->isClassStub->name->stringValue->equals
Package.File#equals(Object)::: file equals:::if->o->getClass->return->that->return->equals
Package.File#hashCode()::: file hash code:::return->nameString->hashCode
Package.File#compareTo(File)::: file compare to:::return->compareTo
Package.File#toString()::: file to string:::return->isClassStub->BandStructure->testBit->getFileLength->getFileLength
Package.File#getFileName()::: file get file name:::return->getFileName
Package.File#getFileName(java.io.File)::: file get file name:::lname->fname->lname->replace->return->new->java.io.File
Package.File#addBytes(byte[])::: file add bytes:::addBytes
Package.File#addBytes(byte[], int, int)::: file add bytes:::if->append->size->prepend->append->toByteArray->add->append->reset->append->write
Package.File#getFileLength()::: file get file length:::len->if->return->foreach->append->size->return
Package.File#writeTo(OutputStream)::: file write to:::if->return->foreach->out->write->append->writeTo
Package.File#readFrom(InputStream)::: file read from:::buf->new->byteArr->nr->while->in->read->addBytes
Package.File#getInputStream()::: file get input stream:::in->append->toByteArray->new->ByteArrayInputStream->if->prepend->isEmpty->return->isa->prepend->size->new->ArrayList<>->foreach->isa->new->ByteArrayInputStream->add->isa->add->return->Collections->enumeration->new->SequenceInputStream
Package.File#visitRefs(int, Collection)::: file visit refs:::refs->add
Package#newStub(String)::: package new stub:::stub->new->File->return
Package#fixupFileName(String)::: package fixup file name:::fname->name->replace->if->fname->startsWith->throw->new->IllegalArgumentException->return
Package#addFile(File)::: package add file:::added->files->add
Package#getAllInnerClasses()::: package get all inner classes:::return
Package#setAllInnerClasses(Collection)::: package set all inner classes:::allInnerClasses->clear->allInnerClasses->addAll->allInnerClasses->size->new->HashMap<>->foreach->pic->allInnerClassesByThis->put
Package#getGlobalInnerClass(Entry):::Return a global inner class record for the given thisClass.:::return->allInnerClassesByThis->get
Package.InnerClass#computePredictable()::: inner class compute predictable:::parse->thisClass->stringValue->parseInnerClassName->if->return->pkgOuter->lname->haveName->stringValue->haveOuter->outerClass->stringValue->lpredictable->return
Package.InnerClass#equals(Object)::: inner class equals:::if->o->getClass->return->that->return->eq->eq->eq
Package.InnerClass#eq(Object, Object)::: inner class eq:::return->x->equals
Package.InnerClass#hashCode()::: inner class hash code:::return->thisClass->hashCode
Package.InnerClass#compareTo(InnerClass)::: inner class compare to:::return->compareTo
Package.InnerClass#visitRefs(int, Collection)::: inner class visit refs:::refs->add->if->refs->add->refs->add
Package.InnerClass#toString()::: inner class to string:::return->thisClass->stringValue
Package#visitInnerClassRefs(Collection, int, Collection)::: package visit inner class refs:::if->return->if->refs->getRefString->add->if->innerClasses->size->foreach->c->visitRefs
Package#parseInnerClassName(String)::: package parse inner class name:::pkgOuter->number->name->dollar1->dollar2->nlen->n->length->pkglen->n->length->lastIndexOf->n->length->lastIndexOf->if->return->if->isDigitString->n->substring->else->if->lastIndexOf->isDigitString->n->substring->n->substring->intern->else->n->substring->intern->if->n->substring->intern->else->return->new->StringArr
Package#lastIndexOf(int, int, String, int)::: package last index of:::for->i->return
Package#isDigitString(String, int, int)::: package is digit string:::if->return->for->i->return
Package#getObviousSourceFile(String)::: package get obvious source file:::n->pkglen->n->length->lastIndexOf->n->substring->cutoff->n->length->for->obvious->n->substring->return
Package#getRefString(String)::: package get ref string:::return->ConstantPool->getUtf8Entry
Package#getRefLiteral(Comparable)::: package get ref literal:::return->ConstantPool->getLiteralEntry
Package#stripAttributeKind(String)::: package strip attribute kind:::if->what->toLowerCase->info->switch->strip->strip->strip->strip->break->strip->strip->break->strip->break->stripConstantFields->break
Package#trimToSize()::: package trim to size:::classes->trimToSize->foreach->c->trimToSize->files->trimToSize
Package#strip(String)::: package strip:::foreach->c->strip
Package#stripConstantFields()::: package strip constant fields:::foreach->for->j->iterator->j->hasNext
Package#visitRefs(int, Collection)::: package visit refs:::foreach->c->visitRefs->if->foreach->f->visitRefs->visitInnerClassRefs
Package#reorderFiles(boolean, boolean)::: package reorder files:::if->Collections->sort->stubs->getClassStubs->for->i->files->iterator->i->hasNext->Collections->new->Comparator<>->sort->files->addAll
Package#trimStubs()::: package trim stubs:::for->i->files->files->size->listIterator->i->hasPrevious->if->files->size->getClassStubs->size->classes->size->info
Package#buildGlobalConstantPool(Set)::: package build global constant pool:::if->fine->requiredEntries->getRefString->add->visitRefs->ConstantPool->completeReferencesIn->if->fine->cpAllU->ConstantPool->makeIndex->byTagU->ConstantPool->partitionByTag->for->i->for->i->for->i
Package#ensureAllClassFiles()::: package ensure all class files:::fileSet->new->HashSet<>->foreach->if->fileSet->contains->files->add
Package.Version#toString()::: version to string:::return
Package.Version#equals(Object)::: version equals:::return
Package.Version#intValue()::: version int value:::return
Package.Version#hashCode()::: version hash code:::return
Package.Version#of(int, int)::: version of:::return->new->Version
Package.Version#of(byte[])::: version of:::minor->major->return->new->Version
Package.Version#of(int)::: version of:::minor->major->return->new->Version
Package.Version#makeVersion(PropMap, String)::: version make version:::min->props->getInteger->maj->props->getInteger->return->Version->of
Package.Version#asBytes()::: version as bytes:::bytes->return
Package.Version#compareTo(Version)::: version compare to:::return->this->intValue->that->intValue
Package.Version#lessThan(Version)::: version less than:::return->compareTo
Package.Version#greaterThan(Version)::: version greater than:::return->compareTo
PackageReader.LimitedBuffer#atLimit()::: limited buffer at limit:::z->getBytesServed->return
PackageReader.LimitedBuffer#getBytesServed()::: limited buffer get bytes served:::return
PackageReader.LimitedBuffer#setReadLimit(long)::: limited buffer set read limit:::if->else->getBytesServed
PackageReader.LimitedBuffer#getReadLimit()::: limited buffer get read limit:::if->return->else->return->getBytesServed
PackageReader.LimitedBuffer#read()::: limited buffer read:::if->return->ch->super->read->if->return
PackageReader.LimitedBuffer#read(byte[], int, int)::: limited buffer read:::nr->super->read->if->return
PackageReader.LimitedBuffer#skip(long)::: limited buffer skip:::throw->new->RuntimeException
PackageReader#read()::: package reader read:::ok->try->readFileHeader->readBandHeaders->readConstantPool->readAttrDefs->readInnerClasses->classes->readClasses->readByteCodes->readFiles->all_bands->doneDisbursing->for->i->catch->warning->if->in->getBytesServed->info->if->throw->if->throw->throw->new->Error->finally
PackageReader#readFileHeader()::: package reader read file header:::readArchiveMagic->readArchiveHeader
PackageReader#getMagicInt32()::: package reader get magic int32:::res->for->i->return
PackageReader#readArchiveMagic()::: package reader read archive magic:::in->setReadLimit->archive_magic->expectLength->archive_magic->readFrom->magic->getMagicInt32->if->throw->new->IOException->archive_magic->doneDisbursing
PackageReader#checkArchiveVersion()::: package reader check archive version:::versionFound->foreach->new->Package.VersionArr->if->packageVersion->equals->break->if->expVer->JAVA8_PACKAGE_VERSION->toString->JAVA7_PACKAGE_VERSION->toString->JAVA6_PACKAGE_VERSION->toString->JAVA5_PACKAGE_VERSION->toString->throw->packageVersion->toString->new->IOException
PackageReader#readArchiveHeader()::: package reader read archive header:::archive_header_0->expectLength->archive_header_0->readFrom->minver->archive_header_0->getInt->majver->archive_header_0->getInt->of->checkArchiveVersion->this->initHighestClassVersion->archive_header_0->getInt->archive_header_0->doneDisbursing->haveSpecial->testBit->haveFiles->testBit->haveNumbers->testBit->haveCPExtra->testBit->initAttrIndexLimit->archive_header_S->expectLength->archive_header_S->readFrom->if->sizeHi->archive_header_S->getInt->sizeLo->archive_header_S->getInt->in->setReadLimit->else->in->setReadLimit->archive_header_S->doneDisbursing->in->getBytesServed->remainingHeaders->if->if->if->if->archive_header_1->expectLength->archive_header_1->readFrom->if->archive_header_1->getInt->archive_header_1->getInt->archive_header_1->getInt->else->if->band_headers->archive_header_1->getInt->expectLength->archive_header_1->getInt->else->band_headers->expectLength->readConstantPoolCounts->archive_header_1->getInt->archive_header_1->getInt->archive_header_1->getInt->of->archive_header_1->getInt->archive_header_1->doneDisbursing->if->testBit
PackageReader#readBandHeaders()::: package reader read band headers:::band_headers->readFrom->band_headers->length->new->byteArr->for->i->band_headers->doneDisbursing
PackageReader#readConstantPoolCounts(boolean, boolean)::: package reader read constant pool counts:::for->k
PackageReader#getCPIndex(byte)::: package reader get index:::return->getIndexByTag
PackageReader#initCPIndex(byte, Entry[])::: package reader init index:::if->for->i->index->ConstantPool->ConstantPool->tagName->makeIndex->if->fine->initIndexByTag->return
PackageReader#checkLegacy(String)::: package reader check legacy:::if->packageVersion->lessThan->throw->new->RuntimeException
PackageReader#readConstantPool()::: package reader read constant pool:::if->info->for->k->cp_bands->doneDisbursing->if->for->tag->setBandIndexes
PackageReader#readUtf8Bands(Entry[])::: package reader read utf8 bands:::len->if->return->SUFFIX_SKIP_1->PREFIX_SKIP_2->cp_Utf8_prefix->Math->max->expectLength->cp_Utf8_prefix->readFrom->cp_Utf8_suffix->Math->max->expectLength->cp_Utf8_suffix->readFrom->suffixChars->new->charArrs->bigSuffixCount->cp_Utf8_chars->cp_Utf8_suffix->getIntTotal->expectLength->cp_Utf8_chars->readFrom->for->i->cp_Utf8_chars->doneDisbursing->maxChars->cp_Utf8_big_suffix->expectLength->cp_Utf8_big_suffix->readFrom->cp_Utf8_suffix->resetForSecondPass->for->i->buf->new->charArr->cp_Utf8_suffix->resetForSecondPass->cp_Utf8_big_suffix->resetForSecondPass->for->i->cp_Utf8_big_chars->doneDisbursing->cp_Utf8_prefix->resetForSecondPass->cp_Utf8_suffix->resetForSecondPass->cp_Utf8_big_suffix->resetForSecondPass->for->i->cp_Utf8_prefix->doneDisbursing->cp_Utf8_suffix->doneDisbursing->cp_Utf8_big_suffix->doneDisbursing
PackageReader#readSignatureBands(Entry[])::: package reader read signature bands:::cp_Signature_form->expectLength->cp_Signature_form->readFrom->cp_Signature_form->getCPIndex->setIndex->numSigClasses->new->intArr->for->i->cp_Signature_form->resetForSecondPass->cp_Signature_classes->getIntTotal->expectLength->cp_Signature_classes->readFrom->cp_Signature_classes->getCPIndex->setIndex->new->HashMap<>->for->i->cp_Signature_form->doneDisbursing->cp_Signature_classes->doneDisbursing
PackageReader#readMemberRefs(byte, Entry[], CPRefBand, CPRefBand)::: package reader read member refs:::cp_class->expectLength->cp_class->readFrom->cp_class->getCPIndex->setIndex->cp_desc->expectLength->cp_desc->readFrom->cp_desc->getCPIndex->setIndex->for->i->cp_class->doneDisbursing->cp_desc->doneDisbursing
PackageReader#readFiles()::: package reader read files:::if->info->file_name->expectLength->file_size_lo->expectLength->options->haveSizeHi->testBit->haveModtime->testBit->haveOptions->testBit->if->file_size_hi->expectLength->if->file_modtime->expectLength->if->file_options->expectLength->file_name->readFrom->file_size_hi->readFrom->file_size_lo->readFrom->file_modtime->readFrom->file_options->readFrom->file_bits->setInputStreamFrom->nextClass->pkg->getClasses->iterator->totalFileLength->fileLengths->new->longArr->for->i->buf->new->byteArr->for->i->while->nextClass->hasNext->cls->nextClass->next->cls->initFile->file_name->doneDisbursing->file_size_hi->doneDisbursing->file_size_lo->doneDisbursing->file_modtime->doneDisbursing->file_options->doneDisbursing->file_bits->doneDisbursing->file_bands->doneDisbursing->if->in->atLimit->throw->in->getBytesServed->new->RuntimeException
PackageReader#readAttrDefs()::: package reader read attr defs:::attr_definition_headers->expectLength->attr_definition_name->expectLength->attr_definition_layout->expectLength->attr_definition_headers->readFrom->attr_definition_name->readFrom->attr_definition_layout->readFrom->try->dump->getDumpStream->new->PrintStream->for->i->catch->finally->attr_definition_headers->doneDisbursing->attr_definition_name->doneDisbursing->attr_definition_layout->doneDisbursing->makeNewAttributeBands->attr_definition_bands->doneDisbursing
PackageReader#readInnerClasses()::: package reader read inner classes:::ic_this_class->expectLength->ic_this_class->readFrom->ic_flags->expectLength->ic_flags->readFrom->longICCount->for->i->ic_outer_class->expectLength->ic_outer_class->readFrom->ic_name->expectLength->ic_name->readFrom->ic_flags->resetForSecondPass->icList->new->ArrayList<>->for->i->ic_flags->doneDisbursing->ic_this_class->doneDisbursing->ic_outer_class->doneDisbursing->ic_name->doneDisbursing->pkg->setAllInnerClasses->ic_bands->doneDisbursing
PackageReader#readLocalInnerClasses(Class)::: package reader read local inner classes:::nc->class_InnerClasses_N->getInt->localICs->new->ArrayList<>->for->i->cls->setInnerClasses
PackageReader#readClasses()::: package reader read classes:::classes->new->ClassArr->if->info->class_this->expectLength->class_super->expectLength->class_interface_count->expectLength->class_this->readFrom->class_super->readFrom->class_interface_count->readFrom->class_interface->class_interface_count->getIntTotal->expectLength->class_interface->readFrom->for->i->class_this->doneDisbursing->class_super->doneDisbursing->class_interface_count->doneDisbursing->class_interface->doneDisbursing->readMembers->Arrays->asList->countAndReadAttrs->pkg->trimToSize->readCodeHeaders->return
PackageReader#getOutputIndex(Entry)::: package reader get output index:::k->untypedIndexOf->if->return->if->se->utf8Signatures->get->return->untypedIndexOf->return
PackageReader#reconstructClass(Class)::: package reader reconstruct class:::if->fine->retroVersion->cls->getAttribute->if->cls->removeAttribute->parseClassFileVersionAttr->else->cls->expandSourceFile->cls->reconstructLocalCPMap->setCPMap
PackageReader#reconstructLocalCPMap(Class)::: package reader reconstruct local map:::ldcRefs->ldcRefMap->get->cpRefs->new->HashSet<>->cls->visitRefs->bsms->new->ArrayList<>->ConstantPool->completeReferencesIn->if->bsms->isEmpty->cls->canonicalInstance->addAttribute->cpRefs->Package->getRefString->add->Collections->sort->cls->setBootstrapMethods->changed->cls->expandLocalICs->if->if->cls->visitInnerClassRefs->else->cpRefs->clear->cls->visitRefs->ConstantPool->completeReferencesIn->numDoubles->foreach->if->e->isDoubleWord->cpMap->cpRefs->size->new->EntryArr->fillp->if->foreach->cpRefs->removeAll->wideRefs->narrowLimit->foreach->Arrays->sort->Arrays->sort->if->fine->for->i->fine->revp->for->i->return
PackageReader#readMembers(Class[])::: package reader read members:::class_field_count->expectLength->class_method_count->expectLength->class_field_count->readFrom->class_method_count->readFrom->totalNF->class_field_count->getIntTotal->totalNM->class_method_count->getIntTotal->field_descr->expectLength->method_descr->expectLength->if->fine->fields->new->ArrayList<>->field_descr->readFrom->for->i->class_field_count->doneDisbursing->field_descr->doneDisbursing->countAndReadAttrs->methods->new->ArrayList<>->method_descr->readFrom->for->i->class_method_count->doneDisbursing->method_descr->doneDisbursing->countAndReadAttrs->buildCodeAttrs
PackageReader#buildCodeAttrs(List)::: package reader build code attrs:::codes->methods->size->new->ArrayList<>->foreach->if->m->getAttribute->new->Code->codes->add->a->codes->size->new->CodeArr->codes->toArray->return
PackageReader#readCodeHeaders()::: package reader read code headers:::attrsOK->testBit->code_headers->expectLength->code_headers->readFrom->longCodes->new->ArrayList<>->for->i->code_headers->doneDisbursing->code_max_stack->longCodes->size->expectLength->code_max_na_locals->longCodes->size->expectLength->code_handler_count->longCodes->size->expectLength->code_max_stack->readFrom->code_max_na_locals->readFrom->code_handler_count->readFrom->foreach->c->code_max_stack->getInt->setMaxStack->c->code_max_na_locals->getInt->setMaxNALocals->c->code_handler_count->getInt->setHandlerCount->code_max_stack->doneDisbursing->code_max_na_locals->doneDisbursing->code_handler_count->doneDisbursing->readCodeHandlers->if->Arrays->asList->else->countAttrs
PackageReader#readCodeHandlers()::: package reader read code handlers:::nh->for->i->code_handler_bands->for->i->for->i->for->i
PackageReader#fixupCodeHandlers()::: package reader fixup code handlers:::for->i
PackageReader#countAndReadAttrs(int, Collection)::: package reader count and read attrs:::countAttrs->readAttrs
PackageReader#countAttrs(int, Collection)::: package reader count attrs:::xxx_attr_bands->flagMask->if->Attribute->contextName->holders->size->fine->defList->attrDefs->get->defs->defList->size->new->Attribute.LayoutArr->defList->toArray->xxx_flags_hi->getAttrBand->xxx_flags_lo->getAttrBand->xxx_attr_count->getAttrBand->xxx_attr_indexes->getAttrBand->xxx_attr_calls->getAttrBand->overflowMask->overflowHolderCount->haveLongFlags->haveFlagsHi->xxx_flags_hi->holders->size->expectLength->xxx_flags_hi->readFrom->xxx_flags_lo->holders->size->expectLength->xxx_flags_lo->readFrom->foreach->flags->xxx_flags_lo->getInt->if->xxx_attr_count->expectLength->xxx_attr_count->readFrom->xxx_attr_indexes->xxx_attr_count->getIntTotal->expectLength->xxx_attr_indexes->readFrom->totalCounts->new->intArr->foreach->attrBits->if->xxx_flags_hi->getInt->if->continue->noa->overflowBit->if->xxx_attr_count->getInt->nfa->bits->for->ai->ha->new->ArrayList<>->for->ai->for->xxx_flags_hi->doneDisbursing->xxx_flags_lo->doneDisbursing->xxx_attr_count->doneDisbursing->xxx_attr_indexes->doneDisbursing->callCounts->for->predef->xxx_attr_calls->expectLength->xxx_attr_calls->readFrom->for->predef->xxx_attr_calls->doneDisbursing
PackageReader#badAttrIndex(int, int)::: package reader bad attr index:::throw->new->IOException
PackageReader#readAttrs(int, Collection)::: package reader read attrs:::sawDefs->new->HashSet<>->buf->new->ByteArrayOutputStream->foreach->if->continue->for->j->listIterator->j->hasNext->foreach->if->continue->ab->attrBandTable->get->for->j->if->class_InnerClasses_N->doneDisbursing->class_InnerClasses_RC->doneDisbursing->class_InnerClasses_F->doneDisbursing->class_InnerClasses_outer_RCN->doneDisbursing->class_InnerClasses_name_RUN->doneDisbursing->xxx_attr_bands->for->i->xxx_attr_bands->size->xxx_attr_bands->doneDisbursing
PackageReader#readAttrBands(Attribute.Layout.Element[], int, int[], Band[])::: package reader read attr bands:::for->i
PackageReader#readByteCodes()::: package reader read byte codes:::bc_codes->setInputStreamFrom->readByteCodeOps->bc_codes->doneDisbursing->operand_bands->for->i->bc_escbyte->bc_escsize->getIntTotal->expectLength->bc_escbyte->readFrom->expandByteCodeOps->bc_case_count->doneDisbursing->for->i->bc_escbyte->doneDisbursing->bc_bands->doneDisbursing->readAttrs->fixupCodeHandlers->code_bands->doneDisbursing->class_bands->doneDisbursing
PackageReader#readByteCodeOps()::: package reader read byte code ops:::buf->new->byteArr->allSwitchOps->new->ArrayList<>->for->k->bc_case_count->readFrom->foreach->bc->i->intValue->caseCount->bc_case_count->getInt->bc_label->expectMoreLength->bc_case_value->expectMoreLength->bc_case_count->resetForSecondPass
PackageReader#expandByteCodeOps()::: package reader expand byte code ops:::buf->new->byteArr->insnMap->new->intArr->labels->new->intArr->fixupBuf->new->Fixups->for->k
PackageWriter#write()::: package writer write:::ok->try->if->info->setup->if->info->writeConstantPool->writeFiles->writeAttrDefs->writeInnerClasses->writeClassesAndByteCodes->writeAttrCounts->if->printCodeHist->if->info->all_bands->chooseBandCodings->writeFileHeader->writeAllBandsTo->catch->warning->if->finalOut->close->if->throw->if->throw->throw->new->Error->finally
PackageWriter#setup()::: package writer setup:::new->HashSet<>->setArchiveOptions->trimClassAttributes->collectAttributeLayouts->pkg->buildGlobalConstantPool->setBandIndexes->makeNewAttributeBands->collectInnerClasses
PackageWriter#chooseDefaultPackageVersion()::: package writer choose default package version:::if->if->info->return->highV->getHighestClassVersion->if->highV->lessThan->else->if->highV->equals->highV->equals->haveExtraTags->else->if->highV->equals->else->if->info
PackageWriter#checkVersion()::: package writer check version:::if->packageVersion->lessThan->if->testBit->throw->new->IOException->if->testBit->throw->Integer->toHexString->new->IOException
PackageWriter#setArchiveOptions()::: package writer set archive options:::minModtime->maxModtime->minOptions->maxOptions->foreach->modtime->options->if->else->if->if->if->if->if->testBit->if->testBit->if->verCounts->new->HashMap<>->bestCount->bestVersion->foreach->version->cls->getVersion->var->verCounts->get->if->new->intArr->verCounts->put->count->if->verCounts->clear->if->if->info->if->pkg->getHighestClassVersion->info->foreach->if->cls->getVersion->equals->a->cls->getVersion->makeClassFileVersionAttr->if->cls->getVersion->fine->cls->addAttribute->foreach->len->file->getFileLength->if->if->file->getFileName->info->break->cost0->cost1->foreach->foreach->cls->getMethods->if->if->attributeSize->else->if->shortCodeHeader->if->if->Integer->toBinaryString->info
PackageWriter#writeFileHeader()::: package writer write file header:::chooseDefaultPackageVersion->writeArchiveMagic->writeArchiveHeader
PackageWriter#putMagicInt32(int)::: package writer put magic int32:::res->for->i
PackageWriter#writeArchiveMagic()::: package writer write archive magic:::putMagicInt32
PackageWriter#writeArchiveHeader()::: package writer write archive header:::headerSizeForDebug->haveSpecial->testBit->if->band_headers->length->if->if->haveFiles->testBit->if->if->if->haveNumbers->testBit->if->haveNumbers->if->if->haveCPExtra->testBit->if->haveExtraTags->if->if->checkVersion->archive_header_0->putInt->archive_header_0->putInt->if->info->archive_header_0->putInt->DUMMY->if->archive_header_S->putInt->archive_header_S->putInt->if->archive_header_1->putInt->archive_header_1->putInt->archive_header_1->size->putInt->else->if->archive_header_1->band_headers->length->putInt->archive_header_1->putInt->else->writeConstantPoolCounts->archive_header_1->pkg->getAllInnerClasses->size->putInt->archive_header_1->putInt->archive_header_1->putInt->archive_header_1->size->putInt->all_bands->outputSize->archive_magic->outputSize->archive_header_0->outputSize->archive_header_S->outputSize->if->archiveSizeHi->archiveSizeLo->archive_header_S->patchValue->archive_header_S->patchValue->zeroLen->UNSIGNED5->getLength->UNSIGNED5->getLength->UNSIGNED5->getLength->if->fine
PackageWriter#writeConstantPoolCounts(boolean, boolean)::: package writer write constant pool counts:::foreach->count->getIndexByTag->size->switch->if->break->if->continue->break->if->continue->break->archive_header_1->putInt
PackageWriter#getCPIndex(byte)::: package writer get index:::return->getIndexByTag
PackageWriter#writeConstantPool()::: package writer write constant pool:::cp->if->info->foreach->index->cp->getIndexByTag->cpMap->if->ConstantPool->tagName->info->if->try->ps->getDumpStream->new->PrintStream->printArrayTo->catch->finally->switch->writeUtf8Bands->break->for->i->break->for->i->break->for->i->break->for->i->break->for->i->break->for->i->break->writeSignatureBands->break->for->i->break->writeMemberRefs->break->writeMemberRefs->break->writeMemberRefs->break->for->i->break->for->i->break->for->i->break->for->i->break->throw->new->AssertionError->if->for->tag
PackageWriter#writeUtf8Bands(Entry[])::: package writer write utf8 bands:::if->return->SUFFIX_SKIP_1->PREFIX_SKIP_2->chars->new->charArrs->for->i->prefixes->new->intArr->prevChars->for->i->for->i->if->normCharCount->cp_Utf8_chars->length->packCharCount->cp_Utf8_big_chars->length->charCount->info
PackageWriter#tryAlternateEncoding(int, int, char[], int)::: package writer try alternate encoding:::suffix->cvals->new->intArr->for->n->cc->getCodingChooser->bigRegular->bandName->sizes->BYTE_SIZE->ZIP_SIZE->if->fine->special->cc->choose->charRegular->if->fine->if->specialZipSize->normalSizes->cc->computeSize->normalZipSize->minWin->Math->max->if->fine->if->big->cp_Utf8_big_chars->newIntBand->big->initializeValues->return->return
PackageWriter#writeSignatureBands(Entry[])::: package writer write signature bands:::for->i
PackageWriter#writeMemberRefs(byte, Entry[], CPRefBand, CPRefBand)::: package writer write member refs:::for->i
PackageWriter#writeFiles()::: package writer write files:::numFiles->size->if->return->options->haveSizeHi->testBit->haveModtime->testBit->haveOptions->testBit->if->foreach->if->file->isClassStub->break->if->isEmpty->foreach->file_name->putRef->len->file->getFileLength->file_size_lo->putInt->if->file_size_hi->putInt->if->file_modtime->putInt->if->file_options->putInt->file->file_bits->collectorStream->writeTo->if->stringValue->fine->if->info
PackageWriter#collectAttributeLayouts()::: package writer collect attribute layouts:::new->intArr->new->FixedList<>->for->i->foreach->visitAttributeLayoutsIn->foreach->cls->getFields->visitAttributeLayoutsIn->foreach->cls->getMethods->visitAttributeLayoutsIn->if->visitAttributeLayoutsIn->for->i->initAttrIndexLimit->for->i->new->HashMap<>->new->intArrs->for->i
PackageWriter#visitAttributeLayoutsIn(int, Attribute.Holder)::: package writer visit attribute layouts in:::foreach->h->getAttributes->def->a->layout->defMap->allLayouts->get->count->defMap->get->if->defMap->new->intArr->put->if
PackageWriter#writeAttrDefs()::: package writer write attr defs:::defList->new->ArrayList<>->for->i->numAttrDefs->defList->size->defs->new->ObjectArrs->defList->toArray->Arrays->new->Comparator<>->sort->new->Attribute.LayoutArr->try->dump->getDumpStream->new->PrintStream->indexForDebug->Arrays->copyOf->for->i->catch->finally
PackageWriter#writeAttrCounts()::: package writer write attr counts:::for->ctype
PackageWriter#trimClassAttributes()::: package writer trim class attributes:::foreach->cls->minimizeSourceFile
PackageWriter#collectInnerClasses()::: package writer collect inner classes:::allICMap->new->HashMap<>->foreach->if->cls->hasInnerClasses->continue->foreach->cls->getInnerClasses->pic->allICMap->put->if->pic->equals->allICMap->put->allICs->allICMap->size->new->InnerClassArr->allICMap->values->toArray->Arrays->sort->pkg->Arrays->asList->setAllInnerClasses->foreach->cls->minimizeLocalICs
PackageWriter#writeInnerClasses()::: package writer write inner classes:::foreach->pkg->getAllInnerClasses->flags->if->ic_this_class->putRef->ic_flags->putInt->if->ic_outer_class->putRef->ic_name->putRef
PackageWriter#writeLocalInnerClasses(Class):::If there are any extra InnerClasses entries to write which are  not already implied by the global table, put them into a  local attribute:::localICs->cls->getInnerClasses->class_InnerClasses_N->localICs->size->putInt->foreach->class_InnerClasses_RC->putRef->if->ic->pkg->getGlobalInnerClass->equals->class_InnerClasses_F->putInt->else->flags->if->class_InnerClasses_F->putInt->class_InnerClasses_outer_RCN->putRef->class_InnerClasses_name_RUN->putRef
PackageWriter#writeClassesAndByteCodes()::: package writer write classes and byte codes:::classes->size->new->ClassArr->toArray->if->info->nwritten->for->i
PackageWriter#writeMembers(Class)::: package writer write members:::fields->cls->getFields->class_field_count->fields->size->putInt->foreach->field_descr->f->getDescriptor->putRef->writeAttrs->methods->cls->getMethods->class_method_count->methods->size->putInt->foreach->method_descr->m->getDescriptor->putRef->writeAttrs->if->writeCodeHeader->writeByteCodes
PackageWriter#writeCodeHeader(Code)::: package writer write code header:::attrsOK->testBit->na->c->attributeSize->sc->shortCodeHeader->if->if->siglen->c->getMethod->getArgumentSize->c->getHandlerCount->fine->code_headers->putByte->if->code_max_stack->c->getMaxStack->putInt->code_max_na_locals->c->getMaxNALocals->putInt->code_handler_count->c->getHandlerCount->putInt->else->writeCodeHandlers->if->c->thisClass->writeAttrs
PackageWriter#writeCodeHandlers(Code)::: package writer write code handlers:::sum->del->for->j->jmax->c->getHandlerCount
PackageWriter#writeAttrs(int, Attribute.Holder, Class)::: package writer write attrs:::xxx_attr_bands->xxx_flags_hi->getAttrBand->xxx_flags_lo->getAttrBand->haveLongFlags->haveFlagsHi->if->xxx_flags_lo->putInt->if->xxx_flags_hi->putInt->return->if->Integer->toHexString->fine->flagMask->flagsToAdd->overflowCount->foreach->def->a->layout->index->attrIndexTable->get->intValue->if->fine->if->testBit->if->Long->toHexString->fine->else->if->fine->xxx_attr_indexes->getAttrBand->xxx_attr_indexes->putInt->if->if->writeLocalInnerClasses->continue->continue->ab->attrBandTable->get->bc->backCountTable->get->if->fine->isCV->if->setConstantValueIndex->a->a->bytes->a->size->new->Attribute.ValueStream->parse->if->setConstantValueIndex->if->xxx_attr_count->getAttrBand->xxx_attr_count->putInt->xxx_flags_lo->putInt->if->xxx_flags_hi->putInt->else
PackageWriter#beginCode(Code)::: package writer begin code:::thisClass->c->getCPMap
PackageWriter#endCode()::: package writer end code:::
PackageWriter#initOpVariant(Instruction, Entry)::: package writer init op variant:::if->i->getBC->return->ref->i->getCPRef->if->stringValue->equals->return->refClass->if->return->if->return->if->return->return
PackageWriter#selfOpVariant(Instruction)::: package writer self op variant:::bc->i->getBC->if->return->ref->i->getCPRef->if->ref->tagEquals->return->refClass->self_bc->if->return->if->return->return
PackageWriter#writeByteCodes(Code)::: package writer write byte codes:::beginCode->cp->prevAload->newClass->for->i->code->instructionAt->i->next->bc_codes->putByte->endCode
PackageWriter#printCodeHist()::: package writer print code hist:::hist->new->StringArr->totalBytes->for->bc->for->bc->Arrays->sort->println->for->i->for->tag
PackerImpl#properties():::Get the set of options for the pack and unpack engines.:::return
PackerImpl#pack(JarFile, OutputStream):::Takes a JarFile and converts into a pack-stream:::try->set->if->props->getProperty->equals->Utils->copyJarFile->else->new->DoPack->run->catch->finally->set->in->close
PackerImpl#pack(JarInputStream, OutputStream):::Takes a JarInputStream and converts into a pack-stream:::try->set->if->props->getProperty->equals->Utils->copyJarFile->else->new->DoPack->run->catch->finally->set->in->close
PackerImpl.DoPack#makeNextPackage()::: do pack make next package:::pkg->reset
PackerImpl.DoPack.InFile#isClassFile()::: in file is class file:::if->name->endsWith->name->endsWith->return->for->prefix->return
PackerImpl.DoPack.InFile#isMetaInfFile()::: in file is meta inf file:::return->name->startsWith->name->startsWith
PackerImpl.DoPack.InFile#mustProcess()::: in file must process:::return->isMetaInfFile->isClassFile
PackerImpl.DoPack.InFile#getInputLength()::: in file get input length:::len->je->getSize->f->length->return->Math->max->name->length
PackerImpl.DoPack.InFile#getModtime(long)::: in file get modtime:::seconds->if->return->else->warning->return
PackerImpl.DoPack.InFile#copyTo(Package.File)::: in file copy to:::if
PackerImpl.DoPack.InFile#getInputStream()::: in file get input stream:::if->return->jf->getInputStream->else->return->new->FileInputStream
PackerImpl.DoPack.InFile#toString()::: in file to string:::return
PackerImpl.DoPack#noteRead(InFile)::: do pack note read:::if->fine->if->info
PackerImpl.DoPack#run(JarInputStream, OutputStream)::: do pack run:::if->in->getManifest->tmp->new->ByteArrayOutputStream->in->getManifest->write->tmpIn->tmp->toByteArray->new->ByteArrayInputStream->pkg->readFile->addFile->for->je->in->getNextJarEntry->flushAll
PackerImpl.DoPack#run(JarFile, OutputStream)::: do pack run:::inFiles->scanJar->if->inFiles->size->info->numDone->foreach->name->inflen->inFile->isMetaInfFile->inFile->getInputLength->if->filesDone->segsDone->filesToDo->inFiles->size->segsToDo->if->fine->Math->ceil->flushPartial->strm->inFile->getInputStream->if->fine->file->if->inFile->mustProcess->readClass->if->strm->close->inFile->getInputStream->if->readFile->pkg->addFile->inFile->copyTo->strm->close->noteRead->flushAll
PackerImpl.DoPack#readClass(String, InputStream)::: do pack read class:::cls->pkg->new->Class->new->BufferedInputStream->reader->new->ClassReader->reader->setAttrDefs->reader->setAttrCommands->try->reader->read->catch->message->if->ee->if->equals->ee->toString->info->warning->return->else->if->ce->if->classFormatCommand->equals->ce->toString->info->warning->return->throw->finally->pkg->addClass->return
PackerImpl.DoPack#readFile(String, InputStream)::: do pack read file:::file->pkg->new->File->file->readFrom->if->file->isDirectory->file->getFileLength->throw->file->getFileName->new->IllegalArgumentException->return
PackerImpl.DoPack#flushPartial(OutputStream, int)::: do pack flush partial:::if->isEmpty->isEmpty->return->Math->max->flushPackage->props->setInteger->makeNextPackage
PackerImpl.DoPack#flushAll(OutputStream)::: do pack flush all:::props->setInteger->flushPackage->out->flush->props->setInteger->if->info
PackerImpl.DoPack#flushPackage(OutputStream, int):::Write all information in the current package segment  to the output stream.:::nfiles->size->if->if->fine->stripDirectories->pkg->reorderFiles->else->res->pkg->trimStubs->if->props->getBoolean->pkg->stripAttributeKind->if->props->getBoolean->pkg->stripAttributeKind->if->props->getBoolean->pkg->stripAttributeKind->if->props->getBoolean->pkg->stripAttributeKind->if->props->getBoolean->pkg->stripAttributeKind->pw->new->PackageWriter->pw->write->out->flush->if->outSize->inSize->info
PackerImpl.DoPack#scanJar(JarFile)::: do pack scan jar:::inFiles->new->ArrayList<>->try->foreach->Collections->jf->entries->list->inFile->new->InFile->inFiles->add->catch->throw->ise->getLocalizedMessage->new->IOException->finally->return
PopulationCoding#setFavoredValues(int[], int)::: population coding set favored values:::if->setL
PopulationCoding#setFavoredValues(int[])::: population coding set favored values:::lfVlen->setFavoredValues
PopulationCoding#setHistogram(Histogram)::: population coding set histogram:::
PopulationCoding#setL(int)::: population coding set l:::if->fitTokenCoding
PopulationCoding#fitTokenCoding(int, int)::: population coding fit token coding:::if->return->longest->setL->if->longest->canRepresentUnsigned->return->tc->for->shorter->return
PopulationCoding#setFavoredCoding(CodingMethod)::: population coding set favored coding:::
PopulationCoding#setTokenCoding(CodingMethod)::: population coding set token coding:::if->tc->if->tc->L->fitTokenCoding->tc->L
PopulationCoding#setUnfavoredCoding(CodingMethod)::: population coding set unfavored coding:::
PopulationCoding#favoredValueMaxLength()::: population coding favored value max length:::if->return->else->return->setL->umax
PopulationCoding#resortFavoredValues()::: population coding resort favored values:::tc->BandStructure->realloc->fillp->for->n->tc->B
PopulationCoding#getToken(int)::: population coding get token:::if->makeSymtab->pos->Arrays->binarySearch->if->if->return->else->return
PopulationCoding#encodeValues(int[], int, int)::: population coding encode values:::tokens->new->intArr->nuv->for->i->unfavoredValues->new->intArr->for->i->return->new->intArrs
PopulationCoding#makeSymtab()::: population coding make symtab:::lsymtab->new->longArr->for->token->Arrays->sort->return
PopulationCoding#getTailCoding(CodingMethod)::: population coding get tail coding:::while->return
PopulationCoding#writeArrayTo(OutputStream, int[], int, int)::: population coding write array to:::vals->encodeValues->writeSequencesTo
PopulationCoding#writeSequencesTo(OutputStream, int[], int[])::: population coding write sequences to:::favoredCoding->writeArrayTo->getTailCoding->computeSentinelValue->writeTo->tokenCoding->writeArrayTo->if->unfavoredCoding->writeArrayTo
PopulationCoding#computeSentinelValue()::: population coding compute sentinel value:::fc->getTailCoding->if->fc->isDelta->return->else->min->last->for->i->endVal->if->fc->getLength->fc->getLength->return->else->return
PopulationCoding#readArrayFrom(InputStream, int[], int, int)::: population coding read array from:::readFavoredValuesFrom->setFavoredValues->tokenCoding->readArrayFrom->headp->tailp->uVlen->for->i->uValues->new->intArr->if->unfavoredCoding->readArrayFrom->for->i
PopulationCoding#readFavoredValuesFrom(InputStream, int)::: population coding read favored values from:::lfValues->new->intArr->uniqueValuesForDebug->fillp->min->last->fcm->while->ac->len->while->BandStructure->realloc->newFillp->readArrayFrom->while->val->moreCentral->fc->if->fc->isDelta->for->state->else->for->return->BandStructure->realloc
PopulationCoding#moreCentral(int, int)::: population coding more central:::kx->ky->xy->return
PopulationCoding#moreCentralSlow(int, int)::: population coding more central slow:::ax->if->if->return->ay->if->if->return->if->return->if->return->return
PopulationCoding#getMetaCoding(Coding)::: population coding get meta coding:::K->LCoded->if->tc->if->tc->B->else->if->for->i->tokenDflt->if->fitTokenCoding->FDef->UDef->TDef->TDefL->bytes->new->ByteArrayOutputStream->bytes->write->try->if->bytes->favoredCoding->getMetaCoding->write->if->bytes->tokenCoding->getMetaCoding->write->if->bytes->unfavoredCoding->getMetaCoding->write->catch->throw->new->RuntimeException->finally->return->bytes->toByteArray
PopulationCoding#parseMetaCoding(byte[], int, Coding, CodingMethod[])::: population coding parse meta coding:::op->if->return->FDef->UDef->TDefL->TDef->L->FCode->TCode->UCode->if->BandStructure->parseMetaCoding->if->BandStructure->parseMetaCoding->if->BandStructure->parseMetaCoding->pop->new->PopulationCoding->return
PopulationCoding#keyString(CodingMethod)::: population coding key string:::if->return->keyString->if->return->return->m->toString
PopulationCoding#toString()::: population coding to string:::p200->Utils->currentPropMap->verbose->p200->getBoolean->res->new->StringBuilder->res->append->append->append->if->res->append->for->i->res->append->computeSentinelValue->append->res->append->res->append->keyString->append->res->append->keyString->append->res->append->keyString->append->res->append->return->res->toString
PropMap#put(String, String)::: prop map put:::oldValue->theMap->put->return
PropMap#getPropertyValue(String, String)::: prop map get property value:::pa->System->getProperty->s->AccessController->doPrivileged->return
PropMap#prefixMap(String)::: prop map prefix map:::len->prefix->length->if->return->nextch->prefix->charAt->limit->prefix->substring->return->subMap
PropMap#getProperty(String)::: prop map get property:::return->get
PropMap#getProperty(String, String)::: prop map get property:::val->getProperty->if->return->return
PropMap#setProperty(String, String)::: prop map set property:::return->put
PropMap#getProperties(String)::: prop map get properties:::values->prefixMap->values->res->values->size->new->ArrayList<>->res->addAll->while->res->remove->return
PropMap#toBoolean(String)::: prop map to boolean:::return->Boolean->valueOf->booleanValue
PropMap#getBoolean(String)::: prop map get boolean:::return->getProperty->toBoolean
PropMap#setBoolean(String, boolean)::: prop map set boolean:::return->String->valueOf->setProperty->toBoolean
PropMap#toInteger(String)::: prop map to integer:::return->toInteger
PropMap#toInteger(String, int)::: prop map to integer:::if->return->if->equals->return->if->equals->return->return->Integer->parseInt
PropMap#getInteger(String, int)::: prop map get integer:::return->getProperty->toInteger
PropMap#getInteger(String)::: prop map get integer:::return->getProperty->toInteger
PropMap#setInteger(String, int)::: prop map set integer:::return->String->valueOf->setProperty->toInteger
PropMap#toLong(String)::: prop map to long:::try->return->Long->parseLong->catch->throw->new->IllegalArgumentException->finally
PropMap#getLong(String)::: prop map get long:::return->getProperty->toLong
PropMap#setLong(String, long)::: prop map set long:::return->String->valueOf->setProperty->toLong
PropMap#getTime(String)::: prop map get time:::sval->getProperty->if->equals->return->System->currentTimeMillis->lval->toLong->recentSecondCount->if->equals->warning->return
PropMap#list(PrintStream)::: prop map list:::outw->new->PrintWriter->list->outw->flush
PropMap#list(PrintWriter)::: prop map list:::out->println->defaults->defaultProps->entrySet->foreach->theMap->entrySet->if->defaults->contains->continue->out->e->getKey->e->getValue->println->out->println
PropMap#size()::: prop map size:::return->theMap->size
PropMap#isEmpty()::: prop map is empty:::return->theMap->isEmpty
PropMap#containsKey(Object)::: prop map contains key:::return->theMap->containsKey
PropMap#containsValue(Object)::: prop map contains value:::return->theMap->containsValue
PropMap#get(Object)::: prop map get:::return->theMap->get
PropMap#remove(Object)::: prop map remove:::return->theMap->remove
PropMap#putAll(Map)::: prop map put all:::theMap->putAll
PropMap#clear()::: prop map clear:::theMap->clear
PropMap#keySet()::: prop map key set:::return->theMap->keySet
PropMap#values()::: prop map values:::return->theMap->values
PropMap#entrySet()::: prop map entry set:::return->theMap->entrySet
PropMap#comparator()::: prop map comparator:::return->theMap->comparator
PropMap#subMap(String, String)::: prop map sub map:::return->theMap->subMap
PropMap#headMap(String)::: prop map head map:::return->theMap->headMap
PropMap#tailMap(String)::: prop map tail map:::return->theMap->tailMap
PropMap#firstKey()::: prop map first key:::return->theMap->firstKey
PropMap#lastKey()::: prop map last key:::return->theMap->lastKey
TLGlobals#getPropMap()::: globals get prop map:::return
TLGlobals#getUtf8Entries()::: globals get utf8 entries:::return
TLGlobals#getClassEntries()::: globals get class entries:::return
TLGlobals#getLiteralEntries()::: globals get literal entries:::return
TLGlobals#getDescriptorEntries()::: globals get descriptor entries:::return
TLGlobals#getSignatureEntries()::: globals get signature entries:::return
TLGlobals#getMemberEntries()::: globals get member entries:::return
TLGlobals#getMethodHandleEntries()::: globals get method handle entries:::return
TLGlobals#getMethodTypeEntries()::: globals get method type entries:::return
TLGlobals#getInvokeDynamicEntries()::: globals get invoke dynamic entries:::return
TLGlobals#getBootstrapMethodEntries()::: globals get bootstrap method entries:::return
UnpackerImpl#properties():::Get the set of options for the pack and unpack engines.:::return
UnpackerImpl#toString()::: unpacker impl to string:::return->Utils->getVersionString
UnpackerImpl#unpack(InputStream, JarOutputStream):::Takes a packed-stream InputStream, and writes to a JarOutputStream:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->try->set->verbose->props->getInteger->in0->new->BufferedInputStream->if->Utils->Utils->readMagic->isJarMagic->if->info->Utils->new->JarInputStream->copyJarFile->else->if->props->getBoolean->new->DoUnpack->run->in0->close->Utils->markJarFile->else->try->new->NativeUnpack->run->catch->new->DoUnpack->run->finally->in0->close->Utils->markJarFile->catch->finally->set
UnpackerImpl#unpack(File, JarOutputStream):::Takes an input File containing the pack file, and generates a JarOutputStream:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->try->instr->new->FileInputStream->unpack->catch->finally->if->props->getBoolean->in->delete
UnpackerImpl.DoUnpack#run(BufferedInputStream, JarOutputStream)::: do unpack run:::if->props->list->for->seg
UnpackerImpl.DoUnpack#unpackSegment(InputStream, JarOutputStream)::: do unpack unpack segment:::props->setProperty->new->PackageReader->read->if->props->getBoolean->pkg->stripAttributeKind->if->props->getBoolean->pkg->stripAttributeKind->props->setProperty->pkg->ensureAllClassFiles->classesToWrite->pkg->getClasses->new->HashSet<>->foreach->pkg->getFiles->name->je->Utils->getJarEntryName->new->JarEntry->deflate->needCRC->if->crc->reset->bufOut->reset->if->file->isClassStub->cls->file->getStubClass->new->ClassWriter->write->classesToWrite->remove->else->file->writeTo->je->setMethod->if->if->bufOut->size->crc->getValue->info->je->setMethod->je->bufOut->size->setSize->je->crc->getValue->setCrc->if->ldt->LocalDateTime->ofEpochSecond->je->setTimeLocal->else->je->setTime->out->putNextEntry->bufOut->writeTo->out->closeEntry->if->Utils->zeString->info->props->setProperty->pkg->reset
Utils#getTLGlobals()::: utils get globals:::return->currentInstance->get
Utils#currentPropMap()::: utils current prop map:::obj->currentInstance->get->if->return->if->return->return
Utils.Pack200Logger#getLogger()::: pack200 logger get logger:::if->PlatformLogger->getLogger->return
Utils.Pack200Logger#warning(String, Object)::: pack200 logger warning:::getLogger->warning
Utils.Pack200Logger#warning(String)::: pack200 logger warning:::warning
Utils.Pack200Logger#info(String)::: pack200 logger info:::verbose->currentPropMap->getInteger->if->if->println->else->getLogger->info
Utils.Pack200Logger#fine(String)::: pack200 logger fine:::verbose->currentPropMap->getInteger->if->println
Utils#getVersionString()::: utils get version string:::return->System->getProperty
Utils#markJarFile(JarOutputStream)::: utils mark jar file:::out->setComment
Utils#copyJarFile(JarInputStream, JarOutputStream)::: utils copy jar file:::if->in->getManifest->me->new->ZipEntry->out->putNextEntry->in->getManifest->write->out->closeEntry->buffer->new->byteArr->for->je->in->getNextJarEntry->in->close->markJarFile
Utils#copyJarFile(JarFile, JarOutputStream)::: utils copy jar file:::buffer->new->byteArr->foreach->Collections->in->entries->list->out->putNextEntry->ein->in->getInputStream->for->nr->ein->read->in->close->markJarFile
Utils#copyJarFile(JarInputStream, OutputStream)::: utils copy jar file:::new->BufferedOutputStream->new->NonCloser->try->jout->new->JarOutputStream->copyJarFile->catch->finally
Utils#copyJarFile(JarFile, OutputStream)::: utils copy jar file:::new->BufferedOutputStream->new->NonCloser->try->jout->new->JarOutputStream->copyJarFile->catch->finally
Utils.NonCloser#close()::: non closer close:::flush
Utils#getJarEntryName(String)::: utils get jar entry name:::if->return->return->name->replace
Utils#zeString(ZipEntry)::: utils ze string:::store->ze->getCompressedSize->ze->getCompressedSize->ze->getSize->return->ze->getSize->ze->getMethod->ze->getCompressedSize->ze->getTime->new->Date->Long->ze->getCrc->toHexString->ze->getName
Utils#readMagic(BufferedInputStream)::: utils read magic:::in->mark->magic->new->byteArr->for->i->in->reset->return
Utils#isJarMagic(byte[])::: utils is jar magic:::return
Utils#isPackMagic(byte[])::: utils is pack magic:::return
Utils#isGZIPMagic(byte[])::: utils is magic:::return

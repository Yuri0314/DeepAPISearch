com.sun.java.util.jar.pack.AdaptiveCoding#setHeadCoding(CodingMethod)->void::: adaptive coding set head coding
com.sun.java.util.jar.pack.AdaptiveCoding#setHeadLength(int)->void::: adaptive coding set head length
com.sun.java.util.jar.pack.AdaptiveCoding#setTailCoding(CodingMethod)->void::: adaptive coding set tail coding
com.sun.java.util.jar.pack.AdaptiveCoding#isTrivial()->boolean::: adaptive coding is trivial
com.sun.java.util.jar.pack.AdaptiveCoding#writeArrayTo(OutputStream, int[], int, int)->void::: adaptive coding write array to
com.sun.java.util.jar.pack.AdaptiveCoding#readArrayFrom(InputStream, int[], int, int)->void::: adaptive coding read array from
com.sun.java.util.jar.pack.AdaptiveCoding#getKXOf(int)->int::: adaptive coding get of
com.sun.java.util.jar.pack.AdaptiveCoding#getKBOf(int)->int::: adaptive coding get of
com.sun.java.util.jar.pack.AdaptiveCoding#decodeK(int, int)->int::: adaptive coding decode k
com.sun.java.util.jar.pack.AdaptiveCoding#getNextK(int)->int::: adaptive coding get next k
com.sun.java.util.jar.pack.AdaptiveCoding#isCodableLength(int)->boolean::: adaptive coding is codable length
com.sun.java.util.jar.pack.AdaptiveCoding#getMetaCoding(Coding)->byte[]::: adaptive coding get meta coding
com.sun.java.util.jar.pack.AdaptiveCoding#parseMetaCoding(byte[], int, Coding, CodingMethod[])->int::: adaptive coding parse meta coding
com.sun.java.util.jar.pack.AdaptiveCoding#toString()->String::: adaptive coding to string
com.sun.java.util.jar.pack.Attribute#name()->String::: attribute name
com.sun.java.util.jar.pack.Attribute#layout()->Layout::: attribute layout
com.sun.java.util.jar.pack.Attribute#bytes()->byte[]::: attribute bytes
com.sun.java.util.jar.pack.Attribute#size()->int::: attribute size
com.sun.java.util.jar.pack.Attribute#getNameRef()->Entry::: attribute get name ref
com.sun.java.util.jar.pack.Attribute#addContent(byte[], Object)->Attribute::: attribute add content
com.sun.java.util.jar.pack.Attribute#addContent(byte[])->Attribute::: attribute add content
com.sun.java.util.jar.pack.Attribute#finishRefs(Index)->void::: attribute finish refs
com.sun.java.util.jar.pack.Attribute#isCanonical()->boolean::: attribute is canonical
com.sun.java.util.jar.pack.Attribute#compareTo(Attribute)->int::: attribute compare to
com.sun.java.util.jar.pack.Attribute#getCanonList(List)->List::: attribute get canon list
com.sun.java.util.jar.pack.Attribute#find(int, String, String)->Attribute::: attribute find
com.sun.java.util.jar.pack.Attribute#keyForLookup(int, String)->Layout::: attribute key for lookup
com.sun.java.util.jar.pack.Attribute#lookup(Map, int, String)->Attribute::: attribute lookup
com.sun.java.util.jar.pack.Attribute#define(Map, int, String, String)->Attribute::: attribute define
com.sun.java.util.jar.pack.Attribute#contextName(int)->String::: attribute context name
com.sun.java.util.jar.pack.Attribute.Holder#getCPMap()->Entry[]::: holder get map
com.sun.java.util.jar.pack.Attribute.Holder#attributeSize()->int::: holder attribute size
com.sun.java.util.jar.pack.Attribute.Holder#trimToSize()->void::: holder trim to size
com.sun.java.util.jar.pack.Attribute.Holder#addAttribute(Attribute)->void::: holder add attribute
com.sun.java.util.jar.pack.Attribute.Holder#removeAttribute(Attribute)->Attribute::: holder remove attribute
com.sun.java.util.jar.pack.Attribute.Holder#getAttribute(int)->Attribute::: holder get attribute
com.sun.java.util.jar.pack.Attribute.Holder#visitRefs(int, Collection)->void::: holder visit refs
com.sun.java.util.jar.pack.Attribute.Holder#getAttributes()->List::: holder get attributes
com.sun.java.util.jar.pack.Attribute.Holder#setAttributes(List)->void::: holder set attributes
com.sun.java.util.jar.pack.Attribute.Holder#getAttribute(String)->Attribute::: holder get attribute
com.sun.java.util.jar.pack.Attribute.Holder#getAttribute(Layout)->Attribute::: holder get attribute
com.sun.java.util.jar.pack.Attribute.Holder#removeAttribute(String)->Attribute::: holder remove attribute
com.sun.java.util.jar.pack.Attribute.Holder#removeAttribute(Layout)->Attribute::: holder remove attribute
com.sun.java.util.jar.pack.Attribute.Holder#strip(String)->void::: holder strip
com.sun.java.util.jar.pack.Attribute.ValueStream#getInt(int)->int::: value stream get int
com.sun.java.util.jar.pack.Attribute.ValueStream#putInt(int, int)->void::: value stream put int
com.sun.java.util.jar.pack.Attribute.ValueStream#getRef(int)->Entry::: value stream get ref
com.sun.java.util.jar.pack.Attribute.ValueStream#putRef(int, Entry)->void::: value stream put ref
com.sun.java.util.jar.pack.Attribute.ValueStream#decodeBCI(int)->int::: value stream decode i
com.sun.java.util.jar.pack.Attribute.ValueStream#encodeBCI(int)->int::: value stream encode i
com.sun.java.util.jar.pack.Attribute.ValueStream#noteBackCall(int)->void::: value stream note back call
com.sun.java.util.jar.pack.Attribute.Layout#ctype()->int::: layout ctype
com.sun.java.util.jar.pack.Attribute.Layout#name()->String::: layout name
com.sun.java.util.jar.pack.Attribute.Layout#layout()->String::: layout layout
com.sun.java.util.jar.pack.Attribute.Layout#canonicalInstance()->Attribute::: layout canonical instance
com.sun.java.util.jar.pack.Attribute.Layout#getNameRef()->Entry::: layout get name ref
com.sun.java.util.jar.pack.Attribute.Layout#isEmpty()->boolean::: layout is empty
com.sun.java.util.jar.pack.Attribute.Layout#makeKey(int, String, String)->Layout::: layout make key
com.sun.java.util.jar.pack.Attribute.Layout#makeKey(int, String)->Layout::: layout make key
com.sun.java.util.jar.pack.Attribute.Layout#addContent(byte[], Object)->Attribute::: layout add content
com.sun.java.util.jar.pack.Attribute.Layout#addContent(byte[])->Attribute::: layout add content
com.sun.java.util.jar.pack.Attribute.Layout#equals(Object)->boolean::: layout equals
com.sun.java.util.jar.pack.Attribute.Layout#equals(Layout)->boolean::: layout equals
com.sun.java.util.jar.pack.Attribute.Layout#hashCode()->int::: layout hash code
com.sun.java.util.jar.pack.Attribute.Layout#compareTo(Layout)->int::: layout compare to
com.sun.java.util.jar.pack.Attribute.Layout#toString()->String::: layout to string
com.sun.java.util.jar.pack.Attribute.Layout.Element#flagTest(byte)->boolean::: element flag test
com.sun.java.util.jar.pack.Attribute.Layout.Element#removeBand()->void::: element remove band
com.sun.java.util.jar.pack.Attribute.Layout.Element#hasBand()->boolean::: element has band
com.sun.java.util.jar.pack.Attribute.Layout.Element#toString()->String::: element to string
com.sun.java.util.jar.pack.Attribute.Layout#hasCallables()->boolean::: layout has callables
com.sun.java.util.jar.pack.Attribute.Layout#getCallables()->Element[]::: layout get callables
com.sun.java.util.jar.pack.Attribute.Layout#getEntryPoint()->Element[]::: layout get entry point
com.sun.java.util.jar.pack.Attribute.Layout#parse(Holder, byte[], int, int, ValueStream)->void:::Return a sequence of tokens from the given attribute bytes
com.sun.java.util.jar.pack.Attribute.Layout#unparse(ValueStream, ByteArrayOutputStream)->Object:::Given a sequence of tokens, return the attribute bytes
com.sun.java.util.jar.pack.Attribute.Layout#layoutForClassVersion(Package.Version)->String::: layout layout for class version
com.sun.java.util.jar.pack.Attribute#visitRefs(Holder, int, Collection)->void::: attribute visit refs
com.sun.java.util.jar.pack.Attribute#parse(Holder, byte[], int, int, ValueStream)->void::: attribute parse
com.sun.java.util.jar.pack.Attribute#unparse(ValueStream, ByteArrayOutputStream)->Object::: attribute unparse
com.sun.java.util.jar.pack.Attribute#toString()->String::: attribute to string
com.sun.java.util.jar.pack.Attribute#normalizeLayoutString(String)->String:::Remove any informal "pretty printing" from the layout string
com.sun.java.util.jar.pack.Attribute#tokenizeLayout(Layout, int, String)->Layout.Element[]:::Parse the attribute layout language
com.sun.java.util.jar.pack.Attribute#tokenizeLayout(Layout, int, String, List)->void::: attribute tokenize layout
com.sun.java.util.jar.pack.Attribute#splitBodies(String)->String[]::: attribute split bodies
com.sun.java.util.jar.pack.Attribute#findCaseDash(String, int)->int:::Find an occurrence of hyphen '-' between two numerals.
com.sun.java.util.jar.pack.Attribute#parseIntBefore(String, int)->int::: attribute parse int before
com.sun.java.util.jar.pack.Attribute#parseIntAfter(String, int)->int::: attribute parse int after
com.sun.java.util.jar.pack.Attribute#expandCaseDashNotation(String)->String:::For compatibility with 1.5 pack, expand 1-5 into 1,2,3,4,5.
com.sun.java.util.jar.pack.Attribute#parseUsing(Layout.Element[], Holder, byte[], int, int, ValueStream)->int::: attribute parse using
com.sun.java.util.jar.pack.Attribute#matchCase(Layout.Element, int)->Layout.Element::: attribute match case
com.sun.java.util.jar.pack.Attribute#unparseUsing(Layout.Element[], Object[], ValueStream, ByteArrayOutputStream)->void::: attribute unparse using
com.sun.java.util.jar.pack.BandStructure#getCPIndex(byte)->Index::: band structure get index
com.sun.java.util.jar.pack.BandStructure#initHighestClassVersion(Package.Version)->void:::Call this exactly once, early, to specify the archive major version.
com.sun.java.util.jar.pack.BandStructure#getHighestClassVersion()->Package.Version::: band structure get highest class version
com.sun.java.util.jar.pack.BandStructure#codingForIndex(int)->Coding::: band structure coding for index
com.sun.java.util.jar.pack.BandStructure#indexOf(Coding)->int::: band structure index of
com.sun.java.util.jar.pack.BandStructure#getBasicCodings()->Coding[]::: band structure get basic codings
com.sun.java.util.jar.pack.BandStructure#getBandHeader(int, Coding)->CodingMethod::: band structure get band header
com.sun.java.util.jar.pack.BandStructure#parseMetaCoding(byte[], int, Coding, CodingMethod[])->int::: band structure parse meta coding
com.sun.java.util.jar.pack.BandStructure#phaseIsRead(int)->boolean::: band structure phase is read
com.sun.java.util.jar.pack.BandStructure#phaseCmp(int, int)->int::: band structure phase cmp
com.sun.java.util.jar.pack.BandStructure.Band#init()->Band::: band init
com.sun.java.util.jar.pack.BandStructure.Band#isReader()->boolean::: band is reader
com.sun.java.util.jar.pack.BandStructure.Band#phase()->int::: band phase
com.sun.java.util.jar.pack.BandStructure.Band#name()->String::: band name
com.sun.java.util.jar.pack.BandStructure.Band#capacity()->int:::Return -1 if data buffer not allocated, else max length.
com.sun.java.util.jar.pack.BandStructure.Band#setCapacity(int)->void:::Allocate data buffer to specified length.
com.sun.java.util.jar.pack.BandStructure.Band#length()->int:::Return current number of values in buffer, which must exist.
com.sun.java.util.jar.pack.BandStructure.Band#valuesRemainingForDebug()->int::: band values remaining for debug
com.sun.java.util.jar.pack.BandStructure.Band#valuesExpected()->int::: band values expected
com.sun.java.util.jar.pack.BandStructure.Band#writeTo(OutputStream)->void:::Write out bytes, encoding the values.
com.sun.java.util.jar.pack.BandStructure.Band#chooseBandCodings()->void::: band choose band codings
com.sun.java.util.jar.pack.BandStructure.Band#outputSize()->long::: band output size
com.sun.java.util.jar.pack.BandStructure.Band#computeOutputSize()->long::: band compute output size
com.sun.java.util.jar.pack.BandStructure.Band#writeDataTo(OutputStream)->void::: band write data to
com.sun.java.util.jar.pack.BandStructure.Band#expectLength(int)->void:::Expect a certain number of values.
com.sun.java.util.jar.pack.BandStructure.Band#expectMoreLength(int)->void:::Expect more values
com.sun.java.util.jar.pack.BandStructure.Band#doneWriting()->void::: band done writing
com.sun.java.util.jar.pack.BandStructure.Band#readFrom(InputStream)->void:::Read in bytes, decoding the values.
com.sun.java.util.jar.pack.BandStructure.Band#readDataFrom(InputStream)->void::: band read data from
com.sun.java.util.jar.pack.BandStructure.Band#readyToDisburse()->void::: band ready to disburse
com.sun.java.util.jar.pack.BandStructure.Band#doneDisbursing()->void::: band done disbursing
com.sun.java.util.jar.pack.BandStructure.Band#doneWithUnusedBand()->void::: band done with unused band
com.sun.java.util.jar.pack.BandStructure.Band#setPhase(int)->void::: band set phase
com.sun.java.util.jar.pack.BandStructure.Band#toString()->String::: band to string
com.sun.java.util.jar.pack.BandStructure.ValueBand#capacity()->int::: value band capacity
com.sun.java.util.jar.pack.BandStructure.ValueBand#setCapacity(int)->void:::Declare predicted or needed capacity.
com.sun.java.util.jar.pack.BandStructure.ValueBand#length()->int::: value band length
com.sun.java.util.jar.pack.BandStructure.ValueBand#valuesRemainingForDebug()->int::: value band values remaining for debug
com.sun.java.util.jar.pack.BandStructure.ValueBand#valueAtForDebug(int)->int::: value band value at for debug
com.sun.java.util.jar.pack.BandStructure.ValueBand#patchValue(int, int)->void::: value band patch value
com.sun.java.util.jar.pack.BandStructure.ValueBand#initializeValues(int[])->void::: value band initialize values
com.sun.java.util.jar.pack.BandStructure.ValueBand#addValue(int)->void:::Collect one value, or store one decoded value.
com.sun.java.util.jar.pack.BandStructure.ValueBand#chooseBandCodings()->void::: value band choose band codings
com.sun.java.util.jar.pack.BandStructure.ValueBand#computeOutputSize()->long::: value band compute output size
com.sun.java.util.jar.pack.BandStructure.ValueBand#computeEscapeSize()->int::: value band compute escape size
com.sun.java.util.jar.pack.BandStructure.ValueBand#writeDataTo(OutputStream)->void::: value band write data to
com.sun.java.util.jar.pack.BandStructure.ValueBand#readDataFrom(InputStream)->void::: value band read data from
com.sun.java.util.jar.pack.BandStructure.ValueBand#doneDisbursing()->void::: value band done disbursing
com.sun.java.util.jar.pack.BandStructure.ValueBand#getValue()->int:::Disburse one value.
com.sun.java.util.jar.pack.BandStructure.ValueBand#resetForSecondPass()->void:::Reset for another pass over the same value set.
com.sun.java.util.jar.pack.BandStructure.ByteBand#capacity()->int::: byte band capacity
com.sun.java.util.jar.pack.BandStructure.ByteBand#setCapacity(int)->void::: byte band set capacity
com.sun.java.util.jar.pack.BandStructure.ByteBand#destroy()->void::: byte band destroy
com.sun.java.util.jar.pack.BandStructure.ByteBand#length()->int::: byte band length
com.sun.java.util.jar.pack.BandStructure.ByteBand#reset()->void::: byte band reset
com.sun.java.util.jar.pack.BandStructure.ByteBand#valuesRemainingForDebug()->int::: byte band values remaining for debug
com.sun.java.util.jar.pack.BandStructure.ByteBand#chooseBandCodings()->void::: byte band choose band codings
com.sun.java.util.jar.pack.BandStructure.ByteBand#computeOutputSize()->long::: byte band compute output size
com.sun.java.util.jar.pack.BandStructure.ByteBand#writeDataTo(OutputStream)->void::: byte band write data to
com.sun.java.util.jar.pack.BandStructure.ByteBand#readDataFrom(InputStream)->void::: byte band read data from
com.sun.java.util.jar.pack.BandStructure.ByteBand#readyToDisburse()->void::: byte band ready to disburse
com.sun.java.util.jar.pack.BandStructure.ByteBand#doneDisbursing()->void::: byte band done disbursing
com.sun.java.util.jar.pack.BandStructure.ByteBand#setInputStreamFrom(InputStream)->void::: byte band set input stream from
com.sun.java.util.jar.pack.BandStructure.ByteBand#collectorStream()->OutputStream::: byte band collector stream
com.sun.java.util.jar.pack.BandStructure.ByteBand#getInputStream()->InputStream::: byte band get input stream
com.sun.java.util.jar.pack.BandStructure.ByteBand#getByte()->int::: byte band get byte
com.sun.java.util.jar.pack.BandStructure.ByteBand#putByte(int)->void::: byte band put byte
com.sun.java.util.jar.pack.BandStructure.ByteBand#toString()->String::: byte band to string
com.sun.java.util.jar.pack.BandStructure.IntBand#putInt(int)->void::: int band put int
com.sun.java.util.jar.pack.BandStructure.IntBand#getInt()->int::: int band get int
com.sun.java.util.jar.pack.BandStructure.IntBand#getIntTotal()->int:::Return the sum of all values in this band.
com.sun.java.util.jar.pack.BandStructure.IntBand#getIntCount(int)->int:::Return the occurrence count of a specific value in this band.
com.sun.java.util.jar.pack.BandStructure#getIntTotal(int[])->int::: band structure get int total
com.sun.java.util.jar.pack.BandStructure.CPRefBand#setIndex(Index)->void::: ref band set index
com.sun.java.util.jar.pack.BandStructure.CPRefBand#readDataFrom(InputStream)->void::: ref band read data from
com.sun.java.util.jar.pack.BandStructure.CPRefBand#putRef(Entry)->void:::Write a constant pool reference.
com.sun.java.util.jar.pack.BandStructure.CPRefBand#putRef(Entry, Index)->void::: ref band put ref
com.sun.java.util.jar.pack.BandStructure.CPRefBand#putRef(Entry, byte)->void::: ref band put ref
com.sun.java.util.jar.pack.BandStructure.CPRefBand#getRef()->Entry::: ref band get ref
com.sun.java.util.jar.pack.BandStructure.CPRefBand#getRef(Index)->Entry::: ref band get ref
com.sun.java.util.jar.pack.BandStructure.CPRefBand#getRef(byte)->Entry::: ref band get ref
com.sun.java.util.jar.pack.BandStructure#encodeRef(Entry, Index)->int::: band structure encode ref
com.sun.java.util.jar.pack.BandStructure#decodeRef(int, Index)->Entry::: band structure decode ref
com.sun.java.util.jar.pack.BandStructure#getCodingChooser()->CodingChooser::: band structure get coding chooser
com.sun.java.util.jar.pack.BandStructure#chooseCoding(int[], int, int, Coding, String, int[])->CodingMethod::: band structure choose coding
com.sun.java.util.jar.pack.BandStructure#decodeEscapeValue(int, Coding)->int::: band structure decode escape value
com.sun.java.util.jar.pack.BandStructure#encodeEscapeValue(int, Coding)->int::: band structure encode escape value
com.sun.java.util.jar.pack.BandStructure.MultiBand#init()->Band::: multi band init
com.sun.java.util.jar.pack.BandStructure.MultiBand#size()->int::: multi band size
com.sun.java.util.jar.pack.BandStructure.MultiBand#get(int)->Band::: multi band get
com.sun.java.util.jar.pack.BandStructure.MultiBand#toArray()->Band[]::: multi band to array
com.sun.java.util.jar.pack.BandStructure.MultiBand#add(Band)->void::: multi band add
com.sun.java.util.jar.pack.BandStructure.MultiBand#newByteBand(String)->ByteBand::: multi band new byte band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newIntBand(String)->IntBand::: multi band new int band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newIntBand(String, Coding)->IntBand::: multi band new int band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newMultiBand(String, Coding)->MultiBand::: multi band new multi band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newCPRefBand(String, byte)->CPRefBand::: multi band new ref band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newCPRefBand(String, Coding, byte)->CPRefBand::: multi band new ref band
com.sun.java.util.jar.pack.BandStructure.MultiBand#newCPRefBand(String, Coding, byte, boolean)->CPRefBand::: multi band new ref band
com.sun.java.util.jar.pack.BandStructure.MultiBand#bandCount()->int::: multi band band count
com.sun.java.util.jar.pack.BandStructure.MultiBand#capacity()->int::: multi band capacity
com.sun.java.util.jar.pack.BandStructure.MultiBand#setCapacity(int)->void::: multi band set capacity
com.sun.java.util.jar.pack.BandStructure.MultiBand#length()->int::: multi band length
com.sun.java.util.jar.pack.BandStructure.MultiBand#valuesRemainingForDebug()->int::: multi band values remaining for debug
com.sun.java.util.jar.pack.BandStructure.MultiBand#chooseBandCodings()->void::: multi band choose band codings
com.sun.java.util.jar.pack.BandStructure.MultiBand#computeOutputSize()->long::: multi band compute output size
com.sun.java.util.jar.pack.BandStructure.MultiBand#writeDataTo(OutputStream)->void::: multi band write data to
com.sun.java.util.jar.pack.BandStructure.MultiBand#readDataFrom(InputStream)->void::: multi band read data from
com.sun.java.util.jar.pack.BandStructure.MultiBand#toString()->String::: multi band to string
com.sun.java.util.jar.pack.BandStructure#writeAllBandsTo(OutputStream)->void::: band structure write all bands to
com.sun.java.util.jar.pack.BandStructure#getAttrBand(MultiBand, int)->IntBand::: band structure get attr band
com.sun.java.util.jar.pack.BandStructure#setBandIndexes()->void:::Given CP indexes, distribute tag-specific indexes to bands.
com.sun.java.util.jar.pack.BandStructure#setBandIndex(CPRefBand, byte)->void::: band structure set band index
com.sun.java.util.jar.pack.BandStructure#setConstantValueIndex(Field)->void::: band structure set constant value index
com.sun.java.util.jar.pack.BandStructure#initAttrIndexLimit()->void::: band structure init attr index limit
com.sun.java.util.jar.pack.BandStructure#haveFlagsHi(int)->boolean::: band structure have flags hi
com.sun.java.util.jar.pack.BandStructure#getPredefinedAttrs(int)->List::: band structure get predefined attrs
com.sun.java.util.jar.pack.BandStructure#isPredefinedAttr(int, int)->boolean::: band structure is predefined attr
com.sun.java.util.jar.pack.BandStructure#adjustSpecialAttrMasks()->void::: band structure adjust special attr masks
com.sun.java.util.jar.pack.BandStructure#makeClassFileVersionAttr(Package.Version)->Attribute::: band structure make class file version attr
com.sun.java.util.jar.pack.BandStructure#parseClassFileVersionAttr(Attribute)->Package.Version::: band structure parse class file version attr
com.sun.java.util.jar.pack.BandStructure#makeNewAttributeBands()->void::: band structure make new attribute bands
com.sun.java.util.jar.pack.BandStructure#setAttributeLayoutIndex(Attribute.Layout, int)->int::: band structure set attribute layout index
com.sun.java.util.jar.pack.BandStructure#shortCodeHeader(Code)->int::: band structure short code header
com.sun.java.util.jar.pack.BandStructure#shortCodeHeader_handler_count(int)->int::: band structure short code header_handler_count
com.sun.java.util.jar.pack.BandStructure#shortCodeHeader_max_stack(int)->int::: band structure short code header_max_stack
com.sun.java.util.jar.pack.BandStructure#shortCodeHeader_max_na_locals(int)->int::: band structure short code header_max_na_locals
com.sun.java.util.jar.pack.BandStructure#putLabel(IntBand, Code, int, int)->void::: band structure put label
com.sun.java.util.jar.pack.BandStructure#getLabel(IntBand, Code, int)->int::: band structure get label
com.sun.java.util.jar.pack.BandStructure#getCPRefOpBand(int)->CPRefBand::: band structure get ref op band
com.sun.java.util.jar.pack.BandStructure#selfOpRefBand(int)->CPRefBand::: band structure self op ref band
com.sun.java.util.jar.pack.BandStructure#getDumpStream(Band, String)->OutputStream::: band structure get dump stream
com.sun.java.util.jar.pack.BandStructure#getDumpStream(Index, String)->OutputStream::: band structure get dump stream
com.sun.java.util.jar.pack.BandStructure#getDumpStream(String, int, String, Object)->OutputStream::: band structure get dump stream
com.sun.java.util.jar.pack.BandStructure#assertCanChangeLength(Band)->boolean::: band structure assert can change length
com.sun.java.util.jar.pack.BandStructure#assertPhase(Band, int)->boolean::: band structure assert phase
com.sun.java.util.jar.pack.BandStructure#verbose()->int::: band structure verbose
com.sun.java.util.jar.pack.BandStructure#assertPhaseChangeOK(Band, int, int)->boolean::: band structure assert phase change k
com.sun.java.util.jar.pack.BandStructure#notePrevForAssert(Band, Band)->boolean::: band structure note prev for assert
com.sun.java.util.jar.pack.BandStructure#testBit(int, int)->boolean::: band structure test bit
com.sun.java.util.jar.pack.BandStructure#setBit(int, int, boolean)->int::: band structure set bit
com.sun.java.util.jar.pack.BandStructure#testBit(long, long)->boolean::: band structure test bit
com.sun.java.util.jar.pack.BandStructure#setBit(long, long, boolean)->long::: band structure set bit
com.sun.java.util.jar.pack.BandStructure#printArrayTo(PrintStream, int[], int, int)->void::: band structure print array to
com.sun.java.util.jar.pack.BandStructure#printArrayTo(PrintStream, Entry[], int, int)->void::: band structure print array to
com.sun.java.util.jar.pack.BandStructure#printArrayTo(PrintStream, Entry[], int, int, boolean)->void::: band structure print array to
com.sun.java.util.jar.pack.BandStructure#realloc(Object[], int)->Object[]::: band structure realloc
com.sun.java.util.jar.pack.BandStructure#realloc(Object[])->Object[]::: band structure realloc
com.sun.java.util.jar.pack.BandStructure#realloc(int[], int)->int[]::: band structure realloc
com.sun.java.util.jar.pack.BandStructure#realloc(int[])->int[]::: band structure realloc
com.sun.java.util.jar.pack.BandStructure#realloc(byte[], int)->byte[]::: band structure realloc
com.sun.java.util.jar.pack.BandStructure#realloc(byte[])->byte[]::: band structure realloc
com.sun.java.util.jar.pack.ClassReader#setAttrDefs(Map)->void::: class reader set attr defs
com.sun.java.util.jar.pack.ClassReader#setAttrCommands(Map)->void::: class reader set attr commands
com.sun.java.util.jar.pack.ClassReader#read()->void::: class reader read
com.sun.java.util.jar.pack.ClassReader#readMagicNumbers()->void::: class reader read magic numbers
com.sun.java.util.jar.pack.ClassReader#readConstantPool()->void::: class reader read constant pool
com.sun.java.util.jar.pack.ClassReader#readHeader()->void::: class reader read header
com.sun.java.util.jar.pack.ClassReader#readMembers(boolean)->void::: class reader read members
com.sun.java.util.jar.pack.ClassReader#readMember(boolean)->void::: class reader read member
com.sun.java.util.jar.pack.ClassReader#readAttributes(int, Attribute.Holder)->void::: class reader read attributes
com.sun.java.util.jar.pack.ClassReader#readCode(Code)->void::: class reader read code
com.sun.java.util.jar.pack.ClassReader#readBootstrapMethods(Class)->void::: class reader read bootstrap methods
com.sun.java.util.jar.pack.ClassReader#readInnerClasses(Class)->void::: class reader read inner classes
com.sun.java.util.jar.pack.ClassWriter#write()->void::: class writer write
com.sun.java.util.jar.pack.ClassWriter#writeMagicNumbers()->void::: class writer write magic numbers
com.sun.java.util.jar.pack.ClassWriter#writeConstantPool()->void::: class writer write constant pool
com.sun.java.util.jar.pack.ClassWriter#writeHeader()->void::: class writer write header
com.sun.java.util.jar.pack.ClassWriter#writeMembers(boolean)->void::: class writer write members
com.sun.java.util.jar.pack.ClassWriter#writeMember(Class.Member, boolean)->void::: class writer write member
com.sun.java.util.jar.pack.ClassWriter#writeAttributes(int, Attribute.Holder)->void::: class writer write attributes
com.sun.java.util.jar.pack.ClassWriter#writeCode(Code)->void::: class writer write code
com.sun.java.util.jar.pack.ClassWriter#writeBootstrapMethods(Class)->void::: class writer write bootstrap methods
com.sun.java.util.jar.pack.ClassWriter#writeInnerClasses(Class)->void::: class writer write inner classes
com.sun.java.util.jar.pack.Code#getMethod()->Class.Method::: code get method
com.sun.java.util.jar.pack.Code#thisClass()->Class::: code this class
com.sun.java.util.jar.pack.Code#getPackage()->Package::: code get package
com.sun.java.util.jar.pack.Code#getCPMap()->ConstantPool.Entry[]::: code get map
com.sun.java.util.jar.pack.Code#getLength()->int::: code get length
com.sun.java.util.jar.pack.Code#getMaxStack()->int::: code get max stack
com.sun.java.util.jar.pack.Code#setMaxStack(int)->void::: code set max stack
com.sun.java.util.jar.pack.Code#getMaxNALocals()->int::: code get max locals
com.sun.java.util.jar.pack.Code#setMaxNALocals(int)->void::: code set max locals
com.sun.java.util.jar.pack.Code#getHandlerCount()->int::: code get handler count
com.sun.java.util.jar.pack.Code#setHandlerCount(int)->void::: code set handler count
com.sun.java.util.jar.pack.Code#setBytes(byte[])->void::: code set bytes
com.sun.java.util.jar.pack.Code#setInstructionMap(int[], int)->void::: code set instruction map
com.sun.java.util.jar.pack.Code#setInstructionMap(int[])->void::: code set instruction map
com.sun.java.util.jar.pack.Code#getInstructionMap()->int[]::: code get instruction map
com.sun.java.util.jar.pack.Code#addFixups(Collection)->void::: code add fixups
com.sun.java.util.jar.pack.Code#trimToSize()->void::: code trim to size
com.sun.java.util.jar.pack.Code#visitRefs(int, Collection)->void::: code visit refs
com.sun.java.util.jar.pack.Code#getInsnMap()->Object::: code get insn map
com.sun.java.util.jar.pack.Code#encodeBCI(int)->int:::Encode the given BCI as an instruction boundary number
com.sun.java.util.jar.pack.Code#decodeBCI(int)->int::: code decode i
com.sun.java.util.jar.pack.Code#finishRefs(ConstantPool.Index)->void::: code finish refs
com.sun.java.util.jar.pack.Code#instructionAt(int)->Instruction::: code instruction at
com.sun.java.util.jar.pack.Code#flagsRequireCode(int)->boolean::: code flags require code
com.sun.java.util.jar.pack.Code#toString()->String::: code to string
com.sun.java.util.jar.pack.Code#getInt(int)->int::: code get int
com.sun.java.util.jar.pack.Code#getShort(int)->int::: code get short
com.sun.java.util.jar.pack.Code#getByte(int)->int::: code get byte
com.sun.java.util.jar.pack.Code#setInt(int, int)->void::: code set int
com.sun.java.util.jar.pack.Code#setShort(int, int)->void::: code set short
com.sun.java.util.jar.pack.Code#setByte(int, int)->void::: code set byte
com.sun.java.util.jar.pack.Coding#codeMax(int, int, int, int)->int:::Largest int representable by (B,H,S) in up to nMax bytes.
com.sun.java.util.jar.pack.Coding#codeMin(int, int, int, int)->int:::Smallest int representable by (B,H,S) in up to nMax bytes
com.sun.java.util.jar.pack.Coding#writeInt(byte[], int[], int, int, int, int)->void::: coding write int
com.sun.java.util.jar.pack.Coding#readInt(byte[], int[], int, int, int)->int::: coding read int
com.sun.java.util.jar.pack.Coding#readIntFrom(InputStream, int, int, int)->int::: coding read int from
com.sun.java.util.jar.pack.Coding#equals(Object)->boolean::: coding equals
com.sun.java.util.jar.pack.Coding#hashCode()->int::: coding hash code
com.sun.java.util.jar.pack.Coding#of(int, int)->Coding::: coding of
com.sun.java.util.jar.pack.Coding#of(int, int, int)->Coding::: coding of
com.sun.java.util.jar.pack.Coding#canRepresentValue(int)->boolean::: coding can represent value
com.sun.java.util.jar.pack.Coding#canRepresentSigned(int)->boolean:::Can this coding represent a single value, possibly a delta?  This ignores the D property
com.sun.java.util.jar.pack.Coding#canRepresentUnsigned(int)->boolean:::Can this coding, apart from its S property,  represent a single value?  (Negative values  can only be represented via 32-bit overflow,  so this returns true for negative values  if isFullRange is true.)
com.sun.java.util.jar.pack.Coding#readFrom(byte[], int[])->int::: coding read from
com.sun.java.util.jar.pack.Coding#writeTo(byte[], int[], int)->void::: coding write to
com.sun.java.util.jar.pack.Coding#readFrom(InputStream)->int::: coding read from
com.sun.java.util.jar.pack.Coding#writeTo(OutputStream, int)->void::: coding write to
com.sun.java.util.jar.pack.Coding#readArrayFrom(InputStream, int[], int, int)->void::: coding read array from
com.sun.java.util.jar.pack.Coding#writeArrayTo(OutputStream, int[], int, int)->void::: coding write array to
com.sun.java.util.jar.pack.Coding#isSubrange()->boolean:::Tell if the range of this coding (number of distinct  representable values) can be expressed in 32 bits.
com.sun.java.util.jar.pack.Coding#isFullRange()->boolean:::Tell if this coding can represent all 32-bit values
com.sun.java.util.jar.pack.Coding#getRange()->int:::Return the number of values this coding (a subrange) can represent.
com.sun.java.util.jar.pack.Coding#setB(int)->Coding::: coding set b
com.sun.java.util.jar.pack.Coding#setH(int)->Coding::: coding set h
com.sun.java.util.jar.pack.Coding#setS(int)->Coding::: coding set s
com.sun.java.util.jar.pack.Coding#setL(int)->Coding::: coding set l
com.sun.java.util.jar.pack.Coding#setD(int)->Coding::: coding set d
com.sun.java.util.jar.pack.Coding#getDeltaCoding()->Coding::: coding get delta coding
com.sun.java.util.jar.pack.Coding#getValueCoding()->Coding:::Return a coding suitable for representing summed, modulo-reduced values.
com.sun.java.util.jar.pack.Coding#reduceToUnsignedRange(long)->int:::Reduce the given value to be within this coding's unsigned range,  by adding or subtracting a multiple of (max-min+1).
com.sun.java.util.jar.pack.Coding#reduceToSignedRange(int)->int::: coding reduce to signed range
com.sun.java.util.jar.pack.Coding#reduceToSignedRange(int, int, int)->int::: coding reduce to signed range
com.sun.java.util.jar.pack.Coding#isSigned()->boolean:::Does this coding support at least one negative value?         Includes codings that can do so via 32-bit wraparound.
com.sun.java.util.jar.pack.Coding#isDelta()->boolean:::Does this coding code arrays by making successive differences?
com.sun.java.util.jar.pack.Coding#B()->int::: coding  b
com.sun.java.util.jar.pack.Coding#H()->int::: coding  h
com.sun.java.util.jar.pack.Coding#L()->int::: coding  l
com.sun.java.util.jar.pack.Coding#S()->int::: coding  s
com.sun.java.util.jar.pack.Coding#del()->int::: coding del
com.sun.java.util.jar.pack.Coding#min()->int::: coding min
com.sun.java.util.jar.pack.Coding#max()->int::: coding max
com.sun.java.util.jar.pack.Coding#umin()->int::: coding umin
com.sun.java.util.jar.pack.Coding#umax()->int::: coding umax
com.sun.java.util.jar.pack.Coding#byteMin(int)->int::: coding byte min
com.sun.java.util.jar.pack.Coding#byteMax(int)->int::: coding byte max
com.sun.java.util.jar.pack.Coding#compareTo(Coding)->int::: coding compare to
com.sun.java.util.jar.pack.Coding#distanceFrom(Coding)->int:::Heuristic measure of the difference between two codings.
com.sun.java.util.jar.pack.Coding#ceil_lg2(int)->int:::ceiling(log[2](x)): {1->0, 2->1, 3->2, 4->2, ...}
com.sun.java.util.jar.pack.Coding#bitWidth(int)->int:::Number of significant bits in i, not counting sign bits
com.sun.java.util.jar.pack.Coding#makeDeltas(int[], int, int, int, int)->int[]:::Create an array of successive differences
com.sun.java.util.jar.pack.Coding#canRepresent(int, int)->boolean::: coding can represent
com.sun.java.util.jar.pack.Coding#canRepresent(int[], int, int)->boolean::: coding can represent
com.sun.java.util.jar.pack.Coding#getBitLength(int)->double::: coding get bit length
com.sun.java.util.jar.pack.Coding#getLength(int)->int:::How many bytes are in the coding of this value?  Returns Integer.MAX_VALUE if the value has no coding
com.sun.java.util.jar.pack.Coding#getLength(int[], int, int)->int::: coding get length
com.sun.java.util.jar.pack.Coding#getMetaCoding(Coding)->byte[]::: coding get meta coding
com.sun.java.util.jar.pack.Coding#parseMetaCoding(byte[], int, Coding, CodingMethod[])->int::: coding parse meta coding
com.sun.java.util.jar.pack.Coding#keyString()->String::: coding key string
com.sun.java.util.jar.pack.Coding#toString()->String::: coding to string
com.sun.java.util.jar.pack.Coding#stringForDebug()->String::: coding string for debug
com.sun.java.util.jar.pack.CodingChooser.Choice#reset()->void::: choice reset
com.sun.java.util.jar.pack.CodingChooser.Choice#isExtra()->boolean::: choice is extra
com.sun.java.util.jar.pack.CodingChooser.Choice#toString()->String::: choice to string
com.sun.java.util.jar.pack.CodingChooser#makeExtraChoice(Coding)->Choice::: coding chooser make extra choice
com.sun.java.util.jar.pack.CodingChooser#getContext()->ByteArrayOutputStream::: coding chooser get context
com.sun.java.util.jar.pack.CodingChooser#choose(int[], int, int, Coding, int[])->CodingMethod::: coding chooser choose
com.sun.java.util.jar.pack.CodingChooser#choose(int[], int, int, Coding)->CodingMethod::: coding chooser choose
com.sun.java.util.jar.pack.CodingChooser#choose(int[], Coding, int[])->CodingMethod::: coding chooser choose
com.sun.java.util.jar.pack.CodingChooser#choose(int[], Coding)->CodingMethod::: coding chooser choose
com.sun.java.util.jar.pack.CodingChooser#computeSize(CodingMethod, int[], int, int, int[])->void::: coding chooser compute size
com.sun.java.util.jar.pack.CodingChooser#computeSize(CodingMethod, int[], int[])->void::: coding chooser compute size
com.sun.java.util.jar.pack.CodingChooser#computeSize(CodingMethod, int[], int, int)->int[]::: coding chooser compute size
com.sun.java.util.jar.pack.CodingChooser#computeSize(CodingMethod, int[])->int[]::: coding chooser compute size
com.sun.java.util.jar.pack.CodingChooser#computeByteSize(CodingMethod, int[], int, int)->int::: coding chooser compute byte size
com.sun.java.util.jar.pack.CodingChooser#getDeltas(int, int)->int[]::: coding chooser get deltas
com.sun.java.util.jar.pack.CodingChooser#getValueHistogram()->Histogram::: coding chooser get value histogram
com.sun.java.util.jar.pack.CodingChooser#getDeltaHistogram()->Histogram::: coding chooser get delta histogram
com.sun.java.util.jar.pack.CodingChooser#getHistogram(boolean)->Histogram::: coding chooser get histogram
com.sun.java.util.jar.pack.CodingChooser.Sizer#write(int)->void::: sizer write
com.sun.java.util.jar.pack.CodingChooser.Sizer#write(byte[], int, int)->void::: sizer write
com.sun.java.util.jar.pack.CodingChooser.Sizer#reset()->void::: sizer reset
com.sun.java.util.jar.pack.CodingChooser.Sizer#getSize()->int::: sizer get size
com.sun.java.util.jar.pack.CodingChooser.Sizer#toString()->String::: sizer to string
com.sun.java.util.jar.pack.CodingChooser.Sizer#stringForDebug()->String::: sizer string for debug
com.sun.java.util.jar.pack.CodingChooser#addStressSeed(int)->void::: coding chooser add stress seed
com.sun.java.util.jar.pack.CodingMethod#readArrayFrom(InputStream, int[], int, int)->void::: coding method read array from
com.sun.java.util.jar.pack.CodingMethod#writeArrayTo(OutputStream, int[], int, int)->void::: coding method write array to
com.sun.java.util.jar.pack.CodingMethod#getMetaCoding(Coding)->byte[]::: coding method get meta coding
com.sun.java.util.jar.pack.ConstantPool#verbose()->int::: constant pool verbose
com.sun.java.util.jar.pack.ConstantPool#getUtf8Entry(String)->Utf8Entry:::Factory for Utf8 string constants
com.sun.java.util.jar.pack.ConstantPool#getClassEntry(String)->ClassEntry:::Factory for Class constants.
com.sun.java.util.jar.pack.ConstantPool#getLiteralEntry(Comparable)->LiteralEntry:::Factory for literal constants (String, Integer, etc.).
com.sun.java.util.jar.pack.ConstantPool#getStringEntry(String)->StringEntry:::Factory for literal constants (String, Integer, etc.).
com.sun.java.util.jar.pack.ConstantPool#getSignatureEntry(String)->SignatureEntry:::Factory for signature (type) constants.
com.sun.java.util.jar.pack.ConstantPool#getSignatureEntry(Utf8Entry, ClassEntry[])->SignatureEntry::: constant pool get signature entry
com.sun.java.util.jar.pack.ConstantPool#getDescriptorEntry(Utf8Entry, SignatureEntry)->DescriptorEntry:::Factory for descriptor (name-and-type) constants.
com.sun.java.util.jar.pack.ConstantPool#getDescriptorEntry(Utf8Entry, Utf8Entry)->DescriptorEntry::: constant pool get descriptor entry
com.sun.java.util.jar.pack.ConstantPool#getMemberEntry(byte, ClassEntry, DescriptorEntry)->MemberEntry:::Factory for member reference constants.
com.sun.java.util.jar.pack.ConstantPool#getMethodHandleEntry(byte, MemberEntry)->MethodHandleEntry:::Factory for MethodHandle constants.
com.sun.java.util.jar.pack.ConstantPool#getMethodTypeEntry(SignatureEntry)->MethodTypeEntry:::Factory for MethodType constants.
com.sun.java.util.jar.pack.ConstantPool#getMethodTypeEntry(Utf8Entry)->MethodTypeEntry::: constant pool get method type entry
com.sun.java.util.jar.pack.ConstantPool#getInvokeDynamicEntry(BootstrapMethodEntry, DescriptorEntry)->InvokeDynamicEntry:::Factory for InvokeDynamic constants.
com.sun.java.util.jar.pack.ConstantPool#getBootstrapMethodEntry(MethodHandleEntry, Entry[])->BootstrapMethodEntry:::Factory for BootstrapMethod pseudo-constants.
com.sun.java.util.jar.pack.ConstantPool.Entry#getTag()->byte::: entry get tag
com.sun.java.util.jar.pack.ConstantPool.Entry#tagEquals(int)->boolean::: entry tag equals
com.sun.java.util.jar.pack.ConstantPool.Entry#getRef(int)->Entry::: entry get ref
com.sun.java.util.jar.pack.ConstantPool.Entry#eq(Entry)->boolean::: entry eq
com.sun.java.util.jar.pack.ConstantPool.Entry#equals(Object)->boolean::: entry equals
com.sun.java.util.jar.pack.ConstantPool.Entry#hashCode()->int::: entry hash code
com.sun.java.util.jar.pack.ConstantPool.Entry#computeValueHash()->int::: entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.Entry#compareTo(Object)->int::: entry compare to
com.sun.java.util.jar.pack.ConstantPool.Entry#superCompareTo(Object)->int::: entry super compare to
com.sun.java.util.jar.pack.ConstantPool.Entry#isDoubleWord()->boolean::: entry is double word
com.sun.java.util.jar.pack.ConstantPool.Entry#tagMatches(int)->boolean::: entry tag matches
com.sun.java.util.jar.pack.ConstantPool.Entry#toString()->String::: entry to string
com.sun.java.util.jar.pack.ConstantPool.Entry#stringValue()->String::: entry string value
com.sun.java.util.jar.pack.ConstantPool.Utf8Entry#computeValueHash()->int::: utf8 entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.Utf8Entry#equals(Object)->boolean::: utf8 entry equals
com.sun.java.util.jar.pack.ConstantPool.Utf8Entry#compareTo(Object)->int::: utf8 entry compare to
com.sun.java.util.jar.pack.ConstantPool.Utf8Entry#stringValue()->String::: utf8 entry string value
com.sun.java.util.jar.pack.ConstantPool#isMemberTag(byte)->boolean::: constant pool is member tag
com.sun.java.util.jar.pack.ConstantPool#numberTagOf(Number)->byte::: constant pool number tag of
com.sun.java.util.jar.pack.ConstantPool#isRefKind(byte)->boolean::: constant pool is ref kind
com.sun.java.util.jar.pack.ConstantPool.LiteralEntry#literalValue()->Comparable::: literal entry literal value
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#computeValueHash()->int::: number entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#equals(Object)->boolean::: number entry equals
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#compareTo(Object)->int::: number entry compare to
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#numberValue()->Number::: number entry number value
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#literalValue()->Comparable::: number entry literal value
com.sun.java.util.jar.pack.ConstantPool.NumberEntry#stringValue()->String::: number entry string value
com.sun.java.util.jar.pack.ConstantPool.StringEntry#getRef(int)->Entry::: string entry get ref
com.sun.java.util.jar.pack.ConstantPool.StringEntry#computeValueHash()->int::: string entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.StringEntry#equals(Object)->boolean::: string entry equals
com.sun.java.util.jar.pack.ConstantPool.StringEntry#compareTo(Object)->int::: string entry compare to
com.sun.java.util.jar.pack.ConstantPool.StringEntry#literalValue()->Comparable::: string entry literal value
com.sun.java.util.jar.pack.ConstantPool.StringEntry#stringValue()->String::: string entry string value
com.sun.java.util.jar.pack.ConstantPool.ClassEntry#getRef(int)->Entry::: class entry get ref
com.sun.java.util.jar.pack.ConstantPool.ClassEntry#computeValueHash()->int::: class entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.ClassEntry#equals(Object)->boolean::: class entry equals
com.sun.java.util.jar.pack.ConstantPool.ClassEntry#compareTo(Object)->int::: class entry compare to
com.sun.java.util.jar.pack.ConstantPool.ClassEntry#stringValue()->String::: class entry string value
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#getRef(int)->Entry::: descriptor entry get ref
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#computeValueHash()->int::: descriptor entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#equals(Object)->boolean::: descriptor entry equals
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#compareTo(Object)->int::: descriptor entry compare to
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#stringValue()->String::: descriptor entry string value
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#stringValueOf(Entry, Entry)->String::: descriptor entry string value of
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#prettyString()->String::: descriptor entry pretty string
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#isMethod()->boolean::: descriptor entry is method
com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry#getLiteralTag()->byte::: descriptor entry get literal tag
com.sun.java.util.jar.pack.ConstantPool#qualifiedStringValue(Entry, Entry)->String::: constant pool qualified string value
com.sun.java.util.jar.pack.ConstantPool#qualifiedStringValue(String, String)->String::: constant pool qualified string value
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#getRef(int)->Entry::: member entry get ref
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#computeValueHash()->int::: member entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#equals(Object)->boolean::: member entry equals
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#compareTo(Object)->int::: member entry compare to
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#stringValue()->String::: member entry string value
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#stringValueOf(byte, ClassEntry, DescriptorEntry)->String::: member entry string value of
com.sun.java.util.jar.pack.ConstantPool.MemberEntry#isMethod()->boolean::: member entry is method
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#getRef(int)->Entry::: signature entry get ref
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#computeValueHash()->int::: signature entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#asUtf8Entry()->Utf8Entry::: signature entry as utf8 entry
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#equals(Object)->boolean::: signature entry equals
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#compareTo(Object)->int::: signature entry compare to
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#stringValue()->String::: signature entry string value
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#stringValueOf(Utf8Entry, ClassEntry[])->String::: signature entry string value of
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#computeSize(boolean)->int::: signature entry compute size
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#isMethod()->boolean::: signature entry is method
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#getLiteralTag()->byte::: signature entry get literal tag
com.sun.java.util.jar.pack.ConstantPool.SignatureEntry#prettyString()->String::: signature entry pretty string
com.sun.java.util.jar.pack.ConstantPool#compareSignatures(String, String)->int::: constant pool compare signatures
com.sun.java.util.jar.pack.ConstantPool#compareSignatures(String, String, String[], String[])->int::: constant pool compare signatures
com.sun.java.util.jar.pack.ConstantPool#countClassParts(Utf8Entry)->int::: constant pool count class parts
com.sun.java.util.jar.pack.ConstantPool#flattenSignature(String[])->String::: constant pool flatten signature
com.sun.java.util.jar.pack.ConstantPool#structureSignature(String)->String[]::: constant pool structure signature
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#getRef(int)->Entry::: method handle entry get ref
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#computeValueHash()->int::: method handle entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#equals(Object)->boolean::: method handle entry equals
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#compareTo(Object)->int::: method handle entry compare to
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#stringValueOf(int, MemberEntry)->String::: method handle entry string value of
com.sun.java.util.jar.pack.ConstantPool.MethodHandleEntry#stringValue()->String::: method handle entry string value
com.sun.java.util.jar.pack.ConstantPool.MethodTypeEntry#getRef(int)->Entry::: method type entry get ref
com.sun.java.util.jar.pack.ConstantPool.MethodTypeEntry#computeValueHash()->int::: method type entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.MethodTypeEntry#equals(Object)->boolean::: method type entry equals
com.sun.java.util.jar.pack.ConstantPool.MethodTypeEntry#compareTo(Object)->int::: method type entry compare to
com.sun.java.util.jar.pack.ConstantPool.MethodTypeEntry#stringValue()->String::: method type entry string value
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#getRef(int)->Entry::: invoke dynamic entry get ref
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#computeValueHash()->int::: invoke dynamic entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#equals(Object)->boolean::: invoke dynamic entry equals
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#compareTo(Object)->int::: invoke dynamic entry compare to
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#stringValue()->String::: invoke dynamic entry string value
com.sun.java.util.jar.pack.ConstantPool.InvokeDynamicEntry#stringValueOf(BootstrapMethodEntry, DescriptorEntry)->String::: invoke dynamic entry string value of
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#getRef(int)->Entry::: bootstrap method entry get ref
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#computeValueHash()->int::: bootstrap method entry compute value hash
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#equals(Object)->boolean::: bootstrap method entry equals
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#compareTo(Object)->int::: bootstrap method entry compare to
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#stringValue()->String::: bootstrap method entry string value
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#stringValueOf(MethodHandleEntry, Entry[])->String::: bootstrap method entry string value of
com.sun.java.util.jar.pack.ConstantPool.BootstrapMethodEntry#compareArgArrays(Entry[], Entry[])->int::: bootstrap method entry compare arg arrays
com.sun.java.util.jar.pack.ConstantPool.Index#getMap()->Entry[]::: index get map
com.sun.java.util.jar.pack.ConstantPool.Index#setMap(Entry[])->void::: index set map
com.sun.java.util.jar.pack.ConstantPool.Index#setMap(Collection)->void::: index set map
com.sun.java.util.jar.pack.ConstantPool.Index#size()->int::: index size
com.sun.java.util.jar.pack.ConstantPool.Index#get(int)->Entry::: index get
com.sun.java.util.jar.pack.ConstantPool.Index#getEntry(int)->Entry::: index get entry
com.sun.java.util.jar.pack.ConstantPool.Index#contains(Entry)->boolean::: index contains
com.sun.java.util.jar.pack.ConstantPool.Index#indexOf(Entry)->int::: index index of
com.sun.java.util.jar.pack.ConstantPool.Index#lastIndexOf(Entry)->int::: index last index of
com.sun.java.util.jar.pack.ConstantPool.Index#assertIsSorted()->boolean::: index assert is sorted
com.sun.java.util.jar.pack.ConstantPool.Index#clearIndex()->void::: index clear index
com.sun.java.util.jar.pack.ConstantPool.Index#toArray(Entry[])->Entry[]::: index to array
com.sun.java.util.jar.pack.ConstantPool.Index#toArray()->Entry[]::: index to array
com.sun.java.util.jar.pack.ConstantPool.Index#clone()->Object::: index clone
com.sun.java.util.jar.pack.ConstantPool.Index#toString()->String::: index to string
com.sun.java.util.jar.pack.ConstantPool.Index#dumpString()->String::: index dump string
com.sun.java.util.jar.pack.ConstantPool#makeIndex(String, Entry[])->Index::: constant pool make index
com.sun.java.util.jar.pack.ConstantPool#makeIndex(String, Collection)->Index::: constant pool make index
com.sun.java.util.jar.pack.ConstantPool#sort(Index)->void:::Sort this index (destructively) into canonical order.
com.sun.java.util.jar.pack.ConstantPool#partition(Index, int[])->Index[]:::Return a set of indexes partitioning these entries
com.sun.java.util.jar.pack.ConstantPool#partitionByTag(Index)->Index[]::: constant pool partition by tag
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#untypedIndexOf(Entry)->int::: index group untyped index of
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#initIndexByTag(byte, Index)->void::: index group init index by tag
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#getIndexByTag(byte)->Index:::Index of all CP entries of a given tag.
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#getMemberIndex(byte, ClassEntry)->Index:::Index of all CP entries of a given tag and class.
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#getOverloadingIndex(MemberEntry)->int::: index group get overloading index
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#getOverloadingForIndex(byte, ClassEntry, String, int)->MemberEntry::: index group get overloading for index
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#haveNumbers()->boolean::: index group have numbers
com.sun.java.util.jar.pack.ConstantPool.IndexGroup#haveExtraTags()->boolean::: index group have extra tags
com.sun.java.util.jar.pack.ConstantPool#completeReferencesIn(Set, boolean)->void:::Close the set cpRefs under the getRef(*) relation
com.sun.java.util.jar.pack.ConstantPool#completeReferencesIn(Set, boolean, List)->void::: constant pool complete references in
com.sun.java.util.jar.pack.ConstantPool#percent(int, int)->double::: constant pool percent
com.sun.java.util.jar.pack.ConstantPool#tagName(int)->String::: constant pool tag name
com.sun.java.util.jar.pack.ConstantPool#refKindName(int)->String::: constant pool ref kind name
com.sun.java.util.jar.pack.Driver#main(String[])->void::: driver main
com.sun.java.util.jar.pack.DriverResource#getContents()->Object[][]::: driver resource get contents
com.sun.java.util.jar.pack.DriverResource_ja#getContents()->Object[][]::: driver resource_ja get contents
com.sun.java.util.jar.pack.DriverResource_zh_CN#getContents()->Object[][]::: driver resource_zh_ n get contents
com.sun.java.util.jar.pack.FixedList#size()->int::: fixed list size
com.sun.java.util.jar.pack.FixedList#isEmpty()->boolean::: fixed list is empty
com.sun.java.util.jar.pack.FixedList#contains(Object)->boolean::: fixed list contains
com.sun.java.util.jar.pack.FixedList#iterator()->Iterator::: fixed list iterator
com.sun.java.util.jar.pack.FixedList#toArray()->Object[]::: fixed list to array
com.sun.java.util.jar.pack.FixedList#toArray(T[])->T[]::: fixed list to array
com.sun.java.util.jar.pack.FixedList#add(E)->boolean::: fixed list add
com.sun.java.util.jar.pack.FixedList#remove(Object)->boolean::: fixed list remove
com.sun.java.util.jar.pack.FixedList#containsAll(Collection)->boolean::: fixed list contains all
com.sun.java.util.jar.pack.FixedList#addAll(Collection)->boolean::: fixed list add all
com.sun.java.util.jar.pack.FixedList#addAll(int, Collection)->boolean::: fixed list add all
com.sun.java.util.jar.pack.FixedList#removeAll(Collection)->boolean::: fixed list remove all
com.sun.java.util.jar.pack.FixedList#retainAll(Collection)->boolean::: fixed list retain all
com.sun.java.util.jar.pack.FixedList#clear()->void::: fixed list clear
com.sun.java.util.jar.pack.FixedList#get(int)->E::: fixed list get
com.sun.java.util.jar.pack.FixedList#set(int, E)->E::: fixed list set
com.sun.java.util.jar.pack.FixedList#add(int, E)->void::: fixed list add
com.sun.java.util.jar.pack.FixedList#remove(int)->E::: fixed list remove
com.sun.java.util.jar.pack.FixedList#indexOf(Object)->int::: fixed list index of
com.sun.java.util.jar.pack.FixedList#lastIndexOf(Object)->int::: fixed list last index of
com.sun.java.util.jar.pack.FixedList#listIterator()->ListIterator::: fixed list list iterator
com.sun.java.util.jar.pack.FixedList#listIterator(int)->ListIterator::: fixed list list iterator
com.sun.java.util.jar.pack.FixedList#subList(int, int)->List::: fixed list sub list
com.sun.java.util.jar.pack.FixedList#toString()->String::: fixed list to string
com.sun.java.util.jar.pack.Fixups#size()->int::: fixups size
com.sun.java.util.jar.pack.Fixups#trimToSize()->void::: fixups trim to size
com.sun.java.util.jar.pack.Fixups#visitRefs(Collection)->void::: fixups visit refs
com.sun.java.util.jar.pack.Fixups#clear()->void::: fixups clear
com.sun.java.util.jar.pack.Fixups#getBytes()->byte[]::: fixups get bytes
com.sun.java.util.jar.pack.Fixups#setBytes(byte[])->void::: fixups set bytes
com.sun.java.util.jar.pack.Fixups#fmtLen(int)->int::: fixups fmt len
com.sun.java.util.jar.pack.Fixups#descLoc(int)->int::: fixups desc loc
com.sun.java.util.jar.pack.Fixups#descFmt(int)->int::: fixups desc fmt
com.sun.java.util.jar.pack.Fixups#descEnd(int)->int::: fixups desc end
com.sun.java.util.jar.pack.Fixups#makeDesc(int, int)->int::: fixups make desc
com.sun.java.util.jar.pack.Fixups#fetchDesc(int, int)->int::: fixups fetch desc
com.sun.java.util.jar.pack.Fixups#storeDesc(int, int, int)->boolean::: fixups store desc
com.sun.java.util.jar.pack.Fixups#storeIndex(int, int, int)->void::: fixups store index
com.sun.java.util.jar.pack.Fixups#storeIndex(byte[], int, int, int)->void::: fixups store index
com.sun.java.util.jar.pack.Fixups#addU1(int, Entry)->void::: fixups add u1
com.sun.java.util.jar.pack.Fixups#addU2(int, Entry)->void::: fixups add u2
com.sun.java.util.jar.pack.Fixups.Fixup#location()->int::: fixup location
com.sun.java.util.jar.pack.Fixups.Fixup#format()->int::: fixup format
com.sun.java.util.jar.pack.Fixups.Fixup#entry()->Entry::: fixup entry
com.sun.java.util.jar.pack.Fixups.Fixup#compareTo(Fixup)->int::: fixup compare to
com.sun.java.util.jar.pack.Fixups.Fixup#equals(Object)->boolean::: fixup equals
com.sun.java.util.jar.pack.Fixups.Fixup#hashCode()->int::: fixup hash code
com.sun.java.util.jar.pack.Fixups.Fixup#toString()->String::: fixup to string
com.sun.java.util.jar.pack.Fixups#iterator()->Iterator::: fixups iterator
com.sun.java.util.jar.pack.Fixups#add(int, int, Entry)->void::: fixups add
com.sun.java.util.jar.pack.Fixups#add(Fixup)->boolean::: fixups add
com.sun.java.util.jar.pack.Fixups#addAll(Collection)->boolean::: fixups add all
com.sun.java.util.jar.pack.Fixups#addRefWithBytes(Object, byte[], Entry)->Object::: fixups add ref with bytes
com.sun.java.util.jar.pack.Fixups#addRefWithLoc(Object, int, Entry)->Object::: fixups add ref with loc
com.sun.java.util.jar.pack.Fixups#setBytes(Object, byte[])->void::: fixups set bytes
com.sun.java.util.jar.pack.Fixups#trimToSize(Object)->Object::: fixups trim to size
com.sun.java.util.jar.pack.Fixups#visitRefs(Object, Collection)->void::: fixups visit refs
com.sun.java.util.jar.pack.Fixups#finishRefs(Object, byte[], ConstantPool.Index)->void::: fixups finish refs
com.sun.java.util.jar.pack.Fixups#finishRefs(ConstantPool.Index)->void::: fixups finish refs
com.sun.java.util.jar.pack.Histogram#getMatrix()->int[][]:::Histogram of int values, reported compactly as a ragged matrix,  indexed by descending frequency rank
com.sun.java.util.jar.pack.Histogram#getRowCount()->int::: histogram get row count
com.sun.java.util.jar.pack.Histogram#getRowFrequency(int)->int::: histogram get row frequency
com.sun.java.util.jar.pack.Histogram#getRowLength(int)->int::: histogram get row length
com.sun.java.util.jar.pack.Histogram#getRowValue(int, int)->int::: histogram get row value
com.sun.java.util.jar.pack.Histogram#getRowWeight(int)->int::: histogram get row weight
com.sun.java.util.jar.pack.Histogram#getTotalWeight()->int::: histogram get total weight
com.sun.java.util.jar.pack.Histogram#getTotalLength()->int::: histogram get total length
com.sun.java.util.jar.pack.Histogram#getAllValues()->int[]:::Returns an array of all values, sorted.
com.sun.java.util.jar.pack.Histogram#getAllFrequencies()->int[]:::Returns an array parallel with #getValues,  with a frequency for each value.
com.sun.java.util.jar.pack.Histogram#getFrequency(int)->int::: histogram get frequency
com.sun.java.util.jar.pack.Histogram#getBitLength(int)->double::: histogram get bit length
com.sun.java.util.jar.pack.Histogram#getRowBitLength(int)->double::: histogram get row bit length
com.sun.java.util.jar.pack.Histogram.BitMetric#getBitLength(int)->double::: bit metric get bit length
com.sun.java.util.jar.pack.Histogram#getBitMetric()->BitMetric::: histogram get bit metric
com.sun.java.util.jar.pack.Histogram#getBitLength()->double:::bit-length is negative entropy:  -H(matrix).
com.sun.java.util.jar.pack.Histogram#getBitLength(BitMetric)->double:::bit-length in to another coding (cross-entropy)
com.sun.java.util.jar.pack.Histogram#normalizeMatrix(int[][])->int[][]:::Sort rows and columns
com.sun.java.util.jar.pack.Histogram#getRowTitles(String)->String[]::: histogram get row titles
com.sun.java.util.jar.pack.Histogram#print(PrintStream)->void:::Print a report of this histogram.
com.sun.java.util.jar.pack.Histogram#print(String, PrintStream)->void:::Print a report of this histogram.
com.sun.java.util.jar.pack.Histogram#print(String, String[], PrintStream)->void:::Print a report of this histogram.
com.sun.java.util.jar.pack.Histogram#makeByteHistogram(InputStream)->Histogram::: histogram make byte histogram
com.sun.java.util.jar.pack.Instruction#getBC()->int::: instruction get c
com.sun.java.util.jar.pack.Instruction#isWide()->boolean::: instruction is wide
com.sun.java.util.jar.pack.Instruction#getBytes()->byte[]::: instruction get bytes
com.sun.java.util.jar.pack.Instruction#getPC()->int::: instruction get c
com.sun.java.util.jar.pack.Instruction#getLength()->int::: instruction get length
com.sun.java.util.jar.pack.Instruction#getNextPC()->int::: instruction get next c
com.sun.java.util.jar.pack.Instruction#next()->Instruction::: instruction next
com.sun.java.util.jar.pack.Instruction#isNonstandard()->boolean::: instruction is nonstandard
com.sun.java.util.jar.pack.Instruction#setNonstandardLength(int)->void::: instruction set nonstandard length
com.sun.java.util.jar.pack.Instruction#forceNextPC(int)->Instruction:::A fake instruction at this pc whose next() will be at nextpc.
com.sun.java.util.jar.pack.Instruction#at(byte[], int)->Instruction::: instruction at
com.sun.java.util.jar.pack.Instruction#at(byte[], int, Instruction)->Instruction::: instruction at
com.sun.java.util.jar.pack.Instruction#getCPTag()->byte::: instruction get tag
com.sun.java.util.jar.pack.Instruction#getCPIndex()->int::: instruction get index
com.sun.java.util.jar.pack.Instruction#setCPIndex(int)->void::: instruction set index
com.sun.java.util.jar.pack.Instruction#getCPRef(ConstantPool.Entry[])->ConstantPool.Entry::: instruction get ref
com.sun.java.util.jar.pack.Instruction#getLocalSlot()->int::: instruction get local slot
com.sun.java.util.jar.pack.Instruction#getBranchLabel()->int::: instruction get branch label
com.sun.java.util.jar.pack.Instruction#setBranchLabel(int)->void::: instruction set branch label
com.sun.java.util.jar.pack.Instruction#getConstant()->int::: instruction get constant
com.sun.java.util.jar.pack.Instruction#setConstant(int)->void::: instruction set constant
com.sun.java.util.jar.pack.Instruction.Switch#getCaseCount()->int::: switch get case count
com.sun.java.util.jar.pack.Instruction.Switch#getCaseValue(int)->int::: switch get case value
com.sun.java.util.jar.pack.Instruction.Switch#getCaseLabel(int)->int::: switch get case label
com.sun.java.util.jar.pack.Instruction.Switch#setCaseCount(int)->void::: switch set case count
com.sun.java.util.jar.pack.Instruction.Switch#setCaseValue(int, int)->void::: switch set case value
com.sun.java.util.jar.pack.Instruction.Switch#setCaseLabel(int, int)->void::: switch set case label
com.sun.java.util.jar.pack.Instruction.Switch#getLength(int)->int::: switch get length
com.sun.java.util.jar.pack.Instruction.Switch#getDefaultLabel()->int::: switch get default label
com.sun.java.util.jar.pack.Instruction.Switch#setDefaultLabel(int)->void::: switch set default label
com.sun.java.util.jar.pack.Instruction.Switch#intAt(int)->int::: switch int at
com.sun.java.util.jar.pack.Instruction.Switch#setIntAt(int, int)->void::: switch set int at
com.sun.java.util.jar.pack.Instruction.Switch#getAlignedPC()->int::: switch get aligned c
com.sun.java.util.jar.pack.Instruction.Switch#toString()->String::: switch to string
com.sun.java.util.jar.pack.Instruction.Switch#alignPC(int)->int::: switch align c
com.sun.java.util.jar.pack.Instruction.TableSwitch#getLowCase()->int::: table switch get low case
com.sun.java.util.jar.pack.Instruction.TableSwitch#getHighCase()->int::: table switch get high case
com.sun.java.util.jar.pack.Instruction.TableSwitch#getCaseCount()->int::: table switch get case count
com.sun.java.util.jar.pack.Instruction.TableSwitch#getCaseValue(int)->int::: table switch get case value
com.sun.java.util.jar.pack.Instruction.TableSwitch#getCaseLabel(int)->int::: table switch get case label
com.sun.java.util.jar.pack.Instruction.TableSwitch#setLowCase(int)->void::: table switch set low case
com.sun.java.util.jar.pack.Instruction.TableSwitch#setHighCase(int)->void::: table switch set high case
com.sun.java.util.jar.pack.Instruction.TableSwitch#setCaseLabel(int, int)->void::: table switch set case label
com.sun.java.util.jar.pack.Instruction.TableSwitch#setCaseCount(int)->void::: table switch set case count
com.sun.java.util.jar.pack.Instruction.TableSwitch#setCaseValue(int, int)->void::: table switch set case value
com.sun.java.util.jar.pack.Instruction.TableSwitch#getLength(int)->int::: table switch get length
com.sun.java.util.jar.pack.Instruction.LookupSwitch#getCaseCount()->int::: lookup switch get case count
com.sun.java.util.jar.pack.Instruction.LookupSwitch#getCaseValue(int)->int::: lookup switch get case value
com.sun.java.util.jar.pack.Instruction.LookupSwitch#getCaseLabel(int)->int::: lookup switch get case label
com.sun.java.util.jar.pack.Instruction.LookupSwitch#setCaseCount(int)->void::: lookup switch set case count
com.sun.java.util.jar.pack.Instruction.LookupSwitch#setCaseValue(int, int)->void::: lookup switch set case value
com.sun.java.util.jar.pack.Instruction.LookupSwitch#setCaseLabel(int, int)->void::: lookup switch set case label
com.sun.java.util.jar.pack.Instruction.LookupSwitch#getLength(int)->int::: lookup switch get length
com.sun.java.util.jar.pack.Instruction#equals(Object)->boolean:::Two instructions are equal if they have the same bytes.
com.sun.java.util.jar.pack.Instruction#hashCode()->int::: instruction hash code
com.sun.java.util.jar.pack.Instruction#equals(Instruction)->boolean::: instruction equals
com.sun.java.util.jar.pack.Instruction#labstr(int)->String::: instruction labstr
com.sun.java.util.jar.pack.Instruction#toString()->String::: instruction to string
com.sun.java.util.jar.pack.Instruction#toString(ConstantPool.Entry[])->String::: instruction to string
com.sun.java.util.jar.pack.Instruction#getIntAt(int)->int::: instruction get int at
com.sun.java.util.jar.pack.Instruction#getShortAt(int)->int::: instruction get short at
com.sun.java.util.jar.pack.Instruction#getByteAt(int)->int::: instruction get byte at
com.sun.java.util.jar.pack.Instruction#getInt(byte[], int)->int::: instruction get int
com.sun.java.util.jar.pack.Instruction#getShort(byte[], int)->int::: instruction get short
com.sun.java.util.jar.pack.Instruction#getByte(byte[], int)->int::: instruction get byte
com.sun.java.util.jar.pack.Instruction#setInt(byte[], int, int)->void::: instruction set int
com.sun.java.util.jar.pack.Instruction#setShort(byte[], int, int)->void::: instruction set short
com.sun.java.util.jar.pack.Instruction#setByte(byte[], int, int)->void::: instruction set byte
com.sun.java.util.jar.pack.Instruction#isNonstandard(int)->boolean::: instruction is nonstandard
com.sun.java.util.jar.pack.Instruction#opLength(int)->int::: instruction op length
com.sun.java.util.jar.pack.Instruction#opWideLength(int)->int::: instruction op wide length
com.sun.java.util.jar.pack.Instruction#isLocalSlotOp(int)->boolean::: instruction is local slot op
com.sun.java.util.jar.pack.Instruction#isBranchOp(int)->boolean::: instruction is branch op
com.sun.java.util.jar.pack.Instruction#isCPRefOp(int)->boolean::: instruction is ref op
com.sun.java.util.jar.pack.Instruction#getCPRefOpTag(int)->byte::: instruction get ref op tag
com.sun.java.util.jar.pack.Instruction#isFieldOp(int)->boolean::: instruction is field op
com.sun.java.util.jar.pack.Instruction#isInvokeInitOp(int)->boolean::: instruction is invoke init op
com.sun.java.util.jar.pack.Instruction#isSelfLinkerOp(int)->boolean::: instruction is self linker op
com.sun.java.util.jar.pack.Instruction#byteName(int)->String::: instruction byte name
com.sun.java.util.jar.pack.Instruction#opcodeChecker(byte[], ConstantPool.Entry[], Package.Version)->void::: instruction opcode checker
com.sun.java.util.jar.pack.NativeUnpack#setOption(String, String)->boolean::: native unpack set option
com.sun.java.util.jar.pack.NativeUnpack#getOption(String)->String::: native unpack get option
com.sun.java.util.jar.pack.NativeUnpack#run(InputStream, JarOutputStream, ByteBuffer)->void::: native unpack run
com.sun.java.util.jar.pack.NativeUnpack#run(InputStream, JarOutputStream)->void::: native unpack run
com.sun.java.util.jar.pack.NativeUnpack#run(File, JarOutputStream)->void::: native unpack run
com.sun.java.util.jar.pack.Package#reset()->void::: package reset
com.sun.java.util.jar.pack.Package#getDefaultClassVersion()->Version::: package get default class version
com.sun.java.util.jar.pack.Package#getHighestClassVersion()->Version::: package get highest class version
com.sun.java.util.jar.pack.Package#getClasses()->List::: package get classes
com.sun.java.util.jar.pack.Package.Class#getPackage()->Package::: class get package
com.sun.java.util.jar.pack.Package.Class#getFields()->List::: class get fields
com.sun.java.util.jar.pack.Package.Class#getMethods()->List::: class get methods
com.sun.java.util.jar.pack.Package.Class#getName()->String::: class get name
com.sun.java.util.jar.pack.Package.Class#getVersion()->Version::: class get version
com.sun.java.util.jar.pack.Package.Class#compareTo(Class)->int::: class compare to
com.sun.java.util.jar.pack.Package.Class#getObviousSourceFile()->String::: class get obvious source file
com.sun.java.util.jar.pack.Package.Class#minimizeSourceFile()->void::: class minimize source file
com.sun.java.util.jar.pack.Package.Class#expandSourceFile()->void::: class expand source file
com.sun.java.util.jar.pack.Package.Class#getCPMap()->Entry[]::: class get map
com.sun.java.util.jar.pack.Package.Class#setCPMap(Entry[])->void::: class set map
com.sun.java.util.jar.pack.Package.Class#hasBootstrapMethods()->boolean::: class has bootstrap methods
com.sun.java.util.jar.pack.Package.Class#getBootstrapMethods()->List::: class get bootstrap methods
com.sun.java.util.jar.pack.Package.Class#getBootstrapMethodMap()->BootstrapMethodEntry[]::: class get bootstrap method map
com.sun.java.util.jar.pack.Package.Class#setBootstrapMethods(Collection)->void::: class set bootstrap methods
com.sun.java.util.jar.pack.Package.Class#hasInnerClasses()->boolean::: class has inner classes
com.sun.java.util.jar.pack.Package.Class#getInnerClasses()->List::: class get inner classes
com.sun.java.util.jar.pack.Package.Class#setInnerClasses(Collection)->void::: class set inner classes
com.sun.java.util.jar.pack.Package.Class#computeGloballyImpliedICs()->List:::Given a global map of ICs (keyed by thisClass),  compute the subset of its Map.values which are  required to be present in the local InnerClasses  attribute
com.sun.java.util.jar.pack.Package.Class#minimizeLocalICs()->void:::When packing, anticipate the effect of expandLocalICs
com.sun.java.util.jar.pack.Package.Class#expandLocalICs()->int:::When unpacking, undo the effect of minimizeLocalICs
com.sun.java.util.jar.pack.Package.Class.Member#thisClass()->Class::: member this class
com.sun.java.util.jar.pack.Package.Class.Member#getDescriptor()->DescriptorEntry::: member get descriptor
com.sun.java.util.jar.pack.Package.Class.Member#getName()->String::: member get name
com.sun.java.util.jar.pack.Package.Class.Member#getType()->String::: member get type
com.sun.java.util.jar.pack.Package.Class.Member#getCPMap()->Entry[]::: member get map
com.sun.java.util.jar.pack.Package.Class.Member#visitRefs(int, Collection)->void::: member visit refs
com.sun.java.util.jar.pack.Package.Class.Member#toString()->String::: member to string
com.sun.java.util.jar.pack.Package.Class.Field#getLiteralTag()->byte::: field get literal tag
com.sun.java.util.jar.pack.Package.Class.Field#compareTo(Member)->int::: field compare to
com.sun.java.util.jar.pack.Package.Class.Method#trimToSize()->void::: method trim to size
com.sun.java.util.jar.pack.Package.Class.Method#getArgumentSize()->int::: method get argument size
com.sun.java.util.jar.pack.Package.Class.Method#compareTo(Member)->int::: method compare to
com.sun.java.util.jar.pack.Package.Class.Method#strip(String)->void::: method strip
com.sun.java.util.jar.pack.Package.Class.Method#visitRefs(int, Collection)->void::: method visit refs
com.sun.java.util.jar.pack.Package.Class#trimToSize()->void::: class trim to size
com.sun.java.util.jar.pack.Package.Class#strip(String)->void::: class strip
com.sun.java.util.jar.pack.Package.Class#visitRefs(int, Collection)->void::: class visit refs
com.sun.java.util.jar.pack.Package.Class#visitInnerClassRefs(int, Collection)->void::: class visit inner class refs
com.sun.java.util.jar.pack.Package.Class#finishReading()->void::: class finish reading
com.sun.java.util.jar.pack.Package.Class#initFile(File)->void::: class init file
com.sun.java.util.jar.pack.Package.Class#maybeChooseFileName()->void::: class maybe choose file name
com.sun.java.util.jar.pack.Package.Class#canonicalFileName()->String::: class canonical file name
com.sun.java.util.jar.pack.Package.Class#getFileName(java.io.File)->java.io.File::: class get file name
com.sun.java.util.jar.pack.Package.Class#getFileName()->java.io.File::: class get file name
com.sun.java.util.jar.pack.Package.Class#toString()->String::: class to string
com.sun.java.util.jar.pack.Package#addClass(Class)->void::: package add class
com.sun.java.util.jar.pack.Package#getFiles()->List::: package get files
com.sun.java.util.jar.pack.Package#getClassStubs()->List::: package get class stubs
com.sun.java.util.jar.pack.Package.File#isDirectory()->boolean::: file is directory
com.sun.java.util.jar.pack.Package.File#isClassStub()->boolean::: file is class stub
com.sun.java.util.jar.pack.Package.File#getStubClass()->Class::: file get stub class
com.sun.java.util.jar.pack.Package.File#isTrivialClassStub()->boolean::: file is trivial class stub
com.sun.java.util.jar.pack.Package.File#equals(Object)->boolean::: file equals
com.sun.java.util.jar.pack.Package.File#hashCode()->int::: file hash code
com.sun.java.util.jar.pack.Package.File#compareTo(File)->int::: file compare to
com.sun.java.util.jar.pack.Package.File#toString()->String::: file to string
com.sun.java.util.jar.pack.Package.File#getFileName()->java.io.File::: file get file name
com.sun.java.util.jar.pack.Package.File#getFileName(java.io.File)->java.io.File::: file get file name
com.sun.java.util.jar.pack.Package.File#addBytes(byte[])->void::: file add bytes
com.sun.java.util.jar.pack.Package.File#addBytes(byte[], int, int)->void::: file add bytes
com.sun.java.util.jar.pack.Package.File#getFileLength()->long::: file get file length
com.sun.java.util.jar.pack.Package.File#writeTo(OutputStream)->void::: file write to
com.sun.java.util.jar.pack.Package.File#readFrom(InputStream)->void::: file read from
com.sun.java.util.jar.pack.Package.File#getInputStream()->InputStream::: file get input stream
com.sun.java.util.jar.pack.Package.File#visitRefs(int, Collection)->void::: file visit refs
com.sun.java.util.jar.pack.Package#newStub(String)->File::: package new stub
com.sun.java.util.jar.pack.Package#addFile(File)->void::: package add file
com.sun.java.util.jar.pack.Package#getAllInnerClasses()->List::: package get all inner classes
com.sun.java.util.jar.pack.Package#setAllInnerClasses(Collection)->void::: package set all inner classes
com.sun.java.util.jar.pack.Package#getGlobalInnerClass(Entry)->InnerClass:::Return a global inner class record for the given thisClass.
com.sun.java.util.jar.pack.Package.InnerClass#equals(Object)->boolean::: inner class equals
com.sun.java.util.jar.pack.Package.InnerClass#hashCode()->int::: inner class hash code
com.sun.java.util.jar.pack.Package.InnerClass#compareTo(InnerClass)->int::: inner class compare to
com.sun.java.util.jar.pack.Package.InnerClass#visitRefs(int, Collection)->void::: inner class visit refs
com.sun.java.util.jar.pack.Package.InnerClass#toString()->String::: inner class to string
com.sun.java.util.jar.pack.Package#parseInnerClassName(String)->String[]::: package parse inner class name
com.sun.java.util.jar.pack.Package#getObviousSourceFile(String)->String::: package get obvious source file
com.sun.java.util.jar.pack.Package#getRefString(String)->Utf8Entry::: package get ref string
com.sun.java.util.jar.pack.Package#getRefLiteral(Comparable)->LiteralEntry::: package get ref literal
com.sun.java.util.jar.pack.Package#stripAttributeKind(String)->void::: package strip attribute kind
com.sun.java.util.jar.pack.Package#trimToSize()->void::: package trim to size
com.sun.java.util.jar.pack.Package#strip(String)->void::: package strip
com.sun.java.util.jar.pack.Package#stripConstantFields()->void::: package strip constant fields
com.sun.java.util.jar.pack.Package#visitRefs(int, Collection)->void::: package visit refs
com.sun.java.util.jar.pack.Package#reorderFiles(boolean, boolean)->void::: package reorder files
com.sun.java.util.jar.pack.Package#trimStubs()->void::: package trim stubs
com.sun.java.util.jar.pack.Package#buildGlobalConstantPool(Set)->void::: package build global constant pool
com.sun.java.util.jar.pack.Package#ensureAllClassFiles()->void::: package ensure all class files
com.sun.java.util.jar.pack.Package.Version#toString()->String::: version to string
com.sun.java.util.jar.pack.Package.Version#equals(Object)->boolean::: version equals
com.sun.java.util.jar.pack.Package.Version#intValue()->int::: version int value
com.sun.java.util.jar.pack.Package.Version#hashCode()->int::: version hash code
com.sun.java.util.jar.pack.Package.Version#of(int, int)->Version::: version of
com.sun.java.util.jar.pack.Package.Version#of(byte[])->Version::: version of
com.sun.java.util.jar.pack.Package.Version#of(int)->Version::: version of
com.sun.java.util.jar.pack.Package.Version#makeVersion(PropMap, String)->Version::: version make version
com.sun.java.util.jar.pack.Package.Version#asBytes()->byte[]::: version as bytes
com.sun.java.util.jar.pack.Package.Version#compareTo(Version)->int::: version compare to
com.sun.java.util.jar.pack.Package.Version#lessThan(Version)->boolean::: version less than
com.sun.java.util.jar.pack.Package.Version#greaterThan(Version)->boolean::: version greater than
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#atLimit()->boolean::: limited buffer at limit
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#getBytesServed()->long::: limited buffer get bytes served
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#setReadLimit(long)->void::: limited buffer set read limit
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#getReadLimit()->long::: limited buffer get read limit
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#read()->int::: limited buffer read
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#read(byte[], int, int)->int::: limited buffer read
com.sun.java.util.jar.pack.PackageReader.LimitedBuffer#skip(long)->long::: limited buffer skip
com.sun.java.util.jar.pack.PackageReader#read()->void::: package reader read
com.sun.java.util.jar.pack.PackageReader#readFileHeader()->void::: package reader read file header
com.sun.java.util.jar.pack.PackageReader#readArchiveMagic()->void::: package reader read archive magic
com.sun.java.util.jar.pack.PackageReader#checkArchiveVersion()->void::: package reader check archive version
com.sun.java.util.jar.pack.PackageReader#readArchiveHeader()->void::: package reader read archive header
com.sun.java.util.jar.pack.PackageReader#readBandHeaders()->void::: package reader read band headers
com.sun.java.util.jar.pack.PackageReader#readConstantPoolCounts(boolean, boolean)->void::: package reader read constant pool counts
com.sun.java.util.jar.pack.PackageReader#getCPIndex(byte)->Index::: package reader get index
com.sun.java.util.jar.pack.PackageReader#initCPIndex(byte, Entry[])->Index::: package reader init index
com.sun.java.util.jar.pack.PackageReader#checkLegacy(String)->void::: package reader check legacy
com.sun.java.util.jar.pack.PackageReader#readConstantPool()->void::: package reader read constant pool
com.sun.java.util.jar.pack.PackageReader#readUtf8Bands(Entry[])->void::: package reader read utf8 bands
com.sun.java.util.jar.pack.PackageReader#readSignatureBands(Entry[])->void::: package reader read signature bands
com.sun.java.util.jar.pack.PackageReader#readMemberRefs(byte, Entry[], CPRefBand, CPRefBand)->void::: package reader read member refs
com.sun.java.util.jar.pack.PackageReader#readFiles()->void::: package reader read files
com.sun.java.util.jar.pack.PackageReader#readAttrDefs()->void::: package reader read attr defs
com.sun.java.util.jar.pack.PackageReader#readInnerClasses()->void::: package reader read inner classes
com.sun.java.util.jar.pack.PackageReader#readLocalInnerClasses(Class)->void::: package reader read local inner classes
com.sun.java.util.jar.pack.PackageReader#readClasses()->Class[]::: package reader read classes
com.sun.java.util.jar.pack.PackageReader#reconstructClass(Class)->void::: package reader reconstruct class
com.sun.java.util.jar.pack.PackageReader#reconstructLocalCPMap(Class)->Entry[]::: package reader reconstruct local map
com.sun.java.util.jar.pack.PackageReader#readMembers(Class[])->void::: package reader read members
com.sun.java.util.jar.pack.PackageReader#buildCodeAttrs(List)->Code[]::: package reader build code attrs
com.sun.java.util.jar.pack.PackageReader#readCodeHeaders()->void::: package reader read code headers
com.sun.java.util.jar.pack.PackageReader#readCodeHandlers()->void::: package reader read code handlers
com.sun.java.util.jar.pack.PackageReader#fixupCodeHandlers()->void::: package reader fixup code handlers
com.sun.java.util.jar.pack.PackageReader#countAndReadAttrs(int, Collection)->void::: package reader count and read attrs
com.sun.java.util.jar.pack.PackageReader#countAttrs(int, Collection)->void::: package reader count attrs
com.sun.java.util.jar.pack.PackageReader#badAttrIndex(int, int)->void::: package reader bad attr index
com.sun.java.util.jar.pack.PackageReader#readAttrs(int, Collection)->void::: package reader read attrs
com.sun.java.util.jar.pack.PackageReader#readByteCodes()->void::: package reader read byte codes
com.sun.java.util.jar.pack.PackageWriter#write()->void::: package writer write
com.sun.java.util.jar.pack.PackageWriter#setup()->void::: package writer setup
com.sun.java.util.jar.pack.PackageWriter#chooseDefaultPackageVersion()->void::: package writer choose default package version
com.sun.java.util.jar.pack.PackageWriter#checkVersion()->void::: package writer check version
com.sun.java.util.jar.pack.PackageWriter#setArchiveOptions()->void::: package writer set archive options
com.sun.java.util.jar.pack.PackageWriter#writeFileHeader()->void::: package writer write file header
com.sun.java.util.jar.pack.PackageWriter#writeArchiveMagic()->void::: package writer write archive magic
com.sun.java.util.jar.pack.PackageWriter#writeArchiveHeader()->void::: package writer write archive header
com.sun.java.util.jar.pack.PackageWriter#writeConstantPoolCounts(boolean, boolean)->void::: package writer write constant pool counts
com.sun.java.util.jar.pack.PackageWriter#getCPIndex(byte)->Index::: package writer get index
com.sun.java.util.jar.pack.PackageWriter#writeConstantPool()->void::: package writer write constant pool
com.sun.java.util.jar.pack.PackageWriter#writeUtf8Bands(Entry[])->void::: package writer write utf8 bands
com.sun.java.util.jar.pack.PackageWriter#writeSignatureBands(Entry[])->void::: package writer write signature bands
com.sun.java.util.jar.pack.PackageWriter#writeMemberRefs(byte, Entry[], CPRefBand, CPRefBand)->void::: package writer write member refs
com.sun.java.util.jar.pack.PackageWriter#writeFiles()->void::: package writer write files
com.sun.java.util.jar.pack.PackageWriter#collectAttributeLayouts()->void::: package writer collect attribute layouts
com.sun.java.util.jar.pack.PackageWriter#visitAttributeLayoutsIn(int, Attribute.Holder)->void::: package writer visit attribute layouts in
com.sun.java.util.jar.pack.PackageWriter#writeAttrDefs()->void::: package writer write attr defs
com.sun.java.util.jar.pack.PackageWriter#writeAttrCounts()->void::: package writer write attr counts
com.sun.java.util.jar.pack.PackageWriter#trimClassAttributes()->void::: package writer trim class attributes
com.sun.java.util.jar.pack.PackageWriter#collectInnerClasses()->void::: package writer collect inner classes
com.sun.java.util.jar.pack.PackageWriter#writeInnerClasses()->void::: package writer write inner classes
com.sun.java.util.jar.pack.PackageWriter#writeLocalInnerClasses(Class)->void:::If there are any extra InnerClasses entries to write which are  not already implied by the global table, put them into a  local attribute
com.sun.java.util.jar.pack.PackageWriter#writeClassesAndByteCodes()->void::: package writer write classes and byte codes
com.sun.java.util.jar.pack.PackageWriter#writeMembers(Class)->void::: package writer write members
com.sun.java.util.jar.pack.PackageWriter#writeCodeHeader(Code)->void::: package writer write code header
com.sun.java.util.jar.pack.PackageWriter#writeCodeHandlers(Code)->void::: package writer write code handlers
com.sun.java.util.jar.pack.PackageWriter#writeAttrs(int, Attribute.Holder, Class)->void::: package writer write attrs
com.sun.java.util.jar.pack.PackageWriter#writeByteCodes(Code)->void::: package writer write byte codes
com.sun.java.util.jar.pack.PackageWriter#printCodeHist()->void::: package writer print code hist
com.sun.java.util.jar.pack.PackerImpl#properties()->SortedMap:::Get the set of options for the pack and unpack engines.
com.sun.java.util.jar.pack.PackerImpl#pack(JarFile, OutputStream)->void:::Takes a JarFile and converts into a pack-stream
com.sun.java.util.jar.pack.PackerImpl#pack(JarInputStream, OutputStream)->void:::Takes a JarInputStream and converts into a pack-stream
com.sun.java.util.jar.pack.PopulationCoding#setFavoredValues(int[], int)->void::: population coding set favored values
com.sun.java.util.jar.pack.PopulationCoding#setFavoredValues(int[])->void::: population coding set favored values
com.sun.java.util.jar.pack.PopulationCoding#setHistogram(Histogram)->void::: population coding set histogram
com.sun.java.util.jar.pack.PopulationCoding#setL(int)->void::: population coding set l
com.sun.java.util.jar.pack.PopulationCoding#fitTokenCoding(int, int)->Coding::: population coding fit token coding
com.sun.java.util.jar.pack.PopulationCoding#setFavoredCoding(CodingMethod)->void::: population coding set favored coding
com.sun.java.util.jar.pack.PopulationCoding#setTokenCoding(CodingMethod)->void::: population coding set token coding
com.sun.java.util.jar.pack.PopulationCoding#setUnfavoredCoding(CodingMethod)->void::: population coding set unfavored coding
com.sun.java.util.jar.pack.PopulationCoding#favoredValueMaxLength()->int::: population coding favored value max length
com.sun.java.util.jar.pack.PopulationCoding#resortFavoredValues()->void::: population coding resort favored values
com.sun.java.util.jar.pack.PopulationCoding#getToken(int)->int::: population coding get token
com.sun.java.util.jar.pack.PopulationCoding#encodeValues(int[], int, int)->int[][]::: population coding encode values
com.sun.java.util.jar.pack.PopulationCoding#writeArrayTo(OutputStream, int[], int, int)->void::: population coding write array to
com.sun.java.util.jar.pack.PopulationCoding#writeSequencesTo(OutputStream, int[], int[])->void::: population coding write sequences to
com.sun.java.util.jar.pack.PopulationCoding#computeSentinelValue()->int::: population coding compute sentinel value
com.sun.java.util.jar.pack.PopulationCoding#readArrayFrom(InputStream, int[], int, int)->void::: population coding read array from
com.sun.java.util.jar.pack.PopulationCoding#readFavoredValuesFrom(InputStream, int)->int[]::: population coding read favored values from
com.sun.java.util.jar.pack.PopulationCoding#getMetaCoding(Coding)->byte[]::: population coding get meta coding
com.sun.java.util.jar.pack.PopulationCoding#parseMetaCoding(byte[], int, Coding, CodingMethod[])->int::: population coding parse meta coding
com.sun.java.util.jar.pack.PopulationCoding#toString()->String::: population coding to string
com.sun.java.util.jar.pack.PropMap#put(String, String)->String::: prop map put
com.sun.java.util.jar.pack.PropMap#prefixMap(String)->SortedMap::: prop map prefix map
com.sun.java.util.jar.pack.PropMap#getProperty(String)->String::: prop map get property
com.sun.java.util.jar.pack.PropMap#getProperty(String, String)->String::: prop map get property
com.sun.java.util.jar.pack.PropMap#setProperty(String, String)->String::: prop map set property
com.sun.java.util.jar.pack.PropMap#getProperties(String)->List::: prop map get properties
com.sun.java.util.jar.pack.PropMap#getBoolean(String)->boolean::: prop map get boolean
com.sun.java.util.jar.pack.PropMap#setBoolean(String, boolean)->boolean::: prop map set boolean
com.sun.java.util.jar.pack.PropMap#toInteger(String)->int::: prop map to integer
com.sun.java.util.jar.pack.PropMap#toInteger(String, int)->int::: prop map to integer
com.sun.java.util.jar.pack.PropMap#getInteger(String, int)->int::: prop map get integer
com.sun.java.util.jar.pack.PropMap#getInteger(String)->int::: prop map get integer
com.sun.java.util.jar.pack.PropMap#setInteger(String, int)->int::: prop map set integer
com.sun.java.util.jar.pack.PropMap#toLong(String)->long::: prop map to long
com.sun.java.util.jar.pack.PropMap#getLong(String)->long::: prop map get long
com.sun.java.util.jar.pack.PropMap#setLong(String, long)->long::: prop map set long
com.sun.java.util.jar.pack.PropMap#getTime(String)->int::: prop map get time
com.sun.java.util.jar.pack.PropMap#list(PrintStream)->void::: prop map list
com.sun.java.util.jar.pack.PropMap#list(PrintWriter)->void::: prop map list
com.sun.java.util.jar.pack.PropMap#size()->int::: prop map size
com.sun.java.util.jar.pack.PropMap#isEmpty()->boolean::: prop map is empty
com.sun.java.util.jar.pack.PropMap#containsKey(Object)->boolean::: prop map contains key
com.sun.java.util.jar.pack.PropMap#containsValue(Object)->boolean::: prop map contains value
com.sun.java.util.jar.pack.PropMap#get(Object)->String::: prop map get
com.sun.java.util.jar.pack.PropMap#remove(Object)->String::: prop map remove
com.sun.java.util.jar.pack.PropMap#putAll(Map)->void::: prop map put all
com.sun.java.util.jar.pack.PropMap#clear()->void::: prop map clear
com.sun.java.util.jar.pack.PropMap#keySet()->Set::: prop map key set
com.sun.java.util.jar.pack.PropMap#values()->Collection::: prop map values
com.sun.java.util.jar.pack.PropMap#entrySet()->Set>::: prop map entry set
com.sun.java.util.jar.pack.PropMap#comparator()->Comparator::: prop map comparator
com.sun.java.util.jar.pack.PropMap#subMap(String, String)->SortedMap::: prop map sub map
com.sun.java.util.jar.pack.PropMap#headMap(String)->SortedMap::: prop map head map
com.sun.java.util.jar.pack.PropMap#tailMap(String)->SortedMap::: prop map tail map
com.sun.java.util.jar.pack.PropMap#firstKey()->String::: prop map first key
com.sun.java.util.jar.pack.PropMap#lastKey()->String::: prop map last key
com.sun.java.util.jar.pack.TLGlobals#getPropMap()->SortedMap::: globals get prop map
com.sun.java.util.jar.pack.TLGlobals#getUtf8Entries()->Map::: globals get utf8 entries
com.sun.java.util.jar.pack.TLGlobals#getClassEntries()->Map::: globals get class entries
com.sun.java.util.jar.pack.TLGlobals#getLiteralEntries()->Map::: globals get literal entries
com.sun.java.util.jar.pack.TLGlobals#getDescriptorEntries()->Map::: globals get descriptor entries
com.sun.java.util.jar.pack.TLGlobals#getSignatureEntries()->Map::: globals get signature entries
com.sun.java.util.jar.pack.TLGlobals#getMemberEntries()->Map::: globals get member entries
com.sun.java.util.jar.pack.TLGlobals#getMethodHandleEntries()->Map::: globals get method handle entries
com.sun.java.util.jar.pack.TLGlobals#getMethodTypeEntries()->Map::: globals get method type entries
com.sun.java.util.jar.pack.TLGlobals#getInvokeDynamicEntries()->Map::: globals get invoke dynamic entries
com.sun.java.util.jar.pack.TLGlobals#getBootstrapMethodEntries()->Map::: globals get bootstrap method entries
com.sun.java.util.jar.pack.UnpackerImpl#properties()->SortedMap:::Get the set of options for the pack and unpack engines.
com.sun.java.util.jar.pack.UnpackerImpl#toString()->String::: unpacker impl to string
com.sun.java.util.jar.pack.UnpackerImpl#unpack(InputStream, JarOutputStream)->void:::Takes a packed-stream InputStream, and writes to a JarOutputStream
com.sun.java.util.jar.pack.UnpackerImpl#unpack(File, JarOutputStream)->void:::Takes an input File containing the pack file, and generates a JarOutputStream
com.sun.java.util.jar.pack.Utils#getTLGlobals()->TLGlobals::: utils get globals
com.sun.java.util.jar.pack.Utils#currentPropMap()->PropMap::: utils current prop map
com.sun.java.util.jar.pack.Utils.Pack200Logger#warning(String, Object)->void::: pack200 logger warning
com.sun.java.util.jar.pack.Utils.Pack200Logger#warning(String)->void::: pack200 logger warning
com.sun.java.util.jar.pack.Utils.Pack200Logger#info(String)->void::: pack200 logger info
com.sun.java.util.jar.pack.Utils.Pack200Logger#fine(String)->void::: pack200 logger fine
com.sun.java.util.jar.pack.Utils#getVersionString()->String::: utils get version string
com.sun.java.util.jar.pack.Utils#markJarFile(JarOutputStream)->void::: utils mark jar file
com.sun.java.util.jar.pack.Utils#copyJarFile(JarInputStream, JarOutputStream)->void::: utils copy jar file
com.sun.java.util.jar.pack.Utils#copyJarFile(JarFile, JarOutputStream)->void::: utils copy jar file
com.sun.java.util.jar.pack.Utils#copyJarFile(JarInputStream, OutputStream)->void::: utils copy jar file
com.sun.java.util.jar.pack.Utils#copyJarFile(JarFile, OutputStream)->void::: utils copy jar file
com.sun.java.util.jar.pack.Utils#getJarEntryName(String)->String::: utils get jar entry name
com.sun.java.util.jar.pack.Utils#zeString(ZipEntry)->String::: utils ze string
com.sun.java.util.jar.pack.Utils#readMagic(BufferedInputStream)->byte[]::: utils read magic
com.sun.java.util.jar.pack.Utils#isJarMagic(byte[])->boolean::: utils is jar magic
com.sun.java.util.jar.pack.Utils#isPackMagic(byte[])->boolean::: utils is pack magic
com.sun.java.util.jar.pack.Utils#isGZIPMagic(byte[])->boolean::: utils is magic

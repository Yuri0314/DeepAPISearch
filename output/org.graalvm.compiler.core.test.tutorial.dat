InvokeGraal#compileAndInstallMethod(ResolvedJavaMethod):::The simplest way to compile a method, using the default behavior for everything.:::compilationId->backend->getCompilationIdentifier->options->getInitialOptions->debug->DebugContext->create->try->s->debug->String->valueOf->new->DebugDumpScope->scope->graph->new->StructuredGraph.Builder->method->compilationId->build->graphBuilderSuite->backend->getSuites->getDefaultGraphBuilderSuite->suites->backend->getSuites->getDefaultSuites->lirSuites->backend->getSuites->getDefaultLIRSuites->optimisticOpts->profilingInfo->graph->getProfilingInfo->compilationResult->graph->compilationId->new->CompilationResult->factory->GraalCompiler->compileGraph->return->backend->asCompilationRequest->addInstalledCode->catch->throw->debug->handle->finally
InvokeGraal#findMethod(Class, String):::Look up a method using Java reflection and convert it to the Graal API method object.:::reflectionMethod->foreach->declaringClass->getDeclaredMethods->if->m->getName->equals->return->metaAccess->lookupJavaMethod
StaticAnalysis#addMethod(ResolvedJavaMethod):::Adds a root method to the static analysis:::if->method->isStatic->method->getSignature->getParameterCount->method->format->error->results->lookupMethod->addToWorklist
StaticAnalysis#finish():::Performs the fixed-point analysis that finds all methods transitively reachable from the #addMethod root methods.:::while->worklist->isEmpty->worklist->removeFirst->process
StaticAnalysis#getResults():::Returns the static analysis results computed by StaticAnalysis#finish.:::return
StaticAnalysis.Results#getAllInstantiatedTypes():::All TypeFlow#getTypes() types that are found to be instantiated, i.e., all types allocated by the reachable instance and array allocation bytecodes.:::return
StaticAnalysis.Results#lookupField(ResolvedJavaField):::All TypeFlow#getTypes() types that the given field can have, i.e., all types assigned by the reachable field store bytecodes.:::result->fields->get->if->new->TypeFlow->fields->put->return
StaticAnalysis.Results#lookupMethod(ResolvedJavaMethod):::All TypeFlow#getTypes() types that MethodState#formalParameters parameters and MethodState#formalReturn return value of the given method can have.:::result->methods->get->if->new->MethodState->methods->put->return
StaticAnalysis.MethodState#getFormalParameters():::All TypeFlow#getTypes() types that the parameters of this method can have.:::return
StaticAnalysis.MethodState#getFormalReturn():::All TypeFlow#getTypes() types that the return value of this method can have.:::return
StaticAnalysis.TypeFlow#getTypes():::Returns the types of this element.:::return
StaticAnalysis.TypeFlow#addTypes(Set):::Adds new types to this element:::if->types->addAll->addToWorklist
StaticAnalysis.TypeFlow#addUse(TypeFlow):::Adds a new use to this element:::if->uses->add->use->addTypes
StaticAnalysis.TypeFlow#process():::Processing of the worklist element: propagate the types to all usages:::foreach->use->addTypes

GraalTutorial#testGetBytecodes()::: graal tutorial test get bytecodes:::reflectionMethod->getDeclaredMethod->method->metaAccess->lookupJavaMethod->bytecodes->method->getCode->disassembly->new->BytecodeDisassembler->disassemble->disassemblyLineRE->Pattern->compile->foreach->disassembly->split->Assert->disassemblyLineRE->matcher->find->assertTrue->Assert->assertTrue
GraalTutorial#testStringHashCode()::: graal tutorial test string hash code:::expectedResult->hashCode->installedCode->findMethod->compileAndInstallMethod->result->installedCode->executeVarargs->Assert->assertEquals
GraalTutorial#speculativeOptimization(boolean)::: graal tutorial speculative optimization:::if->return
GraalTutorial#testSpeculativeOptimization()::: graal tutorial test speculative optimization:::for->i->compiledMethod->findMethod->compileAndInstallMethod->compiledMethod->executeVarargs->Assert->assertEquals->Assert->assertEquals->findMethod->compileAndInstallMethod->compiledMethod->executeVarargs->Assert->assertEquals->Assert->assertEquals
GraalTutorial#identityHashCodeUsage(Object)::: graal tutorial identity hash code usage:::return->System->identityHashCode
GraalTutorial#testIdentityHashCodeUsage()::: graal tutorial test identity hash code usage:::a->new->Object->expectedResult->identityHashCodeUsage->compiledMethod->findMethod->compileAndInstallMethod->result->compiledMethod->executeVarargs->Assert->assertEquals
GraalTutorial#instanceOfUsage(Object)::: graal tutorial instance of usage:::if->return->else->return
GraalTutorial#testInstanceOfUsage()::: graal tutorial test instance of usage:::a->new->A->b->new->B->expectedResult->instanceOfUsage->for->i->compiledMethod->findMethod->compileAndInstallMethod->result->compiledMethod->executeVarargs->Assert->assertEquals
GraalTutorial#intrinsicIntegerReverseBytes(int)::: graal tutorial intrinsic integer reverse bytes:::return->Integer->reverseBytes
GraalTutorial#testIntrinsicIntegerReverseBytes()::: graal tutorial test intrinsic integer reverse bytes:::input->expected->intrinsicIntegerReverseBytes->compiledMethod->findMethod->compileAndInstallMethod->actual->compiledMethod->executeVarargs->Assert->assertEquals
InvokeGraal#compileAndInstallMethod(ResolvedJavaMethod):::The simplest way to compile a method, using the default behavior for everything.:::compilationId->backend->getCompilationIdentifier->options->getInitialOptions->debug->DebugContext->create->try->s->debug->String->valueOf->new->DebugDumpScope->scope->graph->new->StructuredGraph.Builder->method->compilationId->build->graphBuilderSuite->backend->getSuites->getDefaultGraphBuilderSuite->suites->backend->getSuites->getDefaultSuites->lirSuites->backend->getSuites->getDefaultLIRSuites->optimisticOpts->profilingInfo->graph->getProfilingInfo->compilationResult->graph->compilationId->new->CompilationResult->factory->GraalCompiler->compileGraph->return->backend->asCompilationRequest->addInstalledCode->catch->throw->debug->handle->finally
InvokeGraal#findMethod(Class, String):::Look up a method using Java reflection and convert it to the Graal API method object.:::reflectionMethod->foreach->declaringClass->getDeclaredMethods->if->m->getName->equals->return->metaAccess->lookupJavaMethod
StaticAnalysis#addMethod(ResolvedJavaMethod):::Adds a root method to the static analysis:::if->method->isStatic->method->getSignature->getParameterCount->method->format->error->results->lookupMethod->addToWorklist
StaticAnalysis#finish():::Performs the fixed-point analysis that finds all methods transitively reachable from the #addMethod root methods.:::while->worklist->isEmpty->worklist->removeFirst->process
StaticAnalysis#getResults():::Returns the static analysis results computed by StaticAnalysis#finish.:::return
StaticAnalysis#addToWorklist(WorklistEntry)::: static analysis add to worklist:::worklist->addLast
StaticAnalysis#error(String)::: static analysis error:::throw->GraalError->shouldNotReachHere
StaticAnalysis.WorklistEntry#process()::: worklist entry process:::
StaticAnalysis.Results#getAllInstantiatedTypes():::All TypeFlow#getTypes() types that are found to be instantiated, i.e., all types allocated by the reachable instance and array allocation bytecodes.:::return
StaticAnalysis.Results#lookupField(ResolvedJavaField):::All TypeFlow#getTypes() types that the given field can have, i.e., all types assigned by the reachable field store bytecodes.:::result->fields->get->if->new->TypeFlow->fields->put->return
StaticAnalysis.Results#lookupMethod(ResolvedJavaMethod):::All TypeFlow#getTypes() types that MethodState#formalParameters parameters and MethodState#formalReturn return value of the given method can have.:::result->methods->get->if->new->MethodState->methods->put->return
StaticAnalysis.MethodState#getFormalParameters():::All TypeFlow#getTypes() types that the parameters of this method can have.:::return
StaticAnalysis.MethodState#getFormalReturn():::All TypeFlow#getTypes() types that the return value of this method can have.:::return
StaticAnalysis.MethodState#process()::: method state process:::if->options->getInitialOptions->debug->DebugContext->create->graph->new->StructuredGraph.Builder->method->build->try->scope->debug->scope->plugins->new->InvocationPlugins->new->Plugins->graphBuilderConfig->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderConfig->withBytecodeExceptionMode->optimisticOpts->graphBuilder->new->GraphBuilderPhase.Instance->graphBuilder->apply->catch->debug->handle->finally->typeFlowBuilder->new->TypeFlowBuilder->typeFlowBuilder->apply
StaticAnalysis.TypeFlow#getTypes():::Returns the types of this element.:::return
StaticAnalysis.TypeFlow#addTypes(Set):::Adds new types to this element:::if->types->addAll->addToWorklist
StaticAnalysis.TypeFlow#addUse(TypeFlow):::Adds a new use to this element:::if->uses->add->use->addTypes
StaticAnalysis.TypeFlow#process():::Processing of the worklist element: propagate the types to all usages:::foreach->use->addTypes
StaticAnalysis.InvokeTypeFlow#linkCallee(ResolvedJavaMethod)::: invoke type flow link callee:::if->callees->add->calleeState->results->lookupMethod->for->i->if->addUse->addToWorklist
StaticAnalysis.InvokeTypeFlow#process()::: invoke type flow process:::if->callTarget->invokeKind->isDirect->callTarget->targetMethod->linkCallee->else->foreach->getTypes->method->type->callTarget->targetMethod->callTarget->invoke->getContextType->resolveConcreteMethod->if->method->isAbstract->linkCallee->super->process
StaticAnalysis.TypeFlowBuilder#registerFlow(ValueNode, TypeFlow):::Register the type flow node for a Graal node.:::unproxiedNode->GraphUtil->unproxify->typeFlows->set
StaticAnalysis.TypeFlowBuilder#lookupFlow(ValueNode):::Lookup the type flow node for a Graal node.:::unproxiedNode->GraphUtil->unproxify->result->typeFlows->get->if->throw->node->getClass->getName->error->return
StaticAnalysis.TypeFlowBuilder#isObject(ValueNode)::: type flow builder is object:::return->node->getStackKind
StaticAnalysis.TypeFlowBuilder#apply()::: type flow builder apply:::foreach->graph->getNodes->if->node->if->isObject->node->index->registerFlow->else->if->node->if->isObject->new->TypeFlow->registerFlow->else->if->node->constant->node->asJavaConstant->if->constant->isNull->new->TypeFlow->registerFlow->super->apply->foreach->graph->getNodes->if->node->if->isObject->phiFlow->lookupFlow->foreach->node->values->lookupFlow->addUse
StaticAnalysis.TypeFlowBuilder#allocation(ValueNode, ResolvedJavaType)::: type flow builder allocation:::flow->new->TypeFlow->flow->Collections->singleton->addTypes->registerFlow->flow->results->getAllInstantiatedTypes->addUse
StaticAnalysis.TypeFlowBuilder#node(FixedNode)::: type flow builder node:::if->node->node->instanceClass->allocation->else->if->node->node->elementType->getArrayClass->allocation->else->if->node->if->isObject->results->node->field->lookupField->registerFlow->else->if->node->if->node->value->isObject->fieldFlow->results->node->field->lookupField->node->value->lookupFlow->addUse->else->if->node->if->node->result->node->result->isObject->node->result->lookupFlow->addUse->else->if->invoke->callTarget->invoke->callTarget->actualParameters->callTarget->arguments->size->new->TypeFlowArr->for->i->actualReturn->if->invoke->asNode->isObject->new->TypeFlow->invoke->asNode->registerFlow->invokeFlow->new->InvokeTypeFlow->if->callTarget->invokeKind->isIndirect->callTarget->arguments->get->lookupFlow->addUse->addToWorklist
StaticAnalysisTests.A#foo(Object)::: a foo:::return
StaticAnalysisTests.B#foo(Object)::: b foo:::if->return->else->return->super->foo
StaticAnalysisTests#test01Entry()::: static analysis tests test01 entry:::a->new->A->a->foo
StaticAnalysisTests#test01()::: static analysis tests test01:::sa->new->StaticAnalysis->sa->findMethod->addMethod->sa->finish->sa->getResults->getAllInstantiatedTypes->t->assertEquals->f->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalParameters->assertEquals->m->getFormalReturn->assertEquals
StaticAnalysisTests#test02Entry()::: static analysis tests test02 entry:::a->new->A->a->new->Data->foo->b->new->B->b->foo
StaticAnalysisTests#test02()::: static analysis tests test02:::sa->new->StaticAnalysis->sa->findMethod->addMethod->sa->finish->sa->getResults->getAllInstantiatedTypes->t->t->t->assertEquals->f->assertEquals->m->getFormalParameters->t->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalReturn->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalParameters->assertEquals->m->getFormalReturn->t->assertEquals
StaticAnalysisTests#test03Entry()::: static analysis tests test03 entry:::data->new->Data->new->Integer->a->new->A->a->new->Data->foo->b->new->B->b->foo
StaticAnalysisTests#test03()::: static analysis tests test03:::sa->new->StaticAnalysis->sa->findMethod->addMethod->sa->finish->sa->getResults->getAllInstantiatedTypes->t->t->t->t->assertEquals->f->t->assertEquals->m->getFormalParameters->t->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalReturn->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalParameters->assertEquals->m->getFormalReturn->t->t->assertEquals
StaticAnalysisTests#test04Entry()::: static analysis tests test04 entry:::data->for->i->a->new->A->a->foo
StaticAnalysisTests#test04()::: static analysis tests test04:::sa->new->StaticAnalysis->sa->findMethod->addMethod->sa->finish->sa->getResults->getAllInstantiatedTypes->t->t->t->assertEquals->f->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalParameters->t->assertEquals->m->getFormalReturn->t->assertEquals
StaticAnalysisTests#m(StaticAnalysis, Class, String)::: static analysis tests m:::return->sa->getResults->findMethod->lookupMethod
StaticAnalysisTests#f(StaticAnalysis, Class, String)::: static analysis tests f:::return->sa->getResults->findField->lookupField
StaticAnalysisTests#assertEquals(TypeFlow, Object...)::: static analysis tests assert equals:::actualTypes->actual->getTypes->if->actualTypes->size->actualTypes->Arrays->asList->containsAll->Assert->Arrays->asList->fail
StaticAnalysisTests#t(Class)::: static analysis tests t:::return->providers->getMetaAccess->lookupJavaType
StaticAnalysisTests#findMethod(Class, String)::: static analysis tests find method:::reflectionMethod->foreach->declaringClass->getDeclaredMethods->if->m->getName->equals->return->providers->getMetaAccess->lookupJavaMethod
StaticAnalysisTests#findField(Class, String)::: static analysis tests find field:::reflectionField->try->declaringClass->getDeclaredField->catch->throw->new->AssertionError->finally->return->providers->getMetaAccess->lookupJavaField

org.graalvm.compiler.core.test.tutorial.GraalTutorial#testGetBytecodes()->void::: graal tutorial test get bytecodes
org.graalvm.compiler.core.test.tutorial.GraalTutorial#testStringHashCode()->void::: graal tutorial test string hash code
org.graalvm.compiler.core.test.tutorial.GraalTutorial#speculativeOptimization(boolean)->void::: graal tutorial speculative optimization
org.graalvm.compiler.core.test.tutorial.GraalTutorial#testSpeculativeOptimization()->void::: graal tutorial test speculative optimization
org.graalvm.compiler.core.test.tutorial.GraalTutorial#identityHashCodeUsage(Object)->int::: graal tutorial identity hash code usage
org.graalvm.compiler.core.test.tutorial.GraalTutorial#testIdentityHashCodeUsage()->void::: graal tutorial test identity hash code usage
org.graalvm.compiler.core.test.tutorial.GraalTutorial#instanceOfUsage(Object)->int::: graal tutorial instance of usage
org.graalvm.compiler.core.test.tutorial.GraalTutorial#testInstanceOfUsage()->void::: graal tutorial test instance of usage
org.graalvm.compiler.core.test.tutorial.GraalTutorial#intrinsicIntegerReverseBytes(int)->int::: graal tutorial intrinsic integer reverse bytes
org.graalvm.compiler.core.test.tutorial.GraalTutorial#testIntrinsicIntegerReverseBytes()->void::: graal tutorial test intrinsic integer reverse bytes
org.graalvm.compiler.core.test.tutorial.InvokeGraal#compileAndInstallMethod(ResolvedJavaMethod)->InstalledCode:::The simplest way to compile a method, using the default behavior for everything.
org.graalvm.compiler.core.test.tutorial.InvokeGraal#findMethod(Class, String)->ResolvedJavaMethod:::Look up a method using Java reflection and convert it to the Graal API method object.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis#addMethod(ResolvedJavaMethod)->void:::Adds a root method to the static analysis
org.graalvm.compiler.core.test.tutorial.StaticAnalysis#finish()->void:::Performs the fixed-point analysis that finds all methods transitively reachable from the #addMethod root methods.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis#getResults()->Results:::Returns the static analysis results computed by StaticAnalysis#finish.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis#addToWorklist(WorklistEntry)->void::: static analysis add to worklist
org.graalvm.compiler.core.test.tutorial.StaticAnalysis#error(String)->RuntimeException::: static analysis error
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.WorklistEntry#process()->void::: worklist entry process
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.Results#getAllInstantiatedTypes()->TypeFlow:::All TypeFlow#getTypes() types that are found to be instantiated, i.e., all types allocated by the reachable instance and array allocation bytecodes.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.Results#lookupField(ResolvedJavaField)->TypeFlow:::All TypeFlow#getTypes() types that the given field can have, i.e., all types assigned by the reachable field store bytecodes.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.Results#lookupMethod(ResolvedJavaMethod)->MethodState:::All TypeFlow#getTypes() types that MethodState#formalParameters parameters and MethodState#formalReturn return value of the given method can have.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.MethodState#getFormalParameters()->TypeFlow[]:::All TypeFlow#getTypes() types that the parameters of this method can have.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.MethodState#getFormalReturn()->TypeFlow:::All TypeFlow#getTypes() types that the return value of this method can have.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.MethodState#process()->void::: method state process
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlow#getTypes()->Set:::Returns the types of this element.
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlow#addTypes(Set)->void:::Adds new types to this element
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlow#addUse(TypeFlow)->void:::Adds a new use to this element
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlow#process()->void:::Processing of the worklist element: propagate the types to all usages
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.InvokeTypeFlow#process()->void::: invoke type flow process
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlowBuilder#apply()->void::: type flow builder apply
org.graalvm.compiler.core.test.tutorial.StaticAnalysis.TypeFlowBuilder#node(FixedNode)->void::: type flow builder node
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests.A#foo(Object)->Object::: a foo
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests.B#foo(Object)->Object::: b foo
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test01Entry()->void::: static analysis tests test01 entry
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test01()->void::: static analysis tests test01
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test02Entry()->void::: static analysis tests test02 entry
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test02()->void::: static analysis tests test02
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test03Entry()->void::: static analysis tests test03 entry
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test03()->void::: static analysis tests test03
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test04Entry()->void::: static analysis tests test04 entry
org.graalvm.compiler.core.test.tutorial.StaticAnalysisTests#test04()->void::: static analysis tests test04

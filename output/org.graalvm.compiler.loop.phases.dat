ContextlessLoopPhase#apply(StructuredGraph)::: contextless loop phase apply:::apply
ContextlessLoopPhase#apply(StructuredGraph, boolean)::: contextless loop phase apply:::apply
ContextlessLoopPhase#run(StructuredGraph)::: contextless loop phase run:::
ContextlessLoopPhase#run(StructuredGraph, CoreProviders)::: contextless loop phase run:::run
ConvertDeoptimizeToGuardPhase#run(StructuredGraph, CoreProviders)::: convert deoptimize to guard phase run:::lazyLoops->new->LoopsData->new->LazyValue<>->foreach->graph->getNodes->if->d->getAction->continue->try->closable->d->withNodeSourcePosition->context->getLowerer->propagateFixed->catch->finally->if->foreach->graph->getNodes->try->closable->fixedGuard->withNodeSourcePosition->trySplitFixedGuard->catch->finally->new->DeadCodeEliminationPhase->apply
ConvertDeoptimizeToGuardPhase#trySplitFixedGuard(FixedGuardNode, CoreProviders, LazyValue)::: convert deoptimize to guard phase try split fixed guard:::condition->fixedGuard->condition->if->compare->x->compare->getX->xPhi->if->y->compare->getY->yPhi->if->processFixedGuardAndPhis
ConvertDeoptimizeToGuardPhase#processFixedGuardAndPhis(FixedGuardNode, CoreProviders, CompareNode, ValueNode, ValuePhiNode, ValueNode, ValuePhiNode, LazyValue)::: convert deoptimize to guard phase process fixed guard and phis:::pred->AbstractBeginNode->prevBegin->if->merge->if->xPhi->merge->return->if->yPhi->merge->return->processFixedGuardAndMerge
ConvertDeoptimizeToGuardPhase#processFixedGuardAndMerge(FixedGuardNode, CoreProviders, CompareNode, ValueNode, ValuePhiNode, ValueNode, ValuePhiNode, AbstractMergeNode, LazyValue)::: convert deoptimize to guard phase process fixed guard and merge:::mergePredecessors->merge->cfgPredecessors->snapshot->foreach->if->mergePredecessor->isAlive->break->xs->if->x->asConstant->else->xPhi->valueAt->asConstant->ys->if->y->asConstant->else->yPhi->valueAt->asConstant->if->compare->condition->context->getConstantReflection->compare->unorderedIsTrue->foldCondition->fixedGuard->isNegated->try->position->fixedGuard->withNodeSourcePosition->context->getLowerer->propagateFixed->catch->finally
ConvertDeoptimizeToGuardPhase#propagateFixed(FixedNode, StaticDeoptimizingNode, LoweringProvider, LazyValue)::: convert deoptimize to guard phase propagate fixed:::current->while->if->from->getOptions->getValue->otherGuard->if->otherGuard->computePriority->deopt->computePriority->isHigherPriorityThan->moveAsDeoptAfter->return->else->if->if->mergeNode->next->mergeNode->next->while->mergeNode->isAlive->end->mergeNode->forwardEnds->first->propagateFixed->if->next->isAlive->propagateFixed->return->else->if->current->predecessor->begin->ifNode->current->predecessor->if->isOsrLoopExit->isCountedLoopExit->moveAsDeoptAfter->else->try->closable->ifNode->withNodeSourcePosition->graph->ifNode->graph->conditionNode->ifNode->condition->negateGuardCondition->ifNode->trueSuccessor->survivingSuccessorPosition->ifNode->falseSuccessor->getNodeSourcePosition->ifNode->trueSuccessor->getNodeSourcePosition->guard->graph->deopt->getReason->deopt->getAction->deopt->getSpeculation->new->FixedGuardNode->add->pred->ifNode->predecessor->survivingSuccessor->if->ifNode->falseSuccessor->else->ifNode->trueSuccessor->graph->removeSplitPropagate->newGuard->if->ProxyNode->forGuard->survivingSuccessor->replaceAtUsages->graph->getDebug->log->next->pred->next->pred->setNext->guard->setNext->simplifierTool->GraphUtil->graph->getAssumptions->graph->getOptions->getDefaultSimplifier->survivingSuccessor->simplify->catch->finally->return->else->if->current->predecessor->current->predecessor->moveAsDeoptAfter->return->current->predecessor
ConvertDeoptimizeToGuardPhase#moveAsDeoptAfter(FixedWithNextNode, StaticDeoptimizingNode)::: convert deoptimize to guard phase move as deopt after:::try->position->deopt->asNode->withNodeSourcePosition->next->node->next->if->deopt->asNode->node->node->graph->deopt->getAction->deopt->getReason->deopt->getSpeculation->new->DeoptimizeNode->add->setNext->GraphUtil->killCFG->catch->finally
ConvertDeoptimizeToGuardPhase#isOsrLoopExit(AbstractBeginNode)::: convert deoptimize to guard phase is osr loop exit:::if->return->return->loopBegin->isOsrLoop
ConvertDeoptimizeToGuardPhase#isCountedLoopExit(IfNode, LazyValue)::: convert deoptimize to guard phase is counted loop exit:::loopsData->lazyLoops->get->loop->loopsData->getCFG->getNodeToBlock->get->getLoop->if->loopEx->loopsData->loop->if->loopEx->detectCounted->return->loopEx->counted->getLimitTest->return
LoopFullUnrollPhase#run(StructuredGraph, CoreProviders)::: loop full unroll phase run:::if->graph->getOptions->getValue->debug->graph->getDebug->if->graph->hasLoops->peeled->do->dataCounted->new->LoopsData->dataCounted->detectedCountedLoops->foreach->dataCounted->countedLoops->if->getPolicies->shouldFullUnroll->debug->log->LoopTransformations->fullUnroll->FULLY_UNROLLED_LOOPS->increment->debug->dump->break->dataCounted->deleteUnusedNodes->while
LoopFullUnrollPhase#checkContract()::: loop full unroll phase check contract:::return
LoopPartialUnrollPhase#run(StructuredGraph, CoreProviders)::: loop partial unroll phase run:::if->graph->hasLoops->listener->new->EconomicSetNodeEventListener->changed->opaqueUnrolledStrides->while->try->nes->graph->trackNodeEvents->dataCounted->new->LoopsData->dataCounted->detectedCountedLoops->mark->graph->getMark->prePostInserted->foreach->dataCounted->countedLoops->if->LoopTransformations->isUnrollableLoop->continue->if->getPolicies->shouldPartiallyUnroll->if->loop->loopBegin->isSimpleLoop->LoopTransformations->insertPrePostLoops->else->if->EconomicMap->create->LoopTransformations->partialUnroll->dataCounted->deleteUnusedNodes->if->listener->getNodes->isEmpty->canonicalizer->listener->getNodes->applyIncremental->listener->getNodes->clear->catch->finally->if->try->nes->graph->trackNodeEvents->foreach->opaqueUnrolledStrides->getValues->opaque->remove->if->listener->getNodes->isEmpty->canonicalizer->listener->getNodes->applyIncremental->catch->finally
LoopPartialUnrollPhase#checkCounted(StructuredGraph, Graph.Mark)::: loop partial unroll phase check counted:::dataCounted->new->LoopsData->dataCounted->detectedCountedLoops->foreach->dataCounted->loops->if->graph->anyLoop->loopBegin->isNew->return
LoopPartialUnrollPhase#checkContract()::: loop partial unroll phase check contract:::return
LoopPeelingPhase#run(StructuredGraph, CoreProviders)::: loop peeling phase run:::debug->graph->getDebug->if->graph->hasLoops->data->new->LoopsData->try->s->debug->data->getCFG->scope->foreach->data->outerFirst->if->getPolicies->data->getCFG->context->getMetaAccess->shouldPeel->debug->log->LoopTransformations->peel->debug->dump->data->deleteUnusedNodes->catch->throw->debug->handle->finally
LoopPeelingPhase#codeSizeIncrease()::: loop peeling phase code size increase:::return
LoopPhase#getPolicies()::: loop phase get policies:::return
LoopSafepointEliminationPhase#run(StructuredGraph, MidTierContext)::: loop safepoint elimination phase run:::loops->new->LoopsData->if->context->getOptimisticOptimizations->graph->getOptions->useLoopLimitChecks->graph->getGuardsStage->allowsFloatingGuards->loops->detectedCountedLoops->foreach->loops->countedLoops->if->loop->loop->getChildren->isEmpty->loop->counted->getStamp->getBits->hasSafepoint->foreach->loop->loopBegin->loopEnds->loopEnd->canSafepoint->if->loop->counted->createOverFlowGuard->loop->loopBegin->disableSafepoint->foreach->loops->loops->foreach->loop->loopBegin->loopEnds->b->loops->getCFG->blockFor->while->loop->loop->getHeader->foreach->b->getNodes->if->isGuaranteedSafepoint->loopEnd->disableSafepoint->break->b->getDominator->loops->deleteUnusedNodes
LoopTransformations#peel(LoopEx)::: loop transformations peel:::loop->inside->duplicate->insertBefore->loop->loopBegin->Math->loop->loopBegin->loopFrequency->max->setLoopFrequency
LoopTransformations#fullUnroll(LoopEx, CoreProviders, CanonicalizerPhase)::: loop transformations full unroll:::loopBegin->loop->loopBegin->graph->loopBegin->graph->initialNodeCount->graph->getNodeCount->while->loopBegin->isDeleted->mark->graph->getMark->peel->canonicalizer->applyIncremental->loop->invalidateFragments->if->graph->getNodeCount->MaximumDesiredSize->graph->getOptions->getValue->throw->new->RetryableBailoutException
LoopTransformations#unswitch(LoopEx, List)::: loop transformations unswitch:::firstNode->controlSplitNodeSet->iterator->next->originalLoop->loop->whole->graph->firstNode->graph->loop->loopBegin->incrementUnswitches->newControlSplit->firstNode->copyWithInputs->originalLoop->entryPoint->replaceAtPredecessor->successors->firstNode->successorPositions->iterator->firstPosition->successors->next->originalLoopBegin->BeginNode->originalLoop->entryPoint->begin->firstPosition->set->originalLoopBegin->firstPosition->get->getNodeSourcePosition->setNodeSourcePosition->while->successors->hasNext->position->successors->next->duplicateLoop->originalLoop->duplicate->newBegin->BeginNode->duplicateLoop->entryPoint->begin->newBegin->position->get->getNodeSourcePosition->setNodeSourcePosition->position->set->foreach->duplicatedControlSplit->duplicateLoop->getDuplicatedNode->if->duplicatedControlSplit->isAlive->survivingSuccessor->position->get->survivingSuccessor->replaceAtUsages->graph->removeSplitPropagate->foreach->if->controlSplitNode->isAlive->survivingSuccessor->firstPosition->get->survivingSuccessor->replaceAtUsages->graph->removeSplitPropagate
LoopTransformations#partialUnroll(LoopEx, EconomicMap)::: loop transformations partial unroll:::loop->loopBegin->graph->getDebug->log->newSegment->loop->inside->duplicate->newSegment->insertWithinAfter
LoopTransformations#insertPrePostLoops(LoopEx)::: loop transformations insert pre post loops:::graph->loop->loopBegin->graph->graph->getDebug->log->preLoop->loop->whole->preCounted->loop->counted->preLoopBegin->loop->loopBegin->preLoopExitNode->preCounted->getCountedExit->mainLoop->preLoop->duplicate->postLoop->preLoop->duplicate->preLoopBegin->incrementSplits->preLoopBegin->incrementSplits->preLoopBegin->setPreLoop->graph->getDebug->dump->mainLoopBegin->mainLoop->getDuplicatedNode->mainLoopBegin->setMainLoop->postLoopBegin->postLoop->getDuplicatedNode->postLoopBegin->setPostLoop->postLoopExitNode->postLoop->getDuplicatedNode->postEndNode->getBlockEndAfterLoopExit->postMergeNode->postEndNode->merge->foreach->preLoopBegin->phis->mainPhiNode->mainLoop->getDuplicatedNode->mainPhiNode->setValueAt->mainLoopExitNode->mainLoop->getDuplicatedNode->mainEndNode->getBlockEndAfterLoopExit->mainMergeNode->mainEndNode->merge->postEntryNode->postLoopBegin->forwardEnd->continuationNode->mainMergeNode->next->mainLandingNode->BeginNode->begin->mainLoopExitNode->setNext->preLoopExitNode->mainLoopBegin->forwardEnd->setNext->processPreLoopPhis->continuationNode->predecessor->clearSuccessors->postLoopExitNode->setNext->cleanupMerge->cleanupMerge->updatePreLoopLimit->preLoopBegin->setLoopFrequency->mainLoopBegin->Math->mainLoopBegin->loopFrequency->max->setLoopFrequency->postLoopBegin->Math->postLoopBegin->loopFrequency->max->setLoopFrequency->foreach->preLoop->nodes->filter->graph->removeFixed->foreach->postLoop->nodes->filter->graph->removeFixed->graph->getDebug->dump->return
LoopTransformations#cleanupMerge(AbstractMergeNode, AbstractBeginNode):::Cleanup the merge and remove the predecessors too.:::foreach->mergeNode->cfgPredecessors->snapshot->mergeNode->removeEnd->end->safeDelete->mergeNode->prepareDelete->mergeNode->safeDelete
LoopTransformations#processPreLoopPhis(LoopEx, LoopFragmentWhole, LoopFragmentWhole)::: loop transformations process pre loop phis:::preLoopBegin->preLoop->loopBegin->foreach->preLoopBegin->phis->postPhiNode->postLoop->getDuplicatedNode->mainPhiNode->mainLoop->getDuplicatedNode->postPhiNode->setValueAt->foreach->prePhiNode->usages->snapshot->if->continue->if->preLoop->isOutsideLoop->usage->replaceFirstInput->foreach->preLoop->inside->nodes->foreach->node->usages->snapshot->if->preLoop->isOutsideLoop->postUsage->postLoop->getDuplicatedNode->externalUsage->replaceFirstInput
LoopTransformations#getBlockEndAfterLoopExit(AbstractBeginNode):::Find the end of the block following the LoopExit.:::node->exit->next->return->getBlockEnd
LoopTransformations#getBlockEnd(FixedNode)::: loop transformations get block end:::curNode->while->next->return
LoopTransformations#updatePreLoopLimit(CountedLoopInfo)::: loop transformations update pre loop limit:::newLimit->AddNode->preCounted->getStart->preCounted->getCounter->strideNode->add->ub->preCounted->getLimit->entryCheck->if->preCounted->getDirection->IntegerLessThanNode->create->else->IntegerLessThanNode->create->ConditionalNode->create->compareNode->preCounted->getLimitTest->condition->compareNode->compareNode->graph->addOrUniqueWithInputs->replaceFirstInput
LoopTransformations#findUnswitchable(LoopEx)::: loop transformations find unswitchable:::controls->invariantValue->foreach->loop->whole->nodes->filter->if->loop->ifNode->condition->isOutsideLoop->if->ifNode->condition->new->ArrayList<>->controls->add->else->if->ifNode->condition->controls->add->if->firstSwitch->foreach->loop->whole->nodes->filter->if->switchNode->successors->count->loop->switchNode->value->isOutsideLoop->if->switchNode->value->new->ArrayList<>->controls->add->else->if->switchNode->value->if->firstSwitch->structureEquals->controls->add->return
LoopTransformations#isUnrollableLoop(LoopEx)::: loop transformations is unrollable loop:::if->loop->isCounted->loop->counted->getCounter->isConstantStride->loop->loop->getChildren->isEmpty->return->loopBegin->loop->loopBegin->condition->loop->counted->getLimitTest->condition->if->return->if->condition->condition->getDebug->condition->log->return->stride->loop->counted->getCounter->constantStride->try->Math->addExact->catch->condition->getDebug->log->return->finally->if->loop->canDuplicateLoop->return->if->loopBegin->isMainLoop->loopBegin->isSimpleLoop->if->loop->loop->getBlocks->size->return->condition->getDebug->loop->loop->getBlocks->size->log->return
LoopUnswitchingPhase#run(StructuredGraph)::: loop unswitching phase run:::debug->graph->getDebug->if->graph->hasLoops->unswitched->do->dataUnswitch->new->LoopsData->foreach->dataUnswitch->outerFirst->if->getPolicies->shouldTryUnswitch->controlSplits->LoopTransformations->findUnswitchable->if->UNSWITCH_CANDIDATES->increment->if->getPolicies->shouldUnswitch->if->debug->isLogEnabled->logUnswitch->LoopTransformations->unswitch->debug->dump->UNSWITCHED->increment->break->else->UNSWITCH_EARLY_REJECTS->increment->while
LoopUnswitchingPhase#logUnswitch(LoopEx, List)::: loop unswitching phase log unswitch:::sb->new->StringBuilder->sb->append->append->foreach->sb->append->append->it->controlSplit->successors->iterator->while->it->hasNext->sb->controlSplit->it->next->probability->append->if->it->hasNext->sb->append->sb->append->loop->entryPoint->getDebug->log
LoopUnswitchingPhase#codeSizeIncrease()::: loop unswitching phase code size increase:::return
ReassociateInvariantPhase#run(StructuredGraph)::: reassociate invariant phase run:::iterations->debug->graph->getDebug->try->s->debug->scope->changed->while->dataReassociate->new->LoopsData->foreach->dataReassociate->loops->loop->reassociateInvariants->dataReassociate->deleteUnusedNodes->debug->dump->catch->throw->debug->handle->finally

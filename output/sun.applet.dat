AppletClassLoader#disableRecursiveDirectoryRead()::: applet class loader disable recursive directory read:::
AppletClassLoader#setCodebaseLookup(boolean):::Set the codebase lookup flag.:::
AppletClassLoader#getBaseURL()::: applet class loader get base l:::return
AppletClassLoader#getURLs()::: applet class loader get ls:::jars->super->getURLs->urls->new->URLArr->System->arraycopy->return
AppletClassLoader#addJar(String)::: applet class loader add jar:::url->try->new->URL->catch->throw->new->IllegalArgumentException->finally->addURL
AppletClassLoader#loadClass(String, boolean)::: applet class loader load class:::i->name->lastIndexOf->if->sm->System->getSecurityManager->if->sm->name->substring->checkPackageAccess->try->return->super->loadClass->catch->throw->throw->throw->finally
AppletClassLoader#findClass(String)::: applet class loader find class:::index->name->indexOf->cookie->if->name->name->length->substring->name->substring->try->return->super->findClass->catch->finally->if->throw->new->ClassNotFoundException->encodedName->ParseUtil->name->replace->encodePath->path->new->StringBuffer->append->append->toString->try->b->AccessController->new->PrivilegedExceptionAction<byte[]>->doPrivileged->if->return->defineClass->else->throw->new->ClassNotFoundException->catch->throw->e->getException->new->ClassNotFoundException->finally
AppletClassLoader#getPermissions(CodeSource):::Returns the permissions for the given codesource object:::perms->super->getPermissions->url->codesource->getLocation->path->p->try->url->openConnection->getPermission->catch->finally->if->p->getName->else->if->url->getProtocol->equals->url->getFile->replace->ParseUtil->decode->if->rawPath->if->path->endsWith->endIndex->path->lastIndexOf->if->path->substring->perms->new->FilePermission->add->f->new->File->isDirectory->f->isDirectory->if->rawPath->toLowerCase->endsWith->rawPath->toLowerCase->endsWith->bperm->try->base->openConnection->getPermission->catch->finally->if->bpath->bperm->getName->if->bpath->endsWith->perms->new->FilePermission->add->else->if->base->getProtocol->equals->bpath->base->getFile->replace->ParseUtil->decode->if->bpath->endsWith->perms->new->FilePermission->add->return
AppletClassLoader#getBytes(URL)::: applet class loader get bytes:::uc->url->openConnection->if->huc->code->huc->getResponseCode->if->throw->new->IOException->len->uc->getContentLength->in->uc->getInputStream->new->BufferedInputStream->b->try->in->readAllBytes->if->throw->new->EOFException->catch->finally->in->close->return
AppletClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::if->throw->new->NullPointerException->try->is->synchronized->super->getResourceAsStream->if->url->ParseUtil->encodePath->new->URL->url->openStream->return->catch->return->finally
AppletClassLoader#getResourceAsStreamFromJar(String):::Returns an input stream for reading the specified resource from the the loaded jar files:::if->throw->new->NullPointerException->try->is->synchronized->super->getResourceAsStream->return->catch->return->finally
AppletClassLoader#findResource(String)::: applet class loader find resource:::url->super->findResource->if->name->startsWith->return->if->return->if->insideGetResourceAsStreamFromJar->synchronized->if->return->insideGetResourceAsStream->synchronized->if->try->ParseUtil->encodePath->new->URL->if->resourceExists->catch->finally->return
AppletClassLoader#resourceExists(URL)::: applet class loader resource exists:::ok->try->conn->url->openConnection->if->hconn->hconn->setRequestMethod->code->hconn->getResponseCode->if->return->if->return->else->is->conn->getInputStream->is->close->catch->finally->return
AppletClassLoader#findResources(String)::: applet class loader find resources:::e->super->findResources->if->name->startsWith->return->if->return->u->ParseUtil->encodePath->new->URL->if->resourceExists->url->return->new->Enumeration<URL>
AppletClassLoader#loadCode(String)::: applet class loader load code:::name->replace->name->replace->cookie->index->name->indexOf->if->name->name->length->substring->name->substring->fullName->if->name->endsWith->name->endsWith->name->name->lastIndexOf->substring->try->if->new->StringBuffer->append->toString->return->loadClass->catch->finally->if->new->StringBuffer->append->toString->return->loadClass
AppletClassLoader#getThreadGroup()::: applet class loader get thread group:::synchronized->if->threadGroup->isDestroyed->AccessController->new->PrivilegedAction<Object>->doPrivileged->return
AppletClassLoader#getAppContext()::: applet class loader get app context:::return
AppletClassLoader#grab():::Grab this AppletClassLoader and its ThreadGroup/AppContext, so they won't be destroyed.:::synchronized->getThreadGroup
AppletClassLoader#setExceptionStatus()::: applet class loader set exception status:::
AppletClassLoader#getExceptionStatus()::: applet class loader get exception status:::return
AppletClassLoader#release():::Release this AppletClassLoader and its ThreadGroup/AppContext:::tempAppContext->synchronized->if->else->synchronized->resetAppContext->if->try->tempAppContext->dispose->catch->finally
AppletClassLoader#resetAppContext()::: applet class loader reset app context:::tempAppContext->synchronized->return
AppletClassLoader#setJDK11Target(Class, boolean):::Set applet target level as JDK 1.1.:::jdk11AppletInfo->clazz->toString->Boolean->valueOf->put
AppletClassLoader#setJDK12Target(Class, boolean):::Set applet target level as JDK 1.2.:::jdk12AppletInfo->clazz->toString->Boolean->valueOf->put
AppletClassLoader#isJDK11Target(Class):::Determine if applet is targeted for JDK 1.1.:::return->jdk11AppletInfo->clazz->toString->get
AppletClassLoader#isJDK12Target(Class):::Determine if applet is targeted for JDK 1.2.:::return->jdk12AppletInfo->clazz->toString->get
AppContextCreator#run()::: app context creator run:::SunToolkit->createNewAppContext->synchronized->syncObject->notifyAll
AppletSecurity#reset():::Reset from Properties:::restrictedPackages->clear->AccessController->new->PrivilegedAction<Object>->doPrivileged
AppletSecurity#currentClassLoader():::Returns the class loader of the most recently executing method from a class defined using a non-system class loader:::f->walker->s->AppletSecurity->isNonPrivileged->takeWhile->AppletSecurity->isNonSystemFrame->filter->findFirst->walk->orElse->sm->System->getSecurityManager->if->try->sm->new->AllPermission->checkPermission->catch->return->f->getDeclaringClass->getClassLoader->finally->return
AppletSecurity#isNonPrivileged(StackFrame):::Returns true if the StackFrame is not AccessController.doPrivileged.:::c->f->getDeclaringClass->return->f->getMethodName->equals
AppletSecurity#isNonSystemFrame(StackFrame):::Returns true if the StackFrame is not from a class defined by the system class loader or one of its ancestors.:::loader->ClassLoader->getSystemClassLoader->ld->f->getDeclaringClass->getClassLoader->if->return->while->loader->getParent->if->return->return
AppletSecurity#currentAppletClassLoader():::get the current (first) instance of an AppletClassLoader on the stack.:::loader->currentClassLoader->if->return->context->getClassContext->for->i->for->i->Thread->currentThread->getContextClassLoader->if->return->return
AppletSecurity#inThreadGroup(ThreadGroup):::Returns true if this threadgroup is in the applet's own thread group:::if->currentAppletClassLoader->return->else->return->getThreadGroup->parentOf
AppletSecurity#inThreadGroup(Thread):::Returns true of the threadgroup of thread is in the applet's own threadgroup.:::return->thread->getThreadGroup->inThreadGroup
AppletSecurity#checkAccess(Thread):::Applets are not allowed to manipulate threads outside applet thread groups:::if->t->getState->inThreadGroup->checkPermission
AppletSecurity#checkAccess(ThreadGroup):::Applets are not allowed to manipulate thread groups outside applet thread groups.:::if->checkPermission->else->try->if->inThreadGroup->checkPermission->catch->finally
AppletSecurity#checkPackageAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument:::super->checkPackageAccess->for->iter->restrictedPackages->iterator->iter->hasNext
AppletSecurity#getThreadGroup():::Returns the thread group of the applet:::appletLoader->currentAppletClassLoader->loaderGroup->appletLoader->getThreadGroup->if->return->else->return->super->getThreadGroup
AppletSecurity#getAppContext():::Get the AppContext corresponding to the current context:::appletLoader->currentAppletClassLoader->if->return->else->context->appletLoader->getAppContext->if->throw->new->SecurityException->return

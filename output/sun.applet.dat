AppletClassLoader#setCodebaseLookup(boolean):::Set the codebase lookup flag.:::
AppletClassLoader#getPermissions(CodeSource):::Returns the permissions for the given codesource object:::perms->super->getPermissions->url->codesource->getLocation->path->p->try->url->openConnection->getPermission->catch->finally->if->p->getName->else->if->url->getProtocol->equals->url->getFile->replace->ParseUtil->decode->if->rawPath->if->path->endsWith->endIndex->path->lastIndexOf->if->path->substring->perms->new->FilePermission->add->f->new->File->isDirectory->f->isDirectory->if->rawPath->toLowerCase->endsWith->rawPath->toLowerCase->endsWith->bperm->try->base->openConnection->getPermission->catch->finally->if->bpath->bperm->getName->if->bpath->endsWith->perms->new->FilePermission->add->else->if->base->getProtocol->equals->bpath->base->getFile->replace->ParseUtil->decode->if->bpath->endsWith->perms->new->FilePermission->add->return
AppletClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::if->throw->new->NullPointerException->try->is->synchronized->super->getResourceAsStream->if->url->ParseUtil->encodePath->new->URL->url->openStream->return->catch->return->finally
AppletClassLoader#getResourceAsStreamFromJar(String):::Returns an input stream for reading the specified resource from the the loaded jar files:::if->throw->new->NullPointerException->try->is->synchronized->super->getResourceAsStream->return->catch->return->finally
AppletClassLoader#grab():::Grab this AppletClassLoader and its ThreadGroup/AppContext, so they won't be destroyed.:::synchronized->getThreadGroup
AppletClassLoader#release():::Release this AppletClassLoader and its ThreadGroup/AppContext:::tempAppContext->synchronized->if->else->synchronized->resetAppContext->if->try->tempAppContext->dispose->catch->finally
AppletClassLoader#setJDK11Target(Class, boolean):::Set applet target level as JDK 1.1.:::jdk11AppletInfo->clazz->toString->Boolean->valueOf->put
AppletClassLoader#setJDK12Target(Class, boolean):::Set applet target level as JDK 1.2.:::jdk12AppletInfo->clazz->toString->Boolean->valueOf->put
AppletClassLoader#isJDK11Target(Class):::Determine if applet is targeted for JDK 1.1.:::return->jdk11AppletInfo->clazz->toString->get
AppletClassLoader#isJDK12Target(Class):::Determine if applet is targeted for JDK 1.2.:::return->jdk12AppletInfo->clazz->toString->get
AppletSecurity#reset():::Reset from Properties:::restrictedPackages->clear->AccessController->new->PrivilegedAction<Object>->doPrivileged
AppletSecurity#inThreadGroup(ThreadGroup):::Returns true if this threadgroup is in the applet's own thread group:::if->currentAppletClassLoader->return->else->return->getThreadGroup->parentOf
AppletSecurity#inThreadGroup(Thread):::Returns true of the threadgroup of thread is in the applet's own threadgroup.:::return->thread->getThreadGroup->inThreadGroup
AppletSecurity#checkAccess(Thread):::Applets are not allowed to manipulate threads outside applet thread groups:::if->t->getState->inThreadGroup->checkPermission
AppletSecurity#checkAccess(ThreadGroup):::Applets are not allowed to manipulate thread groups outside applet thread groups.:::if->checkPermission->else->try->if->inThreadGroup->checkPermission->catch->finally
AppletSecurity#checkPackageAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument:::super->checkPackageAccess->for->iter->restrictedPackages->iterator->iter->hasNext
AppletSecurity#getThreadGroup():::Returns the thread group of the applet:::appletLoader->currentAppletClassLoader->loaderGroup->appletLoader->getThreadGroup->if->return->else->return->super->getThreadGroup
AppletSecurity#getAppContext():::Get the AppContext corresponding to the current context:::appletLoader->currentAppletClassLoader->if->return->else->context->appletLoader->getAppContext->if->throw->new->SecurityException->return

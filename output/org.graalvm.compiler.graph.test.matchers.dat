NodeIterableContains#describeTo(Description)::: node iterable contains describe to:::description->appendText->appendValue
NodeIterableContains#contains(T)::: node iterable contains contains:::return->new->NodeIterableContains<>
NodeIterableContains#matchesSafely(NodeIterable, Description)::: node iterable contains matches safely:::mismatchDescription->appendText->appendValue->return->iterable->contains
NodeIterableCount#describeTo(Description)::: node iterable count describe to:::description->appendText->appendValue->appendText
NodeIterableCount#hasCount(int)::: node iterable count has count:::return->new->NodeIterableCount
NodeIterableCount#matchesSafely(NodeIterable, Description)::: node iterable count matches safely:::mismatchDescription->appendText->iterable->count->appendValue->appendText->return->iterable->count
NodeIterableIsEmpty#matchesSafely(NodeIterable, Description)::: node iterable is empty matches safely:::mismatchDescription->appendText->return->iterable->isEmpty
NodeIterableIsEmpty#describeTo(Description)::: node iterable is empty describe to:::description->appendText
NodeIterableIsEmpty#isEmpty()::: node iterable is empty is empty:::return
NodeIterableIsEmpty#isNotEmpty()::: node iterable is empty is not empty:::return->IsNot->not

com.sun.tools.javac.api.BasicJavacTask#instance(Context)->JavacTask::: basic javac task instance
com.sun.tools.javac.api.BasicJavacTask#parse()->Iterable::: basic javac task parse
com.sun.tools.javac.api.BasicJavacTask#analyze()->Iterable::: basic javac task analyze
com.sun.tools.javac.api.BasicJavacTask#generate()->Iterable::: basic javac task generate
com.sun.tools.javac.api.BasicJavacTask#setTaskListener(TaskListener)->void::: basic javac task set task listener
com.sun.tools.javac.api.BasicJavacTask#addTaskListener(TaskListener)->void::: basic javac task add task listener
com.sun.tools.javac.api.BasicJavacTask#removeTaskListener(TaskListener)->void::: basic javac task remove task listener
com.sun.tools.javac.api.BasicJavacTask#getTaskListeners()->Collection::: basic javac task get task listeners
com.sun.tools.javac.api.BasicJavacTask#getTypeMirror(Iterable)->TypeMirror::: basic javac task get type mirror
com.sun.tools.javac.api.BasicJavacTask#getElements()->Elements::: basic javac task get elements
com.sun.tools.javac.api.BasicJavacTask#getTypes()->Types::: basic javac task get types
com.sun.tools.javac.api.BasicJavacTask#addModules(Iterable)->void::: basic javac task add modules
com.sun.tools.javac.api.BasicJavacTask#setProcessors(Iterable)->void::: basic javac task set processors
com.sun.tools.javac.api.BasicJavacTask#setLocale(Locale)->void::: basic javac task set locale
com.sun.tools.javac.api.BasicJavacTask#call()->Boolean::: basic javac task call
com.sun.tools.javac.api.BasicJavacTask#getContext()->Context:::For internal use only
com.sun.tools.javac.api.BasicJavacTask#initPlugins(Set>)->void::: basic javac task init plugins
com.sun.tools.javac.api.BasicJavacTask#initDocLint(List)->void::: basic javac task init doc lint
com.sun.tools.javac.api.ClientCodeWrapper#instance(Context)->ClientCodeWrapper::: client code wrapper instance
com.sun.tools.javac.api.ClientCodeWrapper#wrap(JavaFileManager)->JavaFileManager::: client code wrapper wrap
com.sun.tools.javac.api.ClientCodeWrapper#wrap(FileObject)->FileObject::: client code wrapper wrap
com.sun.tools.javac.api.ClientCodeWrapper#unwrap(FileObject)->FileObject::: client code wrapper unwrap
com.sun.tools.javac.api.ClientCodeWrapper#wrap(JavaFileObject)->JavaFileObject::: client code wrapper wrap
com.sun.tools.javac.api.ClientCodeWrapper#wrapJavaFileObjects(Iterable)->Iterable::: client code wrapper wrap java file objects
com.sun.tools.javac.api.ClientCodeWrapper#unwrap(JavaFileObject)->JavaFileObject::: client code wrapper unwrap
com.sun.tools.javac.api.ClientCodeWrapper#wrap(DiagnosticListener)->DiagnosticListener::: client code wrapper wrap
com.sun.tools.javac.api.ClientCodeWrapper#wrap(TaskListener)->TaskListener::: client code wrapper wrap
com.sun.tools.javac.api.ClientCodeWrapper#unwrap(TaskListener)->TaskListener::: client code wrapper unwrap
com.sun.tools.javac.api.ClientCodeWrapper#unwrap(Collection)->Collection::: client code wrapper unwrap
com.sun.tools.javac.api.ClientCodeWrapper#isTrusted(Object)->boolean::: client code wrapper is trusted
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getClassLoader(Location)->ClassLoader::: wrapped java file manager get class loader
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#list(Location, String, Set, boolean)->Iterable::: wrapped java file manager list
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#inferBinaryName(Location, JavaFileObject)->String::: wrapped java file manager infer binary name
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#isSameFile(FileObject, FileObject)->boolean::: wrapped java file manager is same file
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#handleOption(String, Iterator)->boolean::: wrapped java file manager handle option
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#hasLocation(Location)->boolean::: wrapped java file manager has location
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject::: wrapped java file manager get java file for input
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject::: wrapped java file manager get java file for output
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getFileForInput(Location, String, String)->FileObject::: wrapped java file manager get file for input
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: wrapped java file manager get file for output
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#contains(Location, FileObject)->boolean::: wrapped java file manager contains
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#flush()->void::: wrapped java file manager flush
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#close()->void::: wrapped java file manager close
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getLocationForModule(Location, String)->Location::: wrapped java file manager get location for module
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#getLocationForModule(Location, JavaFileObject)->Location::: wrapped java file manager get location for module
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#inferModuleName(Location)->String::: wrapped java file manager infer module name
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#listLocationsForModules(Location)->Iterable>::: wrapped java file manager list locations for modules
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#isSupportedOption(String)->int::: wrapped java file manager is supported option
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileManager#toString()->String::: wrapped java file manager to string
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromFiles(Iterable)->Iterable::: wrapped standard java file manager get java file objects from files
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromPaths(Iterable)->Iterable::: wrapped standard java file manager get java file objects from paths
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(File...)->Iterable::: wrapped standard java file manager get java file objects
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(Path...)->Iterable::: wrapped standard java file manager get java file objects
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromStrings(Iterable)->Iterable::: wrapped standard java file manager get java file objects from strings
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(String...)->Iterable::: wrapped standard java file manager get java file objects
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#setLocation(Location, Iterable)->void::: wrapped standard java file manager set location
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#setLocationFromPaths(Location, Collection)->void::: wrapped standard java file manager set location from paths
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getLocation(Location)->Iterable::: wrapped standard java file manager get location
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#getLocationAsPaths(Location)->Iterable::: wrapped standard java file manager get location as paths
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#asPath(FileObject)->Path::: wrapped standard java file manager as path
com.sun.tools.javac.api.ClientCodeWrapper.WrappedStandardJavaFileManager#setPathFactory(PathFactory)->void::: wrapped standard java file manager set path factory
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#toUri()->URI::: wrapped file object to uri
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#getName()->String::: wrapped file object get name
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#openInputStream()->InputStream::: wrapped file object open input stream
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#openOutputStream()->OutputStream::: wrapped file object open output stream
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#openReader(boolean)->Reader::: wrapped file object open reader
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#getCharContent(boolean)->CharSequence::: wrapped file object get char content
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#openWriter()->Writer::: wrapped file object open writer
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#getLastModified()->long::: wrapped file object get last modified
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#delete()->boolean::: wrapped file object delete
com.sun.tools.javac.api.ClientCodeWrapper.WrappedFileObject#toString()->String::: wrapped file object to string
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileObject#getKind()->Kind::: wrapped java file object get kind
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileObject#isNameCompatible(String, Kind)->boolean::: wrapped java file object is name compatible
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileObject#getNestingKind()->NestingKind::: wrapped java file object get nesting kind
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileObject#getAccessLevel()->Modifier::: wrapped java file object get access level
com.sun.tools.javac.api.ClientCodeWrapper.WrappedJavaFileObject#toString()->String::: wrapped java file object to string
com.sun.tools.javac.api.ClientCodeWrapper.WrappedDiagnosticListener#report(Diagnostic)->void::: wrapped diagnostic listener report
com.sun.tools.javac.api.ClientCodeWrapper.WrappedDiagnosticListener#toString()->String::: wrapped diagnostic listener to string
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getKind()->Diagnostic.Kind::: diagnostic source unwrapper get kind
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getSource()->JavaFileObject::: diagnostic source unwrapper get source
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getPosition()->long::: diagnostic source unwrapper get position
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getStartPosition()->long::: diagnostic source unwrapper get start position
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getEndPosition()->long::: diagnostic source unwrapper get end position
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getLineNumber()->long::: diagnostic source unwrapper get line number
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getColumnNumber()->long::: diagnostic source unwrapper get column number
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getCode()->String::: diagnostic source unwrapper get code
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#getMessage(Locale)->String::: diagnostic source unwrapper get message
com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper#toString()->String::: diagnostic source unwrapper to string
com.sun.tools.javac.api.ClientCodeWrapper.WrappedTaskListener#started(TaskEvent)->void::: wrapped task listener started
com.sun.tools.javac.api.ClientCodeWrapper.WrappedTaskListener#finished(TaskEvent)->void::: wrapped task listener finished
com.sun.tools.javac.api.ClientCodeWrapper.WrappedTaskListener#toString()->String::: wrapped task listener to string
com.sun.tools.javac.api.DiagnosticFormatter#displaySource(D)->boolean:::Whether the source code output for this diagnostic is to be displayed.
com.sun.tools.javac.api.DiagnosticFormatter#format(D, Locale)->String:::Format the contents of a diagnostics.
com.sun.tools.javac.api.DiagnosticFormatter#formatMessage(D, Locale)->String:::Controls the way in which a diagnostic message is displayed.
com.sun.tools.javac.api.DiagnosticFormatter#formatKind(D, Locale)->String:::Controls the way in which a diagnostic kind is displayed.
com.sun.tools.javac.api.DiagnosticFormatter#formatSource(D, boolean, Locale)->String:::Controls the way in which a diagnostic source is displayed.
com.sun.tools.javac.api.DiagnosticFormatter#formatPosition(D, PositionKind, Locale)->String:::Controls the way in which a diagnostic position is displayed.
com.sun.tools.javac.api.DiagnosticFormatter#getConfiguration()->Configuration:::Get a list of all the enabled verbosity options.
com.sun.tools.javac.api.DiagnosticFormatter.Configuration#setVisible(Set)->void:::Configure the set of diagnostic parts that should be displayed by the formatter.
com.sun.tools.javac.api.DiagnosticFormatter.Configuration#getVisible()->Set:::Retrieve the set of diagnostic parts that should be displayed by the formatter.
com.sun.tools.javac.api.DiagnosticFormatter.Configuration#setMultilineLimit(MultilineLimit, int)->void:::Set a limit for multiline diagnostics
com.sun.tools.javac.api.DiagnosticFormatter.Configuration#getMultilineLimit(MultilineLimit)->int:::Get a multiline diagnostic limit.
com.sun.tools.javac.api.Formattable#toString(Locale, Messages)->String:::Used to obtain a localized String representing the object accordingly to a given locale
com.sun.tools.javac.api.Formattable#getKind()->String:::Retrieve a pretty name of this object's kind
com.sun.tools.javac.api.Formattable.LocalizedString#toString(java.util.Locale, Messages)->String::: localized string to string
com.sun.tools.javac.api.Formattable.LocalizedString#getKind()->String::: localized string get kind
com.sun.tools.javac.api.Formattable.LocalizedString#toString()->String::: localized string to string
com.sun.tools.javac.api.JavacScope#create(Env)->JavacScope::: javac scope create
com.sun.tools.javac.api.JavacScope#getEnclosingScope()->JavacScope::: javac scope get enclosing scope
com.sun.tools.javac.api.JavacScope#getEnclosingClass()->TypeElement::: javac scope get enclosing class
com.sun.tools.javac.api.JavacScope#getEnclosingMethod()->ExecutableElement::: javac scope get enclosing method
com.sun.tools.javac.api.JavacScope#getLocalElements()->Iterable::: javac scope get local elements
com.sun.tools.javac.api.JavacScope#getEnv()->Env::: javac scope get env
com.sun.tools.javac.api.JavacScope#isStarImportScope()->boolean::: javac scope is star import scope
com.sun.tools.javac.api.JavacScope#equals(Object)->boolean::: javac scope equals
com.sun.tools.javac.api.JavacScope#hashCode()->int::: javac scope hash code
com.sun.tools.javac.api.JavacScope#toString()->String::: javac scope to string
com.sun.tools.javac.api.JavacTaskImpl#call()->Boolean::: javac task impl call
com.sun.tools.javac.api.JavacTaskImpl#doCall()->Main.Result::: javac task impl do call
com.sun.tools.javac.api.JavacTaskImpl#addModules(Iterable)->void::: javac task impl add modules
com.sun.tools.javac.api.JavacTaskImpl#setProcessors(Iterable)->void::: javac task impl set processors
com.sun.tools.javac.api.JavacTaskImpl#setLocale(Locale)->void::: javac task impl set locale
com.sun.tools.javac.api.JavacTaskImpl#toString(Iterable, String)->String::: javac task impl to string
com.sun.tools.javac.api.JavacTaskImpl#cleanup()->void::: javac task impl cleanup
com.sun.tools.javac.api.JavacTaskImpl#parse()->Iterable::: javac task impl parse
com.sun.tools.javac.api.JavacTaskImpl#enter()->Iterable:::Translate all the abstract syntax trees to elements.
com.sun.tools.javac.api.JavacTaskImpl#enter(Iterable)->Iterable:::Translate the given abstract syntax trees to elements.
com.sun.tools.javac.api.JavacTaskImpl#analyze()->Iterable::: javac task impl analyze
com.sun.tools.javac.api.JavacTaskImpl#analyze(Iterable)->Iterable::: javac task impl analyze
com.sun.tools.javac.api.JavacTaskImpl#generate()->Iterable::: javac task impl generate
com.sun.tools.javac.api.JavacTaskImpl#generate(Iterable)->Iterable:::Generate code corresponding to the given classes
com.sun.tools.javac.api.JavacTaskImpl#pathFor(CompilationUnitTree, Tree)->Iterable::: javac task impl path for
com.sun.tools.javac.api.JavacTaskImpl#ensureEntered()->void::: javac task impl ensure entered
com.sun.tools.javac.api.JavacTaskImpl.Filter#run(Queue>, Iterable)->void::: filter run
com.sun.tools.javac.api.JavacTaskImpl.Filter#process(Env)->void::: filter process
com.sun.tools.javac.api.JavacTaskImpl#parseType(String, TypeElement)->Type:::For internal use only
com.sun.tools.javac.api.JavacTaskPool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable, Worker)->Z:::Creates a new task as if by javax.tools.JavaCompiler#getTask and runs the provided worker with it
com.sun.tools.javac.api.JavacTaskPool#printStatistics(PrintStream)->void::: javac task pool print statistics
com.sun.tools.javac.api.JavacTaskPool.Worker#withTask(JavacTask)->Z::: worker with task
com.sun.tools.javac.api.JavacTaskPool.ReusableContext#clear()->void::: reusable context clear
com.sun.tools.javac.api.JavacTaskPool.ReusableContext#finished(TaskEvent)->void::: reusable context finished
com.sun.tools.javac.api.JavacTaskPool.ReusableContext#started(TaskEvent)->void::: reusable context started
com.sun.tools.javac.api.JavacTaskPool.ReusableContext#drop(Key)->void::: reusable context drop
com.sun.tools.javac.api.JavacTaskPool.ReusableContext#drop(Class)->void::: reusable context drop
com.sun.tools.javac.api.JavacTaskPool.ReusableContext.ReusableJavaCompiler#close()->void::: reusable java compiler close
com.sun.tools.javac.api.JavacTaskPool.ReusableContext.ReusableJavaCompiler#clear()->void::: reusable java compiler clear
com.sun.tools.javac.api.JavacTaskPool.ReusableContext.ReusableJavaCompiler#checkReusable()->void::: reusable java compiler check reusable
com.sun.tools.javac.api.JavacTaskPool.ReusableContext.ReusableLog#clear()->void::: reusable log clear
com.sun.tools.javac.api.JavacTool#name()->String::: javac tool name
com.sun.tools.javac.api.JavacTool#create()->JavacTool:::Static factory method for creating new instances of this tool.
com.sun.tools.javac.api.JavacTool#getStandardFileManager(DiagnosticListener, Locale, Charset)->JavacFileManager::: javac tool get standard file manager
com.sun.tools.javac.api.JavacTool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable)->JavacTask::: javac tool get task
com.sun.tools.javac.api.JavacTool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable, Context)->JavacTask::: javac tool get task
com.sun.tools.javac.api.JavacTool#run(InputStream, OutputStream, OutputStream, String...)->int::: javac tool run
com.sun.tools.javac.api.JavacTool#getSourceVersions()->Set::: javac tool get source versions
com.sun.tools.javac.api.JavacTool#isSupportedOption(String)->int::: javac tool is supported option
com.sun.tools.javac.api.JavacTrees#instance(JavaCompiler.CompilationTask)->JavacTrees::: javac trees instance
com.sun.tools.javac.api.JavacTrees#instance(ProcessingEnvironment)->JavacTrees::: javac trees instance
com.sun.tools.javac.api.JavacTrees#instance(Context)->JavacTrees::: javac trees instance
com.sun.tools.javac.api.JavacTrees#updateContext(Context)->void::: javac trees update context
com.sun.tools.javac.api.JavacTrees#getBreakIterator()->BreakIterator::: javac trees get break iterator
com.sun.tools.javac.api.JavacTrees#getSourcePositions()->DocSourcePositions::: javac trees get source positions
com.sun.tools.javac.api.JavacTrees#getDocTreeFactory()->DocTreeMaker::: javac trees get doc tree factory
com.sun.tools.javac.api.JavacTrees#getTree(TypeElement)->JCClassDecl::: javac trees get tree
com.sun.tools.javac.api.JavacTrees#getTree(ExecutableElement)->JCMethodDecl::: javac trees get tree
com.sun.tools.javac.api.JavacTrees#getTree(Element)->JCTree::: javac trees get tree
com.sun.tools.javac.api.JavacTrees#getTree(Element, AnnotationMirror)->JCTree::: javac trees get tree
com.sun.tools.javac.api.JavacTrees#getTree(Element, AnnotationMirror, AnnotationValue)->JCTree::: javac trees get tree
com.sun.tools.javac.api.JavacTrees#getPath(CompilationUnitTree, Tree)->TreePath::: javac trees get path
com.sun.tools.javac.api.JavacTrees#getPath(Element)->TreePath::: javac trees get path
com.sun.tools.javac.api.JavacTrees#getPath(Element, AnnotationMirror)->TreePath::: javac trees get path
com.sun.tools.javac.api.JavacTrees#getPath(Element, AnnotationMirror, AnnotationValue)->TreePath::: javac trees get path
com.sun.tools.javac.api.JavacTrees#getElement(TreePath)->Symbol::: javac trees get element
com.sun.tools.javac.api.JavacTrees#getElement(DocTreePath)->Element::: javac trees get element
com.sun.tools.javac.api.JavacTrees#getFirstSentence(java.util.List)->java.util.List::: javac trees get first sentence
com.sun.tools.javac.api.JavacTrees#findConstructor(ClassSymbol, List)->MethodSymbol::: javac trees find constructor
com.sun.tools.javac.api.JavacTrees#fuzzyMatch(List, List)->boolean::: javac trees fuzzy match
com.sun.tools.javac.api.JavacTrees#fuzzyMatch(Type, Type)->boolean::: javac trees fuzzy match
com.sun.tools.javac.api.JavacTrees#getTypeMirror(TreePath)->TypeMirror::: javac trees get type mirror
com.sun.tools.javac.api.JavacTrees#getScope(TreePath)->JavacScope::: javac trees get scope
com.sun.tools.javac.api.JavacTrees#getDocComment(TreePath)->String::: javac trees get doc comment
com.sun.tools.javac.api.JavacTrees#getDocCommentTree(TreePath)->DocCommentTree::: javac trees get doc comment tree
com.sun.tools.javac.api.JavacTrees#getDocCommentTree(Element)->DocCommentTree::: javac trees get doc comment tree
com.sun.tools.javac.api.JavacTrees#getDocCommentTree(Element, String)->DocCommentTree::: javac trees get doc comment tree
com.sun.tools.javac.api.JavacTrees#isAccessible(Scope, TypeElement)->boolean::: javac trees is accessible
com.sun.tools.javac.api.JavacTrees#isAccessible(Scope, Element, DeclaredType)->boolean::: javac trees is accessible
com.sun.tools.javac.api.JavacTrees#asJavaFileObject(FileObject)->JavaFileObject::: javac trees as java file object
com.sun.tools.javac.api.JavacTrees#getDocCommentTree(FileObject)->DocCommentTree::: javac trees get doc comment tree
com.sun.tools.javac.api.JavacTrees#getDocTreePath(FileObject, PackageElement)->DocTreePath::: javac trees get doc tree path
com.sun.tools.javac.api.JavacTrees#setBreakIterator(BreakIterator)->void::: javac trees set break iterator
com.sun.tools.javac.api.JavacTrees.Copier#copy(T, JCTree)->T::: copier copy
com.sun.tools.javac.api.JavacTrees#createCopier(TreeMaker)->Copier::: javac trees create copier
com.sun.tools.javac.api.JavacTrees#getOriginalType(javax.lang.model.type.ErrorType)->TypeMirror:::Returns the original type from the ErrorType object.
com.sun.tools.javac.api.JavacTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.tree.Tree, com.sun.source.tree.CompilationUnitTree)->void:::Prints a message of the specified kind at the location of the tree within the provided compilation unit
com.sun.tools.javac.api.JavacTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.doctree.DocTree, com.sun.source.doctree.DocCommentTree, com.sun.source.tree.CompilationUnitTree)->void::: javac trees print message
com.sun.tools.javac.api.JavacTrees#getLub(CatchTree)->TypeMirror::: javac trees get lub
com.sun.tools.javac.api.Messages#add(String)->void:::Add a new resource bundle to the list that is searched for localized messages.
com.sun.tools.javac.api.Messages#getLocalizedString(Locale, String, Object...)->String:::Get a localized formatted string.
com.sun.tools.javac.api.MultiTaskListener#instance(Context)->MultiTaskListener:::Get the MultiTaskListener instance for this context.
com.sun.tools.javac.api.MultiTaskListener#getTaskListeners()->Collection::: multi task listener get task listeners
com.sun.tools.javac.api.MultiTaskListener#isEmpty()->boolean::: multi task listener is empty
com.sun.tools.javac.api.MultiTaskListener#add(TaskListener)->void::: multi task listener add
com.sun.tools.javac.api.MultiTaskListener#remove(TaskListener)->void::: multi task listener remove
com.sun.tools.javac.api.MultiTaskListener#started(TaskEvent)->void::: multi task listener started
com.sun.tools.javac.api.MultiTaskListener#finished(TaskEvent)->void::: multi task listener finished
com.sun.tools.javac.api.MultiTaskListener#toString()->String::: multi task listener to string
com.sun.tools.javac.api.MultiTaskListener#clear()->void::: multi task listener clear
com.sun.tools.javac.api.WrappingJavaFileManager#wrap(FileObject)->FileObject:::This implementation returns the given file object
com.sun.tools.javac.api.WrappingJavaFileManager#wrap(JavaFileObject)->JavaFileObject:::This implementation forwards to #wrap(FileObject)
com.sun.tools.javac.api.WrappingJavaFileManager#unwrap(FileObject)->FileObject:::This implementation returns the given file object
com.sun.tools.javac.api.WrappingJavaFileManager#unwrap(JavaFileObject)->JavaFileObject:::This implementation forwards to #unwrap(FileObject)
com.sun.tools.javac.api.WrappingJavaFileManager#wrap(Iterable)->Iterable:::This implementation maps the given list of file objects by calling wrap on each
com.sun.tools.javac.api.WrappingJavaFileManager#unwrap(URI)->URI:::This implementation returns the given URI
com.sun.tools.javac.api.WrappingJavaFileManager#list(Location, String, Set, boolean)->Iterable::: wrapping java file manager list
com.sun.tools.javac.api.WrappingJavaFileManager#inferBinaryName(Location, JavaFileObject)->String::: wrapping java file manager infer binary name
com.sun.tools.javac.api.WrappingJavaFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject::: wrapping java file manager get java file for input
com.sun.tools.javac.api.WrappingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject::: wrapping java file manager get java file for output
com.sun.tools.javac.api.WrappingJavaFileManager#getFileForInput(Location, String, String)->FileObject::: wrapping java file manager get file for input
com.sun.tools.javac.api.WrappingJavaFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: wrapping java file manager get file for output
com.sun.tools.javac.api.WrappingJavaFileManager#contains(Location, FileObject)->boolean::: wrapping java file manager contains

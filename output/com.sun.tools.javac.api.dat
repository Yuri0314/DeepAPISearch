BasicJavacTask#instance(Context)::: basic javac task instance:::instance->context->get->if->new->BasicJavacTask->return
BasicJavacTask#parse()::: basic javac task parse:::throw->new->IllegalStateException
BasicJavacTask#analyze()::: basic javac task analyze:::throw->new->IllegalStateException
BasicJavacTask#generate()::: basic javac task generate:::throw->new->IllegalStateException
BasicJavacTask#setTaskListener(TaskListener)::: basic javac task set task listener:::mtl->MultiTaskListener->instance->if->mtl->remove->if->mtl->add
BasicJavacTask#addTaskListener(TaskListener)::: basic javac task add task listener:::mtl->MultiTaskListener->instance->mtl->add
BasicJavacTask#removeTaskListener(TaskListener)::: basic javac task remove task listener:::mtl->MultiTaskListener->instance->mtl->remove
BasicJavacTask#getTaskListeners()::: basic javac task get task listeners:::mtl->MultiTaskListener->instance->return->mtl->getTaskListeners
BasicJavacTask#getTypeMirror(Iterable)::: basic javac task get type mirror:::last->foreach->Objects->requireNonNull->if->throw->new->IllegalArgumentException->return
BasicJavacTask#getElements()::: basic javac task get elements:::if->throw->new->IllegalStateException->return->JavacElements->instance
BasicJavacTask#getTypes()::: basic javac task get types:::if->throw->new->IllegalStateException->return->JavacTypes->instance
BasicJavacTask#addModules(Iterable)::: basic javac task add modules:::throw->new->IllegalStateException
BasicJavacTask#setProcessors(Iterable)::: basic javac task set processors:::throw->new->IllegalStateException
BasicJavacTask#setLocale(Locale)::: basic javac task set locale:::throw->new->IllegalStateException
BasicJavacTask#call()::: basic javac task call:::throw->new->IllegalStateException
BasicJavacTask#getContext():::For internal use only:::return
BasicJavacTask#initPlugins(Set>)::: basic javac task init plugins:::platformProvider->context->get->if->foreach->platformProvider->getPlugins->options->pluginDesc->getOptions->entrySet->stream->e->getKey->e->getValue->map->Collectors->toList->collect->try->pluginDesc->getPlugin->options->options->size->new->StringArr->toArray->init->catch->throw->new->PropagatedException->finally->if->pluginOpts->isEmpty->return->pluginsToCall->new->LinkedHashSet<>->pEnv->JavacProcessingEnvironment->instance->sl->pEnv->getServiceLoader->foreach->foreach->if->plugin->getName->equals->pluginsToCall->remove->try->plugin->size->new->StringArr->toArray->init->catch->throw->new->PropagatedException->finally->break->foreach->Log->instance->Errors->PluginNotFound->error
BasicJavacTask#initDocLint(List)::: basic javac task init doc lint:::if->docLintOpts->isEmpty->return->new->DocLint->docLintOpts->docLintOpts->size->new->StringArr->toArray->init->JavaCompiler->instance
ClientCodeWrapper#instance(Context)::: client code wrapper instance:::instance->context->get->if->new->ClientCodeWrapper->return
ClientCodeWrapper#wrap(JavaFileManager)::: client code wrapper wrap:::if->isTrusted->return->if->return->new->WrappedStandardJavaFileManager->return->new->WrappedJavaFileManager
ClientCodeWrapper#wrap(FileObject)::: client code wrapper wrap:::if->isTrusted->return->return->new->WrappedFileObject
ClientCodeWrapper#unwrap(FileObject)::: client code wrapper unwrap:::if->return->else->return
ClientCodeWrapper#wrap(JavaFileObject)::: client code wrapper wrap:::if->isTrusted->return->return->new->WrappedJavaFileObject
ClientCodeWrapper#wrapJavaFileObjects(Iterable)::: client code wrapper wrap java file objects:::wrapped->new->ArrayList<>->foreach->wrapped->wrap->add->return->Collections->unmodifiableList
ClientCodeWrapper#unwrap(JavaFileObject)::: client code wrapper unwrap:::if->return->else->return
ClientCodeWrapper#wrap(DiagnosticListener)::: client code wrapper wrap:::if->isTrusted->return->return->new->WrappedDiagnosticListener<>
ClientCodeWrapper#wrap(TaskListener)::: client code wrapper wrap:::if->isTrusted->return->return->new->WrappedTaskListener
ClientCodeWrapper#unwrap(TaskListener)::: client code wrapper unwrap:::if->return->else->return
ClientCodeWrapper#unwrap(Collection)::: client code wrapper unwrap:::c->listeners->size->new->ArrayList<>->foreach->c->unwrap->add->return
ClientCodeWrapper#unwrap(Diagnostic)::: client code wrapper unwrap:::if->d->return->new->DiagnosticSourceUnwrapper->else->return
ClientCodeWrapper#isTrusted(Object)::: client code wrapper is trusted:::c->o->getClass->trusted->trustedClasses->get->if->c->getName->startsWith->c->isAnnotationPresent->trustedClasses->put->return
ClientCodeWrapper#wrappedToString(Class, Object)::: client code wrapper wrapped to string:::return->wrapperClass->getSimpleName
ClientCodeWrapper.WrappedJavaFileManager#getClassLoader(Location)::: wrapped java file manager get class loader:::try->return->clientJavaFileManager->getClassLoader->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#list(Location, String, Set, boolean)::: wrapped java file manager list:::try->return->clientJavaFileManager->list->wrapJavaFileObjects->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#inferBinaryName(Location, JavaFileObject)::: wrapped java file manager infer binary name:::try->return->clientJavaFileManager->unwrap->inferBinaryName->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#isSameFile(FileObject, FileObject)::: wrapped java file manager is same file:::try->return->clientJavaFileManager->unwrap->unwrap->isSameFile->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#handleOption(String, Iterator)::: wrapped java file manager handle option:::try->return->clientJavaFileManager->handleOption->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#hasLocation(Location)::: wrapped java file manager has location:::try->return->clientJavaFileManager->hasLocation->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getJavaFileForInput(Location, String, Kind)::: wrapped java file manager get java file for input:::try->return->clientJavaFileManager->getJavaFileForInput->wrap->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)::: wrapped java file manager get java file for output:::try->return->clientJavaFileManager->unwrap->getJavaFileForOutput->wrap->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getFileForInput(Location, String, String)::: wrapped java file manager get file for input:::try->return->clientJavaFileManager->getFileForInput->wrap->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getFileForOutput(Location, String, String, FileObject)::: wrapped java file manager get file for output:::try->return->clientJavaFileManager->unwrap->getFileForOutput->wrap->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#contains(Location, FileObject)::: wrapped java file manager contains:::try->return->clientJavaFileManager->unwrap->contains->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#flush()::: wrapped java file manager flush:::try->clientJavaFileManager->flush->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#close()::: wrapped java file manager close:::try->clientJavaFileManager->close->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getLocationForModule(Location, String)::: wrapped java file manager get location for module:::try->return->clientJavaFileManager->getLocationForModule->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#getLocationForModule(Location, JavaFileObject)::: wrapped java file manager get location for module:::try->return->clientJavaFileManager->unwrap->getLocationForModule->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#inferModuleName(Location)::: wrapped java file manager infer module name:::try->return->clientJavaFileManager->inferModuleName->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#listLocationsForModules(Location)::: wrapped java file manager list locations for modules:::try->return->clientJavaFileManager->listLocationsForModules->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#isSupportedOption(String)::: wrapped java file manager is supported option:::try->return->clientJavaFileManager->isSupportedOption->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileManager#toString()::: wrapped java file manager to string:::return->getClass->wrappedToString
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromFiles(Iterable)::: wrapped standard java file manager get java file objects from files:::try->return->getJavaFileObjectsFromFiles->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromPaths(Iterable)::: wrapped standard java file manager get java file objects from paths:::try->return->getJavaFileObjectsFromPaths->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(File...)::: wrapped standard java file manager get java file objects:::try->return->getJavaFileObjects->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(Path...)::: wrapped standard java file manager get java file objects:::try->return->getJavaFileObjects->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjectsFromStrings(Iterable)::: wrapped standard java file manager get java file objects from strings:::try->return->getJavaFileObjectsFromStrings->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getJavaFileObjects(String...)::: wrapped standard java file manager get java file objects:::try->return->getJavaFileObjects->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#setLocation(Location, Iterable)::: wrapped standard java file manager set location:::try->setLocation->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#setLocationFromPaths(Location, Collection)::: wrapped standard java file manager set location from paths:::try->setLocationFromPaths->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getLocation(Location)::: wrapped standard java file manager get location:::try->return->getLocation->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#getLocationAsPaths(Location)::: wrapped standard java file manager get location as paths:::try->return->getLocationAsPaths->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#asPath(FileObject)::: wrapped standard java file manager as path:::try->return->asPath->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedStandardJavaFileManager#setPathFactory(PathFactory)::: wrapped standard java file manager set path factory:::try->setPathFactory->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#toUri()::: wrapped file object to uri:::try->return->clientFileObject->toUri->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#getName()::: wrapped file object get name:::try->return->clientFileObject->getName->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#openInputStream()::: wrapped file object open input stream:::try->return->clientFileObject->openInputStream->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#openOutputStream()::: wrapped file object open output stream:::try->return->clientFileObject->openOutputStream->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#openReader(boolean)::: wrapped file object open reader:::try->return->clientFileObject->openReader->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#getCharContent(boolean)::: wrapped file object get char content:::try->return->clientFileObject->getCharContent->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#openWriter()::: wrapped file object open writer:::try->return->clientFileObject->openWriter->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#getLastModified()::: wrapped file object get last modified:::try->return->clientFileObject->getLastModified->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#delete()::: wrapped file object delete:::try->return->clientFileObject->delete->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedFileObject#toString()::: wrapped file object to string:::return->getClass->wrappedToString
ClientCodeWrapper.WrappedJavaFileObject#getKind()::: wrapped java file object get kind:::try->return->getKind->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileObject#isNameCompatible(String, Kind)::: wrapped java file object is name compatible:::try->return->isNameCompatible->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileObject#getNestingKind()::: wrapped java file object get nesting kind:::try->return->getNestingKind->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileObject#getAccessLevel()::: wrapped java file object get access level:::try->return->getAccessLevel->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedJavaFileObject#toString()::: wrapped java file object to string:::return->getClass->wrappedToString
ClientCodeWrapper.WrappedDiagnosticListener#report(Diagnostic)::: wrapped diagnostic listener report:::try->clientDiagnosticListener->unwrap->report->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedDiagnosticListener#toString()::: wrapped diagnostic listener to string:::return->getClass->wrappedToString
ClientCodeWrapper.DiagnosticSourceUnwrapper#getKind()::: diagnostic source unwrapper get kind:::return->d->getKind
ClientCodeWrapper.DiagnosticSourceUnwrapper#getSource()::: diagnostic source unwrapper get source:::return->d->getSource->unwrap
ClientCodeWrapper.DiagnosticSourceUnwrapper#getPosition()::: diagnostic source unwrapper get position:::return->d->getPosition
ClientCodeWrapper.DiagnosticSourceUnwrapper#getStartPosition()::: diagnostic source unwrapper get start position:::return->d->getStartPosition
ClientCodeWrapper.DiagnosticSourceUnwrapper#getEndPosition()::: diagnostic source unwrapper get end position:::return->d->getEndPosition
ClientCodeWrapper.DiagnosticSourceUnwrapper#getLineNumber()::: diagnostic source unwrapper get line number:::return->d->getLineNumber
ClientCodeWrapper.DiagnosticSourceUnwrapper#getColumnNumber()::: diagnostic source unwrapper get column number:::return->d->getColumnNumber
ClientCodeWrapper.DiagnosticSourceUnwrapper#getCode()::: diagnostic source unwrapper get code:::return->d->getCode
ClientCodeWrapper.DiagnosticSourceUnwrapper#getMessage(Locale)::: diagnostic source unwrapper get message:::return->d->getMessage
ClientCodeWrapper.DiagnosticSourceUnwrapper#toString()::: diagnostic source unwrapper to string:::return->d->toString
ClientCodeWrapper.WrappedTaskListener#started(TaskEvent)::: wrapped task listener started:::try->clientTaskListener->started->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedTaskListener#finished(TaskEvent)::: wrapped task listener finished:::try->clientTaskListener->finished->catch->throw->throw->new->ClientCodeException->finally
ClientCodeWrapper.WrappedTaskListener#toString()::: wrapped task listener to string:::return->getClass->wrappedToString
DiagnosticFormatter#displaySource(D):::Whether the source code output for this diagnostic is to be displayed.:::
DiagnosticFormatter#format(D, Locale):::Format the contents of a diagnostics.:::
DiagnosticFormatter#formatMessage(D, Locale):::Controls the way in which a diagnostic message is displayed.:::
DiagnosticFormatter#formatKind(D, Locale):::Controls the way in which a diagnostic kind is displayed.:::
DiagnosticFormatter#formatSource(D, boolean, Locale):::Controls the way in which a diagnostic source is displayed.:::
DiagnosticFormatter#formatPosition(D, PositionKind, Locale):::Controls the way in which a diagnostic position is displayed.:::
DiagnosticFormatter#getConfiguration():::Get a list of all the enabled verbosity options.:::
DiagnosticFormatter.Configuration#setVisible(Set):::Configure the set of diagnostic parts that should be displayed by the formatter.:::
DiagnosticFormatter.Configuration#getVisible():::Retrieve the set of diagnostic parts that should be displayed by the formatter.:::
DiagnosticFormatter.Configuration#setMultilineLimit(MultilineLimit, int):::Set a limit for multiline diagnostics:::
DiagnosticFormatter.Configuration#getMultilineLimit(MultilineLimit):::Get a multiline diagnostic limit.:::
Formattable#toString(Locale, Messages):::Used to obtain a localized String representing the object accordingly to a given locale:::
Formattable#getKind():::Retrieve a pretty name of this object's kind:::
Formattable.LocalizedString#toString(java.util.Locale, Messages)::: localized string to string:::return->messages->getLocalizedString
Formattable.LocalizedString#getKind()::: localized string get kind:::return
Formattable.LocalizedString#toString()::: localized string to string:::return
JavacScope#create(Env)::: javac scope create:::if->return->new->JavacScope->else->return->new->JavacScope
JavacScope#getEnclosingScope()::: javac scope get enclosing scope:::if->return->create->else->return->new->JavacScope
JavacScope#getEnclosingClass()::: javac scope get enclosing class:::return
JavacScope#getEnclosingMethod()::: javac scope get enclosing method:::return
JavacScope#getLocalElements()::: javac scope get local elements:::return->getLocalElements
JavacScope#getEnv()::: javac scope get env:::return
JavacScope#isStarImportScope()::: javac scope is star import scope:::return
JavacScope#equals(Object)::: javac scope equals:::if->s->return->env->equals->isStarImportScope->s->isStarImportScope->else->return
JavacScope#hashCode()::: javac scope hash code:::return->env->hashCode->isStarImportScope
JavacScope#toString()::: javac scope to string:::return->isStarImportScope
JavacTaskImpl#call()::: javac task impl call:::return->doCall->isOK
JavacTaskImpl#doCall()::: javac task impl do call:::try->return->prepareCompiler->if->compiler->errorCount->return->compiler->args->getFileObjects->args->getClassNames->compile->return->compiler->errorCount->handleExceptions->catch->finally->try->cleanup->catch->throw->e->getCause->new->RuntimeException->finally
JavacTaskImpl#addModules(Iterable)::: javac task impl add modules:::Objects->requireNonNull->if->used->get->throw->new->IllegalStateException->foreach->Objects->requireNonNull->addModules->add
JavacTaskImpl#setProcessors(Iterable)::: javac task impl set processors:::Objects->requireNonNull->if->used->get->throw->new->IllegalStateException
JavacTaskImpl#setLocale(Locale)::: javac task impl set locale:::if->used->get->throw->new->IllegalStateException
JavacTaskImpl#handleExceptions(Callable, T, T)::: javac task impl handle exceptions:::prevDeferredHandler->dcfh->setHandler->try->return->c->call->catch->log->Log->instance->options->Options->instance->log->ex->getMessage->printRawLines->if->ex->getCause->options->isSet->ex->getCause->log->getWriter->printStackTrace->return->throw->e->getCause->new->RuntimeException->throw->e->getCause->throw->if->compiler->errorCount->Options->instance->isSet->log->Log->instance->log->JavaCompiler->version->printLines->ex->log->getWriter->printStackTrace->return->finally->dcfh->setHandler
JavacTaskImpl#prepareCompiler(boolean)::: javac task impl prepare compiler:::if->used->getAndSet->if->throw->new->IllegalStateException->new->PropagatedException->else->args->validate->context->put->messages->context->get->if->messages->getCurrentLocale->equals->messages->setCurrentLocale->args->getPluginOpts->initPlugins->args->getDocLintOpts->initDocLint->JavaCompiler->instance->new->HashMap<>->if->compiler->args->getFileObjects->args->getClassNames->initProcessAnnotations->foreach->args->getFileObjects->notYetEntered->put->new->ListBuffer<>
JavacTaskImpl#toString(Iterable, String)::: javac task impl to string:::currSep->sb->new->StringBuilder->foreach->sb->append->sb->item->toString->append->return->sb->toString
JavacTaskImpl#cleanup()::: javac task impl cleanup:::if->compiler->close->if->try->fileManager->close->catch->finally
JavacTaskImpl#parse()::: javac task impl parse:::return->this->parseInternal->List->nil->List->nil->handleExceptions
JavacTaskImpl#parseInternal()::: javac task impl parse internal:::try->prepareCompiler->units->compiler->args->getFileObjects->parseFiles->foreach->file->unit->getSourceFile->if->notYetEntered->containsKey->notYetEntered->put->return->catch->finally->if->flush
JavacTaskImpl#enter():::Translate all the abstract syntax trees to elements.:::return->enter
JavacTaskImpl#enter(Iterable):::Translate the given abstract syntax trees to elements.:::if->notYetEntered->isEmpty->return->List->nil->wasInitialized->prepareCompiler->roots->if->if->notYetEntered->size->if->parseInternal->foreach->args->getFileObjects->unit->notYetEntered->remove->if->if->new->ListBuffer<>->roots->append->notYetEntered->clear->else->foreach->if->if->new->ListBuffer<>->roots->append->notYetEntered->cu->getSourceFile->remove->else->throw->cu->toString->new->IllegalArgumentException->if->if->compiler->List->nil->initModules->return->List->nil->units->compiler->roots->toList->initModules->try->compiler->enterTrees->if->notYetEntered->isEmpty->compiler->processAnnotations->elements->new->ListBuffer<>->foreach->isPkgInfo->isNameCompatible->if->elements->append->else->foreach->if->node->hasTag->cdef->if->elements->append->else->if->node->hasTag->mdef->if->elements->append->return->elements->toList->catch->finally->flush
JavacTaskImpl#analyze()::: javac task impl analyze:::return->analyze->List->nil->List->nil->handleExceptions
JavacTaskImpl#analyze(Iterable)::: javac task impl analyze:::enter->results->new->ListBuffer<>->try->if->compiler->compiler->attribute->flow->handleFlowResults->else->f->new->Filter->f->run->catch->finally->flush->return
JavacTaskImpl#handleFlowResults(Queue>, ListBuffer)::: javac task impl handle flow results:::foreach->switch->getTag->cdef->if->elems->append->break->mod->if->elems->append->break->unit->if->elems->append->break->genList->addAll
JavacTaskImpl#generate()::: javac task impl generate:::return->generate->List->nil->List->nil->handleExceptions
JavacTaskImpl#generate(Iterable):::Generate code corresponding to the given classes:::results->new->ListBuffer<>->try->analyze->if->compiler->compiler->desugar->generate->genList->clear->else->f->new->Filter->f->run->if->genList->isEmpty->compiler->reportDeferredDiagnostics->cleanup->catch->finally->if->flush->return
JavacTaskImpl#pathFor(CompilationUnitTree, Tree)::: javac task impl path for:::return->TreeInfo->pathFor->reverse
JavacTaskImpl#ensureEntered()::: javac task impl ensure entered:::args->allowEmpty->enter
JavacTaskImpl.Filter#run(Queue>, Iterable)::: filter run:::set->new->HashSet<>->foreach->set->add->defer->new->ListBuffer<>->while->list->peek->env->list->remove->test->if->hasTag->else->if->hasTag->else->csym->if->csym->outermostClass->if->set->contains->process->else->defer->append->list->addAll
JavacTaskImpl.Filter#process(Env)::: filter process:::
JavacTaskImpl#parseType(String, TypeElement):::For internal use only:::if->expr->equals->throw->new->IllegalArgumentException->JavaCompiler->instance->prev->useSource->parserFactory->ParserFactory->instance->attr->Attr->instance->try->buf->CharBuffer->toCharArray->expr->length->wrap->parser->parserFactory->newParser->tree->parser->parseType->return->attr->attribType->catch->finally->useSource
JavacTaskPool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable, Worker):::Creates a new task as if by javax.tools.JavaCompiler#getTask and runs the provided worker with it:::opts->StreamSupport->options->spliterator->stream->Collectors->ArrayList->new->toCollection->collect->ctx->synchronized->cached->options2Contexts->Collections->emptyList->getOrDefault->if->cached->isEmpty->new->ReusableContext->else->cached->remove->task->systemProvider->getTask->task->addTaskListener->result->worker->withTask->ctx->clear->if->else->task->cleanup->synchronized->while->cacheSize->toRemove->options2Contexts->values->stream->Collection->stream->flatMap->sorted->findFirst->get->options2Contexts->get->remove->options2Contexts->new->ArrayList<>->computeIfAbsent->add->return
JavacTaskPool#cacheSize()::: javac task pool cache size:::return->options2Contexts->values->stream->Collection->stream->flatMap->count
JavacTaskPool#printStatistics(PrintStream)::: javac task pool print statistics:::out->println->out->println->out->println->out->println
JavacTaskPool.Worker#withTask(JavacTask)::: worker with task:::
JavacTaskPool.ReusableContext#clear()::: reusable context clear:::drop->drop->drop->drop->drop->drop->drop->drop->if->ht->get->Log->instance->clear->Enter->instance->newRound->ReusableJavaCompiler->instance->clear->Types->instance->newRound->Check->instance->newRound->Modules->instance->newRound->Annotate->instance->newRound->CompileStates->instance->clear->MultiTaskListener->instance->clear->syms->Symtab->instance->pollutionScanner->scan->roots->clear
JavacTaskPool.ReusableContext#finished(TaskEvent)::: reusable context finished:::if->e->getKind->roots->e->getCompilationUnit->add
JavacTaskPool.ReusableContext#started(TaskEvent)::: reusable context started:::
JavacTaskPool.ReusableContext#drop(Key)::: reusable context drop:::ht->remove
JavacTaskPool.ReusableContext#drop(Class)::: reusable context drop:::ht->key->remove
JavacTaskPool.ReusableContext.ReusableJavaCompiler#close()::: reusable java compiler close:::
JavacTaskPool.ReusableContext.ReusableJavaCompiler#clear()::: reusable java compiler clear:::newRound
JavacTaskPool.ReusableContext.ReusableJavaCompiler#checkReusable()::: reusable java compiler check reusable:::
JavacTaskPool.ReusableContext.ReusableLog#clear()::: reusable log clear:::recorded->clear->sourceMap->clear->new->DiagnosticListener<JavaFileObject>
JavacTool#name()::: javac tool name:::return
JavacTool#create():::Static factory method for creating new instances of this tool.:::return->new->JavacTool
JavacTool#getStandardFileManager(DiagnosticListener, Locale, Charset)::: javac tool get standard file manager:::context->new->Context->context->put->if->context->put->pw->new->PrintWriter->new->OutputStreamWriter->new->PrintWriter->context->put->CacheFSInfo->preRegister->return->new->JavacFileManager
JavacTool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable)::: javac tool get task:::context->new->Context->return->getTask
JavacTool#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable, Context)::: javac tool get task:::try->ccw->ClientCodeWrapper->instance->if->foreach->Objects->requireNonNull->if->foreach->sep->cls->indexOf->if->mod->cls->substring->if->SourceVersion->isName->throw->new->IllegalArgumentException->cls->substring->if->SourceVersion->isName->throw->new->IllegalArgumentException->if->ccw->wrapJavaFileObjects->foreach->if->cu->getKind->kindMsg->cu->getName->throw->new->IllegalArgumentException->if->context->ccw->wrap->put->if->context->new->PrintWriter->put->else->context->new->PrintWriter->put->if->getStandardFileManager->if->ccw->wrap->context->put->args->Arguments->instance->args->init->if->fileManager->isSupportedOption->target->Target->instance->list->List->target->multiReleaseValue->of->fileManager->list->iterator->handleOption->return->new->JavacTaskImpl->catch->throw->ex->getCause->throw->ex->getCause->new->RuntimeException->finally
JavacTool#run(InputStream, OutputStream, OutputStream, String...)::: javac tool run:::if->foreach->Objects->requireNonNull->return->new->PrintWriter->compile
JavacTool#getSourceVersions()::: javac tool get source versions:::return->Collections->EnumSet->SourceVersion->latest->range->unmodifiableSet
JavacTool#isSupportedOption(String)::: javac tool is supported option:::recognizedOptions->Option->getJavacToolOptions->foreach->if->o->matches->return->o->hasSeparateArg->return
JavacTrees#instance(JavaCompiler.CompilationTask)::: javac trees instance:::if->throw->new->IllegalArgumentException->return->getContext->instance
JavacTrees#instance(ProcessingEnvironment)::: javac trees instance:::if->throw->new->IllegalArgumentException->return->getContext->instance
JavacTrees#instance(Context)::: javac trees instance:::instance->context->get->if->new->JavacTrees->return
JavacTrees#updateContext(Context)::: javac trees update context:::init
JavacTrees#init(Context)::: javac trees init:::Modules->instance->Attr->instance->Enter->instance->JavacElements->instance->Log->instance->Resolve->instance->TreeMaker->instance->MemberEnter->instance->Names->instance->Types->instance->DocTreeMaker->instance->ParserFactory->instance->Symtab->instance->context->get->t->context->get->if
JavacTrees#getBreakIterator()::: javac trees get break iterator:::return
JavacTrees#getSourcePositions()::: javac trees get source positions:::return->new->DocSourcePositions
JavacTrees#getDocTreeFactory()::: javac trees get doc tree factory:::return
JavacTrees#getLastChild(DocTree)::: javac trees get last child:::last->new->DocTreeArr->tree->new->DocTreeScanner<Void,Void>->accept->return
JavacTrees#getTree(TypeElement)::: javac trees get tree:::return->getTree
JavacTrees#getTree(ExecutableElement)::: javac trees get tree:::return->getTree
JavacTrees#getTree(Element)::: javac trees get tree:::return->getTree
JavacTrees#getTree(Element, AnnotationMirror)::: javac trees get tree:::return->getTree
JavacTrees#getTree(Element, AnnotationMirror, AnnotationValue)::: javac trees get tree:::treeTopLevel->elements->getTreeAndTopLevel->if->return->return
JavacTrees#getPath(CompilationUnitTree, Tree)::: javac trees get path:::return->TreePath->getPath
JavacTrees#getPath(Element)::: javac trees get path:::return->getPath
JavacTrees#getPath(Element, AnnotationMirror)::: javac trees get path:::return->getPath
JavacTrees#getPath(Element, AnnotationMirror, AnnotationValue)::: javac trees get path:::treeTopLevel->elements->getTreeAndTopLevel->if->return->return->TreePath->getPath
JavacTrees#getElement(TreePath)::: javac trees get element:::tree->path->getLeaf->sym->TreeInfo->symbolFor->if->for->p->p->getParentPath->return
JavacTrees#getElement(DocTreePath)::: javac trees get element:::forTree->path->getLeaf->if->return->path->getTreePath->attributeDocReference->if->if->path->getParentPath->getLeaf->return->path->getTreePath->path->getParentPath->getLeaf->attributeParamIdentifier->return
JavacTrees#getFirstSentence(java.util.List)::: javac trees get first sentence:::return->docTreeMaker->getFirstSentence
JavacTrees#attributeDocReference(TreePath, DCReference)::: javac trees attribute doc reference:::env->getAttrContext->if->return->deferredDiagnosticHandler->new->Log.DeferredDiagnosticHandler->try->tsym->memberName->if->else->t->attr->attribType->if->t->isErroneous->toplevel->treeMaker->List->nil->TopLevel->msym->modules->getDefaultModule->sym->attr->attribIdent->sym->complete->if->sym->exists->if->return->else->if->hasTag->else->return->else->if->return->paramTypes->if->else->lb->new->ListBuffer<>->for->l->l->nonEmpty->lb->toList->sym->types->skipTypeVars->msym->findConstructor->findMethod->if->return->vsym->findField->if->types->vsym->enclClass->asType->msym->enclClass->asType->isSubtypeUnchecked->return->else->return->catch->return->finally->log->popDiagnosticHandler
JavacTrees#attributeParamIdentifier(TreePath, DCParam)::: javac trees attribute param identifier:::javadocSymbol->getElement->if->return->kind->javadocSymbol->getKind->params->List->nil->if->ee->ptag->isTypeParameter->ee->getTypeParameters->ee->getParameters->else->if->kind->isClass->kind->isInterface->te->te->getTypeParameters->foreach->if->param->getSimpleName->ptag->getName->getName->return->return
JavacTrees#findField(ClassSymbol, Name)::: javac trees find field:::return->new->HashSet<>->searchField
JavacTrees#searchField(ClassSymbol, Name, Set)::: javac trees search field:::if->searched->contains->return->searched->add->foreach->tsym->members->getSymbolsByName->if->return->encl->enclClass->if->vsym->searchField->if->return->superclass->tsym->getSuperclass->if->vsym->searchField->if->return->intfs->tsym->getInterfaces->for->l->l->nonEmpty->return
JavacTrees#findConstructor(ClassSymbol, List)::: javac trees find constructor:::foreach->tsym->members->getSymbolsByName->if->if->hasParameterTypes->return->return
JavacTrees#findMethod(ClassSymbol, Name, List)::: javac trees find method:::return->new->HashSet<>->searchMethod
JavacTrees#searchMethod(ClassSymbol, Name, List, Set)::: javac trees search method:::if->return->if->searched->contains->return->searched->add->if->lastFound->foreach->tsym->members->getSymbolsByName->if->if->if->return->else->foreach->tsym->members->getSymbolsByName->if->if->hasParameterTypes->return->superclass->tsym->getSuperclass->if->msym->searchMethod->if->return->intfs->tsym->getInterfaces->for->l->l->nonEmpty->encl->enclClass->if->msym->searchMethod->if->return->return
JavacTrees#hasParameterTypes(MethodSymbol, List)::: javac trees has parameter types:::if->return->if->method->params->size->paramTypes->size->return->methodParamTypes->types->method->asType->erasureRecursive->getParameterTypes->return->Type->isErroneous->fuzzyMatch->types->isSameTypes
JavacTrees#fuzzyMatch(List, List)::: javac trees fuzzy match:::l1->l2->while->l1->nonEmpty->if->fuzzyMatch->return->return
JavacTrees#fuzzyMatch(Type, Type)::: javac trees fuzzy match:::b->fuzzyMatcher->visit->return
JavacTrees#getTypeMirror(TreePath)::: javac trees get type mirror:::t->path->getLeaf->ty->return->ty->stripMetadataIfNeeded
JavacTrees#getScope(TreePath)::: javac trees get scope:::return->JavacScope->getAttrContext->create
JavacTrees#getDocComment(TreePath)::: javac trees get doc comment:::t->path->getCompilationUnit->leaf->path->getLeaf->if->cu->if->return->getCommentText->return
JavacTrees#getDocCommentTree(TreePath)::: javac trees get doc comment tree:::t->path->getCompilationUnit->leaf->path->getLeaf->if->cu->if->return->getCommentTree->return
JavacTrees#getDocCommentTree(Element)::: javac trees get doc comment tree:::path->getPath->if->return->return->getDocCommentTree
JavacTrees#getDocCommentTree(Element, String)::: javac trees get doc comment tree:::pkg->elements->getPackageOf->fileForInput->fileManager->pkg->getQualifiedName->toString->getFileForInput->if->throw->new->FileNotFoundException->return->getDocCommentTree
JavacTrees#isAccessible(Scope, TypeElement)::: javac trees is accessible:::if->env->return->resolve->isAccessible->else->return
JavacTrees#isAccessible(Scope, Element, DeclaredType)::: javac trees is accessible:::if->env->return->resolve->isAccessible->else->return
JavacTrees#getAttrContext(TreePath)::: javac trees get attr context:::if->path->getLeaf->throw->new->IllegalArgumentException->if->javacTaskImpl->enter->unit->path->getCompilationUnit->copier->treeMaker->forToplevel->createCopier->env->method->field->l->List->nil->p->while->l->p->getLeaf->prepend->p->getParentPath->for->l->nonEmpty->return->memberEnter->getInitEnv
JavacTrees#attribStatToTree(JCTree, Env, JCTree)::: javac trees attrib stat to tree:::prev->log->useSource->try->return->attr->attribStatToTree->catch->finally->log->useSource
JavacTrees#attribExprToTree(JCExpression, Env, JCTree)::: javac trees attrib expr to tree:::prev->log->useSource->try->return->attr->attribExprToTree->catch->finally->log->useSource
JavacTrees#asJavaFileObject(FileObject)::: javac trees as java file object:::jfo->if->checkHtmlKind->return->checkHtmlKind->new->HtmlFileObject->return
JavacTrees#checkHtmlKind(FileObject)::: javac trees check html kind:::BaseFileManager->fileObject->getName->getKind->checkHtmlKind
JavacTrees#checkHtmlKind(FileObject, JavaFileObject.Kind)::: javac trees check html kind:::if->throw->fileObject->getName->new->IllegalArgumentException
JavacTrees.HtmlFileObject#getKind()::: html file object get kind:::return->BaseFileManager->fileObject->getName->getKind
JavacTrees.HtmlFileObject#isNameCompatible(String, Kind)::: html file object is name compatible:::return
JavacTrees.HtmlFileObject#getNestingKind()::: html file object get nesting kind:::return
JavacTrees.HtmlFileObject#getAccessLevel()::: html file object get access level:::return
JavacTrees#getDocCommentTree(FileObject)::: javac trees get doc comment tree:::jfo->asJavaFileObject->diagSource->new->DiagnosticSource->comment->new->Comment->return->new->DocCommentParser->parse
JavacTrees#getDocTreePath(FileObject, PackageElement)::: javac trees get doc tree path:::jfo->asJavaFileObject->docCommentTree->getDocCommentTree->if->return->treePath->makeTreePath->return->new->DocTreePath
JavacTrees#setBreakIterator(BreakIterator)::: javac trees set break iterator:::
JavacTrees.Copier#copy(T, JCTree)::: copier copy:::t2->super->copy->if->return
JavacTrees#createCopier(TreeMaker)::: javac trees create copier:::return->new->Copier
JavacTrees#getOriginalType(javax.lang.model.type.ErrorType):::Returns the original type from the ErrorType object.:::if->return->getOriginalType->if->errorType->getKind->ct->return->extraType2OriginalMap->ct->getEnclosingType->ct->getMetadata->new->ClassType->computeIfAbsent->return
JavacTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.tree.Tree, com.sun.source.tree.CompilationUnitTree):::Prints a message of the specified kind at the location of the tree within the provided compilation unit:::pos->printMessage
JavacTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.doctree.DocTree, com.sun.source.doctree.DocCommentTree, com.sun.source.tree.CompilationUnitTree)::: javac trees print message:::pos->printMessage
JavacTrees#printMessage(Diagnostic.Kind, CharSequence, JCDiagnostic.DiagnosticPosition, com.sun.source.tree.CompilationUnitTree)::: javac trees print message:::oldSource->newSource->root->getSourceFile->if->else->log->useSource->try->switch->log->Errors->msg->toString->ProcMessager->error->break->log->Warnings->msg->toString->ProcMessager->warning->break->log->Warnings->msg->toString->ProcMessager->mandatoryWarning->break->log->Notes->msg->toString->ProcMessager->note->catch->finally->if->log->useSource
JavacTrees#getLub(CatchTree)::: javac trees get lub:::ct->v->if->getKind->ut->return->ut->getLub->else->return
JavacTrees#makeTreePath(PackageSymbol, JavaFileObject, DocCommentTree)::: javac trees make tree path:::jcCompilationUnit->List->nil->new->JCCompilationUnit->new->DocCommentTable->jcCompilationUnit->getLineMap->new->NamedImportScope->new->StarImportScope->WriteableScope->create->return->new->TreePath
Messages#add(String):::Add a new resource bundle to the list that is searched for localized messages.:::
Messages#getLocalizedString(Locale, String, Object...):::Get a localized formatted string.:::
MultiTaskListener#instance(Context):::Get the MultiTaskListener instance for this context.:::instance->context->get->if->new->MultiTaskListener->return
MultiTaskListener#getTaskListeners()::: multi task listener get task listeners:::return->Arrays->asList
MultiTaskListener#isEmpty()::: multi task listener is empty:::return
MultiTaskListener#add(TaskListener)::: multi task listener add:::foreach->if->ccw->unwrap->throw->new->IllegalStateException->Arrays->copyOf->ccw->wrap
MultiTaskListener#remove(TaskListener)::: multi task listener remove:::for->i
MultiTaskListener#started(TaskEvent)::: multi task listener started:::prevDeferredHandler->dcfh->setHandler->try->ll->foreach->l->started->catch->finally->dcfh->setHandler
MultiTaskListener#finished(TaskEvent)::: multi task listener finished:::prevDeferredHandler->dcfh->setHandler->try->ll->foreach->l->finished->catch->finally->dcfh->setHandler
MultiTaskListener#toString()::: multi task listener to string:::return->Arrays->toString
MultiTaskListener#clear()::: multi task listener clear:::
WrappingJavaFileManager#wrap(FileObject):::This implementation returns the given file object:::return
WrappingJavaFileManager#wrap(JavaFileObject):::This implementation forwards to #wrap(FileObject):::return->wrap
WrappingJavaFileManager#unwrap(FileObject):::This implementation returns the given file object:::return
WrappingJavaFileManager#unwrap(JavaFileObject):::This implementation forwards to #unwrap(FileObject):::return->unwrap
WrappingJavaFileManager#wrap(Iterable):::This implementation maps the given list of file objects by calling wrap on each:::mapped->new->ArrayList<>->foreach->mapped->wrap->add->return->Collections->unmodifiableList
WrappingJavaFileManager#unwrap(URI):::This implementation returns the given URI:::return
WrappingJavaFileManager#list(Location, String, Set, boolean)::: wrapping java file manager list:::return->super->list->wrap
WrappingJavaFileManager#inferBinaryName(Location, JavaFileObject)::: wrapping java file manager infer binary name:::return->super->unwrap->inferBinaryName
WrappingJavaFileManager#getJavaFileForInput(Location, String, Kind)::: wrapping java file manager get java file for input:::return->super->getJavaFileForInput->wrap
WrappingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)::: wrapping java file manager get java file for output:::return->super->unwrap->getJavaFileForOutput->wrap
WrappingJavaFileManager#getFileForInput(Location, String, String)::: wrapping java file manager get file for input:::return->super->getFileForInput->wrap
WrappingJavaFileManager#getFileForOutput(Location, String, String, FileObject)::: wrapping java file manager get file for output:::return->super->unwrap->getFileForOutput->wrap
WrappingJavaFileManager#contains(Location, FileObject)::: wrapping java file manager contains:::return->super->unwrap->contains

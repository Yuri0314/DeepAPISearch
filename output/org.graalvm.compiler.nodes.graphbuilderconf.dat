ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier, ValueNode[]):::Emits a class initialization barrier for type.:::
ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier):::Emits a class initialization barrier for type.:::return->apply
ClassInitializationPlugin#supportsLazyInitialization(ConstantPool):::Determines if cp has a variation of ConstantPool#loadReferencedType that can resolved a type without initializing it.:::
ClassInitializationPlugin#loadReferencedType(GraphBuilderContext, ConstantPool, int, int):::Ensures that the type referenced by the constant pool entry specified by cp and cpi is loaded:::
GeneratedInvocationPlugin#getSource():::Gets the class of the annotation for which this plugin was generated.:::
GraphBuilderConfiguration#copy():::Creates a copy of this configuration with all its plugins:::newPlugins->new->Plugins->result->new->GraphBuilderConfiguration->return
GraphBuilderConfiguration#withUnresolvedIsError(boolean):::Set the #unresolvedIsError flag:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#unresolvedIsError():::Returns true if it is an error for a class/field/method resolution to fail.:::return
GraphBuilderContext#push(JavaKind, ValueNode):::Pushes a given value to the frame state stack using an explicit kind:::
GraphBuilderContext#pop(JavaKind):::Pops a value from the frame state stack using an explicit kind.:::throw->GraalError->unimplemented
GraphBuilderContext#add(T):::Adds a node and all its inputs to the graph:::if->value->graph->return->return->GraphBuilderContextUtil->append->setStateAfterIfNecessary
GraphBuilderContext#addPush(JavaKind, T):::Adds a node with a non-void kind to the graph, pushes it to the stack:::equivalentValue->value->graph->append->push->return->GraphBuilderContextUtil->setStateAfterIfNecessary
GraphBuilderContext#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean):::Handles an invocation that a plugin determines can replace the original invocation (i.e., the one for which the plugin was applied):::
GraphBuilderContext#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[]):::Intrinsifies an invocation of a given method by inlining the bytecodes of a given substitution method.:::
GraphBuilderContext#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[]):::Intrinsifies an invocation of a given method by inlining the graph of a given substitution method.:::
GraphBuilderContext#setStateAfter(StateSplit):::Creates a snap shot of the current frame state with the BCI of the instruction after the one currently being parsed and assigns it to a given StateSplit#hasSideEffect() side effect node.:::
GraphBuilderContext#getParent():::Gets the parsing context for the method that inlines the method being parsed by this context.:::
GraphBuilderContext#getNonIntrinsicAncestor():::Gets the first ancestor parsing context that is not parsing a #parsingIntrinsic() intrinsic.:::ancestor->getParent->while->ancestor->parsingIntrinsic->ancestor->getParent->return
GraphBuilderContext#getCode():::Gets the code being parsed.:::
GraphBuilderContext#getMethod():::Gets the method being parsed by this context.:::
GraphBuilderContext#bci():::Gets the index of the bytecode instruction currently being parsed.:::
GraphBuilderContext#getInvokeKind():::Gets the kind of invocation currently being parsed.:::
GraphBuilderContext#getInvokeReturnType():::Gets the return type of the invocation currently being parsed.:::
GraphBuilderContext#getDepth():::Gets the inline depth of this context:::parent->getParent->result->while->parent->getParent->return
GraphBuilderContext#parsingIntrinsic():::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.:::return->getIntrinsic
GraphBuilderContext#getIntrinsic():::Gets the intrinsic of the current parsing context or null if not #parsingIntrinsic() parsing an intrinsic.:::
GraphBuilderContext#nullCheckedValue(ValueNode, DeoptimizationAction):::Gets a version of a given value that has a StampTool#isPointerNonNull(ValueNode) non-null stamp.:::if->StampTool->isPointerNonNull->condition->getGraph->IsNullNode->create->unique->fixedGuard->new->FixedGuardNode->append->nonNullReceiver->getGraph->PiNode->objectNonNull->create->addOrUniqueWithInputs->return->return
GraphBuilderContext#maskSubWordValue(ValueNode, JavaKind):::Adds masking to a given subword value according to a given JavaKind, such that the masked value falls in the range of the given kind:::if->kind->getStackKind->return->narrow->NarrowNode->kind->getBitCount->create->append->if->kind->isUnsigned->return->ZeroExtendNode->create->append->else->return->SignExtendNode->create->append
GraphBuilderContext#genExplicitExceptionEdge(BytecodeExceptionKind):::Generates an exception edge for the current bytecode:::return
GraphBuilderTool#append(T):::Adds the given node to the graph and also adds recursively all referenced inputs.:::
GraphBuilderTool#getGraph():::Gets the graph being constructed.:::
GraphBuilderTool#parsingIntrinsic():::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.:::
InlineInvokePlugin.InlineInfo#getMethodToInline():::Returns the method to be inlined, or null if the call site must not be inlined.:::return
InlineInvokePlugin.InlineInfo#getIntrinsicBytecodeProvider():::Gets the provider of bytecode to be parsed for #getMethodToInline() if is is an intrinsic for the original method (i.e., the method passed to InlineInvokePlugin#shouldInlineInvoke):::return
InlineInvokePlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Determines whether a call to a given method is to be inlined:::return
InlineInvokePlugin#notifyBeforeInline(ResolvedJavaMethod):::Notification that a method is about to be inlined.:::
InlineInvokePlugin#notifyAfterInline(ResolvedJavaMethod):::Notification that a method was inlined.:::
InlineInvokePlugin#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke):::Notifies this plugin of the Invoke node created for a method that was not inlined per #shouldInlineInvoke.:::
IntrinsicContext#allowPartialIntrinsicArgumentMismatch():::A partial intrinsic exits by (effectively) calling the intrinsified method:::return
IntrinsicContext#getOriginalMethod():::Gets the method being intrinsified.:::return
IntrinsicContext#getIntrinsicMethod():::Gets the method providing the intrinsic implementation.:::return
IntrinsicContext#getBytecodeProvider():::Gets provider of bytecode to be parsed for a method that is part of an intrinsic.:::return
IntrinsicContext#isCallToOriginal(ResolvedJavaMethod):::Determines if a call within the compilation scope of this intrinsic represents a call to the #getOriginalMethod() original method:::return->originalMethod->equals->intrinsicMethod->equals
IntrinsicContext.SideEffectsState#isAfterSideEffect():::Determines if the current program point is preceded by one or more side effects.:::
IntrinsicContext.SideEffectsState#sideEffects():::Gets the side effects preceding the current program point.:::
IntrinsicContext.SideEffectsState#addSideEffect(StateSplit):::Records a side effect for the current program point.:::
InvocationPlugin.Receiver#get():::Gets the receiver value, null checking it first if necessary.:::return->get
InvocationPlugin.Receiver#get(boolean):::Gets the receiver value, optionally null checking it first if necessary.:::
InvocationPlugin.Receiver#isConstant():::Determines if the receiver is constant.:::return
InvocationPlugin#isSignaturePolymorphic():::Determines if this plugin is for a method with a polymorphic signature (e.g:::return
InvocationPlugin#inlineOnly():::Determines if this plugin can only be used when inlining the method is it associated with:::return->isSignaturePolymorphic
InvocationPlugin#isDecorator():::Determines if this plugin only decorates the method is it associated with:::return
InvocationPlugin#applyPolymorphic(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...):::Handles invocation of a signature polymorphic method.:::return->defaultHandler
InvocationPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[]):::Executes this plugin against a set of invocation arguments:::if->isSignaturePolymorphic->return->applyPolymorphic->else->if->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->return->defaultHandler->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->return->defaultHandler
InvocationPlugin#defaultHandler(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...):::Handles an invocation when a specific apply method is not available.:::throw->targetMethod->format->new->GraalError
InvocationPlugins.OptionalLazySymbol#resolve():::Gets the resolved Class corresponding to this symbol or null if resolution fails.:::if->resolvedOrNull->resolveClass->return
InvocationPlugins.Registration#setAllowOverwrite(boolean):::Configures this registration to allow or disallow overwriting of invocation plugins.:::return
InvocationPlugins.Registration#register0(String, InvocationPlugin):::Registers a plugin for a method with no arguments.:::plugins->register
InvocationPlugins.Registration#register1(String, Type, InvocationPlugin):::Registers a plugin for a method with 1 argument.:::plugins->register
InvocationPlugins.Registration#register2(String, Type, Type, InvocationPlugin):::Registers a plugin for a method with 2 arguments.:::plugins->register
InvocationPlugins.Registration#register3(String, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 3 arguments.:::plugins->register
InvocationPlugins.Registration#register4(String, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 4 arguments.:::plugins->register
InvocationPlugins.Registration#register5(String, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 5 arguments.:::plugins->register
InvocationPlugins.Registration#register6(String, Type, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 6 arguments.:::plugins->register
InvocationPlugins.Registration#register7(String, Type, Type, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 7 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional0(String, InvocationPlugin):::Registers a plugin for an optional method with no arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional1(String, Type, InvocationPlugin):::Registers a plugin for an optional method with 1 argument.:::plugins->register
InvocationPlugins.Registration#registerOptional2(String, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 2 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional3(String, Type, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 3 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional4(String, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 4 arguments.:::plugins->register
InvocationPlugins.Registration#registerMethodSubstitution(Class, String, Type...):::Registers a plugin that implements a method based on the bytecode of a substitute method.:::registerMethodSubstitution
InvocationPlugins.Registration#registerMethodSubstitution(Class, String, String, Type...):::Registers a plugin that implements a method based on the bytecode of a substitute method.:::plugin->createMethodSubstitution->plugins->register
InvocationPlugins.LateRegistration#register(InvocationPlugin, String, Type...):::Registers an invocation plugin for a given method:::isStatic->if->binding->new->Binding->bindings->add
InvocationPlugins#defer(Runnable):::Adds a Runnable for doing registration deferred until the first time #get(ResolvedJavaMethod) or #closeRegistration() is called on this object.:::deferredRegistrations->add
InvocationPlugins.ClassPlugins#get(ResolvedJavaMethod):::Gets the invocation plugin for a given method.:::binding->bindings->method->getName->get->while->if->method->isStatic->if->method->getSignature->toMethodDescriptor->startsWith->return->return
InvocationPlugins.ClassPlugins#register(Binding):::Registers binding.:::head->bindings->get->bindings->put
InvocationPlugins#put(InvocationPlugin, boolean, boolean, Type, String, Type...):::Registers a binding of a method to an invocation plugin.:::internalName->MetaUtil->declaringClass->getTypeName->toInternalName->classPlugins->registrations->get->if->new->ClassPlugins->registrations->put->binding->new->Binding->classPlugins->register->return
InvocationPlugins#canBeIntrinsified(ResolvedJavaType):::Determines if methods in a given class can have invocation plugins.:::return
InvocationPlugins#addTestPlugins(InvocationPlugins, List>):::Extends the plugins in this object with those from other:::otherBindings->other->getBindings->if->otherBindings->isEmpty->return->if->EconomicMap->create->c->otherBindings->getEntries->while->c->advance->declaringClass->c->getKey->bindings->testExtensions->get->if->new->ArrayList<>->testExtensions->put->foreach->c->getValue->index->findBinding->if->if->ignored->Pair->create->add->else->bindings->add
InvocationPlugins#removeTestPlugins(InvocationPlugins):::Removes the plugins from other in this object that were added by #addTestPlugins.:::if->c->other->getBindings->getEntries->while->c->advance->declaringClass->c->getKey->bindings->testExtensions->get->if->foreach->c->getValue->index->findBinding->if->bindings->remove->if->bindings->isEmpty->testExtensions->removeKey->if->testExtensions->isEmpty
InvocationPlugins#closeRegistration():::Processes deferred registrations and then closes this object for future registration.:::flushDeferrables
InvocationPlugins#isEmpty():::Determines if this object currently contains any plugins (in any state of registration):::if->parent->isEmpty->return->resolvedRegs->if->if->resolvedRegs->isEmpty->return->deferred->if->if->deferred->isEmpty->return->for->late->return->registrations->size
InvocationPlugins#register(InvocationPlugin, Type, String, Type...):::Registers an invocation plugin for a given method:::register
InvocationPlugins#registerOptional(InvocationPlugin, Type, String, Type...):::Registers an invocation plugin for a given, optional method:::register
InvocationPlugins#lookupInvocation(ResolvedJavaMethod):::Gets the plugin for a given method.:::if->plugin->parent->lookupInvocation->if->return->invocationPlugin->get->return
InvocationPlugins#getBindings(boolean):::Gets the set of registered invocation plugins.:::return->getBindings
InvocationPlugins#getParent():::Gets the invocation plugins #lookupInvocation(ResolvedJavaMethod) searched before searching in this object.:::return
InvocationPlugins#checkNewNodes(GraphBuilderContext, InvocationPlugin, NodeIterable):::Checks a set of nodes added to the graph by an InvocationPlugin.:::if->parent->checkNewNodes
InvocationPlugins#resolveClass(String, boolean):::Resolves a name to a class.:::try->cl->ClassLoader->getSystemClassLoader->return->Class->forName->catch->if->return->throw->new->GraalError->finally
InvocationPlugins#resolveType(Type, boolean):::Resolves a Type to a Class.:::if->return->if->return->resolve->if->throw->type->getTypeName->new->GraalError->return->type->getTypeName->resolveClass
InvocationPlugins#resolveMethod(Class, Binding):::Resolves a given binding to a method in a given class:::if->equals->return->methods->declaringClass->getDeclaredMethods->parameterTypeNames->parseParameters->match->for->i->return
InvocationPlugins#resolveJavaMethod(ResolvedJavaType, Binding):::Same as #resolveMethod(Class, Binding) and #resolveConstructor(Class, Binding) except in terms of ResolvedJavaType and ResolvedJavaMethod.:::methods->declaringClass->getDeclaredMethods->if->equals->foreach->if->m->getName->equals->m->getSignature->toMethodDescriptor->startsWith->return->return->match->for->i->return
InvocationPlugins#resolveConstructor(Class, Binding):::Resolves a given binding to a constructor in a given class.:::if->equals->return->constructors->declaringClass->getDeclaredConstructors->parameterTypeNames->parseParameters->for->i->return
InvokeDynamicPlugin#isResolvedDynamicInvoke(GraphBuilderContext, int, int):::Checks for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).:::
InvokeDynamicPlugin#supportsDynamicInvoke(GraphBuilderContext, int, int):::Checks if this plugin instance supports the specified dynamic invoke.:::
InvokeDynamicPlugin#recordDynamicMethod(GraphBuilderContext, int, int, ResolvedJavaMethod):::Notifies this object of the value and context of the dynamic method target (e.g., A HotSpot adapter method) for a resolved dynamic invoke.:::
InvokeDynamicPlugin#genAppendixNode(GraphBuilderContext, int, int, JavaConstant, FrameState):::Notifies this object of the value and context of the dynamic appendix object for a resolved dynamic invoke.:::
MethodSubstitutionPlugin#getSubstitute(MetaAccessProvider):::Gets the substitute method, resolving it first if necessary.:::if->metaAccess->getJavaSubstitute->lookupJavaMethod->return
MethodSubstitutionPlugin#getBytecodeProvider():::Gets the object used to access the bytecodes of the substitute method.:::return
MethodSubstitutionPlugin#getDeclaringClass():::Gets the class in which the substitute method is declared.:::return
MethodSubstitutionPlugin#getJavaSubstitute():::Gets the reflection API version of the substitution method.:::substituteMethod->lookupSubstitute->modifiers->substituteMethod->getModifiers->if->Modifier->isAbstract->Modifier->isNative->throw->new->GraalError->if->Modifier->isStatic->throw->new->GraalError->return
NodeIntrinsicPluginFactory.InjectionProvider#getInjectedStamp(Class, boolean):::Gets a stamp denoting a given type and non-nullness property.:::
NodePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Handle the parsing of a method invocation bytecode to a method that can be bound statically:::return
NodePlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField):::Handle the parsing of a GETFIELD bytecode:::return
NodePlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField):::Handle the parsing of a GETSTATIC bytecode:::return
NodePlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode):::Handle the parsing of a PUTFIELD bytecode.:::return
NodePlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode):::Handle the parsing of a PUTSTATIC bytecode.:::return
NodePlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind):::Handle the parsing of an array load bytecode:::return
NodePlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode):::Handle the parsing of an array store bytecode.:::return
NodePlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile):::Handle the parsing of a CHECKCAST bytecode:::return
NodePlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile):::Handle the parsing of a INSTANCEOF bytecode:::return
NodePlugin#handleNewInstance(GraphBuilderContext, ResolvedJavaType):::Handle the parsing of a NEW bytecode:::return
NodePlugin#handleNewArray(GraphBuilderContext, ResolvedJavaType, ValueNode):::Handle the parsing of a NEWARRAY and ANEWARRAY bytecode:::return
NodePlugin#handleNewMultiArray(GraphBuilderContext, ResolvedJavaType, ValueNode[]):::Handle the parsing of a MULTIANEWARRAY bytecode:::return
NodePlugin#instrumentExceptionDispatch(StructuredGraph, FixedWithNextNode):::Allows this plugin to add nodes after the exception object has been loaded in the dispatch sequence:::return
NodePlugin#canChangeStackKind(GraphBuilderContext):::If the plugin GraphBuilderContext#push pushes a value with a different JavaKind than specified by the bytecode, it must override this method and return true:::return
TypePlugin#interceptType(GraphBuilderTool, JavaType, boolean):::Intercept the type of arguments or return values.:::

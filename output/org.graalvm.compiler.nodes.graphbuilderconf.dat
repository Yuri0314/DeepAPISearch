org.graalvm.compiler.nodes.graphbuilderconf.ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier, ValueNode[])->boolean:::Emits a class initialization barrier for type.
org.graalvm.compiler.nodes.graphbuilderconf.ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier)->boolean:::Emits a class initialization barrier for type.
org.graalvm.compiler.nodes.graphbuilderconf.ClassInitializationPlugin#supportsLazyInitialization(ConstantPool)->boolean:::Determines if cp has a variation of ConstantPool#loadReferencedType that can resolved a type without initializing it.
org.graalvm.compiler.nodes.graphbuilderconf.ClassInitializationPlugin#loadReferencedType(GraphBuilderContext, ConstantPool, int, int)->void:::Ensures that the type referenced by the constant pool entry specified by cp and cpi is loaded
org.graalvm.compiler.nodes.graphbuilderconf.ForeignCallPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: foreign call plugin execute
org.graalvm.compiler.nodes.graphbuilderconf.GeneratedInvocationPlugin#getSource()->Class:::Gets the class of the annotation for which this plugin was generated.
org.graalvm.compiler.nodes.graphbuilderconf.GeneratedInvocationPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: generated invocation plugin execute
org.graalvm.compiler.nodes.graphbuilderconf.GeneratedInvocationPlugin#getApplySourceLocation(MetaAccessProvider)->StackTraceElement::: generated invocation plugin get apply source location
org.graalvm.compiler.nodes.graphbuilderconf.GeneratedInvocationPlugin#checkInjectedArgument(GraphBuilderContext, ValueNode, ResolvedJavaMethod)->boolean::: generated invocation plugin check injected argument
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getInvocationPlugins()->InvocationPlugins::: plugins get invocation plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getNodePlugins()->NodePlugin[]::: plugins get node plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#appendNodePlugin(NodePlugin)->void::: plugins append node plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#prependNodePlugin(NodePlugin)->void::: plugins prepend node plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#clearNodePlugin()->void::: plugins clear node plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getParameterPlugins()->ParameterPlugin[]::: plugins get parameter plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#appendParameterPlugin(ParameterPlugin)->void::: plugins append parameter plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#prependParameterPlugin(ParameterPlugin)->void::: plugins prepend parameter plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getTypePlugins()->TypePlugin[]::: plugins get type plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#appendTypePlugin(TypePlugin)->void::: plugins append type plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#prependTypePlugin(TypePlugin)->void::: plugins prepend type plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#clearParameterPlugin()->void::: plugins clear parameter plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getInlineInvokePlugins()->InlineInvokePlugin[]::: plugins get inline invoke plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#appendInlineInvokePlugin(InlineInvokePlugin)->void::: plugins append inline invoke plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#prependInlineInvokePlugin(InlineInvokePlugin)->void::: plugins prepend inline invoke plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#clearInlineInvokePlugins()->void::: plugins clear inline invoke plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getClassInitializationPlugin()->ClassInitializationPlugin::: plugins get class initialization plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#setClassInitializationPlugin(ClassInitializationPlugin)->void::: plugins set class initialization plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getInvokeDynamicPlugin()->InvokeDynamicPlugin::: plugins get invoke dynamic plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#setInvokeDynamicPlugin(InvokeDynamicPlugin)->void::: plugins set invoke dynamic plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getProfilingPlugin()->ProfilingPlugin::: plugins get profiling plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#setProfilingPlugin(ProfilingPlugin)->void::: plugins set profiling plugin
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins#getOverridingStamp(GraphBuilderTool, JavaType, boolean)->StampPair::: plugins get overriding stamp
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#copy()->GraphBuilderConfiguration:::Creates a copy of this configuration with all its plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withUnresolvedIsError(boolean)->GraphBuilderConfiguration:::Set the #unresolvedIsError flag
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withEagerResolving(boolean)->GraphBuilderConfiguration::: graph builder configuration with eager resolving
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withSkippedExceptionTypes(ResolvedJavaType[])->GraphBuilderConfiguration::: graph builder configuration with skipped exception types
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withBytecodeExceptionMode(BytecodeExceptionMode)->GraphBuilderConfiguration::: graph builder configuration with bytecode exception mode
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withOmitAssertions(boolean)->GraphBuilderConfiguration::: graph builder configuration with omit assertions
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withFullInfopoints(boolean)->GraphBuilderConfiguration::: graph builder configuration with full infopoints
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withNodeSourcePosition(boolean)->GraphBuilderConfiguration::: graph builder configuration with node source position
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#withRetainLocalVariables(boolean)->GraphBuilderConfiguration::: graph builder configuration with retain local variables
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#getSkippedExceptionTypes()->List::: graph builder configuration get skipped exception types
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#eagerResolving()->boolean::: graph builder configuration eager resolving
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#getBytecodeExceptionMode()->BytecodeExceptionMode::: graph builder configuration get bytecode exception mode
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#omitAssertions()->boolean::: graph builder configuration omit assertions
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#trackNodeSourcePosition()->boolean::: graph builder configuration track node source position
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#retainLocalVariables()->boolean::: graph builder configuration retain local variables
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#insertFullInfopoints()->boolean::: graph builder configuration insert full infopoints
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#getDefault(Plugins)->GraphBuilderConfiguration::: graph builder configuration get default
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#getSnippetDefault(Plugins)->GraphBuilderConfiguration::: graph builder configuration get snippet default
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#unresolvedIsError()->boolean:::Returns true if it is an error for a class/field/method resolution to fail.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration#getPlugins()->Plugins::: graph builder configuration get plugins
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#push(JavaKind, ValueNode)->void:::Pushes a given value to the frame state stack using an explicit kind
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#pop(JavaKind)->ValueNode:::Pops a value from the frame state stack using an explicit kind.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#add(T)->T:::Adds a node and all its inputs to the graph
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#addNonNullCast(ValueNode)->ValueNode::: graph builder context add non null cast
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#addPush(JavaKind, T)->T:::Adds a node with a non-void kind to the graph, pushes it to the stack
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)->Invoke:::Handles an invocation that a plugin determines can replace the original invocation (i.e., the one for which the plugin was applied)
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)->void::: graph builder context handle replaced invoke
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean:::Intrinsifies an invocation of a given method by inlining the bytecodes of a given substitution method.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[])->boolean:::Intrinsifies an invocation of a given method by inlining the graph of a given substitution method.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#setStateAfter(StateSplit)->void:::Creates a snap shot of the current frame state with the BCI of the instruction after the one currently being parsed and assigns it to a given StateSplit#hasSideEffect() side effect node.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getParent()->GraphBuilderContext:::Gets the parsing context for the method that inlines the method being parsed by this context.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getNonIntrinsicAncestor()->GraphBuilderContext:::Gets the first ancestor parsing context that is not parsing a #parsingIntrinsic() intrinsic.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getCode()->Bytecode:::Gets the code being parsed.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getMethod()->ResolvedJavaMethod:::Gets the method being parsed by this context.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#bci()->int:::Gets the index of the bytecode instruction currently being parsed.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getInvokeKind()->InvokeKind:::Gets the kind of invocation currently being parsed.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getInvokeReturnType()->JavaType:::Gets the return type of the invocation currently being parsed.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getInvokeReturnStamp(Assumptions)->StampPair::: graph builder context get invoke return stamp
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getDepth()->int:::Gets the inline depth of this context
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#parsingIntrinsic()->boolean:::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getIntrinsic()->IntrinsicContext:::Gets the intrinsic of the current parsing context or null if not #parsingIntrinsic() parsing an intrinsic.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#bailout(String)->BailoutException::: graph builder context bailout
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#nullCheckedValue(ValueNode)->ValueNode::: graph builder context null checked value
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#nullCheckedValue(ValueNode, DeoptimizationAction)->ValueNode:::Gets a version of a given value that has a StampTool#isPointerNonNull(ValueNode) non-null stamp.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#genCheckcastDynamic(ValueNode, ValueNode)->void::: graph builder context gen checkcast dynamic
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#notifyReplacedCall(ResolvedJavaMethod, ConstantNode)->void::: graph builder context notify replaced call
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext.ExternalInliningContext#getInlinedDepth()->int::: external inlining context get inlined depth
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#getExternalInliningContext()->ExternalInliningContext::: graph builder context get external inlining context
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#maskSubWordValue(ValueNode, JavaKind)->ValueNode:::Adds masking to a given subword value according to a given JavaKind, such that the masked value falls in the range of the given kind
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#needsExplicitException()->boolean::: graph builder context needs explicit exception
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext#genExplicitExceptionEdge(BytecodeExceptionKind)->AbstractBeginNode:::Generates an exception edge for the current bytecode
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContextUtil#setStateAfterIfNecessary(GraphBuilderContext, T)->T::: graph builder context util set state after if necessary
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#append(T)->T:::Adds the given node to the graph and also adds recursively all referenced inputs.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getStampProvider()->StampProvider::: graph builder tool get stamp provider
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getMetaAccess()->MetaAccessProvider::: graph builder tool get meta access
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getReplacements()->Replacements::: graph builder tool get replacements
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getAssumptions()->Assumptions::: graph builder tool get assumptions
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getConstantReflection()->ConstantReflectionProvider::: graph builder tool get constant reflection
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getConstantFieldProvider()->ConstantFieldProvider::: graph builder tool get constant field provider
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getGraph()->StructuredGraph:::Gets the graph being constructed.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getOptions()->OptionValues::: graph builder tool get options
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#getDebug()->DebugContext::: graph builder tool get debug
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#parsingIntrinsic()->boolean:::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.
org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool#canDeferPlugin(GeneratedInvocationPlugin)->boolean::: graph builder tool can defer plugin
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#createStandardInlineInfo(ResolvedJavaMethod)->InlineInfo::: inline info create standard inline info
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#createIntrinsicInlineInfo(ResolvedJavaMethod, BytecodeProvider)->InlineInfo::: inline info create intrinsic inline info
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#createMethodSubstitutionInlineInfo(ResolvedJavaMethod, MethodSubstitutionPlugin)->InlineInfo::: inline info create method substitution inline info
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#getMethodToInline()->ResolvedJavaMethod:::Returns the method to be inlined, or null if the call site must not be inlined.
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#allowsInlining()->boolean::: inline info allows inlining
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#getIntrinsicBytecodeProvider()->BytecodeProvider:::Gets the provider of bytecode to be parsed for #getMethodToInline() if is is an intrinsic for the original method (i.e., the method passed to InlineInvokePlugin#shouldInlineInvoke)
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#isSubstitution()->boolean::: inline info is substitution
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin.InlineInfo#getPlugin()->MethodSubstitutionPlugin::: inline info get plugin
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo:::Determines whether a call to a given method is to be inlined
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin#notifyBeforeInline(ResolvedJavaMethod)->void:::Notification that a method is about to be inlined.
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin#notifyAfterInline(ResolvedJavaMethod)->void:::Notification that a method was inlined.
org.graalvm.compiler.nodes.graphbuilderconf.InlineInvokePlugin#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)->void:::Notifies this plugin of the Invoke node created for a method that was not inlined per #shouldInlineInvoke.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#allowPartialIntrinsicArgumentMismatch()->boolean:::A partial intrinsic exits by (effectively) calling the intrinsified method
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#getOriginalMethod()->ResolvedJavaMethod:::Gets the method being intrinsified.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#getIntrinsicMethod()->ResolvedJavaMethod:::Gets the method providing the intrinsic implementation.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#getBytecodeProvider()->BytecodeProvider:::Gets provider of bytecode to be parsed for a method that is part of an intrinsic.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#isCallToOriginal(ResolvedJavaMethod)->boolean:::Determines if a call within the compilation scope of this intrinsic represents a call to the #getOriginalMethod() original method
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#isPostParseInlined()->boolean::: intrinsic context is post parse inlined
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#isCompilationRoot()->boolean::: intrinsic context is compilation root
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#getNodeSourcePosition()->NodeSourcePosition::: intrinsic context get node source position
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#setNodeSourcePosition(NodeSourcePosition)->void::: intrinsic context set node source position
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.SideEffectsState#isAfterSideEffect()->boolean:::Determines if the current program point is preceded by one or more side effects.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.SideEffectsState#sideEffects()->Iterable:::Gets the side effects preceding the current program point.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.SideEffectsState#addSideEffect(StateSplit)->void:::Records a side effect for the current program point.
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#isDeferredInvoke(StateSplit)->boolean::: intrinsic context is deferred invoke
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#createFrameState(StructuredGraph, SideEffectsState, StateSplit, NodeSourcePosition)->FrameState::: intrinsic context create frame state
org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext#toString()->String::: intrinsic context to string
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver#get()->ValueNode:::Gets the receiver value, null checking it first if necessary.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver#get(boolean)->ValueNode:::Gets the receiver value, optionally null checking it first if necessary.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver#isConstant()->boolean:::Determines if the receiver is constant.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#isSignaturePolymorphic()->boolean:::Determines if this plugin is for a method with a polymorphic signature (e.g
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#inlineOnly()->boolean:::Determines if this plugin can only be used when inlining the method is it associated with
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#isDecorator()->boolean:::Determines if this plugin only decorates the method is it associated with
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#applyPolymorphic(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...)->boolean:::Handles invocation of a signature polymorphic method.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: invocation plugin apply
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean:::Executes this plugin against a set of invocation arguments
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#defaultHandler(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...)->boolean:::Handles an invocation when a specific apply method is not available.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin#getApplySourceLocation(MetaAccessProvider)->StackTraceElement::: invocation plugin get apply source location
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.InvocationPluginReceiver#get(boolean)->ValueNode::: invocation plugin receiver get
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.InvocationPluginReceiver#isConstant()->boolean::: invocation plugin receiver is constant
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.InvocationPluginReceiver#init(ResolvedJavaMethod, ValueNode[])->InvocationPluginReceiver::: invocation plugin receiver init
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ResolvedJavaSymbol#getResolved()->ResolvedJavaType::: resolved java symbol get resolved
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ResolvedJavaSymbol#toString()->String::: resolved java symbol to string
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.OptionalLazySymbol#getTypeName()->String::: optional lazy symbol get type name
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.OptionalLazySymbol#resolve()->Class:::Gets the resolved Class corresponding to this symbol or null if resolution fails.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.OptionalLazySymbol#toString()->String::: optional lazy symbol to string
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#getReceiverType()->Class::: registration get receiver type
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#setAllowOverwrite(boolean)->Registration:::Configures this registration to allow or disallow overwriting of invocation plugins.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register0(String, InvocationPlugin)->void:::Registers a plugin for a method with no arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register1(String, Type, InvocationPlugin)->void:::Registers a plugin for a method with 1 argument.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register2(String, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 2 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register3(String, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 3 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register4(String, Type, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 4 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register5(String, Type, Type, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 5 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register6(String, Type, Type, Type, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 6 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#register7(String, Type, Type, Type, Type, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for a method with 7 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerOptional0(String, InvocationPlugin)->void:::Registers a plugin for an optional method with no arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerOptional1(String, Type, InvocationPlugin)->void:::Registers a plugin for an optional method with 1 argument.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerOptional2(String, Type, Type, InvocationPlugin)->void:::Registers a plugin for an optional method with 2 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerOptional3(String, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for an optional method with 3 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerOptional4(String, Type, Type, Type, Type, InvocationPlugin)->void:::Registers a plugin for an optional method with 4 arguments.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerMethodSubstitution(Class, String, Type...)->void:::Registers a plugin that implements a method based on the bytecode of a substitute method.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#registerMethodSubstitution(Class, String, String, Type...)->void:::Registers a plugin that implements a method based on the bytecode of a substitute method.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration#createMethodSubstitution(Class, String, Type...)->MethodSubstitutionPlugin::: registration create method substitution
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.LateRegistration#register(InvocationPlugin, String, Type...)->void:::Registers an invocation plugin for a given method
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.LateRegistration#close()->void::: late registration close
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Binding#toString()->String::: binding to string
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#defer(Runnable)->void:::Adds a Runnable for doing registration deferred until the first time #get(ResolvedJavaMethod) or #closeRegistration() is called on this object.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ClassPlugins#get(ResolvedJavaMethod)->InvocationPlugin:::Gets the invocation plugin for a given method.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ClassPlugins#register(Binding, boolean)->void::: class plugins register
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ClassPlugins#lookup(Binding)->InvocationPlugin::: class plugins lookup
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.ClassPlugins#register(Binding)->void:::Registers binding.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#put(InvocationPlugin, boolean, boolean, Type, String, Type...)->Binding:::Registers a binding of a method to an invocation plugin.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#get(ResolvedJavaMethod)->InvocationPlugin::: invocation plugins get
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#canBeIntrinsified(ResolvedJavaType)->boolean:::Determines if methods in a given class can have invocation plugins.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#findLateClassPlugins(String)->LateClassPlugins::: invocation plugins find late class plugins
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#addTestPlugins(InvocationPlugins, List>)->void:::Extends the plugins in this object with those from other
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#removeTestPlugins(InvocationPlugins)->void:::Removes the plugins from other in this object that were added by #addTestPlugins.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#registerLate(Type, List)->void::: invocation plugins register late
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#closeRegistration()->void:::Processes deferred registrations and then closes this object for future registration.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#isEmpty()->boolean:::Determines if this object currently contains any plugins (in any state of registration)
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#register(InvocationPlugin, boolean, boolean, Type, String, Type...)->void::: invocation plugins register
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#register(InvocationPlugin, Type, String, Type...)->void:::Registers an invocation plugin for a given method
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#register(InvocationPlugin, String, String, Type...)->void::: invocation plugins register
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#registerOptional(InvocationPlugin, Type, String, Type...)->void:::Registers an invocation plugin for a given, optional method
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#lookupInvocation(ResolvedJavaMethod)->InvocationPlugin:::Gets the plugin for a given method.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#getBindings(boolean)->EconomicMap>:::Gets the set of registered invocation plugins.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#getParent()->InvocationPlugins:::Gets the invocation plugins #lookupInvocation(ResolvedJavaMethod) searched before searching in this object.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#toString()->String::: invocation plugins to string
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#checkNewNodes(GraphBuilderContext, InvocationPlugin, NodeIterable)->void:::Checks a set of nodes added to the graph by an InvocationPlugin.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#resolveClass(String, boolean)->Class:::Resolves a name to a class.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#resolveType(Type, boolean)->Class:::Resolves a Type to a Class.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#resolveMethod(Class, Binding)->Method:::Resolves a given binding to a method in a given class
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#resolveJavaMethod(ResolvedJavaType, Binding)->ResolvedJavaMethod:::Same as #resolveMethod(Class, Binding) and #resolveConstructor(Class, Binding) except in terms of ResolvedJavaType and ResolvedJavaMethod.
org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins#resolveConstructor(Class, Binding)->Constructor:::Resolves a given binding to a constructor in a given class.
org.graalvm.compiler.nodes.graphbuilderconf.InvokeDynamicPlugin#isResolvedDynamicInvoke(GraphBuilderContext, int, int)->boolean:::Checks for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).
org.graalvm.compiler.nodes.graphbuilderconf.InvokeDynamicPlugin#supportsDynamicInvoke(GraphBuilderContext, int, int)->boolean:::Checks if this plugin instance supports the specified dynamic invoke.
org.graalvm.compiler.nodes.graphbuilderconf.InvokeDynamicPlugin#recordDynamicMethod(GraphBuilderContext, int, int, ResolvedJavaMethod)->void:::Notifies this object of the value and context of the dynamic method target (e.g., A HotSpot adapter method) for a resolved dynamic invoke.
org.graalvm.compiler.nodes.graphbuilderconf.InvokeDynamicPlugin#genAppendixNode(GraphBuilderContext, int, int, JavaConstant, FrameState)->ValueNode:::Notifies this object of the value and context of the dynamic appendix object for a resolved dynamic invoke.
org.graalvm.compiler.nodes.graphbuilderconf.LoopExplosionPlugin#loopExplosionKind(ResolvedJavaMethod)->LoopExplosionKind::: loop explosion plugin loop explosion kind
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#inlineOnly()->boolean::: method substitution plugin inline only
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#getSubstitute(MetaAccessProvider)->ResolvedJavaMethod:::Gets the substitute method, resolving it first if necessary.
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#getBytecodeProvider()->BytecodeProvider:::Gets the object used to access the bytecodes of the substitute method.
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#getDeclaringClass()->Class:::Gets the class in which the substitute method is declared.
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#getJavaSubstitute()->Method:::Gets the reflection API version of the substitution method.
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: method substitution plugin execute
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#getApplySourceLocation(MetaAccessProvider)->StackTraceElement::: method substitution plugin get apply source location
org.graalvm.compiler.nodes.graphbuilderconf.MethodSubstitutionPlugin#toString()->String::: method substitution plugin to string
org.graalvm.compiler.nodes.graphbuilderconf.NodeIntrinsicPluginFactory.InjectionProvider#getInjectedArgument(Class)->T::: injection provider get injected argument
org.graalvm.compiler.nodes.graphbuilderconf.NodeIntrinsicPluginFactory.InjectionProvider#getInjectedStamp(Class, boolean)->Stamp:::Gets a stamp denoting a given type and non-nullness property.
org.graalvm.compiler.nodes.graphbuilderconf.NodeIntrinsicPluginFactory#registerPlugins(InvocationPlugins, InjectionProvider)->void::: node intrinsic plugin factory register plugins
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->boolean:::Handle the parsing of a method invocation bytecode to a method that can be bound statically
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)->boolean:::Handle the parsing of a GETFIELD bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField)->boolean:::Handle the parsing of a GETSTATIC bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode)->boolean:::Handle the parsing of a PUTFIELD bytecode.
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode)->boolean:::Handle the parsing of a PUTSTATIC bytecode.
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind)->boolean:::Handle the parsing of an array load bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)->boolean:::Handle the parsing of an array store bytecode.
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean:::Handle the parsing of a CHECKCAST bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean:::Handle the parsing of a INSTANCEOF bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleNewInstance(GraphBuilderContext, ResolvedJavaType)->boolean:::Handle the parsing of a NEW bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleNewArray(GraphBuilderContext, ResolvedJavaType, ValueNode)->boolean:::Handle the parsing of a NEWARRAY and ANEWARRAY bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#handleNewMultiArray(GraphBuilderContext, ResolvedJavaType, ValueNode[])->boolean:::Handle the parsing of a MULTIANEWARRAY bytecode
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#instrumentExceptionDispatch(StructuredGraph, FixedWithNextNode)->FixedWithNextNode:::Allows this plugin to add nodes after the exception object has been loaded in the dispatch sequence
org.graalvm.compiler.nodes.graphbuilderconf.NodePlugin#canChangeStackKind(GraphBuilderContext)->boolean:::If the plugin GraphBuilderContext#push pushes a value with a different JavaKind than specified by the bytecode, it must override this method and return true
org.graalvm.compiler.nodes.graphbuilderconf.ParameterPlugin#interceptParameter(GraphBuilderTool, int, StampPair)->FloatingNode::: parameter plugin intercept parameter
org.graalvm.compiler.nodes.graphbuilderconf.ProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)->boolean::: profiling plugin should profile
org.graalvm.compiler.nodes.graphbuilderconf.ProfilingPlugin#profileInvoke(GraphBuilderContext, ResolvedJavaMethod, FrameState)->void::: profiling plugin profile invoke
org.graalvm.compiler.nodes.graphbuilderconf.ProfilingPlugin#profileGoto(GraphBuilderContext, ResolvedJavaMethod, int, int, FrameState)->void::: profiling plugin profile goto
org.graalvm.compiler.nodes.graphbuilderconf.ProfilingPlugin#profileIf(GraphBuilderContext, ResolvedJavaMethod, int, LogicNode, int, int, FrameState)->void::: profiling plugin profile if
org.graalvm.compiler.nodes.graphbuilderconf.TypePlugin#interceptType(GraphBuilderTool, JavaType, boolean)->StampPair:::Intercept the type of arguments or return values.

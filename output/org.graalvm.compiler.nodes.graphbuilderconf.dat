ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier, ValueNode[]):::Emits a class initialization barrier for type.:::
ClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier):::Emits a class initialization barrier for type.:::return->apply
ClassInitializationPlugin#supportsLazyInitialization(ConstantPool):::Determines if cp has a variation of ConstantPool#loadReferencedType that can resolved a type without initializing it.:::
ClassInitializationPlugin#loadReferencedType(GraphBuilderContext, ConstantPool, int, int):::Ensures that the type referenced by the constant pool entry specified by cp and cpi is loaded:::
ForeignCallPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: foreign call plugin execute:::foreignCall->new->ForeignCallNode->foreignCall->b->bci->setBci->b->targetMethod->getSignature->getReturnKind->addPush->return
GeneratedInvocationPlugin#getSource():::Gets the class of the annotation for which this plugin was generated.:::
GeneratedInvocationPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: generated invocation plugin execute:::
GeneratedInvocationPlugin#getApplySourceLocation(MetaAccessProvider)::: generated invocation plugin get apply source location:::c->getClass->foreach->c->getDeclaredMethods->if->m->getName->equals->return->metaAccess->lookupJavaMethod->asStackTraceElement->throw->c->getName->new->GraalError
GeneratedInvocationPlugin#checkInjectedArgument(GraphBuilderContext, ValueNode, ResolvedJavaMethod)::: generated invocation plugin check injected argument:::if->arg->isNullConstant->return->if->return->if->b->getMethod->equals->return->thisExecuteMethod->getExecutedMethod->if->b->getMethod->equals->if->return->return->throw->foldAnnotatedMethod->format->new->AssertionError
GeneratedInvocationPlugin#getExecutedMethod(GraphBuilderContext)::: generated invocation plugin get executed method:::if->metaAccess->b->getMetaAccess->baseMethod->metaAccess->getExecuteMethod->lookupJavaMethod->thisClass->metaAccess->getClass->lookupJavaType->thisClass->resolveConcreteMethod->return
GeneratedInvocationPlugin#getExecuteMethod()::: generated invocation plugin get execute method:::try->return->getMethod->catch->throw->new->GraalError->finally
GraphBuilderConfiguration.Plugins#getInvocationPlugins()::: plugins get invocation plugins:::return
GraphBuilderConfiguration.Plugins#getNodePlugins()::: plugins get node plugins:::return
GraphBuilderConfiguration.Plugins#appendNodePlugin(NodePlugin)::: plugins append node plugin:::Arrays->copyOf
GraphBuilderConfiguration.Plugins#prependNodePlugin(NodePlugin)::: plugins prepend node plugin:::newPlugins->new->NodePluginArr->System->arraycopy
GraphBuilderConfiguration.Plugins#clearNodePlugin()::: plugins clear node plugin:::new->NodePluginArr
GraphBuilderConfiguration.Plugins#getParameterPlugins()::: plugins get parameter plugins:::return
GraphBuilderConfiguration.Plugins#appendParameterPlugin(ParameterPlugin)::: plugins append parameter plugin:::Arrays->copyOf
GraphBuilderConfiguration.Plugins#prependParameterPlugin(ParameterPlugin)::: plugins prepend parameter plugin:::newPlugins->new->ParameterPluginArr->System->arraycopy
GraphBuilderConfiguration.Plugins#getTypePlugins()::: plugins get type plugins:::return
GraphBuilderConfiguration.Plugins#appendTypePlugin(TypePlugin)::: plugins append type plugin:::Arrays->copyOf
GraphBuilderConfiguration.Plugins#prependTypePlugin(TypePlugin)::: plugins prepend type plugin:::newPlugins->new->TypePluginArr->System->arraycopy
GraphBuilderConfiguration.Plugins#clearParameterPlugin()::: plugins clear parameter plugin:::new->ParameterPluginArr
GraphBuilderConfiguration.Plugins#getInlineInvokePlugins()::: plugins get inline invoke plugins:::return
GraphBuilderConfiguration.Plugins#appendInlineInvokePlugin(InlineInvokePlugin)::: plugins append inline invoke plugin:::Arrays->copyOf
GraphBuilderConfiguration.Plugins#prependInlineInvokePlugin(InlineInvokePlugin)::: plugins prepend inline invoke plugin:::newPlugins->new->InlineInvokePluginArr->System->arraycopy
GraphBuilderConfiguration.Plugins#clearInlineInvokePlugins()::: plugins clear inline invoke plugins:::new->InlineInvokePluginArr
GraphBuilderConfiguration.Plugins#getClassInitializationPlugin()::: plugins get class initialization plugin:::return
GraphBuilderConfiguration.Plugins#setClassInitializationPlugin(ClassInitializationPlugin)::: plugins set class initialization plugin:::
GraphBuilderConfiguration.Plugins#getInvokeDynamicPlugin()::: plugins get invoke dynamic plugin:::return
GraphBuilderConfiguration.Plugins#setInvokeDynamicPlugin(InvokeDynamicPlugin)::: plugins set invoke dynamic plugin:::
GraphBuilderConfiguration.Plugins#getProfilingPlugin()::: plugins get profiling plugin:::return
GraphBuilderConfiguration.Plugins#setProfilingPlugin(ProfilingPlugin)::: plugins set profiling plugin:::
GraphBuilderConfiguration.Plugins#getOverridingStamp(GraphBuilderTool, JavaType, boolean)::: plugins get overriding stamp:::foreach->getTypePlugins->stamp->plugin->interceptType->if->return->return
GraphBuilderConfiguration#copy():::Creates a copy of this configuration with all its plugins:::newPlugins->new->Plugins->result->new->GraphBuilderConfiguration->return
GraphBuilderConfiguration#withUnresolvedIsError(boolean):::Set the #unresolvedIsError flag:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withEagerResolving(boolean)::: graph builder configuration with eager resolving:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withSkippedExceptionTypes(ResolvedJavaType[])::: graph builder configuration with skipped exception types:::return->Collections->Arrays->asList->unmodifiableList->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withBytecodeExceptionMode(BytecodeExceptionMode)::: graph builder configuration with bytecode exception mode:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withOmitAssertions(boolean)::: graph builder configuration with omit assertions:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withFullInfopoints(boolean)::: graph builder configuration with full infopoints:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withNodeSourcePosition(boolean)::: graph builder configuration with node source position:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#withRetainLocalVariables(boolean)::: graph builder configuration with retain local variables:::return->new->GraphBuilderConfiguration
GraphBuilderConfiguration#getSkippedExceptionTypes()::: graph builder configuration get skipped exception types:::return
GraphBuilderConfiguration#eagerResolving()::: graph builder configuration eager resolving:::return
GraphBuilderConfiguration#getBytecodeExceptionMode()::: graph builder configuration get bytecode exception mode:::return
GraphBuilderConfiguration#omitAssertions()::: graph builder configuration omit assertions:::return
GraphBuilderConfiguration#trackNodeSourcePosition()::: graph builder configuration track node source position:::return
GraphBuilderConfiguration#retainLocalVariables()::: graph builder configuration retain local variables:::return
GraphBuilderConfiguration#insertFullInfopoints()::: graph builder configuration insert full infopoints:::return
GraphBuilderConfiguration#getDefault(Plugins)::: graph builder configuration get default:::return->Collections->emptyList->new->GraphBuilderConfiguration
GraphBuilderConfiguration#getSnippetDefault(Plugins)::: graph builder configuration get snippet default:::return->Collections->emptyList->new->GraphBuilderConfiguration
GraphBuilderConfiguration#unresolvedIsError():::Returns true if it is an error for a class/field/method resolution to fail.:::return
GraphBuilderConfiguration#getPlugins()::: graph builder configuration get plugins:::return
GraphBuilderContext#push(JavaKind, ValueNode):::Pushes a given value to the frame state stack using an explicit kind:::
GraphBuilderContext#pop(JavaKind):::Pops a value from the frame state stack using an explicit kind.:::throw->GraalError->unimplemented
GraphBuilderContext#add(T):::Adds a node and all its inputs to the graph:::if->value->graph->return->return->GraphBuilderContextUtil->append->setStateAfterIfNecessary
GraphBuilderContext#addNonNullCast(ValueNode)::: graph builder context add non null cast:::valueStamp->value->stamp->if->valueStamp->nonNull->return->else->isNull->IsNullNode->create->add->fixedGuard->new->FixedGuardNode->add->newStamp->valueStamp->StampFactory->objectNonNull->improveWith->return->PiNode->create->add
GraphBuilderContext#addPush(JavaKind, T):::Adds a node with a non-void kind to the graph, pushes it to the stack:::equivalentValue->value->graph->append->push->return->GraphBuilderContextUtil->setStateAfterIfNecessary
GraphBuilderContext#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean):::Handles an invocation that a plugin determines can replace the original invocation (i.e., the one for which the plugin was applied):::
GraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)::: graph builder context handle replaced invoke:::
GraphBuilderContext#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[]):::Intrinsifies an invocation of a given method by inlining the bytecodes of a given substitution method.:::
GraphBuilderContext#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[]):::Intrinsifies an invocation of a given method by inlining the graph of a given substitution method.:::
GraphBuilderContext#setStateAfter(StateSplit):::Creates a snap shot of the current frame state with the BCI of the instruction after the one currently being parsed and assigns it to a given StateSplit#hasSideEffect() side effect node.:::
GraphBuilderContext#getParent():::Gets the parsing context for the method that inlines the method being parsed by this context.:::
GraphBuilderContext#getNonIntrinsicAncestor():::Gets the first ancestor parsing context that is not parsing a #parsingIntrinsic() intrinsic.:::ancestor->getParent->while->ancestor->parsingIntrinsic->ancestor->getParent->return
GraphBuilderContext#getCode():::Gets the code being parsed.:::
GraphBuilderContext#getMethod():::Gets the method being parsed by this context.:::
GraphBuilderContext#bci():::Gets the index of the bytecode instruction currently being parsed.:::
GraphBuilderContext#getInvokeKind():::Gets the kind of invocation currently being parsed.:::
GraphBuilderContext#getInvokeReturnType():::Gets the return type of the invocation currently being parsed.:::
GraphBuilderContext#getInvokeReturnStamp(Assumptions)::: graph builder context get invoke return stamp:::returnType->getInvokeReturnType->return->StampFactory->forDeclaredType
GraphBuilderContext#getDepth():::Gets the inline depth of this context:::parent->getParent->result->while->parent->getParent->return
GraphBuilderContext#parsingIntrinsic():::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.:::return->getIntrinsic
GraphBuilderContext#getIntrinsic():::Gets the intrinsic of the current parsing context or null if not #parsingIntrinsic() parsing an intrinsic.:::
GraphBuilderContext#bailout(String)::: graph builder context bailout:::
GraphBuilderContext#nullCheckedValue(ValueNode)::: graph builder context null checked value:::return->nullCheckedValue
GraphBuilderContext#nullCheckedValue(ValueNode, DeoptimizationAction):::Gets a version of a given value that has a StampTool#isPointerNonNull(ValueNode) non-null stamp.:::if->StampTool->isPointerNonNull->condition->getGraph->IsNullNode->create->unique->fixedGuard->new->FixedGuardNode->append->nonNullReceiver->getGraph->PiNode->objectNonNull->create->addOrUniqueWithInputs->return->return
GraphBuilderContext#genCheckcastDynamic(ValueNode, ValueNode)::: graph builder context gen checkcast dynamic:::condition->InstanceOfDynamicNode->getAssumptions->getConstantReflection->create->if->condition->isTautology->addPush->else->append->fixedGuard->new->FixedGuardNode->add->DynamicPiNode->getAssumptions->getConstantReflection->create->addPush
GraphBuilderContext#notifyReplacedCall(ResolvedJavaMethod, ConstantNode)::: graph builder context notify replaced call:::
GraphBuilderContext.ExternalInliningContext#getInlinedDepth()::: external inlining context get inlined depth:::
GraphBuilderContext#getExternalInliningContext()::: graph builder context get external inlining context:::return
GraphBuilderContext#maskSubWordValue(ValueNode, JavaKind):::Adds masking to a given subword value according to a given JavaKind, such that the masked value falls in the range of the given kind:::if->kind->getStackKind->return->narrow->NarrowNode->kind->getBitCount->create->append->if->kind->isUnsigned->return->ZeroExtendNode->create->append->else->return->SignExtendNode->create->append
GraphBuilderContext#needsExplicitException()::: graph builder context needs explicit exception:::return
GraphBuilderContext#genExplicitExceptionEdge(BytecodeExceptionKind):::Generates an exception edge for the current bytecode:::return
GraphBuilderContextUtil#setStateAfterIfNecessary(GraphBuilderContext, T)::: graph builder context util set state after if necessary:::if->stateSplit->if->stateSplit->stateAfter->stateSplit->hasSideEffect->b->setStateAfter->return
GraphBuilderTool#append(T):::Adds the given node to the graph and also adds recursively all referenced inputs.:::
GraphBuilderTool#getStampProvider()::: graph builder tool get stamp provider:::
GraphBuilderTool#getMetaAccess()::: graph builder tool get meta access:::
GraphBuilderTool#getReplacements()::: graph builder tool get replacements:::
GraphBuilderTool#getAssumptions()::: graph builder tool get assumptions:::return->getGraph->getAssumptions
GraphBuilderTool#getConstantReflection()::: graph builder tool get constant reflection:::
GraphBuilderTool#getConstantFieldProvider()::: graph builder tool get constant field provider:::
GraphBuilderTool#getGraph():::Gets the graph being constructed.:::
GraphBuilderTool#getOptions()::: graph builder tool get options:::return->getGraph->getOptions
GraphBuilderTool#getDebug()::: graph builder tool get debug:::return->getGraph->getDebug
GraphBuilderTool#parsingIntrinsic():::Determines if this parsing context is within the bytecode of an intrinsic or a method inlined by an intrinsic.:::
GraphBuilderTool#canDeferPlugin(GeneratedInvocationPlugin)::: graph builder tool can defer plugin:::return
InlineInvokePlugin.InlineInfo#createStandardInlineInfo(ResolvedJavaMethod)::: inline info create standard inline info:::return->new->InlineInfo
InlineInvokePlugin.InlineInfo#createIntrinsicInlineInfo(ResolvedJavaMethod, BytecodeProvider)::: inline info create intrinsic inline info:::return->new->InlineInfo
InlineInvokePlugin.InlineInfo#createMethodSubstitutionInlineInfo(ResolvedJavaMethod, MethodSubstitutionPlugin)::: inline info create method substitution inline info:::return->plugin->getBytecodeProvider->new->InlineInfo
InlineInvokePlugin.InlineInfo#getMethodToInline():::Returns the method to be inlined, or null if the call site must not be inlined.:::return
InlineInvokePlugin.InlineInfo#allowsInlining()::: inline info allows inlining:::return
InlineInvokePlugin.InlineInfo#getIntrinsicBytecodeProvider():::Gets the provider of bytecode to be parsed for #getMethodToInline() if is is an intrinsic for the original method (i.e., the method passed to InlineInvokePlugin#shouldInlineInvoke):::return
InlineInvokePlugin.InlineInfo#isSubstitution()::: inline info is substitution:::return
InlineInvokePlugin.InlineInfo#getPlugin()::: inline info get plugin:::return
InlineInvokePlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Determines whether a call to a given method is to be inlined:::return
InlineInvokePlugin#notifyBeforeInline(ResolvedJavaMethod):::Notification that a method is about to be inlined.:::
InlineInvokePlugin#notifyAfterInline(ResolvedJavaMethod):::Notification that a method was inlined.:::
InlineInvokePlugin#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke):::Notifies this plugin of the Invoke node created for a method that was not inlined per #shouldInlineInvoke.:::
IntrinsicContext#allowPartialIntrinsicArgumentMismatch():::A partial intrinsic exits by (effectively) calling the intrinsified method:::return
IntrinsicContext#getOriginalMethod():::Gets the method being intrinsified.:::return
IntrinsicContext#getIntrinsicMethod():::Gets the method providing the intrinsic implementation.:::return
IntrinsicContext#getBytecodeProvider():::Gets provider of bytecode to be parsed for a method that is part of an intrinsic.:::return
IntrinsicContext#isCallToOriginal(ResolvedJavaMethod):::Determines if a call within the compilation scope of this intrinsic represents a call to the #getOriginalMethod() original method:::return->originalMethod->equals->intrinsicMethod->equals
IntrinsicContext#isPostParseInlined()::: intrinsic context is post parse inlined:::return->compilationContext->equals
IntrinsicContext#isCompilationRoot()::: intrinsic context is compilation root:::return->compilationContext->equals
IntrinsicContext#getNodeSourcePosition()::: intrinsic context get node source position:::return
IntrinsicContext#setNodeSourcePosition(NodeSourcePosition)::: intrinsic context set node source position:::
IntrinsicContext.SideEffectsState#isAfterSideEffect():::Determines if the current program point is preceded by one or more side effects.:::
IntrinsicContext.SideEffectsState#sideEffects():::Gets the side effects preceding the current program point.:::
IntrinsicContext.SideEffectsState#addSideEffect(StateSplit):::Records a side effect for the current program point.:::
IntrinsicContext#isDeferredInvoke(StateSplit)::: intrinsic context is deferred invoke:::return
IntrinsicContext#createFrameState(StructuredGraph, SideEffectsState, StateSplit, NodeSourcePosition)::: intrinsic context create frame state:::if->forStateSplit->hasSideEffect->if->sideEffects->isAfterSideEffect->invalid->graph->new->FrameState->add->if->graph->trackNodeSourcePosition->invalid->setNodeSourcePosition->foreach->sideEffects->sideEffects->lastSideEffect->setStateAfter->frameState->if->isDeferredInvoke->graph->new->FrameState->add->else->sideEffects->addSideEffect->if->graph->new->FrameState->add->else->graph->new->FrameState->add->if->graph->trackNodeSourcePosition->frameState->setNodeSourcePosition->return->else->if->if->sideEffects->isAfterSideEffect->frameState->graph->new->FrameState->add->if->graph->trackNodeSourcePosition->frameState->setNodeSourcePosition->return->else->frameState->graph->new->FrameState->add->if->graph->trackNodeSourcePosition->frameState->setNodeSourcePosition->return->else->return
IntrinsicContext#toString()::: intrinsic context to string:::return->originalMethod->format->intrinsicMethod->format
InvocationPlugin.Receiver#get():::Gets the receiver value, null checking it first if necessary.:::return->get
InvocationPlugin.Receiver#get(boolean):::Gets the receiver value, optionally null checking it first if necessary.:::
InvocationPlugin.Receiver#isConstant():::Determines if the receiver is constant.:::return
InvocationPlugin#isSignaturePolymorphic():::Determines if this plugin is for a method with a polymorphic signature (e.g:::return
InvocationPlugin#inlineOnly():::Determines if this plugin can only be used when inlining the method is it associated with:::return->isSignaturePolymorphic
InvocationPlugin#isDecorator():::Determines if this plugin only decorates the method is it associated with:::return
InvocationPlugin#applyPolymorphic(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...):::Handles invocation of a signature polymorphic method.:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: invocation plugin apply:::return->defaultHandler
InvocationPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[]):::Executes this plugin against a set of invocation arguments:::if->isSignaturePolymorphic->return->applyPolymorphic->else->if->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->return->defaultHandler->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->if->return->apply->else->return->defaultHandler
InvocationPlugin#defaultHandler(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode...):::Handles an invocation when a specific apply method is not available.:::throw->targetMethod->format->new->GraalError
InvocationPlugin#getApplySourceLocation(MetaAccessProvider)::: invocation plugin get apply source location:::c->getClass->foreach->c->getDeclaredMethods->if->m->getName->equals->return->metaAccess->lookupJavaMethod->asStackTraceElement->else->if->m->getName->equals->return->metaAccess->lookupJavaMethod->asStackTraceElement->throw->c->getName->new->GraalError
InvocationPlugins.InvocationPluginReceiver#get(boolean)::: invocation plugin receiver get:::if->return->if->parser->nullCheckedValue->if->return
InvocationPlugins.InvocationPluginReceiver#isConstant()::: invocation plugin receiver is constant:::return->isConstant
InvocationPlugins.InvocationPluginReceiver#init(ResolvedJavaMethod, ValueNode[])::: invocation plugin receiver init:::if->targetMethod->isStatic->return->return
InvocationPlugins.ResolvedJavaSymbol#getResolved()::: resolved java symbol get resolved:::return
InvocationPlugins.ResolvedJavaSymbol#toString()::: resolved java symbol to string:::return->resolved->toJavaName
InvocationPlugins.OptionalLazySymbol#getTypeName()::: optional lazy symbol get type name:::return
InvocationPlugins.OptionalLazySymbol#resolve():::Gets the resolved Class corresponding to this symbol or null if resolution fails.:::if->resolvedOrNull->resolveClass->return
InvocationPlugins.OptionalLazySymbol#toString()::: optional lazy symbol to string:::return
InvocationPlugins.Registration#getReceiverType()::: registration get receiver type:::return
InvocationPlugins.Registration#setAllowOverwrite(boolean):::Configures this registration to allow or disallow overwriting of invocation plugins.:::return
InvocationPlugins.Registration#register0(String, InvocationPlugin):::Registers a plugin for a method with no arguments.:::plugins->register
InvocationPlugins.Registration#register1(String, Type, InvocationPlugin):::Registers a plugin for a method with 1 argument.:::plugins->register
InvocationPlugins.Registration#register2(String, Type, Type, InvocationPlugin):::Registers a plugin for a method with 2 arguments.:::plugins->register
InvocationPlugins.Registration#register3(String, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 3 arguments.:::plugins->register
InvocationPlugins.Registration#register4(String, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 4 arguments.:::plugins->register
InvocationPlugins.Registration#register5(String, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 5 arguments.:::plugins->register
InvocationPlugins.Registration#register6(String, Type, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 6 arguments.:::plugins->register
InvocationPlugins.Registration#register7(String, Type, Type, Type, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for a method with 7 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional0(String, InvocationPlugin):::Registers a plugin for an optional method with no arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional1(String, Type, InvocationPlugin):::Registers a plugin for an optional method with 1 argument.:::plugins->register
InvocationPlugins.Registration#registerOptional2(String, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 2 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional3(String, Type, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 3 arguments.:::plugins->register
InvocationPlugins.Registration#registerOptional4(String, Type, Type, Type, Type, InvocationPlugin):::Registers a plugin for an optional method with 4 arguments.:::plugins->register
InvocationPlugins.Registration#registerMethodSubstitution(Class, String, Type...):::Registers a plugin that implements a method based on the bytecode of a substitute method.:::registerMethodSubstitution
InvocationPlugins.Registration#registerMethodSubstitution(Class, String, String, Type...):::Registers a plugin that implements a method based on the bytecode of a substitute method.:::plugin->createMethodSubstitution->plugins->register
InvocationPlugins.Registration#createMethodSubstitution(Class, String, Type...)::: registration create method substitution:::plugin->new->MethodSubstitutionPlugin->return
InvocationPlugins.LateRegistration#register(InvocationPlugin, String, Type...):::Registers an invocation plugin for a given method:::isStatic->if->binding->new->Binding->bindings->add
InvocationPlugins.LateRegistration#close()::: late registration close:::plugins->registerLate
InvocationPlugins.Binding#toString()::: binding to string:::return
InvocationPlugins#defer(Runnable):::Adds a Runnable for doing registration deferred until the first time #get(ResolvedJavaMethod) or #closeRegistration() is called on this object.:::deferredRegistrations->add
InvocationPlugins.ClassPlugins#get(ResolvedJavaMethod):::Gets the invocation plugin for a given method.:::binding->bindings->method->getName->get->while->if->method->isStatic->if->method->getSignature->toMethodDescriptor->startsWith->return->return
InvocationPlugins.ClassPlugins#register(Binding, boolean)::: class plugins register:::if->if->lookup->register->return->else->register
InvocationPlugins.ClassPlugins#lookup(Binding)::: class plugins lookup:::b->bindings->get->while->if->equals->return->return
InvocationPlugins.ClassPlugins#register(Binding):::Registers binding.:::head->bindings->get->bindings->put
InvocationPlugins#put(InvocationPlugin, boolean, boolean, Type, String, Type...):::Registers a binding of a method to an invocation plugin.:::internalName->MetaUtil->declaringClass->getTypeName->toInternalName->classPlugins->registrations->get->if->new->ClassPlugins->registrations->put->binding->new->Binding->classPlugins->register->return
InvocationPlugins#get(ResolvedJavaMethod)::: invocation plugins get:::if->return->resolvedRegistrations->get->else->if->method->isBridge->declaringClass->method->getDeclaringClass->flushDeferrables->internalName->declaringClass->getName->classPlugins->registrations->get->res->if->classPlugins->get->if->lcp->findLateClassPlugins->if->lcp->get->if->if->res->isDecorator->canBeIntrinsified->return->if->synchronized->if->bindings->testExtensions->get->if->name->method->getName->descriptor->method->getSignature->toMethodDescriptor->foreach->if->method->isStatic->equals->descriptor->startsWith->return->else->return
InvocationPlugins#canBeIntrinsified(ResolvedJavaType):::Determines if methods in a given class can have invocation plugins.:::return
InvocationPlugins#findLateClassPlugins(String)::: invocation plugins find late class plugins:::for->lcp->return
InvocationPlugins#flushDeferrables()::: invocation plugins flush deferrables:::if->synchronized->if->try->foreach->deferrable->run->catch->throw->deferredRegistrations->clear->rethrow->new->Runnable->deferredRegistrations->add->rethrow->run->finally
InvocationPlugins#findBinding(List, Binding)::: invocation plugins find binding:::for->i->list->size->return
InvocationPlugins#addTestPlugins(InvocationPlugins, List>):::Extends the plugins in this object with those from other:::otherBindings->other->getBindings->if->otherBindings->isEmpty->return->if->EconomicMap->create->c->otherBindings->getEntries->while->c->advance->declaringClass->c->getKey->bindings->testExtensions->get->if->new->ArrayList<>->testExtensions->put->foreach->c->getValue->index->findBinding->if->if->ignored->Pair->create->add->else->bindings->add
InvocationPlugins#removeTestPlugins(InvocationPlugins):::Removes the plugins from other in this object that were added by #addTestPlugins.:::if->c->other->getBindings->getEntries->while->c->advance->declaringClass->c->getKey->bindings->testExtensions->get->if->foreach->c->getValue->index->findBinding->if->bindings->remove->if->bindings->isEmpty->testExtensions->removeKey->if->testExtensions->isEmpty
InvocationPlugins#registerLate(Type, List)::: invocation plugins register late:::internalName->MetaUtil->declaringType->getTypeName->toInternalName->lateClassPlugins->new->LateClassPlugins->foreach->lateClassPlugins->register
InvocationPlugins#closeLateRegistrations()::: invocation plugins close late registrations:::if->new->LateClassPlugins->return
InvocationPlugins#closeRegistration():::Processes deferred registrations and then closes this object for future registration.:::flushDeferrables
InvocationPlugins#isEmpty():::Determines if this object currently contains any plugins (in any state of registration):::if->parent->isEmpty->return->resolvedRegs->if->if->resolvedRegs->isEmpty->return->deferred->if->if->deferred->isEmpty->return->for->late->return->registrations->size
InvocationPlugins#register(InvocationPlugin, boolean, boolean, Type, String, Type...)::: invocation plugins register:::isStatic->if->binding->put
InvocationPlugins#register(InvocationPlugin, Type, String, Type...):::Registers an invocation plugin for a given method:::register
InvocationPlugins#register(InvocationPlugin, String, String, Type...)::: invocation plugins register:::new->OptionalLazySymbol->register
InvocationPlugins#registerOptional(InvocationPlugin, Type, String, Type...):::Registers an invocation plugin for a given, optional method:::register
InvocationPlugins#lookupInvocation(ResolvedJavaMethod):::Gets the plugin for a given method.:::if->plugin->parent->lookupInvocation->if->return->invocationPlugin->get->return
InvocationPlugins#getBindings(boolean):::Gets the set of registered invocation plugins.:::return->getBindings
InvocationPlugins#getBindings(boolean, boolean):::Gets the set of registered invocation plugins.:::res->EconomicMap->create->if->res->parent->getBindings->putAll->if->cursor->resolvedRegistrations->getEntries->while->cursor->advance->method->cursor->getKey->plugin->cursor->getValue->type->method->getDeclaringClass->getName->bindings->res->get->if->new->ArrayList<>->res->put->bindings->new->Binding->add->else->if->flushDeferrables->classes->registrations->getEntries->while->classes->advance->type->classes->getKey->cp->classes->getValue->collectBindingsTo->for->lcp->if->synchronized->if->c->testExtensions->getEntries->while->c->advance->name->c->getKey->bindings->res->get->if->new->ArrayList<>->res->put->bindings->c->getValue->addAll->return
InvocationPlugins#collectBindingsTo(EconomicMap>, String, ClassPlugins)::: invocation plugins collect bindings to:::methods->getEntries->while->methods->advance->bindings->res->get->if->new->ArrayList<>->res->put->for->b->methods->getValue
InvocationPlugins#getParent():::Gets the invocation plugins #lookupInvocation(ResolvedJavaMethod) searched before searching in this object.:::return
InvocationPlugins#toString()::: invocation plugins to string:::entries->getBindings->getEntries->all->new->ArrayList<>->while->entries->advance->c->MetaUtil->entries->getKey->internalNameToJava->foreach->entries->getValue->all->add->Collections->sort->buf->new->StringBuilder->nl->String->format->foreach->if->buf->length->buf->append->buf->append->if->if->buf->length->buf->append->buf->append->append->append->return->buf->toString
InvocationPlugins.Checks#containsBinding(InvocationPlugins, Type, Binding)::: checks contains binding:::internalName->MetaUtil->declaringType->getTypeName->toInternalName->classPlugins->get->return->classPlugins->lookup
InvocationPlugins.Checks#check(InvocationPlugins, Type, Binding)::: checks check:::plugin->p->while->if->return->if->msplugin->substitute->msplugin->getJavaSubstitute->return->arguments->parseParameters->size->foreach->plugin->getClass->getDeclaredMethods->if->m->getName->equals->parameterTypes->m->getParameterTypes->if->Arrays->equals->return->throw->format->new->AssertionError
InvocationPlugins.Checks#checkResolvable(boolean, Type, Binding)::: checks check resolvable:::if->return->getResolved->checkResolvable->declaringClass->InvocationPlugins->resolveType->if->return->if->equals->if->resolveConstructor->throw->String->declaringClass->getName->format->new->AssertionError->else->if->resolveMethod->throw->String->declaringClass->getName->format->new->AssertionError->return
InvocationPlugins.Checks#checkResolvable(boolean, ResolvedJavaType, Binding)::: checks check resolvable:::if->resolveJavaMethod->throw->String->declaringType->toJavaName->format->new->AssertionError->return
InvocationPlugins#checkNewNodes(GraphBuilderContext, InvocationPlugin, NodeIterable):::Checks a set of nodes added to the graph by an InvocationPlugin.:::if->parent->checkNewNodes
InvocationPlugins#resolveClass(String, boolean):::Resolves a name to a class.:::try->cl->ClassLoader->getSystemClassLoader->return->Class->forName->catch->if->return->throw->new->GraalError->finally
InvocationPlugins#resolveType(Type, boolean):::Resolves a Type to a Class.:::if->return->if->return->resolve->if->throw->type->getTypeName->new->GraalError->return->type->getTypeName->resolveClass
InvocationPlugins#toInternalTypeNames(Class[])::: invocation plugins to internal type names:::res->new->StringArr->for->i->return->Arrays->asList
InvocationPlugins#resolveMethod(Class, Binding):::Resolves a given binding to a method in a given class:::if->equals->return->methods->declaringClass->getDeclaredMethods->parameterTypeNames->parseParameters->match->for->i->return
InvocationPlugins#resolveJavaMethod(ResolvedJavaType, Binding):::Same as #resolveMethod(Class, Binding) and #resolveConstructor(Class, Binding) except in terms of ResolvedJavaType and ResolvedJavaMethod.:::methods->declaringClass->getDeclaredMethods->if->equals->foreach->if->m->getName->equals->m->getSignature->toMethodDescriptor->startsWith->return->return->match->for->i->return
InvocationPlugins#resolveConstructor(Class, Binding):::Resolves a given binding to a constructor in a given class.:::if->equals->return->constructors->declaringClass->getDeclaredConstructors->parameterTypeNames->parseParameters->for->i->return
InvocationPlugins#parseParameters(String)::: invocation plugins parse parameters:::res->new->ArrayList<>->cur->end->argumentsDescriptor->length->while->first->start->do->argumentsDescriptor->charAt->while->switch->endObject->argumentsDescriptor->indexOf->if->throw->new->GraalError->break->break->throw->new->GraalError->res->argumentsDescriptor->substring->add->return
InvokeDynamicPlugin#isResolvedDynamicInvoke(GraphBuilderContext, int, int):::Checks for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).:::
InvokeDynamicPlugin#supportsDynamicInvoke(GraphBuilderContext, int, int):::Checks if this plugin instance supports the specified dynamic invoke.:::
InvokeDynamicPlugin#recordDynamicMethod(GraphBuilderContext, int, int, ResolvedJavaMethod):::Notifies this object of the value and context of the dynamic method target (e.g., A HotSpot adapter method) for a resolved dynamic invoke.:::
InvokeDynamicPlugin#genAppendixNode(GraphBuilderContext, int, int, JavaConstant, FrameState):::Notifies this object of the value and context of the dynamic appendix object for a resolved dynamic invoke.:::
LoopExplosionPlugin#loopExplosionKind(ResolvedJavaMethod)::: loop explosion plugin loop explosion kind:::
MethodSubstitutionPlugin#inlineOnly()::: method substitution plugin inline only:::return
MethodSubstitutionPlugin#getSubstitute(MetaAccessProvider):::Gets the substitute method, resolving it first if necessary.:::if->metaAccess->getJavaSubstitute->lookupJavaMethod->return
MethodSubstitutionPlugin#getBytecodeProvider():::Gets the object used to access the bytecodes of the substitute method.:::return
MethodSubstitutionPlugin#getDeclaringClass():::Gets the class in which the substitute method is declared.:::return
MethodSubstitutionPlugin#getJavaSubstitute():::Gets the reflection API version of the substitution method.:::substituteMethod->lookupSubstitute->modifiers->substituteMethod->getModifiers->if->Modifier->isAbstract->Modifier->isNative->throw->new->GraalError->if->Modifier->isStatic->throw->new->GraalError->return
MethodSubstitutionPlugin#isSubstitute(Method):::Determines if a given method is the substitute method of this plugin.:::if->Modifier->m->getModifiers->isStatic->m->getName->equals->if->m->getParameterCount->mparams->m->getParameterTypes->start->if->if->resolveType->isAssignableFrom->return->for->i->return->return
MethodSubstitutionPlugin#lookupSubstitute(Method)::: method substitution plugin lookup substitute:::foreach->declaringClass->getDeclaredMethods->if->m->equals->isSubstitute->return->return
MethodSubstitutionPlugin#lookupSubstitute():::Gets the substitute method of this plugin.:::m->lookupSubstitute->if->return->throw->new->GraalError
MethodSubstitutionPlugin#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: method substitution plugin execute:::if->UseEncodedGraphs->b->getOptions->getValue->b->parsingIntrinsic->if->UseEncodedGraphs->b->getOptions->getValue->b->getReplacements->b->getOptions->registerMethodSubstitution->subst->b->getReplacements->b->getAssumptions->ifNonNull->b->getOptions->getMethodSubstitution->if->throw->new->GraalError->return->b->intrinsify->substitute->b->getMetaAccess->getSubstitute->return->b->intrinsify
MethodSubstitutionPlugin#getApplySourceLocation(MetaAccessProvider)::: method substitution plugin get apply source location:::c->getClass->foreach->c->getDeclaredMethods->if->m->getName->equals->return->metaAccess->lookupJavaMethod->asStackTraceElement->throw->c->getName->new->GraalError
MethodSubstitutionPlugin#toString()::: method substitution plugin to string:::return->String->getClass->getSimpleName->declaringClass->getName->Arrays->asList->stream->c->getTypeName->map->Collectors->joining->collect->format
NodeIntrinsicPluginFactory.InjectionProvider#getInjectedArgument(Class)::: injection provider get injected argument:::
NodeIntrinsicPluginFactory.InjectionProvider#getInjectedStamp(Class, boolean):::Gets a stamp denoting a given type and non-nullness property.:::
NodeIntrinsicPluginFactory#registerPlugins(InvocationPlugins, InjectionProvider)::: node intrinsic plugin factory register plugins:::
NodePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Handle the parsing of a method invocation bytecode to a method that can be bound statically:::return
NodePlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField):::Handle the parsing of a GETFIELD bytecode:::return
NodePlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField):::Handle the parsing of a GETSTATIC bytecode:::return
NodePlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode):::Handle the parsing of a PUTFIELD bytecode.:::return
NodePlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode):::Handle the parsing of a PUTSTATIC bytecode.:::return
NodePlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind):::Handle the parsing of an array load bytecode:::return
NodePlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode):::Handle the parsing of an array store bytecode.:::return
NodePlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile):::Handle the parsing of a CHECKCAST bytecode:::return
NodePlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile):::Handle the parsing of a INSTANCEOF bytecode:::return
NodePlugin#handleNewInstance(GraphBuilderContext, ResolvedJavaType):::Handle the parsing of a NEW bytecode:::return
NodePlugin#handleNewArray(GraphBuilderContext, ResolvedJavaType, ValueNode):::Handle the parsing of a NEWARRAY and ANEWARRAY bytecode:::return
NodePlugin#handleNewMultiArray(GraphBuilderContext, ResolvedJavaType, ValueNode[]):::Handle the parsing of a MULTIANEWARRAY bytecode:::return
NodePlugin#instrumentExceptionDispatch(StructuredGraph, FixedWithNextNode):::Allows this plugin to add nodes after the exception object has been loaded in the dispatch sequence:::return
NodePlugin#canChangeStackKind(GraphBuilderContext):::If the plugin GraphBuilderContext#push pushes a value with a different JavaKind than specified by the bytecode, it must override this method and return true:::return
ParameterPlugin#interceptParameter(GraphBuilderTool, int, StampPair)::: parameter plugin intercept parameter:::
ProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)::: profiling plugin should profile:::
ProfilingPlugin#profileInvoke(GraphBuilderContext, ResolvedJavaMethod, FrameState)::: profiling plugin profile invoke:::
ProfilingPlugin#profileGoto(GraphBuilderContext, ResolvedJavaMethod, int, int, FrameState)::: profiling plugin profile goto:::
ProfilingPlugin#profileIf(GraphBuilderContext, ResolvedJavaMethod, int, LogicNode, int, int, FrameState)::: profiling plugin profile if:::
TypePlugin#interceptType(GraphBuilderTool, JavaType, boolean):::Intercept the type of arguments or return values.:::

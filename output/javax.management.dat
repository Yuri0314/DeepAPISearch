javax.management.AndQueryExp#getLeftExp()->QueryExp:::Returns the left query expression.
javax.management.AndQueryExp#getRightExp()->QueryExp:::Returns the right query expression.
javax.management.AndQueryExp#apply(ObjectName)->boolean:::Applies the AndQueryExp on a MBean.
javax.management.AndQueryExp#toString()->String:::Returns a string representation of this AndQueryExp
javax.management.Attribute#getName()->String:::Returns a String containing the  name of the attribute.
javax.management.Attribute#getValue()->Object:::Returns an Object that is the value of this attribute.
javax.management.Attribute#equals(Object)->boolean::: attribute equals
javax.management.Attribute#hashCode()->int:::Returns a hash code value for this attribute.
javax.management.Attribute#toString()->String:::Returns a String object representing this Attribute's value
javax.management.AttributeChangeNotification#getAttributeName()->String:::Gets the name of the attribute which has changed.
javax.management.AttributeChangeNotification#getAttributeType()->String:::Gets the type of the attribute which has changed.
javax.management.AttributeChangeNotification#getOldValue()->Object:::Gets the old value of the attribute which has changed.
javax.management.AttributeChangeNotification#getNewValue()->Object:::Gets the new value of the attribute which has changed.
javax.management.AttributeChangeNotificationFilter#isNotificationEnabled(Notification)->boolean:::Invoked before sending the specified notification to the listener
javax.management.AttributeChangeNotificationFilter#enableAttribute(String)->void:::Enables all the attribute change notifications the attribute name of which equals the specified name to be sent to the listener
javax.management.AttributeChangeNotificationFilter#disableAttribute(String)->void:::Disables all the attribute change notifications the attribute name of which equals the specified attribute name to be sent to the listener
javax.management.AttributeChangeNotificationFilter#disableAllAttributes()->void:::Disables all the attribute names.
javax.management.AttributeChangeNotificationFilter#getEnabledAttributes()->Vector:::Gets all the enabled attribute names for this filter.
javax.management.AttributeList#asList()->List:::Return a view of this list as a List<Attribute>
javax.management.AttributeList#add(Attribute)->void:::Adds the Attribute specified as the last element of the list.
javax.management.AttributeList#add(int, Attribute)->void:::Inserts the attribute specified as an element at the position specified
javax.management.AttributeList#set(int, Attribute)->void:::Sets the element at the position specified to be the attribute specified
javax.management.AttributeList#addAll(AttributeList)->boolean:::Appends all the elements in the <CODE>AttributeList</CODE> specified to the end of the list, in the order in which they are returned by the Iterator of the <CODE>AttributeList</CODE> specified.
javax.management.AttributeList#addAll(int, AttributeList)->boolean:::Inserts all of the elements in the <CODE>AttributeList</CODE> specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the AttributeList specified
javax.management.AttributeList#add(Object)->boolean::: attribute list add
javax.management.AttributeList#add(int, Object)->void::: attribute list add
javax.management.AttributeList#addAll(Collection)->boolean::: attribute list add all
javax.management.AttributeList#addAll(int, Collection)->boolean::: attribute list add all
javax.management.AttributeList#set(int, Object)->Object::: attribute list set
javax.management.AttributeValueExp#getAttributeName()->String:::Returns a string representation of the name of the attribute.
javax.management.AttributeValueExp#apply(ObjectName)->ValueExp:::Applies the <CODE>AttributeValueExp</CODE> on an MBean
javax.management.AttributeValueExp#toString()->String:::Returns the string representing its value.
javax.management.AttributeValueExp#setMBeanServer(MBeanServer)->void::: attribute value exp set bean server
javax.management.AttributeValueExp#getAttribute(ObjectName)->Object:::Return the value of the given attribute in the named MBean
javax.management.BadAttributeValueExpException#toString()->String:::Returns the string representing the object.
javax.management.BadBinaryOpValueExpException#getExp()->ValueExp:::Returns the <CODE>ValueExp</CODE> that originated the exception.
javax.management.BadBinaryOpValueExpException#toString()->String:::Returns the string representing the object.
javax.management.BadStringOperationException#toString()->String:::Returns the string representing the object.
javax.management.BetweenQueryExp#getCheckedValue()->ValueExp:::Returns the checked value of the query.
javax.management.BetweenQueryExp#getLowerBound()->ValueExp:::Returns the lower bound value of the query.
javax.management.BetweenQueryExp#getUpperBound()->ValueExp:::Returns the upper bound value of the query.
javax.management.BetweenQueryExp#apply(ObjectName)->boolean:::Applies the BetweenQueryExp on an MBean.
javax.management.BetweenQueryExp#toString()->String:::Returns the string representing the object.
javax.management.BinaryOpValueExp#getOperator()->int:::Returns the operator of the value expression.
javax.management.BinaryOpValueExp#getLeftValue()->ValueExp:::Returns the left value of the value expression.
javax.management.BinaryOpValueExp#getRightValue()->ValueExp:::Returns the right value of the value expression.
javax.management.BinaryOpValueExp#apply(ObjectName)->ValueExp:::Applies the BinaryOpValueExp on a MBean.
javax.management.BinaryOpValueExp#toString()->String:::Returns the string representing the object
javax.management.BinaryOpValueExp#setMBeanServer(MBeanServer)->void::: binary op value exp set bean server
javax.management.BinaryRelQueryExp#getOperator()->int:::Returns the operator of the query.
javax.management.BinaryRelQueryExp#getLeftValue()->ValueExp:::Returns the left value of the query.
javax.management.BinaryRelQueryExp#getRightValue()->ValueExp:::Returns the right value of the query.
javax.management.BinaryRelQueryExp#apply(ObjectName)->boolean:::Applies the BinaryRelQueryExp on an MBean.
javax.management.BinaryRelQueryExp#toString()->String:::Returns the string representing the object.
javax.management.BooleanValueExp#getValue()->Boolean:::Returns the  Boolean object representing the value of the BooleanValueExp object.
javax.management.BooleanValueExp#toString()->String:::Returns the string representing the object.
javax.management.BooleanValueExp#apply(ObjectName)->ValueExp:::Applies the ValueExp on a MBean.
javax.management.BooleanValueExp#setMBeanServer(MBeanServer)->void::: boolean value exp set bean server
javax.management.ClassAttributeValueExp#apply(ObjectName)->ValueExp:::Applies the ClassAttributeValueExp on an MBean
javax.management.ClassAttributeValueExp#toString()->String:::Returns the string "Class" representing its value
javax.management.ClassAttributeValueExp#getValue(ObjectName)->Object::: class attribute value exp get value
javax.management.DefaultLoaderRepository#loadClass(String)->Class:::Go through the list of class loaders and try to load the requested class
javax.management.DefaultLoaderRepository#loadClassWithout(ClassLoader, String)->Class:::Go through the list of class loaders but exclude the given class loader, then try to load the requested class
javax.management.Descriptor#getFieldValue(String)->Object:::Returns the value for a specific field name, or null if no value is present for that name.
javax.management.Descriptor#setField(String, Object)->void:::Sets the value for a specific field name
javax.management.Descriptor#getFields()->String[]:::Returns all of the fields contained in this descriptor as a string array.
javax.management.Descriptor#getFieldNames()->String[]:::Returns all the field names in the descriptor.
javax.management.Descriptor#getFieldValues(String...)->Object[]:::Returns all the field values in the descriptor as an array of Objects
javax.management.Descriptor#removeField(String)->void:::Removes a field from the descriptor.
javax.management.Descriptor#setFields(String[], Object[])->void:::Sets all fields in the field names array to the new value with the same index in the field values array
javax.management.Descriptor#clone()->Object:::Returns a descriptor which is equal to this descriptor
javax.management.Descriptor#isValid()->boolean:::Returns true if all of the fields have legal values given their names.
javax.management.Descriptor#equals(Object)->boolean:::Compares this descriptor to the given object
javax.management.Descriptor#hashCode()->int:::Returns the hash code value for this descriptor
javax.management.DescriptorAccess#setDescriptor(Descriptor)->void:::Sets Descriptor (full replace).
javax.management.DescriptorRead#getDescriptor()->Descriptor:::Returns a copy of Descriptor.
javax.management.DynamicMBean#getAttribute(String)->Object:::Obtain the value of a specific attribute of the Dynamic MBean.
javax.management.DynamicMBean#setAttribute(Attribute)->void:::Set the value of a specific attribute of the Dynamic MBean.
javax.management.DynamicMBean#getAttributes(String[])->AttributeList:::Get the values of several attributes of the Dynamic MBean.
javax.management.DynamicMBean#setAttributes(AttributeList)->AttributeList:::Sets the values of several attributes of the Dynamic MBean.
javax.management.DynamicMBean#invoke(String, Object[], String[])->Object:::Allows an action to be invoked on the Dynamic MBean.
javax.management.DynamicMBean#getMBeanInfo()->MBeanInfo:::Provides the exposed attributes and actions of the Dynamic MBean using an MBeanInfo object.
javax.management.ImmutableDescriptor#union(Descriptor...)->ImmutableDescriptor:::Return an ImmutableDescriptor whose contents are the union of the given descriptors
javax.management.ImmutableDescriptor#getFieldValue(String)->Object::: immutable descriptor get field value
javax.management.ImmutableDescriptor#getFields()->String[]::: immutable descriptor get fields
javax.management.ImmutableDescriptor#getFieldValues(String...)->Object[]::: immutable descriptor get field values
javax.management.ImmutableDescriptor#getFieldNames()->String[]::: immutable descriptor get field names
javax.management.ImmutableDescriptor#equals(Object)->boolean::: immutable descriptor equals
javax.management.ImmutableDescriptor#hashCode()->int::: immutable descriptor hash code
javax.management.ImmutableDescriptor#toString()->String::: immutable descriptor to string
javax.management.ImmutableDescriptor#isValid()->boolean:::Returns true if all of the fields have legal values given their names
javax.management.ImmutableDescriptor#clone()->Descriptor:::Returns a descriptor which is equal to this descriptor
javax.management.ImmutableDescriptor#setFields(String[], Object[])->void:::This operation is unsupported since this class is immutable
javax.management.ImmutableDescriptor#setField(String, Object)->void:::This operation is unsupported since this class is immutable
javax.management.ImmutableDescriptor#removeField(String)->void:::Removes a field from the descriptor.
javax.management.ImmutableDescriptor#nonNullDescriptor(Descriptor)->Descriptor::: immutable descriptor non null descriptor
javax.management.InQueryExp#getCheckedValue()->ValueExp:::Returns the checked value of the query.
javax.management.InQueryExp#getExplicitValues()->ValueExp[]:::Returns the array of values of the query.
javax.management.InQueryExp#apply(ObjectName)->boolean:::Applies the InQueryExp on a MBean.
javax.management.InQueryExp#toString()->String:::Returns the string representing the object.
javax.management.InstanceOfQueryExp#getClassNameValue()->StringValueExp:::Returns the class name.
javax.management.InstanceOfQueryExp#apply(ObjectName)->boolean:::Applies the InstanceOf on a MBean.
javax.management.InstanceOfQueryExp#toString()->String:::Returns a string representation of this InstanceOfQueryExp.
javax.management.JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)->T:::Make a proxy for a Standard MBean in a local or remote MBean Server.  If you have an MBean Server mbs containing an MBean with ObjectName name, and if the MBean's management interface is described by the Java interface MyMBean, you can construct a proxy for the MBean like this:   MyMBean proxy = JMX.newMBeanProxy(mbs, name, MyMBean.class);   Suppose, for example, MyMBean looks like this:   public interface MyMBean {     public String getSomeAttribute();     public void setSomeAttribute(String value);     public void someOperation(String param1, int param2); }   Then you can execute:  <ul>  <li>proxy.getSomeAttribute() which will result in a call to mbs.MBeanServerConnection#getAttribute getAttribute(name, "SomeAttribute")
javax.management.JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)->T:::Make a proxy for a Standard MBean in a local or remote MBean Server that may also support the methods of NotificationEmitter.  This method behaves the same as #newMBeanProxy(MBeanServerConnection, ObjectName, Class), but additionally, if notificationEmitter is true, then the MBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the returned proxy will implement NotificationEmitter as well as interfaceClass
javax.management.JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)->T:::Make a proxy for an MXBean in a local or remote MBean Server
javax.management.JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)->T:::Make a proxy for an MXBean in a local or remote MBean Server that may also support the methods of NotificationEmitter.  This method behaves the same as #newMXBeanProxy(MBeanServerConnection, ObjectName, Class), but additionally, if notificationEmitter is true, then the MXBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the returned proxy will implement NotificationEmitter as well as interfaceClass
javax.management.JMX#isMXBeanInterface(Class)->boolean:::Test whether an interface is an MXBean interface
javax.management.MatchQueryExp#getAttribute()->AttributeValueExp:::Returns the attribute of the query.
javax.management.MatchQueryExp#getPattern()->String:::Returns the pattern of the query.
javax.management.MatchQueryExp#apply(ObjectName)->boolean:::Applies the MatchQueryExp on a MBean.
javax.management.MatchQueryExp#toString()->String:::Returns the string representing the object
javax.management.MBeanAttributeInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanAttributeInfo#getType()->String:::Returns the class name of the attribute.
javax.management.MBeanAttributeInfo#isReadable()->boolean:::Whether the value of the attribute can be read.
javax.management.MBeanAttributeInfo#isWritable()->boolean:::Whether new values can be written to the attribute.
javax.management.MBeanAttributeInfo#isIs()->boolean:::Indicates if this attribute has an "is" getter.
javax.management.MBeanAttributeInfo#toString()->String::: bean attribute info to string
javax.management.MBeanAttributeInfo#equals(Object)->boolean:::Compare this MBeanAttributeInfo to another.
javax.management.MBeanAttributeInfo#hashCode()->int::: bean attribute info hash code
javax.management.MBeanConstructorInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanConstructorInfo#getSignature()->MBeanParameterInfo[]:::Returns the list of parameters for this constructor
javax.management.MBeanConstructorInfo#toString()->String::: bean constructor info to string
javax.management.MBeanConstructorInfo#equals(Object)->boolean:::Compare this MBeanConstructorInfo to another.
javax.management.MBeanConstructorInfo#hashCode()->int::: bean constructor info hash code
javax.management.MBeanException#getTargetException()->Exception:::Return the actual Exception thrown.
javax.management.MBeanException#getCause()->Throwable:::Return the actual Exception thrown.
javax.management.MBeanFeatureInfo#getName()->String:::Returns the name of the feature.
javax.management.MBeanFeatureInfo#getDescription()->String:::Returns the human-readable description of the feature.
javax.management.MBeanFeatureInfo#getDescriptor()->Descriptor:::Returns the descriptor for the feature
javax.management.MBeanFeatureInfo#equals(Object)->boolean:::Compare this MBeanFeatureInfo to another.
javax.management.MBeanFeatureInfo#hashCode()->int::: bean feature info hash code
javax.management.MBeanInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanInfo#getClassName()->String:::Returns the name of the Java class of the MBean described by this MBeanInfo.
javax.management.MBeanInfo#getDescription()->String:::Returns a human readable description of the MBean.
javax.management.MBeanInfo#getAttributes()->MBeanAttributeInfo[]:::Returns the list of attributes exposed for management
javax.management.MBeanInfo#getOperations()->MBeanOperationInfo[]:::Returns the list of operations  of the MBean
javax.management.MBeanInfo#getConstructors()->MBeanConstructorInfo[]:::Returns the list of the public constructors of the MBean
javax.management.MBeanInfo#getNotifications()->MBeanNotificationInfo[]:::Returns the list of the notifications emitted by the MBean
javax.management.MBeanInfo#getDescriptor()->Descriptor:::Get the descriptor of this MBeanInfo
javax.management.MBeanInfo#toString()->String::: bean info to string
javax.management.MBeanInfo#equals(Object)->boolean:::Compare this MBeanInfo to another
javax.management.MBeanInfo#hashCode()->int::: bean info hash code
javax.management.MBeanInfo#arrayGettersSafe(Class, Class)->boolean:::Return true if subclass is known to preserve the immutability of immutableClass
javax.management.MBeanNotificationInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanNotificationInfo#getNotifTypes()->String[]:::Returns the array of strings (in dot notation) containing the notification types that the MBean may emit.
javax.management.MBeanNotificationInfo#toString()->String::: bean notification info to string
javax.management.MBeanNotificationInfo#equals(Object)->boolean:::Compare this MBeanNotificationInfo to another.
javax.management.MBeanNotificationInfo#hashCode()->int::: bean notification info hash code
javax.management.MBeanOperationInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanOperationInfo#getReturnType()->String:::Returns the type of the method's return value.
javax.management.MBeanOperationInfo#getSignature()->MBeanParameterInfo[]:::Returns the list of parameters for this operation
javax.management.MBeanOperationInfo#getImpact()->int:::Returns the impact of the method, one of INFO, ACTION, ACTION_INFO, UNKNOWN.
javax.management.MBeanOperationInfo#toString()->String::: bean operation info to string
javax.management.MBeanOperationInfo#equals(Object)->boolean:::Compare this MBeanOperationInfo to another.
javax.management.MBeanOperationInfo#hashCode()->int::: bean operation info hash code
javax.management.MBeanOperationInfo#parameters(Class[], Annotation[][])->MBeanParameterInfo[]::: bean operation info parameters
javax.management.MBeanParameterInfo#clone()->Object:::Returns a shallow clone of this instance
javax.management.MBeanParameterInfo#getType()->String:::Returns the type or class name of the data.
javax.management.MBeanParameterInfo#toString()->String::: bean parameter info to string
javax.management.MBeanParameterInfo#equals(Object)->boolean:::Compare this MBeanParameterInfo to another.
javax.management.MBeanParameterInfo#hashCode()->int::: bean parameter info hash code
javax.management.MBeanPermission#getActions()->String:::Returns the "canonical string representation" of the actions
javax.management.MBeanPermission#hashCode()->int:::Returns the hash code value for this object.
javax.management.MBeanPermission#implies(Permission)->boolean:::Checks if this MBeanPermission object "implies" the specified permission.  More specifically, this method returns true if:  <ul>  <li> p is an instance of MBeanPermission; and</li>  <li> p has a null className or p's className matches this object's className; and</li>  <li> p has a null member or p's member matches this object's member; and</li>  <li> p has a null object name or p's object name matches this object's object name; and</li>  <li> p's actions are a subset of this object's actions</li>  </ul>  If this object's className is "*", p's className always matches it
javax.management.MBeanPermission#equals(Object)->boolean:::Checks two MBeanPermission objects for equality
javax.management.MBeanRegistration#preRegister(MBeanServer, ObjectName)->ObjectName:::Allows the MBean to perform any operations it needs before being registered in the MBean Server
javax.management.MBeanRegistration#postRegister(Boolean)->void:::Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed
javax.management.MBeanRegistration#preDeregister()->void:::Allows the MBean to perform any operations it needs before being unregistered by the MBean server.
javax.management.MBeanRegistration#postDeregister()->void:::Allows the MBean to perform any operations needed after having been unregistered in the MBean server
javax.management.MBeanServer#createMBean(String, ObjectName)->ObjectInstance::: If this method successfully creates an MBean, a notification is sent as described above.
javax.management.MBeanServer#createMBean(String, ObjectName, ObjectName)->ObjectInstance::: If this method successfully creates an MBean, a notification is sent as described above.
javax.management.MBeanServer#createMBean(String, ObjectName, Object[], String[])->ObjectInstance::: If this method successfully creates an MBean, a notification is sent as described above.
javax.management.MBeanServer#createMBean(String, ObjectName, ObjectName, Object[], String[])->ObjectInstance::: If this method successfully creates an MBean, a notification is sent as described above.
javax.management.MBeanServer#registerMBean(Object, ObjectName)->ObjectInstance:::Registers a pre-existing object as an MBean with the MBean server
javax.management.MBeanServer#unregisterMBean(ObjectName)->void:::  If this method successfully unregisters an MBean, a notification is sent as described above.
javax.management.MBeanServer#getObjectInstance(ObjectName)->ObjectInstance::: bean server get object instance
javax.management.MBeanServer#queryMBeans(ObjectName, QueryExp)->Set::: bean server query beans
javax.management.MBeanServer#queryNames(ObjectName, QueryExp)->Set::: bean server query names
javax.management.MBeanServer#isRegistered(ObjectName)->boolean::: bean server is registered
javax.management.MBeanServer#getMBeanCount()->Integer:::Returns the number of MBeans registered in the MBean server.
javax.management.MBeanServer#getAttribute(ObjectName, String)->Object::: bean server get attribute
javax.management.MBeanServer#getAttributes(ObjectName, String[])->AttributeList::: bean server get attributes
javax.management.MBeanServer#setAttribute(ObjectName, Attribute)->void::: bean server set attribute
javax.management.MBeanServer#setAttributes(ObjectName, AttributeList)->AttributeList::: bean server set attributes
javax.management.MBeanServer#invoke(ObjectName, String, Object[], String[])->Object::: bean server invoke
javax.management.MBeanServer#getDefaultDomain()->String::: bean server get default domain
javax.management.MBeanServer#getDomains()->String[]::: bean server get domains
javax.management.MBeanServer#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void::: If the source of the notification is a reference to an MBean object, the MBean server will replace it by that MBean's ObjectName
javax.management.MBeanServer#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void::: bean server add notification listener
javax.management.MBeanServer#removeNotificationListener(ObjectName, ObjectName)->void::: bean server remove notification listener
javax.management.MBeanServer#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void::: bean server remove notification listener
javax.management.MBeanServer#removeNotificationListener(ObjectName, NotificationListener)->void::: bean server remove notification listener
javax.management.MBeanServer#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void::: bean server remove notification listener
javax.management.MBeanServer#getMBeanInfo(ObjectName)->MBeanInfo::: bean server get bean info
javax.management.MBeanServer#isInstanceOf(ObjectName, String)->boolean::: bean server is instance of
javax.management.MBeanServer#instantiate(String)->Object:::Instantiates an object using the list of all class loaders registered in the MBean server's javax.management.loading.ClassLoaderRepository Class Loader Repository
javax.management.MBeanServer#instantiate(String, ObjectName)->Object:::Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>
javax.management.MBeanServer#instantiate(String, Object[], String[])->Object:::Instantiates an object using the list of all class loaders registered in the MBean server javax.management.loading.ClassLoaderRepository Class Loader Repository
javax.management.MBeanServer#instantiate(String, ObjectName, Object[], String[])->Object:::Instantiates an object
javax.management.MBeanServer#deserialize(ObjectName, byte[])->ObjectInputStream:::De-serializes a byte array in the context of the class loader of an MBean.
javax.management.MBeanServer#deserialize(String, byte[])->ObjectInputStream:::De-serializes a byte array in the context of a given MBean class loader
javax.management.MBeanServer#deserialize(String, ObjectName, byte[])->ObjectInputStream:::De-serializes a byte array in the context of a given MBean class loader
javax.management.MBeanServer#getClassLoaderFor(ObjectName)->ClassLoader:::Return the java.lang.ClassLoader that was used for loading the class of the named MBean.
javax.management.MBeanServer#getClassLoader(ObjectName)->ClassLoader:::Return the named java.lang.ClassLoader.
javax.management.MBeanServer#getClassLoaderRepository()->ClassLoaderRepository:::Return the ClassLoaderRepository for this MBeanServer.
javax.management.MBeanServerBuilder#newMBeanServerDelegate()->MBeanServerDelegate:::This method creates a new MBeanServerDelegate for a new MBeanServer
javax.management.MBeanServerBuilder#newMBeanServer(String, MBeanServer, MBeanServerDelegate)->MBeanServer:::This method creates a new MBeanServer implementation object
javax.management.MBeanServerConnection#createMBean(String, ObjectName)->ObjectInstance:::Instantiates and registers an MBean in the MBean server
javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName)->ObjectInstance:::Instantiates and registers an MBean in the MBean server
javax.management.MBeanServerConnection#createMBean(String, ObjectName, Object[], String[])->ObjectInstance:::Instantiates and registers an MBean in the MBean server
javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName, Object[], String[])->ObjectInstance:::Instantiates and registers an MBean in the MBean server
javax.management.MBeanServerConnection#unregisterMBean(ObjectName)->void:::Unregisters an MBean from the MBean server
javax.management.MBeanServerConnection#getObjectInstance(ObjectName)->ObjectInstance:::Gets the <CODE>ObjectInstance</CODE> for a given MBean registered with the MBean server.
javax.management.MBeanServerConnection#queryMBeans(ObjectName, QueryExp)->Set:::Gets MBeans controlled by the MBean server
javax.management.MBeanServerConnection#queryNames(ObjectName, QueryExp)->Set:::Gets the names of MBeans controlled by the MBean server
javax.management.MBeanServerConnection#isRegistered(ObjectName)->boolean:::Checks whether an MBean, identified by its object name, is already registered with the MBean server.
javax.management.MBeanServerConnection#getMBeanCount()->Integer:::Returns the number of MBeans registered in the MBean server.
javax.management.MBeanServerConnection#getAttribute(ObjectName, String)->Object:::Gets the value of a specific attribute of a named MBean
javax.management.MBeanServerConnection#getAttributes(ObjectName, String[])->AttributeList:::Retrieves the values of several attributes of a named MBean
javax.management.MBeanServerConnection#setAttribute(ObjectName, Attribute)->void:::Sets the value of a specific attribute of a named MBean
javax.management.MBeanServerConnection#setAttributes(ObjectName, AttributeList)->AttributeList:::Sets the values of several attributes of a named MBean
javax.management.MBeanServerConnection#invoke(ObjectName, String, Object[], String[])->Object:::Invokes an operation on an MBean.  Because of the need for a signature to differentiate possibly-overloaded operations, it is much simpler to invoke operations through an JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class) MBean proxy where possible
javax.management.MBeanServerConnection#getDefaultDomain()->String:::Returns the default domain used for naming the MBean
javax.management.MBeanServerConnection#getDomains()->String[]:::Returns the list of domains in which any MBean is currently registered
javax.management.MBeanServerConnection#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void:::Adds a listener to a registered MBean
javax.management.MBeanServerConnection#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void:::Adds a listener to a registered MBean.  A notification emitted by an MBean will be forwarded by the MBeanServer to the listener
javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName)->void:::Removes a listener from a registered MBean
javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void:::Removes a listener from a registered MBean.  The MBean must have a listener that exactly matches the given listener, filter, and handback parameters
javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, NotificationListener)->void:::Removes a listener from a registered MBean.  <P> If the listener is registered more than once, perhaps with different filters or callbacks, this method will remove all those registrations.
javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void:::Removes a listener from a registered MBean.  The MBean must have a listener that exactly matches the given listener, filter, and handback parameters
javax.management.MBeanServerConnection#getMBeanInfo(ObjectName)->MBeanInfo:::This method discovers the attributes and operations that an MBean exposes for management.
javax.management.MBeanServerConnection#isInstanceOf(ObjectName, String)->boolean:::Returns true if the MBean specified is an instance of the specified class, false otherwise.  If name does not name an MBean, this method throws InstanceNotFoundException.  Otherwise, let<br> X be the MBean named by name,<br> L be the ClassLoader of X,<br> N be the class name in X's MBeanInfo.  If N equals className, the result is true.  Otherwise, if L successfully loads className and X is an instance of this class, the result is true
javax.management.MBeanServerDelegate#getMBeanServerId()->String:::Returns the MBean server agent identity.
javax.management.MBeanServerDelegate#getSpecificationName()->String:::Returns the full name of the JMX specification implemented by this product.
javax.management.MBeanServerDelegate#getSpecificationVersion()->String:::Returns the version of the JMX specification implemented by this product.
javax.management.MBeanServerDelegate#getSpecificationVendor()->String:::Returns the vendor of the JMX specification implemented by this product.
javax.management.MBeanServerDelegate#getImplementationName()->String:::Returns the JMX implementation name (the name of this product).
javax.management.MBeanServerDelegate#getImplementationVersion()->String:::Returns the JMX implementation version (the version of this product).
javax.management.MBeanServerDelegate#getImplementationVendor()->String:::Returns the JMX implementation vendor (the vendor of this product).
javax.management.MBeanServerDelegate#getNotificationInfo()->MBeanNotificationInfo[]::: bean server delegate get notification info
javax.management.MBeanServerDelegate#addNotificationListener(NotificationListener, NotificationFilter, Object)->void::: bean server delegate add notification listener
javax.management.MBeanServerDelegate#removeNotificationListener(NotificationListener, NotificationFilter, Object)->void::: bean server delegate remove notification listener
javax.management.MBeanServerDelegate#removeNotificationListener(NotificationListener)->void::: bean server delegate remove notification listener
javax.management.MBeanServerDelegate#sendNotification(Notification)->void:::Enables the MBean server to send a notification
javax.management.MBeanServerDelegateMBean#getMBeanServerId()->String:::Returns the MBean server agent identity.
javax.management.MBeanServerDelegateMBean#getSpecificationName()->String:::Returns the full name of the JMX specification implemented by this product.
javax.management.MBeanServerDelegateMBean#getSpecificationVersion()->String:::Returns the version of the JMX specification implemented by this product.
javax.management.MBeanServerDelegateMBean#getSpecificationVendor()->String:::Returns the vendor of the JMX specification implemented by this product.
javax.management.MBeanServerDelegateMBean#getImplementationName()->String:::Returns the JMX implementation name (the name of this product).
javax.management.MBeanServerDelegateMBean#getImplementationVersion()->String:::Returns the JMX implementation version (the version of this product).
javax.management.MBeanServerDelegateMBean#getImplementationVendor()->String:::Returns the JMX implementation vendor (the vendor of this product).
javax.management.MBeanServerFactory#releaseMBeanServer(MBeanServer)->void:::Remove internal MBeanServerFactory references to a created MBeanServer
javax.management.MBeanServerFactory#createMBeanServer()->MBeanServer:::Return a new object implementing the MBeanServer interface with a standard default domain name
javax.management.MBeanServerFactory#createMBeanServer(String)->MBeanServer:::Return a new object implementing the MBeanServer interface with the specified default domain name
javax.management.MBeanServerFactory#newMBeanServer()->MBeanServer:::Return a new object implementing the MBeanServer interface with a standard default domain name, without keeping an internal reference to this new object
javax.management.MBeanServerFactory#newMBeanServer(String)->MBeanServer:::Return a new object implementing the MBeanServer interface with the specified default domain name, without keeping an internal reference to this new object
javax.management.MBeanServerFactory#findMBeanServer(String)->ArrayList:::Return a list of registered MBeanServer objects
javax.management.MBeanServerFactory#getClassLoaderRepository(MBeanServer)->ClassLoaderRepository:::Return the ClassLoaderRepository used by the given MBeanServer
javax.management.MBeanServerInvocationHandler#getMBeanServerConnection()->MBeanServerConnection:::The MBean server connection through which the methods of a proxy using this handler are forwarded.
javax.management.MBeanServerInvocationHandler#getObjectName()->ObjectName:::The name of the MBean within the MBean server to which methods are forwarded.
javax.management.MBeanServerInvocationHandler#isMXBean()->boolean:::If true, the proxy is for an MXBean, and appropriate mappings are applied to method parameters and return values.
javax.management.MBeanServerInvocationHandler#newProxyInstance(MBeanServerConnection, ObjectName, Class, boolean)->T:::Return a proxy that implements the given interface by forwarding its methods through the given MBean server to the named MBean
javax.management.MBeanServerInvocationHandler#invoke(Object, Method, Object[])->Object::: bean server invocation handler invoke
javax.management.MBeanServerNotification#getMBeanName()->ObjectName:::Returns the  object name of the MBean that caused the notification.
javax.management.MBeanServerNotification#toString()->String::: bean server notification to string
javax.management.MBeanServerPermission#simplifyMask(int)->int::: bean server permission simplify mask
javax.management.MBeanServerPermission#impliedMask(int)->int::: bean server permission implied mask
javax.management.MBeanServerPermission#getCanonicalName(int)->String::: bean server permission get canonical name
javax.management.MBeanServerPermission#hashCode()->int::: bean server permission hash code
javax.management.MBeanServerPermission#implies(Permission)->boolean:::Checks if this MBeanServerPermission object "implies" the specified permission.  More specifically, this method returns true if:  <ul> <li> p is an instance of MBeanServerPermission,</li> <li> p's target names are a subset of this object's target names</li> </ul>  The createMBeanServer permission implies the newMBeanServer permission.
javax.management.MBeanServerPermission#equals(Object)->boolean:::Checks two MBeanServerPermission objects for equality
javax.management.MBeanServerPermission#newPermissionCollection()->PermissionCollection::: bean server permission new permission collection
javax.management.MBeanServerPermissionCollection#add(Permission)->void::: bean server permission collection add
javax.management.MBeanServerPermissionCollection#implies(Permission)->boolean::: bean server permission collection implies
javax.management.MBeanServerPermissionCollection#elements()->Enumeration::: bean server permission collection elements
javax.management.Notification#setSource(Object)->void:::Sets the source.
javax.management.Notification#getSequenceNumber()->long:::Get the notification sequence number.
javax.management.Notification#setSequenceNumber(long)->void:::Set the notification sequence number.
javax.management.Notification#getType()->String:::Get the notification type.
javax.management.Notification#getTimeStamp()->long:::Get the notification timestamp.
javax.management.Notification#setTimeStamp(long)->void:::Set the notification timestamp.
javax.management.Notification#getMessage()->String:::Get the notification message.
javax.management.Notification#getUserData()->Object:::Get the user data.
javax.management.Notification#setUserData(Object)->void:::Set the user data.
javax.management.Notification#toString()->String:::Returns a String representation of this notification.
javax.management.NotificationBroadcaster#addNotificationListener(NotificationListener, NotificationFilter, Object)->void:::Adds a listener to this MBean.
javax.management.NotificationBroadcaster#removeNotificationListener(NotificationListener)->void:::Removes a listener from this MBean
javax.management.NotificationBroadcaster#getNotificationInfo()->MBeanNotificationInfo[]:::Returns an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type.  It is not illegal for the MBean to send notifications not described in this array
javax.management.NotificationBroadcasterSupport#addNotificationListener(NotificationListener, NotificationFilter, Object)->void:::Adds a listener.
javax.management.NotificationBroadcasterSupport#removeNotificationListener(NotificationListener)->void::: notification broadcaster support remove notification listener
javax.management.NotificationBroadcasterSupport#removeNotificationListener(NotificationListener, NotificationFilter, Object)->void::: notification broadcaster support remove notification listener
javax.management.NotificationBroadcasterSupport#getNotificationInfo()->MBeanNotificationInfo[]::: notification broadcaster support get notification info
javax.management.NotificationBroadcasterSupport#sendNotification(Notification)->void:::Sends a notification
javax.management.NotificationBroadcasterSupport#handleNotification(NotificationListener, Notification, Object)->void:::This method is called by #sendNotification sendNotification for each listener in order to send the notification to that listener
javax.management.NotificationEmitter#removeNotificationListener(NotificationListener, NotificationFilter, Object)->void:::Removes a listener from this MBean
javax.management.NotificationFilter#isNotificationEnabled(Notification)->boolean:::Invoked before sending the specified notification to the listener.
javax.management.NotificationFilterSupport#isNotificationEnabled(Notification)->boolean:::Invoked before sending the specified notification to the listener
javax.management.NotificationFilterSupport#enableType(String)->void:::Enables all the notifications the type of which starts with the specified prefix to be sent to the listener
javax.management.NotificationFilterSupport#disableType(String)->void:::Removes the given prefix from the prefix list
javax.management.NotificationFilterSupport#disableAllTypes()->void:::Disables all notification types.
javax.management.NotificationFilterSupport#getEnabledTypes()->Vector:::Gets all the enabled notification types for this filter.
javax.management.NotificationListener#handleNotification(Notification, Object)->void:::Invoked when a JMX notification occurs
javax.management.NotQueryExp#getNegatedExp()->QueryExp:::Returns the negated query expression of the query.
javax.management.NotQueryExp#apply(ObjectName)->boolean:::Applies the NotQueryExp on a MBean.
javax.management.NotQueryExp#toString()->String:::Returns the string representing the object.
javax.management.NumericValueExp#doubleValue()->double:::Returns a double numeric value
javax.management.NumericValueExp#longValue()->long:::Returns a long numeric value
javax.management.NumericValueExp#isLong()->boolean:::Returns true is if the numeric value is a long, false otherwise.
javax.management.NumericValueExp#toString()->String:::Returns the string representing the object
javax.management.NumericValueExp#apply(ObjectName)->ValueExp:::Applies the ValueExp on a MBean.
javax.management.NumericValueExp#setMBeanServer(MBeanServer)->void::: numeric value exp set bean server
javax.management.ObjectInstance#equals(Object)->boolean:::Compares the current object instance with another object instance.
javax.management.ObjectInstance#hashCode()->int::: object instance hash code
javax.management.ObjectInstance#getObjectName()->ObjectName:::Returns the object name part.
javax.management.ObjectInstance#getClassName()->String:::Returns the class part.
javax.management.ObjectInstance#toString()->String:::Returns a string representing this ObjectInstance object
javax.management.ObjectName#getInstance(String)->ObjectName:::Return an instance of ObjectName that can be used anywhere an object obtained with #ObjectName(String) new ObjectName(name) can be used
javax.management.ObjectName#getInstance(String, String, String)->ObjectName:::Return an instance of ObjectName that can be used anywhere an object obtained with #ObjectName(String, String, String) new ObjectName(domain, key, value) can be used
javax.management.ObjectName#getInstance(String, Hashtable)->ObjectName:::Return an instance of ObjectName that can be used anywhere an object obtained with #ObjectName(String, Hashtable) new ObjectName(domain, table) can be used
javax.management.ObjectName#getInstance(ObjectName)->ObjectName:::Return an instance of ObjectName that can be used anywhere the given object can be used
javax.management.ObjectName#isPattern()->boolean:::Checks whether the object name is a pattern
javax.management.ObjectName#isDomainPattern()->boolean:::Checks whether the object name is a pattern on the domain part.
javax.management.ObjectName#isPropertyPattern()->boolean:::Checks whether the object name is a pattern on the key properties
javax.management.ObjectName#isPropertyListPattern()->boolean:::Checks whether the object name is a pattern on the key property list
javax.management.ObjectName#isPropertyValuePattern()->boolean:::Checks whether the object name is a pattern on the value part of at least one of the key properties
javax.management.ObjectName#isPropertyValuePattern(String)->boolean:::Checks whether the value associated with a key in a key property is a pattern.
javax.management.ObjectName#getCanonicalName()->String:::Returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order.  More precisely, the canonical form of the name is a String consisting of the domain part, a colon (:), the canonical key property list, and a pattern indication.  The canonical key property list is the same string as described for #getCanonicalKeyPropertyListString().  The pattern indication is: <ul> <li>empty for an ObjectName that is not a property list pattern; <li>an asterisk for an ObjectName that is a property list pattern with no keys; or <li>a comma and an asterisk (,*) for an ObjectName that is a property list pattern with at least one key
javax.management.ObjectName#getDomain()->String:::Returns the domain part.
javax.management.ObjectName#getKeyProperty(String)->String:::Obtains the value associated with a key in a key property.
javax.management.ObjectName#getKeyPropertyList()->Hashtable::: object name get key property list
javax.management.ObjectName#getKeyPropertyListString()->String:::Returns a string representation of the list of key properties specified at creation time
javax.management.ObjectName#getCanonicalKeyPropertyListString()->String:::Returns a string representation of the list of key properties, in which the key properties are sorted in lexical order
javax.management.ObjectName#toString()->String:::Returns a string representation of the object name
javax.management.ObjectName#equals(Object)->boolean:::Compares the current object name with another object name
javax.management.ObjectName#hashCode()->int:::Returns a hash code for this object name.
javax.management.ObjectName#quote(String)->String:::Returns a quoted form of the given String, suitable for inclusion in an ObjectName
javax.management.ObjectName#unquote(String)->String:::Returns an unquoted form of the given String
javax.management.ObjectName#apply(ObjectName)->boolean:::Test whether this ObjectName, which may be a pattern, matches another ObjectName
javax.management.ObjectName#setMBeanServer(MBeanServer)->void::: object name set bean server
javax.management.ObjectName#compareTo(ObjectName)->int:::Compares two ObjectName instances
javax.management.OrQueryExp#getLeftExp()->QueryExp:::Returns the left query expression.
javax.management.OrQueryExp#getRightExp()->QueryExp:::Returns the right query expression.
javax.management.OrQueryExp#apply(ObjectName)->boolean:::Applies the OrQueryExp on a MBean.
javax.management.OrQueryExp#toString()->String:::Returns a string representation of this OrQueryExp
javax.management.PersistentMBean#load()->void:::Instantiates thisMBean instance with the data found for the MBean in the persistent store
javax.management.PersistentMBean#store()->void:::Captures the current state of this MBean instance and writes it out to the persistent store
javax.management.QualifiedAttributeValueExp#getAttrClassName()->String:::Returns a string representation of the class name of the attribute.
javax.management.QualifiedAttributeValueExp#apply(ObjectName)->ValueExp:::Applies the QualifiedAttributeValueExp to an MBean.
javax.management.QualifiedAttributeValueExp#toString()->String:::Returns the string representing its value
javax.management.Query#and(QueryExp, QueryExp)->QueryExp:::Returns a query expression that is the conjunction of two other query expressions.
javax.management.Query#or(QueryExp, QueryExp)->QueryExp:::Returns a query expression that is the disjunction of two other query expressions.
javax.management.Query#gt(ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents a "greater than" constraint on two values.
javax.management.Query#geq(ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents a "greater than or equal to" constraint on two values.
javax.management.Query#leq(ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents a "less than or equal to" constraint on two values.
javax.management.Query#lt(ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents a "less than" constraint on two values.
javax.management.Query#eq(ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents an equality constraint on two values.
javax.management.Query#between(ValueExp, ValueExp, ValueExp)->QueryExp:::Returns a query expression that represents the constraint that one value is between two other values.
javax.management.Query#match(AttributeValueExp, StringValueExp)->QueryExp:::Returns a query expression that represents a matching constraint on a string argument
javax.management.Query#attr(String)->AttributeValueExp:::Returns a new attribute expression
javax.management.Query#attr(String, String)->AttributeValueExp:::Returns a new qualified attribute expression.  Evaluating this expression for a given objectName includes performing MBeanServer#getObjectInstance MBeanServer.getObjectInstance(objectName) and MBeanServer#getAttribute MBeanServer.getAttribute(objectName, name).
javax.management.Query#classattr()->AttributeValueExp:::Returns a new class attribute expression which can be used in any Query call that expects a ValueExp.  Evaluating this expression for a given objectName includes performing MBeanServer#getObjectInstance MBeanServer.getObjectInstance(objectName).
javax.management.Query#not(QueryExp)->QueryExp:::Returns a constraint that is the negation of its argument.
javax.management.Query#in(ValueExp, ValueExp[])->QueryExp:::Returns an expression constraining a value to be one of an explicit list.
javax.management.Query#value(String)->StringValueExp:::Returns a new string expression.
javax.management.Query#value(Number)->ValueExp:::Returns a numeric value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#value(int)->ValueExp:::Returns a numeric value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#value(long)->ValueExp:::Returns a numeric value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#value(float)->ValueExp:::Returns a numeric value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#value(double)->ValueExp:::Returns a numeric value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#value(boolean)->ValueExp:::Returns a boolean value expression that can be used in any Query call that expects a ValueExp.
javax.management.Query#plus(ValueExp, ValueExp)->ValueExp:::Returns a binary expression representing the sum of two numeric values, or the concatenation of two string values.
javax.management.Query#times(ValueExp, ValueExp)->ValueExp:::Returns a binary expression representing the product of two numeric values.
javax.management.Query#minus(ValueExp, ValueExp)->ValueExp:::Returns a binary expression representing the difference between two numeric values.
javax.management.Query#div(ValueExp, ValueExp)->ValueExp:::Returns a binary expression representing the quotient of two numeric values.
javax.management.Query#initialSubString(AttributeValueExp, StringValueExp)->QueryExp:::Returns a query expression that represents a matching constraint on a string argument
javax.management.Query#anySubString(AttributeValueExp, StringValueExp)->QueryExp:::Returns a query expression that represents a matching constraint on a string argument
javax.management.Query#finalSubString(AttributeValueExp, StringValueExp)->QueryExp:::Returns a query expression that represents a matching constraint on a string argument
javax.management.Query#isInstanceOf(StringValueExp)->QueryExp:::Returns a query expression that represents an inheritance constraint on an MBean class
javax.management.QueryEval#setMBeanServer(MBeanServer)->void:::Sets the MBean server on which the query is to be performed
javax.management.QueryEval#getMBeanServer()->MBeanServer:::Return the MBean server that was most recently given to the #setMBeanServer setMBeanServer method by this thread
javax.management.QueryExp#apply(ObjectName)->boolean:::Applies the QueryExp on an MBean.
javax.management.QueryExp#setMBeanServer(MBeanServer)->void:::Sets the MBean server on which the query is to be performed.
javax.management.ReflectionException#getTargetException()->java.lang.Exception:::Returns the actual Exception thrown.
javax.management.ReflectionException#getCause()->Throwable:::Returns the actual Exception thrown.
javax.management.RuntimeErrorException#getTargetError()->java.lang.Error:::Returns the actual Error thrown.
javax.management.RuntimeErrorException#getCause()->Throwable:::Returns the actual Error thrown.
javax.management.RuntimeMBeanException#getTargetException()->java.lang.RuntimeException:::Returns the actual RuntimeException thrown.
javax.management.RuntimeMBeanException#getCause()->Throwable:::Returns the actual RuntimeException thrown.
javax.management.RuntimeOperationsException#getTargetException()->java.lang.RuntimeException:::Returns the actual RuntimeException thrown.
javax.management.RuntimeOperationsException#getCause()->Throwable:::Returns the actual RuntimeException thrown.
javax.management.StandardEmitterMBean#removeNotificationListener(NotificationListener)->void::: standard emitter bean remove notification listener
javax.management.StandardEmitterMBean#removeNotificationListener(NotificationListener, NotificationFilter, Object)->void::: standard emitter bean remove notification listener
javax.management.StandardEmitterMBean#addNotificationListener(NotificationListener, NotificationFilter, Object)->void::: standard emitter bean add notification listener
javax.management.StandardEmitterMBean#getNotificationInfo()->MBeanNotificationInfo[]::: standard emitter bean get notification info
javax.management.StandardEmitterMBean#sendNotification(Notification)->void:::Sends a notification.  If the emitter parameter to the constructor was an instance of NotificationBroadcasterSupport then this method will call emitter.NotificationBroadcasterSupport#sendNotification sendNotification.
javax.management.StandardEmitterMBean#getNotifications(MBeanInfo)->MBeanNotificationInfo[]:::Get the MBeanNotificationInfo[] that will be used in the MBeanInfo returned by this MBean.  The default implementation of this method returns #getNotificationInfo().
javax.management.StandardMBean#setImplementation(Object)->void:::Replace the implementation object wrapped in this object.
javax.management.StandardMBean#getImplementation()->Object:::Get the implementation of this Standard MBean (or MXBean).
javax.management.StandardMBean#getMBeanInterface()->Class:::Get the Management Interface of this Standard MBean (or MXBean).
javax.management.StandardMBean#getImplementationClass()->Class:::Get the class of the implementation of this Standard MBean (or MXBean).
javax.management.StandardMBean#getAttribute(String)->Object::: standard bean get attribute
javax.management.StandardMBean#setAttribute(Attribute)->void::: standard bean set attribute
javax.management.StandardMBean#getAttributes(String[])->AttributeList::: standard bean get attributes
javax.management.StandardMBean#setAttributes(AttributeList)->AttributeList::: standard bean set attributes
javax.management.StandardMBean#invoke(String, Object[], String[])->Object::: standard bean invoke
javax.management.StandardMBean#getMBeanInfo()->MBeanInfo:::Get the MBeanInfo for this MBean
javax.management.StandardMBean#getClassName(MBeanInfo)->String:::Customization hook: Get the className that will be used in the MBeanInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanInfo)->String:::Customization hook: Get the description that will be used in the MBeanInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanFeatureInfo)->String:::Customization hook: Get the description that will be used in the MBeanFeatureInfo returned by this MBean.  Subclasses may redefine this method in order to supply their custom description
javax.management.StandardMBean#getDescription(MBeanAttributeInfo)->String:::Customization hook: Get the description that will be used in the MBeanAttributeInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanConstructorInfo)->String:::Customization hook: Get the description that will be used in the MBeanConstructorInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanConstructorInfo, MBeanParameterInfo, int)->String:::Customization hook: Get the description that will be used for the  <var>sequence</var> MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean
javax.management.StandardMBean#getParameterName(MBeanConstructorInfo, MBeanParameterInfo, int)->String:::Customization hook: Get the name that will be used for the <var>sequence</var> MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanOperationInfo)->String:::Customization hook: Get the description that will be used in the MBeanOperationInfo returned by this MBean
javax.management.StandardMBean#getImpact(MBeanOperationInfo)->int:::Customization hook: Get the <var>impact</var> flag of the operation that will be used in the MBeanOperationInfo returned by this MBean
javax.management.StandardMBean#getParameterName(MBeanOperationInfo, MBeanParameterInfo, int)->String:::Customization hook: Get the name that will be used for the <var>sequence</var> MBeanParameterInfo of the MBeanOperationInfo returned by this MBean
javax.management.StandardMBean#getDescription(MBeanOperationInfo, MBeanParameterInfo, int)->String:::Customization hook: Get the description that will be used for the  <var>sequence</var> MBeanParameterInfo of the MBeanOperationInfo returned by this MBean
javax.management.StandardMBean#getConstructors(MBeanConstructorInfo[], Object)->MBeanConstructorInfo[]:::Customization hook: Get the MBeanConstructorInfo[] that will be used in the MBeanInfo returned by this MBean
javax.management.StandardMBean#getNotifications(MBeanInfo)->MBeanNotificationInfo[]:::Customization hook: Get the MBeanNotificationInfo[] that will be used in the MBeanInfo returned by this MBean
javax.management.StandardMBean#getDescriptor(MBeanInfo, boolean)->Descriptor:::Get the Descriptor that will be used in the MBeanInfo returned by this MBean.  Subclasses may redefine this method in order to supply their custom descriptor.  The default implementation of this method returns a Descriptor that contains at least the field interfaceClassName, with value #getMBeanInterface().getName()
javax.management.StandardMBean#getCachedMBeanInfo()->MBeanInfo:::Customization hook: Return the MBeanInfo cached for this object
javax.management.StandardMBean#cacheMBeanInfo(MBeanInfo)->void:::Customization hook: cache the MBeanInfo built for this object
javax.management.StandardMBean#preRegister(MBeanServer, ObjectName)->ObjectName:::Allows the MBean to perform any operations it needs before being registered in the MBean server
javax.management.StandardMBean#postRegister(Boolean)->void:::Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.  The default implementation of this method does nothing for Standard MBeans
javax.management.StandardMBean#preDeregister()->void:::Allows the MBean to perform any operations it needs before being unregistered by the MBean server.  The default implementation of this method does nothing.  It is good practice for a subclass that overrides this method to call the overridden method via super.preDeregister(...).
javax.management.StandardMBean#postDeregister()->void:::Allows the MBean to perform any operations needed after having been unregistered in the MBean server.  The default implementation of this method does nothing for Standard MBeans
javax.management.StandardMBean#immutableInfo(Class)->boolean:::Return true if subclass is known to preserve the immutability of the MBeanInfo
javax.management.StandardMBean#overrides(Class, Class, String, Class...)->boolean::: standard bean overrides
javax.management.StringValueExp#getValue()->String:::Returns the string represented by the <CODE>StringValueExp</CODE> instance.
javax.management.StringValueExp#toString()->String:::Returns the string representing the object.
javax.management.StringValueExp#setMBeanServer(MBeanServer)->void::: string value exp set bean server
javax.management.StringValueExp#apply(ObjectName)->ValueExp:::Applies the ValueExp on a MBean.
javax.management.ValueExp#apply(ObjectName)->ValueExp:::Applies the ValueExp on a MBean.
javax.management.ValueExp#setMBeanServer(MBeanServer)->void:::Sets the MBean server on which the query is to be performed.

BasicAddressFieldWrapper#getValue(Address)::: basic address field wrapper get value:::return->field->getAddress
BasicAddressFieldWrapper#getValue()::: basic address field wrapper get value:::return->field->getAddress
BasicCIntegerField#isUnsigned()::: basic integer field is unsigned:::return->intType->isUnsigned
BasicCIntegerField#getValue(Address):::The field must be nonstatic and of integer type, or a       WrongTypeException will be thrown.:::return->getCInteger
BasicCIntegerField#getValue():::The field must be static and of integer type, or a       WrongTypeException will be thrown.:::return->getCInteger
BasicCIntegerType#equals(Object)::: basic integer type equals:::if->super->equals->return->if->return->arg->if->return->return
BasicCIntegerType#toString()::: basic integer type to string:::prefix->if->if->return->getName->return->getName
BasicCIntegerType#isCIntegerType()::: basic integer type is integer type:::return
BasicCIntegerType#isUnsigned()::: basic integer type is unsigned:::return
BasicCIntegerType#setIsUnsigned(boolean):::This should be called at most once, and only by the builder of       the TypeDataBase:::
BasicCIntegerType#maxValue()::: basic integer type max value:::return->db->getSize->isUnsigned->cIntegerTypeMaxValue
BasicCIntegerType#minValue()::: basic integer type min value:::return->db->getSize->isUnsigned->cIntegerTypeMinValue
BasicField#getName()::: basic field get name:::return
BasicField#getType()::: basic field get type:::return
BasicField#getSize()::: basic field get size:::return
BasicField#isStatic()::: basic field is static:::return
BasicField#getOffset()::: basic field get offset:::if->throw->containingType->getName->new->WrongTypeException->return
BasicField#getStaticFieldAddress()::: basic field get static field address:::if->throw->containingType->getName->new->WrongTypeException->return
BasicField#getJBoolean(Address)::: basic field get boolean:::if->throw->new->WrongTypeException->return->addr->getJBooleanAt
BasicField#getJByte(Address)::: basic field get byte:::if->throw->new->WrongTypeException->return->addr->getJByteAt
BasicField#getJChar(Address)::: basic field get char:::if->throw->new->WrongTypeException->return->addr->getJCharAt
BasicField#getJDouble(Address)::: basic field get double:::if->throw->new->WrongTypeException->return->addr->getJDoubleAt
BasicField#getJFloat(Address)::: basic field get float:::if->throw->new->WrongTypeException->return->addr->getJFloatAt
BasicField#getJInt(Address)::: basic field get int:::if->throw->new->WrongTypeException->return->addr->getJIntAt
BasicField#getJLong(Address)::: basic field get long:::if->throw->new->WrongTypeException->return->addr->getJLongAt
BasicField#getJShort(Address)::: basic field get short:::if->throw->new->WrongTypeException->return->addr->getJShortAt
BasicField#getCInteger(Address, CIntegerType)::: basic field get integer:::if->throw->new->WrongTypeException->return->addr->type->getSize->type->isUnsigned->getCIntegerAt
BasicField#getAddress(Address)::: basic field get address:::if->throw->new->WrongTypeException->return->addr->getAddressAt
BasicField#getOopHandle(Address)::: basic field get oop handle:::if->throw->new->WrongTypeException->return->addr->getOopHandleAt
BasicField#getNarrowOopHandle(Address)::: basic field get narrow oop handle:::if->throw->new->WrongTypeException->return->addr->getCompOopHandleAt
BasicField#getJBoolean()::: basic field get boolean:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJBooleanAt
BasicField#getJByte()::: basic field get byte:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJByteAt
BasicField#getJChar()::: basic field get char:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJCharAt
BasicField#getJDouble()::: basic field get double:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJDoubleAt
BasicField#getJFloat()::: basic field get float:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJFloatAt
BasicField#getJInt()::: basic field get int:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJIntAt
BasicField#getJLong()::: basic field get long:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJLongAt
BasicField#getJShort()::: basic field get short:::if->throw->new->WrongTypeException->return->staticFieldAddress->getJShortAt
BasicField#getCInteger(CIntegerType)::: basic field get integer:::if->throw->new->WrongTypeException->return->staticFieldAddress->type->getSize->type->isUnsigned->getCIntegerAt
BasicField#getAddress()::: basic field get address:::if->throw->new->WrongTypeException->return->staticFieldAddress->getAddressAt
BasicField#getOopHandle()::: basic field get oop handle:::if->throw->new->WrongTypeException->return->staticFieldAddress->getOopHandleAt
BasicField#getNarrowOopHandle()::: basic field get narrow oop handle:::if->throw->new->WrongTypeException->return->staticFieldAddress->getCompOopHandleAt
BasicFieldWrapper#getName()::: basic field wrapper get name:::return->field->getName
BasicFieldWrapper#getType()::: basic field wrapper get type:::return->field->getType
BasicFieldWrapper#getSize()::: basic field wrapper get size:::return->field->getSize
BasicFieldWrapper#isStatic()::: basic field wrapper is static:::return->field->isStatic
BasicFieldWrapper#getOffset()::: basic field wrapper get offset:::return->field->getOffset
BasicFieldWrapper#getStaticFieldAddress()::: basic field wrapper get static field address:::return->field->getStaticFieldAddress
BasicFieldWrapper#getJBoolean(Address)::: basic field wrapper get boolean:::return->field->getJBoolean
BasicFieldWrapper#getJByte(Address)::: basic field wrapper get byte:::return->field->getJByte
BasicFieldWrapper#getJChar(Address)::: basic field wrapper get char:::return->field->getJChar
BasicFieldWrapper#getJDouble(Address)::: basic field wrapper get double:::return->field->getJDouble
BasicFieldWrapper#getJFloat(Address)::: basic field wrapper get float:::return->field->getJFloat
BasicFieldWrapper#getJInt(Address)::: basic field wrapper get int:::return->field->getJInt
BasicFieldWrapper#getJLong(Address)::: basic field wrapper get long:::return->field->getJLong
BasicFieldWrapper#getJShort(Address)::: basic field wrapper get short:::return->field->getJShort
BasicFieldWrapper#getCInteger(Address, CIntegerType)::: basic field wrapper get integer:::return->field->getCInteger
BasicFieldWrapper#getAddress(Address)::: basic field wrapper get address:::return->field->getAddress
BasicFieldWrapper#getOopHandle(Address)::: basic field wrapper get oop handle:::return->field->getOopHandle
BasicFieldWrapper#getNarrowOopHandle(Address)::: basic field wrapper get narrow oop handle:::return->field->getNarrowOopHandle
BasicFieldWrapper#getJBoolean()::: basic field wrapper get boolean:::return->field->getJBoolean
BasicFieldWrapper#getJByte()::: basic field wrapper get byte:::return->field->getJByte
BasicFieldWrapper#getJChar()::: basic field wrapper get char:::return->field->getJChar
BasicFieldWrapper#getJDouble()::: basic field wrapper get double:::return->field->getJDouble
BasicFieldWrapper#getJFloat()::: basic field wrapper get float:::return->field->getJFloat
BasicFieldWrapper#getJInt()::: basic field wrapper get int:::return->field->getJInt
BasicFieldWrapper#getJLong()::: basic field wrapper get long:::return->field->getJLong
BasicFieldWrapper#getJShort()::: basic field wrapper get short:::return->field->getJShort
BasicFieldWrapper#getCInteger(CIntegerType)::: basic field wrapper get integer:::return->field->getCInteger
BasicFieldWrapper#getAddress()::: basic field wrapper get address:::return->field->getAddress
BasicFieldWrapper#getOopHandle()::: basic field wrapper get oop handle:::return->field->getOopHandle
BasicFieldWrapper#getNarrowOopHandle()::: basic field wrapper get narrow oop handle:::return->field->getNarrowOopHandle
BasicJBooleanField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.:::return->getJBoolean
BasicJBooleanField#getValue():::The field must be static and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.:::return->getJBoolean
BasicJByteField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.:::return->getJByte
BasicJByteField#getValue():::The field must be static and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.:::return->getJByte
BasicJCharField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java char, or a WrongTypeException will be thrown.:::return->getJChar
BasicJCharField#getValue():::The field must be static and the type of the field must be a       Java char, or a WrongTypeException will be thrown.:::return->getJChar
BasicJDoubleField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java double, or a WrongTypeException will be thrown.:::return->getJDouble
BasicJDoubleField#getValue():::The field must be static and the type of the field must be a       Java double, or a WrongTypeException will be thrown.:::return->getJDouble
BasicJFloatField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java float, or a WrongTypeException will be thrown.:::return->getJFloat
BasicJFloatField#getValue():::The field must be static and the type of the field must be a       Java float, or a WrongTypeException will be thrown.:::return->getJFloat
BasicJIntField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java int, or a WrongTypeException will be thrown.:::return->getJInt
BasicJIntField#getValue():::The field must be static and the type of the field must be a       Java int, or a WrongTypeException will be thrown.:::return->getJInt
BasicJLongField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java long, or a WrongTypeException will be thrown.:::return->getJLong
BasicJLongField#getValue():::The field must be static and the type of the field must be a       Java long, or a WrongTypeException will be thrown.:::return->getJLong
BasicJShortField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java short, or a WrongTypeException will be thrown.:::return->getJShort
BasicJShortField#getValue():::The field must be static and the type of the field must be a       Java short, or a WrongTypeException will be thrown.:::return->getJShort
BasicNarrowOopField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getNarrowOopHandle
BasicNarrowOopField#getValue():::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getNarrowOopHandle
BasicOopField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getOopHandle
BasicOopField#getValue():::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getOopHandle
BasicPointerType#isPointerType()::: basic pointer type is pointer type:::return
BasicPointerType#getTargetType()::: basic pointer type get target type:::return
BasicType#equals(Object)::: basic type equals:::if->return->if->return->arg->if->name->equals->return->return
BasicType#hashCode()::: basic type hash code:::return->name->hashCode
BasicType#toString()::: basic type to string:::return
BasicType#getName()::: basic type get name:::return
BasicType#setSuperclass(Type):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#getSuperclass()::: basic type get superclass:::return
BasicType#setSize(long):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#getSize()::: basic type get size:::return
BasicType#isCIntegerType():::Overridden by BasicCIntegerType:::return
BasicType#isCStringType()::: basic type is string type:::if->isPointerType->target->getTargetType->return->target->isCIntegerType->target->getName->equals->else->return
BasicType#isJavaPrimitiveType()::: basic type is java primitive type:::return
BasicType#setIsJavaPrimitiveType(boolean):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#isOopType()::: basic type is oop type:::return
BasicType#isPointerType():::Overridden by BasicPointerType:::return
BasicType#setIsOopType(boolean):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#getField(String, boolean, boolean)::: basic type get field:::field->if->nameToFieldMap->get->if->return->if->if->superclass->getField->if->throw->new->RuntimeException->return
BasicType#getField(String, boolean)::: basic type get field:::return->getField
BasicType#getField(String)::: basic type get field:::return->getField
BasicType#getField(String, Type, boolean)::: basic type get field:::res->getField->if->return->if->res->getType->equals->throw->res->getType->new->WrongTypeException->return
BasicType#getField(String, Type)::: basic type get field:::return->getField
BasicType#getFields():::The returned iterator's "remove" method must not be called:::return->fieldList->iterator->new->ConstIterator
BasicType#getJBooleanField(String)::: basic type get boolean field:::return->db->getJBooleanType->getField
BasicType#getJByteField(String)::: basic type get byte field:::return->db->getJByteType->getField
BasicType#getJCharField(String)::: basic type get char field:::return->db->getJCharType->getField
BasicType#getJDoubleField(String)::: basic type get double field:::return->db->getJDoubleType->getField
BasicType#getJFloatField(String)::: basic type get float field:::return->db->getJFloatType->getField
BasicType#getJIntField(String)::: basic type get int field:::return->db->getJIntType->getField
BasicType#getJLongField(String)::: basic type get long field:::return->db->getJLongType->getField
BasicType#getJShortField(String)::: basic type get short field:::return->db->getJShortType->getField
BasicType#getCIntegerField(String)::: basic type get integer field:::field->getField->if->field->getType->throw->field->getType->new->WrongTypeException->return
BasicType#getOopField(String)::: basic type get oop field:::field->getField->if->field->getType->isOopType->throw->field->getType->new->WrongTypeException->return
BasicType#getNarrowOopField(String)::: basic type get narrow oop field:::return->getOopField->new->BasicNarrowOopField
BasicType#getAddressField(String)::: basic type get address field:::field->getField->if->return->return->new->BasicAddressFieldWrapper
BasicType#addField(Field):::This method should only be used by the builder of the       TypeDataBase:::if->nameToFieldMap->field->getName->get->throw->field->getName->new->RuntimeException->nameToFieldMap->field->getName->put->fieldList->add
BasicType#removeField(Field):::This method should only be used by the builder of the       TypeDataBase:::if->nameToFieldMap->field->getName->remove->throw->field->getName->new->RuntimeException->fieldList->remove
BasicTypeDataBase#lookupType(String)::: basic type data base lookup type:::return->lookupType
BasicTypeDataBase#lookupType(String, boolean)::: basic type data base lookup type:::type->nameToTypeMap->get->if->throw->new->RuntimeException->return
BasicTypeDataBase#lookupIntConstant(String)::: basic type data base lookup int constant:::return->lookupIntConstant
BasicTypeDataBase#lookupIntConstant(String, boolean)::: basic type data base lookup int constant:::i->nameToIntConstantMap->get->if->if->throw->new->RuntimeException->return
BasicTypeDataBase#lookupLongConstant(String)::: basic type data base lookup long constant:::return->lookupLongConstant
BasicTypeDataBase#lookupLongConstant(String, boolean)::: basic type data base lookup long constant:::i->nameToLongConstantMap->get->if->if->throw->new->RuntimeException->return
BasicTypeDataBase#getJBooleanType()::: basic type data base get boolean type:::return
BasicTypeDataBase#getJByteType()::: basic type data base get byte type:::return
BasicTypeDataBase#getJCharType()::: basic type data base get char type:::return
BasicTypeDataBase#getJDoubleType()::: basic type data base get double type:::return
BasicTypeDataBase#getJFloatType()::: basic type data base get float type:::return
BasicTypeDataBase#getJIntType()::: basic type data base get int type:::return
BasicTypeDataBase#getJLongType()::: basic type data base get long type:::return
BasicTypeDataBase#getJShortType()::: basic type data base get short type:::return
BasicTypeDataBase#getAddressSize()::: basic type data base get address size:::return->machDesc->getAddressSize
BasicTypeDataBase#getOopSize()::: basic type data base get oop size:::return->VM->getVM->getOopSize
BasicTypeDataBase#vtblForType(Type)::: basic type data base vtbl for type:::vtblAddr->typeToVtbl->get->if->vtblAccess->getVtblForType->if->typeToVtbl->put->return
BasicTypeDataBase#addressTypeIsEqualToType(Address, Type)::: basic type data base address type is equal to type:::if->return->vtblAddr->vtblForType->if->if->println->return->curType->try->while->if->vtblAddr->addr->getAddressAt->equals->return->offset->curType->getSize->getAddressSize->if->return->if->vtblAddr->addr->getAddressAt->equals->return->getAddressSize->if->return->if->vtblAddr->addr->getAddressAt->equals->return->curType->getSuperclass->catch->if->println->e->printStackTrace->return->finally->if->type->getName->println->return
BasicTypeDataBase#findDynamicTypeForAddress(Address, Type)::: basic type data base find dynamic type for address:::if->vtblForType->throw->new->InternalError->loc1->addr->getAddressAt->if->VM->getVM->isSharingEnabled->cdsFileMapInfo->VM->getVM->getFileMapInfo->if->cdsFileMapInfo->inCopiedVtableSpace->return->cdsFileMapInfo->getTypeForVptrAddress->loc2->loc3->offset2->baseType->getSize->getAddressSize->getAddressSize->if->addr->getAddressAt->offset3->getAddressSize->if->addr->getAddressAt->loc2Match->loc3Match->for->iter->getTypes->iter->hasNext->if->return->if->return->return
BasicTypeDataBase#guessTypeForAddress(Address)::: basic type data base guess type for address:::for->iter->getTypes->iter->hasNext->return
BasicTypeDataBase#cIntegerTypeMaxValue(long, boolean)::: basic type data base c integer type max value:::return->machDesc->cIntegerTypeMaxValue
BasicTypeDataBase#cIntegerTypeMinValue(long, boolean)::: basic type data base c integer type min value:::return->machDesc->cIntegerTypeMinValue
BasicTypeDataBase#getTypes()::: basic type data base get types:::return->nameToTypeMap->values->iterator
BasicTypeDataBase#getIntConstants()::: basic type data base get int constants:::return->nameToIntConstantMap->keySet->iterator
BasicTypeDataBase#getLongConstants()::: basic type data base get long constants:::return->nameToLongConstantMap->keySet->iterator
BasicTypeDataBase#setJBooleanType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJByteType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJCharType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJDoubleType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJFloatType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJIntType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJLongType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJShortType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#addType(Type):::This method should only be used by the builder of the       TypeDataBase:::if->nameToTypeMap->type->getName->get->throw->type->getName->new->RuntimeException->nameToTypeMap->type->getName->put
BasicTypeDataBase#removeType(Type):::This method should only be used by the builder of the       TypeDataBase:::curType->nameToTypeMap->type->getName->get->if->throw->type->getName->new->RuntimeException->if->curType->equals->throw->type->getName->new->RuntimeException->nameToTypeMap->type->getName->remove
BasicTypeDataBase#addIntConstant(String, int):::This method should only be used by the builder of the       TypeDataBase:::if->nameToIntConstantMap->get->throw->new->RuntimeException->nameToIntConstantMap->new->Integer->put
BasicTypeDataBase#removeIntConstant(String):::This method should only be used by the builder of the       TypeDataBase:::curConstant->nameToIntConstantMap->get->if->throw->new->RuntimeException->nameToIntConstantMap->remove
BasicTypeDataBase#addLongConstant(String, long):::This method should only be used by the builder of the       TypeDataBase:::if->nameToLongConstantMap->get->throw->new->RuntimeException->nameToLongConstantMap->new->Long->put
BasicTypeDataBase#removeLongConstant(String):::This method should only be used by the builder of the       TypeDataBase:::curConstant->nameToLongConstantMap->get->if->throw->new->RuntimeException->nameToLongConstantMap->remove
BasicVtblAccess#getVtblForType(Type)::: basic vtbl access get vtbl for type:::if->return->result->typeToVtblMap->get->if->return->if->return->vtblSymbol->vtblSymbolForType->if->typeToVtblMap->put->return->for->i->typeToVtblMap->put->return
BasicVtblAccess#clearCaches()::: basic vtbl access clear caches:::typeToVtblMap->clear
BasicVtblAccess#vtblSymbolForType(Type)::: basic vtbl access vtbl symbol for type:::
VtblAccess#getVtblForType(Type):::This is the necessarily platform-specific implementation:::
VtblAccess#clearCaches():::Clear any cached values from symbol lookups in the target       process:::

sun.jvm.hotspot.types.basic.BasicAddressFieldWrapper#getValue(Address)->Address::: basic address field wrapper get value
sun.jvm.hotspot.types.basic.BasicAddressFieldWrapper#getValue()->Address::: basic address field wrapper get value
sun.jvm.hotspot.types.basic.BasicCIntegerField#isUnsigned()->boolean::: basic integer field is unsigned
sun.jvm.hotspot.types.basic.BasicCIntegerField#getValue(Address)->long:::The field must be nonstatic and of integer type, or a       WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicCIntegerField#getValue()->long:::The field must be static and of integer type, or a       WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicCIntegerType#equals(Object)->boolean::: basic integer type equals
sun.jvm.hotspot.types.basic.BasicCIntegerType#toString()->String::: basic integer type to string
sun.jvm.hotspot.types.basic.BasicCIntegerType#isCIntegerType()->boolean::: basic integer type is integer type
sun.jvm.hotspot.types.basic.BasicCIntegerType#isUnsigned()->boolean::: basic integer type is unsigned
sun.jvm.hotspot.types.basic.BasicCIntegerType#setIsUnsigned(boolean)->void:::This should be called at most once, and only by the builder of       the TypeDataBase
sun.jvm.hotspot.types.basic.BasicCIntegerType#maxValue()->long::: basic integer type max value
sun.jvm.hotspot.types.basic.BasicCIntegerType#minValue()->long::: basic integer type min value
sun.jvm.hotspot.types.basic.BasicField#getName()->String::: basic field get name
sun.jvm.hotspot.types.basic.BasicField#getType()->Type::: basic field get type
sun.jvm.hotspot.types.basic.BasicField#getSize()->long::: basic field get size
sun.jvm.hotspot.types.basic.BasicField#isStatic()->boolean::: basic field is static
sun.jvm.hotspot.types.basic.BasicField#getOffset()->long::: basic field get offset
sun.jvm.hotspot.types.basic.BasicField#getStaticFieldAddress()->Address::: basic field get static field address
sun.jvm.hotspot.types.basic.BasicField#getJBoolean(Address)->boolean::: basic field get boolean
sun.jvm.hotspot.types.basic.BasicField#getJByte(Address)->byte::: basic field get byte
sun.jvm.hotspot.types.basic.BasicField#getJChar(Address)->char::: basic field get char
sun.jvm.hotspot.types.basic.BasicField#getJDouble(Address)->double::: basic field get double
sun.jvm.hotspot.types.basic.BasicField#getJFloat(Address)->float::: basic field get float
sun.jvm.hotspot.types.basic.BasicField#getJInt(Address)->int::: basic field get int
sun.jvm.hotspot.types.basic.BasicField#getJLong(Address)->long::: basic field get long
sun.jvm.hotspot.types.basic.BasicField#getJShort(Address)->short::: basic field get short
sun.jvm.hotspot.types.basic.BasicField#getCInteger(Address, CIntegerType)->long::: basic field get integer
sun.jvm.hotspot.types.basic.BasicField#getAddress(Address)->Address::: basic field get address
sun.jvm.hotspot.types.basic.BasicField#getOopHandle(Address)->OopHandle::: basic field get oop handle
sun.jvm.hotspot.types.basic.BasicField#getNarrowOopHandle(Address)->OopHandle::: basic field get narrow oop handle
sun.jvm.hotspot.types.basic.BasicField#getJBoolean()->boolean::: basic field get boolean
sun.jvm.hotspot.types.basic.BasicField#getJByte()->byte::: basic field get byte
sun.jvm.hotspot.types.basic.BasicField#getJChar()->char::: basic field get char
sun.jvm.hotspot.types.basic.BasicField#getJDouble()->double::: basic field get double
sun.jvm.hotspot.types.basic.BasicField#getJFloat()->float::: basic field get float
sun.jvm.hotspot.types.basic.BasicField#getJInt()->int::: basic field get int
sun.jvm.hotspot.types.basic.BasicField#getJLong()->long::: basic field get long
sun.jvm.hotspot.types.basic.BasicField#getJShort()->short::: basic field get short
sun.jvm.hotspot.types.basic.BasicField#getCInteger(CIntegerType)->long::: basic field get integer
sun.jvm.hotspot.types.basic.BasicField#getAddress()->Address::: basic field get address
sun.jvm.hotspot.types.basic.BasicField#getOopHandle()->OopHandle::: basic field get oop handle
sun.jvm.hotspot.types.basic.BasicField#getNarrowOopHandle()->OopHandle::: basic field get narrow oop handle
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getName()->String::: basic field wrapper get name
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getType()->Type::: basic field wrapper get type
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getSize()->long::: basic field wrapper get size
sun.jvm.hotspot.types.basic.BasicFieldWrapper#isStatic()->boolean::: basic field wrapper is static
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getOffset()->long::: basic field wrapper get offset
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getStaticFieldAddress()->Address::: basic field wrapper get static field address
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJBoolean(Address)->boolean::: basic field wrapper get boolean
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJByte(Address)->byte::: basic field wrapper get byte
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJChar(Address)->char::: basic field wrapper get char
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJDouble(Address)->double::: basic field wrapper get double
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJFloat(Address)->float::: basic field wrapper get float
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJInt(Address)->int::: basic field wrapper get int
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJLong(Address)->long::: basic field wrapper get long
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJShort(Address)->short::: basic field wrapper get short
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getCInteger(Address, CIntegerType)->long::: basic field wrapper get integer
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getAddress(Address)->Address::: basic field wrapper get address
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getOopHandle(Address)->OopHandle::: basic field wrapper get oop handle
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getNarrowOopHandle(Address)->OopHandle::: basic field wrapper get narrow oop handle
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJBoolean()->boolean::: basic field wrapper get boolean
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJByte()->byte::: basic field wrapper get byte
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJChar()->char::: basic field wrapper get char
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJDouble()->double::: basic field wrapper get double
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJFloat()->float::: basic field wrapper get float
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJInt()->int::: basic field wrapper get int
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJLong()->long::: basic field wrapper get long
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getJShort()->short::: basic field wrapper get short
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getCInteger(CIntegerType)->long::: basic field wrapper get integer
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getAddress()->Address::: basic field wrapper get address
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getOopHandle()->OopHandle::: basic field wrapper get oop handle
sun.jvm.hotspot.types.basic.BasicFieldWrapper#getNarrowOopHandle()->OopHandle::: basic field wrapper get narrow oop handle
sun.jvm.hotspot.types.basic.BasicJBooleanField#getValue(Address)->boolean:::The field must be nonstatic and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJBooleanField#getValue()->boolean:::The field must be static and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJByteField#getValue(Address)->byte:::The field must be nonstatic and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJByteField#getValue()->byte:::The field must be static and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJCharField#getValue(Address)->char:::The field must be nonstatic and the type of the field must be a       Java char, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJCharField#getValue()->char:::The field must be static and the type of the field must be a       Java char, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJDoubleField#getValue(Address)->double:::The field must be nonstatic and the type of the field must be a       Java double, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJDoubleField#getValue()->double:::The field must be static and the type of the field must be a       Java double, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJFloatField#getValue(Address)->float:::The field must be nonstatic and the type of the field must be a       Java float, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJFloatField#getValue()->float:::The field must be static and the type of the field must be a       Java float, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJIntField#getValue(Address)->int:::The field must be nonstatic and the type of the field must be a       Java int, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJIntField#getValue()->int:::The field must be static and the type of the field must be a       Java int, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJLongField#getValue(Address)->long:::The field must be nonstatic and the type of the field must be a       Java long, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJLongField#getValue()->long:::The field must be static and the type of the field must be a       Java long, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJShortField#getValue(Address)->short:::The field must be nonstatic and the type of the field must be a       Java short, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicJShortField#getValue()->short:::The field must be static and the type of the field must be a       Java short, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicNarrowOopField#getValue(Address)->OopHandle:::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicNarrowOopField#getValue()->OopHandle:::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicOopField#getValue(Address)->OopHandle:::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicOopField#getValue()->OopHandle:::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.
sun.jvm.hotspot.types.basic.BasicPointerType#isPointerType()->boolean::: basic pointer type is pointer type
sun.jvm.hotspot.types.basic.BasicPointerType#getTargetType()->Type::: basic pointer type get target type
sun.jvm.hotspot.types.basic.BasicType#equals(Object)->boolean::: basic type equals
sun.jvm.hotspot.types.basic.BasicType#hashCode()->int::: basic type hash code
sun.jvm.hotspot.types.basic.BasicType#toString()->String::: basic type to string
sun.jvm.hotspot.types.basic.BasicType#getName()->String::: basic type get name
sun.jvm.hotspot.types.basic.BasicType#setSuperclass(Type)->void:::This should only be called at most once, and only by the builder       of the type database
sun.jvm.hotspot.types.basic.BasicType#getSuperclass()->Type::: basic type get superclass
sun.jvm.hotspot.types.basic.BasicType#setSize(long)->void:::This should only be called at most once, and only by the builder       of the type database
sun.jvm.hotspot.types.basic.BasicType#getSize()->long::: basic type get size
sun.jvm.hotspot.types.basic.BasicType#isCIntegerType()->boolean:::Overridden by BasicCIntegerType
sun.jvm.hotspot.types.basic.BasicType#isCStringType()->boolean::: basic type is string type
sun.jvm.hotspot.types.basic.BasicType#isJavaPrimitiveType()->boolean::: basic type is java primitive type
sun.jvm.hotspot.types.basic.BasicType#setIsJavaPrimitiveType(boolean)->void:::This should only be called at most once, and only by the builder       of the type database
sun.jvm.hotspot.types.basic.BasicType#isOopType()->boolean::: basic type is oop type
sun.jvm.hotspot.types.basic.BasicType#isPointerType()->boolean:::Overridden by BasicPointerType
sun.jvm.hotspot.types.basic.BasicType#setIsOopType(boolean)->void:::This should only be called at most once, and only by the builder       of the type database
sun.jvm.hotspot.types.basic.BasicType#getField(String, boolean, boolean)->Field::: basic type get field
sun.jvm.hotspot.types.basic.BasicType#getField(String, boolean)->Field::: basic type get field
sun.jvm.hotspot.types.basic.BasicType#getField(String)->Field::: basic type get field
sun.jvm.hotspot.types.basic.BasicType#getField(String, Type, boolean)->Field::: basic type get field
sun.jvm.hotspot.types.basic.BasicType#getField(String, Type)->Field::: basic type get field
sun.jvm.hotspot.types.basic.BasicType#getFields()->Iterator:::The returned iterator's "remove" method must not be called
sun.jvm.hotspot.types.basic.BasicType#getJBooleanField(String)->JBooleanField::: basic type get boolean field
sun.jvm.hotspot.types.basic.BasicType#getJByteField(String)->JByteField::: basic type get byte field
sun.jvm.hotspot.types.basic.BasicType#getJCharField(String)->JCharField::: basic type get char field
sun.jvm.hotspot.types.basic.BasicType#getJDoubleField(String)->JDoubleField::: basic type get double field
sun.jvm.hotspot.types.basic.BasicType#getJFloatField(String)->JFloatField::: basic type get float field
sun.jvm.hotspot.types.basic.BasicType#getJIntField(String)->JIntField::: basic type get int field
sun.jvm.hotspot.types.basic.BasicType#getJLongField(String)->JLongField::: basic type get long field
sun.jvm.hotspot.types.basic.BasicType#getJShortField(String)->JShortField::: basic type get short field
sun.jvm.hotspot.types.basic.BasicType#getCIntegerField(String)->CIntegerField::: basic type get integer field
sun.jvm.hotspot.types.basic.BasicType#getOopField(String)->OopField::: basic type get oop field
sun.jvm.hotspot.types.basic.BasicType#getNarrowOopField(String)->NarrowOopField::: basic type get narrow oop field
sun.jvm.hotspot.types.basic.BasicType#getAddressField(String)->AddressField::: basic type get address field
sun.jvm.hotspot.types.basic.BasicType#addField(Field)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicType#removeField(Field)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupType(String)->Type::: basic type data base lookup type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupType(String, boolean)->Type::: basic type data base lookup type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupIntConstant(String)->Integer::: basic type data base lookup int constant
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupIntConstant(String, boolean)->Integer::: basic type data base lookup int constant
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupLongConstant(String)->Long::: basic type data base lookup long constant
sun.jvm.hotspot.types.basic.BasicTypeDataBase#lookupLongConstant(String, boolean)->Long::: basic type data base lookup long constant
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJBooleanType()->Type::: basic type data base get boolean type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJByteType()->Type::: basic type data base get byte type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJCharType()->Type::: basic type data base get char type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJDoubleType()->Type::: basic type data base get double type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJFloatType()->Type::: basic type data base get float type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJIntType()->Type::: basic type data base get int type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJLongType()->Type::: basic type data base get long type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getJShortType()->Type::: basic type data base get short type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getAddressSize()->long::: basic type data base get address size
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getOopSize()->long::: basic type data base get oop size
sun.jvm.hotspot.types.basic.BasicTypeDataBase#addressTypeIsEqualToType(Address, Type)->boolean::: basic type data base address type is equal to type
sun.jvm.hotspot.types.basic.BasicTypeDataBase#findDynamicTypeForAddress(Address, Type)->Type::: basic type data base find dynamic type for address
sun.jvm.hotspot.types.basic.BasicTypeDataBase#guessTypeForAddress(Address)->Type::: basic type data base guess type for address
sun.jvm.hotspot.types.basic.BasicTypeDataBase#cIntegerTypeMaxValue(long, boolean)->long::: basic type data base c integer type max value
sun.jvm.hotspot.types.basic.BasicTypeDataBase#cIntegerTypeMinValue(long, boolean)->long::: basic type data base c integer type min value
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getTypes()->Iterator::: basic type data base get types
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getIntConstants()->Iterator::: basic type data base get int constants
sun.jvm.hotspot.types.basic.BasicTypeDataBase#getLongConstants()->Iterator::: basic type data base get long constants
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJBooleanType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJByteType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJCharType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJDoubleType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJFloatType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJIntType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJLongType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#setJShortType(Type)->void:::This method should only be called by the builder of the       TypeDataBase and at most once
sun.jvm.hotspot.types.basic.BasicTypeDataBase#addType(Type)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#removeType(Type)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#addIntConstant(String, int)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#removeIntConstant(String)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#addLongConstant(String, long)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicTypeDataBase#removeLongConstant(String)->void:::This method should only be used by the builder of the       TypeDataBase
sun.jvm.hotspot.types.basic.BasicVtblAccess#getVtblForType(Type)->Address::: basic vtbl access get vtbl for type
sun.jvm.hotspot.types.basic.BasicVtblAccess#clearCaches()->void::: basic vtbl access clear caches
sun.jvm.hotspot.types.basic.BasicVtblAccess#vtblSymbolForType(Type)->String::: basic vtbl access vtbl symbol for type
sun.jvm.hotspot.types.basic.VtblAccess#getVtblForType(Type)->Address:::This is the necessarily platform-specific implementation
sun.jvm.hotspot.types.basic.VtblAccess#clearCaches()->void:::Clear any cached values from symbol lookups in the target       process

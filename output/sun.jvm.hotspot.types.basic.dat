BasicCIntegerField#getValue(Address):::The field must be nonstatic and of integer type, or a       WrongTypeException will be thrown.:::return->getCInteger
BasicCIntegerField#getValue():::The field must be static and of integer type, or a       WrongTypeException will be thrown.:::return->getCInteger
BasicCIntegerType#setIsUnsigned(boolean):::This should be called at most once, and only by the builder of       the TypeDataBase:::
BasicJBooleanField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.:::return->getJBoolean
BasicJBooleanField#getValue():::The field must be static and the type of the field must be a       Java boolean, or a WrongTypeException will be thrown.:::return->getJBoolean
BasicJByteField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.:::return->getJByte
BasicJByteField#getValue():::The field must be static and the type of the field must be a       Java byte, or a WrongTypeException will be thrown.:::return->getJByte
BasicJCharField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java char, or a WrongTypeException will be thrown.:::return->getJChar
BasicJCharField#getValue():::The field must be static and the type of the field must be a       Java char, or a WrongTypeException will be thrown.:::return->getJChar
BasicJDoubleField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java double, or a WrongTypeException will be thrown.:::return->getJDouble
BasicJDoubleField#getValue():::The field must be static and the type of the field must be a       Java double, or a WrongTypeException will be thrown.:::return->getJDouble
BasicJFloatField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java float, or a WrongTypeException will be thrown.:::return->getJFloat
BasicJFloatField#getValue():::The field must be static and the type of the field must be a       Java float, or a WrongTypeException will be thrown.:::return->getJFloat
BasicJIntField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java int, or a WrongTypeException will be thrown.:::return->getJInt
BasicJIntField#getValue():::The field must be static and the type of the field must be a       Java int, or a WrongTypeException will be thrown.:::return->getJInt
BasicJLongField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java long, or a WrongTypeException will be thrown.:::return->getJLong
BasicJLongField#getValue():::The field must be static and the type of the field must be a       Java long, or a WrongTypeException will be thrown.:::return->getJLong
BasicJShortField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java short, or a WrongTypeException will be thrown.:::return->getJShort
BasicJShortField#getValue():::The field must be static and the type of the field must be a       Java short, or a WrongTypeException will be thrown.:::return->getJShort
BasicNarrowOopField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getNarrowOopHandle
BasicNarrowOopField#getValue():::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getNarrowOopHandle
BasicOopField#getValue(Address):::The field must be nonstatic and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getOopHandle
BasicOopField#getValue():::The field must be static and the type of the field must be a       Java oop, or a WrongTypeException will be thrown.:::return->getOopHandle
BasicType#setSuperclass(Type):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#setSize(long):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#isCIntegerType():::Overridden by BasicCIntegerType:::return
BasicType#setIsJavaPrimitiveType(boolean):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#isPointerType():::Overridden by BasicPointerType:::return
BasicType#setIsOopType(boolean):::This should only be called at most once, and only by the builder       of the type database:::
BasicType#getFields():::The returned iterator's "remove" method must not be called:::return->fieldList->iterator->new->ConstIterator
BasicType#addField(Field):::This method should only be used by the builder of the       TypeDataBase:::if->nameToFieldMap->field->getName->get->throw->field->getName->new->RuntimeException->nameToFieldMap->field->getName->put->fieldList->add
BasicType#removeField(Field):::This method should only be used by the builder of the       TypeDataBase:::if->nameToFieldMap->field->getName->remove->throw->field->getName->new->RuntimeException->fieldList->remove
BasicTypeDataBase#setJBooleanType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJByteType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJCharType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJDoubleType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJFloatType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJIntType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJLongType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#setJShortType(Type):::This method should only be called by the builder of the       TypeDataBase and at most once:::
BasicTypeDataBase#addType(Type):::This method should only be used by the builder of the       TypeDataBase:::if->nameToTypeMap->type->getName->get->throw->type->getName->new->RuntimeException->nameToTypeMap->type->getName->put
BasicTypeDataBase#removeType(Type):::This method should only be used by the builder of the       TypeDataBase:::curType->nameToTypeMap->type->getName->get->if->throw->type->getName->new->RuntimeException->if->curType->equals->throw->type->getName->new->RuntimeException->nameToTypeMap->type->getName->remove
BasicTypeDataBase#addIntConstant(String, int):::This method should only be used by the builder of the       TypeDataBase:::if->nameToIntConstantMap->get->throw->new->RuntimeException->nameToIntConstantMap->new->Integer->put
BasicTypeDataBase#removeIntConstant(String):::This method should only be used by the builder of the       TypeDataBase:::curConstant->nameToIntConstantMap->get->if->throw->new->RuntimeException->nameToIntConstantMap->remove
BasicTypeDataBase#addLongConstant(String, long):::This method should only be used by the builder of the       TypeDataBase:::if->nameToLongConstantMap->get->throw->new->RuntimeException->nameToLongConstantMap->new->Long->put
BasicTypeDataBase#removeLongConstant(String):::This method should only be used by the builder of the       TypeDataBase:::curConstant->nameToLongConstantMap->get->if->throw->new->RuntimeException->nameToLongConstantMap->remove
VtblAccess#getVtblForType(Type):::This is the necessarily platform-specific implementation:::
VtblAccess#clearCaches():::Clear any cached values from symbol lookups in the target       process:::

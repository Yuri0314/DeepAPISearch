AMD64AddressLowering#improve(StructuredGraph, DebugContext, AMD64AddressNode, boolean, boolean):::Tries to optimize addresses so that they match the AMD64-specific addressing mode better (base + index * scale + displacement).:::newBase->ret->getBase->improveInput->if->ret->getBase->ret->setBase->return->newIdx->ret->getIndex->ret->getScale->improveInput->if->ret->getIndex->ret->setIndex->return->if->ret->getIndex->shift->ret->getIndex->if->shift->getY->isConstant->amount->ret->getScale->shift->getY->asJavaConstant->asInt->scale->Scale->fromShift->if->ret->shift->getX->setIndex->ret->setScale->return->if->ret->getScale->if->ret->getIndex->ret->getBase->add->ret->getBase->ret->add->getX->setBase->ret->add->getY->considerNegation->setIndex->return->if->ret->getBase->ret->getIndex->add->ret->getIndex->ret->add->getX->considerNegation->setBase->ret->add->getY->setIndex->return->if->ret->getBase->ret->getIndex->tmp->ret->getBase->ret->ret->getIndex->considerNegation->setBase->ret->considerNegation->setIndex->return->return->improveNegation
AMD64LIRGenerator#canStoreConstant(JavaConstant):::Checks whether the supplied constant can be used without loading it into a register for store operations, i.e., on the right hand side of a memory access.:::switch->c->getJavaKind->return->NumUtil->c->asLong->isInt->return->return->c->isNull->return
AMD64LIRGenerator#toRegisterKind(K):::The AMD64 backend only uses DWORD and QWORD values in registers because of a performance penalty when accessing WORD or BYTE registers:::switch->kind->getPlatformKind->return->kind->changeType->return
AMD64LIRGenerator#getVMPageSize():::Return a conservative estimate of the page size for use by the String.indexOf intrinsic.:::return
AMD64LIRGenerator#getMaxVectorSize():::Return the maximum size of vector registers used in SSE/AVX instructions.:::return

org.graalvm.compiler.core.amd64.AMD64NodeMatchRules_MatchStatementSet#forClass()->Class::: d64 node match rules_ match statement set for class
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules_MatchStatementSet#statements()->List::: d64 node match rules_ match statement set statements
org.graalvm.compiler.core.amd64.AMD64AddressLowering#lower(ValueNode, ValueNode)->AddressNode::: d64 address lowering lower
org.graalvm.compiler.core.amd64.AMD64AddressLowering#improve(StructuredGraph, DebugContext, AMD64AddressNode, boolean, boolean)->boolean:::Tries to optimize addresses so that they match the AMD64-specific addressing mode better (base + index * scale + displacement).
org.graalvm.compiler.core.amd64.AMD64AddressLowering#updateDisplacement(AMD64AddressNode, long, boolean)->boolean::: d64 address lowering update displacement
org.graalvm.compiler.core.amd64.AMD64AddressNode#canonicalizeIndex(SimplifierTool)->void::: d64 address node canonicalize index
org.graalvm.compiler.core.amd64.AMD64AddressNode#generate(NodeLIRBuilderTool)->void::: d64 address node generate
org.graalvm.compiler.core.amd64.AMD64AddressNode#getBase()->ValueNode::: d64 address node get base
org.graalvm.compiler.core.amd64.AMD64AddressNode#setBase(ValueNode)->void::: d64 address node set base
org.graalvm.compiler.core.amd64.AMD64AddressNode#getIndex()->ValueNode::: d64 address node get index
org.graalvm.compiler.core.amd64.AMD64AddressNode#setIndex(ValueNode)->void::: d64 address node set index
org.graalvm.compiler.core.amd64.AMD64AddressNode#getScale()->Scale::: d64 address node get scale
org.graalvm.compiler.core.amd64.AMD64AddressNode#setScale(Scale)->void::: d64 address node set scale
org.graalvm.compiler.core.amd64.AMD64AddressNode#getDisplacement()->int::: d64 address node get displacement
org.graalvm.compiler.core.amd64.AMD64AddressNode#setDisplacement(int)->void::: d64 address node set displacement
org.graalvm.compiler.core.amd64.AMD64AddressNode#getMaxConstantDisplacement()->long::: d64 address node get max constant displacement
org.graalvm.compiler.core.amd64.AMD64AddressNode#simplify(SimplifierTool)->void::: d64 address node simplify
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitNegate(Value)->Variable::: d64 arithmetic generator emit negate
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitNot(Value)->Variable::: d64 arithmetic generator emit not
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#isNumericInteger(PlatformKind)->boolean::: d64 arithmetic generator is numeric integer
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitAdd(LIRKind, Value, Value, boolean)->Variable::: d64 arithmetic generator emit add
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitSub(LIRKind, Value, Value, boolean)->Variable::: d64 arithmetic generator emit sub
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMul(Value, Value, boolean)->Variable::: d64 arithmetic generator emit mul
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMulHigh(Value, Value)->Value::: d64 arithmetic generator emit mul high
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitUMulHigh(Value, Value)->Value::: d64 arithmetic generator emit mul high
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBinaryMemory(VexRVMOp, OperandSize, AllocatableValue, AMD64AddressValue, LIRFrameState)->Value::: d64 arithmetic generator emit binary memory
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBinaryMemory(AMD64RMOp, OperandSize, AllocatableValue, AMD64AddressValue, LIRFrameState)->Value::: d64 arithmetic generator emit binary memory
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitConvertMemoryOp(PlatformKind, AMD64RMOp, OperandSize, AMD64AddressValue, LIRFrameState)->Value::: d64 arithmetic generator emit convert memory op
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitZeroExtendMemory(AMD64Kind, int, AMD64AddressValue, LIRFrameState)->Value::: d64 arithmetic generator emit zero extend memory
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitSignedDivRem(Value, Value, LIRFrameState)->Value[]::: d64 arithmetic generator emit signed div rem
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitUnsignedDivRem(Value, Value, LIRFrameState)->Value[]::: d64 arithmetic generator emit unsigned div rem
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitDiv(Value, Value, LIRFrameState)->Value::: d64 arithmetic generator emit div
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitRem(Value, Value, LIRFrameState)->Value::: d64 arithmetic generator emit rem
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitUDiv(Value, Value, LIRFrameState)->Variable::: d64 arithmetic generator emit div
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitURem(Value, Value, LIRFrameState)->Variable::: d64 arithmetic generator emit rem
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitAnd(Value, Value)->Variable::: d64 arithmetic generator emit and
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitOr(Value, Value)->Variable::: d64 arithmetic generator emit or
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitXor(Value, Value)->Variable::: d64 arithmetic generator emit xor
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitShl(Value, Value)->Variable::: d64 arithmetic generator emit shl
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitShr(Value, Value)->Variable::: d64 arithmetic generator emit shr
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitUShr(Value, Value)->Variable::: d64 arithmetic generator emit shr
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitRol(Value, Value)->Variable::: d64 arithmetic generator emit rol
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitRor(Value, Value)->Variable::: d64 arithmetic generator emit ror
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitReinterpret(LIRKind, Value)->Value::: d64 arithmetic generator emit reinterpret
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitFloatConvert(FloatConvert, Value)->Value::: d64 arithmetic generator emit float convert
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitNarrow(Value, int)->Value::: d64 arithmetic generator emit narrow
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitSignExtend(Value, int, int)->Value::: d64 arithmetic generator emit sign extend
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitZeroExtend(Value, int, int)->Value::: d64 arithmetic generator emit zero extend
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBitCount(Value)->Variable::: d64 arithmetic generator emit bit count
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBitScanForward(Value)->Variable::: d64 arithmetic generator emit bit scan forward
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBitScanReverse(Value)->Variable::: d64 arithmetic generator emit bit scan reverse
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitFusedMultiplyAdd(Value, Value, Value)->Variable::: d64 arithmetic generator emit fused multiply add
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitCountLeadingZeros(Value)->Value::: d64 arithmetic generator emit count leading zeros
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitCountTrailingZeros(Value)->Value::: d64 arithmetic generator emit count trailing zeros
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitLogicalAndNot(Value, Value)->Value::: d64 arithmetic generator emit logical and not
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitLowestSetIsolatedBit(Value)->Value::: d64 arithmetic generator emit lowest set isolated bit
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitGetMaskUpToLowestSetBit(Value)->Value::: d64 arithmetic generator emit get mask up to lowest set bit
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitResetLowestSetBit(Value)->Value::: d64 arithmetic generator emit reset lowest set bit
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathAbs(Value)->Value::: d64 arithmetic generator emit math abs
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathSqrt(Value)->Value::: d64 arithmetic generator emit math sqrt
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathLog(Value, boolean)->Value::: d64 arithmetic generator emit math log
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathCos(Value)->Value::: d64 arithmetic generator emit math cos
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathSin(Value)->Value::: d64 arithmetic generator emit math sin
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathTan(Value)->Value::: d64 arithmetic generator emit math tan
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathExp(Value)->Value::: d64 arithmetic generator emit math exp
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitMathPow(Value, Value)->Value::: d64 arithmetic generator emit math pow
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitZeroMemory(Value, Value)->void::: d64 arithmetic generator emit zero memory
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#getAMD64LIRGen()->AMD64LIRGenerator::: d64 arithmetic generator get d64 gen
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitLoad(LIRKind, Value, LIRFrameState)->Variable::: d64 arithmetic generator emit load
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitStoreConst(AMD64Kind, AMD64AddressValue, ConstantValue, LIRFrameState)->void::: d64 arithmetic generator emit store const
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitStore(AMD64Kind, AMD64AddressValue, AllocatableValue, LIRFrameState)->void::: d64 arithmetic generator emit store
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitStore(ValueKind, Value, Value, LIRFrameState)->void::: d64 arithmetic generator emit store
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitCompareOp(AMD64Kind, Variable, Value)->void::: d64 arithmetic generator emit compare op
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitRound(Value, RoundingMode)->Value::: d64 arithmetic generator emit round
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#supportAVX()->boolean::: d64 arithmetic generator support x
org.graalvm.compiler.core.amd64.AMD64ArithmeticLIRGenerator#emitBinary(LIRKind, VexRVMOp, Value, Value)->Variable::: d64 arithmetic generator emit binary
org.graalvm.compiler.core.amd64.AMD64CompressAddressLowering#improve(StructuredGraph, DebugContext, AMD64AddressNode, boolean, boolean)->boolean::: d64 compress address lowering improve
org.graalvm.compiler.core.amd64.AMD64CompressAddressLowering#improveUncompression(AMD64AddressNode, CompressionNode, ValueNode)->boolean::: d64 compress address lowering improve uncompression
org.graalvm.compiler.core.amd64.AMD64CompressAddressLowering.HeapBaseNode#generate(NodeLIRBuilderTool)->void::: heap base node generate
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#canStoreConstant(JavaConstant)->boolean:::Checks whether the supplied constant can be used without loading it into a register for store operations, i.e., on the right hand side of a memory access.
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#zapValueForKind(PlatformKind)->JavaConstant::: d64 generator zap value for kind
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#asAddressValue(Value)->AMD64AddressValue::: d64 generator as address value
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitAddress(AllocatableValue)->Variable::: d64 generator emit address
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#toRegisterKind(K)->K:::The AMD64 backend only uses DWORD and QWORD values in registers because of a performance penalty when accessing WORD or BYTE registers
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitLogicCompareAndSwap(LIRKind, Value, Value, Value, Value, Value)->Variable::: d64 generator emit logic compare and swap
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitValueCompareAndSwap(LIRKind, Value, Value, Value)->Value::: d64 generator emit value compare and swap
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitCompareAndSwapBranch(ValueKind, AMD64AddressValue, Value, Value, Condition, LabelRef, LabelRef, double)->void::: d64 generator emit compare and swap branch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitAtomicReadAndAdd(Value, ValueKind, Value)->Value::: d64 generator emit atomic read and add
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitAtomicReadAndWrite(Value, ValueKind, Value)->Value::: d64 generator emit atomic read and write
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitNullCheck(Value, LIRFrameState)->void::: d64 generator emit null check
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitJump(LabelRef)->void::: d64 generator emit jump
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)->void::: d64 generator emit compare branch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitCompareBranchMemory(AMD64Kind, Value, AMD64AddressValue, LIRFrameState, Condition, boolean, LabelRef, LabelRef, double)->void::: d64 generator emit compare branch memory
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitOverflowCheckBranch(LabelRef, LabelRef, LIRKind, double)->void::: d64 generator emit overflow check branch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitIntegerTestBranch(Value, Value, LabelRef, LabelRef, double)->void::: d64 generator emit integer test branch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitConditionalMove(PlatformKind, Value, Value, Condition, boolean, Value, Value)->Variable::: d64 generator emit conditional move
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitIntegerTestMove(Value, Value, Value, Value)->Variable::: d64 generator emit integer test move
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitCompareMemoryConOp(OperandSize, ConstantValue, AMD64AddressValue, LIRFrameState)->boolean::: d64 generator emit compare memory con op
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitMembar(int)->void::: d64 generator emit membar
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitCCall(long, CallingConvention, Value[], int)->void::: d64 generator emit call
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState)->void::: d64 generator emit foreign call op
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitByteSwap(Value)->Variable::: d64 generator emit byte swap
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitArrayCompareTo(JavaKind, JavaKind, Value, Value, Value, Value)->Variable::: d64 generator emit array compare to
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitArrayEquals(JavaKind, Value, Value, Value, int, boolean)->Variable::: d64 generator emit array equals
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitArrayEquals(JavaKind, JavaKind, Value, Value, Value, int, boolean)->Variable::: d64 generator emit array equals
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#getVMPageSize()->int:::Return a conservative estimate of the page size for use by the String.indexOf intrinsic.
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#getMaxVectorSize()->int:::Return the maximum size of vector registers used in SSE/AVX instructions.
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitArrayIndexOf(JavaKind, JavaKind, boolean, Value, Value, Value, Value...)->Variable::: d64 generator emit array index of
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitStringLatin1Inflate(Value, Value, Value)->void::: d64 generator emit string latin1 inflate
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitStringUTF16Compress(Value, Value, Value)->Variable::: d64 generator emit string f16 compress
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitReturn(JavaKind, Value)->void::: d64 generator emit return
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#createStrategySwitchOp(SwitchStrategy, LabelRef[], LabelRef, Variable, AllocatableValue)->StrategySwitchOp::: d64 generator create strategy switch op
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitStrategySwitch(SwitchStrategy, Variable, LabelRef[], LabelRef)->void::: d64 generator emit strategy switch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitTableSwitch(int, LabelRef, LabelRef[], Value)->void::: d64 generator emit table switch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#hasherFor(JavaConstant[], double)->Optional::: d64 generator hasher for
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitHashTableSwitch(Hasher, JavaConstant[], LabelRef, LabelRef[], Value)->void::: d64 generator emit hash table switch
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitPause()->void::: d64 generator emit pause
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#createZapRegisters(Register[], JavaConstant[])->SaveRegistersOp::: d64 generator create zap registers
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#createZapArgumentSpace(StackSlot[], JavaConstant[])->LIRInstruction::: d64 generator create zap argument space
org.graalvm.compiler.core.amd64.AMD64LIRGenerator#emitSpeculationFence()->void::: d64 generator emit speculation fence
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getIntegerKind(int)->LIRKind::: d64 kind tool get integer kind
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getFloatingKind(int)->LIRKind::: d64 kind tool get floating kind
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getObjectKind()->LIRKind::: d64 kind tool get object kind
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getWordKind()->LIRKind::: d64 kind tool get word kind
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getNarrowOopKind()->LIRKind::: d64 kind tool get narrow oop kind
org.graalvm.compiler.core.amd64.AMD64LIRKindTool#getNarrowPointerKind()->LIRKind::: d64 kind tool get narrow pointer kind
org.graalvm.compiler.core.amd64.AMD64LoweringProviderMixin#smallestCompareWidth()->Integer::: d64 lowering provider mixin smallest compare width
org.graalvm.compiler.core.amd64.AMD64LoweringProviderMixin#supportBulkZeroing()->boolean::: d64 lowering provider mixin support bulk zeroing
org.graalvm.compiler.core.amd64.AMD64MoveFactory#canInlineConstant(Constant)->boolean::: d64 move factory can inline constant
org.graalvm.compiler.core.amd64.AMD64MoveFactory#mayEmbedConstantLoad(Constant)->boolean::: d64 move factory may embed constant load
org.graalvm.compiler.core.amd64.AMD64MoveFactory#allowConstantToStackMove(Constant)->boolean::: d64 move factory allow constant to stack move
org.graalvm.compiler.core.amd64.AMD64MoveFactory#createMove(AllocatableValue, Value)->AMD64LIRInstruction::: d64 move factory create move
org.graalvm.compiler.core.amd64.AMD64MoveFactory#createStackMove(AllocatableValue, AllocatableValue, Register, AllocatableValue)->AMD64LIRInstruction::: d64 move factory create stack move
org.graalvm.compiler.core.amd64.AMD64MoveFactory#createLoad(AllocatableValue, Constant)->AMD64LIRInstruction::: d64 move factory create load
org.graalvm.compiler.core.amd64.AMD64MoveFactory#createStackLoad(AllocatableValue, Constant)->LIRInstruction::: d64 move factory create stack load
org.graalvm.compiler.core.amd64.AMD64MoveFactoryBase.BackupSlotProvider#getScratchRegister(PlatformKind)->RegisterBackupPair::: backup slot provider get scratch register
org.graalvm.compiler.core.amd64.AMD64MoveFactoryBase#createStackMove(AllocatableValue, AllocatableValue)->AMD64LIRInstruction::: d64 move factory base create stack move
org.graalvm.compiler.core.amd64.AMD64MoveFactoryBase#createStackMove(AllocatableValue, AllocatableValue, Register, AllocatableValue)->AMD64LIRInstruction::: d64 move factory base create stack move
org.graalvm.compiler.core.amd64.AMD64NodeLIRBuilder#emitIndirectCall(IndirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: d64 node builder emit indirect call
org.graalvm.compiler.core.amd64.AMD64NodeLIRBuilder#peephole(ValueNode)->boolean::: d64 node builder peephole
org.graalvm.compiler.core.amd64.AMD64NodeLIRBuilder#getLIRGeneratorTool()->AMD64LIRGenerator::: d64 node builder get generator tool
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getState(Access)->LIRFrameState::: d64 node match rules get state
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getMemoryKind(LIRLowerableAccess)->AMD64Kind::: d64 node match rules get memory kind
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getLirKind(LIRLowerableAccess)->LIRKind::: d64 node match rules get lir kind
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getMemorySize(LIRLowerableAccess)->OperandSize::: d64 node match rules get memory size
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#emitCompareBranchMemory(IfNode, CompareNode, ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules emit compare branch memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#emitConvertMemoryOp(PlatformKind, AMD64RMOp, OperandSize, Access, ValueKind)->ComplexMatchResult::: d64 node match rules emit convert memory op
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#emitConvertMemoryOp(PlatformKind, AMD64RMOp, OperandSize, Access)->ComplexMatchResult::: d64 node match rules emit convert memory op
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#logicalAndNot(ValueNode, ValueNode)->ComplexMatchResult::: d64 node match rules logical and not
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#lowestSetIsolatedBit(ValueNode)->ComplexMatchResult::: d64 node match rules lowest set isolated bit
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getMaskUpToLowestSetBit(ValueNode, ValueNode)->ComplexMatchResult::: d64 node match rules get mask up to lowest set bit
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#resetLowestSetBit(ValueNode, ValueNode)->ComplexMatchResult::: d64 node match rules reset lowest set bit
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#integerTestBranchMemory(IfNode, LIRLowerableAccess, ValueNode)->ComplexMatchResult::: d64 node match rules integer test branch memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#ifCompareMemory(IfNode, CompareNode, ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules if compare memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#ifCompareValueCas(IfNode, CompareNode, ValueNode, ValueCompareAndSwapNode)->ComplexMatchResult::: d64 node match rules if compare value cas
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#ifCompareLogicCas(IfNode, CompareNode, ValueNode, LogicCompareAndSwapNode)->ComplexMatchResult::: d64 node match rules if compare logic cas
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#ifLogicCas(IfNode, CompareNode, ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules if logic cas
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#rotateLeftConstant(LeftShiftNode, UnsignedRightShiftNode)->ComplexMatchResult::: d64 node match rules rotate left constant
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#rotateRightVariable(ValueNode, ConstantNode, ValueNode)->ComplexMatchResult::: d64 node match rules rotate right variable
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#rotateLeftVariable(ValueNode, ValueNode, ConstantNode)->ComplexMatchResult::: d64 node match rules rotate left variable
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#addMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules add memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#subMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules sub memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#mulMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules mul memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#andMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules and memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#orMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules or memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#xorMemory(ValueNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules xor memory
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#writeNarrow(WriteNode, NarrowNode)->ComplexMatchResult::: d64 node match rules write narrow
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#signExtend(SignExtendNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules sign extend
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#zeroExtend(ZeroExtendNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules zero extend
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#narrowRead(NarrowNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules narrow read
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#signExtendNarrowRead(SignExtendNode, NarrowNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules sign extend narrow read
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#floatConvert(FloatConvertNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules float convert
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#reinterpret(ReinterpretNode, LIRLowerableAccess)->ComplexMatchResult::: d64 node match rules reinterpret
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#writeReinterpret(WriteNode, ReinterpretNode)->ComplexMatchResult::: d64 node match rules write reinterpret
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getLIRGeneratorTool()->AMD64LIRGenerator::: d64 node match rules get generator tool
org.graalvm.compiler.core.amd64.AMD64NodeMatchRules#getArithmeticLIRGenerator()->AMD64ArithmeticLIRGenerator::: d64 node match rules get arithmetic generator
org.graalvm.compiler.core.amd64.AMD64SuitesCreator#createLIRSuites(OptionValues)->LIRSuites::: d64 suites creator create suites

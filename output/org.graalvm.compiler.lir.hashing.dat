Hasher#forKeys(JavaConstant[], double):::Tries to find a hash function without conflicts for the provided keys.:::if->return->Optional->empty->else->maxCardinality->Math->round->candidates->new->Comparator<Hasher>->new->TreeSet<>->min->asInt->foreach->HashFunction->instances->for->cardinality->if->candidates->isEmpty->return->Optional->empty->else->return->Optional->candidates->first->of
Hasher#hash(int):::Applies the hash function.:::return->function->apply
Hasher#hash(Value, ArithmeticLIRGenerator):::Applies the hash function to a lir value.:::h->function->gen->getLIRGen->JavaConstant->forInt->emitJavaConstant->gen->return->gen->gen->getLIRGen->JavaConstant->forInt->emitJavaConstant->emitAnd
HashFunction#apply(int, int):::Applies the hash function.:::
HashFunction#gen(Value, Value, ArithmeticLIRGenerator):::Generates LIR that implements the hash function in terms of value and min.:::
HashFunction#effort():::Returns an estimate of number of CPU cycles necessary to apply the hash function.:::

org.graalvm.compiler.lir.hashing.Hasher#forKeys(JavaConstant[], double)->Optional:::Tries to find a hash function without conflicts for the provided keys.
org.graalvm.compiler.lir.hashing.Hasher#hash(int)->int:::Applies the hash function.
org.graalvm.compiler.lir.hashing.Hasher#hash(Value, ArithmeticLIRGenerator)->Value:::Applies the hash function to a lir value.
org.graalvm.compiler.lir.hashing.Hasher#effort()->int::: hasher effort
org.graalvm.compiler.lir.hashing.Hasher#cardinality()->int::: hasher cardinality
org.graalvm.compiler.lir.hashing.Hasher#function()->HashFunction::: hasher function
org.graalvm.compiler.lir.hashing.Hasher#toString()->String::: hasher to string
org.graalvm.compiler.lir.hashing.HashFunction#apply(int, int)->int:::Applies the hash function.
org.graalvm.compiler.lir.hashing.HashFunction#gen(Value, Value, ArithmeticLIRGenerator)->Value:::Generates LIR that implements the hash function in terms of value and min.
org.graalvm.compiler.lir.hashing.HashFunction#effort()->int:::Returns an estimate of number of CPU cycles necessary to apply the hash function.
org.graalvm.compiler.lir.hashing.HashFunction#instances()->List::: hash function instances

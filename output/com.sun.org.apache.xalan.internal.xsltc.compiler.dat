AlternativePattern#typeCheck(SymbolTable):::The type of an '|' is not really defined, hence null is returned.:::_left->typeCheck->_right->typeCheck->return
ApplyImports#hasWithParams():::Returns true if this <xsl:apply-imports/> element has parameters:::return->hasContents
ApplyImports#parseContents(Parser):::Parse the attributes and contents of an <xsl:apply-imports/> element.:::stylesheet->getStylesheet->stylesheet->setTemplateInlining->template->getTemplate->template->getModeName->template->getImportPrecedence->parser->getTopLevelStylesheet->parseChildren
ApplyImports#typeCheck(SymbolTable):::Type-check the attributes/contents of an <xsl:apply-imports/> element.:::typeCheckContents->return
ApplyImports#translate(ClassGenerator, MethodGenerator):::Translate call-template:::stylesheet->classGen->getStylesheet->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->current->methodGen->getLocalIndex->il->classGen->loadTranslet->append->il->methodGen->loadDOM->append->il->methodGen->loadIterator->append->il->methodGen->loadHandler->append->il->methodGen->loadCurrentNode->append->if->stylesheet->hasLocalParams->il->classGen->loadTranslet->append->pushFrame->cpg->addMethodref->il->new->INVOKEVIRTUAL->append->maxPrecedence->minPrecedence->getMinPrecedence->mode->stylesheet->getMode->functionName->mode->functionName->className->classGen->getStylesheet->getClassName->signature->classGen->getApplyTemplatesSigForImport->applyTemplates->cpg->addMethodref->il->new->INVOKEVIRTUAL->append->if->stylesheet->hasLocalParams->il->classGen->loadTranslet->append->pushFrame->cpg->addMethodref->il->new->INVOKEVIRTUAL->append
ApplyTemplates#translate(ClassGenerator, MethodGenerator):::Translate call-template:::setStartNodeCalled->stylesheet->classGen->getStylesheet->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->current->methodGen->getLocalIndex->sortObjects->new->ArrayList<>->foreach->getContents->if->sortObjects->add->if->stylesheet->hasLocalParams->hasContents->il->classGen->loadTranslet->append->pushFrame->cpg->addMethodref->il->new->INVOKEVIRTUAL->append->translateContents->il->classGen->loadTranslet->append->if->if->sortObjects->size->err->new->ErrorMsg->getParser->reportError->_select->translate->_type->translateTo->else->il->methodGen->loadDOM->append->if->sortObjects->size->Sort->translateSortIterator->setStartNode->cpg->addInterfaceMethodref->il->methodGen->loadCurrentNode->append->il->new->INVOKEINTERFACE->append->else->if->Mode->compileGetChildren->else->_select->translate->if->_select->startIterator->className->classGen->getStylesheet->getClassName->il->methodGen->loadHandler->append->applyTemplatesSig->classGen->getApplyTemplatesSig->applyTemplates->cpg->addMethodref->il->new->INVOKEVIRTUAL->append->foreach->getContents->if->releaseResultTree->if->stylesheet->hasLocalParams->hasContents->il->classGen->loadTranslet->append->popFrame->cpg->addMethodref->il->new->INVOKEVIRTUAL->append
AttributeSet#getName():::Returns the QName of this attribute set:::return
AttributeSet#getMethodName():::Returns the method name of this attribute set:::return
AttributeSet#ignore():::Call this method to prevent a method for being compiled for this set:::
AttributeSet#parseContents(Parser):::Parse the contents of this attribute set:::name->getAttribute->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->parser->getQNameIgnoreDefaultNs->if->_name->equals->msg->new->ErrorMsg->parser->reportError->useSets->getAttribute->if->useSets->length->if->Util->isValidQNames->err->new->ErrorMsg->parser->reportError->new->UseAttributeSets->contents->getContents->count->contents->size->for->i->parser->getSymbolTable->setCurrentNode
AttributeSet#typeCheck(SymbolTable):::Type check the contents of this element:::if->return->stable->addAttributeSet->getXSLTC->nextAttributeSetSerial->if->_useSets->typeCheck->typeCheckContents->return
AttributeSet#translate(ClassGenerator, MethodGenerator):::Compile a method that outputs the attributes in this set:::if->return->new->AttributeSetMethodGenerator->if->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->methodName->_mergeSet->getMethodName->il->classGen->loadTranslet->append->il->methodGen->loadDOM->append->il->methodGen->loadIterator->append->il->methodGen->loadHandler->append->il->methodGen->loadCurrentNode->append->method->cpg->classGen->getClassName->addMethodref->il->new->INVOKESPECIAL->append->if->_useSets->translate->attributes->elements->while->attributes->hasNext->element->attributes->next->if->attribute->attribute->translate->il->methodGen->getInstructionList->il->append->classGen->addMethod
BinOpExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::if->_left->hasPositionCall->return->if->_right->hasPositionCall->return->return
BinOpExpr#hasLastCall():::Returns true if this expressions contains a call to last():::return->_left->hasLastCall->_right->hasLastCall
CallTemplate#typeCheck(SymbolTable):::Verify that a template with this name exists.:::template->stable->lookupTemplate->if->typeCheckContents->else->err->new->ErrorMsg->throw->new->TypeCheckError->return
CallTemplate#getCalleeTemplate():::Return the simple named template which this CallTemplate calls:::foundTemplate->getXSLTC->getParser->getSymbolTable->lookupTemplate->return->foundTemplate->isSimpleNamedTemplate
CastCall#typeCheck(SymbolTable):::Type check the two parameters for this function:::if->argumentCount->throw->getName->new->ErrorMsg->new->TypeCheckError->exp->argument->if->getValue->Type->newObjectType->else->throw->getName->new->ErrorMsg->new->TypeCheckError->argument->tright->_right->typeCheck->if->throw->new->ErrorMsg->new->TypeCheckError->return
CastExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::return->_left->hasPositionCall
CastExpr#typeCheck(SymbolTable):::Type checking a cast expression amounts to verifying that the type conversion is legal:::tleft->_left->getType->if->_left->typeCheck->if->else->if->if->InternalTypeMap->maps->return->throw->tleft->toString->_type->toString->new->ErrorMsg->new->TypeCheckError
Choose#display(int):::Display the element contents (a lot of when's and an otherwise):::indent->Util->println->indent->displayContents
Choose#translate(ClassGenerator, MethodGenerator):::Translate this Choose element:::whenElements->new->ArrayList<>->otherwise->elements->elements->error->line->getLineNumber->while->elements->hasNext->element->elements->next->if->whenElements->add->else->if->if->else->new->ErrorMsg->getParser->reportError->else->if->ignore->else->new->ErrorMsg->getParser->reportError->if->whenElements->size->new->ErrorMsg->getParser->reportError->return->il->methodGen->getInstructionList->nextElement->exitHandles->new->ArrayList<>->exit->whens->Collections->enumeration->while->whens->hasMoreElements->when->whens->nextElement->test->when->getTest->truec->il->getEnd->if->nextElement->il->append->setTarget->test->translateDesynthesized->if->call->try->type->call->getParser->getSymbolTable->typeCheck->if->il->new->IFEQ->append->add->catch->finally->il->getEnd->if->when->ignore->when->translateContents->exitHandles->il->new->GOTO->append->add->if->whens->hasMoreElements->il->new->GOTO->append->test->backPatchFalseList->else->test->il->append->backPatchFalseList->test->truec->getNext->backPatchTrueList->if->nextElement->il->append->setTarget->otherwise->translateContents->il->append->exitGotos->Collections->enumeration->while->exitGotos->hasMoreElements->gotoExit->exitGotos->nextElement->gotoExit->setTarget
Closure#inInnerClass():::Returns true if this closure is compiled in an inner class (i.e:::
Closure#getParentClosure():::Returns a reference to its parent closure or null if outermost.:::
Closure#getInnerClassName():::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.:::
Closure#addVariable(VariableRefBase):::Add new variable to the closure.:::
ConcatCall#translate(ClassGenerator, MethodGenerator):::translate leaves a String on the stack:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->nArgs->argumentCount->switch->il->new->PUSH->append->break->argument->translate->break->initBuffer->cpg->addMethodref->append->cpg->addMethodref->new->INVOKEVIRTUAL->toString->cpg->addMethodref->il->cpg->addClass->new->NEW->append->il->append->il->new->INVOKESPECIAL->append->for->i->il->new->INVOKEVIRTUAL->append
ContainsCall#isBoolean():::This XPath function returns true/false values:::return
ContainsCall#typeCheck(SymbolTable):::Type check the two parameters for this function:::if->argumentCount->throw->getName->new->TypeCheckError->argument->baseType->_base->typeCheck->if->new->CastExpr->argument->tokenType->_token->typeCheck->if->new->CastExpr->return
ContainsCall#translate(ClassGenerator, MethodGenerator):::Compile the expression - leave boolean expression on stack:::translateDesynthesized->synthesize
ContainsCall#translateDesynthesized(ClassGenerator, MethodGenerator):::Compile expression and update true/false-lists:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->_base->translate->_token->translate->il->cpg->addMethodref->new->INVOKEVIRTUAL->append->_falseList->il->new->IFLT->append->add
DecimalFormatting#typeCheck(SymbolTable):::No type check needed for the <xsl:decimal-formatting/> element:::return
DecimalFormatting#parseContents(Parser):::Parse the name of the <xsl:decimal-formatting/> element:::name->getAttribute->if->name->length->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->parser->getQNameIgnoreDefaultNs->if->parser->getQNameIgnoreDefaultNs->stable->parser->getSymbolTable->if->stable->getDecimalFormatting->_name->toString->reportWarning->else->stable->addDecimalFormatting
DecimalFormatting#translate(ClassGenerator, MethodGenerator):::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->init->cpg->addMethodref->il->classGen->loadTranslet->append->il->_name->toString->new->PUSH->append->il->cpg->addClass->new->NEW->append->il->append->il->cpg->addFieldref->new->GETSTATIC->append->il->new->INVOKESPECIAL->append->tmp->getAttribute->if->tmp->equals->nan->cpg->addMethodref->il->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->getAttribute->if->tmp->equals->inf->cpg->addMethodref->il->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->nAttributes->_attributes->getLength->for->i->put->cpg->addMethodref->il->new->INVOKEVIRTUAL->append
DecimalFormatting#translateDefaultDFS(ClassGenerator, MethodGenerator):::Creates the default, nameless, DecimalFormat object in AbstractTranslet's format_symbols hashtable:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->init->cpg->addMethodref->il->classGen->loadTranslet->append->il->new->PUSH->append->il->cpg->addClass->new->NEW->append->il->append->il->cpg->addFieldref->new->GETSTATIC->append->il->new->INVOKESPECIAL->append->nan->cpg->addMethodref->il->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->inf->cpg->addMethodref->il->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->put->cpg->addMethodref->il->new->INVOKEVIRTUAL->append
DocumentCall#typeCheck(SymbolTable):::Type checks the arguments passed to the document() function:::ac->argumentCount->if->msg->new->ErrorMsg->throw->new->TypeCheckError->if->getStylesheet->msg->new->ErrorMsg->throw->new->TypeCheckError->argument->if->msg->new->ErrorMsg->throw->new->TypeCheckError->_arg1->typeCheck->if->new->CastExpr->if->argument->if->msg->new->ErrorMsg->throw->new->TypeCheckError->arg2Type->_arg2->typeCheck->if->arg2Type->identicalTo->new->CastExpr->else->if->arg2Type->identicalTo->else->msg->new->ErrorMsg->throw->new->TypeCheckError->return
DocumentCall#translate(ClassGenerator, MethodGenerator):::Translates the document() function call to a call to LoadDocument()'s static method document().:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->ac->argumentCount->domField->cpg->classGen->getClassName->addFieldref->docParamList->if->else->docIdx->cpg->addMethodref->_arg1->translate->if->_arg1->startIterator->if->_arg2->translate->_arg2->startIterator->il->getStylesheet->getSystemId->new->PUSH->append->il->classGen->loadTranslet->append->il->append->il->new->GETFIELD->append->il->new->INVOKESTATIC->append
ElementAvailableCall#typeCheck(SymbolTable):::Force the argument to this function to be a literal string.:::if->argument->return->err->new->ErrorMsg->throw->new->TypeCheckError
ElementAvailableCall#evaluateAtCompileTime():::Returns an object representing the compile-time evaluation of an expression:::return->getResult
ElementAvailableCall#getResult():::Returns the result that this function will return:::try->arg->argument->qname->arg->getValue->index->qname->indexOf->localName->qname->substring->return->getParser->arg->getNamespace->elementSupported->catch->return->finally
ElementAvailableCall#translate(ClassGenerator, MethodGenerator):::Calls to 'element-available' are resolved at compile time since the namespaces declared in the stylsheet are not available at run time:::cpg->classGen->getConstantPool->result->getResult->methodGen->getInstructionList->new->PUSH->append
EqualityExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::if->_left->hasPositionCall->return->if->_right->hasPositionCall->return->return
EqualityExpr#typeCheck(SymbolTable):::Typing rules: see XSLT Reference by M:::tleft->_left->typeCheck->tright->_right->typeCheck->if->tleft->isSimple->tright->isSimple->if->if->new->CastExpr->else->if->new->CastExpr->else->if->new->CastExpr->new->CastExpr->else->new->CastExpr->new->CastExpr->else->if->new->CastExpr->else->if->new->CastExpr->else->if->new->CastExpr->else->if->new->CastExpr->else->if->new->CastExpr->new->CastExpr->else->if->else->if->swapArguments->else->if->new->CastExpr->if->new->CastExpr->if->tleft->isSimple->swapArguments->if->_right->getType->new->CastExpr->return
Expression#evaluateAtCompileTime():::Returns an object representing the compile-time evaluation of an expression:::return
Expression#typeCheck(SymbolTable):::Type check all the children of this node.:::return->typeCheckContents
Expression#translate(ClassGenerator, MethodGenerator):::Translate this node into JVM bytecodes.:::msg->getClass->new->ErrorMsg->getParser->reportError
Expression#compile(ClassGenerator, MethodGenerator):::Translate this node into a fresh instruction list:::result->save->methodGen->getInstructionList->methodGen->new->InstructionList->setInstructionList->translate->methodGen->setInstructionList->return
Expression#translateDesynthesized(ClassGenerator, MethodGenerator):::Redefined by expressions of type boolean that use flow lists.:::translate->if->desynthesize
Expression#startIterator(ClassGenerator, MethodGenerator):::If this expression is of type node-set and it is not a variable reference, then call setStartNode() passing the context node.:::if->return->expr->if->getExpr->if->il->methodGen->getInstructionList->il->methodGen->loadContextNode->append->il->methodGen->setStartNode->append
Expression#synthesize(ClassGenerator, MethodGenerator):::Synthesize a boolean expression, i.e., either push a 0 or 1 onto the operand stack for the next statement to succeed:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->_trueList->il->append->backPatch->truec->il->new->GOTO_W->append->_falseList->il->append->backPatch->truec->il->append->setTarget
Expression#lookupPrimop(SymbolTable, String, MethodType):::Search for a primop in the symbol table that matches the method type ctype:::result->primop->stable->lookupPrimop->if->n->primop->size->minDistance->for->i->return
Fallback#typeCheck(SymbolTable):::This element never produces any data on the stack:::if->return->typeCheckContents->else->return
Fallback#activate():::Activate this fallback element:::
Fallback#parseContents(Parser):::Parse contents only if this fallback element is put in place of some unsupported element or non-XSLTC extension element:::if->parseChildren
Fallback#translate(ClassGenerator, MethodGenerator):::Translate contents only if this fallback element is put in place of some unsupported element or non-XSLTC extension element:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->translateContents
FilterExpr#typeCheck(SymbolTable):::Type check a FilterParentPath:::ptype->_primary->typeCheck->canOptimize->if->if->new->CastExpr->else->throw->new->TypeCheckError->n->_predicates->size->for->i->return
FilterExpr#translate(ClassGenerator, MethodGenerator):::Translate a filter expression by pushing the appropriate iterator onto the stack.:::_predicates->size->translateFilterExpr
FilterExpr#translatePredicates(ClassGenerator, MethodGenerator, int):::Translate a sequence of predicates:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->translateFilterExpr->else->predicate->_predicates->get->translatePredicates->if->predicate->isNthPositionFilter->nthIteratorIdx->cpg->addMethodref->iteratorTemp->methodGen->Util->getJCRefType->addLocalVariable->iteratorTemp->il->iteratorTemp->getIndex->new->ASTORE->append->setStart->predicate->translate->predicateValueTemp->methodGen->Util->getJCRefType->addLocalVariable->predicateValueTemp->il->predicateValueTemp->getIndex->new->ISTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->iteratorTemp->il->iteratorTemp->getIndex->new->ALOAD->append->setEnd->predicateValueTemp->il->predicateValueTemp->getIndex->new->ILOAD->append->setEnd->il->new->INVOKESPECIAL->append->else->initCNLI->cpg->addMethodref->nodeIteratorTemp->methodGen->Util->getJCRefType->addLocalVariable->nodeIteratorTemp->il->nodeIteratorTemp->getIndex->new->ASTORE->append->setStart->predicate->translate->filterTemp->methodGen->Util->getJCRefType->addLocalVariable->filterTemp->il->filterTemp->getIndex->new->ASTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->nodeIteratorTemp->il->nodeIteratorTemp->getIndex->new->ALOAD->append->setEnd->il->append->filterTemp->il->filterTemp->getIndex->new->ALOAD->append->setEnd->il->methodGen->loadCurrentNode->append->il->classGen->loadTranslet->append->il->new->INVOKESPECIAL->append
FilterParentPath#typeCheck(SymbolTable):::Type check a FilterParentPath:::ftype->_filterExpr->typeCheck->if->if->new->CastExpr->else->if->new->CastExpr->else->throw->new->TypeCheckError->ptype->_path->typeCheck->if->new->CastExpr->return
FlowList#backPatch(InstructionHandle):::Back patch a flow list:::if->n->_elements->size->for->i->_elements->clear
FlowList#copyAndRedirect(InstructionList, InstructionList):::Redirect the handles from oldList to newList:::result->new->FlowList->if->return->n->_elements->size->oldIter->oldList->iterator->newIter->newList->iterator->while->oldIter->hasNext->oldIh->oldIter->next->newIh->newIter->next->for->i->return
ForEach#initializeVariables(ClassGenerator, MethodGenerator):::The code that is generated by nested for-each loops can appear to some JVMs as if it is accessing un-initialized variables:::n->elementCount->for->i
FunctionAvailableCall#typeCheck(SymbolTable):::Argument of function-available call must be literal, typecheck returns the type of function-available to be boolean.:::if->return->if->return->err->new->ErrorMsg->throw->new->TypeCheckError
FunctionAvailableCall#evaluateAtCompileTime():::Returns an object representing the compile-time evaluation of an expression:::return->getResult
FunctionAvailableCall#getResult():::Reports on whether the function specified in the argument to xslt function 'function-available' was found.:::if->return->if->isInternalNamespace->parser->getParser->parser->Util->getLocalName->functionSupported->return
FunctionAvailableCall#translate(ClassGenerator, MethodGenerator):::Calls to 'function-available' are resolved at compile time since the namespaces declared in the stylsheet are not available at run time:::cpg->classGen->getConstantPool->methodGen->getInstructionList->getResult->new->PUSH->append
FunctionCall#typeCheck(SymbolTable):::Type check a function call:::if->return->namespace->_fname->getNamespace->local->_fname->getLocalPart->if->isExtension->new->QName->return->typeCheckStandard->else->if->isStandard->return->typeCheckStandard->else->try->getClassNameFromUri->pos->local->lastIndexOf->if->if->_className->length->local->substring->else->local->substring->local->substring->new->QName->else->if->_className->length->try->ObjectFactory->findProviderClass->catch->finally->else->if->local->indexOf->replaceDash->extFunction->EXTENSIONFUNCTION->get->if->new->QName->return->typeCheckStandard->else->new->QName->return->typeCheckExternal->catch->errorMsg->e->getErrorMsg->if->name->_fname->getLocalPart->new->ErrorMsg->getParser->reportError->return->finally
FunctionCall#typeCheckStandard(SymbolTable):::Type check a call to a standard function:::_fname->clearNamespace->n->_arguments->size->argsType->typeCheckArgs->args->new->MethodType->ptype->_fname->getLocalPart->lookupPrimop->if->for->i->return->ptype->resultType->throw->new->TypeCheckError
FunctionCall#typeCheckExternal(SymbolTable):::Type check a call to an external (Java) method:::nArgs->_arguments->size->name->_fname->getLocalPart->if->_fname->getLocalPart->equals->return->typeCheckConstructor->else->hasThisArgument->if->if->if->firstArg->_arguments->get->firstArgType->firstArg->typeCheck->if->_clazz->getJavaClass->isAssignableFrom->if->_arguments->get->_arguments->remove->if->getJavaClassName->else->throw->new->TypeCheckError->else->if->_className->length->parser->getParser->if->_fname->toString->reportWarning->return->methods->findMethods->if->throw->new->TypeCheckError->extType->nMethods->methods->size->argsType->typeCheckArgs->bestMethodDistance->for->j->i->if->Modifier->_chosenMethod->getModifiers->isStatic->throw->getMethodSignature->new->TypeCheckError->if->if->getXSLTC->setMultiDocument->return->throw->getMethodSignature->new->TypeCheckError
FunctionCall#typeCheckArgs(SymbolTable):::Type check the actual arguments of this function call.:::result->new->ArrayList<>->foreach->result->exp->typeCheck->add->return
FunctionCall#translateDesynthesized(ClassGenerator, MethodGenerator):::Compile the function call and treat as an expression Update true/false-lists.:::type->if->_chosenMethodType->resultType->il->methodGen->getInstructionList->translate->if->_falseList->il->new->IFEQ->append->add
FunctionCall#translate(ClassGenerator, MethodGenerator):::Translate a function call:::n->argumentCount->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->isSecureProcessing->classGen->getParser->getXSLTC->isSecureProcessing->isExtensionFunctionEnabled->classGen->getParser->getXSLTC->getFeature->index->if->isStandard->isExtension->for->i->name->_fname->toString->replace->args->if->name->equals->il->methodGen->loadDOM->append->else->if->name->equals->if->_chosenMethodType->toSignature->equals->il->methodGen->loadContextNode->append->il->methodGen->loadDOM->append->cpg->_chosenMethodType->toSignature->addMethodref->il->new->INVOKESTATIC->append->else->if->cpg->addMethodref->il->_fname->toString->new->PUSH->append->il->new->INVOKESTATIC->append->else->if->if->translateUnallowedExtension->clazz->_chosenConstructor->getDeclaringClass->getName->generateAddReads->paramTypes->_chosenConstructor->getParameterTypes->paramTemp->new->LocalVariableGenArr->for->i->il->cpg->addClass->new->NEW->append->il->append->for->i->buffer->new->StringBuffer->buffer->append->for->i->buffer->append->buffer->append->cpg->buffer->toString->addMethodref->il->new->INVOKESPECIAL->append->_chosenConstructor->getDeclaringClass->translateFrom->else->if->translateUnallowedExtension->clazz->_chosenMethod->getDeclaringClass->getName->paramTypes->_chosenMethod->getParameterTypes->generateAddReads->if->_thisArgument->translate->for->i->buffer->new->StringBuffer->buffer->append->for->i->buffer->append->buffer->_chosenMethod->getReturnType->getSignature->append->if->_clazz->isInterface->cpg->_fname->getLocalPart->buffer->toString->addInterfaceMethodref->il->new->INVOKEINTERFACE->append->else->cpg->_fname->getLocalPart->buffer->toString->addMethodref->il->new->INVOKEVIRTUAL->new->INVOKESTATIC->append->_type->_chosenMethod->getReturnType->translateFrom
FunctionCall#getSignature(Class):::Compute the JVM signature for the class.:::if->clazz->isArray->sb->new->StringBuffer->cl->while->cl->isArray->sb->append->cl->getComponentType->sb->getSignature->append->return->sb->toString->else->if->clazz->isPrimitive->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->name->clazz->toString->err->new->ErrorMsg->throw->err->toString->new->Error->else->return->clazz->getName->replace
FunctionCall#getSignature(Method):::Compute the JVM method descriptor for the method.:::sb->new->StringBuffer->sb->append->params->meth->getParameterTypes->for->j->return->sb->append->meth->getReturnType->getSignature->append->toString
FunctionCall#getSignature(Constructor):::Compute the JVM constructor descriptor for the constructor.:::sb->new->StringBuffer->sb->append->params->cons->getParameterTypes->for->j->return->sb->append->toString
FunctionCall#replaceDash(String):::To support EXSLT extensions, convert names with dash to allowable Java names: e.g., convert abc-xyz to abcXyz:::dash->buff->new->StringBuilder->for->i->name->length->return->buff->toString
IdKeyPattern#translate(ClassGenerator, MethodGenerator):::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getKeyIndex->cpg->addMethodref->lookupId->cpg->addMethodref->lookupKey->cpg->addMethodref->getNodeIdent->cpg->addInterfaceMethodref->il->classGen->loadTranslet->append->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->il->append->il->new->PUSH->append->if->il->new->INVOKEVIRTUAL->append->else->il->new->INVOKEVIRTUAL->append->_trueList->il->new->IFNE->append->add->_falseList->il->new->GOTO->append->add
If#display(int):::Display the contents of this element:::indent->Util->println->indent->print->Util->_test->toString->println->displayContents
If#parseContents(Parser):::Parse the "test" expression and contents of this element.:::parser->parseExpression->if->_test->isDummy->reportError->return->result->_test->evaluateAtCompileTime->if->booleanValue->parseChildren
If#typeCheck(SymbolTable):::Type-check the "test" expression and contents of this element:::if->_test->typeCheck->new->CastExpr->if->typeCheckContents->return
If#translate(ClassGenerator, MethodGenerator):::Translate the "test" expression and contents of this element:::il->methodGen->getInstructionList->_test->translateDesynthesized->truec->il->getEnd->if->translateContents->_test->il->append->backPatchFalseList->_test->truec->getNext->backPatchTrueList
Instruction#typeCheck(SymbolTable):::Type check all the children of this node.:::return->typeCheckContents
Instruction#translate(ClassGenerator, MethodGenerator):::Translate this node into JVM bytecodes.:::msg->getClass->new->ErrorMsg->getParser->reportError
Key#parseContents(Parser):::Parse the <xsl:key> element and attributes:::name->getAttribute->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->parser->getQNameIgnoreDefaultNs->getSymbolTable->addKey->parser->parsePattern->parser->parseExpression->if->reportError->return->if->_match->isDummy->reportError->return->if->_use->isDummy->reportError->return
Key#getName():::Returns a String-representation of this key's name:::return->_name->toString
Key#traverseNodeSet(ClassGenerator, MethodGenerator, int):::This method is called if the "use" attribute of the key contains a node set:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getNodeValue->cpg->addInterfaceMethodref->getNodeIdent->cpg->addInterfaceMethodref->keyDom->cpg->addMethodref->parentNode->methodGen->Util->getJCRefType->addLocalVariable->parentNode->il->parentNode->getIndex->new->ISTORE->append->setStart->il->methodGen->loadCurrentNode->append->il->methodGen->loadIterator->append->_use->translate->_use->startIterator->il->methodGen->storeIterator->append->nextNode->il->new->GOTO->append->loop->il->append->il->classGen->loadTranslet->append->il->_name->toString->new->PUSH->append->parentNode->il->parentNode->getIndex->new->ILOAD->append->setEnd->il->methodGen->loadDOM->append->il->methodGen->loadCurrentNode->append->il->new->INVOKEINTERFACE->append->il->new->INVOKEVIRTUAL->append->il->classGen->loadTranslet->append->il->getName->new->PUSH->append->il->methodGen->loadDOM->append->il->new->INVOKEVIRTUAL->append->nextNode->il->methodGen->loadIterator->append->setTarget->il->methodGen->nextNode->append->il->append->il->methodGen->storeCurrentNode->append->il->new->IFGE->append->il->methodGen->storeIterator->append->il->methodGen->storeCurrentNode->append
Key#translate(ClassGenerator, MethodGenerator):::Gather all nodes that match the expression in the attribute "match" and add one (or more) entries in this key's index.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->current->methodGen->getLocalIndex->key->cpg->addMethodref->keyDom->cpg->addMethodref->getNodeIdent->cpg->addInterfaceMethodref->git->cpg->addInterfaceMethodref->il->methodGen->loadCurrentNode->append->il->methodGen->loadIterator->append->il->methodGen->loadDOM->append->il->new->PUSH->append->il->new->INVOKEINTERFACE->append->il->methodGen->loadCurrentNode->append->il->methodGen->setStartNode->append->il->methodGen->storeIterator->append->nextNode->il->new->GOTO->append->loop->il->append->il->methodGen->loadCurrentNode->append->_match->translate->_match->synthesize->skipNode->il->new->IFEQ->append->if->il->methodGen->loadCurrentNode->append->traverseNodeSet->else->il->classGen->loadTranslet->append->il->append->il->_name->toString->new->PUSH->append->il->append->il->methodGen->loadCurrentNode->append->_use->translate->il->new->INVOKEVIRTUAL->append->il->methodGen->loadDOM->append->il->new->INVOKEVIRTUAL->append->skip->il->append->il->methodGen->loadIterator->append->il->methodGen->nextNode->append->il->append->il->methodGen->storeCurrentNode->append->il->new->IFGT->append->il->methodGen->storeIterator->append->il->methodGen->storeCurrentNode->append->nextNode->setTarget->skipNode->setTarget
KeyCall#addParentDependency():::If this call to key() is in a top-level element like  another variable or param, add a dependency between that top-level element and the referenced key:::if->return->node->while->node->getParent->parent->if->parent->getSymbolTable->getKey->addDependency
KeyCall#typeCheck(SymbolTable):::Type check the parameters for the id() or key() function:::returnType->super->typeCheck->if->nameType->_name->typeCheck->if->literal->getParser->literal->getValue->getQNameIgnoreDefaultNs->else->if->new->CastExpr->_value->typeCheck->if->new->CastExpr->_value->typeCheck->addParentDependency->return
KeyCall#translate(ClassGenerator, MethodGenerator):::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getKeyIndex->cpg->addMethodref->keyDom->cpg->addMethodref->getKeyIterator->cpg->_valueType->toSignature->addMethodref->il->classGen->loadTranslet->append->if->il->new->PUSH->append->else->if->il->_resolvedQName->toString->new->PUSH->append->else->_name->translate->il->new->INVOKEVIRTUAL->append->il->append->il->methodGen->loadDOM->append->il->methodGen->loadCurrentNode->append->il->new->INVOKEVIRTUAL->append->_value->translate->il->append->il->new->INVOKEVIRTUAL->append
LangCall#translate(ClassGenerator, MethodGenerator):::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->tst->cpg->addMethodref->_lang->translate->il->methodGen->loadDOM->append->if->il->new->ILOAD->append->else->il->methodGen->loadContextNode->append->il->new->INVOKESTATIC->append
LiteralAttribute#getName():::Return the name of the attribute:::return
LiteralAttribute#getValue():::Return the value of the attribute:::return
LiteralElement#getName():::Returns the QName for this literal element:::return
LiteralElement#display(int):::Displays the contents of this literal element:::indent->Util->println->displayContents
LiteralElement#registerNamespace(String, String, SymbolTable, boolean):::Method used to keep track of what namespaces that are references by this literal element and its attributes:::if->parentUri->_literalElemParent->accessedNamespace->if->parentUri->equals->return->if->new->Hashtable<>->else->if->old->_accessedPrefixes->get->if->if->old->equals->return->else->stable->generateNamespacePrefix->if->prefix->equals->_accessedPrefixes->put
LiteralElement#addAttribute(SyntaxTreeNode):::Add an attribute to this element:::if->new->ArrayList<>->_attributeElements->add
LiteralElement#setFirstAttribute(SyntaxTreeNode):::Set the first attribute of this element:::if->new->ArrayList<>->_attributeElements->add
LiteralElement#typeCheck(SymbolTable):::Type-check the contents of this element:::if->foreach->node->typeCheck->typeCheckContents->return
LiteralElement#getNamespaceScope(SyntaxTreeNode):::This method starts at a given node, traverses all namespace mappings, and assembles a list of all prefixes that (for the given node) maps to _ANY_ namespace URI:::all->new->HashMap<>->while->mapping->node->getPrefixMapping->if->mapping->entrySet->stream->all->entry->getKey->entry->getValue->putIfAbsent->forEach->node->getParent->return->all->entrySet
LiteralElement#parseContents(Parser):::Determines the final QName for the element and its attributes:::stable->parser->getSymbolTable->stable->setCurrentNode->parent->getParent->if->translateQName->count->_attributes->getLength->for->i->include->getNamespaceScope->foreach->prefix->entry->getKey->if->prefix->equals->uri->lookupNamespace->if->stable->isExcludedNamespace->registerNamespace->parseChildren->for->i
LiteralElement#translate(ClassGenerator, MethodGenerator):::Compiles code that emits the literal element to the output handler, first the start tag, then namespace declaration, then attributes, then the element contents, and then the element end tag:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->checkAttributesUnique->il->methodGen->loadHandler->append->il->new->PUSH->append->il->append->il->methodGen->startElement->append->j->while->elementCount->item->elementAt->if->item->translate->if->foreach->_accessedPrefixes->entrySet->prefix->entry->getKey->uri->entry->getValue->il->methodGen->loadHandler->append->il->new->PUSH->append->il->new->PUSH->append->il->methodGen->namespace->append->if->foreach->if->node->translate->translateContents->il->methodGen->endElement->append
LiteralElement#getElemDesc():::Return the ElemDesc object for an HTML element:::if->isHTMLOutput->return->ToHTMLStream->getElemDesc->else->return
LiteralElement#allAttributesUnique():::Return true if all attributes of this LRE have unique names.:::return
LocalNameCall#translate(ClassGenerator, MethodGenerator):::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getNodeName->cpg->addInterfaceMethodref->getLocalName->cpg->addMethodref->super->translate->il->new->INVOKEINTERFACE->append->il->new->INVOKESTATIC->append
LocationPathPattern#noSmallerThan(LocationPathPattern):::This method is used by the Mode class to prioritise patterns and template:::if->return->else->if->if->return->else->if->if->return->return
LogicalExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::return->_left->hasPositionCall->_right->hasPositionCall
LogicalExpr#hasLastCall():::Returns true if this expressions contains a call to last():::return->_left->hasLastCall->_right->hasLastCall
LogicalExpr#evaluateAtCompileTime():::Returns an object representing the compile-time evaluation of an expression:::leftb->_left->evaluateAtCompileTime->rightb->_right->evaluateAtCompileTime->if->return->if->return->else->return
LogicalExpr#getOp():::Returns this logical expression's operator - OR or AND represented by 0 and 1 respectively.:::return
LogicalExpr#setParser(Parser):::Override the SyntaxTreeNode.setParser() method to make sure that the parser is set for sub-expressions:::super->setParser->_left->setParser->_right->setParser
LogicalExpr#toString():::Returns a string describing this expression:::return
LogicalExpr#typeCheck(SymbolTable):::Type-check this expression, and possibly child expressions.:::tleft->_left->typeCheck->tright->_right->typeCheck->wantType->new->MethodType->haveType->lookupPrimop->if->arg1->haveType->argsType->get->if->arg1->identicalTo->new->CastExpr->arg2->haveType->argsType->get->if->arg2->identicalTo->new->CastExpr->return->haveType->resultType->throw->new->TypeCheckError
LogicalExpr#translate(ClassGenerator, MethodGenerator):::Compile the expression - leave boolean expression on stack:::translateDesynthesized->synthesize
LogicalExpr#translateDesynthesized(ClassGenerator, MethodGenerator):::Compile expression and update true/false-lists:::il->methodGen->getInstructionList->parent->getParent->if->_left->translateDesynthesized->middle->il->append->_right->translateDesynthesized->after->il->append->_falseList->append->append->if->getOp->_left->backPatchTrueList->else->if->_left->backPatchTrueList->else->_trueList->append->if->getOp->_right->backPatchTrueList->else->if->_right->backPatchTrueList->else->_trueList->append->else->_left->translateDesynthesized->ih->il->new->GOTO->append->_right->translateDesynthesized->backPatch->ih->getNext->backPatch->_falseList->append->_trueList->add->append
Mode#functionName():::Returns the name of the method (_not_ function) that will be compiled for this mode:::return
Mode#processPatterns(Map):::Process all the test patterns in this mode:::_templates->size->quicksort->foreach->if->template->isNamed->template->disabled->_namedTemplates->put->pattern->template->getPattern->if->flattenAlternative->prepareTestSequences
Mode#compileApplyTemplates(ClassGenerator):::Compiles the applyTemplates() method and adds it to the translet:::xsltc->classGen->getParser->getXSLTC->cpg->classGen->getConstantPool->names->xsltc->getNamesIndex->argTypes->new->com.sun.org.apache.bcel.internal.generic.TypeArr->Util->getJCRefType->Util->getJCRefType->Util->getJCRefType->argNames->new->StringArr->mainIL->new->InstructionList->methodGen->functionName->getClassName->classGen->getConstantPool->new->MethodGenerator->methodGen->addException->mainIL->append->current->methodGen->addLocalVariable2->current->getIndex->body->new->InstructionList->body->append->ilLoop->new->InstructionList->ilLoop->methodGen->loadIterator->append->ilLoop->methodGen->nextNode->append->ilLoop->append->ilLoop->new->ISTORE->append->ifeq->ilLoop->new->IFLT->append->loop->ilLoop->new->GOTO_W->append->ifeq->ilLoop->append->setTarget->ihLoop->ilLoop->getStart->current->mainIL->new->GOTO_W->append->setStart->current->setEnd->ilRecurse->compileDefaultRecursion->ihRecurse->ilRecurse->getStart->ilText->compileDefaultText->ihText->ilText->getStart->types->names->size->new->intArr->for->i->isAttribute->new->booleanArr->isNamespace->new->booleanArr->for->i->names->size->compileTemplates->elemTest->ihElem->if->elemTest->compile->attrTest->ihAttr->if->attrTest->compile->ilKey->if->loop->_idxTestSeq->body->getStart->compile->setTarget->_idxTestSeq->getInstructionList->else->loop->body->getStart->setTarget->if->nodePrio->_childNodeTestSeq->getPriority->nodePos->_childNodeTestSeq->getPosition->elemPrio->elemPos->if->elemTest->getPriority->elemTest->getPosition->if->_childNodeTestSeq->compile->textTest->textPrio->textPos->if->textTest->getPriority->textTest->getPosition->if->_childNodeTestSeq->compile->elemNamespaceHandle->nsElem->compileNamespaces->if->nsElem->getStart->attrNamespaceHandle->nsAttr->compileNamespaces->if->nsAttr->getStart->targets->new->InstructionHandleArr->for->i->_rootPattern->getTemplate->getTemplateInstructionHandle->_rootPattern->getTemplate->getTemplateInstructionHandle->compile->ihPI->if->if->compile->else->ihComment->if->compile->for->i->if->body->insert->getType->cpg->addInterfaceMethodref->body->methodGen->loadDOM->append->body->new->ILOAD->append->body->new->INVOKEINTERFACE->append->disp->body->new->SWITCH->append->appendTestSequences->appendTemplateCode->if->body->append->if->body->append->body->append->body->append->mainIL->append->mainIL->append->peepHoleOptimization->classGen->addMethod->if->foreach->_importLevels->entrySet->entry->getValue->entry->getKey->compileApplyImports
NameBase#typeCheck(SymbolTable):::Check that we either have no parameters or one parameter that is either a node or a node-set.:::switch->argumentCount->break->_param->typeCheck->break->throw->new->TypeCheckError->if->throw->new->TypeCheckError->return
NameBase#translate(ClassGenerator, MethodGenerator):::Translate the code required for getting the node for which the QName, local-name or namespace URI should be extracted.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->il->methodGen->loadDOM->append->if->argumentCount->il->methodGen->loadContextNode->append->else->if->_param->translate->else->if->_param->translate->il->cpg->addMethodref->new->INVOKESTATIC->append->il->methodGen->nextNode->append->else->_param->translate->_param->startIterator->il->methodGen->nextNode->append
NameCall#translate(ClassGenerator, MethodGenerator):::Translate code that leaves a node's QName (as a String) on the stack:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getName->cpg->addInterfaceMethodref->super->translate->il->new->INVOKEINTERFACE->append
NamespaceUriCall#translate(ClassGenerator, MethodGenerator):::Translate code that leaves a node's namespace URI (as a String) on the stack:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->getNamespace->cpg->addInterfaceMethodref->super->translate->il->new->INVOKEINTERFACE->append
Number#inInnerClass():::Returns true if this closure is compiled in an inner class (i.e:::return
Number#getParentClosure():::Returns a reference to its parent closure or null if outermost.:::return
Number#getInnerClassName():::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.:::return
Number#addVariable(VariableRefBase):::Add new variable to the closure.:::if->new->ArrayList<>->if->_closureVars->contains->_closureVars->add
Number#hasValue():::True if the has specified a value for this instance of number.:::return
Number#isDefault():::Returns <tt>true</tt> if this instance of number has neither a from nor a count pattern.:::return
Output#display(int):::Displays the contents of this element (for debugging):::indent->Util->println
Output#disable():::Disables this <xsl:output> element in case where there are some other <xsl:output> element (from a different imported/included stylesheet) with higher precedence.:::
Output#parseContents(Parser):::Scans the attribute list for the xsl:output instruction:::outputProperties->new->Properties->parser->setOutput->if->return->attrib->getAttribute->if->_version->equals->else->outputProperties->setProperty->getAttribute->if->_method->equals->if->_method->toLowerCase->if->_method->equals->_method->equals->_method->equals->XML11Char->isXML11ValidQName->_method->indexOf->outputProperties->setProperty->else->reportError->getAttribute->if->_encoding->equals->else->try->canonicalEncoding->Encodings->convertMime2JavaEncoding->writer->new->OutputStreamWriter->catch->msg->new->ErrorMsg->parser->reportError->finally->outputProperties->setProperty->getAttribute->if->attrib->equals->if->attrib->equals->outputProperties->setProperty->getAttribute->if->_standalone->equals->else->outputProperties->setProperty->getAttribute->if->_doctypeSystem->equals->else->outputProperties->setProperty->getAttribute->if->_doctypePublic->equals->else->outputProperties->setProperty->getAttribute->if->_cdata->equals->else->expandedNames->new->StringBuffer->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->qname->tokens->nextToken->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->expandedNames->parser->getQName->toString->append->append->expandedNames->toString->outputProperties->setProperty->getAttribute->if->attrib->equals->if->attrib->equals->outputProperties->setProperty->else->if->_method->equals->lookupPrefix->getAttribute->if->_indentamount->equals->lookupPrefix->getAttribute->if->_indentamount->equals->outputProperties->setProperty->getAttribute->if->_mediaType->equals->else->outputProperties->setProperty->if->if->_method->equals->if->if->else->if->_method->equals->if->parser->getCurrentStylesheet->setOutputProperties
Output#translate(ClassGenerator, MethodGenerator):::Compile code that passes the information in this <xsl:output> element to the appropriate fields in the translet:::if->return->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->field->il->classGen->loadTranslet->append->if->_version->equals->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->cpg->addFieldref->il->append->il->new->PUSH->append->il->new->PUTFIELD->append->if->_indentamount->equals->cpg->addFieldref->il->append->il->Integer->parseInt->new->PUSH->append->il->new->PUTFIELD->append->if->index->cpg->addMethodref->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->il->append->il->tokens->nextToken->new->PUSH->append->il->new->INVOKEVIRTUAL->append->il->append
Param#toString():::Display variable as single string:::return
Param#setLoadInstruction(Instruction):::Set the instruction for loading the value of this variable onto the JVM stack and returns the old instruction.:::tmp->return
Param#setStoreInstruction(Instruction):::Set the instruction for storing a value from the stack into this variable and returns the old instruction.:::tmp->return
Param#display(int):::Display variable in a full AST dump:::indent->println->if->indent->_select->toString->println->displayContents
Param#parseContents(Parser):::Parse the contents of the <xsl:param> element:::super->parseContents->parent->getParent->if->param->parser->getSymbolTable->lookupParam->if->us->this->getImportPrecedence->them->param->getImportPrecedence->if->name->_name->toString->reportError->else->if->copyReferences->return->else->param->copyReferences->param->disable->addParam->parser->getSymbolTable->addParam->else->if->template->template->addParameter->if->template->isSimpleNamedTemplate
Param#typeCheck(SymbolTable):::Type-checks the parameter:::if->_select->typeCheck->if->new->CastExpr->else->if->hasContents->typeCheckContents->return
ParentLocationPath#checkAxisMismatch():::This method is used to determine if this parent location path is a combination of two step's with axes that will create duplicate or unordered nodes.:::left->_path->getAxis->right->getAxis->if->return->if->return->if->return->if->return->if->return->if->if->type->getNodeType->if->return->return
Parser#makeStylesheet(SyntaxTreeNode):::Create an instance of the Stylesheet class, and then parse, typecheck and compile the instance:::try->stylesheet->if->else->new->Stylesheet->stylesheet->setSimplified->stylesheet->addElement->stylesheet->element->getAttributes->setAttributes->if->element->lookupNamespace->element->addPrefixMapping->stylesheet->setParser->return->catch->err->new->ErrorMsg->throw->err->toString->new->CompilerException->finally
Parser#createAST(Stylesheet):::Instanciates a SAX2 parser and generate the AST from the input.:::try->if->stylesheet->parseContents->elements->stylesheet->elements->while->elements->hasNext->child->elements->next->if->l->getLineNumber->err->new->ErrorMsg->reportError->if->errorsFound->stylesheet->typeCheck->catch->new->ErrorMsg->reportError->finally
Parser#parse(XMLReader, InputSource):::Parses a stylesheet and builds the internal abstract syntax tree:::try->reader->setContentHandler->reader->parse->return->getStylesheet->catch->if->_xsltc->debug->e->printStackTrace->new->ErrorMsg->reportError->ex->e->getException->if->_xsltc->debug->e->printStackTrace->if->ex->printStackTrace->new->ErrorMsg->reportError->if->_xsltc->debug->e->printStackTrace->new->ErrorMsg->reportError->if->_xsltc->debug->e->printStackTrace->new->ErrorMsg->reportError->finally->return
Parser#parse(InputSource):::Parses a stylesheet and builds the internal abstract syntax tree:::try->reader->JdkXmlUtils->_xsltc->isSecureProcessing->getXMLReader->JdkXmlUtils->_xsltc->getProperty->setXMLReaderPropertyIfSupport->supportCatalog->useCatalog->_xsltc->getFeature->try->reader->setFeature->catch->finally->if->try->cf->_xsltc->getProperty->if->foreach->values->reader->f->getPropertyName->cf->get->setProperty->catch->finally->lastProperty->try->securityManager->_xsltc->getProperty->foreach->values->limit->apiProperty->reader->securityManager->getLimitValueAsString->setProperty->if->securityManager->printEntityCountInfo->reader->setProperty->catch->XMLSecurityManager->reader->getClass->getName->printWarning->finally->JdkXmlUtils->_xsltc->getProperty->setXMLReaderPropertyIfSupport->return->parse->catch->e->getMessage->new->ErrorMsg->reportError->finally->return
Parser#setPIParameters(String, String, String):::Set the parameters to use to locate the correct <?xml-stylesheet ...?> processing instruction in the case where the input document is an XML document with one or more references to a stylesheet.:::
Parser#parseExpression(SyntaxTreeNode, String):::Parse an XPath expression::::return->parseTopLevel
Parser#parseExpression(SyntaxTreeNode, String, String):::Parse an XPath expression::::exp->parent->getAttribute->if->exp->length->return->parseTopLevel
Parser#parsePattern(SyntaxTreeNode, String):::Parse an XPath pattern::::return->parseTopLevel
Parser#parsePattern(SyntaxTreeNode, String, String):::Parse an XPath pattern::::pattern->parent->getAttribute->if->pattern->length->return->parseTopLevel
Parser#errorsFound():::Returns true if there were any errors during compilation:::return->_errors->size
Parser#printErrors():::Prints all compile-time errors:::size->_errors->size->if->new->ErrorMsg->println->for->i
Parser#printWarnings():::Prints all compile-time warnings:::size->_warnings->size->if->new->ErrorMsg->println->for->i
Parser#reportError(int, ErrorMsg):::Common error/warning message handler:::switch->_errors->add->break->_errors->add->break->_errors->add->break->_errors->add->break->_warnings->add->break
Parser#startDocument():::SAX2: Receive notification of the beginning of a document.:::new->Stack<>
Parser#endDocument():::SAX2: Receive notification of the end of a document.:::
Parser#startPrefixMapping(String, String):::SAX2: Begin the scope of a prefix-URI Namespace mapping:::if->new->HashMap<>->_prefixMapping->put
Parser#endPrefixMapping(String):::SAX2: End the scope of a prefix-URI Namespace mapping:::
Parser#startElement(String, String, String, Attributes):::SAX2: Receive notification of the beginning of an element:::col->qname->lastIndexOf->prefix->qname->substring->element->makeInstance->if->err->new->ErrorMsg->throw->err->toString->new->SAXException->if->if->_prefixMapping->containsValue->else->else->parent->_parentStack->peek->if->element->getClass->isAssignableFrom->parent->notTypeOf->err->new->ErrorMsg->throw->err->toString->new->SAXException->parent->addElement->element->setParent->element->new->AttributesImpl->setAttributes->element->setPrefixMapping->if->getSymbolTable->setCurrentNode->declareExtensionPrefixes->_parentStack->push
Parser#endElement(String, String, String):::SAX2: Receive notification of the end of an element.:::_parentStack->pop
Parser#characters(char[], int, int):::SAX2: Receive notification of character data.:::string->new->String->parent->_parentStack->peek->if->string->length->return->if->setText->return->if->return->bro->parent->lastChild->if->text->if->text->isTextElement->if->text->setText->return->parent->new->Text->addElement
Parser#processingInstruction(String, String):::SAX2: Receive notification of a processing instruction:::if->name->equals->href->media->title->charset->tokens->new->StringTokenizer->while->tokens->hasMoreElements->token->tokens->nextElement->if->token->startsWith->getTokenValue->else->if->token->startsWith->getTokenValue->else->if->token->startsWith->getTokenValue->else->if->token->startsWith->getTokenValue->if->_PImedia->equals->_PImedia->equals->_PImedia->equals
Parser#ignorableWhitespace(char[], int, int):::IGNORED - all ignorable whitespace is ignored:::
Parser#skippedEntity(String):::IGNORED - we do not have to do anything with skipped entities:::
Parser#setDocumentLocator(Locator):::Store the document locator to later retrieve line numbers of all elements from the stylesheet:::
Pattern#typeCheck(SymbolTable):::Returns the type of a pattern, which is always a NodeType:::
Pattern#translate(ClassGenerator, MethodGenerator):::Translate this node into JVM bytecodes:::
Pattern#getPriority():::Returns the priority of this pattern (section 5.5 in the XSLT spec).:::
Predicate#setParser(Parser):::Set the parser for this expression.:::super->setParser->_exp->setParser
Predicate#isNthPositionFilter():::Returns a boolean value indicating if the nth position optimization is on:::return
Predicate#isNthDescendant():::Returns a boolean value indicating if the nth descendant optimization is on:::return
Predicate#dontOptimize():::Turns off all optimizations for this predicate.:::
Predicate#hasPositionCall():::Returns true if the expression in this predicate contains a call to position().:::return->_exp->hasPositionCall
Predicate#hasLastCall():::Returns true if the expression in this predicate contains a call to last().:::return->_exp->hasLastCall
Predicate#inInnerClass():::Returns true if this closure is compiled in an inner class (i.e:::return
Predicate#getParentClosure():::Returns a reference to its parent closure or null if outermost.:::if->node->getParent->do->if->break->if->break->node->getParent->while->return
Predicate#getInnerClassName():::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.:::return
Predicate#addVariable(VariableRefBase):::Add new variable to the closure.:::if->new->ArrayList<>->if->_closureVars->contains->_closureVars->add->parentClosure->getParentClosure->if->parentClosure->addVariable
Predicate#getPosType():::Returns the node type of the expression owning this predicate:::if->parent->getParent->if->getNodeType->else->if->path->exp->path->getPath->if->getNodeType->else->if->ref->var->ref->getVariable->exp->var->getExpression->if->getNodeType->else->if->getNodeType->return
Predicate#typeCheck(SymbolTable):::Type check a predicate expression:::texp->_exp->typeCheck->if->new->CastExpr->if->new->CastExpr->new->CastExpr->_exp->typeCheck->if->if->new->CastExpr->if->_exp->hasLastCall->_exp->hasPositionCall->if->parent->getParent->parent->getParent->return->position->getParser->getQNameIgnoreDefaultNs->positionCall->new->PositionCall->positionCall->getParser->setParser->positionCall->setParent->new->EqualityExpr->if->_exp->typeCheck->new->CastExpr->return->else->if->new->CastExpr->return
Predicate#isBooleanTest():::Returns true if the predicate is a test for the existance of an element or attribute:::return
Predicate#isNodeValueTest():::Method to see if we can optimise the predicate by using a specialised iterator for expressions like '/foo/bar[@attr = $var]', which are very common in many stylesheets:::if->return->return->getStep->getCompareValue
Predicate#getStep():::Returns the step in an expression of the form 'step = value':::if->return->if->return->if->exp->left->exp->getLeft->right->exp->getRight->if->getExpr->if->if->getExpr->if->return
Predicate#getCompareValue():::Returns the value in an expression of the form 'step = value':::if->return->if->return->if->exp->left->exp->getLeft->right->exp->getRight->if->return->if->left->getType->return->if->return->if->right->getType->return->return
Predicate#translateFilter(ClassGenerator, MethodGenerator):::Translate a predicate expression:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->compileFilter->il->cpg->addClass->new->NEW->append->il->append->il->cpg->addMethodref->new->INVOKESPECIAL->append->length->_closureVars->size->for->i
Predicate#translate(ClassGenerator, MethodGenerator):::Translate a predicate expression:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->_exp->translate->else->if->isNodeValueTest->getParent->_value->translate->il->cpg->addClass->new->CHECKCAST->append->il->getOp->new->PUSH->append->else->translateFilter
RelationalExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::if->_left->hasPositionCall->return->if->_right->hasPositionCall->return->return
RelationalExpr#hasLastCall():::Returns true if this expressions contains a call to last():::return->_left->hasLastCall->_right->hasLastCall
SimpleAttributeValue#typeCheck(SymbolTable):::Returns this attribute value's type (String).:::return
SimpleAttributeValue#translate(ClassGenerator, MethodGenerator):::Translate this attribute value into JVM bytecodes that pushes the attribute value onto the JVM's stack.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->il->new->PUSH->append
Sort#inInnerClass():::Returns true if this closure is compiled in an inner class (i.e:::return
Sort#getParentClosure():::Returns a reference to its parent closure or null if outermost.:::return
Sort#getInnerClassName():::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.:::return
Sort#addVariable(VariableRefBase):::Add new variable to the closure.:::if->new->ArrayList<>->if->_closureVars->contains->_closureVars->add
Sort#parseContents(Parser):::Parse the attributes of the xsl:sort element:::parent->getParent->if->reportError->return->parser->parseExpression->val->getAttribute->if->val->length->AttributeValue->create->getAttribute->if->val->length->try->type->_select->parser->getSymbolTable->typeCheck->if->else->catch->finally->AttributeValue->create->getAttribute->AttributeValue->create->getAttribute->AttributeValue->create
Sort#typeCheck(SymbolTable):::Run type checks on the attributes; expression must return a string which we will use as a sort key:::tselect->_select->typeCheck->if->new->CastExpr->_order->typeCheck->_caseOrder->typeCheck->_dataType->typeCheck->_lang->typeCheck->return
Sort#translateSortType(ClassGenerator, MethodGenerator):::These two methods are needed in the static methods that compile the overloaded NodeSortRecord.compareType() and NodeSortRecord.sortOrder():::_dataType->translate
Sort#translateSelect(ClassGenerator, MethodGenerator):::This method compiles code for the select expression for this xsl:sort element:::_select->translate
Sort#translate(ClassGenerator, MethodGenerator):::This method should not produce any code:::
Sort#translateSortIterator(ClassGenerator, MethodGenerator, Expression, List):::Compiles code that instantiates a SortingIterator object:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->init->cpg->addMethodref->nodesTemp->methodGen->Util->getJCRefType->addLocalVariable->sortRecordFactoryTemp->methodGen->Util->getJCRefType->addLocalVariable->if->children->cpg->addInterfaceMethodref->il->methodGen->loadDOM->append->il->new->PUSH->append->il->new->INVOKEINTERFACE->append->else->nodeSet->translate->nodesTemp->il->nodesTemp->getIndex->new->ASTORE->append->setStart->compileSortRecordFactory->sortRecordFactoryTemp->il->sortRecordFactoryTemp->getIndex->new->ASTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->nodesTemp->il->nodesTemp->getIndex->new->ALOAD->append->setEnd->sortRecordFactoryTemp->il->sortRecordFactoryTemp->getIndex->new->ALOAD->append->setEnd->il->new->INVOKESPECIAL->append
Sort#compileSortRecordFactory(List, ClassGenerator, MethodGenerator):::Compiles code that instantiates a NodeSortRecordFactory object which will produce NodeSortRecord objects of a specific type.:::sortRecordClass->compileSortRecord->needsSortRecordFactory->nsorts->sortObjects->size->for->i->sortRecordFactoryClass->if->compileSortRecordFactory->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->sortOrderTemp->methodGen->Util->getJCRefType->addLocalVariable->il->new->PUSH->append->il->cpg->addClass->new->ANEWARRAY->append->for->level->sortOrderTemp->il->sortOrderTemp->getIndex->new->ASTORE->append->setStart->sortTypeTemp->methodGen->Util->getJCRefType->addLocalVariable->il->new->PUSH->append->il->cpg->addClass->new->ANEWARRAY->append->for->level->sortTypeTemp->il->sortTypeTemp->getIndex->new->ASTORE->append->setStart->sortLangTemp->methodGen->Util->getJCRefType->addLocalVariable->il->new->PUSH->append->il->cpg->addClass->new->ANEWARRAY->append->for->level->sortLangTemp->il->sortLangTemp->getIndex->new->ASTORE->append->setStart->sortCaseOrderTemp->methodGen->Util->getJCRefType->addLocalVariable->il->new->PUSH->append->il->cpg->addClass->new->ANEWARRAY->append->for->level->sortCaseOrderTemp->il->sortCaseOrderTemp->getIndex->new->ASTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->il->methodGen->loadDOM->append->il->new->PUSH->append->il->classGen->loadTranslet->append->sortOrderTemp->il->sortOrderTemp->getIndex->new->ALOAD->append->setEnd->sortTypeTemp->il->sortTypeTemp->getIndex->new->ALOAD->append->setEnd->sortLangTemp->il->sortLangTemp->getIndex->new->ALOAD->append->setEnd->sortCaseOrderTemp->il->sortCaseOrderTemp->getIndex->new->ALOAD->append->setEnd->il->cpg->addMethodref->new->INVOKESPECIAL->append->dups->new->ArrayList<>->for->j
SourceLoader#loadSource(String, String, XSLTC):::This interface is used to plug external document loaders into XSLTC (used with the <xsl:include> and <xsl:import> elements.:::
StartsWithCall#typeCheck(SymbolTable):::Type check the two parameters for this function:::if->argumentCount->err->getName->new->ErrorMsg->throw->new->TypeCheckError->argument->baseType->_base->typeCheck->if->new->CastExpr->argument->tokenType->_token->typeCheck->if->new->CastExpr->return
StartsWithCall#translate(ClassGenerator, MethodGenerator):::Compile the expression - leave boolean expression on stack:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->_base->translate->_token->translate->il->cpg->addMethodref->new->INVOKEVIRTUAL->append
Step#setParser(Parser):::Set the parser for this element and all child predicates:::super->setParser->if->n->_predicates->size->for->i
Step#getAxis():::Define the axis (defined in Axis class) for this step:::return
Step#setAxis(int):::Get the axis (defined in Axis class) for this step:::
Step#getNodeType():::Returns the node-type for this step:::return
Step#getPredicates():::Returns the vector containing all predicates for this step.:::return
Step#addPredicates(List):::Returns the vector containing all predicates for this step.:::if->else->_predicates->addAll
Step#isAbbreviatedDot():::True if this step is the abbreviated step '.':::return
Step#isAbbreviatedDDot():::True if this step is the abbreviated step '..':::return
Step#typeCheck(SymbolTable):::Type check this step:::hasPredicates->if->isAbbreviatedDot->hasParentPattern->hasPredicates->hasParentLocationPath->else->if->foreach->pred->typeCheck->return
Step#translate(ClassGenerator, MethodGenerator):::Translate a step by pushing the appropriate iterator onto the stack:::hasPredicates->_predicates->size->translateStep
Step#translatePredicates(ClassGenerator, MethodGenerator, int):::Translate a sequence of predicates:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->idx->if->translateStep->else->predicate->_predicates->get->if->predicate->isNodeValueTest->step->predicate->getStep->il->methodGen->loadDOM->append->if->step->isAbbreviatedDot->translateStep->il->new->ICONST->append->else->path->new->ParentLocationPath->try->path->getParser->getSymbolTable->typeCheck->catch->finally->translateStep->path->translateStep->il->new->ICONST->append->predicate->translate->cpg->addInterfaceMethodref->il->new->INVOKEINTERFACE->append->else->if->predicate->isNthDescendant->il->methodGen->loadDOM->append->il->predicate->getPosType->new->PUSH->append->predicate->translate->il->new->ICONST->append->cpg->addInterfaceMethodref->il->new->INVOKEINTERFACE->append->else->if->predicate->isNthPositionFilter->cpg->addMethodref->translatePredicates->iteratorTemp->methodGen->Util->getJCRefType->addLocalVariable->iteratorTemp->il->iteratorTemp->getIndex->new->ASTORE->append->setStart->predicate->translate->predicateValueTemp->methodGen->Util->getJCRefType->addLocalVariable->predicateValueTemp->il->predicateValueTemp->getIndex->new->ISTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->iteratorTemp->il->iteratorTemp->getIndex->new->ALOAD->append->setEnd->predicateValueTemp->il->predicateValueTemp->getIndex->new->ILOAD->append->setEnd->il->new->INVOKESPECIAL->append->else->cpg->addMethodref->translatePredicates->iteratorTemp->methodGen->Util->getJCRefType->addLocalVariable->iteratorTemp->il->iteratorTemp->getIndex->new->ASTORE->append->setStart->predicate->translateFilter->filterTemp->methodGen->Util->getJCRefType->addLocalVariable->filterTemp->il->filterTemp->getIndex->new->ASTORE->append->setStart->il->cpg->addClass->new->NEW->append->il->append->iteratorTemp->il->iteratorTemp->getIndex->new->ALOAD->append->setEnd->filterTemp->il->filterTemp->getIndex->new->ALOAD->append->setEnd->il->methodGen->loadCurrentNode->append->il->classGen->loadTranslet->append->if->classGen->isExternal->className->classGen->getClassName->il->cpg->addClass->new->CHECKCAST->append->il->new->INVOKESPECIAL->append
Step#toString():::Returns a string representation of this step.:::buffer->new->StringBuffer->buffer->Axis->getNames->append->append->append->if->foreach->buffer->append->pred->toString->append->return->buffer->append->toString
Stylesheet#getOutputMethod():::Return the output method:::return
Stylesheet#getMinimumDescendantPrecedence():::Get the minimum of the precedence of this stylesheet, any stylesheet imported by this stylesheet and any include/import descendant of this stylesheet.:::if->min->getImportPrecedence->inclImpCount->_includedStylesheets->size->for->i->return
Stylesheet#hasGlobals():::Returns true if this stylesheet has global vars or params.:::return->_globals->size
Stylesheet#hasLocalParams():::Returns true if at least one template in the stylesheet has params defined:::if->templates->getAllValidTemplates->n->templates->size->for->i->return->else->return->_hasLocalParams->booleanValue
Stylesheet#addPrefixMapping(String, String):::Adds a single prefix mapping to this syntax tree node.:::if->prefix->equals->uri->equals->return->super->addPrefixMapping
Stylesheet#parseContents(Parser):::Parse the version and uri fields of the stylesheet and add an entry to the symbol table mapping the name <tt>__stylesheet_</tt> to an instance of this class.:::stable->parser->getSymbolTable->addPrefixMapping->sheet->stable->addStylesheet->if->err->new->ErrorMsg->parser->reportError->if->stable->excludeURI->template->new->Template->template->parseSimplified->else->parseOwnChildren
Stylesheet#parseOwnChildren(Parser):::Parse all direct children of the <xsl:stylesheet/> element.:::stable->parser->getSymbolTable->excludePrefixes->getAttribute->extensionPrefixes->getAttribute->stable->pushExcludedNamespacesContext->stable->excludeURI->stable->excludeNamespaces->stable->excludeNamespaces->contents->getContents->count->contents->size->for->i->for->i->stable->popExcludedNamespacesContext
Stylesheet#typeCheck(SymbolTable):::Type check all the children of this node.:::count->_globals->size->for->i->return->typeCheckContents
Stylesheet#translate(ClassGenerator, MethodGenerator):::Translate the stylesheet into JVM bytecodes.:::translate
Stylesheet#translate():::Translate the stylesheet into JVM bytecodes.:::getXSLTC->getClassName->classGen->new->ClassGenerator->addDOMField->compileTransform->elements->elements->while->elements->hasNext->element->elements->next->if->template->template->getModeName->getMode->addTemplate->else->if->translate->else->if->output->if->output->enabled->else->checkOutputMethod->processModes->compileModes->compileStaticInitializer->compileConstructor->if->getParser->errorsFound->getXSLTC->classGen->getJavaClass->dumpClass
SymbolTable#addPrimop(String, MethodType):::Add a primitive operator or function to the symbol table:::methods->_primops->get->if->_primops->new->ArrayList<>->put->methods->add
SymbolTable#lookupPrimop(String):::Lookup a primitive operator or function in the symbol table by prepending the prefix <tt>PrimopPrefix</tt>.:::return->_primops->get
SymbolTable#addPrefixAlias(String, String):::Adds an alias for a namespace prefix:::if->new->HashMap<>->_aliases->put
SymbolTable#lookupPrefixAlias(String):::Retrieves any alias for a given namespace prefix:::if->return->return->_aliases->get
SymbolTable#excludeURI(String):::Register a namespace URI so that it will not be declared in the output unless it is actually referenced in the output.:::if->return->if->new->HashMap<>->refcnt->_excludedURI->get->if->else->_excludedURI->put
SymbolTable#excludeNamespaces(String):::Exclude a series of namespaces given by a list of whitespace separated namespace prefixes.:::if->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->prefix->tokens->nextToken->uri->if->prefix->equals->lookupNamespace->else->lookupNamespace->if->excludeURI
SymbolTable#isExcludedNamespace(String):::Check if a namespace should not be declared in the output (unless used):::if->refcnt->_excludedURI->get->return->return
SymbolTable#unExcludeNamespaces(String):::Turn of namespace declaration exclusion:::if->return->if->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->prefix->tokens->nextToken->uri->if->prefix->equals->lookupNamespace->else->lookupNamespace->refcnt->_excludedURI->get->if->_excludedURI->put
SymbolTable#pushExcludedNamespacesContext():::Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet:::if->new->Stack<>->_excludedURIStack->push
SymbolTable#popExcludedNamespacesContext():::Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet:::_excludedURIStack->pop->if->_excludedURIStack->isEmpty
SyntaxTreeNode#setLineNumber(int):::Set the source file line number for this element:::
SyntaxTreeNode#getLineNumber():::Get the source file line number for this element:::if->return->parent->getParent->return->parent->getLineNumber
SyntaxTreeNode#setQName(QName):::Set the QName for the syntax tree node.:::
SyntaxTreeNode#setQName(String, String, String):::Set the QName for the SyntaxTreeNode:::new->QName
SyntaxTreeNode#getQName():::Set the QName for the SyntaxTreeNode:::return
SyntaxTreeNode#setAttributes(AttributesImpl):::Set the attributes for this SyntaxTreeNode.:::
SyntaxTreeNode#getAttribute(String):::Returns a value for an attribute from the source element.:::if->return->value->_attributes->getValue->return->value->equals
SyntaxTreeNode#getAttributes():::Returns a list of all attributes declared for the element represented by this syntax tree node.:::return
SyntaxTreeNode#setPrefixMapping(Map):::Sets the prefix mapping for the namespaces that were declared in this element:::
SyntaxTreeNode#getPrefixMapping():::Returns a Map containing the prefix mappings that were declared for this element:::return
SyntaxTreeNode#addPrefixMapping(String, String):::Adds a single prefix mapping to this syntax tree node.:::if->new->HashMap<>->_prefixMapping->put
SyntaxTreeNode#lookupNamespace(String):::Returns any namespace URI that is in scope for a given prefix:::uri->if->_prefixMapping->get->if->_parent->lookupNamespace->if->return
SyntaxTreeNode#lookupPrefix(String):::Returns any namespace prefix that is mapped to a prefix in the current scope:::prefix->if->_prefixMapping->containsValue->foreach->_prefixMapping->entrySet->entry->getKey->mapsTo->entry->getValue->if->mapsTo->equals->return->else->if->_parent->lookupPrefix->if->return
SyntaxTreeNode#setParser(Parser):::Set this node's parser:::
SyntaxTreeNode#getParser():::Returns this node's XSLT parser.:::return
SyntaxTreeNode#setParent(SyntaxTreeNode):::Set this syntax tree node's parent node, if unset:::if
SyntaxTreeNode#getParent():::Returns this syntax tree node's parent node.:::return
SyntaxTreeNode#isDummy():::Returns 'true' if this syntax tree node is the Sentinal node.:::return
SyntaxTreeNode#getImportPrecedence():::Get the import precedence of this element:::stylesheet->getStylesheet->if->return->return->stylesheet->getImportPrecedence
SyntaxTreeNode#getStylesheet():::Get the Stylesheet node that represents the <xsl:stylesheet/> element that this node occured under.:::if->parent->while->if->return->parent->getParent->return
SyntaxTreeNode#getTemplate():::Get the Template node that represents the <xsl:template/> element that this node occured under:::if->parent->while->parent->getParent->return
SyntaxTreeNode#getXSLTC():::Returns a reference to the XSLTC (XSLT compiler) in use.:::return->_parser->getXSLTC
SyntaxTreeNode#getSymbolTable():::Returns the XSLT parser's symbol table.:::return->_parser->getSymbolTable
SyntaxTreeNode#parseContents(Parser):::Parse the contents of this syntax tree nodes (child nodes, XPath expressions, patterns and functions):::parseChildren
SyntaxTreeNode#parseChildren(Parser):::Parse all children of this syntax tree node:::locals->foreach->parser->getSymbolTable->setCurrentNode->child->parseContents->varOrParamName->updateScope->if->if->new->ArrayList<>->locals->add->parser->getSymbolTable->setCurrentNode->if->foreach->parser->removeVariable
SyntaxTreeNode#updateScope(Parser, SyntaxTreeNode):::Add a node to the current scope and return name of a variable or parameter if the node represents a variable or a parameter.:::if->var->parser->addVariable->return->var->getName->else->if->param->parser->addParameter->return->param->getName->else->return
SyntaxTreeNode#typeCheck(SymbolTable):::Type check the children of this node:::
SyntaxTreeNode#typeCheckContents(SymbolTable):::Call typeCheck() on all child syntax tree nodes.:::foreach->item->typeCheck->return
SyntaxTreeNode#translate(ClassGenerator, MethodGenerator):::Translate this abstract syntax tree node into JVM bytecodes.:::
SyntaxTreeNode#translateContents(ClassGenerator, MethodGenerator):::Call translate() on all child syntax tree nodes.:::n->elementCount->foreach->methodGen->markChunkStart->item->translate->methodGen->markChunkEnd->for->i
SyntaxTreeNode#notTypeOf(Class):::Checks whether any children of this node is not of the specified type.:::if->_contents->size->foreach->if->item->getClass->isAssignableFrom->return->return
SyntaxTreeNode#compileResultTree(ClassGenerator, MethodGenerator):::Utility method used by parameters and variables to store result trees:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->stylesheet->classGen->getStylesheet->isSimple->isSimpleRTF->isAdaptive->if->isAdaptiveRTF->rtfType->il->methodGen->loadHandler->append->DOM_CLASS->classGen->getDOMClass->il->methodGen->loadDOM->append->index->cpg->addInterfaceMethodref->il->new->PUSH->append->il->new->PUSH->append->il->stylesheet->callsNodeset->new->PUSH->append->il->new->INVOKEINTERFACE->append->il->append->cpg->addInterfaceMethodref->il->new->INVOKEINTERFACE->append->il->append->il->methodGen->storeHandler->append->il->methodGen->startDocument->append->translateContents->il->methodGen->loadHandler->append->il->methodGen->endDocument->append->if->stylesheet->callsNodeset->DOM_CLASS->equals->cpg->addMethodref->il->cpg->addClass->new->NEW->append->il->new->DUP_X1->append->il->append->if->stylesheet->callsNodeset->il->new->ICONST->append->il->cpg->addClass->new->ANEWARRAY->append->il->append->il->append->il->new->ICONST->append->il->new->NEWARRAY->append->il->append->il->new->INVOKESPECIAL->append->else->il->append->il->cpg->addFieldref->new->GETFIELD->append->il->append->il->cpg->addFieldref->new->GETFIELD->append->il->append->il->cpg->addFieldref->new->GETFIELD->append->il->append->il->cpg->addFieldref->new->GETFIELD->append->il->new->INVOKESPECIAL->append->il->append->il->methodGen->loadDOM->append->il->cpg->classGen->getDOMClass->addClass->new->CHECKCAST->append->il->append->cpg->addMethodref->il->new->INVOKEVIRTUAL->append->il->append->il->append->il->methodGen->storeHandler->append
SyntaxTreeNode#contextDependent():::Returns true if this expression/instruction depends on the context:::return
SyntaxTreeNode#dependentContents():::Return true if any of the expressions/instructions in the contents of this node is context dependent.:::foreach->if->item->contextDependent->return->return
SyntaxTreeNode#addElement(SyntaxTreeNode):::Adds a child node to this syntax tree node.:::_contents->add->element->setParent
SyntaxTreeNode#setFirstElement(SyntaxTreeNode):::Inserts the first child node of this syntax tree node:::_contents->add->element->setParent
SyntaxTreeNode#removeElement(SyntaxTreeNode):::Removed a child node of this syntax tree node.:::_contents->remove->element->setParent
SyntaxTreeNode#getContents():::Returns a List containing all the child nodes of this node.:::return
SyntaxTreeNode#hasContents():::Tells you if this node has any child nodes.:::return->elementCount
SyntaxTreeNode#elementCount():::Returns the number of children this node has.:::return->_contents->size
SyntaxTreeNode#elements():::Returns an Iterator of all child nodes of this node.:::return->_contents->iterator
SyntaxTreeNode#elementAt(int):::Returns a child node at a given position.:::return->_contents->get
SyntaxTreeNode#lastChild():::Returns this element's last child:::if->_contents->isEmpty->return->return->_contents->_contents->size->get
SyntaxTreeNode#display(int):::Displays the contents of this syntax tree node (to stdout):::displayContents
SyntaxTreeNode#displayContents(int):::Displays the contents of this syntax tree node (to stdout):::foreach->item->display
SyntaxTreeNode#indent(int):::Set the indentation level for debug output.:::new->String->print
SyntaxTreeNode#reportError(SyntaxTreeNode, Parser, String, String):::Report an error to the parser.:::error->new->ErrorMsg->parser->reportError
SyntaxTreeNode#reportWarning(SyntaxTreeNode, Parser, String, String):::Report a recoverable error to the parser.:::error->new->ErrorMsg->parser->reportError
Template#compareTo(Object):::Compare this template to another:::other->if->return->else->if->return->else->if->return->else->if->return->else->return
Template#parseSimplified(Stylesheet, Parser):::When the parser realises that it is dealign with a simplified stylesheet it will create an empty Stylesheet object with the root element of the stylesheet (a LiteralElement object) as its only child:::setParent->parser->parsePattern->contents->_stylesheet->getContents->root->contents->get->if->addElement->root->setParent->contents->set->parser->setTemplate->root->parseContents->parser->setTemplate
TestSeq#toString():::Returns a string representation of this test sequence:::count->_patterns->size->result->new->StringBuffer->for->i->return->result->toString
TestSeq#getInstructionList():::Returns the instruction list for this test sequence:::return
TestSeq#getPriority():::Return the highest priority for a pattern in this test sequence:::template->_patterns->isEmpty->_patterns->get->getTemplate->return->template->getPriority
TestSeq#getPosition():::Returns the position of the highest priority pattern in this test sequence.:::template->_patterns->isEmpty->_patterns->get->getTemplate->return->template->getPosition
TestSeq#reduce():::Reduce the patterns in this test sequence:::newPatterns->new->ArrayList<>->foreach->pattern->reduceKernelPattern->if->pattern->isWildcard->pattern->getTemplate->break->else->newPatterns->add
TestSeq#findTemplates(Map):::Returns, by reference, the templates that are included in this test sequence:::if->templates->put->foreach->templates->pattern->getTemplate->put
TestSeq#compile(ClassGenerator, MethodGenerator, InstructionHandle):::Compile the code for this test sequence:::if->return->count->_patterns->size->if->return->getTemplateHandle->fail->getTemplateHandle->for->n->return
Text#getText():::Returns the text wrapped inside this node:::return
Text#setText(String):::Set the text for this node:::if->else
Text#canLoadAsArrayOffsetLength():::Check whether this Text node can be stored in a char[] in the translet:::return->_text->length
Text#loadAsArrayOffsetLength(ClassGenerator, MethodGenerator):::Generates code that loads the array that will contain the character data represented by this Text node, followed by the offset of the data from the start of the array, and then the length of the data:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->xsltc->classGen->getParser->getXSLTC->offset->xsltc->addCharacterData->length->_text->length->charDataFieldName->xsltc->getCharacterDataCount->il->cpg->xsltc->getClassName->addFieldref->new->GETSTATIC->append->il->new->PUSH->append->il->_text->length->new->PUSH->append
TopLevelElement#typeCheck(SymbolTable):::Type check all the children of this node.:::return->typeCheckContents
TopLevelElement#translate(ClassGenerator, MethodGenerator):::Translate this node into JVM bytecodes.:::msg->getClass->new->ErrorMsg->getParser->reportError
TopLevelElement#compile(ClassGenerator, MethodGenerator):::Translate this node into a fresh instruction list:::result->save->methodGen->getInstructionList->methodGen->new->InstructionList->setInstructionList->translate->methodGen->setInstructionList->return
TopLevelElement#addDependency(TopLevelElement):::Add a dependency with other top-level elements like variables, parameters or keys.:::if->new->ArrayList<>->if->_dependencies->contains->_dependencies->add
TopLevelElement#getDependencies():::Get the list of dependencies with other top-level elements like variables, parameteres or keys.:::return
TransletOutput#display(int):::Displays the contents of this <xsltc:output> element.:::indent->Util->println
TransletOutput#parseContents(Parser):::Parse the contents of this <xsltc:output> element:::filename->getAttribute->append->getAttribute->if->filename->equals->reportError->AttributeValue->create->if->append->toLowerCase->equals->append->toLowerCase->equals->else->parseChildren
TransletOutput#typeCheck(SymbolTable):::Type checks the 'file' attribute (must be able to convert it to a str).:::type->_filename->typeCheck->if->new->CastExpr->typeCheckContents->return
TransletOutput#translate(ClassGenerator, MethodGenerator):::Compile code that opens the give file for output, dumps the contents of the element to the file, then closes the file.:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->isSecureProcessing->classGen->getParser->getXSLTC->isSecureProcessing->isExtensionFunctionEnabled->classGen->getParser->getXSLTC->getFeature->if->index->cpg->addMethodref->il->new->PUSH->append->il->new->INVOKESTATIC->append->return->il->methodGen->loadHandler->append->open->cpg->addMethodref->close->cpg->addMethodref->il->classGen->loadTranslet->append->_filename->translate->il->new->PUSH->append->il->new->INVOKEVIRTUAL->append->il->methodGen->storeHandler->append->translateContents->il->classGen->loadTranslet->append->il->methodGen->loadHandler->append->il->new->INVOKEVIRTUAL->append->il->methodGen->storeHandler->append
UnaryOpExpr#hasPositionCall():::Returns true if this expressions contains a call to position():::return->_left->hasPositionCall
UnaryOpExpr#hasLastCall():::Returns true if this expressions contains a call to last():::return->_left->hasLastCall
UnsupportedElement#setErrorMessage(ErrorMsg):::There are different categories of unsupported elements (believe it or not): there are elements within the XSLT namespace (these would be elements that are not yet implemented), there are extensions of other XSLT processors and there are unrecognised extension elements of this XSLT processor:::
UnsupportedElement#display(int):::Displays the contents of this element:::indent->Util->_qname->getNamespace->_qname->getLocalPart->println->displayContents
UnsupportedElement#parseContents(Parser):::Find any fallback in the descendant nodes; then activate & parse it:::processFallbacks
UnsupportedElement#typeCheck(SymbolTable):::Run type check on the fallback element (if any).:::if->count->_fallbacks->size->for->i->return
UnsupportedElement#translate(ClassGenerator, MethodGenerator):::Translate the fallback element (if any).:::if->count->_fallbacks->size->for->i->else->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->unsupportedElem->cpg->addMethodref->il->getQName->toString->new->PUSH->append->il->new->PUSH->append->il->new->INVOKESTATIC->append
UseAttributeSets#addAttributeSets(String):::This method is made public to enable an AttributeSet object to merge itself with another AttributeSet (including any other AttributeSets the two may inherit from).:::if->setNames->equals->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->qname->getParser->tokens->nextToken->getQNameIgnoreDefaultNs->_sets->add
UseAttributeSets#typeCheck(SymbolTable):::Do nada.:::return
UseAttributeSets#translate(ClassGenerator, MethodGenerator):::Generate a call to the method compiled for this attribute set:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->symbolTable->getParser->getSymbolTable->foreach->attrs->symbolTable->lookupAttributeSet->if->methodName->attrs->getMethodName->il->classGen->loadTranslet->append->il->methodGen->loadDOM->append->il->methodGen->loadIterator->append->il->methodGen->loadHandler->append->il->methodGen->loadCurrentNode->append->method->cpg->classGen->getClassName->addMethodref->il->new->INVOKESPECIAL->append->else->parser->getParser->atrs->name->toString->reportError
Variable#parseContents(Parser):::Parse the contents of the variable:::super->parseContents->parent->getParent->if->var->parser->getSymbolTable->lookupVariable->if->us->this->getImportPrecedence->them->var->getImportPrecedence->if->name->_name->toString->reportError->else->if->copyReferences->return->else->var->copyReferences->var->disable->addVariable->parser->getSymbolTable->addVariable->else
Variable#typeCheck(SymbolTable):::Runs a type check on either the variable element body or the expression in the 'select' attribute:::if->_select->typeCheck->else->if->hasContents->typeCheckContents->else->return
Variable#initialize(ClassGenerator, MethodGenerator):::This method is part of a little trick that is needed to use local variables inside nested for-each loops:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->isLocal->_refs->isEmpty->if->methodGen->getEscapedName->_type->toJCType->addLocalVariable2->if->il->new->ICONST->append->else->if->il->new->DCONST->append->else->il->new->ACONST_NULL->append->_local->il->_type->_local->getIndex->STORE->append->setStart
VariableBase#disable():::Disable this variable/parameter:::
VariableBase#addReference(VariableRefBase):::Add a reference to this variable:::_refs->add
VariableBase#copyReferences(VariableBase):::When a variable is overriden by another, e.g:::size->_refs->size->for->i
VariableBase#mapRegister(MethodGenerator):::Map this variable to a register:::if->il->methodGen->getInstructionList->name->getEscapedName->varType->_type->toJCType->methodGen->il->getEnd->addLocalVariable2
VariableBase#unmapRegister(ClassGenerator, MethodGenerator):::Remove the mapping of this variable to a register:::if->if->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->classGen->getStylesheet->callsNodeset->classGen->getDOMClass->equals->removeDA->cpg->addMethodref->il->methodGen->loadDOM->append->il->cpg->addClass->new->CHECKCAST->append->il->loadInstruction->append->il->cpg->addClass->new->CHECKCAST->append->il->new->INVOKEVIRTUAL->append->release->cpg->addInterfaceMethodref->il->loadInstruction->append->il->new->INVOKEINTERFACE->append->_local->methodGen->getInstructionList->getEnd->setEnd->methodGen->removeLocalVariable
VariableBase#loadInstruction():::Returns an instruction for loading the value of this variable onto the JVM stack.:::if->_type->_local->getIndex->LOAD->return
VariableBase#storeInstruction():::Returns an instruction for storing a value from the JVM stack into this variable.:::if->_type->_local->getIndex->STORE->return
VariableBase#getExpression():::Returns the expression from this variable's select attribute (if any):::return
VariableBase#toString():::Display variable as single string:::return
VariableBase#display(int):::Display variable in a full AST dump:::indent->println->if->indent->_select->toString->println->displayContents
VariableBase#getType():::Returns the type of the variable:::return
VariableBase#getName():::Returns the name of the variable or parameter as it will occur in the compiled translet.:::return
VariableBase#getEscapedName():::Returns the escaped qname of the variable or parameter:::return
VariableBase#setName(QName):::Set the name of the variable or paremeter:::Util->name->getStringRep->escape
VariableBase#isLocal():::Returns the true if the variable is local:::return
VariableBase#parseContents(Parser):::Parse the contents of the <xsl:decimal-format> element.:::name->getAttribute->if->name->length->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->parser->getQNameIgnoreDefaultNs->setName->else->reportError->other->parser->lookupVariable->if->other->getParent->getParent->reportError->getAttribute->if->select->length->getParser->parseExpression->if->_select->isDummy->reportError->return->parseChildren
VariableBase#translateValue(ClassGenerator, MethodGenerator):::Compile the value of the variable, which is either in an expression in a 'select' attribute, or in the variable elements body:::if->_select->translate->if->_select->getType->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->initCNI->cpg->addMethodref->il->cpg->addClass->new->NEW->append->il->append->il->append->il->new->INVOKESPECIAL->append->_select->startIterator->else->if->hasContents->compileResultTree->else->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->il->new->PUSH->append
VariableRefBase#getVariable():::Returns a reference to the associated variable:::return
VariableRefBase#addParentDependency():::If this variable reference is in a top-level element like another variable, param or key, add a dependency between that top-level element and the referenced variable:::node->while->node->getParent->parent->if->var->if->if->parent->getSymbolTable->lookupVariable->else->if->parent->getSymbolTable->lookupParam->parent->addDependency
VariableRefBase#equals(Object):::Two variable references are deemed equal if they refer to the same variable.:::return
VariableRefBase#toString():::Returns a string representation of this variable reference on the format 'variable-ref(<var-name>)'.:::return->_variable->getName->_variable->getType
When#typeCheck(SymbolTable):::Type-check this when element:::if->_test->typeCheck->new->CastExpr->if->typeCheckContents->return
When#translate(ClassGenerator, MethodGenerator):::This method should never be called:::msg->new->ErrorMsg->getParser->reportError
Whitespace.WhitespaceRule#compareTo(WhitespaceRule):::For sorting rules depending on priority:::return
Whitespace#parseContents(Parser):::Parse the attributes of the xsl:strip/preserve-space element:::_qname->getLocalPart->endsWith->parser->getCurrentImportPrecedence->getAttribute->if->_elementList->length->reportError->return->stable->parser->getSymbolTable->list->new->StringTokenizer->elements->new->StringBuffer->while->list->hasMoreElements->token->list->nextToken->prefix->namespace->col->token->indexOf->if->token->substring->lookupNamespace->if->elements->append->append->token->substring->append->else->elements->append->else->elements->append->if->list->hasMoreElements->elements->append->elements->toString
Whitespace#getRules():::De-tokenize the elements listed in the 'elements' attribute and instanciate a set of strip/preserve rules.:::rules->new->ArrayList<>->list->new->StringTokenizer->while->list->hasMoreElements->rules->list->nextToken->new->WhitespaceRule->add->return
Whitespace#translateRules(List, ClassGenerator):::Takes a vector of WhitespaceRule objects and generates a predicate method:::defaultAction->prioritizeRules->if->rules->size->compileDefault->return->compilePredicate->return
Whitespace#typeCheck(SymbolTable):::Type-check contents/attributes - nothing to do...:::return
Whitespace#translate(ClassGenerator, MethodGenerator):::This method should not produce any code:::
WithParam#display(int):::Displays the contents of this element:::indent->Util->println->if->indent->Util->_select->toString->println->displayContents
WithParam#getEscapedName():::Returns the escaped qname of the parameter:::return
WithParam#getName():::Return the name of this WithParam.:::return
WithParam#setName(QName):::Set the name of the variable or paremeter:::Util->name->getStringRep->escape
WithParam#setDoParameterOptimization(boolean):::Set the do parameter optimization flag:::
WithParam#parseContents(Parser):::The contents of a <xsl:with-param> elements are either in the element's 'select' attribute (this has precedence) or in the element body.:::name->getAttribute->if->name->length->if->XML11Char->isXML11ValidQName->err->new->ErrorMsg->parser->reportError->parser->getQNameIgnoreDefaultNs->setName->else->reportError->select->getAttribute->if->select->length->parser->parseExpression->parseChildren
WithParam#typeCheck(SymbolTable):::Type-check either the select attribute or the element body, depending on which is in use.:::if->tselect->_select->typeCheck->if->new->CastExpr->else->typeCheckContents->return
WithParam#translateValue(ClassGenerator, MethodGenerator):::Compile the value of the parameter, which is either in an expression in a 'select' attribute, or in the with-param element's body:::if->_select->translate->_select->startIterator->else->if->hasContents->il->methodGen->getInstructionList->compileResultTree->methodGen->toJCType->il->getEnd->addLocalVariable2->il->append->il->_domAdapter->getIndex->new->ASTORE->append->else->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->il->new->PUSH->append
WithParam#translate(ClassGenerator, MethodGenerator):::This code generates a sequence of bytecodes that call the addParameter() method in AbstractTranslet:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->translateValue->return->name->Util->getEscapedName->escape->il->classGen->loadTranslet->append->il->new->PUSH->append->translateValue->il->new->PUSH->append->il->cpg->addMethodref->new->INVOKEVIRTUAL->append->il->append
WithParam#releaseResultTree(ClassGenerator, MethodGenerator):::Release the compiled result tree.:::if->cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->classGen->getStylesheet->callsNodeset->classGen->getDOMClass->equals->removeDA->cpg->addMethodref->il->methodGen->loadDOM->append->il->cpg->addClass->new->CHECKCAST->append->il->_domAdapter->getIndex->new->ALOAD->append->il->cpg->addClass->new->CHECKCAST->append->il->new->INVOKEVIRTUAL->append->release->cpg->addInterfaceMethodref->il->_domAdapter->getIndex->new->ALOAD->append->il->new->INVOKEINTERFACE->append->_domAdapter->il->getEnd->setEnd->methodGen->removeLocalVariable
XPathLexer#disambiguateAxisOrFunction(int):::If symbol is not followed by '::' or '(', then treat it as a name instead of an axis or function (Jira-1912).:::index->while->isWhitespace->if->return->new->Symbol->return->newSymbol->yytext->newSymbol
XPathLexer#disambiguateOperator(int):::If symbol is first token or if it follows any of the operators listed in http://www.w3.org/TR/xpath#exprlex then treat as a name instead of a keyword (Jira-1912):::switch->if->break->return->yytext->newSymbol->return->newSymbol
XPathParser#production_table():::Access to production table.:::return
XPathParser#action_table():::Access to parse-action table.:::return
XPathParser#reduce_table():::Access to reduce_goto table.:::return
XPathParser#init_actions():::Action encapsulation object initializer.:::new->parser_actions
XPathParser#do_action(int, lr_parser, Stack, int):::Invoke a user supplied parse action.:::return->action_obj->parser_do_action
XPathParser#start_state():::Indicates start state.:::return
XPathParser#start_production():::Indicates start production.:::return
XPathParser#EOF_sym():::EOF Symbol index.:::return
XPathParser#error_sym():::error Symbol index.:::return
XPathParser#createStepPattern(int, Object, List):::This method is similar to findNodeType(int, Object) except that it creates a StepPattern instead of just returning a node type:::nodeType->if->return->new->StepPattern->else->if->return->new->StepPattern->else->name->setPriority->if->name->toString->equals->_xsltc->registerNamespacePrefix->else->uri->name->getNamespace->local->name->getLocalPart->namespace_uri->_parser->getQNameIgnoreDefaultNs->if->local->equals->local->equals->if->new->ArrayList<>->predicates->size->predicates->new->NamespaceUriCall->new->LiteralExpr->new->EqualityExpr->new->Predicate->add->if->local->equals->else->if->local->equals->else->_xsltc->registerAttribute->_xsltc->registerElement->result->new->StepPattern->if->result->setPriority->return
XPathParser#parse(String, int):::Parse the expression passed to the current scanner:::try->return->super->parse->catch->err->e->getMessage->new->ErrorMsg->_parser->reportError->finally->return
XPathParser#lookupName(QName):::Lookup a variable or parameter in the symbol table given its name.:::result->_parser->lookupVariable->if->return->else->return->_symbolTable->lookupName
XPathParser#isElementAxis(int):::Returns true if the axis applies to elements only:::return
parser_actions#parser_do_action(int, lr_parser, Stack, int):::Method with the actual generated action code.:::parser_result->switch->start_val->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->parser_parser->done_parsing->return->pattern->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->expr->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->lpp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->lpp->parser_stack->get->p->parser_stack->get->result->new->AlternativePattern->parser_stack->get->parser_stack->get->new->Symbol->return->result->new->AbsolutePathPattern->parser_stack->get->parser_stack->get->new->Symbol->return->rpp->parser_stack->get->result->new->AbsolutePathPattern->parser_stack->get->parser_stack->get->new->Symbol->return->ikp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ikp->parser_stack->get->rpp->parser_stack->get->result->new->ParentPattern->parser_stack->get->parser_stack->get->new->Symbol->return->ikp->parser_stack->get->rpp->parser_stack->get->result->new->AncestorPattern->parser_stack->get->parser_stack->get->new->Symbol->return->rpp->parser_stack->get->result->new->AncestorPattern->parser_stack->get->parser_stack->get->new->Symbol->return->rpp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->l->parser_stack->get->result->new->IdPattern->parser->setHasIdCall->parser_stack->get->parser_stack->get->new->Symbol->return->l1->parser_stack->get->l2->parser_stack->get->result->new->KeyPattern->parser_stack->get->parser_stack->get->new->Symbol->return->l->parser_stack->get->result->new->ProcessingInstructionPattern->parser_stack->get->parser_stack->get->new->Symbol->return->sp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->sp->parser_stack->get->rpp->parser_stack->get->result->new->ParentPattern->parser_stack->get->parser_stack->get->new->Symbol->return->sp->parser_stack->get->rpp->parser_stack->get->result->new->AncestorPattern->parser_stack->get->parser_stack->get->new->Symbol->return->nt->parser_stack->get->result->parser->createStepPattern->parser_stack->get->parser_stack->get->new->Symbol->return->nt->parser_stack->get->pp->parser_stack->get->result->parser->createStepPattern->parser_stack->get->parser_stack->get->new->Symbol->return->pip->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->pip->parser_stack->get->pp->parser_stack->get->result->pip->setPredicates->parser_stack->get->parser_stack->get->new->Symbol->return->axis->parser_stack->get->nt->parser_stack->get->result->parser->createStepPattern->parser_stack->get->parser_stack->get->new->Symbol->return->axis->parser_stack->get->nt->parser_stack->get->pp->parser_stack->get->result->parser->createStepPattern->parser_stack->get->parser_stack->get->new->Symbol->return->pip->parser_stack->get->result->parser_stack->get->parser_stack->get->new->Symbol->return->pip->parser_stack->get->pp->parser_stack->get->result->pip->setPredicates->parser_stack->get->parser_stack->get->new->Symbol->return->nt->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->qn->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->p->parser_stack->get->temp->new->ArrayList<>->temp->add->parser_stack->get->parser_stack->get->new->Symbol->return->p->parser_stack->get->pp->parser_stack->get->pp->add->parser_stack->get->parser_stack->get->new->Symbol->return->e->parser_stack->get->result->new->Predicate->parser_stack->get->parser_stack->get->new->Symbol->return->ex->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ae->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->oe->parser_stack->get->ae->parser_stack->get->result->new->LogicalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->e->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ae->parser_stack->get->ee->parser_stack->get->result->new->LogicalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->re->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ee->parser_stack->get->re->parser_stack->get->result->new->EqualityExpr->parser_stack->get->parser_stack->get->new->Symbol->return->ee->parser_stack->get->re->parser_stack->get->result->new->EqualityExpr->parser_stack->get->parser_stack->get->new->Symbol->return->ae->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->re->parser_stack->get->ae->parser_stack->get->result->new->RelationalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->re->parser_stack->get->ae->parser_stack->get->result->new->RelationalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->re->parser_stack->get->ae->parser_stack->get->result->new->RelationalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->re->parser_stack->get->ae->parser_stack->get->result->new->RelationalExpr->parser_stack->get->parser_stack->get->new->Symbol->return->me->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ae->parser_stack->get->me->parser_stack->get->result->new->BinOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->ae->parser_stack->get->me->parser_stack->get->result->new->BinOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->ue->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->me->parser_stack->get->ue->parser_stack->get->result->new->BinOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->me->parser_stack->get->ue->parser_stack->get->result->new->BinOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->me->parser_stack->get->ue->parser_stack->get->result->new->BinOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->ue->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ue->parser_stack->get->result->new->UnaryOpExpr->parser_stack->get->parser_stack->get->new->Symbol->return->pe->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->pe->parser_stack->get->rest->parser_stack->get->result->new->UnionPathExpr->parser_stack->get->parser_stack->get->new->Symbol->return->lp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->fexp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->fexp->parser_stack->get->rlp->parser_stack->get->result->new->FilterParentPath->parser_stack->get->parser_stack->get->new->Symbol->return->fexp->parser_stack->get->rlp->parser_stack->get->nodeType->if->parser->getAxis->isElementAxis->step->new->Step->fpp->new->FilterParentPath->new->FilterParentPath->if->fpp->setDescendantAxis->parser_stack->get->parser_stack->get->new->Symbol->return->rlp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->alp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->step->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->rlp->parser_stack->get->step->parser_stack->get->if->isAbbreviatedDot->else->if->isAbbreviatedDot->else->new->ParentLocationPath->parser_stack->get->parser_stack->get->new->Symbol->return->arlp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->new->AbsoluteLocationPath->parser_stack->get->parser_stack->get->new->Symbol->return->rlp->parser_stack->get->result->new->AbsoluteLocationPath->parser_stack->get->parser_stack->get->new->Symbol->return->aalp->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->rlp->parser_stack->get->step->parser_stack->get->right->axis->right->getAxis->type->right->getNodeType->predicates->right->getPredicates->if->if->right->setAxis->if->isAbbreviatedDot->else->left->new->ParentLocationPath->else->if->isAbbreviatedDot->left->new->Step->new->ParentLocationPath->else->left->mid->new->Step->ppl->new->ParentLocationPath->new->ParentLocationPath->else->if->left->middle->new->Step->ppl->new->ParentLocationPath->new->ParentLocationPath->else->left->middle->new->Step->ppl->new->ParentLocationPath->new->ParentLocationPath->parser_stack->get->parser_stack->get->new->Symbol->return->rlp->parser_stack->get->nodeType->if->parser->getAxis->isElementAxis->step->new->Step->result->parser->insertStep->new->AbsoluteLocationPath->parser_stack->get->parser_stack->get->new->Symbol->return->result->ntest->parser_stack->get->if->else->parser->findNodeType->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->result->ntest->parser_stack->get->pp->parser_stack->get->if->step->step->addPredicates->else->parser->findNodeType->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->axis->parser_stack->get->ntest->parser_stack->get->pp->parser_stack->get->result->parser->findNodeType->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->axis->parser_stack->get->ntest->parser_stack->get->result->parser->findNodeType->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->abbrev->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->an->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->result->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->primary->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->primary->parser_stack->get->pp->parser_stack->get->result->new->FilterExpr->parser_stack->get->parser_stack->get->new->Symbol->return->vr->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ex->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->string->parser_stack->get->namespace->index->string->lastIndexOf->if->prefix->string->substring->lookupNamespace->result->new->LiteralExpr->new->LiteralExpr->parser_stack->get->parser_stack->get->new->Symbol->return->result->num->parser_stack->get->if->new->RealExpr->else->if->num->doubleValue->num->doubleValue->new->RealExpr->else->if->num->intValue->num->intValue->new->IntExpr->else->if->num->doubleValue->num->doubleValue->new->RealExpr->else->num->intValue->new->IntExpr->parser_stack->get->parser_stack->get->new->Symbol->return->num->parser_stack->get->result->new->RealExpr->parser_stack->get->parser_stack->get->new->Symbol->return->fc->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->varName->parser_stack->get->node->parser->lookupName->if->if->new->VariableRef->else->if->new->ParameterRef->else->new->UnresolvedRef->if->new->UnresolvedRef->parser_stack->get->parser_stack->get->new->Symbol->return->result->fname->parser_stack->get->if->parser->getQNameIgnoreDefaultNs->new->CurrentCall->else->if->parser->getQNameIgnoreDefaultNs->new->NumberCall->else->if->parser->getQNameIgnoreDefaultNs->new->StringCall->else->if->parser->getQNameIgnoreDefaultNs->new->ConcatCall->else->if->parser->getQNameIgnoreDefaultNs->new->BooleanExpr->else->if->parser->getQNameIgnoreDefaultNs->new->BooleanExpr->else->if->parser->getQNameIgnoreDefaultNs->new->NameCall->else->if->parser->getQNameIgnoreDefaultNs->new->GenerateIdCall->else->if->parser->getQNameIgnoreDefaultNs->new->StringLengthCall->else->if->parser->getQNameIgnoreDefaultNs->new->PositionCall->else->if->parser->getQNameIgnoreDefaultNs->new->LastCall->else->if->parser->getQNameIgnoreDefaultNs->new->LocalNameCall->else->if->parser->getQNameIgnoreDefaultNs->new->NamespaceUriCall->else->new->FunctionCall->parser_stack->get->parser_stack->get->new->Symbol->return->result->fname->parser_stack->get->argl->parser_stack->get->if->parser->getQNameIgnoreDefaultNs->new->ConcatCall->else->if->parser->getQNameIgnoreDefaultNs->new->NumberCall->else->if->parser->getQNameIgnoreDefaultNs->parser->setMultiDocument->new->DocumentCall->else->if->parser->getQNameIgnoreDefaultNs->new->StringCall->else->if->parser->getQNameIgnoreDefaultNs->new->BooleanCall->else->if->parser->getQNameIgnoreDefaultNs->new->NameCall->else->if->parser->getQNameIgnoreDefaultNs->new->GenerateIdCall->else->if->parser->getQNameIgnoreDefaultNs->new->NotCall->else->if->parser->getQNameIgnoreDefaultNs->new->FormatNumberCall->else->if->parser->getQNameIgnoreDefaultNs->new->UnparsedEntityUriCall->else->if->parser->getQNameIgnoreDefaultNs->new->KeyCall->else->if->parser->getQNameIgnoreDefaultNs->new->KeyCall->parser->setHasIdCall->else->if->parser->getQNameIgnoreDefaultNs->new->CeilingCall->else->if->parser->getQNameIgnoreDefaultNs->new->RoundCall->else->if->parser->getQNameIgnoreDefaultNs->new->FloorCall->else->if->parser->getQNameIgnoreDefaultNs->new->ContainsCall->else->if->parser->getQNameIgnoreDefaultNs->new->StringLengthCall->else->if->parser->getQNameIgnoreDefaultNs->new->StartsWithCall->else->if->parser->getQNameIgnoreDefaultNs->new->FunctionAvailableCall->else->if->parser->getQNameIgnoreDefaultNs->new->ElementAvailableCall->else->if->parser->getQNameIgnoreDefaultNs->new->LocalNameCall->else->if->parser->getQNameIgnoreDefaultNs->new->LangCall->else->if->parser->getQNameIgnoreDefaultNs->new->NamespaceUriCall->else->if->parser->getQName->new->CastCall->else->if->fname->getLocalPart->equals->fname->getLocalPart->equals->parser->setCallsNodeset->new->FunctionCall->else->new->FunctionCall->parser_stack->get->parser_stack->get->new->Symbol->return->arg->parser_stack->get->temp->new->ArrayList<>->temp->add->parser_stack->get->parser_stack->get->new->Symbol->return->arg->parser_stack->get->argl->parser_stack->get->argl->add->parser_stack->get->parser_stack->get->new->Symbol->return->fname->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->vname->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->ex->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->nt->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->l->parser_stack->get->name->parser->getQNameIgnoreDefaultNs->exp->new->NameCall->new->LiteralExpr->new->EqualityExpr->predicates->new->ArrayList<>->predicates->new->Predicate->add->result->new->Step->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser_stack->get->parser_stack->get->new->Symbol->return->qn->parser_stack->get->parser_stack->get->parser_stack->get->new->Symbol->return->qname->parser_stack->get->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->result->parser->getQNameIgnoreDefaultNs->parser_stack->get->parser_stack->get->new->Symbol->return->throw->new->Exception
XslAttribute#getName():::Returns the name of the attribute:::return
XslAttribute#display(int):::Displays the contents of the attribute:::indent->Util->println->displayContents
XslAttribute#parseContents(Parser):::Parses the attribute's contents:::generated->stable->parser->getSymbolTable->name->getAttribute->namespace->getAttribute->qname->parser->getQName->prefix->qname->getPrefix->if->prefix->equals->name->equals->reportError->return->Util->isLiteral->if->if->XML11Char->isXML11ValidQName->reportError->return->parent->getParent->siblings->parent->getContents->for->i->parent->elementCount->if->lookupPrefix->new->AttributeValueTemplate->else->if->lookupNamespace->if->new->AttributeValueTemplate->if->if->if->else->stable->generateNamespacePrefix->else->if->prefix->equals->qname->getLocalPart->if->registerNamespace->if->addAttribute->AttributeValue->create->parseChildren
XslElement#display(int):::Displays the contents of the element:::indent->Util->println->displayContents
XslElement#typeCheck(SymbolTable):::Run type check on element name & contents:::if->_name->typeCheck->if->_namespace->typeCheck->typeCheckContents->return
XslElement#translateLiteral(ClassGenerator, MethodGenerator):::This method is called when the name of the element is known at compile time:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->il->methodGen->loadHandler->append->_name->translate->il->append->il->methodGen->startElement->append->if->il->methodGen->loadHandler->append->il->new->PUSH->append->_namespace->translate->il->methodGen->namespace->append->translateContents->if->il->methodGen->endElement->append
XslElement#translate(ClassGenerator, MethodGenerator):::At runtime the compilation of xsl:element results in code that: (i) evaluates the avt for the name, (ii) checks for a prefix in the name (iii) generates a new prefix and create a new qname when necessary (iv) calls startElement() on the handler (v) looks up a uri in the XML when the prefix is not known at compile time (vi) calls namespace() on the handler (vii) evaluates the contents (viii) calls endElement().:::cpg->classGen->getConstantPool->il->methodGen->getInstructionList->if->translateLiteral->return->if->nameValue->methodGen->Util->getJCRefType->addLocalVariable2->_name->translate->nameValue->il->nameValue->getIndex->new->ASTORE->append->setStart->il->nameValue->getIndex->new->ALOAD->append->check->cpg->addMethodref->il->new->INVOKESTATIC->append->il->methodGen->loadHandler->append->nameValue->il->nameValue->getIndex->new->ALOAD->append->setEnd->if->_namespace->translate->else->il->append->il->methodGen->loadHandler->append->il->methodGen->loadDOM->append->il->methodGen->loadCurrentNode->append->il->cpg->addMethodref->new->INVOKESTATIC->append->translateContents->if->il->methodGen->endElement->append
XslElement#translateContents(ClassGenerator, MethodGenerator):::Override this method to make sure that xsl:attributes are not copied to output if this xsl:element is to be ignored:::n->elementCount->for->i
XSLTC#setSecureProcessing(boolean):::Set the state of the secure processing feature.:::
XSLTC#isSecureProcessing():::Return the state of the secure processing feature.:::return
XSLTC#getFeature(JdkXmlFeatures.XmlFeature):::Return the value of the specified feature:::return->_xmlFeatures->getFeature
XSLTC#getProperty(String):::Return allowed protocols for accessing external stylesheet.:::if->name->equals->return->else->if->name->equals->return->else->if->name->equals->return->else->if->name->equals->return->else->if->equals->return->else->if->equals->return->return
XSLTC#setProperty(String, Object):::Set allowed protocols for accessing external stylesheet.:::if->name->equals->else->if->name->equals->else->if->name->equals->else->if->name->equals->_externalExtensionFunctions->clear->else->if->equals->else->if->equals->Integer->parseInt
XSLTC#getParser():::Only for user by the internal TrAX implementation.:::return
XSLTC#setOutputType(int):::Only for user by the internal TrAX implementation.:::
XSLTC#getOutputProperties():::Only for user by the internal TrAX implementation.:::return->_parser->getOutputProperties
XSLTC#init():::Initializes the compiler to compile a new stylesheet:::reset->new->ArrayList<>->new->ArrayList<>
XSLTC#setSourceLoader(SourceLoader):::Defines an external SourceLoader to provide the compiler with documents referenced in xsl:include/import:::
XSLTC#setTemplateInlining(boolean):::Set a flag indicating if templates are to be inlined or not:::
XSLTC#getTemplateInlining():::Return the state of the template inlining feature.:::return
XSLTC#setPIParameters(String, String, String):::Set the parameters to use to locate the correct <?xml-stylesheet ...?> processing instruction in the case where the input document to the compiler (and parser) is an XML document.:::_parser->setPIParameters
XSLTC#compile(URL):::Compiles an XSL stylesheet pointed to by a URL:::try->stream->url->openStream->input->new->InputSource->input->url->toString->setSystemId->return->compile->catch->_parser->new->ErrorMsg->reportError->return->finally
XSLTC#compile(URL, String):::Compiles an XSL stylesheet pointed to by a URL:::try->stream->url->openStream->input->new->InputSource->input->url->toString->setSystemId->return->compile->catch->_parser->new->ErrorMsg->reportError->return->finally
XSLTC#compile(InputStream, String):::Compiles an XSL stylesheet passed in through an InputStream:::input->new->InputSource->input->setSystemId->return->compile
XSLTC#compile(InputSource, String):::Compiles an XSL stylesheet passed in through an InputStream:::try->reset->systemId->if->input->getSystemId->if->if->setClassName->else->if->systemId->equals->Util->baseName->setClassName->if->_className->length->setClassName->element->if->_parser->parse->else->_parser->parse->if->_parser->errorsFound->_parser->makeStylesheet->_stylesheet->setSourceLoader->_stylesheet->setSystemId->_stylesheet->setParentStylesheet->_stylesheet->setTemplateInlining->_parser->setCurrentStylesheet->_parser->createAST->if->_parser->errorsFound->_stylesheet->setCallsNodeset->_stylesheet->setMultiDocument->_stylesheet->setHasIdCall->synchronized->getClass->_stylesheet->translate->catch->e->printStackTrace->_parser->new->ErrorMsg->reportError->if->e->printStackTrace->_parser->new->ErrorMsg->reportError->finally->return->_parser->errorsFound
XSLTC#compile(List):::Compiles a set of stylesheets pointed to by a List of URLs:::count->stylesheets->size->if->return->if->return->stylesheets->get->compile->else->foreach->if->compile->return->return
XSLTC#getBytecodes():::Returns an array of bytecode arrays generated by a compilation.:::count->_classes->size->result->new->byteArrs->for->i->return
XSLTC#compile(String, InputSource, int):::Compiles a stylesheet pointed to by a URL:::if->compile->return->getBytecodes->else->return
XSLTC#compile(String, InputSource):::Compiles a stylesheet pointed to by a URL:::return->compile
XSLTC#setXMLReader(XMLReader):::Set the XMLReader to use for parsing the next input stylesheet:::
XSLTC#getXMLReader():::Get the XMLReader to use for parsing the next input stylesheet:::return
XSLTC#getErrors():::Get a list of all compile error messages:::return->_parser->getErrors
XSLTC#getWarnings():::Get a list of all compile warning messages:::return->_parser->getWarnings
XSLTC#printErrors():::Print all compile error messages to standard output:::_parser->printErrors
XSLTC#printWarnings():::Print all compile warning messages to standard output:::_parser->printWarnings
XSLTC#setMultiDocument(boolean):::This method is called by the XPathParser when it encounters a call to the document() function:::
XSLTC#setCallsNodeset(boolean):::This method is called by the XPathParser when it encounters a call to the nodeset() extension function:::if->setMultiDocument
XSLTC#setClassName(String):::Set the class name for the generated translet:::base->Util->baseName->noext->Util->noExtName->name->Util->toJavaName->if->else
XSLTC#getClassName():::Get the class name for the generated translet.:::return
XSLTC#setDestDirectory(String):::Set the destination directory for the translet:::dir->new->File->if->SecuritySupport->doesFileExist->dir->mkdirs->return->else->return
XSLTC#setPackageName(String):::Set an optional package name for the translet and auxiliary classes:::Objects->requireNonNull->if->setClassName
XSLTC#setJarFileName(String):::Set the name of an optional JAR-file to dump the translet and auxiliary classes to:::JAR_EXT->if->jarFileName->endsWith->else
XSLTC#setStylesheet(Stylesheet):::Set the top-level stylesheet:::if
XSLTC#getStylesheet():::Returns the top-level stylesheet:::return
XSLTC#registerAttribute(QName):::Registers an attribute and gives it a type so that it can be mapped to DOM attribute types at run-time.:::code->_attributes->name->toString->get->if->_attributes->name->toString->put->uri->name->getNamespace->local->name->getLocalPart->if->uri->equals->_namesIndex->add->else->_namesIndex->add->if->name->getLocalPart->equals->name->getNamespace->registerNamespace->return->code->intValue
XSLTC#registerElement(QName):::Registers an element and gives it a type so that it can be mapped to DOM element types at run-time.:::code->_elements->name->toString->get->if->_elements->name->toString->put->_namesIndex->name->toString->add->if->name->getLocalPart->equals->name->getNamespace->registerNamespace->return->code->intValue
XSLTC#registerNamespace(String):::Registers a namespace and gives it a type so that it can be mapped to DOM namespace types at run-time.:::code->_namespaces->get->if->_namespaces->put->_namespaceIndex->add->return
XSLTC#getHelperClassName():::Returns a unique name for every helper class needed to execute a translet.:::return->getClassName
XSLTC#outputToJar():::Generate output JAR-file and packages:::manifest->new->Manifest->atrs->manifest->getMainAttributes->atrs->put->map->manifest->getEntries->now->new->Date->toString->dateAttr->new->java.util.jar.Attributes.Name->jarFile->new->File->jos->new->FileOutputStream->new->JarOutputStream->foreach->className->clazz->getClassName->replace->attr->new->java.util.jar.Attributes->attr->put->map->put->jos->new->JarEntry->putNextEntry->out->new->ByteArrayOutputStream->clazz->dump->out->writeTo->jos->close
XSLTC#setDebug(boolean):::Turn debugging messages on/off:::
XSLTC#debug():::Get current debugging message setting:::return
XSLTC#getCharacterData(int):::Retrieve a string representation of the character data to be stored in the translet as a char[]:::return->m_characterData->get->toString
XSLTC#getCharacterDataCount():::Get the number of char[] arrays, thus far, that will be created to store literal text in the stylesheet.:::return->m_characterData->size
XSLTC#addCharacterData(String):::Add literal text to char arrays that will be used to store character data in the stylesheet.:::currData->if->new->ArrayList<>->new->StringBuilder->m_characterData->add->else->m_characterData->m_characterData->size->get->if->newData->length->currData->length->new->StringBuilder->m_characterData->add->newDataOffset->currData->length->currData->append->return

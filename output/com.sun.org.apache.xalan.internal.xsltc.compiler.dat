com.sun.org.apache.xalan.internal.xsltc.compiler.AbsoluteLocationPath#setParser(Parser)->void::: absolute location path set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsoluteLocationPath#getPath()->Expression::: absolute location path get path
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsoluteLocationPath#toString()->String::: absolute location path to string
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsoluteLocationPath#typeCheck(SymbolTable)->Type::: absolute location path type check
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsoluteLocationPath#translate(ClassGenerator, MethodGenerator)->void::: absolute location path translate
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#setParser(Parser)->void::: absolute path pattern set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#typeCheck(SymbolTable)->Type::: absolute path pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#isWildcard()->boolean::: absolute path pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#getKernelPattern()->StepPattern::: absolute path pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#reduceKernelPattern()->void::: absolute path pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#translate(ClassGenerator, MethodGenerator)->void::: absolute path pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.AbsolutePathPattern#toString()->String::: absolute path pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#setParser(Parser)->void::: alternative pattern set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#getLeft()->Pattern::: alternative pattern get left
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#getRight()->Pattern::: alternative pattern get right
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#typeCheck(SymbolTable)->Type:::The type of an '|' is not really defined, hence null is returned.
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#getPriority()->double::: alternative pattern get priority
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#toString()->String::: alternative pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.AlternativePattern#translate(ClassGenerator, MethodGenerator)->void::: alternative pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#getLoopHandle()->InstructionHandle::: ancestor pattern get loop handle
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#setParser(Parser)->void::: ancestor pattern set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#isWildcard()->boolean::: ancestor pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#getKernelPattern()->StepPattern::: ancestor pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#reduceKernelPattern()->void::: ancestor pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#typeCheck(SymbolTable)->Type::: ancestor pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#translate(ClassGenerator, MethodGenerator)->void::: ancestor pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.AncestorPattern#toString()->String::: ancestor pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyImports#display(int)->void::: apply imports display
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyImports#hasWithParams()->boolean:::Returns true if this <xsl:apply-imports/> element has parameters
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyImports#parseContents(Parser)->void:::Parse the attributes and contents of an <xsl:apply-imports/> element.
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyImports#typeCheck(SymbolTable)->Type:::Type-check the attributes/contents of an <xsl:apply-imports/> element.
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyImports#translate(ClassGenerator, MethodGenerator)->void:::Translate call-template
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyTemplates#display(int)->void::: apply templates display
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyTemplates#hasWithParams()->boolean::: apply templates has with params
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyTemplates#parseContents(Parser)->void::: apply templates parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyTemplates#typeCheck(SymbolTable)->Type::: apply templates type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ApplyTemplates#translate(ClassGenerator, MethodGenerator)->void:::Translate call-template
com.sun.org.apache.xalan.internal.xsltc.compiler.ArgumentList#toString()->String::: argument list to string
com.sun.org.apache.xalan.internal.xsltc.compiler.Attribute#display(int)->void::: attribute display
com.sun.org.apache.xalan.internal.xsltc.compiler.Attribute#parseContents(Parser)->void::: attribute parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#getName()->QName:::Returns the QName of this attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#getMethodName()->String:::Returns the method name of this attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#ignore()->void:::Call this method to prevent a method for being compiled for this set
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#parseContents(Parser)->void:::Parse the contents of this attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#typeCheck(SymbolTable)->Type:::Type check the contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#translate(ClassGenerator, MethodGenerator)->void:::Compile a method that outputs the attributes in this set
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeSet#toString()->String::: attribute set to string
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeValue#create(SyntaxTreeNode, String, Parser)->AttributeValue::: attribute value create
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeValueTemplate#typeCheck(SymbolTable)->Type::: attribute value template type check
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeValueTemplate#toString()->String::: attribute value template to string
com.sun.org.apache.xalan.internal.xsltc.compiler.AttributeValueTemplate#translate(ClassGenerator, MethodGenerator)->void::: attribute value template translate
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#hasLastCall()->boolean:::Returns true if this expressions contains a call to last()
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#setParser(Parser)->void::: bin op expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#typeCheck(SymbolTable)->Type::: bin op expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#translate(ClassGenerator, MethodGenerator)->void::: bin op expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.BinOpExpr#toString()->String::: bin op expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanCall#typeCheck(SymbolTable)->Type::: boolean call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanCall#translate(ClassGenerator, MethodGenerator)->void::: boolean call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#typeCheck(SymbolTable)->Type::: boolean expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#toString()->String::: boolean expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#getValue()->boolean::: boolean expr get value
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#contextDependent()->boolean::: boolean expr context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#translate(ClassGenerator, MethodGenerator)->void::: boolean expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.BooleanExpr#translateDesynthesized(ClassGenerator, MethodGenerator)->void::: boolean expr translate desynthesized
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#display(int)->void::: call template display
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#hasWithParams()->boolean::: call template has with params
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#parseContents(Parser)->void::: call template parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#typeCheck(SymbolTable)->Type:::Verify that a template with this name exists.
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#translate(ClassGenerator, MethodGenerator)->void::: call template translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CallTemplate#getCalleeTemplate()->Template:::Return the simple named template which this CallTemplate calls
com.sun.org.apache.xalan.internal.xsltc.compiler.CastCall#typeCheck(SymbolTable)->Type:::Type check the two parameters for this function
com.sun.org.apache.xalan.internal.xsltc.compiler.CastCall#translate(ClassGenerator, MethodGenerator)->void::: cast call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#getExpr()->Expression::: cast expr get expr
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#hasLastCall()->boolean::: cast expr has last call
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#toString()->String::: cast expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#typeCheck(SymbolTable)->Type:::Type checking a cast expression amounts to verifying that the type conversion is legal
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#translateDesynthesized(ClassGenerator, MethodGenerator)->void::: cast expr translate desynthesized
com.sun.org.apache.xalan.internal.xsltc.compiler.CastExpr#translate(ClassGenerator, MethodGenerator)->void::: cast expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CeilingCall#translate(ClassGenerator, MethodGenerator)->void::: ceiling call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Choose#display(int)->void:::Display the element contents (a lot of when's and an otherwise)
com.sun.org.apache.xalan.internal.xsltc.compiler.Choose#translate(ClassGenerator, MethodGenerator)->void:::Translate this Choose element
com.sun.org.apache.xalan.internal.xsltc.compiler.Closure#inInnerClass()->boolean:::Returns true if this closure is compiled in an inner class (i.e
com.sun.org.apache.xalan.internal.xsltc.compiler.Closure#getParentClosure()->Closure:::Returns a reference to its parent closure or null if outermost.
com.sun.org.apache.xalan.internal.xsltc.compiler.Closure#getInnerClassName()->String:::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Closure#addVariable(VariableRefBase)->void:::Add new variable to the closure.
com.sun.org.apache.xalan.internal.xsltc.compiler.Comment#parseContents(Parser)->void::: comment parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Comment#typeCheck(SymbolTable)->Type::: comment type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Comment#translate(ClassGenerator, MethodGenerator)->void::: comment translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CompilerException#getMessage()->String::: compiler exception get message
com.sun.org.apache.xalan.internal.xsltc.compiler.ConcatCall#typeCheck(SymbolTable)->Type::: concat call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ConcatCall#translate(ClassGenerator, MethodGenerator)->void:::translate leaves a String on the stack
com.sun.org.apache.xalan.internal.xsltc.compiler.ContainsCall#isBoolean()->boolean:::This XPath function returns true/false values
com.sun.org.apache.xalan.internal.xsltc.compiler.ContainsCall#typeCheck(SymbolTable)->Type:::Type check the two parameters for this function
com.sun.org.apache.xalan.internal.xsltc.compiler.ContainsCall#translate(ClassGenerator, MethodGenerator)->void:::Compile the expression - leave boolean expression on stack
com.sun.org.apache.xalan.internal.xsltc.compiler.ContainsCall#translateDesynthesized(ClassGenerator, MethodGenerator)->void:::Compile expression and update true/false-lists
com.sun.org.apache.xalan.internal.xsltc.compiler.Copy#parseContents(Parser)->void::: copy parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Copy#display(int)->void::: copy display
com.sun.org.apache.xalan.internal.xsltc.compiler.Copy#typeCheck(SymbolTable)->Type::: copy type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Copy#translate(ClassGenerator, MethodGenerator)->void::: copy translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CopyOf#display(int)->void::: copy of display
com.sun.org.apache.xalan.internal.xsltc.compiler.CopyOf#parseContents(Parser)->void::: copy of parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.CopyOf#typeCheck(SymbolTable)->Type::: copy of type check
com.sun.org.apache.xalan.internal.xsltc.compiler.CopyOf#translate(ClassGenerator, MethodGenerator)->void::: copy of translate
com.sun.org.apache.xalan.internal.xsltc.compiler.CurrentCall#translate(ClassGenerator, MethodGenerator)->void::: current call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.DecimalFormatting#typeCheck(SymbolTable)->Type:::No type check needed for the <xsl:decimal-formatting/> element
com.sun.org.apache.xalan.internal.xsltc.compiler.DecimalFormatting#parseContents(Parser)->void:::Parse the name of the <xsl:decimal-formatting/> element
com.sun.org.apache.xalan.internal.xsltc.compiler.DecimalFormatting#translate(ClassGenerator, MethodGenerator)->void:::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.
com.sun.org.apache.xalan.internal.xsltc.compiler.DecimalFormatting#translateDefaultDFS(ClassGenerator, MethodGenerator)->void:::Creates the default, nameless, DecimalFormat object in AbstractTranslet's format_symbols hashtable
com.sun.org.apache.xalan.internal.xsltc.compiler.DocumentCall#typeCheck(SymbolTable)->Type:::Type checks the arguments passed to the document() function
com.sun.org.apache.xalan.internal.xsltc.compiler.DocumentCall#translate(ClassGenerator, MethodGenerator)->void:::Translates the document() function call to a call to LoadDocument()'s static method document().
com.sun.org.apache.xalan.internal.xsltc.compiler.ElementAvailableCall#typeCheck(SymbolTable)->Type:::Force the argument to this function to be a literal string.
com.sun.org.apache.xalan.internal.xsltc.compiler.ElementAvailableCall#evaluateAtCompileTime()->Object:::Returns an object representing the compile-time evaluation of an expression
com.sun.org.apache.xalan.internal.xsltc.compiler.ElementAvailableCall#getResult()->boolean:::Returns the result that this function will return
com.sun.org.apache.xalan.internal.xsltc.compiler.ElementAvailableCall#translate(ClassGenerator, MethodGenerator)->void:::Calls to 'element-available' are resolved at compile time since the namespaces declared in the stylsheet are not available at run time
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#setParser(Parser)->void::: equality expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#toString()->String::: equality expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#getLeft()->Expression::: equality expr get left
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#getRight()->Expression::: equality expr get right
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#getOp()->boolean::: equality expr get op
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#hasLastCall()->boolean::: equality expr has last call
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#typeCheck(SymbolTable)->Type:::Typing rules: see XSLT Reference by M
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#translateDesynthesized(ClassGenerator, MethodGenerator)->void::: equality expr translate desynthesized
com.sun.org.apache.xalan.internal.xsltc.compiler.EqualityExpr#translate(ClassGenerator, MethodGenerator)->void::: equality expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#getType()->Type::: expression get type
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#toString()->String::: expression to string
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#hasPositionCall()->boolean::: expression has position call
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#hasLastCall()->boolean::: expression has last call
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#evaluateAtCompileTime()->Object:::Returns an object representing the compile-time evaluation of an expression
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#typeCheck(SymbolTable)->Type:::Type check all the children of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#translate(ClassGenerator, MethodGenerator)->void:::Translate this node into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#compile(ClassGenerator, MethodGenerator)->InstructionList:::Translate this node into a fresh instruction list
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#translateDesynthesized(ClassGenerator, MethodGenerator)->void:::Redefined by expressions of type boolean that use flow lists.
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#startIterator(ClassGenerator, MethodGenerator)->void:::If this expression is of type node-set and it is not a variable reference, then call setStartNode() passing the context node.
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#synthesize(ClassGenerator, MethodGenerator)->void:::Synthesize a boolean expression, i.e., either push a 0 or 1 onto the operand stack for the next statement to succeed
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#desynthesize(ClassGenerator, MethodGenerator)->void::: expression desynthesize
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#getFalseList()->FlowList::: expression get false list
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#getTrueList()->FlowList::: expression get true list
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#backPatchFalseList(InstructionHandle)->void::: expression back patch false list
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#backPatchTrueList(InstructionHandle)->void::: expression back patch true list
com.sun.org.apache.xalan.internal.xsltc.compiler.Expression#lookupPrimop(SymbolTable, String, MethodType)->MethodType:::Search for a primop in the symbol table that matches the method type ctype
com.sun.org.apache.xalan.internal.xsltc.compiler.Fallback#typeCheck(SymbolTable)->Type:::This element never produces any data on the stack
com.sun.org.apache.xalan.internal.xsltc.compiler.Fallback#activate()->void:::Activate this fallback element
com.sun.org.apache.xalan.internal.xsltc.compiler.Fallback#toString()->String::: fallback to string
com.sun.org.apache.xalan.internal.xsltc.compiler.Fallback#parseContents(Parser)->void:::Parse contents only if this fallback element is put in place of some unsupported element or non-XSLTC extension element
com.sun.org.apache.xalan.internal.xsltc.compiler.Fallback#translate(ClassGenerator, MethodGenerator)->void:::Translate contents only if this fallback element is put in place of some unsupported element or non-XSLTC extension element
com.sun.org.apache.xalan.internal.xsltc.compiler.FilteredAbsoluteLocationPath#setParser(Parser)->void::: filtered absolute location path set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.FilteredAbsoluteLocationPath#getPath()->Expression::: filtered absolute location path get path
com.sun.org.apache.xalan.internal.xsltc.compiler.FilteredAbsoluteLocationPath#toString()->String::: filtered absolute location path to string
com.sun.org.apache.xalan.internal.xsltc.compiler.FilteredAbsoluteLocationPath#typeCheck(SymbolTable)->Type::: filtered absolute location path type check
com.sun.org.apache.xalan.internal.xsltc.compiler.FilteredAbsoluteLocationPath#translate(ClassGenerator, MethodGenerator)->void::: filtered absolute location path translate
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#getExpr()->Expression::: filter expr get expr
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#setParser(Parser)->void::: filter expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#toString()->String::: filter expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#typeCheck(SymbolTable)->Type:::Type check a FilterParentPath
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#translate(ClassGenerator, MethodGenerator)->void:::Translate a filter expression by pushing the appropriate iterator onto the stack.
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterExpr#translatePredicates(ClassGenerator, MethodGenerator, int)->void:::Translate a sequence of predicates
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterParentPath#setParser(Parser)->void::: filter parent path set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterParentPath#toString()->String::: filter parent path to string
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterParentPath#setDescendantAxis()->void::: filter parent path set descendant axis
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterParentPath#typeCheck(SymbolTable)->Type:::Type check a FilterParentPath
com.sun.org.apache.xalan.internal.xsltc.compiler.FilterParentPath#translate(ClassGenerator, MethodGenerator)->void::: filter parent path translate
com.sun.org.apache.xalan.internal.xsltc.compiler.FloorCall#translate(ClassGenerator, MethodGenerator)->void::: floor call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.FlowList#add(InstructionHandle)->FlowList::: flow list add
com.sun.org.apache.xalan.internal.xsltc.compiler.FlowList#append(FlowList)->FlowList::: flow list append
com.sun.org.apache.xalan.internal.xsltc.compiler.FlowList#backPatch(InstructionHandle)->void:::Back patch a flow list
com.sun.org.apache.xalan.internal.xsltc.compiler.FlowList#copyAndRedirect(InstructionList, InstructionList)->FlowList:::Redirect the handles from oldList to newList
com.sun.org.apache.xalan.internal.xsltc.compiler.ForEach#display(int)->void::: for each display
com.sun.org.apache.xalan.internal.xsltc.compiler.ForEach#parseContents(Parser)->void::: for each parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.ForEach#typeCheck(SymbolTable)->Type::: for each type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ForEach#translate(ClassGenerator, MethodGenerator)->void::: for each translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ForEach#initializeVariables(ClassGenerator, MethodGenerator)->void:::The code that is generated by nested for-each loops can appear to some JVMs as if it is accessing un-initialized variables
com.sun.org.apache.xalan.internal.xsltc.compiler.FormatNumberCall#typeCheck(SymbolTable)->Type::: format number call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.FormatNumberCall#translate(ClassGenerator, MethodGenerator)->void::: format number call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionAvailableCall#typeCheck(SymbolTable)->Type:::Argument of function-available call must be literal, typecheck returns the type of function-available to be boolean.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionAvailableCall#evaluateAtCompileTime()->Object:::Returns an object representing the compile-time evaluation of an expression
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionAvailableCall#getResult()->boolean:::Reports on whether the function specified in the argument to xslt function 'function-available' was found.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionAvailableCall#translate(ClassGenerator, MethodGenerator)->void:::Calls to 'function-available' are resolved at compile time since the namespaces declared in the stylsheet are not available at run time
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall.JavaType#hashCode()->int::: java type hash code
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall.JavaType#equals(Object)->boolean::: java type equals
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#getName()->String::: function call get name
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#setParser(Parser)->void::: function call set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#getClassNameFromUri(String)->String::: function call get class name from uri
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#typeCheck(SymbolTable)->Type:::Type check a function call
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#typeCheckStandard(SymbolTable)->Type:::Type check a call to a standard function
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#typeCheckConstructor(SymbolTable)->Type::: function call type check constructor
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#typeCheckExternal(SymbolTable)->Type:::Type check a call to an external (Java) method
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#typeCheckArgs(SymbolTable)->List:::Type check the actual arguments of this function call.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#argument(int)->Expression::: function call argument
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#argument()->Expression::: function call argument
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#argumentCount()->int::: function call argument count
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#setArgument(int, Expression)->void::: function call set argument
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#translateDesynthesized(ClassGenerator, MethodGenerator)->void:::Compile the function call and treat as an expression Update true/false-lists.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#translate(ClassGenerator, MethodGenerator)->void:::Translate a function call
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#toString()->String::: function call to string
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#isStandard()->boolean::: function call is standard
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#isExtension()->boolean::: function call is extension
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#getSignature(Class)->String:::Compute the JVM signature for the class.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#getSignature(Method)->String:::Compute the JVM method descriptor for the method.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#getSignature(Constructor)->String:::Compute the JVM constructor descriptor for the constructor.
com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall#replaceDash(String)->String:::To support EXSLT extensions, convert names with dash to allowable Java names: e.g., convert abc-xyz to abcXyz
com.sun.org.apache.xalan.internal.xsltc.compiler.GenerateIdCall#translate(ClassGenerator, MethodGenerator)->void::: generate id call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#getIndexName()->String::: id key pattern get index name
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#typeCheck(SymbolTable)->Type::: id key pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#isWildcard()->boolean::: id key pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#setLeft(RelativePathPattern)->void::: id key pattern set left
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#getKernelPattern()->StepPattern::: id key pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#reduceKernelPattern()->void::: id key pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#toString()->String::: id key pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.IdKeyPattern#translate(ClassGenerator, MethodGenerator)->void:::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.
com.sun.org.apache.xalan.internal.xsltc.compiler.If#display(int)->void:::Display the contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.If#parseContents(Parser)->void:::Parse the "test" expression and contents of this element.
com.sun.org.apache.xalan.internal.xsltc.compiler.If#typeCheck(SymbolTable)->Type:::Type-check the "test" expression and contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.If#translate(ClassGenerator, MethodGenerator)->void:::Translate the "test" expression and contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.Import#getImportedStylesheet()->Stylesheet::: import get imported stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Import#parseContents(Parser)->void::: import parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Import#typeCheck(SymbolTable)->Type::: import type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Import#translate(ClassGenerator, MethodGenerator)->void::: import translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Include#getIncludedStylesheet()->Stylesheet::: include get included stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Include#parseContents(Parser)->void::: include parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Include#typeCheck(SymbolTable)->Type::: include type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Include#translate(ClassGenerator, MethodGenerator)->void::: include translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Instruction#typeCheck(SymbolTable)->Type:::Type check all the children of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.Instruction#translate(ClassGenerator, MethodGenerator)->void:::Translate this node into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.IntExpr#typeCheck(SymbolTable)->Type::: int expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.IntExpr#toString()->String::: int expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.IntExpr#translate(ClassGenerator, MethodGenerator)->void::: int expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Key#parseContents(Parser)->void:::Parse the <xsl:key> element and attributes
com.sun.org.apache.xalan.internal.xsltc.compiler.Key#getName()->String:::Returns a String-representation of this key's name
com.sun.org.apache.xalan.internal.xsltc.compiler.Key#typeCheck(SymbolTable)->Type::: key type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Key#traverseNodeSet(ClassGenerator, MethodGenerator, int)->void:::This method is called if the "use" attribute of the key contains a node set
com.sun.org.apache.xalan.internal.xsltc.compiler.Key#translate(ClassGenerator, MethodGenerator)->void:::Gather all nodes that match the expression in the attribute "match" and add one (or more) entries in this key's index.
com.sun.org.apache.xalan.internal.xsltc.compiler.KeyCall#addParentDependency()->void:::If this call to key() is in a top-level element like  another variable or param, add a dependency between that top-level element and the referenced key
com.sun.org.apache.xalan.internal.xsltc.compiler.KeyCall#typeCheck(SymbolTable)->Type:::Type check the parameters for the id() or key() function
com.sun.org.apache.xalan.internal.xsltc.compiler.KeyCall#translate(ClassGenerator, MethodGenerator)->void:::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed
com.sun.org.apache.xalan.internal.xsltc.compiler.LangCall#typeCheck(SymbolTable)->Type::: lang call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.LangCall#getType()->Type::: lang call get type
com.sun.org.apache.xalan.internal.xsltc.compiler.LangCall#translate(ClassGenerator, MethodGenerator)->void:::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.
com.sun.org.apache.xalan.internal.xsltc.compiler.LastCall#hasPositionCall()->boolean::: last call has position call
com.sun.org.apache.xalan.internal.xsltc.compiler.LastCall#hasLastCall()->boolean::: last call has last call
com.sun.org.apache.xalan.internal.xsltc.compiler.LastCall#translate(ClassGenerator, MethodGenerator)->void::: last call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#display(int)->void::: literal attribute display
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#typeCheck(SymbolTable)->Type::: literal attribute type check
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#contextDependent()->boolean::: literal attribute context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#translate(ClassGenerator, MethodGenerator)->void::: literal attribute translate
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#getName()->String:::Return the name of the attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralAttribute#getValue()->AttributeValue:::Return the value of the attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#getName()->QName:::Returns the QName for this literal element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#display(int)->void:::Displays the contents of this literal element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#registerNamespace(String, String, SymbolTable, boolean)->void:::Method used to keep track of what namespaces that are references by this literal element and its attributes
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#addAttribute(SyntaxTreeNode)->void:::Add an attribute to this element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#setFirstAttribute(SyntaxTreeNode)->void:::Set the first attribute of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#typeCheck(SymbolTable)->Type:::Type-check the contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#getNamespaceScope(SyntaxTreeNode)->Set>:::This method starts at a given node, traverses all namespace mappings, and assembles a list of all prefixes that (for the given node) maps to _ANY_ namespace URI
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#parseContents(Parser)->void:::Determines the final QName for the element and its attributes
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#contextDependent()->boolean::: literal element context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#translate(ClassGenerator, MethodGenerator)->void:::Compiles code that emits the literal element to the output handler, first the start tag, then namespace declaration, then attributes, then the element contents, and then the element end tag
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#getElemDesc()->ElemDesc:::Return the ElemDesc object for an HTML element
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralElement#allAttributesUnique()->boolean:::Return true if all attributes of this LRE have unique names.
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#typeCheck(SymbolTable)->Type::: literal expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#toString()->String::: literal expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#contextDependent()->boolean::: literal expr context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#getValue()->String::: literal expr get value
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#getNamespace()->String::: literal expr get namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr#translate(ClassGenerator, MethodGenerator)->void::: literal expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.LocalNameCall#translate(ClassGenerator, MethodGenerator)->void:::This method is called when the constructor is compiled in Stylesheet.compileConstructor() and not as the syntax tree is traversed.
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#typeCheck(SymbolTable)->Type::: location path pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#translate(ClassGenerator, MethodGenerator)->void::: location path pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#setTemplate(Template)->void::: location path pattern set template
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#getTemplate()->Template::: location path pattern get template
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#getPriority()->double::: location path pattern get priority
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#getDefaultPriority()->double::: location path pattern get default priority
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#noSmallerThan(LocationPathPattern)->boolean:::This method is used by the Mode class to prioritise patterns and template
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#getKernelPattern()->StepPattern::: location path pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#reduceKernelPattern()->void::: location path pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#isWildcard()->boolean::: location path pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#getAxis()->int::: location path pattern get axis
com.sun.org.apache.xalan.internal.xsltc.compiler.LocationPathPattern#toString()->String::: location path pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#hasLastCall()->boolean:::Returns true if this expressions contains a call to last()
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#evaluateAtCompileTime()->Object:::Returns an object representing the compile-time evaluation of an expression
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#getOp()->int:::Returns this logical expression's operator - OR or AND represented by 0 and 1 respectively.
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#setParser(Parser)->void:::Override the SyntaxTreeNode.setParser() method to make sure that the parser is set for sub-expressions
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#toString()->String:::Returns a string describing this expression
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#typeCheck(SymbolTable)->Type:::Type-check this expression, and possibly child expressions.
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#translate(ClassGenerator, MethodGenerator)->void:::Compile the expression - leave boolean expression on stack
com.sun.org.apache.xalan.internal.xsltc.compiler.LogicalExpr#translateDesynthesized(ClassGenerator, MethodGenerator)->void:::Compile expression and update true/false-lists
com.sun.org.apache.xalan.internal.xsltc.compiler.Message#parseContents(Parser)->void::: message parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Message#typeCheck(SymbolTable)->Type::: message type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Message#translate(ClassGenerator, MethodGenerator)->void::: message translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#functionName()->String:::Returns the name of the method (_not_ function) that will be compiled for this mode
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#functionName(int, int)->String::: mode function name
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#getStylesheet()->Stylesheet::: mode get stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#addTemplate(Template)->void::: mode add template
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#processPatterns(Map)->void:::Process all the test patterns in this mode
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#compileGetChildren(ClassGenerator, MethodGenerator, int)->void::: mode compile get children
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#compileApplyTemplates(ClassGenerator)->void:::Compiles the applyTemplates() method and adds it to the translet
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#compileApplyImports(ClassGenerator, int, int)->void::: mode compile apply imports
com.sun.org.apache.xalan.internal.xsltc.compiler.Mode#getTemplateInstructionHandle(Template)->InstructionHandle::: mode get template instruction handle
com.sun.org.apache.xalan.internal.xsltc.compiler.NameBase#typeCheck(SymbolTable)->Type:::Check that we either have no parameters or one parameter that is either a node or a node-set.
com.sun.org.apache.xalan.internal.xsltc.compiler.NameBase#getType()->Type::: name base get type
com.sun.org.apache.xalan.internal.xsltc.compiler.NameBase#translate(ClassGenerator, MethodGenerator)->void:::Translate the code required for getting the node for which the QName, local-name or namespace URI should be extracted.
com.sun.org.apache.xalan.internal.xsltc.compiler.NameCall#translate(ClassGenerator, MethodGenerator)->void:::Translate code that leaves a node's QName (as a String) on the stack
com.sun.org.apache.xalan.internal.xsltc.compiler.NamespaceAlias#parseContents(Parser)->void::: namespace alias parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.NamespaceAlias#typeCheck(SymbolTable)->Type::: namespace alias type check
com.sun.org.apache.xalan.internal.xsltc.compiler.NamespaceAlias#translate(ClassGenerator, MethodGenerator)->void::: namespace alias translate
com.sun.org.apache.xalan.internal.xsltc.compiler.NamespaceUriCall#translate(ClassGenerator, MethodGenerator)->void:::Translate code that leaves a node's namespace URI (as a String) on the stack
com.sun.org.apache.xalan.internal.xsltc.compiler.NotCall#translate(ClassGenerator, MethodGenerator)->void::: not call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.NotCall#translateDesynthesized(ClassGenerator, MethodGenerator)->void::: not call translate desynthesized
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#inInnerClass()->boolean:::Returns true if this closure is compiled in an inner class (i.e
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#getParentClosure()->Closure:::Returns a reference to its parent closure or null if outermost.
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#getInnerClassName()->String:::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#addVariable(VariableRefBase)->void:::Add new variable to the closure.
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#parseContents(Parser)->void::: number parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#typeCheck(SymbolTable)->Type::: number type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#hasValue()->boolean:::True if the has specified a value for this instance of number.
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#isDefault()->boolean:::Returns <tt>true</tt> if this instance of number has neither a from nor a count pattern.
com.sun.org.apache.xalan.internal.xsltc.compiler.Number#translate(ClassGenerator, MethodGenerator)->void::: number translate
com.sun.org.apache.xalan.internal.xsltc.compiler.NumberCall#typeCheck(SymbolTable)->Type::: number call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.NumberCall#translate(ClassGenerator, MethodGenerator)->void::: number call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Otherwise#display(int)->void::: otherwise display
com.sun.org.apache.xalan.internal.xsltc.compiler.Otherwise#typeCheck(SymbolTable)->Type::: otherwise type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Otherwise#translate(ClassGenerator, MethodGenerator)->void::: otherwise translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#display(int)->void:::Displays the contents of this element (for debugging)
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#disable()->void:::Disables this <xsl:output> element in case where there are some other <xsl:output> element (from a different imported/included stylesheet) with higher precedence.
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#enabled()->boolean::: output enabled
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#getCdata()->String::: output get cdata
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#getOutputMethod()->String::: output get output method
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#mergeOutput(Output)->void::: output merge output
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#parseContents(Parser)->void:::Scans the attribute list for the xsl:output instruction
com.sun.org.apache.xalan.internal.xsltc.compiler.Output#translate(ClassGenerator, MethodGenerator)->void:::Compile code that passes the information in this <xsl:output> element to the appropriate fields in the translet
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#toString()->String:::Display variable as single string
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#setLoadInstruction(Instruction)->Instruction:::Set the instruction for loading the value of this variable onto the JVM stack and returns the old instruction.
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#setStoreInstruction(Instruction)->Instruction:::Set the instruction for storing a value from the stack into this variable and returns the old instruction.
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#display(int)->void:::Display variable in a full AST dump
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#parseContents(Parser)->void:::Parse the contents of the <xsl:param> element
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#typeCheck(SymbolTable)->Type:::Type-checks the parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.Param#translate(ClassGenerator, MethodGenerator)->void::: param translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ParameterRef#toString()->String::: parameter ref to string
com.sun.org.apache.xalan.internal.xsltc.compiler.ParameterRef#translate(ClassGenerator, MethodGenerator)->void::: parameter ref translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#setAxis(int)->void::: parent location path set axis
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#getAxis()->int::: parent location path get axis
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#getPath()->RelativeLocationPath::: parent location path get path
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#getStep()->Expression::: parent location path get step
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#setParser(Parser)->void::: parent location path set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#toString()->String::: parent location path to string
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#typeCheck(SymbolTable)->Type::: parent location path type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#enableNodeOrdering()->void::: parent location path enable node ordering
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#checkAxisMismatch()->boolean:::This method is used to determine if this parent location path is a combination of two step's with axes that will create duplicate or unordered nodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#translate(ClassGenerator, MethodGenerator)->void::: parent location path translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentLocationPath#translateStep(ClassGenerator, MethodGenerator)->void::: parent location path translate step
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#setParser(Parser)->void::: parent pattern set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#isWildcard()->boolean::: parent pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#getKernelPattern()->StepPattern::: parent pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#reduceKernelPattern()->void::: parent pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#typeCheck(SymbolTable)->Type::: parent pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#translate(ClassGenerator, MethodGenerator)->void::: parent pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ParentPattern#toString()->String::: parent pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#init()->void::: parser init
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setOutput(Output)->void::: parser set output
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getOutput()->Output::: parser get output
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getOutputProperties()->Properties::: parser get output properties
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#addVariable(Variable)->void::: parser add variable
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#addParameter(Param)->void::: parser add parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#removeVariable(QName)->void::: parser remove variable
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#lookupVariable(QName)->VariableBase::: parser lookup variable
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setXSLTC(XSLTC)->void::: parser set c
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getXSLTC()->XSLTC::: parser get c
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getCurrentImportPrecedence()->int::: parser get current import precedence
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getNextImportPrecedence()->int::: parser get next import precedence
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setCurrentStylesheet(Stylesheet)->void::: parser set current stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getCurrentStylesheet()->Stylesheet::: parser get current stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getTopLevelStylesheet()->Stylesheet::: parser get top level stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQNameSafe(String)->QName::: parser get name safe
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQName(String)->QName::: parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQNameIgnoreDefaultNs(String)->QName::: parser get name ignore default ns
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQName(String, boolean)->QName::: parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQName(String, String, String)->QName::: parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQName(String, String)->QName::: parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getQName(QName, QName)->QName::: parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getUseAttributeSets()->QName::: parser get use attribute sets
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getExtensionElementPrefixes()->QName::: parser get extension element prefixes
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getExcludeResultPrefixes()->QName::: parser get exclude result prefixes
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#makeStylesheet(SyntaxTreeNode)->Stylesheet:::Create an instance of the Stylesheet class, and then parse, typecheck and compile the instance
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#createAST(Stylesheet)->void:::Instanciates a SAX2 parser and generate the AST from the input.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parse(XMLReader, InputSource)->SyntaxTreeNode:::Parses a stylesheet and builds the internal abstract syntax tree
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parse(InputSource)->SyntaxTreeNode:::Parses a stylesheet and builds the internal abstract syntax tree
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getDocumentRoot()->SyntaxTreeNode::: parser get document root
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setPIParameters(String, String, String)->void:::Set the parameters to use to locate the correct <?xml-stylesheet ...?> processing instruction in the case where the input document is an XML document with one or more references to a stylesheet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#elementSupported(String, String)->boolean::: parser element supported
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#functionSupported(String)->boolean::: parser function supported
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getSymbolTable()->SymbolTable::: parser get symbol table
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getTemplate()->Template::: parser get template
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setTemplate(Template)->void::: parser set template
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getTemplateIndex()->int::: parser get template index
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#makeInstance(String, String, String, Attributes)->SyntaxTreeNode::: parser make instance
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parseExpression(SyntaxTreeNode, String)->Expression:::Parse an XPath expression:
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parseExpression(SyntaxTreeNode, String, String)->Expression:::Parse an XPath expression:
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parsePattern(SyntaxTreeNode, String)->Pattern:::Parse an XPath pattern:
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#parsePattern(SyntaxTreeNode, String, String)->Pattern:::Parse an XPath pattern:
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#errorsFound()->boolean:::Returns true if there were any errors during compilation
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#printErrors()->void:::Prints all compile-time errors
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#printWarnings()->void:::Prints all compile-time warnings
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#reportError(int, ErrorMsg)->void:::Common error/warning message handler
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getErrors()->ArrayList::: parser get errors
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#getWarnings()->ArrayList::: parser get warnings
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#startDocument()->void:::SAX2: Receive notification of the beginning of a document.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#endDocument()->void:::SAX2: Receive notification of the end of a document.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#startPrefixMapping(String, String)->void:::SAX2: Begin the scope of a prefix-URI Namespace mapping
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#endPrefixMapping(String)->void:::SAX2: End the scope of a prefix-URI Namespace mapping
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#startElement(String, String, String, Attributes)->void:::SAX2: Receive notification of the beginning of an element
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#endElement(String, String, String)->void:::SAX2: Receive notification of the end of an element.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#characters(char[], int, int)->void:::SAX2: Receive notification of character data.
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#processingInstruction(String, String)->void:::SAX2: Receive notification of a processing instruction
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#ignorableWhitespace(char[], int, int)->void:::IGNORED - all ignorable whitespace is ignored
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#skippedEntity(String)->void:::IGNORED - we do not have to do anything with skipped entities
com.sun.org.apache.xalan.internal.xsltc.compiler.Parser#setDocumentLocator(Locator)->void:::Store the document locator to later retrieve line numbers of all elements from the stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Pattern#typeCheck(SymbolTable)->Type:::Returns the type of a pattern, which is always a NodeType
com.sun.org.apache.xalan.internal.xsltc.compiler.Pattern#translate(ClassGenerator, MethodGenerator)->void:::Translate this node into JVM bytecodes
com.sun.org.apache.xalan.internal.xsltc.compiler.Pattern#getPriority()->double:::Returns the priority of this pattern (section 5.5 in the XSLT spec).
com.sun.org.apache.xalan.internal.xsltc.compiler.PositionCall#hasPositionCall()->boolean::: position call has position call
com.sun.org.apache.xalan.internal.xsltc.compiler.PositionCall#translate(ClassGenerator, MethodGenerator)->void::: position call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#setParser(Parser)->void:::Set the parser for this expression.
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#isNthPositionFilter()->boolean:::Returns a boolean value indicating if the nth position optimization is on
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#isNthDescendant()->boolean:::Returns a boolean value indicating if the nth descendant optimization is on
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#dontOptimize()->void:::Turns off all optimizations for this predicate.
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#hasPositionCall()->boolean:::Returns true if the expression in this predicate contains a call to position().
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#hasLastCall()->boolean:::Returns true if the expression in this predicate contains a call to last().
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#inInnerClass()->boolean:::Returns true if this closure is compiled in an inner class (i.e
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getParentClosure()->Closure:::Returns a reference to its parent closure or null if outermost.
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getInnerClassName()->String:::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#addVariable(VariableRefBase)->void:::Add new variable to the closure.
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getPosType()->int:::Returns the node type of the expression owning this predicate
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#parentIsPattern()->boolean::: predicate parent is pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getExpr()->Expression::: predicate get expr
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#toString()->String::: predicate to string
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#typeCheck(SymbolTable)->Type:::Type check a predicate expression
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#isBooleanTest()->boolean:::Returns true if the predicate is a test for the existance of an element or attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#isNodeValueTest()->boolean:::Method to see if we can optimise the predicate by using a specialised iterator for expressions like '/foo/bar[@attr = $var]', which are very common in many stylesheets
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getStep()->Step:::Returns the step in an expression of the form 'step = value'
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#getCompareValue()->Expression:::Returns the value in an expression of the form 'step = value'
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#translateFilter(ClassGenerator, MethodGenerator)->void:::Translate a predicate expression
com.sun.org.apache.xalan.internal.xsltc.compiler.Predicate#translate(ClassGenerator, MethodGenerator)->void:::Translate a predicate expression
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstruction#parseContents(Parser)->void::: processing instruction parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstruction#typeCheck(SymbolTable)->Type::: processing instruction type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstruction#translate(ClassGenerator, MethodGenerator)->void::: processing instruction translate
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#getDefaultPriority()->double::: processing instruction pattern get default priority
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#toString()->String::: processing instruction pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#reduceKernelPattern()->void::: processing instruction pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#isWildcard()->boolean::: processing instruction pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#typeCheck(SymbolTable)->Type::: processing instruction pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ProcessingInstructionPattern#translate(ClassGenerator, MethodGenerator)->void::: processing instruction pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#clearNamespace()->void::: name clear namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#toString()->String::: name to string
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#getStringRep()->String::: name get string rep
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#equals(Object)->boolean::: name equals
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#getLocalPart()->String::: name get local part
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#getNamespace()->String::: name get namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#getPrefix()->String::: name get prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#hashCode()->int::: name hash code
com.sun.org.apache.xalan.internal.xsltc.compiler.QName#dump()->String::: name dump
com.sun.org.apache.xalan.internal.xsltc.compiler.RealExpr#typeCheck(SymbolTable)->Type::: real expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.RealExpr#toString()->String::: real expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.RealExpr#translate(ClassGenerator, MethodGenerator)->void::: real expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#setParser(Parser)->void::: relational expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#hasLastCall()->boolean:::Returns true if this expressions contains a call to last()
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#hasReferenceArgs()->boolean::: relational expr has reference args
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#hasNodeArgs()->boolean::: relational expr has node args
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#hasNodeSetArgs()->boolean::: relational expr has node set args
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#typeCheck(SymbolTable)->Type::: relational expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#translate(ClassGenerator, MethodGenerator)->void::: relational expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#translateDesynthesized(ClassGenerator, MethodGenerator)->void::: relational expr translate desynthesized
com.sun.org.apache.xalan.internal.xsltc.compiler.RelationalExpr#toString()->String::: relational expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.RelativeLocationPath#getAxis()->int::: relative location path get axis
com.sun.org.apache.xalan.internal.xsltc.compiler.RelativeLocationPath#setAxis(int)->void::: relative location path set axis
com.sun.org.apache.xalan.internal.xsltc.compiler.RoundCall#translate(ClassGenerator, MethodGenerator)->void::: round call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.SimpleAttributeValue#typeCheck(SymbolTable)->Type:::Returns this attribute value's type (String).
com.sun.org.apache.xalan.internal.xsltc.compiler.SimpleAttributeValue#toString()->String::: simple attribute value to string
com.sun.org.apache.xalan.internal.xsltc.compiler.SimpleAttributeValue#contextDependent()->boolean::: simple attribute value context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.SimpleAttributeValue#translate(ClassGenerator, MethodGenerator)->void:::Translate this attribute value into JVM bytecodes that pushes the attribute value onto the JVM's stack.
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#inInnerClass()->boolean:::Returns true if this closure is compiled in an inner class (i.e
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#getParentClosure()->Closure:::Returns a reference to its parent closure or null if outermost.
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#getInnerClassName()->String:::Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#addVariable(VariableRefBase)->void:::Add new variable to the closure.
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#parseContents(Parser)->void:::Parse the attributes of the xsl:sort element
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#typeCheck(SymbolTable)->Type:::Run type checks on the attributes; expression must return a string which we will use as a sort key
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateSortType(ClassGenerator, MethodGenerator)->void:::These two methods are needed in the static methods that compile the overloaded NodeSortRecord.compareType() and NodeSortRecord.sortOrder()
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateSortOrder(ClassGenerator, MethodGenerator)->void::: sort translate sort order
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateCaseOrder(ClassGenerator, MethodGenerator)->void::: sort translate case order
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateLang(ClassGenerator, MethodGenerator)->void::: sort translate lang
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateSelect(ClassGenerator, MethodGenerator)->void:::This method compiles code for the select expression for this xsl:sort element
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translate(ClassGenerator, MethodGenerator)->void:::This method should not produce any code
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#translateSortIterator(ClassGenerator, MethodGenerator, Expression, List)->void:::Compiles code that instantiates a SortingIterator object
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#compileSortRecordFactory(List, ClassGenerator, MethodGenerator)->void:::Compiles code that instantiates a NodeSortRecordFactory object which will produce NodeSortRecord objects of a specific type.
com.sun.org.apache.xalan.internal.xsltc.compiler.Sort#compileSortRecordFactory(List, ClassGenerator, MethodGenerator, String)->String::: sort compile sort record factory
com.sun.org.apache.xalan.internal.xsltc.compiler.SourceLoader#loadSource(String, String, XSLTC)->InputSource:::This interface is used to plug external document loaders into XSLTC (used with the <xsl:include> and <xsl:import> elements.
com.sun.org.apache.xalan.internal.xsltc.compiler.StartsWithCall#typeCheck(SymbolTable)->Type:::Type check the two parameters for this function
com.sun.org.apache.xalan.internal.xsltc.compiler.StartsWithCall#translate(ClassGenerator, MethodGenerator)->void:::Compile the expression - leave boolean expression on stack
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#setParser(Parser)->void:::Set the parser for this element and all child predicates
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#getAxis()->int:::Define the axis (defined in Axis class) for this step
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#setAxis(int)->void:::Get the axis (defined in Axis class) for this step
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#getNodeType()->int:::Returns the node-type for this step
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#getPredicates()->List:::Returns the vector containing all predicates for this step.
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#addPredicates(List)->void:::Returns the vector containing all predicates for this step.
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#isAbbreviatedDot()->boolean:::True if this step is the abbreviated step '.'
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#isAbbreviatedDDot()->boolean:::True if this step is the abbreviated step '..'
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#typeCheck(SymbolTable)->Type:::Type check this step
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#translate(ClassGenerator, MethodGenerator)->void:::Translate a step by pushing the appropriate iterator onto the stack
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#translatePredicates(ClassGenerator, MethodGenerator, int)->void:::Translate a sequence of predicates
com.sun.org.apache.xalan.internal.xsltc.compiler.Step#toString()->String:::Returns a string representation of this step.
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#setParser(Parser)->void::: step pattern set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#getNodeType()->int::: step pattern get node type
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#setPriority(double)->void::: step pattern set priority
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#getKernelPattern()->StepPattern::: step pattern get kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#isWildcard()->boolean::: step pattern is wildcard
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#setPredicates(List)->StepPattern::: step pattern set predicates
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#hasPredicates()->boolean::: step pattern has predicates
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#getDefaultPriority()->double::: step pattern get default priority
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#getAxis()->int::: step pattern get axis
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#reduceKernelPattern()->void::: step pattern reduce kernel pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#toString()->String::: step pattern to string
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#typeCheck(SymbolTable)->Type::: step pattern type check
com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern#translate(ClassGenerator, MethodGenerator)->void::: step pattern translate
com.sun.org.apache.xalan.internal.xsltc.compiler.StringCall#typeCheck(SymbolTable)->Type::: string call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.StringCall#translate(ClassGenerator, MethodGenerator)->void::: string call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.StringLengthCall#translate(ClassGenerator, MethodGenerator)->void::: string length call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getOutputMethod()->int:::Return the output method
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getTemplateInlining()->boolean::: stylesheet get template inlining
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setTemplateInlining(boolean)->void::: stylesheet set template inlining
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#isSimplified()->boolean::: stylesheet is simplified
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setSimplified()->void::: stylesheet set simplified
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setHasIdCall(boolean)->void::: stylesheet set has id call
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setOutputProperty(String, String)->void::: stylesheet set output property
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setOutputProperties(Properties)->void::: stylesheet set output properties
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getOutputProperties()->Properties::: stylesheet get output properties
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getLastOutputElement()->Output::: stylesheet get last output element
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setMultiDocument(boolean)->void::: stylesheet set multi document
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#isMultiDocument()->boolean::: stylesheet is multi document
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setCallsNodeset(boolean)->void::: stylesheet set calls nodeset
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#callsNodeset()->boolean::: stylesheet calls nodeset
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#numberFormattingUsed()->void::: stylesheet number formatting used
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setImportPrecedence(int)->void::: stylesheet set import precedence
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getImportPrecedence()->int::: stylesheet get import precedence
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getMinimumDescendantPrecedence()->int:::Get the minimum of the precedence of this stylesheet, any stylesheet imported by this stylesheet and any include/import descendant of this stylesheet.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#checkForLoop(String)->boolean::: stylesheet check for loop
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setParser(Parser)->void::: stylesheet set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setParentStylesheet(Stylesheet)->void::: stylesheet set parent stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getParentStylesheet()->Stylesheet::: stylesheet get parent stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setImportingStylesheet(Stylesheet)->void::: stylesheet set importing stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setIncludingStylesheet(Stylesheet)->void::: stylesheet set including stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#addIncludedStylesheet(Stylesheet)->void::: stylesheet add included stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setSystemId(String)->void::: stylesheet set system id
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getSystemId()->String::: stylesheet get system id
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#setSourceLoader(SourceLoader)->void::: stylesheet set source loader
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getSourceLoader()->SourceLoader::: stylesheet get source loader
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#hasGlobals()->boolean:::Returns true if this stylesheet has global vars or params.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#hasLocalParams()->boolean:::Returns true if at least one template in the stylesheet has params defined
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#addPrefixMapping(String, String)->void:::Adds a single prefix mapping to this syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#isExtension(String)->boolean::: stylesheet is extension
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#declareExtensionPrefixes(Parser)->void::: stylesheet declare extension prefixes
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#parseContents(Parser)->void:::Parse the version and uri fields of the stylesheet and add an entry to the symbol table mapping the name <tt>__stylesheet_</tt> to an instance of this class.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#parseOwnChildren(Parser)->void:::Parse all direct children of the <xsl:stylesheet/> element.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#processModes()->void::: stylesheet process modes
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getMode(QName)->Mode::: stylesheet get mode
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#typeCheck(SymbolTable)->Type:::Type check all the children of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#translate(ClassGenerator, MethodGenerator)->void:::Translate the stylesheet into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#translate()->void:::Translate the stylesheet into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#addParam(Param)->int::: stylesheet add param
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#addVariable(Variable)->int::: stylesheet add variable
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#display(int)->void::: stylesheet display
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getNamespace(String)->String::: stylesheet get namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getClassName()->String::: stylesheet get class name
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getTemplates()->List::: stylesheet get templates
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#getAllValidTemplates()->List::: stylesheet get all valid templates
com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet#addTemplate(Template)->void::: stylesheet add template
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#getDecimalFormatting(QName)->DecimalFormatting::: symbol table get decimal formatting
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addDecimalFormatting(QName, DecimalFormatting)->void::: symbol table add decimal formatting
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#getKey(QName)->Key::: symbol table get key
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addKey(QName, Key)->void::: symbol table add key
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addStylesheet(QName, Stylesheet)->Stylesheet::: symbol table add stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupStylesheet(QName)->Stylesheet::: symbol table lookup stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addTemplate(Template)->Template::: symbol table add template
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupTemplate(QName)->Template::: symbol table lookup template
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addVariable(Variable)->Variable::: symbol table add variable
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addParam(Param)->Param::: symbol table add param
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupVariable(QName)->Variable::: symbol table lookup variable
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupParam(QName)->Param::: symbol table lookup param
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupName(QName)->SyntaxTreeNode::: symbol table lookup name
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addAttributeSet(AttributeSet)->AttributeSet::: symbol table add attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupAttributeSet(QName)->AttributeSet::: symbol table lookup attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addPrimop(String, MethodType)->void:::Add a primitive operator or function to the symbol table
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupPrimop(String)->List:::Lookup a primitive operator or function in the symbol table by prepending the prefix <tt>PrimopPrefix</tt>.
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#generateNamespacePrefix()->String::: symbol table generate namespace prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#setCurrentNode(SyntaxTreeNode)->void::: symbol table set current node
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupNamespace(String)->String::: symbol table lookup namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#addPrefixAlias(String, String)->void:::Adds an alias for a namespace prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#lookupPrefixAlias(String)->String:::Retrieves any alias for a given namespace prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#excludeURI(String)->void:::Register a namespace URI so that it will not be declared in the output unless it is actually referenced in the output.
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#excludeNamespaces(String)->void:::Exclude a series of namespaces given by a list of whitespace separated namespace prefixes.
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#isExcludedNamespace(String)->boolean:::Check if a namespace should not be declared in the output (unless used)
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#unExcludeNamespaces(String)->void:::Turn of namespace declaration exclusion
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#pushExcludedNamespacesContext()->void:::Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable#popExcludedNamespacesContext()->void:::Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setLineNumber(int)->void:::Set the source file line number for this element
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getLineNumber()->int:::Get the source file line number for this element
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setQName(QName)->void:::Set the QName for the syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setQName(String, String, String)->void:::Set the QName for the SyntaxTreeNode
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getQName()->QName:::Set the QName for the SyntaxTreeNode
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setAttributes(AttributesImpl)->void:::Set the attributes for this SyntaxTreeNode.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getAttribute(String)->String:::Returns a value for an attribute from the source element.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getAttribute(String, String)->String::: syntax tree node get attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#hasAttribute(String)->boolean::: syntax tree node has attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#addAttribute(String, String)->void::: syntax tree node add attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getAttributes()->Attributes:::Returns a list of all attributes declared for the element represented by this syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setPrefixMapping(Map)->void:::Sets the prefix mapping for the namespaces that were declared in this element
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getPrefixMapping()->Map:::Returns a Map containing the prefix mappings that were declared for this element
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#addPrefixMapping(String, String)->void:::Adds a single prefix mapping to this syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#lookupNamespace(String)->String:::Returns any namespace URI that is in scope for a given prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#lookupPrefix(String)->String:::Returns any namespace prefix that is mapped to a prefix in the current scope
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setParser(Parser)->void:::Set this node's parser
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getParser()->Parser:::Returns this node's XSLT parser.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setParent(SyntaxTreeNode)->void:::Set this syntax tree node's parent node, if unset
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getParent()->SyntaxTreeNode:::Returns this syntax tree node's parent node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#isDummy()->boolean:::Returns 'true' if this syntax tree node is the Sentinal node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getImportPrecedence()->int:::Get the import precedence of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getStylesheet()->Stylesheet:::Get the Stylesheet node that represents the <xsl:stylesheet/> element that this node occured under.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getTemplate()->Template:::Get the Template node that represents the <xsl:template/> element that this node occured under
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getXSLTC()->XSLTC:::Returns a reference to the XSLTC (XSLT compiler) in use.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getSymbolTable()->SymbolTable:::Returns the XSLT parser's symbol table.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#parseContents(Parser)->void:::Parse the contents of this syntax tree nodes (child nodes, XPath expressions, patterns and functions)
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#parseChildren(Parser)->void:::Parse all children of this syntax tree node
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#updateScope(Parser, SyntaxTreeNode)->QName:::Add a node to the current scope and return name of a variable or parameter if the node represents a variable or a parameter.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#typeCheck(SymbolTable)->Type:::Type check the children of this node
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#typeCheckContents(SymbolTable)->Type:::Call typeCheck() on all child syntax tree nodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#translate(ClassGenerator, MethodGenerator)->void:::Translate this abstract syntax tree node into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#translateContents(ClassGenerator, MethodGenerator)->void:::Call translate() on all child syntax tree nodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#notTypeOf(Class)->boolean:::Checks whether any children of this node is not of the specified type.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#compileResultTree(ClassGenerator, MethodGenerator)->void:::Utility method used by parameters and variables to store result trees
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#contextDependent()->boolean:::Returns true if this expression/instruction depends on the context
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#dependentContents()->boolean:::Return true if any of the expressions/instructions in the contents of this node is context dependent.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#addElement(SyntaxTreeNode)->void:::Adds a child node to this syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#setFirstElement(SyntaxTreeNode)->void:::Inserts the first child node of this syntax tree node
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#removeElement(SyntaxTreeNode)->void:::Removed a child node of this syntax tree node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#getContents()->List:::Returns a List containing all the child nodes of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#hasContents()->boolean:::Tells you if this node has any child nodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#elementCount()->int:::Returns the number of children this node has.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#elements()->Iterator:::Returns an Iterator of all child nodes of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#elementAt(int)->SyntaxTreeNode:::Returns a child node at a given position.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#lastChild()->SyntaxTreeNode:::Returns this element's last child
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#display(int)->void:::Displays the contents of this syntax tree node (to stdout)
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#displayContents(int)->void:::Displays the contents of this syntax tree node (to stdout)
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#indent(int)->void:::Set the indentation level for debug output.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#reportError(SyntaxTreeNode, Parser, String, String)->void:::Report an error to the parser.
com.sun.org.apache.xalan.internal.xsltc.compiler.SyntaxTreeNode#reportWarning(SyntaxTreeNode, Parser, String, String)->void:::Report a recoverable error to the parser.
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#hasParams()->boolean::: template has params
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#isSimplified()->boolean::: template is simplified
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#setSimplified()->void::: template set simplified
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#isSimpleNamedTemplate()->boolean::: template is simple named template
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#addParameter(Param)->void::: template add parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getParameters()->List::: template get parameters
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#disable()->void::: template disable
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#disabled()->boolean::: template disabled
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getPriority()->double::: template get priority
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getPosition()->int::: template get position
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#isNamed()->boolean::: template is named
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getPattern()->Pattern::: template get pattern
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getName()->QName::: template get name
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#setName(QName)->void::: template set name
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getModeName()->QName::: template get mode name
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#compareTo(Object)->int:::Compare this template to another
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#display(int)->void::: template display
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#getStylesheet()->Stylesheet::: template get stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#parseContents(Parser)->void::: template parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#parseSimplified(Stylesheet, Parser)->void:::When the parser realises that it is dealign with a simplified stylesheet it will create an empty Stylesheet object with the root element of the stylesheet (a LiteralElement object) as its only child
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#typeCheck(SymbolTable)->Type::: template type check
com.sun.org.apache.xalan.internal.xsltc.compiler.Template#translate(ClassGenerator, MethodGenerator)->void::: template translate
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#toString()->String:::Returns a string representation of this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#getInstructionList()->InstructionList:::Returns the instruction list for this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#getPriority()->double:::Return the highest priority for a pattern in this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#getPosition()->int:::Returns the position of the highest priority pattern in this test sequence.
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#reduce()->void:::Reduce the patterns in this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#findTemplates(Map)->void:::Returns, by reference, the templates that are included in this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.TestSeq#compile(ClassGenerator, MethodGenerator, InstructionHandle)->InstructionHandle:::Compile the code for this test sequence
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#getText()->String:::Returns the text wrapped inside this node
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#setText(String)->void:::Set the text for this node
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#display(int)->void::: text display
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#parseContents(Parser)->void::: text parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#ignore()->void::: text ignore
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#isIgnore()->boolean::: text is ignore
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#isTextElement()->boolean::: text is text element
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#contextDependent()->boolean::: text context dependent
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#translate(ClassGenerator, MethodGenerator)->void::: text translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#canLoadAsArrayOffsetLength()->boolean:::Check whether this Text node can be stored in a char[] in the translet
com.sun.org.apache.xalan.internal.xsltc.compiler.Text#loadAsArrayOffsetLength(ClassGenerator, MethodGenerator)->void:::Generates code that loads the array that will contain the character data represented by this Text node, followed by the offset of the data from the start of the array, and then the length of the data
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#typeCheck(SymbolTable)->Type:::Type check all the children of this node.
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#translate(ClassGenerator, MethodGenerator)->void:::Translate this node into JVM bytecodes.
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#compile(ClassGenerator, MethodGenerator)->InstructionList:::Translate this node into a fresh instruction list
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#display(int)->void::: top level element display
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#addDependency(TopLevelElement)->void:::Add a dependency with other top-level elements like variables, parameters or keys.
com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement#getDependencies()->List:::Get the list of dependencies with other top-level elements like variables, parameteres or keys.
com.sun.org.apache.xalan.internal.xsltc.compiler.TransletOutput#display(int)->void:::Displays the contents of this <xsltc:output> element.
com.sun.org.apache.xalan.internal.xsltc.compiler.TransletOutput#parseContents(Parser)->void:::Parse the contents of this <xsltc:output> element
com.sun.org.apache.xalan.internal.xsltc.compiler.TransletOutput#typeCheck(SymbolTable)->Type:::Type checks the 'file' attribute (must be able to convert it to a str).
com.sun.org.apache.xalan.internal.xsltc.compiler.TransletOutput#translate(ClassGenerator, MethodGenerator)->void:::Compile code that opens the give file for output, dumps the contents of the element to the file, then closes the file.
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#hasPositionCall()->boolean:::Returns true if this expressions contains a call to position()
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#hasLastCall()->boolean:::Returns true if this expressions contains a call to last()
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#setParser(Parser)->void::: unary op expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#typeCheck(SymbolTable)->Type::: unary op expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#toString()->String::: unary op expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.UnaryOpExpr#translate(ClassGenerator, MethodGenerator)->void::: unary op expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.UnionPathExpr#setParser(Parser)->void::: union path expr set parser
com.sun.org.apache.xalan.internal.xsltc.compiler.UnionPathExpr#typeCheck(SymbolTable)->Type::: union path expr type check
com.sun.org.apache.xalan.internal.xsltc.compiler.UnionPathExpr#toString()->String::: union path expr to string
com.sun.org.apache.xalan.internal.xsltc.compiler.UnionPathExpr#translate(ClassGenerator, MethodGenerator)->void::: union path expr translate
com.sun.org.apache.xalan.internal.xsltc.compiler.UnparsedEntityUriCall#typeCheck(SymbolTable)->Type::: unparsed entity uri call type check
com.sun.org.apache.xalan.internal.xsltc.compiler.UnparsedEntityUriCall#translate(ClassGenerator, MethodGenerator)->void::: unparsed entity uri call translate
com.sun.org.apache.xalan.internal.xsltc.compiler.UnresolvedRef#getName()->QName::: unresolved ref get name
com.sun.org.apache.xalan.internal.xsltc.compiler.UnresolvedRef#typeCheck(SymbolTable)->Type::: unresolved ref type check
com.sun.org.apache.xalan.internal.xsltc.compiler.UnresolvedRef#translate(ClassGenerator, MethodGenerator)->void::: unresolved ref translate
com.sun.org.apache.xalan.internal.xsltc.compiler.UnresolvedRef#toString()->String::: unresolved ref to string
com.sun.org.apache.xalan.internal.xsltc.compiler.UnsupportedElement#setErrorMessage(ErrorMsg)->void:::There are different categories of unsupported elements (believe it or not): there are elements within the XSLT namespace (these would be elements that are not yet implemented), there are extensions of other XSLT processors and there are unrecognised extension elements of this XSLT processor
com.sun.org.apache.xalan.internal.xsltc.compiler.UnsupportedElement#display(int)->void:::Displays the contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.UnsupportedElement#parseContents(Parser)->void:::Find any fallback in the descendant nodes; then activate & parse it
com.sun.org.apache.xalan.internal.xsltc.compiler.UnsupportedElement#typeCheck(SymbolTable)->Type:::Run type check on the fallback element (if any).
com.sun.org.apache.xalan.internal.xsltc.compiler.UnsupportedElement#translate(ClassGenerator, MethodGenerator)->void:::Translate the fallback element (if any).
com.sun.org.apache.xalan.internal.xsltc.compiler.UseAttributeSets#addAttributeSets(String)->void:::This method is made public to enable an AttributeSet object to merge itself with another AttributeSet (including any other AttributeSets the two may inherit from).
com.sun.org.apache.xalan.internal.xsltc.compiler.UseAttributeSets#typeCheck(SymbolTable)->Type:::Do nada.
com.sun.org.apache.xalan.internal.xsltc.compiler.UseAttributeSets#translate(ClassGenerator, MethodGenerator)->void:::Generate a call to the method compiled for this attribute set
com.sun.org.apache.xalan.internal.xsltc.compiler.ValueOf#display(int)->void::: value of display
com.sun.org.apache.xalan.internal.xsltc.compiler.ValueOf#parseContents(Parser)->void::: value of parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.ValueOf#typeCheck(SymbolTable)->Type::: value of type check
com.sun.org.apache.xalan.internal.xsltc.compiler.ValueOf#translate(ClassGenerator, MethodGenerator)->void::: value of translate
com.sun.org.apache.xalan.internal.xsltc.compiler.Variable#getIndex()->int::: variable get index
com.sun.org.apache.xalan.internal.xsltc.compiler.Variable#parseContents(Parser)->void:::Parse the contents of the variable
com.sun.org.apache.xalan.internal.xsltc.compiler.Variable#typeCheck(SymbolTable)->Type:::Runs a type check on either the variable element body or the expression in the 'select' attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.Variable#initialize(ClassGenerator, MethodGenerator)->void:::This method is part of a little trick that is needed to use local variables inside nested for-each loops
com.sun.org.apache.xalan.internal.xsltc.compiler.Variable#translate(ClassGenerator, MethodGenerator)->void::: variable translate
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#disable()->void:::Disable this variable/parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#addReference(VariableRefBase)->void:::Add a reference to this variable
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#copyReferences(VariableBase)->void:::When a variable is overriden by another, e.g
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#mapRegister(MethodGenerator)->void:::Map this variable to a register
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#unmapRegister(ClassGenerator, MethodGenerator)->void:::Remove the mapping of this variable to a register
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#loadInstruction()->Instruction:::Returns an instruction for loading the value of this variable onto the JVM stack.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#storeInstruction()->Instruction:::Returns an instruction for storing a value from the JVM stack into this variable.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#getExpression()->Expression:::Returns the expression from this variable's select attribute (if any)
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#toString()->String:::Display variable as single string
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#display(int)->void:::Display variable in a full AST dump
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#getType()->Type:::Returns the type of the variable
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#getName()->QName:::Returns the name of the variable or parameter as it will occur in the compiled translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#getEscapedName()->String:::Returns the escaped qname of the variable or parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#setName(QName)->void:::Set the name of the variable or paremeter
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#isLocal()->boolean:::Returns the true if the variable is local
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#parseContents(Parser)->void:::Parse the contents of the <xsl:decimal-format> element.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableBase#translateValue(ClassGenerator, MethodGenerator)->void:::Compile the value of the variable, which is either in an expression in a 'select' attribute, or in the variable elements body
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRef#translate(ClassGenerator, MethodGenerator)->void::: variable ref translate
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#getVariable()->VariableBase:::Returns a reference to the associated variable
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#addParentDependency()->void:::If this variable reference is in a top-level element like another variable, param or key, add a dependency between that top-level element and the referenced variable
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#equals(Object)->boolean:::Two variable references are deemed equal if they refer to the same variable.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#hashCode()->int::: variable ref base hash code
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#toString()->String:::Returns a string representation of this variable reference on the format 'variable-ref(<var-name>)'.
com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRefBase#typeCheck(SymbolTable)->Type::: variable ref base type check
com.sun.org.apache.xalan.internal.xsltc.compiler.When#display(int)->void::: when display
com.sun.org.apache.xalan.internal.xsltc.compiler.When#getTest()->Expression::: when get test
com.sun.org.apache.xalan.internal.xsltc.compiler.When#ignore()->boolean::: when ignore
com.sun.org.apache.xalan.internal.xsltc.compiler.When#parseContents(Parser)->void::: when parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.When#typeCheck(SymbolTable)->Type:::Type-check this when element
com.sun.org.apache.xalan.internal.xsltc.compiler.When#translate(ClassGenerator, MethodGenerator)->void:::This method should never be called
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#compareTo(WhitespaceRule)->int:::For sorting rules depending on priority
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#getAction()->int::: whitespace rule get action
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#getStrength()->int::: whitespace rule get strength
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#getPriority()->int::: whitespace rule get priority
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#getElement()->String::: whitespace rule get element
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace.WhitespaceRule#getNamespace()->String::: whitespace rule get namespace
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#parseContents(Parser)->void:::Parse the attributes of the xsl:strip/preserve-space element
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#getRules()->List:::De-tokenize the elements listed in the 'elements' attribute and instanciate a set of strip/preserve rules.
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#compileStripSpace(BranchHandle[], int, InstructionList)->void::: whitespace compile strip space
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#compilePreserveSpace(BranchHandle[], int, InstructionList)->void::: whitespace compile preserve space
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#translateRules(List, ClassGenerator)->int:::Takes a vector of WhitespaceRule objects and generates a predicate method
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#typeCheck(SymbolTable)->Type:::Type-check contents/attributes - nothing to do...
com.sun.org.apache.xalan.internal.xsltc.compiler.Whitespace#translate(ClassGenerator, MethodGenerator)->void:::This method should not produce any code
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#display(int)->void:::Displays the contents of this element
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#getEscapedName()->String:::Returns the escaped qname of the parameter
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#getName()->QName:::Return the name of this WithParam.
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#setName(QName)->void:::Set the name of the variable or paremeter
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#setDoParameterOptimization(boolean)->void:::Set the do parameter optimization flag
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#parseContents(Parser)->void:::The contents of a <xsl:with-param> elements are either in the element's 'select' attribute (this has precedence) or in the element body.
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#typeCheck(SymbolTable)->Type:::Type-check either the select attribute or the element body, depending on which is in use.
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#translateValue(ClassGenerator, MethodGenerator)->void:::Compile the value of the parameter, which is either in an expression in a 'select' attribute, or in the with-param element's body
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#translate(ClassGenerator, MethodGenerator)->void:::This code generates a sequence of bytecodes that call the addParameter() method in AbstractTranslet
com.sun.org.apache.xalan.internal.xsltc.compiler.WithParam#releaseResultTree(ClassGenerator, MethodGenerator)->void:::Release the compiled result tree.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#initialize()->void::: path lexer initialize
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#isWhitespace(int)->boolean::: path lexer is whitespace
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#disambiguateAxisOrFunction(int)->Symbol:::If symbol is not followed by '::' or '(', then treat it as a name instead of an axis or function (Jira-1912).
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#disambiguateOperator(int)->Symbol:::If symbol is first token or if it follows any of the operators listed in http://www.w3.org/TR/xpath#exprlex then treat as a name instead of a keyword (Jira-1912)
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#newSymbol(int)->Symbol::: path lexer new symbol
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#newSymbol(int, String)->Symbol::: path lexer new symbol
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#newSymbol(int, Long)->Symbol::: path lexer new symbol
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#newSymbol(int, Double)->Symbol::: path lexer new symbol
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathLexer#next_token()->com.sun.java_cup.internal.runtime.Symbol::: path lexer next_token
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#production_table()->short[][]:::Access to production table.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#action_table()->short[][]:::Access to parse-action table.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#reduce_table()->short[][]:::Access to reduce_goto table.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#init_actions()->void:::Action encapsulation object initializer.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#do_action(int, lr_parser, Stack, int)->Symbol:::Invoke a user supplied parse action.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#start_state()->int:::Indicates start state.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#start_production()->int:::Indicates start production.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#EOF_sym()->int:::EOF Symbol index.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#error_sym()->int:::error Symbol index.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#getLineNumber()->int::: path parser get line number
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#getQNameIgnoreDefaultNs(String)->QName::: path parser get name ignore default ns
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#getQName(String, String, String)->QName::: path parser get name
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#setMultiDocument(boolean)->void::: path parser set multi document
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#setCallsNodeset(boolean)->void::: path parser set calls nodeset
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#setHasIdCall(boolean)->void::: path parser set has id call
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#createStepPattern(int, Object, List)->StepPattern:::This method is similar to findNodeType(int, Object) except that it creates a StepPattern instead of just returning a node type
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#findNodeType(int, Object)->int::: path parser find node type
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#parse(String, int)->Symbol:::Parse the expression passed to the current scanner
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#lookupName(QName)->SyntaxTreeNode:::Lookup a variable or parameter in the symbol table given its name.
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#addError(ErrorMsg)->void::: path parser add error
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#report_error(String, Object)->void::: path parser report_error
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#report_fatal_error(String, Object)->void::: path parser report_fatal_error
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#insertStep(Step, RelativeLocationPath)->RelativeLocationPath::: path parser insert step
com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser#isElementAxis(int)->boolean:::Returns true if the axis applies to elements only
com.sun.org.apache.xalan.internal.xsltc.compiler.parser_actions#parser_do_action(int, lr_parser, Stack, int)->Symbol:::Method with the actual generated action code.
com.sun.org.apache.xalan.internal.xsltc.compiler.XslAttribute#getName()->AttributeValue:::Returns the name of the attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.XslAttribute#display(int)->void:::Displays the contents of the attribute
com.sun.org.apache.xalan.internal.xsltc.compiler.XslAttribute#parseContents(Parser)->void:::Parses the attribute's contents
com.sun.org.apache.xalan.internal.xsltc.compiler.XslAttribute#typeCheck(SymbolTable)->Type::: xsl attribute type check
com.sun.org.apache.xalan.internal.xsltc.compiler.XslAttribute#translate(ClassGenerator, MethodGenerator)->void::: xsl attribute translate
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#display(int)->void:::Displays the contents of the element
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#parseContents(Parser)->void::: xsl element parse contents
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#typeCheck(SymbolTable)->Type:::Run type check on element name & contents
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#translateLiteral(ClassGenerator, MethodGenerator)->void:::This method is called when the name of the element is known at compile time
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#translate(ClassGenerator, MethodGenerator)->void:::At runtime the compilation of xsl:element results in code that: (i) evaluates the avt for the name, (ii) checks for a prefix in the name (iii) generates a new prefix and create a new qname when necessary (iv) calls startElement() on the handler (v) looks up a uri in the XML when the prefix is not known at compile time (vi) calls namespace() on the handler (vii) evaluates the contents (viii) calls endElement().
com.sun.org.apache.xalan.internal.xsltc.compiler.XslElement#translateContents(ClassGenerator, MethodGenerator)->void:::Override this method to make sure that xsl:attributes are not copied to output if this xsl:element is to be ignored
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setSecureProcessing(boolean)->void:::Set the state of the secure processing feature.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#isSecureProcessing()->boolean:::Return the state of the secure processing feature.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getFeature(JdkXmlFeatures.XmlFeature)->boolean:::Return the value of the specified feature
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getProperty(String)->Object:::Return allowed protocols for accessing external stylesheet.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setProperty(String, Object)->void:::Set allowed protocols for accessing external stylesheet.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getParser()->Parser:::Only for user by the internal TrAX implementation.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setOutputType(int)->void:::Only for user by the internal TrAX implementation.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getOutputProperties()->Properties:::Only for user by the internal TrAX implementation.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#init()->void:::Initializes the compiler to compile a new stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#loadExternalFunction(String)->Class::: c load external function
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getExternalExtensionFunctions()->Map>::: c get external extension functions
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setSourceLoader(SourceLoader)->void:::Defines an external SourceLoader to provide the compiler with documents referenced in xsl:include/import
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setTemplateInlining(boolean)->void:::Set a flag indicating if templates are to be inlined or not
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getTemplateInlining()->boolean:::Return the state of the template inlining feature.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setPIParameters(String, String, String)->void:::Set the parameters to use to locate the correct <?xml-stylesheet ...?> processing instruction in the case where the input document to the compiler (and parser) is an XML document.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(URL)->boolean:::Compiles an XSL stylesheet pointed to by a URL
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(URL, String)->boolean:::Compiles an XSL stylesheet pointed to by a URL
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(InputStream, String)->boolean:::Compiles an XSL stylesheet passed in through an InputStream
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(InputSource, String)->boolean:::Compiles an XSL stylesheet passed in through an InputStream
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(List)->boolean:::Compiles a set of stylesheets pointed to by a List of URLs
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getBytecodes()->byte[][]:::Returns an array of bytecode arrays generated by a compilation.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(String, InputSource, int)->byte[][]:::Compiles a stylesheet pointed to by a URL
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#compile(String, InputSource)->byte[][]:::Compiles a stylesheet pointed to by a URL
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setXMLReader(XMLReader)->void:::Set the XMLReader to use for parsing the next input stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getXMLReader()->XMLReader:::Get the XMLReader to use for parsing the next input stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getErrors()->List:::Get a list of all compile error messages
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getWarnings()->List:::Get a list of all compile warning messages
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#printErrors()->void:::Print all compile error messages to standard output
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#printWarnings()->void:::Print all compile warning messages to standard output
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setMultiDocument(boolean)->void:::This method is called by the XPathParser when it encounters a call to the document() function
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#isMultiDocument()->boolean::: c is multi document
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setCallsNodeset(boolean)->void:::This method is called by the XPathParser when it encounters a call to the nodeset() extension function
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#callsNodeset()->boolean::: c calls nodeset
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setHasIdCall(boolean)->void::: c set has id call
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#hasIdCall()->boolean::: c has id call
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setClassName(String)->void:::Set the class name for the generated translet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getClassName()->String:::Get the class name for the generated translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setDestDirectory(String)->boolean:::Set the destination directory for the translet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setPackageName(String)->void:::Set an optional package name for the translet and auxiliary classes
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setJarFileName(String)->void:::Set the name of an optional JAR-file to dump the translet and auxiliary classes to
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getJarFileName()->String::: c get jar file name
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setStylesheet(Stylesheet)->void:::Set the top-level stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getStylesheet()->Stylesheet:::Returns the top-level stylesheet
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#registerAttribute(QName)->int:::Registers an attribute and gives it a type so that it can be mapped to DOM attribute types at run-time.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#registerElement(QName)->int:::Registers an element and gives it a type so that it can be mapped to DOM element types at run-time.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#registerNamespacePrefix(QName)->int::: c register namespace prefix
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#registerNamespace(String)->int:::Registers a namespace and gives it a type so that it can be mapped to DOM namespace types at run-time.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#nextModeSerial()->int::: c next mode serial
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#nextStylesheetSerial()->int::: c next stylesheet serial
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#nextStepPatternSerial()->int::: c next step pattern serial
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getNumberFieldIndexes()->int[]::: c get number field indexes
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#nextHelperClassSerial()->int::: c next helper class serial
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#nextAttributeSetSerial()->int::: c next attribute set serial
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getNamesIndex()->List::: c get names index
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getNamespaceIndex()->List::: c get namespace index
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getHelperClassName()->String:::Returns a unique name for every helper class needed to execute a translet.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#dumpClass(JavaClass)->void::: c dump class
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#outputToJar()->void:::Generate output JAR-file and packages
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#setDebug(boolean)->void:::Turn debugging messages on/off
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#debug()->boolean:::Get current debugging message setting
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getCharacterData(int)->String:::Retrieve a string representation of the character data to be stored in the translet as a char[]
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#getCharacterDataCount()->int:::Get the number of char[] arrays, thus far, that will be created to store literal text in the stylesheet.
com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC#addCharacterData(String)->int:::Add literal text to char arrays that will be used to store character data in the stylesheet.

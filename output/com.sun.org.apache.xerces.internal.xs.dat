AttributePSVI#getAttributeDeclaration():::[attribute declaration]: An item isomorphic to the declaration component itself.:::
ElementPSVI#getElementDeclaration():::[element declaration]: an item isomorphic to the element declaration used to validate this element.:::
ElementPSVI#getNotation()::: [notation]: the notation declaration.:::
ElementPSVI#getNil():::[nil]: true if clause 3.2 of Element Locally Valid (Element) (3.3.4) is satisfied, otherwise false.:::
ElementPSVI#getSchemaInformation():::schema information: the schema information property if it is the validation root, null otherwise.:::
ItemPSVI#constant():::Returns a reference to an immutable instance with the same data that this instance of ItemPSVI currently has.:::
ItemPSVI#isConstant():::Returns true if this specific instance of ItemPSVI is immutable, otherwise false.:::
ItemPSVI#getValidationContext():::The nearest ancestor element information item with a [schema information] property (or this element item itself if it has such a property):::
ItemPSVI#getValidity():::[validity]: determines the validity of the schema item with respect to the validation being attempted:::
ItemPSVI#getValidationAttempted():::[validation attempted]: determines the extent to which the schema item has been validated:::
ItemPSVI#getErrorCodes():::[schema error code]: a list of error codes generated from the validation attempt or an empty StringList if no errors occurred during the validation attempt.:::
ItemPSVI#getErrorMessages():::A list of error messages generated from the validation attempt or an empty StringList if no errors occurred during the validation attempt:::
ItemPSVI#getSchemaNormalizedValue():::[schema normalized value]: the normalized value of this item after validation.:::
ItemPSVI#getActualNormalizedValue():::[schema normalized value]: Binding specific actual value or null if the value is in error.:::
ItemPSVI#getActualNormalizedValueType():::The actual value built-in datatype, e.g:::
ItemPSVI#getItemValueTypes():::In the case the actual value represents a list, i.e:::
ItemPSVI#getSchemaValue():::If this item has a simple type definition or a complex type with simple content, then return the value with respect to the simple type:::
ItemPSVI#getTypeDefinition():::[type definition]: an item isomorphic to the type definition used to validate the schema item.:::
ItemPSVI#getMemberTypeDefinition():::[member type definition]: if and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple type definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the schema item's normalized value.:::
ItemPSVI#getSchemaDefault():::[schema default]: the canonical lexical representation of the declaration's {value constraint} value:::
ItemPSVI#getIsSchemaSpecified():::[schema specified]: if true, the value was specified in the schema:::
LSInputList#getLength()::: The number of LSInputs in the list:::
LSInputList#item(int)::: Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list:::
PSVIProvider#getElementPSVI()::: Provides the post schema validation item for the current element information item:::
PSVIProvider#getAttributePSVI(int):::Provides AttributePSVI given the index of an attribute information item in the current element's attribute list:::
PSVIProvider#getAttributePSVIByName(String, String):::Provides AttributePSVI given the namespace name and the local name of an attribute information item in the current element's attribute list:::
ShortList#getLength()::: The number of unsigned shorts in the list:::
ShortList#contains(short)::: Checks if the unsigned short item is a member of this list.:::
ShortList#item(int)::: Returns the indexth item in the collection:::
StringList#getLength()::: The number of GenericStrings in the list:::
StringList#contains(String)::: Checks if the GenericString item is a member of this list.:::
StringList#item(int)::: Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list:::
XSAnnotation#writeAnnotation(Object, short)::: Write contents of the annotation to the specified object:::
XSAnnotation#getAnnotationString():::A text representation of the annotation.:::
XSAttributeDeclaration#getTypeDefinition():::[type definition]: A simple type definition.:::
XSAttributeDeclaration#getScope():::[scope]:::
XSAttributeDeclaration#getEnclosingCTDefinition():::The complex type definition for locally scoped declarations (see scope), otherwise null if no such definition exists.:::
XSAttributeDeclaration#getConstraintType():::Value constraint: one of VC_NONE, VC_DEFAULT, VC_FIXED.:::
XSAttributeDeclaration#getConstraintValue():::Value constraint: The constraint value with respect to the [type definition], otherwise null.:::
XSAttributeDeclaration#getActualVC():::Value Constraint: Binding specific actual constraint value or null if the value is in error or there is no value constraint.:::
XSAttributeDeclaration#getActualVCType():::The actual constraint value built-in datatype, e.g:::
XSAttributeDeclaration#getItemValueTypes():::In the case the actual constraint value represents a list, i.e:::
XSAttributeDeclaration#getValueConstraintValue():::The actual value of the default or fixed value constraint.:::
XSAttributeDeclaration#getAnnotation():::An annotation if it exists, otherwise null:::
XSAttributeDeclaration#getAnnotations():::A sequence of [annotations] or an empty  XSObjectList.:::
XSAttributeGroupDefinition#getAttributeUses():::A set of [attribute uses] if it exists, otherwise an empty XSObjectList.:::
XSAttributeGroupDefinition#getAttributeWildcard():::A [wildcard] if it exists, otherwise null.:::
XSAttributeGroupDefinition#getAnnotation():::An annotation if it exists, otherwise null:::
XSAttributeGroupDefinition#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSAttributeUse#getRequired():::[required]: determines whether this use of an attribute declaration requires an appropriate attribute information item to be present, or merely allows it.:::
XSAttributeUse#getAttrDeclaration():::[attribute declaration]: provides the attribute declaration itself, which will in turn determine the simple type definition used.:::
XSAttributeUse#getConstraintType():::Value Constraint: one of default, fixed, or none.:::
XSAttributeUse#getConstraintValue():::Value Constraint: The constraint value, otherwise null.:::
XSAttributeUse#getActualVC():::Value Constraint: Binding specific actual constraint value or null if the value is in error or there is no value constraint.:::
XSAttributeUse#getActualVCType():::The actual constraint value built-in datatype, e.g:::
XSAttributeUse#getItemValueTypes():::In the case the actual constraint value represents a list, i.e:::
XSAttributeUse#getValueConstraintValue():::The actual value of the default or fixed value constraint.:::
XSAttributeUse#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSComplexTypeDefinition#getDerivationMethod():::[derivation method]: either DERIVATION_EXTENSION, DERIVATION_RESTRICTION, or DERIVATION_NONE (see XSConstants).:::
XSComplexTypeDefinition#getAbstract():::[abstract]: a boolean:::
XSComplexTypeDefinition#getAttributeUses()::: A set of attribute uses if it exists, otherwise an empty XSObjectList.:::
XSComplexTypeDefinition#getAttributeWildcard():::An attribute wildcard if it exists, otherwise null.:::
XSComplexTypeDefinition#getContentType():::[content type]: one of empty (CONTENTTYPE_EMPTY), a simple type definition (CONTENTTYPE_SIMPLE), mixed ( CONTENTTYPE_MIXED), or element-only ( CONTENTTYPE_ELEMENT).:::
XSComplexTypeDefinition#getSimpleType():::A simple type definition corresponding to a simple content model, otherwise null.:::
XSComplexTypeDefinition#getParticle():::A particle for a mixed or element-only content model, otherwise null.:::
XSComplexTypeDefinition#isProhibitedSubstitution(short):::[prohibited substitutions]: a subset of {extension, restriction}:::
XSComplexTypeDefinition#getProhibitedSubstitutions()::: [prohibited substitutions]: A subset of {extension, restriction} or DERIVATION_NONE represented as a bit flag (see XSConstants).:::
XSComplexTypeDefinition#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSElementDeclaration#getTypeDefinition():::[type definition]: either a simple type definition or a complex type definition.:::
XSElementDeclaration#getScope():::[scope]:::
XSElementDeclaration#getEnclosingCTDefinition():::The complex type definition for locally scoped declarations (see scope), otherwise null if no such definition exists.:::
XSElementDeclaration#getConstraintType():::[Value constraint]: one of VC_NONE, VC_DEFAULT, VC_FIXED.:::
XSElementDeclaration#getConstraintValue():::[Value constraint]: the constraint value with respect to the [type definition], otherwise null.:::
XSElementDeclaration#getActualVC():::Value Constraint: Binding specific actual constraint value or null if the value is in error or there is no value constraint.:::
XSElementDeclaration#getActualVCType():::The actual constraint value built-in datatype, e.g:::
XSElementDeclaration#getItemValueTypes():::In the case the actual constraint value represents a list, i.e:::
XSElementDeclaration#getValueConstraintValue():::The actual value of the default or fixed value constraint.:::
XSElementDeclaration#getNillable()::: If nillable is true, then an element may also be valid if it carries the namespace qualified attribute with local name nil from namespace http://www.w3.org/2001/XMLSchema-instance and value true (xsi:nil) even if it has no text or element content despite a content type which would otherwise require content.:::
XSElementDeclaration#getIdentityConstraints():::identity-constraint definitions: a set of constraint definitions if it exists, otherwise an empty XSNamedMap.:::
XSElementDeclaration#getSubstitutionGroupAffiliation():::[substitution group affiliation]: a top-level element definition if it exists, otherwise null.:::
XSElementDeclaration#isSubstitutionGroupExclusion(short):::Convenience method that checks if exclusion is a substitution group exclusion for this element declaration.:::
XSElementDeclaration#getSubstitutionGroupExclusions()::: [substitution group exclusions]: the returned value is a bit combination of the subset of { DERIVATION_EXTENSION, DERIVATION_RESTRICTION} or DERIVATION_NONE.:::
XSElementDeclaration#isDisallowedSubstitution(short):::Convenience method that checks if disallowed is a disallowed substitution for this element declaration.:::
XSElementDeclaration#getDisallowedSubstitutions()::: [disallowed substitutions]: the returned value is a bit combination of the subset of { DERIVATION_SUBSTITUTION, DERIVATION_EXTENSION, DERIVATION_RESTRICTION } corresponding to substitutions disallowed by this XSElementDeclaration or DERIVATION_NONE.:::
XSElementDeclaration#getAbstract():::{abstract} A boolean.:::
XSElementDeclaration#getAnnotation():::An annotation if it exists, otherwise null:::
XSElementDeclaration#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSFacet#getFacetKind():::The name of the facet, e.g:::
XSFacet#getLexicalFacetValue():::A value of this facet.:::
XSFacet#getIntFacetValue():::If this facet is length, minLength, maxLength, totalDigits, or fractionDigits, and if the value can fit in "int", then return the value of the facet as an int:::
XSFacet#getActualFacetValue():::If this facet is minInclusive, maxInclusive, minExclusive, or maxExclusive, then return the actual value of the facet:::
XSFacet#getFixed():::[Facets]: check whether a facet is fixed.:::
XSFacet#getAnnotation():::An annotation if it exists, otherwise null:::
XSFacet#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSIDCDefinition#getCategory():::[identity-constraint category]: one of key, keyref or unique.:::
XSIDCDefinition#getSelectorStr():::[selector]: a restricted XPath 1.0 expression.:::
XSIDCDefinition#getFieldStrs():::[fields]: a non-empty list of restricted  XPath 1.0 expressions.:::
XSIDCDefinition#getRefKey():::[referenced key]: required if [identity-constraint category] is keyref, null otherwise:::
XSIDCDefinition#getAnnotations():::A sequence of [annotations] or an empty  XSObjectList.:::
XSImplementation#getRecognizedVersions():::A list containing the versions of XML Schema documents recognized by this XSImplemenation.:::
XSImplementation#createXSLoader(StringList):::Creates a new XSLoader:::
XSLoader#getConfig()::: The configuration of a document:::
XSLoader#loadURIList(StringList):::Parses the content of XML Schema documents specified as the list of URI references:::
XSLoader#loadInputList(LSInputList)::: Parses the content of XML Schema documents specified as a list of LSInputs.:::
XSLoader#loadURI(String):::Parse an XML Schema document from a location identified by a URI reference:::
XSLoader#load(LSInput)::: Parse an XML Schema document from a resource identified by a LSInput .:::
XSModel#getNamespaces():::Convenience method:::
XSModel#getNamespaceItems():::A set of namespace schema information information items (of type XSNamespaceItem), one for each namespace name which appears as the target namespace of any schema component in the schema used for that assessment, and one for absent if any schema component in the schema had no target namespace:::
XSModel#getComponents(short):::Returns a list of top-level components, i.e:::
XSModel#getComponentsByNamespace(short, String):::Convenience method:::
XSModel#getAnnotations()::: [annotations]: a set of annotations if it exists, otherwise an empty XSObjectList.:::
XSModel#getElementDeclaration(String, String):::Convenience method:::
XSModel#getAttributeDeclaration(String, String):::Convenience method:::
XSModel#getTypeDefinition(String, String):::Convenience method:::
XSModel#getAttributeGroup(String, String):::Convenience method:::
XSModel#getModelGroupDefinition(String, String):::Convenience method:::
XSModel#getNotationDeclaration(String, String):::Convenience method:::
XSModel#getIDCDefinition(String, String):::Convenience method:::
XSModel#getSubstitutionGroup(XSElementDeclaration):::Convenience method:::
XSModelGroup#getCompositor():::[compositor]: one of all, choice or sequence:::
XSModelGroup#getParticles()::: A list of [particles] if it exists, otherwise an empty XSObjectList.:::
XSModelGroup#getAnnotation():::An annotation if it exists, otherwise null:::
XSModelGroup#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSModelGroupDefinition#getModelGroup():::A model group.:::
XSModelGroupDefinition#getAnnotation():::An annotation if it exists, otherwise null:::
XSModelGroupDefinition#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSMultiValueFacet#getFacetKind():::The name of the facet, i.e:::
XSMultiValueFacet#getLexicalFacetValues():::Values of this facet.:::
XSMultiValueFacet#getEnumerationValues():::A list of XSValue objects:::
XSMultiValueFacet#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSNamedMap#getLength():::The number of XSObjects in the XSObjectList:::
XSNamedMap#item(int)::: Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list:::
XSNamedMap#itemByName(String, String):::Retrieves an XSObject specified by local name and namespace URI:::
XSNamespaceItem#getSchemaNamespace():::[schema namespace]: A namespace name or null if absent.:::
XSNamespaceItem#getComponents(short):::[schema components]: a list of top-level components, i.e:::
XSNamespaceItem#getAnnotations()::: [annotations]: a set of annotations if it exists, otherwise an empty XSObjectList.:::
XSNamespaceItem#getElementDeclaration(String):::Convenience method:::
XSNamespaceItem#getAttributeDeclaration(String):::Convenience method:::
XSNamespaceItem#getTypeDefinition(String):::Convenience method:::
XSNamespaceItem#getAttributeGroup(String):::Convenience method:::
XSNamespaceItem#getModelGroupDefinition(String):::Convenience method:::
XSNamespaceItem#getNotationDeclaration(String):::Convenience method:::
XSNamespaceItem#getIDCDefinition(String):::Convenience method:::
XSNamespaceItem#getDocumentLocations():::[document location] - a list of location URIs for the documents that contributed to the XSModel.:::
XSNamespaceItemList#getLength()::: The number of XSNamespaceItems in the list:::
XSNamespaceItemList#item(int)::: Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list:::
XSNotationDeclaration#getSystemId()::: The URI reference representing the system identifier for the notation declaration, if present, null otherwise.:::
XSNotationDeclaration#getPublicId()::: The string representing the public identifier for this notation declaration, if present; null otherwise.:::
XSNotationDeclaration#getAnnotation():::An annotation if it exists, otherwise null:::
XSNotationDeclaration#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSObject#getType()::: The type of this object, i.e:::
XSObject#getName():::The name of type NCName, as defined in XML Namespaces, of this declaration specified in the {name} property of the component or null if the definition of this component does not have a {name} property:::
XSObject#getNamespace()::: The [target namespace] of this object, or null if it is unspecified.:::
XSObject#getNamespaceItem():::A namespace schema information item corresponding to the target namespace of the component, if it is globally declared; or null otherwise.:::
XSObjectList#getLength()::: The number of XSObjects in the list:::
XSObjectList#item(int)::: Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list:::
XSParticle#getMinOccurs():::[min occurs]: determines the minimum number of terms that can occur.:::
XSParticle#getMaxOccurs()::: [max occurs]: determines the maximum number of terms that can occur:::
XSParticle#getMaxOccursUnbounded():::[max occurs]: whether the maxOccurs value is unbounded.:::
XSParticle#getTerm():::[term]: one of a model group, a wildcard, or an element declaration.:::
XSParticle#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSSimpleTypeDefinition#getVariety():::[variety]: one of {atomic, list, union} or absent.:::
XSSimpleTypeDefinition#getPrimitiveType():::If variety is atomic the primitive type definition (a built-in primitive datatype definition or the simple ur-type definition) is available, otherwise null.:::
XSSimpleTypeDefinition#getBuiltInKind():::Returns the closest built-in type category this type represents or derived from:::
XSSimpleTypeDefinition#getItemType():::If variety is list the item type definition (an atomic or union simple type definition) is available, otherwise null.:::
XSSimpleTypeDefinition#getMemberTypes():::If variety is union the list of member type definitions (a non-empty sequence of simple type definitions) is available, otherwise an empty XSObjectList.:::
XSSimpleTypeDefinition#getDefinedFacets():::[facets]: all facets defined on this type:::
XSSimpleTypeDefinition#isDefinedFacet(short):::Convenience method:::
XSSimpleTypeDefinition#getFixedFacets():::[facets]: all defined facets for this type which are fixed.:::
XSSimpleTypeDefinition#isFixedFacet(short):::Convenience method:::
XSSimpleTypeDefinition#getLexicalFacetValue(short):::Convenience method:::
XSSimpleTypeDefinition#getLexicalEnumeration():::A list of enumeration values if it exists, otherwise an empty StringList.:::
XSSimpleTypeDefinition#getLexicalPattern():::A list of pattern values if it exists, otherwise an empty StringList.:::
XSSimpleTypeDefinition#getOrdered()::: Fundamental Facet: ordered.:::
XSSimpleTypeDefinition#getFinite():::Fundamental Facet: cardinality.:::
XSSimpleTypeDefinition#getBounded():::Fundamental Facet: bounded.:::
XSSimpleTypeDefinition#getNumeric():::Fundamental Facet: numeric.:::
XSSimpleTypeDefinition#getFacets()::: A list of constraining facets if it exists, otherwise an empty XSObjectList:::
XSSimpleTypeDefinition#getMultiValueFacets()::: A list of enumeration and pattern constraining facets if it exists, otherwise an empty XSObjectList.:::
XSSimpleTypeDefinition#getFacet(int):::A constraining facet object:::
XSSimpleTypeDefinition#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::
XSTypeDefinition#getTypeCategory():::Return whether this type definition is a simple type or complex type.:::
XSTypeDefinition#getBaseType():::{base type definition}: either a simple type definition or a complex type definition.:::
XSTypeDefinition#isFinal(short):::{final}:::
XSTypeDefinition#getFinal():::For complex types the returned value is a bit combination of the subset of {DERIVATION_EXTENSION, DERIVATION_RESTRICTION} corresponding to final set of this type or DERIVATION_NONE:::
XSTypeDefinition#getAnonymous()::: Convenience attribute:::
XSTypeDefinition#derivedFromType(XSTypeDefinition, short):::Convenience method which checks if this type is derived from the given ancestorType.:::
XSTypeDefinition#derivedFrom(String, String, short):::Convenience method which checks if this type is derived from the given ancestor type.:::
XSValue#getNormalizedValue():::The schema normalized value.:::
XSValue#getActualValue():::The actual value:::
XSValue#getTypeDefinition():::The declared simple type definition used to validate this value:::
XSValue#getMemberTypeDefinition():::If the declared simple type definition is a union, return the member type actually used to validate the value:::
XSValue#getMemberTypeDefinitions():::If getTypeDefinition() returns a list type whose item type is a union type, then this method returns a list with the same length as the value list, for simple types that actually validated the corresponding item in the value.:::
XSValue#getActualValueType():::The actual value built-in datatype, e.g:::
XSValue#getListValueTypes():::In the case the actual value represents a list, i.e:::
XSWildcard#getConstraintType():::Namespace constraint: A constraint type: any, not, list.:::
XSWildcard#getNsConstraintList():::Namespace constraint: For constraintType NSCONSTRAINT_LIST, the list contains allowed namespaces:::
XSWildcard#getProcessContents():::[process contents]: one of skip, lax or strict:::
XSWildcard#getAnnotation():::An annotation if it exists, otherwise null:::
XSWildcard#getAnnotations():::A sequence of [annotations] or an empty XSObjectList.:::

sun.jvm.hotspot.interpreter.Bytecode#alignedOffset(int)->int::: bytecode aligned offset
sun.jvm.hotspot.interpreter.Bytecode#getIndexU1()->int::: bytecode get index u1
sun.jvm.hotspot.interpreter.Bytecode#getIndexU2(int, boolean)->int::: bytecode get index u2
sun.jvm.hotspot.interpreter.Bytecode#getIndexU4()->int::: bytecode get index u4
sun.jvm.hotspot.interpreter.Bytecode#hasIndexU4()->boolean::: bytecode has index u4
sun.jvm.hotspot.interpreter.Bytecode#getIndexU1Cpcache()->int::: bytecode get index u1 cpcache
sun.jvm.hotspot.interpreter.Bytecode#getIndexU2Cpcache()->int::: bytecode get index u2 cpcache
sun.jvm.hotspot.interpreter.Bytecode#can_use_native_byte_order(int, boolean)->boolean::: bytecode can_use_native_byte_order
sun.jvm.hotspot.interpreter.Bytecode#javaSignedWordAt(int)->int::: bytecode java signed word at
sun.jvm.hotspot.interpreter.Bytecode#javaShortAt(int)->short::: bytecode java short at
sun.jvm.hotspot.interpreter.Bytecode#javaByteAt(int)->byte::: bytecode java byte at
sun.jvm.hotspot.interpreter.Bytecode#method()->Method::: bytecode method
sun.jvm.hotspot.interpreter.Bytecode#bci()->int::: bytecode bci
sun.jvm.hotspot.interpreter.Bytecode#code()->int::: bytecode code
sun.jvm.hotspot.interpreter.Bytecode#javaCode()->int::: bytecode java code
sun.jvm.hotspot.interpreter.Bytecode#getBytecodeName()->String::: bytecode get bytecode name
sun.jvm.hotspot.interpreter.Bytecode#getJavaBytecodeName()->String::: bytecode get java bytecode name
sun.jvm.hotspot.interpreter.Bytecode#getLength()->int::: bytecode get length
sun.jvm.hotspot.interpreter.Bytecode#getJavaLength()->int::: bytecode get java length
sun.jvm.hotspot.interpreter.Bytecode#toString()->String::: bytecode to string
sun.jvm.hotspot.interpreter.BytecodeANewArray#getKlass()->Klass::: bytecode new array get klass
sun.jvm.hotspot.interpreter.BytecodeANewArray#verify()->void::: bytecode new array verify
sun.jvm.hotspot.interpreter.BytecodeANewArray#isValid()->boolean::: bytecode new array is valid
sun.jvm.hotspot.interpreter.BytecodeANewArray#at(Method, int)->BytecodeANewArray::: bytecode new array at
sun.jvm.hotspot.interpreter.BytecodeANewArray#atCheck(Method, int)->BytecodeANewArray:::Like at, but returns null if the BCI is not at anewarray
sun.jvm.hotspot.interpreter.BytecodeANewArray#at(BytecodeStream)->BytecodeANewArray::: bytecode new array at
sun.jvm.hotspot.interpreter.BytecodeBipush#getValue()->byte::: bytecode bipush get value
sun.jvm.hotspot.interpreter.BytecodeBipush#verify()->void::: bytecode bipush verify
sun.jvm.hotspot.interpreter.BytecodeBipush#isValid()->boolean::: bytecode bipush is valid
sun.jvm.hotspot.interpreter.BytecodeBipush#at(Method, int)->BytecodeBipush::: bytecode bipush at
sun.jvm.hotspot.interpreter.BytecodeBipush#atCheck(Method, int)->BytecodeBipush:::Like at, but returns null if the BCI is not at bipush
sun.jvm.hotspot.interpreter.BytecodeBipush#at(BytecodeStream)->BytecodeBipush::: bytecode bipush at
sun.jvm.hotspot.interpreter.BytecodeBipush#toString()->String::: bytecode bipush to string
sun.jvm.hotspot.interpreter.BytecodeCheckCast#getCheckCastKlass()->InstanceKlass::: bytecode check cast get check cast klass
sun.jvm.hotspot.interpreter.BytecodeCheckCast#verify()->void::: bytecode check cast verify
sun.jvm.hotspot.interpreter.BytecodeCheckCast#isValid()->boolean::: bytecode check cast is valid
sun.jvm.hotspot.interpreter.BytecodeCheckCast#at(Method, int)->BytecodeCheckCast::: bytecode check cast at
sun.jvm.hotspot.interpreter.BytecodeCheckCast#atCheck(Method, int)->BytecodeCheckCast:::Like at, but returns null if the BCI is not at checkcast
sun.jvm.hotspot.interpreter.BytecodeCheckCast#at(BytecodeStream)->BytecodeCheckCast::: bytecode check cast at
sun.jvm.hotspot.interpreter.BytecodeDisassembler#getMethod()->Method::: bytecode disassembler get method
sun.jvm.hotspot.interpreter.BytecodeDisassembler#decode(BytecodeVisitor)->void::: bytecode disassembler decode
sun.jvm.hotspot.interpreter.BytecodeGetField#isStatic()->boolean::: bytecode get field is static
sun.jvm.hotspot.interpreter.BytecodeGetField#verify()->void::: bytecode get field verify
sun.jvm.hotspot.interpreter.BytecodeGetField#isValid()->boolean::: bytecode get field is valid
sun.jvm.hotspot.interpreter.BytecodeGetField#at(Method, int)->BytecodeGetField::: bytecode get field at
sun.jvm.hotspot.interpreter.BytecodeGetField#atCheck(Method, int)->BytecodeGetField:::Like at, but returns null if the BCI is not at getfield
sun.jvm.hotspot.interpreter.BytecodeGetField#at(BytecodeStream)->BytecodeGetField::: bytecode get field at
sun.jvm.hotspot.interpreter.BytecodeGetPut#name()->Symbol::: bytecode get put name
sun.jvm.hotspot.interpreter.BytecodeGetPut#signature()->Symbol::: bytecode get put signature
sun.jvm.hotspot.interpreter.BytecodeGetPut#getField()->Field::: bytecode get put get field
sun.jvm.hotspot.interpreter.BytecodeGetPut#toString()->String::: bytecode get put to string
sun.jvm.hotspot.interpreter.BytecodeGetPut#isStatic()->boolean::: bytecode get put is static
sun.jvm.hotspot.interpreter.BytecodeGetStatic#isStatic()->boolean::: bytecode get static is static
sun.jvm.hotspot.interpreter.BytecodeGetStatic#verify()->void::: bytecode get static verify
sun.jvm.hotspot.interpreter.BytecodeGetStatic#isValid()->boolean::: bytecode get static is valid
sun.jvm.hotspot.interpreter.BytecodeGetStatic#atic at(Method, int)->BytecodeGetSt::: bytecode get static at
sun.jvm.hotspot.interpreter.BytecodeGetStatic#atCheck(Method, int)->BytecodeGetStatic:::Like at, but returns null if the BCI is not at getstatic
sun.jvm.hotspot.interpreter.BytecodeGetStatic#atic at(BytecodeStream)->BytecodeGetSt::: bytecode get static at
sun.jvm.hotspot.interpreter.BytecodeGoto#getTargetBCI()->int::: bytecode goto get target i
sun.jvm.hotspot.interpreter.BytecodeGoto#verify()->void::: bytecode goto verify
sun.jvm.hotspot.interpreter.BytecodeGoto#isValid()->boolean::: bytecode goto is valid
sun.jvm.hotspot.interpreter.BytecodeGoto#at(Method, int)->BytecodeGoto::: bytecode goto at
sun.jvm.hotspot.interpreter.BytecodeGoto#atCheck(Method, int)->BytecodeGoto:::Like at, but returns null if the BCI is not at goto
sun.jvm.hotspot.interpreter.BytecodeGoto#at(BytecodeStream)->BytecodeGoto::: bytecode goto at
sun.jvm.hotspot.interpreter.BytecodeGotoW#getTargetBCI()->int::: bytecode goto w get target i
sun.jvm.hotspot.interpreter.BytecodeGotoW#verify()->void::: bytecode goto w verify
sun.jvm.hotspot.interpreter.BytecodeGotoW#isValid()->boolean::: bytecode goto w is valid
sun.jvm.hotspot.interpreter.BytecodeGotoW#at(Method, int)->BytecodeGotoW::: bytecode goto w at
sun.jvm.hotspot.interpreter.BytecodeGotoW#atCheck(Method, int)->BytecodeGotoW:::Like at, but returns null if the BCI is not at goto_w
sun.jvm.hotspot.interpreter.BytecodeGotoW#at(BytecodeStream)->BytecodeGotoW::: bytecode goto w at
sun.jvm.hotspot.interpreter.BytecodeIf#getTargetBCI()->int::: bytecode if get target i
sun.jvm.hotspot.interpreter.BytecodeIf#verify()->void::: bytecode if verify
sun.jvm.hotspot.interpreter.BytecodeIf#isValid()->boolean::: bytecode if is valid
sun.jvm.hotspot.interpreter.BytecodeIf#at(Method, int)->BytecodeIf::: bytecode if at
sun.jvm.hotspot.interpreter.BytecodeIf#atCheck(Method, int)->BytecodeIf:::Like at, but returns null if the BCI is not at some ifxxx bytecode
sun.jvm.hotspot.interpreter.BytecodeIf#at(BytecodeStream)->BytecodeIf::: bytecode if at
sun.jvm.hotspot.interpreter.BytecodeIinc#getIncrement()->int::: bytecode iinc get increment
sun.jvm.hotspot.interpreter.BytecodeIinc#verify()->void::: bytecode iinc verify
sun.jvm.hotspot.interpreter.BytecodeIinc#isValid()->boolean::: bytecode iinc is valid
sun.jvm.hotspot.interpreter.BytecodeIinc#at(Method, int)->BytecodeIinc::: bytecode iinc at
sun.jvm.hotspot.interpreter.BytecodeIinc#atCheck(Method, int)->BytecodeIinc:::Like at, but returns null if the BCI is not at iinc
sun.jvm.hotspot.interpreter.BytecodeIinc#at(BytecodeStream)->BytecodeIinc::: bytecode iinc at
sun.jvm.hotspot.interpreter.BytecodeIinc#toString()->String::: bytecode iinc to string
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#getInstanceOfKlass()->InstanceKlass::: bytecode instance of get instance of klass
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#verify()->void::: bytecode instance of verify
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#isValid()->boolean::: bytecode instance of is valid
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#at(Method, int)->BytecodeInstanceOf::: bytecode instance of at
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#atCheck(Method, int)->BytecodeInstanceOf:::Like at, but returns null if the BCI is not at instanceof
sun.jvm.hotspot.interpreter.BytecodeInstanceOf#at(BytecodeStream)->BytecodeInstanceOf::: bytecode instance of at
sun.jvm.hotspot.interpreter.BytecodeInvoke#at(Method, int)->BytecodeInvoke::: bytecode invoke at
sun.jvm.hotspot.interpreter.BytecodeInvoke#atCheck(Method, int)->BytecodeInvoke:::Like at, but returns null if the BCI is not at an invoke
sun.jvm.hotspot.interpreter.BytecodeInvoke#at(BytecodeStream)->BytecodeInvoke::: bytecode invoke at
sun.jvm.hotspot.interpreter.BytecodeInvoke#name()->Symbol::: bytecode invoke name
sun.jvm.hotspot.interpreter.BytecodeInvoke#signature()->Symbol::: bytecode invoke signature
sun.jvm.hotspot.interpreter.BytecodeInvoke#getInvokedMethod()->Method::: bytecode invoke get invoked method
sun.jvm.hotspot.interpreter.BytecodeInvoke#resultType()->int::: bytecode invoke result type
sun.jvm.hotspot.interpreter.BytecodeInvoke#adjustedInvokeCode()->int::: bytecode invoke adjusted invoke code
sun.jvm.hotspot.interpreter.BytecodeInvoke#isInvokeinterface()->boolean::: bytecode invoke is invokeinterface
sun.jvm.hotspot.interpreter.BytecodeInvoke#isInvokevirtual()->boolean::: bytecode invoke is invokevirtual
sun.jvm.hotspot.interpreter.BytecodeInvoke#isInvokestatic()->boolean::: bytecode invoke is invokestatic
sun.jvm.hotspot.interpreter.BytecodeInvoke#isInvokespecial()->boolean::: bytecode invoke is invokespecial
sun.jvm.hotspot.interpreter.BytecodeInvoke#isInvokedynamic()->boolean::: bytecode invoke is invokedynamic
sun.jvm.hotspot.interpreter.BytecodeInvoke#isValid()->boolean::: bytecode invoke is valid
sun.jvm.hotspot.interpreter.BytecodeInvoke#verify()->void::: bytecode invoke verify
sun.jvm.hotspot.interpreter.BytecodeInvoke#toString()->String::: bytecode invoke to string
sun.jvm.hotspot.interpreter.BytecodeJmp#getTargetBCI()->int::: bytecode jmp get target i
sun.jvm.hotspot.interpreter.BytecodeJmp#toString()->String::: bytecode jmp to string
sun.jvm.hotspot.interpreter.BytecodeJsr#getTargetBCI()->int::: bytecode jsr get target i
sun.jvm.hotspot.interpreter.BytecodeJsr#verify()->void::: bytecode jsr verify
sun.jvm.hotspot.interpreter.BytecodeJsr#isValid()->boolean::: bytecode jsr is valid
sun.jvm.hotspot.interpreter.BytecodeJsr#at(Method, int)->BytecodeJsr::: bytecode jsr at
sun.jvm.hotspot.interpreter.BytecodeJsr#atCheck(Method, int)->BytecodeJsr:::Like at, but returns null if the BCI is not at jsr
sun.jvm.hotspot.interpreter.BytecodeJsr#at(BytecodeStream)->BytecodeJsr::: bytecode jsr at
sun.jvm.hotspot.interpreter.BytecodeJsrW#getTargetBCI()->int::: bytecode jsr w get target i
sun.jvm.hotspot.interpreter.BytecodeJsrW#verify()->void::: bytecode jsr w verify
sun.jvm.hotspot.interpreter.BytecodeJsrW#isValid()->boolean::: bytecode jsr w is valid
sun.jvm.hotspot.interpreter.BytecodeJsrW#at(Method, int)->BytecodeJsrW::: bytecode jsr w at
sun.jvm.hotspot.interpreter.BytecodeJsrW#atCheck(Method, int)->BytecodeJsrW:::Like at, but returns null if the BCI is not at jsr_w
sun.jvm.hotspot.interpreter.BytecodeJsrW#at(BytecodeStream)->BytecodeJsrW::: bytecode jsr w at
sun.jvm.hotspot.interpreter.BytecodeLoad#verify()->void::: bytecode load verify
sun.jvm.hotspot.interpreter.BytecodeLoad#isValid()->boolean::: bytecode load is valid
sun.jvm.hotspot.interpreter.BytecodeLoad#at(Method, int)->BytecodeLoad::: bytecode load at
sun.jvm.hotspot.interpreter.BytecodeLoad#atCheck(Method, int)->BytecodeLoad:::Like at, but returns null if the BCI is not at load
sun.jvm.hotspot.interpreter.BytecodeLoad#at(BytecodeStream)->BytecodeLoad::: bytecode load at
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#hasCacheIndex()->boolean::: bytecode load constant has cache index
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#rawIndex()->int::: bytecode load constant raw index
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#poolIndex()->int::: bytecode load constant pool index
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#cacheIndex()->int::: bytecode load constant cache index
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#resultType()->BasicType::: bytecode load constant result type
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#verify()->void::: bytecode load constant verify
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#isValid()->boolean::: bytecode load constant is valid
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#isKlassConstant()->boolean::: bytecode load constant is klass constant
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#getKlass()->Object::: bytecode load constant get klass
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#at(Method, int)->BytecodeLoadConstant::: bytecode load constant at
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#atCheck(Method, int)->BytecodeLoadConstant:::Like at, but returns null if the BCI is not at ldc or ldc_w or ldc2_w
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#at(BytecodeStream)->BytecodeLoadConstant::: bytecode load constant at
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#getConstantValue()->String::: bytecode load constant get constant value
sun.jvm.hotspot.interpreter.BytecodeLoadConstant#toString()->String::: bytecode load constant to string
sun.jvm.hotspot.interpreter.BytecodeLoadStore#toString()->String::: bytecode load store to string
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#defaultOffset()->int::: bytecode lookupswitch default offset
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#numberOfPairs()->int::: bytecode lookupswitch number of pairs
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#pairAt(int)->LookupswitchPair::: bytecode lookupswitch pair at
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#verify()->void::: bytecode lookupswitch verify
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#isValid()->boolean::: bytecode lookupswitch is valid
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#at(Method, int)->BytecodeLookupswitch::: bytecode lookupswitch at
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#atCheck(Method, int)->BytecodeLookupswitch:::Like at, but returns null if the BCI is not at lookupswitch
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#at(BytecodeStream)->BytecodeLookupswitch::: bytecode lookupswitch at
sun.jvm.hotspot.interpreter.BytecodeLookupswitch#toString()->String::: bytecode lookupswitch to string
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#getKlass()->Klass::: bytecode multi new array get klass
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#getDimension()->int::: bytecode multi new array get dimension
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#verify()->void::: bytecode multi new array verify
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#isValid()->boolean::: bytecode multi new array is valid
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#at(Method, int)->BytecodeMultiANewArray::: bytecode multi new array at
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#atCheck(Method, int)->BytecodeMultiANewArray:::Like at, but returns null if the BCI is not at multianewarray
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#at(BytecodeStream)->BytecodeMultiANewArray::: bytecode multi new array at
sun.jvm.hotspot.interpreter.BytecodeMultiANewArray#toString()->String::: bytecode multi new array to string
sun.jvm.hotspot.interpreter.BytecodeNew#getNewKlass()->InstanceKlass::: bytecode new get new klass
sun.jvm.hotspot.interpreter.BytecodeNew#verify()->void::: bytecode new verify
sun.jvm.hotspot.interpreter.BytecodeNew#isValid()->boolean::: bytecode new is valid
sun.jvm.hotspot.interpreter.BytecodeNew#at(Method, int)->BytecodeNew::: bytecode new at
sun.jvm.hotspot.interpreter.BytecodeNew#atCheck(Method, int)->BytecodeNew:::Like at, but returns null if the BCI is not at new
sun.jvm.hotspot.interpreter.BytecodeNew#at(BytecodeStream)->BytecodeNew::: bytecode new at
sun.jvm.hotspot.interpreter.BytecodeNewArray#getType()->int::: bytecode new array get type
sun.jvm.hotspot.interpreter.BytecodeNewArray#verify()->void::: bytecode new array verify
sun.jvm.hotspot.interpreter.BytecodeNewArray#isValid()->boolean::: bytecode new array is valid
sun.jvm.hotspot.interpreter.BytecodeNewArray#getTypeName()->String::: bytecode new array get type name
sun.jvm.hotspot.interpreter.BytecodeNewArray#at(Method, int)->BytecodeNewArray::: bytecode new array at
sun.jvm.hotspot.interpreter.BytecodeNewArray#atCheck(Method, int)->BytecodeNewArray:::Like at, but returns null if the BCI is not at newarray
sun.jvm.hotspot.interpreter.BytecodeNewArray#at(BytecodeStream)->BytecodeNewArray::: bytecode new array at
sun.jvm.hotspot.interpreter.BytecodeNewArray#toString()->String::: bytecode new array to string
sun.jvm.hotspot.interpreter.BytecodePutField#isStatic()->boolean::: bytecode put field is static
sun.jvm.hotspot.interpreter.BytecodePutField#verify()->void::: bytecode put field verify
sun.jvm.hotspot.interpreter.BytecodePutField#isValid()->boolean::: bytecode put field is valid
sun.jvm.hotspot.interpreter.BytecodePutField#at(Method, int)->BytecodePutField::: bytecode put field at
sun.jvm.hotspot.interpreter.BytecodePutField#atCheck(Method, int)->BytecodePutField:::Like at, but returns null if the BCI is not at putfield
sun.jvm.hotspot.interpreter.BytecodePutField#at(BytecodeStream)->BytecodePutField::: bytecode put field at
sun.jvm.hotspot.interpreter.BytecodePutStatic#isStatic()->boolean::: bytecode put static is static
sun.jvm.hotspot.interpreter.BytecodePutStatic#verify()->void::: bytecode put static verify
sun.jvm.hotspot.interpreter.BytecodePutStatic#isValid()->boolean::: bytecode put static is valid
sun.jvm.hotspot.interpreter.BytecodePutStatic#atic at(Method, int)->BytecodePutSt::: bytecode put static at
sun.jvm.hotspot.interpreter.BytecodePutStatic#atCheck(Method, int)->BytecodePutStatic:::Like at, but returns null if the BCI is not at putstatic
sun.jvm.hotspot.interpreter.BytecodePutStatic#atic at(BytecodeStream)->BytecodePutSt::: bytecode put static at
sun.jvm.hotspot.interpreter.BytecodeRet#verify()->void::: bytecode ret verify
sun.jvm.hotspot.interpreter.BytecodeRet#isValid()->boolean::: bytecode ret is valid
sun.jvm.hotspot.interpreter.BytecodeRet#at(Method, int)->BytecodeRet::: bytecode ret at
sun.jvm.hotspot.interpreter.BytecodeRet#atCheck(Method, int)->BytecodeRet:::Like at, but returns null if the BCI is not at ret
sun.jvm.hotspot.interpreter.BytecodeRet#at(BytecodeStream)->BytecodeRet::: bytecode ret at
sun.jvm.hotspot.interpreter.BytecodeRet#toString()->String::: bytecode ret to string
sun.jvm.hotspot.interpreter.Bytecodes#specialLengthAt(Method, int)->int::: bytecodes special length at
sun.jvm.hotspot.interpreter.Bytecodes#check(int)->void::: bytecodes check
sun.jvm.hotspot.interpreter.Bytecodes#wideCheck(int)->void::: bytecodes wide check
sun.jvm.hotspot.interpreter.Bytecodes#codeAt(Method, int)->int:::Fetches a bytecode, hiding breakpoints as necessary
sun.jvm.hotspot.interpreter.Bytecodes#codeOrBPAt(Method, int)->int:::Fetches a bytecode or a breakpoint
sun.jvm.hotspot.interpreter.Bytecodes#isActiveBreakpointAt(Method, int)->boolean::: bytecodes is active breakpoint at
sun.jvm.hotspot.interpreter.Bytecodes#isDefined(int)->boolean::: bytecodes is defined
sun.jvm.hotspot.interpreter.Bytecodes#wideIsDefined(int)->boolean::: bytecodes wide is defined
sun.jvm.hotspot.interpreter.Bytecodes#name(int)->String::: bytecodes name
sun.jvm.hotspot.interpreter.Bytecodes#format(int)->String::: bytecodes format
sun.jvm.hotspot.interpreter.Bytecodes#wideFormat(int)->String::: bytecodes wide format
sun.jvm.hotspot.interpreter.Bytecodes#resultType(int)->int::: bytecodes result type
sun.jvm.hotspot.interpreter.Bytecodes#depth(int)->int::: bytecodes depth
sun.jvm.hotspot.interpreter.Bytecodes#lengthFor(int)->int::: bytecodes length for
sun.jvm.hotspot.interpreter.Bytecodes#wideLengthFor(int)->int::: bytecodes wide length for
sun.jvm.hotspot.interpreter.Bytecodes#canTrap(int)->boolean::: bytecodes can trap
sun.jvm.hotspot.interpreter.Bytecodes#javaCode(int)->int::: bytecodes java code
sun.jvm.hotspot.interpreter.Bytecodes#canRewrite(int)->boolean::: bytecodes can rewrite
sun.jvm.hotspot.interpreter.Bytecodes#native_byte_order(int)->boolean::: bytecodes native_byte_order
sun.jvm.hotspot.interpreter.Bytecodes#uses_cp_cache(int)->boolean::: bytecodes uses_cp_cache
sun.jvm.hotspot.interpreter.Bytecodes#lengthAt(Method, int)->int::: bytecodes length at
sun.jvm.hotspot.interpreter.Bytecodes#javaLengthAt(Method, int)->int::: bytecodes java length at
sun.jvm.hotspot.interpreter.Bytecodes#isJavaCode(int)->boolean::: bytecodes is java code
sun.jvm.hotspot.interpreter.Bytecodes#isFastCode(int)->boolean::: bytecodes is fast code
sun.jvm.hotspot.interpreter.Bytecodes#isAload(int)->boolean::: bytecodes is aload
sun.jvm.hotspot.interpreter.Bytecodes#isAstore(int)->boolean::: bytecodes is astore
sun.jvm.hotspot.interpreter.Bytecodes#isZeroConst(int)->boolean::: bytecodes is zero const
sun.jvm.hotspot.interpreter.Bytecodes#flags(int, boolean)->int::: bytecodes flags
sun.jvm.hotspot.interpreter.Bytecodes#format_bits(int, boolean)->int::: bytecodes format_bits
sun.jvm.hotspot.interpreter.Bytecodes#has_all_flags(int, int, boolean)->boolean::: bytecodes has_all_flags
sun.jvm.hotspot.interpreter.Bytecodes#compute_flags(String)->char::: bytecodes compute_flags
sun.jvm.hotspot.interpreter.Bytecodes#compute_flags(String, int)->char::: bytecodes compute_flags
sun.jvm.hotspot.interpreter.BytecodeSipush#getValue()->short::: bytecode sipush get value
sun.jvm.hotspot.interpreter.BytecodeSipush#verify()->void::: bytecode sipush verify
sun.jvm.hotspot.interpreter.BytecodeSipush#isValid()->boolean::: bytecode sipush is valid
sun.jvm.hotspot.interpreter.BytecodeSipush#at(Method, int)->BytecodeSipush::: bytecode sipush at
sun.jvm.hotspot.interpreter.BytecodeSipush#atCheck(Method, int)->BytecodeSipush:::Like at, but returns null if the BCI is not at sipush
sun.jvm.hotspot.interpreter.BytecodeSipush#at(BytecodeStream)->BytecodeSipush::: bytecode sipush at
sun.jvm.hotspot.interpreter.BytecodeSipush#toString()->String::: bytecode sipush to string
sun.jvm.hotspot.interpreter.BytecodeStore#verify()->void::: bytecode store verify
sun.jvm.hotspot.interpreter.BytecodeStore#isValid()->boolean::: bytecode store is valid
sun.jvm.hotspot.interpreter.BytecodeStore#at(Method, int)->BytecodeStore::: bytecode store at
sun.jvm.hotspot.interpreter.BytecodeStore#atCheck(Method, int)->BytecodeStore:::Like at, but returns null if the BCI is not at store
sun.jvm.hotspot.interpreter.BytecodeStore#at(BytecodeStream)->BytecodeStore::: bytecode store at
sun.jvm.hotspot.interpreter.BytecodeStream#setInterval(int, int)->void::: bytecode stream set interval
sun.jvm.hotspot.interpreter.BytecodeStream#setStart(int)->void::: bytecode stream set start
sun.jvm.hotspot.interpreter.BytecodeStream#next()->int::: bytecode stream next
sun.jvm.hotspot.interpreter.BytecodeStream#method()->Method::: bytecode stream method
sun.jvm.hotspot.interpreter.BytecodeStream#bci()->int::: bytecode stream bci
sun.jvm.hotspot.interpreter.BytecodeStream#nextBCI()->int::: bytecode stream next i
sun.jvm.hotspot.interpreter.BytecodeStream#endBCI()->int::: bytecode stream end i
sun.jvm.hotspot.interpreter.BytecodeStream#code()->int::: bytecode stream code
sun.jvm.hotspot.interpreter.BytecodeStream#isWide()->boolean::: bytecode stream is wide
sun.jvm.hotspot.interpreter.BytecodeStream#isActiveBreakpoint()->boolean::: bytecode stream is active breakpoint
sun.jvm.hotspot.interpreter.BytecodeStream#isLastBytecode()->boolean::: bytecode stream is last bytecode
sun.jvm.hotspot.interpreter.BytecodeStream#setNextBCI(int)->void::: bytecode stream set next i
sun.jvm.hotspot.interpreter.BytecodeStream#dest()->int::: bytecode stream dest
sun.jvm.hotspot.interpreter.BytecodeStream#dest_w()->int::: bytecode stream dest_w
sun.jvm.hotspot.interpreter.BytecodeStream#getIndex()->int::: bytecode stream get index
sun.jvm.hotspot.interpreter.BytecodeStream#getIndexU1()->int::: bytecode stream get index u1
sun.jvm.hotspot.interpreter.BytecodeStream#getIndexU2()->int::: bytecode stream get index u2
sun.jvm.hotspot.interpreter.BytecodeStream#getIndexU4()->int::: bytecode stream get index u4
sun.jvm.hotspot.interpreter.BytecodeStream#hasIndexU4()->boolean::: bytecode stream has index u4
sun.jvm.hotspot.interpreter.BytecodeStream#getIndexU1Cpcache()->int::: bytecode stream get index u1 cpcache
sun.jvm.hotspot.interpreter.BytecodeStream#getIndexU2Cpcache()->int::: bytecode stream get index u2 cpcache
sun.jvm.hotspot.interpreter.BytecodeStream#codeAt(int)->int::: bytecode stream code at
sun.jvm.hotspot.interpreter.BytecodeTableswitch#defaultOffset()->int::: bytecode tableswitch default offset
sun.jvm.hotspot.interpreter.BytecodeTableswitch#lowKey()->int::: bytecode tableswitch low key
sun.jvm.hotspot.interpreter.BytecodeTableswitch#highKey()->int::: bytecode tableswitch high key
sun.jvm.hotspot.interpreter.BytecodeTableswitch#length()->int::: bytecode tableswitch length
sun.jvm.hotspot.interpreter.BytecodeTableswitch#destOffsetAt(int)->int::: bytecode tableswitch dest offset at
sun.jvm.hotspot.interpreter.BytecodeTableswitch#verify()->void::: bytecode tableswitch verify
sun.jvm.hotspot.interpreter.BytecodeTableswitch#isValid()->boolean::: bytecode tableswitch is valid
sun.jvm.hotspot.interpreter.BytecodeTableswitch#at(Method, int)->BytecodeTableswitch::: bytecode tableswitch at
sun.jvm.hotspot.interpreter.BytecodeTableswitch#atCheck(Method, int)->BytecodeTableswitch:::Like at, but returns null if the BCI is not at tableswitch
sun.jvm.hotspot.interpreter.BytecodeTableswitch#at(BytecodeStream)->BytecodeTableswitch::: bytecode tableswitch at
sun.jvm.hotspot.interpreter.BytecodeTableswitch#toString()->String::: bytecode tableswitch to string
sun.jvm.hotspot.interpreter.BytecodeVisitor#prologue(Method)->void::: bytecode visitor prologue
sun.jvm.hotspot.interpreter.BytecodeVisitor#visit(Bytecode)->void::: bytecode visitor visit
sun.jvm.hotspot.interpreter.BytecodeVisitor#epilogue()->void::: bytecode visitor epilogue
sun.jvm.hotspot.interpreter.BytecodeWideable#isWide()->boolean::: bytecode wideable is wide
sun.jvm.hotspot.interpreter.BytecodeWideable#getLocalVarIndex()->int::: bytecode wideable get local var index
sun.jvm.hotspot.interpreter.BytecodeWithCPIndex#index()->int::: bytecode with index index
sun.jvm.hotspot.interpreter.BytecodeWithCPIndex#indexForFieldOrMethod()->int::: bytecode with index index for field or method
sun.jvm.hotspot.interpreter.BytecodeWithKlass#getKlass()->Klass::: bytecode with klass get klass
sun.jvm.hotspot.interpreter.BytecodeWithKlass#getClassName()->Symbol::: bytecode with klass get class name
sun.jvm.hotspot.interpreter.BytecodeWithKlass#toString()->String::: bytecode with klass to string
sun.jvm.hotspot.interpreter.Interpreter#getCode()->StubQueue::: interpreter get code
sun.jvm.hotspot.interpreter.Interpreter#contains(Address)->boolean::: interpreter contains
sun.jvm.hotspot.interpreter.Interpreter#getCodeletContaining(Address)->InterpreterCodelet:::Debugging/printing
sun.jvm.hotspot.interpreter.InterpreterCodelet#getSize()->long::: interpreter codelet get size
sun.jvm.hotspot.interpreter.InterpreterCodelet#codeBegin()->Address::: interpreter codelet code begin
sun.jvm.hotspot.interpreter.InterpreterCodelet#codeEnd()->Address::: interpreter codelet code end
sun.jvm.hotspot.interpreter.InterpreterCodelet#codeSize()->long::: interpreter codelet code size
sun.jvm.hotspot.interpreter.InterpreterCodelet#getDescription()->String::: interpreter codelet get description
sun.jvm.hotspot.interpreter.InterpreterCodelet#verify()->void::: interpreter codelet verify
sun.jvm.hotspot.interpreter.InterpreterCodelet#printOn(PrintStream)->void::: interpreter codelet print on
sun.jvm.hotspot.interpreter.LookupswitchPair#match()->int::: lookupswitch pair match
sun.jvm.hotspot.interpreter.LookupswitchPair#offset()->int::: lookupswitch pair offset
sun.jvm.hotspot.interpreter.MaskFillerForNative#passInt()->void::: mask filler for native pass int
sun.jvm.hotspot.interpreter.MaskFillerForNative#passLong()->void::: mask filler for native pass long
sun.jvm.hotspot.interpreter.MaskFillerForNative#passFloat()->void::: mask filler for native pass float
sun.jvm.hotspot.interpreter.MaskFillerForNative#passDouble()->void::: mask filler for native pass double
sun.jvm.hotspot.interpreter.MaskFillerForNative#passObject()->void::: mask filler for native pass object
sun.jvm.hotspot.interpreter.MaskFillerForNative#generate()->void::: mask filler for native generate
sun.jvm.hotspot.interpreter.OffsetClosure#offsetDo(int)->void::: offset closure offset do
sun.jvm.hotspot.interpreter.OopMapCacheEntry#isValue(int)->boolean::: oop map cache entry is value
sun.jvm.hotspot.interpreter.OopMapCacheEntry#isOop(int)->boolean::: oop map cache entry is oop
sun.jvm.hotspot.interpreter.OopMapCacheEntry#iterateOop(OffsetClosure)->void::: oop map cache entry iterate oop
sun.jvm.hotspot.interpreter.OopMapCacheEntry#fill(Method, int)->void::: oop map cache entry fill
sun.jvm.hotspot.interpreter.OopMapCacheEntry#setMask(CellTypeStateList, CellTypeStateList, int)->void::: oop map cache entry set mask
sun.jvm.hotspot.interpreter.OopMapCacheEntry#method()->Method::: oop map cache entry method
sun.jvm.hotspot.interpreter.OopMapCacheEntry#bci()->int::: oop map cache entry bci
sun.jvm.hotspot.interpreter.OopMapCacheEntry#numberOfEntries()->int::: oop map cache entry number of entries
sun.jvm.hotspot.interpreter.OopMapCacheEntry#entryAt(int)->boolean::: oop map cache entry entry at
sun.jvm.hotspot.interpreter.OopMapCacheEntry#setEmptyMask()->void::: oop map cache entry set empty mask
sun.jvm.hotspot.interpreter.OopMapCacheEntry#allocateBitMask()->void::: oop map cache entry allocate bit mask
sun.jvm.hotspot.interpreter.OopMapCacheEntry#fillForNative()->void::: oop map cache entry fill for native
sun.jvm.hotspot.interpreter.OopMapCacheEntry.VerifyClosure#offsetDo(int)->void::: verify closure offset do
sun.jvm.hotspot.interpreter.OopMapCacheEntry.VerifyClosure#failed()->boolean::: verify closure failed
sun.jvm.hotspot.interpreter.OopMapCacheEntry#verifyMask(CellTypeStateList, CellTypeStateList, int, int)->boolean::: oop map cache entry verify mask
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#reportResults()->boolean::: oop map for cache entry report results
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#possibleGCPoint(BytecodeStream)->boolean::: oop map for cache entry possible point
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#fillStackmapProlog(int)->void::: oop map for cache entry fill stackmap prolog
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#fillStackmapEpilog()->void::: oop map for cache entry fill stackmap epilog
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#fillStackmapForOpcodes(BytecodeStream, CellTypeStateList, CellTypeStateList, int)->void::: oop map for cache entry fill stackmap for opcodes
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#fillInitVars(List)->void::: oop map for cache entry fill init vars
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#computeMap()->void::: oop map for cache entry compute map
sun.jvm.hotspot.interpreter.OopMapForCacheEntry#size()->int::: oop map for cache entry size

Bytecode#alignedOffset(int)::: bytecode aligned offset:::return->Bits->roundTo
Bytecode#getIndexU1()::: bytecode get index u1:::return->method->bci->getBytecodeOrBPAt
Bytecode#getIndexU2(int, boolean)::: bytecode get index u2:::if->can_use_native_byte_order->return->method->bci->getNativeShortArg->return->method->bci->getBytecodeShortArg
Bytecode#getIndexU4()::: bytecode get index u4:::return->method->bci->getNativeIntArg
Bytecode#hasIndexU4()::: bytecode has index u4:::return->code
Bytecode#getIndexU1Cpcache()::: bytecode get index u1 cpcache:::return->method->bci->getBytecodeOrBPAt
Bytecode#getIndexU2Cpcache()::: bytecode get index u2 cpcache:::return->method->bci->getNativeShortArg
Bytecode#can_use_native_byte_order(int, boolean)::: bytecode can_use_native_byte_order:::return->VM->getVM->isBigEndian->Bytecodes->native_byte_order
Bytecode#javaSignedWordAt(int)::: bytecode java signed word at:::return->method->getBytecodeIntArg
Bytecode#javaShortAt(int)::: bytecode java short at:::return->method->getBytecodeShortArg
Bytecode#javaByteAt(int)::: bytecode java byte at:::return->method->getBytecodeByteArg
Bytecode#method()::: bytecode method:::return
Bytecode#bci()::: bytecode bci:::return
Bytecode#code()::: bytecode code:::return->Bytecodes->method->bci->codeAt
Bytecode#javaCode()::: bytecode java code:::return->Bytecodes->code->javaCode
Bytecode#getBytecodeName()::: bytecode get bytecode name:::return->Bytecodes->code->name
Bytecode#getJavaBytecodeName()::: bytecode get java bytecode name:::return->Bytecodes->javaCode->name
Bytecode#getLength()::: bytecode get length:::return->Bytecodes->method->bci->lengthAt
Bytecode#getJavaLength()::: bytecode get java length:::return->Bytecodes->method->bci->javaLengthAt
Bytecode#toString()::: bytecode to string:::buf->getJavaBytecodeName->new->StringBuffer->if->code->javaCode->buf->append->buf->append->buf->getBytecodeName->append->buf->append->return->buf->toString
BytecodeANewArray#getKlass()::: bytecode new array get klass:::return->super->getKlass
BytecodeANewArray#verify()::: bytecode new array verify:::if->Assert->isValid->that
BytecodeANewArray#isValid()::: bytecode new array is valid:::return->javaCode
BytecodeANewArray#at(Method, int)::: bytecode new array at:::b->new->BytecodeANewArray->if->b->verify->return
BytecodeANewArray#atCheck(Method, int):::Like at, but returns null if the BCI is not at anewarray:::b->new->BytecodeANewArray->return->b->isValid
BytecodeANewArray#at(BytecodeStream)::: bytecode new array at:::return->bcs->method->bcs->bci->new->BytecodeANewArray
BytecodeBipush#getValue()::: bytecode bipush get value:::return->javaByteAt
BytecodeBipush#verify()::: bytecode bipush verify:::if->Assert->isValid->that
BytecodeBipush#isValid()::: bytecode bipush is valid:::return->javaCode
BytecodeBipush#at(Method, int)::: bytecode bipush at:::b->new->BytecodeBipush->if->b->verify->return
BytecodeBipush#atCheck(Method, int):::Like at, but returns null if the BCI is not at bipush:::b->new->BytecodeBipush->return->b->isValid
BytecodeBipush#at(BytecodeStream)::: bytecode bipush at:::return->bcs->method->bcs->bci->new->BytecodeBipush
BytecodeBipush#toString()::: bytecode bipush to string:::buf->new->StringBuffer->buf->append->buf->append->buf->Byte->getValue->toString->append->return->buf->toString
BytecodeCheckCast#getCheckCastKlass()::: bytecode check cast get check cast klass:::return->getKlass
BytecodeCheckCast#verify()::: bytecode check cast verify:::if->Assert->isValid->that
BytecodeCheckCast#isValid()::: bytecode check cast is valid:::return->javaCode
BytecodeCheckCast#at(Method, int)::: bytecode check cast at:::b->new->BytecodeCheckCast->if->b->verify->return
BytecodeCheckCast#atCheck(Method, int):::Like at, but returns null if the BCI is not at checkcast:::b->new->BytecodeCheckCast->return->b->isValid
BytecodeCheckCast#at(BytecodeStream)::: bytecode check cast at:::return->bcs->method->bcs->bci->new->BytecodeCheckCast
BytecodeDisassembler#addBytecodeClass(int, Class)::: bytecode disassembler add bytecode class:::bytecode2Class->new->Integer->put
BytecodeDisassembler#getBytecodeClass(int)::: bytecode disassembler get bytecode class:::return->bytecode2Class->new->Integer->get
BytecodeDisassembler#getMethod()::: bytecode disassembler get method:::return
BytecodeDisassembler#decode(BytecodeVisitor)::: bytecode disassembler decode:::visitor->prologue->stream->new->BytecodeStream->javacode->while->stream->next->bci->stream->bci->hotspotcode->method->getBytecodeOrBPAt->clazz->getBytecodeClass->if->getBytecodeClass->if->cstr->try->clazz->new->ClassArr->getDeclaredConstructor->catch->if->Assert->that->finally->bytecodeObj->try->cstr->new->ObjectArr->new->Integer->newInstance->catch->if->Assert->clazz->getName->that->finally->if->stream->isWide->visitor->new->Bytecode->visit->try->visitor->visit->catch->castfail->printStackTrace->method->getAddress->println->finally->visitor->epilogue
BytecodeGetField#isStatic()::: bytecode get field is static:::return
BytecodeGetField#verify()::: bytecode get field verify:::if->Assert->isValid->that
BytecodeGetField#isValid()::: bytecode get field is valid:::return->javaCode
BytecodeGetField#at(Method, int)::: bytecode get field at:::b->new->BytecodeGetField->if->b->verify->return
BytecodeGetField#atCheck(Method, int):::Like at, but returns null if the BCI is not at getfield:::b->new->BytecodeGetField->return->b->isValid
BytecodeGetField#at(BytecodeStream)::: bytecode get field at:::return->bcs->method->bcs->bci->new->BytecodeGetField
BytecodeGetPut#name()::: bytecode get put name:::cp->method->getConstants->return->cp->index->getNameRefAt
BytecodeGetPut#signature()::: bytecode get put signature:::cp->method->getConstants->return->cp->index->getSignatureRefAt
BytecodeGetPut#getField()::: bytecode get put get field:::return->method->getConstants->index->getFieldRefAt
BytecodeGetPut#toString()::: bytecode get put to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->append->buf->Integer->indexForFieldOrMethod->toString->append->buf->append->sigBuf->new->StringBuffer->signature->new->SignatureConverter->dispatchField->buf->sigBuf->toString->replace->append->buf->append->buf->name->asString->append->buf->append->if->code->javaCode->buf->append->buf->append->buf->getBytecodeName->append->buf->append->return->buf->toString
BytecodeGetPut#isStatic()::: bytecode get put is static:::
BytecodeGetStatic#isStatic()::: bytecode get static is static:::return
BytecodeGetStatic#verify()::: bytecode get static verify:::if->Assert->isValid->that
BytecodeGetStatic#isValid()::: bytecode get static is valid:::return->javaCode
BytecodeGetStatic#atic at(Method, int)::: bytecode get static at:::b->new->BytecodeGetStatic->if->b->verify->return
BytecodeGetStatic#atCheck(Method, int):::Like at, but returns null if the BCI is not at getstatic:::b->new->BytecodeGetStatic->return->b->isValid
BytecodeGetStatic#atic at(BytecodeStream)::: bytecode get static at:::return->bcs->method->bcs->bci->new->BytecodeGetStatic
BytecodeGoto#getTargetBCI()::: bytecode goto get target i:::return->bci->javaShortAt
BytecodeGoto#verify()::: bytecode goto verify:::if->Assert->isValid->that
BytecodeGoto#isValid()::: bytecode goto is valid:::return->javaCode
BytecodeGoto#at(Method, int)::: bytecode goto at:::b->new->BytecodeGoto->if->b->verify->return
BytecodeGoto#atCheck(Method, int):::Like at, but returns null if the BCI is not at goto:::b->new->BytecodeGoto->return->b->isValid
BytecodeGoto#at(BytecodeStream)::: bytecode goto at:::return->bcs->method->bcs->bci->new->BytecodeGoto
BytecodeGotoW#getTargetBCI()::: bytecode goto w get target i:::return->bci->javaSignedWordAt
BytecodeGotoW#verify()::: bytecode goto w verify:::if->Assert->isValid->that
BytecodeGotoW#isValid()::: bytecode goto w is valid:::return->javaCode
BytecodeGotoW#at(Method, int)::: bytecode goto w at:::b->new->BytecodeGotoW->if->b->verify->return
BytecodeGotoW#atCheck(Method, int):::Like at, but returns null if the BCI is not at goto_w:::b->new->BytecodeGotoW->return->b->isValid
BytecodeGotoW#at(BytecodeStream)::: bytecode goto w at:::return->bcs->method->bcs->bci->new->BytecodeGotoW
BytecodeIf#getTargetBCI()::: bytecode if get target i:::return->bci->javaShortAt
BytecodeIf#verify()::: bytecode if verify:::if->Assert->isValid->that
BytecodeIf#isValid()::: bytecode if is valid:::jcode->javaCode->return
BytecodeIf#at(Method, int)::: bytecode if at:::b->new->BytecodeIf->if->b->verify->return
BytecodeIf#atCheck(Method, int):::Like at, but returns null if the BCI is not at some ifxxx bytecode:::b->new->BytecodeIf->return->b->isValid
BytecodeIf#at(BytecodeStream)::: bytecode if at:::return->bcs->method->bcs->bci->new->BytecodeIf
BytecodeIinc#getIncrement()::: bytecode iinc get increment:::return->isWide->javaShortAt->javaByteAt
BytecodeIinc#verify()::: bytecode iinc verify:::if->Assert->isValid->that
BytecodeIinc#isValid()::: bytecode iinc is valid:::return->javaCode
BytecodeIinc#at(Method, int)::: bytecode iinc at:::b->new->BytecodeIinc->if->b->verify->return
BytecodeIinc#atCheck(Method, int):::Like at, but returns null if the BCI is not at iinc:::b->new->BytecodeIinc->return->b->isValid
BytecodeIinc#at(BytecodeStream)::: bytecode iinc at:::return->bcs->method->bcs->bci->new->BytecodeIinc
BytecodeIinc#toString()::: bytecode iinc to string:::buf->new->StringBuffer->buf->append->buf->append->buf->append->buf->Integer->getLocalVarIndex->toString->append->buf->append->buf->Integer->getIncrement->toString->append->return->buf->toString
BytecodeInstanceOf#getInstanceOfKlass()::: bytecode instance of get instance of klass:::return->getKlass
BytecodeInstanceOf#verify()::: bytecode instance of verify:::if->Assert->isValid->that
BytecodeInstanceOf#isValid()::: bytecode instance of is valid:::return->javaCode
BytecodeInstanceOf#at(Method, int)::: bytecode instance of at:::b->new->BytecodeInstanceOf->if->b->verify->return
BytecodeInstanceOf#atCheck(Method, int):::Like at, but returns null if the BCI is not at instanceof:::b->new->BytecodeInstanceOf->return->b->isValid
BytecodeInstanceOf#at(BytecodeStream)::: bytecode instance of at:::return->bcs->method->bcs->bci->new->BytecodeInstanceOf
BytecodeInvoke#at(Method, int)::: bytecode invoke at:::b->new->BytecodeInvoke->if->b->verify->return
BytecodeInvoke#atCheck(Method, int):::Like at, but returns null if the BCI is not at an invoke:::b->new->BytecodeInvoke->return->b->isValid
BytecodeInvoke#at(BytecodeStream)::: bytecode invoke at:::return->bcs->method->bcs->bci->new->BytecodeInvoke
BytecodeInvoke#name()::: bytecode invoke name:::cp->method->getConstants->if->isInvokedynamic->return->cp->indexForFieldOrMethod->uncachedGetNameRefAt->return->cp->index->getNameRefAt
BytecodeInvoke#signature()::: bytecode invoke signature:::cp->method->getConstants->if->isInvokedynamic->return->cp->indexForFieldOrMethod->uncachedGetSignatureRefAt->return->cp->index->getSignatureRefAt
BytecodeInvoke#getInvokedMethod()::: bytecode invoke get invoked method:::return->method->getConstants->index->getMethodRefAt
BytecodeInvoke#resultType()::: bytecode invoke result type:::rts->signature->new->ResultTypeFinder->rts->iterate->return->rts->type
BytecodeInvoke#adjustedInvokeCode()::: bytecode invoke adjusted invoke code:::return->javaCode
BytecodeInvoke#isInvokeinterface()::: bytecode invoke is invokeinterface:::return->adjustedInvokeCode
BytecodeInvoke#isInvokevirtual()::: bytecode invoke is invokevirtual:::return->adjustedInvokeCode
BytecodeInvoke#isInvokestatic()::: bytecode invoke is invokestatic:::return->adjustedInvokeCode
BytecodeInvoke#isInvokespecial()::: bytecode invoke is invokespecial:::return->adjustedInvokeCode
BytecodeInvoke#isInvokedynamic()::: bytecode invoke is invokedynamic:::return->adjustedInvokeCode
BytecodeInvoke#isValid()::: bytecode invoke is valid:::return->isInvokeinterface->isInvokevirtual->isInvokestatic->isInvokespecial
BytecodeInvoke#verify()::: bytecode invoke verify:::if->Assert->isValid->that
BytecodeInvoke#toString()::: bytecode invoke to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->append->buf->Integer->indexForFieldOrMethod->toString->append->if->isInvokedynamic->cp->method->getConstants->buf->append->poolIndex->cp->indexForFieldOrMethod->invokeDynamicNameAndTypeRefIndexAt->buf->Integer->toString->append->buf->append->buf->append->buf->name->asString->append->buf->append->buf->signature->asString->replace->append->else->buf->append->sigBuf->new->StringBuffer->signature->new->SignatureConverter->iterateReturntype->buf->sigBuf->toString->replace->append->buf->append->buf->name->asString->append->buf->append->new->StringBuffer->signature->new->SignatureConverter->iterateParameters->buf->sigBuf->toString->replace->append->buf->append->buf->append->if->code->javaCode->buf->append->buf->append->buf->getBytecodeName->append->buf->append->return->buf->toString
BytecodeJmp#getTargetBCI()::: bytecode jmp get target i:::
BytecodeJmp#toString()::: bytecode jmp to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->Integer->getTargetBCI->toString->append->return->buf->toString
BytecodeJsr#getTargetBCI()::: bytecode jsr get target i:::return->bci->javaShortAt
BytecodeJsr#verify()::: bytecode jsr verify:::if->Assert->isValid->that
BytecodeJsr#isValid()::: bytecode jsr is valid:::return->javaCode
BytecodeJsr#at(Method, int)::: bytecode jsr at:::b->new->BytecodeJsr->if->b->verify->return
BytecodeJsr#atCheck(Method, int):::Like at, but returns null if the BCI is not at jsr:::b->new->BytecodeJsr->return->b->isValid
BytecodeJsr#at(BytecodeStream)::: bytecode jsr at:::return->bcs->method->bcs->bci->new->BytecodeJsr
BytecodeJsrW#getTargetBCI()::: bytecode jsr w get target i:::return->bci->javaSignedWordAt
BytecodeJsrW#verify()::: bytecode jsr w verify:::if->Assert->isValid->that
BytecodeJsrW#isValid()::: bytecode jsr w is valid:::return->javaCode
BytecodeJsrW#at(Method, int)::: bytecode jsr w at:::b->new->BytecodeJsrW->if->b->verify->return
BytecodeJsrW#atCheck(Method, int):::Like at, but returns null if the BCI is not at jsr_w:::b->new->BytecodeJsrW->return->b->isValid
BytecodeJsrW#at(BytecodeStream)::: bytecode jsr w at:::return->bcs->method->bcs->bci->new->BytecodeJsrW
BytecodeLoad#verify()::: bytecode load verify:::if->Assert->isValid->that
BytecodeLoad#isValid()::: bytecode load is valid:::jcode->javaCode->switch->return->return
BytecodeLoad#at(Method, int)::: bytecode load at:::b->new->BytecodeLoad->if->b->verify->return
BytecodeLoad#atCheck(Method, int):::Like at, but returns null if the BCI is not at load:::b->new->BytecodeLoad->return->b->isValid
BytecodeLoad#at(BytecodeStream)::: bytecode load at:::return->bcs->method->bcs->bci->new->BytecodeLoad
BytecodeLoadConstant#hasCacheIndex()::: bytecode load constant has cache index:::return->code
BytecodeLoadConstant#rawIndex()::: bytecode load constant raw index:::if->javaCode->return->getIndexU1->else->return->code->getIndexU2
BytecodeLoadConstant#poolIndex()::: bytecode load constant pool index:::index->rawIndex->if->hasCacheIndex->return->method->getConstants->objectToCPIndex->else->return
BytecodeLoadConstant#cacheIndex()::: bytecode load constant cache index:::if->hasCacheIndex->return->rawIndex->else->return
BytecodeLoadConstant#resultType()::: bytecode load constant result type:::index->poolIndex->tag->method->getConstants->getTagAt->return->tag->basicType
BytecodeLoadConstant#getCachedConstant()::: bytecode load constant get cached constant:::i->cacheIndex->if->throw->new->InternalError->return
BytecodeLoadConstant#verify()::: bytecode load constant verify:::if->Assert->isValid->that
BytecodeLoadConstant#isValid()::: bytecode load constant is valid:::jcode->javaCode->codeOk->if->return->ctag->method->getConstants->poolIndex->getTagAt->if->return->ctag->isDouble->ctag->isLong->else->return->ctag->isString->ctag->isUnresolvedKlass->ctag->isKlass->ctag->isMethodHandle->ctag->isMethodType->ctag->isInt->ctag->isFloat
BytecodeLoadConstant#isKlassConstant()::: bytecode load constant is klass constant:::jcode->javaCode->if->return->ctag->method->getConstants->poolIndex->getTagAt->return->ctag->isKlass->ctag->isUnresolvedKlass
BytecodeLoadConstant#getKlass()::: bytecode load constant get klass:::if->Assert->isKlassConstant->that->cpool->method->getConstants->cpIndex->poolIndex->return->cpool->getKlassNameAt
BytecodeLoadConstant#at(Method, int)::: bytecode load constant at:::b->new->BytecodeLoadConstant->if->b->verify->return
BytecodeLoadConstant#atCheck(Method, int):::Like at, but returns null if the BCI is not at ldc or ldc_w or ldc2_w:::b->new->BytecodeLoadConstant->return->b->isValid
BytecodeLoadConstant#at(BytecodeStream)::: bytecode load constant at:::return->bcs->method->bcs->bci->new->BytecodeLoadConstant
BytecodeLoadConstant#getConstantValue()::: bytecode load constant get constant value:::cpool->method->getConstants->cpIndex->poolIndex->ctag->cpool->getTagAt->if->ctag->isInt->return->Integer->cpool->getIntAt->toString->else->if->ctag->isLong->return->Long->cpool->getLongAt->toString->else->if->ctag->isFloat->return->Float->cpool->getFloatAt->toString->else->if->ctag->isDouble->return->Double->cpool->getDoubleAt->toString->else->if->ctag->isString->sym->cpool->getUnresolvedStringAt->return->sym->asString->else->if->ctag->isKlass->ctag->isUnresolvedKlass->tag->cpool->getTagAt->if->tag->isKlass->k->cpool->getKlassAt->return->k->getName->asString->k->getAddress->else->if->tag->isUnresolvedKlass->sym->cpool->getKlassNameAt->return->sym->asString->else->throw->new->RuntimeException->else->if->ctag->isMethodHandle->x->getCachedConstant->refidx->cpool->getMethodHandleIndexAt->refkind->cpool->getMethodHandleRefKindAt->return->Integer->toString->Integer->toString->x->getHandle->else->if->ctag->isMethodType->x->getCachedConstant->refidx->cpool->getMethodTypeIndexAt->return->cpool->getSymbolAt->asString->x->getHandle->else->if->Assert->that->return
BytecodeLoadConstant#toString()::: bytecode load constant to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->append->buf->Integer->poolIndex->toString->append->if->hasCacheIndex->buf->append->buf->Integer->cacheIndex->toString->append->buf->append->buf->append->buf->getConstantValue->append->if->code->javaCode->buf->append->buf->append->buf->getBytecodeName->append->buf->append->return->buf->toString
BytecodeLoadStore#toString()::: bytecode load store to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->append->buf->Integer->getLocalVarIndex->toString->append->return->buf->toString
BytecodeLookupswitch#defaultOffset()::: bytecode lookupswitch default offset:::return->alignedOffset->javaSignedWordAt
BytecodeLookupswitch#numberOfPairs()::: bytecode lookupswitch number of pairs:::return->alignedOffset->javaSignedWordAt
BytecodeLookupswitch#pairAt(int)::: bytecode lookupswitch pair at:::if->Assert->numberOfPairs->that->return->alignedOffset->new->LookupswitchPair
BytecodeLookupswitch#verify()::: bytecode lookupswitch verify:::if->Assert->isValid->that
BytecodeLookupswitch#isValid()::: bytecode lookupswitch is valid:::result->javaCode->if->return->i->numberOfPairs->while->if->pairAt->match->pairAt->match->return->return
BytecodeLookupswitch#at(Method, int)::: bytecode lookupswitch at:::b->new->BytecodeLookupswitch->if->b->verify->return
BytecodeLookupswitch#atCheck(Method, int):::Like at, but returns null if the BCI is not at lookupswitch:::b->new->BytecodeLookupswitch->return->b->isValid
BytecodeLookupswitch#at(BytecodeStream)::: bytecode lookupswitch at:::return->bcs->method->bcs->bci->new->BytecodeLookupswitch
BytecodeLookupswitch#toString()::: bytecode lookupswitch to string:::buf->new->StringBuffer->buf->append->buf->append->buf->append->buf->Integer->bci->defaultOffset->toString->append->buf->append->i->numberOfPairs->while->pair->pairAt->buf->append->buf->Integer->pair->match->toString->append->buf->append->buf->Integer->bci->pair->offset->toString->append->buf->append->return->buf->toString
BytecodeMultiANewArray#getKlass()::: bytecode multi new array get klass:::return->super->getKlass
BytecodeMultiANewArray#getDimension()::: bytecode multi new array get dimension:::return->javaByteAt
BytecodeMultiANewArray#verify()::: bytecode multi new array verify:::if->Assert->isValid->that
BytecodeMultiANewArray#isValid()::: bytecode multi new array is valid:::return->javaCode
BytecodeMultiANewArray#at(Method, int)::: bytecode multi new array at:::b->new->BytecodeMultiANewArray->if->b->verify->return
BytecodeMultiANewArray#atCheck(Method, int):::Like at, but returns null if the BCI is not at multianewarray:::b->new->BytecodeMultiANewArray->return->b->isValid
BytecodeMultiANewArray#at(BytecodeStream)::: bytecode multi new array at:::return->bcs->method->bcs->bci->new->BytecodeMultiANewArray
BytecodeMultiANewArray#toString()::: bytecode multi new array to string:::buf->new->StringBuffer->buf->super->toString->append->buf->append->buf->Integer->getDimension->toString->append->return->buf->toString
BytecodeNew#getNewKlass()::: bytecode new get new klass:::return->getKlass
BytecodeNew#verify()::: bytecode new verify:::if->Assert->isValid->that
BytecodeNew#isValid()::: bytecode new is valid:::return->javaCode
BytecodeNew#at(Method, int)::: bytecode new at:::b->new->BytecodeNew->if->b->verify->return
BytecodeNew#atCheck(Method, int):::Like at, but returns null if the BCI is not at new:::b->new->BytecodeNew->return->b->isValid
BytecodeNew#at(BytecodeStream)::: bytecode new at:::return->bcs->method->bcs->bci->new->BytecodeNew
BytecodeNewArray#getType()::: bytecode new array get type:::return->javaByteAt
BytecodeNewArray#verify()::: bytecode new array verify:::if->Assert->isValid->that
BytecodeNewArray#isValid()::: bytecode new array is valid:::result->javaCode->if->return->switch->getType->break->return->return
BytecodeNewArray#getTypeName()::: bytecode new array get type name:::result->switch->getType->break->break->break->break->break->break->break->break->break->return
BytecodeNewArray#at(Method, int)::: bytecode new array at:::b->new->BytecodeNewArray->if->b->verify->return
BytecodeNewArray#atCheck(Method, int):::Like at, but returns null if the BCI is not at newarray:::b->new->BytecodeNewArray->return->b->isValid
BytecodeNewArray#at(BytecodeStream)::: bytecode new array at:::return->bcs->method->bcs->bci->new->BytecodeNewArray
BytecodeNewArray#toString()::: bytecode new array to string:::buf->new->StringBuffer->buf->append->buf->append->buf->getTypeName->append->return->buf->toString
BytecodePutField#isStatic()::: bytecode put field is static:::return
BytecodePutField#verify()::: bytecode put field verify:::if->Assert->isValid->that
BytecodePutField#isValid()::: bytecode put field is valid:::return->javaCode
BytecodePutField#at(Method, int)::: bytecode put field at:::b->new->BytecodePutField->if->b->verify->return
BytecodePutField#atCheck(Method, int):::Like at, but returns null if the BCI is not at putfield:::b->new->BytecodePutField->return->b->isValid
BytecodePutField#at(BytecodeStream)::: bytecode put field at:::return->bcs->method->bcs->bci->new->BytecodePutField
BytecodePutStatic#isStatic()::: bytecode put static is static:::return
BytecodePutStatic#verify()::: bytecode put static verify:::if->Assert->isValid->that
BytecodePutStatic#isValid()::: bytecode put static is valid:::return->javaCode
BytecodePutStatic#atic at(Method, int)::: bytecode put static at:::b->new->BytecodePutStatic->if->b->verify->return
BytecodePutStatic#atCheck(Method, int):::Like at, but returns null if the BCI is not at putstatic:::b->new->BytecodePutStatic->return->b->isValid
BytecodePutStatic#atic at(BytecodeStream)::: bytecode put static at:::return->bcs->method->bcs->bci->new->BytecodePutStatic
BytecodeRet#verify()::: bytecode ret verify:::if->Assert->isValid->that
BytecodeRet#isValid()::: bytecode ret is valid:::return->javaCode
BytecodeRet#at(Method, int)::: bytecode ret at:::b->new->BytecodeRet->if->b->verify->return
BytecodeRet#atCheck(Method, int):::Like at, but returns null if the BCI is not at ret:::b->new->BytecodeRet->return->b->isValid
BytecodeRet#at(BytecodeStream)::: bytecode ret at:::return->bcs->method->bcs->bci->new->BytecodeRet
BytecodeRet#toString()::: bytecode ret to string:::buf->new->StringBuffer->buf->append->buf->append->buf->append->buf->Integer->getLocalVarIndex->toString->append->return->buf->toString
Bytecodes#specialLengthAt(Method, int)::: bytecodes special length at:::code->codeAt->switch->return->method->getBytecodeOrBPAt->wideLengthFor->alignedBCI->Bits->roundTo->lo->method->getBytecodeIntArg->hi->method->getBytecodeIntArg->return->alignedBCI->Bits->roundTo->npairs->method->getBytecodeIntArg->return->throw->new->RuntimeException
Bytecodes#check(int)::: bytecodes check:::if->Assert->isDefined->that
Bytecodes#wideCheck(int)::: bytecodes wide check:::if->Assert->wideIsDefined->that
Bytecodes#codeAt(Method, int):::Fetches a bytecode, hiding breakpoints as necessary:::res->codeOrBPAt->if->method->getOrigBytecodeAt->return
Bytecodes#codeOrBPAt(Method, int):::Fetches a bytecode or a breakpoint:::return->method->getBytecodeOrBPAt
Bytecodes#isActiveBreakpointAt(Method, int)::: bytecodes is active breakpoint at:::return->codeOrBPAt
Bytecodes#isDefined(int)::: bytecodes is defined:::return->flags
Bytecodes#wideIsDefined(int)::: bytecodes wide is defined:::return->isDefined->flags
Bytecodes#name(int)::: bytecodes name:::check->return
Bytecodes#format(int)::: bytecodes format:::check->return
Bytecodes#wideFormat(int)::: bytecodes wide format:::wideCheck->return
Bytecodes#resultType(int)::: bytecodes result type:::check->return
Bytecodes#depth(int)::: bytecodes depth:::check->return
Bytecodes#lengthFor(int)::: bytecodes length for:::check->return
Bytecodes#wideLengthFor(int)::: bytecodes wide length for:::check->return
Bytecodes#canTrap(int)::: bytecodes can trap:::check->return->has_all_flags
Bytecodes#javaCode(int)::: bytecodes java code:::check->return
Bytecodes#canRewrite(int)::: bytecodes can rewrite:::check->return->has_all_flags
Bytecodes#native_byte_order(int)::: bytecodes native_byte_order:::check->return->has_all_flags
Bytecodes#uses_cp_cache(int)::: bytecodes uses_cp_cache:::check->return->has_all_flags
Bytecodes#lengthAt(Method, int)::: bytecodes length at:::l->codeAt->lengthFor->return->specialLengthAt
Bytecodes#javaLengthAt(Method, int)::: bytecodes java length at:::l->codeAt->javaCode->lengthFor->return->specialLengthAt
Bytecodes#isJavaCode(int)::: bytecodes is java code:::return
Bytecodes#isFastCode(int)::: bytecodes is fast code:::return
Bytecodes#isAload(int)::: bytecodes is aload:::return
Bytecodes#isAstore(int)::: bytecodes is astore:::return
Bytecodes#isZeroConst(int)::: bytecodes is zero const:::return
Bytecodes#flags(int, boolean)::: bytecodes flags:::return
Bytecodes#format_bits(int, boolean)::: bytecodes format_bits:::return->flags
Bytecodes#has_all_flags(int, int, boolean)::: bytecodes has_all_flags:::return->flags
Bytecodes#compute_flags(String)::: bytecodes compute_flags:::return->compute_flags
Bytecodes#compute_flags(String, int)::: bytecodes compute_flags:::if->return->flags->fp->if->format->length->else->switch->format->charAt->break->break->has_nbo->has_jbo->has_size->while->format->length->this_flag->fc->format->charAt->switch->continue->break->break->break->break->break->break->break->break->break->break->if->this_size->if->format->length->format->charAt->while->format->length->format->charAt->switch->break->break->return
Bytecodes#initialize()::: bytecodes initialize:::if->Assert->that->BasicType->getTVoid->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTFloat->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTLong->def->BasicType->getTLong->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTFloat->def->BasicType->getTFloat->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTDouble->def->BasicType->getTDouble->def->BasicType->getTDouble->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTVoid->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTDouble->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTByte->def->BasicType->getTChar->def->BasicType->getTShort->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTInt->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTFloat->def->BasicType->getTDouble->def->BasicType->getTObject->def->BasicType->getTVoid->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTObject->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTInt->def->BasicType->getTVoid->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTChar->def->BasicType->getTDouble->def->BasicType->getTFloat->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTShort->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTChar->def->BasicType->getTDouble->def->BasicType->getTFloat->def->BasicType->getTInt->def->BasicType->getTLong->def->BasicType->getTShort->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTInt->def->BasicType->getTIllegal->def->BasicType->getTVoid->def->BasicType->getTVoid->def->BasicType->getTObject->def->BasicType->getTObject->def->BasicType->getTVoid->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTIllegal->def->BasicType->getTVoid->def->if->for->i
Bytecodes#def(int, String, String, String, int, int, boolean)::: bytecodes def:::def
Bytecodes#def(int, String, String, String, int, int, boolean, int)::: bytecodes def:::if->Assert->that->len->format->length->wlen->wide_format->length->bc_flags->if->if->compute_flags->compute_flags
BytecodeSipush#getValue()::: bytecode sipush get value:::return->javaShortAt
BytecodeSipush#verify()::: bytecode sipush verify:::if->Assert->isValid->that
BytecodeSipush#isValid()::: bytecode sipush is valid:::return->javaCode
BytecodeSipush#at(Method, int)::: bytecode sipush at:::b->new->BytecodeSipush->if->b->verify->return
BytecodeSipush#atCheck(Method, int):::Like at, but returns null if the BCI is not at sipush:::b->new->BytecodeSipush->return->b->isValid
BytecodeSipush#at(BytecodeStream)::: bytecode sipush at:::return->bcs->method->bcs->bci->new->BytecodeSipush
BytecodeSipush#toString()::: bytecode sipush to string:::buf->new->StringBuffer->buf->append->buf->append->buf->Short->getValue->toString->append->return->buf->toString
BytecodeStore#verify()::: bytecode store verify:::if->Assert->isValid->that
BytecodeStore#isValid()::: bytecode store is valid:::jcode->javaCode->switch->return->return
BytecodeStore#at(Method, int)::: bytecode store at:::b->new->BytecodeStore->if->b->verify->return
BytecodeStore#atCheck(Method, int):::Like at, but returns null if the BCI is not at store:::b->new->BytecodeStore->return->b->isValid
BytecodeStore#at(BytecodeStream)::: bytecode store at:::return->bcs->method->bcs->bci->new->BytecodeStore
BytecodeStream#setInterval(int, int)::: bytecode stream set interval:::if->Assert->_method->getCodeSize->that->Assert->_method->getCodeSize->that
BytecodeStream#setStart(int)::: bytecode stream set start:::_method->getCodeSize->setInterval
BytecodeStream#next()::: bytecode stream next:::code->if->isLastBytecode->else->rawCode->Bytecodes->codeAt->try->Bytecodes->javaCode->catch->e->printStackTrace->Assert->_method->externalNameAndSignature->that->finally->l->Bytecodes->lengthFor->if->Bytecodes->lengthAt->if->Assert->that->if->_method->getBytecodeOrBPAt->if->Assert->Bytecodes->isJavaCode->that->return
BytecodeStream#method()::: bytecode stream method:::return
BytecodeStream#bci()::: bytecode stream bci:::return
BytecodeStream#nextBCI()::: bytecode stream next i:::return
BytecodeStream#endBCI()::: bytecode stream end i:::return
BytecodeStream#code()::: bytecode stream code:::return
BytecodeStream#isWide()::: bytecode stream is wide:::return
BytecodeStream#isActiveBreakpoint()::: bytecode stream is active breakpoint:::return->Bytecodes->isActiveBreakpointAt
BytecodeStream#isLastBytecode()::: bytecode stream is last bytecode:::return
BytecodeStream#setNextBCI(int)::: bytecode stream set next i:::if->Assert->_method->getCodeSize->that
BytecodeStream#dest()::: bytecode stream dest:::return->bci->_method->bci->getBytecodeShortArg
BytecodeStream#dest_w()::: bytecode stream dest_w:::return->bci->_method->bci->getBytecodeIntArg
BytecodeStream#getIndex()::: bytecode stream get index:::return->isWide->_method->bci->getBytecodeShortArg->_method->bci->getBytecodeOrBPAt
BytecodeStream#getIndexU1()::: bytecode stream get index u1:::return->_method->bci->getBytecodeOrBPAt
BytecodeStream#getIndexU2()::: bytecode stream get index u2:::return->_method->bci->getBytecodeShortArg
BytecodeStream#getIndexU4()::: bytecode stream get index u4:::return->_method->bci->getNativeIntArg
BytecodeStream#hasIndexU4()::: bytecode stream has index u4:::return->code
BytecodeStream#getIndexU1Cpcache()::: bytecode stream get index u1 cpcache:::return->_method->bci->getBytecodeOrBPAt
BytecodeStream#getIndexU2Cpcache()::: bytecode stream get index u2 cpcache:::return->_method->bci->getNativeShortArg
BytecodeStream#codeAt(int)::: bytecode stream code at:::return->_method->getBytecodeOrBPAt
BytecodeTableswitch#defaultOffset()::: bytecode tableswitch default offset:::return->alignedOffset->javaSignedWordAt
BytecodeTableswitch#lowKey()::: bytecode tableswitch low key:::return->alignedOffset->javaSignedWordAt
BytecodeTableswitch#highKey()::: bytecode tableswitch high key:::return->alignedOffset->javaSignedWordAt
BytecodeTableswitch#length()::: bytecode tableswitch length:::return->highKey->lowKey
BytecodeTableswitch#destOffsetAt(int)::: bytecode tableswitch dest offset at:::x2->alignedOffset->val->javaSignedWordAt->return->alignedOffset->javaSignedWordAt
BytecodeTableswitch#verify()::: bytecode tableswitch verify:::if->Assert->isValid->that
BytecodeTableswitch#isValid()::: bytecode tableswitch is valid:::result->javaCode->if->return->lo->lowKey->hi->highKey->if->return->i->while->return
BytecodeTableswitch#at(Method, int)::: bytecode tableswitch at:::b->new->BytecodeTableswitch->if->b->verify->return
BytecodeTableswitch#atCheck(Method, int):::Like at, but returns null if the BCI is not at tableswitch:::b->new->BytecodeTableswitch->return->b->isValid
BytecodeTableswitch#at(BytecodeStream)::: bytecode tableswitch at:::return->bcs->method->bcs->bci->new->BytecodeTableswitch
BytecodeTableswitch#toString()::: bytecode tableswitch to string:::buf->new->StringBuffer->buf->append->buf->append->buf->append->buf->Integer->bci->defaultOffset->toString->append->buf->append->lo->lowKey->hi->highKey->i->while->buf->append->buf->Integer->toString->append->buf->append->buf->Integer->bci->destOffsetAt->toString->append->buf->append->return->buf->toString
BytecodeVisitor#prologue(Method)::: bytecode visitor prologue:::
BytecodeVisitor#visit(Bytecode)::: bytecode visitor visit:::
BytecodeVisitor#epilogue()::: bytecode visitor epilogue:::
BytecodeWideable#isWide()::: bytecode wideable is wide:::prevBci->bci->return->method->getBytecodeOrBPAt
BytecodeWideable#getLocalVarIndex()::: bytecode wideable get local var index:::return->isWide->code->getIndexU2->getIndexU1
BytecodeWithCPIndex#index()::: bytecode with index index:::if->code->index->getIndexU4->if->ConstantPool->isInvokedynamicIndex->return->ConstantPool->decodeInvokedynamicIndex->else->return->else->return->code->getIndexU2
BytecodeWithCPIndex#indexForFieldOrMethod()::: bytecode with index index for field or method:::cpCache->method->getConstants->getCache->cpCacheIndex->index->if->return->else->return->cpCache->getEntryAt->getConstantPoolIndex
BytecodeWithKlass#getKlass()::: bytecode with klass get klass:::return->method->getConstants->index->getKlassAt
BytecodeWithKlass#getClassName()::: bytecode with klass get class name:::return->method->getConstants->index->getKlassNameAt
BytecodeWithKlass#toString()::: bytecode with klass to string:::buf->new->StringBuffer->buf->getJavaBytecodeName->append->buf->append->buf->append->buf->Integer->index->toString->append->buf->append->buf->append->buf->getClassName->asString->replace->append->buf->append->if->code->javaCode->buf->append->buf->append->buf->getBytecodeName->append->buf->append->return->buf->toString
Interpreter#initialize(TypeDataBase)::: interpreter initialize:::type->db->lookupType->type->getAddressField
Interpreter#getCode()::: interpreter get code:::code->codeField->getValue->if->return->return->new->StubQueue
Interpreter#contains(Address)::: interpreter contains:::return->getCode->contains
Interpreter#getCodeletContaining(Address):::Debugging/printing:::return->getCode->getStubContaining
InterpreterCodelet#initialize(TypeDataBase)::: interpreter codelet initialize:::type->db->lookupType->type->getCIntegerField->type->getAddressField->type->getCIntegerField->type->getSize
InterpreterCodelet#getSize()::: interpreter codelet get size:::return->sizeField->getValue
InterpreterCodelet#codeBegin()::: interpreter codelet code begin:::return->addr->addOffsetTo
InterpreterCodelet#codeEnd()::: interpreter codelet code end:::return->addr->getSize->addOffsetTo
InterpreterCodelet#codeSize()::: interpreter codelet code size:::return->codeEnd->codeBegin->minus
InterpreterCodelet#getDescription()::: interpreter codelet get description:::return->CStringUtilities->descriptionField->getValue->getString
InterpreterCodelet#verify()::: interpreter codelet verify:::
InterpreterCodelet#printOn(PrintStream)::: interpreter codelet print on:::desc->getDescription->if->tty->print->tty->codeBegin->codeEnd->codeSize->println
LookupswitchPair#match()::: lookupswitch pair match:::return->javaSignedWordAt
LookupswitchPair#offset()::: lookupswitch pair offset:::return->javaSignedWordAt
MaskFillerForNative#passInt()::: mask filler for native pass int:::
MaskFillerForNative#passLong()::: mask filler for native pass long:::
MaskFillerForNative#passFloat()::: mask filler for native pass float:::
MaskFillerForNative#passDouble()::: mask filler for native pass double:::
MaskFillerForNative#passObject()::: mask filler for native pass object:::mask->offset->atPut
MaskFillerForNative#generate()::: mask filler for native generate:::super->iterate
OffsetClosure#offsetDo(int)::: offset closure offset do:::
OopMapCacheEntry#isValue(int)::: oop map cache entry is value:::return->entryAt
OopMapCacheEntry#isOop(int)::: oop map cache entry is oop:::return->entryAt
OopMapCacheEntry#iterateOop(OffsetClosure)::: oop map cache entry iterate oop:::n->numberOfEntries->for->i
OopMapCacheEntry#fill(Method, int)::: oop map cache entry fill:::if->method->isNative->fillForNative->else->gen->new->OopMapForCacheEntry->gen->computeMap
OopMapCacheEntry#setMask(CellTypeStateList, CellTypeStateList, int)::: oop map cache entry set mask:::maxLocals->method->getMaxLocals->nEntries->allocateBitMask->curList->listIdx->for->entryIdx->if->Assert->verifyMask->that
OopMapCacheEntry#method()::: oop map cache entry method:::return
OopMapCacheEntry#bci()::: oop map cache entry bci:::return
OopMapCacheEntry#numberOfEntries()::: oop map cache entry number of entries:::return
OopMapCacheEntry#entryAt(int)::: oop map cache entry entry at:::return->mask->at
OopMapCacheEntry#setEmptyMask()::: oop map cache entry set empty mask:::
OopMapCacheEntry#allocateBitMask()::: oop map cache entry allocate bit mask:::if->new->BitMap
OopMapCacheEntry#fillForNative()::: oop map cache entry fill for native:::if->Assert->method->isNative->that->method->getSizeOfParameters->allocateBitMask->mf->new->MaskFillerForNative->mf->generate
OopMapCacheEntry.VerifyClosure#offsetDo(int)::: verify closure offset do:::if->entry->isOop
OopMapCacheEntry.VerifyClosure#failed()::: verify closure failed:::return
OopMapCacheEntry#verifyMask(CellTypeStateList, CellTypeStateList, int, int)::: oop map cache entry verify mask:::blk->new->VerifyClosure->iterateOop->if->blk->failed->return->for->i->for->j->return
OopMapForCacheEntry#reportResults()::: oop map for cache entry report results:::return
OopMapForCacheEntry#possibleGCPoint(BytecodeStream)::: oop map for cache entry possible point:::return
OopMapForCacheEntry#fillStackmapProlog(int)::: oop map for cache entry fill stackmap prolog:::
OopMapForCacheEntry#fillStackmapEpilog()::: oop map for cache entry fill stackmap epilog:::
OopMapForCacheEntry#fillStackmapForOpcodes(BytecodeStream, CellTypeStateList, CellTypeStateList, int)::: oop map for cache entry fill stackmap for opcodes:::if->bcs->bci->entry->setMask
OopMapForCacheEntry#fillInitVars(List)::: oop map for cache entry fill init vars:::
OopMapForCacheEntry#computeMap()::: oop map for cache entry compute map:::if->Assert->method->isNative->that->if->method->getCodeSize->method->getMaxLocals->method->getMaxStack->entry->setEmptyMask->else->super->computeMap->resultForBasicblock
OopMapForCacheEntry#size()::: oop map for cache entry size:::if->Assert->that->return->method->isStatic->method->getMaxLocals

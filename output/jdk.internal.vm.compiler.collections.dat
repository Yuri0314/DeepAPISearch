EconomicMap#put(K, V):::Associates value with key in this map:::
EconomicMap#putAll(EconomicMap):::Copies all of the mappings from other to this map.:::e->other->getEntries->while->e->advance->e->getKey->e->getValue->put
EconomicMap#putAll(UnmodifiableEconomicMap):::Copies all of the mappings from other to this map.:::entry->other->getEntries->while->entry->advance->entry->getKey->entry->getValue->put
EconomicMap#clear():::Removes all of the mappings from this map:::
EconomicMap#removeKey(K):::Removes the mapping for key from this map if it is present:::
EconomicMap#getEntries():::Returns a MapCursor view of the mappings contained in this map.:::
EconomicMap#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking function on that entry until all entries have been processed or the function throws an exception:::
EconomicMap#create():::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys.:::return->EconomicMap->create
EconomicMap#create(int):::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys and initializes with a specified capacity.:::return->EconomicMap->create
EconomicMap#create(Equivalence):::Creates a new map that guarantees insertion order on the key set with the given comparison strategy for keys.:::return->EconomicMapImpl->create
EconomicMap#create(UnmodifiableEconomicMap):::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys and copies all elements from the specified existing map.:::return->EconomicMap->create
EconomicMap#create(Equivalence, UnmodifiableEconomicMap):::Creates a new map that guarantees insertion order on the key set and copies all elements from the specified existing map.:::return->EconomicMapImpl->create
EconomicMap#create(Equivalence, int):::Creates a new map that guarantees insertion order on the key set and initializes with a specified capacity.:::return->EconomicMapImpl->create
EconomicMap#wrapMap(Map):::Wraps an existing Map as an EconomicMap.:::return->new->EconomicMap<K,V>
EconomicSet#add(E):::Adds element to this set if it is not already present.:::
EconomicSet#remove(E):::Removes element from this set if it is present:::
EconomicSet#clear():::Removes all of the elements from this set:::
EconomicSet#addAll(EconomicSet):::Adds all of the elements in other to this set if they're not already present.:::other->iterator->addAll
EconomicSet#addAll(Iterable):::Adds all of the elements in values to this set if they're not already present.:::values->iterator->addAll
EconomicSet#addAll(Iterator):::Adds all of the elements enumerated by iterator to this set if they're not already present.:::while->iterator->hasNext->iterator->next->add
EconomicSet#removeAll(EconomicSet):::Removes from this set all of its elements that are contained in other.:::other->iterator->removeAll
EconomicSet#removeAll(Iterable):::Removes from this set all of its elements that are contained in values.:::values->iterator->removeAll
EconomicSet#removeAll(Iterator):::Removes from this set all of its elements that are enumerated by iterator.:::while->iterator->hasNext->iterator->next->remove
EconomicSet#retainAll(EconomicSet):::Removes from this set all of its elements that are not contained in other.:::iterator->iterator->while->iterator->hasNext->key->iterator->next->if->other->contains->iterator->remove
EconomicSet#create():::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy.:::return->EconomicSet->create
EconomicSet#create(Equivalence):::Creates a new set guaranteeing insertion order when iterating over its elements.:::return->EconomicMapImpl->create
EconomicSet#create(int):::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy and inserts all elements of the specified collection.:::return->EconomicSet->create
EconomicSet#create(UnmodifiableEconomicSet):::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy and inserts all elements of the specified collection.:::return->EconomicSet->create
EconomicSet#create(Equivalence, int):::Creates a new set guaranteeing insertion order when iterating over its elements and initializes with the given capacity.:::return->EconomicMapImpl->create
EconomicSet#create(Equivalence, UnmodifiableEconomicSet):::Creates a new set guaranteeing insertion order when iterating over its elements and inserts all elements of the specified collection.:::return->EconomicMapImpl->create
Equivalence#equals(Object, Object):::Returns true if the non-null arguments are equal to each other and false otherwise.:::
Equivalence#hashCode(Object):::Returns the hash code of a non-null argument o.:::
MapCursor#remove():::Remove the current entry from the map:::
Pair#empty():::Returns an empty pair.:::return
Pair#createLeft(L):::Constructs a pair with its left value being left, or returns an empty pair if left is null.:::if->return->empty->else->return->new->Pair<>
Pair#createRight(R):::Constructs a pair with its right value being right, or returns an empty pair if right is null.:::if->return->empty->else->return->new->Pair<>
Pair#create(L, R):::Constructs a pair with its left value being left, and its right value being right, or returns an empty pair if both inputs are null.:::if->return->empty->else->return->new->Pair<>
Pair#getLeft():::Returns the left value of this pair.:::return
Pair#getRight():::Returns the right value of this pair.:::return
UnmodifiableEconomicMap#get(K):::Returns the value to which key is mapped, or null if this map contains no mapping for key.:::
UnmodifiableEconomicMap#get(K, V):::Returns the value to which key is mapped, or defaultValue if this map contains no mapping for key.:::v->get->if->return->return
UnmodifiableEconomicMap#containsKey(K):::Returns true if this map contains a mapping for key.:::
UnmodifiableEconomicMap#size():::Returns the number of key-value mappings in this map.:::
UnmodifiableEconomicMap#isEmpty():::Returns true if this map contains no key-value mappings.:::
UnmodifiableEconomicMap#getValues():::Returns a Iterable view of the values contained in this map.:::
UnmodifiableEconomicMap#getKeys():::Returns a Iterable view of the keys contained in this map.:::
UnmodifiableEconomicMap#getEntries():::Returns a UnmodifiableMapCursor view of the mappings contained in this map.:::
UnmodifiableEconomicSet#contains(E):::Returns true if this set contains a mapping for the element.:::
UnmodifiableEconomicSet#size():::Returns the number of elements in this set.:::
UnmodifiableEconomicSet#isEmpty():::Returns true if this set contains no elements.:::
UnmodifiableEconomicSet#toArray(E[]):::Stores all of the elements in this set into target:::if->size->throw->new->UnsupportedOperationException->index->foreach->return
UnmodifiableMapCursor#advance():::Advances to the next entry.:::
UnmodifiableMapCursor#getKey():::The key of the current entry.:::
UnmodifiableMapCursor#getValue():::The value of the current entry.:::

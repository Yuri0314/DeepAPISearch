jdk.internal.vm.compiler.collections.EconomicMap#put(K, V)->V:::Associates value with key in this map
jdk.internal.vm.compiler.collections.EconomicMap#putAll(EconomicMap)->void:::Copies all of the mappings from other to this map.
jdk.internal.vm.compiler.collections.EconomicMap#putAll(UnmodifiableEconomicMap)->void:::Copies all of the mappings from other to this map.
jdk.internal.vm.compiler.collections.EconomicMap#clear()->void:::Removes all of the mappings from this map
jdk.internal.vm.compiler.collections.EconomicMap#removeKey(K)->V:::Removes the mapping for key from this map if it is present
jdk.internal.vm.compiler.collections.EconomicMap#getEntries()->MapCursor:::Returns a MapCursor view of the mappings contained in this map.
jdk.internal.vm.compiler.collections.EconomicMap#replaceAll(BiFunction)->void:::Replaces each entry's value with the result of invoking function on that entry until all entries have been processed or the function throws an exception
jdk.internal.vm.compiler.collections.EconomicMap#create()->EconomicMap:::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys.
jdk.internal.vm.compiler.collections.EconomicMap#create(int)->EconomicMap:::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys and initializes with a specified capacity.
jdk.internal.vm.compiler.collections.EconomicMap#create(Equivalence)->EconomicMap:::Creates a new map that guarantees insertion order on the key set with the given comparison strategy for keys.
jdk.internal.vm.compiler.collections.EconomicMap#create(UnmodifiableEconomicMap)->EconomicMap:::Creates a new map that guarantees insertion order on the key set with the default Equivalence#DEFAULT comparison strategy for keys and copies all elements from the specified existing map.
jdk.internal.vm.compiler.collections.EconomicMap#create(Equivalence, UnmodifiableEconomicMap)->EconomicMap:::Creates a new map that guarantees insertion order on the key set and copies all elements from the specified existing map.
jdk.internal.vm.compiler.collections.EconomicMap#create(Equivalence, int)->EconomicMap:::Creates a new map that guarantees insertion order on the key set and initializes with a specified capacity.
jdk.internal.vm.compiler.collections.EconomicMap#wrapMap(Map)->EconomicMap:::Wraps an existing Map as an EconomicMap.
jdk.internal.vm.compiler.collections.EconomicMapImpl#create(Equivalence, boolean)->EconomicMapImpl::: economic map impl create
jdk.internal.vm.compiler.collections.EconomicMapImpl#create(Equivalence, int, boolean)->EconomicMapImpl::: economic map impl create
jdk.internal.vm.compiler.collections.EconomicMapImpl#create(Equivalence, UnmodifiableEconomicMap, boolean)->EconomicMapImpl::: economic map impl create
jdk.internal.vm.compiler.collections.EconomicMapImpl#create(Equivalence, UnmodifiableEconomicSet, boolean)->EconomicMapImpl::: economic map impl create
jdk.internal.vm.compiler.collections.EconomicMapImpl#get(K)->V::: economic map impl get
jdk.internal.vm.compiler.collections.EconomicMapImpl#put(K, V)->V::: economic map impl put
jdk.internal.vm.compiler.collections.EconomicMapImpl#size()->int::: economic map impl size
jdk.internal.vm.compiler.collections.EconomicMapImpl#containsKey(K)->boolean::: economic map impl contains key
jdk.internal.vm.compiler.collections.EconomicMapImpl#clear()->void::: economic map impl clear
jdk.internal.vm.compiler.collections.EconomicMapImpl#removeKey(K)->V::: economic map impl remove key
jdk.internal.vm.compiler.collections.EconomicMapImpl#getValues()->Iterable::: economic map impl get values
jdk.internal.vm.compiler.collections.EconomicMapImpl#getKeys()->Iterable::: economic map impl get keys
jdk.internal.vm.compiler.collections.EconomicMapImpl#isEmpty()->boolean::: economic map impl is empty
jdk.internal.vm.compiler.collections.EconomicMapImpl#getEntries()->MapCursor::: economic map impl get entries
jdk.internal.vm.compiler.collections.EconomicMapImpl#replaceAll(BiFunction)->void::: economic map impl replace all
jdk.internal.vm.compiler.collections.EconomicMapImpl#toString()->String::: economic map impl to string
jdk.internal.vm.compiler.collections.EconomicMapImpl#iterator()->Iterator::: economic map impl iterator
jdk.internal.vm.compiler.collections.EconomicMapImpl#contains(K)->boolean::: economic map impl contains
jdk.internal.vm.compiler.collections.EconomicMapImpl#add(K)->boolean::: economic map impl add
jdk.internal.vm.compiler.collections.EconomicMapImpl#remove(K)->void::: economic map impl remove
jdk.internal.vm.compiler.collections.EconomicSet#add(E)->boolean:::Adds element to this set if it is not already present.
jdk.internal.vm.compiler.collections.EconomicSet#remove(E)->void:::Removes element from this set if it is present
jdk.internal.vm.compiler.collections.EconomicSet#clear()->void:::Removes all of the elements from this set
jdk.internal.vm.compiler.collections.EconomicSet#addAll(EconomicSet)->void:::Adds all of the elements in other to this set if they're not already present.
jdk.internal.vm.compiler.collections.EconomicSet#addAll(Iterable)->void:::Adds all of the elements in values to this set if they're not already present.
jdk.internal.vm.compiler.collections.EconomicSet#addAll(Iterator)->void:::Adds all of the elements enumerated by iterator to this set if they're not already present.
jdk.internal.vm.compiler.collections.EconomicSet#removeAll(EconomicSet)->void:::Removes from this set all of its elements that are contained in other.
jdk.internal.vm.compiler.collections.EconomicSet#removeAll(Iterable)->void:::Removes from this set all of its elements that are contained in values.
jdk.internal.vm.compiler.collections.EconomicSet#removeAll(Iterator)->void:::Removes from this set all of its elements that are enumerated by iterator.
jdk.internal.vm.compiler.collections.EconomicSet#retainAll(EconomicSet)->void:::Removes from this set all of its elements that are not contained in other.
jdk.internal.vm.compiler.collections.EconomicSet#create()->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy.
jdk.internal.vm.compiler.collections.EconomicSet#create(Equivalence)->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements.
jdk.internal.vm.compiler.collections.EconomicSet#create(int)->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy and inserts all elements of the specified collection.
jdk.internal.vm.compiler.collections.EconomicSet#create(UnmodifiableEconomicSet)->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements with the default Equivalence#DEFAULT comparison strategy and inserts all elements of the specified collection.
jdk.internal.vm.compiler.collections.EconomicSet#create(Equivalence, int)->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements and initializes with the given capacity.
jdk.internal.vm.compiler.collections.EconomicSet#create(Equivalence, UnmodifiableEconomicSet)->EconomicSet:::Creates a new set guaranteeing insertion order when iterating over its elements and inserts all elements of the specified collection.
jdk.internal.vm.compiler.collections.Equivalence#equals(Object, Object)->boolean:::Returns true if the non-null arguments are equal to each other and false otherwise.
jdk.internal.vm.compiler.collections.Equivalence#hashCode(Object)->int:::Returns the hash code of a non-null argument o.
jdk.internal.vm.compiler.collections.MapCursor#remove()->void:::Remove the current entry from the map
jdk.internal.vm.compiler.collections.Pair#empty()->Pair:::Returns an empty pair.
jdk.internal.vm.compiler.collections.Pair#createLeft(L)->Pair:::Constructs a pair with its left value being left, or returns an empty pair if left is null.
jdk.internal.vm.compiler.collections.Pair#createRight(R)->Pair:::Constructs a pair with its right value being right, or returns an empty pair if right is null.
jdk.internal.vm.compiler.collections.Pair#create(L, R)->Pair:::Constructs a pair with its left value being left, and its right value being right, or returns an empty pair if both inputs are null.
jdk.internal.vm.compiler.collections.Pair#getLeft()->L:::Returns the left value of this pair.
jdk.internal.vm.compiler.collections.Pair#getRight()->R:::Returns the right value of this pair.
jdk.internal.vm.compiler.collections.Pair#hashCode()->int::: pair hash code
jdk.internal.vm.compiler.collections.Pair#equals(Object)->boolean::: pair equals
jdk.internal.vm.compiler.collections.Pair#toString()->String::: pair to string
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#get(K)->V:::Returns the value to which key is mapped, or null if this map contains no mapping for key.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#get(K, V)->V:::Returns the value to which key is mapped, or defaultValue if this map contains no mapping for key.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#containsKey(K)->boolean:::Returns true if this map contains a mapping for key.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#size()->int:::Returns the number of key-value mappings in this map.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#isEmpty()->boolean:::Returns true if this map contains no key-value mappings.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#getValues()->Iterable:::Returns a Iterable view of the values contained in this map.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#getKeys()->Iterable:::Returns a Iterable view of the keys contained in this map.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap#getEntries()->UnmodifiableMapCursor:::Returns a UnmodifiableMapCursor view of the mappings contained in this map.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicSet#contains(E)->boolean:::Returns true if this set contains a mapping for the element.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicSet#size()->int:::Returns the number of elements in this set.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicSet#isEmpty()->boolean:::Returns true if this set contains no elements.
jdk.internal.vm.compiler.collections.UnmodifiableEconomicSet#toArray(E[])->E[]:::Stores all of the elements in this set into target
jdk.internal.vm.compiler.collections.UnmodifiableMapCursor#advance()->boolean:::Advances to the next entry.
jdk.internal.vm.compiler.collections.UnmodifiableMapCursor#getKey()->K:::The key of the current entry.
jdk.internal.vm.compiler.collections.UnmodifiableMapCursor#getValue()->V:::The value of the current entry.

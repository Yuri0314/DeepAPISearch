java.lang.management.BufferPoolMXBean#getName()->String:::Returns the name representing this buffer pool.
java.lang.management.BufferPoolMXBean#getCount()->long:::Returns an estimate of the number of buffers in the pool.
java.lang.management.BufferPoolMXBean#getTotalCapacity()->long:::Returns an estimate of the total capacity of the buffers in this pool
java.lang.management.BufferPoolMXBean#getMemoryUsed()->long:::Returns an estimate of the memory that the Java virtual machine is using for this buffer pool
java.lang.management.ClassLoadingMXBean#getTotalLoadedClassCount()->long:::Returns the total number of classes that have been loaded since the Java virtual machine has started execution.
java.lang.management.ClassLoadingMXBean#getLoadedClassCount()->int:::Returns the number of classes that are currently loaded in the Java virtual machine.
java.lang.management.ClassLoadingMXBean#getUnloadedClassCount()->long:::Returns the total number of classes unloaded since the Java virtual machine has started execution.
java.lang.management.ClassLoadingMXBean#isVerbose()->boolean:::Tests if the verbose output for the class loading system is enabled.
java.lang.management.ClassLoadingMXBean#setVerbose(boolean)->void:::Enables or disables the verbose output for the class loading system
java.lang.management.CompilationMXBean#getName()->java.lang.String:::Returns the name of the Just-in-time (JIT) compiler.
java.lang.management.CompilationMXBean#isCompilationTimeMonitoringSupported()->boolean:::Tests if the Java virtual machine supports the monitoring of compilation time.
java.lang.management.CompilationMXBean#getTotalCompilationTime()->long:::Returns the approximate accumulated elapsed time (in milliseconds) spent in compilation
java.lang.management.DefaultPlatformMBeanProvider#getPlatformComponentList()->List>::: default platform bean provider get platform component list
java.lang.management.GarbageCollectorMXBean#getCollectionCount()->long:::Returns the total number of collections that have occurred
java.lang.management.GarbageCollectorMXBean#getCollectionTime()->long:::Returns the approximate accumulated collection elapsed time in milliseconds
java.lang.management.LockInfo#getClassName()->String:::Returns the fully qualified name of the class of the lock object.
java.lang.management.LockInfo#getIdentityHashCode()->int:::Returns the identity hash code of the lock object returned from the System#identityHashCode method.
java.lang.management.LockInfo#from(CompositeData)->LockInfo:::Returns a LockInfo object represented by the given CompositeData
java.lang.management.LockInfo#toString()->String:::Returns a string representation of a lock
java.lang.management.ManagementFactory#getClassLoadingMXBean()->ClassLoadingMXBean:::Returns the managed bean for the class loading system of the Java virtual machine.
java.lang.management.ManagementFactory#getMemoryMXBean()->MemoryMXBean:::Returns the managed bean for the memory system of the Java virtual machine.
java.lang.management.ManagementFactory#getThreadMXBean()->ThreadMXBean:::Returns the managed bean for the thread system of the Java virtual machine.
java.lang.management.ManagementFactory#getRuntimeMXBean()->RuntimeMXBean:::Returns the managed bean for the runtime system of the Java virtual machine.
java.lang.management.ManagementFactory#getCompilationMXBean()->CompilationMXBean:::Returns the managed bean for the compilation system of the Java virtual machine
java.lang.management.ManagementFactory#getOperatingSystemMXBean()->OperatingSystemMXBean:::Returns the managed bean for the operating system on which the Java virtual machine is running.
java.lang.management.ManagementFactory#getMemoryPoolMXBeans()->List:::Returns a list of MemoryPoolMXBean objects in the Java virtual machine
java.lang.management.ManagementFactory#getMemoryManagerMXBeans()->List:::Returns a list of MemoryManagerMXBean objects in the Java virtual machine
java.lang.management.ManagementFactory#getGarbageCollectorMXBeans()->List:::Returns a list of GarbageCollectorMXBean objects in the Java virtual machine
java.lang.management.ManagementFactory#getPlatformMBeanServer()->MBeanServer:::Returns the platform javax.management.MBeanServer MBeanServer
java.lang.management.ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)->T:::Returns a proxy for a platform MXBean interface of a given MXBean name that forwards its method calls through the given MBeanServerConnection
java.lang.management.ManagementFactory#getPlatformMXBean(Class)->T:::Returns the platform MXBean implementing the given mxbeanInterface which is specified to have one single instance in the Java virtual machine
java.lang.management.ManagementFactory#getPlatformMXBeans(Class)->List:::Returns the list of platform MXBeans implementing the given mxbeanInterface in the Java virtual machine
java.lang.management.ManagementFactory#getPlatformMXBean(MBeanServerConnection, Class)->T:::Returns the platform MXBean proxy for mxbeanInterface which is specified to have one single instance in a Java virtual machine and the proxy will forward the method calls through the given MBeanServerConnection
java.lang.management.ManagementFactory#getPlatformMXBeans(MBeanServerConnection, Class)->List:::Returns the list of the platform MXBean proxies for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection
java.lang.management.ManagementFactory#getPlatformManagementInterfaces()->Set>:::Returns the set of Class objects, subinterface of PlatformManagedObject, representing all management interfaces for monitoring and managing the Java platform.
java.lang.management.MemoryManagerMXBean#getName()->String:::Returns the name representing this memory manager.
java.lang.management.MemoryManagerMXBean#isValid()->boolean:::Tests if this memory manager is valid in the Java virtual machine
java.lang.management.MemoryManagerMXBean#getMemoryPoolNames()->String[]:::Returns the name of memory pools that this memory manager manages.
java.lang.management.MemoryMXBean#getObjectPendingFinalizationCount()->int:::Returns the approximate number of objects for which finalization is pending.
java.lang.management.MemoryMXBean#getHeapMemoryUsage()->MemoryUsage:::Returns the current memory usage of the heap that is used for object allocation
java.lang.management.MemoryMXBean#getNonHeapMemoryUsage()->MemoryUsage:::Returns the current memory usage of non-heap memory that is used by the Java virtual machine
java.lang.management.MemoryMXBean#isVerbose()->boolean:::Tests if verbose output for the memory system is enabled.
java.lang.management.MemoryMXBean#setVerbose(boolean)->void:::Enables or disables verbose output for the memory system
java.lang.management.MemoryMXBean#gc()->void:::Runs the garbage collector
java.lang.management.MemoryNotificationInfo#getPoolName()->String:::Returns the name of the memory pool that triggers this notification
java.lang.management.MemoryNotificationInfo#getUsage()->MemoryUsage:::Returns the memory usage of the memory pool when this notification was constructed.
java.lang.management.MemoryNotificationInfo#getCount()->long:::Returns the number of times that the memory usage has crossed a threshold when the notification was constructed
java.lang.management.MemoryNotificationInfo#from(CompositeData)->MemoryNotificationInfo:::Returns a MemoryNotificationInfo object represented by the given CompositeData
java.lang.management.MemoryPoolMXBean#getName()->String:::Returns the name representing this memory pool.
java.lang.management.MemoryPoolMXBean#getType()->MemoryType:::Returns the type of this memory pool
java.lang.management.MemoryPoolMXBean#getUsage()->MemoryUsage:::Returns an estimate of the memory usage of this memory pool
java.lang.management.MemoryPoolMXBean#getPeakUsage()->MemoryUsage:::Returns the peak memory usage of this memory pool since the Java virtual machine was started or since the peak was reset
java.lang.management.MemoryPoolMXBean#resetPeakUsage()->void:::Resets the peak memory usage statistic of this memory pool to the current memory usage.
java.lang.management.MemoryPoolMXBean#isValid()->boolean:::Tests if this memory pool is valid in the Java virtual machine
java.lang.management.MemoryPoolMXBean#getMemoryManagerNames()->String[]:::Returns the name of memory managers that manages this memory pool
java.lang.management.MemoryPoolMXBean#getUsageThreshold()->long:::Returns the usage threshold value of this memory pool in bytes
java.lang.management.MemoryPoolMXBean#setUsageThreshold(long)->void:::Sets the threshold of this memory pool to the given threshold value if this memory pool supports the usage threshold
java.lang.management.MemoryPoolMXBean#isUsageThresholdExceeded()->boolean:::Tests if the memory usage of this memory pool reaches or exceeds its usage threshold value.
java.lang.management.MemoryPoolMXBean#getUsageThresholdCount()->long:::Returns the number of times that the memory usage has crossed the usage threshold.
java.lang.management.MemoryPoolMXBean#isUsageThresholdSupported()->boolean:::Tests if this memory pool supports usage threshold.
java.lang.management.MemoryPoolMXBean#getCollectionUsageThreshold()->long:::Returns the collection usage threshold value of this memory pool in bytes
java.lang.management.MemoryPoolMXBean#setCollectionUsageThreshold(long)->void:::Sets the collection usage threshold of this memory pool to the given threshold value
java.lang.management.MemoryPoolMXBean#isCollectionUsageThresholdExceeded()->boolean:::Tests if the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold
java.lang.management.MemoryPoolMXBean#getCollectionUsageThresholdCount()->long:::Returns the number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold.
java.lang.management.MemoryPoolMXBean#getCollectionUsage()->MemoryUsage:::Returns the memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool
java.lang.management.MemoryPoolMXBean#isCollectionUsageThresholdSupported()->boolean:::Tests if this memory pool supports a collection usage threshold.
java.lang.management.MemoryUsage#getInit()->long:::Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management
java.lang.management.MemoryUsage#getUsed()->long:::Returns the amount of used memory in bytes.
java.lang.management.MemoryUsage#getCommitted()->long:::Returns the amount of memory in bytes that is committed for the Java virtual machine to use
java.lang.management.MemoryUsage#getMax()->long:::Returns the maximum amount of memory in bytes that can be used for memory management
java.lang.management.MemoryUsage#toString()->String:::Returns a descriptive representation of this memory usage.
java.lang.management.MemoryUsage#from(CompositeData)->MemoryUsage:::Returns a MemoryUsage object represented by the given CompositeData
java.lang.management.MonitorInfo#getLockedStackDepth()->int:::Returns the depth in the stack trace where the object monitor was locked
java.lang.management.MonitorInfo#getLockedStackFrame()->StackTraceElement:::Returns the stack frame that locked the object monitor.
java.lang.management.MonitorInfo#from(CompositeData)->MonitorInfo:::Returns a MonitorInfo object represented by the given CompositeData
java.lang.management.OperatingSystemMXBean#getName()->String:::Returns the operating system name
java.lang.management.OperatingSystemMXBean#getArch()->String:::Returns the operating system architecture
java.lang.management.OperatingSystemMXBean#getVersion()->String:::Returns the operating system version
java.lang.management.OperatingSystemMXBean#getAvailableProcessors()->int:::Returns the number of processors available to the Java virtual machine
java.lang.management.OperatingSystemMXBean#getSystemLoadAverage()->double:::Returns the system load average for the last minute
java.lang.management.PlatformLoggingMXBean#getLoggerNames()->java.util.List:::Returns the list of the currently registered java.util.logging.Logger logger names
java.lang.management.PlatformLoggingMXBean#getLoggerLevel(String)->String:::Gets the name of the log java.util.logging.Logger#getLevel level associated with the specified logger
java.lang.management.PlatformLoggingMXBean#setLoggerLevel(String, String)->void:::Sets the specified logger to the specified new java.util.logging.Logger#setLevel level
java.lang.management.PlatformLoggingMXBean#getParentLoggerName(String)->String:::Returns the name of the java.util.logging.Logger#getParent parent for the specified logger
java.lang.management.PlatformManagedObject#getObjectName()->ObjectName:::Returns an ObjectName ObjectName instance representing the object name of this platform managed object.
java.lang.management.RuntimeMXBean#getPid()->long:::Returns the ProcessHandle#pid process ID representing the running Java virtual machine.
java.lang.management.RuntimeMXBean#getName()->String:::Returns the name representing the running Java virtual machine
java.lang.management.RuntimeMXBean#getVmName()->String:::Returns the Java virtual machine implementation name
java.lang.management.RuntimeMXBean#getVmVendor()->String:::Returns the Java virtual machine implementation vendor
java.lang.management.RuntimeMXBean#getVmVersion()->String:::Returns the Java virtual machine implementation version
java.lang.management.RuntimeMXBean#getSpecName()->String:::Returns the Java virtual machine specification name
java.lang.management.RuntimeMXBean#getSpecVendor()->String:::Returns the Java virtual machine specification vendor
java.lang.management.RuntimeMXBean#getSpecVersion()->String:::Returns the Java virtual machine specification version
java.lang.management.RuntimeMXBean#getManagementSpecVersion()->String:::Returns the version of the specification for the management interface implemented by the running Java virtual machine.
java.lang.management.RuntimeMXBean#getClassPath()->String:::Returns the Java class path that is used by the system class loader to search for class files
java.lang.management.RuntimeMXBean#getLibraryPath()->String:::Returns the Java library path
java.lang.management.RuntimeMXBean#isBootClassPathSupported()->boolean:::Tests if the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files.
java.lang.management.RuntimeMXBean#getBootClassPath()->String:::Returns the boot class path that is used by the bootstrap class loader to search for class files
java.lang.management.RuntimeMXBean#getInputArguments()->java.util.List:::Returns the input arguments passed to the Java virtual machine which does not include the arguments to the main method
java.lang.management.RuntimeMXBean#getUptime()->long:::Returns the uptime of the Java virtual machine in milliseconds.
java.lang.management.RuntimeMXBean#getStartTime()->long:::Returns the start time of the Java virtual machine in milliseconds
java.lang.management.RuntimeMXBean#getSystemProperties()->java.util.Map:::Returns a map of names and values of all system properties
java.lang.management.ThreadInfo#getThreadId()->long:::Returns the ID of the thread associated with this ThreadInfo.
java.lang.management.ThreadInfo#getThreadName()->String:::Returns the name of the thread associated with this ThreadInfo.
java.lang.management.ThreadInfo#getThreadState()->Thread.State:::Returns the state of the thread associated with this ThreadInfo.
java.lang.management.ThreadInfo#getBlockedTime()->long:::Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled
java.lang.management.ThreadInfo#getBlockedCount()->long:::Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor
java.lang.management.ThreadInfo#getWaitedTime()->long:::Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled
java.lang.management.ThreadInfo#getWaitedCount()->long:::Returns the total number of times that the thread associated with this ThreadInfo waited for notification
java.lang.management.ThreadInfo#getLockInfo()->LockInfo:::Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting
java.lang.management.ThreadInfo#getLockName()->String:::Returns the LockInfo#toString string representation of an object for which the thread associated with this ThreadInfo is blocked waiting
java.lang.management.ThreadInfo#getLockOwnerId()->long:::Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
java.lang.management.ThreadInfo#getLockOwnerName()->String:::Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
java.lang.management.ThreadInfo#getStackTrace()->StackTraceElement[]:::Returns the stack trace of the thread associated with this ThreadInfo
java.lang.management.ThreadInfo#isSuspended()->boolean:::Tests if the thread associated with this ThreadInfo is suspended
java.lang.management.ThreadInfo#isInNative()->boolean:::Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface (JNI)
java.lang.management.ThreadInfo#isDaemon()->boolean:::Tests if the thread associated with this ThreadInfo is a Thread#isDaemon daemon thread.
java.lang.management.ThreadInfo#getPriority()->int:::Returns the Thread#getPriority() thread priority of the thread associated with this ThreadInfo.
java.lang.management.ThreadInfo#toString()->String:::Returns a string representation of this thread info
java.lang.management.ThreadInfo#from(CompositeData)->ThreadInfo:::Returns a ThreadInfo object represented by the given CompositeData
java.lang.management.ThreadInfo#getLockedMonitors()->MonitorInfo[]:::Returns an array of MonitorInfo objects, each of which represents an object monitor currently locked by the thread associated with this ThreadInfo
java.lang.management.ThreadInfo#getLockedSynchronizers()->LockInfo[]:::Returns an array of LockInfo objects, each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo
java.lang.management.ThreadMXBean#getThreadCount()->int:::Returns the current number of live threads including both daemon and non-daemon threads.
java.lang.management.ThreadMXBean#getPeakThreadCount()->int:::Returns the peak live thread count since the Java virtual machine started or peak was reset.
java.lang.management.ThreadMXBean#getTotalStartedThreadCount()->long:::Returns the total number of threads created and also started since the Java virtual machine started.
java.lang.management.ThreadMXBean#getDaemonThreadCount()->int:::Returns the current number of live daemon threads.
java.lang.management.ThreadMXBean#getAllThreadIds()->long[]:::Returns all live thread IDs
java.lang.management.ThreadMXBean#getThreadInfo(long)->ThreadInfo:::Returns the thread info for a thread of the specified id with no stack trace
java.lang.management.ThreadMXBean#getThreadInfo(long[])->ThreadInfo[]:::Returns the thread info for each thread whose ID is in the input array ids with no stack trace
java.lang.management.ThreadMXBean#getThreadInfo(long, int)->ThreadInfo:::Returns a thread info for a thread of the specified id, with stack trace of a specified number of stack trace elements
java.lang.management.ThreadMXBean#getThreadInfo(long[], int)->ThreadInfo[]:::Returns the thread info for each thread whose ID is in the input array ids, with stack trace of a specified number of stack trace elements
java.lang.management.ThreadMXBean#isThreadContentionMonitoringSupported()->boolean:::Tests if the Java virtual machine supports thread contention monitoring.
java.lang.management.ThreadMXBean#isThreadContentionMonitoringEnabled()->boolean:::Tests if thread contention monitoring is enabled.
java.lang.management.ThreadMXBean#setThreadContentionMonitoringEnabled(boolean)->void:::Enables or disables thread contention monitoring
java.lang.management.ThreadMXBean#getCurrentThreadCpuTime()->long:::Returns the total CPU time for the current thread in nanoseconds
java.lang.management.ThreadMXBean#getCurrentThreadUserTime()->long:::Returns the CPU time that the current thread has executed in user mode in nanoseconds
java.lang.management.ThreadMXBean#getThreadCpuTime(long)->long:::Returns the total CPU time for a thread of the specified ID in nanoseconds
java.lang.management.ThreadMXBean#getThreadUserTime(long)->long:::Returns the CPU time that a thread of the specified ID has executed in user mode in nanoseconds
java.lang.management.ThreadMXBean#isThreadCpuTimeSupported()->boolean:::Tests if the Java virtual machine implementation supports CPU time measurement for any thread
java.lang.management.ThreadMXBean#isCurrentThreadCpuTimeSupported()->boolean:::Tests if the Java virtual machine supports CPU time measurement for the current thread
java.lang.management.ThreadMXBean#isThreadCpuTimeEnabled()->boolean:::Tests if thread CPU time measurement is enabled.
java.lang.management.ThreadMXBean#setThreadCpuTimeEnabled(boolean)->void:::Enables or disables thread CPU time measurement
java.lang.management.ThreadMXBean#findMonitorDeadlockedThreads()->long[]:::Finds cycles of threads that are in deadlock waiting to acquire object monitors
java.lang.management.ThreadMXBean#resetPeakThreadCount()->void:::Resets the peak thread count to the current number of live threads.
java.lang.management.ThreadMXBean#findDeadlockedThreads()->long[]:::Finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers
java.lang.management.ThreadMXBean#isObjectMonitorUsageSupported()->boolean:::Tests if the Java virtual machine supports monitoring of object monitor usage.
java.lang.management.ThreadMXBean#isSynchronizerUsageSupported()->boolean:::Tests if the Java virtual machine supports monitoring of  ownable synchronizer usage.
java.lang.management.ThreadMXBean#getThreadInfo(long[], boolean, boolean)->ThreadInfo[]:::Returns the thread info for each thread whose ID is in the input array ids, with stack trace and synchronization information
java.lang.management.ThreadMXBean#getThreadInfo(long[], boolean, boolean, int)->ThreadInfo[]::: thread bean get thread info
java.lang.management.ThreadMXBean#dumpAllThreads(boolean, boolean)->ThreadInfo[]:::Returns the thread info for all live threads with stack trace and synchronization information
java.lang.management.ThreadMXBean#dumpAllThreads(boolean, boolean, int)->ThreadInfo[]:::Returns the thread info for all live threads with stack trace of the specified maximum number of elements and synchronization information

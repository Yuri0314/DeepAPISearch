jdk.internal.ref.Cleaner#create(Object, Runnable)->Cleaner:::Creates a new cleaner.
jdk.internal.ref.Cleaner#clean()->void:::Runs this cleaner, if it has not been run before.
jdk.internal.ref.CleanerFactory#cleaner()->Cleaner:::Cleaner for use within system modules
jdk.internal.ref.CleanerImpl#setCleanerImplAccess(Function)->void:::Called by Cleaner static initialization to provide the function to map from Cleaner to CleanerImpl.
jdk.internal.ref.CleanerImpl#getCleanerImpl(Cleaner)->CleanerImpl:::Called to get the CleanerImpl for a Cleaner.
jdk.internal.ref.CleanerImpl#start(Cleaner, ThreadFactory)->void:::Starts the Cleaner implementation
jdk.internal.ref.CleanerImpl#run()->void:::Process queued Cleanables as long as the cleanable lists are not empty
jdk.internal.ref.CleanerImpl.PhantomCleanableRef#performCleanup()->void::: phantom cleanable ref perform cleanup
jdk.internal.ref.CleanerImpl.PhantomCleanableRef#get()->Object:::Prevent access to referent even when it is still alive.
jdk.internal.ref.CleanerImpl.PhantomCleanableRef#clear()->void:::Direct clearing of the referent is not supported.
jdk.internal.ref.CleanerImpl.WeakCleanableRef#performCleanup()->void::: weak cleanable ref perform cleanup
jdk.internal.ref.CleanerImpl.WeakCleanableRef#get()->Object:::Prevent access to referent even when it is still alive.
jdk.internal.ref.CleanerImpl.WeakCleanableRef#clear()->void:::Direct clearing of the referent is not supported.
jdk.internal.ref.CleanerImpl.SoftCleanableRef#performCleanup()->void::: soft cleanable ref perform cleanup
jdk.internal.ref.CleanerImpl.SoftCleanableRef#get()->Object:::Prevent access to referent even when it is still alive.
jdk.internal.ref.CleanerImpl.SoftCleanableRef#clear()->void:::Direct clearing of the referent is not supported.
jdk.internal.ref.CleanerImpl.InnocuousThreadFactory#factory()->ThreadFactory::: innocuous thread factory factory
jdk.internal.ref.CleanerImpl.InnocuousThreadFactory#newThread(Runnable)->Thread::: innocuous thread factory new thread
jdk.internal.ref.CleanerImpl.CleanerCleanable#performCleanup()->void::: cleaner cleanable perform cleanup
jdk.internal.ref.PhantomCleanable#isListEmpty()->boolean:::Returns true if the list's next reference refers to itself.
jdk.internal.ref.PhantomCleanable#clean()->void:::Unregister this PhantomCleanable and invoke #performCleanup(), ensuring at-most-once semantics.
jdk.internal.ref.PhantomCleanable#clear()->void:::Unregister this PhantomCleanable and clear the reference
jdk.internal.ref.PhantomCleanable#performCleanup()->void:::The performCleanup abstract method is overridden to implement the cleaning logic
jdk.internal.ref.PhantomCleanable#isEnqueued()->boolean:::This method always throws UnsupportedOperationException
jdk.internal.ref.PhantomCleanable#enqueue()->boolean:::This method always throws UnsupportedOperationException
jdk.internal.ref.SoftCleanable#isListEmpty()->boolean:::Returns true if the list's next reference refers to itself.
jdk.internal.ref.SoftCleanable#clean()->void:::Unregister this SoftCleanable reference and invoke #performCleanup(), ensuring at-most-once semantics.
jdk.internal.ref.SoftCleanable#clear()->void:::Unregister this SoftCleanable and clear the reference
jdk.internal.ref.SoftCleanable#performCleanup()->void:::The performCleanup abstract method is overridden to implement the cleaning logic
jdk.internal.ref.SoftCleanable#isEnqueued()->boolean:::This method always throws UnsupportedOperationException
jdk.internal.ref.SoftCleanable#enqueue()->boolean:::This method always throws UnsupportedOperationException
jdk.internal.ref.WeakCleanable#isListEmpty()->boolean:::Returns true if the list's next reference refers to itself.
jdk.internal.ref.WeakCleanable#clean()->void:::Unregister this WeakCleanable reference and invoke #performCleanup(), ensuring at-most-once semantics.
jdk.internal.ref.WeakCleanable#clear()->void:::Unregister this WeakCleanable and clear the reference
jdk.internal.ref.WeakCleanable#performCleanup()->void:::The performCleanup abstract method is overridden to implement the cleaning logic
jdk.internal.ref.WeakCleanable#isEnqueued()->boolean:::This method always throws UnsupportedOperationException
jdk.internal.ref.WeakCleanable#enqueue()->boolean:::This method always throws UnsupportedOperationException

org.graalvm.compiler.lir.util.GenericValueMap#get(Value)->T::: generic value map get
org.graalvm.compiler.lir.util.GenericValueMap#remove(Value)->void::: generic value map remove
org.graalvm.compiler.lir.util.GenericValueMap#put(Value, T)->void::: generic value map put
org.graalvm.compiler.lir.util.IndexedValueMap#get(int)->Value::: indexed value map get
org.graalvm.compiler.lir.util.IndexedValueMap#put(int, Value)->void::: indexed value map put
org.graalvm.compiler.lir.util.IndexedValueMap#putAll(IndexedValueMap)->void::: indexed value map put all
org.graalvm.compiler.lir.util.IndexedValueMap#equals(Object)->boolean::: indexed value map equals
org.graalvm.compiler.lir.util.IndexedValueMap#forEach(LIRInstruction, OperandMode, EnumSet, InstructionValueProcedure)->void::: indexed value map for each
org.graalvm.compiler.lir.util.IndexedValueMap#visitEach(LIRInstruction, OperandMode, EnumSet, InstructionValueConsumer)->void::: indexed value map visit each
org.graalvm.compiler.lir.util.IndexedValueMap#hashCode()->int::: indexed value map hash code
org.graalvm.compiler.lir.util.IndexedValueMap#toString()->String::: indexed value map to string
org.graalvm.compiler.lir.util.RegisterMap#get(Register)->T::: register map get
org.graalvm.compiler.lir.util.RegisterMap#remove(Register)->void::: register map remove
org.graalvm.compiler.lir.util.RegisterMap#put(Register, T)->void::: register map put
org.graalvm.compiler.lir.util.RegisterMap#forEach(BiConsumer)->void::: register map for each
org.graalvm.compiler.lir.util.ValueMap#get(K)->T:::Gets the object associated with value or null if there is no such mapping.
org.graalvm.compiler.lir.util.ValueMap#remove(K)->void:::Removes the object associated with value from the map.
org.graalvm.compiler.lir.util.ValueMap#put(K, T)->void:::Associates object with value.
org.graalvm.compiler.lir.util.ValueSet#put(Value)->void::: value set put
org.graalvm.compiler.lir.util.ValueSet#remove(Value)->void::: value set remove
org.graalvm.compiler.lir.util.ValueSet#putAll(S)->void::: value set put all
org.graalvm.compiler.lir.util.ValueSet#copy()->S::: value set copy
org.graalvm.compiler.lir.util.VariableVirtualStackValueMap#get(K)->T::: variable virtual stack value map get
org.graalvm.compiler.lir.util.VariableVirtualStackValueMap#remove(K)->void::: variable virtual stack value map remove
org.graalvm.compiler.lir.util.VariableVirtualStackValueMap#put(K, T)->void::: variable virtual stack value map put

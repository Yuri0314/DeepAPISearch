GenericValueMap#get(Value)::: generic value map get:::return->data->get
GenericValueMap#remove(Value)::: generic value map remove:::data->removeKey
GenericValueMap#put(Value, T)::: generic value map put:::data->put
IndexedValueMap#get(int)::: indexed value map get:::return
IndexedValueMap#put(int, Value)::: indexed value map put:::if->if->return->newValues->new->ValueArr->if->System->arraycopy->else
IndexedValueMap#putAll(IndexedValueMap)::: indexed value map put all:::otherValues->limit->if->while->if->continue->break->if->newValues->new->ValueArr->System->arraycopy->for->i
IndexedValueMap#equals(Object)::: indexed value map equals:::if->that->limit->Math->min->for->i->for->i->for->i->return->return
IndexedValueMap#forEach(LIRInstruction, OperandMode, EnumSet, InstructionValueProcedure)::: indexed value map for each:::for->i
IndexedValueMap#visitEach(LIRInstruction, OperandMode, EnumSet, InstructionValueConsumer)::: indexed value map visit each:::foreach->if->consumer->visitValue
IndexedValueMap#hashCode()::: indexed value map hash code:::throw->new->UnsupportedOperationException
IndexedValueMap#toString()::: indexed value map to string:::sb->new->StringBuilder->comma->for->i->sb->append->return->sb->toString
RegisterMap#get(Register)::: register map get:::return->index
RegisterMap#remove(Register)::: register map remove:::index
RegisterMap#put(Register, T)::: register map put:::index
RegisterMap#forEach(BiConsumer)::: register map for each:::for->i
RegisterMap#index(Register)::: register map index:::return
RegisterMap#checkArchitecture(Architecture)::: register map check architecture:::registers->arch->getRegisters->for->i->registers->size->return
ValueMap#get(K):::Gets the object associated with value or null if there is no such mapping.:::
ValueMap#remove(K):::Removes the object associated with value from the map.:::
ValueMap#put(K, T):::Associates object with value.:::
ValueSet#put(Value)::: value set put:::
ValueSet#remove(Value)::: value set remove:::
ValueSet#putAll(S)::: value set put all:::
ValueSet#copy()::: value set copy:::
VariableVirtualStackValueMap#get(K)::: variable virtual stack value map get:::if->isVariable->return->asVariable->get->if->isVirtualStackSlot->return->asVirtualStackSlot->getId->get->throw->GraalError->shouldNotReachHere
VariableVirtualStackValueMap#remove(K)::: variable virtual stack value map remove:::if->isVariable->asVariable->remove->else->if->isVirtualStackSlot->asVirtualStackSlot->getId->remove->else->throw->GraalError->shouldNotReachHere
VariableVirtualStackValueMap#put(K, T)::: variable virtual stack value map put:::if->isVariable->asVariable->put->else->if->isVirtualStackSlot->asVirtualStackSlot->getId->put->else->throw->GraalError->shouldNotReachHere
VariableVirtualStackValueMap#get(Object[], int)::: variable virtual stack value map get:::if->return->return
VariableVirtualStackValueMap#remove(Object[], int)::: variable virtual stack value map remove:::if->return
VariableVirtualStackValueMap#put(Object[], int, T)::: variable virtual stack value map put:::if->newArray->new->ObjectArr->System->arraycopy->return->return

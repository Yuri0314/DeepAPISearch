org.graalvm.compiler.hotspot.sparc.SPARCDeoptimizeOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: deoptimize op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#newLIRGenerator(LIRGenerationResult)->LIRGeneratorTool::: hot spot backend new generator
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#newLIRGenerationResult(CompilationIdentifier, LIR, RegisterConfig, StructuredGraph, Object)->LIRGenerationResult::: hot spot backend new generation result
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#newNodeLIRBuilder(StructuredGraph, LIRGeneratorTool)->NodeLIRBuilderTool::: hot spot backend new node builder
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#bangStackWithOffset(CompilationResultBuilder, int)->void::: hot spot backend bang stack with offset
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend.HotSpotFrameContext#hasFrame()->boolean::: hot spot frame context has frame
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend.HotSpotFrameContext#enter(CompilationResultBuilder)->void::: hot spot frame context enter
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend.HotSpotFrameContext#leave(CompilationResultBuilder)->void::: hot spot frame context leave
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#newCompilationResultBuilder(LIRGenerationResult, FrameMap, CompilationResult, CompilationResultBuilderFactory)->CompilationResultBuilder::: hot spot backend new compilation result builder
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#emitCode(CompilationResultBuilder, LIR, ResolvedJavaMethod)->void::: hot spot backend emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#newRegisterAllocationConfig(RegisterConfig, String[])->RegisterAllocationConfig::: hot spot backend new register allocation config
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackend#translateToCallerRegisters(EconomicSet)->EconomicSet::: hot spot backend translate to caller registers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#getName()->String::: hot spot backend factory get name
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#getArchitecture()->Class::: hot spot backend factory get architecture
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)->HotSpotBackend::: hot spot backend factory create backend
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createGraphBuilderPlugins(CompilerConfiguration, GraalHotSpotVMConfig, HotSpotMetaAccessProvider, HotSpotConstantReflectionProvider, HotSpotForeignCallsProvider, HotSpotSnippetReflectionProvider, HotSpotReplacementsImpl, HotSpotWordTypes, OptionValues)->Plugins::: hot spot backend factory create graph builder plugins
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createSuites(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, CompilerConfiguration, Plugins, Replacements)->HotSpotSuitesProvider::: hot spot backend factory create suites
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createBackend(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, HotSpotProviders)->SPARCHotSpotBackend::: hot spot backend factory create backend
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createLowerer(HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotForeignCallsProvider, HotSpotRegistersProvider, HotSpotConstantReflectionProvider, TargetDescription)->HotSpotLoweringProvider::: hot spot backend factory create lowerer
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#createRegisters()->HotSpotRegistersProvider::: hot spot backend factory create registers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotBackendFactory#toString()->String::: hot spot backend factory to string
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotCounterOp#emitCode(CompilationResultBuilder)->void::: hot spot counter op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotCounterOp#patchCounterIncrement(Assembler, int[])->void:::Patches the increment value in the instruction emitted by the #emitIncrement(int, SPARCMacroAssembler, SPARCAddress, Value) method
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotCounterOp#getCounterPatchOffsets()->int[]::: hot spot counter op get counter patch offsets
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotCRuntimeCallEpilogueOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot runtime call epilogue op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotCRuntimeCallPrologueOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot runtime call prologue op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotDeoptimizeCallerOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot deoptimize caller op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotspotDirectStaticCallOp#emitCallPrefixCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hotspot direct static call op emit call prefix code
org.graalvm.compiler.hotspot.sparc.SPARCHotspotDirectVirtualCallOp#emitCallPrefixCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hotspot direct virtual call op emit call prefix code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotEpilogueOp#leaveFrame(CompilationResultBuilder)->void::: hot spot epilogue op leave frame
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotForeignCallsProvider#initialize(HotSpotProviders, OptionValues)->void::: hot spot foreign calls provider initialize
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotForeignCallsProvider#getNativeABICallerSaveRegisters()->Value[]::: hot spot foreign calls provider get native caller save registers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotJumpToExceptionHandlerInCallerOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot jump to exception handler in caller op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotJumpToExceptionHandlerOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot jump to exception handler op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLeaveCurrentStackFrameOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot leave current stack frame op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLeaveCurrentStackFrameOp#leavesRegisterWindow()->boolean::: hot spot leave current stack frame op leaves register window
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLeaveDeoptimizedStackFrameOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot leave deoptimized stack frame op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLeaveDeoptimizedStackFrameOp#leavesRegisterWindow()->boolean::: hot spot leave deoptimized stack frame op leaves register window
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getProviders()->HotSpotProviders::: hot spot generator get providers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getLockSlot(int)->VirtualStackSlot::: hot spot generator get lock slot
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#needOnlyOopMaps()->boolean::: hot spot generator need only oop maps
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getStub()->Stub::: hot spot generator get stub
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getResult()->HotSpotLIRGenerationResult::: hot spot generator get result
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#beforeRegisterAllocation()->void::: hot spot generator before register allocation
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)->Variable::: hot spot generator emit foreign call
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitReturn(JavaKind, Value)->void::: hot spot generator emit return
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitTailcall(Value[], Value)->void::: hot spot generator emit tailcall
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitUnwind(Value)->void::: hot spot generator emit unwind
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitDeoptimize(Value, Value, LIRFrameState)->void::: hot spot generator emit deoptimize
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)->void::: hot spot generator emit deoptimize caller
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitLogicCompareAndSwap(LIRKind, Value, Value, Value, Value, Value)->Variable::: hot spot generator emit logic compare and swap
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitValueCompareAndSwap(LIRKind, Value, Value, Value)->Variable::: hot spot generator emit value compare and swap
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitPrefetchAllocate(Value)->void::: hot spot generator emit prefetch allocate
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getDeoptimizationRescueSlot()->StackSlot::: hot spot generator get deoptimization rescue slot
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)->void::: hot spot generator emit compare branch
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitCompare(SPARCKind, Value, Value)->boolean::: hot spot generator emit compare
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitCompress(Value, CompressEncoding, boolean)->Value::: hot spot generator emit compress
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitUncompress(Value, CompressEncoding, boolean)->Value::: hot spot generator emit uncompress
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitSaveRegisters(Register[], AllocatableValue[], boolean)->SPARCSaveRegistersOp::: hot spot generator emit save registers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#emitNullCheck(Value, LIRFrameState)->void::: hot spot generator emit null check
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#createBenchmarkCounter(String, String, Value)->LIRInstruction::: hot spot generator create benchmark counter
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#createMultiBenchmarkCounter(String[], String[], Value[])->LIRInstruction::: hot spot generator create multi benchmark counter
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#getSafepointAddressValue()->AllocatableValue::: hot spot generator get safepoint address value
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#createStrategySwitchOp(AllocatableValue, SwitchStrategy, LabelRef[], LabelRef, Variable, Variable)->StrategySwitchOp::: hot spot generator create strategy switch op
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#setDebugInfoBuilder(HotSpotDebugInfoBuilder)->void::: hot spot generator set debug info builder
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#createZapRegisters(Register[], JavaConstant[])->SaveRegistersOp::: hot spot generator create zap registers
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLIRGenerator#createZapArgumentSpace(StackSlot[], JavaConstant[])->LIRInstruction::: hot spot generator create zap argument space
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotLoweringProvider#lower(Node, LoweringTool)->void::: hot spot lowering provider lower
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.LoadHotSpotObjectConstantInline#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: load hot spot object constant inline emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.LoadHotSpotObjectConstantInline#getResult()->AllocatableValue::: load hot spot object constant inline get result
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.LoadHotSpotObjectConstantInline#getConstant()->Constant::: load hot spot object constant inline get constant
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.LoadHotSpotObjectConstantFromTable#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: load hot spot object constant from table emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.CompressPointer#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: compress pointer emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.UncompressPointer#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: uncompress pointer emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMove.UncompressPointer#emitUncompressCode(SPARCMacroAssembler, Register, Register, Register, int, boolean)->void::: uncompress pointer emit uncompress code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMoveFactory#canInlineConstant(Constant)->boolean::: hot spot move factory can inline constant
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotMoveFactory#createLoad(AllocatableValue, Constant)->LIRInstruction::: hot spot move factory create load
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#createDebugInfoBuilder(StructuredGraph, NodeValueMap)->DebugInfoBuilder::: hot spot node builder create debug info builder
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#visitSafepointNode(SafepointNode)->void::: hot spot node builder visit safepoint node
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitDirectCall(DirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: hot spot node builder emit direct call
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitIndirectCall(IndirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: hot spot node builder emit indirect call
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)->void::: hot spot node builder emit patch return address
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitJumpToExceptionHandler(ValueNode)->void::: hot spot node builder emit jump to exception handler
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)->void::: hot spot node builder emit jump to exception handler in caller
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#emitPrologue(StructuredGraph)->void::: hot spot node builder emit prologue
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#visitFullInfopointNode(FullInfopointNode)->void::: hot spot node builder visit full infopoint node
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotNodeLIRBuilder#visitBreakpointNode(BreakpointNode)->void::: hot spot node builder visit breakpoint node
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotPatchReturnAddressOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot patch return address op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotPushInterpreterFrameOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot push interpreter frame op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotPushInterpreterFrameOp#leavesRegisterWindow()->boolean::: hot spot push interpreter frame op leaves register window
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotRegisterAllocationConfig#initAllocatable(RegisterArray)->RegisterArray::: hot spot register allocation config init allocatable
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotReturnOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot return op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotSafepointOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot safepoint op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotSafepointOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler, GraalHotSpotVMConfig, boolean, LIRFrameState, Register, Value)->void::: hot spot safepoint op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotSafepointOp#getSafepointAddressValue(SPARCHotSpotLIRGenerator)->AllocatableValue::: hot spot safepoint op get safepoint address value
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotSafepointOp#emitPrologue(SPARCHotSpotNodeLIRBuilder, SPARCHotSpotLIRGenerator)->void::: hot spot safepoint op emit prologue
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotSafepointOp.SPARCLoadSafepointPollAddress#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: load safepoint poll address emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotStrategySwitchOp.HotSpotSwitchClosure#conditionalJump(int, Condition, Label)->void::: hot spot switch closure conditional jump
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotStrategySwitchOp#estimateEmbeddedSize(Constant)->int::: hot spot strategy switch op estimate embedded size
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotStrategySwitchOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot strategy switch op emit code
org.graalvm.compiler.hotspot.sparc.SPARCHotSpotUnwindOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: hot spot unwind op emit code
org.graalvm.compiler.hotspot.sparc.SPARCIndirectCallOp#emitCode(CompilationResultBuilder, SPARCMacroAssembler)->void::: indirect call op emit code
org.graalvm.compiler.hotspot.sparc.SPARCIndirectCallOp#verify()->void::: indirect call op verify

DOMImplementationLS#createLSParser(short, String):::Create a new LSParser:::
DOMImplementationLS#createLSSerializer()::: Create a new LSSerializer object.:::
DOMImplementationLS#createLSInput()::: Create a new empty input source object where LSInput.characterStream, LSInput.byteStream , LSInput.stringData LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false.:::
DOMImplementationLS#createLSOutput()::: Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, LSOutput.encoding are null.:::
LSInput#getCharacterStream()::: An attribute of a language and binding dependent type that represents a stream of 16-bit units:::
LSInput#setCharacterStream(java.io.Reader)::: An attribute of a language and binding dependent type that represents a stream of 16-bit units:::
LSInput#getByteStream()::: An attribute of a language and binding dependent type that represents a stream of bytes:::
LSInput#setByteStream(java.io.InputStream)::: An attribute of a language and binding dependent type that represents a stream of bytes:::
LSInput#getStringData()::: String data to parse:::
LSInput#setStringData(String)::: String data to parse:::
LSInput#getSystemId()::: The system identifier, a URI reference [IETF RFC 2396], for this input source:::
LSInput#setSystemId(String)::: The system identifier, a URI reference [IETF RFC 2396], for this input source:::
LSInput#getPublicId()::: The public identifier for this input source:::
LSInput#setPublicId(String)::: The public identifier for this input source:::
LSInput#getBaseURI()::: The base URI to be used (see section 5.1.4 in [IETF RFC 2396]) for resolving a relative systemId to an absolute URI:::
LSInput#setBaseURI(String)::: The base URI to be used (see section 5.1.4 in [IETF RFC 2396]) for resolving a relative systemId to an absolute URI:::
LSInput#getEncoding()::: The character encoding, if known:::
LSInput#setEncoding(String)::: The character encoding, if known:::
LSInput#getCertifiedText()::: If set to true, assume that the input is certified (see section 2.13 in [XML 1.1]) when parsing [XML 1.1].:::
LSInput#setCertifiedText(boolean)::: If set to true, assume that the input is certified (see section 2.13 in [XML 1.1]) when parsing [XML 1.1].:::
LSLoadEvent#getNewDocument():::The document that finished loading.:::
LSLoadEvent#getInput():::The input source that was parsed.:::
LSOutput#getCharacterStream()::: An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.:::
LSOutput#setCharacterStream(java.io.Writer)::: An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.:::
LSOutput#getByteStream()::: An attribute of a language and binding dependent type that represents a writable stream of bytes.:::
LSOutput#setByteStream(java.io.OutputStream)::: An attribute of a language and binding dependent type that represents a writable stream of bytes.:::
LSOutput#getSystemId()::: The system identifier, a URI reference [IETF RFC 2396], for this output destination:::
LSOutput#setSystemId(String)::: The system identifier, a URI reference [IETF RFC 2396], for this output destination:::
LSOutput#getEncoding()::: The character encoding to use for the output:::
LSOutput#setEncoding(String)::: The character encoding to use for the output:::
LSParser#getDomConfig()::: The DOMConfiguration object used when parsing an input source:::
LSParser#getFilter()::: When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure:::
LSParser#setFilter(LSParserFilter)::: When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure:::
LSParser#getAsync()::: true if the LSParser is asynchronous, false if it is synchronous.:::
LSParser#getBusy()::: true if the LSParser is currently busy loading a document, otherwise false.:::
LSParser#parse(LSInput):::Parse an XML document from a resource identified by a LSInput.:::
LSParser#parseURI(String)::: Parse an XML document from a location identified by a URI reference [IETF RFC 2396]:::
LSParser#parseWithContext(LSInput, Node, short)::: Parse an XML fragment from a resource identified by a LSInput and insert the content into an existing document at the position specified with the context and action arguments:::
LSParser#abort()::: Abort the loading of the document that is currently being loaded by the LSParser:::
LSParserFilter#startElement(Element)::: The parser will call this method after each Element start tag has been scanned, but before the remainder of the Element is processed:::
LSParserFilter#acceptNode(Node):::This method will be called by the parser at the completion of the parsing of each node:::
LSParserFilter#getWhatToShow()::: Tells the LSParser what types of nodes to show to the method LSParserFilter.acceptNode:::
LSProgressEvent#getInput():::The input source that is being parsed.:::
LSProgressEvent#getPosition():::The current position in the input source, including all external entities and other resources that have been read.:::
LSProgressEvent#getTotalSize():::The total size of the document including all external resources, this number might change as a document is being parsed if references to more external resources are seen:::
LSResourceResolver#resolveResource(String, String, String, String, String)::: Allow the application to resolve external resources:::
LSSerializer#getDomConfig()::: The DOMConfiguration object used by the LSSerializer when serializing a DOM node:::
LSSerializer#getNewLine()::: The end-of-line sequence of characters to be used in the XML being written out:::
LSSerializer#setNewLine(String)::: The end-of-line sequence of characters to be used in the XML being written out:::
LSSerializer#getFilter()::: When the application provides a filter, the serializer will call out to the filter before serializing each Node:::
LSSerializer#setFilter(LSSerializerFilter)::: When the application provides a filter, the serializer will call out to the filter before serializing each Node:::
LSSerializer#write(Node, LSOutput)::: Serialize the specified node as described above in the general description of the LSSerializer interface:::
LSSerializer#writeToURI(Node, String)::: A convenience method that acts as if LSSerializer.write was called with a LSOutput with no encoding specified and LSOutput.systemId set to the uri argument.:::
LSSerializer#writeToString(Node)::: Serialize the specified node as described above in the general description of the LSSerializer interface:::
LSSerializerFilter#getWhatToShow()::: Tells the LSSerializer what types of nodes to show to the filter:::

sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#write()->void::: abstract heap graph writer write
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeJavaThreads()->void::: abstract heap graph writer write java threads
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeJavaThread(JavaThread, int)->void::: abstract heap graph writer write java thread
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeGlobalJNIHandles()->void::: abstract heap graph writer write global handles
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeGlobalJNIHandle(Address)->void::: abstract heap graph writer write global handle
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeHeapHeader()->void::: abstract heap graph writer write heap header
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeInternalObject(Oop)->void::: abstract heap graph writer write internal object
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writePrimitiveArray(TypeArray)->void::: abstract heap graph writer write primitive array
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObjectArray(ObjArray)->void::: abstract heap graph writer write object array
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeInstance(Instance)->void::: abstract heap graph writer write instance
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeString(Instance)->void::: abstract heap graph writer write string
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeClass(Instance)->void::: abstract heap graph writer write class
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeThread(Instance)->void::: abstract heap graph writer write thread
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObject(Oop)->void::: abstract heap graph writer write object
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObjectHeader(Oop)->void::: abstract heap graph writer write object header
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObjectFields(Oop)->void::: abstract heap graph writer write object fields
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObjectFields(InstanceKlass)->void::: abstract heap graph writer write object fields
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeReferenceField(Oop, OopField)->void::: abstract heap graph writer write reference field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeByteField(Oop, ByteField)->void::: abstract heap graph writer write byte field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeCharField(Oop, CharField)->void::: abstract heap graph writer write char field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeBooleanField(Oop, BooleanField)->void::: abstract heap graph writer write boolean field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeShortField(Oop, ShortField)->void::: abstract heap graph writer write short field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeIntField(Oop, IntField)->void::: abstract heap graph writer write int field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeLongField(Oop, LongField)->void::: abstract heap graph writer write long field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeFloatField(Oop, FloatField)->void::: abstract heap graph writer write float field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeDoubleField(Oop, DoubleField)->void::: abstract heap graph writer write double field
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeObjectFooter(Oop)->void::: abstract heap graph writer write object footer
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeHeapFooter()->void::: abstract heap graph writer write heap footer
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeHeapRecordPrologue()->void::: abstract heap graph writer write heap record prologue
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#writeHeapRecordEpilogue()->void::: abstract heap graph writer write heap record epilogue
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#handleRuntimeException(RuntimeException)->void::: abstract heap graph writer handle runtime exception
sun.jvm.hotspot.utilities.AbstractHeapGraphWriter#isJavaVisible(Oop)->boolean::: abstract heap graph writer is java visible
sun.jvm.hotspot.utilities.AddressOps#lessThan(Address, Address)->boolean:::Returns true if a1 is less than a2
sun.jvm.hotspot.utilities.AddressOps#lessThanOrEqual(Address, Address)->boolean:::Returns true if a1 is less than or equal to a2
sun.jvm.hotspot.utilities.AddressOps#greaterThan(Address, Address)->boolean:::Returns true if a1 is greater than a2
sun.jvm.hotspot.utilities.AddressOps#greaterThanOrEqual(Address, Address)->boolean:::Returns true if a1 is greater than or equal to a2
sun.jvm.hotspot.utilities.AddressOps#equal(Address, Address)->boolean:::Returns true if a1 is equal to a2
sun.jvm.hotspot.utilities.AddressOps#lt(Address, Address)->boolean:::Shorthand for #lessThan
sun.jvm.hotspot.utilities.AddressOps#lte(Address, Address)->boolean:::Shorthand for #lessThanOrEqual
sun.jvm.hotspot.utilities.AddressOps#gt(Address, Address)->boolean:::Shorthand for #greaterThan
sun.jvm.hotspot.utilities.AddressOps#gte(Address, Address)->boolean:::Shorthand for #greaterThanOrEqual
sun.jvm.hotspot.utilities.AddressOps#max(Address, Address)->Address:::Returns maximum of the two addresses
sun.jvm.hotspot.utilities.AddressOps#min(Address, Address)->Address:::Returns minimum of the two addresses
sun.jvm.hotspot.utilities.AltPlatformInfo#knownCPU(String)->boolean::: alt platform info known u
sun.jvm.hotspot.utilities.AltPlatformInfo#getCPU(String)->String::: alt platform info get u
sun.jvm.hotspot.utilities.Assert#that(boolean, String)->void::: assert that
sun.jvm.hotspot.utilities.BasicHashtable#tableSize()->int::: basic hashtable table size
sun.jvm.hotspot.utilities.BasicHashtable#bucket(int)->BasicHashtableEntry::: basic hashtable bucket
sun.jvm.hotspot.utilities.BasicHashtable#getHashtableEntryClass()->Class::: basic hashtable get hashtable entry class
sun.jvm.hotspot.utilities.BasicHashtableEntry#hash()->long::: basic hashtable entry hash
sun.jvm.hotspot.utilities.BasicHashtableEntry#isShared()->boolean::: basic hashtable entry is shared
sun.jvm.hotspot.utilities.BasicHashtableEntry#next()->BasicHashtableEntry::: basic hashtable entry next
sun.jvm.hotspot.utilities.BitMap#size()->int::: bit map size
sun.jvm.hotspot.utilities.BitMap#at(int)->boolean::: bit map at
sun.jvm.hotspot.utilities.BitMap#atPut(int, boolean)->void::: bit map at put
sun.jvm.hotspot.utilities.BitMap#set_size(int)->void::: bit map set_size
sun.jvm.hotspot.utilities.BitMap#set_map(Address)->void::: bit map set_map
sun.jvm.hotspot.utilities.BitMap#clear()->void::: bit map clear
sun.jvm.hotspot.utilities.BitMap#iterate(BitMapClosure)->void::: bit map iterate
sun.jvm.hotspot.utilities.BitMap#setUnion(BitMap)->boolean:::Sets this bitmap to the logical union of it and the       argument
sun.jvm.hotspot.utilities.BitMap#setIntersection(BitMap)->void:::Sets this bitmap to the logical intersection of it and the       argument
sun.jvm.hotspot.utilities.BitMap#setFrom(BitMap)->void:::Sets this bitmap to the contents of the argument
sun.jvm.hotspot.utilities.BitMap#setDifference(BitMap)->boolean:::Sets this bitmap to the logical difference between it and the       argument; that is, any bits that are set in the argument are       cleared in this bitmap
sun.jvm.hotspot.utilities.BitMap#isSame(BitMap)->boolean:::Both bitmaps must be the same size.
sun.jvm.hotspot.utilities.BitMap#getNextOneOffset(int, int)->int::: bit map get next one offset
sun.jvm.hotspot.utilities.BitMapClosure#doBit(int)->void:::Called when specified bit in map is set
sun.jvm.hotspot.utilities.Bits#setBits(int, int)->int::: bits set bits
sun.jvm.hotspot.utilities.Bits#clearBits(int, int)->int::: bits clear bits
sun.jvm.hotspot.utilities.Bits#nthBit(int)->int::: bits nth bit
sun.jvm.hotspot.utilities.Bits#setNthBit(int, int)->int::: bits set nth bit
sun.jvm.hotspot.utilities.Bits#clearNthBit(int, int)->int::: bits clear nth bit
sun.jvm.hotspot.utilities.Bits#isSetNthBit(int, int)->boolean::: bits is set nth bit
sun.jvm.hotspot.utilities.Bits#rightNBits(int)->int::: bits right bits
sun.jvm.hotspot.utilities.Bits#maskBits(int, int)->int::: bits mask bits
sun.jvm.hotspot.utilities.Bits#maskBitsLong(long, long)->long::: bits mask bits long
sun.jvm.hotspot.utilities.Bits#roundTo(int, int)->int:::Returns integer round-up to the nearest multiple of s (s must be       a power of two)
sun.jvm.hotspot.utilities.CompactHashTable#probe(byte[], long)->Symbol::: compact hash table probe
sun.jvm.hotspot.utilities.CompactHashTable.SymbolVisitor#visit(Symbol)->void::: symbol visitor visit
sun.jvm.hotspot.utilities.CompactHashTable#symbolsDo(SymbolVisitor)->void::: compact hash table symbols do
sun.jvm.hotspot.utilities.ConstantTag#value()->int::: constant tag value
sun.jvm.hotspot.utilities.ConstantTag#isKlass()->boolean::: constant tag is klass
sun.jvm.hotspot.utilities.ConstantTag#isField()->boolean::: constant tag is field
sun.jvm.hotspot.utilities.ConstantTag#isMethod()->boolean::: constant tag is method
sun.jvm.hotspot.utilities.ConstantTag#isInterfaceMethod()->boolean::: constant tag is interface method
sun.jvm.hotspot.utilities.ConstantTag#isString()->boolean::: constant tag is string
sun.jvm.hotspot.utilities.ConstantTag#isInt()->boolean::: constant tag is int
sun.jvm.hotspot.utilities.ConstantTag#isFloat()->boolean::: constant tag is float
sun.jvm.hotspot.utilities.ConstantTag#isLong()->boolean::: constant tag is long
sun.jvm.hotspot.utilities.ConstantTag#isDouble()->boolean::: constant tag is double
sun.jvm.hotspot.utilities.ConstantTag#isNameAndType()->boolean::: constant tag is name and type
sun.jvm.hotspot.utilities.ConstantTag#isUtf8()->boolean::: constant tag is utf8
sun.jvm.hotspot.utilities.ConstantTag#isMethodHandle()->boolean::: constant tag is method handle
sun.jvm.hotspot.utilities.ConstantTag#isMethodType()->boolean::: constant tag is method type
sun.jvm.hotspot.utilities.ConstantTag#isDynamicConstant()->boolean::: constant tag is dynamic constant
sun.jvm.hotspot.utilities.ConstantTag#isInvokeDynamic()->boolean::: constant tag is invoke dynamic
sun.jvm.hotspot.utilities.ConstantTag#isInvalid()->boolean::: constant tag is invalid
sun.jvm.hotspot.utilities.ConstantTag#isUnresolvedKlass()->boolean::: constant tag is unresolved klass
sun.jvm.hotspot.utilities.ConstantTag#isUnresolveKlassInError()->boolean::: constant tag is unresolve klass in error
sun.jvm.hotspot.utilities.ConstantTag#isKlassIndex()->boolean::: constant tag is klass index
sun.jvm.hotspot.utilities.ConstantTag#isStringIndex()->boolean::: constant tag is string index
sun.jvm.hotspot.utilities.ConstantTag#isKlassReference()->boolean::: constant tag is klass reference
sun.jvm.hotspot.utilities.ConstantTag#isFieldOrMethod()->boolean::: constant tag is field or method
sun.jvm.hotspot.utilities.ConstantTag#isSymbol()->boolean::: constant tag is symbol
sun.jvm.hotspot.utilities.ConstantTag#basicType()->BasicType::: constant tag basic type
sun.jvm.hotspot.utilities.ConstantTag#toString()->String::: constant tag to string
sun.jvm.hotspot.utilities.ConstIterator#hasNext()->boolean::: const iterator has next
sun.jvm.hotspot.utilities.ConstIterator#next()->Object::: const iterator next
sun.jvm.hotspot.utilities.ConstIterator#remove()->void::: const iterator remove
sun.jvm.hotspot.utilities.CPPExpressions.CastExpr#getType()->String::: cast expr get type
sun.jvm.hotspot.utilities.CPPExpressions.CastExpr#getAddress()->String::: cast expr get address
sun.jvm.hotspot.utilities.CPPExpressions.StaticFieldExpr#getContainingType()->String::: static field expr get containing type
sun.jvm.hotspot.utilities.CPPExpressions.StaticFieldExpr#getFieldName()->String::: static field expr get field name
sun.jvm.hotspot.utilities.CPPExpressions#parseCast(String)->CastExpr:::Attempts to parse the given string into a CastExpr
sun.jvm.hotspot.utilities.CPPExpressions#parseStaticField(String)->StaticFieldExpr:::Attempts to parse the given string into a       StaticFieldExpr
sun.jvm.hotspot.utilities.CStringUtilities#getStringLength(Address)->int:::Return the length of a null-terminated ASCII string in the       remote process
sun.jvm.hotspot.utilities.CStringUtilities#getString(Address)->String::: string utilities get string
sun.jvm.hotspot.utilities.CStringUtilities#getString(Address, Charset)->String:::Fetch a null-terminated ASCII string from the remote process
sun.jvm.hotspot.utilities.FindObjectByType#getResults()->List:::Returns a List of Oops
sun.jvm.hotspot.utilities.FindObjectByType#prologue(long)->void::: find object by type prologue
sun.jvm.hotspot.utilities.FindObjectByType#epilogue()->void::: find object by type epilogue
sun.jvm.hotspot.utilities.FindObjectByType#doObj(Oop)->boolean::: find object by type do obj
sun.jvm.hotspot.utilities.GenericArray#length()->int::: generic array length
sun.jvm.hotspot.utilities.GenericArray#getLength()->int::: generic array get length
sun.jvm.hotspot.utilities.GenericArray#getIntegerAt(int)->long:::Gets the element at the given index.
sun.jvm.hotspot.utilities.GenericArray#getAddressAt(int)->Address::: generic array get address at
sun.jvm.hotspot.utilities.GenericArray#getSize()->long::: generic array get size
sun.jvm.hotspot.utilities.GenericArray#getElemType()->Type:::The element type of this array.
sun.jvm.hotspot.utilities.GenericGrowableArray#max()->int::: generic growable array max
sun.jvm.hotspot.utilities.GenericGrowableArray#length()->int::: generic growable array length
sun.jvm.hotspot.utilities.GrowableArray#create(Address, InstanceConstructor)->GrowableArray::: growable array create
sun.jvm.hotspot.utilities.GrowableArray#at(int)->T::: growable array at
sun.jvm.hotspot.utilities.GrowableArray#getData()->Address::: growable array get data
sun.jvm.hotspot.utilities.Hashtable#getHashtableEntryClass()->Class::: hashtable get hashtable entry class
sun.jvm.hotspot.utilities.Hashtable#computeHash(Symbol)->long::: hashtable compute hash
sun.jvm.hotspot.utilities.Hashtable#hashToIndex(long)->int::: hashtable hash to index
sun.jvm.hotspot.utilities.Hashtable#hashSymbol(byte[])->long::: hashtable hash symbol
sun.jvm.hotspot.utilities.HashtableBucket#getEntry(Class)->BasicHashtableEntry::: hashtable bucket get entry
sun.jvm.hotspot.utilities.HashtableBucket#entry()->BasicHashtableEntry::: hashtable bucket entry
sun.jvm.hotspot.utilities.HashtableEntry#literalValue()->Address::: hashtable entry literal value
sun.jvm.hotspot.utilities.HeapGraphWriter#write(String)->void:::writes the heap graph in the given file
sun.jvm.hotspot.utilities.HeapGXLWriter#write(String)->void::: heap writer write
sun.jvm.hotspot.utilities.HeapGXLWriter#writeHeapHeader()->void::: heap writer write heap header
sun.jvm.hotspot.utilities.HeapGXLWriter#writeObjectHeader(Oop)->void::: heap writer write object header
sun.jvm.hotspot.utilities.HeapGXLWriter#writeObjectFooter(Oop)->void::: heap writer write object footer
sun.jvm.hotspot.utilities.HeapGXLWriter#writeObjectArray(ObjArray)->void::: heap writer write object array
sun.jvm.hotspot.utilities.HeapGXLWriter#writePrimitiveArray(TypeArray)->void::: heap writer write primitive array
sun.jvm.hotspot.utilities.HeapGXLWriter#writeClass(Instance)->void::: heap writer write class
sun.jvm.hotspot.utilities.HeapGXLWriter#writeReferenceField(Oop, OopField)->void::: heap writer write reference field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeByteField(Oop, ByteField)->void::: heap writer write byte field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeCharField(Oop, CharField)->void::: heap writer write char field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeBooleanField(Oop, BooleanField)->void::: heap writer write boolean field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeShortField(Oop, ShortField)->void::: heap writer write short field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeIntField(Oop, IntField)->void::: heap writer write int field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeLongField(Oop, LongField)->void::: heap writer write long field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeFloatField(Oop, FloatField)->void::: heap writer write float field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeDoubleField(Oop, DoubleField)->void::: heap writer write double field
sun.jvm.hotspot.utilities.HeapGXLWriter#writeHeapFooter()->void::: heap writer write heap footer
sun.jvm.hotspot.utilities.HeapHprofBinWriter#write(String)->void::: heap hprof bin writer write
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeHeapRecordPrologue()->void::: heap hprof bin writer write heap record prologue
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeHeapRecordEpilogue()->void::: heap hprof bin writer write heap record epilogue
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeClass(Instance)->void::: heap hprof bin writer write class
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeJavaThread(JavaThread, int)->void::: heap hprof bin writer write java thread
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeLocalJNIHandles(JavaThread, int)->void::: heap hprof bin writer write local handles
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeGlobalJNIHandle(Address)->void::: heap hprof bin writer write global handle
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeObjectArray(ObjArray)->void::: heap hprof bin writer write object array
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writePrimitiveArray(TypeArray)->void::: heap hprof bin writer write primitive array
sun.jvm.hotspot.utilities.HeapHprofBinWriter#writeInstance(Instance)->void::: heap hprof bin writer write instance
sun.jvm.hotspot.utilities.HeapHprofBinWriter#signatureToHprofKind(char)->int::: heap hprof bin writer signature to hprof kind
sun.jvm.hotspot.utilities.HeapProgressThunk#heapIterationFractionUpdate(double)->void:::Will be called periodically with a number between 0 and 1.
sun.jvm.hotspot.utilities.HeapProgressThunk#heapIterationComplete()->void:::Will be called after the iteration is complete.
sun.jvm.hotspot.utilities.IntArray#at(int)->int::: int array at
sun.jvm.hotspot.utilities.IntArray#getElemType()->Type::: int array get elem type
sun.jvm.hotspot.utilities.IntegerEnum#getValue()->int::: integer enum get value
sun.jvm.hotspot.utilities.Interval#getLowEndpoint()->Object::: interval get low endpoint
sun.jvm.hotspot.utilities.Interval#getHighEndpoint()->Object::: interval get high endpoint
sun.jvm.hotspot.utilities.Interval#overlaps(Interval, Comparator)->boolean:::This takes the Interval to compare against as well as a       Comparator which will be applied to the low and high endpoints       of the given intervals.
sun.jvm.hotspot.utilities.Interval#overlaps(Object, Object, Comparator)->boolean:::Routine which can be used instead of the one taking an interval,       for the situation where the endpoints are being retrieved from       different data structures
sun.jvm.hotspot.utilities.Interval#toString()->String::: interval to string
sun.jvm.hotspot.utilities.IntervalNode#copyFrom(RBNode)->void::: interval node copy from
sun.jvm.hotspot.utilities.IntervalNode#getInterval()->Interval::: interval node get interval
sun.jvm.hotspot.utilities.IntervalNode#getMinEndpoint()->Object::: interval node get min endpoint
sun.jvm.hotspot.utilities.IntervalNode#getMaxEndpoint()->Object::: interval node get max endpoint
sun.jvm.hotspot.utilities.IntervalNode#update()->boolean::: interval node update
sun.jvm.hotspot.utilities.IntervalNode#computeMinEndpoint()->Object::: interval node compute min endpoint
sun.jvm.hotspot.utilities.IntervalNode#computeMaxEndpoint()->Object::: interval node compute max endpoint
sun.jvm.hotspot.utilities.IntervalNode#toString()->String::: interval node to string
sun.jvm.hotspot.utilities.IntervalTree#insert(Interval, Object)->void::: interval tree insert
sun.jvm.hotspot.utilities.IntervalTree#findAllNodesIntersecting(Interval)->List:::Returns a List&lt;IntervalNode&gt; indicating which nodes'       intervals were intersected by the given query interval
sun.jvm.hotspot.utilities.IntervalTree#print()->void::: interval tree print
sun.jvm.hotspot.utilities.IntervalTree#printOn(PrintStream)->void::: interval tree print on
sun.jvm.hotspot.utilities.IntervalTree#getNodeValue(RBNode)->Object::: interval tree get node value
sun.jvm.hotspot.utilities.IntervalTree#verify()->void::: interval tree verify
sun.jvm.hotspot.utilities.IntervalTree.IntervalComparator#compare(Object, Object)->int::: interval comparator compare
sun.jvm.hotspot.utilities.KlassArray#getAt(int)->Klass::: klass array get at
sun.jvm.hotspot.utilities.KlassArray#getElemType()->Type::: klass array get elem type
sun.jvm.hotspot.utilities.LivenessAnalysis#computeAllLivenessPaths(Oop)->LivenessPathList::: liveness analysis compute all liveness paths
sun.jvm.hotspot.utilities.LivenessPath#size()->int:::Number of elements in the path
sun.jvm.hotspot.utilities.LivenessPath#get(int)->LivenessPathElement:::Fetch the element at the given index; 0-based
sun.jvm.hotspot.utilities.LivenessPath#printOn(PrintStream)->void::: liveness path print on
sun.jvm.hotspot.utilities.LivenessPath#isComplete()->boolean:::Indicates whether this path is "complete", i.e., whether the       last element is a root
sun.jvm.hotspot.utilities.LivenessPath#peek()->LivenessPathElement::: liveness path peek
sun.jvm.hotspot.utilities.LivenessPath#push(LivenessPathElement)->void::: liveness path push
sun.jvm.hotspot.utilities.LivenessPath#pop()->void::: liveness path pop
sun.jvm.hotspot.utilities.LivenessPath#copy()->LivenessPath::: liveness path copy
sun.jvm.hotspot.utilities.LivenessPathElement#isRoot()->boolean::: liveness path element is root
sun.jvm.hotspot.utilities.LivenessPathElement#isTerminal()->boolean::: liveness path element is terminal
sun.jvm.hotspot.utilities.LivenessPathElement#getObj()->Oop::: liveness path element get obj
sun.jvm.hotspot.utilities.LivenessPathElement#getField()->FieldIdentifier::: liveness path element get field
sun.jvm.hotspot.utilities.LivenessPathList#size()->int::: liveness path list size
sun.jvm.hotspot.utilities.LivenessPathList#get(int)->LivenessPath::: liveness path list get
sun.jvm.hotspot.utilities.LivenessPathList#add(LivenessPath)->void::: liveness path list add
sun.jvm.hotspot.utilities.LivenessPathList#remove(LivenessPath)->void::: liveness path list remove
sun.jvm.hotspot.utilities.MarkBits#clear()->void::: mark bits clear
sun.jvm.hotspot.utilities.MarkBits#mark(Oop)->boolean:::Returns true if a mark was newly placed for the given Oop, or       false if the Oop was already marked
sun.jvm.hotspot.utilities.MarkBits#clear(Oop)->void:::Forces clearing of a given mark bit.
sun.jvm.hotspot.utilities.MessageQueue#readMessage()->Object:::This blocks until a message is available
sun.jvm.hotspot.utilities.MessageQueue#readMessageWithTimeout(long)->Object:::This blocks for up to millis milliseconds until a       message is available
sun.jvm.hotspot.utilities.MessageQueue#writeMessage(Object)->void:::Write a message to the queue
sun.jvm.hotspot.utilities.MessageQueueBackend#getFirstQueue()->MessageQueue:::Get one of the two symmetric sides of this message queue.
sun.jvm.hotspot.utilities.MessageQueueBackend#getSecondQueue()->MessageQueue:::Get second of the two symmetric sides of this message queue.
sun.jvm.hotspot.utilities.MethodArray#at(int)->Method::: method array at
sun.jvm.hotspot.utilities.MethodArray#getElemType()->Type::: method array get elem type
sun.jvm.hotspot.utilities.ObjectReader#debugPrintln(String)->void::: object reader debug println
sun.jvm.hotspot.utilities.ObjectReader#debugPrintStackTrace(Exception)->void::: object reader debug print stack trace
sun.jvm.hotspot.utilities.ObjectReader#readObject(Oop)->Object::: object reader read object
sun.jvm.hotspot.utilities.ObjectReader#getDefaultPrimitiveValue(Class)->Object::: object reader get default primitive value
sun.jvm.hotspot.utilities.ObjectReader#getVMSymbol(String)->Symbol::: object reader get symbol
sun.jvm.hotspot.utilities.ObjectReader#javaLangString()->Symbol::: object reader java lang string
sun.jvm.hotspot.utilities.ObjectReader#javaUtilHashtableEntry()->Symbol::: object reader java util hashtable entry
sun.jvm.hotspot.utilities.ObjectReader#javaUtilHashtable()->Symbol::: object reader java util hashtable
sun.jvm.hotspot.utilities.ObjectReader#javaUtilProperties()->Symbol::: object reader java util properties
sun.jvm.hotspot.utilities.ObjectReader#getHashtable(Instance)->Object::: object reader get hashtable
sun.jvm.hotspot.utilities.ObjectReader#readInstance(Instance)->Object::: object reader read instance
sun.jvm.hotspot.utilities.ObjectReader#readPrimitiveArray(TypeArray)->Object::: object reader read primitive array
sun.jvm.hotspot.utilities.ObjectReader#isRobust(OopHandle)->boolean::: object reader is robust
sun.jvm.hotspot.utilities.ObjectReader#readObjectArray(ObjArray)->Object::: object reader read object array
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doOop(OopField, boolean)->void::: field setter do oop
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doByte(ByteField, boolean)->void::: field setter do byte
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doChar(CharField, boolean)->void::: field setter do char
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doBoolean(BooleanField, boolean)->void::: field setter do boolean
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doShort(ShortField, boolean)->void::: field setter do short
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doInt(IntField, boolean)->void::: field setter do int
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doLong(LongField, boolean)->void::: field setter do long
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doFloat(FloatField, boolean)->void::: field setter do float
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doDouble(DoubleField, boolean)->void::: field setter do double
sun.jvm.hotspot.utilities.ObjectReader.FieldSetter#doCInt(CIntField, boolean)->void::: field setter do int
sun.jvm.hotspot.utilities.ObjectReader#readClass(InstanceKlass)->Class::: object reader read class
sun.jvm.hotspot.utilities.ObjectReader#readMethodOrConstructor(sun.jvm.hotspot.oops.Method)->Object::: object reader read method or constructor
sun.jvm.hotspot.utilities.ObjectReader#readMethod(sun.jvm.hotspot.oops.Method)->java.lang.reflect.Method::: object reader read method
sun.jvm.hotspot.utilities.ObjectReader#readConstructor(sun.jvm.hotspot.oops.Method)->java.lang.reflect.Constructor::: object reader read constructor
sun.jvm.hotspot.utilities.ObjectReader#readField(sun.jvm.hotspot.oops.Field)->java.lang.reflect.Field::: object reader read field
sun.jvm.hotspot.utilities.ObjectReader#putIntoObjTable(Oop, Object)->void::: object reader put into obj table
sun.jvm.hotspot.utilities.ObjectReader#getFromObjTable(Oop)->Object::: object reader get from obj table
sun.jvm.hotspot.utilities.ObjectReader#putIntoObjTable(Metadata, Object)->void::: object reader put into obj table
sun.jvm.hotspot.utilities.ObjectReader#getFromObjTable(Metadata)->Object::: object reader get from obj table
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doBool()->void::: signature parser do bool
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doChar()->void::: signature parser do char
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doFloat()->void::: signature parser do float
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doDouble()->void::: signature parser do double
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doByte()->void::: signature parser do byte
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doShort()->void::: signature parser do short
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doInt()->void::: signature parser do int
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doLong()->void::: signature parser do long
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doVoid()->void::: signature parser do void
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doObject(int, int)->void::: signature parser do object
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#doArray(int, int)->void::: signature parser do array
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#getClass(int, int)->Class::: signature parser get class
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#getClassName(int, int)->String::: signature parser get class name
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#arrayInnerBegin(int)->int::: signature parser array inner begin
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#getNumParams()->int::: signature parser get num params
sun.jvm.hotspot.utilities.ObjectReader.SignatureParser#getParamTypes()->Enumeration::: signature parser get param types
sun.jvm.hotspot.utilities.ObjectReader#getParamTypes(Symbol)->Class[]::: object reader get param types
sun.jvm.hotspot.utilities.PlatformInfo#getOS()->String::: platform info get s
sun.jvm.hotspot.utilities.PlatformInfo#knownCPU(String)->boolean::: platform info known u
sun.jvm.hotspot.utilities.PlatformInfo#getCPU()->String::: platform info get u
sun.jvm.hotspot.utilities.PlatformInfo#main(String[])->void::: platform info main
sun.jvm.hotspot.utilities.PointerFinder#find(Address)->PointerLocation::: pointer finder find
sun.jvm.hotspot.utilities.PointerLocation#isInHeap()->boolean::: pointer location is in heap
sun.jvm.hotspot.utilities.PointerLocation#isInNewGen()->boolean::: pointer location is in new gen
sun.jvm.hotspot.utilities.PointerLocation#isInOldGen()->boolean::: pointer location is in old gen
sun.jvm.hotspot.utilities.PointerLocation#inOtherGen()->boolean::: pointer location in other gen
sun.jvm.hotspot.utilities.PointerLocation#getGeneration()->Generation:::Only valid if isInHeap()
sun.jvm.hotspot.utilities.PointerLocation#isInTLAB()->boolean:::This may be true if isInNewGen is also true
sun.jvm.hotspot.utilities.PointerLocation#getTLABThread()->JavaThread:::Only valid if isInTLAB() returns true
sun.jvm.hotspot.utilities.PointerLocation#getTLAB()->ThreadLocalAllocBuffer:::Only valid if isInTLAB() returns true
sun.jvm.hotspot.utilities.PointerLocation#isInInterpreter()->boolean::: pointer location is in interpreter
sun.jvm.hotspot.utilities.PointerLocation#getInterpreterCodelet()->InterpreterCodelet:::For now, only valid if isInInterpreter is true
sun.jvm.hotspot.utilities.PointerLocation#isInCodeCache()->boolean::: pointer location is in code cache
sun.jvm.hotspot.utilities.PointerLocation#getCodeBlob()->CodeBlob:::For now, only valid if isInCodeCache is true
sun.jvm.hotspot.utilities.PointerLocation#isInBlobCode()->boolean::: pointer location is in blob code
sun.jvm.hotspot.utilities.PointerLocation#isInBlobData()->boolean::: pointer location is in blob data
sun.jvm.hotspot.utilities.PointerLocation#isInBlobOops()->boolean::: pointer location is in blob oops
sun.jvm.hotspot.utilities.PointerLocation#isInBlobUnknownLocation()->boolean::: pointer location is in blob unknown location
sun.jvm.hotspot.utilities.PointerLocation#isInStrongGlobalJNIHandles()->boolean::: pointer location is in strong global handles
sun.jvm.hotspot.utilities.PointerLocation#isInWeakGlobalJNIHandles()->boolean::: pointer location is in weak global handles
sun.jvm.hotspot.utilities.PointerLocation#isInLocalJNIHandleBlock()->boolean::: pointer location is in local handle block
sun.jvm.hotspot.utilities.PointerLocation#getJNIHandleBlock()->JNIHandleBlock:::Only valid if isInLocalJNIHandleBlock is true
sun.jvm.hotspot.utilities.PointerLocation#getJNIHandleThread()->sun.jvm.hotspot.runtime.Thread:::Only valid if isInLocalJNIHandleBlock is true
sun.jvm.hotspot.utilities.PointerLocation#isUnknown()->boolean::: pointer location is unknown
sun.jvm.hotspot.utilities.PointerLocation#toString()->String::: pointer location to string
sun.jvm.hotspot.utilities.PointerLocation#print()->void::: pointer location print
sun.jvm.hotspot.utilities.PointerLocation#printOn(PrintStream)->void::: pointer location print on
sun.jvm.hotspot.utilities.ProcImageClassLoader#findClass(String)->Class::: proc image class loader find class
sun.jvm.hotspot.utilities.ProgressiveHeapVisitor#prologue(long)->void::: progressive heap visitor prologue
sun.jvm.hotspot.utilities.ProgressiveHeapVisitor#doObj(Oop)->boolean::: progressive heap visitor do obj
sun.jvm.hotspot.utilities.ProgressiveHeapVisitor#epilogue()->void::: progressive heap visitor epilogue
sun.jvm.hotspot.utilities.RBColor#getName()->String::: color get name
sun.jvm.hotspot.utilities.RBNode#getData()->Object::: node get data
sun.jvm.hotspot.utilities.RBNode#copyFrom(RBNode)->void:::Must copy all user-defined fields from the given node
sun.jvm.hotspot.utilities.RBNode#update()->boolean:::This is called by the base RBTree's insertion and deletion       methods when necessary
sun.jvm.hotspot.utilities.RBNode#getColor()->RBColor::: node get color
sun.jvm.hotspot.utilities.RBNode#setColor(RBColor)->void::: node set color
sun.jvm.hotspot.utilities.RBNode#getParent()->RBNode::: node get parent
sun.jvm.hotspot.utilities.RBNode#setParent(RBNode)->void::: node set parent
sun.jvm.hotspot.utilities.RBNode#getLeft()->RBNode:::Access to left child
sun.jvm.hotspot.utilities.RBNode#setLeft(RBNode)->void::: node set left
sun.jvm.hotspot.utilities.RBNode#getRight()->RBNode:::Access to right child
sun.jvm.hotspot.utilities.RBNode#setRight(RBNode)->void::: node set right
sun.jvm.hotspot.utilities.RBTree#getRoot()->RBNode::: tree get root
sun.jvm.hotspot.utilities.RBTree#insertNode(RBNode)->void::: tree insert node
sun.jvm.hotspot.utilities.RBTree#deleteNode(RBNode)->void:::FIXME: this does not work properly yet for augmented red-black       trees since it doesn't update nodes
sun.jvm.hotspot.utilities.RBTree#print()->void::: tree print
sun.jvm.hotspot.utilities.RBTree#printOn(PrintStream)->void::: tree print on
sun.jvm.hotspot.utilities.RBTree#getNodeValue(RBNode)->Object::: tree get node value
sun.jvm.hotspot.utilities.RBTree#verify()->void:::Verify invariants are preserved
sun.jvm.hotspot.utilities.RBTree#main(String[])->void::: tree main
sun.jvm.hotspot.utilities.ReversePtrs#put(LivenessPathElement, Oop)->void::: reverse ptrs put
sun.jvm.hotspot.utilities.ReversePtrs#get(Oop)->ArrayList:::Returns an ArrayList of the incoming references to this Oop if       it is alive, and null if it is dead according to the       ReversePtrsAnalysis
sun.jvm.hotspot.utilities.ReversePtrsAnalysis#setHeapProgressThunk(HeapProgressThunk)->void:::Sets an optional progress thunk
sun.jvm.hotspot.utilities.ReversePtrsAnalysis#run()->void:::Runs the analysis algorithm
sun.jvm.hotspot.utilities.ReversePtrsAnalysis.RootVisitor#visitAddress(Address)->void::: root visitor visit address
sun.jvm.hotspot.utilities.ReversePtrsAnalysis.RootVisitor#visitCompOopAddress(Address)->void::: root visitor visit comp oop address
sun.jvm.hotspot.utilities.RobustOopDeterminator#oopLooksValid(OopHandle)->boolean::: robust oop determinator oop looks valid
sun.jvm.hotspot.utilities.StreamMonitor.Trigger#matches(String)->boolean::: trigger matches
sun.jvm.hotspot.utilities.StreamMonitor.Trigger#equals(String[])->boolean::: trigger equals
sun.jvm.hotspot.utilities.StreamMonitor#addTrigger(String, int)->boolean:::Adds a "trigger", which the stream watches for and, if seen,       reports the trigger value of via the getTriggers() method
sun.jvm.hotspot.utilities.StreamMonitor#addTrigger(String[], int)->boolean:::Adds a "trigger", which the stream watches for and, if seen,       reports the trigger value of via the getTriggers() method
sun.jvm.hotspot.utilities.StreamMonitor#removeTrigger(String)->boolean:::Removes a previously added trigger
sun.jvm.hotspot.utilities.StreamMonitor#removeTrigger(String[])->boolean:::Removes a previously added trigger
sun.jvm.hotspot.utilities.StreamMonitor#getTriggersSeen()->List:::Returns an List of java.lang.Integer objects indicating the       values of the triggers seen since the last call to       getTriggersSeen
sun.jvm.hotspot.utilities.StreamMonitor#waitFor(String, long)->boolean:::Waits for the specified string to come in for the given period       of time (measured in milliseconds).
sun.jvm.hotspot.utilities.StreamMonitor#startCapture()->void::: stream monitor start capture
sun.jvm.hotspot.utilities.StreamMonitor#stopCapture()->String::: stream monitor stop capture
sun.jvm.hotspot.utilities.StreamMonitor#run()->void::: stream monitor run
sun.jvm.hotspot.utilities.SystemDictionaryHelper#getAllInstanceKlasses()->InstanceKlass[]::: system dictionary helper get all instance klasses
sun.jvm.hotspot.utilities.SystemDictionaryHelper#findInstanceKlasses(String)->InstanceKlass[]::: system dictionary helper find instance klasses
sun.jvm.hotspot.utilities.SystemDictionaryHelper#findInstanceKlass(String)->InstanceKlass::: system dictionary helper find instance klass
sun.jvm.hotspot.utilities.U1Array#at(int)->byte::: u1 array at
sun.jvm.hotspot.utilities.U1Array#getElemType()->Type::: u1 array get elem type
sun.jvm.hotspot.utilities.U2Array#at(int)->short::: u2 array at
sun.jvm.hotspot.utilities.U2Array#getElemType()->Type::: u2 array get elem type
sun.jvm.hotspot.utilities.WorkerThread#invokeLater(Runnable)->void:::Runs the given Runnable in the thread represented by this       WorkerThread object at an unspecified later time.
sun.jvm.hotspot.utilities.WorkerThread#shutdown()->void:::Can be used to dispose of the internal worker thread
sun.jvm.hotspot.utilities.WorkerThread.MainLoop#run()->void::: main loop run

AddressOps#lessThan(Address, Address):::Returns true if a1 is less than a2:::if->return->else->if->return->else->return->a1->lessThan
AddressOps#lessThanOrEqual(Address, Address):::Returns true if a1 is less than or equal to a2:::if->return->else->if->return->else->return->a1->lessThanOrEqual
AddressOps#greaterThan(Address, Address):::Returns true if a1 is greater than a2:::if->return->else->if->return->else->return->a1->greaterThan
AddressOps#greaterThanOrEqual(Address, Address):::Returns true if a1 is greater than or equal to a2:::if->return->else->if->return->else->return->a1->greaterThanOrEqual
AddressOps#equal(Address, Address):::Returns true if a1 is equal to a2:::if->return->if->return->return->a1->equals
AddressOps#lt(Address, Address):::Shorthand for #lessThan:::return->lessThan
AddressOps#lte(Address, Address):::Shorthand for #lessThanOrEqual:::return->lessThanOrEqual
AddressOps#gt(Address, Address):::Shorthand for #greaterThan:::return->greaterThan
AddressOps#gte(Address, Address):::Shorthand for #greaterThanOrEqual:::return->greaterThanOrEqual
AddressOps#max(Address, Address):::Returns maximum of the two addresses:::return->gt
AddressOps#min(Address, Address):::Returns minimum of the two addresses:::return->lt
BitMap#setUnion(BitMap):::Sets this bitmap to the logical union of it and the       argument:::if->Assert->size->other->size->that->changed->for->index->sizeInWords->return
BitMap#setIntersection(BitMap):::Sets this bitmap to the logical intersection of it and the       argument:::if->Assert->size->other->size->that->for->index->sizeInWords
BitMap#setFrom(BitMap):::Sets this bitmap to the contents of the argument:::if->Assert->size->other->size->that->for->index->sizeInWords
BitMap#setDifference(BitMap):::Sets this bitmap to the logical difference between it and the       argument; that is, any bits that are set in the argument are       cleared in this bitmap:::if->Assert->size->other->size->that->changed->for->index->sizeInWords->return
BitMap#isSame(BitMap):::Both bitmaps must be the same size.:::if->Assert->size->other->size->that->for->index->sizeInWords->return
BitMapClosure#doBit(int):::Called when specified bit in map is set:::
Bits#roundTo(int, int):::Returns integer round-up to the nearest multiple of s (s must be       a power of two):::m->return->maskBits
CPPExpressions#parseCast(String):::Attempts to parse the given string into a CastExpr:::if->Pattern->compile->matcher->castPattern->matcher->if->matcher->matches->type->matcher->group->addr->matcher->group->return->new->CastExpr->return
CPPExpressions#parseStaticField(String):::Attempts to parse the given string into a       StaticFieldExpr:::sep->idx->expr->lastIndexOf->if->return->containingType->expr->substring->fieldName->expr->sep->length->expr->length->substring->return->new->StaticFieldExpr
CStringUtilities#getStringLength(Address):::Return the length of a null-terminated ASCII string in the       remote process:::i->while->addr->getCIntegerAt->return
CStringUtilities#getString(Address, Charset):::Fetch a null-terminated ASCII string from the remote process:::if->return->data->new->ArrayList->val->i->do->addr->getCIntegerAt->if->data->new->Byte->add->while->bytes->data->size->new->byteArr->for->data->size->return->new->String
FindObjectByType#getResults():::Returns a List of Oops:::return
GenericArray#getIntegerAt(int):::Gets the element at the given index.:::if->length->throw->length->new->ArrayIndexOutOfBoundsException->elemType->getElemType->if->getElemType->isCIntegerType->throw->new->RuntimeException->data->getAddress->addOffsetTo->elemSize->elemType->getSize->return->data->getCIntegerAt
GenericArray#getElemType():::The element type of this array.:::
HeapGraphWriter#write(String):::writes the heap graph in the given file:::
HeapProgressThunk#heapIterationFractionUpdate(double):::Will be called periodically with a number between 0 and 1.:::
HeapProgressThunk#heapIterationComplete():::Will be called after the iteration is complete.:::
Interval#overlaps(Interval, Comparator):::This takes the Interval to compare against as well as a       Comparator which will be applied to the low and high endpoints       of the given intervals.:::return->arg->getLowEndpoint->arg->getHighEndpoint->overlaps
Interval#overlaps(Object, Object, Comparator):::Routine which can be used instead of the one taking an interval,       for the situation where the endpoints are being retrieved from       different data structures:::if->endpointComparator->compare->return->if->endpointComparator->compare->return->return
IntervalTree#findAllNodesIntersecting(Interval):::Returns a List&lt;IntervalNode&gt; indicating which nodes'       intervals were intersected by the given query interval:::retList->new->ArrayList->getRoot->searchForIntersectingNodesFrom->return
LivenessPath#size():::Number of elements in the path:::return->stack->size
LivenessPath#get(int):::Fetch the element at the given index; 0-based:::return->stack->get
LivenessPath#isComplete():::Indicates whether this path is "complete", i.e., whether the       last element is a root:::if->size->return->return->peek->isRoot
MarkBits#mark(Oop):::Returns true if a mark was newly placed for the given Oop, or       false if the Oop was already marked:::if->println->return->handle->obj->getHandle->idx->handle->minus->VM->getVM->getOopSize->if->bits->size->println->return->intIdx->if->bits->at->return->bits->atPut->return
MarkBits#clear(Oop):::Forces clearing of a given mark bit.:::handle->obj->getHandle->idx->handle->minus->VM->getVM->getOopSize->if->bits->size->println->return->intIdx->bits->atPut
MessageQueue#readMessage():::This blocks until a message is available:::
MessageQueue#readMessageWithTimeout(long):::This blocks for up to millis milliseconds until a       message is available:::
MessageQueue#writeMessage(Object):::Write a message to the queue:::
MessageQueueBackend#getFirstQueue():::Get one of the two symmetric sides of this message queue.:::return
MessageQueueBackend#getSecondQueue():::Get second of the two symmetric sides of this message queue.:::return
PointerLocation#getGeneration():::Only valid if isInHeap():::return
PointerLocation#isInTLAB():::This may be true if isInNewGen is also true:::return
PointerLocation#getTLABThread():::Only valid if isInTLAB() returns true:::return
PointerLocation#getTLAB():::Only valid if isInTLAB() returns true:::return
PointerLocation#getInterpreterCodelet():::For now, only valid if isInInterpreter is true:::return
PointerLocation#getCodeBlob():::For now, only valid if isInCodeCache is true:::return
PointerLocation#getJNIHandleBlock():::Only valid if isInLocalJNIHandleBlock is true:::return
PointerLocation#getJNIHandleThread():::Only valid if isInLocalJNIHandleBlock is true:::return
RBNode#copyFrom(RBNode):::Must copy all user-defined fields from the given node:::
RBNode#update():::This is called by the base RBTree's insertion and deletion       methods when necessary:::return
RBNode#getLeft():::Access to left child:::return
RBNode#getRight():::Access to right child:::return
RBTree#deleteNode(RBNode):::FIXME: this does not work properly yet for augmented red-black       trees since it doesn't update nodes:::y->if->z->getLeft->z->getRight->else->treeSuccessor->x->if->y->getLeft->y->getLeft->else->y->getRight->xParent->if->x->y->getParent->setParent->x->getParent->else->y->getParent->if->y->getParent->else->if->y->getParent->getLeft->y->getParent->setLeft->else->y->getParent->setRight->if->z->copyFrom->if->y->getColor->deleteFixup->if->verify
RBTree#verify():::Verify invariants are preserved:::verifyFromNode
ReversePtrs#get(Oop):::Returns an ArrayList of the incoming references to this Oop if       it is alive, and null if it is dead according to the       ReversePtrsAnalysis:::return->rp->get
ReversePtrsAnalysis#setHeapProgressThunk(HeapProgressThunk):::Sets an optional progress thunk:::
ReversePtrsAnalysis#run():::Runs the analysis algorithm:::if->VM->getVM->getRevPtrs->return->vm->VM->getVM->new->ReversePtrs->vm->setRevPtrs->universe->vm->getUniverse->collHeap->universe->heap->collHeap->used->if->progressThunk->heapIterationFractionUpdate->new->MarkBits->vm->getObjectHeap->for->thread->VM->getVM->getThreads->first->thread->next->handles->VM->getVM->getJNIHandles->handles->globalHandles->new->RootVisitor->doOopStorage->handles->weakGlobalHandles->new->RootVisitor->doOopStorage->cldg->VM->getVM->getClassLoaderDataGraph->cldg->new->ClassLoaderDataGraph.ClassVisitor->classesDo->if->progressThunk->heapIterationComplete
StreamMonitor#addTrigger(String, int):::Adds a "trigger", which the stream watches for and, if seen,       reports the trigger value of via the getTriggers() method:::return->new->StringArr->addTrigger
StreamMonitor#addTrigger(String[], int):::Adds a "trigger", which the stream watches for and, if seen,       reports the trigger value of via the getTriggers() method:::for->iter->triggers->iterator->iter->hasNext->trigger->new->Trigger->return->triggers->add
StreamMonitor#removeTrigger(String):::Removes a previously added trigger:::return->new->StringArr->removeTrigger
StreamMonitor#removeTrigger(String[]):::Removes a previously added trigger:::for->iter->triggers->listIterator->iter->hasNext->return
StreamMonitor#getTriggersSeen():::Returns an List of java.lang.Integer objects indicating the       values of the triggers seen since the last call to       getTriggersSeen:::tmpList->new->LinkedList->return
StreamMonitor#waitFor(String, long):::Waits for the specified string to come in for the given period       of time (measured in milliseconds).:::try->wait->catch->finally->return
WorkerThread#invokeLater(Runnable):::Runs the given Runnable in the thread represented by this       WorkerThread object at an unspecified later time.:::mq->writeMessage
WorkerThread#shutdown():::Can be used to dispose of the internal worker thread:::mq->new->Runnable->writeMessage

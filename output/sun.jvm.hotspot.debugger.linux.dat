sun.jvm.hotspot.debugger.linux.LinuxAddress#equals(Object)->boolean::: linux address equals
sun.jvm.hotspot.debugger.linux.LinuxAddress#hashCode()->int::: linux address hash code
sun.jvm.hotspot.debugger.linux.LinuxAddress#toString()->String::: linux address to string
sun.jvm.hotspot.debugger.linux.LinuxAddress#getCIntegerAt(long, long, boolean)->long::: linux address get integer at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getAddressAt(long)->Address::: linux address get address at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getCompOopAddressAt(long)->Address::: linux address get comp oop address at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getCompKlassAddressAt(long)->Address::: linux address get comp klass address at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJBooleanAt(long)->boolean::: linux address get boolean at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJByteAt(long)->byte::: linux address get byte at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJCharAt(long)->char::: linux address get char at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJDoubleAt(long)->double::: linux address get double at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJFloatAt(long)->float::: linux address get float at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJIntAt(long)->int::: linux address get int at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJLongAt(long)->long::: linux address get long at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getJShortAt(long)->short::: linux address get short at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getOopHandleAt(long)->OopHandle::: linux address get oop handle at
sun.jvm.hotspot.debugger.linux.LinuxAddress#getCompOopHandleAt(long)->OopHandle::: linux address get comp oop handle at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setCIntegerAt(long, long, long)->void::: linux address set integer at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setAddressAt(long, Address)->void::: linux address set address at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJBooleanAt(long, boolean)->void::: linux address set boolean at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJByteAt(long, byte)->void::: linux address set byte at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJCharAt(long, char)->void::: linux address set char at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJDoubleAt(long, double)->void::: linux address set double at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJFloatAt(long, float)->void::: linux address set float at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJIntAt(long, int)->void::: linux address set int at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJLongAt(long, long)->void::: linux address set long at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setJShortAt(long, short)->void::: linux address set short at
sun.jvm.hotspot.debugger.linux.LinuxAddress#setOopHandleAt(long, OopHandle)->void::: linux address set oop handle at
sun.jvm.hotspot.debugger.linux.LinuxAddress#addOffsetTo(long)->Address::: linux address add offset to
sun.jvm.hotspot.debugger.linux.LinuxAddress#addOffsetToAsOopHandle(long)->OopHandle::: linux address add offset to as oop handle
sun.jvm.hotspot.debugger.linux.LinuxAddress#minus(Address)->long:::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?)
sun.jvm.hotspot.debugger.linux.LinuxAddress#lessThan(Address)->boolean::: linux address less than
sun.jvm.hotspot.debugger.linux.LinuxAddress#lessThanOrEqual(Address)->boolean::: linux address less than or equal
sun.jvm.hotspot.debugger.linux.LinuxAddress#greaterThan(Address)->boolean::: linux address greater than
sun.jvm.hotspot.debugger.linux.LinuxAddress#greaterThanOrEqual(Address)->boolean::: linux address greater than or equal
sun.jvm.hotspot.debugger.linux.LinuxAddress#andWithMask(long)->Address::: linux address and with mask
sun.jvm.hotspot.debugger.linux.LinuxAddress#orWithMask(long)->Address::: linux address or with mask
sun.jvm.hotspot.debugger.linux.LinuxAddress#xorWithMask(long)->Address::: linux address xor with mask
sun.jvm.hotspot.debugger.linux.LinuxAddress#asLongValue()->long::: linux address as long value
sun.jvm.hotspot.debugger.linux.LinuxAddress#getValue()->long::: linux address get value
sun.jvm.hotspot.debugger.linux.LinuxAddress#main(String[])->void::: linux address main
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#getThreadList()->List::: linux debugger get thread list
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#getLoadObjectList()->List::: linux debugger get load object list
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#loadObjectContainingPC(Address)->LoadObject::: linux debugger load object containing c
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#topFrameForThread(ThreadProxy)->CFrame::: linux debugger top frame for thread
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#getNameOfFile(String)->String::: linux debugger get name of file
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#getProcessControl()->ProcessControl::: linux debugger get process control
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#canDemangle()->boolean::: linux debugger can demangle
sun.jvm.hotspot.debugger.linux.LinuxCDebugger#demangle(String)->String::: linux debugger demangle
sun.jvm.hotspot.debugger.linux.LinuxDebugger#addressValueToString(long)->String::: linux debugger address value to string
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJBoolean(long)->boolean::: linux debugger read boolean
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJByte(long)->byte::: linux debugger read byte
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJChar(long)->char::: linux debugger read char
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJDouble(long)->double::: linux debugger read double
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJFloat(long)->float::: linux debugger read float
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJInt(long)->int::: linux debugger read int
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJLong(long)->long::: linux debugger read long
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readJShort(long)->short::: linux debugger read short
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readCInteger(long, long, boolean)->long::: linux debugger read integer
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readAddress(long)->LinuxAddress::: linux debugger read address
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readCompOopAddress(long)->LinuxAddress::: linux debugger read comp oop address
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readCompKlassAddress(long)->LinuxAddress::: linux debugger read comp klass address
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readOopHandle(long)->LinuxOopHandle::: linux debugger read oop handle
sun.jvm.hotspot.debugger.linux.LinuxDebugger#readCompOopHandle(long)->LinuxOopHandle::: linux debugger read comp oop handle
sun.jvm.hotspot.debugger.linux.LinuxDebugger#getThreadIntegerRegisterSet(int)->long[]::: linux debugger get thread integer register set
sun.jvm.hotspot.debugger.linux.LinuxDebugger#getAddressValue(Address)->long::: linux debugger get address value
sun.jvm.hotspot.debugger.linux.LinuxDebugger#newAddress(long)->Address::: linux debugger new address
sun.jvm.hotspot.debugger.linux.LinuxDebugger#getThreadList()->List::: linux debugger get thread list
sun.jvm.hotspot.debugger.linux.LinuxDebugger#getLoadObjectList()->List::: linux debugger get load object list
sun.jvm.hotspot.debugger.linux.LinuxDebugger#lookup(long)->ClosestSymbol::: linux debugger lookup
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getAddressSize()->int::: linux debugger local get address size
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.WorkerThreadTask#doit(LinuxDebuggerLocal)->void::: worker thread task doit
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.LinuxDebuggerLocalWorkerThread#run()->void::: linux debugger local worker thread run
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.LinuxDebuggerLocalWorkerThread#execute(WorkerThreadTask)->WorkerThreadTask::: linux debugger local worker thread execute
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#hasProcessList()->boolean:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getProcessList()->List:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#attach(int)->void:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#attach(String, String)->void:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#detach()->boolean:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#parseAddress(String)->Address:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getOS()->String:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getCPU()->String:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#hasConsole()->boolean::: linux debugger local has console
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#consoleExecuteCommand(String)->String::: linux debugger local console execute command
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getConsolePrompt()->String::: linux debugger local get console prompt
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#lookup(String, String)->Address:::From the SymbolLookup interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#lookupOop(String, String)->OopHandle:::From the SymbolLookup interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getMachineDescription()->MachineDescription:::From the Debugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getThreadForIdentifierAddress(Address)->ThreadProxy:::From the ThreadAccess interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getThreadForThreadId(long)->ThreadProxy:::From the ThreadAccess interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#addressValueToString(long)->String:::From the LinuxDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readAddress(long)->LinuxAddress:::From the LinuxDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readCompOopAddress(long)->LinuxAddress::: linux debugger local read comp oop address
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readCompKlassAddress(long)->LinuxAddress::: linux debugger local read comp klass address
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readOopHandle(long)->LinuxOopHandle:::From the LinuxDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readCompOopHandle(long)->LinuxOopHandle::: linux debugger local read comp oop handle
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getThreadIntegerRegisterSet(int)->long[]::: linux debugger local get thread integer register set
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readCInteger(long, long, boolean)->long:::Need to override this to relax alignment checks on x86.
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readJLong(long)->long::: linux debugger local read long
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getAddressValue(Address)->long:::From the LinuxDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#newAddress(long)->Address:::From the LinuxDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getThreadList()->List:::From the LinuxCDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getLoadObjectList()->List:::From the LinuxCDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#lookup(long)->ClosestSymbol:::From the LinuxCDebugger interface
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#getCDebugger()->CDebugger::: linux debugger local get debugger
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#readBytesFromProcess(long, long)->ReadResult:::This reads bytes from the remote process.
sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal#writeBytesToProcess(long, long, byte[])->void::: linux debugger local write bytes to process
sun.jvm.hotspot.debugger.linux.LinuxOopHandle#equals(Object)->boolean::: linux oop handle equals
sun.jvm.hotspot.debugger.linux.LinuxOopHandle#addOffsetTo(long)->Address::: linux oop handle add offset to
sun.jvm.hotspot.debugger.linux.LinuxOopHandle#andWithMask(long)->Address::: linux oop handle and with mask
sun.jvm.hotspot.debugger.linux.LinuxOopHandle#orWithMask(long)->Address::: linux oop handle or with mask
sun.jvm.hotspot.debugger.linux.LinuxOopHandle#xorWithMask(long)->Address::: linux oop handle xor with mask
sun.jvm.hotspot.debugger.linux.LinuxThread#equals(Object)->boolean::: linux thread equals
sun.jvm.hotspot.debugger.linux.LinuxThread#hashCode()->int::: linux thread hash code
sun.jvm.hotspot.debugger.linux.LinuxThread#toString()->String::: linux thread to string
sun.jvm.hotspot.debugger.linux.LinuxThread#getContext()->ThreadContext::: linux thread get context
sun.jvm.hotspot.debugger.linux.LinuxThread#canSetContext()->boolean::: linux thread can set context
sun.jvm.hotspot.debugger.linux.LinuxThread#setContext(ThreadContext)->void::: linux thread set context
sun.jvm.hotspot.debugger.linux.LinuxThreadContextFactory#createThreadContext(LinuxDebugger)->ThreadContext::: linux thread context factory create thread context
sun.jvm.hotspot.debugger.linux.SharedObject#newAddress(long)->Address::: shared object new address
sun.jvm.hotspot.debugger.linux.SharedObject#getAddressValue(Address)->long::: shared object get address value

LinuxAddress#equals(Object)::: linux address equals:::if->return->if->return->return
LinuxAddress#hashCode()::: linux address hash code:::return
LinuxAddress#toString()::: linux address to string:::return->debugger->addressValueToString
LinuxAddress#getCIntegerAt(long, long, boolean)::: linux address get integer at:::return->debugger->readCInteger
LinuxAddress#getAddressAt(long)::: linux address get address at:::return->debugger->readAddress
LinuxAddress#getCompOopAddressAt(long)::: linux address get comp oop address at:::return->debugger->readCompOopAddress
LinuxAddress#getCompKlassAddressAt(long)::: linux address get comp klass address at:::return->debugger->readCompKlassAddress
LinuxAddress#getJBooleanAt(long)::: linux address get boolean at:::return->debugger->readJBoolean
LinuxAddress#getJByteAt(long)::: linux address get byte at:::return->debugger->readJByte
LinuxAddress#getJCharAt(long)::: linux address get char at:::return->debugger->readJChar
LinuxAddress#getJDoubleAt(long)::: linux address get double at:::return->debugger->readJDouble
LinuxAddress#getJFloatAt(long)::: linux address get float at:::return->debugger->readJFloat
LinuxAddress#getJIntAt(long)::: linux address get int at:::return->debugger->readJInt
LinuxAddress#getJLongAt(long)::: linux address get long at:::return->debugger->readJLong
LinuxAddress#getJShortAt(long)::: linux address get short at:::return->debugger->readJShort
LinuxAddress#getOopHandleAt(long)::: linux address get oop handle at:::return->debugger->readOopHandle
LinuxAddress#getCompOopHandleAt(long)::: linux address get comp oop handle at:::return->debugger->readCompOopHandle
LinuxAddress#setCIntegerAt(long, long, long)::: linux address set integer at:::throw->new->DebuggerException
LinuxAddress#setAddressAt(long, Address)::: linux address set address at:::throw->new->DebuggerException
LinuxAddress#setJBooleanAt(long, boolean)::: linux address set boolean at:::throw->new->DebuggerException
LinuxAddress#setJByteAt(long, byte)::: linux address set byte at:::throw->new->DebuggerException
LinuxAddress#setJCharAt(long, char)::: linux address set char at:::throw->new->DebuggerException
LinuxAddress#setJDoubleAt(long, double)::: linux address set double at:::throw->new->DebuggerException
LinuxAddress#setJFloatAt(long, float)::: linux address set float at:::throw->new->DebuggerException
LinuxAddress#setJIntAt(long, int)::: linux address set int at:::throw->new->DebuggerException
LinuxAddress#setJLongAt(long, long)::: linux address set long at:::throw->new->DebuggerException
LinuxAddress#setJShortAt(long, short)::: linux address set short at:::throw->new->DebuggerException
LinuxAddress#setOopHandleAt(long, OopHandle)::: linux address set oop handle at:::throw->new->DebuggerException
LinuxAddress#addOffsetTo(long)::: linux address add offset to:::value->if->return->return->new->LinuxAddress
LinuxAddress#addOffsetToAsOopHandle(long)::: linux address add offset to as oop handle:::value->if->return->return->new->LinuxOopHandle
LinuxAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
LinuxAddress#lessThan(Address)::: linux address less than:::if->return->arg->if->return->if->return->return
LinuxAddress#lessThanOrEqual(Address)::: linux address less than or equal:::if->return->arg->if->return->if->return->return
LinuxAddress#greaterThan(Address)::: linux address greater than:::if->return->arg->if->return->if->return->return
LinuxAddress#greaterThanOrEqual(Address)::: linux address greater than or equal:::if->return->arg->if->return->if->return->return
LinuxAddress#andWithMask(long)::: linux address and with mask:::value->if->return->return->new->LinuxAddress
LinuxAddress#orWithMask(long)::: linux address or with mask:::value->if->return->return->new->LinuxAddress
LinuxAddress#xorWithMask(long)::: linux address xor with mask:::value->if->return->return->new->LinuxAddress
LinuxAddress#asLongValue()::: linux address as long value:::return
LinuxAddress#getValue()::: linux address get value:::return
LinuxAddress#check(boolean, String)::: linux address check:::if->println->System->exit
LinuxAddress#main(String[])::: linux address main:::p1->new->LinuxAddress->p2->p1->addOffsetTo->n1->p2->addOffsetTo->n2->n1->addOffsetTo->p1->lessThan->check->p1->lessThan->check->p1->lessThan->check->p2->lessThan->check->p2->lessThan->check->n1->lessThan->check->p1->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n2->lessThan->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->greaterThan->check->n2->greaterThan->check->n2->greaterThan->check->n1->greaterThan->check->n1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->n2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->println
LinuxCDebugger#getThreadList()::: linux debugger get thread list:::return->dbg->getThreadList
LinuxCDebugger#getLoadObjectList()::: linux debugger get load object list:::return->dbg->getLoadObjectList
LinuxCDebugger#loadObjectContainingPC(Address)::: linux debugger load object containing c:::if->return->objs->getLoadObjectList->for->i->objs->size->return
LinuxCDebugger#topFrameForThread(ThreadProxy)::: linux debugger top frame for thread:::cpu->dbg->getCPU->if->cpu->equals->context->thread->getContext->ebp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->new->LinuxX86CFrame->else->if->cpu->equals->context->thread->getContext->rbp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->new->LinuxAMD64CFrame->else->if->cpu->equals->context->thread->getContext->sp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->LinuxDebuggerLocal->getAddressSize->new->LinuxSPARCCFrame->else->if->cpu->equals->context->thread->getContext->sp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->LinuxDebuggerLocal->getAddressSize->new->LinuxPPC64CFrame->else->if->cpu->equals->context->thread->getContext->fp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->new->LinuxAARCH64CFrame->else->context->thread->getContext->return->context->getTopFrame
LinuxCDebugger#getNameOfFile(String)::: linux debugger get name of file:::return->new->File->getName
LinuxCDebugger#getProcessControl()::: linux debugger get process control:::return
LinuxCDebugger#canDemangle()::: linux debugger can demangle:::return
LinuxCDebugger#demangle(String)::: linux debugger demangle:::throw->new->UnsupportedOperationException
LinuxDebugger#addressValueToString(long)::: linux debugger address value to string:::
LinuxDebugger#readJBoolean(long)::: linux debugger read boolean:::
LinuxDebugger#readJByte(long)::: linux debugger read byte:::
LinuxDebugger#readJChar(long)::: linux debugger read char:::
LinuxDebugger#readJDouble(long)::: linux debugger read double:::
LinuxDebugger#readJFloat(long)::: linux debugger read float:::
LinuxDebugger#readJInt(long)::: linux debugger read int:::
LinuxDebugger#readJLong(long)::: linux debugger read long:::
LinuxDebugger#readJShort(long)::: linux debugger read short:::
LinuxDebugger#readCInteger(long, long, boolean)::: linux debugger read integer:::
LinuxDebugger#readAddress(long)::: linux debugger read address:::
LinuxDebugger#readCompOopAddress(long)::: linux debugger read comp oop address:::
LinuxDebugger#readCompKlassAddress(long)::: linux debugger read comp klass address:::
LinuxDebugger#readOopHandle(long)::: linux debugger read oop handle:::
LinuxDebugger#readCompOopHandle(long)::: linux debugger read comp oop handle:::
LinuxDebugger#getThreadIntegerRegisterSet(int)::: linux debugger get thread integer register set:::
LinuxDebugger#getAddressValue(Address)::: linux debugger get address value:::
LinuxDebugger#newAddress(long)::: linux debugger new address:::
LinuxDebugger#getThreadList()::: linux debugger get thread list:::
LinuxDebugger#getLoadObjectList()::: linux debugger get load object list:::
LinuxDebugger#lookup(long)::: linux debugger lookup:::
LinuxDebuggerLocal#createClosestSymbol(String, long)::: linux debugger local create closest symbol:::return->new->ClosestSymbol
LinuxDebuggerLocal#createLoadObject(String, long, long)::: linux debugger local create load object:::f->new->File->baseAddr->newAddress->return->f->length->new->SharedObject
LinuxDebuggerLocal#init0()::: linux debugger local init0:::
LinuxDebuggerLocal#attach0(int)::: linux debugger local attach0:::
LinuxDebuggerLocal#attach0(String, String)::: linux debugger local attach0:::
LinuxDebuggerLocal#detach0()::: linux debugger local detach0:::
LinuxDebuggerLocal#lookupByName0(String, String)::: linux debugger local lookup by name0:::
LinuxDebuggerLocal#lookupByAddress0(long)::: linux debugger local lookup by address0:::
LinuxDebuggerLocal#getThreadIntegerRegisterSet0(int)::: linux debugger local get thread integer register set0:::
LinuxDebuggerLocal#readBytesFromProcess0(long, long)::: linux debugger local read bytes from process0:::
LinuxDebuggerLocal#getAddressSize()::: linux debugger local get address size:::
LinuxDebuggerLocal.WorkerThreadTask#doit(LinuxDebuggerLocal)::: worker thread task doit:::
LinuxDebuggerLocal.LinuxDebuggerLocalWorkerThread#run()::: linux debugger local worker thread run:::synchronized->for
LinuxDebuggerLocal.LinuxDebuggerLocalWorkerThread#execute(WorkerThreadTask)::: linux debugger local worker thread execute:::synchronized->workerThread->notifyAll->while->try->workerThread->wait->catch->finally->if->throw->new->DebuggerException->else->return
LinuxDebuggerLocal#hasProcessList():::From the Debugger interface via JVMDebugger:::return
LinuxDebuggerLocal#getProcessList():::From the Debugger interface via JVMDebugger:::throw->new->DebuggerException
LinuxDebuggerLocal#checkAttached()::: linux debugger local check attached:::if->if->throw->new->DebuggerException->else->throw->new->DebuggerException
LinuxDebuggerLocal#requireAttach()::: linux debugger local require attach:::if->throw->new->RuntimeException
LinuxDebuggerLocal#findABIVersion()::: linux debugger local find version:::if->lookupByName0->else
LinuxDebuggerLocal#attach(int):::From the Debugger interface via JVMDebugger:::checkAttached->new->ArrayList->new->ArrayList->task->new->AttachTask->workerThread->execute
LinuxDebuggerLocal#attach(String, String):::From the Debugger interface via JVMDebugger:::checkAttached->new->ArrayList->new->ArrayList->attach0->findABIVersion
LinuxDebuggerLocal#detach():::From the Debugger interface via JVMDebugger:::if->return->if->detach0->return->else->task->new->DetachTask->workerThread->execute->return
LinuxDebuggerLocal#parseAddress(String):::From the Debugger interface via JVMDebugger:::addr->utils->scanAddress->if->return->return->new->LinuxAddress
LinuxDebuggerLocal#getOS():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getOS
LinuxDebuggerLocal#getCPU():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getCPU
LinuxDebuggerLocal#hasConsole()::: linux debugger local has console:::return
LinuxDebuggerLocal#consoleExecuteCommand(String)::: linux debugger local console execute command:::throw->new->DebuggerException
LinuxDebuggerLocal#getConsolePrompt()::: linux debugger local get console prompt:::return
LinuxDebuggerLocal#handleGCC32ABI(long, String)::: linux debugger local handle c32 i:::if->symbol->startsWith->return->machDesc->getAddressSize->else->return
LinuxDebuggerLocal#lookup(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::requireAttach->if->return->if->addr->lookupByName0->return->handleGCC32ABI->new->LinuxAddress->else->task->new->LookupByNameTask->workerThread->execute->return
LinuxDebuggerLocal#lookupOop(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::addr->lookup->if->return->return->addr->addOffsetToAsOopHandle
LinuxDebuggerLocal#getMachineDescription():::From the Debugger interface:::return
LinuxDebuggerLocal#getThreadForIdentifierAddress(Address):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->new->LinuxThread
LinuxDebuggerLocal#getThreadForThreadId(long):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->new->LinuxThread
LinuxDebuggerLocal#addressValueToString(long):::From the LinuxDebugger interface:::return->utils->addressValueToString
LinuxDebuggerLocal#readAddress(long):::From the LinuxDebugger interface:::value->readAddressValue->return->new->LinuxAddress
LinuxDebuggerLocal#readCompOopAddress(long)::: linux debugger local read comp oop address:::value->readCompOopAddressValue->return->new->LinuxAddress
LinuxDebuggerLocal#readCompKlassAddress(long)::: linux debugger local read comp klass address:::value->readCompKlassAddressValue->return->new->LinuxAddress
LinuxDebuggerLocal#readOopHandle(long):::From the LinuxDebugger interface:::value->readAddressValue->return->new->LinuxOopHandle
LinuxDebuggerLocal#readCompOopHandle(long)::: linux debugger local read comp oop handle:::value->readCompOopAddressValue->return->new->LinuxOopHandle
LinuxDebuggerLocal#getThreadIntegerRegisterSet(int)::: linux debugger local get thread integer register set:::requireAttach->if->return->getThreadIntegerRegisterSet0->else->task->new->GetThreadIntegerRegisterSetTask->workerThread->execute->return
LinuxDebuggerLocal#readCInteger(long, long, boolean):::Need to override this to relax alignment checks on x86.:::if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToCInteger
LinuxDebuggerLocal#readJLong(long)::: linux debugger local read long:::utils->checkAlignment->data->readBytes->return->utils->dataToJLong
LinuxDebuggerLocal#getAddressValue(Address):::From the LinuxDebugger interface:::if->return->return->getValue
LinuxDebuggerLocal#newAddress(long):::From the LinuxDebugger interface:::if->return->return->new->LinuxAddress
LinuxDebuggerLocal#getThreadList():::From the LinuxCDebugger interface:::requireAttach->return
LinuxDebuggerLocal#getLoadObjectList():::From the LinuxCDebugger interface:::requireAttach->return
LinuxDebuggerLocal#lookup(long):::From the LinuxCDebugger interface:::requireAttach->if->return->lookupByAddress0->else->task->new->LookupByAddressTask->workerThread->execute->return
LinuxDebuggerLocal#getCDebugger()::: linux debugger local get debugger:::if->new->LinuxCDebugger->return
LinuxDebuggerLocal#readBytesFromProcess(long, long):::This reads bytes from the remote process.:::requireAttach->if->res->readBytesFromProcess0->return->new->ReadResult->new->ReadResult->else->task->new->ReadBytesFromProcessTask->workerThread->execute->return
LinuxDebuggerLocal#writeBytesToProcess(long, long, byte[])::: linux debugger local write bytes to process:::throw->new->DebuggerException
LinuxOopHandle#equals(Object)::: linux oop handle equals:::if->return->if->return->return
LinuxOopHandle#addOffsetTo(long)::: linux oop handle add offset to:::throw->new->UnsupportedOperationException
LinuxOopHandle#andWithMask(long)::: linux oop handle and with mask:::throw->new->UnsupportedOperationException
LinuxOopHandle#orWithMask(long)::: linux oop handle or with mask:::throw->new->UnsupportedOperationException
LinuxOopHandle#xorWithMask(long)::: linux oop handle xor with mask:::throw->new->UnsupportedOperationException
LinuxThread#equals(Object)::: linux thread equals:::if->return->return
LinuxThread#hashCode()::: linux thread hash code:::return
LinuxThread#toString()::: linux thread to string:::return->Integer->toString
LinuxThread#getContext()::: linux thread get context:::data->debugger->getThreadIntegerRegisterSet->context->LinuxThreadContextFactory->createThreadContext->for->i->return
LinuxThread#canSetContext()::: linux thread can set context:::return
LinuxThread#setContext(ThreadContext)::: linux thread set context:::throw->new->DebuggerException
LinuxThreadContextFactory#createThreadContext(LinuxDebugger)::: linux thread context factory create thread context:::cpu->dbg->getCPU->if->cpu->equals->return->new->LinuxX86ThreadContext->else->if->cpu->equals->return->new->LinuxAMD64ThreadContext->else->if->cpu->equals->return->new->LinuxSPARCThreadContext->else->if->cpu->equals->return->new->LinuxPPC64ThreadContext->else->try->tcc->Class->cpu->toLowerCase->cpu->toUpperCase->forName->ctcc->tcc->getConstructors->return->newInstance->catch->throw->new->RuntimeException->finally
SharedObject#newAddress(long)::: shared object new address:::return->dbg->newAddress
SharedObject#getAddressValue(Address)::: shared object get address value:::return->dbg->getAddressValue

jdk.jfr.AnnotationElement#getValues()->List:::Returns an immutable list of annotation values in an order that matches the value descriptors for this AnnotationElement.
jdk.jfr.AnnotationElement#getValueDescriptors()->List:::Returns an immutable list of descriptors that describes the annotation values for this AnnotationElement.
jdk.jfr.AnnotationElement#getAnnotationElements()->List:::Returns an immutable list of annotation elements for this AnnotationElement.
jdk.jfr.AnnotationElement#getTypeName()->String:::Returns the fully qualified name of the annotation type that corresponds to this AnnotationElement (for example, "jdk.jfr.Label").
jdk.jfr.AnnotationElement#getValue(String)->Object:::Returns a value for this AnnotationElement.
jdk.jfr.AnnotationElement#hasValue(String)->boolean:::Returns true if an annotation value with the specified name exists in this AnnotationElement.
jdk.jfr.AnnotationElement#getAnnotation(Class)->A:::Returns the first annotation for the specified type if an AnnotationElement with the same name exists, else null.
jdk.jfr.AnnotationElement#getTypeId()->long:::Returns the type ID for this AnnotationElement
jdk.jfr.AnnotationElement#getType()->Type::: annotation element get type
jdk.jfr.AnnotationElement#isInBoot()->boolean::: annotation element is in boot
jdk.jfr.Configuration#getSettings()->Map:::Returns the settings that specifies how a recording is configured
jdk.jfr.Configuration#getName()->String:::Returns an identifying name (for example, "default" or "profile").
jdk.jfr.Configuration#getLabel()->String:::Returns a human-readable name (for example, "Continuous" or "Profiling"}.
jdk.jfr.Configuration#getDescription()->String:::Returns a short sentence that describes the configuration (for example "Low overhead configuration safe for continuous use in production environments")
jdk.jfr.Configuration#getProvider()->String:::Returns who created the configuration (for example "OpenJDK").
jdk.jfr.Configuration#getContents()->String:::Returns a textual representation of the configuration (for example, the contents of a JFC file).
jdk.jfr.Configuration#create(Path)->Configuration:::Reads a configuration from a file.
jdk.jfr.Configuration#create(Reader)->Configuration:::Reads a configuration from a character stream.
jdk.jfr.Configuration#getConfiguration(String)->Configuration:::Returns a predefined configuration
jdk.jfr.Configuration#getConfigurations()->List:::Returns an immutable list of predefined configurations for this Java Virtual Machine (JVM).
jdk.jfr.Event#begin()->void:::Starts the timing of this event.
jdk.jfr.Event#end()->void:::Ends the timing of this event
jdk.jfr.Event#commit()->void:::Writes the field values, time stamp, and event duration to the Flight Recorder system
jdk.jfr.Event#isEnabled()->boolean:::Returns true if at least one recording is running, and the enabled setting for this event is set to true, otherwise false is returned.
jdk.jfr.Event#shouldCommit()->boolean:::Returns true if the enabled setting for this event is set to true and if the duration is within the threshold for the event, false otherwise
jdk.jfr.Event#set(int, Object)->void:::Sets a field value
jdk.jfr.EventFactory#create(List, List)->EventFactory:::Creates an EventFactory object
jdk.jfr.EventFactory#newEvent()->Event:::Instantiates an event, so it can be populated with data and written to the Flight Recorder system
jdk.jfr.EventFactory#getEventType()->EventType:::Returns the event type that is associated with this event factory.
jdk.jfr.EventFactory#register()->void:::Registers an unregistered event
jdk.jfr.EventFactory#unregister()->void:::Unregisters the event that is associated with this event factory
jdk.jfr.EventSettings#withStackTrace()->EventSettings:::Enables stack traces for the event that is associated with this event setting
jdk.jfr.EventSettings#withoutStackTrace()->EventSettings:::Disables stack traces for the event that is associated with this event setting
jdk.jfr.EventSettings#withoutThreshold()->EventSettings:::Specifies that a threshold is not used
jdk.jfr.EventSettings#withPeriod(Duration)->EventSettings:::Sets the interval for the event that is associated with this event setting.
jdk.jfr.EventSettings#withThreshold(Duration)->EventSettings:::Sets the threshold for the event that is associated with this event setting.
jdk.jfr.EventSettings#with(String, String)->EventSettings:::Sets a setting value for the event that is associated with this event setting.
jdk.jfr.EventSettings#toMap()->Map:::Creates a settings Map for the event that is associated with this event setting.
jdk.jfr.EventType#getFields()->List:::Returns an immutable list of descriptors that describe the event fields of this event type.
jdk.jfr.EventType#getField(String)->ValueDescriptor:::Returns the field with the specified name, or null if it doesn't exist.
jdk.jfr.EventType#getName()->String:::Returns an identifier for the event (for example, "jdk.CPULoad")
jdk.jfr.EventType#getLabel()->String:::Returns a human-readable name (for example, "CPU Load")
jdk.jfr.EventType#getId()->long:::Returns a unique ID for this event type in the Java Virtual Machine (JVM).
jdk.jfr.EventType#getAnnotationElements()->List:::Returns an immutable list of annotation elements for this event type.
jdk.jfr.EventType#isEnabled()->boolean:::Returns true if the event is enabled and at least one recording is running, false otherwise
jdk.jfr.EventType#getDescription()->String:::Returns a short sentence that describes the event class
jdk.jfr.EventType#getAnnotation(Class)->A:::Returns the first annotation for the specified type if an annotation element with the same name is directly present, otherwise null.
jdk.jfr.EventType#getEventType(Class)->EventType:::Returns the event type for an event class, or null if it doesn't exist.
jdk.jfr.EventType#getSettingDescriptors()->List:::Returns an immutable list of the setting descriptors that describe the available event settings for this event type.
jdk.jfr.EventType#getCategoryNames()->List:::Returns the list of human-readable names that makes up the categories for this event type (for example, "Java Application", "Statistics").
jdk.jfr.EventType#getType()->Type::: event type get type
jdk.jfr.EventType#getPlatformEventType()->PlatformEventType::: event type get platform event type
jdk.jfr.FlightRecorder#getRecordings()->List:::Returns an immutable list of the available recordings
jdk.jfr.FlightRecorder#takeSnapshot()->Recording:::Creates a snapshot of all available recorded data
jdk.jfr.FlightRecorder#register(Class)->void:::Registers an event class
jdk.jfr.FlightRecorder#unregister(Class)->void:::Unregisters an event class
jdk.jfr.FlightRecorder#getFlightRecorder()->FlightRecorder:::Returns the Flight Recorder for the platform.
jdk.jfr.FlightRecorder#addPeriodicEvent(Class, Runnable)->void:::Adds a hook for a periodic event
jdk.jfr.FlightRecorder#removePeriodicEvent(Runnable)->boolean:::Removes a hook for a periodic event.
jdk.jfr.FlightRecorder#getEventTypes()->List:::Returns an immutable list that contains all currently registered events
jdk.jfr.FlightRecorder#addListener(FlightRecorderListener)->void:::Adds a recorder listener and captures the AccessControlContext to use when invoking the listener
jdk.jfr.FlightRecorder#removeListener(FlightRecorderListener)->boolean:::Removes a recorder listener
jdk.jfr.FlightRecorder#isAvailable()->boolean:::Returns true if the Java Virtual Machine (JVM) has Flight Recorder capabilities
jdk.jfr.FlightRecorder#isInitialized()->boolean:::Returns true if Flight Recorder is initialized.
jdk.jfr.FlightRecorder#getInternal()->PlatformRecorder::: flight recorder get internal
jdk.jfr.FlightRecorderListener#recorderInitialized(FlightRecorder)->void:::Receives notification when Flight Recorder is initialized
jdk.jfr.FlightRecorderListener#recordingStateChanged(Recording)->void:::Receives notification when the state of a recording changes
jdk.jfr.Recording#start()->void:::Starts this recording
jdk.jfr.Recording#scheduleStart(Duration)->void:::Starts this recording after a delay
jdk.jfr.Recording#stop()->boolean:::Stops this recording
jdk.jfr.Recording#getSettings()->Map:::Returns settings used by this recording
jdk.jfr.Recording#getSize()->long:::Returns the current size of this recording in the disk repository, measured in bytes
jdk.jfr.Recording#getStopTime()->Instant:::Returns the time when this recording was stopped.
jdk.jfr.Recording#getStartTime()->Instant:::Returns the time when this recording was started.
jdk.jfr.Recording#getMaxSize()->long:::Returns the maximum size, measured in bytes, at which data is no longer kept in the disk repository.
jdk.jfr.Recording#getMaxAge()->Duration:::Returns the length of time that the data is kept in the disk repository before it is removed.
jdk.jfr.Recording#getName()->String:::Returns the name of this recording
jdk.jfr.Recording#setSettings(Map)->void:::Replaces all settings for this recording
jdk.jfr.Recording#getState()->RecordingState:::Returns the recording state that this recording is currently in.
jdk.jfr.Recording#close()->void:::Releases all data that is associated with this recording
jdk.jfr.Recording#copy(boolean)->Recording:::Returns a clone of this recording, with a new recording ID and name
jdk.jfr.Recording#dump(Path)->void:::Writes recording data to a file
jdk.jfr.Recording#isToDisk()->boolean:::Returns true if this recording uses the disk repository, false otherwise
jdk.jfr.Recording#setMaxSize(long)->void:::Determines how much data is kept in the disk repository
jdk.jfr.Recording#setMaxAge(Duration)->void:::Determines how far back data is kept in the disk repository
jdk.jfr.Recording#setDestination(Path)->void:::Sets a location where data is written on recording stop, or null if data is not to be dumped
jdk.jfr.Recording#getDestination()->Path:::Returns the destination file, where recording data is written when the recording stops, or null if no destination is set.
jdk.jfr.Recording#getId()->long:::Returns a unique ID for this recording.
jdk.jfr.Recording#setName(String)->void:::Sets a human-readable name (for example, "My Recording").
jdk.jfr.Recording#setDumpOnExit(boolean)->void:::Sets whether this recording is dumped to disk when the JVM exits.
jdk.jfr.Recording#getDumpOnExit()->boolean:::Returns whether this recording is dumped to disk when the JVM exits
jdk.jfr.Recording#setToDisk(boolean)->void:::Determines whether this recording is continuously flushed to the disk repository or data is constrained to what is available in memory buffers.
jdk.jfr.Recording#getStream(Instant, Instant)->InputStream:::Creates a data stream for a specified interval
jdk.jfr.Recording#getDuration()->Duration:::Returns the specified duration for this recording, or null if no duration is set
jdk.jfr.Recording#setDuration(Duration)->void:::Sets a duration for how long a recording runs before it stops
jdk.jfr.Recording#enable(String)->EventSettings:::Enables the event with the specified name
jdk.jfr.Recording#disable(String)->EventSettings:::Disables event with the specified name
jdk.jfr.Recording#enable(Class)->EventSettings:::Enables event.
jdk.jfr.Recording#disable(Class)->EventSettings:::Disables event.
jdk.jfr.Recording#getInternal()->PlatformRecording::: recording get internal
jdk.jfr.SettingControl#combine(Set)->String:::Combines the setting values for all running recordings into one value when multiple recordings are running at the same time,  The semantics of how setting values are combined depends on the setting control that is implemented, but all recordings should get at least all the events they request
jdk.jfr.SettingControl#setValue(String)->void:::Sets the value for this setting
jdk.jfr.SettingControl#getValue()->String:::Returns the currently used value for this setting, not null
jdk.jfr.SettingDescriptor#setAnnotations(List)->void::: setting descriptor set annotations
jdk.jfr.SettingDescriptor#getName()->String:::Returns the name of the setting (for example, "threshold").
jdk.jfr.SettingDescriptor#getLabel()->String:::Returns a human-readable name that describes the setting (for example, "Threshold")
jdk.jfr.SettingDescriptor#getDescription()->String:::Returns a sentence that describes the setting (for example "Record event with duration above or equal to threshold")
jdk.jfr.SettingDescriptor#getContentType()->String:::Returns a textual identifier that specifies how a value that is represented by this SettingDescriptor object is interpreted or formatted
jdk.jfr.SettingDescriptor#getTypeName()->String:::Returns the fully qualified class name of the type that is associated with this setting descriptor.
jdk.jfr.SettingDescriptor#getTypeId()->long:::Returns a unique ID for the type in the Java Virtual Machine (JVM)
jdk.jfr.SettingDescriptor#getAnnotation(Class)->A:::Returns the first annotation for the specified type if an annotation element with the same name is available, null otherwise.
jdk.jfr.SettingDescriptor#getAnnotationElements()->List:::Returns an immutable list of annotation elements for this value descriptor.
jdk.jfr.SettingDescriptor#getDefaultValue()->String:::Returns the default value for this setting descriptor.
jdk.jfr.SettingDescriptor#getType()->Type::: setting descriptor get type
jdk.jfr.ValueDescriptor#getLabel()->String:::Returns a human-readable name that describes the value (for example, "Maximum Throughput").
jdk.jfr.ValueDescriptor#getName()->String:::Returns the name of the value (for example, "maxThroughput").
jdk.jfr.ValueDescriptor#getDescription()->String:::Returns a sentence describing the value (for example, {@code "Maximum throughput in the transaction system
jdk.jfr.ValueDescriptor#getContentType()->String:::Returns a textual identifier that specifies how a value represented by this ValueDescriptor is interpreted or formatted
jdk.jfr.ValueDescriptor#getTypeName()->String:::Returns the fully qualified class name of the type that is associated with this value descriptor.
jdk.jfr.ValueDescriptor#getTypeId()->long:::Returns a unique ID for the type in the Java virtual Machine (JVM)
jdk.jfr.ValueDescriptor#isArray()->boolean:::Returns if this value descriptor is an array type.
jdk.jfr.ValueDescriptor#getAnnotation(Class)->A:::Returns the first annotation for the specified type if an annotation element with the same name is directly present for this value descriptor, null otherwise.
jdk.jfr.ValueDescriptor#getAnnotationElements()->List:::Returns an immutable list of annotation elements for this value descriptor.
jdk.jfr.ValueDescriptor#getFields()->List:::Returns an immutable list of value descriptors if the type is complex, else an empty list.
jdk.jfr.ValueDescriptor#getType()->Type::: value descriptor get type
jdk.jfr.ValueDescriptor#setAnnotations(List)->void::: value descriptor set annotations
jdk.jfr.ValueDescriptor#isConstantPool()->boolean::: value descriptor is constant pool
jdk.jfr.ValueDescriptor#getJavaFieldName()->String::: value descriptor get java field name
jdk.jfr.ValueDescriptor#isUnsigned()->boolean::: value descriptor is unsigned

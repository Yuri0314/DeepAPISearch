StAXSchemaParser#fillQName(QName, String, String, String):::Fills in a QName object.:::uri->length->fSymbolTable->addSymbol->fSymbolTable->addSymbol->prefix->length->fSymbolTable->addSymbol->raw->if->fStringBuffer->clear->fStringBuffer->append->fStringBuffer->append->fStringBuffer->append->fSymbolTable->addSymbol->toFill->setValues
XSAttributeChecker#checkAttributes(Element, boolean, XSDocumentInfo):::Check whether the specified element conforms to the attributes restriction an array of attribute values is returned:::return->checkAttributes
XSAttributeChecker#checkAttributes(Element, boolean, XSDocumentInfo, boolean):::Check whether the specified element conforms to the attributes restriction an array of attribute values is returned:::if->return->attrs->DOMUtil->getAttrs->resolveNamespace->uri->DOMUtil->getNamespaceURI->elName->DOMUtil->getLocalName->if->equals->new->ObjectArr->reportSchemaError->eleAttrsMap->lookupName->if->if->elName->equals->if->DOMUtil->getAttr->else->else->if->elName->equals->if->DOMUtil->getAttr->else->attrList->eleAttrsMap->get->if->new->ObjectArr->reportSchemaError->return->attrValues->getAvailableArray->fromDefault->System->arraycopy->length->sattr->for->i->reqAttrs->for->i->if->min->intValue->max->intValue->if->if->localName->element->getLocalName->optimize->localName->equals->localName->equals->element->getNextSibling->element->getPreviousSibling->element->getParentNode->getLocalName->equals->if->maxOccurNodeLimit->getLimit->if->isNoLimit->new->ObjectArr->reportSchemaFatalError->fXIntPool->getXInt->if->new->ObjectArr->reportSchemaError->return
XSDAbstractParticleTraverser#traverseAll(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the "All" declaration  &lt;all   id = ID   maxOccurs = 1 : 1   minOccurs = (0 | 1) : 1&gt;   Content: (annotation? , element*) &lt;/all&gt;:::attrValues->fAttrChecker->checkAttributes->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->childName->particle->fPArray->pushContext->for->DOMUtil->getNextSiblingElement->minAtt->maxAtt->defaultVals->group->new->XSModelGroupImpl->fPArray->getParticleCount->fPArray->popContext->annotations->if->new->XSObjectListImpl->addXSObject->else->new->XSParticleDecl->minAtt->intValue->maxAtt->intValue->allDecl->getParentNode->defaultVals->longValue->checkOccurrences->fAttrChecker->returnAttrArray->return
XSDAbstractParticleTraverser#traverseSequence(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the Sequence declaration  <sequence   id = ID   maxOccurs = string   minOccurs = nonNegativeInteger>   Content: (annotation? , (element | group | choice | sequence | any)*) </sequence>:::return->traverseSeqChoice
XSDAbstractParticleTraverser#traverseChoice(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the Choice declaration  <choice   id = ID   maxOccurs = string   minOccurs = nonNegativeInteger>   Content: (annotation? , (element | group | choice | sequence | any)*) </choice>:::return->traverseSeqChoice
XSDAbstractTraverser#checkNotationType(String, XSTypeDefinition, Element):::Element/Attribute traversers call this method to check whether the type is NOTATION without enumeration facet:::if->typeDecl->getTypeCategory->getVariety->getPrimitiveKind->if->getDefinedFacets->new->ObjectArr->typeDecl->getName->DOMUtil->getLocalName->reportSchemaError
XSDAttributeTraverser#traverseNamedAttr(Element, Object[], XSDocumentInfo, SchemaGrammar, boolean, XSComplexTypeDecl):::Traverse a globally declared attribute.:::defaultAtt->fixedAtt->formAtt->nameAtt->typeAtt->attribute->if->getAttributeDecl->else->new->XSAttributeDecl->if->fSymbolTable->addSymbol->tnsAtt->enclCT->scope->if->else->if->if->if->formAtt->intValue->else->if->attDefault->constraintType->if->if->new->ValidatedInfo->else->if->new->ValidatedInfo->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->attrType->haveAnonType->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->if->type->fSchemaHandler->getGlobalDecl->if->type->getTypeCategory->else->new->ObjectArr->reportSchemaError->if->if->annotations->if->new->XSObjectListImpl->addXSObject->else->attribute->setValues->if->if->new->ObjectArr->reportSchemaError->else->reportSchemaError->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->new->ObjectArr->reportSchemaError->if->new->ObjectArr->reportSchemaError->checkNotationType->if->fValidationState->setNamespaceSupport->try->checkDefaultValid->catch->ide->getKey->ide->getArgs->reportSchemaError->new->ObjectArr->reportSchemaError->attribute->setValues->finally->if->if->attrType->isIDType->new->ObjectArr->reportSchemaError->attribute->setValues->if->nameAtt->equals->reportSchemaError->return->if->tnsAtt->equals->new->ObjectArr->reportSchemaError->return->if->nameAtt->equals->return->if->if->grammar->getGlobalAttributeDecl->grammar->addGlobalAttributeDecl->loc->fSchemaHandler->schemaDocument2SystemId->attribute2->grammar->getGlobalAttributeDecl->if->grammar->addGlobalAttributeDecl->if->if->fSchemaHandler->addGlobalAttributeDecl->return
XSDComplexTypeTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar):::Traverse local complexType declarations:::attrValues->fAttrChecker->checkAttributes->complexTypeName->genAnonTypeName->contentBackup->type->traverseComplexTypeDecl->contentRestore->grammar->fSchemaHandler->element2Locator->addComplexTypeDecl->type->setIsAnonymous->fAttrChecker->returnAttrArray->return
XSDComplexTypeTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar):::Traverse global complexType declarations:::attrValues->fAttrChecker->checkAttributes->complexTypeName->contentBackup->type->traverseComplexTypeDecl->contentRestore->grammar->fSchemaHandler->element2Locator->addComplexTypeDecl->if->new->ObjectArr->reportSchemaError->else->if->grammar->type->getName->getGlobalTypeDecl->grammar->addGlobalComplexTypeDecl->loc->fSchemaHandler->schemaDocument2SystemId->type2->grammar->type->getName->getGlobalTypeDecl->if->grammar->addGlobalComplexTypeDecl->if->if->if->fSchemaHandler->addGlobalTypeDecl->fAttrChecker->returnAttrArray->return
XSDElementTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse a locally declared element (or an element reference):::particle->if->getParticleDecl->else->new->XSParticleDecl->if->attr->elmDecl->getAttributeNode->if->min->attr->getValue->try->m->Integer->XMLChar->trim->parseInt->if->catch->finally->fSchemaHandler->fillInLocalElemInfo->else->traverseLocal->if->return
XSDElementTraverser#traverseLocal(XSParticleDecl, Element, XSDocumentInfo, SchemaGrammar, int, XSObject, String[]):::Traverse a locally declared element (or an element reference):::if->setEffectiveContext->attrValues->fAttrChecker->checkAttributes->refAtt->minAtt->maxAtt->element->annotation->if->elmDecl->getAttributeNode->if->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->else->traverseNamedElement->minAtt->intValue->maxAtt->intValue->if->else->if->annotations->if->new->XSObjectListImpl->addXSObject->else->else->defaultVals->elmDecl->getParentNode->defaultVals->longValue->checkOccurrences->fAttrChecker->returnAttrArray
XSDElementTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar):::Traverse a globally declared element.:::attrValues->fAttrChecker->checkAttributes->element->traverseNamedElement->fAttrChecker->returnAttrArray->return
XSDElementTraverser#traverseNamedElement(Element, Object[], XSDocumentInfo, SchemaGrammar, boolean, XSObject):::Traverse a globally declared element.:::abstractAtt->blockAtt->defaultAtt->finalAtt->fixedAtt->formAtt->nameAtt->nillableAtt->subGroupAtt->typeAtt->element->if->getElementDecl->else->new->XSElementDecl->if->fSymbolTable->addSymbol->if->element->setIsGlobal->else->if->element->setIsLocal->if->if->formAtt->intValue->else->else->if->else->if->if->else->blockAtt->shortValue->if->new->ObjectArr->reportSchemaError->finalAtt->shortValue->if->nillableAtt->booleanValue->element->setIsNillable->if->abstractAtt->booleanValue->element->setIsAbstract->if->new->ValidatedInfo->element->setConstraintType->else->if->new->ValidatedInfo->element->setConstraintType->else->element->setConstraintType->if->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->annotations->if->new->XSObjectListImpl->addXSObject->else->elementType->haveAnonType->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->else->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->if->fSchemaHandler->getGlobalDecl->if->if->if->if->childName->DOMUtil->getLocalName->while->childName->equals->childName->equals->childName->equals->if->childName->equals->childName->equals->DOMUtil->setHidden->traverse->if->DOMUtil->getAttrValue->length->fSchemaHandler->DOMUtil->getAttrValue->DOMUtil->getAttrValue->fSchemaHandler->getIDRegistry->fSchemaHandler->getIDRegistry_sub->checkForDuplicateNames->else->if->childName->equals->fSchemaHandler->storeKeyRef->DOMUtil->getNextSiblingElement->if->DOMUtil->getLocalName->if->if->new->ObjectArr->reportSchemaError->else->reportSchemaError->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->new->ObjectArr->reportSchemaError->if->new->ObjectArr->reportSchemaError->checkNotationType->if->fValidationState->setNamespaceSupport->if->XSConstraints->ElementDefaultValidImmediate->new->ObjectArr->reportSchemaError->element->setConstraintType->if->if->XSConstraints->checkTypeDerivationOk->new->ObjectArr->reportSchemaError->if->if->elementType->getTypeCategory->isIDType->elementType->getTypeCategory->containsTypeID->new->ObjectArr->reportSchemaError->element->setConstraintType->if->return->if->grammar->addGlobalElementDeclAll->if->grammar->getGlobalElementDecl->grammar->addGlobalElementDecl->loc->fSchemaHandler->schemaDocument2SystemId->element2->grammar->getGlobalElementDecl->if->grammar->addGlobalElementDecl->if->if->fSchemaHandler->addGlobalElementDecl->return
XSDHandler#parseSchema(XMLInputSource, XSDDescription, Map):::This method initiates the parse of a schema:::fSchemaParser->resetNodePool->grammar->schemaNamespace->referType->desc->getContextType->if->if->isExistingGrammar->fGrammarBucket->desc->getTargetNamespace->getGrammar->else->findGrammar->if->if->return->else->try->if->grammar->getDocumentLocations->XMLEntityManager->is->getSystemId->is->getBaseSystemId->expandSystemId->contains->return->catch->finally->desc->getTargetNamespace->if->fSymbolTable->addSymbol->prepareForParse->schemaRoot->if->getSchemaDocument->else->if->getSchemaDocument->else->if->getSchemaDocument->else->if->getSchemaDocument->else->getSchemaDocument->if->if->xsinput->grammars->xsinput->getGrammars->if->fGrammarBucket->getTargetNamespace->getGrammar->else->components->xsinput->getComponents->if->fGrammarBucket->getNamespace->getGrammar->return->if->schemaElem->DOMUtil->getAttrValue->if->schemaNamespace->length->fSymbolTable->addSymbol->desc->setTargetNamespace->else->findGrammar->schemaId->XMLEntityManager->is->getSystemId->is->getBaseSystemId->expandSystemId->if->if->grammar->getDocumentLocations->contains->return->key->new->XSDKey->fTraversed->put->if->fDoc2SystemId->put->prepareForTraverse->is->getSystemId->constructTrees->if->return->buildGlobalNameRegistries->annotationInfo->new->ArrayList<>->traverseSchemas->traverseLocalElements->resolveKeyRefs->for->i->fAllTNSs->size->if->annotationInfo->size->validateAnnotations->return->fGrammarBucket->getGrammar
XSDHandler#getGrammar(String):::Pull the grammar out of the bucket simply using its TNS as a key:::return->fGrammarBucket->getGrammar
XSDHandler#findGrammar(XSDDescription, boolean):::First try to find a grammar in the bucket, if failed, consult the grammar pool:::sg->fGrammarBucket->desc->getTargetNamespace->getGrammar->if->if->fGrammarPool->retrieveGrammar->if->if->fGrammarBucket->putGrammar->reportSchemaWarning->return
XSDHandler#traverseLocalElements():::Traverse all the deferred local elements:::for->i
XSDHandler#checkForDuplicateNames(String, int, Map, Map, Element, XSDocumentInfo):::This method makes sure that if this component is being redefined that it lives in the right schema:::objElem->if->registry->get->if->checkForDuplicateNames->registry->put->registry_sub->put->else->collidingElem->collidingElemSchema->registry_sub->get->if->return->elemParent->redefinedSchema->collidedWithRedefine->if->DOMUtil->DOMUtil->getParent->getLocalName->equals->fRedefine2XSDMap->get->else->if->DOMUtil->DOMUtil->getParent->getLocalName->equals->if->if->new->ObjectArr->reportSchemaError->return->newName->qName->qName->lastIndexOf->substring->if->currComp->setAttribute->if->registry->put->registry_sub->put->else->registry->put->registry_sub->put->if->checkForDuplicateNames->else->checkForDuplicateNames->else->if->if->checkForDuplicateNames->else->checkForDuplicateNames->else->new->ObjectArr->reportSchemaError->else->if->new->ObjectArr->reportSchemaError->else->if->if->get->new->ObjectArr->reportSchemaError->if->if->new->HashMap<>->put
XSDHandler#element2Locator(Element):::Extract location information from an Element node, and create a new SimpleLocator object from such information:::if->return->l->new->SimpleLocator->return->element2Locator
XSDHandler#element2Locator(Element, SimpleLocator):::Extract location information from an Element node, store such information in the passed-in SimpleLocator object, then return true:::if->return->if->ele->doc->ele->getOwnerDocument->sid->fDoc2SystemId->DOMUtil->getRoot->get->line->ele->getLineNumber->column->ele->getColumnNumber->l->ele->getCharacterOffset->setValues->return->return
XSDWildcardTraverser#traverseAny(Element, XSDocumentInfo, SchemaGrammar):::Traverse &lt;any&gt;:::attrValues->fAttrChecker->checkAttributes->wildcard->traverseWildcardDecl->particle->if->min->intValue->max->intValue->if->if->getParticleDecl->else->new->XSParticleDecl->fAttrChecker->returnAttrArray->return
XSDWildcardTraverser#traverseAnyAttribute(Element, XSDocumentInfo, SchemaGrammar):::Traverse &lt;anyAttribute&gt;:::attrValues->fAttrChecker->checkAttributes->wildcard->traverseWildcardDecl->fAttrChecker->returnAttrArray->return

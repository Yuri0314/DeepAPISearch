SchemaContentHandler#getDocument()::: schema content handler get document:::return->fSchemaDOMParser->getDocument
SchemaContentHandler#setDocumentLocator(Locator)::: schema content handler set document locator:::fSAXLocatorWrapper->setLocator
SchemaContentHandler#startDocument()::: schema content handler start document:::fNamespaceContext->reset->try->fSchemaDOMParser->startDocument->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#endDocument()::: schema content handler end document:::fSAXLocatorWrapper->setLocator->try->fSchemaDOMParser->endDocument->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#startPrefixMapping(String, String)::: schema content handler start prefix mapping:::if->fNamespaceContext->pushContext->if->fSymbolTable->addSymbol->uri->length->fSymbolTable->addSymbol->else->if->if->uri->length->fNamespaceContext->declarePrefix
SchemaContentHandler#endPrefixMapping(String)::: schema content handler end prefix mapping:::
SchemaContentHandler#startElement(String, String, String, Attributes)::: schema content handler start element:::if->fNamespaceContext->pushContext->fillQName->fillXMLAttributes->if->prefixCount->fNamespaceContext->getDeclaredPrefixCount->if->addNamespaceDeclarations->try->fSchemaDOMParser->startElement->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#endElement(String, String, String)::: schema content handler end element:::fillQName->try->fSchemaDOMParser->endElement->catch->convertToSAXParseException->convertToSAXException->finally->fNamespaceContext->popContext
SchemaContentHandler#characters(char[], int, int)::: schema content handler characters:::try->fTempString->setValues->fSchemaDOMParser->characters->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#ignorableWhitespace(char[], int, int)::: schema content handler ignorable whitespace:::try->fTempString->setValues->fSchemaDOMParser->ignorableWhitespace->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#processingInstruction(String, String)::: schema content handler processing instruction:::try->fTempString->data->toCharArray->data->length->setValues->fSchemaDOMParser->processingInstruction->catch->convertToSAXParseException->convertToSAXException->finally
SchemaContentHandler#skippedEntity(String)::: schema content handler skipped entity:::
SchemaContentHandler#fillQName(QName, String, String, String)::: schema content handler fill name:::if->uri->length->fSymbolTable->addSymbol->fSymbolTable->addSymbol->fSymbolTable->addSymbol->else->if->uri->length->if->if->prefix->prefixIdx->rawname->indexOf->if->fSymbolTable->rawname->substring->addSymbol->if->fSymbolTable->rawname->substring->addSymbol->else->if->toFill->setValues
SchemaContentHandler#fillXMLAttributes(Attributes)::: schema content handler fill attributes:::fAttributes->removeAllAttributes->attrCount->atts->getLength->for->i
SchemaContentHandler#addNamespaceDeclarations(int)::: schema content handler add namespace declarations:::prefix->localpart->rawname->nsPrefix->nsURI->for->i
SchemaContentHandler#reset(SchemaDOMParser, SymbolTable, boolean, boolean)::: schema content handler reset:::
SchemaContentHandler#convertToSAXParseException(XMLParseException)::: schema content handler convert to parse exception:::ex->e->getException->if->locatorImpl->new->LocatorImpl->locatorImpl->e->getPublicId->setPublicId->locatorImpl->e->getExpandedSystemId->setSystemId->locatorImpl->e->getLineNumber->setLineNumber->locatorImpl->e->getColumnNumber->setColumnNumber->throw->e->getMessage->new->SAXParseException->if->throw->throw->new->SAXException
SchemaContentHandler#convertToSAXException(XNIException)::: schema content handler convert to exception:::ex->e->getException->if->throw->e->getMessage->new->SAXException->if->throw->throw->new->SAXException
StAXSchemaParser#reset(SchemaDOMParser, SymbolTable)::: st schema parser reset:::fNamespaceContext->setSymbolTable->fNamespaceContext->reset
StAXSchemaParser#getDocument()::: st schema parser get document:::return->fSchemaDOMParser->getDocument
StAXSchemaParser#parse(XMLEventReader)::: st schema parser parse:::currentEvent->input->peek->if->eventType->currentEvent->getEventType->if->throw->new->XMLStreamException->fLocationWrapper->currentEvent->getLocation->setLocation->fSchemaDOMParser->startDocument->while->input->hasNext->input->nextEvent->currentEvent->getEventType->switch->start->currentEvent->asStartElement->start->getName->fillQName->fLocationWrapper->start->getLocation->setLocation->fNamespaceContext->start->getNamespaceContext->setNamespaceContext->fillXMLAttributes->fillDeclaredPrefixes->addNamespaceDeclarations->fNamespaceContext->pushContext->fSchemaDOMParser->startElement->break->end->currentEvent->asEndElement->end->getName->fillQName->fillDeclaredPrefixes->fLocationWrapper->end->getLocation->setLocation->fSchemaDOMParser->endElement->fNamespaceContext->popContext->if->break->break->currentEvent->asCharacters->getData->sendCharactersToSchemaParser->break->currentEvent->asCharacters->getData->sendCharactersToSchemaParser->break->fSchemaDOMParser->startCDATA->currentEvent->asCharacters->getData->sendCharactersToSchemaParser->fSchemaDOMParser->endCDATA->break->pi->pi->getData->fillProcessingInstruction->fSchemaDOMParser->pi->getTarget->processingInstruction->break->break->break->break->break->break->fLocationWrapper->setLocation->fNamespaceContext->setNamespaceContext->fSchemaDOMParser->endDocument
StAXSchemaParser#parse(XMLStreamReader)::: st schema parser parse:::if->input->hasNext->eventType->input->getEventType->if->throw->new->XMLStreamException->fLocationWrapper->input->getLocation->setLocation->fSchemaDOMParser->startDocument->first->while->input->hasNext->if->input->next->else->switch->fLocationWrapper->input->getLocation->setLocation->fNamespaceContext->input->getNamespaceContext->setNamespaceContext->input->getNamespaceURI->input->getLocalName->input->getPrefix->fillQName->fillXMLAttributes->fillDeclaredPrefixes->addNamespaceDeclarations->fNamespaceContext->pushContext->fSchemaDOMParser->startElement->break->fLocationWrapper->input->getLocation->setLocation->fNamespaceContext->input->getNamespaceContext->setNamespaceContext->input->getNamespaceURI->input->getLocalName->input->getPrefix->fillQName->fillDeclaredPrefixes->fSchemaDOMParser->endElement->fNamespaceContext->popContext->if->break->break->fTempString->input->getTextCharacters->input->getTextStart->input->getTextLength->setValues->fSchemaDOMParser->characters->break->fTempString->input->getTextCharacters->input->getTextStart->input->getTextLength->setValues->fSchemaDOMParser->ignorableWhitespace->break->fSchemaDOMParser->startCDATA->fTempString->input->getTextCharacters->input->getTextStart->input->getTextLength->setValues->fSchemaDOMParser->characters->fSchemaDOMParser->endCDATA->break->input->getPIData->fillProcessingInstruction->fSchemaDOMParser->input->getPITarget->processingInstruction->break->break->break->break->break->break->fLocationWrapper->setLocation->fNamespaceContext->setNamespaceContext->fSchemaDOMParser->endDocument
StAXSchemaParser#sendCharactersToSchemaParser(String, boolean):::Send characters to the validator in CHUNK_SIZE character chunks.:::if->length->str->length->remainder->if->str->getChars->fTempString->setValues->if->fSchemaDOMParser->ignorableWhitespace->else->fSchemaDOMParser->characters->i->while->str->getChars->fTempString->setValues->if->fSchemaDOMParser->ignorableWhitespace->else->fSchemaDOMParser->characters
StAXSchemaParser#fillProcessingInstruction(String)::: st schema parser fill processing instruction:::dataLength->data->length->charBuffer->if->data->toCharArray->else->data->getChars->fTempString->setValues
StAXSchemaParser#fillXMLAttributes(StartElement)::: st schema parser fill attributes:::fAttributes->removeAllAttributes->attrs->event->getAttributes->while->attrs->hasNext->attr->attrs->next->attr->getName->fillQName->type->attr->getDTDType->idx->fAttributes->getLength->fAttributes->attr->getValue->addAttributeNS->fAttributes->attr->isSpecified->setSpecified
StAXSchemaParser#fillXMLAttributes(XMLStreamReader)::: st schema parser fill attributes:::fAttributes->removeAllAttributes->len->input->getAttributeCount->for->i
StAXSchemaParser#addNamespaceDeclarations()::: st schema parser add namespace declarations:::prefix->localpart->rawname->nsPrefix->nsURI->iter->fDeclaredPrefixes->iterator->while->iter->hasNext->iter->next->fNamespaceContext->getURI->if->nsPrefix->length->fStringBuffer->clear->fStringBuffer->append->fStringBuffer->append->fStringBuffer->append->fSymbolTable->addSymbol->else->fAttributeQName->setValues->fAttributes->addAttribute
StAXSchemaParser#fillDeclaredPrefixes(StartElement):::Fills in the list of declared prefixes.:::event->getNamespaces->fillDeclaredPrefixes
StAXSchemaParser#fillDeclaredPrefixes(EndElement):::Fills in the list of declared prefixes.:::event->getNamespaces->fillDeclaredPrefixes
StAXSchemaParser#fillDeclaredPrefixes(Iterator):::Fills in the list of declared prefixes.:::fDeclaredPrefixes->clear->while->namespaces->hasNext->ns->namespaces->next->prefix->ns->getPrefix->fDeclaredPrefixes->add
StAXSchemaParser#fillDeclaredPrefixes(XMLStreamReader):::Fills in the list of declared prefixes.:::fDeclaredPrefixes->clear->len->reader->getNamespaceCount->for->i
StAXSchemaParser#fillQName(QName, javax.xml.namespace.QName):::Fills in a QName object.:::toCopy->getNamespaceURI->toCopy->getLocalPart->toCopy->getPrefix->fillQName
StAXSchemaParser#fillQName(QName, String, String, String):::Fills in a QName object.:::uri->length->fSymbolTable->addSymbol->fSymbolTable->addSymbol->prefix->length->fSymbolTable->addSymbol->raw->if->fStringBuffer->clear->fStringBuffer->append->fStringBuffer->append->fStringBuffer->append->fSymbolTable->addSymbol->toFill->setValues
XSAttributeChecker#reset(SymbolTable)::: attribute checker reset:::fNonSchemaAttrs->clear
XSAttributeChecker#checkAttributes(Element, boolean, XSDocumentInfo):::Check whether the specified element conforms to the attributes restriction an array of attribute values is returned:::return->checkAttributes
XSAttributeChecker#checkAttributes(Element, boolean, XSDocumentInfo, boolean):::Check whether the specified element conforms to the attributes restriction an array of attribute values is returned:::if->return->attrs->DOMUtil->getAttrs->resolveNamespace->uri->DOMUtil->getNamespaceURI->elName->DOMUtil->getLocalName->if->equals->new->ObjectArr->reportSchemaError->eleAttrsMap->lookupName->if->if->elName->equals->if->DOMUtil->getAttr->else->else->if->elName->equals->if->DOMUtil->getAttr->else->attrList->eleAttrsMap->get->if->new->ObjectArr->reportSchemaError->return->attrValues->getAvailableArray->fromDefault->System->arraycopy->length->sattr->for->i->reqAttrs->for->i->if->min->intValue->max->intValue->if->if->localName->element->getLocalName->optimize->localName->equals->localName->equals->element->getNextSibling->element->getPreviousSibling->element->getParentNode->getLocalName->equals->if->maxOccurNodeLimit->getLimit->if->isNoLimit->new->ObjectArr->reportSchemaFatalError->fXIntPool->getXInt->if->new->ObjectArr->reportSchemaError->return
XSAttributeChecker#validate(Object[], String, String, int, XSDocumentInfo)::: attribute checker validate:::if->return->value->XMLChar->trim->retValue->memberType->choice->switch->if->value->equals->value->equals->else->if->value->equals->value->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->try->if->value->length->value->charAt->value->substring->fXIntPool->Integer->parseInt->getXInt->catch->throw->new->ObjectArr->new->InvalidDatatypeValueException->finally->if->intValue->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->try->if->value->length->value->charAt->value->substring->fXIntPool->Integer->parseInt->getXInt->catch->throw->new->ObjectArr->new->InvalidDatatypeValueException->finally->if->intValue->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->if->value->equals->else->t->new->StringTokenizer->while->t->hasMoreTokens->token->t->nextToken->if->token->equals->else->if->token->equals->else->if->token->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->fXIntPool->getXInt->break->if->value->equals->else->t->new->StringTokenizer->while->t->hasMoreTokens->token->t->nextToken->if->token->equals->else->if->token->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->fXIntPool->getXInt->break->if->value->equals->else->t->new->StringTokenizer->while->t->hasMoreTokens->token->t->nextToken->if->token->equals->else->if->token->equals->else->if->token->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->fXIntPool->getXInt->break->if->value->equals->else->t->new->StringTokenizer->while->t->hasMoreTokens->token->t->nextToken->if->token->equals->else->if->token->equals->else->if->token->equals->else->if->token->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->fXIntPool->getXInt->break->if->value->equals->else->if->value->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->if->value->equals->else->try->validate->catch->throw->new->ObjectArr->new->InvalidDatatypeValueException->finally->break->if->value->equals->fXIntPool->getXInt->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->new->ArrayList<>->try->t->new->StringTokenizer->while->t->hasMoreTokens->token->t->nextToken->qname->validate->if->memberType->add->catch->throw->new->ObjectArr->new->InvalidDatatypeValueException->finally->break->if->value->equals->fXIntPool->getXInt->else->if->value->equals->fXIntPool->getXInt->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->if->value->equals->else->if->value->equals->list->new->StringArr->else->fNamespaceList->clear->tokens->new->StringTokenizer->token->tempNamespace->try->while->tokens->hasMoreTokens->tokens->nextToken->if->token->equals->else->if->token->equals->else->validate->fSymbolTable->addSymbol->if->fNamespaceList->contains->fNamespaceList->add->catch->throw->new->ObjectArr->new->InvalidDatatypeValueException->finally->num->fNamespaceList->size->list->new->StringArr->fNamespaceList->toArray->break->if->value->equals->else->if->value->equals->else->if->value->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->if->value->equals->else->if->value->equals->else->if->value->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->if->value->equals->else->if->value->equals->else->if->value->equals->else->throw->new->ObjectArr->new->InvalidDatatypeValueException->break->return
XSAttributeChecker#reportSchemaFatalError(String, Object[], Element)::: attribute checker report schema fatal error:::fSchemaHandler->reportSchemaFatalError
XSAttributeChecker#reportSchemaError(String, Object[], Element)::: attribute checker report schema error:::fSchemaHandler->reportSchemaError
XSAttributeChecker#checkNonSchemaAttributes(XSGrammarBucket)::: attribute checker check non schema attributes:::attrDecl->foreach->fNonSchemaAttrs->entrySet->attrRName->entry->getKey->attrURI->attrRName->attrRName->indexOf->substring->attrLocal->attrRName->attrRName->indexOf->substring->sGrammar->grammarBucket->getGrammar->if->continue->sGrammar->getGlobalAttributeDecl->if->continue->dv->attrDecl->getTypeDefinition->if->continue->values->entry->getValue->elName->attrName->values->get->count->values->size->for->i
XSAttributeChecker#normalize(String, short)::: attribute checker normalize:::len->content->length->if->return->sb->new->StringBuilder->if->ch->for->i->else->ch->i->isLeading->for->return->sb->toString
XSAttributeChecker#getAvailableArray()::: attribute checker get available array:::if->new->ObjectArrs->for->i->retArray->System->arraycopy->return
XSAttributeChecker#returnAttrArray(Object[], XSDocumentInfo)::: attribute checker return attr array:::if->popContext->if->return->if->clear
XSAttributeChecker#resolveNamespace(Element, Attr[], SchemaNamespaceSupport)::: attribute checker resolve namespace:::nsSupport->pushContext->length->sattr->rawname->prefix->uri->for->i
Container#getContainer(int)::: container get container:::if->return->new->LargeContainer->else->return->new->SmallContainer
Container#put(String, OneAttr)::: container put:::
Container#get(String)::: container get:::
SmallContainer#put(String, OneAttr)::: small container put:::
SmallContainer#get(String)::: small container get:::for->i->return
LargeContainer#put(String, OneAttr)::: large container put:::items->put
LargeContainer#get(String)::: large container get:::ret->items->get->return
XSDAbstractIDConstraintTraverser#traverseIdentityConstraint(IdentityConstraint, Element, XSDocumentInfo, Object[])::: abstract constraint traverser traverse identity constraint:::sElem->DOMUtil->getFirstChildElement->if->new->ObjectArr->reportSchemaError->return->if->DOMUtil->getLocalName->equals->ic->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->if->new->ObjectArr->reportSchemaError->return->else->text->DOMUtil->getSyntheticAnnotation->if->ic->traverseSyntheticAnnotation->addAnnotation->if->DOMUtil->getLocalName->equals->new->ObjectArr->reportSchemaError->return->attrValues->fAttrChecker->checkAttributes->selChild->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->ic->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->text->DOMUtil->getSyntheticAnnotation->if->ic->traverseSyntheticAnnotation->addAnnotation->sText->if->new->ObjectArr->reportSchemaError->return->XMLChar->trim->sXpath->try->new->Selector.XPath->selector->new->Selector->ic->setSelector->catch->e->getKey->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->finally->fAttrChecker->returnAttrArray->fElem->DOMUtil->getNextSiblingElement->if->new->ObjectArr->reportSchemaError->return->while->if->DOMUtil->getLocalName->equals->new->ObjectArr->reportSchemaError->DOMUtil->getNextSiblingElement->continue->fAttrChecker->checkAttributes->fieldChild->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->ic->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->text->DOMUtil->getSyntheticAnnotation->if->ic->traverseSyntheticAnnotation->addAnnotation->fText->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->XMLChar->trim->try->fXpath->new->Field.XPath->field->new->Field->ic->addField->catch->e->getKey->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->finally->DOMUtil->getNextSiblingElement->fAttrChecker->returnAttrArray->return->ic->getFieldCount
XSDAbstractParticleTraverser#traverseAll(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the "All" declaration  <all   id = ID   maxOccurs = 1 : 1   minOccurs = (0 | 1) : 1>   Content: (annotation? , element*) </all>:::attrValues->fAttrChecker->checkAttributes->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->childName->particle->fPArray->pushContext->for->DOMUtil->getNextSiblingElement->minAtt->maxAtt->defaultVals->group->new->XSModelGroupImpl->fPArray->getParticleCount->fPArray->popContext->annotations->if->new->XSObjectListImpl->addXSObject->else->new->XSParticleDecl->minAtt->intValue->maxAtt->intValue->allDecl->getParentNode->defaultVals->longValue->checkOccurrences->fAttrChecker->returnAttrArray->return
XSDAbstractParticleTraverser#traverseSequence(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the Sequence declaration  <sequence   id = ID   maxOccurs = string   minOccurs = nonNegativeInteger>   Content: (annotation? , (element | group | choice | sequence | any)*) </sequence>:::return->traverseSeqChoice
XSDAbstractParticleTraverser#traverseChoice(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse the Choice declaration  <choice   id = ID   maxOccurs = string   minOccurs = nonNegativeInteger>   Content: (annotation? , (element | group | choice | sequence | any)*) </choice>:::return->traverseSeqChoice
XSDAbstractParticleTraverser#traverseSeqChoice(Element, XSDocumentInfo, SchemaGrammar, int, boolean, XSObject):::Common traversal for <choice> and <sequence>:::attrValues->fAttrChecker->checkAttributes->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->childName->particle->fPArray->pushContext->for->DOMUtil->getNextSiblingElement->minAtt->maxAtt->defaultVals->group->new->XSModelGroupImpl->fPArray->getParticleCount->fPArray->popContext->annotations->if->new->XSObjectListImpl->addXSObject->else->new->XSParticleDecl->minAtt->intValue->maxAtt->intValue->decl->getParentNode->defaultVals->longValue->checkOccurrences->fAttrChecker->returnAttrArray->return
XSDAbstractParticleTraverser#hasAllContent(XSParticleDecl)::: abstract particle traverser has all content:::if->return->return
XSDAbstractParticleTraverser.ParticleArray#pushContext()::: particle array push context:::if->newSize->newArray->new->intArr->System->arraycopy
XSDAbstractParticleTraverser.ParticleArray#getParticleCount()::: particle array get particle count:::return
XSDAbstractParticleTraverser.ParticleArray#addParticle(XSParticleDecl)::: particle array add particle:::if->newSize->newArray->new->XSParticleDeclArr->System->arraycopy
XSDAbstractParticleTraverser.ParticleArray#popContext()::: particle array pop context:::count->array->if->new->XSParticleDeclArr->System->arraycopy->for->i->return
XSDAbstractTraverser#reset(SymbolTable, boolean, Locale)::: abstract traverser reset:::fValidationState->setExtraChecking->fValidationState->setSymbolTable->fValidationState->setLocale
XSDAbstractTraverser#traverseAnnotationDecl(Element, Object[], boolean, XSDocumentInfo)::: abstract traverser traverse annotation decl:::attrValues->fAttrChecker->checkAttributes->fAttrChecker->returnAttrArray->contents->DOMUtil->getAnnotation->child->DOMUtil->getFirstChildElement->if->do->name->DOMUtil->getLocalName->if->name->equals->name->equals->new->ObjectArr->reportSchemaError->else->fAttrChecker->checkAttributes->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->while->if->return->grammar->fSchemaHandler->getGrammar->annotationLocalAttrs->if->annotationLocalAttrs->isEmpty->localStrBuffer->new->StringBuilder->localStrBuffer->append->i->while->annotationLocalAttrs->size->rawname->annotationLocalAttrs->get->colonIndex->rawname->indexOf->prefix->localpart->if->else->rawname->substring->rawname->substring->uri->fSymbolTable->addSymbol->getURI->if->annotationDecl->getAttributeNS->length->continue->localStrBuffer->append->append->value->annotationLocalAttrs->get->processAttValue->localStrBuffer->append->append->contentBuffer->contents->length->localStrBuffer->length->new->StringBuilder->annotationTokenEnd->contents->indexOf->if->return->length->contentBuffer->contents->substring->append->contentBuffer->localStrBuffer->toString->append->contentBuffer->contents->contents->length->substring->append->annotation->contentBuffer->toString->if->schemaDoc->new->XSAnnotationInfo->addAnnotation->return->new->XSAnnotationImpl->else->if->schemaDoc->new->XSAnnotationInfo->addAnnotation->return->new->XSAnnotationImpl
XSDAbstractTraverser#traverseSyntheticAnnotation(Element, String, Object[], boolean, XSDocumentInfo)::: abstract traverser traverse synthetic annotation:::contents->grammar->fSchemaHandler->getGrammar->annotationLocalAttrs->if->annotationLocalAttrs->isEmpty->localStrBuffer->new->StringBuilder->localStrBuffer->append->i->while->annotationLocalAttrs->size->rawname->annotationLocalAttrs->get->colonIndex->rawname->indexOf->prefix->localpart->if->else->rawname->substring->rawname->substring->uri->fSymbolTable->addSymbol->getURI->localStrBuffer->append->append->value->annotationLocalAttrs->get->processAttValue->localStrBuffer->append->append->contentBuffer->contents->length->localStrBuffer->length->new->StringBuilder->annotationTokenEnd->contents->indexOf->if->return->length->contentBuffer->contents->substring->append->contentBuffer->localStrBuffer->toString->append->contentBuffer->contents->contents->length->substring->append->annotation->contentBuffer->toString->if->schemaDoc->new->XSAnnotationInfo->addAnnotation->return->new->XSAnnotationImpl->else->if->schemaDoc->new->XSAnnotationInfo->addAnnotation->return->new->XSAnnotationImpl
XSDAbstractTraverser#traverseFacets(Element, XSTypeDefinition, XSSimpleType, XSDocumentInfo)::: abstract traverser traverse facets:::facetsPresent->facetsFixed->facet->hasQName->containsQName->enumData->enumAnnotations->patternAnnotations->enumNSDecls->new->ArrayList<>->currentFacet->xsFacets->reset->seenPattern->contextNode->content->getParentNode->hasLengthFacet->hasMinLengthFacet->hasMaxLengthFacet->while->attrs->DOMUtil->getLocalName->if->facet->equals->fAttrChecker->checkAttributes->enumVal->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->continue->nsDecls->if->baseValidator->getVariety->baseValidator->getPrimitiveKind->setNamespaceSupport->notation->try->temp->fQNameDV->validate->fSchemaHandler->getGlobalDecl->catch->ex->getKey->ex->getArgs->reportSchemaError->finally->if->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->continue->setNamespaceSupport->if->new->ArrayList<>->new->XSObjectListImpl->enumData->add->enumAnnotations->addXSObject->if->enumNSDecls->add->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->enumAnnotations->enumAnnotations->getLength->traverseAnnotationDecl->addXSObject->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->enumAnnotations->enumAnnotations->getLength->traverseSyntheticAnnotation->addXSObject->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->if->facet->equals->fAttrChecker->checkAttributes->patternVal->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->continue->if->fPattern->length->fPattern->append->else->fPattern->append->fPattern->append->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->if->new->XSObjectListImpl->patternAnnotations->traverseAnnotationDecl->addXSObject->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->if->new->XSObjectListImpl->patternAnnotations->traverseSyntheticAnnotation->addXSObject->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->if->facet->equals->else->break->fAttrChecker->checkAttributes->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->continue->if->if->content->getAttributeNodeNS->new->ObjectArr->content->getLocalName->reportSchemaError->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->continue->if->booleanValue->switch->intValue->break->intValue->break->break->break->break->break->intValue->break->intValue->break->shortValue->break->intValue->break->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->switch->break->break->break->break->break->break->break->break->break->break->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->fAttrChecker->returnAttrArray->DOMUtil->getNextSiblingElement->if->if->fPattern->toString->fPattern->setLength->if->if->getSchemaTypeName->checkEnumerationAndLengthInconsistency->if->getSchemaTypeName->checkEnumerationAndMinLengthInconsistency->if->getSchemaTypeName->checkEnumerationAndMaxLengthInconsistency->return->new->FacetInfo
XSDAbstractTraverser#getSchemaTypeName(XSTypeDefinition)::: abstract traverser get schema type name:::typeNameStr->if->getTypeName->else->getTypeName->return
XSDAbstractTraverser#checkEnumerationAndMaxLengthInconsistency(XSSimpleType, List, Element, String)::: abstract traverser check enumeration and max length inconsistency:::if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->for->enumIdx->enumData->size
XSDAbstractTraverser#checkEnumerationAndMinLengthInconsistency(XSSimpleType, List, Element, String)::: abstract traverser check enumeration and min length inconsistency:::if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->for->enumIdx->enumData->size
XSDAbstractTraverser#checkEnumerationAndLengthInconsistency(XSSimpleType, List, Element, String)::: abstract traverser check enumeration and length inconsistency:::if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->if->baseValidator->getNamespace->equals->baseValidator->getName->equals->for->enumIdx->enumData->size->else->for->enumIdx->enumData->size
XSDAbstractTraverser#containsQName(XSSimpleType)::: abstract traverser contains name:::if->type->getVariety->primitive->type->getPrimitiveKind->return->else->if->type->getVariety->return->type->getItemType->containsQName->else->if->type->getVariety->members->type->getMemberTypes->for->i->members->getLength->return
XSDAbstractTraverser#traverseAttrsAndAttrGrps(Element, XSAttributeGroupDecl, XSDocumentInfo, SchemaGrammar, XSComplexTypeDecl)::: abstract traverser traverse attrs and attr grps:::child->tempAttrGrp->tempAttrUse->otherUse->childName->for->DOMUtil->getNextSiblingElement->if->DOMUtil->getLocalName->if->childName->equals->tempAttrWC->traverseAnyAttribute->if->else->tempAttrWC->performIntersectionWith->if->code->name->enclosingCT->getName->new->ObjectArr->reportSchemaError->DOMUtil->getNextSiblingElement->return
XSDAbstractTraverser#reportSchemaError(String, Object[], Element)::: abstract traverser report schema error:::fSchemaHandler->reportSchemaError
XSDAbstractTraverser#reportSchemaWarning(String, Object[], Element)::: abstract traverser report schema warning:::fSchemaHandler->reportSchemaWarning
XSDAbstractTraverser#checkNotationType(String, XSTypeDefinition, Element):::Element/Attribute traversers call this method to check whether the type is NOTATION without enumeration facet:::if->typeDecl->getTypeCategory->getVariety->getPrimitiveKind->if->getDefinedFacets->new->ObjectArr->typeDecl->getName->DOMUtil->getLocalName->reportSchemaError
XSDAbstractTraverser#checkOccurrences(XSParticleDecl, String, Element, int, long)::: abstract traverser check occurrences:::min->max->defaultMin->defaultMax->processingAllEl->processingAllGP->groupRefWithAll->isGroupChild->if->if->args->new->ObjectArr->reportSchemaError->if->args->new->ObjectArr->reportSchemaError->if->return->if->if->new->ObjectArr->Integer->toString->getName->reportSchemaError->if->else->if->if->reportSchemaError->if->return
XSDAbstractTraverser#processAttValue(String)::: abstract traverser process att value:::length->original->length->for->i->return
XSDAbstractTraverser#escapeAttValue(String, int)::: abstract traverser escape att value:::i->length->original->length->newVal->new->StringBuilder->newVal->original->substring->append->for->return->newVal->toString
XSDAttributeGroupTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar)::: attribute group traverser traverse local:::attrValues->fAttrChecker->checkAttributes->refAttr->attrGrp->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->args->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->fAttrChecker->returnAttrArray->return
XSDAttributeGroupTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar)::: attribute group traverser traverse global:::attrGrp->new->XSAttributeGroupDecl->attrValues->fAttrChecker->checkAttributes->nameAttr->if->new->ObjectArr->reportSchemaError->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->nextNode->traverseAttrsAndAttrGrps->if->args->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->nameAttr->equals->fAttrChecker->returnAttrArray->return->attrGrp->removeProhibitedAttrs->redefinedAttrGrp->fSchemaHandler->new->QName->getGrpOrAttrGrpRedefinedByRestriction->if->errArgs->attrGrp->validRestrictionOf->if->reportSchemaError->new->ObjectArr->reportSchemaError->annotations->if->new->XSObjectListImpl->addXSObject->else->if->grammar->getGlobalAttributeGroupDecl->grammar->addGlobalAttributeGroupDecl->loc->fSchemaHandler->schemaDocument2SystemId->attrGrp2->grammar->getGlobalAttributeGroupDecl->if->grammar->addGlobalAttributeGroupDecl->if->if->fSchemaHandler->addGlobalAttributeGroupDecl->fAttrChecker->returnAttrArray->return
XSDAttributeTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar, XSComplexTypeDecl)::: attribute traverser traverse local:::attrValues->fAttrChecker->checkAttributes->defaultAtt->fixedAtt->nameAtt->refAtt->useAtt->attribute->annotation->if->attrDecl->getAttributeNode->if->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->reportSchemaError->else->else->traverseNamedAttr->consType->if->else->if->attrUse->if->if->getAttributeUse->else->new->XSAttributeUseImpl->useAtt->shortValue->if->new->ValidatedInfo->if->attrDecl->getAttributeNode->attribute->getAnnotations->else->annotations->if->new->XSObjectListImpl->addXSObject->else->if->new->ObjectArr->reportSchemaError->if->useAtt->intValue->new->ObjectArr->reportSchemaError->if->fValidationState->setNamespaceSupport->try->checkDefaultValid->catch->ide->getKey->ide->getArgs->reportSchemaError->new->ObjectArr->reportSchemaError->finally->if->attribute->getTypeDefinition->isIDType->new->ObjectArr->reportSchemaError->if->getConstraintType->if->getValInfo->equals->new->ObjectArr->getValInfo->stringValue->reportSchemaError->getValInfo->fAttrChecker->returnAttrArray->return
XSDAttributeTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar)::: attribute traverser traverse global:::attrValues->fAttrChecker->checkAttributes->attribute->traverseNamedAttr->fAttrChecker->returnAttrArray->return
XSDAttributeTraverser#traverseNamedAttr(Element, Object[], XSDocumentInfo, SchemaGrammar, boolean, XSComplexTypeDecl):::Traverse a globally declared attribute.:::defaultAtt->fixedAtt->formAtt->nameAtt->typeAtt->attribute->if->getAttributeDecl->else->new->XSAttributeDecl->if->fSymbolTable->addSymbol->tnsAtt->enclCT->scope->if->else->if->if->if->formAtt->intValue->else->if->attDefault->constraintType->if->if->new->ValidatedInfo->else->if->new->ValidatedInfo->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->attrType->haveAnonType->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->if->type->fSchemaHandler->getGlobalDecl->if->type->getTypeCategory->else->new->ObjectArr->reportSchemaError->if->if->annotations->if->new->XSObjectListImpl->addXSObject->else->attribute->setValues->if->if->new->ObjectArr->reportSchemaError->else->reportSchemaError->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->new->ObjectArr->reportSchemaError->if->new->ObjectArr->reportSchemaError->checkNotationType->if->fValidationState->setNamespaceSupport->try->checkDefaultValid->catch->ide->getKey->ide->getArgs->reportSchemaError->new->ObjectArr->reportSchemaError->attribute->setValues->finally->if->if->attrType->isIDType->new->ObjectArr->reportSchemaError->attribute->setValues->if->nameAtt->equals->reportSchemaError->return->if->tnsAtt->equals->new->ObjectArr->reportSchemaError->return->if->nameAtt->equals->return->if->if->grammar->getGlobalAttributeDecl->grammar->addGlobalAttributeDecl->loc->fSchemaHandler->schemaDocument2SystemId->attribute2->grammar->getGlobalAttributeDecl->if->grammar->addGlobalAttributeDecl->if->if->fSchemaHandler->addGlobalAttributeDecl->return
XSDAttributeTraverser#checkDefaultValid(XSAttributeDecl)::: attribute traverser check default valid:::attribute->getTypeDefinition->attribute->getValInfo->attribute->getValInfo->validate->attribute->getTypeDefinition->attribute->getValInfo->stringValue->attribute->getValInfo->validate
XSDAttributeTraverser#checkDefaultValid(XSAttributeUseImpl)::: attribute traverser check default valid:::getTypeDefinition->validate->getTypeDefinition->stringValue->validate
XSDComplexTypeTraverser#getErrorContent()::: complex type traverser get error content:::if->particle->new->XSParticleDecl->getErrorWildcard->group->new->XSModelGroupImpl->new->XSParticleDeclArr->errorContent->new->XSParticleDecl->return
XSDComplexTypeTraverser#getErrorWildcard()::: complex type traverser get error wildcard:::if->wildcard->new->XSWildcardDecl->return
XSDComplexTypeTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar):::Traverse local complexType declarations:::attrValues->fAttrChecker->checkAttributes->complexTypeName->genAnonTypeName->contentBackup->type->traverseComplexTypeDecl->contentRestore->grammar->fSchemaHandler->element2Locator->addComplexTypeDecl->type->setIsAnonymous->fAttrChecker->returnAttrArray->return
XSDComplexTypeTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar):::Traverse global complexType declarations:::attrValues->fAttrChecker->checkAttributes->complexTypeName->contentBackup->type->traverseComplexTypeDecl->contentRestore->grammar->fSchemaHandler->element2Locator->addComplexTypeDecl->if->new->ObjectArr->reportSchemaError->else->if->grammar->type->getName->getGlobalTypeDecl->grammar->addGlobalComplexTypeDecl->loc->fSchemaHandler->schemaDocument2SystemId->type2->grammar->type->getName->getGlobalTypeDecl->if->grammar->addGlobalComplexTypeDecl->if->if->if->fSchemaHandler->addGlobalTypeDecl->fAttrChecker->returnAttrArray->return
XSDComplexTypeTraverser#traverseComplexTypeDecl(Element, String, Object[], XSDocumentInfo, SchemaGrammar)::: complex type traverser traverse complex type decl:::new->XSComplexTypeDecl->new->XSAttributeGroupDecl->abstractAtt->blockAtt->mixedAtt->finalAtt->fComplexTypeDecl->setName->blockAtt->shortValue->finalAtt->shortValue->abstractAtt->booleanValue->child->try->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->DOMUtil->getLocalName->equals->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->mixedAtt->booleanValue->processComplexContent->else->if->DOMUtil->getLocalName->equals->traverseSimpleContent->elemTmp->DOMUtil->getNextSiblingElement->if->siblingName->DOMUtil->getLocalName->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->if->DOMUtil->getLocalName->equals->mixedAtt->booleanValue->traverseComplexContent->elemTmp->DOMUtil->getNextSiblingElement->if->siblingName->DOMUtil->getLocalName->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->mixedAtt->booleanValue->processComplexContent->catch->e->getMessage->handleComplexTypeError->finally->if->println->fComplexTypeDecl->new->XSObjectListImpl->setValues->return
XSDComplexTypeTraverser#traverseSimpleContent(Element, XSDocumentInfo, SchemaGrammar)::: complex type traverser traverse simple content:::simpleContentAttrValues->fAttrChecker->checkAttributes->simpleContent->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->simpleContentName->DOMUtil->getLocalName->if->simpleContentName->equals->else->if->simpleContentName->equals->else->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->elemTmp->DOMUtil->getNextSiblingElement->if->fAttrChecker->returnAttrArray->siblingName->DOMUtil->getLocalName->throw->new->ObjectArr->new->ComplexTypeRecoverableError->derivationTypeAttrValues->fAttrChecker->checkAttributes->baseTypeName->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->type->fSchemaHandler->getGlobalDecl->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ComplexTypeRecoverableError->baseValidator->baseComplexType->baseFinalSet->if->type->getTypeCategory->baseComplexType->getFinal->if->baseComplexType->getContentType->baseComplexType->getSimpleType->else->if->baseComplexType->getContentType->baseComplexType->getParticle->emptiable->else->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->baseComplexType->getName->new->ComplexTypeRecoverableError->else->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->baseValidator->getName->new->ComplexTypeRecoverableError->baseValidator->getFinal->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->errorKey->throw->new->ObjectArr->fBaseType->getName->new->ComplexTypeRecoverableError->scElement->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->DOMUtil->getLocalName->equals->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->if->DOMUtil->getLocalName->equals->dv->traverseLocal->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ComplexTypeRecoverableError->if->XSConstraints->baseValidator->getFinal->checkSimpleDerivationOk->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->dv->getName->baseValidator->getName->new->ComplexTypeRecoverableError->DOMUtil->getNextSiblingElement->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->attrNode->facetData->presentFacets->fixedFacets->if->fi->traverseFacets->name->genAnonTypeName->createTypeRestriction->try->fValidationState->setNamespaceSupport->fXSSimpleType->applyFacets->catch->ex->getKey->ex->getArgs->reportSchemaError->createTypeRestriction->finally->if->setAnonymous->if->if->isAttrOrAttrGroup->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->node->traverseAttrsAndAttrGrps->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->try->baseComplexType->getAttrGrp->mergeAttributes->catch->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->finally->fAttrGrp->removeProhibitedAttrs->errArgs->fAttrGrp->baseComplexType->getAttrGrp->validRestrictionOf->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ComplexTypeRecoverableError->else->if->attrNode->if->isAttrOrAttrGroup->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->node->traverseAttrsAndAttrGrps->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->fAttrGrp->removeProhibitedAttrs->if->try->baseComplexType->getAttrGrp->mergeAttributes->catch->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->finally->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray
XSDComplexTypeTraverser#traverseComplexContent(Element, boolean, XSDocumentInfo, SchemaGrammar)::: complex type traverser traverse complex content:::complexContentAttrValues->fAttrChecker->checkAttributes->mixedContent->mixedAtt->if->mixedAtt->booleanValue->complexContent->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->complexContentName->DOMUtil->getLocalName->if->complexContentName->equals->else->if->complexContentName->equals->else->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->elemTmp->DOMUtil->getNextSiblingElement->if->fAttrChecker->returnAttrArray->siblingName->DOMUtil->getLocalName->throw->new->ObjectArr->new->ComplexTypeRecoverableError->derivationTypeAttrValues->fAttrChecker->checkAttributes->baseTypeName->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->type->fSchemaHandler->getGlobalDecl->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ComplexTypeRecoverableError->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->type->getName->new->ComplexTypeRecoverableError->baseType->if->baseType->getFinal->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->errorKey->throw->new->ObjectArr->fBaseType->getName->new->ComplexTypeRecoverableError->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->addAnnotation->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->if->DOMUtil->getLocalName->equals->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->addAnnotation->try->processComplexContent->catch->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->finally->baseContent->baseType->getParticle->if->if->baseType->getContentType->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->baseType->getName->new->ComplexTypeRecoverableError->try->baseType->getAttrGrp->mergeAttributes->catch->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->finally->fAttrGrp->removeProhibitedAttrs->if->errArgs->fAttrGrp->baseType->getAttrGrp->validRestrictionOf->if->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ComplexTypeRecoverableError->else->if->baseType->getContentType->baseType->getSimpleType->else->if->baseType->getContentType->else->if->baseType->getContentType->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->else->if->baseType->getContentType->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->if->baseType->getParticle->baseType->getParticle->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->new->ObjectArr->new->ComplexTypeRecoverableError->group->new->XSModelGroupImpl->new->XSParticleDeclArr->baseType->getParticle->particle->new->XSParticleDecl->fAttrGrp->removeProhibitedAttrs->try->baseType->getAttrGrp->mergeAttributes->catch->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray->throw->finally->fAttrChecker->returnAttrArray->fAttrChecker->returnAttrArray
XSDComplexTypeTraverser#mergeAttributes(XSAttributeGroupDecl, XSAttributeGroupDecl, String, boolean, Element)::: complex type traverser merge attributes:::attrUseS->fromAttrGrp->getAttributeUses->oneAttrUse->attrCount->attrUseS->getLength->for->i->if->if->else->if->performUnionWith->if->throw->new->ObjectArr->new->ComplexTypeRecoverableError
XSDComplexTypeTraverser#processComplexContent(Element, boolean, boolean, XSDocumentInfo, SchemaGrammar)::: complex type traverser process complex content:::attrNode->particle->emptyParticle->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->else->if->childName->equals->traverseSequence->if->group->if->DOMUtil->getNextSiblingElement->else->if->childName->equals->traverseChoice->if->group->if->DOMUtil->getNextSiblingElement->else->if->childName->equals->traverseAll->if->group->if->DOMUtil->getNextSiblingElement->else->if->child->DOMUtil->getFirstChildElement->if->if->DOMUtil->getLocalName->equals->DOMUtil->getNextSiblingElement->if->if->XSConstraints->getEmptySequence->if->else->if->else->if->if->isAttrOrAttrGroup->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->node->traverseAttrsAndAttrGrps->if->throw->new->ObjectArr->DOMUtil->getLocalName->new->ComplexTypeRecoverableError->if->fAttrGrp->removeProhibitedAttrs
XSDComplexTypeTraverser#isAttrOrAttrGroup(Element)::: complex type traverser is attr or attr group:::elementName->DOMUtil->getLocalName->if->elementName->equals->elementName->equals->elementName->equals->return->else->return
XSDComplexTypeTraverser#traverseSimpleContentDecl(Element)::: complex type traverser traverse simple content decl:::
XSDComplexTypeTraverser#traverseComplexContentDecl(Element, boolean)::: complex type traverser traverse complex content decl:::
XSDComplexTypeTraverser#genAnonTypeName(Element)::: complex type traverser gen anon type name:::typeName->new->StringBuffer->node->DOMUtil->getParent->while->DOMUtil->DOMUtil->getDocument->getRoot->typeName->node->getAttribute->append->DOMUtil->getParent->return->typeName->toString
XSDComplexTypeTraverser#handleComplexTypeError(String, Object[], Element)::: complex type traverser handle complex type error:::if->reportSchemaError->getErrorContent->getErrorWildcard
XSDComplexTypeTraverser#contentBackup()::: complex type traverser content backup:::if->new->ObjectArr->if->newArray->new->ObjectArr->System->arraycopy
XSDComplexTypeTraverser#contentRestore()::: complex type traverser content restore:::i
XSDComplexTypeTraverser#addAnnotation(XSAnnotationImpl)::: complex type traverser add annotation:::if->return->if->new->XSAnnotationImplArr->else->tempArray->new->XSAnnotationImplArr->System->arraycopy
XSDElementTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar, int, XSObject):::Traverse a locally declared element (or an element reference):::particle->if->getParticleDecl->else->new->XSParticleDecl->if->attr->elmDecl->getAttributeNode->if->min->attr->getValue->try->m->Integer->XMLChar->trim->parseInt->if->catch->finally->fSchemaHandler->fillInLocalElemInfo->else->traverseLocal->if->return
XSDElementTraverser#traverseLocal(XSParticleDecl, Element, XSDocumentInfo, SchemaGrammar, int, XSObject, String[]):::Traverse a locally declared element (or an element reference):::if->setEffectiveContext->attrValues->fAttrChecker->checkAttributes->refAtt->minAtt->maxAtt->element->annotation->if->elmDecl->getAttributeNode->if->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->else->traverseNamedElement->minAtt->intValue->maxAtt->intValue->if->else->if->annotations->if->new->XSObjectListImpl->addXSObject->else->else->defaultVals->elmDecl->getParentNode->defaultVals->longValue->checkOccurrences->fAttrChecker->returnAttrArray
XSDElementTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar):::Traverse a globally declared element.:::attrValues->fAttrChecker->checkAttributes->element->traverseNamedElement->fAttrChecker->returnAttrArray->return
XSDElementTraverser#traverseNamedElement(Element, Object[], XSDocumentInfo, SchemaGrammar, boolean, XSObject):::Traverse a globally declared element.:::abstractAtt->blockAtt->defaultAtt->finalAtt->fixedAtt->formAtt->nameAtt->nillableAtt->subGroupAtt->typeAtt->element->if->getElementDecl->else->new->XSElementDecl->if->fSymbolTable->addSymbol->if->element->setIsGlobal->else->if->element->setIsLocal->if->if->formAtt->intValue->else->else->if->else->if->if->else->blockAtt->shortValue->if->new->ObjectArr->reportSchemaError->finalAtt->shortValue->if->nillableAtt->booleanValue->element->setIsNillable->if->abstractAtt->booleanValue->element->setIsAbstract->if->new->ValidatedInfo->element->setConstraintType->else->if->new->ValidatedInfo->element->setConstraintType->else->element->setConstraintType->if->fSchemaHandler->getGlobalDecl->child->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->annotations->if->new->XSObjectListImpl->addXSObject->else->elementType->haveAnonType->if->childName->DOMUtil->getLocalName->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->else->if->childName->equals->traverseLocal->DOMUtil->getNextSiblingElement->if->fSchemaHandler->getGlobalDecl->if->if->if->if->childName->DOMUtil->getLocalName->while->childName->equals->childName->equals->childName->equals->if->childName->equals->childName->equals->DOMUtil->setHidden->traverse->if->DOMUtil->getAttrValue->length->fSchemaHandler->DOMUtil->getAttrValue->DOMUtil->getAttrValue->fSchemaHandler->getIDRegistry->fSchemaHandler->getIDRegistry_sub->checkForDuplicateNames->else->if->childName->equals->fSchemaHandler->storeKeyRef->DOMUtil->getNextSiblingElement->if->DOMUtil->getLocalName->if->if->new->ObjectArr->reportSchemaError->else->reportSchemaError->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->new->ObjectArr->reportSchemaError->if->new->ObjectArr->reportSchemaError->checkNotationType->if->fValidationState->setNamespaceSupport->if->XSConstraints->ElementDefaultValidImmediate->new->ObjectArr->reportSchemaError->element->setConstraintType->if->if->XSConstraints->checkTypeDerivationOk->new->ObjectArr->reportSchemaError->if->if->elementType->getTypeCategory->isIDType->elementType->getTypeCategory->containsTypeID->new->ObjectArr->reportSchemaError->element->setConstraintType->if->return->if->grammar->addGlobalElementDeclAll->if->grammar->getGlobalElementDecl->grammar->addGlobalElementDecl->loc->fSchemaHandler->schemaDocument2SystemId->element2->grammar->getGlobalElementDecl->if->grammar->addGlobalElementDecl->if->if->fSchemaHandler->addGlobalElementDecl->return
XSDElementTraverser#reset(SymbolTable, boolean, Locale)::: element traverser reset:::super->reset
XSDGroupTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar)::: group traverser traverse local:::attrValues->fAttrChecker->checkAttributes->refAttr->minAttr->maxAttr->group->if->new->ObjectArr->reportSchemaError->else->fSchemaHandler->getGlobalDecl->annotation->child->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->minOccurs->minAttr->intValue->maxOccurs->maxAttr->intValue->particle->if->if->getParticleDecl->else->new->XSParticleDecl->if->defaultVals->elmNode->getParentNode->defaultVals->longValue->checkOccurrences->if->annotations->if->new->XSObjectListImpl->addXSObject->else->else->fAttrChecker->returnAttrArray->return
XSDGroupTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar)::: group traverser traverse global:::attrValues->fAttrChecker->checkAttributes->strNameAttr->if->new->ObjectArr->reportSchemaError->group->new->XSGroupDecl->particle->l_elmChild->DOMUtil->getFirstChildElement->annotation->if->new->ObjectArr->reportSchemaError->else->childName->l_elmChild->getLocalName->if->childName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->if->l_elmChild->getLocalName->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->reportSchemaError->else->if->childName->equals->traverseAll->else->if->childName->equals->traverseChoice->else->if->childName->equals->traverseSequence->else->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->DOMUtil->getNextSiblingElement->new->ObjectArr->DOMUtil->DOMUtil->getNextSiblingElement->getLocalName->DOMUtil->getNextSiblingElement->reportSchemaError->if->if->XSConstraints->getEmptySequence->annotations->if->new->XSObjectListImpl->addXSObject->else->if->grammar->getGlobalGroupDecl->grammar->addGlobalGroupDecl->loc->fSchemaHandler->schemaDocument2SystemId->group2->grammar->getGlobalGroupDecl->if->grammar->addGlobalGroupDecl->if->if->fSchemaHandler->addGlobalGroupDecl->else->if->redefinedGrp->fSchemaHandler->new->QName->getGrpOrAttrGrpRedefinedByRestriction->if->grammar->fSchemaHandler->element2Locator->addRedefinedGroupDecl->fAttrChecker->returnAttrArray->return
XSDHandler#null2EmptyString(String)::: handler null2 empty string:::return
XSDHandler#emptyString2Null(String)::: handler empty string2 null:::return
XSDHandler#doc2SystemId(Element)::: handler doc2 system id:::documentURI->if->ele->getOwnerDocument->ele->getOwnerDocument->getDocumentURI->return->fDoc2SystemId->get
XSDHandler#parseSchema(XMLInputSource, XSDDescription, Map):::This method initiates the parse of a schema:::fSchemaParser->resetNodePool->grammar->schemaNamespace->referType->desc->getContextType->if->if->isExistingGrammar->fGrammarBucket->desc->getTargetNamespace->getGrammar->else->findGrammar->if->if->return->else->try->if->grammar->getDocumentLocations->XMLEntityManager->is->getSystemId->is->getBaseSystemId->expandSystemId->contains->return->catch->finally->desc->getTargetNamespace->if->fSymbolTable->addSymbol->prepareForParse->schemaRoot->if->getSchemaDocument->else->if->getSchemaDocument->else->if->getSchemaDocument->else->if->getSchemaDocument->else->getSchemaDocument->if->if->xsinput->grammars->xsinput->getGrammars->if->fGrammarBucket->getTargetNamespace->getGrammar->else->components->xsinput->getComponents->if->fGrammarBucket->getNamespace->getGrammar->return->if->schemaElem->DOMUtil->getAttrValue->if->schemaNamespace->length->fSymbolTable->addSymbol->desc->setTargetNamespace->else->findGrammar->schemaId->XMLEntityManager->is->getSystemId->is->getBaseSystemId->expandSystemId->if->if->grammar->getDocumentLocations->contains->return->key->new->XSDKey->fTraversed->put->if->fDoc2SystemId->put->prepareForTraverse->is->getSystemId->constructTrees->if->return->buildGlobalNameRegistries->annotationInfo->new->ArrayList<>->traverseSchemas->traverseLocalElements->resolveKeyRefs->for->i->fAllTNSs->size->if->annotationInfo->size->validateAnnotations->return->fGrammarBucket->getGrammar
XSDHandler#validateAnnotations(List)::: handler validate annotations:::if->createAnnotationValidator->size->annotationInfo->size->src->new->XMLInputSource->fGrammarBucketAdapter->refreshGrammars->for->i
XSDHandler#createAnnotationValidator()::: handler create annotation validator:::new->XML11Configuration->new->XSAnnotationGrammarPool->fAnnotationValidator->setFeature->fAnnotationValidator->setFeature->fAnnotationValidator->setProperty->fAnnotationValidator->new->XMLSecurityManager->setProperty->fAnnotationValidator->setProperty->fAnnotationValidator->new->DefaultErrorHandler->setProperty->fAnnotationValidator->setProperty->fAnnotationValidator->setFeature->fAnnotationValidator->setProperty->fAnnotationValidator->setProperty->fAnnotationValidator->setProperty->fAnnotationValidator->setProperty
XSDHandler#getGrammar(String):::Pull the grammar out of the bucket simply using its TNS as a key:::return->fGrammarBucket->getGrammar
XSDHandler#findGrammar(XSDDescription, boolean):::First try to find a grammar in the bucket, if failed, consult the grammar pool:::sg->fGrammarBucket->desc->getTargetNamespace->getGrammar->if->if->fGrammarPool->retrieveGrammar->if->if->fGrammarBucket->putGrammar->reportSchemaWarning->return
XSDHandler#constructTrees(Element, String, XSDDescription, boolean)::: handler construct trees:::if->return->callerTNS->desc->getTargetNamespace->referType->desc->getContextType->currSchemaInfo->try->new->XSDocumentInfo->catch->new->ObjectArr->reportSchemaError->return->finally->if->length->new->ObjectArr->reportSchemaWarning->if->secondIdx->if->if->else->if->new->ObjectArr->reportSchemaError->return->else->if->new->ObjectArr->reportSchemaError->return->else->if->if->desc->setTargetNamespace->else->secondIdx->new->ObjectArr->reportSchemaError->return->currSchemaInfo->addAllowedNS->sg->if->sg2->fGrammarBucket->getGrammar->if->sg2->isImmutable->new->SchemaGrammar->fGrammarBucket->putGrammar->updateImportListWith->else->updateImportListFor->else->if->fGrammarBucket->getGrammar->else->if->findGrammar->if->desc->makeClone->new->SchemaGrammar->fGrammarBucket->putGrammar->else->desc->makeClone->new->SchemaGrammar->fGrammarBucket->putGrammar->sg->fDoc2SystemId->get->addDocument->fDoc2XSDocumentMap->put->dependencies->new->ArrayList<>->rootNode->newSchemaRoot->for->child->DOMUtil->getFirstChildElement->DOMUtil->getNextSiblingElement->fDependencyMap->put->return
XSDHandler#isExistingGrammar(XSDDescription, boolean)::: handler is existing grammar:::sg->fGrammarBucket->desc->getTargetNamespace->getGrammar->if->return->findGrammar->else->if->sg->isImmutable->return->else->try->return->sg->getDocumentLocations->XMLEntityManager->desc->getLiteralSystemId->desc->getBaseSystemId->expandSystemId->contains->catch->return->finally
XSDHandler#updateImportListFor(SchemaGrammar):::Namespace growth  Go through the import list of a given grammar and for each imported grammar, check to see if the grammar bucket has a newer version:::importedGrammars->grammar->getImportedGrammars->if->for->i->importedGrammars->size
XSDHandler#updateImportListWith(SchemaGrammar):::Namespace growth  Go throuth the grammar bucket, and for each grammar in the bucket check the import list:::schemaGrammars->fGrammarBucket->getGrammars->for->i
XSDHandler#buildGlobalNameRegistries()::: handler build global name registries:::schemasToProcess->new->Stack<>->schemasToProcess->push->while->schemasToProcess->empty->currSchemaDoc->schemasToProcess->pop->currDoc->if->DOMUtil->isHidden->continue->currRoot->dependenciesCanOccur->for->globalComp->DOMUtil->getFirstChildElement->DOMUtil->getNextSiblingElement->DOMUtil->setHidden->currSchemaDepends->fDependencyMap->get->foreach->schemasToProcess->push
XSDHandler#traverseSchemas(List)::: handler traverse schemas:::setSchemasVisible->schemasToProcess->new->Stack<>->schemasToProcess->push->while->schemasToProcess->empty->currSchemaDoc->schemasToProcess->pop->currDoc->currSG->fGrammarBucket->getGrammar->if->DOMUtil->isHidden->continue->currRoot->sawAnnotation->for->globalComp->DOMUtil->getFirstVisibleChildElement->DOMUtil->getNextVisibleSiblingElement->if->text->DOMUtil->getSyntheticAnnotation->if->currSG->fElementTraverser->currSchemaDoc->getSchemaAttrs->traverseSyntheticAnnotation->addAnnotation->if->info->currSchemaDoc->getAnnotations->if->annotationInfo->doc2SystemId->add->annotationInfo->add->currSchemaDoc->returnSchemaAttrs->DOMUtil->setHidden->currSchemaDepends->fDependencyMap->get->foreach->schemasToProcess->push
XSDHandler#needReportTNSError(String)::: handler need report error:::if->new->ArrayList<>->else->if->fReportedTNS->contains->return->fReportedTNS->add->return
XSDHandler#addGlobalAttributeDecl(XSAttributeDecl)::: handler add global attribute decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalAttrDecls->get->fGlobalAttrDecls->put
XSDHandler#addGlobalAttributeGroupDecl(XSAttributeGroupDecl)::: handler add global attribute group decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalAttrGrpDecls->get->fGlobalAttrGrpDecls->put
XSDHandler#addGlobalElementDecl(XSElementDecl)::: handler add global element decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalElemDecls->get->fGlobalElemDecls->put
XSDHandler#addGlobalGroupDecl(XSGroupDecl)::: handler add global group decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalGroupDecls->get->fGlobalGroupDecls->put
XSDHandler#addGlobalNotationDecl(XSNotationDecl)::: handler add global notation decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalNotationDecls->get->fGlobalNotationDecls->put
XSDHandler#addGlobalTypeDecl(XSTypeDefinition)::: handler add global type decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getName->decl->getName->if->fGlobalTypeDecls->get->fGlobalTypeDecls->put
XSDHandler#addIDConstraintDecl(IdentityConstraint)::: handler add constraint decl:::namespace->decl->getNamespace->declKey->namespace->length->decl->getIdentityConstraintName->decl->getIdentityConstraintName->if->fGlobalIDConstraintDecls->get->fGlobalIDConstraintDecls->put
XSDHandler#getGlobalAttributeDecl(String)::: handler get global attribute decl:::return->fGlobalAttrDecls->get
XSDHandler#getGlobalAttributeGroupDecl(String)::: handler get global attribute group decl:::return->fGlobalAttrGrpDecls->get
XSDHandler#getGlobalElementDecl(String)::: handler get global element decl:::return->fGlobalElemDecls->get
XSDHandler#getGlobalGroupDecl(String)::: handler get global group decl:::return->fGlobalGroupDecls->get
XSDHandler#getGlobalNotationDecl(String)::: handler get global notation decl:::return->fGlobalNotationDecls->get
XSDHandler#getGlobalTypeDecl(String)::: handler get global type decl:::return->fGlobalTypeDecls->get
XSDHandler#getIDConstraintDecl(String)::: handler get constraint decl:::return->fGlobalIDConstraintDecls->get
XSDHandler#getGlobalDecl(XSDocumentInfo, int, QName, Element)::: handler get global decl:::if->declToTraverse->toString->println->if->if->retObj->getGlobalTypeDecl->if->return->if->currSchema->isAllowedNS->if->currSchema->needReportTNSError->code->new->ObjectArr->fDoc2SystemId->get->reportSchemaError->sGrammar->fGrammarBucket->getGrammar->if->if->needReportTNSError->new->ObjectArr->reportSchemaError->return->retObj->getGlobalDeclFromGrammar->declKey->if->if->return->else->retObj2->getGlobalDecl->if->return->schemaWithDecl->decl->declDoc->switch->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->getElementFromMap->getDocInfoFromMap->break->new->ObjectArr->reportSchemaError->if->if->new->ObjectArr->reportSchemaError->return->findXSDocumentForDecl->if->if->code->new->ObjectArr->fDoc2SystemId->get->reportSchemaError->return->if->DOMUtil->isHidden->if->code->if->if->DOMUtil->getLocalName->equals->new->ObjectArr->reportSchemaError->return->return->traverseGlobalDecl
XSDHandler#getGlobalDecl(String, int)::: handler get global decl:::retObj->switch->getGlobalAttributeDecl->break->getGlobalAttributeGroupDecl->break->getGlobalElementDecl->break->getGlobalGroupDecl->break->getIDConstraintDecl->break->getGlobalNotationDecl->break->getGlobalTypeDecl->break->return
XSDHandler#getGlobalDeclFromGrammar(SchemaGrammar, int, String)::: handler get global decl from grammar:::retObj->switch->sGrammar->getGlobalAttributeDecl->break->sGrammar->getGlobalAttributeGroupDecl->break->sGrammar->getGlobalElementDecl->break->sGrammar->getGlobalGroupDecl->break->sGrammar->getIDConstraintDecl->break->sGrammar->getGlobalNotationDecl->break->sGrammar->getGlobalTypeDecl->break->return
XSDHandler#getGlobalDeclFromGrammar(SchemaGrammar, int, String, String)::: handler get global decl from grammar:::retObj->switch->sGrammar->getGlobalAttributeDecl->break->sGrammar->getGlobalAttributeGroupDecl->break->sGrammar->getGlobalElementDecl->break->sGrammar->getGlobalGroupDecl->break->sGrammar->getIDConstraintDecl->break->sGrammar->getGlobalNotationDecl->break->sGrammar->getGlobalTypeDecl->break->return
XSDHandler#traverseGlobalDecl(int, Element, XSDocumentInfo, SchemaGrammar)::: handler traverse global decl:::retObj->DOMUtil->setHidden->nsSupport->parent->DOMUtil->getParent->if->DOMUtil->getLocalName->equals->fRedefine2NSSupport->get->schemaDoc->backupNSSupport->switch->if->DOMUtil->getLocalName->equals->fComplexTypeTraverser->traverseGlobal->else->fSimpleTypeTraverser->traverseGlobal->break->fAttributeTraverser->traverseGlobal->break->fElementTraverser->traverseGlobal->break->fAttributeGroupTraverser->traverseGlobal->break->fGroupTraverser->traverseGlobal->break->fNotationTraverser->traverse->break->break->schemaDoc->restoreNSSupport->return
XSDHandler#schemaDocument2SystemId(XSDocumentInfo)::: handler schema document2 system id:::return->fDoc2SystemId->get
XSDHandler#getGrpOrAttrGrpRedefinedByRestriction(int, QName, XSDocumentInfo, Element)::: handler get grp or attr grp redefined by restriction:::realName->nameToFind->switch->fRedefinedRestrictedAttributeGroupRegistry->get->break->fRedefinedRestrictedGroupRegistry->get->break->return->if->return->commaPos->nameToFind->indexOf->qNameToFind->nameToFind->substring->nameToFind->substring->nameToFind->substring->new->QName->retObj->getGlobalDecl->if->switch->new->ObjectArr->reportSchemaError->break->new->ObjectArr->reportSchemaError->break->return->return
XSDHandler#resolveKeyRefs()::: handler resolve key refs:::for->i
XSDHandler#getIDRegistry()::: handler get registry:::return
XSDHandler#getIDRegistry_sub()::: handler get registry_sub:::return
XSDHandler#storeKeyRef(Element, XSDocumentInfo, XSElementDecl)::: handler store key ref:::keyrefName->DOMUtil->getAttrValue->if->keyrefName->length->keyrefQName->checkForDuplicateNames->if->elemArray->new->ElementArr->System->arraycopy->declArray->new->XSElementDeclArr->System->arraycopy->stringArray->new->StringArrs->System->arraycopy->xsDocumentInfo->new->XSDocumentInfoArr->System->arraycopy->getEffectiveLocalContext
XSDHandler#resolveSchema(XSDDescription, boolean, Element, boolean):::resolveSchema method is responsible for resolving location of the schema (using XMLEntityResolver), and if it was successfully resolved getting the schema Document.:::schemaSource->try->pairs->Collections->emptyMap->XMLSchemaLoader->resolveDocument->catch->if->new->ObjectArr->desc->getLocationHints->reportSchemaError->else->new->ObjectArr->desc->getLocationHints->reportSchemaWarning->finally->if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->getSchemaDocument->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument
XSDHandler#resolveSchema(XMLInputSource, XSDDescription, boolean, Element)::: handler resolve schema:::if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument->else->if->return->getSchemaDocument->return->desc->getTargetNamespace->desc->getContextType->getSchemaDocument
XSDHandler#resolveSchemaSource(XSDDescription, boolean, Element, boolean)::: handler resolve schema source:::schemaSource->try->pairs->Collections->emptyMap->XMLSchemaLoader->resolveDocument->catch->if->new->ObjectArr->desc->getLocationHints->reportSchemaError->else->new->ObjectArr->desc->getLocationHints->reportSchemaWarning->finally->return
XSDHandler#getSchemaDocument(String, XMLInputSource, boolean, short, Element):::getSchemaDocument method uses XMLInputSource to parse a schema document.:::hasInput->exception->schemaElement->try->if->schemaSource->getSystemId->schemaSource->getByteStream->schemaSource->getCharacterStream->key->schemaId->if->XMLEntityManager->schemaSource->getSystemId->schemaSource->getBaseSystemId->expandSystemId->new->XSDKey->if->fTraversed->get->return->if->schemaSource->isCreatedByResolver->accessError->SecuritySupport->checkAccess->if->new->ObjectArr->SecuritySupport->sanitizePath->reportSchemaFatalError->fSchemaParser->parse->schemaDocument->fSchemaParser->getDocument->DOMUtil->getRoot->return->getSchemaDocument0->else->catch->finally->return->getSchemaDocument1
XSDHandler#getSchemaDocument(String, SAXInputSource, boolean, short, Element):::getSchemaDocument method uses SAXInputSource to parse a schema document.:::parser->schemaSource->getXMLReader->inputSource->schemaSource->getInputSource->hasInput->exception->schemaElement->try->if->inputSource->getSystemId->inputSource->getByteStream->inputSource->getCharacterStream->key->schemaId->if->XMLEntityManager->inputSource->getSystemId->schemaSource->getBaseSystemId->expandSystemId->new->XSDKey->if->fTraversed->get->return->namespacePrefixes->if->try->parser->getFeature->catch->finally->else->JdkXmlUtils->fSecurityManager->isSecureProcessing->getXMLReader->try->parser->setFeature->if->if->parser->setProperty->catch->finally->try->parser->setProperty->catch->XMLSecurityManager->parser->getClass->getName->printWarning->finally->stringsInternalized->try->parser->getFeature->catch->finally->if->new->SchemaContentHandler->fXSContentHandler->reset->parser->setContentHandler->parser->fErrorReporter->getSAXErrorHandler->setErrorHandler->parser->parse->try->parser->setContentHandler->parser->setErrorHandler->catch->finally->schemaDocument->fXSContentHandler->getDocument->DOMUtil->getRoot->return->getSchemaDocument0->else->catch->throw->SAX2XNIUtil->createXMLParseException0->throw->SAX2XNIUtil->createXNIException0->finally->return->getSchemaDocument1
XSDHandler#getSchemaDocument(String, DOMInputSource, boolean, short, Element):::getSchemaDocument method uses DOMInputSource to parse a schema document.:::hasInput->exception->schemaElement->schemaRootElement->node->schemaSource->getNode->nodeType->if->node->getNodeType->if->DOMUtil->getRoot->else->if->try->if->key->schemaId->if->XMLEntityManager->schemaSource->getSystemId->schemaSource->getBaseSystemId->expandSystemId->isDocument->if->parent->schemaRootElement->getParentNode->if->parent->getNodeType->if->new->XSDKey->if->fTraversed->get->return->return->getSchemaDocument0->else->catch->finally->return->getSchemaDocument1
XSDHandler#getSchemaDocument(String, StAXInputSource, boolean, short, Element):::getSchemaDocument method uses StAXInputSource to parse a schema document.:::exception->schemaElement->try->consumeRemainingContent->schemaSource->shouldConsumeRemainingContent->streamReader->schemaSource->getXMLStreamReader->eventReader->schemaSource->getXMLEventReader->key->schemaId->if->XMLEntityManager->schemaSource->getSystemId->schemaSource->getBaseSystemId->expandSystemId->isDocument->if->if->streamReader->getEventType->else->eventReader->peek->isStartDocument->if->new->XSDKey->if->fTraversed->get->return->if->new->StAXSchemaParser->fStAXSchemaParser->reset->if->fStAXSchemaParser->parse->if->while->streamReader->hasNext->streamReader->next->else->fStAXSchemaParser->parse->if->while->eventReader->hasNext->eventReader->nextEvent->schemaDocument->fStAXSchemaParser->getDocument->DOMUtil->getRoot->return->getSchemaDocument0->catch->t->e->getNestedException->if->else->slw->new->StAXLocationWrapper->slw->e->getLocation->setLocation->throw->e->getMessage->new->XMLParseException->finally->return->getSchemaDocument1
XSDHandler#getSchemaDocument0(XSDKey, String, Element):::Code shared between the various getSchemaDocument() methods which stores mapping information for the document.:::if->fTraversed->put->if->fDoc2SystemId->put->return
XSDHandler#getSchemaDocument1(boolean, boolean, XMLInputSource, Element, IOException):::Error handling code shared between the various getSchemaDocument() methods.:::if->if->new->ObjectArr->schemaSource->getSystemId->reportSchemaError->else->new->ObjectArr->schemaSource->getSystemId->reportSchemaError->else->if->new->ObjectArr->schemaSource->getSystemId->reportSchemaWarning->return
XSDHandler#getSchemaDocument(XSInputSource, XSDDescription):::getSchemaDocument method uses XMLInputSource to parse a schema document.:::grammars->schemaSource->getGrammars->referType->desc->getContextType->if->expandedGrammars->expandGrammars->if->existingGrammars->addGrammars->if->desc->getTargetNamespace->setTargetNamespace->else->components->schemaSource->getComponents->if->importDependencies->new->HashMap<>->expandedComponents->expandComponents->if->canAddComponents->addGlobalComponents->if->desc->getNamespace->setTargetNamespace->return
XSDHandler#expandGrammars(SchemaGrammar[])::: handler expand grammars:::currGrammars->new->ArrayList<>->for->i->sg1->sg2->gs->for->i->currGrammars->size->return
XSDHandler#existingGrammars(List)::: handler existing grammars:::length->grammars->size->desc->new->XSDDescription->for->i->return
XSDHandler#canAddComponents(List)::: handler can add components:::size->components->size->desc->new->XSDDescription->for->i->return
XSDHandler#canAddComponent(XSObject, XSDDescription)::: handler can add component:::desc->component->getNamespace->setNamespace->sg->findGrammar->if->return->else->if->sg->isImmutable->return->componentType->component->getType->name->component->getName->switch->if->sg->getGlobalTypeDecl->return->break->if->sg->getGlobalAttributeDecl->return->break->if->sg->getGlobalAttributeDecl->return->break->if->sg->getGlobalElementDecl->return->break->if->sg->getGlobalGroupDecl->return->break->if->sg->getGlobalNotationDecl->return->break->return->return
XSDHandler#addGrammars(List)::: handler add grammars:::length->grammars->size->desc->new->XSDDescription->for->i
XSDHandler#addGrammarComponents(SchemaGrammar, SchemaGrammar)::: handler add grammar components:::if->createGrammarFrom->return->tmpGrammar->if->tmpGrammar->isImmutable->createGrammarFrom->addNewGrammarLocations->addNewImportedGrammars->addNewGrammarComponents
XSDHandler#createGrammarFrom(SchemaGrammar)::: handler create grammar from:::newGrammar->new->SchemaGrammar->fGrammarBucket->putGrammar->updateImportListWith->updateImportListFor->return
XSDHandler#addNewGrammarLocations(SchemaGrammar, SchemaGrammar)::: handler add new grammar locations:::locations->srcGrammar->getDocumentLocations->locSize->locations->size->locations2->dstGrammar->getDocumentLocations->for->i
XSDHandler#addNewImportedGrammars(SchemaGrammar, SchemaGrammar)::: handler add new imported grammars:::src->srcGrammar->getImportedGrammars->if->dst->dstGrammar->getImportedGrammars->if->new->ArrayList<>->dstGrammar->setImportedGrammars->foreach->sg1->fGrammarBucket->sg->getTargetNamespace->getGrammar->if->if->containedImportedGrammar->dst->add
XSDHandler#updateImportList(List, List)::: handler update import list:::size->importedSrc->size->for->i
XSDHandler#addNewGrammarComponents(SchemaGrammar, SchemaGrammar)::: handler add new grammar components:::dstGrammar->resetComponents->addGlobalElementDecls->addGlobalAttributeDecls->addGlobalAttributeGroupDecls->addGlobalGroupDecls->addGlobalTypeDecls->addGlobalNotationDecls
XSDHandler#addGlobalElementDecls(SchemaGrammar, SchemaGrammar)::: handler add global element decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#addGlobalAttributeDecls(SchemaGrammar, SchemaGrammar)::: handler add global attribute decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#addGlobalAttributeGroupDecls(SchemaGrammar, SchemaGrammar)::: handler add global attribute group decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#addGlobalNotationDecls(SchemaGrammar, SchemaGrammar)::: handler add global notation decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#addGlobalGroupDecls(SchemaGrammar, SchemaGrammar)::: handler add global group decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#addGlobalTypeDecls(SchemaGrammar, SchemaGrammar)::: handler add global type decls:::components->srcGrammar->getComponents->len->components->getLength->srcDecl->dstDecl->for->i->componentsExt->srcGrammar->getComponentsExt->componentsExt->getLength->for->i
XSDHandler#expandComponents(XSObject[], Map>)::: handler expand components:::newComponents->new->ArrayList<>->for->i->for->i->newComponents->size->return
XSDHandler#expandRelatedComponents(XSObject, List, Map>)::: handler expand related components:::componentType->component->getType->switch->component->getNamespace->expandRelatedTypeComponents->break->component->getNamespace->expandRelatedAttributeComponents->break->component->getNamespace->expandRelatedAttributeGroupComponents->component->getNamespace->expandRelatedElementComponents->break->component->getNamespace->expandRelatedModelGroupDefinitionComponents->break
XSDHandler#expandRelatedAttributeComponents(XSAttributeDeclaration, List, String, Map>)::: handler expand related attribute components:::decl->getTypeDefinition->addRelatedType
XSDHandler#expandRelatedElementComponents(XSElementDeclaration, List, String, Map>)::: handler expand related element components:::decl->getTypeDefinition->addRelatedType->subElemDecl->decl->getSubstitutionGroupAffiliation->if->addRelatedElement
XSDHandler#expandRelatedTypeComponents(XSTypeDefinition, List, String, Map>)::: handler expand related type components:::if->expandRelatedComplexTypeComponents->else->if->expandRelatedSimpleTypeComponents
XSDHandler#expandRelatedModelGroupDefinitionComponents(XSModelGroupDefinition, List, String, Map>)::: handler expand related model group definition components:::modelGroupDef->getModelGroup->expandRelatedModelGroupComponents
XSDHandler#expandRelatedAttributeGroupComponents(XSAttributeGroupDefinition, List, String, Map>)::: handler expand related attribute group components:::attrGroup->getAttributeUses->expandRelatedAttributeUsesComponents
XSDHandler#expandRelatedComplexTypeComponents(XSComplexTypeDecl, List, String, Map>)::: handler expand related complex type components:::type->getBaseType->addRelatedType->type->getAttributeUses->expandRelatedAttributeUsesComponents->particle->type->getParticle->if->expandRelatedParticleComponents
XSDHandler#expandRelatedSimpleTypeComponents(XSSimpleTypeDefinition, List, String, Map>)::: handler expand related simple type components:::baseType->type->getBaseType->if->addRelatedType->itemType->type->getItemType->if->addRelatedType->primitiveType->type->getPrimitiveType->if->addRelatedType->memberTypes->type->getMemberTypes->if->memberTypes->size->for->i->memberTypes->size
XSDHandler#expandRelatedAttributeUsesComponents(XSObjectList, List, String, Map>)::: handler expand related attribute uses components:::attrUseSize->attrUses->size->for->i
XSDHandler#expandRelatedAttributeUseComponents(XSAttributeUse, List, String, Map>)::: handler expand related attribute use components:::component->getAttrDeclaration->addRelatedAttribute
XSDHandler#expandRelatedParticleComponents(XSParticle, List, String, Map>)::: handler expand related particle components:::term->component->getTerm->switch->term->getType->addRelatedElement->break->expandRelatedModelGroupComponents->break->break
XSDHandler#expandRelatedModelGroupComponents(XSModelGroup, List, String, Map>)::: handler expand related model group components:::particles->modelGroup->getParticles->length->particles->getLength->for->i
XSDHandler#addRelatedType(XSTypeDefinition, List, String, Map>)::: handler add related type:::if->type->getAnonymous->if->type->getNamespace->equals->if->componentList->contains->importedNamespaces->findDependentNamespaces->type->getNamespace->addNamespaceDependency->componentList->add->else->expandRelatedTypeComponents
XSDHandler#addRelatedElement(XSElementDeclaration, List, String, Map>)::: handler add related element:::if->decl->getScope->if->componentList->contains->importedNamespaces->findDependentNamespaces->decl->getNamespace->addNamespaceDependency->componentList->add->else->expandRelatedElementComponents
XSDHandler#addRelatedAttribute(XSAttributeDeclaration, List, String, Map>)::: handler add related attribute:::if->decl->getScope->if->componentList->contains->importedNamespaces->findDependentNamespaces->decl->getNamespace->addNamespaceDependency->componentList->add->else->expandRelatedAttributeComponents
XSDHandler#addGlobalComponents(List, Map>)::: handler add global components:::desc->new->XSDDescription->size->components->size->for->i->updateImportDependencies
XSDHandler#addGlobalComponent(XSObject, XSDDescription)::: handler add global component:::namespace->component->getNamespace->desc->setNamespace->sg->getSchemaGrammar->componentType->component->getType->name->component->getName->switch->if->getAnonymous->if->sg->getGlobalTypeDecl->sg->addGlobalTypeDecl->if->sg->getGlobalTypeDecl->sg->addGlobalTypeDecl->break->if->getScope->if->sg->getGlobalAttributeDecl->sg->addGlobalAttributeDecl->if->sg->getGlobalAttributeDecl->sg->addGlobalAttributeDecl->break->if->sg->getGlobalAttributeDecl->sg->addGlobalAttributeGroupDecl->if->sg->getGlobalAttributeDecl->sg->addGlobalAttributeGroupDecl->break->if->getScope->sg->addGlobalElementDeclAll->if->sg->getGlobalElementDecl->sg->addGlobalElementDecl->if->sg->getGlobalElementDecl->sg->addGlobalElementDecl->break->if->sg->getGlobalGroupDecl->sg->addGlobalGroupDecl->if->sg->getGlobalGroupDecl->sg->addGlobalGroupDecl->break->if->sg->getGlobalNotationDecl->sg->addGlobalNotationDecl->if->sg->getGlobalNotationDecl->sg->addGlobalNotationDecl->break->break
XSDHandler#updateImportDependencies(Map>)::: handler update import dependencies:::if->return->namespace->importList->foreach->table->entrySet->entry->getKey->entry->getValue->if->importList->size->expandImportList
XSDHandler#expandImportList(String, List)::: handler expand import list:::sg->fGrammarBucket->getGrammar->if->isgs->sg->getImportedGrammars->if->new->ArrayList<>->addImportList->sg->setImportedGrammars->else->updateImportList
XSDHandler#addImportList(SchemaGrammar, List, List)::: handler add import list:::size->namespaceList->size->isg->for->i
XSDHandler#updateImportList(SchemaGrammar, List, List)::: handler update import list:::size->namespaceList->size->isg->for->i
XSDHandler#containedImportedGrammar(List, SchemaGrammar)::: handler contained imported grammar:::size->importedGrammar->size->sg->for->i->return
XSDHandler#getSchemaGrammar(XSDDescription)::: handler get schema grammar:::sg->findGrammar->if->desc->getNamespace->desc->makeClone->new->SchemaGrammar->fGrammarBucket->putGrammar->else->if->sg->isImmutable->createGrammarFrom->return
XSDHandler#findDependentNamespaces(String, Map>)::: handler find dependent namespaces:::ns->null2EmptyString->namespaceList->getFromMap->if->new->ArrayList<>->table->put->return
XSDHandler#addNamespaceDependency(String, String, List)::: handler add namespace dependency:::ns1->null2EmptyString->ns2->null2EmptyString->if->ns1->equals->if->list->contains->list->add
XSDHandler#reportSharingError(String, String)::: handler report sharing error:::qName->new->ObjectArr->reportSchemaError
XSDHandler#createTraversers()::: handler create traversers:::new->XSAttributeChecker->new->XSDAttributeGroupTraverser->new->XSDAttributeTraverser->new->XSDComplexTypeTraverser->new->XSDElementTraverser->new->XSDGroupTraverser->new->XSDKeyrefTraverser->new->XSDNotationTraverser->new->XSDSimpleTypeTraverser->new->XSDUniqueOrKeyTraverser->new->XSDWildcardTraverser
XSDHandler#prepareForParse()::: handler prepare for parse:::fTraversed->clear->fDoc2SystemId->clear->fHiddenNodes->clear
XSDHandler#prepareForTraverse()::: handler prepare for traverse:::if->fUnparsedAttributeRegistry->clear->fUnparsedAttributeGroupRegistry->clear->fUnparsedElementRegistry->clear->fUnparsedGroupRegistry->clear->fUnparsedIdentityConstraintRegistry->clear->fUnparsedNotationRegistry->clear->fUnparsedTypeRegistry->clear->fUnparsedAttributeRegistrySub->clear->fUnparsedAttributeGroupRegistrySub->clear->fUnparsedElementRegistrySub->clear->fUnparsedGroupRegistrySub->clear->fUnparsedIdentityConstraintRegistrySub->clear->fUnparsedNotationRegistrySub->clear->fUnparsedTypeRegistrySub->clear->for->i->fDependencyMap->clear->fDoc2XSDocumentMap->clear->if->fRedefine2XSDMap->clear->if->fRedefine2NSSupport->clear->fAllTNSs->clear->fImportMap->clear->for->i->for->i->if->createTraversers->locale->fErrorReporter->getLocale->fAttributeChecker->reset->fAttributeGroupTraverser->reset->fAttributeTraverser->reset->fComplexTypeTraverser->reset->fElementTraverser->reset->fGroupTraverser->reset->fKeyrefTraverser->reset->fNotationTraverser->reset->fSimpleTypeTraverser->reset->fUniqueOrKeyTraverser->reset->fWildCardTraverser->reset->fRedefinedRestrictedAttributeGroupRegistry->clear->fRedefinedRestrictedGroupRegistry->clear->fGlobalAttrDecls->clear->fGlobalAttrGrpDecls->clear->fGlobalElemDecls->clear->fGlobalGroupDecls->clear->fGlobalNotationDecls->clear->fGlobalIDConstraintDecls->clear->fGlobalTypeDecls->clear
XSDHandler#setDeclPool(XSDeclarationPool)::: handler set decl pool:::
XSDHandler#setDVFactory(SchemaDVFactory)::: handler set factory:::
XSDHandler#getDVFactory()::: handler get factory:::return
XSDHandler#reset(XMLComponentManager)::: handler reset:::componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->er->componentManager->getProperty->if->fSchemaParser->setEntityResolver->componentManager->getProperty->fErrorReporter->getErrorHandler->fErrorReporter->getLocale->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->try->if->fSchemaParser->getProperty->fSchemaParser->new->DefaultErrorHandler->setProperty->if->fAnnotationValidator->new->DefaultErrorHandler->setProperty->if->fSchemaParser->getProperty->fSchemaParser->setProperty->if->fAnnotationValidator->setProperty->catch->finally->try->fSchemaParser->fErrorReporter->getFeature->setFeature->catch->finally->try->if->componentManager->getFeature->fSchemaParser->setFeature->catch->finally->try->if->componentManager->getFeature->fSchemaParser->setFeature->catch->finally->try->componentManager->getProperty->catch->finally->try->if->componentManager->getFeature->fSchemaParser->setFeature->catch->finally->try->if->fSchemaParser->setProperty->catch->finally->componentManager->getProperty->fSchemaParser->setProperty->fSecurityPropertyMgr->getValue->fSecurityPropertyMgr->getValue->componentManager->getFeature->fSchemaParser->setFeature->fEntityManager->setFeature->componentManager->getFeature->fSchemaParser->setFeature->fEntityManager->setFeature->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->foreach->values->fSchemaParser->f->getPropertyName->componentManager->f->getPropertyName->getProperty->setProperty->fEntityManager->f->getPropertyName->componentManager->f->getPropertyName->getProperty->setProperty->fSchemaParser->componentManager->getProperty->setProperty->fEntityManager->componentManager->getProperty->setProperty
XSDHandler#traverseLocalElements():::Traverse all the deferred local elements:::for->i
XSDHandler#removeParticle(XSModelGroupImpl, XSParticleDecl)::: handler remove particle:::member->for->i->return
XSDHandler#fillInLocalElemInfo(Element, XSDocumentInfo, int, XSObject, XSParticleDecl)::: handler fill in local elem info:::if->newStackP->new->XSParticleDeclArr->System->arraycopy->newStackE->new->ElementArr->System->arraycopy->newStackE_schema->new->XSDocumentInfoArr->System->arraycopy->newStackI->new->intArr->System->arraycopy->newStackC->new->XSObjectArr->System->arraycopy->newStackN->new->StringArrs->System->arraycopy->getEffectiveLocalContext
XSDHandler#checkForDuplicateNames(String, int, Map, Map, Element, XSDocumentInfo):::This method makes sure that if this component is being redefined that it lives in the right schema:::objElem->if->registry->get->if->checkForDuplicateNames->registry->put->registry_sub->put->else->collidingElem->collidingElemSchema->registry_sub->get->if->return->elemParent->redefinedSchema->collidedWithRedefine->if->DOMUtil->DOMUtil->getParent->getLocalName->equals->fRedefine2XSDMap->get->else->if->DOMUtil->DOMUtil->getParent->getLocalName->equals->if->if->new->ObjectArr->reportSchemaError->return->newName->qName->qName->lastIndexOf->substring->if->currComp->setAttribute->if->registry->put->registry_sub->put->else->registry->put->registry_sub->put->if->checkForDuplicateNames->else->checkForDuplicateNames->else->if->if->checkForDuplicateNames->else->checkForDuplicateNames->else->new->ObjectArr->reportSchemaError->else->if->new->ObjectArr->reportSchemaError->else->if->if->get->new->ObjectArr->reportSchemaError->if->if->new->HashMap<>->put
XSDHandler#checkForDuplicateNames(String, int, Element)::: handler check for duplicate names:::namespaceEnd->qName->indexOf->namespace->qName->substring->grammar->fGrammarBucket->emptyString2Null->getGrammar->if->obj->qName->substring->getGlobalDeclFromGrammar->if->new->ObjectArr->reportSchemaError
XSDHandler#renameRedefiningComponents(XSDocumentInfo, Element, String, String, String)::: handler rename redefining components:::if->componentType->equals->grandKid->DOMUtil->getFirstChildElement->if->reportSchemaError->else->grandKidName->DOMUtil->getLocalName->if->grandKidName->equals->DOMUtil->getNextSiblingElement->if->reportSchemaError->else->DOMUtil->getLocalName->if->grandKidName->equals->new->ObjectArr->reportSchemaError->else->attrs->fAttributeChecker->checkAttributes->derivedBase->if->equals->new->ObjectArr->reportSchemaError->else->if->length->grandKid->setAttribute->else->grandKid->setAttribute->fAttributeChecker->returnAttrArray->else->if->componentType->equals->grandKid->DOMUtil->getFirstChildElement->if->reportSchemaError->else->if->DOMUtil->getLocalName->equals->DOMUtil->getNextSiblingElement->if->reportSchemaError->else->greatGrandKid->DOMUtil->getFirstChildElement->if->reportSchemaError->else->greatGrandKidName->DOMUtil->getLocalName->if->greatGrandKidName->equals->DOMUtil->getNextSiblingElement->if->reportSchemaError->else->DOMUtil->getLocalName->if->greatGrandKidName->equals->greatGrandKidName->equals->new->ObjectArr->reportSchemaError->else->attrs->fAttributeChecker->checkAttributes->derivedBase->if->equals->new->ObjectArr->reportSchemaError->else->if->length->greatGrandKid->setAttribute->else->greatGrandKid->setAttribute->else->if->componentType->equals->processedBaseName->attGroupRefsCount->changeRedefineGroup->if->new->ObjectArr->new->Integer->reportSchemaError->else->if->else->if->fRedefinedRestrictedAttributeGroupRegistry->put->else->fRedefinedRestrictedAttributeGroupRegistry->put->else->if->componentType->equals->processedBaseName->groupRefsCount->changeRedefineGroup->if->new->ObjectArr->new->Integer->reportSchemaError->else->if->else->if->fRedefinedRestrictedGroupRegistry->put->else->fRedefinedRestrictedGroupRegistry->put->else->new->ObjectArr->reportSchemaError
XSDHandler#findQName(String, XSDocumentInfo)::: handler find name:::currNSMap->colonPtr->name->indexOf->prefix->if->name->substring->uri->currNSMap->fSymbolTable->addSymbol->getURI->localpart->name->substring->if->if->return->return
XSDHandler#changeRedefineGroup(String, String, String, Element, XSDocumentInfo)::: handler change redefine group:::result->for->child->DOMUtil->getFirstChildElement->DOMUtil->getNextSiblingElement->return
XSDHandler#findXSDocumentForDecl(XSDocumentInfo, Element, XSDocumentInfo)::: handler find document for decl:::if->hashCode->println->temp->if->return->declDocInfo->return
XSDHandler#nonAnnotationContent(Element)::: handler non annotation content:::for->child->DOMUtil->getFirstChildElement->DOMUtil->getNextSiblingElement->return
XSDHandler#setSchemasVisible(XSDocumentInfo)::: handler set schemas visible:::if->DOMUtil->isHidden->DOMUtil->setVisible->dependingSchemas->fDependencyMap->get->for->i->dependingSchemas->size
XSDHandler#element2Locator(Element):::Extract location information from an Element node, and create a new SimpleLocator object from such information:::if->return->l->new->SimpleLocator->return->element2Locator
XSDHandler#element2Locator(Element, SimpleLocator):::Extract location information from an Element node, store such information in the passed-in SimpleLocator object, then return true:::if->return->if->ele->doc->ele->getOwnerDocument->sid->fDoc2SystemId->DOMUtil->getRoot->get->line->ele->getLineNumber->column->ele->getColumnNumber->l->ele->getCharacterOffset->setValues->return->return
XSDHandler#getElementFromMap(Map, String)::: handler get element from map:::if->return->return->registry->get
XSDHandler#getDocInfoFromMap(Map, String)::: handler get doc info from map:::if->return->return->registry->get
XSDHandler#getFromMap(Map>, String)::: handler get from map:::if->return->return->registry->get
XSDHandler#reportSchemaFatalError(String, Object[], Element)::: handler report schema fatal error:::reportSchemaErr
XSDHandler#reportSchemaError(String, Object[], Element)::: handler report schema error:::reportSchemaErr
XSDHandler#reportSchemaError(String, Object[], Element, Exception)::: handler report schema error:::reportSchemaErr
XSDHandler#reportSchemaWarning(String, Object[], Element)::: handler report schema warning:::reportSchemaErr
XSDHandler#reportSchemaWarning(String, Object[], Element, Exception)::: handler report schema warning:::reportSchemaErr
XSDHandler#reportSchemaErr(String, Object[], Element, short, Exception)::: handler report schema err:::if->element2Locator->fErrorReporter->reportError->else->fErrorReporter->reportError
XSDHandler.XSAnnotationGrammarPool#retrieveInitialGrammarSet(String)::: annotation grammar pool retrieve initial grammar set:::if->if->if->new->GrammarArr->else->schemaGrammars->fGrammarBucket->getGrammars->for->i->grammars->new->GrammarArr->System->arraycopy->return->return->new->GrammarArr
XSDHandler.XSAnnotationGrammarPool#cacheGrammars(String, Grammar[])::: annotation grammar pool cache grammars:::
XSDHandler.XSAnnotationGrammarPool#retrieveGrammar(XMLGrammarDescription)::: annotation grammar pool retrieve grammar:::if->desc->getGrammarType->tns->getTargetNamespace->if->grammar->fGrammarBucket->getGrammar->if->return->if->equals->return->return
XSDHandler.XSAnnotationGrammarPool#refreshGrammars(XSGrammarBucket)::: annotation grammar pool refresh grammars:::
XSDHandler.XSAnnotationGrammarPool#lockPool()::: annotation grammar pool lock pool:::
XSDHandler.XSAnnotationGrammarPool#unlockPool()::: annotation grammar pool unlock pool:::
XSDHandler.XSAnnotationGrammarPool#clear()::: annotation grammar pool clear:::
XSDHandler.XSDKey#hashCode()::: key hash code:::return->referNS->hashCode
XSDHandler.XSDKey#equals(Object)::: key equals:::if->return->key->if->return->if->systemId->equals->return->return
XSDHandler.SAX2XNIUtil#createXMLParseException0(SAXParseException)::: x2 util create parse exception0:::return->createXMLParseException
XSDHandler.SAX2XNIUtil#createXNIException0(SAXException)::: x2 util create exception0:::return->createXNIException
XSDHandler#setGenerateSyntheticAnnotations(boolean)::: handler set generate synthetic annotations:::fSchemaParser->setFeature
XSDKeyrefTraverser#traverse(Element, XSElementDecl, XSDocumentInfo, SchemaGrammar)::: keyref traverser traverse:::attrValues->fAttrChecker->checkAttributes->krName->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->kName->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->key->ret->fSchemaHandler->getGlobalDecl->if->if->ret->getCategory->ret->getCategory->else->new->ObjectArr->reportSchemaError->if->fAttrChecker->returnAttrArray->return->keyRef->new->KeyRef->if->traverseIdentityConstraint->if->key->getFieldCount->keyRef->getFieldCount->new->ObjectArr->key->getIdentityConstraintName->reportSchemaError->else->if->grammar->keyRef->getIdentityConstraintName->getIDConstraintDecl->grammar->addIDConstraintDecl->loc->fSchemaHandler->schemaDocument2SystemId->idc->grammar->keyRef->getIdentityConstraintName->getIDConstraintDecl->if->grammar->addIDConstraintDecl->if->if->if->fSchemaHandler->addIDConstraintDecl->fAttrChecker->returnAttrArray
XSDNotationTraverser#traverse(Element, XSDocumentInfo, SchemaGrammar)::: notation traverser traverse:::attrValues->fAttrChecker->checkAttributes->nameAttr->publicAttr->systemAttr->if->new->ObjectArr->reportSchemaError->fAttrChecker->returnAttrArray->return->if->reportSchemaError->notation->new->XSNotationDecl->content->DOMUtil->getFirstChildElement->annotation->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->annotations->if->new->XSObjectListImpl->addXSObject->else->if->args->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->if->grammar->getGlobalNotationDecl->grammar->addGlobalNotationDecl->loc->fSchemaHandler->schemaDocument2SystemId->notation2->grammar->getGlobalNotationDecl->if->grammar->addGlobalNotationDecl->if->if->fSchemaHandler->addGlobalNotationDecl->fAttrChecker->returnAttrArray->return
XSDocumentInfo#initNamespaceSupport(Element):::Initialize namespace support by collecting all of the namespace declarations in the root's ancestors:::new->SchemaNamespaceSupport->fNamespaceSupport->reset->parent->schemaRoot->getParentNode->while->parent->getNodeType->parent->getNodeName->equals->eparent->map->eparent->getAttributes->length->map->getLength->for->i->parent->getParentNode
XSDocumentInfo#backupNSSupport(SchemaNamespaceSupport)::: document info backup support:::SchemaNamespaceSupportStack->push->if->new->SchemaNamespaceSupport->fValidationContext->setNamespaceSupport
XSDocumentInfo#restoreNSSupport()::: document info restore support:::SchemaNamespaceSupportStack->pop->fValidationContext->setNamespaceSupport
XSDocumentInfo#toString()::: document info to string:::return
XSDocumentInfo#addAllowedNS(String)::: document info add allowed s:::fImportedNS->add
XSDocumentInfo#isAllowedNS(String)::: document info is allowed s:::return->fImportedNS->contains
XSDocumentInfo#needReportTNSError(String)::: document info need report error:::if->new->ArrayList<>->else->if->fReportedTNS->contains->return->fReportedTNS->add->return
XSDocumentInfo#getSchemaAttrs()::: document info get schema attrs:::return
XSDocumentInfo#returnSchemaAttrs()::: document info return schema attrs:::fAttrChecker->returnAttrArray
XSDocumentInfo#addAnnotation(XSAnnotationInfo)::: document info add annotation:::
XSDocumentInfo#getAnnotations()::: document info get annotations:::return
XSDocumentInfo#removeAnnotations()::: document info remove annotations:::
XSDSimpleTypeTraverser#traverseGlobal(Element, XSDocumentInfo, SchemaGrammar)::: simple type traverser traverse global:::attrValues->fAttrChecker->checkAttributes->nameAtt->if->type->traverseSimpleTypeDecl->fAttrChecker->returnAttrArray->if->new->ObjectArr->reportSchemaError->if->if->grammar->type->getName->getGlobalTypeDecl->grammar->addGlobalSimpleTypeDecl->loc->fSchemaHandler->schemaDocument2SystemId->type2->grammar->type->getName->getGlobalTypeDecl->if->grammar->addGlobalSimpleTypeDecl->if->if->if->fSchemaHandler->addGlobalTypeDecl->return
XSDSimpleTypeTraverser#traverseLocal(Element, XSDocumentInfo, SchemaGrammar)::: simple type traverser traverse local:::attrValues->fAttrChecker->checkAttributes->name->genAnonTypeName->type->getSimpleType->if->setAnonymous->fAttrChecker->returnAttrArray->return
XSDSimpleTypeTraverser#traverseSimpleTypeDecl(Element, Object[], XSDocumentInfo, SchemaGrammar)::: simple type traverser traverse simple type decl:::name->return->getSimpleType
XSDSimpleTypeTraverser#genAnonTypeName(Element)::: simple type traverser gen anon type name:::typeName->new->StringBuffer->node->DOMUtil->getParent->while->DOMUtil->DOMUtil->getDocument->getRoot->typeName->node->getAttribute->append->DOMUtil->getParent->return->typeName->toString
XSDSimpleTypeTraverser#getSimpleType(String, Element, Object[], XSDocumentInfo, SchemaGrammar)::: simple type traverser get simple type:::finalAttr->finalProperty->finalAttr->intValue->child->DOMUtil->getFirstChildElement->annotations->if->DOMUtil->getLocalName->equals->annotation->traverseAnnotationDecl->if->new->XSAnnotationImplArr->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->annotation->traverseSyntheticAnnotation->new->XSAnnotationImplArr->if->new->ObjectArr->reportSchemaError->return->errorType->varietyProperty->DOMUtil->getLocalName->refType->restriction->list->union->if->varietyProperty->equals->else->if->varietyProperty->equals->else->if->varietyProperty->equals->else->new->ObjectArr->reportSchemaError->return->errorType->nextChild->DOMUtil->getNextSiblingElement->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->contentAttrs->fAttrChecker->checkAttributes->baseTypeName->memberTypes->content->DOMUtil->getFirstChildElement->if->DOMUtil->getLocalName->equals->annotation->traverseAnnotationDecl->if->if->new->XSAnnotationImplArr->else->tempArray->new->XSAnnotationImplArr->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->annotation->traverseSyntheticAnnotation->if->new->XSAnnotationImplArr->else->tempArray->new->XSAnnotationImplArr->baseValidator->if->findDTValidator->if->return->dTValidators->dv->dvs->if->memberTypes->size->size->memberTypes->size->new->ArrayList<>->for->i->if->DOMUtil->getLocalName->equals->if->if->reportSchemaError->if->traverseLocal->DOMUtil->getNextSiblingElement->else->if->if->new->ArrayList<>->do->traverseLocal->if->if->dv->getVariety->dv->getMemberTypes->for->j->dvs->getLength->else->dTValidators->add->DOMUtil->getNextSiblingElement->while->DOMUtil->getLocalName->equals->else->if->reportSchemaError->else->if->memberTypes->size->reportSchemaError->if->fAttrChecker->returnAttrArray->return->errorType->if->dTValidators->size->fAttrChecker->returnAttrArray->return->errorType->if->isListDatatype->new->ObjectArr->baseValidator->getName->reportSchemaError->fAttrChecker->returnAttrArray->return->errorType->newDecl->if->new->XSObjectListImpl->createTypeRestriction->else->if->new->XSObjectListImpl->createTypeList->else->if->memberDecls->dTValidators->dTValidators->size->new->XSSimpleTypeArr->toArray->new->XSObjectListImpl->createTypeUnion->if->fi->traverseFacets->try->fValidationState->setNamespaceSupport->newDecl->applyFacets->catch->ex->getKey->ex->getArgs->reportSchemaError->new->XSObjectListImpl->createTypeRestriction->finally->if->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->fAttrChecker->returnAttrArray->return
XSDSimpleTypeTraverser#findDTValidator(Element, String, QName, short, XSDocumentInfo)::: simple type traverser find validator:::if->return->baseType->fSchemaHandler->getGlobalDecl->if->return->if->baseType->getTypeCategory->new->ObjectArr->reportSchemaError->return->if->if->checkBuiltIn->return->new->ObjectArr->reportSchemaError->return->if->baseType->getFinal->if->new->ObjectArr->reportSchemaError->else->if->new->ObjectArr->reportSchemaError->else->if->new->ObjectArr->reportSchemaError->return->return
XSDSimpleTypeTraverser#checkBuiltIn(String, String)::: simple type traverser check built in:::if->return->if->getGlobalTypeDecl->return
XSDSimpleTypeTraverser#isListDatatype(XSSimpleType)::: simple type traverser is list datatype:::if->validator->getVariety->return->if->validator->getVariety->temp->validator->getMemberTypes->for->i->temp->getLength->return
XSDSimpleTypeTraverser#errorType(String, String, short)::: simple type traverser error type:::stringType->getTypeDefinition->switch->return->createTypeRestriction->return->createTypeList->return->new->XSSimpleTypeArr->createTypeUnion->return
XSDUniqueOrKeyTraverser#traverse(Element, XSElementDecl, XSDocumentInfo, SchemaGrammar)::: unique or key traverser traverse:::attrValues->fAttrChecker->checkAttributes->uName->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->fAttrChecker->returnAttrArray->return->uniqueOrKey->if->DOMUtil->getLocalName->equals->new->UniqueOrKey->else->new->UniqueOrKey->if->traverseIdentityConstraint->if->grammar->uniqueOrKey->getIdentityConstraintName->getIDConstraintDecl->grammar->addIDConstraintDecl->loc->fSchemaHandler->schemaDocument2SystemId->idc->grammar->uniqueOrKey->getIdentityConstraintName->getIDConstraintDecl->if->grammar->addIDConstraintDecl->if->if->if->fSchemaHandler->addIDConstraintDecl->fAttrChecker->returnAttrArray
XSDWildcardTraverser#traverseAny(Element, XSDocumentInfo, SchemaGrammar):::Traverse <any>:::attrValues->fAttrChecker->checkAttributes->wildcard->traverseWildcardDecl->particle->if->min->intValue->max->intValue->if->if->getParticleDecl->else->new->XSParticleDecl->fAttrChecker->returnAttrArray->return
XSDWildcardTraverser#traverseAnyAttribute(Element, XSDocumentInfo, SchemaGrammar):::Traverse <anyAttribute>:::attrValues->fAttrChecker->checkAttributes->wildcard->traverseWildcardDecl->fAttrChecker->returnAttrArray->return
XSDWildcardTraverser#traverseWildcardDecl(Element, Object[], XSDocumentInfo, SchemaGrammar)::: wildcard traverser traverse wildcard decl:::wildcard->new->XSWildcardDecl->namespaceTypeAttr->namespaceTypeAttr->shortValue->processContentsAttr->processContentsAttr->shortValue->child->DOMUtil->getFirstChildElement->annotation->if->if->DOMUtil->getLocalName->equals->traverseAnnotationDecl->DOMUtil->getNextSiblingElement->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->if->new->ObjectArr->DOMUtil->getLocalName->reportSchemaError->else->text->DOMUtil->getSyntheticAnnotation->if->traverseSyntheticAnnotation->annotations->if->new->XSObjectListImpl->addXSObject->else->return

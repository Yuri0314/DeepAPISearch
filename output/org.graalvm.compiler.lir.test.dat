CompositeValueReplacementTest1.TestCompositeValue#forEachComponent(LIRInstruction, OperandMode, InstructionValueProcedure)::: test composite value for each component:::newValue->proc->doValue->if->value->identityEquals->return->new->TestCompositeValue->return
CompositeValueReplacementTest1.TestCompositeValue#visitEachComponent(LIRInstruction, OperandMode, InstructionValueConsumer)::: test composite value visit each component:::proc->visitValue
CompositeValueReplacementTest1.DummyValue#hashCode()::: dummy value hash code:::prime->result->super->hashCode->return
CompositeValueReplacementTest1.DummyValue#equals(Object)::: dummy value equals:::if->return->if->super->equals->return->if->getClass->obj->getClass->return->other->if->return->return
CompositeValueReplacementTest1.DummyValue#toString()::: dummy value to string:::return
CompositeValueReplacementTest1.TestOp#emitCode(CompilationResultBuilder)::: test op emit code:::fail
CompositeValueReplacementTest1#replaceCompValueTest0()::: composite value replacement test1 replace comp value test0:::dummyValue1->new->DummyValue->dummyValue2->new->DummyValue->dummyValue3->new->DummyValue->compValue1->new->TestCompositeValue->op1->new->TestOp->op2->new->TestOp->op1->assertEquals->return->forEachInput->op2->assertEquals->return->forEachInput->op1->assertEquals->visitEachInput->op2->assertEquals->visitEachInput
GenericValueMapTest#run0()::: generic value map test run0:::cat->new->RegisterCategory->reg->new->Register->asValue->var->LIRKind->value->new->Variable->obj0->new->Object->obj1->new->Object->map->new->GenericValueMap<>->map->get->assertNull->map->get->assertNull->map->put->map->put->map->get->assertEquals->map->get->assertEquals->map->remove->map->remove->map->get->assertNull->map->get->assertNull->map->put->map->put->map->put->map->put->map->get->assertEquals->map->get->assertEquals->map->put->map->put->map->get->assertNull->map->get->assertNull

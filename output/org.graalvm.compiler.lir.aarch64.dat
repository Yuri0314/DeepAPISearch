AArch64AddressValue#toRegister(AllocatableValue)::: arch64 address value to register:::if->value->equals->return->else->return->getRegister
AArch64AddressValue#getBase()::: arch64 address value get base:::return
AArch64AddressValue#getOffset()::: arch64 address value get offset:::return
AArch64AddressValue#getDisplacement()::: arch64 address value get displacement:::return
AArch64AddressValue#isScaled()::: arch64 address value is scaled:::return
AArch64AddressValue#getScaleFactor()::: arch64 address value get scale factor:::return
AArch64AddressValue#getAddressingMode()::: arch64 address value get addressing mode:::return
AArch64AddressValue#toAddress()::: arch64 address value to address:::baseReg->toRegister->offsetReg->toRegister->extendType->return->AArch64Address->isScaled->createAddress
AArch64AddressValue#forEachComponent(LIRInstruction, LIRInstruction.OperandMode, InstructionValueProcedure)::: arch64 address value for each component:::newBase->proc->doValue->newOffset->proc->doValue->if->base->identityEquals->offset->identityEquals->return->getValueKind->new->AArch64AddressValue->return
AArch64AddressValue#visitEachComponent(LIRInstruction, LIRInstruction.OperandMode, InstructionValueConsumer)::: arch64 address value visit each component:::proc->visitValue->proc->visitValue
AArch64ArithmeticLIRGeneratorTool#emitCountLeadingZeros(Value)::: arch64 arithmetic generator tool emit count leading zeros:::
AArch64ArithmeticLIRGeneratorTool#emitCountTrailingZeros(Value)::: arch64 arithmetic generator tool emit count trailing zeros:::
AArch64ArithmeticLIRGeneratorTool#emitRound(Value, RoundingMode)::: arch64 arithmetic generator tool emit round:::
AArch64ArrayCompareToOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 array compare to op emit code:::result->asRegister->length1->asRegister->length2->asRegister->array1->asRegister->array2->asRegister->length->asRegister->temp->asRegister->tailCount->asRegister->vecCount->asRegister->BREAK_LABEL->new->Label->STRING_DIFFER_LABEL->new->Label->LENGTH_DIFFER_LABEL->new->Label->MAIN_LOOP_LABEL->new->Label->COMPARE_SHORT_LABEL->new->Label->isLL->isUU->isLU->isUL->CHAR_SIZE_BYTES->VECTOR_SIZE_BYTES->VECTOR_COUNT_BYTES->if->if->masm->AArch64Address->asRegister->createUnscaledImmediateAddress->lea->masm->AArch64Address->asRegister->createUnscaledImmediateAddress->lea->if->masm->lshr->if->masm->lshr->masm->lshr->masm->cmp->masm->cmov->masm->cbz->if->masm->shl->masm->mov->masm->and->masm->ands->masm->branchConditionally->if->masm->lshr->masm->bind->if->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->ubfm->masm->lshr->masm->bfm->masm->lshr->masm->bfm->masm->lshr->masm->bfm->masm->shl->masm->AArch64Address->createRegisterOffsetAddress->ldr->else->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->eor->masm->cbnz->masm->add->masm->cmp->masm->branchConditionally->masm->cbz->masm->AArch64Address->createRegisterOffsetAddress->lea->if->masm->shl->masm->AArch64Address->createRegisterOffsetAddress->lea->masm->bind->for->i->masm->bind->masm->rbit->masm->clz->masm->and->masm->eor->masm->ashr->masm->ashr->masm->and->masm->and->if->masm->sub->else->masm->sub->masm->branchConditionally->masm->bind->if->masm->sub->else->masm->sub->masm->bind
AArch64ArrayEqualsOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 array equals op emit code:::result->asRegister->array1->asRegister->array2->asRegister->length->asRegister->breakLabel->new->Label->try->sc1->masm->getScratchRegister->rscratch1->sc1->getRegister->masm->AArch64Address->asRegister->createUnscaledImmediateAddress->lea->masm->AArch64Address->asRegister->createUnscaledImmediateAddress->lea->masm->mov->masm->asRegister->smaddl->masm->mov->emit8ByteCompare->emitTailCompares->masm->bind->masm->cmp->masm->resultValue->getPlatformKind->getSizeInBytes->cset->catch->finally
AArch64ArrayEqualsOp#emit8ByteCompare(CompilationResultBuilder, AArch64MacroAssembler, Register, Register, Register, Register, Label, Register):::Emits code that uses 8-byte vector compares.:::loop->new->Label->compareTail->new->Label->temp->asRegister->masm->and->masm->ands->masm->branchConditionally->masm->AArch64Address->createRegisterOffsetAddress->lea->masm->AArch64Address->createRegisterOffsetAddress->lea->masm->sub->masm->align->masm->bind->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->eor->masm->cbnz->masm->add->masm->cbnz->masm->cbz->masm->AArch64Address->createUnscaledImmediateAddress->lea->masm->AArch64Address->createUnscaledImmediateAddress->lea->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->AArch64Address->createRegisterOffsetAddress->ldr->masm->eor->masm->jmp->masm->bind
AArch64ArrayEqualsOp#emitTailCompares(AArch64MacroAssembler, Register, Register, Register, Label, Register):::Emits code to compare the remaining 1 to 4 bytes.:::compare2Bytes->new->Label->compare1Byte->new->Label->end->new->Label->temp->asRegister->if->kind->getByteCount->masm->ands->masm->branchConditionally->masm->AArch64Address->createPostIndexedImmediateAddress->ldr->masm->AArch64Address->createPostIndexedImmediateAddress->ldr->masm->eor->masm->cbnz->if->kind->getByteCount->masm->bind->masm->ands->masm->branchConditionally->masm->AArch64Address->createPostIndexedImmediateAddress->ldr->masm->AArch64Address->createPostIndexedImmediateAddress->ldr->masm->eor->masm->cbnz->if->kind->getByteCount->masm->bind->masm->ands->masm->branchConditionally->masm->AArch64Address->createBaseRegisterOnlyAddress->ldr->masm->AArch64Address->createBaseRegisterOnlyAddress->ldr->masm->eor->masm->cbnz->else->masm->bind->else->masm->bind->masm->bind->masm->mov
AArch64AtomicMove.CompareAndSwapOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: compare and swap op emit code:::kind->expectedValue->getPlatformKind->size->kind->getSizeInBytes->address->asRegister->result->asRegister->newVal->asRegister->if->AArch64LIRFlagsVersioned->useLSE->expected->asRegister->masm->mov->masm->cas->AArch64Compare->gpCompare->else->scratch->asRegister->retry->new->Label->fail->new->Label->masm->bind->masm->ldaxr->AArch64Compare->gpCompare->masm->branchConditionally->masm->stlxr->masm->cbnz->masm->bind
AArch64AtomicMove.AtomicReadAndAddOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: atomic read and add op emit code:::size->accessKind->getSizeInBytes->address->asRegister->result->asRegister->retry->new->Label->masm->bind->masm->ldaxr->try->scratchRegister1->masm->getScratchRegister->scratch1->scratchRegister1->getRegister->if->LIRValueUtil->isConstantValue->delta->LIRValueUtil->asConstantValue->getJavaConstant->asLong->masm->add->else->masm->asRegister->add->try->scratchRegister2->masm->getScratchRegister->scratch2->scratchRegister2->getRegister->masm->stlxr->masm->cbnz->catch->finally->catch->finally
AArch64AtomicMove.AtomicReadAndAddLSEOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: atomic read and add op emit code:::size->accessKind->getSizeInBytes->address->asRegister->delta->asRegister->result->asRegister->masm->ldadd
AArch64AtomicMove.AtomicReadAndWriteOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: atomic read and write op emit code:::size->accessKind->getSizeInBytes->address->asRegister->value->asRegister->result->asRegister->if->AArch64LIRFlagsVersioned->useLSE->masm->swp->else->scratch->asRegister->retry->new->Label->masm->bind->masm->ldaxr->masm->stlxr->masm->cbnz
AArch64BitFieldOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 bit field op emit code:::dst->asRegister->src->asRegister->size->input->getPlatformKind->getSizeInBytes->switch->masm->ubfm->break->masm->ubfm->break->throw->GraalError->shouldNotReachHere
AArch64BitManipulationOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 bit manipulation op emit code:::dst->asRegister->src->asRegister->size->input->getPlatformKind->getSizeInBytes->switch->masm->clz->break->masm->clz->masm->neg->masm->add->break->masm->rbit->masm->clz->break->masm->rev->break->vreg->asRegister->masm->popcnt->break->throw->GraalError->shouldNotReachHere
AArch64BlockEndOp#emitCode(CompilationResultBuilder)::: arch64 block end op emit code:::emitCode
AArch64BlockEndOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 block end op emit code:::
AArch64BreakpointOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 breakpoint op emit code:::masm->brk
AArch64ByteSwapOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 byte swap op emit code:::switch->input->getPlatformKind->masm->ValueUtil->asRegister->ValueUtil->asRegister->rev->break->masm->ValueUtil->asRegister->ValueUtil->asRegister->rev->break->throw->GraalError->shouldNotReachHere
AArch64Call.CallOp#destroysCallerSavedRegisters()::: call op destroys caller saved registers:::return
AArch64Call.IndirectCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: indirect call op emit code:::target->asRegister->indirectCall
AArch64Call.IndirectCallOp#verify()::: indirect call op verify:::super->verify
AArch64Call.DirectCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: direct call op emit code:::directCall
AArch64Call.ForeignCallOp#destroysCallerSavedRegisters()::: foreign call op destroys caller saved registers:::return->callTarget->destroysRegisters
AArch64Call.ForeignCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: foreign call op emit code:::emitCall
AArch64Call.ForeignCallOp#emitCall(CompilationResultBuilder, AArch64MacroAssembler)::: foreign call op emit call:::
AArch64Call.ForeignCallOp#getLabel()::: foreign call op get label:::return
AArch64Call.DirectNearForeignCallOp#emitCall(CompilationResultBuilder, AArch64MacroAssembler)::: direct near foreign call op emit call:::directCall
AArch64Call.DirectFarForeignCallOp#emitCall(CompilationResultBuilder, AArch64MacroAssembler)::: direct far foreign call op emit call:::directCall
AArch64Call#isNearCall(ForeignCallLinkage):::Tests whether linkage can be called directly under all circumstances without the need for a scratch register:::maxOffset->linkage->getMaxCallTargetOffset->return->AArch64MacroAssembler->isBranchImmediateOffset
AArch64Call#directCall(CompilationResultBuilder, AArch64MacroAssembler, InvokeTarget, Register, LIRFrameState)::: arch64 call direct call:::directCall
AArch64Call#directCall(CompilationResultBuilder, AArch64MacroAssembler, InvokeTarget, Register, LIRFrameState, Label)::: arch64 call direct call:::before->masm->position->if->if->GeneratePIC->crb->getOptions->getValue->masm->bl->else->masm->movNativeAddress->masm->blr->else->masm->bl->if->masm->bind->after->masm->position->crb->recordDirectCall->crb->recordExceptionHandlers->masm->ensureUniquePC
AArch64Call#indirectCall(CompilationResultBuilder, AArch64MacroAssembler, Register, InvokeTarget, LIRFrameState)::: arch64 call indirect call:::before->masm->position->masm->blr->after->masm->position->crb->recordIndirectCall->crb->recordExceptionHandlers->masm->ensureUniquePC
AArch64Call#directJmp(CompilationResultBuilder, AArch64MacroAssembler, InvokeTarget)::: arch64 call direct jmp:::try->scratch->masm->getScratchRegister->before->masm->position->if->GeneratePIC->crb->getOptions->getValue->masm->jmp->else->masm->scratch->getRegister->movNativeAddress->masm->scratch->getRegister->jmp->after->masm->position->crb->recordDirectCall->masm->ensureUniquePC->catch->finally
AArch64Call#indirectJmp(CompilationResultBuilder, AArch64MacroAssembler, Register, InvokeTarget)::: arch64 call indirect jmp:::before->masm->position->masm->jmp->after->masm->position->crb->recordIndirectCall->masm->ensureUniquePC
AArch64Call#directConditionalJmp(CompilationResultBuilder, AArch64MacroAssembler, InvokeTarget, AArch64Assembler.ConditionFlag)::: arch64 call direct conditional jmp:::before->masm->position->masm->branchConditionally->after->masm->position->crb->recordDirectCall->masm->ensureUniquePC
AArch64CCall#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 call emit code:::directCall
AArch64CCall#directCall(AArch64MacroAssembler)::: arch64 call direct call:::reg->ValueUtil->asRegister->masm->blr->masm->ensureUniquePC
AArch64CCall#destroysCallerSavedRegisters()::: arch64 call destroys caller saved registers:::return
AArch64Compare.CompareOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: compare op emit code:::gpCompare
AArch64Compare#gpCompare(AArch64MacroAssembler, Value, Value):::Compares integer values x and y.:::size->x->getPlatformKind->getSizeInBytes->if->isRegister->masm->asRegister->asRegister->cmp->else->constant->asJavaConstant->if->constant->isDefaultForKind->masm->asRegister->cmp->else->longValue->constant->asLong->maskedValue->switch->constant->getJavaKind->break->break->break->throw->GraalError->shouldNotReachHere->masm->asRegister->cmp
AArch64Compare.FloatCompareOp#isFloatCmpConstant(Value, Condition, boolean):::Checks if val can be used as a constant for the gpCompare operation or not.:::if->return->return->isJavaConstant->asJavaConstant->isDefaultForKind
AArch64Compare.FloatCompareOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: float compare op emit code:::size->x->getPlatformKind->getSizeInBytes->if->isRegister->masm->asRegister->asRegister->fcmp->if->nzcv->masm->asRegister->asRegister->fccmp->else->if->nzcv->masm->asRegister->asRegister->fccmp->else->masm->asRegister->fcmpZero
AArch64Compare.FloatCompareOp#verify()::: float compare op verify:::
AArch64ControlFlow.ReturnOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: return op emit code:::leave->masm->ret
AArch64ControlFlow.AbstractBranchOp#emitBranch(CompilationResultBuilder, AArch64MacroAssembler, LabelRef, boolean)::: abstract branch op emit branch:::
AArch64ControlFlow.AbstractBranchOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: abstract branch op emit code:::if->crb->isSuccessorEdge->emitBranch->else->if->crb->isSuccessorEdge->emitBranch->else->if->emitBranch->masm->trueDestination->label->jmp->else->emitBranch->masm->falseDestination->label->jmp
AArch64ControlFlow.BranchOp#emitBranch(CompilationResultBuilder, AArch64MacroAssembler, LabelRef, boolean)::: branch op emit branch:::finalCond->condition->negate->masm->target->label->branchConditionally
AArch64ControlFlow.CompareBranchZeroOp#emitBranch(CompilationResultBuilder, AArch64MacroAssembler, LabelRef, boolean)::: compare branch zero op emit branch:::kind->getPlatformKind->size->kind->getSizeInBytes->if->masm->asRegister->target->label->cbnz->else->masm->asRegister->target->label->cbz
AArch64ControlFlow.BitTestAndBranchOp#emitBranch(CompilationResultBuilder, AArch64MacroAssembler, LabelRef, boolean)::: bit test and branch op emit branch:::cond->label->target->label->isFarBranch->if->label->isBound->NumUtil->masm->position->label->position->isSignedNbit->else->maxLIRDistance->crb->labelWithinRange->if->cond->negate->new->Label->if->masm->asRegister->tbz->else->masm->asRegister->tbnz->if->masm->target->label->jmp->masm->bind
AArch64ControlFlow.CondMoveOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: cond move op emit code:::kind->trueValue->getPlatformKind->size->kind->getSizeInBytes->if->kind->isInteger->masm->asRegister->asRegister->asRegister->cmov->else->masm->asRegister->asRegister->asRegister->fcmov
AArch64ControlFlow.CondSetOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: cond set op emit code:::size->result->getPlatformKind->getSizeInBytes->masm->asRegister->cset
AArch64ControlFlow.StrategySwitchOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: strategy switch op emit code:::strategy->asRegister->new->SwitchClosure->run
AArch64ControlFlow.StrategySwitchOp.SwitchClosure#emitComparison(Constant)::: switch closure emit comparison:::jc->constVal->LIRKind->key->getPlatformKind->value->new->ConstantValue->switch->jc->getJavaKind->lc->jc->asLong->emitCompare->break->emitCompare->break->emitCompare->break->throw->new->GraalError
AArch64ControlFlow.StrategySwitchOp.SwitchClosure#conditionalJump(int, Condition, Label)::: switch closure conditional jump:::emitComparison->masm->converter->apply->branchConditionally
AArch64ControlFlow.TableSwitchOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: table switch op emit code:::indexReg->asRegister->idxScratchReg->asRegister->scratchReg->asRegister->highKey->masm->sub->masm->cmp->if->masm->defaultTarget->label->branchConditionally->jumpTable->new->Label->masm->adr->masm->add->masm->jmp->masm->bind->foreach->masm->target->label->jmp->jt->jumpTable->position->new->JumpTable->addAnnotation
AArch64ControlFlow#emitCompare(CompilationResultBuilder, AArch64MacroAssembler, Value, Value, ConstantValue)::: arch64 control flow emit compare:::imm->c->getJavaConstant->asLong->size->key->getPlatformKind->getSizeInBytes->if->AArch64MacroAssembler->isComparisonImmediate->masm->asRegister->cmp->else->AArch64Move->asAllocatableValue->move->masm->asRegister->asRegister->cmp
AArch64FrameMap#totalFrameSize()::: arch64 frame map total frame size:::return->frameSize->frameSetupSize
AArch64FrameMap#frameSetupSize()::: arch64 frame map frame setup size:::return->getTarget->getWordSize
AArch64FrameMap#currentFrameSize()::: arch64 frame map current frame size:::return->alignFrameSize
AArch64FrameMap#allocateDeoptimizationRescueSlot()::: arch64 frame map allocate deoptimization rescue slot:::return->LIRKind->value->allocateSpillSlot
AArch64FrameMapBuilder#allocateDeoptimizationRescueSlot()::: arch64 frame map builder allocate deoptimization rescue slot:::return->getFrameMap->allocateDeoptimizationRescueSlot
AArch64LIRFlagsVersioned#useLSE(Architecture)::: arch64 flags versioned use e:::aarch64->return->aarch64->getFeatures->contains->aarch64->getFlags->contains
AArch64LIRInstruction#emitCode(CompilationResultBuilder)::: arch64 instruction emit code:::emitCode
AArch64LIRInstruction#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 instruction emit code:::
AArch64MathIntrinsicBinaryOp#registersToValues(Register[])::: arch64 math intrinsic binary op registers to values:::temps->new->ValueArr->for->i->return
AArch64MathIntrinsicBinaryOp#emitLIRWrapper(LIRGenerator, Value, Value)::: arch64 math intrinsic binary op emit wrapper:::kind->LIRKind->combine->v0value->v0->asValue->gen->emitMove->v1value->v1->asValue->gen->emitMove->gen->append->result->gen->newVariable->gen->emitMove->return
AArch64Move.LoadInlineConstant#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: load inline constant emit code:::if->isRegister->const2reg->else->if->isStackSlot->slot->asStackSlot->const2stack
AArch64Move.LoadInlineConstant#getConstant()::: load inline constant get constant:::return
AArch64Move.LoadInlineConstant#getResult()::: load inline constant get result:::return
AArch64Move.Move#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: move emit code:::getResult->getInput->move
AArch64Move.Move#getInput()::: move get input:::return
AArch64Move.Move#getResult()::: move get result:::return
AArch64Move.LoadAddressOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: load address op emit code:::dst->asRegister->adr->address->toAddress->masm->address->getScaleFactor->loadAddress
AArch64Move.LoadDataOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: load data op emit code:::dst->asRegister->if->isImmutablePIC->crb->recordDataReferenceInCode->masm->addressOf->else->masm->crb->recordDataReferenceInCode->data->getAlignment->loadAddress
AArch64Move.StackLoadAddressOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: stack load address op emit code:::try->addrReg->masm->getScratchRegister->address->addrReg->getRegister->loadStackSlotAddress->kind->masm->asRegister->kind->getSizeInBytes->loadAddress->catch->finally
AArch64Move.MembarOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: membar op emit code:::switch->masm->dmb->break->masm->dmb->break->masm->dmb->break
AArch64Move.MemOp#emitMemAccess(CompilationResultBuilder, AArch64MacroAssembler)::: mem op emit mem access:::
AArch64Move.MemOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: mem op emit code:::if->crb->masm->position->recordImplicitException->emitMemAccess
AArch64Move.MemOp#makeNullCheckFor(Value, LIRFrameState, int)::: mem op make null check for:::displacement->addressValue->getDisplacement->if->value->addressValue->getBase->equals->addressValue->getOffset->equals->return->return
AArch64Move.LoadOp#emitMemAccess(CompilationResultBuilder, AArch64MacroAssembler)::: load op emit mem access:::address->addressValue->toAddress->dst->asRegister->destSize->result->getPlatformKind->getSizeInBytes->srcSize->kind->getSizeInBytes->if->kind->isInteger->masm->ldr->else->masm->fldr
AArch64Move.StoreOp#emitMemAccess(CompilationResultBuilder, AArch64MacroAssembler)::: store op emit mem access:::addressValue->toAddress->emitStore
AArch64Move.StoreConstantOp#emitMemAccess(CompilationResultBuilder, AArch64MacroAssembler)::: store constant op emit mem access:::addressValue->toAddress->zr->LIRKind->combine->asValue->emitStore
AArch64Move.NullCheckOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: null check op emit code:::crb->masm->position->recordImplicitException->masm->address->toAddress->ldr
AArch64Move.NullCheckOp#getCheckedValue()::: null check op get checked value:::return
AArch64Move.NullCheckOp#getState()::: null check op get state:::return
AArch64Move#emitStore(CompilationResultBuilder, AArch64MacroAssembler, AArch64Kind, AArch64Address, Value)::: arch64 move emit store:::destSize->kind->getSizeInBytes->if->kind->isInteger->masm->asRegister->str->else->masm->asRegister->fstr
AArch64Move#move(CompilationResultBuilder, AArch64MacroAssembler, AllocatableValue, Value)::: arch64 move move:::if->isRegister->if->isRegister->asAllocatableValue->reg2reg->else->if->isStackSlot->asAllocatableValue->reg2stack->else->throw->GraalError->shouldNotReachHere->else->if->isStackSlot->if->isRegister->asAllocatableValue->stack2reg->else->if->isStackSlot->emitStackMove->else->throw->GraalError->shouldNotReachHere->else->if->isJavaConstant->if->isRegister->asJavaConstant->const2reg->else->throw->GraalError->shouldNotReachHere->else->throw->GraalError->shouldNotReachHere
AArch64Move#emitStackMove(CompilationResultBuilder, AArch64MacroAssembler, AllocatableValue, Value)::: arch64 move emit stack move:::try->r1->masm->getScratchRegister->try->r2->masm->getScratchRegister->rscratch1->r1->getRegister->rscratch2->r2->getRegister->kind->input->getPlatformKind->size->kind->getSizeInBytes->crb->blockComment->src->asStackSlot->loadStackSlotAddress->masm->ldr->dst->asStackSlot->loadStackSlotAddress->masm->str->catch->finally->catch->finally
AArch64Move#reg2reg(CompilationResultBuilder, AArch64MacroAssembler, AllocatableValue, AllocatableValue)::: arch64 move reg2reg:::dst->asRegister->src->asRegister->if->src->equals->return->kind->input->getPlatformKind->size->kind->getSizeInBytes->if->kind->isInteger->masm->mov->else->masm->fmov
AArch64Move#reg2stack(CompilationResultBuilder, AArch64MacroAssembler, AllocatableValue, AllocatableValue)::: arch64 move reg2stack:::dest->try->scratch->masm->getScratchRegister->asStackSlot->scratch->getRegister->loadStackSlotAddress->catch->finally->src->asRegister->kind->result->getPlatformKind->size->kind->getSizeInBytes->if->kind->isInteger->masm->str->else->masm->fstr
AArch64Move#stack2reg(CompilationResultBuilder, AArch64MacroAssembler, AllocatableValue, AllocatableValue)::: arch64 move stack2reg:::kind->input->getPlatformKind->size->kind->getSizeInBytes->if->kind->isInteger->src->asStackSlot->loadStackSlotAddress->masm->asRegister->ldr->else->try->sc->masm->getScratchRegister->scratchRegisterValue->sc->getRegister->LIRKind->combine->asValue->src->asStackSlot->loadStackSlotAddress->masm->asRegister->fldr->catch->finally
AArch64Move#const2reg(CompilationResultBuilder, AArch64MacroAssembler, Value, JavaConstant)::: arch64 move const2reg:::dst->asRegister->switch->input->getJavaKind->getStackKind->value->input->asInt->maskedValue->switch->input->getJavaKind->break->break->break->throw->GraalError->shouldNotReachHere->masm->mov->break->masm->input->asLong->mov->break->if->AArch64MacroAssembler->input->asFloat->isFloatImmediate->masm->input->asFloat->fmov->else->if->isImmutablePIC->try->scr->masm->getScratchRegister->scratch->scr->getRegister->masm->Float->input->asFloat->floatToRawIntBits->mov->masm->fmov->catch->finally->else->try->scr->masm->getScratchRegister->scratch->scr->getRegister->crb->asFloatConstRef->masm->addressOf->masm->AArch64Address->createBaseRegisterOnlyAddress->fldr->catch->finally->break->if->AArch64MacroAssembler->input->asDouble->isDoubleImmediate->masm->input->asDouble->fmov->else->if->isImmutablePIC->try->scr->masm->getScratchRegister->scratch->scr->getRegister->masm->Double->input->asDouble->doubleToRawLongBits->mov->masm->fmov->catch->finally->else->try->scr->masm->getScratchRegister->scratch->scr->getRegister->crb->asDoubleConstRef->masm->addressOf->masm->AArch64Address->createBaseRegisterOnlyAddress->fldr->catch->finally->break->if->input->isNull->if->crb->mustReplaceWithUncompressedNullRegister->masm->mov->else->masm->mov->else->if->crb->recordInlineDataInCode->masm->mov->else->masm->crb->recordDataReferenceInCode->ldr->break->throw->GraalError->input->getJavaKind->getStackKind->shouldNotReachHere
AArch64Move#const2stack(CompilationResultBuilder, AArch64MacroAssembler, Value, JavaConstant)::: arch64 move const2stack:::try->addrReg->masm->getScratchRegister->slot->resultAddress->addrReg->getRegister->loadStackSlotAddress->if->constant->isDefaultForKind->constant->isNull->result->getPlatformKind->zr->LIRKind->combine->asValue->emitStore->else->try->sc->masm->getScratchRegister->scratchRegisterValue->sc->getRegister->LIRKind->combine->asValue->const2reg->result->getPlatformKind->emitStore->catch->finally->catch->finally
AArch64Move#loadStackSlotAddress(CompilationResultBuilder, AArch64MacroAssembler, StackSlot, AllocatableValue):::Returns AArch64Address of given StackSlot:::scratchReg->equals->asRegister->return->loadStackSlotAddress
AArch64Move#loadStackSlotAddress(CompilationResultBuilder, AArch64MacroAssembler, StackSlot, Register)::: arch64 move load stack slot address:::displacement->offsetForStackSlot->transferSize->slot->getPlatformKind->getSizeInBytes->return->masm->makeAddress
AArch64Move.PointerCompressionOp#hasBase(OptionValues, CompressEncoding)::: pointer compression op has base:::return->GeneratePIC->getValue->encoding->hasBase
AArch64Move.PointerCompressionOp#getInput()::: pointer compression op get input:::return
AArch64Move.PointerCompressionOp#getResult()::: pointer compression op get result:::return
AArch64Move.PointerCompressionOp#getResultRegister()::: pointer compression op get result register:::return->asRegister
AArch64Move.PointerCompressionOp#getBaseRegister(CompilationResultBuilder)::: pointer compression op get base register:::return->crb->getOptions->hasBase->asRegister
AArch64Move.PointerCompressionOp#getShift()::: pointer compression op get shift:::return->encoding->getShift
AArch64Move.PointerCompressionOp#move(CompilationResultBuilder, AArch64MacroAssembler)::: pointer compression op move:::AArch64Move->move
AArch64Move.CompressPointerOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: compress pointer op emit code:::resultRegister->getResultRegister->ptr->getInput->asRegister->base->getBaseRegister->if->encoding->hasBase->if->encoding->hasShift->masm->encoding->getShift->lshr->else->masm->movx->else->if->masm->sub->if->encoding->hasShift->masm->encoding->getShift->lshr->else->masm->cmp->masm->cmov->masm->sub->if->encoding->hasShift->masm->encoding->getShift->lshr
AArch64Move.UncompressPointerOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: uncompress pointer op emit code:::inputRegister->getInput->asRegister->resultRegister->getResultRegister->base->encoding->hasBase->getBaseRegister->if->masm->encoding->getShift->add->else->done->new->Label->if->resultRegister->equals->masm->mov->masm->cbz->masm->encoding->getShift->add->masm->bind
AArch64Move.ZeroNullConversionOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: zero null conversion op emit code:::nullRegister->if->nullRegister->equals->asRegister->asRegister->emitConversion
AArch64Move.ZeroNullConversionOp#emitConversion(Register, Register, Register, AArch64MacroAssembler)::: zero null conversion op emit conversion:::
AArch64Move.ConvertNullToZeroOp#emitConversion(Register, Register, Register, AArch64MacroAssembler)::: convert null to zero op emit conversion:::if->inputRegister->equals->masm->subs->done->new->Label->masm->branchConditionally->masm->add->masm->bind->else->masm->subs->masm->cmp->done->new->Label->masm->branchConditionally->masm->movx->masm->bind
AArch64Move.ConvertZeroToNullOp#emitConversion(Register, Register, Register, AArch64MacroAssembler)::: convert zero to null op emit conversion:::if->inputRegister->equals->masm->movx->done->new->Label->masm->ands->masm->branchConditionally->masm->movx->masm->bind
AArch64PauseOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 pause op emit code:::masm->pause
AArch64PrefetchOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 prefetch op emit code:::masm->address->toAddress->prfm
AArch64ReinterpretOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 reinterpret op emit code:::result->asRegister->input->asRegister->to->resultValue->getPlatformKind->size->to->getSizeInBytes->masm->fmov
AArch64RestoreRegistersOp#getSavedRegisters()::: arch64 restore registers op get saved registers:::return
AArch64RestoreRegistersOp#restoreRegister(CompilationResultBuilder, AArch64MacroAssembler, Register, StackSlot)::: arch64 restore registers op restore register:::AArch64Move->result->asValue->stack2reg
AArch64RestoreRegistersOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 restore registers op emit code:::savedRegisters->getSavedRegisters->for->i
AArch64SaveRegistersOp#saveRegister(CompilationResultBuilder, AArch64MacroAssembler, StackSlot, Register)::: arch64 save registers op save register:::AArch64Move->input->asValue->reg2stack
AArch64SaveRegistersOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 save registers op emit code:::for->i
AArch64SaveRegistersOp#getSlots()::: arch64 save registers op get slots:::return
AArch64SaveRegistersOp#supportsRemove()::: arch64 save registers op supports remove:::return
AArch64SaveRegistersOp#remove(EconomicSet)::: arch64 save registers op remove:::if->throw->new->UnsupportedOperationException->return->prune
AArch64SaveRegistersOp#prune(EconomicSet, Register[])::: arch64 save registers op prune:::pruned->for->i->return
AArch64SaveRegistersOp#getMap(FrameMap)::: arch64 save registers op get map:::total->for->i->keys->new->RegisterArr->values->new->intArr->if->mapIndex->for->i->return->new->RegisterSaveLayout
AArch64SaveRegistersOp#indexForStackSlot(FrameMap, StackSlot):::Computes the index of a stack slot relative to slot 0:::value->frameMap->offsetForStackSlot->frameMap->getTarget->return
AArch64SignExtendOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 sign extend op emit code:::result->asRegister->input->asRegister->masm->sxt
AArch64SpeculativeBarrier#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: arch64 speculative barrier emit code:::masm->csdb
AArch64Unary.MemoryOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)::: memory op emit code:::if->crb->masm->position->recordImplicitException->address->input->toAddress->dst->asRegister->if->masm->ldrs->else->masm->ldr
AArch64Unary.MemoryOp#makeNullCheckFor(Value, LIRFrameState, int)::: memory op make null check for:::displacement->input->getDisplacement->if->value->input->getBase->equals->input->getOffset->equals->return->return

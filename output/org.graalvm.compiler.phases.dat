org.graalvm.compiler.phases.BasePhase_OptionDescriptors#get(String)->OptionDescriptor::: base phase_ option descriptors get
org.graalvm.compiler.phases.BasePhase_OptionDescriptors#iterator()->Iterator::: base phase_ option descriptors iterator
org.graalvm.compiler.phases.BasePhase#apply(StructuredGraph, C)->void::: base phase apply
org.graalvm.compiler.phases.BasePhase#shouldDumpBeforeAtBasicLevel()->boolean::: base phase should dump before at basic level
org.graalvm.compiler.phases.BasePhase#shouldDumpAfterAtBasicLevel()->boolean::: base phase should dump after at basic level
org.graalvm.compiler.phases.BasePhase#apply(StructuredGraph, C, boolean)->void::: base phase apply
org.graalvm.compiler.phases.BasePhase#getName()->CharSequence::: base phase get name
org.graalvm.compiler.phases.BasePhase#run(StructuredGraph, C)->void::: base phase run
org.graalvm.compiler.phases.BasePhase#contractorName()->String::: base phase contractor name
org.graalvm.compiler.phases.BasePhase#codeSizeIncrease()->float::: base phase code size increase
org.graalvm.compiler.phases.ClassTypeSequence#getName()->String::: class type sequence get name
org.graalvm.compiler.phases.ClassTypeSequence#toJavaName()->String::: class type sequence to java name
org.graalvm.compiler.phases.ClassTypeSequence#toJavaName(boolean)->String::: class type sequence to java name
org.graalvm.compiler.phases.ClassTypeSequence#getComponentType()->JavaType::: class type sequence get component type
org.graalvm.compiler.phases.ClassTypeSequence#getArrayClass()->JavaType::: class type sequence get array class
org.graalvm.compiler.phases.ClassTypeSequence#getJavaKind()->JavaKind::: class type sequence get java kind
org.graalvm.compiler.phases.ClassTypeSequence#resolve(ResolvedJavaType)->ResolvedJavaType::: class type sequence resolve
org.graalvm.compiler.phases.ClassTypeSequence#length()->int::: class type sequence length
org.graalvm.compiler.phases.ClassTypeSequence#charAt(int)->char::: class type sequence char at
org.graalvm.compiler.phases.ClassTypeSequence#subSequence(int, int)->CharSequence::: class type sequence sub sequence
org.graalvm.compiler.phases.ClassTypeSequence#toString()->String::: class type sequence to string
org.graalvm.compiler.phases.LazyName#length()->int::: lazy name length
org.graalvm.compiler.phases.LazyName#charAt(int)->char::: lazy name char at
org.graalvm.compiler.phases.LazyName#subSequence(int, int)->CharSequence::: lazy name sub sequence
org.graalvm.compiler.phases.LazyName#toString()->String::: lazy name to string
org.graalvm.compiler.phases.LazyName#createString()->String:::Creates the String value of this name.
org.graalvm.compiler.phases.OptimisticOptimizations#remove(Optimization...)->OptimisticOptimizations::: optimistic optimizations remove
org.graalvm.compiler.phases.OptimisticOptimizations#add(Optimization...)->OptimisticOptimizations::: optimistic optimizations add
org.graalvm.compiler.phases.OptimisticOptimizations#removeNeverExecutedCode(OptionValues)->boolean::: optimistic optimizations remove never executed code
org.graalvm.compiler.phases.OptimisticOptimizations#useTypeCheckHints(OptionValues)->boolean::: optimistic optimizations use type check hints
org.graalvm.compiler.phases.OptimisticOptimizations#inlineMonomorphicCalls(OptionValues)->boolean::: optimistic optimizations inline monomorphic calls
org.graalvm.compiler.phases.OptimisticOptimizations#inlinePolymorphicCalls(OptionValues)->boolean::: optimistic optimizations inline polymorphic calls
org.graalvm.compiler.phases.OptimisticOptimizations#inlineMegamorphicCalls(OptionValues)->boolean::: optimistic optimizations inline megamorphic calls
org.graalvm.compiler.phases.OptimisticOptimizations#devirtualizeInvokes(OptionValues)->boolean::: optimistic optimizations devirtualize invokes
org.graalvm.compiler.phases.OptimisticOptimizations#useExceptionProbability(OptionValues)->boolean::: optimistic optimizations use exception probability
org.graalvm.compiler.phases.OptimisticOptimizations#useExceptionProbabilityForOperations()->boolean::: optimistic optimizations use exception probability for operations
org.graalvm.compiler.phases.OptimisticOptimizations#useLoopLimitChecks(OptionValues)->boolean::: optimistic optimizations use loop limit checks
org.graalvm.compiler.phases.OptimisticOptimizations#lessOptimisticThan(OptimisticOptimizations)->boolean::: optimistic optimizations less optimistic than
org.graalvm.compiler.phases.OptimisticOptimizations#toString()->String::: optimistic optimizations to string
org.graalvm.compiler.phases.Phase#apply(StructuredGraph)->void::: phase apply
org.graalvm.compiler.phases.Phase#apply(StructuredGraph, boolean)->void::: phase apply
org.graalvm.compiler.phases.Phase#run(StructuredGraph)->void::: phase run
org.graalvm.compiler.phases.Phase#run(StructuredGraph, Object)->void::: phase run
org.graalvm.compiler.phases.PhaseSuite#checkContract()->boolean::: phase suite check contract
org.graalvm.compiler.phases.PhaseSuite#isImmutable()->boolean::: phase suite is immutable
org.graalvm.compiler.phases.PhaseSuite#setImmutable()->void::: phase suite set immutable
org.graalvm.compiler.phases.PhaseSuite#prependPhase(BasePhase)->void:::Add a new phase at the beginning of this suite.
org.graalvm.compiler.phases.PhaseSuite#appendPhase(BasePhase)->void:::Add a new phase at the end of this suite.
org.graalvm.compiler.phases.PhaseSuite#addBeforeLast(BasePhase)->void:::Inserts a phase before the last phase in the suite
org.graalvm.compiler.phases.PhaseSuite#findLastPhase()->ListIterator>:::Returns a ListIterator at the position of the last phase in the suite
org.graalvm.compiler.phases.PhaseSuite#getPhases()->List>:::Gets an unmodifiable view on the phases in this suite.
org.graalvm.compiler.phases.PhaseSuite#findPhase(Class>)->ListIterator>:::Returns a ListIterator at the position of the first phase which is an instance of phaseClass or null if no such phase can be found
org.graalvm.compiler.phases.PhaseSuite#findPhase(Class>, boolean)->ListIterator>:::Returns a ListIterator at the position of the first phase which is an instance of phaseClass or, if recursive is true, is a PhaseSuite containing a phase which is an instance of phaseClass
org.graalvm.compiler.phases.PhaseSuite#findNextPhase(ListIterator>, Class>)->boolean::: phase suite find next phase
org.graalvm.compiler.phases.PhaseSuite#findNextPhase(ListIterator>, Class>, boolean)->boolean::: phase suite find next phase
org.graalvm.compiler.phases.PhaseSuite#removePhase(Class>)->boolean:::Removes the first instance of the given phase class, looking recursively into inner phase suites.
org.graalvm.compiler.phases.PhaseSuite#replacePhase(Class>, BasePhase)->boolean:::Removes the first instance of the given phase class, looking recursively into inner phase suites.
org.graalvm.compiler.phases.PhaseSuite#run(StructuredGraph, C)->void::: phase suite run
org.graalvm.compiler.phases.PhaseSuite#copy()->PhaseSuite::: phase suite copy
org.graalvm.compiler.phases.VerifyPhase#run(StructuredGraph, C)->void::: verify phase run
org.graalvm.compiler.phases.VerifyPhase#verify(StructuredGraph, C)->void:::Checks graph against some invariants.
org.graalvm.compiler.phases.VerifyPhase#verifyClass(Class, MetaAccessProvider)->void:::Checks clazz against some invariants.

LazyName#createString():::Creates the String value of this name.:::
PhaseSuite#prependPhase(BasePhase):::Add a new phase at the beginning of this suite.:::phases->add
PhaseSuite#appendPhase(BasePhase):::Add a new phase at the end of this suite.:::phases->add
PhaseSuite#addBeforeLast(BasePhase):::Inserts a phase before the last phase in the suite:::last->findLastPhase->if->last->hasPrevious->last->previous->last->add
PhaseSuite#findLastPhase():::Returns a ListIterator at the position of the last phase in the suite:::it->phases->listIterator->while->it->hasNext->it->next->return
PhaseSuite#getPhases():::Gets an unmodifiable view on the phases in this suite.:::return->Collections->unmodifiableList
PhaseSuite#findPhase(Class>):::Returns a ListIterator at the position of the first phase which is an instance of phaseClass or null if no such phase can be found:::return->findPhase
PhaseSuite#findPhase(Class>, boolean):::Returns a ListIterator at the position of the first phase which is an instance of phaseClass or, if recursive is true, is a PhaseSuite containing a phase which is an instance of phaseClass:::it->phases->listIterator->if->findNextPhase->return->else->return
PhaseSuite#removePhase(Class>):::Removes the first instance of the given phase class, looking recursively into inner phase suites.:::it->phases->listIterator->while->it->hasNext->phase->it->next->if->phaseClass->isInstance->it->remove->return->else->if->innerSuite->if->innerSuite->removePhase->if->isEmpty->it->remove->return->return
PhaseSuite#replacePhase(Class>, BasePhase):::Removes the first instance of the given phase class, looking recursively into inner phase suites.:::it->phases->listIterator->while->it->hasNext->phase->it->next->if->phaseClass->isInstance->it->set->return->else->if->innerSuite->if->innerSuite->replacePhase->return->return
VerifyPhase#verify(StructuredGraph, C):::Checks graph against some invariants.:::
VerifyPhase#verifyClass(Class, MetaAccessProvider):::Checks clazz against some invariants.:::

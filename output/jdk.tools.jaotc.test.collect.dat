ClassSearchTest#itShouldThrowExceptionIfNoProvidersAvailable()::: class search test it should throw exception if no providers available:::target->new->ClassSearch->searchPath->new->SearchPath->target->new->SearchFor->list->search
ClassSearchTest#itShouldFindAProviderForEachEntry()::: class search test it should find provider for each entry:::searched->new->HashSet<>->target->new->ClassSearch->target->searched->add->return->new->NoopSource->provider->addProvider->target->searchForList->search->Assert->hashset->assertEquals
ClassSearchTest#provider(String, BiFunction)::: class search test provider:::return->new->SourceProvider
ClassSearchTest#itShouldOnlySearchSupportedProvidersForKnownType()::: class search test it should only search supported providers for known type:::visited->new->HashSet<>->target->new->ClassSearch->target->visited->add->return->provider->addProvider->target->visited->add->return->provider->addProvider->try->target->new->SearchFor->list->search->catch->finally->Assert->hashset->assertEquals
ClassSearchTest#itShouldThrowErrorIfMultipleSourcesAreAvailable()::: class search test it should throw error if multiple sources are available:::target->new->ClassSearch->target->Assert->fail->provider->addProvider->target->Assert->fail->provider->addProvider->target->searchForList->search
ClassSearchTest#itShouldSearchAllProvidersForUnknownType()::: class search test it should search all providers for unknown type:::visited->new->HashSet<>->target->new->ClassSearch->target->visited->add->return->provider->addProvider->target->visited->add->return->provider->addProvider->try->target->searchForList->search->catch->finally->Assert->hashset->assertEquals
ClassSearchTest#itShouldTryToLoadSaidClassFromClassLoader()::: class search test it should try to load said class from class loader:::loaded->new->HashSet<>->target->new->ClassSearch->target->new->SourceProvider->addProvider->search->target->searchForList->search->Assert->new->LoadedClass->list->assertEquals
ClassSearchTest#itShouldThrowInternalErrorWhenClassLoaderFails()::: class search test it should throw internal error when class loader fails:::classLoader->new->ClassLoader->target->new->ClassSearch->target->consumer->accept->provider->addProvider->target->searchForList->search
ClassSearchTest#searchForList(String...)::: class search test search for list:::list->new->ArrayList<>->foreach->list->new->SearchFor->add->return
ClassSearchTest#list(T...)::: class search test list:::list->new->ArrayList<>->foreach->list->add->return
ClassSearchTest#hashset(T...)::: class search test hashset:::set->new->HashSet<>->foreach->set->add->return
ClassSearchTest.NoopSource#eachClass(BiConsumer)::: noop source each class:::
ClassSourceTest#itShouldThrowExceptionIfPathDoesntEndWithClass()::: class source test it should throw exception if path doesnt end with class:::Paths->get->makeClassName
ClassSourceTest#itShouldReplaceSlashesWithDots()::: class source test it should replace slashes with dots:::Assert->getpath->makeClassName->assertEquals
ClassSourceTest#itShouldStripLeadingSlash()::: class source test it should strip leading slash:::Assert->getpath->makeClassName->assertEquals
ClassSourceTest#itShouldReplaceMultipleDots()::: class source test it should replace multiple dots:::Assert->getpath->makeClassName->assertEquals
FakeFileSupport#setJarFileSystemRoot(Path)::: fake file support set jar file system root:::
FakeFileSupport#exists(Path)::: fake file support exists:::checkedExists->path->toString->add->return->exists->path->toString->contains
FakeFileSupport#isDirectory(Path)::: fake file support is directory:::checkedDirectory->path->toString->add->return->directories->path->toString->contains
FakeFileSupport#createClassLoader(Path)::: fake file support create class loader:::classloaderPaths->path->toString->add->return
FakeFileSupport#getJarFileSystemRoot(Path)::: fake file support get jar file system root:::checkedJarFileSystemRoots->jarFile->toString->add->return
FakeFileSupport#isAbsolute(Path)::: fake file support is absolute:::return->entry->toString->startsWith
FakeFileSupport#addExist(String)::: fake file support add exist:::exists->add
FakeFileSupport#addDirectory(String)::: fake file support add directory:::directories->add
FakeFileSupport#getCheckedExists()::: fake file support get checked exists:::return
FakeFileSupport#getCheckedDirectory()::: fake file support get checked directory:::return
FakeFileSupport#getCheckedJarFileSystemRoots()::: fake file support get checked jar file system roots:::return
FakeFileSupport#getClassloaderPaths()::: fake file support get classloader paths:::return
FakeSearchPath#find(FileSystem, Path, String...)::: fake search path find:::entries->entry->toString->add->return
SearchPathTest#setUp()::: search path test set up:::FileSystems->getDefault
SearchPathTest#itShouldUsePathIfPathIsAbsoluteAndExisting()::: search path test it should use path if path is absolute and existing:::mkpaths->set->new->FakeFileSupport->target->new->SearchPath->foo->Paths->mkpath->get->result->target->find->assertSame
SearchPathTest#itShouldReturnNullIfPathIsAbsoluteAndNonExisting()::: search path test it should return null if path is absolute and non existing:::set->set->new->FakeFileSupport->target->new->SearchPath->result->target->Paths->mkpath->get->find->assertNull
SearchPathTest#itShouldUseRelativeExisting()::: search path test it should use relative existing:::mkpaths->set->new->FakeFileSupport->target->new->SearchPath->target->add->hello->Paths->get->result->target->find->assertSame
SearchPathTest#itShouldSearchDefaultsBeforeSearchPaths()::: search path test it should search defaults before search paths:::mkpaths->set->new->FakeFileSupport->target->new->SearchPath->result->target->Paths->get->find->mkpath->result->toString->assertEquals->mkpaths->fileSupport->getCheckedExists->assertEquals
SearchPathTest#itShouldUseSearchPathsIfNotInDefaults()::: search path test it should use search paths if not in defaults:::mkpaths->set->new->FakeFileSupport->target->new->SearchPath->target->add->result->target->Paths->get->find->mkpath->result->toString->assertEquals->mkpaths->fileSupport->getCheckedExists->assertEquals
SearchPathTest#itShouldReturnNullIfNoExistingPathIsFound()::: search path test it should return null if no existing path is found:::set->set->new->FakeFileSupport->target->new->SearchPath->target->add->result->target->Paths->get->find->assertNull->mkpaths->fileSupport->getCheckedExists->assertEquals
Utils#set(T...)::: utils set:::set->new->HashSet<>->foreach->set->add->return
Utils#mkpath(String)::: utils mkpath:::return->getpath->toString
Utils#mkpaths(String...)::: utils mkpaths:::set->new->HashSet<>->foreach->set->mkpath->add->return
Utils#getpath(String)::: utils getpath:::if->path->startsWith->System->getProperty->startsWith->return->Paths->new->File->getAbsolutePath->get->else->return->Paths->get

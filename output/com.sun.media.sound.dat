com.sun.media.sound.AbstractDataLine#open(AudioFormat, int)->void::: abstract data line open
com.sun.media.sound.AbstractDataLine#open(AudioFormat)->void::: abstract data line open
com.sun.media.sound.AbstractDataLine#available()->int:::This implementation always returns 0.
com.sun.media.sound.AbstractDataLine#drain()->void:::This implementation does nothing.
com.sun.media.sound.AbstractDataLine#flush()->void:::This implementation does nothing.
com.sun.media.sound.AbstractDataLine#start()->void::: abstract data line start
com.sun.media.sound.AbstractDataLine#stop()->void::: abstract data line stop
com.sun.media.sound.AbstractDataLine#isRunning()->boolean::: abstract data line is running
com.sun.media.sound.AbstractDataLine#isActive()->boolean::: abstract data line is active
com.sun.media.sound.AbstractDataLine#getMicrosecondPosition()->long::: abstract data line get microsecond position
com.sun.media.sound.AbstractDataLine#getFormat()->AudioFormat::: abstract data line get format
com.sun.media.sound.AbstractDataLine#getBufferSize()->int::: abstract data line get buffer size
com.sun.media.sound.AbstractDataLine#setBufferSize(int)->int:::This implementation does NOT change the buffer size
com.sun.media.sound.AbstractDataLine#getLevel()->float:::This implementation returns AudioSystem.NOT_SPECIFIED.
com.sun.media.sound.AbstractDataLine#isStartedRunning()->boolean::: abstract data line is started running
com.sun.media.sound.AbstractDataLine#setActive(boolean)->void:::This method sets the active state and generates events if it changes.
com.sun.media.sound.AbstractDataLine#setStarted(boolean)->void:::This method sets the started state and generates events if it changes.
com.sun.media.sound.AbstractDataLine#setEOM()->void:::This method generates a STOP event and sets the started state to false
com.sun.media.sound.AbstractDataLine#open()->void:::Try to open the line with the current format and buffer size values
com.sun.media.sound.AbstractDataLine#close()->void:::This should also stop the line
com.sun.media.sound.AbstractDataLine#implOpen(AudioFormat, int)->void::: abstract data line impl open
com.sun.media.sound.AbstractDataLine#implClose()->void::: abstract data line impl close
com.sun.media.sound.AbstractDataLine#implStart()->void::: abstract data line impl start
com.sun.media.sound.AbstractDataLine#implStop()->void::: abstract data line impl stop
com.sun.media.sound.AbstractLine#getLineInfo()->Line.Info::: abstract line get line info
com.sun.media.sound.AbstractLine#isOpen()->boolean::: abstract line is open
com.sun.media.sound.AbstractLine#addLineListener(LineListener)->void::: abstract line add line listener
com.sun.media.sound.AbstractLine#removeLineListener(LineListener)->void:::Removes an audio listener.
com.sun.media.sound.AbstractLine#getControls()->Control[]:::Obtains the set of controls supported by the line
com.sun.media.sound.AbstractLine#isControlSupported(Control.Type)->boolean::: abstract line is control supported
com.sun.media.sound.AbstractLine#getControl(Control.Type)->Control::: abstract line get control
com.sun.media.sound.AbstractLine#setOpen(boolean)->void:::This method sets the open state and generates events if it changes.
com.sun.media.sound.AbstractLine#sendEvents(LineEvent)->void:::Send line events.
com.sun.media.sound.AbstractLine#getFramePosition()->int:::This is an error in the API: getFramePosition should return a long value
com.sun.media.sound.AbstractLine#getLongFramePosition()->long:::Return the frame position in a long value This implementation returns AudioSystem.NOT_SPECIFIED.
com.sun.media.sound.AbstractLine#getMixer()->AbstractMixer::: abstract line get mixer
com.sun.media.sound.AbstractLine#getEventDispatcher()->EventDispatcher::: abstract line get event dispatcher
com.sun.media.sound.AbstractLine#open()->void::: abstract line open
com.sun.media.sound.AbstractLine#close()->void::: abstract line close
com.sun.media.sound.AbstractMidiDevice#getDeviceInfo()->MidiDevice.Info::: abstract midi device get device info
com.sun.media.sound.AbstractMidiDevice#open()->void:::Open the device from an application program
com.sun.media.sound.AbstractMidiDevice#close()->void::: abstract midi device close
com.sun.media.sound.AbstractMidiDevice#closeInternal(Object)->void:::Close the device for an object that implicitely opened it
com.sun.media.sound.AbstractMidiDevice#doClose()->void::: abstract midi device do close
com.sun.media.sound.AbstractMidiDevice#isOpen()->boolean::: abstract midi device is open
com.sun.media.sound.AbstractMidiDevice#implClose()->void::: abstract midi device impl close
com.sun.media.sound.AbstractMidiDevice#getMicrosecondPosition()->long:::This implementation always returns -1
com.sun.media.sound.AbstractMidiDevice#getMaxReceivers()->int:::Return the maximum number of Receivers supported by this device
com.sun.media.sound.AbstractMidiDevice#getMaxTransmitters()->int:::Return the maximum number of Transmitters supported by this device
com.sun.media.sound.AbstractMidiDevice#getReceiver()->Receiver:::Retrieve a Receiver for this device
com.sun.media.sound.AbstractMidiDevice#getReceivers()->List::: abstract midi device get receivers
com.sun.media.sound.AbstractMidiDevice#getTransmitter()->Transmitter:::This implementation uses createTransmitter, which may throw an exception
com.sun.media.sound.AbstractMidiDevice#getTransmitters()->List::: abstract midi device get transmitters
com.sun.media.sound.AbstractMidiDevice#getId()->long::: abstract midi device get id
com.sun.media.sound.AbstractMidiDevice#getReceiverReferenceCounting()->Receiver:::Retrieve a Receiver and open the device implicitly
com.sun.media.sound.AbstractMidiDevice#getTransmitterReferenceCounting()->Transmitter:::Retrieve a Transmitter and open the device implicitly
com.sun.media.sound.AbstractMidiDevice#hasReceivers()->boolean:::Returns if this device supports Receivers
com.sun.media.sound.AbstractMidiDevice#createReceiver()->Receiver:::Create a Receiver object
com.sun.media.sound.AbstractMidiDevice#getTransmitterList()->TransmitterList:::Return the internal list of Transmitters, possibly creating it first.
com.sun.media.sound.AbstractMidiDevice#hasTransmitters()->boolean:::Returns if this device supports Transmitters
com.sun.media.sound.AbstractMidiDevice#createTransmitter()->Transmitter:::Create a Transmitter object
com.sun.media.sound.AbstractMidiDevice#implOpen()->void::: abstract midi device impl open
com.sun.media.sound.AbstractMidiDevice#finalize()->void:::close this device if discarded by the garbage collector.
com.sun.media.sound.AbstractMidiDevice.AbstractReceiver#send(MidiMessage, long)->void:::Deliver a MidiMessage
com.sun.media.sound.AbstractMidiDevice.AbstractReceiver#implSend(MidiMessage, long)->void::: abstract receiver impl send
com.sun.media.sound.AbstractMidiDevice.AbstractReceiver#close()->void:::Close the Receiver
com.sun.media.sound.AbstractMidiDevice.AbstractReceiver#getMidiDevice()->MidiDevice::: abstract receiver get midi device
com.sun.media.sound.AbstractMidiDevice.AbstractReceiver#isOpen()->boolean::: abstract receiver is open
com.sun.media.sound.AbstractMidiDevice.BasicTransmitter#setReceiver(Receiver)->void::: basic transmitter set receiver
com.sun.media.sound.AbstractMidiDevice.BasicTransmitter#getReceiver()->Receiver::: basic transmitter get receiver
com.sun.media.sound.AbstractMidiDevice.BasicTransmitter#close()->void:::Close the Transmitter
com.sun.media.sound.AbstractMidiDevice.BasicTransmitter#getMidiDevice()->MidiDevice::: basic transmitter get midi device
com.sun.media.sound.AbstractMidiDevice.TransmitterList#close()->void:::closes all transmitters and empties the list
com.sun.media.sound.AbstractMidiDevice.TransmitterList#sendMessage(int, long)->void:::Send this message to all receivers status = packedMessage & 0xFF data1 = (packedMessage & 0xFF00) >> 8; data1 = (packedMessage & 0xFF0000) >> 16;
com.sun.media.sound.AbstractMidiDevice.TransmitterList#sendMessage(byte[], long)->void::: transmitter list send message
com.sun.media.sound.AbstractMidiDevice.TransmitterList#sendMessage(MidiMessage, long)->void:::Send this message to all transmitters.
com.sun.media.sound.AbstractMidiDeviceProvider#readDeviceInfos()->void::: abstract midi device provider read device infos
com.sun.media.sound.AbstractMidiDeviceProvider#getDeviceInfo()->MidiDevice.Info[]::: abstract midi device provider get device info
com.sun.media.sound.AbstractMidiDeviceProvider#getDevice(MidiDevice.Info)->MidiDevice::: abstract midi device provider get device
com.sun.media.sound.AbstractMidiDeviceProvider.Info#equalStrings(Info)->boolean::: info equal strings
com.sun.media.sound.AbstractMidiDeviceProvider.Info#getIndex()->int::: info get index
com.sun.media.sound.AbstractMidiDeviceProvider.Info#setIndex(int)->void::: info set index
com.sun.media.sound.AbstractMidiDeviceProvider#getNumDevices()->int::: abstract midi device provider get num devices
com.sun.media.sound.AbstractMidiDeviceProvider#getDeviceCache()->MidiDevice[]::: abstract midi device provider get device cache
com.sun.media.sound.AbstractMidiDeviceProvider#setDeviceCache(MidiDevice[])->void::: abstract midi device provider set device cache
com.sun.media.sound.AbstractMidiDeviceProvider#getInfoCache()->Info[]::: abstract midi device provider get info cache
com.sun.media.sound.AbstractMidiDeviceProvider#setInfoCache(Info[])->void::: abstract midi device provider set info cache
com.sun.media.sound.AbstractMidiDeviceProvider#createInfo(int)->Info::: abstract midi device provider create info
com.sun.media.sound.AbstractMidiDeviceProvider#createDevice(Info)->MidiDevice::: abstract midi device provider create device
com.sun.media.sound.AbstractMixer#getMixerInfo()->Mixer.Info::: abstract mixer get mixer info
com.sun.media.sound.AbstractMixer#getSourceLineInfo()->Line.Info[]::: abstract mixer get source line info
com.sun.media.sound.AbstractMixer#getTargetLineInfo()->Line.Info[]::: abstract mixer get target line info
com.sun.media.sound.AbstractMixer#getSourceLineInfo(Line.Info)->Line.Info[]::: abstract mixer get source line info
com.sun.media.sound.AbstractMixer#getTargetLineInfo(Line.Info)->Line.Info[]::: abstract mixer get target line info
com.sun.media.sound.AbstractMixer#isLineSupported(Line.Info)->boolean::: abstract mixer is line supported
com.sun.media.sound.AbstractMixer#getLine(Line.Info)->Line::: abstract mixer get line
com.sun.media.sound.AbstractMixer#getMaxLines(Line.Info)->int::: abstract mixer get max lines
com.sun.media.sound.AbstractMixer#implOpen()->void::: abstract mixer impl open
com.sun.media.sound.AbstractMixer#implStart()->void::: abstract mixer impl start
com.sun.media.sound.AbstractMixer#implStop()->void::: abstract mixer impl stop
com.sun.media.sound.AbstractMixer#implClose()->void::: abstract mixer impl close
com.sun.media.sound.AbstractMixer#getSourceLines()->Line[]::: abstract mixer get source lines
com.sun.media.sound.AbstractMixer#getTargetLines()->Line[]::: abstract mixer get target lines
com.sun.media.sound.AbstractMixer#synchronize(Line[], boolean)->void:::Default implementation always throws an exception.
com.sun.media.sound.AbstractMixer#unsynchronize(Line[])->void:::Default implementation always throws an exception.
com.sun.media.sound.AbstractMixer#isSynchronizationSupported(Line[], boolean)->boolean:::Default implementation always returns false.
com.sun.media.sound.AbstractMixer#open()->void:::This implementation tries to open the mixer with its current format and buffer size settings.
com.sun.media.sound.AbstractMixer#open(boolean)->void:::This implementation tries to open the mixer with its current format and buffer size settings.
com.sun.media.sound.AbstractMixer#open(Line)->void:::The default implementation of this method just determines whether this line is a source or target line, calls open(no-arg) on the mixer, and adds the line to the appropriate vector
com.sun.media.sound.AbstractMixer#close(Line)->void:::Removes this line from the list of open source lines and open target lines, if it exists in either
com.sun.media.sound.AbstractMixer#close()->void:::Close all lines and then close this mixer.
com.sun.media.sound.AbstractMixer#start(Line)->void:::Starts the mixer.
com.sun.media.sound.AbstractMixer#stop(Line)->void:::Stops the mixer if this was the last running line.
com.sun.media.sound.AbstractMixer#isSourceLine(Line.Info)->boolean:::Determines whether this is a source line for this mixer
com.sun.media.sound.AbstractMixer#isTargetLine(Line.Info)->boolean:::Determines whether this is a target line for this mixer
com.sun.media.sound.AbstractMixer#getLineInfo(Line.Info)->Line.Info:::Returns the first complete Line.Info object it finds that matches the one specified, or null if no matching Line.Info object is found.
com.sun.media.sound.AiffFileFormat#getHeaderSize()->int::: aiff file format get header size
com.sun.media.sound.AiffFileFormat#getCommChunkSize()->int::: aiff file format get comm chunk size
com.sun.media.sound.AiffFileFormat#getFverChunkSize()->int::: aiff file format get fver chunk size
com.sun.media.sound.AiffFileFormat#getSsndChunkOffset()->int::: aiff file format get ssnd chunk offset
com.sun.media.sound.AiffFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: aiff file reader get audio file format impl
com.sun.media.sound.AiffFileWriter#getAudioFileTypes(AudioInputStream)->AudioFileFormat.Type[]::: aiff file writer get audio file types
com.sun.media.sound.AiffFileWriter#write(AudioInputStream, AudioFileFormat.Type, OutputStream)->int::: aiff file writer write
com.sun.media.sound.AiffFileWriter#write(AudioInputStream, AudioFileFormat.Type, File)->int::: aiff file writer write
com.sun.media.sound.AlawCodec#getSourceEncodings()->AudioFormat.Encoding[]::: alaw codec get source encodings
com.sun.media.sound.AlawCodec#getTargetEncodings()->AudioFormat.Encoding[]::: alaw codec get target encodings
com.sun.media.sound.AlawCodec#getTargetEncodings(AudioFormat)->AudioFormat.Encoding[]::: alaw codec get target encodings
com.sun.media.sound.AlawCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)->AudioFormat[]::: alaw codec get target formats
com.sun.media.sound.AlawCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)->AudioInputStream::: alaw codec get audio input stream
com.sun.media.sound.AlawCodec#getAudioInputStream(AudioFormat, AudioInputStream)->AudioInputStream::: alaw codec get audio input stream
com.sun.media.sound.AudioFileSoundbankReader#getSoundbank(URL)->Soundbank::: audio file soundbank reader get soundbank
com.sun.media.sound.AudioFileSoundbankReader#getSoundbank(InputStream)->Soundbank::: audio file soundbank reader get soundbank
com.sun.media.sound.AudioFileSoundbankReader#getSoundbank(AudioInputStream)->Soundbank::: audio file soundbank reader get soundbank
com.sun.media.sound.AudioFileSoundbankReader#getSoundbank(File)->Soundbank::: audio file soundbank reader get soundbank
com.sun.media.sound.AudioFloatConverter#getConverter(AudioFormat)->AudioFloatConverter::: audio float converter get converter
com.sun.media.sound.AudioFloatConverter#getFormat()->AudioFormat::: audio float converter get format
com.sun.media.sound.AudioFloatConverter#toFloatArray(byte[], int, float[], int, int)->float[]::: audio float converter to float array
com.sun.media.sound.AudioFloatConverter#toFloatArray(byte[], float[], int, int)->float[]::: audio float converter to float array
com.sun.media.sound.AudioFloatConverter#toFloatArray(byte[], int, float[], int)->float[]::: audio float converter to float array
com.sun.media.sound.AudioFloatConverter#toFloatArray(byte[], float[], int)->float[]::: audio float converter to float array
com.sun.media.sound.AudioFloatConverter#toFloatArray(byte[], float[])->float[]::: audio float converter to float array
com.sun.media.sound.AudioFloatConverter#toByteArray(float[], int, int, byte[], int)->byte[]::: audio float converter to byte array
com.sun.media.sound.AudioFloatConverter#toByteArray(float[], int, byte[], int)->byte[]::: audio float converter to byte array
com.sun.media.sound.AudioFloatConverter#toByteArray(float[], int, int, byte[])->byte[]::: audio float converter to byte array
com.sun.media.sound.AudioFloatConverter#toByteArray(float[], int, byte[])->byte[]::: audio float converter to byte array
com.sun.media.sound.AudioFloatConverter#toByteArray(float[], byte[])->byte[]::: audio float converter to byte array
com.sun.media.sound.AudioFloatFormatConverter#getAudioInputStream(Encoding, AudioInputStream)->AudioInputStream::: audio float format converter get audio input stream
com.sun.media.sound.AudioFloatFormatConverter#getAudioInputStream(AudioFormat, AudioInputStream)->AudioInputStream::: audio float format converter get audio input stream
com.sun.media.sound.AudioFloatFormatConverter#getAudioInputStream(AudioFormat, AudioFloatInputStream)->AudioInputStream::: audio float format converter get audio input stream
com.sun.media.sound.AudioFloatFormatConverter#getSourceEncodings()->Encoding[]::: audio float format converter get source encodings
com.sun.media.sound.AudioFloatFormatConverter#getTargetEncodings()->Encoding[]::: audio float format converter get target encodings
com.sun.media.sound.AudioFloatFormatConverter#getTargetEncodings(AudioFormat)->Encoding[]::: audio float format converter get target encodings
com.sun.media.sound.AudioFloatFormatConverter#getTargetFormats(Encoding, AudioFormat)->AudioFormat[]::: audio float format converter get target formats
com.sun.media.sound.AudioFloatFormatConverter#isConversionSupported(AudioFormat, AudioFormat)->boolean::: audio float format converter is conversion supported
com.sun.media.sound.AudioFloatFormatConverter#isConversionSupported(Encoding, AudioFormat)->boolean::: audio float format converter is conversion supported
com.sun.media.sound.AudioFloatInputStream#getInputStream(URL)->AudioFloatInputStream::: audio float input stream get input stream
com.sun.media.sound.AudioFloatInputStream#getInputStream(File)->AudioFloatInputStream::: audio float input stream get input stream
com.sun.media.sound.AudioFloatInputStream#getInputStream(InputStream)->AudioFloatInputStream::: audio float input stream get input stream
com.sun.media.sound.AudioFloatInputStream#getInputStream(AudioInputStream)->AudioFloatInputStream::: audio float input stream get input stream
com.sun.media.sound.AudioFloatInputStream#getInputStream(AudioFormat, byte[], int, int)->AudioFloatInputStream::: audio float input stream get input stream
com.sun.media.sound.AudioFloatInputStream#getFormat()->AudioFormat::: audio float input stream get format
com.sun.media.sound.AudioFloatInputStream#getFrameLength()->long::: audio float input stream get frame length
com.sun.media.sound.AudioFloatInputStream#read(float[], int, int)->int::: audio float input stream read
com.sun.media.sound.AudioFloatInputStream#read(float[])->int::: audio float input stream read
com.sun.media.sound.AudioFloatInputStream#read()->float::: audio float input stream read
com.sun.media.sound.AudioFloatInputStream#skip(long)->long::: audio float input stream skip
com.sun.media.sound.AudioFloatInputStream#available()->int::: audio float input stream available
com.sun.media.sound.AudioFloatInputStream#close()->void::: audio float input stream close
com.sun.media.sound.AudioFloatInputStream#mark(int)->void::: audio float input stream mark
com.sun.media.sound.AudioFloatInputStream#markSupported()->boolean::: audio float input stream mark supported
com.sun.media.sound.AudioFloatInputStream#reset()->void::: audio float input stream reset
com.sun.media.sound.AudioSynthesizer#getFormat()->AudioFormat:::Obtains the current format (encoding, sample rate, number of channels, etc.) of the synthesizer audio data
com.sun.media.sound.AudioSynthesizer#getPropertyInfo(Map)->AudioSynthesizerPropertyInfo[]:::Gets information about the possible properties for the synthesizer.
com.sun.media.sound.AudioSynthesizer#open(SourceDataLine, Map)->void:::Opens the synthesizer and starts rendering audio into SourceDataLine
com.sun.media.sound.AudioSynthesizer#openStream(AudioFormat, Map)->AudioInputStream:::Opens the synthesizer and renders audio into returned AudioInputStream
com.sun.media.sound.AuFileFormat#getAuType()->int::: au file format get au type
com.sun.media.sound.AuFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: au file reader get audio file format impl
com.sun.media.sound.AuFileWriter#getAudioFileTypes(AudioInputStream)->Type[]::: au file writer get audio file types
com.sun.media.sound.AuFileWriter#write(AudioInputStream, Type, OutputStream)->int::: au file writer write
com.sun.media.sound.AuFileWriter#write(AudioInputStream, Type, File)->int::: au file writer write
com.sun.media.sound.AutoClosingClip#isAutoClosing()->boolean:::Indicates whether this clip instance is auto closing
com.sun.media.sound.AutoClosingClip#setAutoClosing(boolean)->void:::Sets whether this Clip instance is auto closing or not
com.sun.media.sound.AutoConnectSequencer#setAutoConnect(Receiver)->void:::Set the receiver that this device is auto-connected
com.sun.media.sound.DataPusher#start()->void::: data pusher start
com.sun.media.sound.DataPusher#start(boolean)->void::: data pusher start
com.sun.media.sound.DataPusher#stop()->void::: data pusher stop
com.sun.media.sound.DataPusher#close()->void::: data pusher close
com.sun.media.sound.DataPusher#run()->void:::Write data to the source data line.
com.sun.media.sound.DirectAudioDevice#getLine(Line.Info)->Line::: direct audio device get line
com.sun.media.sound.DirectAudioDevice#getMaxLines(Line.Info)->int::: direct audio device get max lines
com.sun.media.sound.DirectAudioDevice#implOpen()->void::: direct audio device impl open
com.sun.media.sound.DirectAudioDevice#implClose()->void::: direct audio device impl close
com.sun.media.sound.DirectAudioDevice#implStart()->void::: direct audio device impl start
com.sun.media.sound.DirectAudioDevice#implStop()->void::: direct audio device impl stop
com.sun.media.sound.DirectAudioDevice#getMixerIndex()->int::: direct audio device get mixer index
com.sun.media.sound.DirectAudioDevice#getDeviceID()->int::: direct audio device get device d
com.sun.media.sound.DirectAudioDevice#getMaxSimulLines()->int::: direct audio device get max simul lines
com.sun.media.sound.DirectAudioDevice#getSignOrEndianChangedFormat(AudioFormat)->AudioFormat::: direct audio device get sign or endian changed format
com.sun.media.sound.DirectAudioDeviceProvider#getMixerInfo()->Mixer.Info[]::: direct audio device provider get mixer info
com.sun.media.sound.DirectAudioDeviceProvider#getMixer(Mixer.Info)->Mixer::: direct audio device provider get mixer
com.sun.media.sound.DirectAudioDeviceProvider.DirectAudioDeviceInfo#getIndex()->int::: direct audio device info get index
com.sun.media.sound.DirectAudioDeviceProvider.DirectAudioDeviceInfo#getMaxSimulLines()->int::: direct audio device info get max simul lines
com.sun.media.sound.DirectAudioDeviceProvider.DirectAudioDeviceInfo#getDeviceID()->int::: direct audio device info get device d
com.sun.media.sound.DLSInstrument#getInfo()->DLSInfo::: instrument get info
com.sun.media.sound.DLSInstrument#getName()->String::: instrument get name
com.sun.media.sound.DLSInstrument#setName(String)->void::: instrument set name
com.sun.media.sound.DLSInstrument#getPatch()->ModelPatch::: instrument get patch
com.sun.media.sound.DLSInstrument#setPatch(Patch)->void::: instrument set patch
com.sun.media.sound.DLSInstrument#getData()->Object::: instrument get data
com.sun.media.sound.DLSInstrument#getRegions()->List::: instrument get regions
com.sun.media.sound.DLSInstrument#getModulators()->List::: instrument get modulators
com.sun.media.sound.DLSInstrument#toString()->String::: instrument to string
com.sun.media.sound.DLSInstrument#getPerformers()->ModelPerformer[]::: instrument get performers
com.sun.media.sound.DLSInstrument#getGuid()->byte[]::: instrument get guid
com.sun.media.sound.DLSInstrument#setGuid(byte[])->void::: instrument set guid
com.sun.media.sound.DLSModulator#getControl()->int::: modulator get control
com.sun.media.sound.DLSModulator#setControl(int)->void::: modulator set control
com.sun.media.sound.DLSModulator#getDestinationFormat(int)->int::: modulator get destination format
com.sun.media.sound.DLSModulator#getDestinationName(int)->String::: modulator get destination name
com.sun.media.sound.DLSModulator#getSourceName(int)->String::: modulator get source name
com.sun.media.sound.DLSModulator#getDestination()->int::: modulator get destination
com.sun.media.sound.DLSModulator#setDestination(int)->void::: modulator set destination
com.sun.media.sound.DLSModulator#getScale()->int::: modulator get scale
com.sun.media.sound.DLSModulator#setScale(int)->void::: modulator set scale
com.sun.media.sound.DLSModulator#getSource()->int::: modulator get source
com.sun.media.sound.DLSModulator#setSource(int)->void::: modulator set source
com.sun.media.sound.DLSModulator#getVersion()->int::: modulator get version
com.sun.media.sound.DLSModulator#setVersion(int)->void::: modulator set version
com.sun.media.sound.DLSModulator#getTransform()->int::: modulator get transform
com.sun.media.sound.DLSModulator#setTransform(int)->void::: modulator set transform
com.sun.media.sound.DLSRegion#getModulators()->List::: region get modulators
com.sun.media.sound.DLSRegion#getChannel()->long::: region get channel
com.sun.media.sound.DLSRegion#setChannel(long)->void::: region set channel
com.sun.media.sound.DLSRegion#getExclusiveClass()->int::: region get exclusive class
com.sun.media.sound.DLSRegion#setExclusiveClass(int)->void::: region set exclusive class
com.sun.media.sound.DLSRegion#getFusoptions()->int::: region get fusoptions
com.sun.media.sound.DLSRegion#setFusoptions(int)->void::: region set fusoptions
com.sun.media.sound.DLSRegion#getKeyfrom()->int::: region get keyfrom
com.sun.media.sound.DLSRegion#setKeyfrom(int)->void::: region set keyfrom
com.sun.media.sound.DLSRegion#getKeyto()->int::: region get keyto
com.sun.media.sound.DLSRegion#setKeyto(int)->void::: region set keyto
com.sun.media.sound.DLSRegion#getOptions()->int::: region get options
com.sun.media.sound.DLSRegion#setOptions(int)->void::: region set options
com.sun.media.sound.DLSRegion#getPhasegroup()->int::: region get phasegroup
com.sun.media.sound.DLSRegion#setPhasegroup(int)->void::: region set phasegroup
com.sun.media.sound.DLSRegion#getSample()->DLSSample::: region get sample
com.sun.media.sound.DLSRegion#setSample(DLSSample)->void::: region set sample
com.sun.media.sound.DLSRegion#getVelfrom()->int::: region get velfrom
com.sun.media.sound.DLSRegion#setVelfrom(int)->void::: region set velfrom
com.sun.media.sound.DLSRegion#getVelto()->int::: region get velto
com.sun.media.sound.DLSRegion#setVelto(int)->void::: region set velto
com.sun.media.sound.DLSRegion#setModulators(List)->void::: region set modulators
com.sun.media.sound.DLSRegion#getSampleoptions()->DLSSampleOptions::: region get sampleoptions
com.sun.media.sound.DLSRegion#setSampleoptions(DLSSampleOptions)->void::: region set sampleoptions
com.sun.media.sound.DLSSample#getInfo()->DLSInfo::: sample get info
com.sun.media.sound.DLSSample#getData()->Object::: sample get data
com.sun.media.sound.DLSSample#getDataBuffer()->ModelByteBuffer::: sample get data buffer
com.sun.media.sound.DLSSample#getFormat()->AudioFormat::: sample get format
com.sun.media.sound.DLSSample#setFormat(AudioFormat)->void::: sample set format
com.sun.media.sound.DLSSample#setData(ModelByteBuffer)->void::: sample set data
com.sun.media.sound.DLSSample#setData(byte[])->void::: sample set data
com.sun.media.sound.DLSSample#setData(byte[], int, int)->void::: sample set data
com.sun.media.sound.DLSSample#getName()->String::: sample get name
com.sun.media.sound.DLSSample#setName(String)->void::: sample set name
com.sun.media.sound.DLSSample#getSampleoptions()->DLSSampleOptions::: sample get sampleoptions
com.sun.media.sound.DLSSample#setSampleoptions(DLSSampleOptions)->void::: sample set sampleoptions
com.sun.media.sound.DLSSample#toString()->String::: sample to string
com.sun.media.sound.DLSSample#getGuid()->byte[]::: sample get guid
com.sun.media.sound.DLSSample#setGuid(byte[])->void::: sample set guid
com.sun.media.sound.DLSSampleLoop#getLength()->long::: sample loop get length
com.sun.media.sound.DLSSampleLoop#setLength(long)->void::: sample loop set length
com.sun.media.sound.DLSSampleLoop#getStart()->long::: sample loop get start
com.sun.media.sound.DLSSampleLoop#setStart(long)->void::: sample loop set start
com.sun.media.sound.DLSSampleLoop#getType()->long::: sample loop get type
com.sun.media.sound.DLSSampleLoop#setType(long)->void::: sample loop set type
com.sun.media.sound.DLSSampleOptions#getAttenuation()->int::: sample options get attenuation
com.sun.media.sound.DLSSampleOptions#setAttenuation(int)->void::: sample options set attenuation
com.sun.media.sound.DLSSampleOptions#getFinetune()->short::: sample options get finetune
com.sun.media.sound.DLSSampleOptions#setFinetune(short)->void::: sample options set finetune
com.sun.media.sound.DLSSampleOptions#getLoops()->List::: sample options get loops
com.sun.media.sound.DLSSampleOptions#getOptions()->long::: sample options get options
com.sun.media.sound.DLSSampleOptions#setOptions(long)->void::: sample options set options
com.sun.media.sound.DLSSampleOptions#getUnitynote()->int::: sample options get unitynote
com.sun.media.sound.DLSSampleOptions#setUnitynote(int)->void::: sample options set unitynote
com.sun.media.sound.DLSSoundbank#save(String)->void::: soundbank save
com.sun.media.sound.DLSSoundbank#save(File)->void::: soundbank save
com.sun.media.sound.DLSSoundbank#save(OutputStream)->void::: soundbank save
com.sun.media.sound.DLSSoundbank#getInfo()->DLSInfo::: soundbank get info
com.sun.media.sound.DLSSoundbank#getName()->String::: soundbank get name
com.sun.media.sound.DLSSoundbank#getVersion()->String::: soundbank get version
com.sun.media.sound.DLSSoundbank#getVendor()->String::: soundbank get vendor
com.sun.media.sound.DLSSoundbank#getDescription()->String::: soundbank get description
com.sun.media.sound.DLSSoundbank#setName(String)->void::: soundbank set name
com.sun.media.sound.DLSSoundbank#setVendor(String)->void::: soundbank set vendor
com.sun.media.sound.DLSSoundbank#setDescription(String)->void::: soundbank set description
com.sun.media.sound.DLSSoundbank#getResources()->SoundbankResource[]::: soundbank get resources
com.sun.media.sound.DLSSoundbank#getInstruments()->DLSInstrument[]::: soundbank get instruments
com.sun.media.sound.DLSSoundbank#getSamples()->DLSSample[]::: soundbank get samples
com.sun.media.sound.DLSSoundbank#getInstrument(Patch)->Instrument::: soundbank get instrument
com.sun.media.sound.DLSSoundbank#addResource(SoundbankResource)->void::: soundbank add resource
com.sun.media.sound.DLSSoundbank#removeResource(SoundbankResource)->void::: soundbank remove resource
com.sun.media.sound.DLSSoundbank#addInstrument(DLSInstrument)->void::: soundbank add instrument
com.sun.media.sound.DLSSoundbank#removeInstrument(DLSInstrument)->void::: soundbank remove instrument
com.sun.media.sound.DLSSoundbank#getMajor()->long::: soundbank get major
com.sun.media.sound.DLSSoundbank#setMajor(long)->void::: soundbank set major
com.sun.media.sound.DLSSoundbank#getMinor()->long::: soundbank get minor
com.sun.media.sound.DLSSoundbank#setMinor(long)->void::: soundbank set minor
com.sun.media.sound.DLSSoundbankReader#getSoundbank(URL)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.DLSSoundbankReader#getSoundbank(InputStream)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.DLSSoundbankReader#getSoundbank(File)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.EmergencySoundbank#createSoundbank()->SF2Soundbank::: emergency soundbank create soundbank
com.sun.media.sound.EmergencySoundbank#new_bell(SF2Soundbank)->SF2Layer::: emergency soundbank new_bell
com.sun.media.sound.EmergencySoundbank#new_guitar1(SF2Soundbank)->SF2Layer::: emergency soundbank new_guitar1
com.sun.media.sound.EmergencySoundbank#new_guitar_dist(SF2Soundbank)->SF2Layer::: emergency soundbank new_guitar_dist
com.sun.media.sound.EmergencySoundbank#new_guitar_pick(SF2Soundbank)->SF2Layer::: emergency soundbank new_guitar_pick
com.sun.media.sound.EmergencySoundbank#new_gpiano(SF2Soundbank)->SF2Layer::: emergency soundbank new_gpiano
com.sun.media.sound.EmergencySoundbank#new_gpiano2(SF2Soundbank)->SF2Layer::: emergency soundbank new_gpiano2
com.sun.media.sound.EmergencySoundbank#new_piano_hammer(SF2Soundbank)->SF2Layer::: emergency soundbank new_piano_hammer
com.sun.media.sound.EmergencySoundbank#new_piano1(SF2Soundbank)->SF2Layer::: emergency soundbank new_piano1
com.sun.media.sound.EmergencySoundbank#new_epiano1(SF2Soundbank)->SF2Layer::: emergency soundbank new_epiano1
com.sun.media.sound.EmergencySoundbank#new_epiano2(SF2Soundbank)->SF2Layer::: emergency soundbank new_epiano2
com.sun.media.sound.EmergencySoundbank#new_bass1(SF2Soundbank)->SF2Layer::: emergency soundbank new_bass1
com.sun.media.sound.EmergencySoundbank#new_synthbass(SF2Soundbank)->SF2Layer::: emergency soundbank new_synthbass
com.sun.media.sound.EmergencySoundbank#new_bass2(SF2Soundbank)->SF2Layer::: emergency soundbank new_bass2
com.sun.media.sound.EmergencySoundbank#new_solostring(SF2Soundbank)->SF2Layer::: emergency soundbank new_solostring
com.sun.media.sound.EmergencySoundbank#new_orchhit(SF2Soundbank)->SF2Layer::: emergency soundbank new_orchhit
com.sun.media.sound.EmergencySoundbank#new_string2(SF2Soundbank)->SF2Layer::: emergency soundbank new_string2
com.sun.media.sound.EmergencySoundbank#new_choir(SF2Soundbank)->SF2Layer::: emergency soundbank new_choir
com.sun.media.sound.EmergencySoundbank#new_organ(SF2Soundbank)->SF2Layer::: emergency soundbank new_organ
com.sun.media.sound.EmergencySoundbank#new_ch_organ(SF2Soundbank)->SF2Layer::: emergency soundbank new_ch_organ
com.sun.media.sound.EmergencySoundbank#new_flute(SF2Soundbank)->SF2Layer::: emergency soundbank new_flute
com.sun.media.sound.EmergencySoundbank#new_horn(SF2Soundbank)->SF2Layer::: emergency soundbank new_horn
com.sun.media.sound.EmergencySoundbank#new_trumpet(SF2Soundbank)->SF2Layer::: emergency soundbank new_trumpet
com.sun.media.sound.EmergencySoundbank#new_brass_section(SF2Soundbank)->SF2Layer::: emergency soundbank new_brass_section
com.sun.media.sound.EmergencySoundbank#new_trombone(SF2Soundbank)->SF2Layer::: emergency soundbank new_trombone
com.sun.media.sound.EmergencySoundbank#new_sax(SF2Soundbank)->SF2Layer::: emergency soundbank new_sax
com.sun.media.sound.EmergencySoundbank#new_oboe(SF2Soundbank)->SF2Layer::: emergency soundbank new_oboe
com.sun.media.sound.EmergencySoundbank#new_bassoon(SF2Soundbank)->SF2Layer::: emergency soundbank new_bassoon
com.sun.media.sound.EmergencySoundbank#new_clarinet(SF2Soundbank)->SF2Layer::: emergency soundbank new_clarinet
com.sun.media.sound.EmergencySoundbank#new_timpani(SF2Soundbank)->SF2Layer::: emergency soundbank new_timpani
com.sun.media.sound.EmergencySoundbank#new_melodic_toms(SF2Soundbank)->SF2Layer::: emergency soundbank new_melodic_toms
com.sun.media.sound.EmergencySoundbank#new_reverse_cymbal(SF2Soundbank)->SF2Layer::: emergency soundbank new_reverse_cymbal
com.sun.media.sound.EmergencySoundbank#new_snare_drum(SF2Soundbank)->SF2Layer::: emergency soundbank new_snare_drum
com.sun.media.sound.EmergencySoundbank#new_bass_drum(SF2Soundbank)->SF2Layer::: emergency soundbank new_bass_drum
com.sun.media.sound.EmergencySoundbank#new_tom(SF2Soundbank)->SF2Layer::: emergency soundbank new_tom
com.sun.media.sound.EmergencySoundbank#new_closed_hihat(SF2Soundbank)->SF2Layer::: emergency soundbank new_closed_hihat
com.sun.media.sound.EmergencySoundbank#new_open_hihat(SF2Soundbank)->SF2Layer::: emergency soundbank new_open_hihat
com.sun.media.sound.EmergencySoundbank#new_crash_cymbal(SF2Soundbank)->SF2Layer::: emergency soundbank new_crash_cymbal
com.sun.media.sound.EmergencySoundbank#new_side_stick(SF2Soundbank)->SF2Layer::: emergency soundbank new_side_stick
com.sun.media.sound.EmergencySoundbank#newSimpleFFTSample(SF2Soundbank, String, double[], double)->SF2Sample::: emergency soundbank new simple sample
com.sun.media.sound.EmergencySoundbank#newSimpleFFTSample(SF2Soundbank, String, double[], double, int)->SF2Sample::: emergency soundbank new simple sample
com.sun.media.sound.EmergencySoundbank#newSimpleFFTSample_dist(SF2Soundbank, String, double[], double, double)->SF2Sample::: emergency soundbank new simple sample_dist
com.sun.media.sound.EmergencySoundbank#newSimpleDrumSample(SF2Soundbank, String, double[])->SF2Sample::: emergency soundbank new simple drum sample
com.sun.media.sound.EmergencySoundbank#newLayer(SF2Soundbank, String, SF2Sample)->SF2Layer::: emergency soundbank new layer
com.sun.media.sound.EmergencySoundbank#newInstrument(SF2Soundbank, String, Patch, SF2Layer...)->SF2Instrument::: emergency soundbank new instrument
com.sun.media.sound.EmergencySoundbank#ifft(double[])->void::: emergency soundbank ifft
com.sun.media.sound.EmergencySoundbank#fft(double[])->void::: emergency soundbank fft
com.sun.media.sound.EmergencySoundbank#complexGaussianDist(double[], double, double, double)->void::: emergency soundbank complex gaussian dist
com.sun.media.sound.EmergencySoundbank#randomPhase(double[])->void::: emergency soundbank random phase
com.sun.media.sound.EmergencySoundbank#randomPhase(double[], Random)->void::: emergency soundbank random phase
com.sun.media.sound.EmergencySoundbank#normalize(double[], double)->void::: emergency soundbank normalize
com.sun.media.sound.EmergencySoundbank#normalize(float[], double)->void::: emergency soundbank normalize
com.sun.media.sound.EmergencySoundbank#realPart(double[])->double[]::: emergency soundbank real part
com.sun.media.sound.EmergencySoundbank#imgPart(double[])->double[]::: emergency soundbank img part
com.sun.media.sound.EmergencySoundbank#toFloat(double[])->float[]::: emergency soundbank to float
com.sun.media.sound.EmergencySoundbank#toBytes(float[], AudioFormat)->byte[]::: emergency soundbank to bytes
com.sun.media.sound.EmergencySoundbank#fadeUp(double[], int)->void::: emergency soundbank fade up
com.sun.media.sound.EmergencySoundbank#fadeUp(float[], int)->void::: emergency soundbank fade up
com.sun.media.sound.EmergencySoundbank#loopExtend(double[], int)->double[]::: emergency soundbank loop extend
com.sun.media.sound.EmergencySoundbank#loopExtend(float[], int)->float[]::: emergency soundbank loop extend
com.sun.media.sound.EventDispatcher#start()->void:::This start() method starts an event thread if one is not already active.
com.sun.media.sound.EventDispatcher#processEvent(EventInfo)->void:::Invoked when there is at least one event in the queue
com.sun.media.sound.EventDispatcher#dispatchEvents()->void:::Wait until there is something in the event queue to process
com.sun.media.sound.EventDispatcher#run()->void:::A loop to dispatch events.
com.sun.media.sound.EventDispatcher#sendAudioEvents(Object, List)->void:::Send audio and MIDI events.
com.sun.media.sound.EventDispatcher#autoClosingClipOpened(AutoClosingClip)->void:::called from auto-closing clips when one of their open() method is called.
com.sun.media.sound.EventDispatcher#autoClosingClipClosed(AutoClosingClip)->void:::called from auto-closing clips when their closed() method is called.
com.sun.media.sound.EventDispatcher#addLineMonitor(LineMonitor)->void:::Add this LineMonitor instance to the list of monitors.
com.sun.media.sound.EventDispatcher#removeLineMonitor(LineMonitor)->void:::Remove this LineMonitor instance from the list of monitors.
com.sun.media.sound.EventDispatcher.LineMonitor#checkLine()->void:::Called by event dispatcher in regular intervals.
com.sun.media.sound.FastShortMessage#getPackedMsg()->int::: fast short message get packed msg
com.sun.media.sound.FastShortMessage#getMessage()->byte[]::: fast short message get message
com.sun.media.sound.FastShortMessage#getLength()->int::: fast short message get length
com.sun.media.sound.FastShortMessage#setMessage(int)->void::: fast short message set message
com.sun.media.sound.FastShortMessage#setMessage(int, int, int)->void::: fast short message set message
com.sun.media.sound.FastShortMessage#setMessage(int, int, int, int)->void::: fast short message set message
com.sun.media.sound.FastShortMessage#getChannel()->int::: fast short message get channel
com.sun.media.sound.FastShortMessage#getCommand()->int::: fast short message get command
com.sun.media.sound.FastShortMessage#getData1()->int::: fast short message get data1
com.sun.media.sound.FastShortMessage#getData2()->int::: fast short message get data2
com.sun.media.sound.FastShortMessage#getStatus()->int::: fast short message get status
com.sun.media.sound.FastShortMessage#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
com.sun.media.sound.FastSysexMessage#getReadOnlyMessage()->byte[]:::The returned array may be larger than this message is
com.sun.media.sound.FastSysexMessage#setMessage(byte[], int)->void::: fast sysex message set message
com.sun.media.sound.FFT#transform(double[])->void::: t transform
com.sun.media.sound.JARSoundbankReader#getSoundbank(URL)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.JARSoundbankReader#getSoundbank(InputStream)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.JARSoundbankReader#getSoundbank(File)->Soundbank::: soundbank reader get soundbank
com.sun.media.sound.JavaSoundAudioClip#create(URLConnection)->JavaSoundAudioClip::: java sound audio clip create
com.sun.media.sound.JavaSoundAudioClip#create(URL)->JavaSoundAudioClip::: java sound audio clip create
com.sun.media.sound.JavaSoundAudioClip#play()->void::: java sound audio clip play
com.sun.media.sound.JavaSoundAudioClip#loop()->void::: java sound audio clip loop
com.sun.media.sound.JavaSoundAudioClip#stop()->void::: java sound audio clip stop
com.sun.media.sound.JavaSoundAudioClip#update(LineEvent)->void::: java sound audio clip update
com.sun.media.sound.JavaSoundAudioClip#meta(MetaMessage)->void::: java sound audio clip meta
com.sun.media.sound.JavaSoundAudioClip#toString()->String::: java sound audio clip to string
com.sun.media.sound.JavaSoundAudioClip#finalize()->void::: java sound audio clip finalize
com.sun.media.sound.JDK13Services#getProviders(Class)->List:::Obtains a List containing installed instances of the providers for the requested service
com.sun.media.sound.JDK13Services#getDefaultProviderClassName(Class)->String:::Obtain the provider class name part of a default provider property.
com.sun.media.sound.JDK13Services#getDefaultInstanceName(Class)->String:::Obtain the instance name part of a default provider property.
com.sun.media.sound.JSSecurityManager#checkRecordPermission()->void::: security manager check record permission
com.sun.media.sound.JSSecurityManager#loadProperties(Properties)->void:::Load properties from a file
com.sun.media.sound.JSSecurityManager#createThread(Runnable, String, boolean, int, boolean)->Thread:::Create a Thread in the current ThreadGroup.
com.sun.media.sound.JSSecurityManager#getProviders(Class)->List::: security manager get providers
com.sun.media.sound.MidiDeviceReceiverEnvelope#close()->void::: midi device receiver envelope close
com.sun.media.sound.MidiDeviceReceiverEnvelope#send(MidiMessage, long)->void::: midi device receiver envelope send
com.sun.media.sound.MidiDeviceReceiverEnvelope#getMidiDevice()->MidiDevice::: midi device receiver envelope get midi device
com.sun.media.sound.MidiDeviceReceiverEnvelope#getReceiver()->Receiver:::Obtains the receiver enveloped by this MidiDeviceReceiverEnvelope object.
com.sun.media.sound.MidiDeviceTransmitterEnvelope#setReceiver(Receiver)->void::: midi device transmitter envelope set receiver
com.sun.media.sound.MidiDeviceTransmitterEnvelope#getReceiver()->Receiver::: midi device transmitter envelope get receiver
com.sun.media.sound.MidiDeviceTransmitterEnvelope#close()->void::: midi device transmitter envelope close
com.sun.media.sound.MidiDeviceTransmitterEnvelope#getMidiDevice()->MidiDevice::: midi device transmitter envelope get midi device
com.sun.media.sound.MidiDeviceTransmitterEnvelope#getTransmitter()->Transmitter:::Obtains the transmitter enveloped by this MidiDeviceTransmitterEnvelope object.
com.sun.media.sound.MidiInDevice#implOpen()->void::: midi in device impl open
com.sun.media.sound.MidiInDevice#implClose()->void::: midi in device impl close
com.sun.media.sound.MidiInDevice#getMicrosecondPosition()->long::: midi in device get microsecond position
com.sun.media.sound.MidiInDevice#hasTransmitters()->boolean::: midi in device has transmitters
com.sun.media.sound.MidiInDevice#createTransmitter()->Transmitter::: midi in device create transmitter
com.sun.media.sound.MidiInDevice#run()->void::: midi in device run
com.sun.media.sound.MidiInDevice#callbackShortMessage(int, long)->void:::Callback from native code when a short MIDI event is received from hardware.
com.sun.media.sound.MidiInDevice#callbackLongMessage(byte[], long)->void::: midi in device callback long message
com.sun.media.sound.MidiInDeviceProvider#createInfo(int)->AbstractMidiDeviceProvider.Info::: midi in device provider create info
com.sun.media.sound.MidiInDeviceProvider#createDevice(AbstractMidiDeviceProvider.Info)->MidiDevice::: midi in device provider create device
com.sun.media.sound.MidiInDeviceProvider#getNumDevices()->int::: midi in device provider get num devices
com.sun.media.sound.MidiInDeviceProvider#getDeviceCache()->MidiDevice[]::: midi in device provider get device cache
com.sun.media.sound.MidiInDeviceProvider#setDeviceCache(MidiDevice[])->void::: midi in device provider set device cache
com.sun.media.sound.MidiInDeviceProvider#getInfoCache()->Info[]::: midi in device provider get info cache
com.sun.media.sound.MidiInDeviceProvider#setInfoCache(Info[])->void::: midi in device provider set info cache
com.sun.media.sound.MidiOutDevice#implOpen()->void::: midi out device impl open
com.sun.media.sound.MidiOutDevice#implClose()->void::: midi out device impl close
com.sun.media.sound.MidiOutDevice#getMicrosecondPosition()->long::: midi out device get microsecond position
com.sun.media.sound.MidiOutDevice#hasReceivers()->boolean:::Returns if this device supports Receivers
com.sun.media.sound.MidiOutDevice#createReceiver()->Receiver::: midi out device create receiver
com.sun.media.sound.MidiOutDevice.MidiOutReceiver#implSend(MidiMessage, long)->void::: midi out receiver impl send
com.sun.media.sound.MidiOutDevice.MidiOutReceiver#sendPackedMidiMessage(int, long)->void:::shortcut for the Sun implementation
com.sun.media.sound.MidiOutDeviceProvider#createInfo(int)->AbstractMidiDeviceProvider.Info::: midi out device provider create info
com.sun.media.sound.MidiOutDeviceProvider#createDevice(AbstractMidiDeviceProvider.Info)->MidiDevice::: midi out device provider create device
com.sun.media.sound.MidiOutDeviceProvider#getNumDevices()->int::: midi out device provider get num devices
com.sun.media.sound.MidiOutDeviceProvider#getDeviceCache()->MidiDevice[]::: midi out device provider get device cache
com.sun.media.sound.MidiOutDeviceProvider#setDeviceCache(MidiDevice[])->void::: midi out device provider set device cache
com.sun.media.sound.MidiOutDeviceProvider#getInfoCache()->Info[]::: midi out device provider get info cache
com.sun.media.sound.MidiOutDeviceProvider#setInfoCache(Info[])->void::: midi out device provider set info cache
com.sun.media.sound.MidiUtils#unsupportedDevice(MidiDevice.Info)->RuntimeException:::Returns an exception which should be thrown if MidiDevice is unsupported.
com.sun.media.sound.MidiUtils#isMetaEndOfTrack(MidiMessage)->boolean:::return true if the passed message is Meta End Of Track
com.sun.media.sound.MidiUtils#isMetaTempo(MidiMessage)->boolean:::return if the given message is a meta tempo message
com.sun.media.sound.MidiUtils#getTempoMPQ(MidiMessage)->int:::parses this message for a META tempo message and returns the tempo in MPQ, or -1 if this isn't a tempo message
com.sun.media.sound.MidiUtils#convertTempo(double)->double:::converts<br> 1 - MPQ-Tempo to BPM tempo<br> 2 - BPM tempo to MPQ tempo<br>
com.sun.media.sound.MidiUtils#ticks2microsec(long, double, int)->long:::convert tick to microsecond with given tempo
com.sun.media.sound.MidiUtils#microsec2ticks(long, double, int)->long:::convert tempo to microsecond with given tempo Does not take tempo changes into account
com.sun.media.sound.MidiUtils#tick2microsecond(Sequence, long, TempoCache)->long:::Given a tick, convert to microsecond
com.sun.media.sound.MidiUtils#microsecond2tick(Sequence, long, TempoCache)->long:::Given a microsecond time, convert to tick
com.sun.media.sound.MidiUtils#tick2index(Track, long)->int:::Binary search for the event indexes of the track
com.sun.media.sound.MidiUtils.TempoCache#refresh(Sequence)->void::: tempo cache refresh
com.sun.media.sound.MidiUtils.TempoCache#getCurrTempoMPQ()->int::: tempo cache get curr tempo q
com.sun.media.sound.MidiUtils.TempoCache#getTempoMPQAt(long)->float::: tempo cache get tempo at
com.sun.media.sound.MidiUtils.TempoCache#getTempoMPQAt(long, float)->float::: tempo cache get tempo at
com.sun.media.sound.ModelAbstractChannelMixer#process(float[][], int, int)->boolean::: model abstract channel mixer process
com.sun.media.sound.ModelAbstractChannelMixer#stop()->void::: model abstract channel mixer stop
com.sun.media.sound.ModelAbstractChannelMixer#allNotesOff()->void::: model abstract channel mixer all notes off
com.sun.media.sound.ModelAbstractChannelMixer#allSoundOff()->void::: model abstract channel mixer all sound off
com.sun.media.sound.ModelAbstractChannelMixer#controlChange(int, int)->void::: model abstract channel mixer control change
com.sun.media.sound.ModelAbstractChannelMixer#getChannelPressure()->int::: model abstract channel mixer get channel pressure
com.sun.media.sound.ModelAbstractChannelMixer#getController(int)->int::: model abstract channel mixer get controller
com.sun.media.sound.ModelAbstractChannelMixer#getMono()->boolean::: model abstract channel mixer get mono
com.sun.media.sound.ModelAbstractChannelMixer#getMute()->boolean::: model abstract channel mixer get mute
com.sun.media.sound.ModelAbstractChannelMixer#getOmni()->boolean::: model abstract channel mixer get omni
com.sun.media.sound.ModelAbstractChannelMixer#getPitchBend()->int::: model abstract channel mixer get pitch bend
com.sun.media.sound.ModelAbstractChannelMixer#getPolyPressure(int)->int::: model abstract channel mixer get poly pressure
com.sun.media.sound.ModelAbstractChannelMixer#getProgram()->int::: model abstract channel mixer get program
com.sun.media.sound.ModelAbstractChannelMixer#getSolo()->boolean::: model abstract channel mixer get solo
com.sun.media.sound.ModelAbstractChannelMixer#localControl(boolean)->boolean::: model abstract channel mixer local control
com.sun.media.sound.ModelAbstractChannelMixer#noteOff(int)->void::: model abstract channel mixer note off
com.sun.media.sound.ModelAbstractChannelMixer#noteOff(int, int)->void::: model abstract channel mixer note off
com.sun.media.sound.ModelAbstractChannelMixer#noteOn(int, int)->void::: model abstract channel mixer note on
com.sun.media.sound.ModelAbstractChannelMixer#programChange(int)->void::: model abstract channel mixer program change
com.sun.media.sound.ModelAbstractChannelMixer#programChange(int, int)->void::: model abstract channel mixer program change
com.sun.media.sound.ModelAbstractChannelMixer#resetAllControllers()->void::: model abstract channel mixer reset all controllers
com.sun.media.sound.ModelAbstractChannelMixer#setChannelPressure(int)->void::: model abstract channel mixer set channel pressure
com.sun.media.sound.ModelAbstractChannelMixer#setMono(boolean)->void::: model abstract channel mixer set mono
com.sun.media.sound.ModelAbstractChannelMixer#setMute(boolean)->void::: model abstract channel mixer set mute
com.sun.media.sound.ModelAbstractChannelMixer#setOmni(boolean)->void::: model abstract channel mixer set omni
com.sun.media.sound.ModelAbstractChannelMixer#setPitchBend(int)->void::: model abstract channel mixer set pitch bend
com.sun.media.sound.ModelAbstractChannelMixer#setPolyPressure(int, int)->void::: model abstract channel mixer set poly pressure
com.sun.media.sound.ModelAbstractChannelMixer#setSolo(boolean)->void::: model abstract channel mixer set solo
com.sun.media.sound.ModelAbstractOscillator#init()->void::: model abstract oscillator init
com.sun.media.sound.ModelAbstractOscillator#close()->void::: model abstract oscillator close
com.sun.media.sound.ModelAbstractOscillator#noteOff(int)->void::: model abstract oscillator note off
com.sun.media.sound.ModelAbstractOscillator#noteOn(MidiChannel, VoiceStatus, int, int)->void::: model abstract oscillator note on
com.sun.media.sound.ModelAbstractOscillator#read(float[][], int, int)->int::: model abstract oscillator read
com.sun.media.sound.ModelAbstractOscillator#getChannel()->MidiChannel::: model abstract oscillator get channel
com.sun.media.sound.ModelAbstractOscillator#getVoice()->VoiceStatus::: model abstract oscillator get voice
com.sun.media.sound.ModelAbstractOscillator#getNoteNumber()->int::: model abstract oscillator get note number
com.sun.media.sound.ModelAbstractOscillator#getVelocity()->int::: model abstract oscillator get velocity
com.sun.media.sound.ModelAbstractOscillator#isOn()->boolean::: model abstract oscillator is on
com.sun.media.sound.ModelAbstractOscillator#setPitch(float)->void::: model abstract oscillator set pitch
com.sun.media.sound.ModelAbstractOscillator#getPitch()->float::: model abstract oscillator get pitch
com.sun.media.sound.ModelAbstractOscillator#setSampleRate(float)->void::: model abstract oscillator set sample rate
com.sun.media.sound.ModelAbstractOscillator#getSampleRate()->float::: model abstract oscillator get sample rate
com.sun.media.sound.ModelAbstractOscillator#getAttenuation()->float::: model abstract oscillator get attenuation
com.sun.media.sound.ModelAbstractOscillator#getChannels()->int::: model abstract oscillator get channels
com.sun.media.sound.ModelAbstractOscillator#getName()->String::: model abstract oscillator get name
com.sun.media.sound.ModelAbstractOscillator#getPatch()->Patch::: model abstract oscillator get patch
com.sun.media.sound.ModelAbstractOscillator#open(float)->ModelOscillatorStream::: model abstract oscillator open
com.sun.media.sound.ModelAbstractOscillator#getPerformer()->ModelPerformer::: model abstract oscillator get performer
com.sun.media.sound.ModelAbstractOscillator#getInstrument()->ModelInstrument::: model abstract oscillator get instrument
com.sun.media.sound.ModelAbstractOscillator#getSoundBank()->Soundbank::: model abstract oscillator get sound bank
com.sun.media.sound.ModelAbstractOscillator#getDescription()->String::: model abstract oscillator get description
com.sun.media.sound.ModelAbstractOscillator#getInstrument(Patch)->Instrument::: model abstract oscillator get instrument
com.sun.media.sound.ModelAbstractOscillator#getInstruments()->Instrument[]::: model abstract oscillator get instruments
com.sun.media.sound.ModelAbstractOscillator#getResources()->SoundbankResource[]::: model abstract oscillator get resources
com.sun.media.sound.ModelAbstractOscillator#getVendor()->String::: model abstract oscillator get vendor
com.sun.media.sound.ModelAbstractOscillator#getVersion()->String::: model abstract oscillator get version
com.sun.media.sound.ModelByteBuffer#writeTo(OutputStream)->void::: model byte buffer write to
com.sun.media.sound.ModelByteBuffer#getInputStream()->InputStream::: model byte buffer get input stream
com.sun.media.sound.ModelByteBuffer#subbuffer(long)->ModelByteBuffer::: model byte buffer subbuffer
com.sun.media.sound.ModelByteBuffer#subbuffer(long, long)->ModelByteBuffer::: model byte buffer subbuffer
com.sun.media.sound.ModelByteBuffer#subbuffer(long, long, boolean)->ModelByteBuffer::: model byte buffer subbuffer
com.sun.media.sound.ModelByteBuffer#array()->byte[]::: model byte buffer array
com.sun.media.sound.ModelByteBuffer#arrayOffset()->long::: model byte buffer array offset
com.sun.media.sound.ModelByteBuffer#capacity()->long::: model byte buffer capacity
com.sun.media.sound.ModelByteBuffer#getRoot()->ModelByteBuffer::: model byte buffer get root
com.sun.media.sound.ModelByteBuffer#getFile()->File::: model byte buffer get file
com.sun.media.sound.ModelByteBuffer#getFilePointer()->long::: model byte buffer get file pointer
com.sun.media.sound.ModelByteBuffer#loadAll(Collection)->void::: model byte buffer load all
com.sun.media.sound.ModelByteBuffer#load()->void::: model byte buffer load
com.sun.media.sound.ModelByteBuffer#unload()->void::: model byte buffer unload
com.sun.media.sound.ModelByteBufferWavetable#set8BitExtensionBuffer(ModelByteBuffer)->void::: model byte buffer wavetable set8 bit extension buffer
com.sun.media.sound.ModelByteBufferWavetable#get8BitExtensionBuffer()->ModelByteBuffer::: model byte buffer wavetable get8 bit extension buffer
com.sun.media.sound.ModelByteBufferWavetable#getBuffer()->ModelByteBuffer::: model byte buffer wavetable get buffer
com.sun.media.sound.ModelByteBufferWavetable#getFormat()->AudioFormat::: model byte buffer wavetable get format
com.sun.media.sound.ModelByteBufferWavetable#openStream()->AudioFloatInputStream::: model byte buffer wavetable open stream
com.sun.media.sound.ModelByteBufferWavetable#getChannels()->int::: model byte buffer wavetable get channels
com.sun.media.sound.ModelByteBufferWavetable#open(float)->ModelOscillatorStream::: model byte buffer wavetable open
com.sun.media.sound.ModelByteBufferWavetable#getAttenuation()->float::: model byte buffer wavetable get attenuation
com.sun.media.sound.ModelByteBufferWavetable#setAttenuation(float)->void::: model byte buffer wavetable set attenuation
com.sun.media.sound.ModelByteBufferWavetable#getLoopLength()->float::: model byte buffer wavetable get loop length
com.sun.media.sound.ModelByteBufferWavetable#setLoopLength(float)->void::: model byte buffer wavetable set loop length
com.sun.media.sound.ModelByteBufferWavetable#getLoopStart()->float::: model byte buffer wavetable get loop start
com.sun.media.sound.ModelByteBufferWavetable#setLoopStart(float)->void::: model byte buffer wavetable set loop start
com.sun.media.sound.ModelByteBufferWavetable#setLoopType(int)->void::: model byte buffer wavetable set loop type
com.sun.media.sound.ModelByteBufferWavetable#getLoopType()->int::: model byte buffer wavetable get loop type
com.sun.media.sound.ModelByteBufferWavetable#getPitchcorrection()->float::: model byte buffer wavetable get pitchcorrection
com.sun.media.sound.ModelByteBufferWavetable#setPitchcorrection(float)->void::: model byte buffer wavetable set pitchcorrection
com.sun.media.sound.ModelChannelMixer#process(float[][], int, int)->boolean::: model channel mixer process
com.sun.media.sound.ModelChannelMixer#stop()->void::: model channel mixer stop
com.sun.media.sound.ModelConnectionBlock#getDestination()->ModelDestination::: model connection block get destination
com.sun.media.sound.ModelConnectionBlock#setDestination(ModelDestination)->void::: model connection block set destination
com.sun.media.sound.ModelConnectionBlock#getScale()->double::: model connection block get scale
com.sun.media.sound.ModelConnectionBlock#setScale(double)->void::: model connection block set scale
com.sun.media.sound.ModelConnectionBlock#getSources()->ModelSource[]::: model connection block get sources
com.sun.media.sound.ModelConnectionBlock#setSources(ModelSource[])->void::: model connection block set sources
com.sun.media.sound.ModelConnectionBlock#addSource(ModelSource)->void::: model connection block add source
com.sun.media.sound.ModelDestination#getIdentifier()->ModelIdentifier::: model destination get identifier
com.sun.media.sound.ModelDestination#setIdentifier(ModelIdentifier)->void::: model destination set identifier
com.sun.media.sound.ModelDestination#getTransform()->ModelTransform::: model destination get transform
com.sun.media.sound.ModelDestination#setTransform(ModelTransform)->void::: model destination set transform
com.sun.media.sound.ModelDirectedPlayer#play(int, ModelConnectionBlock[])->void::: model directed player play
com.sun.media.sound.ModelDirector#noteOn(int, int)->void::: model director note on
com.sun.media.sound.ModelDirector#noteOff(int, int)->void::: model director note off
com.sun.media.sound.ModelDirector#close()->void::: model director close
com.sun.media.sound.ModelIdentifier#getInstance()->int::: model identifier get instance
com.sun.media.sound.ModelIdentifier#setInstance(int)->void::: model identifier set instance
com.sun.media.sound.ModelIdentifier#getObject()->String::: model identifier get object
com.sun.media.sound.ModelIdentifier#setObject(String)->void::: model identifier set object
com.sun.media.sound.ModelIdentifier#getVariable()->String::: model identifier get variable
com.sun.media.sound.ModelIdentifier#setVariable(String)->void::: model identifier set variable
com.sun.media.sound.ModelIdentifier#hashCode()->int::: model identifier hash code
com.sun.media.sound.ModelIdentifier#equals(Object)->boolean::: model identifier equals
com.sun.media.sound.ModelIdentifier#toString()->String::: model identifier to string
com.sun.media.sound.ModelInstrument#getDirector(ModelPerformer[], MidiChannel, ModelDirectedPlayer)->ModelDirector::: model instrument get director
com.sun.media.sound.ModelInstrument#getPerformers()->ModelPerformer[]::: model instrument get performers
com.sun.media.sound.ModelInstrument#getChannelMixer(MidiChannel, AudioFormat)->ModelChannelMixer::: model instrument get channel mixer
com.sun.media.sound.ModelInstrument#getPatchAlias()->Patch::: model instrument get patch alias
com.sun.media.sound.ModelInstrument#getKeys()->String[]::: model instrument get keys
com.sun.media.sound.ModelInstrument#getChannels()->boolean[]::: model instrument get channels
com.sun.media.sound.ModelInstrumentComparator#compare(Instrument, Instrument)->int::: model instrument comparator compare
com.sun.media.sound.ModelMappedInstrument#getData()->Object::: model mapped instrument get data
com.sun.media.sound.ModelMappedInstrument#getPerformers()->ModelPerformer[]::: model mapped instrument get performers
com.sun.media.sound.ModelMappedInstrument#getDirector(ModelPerformer[], MidiChannel, ModelDirectedPlayer)->ModelDirector::: model mapped instrument get director
com.sun.media.sound.ModelMappedInstrument#getChannelMixer(MidiChannel, AudioFormat)->ModelChannelMixer::: model mapped instrument get channel mixer
com.sun.media.sound.ModelOscillator#getChannels()->int::: model oscillator get channels
com.sun.media.sound.ModelOscillator#getAttenuation()->float:::Attenuation is in cB.
com.sun.media.sound.ModelOscillator#open(float)->ModelOscillatorStream::: model oscillator open
com.sun.media.sound.ModelOscillatorStream#setPitch(float)->void::: model oscillator stream set pitch
com.sun.media.sound.ModelOscillatorStream#noteOn(MidiChannel, VoiceStatus, int, int)->void::: model oscillator stream note on
com.sun.media.sound.ModelOscillatorStream#noteOff(int)->void::: model oscillator stream note off
com.sun.media.sound.ModelOscillatorStream#read(float[][], int, int)->int::: model oscillator stream read
com.sun.media.sound.ModelOscillatorStream#close()->void::: model oscillator stream close
com.sun.media.sound.ModelPatch#isPercussion()->boolean::: model patch is percussion
com.sun.media.sound.ModelPerformer#getName()->String::: model performer get name
com.sun.media.sound.ModelPerformer#setName(String)->void::: model performer set name
com.sun.media.sound.ModelPerformer#getConnectionBlocks()->List::: model performer get connection blocks
com.sun.media.sound.ModelPerformer#setConnectionBlocks(List)->void::: model performer set connection blocks
com.sun.media.sound.ModelPerformer#getOscillators()->List::: model performer get oscillators
com.sun.media.sound.ModelPerformer#getExclusiveClass()->int::: model performer get exclusive class
com.sun.media.sound.ModelPerformer#setExclusiveClass(int)->void::: model performer set exclusive class
com.sun.media.sound.ModelPerformer#isSelfNonExclusive()->boolean::: model performer is self non exclusive
com.sun.media.sound.ModelPerformer#setSelfNonExclusive(boolean)->void::: model performer set self non exclusive
com.sun.media.sound.ModelPerformer#getKeyFrom()->int::: model performer get key from
com.sun.media.sound.ModelPerformer#setKeyFrom(int)->void::: model performer set key from
com.sun.media.sound.ModelPerformer#getKeyTo()->int::: model performer get key to
com.sun.media.sound.ModelPerformer#setKeyTo(int)->void::: model performer set key to
com.sun.media.sound.ModelPerformer#getVelFrom()->int::: model performer get vel from
com.sun.media.sound.ModelPerformer#setVelFrom(int)->void::: model performer set vel from
com.sun.media.sound.ModelPerformer#getVelTo()->int::: model performer get vel to
com.sun.media.sound.ModelPerformer#setVelTo(int)->void::: model performer set vel to
com.sun.media.sound.ModelPerformer#isReleaseTriggered()->boolean::: model performer is release triggered
com.sun.media.sound.ModelPerformer#setReleaseTriggered(boolean)->void::: model performer set release triggered
com.sun.media.sound.ModelPerformer#getUserObject()->Object::: model performer get user object
com.sun.media.sound.ModelPerformer#setUserObject(Object)->void::: model performer set user object
com.sun.media.sound.ModelPerformer#isDefaultConnectionsEnabled()->boolean::: model performer is default connections enabled
com.sun.media.sound.ModelPerformer#setDefaultConnectionsEnabled(boolean)->void::: model performer set default connections enabled
com.sun.media.sound.ModelSource#getIdentifier()->ModelIdentifier::: model source get identifier
com.sun.media.sound.ModelSource#setIdentifier(ModelIdentifier)->void::: model source set identifier
com.sun.media.sound.ModelSource#getTransform()->ModelTransform::: model source get transform
com.sun.media.sound.ModelSource#setTransform(ModelTransform)->void::: model source set transform
com.sun.media.sound.ModelStandardDirector#close()->void::: model standard director close
com.sun.media.sound.ModelStandardDirector#noteOff(int, int)->void::: model standard director note off
com.sun.media.sound.ModelStandardDirector#noteOn(int, int)->void::: model standard director note on
com.sun.media.sound.ModelStandardIndexedDirector#close()->void::: model standard indexed director close
com.sun.media.sound.ModelStandardIndexedDirector#noteOff(int, int)->void::: model standard indexed director note off
com.sun.media.sound.ModelStandardIndexedDirector#noteOn(int, int)->void::: model standard indexed director note on
com.sun.media.sound.ModelStandardTransform#transform(double)->double::: model standard transform transform
com.sun.media.sound.ModelStandardTransform#getDirection()->boolean::: model standard transform get direction
com.sun.media.sound.ModelStandardTransform#setDirection(boolean)->void::: model standard transform set direction
com.sun.media.sound.ModelStandardTransform#getPolarity()->boolean::: model standard transform get polarity
com.sun.media.sound.ModelStandardTransform#setPolarity(boolean)->void::: model standard transform set polarity
com.sun.media.sound.ModelStandardTransform#getTransform()->int::: model standard transform get transform
com.sun.media.sound.ModelStandardTransform#setTransform(int)->void::: model standard transform set transform
com.sun.media.sound.ModelTransform#transform(double)->double::: model transform transform
com.sun.media.sound.ModelWavetable#openStream()->AudioFloatInputStream::: model wavetable open stream
com.sun.media.sound.ModelWavetable#getLoopLength()->float::: model wavetable get loop length
com.sun.media.sound.ModelWavetable#getLoopStart()->float::: model wavetable get loop start
com.sun.media.sound.ModelWavetable#getLoopType()->int::: model wavetable get loop type
com.sun.media.sound.ModelWavetable#getPitchcorrection()->float::: model wavetable get pitchcorrection
com.sun.media.sound.PCMtoPCMCodec#getSourceEncodings()->AudioFormat.Encoding[]::: mto codec get source encodings
com.sun.media.sound.PCMtoPCMCodec#getTargetEncodings()->AudioFormat.Encoding[]::: mto codec get target encodings
com.sun.media.sound.PCMtoPCMCodec#getTargetEncodings(AudioFormat)->AudioFormat.Encoding[]::: mto codec get target encodings
com.sun.media.sound.PCMtoPCMCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)->AudioFormat[]::: mto codec get target formats
com.sun.media.sound.PCMtoPCMCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)->AudioInputStream::: mto codec get audio input stream
com.sun.media.sound.PCMtoPCMCodec#getAudioInputStream(AudioFormat, AudioInputStream)->AudioInputStream::: mto codec get audio input stream
com.sun.media.sound.PCMtoPCMCodec.PCMtoPCMCodecStream#read()->int:::Note that this only works for sign conversions
com.sun.media.sound.PCMtoPCMCodec.PCMtoPCMCodecStream#read(byte[])->int::: mto codec stream read
com.sun.media.sound.PCMtoPCMCodec.PCMtoPCMCodecStream#read(byte[], int, int)->int::: mto codec stream read
com.sun.media.sound.Platform#initialize()->void:::Dummy method for forcing initialization.
com.sun.media.sound.Platform#isBigEndian()->boolean:::Determine whether the system is big-endian.
com.sun.media.sound.Platform#isMidiIOEnabled()->boolean::: platform is midi enabled
com.sun.media.sound.Platform#isPortsEnabled()->boolean::: platform is ports enabled
com.sun.media.sound.Platform#isDirectAudioEnabled()->boolean::: platform is direct audio enabled
com.sun.media.sound.PortMixer#getLine(Line.Info)->Line::: port mixer get line
com.sun.media.sound.PortMixer#getMaxLines(Line.Info)->int::: port mixer get max lines
com.sun.media.sound.PortMixer#implOpen()->void::: port mixer impl open
com.sun.media.sound.PortMixer#implClose()->void::: port mixer impl close
com.sun.media.sound.PortMixer#implStart()->void::: port mixer impl start
com.sun.media.sound.PortMixer#implStop()->void::: port mixer impl stop
com.sun.media.sound.PortMixer#getMixerIndex()->int::: port mixer get mixer index
com.sun.media.sound.PortMixer#getPort(int)->Port::: port mixer get port
com.sun.media.sound.PortMixer#getID()->long::: port mixer get d
com.sun.media.sound.PortMixerProvider#getMixerInfo()->Mixer.Info[]::: port mixer provider get mixer info
com.sun.media.sound.PortMixerProvider#getMixer(Mixer.Info)->Mixer::: port mixer provider get mixer
com.sun.media.sound.PortMixerProvider.PortMixerInfo#getIndex()->int::: port mixer info get index
com.sun.media.sound.Printer#err(String)->void::: printer err
com.sun.media.sound.Printer#debug(String)->void::: printer debug
com.sun.media.sound.Printer#trace(String)->void::: printer trace
com.sun.media.sound.Printer#verbose(String)->void::: printer verbose
com.sun.media.sound.Printer#release(String)->void::: printer release
com.sun.media.sound.Printer#println(String)->void::: printer println
com.sun.media.sound.Printer#println()->void::: printer println
com.sun.media.sound.RealTimeSequencer#setSequence(Sequence)->void::: real time sequencer set sequence
com.sun.media.sound.RealTimeSequencer#setSequence(InputStream)->void::: real time sequencer set sequence
com.sun.media.sound.RealTimeSequencer#getSequence()->Sequence::: real time sequencer get sequence
com.sun.media.sound.RealTimeSequencer#start()->void::: real time sequencer start
com.sun.media.sound.RealTimeSequencer#stop()->void::: real time sequencer stop
com.sun.media.sound.RealTimeSequencer#isRunning()->boolean::: real time sequencer is running
com.sun.media.sound.RealTimeSequencer#startRecording()->void::: real time sequencer start recording
com.sun.media.sound.RealTimeSequencer#stopRecording()->void::: real time sequencer stop recording
com.sun.media.sound.RealTimeSequencer#isRecording()->boolean::: real time sequencer is recording
com.sun.media.sound.RealTimeSequencer#recordEnable(Track, int)->void::: real time sequencer record enable
com.sun.media.sound.RealTimeSequencer#recordDisable(Track)->void::: real time sequencer record disable
com.sun.media.sound.RealTimeSequencer#getTempoInBPM()->float::: real time sequencer get tempo in m
com.sun.media.sound.RealTimeSequencer#setTempoInBPM(float)->void::: real time sequencer set tempo in m
com.sun.media.sound.RealTimeSequencer#getTempoInMPQ()->float::: real time sequencer get tempo in q
com.sun.media.sound.RealTimeSequencer#setTempoInMPQ(float)->void::: real time sequencer set tempo in q
com.sun.media.sound.RealTimeSequencer#setTempoFactor(float)->void::: real time sequencer set tempo factor
com.sun.media.sound.RealTimeSequencer#getTempoFactor()->float::: real time sequencer get tempo factor
com.sun.media.sound.RealTimeSequencer#getTickLength()->long::: real time sequencer get tick length
com.sun.media.sound.RealTimeSequencer#getTickPosition()->long::: real time sequencer get tick position
com.sun.media.sound.RealTimeSequencer#setTickPosition(long)->void::: real time sequencer set tick position
com.sun.media.sound.RealTimeSequencer#getMicrosecondLength()->long::: real time sequencer get microsecond length
com.sun.media.sound.RealTimeSequencer#getMicrosecondPosition()->long::: real time sequencer get microsecond position
com.sun.media.sound.RealTimeSequencer#setMicrosecondPosition(long)->void::: real time sequencer set microsecond position
com.sun.media.sound.RealTimeSequencer#setMasterSyncMode(Sequencer.SyncMode)->void::: real time sequencer set master sync mode
com.sun.media.sound.RealTimeSequencer#getMasterSyncMode()->Sequencer.SyncMode::: real time sequencer get master sync mode
com.sun.media.sound.RealTimeSequencer#getMasterSyncModes()->Sequencer.SyncMode[]::: real time sequencer get master sync modes
com.sun.media.sound.RealTimeSequencer#setSlaveSyncMode(Sequencer.SyncMode)->void::: real time sequencer set slave sync mode
com.sun.media.sound.RealTimeSequencer#getSlaveSyncMode()->Sequencer.SyncMode::: real time sequencer get slave sync mode
com.sun.media.sound.RealTimeSequencer#getSlaveSyncModes()->Sequencer.SyncMode[]::: real time sequencer get slave sync modes
com.sun.media.sound.RealTimeSequencer#getTrackCount()->int::: real time sequencer get track count
com.sun.media.sound.RealTimeSequencer#setTrackMute(int, boolean)->void::: real time sequencer set track mute
com.sun.media.sound.RealTimeSequencer#getTrackMute(int)->boolean::: real time sequencer get track mute
com.sun.media.sound.RealTimeSequencer#setTrackSolo(int, boolean)->void::: real time sequencer set track solo
com.sun.media.sound.RealTimeSequencer#getTrackSolo(int)->boolean::: real time sequencer get track solo
com.sun.media.sound.RealTimeSequencer#addMetaEventListener(MetaEventListener)->boolean::: real time sequencer add meta event listener
com.sun.media.sound.RealTimeSequencer#removeMetaEventListener(MetaEventListener)->void::: real time sequencer remove meta event listener
com.sun.media.sound.RealTimeSequencer#addControllerEventListener(ControllerEventListener, int[])->int[]::: real time sequencer add controller event listener
com.sun.media.sound.RealTimeSequencer#removeControllerEventListener(ControllerEventListener, int[])->int[]::: real time sequencer remove controller event listener
com.sun.media.sound.RealTimeSequencer#setLoopStartPoint(long)->void::: real time sequencer set loop start point
com.sun.media.sound.RealTimeSequencer#getLoopStartPoint()->long::: real time sequencer get loop start point
com.sun.media.sound.RealTimeSequencer#setLoopEndPoint(long)->void::: real time sequencer set loop end point
com.sun.media.sound.RealTimeSequencer#getLoopEndPoint()->long::: real time sequencer get loop end point
com.sun.media.sound.RealTimeSequencer#setLoopCount(int)->void::: real time sequencer set loop count
com.sun.media.sound.RealTimeSequencer#getLoopCount()->int::: real time sequencer get loop count
com.sun.media.sound.RealTimeSequencer#implOpen()->void::: real time sequencer impl open
com.sun.media.sound.RealTimeSequencer#implClose()->void::: real time sequencer impl close
com.sun.media.sound.RealTimeSequencer#implStart()->void::: real time sequencer impl start
com.sun.media.sound.RealTimeSequencer#implStop()->void::: real time sequencer impl stop
com.sun.media.sound.RealTimeSequencer#sendMetaEvents(MidiMessage)->void:::Send midi player events
com.sun.media.sound.RealTimeSequencer#sendControllerEvents(MidiMessage)->void:::Send midi player events.
com.sun.media.sound.RealTimeSequencer#hasReceivers()->boolean::: real time sequencer has receivers
com.sun.media.sound.RealTimeSequencer#createReceiver()->Receiver::: real time sequencer create receiver
com.sun.media.sound.RealTimeSequencer#hasTransmitters()->boolean::: real time sequencer has transmitters
com.sun.media.sound.RealTimeSequencer#createTransmitter()->Transmitter::: real time sequencer create transmitter
com.sun.media.sound.RealTimeSequencer#setAutoConnect(Receiver)->void::: real time sequencer set auto connect
com.sun.media.sound.RealTimeSequencer.SequencerReceiver#implSend(MidiMessage, long)->void::: sequencer receiver impl send
com.sun.media.sound.RealTimeSequencer.RecordingTrack#get(List, Track)->RecordingTrack::: recording track get
com.sun.media.sound.RealTimeSequencer.RecordingTrack#get(List, int)->Track::: recording track get
com.sun.media.sound.RealTimeSequencer.PlayThread#getDataPump()->DataPump::: play thread get data pump
com.sun.media.sound.RealTimeSequencer.PlayThread#setSequence(Sequence)->void::: play thread set sequence
com.sun.media.sound.RealTimeSequencer.PlayThread#start()->void:::start thread and pump
com.sun.media.sound.RealTimeSequencer.PlayThread#stop()->void::: play thread stop
com.sun.media.sound.RealTimeSequencer.PlayThread#playThreadImplStop()->void::: play thread play thread impl stop
com.sun.media.sound.RealTimeSequencer.PlayThread#close()->void::: play thread close
com.sun.media.sound.RealTimeSequencer.PlayThread#run()->void:::Main process loop driving the media flow
com.sun.media.sound.RealTimeSequencerProvider#getDeviceInfo()->MidiDevice.Info[]::: real time sequencer provider get device info
com.sun.media.sound.RealTimeSequencerProvider#getDevice(MidiDevice.Info)->MidiDevice::: real time sequencer provider get device
com.sun.media.sound.ReferenceCountingDevice#getReceiverReferenceCounting()->Receiver:::Retrieve a Receiver that opens the device implicitly
com.sun.media.sound.ReferenceCountingDevice#getTransmitterReferenceCounting()->Transmitter:::Retrieve a Transmitter that opens the device implicitly
com.sun.media.sound.RIFFReader#getFilePointer()->long::: reader get file pointer
com.sun.media.sound.RIFFReader#hasNextChunk()->boolean::: reader has next chunk
com.sun.media.sound.RIFFReader#nextChunk()->RIFFReader::: reader next chunk
com.sun.media.sound.RIFFReader#getFormat()->String::: reader get format
com.sun.media.sound.RIFFReader#getType()->String::: reader get type
com.sun.media.sound.RIFFReader#getSize()->long::: reader get size
com.sun.media.sound.RIFFReader#read()->int::: reader read
com.sun.media.sound.RIFFReader#read(byte[], int, int)->int::: reader read
com.sun.media.sound.RIFFReader#readFully(byte[])->void::: reader read fully
com.sun.media.sound.RIFFReader#readFully(byte[], int, int)->void::: reader read fully
com.sun.media.sound.RIFFReader#skip(long)->long::: reader skip
com.sun.media.sound.RIFFReader#available()->int::: reader available
com.sun.media.sound.RIFFReader#finish()->void::: reader finish
com.sun.media.sound.RIFFReader#readString(int)->String::: reader read string
com.sun.media.sound.RIFFReader#readByte()->byte::: reader read byte
com.sun.media.sound.RIFFReader#readShort()->short::: reader read short
com.sun.media.sound.RIFFReader#readInt()->int::: reader read int
com.sun.media.sound.RIFFReader#readLong()->long::: reader read long
com.sun.media.sound.RIFFReader#readUnsignedByte()->int::: reader read unsigned byte
com.sun.media.sound.RIFFReader#readUnsignedShort()->int::: reader read unsigned short
com.sun.media.sound.RIFFReader#readUnsignedInt()->long::: reader read unsigned int
com.sun.media.sound.RIFFReader#close()->void::: reader close
com.sun.media.sound.RIFFWriter#seek(long)->void::: writer seek
com.sun.media.sound.RIFFWriter#getFilePointer()->long::: writer get file pointer
com.sun.media.sound.RIFFWriter#setWriteOverride(boolean)->void::: writer set write override
com.sun.media.sound.RIFFWriter#getWriteOverride()->boolean::: writer get write override
com.sun.media.sound.RIFFWriter#close()->void::: writer close
com.sun.media.sound.RIFFWriter#write(int)->void::: writer write
com.sun.media.sound.RIFFWriter#write(byte[], int, int)->void::: writer write
com.sun.media.sound.RIFFWriter#writeList(String)->RIFFWriter::: writer write list
com.sun.media.sound.RIFFWriter#writeChunk(String)->RIFFWriter::: writer write chunk
com.sun.media.sound.RIFFWriter#writeString(String)->void::: writer write string
com.sun.media.sound.RIFFWriter#writeString(String, int)->void::: writer write string
com.sun.media.sound.RIFFWriter#writeByte(int)->void::: writer write byte
com.sun.media.sound.RIFFWriter#writeShort(short)->void::: writer write short
com.sun.media.sound.RIFFWriter#writeInt(int)->void::: writer write int
com.sun.media.sound.RIFFWriter#writeLong(long)->void::: writer write long
com.sun.media.sound.RIFFWriter#writeUnsignedByte(int)->void::: writer write unsigned byte
com.sun.media.sound.RIFFWriter#writeUnsignedShort(int)->void::: writer write unsigned short
com.sun.media.sound.RIFFWriter#writeUnsignedInt(long)->void::: writer write unsigned int
com.sun.media.sound.SF2Instrument#getName()->String::: f2 instrument get name
com.sun.media.sound.SF2Instrument#setName(String)->void::: f2 instrument set name
com.sun.media.sound.SF2Instrument#getPatch()->Patch::: f2 instrument get patch
com.sun.media.sound.SF2Instrument#setPatch(Patch)->void::: f2 instrument set patch
com.sun.media.sound.SF2Instrument#getData()->Object::: f2 instrument get data
com.sun.media.sound.SF2Instrument#getGenre()->long::: f2 instrument get genre
com.sun.media.sound.SF2Instrument#setGenre(long)->void::: f2 instrument set genre
com.sun.media.sound.SF2Instrument#getLibrary()->long::: f2 instrument get library
com.sun.media.sound.SF2Instrument#setLibrary(long)->void::: f2 instrument set library
com.sun.media.sound.SF2Instrument#getMorphology()->long::: f2 instrument get morphology
com.sun.media.sound.SF2Instrument#setMorphology(long)->void::: f2 instrument set morphology
com.sun.media.sound.SF2Instrument#getRegions()->List::: f2 instrument get regions
com.sun.media.sound.SF2Instrument#getGlobalRegion()->SF2GlobalRegion::: f2 instrument get global region
com.sun.media.sound.SF2Instrument#setGlobalZone(SF2GlobalRegion)->void::: f2 instrument set global zone
com.sun.media.sound.SF2Instrument#toString()->String::: f2 instrument to string
com.sun.media.sound.SF2Instrument#getPerformers()->ModelPerformer[]::: f2 instrument get performers
com.sun.media.sound.SF2Instrument#convertDestination(int, double[], ModelSource[])->ModelDestination::: f2 instrument convert destination
com.sun.media.sound.SF2InstrumentRegion#getLayer()->SF2Layer::: f2 instrument region get layer
com.sun.media.sound.SF2InstrumentRegion#setLayer(SF2Layer)->void::: f2 instrument region set layer
com.sun.media.sound.SF2Layer#getData()->Object::: f2 layer get data
com.sun.media.sound.SF2Layer#getName()->String::: f2 layer get name
com.sun.media.sound.SF2Layer#setName(String)->void::: f2 layer set name
com.sun.media.sound.SF2Layer#getRegions()->List::: f2 layer get regions
com.sun.media.sound.SF2Layer#getGlobalRegion()->SF2GlobalRegion::: f2 layer get global region
com.sun.media.sound.SF2Layer#setGlobalZone(SF2GlobalRegion)->void::: f2 layer set global zone
com.sun.media.sound.SF2Layer#toString()->String::: f2 layer to string
com.sun.media.sound.SF2LayerRegion#getSample()->SF2Sample::: f2 layer region get sample
com.sun.media.sound.SF2LayerRegion#setSample(SF2Sample)->void::: f2 layer region set sample
com.sun.media.sound.SF2Modulator#getAmount()->short::: f2 modulator get amount
com.sun.media.sound.SF2Modulator#setAmount(short)->void::: f2 modulator set amount
com.sun.media.sound.SF2Modulator#getAmountSourceOperator()->int::: f2 modulator get amount source operator
com.sun.media.sound.SF2Modulator#setAmountSourceOperator(int)->void::: f2 modulator set amount source operator
com.sun.media.sound.SF2Modulator#getTransportOperator()->int::: f2 modulator get transport operator
com.sun.media.sound.SF2Modulator#setTransportOperator(int)->void::: f2 modulator set transport operator
com.sun.media.sound.SF2Modulator#getDestinationOperator()->int::: f2 modulator get destination operator
com.sun.media.sound.SF2Modulator#setDestinationOperator(int)->void::: f2 modulator set destination operator
com.sun.media.sound.SF2Modulator#getSourceOperator()->int::: f2 modulator get source operator
com.sun.media.sound.SF2Modulator#setSourceOperator(int)->void::: f2 modulator set source operator
com.sun.media.sound.SF2Region#getGenerators()->Map::: f2 region get generators
com.sun.media.sound.SF2Region#contains(int)->boolean::: f2 region contains
com.sun.media.sound.SF2Region#getDefaultValue(int)->short::: f2 region get default value
com.sun.media.sound.SF2Region#getShort(int)->short::: f2 region get short
com.sun.media.sound.SF2Region#putShort(int, short)->void::: f2 region put short
com.sun.media.sound.SF2Region#getBytes(int)->byte[]::: f2 region get bytes
com.sun.media.sound.SF2Region#putBytes(int, byte[])->void::: f2 region put bytes
com.sun.media.sound.SF2Region#getInteger(int)->int::: f2 region get integer
com.sun.media.sound.SF2Region#putInteger(int, int)->void::: f2 region put integer
com.sun.media.sound.SF2Region#getModulators()->List::: f2 region get modulators
com.sun.media.sound.SF2Sample#getData()->Object::: f2 sample get data
com.sun.media.sound.SF2Sample#getDataBuffer()->ModelByteBuffer::: f2 sample get data buffer
com.sun.media.sound.SF2Sample#getData24Buffer()->ModelByteBuffer::: f2 sample get data24 buffer
com.sun.media.sound.SF2Sample#getFormat()->AudioFormat::: f2 sample get format
com.sun.media.sound.SF2Sample#setData(ModelByteBuffer)->void::: f2 sample set data
com.sun.media.sound.SF2Sample#setData(byte[])->void::: f2 sample set data
com.sun.media.sound.SF2Sample#setData(byte[], int, int)->void::: f2 sample set data
com.sun.media.sound.SF2Sample#setData24(ModelByteBuffer)->void::: f2 sample set data24
com.sun.media.sound.SF2Sample#setData24(byte[])->void::: f2 sample set data24
com.sun.media.sound.SF2Sample#setData24(byte[], int, int)->void::: f2 sample set data24
com.sun.media.sound.SF2Sample#getName()->String::: f2 sample get name
com.sun.media.sound.SF2Sample#setName(String)->void::: f2 sample set name
com.sun.media.sound.SF2Sample#getEndLoop()->long::: f2 sample get end loop
com.sun.media.sound.SF2Sample#setEndLoop(long)->void::: f2 sample set end loop
com.sun.media.sound.SF2Sample#getOriginalPitch()->int::: f2 sample get original pitch
com.sun.media.sound.SF2Sample#setOriginalPitch(int)->void::: f2 sample set original pitch
com.sun.media.sound.SF2Sample#getPitchCorrection()->byte::: f2 sample get pitch correction
com.sun.media.sound.SF2Sample#setPitchCorrection(byte)->void::: f2 sample set pitch correction
com.sun.media.sound.SF2Sample#getSampleLink()->int::: f2 sample get sample link
com.sun.media.sound.SF2Sample#setSampleLink(int)->void::: f2 sample set sample link
com.sun.media.sound.SF2Sample#getSampleRate()->long::: f2 sample get sample rate
com.sun.media.sound.SF2Sample#setSampleRate(long)->void::: f2 sample set sample rate
com.sun.media.sound.SF2Sample#getSampleType()->int::: f2 sample get sample type
com.sun.media.sound.SF2Sample#setSampleType(int)->void::: f2 sample set sample type
com.sun.media.sound.SF2Sample#getStartLoop()->long::: f2 sample get start loop
com.sun.media.sound.SF2Sample#setStartLoop(long)->void::: f2 sample set start loop
com.sun.media.sound.SF2Sample#toString()->String::: f2 sample to string
com.sun.media.sound.SF2Soundbank#save(String)->void::: f2 soundbank save
com.sun.media.sound.SF2Soundbank#save(File)->void::: f2 soundbank save
com.sun.media.sound.SF2Soundbank#save(OutputStream)->void::: f2 soundbank save
com.sun.media.sound.SF2Soundbank#getName()->String::: f2 soundbank get name
com.sun.media.sound.SF2Soundbank#getVersion()->String::: f2 soundbank get version
com.sun.media.sound.SF2Soundbank#getVendor()->String::: f2 soundbank get vendor
com.sun.media.sound.SF2Soundbank#getDescription()->String::: f2 soundbank get description
com.sun.media.sound.SF2Soundbank#setName(String)->void::: f2 soundbank set name
com.sun.media.sound.SF2Soundbank#setVendor(String)->void::: f2 soundbank set vendor
com.sun.media.sound.SF2Soundbank#setDescription(String)->void::: f2 soundbank set description
com.sun.media.sound.SF2Soundbank#getResources()->SoundbankResource[]::: f2 soundbank get resources
com.sun.media.sound.SF2Soundbank#getInstruments()->SF2Instrument[]::: f2 soundbank get instruments
com.sun.media.sound.SF2Soundbank#getLayers()->SF2Layer[]::: f2 soundbank get layers
com.sun.media.sound.SF2Soundbank#getSamples()->SF2Sample[]::: f2 soundbank get samples
com.sun.media.sound.SF2Soundbank#getInstrument(Patch)->Instrument::: f2 soundbank get instrument
com.sun.media.sound.SF2Soundbank#getCreationDate()->String::: f2 soundbank get creation date
com.sun.media.sound.SF2Soundbank#setCreationDate(String)->void::: f2 soundbank set creation date
com.sun.media.sound.SF2Soundbank#getProduct()->String::: f2 soundbank get product
com.sun.media.sound.SF2Soundbank#setProduct(String)->void::: f2 soundbank set product
com.sun.media.sound.SF2Soundbank#getRomName()->String::: f2 soundbank get rom name
com.sun.media.sound.SF2Soundbank#setRomName(String)->void::: f2 soundbank set rom name
com.sun.media.sound.SF2Soundbank#getRomVersionMajor()->int::: f2 soundbank get rom version major
com.sun.media.sound.SF2Soundbank#setRomVersionMajor(int)->void::: f2 soundbank set rom version major
com.sun.media.sound.SF2Soundbank#getRomVersionMinor()->int::: f2 soundbank get rom version minor
com.sun.media.sound.SF2Soundbank#setRomVersionMinor(int)->void::: f2 soundbank set rom version minor
com.sun.media.sound.SF2Soundbank#getTargetEngine()->String::: f2 soundbank get target engine
com.sun.media.sound.SF2Soundbank#setTargetEngine(String)->void::: f2 soundbank set target engine
com.sun.media.sound.SF2Soundbank#getTools()->String::: f2 soundbank get tools
com.sun.media.sound.SF2Soundbank#setTools(String)->void::: f2 soundbank set tools
com.sun.media.sound.SF2Soundbank#addResource(SoundbankResource)->void::: f2 soundbank add resource
com.sun.media.sound.SF2Soundbank#removeResource(SoundbankResource)->void::: f2 soundbank remove resource
com.sun.media.sound.SF2Soundbank#addInstrument(SF2Instrument)->void::: f2 soundbank add instrument
com.sun.media.sound.SF2Soundbank#removeInstrument(SF2Instrument)->void::: f2 soundbank remove instrument
com.sun.media.sound.SF2SoundbankReader#getSoundbank(URL)->Soundbank::: f2 soundbank reader get soundbank
com.sun.media.sound.SF2SoundbankReader#getSoundbank(InputStream)->Soundbank::: f2 soundbank reader get soundbank
com.sun.media.sound.SF2SoundbankReader#getSoundbank(File)->Soundbank::: f2 soundbank reader get soundbank
com.sun.media.sound.SimpleInstrument#clear()->void::: simple instrument clear
com.sun.media.sound.SimpleInstrument#add(ModelPerformer[], int, int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer[], int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer[], int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer[])->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer, int, int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer, int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelPerformer)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelInstrument, int, int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelInstrument, int, int, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelInstrument, int, int)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#add(ModelInstrument)->void::: simple instrument add
com.sun.media.sound.SimpleInstrument#getPerformers()->ModelPerformer[]::: simple instrument get performers
com.sun.media.sound.SimpleInstrument#getData()->Object::: simple instrument get data
com.sun.media.sound.SimpleInstrument#getName()->String::: simple instrument get name
com.sun.media.sound.SimpleInstrument#setName(String)->void::: simple instrument set name
com.sun.media.sound.SimpleInstrument#getPatch()->ModelPatch::: simple instrument get patch
com.sun.media.sound.SimpleInstrument#setPatch(Patch)->void::: simple instrument set patch
com.sun.media.sound.SimpleSoundbank#getName()->String::: simple soundbank get name
com.sun.media.sound.SimpleSoundbank#getVersion()->String::: simple soundbank get version
com.sun.media.sound.SimpleSoundbank#getVendor()->String::: simple soundbank get vendor
com.sun.media.sound.SimpleSoundbank#getDescription()->String::: simple soundbank get description
com.sun.media.sound.SimpleSoundbank#setDescription(String)->void::: simple soundbank set description
com.sun.media.sound.SimpleSoundbank#setName(String)->void::: simple soundbank set name
com.sun.media.sound.SimpleSoundbank#setVendor(String)->void::: simple soundbank set vendor
com.sun.media.sound.SimpleSoundbank#setVersion(String)->void::: simple soundbank set version
com.sun.media.sound.SimpleSoundbank#getResources()->SoundbankResource[]::: simple soundbank get resources
com.sun.media.sound.SimpleSoundbank#getInstruments()->Instrument[]::: simple soundbank get instruments
com.sun.media.sound.SimpleSoundbank#getInstrument(Patch)->Instrument::: simple soundbank get instrument
com.sun.media.sound.SimpleSoundbank#addResource(SoundbankResource)->void::: simple soundbank add resource
com.sun.media.sound.SimpleSoundbank#removeResource(SoundbankResource)->void::: simple soundbank remove resource
com.sun.media.sound.SimpleSoundbank#addInstrument(Instrument)->void::: simple soundbank add instrument
com.sun.media.sound.SimpleSoundbank#removeInstrument(Instrument)->void::: simple soundbank remove instrument
com.sun.media.sound.SimpleSoundbank#addAllInstruments(Soundbank)->void::: simple soundbank add all instruments
com.sun.media.sound.SimpleSoundbank#removeAllInstruments(Soundbank)->void::: simple soundbank remove all instruments
com.sun.media.sound.SoftAbstractResampler#getPadding()->int::: soft abstract resampler get padding
com.sun.media.sound.SoftAbstractResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft abstract resampler interpolate
com.sun.media.sound.SoftAbstractResampler#openStreamer()->SoftResamplerStreamer::: soft abstract resampler open streamer
com.sun.media.sound.SoftAudioBuffer#swap(SoftAudioBuffer)->void::: soft audio buffer swap
com.sun.media.sound.SoftAudioBuffer#getFormat()->AudioFormat::: soft audio buffer get format
com.sun.media.sound.SoftAudioBuffer#getSize()->int::: soft audio buffer get size
com.sun.media.sound.SoftAudioBuffer#clear()->void::: soft audio buffer clear
com.sun.media.sound.SoftAudioBuffer#isSilent()->boolean::: soft audio buffer is silent
com.sun.media.sound.SoftAudioBuffer#array()->float[]::: soft audio buffer array
com.sun.media.sound.SoftAudioBuffer#get(byte[], int)->void::: soft audio buffer get
com.sun.media.sound.SoftAudioProcessor#globalParameterControlChange(int[], long, long)->void::: soft audio processor global parameter control change
com.sun.media.sound.SoftAudioProcessor#init(float, float)->void::: soft audio processor init
com.sun.media.sound.SoftAudioProcessor#setInput(int, SoftAudioBuffer)->void::: soft audio processor set input
com.sun.media.sound.SoftAudioProcessor#setOutput(int, SoftAudioBuffer)->void::: soft audio processor set output
com.sun.media.sound.SoftAudioProcessor#setMixMode(boolean)->void::: soft audio processor set mix mode
com.sun.media.sound.SoftAudioProcessor#processAudio()->void::: soft audio processor process audio
com.sun.media.sound.SoftAudioProcessor#processControlLogic()->void::: soft audio processor process control logic
com.sun.media.sound.SoftAudioPusher#start()->void::: soft audio pusher start
com.sun.media.sound.SoftAudioPusher#stop()->void::: soft audio pusher stop
com.sun.media.sound.SoftAudioPusher#run()->void::: soft audio pusher run
com.sun.media.sound.SoftChannel#initVoice(SoftVoice, SoftPerformer, int, int, int, int, ModelConnectionBlock[], ModelChannelMixer, boolean)->void::: soft channel init voice
com.sun.media.sound.SoftChannel#noteOn(int, int)->void::: soft channel note on
com.sun.media.sound.SoftChannel#noteOn(int, int, int)->void::: soft channel note on
com.sun.media.sound.SoftChannel#noteOff(int, int)->void::: soft channel note off
com.sun.media.sound.SoftChannel#play(int, ModelConnectionBlock[])->void::: soft channel play
com.sun.media.sound.SoftChannel#noteOff(int)->void::: soft channel note off
com.sun.media.sound.SoftChannel#setPolyPressure(int, int)->void::: soft channel set poly pressure
com.sun.media.sound.SoftChannel#getPolyPressure(int)->int::: soft channel get poly pressure
com.sun.media.sound.SoftChannel#setChannelPressure(int)->void::: soft channel set channel pressure
com.sun.media.sound.SoftChannel#getChannelPressure()->int::: soft channel get channel pressure
com.sun.media.sound.SoftChannel#applyInstrumentCustomization()->void::: soft channel apply instrument customization
com.sun.media.sound.SoftChannel#mapPolyPressureToDestination(int[], int[])->void::: soft channel map poly pressure to destination
com.sun.media.sound.SoftChannel#mapChannelPressureToDestination(int[], int[])->void::: soft channel map channel pressure to destination
com.sun.media.sound.SoftChannel#mapControlToDestination(int, int[], int[])->void::: soft channel map control to destination
com.sun.media.sound.SoftChannel#controlChangePerNote(int, int, int)->void::: soft channel control change per note
com.sun.media.sound.SoftChannel#getControlPerNote(int, int)->int::: soft channel get control per note
com.sun.media.sound.SoftChannel#controlChange(int, int)->void::: soft channel control change
com.sun.media.sound.SoftChannel#getController(int)->int::: soft channel get controller
com.sun.media.sound.SoftChannel#tuningChange(int)->void::: soft channel tuning change
com.sun.media.sound.SoftChannel#tuningChange(int, int)->void::: soft channel tuning change
com.sun.media.sound.SoftChannel#programChange(int)->void::: soft channel program change
com.sun.media.sound.SoftChannel#programChange(int, int)->void::: soft channel program change
com.sun.media.sound.SoftChannel#getProgram()->int::: soft channel get program
com.sun.media.sound.SoftChannel#setPitchBend(int)->void::: soft channel set pitch bend
com.sun.media.sound.SoftChannel#getPitchBend()->int::: soft channel get pitch bend
com.sun.media.sound.SoftChannel#nrpnChange(int, int)->void::: soft channel nrpn change
com.sun.media.sound.SoftChannel#rpnChange(int, int)->void::: soft channel rpn change
com.sun.media.sound.SoftChannel#resetAllControllers()->void::: soft channel reset all controllers
com.sun.media.sound.SoftChannel#resetAllControllers(boolean)->void::: soft channel reset all controllers
com.sun.media.sound.SoftChannel#allNotesOff()->void::: soft channel all notes off
com.sun.media.sound.SoftChannel#allSoundOff()->void::: soft channel all sound off
com.sun.media.sound.SoftChannel#localControl(boolean)->boolean::: soft channel local control
com.sun.media.sound.SoftChannel#setMono(boolean)->void::: soft channel set mono
com.sun.media.sound.SoftChannel#getMono()->boolean::: soft channel get mono
com.sun.media.sound.SoftChannel#setOmni(boolean)->void::: soft channel set omni
com.sun.media.sound.SoftChannel#getOmni()->boolean::: soft channel get omni
com.sun.media.sound.SoftChannel#setMute(boolean)->void::: soft channel set mute
com.sun.media.sound.SoftChannel#getMute()->boolean::: soft channel get mute
com.sun.media.sound.SoftChannel#setSolo(boolean)->void::: soft channel set solo
com.sun.media.sound.SoftChannel#getSolo()->boolean::: soft channel get solo
com.sun.media.sound.SoftChannelProxy#getChannel()->MidiChannel::: soft channel proxy get channel
com.sun.media.sound.SoftChannelProxy#setChannel(MidiChannel)->void::: soft channel proxy set channel
com.sun.media.sound.SoftChannelProxy#allNotesOff()->void::: soft channel proxy all notes off
com.sun.media.sound.SoftChannelProxy#allSoundOff()->void::: soft channel proxy all sound off
com.sun.media.sound.SoftChannelProxy#controlChange(int, int)->void::: soft channel proxy control change
com.sun.media.sound.SoftChannelProxy#getChannelPressure()->int::: soft channel proxy get channel pressure
com.sun.media.sound.SoftChannelProxy#getController(int)->int::: soft channel proxy get controller
com.sun.media.sound.SoftChannelProxy#getMono()->boolean::: soft channel proxy get mono
com.sun.media.sound.SoftChannelProxy#getMute()->boolean::: soft channel proxy get mute
com.sun.media.sound.SoftChannelProxy#getOmni()->boolean::: soft channel proxy get omni
com.sun.media.sound.SoftChannelProxy#getPitchBend()->int::: soft channel proxy get pitch bend
com.sun.media.sound.SoftChannelProxy#getPolyPressure(int)->int::: soft channel proxy get poly pressure
com.sun.media.sound.SoftChannelProxy#getProgram()->int::: soft channel proxy get program
com.sun.media.sound.SoftChannelProxy#getSolo()->boolean::: soft channel proxy get solo
com.sun.media.sound.SoftChannelProxy#localControl(boolean)->boolean::: soft channel proxy local control
com.sun.media.sound.SoftChannelProxy#noteOff(int)->void::: soft channel proxy note off
com.sun.media.sound.SoftChannelProxy#noteOff(int, int)->void::: soft channel proxy note off
com.sun.media.sound.SoftChannelProxy#noteOn(int, int)->void::: soft channel proxy note on
com.sun.media.sound.SoftChannelProxy#programChange(int)->void::: soft channel proxy program change
com.sun.media.sound.SoftChannelProxy#programChange(int, int)->void::: soft channel proxy program change
com.sun.media.sound.SoftChannelProxy#resetAllControllers()->void::: soft channel proxy reset all controllers
com.sun.media.sound.SoftChannelProxy#setChannelPressure(int)->void::: soft channel proxy set channel pressure
com.sun.media.sound.SoftChannelProxy#setMono(boolean)->void::: soft channel proxy set mono
com.sun.media.sound.SoftChannelProxy#setMute(boolean)->void::: soft channel proxy set mute
com.sun.media.sound.SoftChannelProxy#setOmni(boolean)->void::: soft channel proxy set omni
com.sun.media.sound.SoftChannelProxy#setPitchBend(int)->void::: soft channel proxy set pitch bend
com.sun.media.sound.SoftChannelProxy#setPolyPressure(int, int)->void::: soft channel proxy set poly pressure
com.sun.media.sound.SoftChannelProxy#setSolo(boolean)->void::: soft channel proxy set solo
com.sun.media.sound.SoftChorus#init(float, float)->void::: soft chorus init
com.sun.media.sound.SoftChorus#globalParameterControlChange(int[], long, long)->void::: soft chorus global parameter control change
com.sun.media.sound.SoftChorus#processControlLogic()->void::: soft chorus process control logic
com.sun.media.sound.SoftChorus#processAudio()->void::: soft chorus process audio
com.sun.media.sound.SoftChorus#setInput(int, SoftAudioBuffer)->void::: soft chorus set input
com.sun.media.sound.SoftChorus#setMixMode(boolean)->void::: soft chorus set mix mode
com.sun.media.sound.SoftChorus#setOutput(int, SoftAudioBuffer)->void::: soft chorus set output
com.sun.media.sound.SoftControl#get(int, String)->double[]::: soft control get
com.sun.media.sound.SoftCubicResampler#getPadding()->int::: soft cubic resampler get padding
com.sun.media.sound.SoftCubicResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft cubic resampler interpolate
com.sun.media.sound.SoftEnvelopeGenerator#reset()->void::: soft envelope generator reset
com.sun.media.sound.SoftEnvelopeGenerator#init(SoftSynthesizer)->void::: soft envelope generator init
com.sun.media.sound.SoftEnvelopeGenerator#get(int, String)->double[]::: soft envelope generator get
com.sun.media.sound.SoftEnvelopeGenerator#processControlLogic()->void::: soft envelope generator process control logic
com.sun.media.sound.SoftFilter#setFrequency(double)->void::: soft filter set frequency
com.sun.media.sound.SoftFilter#setResonance(double)->void::: soft filter set resonance
com.sun.media.sound.SoftFilter#reset()->void::: soft filter reset
com.sun.media.sound.SoftFilter#setFilterType(int)->void::: soft filter set filter type
com.sun.media.sound.SoftFilter#processAudio(SoftAudioBuffer)->void::: soft filter process audio
com.sun.media.sound.SoftFilter#filter4(SoftAudioBuffer)->void::: soft filter filter4
com.sun.media.sound.SoftFilter#filter2calc()->void::: soft filter filter2calc
com.sun.media.sound.SoftFilter#filter2(SoftAudioBuffer)->void::: soft filter filter2
com.sun.media.sound.SoftFilter#filter1calc()->void::: soft filter filter1calc
com.sun.media.sound.SoftFilter#filter1(SoftAudioBuffer)->void::: soft filter filter1
com.sun.media.sound.SoftInstrument#getDirector(MidiChannel, ModelDirectedPlayer)->ModelDirector::: soft instrument get director
com.sun.media.sound.SoftInstrument#getSourceInstrument()->ModelInstrument::: soft instrument get source instrument
com.sun.media.sound.SoftInstrument#getData()->Object::: soft instrument get data
com.sun.media.sound.SoftInstrument#getPerformer(int)->SoftPerformer::: soft instrument get performer
com.sun.media.sound.SoftLanczosResampler#sinc(double)->double::: soft lanczos resampler sinc
com.sun.media.sound.SoftLanczosResampler#sincTable(int, float)->float[]::: soft lanczos resampler sinc table
com.sun.media.sound.SoftLanczosResampler#getPadding()->int::: soft lanczos resampler get padding
com.sun.media.sound.SoftLanczosResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft lanczos resampler interpolate
com.sun.media.sound.SoftLimiter#init(float, float)->void::: soft limiter init
com.sun.media.sound.SoftLimiter#setInput(int, SoftAudioBuffer)->void::: soft limiter set input
com.sun.media.sound.SoftLimiter#setOutput(int, SoftAudioBuffer)->void::: soft limiter set output
com.sun.media.sound.SoftLimiter#setMixMode(boolean)->void::: soft limiter set mix mode
com.sun.media.sound.SoftLimiter#globalParameterControlChange(int[], long, long)->void::: soft limiter global parameter control change
com.sun.media.sound.SoftLimiter#processAudio()->void::: soft limiter process audio
com.sun.media.sound.SoftLimiter#processControlLogic()->void::: soft limiter process control logic
com.sun.media.sound.SoftLinearResampler#getPadding()->int::: soft linear resampler get padding
com.sun.media.sound.SoftLinearResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft linear resampler interpolate
com.sun.media.sound.SoftLinearResampler2#getPadding()->int::: soft linear resampler2 get padding
com.sun.media.sound.SoftLinearResampler2#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft linear resampler2 interpolate
com.sun.media.sound.SoftLowFrequencyOscillator#reset()->void::: soft low frequency oscillator reset
com.sun.media.sound.SoftLowFrequencyOscillator#init(SoftSynthesizer)->void::: soft low frequency oscillator init
com.sun.media.sound.SoftLowFrequencyOscillator#processControlLogic()->void::: soft low frequency oscillator process control logic
com.sun.media.sound.SoftLowFrequencyOscillator#get(int, String)->double[]::: soft low frequency oscillator get
com.sun.media.sound.SoftMainMixer#processAudioBuffers()->void::: soft main mixer process audio buffers
com.sun.media.sound.SoftMainMixer#activity()->void::: soft main mixer activity
com.sun.media.sound.SoftMainMixer#stopMixer(ModelChannelMixer)->void::: soft main mixer stop mixer
com.sun.media.sound.SoftMainMixer#registerMixer(ModelChannelMixer)->void::: soft main mixer register mixer
com.sun.media.sound.SoftMainMixer#getInputStream()->AudioInputStream::: soft main mixer get input stream
com.sun.media.sound.SoftMainMixer#reset()->void::: soft main mixer reset
com.sun.media.sound.SoftMainMixer#setVolume(int)->void::: soft main mixer set volume
com.sun.media.sound.SoftMainMixer#setBalance(int)->void::: soft main mixer set balance
com.sun.media.sound.SoftMainMixer#setFineTuning(int)->void::: soft main mixer set fine tuning
com.sun.media.sound.SoftMainMixer#setCoarseTuning(int)->void::: soft main mixer set coarse tuning
com.sun.media.sound.SoftMainMixer#getVolume()->int::: soft main mixer get volume
com.sun.media.sound.SoftMainMixer#getBalance()->int::: soft main mixer get balance
com.sun.media.sound.SoftMainMixer#getFineTuning()->int::: soft main mixer get fine tuning
com.sun.media.sound.SoftMainMixer#getCoarseTuning()->int::: soft main mixer get coarse tuning
com.sun.media.sound.SoftMainMixer#globalParameterControlChange(int[], long[], long[])->void::: soft main mixer global parameter control change
com.sun.media.sound.SoftMainMixer#processMessage(Object)->void::: soft main mixer process message
com.sun.media.sound.SoftMainMixer#processMessage(MidiMessage)->void::: soft main mixer process message
com.sun.media.sound.SoftMainMixer#processMessage(byte[])->void::: soft main mixer process message
com.sun.media.sound.SoftMainMixer#processMessage(int, int, int, int)->void::: soft main mixer process message
com.sun.media.sound.SoftMainMixer#getMicrosecondPosition()->long::: soft main mixer get microsecond position
com.sun.media.sound.SoftMainMixer#close()->void::: soft main mixer close
com.sun.media.sound.SoftMidiAudioFileReader#getAudioInputStream(InputStream)->AudioInputStream::: soft midi audio file reader get audio input stream
com.sun.media.sound.SoftMidiAudioFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: soft midi audio file reader get audio file format impl
com.sun.media.sound.SoftMixingClip#processControlLogic()->void::: soft mixing clip process control logic
com.sun.media.sound.SoftMixingClip#processAudioLogic(SoftAudioBuffer[])->void::: soft mixing clip process audio logic
com.sun.media.sound.SoftMixingClip#getFrameLength()->int::: soft mixing clip get frame length
com.sun.media.sound.SoftMixingClip#getMicrosecondLength()->long::: soft mixing clip get microsecond length
com.sun.media.sound.SoftMixingClip#loop(int)->void::: soft mixing clip loop
com.sun.media.sound.SoftMixingClip#open(AudioInputStream)->void::: soft mixing clip open
com.sun.media.sound.SoftMixingClip#open(AudioFormat, byte[], int, int)->void::: soft mixing clip open
com.sun.media.sound.SoftMixingClip#setFramePosition(int)->void::: soft mixing clip set frame position
com.sun.media.sound.SoftMixingClip#setLoopPoints(int, int)->void::: soft mixing clip set loop points
com.sun.media.sound.SoftMixingClip#setMicrosecondPosition(long)->void::: soft mixing clip set microsecond position
com.sun.media.sound.SoftMixingClip#available()->int::: soft mixing clip available
com.sun.media.sound.SoftMixingClip#drain()->void::: soft mixing clip drain
com.sun.media.sound.SoftMixingClip#flush()->void::: soft mixing clip flush
com.sun.media.sound.SoftMixingClip#getBufferSize()->int::: soft mixing clip get buffer size
com.sun.media.sound.SoftMixingClip#getFormat()->AudioFormat::: soft mixing clip get format
com.sun.media.sound.SoftMixingClip#getFramePosition()->int::: soft mixing clip get frame position
com.sun.media.sound.SoftMixingClip#getLevel()->float::: soft mixing clip get level
com.sun.media.sound.SoftMixingClip#getLongFramePosition()->long::: soft mixing clip get long frame position
com.sun.media.sound.SoftMixingClip#getMicrosecondPosition()->long::: soft mixing clip get microsecond position
com.sun.media.sound.SoftMixingClip#isActive()->boolean::: soft mixing clip is active
com.sun.media.sound.SoftMixingClip#isRunning()->boolean::: soft mixing clip is running
com.sun.media.sound.SoftMixingClip#start()->void::: soft mixing clip start
com.sun.media.sound.SoftMixingClip#stop()->void::: soft mixing clip stop
com.sun.media.sound.SoftMixingClip#close()->void::: soft mixing clip close
com.sun.media.sound.SoftMixingClip#isOpen()->boolean::: soft mixing clip is open
com.sun.media.sound.SoftMixingClip#open()->void::: soft mixing clip open
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#available()->int::: audio float input stream resampler available
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#close()->void::: audio float input stream resampler close
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#getFormat()->AudioFormat::: audio float input stream resampler get format
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#getFrameLength()->long::: audio float input stream resampler get frame length
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#mark(int)->void::: audio float input stream resampler mark
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#markSupported()->boolean::: audio float input stream resampler mark supported
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#read(float[], int, int)->int::: audio float input stream resampler read
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#reset()->void::: audio float input stream resampler reset
com.sun.media.sound.SoftMixingDataLine.AudioFloatInputStreamResampler#skip(long)->long::: audio float input stream resampler skip
com.sun.media.sound.SoftMixingDataLine#processControlLogic()->void::: soft mixing data line process control logic
com.sun.media.sound.SoftMixingDataLine#processAudioLogic(SoftAudioBuffer[])->void::: soft mixing data line process audio logic
com.sun.media.sound.SoftMixingDataLine#calcVolume()->void::: soft mixing data line calc volume
com.sun.media.sound.SoftMixingDataLine#sendEvent(LineEvent)->void::: soft mixing data line send event
com.sun.media.sound.SoftMixingDataLine#addLineListener(LineListener)->void::: soft mixing data line add line listener
com.sun.media.sound.SoftMixingDataLine#removeLineListener(LineListener)->void::: soft mixing data line remove line listener
com.sun.media.sound.SoftMixingDataLine#getLineInfo()->javax.sound.sampled.Line.Info::: soft mixing data line get line info
com.sun.media.sound.SoftMixingDataLine#getControl(Type)->Control::: soft mixing data line get control
com.sun.media.sound.SoftMixingDataLine#getControls()->Control[]::: soft mixing data line get controls
com.sun.media.sound.SoftMixingDataLine#isControlSupported(Type)->boolean::: soft mixing data line is control supported
com.sun.media.sound.SoftMixingMainMixer#getInputStream()->AudioInputStream::: soft mixing main mixer get input stream
com.sun.media.sound.SoftMixingMainMixer#processAudioBuffers()->void::: soft mixing main mixer process audio buffers
com.sun.media.sound.SoftMixingMainMixer#openLine(SoftMixingDataLine)->void::: soft mixing main mixer open line
com.sun.media.sound.SoftMixingMainMixer#closeLine(SoftMixingDataLine)->void::: soft mixing main mixer close line
com.sun.media.sound.SoftMixingMainMixer#getOpenLines()->SoftMixingDataLine[]::: soft mixing main mixer get open lines
com.sun.media.sound.SoftMixingMainMixer#close()->void::: soft mixing main mixer close
com.sun.media.sound.SoftMixingMixer#getLine(Line.Info)->Line::: soft mixing mixer get line
com.sun.media.sound.SoftMixingMixer#getMaxLines(Line.Info)->int::: soft mixing mixer get max lines
com.sun.media.sound.SoftMixingMixer#getMixerInfo()->javax.sound.sampled.Mixer.Info::: soft mixing mixer get mixer info
com.sun.media.sound.SoftMixingMixer#getSourceLineInfo()->javax.sound.sampled.Line.Info[]::: soft mixing mixer get source line info
com.sun.media.sound.SoftMixingMixer#getSourceLineInfo(javax.sound.sampled.Line.Info)->javax.sound.sampled.Line.Info[]::: soft mixing mixer get source line info
com.sun.media.sound.SoftMixingMixer#getSourceLines()->Line[]::: soft mixing mixer get source lines
com.sun.media.sound.SoftMixingMixer#getTargetLineInfo()->javax.sound.sampled.Line.Info[]::: soft mixing mixer get target line info
com.sun.media.sound.SoftMixingMixer#getTargetLineInfo(javax.sound.sampled.Line.Info)->javax.sound.sampled.Line.Info[]::: soft mixing mixer get target line info
com.sun.media.sound.SoftMixingMixer#getTargetLines()->Line[]::: soft mixing mixer get target lines
com.sun.media.sound.SoftMixingMixer#isLineSupported(javax.sound.sampled.Line.Info)->boolean::: soft mixing mixer is line supported
com.sun.media.sound.SoftMixingMixer#isSynchronizationSupported(Line[], boolean)->boolean::: soft mixing mixer is synchronization supported
com.sun.media.sound.SoftMixingMixer#synchronize(Line[], boolean)->void::: soft mixing mixer synchronize
com.sun.media.sound.SoftMixingMixer#unsynchronize(Line[])->void::: soft mixing mixer unsynchronize
com.sun.media.sound.SoftMixingMixer#addLineListener(LineListener)->void::: soft mixing mixer add line listener
com.sun.media.sound.SoftMixingMixer#close()->void::: soft mixing mixer close
com.sun.media.sound.SoftMixingMixer#getControl(Type)->Control::: soft mixing mixer get control
com.sun.media.sound.SoftMixingMixer#getControls()->Control[]::: soft mixing mixer get controls
com.sun.media.sound.SoftMixingMixer#getLineInfo()->javax.sound.sampled.Line.Info::: soft mixing mixer get line info
com.sun.media.sound.SoftMixingMixer#isControlSupported(Type)->boolean::: soft mixing mixer is control supported
com.sun.media.sound.SoftMixingMixer#isOpen()->boolean::: soft mixing mixer is open
com.sun.media.sound.SoftMixingMixer#open()->void::: soft mixing mixer open
com.sun.media.sound.SoftMixingMixer#open(SourceDataLine)->void::: soft mixing mixer open
com.sun.media.sound.SoftMixingMixer#openStream(AudioFormat)->AudioInputStream::: soft mixing mixer open stream
com.sun.media.sound.SoftMixingMixer#removeLineListener(LineListener)->void::: soft mixing mixer remove line listener
com.sun.media.sound.SoftMixingMixer#getLatency()->long::: soft mixing mixer get latency
com.sun.media.sound.SoftMixingMixer#getFormat()->AudioFormat::: soft mixing mixer get format
com.sun.media.sound.SoftMixingMixer#getControlRate()->float::: soft mixing mixer get control rate
com.sun.media.sound.SoftMixingMixer#getMainMixer()->SoftMixingMainMixer::: soft mixing mixer get main mixer
com.sun.media.sound.SoftMixingMixerProvider#getMixer(Info)->Mixer::: soft mixing mixer provider get mixer
com.sun.media.sound.SoftMixingMixerProvider#getMixerInfo()->Info[]::: soft mixing mixer provider get mixer info
com.sun.media.sound.SoftMixingSourceDataLine#write(byte[], int, int)->int::: soft mixing source data line write
com.sun.media.sound.SoftMixingSourceDataLine#processControlLogic()->void::: soft mixing source data line process control logic
com.sun.media.sound.SoftMixingSourceDataLine#processAudioLogic(SoftAudioBuffer[])->void::: soft mixing source data line process audio logic
com.sun.media.sound.SoftMixingSourceDataLine#open()->void::: soft mixing source data line open
com.sun.media.sound.SoftMixingSourceDataLine#open(AudioFormat)->void::: soft mixing source data line open
com.sun.media.sound.SoftMixingSourceDataLine#open(AudioFormat, int)->void::: soft mixing source data line open
com.sun.media.sound.SoftMixingSourceDataLine#available()->int::: soft mixing source data line available
com.sun.media.sound.SoftMixingSourceDataLine#drain()->void::: soft mixing source data line drain
com.sun.media.sound.SoftMixingSourceDataLine#flush()->void::: soft mixing source data line flush
com.sun.media.sound.SoftMixingSourceDataLine#getBufferSize()->int::: soft mixing source data line get buffer size
com.sun.media.sound.SoftMixingSourceDataLine#getFormat()->AudioFormat::: soft mixing source data line get format
com.sun.media.sound.SoftMixingSourceDataLine#getFramePosition()->int::: soft mixing source data line get frame position
com.sun.media.sound.SoftMixingSourceDataLine#getLevel()->float::: soft mixing source data line get level
com.sun.media.sound.SoftMixingSourceDataLine#getLongFramePosition()->long::: soft mixing source data line get long frame position
com.sun.media.sound.SoftMixingSourceDataLine#getMicrosecondPosition()->long::: soft mixing source data line get microsecond position
com.sun.media.sound.SoftMixingSourceDataLine#isActive()->boolean::: soft mixing source data line is active
com.sun.media.sound.SoftMixingSourceDataLine#isRunning()->boolean::: soft mixing source data line is running
com.sun.media.sound.SoftMixingSourceDataLine#start()->void::: soft mixing source data line start
com.sun.media.sound.SoftMixingSourceDataLine#stop()->void::: soft mixing source data line stop
com.sun.media.sound.SoftMixingSourceDataLine#close()->void::: soft mixing source data line close
com.sun.media.sound.SoftMixingSourceDataLine#isOpen()->boolean::: soft mixing source data line is open
com.sun.media.sound.SoftPointResampler#getPadding()->int::: soft point resampler get padding
com.sun.media.sound.SoftPointResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft point resampler interpolate
com.sun.media.sound.SoftProcess#init(SoftSynthesizer)->void::: soft process init
com.sun.media.sound.SoftProcess#get(int, String)->double[]::: soft process get
com.sun.media.sound.SoftProcess#processControlLogic()->void::: soft process process control logic
com.sun.media.sound.SoftProcess#reset()->void::: soft process reset
com.sun.media.sound.SoftProvider#getDeviceInfo()->MidiDevice.Info[]::: soft provider get device info
com.sun.media.sound.SoftProvider#getDevice(MidiDevice.Info)->MidiDevice::: soft provider get device
com.sun.media.sound.SoftReceiver#getMidiDevice()->MidiDevice::: soft receiver get midi device
com.sun.media.sound.SoftReceiver#send(MidiMessage, long)->void::: soft receiver send
com.sun.media.sound.SoftReceiver#close()->void::: soft receiver close
com.sun.media.sound.SoftResampler#openStreamer()->SoftResamplerStreamer::: soft resampler open streamer
com.sun.media.sound.SoftResamplerStreamer#open(ModelWavetable, float)->void::: soft resampler streamer open
com.sun.media.sound.SoftReverb#init(float, float)->void::: soft reverb init
com.sun.media.sound.SoftReverb#setInput(int, SoftAudioBuffer)->void::: soft reverb set input
com.sun.media.sound.SoftReverb#setOutput(int, SoftAudioBuffer)->void::: soft reverb set output
com.sun.media.sound.SoftReverb#setMixMode(boolean)->void::: soft reverb set mix mode
com.sun.media.sound.SoftReverb#processAudio()->void::: soft reverb process audio
com.sun.media.sound.SoftReverb#globalParameterControlChange(int[], long, long)->void::: soft reverb global parameter control change
com.sun.media.sound.SoftReverb#processControlLogic()->void::: soft reverb process control logic
com.sun.media.sound.SoftReverb#setRoomSize(float)->void::: soft reverb set room size
com.sun.media.sound.SoftReverb#setPreDelay(float)->void::: soft reverb set pre delay
com.sun.media.sound.SoftReverb#setGain(float)->void::: soft reverb set gain
com.sun.media.sound.SoftReverb#setDamp(float)->void::: soft reverb set damp
com.sun.media.sound.SoftReverb#setLightMode(boolean)->void::: soft reverb set light mode
com.sun.media.sound.SoftShortMessage#getChannel()->int::: soft short message get channel
com.sun.media.sound.SoftShortMessage#setMessage(int, int, int, int)->void::: soft short message set message
com.sun.media.sound.SoftShortMessage#clone()->Object::: soft short message clone
com.sun.media.sound.SoftSincResampler#sinc(double)->double::: soft sinc resampler sinc
com.sun.media.sound.SoftSincResampler#wHanning(int, float)->float[]::: soft sinc resampler w hanning
com.sun.media.sound.SoftSincResampler#sincTable(int, float, float)->float[]::: soft sinc resampler sinc table
com.sun.media.sound.SoftSincResampler#getPadding()->int::: soft sinc resampler get padding
com.sun.media.sound.SoftSincResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)->void::: soft sinc resampler interpolate
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#setInputStream(AudioInputStream)->void::: weak audio stream set input stream
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#available()->int::: weak audio stream available
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#read()->int::: weak audio stream read
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#read(byte[], int, int)->int::: weak audio stream read
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#getAudioInputStream()->AudioInputStream::: weak audio stream get audio input stream
com.sun.media.sound.SoftSynthesizer.WeakAudioStream#close()->void::: weak audio stream close
com.sun.media.sound.SoftSynthesizer#removeReceiver(Receiver)->void::: soft synthesizer remove receiver
com.sun.media.sound.SoftSynthesizer#getMainMixer()->SoftMainMixer::: soft synthesizer get main mixer
com.sun.media.sound.SoftSynthesizer#findInstrument(int, int, int)->SoftInstrument::: soft synthesizer find instrument
com.sun.media.sound.SoftSynthesizer#getVoiceAllocationMode()->int::: soft synthesizer get voice allocation mode
com.sun.media.sound.SoftSynthesizer#getGeneralMidiMode()->int::: soft synthesizer get general midi mode
com.sun.media.sound.SoftSynthesizer#setGeneralMidiMode(int)->void::: soft synthesizer set general midi mode
com.sun.media.sound.SoftSynthesizer#getDeviceID()->int::: soft synthesizer get device d
com.sun.media.sound.SoftSynthesizer#getControlRate()->float::: soft synthesizer get control rate
com.sun.media.sound.SoftSynthesizer#getVoices()->SoftVoice[]::: soft synthesizer get voices
com.sun.media.sound.SoftSynthesizer#getTuning(Patch)->SoftTuning::: soft synthesizer get tuning
com.sun.media.sound.SoftSynthesizer#getLatency()->long::: soft synthesizer get latency
com.sun.media.sound.SoftSynthesizer#getFormat()->AudioFormat::: soft synthesizer get format
com.sun.media.sound.SoftSynthesizer#getMaxPolyphony()->int::: soft synthesizer get max polyphony
com.sun.media.sound.SoftSynthesizer#getChannels()->MidiChannel[]::: soft synthesizer get channels
com.sun.media.sound.SoftSynthesizer#getVoiceStatus()->VoiceStatus[]::: soft synthesizer get voice status
com.sun.media.sound.SoftSynthesizer#isSoundbankSupported(Soundbank)->boolean::: soft synthesizer is soundbank supported
com.sun.media.sound.SoftSynthesizer#loadInstrument(Instrument)->boolean::: soft synthesizer load instrument
com.sun.media.sound.SoftSynthesizer#unloadInstrument(Instrument)->void::: soft synthesizer unload instrument
com.sun.media.sound.SoftSynthesizer#remapInstrument(Instrument, Instrument)->boolean::: soft synthesizer remap instrument
com.sun.media.sound.SoftSynthesizer#getDefaultSoundbank()->Soundbank::: soft synthesizer get default soundbank
com.sun.media.sound.SoftSynthesizer#getAvailableInstruments()->Instrument[]::: soft synthesizer get available instruments
com.sun.media.sound.SoftSynthesizer#getLoadedInstruments()->Instrument[]::: soft synthesizer get loaded instruments
com.sun.media.sound.SoftSynthesizer#loadAllInstruments(Soundbank)->boolean::: soft synthesizer load all instruments
com.sun.media.sound.SoftSynthesizer#unloadAllInstruments(Soundbank)->void::: soft synthesizer unload all instruments
com.sun.media.sound.SoftSynthesizer#loadInstruments(Soundbank, Patch[])->boolean::: soft synthesizer load instruments
com.sun.media.sound.SoftSynthesizer#unloadInstruments(Soundbank, Patch[])->void::: soft synthesizer unload instruments
com.sun.media.sound.SoftSynthesizer#getDeviceInfo()->MidiDevice.Info::: soft synthesizer get device info
com.sun.media.sound.SoftSynthesizer#getPropertyInfo(Map)->AudioSynthesizerPropertyInfo[]::: soft synthesizer get property info
com.sun.media.sound.SoftSynthesizer#open()->void::: soft synthesizer open
com.sun.media.sound.SoftSynthesizer#open(SourceDataLine, Map)->void::: soft synthesizer open
com.sun.media.sound.SoftSynthesizer#openStream(AudioFormat, Map)->AudioInputStream::: soft synthesizer open stream
com.sun.media.sound.SoftSynthesizer#close()->void::: soft synthesizer close
com.sun.media.sound.SoftSynthesizer#isOpen()->boolean::: soft synthesizer is open
com.sun.media.sound.SoftSynthesizer#getMicrosecondPosition()->long::: soft synthesizer get microsecond position
com.sun.media.sound.SoftSynthesizer#getMaxReceivers()->int::: soft synthesizer get max receivers
com.sun.media.sound.SoftSynthesizer#getMaxTransmitters()->int::: soft synthesizer get max transmitters
com.sun.media.sound.SoftSynthesizer#getReceiver()->Receiver::: soft synthesizer get receiver
com.sun.media.sound.SoftSynthesizer#getReceivers()->List::: soft synthesizer get receivers
com.sun.media.sound.SoftSynthesizer#getTransmitter()->Transmitter::: soft synthesizer get transmitter
com.sun.media.sound.SoftSynthesizer#getTransmitters()->List::: soft synthesizer get transmitters
com.sun.media.sound.SoftSynthesizer#getReceiverReferenceCounting()->Receiver::: soft synthesizer get receiver reference counting
com.sun.media.sound.SoftSynthesizer#getTransmitterReferenceCounting()->Transmitter::: soft synthesizer get transmitter reference counting
com.sun.media.sound.SoftTuning#load(byte[])->void::: soft tuning load
com.sun.media.sound.SoftTuning#getTuning()->double[]::: soft tuning get tuning
com.sun.media.sound.SoftTuning#getTuning(int)->double::: soft tuning get tuning
com.sun.media.sound.SoftTuning#getPatch()->Patch::: soft tuning get patch
com.sun.media.sound.SoftTuning#getName()->String::: soft tuning get name
com.sun.media.sound.SoftTuning#setName(String)->void::: soft tuning set name
com.sun.media.sound.SoftVoice#updateTuning(SoftTuning)->void::: soft voice update tuning
com.sun.media.sound.SoftVoice#setNote(int)->void::: soft voice set note
com.sun.media.sound.SoftVoice#noteOn(int, int, int)->void::: soft voice note on
com.sun.media.sound.SoftVoice#setPolyPressure(int)->void::: soft voice set poly pressure
com.sun.media.sound.SoftVoice#setChannelPressure(int)->void::: soft voice set channel pressure
com.sun.media.sound.SoftVoice#controlChange(int, int)->void::: soft voice control change
com.sun.media.sound.SoftVoice#nrpnChange(int, int)->void::: soft voice nrpn change
com.sun.media.sound.SoftVoice#rpnChange(int, int)->void::: soft voice rpn change
com.sun.media.sound.SoftVoice#setPitchBend(int)->void::: soft voice set pitch bend
com.sun.media.sound.SoftVoice#setMute(boolean)->void::: soft voice set mute
com.sun.media.sound.SoftVoice#setSoloMute(boolean)->void::: soft voice set solo mute
com.sun.media.sound.SoftVoice#shutdown()->void::: soft voice shutdown
com.sun.media.sound.SoftVoice#soundOff()->void::: soft voice sound off
com.sun.media.sound.SoftVoice#noteOff(int)->void::: soft voice note off
com.sun.media.sound.SoftVoice#redamp()->void::: soft voice redamp
com.sun.media.sound.SoftVoice#processControlLogic()->void::: soft voice process control logic
com.sun.media.sound.SoftVoice#mixAudioStream(SoftAudioBuffer, SoftAudioBuffer, SoftAudioBuffer, float, float)->void::: soft voice mix audio stream
com.sun.media.sound.SoftVoice#processAudioLogic(SoftAudioBuffer[])->void::: soft voice process audio logic
com.sun.media.sound.StandardFileFormat#getLongFrameLength()->long:::Obtains the length of the audio data contained in the file, expressed in sample frames
com.sun.media.sound.StandardFileFormat#getLongByteLength()->long:::Obtains the size in bytes of the entire audio file (not just its audio data)
com.sun.media.sound.StandardMidiFileReader#getMidiFileFormat(InputStream)->MidiFileFormat::: standard midi file reader get midi file format
com.sun.media.sound.StandardMidiFileReader#getMidiFileFormat(URL)->MidiFileFormat::: standard midi file reader get midi file format
com.sun.media.sound.StandardMidiFileReader#getMidiFileFormat(File)->MidiFileFormat::: standard midi file reader get midi file format
com.sun.media.sound.StandardMidiFileReader#getSequence(InputStream)->Sequence::: standard midi file reader get sequence
com.sun.media.sound.StandardMidiFileReader#getSequence(URL)->Sequence::: standard midi file reader get sequence
com.sun.media.sound.StandardMidiFileReader#getSequence(File)->Sequence::: standard midi file reader get sequence
com.sun.media.sound.SMFParser#nextTrack()->boolean::: parser next track
com.sun.media.sound.SMFParser#readTrack(Track)->void::: parser read track
com.sun.media.sound.StandardMidiFileWriter#getMidiFileTypes()->int[]::: standard midi file writer get midi file types
com.sun.media.sound.StandardMidiFileWriter#getMidiFileTypes(Sequence)->int[]:::Obtains the file types that this provider can write from the sequence specified.
com.sun.media.sound.StandardMidiFileWriter#write(Sequence, int, OutputStream)->int::: standard midi file writer write
com.sun.media.sound.StandardMidiFileWriter#write(Sequence, int, File)->int::: standard midi file writer write
com.sun.media.sound.SunFileReader#getAudioFileFormat(InputStream)->StandardFileFormat::: sun file reader get audio file format
com.sun.media.sound.SunFileReader#getAudioFileFormat(URL)->AudioFileFormat::: sun file reader get audio file format
com.sun.media.sound.SunFileReader#getAudioFileFormat(File)->AudioFileFormat::: sun file reader get audio file format
com.sun.media.sound.SunFileReader#getAudioInputStream(InputStream)->AudioInputStream::: sun file reader get audio input stream
com.sun.media.sound.SunFileReader#getAudioInputStream(URL)->AudioInputStream::: sun file reader get audio input stream
com.sun.media.sound.SunFileReader#getAudioInputStream(File)->AudioInputStream::: sun file reader get audio input stream
com.sun.media.sound.SunFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat:::Obtains the audio file format of the input stream provided
com.sun.media.sound.SunFileReader#rllong(DataInputStream)->int:::rllong Protected helper method to read 64 bits and changing the order of each bytes.
com.sun.media.sound.SunFileReader#big2little(int)->int:::big2little Protected helper method to swap the order of bytes in a 32 bit int
com.sun.media.sound.SunFileReader#rlshort(DataInputStream)->short:::rlshort Protected helper method to read 16 bits value
com.sun.media.sound.SunFileReader#big2littleShort(short)->short:::big2little Protected helper method to swap the order of bytes in a 16 bit short
com.sun.media.sound.SunFileReader#calculatePCMFrameSize(int, int)->int:::Calculates the frame size for PCM frames
com.sun.media.sound.SunFileWriter#getAudioFileTypes()->AudioFileFormat.Type[]::: sun file writer get audio file types
com.sun.media.sound.SunFileWriter#rllong(DataInputStream)->int:::rllong Protected helper method to read 64 bits and changing the order of each bytes.
com.sun.media.sound.SunFileWriter#big2little(int)->int:::big2little Protected helper method to swap the order of bytes in a 32 bit int
com.sun.media.sound.SunFileWriter#rlshort(DataInputStream)->short:::rlshort Protected helper method to read 16 bits value
com.sun.media.sound.SunFileWriter#big2littleShort(short)->short:::big2little Protected helper method to swap the order of bytes in a 16 bit short
com.sun.media.sound.SunFileWriter.NoCloseInputStream#read()->int::: no close input stream read
com.sun.media.sound.SunFileWriter.NoCloseInputStream#read(byte[])->int::: no close input stream read
com.sun.media.sound.SunFileWriter.NoCloseInputStream#read(byte[], int, int)->int::: no close input stream read
com.sun.media.sound.SunFileWriter.NoCloseInputStream#skip(long)->long::: no close input stream skip
com.sun.media.sound.SunFileWriter.NoCloseInputStream#available()->int::: no close input stream available
com.sun.media.sound.SunFileWriter.NoCloseInputStream#close()->void::: no close input stream close
com.sun.media.sound.SunFileWriter.NoCloseInputStream#mark(int)->void::: no close input stream mark
com.sun.media.sound.SunFileWriter.NoCloseInputStream#reset()->void::: no close input stream reset
com.sun.media.sound.SunFileWriter.NoCloseInputStream#markSupported()->boolean::: no close input stream mark supported
com.sun.media.sound.Toolkit#getUnsigned8(byte[], int, int)->void:::Converts bytes from signed to unsigned.
com.sun.media.sound.Toolkit#getByteSwapped(byte[], int, int)->void:::Swaps bytes.
com.sun.media.sound.Toolkit#linearToDB(float)->float:::Linear to DB scale conversion.
com.sun.media.sound.Toolkit#dBToLinear(float)->float:::DB to linear scale conversion.
com.sun.media.sound.Toolkit#align(long, int)->long::: toolkit align
com.sun.media.sound.Toolkit#align(int, int)->int::: toolkit align
com.sun.media.sound.Toolkit#millis2bytes(AudioFormat, long)->long::: toolkit millis2bytes
com.sun.media.sound.Toolkit#bytes2millis(AudioFormat, long)->long::: toolkit bytes2millis
com.sun.media.sound.Toolkit#micros2bytes(AudioFormat, long)->long::: toolkit micros2bytes
com.sun.media.sound.Toolkit#bytes2micros(AudioFormat, long)->long::: toolkit bytes2micros
com.sun.media.sound.Toolkit#micros2frames(AudioFormat, long)->long::: toolkit micros2frames
com.sun.media.sound.Toolkit#frames2micros(AudioFormat, long)->long::: toolkit frames2micros
com.sun.media.sound.Toolkit#validateBuffer(int, int)->void:::Throws an exception if the buffer size does not represent an integral number of sample frames.
com.sun.media.sound.Toolkit#isFullySpecifiedAudioFormat(AudioFormat)->void::: toolkit is fully specified audio format
com.sun.media.sound.Toolkit#isFullySpecifiedPCMFormat(AudioFormat)->boolean::: toolkit is fully specified format
com.sun.media.sound.Toolkit#getPCMConvertedAudioInputStream(AudioInputStream)->AudioInputStream::: toolkit get converted audio input stream
com.sun.media.sound.UlawCodec#getSourceEncodings()->AudioFormat.Encoding[]::: ulaw codec get source encodings
com.sun.media.sound.UlawCodec#getTargetEncodings()->AudioFormat.Encoding[]::: ulaw codec get target encodings
com.sun.media.sound.UlawCodec#getTargetEncodings(AudioFormat)->AudioFormat.Encoding[]::: ulaw codec get target encodings
com.sun.media.sound.UlawCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)->AudioFormat[]::: ulaw codec get target formats
com.sun.media.sound.UlawCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)->AudioInputStream::: ulaw codec get audio input stream
com.sun.media.sound.UlawCodec#getAudioInputStream(AudioFormat, AudioInputStream)->AudioInputStream::: ulaw codec get audio input stream
com.sun.media.sound.WaveExtensibleFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: wave extensible file reader get audio file format impl
com.sun.media.sound.WaveExtensibleFileReader#getAudioInputStream(InputStream)->AudioInputStream::: wave extensible file reader get audio input stream
com.sun.media.sound.WaveFileFormat#getWaveType()->int::: wave file format get wave type
com.sun.media.sound.WaveFileFormat#getHeaderSize()->int::: wave file format get header size
com.sun.media.sound.WaveFileFormat#getHeaderSize(int)->int::: wave file format get header size
com.sun.media.sound.WaveFileFormat#getFmtChunkSize(int)->int::: wave file format get fmt chunk size
com.sun.media.sound.WaveFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: wave file reader get audio file format impl
com.sun.media.sound.WaveFileWriter#getAudioFileTypes(AudioInputStream)->AudioFileFormat.Type[]::: wave file writer get audio file types
com.sun.media.sound.WaveFileWriter#write(AudioInputStream, AudioFileFormat.Type, OutputStream)->int::: wave file writer write
com.sun.media.sound.WaveFileWriter#write(AudioInputStream, AudioFileFormat.Type, File)->int::: wave file writer write
com.sun.media.sound.WaveFloatFileReader#getAudioFileFormatImpl(InputStream)->StandardFileFormat::: wave float file reader get audio file format impl
com.sun.media.sound.WaveFloatFileReader#getAudioInputStream(InputStream)->AudioInputStream::: wave float file reader get audio input stream
com.sun.media.sound.WaveFloatFileWriter#getAudioFileTypes()->Type[]::: wave float file writer get audio file types
com.sun.media.sound.WaveFloatFileWriter#getAudioFileTypes(AudioInputStream)->Type[]::: wave float file writer get audio file types
com.sun.media.sound.WaveFloatFileWriter#write(AudioInputStream, RIFFWriter)->void::: wave float file writer write
com.sun.media.sound.WaveFloatFileWriter#write(AudioInputStream, Type, OutputStream)->int::: wave float file writer write
com.sun.media.sound.WaveFloatFileWriter#write(AudioInputStream, Type, File)->int::: wave float file writer write

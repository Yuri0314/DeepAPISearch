AbstractDataLine#open(AudioFormat, int)::: abstract data line open:::synchronized->if->Printer->getClass->getName->trace->if->isOpen->Toolkit->isFullySpecifiedAudioFormat->if->Printer->debug->mixer->open->try->implOpen->setOpen->catch->mixer->close->throw->finally->else->if->Printer->debug->if->format->getFormat->matches->throw->getFormat->getBufferSize->new->IllegalStateException->if->setBufferSize->if->Printer->trace
AbstractDataLine#open(AudioFormat)::: abstract data line open:::open
AbstractDataLine#available():::This implementation always returns 0.:::return
AbstractDataLine#drain():::This implementation does nothing.:::if->Printer->trace
AbstractDataLine#flush():::This implementation does nothing.:::if->Printer->trace
AbstractDataLine#start()::: abstract data line start:::synchronized->if->Printer->getClass->getName->trace->if->isOpen->if->isStartedRunning->mixer->start->implStart->synchronized->lock->notifyAll->if->Printer->getClass->getName->trace
AbstractDataLine#stop()::: abstract data line stop:::synchronized->if->Printer->getClass->getName->trace->if->isOpen->if->isStartedRunning->implStop->mixer->stop->if->isActive->setStarted->synchronized->lock->notifyAll->if->Printer->getClass->getName->trace
AbstractDataLine#isRunning()::: abstract data line is running:::return
AbstractDataLine#isActive()::: abstract data line is active:::return
AbstractDataLine#getMicrosecondPosition()::: abstract data line get microsecond position:::microseconds->getLongFramePosition->if->Toolkit->getFormat->frames2micros->return
AbstractDataLine#getFormat()::: abstract data line get format:::return
AbstractDataLine#getBufferSize()::: abstract data line get buffer size:::return
AbstractDataLine#setBufferSize(int):::This implementation does NOT change the buffer size:::return->getBufferSize
AbstractDataLine#getLevel():::This implementation returns AudioSystem.NOT_SPECIFIED.:::return
AbstractDataLine#isStartedRunning()::: abstract data line is started running:::return
AbstractDataLine#setActive(boolean):::This method sets the active state and generates events if it changes.:::if->Printer->trace->synchronized->if
AbstractDataLine#setStarted(boolean):::This method sets the started state and generates events if it changes.:::if->Printer->trace->sendEvents->position->getLongFramePosition->synchronized->if->if->if->new->LineEvent->sendEvents->else->new->LineEvent->sendEvents->if->Printer->trace
AbstractDataLine#setEOM():::This method generates a STOP event and sets the started state to false:::if->Printer->trace->setStarted->if->Printer->trace
AbstractDataLine#open():::Try to open the line with the current format and buffer size values:::if->Printer->getClass->getName->trace->open->if->Printer->getClass->getName->trace
AbstractDataLine#close():::This should also stop the line:::synchronized->if->Printer->getClass->getName->trace->if->isOpen->stop->setOpen->implClose->mixer->close->if->Printer->getClass->getName->trace
AbstractDataLine#implOpen(AudioFormat, int)::: abstract data line impl open:::
AbstractDataLine#implClose()::: abstract data line impl close:::
AbstractDataLine#implStart()::: abstract data line impl start:::
AbstractDataLine#implStop()::: abstract data line impl stop:::
AbstractLine#getLineInfo()::: abstract line get line info:::return
AbstractLine#isOpen()::: abstract line is open:::return
AbstractLine#addLineListener(LineListener)::: abstract line add line listener:::synchronized->if->listeners->contains->listeners->addElement
AbstractLine#removeLineListener(LineListener):::Removes an audio listener.:::listeners->removeElement
AbstractLine#getControls():::Obtains the set of controls supported by the line:::returnedArray->new->ControlArr->for->i->return
AbstractLine#isControlSupported(Control.Type)::: abstract line is control supported:::if->return->for->i->return
AbstractLine#getControl(Control.Type)::: abstract line get control:::if->for->i->throw->new->IllegalArgumentException
AbstractLine#setOpen(boolean):::This method sets the open state and generates events if it changes.:::if->Printer->getClass->getName->trace->sendEvents->position->getLongFramePosition->synchronized->if->if->if->new->LineEvent->sendEvents->else->new->LineEvent->sendEvents->if->Printer->getClass->getName->trace
AbstractLine#sendEvents(LineEvent):::Send line events.:::getEventDispatcher->sendAudioEvents
AbstractLine#getFramePosition():::This is an error in the API: getFramePosition should return a long value:::return->getLongFramePosition
AbstractLine#getLongFramePosition():::Return the frame position in a long value This implementation returns AudioSystem.NOT_SPECIFIED.:::return
AbstractLine#getMixer()::: abstract line get mixer:::return
AbstractLine#getEventDispatcher()::: abstract line get event dispatcher:::tg->Thread->currentThread->getThreadGroup->synchronized->eventDispatcher->dispatchers->get->if->new->EventDispatcher->dispatchers->put->eventDispatcher->start->return
AbstractLine#open()::: abstract line open:::
AbstractLine#close()::: abstract line close:::
AbstractMidiDevice#getDeviceInfo()::: abstract midi device get device info:::return
AbstractMidiDevice#open():::Open the device from an application program:::if->Printer->trace->synchronized->doOpen->if->Printer->trace
AbstractMidiDevice#openInternal(Object):::Open the device implicitly:::if->Printer->trace->synchronized->if->getOpenKeepingObjects->add->doOpen->if->Printer->trace
AbstractMidiDevice#doOpen()::: abstract midi device do open:::if->Printer->trace->synchronized->if->isOpen->implOpen->if->Printer->trace
AbstractMidiDevice#close()::: abstract midi device close:::if->Printer->trace->synchronized->doClose->if->Printer->trace
AbstractMidiDevice#closeInternal(Object):::Close the device for an object that implicitely opened it:::if->Printer->trace->synchronized->if->getOpenKeepingObjects->remove->if->if->doClose->if->Printer->trace
AbstractMidiDevice#doClose()::: abstract midi device do close:::if->Printer->trace->synchronized->if->isOpen->implClose->if->Printer->trace
AbstractMidiDevice#isOpen()::: abstract midi device is open:::return
AbstractMidiDevice#implClose()::: abstract midi device impl close:::synchronized->if->for->i->receiverList->size->receiverList->clear->if->transmitterList->close
AbstractMidiDevice#getMicrosecondPosition():::This implementation always returns -1:::return
AbstractMidiDevice#getMaxReceivers():::Return the maximum number of Receivers supported by this device:::if->hasReceivers->return->else->return
AbstractMidiDevice#getMaxTransmitters():::Return the maximum number of Transmitters supported by this device:::if->hasTransmitters->return->else->return
AbstractMidiDevice#getReceiver():::Retrieve a Receiver for this device:::receiver->synchronized->createReceiver->getReceiverList->add->return
AbstractMidiDevice#getReceivers()::: abstract midi device get receivers:::recs->synchronized->if->Collections->new->ArrayList<Receiver>->unmodifiableList->else->Collections->receiverList->clone->unmodifiableList->return
AbstractMidiDevice#getTransmitter():::This implementation uses createTransmitter, which may throw an exception:::transmitter->synchronized->createTransmitter->getTransmitterList->add->return
AbstractMidiDevice#getTransmitters()::: abstract midi device get transmitters:::tras->synchronized->if->size->Collections->new->ArrayList<Transmitter>->unmodifiableList->else->Collections->clone->unmodifiableList->return
AbstractMidiDevice#getId()::: abstract midi device get id:::return
AbstractMidiDevice#getReceiverReferenceCounting():::Retrieve a Receiver and open the device implicitly:::receiver->synchronized->getReceiver->AbstractMidiDevice.this->openInternal->return
AbstractMidiDevice#getTransmitterReferenceCounting():::Retrieve a Transmitter and open the device implicitly:::transmitter->synchronized->getTransmitter->AbstractMidiDevice.this->openInternal->return
AbstractMidiDevice#getOpenKeepingObjects():::Return the list of objects that have opened the device implicitely.:::if->new->ArrayList<>->return
AbstractMidiDevice#getReceiverList():::Return the internal list of Receivers, possibly creating it first.:::synchronized->if->new->ArrayList<>->return
AbstractMidiDevice#hasReceivers():::Returns if this device supports Receivers:::return
AbstractMidiDevice#createReceiver():::Create a Receiver object:::throw->new->MidiUnavailableException
AbstractMidiDevice#getTransmitterList():::Return the internal list of Transmitters, possibly creating it first.:::synchronized->if->new->TransmitterList->return
AbstractMidiDevice#hasTransmitters():::Returns if this device supports Transmitters:::return
AbstractMidiDevice#createTransmitter():::Create a Transmitter object:::throw->new->MidiUnavailableException
AbstractMidiDevice#implOpen()::: abstract midi device impl open:::
AbstractMidiDevice#finalize():::close this device if discarded by the garbage collector.:::close
AbstractMidiDevice.AbstractReceiver#send(MidiMessage, long):::Deliver a MidiMessage:::if->throw->new->IllegalStateException->implSend
AbstractMidiDevice.AbstractReceiver#implSend(MidiMessage, long)::: abstract receiver impl send:::
AbstractMidiDevice.AbstractReceiver#close():::Close the Receiver:::synchronized->AbstractMidiDevice.this->getReceiverList->remove->AbstractMidiDevice.this->closeInternal
AbstractMidiDevice.AbstractReceiver#getMidiDevice()::: abstract receiver get midi device:::return
AbstractMidiDevice.AbstractReceiver#isOpen()::: abstract receiver is open:::return
AbstractMidiDevice.BasicTransmitter#setTransmitterList(TransmitterList)::: basic transmitter set transmitter list:::
AbstractMidiDevice.BasicTransmitter#setReceiver(Receiver)::: basic transmitter set receiver:::if->if->Printer->toString->debug->tlist->receiverChanged
AbstractMidiDevice.BasicTransmitter#getReceiver()::: basic transmitter get receiver:::return
AbstractMidiDevice.BasicTransmitter#close():::Close the Transmitter:::AbstractMidiDevice.this->closeInternal->if->tlist->receiverChanged->tlist->remove
AbstractMidiDevice.BasicTransmitter#getMidiDevice()::: basic transmitter get midi device:::return
AbstractMidiDevice.TransmitterList#add(Transmitter)::: transmitter list add:::synchronized->transmitters->add->if->setTransmitterList->if->Printer->debug
AbstractMidiDevice.TransmitterList#remove(Transmitter)::: transmitter list remove:::synchronized->index->transmitters->indexOf->if->transmitters->remove->if->Printer->debug
AbstractMidiDevice.TransmitterList#receiverChanged(BasicTransmitter, Receiver, Receiver)::: transmitter list receiver changed:::synchronized->if->if->if
AbstractMidiDevice.TransmitterList#close():::closes all transmitters and empties the list:::synchronized->for->i->transmitters->size->transmitters->clear->if->Printer->trace
AbstractMidiDevice.TransmitterList#sendMessage(int, long):::Send this message to all receivers status = packedMessage & 0xFF data1 = (packedMessage & 0xFF00) >> 8; data1 = (packedMessage & 0xFF0000) >> 16;:::try->synchronized->size->transmitters->size->if->if->if->Printer->println->midiOutReceiver->sendPackedMidiMessage->else->if->Printer->println->for->i->catch->finally
AbstractMidiDevice.TransmitterList#sendMessage(byte[], long)::: transmitter list send message:::try->synchronized->size->transmitters->size->if->Printer->println->for->i->catch->return->finally
AbstractMidiDevice.TransmitterList#sendMessage(MidiMessage, long):::Send this message to all transmitters.:::if->getPackedMsg->sendMessage->return->synchronized->size->transmitters->size->if->if->if->Printer->println->midiOutReceiver->send->else->if->Printer->println->for->i
AbstractMidiDeviceProvider#readDeviceInfos()::: abstract midi device provider read device infos:::infos->getInfoCache->devices->getDeviceCache->if->if->new->InfoArr->setInfoCache->if->new->MidiDeviceArr->setDeviceCache->return->oldNumDevices->newNumDevices->getNumDevices->if->if->Printer->getClass->toString->trace->newInfos->new->InfoArr->newDevices->new->MidiDeviceArr->for->i->if->for->i->setInfoCache->setDeviceCache
AbstractMidiDeviceProvider#getDeviceInfo()::: abstract midi device provider get device info:::readDeviceInfos->infos->getInfoCache->localArray->new->MidiDevice.InfoArr->System->arraycopy->return
AbstractMidiDeviceProvider#getDevice(MidiDevice.Info)::: abstract midi device provider get device:::Objects->requireNonNull->if->readDeviceInfos->devices->getDeviceCache->infos->getInfoCache->thisInfo->index->thisInfo->getIndex->if->if->createDevice->if->return->throw->MidiUtils->unsupportedDevice
AbstractMidiDeviceProvider.Info#equalStrings(Info)::: info equal strings:::return->getName->info->getName->equals->getVendor->info->getVendor->equals->getDescription->info->getDescription->equals->getVersion->info->getVersion->equals
AbstractMidiDeviceProvider.Info#getIndex()::: info get index:::return
AbstractMidiDeviceProvider.Info#setIndex(int)::: info set index:::
AbstractMidiDeviceProvider#getNumDevices()::: abstract midi device provider get num devices:::
AbstractMidiDeviceProvider#getDeviceCache()::: abstract midi device provider get device cache:::
AbstractMidiDeviceProvider#setDeviceCache(MidiDevice[])::: abstract midi device provider set device cache:::
AbstractMidiDeviceProvider#getInfoCache()::: abstract midi device provider get info cache:::
AbstractMidiDeviceProvider#setInfoCache(Info[])::: abstract midi device provider set info cache:::
AbstractMidiDeviceProvider#createInfo(int)::: abstract midi device provider create info:::
AbstractMidiDeviceProvider#createDevice(Info)::: abstract midi device provider create device:::
AbstractMixer#getMixerInfo()::: abstract mixer get mixer info:::return
AbstractMixer#getSourceLineInfo()::: abstract mixer get source line info:::localArray->new->Line.InfoArr->System->arraycopy->return
AbstractMixer#getTargetLineInfo()::: abstract mixer get target line info:::localArray->new->Line.InfoArr->System->arraycopy->return
AbstractMixer#getSourceLineInfo(Line.Info)::: abstract mixer get source line info:::i->vec->new->Vector<>->for->returnedArray->vec->size->new->Line.InfoArr->for->return
AbstractMixer#getTargetLineInfo(Line.Info)::: abstract mixer get target line info:::i->vec->new->Vector<>->for->returnedArray->vec->size->new->Line.InfoArr->for->return
AbstractMixer#isLineSupported(Line.Info)::: abstract mixer is line supported:::i->for->for->return
AbstractMixer#getLine(Line.Info)::: abstract mixer get line:::
AbstractMixer#getMaxLines(Line.Info)::: abstract mixer get max lines:::
AbstractMixer#implOpen()::: abstract mixer impl open:::
AbstractMixer#implStart()::: abstract mixer impl start:::
AbstractMixer#implStop()::: abstract mixer impl stop:::
AbstractMixer#implClose()::: abstract mixer impl close:::
AbstractMixer#getSourceLines()::: abstract mixer get source lines:::localLines->synchronized->sourceLines->size->new->LineArr->for->i->return
AbstractMixer#getTargetLines()::: abstract mixer get target lines:::localLines->synchronized->targetLines->size->new->LineArr->for->i->return
AbstractMixer#synchronize(Line[], boolean):::Default implementation always throws an exception.:::throw->new->IllegalArgumentException
AbstractMixer#unsynchronize(Line[]):::Default implementation always throws an exception.:::throw->new->IllegalArgumentException
AbstractMixer#isSynchronizationSupported(Line[], boolean):::Default implementation always returns false.:::return
AbstractMixer#open():::This implementation tries to open the mixer with its current format and buffer size settings.:::open
AbstractMixer#open(boolean):::This implementation tries to open the mixer with its current format and buffer size settings.:::if->Printer->trace->if->isOpen->implOpen->setOpen->if->if->Printer->trace
AbstractMixer#open(Line):::The default implementation of this method just determines whether this line is a source or target line, calls open(no-arg) on the mixer, and adds the line to the appropriate vector:::if->Printer->trace->if->this->equals->if->Printer->trace->return->if->line->getLineInfo->isSourceLine->if->sourceLines->contains->open->sourceLines->addElement->else->if->line->getLineInfo->isTargetLine->if->targetLines->contains->open->targetLines->addElement->else->if->Printer->err->if->Printer->trace
AbstractMixer#close(Line):::Removes this line from the list of open source lines and open target lines, if it exists in either:::if->Printer->trace->if->this->equals->if->Printer->trace->return->sourceLines->removeElement->targetLines->removeElement->if->Printer->sourceLines->size->debug->if->Printer->targetLines->size->debug->if->sourceLines->isEmpty->targetLines->isEmpty->if->Printer->trace->close->if->Printer->trace
AbstractMixer#close():::Close all lines and then close this mixer.:::if->Printer->trace->if->isOpen->localLines->getSourceLines->for->i->getTargetLines->for->i->implClose->setOpen->if->Printer->trace
AbstractMixer#start(Line):::Starts the mixer.:::if->Printer->trace->if->this->equals->if->Printer->trace->return->if->if->Printer->debug->implStart->if->Printer->trace
AbstractMixer#stop(Line):::Stops the mixer if this was the last running line.:::if->Printer->trace->if->this->equals->if->Printer->trace->return->localSourceLines->sourceLines->clone->for->i->localSourceLines->size->localTargetLines->targetLines->clone->for->i->localTargetLines->size->if->Printer->debug->implStop->if->Printer->trace
AbstractMixer#isSourceLine(Line.Info):::Determines whether this is a source line for this mixer:::for->i->return
AbstractMixer#isTargetLine(Line.Info):::Determines whether this is a target line for this mixer:::for->i->return
AbstractMixer#getLineInfo(Line.Info):::Returns the first complete Line.Info object it finds that matches the one specified, or null if no matching Line.Info object is found.:::if->return->for->i->for->i->return
AiffFileFormat#getHeaderSize()::: aiff file format get header size:::return
AiffFileFormat#getCommChunkSize()::: aiff file format get comm chunk size:::return
AiffFileFormat#getFverChunkSize()::: aiff file format get fver chunk size:::return
AiffFileFormat#getSsndChunkOffset()::: aiff file format get ssnd chunk offset:::return->getHeaderSize
AiffFileReader#getAudioFileFormatImpl(InputStream)::: aiff file reader get audio file format impl:::dis->new->DataInputStream->format->magic->dis->readInt->if->throw->new->UnsupportedAudioFileException->frameLength->length->dis->readInt->iffType->dis->readInt->totallength->if->else->aifc->if->ssndFound->while->chunkName->dis->readInt->chunkLen->dis->readInt->chunkRead->switch->break->if->throw->new->UnsupportedAudioFileException->channels->dis->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->dis->readInt->sampleSizeInBits->dis->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->sampleRate->read_ieee_extended->encoding->if->enc->dis->readInt->switch->break->break->throw->new->UnsupportedAudioFileException->frameSize->calculatePCMFrameSize->new->AudioFormat->break->dataOffset->dis->readInt->blocksize->dis->readInt->break->if->toSkip->if->dis->skipBytes->if->throw->new->UnsupportedAudioFileException->type->return->new->AiffFileFormat
AiffFileReader#read_ieee_extended(DataInputStream):::read_ieee_extended Extended precision IEEE floating-point conversion routine.:::f->expon->hiMant->loMant->t1->t2->HUGE->dis->readUnsignedShort->dis->readUnsignedShort->dis->readUnsignedShort->dis->readUnsignedShort->dis->readUnsignedShort->if->else->if->else->Math->pow->Math->pow->return
AiffFileWriter#getAudioFileTypes(AudioInputStream)::: aiff file writer get audio file types:::filetypes->new->AudioFileFormat.TypeArr->System->arraycopy->format->stream->getFormat->encoding->format->getEncoding->if->equals->equals->equals->equals->return->return->new->AudioFileFormat.TypeArr
AiffFileWriter#write(AudioInputStream, AudioFileFormat.Type, OutputStream)::: aiff file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->aiffFileFormat->getAudioFileFormat->if->stream->getFrameLength->throw->new->IOException->return->writeAiffFile
AiffFileWriter#write(AudioInputStream, AudioFileFormat.Type, File)::: aiff file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->aiffFileFormat->getAudioFileFormat->bytesWritten->try->fos->new->FileOutputStream->bos->new->BufferedOutputStream->writeAiffFile->catch->finally->if->aiffFileFormat->getByteLength->channels->aiffFileFormat->getFormat->getChannels->sampleSize->aiffFileFormat->getFormat->getSampleSizeInBits->ssndBlockSize->aiffLength->ssndChunkSize->aiffFileFormat->getHeaderSize->dataSize->numFrames->try->raf->new->RandomAccessFile->raf->skipBytes->raf->writeInt->raf->aiffFileFormat->getFverChunkSize->skipBytes->raf->writeInt->raf->skipBytes->raf->writeInt->catch->finally->return
AiffFileWriter#getAudioFileFormat(AudioFileFormat.Type, AudioInputStream):::Returns the AudioFileFormat describing the file that will be written from this AudioInputStream:::if->isFileTypeSupported->throw->new->IllegalArgumentException->format->fileFormat->encoding->streamFormat->stream->getFormat->streamEncoding->streamFormat->getEncoding->sampleSizeInBits->fileSize->convert8to16->if->equals->equals->if->streamFormat->getSampleSizeInBits->else->throw->new->IllegalArgumentException->else->if->streamFormat->getSampleSizeInBits->else->streamFormat->getSampleSizeInBits->streamFormat->getSampleRate->streamFormat->getChannels->streamFormat->getFrameSize->streamFormat->getFrameRate->new->AudioFormat->if->stream->getFrameLength->if->stream->getFrameLength->streamFormat->getFrameSize->else->stream->getFrameLength->streamFormat->getFrameSize->else->stream->getFrameLength->new->AiffFileFormat->return
AiffFileWriter#writeAiffFile(InputStream, AiffFileFormat, OutputStream)::: aiff file writer write aiff file:::bytesRead->bytesWritten->fileStream->getFileStream->buffer->new->byteArr->maxLength->aiffFileFormat->getByteLength->while->fileStream->read->if->if->out->write->else->out->write->break->else->out->write->return
AiffFileWriter#getFileStream(AiffFileFormat, InputStream)::: aiff file writer get file stream:::format->aiffFileFormat->getFormat->streamFormat->encoding->headerSize->aiffFileFormat->getHeaderSize->fverChunkSize->aiffFileFormat->getFverChunkSize->commChunkSize->aiffFileFormat->getCommChunkSize->aiffLength->ssndChunkSize->ssndOffset->aiffFileFormat->getSsndChunkOffset->channels->format->getChannels->sampleSize->format->getSampleSizeInBits->ssndBlockSize->numFrames->aiffFileFormat->getFrameLength->dataSize->if->sampleFramesPerSecond->format->getSampleRate->compCode->header->codedAudioStream->if->getFormat->streamFormat->getEncoding->if->equals->equals->streamFormat->isBigEndian->AudioSystem->streamFormat->getSampleRate->streamFormat->getSampleSizeInBits->streamFormat->getChannels->streamFormat->getFrameSize->streamFormat->getFrameRate->new->AudioFormat->getAudioInputStream->else->if->equals->equals->if->streamFormat->getSampleSizeInBits->throw->new->IllegalArgumentException->AudioSystem->streamFormat->getSampleRate->streamFormat->getSampleSizeInBits->streamFormat->getChannels->streamFormat->getFrameSize->streamFormat->getFrameRate->new->AudioFormat->getAudioInputStream->try->baos->new->ByteArrayOutputStream->dos->new->DataOutputStream->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeShort->dos->writeInt->dos->writeShort->write_ieee_extended->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->baos->toByteArray->catch->finally->return->new->ByteArrayInputStream->new->NoCloseInputStream->new->SequenceInputStream
AiffFileWriter#write_ieee_extended(DataOutputStream, float):::Extended precision IEEE floating-point conversion routine.:::doubleBits->Double->doubleToLongBits->sign->doubleExponent->doubleMantissa->extendedExponent->extendedMantissa->extendedSign->extendedBits79To64->extendedBits63To0->dos->writeShort->dos->writeLong
AlawCodec#getSourceEncodings()::: alaw codec get source encodings:::return->new->EncodingArr
AlawCodec#getTargetEncodings()::: alaw codec get target encodings:::return->getSourceEncodings
AlawCodec#getTargetEncodings(AudioFormat)::: alaw codec get target encodings:::if->sourceFormat->getEncoding->equals->if->sourceFormat->getSampleSizeInBits->enc->new->AudioFormat.EncodingArr->return->else->return->new->AudioFormat.EncodingArr->else->if->sourceFormat->getEncoding->equals->if->sourceFormat->getSampleSizeInBits->enc->new->AudioFormat.EncodingArr->return->else->return->new->AudioFormat.EncodingArr->else->return->new->AudioFormat.EncodingArr
AlawCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)::: alaw codec get target formats:::Objects->requireNonNull->if->targetEncoding->equals->sourceFormat->getEncoding->equals->targetEncoding->equals->sourceFormat->getEncoding->equals->return->getOutputFormats->else->return->new->AudioFormatArr
AlawCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)::: alaw codec get audio input stream:::sourceFormat->sourceStream->getFormat->sourceEncoding->sourceFormat->getEncoding->if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException->if->sourceEncoding->equals->return->targetFormat->if->sourceEncoding->equals->targetEncoding->equals->sourceFormat->getSampleRate->sourceFormat->getChannels->sourceFormat->getChannels->sourceFormat->getSampleRate->sourceFormat->isBigEndian->new->AudioFormat->else->if->sourceEncoding->equals->targetEncoding->equals->sourceFormat->getSampleRate->sourceFormat->getChannels->sourceFormat->getChannels->sourceFormat->getSampleRate->new->AudioFormat->else->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException->return->getConvertedStream
AlawCodec#getAudioInputStream(AudioFormat, AudioInputStream)::: alaw codec get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetFormat->toString->new->IllegalArgumentException->return->getConvertedStream
AlawCodec#getConvertedStream(AudioFormat, AudioInputStream):::Opens the codec with the specified parameters.:::cs->inputFormat->stream->getFormat->if->inputFormat->matches->else->new->AlawCodecStream->return
AlawCodec#getOutputFormats(AudioFormat):::Obtains the set of output formats supported by the codec given a particular input format:::formats->new->Vector<>->format->if->inputFormat->getSampleSizeInBits->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->if->inputFormat->getSampleSizeInBits->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->formatArray->formats->size->new->AudioFormatArr->for->i->return
AlawCodec.AlawCodecStream#search(short, short[], short)::: alaw codec stream search:::for->i->return
AlawCodec.AlawCodecStream#read():::Note that this won't actually read anything; must read in two-byte units.:::b->new->byteArr->return->read
AlawCodec.AlawCodecStream#read(byte[])::: alaw codec stream read:::return->read
AlawCodec.AlawCodecStream#read(byte[], int, int)::: alaw codec stream read:::if->if->QUANT_MASK->SEG_SHIFT->mask->seg->adj->i->sample->enc->readCount->currentPos->readLeft->readLen->while->super->read->for->if->return->return->else->i->readLen->readOffset->readCount->super->read->for->if->return->return
AlawCodec.AlawCodecStream#skip(long)::: alaw codec stream skip:::return->super->skip->super->skip
AudioFileSoundbankReader#getSoundbank(URL)::: audio file soundbank reader get soundbank:::try->ais->AudioSystem->getAudioInputStream->sbk->getSoundbank->ais->close->return->catch->return->return->finally
AudioFileSoundbankReader#getSoundbank(InputStream)::: audio file soundbank reader get soundbank:::stream->mark->try->ais->AudioSystem->getAudioInputStream->sbk->getSoundbank->if->return->catch->finally->stream->reset->return
AudioFileSoundbankReader#getSoundbank(AudioInputStream)::: audio file soundbank reader get soundbank:::try->buffer->if->ais->getFrameLength->baos->new->ByteArrayOutputStream->buff->ais->getFormat->getFrameSize->new->byteArr->ret->while->ais->read->baos->write->ais->close->baos->toByteArray->else->ais->getFrameLength->ais->getFormat->getFrameSize->new->byteArr->new->DataInputStream->readFully->osc->new->ModelByteBuffer->ais->getFormat->new->ModelByteBufferWavetable->performer->new->ModelPerformer->performer->getOscillators->add->sbk->new->SimpleSoundbank->ins->new->SimpleInstrument->ins->add->sbk->addInstrument->return->catch->return->finally
AudioFileSoundbankReader#getSoundbank(File)::: audio file soundbank reader get soundbank:::try->ais->AudioSystem->getAudioInputStream->ais->close->osc->file->length->new->ModelByteBuffer->new->ModelByteBufferWavetable->performer->new->ModelPerformer->performer->getOscillators->add->sbk->new->SimpleSoundbank->ins->new->SimpleInstrument->ins->add->sbk->addInstrument->return->catch->return->return->finally
AudioFloatConverter.AudioFloatLSBFilter#toByteArray(float[], int, int, byte[], int)::: audio float filter to byte array:::ret->converter->toByteArray->out_offset_end->for->i->return
AudioFloatConverter.AudioFloatLSBFilter#toFloatArray(byte[], int, float[], int, int)::: audio float filter to float array:::if->new->byteArr->System->arraycopy->in_offset_end->for->i->ret->converter->toFloatArray->return
AudioFloatConverter.AudioFloatConversion64L#toFloatArray(byte[], int, float[], int, int)::: audio float conversion64 l to float array:::in_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asDoubleBuffer->bytebuffer->position->floatbuffer->position->bytebuffer->put->if->new->doubleArr->floatbuffer->get->out_offset_end->for->i->return
AudioFloatConverter.AudioFloatConversion64L#toByteArray(float[], int, int, byte[], int)::: audio float conversion64 l to byte array:::out_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asDoubleBuffer->floatbuffer->position->bytebuffer->position->if->new->doubleArr->in_offset_end->for->i->floatbuffer->put->bytebuffer->get->return
AudioFloatConverter.AudioFloatConversion64B#toFloatArray(byte[], int, float[], int, int)::: audio float conversion64 b to float array:::in_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asDoubleBuffer->bytebuffer->position->floatbuffer->position->bytebuffer->put->if->new->doubleArr->floatbuffer->get->out_offset_end->for->i->return
AudioFloatConverter.AudioFloatConversion64B#toByteArray(float[], int, int, byte[], int)::: audio float conversion64 b to byte array:::out_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asDoubleBuffer->floatbuffer->position->bytebuffer->position->if->new->doubleArr->in_offset_end->for->i->floatbuffer->put->bytebuffer->get->return
AudioFloatConverter.AudioFloatConversion32L#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 l to float array:::in_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asFloatBuffer->bytebuffer->position->floatbuffer->position->bytebuffer->put->floatbuffer->get->return
AudioFloatConverter.AudioFloatConversion32L#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 l to byte array:::out_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asFloatBuffer->floatbuffer->position->bytebuffer->position->floatbuffer->put->bytebuffer->get->return
AudioFloatConverter.AudioFloatConversion32B#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 b to float array:::in_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asFloatBuffer->bytebuffer->position->floatbuffer->position->bytebuffer->put->floatbuffer->get->return
AudioFloatConverter.AudioFloatConversion32B#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 b to byte array:::out_len->if->bytebuffer->capacity->ByteBuffer->allocate->order->bytebuffer->asFloatBuffer->floatbuffer->position->bytebuffer->position->floatbuffer->put->bytebuffer->get->return
AudioFloatConverter.AudioFloatConversion8S#toFloatArray(byte[], int, float[], int, int)::: audio float conversion8 s to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion8S#toByteArray(float[], int, int, byte[], int)::: audio float conversion8 s to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion8U#toFloatArray(byte[], int, float[], int, int)::: audio float conversion8 u to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion8U#toByteArray(float[], int, int, byte[], int)::: audio float conversion8 u to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16SL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion16 l to float array:::ix->len->for->ox->return
AudioFloatConverter.AudioFloatConversion16SL#toByteArray(float[], int, int, byte[], int)::: audio float conversion16 l to byte array:::ox->len->for->ix->return
AudioFloatConverter.AudioFloatConversion16SB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion16 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16SB#toByteArray(float[], int, int, byte[], int)::: audio float conversion16 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16UL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion16 l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16UL#toByteArray(float[], int, int, byte[], int)::: audio float conversion16 l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16UB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion16 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion16UB#toByteArray(float[], int, int, byte[], int)::: audio float conversion16 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24SL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion24 l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24SL#toByteArray(float[], int, int, byte[], int)::: audio float conversion24 l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24SB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion24 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24SB#toByteArray(float[], int, int, byte[], int)::: audio float conversion24 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24UL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion24 l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24UL#toByteArray(float[], int, int, byte[], int)::: audio float conversion24 l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24UB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion24 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion24UB#toByteArray(float[], int, int, byte[], int)::: audio float conversion24 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32SL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32SL#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32SB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32SB#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32UL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32UL#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32UB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32 b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32UB#toByteArray(float[], int, int, byte[], int)::: audio float conversion32 b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xSL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32x l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xSL#toByteArray(float[], int, int, byte[], int)::: audio float conversion32x l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xSB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32x b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xSB#toByteArray(float[], int, int, byte[], int)::: audio float conversion32x b to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xUL#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32x l to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xUL#toByteArray(float[], int, int, byte[], int)::: audio float conversion32x l to byte array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xUB#toFloatArray(byte[], int, float[], int, int)::: audio float conversion32x b to float array:::ix->ox->for->i->return
AudioFloatConverter.AudioFloatConversion32xUB#toByteArray(float[], int, int, byte[], int)::: audio float conversion32x b to byte array:::ix->ox->for->i->return
AudioFloatConverter#getConverter(AudioFormat)::: audio float converter get converter:::conv->if->format->getFrameSize->return->if->format->getFrameSize->format->getSampleSizeInBits->format->getChannels->return->if->format->getEncoding->equals->if->format->isBigEndian->if->format->getSampleSizeInBits->new->AudioFloatConversion8S->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion16SB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion24SB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32SB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32xSB->else->if->format->getSampleSizeInBits->new->AudioFloatConversion8S->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion16SL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion24SL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32SL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32xSL->else->if->format->getEncoding->equals->if->format->isBigEndian->if->format->getSampleSizeInBits->new->AudioFloatConversion8U->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion16UB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion24UB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32UB->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32xUB->else->if->format->getSampleSizeInBits->new->AudioFloatConversion8U->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion16UL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion24UL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32UL->else->if->format->getSampleSizeInBits->format->getSampleSizeInBits->new->AudioFloatConversion32xUL->else->if->format->getEncoding->equals->if->format->getSampleSizeInBits->if->format->isBigEndian->new->AudioFloatConversion32B->else->new->AudioFloatConversion32L->else->if->format->getSampleSizeInBits->if->format->isBigEndian->new->AudioFloatConversion64B->else->new->AudioFloatConversion64L->if->format->getEncoding->equals->format->getEncoding->equals->format->getSampleSizeInBits->new->AudioFloatLSBFilter->if->return
AudioFloatConverter#getFormat()::: audio float converter get format:::return
AudioFloatConverter#toFloatArray(byte[], int, float[], int, int)::: audio float converter to float array:::
AudioFloatConverter#toFloatArray(byte[], float[], int, int)::: audio float converter to float array:::return->toFloatArray
AudioFloatConverter#toFloatArray(byte[], int, float[], int)::: audio float converter to float array:::return->toFloatArray
AudioFloatConverter#toFloatArray(byte[], float[], int)::: audio float converter to float array:::return->toFloatArray
AudioFloatConverter#toFloatArray(byte[], float[])::: audio float converter to float array:::return->toFloatArray
AudioFloatConverter#toByteArray(float[], int, int, byte[], int)::: audio float converter to byte array:::
AudioFloatConverter#toByteArray(float[], int, byte[], int)::: audio float converter to byte array:::return->toByteArray
AudioFloatConverter#toByteArray(float[], int, int, byte[])::: audio float converter to byte array:::return->toByteArray
AudioFloatConverter#toByteArray(float[], int, byte[])::: audio float converter to byte array:::return->toByteArray
AudioFloatConverter#toByteArray(float[], byte[])::: audio float converter to byte array:::return->toByteArray
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#read()::: audio float format converter input stream read:::b->new->byteArr->ret->read->if->return->return
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#read(byte[], int, int)::: audio float format converter input stream read:::flen->if->new->floatArr->ret->stream->read->if->return->converter->toByteArray->return
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#available()::: audio float format converter input stream available:::ret->stream->available->if->return->return
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#close()::: audio float format converter input stream close:::stream->close
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#mark(int)::: audio float format converter input stream mark:::stream->mark
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#markSupported()::: audio float format converter input stream mark supported:::return->stream->markSupported
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#reset()::: audio float format converter input stream reset:::stream->reset
AudioFloatFormatConverter.AudioFloatFormatConverterInputStream#skip(long)::: audio float format converter input stream skip:::ret->stream->skip->if->return->return
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#available()::: audio float input stream channel mixer available:::return->ais->available
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#close()::: audio float input stream channel mixer close:::ais->close
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#getFormat()::: audio float input stream channel mixer get format:::return
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#getFrameLength()::: audio float input stream channel mixer get frame length:::return->ais->getFrameLength
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#mark(int)::: audio float input stream channel mixer mark:::ais->mark
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#markSupported()::: audio float input stream channel mixer mark supported:::return->ais->markSupported
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#read(float[], int, int)::: audio float input stream channel mixer read:::len2->if->new->floatArr->ret->ais->read->if->return->if->cs->for->c->else->if->cs->for->i->ix->for->c->vol->for->i->ix->else->minChannels->Math->min->off_len->ct->cs->for->c->for->c->return
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#reset()::: audio float input stream channel mixer reset:::ais->reset
AudioFloatFormatConverter.AudioFloatInputStreamChannelMixer#skip(long)::: audio float input stream channel mixer skip:::ret->ais->skip->if->return->return
AudioFloatFormatConverter.AudioFloatInputStreamResampler#available()::: audio float input stream resampler available:::return
AudioFloatFormatConverter.AudioFloatInputStreamResampler#close()::: audio float input stream resampler close:::ais->close
AudioFloatFormatConverter.AudioFloatInputStreamResampler#getFormat()::: audio float input stream resampler get format:::return
AudioFloatFormatConverter.AudioFloatInputStreamResampler#getFrameLength()::: audio float input stream resampler get frame length:::return
AudioFloatFormatConverter.AudioFloatInputStreamResampler#mark(int)::: audio float input stream resampler mark:::ais->mark->if->new->floatArrs->for->c
AudioFloatFormatConverter.AudioFloatInputStreamResampler#markSupported()::: audio float input stream resampler mark supported:::return->ais->markSupported
AudioFloatFormatConverter.AudioFloatInputStreamResampler#readNextBuffer()::: audio float input stream resampler read next buffer:::if->return->for->c->ais->read->if->while->ret->ais->read->if->break->Arrays->fill->else->Arrays->fill->ibuffer2_len->for->c
AudioFloatFormatConverter.AudioFloatInputStreamResampler#read(float[], int, int)::: audio float input stream resampler read:::if->new->floatArrs->if->return->if->return->offlen->remain->destPos->in_end->while->if->if->readNextBuffer->if->if->break->if->break->preDestPos->for->c->for->c->return
AudioFloatFormatConverter.AudioFloatInputStreamResampler#reset()::: audio float input stream resampler reset:::ais->reset->if->return->for->c
AudioFloatFormatConverter.AudioFloatInputStreamResampler#skip(long)::: audio float input stream resampler skip:::if->return->if->targetFormat->getFrameSize->new->floatArr->l_skipbuffer->remain->while->ret->Math->min->read->if->if->return->break->return
AudioFloatFormatConverter#getAudioInputStream(Encoding, AudioInputStream)::: audio float format converter get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException->if->sourceStream->getFormat->getEncoding->equals->return->format->sourceStream->getFormat->channels->format->getChannels->encoding->samplerate->format->getSampleRate->bits->format->getSampleSizeInBits->bigendian->format->isBigEndian->if->targetEncoding->equals->targetFormat->new->AudioFormat->return->getAudioInputStream
AudioFloatFormatConverter#getAudioInputStream(AudioFormat, AudioInputStream)::: audio float format converter get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetFormat->toString->new->IllegalArgumentException->return->AudioFloatInputStream->getInputStream->getAudioInputStream
AudioFloatFormatConverter#getAudioInputStream(AudioFormat, AudioFloatInputStream)::: audio float format converter get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetFormat->toString->new->IllegalArgumentException->if->targetFormat->getChannels->sourceStream->getFormat->getChannels->targetFormat->getChannels->new->AudioFloatInputStreamChannelMixer->if->Math->targetFormat->getSampleRate->sourceStream->getFormat->getSampleRate->abs->new->AudioFloatInputStreamResampler->return->new->AudioFloatFormatConverterInputStream->sourceStream->getFrameLength->new->AudioInputStream
AudioFloatFormatConverter#getSourceEncodings()::: audio float format converter get source encodings:::return->new->EncodingArr
AudioFloatFormatConverter#getTargetEncodings()::: audio float format converter get target encodings:::return->getSourceEncodings
AudioFloatFormatConverter#getTargetEncodings(AudioFormat)::: audio float format converter get target encodings:::if->AudioFloatConverter->getConverter->return->new->EncodingArr->return->new->EncodingArr
AudioFloatFormatConverter#getTargetFormats(Encoding, AudioFormat)::: audio float format converter get target formats:::Objects->requireNonNull->if->AudioFloatConverter->getConverter->return->new->AudioFormatArr->channels->sourceFormat->getChannels->formats->new->ArrayList<>->if->targetEncoding->equals->formats->new->AudioFormat->add->if->targetEncoding->equals->formats->new->AudioFormat->add->for->bits->if->targetEncoding->equals->formats->new->AudioFormat->add->formats->new->AudioFormat->add->formats->new->AudioFormat->add->formats->new->AudioFormat->add->return->formats->formats->size->new->AudioFormatArr->toArray
AudioFloatFormatConverter#isConversionSupported(AudioFormat, AudioFormat)::: audio float format converter is conversion supported:::Objects->requireNonNull->if->AudioFloatConverter->getConverter->return->if->AudioFloatConverter->getConverter->return->if->sourceFormat->getChannels->return->if->targetFormat->getChannels->return->return
AudioFloatFormatConverter#isConversionSupported(Encoding, AudioFormat)::: audio float format converter is conversion supported:::Objects->requireNonNull->if->AudioFloatConverter->getConverter->return->for->i->return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#getFormat()::: byta array audio float input stream get format:::return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#getFrameLength()::: byta array audio float input stream get frame length:::return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#read(float[], int, int)::: byta array audio float input stream read:::if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->if->return->if->return->if->converter->toFloatArray->return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#skip(long)::: byta array audio float input stream skip:::if->return->if->return->if->return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#available()::: byta array audio float input stream available:::return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#close()::: byta array audio float input stream close:::
AudioFloatInputStream.BytaArrayAudioFloatInputStream#mark(int)::: byta array audio float input stream mark:::
AudioFloatInputStream.BytaArrayAudioFloatInputStream#markSupported()::: byta array audio float input stream mark supported:::return
AudioFloatInputStream.BytaArrayAudioFloatInputStream#reset()::: byta array audio float input stream reset:::
AudioFloatInputStream.DirectAudioFloatInputStream#getFormat()::: direct audio float input stream get format:::return->stream->getFormat
AudioFloatInputStream.DirectAudioFloatInputStream#getFrameLength()::: direct audio float input stream get frame length:::return->stream->getFrameLength
AudioFloatInputStream.DirectAudioFloatInputStream#read(float[], int, int)::: direct audio float input stream read:::b_len->if->new->byteArr->ret->stream->read->if->return->converter->toFloatArray->return
AudioFloatInputStream.DirectAudioFloatInputStream#skip(long)::: direct audio float input stream skip:::b_len->ret->stream->skip->if->return->return
AudioFloatInputStream.DirectAudioFloatInputStream#available()::: direct audio float input stream available:::return->stream->available
AudioFloatInputStream.DirectAudioFloatInputStream#close()::: direct audio float input stream close:::stream->close
AudioFloatInputStream.DirectAudioFloatInputStream#mark(int)::: direct audio float input stream mark:::stream->mark
AudioFloatInputStream.DirectAudioFloatInputStream#markSupported()::: direct audio float input stream mark supported:::return->stream->markSupported
AudioFloatInputStream.DirectAudioFloatInputStream#reset()::: direct audio float input stream reset:::stream->reset
AudioFloatInputStream#getInputStream(URL)::: audio float input stream get input stream:::return->AudioSystem->getAudioInputStream->new->DirectAudioFloatInputStream
AudioFloatInputStream#getInputStream(File)::: audio float input stream get input stream:::return->AudioSystem->getAudioInputStream->new->DirectAudioFloatInputStream
AudioFloatInputStream#getInputStream(InputStream)::: audio float input stream get input stream:::return->AudioSystem->getAudioInputStream->new->DirectAudioFloatInputStream
AudioFloatInputStream#getInputStream(AudioInputStream)::: audio float input stream get input stream:::return->new->DirectAudioFloatInputStream
AudioFloatInputStream#getInputStream(AudioFormat, byte[], int, int)::: audio float input stream get input stream:::converter->AudioFloatConverter->getConverter->if->return->new->BytaArrayAudioFloatInputStream->stream->new->ByteArrayInputStream->aLen->format->getFrameSize->format->getFrameSize->astream->new->AudioInputStream->return->getInputStream
AudioFloatInputStream#getFormat()::: audio float input stream get format:::
AudioFloatInputStream#getFrameLength()::: audio float input stream get frame length:::
AudioFloatInputStream#read(float[], int, int)::: audio float input stream read:::
AudioFloatInputStream#read(float[])::: audio float input stream read:::return->read
AudioFloatInputStream#read()::: audio float input stream read:::b->new->floatArr->ret->read->if->return->return
AudioFloatInputStream#skip(long)::: audio float input stream skip:::
AudioFloatInputStream#available()::: audio float input stream available:::
AudioFloatInputStream#close()::: audio float input stream close:::
AudioFloatInputStream#mark(int)::: audio float input stream mark:::
AudioFloatInputStream#markSupported()::: audio float input stream mark supported:::
AudioFloatInputStream#reset()::: audio float input stream reset:::
AudioSynthesizer#getFormat():::Obtains the current format (encoding, sample rate, number of channels, etc.) of the synthesizer audio data:::
AudioSynthesizer#getPropertyInfo(Map):::Gets information about the possible properties for the synthesizer.:::
AudioSynthesizer#open(SourceDataLine, Map):::Opens the synthesizer and starts rendering audio into SourceDataLine:::
AudioSynthesizer#openStream(AudioFormat, Map):::Opens the synthesizer and renders audio into returned AudioInputStream:::
AuFileFormat#getAuType()::: au file format get au type:::return
AuFileReader#getAudioFileFormatImpl(InputStream)::: au file reader get audio file format impl:::dis->new->DataInputStream->magic->dis->readInt->if->throw->new->UnsupportedAudioFileException->headerSize->dis->readInt->if->throw->new->UnsupportedAudioFileException->dataSize->dis->readInt->auType->dis->readInt->sampleRate->dis->readInt->if->throw->new->UnsupportedAudioFileException->channels->dis->readInt->if->throw->new->UnsupportedAudioFileException->sampleSizeInBits->encoding->switch->break->break->break->break->break->break->break->throw->new->UnsupportedAudioFileException->dis->skipBytes->frameSize->calculatePCMFrameSize->if->throw->new->UnsupportedAudioFileException->frameLength->byteLength->if->format->new->AudioFormat->return->new->AuFileFormat
AuFileWriter#getAudioFileTypes(AudioInputStream)::: au file writer get audio file types:::filetypes->new->TypeArr->System->arraycopy->format->stream->getFormat->encoding->format->getEncoding->if->equals->equals->equals->equals->equals->return->return->new->TypeArr
AuFileWriter#write(AudioInputStream, Type, OutputStream)::: au file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->auFileFormat->getAudioFileFormat->return->writeAuFile
AuFileWriter#write(AudioInputStream, Type, File)::: au file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->auFileFormat->getAudioFileFormat->bytesWritten->try->fos->new->FileOutputStream->bos->new->BufferedOutputStream->writeAuFile->catch->finally->if->auFileFormat->getByteLength->try->raf->new->RandomAccessFile->if->raf->length->raf->skipBytes->raf->writeInt->catch->finally->return
AuFileWriter#getAudioFileFormat(Type, AudioInputStream):::Returns the AudioFileFormat describing the file that will be written from this AudioInputStream:::if->isFileTypeSupported->throw->new->IllegalArgumentException->streamFormat->stream->getFormat->encoding->streamFormat->getEncoding->if->equals->format->streamFormat->getSampleRate->streamFormat->getSampleSizeInBits->streamFormat->getChannels->streamFormat->getFrameSize->streamFormat->getFrameRate->new->AudioFormat->fileSize->if->stream->getFrameLength->stream->getFrameLength->streamFormat->getFrameSize->else->return->stream->getFrameLength->new->AuFileFormat
AuFileWriter#getFileStream(AuFileFormat, AudioInputStream)::: au file writer get file stream:::format->auFileFormat->getFormat->headerSize->dataSize->auFileFormat->getFrameLength->dataSizeInBytes->format->getFrameSize->if->auType->auFileFormat->getAuType->sampleRate->format->getSampleRate->channels->format->getChannels->AudioSystem->getAudioInputStream->header->try->baos->new->ByteArrayOutputStream->dos->new->DataOutputStream->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->dos->writeInt->baos->toByteArray->catch->finally->return->new->ByteArrayInputStream->new->NoCloseInputStream->new->SequenceInputStream
AuFileWriter#writeAuFile(AudioInputStream, AuFileFormat, OutputStream)::: au file writer write au file:::bytesRead->bytesWritten->fileStream->getFileStream->buffer->new->byteArr->maxLength->auFileFormat->getByteLength->while->fileStream->read->if->if->out->write->else->out->write->break->else->out->write->return
AutoClosingClip#isAutoClosing():::Indicates whether this clip instance is auto closing:::
AutoClosingClip#setAutoClosing(boolean):::Sets whether this Clip instance is auto closing or not:::
AutoConnectSequencer#setAutoConnect(Receiver):::Set the receiver that this device is auto-connected:::
DataPusher#start()::: data pusher start:::start
DataPusher#start(boolean)::: data pusher start:::if->Printer->debug->try->if->if->Printer->trace->stop->if->source->isOpen->if->Printer->trace->source->open->if->Printer->trace->source->flush->if->Printer->trace->source->start->if->if->Printer->debug->JSSecurityManager->createThread->notifyAll->catch->if->e->printStackTrace->finally->if->Printer->debug
DataPusher#stop()::: data pusher stop:::if->Printer->debug->if->if->Printer->debug->return->if->Printer->debug->if->if->Printer->trace->source->flush->notifyAll->maxWaitCount->while->try->wait->catch->finally->if->Printer->debug
DataPusher#close()::: data pusher close:::if->if->Printer->trace->source->close
DataPusher#run():::Write data to the source data line.:::buffer->useStream->if->new->byteArr->else->while->if->if->Printer->debug->try->synchronized->wait->catch->finally->if->Printer->debug->continue->if->toWrite->if->try->ais->read->catch->finally->else->if->if->if->if->Printer->debug->if->if->Printer->debug->continue->if->Printer->debug->source->drain->continue->if->Printer->debug->bytesWritten->source->write->if->Printer->debug->if->Printer->debug->if->Printer->trace->source->flush->if->Printer->trace->source->stop->if->Printer->trace->source->flush->if->Printer->trace->source->close->synchronized->notifyAll->if->Printer->debug
DirectAudioDevice#createDataLineInfo(boolean)::: direct audio device create data line info:::formats->new->Vector<>->hardwareFormatArray->formatArray->synchronized->getMixerIndex->getDeviceID->nGetFormats->if->formats->size->size->formats->size->formatArraySize->new->AudioFormatArr->for->i->new->AudioFormatArr->formatArrayIndex->for->i->if->return->new->DirectDLI->return
DirectAudioDevice#getLine(Line.Info)::: direct audio device get line:::fullInfo->getLineInfo->if->throw->new->IllegalArgumentException->if->dataLineInfo->lineFormat->lineBufferSize->supportedFormats->if->getFormats->getMaxBufferSize->if->else->if->Toolkit->isFullySpecifiedPCMFormat->if->dataLineInfo->getLineClass->isAssignableFrom->return->new->DirectSDL->if->dataLineInfo->getLineClass->isAssignableFrom->return->new->DirectClip->if->dataLineInfo->getLineClass->isAssignableFrom->return->new->DirectTDL->throw->new->IllegalArgumentException
DirectAudioDevice#getMaxLines(Line.Info)::: direct audio device get max lines:::fullInfo->getLineInfo->if->return->if->return->getMaxSimulLines->return
DirectAudioDevice#implOpen()::: direct audio device impl open:::if->Printer->trace
DirectAudioDevice#implClose()::: direct audio device impl close:::if->Printer->trace
DirectAudioDevice#implStart()::: direct audio device impl start:::if->Printer->trace
DirectAudioDevice#implStop()::: direct audio device impl stop:::if->Printer->trace
DirectAudioDevice#getMixerIndex()::: direct audio device get mixer index:::return->getMixerInfo->getIndex
DirectAudioDevice#getDeviceID()::: direct audio device get device d:::return->getMixerInfo->getDeviceID
DirectAudioDevice#getMaxSimulLines()::: direct audio device get max simul lines:::return->getMixerInfo->getMaxSimulLines
DirectAudioDevice#addFormat(Vector, int, int, int, float, int, boolean, boolean)::: direct audio device add format:::enc->switch->break->if->if->Printer->err->break->if->if->Printer->err->break->if->if->Printer->err->return->if->if->else->v->new->AudioFormat->add
DirectAudioDevice#getSignOrEndianChangedFormat(AudioFormat)::: direct audio device get sign or endian changed format:::isSigned->format->getEncoding->equals->isUnsigned->format->getEncoding->equals->if->format->getSampleSizeInBits->return->format->getEncoding->format->getSampleRate->format->getSampleSizeInBits->format->getChannels->format->getFrameSize->format->getFrameRate->format->isBigEndian->new->AudioFormat->else->if->format->getSampleSizeInBits->return->format->getSampleRate->format->getSampleSizeInBits->format->getChannels->format->getFrameSize->format->getFrameRate->format->isBigEndian->new->AudioFormat->return
DirectAudioDevice.DirectDLI#isFormatSupportedInHardware(AudioFormat)::: direct i is format supported in hardware:::if->return->for->i->return
DirectAudioDevice.DirectDLI#getHardwareFormats()::: direct i get hardware formats:::return
DirectAudioDevice.DirectDL#implOpen(AudioFormat, int)::: direct l impl open:::if->Printer->trace->Toolkit->isFullySpecifiedAudioFormat->if->JSSecurityManager->checkRecordPermission->encoding->if->format->getEncoding->equals->else->if->format->getEncoding->equals->if->Toolkit->millis2bytes->ddli->if->if->if->format->getEncoding->equals->format->getEncoding->equals->new->ControlArr->else->if->format->getChannels->format->getSampleSizeInBits->new->ControlArr->else->if->format->getChannels->new->ControlArr->else->new->ControlArr->if->Printer->debug->if->ddli->isFormatSupportedInHardware->newFormat->getSignOrEndianChangedFormat->if->ddli->isFormatSupportedInHardware->format->getFrameSize->format->getChannels->if->Printer->debug->Printer->debug->Printer->debug->format->getFrameSize->format->getFrameSize->hardwareFormat->getSampleRate->hardwareFormat->getSampleSizeInBits->hardwareFormat->getFrameSize->hardwareFormat->getChannels->hardwareFormat->getEncoding->equals->hardwareFormat->isBigEndian->nOpen->if->throw->new->LineUnavailableException->nGetBufferSize->if->Toolkit->bytes2millis->if->else->if->calcVolume->if->Printer->trace
DirectAudioDevice.DirectDL#implStart()::: direct l impl start:::if->Printer->trace->if->JSSecurityManager->checkRecordPermission->synchronized->nStart->requiresServicing->if->getEventDispatcher->addLineMonitor->synchronized->if->setStarted->setActive->if->Printer->trace
DirectAudioDevice.DirectDL#implStop()::: direct l impl stop:::if->Printer->trace->if->JSSecurityManager->checkRecordPermission->if->getEventDispatcher->removeLineMonitor->synchronized->nStop->synchronized->setActive->setStarted->lock->notifyAll->if->Printer->trace
DirectAudioDevice.DirectDL#implClose()::: direct l impl close:::if->Printer->trace->if->JSSecurityManager->checkRecordPermission->if->getEventDispatcher->removeLineMonitor->oldID->synchronized->nClose->if->Printer->trace
DirectAudioDevice.DirectDL#available()::: direct l available:::if->return->a->synchronized->nAvailable->return
DirectAudioDevice.DirectDL#drain()::: direct l drain:::counter->startPos->getLongFramePosition->posChanged->while->synchronized->if->nIsStillDraining->break->if->thisFramePos->getLongFramePosition->if->if->if->Printer->err->break->synchronized->try->lock->wait->catch->finally->if
DirectAudioDevice.DirectDL#flush()::: direct l flush:::if->synchronized->lock->notifyAll->synchronized->if->nFlush
DirectAudioDevice.DirectDL#getLongFramePosition()::: direct l get long frame position:::pos->synchronized->nGetBytePosition->if->if->Printer->debug->return->getFormat->getFrameSize
DirectAudioDevice.DirectDL#write(byte[], int, int)::: direct l write:::if->return->if->throw->new->IllegalArgumentException->if->getFormat->getFrameSize->throw->getFormat->getFrameSize->new->IllegalArgumentException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException->synchronized->if->isActive->setActive->setStarted->written->while->thisWritten->synchronized->nWrite->if->break->if->if->synchronized->try->lock->wait->catch->finally->else->break->if->return
DirectAudioDevice.DirectDL#requiresServicing()::: direct l requires servicing:::return->nRequiresServicing
DirectAudioDevice.DirectDL#checkLine()::: direct l check line:::synchronized->if->nService
DirectAudioDevice.DirectDL#calcVolume()::: direct l calc volume:::if->getFormat->return->if->muteControl->getValue->return->gain->gainControl->getLinearGain->if->getFormat->getChannels->else->bal->balanceControl->getValue->if->else
DirectAudioDevice.DirectDL.Gain#setValue(float)::: gain set value:::newLinearGain->Toolkit->dBToLinear->super->Toolkit->linearToDB->setValue->calcVolume
DirectAudioDevice.DirectDL.Gain#getLinearGain()::: gain get linear gain:::return
DirectAudioDevice.DirectDL.Mute#setValue(boolean)::: mute set value:::super->setValue->calcVolume
DirectAudioDevice.DirectDL.Balance#setValue(float)::: balance set value:::setValueImpl->panControl->setValueImpl->calcVolume
DirectAudioDevice.DirectDL.Balance#setValueImpl(float)::: balance set value impl:::super->setValue
DirectAudioDevice.DirectDL.Pan#setValue(float)::: pan set value:::setValueImpl->balanceControl->setValueImpl->calcVolume
DirectAudioDevice.DirectDL.Pan#setValueImpl(float)::: pan set value impl:::super->setValue
DirectAudioDevice.DirectTDL#read(byte[], int, int)::: direct l read:::if->return->if->throw->new->IllegalArgumentException->if->getFormat->getFrameSize->throw->getFormat->getFrameSize->new->IllegalArgumentException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException->synchronized->if->isActive->setActive->setStarted->read->while->thisRead->synchronized->nRead->if->break->if->if->synchronized->try->lock->wait->catch->finally->else->break->if->return
DirectAudioDevice.DirectClip#open(AudioFormat, byte[], int, int)::: direct clip open:::Toolkit->isFullySpecifiedAudioFormat->Toolkit->format->getFrameSize->validateBuffer->newData->new->byteArr->System->arraycopy->format->getFrameSize->open
DirectAudioDevice.DirectClip#open(AudioFormat, byte[], int)::: direct clip open:::Toolkit->isFullySpecifiedAudioFormat->synchronized->if->Printer->trace->if->Printer->debug->if->Printer->debug->if->isOpen->throw->getFormat->getFrameLength->new->IllegalStateException->else->format->getFrameSize->try->Toolkit->millis2bytes->open->catch->throw->throw->finally->priority->JSSecurityManager->createThread->thread->start->if->isAutoClosing->getEventDispatcher->autoClosingClipOpened->if->Printer->trace
DirectAudioDevice.DirectClip#open(AudioInputStream)::: direct clip open:::Toolkit->isFullySpecifiedAudioFormat->synchronized->if->Printer->trace->streamData->if->isOpen->throw->getFormat->getFrameLength->new->IllegalStateException->lengthInFrames->stream->getFrameLength->if->Printer->debug->bytesRead->if->arraysize->stream->getFormat->getFrameSize->new->byteArr->bytesRemaining->thisRead->while->stream->read->if->else->if->Thread->yield->else->MAX_READ_LIMIT->dbaos->new->DirectBAOS->tmp->new->byteArr->thisRead->while->stream->read->if->dbaos->write->else->if->Thread->yield->dbaos->getInternalBuffer->stream->getFormat->getFrameSize->if->Printer->debug->stream->getFormat->open->if->Printer->trace
DirectAudioDevice.DirectClip#getFrameLength()::: direct clip get frame length:::return
DirectAudioDevice.DirectClip#getMicrosecondLength()::: direct clip get microsecond length:::return->Toolkit->getFormat->getFrameLength->frames2micros
DirectAudioDevice.DirectClip#setFramePosition(int)::: direct clip set frame position:::if->Printer->trace->if->else->if->getFrameLength->getFrameLength->if->else->flush->synchronized->nSetBytePosition->if->Printer->getLongFramePosition->debug->if->Printer->trace
DirectAudioDevice.DirectClip#getLongFramePosition()::: direct clip get long frame position:::return->super->getLongFramePosition
DirectAudioDevice.DirectClip#setMicrosecondPosition(long)::: direct clip set microsecond position:::if->Printer->trace->frames->Toolkit->getFormat->micros2frames->setFramePosition->if->Printer->trace
DirectAudioDevice.DirectClip#setLoopPoints(int, int)::: direct clip set loop points:::if->Printer->trace->if->getFrameLength->throw->new->IllegalArgumentException->if->getFrameLength->throw->new->IllegalArgumentException->if->getFrameLength->if->if->throw->new->IllegalArgumentException->if->Printer->trace->if->Printer->trace
DirectAudioDevice.DirectClip#loop(int)::: direct clip loop:::start
DirectAudioDevice.DirectClip#implOpen(AudioFormat, int)::: direct clip impl open:::if->throw->new->IllegalArgumentException->super->implOpen
DirectAudioDevice.DirectClip#implClose()::: direct clip impl close:::if->Printer->trace->oldThread->if->synchronized->lock->notifyAll->try->oldThread->join->catch->finally->super->implClose->getEventDispatcher->autoClosingClipClosed->if->Printer->trace
DirectAudioDevice.DirectClip#implStart()::: direct clip impl start:::if->Printer->trace->super->implStart->if->Printer->trace
DirectAudioDevice.DirectClip#implStop()::: direct clip impl stop:::if->Printer->trace->super->implStop->if->Printer->trace
DirectAudioDevice.DirectClip#run()::: direct clip run:::if->Printer->Thread->currentThread->getId->trace->curThread->Thread->currentThread->while->synchronized->while->try->lock->wait->catch->finally->while->if->endFrame->getFrameLength->if->framePos->toWriteFrames->toWriteBytes->if->getBufferSize->Toolkit->getBufferSize->align->written->write->if->if->if->if->else->if->Printer->debug->if->Printer->debug->if->Printer->debug->drain->stop->if->Printer->Thread->currentThread->getId->trace
DirectAudioDevice.DirectClip#isAutoClosing()::: direct clip is auto closing:::return
DirectAudioDevice.DirectClip#setAutoClosing(boolean)::: direct clip set auto closing:::if->if->isOpen->if->getEventDispatcher->autoClosingClipOpened->else->getEventDispatcher->autoClosingClipClosed
DirectAudioDevice.DirectClip#requiresServicing()::: direct clip requires servicing:::return
DirectAudioDevice.DirectBAOS#getInternalBuffer()::: direct s get internal buffer:::return
DirectAudioDevice#nGetFormats(int, int, boolean, Vector)::: direct audio device n get formats:::
DirectAudioDevice#nOpen(int, int, boolean, int, float, int, int, int, boolean, boolean, int)::: direct audio device n open:::
DirectAudioDevice#nStart(long, boolean)::: direct audio device n start:::
DirectAudioDevice#nStop(long, boolean)::: direct audio device n stop:::
DirectAudioDevice#nClose(long, boolean)::: direct audio device n close:::
DirectAudioDevice#nWrite(long, byte[], int, int, int, float, float)::: direct audio device n write:::
DirectAudioDevice#nRead(long, byte[], int, int, int)::: direct audio device n read:::
DirectAudioDevice#nGetBufferSize(long, boolean)::: direct audio device n get buffer size:::
DirectAudioDevice#nIsStillDraining(long, boolean)::: direct audio device n is still draining:::
DirectAudioDevice#nFlush(long, boolean)::: direct audio device n flush:::
DirectAudioDevice#nAvailable(long, boolean)::: direct audio device n available:::
DirectAudioDevice#nGetBytePosition(long, boolean, long)::: direct audio device n get byte position:::
DirectAudioDevice#nSetBytePosition(long, boolean, long)::: direct audio device n set byte position:::
DirectAudioDevice#nRequiresServicing(long, boolean)::: direct audio device n requires servicing:::
DirectAudioDevice#nService(long, boolean)::: direct audio device n service:::
DirectAudioDeviceProvider#init()::: direct audio device provider init:::numDevices->nGetNumDevices->if->if->Printer->trace->new->DirectAudioDeviceInfoArr->new->DirectAudioDeviceArr->for->i->if->Printer->trace
DirectAudioDeviceProvider#getMixerInfo()::: direct audio device provider get mixer info:::synchronized->localArray->new->Mixer.InfoArr->System->arraycopy->return
DirectAudioDeviceProvider#getMixer(Mixer.Info)::: direct audio device provider get mixer:::synchronized->if->for->i->for->i->throw->String->format->new->IllegalArgumentException
DirectAudioDeviceProvider#getDevice(DirectAudioDeviceInfo)::: direct audio device provider get device:::index->info->getIndex->if->new->DirectAudioDevice->return
DirectAudioDeviceProvider.DirectAudioDeviceInfo#getIndex()::: direct audio device info get index:::return
DirectAudioDeviceProvider.DirectAudioDeviceInfo#getMaxSimulLines()::: direct audio device info get max simul lines:::return
DirectAudioDeviceProvider.DirectAudioDeviceInfo#getDeviceID()::: direct audio device info get device d:::return
DirectAudioDeviceProvider#nGetNumDevices()::: direct audio device provider n get num devices:::
DirectAudioDeviceProvider#nNewDirectAudioDeviceInfo(int)::: direct audio device provider n new direct audio device info:::
DLSInstrument#getInfo()::: instrument get info:::return
DLSInstrument#getName()::: instrument get name:::return
DLSInstrument#setName(String)::: instrument set name:::
DLSInstrument#getPatch()::: instrument get patch:::return->new->ModelPatch
DLSInstrument#setPatch(Patch)::: instrument set patch:::if->isPercussion->patch->getBank->patch->getProgram->else->patch->getBank->patch->getProgram
DLSInstrument#getData()::: instrument get data:::return
DLSInstrument#getRegions()::: instrument get regions:::return
DLSInstrument#getModulators()::: instrument get modulators:::return
DLSInstrument#toString()::: instrument to string:::if->return->else->return
DLSInstrument#convertToModelDest(int)::: instrument convert to model dest:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
DLSInstrument#convertToModelSrc(int)::: instrument convert to model src:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->if->return->if->return->if->return->if->return->if->return->new->ModelIdentifier->if->return->new->ModelIdentifier->return
DLSInstrument#convertToModel(DLSModulator)::: instrument convert to model:::source->mod->getSource->convertToModelSrc->control->mod->getControl->convertToModelSrc->destination_id->mod->getDestination->convertToModelDest->scale->mod->getScale->f_scale->if->else->if->src->ctrl->block->new->ModelConnectionBlock->if->s->new->ModelSource->if->s->getTransform->setPolarity->else->if->s->getTransform->setPolarity->s->setIdentifier->block->addSource->if->s->new->ModelSource->if->s->getTransform->setPolarity->else->if->s->getTransform->setPolarity->s->setIdentifier->block->addSource->destination->new->ModelDestination->destination->setIdentifier->block->setDestination->if->mod->getVersion->if->mod->getTransform->if->src->getTransform->setTransform->src->getTransform->setDirection->if->ctrl->getTransform->setTransform->ctrl->getTransform->setDirection->else->if->mod->getVersion->transform->mod->getTransform->src_transform_invert->src_transform_bipolar->src_transform->ctr_transform_invert->ctr_transform_bipolar->ctr_transform->if->trans->if->if->if->src->getTransform->setTransform->src->getTransform->setPolarity->src->getTransform->setDirection->if->trans->if->if->if->ctrl->getTransform->setTransform->ctrl->getTransform->setPolarity->ctrl->getTransform->setDirection->block->setScale->return->return
DLSInstrument#getPerformers()::: instrument get performers:::performers->new->ArrayList<>->modmap->new->HashMap<>->foreach->getModulators->modmap->mod->getSource->mod->getControl->mod->getDestination->put->insmodmap->new->HashMap<>->foreach->performer->new->ModelPerformer->performer->zone->getSample->getName->setName->performer->zone->getFusoptions->setSelfNonExclusive->performer->zone->getExclusiveClass->setExclusiveClass->performer->zone->getKeyfrom->setKeyFrom->performer->zone->getKeyto->setKeyTo->performer->zone->getVelfrom->setVelFrom->performer->zone->getVelto->setVelTo->insmodmap->clear->insmodmap->putAll->foreach->zone->getModulators->insmodmap->mod->getSource->mod->getControl->mod->getDestination->put->blocks->performer->getConnectionBlocks->foreach->insmodmap->values->p->convertToModel->if->blocks->add->sample->zone->getSample->sampleopt->zone->getSampleoptions->if->sample->getSampleoptions->buff->sample->getDataBuffer->pitchcorrection->osc->sample->getFormat->new->ModelByteBufferWavetable->osc->osc->getAttenuation->setAttenuation->if->sampleopt->getLoops->size->loop->sampleopt->getLoops->get->osc->loop->getStart->setLoopStart->osc->loop->getLength->setLoopLength->if->loop->getType->osc->setLoopType->if->loop->getType->osc->setLoopType->else->osc->setLoopType->performer->getConnectionBlocks->new->ModelIdentifier->new->ModelDestination->new->ModelConnectionBlock->add->performer->getOscillators->add->performers->add->return->performers->performers->size->new->ModelPerformerArr->toArray
DLSInstrument#getGuid()::: instrument get guid:::return->Arrays->copyOf
DLSInstrument#setGuid(byte[])::: instrument set guid:::Arrays->copyOf
DLSModulator#getControl()::: modulator get control:::return
DLSModulator#setControl(int)::: modulator set control:::
DLSModulator#getDestinationFormat(int)::: modulator get destination format:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
DLSModulator#getDestinationName(int)::: modulator get destination name:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
DLSModulator#getSourceName(int)::: modulator get source name:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
DLSModulator#getDestination()::: modulator get destination:::return
DLSModulator#setDestination(int)::: modulator set destination:::
DLSModulator#getScale()::: modulator get scale:::return
DLSModulator#setScale(int)::: modulator set scale:::
DLSModulator#getSource()::: modulator get source:::return
DLSModulator#setSource(int)::: modulator set source:::
DLSModulator#getVersion()::: modulator get version:::return
DLSModulator#setVersion(int)::: modulator set version:::
DLSModulator#getTransform()::: modulator get transform:::return
DLSModulator#setTransform(int)::: modulator set transform:::
DLSRegion#getModulators()::: region get modulators:::return
DLSRegion#getChannel()::: region get channel:::return
DLSRegion#setChannel(long)::: region set channel:::
DLSRegion#getExclusiveClass()::: region get exclusive class:::return
DLSRegion#setExclusiveClass(int)::: region set exclusive class:::
DLSRegion#getFusoptions()::: region get fusoptions:::return
DLSRegion#setFusoptions(int)::: region set fusoptions:::
DLSRegion#getKeyfrom()::: region get keyfrom:::return
DLSRegion#setKeyfrom(int)::: region set keyfrom:::
DLSRegion#getKeyto()::: region get keyto:::return
DLSRegion#setKeyto(int)::: region set keyto:::
DLSRegion#getOptions()::: region get options:::return
DLSRegion#setOptions(int)::: region set options:::
DLSRegion#getPhasegroup()::: region get phasegroup:::return
DLSRegion#setPhasegroup(int)::: region set phasegroup:::
DLSRegion#getSample()::: region get sample:::return
DLSRegion#setSample(DLSSample)::: region set sample:::
DLSRegion#getVelfrom()::: region get velfrom:::return
DLSRegion#setVelfrom(int)::: region set velfrom:::
DLSRegion#getVelto()::: region get velto:::return
DLSRegion#setVelto(int)::: region set velto:::
DLSRegion#setModulators(List)::: region set modulators:::
DLSRegion#getSampleoptions()::: region get sampleoptions:::return
DLSRegion#setSampleoptions(DLSSampleOptions)::: region set sampleoptions:::
DLSSample#getInfo()::: sample get info:::return
DLSSample#getData()::: sample get data:::format->getFormat->is->data->getInputStream->if->return->return->data->capacity->new->AudioInputStream
DLSSample#getDataBuffer()::: sample get data buffer:::return
DLSSample#getFormat()::: sample get format:::return
DLSSample#setFormat(AudioFormat)::: sample set format:::
DLSSample#setData(ModelByteBuffer)::: sample set data:::
DLSSample#setData(byte[])::: sample set data:::new->ModelByteBuffer
DLSSample#setData(byte[], int, int)::: sample set data:::new->ModelByteBuffer
DLSSample#getName()::: sample get name:::return
DLSSample#setName(String)::: sample set name:::
DLSSample#getSampleoptions()::: sample get sampleoptions:::return
DLSSample#setSampleoptions(DLSSampleOptions)::: sample set sampleoptions:::
DLSSample#toString()::: sample to string:::return
DLSSample#getGuid()::: sample get guid:::return->Arrays->copyOf
DLSSample#setGuid(byte[])::: sample set guid:::Arrays->copyOf
DLSSampleLoop#getLength()::: sample loop get length:::return
DLSSampleLoop#setLength(long)::: sample loop set length:::
DLSSampleLoop#getStart()::: sample loop get start:::return
DLSSampleLoop#setStart(long)::: sample loop set start:::
DLSSampleLoop#getType()::: sample loop get type:::return
DLSSampleLoop#setType(long)::: sample loop set type:::
DLSSampleOptions#getAttenuation()::: sample options get attenuation:::return
DLSSampleOptions#setAttenuation(int)::: sample options set attenuation:::
DLSSampleOptions#getFinetune()::: sample options get finetune:::return
DLSSampleOptions#setFinetune(short)::: sample options set finetune:::
DLSSampleOptions#getLoops()::: sample options get loops:::return
DLSSampleOptions#getOptions()::: sample options get options:::return
DLSSampleOptions#setOptions(long)::: sample options set options:::
DLSSampleOptions#getUnitynote()::: sample options get unitynote:::return
DLSSampleOptions#setUnitynote(int)::: sample options set unitynote:::
DLSSoundbank.DLSID#read(RIFFReader)::: d read:::d->new->DLSID->riff->readUnsignedInt->riff->readUnsignedShort->riff->readUnsignedShort->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->return
DLSSoundbank.DLSID#hashCode()::: d hash code:::return
DLSSoundbank.DLSID#equals(Object)::: d equals:::if->return->t->return
DLSSoundbank#readSoundbank(InputStream)::: soundbank read soundbank:::riff->new->RIFFReader->if->riff->getFormat->equals->throw->new->RIFFInvalidFormatException->if->riff->getType->equals->throw->new->RIFFInvalidFormatException->while->riff->hasNextChunk->chunk->riff->nextChunk->if->chunk->getFormat->equals->if->chunk->getType->equals->readInfoChunk->if->chunk->getType->equals->readLinsChunk->if->chunk->getType->equals->readWvplChunk->else->if->chunk->getFormat->equals->if->readCdlChunk->throw->new->RIFFInvalidFormatException->if->chunk->getFormat->equals->if->chunk->getFormat->equals->if->chunk->getFormat->equals->chunk->readUnsignedInt->chunk->readUnsignedInt->foreach->temp_rgnassign->entrySet->samples->entry->getValue->longValue->get->entry->getKey
DLSSoundbank#cdlIsQuerySupported(DLSID)::: soundbank cdl is query supported:::return->uuid->equals->uuid->equals->uuid->equals->uuid->equals->uuid->equals->uuid->equals->uuid->equals->uuid->equals->uuid->equals
DLSSoundbank#cdlQuery(DLSID)::: soundbank cdl query:::if->uuid->equals->return->if->uuid->equals->return->if->uuid->equals->return->if->uuid->equals->return->if->uuid->equals->return->if->uuid->equals->return->Runtime->getRuntime->totalMemory->if->uuid->equals->return->if->uuid->equals->return->if->uuid->equals->return->return
DLSSoundbank#readCdlChunk(RIFFReader)::: soundbank read cdl chunk:::uuid->x->y->stack->new->Stack<>->while->riff->available->opcode->riff->readUnsignedShort->switch->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->pop->stack->pop->stack->Long->valueOf->push->break->stack->Long->riff->readUnsignedInt->valueOf->push->break->DLSID->read->stack->cdlQuery->push->break->DLSID->read->stack->Long->cdlIsQuerySupported->valueOf->push->break->break->if->stack->isEmpty->return->return->stack->pop
DLSSoundbank#readInfoChunk(RIFFReader)::: soundbank read info chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString
DLSSoundbank#readLinsChunk(RIFFReader)::: soundbank read lins chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->if->chunk->getFormat->equals->if->chunk->getType->equals->readInsChunk
DLSSoundbank#readInsChunk(RIFFReader)::: soundbank read ins chunk:::instrument->new->DLSInstrument->while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->if->chunk->getType->equals->readInsInfoChunk->if->chunk->getType->equals->while->chunk->hasNextChunk->subchunk->chunk->nextChunk->if->subchunk->getFormat->equals->if->subchunk->getType->equals->split->new->DLSRegion->if->readRgnChunk->instrument->getRegions->add->if->subchunk->getType->equals->split->new->DLSRegion->if->readRgnChunk->instrument->getRegions->add->if->chunk->getType->equals->modlist->new->ArrayList<>->while->chunk->hasNextChunk->subchunk->chunk->nextChunk->if->chunk->getFormat->equals->if->readCdlChunk->modlist->clear->break->if->subchunk->getFormat->equals->readArt1Chunk->instrument->getModulators->addAll->if->chunk->getType->equals->modlist->new->ArrayList<>->while->chunk->hasNextChunk->subchunk->chunk->nextChunk->if->chunk->getFormat->equals->if->readCdlChunk->modlist->clear->break->if->subchunk->getFormat->equals->readArt2Chunk->instrument->getModulators->addAll->else->if->format->equals->new->byteArr->chunk->readFully->if->format->equals->chunk->readUnsignedInt->bank->chunk->read->chunk->read->chunk->read->drumins->chunk->read->id->chunk->read->chunk->read->chunk->read->chunk->read->instruments->add
DLSSoundbank#readArt1Chunk(List, RIFFReader)::: soundbank read art1 chunk:::size->riff->readUnsignedInt->count->riff->readUnsignedInt->if->riff->skip->for->i
DLSSoundbank#readArt2Chunk(List, RIFFReader)::: soundbank read art2 chunk:::size->riff->readUnsignedInt->count->riff->readUnsignedInt->if->riff->skip->for->i
DLSSoundbank#readRgnChunk(DLSRegion, RIFFReader)::: soundbank read rgn chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->if->chunk->getType->equals->modlist->new->ArrayList<>->while->chunk->hasNextChunk->subchunk->chunk->nextChunk->if->chunk->getFormat->equals->if->readCdlChunk->modlist->clear->break->if->subchunk->getFormat->equals->readArt1Chunk->split->getModulators->addAll->if->chunk->getType->equals->modlist->new->ArrayList<>->while->chunk->hasNextChunk->subchunk->chunk->nextChunk->if->chunk->getFormat->equals->if->readCdlChunk->modlist->clear->break->if->subchunk->getFormat->equals->readArt2Chunk->split->getModulators->addAll->else->if->format->equals->if->readCdlChunk->return->if->format->equals->chunk->readUnsignedShort->chunk->readUnsignedShort->chunk->readUnsignedShort->chunk->readUnsignedShort->chunk->readUnsignedShort->chunk->readUnsignedShort->if->format->equals->chunk->readUnsignedShort->chunk->readUnsignedShort->chunk->readUnsignedInt->sampleid->chunk->readUnsignedInt->temp_rgnassign->put->if->format->equals->new->DLSSampleOptions->readWsmpChunk->return
DLSSoundbank#readWsmpChunk(DLSSampleOptions, RIFFReader)::: soundbank read wsmp chunk:::size->riff->readUnsignedInt->riff->readUnsignedShort->riff->readShort->riff->readInt->riff->readUnsignedInt->loops->riff->readInt->if->riff->skip->for->i
DLSSoundbank#readInsInfoChunk(DLSInstrument, RIFFReader)::: soundbank read ins info chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString
DLSSoundbank#readWvplChunk(RIFFReader)::: soundbank read wvpl chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->if->chunk->getFormat->equals->if->chunk->getType->equals->readWaveChunk
DLSSoundbank#readWaveChunk(RIFFReader)::: soundbank read wave chunk:::sample->new->DLSSample->while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->if->chunk->getType->equals->readWaveInfoChunk->else->if->format->equals->new->byteArr->chunk->readFully->if->format->equals->sampleformat->chunk->readUnsignedShort->if->throw->new->RIFFInvalidDataException->channels->chunk->readUnsignedShort->samplerate->chunk->readUnsignedInt->chunk->readUnsignedInt->framesize->chunk->readUnsignedShort->bits->chunk->readUnsignedShort->audioformat->if->if->new->AudioFormat->else->new->AudioFormat->if->new->AudioFormat->if->format->equals->if->sample->chunk->getFilePointer->chunk->available->new->ModelByteBuffer->setData->else->buffer->chunk->available->new->byteArr->sample->setData->read->avail->chunk->available->while->if->chunk->readFully->else->chunk->readFully->if->format->equals->new->DLSSampleOptions->readWsmpChunk->samples->add
DLSSoundbank#readWaveInfoChunk(DLSSample, RIFFReader)::: soundbank read wave info chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString
DLSSoundbank#save(String)::: soundbank save:::new->RIFFWriter->writeSoundbank
DLSSoundbank#save(File)::: soundbank save:::new->RIFFWriter->writeSoundbank
DLSSoundbank#save(OutputStream)::: soundbank save:::new->RIFFWriter->writeSoundbank
DLSSoundbank#writeSoundbank(RIFFWriter)::: soundbank write soundbank:::colh_chunk->writer->writeChunk->colh_chunk->instruments->size->writeUnsignedInt->if->vers_chunk->writer->writeChunk->vers_chunk->writeUnsignedInt->vers_chunk->writeUnsignedInt->writer->writeList->writeInstruments->ptbl->writer->writeChunk->ptbl->writeUnsignedInt->ptbl->samples->size->writeUnsignedInt->ptbl_offset->writer->getFilePointer->for->i->samples->size->wvpl->writer->writeList->off->wvpl->getFilePointer->offsettable->new->ArrayList<>->foreach->offsettable->Long->wvpl->getFilePointer->valueOf->add->wvpl->writeList->writeSample->bak->writer->getFilePointer->writer->seek->writer->setWriteOverride->foreach->writer->offset->longValue->writeUnsignedInt->writer->setWriteOverride->writer->seek->writer->writeList->writeInfo->writer->close
DLSSoundbank#writeSample(RIFFWriter, DLSSample)::: soundbank write sample:::audioformat->sample->getFormat->encoding->audioformat->getEncoding->sampleRate->audioformat->getSampleRate->sampleSizeInBits->audioformat->getSampleSizeInBits->channels->audioformat->getChannels->frameSize->audioformat->getFrameSize->frameRate->audioformat->getFrameRate->bigEndian->audioformat->isBigEndian->convert_needed->if->audioformat->getSampleSizeInBits->if->encoding->equals->else->if->encoding->equals->if->if->new->AudioFormat->fmt_chunk->writer->writeChunk->sampleformat->if->audioformat->getEncoding->equals->else->if->audioformat->getEncoding->equals->else->if->audioformat->getEncoding->equals->fmt_chunk->writeUnsignedShort->fmt_chunk->audioformat->getChannels->writeUnsignedShort->fmt_chunk->audioformat->getSampleRate->writeUnsignedInt->srate->audioformat->getFrameRate->audioformat->getFrameSize->fmt_chunk->writeUnsignedInt->fmt_chunk->audioformat->getFrameSize->writeUnsignedShort->fmt_chunk->audioformat->getSampleSizeInBits->writeUnsignedShort->fmt_chunk->write->fmt_chunk->write->writer->writeChunk->writeSampleOptions->if->data_chunk->writer->writeChunk->stream->AudioSystem->sample->getData->getAudioInputStream->buff->new->byteArr->ret->while->stream->read->data_chunk->write->else->data_chunk->writer->writeChunk->databuff->sample->getDataBuffer->databuff->writeTo->writer->writeList->writeInfo
DLSSoundbank#writeInstruments(RIFFWriter)::: soundbank write instruments:::foreach->writer->writeList->writeInstrument
DLSSoundbank#writeInstrument(RIFFWriter, DLSInstrument)::: soundbank write instrument:::art1_count->art2_count->foreach->instrument->getModulators->if->if->foreach->foreach->region->getModulators->if->if->version->if->insh_chunk->writer->writeChunk->insh_chunk->instrument->getRegions->size->writeUnsignedInt->insh_chunk->writeUnsignedInt->insh_chunk->writeUnsignedInt->lrgn->writer->writeList->foreach->writeRegion->instrument->getModulators->writeArticulators->writer->writeList->writeInfo
DLSSoundbank#writeArticulators(RIFFWriter, List)::: soundbank write articulators:::art1_count->art2_count->foreach->if->if->if->lar1->writer->writeList->art1->lar1->writeChunk->art1->writeUnsignedInt->art1->writeUnsignedInt->foreach->if->art1->writeUnsignedShort->art1->writeUnsignedShort->art1->writeUnsignedShort->art1->writeUnsignedShort->art1->writeInt->if->lar2->writer->writeList->art2->lar2->writeChunk->art2->writeUnsignedInt->art2->writeUnsignedInt->foreach->if->art2->writeUnsignedShort->art2->writeUnsignedShort->art2->writeUnsignedShort->art2->writeUnsignedShort->art2->writeInt
DLSSoundbank#writeRegion(RIFFWriter, DLSRegion, int)::: soundbank write region:::rgns->if->writer->writeList->if->writer->writeList->if->return->rgnh->rgns->writeChunk->rgnh->writeUnsignedShort->rgnh->writeUnsignedShort->rgnh->writeUnsignedShort->rgnh->writeUnsignedShort->rgnh->writeUnsignedShort->rgnh->writeUnsignedShort->if->rgns->writeChunk->writeSampleOptions->if->if->samples->indexOf->wlnk->rgns->writeChunk->wlnk->writeUnsignedShort->wlnk->writeUnsignedShort->wlnk->writeUnsignedInt->wlnk->samples->indexOf->writeUnsignedInt->region->getModulators->writeArticulators->rgns->close
DLSSoundbank#writeSampleOptions(RIFFWriter, DLSSampleOptions)::: soundbank write sample options:::wsmp->writeUnsignedInt->wsmp->writeUnsignedShort->wsmp->writeShort->wsmp->writeInt->wsmp->writeUnsignedInt->wsmp->size->writeInt->foreach->wsmp->writeUnsignedInt->wsmp->writeUnsignedInt->wsmp->writeUnsignedInt->wsmp->writeUnsignedInt
DLSSoundbank#writeInfoStringChunk(RIFFWriter, String, String)::: soundbank write info string chunk:::if->return->chunk->writer->writeChunk->chunk->writeString->len->value->getBytes->chunk->write->if->chunk->write
DLSSoundbank#writeInfo(RIFFWriter, DLSInfo)::: soundbank write info:::writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk
DLSSoundbank#getInfo()::: soundbank get info:::return
DLSSoundbank#getName()::: soundbank get name:::return
DLSSoundbank#getVersion()::: soundbank get version:::return
DLSSoundbank#getVendor()::: soundbank get vendor:::return
DLSSoundbank#getDescription()::: soundbank get description:::return
DLSSoundbank#setName(String)::: soundbank set name:::
DLSSoundbank#setVendor(String)::: soundbank set vendor:::
DLSSoundbank#setDescription(String)::: soundbank set description:::
DLSSoundbank#getResources()::: soundbank get resources:::resources->samples->size->new->SoundbankResourceArr->j->for->i->samples->size->return
DLSSoundbank#getInstruments()::: soundbank get instruments:::inslist_array->instruments->instruments->size->new->DLSInstrumentArr->toArray->Arrays->new->ModelInstrumentComparator->sort->return
DLSSoundbank#getSamples()::: soundbank get samples:::return->samples->samples->size->new->DLSSampleArr->toArray
DLSSoundbank#getInstrument(Patch)::: soundbank get instrument:::program->patch->getProgram->bank->patch->getBank->percussion->if->isPercussion->foreach->patch2->instrument->getPatch->program2->patch2->getProgram->bank2->patch2->getBank->if->percussion2->if->isPercussion->if->return->return
DLSSoundbank#addResource(SoundbankResource)::: soundbank add resource:::if->instruments->add->if->samples->add
DLSSoundbank#removeResource(SoundbankResource)::: soundbank remove resource:::if->instruments->remove->if->samples->remove
DLSSoundbank#addInstrument(DLSInstrument)::: soundbank add instrument:::instruments->add
DLSSoundbank#removeInstrument(DLSInstrument)::: soundbank remove instrument:::instruments->remove
DLSSoundbank#getMajor()::: soundbank get major:::return
DLSSoundbank#setMajor(long)::: soundbank set major:::
DLSSoundbank#getMinor()::: soundbank get minor:::return
DLSSoundbank#setMinor(long)::: soundbank set minor:::
DLSSoundbankReader#getSoundbank(URL)::: soundbank reader get soundbank:::try->return->new->DLSSoundbank->catch->return->return->finally
DLSSoundbankReader#getSoundbank(InputStream)::: soundbank reader get soundbank:::try->stream->mark->return->new->DLSSoundbank->catch->stream->reset->return->finally
DLSSoundbankReader#getSoundbank(File)::: soundbank reader get soundbank:::try->return->new->DLSSoundbank->catch->return->finally
EmergencySoundbank#createSoundbank()::: emergency soundbank create soundbank:::sf2->new->SF2Soundbank->sf2->setName->sf2->setVendor->sf2->setDescription->bass_drum->new_bass_drum->snare_drum->new_snare_drum->tom->new_tom->open_hihat->new_open_hihat->closed_hihat->new_closed_hihat->crash_cymbal->new_crash_cymbal->side_stick->new_side_stick->drums->new->SF2LayerArr->drum_instrument->new->SF2Instrument->drum_instrument->setName->drum_instrument->new->ModelPatch->setPatch->sf2->addInstrument->for->i->gpiano->new_gpiano->gpiano2->new_gpiano2->gpiano_hammer->new_piano_hammer->piano1->new_piano1->epiano1->new_epiano1->epiano2->new_epiano2->guitar->new_guitar1->guitar_pick->new_guitar_pick->guitar_dist->new_guitar_dist->bass1->new_bass1->bass2->new_bass2->synthbass->new_synthbass->string2->new_string2->orchhit->new_orchhit->choir->new_choir->solostring->new_solostring->organ->new_organ->ch_organ->new_ch_organ->bell->new_bell->flute->new_flute->timpani->new_timpani->melodic_toms->new_melodic_toms->trumpet->new_trumpet->trombone->new_trombone->brass_section->new_brass_section->horn->new_horn->sax->new_sax->oboe->new_oboe->bassoon->new_bassoon->clarinet->new_clarinet->reverse_cymbal->new_reverse_cymbal->defaultsound->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->ins->new->Patch->newInstrument->region->ins->getRegions->get->region->putInteger->region->putInteger->ins->getRegions->get->region->putInteger->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->slow_strings->new->Patch->newInstrument->region->slow_strings->getRegions->get->region->putInteger->region->putInteger->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->ins->new->Patch->newInstrument->ins->getRegions->get->region->putInteger->region->putInteger->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->new->Patch->newInstrument->ins->new->Patch->newInstrument->ins->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->ins->new->Patch->newInstrument->ins->getRegions->get->region->putInteger->region->putInteger->region->putInteger->new->Patch->newInstrument->ins->new->Patch->newInstrument->ins->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->new->Patch->newInstrument->new->Patch->newInstrument->foreach->sf2->getInstruments->patch->instrument->getPatch->if->if->isPercussion->continue->instrument->patch->getProgram->setName->return
EmergencySoundbank#new_bell(SF2Soundbank)::: emergency soundbank new_bell:::random->new->Random->x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_guitar1(SF2Soundbank)::: emergency soundbank new_guitar1:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_guitar_dist(SF2Soundbank)::: emergency soundbank new_guitar_dist:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample_dist->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_guitar_pick(SF2Soundbank)::: emergency soundbank new_guitar_pick:::datab->m->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->fadeUp->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_gpiano(SF2Soundbank)::: emergency soundbank new_gpiano:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_gpiano2(SF2Soundbank)::: emergency soundbank new_gpiano2:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_piano_hammer(SF2Soundbank)::: emergency soundbank new_piano_hammer:::datab->m->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->fadeUp->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_piano1(SF2Soundbank)::: emergency soundbank new_piano1:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->complexGaussianDist->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_epiano1(SF2Soundbank)::: emergency soundbank new_epiano1:::random->new->Random->x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_epiano2(SF2Soundbank)::: emergency soundbank new_epiano2:::random->new->Random->x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_bass1(SF2Soundbank)::: emergency soundbank new_bass1:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_synthbass(SF2Soundbank)::: emergency soundbank new_synthbass:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_bass2(SF2Soundbank)::: emergency soundbank new_bass2:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_solostring(SF2Soundbank)::: emergency soundbank new_solostring:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->aa->new->doubleArr->a->a_step->Math->pow->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_orchhit(SF2Soundbank)::: emergency soundbank new_orchhit:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_string2(SF2Soundbank)::: emergency soundbank new_string2:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_choir(SF2Soundbank)::: emergency soundbank new_choir:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_organ(SF2Soundbank)::: emergency soundbank new_organ:::random->new->Random->x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_ch_organ(SF2Soundbank)::: emergency soundbank new_ch_organ:::x->fftsize->data->new->doubleArr->base->start_w->end_w->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_flute(SF2Soundbank)::: emergency soundbank new_flute:::x->fftsize->data->new->doubleArr->base->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_horn(SF2Soundbank)::: emergency soundbank new_horn:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_trumpet(SF2Soundbank)::: emergency soundbank new_trumpet:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_brass_section(SF2Soundbank)::: emergency soundbank new_brass_section:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->w->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_trombone(SF2Soundbank)::: emergency soundbank new_trombone:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->aa->new->doubleArr->for->i->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_sax(SF2Soundbank)::: emergency soundbank new_sax:::x->fftsize->data->new->doubleArr->base->start_a->end_a->a->a_step->Math->pow->for->i->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_oboe(SF2Soundbank)::: emergency soundbank new_oboe:::x->fftsize->data->new->doubleArr->base->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_bassoon(SF2Soundbank)::: emergency soundbank new_bassoon:::x->fftsize->data->new->doubleArr->base->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_clarinet(SF2Soundbank)::: emergency soundbank new_clarinet:::x->fftsize->data->new->doubleArr->base->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->sample->newSimpleFFTSample->layer->newLayer->region->layer->getRegions->get->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->return
EmergencySoundbank#new_timpani(SF2Soundbank)::: emergency soundbank new_timpani:::datab->datah->fftlen->data->new->doubleArr->base->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->complexGaussianDist->new->Random->randomPhase->ifft->normalize->realPart->d_len->for->i->fadeUp->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->normalize->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_melodic_toms(SF2Soundbank)::: emergency soundbank new_melodic_toms:::datab->datah->fftlen->data->new->doubleArr->complexGaussianDist->new->Random->randomPhase->ifft->normalize->realPart->d_len->for->i->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->for->i->normalize->sample->newSimpleDrumSample->sample->setOriginalPitch->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_reverse_cymbal(SF2Soundbank)::: emergency soundbank new_reverse_cymbal:::datah->fftlen->data->new->doubleArr->random->new->Random->for->i->for->i->for->i->for->i->sample->newSimpleFFTSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_snare_drum(SF2Soundbank)::: emergency soundbank new_snare_drum:::datab->datah->fftlen->data->new->doubleArr->complexGaussianDist->new->Random->randomPhase->ifft->normalize->realPart->d_len->for->i->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->for->i->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_bass_drum(SF2Soundbank)::: emergency soundbank new_bass_drum:::datab->datah->fftlen->data->new->doubleArr->complexGaussianDist->complexGaussianDist->new->Random->randomPhase->ifft->normalize->realPart->d_len->for->i->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->for->i->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_tom(SF2Soundbank)::: emergency soundbank new_tom:::datab->datah->fftlen->data->new->doubleArr->complexGaussianDist->new->Random->randomPhase->ifft->normalize->realPart->d_len->for->i->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->for->i->normalize->sample->newSimpleDrumSample->sample->setOriginalPitch->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_closed_hihat(SF2Soundbank)::: emergency soundbank new_closed_hihat:::datah->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_open_hihat(SF2Soundbank)::: emergency soundbank new_open_hihat:::datah->fftlen->data->new->doubleArr->random->new->Random->for->i->for->i->for->i->for->i->sample->newSimpleFFTSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_crash_cymbal(SF2Soundbank)::: emergency soundbank new_crash_cymbal:::datah->fftlen->data->new->doubleArr->random->new->Random->for->i->for->i->for->i->for->i->sample->newSimpleFFTSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#new_side_stick(SF2Soundbank)::: emergency soundbank new_side_stick:::datab->fftlen->data->new->doubleArr->random->new->Random->for->i->fft->for->i->for->i->for->i->for->i->new->Random->randomPhase->ifft->normalize->realPart->gain->for->i->for->i->sample->newSimpleDrumSample->layer->new->SF2Layer->layer->setName->global->new->SF2GlobalRegion->layer->setGlobalZone->sf2->addResource->region->new->SF2LayerRegion->region->putInteger->region->putInteger->region->putInteger->region->setSample->layer->getRegions->add->return
EmergencySoundbank#newSimpleFFTSample(SF2Soundbank, String, double[], double)::: emergency soundbank new simple sample:::return->newSimpleFFTSample
EmergencySoundbank#newSimpleFFTSample(SF2Soundbank, String, double[], double, int)::: emergency soundbank new simple sample:::fftsize->format->new->AudioFormat->basefreq->format->getSampleRate->randomPhase->ifft->realPart->normalize->fdata->toFloat->loopExtend->fadeUp->bdata->toBytes->sample->new->SF2Sample->sample->setName->sample->setData->sample->setStartLoop->sample->setEndLoop->sample->format->getSampleRate->setSampleRate->orgnote->Math->log->Math->log->sample->setOriginalPitch->sample->setPitchCorrection->sf2->addResource->return
EmergencySoundbank#newSimpleFFTSample_dist(SF2Soundbank, String, double[], double, double)::: emergency soundbank new simple sample_dist:::fftsize->format->new->AudioFormat->basefreq->format->getSampleRate->randomPhase->ifft->realPart->for->i->normalize->fdata->toFloat->loopExtend->fadeUp->bdata->toBytes->sample->new->SF2Sample->sample->setName->sample->setData->sample->setStartLoop->sample->setEndLoop->sample->format->getSampleRate->setSampleRate->orgnote->Math->log->Math->log->sample->setOriginalPitch->sample->setPitchCorrection->sf2->addResource->return
EmergencySoundbank#newSimpleDrumSample(SF2Soundbank, String, double[])::: emergency soundbank new simple drum sample:::fftsize->format->new->AudioFormat->bdata->realPart->toFloat->toBytes->sample->new->SF2Sample->sample->setName->sample->setData->sample->setStartLoop->sample->setEndLoop->sample->format->getSampleRate->setSampleRate->sample->setOriginalPitch->sf2->addResource->return
EmergencySoundbank#newLayer(SF2Soundbank, String, SF2Sample)::: emergency soundbank new layer:::region->new->SF2LayerRegion->region->setSample->layer->new->SF2Layer->layer->setName->layer->getRegions->add->sf2->addResource->return
EmergencySoundbank#newInstrument(SF2Soundbank, String, Patch, SF2Layer...)::: emergency soundbank new instrument:::ins->new->SF2Instrument->ins->setPatch->ins->setName->sf2->addInstrument->for->i->return
EmergencySoundbank#ifft(double[])::: emergency soundbank ifft:::new->FFT->transform
EmergencySoundbank#fft(double[])::: emergency soundbank fft:::new->FFT->transform
EmergencySoundbank#complexGaussianDist(double[], double, double, double)::: emergency soundbank complex gaussian dist:::for->x
EmergencySoundbank#randomPhase(double[])::: emergency soundbank random phase:::for->i
EmergencySoundbank#randomPhase(double[], Random)::: emergency soundbank random phase:::for->i
EmergencySoundbank#normalize(double[], double)::: emergency soundbank normalize:::maxvalue->for->i->if->return->gain->for->i
EmergencySoundbank#normalize(float[], double)::: emergency soundbank normalize:::maxvalue->for->i->gain->for->i
EmergencySoundbank#realPart(double[])::: emergency soundbank real part:::out->new->doubleArr->for->i->return
EmergencySoundbank#imgPart(double[])::: emergency soundbank img part:::out->new->doubleArr->for->i->return
EmergencySoundbank#toFloat(double[])::: emergency soundbank to float:::out->new->floatArr->for->i->return
EmergencySoundbank#toBytes(float[], AudioFormat)::: emergency soundbank to bytes:::out->format->getFrameSize->new->byteArr->return->AudioFloatConverter->getConverter->toByteArray
EmergencySoundbank#fadeUp(double[], int)::: emergency soundbank fade up:::dsamples->for->i
EmergencySoundbank#fadeUp(float[], int)::: emergency soundbank fade up:::dsamples->for->i
EmergencySoundbank#loopExtend(double[], int)::: emergency soundbank loop extend:::outdata->new->doubleArr->p_len->p_ps->for->i->return
EmergencySoundbank#loopExtend(float[], int)::: emergency soundbank loop extend:::outdata->new->floatArr->p_len->p_ps->for->i->return
EventDispatcher#start():::This start() method starts an event thread if one is not already active.:::if->JSSecurityManager->createThread
EventDispatcher#processEvent(EventInfo):::Invoked when there is at least one event in the queue:::count->eventInfo->getListenerCount->if->eventInfo->getEvent->event->eventInfo->getEvent->if->Printer->debug->for->i->return->if->eventInfo->getEvent->event->eventInfo->getEvent->for->i->return->if->eventInfo->getEvent->event->eventInfo->getEvent->status->event->getStatus->if->for->i->return->Printer->eventInfo->getEvent->err
EventDispatcher#dispatchEvents():::Wait until there is something in the event queue to process:::eventInfo->synchronized->try->if->eventQueue->size->if->autoClosingClips->size->lineMonitors->size->waitTime->if->lineMonitors->size->wait->else->wait->catch->finally->if->eventQueue->size->eventQueue->remove->if->processEvent->else->if->autoClosingClips->size->closeAutoClosingClips->if->lineMonitors->size->monitorLines
EventDispatcher#postEvent(EventInfo):::Queue the given event in the event queue.:::eventQueue->add->notifyAll
EventDispatcher#run():::A loop to dispatch events.:::while->try->dispatchEvents->catch->if->t->printStackTrace->finally
EventDispatcher#sendAudioEvents(Object, List):::Send audio and MIDI events.:::if->listeners->size->return->start->eventInfo->new->EventInfo->postEvent
EventDispatcher#closeAutoClosingClips()::: event dispatcher close auto closing clips:::synchronized->if->Printer->autoClosingClips->size->debug->currTime->System->currentTimeMillis->for->i->autoClosingClips->size->if->Printer->autoClosingClips->size->debug
EventDispatcher#getAutoClosingClipIndex(AutoClosingClip)::: event dispatcher get auto closing clip index:::synchronized->for->i->autoClosingClips->size->return
EventDispatcher#autoClosingClipOpened(AutoClosingClip):::called from auto-closing clips when one of their open() method is called.:::if->Printer->debug->index->synchronized->getAutoClosingClipIndex->if->if->Printer->debug->autoClosingClips->new->ClipInfo->add->if->synchronized->notifyAll->if->Printer->autoClosingClips->size->debug
EventDispatcher#autoClosingClipClosed(AutoClosingClip):::called from auto-closing clips when their closed() method is called.:::synchronized->index->getAutoClosingClipIndex->if->autoClosingClips->remove
EventDispatcher#monitorLines()::: event dispatcher monitor lines:::synchronized->if->Printer->lineMonitors->size->debug->for->i->lineMonitors->size->if->Printer->lineMonitors->size->debug
EventDispatcher#addLineMonitor(LineMonitor):::Add this LineMonitor instance to the list of monitors.:::if->Printer->trace->synchronized->if->lineMonitors->indexOf->if->Printer->trace->return->if->Printer->debug->lineMonitors->add->synchronized->notifyAll->if->Printer->lineMonitors->size->debug
EventDispatcher#removeLineMonitor(LineMonitor):::Remove this LineMonitor instance from the list of monitors.:::if->Printer->trace->synchronized->if->lineMonitors->indexOf->if->Printer->trace->return->if->Printer->debug->lineMonitors->remove->if->Printer->lineMonitors->size->debug
EventDispatcher.EventInfo#getEvent()::: event info get event:::return
EventDispatcher.EventInfo#getListenerCount()::: event info get listener count:::return
EventDispatcher.EventInfo#getListener(int)::: event info get listener:::return
EventDispatcher.ClipInfo#getClip()::: clip info get clip:::return
EventDispatcher.ClipInfo#isExpired(long)::: clip info is expired:::return
EventDispatcher.LineMonitor#checkLine():::Called by event dispatcher in regular intervals.:::
FastShortMessage#getPackedMsg()::: fast short message get packed msg:::return
FastShortMessage#getMessage()::: fast short message get message:::length->try->getDataLength->catch->finally->returnedArray->new->byteArr->if->if->if->return
FastShortMessage#getLength()::: fast short message get length:::try->return->getDataLength->catch->finally->return
FastShortMessage#setMessage(int)::: fast short message set message:::dataLength->getDataLength->if->super->setMessage
FastShortMessage#setMessage(int, int, int)::: fast short message set message:::getDataLength
FastShortMessage#setMessage(int, int, int, int)::: fast short message set message:::getDataLength
FastShortMessage#getChannel()::: fast short message get channel:::return
FastShortMessage#getCommand()::: fast short message get command:::return
FastShortMessage#getData1()::: fast short message get data1:::return
FastShortMessage#getData2()::: fast short message get data2:::return
FastShortMessage#getStatus()::: fast short message get status:::return
FastShortMessage#clone():::Creates a new object of the same class and with the same contents as this object.:::try->return->new->FastShortMessage->catch->finally->return
FastSysexMessage#getReadOnlyMessage():::The returned array may be larger than this message is:::return
FastSysexMessage#setMessage(byte[], int)::: fast sysex message set message:::if->super->setMessage->new->byteArr->System->arraycopy
FFT#transform(double[])::: t transform:::bitreversal->calc
FFT#computeTwiddleFactors(int, int)::: t compute twiddle factors:::imax->Math->log->Math->log->warray->new->doubleArr->w_index->for->i->nstep->w_index2->for->i->nstep->return
FFT#calc(int, double[], int, double[])::: t calc:::fftFrameSize2->nstep->if->return->i->if->calcF4F->else->calcF4I
FFT#calcF2E(int, double[], int, int, double[])::: t calc f2 e:::jmax->for->n->return
FFT#calcF4F(int, double[], int, int, double[])::: t calc f4 f:::fftFrameSize2->w_len->while->if->calcF4FE->return->jmax->nnstep->if->calcF2E->return->ii->iii->for->n->for->j->calcF2E
FFT#calcF4I(int, double[], int, int, double[])::: t calc f4 i:::fftFrameSize2->w_len->while->if->calcF4IE->return->jmax->nnstep->if->calcF2E->return->ii->iii->for->n->for->j->calcF2E
FFT#calcF4FE(int, double[], int, int, double[])::: t calc f4 e:::fftFrameSize2->w_len->while->jmax->nnstep->if->calcF2E->return->ii->iii->for->n
FFT#calcF4IE(int, double[], int, int, double[])::: t calc f4 e:::fftFrameSize2->w_len->while->jmax->nnstep->if->calcF2E->return->ii->iii->for->n
FFT#bitreversal(double[])::: t bitreversal:::if->return->inverse->for->i
JARSoundbankReader#isZIP(URL)::: soundbank reader is p:::ok->try->stream->url->openStream->try->buff->new->byteArr->stream->read->if->catch->finally->stream->close->catch->finally->return
JARSoundbankReader#getSoundbank(URL)::: soundbank reader get soundbank:::if->isZIP->return->soundbanks->new->ArrayList<>->ucl->URLClassLoader->new->URLArr->newInstance->stream->ucl->getResourceAsStream->if->return->try->r->new->InputStreamReader->new->BufferedReader->line->r->readLine->while->if->line->startsWith->try->c->Class->line->trim->forName->if->isAssignableFrom->ReflectUtil->checkPackageAccess->o->c->newInstance->soundbanks->add->catch->finally->r->readLine->catch->finally->stream->close->if->soundbanks->size->return->if->soundbanks->size->return->soundbanks->get->sbk->new->SimpleSoundbank->foreach->sbk->addAllInstruments->return
JARSoundbankReader#getSoundbank(InputStream)::: soundbank reader get soundbank:::Objects->requireNonNull->return
JARSoundbankReader#getSoundbank(File)::: soundbank reader get soundbank:::return->file->toURI->toURL->getSoundbank
JavaSoundAudioClip#create(URLConnection)::: java sound audio clip create:::clip->new->JavaSoundAudioClip->try->clip->uc->getInputStream->init->catch->finally->return
JavaSoundAudioClip#create(URL)::: java sound audio clip create:::clip->new->JavaSoundAudioClip->try->clip->url->openStream->init->catch->finally->return
JavaSoundAudioClip#init(InputStream)::: java sound audio clip init:::if->Printer->debug->bis->new->BufferedInputStream->bis->mark->try->as->AudioSystem->getAudioInputStream->loadAudioData->if->if->createClip->if->createSourceDataLine->catch->try->mff->MidiSystem->getMidiFileFormat->createSequencer->catch->finally->finally
JavaSoundAudioClip#play()::: java sound audio clip play:::if->return->startImpl
JavaSoundAudioClip#loop()::: java sound audio clip loop:::if->return->startImpl
JavaSoundAudioClip#startImpl(boolean)::: java sound audio clip start impl:::currentTime->System->currentTimeMillis->diff->if->if->Printer->debug->return->if->Printer->debug->try->if->clip->setAutoClosing->try->if->clip->isOpen->clip->open->else->clip->flush->if->clip->stop->clip->setFramePosition->if->clip->loop->else->clip->start->catch->finally->clip->setAutoClosing->else->if->datapusher->start->if->Printer->debug->else->if->if->sequencer->isRunning->sequencer->setMicrosecondPosition->if->sequencer->isOpen->try->sequencer->open->sequencer->setSequence->catch->if->e1->printStackTrace->if->e2->printStackTrace->finally->sequencer->addMetaEventListener->try->sequencer->start->catch->if->e->printStackTrace->finally->if->Printer->debug->catch->if->e->printStackTrace->finally
JavaSoundAudioClip#stop()::: java sound audio clip stop:::if->return->if->Printer->debug->if->try->if->Printer->trace->clip->flush->catch->if->e1->printStackTrace->finally->try->if->Printer->trace->clip->stop->catch->if->e2->printStackTrace->finally->if->Printer->debug->else->if->datapusher->stop->if->Printer->debug->else->if->try->sequencer->removeMetaEventListener->sequencer->stop->catch->if->e3->printStackTrace->finally->try->sequencer->close->catch->if->e4->printStackTrace->finally->if->Printer->debug
JavaSoundAudioClip#update(LineEvent)::: java sound audio clip update:::if->Printer->debug
JavaSoundAudioClip#meta(MetaMessage)::: java sound audio clip meta:::if->Printer->debug->if->message->getType->if->sequencer->setMicrosecondPosition->loop->else->stop
JavaSoundAudioClip#toString()::: java sound audio clip to string:::return->getClass->toString
JavaSoundAudioClip#finalize()::: java sound audio clip finalize:::if->if->Printer->trace->clip->close->if->datapusher->close->if->sequencer->close
JavaSoundAudioClip#loadAudioData(AudioInputStream)::: java sound audio clip load audio data:::if->Printer->debug->Toolkit->getPCMConvertedAudioInputStream->if->return->as->getFormat->frameLen->as->getFrameLength->frameSize->loadedAudioFormat->getFrameSize->byteLen->if->if->readStream->else->readStream->return
JavaSoundAudioClip#readStream(AudioInputStream, long)::: java sound audio clip read stream:::intLen->if->else->new->byteArr->while->bytesRead->as->read->if->as->close->break
JavaSoundAudioClip#readStream(AudioInputStream)::: java sound audio clip read stream:::baos->new->DirectBAOS->buffer->new->byteArr->bytesRead->totalBytesRead->while->as->read->if->as->close->break->baos->write->baos->getInternalBuffer
JavaSoundAudioClip#createClip()::: java sound audio clip create clip:::if->Printer->debug->try->info->new->DataLine.Info->if->AudioSystem->isLineSupported->if->Printer->err->return->line->AudioSystem->getLine->if->if->Printer->err->return->clip->setAutoClosing->if->clip->addLineListener->catch->if->e->printStackTrace->return->finally->if->return->if->Printer->debug->return
JavaSoundAudioClip#createSourceDataLine()::: java sound audio clip create source data line:::if->Printer->debug->try->info->new->DataLine.Info->if->AudioSystem->isLineSupported->if->Printer->err->return->source->AudioSystem->getLine->new->DataPusher->catch->if->e->printStackTrace->return->finally->if->return->if->Printer->debug->return
JavaSoundAudioClip#createSequencer(BufferedInputStream)::: java sound audio clip create sequencer:::if->Printer->debug->try->MidiSystem->getSequencer->catch->if->me->printStackTrace->return->finally->if->return->try->MidiSystem->getSequence->if->return->catch->if->e->printStackTrace->return->finally->if->Printer->debug->return
JavaSoundAudioClip.DirectBAOS#getInternalBuffer()::: direct s get internal buffer:::return
JDK13Services#getProviders(Class):::Obtains a List containing installed instances of the providers for the requested service:::providers->if->equals->equals->equals->equals->equals->equals->equals->equals->new->ArrayList<>->else->JSSecurityManager->getProviders->return->Collections->unmodifiableList
JDK13Services#getDefaultProviderClassName(Class):::Obtain the provider class name part of a default provider property.:::value->defaultProviderSpec->getDefaultProvider->if->hashpos->defaultProviderSpec->indexOf->if->else->if->defaultProviderSpec->substring->else->return
JDK13Services#getDefaultInstanceName(Class):::Obtain the instance name part of a default provider property.:::value->defaultProviderSpec->getDefaultProvider->if->hashpos->defaultProviderSpec->indexOf->if->defaultProviderSpec->length->defaultProviderSpec->substring->return
JDK13Services#getDefaultProvider(Class):::Obtain the value of a default provider property.:::if->equals->equals->equals->equals->equals->equals->equals->equals->return->name->typeClass->getName->value->AccessController->System->getProperty->doPrivileged->if->getProperties->getProperty->if->equals->return
JDK13Services#getProperties():::Obtain a properties bundle containing property values from the         properties file:::if->new->Properties->JSSecurityManager->loadProperties->return
JSSecurityManager#checkRecordPermission()::: security manager check record permission:::if->Printer->trace->sm->System->getSecurityManager->if->sm->new->AudioPermission->checkPermission
JSSecurityManager#loadProperties(Properties):::Load properties from a file:::customFile->AccessController->System->getProperty->doPrivileged->if->if->loadPropertiesImpl->return->AccessController->home->System->getProperty->if->throw->new->Error->loadPropertiesImpl->return->doPrivileged
JSSecurityManager#loadPropertiesImpl(Properties, String, String...)::: security manager load properties impl:::fname->Paths->get->try->reader->Files->newBufferedReader->properties->load->return->catch->return->finally
JSSecurityManager#createThread(Runnable, String, boolean, int, boolean):::Create a Thread in the current ThreadGroup.:::name->thread->new->Thread->thread->setDaemon->if->thread->setPriority->if->thread->start->return
JSSecurityManager#getProviders(Class)::: security manager get providers:::p->new->ArrayList<>->psAction->new->PrivilegedAction<Iterator<T>>->ps->AccessController->doPrivileged->hasNextAction->new->PrivilegedAction<Boolean>->while->AccessController->doPrivileged->try->provider->ps->next->if->providerClass->isInstance->p->add->catch->if->t->printStackTrace->finally->return
MidiDeviceReceiverEnvelope#close()::: midi device receiver envelope close:::receiver->close
MidiDeviceReceiverEnvelope#send(MidiMessage, long)::: midi device receiver envelope send:::receiver->send
MidiDeviceReceiverEnvelope#getMidiDevice()::: midi device receiver envelope get midi device:::return
MidiDeviceReceiverEnvelope#getReceiver():::Obtains the receiver enveloped by this MidiDeviceReceiverEnvelope object.:::return
MidiDeviceTransmitterEnvelope#setReceiver(Receiver)::: midi device transmitter envelope set receiver:::transmitter->setReceiver
MidiDeviceTransmitterEnvelope#getReceiver()::: midi device transmitter envelope get receiver:::return->transmitter->getReceiver
MidiDeviceTransmitterEnvelope#close()::: midi device transmitter envelope close:::transmitter->close
MidiDeviceTransmitterEnvelope#getMidiDevice()::: midi device transmitter envelope get midi device:::return
MidiDeviceTransmitterEnvelope#getTransmitter():::Obtains the transmitter enveloped by this MidiDeviceTransmitterEnvelope object.:::return
MidiInDevice#implOpen()::: midi in device impl open:::if->Printer->trace->index->getDeviceInfo->getIndex->nOpen->if->throw->new->MidiUnavailableException->if->JSSecurityManager->createThread->nStart->if->Printer->trace
MidiInDevice#implClose()::: midi in device impl close:::if->Printer->trace->oldId->super->implClose->nStop->if->try->midiInThread->join->catch->finally->nClose->if->Printer->trace
MidiInDevice#getMicrosecondPosition()::: midi in device get microsecond position:::timestamp->if->isOpen->nGetTimeStamp->return
MidiInDevice#hasTransmitters()::: midi in device has transmitters:::return
MidiInDevice#createTransmitter()::: midi in device create transmitter:::return->new->MidiInTransmitter
MidiInDevice#run()::: midi in device run:::while->nGetMessages->if->try->Thread->sleep->catch->finally->if->Printer->verbose
MidiInDevice#callbackShortMessage(int, long):::Callback from native code when a short MIDI event is received from hardware.:::if->return->getTransmitterList->sendMessage
MidiInDevice#callbackLongMessage(byte[], long)::: midi in device callback long message:::if->return->getTransmitterList->sendMessage
MidiInDevice#nOpen(int)::: midi in device n open:::
MidiInDevice#nClose(long)::: midi in device n close:::
MidiInDevice#nStart(long)::: midi in device n start:::
MidiInDevice#nStop(long)::: midi in device n stop:::
MidiInDevice#nGetTimeStamp(long)::: midi in device n get time stamp:::
MidiInDevice#nGetMessages(long)::: midi in device n get messages:::
MidiInDeviceProvider#createInfo(int)::: midi in device provider create info:::if->return->return->new->MidiInDeviceInfo
MidiInDeviceProvider#createDevice(AbstractMidiDeviceProvider.Info)::: midi in device provider create device:::if->return->new->MidiInDevice->return
MidiInDeviceProvider#getNumDevices()::: midi in device provider get num devices:::if->if->Printer->debug->return->numDevices->nGetNumDevices->if->Printer->debug->return
MidiInDeviceProvider#getDeviceCache()::: midi in device provider get device cache:::return
MidiInDeviceProvider#setDeviceCache(MidiDevice[])::: midi in device provider set device cache:::
MidiInDeviceProvider#getInfoCache()::: midi in device provider get info cache:::return
MidiInDeviceProvider#setInfoCache(Info[])::: midi in device provider set info cache:::
MidiInDeviceProvider#nGetNumDevices()::: midi in device provider n get num devices:::
MidiInDeviceProvider#nGetName(int)::: midi in device provider n get name:::
MidiInDeviceProvider#nGetVendor(int)::: midi in device provider n get vendor:::
MidiInDeviceProvider#nGetDescription(int)::: midi in device provider n get description:::
MidiInDeviceProvider#nGetVersion(int)::: midi in device provider n get version:::
MidiOutDevice#implOpen()::: midi out device impl open:::if->Printer->trace->index->getDeviceInfo->getIndex->nOpen->if->throw->new->MidiUnavailableException->if->Printer->trace
MidiOutDevice#implClose()::: midi out device impl close:::if->Printer->trace->oldId->super->implClose->nClose->if->Printer->trace
MidiOutDevice#getMicrosecondPosition()::: midi out device get microsecond position:::timestamp->if->isOpen->nGetTimeStamp->return
MidiOutDevice#hasReceivers():::Returns if this device supports Receivers:::return
MidiOutDevice#createReceiver()::: midi out device create receiver:::return->new->MidiOutReceiver
MidiOutDevice.MidiOutReceiver#implSend(MidiMessage, long)::: midi out receiver impl send:::length->message->getLength->status->message->getStatus->if->packedMsg->if->if->getPackedMsg->else->msg->msg->getData1->msg->getData2->else->data->message->getMessage->if->if->if->return->if->nSendShortMessage->else->data->if->getReadOnlyMessage->else->message->getMessage->dataLength->Math->min->if->nSendLongMessage
MidiOutDevice.MidiOutReceiver#sendPackedMidiMessage(int, long):::shortcut for the Sun implementation:::if->isOpen->nSendShortMessage
MidiOutDevice#nOpen(int)::: midi out device n open:::
MidiOutDevice#nClose(long)::: midi out device n close:::
MidiOutDevice#nSendShortMessage(long, int, long)::: midi out device n send short message:::
MidiOutDevice#nSendLongMessage(long, byte[], int, long)::: midi out device n send long message:::
MidiOutDevice#nGetTimeStamp(long)::: midi out device n get time stamp:::
MidiOutDeviceProvider#createInfo(int)::: midi out device provider create info:::if->return->return->new->MidiOutDeviceInfo
MidiOutDeviceProvider#createDevice(AbstractMidiDeviceProvider.Info)::: midi out device provider create device:::if->return->new->MidiOutDevice->return
MidiOutDeviceProvider#getNumDevices()::: midi out device provider get num devices:::if->if->Printer->debug->return->return->nGetNumDevices
MidiOutDeviceProvider#getDeviceCache()::: midi out device provider get device cache:::return
MidiOutDeviceProvider#setDeviceCache(MidiDevice[])::: midi out device provider set device cache:::
MidiOutDeviceProvider#getInfoCache()::: midi out device provider get info cache:::return
MidiOutDeviceProvider#setInfoCache(Info[])::: midi out device provider set info cache:::
MidiOutDeviceProvider#nGetNumDevices()::: midi out device provider n get num devices:::
MidiOutDeviceProvider#nGetName(int)::: midi out device provider n get name:::
MidiOutDeviceProvider#nGetVendor(int)::: midi out device provider n get vendor:::
MidiOutDeviceProvider#nGetDescription(int)::: midi out device provider n get description:::
MidiOutDeviceProvider#nGetVersion(int)::: midi out device provider n get version:::
MidiUtils#unsupportedDevice(MidiDevice.Info):::Returns an exception which should be thrown if MidiDevice is unsupported.:::return->String->format->new->IllegalArgumentException
MidiUtils#isMetaEndOfTrack(MidiMessage):::return true if the passed message is Meta End Of Track:::if->midiMsg->getLength->midiMsg->getStatus->return->msg->midiMsg->getMessage->return
MidiUtils#isMetaTempo(MidiMessage):::return if the given message is a meta tempo message:::if->midiMsg->getLength->midiMsg->getStatus->return->msg->midiMsg->getMessage->return
MidiUtils#getTempoMPQ(MidiMessage):::parses this message for a META tempo message and returns the tempo in MPQ, or -1 if this isn't a tempo message:::if->midiMsg->getLength->midiMsg->getStatus->return->msg->midiMsg->getMessage->if->return->tempo->return
MidiUtils#convertTempo(double):::converts<br> 1 - MPQ-Tempo to BPM tempo<br> 2 - BPM tempo to MPQ tempo<br>:::if->return
MidiUtils#ticks2microsec(long, double, int):::convert tick to microsecond with given tempo:::return
MidiUtils#microsec2ticks(long, double, int):::convert tempo to microsecond with given tempo Does not take tempo changes into account:::return
MidiUtils#tick2microsecond(Sequence, long, TempoCache):::Given a tick, convert to microsecond:::if->seq->getDivisionType->seconds->seq->getDivisionType->seq->getResolution->return->if->new->TempoCache->resolution->seq->getResolution->ticks->tempos->cacheCount->snapshotIndex->snapshotMicro->us->if->if->i->while->ticks2microsec->ticks2microsec->return
MidiUtils#microsecond2tick(Sequence, long, TempoCache):::Given a microsecond time, convert to tick:::if->seq->getDivisionType->dTick->seq->getDivisionType->seq->getResolution->tick->if->cache->getTempoMPQAt->return->if->new->TempoCache->ticks->tempos->cacheCount->resolution->seq->getResolution->us->tick->newReadPos->i->if->while->nextTime->ticks2microsec->if->break->microsec2ticks->if->Printer->debug->return
MidiUtils#tick2index(Track, long):::Binary search for the event indexes of the track:::ret->if->low->high->track->size->while->t->track->get->getTick->if->break->else->if->if->break->else->return
MidiUtils.TempoCache#refresh(Sequence)::: tempo cache refresh:::list->new->ArrayList<>->tracks->seq->getTracks->if->track->c->track->size->for->i->size->list->size->if->list->get->getTick->new->longArr->new->intArr->e->if->for->i->list->size
MidiUtils.TempoCache#getCurrTempoMPQ()::: tempo cache get curr tempo q:::return
MidiUtils.TempoCache#getTempoMPQAt(long)::: tempo cache get tempo at:::return->getTempoMPQAt
MidiUtils.TempoCache#getTempoMPQAt(long, float)::: tempo cache get tempo at:::for->i->return
ModelAbstractChannelMixer#process(float[][], int, int)::: model abstract channel mixer process:::
ModelAbstractChannelMixer#stop()::: model abstract channel mixer stop:::
ModelAbstractChannelMixer#allNotesOff()::: model abstract channel mixer all notes off:::
ModelAbstractChannelMixer#allSoundOff()::: model abstract channel mixer all sound off:::
ModelAbstractChannelMixer#controlChange(int, int)::: model abstract channel mixer control change:::
ModelAbstractChannelMixer#getChannelPressure()::: model abstract channel mixer get channel pressure:::return
ModelAbstractChannelMixer#getController(int)::: model abstract channel mixer get controller:::return
ModelAbstractChannelMixer#getMono()::: model abstract channel mixer get mono:::return
ModelAbstractChannelMixer#getMute()::: model abstract channel mixer get mute:::return
ModelAbstractChannelMixer#getOmni()::: model abstract channel mixer get omni:::return
ModelAbstractChannelMixer#getPitchBend()::: model abstract channel mixer get pitch bend:::return
ModelAbstractChannelMixer#getPolyPressure(int)::: model abstract channel mixer get poly pressure:::return
ModelAbstractChannelMixer#getProgram()::: model abstract channel mixer get program:::return
ModelAbstractChannelMixer#getSolo()::: model abstract channel mixer get solo:::return
ModelAbstractChannelMixer#localControl(boolean)::: model abstract channel mixer local control:::return
ModelAbstractChannelMixer#noteOff(int)::: model abstract channel mixer note off:::
ModelAbstractChannelMixer#noteOff(int, int)::: model abstract channel mixer note off:::
ModelAbstractChannelMixer#noteOn(int, int)::: model abstract channel mixer note on:::
ModelAbstractChannelMixer#programChange(int)::: model abstract channel mixer program change:::
ModelAbstractChannelMixer#programChange(int, int)::: model abstract channel mixer program change:::
ModelAbstractChannelMixer#resetAllControllers()::: model abstract channel mixer reset all controllers:::
ModelAbstractChannelMixer#setChannelPressure(int)::: model abstract channel mixer set channel pressure:::
ModelAbstractChannelMixer#setMono(boolean)::: model abstract channel mixer set mono:::
ModelAbstractChannelMixer#setMute(boolean)::: model abstract channel mixer set mute:::
ModelAbstractChannelMixer#setOmni(boolean)::: model abstract channel mixer set omni:::
ModelAbstractChannelMixer#setPitchBend(int)::: model abstract channel mixer set pitch bend:::
ModelAbstractChannelMixer#setPolyPressure(int, int)::: model abstract channel mixer set poly pressure:::
ModelAbstractChannelMixer#setSolo(boolean)::: model abstract channel mixer set solo:::
ModelAbstractOscillator#init()::: model abstract oscillator init:::
ModelAbstractOscillator#close()::: model abstract oscillator close:::
ModelAbstractOscillator#noteOff(int)::: model abstract oscillator note off:::
ModelAbstractOscillator#noteOn(MidiChannel, VoiceStatus, int, int)::: model abstract oscillator note on:::
ModelAbstractOscillator#read(float[][], int, int)::: model abstract oscillator read:::return
ModelAbstractOscillator#getChannel()::: model abstract oscillator get channel:::return
ModelAbstractOscillator#getVoice()::: model abstract oscillator get voice:::return
ModelAbstractOscillator#getNoteNumber()::: model abstract oscillator get note number:::return
ModelAbstractOscillator#getVelocity()::: model abstract oscillator get velocity:::return
ModelAbstractOscillator#isOn()::: model abstract oscillator is on:::return
ModelAbstractOscillator#setPitch(float)::: model abstract oscillator set pitch:::
ModelAbstractOscillator#getPitch()::: model abstract oscillator get pitch:::return
ModelAbstractOscillator#setSampleRate(float)::: model abstract oscillator set sample rate:::
ModelAbstractOscillator#getSampleRate()::: model abstract oscillator get sample rate:::return
ModelAbstractOscillator#getAttenuation()::: model abstract oscillator get attenuation:::return
ModelAbstractOscillator#getChannels()::: model abstract oscillator get channels:::return
ModelAbstractOscillator#getName()::: model abstract oscillator get name:::return->getClass->getName
ModelAbstractOscillator#getPatch()::: model abstract oscillator get patch:::return->new->Patch
ModelAbstractOscillator#open(float)::: model abstract oscillator open:::oscs->try->this->getClass->newInstance->catch->throw->new->IllegalArgumentException->finally->oscs->setSampleRate->oscs->init->return
ModelAbstractOscillator#getPerformer()::: model abstract oscillator get performer:::performer->new->ModelPerformer->performer->getOscillators->add->return
ModelAbstractOscillator#getInstrument()::: model abstract oscillator get instrument:::ins->new->SimpleInstrument->ins->getName->setName->ins->getPerformer->add->ins->getPatch->setPatch->return
ModelAbstractOscillator#getSoundBank()::: model abstract oscillator get sound bank:::sbk->new->SimpleSoundbank->sbk->getInstrument->addInstrument->return
ModelAbstractOscillator#getDescription()::: model abstract oscillator get description:::return->getName
ModelAbstractOscillator#getInstrument(Patch)::: model abstract oscillator get instrument:::ins->getInstrument->p->ins->getPatch->if->p->getBank->patch->getBank->return->if->p->getProgram->patch->getProgram->return->if->if->isPercussion->isPercussion->return->return
ModelAbstractOscillator#getInstruments()::: model abstract oscillator get instruments:::return->new->InstrumentArr->getInstrument
ModelAbstractOscillator#getResources()::: model abstract oscillator get resources:::return->new->SoundbankResourceArr
ModelAbstractOscillator#getVendor()::: model abstract oscillator get vendor:::return
ModelAbstractOscillator#getVersion()::: model abstract oscillator get version:::return
ModelByteBuffer.RandomFileInputStream#available()::: random file input stream available:::if->return->return
ModelByteBuffer.RandomFileInputStream#mark(int)::: random file input stream mark:::try->raf->getFilePointer->catch->finally
ModelByteBuffer.RandomFileInputStream#markSupported()::: random file input stream mark supported:::return
ModelByteBuffer.RandomFileInputStream#reset()::: random file input stream reset:::raf->seek
ModelByteBuffer.RandomFileInputStream#skip(long)::: random file input stream skip:::if->return->if->p->raf->getFilePointer->raf->seek->return
ModelByteBuffer.RandomFileInputStream#read(byte[], int, int)::: random file input stream read:::if->if->return->raf->read->if->return->return
ModelByteBuffer.RandomFileInputStream#read(byte[])::: random file input stream read:::len->if->if->return->raf->read->if->return->return
ModelByteBuffer.RandomFileInputStream#read()::: random file input stream read:::if->return->b->raf->read->if->return->return
ModelByteBuffer.RandomFileInputStream#close()::: random file input stream close:::raf->close
ModelByteBuffer#writeTo(OutputStream)::: model byte buffer write to:::if->try->is->getInputStream->buff->new->byteArr->ret->while->is->read->out->write->catch->finally->else->out->array->arrayOffset->capacity->write
ModelByteBuffer#getInputStream()::: model byte buffer get input stream:::if->try->return->new->RandomFileInputStream->catch->return->finally->return->array->arrayOffset->capacity->new->ByteArrayInputStream
ModelByteBuffer#subbuffer(long)::: model byte buffer subbuffer:::return->capacity->subbuffer
ModelByteBuffer#subbuffer(long, long)::: model byte buffer subbuffer:::return->subbuffer
ModelByteBuffer#subbuffer(long, long, boolean)::: model byte buffer subbuffer:::return->new->ModelByteBuffer
ModelByteBuffer#array()::: model byte buffer array:::return
ModelByteBuffer#arrayOffset()::: model byte buffer array offset:::if->return->root->arrayOffset->return
ModelByteBuffer#capacity()::: model byte buffer capacity:::return
ModelByteBuffer#getRoot()::: model byte buffer get root:::return
ModelByteBuffer#getFile()::: model byte buffer get file:::return
ModelByteBuffer#getFilePointer()::: model byte buffer get file pointer:::return
ModelByteBuffer#loadAll(Collection)::: model byte buffer load all:::selfile->raf->try->foreach->if->continue->if->continue->if->selfile->equals->if->raf->close->new->RandomAccessFile->raf->seek->buffer->mbuff->capacity->new->byteArr->read->avail->while->if->raf->readFully->else->raf->readFully->catch->finally->if->raf->close
ModelByteBuffer#load()::: model byte buffer load:::if->root->load->return->if->return->if->throw->new->IllegalStateException->is->getInputStream->new->DataInputStream->capacity->new->byteArr->is->readFully->is->close
ModelByteBuffer#unload()::: model byte buffer unload:::if->root->unload->return->if->throw->new->IllegalStateException
ModelByteBufferWavetable.Buffer8PlusInputStream#read(byte[], int, int)::: buffer8 plus input stream read:::avail->available->if->return->if->buff1->buffer->array->buff2->buffer8->array->buffer->arrayOffset->buffer8->arrayOffset->if->for->i->else->for->i->buffer->arrayOffset->buffer8->arrayOffset->return
ModelByteBufferWavetable.Buffer8PlusInputStream#skip(long)::: buffer8 plus input stream skip:::avail->available->if->return->if->return->super->skip
ModelByteBufferWavetable.Buffer8PlusInputStream#read(byte[])::: buffer8 plus input stream read:::return->read
ModelByteBufferWavetable.Buffer8PlusInputStream#read()::: buffer8 plus input stream read:::b->new->byteArr->ret->read->if->return->return
ModelByteBufferWavetable.Buffer8PlusInputStream#markSupported()::: buffer8 plus input stream mark supported:::return
ModelByteBufferWavetable.Buffer8PlusInputStream#available()::: buffer8 plus input stream available:::return->buffer->capacity->buffer8->capacity
ModelByteBufferWavetable.Buffer8PlusInputStream#mark(int)::: buffer8 plus input stream mark:::
ModelByteBufferWavetable.Buffer8PlusInputStream#reset()::: buffer8 plus input stream reset:::
ModelByteBufferWavetable#set8BitExtensionBuffer(ModelByteBuffer)::: model byte buffer wavetable set8 bit extension buffer:::
ModelByteBufferWavetable#get8BitExtensionBuffer()::: model byte buffer wavetable get8 bit extension buffer:::return
ModelByteBufferWavetable#getBuffer()::: model byte buffer wavetable get buffer:::return
ModelByteBufferWavetable#getFormat()::: model byte buffer wavetable get format:::if->if->return->is->buffer->getInputStream->format->try->AudioSystem->getAudioFileFormat->getFormat->catch->finally->try->is->close->catch->finally->return->return
ModelByteBufferWavetable#openStream()::: model byte buffer wavetable open stream:::if->return->if->is->buffer->getInputStream->ais->try->AudioSystem->getAudioInputStream->catch->return->finally->return->AudioFloatInputStream->getInputStream->if->buffer->array->return->AudioFloatInputStream->buffer->getInputStream->buffer->capacity->format->getFrameSize->new->AudioInputStream->getInputStream->if->if->format->getEncoding->equals->format->getEncoding->equals->is->new->Buffer8PlusInputStream->format2->format->getEncoding->format->getSampleRate->format->getSampleSizeInBits->format->getChannels->format->getFrameSize->format->getChannels->format->getFrameRate->format->isBigEndian->new->AudioFormat->ais->buffer->capacity->format->getFrameSize->new->AudioInputStream->return->AudioFloatInputStream->getInputStream->return->AudioFloatInputStream->buffer->array->buffer->arrayOffset->buffer->capacity->getInputStream
ModelByteBufferWavetable#getChannels()::: model byte buffer wavetable get channels:::return->getFormat->getChannels
ModelByteBufferWavetable#open(float)::: model byte buffer wavetable open:::return
ModelByteBufferWavetable#getAttenuation()::: model byte buffer wavetable get attenuation:::return
ModelByteBufferWavetable#setAttenuation(float)::: model byte buffer wavetable set attenuation:::
ModelByteBufferWavetable#getLoopLength()::: model byte buffer wavetable get loop length:::return
ModelByteBufferWavetable#setLoopLength(float)::: model byte buffer wavetable set loop length:::
ModelByteBufferWavetable#getLoopStart()::: model byte buffer wavetable get loop start:::return
ModelByteBufferWavetable#setLoopStart(float)::: model byte buffer wavetable set loop start:::
ModelByteBufferWavetable#setLoopType(int)::: model byte buffer wavetable set loop type:::
ModelByteBufferWavetable#getLoopType()::: model byte buffer wavetable get loop type:::return
ModelByteBufferWavetable#getPitchcorrection()::: model byte buffer wavetable get pitchcorrection:::return
ModelByteBufferWavetable#setPitchcorrection(float)::: model byte buffer wavetable set pitchcorrection:::
ModelChannelMixer#process(float[][], int, int)::: model channel mixer process:::
ModelChannelMixer#stop()::: model channel mixer stop:::
ModelConnectionBlock#getDestination()::: model connection block get destination:::return
ModelConnectionBlock#setDestination(ModelDestination)::: model connection block set destination:::
ModelConnectionBlock#getScale()::: model connection block get scale:::return
ModelConnectionBlock#setScale(double)::: model connection block set scale:::
ModelConnectionBlock#getSources()::: model connection block get sources:::return->Arrays->copyOf
ModelConnectionBlock#setSources(ModelSource[])::: model connection block set sources:::Arrays->copyOf
ModelConnectionBlock#addSource(ModelSource)::: model connection block add source:::oldsources->new->ModelSourceArr->System->arraycopy
ModelDestination#getIdentifier()::: model destination get identifier:::return
ModelDestination#setIdentifier(ModelIdentifier)::: model destination set identifier:::
ModelDestination#getTransform()::: model destination get transform:::return
ModelDestination#setTransform(ModelTransform)::: model destination set transform:::
ModelDirectedPlayer#play(int, ModelConnectionBlock[])::: model directed player play:::
ModelDirector#noteOn(int, int)::: model director note on:::
ModelDirector#noteOff(int, int)::: model director note off:::
ModelDirector#close()::: model director close:::
ModelIdentifier#getInstance()::: model identifier get instance:::return
ModelIdentifier#setInstance(int)::: model identifier set instance:::
ModelIdentifier#getObject()::: model identifier get object:::return
ModelIdentifier#setObject(String)::: model identifier set object:::
ModelIdentifier#getVariable()::: model identifier get variable:::return
ModelIdentifier#setVariable(String)::: model identifier set variable:::
ModelIdentifier#hashCode()::: model identifier hash code:::hashcode->if->object->hashCode->if->variable->hashCode->return
ModelIdentifier#equals(Object)::: model identifier equals:::if->return->mobj->if->return->if->return->if->mobj->getInstance->getInstance->return->if->object->equals->return->if->variable->equals->return->return
ModelIdentifier#toString()::: model identifier to string:::if->return->else->return
ModelInstrument#getDirector(ModelPerformer[], MidiChannel, ModelDirectedPlayer)::: model instrument get director:::return->new->ModelStandardIndexedDirector
ModelInstrument#getPerformers()::: model instrument get performers:::return->new->ModelPerformerArr
ModelInstrument#getChannelMixer(MidiChannel, AudioFormat)::: model instrument get channel mixer:::return
ModelInstrument#getPatchAlias()::: model instrument get patch alias:::patch->getPatch->program->patch->getProgram->bank->patch->getBank->if->return->percussion->if->getPatch->getPatch->isPercussion->if->return->new->Patch->else->return->new->Patch
ModelInstrument#getKeys()::: model instrument get keys:::keys->new->StringArr->foreach->getPerformers->for->k->performer->getKeyFrom->performer->getKeyTo->return
ModelInstrument#getChannels()::: model instrument get channels:::percussion->if->getPatch->getPatch->isPercussion->if->ch->new->booleanArr->for->i->return->bank->getPatch->getBank->if->ch->new->booleanArr->for->i->return->ch->new->booleanArr->for->i->return
ModelInstrumentComparator#compare(Instrument, Instrument)::: model instrument comparator compare:::p0->arg0->getPatch->p1->arg1->getPatch->a->p0->getBank->p0->getProgram->b->p1->getBank->p1->getProgram->if->isPercussion->if->isPercussion->return
ModelMappedInstrument#getData()::: model mapped instrument get data:::return->ins->getData
ModelMappedInstrument#getPerformers()::: model mapped instrument get performers:::return->ins->getPerformers
ModelMappedInstrument#getDirector(ModelPerformer[], MidiChannel, ModelDirectedPlayer)::: model mapped instrument get director:::return->ins->getDirector
ModelMappedInstrument#getChannelMixer(MidiChannel, AudioFormat)::: model mapped instrument get channel mixer:::return->ins->getChannelMixer
ModelOscillator#getChannels()::: model oscillator get channels:::
ModelOscillator#getAttenuation():::Attenuation is in cB.:::
ModelOscillator#open(float)::: model oscillator open:::
ModelOscillatorStream#setPitch(float)::: model oscillator stream set pitch:::
ModelOscillatorStream#noteOn(MidiChannel, VoiceStatus, int, int)::: model oscillator stream note on:::
ModelOscillatorStream#noteOff(int)::: model oscillator stream note off:::
ModelOscillatorStream#read(float[][], int, int)::: model oscillator stream read:::
ModelOscillatorStream#close()::: model oscillator stream close:::
ModelPatch#isPercussion()::: model patch is percussion:::return
ModelPerformer#getName()::: model performer get name:::return
ModelPerformer#setName(String)::: model performer set name:::
ModelPerformer#getConnectionBlocks()::: model performer get connection blocks:::return
ModelPerformer#setConnectionBlocks(List)::: model performer set connection blocks:::
ModelPerformer#getOscillators()::: model performer get oscillators:::return
ModelPerformer#getExclusiveClass()::: model performer get exclusive class:::return
ModelPerformer#setExclusiveClass(int)::: model performer set exclusive class:::
ModelPerformer#isSelfNonExclusive()::: model performer is self non exclusive:::return
ModelPerformer#setSelfNonExclusive(boolean)::: model performer set self non exclusive:::
ModelPerformer#getKeyFrom()::: model performer get key from:::return
ModelPerformer#setKeyFrom(int)::: model performer set key from:::
ModelPerformer#getKeyTo()::: model performer get key to:::return
ModelPerformer#setKeyTo(int)::: model performer set key to:::
ModelPerformer#getVelFrom()::: model performer get vel from:::return
ModelPerformer#setVelFrom(int)::: model performer set vel from:::
ModelPerformer#getVelTo()::: model performer get vel to:::return
ModelPerformer#setVelTo(int)::: model performer set vel to:::
ModelPerformer#isReleaseTriggered()::: model performer is release triggered:::return
ModelPerformer#setReleaseTriggered(boolean)::: model performer set release triggered:::
ModelPerformer#getUserObject()::: model performer get user object:::return
ModelPerformer#setUserObject(Object)::: model performer set user object:::
ModelPerformer#isDefaultConnectionsEnabled()::: model performer is default connections enabled:::return
ModelPerformer#setDefaultConnectionsEnabled(boolean)::: model performer set default connections enabled:::
ModelSource#getIdentifier()::: model source get identifier:::return
ModelSource#setIdentifier(ModelIdentifier)::: model source set identifier:::
ModelSource#getTransform()::: model source get transform:::return
ModelSource#setTransform(ModelTransform)::: model source set transform:::
ModelStandardDirector#close()::: model standard director close:::
ModelStandardDirector#noteOff(int, int)::: model standard director note off:::if->return->for->i
ModelStandardDirector#noteOn(int, int)::: model standard director note on:::if->return->for->i
ModelStandardIndexedDirector#lookupIndex(int, int)::: model standard indexed director lookup index:::if->xt->yt->if->return->return
ModelStandardIndexedDirector#restrict(int)::: model standard indexed director restrict:::if->return->if->return->return
ModelStandardIndexedDirector#buildindex()::: model standard indexed director buildindex:::new->byteArrs->new->intArr->foreach->keyFrom->performer->getKeyFrom->keyTo->performer->getKeyTo->velFrom->performer->getVelFrom->velTo->performer->getVelTo->if->continue->if->continue->restrict->restrict->restrict->restrict->for->d->new->intArrs->ix->foreach->keyFrom->performer->getKeyFrom->keyTo->performer->getKeyTo->velFrom->performer->getVelFrom->velTo->performer->getVelTo->if->continue->if->continue->restrict->restrict->restrict->restrict->x_from->x_to->y_from->y_to->if->if->for->y
ModelStandardIndexedDirector#close()::: model standard indexed director close:::
ModelStandardIndexedDirector#noteOff(int, int)::: model standard indexed director note off:::if->return->plist->lookupIndex->if->return->foreach->p->if->p->isReleaseTriggered->player->play
ModelStandardIndexedDirector#noteOn(int, int)::: model standard indexed director note on:::if->return->plist->lookupIndex->if->return->foreach->p->if->p->isReleaseTriggered->player->play
ModelStandardTransform#transform(double)::: model standard transform transform:::s->a->if->if->switch->Math->signum->Math->abs->Math->log->Math->log->if->else->if->return->Math->signum->Math->abs->Math->log->Math->log->if->else->if->return->if->return->else->return->return->Math->abs->break->return
ModelStandardTransform#getDirection()::: model standard transform get direction:::return
ModelStandardTransform#setDirection(boolean)::: model standard transform set direction:::
ModelStandardTransform#getPolarity()::: model standard transform get polarity:::return
ModelStandardTransform#setPolarity(boolean)::: model standard transform set polarity:::
ModelStandardTransform#getTransform()::: model standard transform get transform:::return
ModelStandardTransform#setTransform(int)::: model standard transform set transform:::
ModelTransform#transform(double)::: model transform transform:::
ModelWavetable#openStream()::: model wavetable open stream:::
ModelWavetable#getLoopLength()::: model wavetable get loop length:::
ModelWavetable#getLoopStart()::: model wavetable get loop start:::
ModelWavetable#getLoopType()::: model wavetable get loop type:::
ModelWavetable#getPitchcorrection()::: model wavetable get pitchcorrection:::
PCMtoPCMCodec#getSourceEncodings()::: mto codec get source encodings:::return->new->EncodingArr
PCMtoPCMCodec#getTargetEncodings()::: mto codec get target encodings:::return->getSourceEncodings
PCMtoPCMCodec#getTargetEncodings(AudioFormat)::: mto codec get target encodings:::sampleSize->sourceFormat->getSampleSizeInBits->encoding->sourceFormat->getEncoding->if->if->encoding->equals->return->new->AudioFormat.EncodingArr->if->encoding->equals->return->new->AudioFormat.EncodingArr->else->if->if->encoding->equals->encoding->equals->return->new->AudioFormat.EncodingArr->return->new->AudioFormat.EncodingArr
PCMtoPCMCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)::: mto codec get target formats:::Objects->requireNonNull->formats->getOutputFormats->newFormats->new->Vector<>->for->i->formatArray->newFormats->size->new->AudioFormatArr->for->i->return
PCMtoPCMCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)::: mto codec get audio input stream:::if->sourceStream->getFormat->isConversionSupported->sourceFormat->sourceStream->getFormat->targetFormat->sourceFormat->getSampleRate->sourceFormat->getSampleSizeInBits->sourceFormat->getChannels->sourceFormat->getFrameSize->sourceFormat->getFrameRate->sourceFormat->isBigEndian->new->AudioFormat->return->getConvertedStream->else->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException
PCMtoPCMCodec#getAudioInputStream(AudioFormat, AudioInputStream)::: mto codec get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetFormat->toString->new->IllegalArgumentException->return->getConvertedStream
PCMtoPCMCodec#getConvertedStream(AudioFormat, AudioInputStream):::Opens the codec with the specified parameters.:::cs->inputFormat->stream->getFormat->if->inputFormat->matches->else->new->PCMtoPCMCodecStream->return
PCMtoPCMCodec#getOutputFormats(AudioFormat):::Obtains the set of output formats supported by the codec given a particular input format:::formats->new->Vector<>->format->sampleSize->inputFormat->getSampleSizeInBits->isBigEndian->inputFormat->isBigEndian->if->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->else->if->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->if->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getSampleSizeInBits->inputFormat->getChannels->inputFormat->getFrameSize->inputFormat->getFrameRate->new->AudioFormat->formats->addElement->formatArray->synchronized->formats->size->new->AudioFormatArr->for->i->return
PCMtoPCMCodec.PCMtoPCMCodecStream#read():::Note that this only works for sign conversions:::temp->tempbyte->if->if->super->read->if->return->return->else->throw->new->IOException->else->throw->new->IOException
PCMtoPCMCodec.PCMtoPCMCodecStream#read(byte[])::: mto codec stream read:::return->read
PCMtoPCMCodec.PCMtoPCMCodecStream#read(byte[], int, int)::: mto codec stream read:::i->if->if->readCount->super->read->tempByte->if->return->switch->switchSigned8bit->break->switchEndian->break->switchSignedLE->break->switchSignedBE->break->switchSignedLE->switchEndian->break->switchSignedBE->switchEndian->break->return
PCMtoPCMCodec.PCMtoPCMCodecStream#switchSigned8bit(byte[], int, int, int)::: mto codec stream switch signed8bit:::for->i
PCMtoPCMCodec.PCMtoPCMCodecStream#switchSignedBE(byte[], int, int, int)::: mto codec stream switch signed e:::for->i
PCMtoPCMCodec.PCMtoPCMCodecStream#switchSignedLE(byte[], int, int, int)::: mto codec stream switch signed e:::for->i
PCMtoPCMCodec.PCMtoPCMCodecStream#switchEndian(byte[], int, int, int)::: mto codec stream switch endian:::if->for->i
Platform#initialize():::Dummy method for forcing initialization.:::if->Printer->trace
Platform#isBigEndian():::Determine whether the system is big-endian.:::return
Platform#loadLibraries():::Load the native library or libraries.:::if->Printer->trace->try->AccessController->System->loadLibrary->return->doPrivileged->catch->if->Printer->t->toString->err->finally->if->nIsBigEndian
Platform#isMidiIOEnabled()::: platform is midi enabled:::if->Printer->debug->return
Platform#isPortsEnabled()::: platform is ports enabled:::if->Printer->debug->return
Platform#isDirectAudioEnabled()::: platform is direct audio enabled:::if->Printer->debug->return
Platform#nIsBigEndian()::: platform n is big endian:::
PortMixer#getLine(Line.Info)::: port mixer get line:::fullInfo->getLineInfo->if->for->i->throw->new->IllegalArgumentException
PortMixer#getMaxLines(Line.Info)::: port mixer get max lines:::fullInfo->getLineInfo->if->return->if->return->return
PortMixer#implOpen()::: port mixer impl open:::if->Printer->trace->getMixerIndex->nOpen->if->Printer->trace
PortMixer#implClose()::: port mixer impl close:::if->Printer->trace->thisID->nClose->if->for->i->if->Printer->trace
PortMixer#implStart()::: port mixer impl start:::
PortMixer#implStop()::: port mixer impl stop:::
PortMixer#getPortInfo(int, int)::: port mixer get port info:::switch->return->getID->nGetPortName->new->PortInfo->return->return->return->return->getID->nGetPortName->new->PortInfo->return->return->return->if->Printer->debug->return
PortMixer#getMixerIndex()::: port mixer get mixer index:::return->getMixerInfo->getIndex
PortMixer#getPort(int)::: port mixer get port:::if->new->PortMixerPortArr->if->new->PortMixerPort->return->return
PortMixer#getID()::: port mixer get d:::return
PortMixer.PortMixerPort#implOpen()::: port mixer port impl open:::if->Printer->trace->newID->getID->if->vector->new->Vector<>->synchronized->nGetControls->vector->size->new->ControlArr->for->i->else->enableControls->if->Printer->trace
PortMixer.PortMixerPort#enableControls(Control[], boolean)::: port mixer port enable controls:::for->i
PortMixer.PortMixerPort#disposeControls()::: port mixer port dispose controls:::enableControls->new->ControlArr
PortMixer.PortMixerPort#implClose()::: port mixer port impl close:::if->Printer->trace->enableControls->if->Printer->trace
PortMixer.PortMixerPort#open()::: port mixer port open:::synchronized->if->isOpen->if->Printer->trace->mixer->open->try->implOpen->setOpen->catch->mixer->close->throw->finally->if->Printer->trace
PortMixer.PortMixerPort#close()::: port mixer port close:::synchronized->if->isOpen->if->Printer->trace->setOpen->implClose->mixer->close->if->Printer->trace
PortMixer.BoolCtrl#createType(String)::: bool ctrl create type:::if->name->equals->return->else->if->name->equals->return->new->BCT
PortMixer.BoolCtrl#setValue(boolean)::: bool ctrl set value:::if->nControlSetIntValue
PortMixer.BoolCtrl#getValue()::: bool ctrl get value:::if->return->nControlGetIntValue->return
PortMixer.FloatCtrl#setValue(float)::: float ctrl set value:::if->nControlSetFloatValue
PortMixer.FloatCtrl#getValue()::: float ctrl get value:::if->return->nControlGetFloatValue->return->getMinimum
PortMixer#nOpen(int)::: port mixer n open:::
PortMixer#nClose(long)::: port mixer n close:::
PortMixer#nGetPortCount(long)::: port mixer n get port count:::
PortMixer#nGetPortType(long, int)::: port mixer n get port type:::
PortMixer#nGetPortName(long, int)::: port mixer n get port name:::
PortMixer#nGetControls(long, int, Vector)::: port mixer n get controls:::
PortMixer#nControlSetIntValue(long, int)::: port mixer n control set int value:::
PortMixer#nControlGetIntValue(long)::: port mixer n control get int value:::
PortMixer#nControlSetFloatValue(long, float)::: port mixer n control set float value:::
PortMixer#nControlGetFloatValue(long)::: port mixer n control get float value:::
PortMixerProvider#init()::: port mixer provider init:::numDevices->nGetNumDevices->if->if->Printer->trace->new->PortMixerInfoArr->new->PortMixerArr->for->i->if->Printer->trace
PortMixerProvider#getMixerInfo()::: port mixer provider get mixer info:::synchronized->localArray->new->Mixer.InfoArr->System->arraycopy->return
PortMixerProvider#getMixer(Mixer.Info)::: port mixer provider get mixer:::synchronized->for->i->throw->String->format->new->IllegalArgumentException
PortMixerProvider#getDevice(PortMixerInfo)::: port mixer provider get device:::index->info->getIndex->if->new->PortMixer->return
PortMixerProvider.PortMixerInfo#getIndex()::: port mixer info get index:::return
PortMixerProvider#nGetNumDevices()::: port mixer provider n get num devices:::
PortMixerProvider#nNewPortMixerInfo(int)::: port mixer provider n new port mixer info:::
Printer#err(String)::: printer err:::if->println
Printer#debug(String)::: printer debug:::if->println
Printer#trace(String)::: printer trace:::if->println
Printer#verbose(String)::: printer verbose:::if->println
Printer#release(String)::: printer release:::if->println
Printer#println(String)::: printer println:::prepend->if->Thread->currentThread->getId->if->if->System->nanoTime->System->nanoTime->println
Printer#println()::: printer println:::println
RealTimeSequencer#setSequence(Sequence)::: real time sequencer set sequence:::if->Printer->trace->if->if->setCaches->stop->if->getDataPump->getDataPump->setTickPos->getDataPump->resetLoopCount->if->playThread->setSequence->if->tempoCache->refresh->setTickPosition->propagateCaches->else->if->tempoCache->refresh->if->playThread->setSequence->if->Printer->trace
RealTimeSequencer#setSequence(InputStream)::: real time sequencer set sequence:::if->Printer->trace->if->setSequence->return->seq->MidiSystem->getSequence->setSequence->if->Printer->trace
RealTimeSequencer#getSequence()::: real time sequencer get sequence:::return
RealTimeSequencer#start()::: real time sequencer start:::if->Printer->trace->if->isOpen->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->return->implStart->if->Printer->trace
RealTimeSequencer#stop()::: real time sequencer stop:::if->Printer->trace->if->isOpen->throw->new->IllegalStateException->stopRecording->if->if->Printer->trace->return->implStop->if->Printer->trace
RealTimeSequencer#isRunning()::: real time sequencer is running:::return
RealTimeSequencer#startRecording()::: real time sequencer start recording:::if->isOpen->throw->new->IllegalStateException->start
RealTimeSequencer#stopRecording()::: real time sequencer stop recording:::if->isOpen->throw->new->IllegalStateException
RealTimeSequencer#isRecording()::: real time sequencer is recording:::return
RealTimeSequencer#recordEnable(Track, int)::: real time sequencer record enable:::if->findTrack->throw->new->IllegalArgumentException->synchronized->rc->RecordingTrack->get->if->else->recordingTracks->new->RecordingTrack->add
RealTimeSequencer#recordDisable(Track)::: real time sequencer record disable:::synchronized->rc->RecordingTrack->get->if->recordingTracks->remove
RealTimeSequencer#findTrack(Track)::: real time sequencer find track:::found->if->tracks->sequence->getTracks->for->i->return
RealTimeSequencer#getTempoInBPM()::: real time sequencer get tempo in m:::if->Printer->trace->return->MidiUtils->getTempoInMPQ->convertTempo
RealTimeSequencer#setTempoInBPM(float)::: real time sequencer set tempo in m:::if->Printer->trace->if->MidiUtils->convertTempo->setTempoInMPQ
RealTimeSequencer#getTempoInMPQ()::: real time sequencer get tempo in q:::if->Printer->trace->if->needCaching->if->return->if->return->tempoCache->getTickPosition->getTempoMPQAt->return->return->getDataPump->getTempoMPQ
RealTimeSequencer#setTempoInMPQ(float)::: real time sequencer set tempo in q:::if->if->Printer->trace->if->needCaching->else->getDataPump->setTempoMPQ
RealTimeSequencer#setTempoFactor(float)::: real time sequencer set tempo factor:::if->return->if->Printer->trace->if->needCaching->else->getDataPump->setTempoFactor
RealTimeSequencer#getTempoFactor()::: real time sequencer get tempo factor:::if->Printer->trace->if->needCaching->if->return->return->return->getDataPump->getTempoFactor
RealTimeSequencer#getTickLength()::: real time sequencer get tick length:::if->Printer->trace->if->return->return->sequence->getTickLength
RealTimeSequencer#getTickPosition()::: real time sequencer get tick position:::if->Printer->trace->if->getDataPump->return->return->getDataPump->getTickPos
RealTimeSequencer#setTickPosition(long)::: real time sequencer set tick position:::if->return->if->Printer->trace->if->getDataPump->if->else->if->if->else->getDataPump->setTickPos
RealTimeSequencer#getMicrosecondLength()::: real time sequencer get microsecond length:::if->Printer->trace->if->return->return->sequence->getMicrosecondLength
RealTimeSequencer#getMicrosecondPosition()::: real time sequencer get microsecond position:::if->Printer->trace->if->getDataPump->return->synchronized->return->MidiUtils->getDataPump->getTickPos->tick2microsecond
RealTimeSequencer#setMicrosecondPosition(long)::: real time sequencer set microsecond position:::if->return->if->Printer->trace->if->getDataPump->if->else->if->if->else->synchronized->MidiUtils->microsecond2tick->setTickPosition
RealTimeSequencer#setMasterSyncMode(Sequencer.SyncMode)::: real time sequencer set master sync mode:::
RealTimeSequencer#getMasterSyncMode()::: real time sequencer get master sync mode:::return
RealTimeSequencer#getMasterSyncModes()::: real time sequencer get master sync modes:::returnedModes->new->Sequencer.SyncModeArr->System->arraycopy->return
RealTimeSequencer#setSlaveSyncMode(Sequencer.SyncMode)::: real time sequencer set slave sync mode:::
RealTimeSequencer#getSlaveSyncMode()::: real time sequencer get slave sync mode:::return
RealTimeSequencer#getSlaveSyncModes()::: real time sequencer get slave sync modes:::returnedModes->new->Sequencer.SyncModeArr->System->arraycopy->return
RealTimeSequencer#getTrackCount()::: real time sequencer get track count:::seq->getSequence->if->return->sequence->getTracks->return
RealTimeSequencer#setTrackMute(int, boolean)::: real time sequencer set track mute:::trackCount->getTrackCount->if->getTrackCount->return->ensureBoolArraySize->if->getDataPump->getDataPump->muteSoloChanged
RealTimeSequencer#getTrackMute(int)::: real time sequencer get track mute:::if->getTrackCount->return->if->return->return
RealTimeSequencer#setTrackSolo(int, boolean)::: real time sequencer set track solo:::trackCount->getTrackCount->if->getTrackCount->return->ensureBoolArraySize->if->getDataPump->getDataPump->muteSoloChanged
RealTimeSequencer#getTrackSolo(int)::: real time sequencer get track solo:::if->getTrackCount->return->if->return->return
RealTimeSequencer#addMetaEventListener(MetaEventListener)::: real time sequencer add meta event listener:::synchronized->if->metaEventListeners->contains->metaEventListeners->add->return
RealTimeSequencer#removeMetaEventListener(MetaEventListener)::: real time sequencer remove meta event listener:::synchronized->index->metaEventListeners->indexOf->if->metaEventListeners->remove
RealTimeSequencer#addControllerEventListener(ControllerEventListener, int[])::: real time sequencer add controller event listener:::synchronized->cve->flag->for->i->controllerEventListeners->size->if->new->ControllerListElement->controllerEventListeners->add->return->cve->getControllers
RealTimeSequencer#removeControllerEventListener(ControllerEventListener, int[])::: real time sequencer remove controller event listener:::synchronized->cve->flag->for->i->controllerEventListeners->size->if->return->new->intArr->if->index->controllerEventListeners->indexOf->if->controllerEventListeners->remove->return->new->intArr->return->cve->getControllers
RealTimeSequencer#setLoopStartPoint(long)::: real time sequencer set loop start point:::if->getTickLength->throw->new->IllegalArgumentException
RealTimeSequencer#getLoopStartPoint()::: real time sequencer get loop start point:::return
RealTimeSequencer#setLoopEndPoint(long)::: real time sequencer set loop end point:::if->getTickLength->throw->new->IllegalArgumentException
RealTimeSequencer#getLoopEndPoint()::: real time sequencer get loop end point:::return
RealTimeSequencer#setLoopCount(int)::: real time sequencer set loop count:::if->throw->new->IllegalArgumentException->if->getDataPump->getDataPump->resetLoopCount
RealTimeSequencer#getLoopCount()::: real time sequencer get loop count:::return
RealTimeSequencer#implOpen()::: real time sequencer impl open:::if->Printer->trace->new->PlayThread->if->playThread->setSequence->propagateCaches->if->doAutoConnect->if->Printer->trace
RealTimeSequencer#doAutoConnect()::: real time sequencer do auto connect:::if->Printer->trace->rec->try->synth->MidiSystem->getSynthesizer->if->getReceiverReferenceCounting->else->synth->open->try->synth->getReceiver->catch->finally->if->synth->close->catch->finally->if->try->MidiSystem->getReceiver->catch->finally->if->try->getTransmitter->setReceiver->catch->finally->if->Printer->trace
RealTimeSequencer#propagateCaches()::: real time sequencer propagate caches:::if->isOpen->if->setTempoFactor->if->new->MidiUtils.TempoCache->getTickPosition->getTempoMPQAt->setTempoInMPQ->else->setTempoInMPQ
RealTimeSequencer#setCaches():::populate the caches with the current values.:::getTempoFactor->getTempoInMPQ
RealTimeSequencer#implClose()::: real time sequencer impl close:::if->Printer->trace->if->if->Printer->err->else->playThread->close->super->implClose->if->try->autoConnectedReceiver->close->catch->finally->if->Printer->trace
RealTimeSequencer#implStart()::: real time sequencer impl start:::if->Printer->trace->if->if->Printer->err->return->tempoCache->refresh->if->playThread->start->if->Printer->trace
RealTimeSequencer#implStop()::: real time sequencer impl stop:::if->Printer->trace->if->if->Printer->err->return->if->playThread->stop->if->Printer->trace
RealTimeSequencer#getEventDispatcher()::: real time sequencer get event dispatcher:::tg->Thread->currentThread->getThreadGroup->synchronized->eventDispatcher->dispatchers->get->if->new->EventDispatcher->dispatchers->put->eventDispatcher->start->return
RealTimeSequencer#sendMetaEvents(MidiMessage):::Send midi player events:::if->metaEventListeners->size->return->getEventDispatcher->sendAudioEvents
RealTimeSequencer#sendControllerEvents(MidiMessage):::Send midi player events.:::size->controllerEventListeners->size->if->return->if->if->Printer->debug->return->msg->controller->msg->getData1->sendToListeners->new->ArrayList<>->for->i->getEventDispatcher->sendAudioEvents
RealTimeSequencer#needCaching()::: real time sequencer need caching:::return->isOpen
RealTimeSequencer#getDataPump():::return the data pump instance, owned by play thread if playthread is null, return null:::if->return->playThread->getDataPump->return
RealTimeSequencer#getTempoCache()::: real time sequencer get tempo cache:::return
RealTimeSequencer#ensureBoolArraySize(boolean[], int)::: real time sequencer ensure bool array size:::if->return->new->booleanArr->if->newArray->new->booleanArr->System->arraycopy->return->return
RealTimeSequencer#hasReceivers()::: real time sequencer has receivers:::return
RealTimeSequencer#createReceiver()::: real time sequencer create receiver:::return->new->SequencerReceiver
RealTimeSequencer#hasTransmitters()::: real time sequencer has transmitters:::return
RealTimeSequencer#createTransmitter()::: real time sequencer create transmitter:::return->new->SequencerTransmitter
RealTimeSequencer#setAutoConnect(Receiver)::: real time sequencer set auto connect:::
RealTimeSequencer.SequencerReceiver#implSend(MidiMessage, long)::: sequencer receiver impl send:::if->tickPos->if->getTickPosition->else->synchronized->MidiUtils->microsecond2tick->track->if->message->getLength->if->sm->if->sm->getStatus->RecordingTrack->sm->getChannel->get->else->RecordingTrack->get->if->if->new->FastShortMessage->else->message->clone->me->new->MidiEvent->track->add
RealTimeSequencer.ControllerListElement#addControllers(int[])::: controller list element add controllers:::if->new->intArr->for->i->return->temp->new->intArr->elements->for->i->for->i->newc->new->intArr->for->i
RealTimeSequencer.ControllerListElement#removeControllers(int[])::: controller list element remove controllers:::if->new->intArr->else->temp->new->intArr->elements->for->i->newc->new->intArr->for->i
RealTimeSequencer.ControllerListElement#getControllers()::: controller list element get controllers:::if->return->c->new->intArr->for->i->return
RealTimeSequencer.RecordingTrack#get(List, Track)::: recording track get:::synchronized->size->recordingTracks->size->for->i->return
RealTimeSequencer.RecordingTrack#get(List, int)::: recording track get:::synchronized->size->recordingTracks->size->for->i->return
RealTimeSequencer.PlayThread#getDataPump()::: play thread get data pump:::return
RealTimeSequencer.PlayThread#setSequence(Sequence)::: play thread set sequence:::dataPump->setSequence
RealTimeSequencer.PlayThread#start():::start thread and pump:::if->dataPump->hasCachedTempo->tickPos->getTickPosition->dataPump->tempoCache->getTempoMPQAt->setTempoMPQ->dataPump->clearNoteOnCache->dataPump->resetLoopCount->synchronized->lock->notifyAll->if->Printer->debug
RealTimeSequencer.PlayThread#stop()::: play thread stop:::playThreadImplStop->t->System->nanoTime->while->synchronized->try->lock->wait->catch->finally->if->System->nanoTime->if->Printer->err
RealTimeSequencer.PlayThread#playThreadImplStop()::: play thread play thread impl stop:::synchronized->lock->notifyAll
RealTimeSequencer.PlayThread#close()::: play thread close:::oldThread->synchronized->if->synchronized->lock->notifyAll->if->try->oldThread->join->catch->finally
RealTimeSequencer.PlayThread#run():::Main process loop driving the media flow:::while->EOM->wasRunning->while->dataPump->pump->try->Thread->sleep->catch->finally->if->Printer->debug->if->Printer->debug->if->Printer->debug->if->Printer->debug->playThreadImplStop->if->dataPump->notesOff->if->dataPump->sequence->getTickLength->setTickPos->message->new->MetaMessage->try->message->new->byteArr->setMessage->catch->finally->sendMetaEvents->synchronized->lock->notifyAll->while->try->lock->wait->catch->finally->if->Printer->debug
RealTimeSequencer.DataPump#init()::: data pump init:::new->intArr
RealTimeSequencer.DataPump#setTickPos(long)::: data pump set tick pos:::oldLastTick->if->notesOff->if->chaseEvents->else->if->hasCachedTempo->getTempoCache->getTempoMPQAt->setTempoMPQ
RealTimeSequencer.DataPump#getTickPos()::: data pump get tick pos:::return
RealTimeSequencer.DataPump#hasCachedTempo()::: data pump has cached tempo:::if->return
RealTimeSequencer.DataPump#setTempoMPQ(float)::: data pump set tempo q:::if
RealTimeSequencer.DataPump#getTempoMPQ()::: data pump get tempo q:::return
RealTimeSequencer.DataPump#setTempoFactor(float)::: data pump set tempo factor:::if
RealTimeSequencer.DataPump#getTempoFactor()::: data pump get tempo factor:::return
RealTimeSequencer.DataPump#muteSoloChanged()::: data pump mute solo changed:::newDisabled->makeDisabledArray->if->applyDisabledTracks
RealTimeSequencer.DataPump#setSequence(Sequence)::: data pump set sequence:::if->init->return->seq->getTracks->muteSoloChanged->seq->getResolution->seq->getDivisionType->new->intArr
RealTimeSequencer.DataPump#resetLoopCount()::: data pump reset loop count:::
RealTimeSequencer.DataPump#clearNoteOnCache()::: data pump clear note on cache:::for->i
RealTimeSequencer.DataPump#notesOff(boolean)::: data pump notes off:::done->for->ch->if->Printer->println
RealTimeSequencer.DataPump#makeDisabledArray()::: data pump make disabled array:::if->return->newTrackDisabled->new->booleanArr->solo->mute->synchronized->hasSolo->if->for->i->if->for->i->else->for->i->return
RealTimeSequencer.DataPump#sendNoteOffIfOn(Track, long):::chase all events from beginning of Track and send note off for those events that are active in noteOnCache array:::size->track->size->done->try->for->i->catch->finally->if->Printer->println
RealTimeSequencer.DataPump#applyDisabledTracks(boolean[], boolean[]):::Runtime application of mute/solo: if a track is muted that was previously playing, send    note off events for all currently playing notes.:::tempArray->synchronized->for->i
RealTimeSequencer.DataPump#chaseTrackEvents(int, long, long, boolean, byte[][]):::go through all events from startTick to endTick chase the controller state and program change state and then set the end-states at once:::if->progs->new->byteArr->for->ch->track->size->track->size->try->for->i->catch->finally->numControllersSent->for->ch->if->Printer->println
RealTimeSequencer.DataPump#chaseEvents(long, long):::chase controllers and program for all tracks.:::if->Printer->println->tempArray->new->byteArrs->for->t->if->Printer->println
RealTimeSequencer.DataPump#getCurrentTimeMillis()::: data pump get current time millis:::return->System->nanoTime
RealTimeSequencer.DataPump#millis2tick(long)::: data pump millis2tick:::if->dTick->return->return->MidiUtils->microsec2ticks
RealTimeSequencer.DataPump#tick2millis(long)::: data pump tick2millis:::if->dMillis->return->return->MidiUtils->ticks2microsec
RealTimeSequencer.DataPump#ReindexTrack(int, long)::: data pump  reindex track:::if->MidiUtils->tick2index->if->Printer->println
RealTimeSequencer.DataPump#dispatchMessage(int, MidiEvent)::: data pump dispatch message:::changesPending->message->event->getMessage->msgStatus->message->getStatus->msgLen->message->getLength->if->if->newTempo->MidiUtils->getTempoMPQ->if->if->event->getTick->setTempoMPQ->sendMetaEvents->else->getTransmitterList->sendMessage->switch->note->getData1->break->smsg->note->smsg->getData1->vel->smsg->getData2->if->else->break->sendControllerEvents->break->return
RealTimeSequencer.DataPump#pump():::the main pump method:::currMillis->targetTick->currEvent->changesPending->doLoop->EOM->getCurrentTimeMillis->finishedTracks->do->if->if->Printer->println->if->new->intArr->for->t->if->getCurrentTimeMillis->if->Printer->MidiUtils->convertTempo->println->else->millis2tick->if->Printer->println->if->if->if->Printer->println->if->Printer->println->for->t->if->oldCheckPointMillis->loopEndTick->if->if->if->Printer->println->setTickPos->tick2millis->if->Printer->println->while->return
RealTimeSequencerProvider#getDeviceInfo()::: real time sequencer provider get device info:::return->new->MidiDevice.InfoArr
RealTimeSequencerProvider#getDevice(MidiDevice.Info)::: real time sequencer provider get device:::Objects->requireNonNull->if->equals->return->new->RealTimeSequencer->throw->MidiUtils->unsupportedDevice
ReferenceCountingDevice#getReceiverReferenceCounting():::Retrieve a Receiver that opens the device implicitly:::
ReferenceCountingDevice#getTransmitterReferenceCounting():::Retrieve a Transmitter that opens the device implicitly:::
RIFFReader#getFilePointer()::: reader get file pointer:::return
RIFFReader#hasNextChunk()::: reader has next chunk:::if->lastiterator->finish->return
RIFFReader#nextChunk()::: reader next chunk:::if->lastiterator->finish->if->return->new->RIFFReader->return
RIFFReader#getFormat()::: reader get format:::return
RIFFReader#getType()::: reader get type:::return
RIFFReader#getSize()::: reader get size:::return
RIFFReader#read()::: reader read:::if->return->b->stream->read->if->return->return
RIFFReader#read(byte[], int, int)::: reader read:::if->return->if->rlen->stream->read->if->return->else->ret->stream->read->if->return->return
RIFFReader#readFully(byte[])::: reader read fully:::readFully
RIFFReader#readFully(byte[], int, int)::: reader read fully:::if->throw->new->IndexOutOfBoundsException->while->s->read->if->throw->new->EOFException->if->Thread->yield
RIFFReader#skip(long)::: reader skip:::if->return->remaining->Math->min->while->ret->Math->stream->skip->min->if->Thread->yield->if->stream->read->break->else->if->break->return
RIFFReader#available()::: reader available:::return
RIFFReader#finish()::: reader finish:::if->skip
RIFFReader#readString(int)::: reader read string:::buff->try->new->byteArr->catch->throw->new->IOException->finally->readFully->for->i->return->new->String
RIFFReader#readByte()::: reader read byte:::ch->read->if->throw->new->EOFException->return
RIFFReader#readShort()::: reader read short:::ch1->read->ch2->read->if->throw->new->EOFException->if->throw->new->EOFException->return
RIFFReader#readInt()::: reader read int:::ch1->read->ch2->read->ch3->read->ch4->read->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->return
RIFFReader#readLong()::: reader read long:::ch1->read->ch2->read->ch3->read->ch4->read->ch5->read->ch6->read->ch7->read->ch8->read->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->return
RIFFReader#readUnsignedByte()::: reader read unsigned byte:::ch->read->if->throw->new->EOFException->return
RIFFReader#readUnsignedShort()::: reader read unsigned short:::ch1->read->ch2->read->if->throw->new->EOFException->if->throw->new->EOFException->return
RIFFReader#readUnsignedInt()::: reader read unsigned int:::ch1->read->ch2->read->ch3->read->ch4->read->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->if->throw->new->EOFException->return
RIFFReader#close()::: reader close:::finish->stream->close
RIFFWriter.RandomAccessWriter#seek(long)::: random access writer seek:::
RIFFWriter.RandomAccessWriter#getPointer()::: random access writer get pointer:::
RIFFWriter.RandomAccessWriter#close()::: random access writer close:::
RIFFWriter.RandomAccessWriter#write(int)::: random access writer write:::
RIFFWriter.RandomAccessWriter#write(byte[], int, int)::: random access writer write:::
RIFFWriter.RandomAccessWriter#write(byte[])::: random access writer write:::
RIFFWriter.RandomAccessWriter#length()::: random access writer length:::
RIFFWriter.RandomAccessWriter#setLength(long)::: random access writer set length:::
RIFFWriter.RandomAccessFileWriter#seek(long)::: random access file writer seek:::raf->seek
RIFFWriter.RandomAccessFileWriter#getPointer()::: random access file writer get pointer:::return->raf->getFilePointer
RIFFWriter.RandomAccessFileWriter#close()::: random access file writer close:::raf->close
RIFFWriter.RandomAccessFileWriter#write(int)::: random access file writer write:::raf->write
RIFFWriter.RandomAccessFileWriter#write(byte[], int, int)::: random access file writer write:::raf->write
RIFFWriter.RandomAccessFileWriter#write(byte[])::: random access file writer write:::raf->write
RIFFWriter.RandomAccessFileWriter#length()::: random access file writer length:::return->raf->length
RIFFWriter.RandomAccessFileWriter#setLength(long)::: random access file writer set length:::raf->setLength
RIFFWriter.RandomAccessByteWriter#seek(long)::: random access byte writer seek:::
RIFFWriter.RandomAccessByteWriter#getPointer()::: random access byte writer get pointer:::return
RIFFWriter.RandomAccessByteWriter#close()::: random access byte writer close:::stream->write->stream->close
RIFFWriter.RandomAccessByteWriter#write(int)::: random access byte writer write:::if->new->byteArr->write
RIFFWriter.RandomAccessByteWriter#write(byte[], int, int)::: random access byte writer write:::newsize->if->setLength->end->for->i
RIFFWriter.RandomAccessByteWriter#write(byte[])::: random access byte writer write:::write
RIFFWriter.RandomAccessByteWriter#length()::: random access byte writer length:::return
RIFFWriter.RandomAccessByteWriter#setLength(long)::: random access byte writer set length:::if->newlen->Math->max->newbuff->new->byteArr->System->arraycopy
RIFFWriter#seek(long)::: writer seek:::raf->seek
RIFFWriter#getFilePointer()::: writer get file pointer:::return->raf->getPointer
RIFFWriter#setWriteOverride(boolean)::: writer set write override:::
RIFFWriter#getWriteOverride()::: writer get write override:::return
RIFFWriter#close()::: writer close:::if->return->if->childchunk->close->bakchunktype->fpointer->raf->getPointer->raf->seek->writeUnsignedInt->if->raf->close->else->raf->seek
RIFFWriter#write(int)::: writer write:::if->if->throw->new->IllegalArgumentException->if->childchunk->close->raf->write
RIFFWriter#write(byte[], int, int)::: writer write:::if->if->throw->new->IllegalArgumentException->if->childchunk->close->raf->write
RIFFWriter#writeList(String)::: writer write list:::if->throw->new->IllegalArgumentException->if->childchunk->close->new->RIFFWriter->return
RIFFWriter#writeChunk(String)::: writer write chunk:::if->throw->new->IllegalArgumentException->if->childchunk->close->new->RIFFWriter->return
RIFFWriter#writeString(String)::: writer write string:::buff->string->getBytes->write
RIFFWriter#writeString(String, int)::: writer write string:::buff->string->getBytes->if->write->else->write->for->i
RIFFWriter#writeByte(int)::: writer write byte:::write
RIFFWriter#writeShort(short)::: writer write short:::write->write
RIFFWriter#writeInt(int)::: writer write int:::write->write->write->write
RIFFWriter#writeLong(long)::: writer write long:::write->write->write->write->write->write->write->write
RIFFWriter#writeUnsignedByte(int)::: writer write unsigned byte:::writeByte
RIFFWriter#writeUnsignedShort(int)::: writer write unsigned short:::writeShort
RIFFWriter#writeUnsignedInt(long)::: writer write unsigned int:::writeInt
SF2Instrument#getName()::: f2 instrument get name:::return
SF2Instrument#setName(String)::: f2 instrument set name:::
SF2Instrument#getPatch()::: f2 instrument get patch:::if->return->new->ModelPatch->else->return->new->ModelPatch
SF2Instrument#setPatch(Patch)::: f2 instrument set patch:::if->isPercussion->patch->getProgram->else->patch->getBank->patch->getProgram
SF2Instrument#getData()::: f2 instrument get data:::return
SF2Instrument#getGenre()::: f2 instrument get genre:::return
SF2Instrument#setGenre(long)::: f2 instrument set genre:::
SF2Instrument#getLibrary()::: f2 instrument get library:::return
SF2Instrument#setLibrary(long)::: f2 instrument set library:::
SF2Instrument#getMorphology()::: f2 instrument get morphology:::return
SF2Instrument#setMorphology(long)::: f2 instrument set morphology:::
SF2Instrument#getRegions()::: f2 instrument get regions:::return
SF2Instrument#getGlobalRegion()::: f2 instrument get global region:::return
SF2Instrument#setGlobalZone(SF2GlobalRegion)::: f2 instrument set global zone:::
SF2Instrument#toString()::: f2 instrument to string:::if->return->else->return
SF2Instrument#getPerformers()::: f2 instrument get performers:::performercount->foreach->presetzone->getLayer->getRegions->size->performers->new->ModelPerformerArr->pi->presetglobal->foreach->pgenerators->new->HashMap<>->pgenerators->presetzone->getGenerators->putAll->if->pgenerators->presetglobal->getGenerators->putAll->layer->presetzone->getLayer->layerglobal->layer->getGlobalRegion->foreach->layer->getRegions->performer->new->ModelPerformer->if->layerzone->getSample->performer->layerzone->getSample->getName->setName->else->performer->layer->getName->setName->keyfrom->keyto->velfrom->velto->if->layerzone->contains->performer->layerzone->getInteger->setExclusiveClass->if->layerzone->contains->bytes->layerzone->getBytes->if->if->if->if->if->layerzone->contains->bytes->layerzone->getBytes->if->if->if->if->if->presetzone->contains->bytes->presetzone->getBytes->if->if->if->presetzone->contains->bytes->presetzone->getBytes->if->if->performer->setKeyFrom->performer->setKeyTo->performer->setVelFrom->performer->setVelTo->startAddrsOffset->layerzone->getShort->endAddrsOffset->layerzone->getShort->startloopAddrsOffset->layerzone->getShort->endloopAddrsOffset->layerzone->getShort->layerzone->getShort->layerzone->getShort->layerzone->getShort->layerzone->getShort->sample->layerzone->getSample->rootkey->if->layerzone->getShort->layerzone->getShort->pitchcorrection->buff->sample->getDataBuffer->buff24->sample->getData24Buffer->if->buff->buff->capacity->subbuffer->if->buff24->buff24->capacity->subbuffer->osc->sample->getFormat->new->ModelByteBufferWavetable->if->osc->set8BitExtensionBuffer->generators->new->HashMap<>->if->generators->layerglobal->getGenerators->putAll->generators->layerzone->getGenerators->putAll->foreach->pgenerators->entrySet->val->if->generators->gen->getKey->containsKey->layerzone->gen->getKey->getShort->else->generators->gen->getKey->get->gen->getValue->generators->gen->getKey->put->sampleMode->getGeneratorValue->if->if->osc->setLoopStart->osc->setLoopLength->if->osc->setLoopType->if->osc->setLoopType->performer->getOscillators->add->volDelay->getGeneratorValue->volAttack->getGeneratorValue->volHold->getGeneratorValue->volDecay->getGeneratorValue->volSustain->getGeneratorValue->volRelease->getGeneratorValue->if->volKeyNumToHold->getGeneratorValue->fvalue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->volKeyNumToDecay->getGeneratorValue->fvalue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->addTimecentValue->addTimecentValue->addTimecentValue->addTimecentValue->if->if->addValue->addTimecentValue->if->getGeneratorValue->getGeneratorValue->modDelay->getGeneratorValue->modAttack->getGeneratorValue->modHold->getGeneratorValue->modDecay->getGeneratorValue->modSustain->getGeneratorValue->modRelease->getGeneratorValue->if->modKeyNumToHold->getGeneratorValue->fvalue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->modKeyNumToDecay->getGeneratorValue->fvalue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->addTimecentValue->addTimecentValue->addTimecentValue->addTimecentValue->if->if->addValue->addTimecentValue->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->getGeneratorValue->getGeneratorValue->getGeneratorValue->lfo_freq->getGeneratorValue->lfo_delay->getGeneratorValue->addTimecentValue->addValue->vib_freq->getGeneratorValue->vib_delay->getGeneratorValue->addTimecentValue->addValue->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->getGeneratorValue->fvalue->getGeneratorValue->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->layerzone->getShort->val->layerzone->getShort->addValue->if->layerzone->getShort->val->layerzone->getShort->addValue->if->getGeneratorValue->filter_freq->getGeneratorValue->filter_q->getGeneratorValue->addValue->addValue->tune->getGeneratorValue->getGeneratorValue->if->addValue->if->getGeneratorValue->val->getGeneratorValue->addValue->if->getGeneratorValue->val->getGeneratorValue->addValue->if->getGeneratorValue->val->getGeneratorValue->addValue->if->getGeneratorValue->val->getGeneratorValue->addValue->if->getGeneratorValue->fvalue->getGeneratorValue->if->dest->performer->getConnectionBlocks->new->ModelDestination->new->ModelConnectionBlock->add->else->dest->performer->getConnectionBlocks->new->ModelDestination->new->ModelConnectionBlock->add->src->dest->performer->getConnectionBlocks->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->performer->getConnectionBlocks->new->ModelTransform->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->performer->getConnectionBlocks->new->ModelSource->new->ModelIdentifier->new->ModelSource->new->ModelDestination->new->ModelConnectionBlock->add->if->layer->getGlobalRegion->foreach->layer->getGlobalRegion->getModulators->convertModulator->foreach->layerzone->getModulators->convertModulator->if->foreach->presetglobal->getModulators->convertModulator->foreach->presetzone->getModulators->convertModulator->return
SF2Instrument#convertModulator(ModelPerformer, SF2Modulator)::: f2 instrument convert modulator:::src1->modulator->getSourceOperator->convertSource->src2->modulator->getAmountSourceOperator->convertSource->if->modulator->getSourceOperator->return->if->modulator->getAmountSourceOperator->return->amount->modulator->getAmount->amountcorrection->new->doubleArr->extrasrc->new->ModelSourceArr->dst->modulator->getDestinationOperator->convertDestination->if->return->if->modulator->getTransportOperator->dst->getTransform->setTransform->conn->new->ModelConnectionBlock->if->conn->addSource->performer->getConnectionBlocks->add
SF2Instrument#convertSource(int)::: f2 instrument convert source:::if->return->id->idsrc->if->Integer->toString->new->ModelIdentifier->else->if->if->if->if->if->if->new->ModelIdentifier->if->return->msrc->new->ModelSource->transform->msrc->getTransform->if->transform->setDirection->else->transform->setDirection->if->transform->setPolarity->else->transform->setPolarity->if->transform->setTransform->if->transform->setTransform->if->transform->setTransform->return
SF2Instrument#convertDestination(int, double[], ModelSource[])::: f2 instrument convert destination:::id->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->new->ModelSource->break->new->ModelSource->break->new->ModelSource->break->new->ModelSource->break->new->ModelSource->break->new->ModelSource->break->break->if->return->new->ModelDestination->return
SF2Instrument#addTimecentValue(ModelPerformer, ModelIdentifier, short)::: f2 instrument add timecent value:::fvalue->if->else->performer->getConnectionBlocks->new->ModelDestination->new->ModelConnectionBlock->add
SF2Instrument#addValue(ModelPerformer, ModelIdentifier, short)::: f2 instrument add value:::fvalue->performer->getConnectionBlocks->new->ModelDestination->new->ModelConnectionBlock->add
SF2Instrument#addValue(ModelPerformer, ModelIdentifier, double)::: f2 instrument add value:::fvalue->performer->getConnectionBlocks->new->ModelDestination->new->ModelConnectionBlock->add
SF2Instrument#getGeneratorValue(Map, int)::: f2 instrument get generator value:::if->generators->containsKey->return->generators->get->return->SF2Region->getDefaultValue
SF2InstrumentRegion#getLayer()::: f2 instrument region get layer:::return
SF2InstrumentRegion#setLayer(SF2Layer)::: f2 instrument region set layer:::
SF2Layer#getData()::: f2 layer get data:::return
SF2Layer#getName()::: f2 layer get name:::return
SF2Layer#setName(String)::: f2 layer set name:::
SF2Layer#getRegions()::: f2 layer get regions:::return
SF2Layer#getGlobalRegion()::: f2 layer get global region:::return
SF2Layer#setGlobalZone(SF2GlobalRegion)::: f2 layer set global zone:::
SF2Layer#toString()::: f2 layer to string:::return
SF2LayerRegion#getSample()::: f2 layer region get sample:::return
SF2LayerRegion#setSample(SF2Sample)::: f2 layer region set sample:::
SF2Modulator#getAmount()::: f2 modulator get amount:::return
SF2Modulator#setAmount(short)::: f2 modulator set amount:::
SF2Modulator#getAmountSourceOperator()::: f2 modulator get amount source operator:::return
SF2Modulator#setAmountSourceOperator(int)::: f2 modulator set amount source operator:::
SF2Modulator#getTransportOperator()::: f2 modulator get transport operator:::return
SF2Modulator#setTransportOperator(int)::: f2 modulator set transport operator:::
SF2Modulator#getDestinationOperator()::: f2 modulator get destination operator:::return
SF2Modulator#setDestinationOperator(int)::: f2 modulator set destination operator:::
SF2Modulator#getSourceOperator()::: f2 modulator get source operator:::return
SF2Modulator#setSourceOperator(int)::: f2 modulator set source operator:::
SF2Region#getGenerators()::: f2 region get generators:::return
SF2Region#contains(int)::: f2 region contains:::return->generators->containsKey
SF2Region#getDefaultValue(int)::: f2 region get default value:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
SF2Region#getShort(int)::: f2 region get short:::if->contains->return->getDefaultValue->return->generators->get
SF2Region#putShort(int, short)::: f2 region put short:::generators->put
SF2Region#getBytes(int)::: f2 region get bytes:::val->getInteger->bytes->new->byteArr->return
SF2Region#putBytes(int, byte[])::: f2 region put bytes:::generators->put
SF2Region#getInteger(int)::: f2 region get integer:::return->getShort
SF2Region#putInteger(int, int)::: f2 region put integer:::generators->put
SF2Region#getModulators()::: f2 region get modulators:::return
SF2Sample#getData()::: f2 sample get data:::format->getFormat->is->data->getInputStream->if->return->return->data->capacity->new->AudioInputStream
SF2Sample#getDataBuffer()::: f2 sample get data buffer:::return
SF2Sample#getData24Buffer()::: f2 sample get data24 buffer:::return
SF2Sample#getFormat()::: f2 sample get format:::return->new->AudioFormat
SF2Sample#setData(ModelByteBuffer)::: f2 sample set data:::
SF2Sample#setData(byte[])::: f2 sample set data:::new->ModelByteBuffer
SF2Sample#setData(byte[], int, int)::: f2 sample set data:::new->ModelByteBuffer
SF2Sample#setData24(ModelByteBuffer)::: f2 sample set data24:::
SF2Sample#setData24(byte[])::: f2 sample set data24:::new->ModelByteBuffer
SF2Sample#setData24(byte[], int, int)::: f2 sample set data24:::new->ModelByteBuffer
SF2Sample#getName()::: f2 sample get name:::return
SF2Sample#setName(String)::: f2 sample set name:::
SF2Sample#getEndLoop()::: f2 sample get end loop:::return
SF2Sample#setEndLoop(long)::: f2 sample set end loop:::
SF2Sample#getOriginalPitch()::: f2 sample get original pitch:::return
SF2Sample#setOriginalPitch(int)::: f2 sample set original pitch:::
SF2Sample#getPitchCorrection()::: f2 sample get pitch correction:::return
SF2Sample#setPitchCorrection(byte)::: f2 sample set pitch correction:::
SF2Sample#getSampleLink()::: f2 sample get sample link:::return
SF2Sample#setSampleLink(int)::: f2 sample set sample link:::
SF2Sample#getSampleRate()::: f2 sample get sample rate:::return
SF2Sample#setSampleRate(long)::: f2 sample set sample rate:::
SF2Sample#getSampleType()::: f2 sample get sample type:::return
SF2Sample#setSampleType(int)::: f2 sample set sample type:::
SF2Sample#getStartLoop()::: f2 sample get start loop:::return
SF2Sample#setStartLoop(long)::: f2 sample set start loop:::
SF2Sample#toString()::: f2 sample to string:::return
SF2Soundbank#readSoundbank(InputStream)::: f2 soundbank read soundbank:::riff->new->RIFFReader->if->riff->getFormat->equals->throw->new->RIFFInvalidFormatException->if->riff->getType->equals->throw->new->RIFFInvalidFormatException->while->riff->hasNextChunk->chunk->riff->nextChunk->if->chunk->getFormat->equals->if->chunk->getType->equals->readInfoChunk->if->chunk->getType->equals->readSdtaChunk->if->chunk->getType->equals->readPdtaChunk
SF2Soundbank#readInfoChunk(RIFFReader)::: f2 soundbank read info chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->chunk->readUnsignedShort->chunk->readUnsignedShort->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->readUnsignedShort->chunk->readUnsignedShort->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString->else->if->format->equals->chunk->chunk->available->readString
SF2Soundbank#readSdtaChunk(RIFFReader)::: f2 soundbank read sdta chunk:::while->riff->hasNextChunk->chunk->riff->nextChunk->if->chunk->getFormat->equals->if->sampleData->chunk->available->new->byteArr->read->avail->chunk->available->while->if->chunk->readFully->else->chunk->readFully->new->ModelByteBuffer->else->chunk->getFilePointer->chunk->available->new->ModelByteBuffer->if->chunk->getFormat->equals->if->sampleData24->chunk->available->new->byteArr->read->avail->chunk->available->while->if->chunk->readFully->else->chunk->readFully->new->ModelByteBuffer->else->chunk->getFilePointer->chunk->available->new->ModelByteBuffer
SF2Soundbank#readPdtaChunk(RIFFReader)::: f2 soundbank read pdta chunk:::presets->new->ArrayList<>->presets_bagNdx->new->ArrayList<>->presets_splits_gen->new->ArrayList<>->presets_splits_mod->new->ArrayList<>->instruments->new->ArrayList<>->instruments_bagNdx->new->ArrayList<>->instruments_splits_gen->new->ArrayList<>->instruments_splits_mod->new->ArrayList<>->while->riff->hasNextChunk->chunk->riff->nextChunk->format->chunk->getFormat->if->format->equals->if->chunk->available->throw->new->RIFFInvalidDataException->count->chunk->available->for->i->else->if->format->equals->if->chunk->available->throw->new->RIFFInvalidDataException->count->chunk->available->gencount->chunk->readUnsignedShort->modcount->chunk->readUnsignedShort->while->presets_splits_gen->size->presets_splits_gen->add->while->presets_splits_mod->size->presets_splits_mod->add->if->presets_bagNdx->isEmpty->throw->new->RIFFInvalidDataException->offset->presets_bagNdx->get->for->i->for->i->presets_bagNdx->size->else->if->format->equals->for->i->presets_splits_mod->size->else->if->format->equals->for->i->presets_splits_gen->size->else->if->format->equals->if->chunk->available->throw->new->RIFFInvalidDataException->count->chunk->available->for->i->else->if->format->equals->if->chunk->available->throw->new->RIFFInvalidDataException->count->chunk->available->gencount->chunk->readUnsignedShort->modcount->chunk->readUnsignedShort->while->instruments_splits_gen->size->instruments_splits_gen->add->while->instruments_splits_mod->size->instruments_splits_mod->add->if->instruments_bagNdx->isEmpty->throw->new->RIFFInvalidDataException->offset->instruments_bagNdx->get->for->i->for->i->instruments_bagNdx->size->else->if->format->equals->for->i->instruments_splits_mod->size->else->if->format->equals->for->i->instruments_splits_gen->size->else->if->format->equals->if->chunk->available->throw->new->RIFFInvalidDataException->count->chunk->available->for->i->liter->iterator->while->liter->hasNext->layer->liter->next->siter->iterator->globalsplit->while->siter->hasNext->split->siter->next->if->get->sampleid->get->remove->if->samples->size->throw->new->RIFFInvalidDataException->samples->get->else->if->layer->getRegions->remove->gsplit->new->SF2GlobalRegion->layer->setGlobalZone->iiter->iterator->while->iiter->hasNext->instrument->iiter->next->siter->iterator->globalsplit->while->siter->hasNext->split->siter->next->if->get->instrumentid->get->remove->if->layers->size->throw->new->RIFFInvalidDataException->layers->get->else->if->instrument->getRegions->remove->gsplit->new->SF2GlobalRegion->instrument->setGlobalZone
SF2Soundbank#save(String)::: f2 soundbank save:::new->RIFFWriter->writeSoundbank
SF2Soundbank#save(File)::: f2 soundbank save:::new->RIFFWriter->writeSoundbank
SF2Soundbank#save(OutputStream)::: f2 soundbank save:::new->RIFFWriter->writeSoundbank
SF2Soundbank#writeSoundbank(RIFFWriter)::: f2 soundbank write soundbank:::writer->writeList->writeInfo->writer->writeList->writeSdtaChunk->writer->writeList->writePdtaChunk->writer->close
SF2Soundbank#writeInfoStringChunk(RIFFWriter, String, String)::: f2 soundbank write info string chunk:::if->return->chunk->writer->writeChunk->chunk->writeString->len->value->getBytes->chunk->write->if->chunk->write
SF2Soundbank#writeInfo(RIFFWriter)::: f2 soundbank write info:::if->if->ifil_chunk->writer->writeChunk->ifil_chunk->writeUnsignedShort->ifil_chunk->writeUnsignedShort->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->if->iver_chunk->writer->writeChunk->iver_chunk->writeUnsignedShort->iver_chunk->writeUnsignedShort->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writeInfoStringChunk->writer->close
SF2Soundbank#writeSdtaChunk(RIFFWriter)::: f2 soundbank write sdta chunk:::pad->new->byteArr->smpl_chunk->writer->writeChunk->foreach->data->sample->getDataBuffer->data->writeTo->smpl_chunk->write->smpl_chunk->write->if->return->if->return->foreach->data24->sample->getData24Buffer->if->return->sm24_chunk->writer->writeChunk->foreach->data->sample->getData24Buffer->data->writeTo->smpl_chunk->write
SF2Soundbank#writeModulators(RIFFWriter, List)::: f2 soundbank write modulators:::foreach->writer->writeUnsignedShort->writer->writeUnsignedShort->writer->writeShort->writer->writeUnsignedShort->writer->writeUnsignedShort
SF2Soundbank#writeGenerators(RIFFWriter, Map)::: f2 soundbank write generators:::keyrange->generators->get->velrange->generators->get->if->writer->writeUnsignedShort->writer->writeShort->if->writer->writeUnsignedShort->writer->writeShort->foreach->generators->entrySet->if->generator->getKey->continue->if->generator->getKey->continue->writer->generator->getKey->writeUnsignedShort->writer->generator->getValue->writeShort
SF2Soundbank#writePdtaChunk(RIFFWriter)::: f2 soundbank write pdta chunk:::phdr_chunk->writer->writeChunk->phdr_zone_count->foreach->phdr_chunk->writeString->phdr_chunk->writeUnsignedShort->phdr_chunk->writeUnsignedShort->phdr_chunk->writeUnsignedShort->if->preset->getGlobalRegion->preset->getRegions->size->phdr_chunk->writeUnsignedInt->phdr_chunk->writeUnsignedInt->phdr_chunk->writeUnsignedInt->phdr_chunk->writeString->phdr_chunk->writeUnsignedShort->phdr_chunk->writeUnsignedShort->phdr_chunk->writeUnsignedShort->phdr_chunk->writeUnsignedInt->phdr_chunk->writeUnsignedInt->phdr_chunk->writeUnsignedInt->pbag_chunk->writer->writeChunk->pbag_gencount->pbag_modcount->foreach->if->preset->getGlobalRegion->pbag_chunk->writeUnsignedShort->pbag_chunk->writeUnsignedShort->preset->getGlobalRegion->getGenerators->size->preset->getGlobalRegion->getModulators->size->foreach->preset->getRegions->pbag_chunk->writeUnsignedShort->pbag_chunk->writeUnsignedShort->if->layers->indexOf->region->getGenerators->size->region->getModulators->size->pbag_chunk->writeUnsignedShort->pbag_chunk->writeUnsignedShort->pmod_chunk->writer->writeChunk->foreach->if->preset->getGlobalRegion->preset->getGlobalRegion->getModulators->writeModulators->foreach->preset->getRegions->region->getModulators->writeModulators->pmod_chunk->new->byteArr->write->pgen_chunk->writer->writeChunk->foreach->if->preset->getGlobalRegion->preset->getGlobalRegion->getGenerators->writeGenerators->foreach->preset->getRegions->region->getGenerators->writeGenerators->ix->layers->indexOf->if->pgen_chunk->writeUnsignedShort->pgen_chunk->writeShort->pgen_chunk->new->byteArr->write->inst_chunk->writer->writeChunk->inst_zone_count->foreach->inst_chunk->writeString->inst_chunk->writeUnsignedShort->if->instrument->getGlobalRegion->instrument->getRegions->size->inst_chunk->writeString->inst_chunk->writeUnsignedShort->ibag_chunk->writer->writeChunk->ibag_gencount->ibag_modcount->foreach->if->instrument->getGlobalRegion->ibag_chunk->writeUnsignedShort->ibag_chunk->writeUnsignedShort->instrument->getGlobalRegion->getGenerators->size->instrument->getGlobalRegion->getModulators->size->foreach->instrument->getRegions->ibag_chunk->writeUnsignedShort->ibag_chunk->writeUnsignedShort->if->samples->indexOf->region->getGenerators->size->region->getModulators->size->ibag_chunk->writeUnsignedShort->ibag_chunk->writeUnsignedShort->imod_chunk->writer->writeChunk->foreach->if->instrument->getGlobalRegion->instrument->getGlobalRegion->getModulators->writeModulators->foreach->instrument->getRegions->region->getModulators->writeModulators->imod_chunk->new->byteArr->write->igen_chunk->writer->writeChunk->foreach->if->instrument->getGlobalRegion->instrument->getGlobalRegion->getGenerators->writeGenerators->foreach->instrument->getRegions->region->getGenerators->writeGenerators->ix->samples->indexOf->if->igen_chunk->writeUnsignedShort->igen_chunk->writeShort->igen_chunk->new->byteArr->write->shdr_chunk->writer->writeChunk->sample_pos->foreach->shdr_chunk->writeString->start->capacity->end->startLoop->endLoop->if->if->shdr_chunk->writeUnsignedInt->shdr_chunk->writeUnsignedInt->shdr_chunk->writeUnsignedInt->shdr_chunk->writeUnsignedInt->shdr_chunk->writeUnsignedInt->shdr_chunk->writeUnsignedByte->shdr_chunk->writeByte->shdr_chunk->writeUnsignedShort->shdr_chunk->writeUnsignedShort->shdr_chunk->writeString->shdr_chunk->new->byteArr->write
SF2Soundbank#getName()::: f2 soundbank get name:::return
SF2Soundbank#getVersion()::: f2 soundbank get version:::return
SF2Soundbank#getVendor()::: f2 soundbank get vendor:::return
SF2Soundbank#getDescription()::: f2 soundbank get description:::return
SF2Soundbank#setName(String)::: f2 soundbank set name:::
SF2Soundbank#setVendor(String)::: f2 soundbank set vendor:::
SF2Soundbank#setDescription(String)::: f2 soundbank set description:::
SF2Soundbank#getResources()::: f2 soundbank get resources:::resources->layers->size->samples->size->new->SoundbankResourceArr->j->for->i->layers->size->for->i->samples->size->return
SF2Soundbank#getInstruments()::: f2 soundbank get instruments:::inslist_array->instruments->instruments->size->new->SF2InstrumentArr->toArray->Arrays->new->ModelInstrumentComparator->sort->return
SF2Soundbank#getLayers()::: f2 soundbank get layers:::return->layers->layers->size->new->SF2LayerArr->toArray
SF2Soundbank#getSamples()::: f2 soundbank get samples:::return->samples->samples->size->new->SF2SampleArr->toArray
SF2Soundbank#getInstrument(Patch)::: f2 soundbank get instrument:::program->patch->getProgram->bank->patch->getBank->percussion->if->isPercussion->foreach->patch2->instrument->getPatch->program2->patch2->getProgram->bank2->patch2->getBank->if->percussion2->if->isPercussion->if->return->return
SF2Soundbank#getCreationDate()::: f2 soundbank get creation date:::return
SF2Soundbank#setCreationDate(String)::: f2 soundbank set creation date:::
SF2Soundbank#getProduct()::: f2 soundbank get product:::return
SF2Soundbank#setProduct(String)::: f2 soundbank set product:::
SF2Soundbank#getRomName()::: f2 soundbank get rom name:::return
SF2Soundbank#setRomName(String)::: f2 soundbank set rom name:::
SF2Soundbank#getRomVersionMajor()::: f2 soundbank get rom version major:::return
SF2Soundbank#setRomVersionMajor(int)::: f2 soundbank set rom version major:::
SF2Soundbank#getRomVersionMinor()::: f2 soundbank get rom version minor:::return
SF2Soundbank#setRomVersionMinor(int)::: f2 soundbank set rom version minor:::
SF2Soundbank#getTargetEngine()::: f2 soundbank get target engine:::return
SF2Soundbank#setTargetEngine(String)::: f2 soundbank set target engine:::
SF2Soundbank#getTools()::: f2 soundbank get tools:::return
SF2Soundbank#setTools(String)::: f2 soundbank set tools:::
SF2Soundbank#addResource(SoundbankResource)::: f2 soundbank add resource:::if->instruments->add->if->layers->add->if->samples->add
SF2Soundbank#removeResource(SoundbankResource)::: f2 soundbank remove resource:::if->instruments->remove->if->layers->remove->if->samples->remove
SF2Soundbank#addInstrument(SF2Instrument)::: f2 soundbank add instrument:::instruments->add
SF2Soundbank#removeInstrument(SF2Instrument)::: f2 soundbank remove instrument:::instruments->remove
SF2SoundbankReader#getSoundbank(URL)::: f2 soundbank reader get soundbank:::try->return->new->SF2Soundbank->catch->return->return->finally
SF2SoundbankReader#getSoundbank(InputStream)::: f2 soundbank reader get soundbank:::try->stream->mark->return->new->SF2Soundbank->catch->stream->reset->return->finally
SF2SoundbankReader#getSoundbank(File)::: f2 soundbank reader get soundbank:::try->return->new->SF2Soundbank->catch->return->finally
SimpleInstrument#clear()::: simple instrument clear:::parts->clear
SimpleInstrument#add(ModelPerformer[], int, int, int, int, int)::: simple instrument add:::part->new->SimpleInstrumentPart->parts->add
SimpleInstrument#add(ModelPerformer[], int, int, int, int)::: simple instrument add:::add
SimpleInstrument#add(ModelPerformer[], int, int)::: simple instrument add:::add
SimpleInstrument#add(ModelPerformer[])::: simple instrument add:::add
SimpleInstrument#add(ModelPerformer, int, int, int, int, int)::: simple instrument add:::new->ModelPerformerArr->add
SimpleInstrument#add(ModelPerformer, int, int, int, int)::: simple instrument add:::new->ModelPerformerArr->add
SimpleInstrument#add(ModelPerformer, int, int)::: simple instrument add:::new->ModelPerformerArr->add
SimpleInstrument#add(ModelPerformer)::: simple instrument add:::new->ModelPerformerArr->add
SimpleInstrument#add(ModelInstrument, int, int, int, int, int)::: simple instrument add:::ins->getPerformers->add
SimpleInstrument#add(ModelInstrument, int, int, int, int)::: simple instrument add:::ins->getPerformers->add
SimpleInstrument#add(ModelInstrument, int, int)::: simple instrument add:::ins->getPerformers->add
SimpleInstrument#add(ModelInstrument)::: simple instrument add:::ins->getPerformers->add
SimpleInstrument#getPerformers()::: simple instrument get performers:::percount->foreach->if->performers->new->ModelPerformerArr->px->foreach->if->foreach->performer->new->ModelPerformer->performer->getName->setName->performer->mperfm->isDefaultConnectionsEnabled->setDefaultConnectionsEnabled->performer->mperfm->getKeyFrom->setKeyFrom->performer->mperfm->getKeyTo->setKeyTo->performer->mperfm->getVelFrom->setVelFrom->performer->mperfm->getVelTo->setVelTo->performer->mperfm->getExclusiveClass->setExclusiveClass->performer->mperfm->isSelfNonExclusive->setSelfNonExclusive->performer->mperfm->isReleaseTriggered->setReleaseTriggered->if->performer->setExclusiveClass->if->performer->getKeyFrom->performer->setKeyFrom->if->performer->getKeyTo->performer->setKeyTo->if->performer->getVelFrom->performer->setVelFrom->if->performer->getVelTo->performer->setVelTo->performer->getOscillators->mperfm->getOscillators->addAll->performer->getConnectionBlocks->mperfm->getConnectionBlocks->addAll->return
SimpleInstrument#getData()::: simple instrument get data:::return
SimpleInstrument#getName()::: simple instrument get name:::return
SimpleInstrument#setName(String)::: simple instrument set name:::
SimpleInstrument#getPatch()::: simple instrument get patch:::return->new->ModelPatch
SimpleInstrument#setPatch(Patch)::: simple instrument set patch:::if->isPercussion->patch->getBank->patch->getProgram->else->patch->getBank->patch->getProgram
SimpleSoundbank#getName()::: simple soundbank get name:::return
SimpleSoundbank#getVersion()::: simple soundbank get version:::return
SimpleSoundbank#getVendor()::: simple soundbank get vendor:::return
SimpleSoundbank#getDescription()::: simple soundbank get description:::return
SimpleSoundbank#setDescription(String)::: simple soundbank set description:::
SimpleSoundbank#setName(String)::: simple soundbank set name:::
SimpleSoundbank#setVendor(String)::: simple soundbank set vendor:::
SimpleSoundbank#setVersion(String)::: simple soundbank set version:::
SimpleSoundbank#getResources()::: simple soundbank get resources:::return->resources->resources->size->new->SoundbankResourceArr->toArray
SimpleSoundbank#getInstruments()::: simple soundbank get instruments:::inslist_array->instruments->resources->size->new->InstrumentArr->toArray->Arrays->new->ModelInstrumentComparator->sort->return
SimpleSoundbank#getInstrument(Patch)::: simple soundbank get instrument:::program->patch->getProgram->bank->patch->getBank->percussion->if->isPercussion->foreach->patch2->instrument->getPatch->program2->patch2->getProgram->bank2->patch2->getBank->if->percussion2->if->isPercussion->if->return->return
SimpleSoundbank#addResource(SoundbankResource)::: simple soundbank add resource:::if->instruments->add->else->resources->add
SimpleSoundbank#removeResource(SoundbankResource)::: simple soundbank remove resource:::if->instruments->remove->else->resources->remove
SimpleSoundbank#addInstrument(Instrument)::: simple soundbank add instrument:::instruments->add
SimpleSoundbank#removeInstrument(Instrument)::: simple soundbank remove instrument:::instruments->remove
SimpleSoundbank#addAllInstruments(Soundbank)::: simple soundbank add all instruments:::foreach->soundbank->getInstruments->addInstrument
SimpleSoundbank#removeAllInstruments(Soundbank)::: simple soundbank remove all instruments:::foreach->soundbank->getInstruments->removeInstrument
SoftAbstractResampler.ModelAbstractResamplerStream#noteOn(MidiChannel, VoiceStatus, int, int)::: model abstract resampler stream note on:::
SoftAbstractResampler.ModelAbstractResamplerStream#noteOff(int)::: model abstract resampler stream note off:::
SoftAbstractResampler.ModelAbstractResamplerStream#open(ModelWavetable, float)::: model abstract resampler stream open:::osc->getChannels->if->new->floatArrs->osc->openStream->osc->getPitchcorrection->stream->getFormat->getSampleRate->osc->getLoopLength->osc->getLoopStart->if->osc->getLoopType->if->else->for->i->nextBuffer
SoftAbstractResampler.ModelAbstractResamplerStream#setPitch(float)::: model abstract resampler stream set pitch:::Math->Math->log->exp->if
SoftAbstractResampler.ModelAbstractResamplerStream#nextBuffer()::: model abstract resampler stream next buffer:::if->if->stream->reset->if->if->return->if->skips->stream->skip->while->if->if->stream->mark->for->c->ret->if->stream->read->else->slen->if->new->floatArr->sret->stream->read->if->else->for->i->if->for->i->return->if->for->i
SoftAbstractResampler.ModelAbstractResamplerStream#reverseBuffers()::: model abstract resampler stream reverse buffers:::for->c
SoftAbstractResampler.ModelAbstractResamplerStream#read(float[][], int, int)::: model abstract resampler stream read:::if->return->if->if->if->pitchstep->current_pitch->ox->ox_end->ixend->if->while->nextBuffer->if->if->if->if->continue->continue->if->reverseBuffers->bak_ix->bak_ox->bak_pitch->for->i->if->return->continue->if->if->if->if->continue->continue->if->reverseBuffers->bak_ix->bak_ox->bak_pitch->for->i->if->return->return
SoftAbstractResampler.ModelAbstractResamplerStream#close()::: model abstract resampler stream close:::stream->close
SoftAbstractResampler#getPadding()::: soft abstract resampler get padding:::
SoftAbstractResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft abstract resampler interpolate:::
SoftAbstractResampler#openStreamer()::: soft abstract resampler open streamer:::return->new->ModelAbstractResamplerStream
SoftAudioBuffer#swap(SoftAudioBuffer)::: soft audio buffer swap:::bak_size->bak_buffer->bak_empty->bak_format->bak_converter->bak_converter_buffer
SoftAudioBuffer#getFormat()::: soft audio buffer get format:::return
SoftAudioBuffer#getSize()::: soft audio buffer get size:::return
SoftAudioBuffer#clear()::: soft audio buffer clear:::if->Arrays->fill
SoftAudioBuffer#isSilent()::: soft audio buffer is silent:::return
SoftAudioBuffer#array()::: soft audio buffer array:::if->new->floatArr->return
SoftAudioBuffer#get(byte[], int)::: soft audio buffer get:::framesize_pc->format->getFrameSize->format->getChannels->c_len->if->new->byteArr->if->format->getChannels->converter->array->toByteArray->else->converter->array->toByteArray->if->format->getChannels->return->z_stepover->format->getChannels->k_stepover->for->j
SoftAudioProcessor#globalParameterControlChange(int[], long, long)::: soft audio processor global parameter control change:::
SoftAudioProcessor#init(float, float)::: soft audio processor init:::
SoftAudioProcessor#setInput(int, SoftAudioBuffer)::: soft audio processor set input:::
SoftAudioProcessor#setOutput(int, SoftAudioBuffer)::: soft audio processor set output:::
SoftAudioProcessor#setMixMode(boolean)::: soft audio processor set mix mode:::
SoftAudioProcessor#processAudio()::: soft audio processor process audio:::
SoftAudioProcessor#processControlLogic()::: soft audio processor process control logic:::
SoftAudioPusher#start()::: soft audio pusher start:::if->return->new->Thread->audiothread->setDaemon->audiothread->setPriority->audiothread->start
SoftAudioPusher#stop()::: soft audio pusher stop:::if->return->try->audiothread->join->catch->finally
SoftAudioPusher#run()::: soft audio pusher run:::buffer->ais->sourceDataLine->try->while->count->ais->read->if->break->sourceDataLine->write->catch->finally
SoftChannel.MidiControlObject#get(int, String)::: midi control object get:::if->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->return
SoftChannel#restrict7Bit(int)::: soft channel restrict7 bit:::if->return->if->return->return
SoftChannel#restrict14Bit(int)::: soft channel restrict14 bit:::if->return->if->return->return
SoftChannel#findFreeVoice(int)::: soft channel find free voice:::if->return->for->i->vmode->synthesizer->getVoiceAllocationMode->if->steal_channel->for->j->voiceNo->v->for->j->if->for->j->return->else->voiceNo->v->for->j->if->for->j->return
SoftChannel#initVoice(SoftVoice, SoftPerformer, int, int, int, int, ModelConnectionBlock[], ModelChannelMixer, boolean)::: soft channel init voice:::if->for->i->return->clear->put->put->put->put->voice->noteOn->voice->setMute->voice->setSoloMute->if->return->if->tuning->getTuning->controlChange->else->if->if->if->tuning->getTuning->controlChange->else->if->tuning->getTuning
SoftChannel#noteOn(int, int)::: soft channel note on:::noteOn
SoftChannel#noteOn(int, int, int)::: soft channel note on:::restrict7Bit->restrict7Bit->noteOn_internal->if->current_mixer->noteOn
SoftChannel#noteOn_internal(int, int, int)::: soft channel note on_internal:::if->noteOff_internal->return->synchronized->if->for->i->mainmixer->activity->if->if->n_found->for->i->if->return->if->n_found->for->i->controlChange->if->return->if->allNotesOff->if->synthesizer->findInstrument->if->return->if->mainmixer->stopMixer->current_instrument->getSourceInstrument->synthesizer->getFormat->getChannelMixer->if->mainmixer->registerMixer->current_instrument->getDirector->applyInstrumentCustomization->tunedKey->Math->tuning->getTuning->round->current_director->noteOn
SoftChannel#noteOff(int, int)::: soft channel note off:::restrict7Bit->restrict7Bit->noteOff_internal->if->current_mixer->noteOff
SoftChannel#noteOff_internal(int, int)::: soft channel note off_internal:::synchronized->if->if->if->mainmixer->activity->for->i->if->synthesizer->findInstrument->if->return->if->mainmixer->stopMixer->current_instrument->getSourceInstrument->synthesizer->getFormat->getChannelMixer->if->mainmixer->registerMixer->current_instrument->getDirector->applyInstrumentCustomization->tunedKey->Math->tuning->getTuning->round->current_director->noteOff
SoftChannel#play(int, ModelConnectionBlock[])::: soft channel play:::noteNumber->velocity->delay->releasetriggered->p->current_instrument->getPerformer->if->if->x->for->j->findFreeVoice->if->return->initVoice
SoftChannel#noteOff(int)::: soft channel note off:::if->return->noteOff_internal
SoftChannel#setPolyPressure(int, int)::: soft channel set poly pressure:::restrict7Bit->restrict7Bit->if->current_mixer->setPolyPressure->synchronized->mainmixer->activity->get->for->i
SoftChannel#getPolyPressure(int)::: soft channel get poly pressure:::synchronized->return
SoftChannel#setChannelPressure(int)::: soft channel set channel pressure:::restrict7Bit->if->current_mixer->setChannelPressure->synchronized->mainmixer->activity->for->i
SoftChannel#getChannelPressure()::: soft channel get channel pressure:::synchronized->return
SoftChannel#applyInstrumentCustomization()::: soft channel apply instrument customization:::if->return->src_instrument->current_instrument->getSourceInstrument->performers->src_instrument->getPerformers->new_performers->new->ModelPerformerArr->for->i->new->SoftInstrument
SoftChannel#createModelConnections(ModelIdentifier, int[], int[])::: soft channel create model connections:::conns->new->ArrayList<>->for->i->return->conns->conns->size->new->ModelConnectionBlockArr->toArray
SoftChannel#mapPolyPressureToDestination(int[], int[])::: soft channel map poly pressure to destination:::if->return->new->ModelIdentifier->createModelConnections
SoftChannel#mapChannelPressureToDestination(int[], int[])::: soft channel map channel pressure to destination:::if->return->new->ModelIdentifier->createModelConnections
SoftChannel#mapControlToDestination(int, int[], int[])::: soft channel map control to destination:::if->return->if->return->Integer->toString->new->ModelIdentifier->createModelConnections
SoftChannel#controlChangePerNote(int, int, int)::: soft channel control change per note:::if->new->booleanArrs->new->doubleArrs->if->new->booleanArr->Arrays->fill->new->doubleArr->Arrays->fill->if->else->if->for->i->else->if->for->i->else->if->for->i
SoftChannel#getControlPerNote(int, int)::: soft channel get control per note:::if->return->if->return->if->return->return
SoftChannel#controlChange(int, int)::: soft channel control change:::restrict7Bit->restrict7Bit->if->current_mixer->controlChange->synchronized->switch->x->Math->asin->Math->pow->synthesizer->getControlRate->break->val->if->val_i->co_midi_nrpn_nrpn_i->get->if->if->val_i->co_midi_rpn_rpn_i->get->if->if->else->if->else->if->step->if->if->if->if->nrpnChange->if->rpnChange->break->on->if->if->for->i->else->for->i->break->break->if->for->i->if->for->i->break->break->break->break->break->allSoundOff->break->resetAllControllers->break->localControl->break->allNotesOff->break->setOmni->break->setOmni->break->if->setMono->break->setMono->break->break->if->return->if->return->if->for->i
SoftChannel#getController(int)::: soft channel get controller:::synchronized->return
SoftChannel#tuningChange(int)::: soft channel tuning change:::tuningChange
SoftChannel#tuningChange(int, int)::: soft channel tuning change:::synchronized->synthesizer->new->Patch->getTuning
SoftChannel#programChange(int)::: soft channel program change:::programChange
SoftChannel#programChange(int, int)::: soft channel program change:::restrict14Bit->restrict7Bit->synchronized->mainmixer->activity->if
SoftChannel#getProgram()::: soft channel get program:::synchronized->return
SoftChannel#setPitchBend(int)::: soft channel set pitch bend:::restrict14Bit->if->current_mixer->setPitchBend->synchronized->mainmixer->activity->for->i
SoftChannel#getPitchBend()::: soft channel get pitch bend:::synchronized->return
SoftChannel#nrpnChange(int, int)::: soft channel nrpn change:::if->synthesizer->getGeneralMidiMode->if->controlChange->if->controlChange->if->controlChange->if->controlChange->if->controlChange->if->controlChange->if->controlChange->if->controlChange->if->controlChangePerNote->if->controlChangePerNote->if->controlChangePerNote->if->controlChangePerNote->if->controlChangePerNote->val_i->co_midi_nrpn_nrpn_i->get->val_d->co_midi_nrpn_nrpn->get->if->new->intArr->co_midi_nrpn_nrpn_i->put->if->new->doubleArr->co_midi_nrpn_nrpn->put->for->i
SoftChannel#rpnChange(int, int)::: soft channel rpn change:::if->tuningChange->if->val_i->co_midi_rpn_rpn_i->get->val_d->co_midi_rpn_rpn->get->if->new->intArr->co_midi_rpn_rpn_i->put->if->new->doubleArr->co_midi_rpn_rpn->put->for->i
SoftChannel#resetAllControllers()::: soft channel reset all controllers:::resetAllControllers
SoftChannel#resetAllControllers(boolean)::: soft channel reset all controllers:::synchronized->mainmixer->activity->for->i->setChannelPressure->setPitchBend->for->i->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->controlChange->if->controlChange->controlChange->controlChange->foreach->co_midi_rpn_rpn->keySet->if->rpnChange->foreach->co_midi_nrpn_nrpn->keySet->nrpnChange->rpnChange->rpnChange->rpnChange->rpnChange->new->SoftTuning
SoftChannel#allNotesOff()::: soft channel all notes off:::if->current_mixer->allNotesOff->synchronized->for->i
SoftChannel#allSoundOff()::: soft channel all sound off:::if->current_mixer->allSoundOff->synchronized->for->i
SoftChannel#localControl(boolean)::: soft channel local control:::return
SoftChannel#setMono(boolean)::: soft channel set mono:::if->current_mixer->setMono->synchronized->allNotesOff
SoftChannel#getMono()::: soft channel get mono:::synchronized->return
SoftChannel#setOmni(boolean)::: soft channel set omni:::if->current_mixer->setOmni->allNotesOff
SoftChannel#getOmni()::: soft channel get omni:::return
SoftChannel#setMute(boolean)::: soft channel set mute:::if->current_mixer->setMute->synchronized->for->i
SoftChannel#getMute()::: soft channel get mute:::synchronized->return
SoftChannel#setSolo(boolean)::: soft channel set solo:::if->current_mixer->setSolo->synchronized->soloinuse->foreach->if->break->if->foreach->c->setSoloMute->return->foreach->c->setSoloMute
SoftChannel#setSoloMute(boolean)::: soft channel set solo mute:::synchronized->if->return->for->i
SoftChannel#getSolo()::: soft channel get solo:::synchronized->return
SoftChannelProxy#getChannel()::: soft channel proxy get channel:::return
SoftChannelProxy#setChannel(MidiChannel)::: soft channel proxy set channel:::
SoftChannelProxy#allNotesOff()::: soft channel proxy all notes off:::if->return->channel->allNotesOff
SoftChannelProxy#allSoundOff()::: soft channel proxy all sound off:::if->return->channel->allSoundOff
SoftChannelProxy#controlChange(int, int)::: soft channel proxy control change:::if->return->channel->controlChange
SoftChannelProxy#getChannelPressure()::: soft channel proxy get channel pressure:::if->return->return->channel->getChannelPressure
SoftChannelProxy#getController(int)::: soft channel proxy get controller:::if->return->return->channel->getController
SoftChannelProxy#getMono()::: soft channel proxy get mono:::if->return->return->channel->getMono
SoftChannelProxy#getMute()::: soft channel proxy get mute:::if->return->return->channel->getMute
SoftChannelProxy#getOmni()::: soft channel proxy get omni:::if->return->return->channel->getOmni
SoftChannelProxy#getPitchBend()::: soft channel proxy get pitch bend:::if->return->return->channel->getPitchBend
SoftChannelProxy#getPolyPressure(int)::: soft channel proxy get poly pressure:::if->return->return->channel->getPolyPressure
SoftChannelProxy#getProgram()::: soft channel proxy get program:::if->return->return->channel->getProgram
SoftChannelProxy#getSolo()::: soft channel proxy get solo:::if->return->return->channel->getSolo
SoftChannelProxy#localControl(boolean)::: soft channel proxy local control:::if->return->return->channel->localControl
SoftChannelProxy#noteOff(int)::: soft channel proxy note off:::if->return->channel->noteOff
SoftChannelProxy#noteOff(int, int)::: soft channel proxy note off:::if->return->channel->noteOff
SoftChannelProxy#noteOn(int, int)::: soft channel proxy note on:::if->return->channel->noteOn
SoftChannelProxy#programChange(int)::: soft channel proxy program change:::if->return->channel->programChange
SoftChannelProxy#programChange(int, int)::: soft channel proxy program change:::if->return->channel->programChange
SoftChannelProxy#resetAllControllers()::: soft channel proxy reset all controllers:::if->return->channel->resetAllControllers
SoftChannelProxy#setChannelPressure(int)::: soft channel proxy set channel pressure:::if->return->channel->setChannelPressure
SoftChannelProxy#setMono(boolean)::: soft channel proxy set mono:::if->return->channel->setMono
SoftChannelProxy#setMute(boolean)::: soft channel proxy set mute:::if->return->channel->setMute
SoftChannelProxy#setOmni(boolean)::: soft channel proxy set omni:::if->return->channel->setOmni
SoftChannelProxy#setPitchBend(int)::: soft channel proxy set pitch bend:::if->return->channel->setPitchBend
SoftChannelProxy#setPolyPressure(int, int)::: soft channel proxy set poly pressure:::if->return->channel->setPolyPressure
SoftChannelProxy#setSolo(boolean)::: soft channel proxy set solo:::if->return->channel->setSolo
SoftChorus.VariableDelay#setDelay(float)::: variable delay set delay:::
SoftChorus.VariableDelay#setFeedBack(float)::: variable delay set feed back:::
SoftChorus.VariableDelay#setGain(float)::: variable delay set gain:::
SoftChorus.VariableDelay#setReverbSendGain(float)::: variable delay set reverb send gain:::
SoftChorus.VariableDelay#processMix(float[], float[], float[])::: variable delay process mix:::gain->delay->feedback->delaybuffer->len->delaydelta->rnlen->rovepos->if->for->i->else->for->i
SoftChorus.VariableDelay#processReplace(float[], float[], float[])::: variable delay process replace:::Arrays->fill->Arrays->fill->processMix
SoftChorus.LFODelay#setDepth(double)::: delay set depth:::new->VariableDelay
SoftChorus.LFODelay#setRate(double)::: delay set rate:::g
SoftChorus.LFODelay#setPhase(double)::: delay set phase:::
SoftChorus.LFODelay#setFeedBack(float)::: delay set feed back:::vdelay->setFeedBack
SoftChorus.LFODelay#setGain(float)::: delay set gain:::vdelay->setGain
SoftChorus.LFODelay#setReverbSendGain(float)::: delay set reverb send gain:::vdelay->setReverbSendGain
SoftChorus.LFODelay#processMix(float[], float[], float[])::: delay process mix:::while->vdelay->Math->cos->setDelay->vdelay->processMix
SoftChorus.LFODelay#processReplace(float[], float[], float[])::: delay process replace:::while->vdelay->Math->cos->setDelay->vdelay->processReplace
SoftChorus#init(float, float)::: soft chorus init:::new->LFODelay->new->LFODelay->vdelay1L->setGain->vdelay1R->setGain->vdelay1L->setPhase->vdelay1R->setPhase->new->intArr->globalParameterControlChange
SoftChorus#globalParameterControlChange(int[], long, long)::: soft chorus global parameter control change:::if->if->if->switch->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->globalParameterControlChange->break->break->else->if->else->if->else->if->if
SoftChorus#processControlLogic()::: soft chorus process control logic:::if->vdelay1L->setRate->vdelay1R->setRate->vdelay1L->setDepth->vdelay1R->setDepth->vdelay1L->setFeedBack->vdelay1R->setFeedBack->vdelay1L->setReverbSendGain->vdelay1R->setReverbSendGain
SoftChorus#processAudio()::: soft chorus process audio:::if->inputA->isSilent->if->if->left->clear->right->clear->return->else->inputA->array->left->array->right->array->reverb->array->if->vdelay1L->processMix->if->vdelay1R->processMix->else->vdelay1L->processReplace->if->vdelay1R->processReplace
SoftChorus#setInput(int, SoftAudioBuffer)::: soft chorus set input:::if
SoftChorus#setMixMode(boolean)::: soft chorus set mix mode:::
SoftChorus#setOutput(int, SoftAudioBuffer)::: soft chorus set output:::if->if->if
SoftControl#get(int, String)::: soft control get:::
SoftCubicResampler#getPadding()::: soft cubic resampler get padding:::return
SoftCubicResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft cubic resampler interpolate:::pitch->ix->ox->ix_end->ox_end->if->while->iix->fix->y0->y1->y2->y3->a0->a1->a2->a3->else->while->iix->fix->y0->y1->y2->y3->a0->a1->a2->a3
SoftEnvelopeGenerator#reset()::: soft envelope generator reset:::for->i
SoftEnvelopeGenerator#init(SoftSynthesizer)::: soft envelope generator init:::synth->getControlRate->processControlLogic
SoftEnvelopeGenerator#get(int, String)::: soft envelope generator get:::if->if->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->return
SoftEnvelopeGenerator#processControlLogic()::: soft envelope generator process control logic:::for->i
SoftFilter#setFrequency(double)::: soft filter set frequency:::if->return
SoftFilter#setResonance(double)::: soft filter set resonance:::if->return
SoftFilter#reset()::: soft filter reset:::
SoftFilter#setFilterType(int)::: soft filter set filter type:::
SoftFilter#processAudio(SoftAudioBuffer)::: soft filter process audio:::if->filter1->if->filter2->if->filter2->if->filter2->if->filter2->if->filter4->if->filter4
SoftFilter#filter4(SoftAudioBuffer)::: soft filter filter4:::buffer->sbuffer->array->if->filter2calc->if->if->len->a0->a1->a2->b1->b2->gain->wet->a0_delta->a1_delta->a2_delta->b1_delta->b2_delta->gain_delta->wet_delta->x1->x2->y1->y2->xx1->xx2->yy1->yy2->if->for->i->else->if->for->i->else->for->i->if->Math->abs->if->Math->abs->if->Math->abs->if->Math->abs
SoftFilter#sinh(double)::: soft filter sinh:::return->Math->exp->Math->exp
SoftFilter#filter2calc()::: soft filter filter2calc:::resonancedB->if->if->if->if->r->if->bandwidth->Math->pow->omega->cs->Math->cos->sn->Math->sin->alpha->Math->log->sinh->b0->b1->b2->a0->a1->a2->cf->if->r->if->bandwidth->Math->pow->omega->cs->Math->cos->sn->Math->sin->alpha->Math->log->sinh->b0->b1->b2->a0->a1->a2->cf->if->r->if->if->if->else->else->c->Math->tan->csq->resonance->Math->pow->q->Math->sqrt->a0->a1->a2->b1->b2->if->r->if->if->c->Math->tan->csq->resonance->Math->pow->q->Math->sqrt->a0->a1->a2->b1->b2
SoftFilter#filter2(SoftAudioBuffer)::: soft filter filter2:::buffer->sbuffer->array->if->filter2calc->if->if->len->a0->a1->a2->b1->b2->gain->wet->a0_delta->a1_delta->a2_delta->b1_delta->b2_delta->gain_delta->wet_delta->x1->x2->y1->y2->if->for->i->else->if->for->i->else->for->i->if->Math->abs->if->Math->abs->if->Math->abs->if->Math->abs
SoftFilter#filter1calc()::: soft filter filter1calc:::if->c->if->Math->Math->cos->sqrt->Math->sqrt->if->if->Math->sqrt->Math->pow->Math->pow->if->if
SoftFilter#filter1(SoftAudioBuffer)::: soft filter filter1:::if->filter1calc->if->if->buffer->sbuffer->array->len->a0->q->gain->wet->a0_delta->q_delta->gain_delta->wet_delta->y2->y1->if->for->i->else->if->ga0->for->i->else->for->i->if->Math->abs->if->Math->abs
SoftInstrument#initPerformers(ModelPerformer[])::: soft instrument init performers:::new->SoftPerformerArr->for->i
SoftInstrument#getDirector(MidiChannel, ModelDirectedPlayer)::: soft instrument get director:::return->ins->getDirector
SoftInstrument#getSourceInstrument()::: soft instrument get source instrument:::return
SoftInstrument#getData()::: soft instrument get data:::return
SoftInstrument#getPerformer(int)::: soft instrument get performer:::return
SoftJitterCorrector.JitterStream#nextReadBuffer()::: jitter stream next read buffer:::synchronized->if->w_m->if->buffpos->return->while->try->Thread->sleep->catch->return->finally->synchronized->if->buffpos->return
SoftJitterCorrector.JitterStream#nextWriteBuffer()::: jitter stream next write buffer:::synchronized->return
SoftJitterCorrector.JitterStream#commit()::: jitter stream commit:::synchronized->if->newsize->Math->max->new->byteArrs
SoftJitterCorrector.JitterStream#close()::: jitter stream close:::synchronized->try->thread->join->catch->finally->stream->close
SoftJitterCorrector.JitterStream#read()::: jitter stream read:::b->new->byteArr->if->read->return->return
SoftJitterCorrector.JitterStream#fillBuffer()::: jitter stream fill buffer:::nextReadBuffer
SoftJitterCorrector.JitterStream#read(byte[], int, int)::: jitter stream read:::if->fillBuffer->bbuffer_len->offlen->while->if->available->fillBuffer->else->bbuffer->bbuffer_pos->while->return
SoftJitterCorrector.JitterStream#available()::: jitter stream available:::return
SoftLanczosResampler#sinc(double)::: soft lanczos resampler sinc:::return->Math->sin
SoftLanczosResampler#sincTable(int, float)::: soft lanczos resampler sinc table:::center->w->new->floatArr->for->k->return
SoftLanczosResampler#getPadding()::: soft lanczos resampler get padding:::return
SoftLanczosResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft lanczos resampler interpolate:::pitch->ix->ox->ix_end->ox_end->if->while->iix->sinc_table->xx->y->for->i->else->while->iix->sinc_table->xx->y->for->i
SoftLimiter#init(float, float)::: soft limiter init:::
SoftLimiter#setInput(int, SoftAudioBuffer)::: soft limiter set input:::if->if
SoftLimiter#setOutput(int, SoftAudioBuffer)::: soft limiter set output:::if->if
SoftLimiter#setMixMode(boolean)::: soft limiter set mix mode:::
SoftLimiter#globalParameterControlChange(int[], long, long)::: soft limiter global parameter control change:::
SoftLimiter#processAudio()::: soft limiter process audio:::if->isSilent->isSilent->if->if->bufferLout->clear->if->bufferRout->clear->return->else->bufferL->array->bufferR->array->bufferLout->array->bufferRout->array->if->new->floatArr->if->if->new->floatArr->max->len->if->for->i->else->for->i->lmax->if->newgain->if->else->if->gaindelta->if->if->for->i->else->for->i->else->if->for->i->else->for->i
SoftLimiter#processControlLogic()::: soft limiter process control logic:::
SoftLinearResampler#getPadding()::: soft linear resampler get padding:::return
SoftLinearResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft linear resampler interpolate:::pitch->ix->ox->ix_end->ox_end->if->while->iix->fix->i->else->while->iix->fix->i
SoftLinearResampler2#getPadding()::: soft linear resampler2 get padding:::return
SoftLinearResampler2#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft linear resampler2 interpolate:::pitch->ix->ox->ix_end->ox_end->if->return->p_ix->p_ix_end->p_pitch->if->p_ix_len->p_mod->if->ox_end2->if->while->iix->fix->i->else->p_pitchstep->while->iix->fix->i
SoftLowFrequencyOscillator#reset()::: soft low frequency oscillator reset:::for->i
SoftLowFrequencyOscillator#init(SoftSynthesizer)::: soft low frequency oscillator init:::synth->getControlRate->for->i->processControlLogic
SoftLowFrequencyOscillator#processControlLogic()::: soft low frequency oscillator process control logic:::for->i
SoftLowFrequencyOscillator#get(int, String)::: soft low frequency oscillator get:::if->if->return->if->name->equals->return->if->name->equals->return->if->name->equals->return->return
SoftMainMixer#processSystemExclusiveMessage(byte[])::: soft main mixer process system exclusive message:::synchronized->activity->if->deviceID->if->synth->getDeviceID->subid1->subid2->switch->switch->tuning->synth->new->Patch->getTuning->tuning->load->break->tuning->synth->new->Patch->getTuning->tuning->load->break->tuning->new->SoftTuning->channelmask->channels->for->i->break->break->break->switch->synth->setGeneralMidiMode->reset->break->synth->setGeneralMidiMode->reset->break->synth->setGeneralMidiMode->reset->break->break->break->switch->if->synth->getGeneralMidiMode->synth->setGeneralMidiMode->reset->break->synth->setGeneralMidiMode->reset->break->break->break->break->break->break->if->deviceID->if->synth->getDeviceID->subid1->subid2->switch->switch->val->if->setVolume->else->if->setBalance->else->if->setFineTuning->else->if->setCoarseTuning->break->ix->slotPathLen->paramWidth->valueWidth->slotPath->new->intArr->for->i->paramCount->params->new->longArr->values->new->longArr->for->i->globalParameterControlChange->break->break->break->switch->tuning->synth->new->Patch->getTuning->tuning->load->voices->synth->getVoices->for->i->break->tuning->synth->new->Patch->getTuning->tuning->load->voices->synth->getVoices->for->i->break->tuning->new->SoftTuning->channelmask->channels->for->i->voices->synth->getVoices->for->i->break->break->break->switch->destinations->new->intArr->ranges->new->intArr->ix->for->j->channel->softchannel->softchannel->mapChannelPressureToDestination->break->destinations->new->intArr->ranges->new->intArr->ix->for->j->channel->softchannel->softchannel->mapPolyPressureToDestination->break->destinations->new->intArr->ranges->new->intArr->ix->for->j->channel->softchannel->control->softchannel->mapControlToDestination->break->break->break->switch->channel->keynumber->softchannel->for->j->break->break->break->break
SoftMainMixer#processMessages(long)::: soft main mixer process messages:::iter->midimessages->entrySet->iterator->while->iter->hasNext->entry->iter->next->if->entry->getKey->return->msec_delay->entry->getKey->if->if->entry->getValue->processMessage->iter->remove
SoftMainMixer#processAudioBuffers()::: soft main mixer process audio buffers:::if->for->i->if->isSilent->swap->if->isSilent->swap->if->isSilent->swap->if->isSilent->swap->if->isSilent->swap->volume_left->volume_right->act_registeredMixers->synchronized->msec_pos->processMessages->if->if->foreach->c->allSoundOff->for->i->volume->balance->if->else->chorus->processControlLogic->reverb->processControlLogic->agc->processControlLogic->if->if->registeredMixers->size->new->SoftChannelMixerContainerArr->registeredMixers->toArray->if->if->if->leftbak->rightbak->monobak->delayleftbak->delayrightbak->delaymonobak->bufferlen->getSize->cbuffer->new->floatArrs->obuffer->new->floatArrs->leftbak->array->if->rightbak->array->foreach->clear->clear->clear->if->isSilent->swap->if->isSilent->swap->if->isSilent->swap->array->if->array->hasactivevoices->for->i->if->isSilent->mono->array->left->array->if->right->array->for->i->else->for->i->if->process->synchronized->registeredMixers->remove->for->i->if->synchronized->if->if->stoppedMixers->contains->stoppedMixers->remove->stop->for->i->if->isSilent->mono->array->left->array->bufferlen->getSize->if->right->array->for->i->else->for->i->if->chorus->processAudio->if->reverb->processAudio->if->if->left->array->right->array->bufferlen->getSize->amp->amp_delta->for->i->if->for->i->else->if->left->array->right->array->bufferlen->getSize->amp->for->i->if->for->i->if->isSilent->isSilent->midimessages_size->synchronized->midimessages->size->if->if->synchronized->if->setInputStream->else->if->agc->processAudio
SoftMainMixer#activity()::: soft main mixer activity:::silent_samples->if->if->setInputStream
SoftMainMixer#stopMixer(ModelChannelMixer)::: soft main mixer stop mixer:::if->new->HashSet<>->stoppedMixers->add
SoftMainMixer#registerMixer(ModelChannelMixer)::: soft main mixer register mixer:::if->new->HashSet<>->mixercontainer->new->SoftChannelMixerContainer->new->SoftAudioBufferArr->for->i->registeredMixers->add
SoftMainMixer#getInputStream()::: soft main mixer get input stream:::return
SoftMainMixer#reset()::: soft main mixer reset:::channels->for->i->setVolume->setBalance->setCoarseTuning->setFineTuning->new->intArr->new->longArr->new->longArr->globalParameterControlChange->new->intArr->new->longArr->new->longArr->globalParameterControlChange
SoftMainMixer#setVolume(int)::: soft main mixer set volume:::synchronized
SoftMainMixer#setBalance(int)::: soft main mixer set balance:::synchronized
SoftMainMixer#setFineTuning(int)::: soft main mixer set fine tuning:::synchronized
SoftMainMixer#setCoarseTuning(int)::: soft main mixer set coarse tuning:::synchronized
SoftMainMixer#getVolume()::: soft main mixer get volume:::synchronized->return
SoftMainMixer#getBalance()::: soft main mixer get balance:::synchronized->return
SoftMainMixer#getFineTuning()::: soft main mixer get fine tuning:::synchronized->return
SoftMainMixer#getCoarseTuning()::: soft main mixer get coarse tuning:::synchronized->return
SoftMainMixer#globalParameterControlChange(int[], long[], long[])::: soft main mixer global parameter control change:::if->return->synchronized->if->for->i->if->for->i
SoftMainMixer#processMessage(Object)::: soft main mixer process message:::if->processMessage->if->processMessage
SoftMainMixer#processMessage(MidiMessage)::: soft main mixer process message:::if->sms->sms->getChannel->sms->getCommand->sms->getData1->sms->getData2->processMessage->return->message->getMessage->processMessage
SoftMainMixer#processMessage(byte[])::: soft main mixer process message:::status->if->if->processSystemExclusiveMessage->return->cmd->ch->data1->data2->if->else->if->else->processMessage
SoftMainMixer#processMessage(int, int, int, int)::: soft main mixer process message:::synchronized->activity->if->status->switch->synchronized->break->break->return->channels->if->return->softchannel->switch->if->softchannel->noteOn->else->softchannel->noteOn->break->softchannel->noteOff->break->softchannel->setPolyPressure->break->softchannel->controlChange->break->softchannel->programChange->break->softchannel->setChannelPressure->break->softchannel->setPitchBend->break->break
SoftMainMixer#getMicrosecondPosition()::: soft main mixer get microsecond position:::if->if->return->return
SoftMainMixer#close()::: soft main mixer close:::
SoftMidiAudioFileReader#getAudioFileFormat(Sequence)::: soft midi audio file reader get audio file format:::totallen->seq->getMicrosecondLength->len->format->getFrameRate->return->new->StandardFileFormat
SoftMidiAudioFileReader#getAudioInputStream(Sequence)::: soft midi audio file reader get audio input stream:::synth->new->SoftSynthesizer->stream->recv->try->synth->openStream->synth->getReceiver->catch->throw->e->toString->new->InvalidMidiDataException->finally->divtype->seq->getDivisionType->tracks->seq->getTracks->trackspos->new->intArr->mpq->seqres->seq->getResolution->lasttick->curtime->while->selevent->seltrack->for->i->if->break->tick->selevent->getTick->if->else->msg->selevent->getMessage->if->if->if->getType->data->getData->if->throw->new->InvalidMidiDataException->else->recv->send->totallen->len->stream->getFormat->getFrameRate->stream->getFormat->new->AudioInputStream->return
SoftMidiAudioFileReader#getAudioInputStream(InputStream)::: soft midi audio file reader get audio input stream:::stream->mark->try->return->MidiSystem->getSequence->getAudioInputStream->catch->stream->reset->throw->new->UnsupportedAudioFileException->finally
SoftMidiAudioFileReader#getAudioFileFormatImpl(InputStream)::: soft midi audio file reader get audio file format impl:::try->return->MidiSystem->getSequence->getAudioFileFormat->catch->throw->new->UnsupportedAudioFileException->finally
SoftMixingClip#processControlLogic()::: soft mixing clip process control logic:::if->else->if->else->if->if->AudioFloatInputStream->new->AudioInputStream->getInputStream->if->Math->format->getSampleRate->outputformat->getSampleRate->abs->new->AudioFloatInputStreamResampler
SoftMixingClip#processAudioLogic(SoftAudioBuffer[])::: soft mixing clip process audio logic:::if->left->array->right->array->bufferlen->getSize->readlen->if->new->floatArr->ret->try->afis->read->if->return->if->Arrays->fill->catch->finally->in_c->for->i->ix->if->if->for->i->ix->else->for->i->ix->if->eff1->array->for->i->ix->if->for->i->ix->if->eff2->array->for->i->ix->if->for->i->ix
SoftMixingClip#getFrameLength()::: soft mixing clip get frame length:::return->format->getFrameSize
SoftMixingClip#getMicrosecondLength()::: soft mixing clip get microsecond length:::return->getFrameLength->getFormat->getSampleRate
SoftMixingClip#loop(int)::: soft mixing clip loop:::event->synchronized->if->isOpen->if->return->getLongFramePosition->new->LineEvent->if->sendEvent
SoftMixingClip#open(AudioInputStream)::: soft mixing clip open:::if->isOpen->throw->getFormat->getFrameLength->new->IllegalStateException->if->AudioFloatConverter->stream->getFormat->getConverter->throw->stream->getFormat->toString->new->IllegalArgumentException->if->stream->getFrameLength->data->stream->getFrameLength->stream->getFormat->getFrameSize->new->byteArr->readsize->stream->getFormat->getFrameSize->len->while->if->ret->stream->read->if->break->if->Thread->yield->stream->getFormat->open->else->baos->new->ByteArrayOutputStream->b->stream->getFormat->getFrameSize->new->byteArr->r->while->stream->read->if->Thread->yield->baos->write->stream->getFormat->baos->toByteArray->baos->size->open
SoftMixingClip#open(AudioFormat, byte[], int, int)::: soft mixing clip open:::synchronized->if->isOpen->throw->getFormat->getFrameLength->new->IllegalStateException->if->AudioFloatConverter->getConverter->throw->format->toString->new->IllegalArgumentException->Toolkit->format->getFrameSize->validateBuffer->if->Arrays->copyOf->format->getFrameSize->if->mixer->isOpen->mixer->open->mixer->getFormat->outputformat->getChannels->format->getChannels->mixer->getMainMixer->openLine
SoftMixingClip#setFramePosition(int)::: soft mixing clip set frame position:::synchronized
SoftMixingClip#setLoopPoints(int, int)::: soft mixing clip set loop points:::synchronized->if->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
SoftMixingClip#setMicrosecondPosition(long)::: soft mixing clip set microsecond position:::getFormat->getSampleRate->setFramePosition
SoftMixingClip#available()::: soft mixing clip available:::return
SoftMixingClip#drain()::: soft mixing clip drain:::
SoftMixingClip#flush()::: soft mixing clip flush:::
SoftMixingClip#getBufferSize()::: soft mixing clip get buffer size:::return
SoftMixingClip#getFormat()::: soft mixing clip get format:::return
SoftMixingClip#getFramePosition()::: soft mixing clip get frame position:::synchronized->return
SoftMixingClip#getLevel()::: soft mixing clip get level:::return
SoftMixingClip#getLongFramePosition()::: soft mixing clip get long frame position:::return->getFramePosition
SoftMixingClip#getMicrosecondPosition()::: soft mixing clip get microsecond position:::return->getFramePosition->getFormat->getSampleRate
SoftMixingClip#isActive()::: soft mixing clip is active:::synchronized->return
SoftMixingClip#isRunning()::: soft mixing clip is running:::synchronized->return
SoftMixingClip#start()::: soft mixing clip start:::event->synchronized->if->isOpen->if->return->getLongFramePosition->new->LineEvent->if->sendEvent
SoftMixingClip#stop()::: soft mixing clip stop:::event->synchronized->if->isOpen->if->return->getLongFramePosition->new->LineEvent->if->sendEvent
SoftMixingClip#close()::: soft mixing clip close:::event->synchronized->if->isOpen->return->stop->getLongFramePosition->new->LineEvent->mixer->getMainMixer->closeLine->if->sendEvent
SoftMixingClip#isOpen()::: soft mixing clip is open:::return
SoftMixingClip#open()::: soft mixing clip open:::if->throw->new->IllegalArgumentException->open
SoftMixingDataLine.AudioFloatInputStreamResampler#available()::: audio float input stream resampler available:::return
SoftMixingDataLine.AudioFloatInputStreamResampler#close()::: audio float input stream resampler close:::ais->close
SoftMixingDataLine.AudioFloatInputStreamResampler#getFormat()::: audio float input stream resampler get format:::return
SoftMixingDataLine.AudioFloatInputStreamResampler#getFrameLength()::: audio float input stream resampler get frame length:::return
SoftMixingDataLine.AudioFloatInputStreamResampler#mark(int)::: audio float input stream resampler mark:::ais->mark->if->new->floatArrs->for->c
SoftMixingDataLine.AudioFloatInputStreamResampler#markSupported()::: audio float input stream resampler mark supported:::return->ais->markSupported
SoftMixingDataLine.AudioFloatInputStreamResampler#readNextBuffer()::: audio float input stream resampler read next buffer:::if->return->for->c->ais->read->if->while->ret->ais->read->if->break->Arrays->fill->else->Arrays->fill->ibuffer2_len->for->c
SoftMixingDataLine.AudioFloatInputStreamResampler#read(float[], int, int)::: audio float input stream resampler read:::if->new->floatArrs->if->return->if->return->remain->destPos->in_end->while->if->if->readNextBuffer->if->if->break->if->break->preDestPos->for->c->for->c->return
SoftMixingDataLine.AudioFloatInputStreamResampler#reset()::: audio float input stream resampler reset:::ais->reset->if->return->for->c
SoftMixingDataLine.AudioFloatInputStreamResampler#skip(long)::: audio float input stream resampler skip:::if->return->if->targetFormat->getFrameSize->new->floatArr->l_skipbuffer->remain->while->ret->Math->min->read->if->if->return->break->return
SoftMixingDataLine.Gain#setValue(float)::: gain set value:::super->setValue->calcVolume
SoftMixingDataLine.Mute#setValue(boolean)::: mute set value:::super->setValue->calcVolume
SoftMixingDataLine.ApplyReverb#setValue(boolean)::: apply reverb set value:::super->setValue->calcVolume
SoftMixingDataLine.Balance#setValue(float)::: balance set value:::super->setValue->calcVolume
SoftMixingDataLine.Pan#setValue(float)::: pan set value:::super->setValue->balance_control->setValue
SoftMixingDataLine.Pan#getValue()::: pan get value:::return->balance_control->getValue
SoftMixingDataLine.ReverbSend#setValue(float)::: reverb send set value:::super->setValue->balance_control->setValue
SoftMixingDataLine.ChorusSend#setValue(float)::: chorus send set value:::super->setValue->balance_control->setValue
SoftMixingDataLine#processControlLogic()::: soft mixing data line process control logic:::
SoftMixingDataLine#processAudioLogic(SoftAudioBuffer[])::: soft mixing data line process audio logic:::
SoftMixingDataLine#calcVolume()::: soft mixing data line calc volume:::synchronized->gain->Math->gain_control->getValue->pow->if->mute_control->getValue->if->mixer->getFormat->getChannels->balance->balance_control->getValue->if->else->Math->reverbsend_control->getValue->pow->Math->chorussend_control->getValue->pow->if->apply_reverb->getValue
SoftMixingDataLine#sendEvent(LineEvent)::: soft mixing data line send event:::if->listeners->size->return->listener_array->listeners->listeners->size->new->LineListenerArr->toArray->foreach->listener->update
SoftMixingDataLine#addLineListener(LineListener)::: soft mixing data line add line listener:::synchronized->listeners->add
SoftMixingDataLine#removeLineListener(LineListener)::: soft mixing data line remove line listener:::synchronized->listeners->add
SoftMixingDataLine#getLineInfo()::: soft mixing data line get line info:::return
SoftMixingDataLine#getControl(Type)::: soft mixing data line get control:::if->for->i->throw->new->IllegalArgumentException
SoftMixingDataLine#getControls()::: soft mixing data line get controls:::return->Arrays->copyOf
SoftMixingDataLine#isControlSupported(Type)::: soft mixing data line is control supported:::if->for->i->return
SoftMixingMainMixer#getInputStream()::: soft mixing main mixer get input stream:::return
SoftMixingMainMixer#processAudioBuffers()::: soft mixing main mixer process audio buffers:::for->i->openLines->synchronized->for->i->chorus->processControlLogic->reverb->processControlLogic->agc->processControlLogic->for->i->chorus->processAudio->reverb->processAudio->agc->processAudio
SoftMixingMainMixer#openLine(SoftMixingDataLine)::: soft mixing main mixer open line:::synchronized->openLinesList->add->openLinesList->openLinesList->size->new->SoftMixingDataLineArr->toArray
SoftMixingMainMixer#closeLine(SoftMixingDataLine)::: soft mixing main mixer close line:::synchronized->openLinesList->remove->openLinesList->openLinesList->size->new->SoftMixingDataLineArr->toArray->if->if->mixer->close
SoftMixingMainMixer#getOpenLines()::: soft mixing main mixer get open lines:::synchronized->return
SoftMixingMainMixer#close()::: soft mixing main mixer close:::openLines->for->i
SoftMixingMixer#getLine(Line.Info)::: soft mixing mixer get line:::if->isLineSupported->throw->new->IllegalArgumentException->if->info->getLineClass->return->new->SoftMixingSourceDataLine->if->info->getLineClass->return->new->SoftMixingClip->throw->new->IllegalArgumentException
SoftMixingMixer#getMaxLines(Line.Info)::: soft mixing mixer get max lines:::if->info->getLineClass->return->if->info->getLineClass->return->return
SoftMixingMixer#getMixerInfo()::: soft mixing mixer get mixer info:::return
SoftMixingMixer#getSourceLineInfo()::: soft mixing mixer get source line info:::localArray->new->Line.InfoArr->System->arraycopy->return
SoftMixingMixer#getSourceLineInfo(javax.sound.sampled.Line.Info)::: soft mixing mixer get source line info:::i->infos->new->ArrayList<>->for->return->infos->infos->size->new->Line.InfoArr->toArray
SoftMixingMixer#getSourceLines()::: soft mixing mixer get source lines:::localLines->synchronized->if->return->new->LineArr->sourceLines->mainmixer->getOpenLines->new->LineArr->for->i->return
SoftMixingMixer#getTargetLineInfo()::: soft mixing mixer get target line info:::return->new->javax.sound.sampled.Line.InfoArr
SoftMixingMixer#getTargetLineInfo(javax.sound.sampled.Line.Info)::: soft mixing mixer get target line info:::return->new->javax.sound.sampled.Line.InfoArr
SoftMixingMixer#getTargetLines()::: soft mixing mixer get target lines:::return->new->LineArr
SoftMixingMixer#isLineSupported(javax.sound.sampled.Line.Info)::: soft mixing mixer is line supported:::if->for->i->return
SoftMixingMixer#isSynchronizationSupported(Line[], boolean)::: soft mixing mixer is synchronization supported:::return
SoftMixingMixer#synchronize(Line[], boolean)::: soft mixing mixer synchronize:::throw->new->IllegalArgumentException
SoftMixingMixer#unsynchronize(Line[])::: soft mixing mixer unsynchronize:::throw->new->IllegalArgumentException
SoftMixingMixer#addLineListener(LineListener)::: soft mixing mixer add line listener:::synchronized->listeners->add
SoftMixingMixer#sendEvent(LineEvent)::: soft mixing mixer send event:::if->listeners->size->return->listener_array->listeners->listeners->size->new->LineListenerArr->toArray->foreach->listener->update
SoftMixingMixer#close()::: soft mixing mixer close:::if->isOpen->return->new->LineEvent->sendEvent->pusher_to_be_closed->pusher_stream_to_be_closed->synchronized->if->if->pusher_to_be_closed->stop->try->pusher_stream_to_be_closed->close->catch->e->printStackTrace->finally->synchronized->if->mainmixer->close->if->sourceDataLine->drain->sourceDataLine->close
SoftMixingMixer#getControl(Type)::: soft mixing mixer get control:::throw->new->IllegalArgumentException
SoftMixingMixer#getControls()::: soft mixing mixer get controls:::return->new->ControlArr
SoftMixingMixer#getLineInfo()::: soft mixing mixer get line info:::return->new->Line.Info
SoftMixingMixer#isControlSupported(Type)::: soft mixing mixer is control supported:::return
SoftMixingMixer#isOpen()::: soft mixing mixer is open:::synchronized->return
SoftMixingMixer#open()::: soft mixing mixer open:::if->isOpen->return->open
SoftMixingMixer#open(SourceDataLine)::: soft mixing mixer open:::if->isOpen->return->synchronized->try->if->line->getFormat->ais->getFormat->openStream->if->synchronized->Thread->currentThread->try->defaultmixer->AudioSystem->getMixer->if->idealinfo->idealformat->lineinfos->defaultmixer->getSourceLineInfo->for->i->if->defaultmixer->getLine->if->AudioSystem->getSourceDataLine->catch->finally->synchronized->if->throw->info->toString->new->IllegalArgumentException->latency->if->line->isOpen->bufferSize->getFormat->getFrameSize->getFormat->getFrameRate->line->getFormat->open->if->line->isActive->line->start->controlbuffersize->try->ais->available->catch->finally->buffersize->line->getBufferSize->if->if->new->SoftJitterCorrector->new->SoftAudioPusher->pusher->start->catch->if->isOpen->close->throw->e->toString->new->LineUnavailableException->finally
SoftMixingMixer#openStream(AudioFormat)::: soft mixing mixer open stream:::if->isOpen->throw->new->LineUnavailableException->synchronized->if->new->SoftMixingMainMixer->new->LineEvent->sendEvent->return->mainmixer->getInputStream
SoftMixingMixer#removeLineListener(LineListener)::: soft mixing mixer remove line listener:::synchronized->listeners->remove
SoftMixingMixer#getLatency()::: soft mixing mixer get latency:::synchronized->return
SoftMixingMixer#getFormat()::: soft mixing mixer get format:::synchronized->return
SoftMixingMixer#getControlRate()::: soft mixing mixer get control rate:::return
SoftMixingMixer#getMainMixer()::: soft mixing mixer get main mixer:::if->isOpen->return->return
SoftMixingMixerProvider#getMixer(Info)::: soft mixing mixer provider get mixer:::if->throw->info->toString->new->IllegalArgumentException->synchronized->if->if->Thread->currentThread->throw->info->toString->new->IllegalArgumentException->if->new->SoftMixingMixer->return
SoftMixingMixerProvider#getMixerInfo()::: soft mixing mixer provider get mixer info:::return->new->InfoArr
SoftMixingSourceDataLine.NonBlockingFloatInputStream#available()::: non blocking float input stream available:::return->ais->available
SoftMixingSourceDataLine.NonBlockingFloatInputStream#close()::: non blocking float input stream close:::ais->close
SoftMixingSourceDataLine.NonBlockingFloatInputStream#getFormat()::: non blocking float input stream get format:::return->ais->getFormat
SoftMixingSourceDataLine.NonBlockingFloatInputStream#getFrameLength()::: non blocking float input stream get frame length:::return->ais->getFrameLength
SoftMixingSourceDataLine.NonBlockingFloatInputStream#mark(int)::: non blocking float input stream mark:::ais->mark
SoftMixingSourceDataLine.NonBlockingFloatInputStream#markSupported()::: non blocking float input stream mark supported:::return->ais->markSupported
SoftMixingSourceDataLine.NonBlockingFloatInputStream#read(float[], int, int)::: non blocking float input stream read:::avail->available->if->ret->ais->read->Arrays->fill->return->return->ais->read
SoftMixingSourceDataLine.NonBlockingFloatInputStream#reset()::: non blocking float input stream reset:::ais->reset
SoftMixingSourceDataLine.NonBlockingFloatInputStream#skip(long)::: non blocking float input stream skip:::return->ais->skip
SoftMixingSourceDataLine#write(byte[], int, int)::: soft mixing source data line write:::if->isOpen->return->if->throw->new->IllegalArgumentException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException->buff->buff_len->l->while->avail->synchronized->pos->while->if->break->if->if->return->if->try->Thread->sleep->catch->return->finally->if->isRunning->return->return
SoftMixingSourceDataLine#processControlLogic()::: soft mixing source data line process control logic:::
SoftMixingSourceDataLine#processAudioLogic(SoftAudioBuffer[])::: soft mixing source data line process audio logic:::if->left->array->right->array->bufferlen->getSize->readlen->if->new->floatArr->ret->try->afis->read->if->Arrays->fill->catch->finally->in_c->for->i->ix->if->if->for->i->ix->else->for->i->ix->if->eff1->array->for->i->ix->if->for->i->ix->if->eff2->array->for->i->ix->if->for->i->ix
SoftMixingSourceDataLine#open()::: soft mixing source data line open:::open
SoftMixingSourceDataLine#open(AudioFormat)::: soft mixing source data line open:::if->format->getFrameRate->format->getFrameSize->open
SoftMixingSourceDataLine#open(AudioFormat, int)::: soft mixing source data line open:::event->if->format->getFrameSize->format->getFrameSize->synchronized->if->isOpen->if->mixer->isOpen->mixer->open->new->LineEvent->format->getFrameSize->format->getFrameSize->mixer->getFormat->outputformat->getChannels->format->getChannels->mixer->getMainMixer->openLine->new->byteArr->cycling_inputstream->new->InputStream->AudioFloatInputStream->new->AudioInputStream->getInputStream->new->NonBlockingFloatInputStream->if->Math->format->getSampleRate->outputformat->getSampleRate->abs->new->AudioFloatInputStreamResampler->else->if->format->getFormat->matches->throw->getFormat->getBufferSize->new->IllegalStateException->if->sendEvent
SoftMixingSourceDataLine#available()::: soft mixing source data line available:::synchronized->return
SoftMixingSourceDataLine#drain()::: soft mixing source data line drain:::while->avail->synchronized->if->return->try->Thread->sleep->catch->return->finally
SoftMixingSourceDataLine#flush()::: soft mixing source data line flush:::synchronized
SoftMixingSourceDataLine#getBufferSize()::: soft mixing source data line get buffer size:::synchronized->return
SoftMixingSourceDataLine#getFormat()::: soft mixing source data line get format:::synchronized->return
SoftMixingSourceDataLine#getFramePosition()::: soft mixing source data line get frame position:::return->getLongFramePosition
SoftMixingSourceDataLine#getLevel()::: soft mixing source data line get level:::return
SoftMixingSourceDataLine#getLongFramePosition()::: soft mixing source data line get long frame position:::synchronized->return
SoftMixingSourceDataLine#getMicrosecondPosition()::: soft mixing source data line get microsecond position:::return->getLongFramePosition->getFormat->getSampleRate
SoftMixingSourceDataLine#isActive()::: soft mixing source data line is active:::synchronized->return
SoftMixingSourceDataLine#isRunning()::: soft mixing source data line is running:::synchronized->return
SoftMixingSourceDataLine#start()::: soft mixing source data line start:::event->synchronized->if->isOpen->if->return->getLongFramePosition->new->LineEvent->if->sendEvent
SoftMixingSourceDataLine#stop()::: soft mixing source data line stop:::event->synchronized->if->isOpen->if->return->getLongFramePosition->new->LineEvent->if->sendEvent
SoftMixingSourceDataLine#close()::: soft mixing source data line close:::event->synchronized->if->isOpen->return->stop->getLongFramePosition->new->LineEvent->mixer->getMainMixer->closeLine->if->sendEvent
SoftMixingSourceDataLine#isOpen()::: soft mixing source data line is open:::synchronized->return
SoftPerformer.KeySortComparator#compare(ModelSource, ModelSource)::: key sort comparator compare:::return->o1->getIdentifier->toString->o2->getIdentifier->toString->compareTo
SoftPerformer#extractKeys(ModelConnectionBlock)::: soft performer extract keys:::sb->new->StringBuilder->if->conn->getSources->sb->append->srcs->conn->getSources->srcs2->new->ModelSourceArr->for->i->Arrays->sort->for->i->sb->append->sb->append->if->conn->getDestination->sb->conn->getDestination->getIdentifier->append->sb->append->return->sb->toString
SoftPerformer#processSource(ModelSource, int)::: soft performer process source:::id->src->getIdentifier->o->id->getObject->if->o->equals->processMidiControlSource->else->if->o->equals->processMidiRpnSource->else->if->o->equals->processMidiNrpnSource->else->if->o->equals->processMidiSource->else->if->o->equals->processNoteOnSource->else->if->o->equals->return->else->if->o->equals->return->else->ctrl_connections_list->add
SoftPerformer#processMidiControlSource(ModelSource, int)::: soft performer process midi control source:::v->src->getIdentifier->getVariable->if->return->c->Integer->parseInt->if->new->intArr->else->olda->newa->new->intArr->for->i
SoftPerformer#processNoteOnSource(ModelSource, int)::: soft performer process note on source:::v->src->getIdentifier->getVariable->c->if->v->equals->if->v->equals->if->return->if->new->intArr->else->olda->newa->new->intArr->for->i
SoftPerformer#processMidiSource(ModelSource, int)::: soft performer process midi source:::v->src->getIdentifier->getVariable->c->if->v->equals->if->v->equals->if->v->equals->if->return->if->new->intArr->else->olda->newa->new->intArr->for->i
SoftPerformer#processMidiRpnSource(ModelSource, int)::: soft performer process midi rpn source:::v->src->getIdentifier->getVariable->if->return->c->Integer->parseInt->if->midi_rpn_connections->get->midi_rpn_connections->new->intArr->put->else->olda->midi_rpn_connections->get->newa->new->intArr->for->i->midi_rpn_connections->put
SoftPerformer#processMidiNrpnSource(ModelSource, int)::: soft performer process midi nrpn source:::v->src->getIdentifier->getVariable->if->return->c->Integer->parseInt->if->midi_nrpn_connections->get->midi_nrpn_connections->new->intArr->put->else->olda->midi_nrpn_connections->get->newa->new->intArr->for->i->midi_nrpn_connections->put
SoftPerformer#isUnnecessaryTransform(ModelTransform)::: soft performer is unnecessary transform:::if->return->if->return->stransform->if->stransform->getDirection->return->if->stransform->getPolarity->return->if->stransform->getTransform->return->return
SoftPointResampler#getPadding()::: soft point resampler get padding:::return
SoftPointResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft point resampler interpolate:::pitch->ix->ox->ix_end->ox_end->if->while->else->while
SoftProcess#init(SoftSynthesizer)::: soft process init:::
SoftProcess#get(int, String)::: soft process get:::
SoftProcess#processControlLogic()::: soft process process control logic:::
SoftProcess#reset()::: soft process reset:::
SoftProvider#getDeviceInfo()::: soft provider get device info:::return->new->MidiDevice.InfoArr
SoftProvider#getDevice(MidiDevice.Info)::: soft provider get device:::Objects->requireNonNull->if->equals->return->new->SoftSynthesizer->throw->MidiUtils->unsupportedDevice
SoftReceiver#getMidiDevice()::: soft receiver get midi device:::return
SoftReceiver#send(MidiMessage, long)::: soft receiver send:::synchronized->if->throw->new->IllegalStateException->if->synchronized->mainmixer->activity->while->midimessages->get->if->getChannel->midimessages->message->clone->put->else->midimessages->message->getMessage->put->else->mainmixer->processMessage
SoftReceiver#close()::: soft receiver close:::synchronized->synth->removeReceiver
SoftResampler#openStreamer()::: soft resampler open streamer:::
SoftResamplerStreamer#open(ModelWavetable, float)::: soft resampler streamer open:::
SoftReverb.Delay#setDelay(int)::: delay set delay:::if->else->new->floatArr
SoftReverb.Delay#processReplace(float[])::: delay process replace:::if->return->len->rnlen->rovepos->for->i
SoftReverb.AllPass#setFeedBack(float)::: all pass set feed back:::
SoftReverb.AllPass#processReplace(float[])::: all pass process replace:::len->delaybuffersize->rovepos->for->i
SoftReverb.AllPass#processReplace(float[], float[])::: all pass process replace:::len->delaybuffersize->rovepos->for->i
SoftReverb.Comb#setFeedBack(float)::: comb set feed back:::
SoftReverb.Comb#processMix(float[], float[])::: comb process mix:::len->delaybuffersize->rovepos->filtertemp->filtercoeff1->filtercoeff2->for->i
SoftReverb.Comb#processReplace(float[], float[])::: comb process replace:::len->delaybuffersize->rovepos->filtertemp->filtercoeff1->filtercoeff2->for->i
SoftReverb.Comb#setDamp(float)::: comb set damp:::
SoftReverb#init(float, float)::: soft reverb init:::freqscale->stereospread->new->Delay->new->CombArr->new->CombArr->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->Comb->new->AllPassArr->new->AllPassArr->new->AllPass->new->AllPass->new->AllPass->new->AllPass->new->AllPass->new->AllPass->new->AllPass->new->AllPass->for->i->new->intArr->globalParameterControlChange
SoftReverb#setInput(int, SoftAudioBuffer)::: soft reverb set input:::if
SoftReverb#setOutput(int, SoftAudioBuffer)::: soft reverb set output:::if->if
SoftReverb#setMixMode(boolean)::: soft reverb set mix mode:::
SoftReverb#processAudio()::: soft reverb process audio:::silent_input->isSilent->if->if->if->left->clear->right->clear->return->inputA->array->left->array->right->array->numsamples->if->new->floatArr->again->if->for->i->else->for->i->delay->processReplace->if->if->new->floatArr->new->floatArr->new->floatArr->for->i->processReplace->processReplace->processReplace->for->i->processReplace->for->i->if->Arrays->fill->Arrays->fill->for->i->for->i->for->i->else->if->new->floatArr->if->if->Arrays->fill->processReplace->for->i->for->i->if->Arrays->fill->processReplace->for->i->for->i->if->for->i
SoftReverb#globalParameterControlChange(int[], long, long)::: soft reverb global parameter control change:::if->if->if->if->if->if->if->if->if->else->if->Math->exp
SoftReverb#processControlLogic()::: soft reverb process control logic:::if->setRoomSize->setDamp->setPreDelay->setGain
SoftReverb#setRoomSize(float)::: soft reverb set room size:::for->i
SoftReverb#setPreDelay(float)::: soft reverb set pre delay:::delay->setDelay
SoftReverb#setGain(float)::: soft reverb set gain:::
SoftReverb#setDamp(float)::: soft reverb set damp:::x->cx->Math->cos->Math->sqrt->if->if->for->i
SoftReverb#setLightMode(boolean)::: soft reverb set light mode:::
SoftShortMessage#getChannel()::: soft short message get channel:::return
SoftShortMessage#setMessage(int, int, int, int)::: soft short message set message:::super->setMessage
SoftShortMessage#clone()::: soft short message clone:::clone->new->SoftShortMessage->try->clone->getCommand->getChannel->getData1->getData2->setMessage->catch->throw->new->IllegalArgumentException->finally->return
SoftSincResampler#sinc(double)::: soft sinc resampler sinc:::return->Math->sin
SoftSincResampler#wHanning(int, float)::: soft sinc resampler w hanning:::window_table->new->floatArr->for->k->return
SoftSincResampler#sincTable(int, float, float)::: soft sinc resampler sinc table:::center->w->wHanning->for->k->return
SoftSincResampler#getPadding()::: soft sinc resampler get padding:::return
SoftSincResampler#interpolate(float[], float[], float, float[], float, float[], int[], int)::: soft sinc resampler interpolate:::pitch->ix->ox->ix_end->ox_end->max_p->if->p->if->else->if->sinc_table_f->while->iix->sinc_table->xx->y->for->i->else->while->iix->p->if->else->if->sinc_table_f->sinc_table->xx->y->for->i
SoftSynthesizer.WeakAudioStream#setInputStream(AudioInputStream)::: weak audio stream set input stream:::
SoftSynthesizer.WeakAudioStream#available()::: weak audio stream available:::local_stream->if->return->local_stream->available->return
SoftSynthesizer.WeakAudioStream#read()::: weak audio stream read:::b->new->byteArr->if->read->return->return
SoftSynthesizer.WeakAudioStream#read(byte[], int, int)::: weak audio stream read:::local_stream->if->return->local_stream->read->else->flen->if->new->floatArr->converter->toByteArray->if->if->weak_stream_link->get->runnable->new->Runnable->new->Thread->start->return
SoftSynthesizer.WeakAudioStream#getAudioInputStream()::: weak audio stream get audio input stream:::return->stream->getFormat->new->AudioInputStream
SoftSynthesizer.WeakAudioStream#close()::: weak audio stream close:::astream->weak_stream_link->get->if->astream->close
SoftSynthesizer#getBuffers(ModelInstrument, List)::: soft synthesizer get buffers:::foreach->instrument->getPerformers->if->performer->getOscillators->foreach->performer->getOscillators->if->w->buff->w->getBuffer->if->buffers->add->w->get8BitExtensionBuffer->if->buffers->add
SoftSynthesizer#loadSamples(List)::: soft synthesizer load samples:::if->return->buffers->new->ArrayList<>->foreach->getBuffers->try->ModelByteBuffer->loadAll->catch->return->finally->return
SoftSynthesizer#loadInstruments(List)::: soft synthesizer load instruments:::if->isOpen->return->if->loadSamples->return->synchronized->if->foreach->foreach->pat->instrument->getPatch->patchToString->softins->new->SoftInstrument->inslist->put->loadedlist->put->return
SoftSynthesizer#processPropertyInfo(Map)::: soft synthesizer process property info:::items->getPropertyInfo->resamplerType->if->resamplerType->equalsIgnoreCase->new->SoftPointResampler->else->if->resamplerType->equalsIgnoreCase->new->SoftLinearResampler2->else->if->resamplerType->equalsIgnoreCase->new->SoftLinearResampler->else->if->resamplerType->equalsIgnoreCase->new->SoftLinearResampler2->else->if->resamplerType->equalsIgnoreCase->new->SoftCubicResampler->else->if->resamplerType->equalsIgnoreCase->new->SoftLanczosResampler->else->if->resamplerType->equalsIgnoreCase->new->SoftSincResampler->setFormat
SoftSynthesizer#patchToString(Patch)::: soft synthesizer patch to string:::if->isPercussion->return->patch->getProgram->patch->getBank->else->return->patch->getProgram->patch->getBank
SoftSynthesizer#setFormat(AudioFormat)::: soft synthesizer set format:::if->format->getChannels->throw->new->IllegalArgumentException->if->AudioFloatConverter->getConverter->throw->new->IllegalArgumentException
SoftSynthesizer#removeReceiver(Receiver)::: soft synthesizer remove receiver:::perform_close->synchronized->if->recvslist->remove->if->recvslist->isEmpty->if->close
SoftSynthesizer#getMainMixer()::: soft synthesizer get main mixer:::if->isOpen->return->return
SoftSynthesizer#findInstrument(int, int, int)::: soft synthesizer find instrument:::if->current_instrument->inslist->get->if->return->p_plaf->if->else->inslist->get->if->return->inslist->get->if->return->inslist->get->if->return->inslist->get->if->return->return->p_plaf->if->else->current_instrument->inslist->get->if->return->inslist->get->if->return->inslist->get->if->return->return
SoftSynthesizer#getVoiceAllocationMode()::: soft synthesizer get voice allocation mode:::return
SoftSynthesizer#getGeneralMidiMode()::: soft synthesizer get general midi mode:::return
SoftSynthesizer#setGeneralMidiMode(int)::: soft synthesizer set general midi mode:::
SoftSynthesizer#getDeviceID()::: soft synthesizer get device d:::return
SoftSynthesizer#getControlRate()::: soft synthesizer get control rate:::return
SoftSynthesizer#getVoices()::: soft synthesizer get voices:::return
SoftSynthesizer#getTuning(Patch)::: soft synthesizer get tuning:::t_id->patchToString->tuning->tunings->get->if->new->SoftTuning->tunings->put->return
SoftSynthesizer#getLatency()::: soft synthesizer get latency:::synchronized->return
SoftSynthesizer#getFormat()::: soft synthesizer get format:::synchronized->return
SoftSynthesizer#getMaxPolyphony()::: soft synthesizer get max polyphony:::synchronized->return
SoftSynthesizer#getChannels()::: soft synthesizer get channels:::synchronized->if->new->SoftChannelProxyArr->for->i->ret->if->isOpen->new->MidiChannelArr->else->new->MidiChannelArr->for->i->return
SoftSynthesizer#getVoiceStatus()::: soft synthesizer get voice status:::if->isOpen->tempVoiceStatusArray->getMaxPolyphony->new->VoiceStatusArr->for->i->return->synchronized->tempVoiceStatusArray->new->VoiceStatusArr->for->i->return
SoftSynthesizer#isSoundbankSupported(Soundbank)::: soft synthesizer is soundbank supported:::foreach->soundbank->getInstruments->if->return->return
SoftSynthesizer#loadInstrument(Instrument)::: soft synthesizer load instrument:::if->throw->new->IllegalArgumentException->instruments->new->ArrayList<>->instruments->add->return->loadInstruments
SoftSynthesizer#unloadInstrument(Instrument)::: soft synthesizer unload instrument:::if->throw->new->IllegalArgumentException->if->isOpen->return->pat->instrument->getPatch->patchToString->synchronized->foreach->inslist->remove->loadedlist->remove->for->i
SoftSynthesizer#remapInstrument(Instrument, Instrument)::: soft synthesizer remap instrument:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->if->throw->from->toString->new->IllegalArgumentException->if->throw->to->toString->new->IllegalArgumentException->if->isOpen->return->synchronized->if->loadedlist->containsValue->throw->new->IllegalArgumentException->unloadInstrument->mfrom->from->getPatch->new->ModelMappedInstrument->return->loadInstrument
SoftSynthesizer#getDefaultSoundbank()::: soft synthesizer get default soundbank:::synchronized->if->return->actions->new->ArrayList<>->actions->new->PrivilegedAction<InputStream>->add->actions->new->PrivilegedAction<InputStream>->add->actions->new->PrivilegedAction<InputStream>->add->actions->new->PrivilegedAction<InputStream>->add->foreach->try->is->AccessController->doPrivileged->if->continue->sbk->try->MidiSystem->new->BufferedInputStream->getSoundbank->catch->finally->is->close->if->return->catch->finally->try->EmergencySoundbank->createSoundbank->catch->finally->if->out->AccessController->try->userhome->System->getProperty->new->File->if->userhome->isDirectory->if->userhome->mkdirs->return->emg_soundbank_file->new->File->if->emg_soundbank_file->isFile->return->return->new->FileOutputStream->catch->finally->return->doPrivileged->if->try->save->out->close->catch->finally->return
SoftSynthesizer#getAvailableInstruments()::: soft synthesizer get available instruments:::defsbk->getDefaultSoundbank->if->return->new->InstrumentArr->inslist_array->defsbk->getInstruments->Arrays->new->ModelInstrumentComparator->sort->return
SoftSynthesizer#getLoadedInstruments()::: soft synthesizer get loaded instruments:::if->isOpen->return->new->InstrumentArr->synchronized->inslist_array->loadedlist->values->size->new->ModelInstrumentArr->loadedlist->values->toArray->Arrays->new->ModelInstrumentComparator->sort->return
SoftSynthesizer#loadAllInstruments(Soundbank)::: soft synthesizer load all instruments:::instruments->new->ArrayList<>->foreach->soundbank->getInstruments->if->throw->new->IllegalArgumentException->instruments->add->return->loadInstruments
SoftSynthesizer#unloadAllInstruments(Soundbank)::: soft synthesizer unload all instruments:::if->isSoundbankSupported->throw->new->IllegalArgumentException->if->isOpen->return->foreach->soundbank->getInstruments->if->unloadInstrument
SoftSynthesizer#loadInstruments(Soundbank, Patch[])::: soft synthesizer load instruments:::instruments->new->ArrayList<>->foreach->ins->soundbank->getInstrument->if->throw->new->IllegalArgumentException->instruments->add->return->loadInstruments
SoftSynthesizer#unloadInstruments(Soundbank, Patch[])::: soft synthesizer unload instruments:::if->isSoundbankSupported->throw->new->IllegalArgumentException->if->isOpen->return->foreach->ins->soundbank->getInstrument->if->unloadInstrument
SoftSynthesizer#getDeviceInfo()::: soft synthesizer get device info:::return
SoftSynthesizer#getStoredProperties()::: soft synthesizer get stored properties:::return->AccessController->p->new->Properties->notePath->try->prefroot->Preferences->userRoot->if->prefroot->nodeExists->prefs->prefroot->node->prefs_keys->prefs->keys->foreach->val->prefs->get->if->p->setProperty->catch->finally->return->doPrivileged
SoftSynthesizer#getPropertyInfo(Map)::: soft synthesizer get property info:::list->new->ArrayList<>->item->o->new->AudioSynthesizerPropertyInfo->new->StringArr->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioFormat->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->new->AudioSynthesizerPropertyInfo->list->add->items->list->list->size->new->AudioSynthesizerPropertyInfoArr->toArray->storedProperties->getStoredProperties->foreach->v->info->get->storedProperties->getProperty->if->c->if->c->isInstance->else->if->s->if->if->s->equalsIgnoreCase->if->s->equalsIgnoreCase->else->if->channels->signed->bigendian->bits->sampleRate->try->st->new->StringTokenizer->prevToken->while->st->hasMoreTokens->token->st->nextToken->toLowerCase->if->token->equals->if->token->startsWith->Integer->parseInt->if->token->contains->if->token->equals->if->token->equals->Integer->parseInt->if->token->equals->Float->parseFloat->new->AudioFormat->catch->finally->else->try->if->Byte->valueOf->else->if->Short->valueOf->else->if->Integer->valueOf->else->if->Long->valueOf->else->if->Float->valueOf->else->if->Double->valueOf->catch->finally->else->if->n->if->Byte->n->byteValue->valueOf->if->Short->n->shortValue->valueOf->if->Integer->n->intValue->valueOf->if->Long->n->longValue->valueOf->if->Float->n->floatValue->valueOf->if->Double->n->doubleValue->valueOf->return
SoftSynthesizer#open()::: soft synthesizer open:::if->isOpen->synchronized->return->open
SoftSynthesizer#open(SourceDataLine, Map)::: soft synthesizer open:::if->isOpen->synchronized->return->synchronized->try->if->line->getFormat->setFormat->ais->getFormat->openStream->new->WeakAudioStream->weakstream->getAudioInputStream->if->if->else->AudioSystem->getFormat->getSourceDataLine->latency->if->line->isOpen->bufferSize->getFormat->getFrameSize->getFormat->getFrameRate->line->getFormat->open->if->line->isActive->line->start->controlbuffersize->try->ais->available->catch->finally->buffersize->line->getBufferSize->if->if->new->SoftJitterCorrector->if->new->SoftAudioPusher->pusher->start->if->catch->if->isOpen->close->ex->new->MidiUnavailableException->ex->initCause->throw->finally
SoftSynthesizer#openStream(AudioFormat, Map)::: soft synthesizer open stream:::if->isOpen->throw->new->MidiUnavailableException->synchronized->processPropertyInfo->if->setFormat->if->defbank->getDefaultSoundbank->if->loadAllInstruments->new->SoftVoiceArr->for->i->new->SoftMainMixer->new->SoftChannelArr->for->i->if->if->new->SoftChannelProxyArr->else->new->SoftChannelProxyArr->for->i->else->if->new_external_channels->new->SoftChannelProxyArr->for->i->for->i->for->i->foreach->getVoices->resampler->openStreamer->foreach->getReceivers->srecv->return->mainmixer->getInputStream
SoftSynthesizer#close()::: soft synthesizer close:::if->isOpen->return->pusher_to_be_closed->pusher_stream_to_be_closed->synchronized->if->if->pusher_to_be_closed->stop->try->pusher_stream_to_be_closed->close->catch->finally->synchronized->if->mainmixer->close->if->for->i->if->sourceDataLine->close->inslist->clear->loadedlist->clear->tunings->clear->while->recvslist->size->recvslist->recvslist->size->get->close
SoftSynthesizer#isOpen()::: soft synthesizer is open:::synchronized->return
SoftSynthesizer#getMicrosecondPosition()::: soft synthesizer get microsecond position:::if->isOpen->return->synchronized->return->mainmixer->getMicrosecondPosition
SoftSynthesizer#getMaxReceivers()::: soft synthesizer get max receivers:::return
SoftSynthesizer#getMaxTransmitters()::: soft synthesizer get max transmitters:::return
SoftSynthesizer#getReceiver()::: soft synthesizer get receiver:::synchronized->receiver->new->SoftReceiver->recvslist->add->return
SoftSynthesizer#getReceivers()::: soft synthesizer get receivers:::synchronized->recvs->new->ArrayList<>->recvs->addAll->return
SoftSynthesizer#getTransmitter()::: soft synthesizer get transmitter:::throw->new->MidiUnavailableException
SoftSynthesizer#getTransmitters()::: soft synthesizer get transmitters:::return->new->ArrayList<>
SoftSynthesizer#getReceiverReferenceCounting()::: soft synthesizer get receiver reference counting:::if->isOpen->open->synchronized->return->getReceiver
SoftSynthesizer#getTransmitterReferenceCounting()::: soft synthesizer get transmitter reference counting:::throw->new->MidiUnavailableException
SoftTuning#checksumOK(byte[])::: soft tuning checksum k:::x->for->i->return
SoftTuning#load(byte[])::: soft tuning load:::if->subid1->switch->subid2->switch->try->new->String->catch->finally->r->for->i->break->ll->r->for->i->break->if->checksumOK->break->try->new->String->catch->finally->r->for->i->break->if->checksumOK->break->try->new->String->catch->finally->octave_tuning->new->intArr->for->i->for->i->break->if->checksumOK->break->try->new->String->catch->finally->octave_tuning->new->doubleArr->for->i->for->i->break->ll->r->for->i->break->octave_tuning->new->intArr->for->i->for->i->break->octave_tuning->new->doubleArr->for->i->for->i->break->break
SoftTuning#getTuning()::: soft tuning get tuning:::return->Arrays->copyOf
SoftTuning#getTuning(int)::: soft tuning get tuning:::return
SoftTuning#getPatch()::: soft tuning get patch:::return
SoftTuning#getName()::: soft tuning get name:::return
SoftTuning#setName(String)::: soft tuning set name:::
SoftVoice#getValueKC(ModelIdentifier)::: soft voice get value c:::if->id->getObject->equals->ic->Integer->id->getVariable->parseInt->if->if->return->else->if->id->getObject->equals->if->id->getVariable->equals->return->if->id->getVariable->equals->return->return
SoftVoice#getValue(ModelIdentifier)::: soft voice get value:::o->objects->id->getObject->get->if->return->return->o->id->getInstance->id->getVariable->get
SoftVoice#transformValue(double, ModelSource)::: soft voice transform value:::if->src->getTransform->return->src->getTransform->transform->else->return
SoftVoice#transformValue(double, ModelDestination)::: soft voice transform value:::if->dst->getTransform->return->dst->getTransform->transform->else->return
SoftVoice#processKeyBasedController(double, int)::: soft voice process key based controller:::if->return->if->if->if->key_controlvalue->if->return->if->else->if->return
SoftVoice#processConnection(int)::: soft voice process connection:::conn->src->dst->if->Double->isInfinite->return->value->conn->getScale->if->srcs->conn->getSources->for->i->else->srcs->conn->getSources->src_kc->for->i->conn->getDestination->transformValue
SoftVoice#updateTuning(SoftTuning)::: soft voice update tuning:::tuning->getTuning->if->if->return->c->if->return->for->i
SoftVoice#setNote(int)::: soft voice set note:::tuning->getTuning
SoftVoice#noteOn(int, int, int)::: soft voice note on:::setNote->if->else->if->else->eg->reset->lfo->reset->filter_left->reset->filter_right->reset->objects->synthesizer->getMainMixer->put->objects->put->objects->put->objects->put->objects->put->objects->put->objects->put->if->new->doubleArr->if->new->doubleArrs->new->intArrs->if->new->doubleArrs->for->i->for->i->if->foreach->value->if->foreach->connection->getSources->x->src->getIdentifier->getValue->t->src->getTransform->if->else->t->transform->else->foreach->connection->getSources->x->src->getIdentifier->getValue->src->getIdentifier->getValueKC->processKeyBasedController->t->src->getTransform->if->else->t->transform->dest->connection->getDestination->t->dest->getTransform->if->t->transform->dest->getIdentifier->getValue->eg->init->lfo->init
SoftVoice#setPolyPressure(int)::: soft voice set poly pressure:::if->return->c->if->return->for->i
SoftVoice#setChannelPressure(int)::: soft voice set channel pressure:::if->return->c->if->return->for->i
SoftVoice#controlChange(int, int)::: soft voice control change:::if->return->c->if->return->for->i
SoftVoice#nrpnChange(int, int)::: soft voice nrpn change:::if->return->c->get->if->return->for->i
SoftVoice#rpnChange(int, int)::: soft voice rpn change:::if->return->c->get->if->return->for->i
SoftVoice#setPitchBend(int)::: soft voice set pitch bend:::if->return->c->if->return->for->i
SoftVoice#setMute(boolean)::: soft voice set mute:::
SoftVoice#setSoloMute(boolean)::: soft voice set solo mute:::
SoftVoice#shutdown()::: soft voice shutdown:::if->return->if->return->c->if->return->for->i
SoftVoice#soundOff()::: soft voice sound off:::
SoftVoice#noteOff(int)::: soft voice note off:::if->return->if->return->if->return->if->return->c->if->return->for->i
SoftVoice#redamp()::: soft voice redamp:::if->return->if->return->if->return->c->if->return->for->i
SoftVoice#processControlLogic()::: soft voice process control logic:::if->if->try->osc_stream->close->catch->finally->if->stealer_channel->initVoice->if->osc->if->try->resampler->synthesizer->getFormat->getSampleRate->open->catch->finally->else->osc->synthesizer->getFormat->getSampleRate->open->osc->getAttenuation->osc->getChannels->if->new->floatArrs->if->osc_stream->noteOn->if->if->note_delta->note_delta_a->Math->abs->if->else->if->Math->signum->c->if->return->for->i->eg->processControlLogic->lfo->processControlLogic->for->i->osc_stream->setPitch->filter_type->filter_freq->if->else->Math->Math->log->exp->q->filter_left->setFilterType->filter_left->setFrequency->filter_left->setResonance->filter_right->setFilterType->filter_right->setFrequency->filter_right->setResonance->gain->Math->Math->log->exp->if->if->Math->sqrt->pan->if->else->if->if->else->Math->cos->Math->sin->balance->if->if->else->if->else->if->else->if->if->if->osc_stream->noteOff->if
SoftVoice#mixAudioStream(SoftAudioBuffer, SoftAudioBuffer, SoftAudioBuffer, float, float)::: soft voice mix audio stream:::bufferlen->in->getSize->if->return->if->if->fout->out->array->fin->in->array->j->for->i->dout->array->for->i->else->amp->amp_delta->fout->out->array->fin->in->array->j->for->i->dout->array->for->i->else->if->fout->out->array->fin->in->array->for->i->else->amp->amp_delta->fout->out->array->fin->in->array->for->i
SoftVoice#processAudioLogic(SoftAudioBuffer[])::: soft voice process audio logic:::if->return->bufferlen->getSize->try->array->if->array->ret->osc_stream->read->if->return->if->Arrays->fill->if->Arrays->fill->catch->finally->left->right->mono->eff1->eff2->dleft->dright->dmono->deff1->deff2->leftdry->rightdry->if->if->Double->isInfinite->filter_left->processAudio->if->filter_right->processAudio->if->mixAudioStream->if->mixAudioStream->else->if->mixAudioStream->else->mixAudioStream->if->mixAudioStream->else->mixAudioStream->if->mixAudioStream->mixAudioStream->else->mixAudioStream->mixAudioStream->mixAudioStream->mixAudioStream->if
StandardFileFormat#clip(long):::Replaces the passed value to AudioSystem.NOT_SPECIFIED if the value is greater than Integer.MAX_VALUE.:::if->return->return
StandardFileFormat#getLongFrameLength():::Obtains the length of the audio data contained in the file, expressed in sample frames:::return
StandardFileFormat#getLongByteLength():::Obtains the size in bytes of the entire audio file (not just its audio data):::return
StandardMidiFileReader#getMidiFileFormat(InputStream)::: standard midi file reader get midi file format:::return->getMidiFileFormatFromStream
StandardMidiFileReader#getMidiFileFormatFromStream(InputStream, int, SMFParser)::: standard midi file reader get midi file format from stream:::maxReadLength->duration->dis->if->else->new->DataInputStream->if->dis->mark->else->type->numtracks->divisionType->resolution->try->magic->dis->readInt->if->throw->new->InvalidMidiDataException->bytesRemaining->dis->readInt->dis->readShort->dis->readShort->timing->dis->readShort->if->else->frameCode->switch->break->break->break->break->throw->new->InvalidMidiDataException->if->dis->skip->catch->finally->if->dis->reset->format->new->MidiFileFormat->return
StandardMidiFileReader#getMidiFileFormat(URL)::: standard midi file reader get midi file format:::urlStream->url->openStream->bis->new->BufferedInputStream->fileFormat->try->getMidiFileFormat->catch->finally->bis->close->return
StandardMidiFileReader#getMidiFileFormat(File)::: standard midi file reader get midi file format:::fis->new->FileInputStream->bis->new->BufferedInputStream->length->file->length->if->fileFormat->try->getMidiFileFormatFromStream->catch->finally->bis->close->return
StandardMidiFileReader#getSequence(InputStream)::: standard midi file reader get sequence:::smfParser->new->SMFParser->format->getMidiFileFormatFromStream->if->format->getType->format->getType->throw->format->getType->new->InvalidMidiDataException->sequence->format->getDivisionType->format->getResolution->new->Sequence->for->i->return
StandardMidiFileReader#getSequence(URL)::: standard midi file reader get sequence:::is->url->openStream->new->BufferedInputStream->seq->try->getSequence->catch->finally->is->close->return
StandardMidiFileReader#getSequence(File)::: standard midi file reader get sequence:::is->new->FileInputStream->new->BufferedInputStream->seq->try->getSequence->catch->finally->is->close->return
SMFParser#readUnsigned()::: parser read unsigned:::return
SMFParser#read(byte[])::: parser read:::System->arraycopy
SMFParser#readVarInt()::: parser read var int:::value->currentByte->do->while->return
SMFParser#readIntFromStream()::: parser read int from stream:::try->return->stream->readInt->catch->throw->new->EOFException->finally
SMFParser#nextTrack()::: parser next track:::magic->do->if->stream->skipBytes->if->return->throw->new->EOFException->readIntFromStream->readIntFromStream->while->if->if->return->try->new->byteArr->catch->throw->new->IOException->finally->try->stream->readFully->catch->if->return->throw->new->EOFException->finally->return
SMFParser#trackFinished()::: parser track finished:::return
SMFParser#readTrack(Track)::: parser read track:::try->tick->status->endOfTrackFound->while->trackFinished->message->data1->data2->readVarInt->byteValue->readUnsigned->if->else->switch->if->readUnsigned->readUnsigned->new->FastShortMessage->break->if->readUnsigned->new->FastShortMessage->break->switch->sysexLength->readVarInt->sysexData->new->byteArr->read->sysexMessage->new->SysexMessage->sysexMessage->setMessage->break->metaType->readUnsigned->metaLength->readVarInt->metaData->try->new->byteArr->catch->throw->new->IOException->finally->read->metaMessage->new->MetaMessage->metaMessage->setMessage->if->break->throw->new->InvalidMidiDataException->break->throw->new->InvalidMidiDataException->track->new->MidiEvent->add->catch->if->e->printStackTrace->throw->new->EOFException->finally
StandardMidiFileWriter#getMidiFileTypes()::: standard midi file writer get midi file types:::localArray->new->intArr->System->arraycopy->return
StandardMidiFileWriter#getMidiFileTypes(Sequence):::Obtains the file types that this provider can write from the sequence specified.:::typesArray->tracks->sequence->getTracks->if->new->intArr->else->new->intArr->return
StandardMidiFileWriter#write(Sequence, int, OutputStream)::: standard midi file writer write:::Objects->requireNonNull->if->isFileTypeSupported->throw->new->IllegalArgumentException->buffer->bytesRead->bytesWritten->fileStream->getFileStream->if->throw->new->IllegalArgumentException->new->byteArr->while->fileStream->read->out->write->return
StandardMidiFileWriter#write(Sequence, int, File)::: standard midi file writer write:::Objects->requireNonNull->fos->new->FileOutputStream->bytesWritten->write->fos->close->return
StandardMidiFileWriter#getFileStream(int, Sequence)::: standard midi file writer get file stream:::tracks->sequence->getTracks->bytesBuilt->headerLength->length->timeFormat->divtype->hpos->hdos->headerStream->trackStreams->trackStream->fStream->if->if->return->else->if->if->return->else->if->else->if->else->return->new->InputStreamArr->trackCount->for->i->if->else->if->for->i->else->throw->new->IllegalArgumentException->new->PipedOutputStream->new->DataOutputStream->new->PipedInputStream->hdos->writeInt->hdos->writeInt->if->hdos->writeShort->else->hdos->writeShort->hdos->writeShort->sequence->getDivisionType->if->sequence->getResolution->else->if->sequence->getResolution->else->if->sequence->getResolution->else->if->sequence->getResolution->else->if->sequence->getResolution->else->return->hdos->writeShort->new->SequenceInputStream->hdos->close->return
StandardMidiFileWriter#getType(int):::Returns ONE_BYTE, TWO_BYTE, SYSEX, META, ERROR, or IGNORE (i.e:::if->switch->return->return->return->switch->return->return->return
StandardMidiFileWriter#writeVarInt(long)::: standard midi file writer write var int:::len->shift->while->while->tddos->writeByte->tddos->writeByte->return
StandardMidiFileWriter#writeTrack(Track, int)::: standard midi file writer write track:::bytesWritten->lastBytesWritten->size->track->size->thpos->new->PipedOutputStream->thdos->new->DataOutputStream->thpis->new->PipedInputStream->tdbos->new->ByteArrayOutputStream->new->DataOutputStream->tdbis->fStream->currentTick->deltaTick->eventTick->runningStatus->for->i->thdos->writeInt->thdos->writeInt->tdbos->toByteArray->new->ByteArrayInputStream->new->SequenceInputStream->thdos->close->tddos->close->return
SunFileReader#getAudioFileFormat(InputStream)::: sun file reader get audio file format:::stream->mark->try->return->getAudioFileFormatImpl->catch->throw->new->UnsupportedAudioFileException->finally->stream->reset
SunFileReader#getAudioFileFormat(URL)::: sun file reader get audio file format:::try->is->url->openStream->return->new->BufferedInputStream->getAudioFileFormatImpl->catch->throw->new->UnsupportedAudioFileException->finally
SunFileReader#getAudioFileFormat(File)::: sun file reader get audio file format:::try->is->new->FileInputStream->return->new->BufferedInputStream->getAudioFileFormatImpl->catch->throw->new->UnsupportedAudioFileException->finally
SunFileReader#getAudioInputStream(InputStream)::: sun file reader get audio input stream:::stream->mark->try->format->getAudioFileFormatImpl->return->format->getFormat->format->getLongFrameLength->new->AudioInputStream->catch->stream->reset->throw->new->UnsupportedAudioFileException->finally
SunFileReader#getAudioInputStream(URL)::: sun file reader get audio input stream:::urlStream->url->openStream->try->return->new->BufferedInputStream->getAudioInputStream->catch->closeSilently->throw->finally
SunFileReader#getAudioInputStream(File)::: sun file reader get audio input stream:::fileStream->new->FileInputStream->try->return->new->BufferedInputStream->getAudioInputStream->catch->closeSilently->throw->finally
SunFileReader#getAudioFileFormatImpl(InputStream):::Obtains the audio file format of the input stream provided:::
SunFileReader#closeSilently(InputStream):::Closes the InputStream when we have read all necessary data from it, and ignores an IOException.:::try->is->close->catch->finally
SunFileReader#rllong(DataInputStream):::rllong Protected helper method to read 64 bits and changing the order of each bytes.:::b1->b2->b3->b4->i->dis->readInt->return
SunFileReader#big2little(int):::big2little Protected helper method to swap the order of bytes in a 32 bit int:::b1->b2->b3->b4->return
SunFileReader#rlshort(DataInputStream):::rlshort Protected helper method to read 16 bits value:::s->high->low->dis->readShort->return
SunFileReader#big2littleShort(short):::big2little Protected helper method to swap the order of bytes in a 16 bit short:::high->low->return
SunFileReader#calculatePCMFrameSize(int, int):::Calculates the frame size for PCM frames:::try->return->Math->multiplyExact->catch->return->finally
SunFileWriter#getAudioFileTypes()::: sun file writer get audio file types:::localArray->new->AudioFileFormat.TypeArr->System->arraycopy->return
SunFileWriter#rllong(DataInputStream):::rllong Protected helper method to read 64 bits and changing the order of each bytes.:::b1->b2->b3->b4->i->dis->readInt->return
SunFileWriter#big2little(int):::big2little Protected helper method to swap the order of bytes in a 32 bit int:::b1->b2->b3->b4->return
SunFileWriter#rlshort(DataInputStream):::rlshort Protected helper method to read 16 bits value:::s->high->low->dis->readShort->return
SunFileWriter#big2littleShort(short):::big2little Protected helper method to swap the order of bytes in a 16 bit short:::high->low->return
SunFileWriter.NoCloseInputStream#read()::: no close input stream read:::return->in->read
SunFileWriter.NoCloseInputStream#read(byte[])::: no close input stream read:::return->in->read
SunFileWriter.NoCloseInputStream#read(byte[], int, int)::: no close input stream read:::return->in->read
SunFileWriter.NoCloseInputStream#skip(long)::: no close input stream skip:::return->in->skip
SunFileWriter.NoCloseInputStream#available()::: no close input stream available:::return->in->available
SunFileWriter.NoCloseInputStream#close()::: no close input stream close:::
SunFileWriter.NoCloseInputStream#mark(int)::: no close input stream mark:::in->mark
SunFileWriter.NoCloseInputStream#reset()::: no close input stream reset:::in->reset
SunFileWriter.NoCloseInputStream#markSupported()::: no close input stream mark supported:::return->in->markSupported
Toolkit#getUnsigned8(byte[], int, int):::Converts bytes from signed to unsigned.:::for->i
Toolkit#getByteSwapped(byte[], int, int):::Swaps bytes.:::tempByte->for->i
Toolkit#linearToDB(float):::Linear to DB scale conversion.:::dB->Math->log->Math->log->return
Toolkit#dBToLinear(float):::DB to linear scale conversion.:::linear->Math->pow->return
Toolkit#align(long, int)::: toolkit align:::if->return->return
Toolkit#align(int, int)::: toolkit align:::if->return->return
Toolkit#millis2bytes(AudioFormat, long)::: toolkit millis2bytes:::result->format->getFrameRate->format->getFrameSize->return->format->getFrameSize->align
Toolkit#bytes2millis(AudioFormat, long)::: toolkit bytes2millis:::return->format->getFrameRate->format->getFrameSize
Toolkit#micros2bytes(AudioFormat, long)::: toolkit micros2bytes:::result->format->getFrameRate->format->getFrameSize->return->format->getFrameSize->align
Toolkit#bytes2micros(AudioFormat, long)::: toolkit bytes2micros:::return->format->getFrameRate->format->getFrameSize
Toolkit#micros2frames(AudioFormat, long)::: toolkit micros2frames:::return->format->getFrameRate
Toolkit#frames2micros(AudioFormat, long)::: toolkit frames2micros:::return->format->getFrameRate
Toolkit#validateBuffer(int, int):::Throws an exception if the buffer size does not represent an integral number of sample frames.:::if->return->throw->String->format->new->IllegalArgumentException
Toolkit#isFullySpecifiedAudioFormat(AudioFormat)::: toolkit is fully specified audio format:::if->format->getEncoding->equals->format->getEncoding->equals->format->getEncoding->equals->format->getEncoding->equals->return->if->format->getFrameRate->throw->format->getFrameRate->String->format->getFrameRate->valueOf->new->IllegalArgumentException->if->format->getSampleRate->throw->format->getSampleRate->String->format->getSampleRate->valueOf->new->IllegalArgumentException->if->format->getSampleSizeInBits->throw->format->getSampleSizeInBits->String->format->getSampleSizeInBits->valueOf->new->IllegalArgumentException->if->format->getFrameSize->throw->format->getFrameSize->String->format->getFrameSize->valueOf->new->IllegalArgumentException->if->format->getChannels->throw->format->getChannels->String->format->getChannels->valueOf->new->IllegalArgumentException
Toolkit#isFullySpecifiedPCMFormat(AudioFormat)::: toolkit is fully specified format:::if->format->getEncoding->equals->format->getEncoding->equals->return->if->format->getFrameRate->format->getSampleRate->format->getSampleSizeInBits->format->getFrameSize->format->getChannels->return->return
Toolkit#getPCMConvertedAudioInputStream(AudioInputStream)::: toolkit get converted audio input stream:::af->ais->getFormat->if->af->getEncoding->equals->af->getEncoding->equals->try->newFormat->af->getSampleRate->af->getChannels->af->getChannels->af->getSampleRate->Platform->isBigEndian->new->AudioFormat->AudioSystem->getAudioInputStream->catch->if->e->printStackTrace->finally->return
UlawCodec#getSourceEncodings()::: ulaw codec get source encodings:::return->new->EncodingArr
UlawCodec#getTargetEncodings()::: ulaw codec get target encodings:::return->getSourceEncodings
UlawCodec#getTargetEncodings(AudioFormat)::: ulaw codec get target encodings:::if->sourceFormat->getEncoding->equals->if->sourceFormat->getSampleSizeInBits->enc->new->AudioFormat.EncodingArr->return->else->return->new->AudioFormat.EncodingArr->else->if->sourceFormat->getEncoding->equals->if->sourceFormat->getSampleSizeInBits->enc->new->AudioFormat.EncodingArr->return->else->return->new->AudioFormat.EncodingArr->else->return->new->AudioFormat.EncodingArr
UlawCodec#getTargetFormats(AudioFormat.Encoding, AudioFormat)::: ulaw codec get target formats:::Objects->requireNonNull->Objects->requireNonNull->if->equals->sourceFormat->getEncoding->equals->equals->sourceFormat->getEncoding->equals->return->getOutputFormats->else->return->new->AudioFormatArr
UlawCodec#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)::: ulaw codec get audio input stream:::sourceFormat->sourceStream->getFormat->sourceEncoding->sourceFormat->getEncoding->if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException->if->sourceEncoding->equals->return->targetFormat->if->equals->equals->sourceFormat->getSampleRate->sourceFormat->getChannels->sourceFormat->getChannels->sourceFormat->getSampleRate->sourceFormat->isBigEndian->new->AudioFormat->else->if->equals->equals->sourceFormat->getSampleRate->sourceFormat->getChannels->sourceFormat->getChannels->sourceFormat->getSampleRate->new->AudioFormat->else->throw->sourceStream->getFormat->toString->targetEncoding->toString->new->IllegalArgumentException->return->getConvertedStream
UlawCodec#getAudioInputStream(AudioFormat, AudioInputStream)::: ulaw codec get audio input stream:::if->sourceStream->getFormat->isConversionSupported->throw->sourceStream->getFormat->toString->targetFormat->toString->new->IllegalArgumentException->return->getConvertedStream
UlawCodec#getConvertedStream(AudioFormat, AudioInputStream):::Opens the codec with the specified parameters.:::cs->inputFormat->stream->getFormat->if->inputFormat->matches->else->new->UlawCodecStream->return
UlawCodec#getOutputFormats(AudioFormat):::Obtains the set of output formats supported by the codec given a particular input format:::formats->new->Vector<>->format->if->inputFormat->getSampleSizeInBits->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->if->inputFormat->getSampleSizeInBits->inputFormat->getEncoding->equals->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->inputFormat->getSampleRate->inputFormat->getChannels->inputFormat->getChannels->inputFormat->getSampleRate->new->AudioFormat->formats->addElement->formatArray->formats->size->new->AudioFormatArr->for->i->return
UlawCodec.UlawCodecStream#search(short, short[], short)::: ulaw codec stream search:::for->i->return
UlawCodec.UlawCodecStream#read():::Note that this won't actually read anything; must read in two-byte units.:::b->new->byteArr->if->read->return->return
UlawCodec.UlawCodecStream#read(byte[])::: ulaw codec stream read:::return->read
UlawCodec.UlawCodecStream#read(byte[], int, int)::: ulaw codec stream read:::if->if->BIAS->mask->seg->i->sample->enc->readCount->currentPos->readLeft->readLen->while->super->read->for->if->return->return->else->i->readLen->readOffset->readCount->super->read->if->return->for->return
UlawCodec.UlawCodecStream#skip(long)::: ulaw codec stream skip:::return->super->skip->super->skip
WaveExtensibleFileReader.GUID#read(RIFFReader)::: d read:::d->new->GUID->riff->readUnsignedInt->riff->readUnsignedShort->riff->readUnsignedShort->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->riff->readUnsignedByte->return
WaveExtensibleFileReader.GUID#hashCode()::: d hash code:::return
WaveExtensibleFileReader.GUID#equals(Object)::: d equals:::if->return->t->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
WaveExtensibleFileReader#decodeChannelMask(long)::: wave extensible file reader decode channel mask:::sb->new->StringBuilder->m->for->i->if->sb->length->return->return->sb->sb->length->substring
WaveExtensibleFileReader#getAudioFileFormatImpl(InputStream)::: wave extensible file reader get audio file format impl:::riffiterator->new->RIFFReader->if->riffiterator->getFormat->equals->throw->new->UnsupportedAudioFileException->if->riffiterator->getType->equals->throw->new->UnsupportedAudioFileException->fmt_found->data_found->channels->samplerate->framesize->bits->dataSize->validBitsPerSample->channelMask->subFormat->while->riffiterator->hasNextChunk->chunk->riffiterator->nextChunk->if->chunk->getFormat->equals->format->chunk->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->chunk->readUnsignedShort->chunk->readUnsignedInt->chunk->readUnsignedInt->chunk->readUnsignedShort->chunk->readUnsignedShort->cbSize->chunk->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->chunk->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->chunk->readUnsignedInt->GUID->read->if->chunk->getFormat->equals->chunk->getSize->break->if->throw->new->UnsupportedAudioFileException->p->new->HashMap<>->s_channelmask->decodeChannelMask->if->p->put->if->p->put->p->put->audioformat->if->subFormat->equals->if->new->AudioFormat->else->new->AudioFormat->else->if->subFormat->equals->new->AudioFormat->else->throw->new->UnsupportedAudioFileException->return->audioformat->getFrameSize->new->StandardFileFormat
WaveExtensibleFileReader#getAudioInputStream(InputStream)::: wave extensible file reader get audio input stream:::format->getAudioFileFormat->af->format->getFormat->length->format->getLongFrameLength->riffiterator->new->RIFFReader->while->riffiterator->hasNextChunk->chunk->riffiterator->nextChunk->if->chunk->getFormat->equals->return->new->AudioInputStream->throw->new->UnsupportedAudioFileException
WaveFileFormat#getWaveType()::: wave file format get wave type:::return
WaveFileFormat#getHeaderSize()::: wave file format get header size:::return->getWaveType->getHeaderSize
WaveFileFormat#getHeaderSize(int)::: wave file format get header size:::return->getFmtChunkSize
WaveFileFormat#getFmtChunkSize(int)::: wave file format get fmt chunk size:::result->if->return
WaveFileReader#getAudioFileFormatImpl(InputStream)::: wave file reader get audio file format impl:::nread->fmt->length->wav_type->channels->sampleRate->avgBytesPerSec->blockAlign->sampleSizeInBits->encoding->dis->new->DataInputStream->magic->dis->readInt->fileLength->rllong->waveMagic->dis->readInt->totallength->if->else->if->throw->new->UnsupportedAudioFileException->while->try->dis->readInt->if->break->else->rllong->if->dis->skipBytes->catch->throw->new->UnsupportedAudioFileException->finally->rllong->endLength->rlshort->if->else->if->else->if->else->throw->new->UnsupportedAudioFileException->rlshort->if->throw->new->UnsupportedAudioFileException->rllong->rllong->rlshort->rlshort->if->throw->new->UnsupportedAudioFileException->if->encoding->equals->if->if->dis->skipBytes->while->try->datahdr->dis->readInt->if->break->else->thisLength->rllong->if->dis->skipBytes->catch->throw->new->UnsupportedAudioFileException->finally->dataLength->rllong->frameSize->calculatePCMFrameSize->format->new->AudioFormat->frameLength->format->getFrameSize->return->new->WaveFileFormat
WaveFileWriter#getAudioFileTypes(AudioInputStream)::: wave file writer get audio file types:::filetypes->new->AudioFileFormat.TypeArr->System->arraycopy->format->stream->getFormat->encoding->format->getEncoding->if->equals->equals->equals->equals->return->return->new->AudioFileFormat.TypeArr
WaveFileWriter#write(AudioInputStream, AudioFileFormat.Type, OutputStream)::: wave file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->waveFileFormat->getAudioFileFormat->if->stream->getFrameLength->throw->new->IOException->return->writeWaveFile
WaveFileWriter#write(AudioInputStream, AudioFileFormat.Type, File)::: wave file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->waveFileFormat->getAudioFileFormat->bytesWritten->try->fos->new->FileOutputStream->bos->new->BufferedOutputStream->writeWaveFile->catch->finally->if->waveFileFormat->getByteLength->dataLength->waveFileFormat->getHeaderSize->riffLength->waveFileFormat->getHeaderSize->try->raf->new->RandomAccessFile->raf->skipBytes->raf->big2little->writeInt->raf->WaveFileFormat->waveFileFormat->getWaveType->getFmtChunkSize->skipBytes->raf->big2little->writeInt->catch->finally->return
WaveFileWriter#getAudioFileFormat(AudioFileFormat.Type, AudioInputStream):::Returns the AudioFileFormat describing the file that will be written from this AudioInputStream:::if->isFileTypeSupported->throw->new->IllegalArgumentException->format->fileFormat->encoding->streamFormat->stream->getFormat->streamEncoding->streamFormat->getEncoding->sampleRate->sampleSizeInBits->channels->frameSize->frameRate->fileSize->waveType->if->equals->equals->streamFormat->getSampleSizeInBits->if->streamEncoding->equals->else->else->if->streamFormat->getSampleSizeInBits->else->streamFormat->getSampleSizeInBits->streamFormat->getSampleRate->streamFormat->getChannels->streamFormat->getFrameSize->streamFormat->getFrameRate->new->AudioFormat->if->stream->getFrameLength->stream->getFrameLength->streamFormat->getFrameSize->WaveFileFormat->getHeaderSize->else->stream->getFrameLength->new->WaveFileFormat->return
WaveFileWriter#writeWaveFile(InputStream, WaveFileFormat, OutputStream)::: wave file writer write wave file:::bytesRead->bytesWritten->fileStream->getFileStream->buffer->new->byteArr->maxLength->waveFileFormat->getByteLength->while->fileStream->read->if->if->out->write->else->out->write->break->else->out->write->return
WaveFileWriter#getFileStream(WaveFileFormat, InputStream)::: wave file writer get file stream:::audioFormat->waveFileFormat->getFormat->headerLength->waveFileFormat->getHeaderSize->riffMagic->waveMagic->fmtMagic->fmtLength->WaveFileFormat->waveFileFormat->getWaveType->getFmtChunkSize->wav_type->waveFileFormat->getWaveType->channels->audioFormat->getChannels->sampleSizeInBits->audioFormat->getSampleSizeInBits->sampleRate->audioFormat->getSampleRate->frameSizeInBytes->audioFormat->getFrameSize->frameRate->audioFormat->getFrameRate->avgBytesPerSec->blockAlign->dataMagic->dataLength->waveFileFormat->getFrameLength->length->waveFileFormat->getByteLength->riffLength->audioStreamFormat->encoding->codedAudioStream->if->getFormat->audioStreamFormat->getEncoding->if->equals->if->AudioSystem->audioStreamFormat->getSampleRate->audioStreamFormat->getSampleSizeInBits->audioStreamFormat->getChannels->audioStreamFormat->getFrameSize->audioStreamFormat->getFrameRate->new->AudioFormat->getAudioInputStream->if->equals->audioStreamFormat->isBigEndian->equals->audioStreamFormat->isBigEndian->equals->audioStreamFormat->isBigEndian->if->AudioSystem->audioStreamFormat->getSampleRate->audioStreamFormat->getSampleSizeInBits->audioStreamFormat->getChannels->audioStreamFormat->getFrameSize->audioStreamFormat->getFrameRate->new->AudioFormat->getAudioInputStream->header->try->baos->new->ByteArrayOutputStream->dos->new->DataOutputStream->dos->writeInt->dos->big2little->writeInt->dos->writeInt->dos->writeInt->dos->big2little->writeInt->dos->big2littleShort->writeShort->dos->big2littleShort->writeShort->dos->big2little->writeInt->dos->big2little->writeInt->dos->big2littleShort->writeShort->dos->big2littleShort->writeShort->if->dos->writeShort->dos->writeInt->dos->big2little->writeInt->baos->toByteArray->catch->finally->return->new->ByteArrayInputStream->new->NoCloseInputStream->new->SequenceInputStream
WaveFloatFileReader#getAudioFileFormatImpl(InputStream)::: wave float file reader get audio file format impl:::riffiterator->new->RIFFReader->if->riffiterator->getFormat->equals->throw->new->UnsupportedAudioFileException->if->riffiterator->getType->equals->throw->new->UnsupportedAudioFileException->fmt_found->data_found->channels->samplerate->framesize->bits->dataSize->while->riffiterator->hasNextChunk->chunk->riffiterator->nextChunk->if->chunk->getFormat->equals->format->chunk->readUnsignedShort->if->throw->new->UnsupportedAudioFileException->chunk->readUnsignedShort->chunk->readUnsignedInt->chunk->readUnsignedInt->chunk->readUnsignedShort->chunk->readUnsignedShort->if->chunk->getFormat->equals->chunk->getSize->break->if->throw->new->UnsupportedAudioFileException->audioformat->new->AudioFormat->return->audioformat->getFrameSize->new->StandardFileFormat
WaveFloatFileReader#getAudioInputStream(InputStream)::: wave float file reader get audio input stream:::format->getAudioFileFormat->af->format->getFormat->length->format->getLongFrameLength->riffiterator->new->RIFFReader->while->riffiterator->hasNextChunk->chunk->riffiterator->nextChunk->if->chunk->getFormat->equals->return->new->AudioInputStream->throw->new->UnsupportedAudioFileException
WaveFloatFileWriter#getAudioFileTypes()::: wave float file writer get audio file types:::return->new->TypeArr
WaveFloatFileWriter#getAudioFileTypes(AudioInputStream)::: wave float file writer get audio file types:::if->stream->getFormat->getEncoding->equals->return->new->TypeArr->return->new->TypeArr
WaveFloatFileWriter#checkFormat(AudioFileFormat.Type, AudioInputStream)::: wave float file writer check format:::if->equals->throw->new->IllegalArgumentException->if->stream->getFormat->getEncoding->equals->throw->stream->getFormat->new->IllegalArgumentException
WaveFloatFileWriter#write(AudioInputStream, RIFFWriter)::: wave float file writer write:::try->fmt_chunk->writer->writeChunk->format->stream->getFormat->fmt_chunk->writeUnsignedShort->fmt_chunk->format->getChannels->writeUnsignedShort->fmt_chunk->format->getSampleRate->writeUnsignedInt->fmt_chunk->format->getFrameRate->format->getFrameSize->writeUnsignedInt->fmt_chunk->format->getFrameSize->writeUnsignedShort->fmt_chunk->format->getSampleSizeInBits->writeUnsignedShort->catch->finally->try->data_chunk->writer->writeChunk->buff->new->byteArr->len->while->stream->read->data_chunk->write->catch->finally
WaveFloatFileWriter.NoCloseOutputStream#write(int)::: no close output stream write:::out->write
WaveFloatFileWriter.NoCloseOutputStream#flush()::: no close output stream flush:::out->flush
WaveFloatFileWriter.NoCloseOutputStream#write(byte[], int, int)::: no close output stream write:::out->write
WaveFloatFileWriter.NoCloseOutputStream#write(byte[])::: no close output stream write:::out->write
WaveFloatFileWriter#toLittleEndian(AudioInputStream)::: wave float file writer to little endian:::format->ais->getFormat->targetFormat->format->getEncoding->format->getSampleRate->format->getSampleSizeInBits->format->getChannels->format->getFrameSize->format->getFrameRate->new->AudioFormat->return->AudioSystem->getAudioInputStream
WaveFloatFileWriter#write(AudioInputStream, Type, OutputStream)::: wave float file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->checkFormat->if->stream->getFormat->isBigEndian->toLittleEndian->try->writer->new->NoCloseOutputStream->new->RIFFWriter->write->return->writer->getFilePointer->catch->finally
WaveFloatFileWriter#write(AudioInputStream, Type, File)::: wave float file writer write:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->checkFormat->if->stream->getFormat->isBigEndian->toLittleEndian->try->writer->new->RIFFWriter->write->return->writer->getFilePointer->catch->finally

jdk.internal.net.http.hpack.BinaryRepresentationWriter#write(HeaderTable, ByteBuffer)->boolean::: binary representation writer write
jdk.internal.net.http.hpack.BinaryRepresentationWriter#reset()->BinaryRepresentationWriter::: binary representation writer reset
jdk.internal.net.http.hpack.BulkSizeUpdateWriter#maxHeaderTableSizes(Iterable)->BulkSizeUpdateWriter::: bulk size update writer max header table sizes
jdk.internal.net.http.hpack.BulkSizeUpdateWriter#write(HeaderTable, ByteBuffer)->boolean::: bulk size update writer write
jdk.internal.net.http.hpack.BulkSizeUpdateWriter#reset()->BulkSizeUpdateWriter::: bulk size update writer reset
jdk.internal.net.http.hpack.Decoder#setMaxCapacity(int)->void:::Sets a maximum capacity of the header table
jdk.internal.net.http.hpack.Decoder#decode(ByteBuffer, boolean, DecodingCallback)->void:::Decodes a header block from the given buffer to the given callback
jdk.internal.net.http.hpack.Decoder#getTable()->SimpleHeaderTable::: decoder get table
jdk.internal.net.http.hpack.DecodingCallback#onDecoded(CharSequence, CharSequence)->void:::A method the more specific methods of the callback forward their calls to.
jdk.internal.net.http.hpack.DecodingCallback#onDecoded(CharSequence, CharSequence, boolean)->void:::A more finer-grained version of #onDecoded(CharSequence, CharSequence) that also reports on value sensitivity
jdk.internal.net.http.hpack.DecodingCallback#onIndexed(int, CharSequence, CharSequence)->void:::An Indexed Header Field decoded.
jdk.internal.net.http.hpack.DecodingCallback#onLiteral(int, CharSequence, CharSequence, boolean)->void:::A Literal Header Field without Indexing decoded, where a name was referred by an index.
jdk.internal.net.http.hpack.DecodingCallback#onLiteral(CharSequence, boolean, CharSequence, boolean)->void:::A Literal Header Field without Indexing decoded, where both a name and a value were literal.
jdk.internal.net.http.hpack.DecodingCallback#onLiteralNeverIndexed(int, CharSequence, CharSequence, boolean)->void:::A Literal Header Field Never Indexed decoded, where a name was referred by an index.
jdk.internal.net.http.hpack.DecodingCallback#onLiteralNeverIndexed(CharSequence, boolean, CharSequence, boolean)->void:::A Literal Header Field Never Indexed decoded, where both a name and a value were literal.
jdk.internal.net.http.hpack.DecodingCallback#onLiteralWithIndexing(int, CharSequence, CharSequence, boolean)->void:::A Literal Header Field with Incremental Indexing decoded, where a name was referred by an index.
jdk.internal.net.http.hpack.DecodingCallback#onLiteralWithIndexing(CharSequence, boolean, CharSequence, boolean)->void:::A Literal Header Field with Incremental Indexing decoded, where both a name and a value were literal.
jdk.internal.net.http.hpack.DecodingCallback#onSizeUpdate(int)->void:::A Dynamic Table Size Update decoded.
jdk.internal.net.http.hpack.Encoder#header(CharSequence, CharSequence)->void:::Sets up the given header (name, value)
jdk.internal.net.http.hpack.Encoder#header(CharSequence, CharSequence, boolean)->void:::Sets up the given header (name, value) with possibly sensitive value
jdk.internal.net.http.hpack.Encoder#setMaxCapacity(int)->void:::Sets a maximum capacity of the header table
jdk.internal.net.http.hpack.Encoder#calculateCapacity(int)->int:::Calculates actual capacity to be used by this encoder in response to a request to update maximum table size
jdk.internal.net.http.hpack.Encoder#encode(ByteBuffer)->boolean:::Encodes the #header(CharSequence, CharSequence) set up header into the given buffer
jdk.internal.net.http.hpack.Encoder#indexed(int)->void::: encoder indexed
jdk.internal.net.http.hpack.Encoder#literal(int, CharSequence, boolean)->void::: encoder literal
jdk.internal.net.http.hpack.Encoder#literal(CharSequence, boolean, CharSequence, boolean)->void::: encoder literal
jdk.internal.net.http.hpack.Encoder#literalNeverIndexed(int, CharSequence, boolean)->void::: encoder literal never indexed
jdk.internal.net.http.hpack.Encoder#literalNeverIndexed(CharSequence, boolean, CharSequence, boolean)->void::: encoder literal never indexed
jdk.internal.net.http.hpack.Encoder#literalWithIndexing(int, CharSequence, boolean)->void::: encoder literal with indexing
jdk.internal.net.http.hpack.Encoder#literalWithIndexing(CharSequence, boolean, CharSequence, boolean)->void::: encoder literal with indexing
jdk.internal.net.http.hpack.Encoder#sizeUpdate(int)->void::: encoder size update
jdk.internal.net.http.hpack.Encoder#getMaxCapacity()->int::: encoder get max capacity
jdk.internal.net.http.hpack.Encoder#getHeaderTable()->HeaderTable::: encoder get header table
jdk.internal.net.http.hpack.Encoder#checkEncoding()->void::: encoder check encoding
jdk.internal.net.http.hpack.HeaderTable#indexOf(CharSequence, CharSequence)->int::: header table index of
jdk.internal.net.http.hpack.HeaderTable#add(HeaderField)->void::: header table add
jdk.internal.net.http.hpack.HeaderTable#search(String, String)->int::: header table search
jdk.internal.net.http.hpack.HeaderTable#remove()->HeaderField::: header table remove
jdk.internal.net.http.hpack.HPACK#getLogger()->Logger::: k get logger
jdk.internal.net.http.hpack.HPACK.Logger#getName()->String::: logger get name
jdk.internal.net.http.hpack.HPACK.Logger#isLoggable(System.Logger.Level)->boolean::: logger is loggable
jdk.internal.net.http.hpack.HPACK.Logger#log(System.Logger.Level, ResourceBundle, String, Throwable)->void::: logger log
jdk.internal.net.http.hpack.HPACK.Logger#log(System.Logger.Level, ResourceBundle, String, Object...)->void::: logger log
jdk.internal.net.http.hpack.HPACK.Logger#isLoggable(Level)->boolean::: logger is loggable
jdk.internal.net.http.hpack.HPACK.Logger#log(Level, Supplier)->void::: logger log
jdk.internal.net.http.hpack.HPACK.Logger#subLogger(String)->Logger::: logger sub logger
jdk.internal.net.http.hpack.HPACK.BufferUpdateConsumer#accept(long, int)->void::: buffer update consumer accept
jdk.internal.net.http.hpack.HPACK#read(ByteBuffer, long, int, BufferUpdateConsumer)->int::: k read
jdk.internal.net.http.hpack.HPACK#write(long, int, BufferUpdateConsumer, ByteBuffer)->int::: k write
jdk.internal.net.http.hpack.HPACK#bytesForBits(int)->int::: k bytes for bits
jdk.internal.net.http.hpack.Huffman.Reader#read(ByteBuffer, Appendable, boolean)->void::: reader read
jdk.internal.net.http.hpack.Huffman.Reader#reset()->void:::Brings this reader to the state it had upon construction.
jdk.internal.net.http.hpack.Huffman.Writer#from(CharSequence, int, int)->Writer::: writer from
jdk.internal.net.http.hpack.Huffman.Writer#write(ByteBuffer)->boolean::: writer write
jdk.internal.net.http.hpack.Huffman.Writer#reset()->Writer:::Brings this writer to the state it had upon construction.
jdk.internal.net.http.hpack.Huffman.Writer#lengthOf(CharSequence, int, int)->int:::Calculates the number of bytes required to represent a subsequence of the given CharSequence using the Huffman coding.
jdk.internal.net.http.hpack.Huffman.Writer#lengthOf(CharSequence)->int::: writer length of
jdk.internal.net.http.hpack.IndexedWriter#index(int)->IndexedWriter::: indexed writer index
jdk.internal.net.http.hpack.IndexedWriter#write(HeaderTable, ByteBuffer)->boolean::: indexed writer write
jdk.internal.net.http.hpack.IndexedWriter#reset()->BinaryRepresentationWriter::: indexed writer reset
jdk.internal.net.http.hpack.IndexNameValueWriter#index(int)->IndexNameValueWriter::: index name value writer index
jdk.internal.net.http.hpack.IndexNameValueWriter#name(CharSequence, boolean)->IndexNameValueWriter::: index name value writer name
jdk.internal.net.http.hpack.IndexNameValueWriter#value(CharSequence, boolean)->IndexNameValueWriter::: index name value writer value
jdk.internal.net.http.hpack.IndexNameValueWriter#write(HeaderTable, ByteBuffer)->boolean::: index name value writer write
jdk.internal.net.http.hpack.IndexNameValueWriter#reset()->IndexNameValueWriter::: index name value writer reset
jdk.internal.net.http.hpack.IntegerReader#configure(int)->IntegerReader::: integer reader configure
jdk.internal.net.http.hpack.IntegerReader#configure(int, int)->IntegerReader::: integer reader configure
jdk.internal.net.http.hpack.IntegerReader#read(ByteBuffer)->boolean::: integer reader read
jdk.internal.net.http.hpack.IntegerReader#get()->int::: integer reader get
jdk.internal.net.http.hpack.IntegerReader#reset()->IntegerReader::: integer reader reset
jdk.internal.net.http.hpack.IntegerWriter#configure(int, int, int)->IntegerWriter::: integer writer configure
jdk.internal.net.http.hpack.IntegerWriter#write(ByteBuffer)->boolean::: integer writer write
jdk.internal.net.http.hpack.IntegerWriter#reset()->IntegerWriter::: integer writer reset
jdk.internal.net.http.hpack.ISO_8859_1.Reader#read(ByteBuffer, Appendable)->void::: reader read
jdk.internal.net.http.hpack.ISO_8859_1.Reader#reset()->Reader::: reader reset
jdk.internal.net.http.hpack.ISO_8859_1.Writer#configure(CharSequence, int, int)->Writer::: writer configure
jdk.internal.net.http.hpack.ISO_8859_1.Writer#write(ByteBuffer)->boolean::: writer write
jdk.internal.net.http.hpack.ISO_8859_1.Writer#reset()->Writer::: writer reset
jdk.internal.net.http.hpack.LiteralWithIndexingWriter#index(int)->LiteralWithIndexingWriter::: literal with indexing writer index
jdk.internal.net.http.hpack.LiteralWithIndexingWriter#name(CharSequence, boolean)->LiteralWithIndexingWriter::: literal with indexing writer name
jdk.internal.net.http.hpack.LiteralWithIndexingWriter#value(CharSequence, boolean)->LiteralWithIndexingWriter::: literal with indexing writer value
jdk.internal.net.http.hpack.LiteralWithIndexingWriter#write(HeaderTable, ByteBuffer)->boolean::: literal with indexing writer write
jdk.internal.net.http.hpack.LiteralWithIndexingWriter#reset()->IndexNameValueWriter::: literal with indexing writer reset
jdk.internal.net.http.hpack.NaiveHuffman.Reader#read(ByteBuffer, Appendable, boolean)->void::: reader read
jdk.internal.net.http.hpack.NaiveHuffman.Reader#read(ByteBuffer, Appendable, boolean, boolean)->void::: reader read
jdk.internal.net.http.hpack.NaiveHuffman.Reader#reset()->void::: reader reset
jdk.internal.net.http.hpack.NaiveHuffman.Writer#from(CharSequence, int, int)->Writer::: writer from
jdk.internal.net.http.hpack.NaiveHuffman.Writer#write(ByteBuffer)->boolean::: writer write
jdk.internal.net.http.hpack.NaiveHuffman.Writer#reset()->Writer::: writer reset
jdk.internal.net.http.hpack.NaiveHuffman.Writer#lengthOf(CharSequence, int, int)->int::: writer length of
jdk.internal.net.http.hpack.NaiveHuffman#lengthOf(CharSequence)->int:::Calculates the number of bytes required to represent the given CharSequence with the Huffman coding.
jdk.internal.net.http.hpack.NaiveHuffman#lengthOf(CharSequence, int, int)->int:::Calculates the number of bytes required to represent a subsequence of the given CharSequence with the Huffman coding.
jdk.internal.net.http.hpack.NaiveHuffman#getRoot()->Node::: naive huffman get root
jdk.internal.net.http.hpack.NaiveHuffman.Node#getChild(int)->Node::: node get child
jdk.internal.net.http.hpack.NaiveHuffman.Node#isLeaf()->boolean::: node is leaf
jdk.internal.net.http.hpack.NaiveHuffman.Node#getChar()->char::: node get char
jdk.internal.net.http.hpack.NaiveHuffman.Node#setChar(char)->void::: node set char
jdk.internal.net.http.hpack.NaiveHuffman.Node#addChildIfAbsent(int)->Node::: node add child if absent
jdk.internal.net.http.hpack.NaiveHuffman.Node#toString()->String::: node to string
jdk.internal.net.http.hpack.QuickHuffman.Node#isEOSPath()->boolean::: node is path
jdk.internal.net.http.hpack.QuickHuffman.Node#setEOSPath(boolean)->void::: node set path
jdk.internal.net.http.hpack.QuickHuffman.Node#isLeaf()->boolean::: node is leaf
jdk.internal.net.http.hpack.QuickHuffman.Node#getChild(int)->Node::: node get child
jdk.internal.net.http.hpack.QuickHuffman.Node#getOrCreateChild(int)->Node::: node get or create child
jdk.internal.net.http.hpack.QuickHuffman.Node#getChildren()->Node[]::: node get children
jdk.internal.net.http.hpack.QuickHuffman.Node#getSymbol()->char::: node get symbol
jdk.internal.net.http.hpack.QuickHuffman.Node#setSymbol(char)->void::: node set symbol
jdk.internal.net.http.hpack.QuickHuffman.Node#getLength()->int::: node get length
jdk.internal.net.http.hpack.QuickHuffman.Node#setLength(int)->void::: node set length
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#getOrCreateChild(int)->TemporaryNode::: temporary node get or create child
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#isLeaf()->boolean::: temporary node is leaf
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#isEOSPath()->boolean::: temporary node is path
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#setEOSPath(boolean)->void::: temporary node set path
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#getChild(int)->TemporaryNode::: temporary node get child
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#getChildren()->Node[]::: temporary node get children
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#getSymbol()->char::: temporary node get symbol
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#getLength()->int::: temporary node get length
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#setSymbol(char)->void::: temporary node set symbol
jdk.internal.net.http.hpack.QuickHuffman.TemporaryNode#setLength(int)->void::: temporary node set length
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#copyOf(Node)->ImmutableNode::: immutable node copy of
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#isLeaf()->boolean::: immutable node is leaf
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#isEOSPath()->boolean::: immutable node is path
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#setEOSPath(boolean)->void::: immutable node set path
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#getChild(int)->ImmutableNode::: immutable node get child
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#getOrCreateChild(int)->ImmutableNode::: immutable node get or create child
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#getChildren()->ImmutableNode[]::: immutable node get children
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#getSymbol()->char::: immutable node get symbol
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#setSymbol(char)->void::: immutable node set symbol
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#getLength()->int::: immutable node get length
jdk.internal.net.http.hpack.QuickHuffman.ImmutableNode#setLength(int)->void::: immutable node set length
jdk.internal.net.http.hpack.QuickHuffman.Reader#read(ByteBuffer, Appendable, boolean)->void::: reader read
jdk.internal.net.http.hpack.QuickHuffman.Reader#reset()->void::: reader reset
jdk.internal.net.http.hpack.QuickHuffman.Writer#from(CharSequence, int, int)->QuickHuffman.Writer::: writer from
jdk.internal.net.http.hpack.QuickHuffman.Writer#write(ByteBuffer)->boolean::: writer write
jdk.internal.net.http.hpack.QuickHuffman.Writer#reset()->QuickHuffman.Writer::: writer reset
jdk.internal.net.http.hpack.QuickHuffman.Writer#lengthOf(CharSequence, int, int)->int::: writer length of
jdk.internal.net.http.hpack.SimpleHeaderTable#size()->int::: simple header table size
jdk.internal.net.http.hpack.SimpleHeaderTable#maxSize()->int::: simple header table max size
jdk.internal.net.http.hpack.SimpleHeaderTable#length()->int::: simple header table length
jdk.internal.net.http.hpack.SimpleHeaderTable#get(int)->HeaderField::: simple header table get
jdk.internal.net.http.hpack.SimpleHeaderTable#put(CharSequence, CharSequence)->void::: simple header table put
jdk.internal.net.http.hpack.SimpleHeaderTable#setMaxSize(int)->void::: simple header table set max size
jdk.internal.net.http.hpack.SimpleHeaderTable#evictEntry()->HeaderField::: simple header table evict entry
jdk.internal.net.http.hpack.SimpleHeaderTable#toString()->String::: simple header table to string
jdk.internal.net.http.hpack.SimpleHeaderTable#sizeOf(HeaderField)->int::: simple header table size of
jdk.internal.net.http.hpack.SimpleHeaderTable#getStateString()->String::: simple header table get state string
jdk.internal.net.http.hpack.SimpleHeaderTable.HeaderField#toString()->String::: header field to string
jdk.internal.net.http.hpack.SimpleHeaderTable#add(HeaderField)->void::: simple header table add
jdk.internal.net.http.hpack.SimpleHeaderTable#remove()->HeaderField::: simple header table remove
jdk.internal.net.http.hpack.SimpleHeaderTable.CircularBuffer#add(E)->void::: circular buffer add
jdk.internal.net.http.hpack.SimpleHeaderTable.CircularBuffer#remove()->E::: circular buffer remove
jdk.internal.net.http.hpack.SimpleHeaderTable.CircularBuffer#get(int)->E::: circular buffer get
jdk.internal.net.http.hpack.SimpleHeaderTable.CircularBuffer#resize(int)->void::: circular buffer resize
jdk.internal.net.http.hpack.SizeUpdateWriter#maxHeaderTableSize(int)->SizeUpdateWriter::: size update writer max header table size
jdk.internal.net.http.hpack.SizeUpdateWriter#write(HeaderTable, ByteBuffer)->boolean::: size update writer write
jdk.internal.net.http.hpack.SizeUpdateWriter#reset()->BinaryRepresentationWriter::: size update writer reset
jdk.internal.net.http.hpack.StringReader#read(ByteBuffer, Appendable)->boolean::: string reader read
jdk.internal.net.http.hpack.StringReader#isHuffmanEncoded()->boolean::: string reader is huffman encoded
jdk.internal.net.http.hpack.StringReader#reset()->void::: string reader reset
jdk.internal.net.http.hpack.StringWriter#configure(CharSequence, boolean)->StringWriter::: string writer configure
jdk.internal.net.http.hpack.StringWriter#configure(CharSequence, int, int, boolean)->StringWriter::: string writer configure
jdk.internal.net.http.hpack.StringWriter#write(ByteBuffer)->boolean::: string writer write
jdk.internal.net.http.hpack.StringWriter#reset()->void::: string writer reset

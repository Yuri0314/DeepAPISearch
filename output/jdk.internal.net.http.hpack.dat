Decoder#setMaxCapacity(int):::Sets a maximum capacity of the header table:::if->logger->isLoggable->logger->format->log->setMaxCapacity0
Decoder#decode(ByteBuffer, boolean, DecodingCallback):::Decodes a header block from the given buffer to the given callback:::requireNonNull->requireNonNull->if->logger->isLoggable->logger->format->log->while->headerBlock->hasRemaining->proceed->if->logger->format->log->throw->new->IOException
DecodingCallback#onDecoded(CharSequence, CharSequence):::A method the more specific methods of the callback forward their calls to.:::
DecodingCallback#onDecoded(CharSequence, CharSequence, boolean):::A more finer-grained version of #onDecoded(CharSequence, CharSequence) that also reports on value sensitivity:::onDecoded
DecodingCallback#onIndexed(int, CharSequence, CharSequence):::An Indexed Header Field decoded.:::onDecoded
DecodingCallback#onLiteral(int, CharSequence, CharSequence, boolean):::A Literal Header Field without Indexing decoded, where a name was referred by an index.:::onDecoded
DecodingCallback#onLiteral(CharSequence, boolean, CharSequence, boolean):::A Literal Header Field without Indexing decoded, where both a name and a value were literal.:::onDecoded
DecodingCallback#onLiteralNeverIndexed(int, CharSequence, CharSequence, boolean):::A Literal Header Field Never Indexed decoded, where a name was referred by an index.:::onDecoded
DecodingCallback#onLiteralNeverIndexed(CharSequence, boolean, CharSequence, boolean):::A Literal Header Field Never Indexed decoded, where both a name and a value were literal.:::onDecoded
DecodingCallback#onLiteralWithIndexing(int, CharSequence, CharSequence, boolean):::A Literal Header Field with Incremental Indexing decoded, where a name was referred by an index.:::onDecoded
DecodingCallback#onLiteralWithIndexing(CharSequence, boolean, CharSequence, boolean):::A Literal Header Field with Incremental Indexing decoded, where both a name and a value were literal.:::onDecoded
DecodingCallback#onSizeUpdate(int):::A Dynamic Table Size Update decoded.:::
Encoder#header(CharSequence, CharSequence):::Sets up the given header (name, value):::header
Encoder#header(CharSequence, CharSequence, boolean):::Sets up the given header (name, value) with possibly sensitive value:::if->logger->isLoggable->logger->format->log->requireNonNull->requireNonNull->t->getHeaderTable->index->t->indexOf->if->indexed->else->huffmanValue->isHuffmanBetterFor->if->if->literalNeverIndexed->else->literal->else->huffmanName->isHuffmanBetterFor->if->literalNeverIndexed->else->literal
Encoder#setMaxCapacity(int):::Sets a maximum capacity of the header table:::if->logger->isLoggable->logger->format->log->setMaxCapacity0
Encoder#calculateCapacity(int):::Calculates actual capacity to be used by this encoder in response to a request to update maximum table size:::return
Encoder#encode(ByteBuffer):::Encodes the #header(CharSequence, CharSequence) set up header into the given buffer:::if->throw->new->IllegalStateException->if->logger->isLoggable->logger->format->log->if->prependWithCapacityUpdate->return->done->writer->write->if->writer->reset->return
Huffman.Reader#reset():::Brings this reader to the state it had upon construction.:::
Huffman.Writer#reset():::Brings this writer to the state it had upon construction.:::
Huffman.Writer#lengthOf(CharSequence, int, int):::Calculates the number of bytes required to represent a subsequence of the given CharSequence using the Huffman coding.:::
NaiveHuffman#lengthOf(CharSequence):::Calculates the number of bytes required to represent the given CharSequence with the Huffman coding.:::return->value->length->lengthOf
NaiveHuffman#lengthOf(CharSequence, int, int):::Calculates the number of bytes required to represent a subsequence of the given CharSequence with the Huffman coding.:::len->for->i->return

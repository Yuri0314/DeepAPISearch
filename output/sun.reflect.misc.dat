ReflectUtil#ensureMemberAccess(Class, Class, Object, int):::Ensures that access to a method or field is granted and throws IllegalAccessException if not:::Reflection->target->getClass->ensureMemberAccess
ReflectUtil#conservativeCheckMemberAccess(Member):::Does a conservative approximation of member access check:::sm->System->getSecurityManager->if->return->declaringClass->m->getDeclaringClass->privateCheckPackageAccess->if->Modifier->m->getModifiers->isPublic->Modifier->declaringClass->getModifiers->isPublic->return->sm->checkPermission
ReflectUtil#checkPackageAccess(Class):::Checks package access on the given class:::s->System->getSecurityManager->if->privateCheckPackageAccess
ReflectUtil#checkPackageAccess(String):::Checks package access on the given classname:::s->System->getSecurityManager->if->cname->name->replace->if->cname->startsWith->b->cname->lastIndexOf->if->cname->length->cname->substring->i->cname->lastIndexOf->if->s->cname->substring->checkPackageAccess
ReflectUtil#needsPackageAccessCheck(ClassLoader, ClassLoader):::Returns true if package access check is needed for reflective access from a class loader 'from' to classes or members in a class defined by class loader 'to':::if->return->if->return->return->isAncestor
ReflectUtil#checkProxyPackageAccess(Class):::Check package access on the proxy interfaces that the given proxy class implements.:::s->System->getSecurityManager->if->privateCheckProxyPackageAccess
ReflectUtil#checkProxyPackageAccess(ClassLoader, Class...):::Access check on the interfaces that a proxy class implements and throw SecurityException if it accesses a restricted package from the caller's class loader.:::sm->System->getSecurityManager->if->foreach->cl->intf->getClassLoader->if->needsPackageAccessCheck->privateCheckPackageAccess
ReflectUtil#isNonPublicProxyClass(Class):::Test if the given class is a proxy class that implements non-public interface:::if->Proxy->isProxyClass->return->pkg->cls->getPackageName->return->pkg->startsWith
ReflectUtil#checkProxyMethod(Object, Method):::Check if the given method is a method declared in the proxy interface implemented by the given proxy instance.:::if->Proxy->proxy->getClass->isProxyClass->throw->new->IllegalArgumentException->if->Modifier->method->getModifiers->isStatic->throw->new->IllegalArgumentException->c->method->getDeclaringClass->if->name->method->getName->if->name->equals->name->equals->name->equals->return->if->proxy->getClass->isSuperInterface->return->throw->new->IllegalArgumentException
ReflectUtil#isVMAnonymousClass(Class):::Checks if Class cls is a VM-anonymous class as defined by jdk.internal.misc.Unsafe#defineAnonymousClass (not to be confused with a Java Language anonymous inner class).:::return->cls->getName->indexOf

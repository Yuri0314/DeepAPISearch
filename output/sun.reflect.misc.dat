sun.reflect.misc.ConstructorUtil#getConstructor(Class, Class[])->Constructor::: constructor util get constructor
sun.reflect.misc.ConstructorUtil#getConstructors(Class)->Constructor[]::: constructor util get constructors
sun.reflect.misc.FieldUtil#getField(Class, String)->Field::: field util get field
sun.reflect.misc.FieldUtil#getFields(Class)->Field[]::: field util get fields
sun.reflect.misc.MethodUtil#getMethod(Class, String, Class[])->Method::: method util get method
sun.reflect.misc.MethodUtil#getMethods(Class)->Method[]::: method util get methods
sun.reflect.misc.MethodUtil#getPublicMethods(Class)->Method[]::: method util get public methods
sun.reflect.misc.MethodUtil#invoke(Method, Object, Object[])->Object::: method util invoke
sun.reflect.misc.MethodUtil#loadClass(String, boolean)->Class::: method util load class
sun.reflect.misc.MethodUtil#findClass(String)->Class::: method util find class
sun.reflect.misc.MethodUtil#getPermissions(CodeSource)->PermissionCollection::: method util get permissions
sun.reflect.misc.ReflectUtil#forName(String)->Class::: reflect util for name
sun.reflect.misc.ReflectUtil#ensureMemberAccess(Class, Class, Object, int)->void:::Ensures that access to a method or field is granted and throws IllegalAccessException if not
sun.reflect.misc.ReflectUtil#conservativeCheckMemberAccess(Member)->void:::Does a conservative approximation of member access check
sun.reflect.misc.ReflectUtil#checkPackageAccess(Class)->void:::Checks package access on the given class
sun.reflect.misc.ReflectUtil#checkPackageAccess(String)->void:::Checks package access on the given classname
sun.reflect.misc.ReflectUtil#isPackageAccessible(Class)->boolean::: reflect util is package accessible
sun.reflect.misc.ReflectUtil#needsPackageAccessCheck(ClassLoader, ClassLoader)->boolean:::Returns true if package access check is needed for reflective access from a class loader 'from' to classes or members in a class defined by class loader 'to'
sun.reflect.misc.ReflectUtil#checkProxyPackageAccess(Class)->void:::Check package access on the proxy interfaces that the given proxy class implements.
sun.reflect.misc.ReflectUtil#checkProxyPackageAccess(ClassLoader, Class...)->void:::Access check on the interfaces that a proxy class implements and throw SecurityException if it accesses a restricted package from the caller's class loader.
sun.reflect.misc.ReflectUtil#isNonPublicProxyClass(Class)->boolean:::Test if the given class is a proxy class that implements non-public interface
sun.reflect.misc.ReflectUtil#checkProxyMethod(Object, Method)->void:::Check if the given method is a method declared in the proxy interface implemented by the given proxy instance.
sun.reflect.misc.ReflectUtil#isVMAnonymousClass(Class)->boolean:::Checks if Class cls is a VM-anonymous class as defined by jdk.internal.misc.Unsafe#defineAnonymousClass (not to be confused with a Java Language anonymous inner class).

jdk.nashorn.api.scripting.AbstractJSObject#call(Object, Object...)->Object::: abstract object call
jdk.nashorn.api.scripting.AbstractJSObject#newObject(Object...)->Object::: abstract object new object
jdk.nashorn.api.scripting.AbstractJSObject#eval(String)->Object::: abstract object eval
jdk.nashorn.api.scripting.AbstractJSObject#getMember(String)->Object::: abstract object get member
jdk.nashorn.api.scripting.AbstractJSObject#getSlot(int)->Object::: abstract object get slot
jdk.nashorn.api.scripting.AbstractJSObject#hasMember(String)->boolean::: abstract object has member
jdk.nashorn.api.scripting.AbstractJSObject#hasSlot(int)->boolean::: abstract object has slot
jdk.nashorn.api.scripting.AbstractJSObject#removeMember(String)->void::: abstract object remove member
jdk.nashorn.api.scripting.AbstractJSObject#setMember(String, Object)->void::: abstract object set member
jdk.nashorn.api.scripting.AbstractJSObject#setSlot(int, Object)->void::: abstract object set slot
jdk.nashorn.api.scripting.AbstractJSObject#keySet()->Set::: abstract object key set
jdk.nashorn.api.scripting.AbstractJSObject#values()->Collection::: abstract object values
jdk.nashorn.api.scripting.AbstractJSObject#isInstance(Object)->boolean::: abstract object is instance
jdk.nashorn.api.scripting.AbstractJSObject#isInstanceOf(Object)->boolean::: abstract object is instance of
jdk.nashorn.api.scripting.AbstractJSObject#getClassName()->String::: abstract object get class name
jdk.nashorn.api.scripting.AbstractJSObject#isFunction()->boolean::: abstract object is function
jdk.nashorn.api.scripting.AbstractJSObject#isStrictFunction()->boolean::: abstract object is strict function
jdk.nashorn.api.scripting.AbstractJSObject#isArray()->boolean::: abstract object is array
jdk.nashorn.api.scripting.AbstractJSObject#toNumber()->double:::Returns this object's numeric value.
jdk.nashorn.api.scripting.AbstractJSObject#getDefaultValue(JSObject, Class)->Object:::When passed an AbstractJSObject, invokes its #getDefaultValue(Class) method
jdk.nashorn.api.scripting.ClassFilter#exposeToScripts(String)->boolean:::Should the Java class of the specified name be exposed to scripts?
jdk.nashorn.api.scripting.DefaultValueImpl#getDefaultValue(JSObject, Class)->Object::: default value impl get default value
jdk.nashorn.api.scripting.Formatter#format(String, Object[])->String:::Method which converts javascript types to java types for the String.format method (jrunscript function sprintf).
jdk.nashorn.api.scripting.JSObject#call(Object, Object...)->Object:::Call this object as a JavaScript function
jdk.nashorn.api.scripting.JSObject#newObject(Object...)->Object:::Call this 'constructor' JavaScript function to create a new object
jdk.nashorn.api.scripting.JSObject#eval(String)->Object:::Evaluate a JavaScript expression.
jdk.nashorn.api.scripting.JSObject#getMember(String)->Object:::Retrieves a named member of this JavaScript object.
jdk.nashorn.api.scripting.JSObject#getSlot(int)->Object:::Retrieves an indexed member of this JavaScript object.
jdk.nashorn.api.scripting.JSObject#hasMember(String)->boolean:::Does this object have a named member?
jdk.nashorn.api.scripting.JSObject#hasSlot(int)->boolean:::Does this object have a indexed property?
jdk.nashorn.api.scripting.JSObject#removeMember(String)->void:::Remove a named member from this JavaScript object
jdk.nashorn.api.scripting.JSObject#setMember(String, Object)->void:::Set a named member in this JavaScript object
jdk.nashorn.api.scripting.JSObject#setSlot(int, Object)->void:::Set an indexed member in this JavaScript object
jdk.nashorn.api.scripting.JSObject#keySet()->Set:::Returns the set of all property names of this object.
jdk.nashorn.api.scripting.JSObject#values()->Collection:::Returns the set of all property values of this object.
jdk.nashorn.api.scripting.JSObject#isInstance(Object)->boolean:::Checking whether the given object is an instance of 'this' object.
jdk.nashorn.api.scripting.JSObject#isInstanceOf(Object)->boolean:::Checking whether this object is an instance of the given 'clazz' object.
jdk.nashorn.api.scripting.JSObject#getClassName()->String:::ECMA [[Class]] property
jdk.nashorn.api.scripting.JSObject#isFunction()->boolean:::Is this a function object?
jdk.nashorn.api.scripting.JSObject#isStrictFunction()->boolean:::Is this a 'use strict' function object?
jdk.nashorn.api.scripting.JSObject#isArray()->boolean:::Is this an array object?
jdk.nashorn.api.scripting.JSObject#toNumber()->double:::Returns this object's numeric value.
jdk.nashorn.api.scripting.JSObject#getDefaultValue(Class)->Object:::Implements this object's [[DefaultValue]] method as per ECMAScript 5.1 section 8.6.2.
jdk.nashorn.api.scripting.NashornException#getFileName()->String:::Get the source file name for this NashornException
jdk.nashorn.api.scripting.NashornException#setFileName(String)->void:::Set the source file name for this NashornException
jdk.nashorn.api.scripting.NashornException#getLineNumber()->int:::Get the line number for this NashornException
jdk.nashorn.api.scripting.NashornException#setLineNumber(int)->void:::Set the line number for this NashornException
jdk.nashorn.api.scripting.NashornException#getColumnNumber()->int:::Get the column for this NashornException
jdk.nashorn.api.scripting.NashornException#setColumnNumber(int)->void:::Set the column for this NashornException
jdk.nashorn.api.scripting.NashornException#getScriptFrames(Throwable)->StackTraceElement[]:::Returns array javascript stack frames from the given exception object.
jdk.nashorn.api.scripting.NashornException#getScriptStackString(Throwable)->String:::Return a formatted script stack trace string with frames information separated by '\n'
jdk.nashorn.api.scripting.NashornException#getThrown()->Object:::Get the thrown object
jdk.nashorn.api.scripting.NashornException#initEcmaError(ScriptObject)->NashornException:::Initialization function for ECMA errors
jdk.nashorn.api.scripting.NashornException#getEcmaError()->Object:::Return the underlying ECMA error object, if available.
jdk.nashorn.api.scripting.NashornException#setEcmaError(Object)->void:::Return the underlying ECMA error object, if available.
jdk.nashorn.api.scripting.NashornScriptEngine#eval(Reader, ScriptContext)->Object::: nashorn script engine eval
jdk.nashorn.api.scripting.NashornScriptEngine#eval(String, ScriptContext)->Object::: nashorn script engine eval
jdk.nashorn.api.scripting.NashornScriptEngine#getFactory()->ScriptEngineFactory::: nashorn script engine get factory
jdk.nashorn.api.scripting.NashornScriptEngine#createBindings()->Bindings::: nashorn script engine create bindings
jdk.nashorn.api.scripting.NashornScriptEngine#compile(Reader)->CompiledScript::: nashorn script engine compile
jdk.nashorn.api.scripting.NashornScriptEngine#compile(String)->CompiledScript::: nashorn script engine compile
jdk.nashorn.api.scripting.NashornScriptEngine#invokeFunction(String, Object...)->Object::: nashorn script engine invoke function
jdk.nashorn.api.scripting.NashornScriptEngine#invokeMethod(Object, String, Object...)->Object::: nashorn script engine invoke method
jdk.nashorn.api.scripting.NashornScriptEngine#getInterface(Class)->T::: nashorn script engine get interface
jdk.nashorn.api.scripting.NashornScriptEngine#getInterface(Object, Class)->T::: nashorn script engine get interface
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getEngineName()->String::: nashorn script engine factory get engine name
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getEngineVersion()->String::: nashorn script engine factory get engine version
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getExtensions()->List::: nashorn script engine factory get extensions
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getLanguageName()->String::: nashorn script engine factory get language name
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getLanguageVersion()->String::: nashorn script engine factory get language version
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getMethodCallSyntax(String, String, String...)->String::: nashorn script engine factory get method call syntax
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getMimeTypes()->List::: nashorn script engine factory get mime types
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getNames()->List::: nashorn script engine factory get names
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getOutputStatement(String)->String::: nashorn script engine factory get output statement
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getParameter(String)->Object::: nashorn script engine factory get parameter
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getProgram(String...)->String::: nashorn script engine factory get program
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine()->ScriptEngine::: nashorn script engine factory get script engine
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine(ClassLoader)->ScriptEngine:::Create a new Script engine initialized with the given class loader.
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine(ClassFilter)->ScriptEngine:::Create a new Script engine initialized with the given class filter.
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine(String...)->ScriptEngine:::Create a new Script engine initialized with the given arguments.
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine(String[], ClassLoader)->ScriptEngine:::Create a new Script engine initialized with the given arguments and the given class loader.
jdk.nashorn.api.scripting.NashornScriptEngineFactory#getScriptEngine(String[], ClassLoader, ClassFilter)->ScriptEngine:::Create a new Script engine initialized with the given arguments, class loader and class filter.
jdk.nashorn.api.scripting.ScriptObjectMirror#equals(Object)->boolean::: script object mirror equals
jdk.nashorn.api.scripting.ScriptObjectMirror#hashCode()->int::: script object mirror hash code
jdk.nashorn.api.scripting.ScriptObjectMirror#toString()->String::: script object mirror to string
jdk.nashorn.api.scripting.ScriptObjectMirror#call(Object, Object...)->Object::: script object mirror call
jdk.nashorn.api.scripting.ScriptObjectMirror#newObject(Object...)->Object::: script object mirror new object
jdk.nashorn.api.scripting.ScriptObjectMirror#eval(String)->Object::: script object mirror eval
jdk.nashorn.api.scripting.ScriptObjectMirror#callMember(String, Object...)->Object:::Call member function
jdk.nashorn.api.scripting.ScriptObjectMirror#getMember(String)->Object::: script object mirror get member
jdk.nashorn.api.scripting.ScriptObjectMirror#getSlot(int)->Object::: script object mirror get slot
jdk.nashorn.api.scripting.ScriptObjectMirror#hasMember(String)->boolean::: script object mirror has member
jdk.nashorn.api.scripting.ScriptObjectMirror#hasSlot(int)->boolean::: script object mirror has slot
jdk.nashorn.api.scripting.ScriptObjectMirror#removeMember(String)->void::: script object mirror remove member
jdk.nashorn.api.scripting.ScriptObjectMirror#setMember(String, Object)->void::: script object mirror set member
jdk.nashorn.api.scripting.ScriptObjectMirror#setSlot(int, Object)->void::: script object mirror set slot
jdk.nashorn.api.scripting.ScriptObjectMirror#setIndexedPropertiesToExternalArrayData(ByteBuffer)->void:::Nashorn extension: setIndexedPropertiesToExternalArrayData
jdk.nashorn.api.scripting.ScriptObjectMirror#isInstance(Object)->boolean::: script object mirror is instance
jdk.nashorn.api.scripting.ScriptObjectMirror#getClassName()->String::: script object mirror get class name
jdk.nashorn.api.scripting.ScriptObjectMirror#isFunction()->boolean::: script object mirror is function
jdk.nashorn.api.scripting.ScriptObjectMirror#isStrictFunction()->boolean::: script object mirror is strict function
jdk.nashorn.api.scripting.ScriptObjectMirror#isArray()->boolean::: script object mirror is array
jdk.nashorn.api.scripting.ScriptObjectMirror#clear()->void::: script object mirror clear
jdk.nashorn.api.scripting.ScriptObjectMirror#containsKey(Object)->boolean::: script object mirror contains key
jdk.nashorn.api.scripting.ScriptObjectMirror#containsValue(Object)->boolean::: script object mirror contains value
jdk.nashorn.api.scripting.ScriptObjectMirror#entrySet()->Set>::: script object mirror entry set
jdk.nashorn.api.scripting.ScriptObjectMirror#get(Object)->Object::: script object mirror get
jdk.nashorn.api.scripting.ScriptObjectMirror#isEmpty()->boolean::: script object mirror is empty
jdk.nashorn.api.scripting.ScriptObjectMirror#keySet()->Set::: script object mirror key set
jdk.nashorn.api.scripting.ScriptObjectMirror#put(String, Object)->Object::: script object mirror put
jdk.nashorn.api.scripting.ScriptObjectMirror#putAll(Map)->void::: script object mirror put all
jdk.nashorn.api.scripting.ScriptObjectMirror#remove(Object)->Object::: script object mirror remove
jdk.nashorn.api.scripting.ScriptObjectMirror#delete(Object)->boolean:::Delete a property from this object.
jdk.nashorn.api.scripting.ScriptObjectMirror#size()->int::: script object mirror size
jdk.nashorn.api.scripting.ScriptObjectMirror#values()->Collection::: script object mirror values
jdk.nashorn.api.scripting.ScriptObjectMirror#getProto()->Object:::Return the __proto__ of this object.
jdk.nashorn.api.scripting.ScriptObjectMirror#setProto(Object)->void:::Set the __proto__ of this object.
jdk.nashorn.api.scripting.ScriptObjectMirror#getOwnPropertyDescriptor(String)->Object:::ECMA 8.12.1 [[GetOwnProperty]] (P)
jdk.nashorn.api.scripting.ScriptObjectMirror#getOwnKeys(boolean)->String[]:::return an array of own property keys associated with the object.
jdk.nashorn.api.scripting.ScriptObjectMirror#preventExtensions()->ScriptObjectMirror:::Flag this script object as non extensible
jdk.nashorn.api.scripting.ScriptObjectMirror#isExtensible()->boolean:::Check if this script object is extensible
jdk.nashorn.api.scripting.ScriptObjectMirror#seal()->ScriptObjectMirror:::ECMAScript 15.2.3.8 - seal implementation
jdk.nashorn.api.scripting.ScriptObjectMirror#isSealed()->boolean:::Check whether this script object is sealed
jdk.nashorn.api.scripting.ScriptObjectMirror#freeze()->ScriptObjectMirror:::ECMA 15.2.39 - freeze implementation
jdk.nashorn.api.scripting.ScriptObjectMirror#isFrozen()->boolean:::Check whether this script object is frozen
jdk.nashorn.api.scripting.ScriptObjectMirror#isUndefined(Object)->boolean:::Utility to check if given object is ECMAScript undefined value
jdk.nashorn.api.scripting.ScriptObjectMirror#to(Class)->T:::Utility to convert this script object to the given type.
jdk.nashorn.api.scripting.ScriptObjectMirror#wrap(Object, Object)->Object:::Make a script object mirror on given object if needed.
jdk.nashorn.api.scripting.ScriptObjectMirror#wrapAsJSONCompatible(Object, Object)->Object:::Make a script object mirror on given object if needed
jdk.nashorn.api.scripting.ScriptObjectMirror#unwrap(Object, Object)->Object:::Unwrap a script object mirror if needed.
jdk.nashorn.api.scripting.ScriptObjectMirror#wrapArray(Object[], Object)->Object[]:::Wrap an array of object to script object mirrors if needed.
jdk.nashorn.api.scripting.ScriptObjectMirror#unwrapArray(Object[], Object)->Object[]:::Unwrap an array of script object mirrors if needed.
jdk.nashorn.api.scripting.ScriptObjectMirror#identical(Object, Object)->boolean:::Are the given objects mirrors to same underlying object?
jdk.nashorn.api.scripting.ScriptObjectMirror#getScriptObject()->ScriptObject::: script object mirror get script object
jdk.nashorn.api.scripting.ScriptObjectMirror#getHomeGlobal()->Global::: script object mirror get home global
jdk.nashorn.api.scripting.ScriptObjectMirror#translateUndefined(Object)->Object::: script object mirror translate undefined
jdk.nashorn.api.scripting.ScriptObjectMirror#toNumber()->double::: script object mirror to number
jdk.nashorn.api.scripting.ScriptObjectMirror#getDefaultValue(Class)->Object::: script object mirror get default value
jdk.nashorn.api.scripting.ScriptUtils#parse(String, String, boolean)->String:::Returns AST as JSON compatible string
jdk.nashorn.api.scripting.ScriptUtils#format(String, Object[])->String:::Method which converts javascript types to java types for the String.format method (jrunscript function sprintf).
jdk.nashorn.api.scripting.ScriptUtils#makeSynchronizedFunction(Object, Object)->Object:::Create a wrapper function that calls func synchronized on sync or, if that is undefined, self
jdk.nashorn.api.scripting.ScriptUtils#wrap(Object)->ScriptObjectMirror:::Make a script object mirror on given object if needed.
jdk.nashorn.api.scripting.ScriptUtils#unwrap(Object)->Object:::Unwrap a script object mirror if needed.
jdk.nashorn.api.scripting.ScriptUtils#wrapArray(Object[])->Object[]:::Wrap an array of object to script object mirrors if needed.
jdk.nashorn.api.scripting.ScriptUtils#unwrapArray(Object[])->Object[]:::Unwrap an array of script object mirrors if needed.
jdk.nashorn.api.scripting.ScriptUtils#convert(Object, Object)->Object:::Convert the given object to the given type.
jdk.nashorn.api.scripting.URLReader#read(char[], int, int)->int::: reader read
jdk.nashorn.api.scripting.URLReader#close()->void::: reader close
jdk.nashorn.api.scripting.URLReader#getURL()->URL:::URL of this reader
jdk.nashorn.api.scripting.URLReader#getCharset()->Charset:::Charset used by this reader

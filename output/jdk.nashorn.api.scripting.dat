AbstractJSObject#toNumber():::Returns this object's numeric value.:::return
AbstractJSObject#getDefaultValue(JSObject, Class):::When passed an AbstractJSObject, invokes its #getDefaultValue(Class) method:::return->jsobj->getDefaultValue
ClassFilter#exposeToScripts(String):::Should the Java class of the specified name be exposed to scripts?:::
Formatter#format(String, Object[]):::Method which converts javascript types to java types for the String.format method (jrunscript function sprintf).:::m->FS_PATTERN->matcher->positionalParameter->while->m->find->index->m->group->index->previous->m->group->isPreviousArgument->conversion->m->group->charAt->if->continue->if->if->continue->arg->if->m->group->if->longValue->else->switch->if->longValue->else->if->length->charAt->break->if->doubleValue->break->if->intValue->else->if->length->charAt->break->break->return->String->format
JSObject#call(Object, Object...):::Call this object as a JavaScript function:::
JSObject#newObject(Object...):::Call this 'constructor' JavaScript function to create a new object:::
JSObject#eval(String):::Evaluate a JavaScript expression.:::
JSObject#getMember(String):::Retrieves a named member of this JavaScript object.:::
JSObject#getSlot(int):::Retrieves an indexed member of this JavaScript object.:::
JSObject#hasMember(String):::Does this object have a named member?:::
JSObject#hasSlot(int):::Does this object have a indexed property?:::
JSObject#removeMember(String):::Remove a named member from this JavaScript object:::
JSObject#setMember(String, Object):::Set a named member in this JavaScript object:::
JSObject#setSlot(int, Object):::Set an indexed member in this JavaScript object:::
JSObject#keySet():::Returns the set of all property names of this object.:::
JSObject#values():::Returns the set of all property values of this object.:::
JSObject#isInstance(Object):::Checking whether the given object is an instance of 'this' object.:::
JSObject#isInstanceOf(Object):::Checking whether this object is an instance of the given 'clazz' object.:::
JSObject#getClassName():::ECMA [[Class]] property:::
JSObject#isFunction():::Is this a function object?:::
JSObject#isStrictFunction():::Is this a 'use strict' function object?:::
JSObject#isArray():::Is this an array object?:::
JSObject#toNumber():::Returns this object's numeric value.:::return->JSType->JSType->toPrimitive->toNumber
JSObject#getDefaultValue(Class):::Implements this object's [[DefaultValue]] method as per ECMAScript 5.1 section 8.6.2.:::return->DefaultValueImpl->getDefaultValue
NashornException#getFileName():::Get the source file name for this NashornException:::ensureLineAndFileName->return
NashornException#setFileName(String):::Set the source file name for this NashornException:::
NashornException#getLineNumber():::Get the line number for this NashornException:::ensureLineAndFileName->return
NashornException#setLineNumber(int):::Set the line number for this NashornException:::
NashornException#getColumnNumber():::Get the column for this NashornException:::return
NashornException#setColumnNumber(int):::Set the column for this NashornException:::
NashornException#getScriptFrames(Throwable):::Returns array javascript stack frames from the given exception object.:::frames->exception->getStackTrace->filtered->new->ArrayList<>->foreach->if->ECMAErrors->isScriptFrame->className->st->getFileName->methodName->st->getMethodName->if->methodName->symbolName->equals->else->stripMethodName->filtered->st->getFileName->st->getLineNumber->new->StackTraceElement->add->return->filtered->new->StackTraceElementArr->toArray
NashornException#getScriptStackString(Throwable):::Return a formatted script stack trace string with frames information separated by '\n':::buf->new->StringBuilder->frames->getScriptFrames->foreach->buf->append->buf->st->getMethodName->append->buf->append->buf->st->getFileName->append->buf->append->buf->st->getLineNumber->append->buf->append->len->buf->length->if->buf->deleteCharAt->return->buf->toString
NashornException#getThrown():::Get the thrown object:::return
NashornException#initEcmaError(ScriptObject):::Initialization function for ECMA errors:::if->return->thrown->getThrown->if->ScriptObjectMirror->wrap->setEcmaError->else->setEcmaError->return
NashornException#getEcmaError():::Return the underlying ECMA error object, if available.:::return
NashornException#setEcmaError(Object):::Return the underlying ECMA error object, if available.:::
NashornScriptEngineFactory#getScriptEngine(ClassLoader):::Create a new Script engine initialized with the given class loader.:::return->newEngine
NashornScriptEngineFactory#getScriptEngine(ClassFilter):::Create a new Script engine initialized with the given class filter.:::return->getAppClassLoader->Objects->requireNonNull->newEngine
NashornScriptEngineFactory#getScriptEngine(String...):::Create a new Script engine initialized with the given arguments.:::return->Objects->requireNonNull->getAppClassLoader->newEngine
NashornScriptEngineFactory#getScriptEngine(String[], ClassLoader):::Create a new Script engine initialized with the given arguments and the given class loader.:::return->Objects->requireNonNull->newEngine
NashornScriptEngineFactory#getScriptEngine(String[], ClassLoader, ClassFilter):::Create a new Script engine initialized with the given arguments, class loader and class filter.:::return->Objects->requireNonNull->Objects->requireNonNull->newEngine
ScriptObjectMirror#callMember(String, Object...):::Call member function:::Objects->requireNonNull->oldGlobal->Context->getGlobal->globalChanged->try->if->Context->setGlobal->val->sobj->get->if->modArgs->wrapArrayLikeMe->return->ScriptRuntime->unwrapArray->apply->wrapLikeMe->else->if->isFunction->return->call->throw->new->NoSuchMethodException->catch->throw->ne->initEcmaError->throw->throw->new->RuntimeException->finally->if->Context->setGlobal
ScriptObjectMirror#setIndexedPropertiesToExternalArrayData(ByteBuffer):::Nashorn extension: setIndexedPropertiesToExternalArrayData:::new->Callable<Void>->inGlobal
ScriptObjectMirror#delete(Object):::Delete a property from this object.:::return->new->Callable<Boolean>->inGlobal
ScriptObjectMirror#getProto():::Return the __proto__ of this object.:::return->new->Callable<Object>->inGlobal
ScriptObjectMirror#setProto(Object):::Set the __proto__ of this object.:::new->Callable<Void>->inGlobal
ScriptObjectMirror#getOwnPropertyDescriptor(String):::ECMA 8.12.1 [[GetOwnProperty]] (P):::return->new->Callable<Object>->inGlobal
ScriptObjectMirror#getOwnKeys(boolean):::return an array of own property keys associated with the object.:::return->new->Callable<String[]>->inGlobal
ScriptObjectMirror#preventExtensions():::Flag this script object as non extensible:::return->new->Callable<ScriptObjectMirror>->inGlobal
ScriptObjectMirror#isExtensible():::Check if this script object is extensible:::return->new->Callable<Boolean>->inGlobal
ScriptObjectMirror#seal():::ECMAScript 15.2.3.8 - seal implementation:::return->new->Callable<ScriptObjectMirror>->inGlobal
ScriptObjectMirror#isSealed():::Check whether this script object is sealed:::return->new->Callable<Boolean>->inGlobal
ScriptObjectMirror#freeze():::ECMA 15.2.39 - freeze implementation:::return->new->Callable<ScriptObjectMirror>->inGlobal
ScriptObjectMirror#isFrozen():::Check whether this script object is frozen:::return->new->Callable<Boolean>->inGlobal
ScriptObjectMirror#isUndefined(Object):::Utility to check if given object is ECMAScript undefined value:::return
ScriptObjectMirror#to(Class):::Utility to convert this script object to the given type.:::return->new->Callable<T>->inGlobal
ScriptObjectMirror#wrap(Object, Object):::Make a script object mirror on given object if needed.:::return->wrap
ScriptObjectMirror#wrapAsJSONCompatible(Object, Object):::Make a script object mirror on given object if needed:::return->wrap
ScriptObjectMirror#unwrap(Object, Object):::Unwrap a script object mirror if needed.:::if->mirror->return->else->if->return->unwrap->return
ScriptObjectMirror#wrapArray(Object[], Object):::Wrap an array of object to script object mirrors if needed.:::return->wrapArray
ScriptObjectMirror#unwrapArray(Object[], Object):::Unwrap an array of script object mirrors if needed.:::if->return->newArgs->new->ObjectArr->index->foreach->unwrap->return
ScriptObjectMirror#identical(Object, Object):::Are the given objects mirrors to same underlying object?:::o1->o2->return
ScriptUtils#parse(String, String, boolean):::Returns AST as JSON compatible string:::return->ScriptRuntime->parse
ScriptUtils#format(String, Object[]):::Method which converts javascript types to java types for the String.format method (jrunscript function sprintf).:::return->Formatter->format
ScriptUtils#makeSynchronizedFunction(Object, Object):::Create a wrapper function that calls func synchronized on sync or, if that is undefined, self:::unwrapped->unwrap->if->return->unwrap->createSynchronized->throw->new->IllegalArgumentException
ScriptUtils#wrap(Object):::Make a script object mirror on given object if needed.:::if->return->if->sobj->return->ScriptObjectMirror->Context->getGlobal->wrap->throw->new->IllegalArgumentException
ScriptUtils#unwrap(Object):::Unwrap a script object mirror if needed.:::if->return->ScriptObjectMirror->Context->getGlobal->unwrap->return
ScriptUtils#wrapArray(Object[]):::Wrap an array of object to script object mirrors if needed.:::if->return->return->ScriptObjectMirror->Context->getGlobal->wrapArray
ScriptUtils#unwrapArray(Object[]):::Unwrap an array of script object mirrors if needed.:::if->return->return->ScriptObjectMirror->Context->getGlobal->unwrapArray
ScriptUtils#convert(Object, Object):::Convert the given object to the given type.:::if->return->clazz->if->else->if->getRepresentedClass->else->throw->new->IllegalArgumentException->linker->Bootstrap->getLinkerServices->objToConvert->unwrap->converter->linker->objToConvert->getClass->getTypeConverter->if->throw->new->UnsupportedOperationException->try->return->converter->invoke->catch->throw->throw->new->RuntimeException->finally
URLReader#getURL():::URL of this reader:::return
URLReader#getCharset():::Charset used by this reader:::return

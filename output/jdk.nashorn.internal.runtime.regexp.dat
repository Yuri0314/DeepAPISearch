RegExp#getSource():::Get the source pattern of this regular expression.:::return
RegExp#setGlobal(boolean):::Set the global flag of this regular expression to global.:::
RegExp#isGlobal():::Get the global flag of this regular expression.:::return
RegExp#isIgnoreCase():::Get the ignore-case flag of this regular expression.:::return
RegExp#isMultiline():::Get the multiline flag of this regular expression.:::return
RegExp#getGroupsInNegativeLookahead():::Get a bitset indicating which of the groups in this regular expression are inside a negative lookahead.:::return
RegExp#match(String):::Match this regular expression against str, starting at index start and return a MatchResult with the result.:::
RegExp#throwParserException(String, String):::Throw a regexp parser exception.:::throw->ECMAErrors->getMessage->new->ParserException
RegExpFactory#compile(String, String):::Creates a Regular expression from the given pattern and flags strings.:::return->new->JdkRegExp
RegExpFactory#create(String, String):::Compile a regexp with the given source and flags.:::key->regexp->REGEXP_CACHE->get->if->instance->compile->REGEXP_CACHE->put->return
RegExpFactory#validate(String, String):::Validate a regexp with the given source and flags.:::create
RegExpFactory#usesJavaUtilRegex():::Returns true if the instance uses the JDK's java.util.regex package.:::return->instance->getClass
RegExpMatcher#search(int):::Searches for pattern starting at start:::
RegExpMatcher#getInput():::Get the input string.:::
RegExpResult#getGroups():::Get the groups for the match:::return
RegExpResult#getInput():::Get the input for the map:::return
RegExpResult#getIndex():::Get the index for the match:::return
RegExpResult#length():::Get the length of the match:::return->length
RegExpResult#getGroup(int):::Get the group with the given index or the empty string if group index is not valid.:::return
RegExpResult#getLastParen():::Get the last parenthesis group, or the empty string if none exists.:::return
RegExpScanner#scan(String):::Scan a JavaScript regexp string returning a Java safe regex string.:::scanner->new->RegExpScanner->try->scanner->disjunction->catch->throw->e->getMessage->new->PatternSyntaxException->finally->if->string->length->p->scanner->getStringBuilder->toString->throw->p->length->new->PatternSyntaxException->scanner->processForwardReferences->return

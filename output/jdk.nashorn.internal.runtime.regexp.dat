jdk.nashorn.internal.runtime.regexp.JdkRegExp#match(String)->RegExpMatcher::: jdk reg exp match
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#search(int)->boolean::: default matcher search
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#getInput()->String::: default matcher get input
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#start()->int::: default matcher start
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#start(int)->int::: default matcher start
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#end()->int::: default matcher end
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#end(int)->int::: default matcher end
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#group()->String::: default matcher group
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#group(int)->String::: default matcher group
jdk.nashorn.internal.runtime.regexp.JdkRegExp.DefaultMatcher#groupCount()->int::: default matcher group count
jdk.nashorn.internal.runtime.regexp.JoniRegExp#match(String)->RegExpMatcher::: joni reg exp match
jdk.nashorn.internal.runtime.regexp.JoniRegExp.Factory#compile(String, String)->RegExp::: factory compile
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#search(int)->boolean::: joni matcher search
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#getInput()->String::: joni matcher get input
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#start()->int::: joni matcher start
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#start(int)->int::: joni matcher start
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#end()->int::: joni matcher end
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#end(int)->int::: joni matcher end
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#group()->String::: joni matcher group
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#group(int)->String::: joni matcher group
jdk.nashorn.internal.runtime.regexp.JoniRegExp.JoniMatcher#groupCount()->int::: joni matcher group count
jdk.nashorn.internal.runtime.regexp.RegExp#getSource()->String:::Get the source pattern of this regular expression.
jdk.nashorn.internal.runtime.regexp.RegExp#setGlobal(boolean)->void:::Set the global flag of this regular expression to global.
jdk.nashorn.internal.runtime.regexp.RegExp#isGlobal()->boolean:::Get the global flag of this regular expression.
jdk.nashorn.internal.runtime.regexp.RegExp#isIgnoreCase()->boolean:::Get the ignore-case flag of this regular expression.
jdk.nashorn.internal.runtime.regexp.RegExp#isMultiline()->boolean:::Get the multiline flag of this regular expression.
jdk.nashorn.internal.runtime.regexp.RegExp#getGroupsInNegativeLookahead()->BitVector:::Get a bitset indicating which of the groups in this regular expression are inside a negative lookahead.
jdk.nashorn.internal.runtime.regexp.RegExp#match(String)->RegExpMatcher:::Match this regular expression against str, starting at index start and return a MatchResult with the result.
jdk.nashorn.internal.runtime.regexp.RegExp#throwParserException(String, String)->void:::Throw a regexp parser exception.
jdk.nashorn.internal.runtime.regexp.RegExpFactory#compile(String, String)->RegExp:::Creates a Regular expression from the given pattern and flags strings.
jdk.nashorn.internal.runtime.regexp.RegExpFactory#create(String, String)->RegExp:::Compile a regexp with the given source and flags.
jdk.nashorn.internal.runtime.regexp.RegExpFactory#validate(String, String)->void:::Validate a regexp with the given source and flags.
jdk.nashorn.internal.runtime.regexp.RegExpFactory#usesJavaUtilRegex()->boolean:::Returns true if the instance uses the JDK's java.util.regex package.
jdk.nashorn.internal.runtime.regexp.RegExpMatcher#search(int)->boolean:::Searches for pattern starting at start
jdk.nashorn.internal.runtime.regexp.RegExpMatcher#getInput()->String:::Get the input string.
jdk.nashorn.internal.runtime.regexp.RegExpResult#getGroups()->Object[]:::Get the groups for the match
jdk.nashorn.internal.runtime.regexp.RegExpResult#getInput()->String:::Get the input for the map
jdk.nashorn.internal.runtime.regexp.RegExpResult#getIndex()->int:::Get the index for the match
jdk.nashorn.internal.runtime.regexp.RegExpResult#length()->int:::Get the length of the match
jdk.nashorn.internal.runtime.regexp.RegExpResult#getGroup(int)->Object:::Get the group with the given index or the empty string if group index is not valid.
jdk.nashorn.internal.runtime.regexp.RegExpResult#getLastParen()->Object:::Get the last parenthesis group, or the empty string if none exists.
jdk.nashorn.internal.runtime.regexp.RegExpScanner#scan(String)->RegExpScanner:::Scan a JavaScript regexp string returning a Java safe regex string.
jdk.nashorn.internal.runtime.regexp.RegExpScanner#getStringBuilder()->StringBuilder::: reg exp scanner get string builder
jdk.nashorn.internal.runtime.regexp.RegExpScanner#getJavaPattern()->String::: reg exp scanner get java pattern
jdk.nashorn.internal.runtime.regexp.RegExpScanner#getGroupsInNegativeLookahead()->BitVector::: reg exp scanner get groups in negative lookahead

org.graalvm.compiler.serviceprovider.BufferUtil#asBaseBuffer(Buffer)->Buffer:::Coerces obj to be of type Buffer
org.graalvm.compiler.serviceprovider.GraalServices#load(Class)->Iterable:::Gets an Iterable of the providers available for a given service.
org.graalvm.compiler.serviceprovider.GraalServices#load0(Class)->Iterable::: graal services load0
org.graalvm.compiler.serviceprovider.GraalServices#openJVMCITo(Class)->void:::Opens all JVMCI packages to the module of a given class
org.graalvm.compiler.serviceprovider.GraalServices#loadSingle(Class, boolean)->S:::Gets the provider for a given service for which at most one provider must be available.
org.graalvm.compiler.serviceprovider.GraalServices#getClassfileAsStream(Class)->InputStream:::Gets the class file bytes for c.
org.graalvm.compiler.serviceprovider.GraalServices#isToStringTrusted(Class)->boolean:::Determines if invoking Object#toString() on an instance of c will only run trusted code.
org.graalvm.compiler.serviceprovider.GraalServices.DirectSpeculationReason#equals(Object)->boolean::: direct speculation reason equals
org.graalvm.compiler.serviceprovider.GraalServices.DirectSpeculationReason#hashCode()->int::: direct speculation reason hash code
org.graalvm.compiler.serviceprovider.GraalServices.DirectSpeculationReason#toString()->String::: direct speculation reason to string
org.graalvm.compiler.serviceprovider.GraalServices.DirectSpeculationReason#encode(Supplier)->SpeculationReasonEncoding::: direct speculation reason encode
org.graalvm.compiler.serviceprovider.GraalServices.DirectSpeculationReason#addNonNullObject(SpeculationReasonEncoding, Object)->void::: direct speculation reason add non null object
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitBoolean(boolean)->void::: encoding adapter visit boolean
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitByte(byte)->void::: encoding adapter visit byte
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitChar(char)->void::: encoding adapter visit char
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitShort(short)->void::: encoding adapter visit short
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitInt(int)->void::: encoding adapter visit int
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitLong(long)->void::: encoding adapter visit long
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitFloat(float)->void::: encoding adapter visit float
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitDouble(double)->void::: encoding adapter visit double
org.graalvm.compiler.serviceprovider.GraalServices.EncodingAdapter#visitObject(Object)->void::: encoding adapter visit object
org.graalvm.compiler.serviceprovider.GraalServices#createSpeculationReason(int, String, Object...)->SpeculationReason::: graal services create speculation reason
org.graalvm.compiler.serviceprovider.GraalServices#getExecutionID()->String:::Gets a unique identifier for this execution such as a process ID or a #getGlobalTimeStamp() fixed timestamp.
org.graalvm.compiler.serviceprovider.GraalServices#getGlobalTimeStamp()->long:::Gets a time stamp for the current process
org.graalvm.compiler.serviceprovider.GraalServices#getThreadAllocatedBytes(long)->long:::Returns an approximation of the total amount of memory, in bytes, allocated in heap memory for the thread of the specified ID
org.graalvm.compiler.serviceprovider.GraalServices#getCurrentThreadAllocatedBytes()->long:::Convenience method for calling #getThreadAllocatedBytes(long) with the id of the current thread.
org.graalvm.compiler.serviceprovider.GraalServices#getCurrentThreadCpuTime()->long:::Returns the total CPU time for the current thread in nanoseconds
org.graalvm.compiler.serviceprovider.GraalServices#isThreadAllocatedMemorySupported()->boolean:::Determines if the Java virtual machine implementation supports thread memory allocation measurement.
org.graalvm.compiler.serviceprovider.GraalServices#isCurrentThreadCpuTimeSupported()->boolean:::Determines if the Java virtual machine supports CPU time measurement for the current thread.
org.graalvm.compiler.serviceprovider.GraalServices#getInputArguments()->List:::Gets the input arguments passed to the Java virtual machine which does not include the arguments to the main method
org.graalvm.compiler.serviceprovider.GraalServices#fma(float, float, float)->float:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float.
org.graalvm.compiler.serviceprovider.GraalServices#fma(double, double, double)->double:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double.
org.graalvm.compiler.serviceprovider.GraalServices#createVirtualObject(ResolvedJavaType, int, boolean)->VirtualObject::: graal services create virtual object
org.graalvm.compiler.serviceprovider.GraalUnsafeAccess#getUnsafe()->Unsafe:::Gets the Unsafe singleton.
org.graalvm.compiler.serviceprovider.JMXService#getThreadAllocatedBytes(long)->long::: service get thread allocated bytes
org.graalvm.compiler.serviceprovider.JMXService#getCurrentThreadCpuTime()->long::: service get current thread cpu time
org.graalvm.compiler.serviceprovider.JMXService#isThreadAllocatedMemorySupported()->boolean::: service is thread allocated memory supported
org.graalvm.compiler.serviceprovider.JMXService#isCurrentThreadCpuTimeSupported()->boolean::: service is current thread cpu time supported
org.graalvm.compiler.serviceprovider.JMXService#getInputArguments()->List::: service get input arguments
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup#toString()->String::: speculation reason group to string
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup#createSpeculationReason(Object...)->SpeculationReason:::Creates a speculation reason described by this group.
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup#toBox(Class)->Class::: speculation reason group to box
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject#accept(Visitor)->void::: speculation context object accept
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitBoolean(boolean)->void::: visitor visit boolean
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitByte(byte)->void::: visitor visit byte
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitChar(char)->void::: visitor visit char
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitShort(short)->void::: visitor visit short
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitInt(int)->void::: visitor visit int
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitLong(long)->void::: visitor visit long
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitFloat(float)->void::: visitor visit float
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitDouble(double)->void::: visitor visit double
org.graalvm.compiler.serviceprovider.SpeculationReasonGroup.SpeculationContextObject.Visitor#visitObject(Object)->void::: visitor visit object

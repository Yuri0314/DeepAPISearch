BufferUtil#asBaseBuffer(Buffer):::Coerces obj to be of type Buffer:::return
GraalServices#load(Class):::Gets an Iterable of the providers available for a given service.:::if->list->servicesCache->get->if->return->if->throw->String->service->getName->format->new->InternalError->providers->load0->if->synchronized->providersList->new->ArrayList<>->foreach->module->provider->getClass->getModule->if->module->isNamed->providersList->add->servicesCache->put->return->return
GraalServices#openJVMCITo(Class):::Opens all JVMCI packages to the module of a given class:::if->return->jvmciModule->otherModule->other->getModule->if->foreach->jvmciModule->getPackages->if->jvmciModule->isOpen->JVMCI->getRuntime->jvmciModule->addOpens
GraalServices#loadSingle(Class, boolean):::Gets the provider for a given service for which at most one provider must be available.:::providers->load->singleProvider->try->for->it->providers->iterator->it->hasNext->catch->finally->if->if->throw->String->service->getName->format->new->InternalError->return
GraalServices#getClassfileAsStream(Class):::Gets the class file bytes for c.:::classfilePath->c->getName->replace->return->c->getModule->getResourceAsStream
GraalServices#isToStringTrusted(Class):::Determines if invoking Object#toString() on an instance of c will only run trusted code.:::module->c->getModule->jvmciModule->if->jvmciModule->isOpen->return->return
GraalServices#getExecutionID():::Gets a unique identifier for this execution such as a process ID or a #getGlobalTimeStamp() fixed timestamp.:::return->Long->ProcessHandle->current->pid->toString
GraalServices#getGlobalTimeStamp():::Gets a time stamp for the current process:::if->globalTimeStamp->get->globalTimeStamp->System->currentTimeMillis->compareAndSet->return->globalTimeStamp->get
GraalServices#getThreadAllocatedBytes(long):::Returns an approximation of the total amount of memory, in bytes, allocated in heap memory for the thread of the specified ID:::jmx->if->throw->new->UnsupportedOperationException->return->jmx->getThreadAllocatedBytes
GraalServices#getCurrentThreadAllocatedBytes():::Convenience method for calling #getThreadAllocatedBytes(long) with the id of the current thread.:::return->currentThread->getId->getThreadAllocatedBytes
GraalServices#getCurrentThreadCpuTime():::Returns the total CPU time for the current thread in nanoseconds:::jmx->if->throw->new->UnsupportedOperationException->return->jmx->getCurrentThreadCpuTime
GraalServices#isThreadAllocatedMemorySupported():::Determines if the Java virtual machine implementation supports thread memory allocation measurement.:::jmx->if->return->return->jmx->isThreadAllocatedMemorySupported
GraalServices#isCurrentThreadCpuTimeSupported():::Determines if the Java virtual machine supports CPU time measurement for the current thread.:::jmx->if->return->return->jmx->isCurrentThreadCpuTimeSupported
GraalServices#getInputArguments():::Gets the input arguments passed to the Java virtual machine which does not include the arguments to the main method:::jmx->if->return->return->jmx->getInputArguments
GraalServices#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float.:::return->Math->fma
GraalServices#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double.:::return->Math->fma
GraalUnsafeAccess#getUnsafe():::Gets the Unsafe singleton.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return
SpeculationReasonGroup#createSpeculationReason(Object...):::Creates a speculation reason described by this group.:::return->GraalServices->createSpeculationReason

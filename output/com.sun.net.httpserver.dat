com.sun.net.httpserver.Authenticator.Failure#getResponseCode()->int:::returns the response code to send to the client
com.sun.net.httpserver.Authenticator.Success#getPrincipal()->HttpPrincipal:::returns the authenticated user Principal
com.sun.net.httpserver.Authenticator.Retry#getResponseCode()->int:::returns the response code to send to the client
com.sun.net.httpserver.Authenticator#authenticate(HttpExchange)->Result:::called to authenticate each incoming request
com.sun.net.httpserver.BasicAuthenticator#getRealm()->String:::returns the realm this BasicAuthenticator was created with
com.sun.net.httpserver.BasicAuthenticator#authenticate(HttpExchange)->Result::: basic authenticator authenticate
com.sun.net.httpserver.BasicAuthenticator#checkCredentials(String, String)->boolean:::called for each incoming request to verify the given name and password in the context of this Authenticator's realm
com.sun.net.httpserver.Filter.Chain#doFilter(HttpExchange)->void:::calls the next filter in the chain, or else the users exchange handler, if this is the final filter in the chain
com.sun.net.httpserver.Filter#doFilter(HttpExchange, Chain)->void:::Asks this filter to pre/post-process the given exchange
com.sun.net.httpserver.Filter#description()->String:::returns a short description of this Filter
com.sun.net.httpserver.Headers#size()->int::: headers size
com.sun.net.httpserver.Headers#isEmpty()->boolean::: headers is empty
com.sun.net.httpserver.Headers#containsKey(Object)->boolean::: headers contains key
com.sun.net.httpserver.Headers#containsValue(Object)->boolean::: headers contains value
com.sun.net.httpserver.Headers#get(Object)->List::: headers get
com.sun.net.httpserver.Headers#getFirst(String)->String:::returns the first value from the List of String values for the given key (if at least one exists).
com.sun.net.httpserver.Headers#put(String, List)->List::: headers put
com.sun.net.httpserver.Headers#add(String, String)->void:::adds the given value to the list of headers for the given key
com.sun.net.httpserver.Headers#set(String, String)->void:::sets the given value as the sole header value for the given key
com.sun.net.httpserver.Headers#remove(Object)->List::: headers remove
com.sun.net.httpserver.Headers#putAll(Map>)->void::: headers put all
com.sun.net.httpserver.Headers#clear()->void::: headers clear
com.sun.net.httpserver.Headers#keySet()->Set::: headers key set
com.sun.net.httpserver.Headers#values()->Collection>::: headers values
com.sun.net.httpserver.Headers#entrySet()->Set>>::: headers entry set
com.sun.net.httpserver.Headers#equals(Object)->boolean::: headers equals
com.sun.net.httpserver.Headers#hashCode()->int::: headers hash code
com.sun.net.httpserver.HttpContext#getHandler()->HttpHandler:::returns the handler for this context
com.sun.net.httpserver.HttpContext#setHandler(HttpHandler)->void:::Sets the handler for this context, if not already set.
com.sun.net.httpserver.HttpContext#getPath()->String:::returns the path this context was created with
com.sun.net.httpserver.HttpContext#getServer()->HttpServer:::returns the server this context was created with
com.sun.net.httpserver.HttpContext#getAttributes()->Map:::returns a mutable Map, which can be used to pass configuration and other data to Filter modules and to the context's exchange handler
com.sun.net.httpserver.HttpContext#getFilters()->List:::returns this context's list of Filters
com.sun.net.httpserver.HttpContext#setAuthenticator(Authenticator)->Authenticator:::Sets the Authenticator for this HttpContext
com.sun.net.httpserver.HttpContext#getAuthenticator()->Authenticator:::Returns the currently set Authenticator for this context if one exists.
com.sun.net.httpserver.HttpExchange#getRequestHeaders()->Headers:::Returns an immutable Map containing the HTTP headers that were included with this request
com.sun.net.httpserver.HttpExchange#getResponseHeaders()->Headers:::Returns a mutable Map into which the HTTP response headers can be stored and which will be transmitted as part of this response
com.sun.net.httpserver.HttpExchange#getRequestURI()->URI:::Get the request URI
com.sun.net.httpserver.HttpExchange#getRequestMethod()->String:::Get the request method
com.sun.net.httpserver.HttpExchange#getHttpContext()->HttpContext:::Get the HttpContext for this exchange
com.sun.net.httpserver.HttpExchange#close()->void:::Ends this exchange by doing the following in sequence:<ol> <li>close the request InputStream, if not already closed;</li> <li>close the response OutputStream, if not already closed.</li> </ol>
com.sun.net.httpserver.HttpExchange#getRequestBody()->InputStream:::returns a stream from which the request body can be read
com.sun.net.httpserver.HttpExchange#getResponseBody()->OutputStream:::returns a stream to which the response body must be written
com.sun.net.httpserver.HttpExchange#sendResponseHeaders(int, long)->void:::Starts sending the response back to the client using the current set of response headers and the numeric response code as specified in this method
com.sun.net.httpserver.HttpExchange#getRemoteAddress()->InetSocketAddress:::Returns the address of the remote entity invoking this request
com.sun.net.httpserver.HttpExchange#getResponseCode()->int:::Returns the response code, if it has already been set
com.sun.net.httpserver.HttpExchange#getLocalAddress()->InetSocketAddress:::Returns the local address on which the request was received
com.sun.net.httpserver.HttpExchange#getProtocol()->String:::Returns the protocol string from the request in the form protocol/majorVersion.minorVersion
com.sun.net.httpserver.HttpExchange#getAttribute(String)->Object:::Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism
com.sun.net.httpserver.HttpExchange#setAttribute(String, Object)->void:::Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism
com.sun.net.httpserver.HttpExchange#setStreams(InputStream, OutputStream)->void:::Used by Filters to wrap either (or both) of this exchange's InputStream and OutputStream, with the given filtered streams so that subsequent calls to #getRequestBody() will return the given java.io.InputStream, and calls to #getResponseBody() will return the given java.io.OutputStream
com.sun.net.httpserver.HttpExchange#getPrincipal()->HttpPrincipal:::If an authenticator is set on the HttpContext that owns this exchange, then this method will return the HttpPrincipal that represents the authenticated user for this HttpExchange.
com.sun.net.httpserver.HttpHandler#handle(HttpExchange)->void:::Handle the given request and generate an appropriate response
com.sun.net.httpserver.HttpPrincipal#equals(Object)->boolean:::Compares two HttpPrincipal
com.sun.net.httpserver.HttpPrincipal#getName()->String:::returns the contents of this principal in the form realm:username
com.sun.net.httpserver.HttpPrincipal#getUsername()->String:::returns the username this object was created with.
com.sun.net.httpserver.HttpPrincipal#getRealm()->String:::returns the realm this object was created with.
com.sun.net.httpserver.HttpPrincipal#hashCode()->int:::returns a hashcode for this HttpPrincipal
com.sun.net.httpserver.HttpPrincipal#toString()->String:::returns the same string as getName()
com.sun.net.httpserver.HttpsConfigurator#getSSLContext()->SSLContext:::Returns the SSLContext for this HttpsConfigurator.
com.sun.net.httpserver.HttpsConfigurator#configure(HttpsParameters)->void:::Called by the HttpsServer to configure the parameters for a https connection currently being established
com.sun.net.httpserver.HttpServer#create()->HttpServer:::creates a HttpServer instance which is initially not bound to any local address/port
com.sun.net.httpserver.HttpServer#create(InetSocketAddress, int)->HttpServer::: http server create
com.sun.net.httpserver.HttpServer#bind(InetSocketAddress, int)->void:::Binds a currently unbound HttpServer to the given address and port number
com.sun.net.httpserver.HttpServer#start()->void:::Starts this server in a new background thread
com.sun.net.httpserver.HttpServer#setExecutor(Executor)->void:::sets this server's java.util.concurrent.Executor object
com.sun.net.httpserver.HttpServer#getExecutor()->Executor:::returns this server's Executor object if one was specified with #setExecutor(Executor), or null if none was specified.
com.sun.net.httpserver.HttpServer#stop(int)->void:::stops this server by closing the listening socket and disallowing any new exchanges from being processed
com.sun.net.httpserver.HttpServer#createContext(String, HttpHandler)->HttpContext:::Creates a HttpContext
com.sun.net.httpserver.HttpServer#createContext(String)->HttpContext:::Creates a HttpContext without initially specifying a handler
com.sun.net.httpserver.HttpServer#removeContext(String)->void:::Removes the context identified by the given path from the server
com.sun.net.httpserver.HttpServer#removeContext(HttpContext)->void:::Removes the given context from the server
com.sun.net.httpserver.HttpServer#getAddress()->InetSocketAddress:::returns the address this server is listening on
com.sun.net.httpserver.HttpsExchange#getSSLSession()->SSLSession:::Get the SSLSession for this exchange.
com.sun.net.httpserver.HttpsParameters#getHttpsConfigurator()->HttpsConfigurator:::Returns the HttpsConfigurator for this HttpsParameters.
com.sun.net.httpserver.HttpsParameters#getClientAddress()->InetSocketAddress:::Returns the address of the remote client initiating the connection.
com.sun.net.httpserver.HttpsParameters#setSSLParameters(SSLParameters)->void:::Sets the SSLParameters to use for this HttpsParameters
com.sun.net.httpserver.HttpsParameters#getCipherSuites()->String[]:::Returns a copy of the array of ciphersuites or null if none have been set.
com.sun.net.httpserver.HttpsParameters#setCipherSuites(String[])->void:::Sets the array of ciphersuites.
com.sun.net.httpserver.HttpsParameters#getProtocols()->String[]:::Returns a copy of the array of protocols or null if none have been set.
com.sun.net.httpserver.HttpsParameters#setProtocols(String[])->void:::Sets the array of protocols.
com.sun.net.httpserver.HttpsParameters#getWantClientAuth()->boolean:::Returns whether client authentication should be requested.
com.sun.net.httpserver.HttpsParameters#setWantClientAuth(boolean)->void:::Sets whether client authentication should be requested
com.sun.net.httpserver.HttpsParameters#getNeedClientAuth()->boolean:::Returns whether client authentication should be required.
com.sun.net.httpserver.HttpsParameters#setNeedClientAuth(boolean)->void:::Sets whether client authentication should be required
com.sun.net.httpserver.HttpsServer#create()->HttpsServer:::creates a HttpsServer instance which is initially not bound to any local address/port
com.sun.net.httpserver.HttpsServer#create(InetSocketAddress, int)->HttpsServer::: https server create
com.sun.net.httpserver.HttpsServer#setHttpsConfigurator(HttpsConfigurator)->void:::Sets this server's HttpsConfigurator object.
com.sun.net.httpserver.HttpsServer#getHttpsConfigurator()->HttpsConfigurator:::Gets this server's HttpsConfigurator object, if it has been set.

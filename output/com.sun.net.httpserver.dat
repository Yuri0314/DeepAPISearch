Authenticator.Failure#getResponseCode():::returns the response code to send to the client:::return
Authenticator.Success#getPrincipal():::returns the authenticated user Principal:::return
Authenticator.Retry#getResponseCode():::returns the response code to send to the client:::return
Authenticator#authenticate(HttpExchange):::called to authenticate each incoming request:::
BasicAuthenticator#getRealm():::returns the realm this BasicAuthenticator was created with:::return
BasicAuthenticator#authenticate(HttpExchange)::: basic authenticator authenticate:::rmap->t->getRequestHeaders->auth->rmap->getFirst->if->map->t->getResponseHeaders->map->set->return->new->Authenticator.Retry->sp->auth->indexOf->if->auth->substring->equals->return->new->Authenticator.Failure->b->Base64->getDecoder->auth->substring->decode->userpass->new->String->colon->userpass->indexOf->uname->userpass->substring->pass->userpass->substring->if->checkCredentials->return->new->HttpPrincipal->new->Authenticator.Success->else->map->t->getResponseHeaders->map->set->return->new->Authenticator.Failure
BasicAuthenticator#checkCredentials(String, String):::called for each incoming request to verify the given name and password in the context of this Authenticator's realm:::
Filter.Chain#doFilter(HttpExchange):::calls the next filter in the chain, or else the users exchange handler, if this is the final filter in the chain:::if->iter->hasNext->handler->handle->else->f->iter->next->f->doFilter
Filter#doFilter(HttpExchange, Chain):::Asks this filter to pre/post-process the given exchange:::
Filter#description():::returns a short description of this Filter:::
Headers#normalize(String)::: headers normalize:::if->return->len->key->length->if->return->b->key->toCharArray->if->else->if->throw->new->IllegalArgumentException->for->i->return->new->String
Headers#size()::: headers size:::return->map->size
Headers#isEmpty()::: headers is empty:::return->map->isEmpty
Headers#containsKey(Object)::: headers contains key:::if->return->if->return->return->map->normalize->containsKey
Headers#containsValue(Object)::: headers contains value:::return->map->containsValue
Headers#get(Object)::: headers get:::return->map->normalize->get
Headers#getFirst(String):::returns the first value from the List of String values for the given key (if at least one exists).:::l->map->normalize->get->if->return->return->l->get
Headers#put(String, List)::: headers put:::foreach->checkValue->return->map->normalize->put
Headers#add(String, String):::adds the given value to the list of headers for the given key:::checkValue->k->normalize->l->map->get->if->new->LinkedList<String>->map->put->l->add
Headers#checkValue(String)::: headers check value:::len->value->length->for->i
Headers#set(String, String):::sets the given value as the sole header value for the given key:::l->new->LinkedList<String>->l->add->put
Headers#remove(Object)::: headers remove:::return->map->normalize->remove
Headers#putAll(Map>)::: headers put all:::map->putAll
Headers#clear()::: headers clear:::map->clear
Headers#keySet()::: headers key set:::return->map->keySet
Headers#values()::: headers values:::return->map->values
Headers#entrySet()::: headers entry set:::return->map->entrySet
Headers#equals(Object)::: headers equals:::return->map->equals
Headers#hashCode()::: headers hash code:::return->map->hashCode
HttpContext#getHandler():::returns the handler for this context:::
HttpContext#setHandler(HttpHandler):::Sets the handler for this context, if not already set.:::
HttpContext#getPath():::returns the path this context was created with:::
HttpContext#getServer():::returns the server this context was created with:::
HttpContext#getAttributes():::returns a mutable Map, which can be used to pass configuration and other data to Filter modules and to the context's exchange handler:::
HttpContext#getFilters():::returns this context's list of Filters:::
HttpContext#setAuthenticator(Authenticator):::Sets the Authenticator for this HttpContext:::
HttpContext#getAuthenticator():::Returns the currently set Authenticator for this context if one exists.:::
HttpExchange#getRequestHeaders():::Returns an immutable Map containing the HTTP headers that were included with this request:::
HttpExchange#getResponseHeaders():::Returns a mutable Map into which the HTTP response headers can be stored and which will be transmitted as part of this response:::
HttpExchange#getRequestURI():::Get the request URI:::
HttpExchange#getRequestMethod():::Get the request method:::
HttpExchange#getHttpContext():::Get the HttpContext for this exchange:::
HttpExchange#close():::Ends this exchange by doing the following in sequence:<ol> <li>close the request InputStream, if not already closed;</li> <li>close the response OutputStream, if not already closed.</li> </ol>:::
HttpExchange#getRequestBody():::returns a stream from which the request body can be read:::
HttpExchange#getResponseBody():::returns a stream to which the response body must be written:::
HttpExchange#sendResponseHeaders(int, long):::Starts sending the response back to the client using the current set of response headers and the numeric response code as specified in this method:::
HttpExchange#getRemoteAddress():::Returns the address of the remote entity invoking this request:::
HttpExchange#getResponseCode():::Returns the response code, if it has already been set:::
HttpExchange#getLocalAddress():::Returns the local address on which the request was received:::
HttpExchange#getProtocol():::Returns the protocol string from the request in the form protocol/majorVersion.minorVersion:::
HttpExchange#getAttribute(String):::Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism:::
HttpExchange#setAttribute(String, Object):::Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism:::
HttpExchange#setStreams(InputStream, OutputStream):::Used by Filters to wrap either (or both) of this exchange's InputStream and OutputStream, with the given filtered streams so that subsequent calls to #getRequestBody() will return the given java.io.InputStream, and calls to #getResponseBody() will return the given java.io.OutputStream:::
HttpExchange#getPrincipal():::If an authenticator is set on the HttpContext that owns this exchange, then this method will return the HttpPrincipal that represents the authenticated user for this HttpExchange.:::
HttpHandler#handle(HttpExchange):::Handle the given request and generate an appropriate response:::
HttpPrincipal#equals(Object):::Compares two HttpPrincipal:::if->return->theother->return->username->equals->realm->equals
HttpPrincipal#getName():::returns the contents of this principal in the form realm:username:::return
HttpPrincipal#getUsername():::returns the username this object was created with.:::return
HttpPrincipal#getRealm():::returns the realm this object was created with.:::return
HttpPrincipal#hashCode():::returns a hashcode for this HttpPrincipal:::return->hashCode
HttpPrincipal#toString():::returns the same string as getName():::return->getName
HttpsConfigurator#getSSLContext():::Returns the SSLContext for this HttpsConfigurator.:::return
HttpsConfigurator#configure(HttpsParameters):::Called by the HttpsServer to configure the parameters for a https connection currently being established:::params->getSSLContext->getDefaultSSLParameters->setSSLParameters
HttpServer#create():::creates a HttpServer instance which is initially not bound to any local address/port:::return->create
HttpServer#create(InetSocketAddress, int)::: http server create:::provider->HttpServerProvider->provider->return->provider->createHttpServer
HttpServer#bind(InetSocketAddress, int):::Binds a currently unbound HttpServer to the given address and port number:::
HttpServer#start():::Starts this server in a new background thread:::
HttpServer#setExecutor(Executor):::sets this server's java.util.concurrent.Executor object:::
HttpServer#getExecutor():::returns this server's Executor object if one was specified with #setExecutor(Executor), or null if none was specified.:::
HttpServer#stop(int):::stops this server by closing the listening socket and disallowing any new exchanges from being processed:::
HttpServer#createContext(String, HttpHandler):::Creates a HttpContext:::
HttpServer#createContext(String):::Creates a HttpContext without initially specifying a handler:::
HttpServer#removeContext(String):::Removes the context identified by the given path from the server:::
HttpServer#removeContext(HttpContext):::Removes the given context from the server:::
HttpServer#getAddress():::returns the address this server is listening on:::
HttpsExchange#getSSLSession():::Get the SSLSession for this exchange.:::
HttpsParameters#getHttpsConfigurator():::Returns the HttpsConfigurator for this HttpsParameters.:::
HttpsParameters#getClientAddress():::Returns the address of the remote client initiating the connection.:::
HttpsParameters#setSSLParameters(SSLParameters):::Sets the SSLParameters to use for this HttpsParameters:::
HttpsParameters#getCipherSuites():::Returns a copy of the array of ciphersuites or null if none have been set.:::return->cipherSuites->clone
HttpsParameters#setCipherSuites(String[]):::Sets the array of ciphersuites.:::cipherSuites->clone
HttpsParameters#getProtocols():::Returns a copy of the array of protocols or null if none have been set.:::return->protocols->clone
HttpsParameters#setProtocols(String[]):::Sets the array of protocols.:::protocols->clone
HttpsParameters#getWantClientAuth():::Returns whether client authentication should be requested.:::return
HttpsParameters#setWantClientAuth(boolean):::Sets whether client authentication should be requested:::
HttpsParameters#getNeedClientAuth():::Returns whether client authentication should be required.:::return
HttpsParameters#setNeedClientAuth(boolean):::Sets whether client authentication should be required:::
HttpsServer#create():::creates a HttpsServer instance which is initially not bound to any local address/port:::return->create
HttpsServer#create(InetSocketAddress, int)::: https server create:::provider->HttpServerProvider->provider->return->provider->createHttpsServer
HttpsServer#setHttpsConfigurator(HttpsConfigurator):::Sets this server's HttpsConfigurator object.:::
HttpsServer#getHttpsConfigurator():::Gets this server's HttpsConfigurator object, if it has been set.:::

Attr#getName():::Returns the name of this attribute:::
Attr#getSpecified()::: True if this attribute was explicitly given a value in the instance document, false otherwise:::
Attr#getValue():::On retrieval, the value of the attribute is returned as a string:::
Attr#setValue(String):::On retrieval, the value of the attribute is returned as a string:::
Attr#getOwnerElement():::The Element node this attribute is attached to or null if this attribute is not in use.:::
Attr#getSchemaTypeInfo()::: The type information associated with this attribute:::
Attr#isId()::: Returns whether this attribute is known to be of type ID (i.e:::
CharacterData#getData():::The character data of the node that implements this interface:::
CharacterData#setData(String):::The character data of the node that implements this interface:::
CharacterData#getLength():::The number of 16-bit units that are available through data and the substringData method below:::
CharacterData#substringData(int, int):::Extracts a range of data from the node.:::
CharacterData#appendData(String):::Append the string to the end of the character data of the node:::
CharacterData#insertData(int, String):::Insert a string at the specified 16-bit unit offset.:::
CharacterData#deleteData(int, int):::Remove a range of 16-bit units from the node:::
CharacterData#replaceData(int, int, String):::Replace the characters starting at the specified 16-bit unit offset with the specified string.:::
Document#getDoctype():::The Document Type Declaration (see DocumentType) associated with this document:::
Document#getImplementation():::The DOMImplementation object that handles this document:::
Document#getDocumentElement():::This is a convenience attribute that allows direct access to the child node that is the document element of the document.:::
Document#createElement(String):::Creates an element of the type specified:::
Document#createDocumentFragment():::Creates an empty DocumentFragment object.:::
Document#createTextNode(String):::Creates a Text node given the specified string.:::
Document#createComment(String):::Creates a Comment node given the specified string.:::
Document#createCDATASection(String):::Creates a CDATASection node whose value is the specified string.:::
Document#createProcessingInstruction(String, String):::Creates a ProcessingInstruction node given the specified name and data strings.:::
Document#createAttribute(String):::Creates an Attr of the given name:::
Document#createEntityReference(String):::Creates an EntityReference object:::
Document#getElementsByTagName(String):::Returns a NodeList of all the Elements in document order with a given tag name and are contained in the document.:::
Document#importNode(Node, boolean):::Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node:::
Document#createElementNS(String, String):::Creates an element of the given qualified name and namespace URI:::
Document#createAttributeNS(String, String):::Creates an attribute of the given qualified name and namespace URI:::
Document#getElementsByTagNameNS(String, String):::Returns a NodeList of all the Elements with a given local name and namespace URI in document order.:::
Document#getElementById(String):::Returns the Element that has an ID attribute with the given value:::
Document#getInputEncoding():::An attribute specifying the encoding used for this document at the time of the parsing:::
Document#getXmlEncoding():::An attribute specifying, as part of the XML declaration, the encoding of this document:::
Document#getXmlStandalone():::An attribute specifying, as part of the XML declaration, whether this document is standalone:::
Document#setXmlStandalone(boolean):::An attribute specifying, as part of the XML declaration, whether this document is standalone:::
Document#getXmlVersion()::: An attribute specifying, as part of the XML declaration, the version number of this document:::
Document#setXmlVersion(String)::: An attribute specifying, as part of the XML declaration, the version number of this document:::
Document#getStrictErrorChecking():::An attribute specifying whether error checking is enforced or not:::
Document#setStrictErrorChecking(boolean):::An attribute specifying whether error checking is enforced or not:::
Document#getDocumentURI()::: The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument:::
Document#setDocumentURI(String)::: The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument:::
Document#adoptNode(Node)::: Attempts to adopt a node from another document to this document:::
Document#getDomConfig()::: The configuration used when Document.normalizeDocument() is invoked.:::
Document#normalizeDocument()::: This method acts as if the document was going through a save and load cycle, putting the document in a "normal" form:::
Document#renameNode(Node, String, String):::Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE:::
DocumentType#getName():::The name of DTD; i.e., the name immediately following the DOCTYPE keyword.:::
DocumentType#getEntities():::A NamedNodeMap containing the general entities, both external and internal, declared in the DTD:::
DocumentType#getNotations():::A NamedNodeMap containing the notations declared in the DTD:::
DocumentType#getPublicId():::The public identifier of the external subset.:::
DocumentType#getSystemId():::The system identifier of the external subset:::
DocumentType#getInternalSubset():::The internal subset as a string, or null if there is none:::
DOMConfiguration#setParameter(String, Object):::Set the value of a parameter.:::
DOMConfiguration#getParameter(String)::: Return the value of a parameter if known.:::
DOMConfiguration#canSetParameter(String, Object):::Check if setting a parameter to a specific value is supported.:::
DOMConfiguration#getParameterNames()::: The list of the parameters supported by this DOMConfiguration object and for which at least one value can be set by the application:::
DOMError#getSeverity():::The severity of the error, either SEVERITY_WARNING, SEVERITY_ERROR, or SEVERITY_FATAL_ERROR.:::
DOMError#getMessage():::An implementation specific string describing the error that occurred.:::
DOMError#getType()::: A DOMString indicating which related data is expected in relatedData:::
DOMError#getRelatedException():::The related platform dependent exception if any.:::
DOMError#getRelatedData()::: The related DOMError.type dependent data if any.:::
DOMError#getLocation():::The location of the error.:::
DOMErrorHandler#handleError(DOMError):::This method is called on the error handler when an error occurs:::
DOMImplementation#hasFeature(String, String):::Test if the DOM implementation implements a specific feature and version, as specified in DOM Features.:::
DOMImplementation#createDocumentType(String, String, String):::Creates an empty DocumentType node:::
DOMImplementation#createDocument(String, String, DocumentType):::Creates a DOM Document object of the specified type with its document element:::
DOMImplementation#getFeature(String, String)::: This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in DOM Features:::
DOMImplementationList#item(int)::: Returns the indexth item in the collection:::
DOMImplementationList#getLength()::: The number of DOMImplementations in the list:::
DOMImplementationSource#getDOMImplementation(String)::: A method to request the first DOM implementation that supports the specified features.:::
DOMImplementationSource#getDOMImplementationList(String):::A method to request a list of DOM implementations that support the specified features and versions, as specified in .:::
DOMLocator#getLineNumber():::The line number this locator is pointing to, or -1 if there is no column number available.:::
DOMLocator#getColumnNumber():::The column number this locator is pointing to, or -1 if there is no column number available.:::
DOMLocator#getByteOffset():::The byte offset into the input source this locator is pointing to or -1 if there is no byte offset available.:::
DOMLocator#getUtf16Offset():::The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or -1 if there is no UTF-16 offset available.:::
DOMLocator#getRelatedNode():::The node this locator is pointing to, or null if no node is available.:::
DOMLocator#getUri():::The URI this locator is pointing to, or null if no URI is available.:::
DOMStringList#item(int)::: Returns the indexth item in the collection:::
DOMStringList#getLength():::The number of DOMStrings in the list:::
DOMStringList#contains(String)::: Test if a string is part of this DOMStringList.:::
Element#getTagName():::The name of the element:::
Element#getAttribute(String):::Retrieves an attribute value by name.:::
Element#setAttribute(String, String):::Adds a new attribute:::
Element#removeAttribute(String):::Removes an attribute by name:::
Element#getAttributeNode(String):::Retrieves an attribute node by name:::
Element#setAttributeNode(Attr):::Adds a new attribute node:::
Element#removeAttributeNode(Attr):::Removes the specified attribute node:::
Element#getElementsByTagName(String):::Returns a NodeList of all descendant Elements with a given tag name, in document order.:::
Element#getAttributeNS(String, String):::Retrieves an attribute value by local name and namespace URI:::
Element#setAttributeNS(String, String, String):::Adds a new attribute:::
Element#removeAttributeNS(String, String):::Removes an attribute by local name and namespace URI:::
Element#getAttributeNodeNS(String, String):::Retrieves an Attr node by local name and namespace URI:::
Element#setAttributeNodeNS(Attr):::Adds a new attribute:::
Element#getElementsByTagNameNS(String, String):::Returns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.:::
Element#hasAttribute(String):::Returns true when an attribute with a given name is specified on this element or has a default value, false otherwise.:::
Element#hasAttributeNS(String, String):::Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise:::
Element#getSchemaTypeInfo()::: The type information associated with this element.:::
Element#setIdAttribute(String, boolean)::: If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute :::
Element#setIdAttributeNS(String, String, boolean)::: If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute :::
Element#setIdAttributeNode(Attr, boolean)::: If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute :::
ElementTraversal#getFirstElementChild():::Returns a reference to the first child node of the element which is of the Element type.:::
ElementTraversal#getLastElementChild():::Returns a reference to the last child node of the element which is of the Element type.:::
ElementTraversal#getPreviousElementSibling():::Returns a reference to the sibling node of the element which most immediately precedes the element in document order, and which is of the Element type.:::
ElementTraversal#getNextElementSibling():::Returns a reference to the sibling node of the element which most immediately follows the element in document order, and which is of the Element type.:::
ElementTraversal#getChildElementCount():::Returns the current number of child nodes of the element which are of the Element type.:::
Entity#getPublicId():::The public identifier associated with the entity if specified, and null otherwise.:::
Entity#getSystemId():::The system identifier associated with the entity if specified, and null otherwise:::
Entity#getNotationName():::For unparsed entities, the name of the notation for the entity:::
Entity#getInputEncoding():::An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity:::
Entity#getXmlEncoding():::An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity:::
Entity#getXmlVersion():::An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity:::
NamedNodeMap#getNamedItem(String):::Retrieves a node specified by name.:::
NamedNodeMap#setNamedItem(Node):::Adds a node using its nodeName attribute:::
NamedNodeMap#removeNamedItem(String):::Removes a node specified by name:::
NamedNodeMap#item(int):::Returns the indexth item in the map:::
NamedNodeMap#getLength():::The number of nodes in this map:::
NamedNodeMap#getNamedItemNS(String, String):::Retrieves a node specified by local name and namespace URI:::
NamedNodeMap#setNamedItemNS(Node):::Adds a node using its namespaceURI and localName:::
NamedNodeMap#removeNamedItemNS(String, String):::Removes a node specified by local name and namespace URI:::
NameList#getName(int)::: Returns the indexth name item in the collection.:::
NameList#getNamespaceURI(int)::: Returns the indexth namespaceURI item in the collection.:::
NameList#getLength()::: The number of pairs (name and namespaceURI) in the list:::
NameList#contains(String)::: Test if a name is part of this NameList.:::
NameList#containsNS(String, String)::: Test if the pair namespaceURI/name is part of this NameList.:::
Node#getNodeName():::The name of this node, depending on its type; see the table above.:::
Node#getNodeValue():::The value of this node, depending on its type; see the table above:::
Node#setNodeValue(String):::The value of this node, depending on its type; see the table above:::
Node#getNodeType():::A code representing the type of the underlying object, as defined above.:::
Node#getParentNode():::The parent of this node:::
Node#getChildNodes():::A NodeList that contains all children of this node:::
Node#getFirstChild():::The first child of this node:::
Node#getLastChild():::The last child of this node:::
Node#getPreviousSibling():::The node immediately preceding this node:::
Node#getNextSibling():::The node immediately following this node:::
Node#getAttributes():::A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.:::
Node#getOwnerDocument():::The Document object associated with this node:::
Node#insertBefore(Node, Node):::Inserts the node newChild before the existing child node refChild:::
Node#replaceChild(Node, Node):::Replaces the child node oldChild with newChild  in the list of children, and returns the oldChild node:::
Node#removeChild(Node):::Removes the child node indicated by oldChild from the list of children, and returns it.:::
Node#appendChild(Node):::Adds the node newChild to the end of the list of children of this node:::
Node#hasChildNodes():::Returns whether this node has any children.:::
Node#cloneNode(boolean):::Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes:::
Node#normalize()::: Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a "normal" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes:::
Node#isSupported(String, String)::: Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .:::
Node#getNamespaceURI():::The namespace URI of this node, or null if it is unspecified (see ):::
Node#getPrefix():::The namespace prefix of this node, or null if it is unspecified:::
Node#setPrefix(String):::The namespace prefix of this node, or null if it is unspecified:::
Node#getLocalName():::Returns the local part of the qualified name of this node:::
Node#hasAttributes():::Returns whether this node (if it is an element) has any attributes.:::
Node#getBaseURI():::The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::
Node#compareDocumentPosition(Node):::Compares the reference node, i.e:::
Node#getTextContent():::This attribute returns the text content of this node and its descendants:::
Node#setTextContent(String):::This attribute returns the text content of this node and its descendants:::
Node#isSameNode(Node):::Returns whether this node is the same node as the given one:::
Node#lookupPrefix(String):::Look up the prefix associated to the given namespace URI, starting from this node:::
Node#isDefaultNamespace(String)::: This method checks if the specified namespaceURI is the default namespace or not.:::
Node#lookupNamespaceURI(String):::Look up the namespace URI associated to the given prefix, starting from this node:::
Node#isEqualNode(Node):::Tests whether two nodes are equal:::
Node#getFeature(String, String)::: This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in :::
Node#setUserData(String, Object, UserDataHandler):::Associate an object to a key on this node:::
Node#getUserData(String):::Retrieves the object associated to a key on a this node:::
NodeList#item(int):::Returns the indexth item in the collection:::
NodeList#getLength():::The number of nodes in the list:::
Notation#getPublicId():::The public identifier of this notation:::
Notation#getSystemId():::The system identifier of this notation:::
ProcessingInstruction#getTarget():::The target of this processing instruction:::
ProcessingInstruction#getData():::The content of this processing instruction:::
ProcessingInstruction#setData(String):::The content of this processing instruction:::
Text#splitText(int):::Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings:::
Text#isElementContentWhitespace():::Returns whether this text node contains  element content whitespace, often abusively called "ignorable whitespace":::
Text#getWholeText():::Returns all text of Text nodes logically-adjacent text nodes to this node, concatenated in document order:::
Text#replaceWholeText(String):::Replaces the text of the current node and all logically-adjacent text nodes with the specified text:::
TypeInfo#getTypeName()::: The name of a type declared for the associated element or attribute, or null if unknown.:::
TypeInfo#getTypeNamespace()::: The namespace of the type declared for the associated element or attribute or null if the element does not have declaration or if no namespace information is available.:::
TypeInfo#isDerivedFrom(String, String, int)::: This method returns if there is a derivation between the reference type definition, i.e:::
UserDataHandler#handle(short, String, Object, Node, Node):::This method is called whenever the node for which this handler is registered is imported or cloned:::

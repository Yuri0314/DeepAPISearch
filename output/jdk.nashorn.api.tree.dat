ArrayAccessTree#getExpression():::Returns the array that is accessed.:::
ArrayAccessTree#getIndex():::Returns the index of the array element accessed.:::
ArrayLiteralTree#getElements():::Returns the list of Array element expressions.:::
AssignmentTree#getVariable():::Returns the left hand side (LHS) of this assignment.:::
AssignmentTree#getExpression():::Returns the right hand side (RHS) of this assignment.:::
BinaryTree#getLeftOperand():::Returns left hand side (LHS) of this binary expression.:::
BinaryTree#getRightOperand():::Returns right hand side (RHS) of this binary expression.:::
BlockTree#getStatements():::Returns the list of statements in this block.:::
BreakTree#getLabel():::Label associated with this break statement:::
CaseTree#getExpression():::Case expression of this 'case' statement.:::
CaseTree#getStatements():::Return the list of statements for this 'case'.:::
CatchTree#getParameter():::Returns the catch parameter identifier or parameter binding pattern of the exception caught.:::
CatchTree#getBlock():::Returns the code block of this catch block.:::
CatchTree#getCondition():::Returns the optional catch condition expression:::
ClassDeclarationTree#getName():::Class identifier.:::
ClassDeclarationTree#getClassHeritage():::The expression of the extends clause:::
ClassDeclarationTree#getConstructor():::Get the constructor method definition.:::
ClassDeclarationTree#getClassElements():::Get other property definitions except for the constructor.:::
ClassExpressionTree#getName():::Class identifier:::
ClassExpressionTree#getClassHeritage():::The expression of the extends clause:::
ClassExpressionTree#getConstructor():::Get the constructor method definition.:::
ClassExpressionTree#getClassElements():::Get other property definitions except for the constructor.:::
CompilationUnitTree#getSourceElements():::Return the list of source elements in this compilation unit.:::
CompilationUnitTree#getSourceName():::Return the source name of this script compilation unit.:::
CompilationUnitTree#isStrict():::Returns if this is a ECMAScript "strict" compilation unit or not.:::
CompilationUnitTree#getLineMap():::Returns the line map for this compilation unit, if available:::
CompilationUnitTree#getModule():::Return the ModuleTree associated with this compilation unit:::
CompoundAssignmentTree#getVariable():::Returns the left hand side (LHS) of this assignment.:::
CompoundAssignmentTree#getExpression():::Returns the right hand side (RHS) of this assignment.:::
ConditionalExpressionTree#getCondition():::Returns the condition expression of this ternary expression.:::
ConditionalExpressionTree#getTrueExpression():::Returns the true part of this ternary expression.:::
ConditionalExpressionTree#getFalseExpression():::Returns the false part of this ternary expression.:::
ConditionalLoopTree#getCondition():::Returns the condition expression of this 'loop' statement.:::
ContinueTree#getLabel():::Label associated with this continue statement:::
Diagnostic#getKind():::Gets the kind of this diagnostic, for example, error or warning.:::
Diagnostic#getPosition():::Gets a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem:::
Diagnostic#getFileName():::Gets the source file name.:::
Diagnostic#getLineNumber():::Gets the line number of the character offset returned by #getPosition().:::
Diagnostic#getColumnNumber():::Gets the column number of the character offset returned by #getPosition().:::
Diagnostic#getCode():::Gets a diagnostic code indicating the type of diagnostic:::
Diagnostic#getMessage():::Gets a message for this diagnostic.:::
DiagnosticListener#report(Diagnostic):::Invoked whenever a parsing problem is found.:::
DoWhileLoopTree#getCondition():::Returns the condition expression of this do-while statement.:::
DoWhileLoopTree#getStatement():::The statement contained within this do-while statement.:::
ExportEntryTree#getExportName():::Returns the entry's export name.:::
ExportEntryTree#getModuleRequest():::Returns the entry's module request.:::
ExportEntryTree#getImportName():::Returns the entry's import name.:::
ExportEntryTree#getLocalName():::Returns the entry's local name.:::
ExpressionStatementTree#getExpression():::Returns the expression of this expression statement.:::
ForInLoopTree#getVariable():::The for..in left hand side expression.:::
ForInLoopTree#getExpression():::The object or array being whose properties are iterated.:::
ForInLoopTree#getStatement():::The statement contained in this for..in statement.:::
ForInLoopTree#isForEach():::Returns if this is a for..each..in statement or not.:::
ForLoopTree#getInitializer():::Returns the initializer expression of this 'for' statement.:::
ForLoopTree#getCondition():::Returns the condition expression of this 'for' statement.:::
ForLoopTree#getUpdate():::Returns the update expression of this 'for' statement.:::
ForLoopTree#getStatement():::Returns the statement contained in this 'for' statement.:::
ForOfLoopTree#getVariable():::The for..of left hand side expression.:::
ForOfLoopTree#getExpression():::The object or array being whose properties are iterated.:::
ForOfLoopTree#getStatement():::The statement contained in this for..of statement.:::
FunctionCallTree#getFunctionSelect():::Returns the function being called.:::
FunctionCallTree#getArguments():::Returns the list of arguments being passed to this function call.:::
FunctionDeclarationTree#getName():::Returns the name of the function being declared.:::
FunctionDeclarationTree#getParameters():::Returns the parameters of this function.:::
FunctionDeclarationTree#getBody():::Returns the body of code of this function.:::
FunctionDeclarationTree#isStrict():::Is this a strict function?:::
FunctionDeclarationTree#isGenerator():::Is this a generator function?:::
FunctionExpressionTree#getName():::Returns the name of the function being declared.:::
FunctionExpressionTree#getParameters():::Returns the parameters of this function.:::
FunctionExpressionTree#getBody():::Returns the body of this function:::
FunctionExpressionTree#isStrict():::Is this a strict function?:::
FunctionExpressionTree#isArrow():::Is this a arrow function?:::
FunctionExpressionTree#isGenerator():::Is this a generator function?:::
GotoTree#getLabel():::Label associated with this goto statement:::
IdentifierTree#getName():::Returns the name of this identifier.:::
IdentifierTree#isRestParameter():::Is this a rest parameter for a function or rest elements of an array?:::
IdentifierTree#isSuper():::Is this super identifier?:::
IdentifierTree#isThis():::Is this 'this' identifier?:::
IdentifierTree#isStar():::Is this "*" used in module export entry?:::
IdentifierTree#isDefault():::Is this "default" used in module export entry?:::
IdentifierTree#isStarDefaultStar():::Is this "*default*" used in module export entry?:::
IfTree#getCondition():::Returns the condition expression of this 'if' statement.:::
IfTree#getThenStatement():::Returns the 'then' statement of this 'if' statement.:::
IfTree#getElseStatement():::Returns the then statement of this 'if' statement:::
ImportEntryTree#getModuleRequest():::Returns the entry's module request.:::
ImportEntryTree#getImportName():::Returns the entry's import name.:::
ImportEntryTree#getLocalName():::Returns the entry's local name.:::
InstanceOfTree#getExpression():::Returns the expression whose type is being checked.:::
InstanceOfTree#getType():::Returns the type expression.:::
IRTranslator#enterClassNode(ClassNode):::Callback for entering a ClassNode:::className->classNode->getIdent->translateIdent->classNode->getClassHeritage->translateExpr->classNode->getConstructor->translateProperty->classNode->getClassElements->translateProperties->new->ClassExpressionTreeImpl->return
LabeledStatementTree#getLabel():::Returns the label associated with this statement.:::
LabeledStatementTree#getStatement():::Returns the statement being labeled.:::
LineMap#getLineNumber(long):::Find the line containing a position; a line termination character is on the line it terminates.:::
LineMap#getColumnNumber(long):::Find the column for a character position:::
LiteralTree#getValue():::Returns the value of this literal.:::
LoopTree#getStatement():::Returns the statement contained in this 'loop' statement.:::
MemberSelectTree#getExpression():::The object expression whose member is being selected.:::
MemberSelectTree#getIdentifier():::Returns the name of the property.:::
ModuleTree#getImportEntries():::Returns the list of import entries.:::
ModuleTree#getLocalExportEntries():::Returns the list of local export entries.:::
ModuleTree#getIndirectExportEntries():::Returns the list of indirect export entries.:::
ModuleTree#getStarExportEntries():::Returns the list of star export entries.:::
NewTree#getConstructorExpression():::Returns the constructor expression of this 'new' expression.:::
ObjectLiteralTree#getProperties():::Returns the list of properties of this object literal.:::
ParenthesizedTree#getExpression():::Returns the expression within the parenthesis.:::
Parser#parse(File, DiagnosticListener):::Parses the source file and returns compilation unit tree:::
Parser#parse(Path, DiagnosticListener):::Parses the source Path and returns compilation unit tree:::
Parser#parse(URL, DiagnosticListener):::Parses the source url and returns compilation unit tree:::
Parser#parse(String, Reader, DiagnosticListener):::Parses the reader and returns compilation unit tree:::
Parser#parse(String, String, DiagnosticListener):::Parses the string source and returns compilation unit tree:::
Parser#parse(ScriptObjectMirror, DiagnosticListener):::Parses the source from script object and returns compilation unit tree:::
Parser#create(String...):::Factory method to create a new instance of Parser.:::options->getClass->foreach->switch->break->throw->new->IllegalArgumentException->return->new->ParserImpl
PropertyTree#getKey():::Returns the name of this property.:::
PropertyTree#getValue():::Returns the value of this property:::
PropertyTree#getGetter():::Returns the setter function of this property if this is an accessor property:::
PropertyTree#getSetter():::Returns the getter function of this property if this is an accessor property:::
PropertyTree#isStatic():::Is this a class static property?:::
PropertyTree#isComputed():::Is this a computed property?:::
RegExpLiteralTree#getPattern():::Regular expression pattern to match.:::
RegExpLiteralTree#getOptions():::Regular expression matching options.:::
ReturnTree#getExpression():::Returns the expression being returned:::
SimpleTreeVisitorES5_1#visitModule(ModuleTree, P):::Visits a ModuleTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitExportEntry(ExportEntryTree, P):::Visits an ExportEntryTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitImportEntry(ImportEntryTree, P):::Visits an ImportEntryTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitClassDeclaration(ClassDeclarationTree, P):::Visits a ClassDeclarationTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitClassExpression(ClassExpressionTree, P):::Visits a ClassExpressionTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitForOfLoop(ForOfLoopTree, P):::Visits a ForOfLoopTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitTemplateLiteral(TemplateLiteralTree, P):::Visits a TemplateLiteralTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitSpread(SpreadTree, P):::Visits a SpreadTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitYield(YieldTree, P):::Visits a YieldTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES6#visitModule(ModuleTree, P):::Visit Module tree.:::node->getImportEntries->visitImportEntry->forEach->node->getLocalExportEntries->visitExportEntry->forEach->node->getIndirectExportEntries->visitExportEntry->forEach->node->getStarExportEntries->visitExportEntry->forEach->return
SimpleTreeVisitorES6#visitExportEntry(ExportEntryTree, P):::Visit Module ExportEntry tree.:::return
SimpleTreeVisitorES6#visitImportEntry(ImportEntryTree, P):::Visit Module ImportEntry tree.:::return
SimpleTreeVisitorES6#visitClassDeclaration(ClassDeclarationTree, P):::Visit class statement tree.:::node->getName->accept->heritage->node->getClassHeritage->if->heritage->accept->constructor->node->getConstructor->if->constructor->accept->elements->node->getClassElements->if->foreach->prop->accept->return
SimpleTreeVisitorES6#visitClassExpression(ClassExpressionTree, P):::Visit class expression tree.:::node->getName->accept->heritage->node->getClassHeritage->if->heritage->accept->constructor->node->getConstructor->if->constructor->accept->elements->node->getClassElements->if->foreach->prop->accept->return
SimpleTreeVisitorES6#visitForOfLoop(ForOfLoopTree, P):::Visit for..of statement tree.:::node->getVariable->accept->node->getExpression->accept->stat->node->getStatement->if->stat->accept->return
SimpleTreeVisitorES6#visitYield(YieldTree, P):::Visit 'yield' expression tree.:::node->getExpression->accept->return
SimpleTreeVisitorES6#visitSpread(SpreadTree, P):::Visit 'spread' expression tree.:::node->getExpression->accept->return
SimpleTreeVisitorES6#visitTemplateLiteral(TemplateLiteralTree, P):::Visit template literal tree.:::expressions->node->getExpressions->foreach->expr->accept->return
SpreadTree#getExpression():::Returns the expression that is being spread.:::
SwitchTree#getExpression():::Returns the expression on which this statement switches.:::
SwitchTree#getCases():::Returns the list of 'case' statements.:::
TemplateLiteralTree#getExpressions():::Returns the list of expressions in this template string:::
ThrowTree#getExpression():::Returns the expression being thrown.:::
Tree#getStartPosition():::Start character offset of this Tree within the source.:::
Tree#getEndPosition():::End character offset of this Tree within the source.:::
Tree#getKind():::Gets the kind of this tree.:::
Tree#accept(TreeVisitor, D):::Accept method used to implement the visitor pattern:::
TreeVisitor#visitAssignment(AssignmentTree, P):::Visit assignment tree.:::
TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P):::Visit compound assignment tree.:::
TreeVisitor#visitBinary(BinaryTree, P):::Visit binary expression tree.:::
TreeVisitor#visitBlock(BlockTree, P):::Visit block statement tree.:::
TreeVisitor#visitBreak(BreakTree, P):::Visit break statement tree.:::
TreeVisitor#visitCase(CaseTree, P):::Visit case statement tree.:::
TreeVisitor#visitCatch(CatchTree, P):::Visit catch block statement tree.:::
TreeVisitor#visitClassDeclaration(ClassDeclarationTree, P):::Visit class statement tree.:::
TreeVisitor#visitClassExpression(ClassExpressionTree, P):::Visit class expression tree.:::
TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P):::Visit conditional expression tree.:::
TreeVisitor#visitContinue(ContinueTree, P):::Visit continue statement tree.:::
TreeVisitor#visitDebugger(DebuggerTree, P):::Visit debugger statement tree.:::
TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P):::Visit do-while statement tree.:::
TreeVisitor#visitErroneous(ErroneousTree, P):::Visit error expression tree.:::
TreeVisitor#visitExpressionStatement(ExpressionStatementTree, P):::Visit expression statement tree.:::
TreeVisitor#visitForLoop(ForLoopTree, P):::Visit 'for' statement tree.:::
TreeVisitor#visitForInLoop(ForInLoopTree, P):::Visit for..in statement tree.:::
TreeVisitor#visitForOfLoop(ForOfLoopTree, P):::Visit for..of statement tree.:::
TreeVisitor#visitFunctionCall(FunctionCallTree, P):::Visit function call expression tree.:::
TreeVisitor#visitFunctionDeclaration(FunctionDeclarationTree, P):::Visit function declaration tree.:::
TreeVisitor#visitFunctionExpression(FunctionExpressionTree, P):::Visit function expression tree.:::
TreeVisitor#visitIdentifier(IdentifierTree, P):::Visit identifier tree.:::
TreeVisitor#visitIf(IfTree, P):::Visit 'if' statement tree.:::
TreeVisitor#visitArrayAccess(ArrayAccessTree, P):::Visit array access expression tree.:::
TreeVisitor#visitArrayLiteral(ArrayLiteralTree, P):::Visit array literal expression tree.:::
TreeVisitor#visitLabeledStatement(LabeledStatementTree, P):::Visit labeled statement tree.:::
TreeVisitor#visitLiteral(LiteralTree, P):::Visit literal expression tree.:::
TreeVisitor#visitParenthesized(ParenthesizedTree, P):::Visit parenthesized expression tree.:::
TreeVisitor#visitReturn(ReturnTree, P):::Visit return statement tree.:::
TreeVisitor#visitMemberSelect(MemberSelectTree, P):::Visit member select expression tree.:::
TreeVisitor#visitNew(NewTree, P):::Visit 'new' expression tree.:::
TreeVisitor#visitObjectLiteral(ObjectLiteralTree, P):::Visit object literal tree.:::
TreeVisitor#visitProperty(PropertyTree, P):::Visit a property of an object literal expression tree.:::
TreeVisitor#visitRegExpLiteral(RegExpLiteralTree, P):::Visit regular expression literal tree.:::
TreeVisitor#visitTemplateLiteral(TemplateLiteralTree, P):::Visit template literal tree.:::
TreeVisitor#visitEmptyStatement(EmptyStatementTree, P):::Visit an empty statement tree.:::
TreeVisitor#visitSpread(SpreadTree, P):::Visit 'spread' expression tree.:::
TreeVisitor#visitSwitch(SwitchTree, P):::Visit 'switch' statement tree.:::
TreeVisitor#visitThrow(ThrowTree, P):::Visit 'throw' expression tree.:::
TreeVisitor#visitCompilationUnit(CompilationUnitTree, P):::Visit compilation unit tree.:::
TreeVisitor#visitModule(ModuleTree, P):::Visit Module tree.:::
TreeVisitor#visitExportEntry(ExportEntryTree, P):::Visit Module ExportEntry tree.:::
TreeVisitor#visitImportEntry(ImportEntryTree, P):::Visit Module ImportEntry tree.:::
TreeVisitor#visitTry(TryTree, P):::Visit 'try' statement tree.:::
TreeVisitor#visitInstanceOf(InstanceOfTree, P):::Visit 'instanceof' expression tree.:::
TreeVisitor#visitUnary(UnaryTree, P):::Visit unary expression tree.:::
TreeVisitor#visitVariable(VariableTree, P):::Visit variable declaration tree.:::
TreeVisitor#visitWhileLoop(WhileLoopTree, P):::Visit 'while' statement tree.:::
TreeVisitor#visitWith(WithTree, P):::Visit 'with' statement tree.:::
TreeVisitor#visitYield(YieldTree, P):::Visit 'yield' expression tree.:::
TreeVisitor#visitUnknown(Tree, P):::Visit unknown expression/statement tree:::
TryTree#getBlock():::Returns the 'try' block of this 'try' statement.:::
TryTree#getCatches():::Returns the list of 'catch' statements associated with this 'try'.:::
TryTree#getFinallyBlock():::Returns the 'finally' block associated with this 'try':::
UnaryTree#getExpression():::Returns the expression operated by the unary operator.:::
UnknownTreeException#getUnknownTree():::Returns the unknown tree:::return
UnknownTreeException#getArgument():::Returns the additional argument:::return
VariableTree#getBinding():::Returns the binding of this declaration:::
VariableTree#getInitializer():::Returns the initial value expression for this variable:::
VariableTree#isConst():::Is this a const declaration?:::
VariableTree#isLet():::Is this a let declaration?:::
WhileLoopTree#getCondition():::The condition expression of this 'while' statement.:::
WhileLoopTree#getStatement():::The statement contained in this 'while' statement.:::
WithTree#getScope():::The scope object expression for this 'with' statement.:::
WithTree#getStatement():::The statement contained in this 'with' statement.:::
YieldTree#getExpression():::Returns the expression that is yielded.:::
YieldTree#isStar():::Is this a yield * expression in a generator function?  For example:  function* id(){     yield 1;     yield * anotherGeneratorFunc();     yield 10; } :::

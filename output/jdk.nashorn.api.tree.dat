ArrayAccessTree#getExpression():::Returns the array that is accessed.:::
ArrayAccessTree#getIndex():::Returns the index of the array element accessed.:::
ArrayAccessTreeImpl#getKind()::: array access tree impl get kind:::return
ArrayAccessTreeImpl#getExpression()::: array access tree impl get expression:::return
ArrayAccessTreeImpl#getIndex()::: array access tree impl get index:::return
ArrayAccessTreeImpl#accept(TreeVisitor, D)::: array access tree impl accept:::return->visitor->visitArrayAccess
ArrayLiteralTree#getElements():::Returns the list of Array element expressions.:::
ArrayLiteralTreeImpl#getKind()::: array literal tree impl get kind:::return
ArrayLiteralTreeImpl#getElements()::: array literal tree impl get elements:::return
ArrayLiteralTreeImpl#accept(TreeVisitor, D)::: array literal tree impl accept:::return->visitor->visitArrayLiteral
AssignmentTree#getVariable():::Returns the left hand side (LHS) of this assignment.:::
AssignmentTree#getExpression():::Returns the right hand side (RHS) of this assignment.:::
AssignmentTreeImpl#getKind()::: assignment tree impl get kind:::return
AssignmentTreeImpl#getVariable()::: assignment tree impl get variable:::return
AssignmentTreeImpl#getExpression()::: assignment tree impl get expression:::return
AssignmentTreeImpl#accept(TreeVisitor, D)::: assignment tree impl accept:::return->visitor->visitAssignment
BinaryTree#getLeftOperand():::Returns left hand side (LHS) of this binary expression.:::
BinaryTree#getRightOperand():::Returns right hand side (RHS) of this binary expression.:::
BinaryTreeImpl#getKind()::: binary tree impl get kind:::return
BinaryTreeImpl#getLeftOperand()::: binary tree impl get left operand:::return
BinaryTreeImpl#getRightOperand()::: binary tree impl get right operand:::return
BinaryTreeImpl#accept(TreeVisitor, D)::: binary tree impl accept:::return->visitor->visitBinary
BlockTree#getStatements():::Returns the list of statements in this block.:::
BlockTreeImpl#getKind()::: block tree impl get kind:::return
BlockTreeImpl#getStatements()::: block tree impl get statements:::return
BlockTreeImpl#accept(TreeVisitor, D)::: block tree impl accept:::return->visitor->visitBlock
BreakTree#getLabel():::Label associated with this break statement:::
BreakTreeImpl#getKind()::: break tree impl get kind:::return
BreakTreeImpl#getLabel()::: break tree impl get label:::return
BreakTreeImpl#accept(TreeVisitor, D)::: break tree impl accept:::return->visitor->visitBreak
CaseTree#getExpression():::Case expression of this 'case' statement.:::
CaseTree#getStatements():::Return the list of statements for this 'case'.:::
CaseTreeImpl#getKind()::: case tree impl get kind:::return
CaseTreeImpl#getExpression()::: case tree impl get expression:::return
CaseTreeImpl#getStatements()::: case tree impl get statements:::return
CaseTreeImpl#accept(TreeVisitor, D)::: case tree impl accept:::return->visitor->visitCase
CatchTree#getParameter():::Returns the catch parameter identifier or parameter binding pattern of the exception caught.:::
CatchTree#getBlock():::Returns the code block of this catch block.:::
CatchTree#getCondition():::Returns the optional catch condition expression:::
CatchTreeImpl#getKind()::: catch tree impl get kind:::return
CatchTreeImpl#getParameter()::: catch tree impl get parameter:::return
CatchTreeImpl#getBlock()::: catch tree impl get block:::return
CatchTreeImpl#getCondition()::: catch tree impl get condition:::return
CatchTreeImpl#accept(TreeVisitor, D)::: catch tree impl accept:::return->visitor->visitCatch
ClassDeclarationTree#getName():::Class identifier.:::
ClassDeclarationTree#getClassHeritage():::The expression of the extends clause:::
ClassDeclarationTree#getConstructor():::Get the constructor method definition.:::
ClassDeclarationTree#getClassElements():::Get other property definitions except for the constructor.:::
ClassDeclarationTreeImpl#getKind()::: class declaration tree impl get kind:::return
ClassDeclarationTreeImpl#getName()::: class declaration tree impl get name:::return
ClassDeclarationTreeImpl#getClassHeritage()::: class declaration tree impl get class heritage:::return
ClassDeclarationTreeImpl#getConstructor()::: class declaration tree impl get constructor:::return
ClassDeclarationTreeImpl#getClassElements()::: class declaration tree impl get class elements:::return
ClassDeclarationTreeImpl#accept(TreeVisitor, D)::: class declaration tree impl accept:::return->visitor->visitClassDeclaration
ClassExpressionTree#getName():::Class identifier:::
ClassExpressionTree#getClassHeritage():::The expression of the extends clause:::
ClassExpressionTree#getConstructor():::Get the constructor method definition.:::
ClassExpressionTree#getClassElements():::Get other property definitions except for the constructor.:::
ClassExpressionTreeImpl#getKind()::: class expression tree impl get kind:::return
ClassExpressionTreeImpl#getName()::: class expression tree impl get name:::return
ClassExpressionTreeImpl#getClassHeritage()::: class expression tree impl get class heritage:::return
ClassExpressionTreeImpl#getConstructor()::: class expression tree impl get constructor:::return
ClassExpressionTreeImpl#getClassElements()::: class expression tree impl get class elements:::return
ClassExpressionTreeImpl#accept(TreeVisitor, D)::: class expression tree impl accept:::return->visitor->visitClassExpression
CompilationUnitTree#getSourceElements():::Return the list of source elements in this compilation unit.:::
CompilationUnitTree#getSourceName():::Return the source name of this script compilation unit.:::
CompilationUnitTree#isStrict():::Returns if this is a ECMAScript "strict" compilation unit or not.:::
CompilationUnitTree#getLineMap():::Returns the line map for this compilation unit, if available:::
CompilationUnitTree#getModule():::Return the ModuleTree associated with this compilation unit:::
CompilationUnitTreeImpl#getKind()::: compilation unit tree impl get kind:::return
CompilationUnitTreeImpl#getSourceElements()::: compilation unit tree impl get source elements:::return
CompilationUnitTreeImpl#getSourceName()::: compilation unit tree impl get source name:::return->funcNode->getSourceName
CompilationUnitTreeImpl#isStrict()::: compilation unit tree impl is strict:::return->funcNode->isStrict
CompilationUnitTreeImpl#getLineMap()::: compilation unit tree impl get line map:::return->funcNode->getSource->new->LineMapImpl
CompilationUnitTreeImpl#getModule()::: compilation unit tree impl get module:::return
CompilationUnitTreeImpl#accept(TreeVisitor, D)::: compilation unit tree impl accept:::return->visitor->visitCompilationUnit
CompoundAssignmentTree#getVariable():::Returns the left hand side (LHS) of this assignment.:::
CompoundAssignmentTree#getExpression():::Returns the right hand side (RHS) of this assignment.:::
CompoundAssignmentTreeImpl#getKind()::: compound assignment tree impl get kind:::return
CompoundAssignmentTreeImpl#getVariable()::: compound assignment tree impl get variable:::return
CompoundAssignmentTreeImpl#getExpression()::: compound assignment tree impl get expression:::return
CompoundAssignmentTreeImpl#accept(TreeVisitor, D)::: compound assignment tree impl accept:::return->visitor->visitCompoundAssignment
ConditionalExpressionTree#getCondition():::Returns the condition expression of this ternary expression.:::
ConditionalExpressionTree#getTrueExpression():::Returns the true part of this ternary expression.:::
ConditionalExpressionTree#getFalseExpression():::Returns the false part of this ternary expression.:::
ConditionalExpressionTreeImpl#getKind()::: conditional expression tree impl get kind:::return
ConditionalExpressionTreeImpl#getCondition()::: conditional expression tree impl get condition:::return
ConditionalExpressionTreeImpl#getTrueExpression()::: conditional expression tree impl get true expression:::return
ConditionalExpressionTreeImpl#getFalseExpression()::: conditional expression tree impl get false expression:::return
ConditionalExpressionTreeImpl#accept(TreeVisitor, D)::: conditional expression tree impl accept:::return->visitor->visitConditionalExpression
ConditionalLoopTree#getCondition():::Returns the condition expression of this 'loop' statement.:::
ContinueTree#getLabel():::Label associated with this continue statement:::
ContinueTreeImpl#getKind()::: continue tree impl get kind:::return
ContinueTreeImpl#getLabel()::: continue tree impl get label:::return
ContinueTreeImpl#accept(TreeVisitor, D)::: continue tree impl accept:::return->visitor->visitContinue
DebuggerTreeImpl#getKind()::: debugger tree impl get kind:::return
DebuggerTreeImpl#accept(TreeVisitor, D)::: debugger tree impl accept:::return->visitor->visitDebugger
DestructuringDeclTreeImpl#getKind()::: destructuring decl tree impl get kind:::return
DestructuringDeclTreeImpl#getBinding()::: destructuring decl tree impl get binding:::return
DestructuringDeclTreeImpl#getInitializer()::: destructuring decl tree impl get initializer:::return
DestructuringDeclTreeImpl#isConst()::: destructuring decl tree impl is const:::return
DestructuringDeclTreeImpl#isLet()::: destructuring decl tree impl is let:::return
DestructuringDeclTreeImpl#accept(TreeVisitor, D)::: destructuring decl tree impl accept:::return->visitor->visitVariable
Diagnostic#getKind():::Gets the kind of this diagnostic, for example, error or warning.:::
Diagnostic#getPosition():::Gets a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem:::
Diagnostic#getFileName():::Gets the source file name.:::
Diagnostic#getLineNumber():::Gets the line number of the character offset returned by #getPosition().:::
Diagnostic#getColumnNumber():::Gets the column number of the character offset returned by #getPosition().:::
Diagnostic#getCode():::Gets a diagnostic code indicating the type of diagnostic:::
Diagnostic#getMessage():::Gets a message for this diagnostic.:::
DiagnosticImpl#getKind()::: diagnostic impl get kind:::return
DiagnosticImpl#getPosition()::: diagnostic impl get position:::return->exp->getPosition
DiagnosticImpl#getFileName()::: diagnostic impl get file name:::return->exp->getFileName
DiagnosticImpl#getLineNumber()::: diagnostic impl get line number:::return->exp->getLineNumber
DiagnosticImpl#getColumnNumber()::: diagnostic impl get column number:::return->exp->getColumnNumber
DiagnosticImpl#getCode()::: diagnostic impl get code:::token->exp->getToken->return->Token->toString
DiagnosticImpl#getMessage()::: diagnostic impl get message:::return->exp->getMessage
DiagnosticImpl#toString()::: diagnostic impl to string:::return->getMessage
DiagnosticListener#report(Diagnostic):::Invoked whenever a parsing problem is found.:::
DoWhileLoopTree#getCondition():::Returns the condition expression of this do-while statement.:::
DoWhileLoopTree#getStatement():::The statement contained within this do-while statement.:::
DoWhileLoopTreeImpl#getKind()::: do while loop tree impl get kind:::return
DoWhileLoopTreeImpl#getCondition()::: do while loop tree impl get condition:::return
DoWhileLoopTreeImpl#getStatement()::: do while loop tree impl get statement:::return
DoWhileLoopTreeImpl#accept(TreeVisitor, D)::: do while loop tree impl accept:::return->visitor->visitDoWhileLoop
EmptyStatementTreeImpl#getKind()::: empty statement tree impl get kind:::return
EmptyStatementTreeImpl#accept(TreeVisitor, D)::: empty statement tree impl accept:::return->visitor->visitEmptyStatement
ErroneousTreeImpl#getKind()::: erroneous tree impl get kind:::return
ErroneousTreeImpl#accept(TreeVisitor, D)::: erroneous tree impl accept:::return->visitor->visitErroneous
ExportEntryTree#getExportName():::Returns the entry's export name.:::
ExportEntryTree#getModuleRequest():::Returns the entry's module request.:::
ExportEntryTree#getImportName():::Returns the entry's import name.:::
ExportEntryTree#getLocalName():::Returns the entry's local name.:::
ExportEntryTreeImpl#createExportEntry(Module.ExportEntry)::: export entry tree impl create export entry:::return->entry->getStartPosition->entry->getEndPosition->entry->getExportName->identOrNull->entry->getModuleRequest->identOrNull->entry->getImportName->identOrNull->entry->getLocalName->identOrNull->new->ExportEntryTreeImpl
ExportEntryTreeImpl#createExportList(List)::: export entry tree impl create export list:::return->exportList->stream->ExportEntryTreeImpl->createExportEntry->map->Collectors->toList->collect
ExportEntryTreeImpl#getKind()::: export entry tree impl get kind:::return
ExportEntryTreeImpl#accept(TreeVisitor, D)::: export entry tree impl accept:::return->visitor->visitExportEntry
ExportEntryTreeImpl#getStartPosition()::: export entry tree impl get start position:::return
ExportEntryTreeImpl#getEndPosition()::: export entry tree impl get end position:::return
ExportEntryTreeImpl#getExportName()::: export entry tree impl get export name:::return
ExportEntryTreeImpl#getModuleRequest()::: export entry tree impl get module request:::return
ExportEntryTreeImpl#getImportName()::: export entry tree impl get import name:::return
ExportEntryTreeImpl#getLocalName()::: export entry tree impl get local name:::return
ExpressionStatementTree#getExpression():::Returns the expression of this expression statement.:::
ExpressionStatementTreeImpl#getKind()::: expression statement tree impl get kind:::return
ExpressionStatementTreeImpl#getExpression()::: expression statement tree impl get expression:::return
ExpressionStatementTreeImpl#accept(TreeVisitor, D)::: expression statement tree impl accept:::return->visitor->visitExpressionStatement
ForInLoopTree#getVariable():::The for..in left hand side expression.:::
ForInLoopTree#getExpression():::The object or array being whose properties are iterated.:::
ForInLoopTree#getStatement():::The statement contained in this for..in statement.:::
ForInLoopTree#isForEach():::Returns if this is a for..each..in statement or not.:::
ForInLoopTreeImpl#getKind()::: for in loop tree impl get kind:::return
ForInLoopTreeImpl#getVariable()::: for in loop tree impl get variable:::return
ForInLoopTreeImpl#getExpression()::: for in loop tree impl get expression:::return
ForInLoopTreeImpl#getStatement()::: for in loop tree impl get statement:::return
ForInLoopTreeImpl#isForEach()::: for in loop tree impl is for each:::return
ForInLoopTreeImpl#accept(TreeVisitor, D)::: for in loop tree impl accept:::return->visitor->visitForInLoop
ForLoopTree#getInitializer():::Returns the initializer expression of this 'for' statement.:::
ForLoopTree#getCondition():::Returns the condition expression of this 'for' statement.:::
ForLoopTree#getUpdate():::Returns the update expression of this 'for' statement.:::
ForLoopTree#getStatement():::Returns the statement contained in this 'for' statement.:::
ForLoopTreeImpl#getKind()::: for loop tree impl get kind:::return
ForLoopTreeImpl#getInitializer()::: for loop tree impl get initializer:::return
ForLoopTreeImpl#getCondition()::: for loop tree impl get condition:::return
ForLoopTreeImpl#getUpdate()::: for loop tree impl get update:::return
ForLoopTreeImpl#getStatement()::: for loop tree impl get statement:::return
ForLoopTreeImpl#accept(TreeVisitor, D)::: for loop tree impl accept:::return->visitor->visitForLoop
ForOfLoopTree#getVariable():::The for..of left hand side expression.:::
ForOfLoopTree#getExpression():::The object or array being whose properties are iterated.:::
ForOfLoopTree#getStatement():::The statement contained in this for..of statement.:::
ForOfLoopTreeImpl#getKind()::: for of loop tree impl get kind:::return
ForOfLoopTreeImpl#getVariable()::: for of loop tree impl get variable:::return
ForOfLoopTreeImpl#getExpression()::: for of loop tree impl get expression:::return
ForOfLoopTreeImpl#getStatement()::: for of loop tree impl get statement:::return
ForOfLoopTreeImpl#accept(TreeVisitor, D)::: for of loop tree impl accept:::return->visitor->visitForOfLoop
FunctionCallTree#getFunctionSelect():::Returns the function being called.:::
FunctionCallTree#getArguments():::Returns the list of arguments being passed to this function call.:::
FunctionCallTreeImpl#getKind()::: function call tree impl get kind:::return
FunctionCallTreeImpl#getFunctionSelect()::: function call tree impl get function select:::return
FunctionCallTreeImpl#getArguments()::: function call tree impl get arguments:::return
FunctionCallTreeImpl#accept(TreeVisitor, D)::: function call tree impl accept:::return->visitor->visitFunctionCall
FunctionDeclarationTree#getName():::Returns the name of the function being declared.:::
FunctionDeclarationTree#getParameters():::Returns the parameters of this function.:::
FunctionDeclarationTree#getBody():::Returns the body of code of this function.:::
FunctionDeclarationTree#isStrict():::Is this a strict function?:::
FunctionDeclarationTree#isGenerator():::Is this a generator function?:::
FunctionDeclarationTreeImpl#getKind()::: function declaration tree impl get kind:::return
FunctionDeclarationTreeImpl#getName()::: function declaration tree impl get name:::return
FunctionDeclarationTreeImpl#getParameters()::: function declaration tree impl get parameters:::return
FunctionDeclarationTreeImpl#getBody()::: function declaration tree impl get body:::return
FunctionDeclarationTreeImpl#isStrict()::: function declaration tree impl is strict:::return->funcNode->isStrict
FunctionDeclarationTreeImpl#isGenerator()::: function declaration tree impl is generator:::return->funcNode->getKind
FunctionDeclarationTreeImpl#accept(TreeVisitor, D)::: function declaration tree impl accept:::return->visitor->visitFunctionDeclaration
FunctionExpressionTree#getName():::Returns the name of the function being declared.:::
FunctionExpressionTree#getParameters():::Returns the parameters of this function.:::
FunctionExpressionTree#getBody():::Returns the body of this function:::
FunctionExpressionTree#isStrict():::Is this a strict function?:::
FunctionExpressionTree#isArrow():::Is this a arrow function?:::
FunctionExpressionTree#isGenerator():::Is this a generator function?:::
FunctionExpressionTreeImpl#getKind()::: function expression tree impl get kind:::return
FunctionExpressionTreeImpl#getName()::: function expression tree impl get name:::return
FunctionExpressionTreeImpl#getParameters()::: function expression tree impl get parameters:::return
FunctionExpressionTreeImpl#getBody()::: function expression tree impl get body:::return
FunctionExpressionTreeImpl#isStrict()::: function expression tree impl is strict:::return->funcNode->isStrict
FunctionExpressionTreeImpl#isArrow()::: function expression tree impl is arrow:::return->funcNode->getKind
FunctionExpressionTreeImpl#isGenerator()::: function expression tree impl is generator:::return->funcNode->getKind
FunctionExpressionTreeImpl#accept(TreeVisitor, D)::: function expression tree impl accept:::return->visitor->visitFunctionExpression
GotoTree#getLabel():::Label associated with this goto statement:::
IdentifierTree#getName():::Returns the name of this identifier.:::
IdentifierTree#isRestParameter():::Is this a rest parameter for a function or rest elements of an array?:::
IdentifierTree#isSuper():::Is this super identifier?:::
IdentifierTree#isThis():::Is this 'this' identifier?:::
IdentifierTree#isStar():::Is this "*" used in module export entry?:::
IdentifierTree#isDefault():::Is this "default" used in module export entry?:::
IdentifierTree#isStarDefaultStar():::Is this "*default*" used in module export entry?:::
IdentifierTreeImpl#getKind()::: identifier tree impl get kind:::return
IdentifierTreeImpl#getName()::: identifier tree impl get name:::return
IdentifierTreeImpl#isRestParameter()::: identifier tree impl is rest parameter:::return->isRestParameter
IdentifierTreeImpl#isSuper()::: identifier tree impl is super:::ident->return->ident->isDirectSuper->ident->getName->equals
IdentifierTreeImpl#isThis()::: identifier tree impl is this:::return->getName->equals
IdentifierTreeImpl#isStar()::: identifier tree impl is star:::return->getName->equals
IdentifierTreeImpl#isDefault()::: identifier tree impl is default:::return->getName->equals
IdentifierTreeImpl#isStarDefaultStar()::: identifier tree impl is star default star:::return->getName->equals
IdentifierTreeImpl#accept(TreeVisitor, D)::: identifier tree impl accept:::return->visitor->visitIdentifier
IfTree#getCondition():::Returns the condition expression of this 'if' statement.:::
IfTree#getThenStatement():::Returns the 'then' statement of this 'if' statement.:::
IfTree#getElseStatement():::Returns the then statement of this 'if' statement:::
IfTreeImpl#getKind()::: if tree impl get kind:::return
IfTreeImpl#getCondition()::: if tree impl get condition:::return
IfTreeImpl#getThenStatement()::: if tree impl get then statement:::return
IfTreeImpl#getElseStatement()::: if tree impl get else statement:::return
IfTreeImpl#accept(TreeVisitor, D)::: if tree impl accept:::return->visitor->visitIf
ImportEntryTree#getModuleRequest():::Returns the entry's module request.:::
ImportEntryTree#getImportName():::Returns the entry's import name.:::
ImportEntryTree#getLocalName():::Returns the entry's local name.:::
ImportEntryTreeImpl#createImportEntry(Module.ImportEntry)::: import entry tree impl create import entry:::return->entry->getStartPosition->entry->getEndPosition->entry->getModuleRequest->identOrNull->entry->getImportName->identOrNull->entry->getLocalName->identOrNull->new->ImportEntryTreeImpl
ImportEntryTreeImpl#createImportList(List)::: import entry tree impl create import list:::return->importList->stream->ImportEntryTreeImpl->createImportEntry->map->Collectors->toList->collect
ImportEntryTreeImpl#getKind()::: import entry tree impl get kind:::return
ImportEntryTreeImpl#accept(TreeVisitor, D)::: import entry tree impl accept:::return->visitor->visitImportEntry
ImportEntryTreeImpl#getStartPosition()::: import entry tree impl get start position:::return
ImportEntryTreeImpl#getEndPosition()::: import entry tree impl get end position:::return
ImportEntryTreeImpl#getModuleRequest()::: import entry tree impl get module request:::return
ImportEntryTreeImpl#getImportName()::: import entry tree impl get import name:::return
ImportEntryTreeImpl#getLocalName()::: import entry tree impl get local name:::return
InstanceOfTree#getExpression():::Returns the expression whose type is being checked.:::
InstanceOfTree#getType():::Returns the type expression.:::
InstanceOfTreeImpl#getKind()::: instance of tree impl get kind:::return
InstanceOfTreeImpl#getExpression()::: instance of tree impl get expression:::return->getLeftOperand
InstanceOfTreeImpl#getType()::: instance of tree impl get type:::return->getRightOperand
InstanceOfTreeImpl#accept(TreeVisitor, D)::: instance of tree impl accept:::return->visitor->visitInstanceOf
IRTranslator#translate(FunctionNode)::: translator translate:::if->return->body->node->getBody->return->body->getStatements->getOrderedStatements->translateStats->translateModule->new->CompilationUnitTreeImpl
IRTranslator#enterAccessNode(AccessNode)::: translator enter access node:::accessNode->getBase->translateExpr->new->MemberSelectTreeImpl->return
IRTranslator#enterBlock(Block)::: translator enter block:::return->handleBlock
IRTranslator#enterBinaryNode(BinaryNode)::: translator enter binary node:::if->binaryNode->isAssignment->srcTree->binaryNode->getAssignmentSource->translateExpr->destTree->binaryNode->getAssignmentDest->translateExpr->if->binaryNode->isTokenType->new->AssignmentTreeImpl->else->new->CompoundAssignmentTreeImpl->else->leftTree->binaryNode->lhs->translateExpr->rightTree->binaryNode->rhs->translateExpr->if->binaryNode->isTokenType->new->InstanceOfTreeImpl->else->new->BinaryTreeImpl->return
IRTranslator#enterBreakNode(BreakNode)::: translator enter break node:::new->BreakTreeImpl->return
IRTranslator#enterCallNode(CallNode)::: translator enter call node:::callNode->getFunction->accept->funcTree->argTrees->callNode->getArgs->translateExprs->new->FunctionCallTreeImpl->return
IRTranslator#enterCaseNode(CaseNode)::: translator enter case node:::return
IRTranslator#enterCatchNode(CatchNode)::: translator enter catch node:::return
IRTranslator#enterContinueNode(ContinueNode)::: translator enter continue node:::new->ContinueTreeImpl->return
IRTranslator#enterDebuggerNode(DebuggerNode)::: translator enter debugger node:::new->DebuggerTreeImpl->return
IRTranslator#enterEmptyNode(EmptyNode)::: translator enter empty node:::new->EmptyStatementTreeImpl->return
IRTranslator#enterErrorNode(ErrorNode)::: translator enter error node:::new->ErroneousTreeImpl->return
IRTranslator#enterExpressionStatement(ExpressionStatement)::: translator enter expression statement:::if->expressionStatement->destructuringDeclarationType->expr->expressionStatement->getExpression->translateExpr->assign->assign->getVariable->assign->getExpression->new->DestructuringDeclTreeImpl->else->expressionStatement->getExpression->translateExpr->new->ExpressionStatementTreeImpl->return
IRTranslator#enterBlockStatement(BlockStatement)::: translator enter block statement:::block->blockStatement->getBlock->if->blockStatement->isSynthetic->block->getStatements->get->translateStat->else->block->getStatements->translateStats->new->BlockTreeImpl->return
IRTranslator#enterForNode(ForNode)::: translator enter for node:::if->forNode->isForIn->forNode->getInit->translateExpr->forNode->getModify->translateExpr->forNode->getBody->translateBlock->new->ForInLoopTreeImpl->else->if->forNode->isForOf->forNode->getInit->translateExpr->forNode->getModify->translateExpr->forNode->getBody->translateBlock->new->ForOfLoopTreeImpl->else->forNode->getInit->translateExpr->forNode->getTest->translateExpr->forNode->getModify->translateExpr->forNode->getBody->translateBlock->new->ForLoopTreeImpl->return
IRTranslator#enterFunctionNode(FunctionNode)::: translator enter function node:::paramTrees->translateParameters->blockTree->functionNode->getBody->translateBlock->new->FunctionExpressionTreeImpl->return
IRTranslator#enterIdentNode(IdentNode)::: translator enter ident node:::new->IdentifierTreeImpl->return
IRTranslator#enterIfNode(IfNode)::: translator enter if node:::ifNode->getTest->translateExpr->ifNode->getPass->translateBlock->ifNode->getFail->translateBlock->new->IfTreeImpl->return
IRTranslator#enterIndexNode(IndexNode)::: translator enter index node:::indexNode->getBase->translateExpr->indexNode->getIndex->translateExpr->new->ArrayAccessTreeImpl->return
IRTranslator#enterLabelNode(LabelNode)::: translator enter label node:::labelNode->getBody->translateBlock->new->LabeledStatementTreeImpl->return
IRTranslator#enterLiteralNode(LiteralNode)::: translator enter literal node:::value->literalNode->getValue->if->new->RegExpLiteralTreeImpl->else->if->literalNode->isArray->exprNodes->literalNode->getElementExpressions->exprTrees->exprNodes->size->new->ArrayList<>->foreach->if->exprTrees->add->else->node->accept->exprTrees->add->new->ArrayLiteralTreeImpl->else->new->LiteralTreeImpl->return
IRTranslator#enterObjectNode(ObjectNode)::: translator enter object node:::propNodes->objectNode->getElements->propTrees->translateProperties->new->ObjectLiteralTreeImpl->return
IRTranslator#enterPropertyNode(PropertyNode)::: translator enter property node:::return
IRTranslator#enterReturnNode(ReturnNode)::: translator enter return node:::returnNode->getExpression->translateExpr->new->ReturnTreeImpl->return
IRTranslator#enterRuntimeNode(RuntimeNode)::: translator enter runtime node:::return
IRTranslator#enterSplitNode(SplitNode)::: translator enter split node:::return
IRTranslator#enterSwitchNode(SwitchNode)::: translator enter switch node:::caseNodes->switchNode->getCases->caseTrees->caseNodes->size->new->ArrayList<>->foreach->body->caseNode->getBody->caseTrees->caseNode->getTest->translateExpr->body->getStatements->translateStats->new->CaseTreeImpl->add->switchNode->getExpression->translateExpr->new->SwitchTreeImpl->return
IRTranslator#enterTemplateLiteral(TemplateLiteral)::: translator enter template literal:::templateLiteral->getExpressions->translateExprs->new->TemplateLiteralTreeImpl->return
IRTranslator#enterTernaryNode(TernaryNode)::: translator enter ternary node:::ternaryNode->getTest->translateExpr->ternaryNode->getTrueExpression->translateExpr->ternaryNode->getFalseExpression->translateExpr->new->ConditionalExpressionTreeImpl->return
IRTranslator#enterThrowNode(ThrowNode)::: translator enter throw node:::throwNode->getExpression->translateExpr->new->ThrowTreeImpl->return
IRTranslator#enterTryNode(TryNode)::: translator enter try node:::catchNodes->tryNode->getCatches->catchTrees->catchNodes->size->new->ArrayList<>->foreach->catchTrees->catchNode->getException->translateExpr->catchNode->getBody->translateBlock->catchNode->getExceptionCondition->translateExpr->new->CatchTreeImpl->add->tryNode->getBody->translateBlock->tryNode->getFinallyBody->translateBlock->new->TryTreeImpl->return
IRTranslator#enterUnaryNode(UnaryNode)::: translator enter unary node:::if->unaryNode->isTokenType->unaryNode->getExpression->translateExpr->new->NewTreeImpl->else->if->unaryNode->isTokenType->unaryNode->isTokenType->unaryNode->getExpression->translateExpr->new->YieldTreeImpl->else->if->unaryNode->isTokenType->unaryNode->isTokenType->unaryNode->getExpression->translateExpr->new->SpreadTreeImpl->else->unaryNode->getExpression->translateExpr->new->UnaryTreeImpl->return
IRTranslator#enterVarNode(VarNode)::: translator enter var node:::initNode->varNode->getInit->if->isDeclared->funcNode->paramTrees->translateParameters->blockTree->funcNode->getBody->translateBlock->new->FunctionDeclarationTreeImpl->else->if->isStatement->classNode->classNode->getIdent->translateIdent->classNode->getClassHeritage->translateExpr->classNode->getConstructor->translateProperty->classNode->getClassElements->translateProperties->new->ClassDeclarationTreeImpl->else->varNode->getName->translateIdent->translateExpr->new->VariableTreeImpl->return
IRTranslator#enterWhileNode(WhileNode)::: translator enter while node:::condTree->whileNode->getTest->translateExpr->statTree->whileNode->getBody->translateBlock->if->whileNode->isDoWhile->new->DoWhileLoopTreeImpl->else->new->WhileLoopTreeImpl->return
IRTranslator#enterWithNode(WithNode)::: translator enter with node:::withNode->getExpression->translateExpr->withNode->getBody->translateBlock->new->WithTreeImpl->return
IRTranslator#enterClassNode(ClassNode):::Callback for entering a ClassNode:::className->classNode->getIdent->translateIdent->classNode->getClassHeritage->translateExpr->classNode->getConstructor->translateProperty->classNode->getClassElements->translateProperties->new->ClassExpressionTreeImpl->return
IRTranslator#translateBlock(Block)::: translator translate block:::return->translateBlock
IRTranslator#translateBlock(Block, boolean)::: translator translate block:::if->return->handleBlock->return
IRTranslator#handleBlock(Block, boolean)::: translator handle block:::if->block->isSynthetic->statCount->block->getStatementCount->switch->emptyNode->block->getToken->block->getFinish->new->EmptyNode->new->EmptyStatementTreeImpl->return->block->getStatements->get->translateStat->return->break->stats->block->getStatements->getOrderedStatements->translateStats->new->BlockTreeImpl->return
IRTranslator#getOrderedStatements(List)::: translator get ordered statements:::statList->new->ArrayList<>->statList->Comparator->Node->getSourceOrder->comparingInt->sort->return
IRTranslator#translateStats(List)::: translator translate stats:::if->return->statTrees->stats->size->new->ArrayList<>->foreach->stat->accept->statTrees->add->return
IRTranslator#translateParameters(FunctionNode)::: translator translate parameters:::paramExprs->func->getParameterExpressions->if->params->func->getParameters->exprTrees->params->size->new->ArrayList<>->foreach->expr->paramExprs->containsKey->paramExprs->get->expr->accept->exprTrees->add->return->else->return->func->getParameters->translateExprs
IRTranslator#translateExprs(List)::: translator translate exprs:::if->return->exprTrees->exprs->size->new->ArrayList<>->foreach->expr->accept->exprTrees->add->return
IRTranslator#translateExpr(Expression)::: translator translate expr:::if->return->expr->accept->return
IRTranslator#translateStat(Statement)::: translator translate stat:::if->return->stat->accept->return
IRTranslator#translateIdent(IdentNode)::: translator translate ident:::return->new->IdentifierTreeImpl
IRTranslator#translateProperties(List)::: translator translate properties:::propTrees->propNodes->size->new->ArrayList<>->foreach->propTrees->translateProperty->add->return
IRTranslator#translateProperty(PropertyNode)::: translator translate property:::return->propNode->getKey->translateExpr->propNode->getValue->translateExpr->propNode->getGetter->translateExpr->propNode->getSetter->translateExpr->new->PropertyTreeImpl
IRTranslator#translateModule(FunctionNode)::: translator translate module:::return->func->getKind->ModuleTreeImpl->create
LabeledStatementTree#getLabel():::Returns the label associated with this statement.:::
LabeledStatementTree#getStatement():::Returns the statement being labeled.:::
LabeledStatementTreeImpl#getKind()::: labeled statement tree impl get kind:::return
LabeledStatementTreeImpl#getLabel()::: labeled statement tree impl get label:::return
LabeledStatementTreeImpl#getStatement()::: labeled statement tree impl get statement:::return
LabeledStatementTreeImpl#accept(TreeVisitor, D)::: labeled statement tree impl accept:::return->visitor->visitLabeledStatement
LineMap#getLineNumber(long):::Find the line containing a position; a line termination character is on the line it terminates.:::
LineMap#getColumnNumber(long):::Find the column for a character position:::
LineMapImpl#getLineNumber(long)::: line map impl get line number:::return->source->getLine
LineMapImpl#getColumnNumber(long)::: line map impl get column number:::return->source->getColumn
LiteralTree#getValue():::Returns the value of this literal.:::
LiteralTreeImpl#getKind()::: literal tree impl get kind:::return
LiteralTreeImpl#getValue()::: literal tree impl get value:::return
LiteralTreeImpl#literalKind(LiteralNode)::: literal tree impl literal kind:::if->node->isBoolean->return->else->if->node->isNumeric->return->else->if->node->isString->return->else->if->node->isNull->return->else->throw->node->getValue->new->AssertionError
LiteralTreeImpl#accept(TreeVisitor, D)::: literal tree impl accept:::return->visitor->visitLiteral
LoopTree#getStatement():::Returns the statement contained in this 'loop' statement.:::
MemberSelectTree#getExpression():::The object expression whose member is being selected.:::
MemberSelectTree#getIdentifier():::Returns the name of the property.:::
MemberSelectTreeImpl#getKind()::: member select tree impl get kind:::return
MemberSelectTreeImpl#getExpression()::: member select tree impl get expression:::return
MemberSelectTreeImpl#getIdentifier()::: member select tree impl get identifier:::return
MemberSelectTreeImpl#accept(TreeVisitor, D)::: member select tree impl accept:::return->visitor->visitMemberSelect
ModuleTree#getImportEntries():::Returns the list of import entries.:::
ModuleTree#getLocalExportEntries():::Returns the list of local export entries.:::
ModuleTree#getIndirectExportEntries():::Returns the list of indirect export entries.:::
ModuleTree#getStarExportEntries():::Returns the list of star export entries.:::
ModuleTreeImpl#create(FunctionNode)::: module tree impl create:::mod->func->getModule->return->mod->getImportEntries->createImportList->mod->getLocalExportEntries->createExportList->mod->getIndirectExportEntries->createExportList->mod->getStarExportEntries->createExportList->new->ModuleTreeImpl
ModuleTreeImpl#getKind()::: module tree impl get kind:::return
ModuleTreeImpl#getImportEntries()::: module tree impl get import entries:::return
ModuleTreeImpl#getLocalExportEntries()::: module tree impl get local export entries:::return
ModuleTreeImpl#getIndirectExportEntries()::: module tree impl get indirect export entries:::return
ModuleTreeImpl#getStarExportEntries()::: module tree impl get star export entries:::return
ModuleTreeImpl#accept(TreeVisitor, D)::: module tree impl accept:::return->visitor->visitModule
ModuleTreeImpl#identOrNull(IdentNode)::: module tree impl ident or null:::return->new->IdentifierTreeImpl
NewTree#getConstructorExpression():::Returns the constructor expression of this 'new' expression.:::
NewTreeImpl#getKind()::: new tree impl get kind:::return
NewTreeImpl#getConstructorExpression()::: new tree impl get constructor expression:::return
NewTreeImpl#accept(TreeVisitor, D)::: new tree impl accept:::return->visitor->visitNew
ObjectLiteralTree#getProperties():::Returns the list of properties of this object literal.:::
ObjectLiteralTreeImpl#getKind()::: object literal tree impl get kind:::return
ObjectLiteralTreeImpl#getProperties()::: object literal tree impl get properties:::return
ObjectLiteralTreeImpl#accept(TreeVisitor, D)::: object literal tree impl accept:::return->visitor->visitObjectLiteral
ParenthesizedTree#getExpression():::Returns the expression within the parenthesis.:::
Parser#parse(File, DiagnosticListener):::Parses the source file and returns compilation unit tree:::
Parser#parse(Path, DiagnosticListener):::Parses the source Path and returns compilation unit tree:::
Parser#parse(URL, DiagnosticListener):::Parses the source url and returns compilation unit tree:::
Parser#parse(String, Reader, DiagnosticListener):::Parses the reader and returns compilation unit tree:::
Parser#parse(String, String, DiagnosticListener):::Parses the string source and returns compilation unit tree:::
Parser#parse(ScriptObjectMirror, DiagnosticListener):::Parses the source from script object and returns compilation unit tree:::
Parser#create(String...):::Factory method to create a new instance of Parser.:::options->getClass->foreach->switch->break->throw->new->IllegalArgumentException->return->new->ParserImpl
ParserImpl#parse(File, DiagnosticListener)::: parser impl parse:::if->return->parseModule->src->Source->Objects->requireNonNull->getName->sourceFor->return->makeParser->parse->translate
ParserImpl#parse(Path, DiagnosticListener)::: parser impl parse:::if->return->parseModule->src->Source->Objects->requireNonNull->toString->sourceFor->return->makeParser->parse->translate
ParserImpl#parse(URL, DiagnosticListener)::: parser impl parse:::if->return->parseModule->src->Source->url->toString->sourceFor->return->makeParser->parse->translate
ParserImpl#parse(String, Reader, DiagnosticListener)::: parser impl parse:::if->return->parseModule->src->Source->Objects->requireNonNull->Objects->requireNonNull->sourceFor->return->makeParser->parse->translate
ParserImpl#parse(String, String, DiagnosticListener)::: parser impl parse:::if->return->parseModule->src->Source->sourceFor->return->makeParser->parse->translate
ParserImpl#parse(ScriptObjectMirror, DiagnosticListener)::: parser impl parse:::if->return->parseModule->map->Objects->requireNonNull->if->map->containsKey->map->containsKey->script->JSType->map->get->toString->name->JSType->map->get->toString->src->Source->sourceFor->return->makeParser->parse->translate->else->throw->new->IllegalArgumentException
ParserImpl#parseModule(File, DiagnosticListener)::: parser impl parse module:::src->Source->Objects->requireNonNull->getName->sourceFor->return->makeModule
ParserImpl#parseModule(Path, DiagnosticListener)::: parser impl parse module:::src->Source->Objects->requireNonNull->toString->sourceFor->return->makeModule
ParserImpl#parseModule(URL, DiagnosticListener)::: parser impl parse module:::src->Source->url->toString->sourceFor->return->makeModule
ParserImpl#parseModule(String, Reader, DiagnosticListener)::: parser impl parse module:::src->Source->Objects->requireNonNull->Objects->requireNonNull->sourceFor->return->makeModule
ParserImpl#parseModule(String, String, DiagnosticListener)::: parser impl parse module:::src->Source->sourceFor->return->makeModule
ParserImpl#parseModule(ScriptObjectMirror, DiagnosticListener)::: parser impl parse module:::map->Objects->requireNonNull->if->map->containsKey->map->containsKey->script->JSType->map->get->toString->name->JSType->map->get->toString->src->Source->sourceFor->return->makeModule->else->throw->new->IllegalArgumentException
ParserImpl#makeModule(Source, DiagnosticListener)::: parser impl make module:::modFunc->makeParser->src->getName->parseModule->return->new->IRTranslator->translate
ParserImpl#makeParser(Source, DiagnosticListener)::: parser impl make parser:::errMgr->new->ListenerErrorManager->new->Context.ThrowErrorManager->return->new->jdk.nashorn.internal.parser.Parser
ParserImpl.ListenerErrorManager#error(String)::: listener error manager error:::new->ParserException->error
ParserImpl.ListenerErrorManager#error(ParserException)::: listener error manager error:::listener->new->DiagnosticImpl->report
ParserImpl.ListenerErrorManager#warning(String)::: listener error manager warning:::new->ParserException->warning
ParserImpl.ListenerErrorManager#warning(ParserException)::: listener error manager warning:::listener->new->DiagnosticImpl->report
ParserImpl#translate(FunctionNode)::: parser impl translate:::return->new->IRTranslator->translate
PropertyTree#getKey():::Returns the name of this property.:::
PropertyTree#getValue():::Returns the value of this property:::
PropertyTree#getGetter():::Returns the setter function of this property if this is an accessor property:::
PropertyTree#getSetter():::Returns the getter function of this property if this is an accessor property:::
PropertyTree#isStatic():::Is this a class static property?:::
PropertyTree#isComputed():::Is this a computed property?:::
PropertyTreeImpl#getKind()::: property tree impl get kind:::return
PropertyTreeImpl#getKey()::: property tree impl get key:::return
PropertyTreeImpl#getValue()::: property tree impl get value:::return
PropertyTreeImpl#getGetter()::: property tree impl get getter:::return
PropertyTreeImpl#getSetter()::: property tree impl get setter:::return
PropertyTreeImpl#isStatic()::: property tree impl is static:::return
PropertyTreeImpl#isComputed()::: property tree impl is computed:::return
PropertyTreeImpl#accept(TreeVisitor, D)::: property tree impl accept:::return->visitor->visitProperty
RegExpLiteralTree#getPattern():::Regular expression pattern to match.:::
RegExpLiteralTree#getOptions():::Regular expression matching options.:::
RegExpLiteralTreeImpl#getKind()::: reg exp literal tree impl get kind:::return
RegExpLiteralTreeImpl#getPattern()::: reg exp literal tree impl get pattern:::return
RegExpLiteralTreeImpl#getOptions()::: reg exp literal tree impl get options:::return
RegExpLiteralTreeImpl#accept(TreeVisitor, D)::: reg exp literal tree impl accept:::return->visitor->visitRegExpLiteral
ReturnTree#getExpression():::Returns the expression being returned:::
ReturnTreeImpl#getKind()::: return tree impl get kind:::return
ReturnTreeImpl#getExpression()::: return tree impl get expression:::return
ReturnTreeImpl#accept(TreeVisitor, D)::: return tree impl accept:::return->visitor->visitReturn
SimpleTreeVisitorES5_1#visitAssignment(AssignmentTree, P)::: simple tree visitor s5_1 visit assignment:::node->getVariable->accept->node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitCompoundAssignment(CompoundAssignmentTree, P)::: simple tree visitor s5_1 visit compound assignment:::node->getVariable->accept->node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitModule(ModuleTree, P):::Visits a ModuleTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitExportEntry(ExportEntryTree, P):::Visits an ExportEntryTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitImportEntry(ImportEntryTree, P):::Visits an ImportEntryTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitBinary(BinaryTree, P)::: simple tree visitor s5_1 visit binary:::node->getLeftOperand->accept->node->getRightOperand->accept->return
SimpleTreeVisitorES5_1#visitBlock(BlockTree, P)::: simple tree visitor s5_1 visit block:::node->getStatements->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitBreak(BreakTree, P)::: simple tree visitor s5_1 visit break:::return
SimpleTreeVisitorES5_1#visitCase(CaseTree, P)::: simple tree visitor s5_1 visit case:::caseVal->node->getExpression->if->caseVal->accept->node->getStatements->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitCatch(CatchTree, P)::: simple tree visitor s5_1 visit catch:::cond->node->getCondition->if->cond->accept->node->getParameter->accept->node->getBlock->accept->return
SimpleTreeVisitorES5_1#visitClassDeclaration(ClassDeclarationTree, P):::Visits a ClassDeclarationTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitClassExpression(ClassExpressionTree, P):::Visits a ClassExpressionTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitConditionalExpression(ConditionalExpressionTree, P)::: simple tree visitor s5_1 visit conditional expression:::node->getCondition->accept->node->getTrueExpression->accept->node->getFalseExpression->accept->return
SimpleTreeVisitorES5_1#visitContinue(ContinueTree, P)::: simple tree visitor s5_1 visit continue:::return
SimpleTreeVisitorES5_1#visitDebugger(DebuggerTree, P)::: simple tree visitor s5_1 visit debugger:::return
SimpleTreeVisitorES5_1#visitDoWhileLoop(DoWhileLoopTree, P)::: simple tree visitor s5_1 visit do while loop:::node->getStatement->accept->node->getCondition->accept->return
SimpleTreeVisitorES5_1#visitErroneous(ErroneousTree, P)::: simple tree visitor s5_1 visit erroneous:::return
SimpleTreeVisitorES5_1#visitExpressionStatement(ExpressionStatementTree, P)::: simple tree visitor s5_1 visit expression statement:::node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitForLoop(ForLoopTree, P)::: simple tree visitor s5_1 visit for loop:::init->node->getInitializer->if->init->accept->cond->node->getCondition->if->cond->accept->update->node->getUpdate->if->update->accept->node->getStatement->accept->return
SimpleTreeVisitorES5_1#visitForInLoop(ForInLoopTree, P)::: simple tree visitor s5_1 visit for in loop:::node->getVariable->accept->node->getExpression->accept->stat->node->getStatement->if->stat->accept->return
SimpleTreeVisitorES5_1#visitForOfLoop(ForOfLoopTree, P):::Visits a ForOfLoopTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitFunctionCall(FunctionCallTree, P)::: simple tree visitor s5_1 visit function call:::node->getFunctionSelect->accept->node->getArguments->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitFunctionDeclaration(FunctionDeclarationTree, P)::: simple tree visitor s5_1 visit function declaration:::node->getParameters->tree->accept->forEach->node->getBody->accept->return
SimpleTreeVisitorES5_1#visitFunctionExpression(FunctionExpressionTree, P)::: simple tree visitor s5_1 visit function expression:::node->getParameters->tree->accept->forEach->node->getBody->accept->return
SimpleTreeVisitorES5_1#visitIdentifier(IdentifierTree, P)::: simple tree visitor s5_1 visit identifier:::return
SimpleTreeVisitorES5_1#visitIf(IfTree, P)::: simple tree visitor s5_1 visit if:::node->getCondition->accept->node->getThenStatement->accept->elseStat->node->getElseStatement->if->elseStat->accept->return
SimpleTreeVisitorES5_1#visitArrayAccess(ArrayAccessTree, P)::: simple tree visitor s5_1 visit array access:::node->getExpression->accept->node->getIndex->accept->return
SimpleTreeVisitorES5_1#visitArrayLiteral(ArrayLiteralTree, P)::: simple tree visitor s5_1 visit array literal:::node->getElements->stream->filter->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitLabeledStatement(LabeledStatementTree, P)::: simple tree visitor s5_1 visit labeled statement:::node->getStatement->accept->return
SimpleTreeVisitorES5_1#visitLiteral(LiteralTree, P)::: simple tree visitor s5_1 visit literal:::return
SimpleTreeVisitorES5_1#visitParenthesized(ParenthesizedTree, P)::: simple tree visitor s5_1 visit parenthesized:::node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitReturn(ReturnTree, P)::: simple tree visitor s5_1 visit return:::retExpr->node->getExpression->if->retExpr->accept->return
SimpleTreeVisitorES5_1#visitMemberSelect(MemberSelectTree, P)::: simple tree visitor s5_1 visit member select:::node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitNew(NewTree, P)::: simple tree visitor s5_1 visit new:::node->getConstructorExpression->accept->return
SimpleTreeVisitorES5_1#visitObjectLiteral(ObjectLiteralTree, P)::: simple tree visitor s5_1 visit object literal:::node->getProperties->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitProperty(PropertyTree, P)::: simple tree visitor s5_1 visit property:::getter->node->getGetter->if->getter->accept->key->node->getKey->if->key->accept->setter->node->getSetter->if->setter->accept->value->node->getValue->if->value->accept->return
SimpleTreeVisitorES5_1#visitRegExpLiteral(RegExpLiteralTree, P)::: simple tree visitor s5_1 visit reg exp literal:::return
SimpleTreeVisitorES5_1#visitTemplateLiteral(TemplateLiteralTree, P):::Visits a TemplateLiteralTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitEmptyStatement(EmptyStatementTree, P)::: simple tree visitor s5_1 visit empty statement:::return
SimpleTreeVisitorES5_1#visitSpread(SpreadTree, P):::Visits a SpreadTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitSwitch(SwitchTree, P)::: simple tree visitor s5_1 visit switch:::node->getExpression->accept->node->getCases->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitThrow(ThrowTree, P)::: simple tree visitor s5_1 visit throw:::node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitCompilationUnit(CompilationUnitTree, P)::: simple tree visitor s5_1 visit compilation unit:::node->getSourceElements->tree->accept->forEach->return
SimpleTreeVisitorES5_1#visitTry(TryTree, P)::: simple tree visitor s5_1 visit try:::node->getBlock->accept->node->getCatches->tree->accept->forEach->finallyBlock->node->getFinallyBlock->if->finallyBlock->accept->return
SimpleTreeVisitorES5_1#visitInstanceOf(InstanceOfTree, P)::: simple tree visitor s5_1 visit instance of:::node->getType->accept->node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitUnary(UnaryTree, P)::: simple tree visitor s5_1 visit unary:::node->getExpression->accept->return
SimpleTreeVisitorES5_1#visitVariable(VariableTree, P)::: simple tree visitor s5_1 visit variable:::if->node->getInitializer->node->getInitializer->accept->return
SimpleTreeVisitorES5_1#visitWhileLoop(WhileLoopTree, P)::: simple tree visitor s5_1 visit while loop:::node->getCondition->accept->node->getStatement->accept->return
SimpleTreeVisitorES5_1#visitWith(WithTree, P)::: simple tree visitor s5_1 visit with:::node->getScope->accept->node->getStatement->accept->return
SimpleTreeVisitorES5_1#visitYield(YieldTree, P):::Visits a YieldTree tree by calling visitUnknown.:::return->visitUnknown
SimpleTreeVisitorES5_1#visitUnknown(Tree, P)::: simple tree visitor s5_1 visit unknown:::throw->new->UnknownTreeException
SimpleTreeVisitorES6#visitCompilationUnit(CompilationUnitTree, P)::: simple tree visitor s6 visit compilation unit:::mod->node->getModule->if->mod->accept->return->super->visitCompilationUnit
SimpleTreeVisitorES6#visitModule(ModuleTree, P):::Visit Module tree.:::node->getImportEntries->visitImportEntry->forEach->node->getLocalExportEntries->visitExportEntry->forEach->node->getIndirectExportEntries->visitExportEntry->forEach->node->getStarExportEntries->visitExportEntry->forEach->return
SimpleTreeVisitorES6#visitExportEntry(ExportEntryTree, P):::Visit Module ExportEntry tree.:::return
SimpleTreeVisitorES6#visitImportEntry(ImportEntryTree, P):::Visit Module ImportEntry tree.:::return
SimpleTreeVisitorES6#visitClassDeclaration(ClassDeclarationTree, P):::Visit class statement tree.:::node->getName->accept->heritage->node->getClassHeritage->if->heritage->accept->constructor->node->getConstructor->if->constructor->accept->elements->node->getClassElements->if->foreach->prop->accept->return
SimpleTreeVisitorES6#visitClassExpression(ClassExpressionTree, P):::Visit class expression tree.:::node->getName->accept->heritage->node->getClassHeritage->if->heritage->accept->constructor->node->getConstructor->if->constructor->accept->elements->node->getClassElements->if->foreach->prop->accept->return
SimpleTreeVisitorES6#visitForOfLoop(ForOfLoopTree, P):::Visit for..of statement tree.:::node->getVariable->accept->node->getExpression->accept->stat->node->getStatement->if->stat->accept->return
SimpleTreeVisitorES6#visitYield(YieldTree, P):::Visit 'yield' expression tree.:::node->getExpression->accept->return
SimpleTreeVisitorES6#visitSpread(SpreadTree, P):::Visit 'spread' expression tree.:::node->getExpression->accept->return
SimpleTreeVisitorES6#visitTemplateLiteral(TemplateLiteralTree, P):::Visit template literal tree.:::expressions->node->getExpressions->foreach->expr->accept->return
SimpleTreeVisitorES6#visitVariable(VariableTree, P)::: simple tree visitor s6 visit variable:::expr->node->getBinding->if->expr->accept->super->visitVariable->return
SpreadTree#getExpression():::Returns the expression that is being spread.:::
SpreadTreeImpl#getKind()::: spread tree impl get kind:::return
SpreadTreeImpl#getExpression()::: spread tree impl get expression:::return
SpreadTreeImpl#accept(TreeVisitor, D)::: spread tree impl accept:::return->visitor->visitSpread
SwitchTree#getExpression():::Returns the expression on which this statement switches.:::
SwitchTree#getCases():::Returns the list of 'case' statements.:::
SwitchTreeImpl#getKind()::: switch tree impl get kind:::return
SwitchTreeImpl#getExpression()::: switch tree impl get expression:::return
SwitchTreeImpl#getCases()::: switch tree impl get cases:::return
SwitchTreeImpl#accept(TreeVisitor, D)::: switch tree impl accept:::return->visitor->visitSwitch
TemplateLiteralTree#getExpressions():::Returns the list of expressions in this template string:::
TemplateLiteralTreeImpl#getKind()::: template literal tree impl get kind:::return
TemplateLiteralTreeImpl#getExpressions()::: template literal tree impl get expressions:::return
TemplateLiteralTreeImpl#accept(TreeVisitor, D)::: template literal tree impl accept:::return->visitor->visitTemplateLiteral
ThrowTree#getExpression():::Returns the expression being thrown.:::
ThrowTreeImpl#getKind()::: throw tree impl get kind:::return
ThrowTreeImpl#getExpression()::: throw tree impl get expression:::return
ThrowTreeImpl#accept(TreeVisitor, D)::: throw tree impl accept:::return->visitor->visitThrow
Tree#getStartPosition():::Start character offset of this Tree within the source.:::
Tree#getEndPosition():::End character offset of this Tree within the source.:::
Tree#getKind():::Gets the kind of this tree.:::
Tree#accept(TreeVisitor, D):::Accept method used to implement the visitor pattern:::
TreeImpl#getStartPosition()::: tree impl get start position:::return->node->getStart
TreeImpl#getEndPosition()::: tree impl get end position:::return->node->getFinish
TreeImpl#accept(TreeVisitor, D)::: tree impl accept:::return->visitor->visitUnknown
TreeImpl#getOperator(TokenType)::: tree impl get operator:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->AssertionError
TreeVisitor#visitAssignment(AssignmentTree, P):::Visit assignment tree.:::
TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P):::Visit compound assignment tree.:::
TreeVisitor#visitBinary(BinaryTree, P):::Visit binary expression tree.:::
TreeVisitor#visitBlock(BlockTree, P):::Visit block statement tree.:::
TreeVisitor#visitBreak(BreakTree, P):::Visit break statement tree.:::
TreeVisitor#visitCase(CaseTree, P):::Visit case statement tree.:::
TreeVisitor#visitCatch(CatchTree, P):::Visit catch block statement tree.:::
TreeVisitor#visitClassDeclaration(ClassDeclarationTree, P):::Visit class statement tree.:::
TreeVisitor#visitClassExpression(ClassExpressionTree, P):::Visit class expression tree.:::
TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P):::Visit conditional expression tree.:::
TreeVisitor#visitContinue(ContinueTree, P):::Visit continue statement tree.:::
TreeVisitor#visitDebugger(DebuggerTree, P):::Visit debugger statement tree.:::
TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P):::Visit do-while statement tree.:::
TreeVisitor#visitErroneous(ErroneousTree, P):::Visit error expression tree.:::
TreeVisitor#visitExpressionStatement(ExpressionStatementTree, P):::Visit expression statement tree.:::
TreeVisitor#visitForLoop(ForLoopTree, P):::Visit 'for' statement tree.:::
TreeVisitor#visitForInLoop(ForInLoopTree, P):::Visit for..in statement tree.:::
TreeVisitor#visitForOfLoop(ForOfLoopTree, P):::Visit for..of statement tree.:::
TreeVisitor#visitFunctionCall(FunctionCallTree, P):::Visit function call expression tree.:::
TreeVisitor#visitFunctionDeclaration(FunctionDeclarationTree, P):::Visit function declaration tree.:::
TreeVisitor#visitFunctionExpression(FunctionExpressionTree, P):::Visit function expression tree.:::
TreeVisitor#visitIdentifier(IdentifierTree, P):::Visit identifier tree.:::
TreeVisitor#visitIf(IfTree, P):::Visit 'if' statement tree.:::
TreeVisitor#visitArrayAccess(ArrayAccessTree, P):::Visit array access expression tree.:::
TreeVisitor#visitArrayLiteral(ArrayLiteralTree, P):::Visit array literal expression tree.:::
TreeVisitor#visitLabeledStatement(LabeledStatementTree, P):::Visit labeled statement tree.:::
TreeVisitor#visitLiteral(LiteralTree, P):::Visit literal expression tree.:::
TreeVisitor#visitParenthesized(ParenthesizedTree, P):::Visit parenthesized expression tree.:::
TreeVisitor#visitReturn(ReturnTree, P):::Visit return statement tree.:::
TreeVisitor#visitMemberSelect(MemberSelectTree, P):::Visit member select expression tree.:::
TreeVisitor#visitNew(NewTree, P):::Visit 'new' expression tree.:::
TreeVisitor#visitObjectLiteral(ObjectLiteralTree, P):::Visit object literal tree.:::
TreeVisitor#visitProperty(PropertyTree, P):::Visit a property of an object literal expression tree.:::
TreeVisitor#visitRegExpLiteral(RegExpLiteralTree, P):::Visit regular expression literal tree.:::
TreeVisitor#visitTemplateLiteral(TemplateLiteralTree, P):::Visit template literal tree.:::
TreeVisitor#visitEmptyStatement(EmptyStatementTree, P):::Visit an empty statement tree.:::
TreeVisitor#visitSpread(SpreadTree, P):::Visit 'spread' expression tree.:::
TreeVisitor#visitSwitch(SwitchTree, P):::Visit 'switch' statement tree.:::
TreeVisitor#visitThrow(ThrowTree, P):::Visit 'throw' expression tree.:::
TreeVisitor#visitCompilationUnit(CompilationUnitTree, P):::Visit compilation unit tree.:::
TreeVisitor#visitModule(ModuleTree, P):::Visit Module tree.:::
TreeVisitor#visitExportEntry(ExportEntryTree, P):::Visit Module ExportEntry tree.:::
TreeVisitor#visitImportEntry(ImportEntryTree, P):::Visit Module ImportEntry tree.:::
TreeVisitor#visitTry(TryTree, P):::Visit 'try' statement tree.:::
TreeVisitor#visitInstanceOf(InstanceOfTree, P):::Visit 'instanceof' expression tree.:::
TreeVisitor#visitUnary(UnaryTree, P):::Visit unary expression tree.:::
TreeVisitor#visitVariable(VariableTree, P):::Visit variable declaration tree.:::
TreeVisitor#visitWhileLoop(WhileLoopTree, P):::Visit 'while' statement tree.:::
TreeVisitor#visitWith(WithTree, P):::Visit 'with' statement tree.:::
TreeVisitor#visitYield(YieldTree, P):::Visit 'yield' expression tree.:::
TreeVisitor#visitUnknown(Tree, P):::Visit unknown expression/statement tree:::
TryTree#getBlock():::Returns the 'try' block of this 'try' statement.:::
TryTree#getCatches():::Returns the list of 'catch' statements associated with this 'try'.:::
TryTree#getFinallyBlock():::Returns the 'finally' block associated with this 'try':::
TryTreeImpl#getKind()::: try tree impl get kind:::return
TryTreeImpl#getBlock()::: try tree impl get block:::return
TryTreeImpl#getCatches()::: try tree impl get catches:::return
TryTreeImpl#getFinallyBlock()::: try tree impl get finally block:::return
TryTreeImpl#accept(TreeVisitor, D)::: try tree impl accept:::return->visitor->visitTry
UnaryTree#getExpression():::Returns the expression operated by the unary operator.:::
UnaryTreeImpl#getKind()::: unary tree impl get kind:::return
UnaryTreeImpl#getExpression()::: unary tree impl get expression:::return
UnaryTreeImpl#accept(TreeVisitor, D)::: unary tree impl accept:::return->visitor->visitUnary
UnknownTreeException#getUnknownTree():::Returns the unknown tree:::return
UnknownTreeException#getArgument():::Returns the additional argument:::return
VariableTree#getBinding():::Returns the binding of this declaration:::
VariableTree#getInitializer():::Returns the initial value expression for this variable:::
VariableTree#isConst():::Is this a const declaration?:::
VariableTree#isLet():::Is this a let declaration?:::
VariableTreeImpl#getKind()::: variable tree impl get kind:::return
VariableTreeImpl#getBinding()::: variable tree impl get binding:::return
VariableTreeImpl#getInitializer()::: variable tree impl get initializer:::return
VariableTreeImpl#isConst()::: variable tree impl is const:::return->isConst
VariableTreeImpl#isLet()::: variable tree impl is let:::return->isLet
VariableTreeImpl#accept(TreeVisitor, D)::: variable tree impl accept:::return->visitor->visitVariable
WhileLoopTree#getCondition():::The condition expression of this 'while' statement.:::
WhileLoopTree#getStatement():::The statement contained in this 'while' statement.:::
WhileLoopTreeImpl#getKind()::: while loop tree impl get kind:::return
WhileLoopTreeImpl#getCondition()::: while loop tree impl get condition:::return
WhileLoopTreeImpl#getStatement()::: while loop tree impl get statement:::return
WhileLoopTreeImpl#accept(TreeVisitor, D)::: while loop tree impl accept:::return->visitor->visitWhileLoop
WithTree#getScope():::The scope object expression for this 'with' statement.:::
WithTree#getStatement():::The statement contained in this 'with' statement.:::
WithTreeImpl#getKind()::: with tree impl get kind:::return
WithTreeImpl#getScope()::: with tree impl get scope:::return
WithTreeImpl#getStatement()::: with tree impl get statement:::return
WithTreeImpl#accept(TreeVisitor, D)::: with tree impl accept:::return->visitor->visitWith
YieldTree#getExpression():::Returns the expression that is yielded.:::
YieldTree#isStar():::Is this a yield * expression in a generator function?  For example:  function* id(){     yield 1;     yield * anotherGeneratorFunc();     yield 10; } :::
YieldTreeImpl#getKind()::: yield tree impl get kind:::return
YieldTreeImpl#getExpression()::: yield tree impl get expression:::return
YieldTreeImpl#isStar()::: yield tree impl is star:::return->isTokenType
YieldTreeImpl#accept(TreeVisitor, D)::: yield tree impl accept:::return->visitor->visitYield

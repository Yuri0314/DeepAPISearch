jdk.nashorn.api.tree.ArrayAccessTree#getExpression()->ExpressionTree:::Returns the array that is accessed.
jdk.nashorn.api.tree.ArrayAccessTree#getIndex()->ExpressionTree:::Returns the index of the array element accessed.
jdk.nashorn.api.tree.ArrayAccessTreeImpl#getKind()->Tree.Kind::: array access tree impl get kind
jdk.nashorn.api.tree.ArrayAccessTreeImpl#getExpression()->ExpressionTree::: array access tree impl get expression
jdk.nashorn.api.tree.ArrayAccessTreeImpl#getIndex()->ExpressionTree::: array access tree impl get index
jdk.nashorn.api.tree.ArrayAccessTreeImpl#accept(TreeVisitor, D)->R::: array access tree impl accept
jdk.nashorn.api.tree.ArrayLiteralTree#getElements()->List:::Returns the list of Array element expressions.
jdk.nashorn.api.tree.ArrayLiteralTreeImpl#getKind()->Tree.Kind::: array literal tree impl get kind
jdk.nashorn.api.tree.ArrayLiteralTreeImpl#getElements()->List::: array literal tree impl get elements
jdk.nashorn.api.tree.ArrayLiteralTreeImpl#accept(TreeVisitor, D)->R::: array literal tree impl accept
jdk.nashorn.api.tree.AssignmentTree#getVariable()->ExpressionTree:::Returns the left hand side (LHS) of this assignment.
jdk.nashorn.api.tree.AssignmentTree#getExpression()->ExpressionTree:::Returns the right hand side (RHS) of this assignment.
jdk.nashorn.api.tree.AssignmentTreeImpl#getKind()->Tree.Kind::: assignment tree impl get kind
jdk.nashorn.api.tree.AssignmentTreeImpl#getVariable()->ExpressionTree::: assignment tree impl get variable
jdk.nashorn.api.tree.AssignmentTreeImpl#getExpression()->ExpressionTree::: assignment tree impl get expression
jdk.nashorn.api.tree.AssignmentTreeImpl#accept(TreeVisitor, D)->R::: assignment tree impl accept
jdk.nashorn.api.tree.BinaryTree#getLeftOperand()->ExpressionTree:::Returns left hand side (LHS) of this binary expression.
jdk.nashorn.api.tree.BinaryTree#getRightOperand()->ExpressionTree:::Returns right hand side (RHS) of this binary expression.
jdk.nashorn.api.tree.BinaryTreeImpl#getKind()->Tree.Kind::: binary tree impl get kind
jdk.nashorn.api.tree.BinaryTreeImpl#getLeftOperand()->ExpressionTree::: binary tree impl get left operand
jdk.nashorn.api.tree.BinaryTreeImpl#getRightOperand()->ExpressionTree::: binary tree impl get right operand
jdk.nashorn.api.tree.BinaryTreeImpl#accept(TreeVisitor, D)->R::: binary tree impl accept
jdk.nashorn.api.tree.BlockTree#getStatements()->List:::Returns the list of statements in this block.
jdk.nashorn.api.tree.BlockTreeImpl#getKind()->Kind::: block tree impl get kind
jdk.nashorn.api.tree.BlockTreeImpl#getStatements()->List::: block tree impl get statements
jdk.nashorn.api.tree.BlockTreeImpl#accept(TreeVisitor, D)->R::: block tree impl accept
jdk.nashorn.api.tree.BreakTree#getLabel()->String:::Label associated with this break statement
jdk.nashorn.api.tree.BreakTreeImpl#getKind()->Tree.Kind::: break tree impl get kind
jdk.nashorn.api.tree.BreakTreeImpl#getLabel()->String::: break tree impl get label
jdk.nashorn.api.tree.BreakTreeImpl#accept(TreeVisitor, D)->R::: break tree impl accept
jdk.nashorn.api.tree.CaseTree#getExpression()->ExpressionTree:::Case expression of this 'case' statement.
jdk.nashorn.api.tree.CaseTree#getStatements()->List:::Return the list of statements for this 'case'.
jdk.nashorn.api.tree.CaseTreeImpl#getKind()->Kind::: case tree impl get kind
jdk.nashorn.api.tree.CaseTreeImpl#getExpression()->ExpressionTree::: case tree impl get expression
jdk.nashorn.api.tree.CaseTreeImpl#getStatements()->List::: case tree impl get statements
jdk.nashorn.api.tree.CaseTreeImpl#accept(TreeVisitor, D)->R::: case tree impl accept
jdk.nashorn.api.tree.CatchTree#getParameter()->ExpressionTree:::Returns the catch parameter identifier or parameter binding pattern of the exception caught.
jdk.nashorn.api.tree.CatchTree#getBlock()->BlockTree:::Returns the code block of this catch block.
jdk.nashorn.api.tree.CatchTree#getCondition()->ExpressionTree:::Returns the optional catch condition expression
jdk.nashorn.api.tree.CatchTreeImpl#getKind()->Kind::: catch tree impl get kind
jdk.nashorn.api.tree.CatchTreeImpl#getParameter()->ExpressionTree::: catch tree impl get parameter
jdk.nashorn.api.tree.CatchTreeImpl#getBlock()->BlockTree::: catch tree impl get block
jdk.nashorn.api.tree.CatchTreeImpl#getCondition()->ExpressionTree::: catch tree impl get condition
jdk.nashorn.api.tree.CatchTreeImpl#accept(TreeVisitor, D)->R::: catch tree impl accept
jdk.nashorn.api.tree.ClassDeclarationTree#getName()->IdentifierTree:::Class identifier.
jdk.nashorn.api.tree.ClassDeclarationTree#getClassHeritage()->ExpressionTree:::The expression of the extends clause
jdk.nashorn.api.tree.ClassDeclarationTree#getConstructor()->PropertyTree:::Get the constructor method definition.
jdk.nashorn.api.tree.ClassDeclarationTree#getClassElements()->List:::Get other property definitions except for the constructor.
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#getKind()->Tree.Kind::: class declaration tree impl get kind
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#getName()->IdentifierTree::: class declaration tree impl get name
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#getClassHeritage()->ExpressionTree::: class declaration tree impl get class heritage
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#getConstructor()->PropertyTree::: class declaration tree impl get constructor
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#getClassElements()->List::: class declaration tree impl get class elements
jdk.nashorn.api.tree.ClassDeclarationTreeImpl#accept(TreeVisitor, D)->R::: class declaration tree impl accept
jdk.nashorn.api.tree.ClassExpressionTree#getName()->IdentifierTree:::Class identifier
jdk.nashorn.api.tree.ClassExpressionTree#getClassHeritage()->ExpressionTree:::The expression of the extends clause
jdk.nashorn.api.tree.ClassExpressionTree#getConstructor()->PropertyTree:::Get the constructor method definition.
jdk.nashorn.api.tree.ClassExpressionTree#getClassElements()->List:::Get other property definitions except for the constructor.
jdk.nashorn.api.tree.ClassExpressionTreeImpl#getKind()->Kind::: class expression tree impl get kind
jdk.nashorn.api.tree.ClassExpressionTreeImpl#getName()->IdentifierTree::: class expression tree impl get name
jdk.nashorn.api.tree.ClassExpressionTreeImpl#getClassHeritage()->ExpressionTree::: class expression tree impl get class heritage
jdk.nashorn.api.tree.ClassExpressionTreeImpl#getConstructor()->PropertyTree::: class expression tree impl get constructor
jdk.nashorn.api.tree.ClassExpressionTreeImpl#getClassElements()->List::: class expression tree impl get class elements
jdk.nashorn.api.tree.ClassExpressionTreeImpl#accept(TreeVisitor, D)->R::: class expression tree impl accept
jdk.nashorn.api.tree.CompilationUnitTree#getSourceElements()->List:::Return the list of source elements in this compilation unit.
jdk.nashorn.api.tree.CompilationUnitTree#getSourceName()->String:::Return the source name of this script compilation unit.
jdk.nashorn.api.tree.CompilationUnitTree#isStrict()->boolean:::Returns if this is a ECMAScript "strict" compilation unit or not.
jdk.nashorn.api.tree.CompilationUnitTree#getLineMap()->LineMap:::Returns the line map for this compilation unit, if available
jdk.nashorn.api.tree.CompilationUnitTree#getModule()->ModuleTree:::Return the ModuleTree associated with this compilation unit
jdk.nashorn.api.tree.CompilationUnitTreeImpl#getKind()->Tree.Kind::: compilation unit tree impl get kind
jdk.nashorn.api.tree.CompilationUnitTreeImpl#getSourceElements()->List::: compilation unit tree impl get source elements
jdk.nashorn.api.tree.CompilationUnitTreeImpl#getSourceName()->String::: compilation unit tree impl get source name
jdk.nashorn.api.tree.CompilationUnitTreeImpl#isStrict()->boolean::: compilation unit tree impl is strict
jdk.nashorn.api.tree.CompilationUnitTreeImpl#getLineMap()->LineMap::: compilation unit tree impl get line map
jdk.nashorn.api.tree.CompilationUnitTreeImpl#getModule()->ModuleTree::: compilation unit tree impl get module
jdk.nashorn.api.tree.CompilationUnitTreeImpl#accept(TreeVisitor, D)->R::: compilation unit tree impl accept
jdk.nashorn.api.tree.CompoundAssignmentTree#getVariable()->ExpressionTree:::Returns the left hand side (LHS) of this assignment.
jdk.nashorn.api.tree.CompoundAssignmentTree#getExpression()->ExpressionTree:::Returns the right hand side (RHS) of this assignment.
jdk.nashorn.api.tree.CompoundAssignmentTreeImpl#getKind()->Kind::: compound assignment tree impl get kind
jdk.nashorn.api.tree.CompoundAssignmentTreeImpl#getVariable()->ExpressionTree::: compound assignment tree impl get variable
jdk.nashorn.api.tree.CompoundAssignmentTreeImpl#getExpression()->ExpressionTree::: compound assignment tree impl get expression
jdk.nashorn.api.tree.CompoundAssignmentTreeImpl#accept(TreeVisitor, D)->R::: compound assignment tree impl accept
jdk.nashorn.api.tree.ConditionalExpressionTree#getCondition()->ExpressionTree:::Returns the condition expression of this ternary expression.
jdk.nashorn.api.tree.ConditionalExpressionTree#getTrueExpression()->ExpressionTree:::Returns the true part of this ternary expression.
jdk.nashorn.api.tree.ConditionalExpressionTree#getFalseExpression()->ExpressionTree:::Returns the false part of this ternary expression.
jdk.nashorn.api.tree.ConditionalExpressionTreeImpl#getKind()->Kind::: conditional expression tree impl get kind
jdk.nashorn.api.tree.ConditionalExpressionTreeImpl#getCondition()->ExpressionTree::: conditional expression tree impl get condition
jdk.nashorn.api.tree.ConditionalExpressionTreeImpl#getTrueExpression()->ExpressionTree::: conditional expression tree impl get true expression
jdk.nashorn.api.tree.ConditionalExpressionTreeImpl#getFalseExpression()->ExpressionTree::: conditional expression tree impl get false expression
jdk.nashorn.api.tree.ConditionalExpressionTreeImpl#accept(TreeVisitor, D)->R::: conditional expression tree impl accept
jdk.nashorn.api.tree.ConditionalLoopTree#getCondition()->ExpressionTree:::Returns the condition expression of this 'loop' statement.
jdk.nashorn.api.tree.ContinueTree#getLabel()->String:::Label associated with this continue statement
jdk.nashorn.api.tree.ContinueTreeImpl#getKind()->Tree.Kind::: continue tree impl get kind
jdk.nashorn.api.tree.ContinueTreeImpl#getLabel()->String::: continue tree impl get label
jdk.nashorn.api.tree.ContinueTreeImpl#accept(TreeVisitor, D)->R::: continue tree impl accept
jdk.nashorn.api.tree.DebuggerTreeImpl#getKind()->Tree.Kind::: debugger tree impl get kind
jdk.nashorn.api.tree.DebuggerTreeImpl#accept(TreeVisitor, D)->R::: debugger tree impl accept
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#getKind()->Kind::: destructuring decl tree impl get kind
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#getBinding()->ExpressionTree::: destructuring decl tree impl get binding
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#getInitializer()->ExpressionTree::: destructuring decl tree impl get initializer
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#isConst()->boolean::: destructuring decl tree impl is const
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#isLet()->boolean::: destructuring decl tree impl is let
jdk.nashorn.api.tree.DestructuringDeclTreeImpl#accept(TreeVisitor, D)->R::: destructuring decl tree impl accept
jdk.nashorn.api.tree.Diagnostic#getKind()->Kind:::Gets the kind of this diagnostic, for example, error or warning.
jdk.nashorn.api.tree.Diagnostic#getPosition()->long:::Gets a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem
jdk.nashorn.api.tree.Diagnostic#getFileName()->String:::Gets the source file name.
jdk.nashorn.api.tree.Diagnostic#getLineNumber()->long:::Gets the line number of the character offset returned by #getPosition().
jdk.nashorn.api.tree.Diagnostic#getColumnNumber()->long:::Gets the column number of the character offset returned by #getPosition().
jdk.nashorn.api.tree.Diagnostic#getCode()->String:::Gets a diagnostic code indicating the type of diagnostic
jdk.nashorn.api.tree.Diagnostic#getMessage()->String:::Gets a message for this diagnostic.
jdk.nashorn.api.tree.DiagnosticImpl#getKind()->Kind::: diagnostic impl get kind
jdk.nashorn.api.tree.DiagnosticImpl#getPosition()->long::: diagnostic impl get position
jdk.nashorn.api.tree.DiagnosticImpl#getFileName()->String::: diagnostic impl get file name
jdk.nashorn.api.tree.DiagnosticImpl#getLineNumber()->long::: diagnostic impl get line number
jdk.nashorn.api.tree.DiagnosticImpl#getColumnNumber()->long::: diagnostic impl get column number
jdk.nashorn.api.tree.DiagnosticImpl#getCode()->String::: diagnostic impl get code
jdk.nashorn.api.tree.DiagnosticImpl#getMessage()->String::: diagnostic impl get message
jdk.nashorn.api.tree.DiagnosticImpl#toString()->String::: diagnostic impl to string
jdk.nashorn.api.tree.DiagnosticListener#report(Diagnostic)->void:::Invoked whenever a parsing problem is found.
jdk.nashorn.api.tree.DoWhileLoopTree#getCondition()->ExpressionTree:::Returns the condition expression of this do-while statement.
jdk.nashorn.api.tree.DoWhileLoopTree#getStatement()->StatementTree:::The statement contained within this do-while statement.
jdk.nashorn.api.tree.DoWhileLoopTreeImpl#getKind()->Kind::: do while loop tree impl get kind
jdk.nashorn.api.tree.DoWhileLoopTreeImpl#getCondition()->ExpressionTree::: do while loop tree impl get condition
jdk.nashorn.api.tree.DoWhileLoopTreeImpl#getStatement()->StatementTree::: do while loop tree impl get statement
jdk.nashorn.api.tree.DoWhileLoopTreeImpl#accept(TreeVisitor, D)->R::: do while loop tree impl accept
jdk.nashorn.api.tree.EmptyStatementTreeImpl#getKind()->Kind::: empty statement tree impl get kind
jdk.nashorn.api.tree.EmptyStatementTreeImpl#accept(TreeVisitor, D)->R::: empty statement tree impl accept
jdk.nashorn.api.tree.ErroneousTreeImpl#getKind()->Kind::: erroneous tree impl get kind
jdk.nashorn.api.tree.ErroneousTreeImpl#accept(TreeVisitor, D)->R::: erroneous tree impl accept
jdk.nashorn.api.tree.ExportEntryTree#getExportName()->IdentifierTree:::Returns the entry's export name.
jdk.nashorn.api.tree.ExportEntryTree#getModuleRequest()->IdentifierTree:::Returns the entry's module request.
jdk.nashorn.api.tree.ExportEntryTree#getImportName()->IdentifierTree:::Returns the entry's import name.
jdk.nashorn.api.tree.ExportEntryTree#getLocalName()->IdentifierTree:::Returns the entry's local name.
jdk.nashorn.api.tree.ExportEntryTreeImpl#createExportList(List)->List::: export entry tree impl create export list
jdk.nashorn.api.tree.ExportEntryTreeImpl#getKind()->Kind::: export entry tree impl get kind
jdk.nashorn.api.tree.ExportEntryTreeImpl#accept(TreeVisitor, D)->R::: export entry tree impl accept
jdk.nashorn.api.tree.ExportEntryTreeImpl#getStartPosition()->long::: export entry tree impl get start position
jdk.nashorn.api.tree.ExportEntryTreeImpl#getEndPosition()->long::: export entry tree impl get end position
jdk.nashorn.api.tree.ExportEntryTreeImpl#getExportName()->IdentifierTree::: export entry tree impl get export name
jdk.nashorn.api.tree.ExportEntryTreeImpl#getModuleRequest()->IdentifierTree::: export entry tree impl get module request
jdk.nashorn.api.tree.ExportEntryTreeImpl#getImportName()->IdentifierTree::: export entry tree impl get import name
jdk.nashorn.api.tree.ExportEntryTreeImpl#getLocalName()->IdentifierTree::: export entry tree impl get local name
jdk.nashorn.api.tree.ExpressionStatementTree#getExpression()->ExpressionTree:::Returns the expression of this expression statement.
jdk.nashorn.api.tree.ExpressionStatementTreeImpl#getKind()->Kind::: expression statement tree impl get kind
jdk.nashorn.api.tree.ExpressionStatementTreeImpl#getExpression()->ExpressionTree::: expression statement tree impl get expression
jdk.nashorn.api.tree.ExpressionStatementTreeImpl#accept(TreeVisitor, D)->R::: expression statement tree impl accept
jdk.nashorn.api.tree.ForInLoopTree#getVariable()->ExpressionTree:::The for..in left hand side expression.
jdk.nashorn.api.tree.ForInLoopTree#getExpression()->ExpressionTree:::The object or array being whose properties are iterated.
jdk.nashorn.api.tree.ForInLoopTree#getStatement()->StatementTree:::The statement contained in this for..in statement.
jdk.nashorn.api.tree.ForInLoopTree#isForEach()->boolean:::Returns if this is a for..each..in statement or not.
jdk.nashorn.api.tree.ForInLoopTreeImpl#getKind()->Kind::: for in loop tree impl get kind
jdk.nashorn.api.tree.ForInLoopTreeImpl#getVariable()->ExpressionTree::: for in loop tree impl get variable
jdk.nashorn.api.tree.ForInLoopTreeImpl#getExpression()->ExpressionTree::: for in loop tree impl get expression
jdk.nashorn.api.tree.ForInLoopTreeImpl#getStatement()->StatementTree::: for in loop tree impl get statement
jdk.nashorn.api.tree.ForInLoopTreeImpl#isForEach()->boolean::: for in loop tree impl is for each
jdk.nashorn.api.tree.ForInLoopTreeImpl#accept(TreeVisitor, D)->R::: for in loop tree impl accept
jdk.nashorn.api.tree.ForLoopTree#getInitializer()->ExpressionTree:::Returns the initializer expression of this 'for' statement.
jdk.nashorn.api.tree.ForLoopTree#getCondition()->ExpressionTree:::Returns the condition expression of this 'for' statement.
jdk.nashorn.api.tree.ForLoopTree#getUpdate()->ExpressionTree:::Returns the update expression of this 'for' statement.
jdk.nashorn.api.tree.ForLoopTree#getStatement()->StatementTree:::Returns the statement contained in this 'for' statement.
jdk.nashorn.api.tree.ForLoopTreeImpl#getKind()->Kind::: for loop tree impl get kind
jdk.nashorn.api.tree.ForLoopTreeImpl#getInitializer()->ExpressionTree::: for loop tree impl get initializer
jdk.nashorn.api.tree.ForLoopTreeImpl#getCondition()->ExpressionTree::: for loop tree impl get condition
jdk.nashorn.api.tree.ForLoopTreeImpl#getUpdate()->ExpressionTree::: for loop tree impl get update
jdk.nashorn.api.tree.ForLoopTreeImpl#getStatement()->StatementTree::: for loop tree impl get statement
jdk.nashorn.api.tree.ForLoopTreeImpl#accept(TreeVisitor, D)->R::: for loop tree impl accept
jdk.nashorn.api.tree.ForOfLoopTree#getVariable()->ExpressionTree:::The for..of left hand side expression.
jdk.nashorn.api.tree.ForOfLoopTree#getExpression()->ExpressionTree:::The object or array being whose properties are iterated.
jdk.nashorn.api.tree.ForOfLoopTree#getStatement()->StatementTree:::The statement contained in this for..of statement.
jdk.nashorn.api.tree.ForOfLoopTreeImpl#getKind()->Kind::: for of loop tree impl get kind
jdk.nashorn.api.tree.ForOfLoopTreeImpl#getVariable()->ExpressionTree::: for of loop tree impl get variable
jdk.nashorn.api.tree.ForOfLoopTreeImpl#getExpression()->ExpressionTree::: for of loop tree impl get expression
jdk.nashorn.api.tree.ForOfLoopTreeImpl#getStatement()->StatementTree::: for of loop tree impl get statement
jdk.nashorn.api.tree.ForOfLoopTreeImpl#accept(TreeVisitor, D)->R::: for of loop tree impl accept
jdk.nashorn.api.tree.FunctionCallTree#getFunctionSelect()->ExpressionTree:::Returns the function being called.
jdk.nashorn.api.tree.FunctionCallTree#getArguments()->List:::Returns the list of arguments being passed to this function call.
jdk.nashorn.api.tree.FunctionCallTreeImpl#getKind()->Kind::: function call tree impl get kind
jdk.nashorn.api.tree.FunctionCallTreeImpl#getFunctionSelect()->ExpressionTree::: function call tree impl get function select
jdk.nashorn.api.tree.FunctionCallTreeImpl#getArguments()->List::: function call tree impl get arguments
jdk.nashorn.api.tree.FunctionCallTreeImpl#accept(TreeVisitor, D)->R::: function call tree impl accept
jdk.nashorn.api.tree.FunctionDeclarationTree#getName()->IdentifierTree:::Returns the name of the function being declared.
jdk.nashorn.api.tree.FunctionDeclarationTree#getParameters()->List:::Returns the parameters of this function.
jdk.nashorn.api.tree.FunctionDeclarationTree#getBody()->BlockTree:::Returns the body of code of this function.
jdk.nashorn.api.tree.FunctionDeclarationTree#isStrict()->boolean:::Is this a strict function?
jdk.nashorn.api.tree.FunctionDeclarationTree#isGenerator()->boolean:::Is this a generator function?
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#getKind()->Kind::: function declaration tree impl get kind
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#getName()->IdentifierTree::: function declaration tree impl get name
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#getParameters()->List::: function declaration tree impl get parameters
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#getBody()->BlockTree::: function declaration tree impl get body
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#isStrict()->boolean::: function declaration tree impl is strict
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#isGenerator()->boolean::: function declaration tree impl is generator
jdk.nashorn.api.tree.FunctionDeclarationTreeImpl#accept(TreeVisitor, D)->R::: function declaration tree impl accept
jdk.nashorn.api.tree.FunctionExpressionTree#getName()->IdentifierTree:::Returns the name of the function being declared.
jdk.nashorn.api.tree.FunctionExpressionTree#getParameters()->List:::Returns the parameters of this function.
jdk.nashorn.api.tree.FunctionExpressionTree#getBody()->Tree:::Returns the body of this function
jdk.nashorn.api.tree.FunctionExpressionTree#isStrict()->boolean:::Is this a strict function?
jdk.nashorn.api.tree.FunctionExpressionTree#isArrow()->boolean:::Is this a arrow function?
jdk.nashorn.api.tree.FunctionExpressionTree#isGenerator()->boolean:::Is this a generator function?
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#getKind()->Tree.Kind::: function expression tree impl get kind
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#getName()->IdentifierTree::: function expression tree impl get name
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#getParameters()->List::: function expression tree impl get parameters
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#getBody()->Tree::: function expression tree impl get body
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#isStrict()->boolean::: function expression tree impl is strict
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#isArrow()->boolean::: function expression tree impl is arrow
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#isGenerator()->boolean::: function expression tree impl is generator
jdk.nashorn.api.tree.FunctionExpressionTreeImpl#accept(TreeVisitor, D)->R::: function expression tree impl accept
jdk.nashorn.api.tree.GotoTree#getLabel()->String:::Label associated with this goto statement
jdk.nashorn.api.tree.IdentifierTree#getName()->String:::Returns the name of this identifier.
jdk.nashorn.api.tree.IdentifierTree#isRestParameter()->boolean:::Is this a rest parameter for a function or rest elements of an array?
jdk.nashorn.api.tree.IdentifierTree#isSuper()->boolean:::Is this super identifier?
jdk.nashorn.api.tree.IdentifierTree#isThis()->boolean:::Is this 'this' identifier?
jdk.nashorn.api.tree.IdentifierTree#isStar()->boolean:::Is this "*" used in module export entry?
jdk.nashorn.api.tree.IdentifierTree#isDefault()->boolean:::Is this "default" used in module export entry?
jdk.nashorn.api.tree.IdentifierTree#isStarDefaultStar()->boolean:::Is this "*default*" used in module export entry?
jdk.nashorn.api.tree.IdentifierTreeImpl#getKind()->Kind::: identifier tree impl get kind
jdk.nashorn.api.tree.IdentifierTreeImpl#getName()->String::: identifier tree impl get name
jdk.nashorn.api.tree.IdentifierTreeImpl#isRestParameter()->boolean::: identifier tree impl is rest parameter
jdk.nashorn.api.tree.IdentifierTreeImpl#isSuper()->boolean::: identifier tree impl is super
jdk.nashorn.api.tree.IdentifierTreeImpl#isThis()->boolean::: identifier tree impl is this
jdk.nashorn.api.tree.IdentifierTreeImpl#isStar()->boolean::: identifier tree impl is star
jdk.nashorn.api.tree.IdentifierTreeImpl#isDefault()->boolean::: identifier tree impl is default
jdk.nashorn.api.tree.IdentifierTreeImpl#isStarDefaultStar()->boolean::: identifier tree impl is star default star
jdk.nashorn.api.tree.IdentifierTreeImpl#accept(TreeVisitor, D)->R::: identifier tree impl accept
jdk.nashorn.api.tree.IfTree#getCondition()->ExpressionTree:::Returns the condition expression of this 'if' statement.
jdk.nashorn.api.tree.IfTree#getThenStatement()->StatementTree:::Returns the 'then' statement of this 'if' statement.
jdk.nashorn.api.tree.IfTree#getElseStatement()->StatementTree:::Returns the then statement of this 'if' statement
jdk.nashorn.api.tree.IfTreeImpl#getKind()->Kind::: if tree impl get kind
jdk.nashorn.api.tree.IfTreeImpl#getCondition()->ExpressionTree::: if tree impl get condition
jdk.nashorn.api.tree.IfTreeImpl#getThenStatement()->StatementTree::: if tree impl get then statement
jdk.nashorn.api.tree.IfTreeImpl#getElseStatement()->StatementTree::: if tree impl get else statement
jdk.nashorn.api.tree.IfTreeImpl#accept(TreeVisitor, D)->R::: if tree impl accept
jdk.nashorn.api.tree.ImportEntryTree#getModuleRequest()->IdentifierTree:::Returns the entry's module request.
jdk.nashorn.api.tree.ImportEntryTree#getImportName()->IdentifierTree:::Returns the entry's import name.
jdk.nashorn.api.tree.ImportEntryTree#getLocalName()->IdentifierTree:::Returns the entry's local name.
jdk.nashorn.api.tree.ImportEntryTreeImpl#createImportList(List)->List::: import entry tree impl create import list
jdk.nashorn.api.tree.ImportEntryTreeImpl#getKind()->Kind::: import entry tree impl get kind
jdk.nashorn.api.tree.ImportEntryTreeImpl#accept(TreeVisitor, D)->R::: import entry tree impl accept
jdk.nashorn.api.tree.ImportEntryTreeImpl#getStartPosition()->long::: import entry tree impl get start position
jdk.nashorn.api.tree.ImportEntryTreeImpl#getEndPosition()->long::: import entry tree impl get end position
jdk.nashorn.api.tree.ImportEntryTreeImpl#getModuleRequest()->IdentifierTree::: import entry tree impl get module request
jdk.nashorn.api.tree.ImportEntryTreeImpl#getImportName()->IdentifierTree::: import entry tree impl get import name
jdk.nashorn.api.tree.ImportEntryTreeImpl#getLocalName()->IdentifierTree::: import entry tree impl get local name
jdk.nashorn.api.tree.InstanceOfTree#getExpression()->ExpressionTree:::Returns the expression whose type is being checked.
jdk.nashorn.api.tree.InstanceOfTree#getType()->Tree:::Returns the type expression.
jdk.nashorn.api.tree.InstanceOfTreeImpl#getKind()->Kind::: instance of tree impl get kind
jdk.nashorn.api.tree.InstanceOfTreeImpl#getExpression()->ExpressionTree::: instance of tree impl get expression
jdk.nashorn.api.tree.InstanceOfTreeImpl#getType()->Tree::: instance of tree impl get type
jdk.nashorn.api.tree.InstanceOfTreeImpl#accept(TreeVisitor, D)->R::: instance of tree impl accept
jdk.nashorn.api.tree.IRTranslator#translate(FunctionNode)->CompilationUnitTree::: translator translate
jdk.nashorn.api.tree.IRTranslator#enterAccessNode(AccessNode)->boolean::: translator enter access node
jdk.nashorn.api.tree.IRTranslator#enterBlock(Block)->boolean::: translator enter block
jdk.nashorn.api.tree.IRTranslator#enterBinaryNode(BinaryNode)->boolean::: translator enter binary node
jdk.nashorn.api.tree.IRTranslator#enterBreakNode(BreakNode)->boolean::: translator enter break node
jdk.nashorn.api.tree.IRTranslator#enterCallNode(CallNode)->boolean::: translator enter call node
jdk.nashorn.api.tree.IRTranslator#enterCaseNode(CaseNode)->boolean::: translator enter case node
jdk.nashorn.api.tree.IRTranslator#enterCatchNode(CatchNode)->boolean::: translator enter catch node
jdk.nashorn.api.tree.IRTranslator#enterContinueNode(ContinueNode)->boolean::: translator enter continue node
jdk.nashorn.api.tree.IRTranslator#enterDebuggerNode(DebuggerNode)->boolean::: translator enter debugger node
jdk.nashorn.api.tree.IRTranslator#enterEmptyNode(EmptyNode)->boolean::: translator enter empty node
jdk.nashorn.api.tree.IRTranslator#enterErrorNode(ErrorNode)->boolean::: translator enter error node
jdk.nashorn.api.tree.IRTranslator#enterExpressionStatement(ExpressionStatement)->boolean::: translator enter expression statement
jdk.nashorn.api.tree.IRTranslator#enterBlockStatement(BlockStatement)->boolean::: translator enter block statement
jdk.nashorn.api.tree.IRTranslator#enterForNode(ForNode)->boolean::: translator enter for node
jdk.nashorn.api.tree.IRTranslator#enterFunctionNode(FunctionNode)->boolean::: translator enter function node
jdk.nashorn.api.tree.IRTranslator#enterIdentNode(IdentNode)->boolean::: translator enter ident node
jdk.nashorn.api.tree.IRTranslator#enterIfNode(IfNode)->boolean::: translator enter if node
jdk.nashorn.api.tree.IRTranslator#enterIndexNode(IndexNode)->boolean::: translator enter index node
jdk.nashorn.api.tree.IRTranslator#enterLabelNode(LabelNode)->boolean::: translator enter label node
jdk.nashorn.api.tree.IRTranslator#enterLiteralNode(LiteralNode)->boolean::: translator enter literal node
jdk.nashorn.api.tree.IRTranslator#enterObjectNode(ObjectNode)->boolean::: translator enter object node
jdk.nashorn.api.tree.IRTranslator#enterPropertyNode(PropertyNode)->boolean::: translator enter property node
jdk.nashorn.api.tree.IRTranslator#enterReturnNode(ReturnNode)->boolean::: translator enter return node
jdk.nashorn.api.tree.IRTranslator#enterRuntimeNode(RuntimeNode)->boolean::: translator enter runtime node
jdk.nashorn.api.tree.IRTranslator#enterSplitNode(SplitNode)->boolean::: translator enter split node
jdk.nashorn.api.tree.IRTranslator#enterSwitchNode(SwitchNode)->boolean::: translator enter switch node
jdk.nashorn.api.tree.IRTranslator#enterTemplateLiteral(TemplateLiteral)->boolean::: translator enter template literal
jdk.nashorn.api.tree.IRTranslator#enterTernaryNode(TernaryNode)->boolean::: translator enter ternary node
jdk.nashorn.api.tree.IRTranslator#enterThrowNode(ThrowNode)->boolean::: translator enter throw node
jdk.nashorn.api.tree.IRTranslator#enterTryNode(TryNode)->boolean::: translator enter try node
jdk.nashorn.api.tree.IRTranslator#enterUnaryNode(UnaryNode)->boolean::: translator enter unary node
jdk.nashorn.api.tree.IRTranslator#enterVarNode(VarNode)->boolean::: translator enter var node
jdk.nashorn.api.tree.IRTranslator#enterWhileNode(WhileNode)->boolean::: translator enter while node
jdk.nashorn.api.tree.IRTranslator#enterWithNode(WithNode)->boolean::: translator enter with node
jdk.nashorn.api.tree.IRTranslator#enterClassNode(ClassNode)->boolean:::Callback for entering a ClassNode
jdk.nashorn.api.tree.LabeledStatementTree#getLabel()->String:::Returns the label associated with this statement.
jdk.nashorn.api.tree.LabeledStatementTree#getStatement()->StatementTree:::Returns the statement being labeled.
jdk.nashorn.api.tree.LabeledStatementTreeImpl#getKind()->Kind::: labeled statement tree impl get kind
jdk.nashorn.api.tree.LabeledStatementTreeImpl#getLabel()->String::: labeled statement tree impl get label
jdk.nashorn.api.tree.LabeledStatementTreeImpl#getStatement()->StatementTree::: labeled statement tree impl get statement
jdk.nashorn.api.tree.LabeledStatementTreeImpl#accept(TreeVisitor, D)->R::: labeled statement tree impl accept
jdk.nashorn.api.tree.LineMap#getLineNumber(long)->long:::Find the line containing a position; a line termination character is on the line it terminates.
jdk.nashorn.api.tree.LineMap#getColumnNumber(long)->long:::Find the column for a character position
jdk.nashorn.api.tree.LineMapImpl#getLineNumber(long)->long::: line map impl get line number
jdk.nashorn.api.tree.LineMapImpl#getColumnNumber(long)->long::: line map impl get column number
jdk.nashorn.api.tree.LiteralTree#getValue()->Object:::Returns the value of this literal.
jdk.nashorn.api.tree.LiteralTreeImpl#getKind()->Kind::: literal tree impl get kind
jdk.nashorn.api.tree.LiteralTreeImpl#getValue()->Object::: literal tree impl get value
jdk.nashorn.api.tree.LiteralTreeImpl#accept(TreeVisitor, D)->R::: literal tree impl accept
jdk.nashorn.api.tree.LoopTree#getStatement()->StatementTree:::Returns the statement contained in this 'loop' statement.
jdk.nashorn.api.tree.MemberSelectTree#getExpression()->ExpressionTree:::The object expression whose member is being selected.
jdk.nashorn.api.tree.MemberSelectTree#getIdentifier()->String:::Returns the name of the property.
jdk.nashorn.api.tree.MemberSelectTreeImpl#getKind()->Kind::: member select tree impl get kind
jdk.nashorn.api.tree.MemberSelectTreeImpl#getExpression()->ExpressionTree::: member select tree impl get expression
jdk.nashorn.api.tree.MemberSelectTreeImpl#getIdentifier()->String::: member select tree impl get identifier
jdk.nashorn.api.tree.MemberSelectTreeImpl#accept(TreeVisitor, D)->R::: member select tree impl accept
jdk.nashorn.api.tree.ModuleTree#getImportEntries()->List:::Returns the list of import entries.
jdk.nashorn.api.tree.ModuleTree#getLocalExportEntries()->List:::Returns the list of local export entries.
jdk.nashorn.api.tree.ModuleTree#getIndirectExportEntries()->List:::Returns the list of indirect export entries.
jdk.nashorn.api.tree.ModuleTree#getStarExportEntries()->List:::Returns the list of star export entries.
jdk.nashorn.api.tree.ModuleTreeImpl#create(FunctionNode)->ModuleTreeImpl::: module tree impl create
jdk.nashorn.api.tree.ModuleTreeImpl#getKind()->Kind::: module tree impl get kind
jdk.nashorn.api.tree.ModuleTreeImpl#getImportEntries()->List::: module tree impl get import entries
jdk.nashorn.api.tree.ModuleTreeImpl#getLocalExportEntries()->List::: module tree impl get local export entries
jdk.nashorn.api.tree.ModuleTreeImpl#getIndirectExportEntries()->List::: module tree impl get indirect export entries
jdk.nashorn.api.tree.ModuleTreeImpl#getStarExportEntries()->List::: module tree impl get star export entries
jdk.nashorn.api.tree.ModuleTreeImpl#accept(TreeVisitor, D)->R::: module tree impl accept
jdk.nashorn.api.tree.ModuleTreeImpl#identOrNull(IdentNode)->IdentifierTree::: module tree impl ident or null
jdk.nashorn.api.tree.NewTree#getConstructorExpression()->ExpressionTree:::Returns the constructor expression of this 'new' expression.
jdk.nashorn.api.tree.NewTreeImpl#getKind()->Kind::: new tree impl get kind
jdk.nashorn.api.tree.NewTreeImpl#getConstructorExpression()->ExpressionTree::: new tree impl get constructor expression
jdk.nashorn.api.tree.NewTreeImpl#accept(TreeVisitor, D)->R::: new tree impl accept
jdk.nashorn.api.tree.ObjectLiteralTree#getProperties()->List:::Returns the list of properties of this object literal.
jdk.nashorn.api.tree.ObjectLiteralTreeImpl#getKind()->Kind::: object literal tree impl get kind
jdk.nashorn.api.tree.ObjectLiteralTreeImpl#getProperties()->List::: object literal tree impl get properties
jdk.nashorn.api.tree.ObjectLiteralTreeImpl#accept(TreeVisitor, D)->R::: object literal tree impl accept
jdk.nashorn.api.tree.ParenthesizedTree#getExpression()->ExpressionTree:::Returns the expression within the parenthesis.
jdk.nashorn.api.tree.Parser#parse(File, DiagnosticListener)->CompilationUnitTree:::Parses the source file and returns compilation unit tree
jdk.nashorn.api.tree.Parser#parse(Path, DiagnosticListener)->CompilationUnitTree:::Parses the source Path and returns compilation unit tree
jdk.nashorn.api.tree.Parser#parse(URL, DiagnosticListener)->CompilationUnitTree:::Parses the source url and returns compilation unit tree
jdk.nashorn.api.tree.Parser#parse(String, Reader, DiagnosticListener)->CompilationUnitTree:::Parses the reader and returns compilation unit tree
jdk.nashorn.api.tree.Parser#parse(String, String, DiagnosticListener)->CompilationUnitTree:::Parses the string source and returns compilation unit tree
jdk.nashorn.api.tree.Parser#parse(ScriptObjectMirror, DiagnosticListener)->CompilationUnitTree:::Parses the source from script object and returns compilation unit tree
jdk.nashorn.api.tree.Parser#create(String...)->Parser:::Factory method to create a new instance of Parser.
jdk.nashorn.api.tree.ParserImpl#parse(File, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.ParserImpl#parse(Path, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.ParserImpl#parse(URL, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.ParserImpl#parse(String, Reader, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.ParserImpl#parse(String, String, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.ParserImpl#parse(ScriptObjectMirror, DiagnosticListener)->CompilationUnitTree::: parser impl parse
jdk.nashorn.api.tree.PropertyTree#getKey()->ExpressionTree:::Returns the name of this property.
jdk.nashorn.api.tree.PropertyTree#getValue()->ExpressionTree:::Returns the value of this property
jdk.nashorn.api.tree.PropertyTree#getGetter()->FunctionExpressionTree:::Returns the setter function of this property if this is an accessor property
jdk.nashorn.api.tree.PropertyTree#getSetter()->FunctionExpressionTree:::Returns the getter function of this property if this is an accessor property
jdk.nashorn.api.tree.PropertyTree#isStatic()->boolean:::Is this a class static property?
jdk.nashorn.api.tree.PropertyTree#isComputed()->boolean:::Is this a computed property?
jdk.nashorn.api.tree.PropertyTreeImpl#getKind()->Kind::: property tree impl get kind
jdk.nashorn.api.tree.PropertyTreeImpl#getKey()->ExpressionTree::: property tree impl get key
jdk.nashorn.api.tree.PropertyTreeImpl#getValue()->ExpressionTree::: property tree impl get value
jdk.nashorn.api.tree.PropertyTreeImpl#getGetter()->FunctionExpressionTree::: property tree impl get getter
jdk.nashorn.api.tree.PropertyTreeImpl#getSetter()->FunctionExpressionTree::: property tree impl get setter
jdk.nashorn.api.tree.PropertyTreeImpl#isStatic()->boolean::: property tree impl is static
jdk.nashorn.api.tree.PropertyTreeImpl#isComputed()->boolean::: property tree impl is computed
jdk.nashorn.api.tree.PropertyTreeImpl#accept(TreeVisitor, D)->R::: property tree impl accept
jdk.nashorn.api.tree.RegExpLiteralTree#getPattern()->String:::Regular expression pattern to match.
jdk.nashorn.api.tree.RegExpLiteralTree#getOptions()->String:::Regular expression matching options.
jdk.nashorn.api.tree.RegExpLiteralTreeImpl#getKind()->Kind::: reg exp literal tree impl get kind
jdk.nashorn.api.tree.RegExpLiteralTreeImpl#getPattern()->String::: reg exp literal tree impl get pattern
jdk.nashorn.api.tree.RegExpLiteralTreeImpl#getOptions()->String::: reg exp literal tree impl get options
jdk.nashorn.api.tree.RegExpLiteralTreeImpl#accept(TreeVisitor, D)->R::: reg exp literal tree impl accept
jdk.nashorn.api.tree.ReturnTree#getExpression()->ExpressionTree:::Returns the expression being returned
jdk.nashorn.api.tree.ReturnTreeImpl#getKind()->Tree.Kind::: return tree impl get kind
jdk.nashorn.api.tree.ReturnTreeImpl#getExpression()->ExpressionTree::: return tree impl get expression
jdk.nashorn.api.tree.ReturnTreeImpl#accept(TreeVisitor, D)->R::: return tree impl accept
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitAssignment(AssignmentTree, P)->R::: simple tree visitor s5_1 visit assignment
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitCompoundAssignment(CompoundAssignmentTree, P)->R::: simple tree visitor s5_1 visit compound assignment
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitModule(ModuleTree, P)->R:::Visits a ModuleTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitExportEntry(ExportEntryTree, P)->R:::Visits an ExportEntryTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitImportEntry(ImportEntryTree, P)->R:::Visits an ImportEntryTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitBinary(BinaryTree, P)->R::: simple tree visitor s5_1 visit binary
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitBlock(BlockTree, P)->R::: simple tree visitor s5_1 visit block
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitBreak(BreakTree, P)->R::: simple tree visitor s5_1 visit break
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitCase(CaseTree, P)->R::: simple tree visitor s5_1 visit case
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitCatch(CatchTree, P)->R::: simple tree visitor s5_1 visit catch
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitClassDeclaration(ClassDeclarationTree, P)->R:::Visits a ClassDeclarationTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitClassExpression(ClassExpressionTree, P)->R:::Visits a ClassExpressionTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitConditionalExpression(ConditionalExpressionTree, P)->R::: simple tree visitor s5_1 visit conditional expression
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitContinue(ContinueTree, P)->R::: simple tree visitor s5_1 visit continue
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitDebugger(DebuggerTree, P)->R::: simple tree visitor s5_1 visit debugger
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitDoWhileLoop(DoWhileLoopTree, P)->R::: simple tree visitor s5_1 visit do while loop
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitErroneous(ErroneousTree, P)->R::: simple tree visitor s5_1 visit erroneous
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitExpressionStatement(ExpressionStatementTree, P)->R::: simple tree visitor s5_1 visit expression statement
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitForLoop(ForLoopTree, P)->R::: simple tree visitor s5_1 visit for loop
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitForInLoop(ForInLoopTree, P)->R::: simple tree visitor s5_1 visit for in loop
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitForOfLoop(ForOfLoopTree, P)->R:::Visits a ForOfLoopTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitFunctionCall(FunctionCallTree, P)->R::: simple tree visitor s5_1 visit function call
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitFunctionDeclaration(FunctionDeclarationTree, P)->R::: simple tree visitor s5_1 visit function declaration
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitFunctionExpression(FunctionExpressionTree, P)->R::: simple tree visitor s5_1 visit function expression
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitIdentifier(IdentifierTree, P)->R::: simple tree visitor s5_1 visit identifier
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitIf(IfTree, P)->R::: simple tree visitor s5_1 visit if
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitArrayAccess(ArrayAccessTree, P)->R::: simple tree visitor s5_1 visit array access
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitArrayLiteral(ArrayLiteralTree, P)->R::: simple tree visitor s5_1 visit array literal
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitLabeledStatement(LabeledStatementTree, P)->R::: simple tree visitor s5_1 visit labeled statement
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitLiteral(LiteralTree, P)->R::: simple tree visitor s5_1 visit literal
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitParenthesized(ParenthesizedTree, P)->R::: simple tree visitor s5_1 visit parenthesized
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitReturn(ReturnTree, P)->R::: simple tree visitor s5_1 visit return
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitMemberSelect(MemberSelectTree, P)->R::: simple tree visitor s5_1 visit member select
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitNew(NewTree, P)->R::: simple tree visitor s5_1 visit new
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitObjectLiteral(ObjectLiteralTree, P)->R::: simple tree visitor s5_1 visit object literal
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitProperty(PropertyTree, P)->R::: simple tree visitor s5_1 visit property
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitRegExpLiteral(RegExpLiteralTree, P)->R::: simple tree visitor s5_1 visit reg exp literal
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitTemplateLiteral(TemplateLiteralTree, P)->R:::Visits a TemplateLiteralTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitEmptyStatement(EmptyStatementTree, P)->R::: simple tree visitor s5_1 visit empty statement
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitSpread(SpreadTree, P)->R:::Visits a SpreadTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitSwitch(SwitchTree, P)->R::: simple tree visitor s5_1 visit switch
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitThrow(ThrowTree, P)->R::: simple tree visitor s5_1 visit throw
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitCompilationUnit(CompilationUnitTree, P)->R::: simple tree visitor s5_1 visit compilation unit
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitTry(TryTree, P)->R::: simple tree visitor s5_1 visit try
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitInstanceOf(InstanceOfTree, P)->R::: simple tree visitor s5_1 visit instance of
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitUnary(UnaryTree, P)->R::: simple tree visitor s5_1 visit unary
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitVariable(VariableTree, P)->R::: simple tree visitor s5_1 visit variable
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitWhileLoop(WhileLoopTree, P)->R::: simple tree visitor s5_1 visit while loop
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitWith(WithTree, P)->R::: simple tree visitor s5_1 visit with
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitYield(YieldTree, P)->R:::Visits a YieldTree tree by calling visitUnknown.
jdk.nashorn.api.tree.SimpleTreeVisitorES5_1#visitUnknown(Tree, P)->R::: simple tree visitor s5_1 visit unknown
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitCompilationUnit(CompilationUnitTree, P)->R::: simple tree visitor s6 visit compilation unit
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitModule(ModuleTree, P)->R:::Visit Module tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitExportEntry(ExportEntryTree, P)->R:::Visit Module ExportEntry tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitImportEntry(ImportEntryTree, P)->R:::Visit Module ImportEntry tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitClassDeclaration(ClassDeclarationTree, P)->R:::Visit class statement tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitClassExpression(ClassExpressionTree, P)->R:::Visit class expression tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitForOfLoop(ForOfLoopTree, P)->R:::Visit for..of statement tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitYield(YieldTree, P)->R:::Visit 'yield' expression tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitSpread(SpreadTree, P)->R:::Visit 'spread' expression tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitTemplateLiteral(TemplateLiteralTree, P)->R:::Visit template literal tree.
jdk.nashorn.api.tree.SimpleTreeVisitorES6#visitVariable(VariableTree, P)->R::: simple tree visitor s6 visit variable
jdk.nashorn.api.tree.SpreadTree#getExpression()->ExpressionTree:::Returns the expression that is being spread.
jdk.nashorn.api.tree.SpreadTreeImpl#getKind()->Tree.Kind::: spread tree impl get kind
jdk.nashorn.api.tree.SpreadTreeImpl#getExpression()->ExpressionTree::: spread tree impl get expression
jdk.nashorn.api.tree.SpreadTreeImpl#accept(TreeVisitor, D)->R::: spread tree impl accept
jdk.nashorn.api.tree.SwitchTree#getExpression()->ExpressionTree:::Returns the expression on which this statement switches.
jdk.nashorn.api.tree.SwitchTree#getCases()->List:::Returns the list of 'case' statements.
jdk.nashorn.api.tree.SwitchTreeImpl#getKind()->Kind::: switch tree impl get kind
jdk.nashorn.api.tree.SwitchTreeImpl#getExpression()->ExpressionTree::: switch tree impl get expression
jdk.nashorn.api.tree.SwitchTreeImpl#getCases()->List::: switch tree impl get cases
jdk.nashorn.api.tree.SwitchTreeImpl#accept(TreeVisitor, D)->R::: switch tree impl accept
jdk.nashorn.api.tree.TemplateLiteralTree#getExpressions()->List:::Returns the list of expressions in this template string
jdk.nashorn.api.tree.TemplateLiteralTreeImpl#getKind()->Kind::: template literal tree impl get kind
jdk.nashorn.api.tree.TemplateLiteralTreeImpl#getExpressions()->List::: template literal tree impl get expressions
jdk.nashorn.api.tree.TemplateLiteralTreeImpl#accept(TreeVisitor, D)->R::: template literal tree impl accept
jdk.nashorn.api.tree.ThrowTree#getExpression()->ExpressionTree:::Returns the expression being thrown.
jdk.nashorn.api.tree.ThrowTreeImpl#getKind()->Kind::: throw tree impl get kind
jdk.nashorn.api.tree.ThrowTreeImpl#getExpression()->ExpressionTree::: throw tree impl get expression
jdk.nashorn.api.tree.ThrowTreeImpl#accept(TreeVisitor, D)->R::: throw tree impl accept
jdk.nashorn.api.tree.Tree#getStartPosition()->long:::Start character offset of this Tree within the source.
jdk.nashorn.api.tree.Tree#getEndPosition()->long:::End character offset of this Tree within the source.
jdk.nashorn.api.tree.Tree#getKind()->Kind:::Gets the kind of this tree.
jdk.nashorn.api.tree.Tree#accept(TreeVisitor, D)->R:::Accept method used to implement the visitor pattern
jdk.nashorn.api.tree.TreeImpl#getStartPosition()->long::: tree impl get start position
jdk.nashorn.api.tree.TreeImpl#getEndPosition()->long::: tree impl get end position
jdk.nashorn.api.tree.TreeImpl#accept(TreeVisitor, D)->R::: tree impl accept
jdk.nashorn.api.tree.TreeImpl#getOperator(TokenType)->Kind::: tree impl get operator
jdk.nashorn.api.tree.TreeVisitor#visitAssignment(AssignmentTree, P)->R:::Visit assignment tree.
jdk.nashorn.api.tree.TreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P)->R:::Visit compound assignment tree.
jdk.nashorn.api.tree.TreeVisitor#visitBinary(BinaryTree, P)->R:::Visit binary expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitBlock(BlockTree, P)->R:::Visit block statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitBreak(BreakTree, P)->R:::Visit break statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitCase(CaseTree, P)->R:::Visit case statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitCatch(CatchTree, P)->R:::Visit catch block statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitClassDeclaration(ClassDeclarationTree, P)->R:::Visit class statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitClassExpression(ClassExpressionTree, P)->R:::Visit class expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P)->R:::Visit conditional expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitContinue(ContinueTree, P)->R:::Visit continue statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitDebugger(DebuggerTree, P)->R:::Visit debugger statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P)->R:::Visit do-while statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitErroneous(ErroneousTree, P)->R:::Visit error expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitExpressionStatement(ExpressionStatementTree, P)->R:::Visit expression statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitForLoop(ForLoopTree, P)->R:::Visit 'for' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitForInLoop(ForInLoopTree, P)->R:::Visit for..in statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitForOfLoop(ForOfLoopTree, P)->R:::Visit for..of statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitFunctionCall(FunctionCallTree, P)->R:::Visit function call expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitFunctionDeclaration(FunctionDeclarationTree, P)->R:::Visit function declaration tree.
jdk.nashorn.api.tree.TreeVisitor#visitFunctionExpression(FunctionExpressionTree, P)->R:::Visit function expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitIdentifier(IdentifierTree, P)->R:::Visit identifier tree.
jdk.nashorn.api.tree.TreeVisitor#visitIf(IfTree, P)->R:::Visit 'if' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitArrayAccess(ArrayAccessTree, P)->R:::Visit array access expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitArrayLiteral(ArrayLiteralTree, P)->R:::Visit array literal expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitLabeledStatement(LabeledStatementTree, P)->R:::Visit labeled statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitLiteral(LiteralTree, P)->R:::Visit literal expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitParenthesized(ParenthesizedTree, P)->R:::Visit parenthesized expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitReturn(ReturnTree, P)->R:::Visit return statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitMemberSelect(MemberSelectTree, P)->R:::Visit member select expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitNew(NewTree, P)->R:::Visit 'new' expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitObjectLiteral(ObjectLiteralTree, P)->R:::Visit object literal tree.
jdk.nashorn.api.tree.TreeVisitor#visitProperty(PropertyTree, P)->R:::Visit a property of an object literal expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitRegExpLiteral(RegExpLiteralTree, P)->R:::Visit regular expression literal tree.
jdk.nashorn.api.tree.TreeVisitor#visitTemplateLiteral(TemplateLiteralTree, P)->R:::Visit template literal tree.
jdk.nashorn.api.tree.TreeVisitor#visitEmptyStatement(EmptyStatementTree, P)->R:::Visit an empty statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitSpread(SpreadTree, P)->R:::Visit 'spread' expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitSwitch(SwitchTree, P)->R:::Visit 'switch' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitThrow(ThrowTree, P)->R:::Visit 'throw' expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitCompilationUnit(CompilationUnitTree, P)->R:::Visit compilation unit tree.
jdk.nashorn.api.tree.TreeVisitor#visitModule(ModuleTree, P)->R:::Visit Module tree.
jdk.nashorn.api.tree.TreeVisitor#visitExportEntry(ExportEntryTree, P)->R:::Visit Module ExportEntry tree.
jdk.nashorn.api.tree.TreeVisitor#visitImportEntry(ImportEntryTree, P)->R:::Visit Module ImportEntry tree.
jdk.nashorn.api.tree.TreeVisitor#visitTry(TryTree, P)->R:::Visit 'try' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitInstanceOf(InstanceOfTree, P)->R:::Visit 'instanceof' expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitUnary(UnaryTree, P)->R:::Visit unary expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitVariable(VariableTree, P)->R:::Visit variable declaration tree.
jdk.nashorn.api.tree.TreeVisitor#visitWhileLoop(WhileLoopTree, P)->R:::Visit 'while' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitWith(WithTree, P)->R:::Visit 'with' statement tree.
jdk.nashorn.api.tree.TreeVisitor#visitYield(YieldTree, P)->R:::Visit 'yield' expression tree.
jdk.nashorn.api.tree.TreeVisitor#visitUnknown(Tree, P)->R:::Visit unknown expression/statement tree
jdk.nashorn.api.tree.TryTree#getBlock()->BlockTree:::Returns the 'try' block of this 'try' statement.
jdk.nashorn.api.tree.TryTree#getCatches()->List:::Returns the list of 'catch' statements associated with this 'try'.
jdk.nashorn.api.tree.TryTree#getFinallyBlock()->BlockTree:::Returns the 'finally' block associated with this 'try'
jdk.nashorn.api.tree.TryTreeImpl#getKind()->Kind::: try tree impl get kind
jdk.nashorn.api.tree.TryTreeImpl#getBlock()->BlockTree::: try tree impl get block
jdk.nashorn.api.tree.TryTreeImpl#getCatches()->List::: try tree impl get catches
jdk.nashorn.api.tree.TryTreeImpl#getFinallyBlock()->BlockTree::: try tree impl get finally block
jdk.nashorn.api.tree.TryTreeImpl#accept(TreeVisitor, D)->R::: try tree impl accept
jdk.nashorn.api.tree.UnaryTree#getExpression()->ExpressionTree:::Returns the expression operated by the unary operator.
jdk.nashorn.api.tree.UnaryTreeImpl#getKind()->Kind::: unary tree impl get kind
jdk.nashorn.api.tree.UnaryTreeImpl#getExpression()->ExpressionTree::: unary tree impl get expression
jdk.nashorn.api.tree.UnaryTreeImpl#accept(TreeVisitor, D)->R::: unary tree impl accept
jdk.nashorn.api.tree.UnknownTreeException#getUnknownTree()->Tree:::Returns the unknown tree
jdk.nashorn.api.tree.UnknownTreeException#getArgument()->Object:::Returns the additional argument
jdk.nashorn.api.tree.VariableTree#getBinding()->ExpressionTree:::Returns the binding of this declaration
jdk.nashorn.api.tree.VariableTree#getInitializer()->ExpressionTree:::Returns the initial value expression for this variable
jdk.nashorn.api.tree.VariableTree#isConst()->boolean:::Is this a const declaration?
jdk.nashorn.api.tree.VariableTree#isLet()->boolean:::Is this a let declaration?
jdk.nashorn.api.tree.VariableTreeImpl#getKind()->Kind::: variable tree impl get kind
jdk.nashorn.api.tree.VariableTreeImpl#getBinding()->ExpressionTree::: variable tree impl get binding
jdk.nashorn.api.tree.VariableTreeImpl#getInitializer()->ExpressionTree::: variable tree impl get initializer
jdk.nashorn.api.tree.VariableTreeImpl#isConst()->boolean::: variable tree impl is const
jdk.nashorn.api.tree.VariableTreeImpl#isLet()->boolean::: variable tree impl is let
jdk.nashorn.api.tree.VariableTreeImpl#accept(TreeVisitor, D)->R::: variable tree impl accept
jdk.nashorn.api.tree.WhileLoopTree#getCondition()->ExpressionTree:::The condition expression of this 'while' statement.
jdk.nashorn.api.tree.WhileLoopTree#getStatement()->StatementTree:::The statement contained in this 'while' statement.
jdk.nashorn.api.tree.WhileLoopTreeImpl#getKind()->Tree.Kind::: while loop tree impl get kind
jdk.nashorn.api.tree.WhileLoopTreeImpl#getCondition()->ExpressionTree::: while loop tree impl get condition
jdk.nashorn.api.tree.WhileLoopTreeImpl#getStatement()->StatementTree::: while loop tree impl get statement
jdk.nashorn.api.tree.WhileLoopTreeImpl#accept(TreeVisitor, D)->R::: while loop tree impl accept
jdk.nashorn.api.tree.WithTree#getScope()->ExpressionTree:::The scope object expression for this 'with' statement.
jdk.nashorn.api.tree.WithTree#getStatement()->StatementTree:::The statement contained in this 'with' statement.
jdk.nashorn.api.tree.WithTreeImpl#getKind()->Kind::: with tree impl get kind
jdk.nashorn.api.tree.WithTreeImpl#getScope()->ExpressionTree::: with tree impl get scope
jdk.nashorn.api.tree.WithTreeImpl#getStatement()->StatementTree::: with tree impl get statement
jdk.nashorn.api.tree.WithTreeImpl#accept(TreeVisitor, D)->R::: with tree impl accept
jdk.nashorn.api.tree.YieldTree#getExpression()->ExpressionTree:::Returns the expression that is yielded.
jdk.nashorn.api.tree.YieldTree#isStar()->boolean:::Is this a yield * expression in a generator function?  For example:  function* id(){     yield 1;     yield * anotherGeneratorFunc();     yield 10; } 
jdk.nashorn.api.tree.YieldTreeImpl#getKind()->Kind::: yield tree impl get kind
jdk.nashorn.api.tree.YieldTreeImpl#getExpression()->ExpressionTree::: yield tree impl get expression
jdk.nashorn.api.tree.YieldTreeImpl#isStar()->boolean::: yield tree impl is star
jdk.nashorn.api.tree.YieldTreeImpl#accept(TreeVisitor, D)->R::: yield tree impl accept

Schema#newValidator():::Creates a new Validator for this Schema:::
Schema#newValidatorHandler():::Creates a new ValidatorHandler for this Schema:::
SchemaFactory#newDefaultInstance():::Creates a new instance of the SchemaFactory builtin system-default implementation.:::return->new->XMLSchemaFactory
SchemaFactory#newInstance(String):::Lookup an implementation of the SchemaFactory that supports the specified schema language and return it:::cl->SecuritySupport->getContextClassLoader->if->getClassLoader->f->new->SchemaFactoryFinder->newFactory->if->throw->new->IllegalArgumentException->return
SchemaFactory#newInstance(String, String, ClassLoader):::Obtain a new instance of a SchemaFactory from class name:::cl->if->SecuritySupport->getContextClassLoader->f->new->SchemaFactoryFinder->createInstance->if->throw->new->IllegalArgumentException->if->f->isSchemaLanguageSupported->return->else->throw->f->getClass->getName->new->IllegalArgumentException
SchemaFactory#isSchemaLanguageSupported(String):::Is specified schema supported by this SchemaFactory?:::
SchemaFactory#getFeature(String):::Look up the value of a feature flag:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
SchemaFactory#setFeature(String, boolean):::Set a feature for this SchemaFactory, Schemas created by this factory, and by extension, Validators and ValidatorHandlers created by those Schemas:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
SchemaFactory#setProperty(String, Object):::Set the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
SchemaFactory#getProperty(String):::Look up the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
SchemaFactory#setErrorHandler(ErrorHandler):::Sets the ErrorHandler to receive errors encountered during the newSchema method invocation:::
SchemaFactory#getErrorHandler():::Gets the current ErrorHandler set to this SchemaFactory.:::
SchemaFactory#setResourceResolver(LSResourceResolver):::Sets the LSResourceResolver to customize resource resolution when parsing schemas:::
SchemaFactory#getResourceResolver():::Gets the current LSResourceResolver set to this SchemaFactory.:::
SchemaFactory#newSchema(Source):::Parses the specified source as a schema and returns it as a schema:::return->new->SourceArr->newSchema
SchemaFactory#newSchema(File):::Parses the specified File as a schema and returns it as a Schema:::return->new->StreamSource->newSchema
SchemaFactory#newSchema(URL):::Parses the specified URL as a schema and returns it as a Schema:::return->schema->toExternalForm->new->StreamSource->newSchema
SchemaFactory#newSchema(Source[]):::Parses the specified source(s) as a schema and returns it as a schema:::
SchemaFactory#newSchema():::Creates a special Schema object:::
SchemaFactoryFinder#debugPrintln(Supplier):::Conditional debug printing.:::if->msgGen->get->println
SchemaFactoryFinder#debugDisplayClassLoader()::: schema factory finder debug display class loader:::try->if->SecuritySupport->getContextClassLoader->debugPrintln->return->catch->finally->if->ClassLoader->getSystemClassLoader->debugPrintln->return->debugPrintln
SchemaFactoryFinder#newFactory(String):::Creates a new SchemaFactory object for the specified schema language.:::if->throw->new->NullPointerException->f->_newFactory->if->f->getClass->getName->debugPrintln->else->debugPrintln->return
SchemaFactoryFinder#_newFactory(String):::Lookup a SchemaFactory for the given schemaLanguage.:::sf->propertyName->SERVICE_CLASS->getName->try->debugPrintln->r->SecuritySupport->getSystemProperty->if->debugPrintln->createInstance->if->return->else->debugPrintln->catch->if->debugPrintln->t->printStackTrace->finally->javah->SecuritySupport->getSystemProperty->configFile->try->if->synchronized->if->f->new->File->if->SecuritySupport->doesFileExist->debugPrintln->cacheProps->SecuritySupport->getFileInputStream->load->factoryClassName->cacheProps->getProperty->debugPrintln->if->createInstance->if->return->catch->if->ex->printStackTrace->finally->factoryImpl->findServiceProvider->if->return->if->schemaLanguage->equals->debugPrintln->return->new->XMLSchemaFactory->debugPrintln->return
SchemaFactoryFinder#createClass(String):::Create class using appropriate ClassLoader.:::clazz->internal->if->System->getSecurityManager->if->className->startsWith->try->if->Class->forName->else->Class->forName->catch->if->t->printStackTrace->return->finally->return
SchemaFactoryFinder#createInstance(String):::Creates an instance of the specified and returns it.:::schemaFactory->debugPrintln->clazz->createClass->if->debugPrintln->return->which->debugPrintln->try->if->isAssignableFrom->throw->clazz->getName->new->ClassCastException->clazz->getConstructor->newInstance->catch->clazz->getName->debugPrintln->if->ex->printStackTrace->return->finally->return
SchemaFactoryFinder#isSchemaLanguageSupportedBy(SchemaFactory, String, AccessControlContext)::: schema factory finder is schema language supported by:::return->AccessController->new->PrivilegedAction<Boolean>->doPrivileged
SchemaFactoryFinder#findServiceProvider(String):::Finds a service provider subclass of SchemaFactory that supports the given schema language using the ServiceLoader.:::acc->AccessController->getContext->try->return->AccessController->new->PrivilegedAction<SchemaFactory>->doPrivileged->catch->throw->new->SchemaFactoryConfigurationError->finally
SchemaFactoryFinder#which(Class)::: schema factory finder which:::return->SecuritySupport->getClassSource
SchemaFactoryLoader#newFactory(String):::Creates a new SchemaFactory object for the specified schema language.:::
TypeInfoProvider#getElementTypeInfo():::Returns the immutable TypeInfo object for the current element.  The method may only be called by the startElement event or the endElement event of the org.xml.sax.ContentHandler that the application sets to the ValidatorHandler.  When W3C XML Schema validation is being performed, in the case where an element has a union type, the TypeInfo returned by a call to getElementTypeInfo() from the startElement event will be the union type:::
TypeInfoProvider#getAttributeTypeInfo(int):::Returns the immutable TypeInfo object for the specified attribute of the current element:::
TypeInfoProvider#isIdAttribute(int):::Returns true if the specified attribute is determined to be ID:::
TypeInfoProvider#isSpecified(int):::Returns false if the attribute was added by the validator:::
Validator#reset():::Reset this Validator to its original configuration:::
Validator#validate(Source):::Validates the specified input:::validate
Validator#validate(Source, Result):::Validates the specified input and send the augmented validation result to the specified output:::
Validator#setErrorHandler(ErrorHandler):::Sets the ErrorHandler to receive errors encountered during the validate method invocation:::
Validator#getErrorHandler():::Gets the current ErrorHandler set to this Validator.:::
Validator#setResourceResolver(LSResourceResolver):::Sets the LSResourceResolver to customize resource resolution while in a validation episode:::
Validator#getResourceResolver():::Gets the current LSResourceResolver set to this Validator.:::
Validator#getFeature(String):::Look up the value of a feature flag:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
Validator#setFeature(String, boolean):::Set the value of a feature flag:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
Validator#setProperty(String, Object):::Set the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
Validator#getProperty(String):::Look up the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
ValidatorHandler#setContentHandler(ContentHandler):::Sets the ContentHandler which receives the augmented validation result:::
ValidatorHandler#getContentHandler():::Gets the ContentHandler which receives the augmented validation result.:::
ValidatorHandler#setErrorHandler(ErrorHandler):::Sets the ErrorHandler to receive errors encountered during the validation:::
ValidatorHandler#getErrorHandler():::Gets the current ErrorHandler set to this ValidatorHandler.:::
ValidatorHandler#setResourceResolver(LSResourceResolver):::Sets the LSResourceResolver to customize resource resolution while in a validation episode:::
ValidatorHandler#getResourceResolver():::Gets the current LSResourceResolver set to this ValidatorHandler.:::
ValidatorHandler#getTypeInfoProvider():::Obtains the TypeInfoProvider implementation of this ValidatorHandler:::
ValidatorHandler#getFeature(String):::Look up the value of a feature flag:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
ValidatorHandler#setFeature(String, boolean):::Set a feature for this ValidatorHandler.  Feature can be used to control the way a ValidatorHandler parses schemas:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
ValidatorHandler#setProperty(String, Object):::Set the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException
ValidatorHandler#getProperty(String):::Look up the value of a property:::if->throw->new->NullPointerException->throw->new->SAXNotRecognizedException

org.graalvm.compiler.core.GraalCompilerOptions_OptionDescriptors#get(String)->OptionDescriptor::: graal compiler options_ option descriptors get
org.graalvm.compiler.core.GraalCompilerOptions_OptionDescriptors#iterator()->Iterator::: graal compiler options_ option descriptors iterator
org.graalvm.compiler.core.CompilationPrinter#begin(OptionValues, CompilationIdentifier, JavaMethod, int)->CompilationPrinter:::Gets an object that will report statistics for a compilation if GraalCompilerOptions#PrintCompilation is enabled and TTY is not suppressed
org.graalvm.compiler.core.CompilationPrinter#finish(CompilationResult)->void:::Notifies this object that the compilation finished and the informational line should be printed to TTY.
org.graalvm.compiler.core.CompilationWrapper#handleException(Throwable)->T:::Handles an uncaught exception.
org.graalvm.compiler.core.CompilationWrapper#lookupAction(OptionValues, Throwable)->ExceptionAction:::Gets the action to take based on the value of GraalCompilerOptions#CompilationBailoutAsFailure, GraalCompilerOptions#CompilationFailureAction and GraalCompilerOptions#ExitVMOnException in options
org.graalvm.compiler.core.CompilationWrapper#performCompilation(DebugContext)->T:::Perform the compilation wrapped by this object.
org.graalvm.compiler.core.CompilationWrapper#toString()->String:::Gets a value that represents the input to the compilation.
org.graalvm.compiler.core.CompilationWrapper#createRetryDebugContext(DebugContext, OptionValues, PrintStream)->DebugContext:::Creates the DebugContext to use when retrying a compilation.
org.graalvm.compiler.core.CompilationWrapper#run(DebugContext)->T::: compilation wrapper run
org.graalvm.compiler.core.CompilationWrapper#exitHostVM(int)->void:::Calls System#exit(int) in the runtime embedding the Graal compiler
org.graalvm.compiler.core.CompilerThread#run()->void::: compiler thread run
org.graalvm.compiler.core.CompilerThreadFactory#newThread(Runnable)->Thread::: compiler thread factory new thread
org.graalvm.compiler.core.GraalCompiler.Request#execute()->T:::Executes this compilation request.
org.graalvm.compiler.core.GraalCompiler#compileGraph(StructuredGraph, ResolvedJavaMethod, Providers, Backend, PhaseSuite, OptimisticOptimizations, ProfilingInfo, Suites, LIRSuites, T, CompilationResultBuilderFactory, boolean)->T:::Requests compilation of a given graph.
org.graalvm.compiler.core.GraalCompiler#compile(Request)->T:::Services a given compilation request.
org.graalvm.compiler.core.GraalCompiler#emitFrontEnd(Providers, TargetProvider, StructuredGraph, PhaseSuite, OptimisticOptimizations, ProfilingInfo, Suites)->void:::Builds the graph, optimizes it.
org.graalvm.compiler.core.GraalCompiler#getCompilationUnitName(StructuredGraph, T)->String::: graal compiler get compilation unit name
org.graalvm.compiler.core.GraalServiceThread#run()->void::: graal service thread run
org.graalvm.compiler.core.LIRGenerationPhase#run(TargetDescription, LIRGenerationResult, LIRGenerationPhase.LIRGenerationContext)->void::: generation phase run

Arg#getQName():::Get the qualified name for this argument.:::return
Arg#setQName(QName):::Set the qualified name for this argument.:::
Arg#getVal():::Get the value for this argument.:::return
Arg#setVal(XObject):::Set the value of this argument.:::
Arg#detach():::Have the object release it's resources:::if->m_val->allowDetachToRelease->m_val->detach
Arg#getExpression():::Get the value expression for this argument.:::return
Arg#setExpression(String):::Set the value expression for this argument.:::
Arg#isFromWithParam():::Tell if this variable is a parameter passed with a with-param or as a top-level parameter.:::return
Arg#isVisible():::Tell if this variable is currently visible.:::return
Arg#setIsVisible(boolean):::Update visibility status of this variable.:::
Arg#hashCode()::: arg hash code:::return->Objects->hashCode
Arg#equals(Object):::Equality function specialized for the variable name:::if->return->m_qname->equals->else->return->super->equals
CachedXPathAPI#getXPathContext():::Returns the XPathSupport object used in this CachedXPathAPI  %REVIEW% I'm somewhat concerned about the loss of encapsulation this causes, but the xml-security folks say they need it.:::return
CachedXPathAPI#selectSingleNode(Node, String):::Use an XPath string to select a single node:::return->selectSingleNode
CachedXPathAPI#selectSingleNode(Node, String, Node):::Use an XPath string to select a single node:::nl->selectNodeIterator->return->nl->nextNode
CachedXPathAPI#selectNodeIterator(Node, String)::: Use an XPath string to select a nodelist:::return->selectNodeIterator
CachedXPathAPI#selectNodeIterator(Node, String, Node)::: Use an XPath string to select a nodelist:::list->eval->return->list->nodeset
CachedXPathAPI#selectNodeList(Node, String)::: Use an XPath string to select a nodelist:::return->selectNodeList
CachedXPathAPI#selectNodeList(Node, String, Node)::: Use an XPath string to select a nodelist:::list->eval->return->list->nodelist
CachedXPathAPI#eval(Node, String)::: Evaluate XPath string to an XObject:::return->eval
CachedXPathAPI#eval(Node, String, Node)::: Evaluate XPath string to an XObject:::prefixResolver->namespaceNode->getNodeType->getDocumentElement->new->PrefixResolverDefault->xpath->new->XPath->ctxtNode->xpathSupport->getDTMHandleFromNode->return->xpath->execute
CachedXPathAPI#eval(Node, String, PrefixResolver):::  Evaluate XPath string to an XObject:::xpath->new->XPath->xpathSupport->new->XPathContext->ctxtNode->xpathSupport->getDTMHandleFromNode->return->xpath->execute
Expression#canTraverseOutsideSubtree():::Tell if this expression or it's subexpressions can traverse outside the current subtree.:::return
Expression#execute(XPathContext, int):::Execute an expression in the XPath runtime context, and return the result of the expression.:::return->execute
Expression#execute(XPathContext, int, DTM, int):::Execute an expression in the XPath runtime context, and return the result of the expression.:::return->execute
Expression#execute(XPathContext):::Execute an expression in the XPath runtime context, and return the result of the expression.:::
Expression#execute(XPathContext, boolean):::Execute an expression in the XPath runtime context, and return the result of the expression, but tell that a "safe" object doesn't have to be returned:::return->execute
Expression#num(XPathContext):::Evaluate expression to a number.:::return->execute->num
Expression#boolean bool(XPathContext):::Evaluate expression to a boolean.:::return->execute->bool
Expression#xstr(XPathContext):::Cast result object to a string.:::return->execute->xstr
Expression#isNodesetExpr():::Tell if the expression is a nodeset expression:::return
Expression#asNode(XPathContext):::Return the first node out of the nodeset, if this expression is a nodeset expression.:::iter->execute->iter->return->iter->nextNode
Expression#asIterator(XPathContext, int):::Given an select expression and a context, evaluate the XPath and return the resulting iterator.:::try->xctxt->pushCurrentNodeAndExpression->return->execute->iter->catch->finally->xctxt->popCurrentNodeAndExpression
Expression#asIteratorRaw(XPathContext, int):::Given an select expression and a context, evaluate the XPath and return the resulting iterator, but do not clone.:::try->xctxt->pushCurrentNodeAndExpression->nodeset->execute->return->nodeset->iterRaw->catch->finally->xctxt->popCurrentNodeAndExpression
Expression#executeCharsToContentHandler(XPathContext, ContentHandler):::Execute an expression in the XPath runtime context, and return the result of the expression.:::obj->execute->obj->dispatchCharactersEvents->obj->detach
Expression#isStableNumber():::Tell if this expression returns a stable number that will not change during iterations within the expression:::return
Expression#fixupVariables(List, int):::This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time.:::
Expression#deepEquals(Expression):::Compare this object with another object and see if they are equal, include the sub heararchy.:::
Expression#isSameClass(Expression):::This is a utility method to tell if the passed in class is the same class as this:::if->return->return->getClass->expr->getClass
Expression#warn(XPathContext, String, Object[]):::Warn the user of an problem.:::fmsg->XSLMessages->createXPATHWarning->if->eh->xctxt->getErrorListener->eh->xctxt->getSAXLocator->new->TransformerException->warning
Expression#assertion(boolean, java.lang.String):::Tell the user of an assertion error, and probably throw an exception.:::if->fMsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->RuntimeException
Expression#error(XPathContext, String, Object[]):::Tell the user of an error, and probably throw an exception.:::fmsg->XSLMessages->createXPATHMessage->if->eh->xctxt->getErrorListener->te->new->TransformerException->eh->fatalError
Expression#getExpressionOwner():::Get the first non-Expression parent of this node.:::parent->exprGetParent->while->parent->exprGetParent->return
Expression#exprSetParent(ExpressionNode):::This pair of methods are used to inform the node of its     parent.:::assertion
Expression#exprGetParent()::: expression expr get parent:::return
Expression#exprAddChild(ExpressionNode, int):::This method tells the node to add its argument to the node's     list of children.:::assertion
Expression#exprGetChild(int):::This method returns a child node:::return
Expression#exprGetNumChildren():::Return the number of children the node has.:::return
Expression#getPublicId():::Return the public identifier for the current document event:::if->return->return->m_parent->getPublicId
Expression#getSystemId():::Return the system identifier for the current document event:::if->return->return->m_parent->getSystemId
Expression#getLineNumber():::Return the line number where the current document event ends:::if->return->return->m_parent->getLineNumber
Expression#getColumnNumber():::Return the character position where the current document event ends:::if->return->return->m_parent->getColumnNumber
ExpressionNode#exprSetParent(ExpressionNode):::This pair of methods are used to inform the node of its     parent.:::
ExpressionNode#exprGetParent()::: expression node expr get parent:::
ExpressionNode#exprAddChild(ExpressionNode, int):::This method tells the node to add its argument to the node's     list of children.:::
ExpressionNode#exprGetChild(int):::This method returns a child node:::
ExpressionNode#exprGetNumChildren():::Return the number of children the node has.:::
ExpressionOwner#getExpression():::Get the raw Expression object that this class wraps.:::
ExpressionOwner#setExpression(Expression):::Set the raw expression object for this object.:::
ExtensionsProvider#functionAvailable(String, String)::: extensions provider function available:::
ExtensionsProvider#elementAvailable(String, String):::Is the extension element available?:::
ExtensionsProvider#extFunction(String, String, List, Object):::Execute the extension function.:::
ExtensionsProvider#extFunction(FuncExtFunction, List):::Execute the extension function.:::
NodeSet#getRoot()::: node set get root:::return
NodeSet#cloneWithReset():::Get a cloned Iterator, and reset its state to the beginning of the iteration.:::clone->clone->clone->reset->return
NodeSet#reset():::Reset the iterator:::
NodeSet#getWhatToShow()::: This attribute determines which node types are presented via the iterator:::return
NodeSet#getFilter():::The filter object used to screen nodes:::return
NodeSet#getExpandEntityReferences()::: The value of this flag determines whether the children of entity reference nodes are visible to the iterator:::return
NodeSet#nextNode()::: Returns the next node in the set and advances the position of the iterator in the set:::if->this->size->next->this->elementAt->return->else->return
NodeSet#previousNode()::: Returns the previous node in the set and moves the position of the iterator backwards in the set.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->return->this->elementAt->else->return
NodeSet#detach():::Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state:::
NodeSet#isFresh():::Tells if this NodeSet is "fresh", in other words, if the first nextNode() that is called will return the first node in the set.:::return
NodeSet#runTo(int):::If an index is requested, NodeSet will call this method to run the iterator to the index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->else
NodeSet#item(int):::Returns the indexth item in the collection:::runTo->return->this->elementAt
NodeSet#getLength():::The number of nodes in the list:::runTo->return->this->size
NodeSet#addNode(Node):::Add a node to the NodeSet:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->this->addElement
NodeSet#insertNode(Node, int):::Insert a node at a given position.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->insertElementAt
NodeSet#removeNode(Node):::Remove a node.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->this->removeElement
NodeSet#addNodes(NodeList):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->nChildren->nodelist->getLength->for->i
NodeSet#addNodes(NodeSet):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->addNodes
NodeSet#addNodes(NodeIterator):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->obj->while->iterator->nextNode->addElement
NodeSet#addNodesInDocOrder(NodeList, XPathContext):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->nChildren->nodelist->getLength->for->i
NodeSet#addNodesInDocOrder(NodeIterator, XPathContext):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->node->while->iterator->nextNode->addNodeInDocOrder
NodeSet#addNodesInDocOrder(int, int, int, NodeList, XPathContext):::Add the node list to this node set in document order.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->foundit->i->node->nodelist->item->for->if->insertElementAt->return
NodeSet#addNodeInDocOrder(Node, boolean, XPathContext):::Add the node into a vector of nodes where it should occur in document order.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->insertIndex->if->size->size->i->for->if->insertElementAt->else->this->size->foundit->for->i->if->addElement->return
NodeSet#addNodeInDocOrder(Node, XPathContext):::Add the node into a vector of nodes where it should occur in document order.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->return->addNodeInDocOrder
NodeSet#getCurrentPos():::Get the current position, which is one less than the next nextNode() call will retrieve:::return
NodeSet#setCurrentPos(int):::Set the current position in the node set.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException
NodeSet#getCurrentNode():::Return the last fetched node:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->saved->n->elementAt->return
NodeSet#getShouldCacheNodes():::Get whether or not this is a cached node set.:::return
NodeSet#setShouldCacheNodes(boolean):::If setShouldCacheNodes(true) is called, then nodes will be cached:::if->isFresh->throw->XSLMessages->createXPATHMessage->new->RuntimeException
NodeSet#getLast()::: node set get last:::return
NodeSet#setLast(int)::: node set set last:::
NodeSet#clone():::Get a cloned LocPathIterator.:::clone->super->clone->if->new->NodeArr->System->arraycopy->return
NodeSet#size():::Get the length of the list.:::return
NodeSet#addElement(Node):::Append a Node onto the vector.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->if->new->NodeArr->else->newMap->new->NodeArr->System->arraycopy
NodeSet#push(Node):::Append a Node onto the vector.:::ff->if->if->new->NodeArr->else->newMap->new->NodeArr->System->arraycopy
NodeSet#pop():::Pop a node from the tail of the vector and return the result.:::n->return
NodeSet#popAndTop():::Pop a node from the tail of the vector and return the top of the stack after the pop.:::return
NodeSet#popQuick():::Pop a node from the tail of the vector.:::
NodeSet#peepOrNull():::Return the node at the top of the stack without popping the stack:::return
NodeSet#pushPair(Node, Node):::Push a pair of nodes into the stack:::if->new->NodeArr->else->if->newMap->new->NodeArr->System->arraycopy
NodeSet#popPair():::Pop a pair of nodes from the tail of the stack:::
NodeSet#setTail(Node):::Set the tail of the stack to the given node:::
NodeSet#setTailSub1(Node):::Set the given node one position from the tail:::
NodeSet#peepTail():::Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement:::return
NodeSet#peepTailSub1():::Return the node one position from the tail without popping:::return
NodeSet#insertElementAt(Node, int):::Inserts the specified node in this vector at the specified index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->new->NodeArr->else->if->newMap->new->NodeArr->System->arraycopy->if->System->arraycopy
NodeSet#appendNodes(NodeSet):::Append the nodes to the list.:::nNodes->nodes->size->if->new->NodeArr->else->if->newMap->new->NodeArr->System->arraycopy->System->arraycopy
NodeSet#removeAllElements():::Inserts the specified node in this vector at the specified index:::if->return->for->i
NodeSet#removeElement(Node):::Removes the first occurrence of the argument from this vector:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->return->for->i->return
NodeSet#removeElementAt(int):::Deletes the component at the specified index:::if->return->if->throw->new->ArrayIndexOutOfBoundsException->else->if->throw->new->ArrayIndexOutOfBoundsException->if->System->arraycopy
NodeSet#setElementAt(Node, int):::Sets the component at the specified index of this vector to be the specified object:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->new->NodeArr
NodeSet#elementAt(int):::Get the nth element.:::if->return->return
NodeSet#contains(Node):::Tell if the table contains the given node.:::runTo->if->return->for->i->return
NodeSet#indexOf(Node, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::runTo->if->return->for->i->return
NodeSet#indexOf(Node):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::runTo->if->return->for->i->return
NodeSetDTM#setEnvironment(Object):::Set the environment in which this iterator operates, which should provide: a node (the context node..:::
NodeSetDTM#getRoot()::: node set m get root:::if->if->size->return->item->else->return->else->return
NodeSetDTM#setRoot(int, Object):::Initialize the context values for this expression after it is cloned.:::
NodeSetDTM#clone():::Clone this NodeSetDTM:::clone->super->clone->return
NodeSetDTM#cloneWithReset():::Get a cloned Iterator, and reset its state to the beginning of the iteration.:::clone->clone->clone->reset->return
NodeSetDTM#reset():::Reset the iterator:::
NodeSetDTM#getWhatToShow()::: This attribute determines which node types are presented via the iterator:::return
NodeSetDTM#getFilter():::The filter object used to screen nodes:::return
NodeSetDTM#getExpandEntityReferences()::: The value of this flag determines whether the children of entity reference nodes are visible to the iterator:::return
NodeSetDTM#getDTM(int):::Get an instance of a DTM that "owns" a node handle:::return->m_manager->getDTM
NodeSetDTM#getDTMManager():::Get an instance of the DTMManager:::return
NodeSetDTM#nextNode()::: Returns the next node in the set and advances the position of the iterator in the set:::if->this->size->next->this->elementAt->return->else->return
NodeSetDTM#previousNode()::: Returns the previous node in the set and moves the position of the iterator backwards in the set.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->return->this->elementAt->else->return
NodeSetDTM#detach():::Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state:::
NodeSetDTM#allowDetachToRelease(boolean):::Specify if it's OK for detach to release the iterator for reuse.:::
NodeSetDTM#isFresh():::Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set.:::return
NodeSetDTM#runTo(int):::If an index is requested, NodeSetDTM will call this method to run the iterator to the index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->else
NodeSetDTM#item(int):::Returns the indexth item in the collection:::runTo->return->this->elementAt
NodeSetDTM#getLength():::The number of nodes in the list:::runTo->return->this->size
NodeSetDTM#addNode(int):::Add a node to the NodeSetDTM:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->this->addElement
NodeSetDTM#insertNode(int, int):::Insert a node at a given position.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->insertElementAt
NodeSetDTM#removeNode(int):::Remove a node.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->this->removeElement
NodeSetDTM#addNodes(DTMIterator):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->if->obj->while->iterator->nextNode->addElement
NodeSetDTM#addNodesInDocOrder(DTMIterator, XPathContext):::Copy NodeList members into this nodelist, adding in document order:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->node->while->iterator->nextNode->addNodeInDocOrder
NodeSetDTM#addNodeInDocOrder(int, boolean, XPathContext):::Add the node into a vector of nodes where it should occur in document order.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->insertIndex->if->size->size->i->for->if->insertElementAt->else->this->size->foundit->for->i->if->addElement->return
NodeSetDTM#addNodeInDocOrder(int, XPathContext):::Add the node into a vector of nodes where it should occur in document order.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->return->addNodeInDocOrder
NodeSetDTM#size():::Get the length of the list.:::return->super->size
NodeSetDTM#addElement(int):::Append a Node onto the vector.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->addElement
NodeSetDTM#insertElementAt(int, int):::Inserts the specified node in this vector at the specified index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->insertElementAt
NodeSetDTM#appendNodes(NodeVector):::Append the nodes to the list.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->appendNodes
NodeSetDTM#removeAllElements():::Inserts the specified node in this vector at the specified index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->removeAllElements
NodeSetDTM#removeElement(int):::Removes the first occurrence of the argument from this vector:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->return->super->removeElement
NodeSetDTM#removeElementAt(int):::Deletes the component at the specified index:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->removeElementAt
NodeSetDTM#setElementAt(int, int):::Sets the component at the specified index of this vector to be the specified object:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->setElementAt
NodeSetDTM#setItem(int, int):::Same as setElementAt.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException->super->setElementAt
NodeSetDTM#elementAt(int):::Get the nth element.:::runTo->return->super->elementAt
NodeSetDTM#contains(int):::Tell if the table contains the given node.:::runTo->return->super->contains
NodeSetDTM#indexOf(int, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::runTo->return->super->indexOf
NodeSetDTM#indexOf(int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::runTo->return->super->indexOf
NodeSetDTM#getCurrentPos():::Get the current position, which is one less than the next nextNode() call will retrieve:::return
NodeSetDTM#setCurrentPos(int):::Set the current position in the node set.:::if->throw->XSLMessages->createXPATHMessage->new->RuntimeException
NodeSetDTM#getCurrentNode():::Return the last fetched node:::if->throw->new->RuntimeException->saved->current->n->elementAt->return
NodeSetDTM#getShouldCacheNodes():::Get whether or not this is a cached node set.:::return
NodeSetDTM#setShouldCacheNodes(boolean):::If setShouldCacheNodes(true) is called, then nodes will be cached:::if->isFresh->throw->XSLMessages->createXPATHMessage->new->RuntimeException
NodeSetDTM#isMutable():::Tells if this iterator can have nodes added to it or set via the setItem(int node, int index) method.:::return
NodeSetDTM#getLast()::: node set m get last:::return
NodeSetDTM#setLast(int)::: node set m set last:::
NodeSetDTM#isDocOrdered():::Returns true if all the nodes in the iteration well be returned in document order.:::return
NodeSetDTM#getAxis():::Returns the axis being iterated, if it is known.:::return
SourceTreeManager#reset():::Reset the list of SourceTree objects that this manager manages.:::new->ArrayList<>
SourceTreeManager#setURIResolver(URIResolver):::Set an object that will be used to resolve URIs used in document(), etc.:::
SourceTreeManager#getURIResolver():::Get the object that will be used to resolve URIs used in document(), etc.:::return
SourceTreeManager#findURIFromDoc(int):::Given a document, find the URL associated with that document.:::n->m_sourceTree->size->for->i->return
SourceTreeManager#resolveURI(String, String, SourceLocator):::This will be called by the processor when it encounters an xsl:include, xsl:import, or document() function.:::source->if->m_uriResolver->resolve->if->uri->SystemIDResolver->getAbsoluteURI->new->StreamSource->return
SourceTreeManager#removeDocumentFromCache(int):::JJK: Support  <?xalan:doc_cache_off?> kluge in ElemForEach:::if->return->for->i->m_sourceTree->size
SourceTreeManager#putDocumentInCache(int, Source):::Put the source tree root node in the document cache:::cachedNode->getNode->if->if->throw->source->getSystemId->new->RuntimeException->return->if->source->getSystemId->m_sourceTree->source->getSystemId->new->SourceTree->add
SourceTreeManager#getNode(Source):::Given a Source object, find the node associated with it.:::url->source->getSystemId->if->return->n->m_sourceTree->size->for->i->return
SourceTreeManager#getSourceTree(String, String, SourceLocator, XPathContext):::Get the source tree from the a base URL and a URL string.:::try->source->this->resolveURI->return->getSourceTree->catch->throw->ioe->getMessage->new->TransformerException->finally
SourceTreeManager#getSourceTree(Source, SourceLocator, XPathContext):::Get the source tree from the input source.:::n->getNode->if->return->parseToNode->if->putDocumentInCache->return
SourceTreeManager#parseToNode(Source, SourceLocator, XPathContext):::Try to create a DOM source tree from the input source.:::try->xowner->xctxt->getOwnerObject->dtm->if->xctxt->getDTM->else->xctxt->getDTM->return->dtm->getDocument->catch->throw->e->getMessage->new->TransformerException->finally
SourceTreeManager#getXMLReader(Source, SourceLocator):::This method returns the SAX2 parser to use with the InputSource obtained from this URI:::try->reader->getXMLReader->if->try->factory->newInstance->factory->setNamespaceAware->jaxpParser->factory->newSAXParser->jaxpParser->getXMLReader->catch->throw->new->org.xml.sax.SAXException->throw->ex1->toString->new->org.xml.sax.SAXException->finally->if->XMLReaderFactory->createXMLReader->try->reader->setFeature->catch->finally->return->catch->throw->se->getMessage->new->TransformerException->finally
VariableStack#clone():::Returns a clone of this variable stack.:::vs->super->clone->_stackFrames->clone->_links->clone->return
VariableStack#elementAt(int):::Get the element at the given index, regardless of stackframe.:::return
VariableStack#size():::Get size of the stack.:::return
VariableStack#reset():::Reset the stack to a start position.:::new->XObjectArr
VariableStack#setStackFrame(int):::Set the current stack frame.:::
VariableStack#getStackFrame():::Get the position from where the search should start, which is either the searchStart property, or the top of the stack if that value is -1.:::return
VariableStack#link(int):::Allocates memory (called a stackframe) on the stack; used to store local variables and parameter arguments:::if->newsf->new->XObjectArr->System->arraycopy->if->newlinks->new->intArr->System->arraycopy->return
VariableStack#unlink():::Free up the stack frame that was last allocated with #link(int size).:::
VariableStack#unlink(int):::Free up the stack frame that was last allocated with #link(int size).:::
VariableStack#setLocalVariable(int, XObject):::Set a local variable or parameter in the current stack frame.:::
VariableStack#setLocalVariable(int, XObject, int):::Set a local variable or parameter in the specified stack frame.:::
VariableStack#getLocalVariable(XPathContext, int):::Get a local variable or parameter in the current stack frame.:::val->if->throw->XSLMessages->createXPATHMessage->xctxt->getSAXLocator->new->TransformerException->if->val->getType->return->val->execute->return
VariableStack#getLocalVariable(int, int):::Get a local variable or parameter in the current stack frame.:::val->return
VariableStack#getLocalVariable(XPathContext, int, boolean):::Get a local variable or parameter in the current stack frame.:::val->if->throw->XSLMessages->createXPATHMessage->xctxt->getSAXLocator->new->TransformerException->if->val->getType->return->val->execute->return->val->getFresh
VariableStack#isLocalSet(int):::Tell if a local variable has been set or not.:::return
VariableStack#clearLocalSlots(int, int):::Use this to clear the variables in a section of the stack:::System->arraycopy
VariableStack#setGlobalVariable(int, XObject):::Set a global variable or parameter in the global stack frame.:::
VariableStack#getGlobalVariable(XPathContext, int):::Get a global variable or parameter from the global stack frame.:::val->if->val->getType->return->val->execute->return
VariableStack#getGlobalVariable(XPathContext, int, boolean):::Get a global variable or parameter from the global stack frame.:::val->if->val->getType->return->val->execute->return->val->getFresh
VariableStack#getVariableOrParam(XPathContext, com.sun.org.apache.xml.internal.utils.QName):::Get a variable based on it's qualified name:::throw->XSLMessages->new->ObjectArr->qname->toString->createXPATHMessage->new->javax.xml.transform.TransformerException
WhitespaceStrippingElementMatcher#shouldStripWhiteSpace(XPathContext, Element):::Get information about whether or not an element should strip whitespace.:::
WhitespaceStrippingElementMatcher#canStripWhiteSpace():::Get information about whether or not whitespace can be stripped.:::
XPath#initFunctionTable():::initial the function table:::new->FunctionTable
XPath#getExpression():::Get the raw Expression object that this class wraps.:::return
XPath#fixupVariables(List, int):::This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time.:::m_mainExp->fixupVariables
XPath#setExpression(Expression):::Set the raw expression object for this object.:::if->exp->m_mainExp->exprGetParent->exprSetParent
XPath#getLocator():::Get the SourceLocator on the expression object.:::return
XPath#getPatternString():::Return the XPath string associated with this object.:::return
XPath#execute(XPathContext, org.w3c.dom.Node, PrefixResolver):::Given an expression and a context, evaluate the XPath and return the result.:::return->xctxt->getDTMHandleFromNode->execute
XPath#execute(XPathContext, int, PrefixResolver):::Given an expression and a context, evaluate the XPath and return the result.:::xctxt->pushNamespaceContext->xctxt->pushCurrentNodeAndExpression->xobj->try->m_mainExp->execute->catch->te->this->getLocator->setLocator->el->xctxt->getErrorListener->if->el->error->else->throw->while->getException->msg->e->getMessage->if->msg->length->XSLMessages->createXPATHMessage->te->getLocator->new->TransformerException->el->xctxt->getErrorListener->if->el->fatalError->else->throw->finally->xctxt->popNamespaceContext->xctxt->popCurrentNodeAndExpression->return
XPath#boolean bool(XPathContext, int, PrefixResolver):::Given an expression and a context, evaluate the XPath and return the result.:::xctxt->pushNamespaceContext->xctxt->pushCurrentNodeAndExpression->try->return->m_mainExp->bool->catch->te->this->getLocator->setLocator->el->xctxt->getErrorListener->if->el->error->else->throw->while->getException->msg->e->getMessage->if->msg->length->XSLMessages->createXPATHMessage->te->getLocator->new->TransformerException->el->xctxt->getErrorListener->if->el->fatalError->else->throw->finally->xctxt->popNamespaceContext->xctxt->popCurrentNodeAndExpression->return
XPath#getMatchScore(XPathContext, int):::Get the match score of the given node.:::xctxt->pushCurrentNode->xctxt->pushCurrentExpressionNode->try->score->m_mainExp->execute->if->dtm->xctxt->getDTM->score->num->dtm->getNodeName->this->getPatternString->println->return->score->num->catch->finally->xctxt->popCurrentNode->xctxt->popCurrentExpressionNode
XPath#warn(XPathContext, int, String, Object[]):::Warn the user of an problem.:::fmsg->XSLMessages->createXPATHWarning->ehandler->xctxt->getErrorListener->if->ehandler->xctxt->getSAXLocator->new->TransformerException->warning
XPath#assertion(boolean, String):::Tell the user of an assertion error, and probably throw an exception.:::if->fMsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->RuntimeException
XPath#error(XPathContext, int, String, Object[]):::Tell the user of an error, and probably throw an exception.:::fmsg->XSLMessages->createXPATHMessage->ehandler->xctxt->getErrorListener->if->ehandler->xctxt->getSAXLocator->new->TransformerException->fatalError->else->slocator->xctxt->getSAXLocator->slocator->getSystemId->slocator->getLineNumber->slocator->getColumnNumber->println
XPath#callVisitors(ExpressionOwner, XPathVisitor):::This will traverse the heararchy, calling the visitor for each member:::m_mainExp->callVisitors
XPathAPI#selectSingleNode(Node, String):::Use an XPath string to select a single node:::return->selectSingleNode
XPathAPI#selectSingleNode(Node, String, Node):::Use an XPath string to select a single node:::nl->selectNodeIterator->return->nl->nextNode
XPathAPI#selectNodeIterator(Node, String)::: Use an XPath string to select a nodelist:::return->selectNodeIterator
XPathAPI#selectNodeIterator(Node, String, Node)::: Use an XPath string to select a nodelist:::list->eval->return->list->nodeset
XPathAPI#selectNodeList(Node, String)::: Use an XPath string to select a nodelist:::return->selectNodeList
XPathAPI#selectNodeList(Node, String, Node)::: Use an XPath string to select a nodelist:::list->eval->return->list->nodelist
XPathAPI#eval(Node, String)::: Evaluate XPath string to an XObject:::return->eval
XPathAPI#eval(Node, String, Node)::: Evaluate XPath string to an XObject:::xpathSupport->new->XPathContext->prefixResolver->namespaceNode->getNodeType->getDocumentElement->new->PrefixResolverDefault->xpath->new->XPath->ctxtNode->xpathSupport->getDTMHandleFromNode->return->xpath->execute
XPathAPI#eval(Node, String, PrefixResolver):::  Evaluate XPath string to an XObject:::xpath->new->XPath->xpathSupport->new->XPathContext->ctxtNode->xpathSupport->getDTMHandleFromNode->return->xpath->execute
XPathContext#getDTMManager():::Return the DTMManager object:::return
XPathContext#setSecureProcessing(boolean):::Set the state of the secure processing feature:::
XPathContext#isSecureProcessing():::Return the state of the secure processing feature:::return
XPathContext#getDTM(javax.xml.transform.Source, boolean, DTMWSFilter, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->m_dtmManager->getDTM
XPathContext#getDTM(int):::Get an instance of a DTM that "owns" a node handle.:::return->m_dtmManager->getDTM
XPathContext#getDTMHandleFromNode(org.w3c.dom.Node):::Given a W3C DOM node, try and return a DTM handle:::return->m_dtmManager->getDTMHandleFromNode
XPathContext#getDTMIdentity(DTM):::%TBD% Doc:::return->m_dtmManager->getDTMIdentity
XPathContext#createDocumentFragment():::Creates an empty DocumentFragment object.:::return->m_dtmManager->createDocumentFragment
XPathContext#release(DTM, boolean):::Release a DTM either to a lru pool, or completely remove reference:::if->m_rtfdtm_stack->contains->return->return->m_dtmManager->release
XPathContext#createDTMIterator(Object, int):::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.:::return->m_dtmManager->createDTMIterator
XPathContext#createDTMIterator(String, PrefixResolver):::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.:::return->m_dtmManager->createDTMIterator
XPathContext#createDTMIterator(int, DTMFilter, boolean):::Create a new DTMIterator based only on a whatToShow and a DTMFilter:::return->m_dtmManager->createDTMIterator
XPathContext#createDTMIterator(int):::Create a new DTMIterator that holds exactly one node.:::iter->new->com.sun.org.apache.xpath.internal.axes.OneStepIteratorForward->iter->setRoot->return
XPathContext#init(boolean)::: path context init:::m_prefixResolvers->push->m_currentNodes->push->m_currentExpressionNodes->push->m_saxLocations->push->DTMManager->getFactory->newInstance
XPathContext#reset():::Reset for new run.:::releaseDTMXRTreeFrags->if->foreach->m_dtmManager->release->if->m_dtmManager->release->DTMManager->getFactory->newInstance->m_saxLocations->removeAllElements->m_axesIteratorStack->removeAllElements->m_contextNodeLists->removeAllElements->m_currentExpressionNodes->removeAllElements->m_currentNodes->removeAllElements->m_iteratorRoots->RemoveAllNoClear->m_predicatePos->removeAllElements->m_predicateRoots->RemoveAllNoClear->m_prefixResolvers->removeAllElements->m_prefixResolvers->push->m_currentNodes->push->m_currentExpressionNodes->push->m_saxLocations->push
XPathContext#setSAXLocator(SourceLocator):::Set the current locater in the stylesheet.:::m_saxLocations->setTop
XPathContext#pushSAXLocator(SourceLocator):::Set the current locater in the stylesheet.:::m_saxLocations->push
XPathContext#pushSAXLocatorNull():::Push a slot on the locations stack so that setSAXLocator can be repeatedly called.:::m_saxLocations->push
XPathContext#popSAXLocator():::Pop the current locater.:::m_saxLocations->pop
XPathContext#getSAXLocator():::Get the current locater in the stylesheet.:::return->m_saxLocations->peek
XPathContext#getOwnerObject():::Get the "owner" context of this context, which should be, in the case of XSLT, the Transformer object:::return
XPathContext#getVarStack():::Get the variable stack, which is in charge of variables and parameters.:::return
XPathContext#setVarStack(VariableStack):::Get the variable stack, which is in charge of variables and parameters.:::
XPathContext#getSourceTreeManager():::Get the SourceTreeManager associated with this execution context.:::return
XPathContext#setSourceTreeManager(SourceTreeManager):::Set the SourceTreeManager associated with this execution context.:::
XPathContext#getErrorListener():::Get the ErrorListener where errors and warnings are to be reported.:::if->return->retval->try->if->m_ownerGetErrorListener->new->ObjectArr->invoke->catch->finally->if->if->new->com.sun.org.apache.xml.internal.utils.DefaultErrorHandler->return
XPathContext#setErrorListener(ErrorListener):::Set the ErrorListener where errors and warnings are to be reported.:::if->throw->XSLMessages->createXPATHMessage->new->IllegalArgumentException
XPathContext#getURIResolver():::Get the URIResolver associated with this execution context.:::return
XPathContext#setURIResolver(URIResolver):::Set the URIResolver associated with this execution context.:::
XPathContext#getPrimaryReader():::Get primary XMLReader associated with this execution context.:::return
XPathContext#setPrimaryReader(XMLReader):::Set primary XMLReader associated with this execution context.:::
XPathContext#getContextNodeListsStack()::: path context get context node lists stack:::return
XPathContext#setContextNodeListsStack(Stack)::: path context set context node lists stack:::
XPathContext#getContextNodeList():::Get the current context node list.:::if->m_contextNodeLists->size->return->m_contextNodeLists->peek->else->return
XPathContext#pushContextNodeList(DTMIterator):::Set the current context node list.:::m_contextNodeLists->push
XPathContext#popContextNodeList():::Pop the current context node list.:::if->m_contextNodeLists->isEmpty->println->else->m_contextNodeLists->pop
XPathContext#getCurrentNodeStack()::: path context get current node stack:::return
XPathContext#setCurrentNodeStack(IntStack)::: path context set current node stack:::
XPathContext#getCurrentNode():::Get the current context node.:::return->m_currentNodes->peek
XPathContext#pushCurrentNodeAndExpression(int, int):::Set the current context node and expression node.:::m_currentNodes->push->m_currentExpressionNodes->push
XPathContext#popCurrentNodeAndExpression():::Set the current context node.:::m_currentNodes->quickPop->m_currentExpressionNodes->quickPop
XPathContext#pushExpressionState(int, int, PrefixResolver):::Push the current context node, expression node, and prefix resolver.:::m_currentNodes->push->m_currentExpressionNodes->push->m_prefixResolvers->push
XPathContext#popExpressionState():::Pop the current context node, expression node, and prefix resolver.:::m_currentNodes->quickPop->m_currentExpressionNodes->quickPop->m_prefixResolvers->pop
XPathContext#pushCurrentNode(int):::Set the current context node.:::m_currentNodes->push
XPathContext#popCurrentNode():::Pop the current context node.:::m_currentNodes->quickPop
XPathContext#pushPredicateRoot(int):::Set the current predicate root.:::m_predicateRoots->push
XPathContext#popPredicateRoot():::Pop the current predicate root.:::m_predicateRoots->popQuick
XPathContext#getPredicateRoot():::Get the current predicate root.:::return->m_predicateRoots->peepOrNull
XPathContext#pushIteratorRoot(int):::Set the current location path iterator root.:::m_iteratorRoots->push
XPathContext#popIteratorRoot():::Pop the current location path iterator root.:::m_iteratorRoots->popQuick
XPathContext#getIteratorRoot():::Get the current location path iterator root.:::return->m_iteratorRoots->peepOrNull
XPathContext#getCurrentExpressionNodeStack()::: path context get current expression node stack:::return
XPathContext#setCurrentExpressionNodeStack(IntStack)::: path context set current expression node stack:::
XPathContext#getPredicatePos()::: path context get predicate pos:::return->m_predicatePos->peek
XPathContext#pushPredicatePos(int)::: path context push predicate pos:::m_predicatePos->push
XPathContext#popPredicatePos()::: path context pop predicate pos:::m_predicatePos->pop
XPathContext#getCurrentExpressionNode():::Get the current node that is the expression's context (i.e:::return->m_currentExpressionNodes->peek
XPathContext#pushCurrentExpressionNode(int):::Set the current node that is the expression's context (i.e:::m_currentExpressionNodes->push
XPathContext#popCurrentExpressionNode():::Pop the current node that is the expression's context (i.e:::m_currentExpressionNodes->quickPop
XPathContext#getNamespaceContext():::Get the current namespace context for the xpath.:::return->m_prefixResolvers->peek
XPathContext#setNamespaceContext(PrefixResolver):::Get the current namespace context for the xpath.:::m_prefixResolvers->setTop
XPathContext#pushNamespaceContext(PrefixResolver):::Push a current namespace context for the xpath.:::m_prefixResolvers->push
XPathContext#pushNamespaceContextNull():::Just increment the namespace contest stack, so that setNamespaceContext can be used on the slot.:::m_prefixResolvers->push
XPathContext#popNamespaceContext():::Pop the current namespace context for the xpath.:::m_prefixResolvers->pop
XPathContext#getAxesIteratorStackStacks()::: path context get axes iterator stack stacks:::return
XPathContext#setAxesIteratorStackStacks(Stack)::: path context set axes iterator stack stacks:::
XPathContext#pushSubContextList(SubContextList):::Push a TreeWalker on the stack.:::m_axesIteratorStack->push
XPathContext#popSubContextList():::Pop the last pushed axes iterator.:::m_axesIteratorStack->pop
XPathContext#getSubContextList():::Get the current axes iterator, or return null if none.:::return->m_axesIteratorStack->isEmpty->m_axesIteratorStack->peek
XPathContext#getCurrentNodeList()::: path context get current node list:::return->m_axesIteratorStack->isEmpty->m_axesIteratorStack->get
XPathContext#getContextNode():::Get the current context node.:::return->this->getCurrentNode
XPathContext#getContextNodes():::Get the current context node list.:::try->cnl->getContextNodeList->if->return->cnl->cloneWithReset->else->return->catch->return->finally
XPathContext#getExpressionContext():::The the expression context for extensions for this context.:::return
XPathContext.XPathExpressionContext#getXPathContext():::Return the XPathContext associated with this XPathExpressionContext:::return
XPathContext.XPathExpressionContext#getDTMManager():::Return the DTMManager object:::return
XPathContext.XPathExpressionContext#getContextNode():::Get the current context node.:::context->getCurrentNode->return->getDTM->getNode
XPathContext.XPathExpressionContext#getContextNodes():::Get the current context node list.:::return->getContextNodeList->new->com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator
XPathContext.XPathExpressionContext#getErrorListener():::Get the error listener.:::return->XPathContext.this->getErrorListener
XPathContext.XPathExpressionContext#overrideDefaultParser():::Return the state of the services mechanism feature.:::return
XPathContext.XPathExpressionContext#setOverrideDefaultParser(boolean):::Set the state of the services mechanism feature.:::
XPathContext.XPathExpressionContext#toNumber(org.w3c.dom.Node):::Get the value of a node as a number.:::nodeHandle->getDTMHandleFromNode->dtm->getDTM->xobj->dtm->getStringValue->return->xobj->num
XPathContext.XPathExpressionContext#toString(org.w3c.dom.Node):::Get the value of a node as a string.:::nodeHandle->getDTMHandleFromNode->dtm->getDTM->strVal->dtm->getStringValue->return->strVal->toString
XPathContext.XPathExpressionContext#getVariableOrParam(com.sun.org.apache.xml.internal.utils.QName)::: path expression context get variable or param:::return->m_variableStacks->getVariableOrParam
XPathContext#getGlobalRTFDTM():::Get a DTM to be used as a container for a global Result Tree Fragment:::if->m_global_rtfdtm->isTreeIncomplete->m_dtmManager->getDTM->return
XPathContext#getRTFDTM():::Get a DTM to be used as a container for a dynamic Result Tree Fragment:::rtfdtm->if->new->ArrayList<>->m_dtmManager->getDTM->m_rtfdtm_stack->add->else->if->m_rtfdtm_stack->get->else->m_rtfdtm_stack->get->if->rtfdtm->isTreeIncomplete->if->m_rtfdtm_stack->size->m_rtfdtm_stack->get->else->m_dtmManager->getDTM->m_rtfdtm_stack->add->return
XPathContext#pushRTFContext():::Push the RTFDTM's context mark, to allows discarding RTFs added after this point:::m_last_pushed_rtfdtm->push->if->getRTFDTM->pushRewindMark
XPathContext#popRTFContext():::Pop the RTFDTM's context mark:::previous->m_last_pushed_rtfdtm->pop->if->return->if->if->isEmpty->m_rtfdtm_stack->get->popRewindMark->else->while->isEmpty->m_rtfdtm_stack->get->popRewindMark
XPathContext#getDTMXRTreeFrag(int):::Gets DTMXRTreeFrag object if one has already been created:::if->new->HashMap<>->if->m_DTMXRTreeFrags->containsKey->return->m_DTMXRTreeFrags->get->else->frag->new->DTMXRTreeFrag->m_DTMXRTreeFrags->put->return
XPathContext#releaseDTMXRTreeFrags():::Cleans DTMXRTreeFrag objects by removing references to DTM and XPathContext objects.:::if->return->iter->m_DTMXRTreeFrags->values->iterator->while->iter->hasNext->frag->iter->next->frag->destruct->iter->remove
XPathException#getStylesheetNode():::Get the stylesheet node from where this error originated.:::return
XPathException#setStylesheetNode(Object):::Set the stylesheet node from where this error originated.:::
XPathException#getStylesheetNode(ExpressionNode):::Get the XSLT ElemVariable that this sub-expression references:::owner->getExpressionOwner->if->return->return
XPathException#getExpressionOwner(ExpressionNode):::Get the first non-Expression parent of this node.:::parent->ex->exprGetParent->while->parent->exprGetParent->return
XPathException#printStackTrace(java.io.PrintStream):::Print the the trace of methods from where the error originated:::if->try->super->printStackTrace->catch->finally->exception->for->i
XPathException#getMessage():::Find the most contained message.:::lastMessage->super->getMessage->exception->while->nextMessage->exception->getMessage->if->if->se->prev->se->getException->if->break->else->return
XPathException#printStackTrace(java.io.PrintWriter):::Print the the trace of methods from where the error originated:::if->new->java.io.PrintWriter->try->super->printStackTrace->catch->finally->isJdk14OrHigher->try->getMethod->catch->finally->if->exception->for->i
XPathException#getException()::: Return the embedded exception, if any:::return
XPathFactory#create(String, SourceLocator, PrefixResolver, int):::Create an XPath.:::
XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor):::This will traverse the heararchy, calling the visitor for each member:::
XPathVisitor#visitLocationPath(ExpressionOwner, LocPathIterator):::Visit a LocationPath.:::return
XPathVisitor#visitUnionPath(ExpressionOwner, UnionPathIterator):::Visit a UnionPath.:::return
XPathVisitor#visitStep(ExpressionOwner, NodeTest):::Visit a step within a location path.:::return
XPathVisitor#visitPredicate(ExpressionOwner, Expression):::Visit a predicate within a location path:::return
XPathVisitor#visitBinaryOperation(ExpressionOwner, Operation):::Visit a binary operation.:::return
XPathVisitor#visitUnaryOperation(ExpressionOwner, UnaryOperation):::Visit a unary operation.:::return
XPathVisitor#visitVariableRef(ExpressionOwner, Variable):::Visit a variable reference.:::return
XPathVisitor#visitFunction(ExpressionOwner, Function):::Visit a function.:::return
XPathVisitor#visitMatchPattern(ExpressionOwner, StepPattern):::Visit a match pattern.:::return
XPathVisitor#visitUnionPattern(ExpressionOwner, UnionPattern):::Visit a union pattern.:::return
XPathVisitor#visitStringLiteral(ExpressionOwner, XString):::Visit a string literal.:::return
XPathVisitor#visitNumberLiteral(ExpressionOwner, XNumber):::Visit a number literal.:::return

NoDeadCodeVerifyHandler_OptionDescriptors#get(String)::: no dead code verify handler_ option descriptors get:::switch->return->OptionDescriptor->create->return
NoDeadCodeVerifyHandler_OptionDescriptors#iterator()::: no dead code verify handler_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
BinaryGraphPrinter#getSnippetReflectionProvider()::: binary graph printer get snippet reflection provider:::return
BinaryGraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map)::: binary graph printer begin group:::output->new->GraphInfo->DebugContext->addVersionProperties->beginGroup
BinaryGraphPrinter#endGroup()::: binary graph printer end group:::output->endGroup
BinaryGraphPrinter#close()::: binary graph printer close:::output->close
BinaryGraphPrinter#method(Object)::: binary graph printer method:::if->return->getMethod->else->if->return->else->return
BinaryGraphPrinter#node(Object)::: binary graph printer node:::return
BinaryGraphPrinter#nodeClass(Object)::: binary graph printer node class:::if->return->return
BinaryGraphPrinter#classForNode(Node)::: binary graph printer class for node:::return->node->getNodeClass
BinaryGraphPrinter#nodeClassType(NodeClass)::: binary graph printer node class type:::return->node->getJavaClass
BinaryGraphPrinter#nameTemplate(NodeClass)::: binary graph printer name template:::return->nodeClass->getNameTemplate
BinaryGraphPrinter#graph(GraphInfo, Object)::: binary graph printer graph:::if->return->new->GraphInfo->else->if->return->getReadonlyCopy->new->GraphInfo->else->return
BinaryGraphPrinter#nodeId(Node)::: binary graph printer node id:::return->getNodeId
BinaryGraphPrinter#portInputs(NodeClass)::: binary graph printer port inputs:::return->nodeClass->getEdges
BinaryGraphPrinter#portOutputs(NodeClass)::: binary graph printer port outputs:::return->nodeClass->getEdges
BinaryGraphPrinter#getNodeId(Node)::: binary graph printer get node id:::return->node->getId
BinaryGraphPrinter#blockNodes(GraphInfo, Block)::: binary graph printer block nodes:::nodes->get->if->return->extraNodes->new->LinkedList<>->foreach->findExtraNodes->extraNodes->removeAll->extraNodes->addAll->return
BinaryGraphPrinter#blockId(Block)::: binary graph printer block id:::return->sux->getId
BinaryGraphPrinter#blockSuccessors(Block)::: binary graph printer block successors:::return->Arrays->block->getSuccessors->asList
BinaryGraphPrinter#nodes(GraphInfo)::: binary graph printer nodes:::return->getNodes
BinaryGraphPrinter#nodesCount(GraphInfo)::: binary graph printer nodes count:::return->getNodeCount
BinaryGraphPrinter#nodeProperties(GraphInfo, Node, Map)::: binary graph printer node properties:::node->getDebugProperties->nodeToBlocks->if->block->getBlockForNode->if->props->block->getRelativeFrequency->put->props->put->props->node->estimatedNodeSize->put->props->node->estimatedNodeCycles->put->if->block->getBlockForNode->if->props->put->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->props->put->else->if->cn->updateStringPropertiesForConstant->props->put->if->getSnippetReflectionProvider->foreach->props->entrySet->if->prop->getValue->props->prop->getKey->prop->getValue->format->put
BinaryGraphPrinter#getBlockForNode(Node, NodeMap)::: binary graph printer get block for node:::if->nodeToBlocks->isNew->return->else->block->nodeToBlocks->get->if->return->else->if->return->merge->getBlockForNode->return
BinaryGraphPrinter#findExtraNodes(Node, Collection)::: binary graph printer find extra nodes:::if->merge->foreach->merge->phis->extraNodes->add
BinaryGraphPrinter#nodeHasPredecessor(Node)::: binary graph printer node has predecessor:::return->node->predecessor
BinaryGraphPrinter#blocks(GraphInfo)::: binary graph printer blocks:::return
BinaryGraphPrinter#print(DebugContext, Graph, Map, int, String, Object...)::: binary graph printer print:::output->new->GraphInfo->print
BinaryGraphPrinter#portSize(Edges)::: binary graph printer port size:::return->port->getCount
BinaryGraphPrinter#edgeDirect(Edges, int)::: binary graph printer edge direct:::return->port->getDirectCount
BinaryGraphPrinter#edgeName(Edges, int)::: binary graph printer edge name:::return->port->getName
BinaryGraphPrinter#edgeType(Edges, int)::: binary graph printer edge type:::return->getInputType
BinaryGraphPrinter#edgeNodes(GraphInfo, Node, Edges, int)::: binary graph printer edge nodes:::if->port->getDirectCount->single->Edges->port->getOffsets->getNode->return->Collections->singletonList->else->return->Edges->port->getOffsets->getNodeList
BinaryGraphPrinter#enumClass(Object)::: binary graph printer enum class:::if->return->enumValue->getClass->return
BinaryGraphPrinter#enumOrdinal(Object)::: binary graph printer enum ordinal:::if->return->ordinal->return
BinaryGraphPrinter#enumTypeValues(Object)::: binary graph printer enum type values:::if->enumClass->constants->enumClass->getEnumConstants->if->names->new->StringArr->for->i->return->return
BinaryGraphPrinter#typeName(Object)::: binary graph printer type name:::if->return->getName->if->return->toJavaName->return
BinaryGraphPrinter#methodCode(ResolvedJavaMethod)::: binary graph printer method code:::return->method->getCode
BinaryGraphPrinter#methodModifiers(ResolvedJavaMethod)::: binary graph printer method modifiers:::return->method->getModifiers
BinaryGraphPrinter#methodSignature(ResolvedJavaMethod)::: binary graph printer method signature:::return->method->getSignature
BinaryGraphPrinter#methodName(ResolvedJavaMethod)::: binary graph printer method name:::return->method->getName
BinaryGraphPrinter#methodDeclaringClass(ResolvedJavaMethod)::: binary graph printer method declaring class:::return->method->getDeclaringClass
BinaryGraphPrinter#fieldModifiers(ResolvedJavaField)::: binary graph printer field modifiers:::return->field->getModifiers
BinaryGraphPrinter#fieldTypeName(ResolvedJavaField)::: binary graph printer field type name:::return->field->getType->toJavaName
BinaryGraphPrinter#fieldName(ResolvedJavaField)::: binary graph printer field name:::return->field->getName
BinaryGraphPrinter#fieldDeclaringClass(ResolvedJavaField)::: binary graph printer field declaring class:::return->field->getDeclaringClass
BinaryGraphPrinter#field(Object)::: binary graph printer field:::if->return->return
BinaryGraphPrinter#signature(Object)::: binary graph printer signature:::if->return->return
BinaryGraphPrinter#signatureParameterCount(Signature)::: binary graph printer signature parameter count:::return->signature->getParameterCount
BinaryGraphPrinter#signatureParameterTypeName(Signature, int)::: binary graph printer signature parameter type name:::return->signature->getParameterType->getName
BinaryGraphPrinter#signatureReturnTypeName(Signature)::: binary graph printer signature return type name:::return->signature->getReturnType->getName
BinaryGraphPrinter#nodeSourcePosition(Object)::: binary graph printer node source position:::if->return->return
BinaryGraphPrinter#nodeSourcePositionMethod(NodeSourcePosition)::: binary graph printer node source position method:::return->pos->getMethod
BinaryGraphPrinter#nodeSourcePositionCaller(NodeSourcePosition)::: binary graph printer node source position caller:::return->pos->getCaller
BinaryGraphPrinter#nodeSourcePositionBCI(NodeSourcePosition)::: binary graph printer node source position i:::return->pos->getBCI
BinaryGraphPrinter#methodStackTraceElement(ResolvedJavaMethod, int, NodeSourcePosition)::: binary graph printer method stack trace element:::return->method->asStackTraceElement
BinaryGraphPrinter#methodLocation(ResolvedJavaMethod, int, NodeSourcePosition)::: binary graph printer method location:::e->methodStackTraceElement->arr->new->ArrayList<>->arr->new->JavaSourcePosition->add->at->while->cur->at->getSourceLanguage->if->arr->add->at->getCaller->return
BinaryGraphPrinter#locationLanguage(SourceLanguagePosition)::: binary graph printer location language:::return->location->getLanguage
BinaryGraphPrinter#locationURI(SourceLanguagePosition)::: binary graph printer location i:::return->location->getURI
BinaryGraphPrinter#locationLineNumber(SourceLanguagePosition)::: binary graph printer location line number:::return->location->getLineNumber
BinaryGraphPrinter#locationOffsetStart(SourceLanguagePosition)::: binary graph printer location offset start:::return->location->getOffsetStart
BinaryGraphPrinter#locationOffsetEnd(SourceLanguagePosition)::: binary graph printer location offset end:::return->location->getOffsetEnd
CanonicalStringGraphPrinter#getSnippetReflectionProvider()::: canonical string graph printer get snippet reflection provider:::return
CanonicalStringGraphPrinter#removeIdentities(String)::: canonical string graph printer remove identities:::return->IDENTITY_PATTERN->matcher->replaceAll
CanonicalStringGraphPrinter#writeCanonicalGraphExpressionString(ValueNode, boolean, boolean, PrintWriter)::: canonical string graph printer write canonical graph expression string:::writer->node->getClass->getSimpleName->print->writer->print->properties->node->getNodeClass->getData->for->i->properties->getCount->iterator->node->inputPositions->iterator->while->iterator->hasNext->position->iterator->next->input->position->get->if->constantNode->valueString->constantNode->getValue->toValueString->if->removeIdentities->writer->print->else->if->writeCanonicalGraphExpressionString->else->if->writer->print->else->writer->input->getClass->getSimpleName->print->if->iterator->hasNext->writer->print->writer->print
CanonicalStringGraphPrinter#writeCanonicalExpressionCFGString(StructuredGraph, boolean, boolean, PrintWriter)::: canonical string graph printer write canonical expression string:::controlFlowGraph->getControlFlowGraph->if->return->try->foreach->controlFlowGraph->getBlocks->writer->print->writer->print->writer->print->if->controlFlowGraph->getStartBlock->writer->print->writer->print->foreach->block->getSuccessors->writer->print->writer->print->writer->println->node->block->getBeginNode->while->writeCanonicalGraphExpressionString->writer->println->if->next->else->catch->writer->println->e->printStackTrace->finally
CanonicalStringGraphPrinter#getControlFlowGraph(StructuredGraph)::: canonical string graph printer get control flow graph:::try->return->ControlFlowGraph->compute->catch->return->finally
CanonicalStringGraphPrinter#writeCanonicalGraphString(StructuredGraph, boolean, boolean, PrintWriter)::: canonical string graph printer write canonical graph string:::scheduleResult->GraphPrinter->getScheduleOrNull->if->return->try->canonicalId->graph->createNodeMap->nextId->constantsLines->if->new->ArrayList<>->foreach->scheduleResult->getCFG->getBlocks->writer->print->writer->print->writer->print->if->scheduleResult->getCFG->getStartBlock->writer->print->writer->print->foreach->block->getSuccessors->writer->print->writer->print->writer->println->foreach->scheduleResult->getBlockToNodesMap->get->if->node->isAlive->if->if->if->name->node->toString->str->filteredUsageCount->constantsLines->add->else->id->if->canonicalId->get->canonicalId->get->else->canonicalId->set->name->node->getClass->getSimpleName->writer->print->writer->print->writer->print->writer->print->if->writer->print->writer->filteredUsageCount->print->writer->print->writer->println->if->writer->constantsLines->size->print->writer->println->Collections->sort->foreach->writer->println->catch->writer->println->t->printStackTrace->finally
CanonicalStringGraphPrinter#getCanonicalGraphString(StructuredGraph, boolean, boolean)::: canonical string graph printer get canonical graph string:::stringWriter->new->StringWriter->writer->new->PrintWriter->writeCanonicalGraphString->writer->flush->return->stringWriter->toString
CanonicalStringGraphPrinter#filteredUsageCount(Node)::: canonical string graph printer filtered usage count:::return->node->usages->filter->count
CanonicalStringGraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map)::: canonical string graph printer begin group:::
CanonicalStringGraphPrinter#getDirectory(DebugContext, StructuredGraph)::: canonical string graph printer get directory:::if->return->debug->getDumpPath->return
CanonicalStringGraphPrinter#print(DebugContext, Graph, Map, int, String, Object...)::: canonical string graph printer print:::if->options->graph->getOptions->structuredGraph->outDirectory->getDirectory->title->String->String->simplifyClassArgs->format->format->filePath->outDirectory->PathUtilities->sanitizeFileName->resolve->try->writer->filePath->toFile->new->FileWriter->new->BufferedWriter->new->PrintWriter->switch->PrintCanonicalGraphStringFlavor->getValue->CanonicalGraphStringsCheckConstants->getValue->CanonicalGraphStringsRemoveIdentities->getValue->writeCanonicalExpressionCFGString->break->CanonicalGraphStringsExcludeVirtuals->getValue->CanonicalGraphStringsCheckConstants->getValue->writeCanonicalGraphString->break->catch->finally
CanonicalStringGraphPrinter#endGroup()::: canonical string graph printer end group:::
CanonicalStringGraphPrinter#close()::: canonical string graph printer close:::
CFGPrinter#printCFG(String, BciBlockMapping):::Prints the control flow graph denoted by a given block map.:::begin->out->print->print->println->foreach->blockMap->getBlocks->begin->printBlock->end->end
CFGPrinter#printBlock(BciBlockMapping.BciBlock)::: printer print block:::out->print->block->getStartBci->print->println->out->print->block->getStartBci->println->out->print->block->getEndBci->println->out->println->out->print->foreach->block->getSuccessors->if->succ->isExceptionEntry->out->print->succ->getStartBci->print->print->out->println->out->print->foreach->block->getSuccessors->if->succ->isExceptionEntry->out->print->succ->getStartBci->print->print->out->println->out->print->if->block->isExceptionEntry->out->print->if->block->isLoopHeader->out->print->out->println->out->print->Long->block->getLoops->bitCount->println
CFGPrinter#inFixedSchedule(Node)::: printer in fixed schedule:::return->node->isDeleted->cfg->getNodeToBlock->get
CFGPrinter#printCFG(String, AbstractBlockBase[], boolean):::Prints the specified list of blocks.:::if->cfg->getNodeToBlock->new->NodeMap<>->foreach->if->continue->block->cur->block->getBeginNode->while->scheduleInputs->if->block->getEndNode->break->cur->successors->first->begin->out->print->print->println->foreach->printBlock->end->if->new->BytecodeDisassembler->disassemble->printBytecodes
CFGPrinter#scheduleInputs(Node, Block)::: printer schedule inputs:::if->phi->phiBlock->latestScheduling->phi->merge->get->foreach->phiBlock->getPredecessors->phi->pred->getEndNode->valueAt->schedule->else->foreach->node->inputs->schedule
CFGPrinter#schedule(Node, Block)::: printer schedule:::if->inFixedSchedule->inputBlock->if->latestScheduling->get->AbstractControlFlowGraph->latestScheduling->get->commonDominatorTyped->if->latestScheduling->get->latestScheduling->set->scheduleInputs
CFGPrinter#printBlock(AbstractBlockBase, boolean)::: printer print block:::if->return->printBlockProlog->if->printNodes->printBlockEpilog
CFGPrinter#printBlockEpilog(AbstractBlockBase)::: printer print block epilog:::printLIR->end
CFGPrinter#printBlockProlog(AbstractBlockBase)::: printer print block prolog:::begin->out->print->blockToString->print->println->out->println->out->println->out->print->foreach->block->getPredecessors->out->print->blockToString->print->print->out->println->out->print->foreach->block->getSuccessors->if->succ->isExceptionEntry->out->print->blockToString->print->print->out->println->out->print->foreach->block->getSuccessors->if->succ->isExceptionEntry->out->print->blockToString->print->print->out->println->out->print->if->block->isLoopHeader->out->print->if->block->isLoopEnd->out->print->if->block->isExceptionEntry->out->print->out->println->if->block->getLoop->out->print->block->getLoop->getIndex->println->out->print->block->getLoop->getDepth->println->out->print->Double->block->getRelativeFrequency->doubleToRawLongBits->println
CFGPrinter#printNodes(Block)::: printer print nodes:::new->NodeBitMap->begin->out->println->out->disableIndentation->if->block->getBeginNode->foreach->block->getBeginNode->phis->printNode->cur->block->getBeginNode->while->printNode->if->block->getEndNode->cursor->latestScheduling->getEntries->while->cursor->advance->if->cursor->getValue->cursor->getKey->inFixedSchedule->printedNodes->cursor->getKey->isMarked->cursor->getKey->printNode->break->cur->successors->first->out->enableIndentation->end
CFGPrinter#printNode(Node, boolean)::: printer print node:::printedNodes->mark->if->foreach->node->inputs->if->inFixedSchedule->printedNodes->isMarked->printNode->if->out->print->print->print->print->print->print->println->else->if->out->print->print->print->print->print->print->println->else->if->out->print->print->print->print->print->print->println->else->if->out->print->print->print->print->print->print->println->out->print->nodeToString->print->println->if->operand->nodeLirGenerator->hasOperand->nodeLirGenerator->operand->if->out->print->operand->toString->print->println->if->stateSplit->if->stateSplit->stateAfter->state->stateSplit->stateAfter->stateToString->out->print->print->print->print->print->print->println->props->node->getDebugProperties->new->TreeMap<>->out->print->print->print->print->out->println->foreach->props->entrySet->out->entry->getKey->toString->print->print->entry->getValue->entry->getValue->toString->print->println->out->println->node->inputPositions->iterator->printNamedNodes->out->println->node->successorPositions->iterator->printNamedNodes->out->println->if->node->hasNoUsages->foreach->node->usages->out->nodeToString->print->print->out->println->out->println->out->node->predecessor->nodeToString->print->print->out->print->println->out->print->out->print->node->getNodeClass->shortName->print->print->node->getClass->getName->print->print->print->node->inputPositions->iterator->printNamedNodes->node->successorPositions->iterator->printNamedNodes->foreach->props->entrySet->key->entry->getKey->toString->if->key->startsWith->key->equals->out->key->length->substring->print->print->entry->getValue->entry->getValue->toString->print->print->out->print->print->println
CFGPrinter#printNamedNodes(Node, Iterator, String, String, String)::: printer print named nodes:::lastIndex->while->iter->hasNext->pos->iter->next->if->pos->getName->endsWith->continue->if->pos->getIndex->if->out->print->out->print->pos->getName->print->print->pos->getIndex->out->pos->get->nodeToString->print->print->if->out->print
CFGPrinter#stateToString(FrameState)::: printer state to string:::buf->new->StringBuilder->curState->do->buf->Bytecode->curState->getCode->toLocation->append->append->if->curState->stackSize->buf->append->for->i->curState->stackSize->buf->append->buf->append->for->i->curState->localsSize->buf->append->buf->append->for->i->curState->locksSize->buf->append->curState->outerFrameState->while->return->buf->toString
CFGPrinter#stateValueToString(ValueNode)::: printer state value to string:::result->nodeToString->if->nodeLirGenerator->hasOperand->operand->nodeLirGenerator->operand->return
CFGPrinter#printLIR(AbstractBlockBase):::Prints the LIR for each instruction in a given block.:::if->return->lirInstructions->lir->getLIRforBlock->if->return->begin->out->println->for->i->lirInstructions->size->end
CFGPrinter#printLIRInstruction(LIRInstruction)::: printer print instruction:::if->out->print->print->print->print->print->out->println->else->out->inst->id->printf->print->stateString->new->StringBuilder->inst->if->state->hasDebugInfo->di->state->debugInfo->stateString->di->getBytecodePosition->di->getReferenceMap->state->getLiveBasePointers->di->getCalleeSaveInfo->debugInfoToString->append->else->stateString->state->getLiveBasePointers->debugInfoToString->append->forEachState->if->stateString->length->level->out->indentationLevel->out->adjustIndentation->out->print->print->print->print->stateString->toString->print->print->print->out->adjustIndentation->out->print->inst->toString->print->print->out->println
CFGPrinter#nodeToString(Node)::: printer node to string:::if->return->prefix->if->else->if->value->if->value->getStackKind->else->String->value->getStackKind->getTypeChar->toLowerCase->valueOf->else->return->node->toString
CFGPrinter#blockToString(AbstractBlockBase)::: printer block to string:::if->return->getBeginNode->toString->else->return->block->getId
CFGPrinter#printIntervals(String, IntervalDumper)::: printer print intervals:::begin->out->String->format->println->intervals->visitIntervals->end
CFGPrinter#printSchedule(String, ScheduleResult)::: printer print schedule:::schedule->getCFG->new->NodeBitMap->begin->out->print->print->println->foreach->schedule->getCFG->getBlocks->if->schedule->nodesFor->schedule->nodesFor->printScheduledBlock->end
CFGPrinter#printScheduledBlock(Block, List)::: printer print scheduled block:::printBlockProlog->begin->out->println->out->disableIndentation->if->block->getBeginNode->foreach->block->getBeginNode->phis->printNode->foreach->printNode->out->enableIndentation->end->printBlockEpilog
CFGPrinter#printTraces(String, TraceBuilderResult)::: printer print traces:::begin->out->print->print->println->foreach->traces->getTraces->printTrace->end
CFGPrinter#printTrace(Trace, TraceBuilderResult)::: printer print trace:::printTraceProlog->printTraceInstructions->printTraceEpilog
CFGPrinter#printTraceProlog(Trace, TraceBuilderResult)::: printer print trace prolog:::begin->out->print->traceToString->print->println->out->println->out->println->out->print->foreach->getPredecessors->out->print->traceToString->print->print->out->println->out->print->foreach->getSuccessors->out->print->traceToString->print->print->out->println->out->print->out->println->out->print->out->println
CFGPrinter#printTraceInstructions(Trace, TraceBuilderResult)::: printer print trace instructions:::if->return->begin->out->println->foreach->trace->getBlocks->lirInstructions->lir->getLIRforBlock->if->continue->printBlockInstruction->for->i->lirInstructions->size->end
CFGPrinter#printBlockInstruction(AbstractBlockBase, TraceBuilderResult)::: printer print block instruction:::out->print->block->toString->print->print->print->if->block->getPredecessorCount->out->print->Arrays->block->getPredecessors->asList->printBlockListWithTrace->out->print->if->block->getSuccessorCount->out->print->Arrays->block->getSuccessors->asList->printBlockListWithTrace->out->print->out->println
CFGPrinter#printBlockListWithTrace(List>, TraceBuilderResult)::: printer print block list with trace:::it->blocks->iterator->it->next->printBlockWithTrace->while->it->hasNext->out->print->it->next->printBlockWithTrace
CFGPrinter#printBlockWithTrace(AbstractBlockBase, TraceBuilderResult)::: printer print block with trace:::out->block->toString->print->out->print->traceBuilderResult->getTraceForBlock->getId->print->print
CFGPrinter#printTraceEpilog()::: printer print trace epilog:::end
CFGPrinter#isLoopBackEdge(AbstractBlockBase, AbstractBlockBase)::: printer is loop back edge:::return->dst->isLoopHeader->dst->getLoop->src->getLoop->equals
CFGPrinter#getSuccessors(Trace, TraceBuilderResult)::: printer get successors:::bs->traceBuilderResult->getTraces->size->new->BitSet->foreach->trace->getBlocks->foreach->block->getSuccessors->otherTrace->traceBuilderResult->getTraceForBlock->otherTraceId->otherTrace->getId->if->trace->getId->isLoopBackEdge->bs->set->succ->new->ArrayList<>->for->i->bs->nextSetBit->bs->nextSetBit->return
CFGPrinter#getPredecessors(Trace, TraceBuilderResult)::: printer get predecessors:::bs->traceBuilderResult->getTraces->size->new->BitSet->foreach->trace->getBlocks->foreach->block->getPredecessors->otherTrace->traceBuilderResult->getTraceForBlock->otherTraceId->otherTrace->getId->if->trace->getId->isLoopBackEdge->bs->traceBuilderResult->getTraceForBlock->getId->set->pred->new->ArrayList<>->for->i->bs->nextSetBit->bs->nextSetBit->return
CFGPrinter#traceToString(Trace)::: printer trace to string:::return->new->StringBuilder->trace->getId->append->toString
CFGPrinterObserver#dump(DebugContext, Object, String, Object...)::: printer observer dump:::message->String->format->try->dumpSandboxed->catch->TTY->println->ex->printStackTrace->finally
CFGPrinterObserver#checkMethodScope(DebugContext):::Looks for the outer most method and its DebugDumpScope#decorators in the current debug scope and opens a new compilation scope if this pair does not match the current method and decorator pair.:::method->compilation->decorators->new->ArrayList<>->foreach->debug->context->if->decorators->clear->else->if->graph->if->graph->method->graph->method->decorators->clear->graph->compilationId->else->if->debugDumpScope->if->decorators->add->else->if->compilationResult->compilationResult->getCompilationId->if->return->if->if->compilation->equals->curDecorators->equals->cfgPrinter->printCompilation->else->if->method->equals->curDecorators->equals->cfgPrinter->printCompilation->return
CFGPrinterObserver#isFrontendObject(Object)::: printer observer is frontend object:::return
CFGPrinterObserver#dumpSandboxed(DebugContext, Object, String)::: printer observer dump sandboxed:::options->debug->getOptions->dumpFrontend->PrintCFG->getValue->if->isFrontendObject->return->if->try->dumpFile->debug->getDumpPath->dumpFile->toFile->out->new->FileOutputStream->new->BufferedOutputStream->new->CFGPrinter->catch->throw->cfgFile->getAbsolutePath->new->GraalError->initCause->finally->if->checkMethodScope->return->try->if->if->else->debug->contextLookup->debug->contextLookup->debug->contextLookup->if->getLIRGeneratorTool->target->if->getControlFlowGraph->getControlFlowGraph->codeCache->debug->contextLookup->if->codeCache->getTarget->if->blockMap->cfgPrinter->printCFG->if->getCode->cfgPrinter->new->BytecodeDisassembler->disassemble->printBytecodes->else->if->cfgPrinter->codeEmittingOrder->printCFG->if->cfgPrinter->printIntervals->else->if->cfgPrinter->printSchedule->else->if->if->graph->scheduleResult->GraalDebugHandlersFactory->tryGetSchedule->if->scheduleResult->getCFG->if->cfgPrinter->getBlocks->printCFG->else->if->compResult->cfgPrinter->disassemble->printMachineCode->else->if->compResult->debug->contextLookup->if->cfgPrinter->disassemble->printMachineCode->else->if->if->cfgPrinter->printIntervals->else->if->debug->log->else->if->cfgPrinter->printCFG->else->if->cfgPrinter->getBlocks->printCFG->else->if->cfgPrinter->printTraces->catch->finally->cfgPrinter->flush
CFGPrinterObserver#disassemble(CodeCacheProvider, CompilationResult, InstalledCode)::: printer observer disassemble:::dis->if->return->dis->disassembleInstalledCode->return->dis->disassembleCompiledCode
CFGPrinterObserver#close()::: printer observer close:::if->cfgPrinter->close->Collections->emptyList
CFGPrinterObserver#getDumpPath()::: printer observer get dump path:::if->return->cfgFile->getAbsolutePath->return
CompilationPrinter#globalOut():::Gets a global output stream on a file in the current working directory:::if->file->System->currentTimeMillis->new->File->try->new->FileOutputStream->catch->TTY->file->getAbsolutePath->println->finally->return
CompilationPrinter#flush():::Flushes all buffered output to the underlying output stream.:::out->flush
CompilationPrinter#close()::: compilation printer close:::out->out->close
CompilationPrinter#begin(String)::: compilation printer begin:::out->println->out->adjustIndentation
CompilationPrinter#end(String)::: compilation printer end:::out->adjustIndentation->out->println
CompilationPrinter#printCompilation(JavaMethod):::Prints a compilation timestamp for a given method.:::javaMethod->format->javaMethod->format->printCompilation
CompilationPrinter#printCompilation(CompilationIdentifier):::Prints a compilation id.:::compilationId->toString->compilationId->toString->printCompilation
CompilationPrinter#printCompilation(String, String)::: compilation printer print compilation:::begin->out->print->print->println->out->print->print->println->out->print->System->currentTimeMillis->println->end
CompilationPrinter#debugInfoToString(BytecodePosition, ReferenceMap, IndexedValueMap, RegisterSaveLayout):::Formats given debug info as a multi line string.:::sb->new->StringBuilder->if->sb->append->sb->refMap->toString->append->sb->append->if->sb->append->sb->append->sb->append->if->sb->append->foreach->calleeSaveInfo->registersToSlots->entrySet->sb->e->getKey->e->getValue->append->sb->append->if->curCodePos->virtualObjects->new->ArrayList<>->do->sb->MetaUtil->curCodePos->getMethod->curCodePos->getBCI->toLocation->append->sb->append->if->frame->if->sb->append->for->i->sb->append->sb->append->for->i->sb->append->if->sb->append->for->i->sb->append->curCodePos->getCaller->while->for->i->virtualObjects->size->return->sb->toString
CompilationPrinter#valueToString(JavaValue, List)::: compilation printer value to string:::if->return->if->virtualObjects->contains->virtualObjects->add->return->value->toString
CompilationPrinter#printMachineCode(String, String)::: compilation printer print machine code:::if->code->length->return->if->begin->out->print->print->println->end->begin->out->print->out->println->end
CompilationPrinter#printBytecodes(String)::: compilation printer print bytecodes:::if->code->length->return->begin->out->print->out->println->end
GraalDebugHandlersFactory#createHandlers(OptionValues)::: graal debug handlers factory create handlers:::handlers->new->ArrayList<>->handlers->new->BinaryGraphPrinter->new->GraphPrinterDumpHandler->add->if->getValue->handlers->createStringPrinter->new->GraphPrinterDumpHandler->add->handlers->new->NodeDumper->add->if->getValue->getValue->handlers->new->CFGPrinterObserver->add->handlers->new->NoDeadCodeVerifyHandler->add->return
GraalDebugHandlersFactory.NodeDumper#dump(DebugContext, Object, String, Object...)::: node dumper dump:::if->node->location->GraphUtil->approxSourceLocation->nodeName->node->toString->if->debug->log->else->debug->log
GraalDebugHandlersFactory#createStringPrinter(SnippetReflectionProvider)::: graal debug handlers factory create string printer:::return->new->CanonicalStringGraphPrinter
GraalDebugHandlersFactory#tryGetSchedule(DebugContext, StructuredGraph)::: graal debug handlers factory try get schedule:::scheduleResult->graph->getLastSchedule->if->if->graph->getOptions->getValue->debug->contextLookup->try->noIntercept->debug->disableIntercept->schedule->graph->getOptions->new->SchedulePhase->schedule->apply->graph->getLastSchedule->catch->finally->return
GraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map):::Starts a new group of graphs with the given name, short name and method byte code index (BCI) as properties.:::
GraphPrinter#print(DebugContext, Graph, Map, int, String, Object...):::Prints an entire Graph with the specified title, optionally using short names for nodes.:::
GraphPrinter#getSnippetReflectionProvider()::: graph printer get snippet reflection provider:::
GraphPrinter#endGroup():::Ends the current group.:::
GraphPrinter#close()::: graph printer close:::
GraphPrinter#isToStringTrusted(Class):::Determines if invoking Object#toString() on an instance of c will only run trusted code.:::if->TRUSTED_CLASSES->contains->return->if->GraalServices->isToStringTrusted->return->if->c->getClassLoader->getClassLoader->return->return
GraphPrinter#format(JavaConstant):::Use the real Object#toString() method for JavaConstant JavaConstants that are wrapping trusted types, other just return the results of JavaConstant#toString().:::snippetReflection->getSnippetReflectionProvider->if->if->constant->getJavaKind->obj->try->snippetReflection->asObject->catch->finally->if->return->GraphPrinter->constantToString->return->constant->toString
GraphPrinter#updateStringPropertiesForConstant(Map, ConstantNode):::Sets or updates the "rawvalue" and "toString" properties in props for cn if it's a boxed Object value and snippetReflection can access the raw value.:::if->cn->isJavaConstant->cn->getStackKind->isObject->toString->cn->asJavaConstant->format->rawvalue->GraphPrinter->truncate->props->put->if->rawvalue->equals->props->put
GraphPrinter#simplifyClassArgs(Object...):::Replaces all JavaType elements in args with the result of JavaType#getUnqualifiedName().:::res->for->i->return
GraphPrinter#truncate(String)::: graph printer truncate:::if->s->length->return->s->substring->return
GraphPrinter#constantToString(Object)::: graph printer constant to string:::c->value->getClass->suffix->if->c->isArray->return->constantArrayToString->else->if->return->name->else->if->isToStringTrusted->try->return->value->toString->catch->t->getClass->getName->if->t->getClass->isToStringTrusted->try->catch->finally->finally->return->MetaUtil->getSimpleName->Integer->System->identityHashCode->toHexString
GraphPrinter#constantArrayToString(Object)::: graph printer constant array to string:::componentType->array->getClass->getComponentType->arrayLength->Array->getLength->buf->MetaUtil->getSimpleName->new->StringBuilder->append->append->append->length->primitive->componentType->isPrimitive->for->i->return->buf->append->toString
GraphPrinter#getScheduleOrNull(Graph)::: graph printer get schedule or null:::if->sgraph->scheduleResult->sgraph->getLastSchedule->if->debug->graph->getDebug->try->scope->debug->disable->schedule->graph->getOptions->new->SchedulePhase->schedule->apply->sgraph->getLastSchedule->catch->finally->return->return
GraphPrinterDumpHandler.GraphPrinterSupplier#get(DebugContext, Graph)::: graph printer supplier get:::
GraphPrinterDumpHandler#jvmArguments()::: graph printer dump handler jvm arguments:::inputArguments->GraalServices->getInputArguments->if->return->String->join->return
GraphPrinterDumpHandler#ensureInitialized(DebugContext, Graph)::: graph printer dump handler ensure initialized:::if->if->return->new->ArrayList<>->new->WeakHashMap<>->debug->graph->getDebug->try->printerSupplier->get->catch->handleException->finally
GraphPrinterDumpHandler#nextDumpId()::: graph printer dump handler next dump id:::depth->previousInlineContext->size->if->Arrays->copyOf->return
GraphPrinterDumpHandler#dump(DebugContext, Object, String, Object...)::: graph printer dump handler dump:::options->debug->getOptions->if->getValue->graph->ensureInitialized->if->return->inlineContext->getInlineContext->if->inlineContext->equals->properties->new->HashMap<>->properties->graph->toString->put->addCompilationId->for->i->previousInlineContext->size->for->i->inlineContext->size->currentScopeName->debug->getCurrentScopeName->try->s->debug->sandbox->properties->new->HashMap<>->properties->graph->toString->put->properties->put->if->properties->compilationId->put->try->size->NodeCostUtil->computeGraphSize->properties->put->catch->properties->t->getMessage->put->finally->printer->nextDumpId->print->catch->handleException->throw->debug->handle->finally
GraphPrinterDumpHandler#handleException(DebugContext, IOException)::: graph printer dump handler handle exception:::if->debug->getOptions->getValue->throw->new->GraalError->if->else->e->printStackTrace->if->TTY->Thread->currentThread->println
GraphPrinterDumpHandler#addCompilationId(Map, Graph)::: graph printer dump handler add compilation id:::if->properties->compilationId->put
GraphPrinterDumpHandler#getInlineContext(Graph)::: graph printer dump handler get inline context:::result->inlineContextMap->get->if->new->ArrayList<>->lastMethodOrGraph->graphSeen->debug->graph->getDebug->foreach->debug->context->if->if->debugDumpScope->if->result->isEmpty->result->result->size->result->result->size->get->set->else->result->add->else->addMethodContext->if->if->result->size->result->get->startsWith->result->clear->result->add->if->result->isEmpty->result->graph->toString->add->Collections->reverse->if->if->asJavaMethod->addMethodContext->else->result->graph->toString->add->inlineContextMap->put->return
GraphPrinterDumpHandler#addMethodContext(List, Object, Object)::: graph printer dump handler add method context:::method->asJavaMethod->if->if->asJavaMethod->asJavaMethod->equals->result->method->format->add->else
GraphPrinterDumpHandler#openScope(DebugContext, String, int, Map)::: graph printer dump handler open scope:::try->props->if->if->new->HashMap<>->props->put->if->props->put->props->new->Date->toString->put->printer->debug->contextLookup->beginGroup->catch->handleException->finally
GraphPrinterDumpHandler#closeScope(DebugContext, int)::: graph printer dump handler close scope:::try->if->printer->endGroup->catch->handleException->finally
GraphPrinterDumpHandler#close()::: graph printer dump handler close:::if->for->inlineDepth->previousInlineContext->size->if->printer->close
NoDeadCodeVerifyHandler#verify(DebugContext, Object, String, Object...)::: no dead code verify handler verify:::options->debug->getOptions->if->getValue->graph->before->graph->getNodes->snapshot->new->DeadCodeEliminationPhase->run->after->graph->getNodes->snapshot->if->before->size->after->size->if->discovered->put->before->removeAll->prefix->error->new->GraalError->if->getValue->error->getMessage->println->else->if->getValue->error->printStackTrace->else->throw

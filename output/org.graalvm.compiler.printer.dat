org.graalvm.compiler.printer.NoDeadCodeVerifyHandler_OptionDescriptors#get(String)->OptionDescriptor::: no dead code verify handler_ option descriptors get
org.graalvm.compiler.printer.NoDeadCodeVerifyHandler_OptionDescriptors#iterator()->Iterator::: no dead code verify handler_ option descriptors iterator
org.graalvm.compiler.printer.BinaryGraphPrinter#getSnippetReflectionProvider()->SnippetReflectionProvider::: binary graph printer get snippet reflection provider
org.graalvm.compiler.printer.BinaryGraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map)->void::: binary graph printer begin group
org.graalvm.compiler.printer.BinaryGraphPrinter#endGroup()->void::: binary graph printer end group
org.graalvm.compiler.printer.BinaryGraphPrinter#close()->void::: binary graph printer close
org.graalvm.compiler.printer.BinaryGraphPrinter#method(Object)->ResolvedJavaMethod::: binary graph printer method
org.graalvm.compiler.printer.BinaryGraphPrinter#node(Object)->Node::: binary graph printer node
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeClass(Object)->NodeClass::: binary graph printer node class
org.graalvm.compiler.printer.BinaryGraphPrinter#classForNode(Node)->NodeClass::: binary graph printer class for node
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeClassType(NodeClass)->Object::: binary graph printer node class type
org.graalvm.compiler.printer.BinaryGraphPrinter#nameTemplate(NodeClass)->String::: binary graph printer name template
org.graalvm.compiler.printer.BinaryGraphPrinter#graph(GraphInfo, Object)->GraphInfo::: binary graph printer graph
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeId(Node)->int::: binary graph printer node id
org.graalvm.compiler.printer.BinaryGraphPrinter#portInputs(NodeClass)->Edges::: binary graph printer port inputs
org.graalvm.compiler.printer.BinaryGraphPrinter#portOutputs(NodeClass)->Edges::: binary graph printer port outputs
org.graalvm.compiler.printer.BinaryGraphPrinter#blockNodes(GraphInfo, Block)->List::: binary graph printer block nodes
org.graalvm.compiler.printer.BinaryGraphPrinter#blockId(Block)->int::: binary graph printer block id
org.graalvm.compiler.printer.BinaryGraphPrinter#blockSuccessors(Block)->List::: binary graph printer block successors
org.graalvm.compiler.printer.BinaryGraphPrinter#nodes(GraphInfo)->Iterable::: binary graph printer nodes
org.graalvm.compiler.printer.BinaryGraphPrinter#nodesCount(GraphInfo)->int::: binary graph printer nodes count
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeProperties(GraphInfo, Node, Map)->void::: binary graph printer node properties
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeHasPredecessor(Node)->boolean::: binary graph printer node has predecessor
org.graalvm.compiler.printer.BinaryGraphPrinter#blocks(GraphInfo)->List::: binary graph printer blocks
org.graalvm.compiler.printer.BinaryGraphPrinter#print(DebugContext, Graph, Map, int, String, Object...)->void::: binary graph printer print
org.graalvm.compiler.printer.BinaryGraphPrinter#portSize(Edges)->int::: binary graph printer port size
org.graalvm.compiler.printer.BinaryGraphPrinter#edgeDirect(Edges, int)->boolean::: binary graph printer edge direct
org.graalvm.compiler.printer.BinaryGraphPrinter#edgeName(Edges, int)->String::: binary graph printer edge name
org.graalvm.compiler.printer.BinaryGraphPrinter#edgeType(Edges, int)->Object::: binary graph printer edge type
org.graalvm.compiler.printer.BinaryGraphPrinter#edgeNodes(GraphInfo, Node, Edges, int)->Collection::: binary graph printer edge nodes
org.graalvm.compiler.printer.BinaryGraphPrinter#enumClass(Object)->Object::: binary graph printer enum class
org.graalvm.compiler.printer.BinaryGraphPrinter#enumOrdinal(Object)->int::: binary graph printer enum ordinal
org.graalvm.compiler.printer.BinaryGraphPrinter#enumTypeValues(Object)->String[]::: binary graph printer enum type values
org.graalvm.compiler.printer.BinaryGraphPrinter#typeName(Object)->String::: binary graph printer type name
org.graalvm.compiler.printer.BinaryGraphPrinter#methodCode(ResolvedJavaMethod)->byte[]::: binary graph printer method code
org.graalvm.compiler.printer.BinaryGraphPrinter#methodModifiers(ResolvedJavaMethod)->int::: binary graph printer method modifiers
org.graalvm.compiler.printer.BinaryGraphPrinter#methodSignature(ResolvedJavaMethod)->Signature::: binary graph printer method signature
org.graalvm.compiler.printer.BinaryGraphPrinter#methodName(ResolvedJavaMethod)->String::: binary graph printer method name
org.graalvm.compiler.printer.BinaryGraphPrinter#methodDeclaringClass(ResolvedJavaMethod)->Object::: binary graph printer method declaring class
org.graalvm.compiler.printer.BinaryGraphPrinter#fieldModifiers(ResolvedJavaField)->int::: binary graph printer field modifiers
org.graalvm.compiler.printer.BinaryGraphPrinter#fieldTypeName(ResolvedJavaField)->String::: binary graph printer field type name
org.graalvm.compiler.printer.BinaryGraphPrinter#fieldName(ResolvedJavaField)->String::: binary graph printer field name
org.graalvm.compiler.printer.BinaryGraphPrinter#fieldDeclaringClass(ResolvedJavaField)->Object::: binary graph printer field declaring class
org.graalvm.compiler.printer.BinaryGraphPrinter#field(Object)->ResolvedJavaField::: binary graph printer field
org.graalvm.compiler.printer.BinaryGraphPrinter#signature(Object)->Signature::: binary graph printer signature
org.graalvm.compiler.printer.BinaryGraphPrinter#signatureParameterCount(Signature)->int::: binary graph printer signature parameter count
org.graalvm.compiler.printer.BinaryGraphPrinter#signatureParameterTypeName(Signature, int)->String::: binary graph printer signature parameter type name
org.graalvm.compiler.printer.BinaryGraphPrinter#signatureReturnTypeName(Signature)->String::: binary graph printer signature return type name
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeSourcePosition(Object)->NodeSourcePosition::: binary graph printer node source position
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeSourcePositionMethod(NodeSourcePosition)->ResolvedJavaMethod::: binary graph printer node source position method
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeSourcePositionCaller(NodeSourcePosition)->NodeSourcePosition::: binary graph printer node source position caller
org.graalvm.compiler.printer.BinaryGraphPrinter#nodeSourcePositionBCI(NodeSourcePosition)->int::: binary graph printer node source position i
org.graalvm.compiler.printer.BinaryGraphPrinter#methodStackTraceElement(ResolvedJavaMethod, int, NodeSourcePosition)->StackTraceElement::: binary graph printer method stack trace element
org.graalvm.compiler.printer.BinaryGraphPrinter#methodLocation(ResolvedJavaMethod, int, NodeSourcePosition)->Iterable::: binary graph printer method location
org.graalvm.compiler.printer.BinaryGraphPrinter#locationLanguage(SourceLanguagePosition)->String::: binary graph printer location language
org.graalvm.compiler.printer.BinaryGraphPrinter#locationURI(SourceLanguagePosition)->URI::: binary graph printer location i
org.graalvm.compiler.printer.BinaryGraphPrinter#locationLineNumber(SourceLanguagePosition)->int::: binary graph printer location line number
org.graalvm.compiler.printer.BinaryGraphPrinter#locationOffsetStart(SourceLanguagePosition)->int::: binary graph printer location offset start
org.graalvm.compiler.printer.BinaryGraphPrinter#locationOffsetEnd(SourceLanguagePosition)->int::: binary graph printer location offset end
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#getSnippetReflectionProvider()->SnippetReflectionProvider::: canonical string graph printer get snippet reflection provider
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#writeCanonicalGraphExpressionString(ValueNode, boolean, boolean, PrintWriter)->void::: canonical string graph printer write canonical graph expression string
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#writeCanonicalExpressionCFGString(StructuredGraph, boolean, boolean, PrintWriter)->void::: canonical string graph printer write canonical expression string
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#getControlFlowGraph(StructuredGraph)->ControlFlowGraph::: canonical string graph printer get control flow graph
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#writeCanonicalGraphString(StructuredGraph, boolean, boolean, PrintWriter)->void::: canonical string graph printer write canonical graph string
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#getCanonicalGraphString(StructuredGraph, boolean, boolean)->String::: canonical string graph printer get canonical graph string
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map)->void::: canonical string graph printer begin group
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#print(DebugContext, Graph, Map, int, String, Object...)->void::: canonical string graph printer print
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#endGroup()->void::: canonical string graph printer end group
org.graalvm.compiler.printer.CanonicalStringGraphPrinter#close()->void::: canonical string graph printer close
org.graalvm.compiler.printer.CFGPrinter#printCFG(String, BciBlockMapping)->void:::Prints the control flow graph denoted by a given block map.
org.graalvm.compiler.printer.CFGPrinter#printCFG(String, AbstractBlockBase[], boolean)->void:::Prints the specified list of blocks.
org.graalvm.compiler.printer.CFGPrinter#printIntervals(String, IntervalDumper)->void::: printer print intervals
org.graalvm.compiler.printer.CFGPrinter#printSchedule(String, ScheduleResult)->void::: printer print schedule
org.graalvm.compiler.printer.CFGPrinter#printTraces(String, TraceBuilderResult)->void::: printer print traces
org.graalvm.compiler.printer.CFGPrinterObserver#dump(DebugContext, Object, String, Object...)->void::: printer observer dump
org.graalvm.compiler.printer.CFGPrinterObserver#dumpSandboxed(DebugContext, Object, String)->void::: printer observer dump sandboxed
org.graalvm.compiler.printer.CFGPrinterObserver#close()->void::: printer observer close
org.graalvm.compiler.printer.CFGPrinterObserver#getDumpPath()->String::: printer observer get dump path
org.graalvm.compiler.printer.CompilationPrinter#globalOut()->OutputStream:::Gets a global output stream on a file in the current working directory
org.graalvm.compiler.printer.CompilationPrinter#flush()->void:::Flushes all buffered output to the underlying output stream.
org.graalvm.compiler.printer.CompilationPrinter#close()->void::: compilation printer close
org.graalvm.compiler.printer.CompilationPrinter#begin(String)->void::: compilation printer begin
org.graalvm.compiler.printer.CompilationPrinter#end(String)->void::: compilation printer end
org.graalvm.compiler.printer.CompilationPrinter#printCompilation(JavaMethod)->void:::Prints a compilation timestamp for a given method.
org.graalvm.compiler.printer.CompilationPrinter#printCompilation(CompilationIdentifier)->void:::Prints a compilation id.
org.graalvm.compiler.printer.CompilationPrinter#debugInfoToString(BytecodePosition, ReferenceMap, IndexedValueMap, RegisterSaveLayout)->String:::Formats given debug info as a multi line string.
org.graalvm.compiler.printer.CompilationPrinter#valueToString(JavaValue, List)->String::: compilation printer value to string
org.graalvm.compiler.printer.CompilationPrinter#printMachineCode(String, String)->void::: compilation printer print machine code
org.graalvm.compiler.printer.CompilationPrinter#printBytecodes(String)->void::: compilation printer print bytecodes
org.graalvm.compiler.printer.GraalDebugHandlersFactory#createHandlers(OptionValues)->List::: graal debug handlers factory create handlers
org.graalvm.compiler.printer.GraalDebugHandlersFactory#tryGetSchedule(DebugContext, StructuredGraph)->ScheduleResult::: graal debug handlers factory try get schedule
org.graalvm.compiler.printer.GraphPrinter#beginGroup(DebugContext, String, String, ResolvedJavaMethod, int, Map)->void:::Starts a new group of graphs with the given name, short name and method byte code index (BCI) as properties.
org.graalvm.compiler.printer.GraphPrinter#print(DebugContext, Graph, Map, int, String, Object...)->void:::Prints an entire Graph with the specified title, optionally using short names for nodes.
org.graalvm.compiler.printer.GraphPrinter#getSnippetReflectionProvider()->SnippetReflectionProvider::: graph printer get snippet reflection provider
org.graalvm.compiler.printer.GraphPrinter#endGroup()->void:::Ends the current group.
org.graalvm.compiler.printer.GraphPrinter#close()->void::: graph printer close
org.graalvm.compiler.printer.GraphPrinter#isToStringTrusted(Class)->boolean:::Determines if invoking Object#toString() on an instance of c will only run trusted code.
org.graalvm.compiler.printer.GraphPrinter#format(JavaConstant)->String:::Use the real Object#toString() method for JavaConstant JavaConstants that are wrapping trusted types, other just return the results of JavaConstant#toString().
org.graalvm.compiler.printer.GraphPrinter#updateStringPropertiesForConstant(Map, ConstantNode)->void:::Sets or updates the "rawvalue" and "toString" properties in props for cn if it's a boxed Object value and snippetReflection can access the raw value.
org.graalvm.compiler.printer.GraphPrinter#simplifyClassArgs(Object...)->Object[]:::Replaces all JavaType elements in args with the result of JavaType#getUnqualifiedName().
org.graalvm.compiler.printer.GraphPrinter#truncate(String)->String::: graph printer truncate
org.graalvm.compiler.printer.GraphPrinter#constantToString(Object)->String::: graph printer constant to string
org.graalvm.compiler.printer.GraphPrinter#constantArrayToString(Object)->String::: graph printer constant array to string
org.graalvm.compiler.printer.GraphPrinter#getScheduleOrNull(Graph)->StructuredGraph.ScheduleResult::: graph printer get schedule or null
org.graalvm.compiler.printer.GraphPrinterDumpHandler.GraphPrinterSupplier#get(DebugContext, Graph)->GraphPrinter::: graph printer supplier get
org.graalvm.compiler.printer.GraphPrinterDumpHandler#dump(DebugContext, Object, String, Object...)->void::: graph printer dump handler dump
org.graalvm.compiler.printer.GraphPrinterDumpHandler#handleException(DebugContext, IOException)->void::: graph printer dump handler handle exception
org.graalvm.compiler.printer.GraphPrinterDumpHandler#close()->void::: graph printer dump handler close
org.graalvm.compiler.printer.NoDeadCodeVerifyHandler#verify(DebugContext, Object, String, Object...)->void::: no dead code verify handler verify

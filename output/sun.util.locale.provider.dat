AuxLocaleProviderAdapter#getLocaleServiceProvider(Class):::Getter method for Locale Service Providers:::lsp->providersMap->get->if->findInstalledProvider->providersMap->putIfAbsent->return
AuxLocaleProviderAdapter#findInstalledProvider(Class):::Real body to find an implementation for each SPI.:::
AuxLocaleProviderAdapter#getBreakIteratorProvider()::: aux locale provider adapter get break iterator provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getCollatorProvider()::: aux locale provider adapter get collator provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getDateFormatProvider()::: aux locale provider adapter get date format provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getDateFormatSymbolsProvider()::: aux locale provider adapter get date format symbols provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getDecimalFormatSymbolsProvider()::: aux locale provider adapter get decimal format symbols provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getNumberFormatProvider()::: aux locale provider adapter get number format provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getCurrencyNameProvider():::Getter methods for java.util.spi.* providers:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getLocaleNameProvider()::: aux locale provider adapter get locale name provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getTimeZoneNameProvider()::: aux locale provider adapter get time zone name provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getCalendarDataProvider()::: aux locale provider adapter get calendar data provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getCalendarNameProvider()::: aux locale provider adapter get calendar name provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getCalendarProvider():::Getter methods for sun.util.spi.* providers:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getLocaleResources(Locale)::: aux locale provider adapter get locale resources:::return
AuxLocaleProviderAdapter#getJavaTimeDateTimePatternProvider()::: aux locale provider adapter get java time date time pattern provider:::return->getLocaleServiceProvider
AuxLocaleProviderAdapter#getAvailableLocales()::: aux locale provider adapter get available locales:::if->avail->new->ArrayList<>->foreach->lsp->getLocaleServiceProvider->if->avail->Arrays->lsp->getAvailableLocales->asList->addAll->avail->new->LocaleArr->toArray->return
AuxLocaleProviderAdapter.NullProvider#getAvailableLocales()::: null provider get available locales:::return->new->LocaleArr
AvailableLanguageTags#getAvailableLanguageTags():::Returns a set of available language tags of a LocaleServiceProvider:::
BaseLocaleDataMetaInfo#getSupportedLocaleString(String)::: base locale data meta info get supported locale string:::return->resourceNameToLocales->getOrDefault
BaseLocaleDataMetaInfo#getType()::: base locale data meta info get type:::return
BaseLocaleDataMetaInfo#availableLanguageTags(String)::: base locale data meta info available language tags:::return->getSupportedLocaleString
BreakIteratorProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
BreakIteratorProviderImpl#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.:::return->getBreakInstance
BreakIteratorProviderImpl#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.:::return->getBreakInstance
BreakIteratorProviderImpl#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.:::return->getBreakInstance
BreakIteratorProviderImpl#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.:::return->getBreakInstance
BreakIteratorProviderImpl#getBreakInstance(Locale, int, String, String)::: break iterator provider impl get break instance:::Objects->requireNonNull->lr->LocaleProviderAdapter->forJRE->getLocaleResources->classNames->lr->getBreakIteratorInfo->ruleFile->lr->getBreakIteratorInfo->ruleData->lr->getBreakIteratorResources->try->switch->return->new->RuleBasedBreakIterator->dictionaryFile->lr->getBreakIteratorInfo->dictionaryData->lr->getBreakIteratorResources->return->new->DictionaryBasedBreakIterator->throw->new->IllegalArgumentException->catch->throw->e->toString->new->InternalError->finally
BreakIteratorProviderImpl#getAvailableLanguageTags()::: break iterator provider impl get available language tags:::return
BreakIteratorProviderImpl#isSupportedLocale(Locale)::: break iterator provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
CalendarDataProviderImpl#getFirstDayOfWeek(Locale)::: calendar data provider impl get first day of week:::fw->LocaleProviderAdapter->forType->getLocaleResources->getCalendarData->return->convertToCalendarData
CalendarDataProviderImpl#getMinimalDaysInFirstWeek(Locale)::: calendar data provider impl get minimal days in first week:::md->LocaleProviderAdapter->forType->getLocaleResources->getCalendarData->return->convertToCalendarData
CalendarDataProviderImpl#getAvailableLocales()::: calendar data provider impl get available locales:::return->LocaleProviderAdapter->toLocaleArray
CalendarDataProviderImpl#getAvailableLanguageTags()::: calendar data provider impl get available language tags:::return
CalendarDataProviderImpl#convertToCalendarData(String)::: calendar data provider impl convert to calendar data:::val->Integer->parseInt->return->src->isEmpty
CalendarDataUtility#retrieveFirstDayOfWeek(Locale)::: calendar data utility retrieve first day of week:::if->locale->hasExtensions->fw->locale->getUnicodeLocaleType->if->switch->fw->toLowerCase->return->return->return->return->return->return->return->pool->LocaleServiceProviderPool->getPool->value->pool->findRegionOverride->getLocalizedObject->return
CalendarDataUtility#retrieveMinimalDaysInFirstWeek(Locale)::: calendar data utility retrieve minimal days in first week:::pool->LocaleServiceProviderPool->getPool->value->pool->findRegionOverride->getLocalizedObject->return
CalendarDataUtility#retrieveFieldValueName(String, int, int, int, Locale)::: calendar data utility retrieve field value name:::pool->LocaleServiceProviderPool->getPool->return->pool->normalizeCalendarType->getLocalizedObject
CalendarDataUtility#retrieveJavaTimeFieldValueName(String, int, int, int, Locale)::: calendar data utility retrieve java time field value name:::pool->LocaleServiceProviderPool->getPool->name->pool->normalizeCalendarType->getLocalizedObject->if->pool->normalizeCalendarType->getLocalizedObject->return
CalendarDataUtility#retrieveFieldValueNames(String, int, int, Locale)::: calendar data utility retrieve field value names:::pool->LocaleServiceProviderPool->getPool->return->pool->normalizeCalendarType->getLocalizedObject
CalendarDataUtility#retrieveJavaTimeFieldValueNames(String, int, int, Locale)::: calendar data utility retrieve java time field value names:::pool->LocaleServiceProviderPool->getPool->map->pool->normalizeCalendarType->getLocalizedObject->if->pool->normalizeCalendarType->getLocalizedObject->return
CalendarDataUtility#findRegionOverride(Locale):::Utility to look for a region override extension:::rg->l->getUnicodeLocaleType->override->if->rg->length->rg->toUpperCase->if->rg->charAt->rg->charAt->rg->charAt->rg->charAt->rg->substring->equals->new->Locale.Builder->setLocale->rg->substring->setRegion->build->return
CalendarDataUtility#normalizeCalendarType(String)::: calendar data utility normalize calendar type:::type->if->requestID->equals->requestID->equals->else->if->requestID->startsWith->else->return
CalendarDataUtility.CalendarFieldValueNameGetter#getObject(CalendarNameProvider, Locale, String, Object...)::: calendar field value name getter get object:::field->value->style->javatime->if->name->getJavaTimeDisplayName->return->return->calendarNameProvider->getDisplayName
CalendarDataUtility.CalendarFieldValueNamesMapGetter#getObject(CalendarNameProvider, Locale, String, Object...)::: calendar field value names map getter get object:::field->style->javatime->if->map->getJavaTimeDisplayNames->return->return->calendarNameProvider->getDisplayNames
CalendarDataUtility.CalendarWeekParameterGetter#getObject(CalendarDataProvider, Locale, String, Object...)::: calendar week parameter getter get object:::value->switch->calendarDataProvider->getFirstDayOfWeek->if->break->calendarDataProvider->getMinimalDaysInFirstWeek->if->break->throw->new->InternalError->return
CalendarNameProviderImpl#getDisplayName(String, int, int, int, Locale)::: calendar name provider impl get display name:::return->getDisplayNameImpl
CalendarNameProviderImpl#getJavaTimeDisplayName(String, int, int, int, Locale)::: calendar name provider impl get java time display name:::return->getDisplayNameImpl
CalendarNameProviderImpl#getDisplayNameImpl(String, int, int, int, Locale, boolean)::: calendar name provider impl get display name impl:::name->key->getResourceKey->if->lr->LocaleProviderAdapter->forType->getLocaleResources->strings->lr->getJavaTimeNames->lr->getCalendarNames->if->key->indexOf->key->replaceFirst->lr->getJavaTimeNames->lr->getCalendarNames->if->if->if->return->else->if->if->equals->jeras->CalendarSystem->forName->getEras->if->if->LocaleProviderAdapter->forJRE->getLocaleResources->getResourceKeyFor->lr->getJavaTimeNames->lr->getCalendarNames->if->supEra->if->return->getBaseStyle->supEra->getAbbreviation->supEra->getName->else->return->supEra->getName->supEra->getAbbreviation->else->return->else->return->if->name->length->getBaseStyle->getDisplayName->return
CalendarNameProviderImpl#getDisplayNames(String, int, int, Locale)::: calendar name provider impl get display names:::names->if->getDisplayNamesImpl->foreach->names->getDisplayNamesImpl->putAll->else->getDisplayNamesImpl->return->names->isEmpty
CalendarNameProviderImpl#getJavaTimeDisplayNames(String, int, int, Locale)::: calendar name provider impl get java time display names:::names->getDisplayNamesImpl->return->names->isEmpty
CalendarNameProviderImpl#getDisplayNamesImpl(String, int, int, Locale, boolean)::: calendar name provider impl get display names impl:::key->getResourceKey->map->new->TreeMap<>->if->lr->LocaleProviderAdapter->forType->getLocaleResources->strings->lr->getJavaTimeNames->lr->getCalendarNames->if->key->indexOf->key->replaceFirst->lr->getJavaTimeNames->lr->getCalendarNames->if->if->hasDuplicates->if->if->map->put->else->base->for->i->return
CalendarNameProviderImpl#getBaseStyle(int)::: calendar name provider impl get base style:::return
CalendarNameProviderImpl.LengthBasedComparator#compare(String, String)::: length based comparator compare:::n->o2->length->o1->length->return->o1->compareTo
CalendarNameProviderImpl#getAvailableLocales()::: calendar name provider impl get available locales:::return->LocaleProviderAdapter->toLocaleArray
CalendarNameProviderImpl#isSupportedLocale(Locale)::: calendar name provider impl is supported locale:::if->equals->return->calendarType->if->locale->hasExtensions->locale->getUnicodeLocaleType->locale->stripExtensions->if->switch->break->return->if->langtags->locale->toLanguageTag->contains->return->oldname->locale->toString->replace->return->langtags->contains
CalendarNameProviderImpl#getAvailableLanguageTags()::: calendar name provider impl get available language tags:::return
CalendarNameProviderImpl#hasDuplicates(String[])::: calendar name provider impl has duplicates:::len->for->i->return
CalendarNameProviderImpl#getResourceKey(String, int, int, boolean)::: calendar name provider impl get resource key:::return->getResourceKeyFor
CalendarNameProviderImpl#getResourceKeyFor(LocaleProviderAdapter.Type, String, int, int, boolean)::: calendar name provider impl get resource key for:::baseStyle->getBaseStyle->isStandalone->if->equals->isNarrow->key->new->StringBuilder->if->key->append->switch->if->key->append->append->if->key->append->else->if->if->if->key->append->if->key->append->else->if->key->append->key->append->break->if->key->append->append->break->if->equals->key->append->append->if->key->append->key->append->toStyleName->append->break->if->key->append->key->append->toStyleName->append->break->if->key->append->key->append->break->return->key->length->key->toString
CalendarNameProviderImpl#toStyleName(int)::: calendar name provider impl to style name:::switch->return->return->return
CalendarProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
CalendarProviderImpl#isSupportedLocale(Locale)::: calendar provider impl is supported locale:::return
CalendarProviderImpl#getInstance(TimeZone, Locale):::Returns a new Calendar instance for the specified locale.:::return->new->Calendar.Builder->setLocale->setTimeZone->System->currentTimeMillis->setInstant->build
CalendarProviderImpl#getAvailableLanguageTags()::: calendar provider impl get available language tags:::return
CollatorProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
CollatorProviderImpl#isSupportedLocale(Locale)::: collator provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
CollatorProviderImpl#getInstance(Locale):::Returns a new Collator instance for the specified locale.:::if->throw->new->NullPointerException->result->colString->LocaleProviderAdapter->forType->getLocaleResources->getCollationData->try->new->RuleBasedCollator->catch->try->new->RuleBasedCollator->catch->throw->new->InternalError->finally->finally->result->setDecomposition->return->result->clone
CollatorProviderImpl#getAvailableLanguageTags()::: collator provider impl get available language tags:::return
CurrencyNameProviderImpl#getAvailableLanguageTags()::: currency name provider impl get available language tags:::return
CurrencyNameProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
CurrencyNameProviderImpl#getSymbol(String, Locale):::Gets the symbol of the given currency code for the specified locale:::return->currencyCode->toUpperCase->getString
CurrencyNameProviderImpl#getDisplayName(String, Locale):::Returns a name for the currency that is appropriate for display to the user:::return->currencyCode->toLowerCase->getString
CurrencyNameProviderImpl#getString(String, Locale)::: currency name provider impl get string:::if->throw->new->NullPointerException->return->LocaleProviderAdapter->forType->getLocaleResources->getCurrencyName
DateFormatProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
DateFormatProviderImpl#isSupportedLocale(Locale)::: date format provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
DateFormatProviderImpl#getTimeInstance(int, Locale):::Returns a new DateFormat instance which formats time with the given formatting style for the specified locale.:::return->getInstance
DateFormatProviderImpl#getDateInstance(int, Locale):::Returns a new DateFormat instance which formats date with the given formatting style for the specified locale.:::return->getInstance
DateFormatProviderImpl#getDateTimeInstance(int, int, Locale):::Returns a new DateFormat instance which formats date and time with the given formatting style for the specified locale.:::return->getInstance
DateFormatProviderImpl#getInstance(int, int, Locale)::: date format provider impl get instance:::if->throw->new->NullPointerException->rg->CalendarDataUtility->findRegionOverride->sdf->new->SimpleDateFormat->cal->sdf->getCalendar->try->pattern->LocaleProviderAdapter->forType->getLocaleResources->getDateTimePattern->sdf->applyPattern->catch->sdf->applyPattern->finally->tz->locale->getUnicodeLocaleType->if->sdf->TimeZoneNameUtility->convertLDMLShortID->TimeZone->getTimeZone->map->sdf->getTimeZone->orElseGet->setTimeZone->return
DateFormatProviderImpl#getAvailableLanguageTags()::: date format provider impl get available language tags:::return
DateFormatSymbolsProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
DateFormatSymbolsProviderImpl#isSupportedLocale(Locale)::: date format symbols provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
DateFormatSymbolsProviderImpl#getInstance(Locale):::Returns a new DateFormatSymbols instance for the specified locale.:::if->throw->new->NullPointerException->return->new->DateFormatSymbols
DateFormatSymbolsProviderImpl#getAvailableLanguageTags()::: date format symbols provider impl get available language tags:::return
DecimalFormatSymbolsProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
DecimalFormatSymbolsProviderImpl#isSupportedLocale(Locale)::: decimal format symbols provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
DecimalFormatSymbolsProviderImpl#getInstance(Locale):::Returns a new DecimalFormatSymbols instance for the specified locale.:::if->throw->new->NullPointerException->return->new->DecimalFormatSymbols
DecimalFormatSymbolsProviderImpl#getAvailableLanguageTags()::: decimal format symbols provider impl get available language tags:::return
FallbackLocaleProviderAdapter#getAdapterType():::Returns the type of this LocaleProviderAdapter:::return
FallbackLocaleProviderAdapter#getLocaleResources(Locale)::: fallback locale provider adapter get locale resources:::return
FallbackLocaleProviderAdapter#createLanguageTagSet(String)::: fallback locale provider adapter create language tag set:::return
FallbackLocaleProviderAdapter#isSupportedProviderLocale(Locale, Set)::: fallback locale provider adapter is supported provider locale:::return->equals
HostLocaleProviderAdapter#getAdapterType():::Returns the type of this LocaleProviderAdapter:::return
HostLocaleProviderAdapter#findInstalledProvider(Class)::: host locale provider adapter find installed provider:::try->getter->c->getSimpleName->getMethod->return->getter->invoke->catch->LocaleServiceProviderPool->ex->toString->config->finally->return
HostLocaleProviderAdapterImpl#getDateFormatProvider()::: host locale provider adapter impl get date format provider:::return->new->DateFormatProvider
HostLocaleProviderAdapterImpl#getDateFormatSymbolsProvider()::: host locale provider adapter impl get date format symbols provider:::return->new->DateFormatSymbolsProvider
HostLocaleProviderAdapterImpl#getNumberFormatProvider()::: host locale provider adapter impl get number format provider:::return->new->NumberFormatProvider
HostLocaleProviderAdapterImpl#getDecimalFormatSymbolsProvider()::: host locale provider adapter impl get decimal format symbols provider:::return->new->DecimalFormatSymbolsProvider
HostLocaleProviderAdapterImpl#getCalendarDataProvider()::: host locale provider adapter impl get calendar data provider:::return->new->CalendarDataProvider
HostLocaleProviderAdapterImpl#getCalendarNameProvider()::: host locale provider adapter impl get calendar name provider:::return->new->CalendarNameProvider
HostLocaleProviderAdapterImpl#getCalendarProvider()::: host locale provider adapter impl get calendar provider:::return->new->CalendarProvider
HostLocaleProviderAdapterImpl#getCurrencyNameProvider()::: host locale provider adapter impl get currency name provider:::return->new->CurrencyNameProvider
HostLocaleProviderAdapterImpl#getLocaleNameProvider()::: host locale provider adapter impl get locale name provider:::return->new->LocaleNameProvider
HostLocaleProviderAdapterImpl#getJavaTimeDateTimePatternProvider()::: host locale provider adapter impl get java time date time pattern provider:::return->new->JavaTimeDateTimePatternProvider
HostLocaleProviderAdapterImpl#convertDateTimePattern(String)::: host locale provider adapter impl convert date time pattern:::ret->winPattern->replaceAll->ret->replaceAll->ret->replaceAll->ret->replaceAll->return
HostLocaleProviderAdapterImpl#getSupportedCalendarLocales()::: host locale provider adapter impl get supported calendar locales:::if->supportedLocaleSet->contains->isJapaneseCalendar->sup->new->LocaleArr->System->arraycopy->return->return
HostLocaleProviderAdapterImpl#isSupportedCalendarLocale(Locale)::: host locale provider adapter impl is supported calendar locale:::base->stripVariantAndExtensions->if->supportedLocaleSet->contains->return->calid->base->toLanguageTag->getCalendarID->if->return->requestedCalType->locale->getUnicodeLocaleType->nativeCalType->replaceFirst->if->return->Calendar->getAvailableCalendarTypes->contains->else->return->requestedCalType->equals
HostLocaleProviderAdapterImpl#getSupportedNativeDigitLocales()::: host locale provider adapter impl get supported native digit locales:::if->supportedLocaleSet->contains->isNativeDigit->sup->new->LocaleArr->System->arraycopy->return->return
HostLocaleProviderAdapterImpl#isSupportedNativeDigitLocale(Locale)::: host locale provider adapter impl is supported native digit locale:::if->equals->return->isNativeDigit->numtype->base->if->locale->hasExtensions->locale->getUnicodeLocaleType->locale->stripExtensions->if->supportedLocaleSet->contains->if->numtype->equals->return->else->if->locale->getLanguage->equals->return->equals->locale->toLanguageTag->isNativeDigit->return
HostLocaleProviderAdapterImpl#removeExtensions(Locale)::: host locale provider adapter impl remove extensions:::return->new->Locale.Builder->setLocale->clearExtensions->build
HostLocaleProviderAdapterImpl#isJapaneseCalendar()::: host locale provider adapter impl is japanese calendar:::return->getCalendarID
HostLocaleProviderAdapterImpl#stripVariantAndExtensions(Locale)::: host locale provider adapter impl strip variant and extensions:::if->locale->hasExtensions->locale->getVariant->new->Locale.Builder->setLocale->clearExtensions->build->return
HostLocaleProviderAdapterImpl#getCalendarLocale(Locale)::: host locale provider adapter impl get calendar locale:::calid->stripVariantAndExtensions->toLanguageTag->getCalendarID->if->lb->new->Locale.Builder->caltype->split->if->lb->Locale->forLanguageTag->setLocale->else->lb->setLocale->lb->setUnicodeLocaleKeyword->return->lb->build->return
HostLocaleProviderAdapterImpl#getCalendarIDFromLDMLType(String)::: host locale provider adapter impl get calendar from type:::for->i->return
HostLocaleProviderAdapterImpl#getNumberLocale(Locale)::: host locale provider adapter impl get number locale:::if->equals->if->isNativeDigit->lb->new->Locale.Builder->setLocale->lb->setUnicodeLocaleKeyword->return->lb->build->return
HostLocaleProviderAdapterImpl#initialize()::: host locale provider adapter impl initialize:::
HostLocaleProviderAdapterImpl#getDefaultLocale(int)::: host locale provider adapter impl get default locale:::
HostLocaleProviderAdapterImpl#getDateTimePattern(int, int, String)::: host locale provider adapter impl get date time pattern:::
HostLocaleProviderAdapterImpl#getCalendarID(String)::: host locale provider adapter impl get calendar d:::
HostLocaleProviderAdapterImpl#getAmPmStrings(String, String[])::: host locale provider adapter impl get am pm strings:::
HostLocaleProviderAdapterImpl#getEras(String, String[])::: host locale provider adapter impl get eras:::
HostLocaleProviderAdapterImpl#getMonths(String, String[])::: host locale provider adapter impl get months:::
HostLocaleProviderAdapterImpl#getShortMonths(String, String[])::: host locale provider adapter impl get short months:::
HostLocaleProviderAdapterImpl#getWeekdays(String, String[])::: host locale provider adapter impl get weekdays:::
HostLocaleProviderAdapterImpl#getShortWeekdays(String, String[])::: host locale provider adapter impl get short weekdays:::
HostLocaleProviderAdapterImpl#getNumberPattern(int, String)::: host locale provider adapter impl get number pattern:::
HostLocaleProviderAdapterImpl#isNativeDigit(String)::: host locale provider adapter impl is native digit:::
HostLocaleProviderAdapterImpl#getCurrencySymbol(String, String)::: host locale provider adapter impl get currency symbol:::
HostLocaleProviderAdapterImpl#getDecimalSeparator(String, char)::: host locale provider adapter impl get decimal separator:::
HostLocaleProviderAdapterImpl#getGroupingSeparator(String, char)::: host locale provider adapter impl get grouping separator:::
HostLocaleProviderAdapterImpl#getInfinity(String, String)::: host locale provider adapter impl get infinity:::
HostLocaleProviderAdapterImpl#getInternationalCurrencySymbol(String, String)::: host locale provider adapter impl get international currency symbol:::
HostLocaleProviderAdapterImpl#getMinusSign(String, char)::: host locale provider adapter impl get minus sign:::
HostLocaleProviderAdapterImpl#getMonetaryDecimalSeparator(String, char)::: host locale provider adapter impl get monetary decimal separator:::
HostLocaleProviderAdapterImpl#getNaN(String, String)::: host locale provider adapter impl get na n:::
HostLocaleProviderAdapterImpl#getPercent(String, char)::: host locale provider adapter impl get percent:::
HostLocaleProviderAdapterImpl#getPerMill(String, char)::: host locale provider adapter impl get per mill:::
HostLocaleProviderAdapterImpl#getZeroDigit(String, char)::: host locale provider adapter impl get zero digit:::
HostLocaleProviderAdapterImpl#getCalendarDataValue(String, int)::: host locale provider adapter impl get calendar data value:::
HostLocaleProviderAdapterImpl#getCalendarDisplayStrings(String, int, int, int)::: host locale provider adapter impl get calendar display strings:::
HostLocaleProviderAdapterImpl#getDisplayString(String, int, String)::: host locale provider adapter impl get display string:::
JavaTimeDateTimePatternImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
JavaTimeDateTimePatternImpl#isSupportedLocale(Locale)::: java time date time pattern impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
JavaTimeDateTimePatternImpl#getJavaTimeDateTimePattern(int, int, String, Locale)::: java time date time pattern impl get java time date time pattern:::lr->LocaleProviderAdapter->getResourceBundleBased->getLocaleResources->pattern->lr->getJavaTimeDateTimePattern->return
JavaTimeDateTimePatternImpl#getAvailableLanguageTags()::: java time date time pattern impl get available language tags:::return
JRELocaleProviderAdapter#getAdapterType():::Returns the type of this LocaleProviderAdapter:::return
JRELocaleProviderAdapter#getLocaleServiceProvider(Class):::Getter method for Locale Service Providers:::switch->c->getSimpleName->return->getBreakIteratorProvider->return->getCollatorProvider->return->getDateFormatProvider->return->getDateFormatSymbolsProvider->return->getDecimalFormatSymbolsProvider->return->getNumberFormatProvider->return->getCurrencyNameProvider->return->getLocaleNameProvider->return->getTimeZoneNameProvider->return->getCalendarDataProvider->return->getCalendarNameProvider->return->getCalendarProvider->return->getJavaTimeDateTimePatternProvider->throw->new->InternalError
JRELocaleProviderAdapter#getBreakIteratorProvider()::: locale provider adapter get break iterator provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->BreakIteratorProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getCollatorProvider()::: locale provider adapter get collator provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->CollatorProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getDateFormatProvider()::: locale provider adapter get date format provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->DateFormatProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getDateFormatSymbolsProvider()::: locale provider adapter get date format symbols provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->DateFormatSymbolsProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getDecimalFormatSymbolsProvider()::: locale provider adapter get decimal format symbols provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->DecimalFormatSymbolsProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getNumberFormatProvider()::: locale provider adapter get number format provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->NumberFormatProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getCurrencyNameProvider():::Getter methods for java.util.spi.* providers:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->CurrencyNameProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getLocaleNameProvider()::: locale provider adapter get locale name provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->LocaleNameProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getTimeZoneNameProvider()::: locale provider adapter get time zone name provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->TimeZoneNameProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getCalendarDataProvider()::: locale provider adapter get calendar data provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->CalendarDataProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getCalendarNameProvider()::: locale provider adapter get calendar name provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->CalendarNameProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getCalendarProvider():::Getter methods for sun.util.spi.* providers:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->CalendarProviderImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getJavaTimeDateTimePatternProvider():::Getter methods for sun.text.spi.JavaTimeDateTimePatternProvider provider:::if->provider->AccessController->getAdapterType->getLanguageTagSet->new->JavaTimeDateTimePatternImpl->doPrivileged->synchronized->if->return
JRELocaleProviderAdapter#getLocaleResources(Locale)::: locale provider adapter get locale resources:::lr->localeResourcesMap->get->if->new->LocaleResources->lrc->localeResourcesMap->putIfAbsent->if->return
JRELocaleProviderAdapter#getLocaleData()::: locale provider adapter get locale data:::if->synchronized->if->getAdapterType->new->LocaleData->return
JRELocaleProviderAdapter#getCandidateLocales(String, Locale)::: locale provider adapter get candidate locales:::return->getNoFallbackControl->getCandidateLocales
JRELocaleProviderAdapter#getAvailableLocales():::Returns a list of the installed locales:::return->clone
JRELocaleProviderAdapter#getLanguageTagSet(String)::: locale provider adapter get language tag set:::tagset->langtagSets->get->if->createLanguageTagSet->ts->langtagSets->putIfAbsent->if->return
JRELocaleProviderAdapter#createLanguageTagSet(String)::: locale provider adapter create language tag set:::supportedLocaleString->createSupportedLocaleString->if->return->Collections->emptySet->tagset->new->HashSet<>->tokens->new->StringTokenizer->while->tokens->hasMoreTokens->tagset->tokens->nextToken->add->return
JRELocaleProviderAdapter#createSupportedLocaleString(String)::: locale provider adapter create supported locale string:::supportedLocaleString->BaseLocaleDataMetaInfo->getSupportedLocaleString->try->nonBaseTags->AccessController->tags->new->StringBuilder->foreach->ServiceLoader->loadInstalled->if->ldmi->getType->t->ldmi->availableLanguageTags->if->if->tags->length->tags->append->tags->append->return->tags->toString->doPrivileged->if->catch->throw->pae->getCause->new->InternalError->finally->return
JRELocaleProviderAdapter#createAvailableLocales()::: locale provider adapter create available locales:::supportedLocaleString->createSupportedLocaleString->if->supportedLocaleString->length->throw->new->InternalError->localeStringTokenizer->new->StringTokenizer->length->localeStringTokenizer->countTokens->locales->new->LocaleArr->for->i->return
JRELocaleProviderAdapter#isSupportedProviderLocale(Locale, Set)::: locale provider adapter is supported provider locale:::if->equals->return->locale->stripExtensions->if->langtags->locale->toLanguageTag->contains->return->oldname->locale->toString->replace->return->langtags->contains->equals->equals->equals
LocaleDataMetaInfo#getType():::Returns the type of LocaleProviderAdapter for which this LocaleData provides the data.:::
LocaleDataMetaInfo#availableLanguageTags(String):::Returns the string concatenation of the supported language tags in this LocaleData instance:::
LocaleDataMetaInfo#tzCanonicalIDs():::Returns a map for time zone ids to their canonical ids:::return
LocaleDataMetaInfo#getLanguageAliasMap():::Returns a map for  language aliases which specifies mapping from source language to from which it should be replaced.:::return
LocaleNameProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
LocaleNameProviderImpl#isSupportedLocale(Locale)::: locale name provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
LocaleNameProviderImpl#getDisplayLanguage(String, Locale):::Returns a localized name for the given ISO 639 language code and the given locale that is appropriate for display to the user:::return->getDisplayString
LocaleNameProviderImpl#getDisplayScript(String, Locale):::Returns a localized name for the given  IETF BCP47 script code and the given locale that is appropriate for display to the user:::return->getDisplayString
LocaleNameProviderImpl#getDisplayCountry(String, Locale):::Returns a localized name for the given ISO 3166 country code and the given locale that is appropriate for display to the user:::return->getDisplayString
LocaleNameProviderImpl#getDisplayVariant(String, Locale):::Returns a localized name for the given variant code and the given locale that is appropriate for display to the user:::return->getDisplayString
LocaleNameProviderImpl#getDisplayUnicodeExtensionKey(String, Locale)::: locale name provider impl get display unicode extension key:::super->getDisplayUnicodeExtensionKey->rbKey->name->getDisplayString->return->rbKey->equals
LocaleNameProviderImpl#getDisplayUnicodeExtensionType(String, String, Locale)::: locale name provider impl get display unicode extension type:::super->getDisplayUnicodeExtensionType->rbKey->name->getDisplayString->return->rbKey->equals
LocaleNameProviderImpl#getDisplayString(String, Locale)::: locale name provider impl get display string:::if->throw->new->NullPointerException->return->LocaleProviderAdapter->forType->getLocaleResources->getLocaleName
LocaleNameProviderImpl#getAvailableLanguageTags()::: locale name provider impl get available language tags:::return
LocaleProviderAdapter#forType(Type):::Returns the singleton instance for each adapter type:::switch->adapter->cached->adapterInstances->get->if->try->tmp->Class->type->getAdapterClassName->forName->newInstance->adapterInstances->putIfAbsent->if->catch->LocaleServiceProviderPool->e->toString->config->adapterInstances->putIfAbsent->if->finally->else->if->return->throw->new->InternalError
LocaleProviderAdapter#forJRE()::: locale provider adapter for e:::return->forType
LocaleProviderAdapter#getResourceBundleBased()::: locale provider adapter get resource bundle based:::foreach->getAdapterPreference->if->adapter->forType->if->return->throw->new->InternalError
LocaleProviderAdapter#getAdapterPreference():::Returns the preference order of LocaleProviderAdapter.Type:::return
LocaleProviderAdapter#getAdapter(Class, Locale):::Returns a LocaleProviderAdapter for the given locale service provider that best matches the given locale:::adapter->adapterMap->adapterCache->get->if->if->adapterMap->get->return->else->new->ConcurrentHashMap<>->adapterCache->putIfAbsent->findAdapter->if->adapterMap->putIfAbsent->return->lookupLocales->getControl->getCandidateLocales->foreach->if->loc->equals->continue->findAdapter->if->adapterMap->putIfAbsent->return->adapterMap->forType->putIfAbsent->return->forType
LocaleProviderAdapter#findAdapter(Class, Locale)::: locale provider adapter find adapter:::foreach->getAdapterPreference->adapter->forType->if->provider->adapter->getLocaleServiceProvider->if->if->provider->isSupportedLocale->return->return
LocaleProviderAdapter#isSupportedProviderLocale(Locale, Set):::A utility method for implementing the default LocaleServiceProvider.isSupportedLocale for the JRE, CLDR, and FALLBACK adapters.:::type->getAdapterType->return
LocaleProviderAdapter#toLocaleArray(Set)::: locale provider adapter to locale array:::locs->tags->size->new->LocaleArr->index->foreach->switch->break->break->Locale->forLanguageTag->break->return
LocaleProviderAdapter#getAdapterType():::Returns the type of this LocaleProviderAdapter:::
LocaleProviderAdapter#getLocaleServiceProvider(Class):::Getter method for Locale Service Providers.:::
LocaleProviderAdapter#getBreakIteratorProvider():::Returns a BreakIteratorProvider for this LocaleProviderAdapter, or null if no BreakIteratorProvider is available.:::
LocaleProviderAdapter#getCollatorProvider():::Returns a ollatorProvider for this LocaleProviderAdapter, or null if no ollatorProvider is available.:::
LocaleProviderAdapter#getDateFormatProvider():::Returns a DateFormatProvider for this LocaleProviderAdapter, or null if no DateFormatProvider is available.:::
LocaleProviderAdapter#getDateFormatSymbolsProvider():::Returns a DateFormatSymbolsProvider for this LocaleProviderAdapter, or null if no DateFormatSymbolsProvider is available.:::
LocaleProviderAdapter#getDecimalFormatSymbolsProvider():::Returns a DecimalFormatSymbolsProvider for this LocaleProviderAdapter, or null if no DecimalFormatSymbolsProvider is available.:::
LocaleProviderAdapter#getNumberFormatProvider():::Returns a NumberFormatProvider for this LocaleProviderAdapter, or null if no NumberFormatProvider is available.:::
LocaleProviderAdapter#getCurrencyNameProvider():::Returns a CurrencyNameProvider for this LocaleProviderAdapter, or null if no CurrencyNameProvider is available.:::
LocaleProviderAdapter#getLocaleNameProvider():::Returns a LocaleNameProvider for this LocaleProviderAdapter, or null if no LocaleNameProvider is available.:::
LocaleProviderAdapter#getTimeZoneNameProvider():::Returns a TimeZoneNameProvider for this LocaleProviderAdapter, or null if no TimeZoneNameProvider is available.:::
LocaleProviderAdapter#getCalendarDataProvider():::Returns a CalendarDataProvider for this LocaleProviderAdapter, or null if no CalendarDataProvider is available.:::
LocaleProviderAdapter#getCalendarNameProvider():::Returns a CalendarNameProvider for this LocaleProviderAdapter, or null if no CalendarNameProvider is available.:::
LocaleProviderAdapter#getCalendarProvider():::Returns a CalendarProvider for this LocaleProviderAdapter, or null if no CalendarProvider is available.:::
LocaleProviderAdapter#getJavaTimeDateTimePatternProvider():::Returns a JavaTimeDateTimePatternProvider for this LocaleProviderAdapter, or null if no JavaTimeDateTimePatternProvider is available.:::
LocaleProviderAdapter#getLocaleResources(Locale)::: locale provider adapter get locale resources:::
LocaleProviderAdapter#getAvailableLocales()::: locale provider adapter get available locales:::
LocaleProviderAdapter.NonExistentAdapter#getAdapterType()::: non existent adapter get adapter type:::return
LocaleResources#removeEmptyReferences()::: locale resources remove empty references:::ref->while->referenceQueue->poll->cache->getCacheKey->remove
LocaleResources#getBreakIteratorInfo(String)::: locale resources get break iterator info:::biInfo->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->localeData->getBreakIteratorInfo->getObject->cache->new->ResourceReference->put->return
LocaleResources#getBreakIteratorResources(String)::: locale resources get break iterator resources:::return->localeData->getBreakIteratorResources->getObject
LocaleResources#getCalendarData(String)::: locale resources get calendar data:::caldata->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->rb->localeData->getCalendarData->if->rb->containsKey->rb->getString->cache->new->ResourceReference->put->return
LocaleResources#getCollationData()::: locale resources get collation data:::key->coldata->removeEmptyReferences->data->cache->get->if->data->get->rb->localeData->getCollationData->if->rb->containsKey->rb->getString->cache->new->ResourceReference->put->return
LocaleResources#getDecimalFormatSymbolsData()::: locale resources get decimal format symbols data:::dfsdata->removeEmptyReferences->data->cache->get->if->data->get->rb->localeData->getNumberFormatData->new->ObjectArr->numElemKey->numberType->locale->getUnicodeLocaleType->if->if->rb->containsKey->rb->getStringArray->if->rb->containsKey->rb->getString->if->rb->containsKey->rb->getStringArray->if->rb->getStringArray->cache->new->ResourceReference->put->return
LocaleResources#getCurrencyName(String)::: locale resources get currency name:::currencyName->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->if->currencyName->equals->return->olrb->localeData->getCurrencyNames->if->olrb->containsKey->olrb->getObject->cache->new->ResourceReference->put->return
LocaleResources#getLocaleName(String)::: locale resources get locale name:::localeName->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->if->localeName->equals->return->olrb->localeData->getLocaleNames->if->olrb->containsKey->olrb->getObject->cache->new->ResourceReference->put->return
LocaleResources#getTimeZoneNames(String)::: locale resources get time zone names:::val->cacheKey->removeEmptyReferences->data->cache->get->if->Objects->isNull->Objects->data->get->isNull->tznb->localeData->getTimeZoneNames->if->tznb->containsKey->if->key->startsWith->tznb->getString->trace->else->names->tznb->getStringArray->trace->cache->new->ResourceReference->put->return
LocaleResources#getZoneIDs()::: locale resources get zone ds:::zoneIDs->removeEmptyReferences->data->cache->get->if->data->get->rb->localeData->getTimeZoneNames->rb->keySet->cache->new->ResourceReference->put->return
LocaleResources#getZoneStrings()::: locale resources get zone strings:::rb->localeData->getTimeZoneNames->keyset->getZoneIDs->value->new->LinkedHashSet<>->tzIds->Set->TimeZone->getAvailableIDs->of->new->HashSet<>->foreach->if->key->startsWith->value->rb->getStringArray->add->tzIds->remove->if->aliases->ZoneInfo->getAliasTable->tzIds->stream->i->startsWith->i->startsWith->i->startsWith->filter->val->new->StringArr->if->keyset->contains->rb->getStringArray->else->tz->aliases->get->if->keyset->contains->rb->getStringArray->value->add->forEach->return->value->new->StringArrs->toArray
LocaleResources#getCalendarNames(String)::: locale resources get calendar names:::names->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->rb->localeData->getDateFormatData->if->rb->containsKey->rb->getStringArray->cache->new->ResourceReference->put->return
LocaleResources#getJavaTimeNames(String)::: locale resources get java time names:::names->cacheKey->removeEmptyReferences->data->cache->get->if->data->get->rb->getJavaTimeFormatData->if->rb->containsKey->rb->getStringArray->cache->new->ResourceReference->put->return
LocaleResources#getDateTimePattern(int, int, Calendar)::: locale resources get date time pattern:::if->Calendar->getInstance->return->cal->getCalendarType->getDateTimePattern
LocaleResources#getJavaTimeDateTimePattern(int, int, String):::Returns a date-time format pattern:::CalendarDataUtility->normalizeCalendarType->pattern->getDateTimePattern->if->getDateTimePattern->return
LocaleResources#getDateTimePattern(String, int, int, String)::: locale resources get date time pattern:::pattern->timePattern->datePattern->if->if->getDateTimePattern->if->getDateTimePattern->if->if->getDateTimePattern->if->getDateTimePattern->if->if->dateTimePattern->dateTimeStyle->Math->max->if->getDateTimePattern->if->getDateTimePattern->switch->break->break->MessageFormat->dateTimePattern->replaceAll->format->break->else->else->if->else->throw->new->IllegalArgumentException->return
LocaleResources#getNumberPatterns()::: locale resources get number patterns:::numberPatterns->removeEmptyReferences->data->cache->get->if->data->get->resource->localeData->getNumberFormatData->resource->getStringArray->cache->new->ResourceReference->put->return
LocaleResources#getJavaTimeFormatData():::Returns the FormatData resource bundle of this LocaleResources:::rb->localeData->getDateFormatData->if->localeData->setSupplementary->return
LocaleResources#getDateTimePattern(String, String, int, String)::: locale resources get date time pattern:::sb->new->StringBuilder->if->sb->append->if->equals->sb->append->append->sb->append->resourceKey->sb->toString->cacheKey->sb->insert->toString->removeEmptyReferences->data->cache->get->value->if->data->get->r->getJavaTimeFormatData->localeData->getDateFormatData->if->r->containsKey->r->getStringArray->else->if->r->containsKey->r->getStringArray->cache->new->ResourceReference->put->if->return->styles->return
LocaleResources.ResourceReference#getCacheKey()::: resource reference get cache key:::return
LocaleResources#trace(String, Object...)::: locale resources trace:::if->format
LocaleServiceProviderPool#getPool(Class):::A factory method that returns a singleton instance:::pool->poolOfPools->get->if->newPool->new->LocaleServiceProviderPool->poolOfPools->putIfAbsent->if->return
LocaleServiceProviderPool#config(Class, String)::: locale service provider pool config:::logger->PlatformLogger->caller->getCanonicalName->getLogger->logger->config
LocaleServiceProviderPool#getAllAvailableLocales():::Returns an array of available locales for all the provider classes:::return->clone
LocaleServiceProviderPool#getAvailableLocales():::Returns an array of available locales:::locList->new->HashSet<>->locList->getAvailableLocaleSet->addAll->locList->Arrays->LocaleProviderAdapter->forJRE->getAvailableLocales->asList->addAll->tmp->locList->size->new->LocaleArr->locList->toArray->return
LocaleServiceProviderPool#getAvailableLocaleSet():::Returns the union of locale sets that are available from each service provider:::if->new->HashSet<>->foreach->LocaleProviderAdapter->getAdapterPreference->lda->LocaleProviderAdapter->forType->if->lsp->lda->getLocaleServiceProvider->if->locales->lsp->getAvailableLocales->foreach->availableLocales->getLookupLocale->add->return
LocaleServiceProviderPool#getLocalizedObject(LocalizedObjectGetter, Locale, Object...):::Returns the provider's localized object for the specified locale.:::return->getLocalizedObjectImpl
LocaleServiceProviderPool#getLocalizedObject(LocalizedObjectGetter, Locale, String, Object...):::Returns the provider's localized name for the specified locale.:::return->getLocalizedObjectImpl
LocaleServiceProviderPool#getLocalizedObject(LocalizedObjectGetter, Locale, Boolean, String, Object...):::Returns the provider's localized name for the specified locale.:::return->getLocalizedObjectImpl
LocaleServiceProviderPool#getLocalizedObjectImpl(LocalizedObjectGetter, Locale, boolean, String, Object...)::: locale service provider pool get localized object impl:::if->throw->new->NullPointerException->lookupLocales->getLookupLocales->foreach->providersObj->foreach->findProviders->getter->getObject->if->return->else->if->config->return
LocaleServiceProviderPool#findProviders(Locale, boolean):::Returns the list of locale service provider instances that support the specified locale.:::providersList->providersCache->get->if->foreach->LocaleProviderAdapter->getAdapterPreference->lda->LocaleProviderAdapter->forType->if->lsp->lda->getLocaleServiceProvider->if->if->lsp->isSupportedLocale->if->new->ArrayList<>->providersList->add->if->break->if->val->providersCache->putIfAbsent->if->return
LocaleServiceProviderPool#getLookupLocales(Locale):::Returns a list of candidate locales for service look up.:::lookupLocales->Control->getNoFallbackControl->getCandidateLocales->return
LocaleServiceProviderPool#getLookupLocale(Locale):::Returns an instance of Locale used for service look up:::lookupLocale->if->locale->hasExtensions->locale->equals->locale->equals->locbld->new->Builder->try->locbld->setLocale->locbld->clearExtensions->locbld->build->catch->config->locale->getLanguage->locale->getCountry->locale->getVariant->new->Locale->finally->return
LocaleServiceProviderPool.LocalizedObjectGetter#getObject(P, Locale, String, Object...):::Returns an object from the provider:::
NumberFormatProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->forType->getAvailableLocales
NumberFormatProviderImpl#isSupportedLocale(Locale)::: number format provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
NumberFormatProviderImpl#getCurrencyInstance(Locale):::Returns a new NumberFormat instance which formats monetary values for the specified locale.:::return->getInstance
NumberFormatProviderImpl#getIntegerInstance(Locale):::Returns a new NumberFormat instance which formats integer values for the specified locale:::return->getInstance
NumberFormatProviderImpl#getNumberInstance(Locale):::Returns a new general-purpose NumberFormat instance for the specified locale.:::return->getInstance
NumberFormatProviderImpl#getPercentInstance(Locale):::Returns a new NumberFormat instance which formats percentage values for the specified locale.:::return->getInstance
NumberFormatProviderImpl#getInstance(Locale, int)::: number format provider impl get instance:::if->throw->new->NullPointerException->override->locale->getUnicodeLocaleType->CalendarDataUtility->findRegionOverride->adapter->LocaleProviderAdapter->forType->numberPatterns->adapter->getLocaleResources->getNumberPatterns->symbols->DecimalFormatSymbols->getInstance->entry->format->new->DecimalFormat->if->format->setMaximumFractionDigits->format->setDecimalSeparatorAlwaysShown->format->setParseIntegerOnly->else->if->adjustForCurrencyDefaultFractionDigits->return
NumberFormatProviderImpl#adjustForCurrencyDefaultFractionDigits(DecimalFormat, DecimalFormatSymbols):::Adjusts the minimum and maximum fraction digits to values that are reasonable for the currency's default fraction digits.:::currency->symbols->getCurrency->if->try->Currency->symbols->getInternationalCurrencySymbol->getInstance->catch->finally->if->digits->currency->getDefaultFractionDigits->if->oldMinDigits->format->getMinimumFractionDigits->if->format->getMaximumFractionDigits->format->setMinimumFractionDigits->format->setMaximumFractionDigits->else->format->Math->min->setMinimumFractionDigits->format->setMaximumFractionDigits
NumberFormatProviderImpl#getAvailableLanguageTags()::: number format provider impl get available language tags:::return
ResourceBundleBasedAdapter#getLocaleData()::: resource bundle based adapter get locale data:::
ResourceBundleBasedAdapter#getCandidateLocales(String, Locale):::candidate locales customization:::
SPILocaleProviderAdapter#getAdapterType():::Returns the type of this LocaleProviderAdapter:::return
SPILocaleProviderAdapter#findInstalledProvider(Class)::: locale provider adapter find installed provider:::try->return->AccessController->new->PrivilegedExceptionAction<P>->doPrivileged->catch->LocaleServiceProviderPool->e->toString->config->finally->return
SPILocaleProviderAdapter.Delegate#addImpl(P)::: delegate add impl:::
SPILocaleProviderAdapter.Delegate#getImpl(Locale)::: delegate get impl:::
SPILocaleProviderAdapter#getImpl(Map, Locale)::: locale provider adapter get impl:::foreach->LocaleServiceProviderPool->getLookupLocales->ret->map->get->if->return->return
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#addImpl(BreakIteratorProvider)::: break iterator provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getImpl(Locale)::: break iterator provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getAvailableLocales()::: break iterator provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#isSupportedLocale(Locale)::: break iterator provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getWordInstance(Locale)::: break iterator provider delegate get word instance:::bip->getImpl->return->bip->getWordInstance
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getLineInstance(Locale)::: break iterator provider delegate get line instance:::bip->getImpl->return->bip->getLineInstance
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getCharacterInstance(Locale)::: break iterator provider delegate get character instance:::bip->getImpl->return->bip->getCharacterInstance
SPILocaleProviderAdapter.BreakIteratorProviderDelegate#getSentenceInstance(Locale)::: break iterator provider delegate get sentence instance:::bip->getImpl->return->bip->getSentenceInstance
SPILocaleProviderAdapter.CollatorProviderDelegate#addImpl(CollatorProvider)::: collator provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.CollatorProviderDelegate#getImpl(Locale)::: collator provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.CollatorProviderDelegate#getAvailableLocales()::: collator provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.CollatorProviderDelegate#isSupportedLocale(Locale)::: collator provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.CollatorProviderDelegate#getInstance(Locale)::: collator provider delegate get instance:::cp->getImpl->return->cp->getInstance
SPILocaleProviderAdapter.DateFormatProviderDelegate#addImpl(DateFormatProvider)::: date format provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.DateFormatProviderDelegate#getImpl(Locale)::: date format provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.DateFormatProviderDelegate#getAvailableLocales()::: date format provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.DateFormatProviderDelegate#isSupportedLocale(Locale)::: date format provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.DateFormatProviderDelegate#getTimeInstance(int, Locale)::: date format provider delegate get time instance:::dfp->getImpl->return->dfp->getTimeInstance
SPILocaleProviderAdapter.DateFormatProviderDelegate#getDateInstance(int, Locale)::: date format provider delegate get date instance:::dfp->getImpl->return->dfp->getDateInstance
SPILocaleProviderAdapter.DateFormatProviderDelegate#getDateTimeInstance(int, int, Locale)::: date format provider delegate get date time instance:::dfp->getImpl->return->dfp->getDateTimeInstance
SPILocaleProviderAdapter.DateFormatSymbolsProviderDelegate#addImpl(DateFormatSymbolsProvider)::: date format symbols provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.DateFormatSymbolsProviderDelegate#getImpl(Locale)::: date format symbols provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.DateFormatSymbolsProviderDelegate#getAvailableLocales()::: date format symbols provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.DateFormatSymbolsProviderDelegate#isSupportedLocale(Locale)::: date format symbols provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.DateFormatSymbolsProviderDelegate#getInstance(Locale)::: date format symbols provider delegate get instance:::dfsp->getImpl->return->dfsp->getInstance
SPILocaleProviderAdapter.DecimalFormatSymbolsProviderDelegate#addImpl(DecimalFormatSymbolsProvider)::: decimal format symbols provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.DecimalFormatSymbolsProviderDelegate#getImpl(Locale)::: decimal format symbols provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.DecimalFormatSymbolsProviderDelegate#getAvailableLocales()::: decimal format symbols provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.DecimalFormatSymbolsProviderDelegate#isSupportedLocale(Locale)::: decimal format symbols provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.DecimalFormatSymbolsProviderDelegate#getInstance(Locale)::: decimal format symbols provider delegate get instance:::dfsp->getImpl->return->dfsp->getInstance
SPILocaleProviderAdapter.NumberFormatProviderDelegate#addImpl(NumberFormatProvider)::: number format provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getImpl(Locale)::: number format provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getAvailableLocales()::: number format provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.NumberFormatProviderDelegate#isSupportedLocale(Locale)::: number format provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getCurrencyInstance(Locale)::: number format provider delegate get currency instance:::nfp->getImpl->return->nfp->getCurrencyInstance
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getIntegerInstance(Locale)::: number format provider delegate get integer instance:::nfp->getImpl->return->nfp->getIntegerInstance
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getNumberInstance(Locale)::: number format provider delegate get number instance:::nfp->getImpl->return->nfp->getNumberInstance
SPILocaleProviderAdapter.NumberFormatProviderDelegate#getPercentInstance(Locale)::: number format provider delegate get percent instance:::nfp->getImpl->return->nfp->getPercentInstance
SPILocaleProviderAdapter.CalendarDataProviderDelegate#addImpl(CalendarDataProvider)::: calendar data provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.CalendarDataProviderDelegate#getImpl(Locale)::: calendar data provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.CalendarDataProviderDelegate#getAvailableLocales()::: calendar data provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.CalendarDataProviderDelegate#isSupportedLocale(Locale)::: calendar data provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.CalendarDataProviderDelegate#getFirstDayOfWeek(Locale)::: calendar data provider delegate get first day of week:::cdp->getImpl->return->cdp->getFirstDayOfWeek
SPILocaleProviderAdapter.CalendarDataProviderDelegate#getMinimalDaysInFirstWeek(Locale)::: calendar data provider delegate get minimal days in first week:::cdp->getImpl->return->cdp->getMinimalDaysInFirstWeek
SPILocaleProviderAdapter.CalendarNameProviderDelegate#addImpl(CalendarNameProvider)::: calendar name provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.CalendarNameProviderDelegate#getImpl(Locale)::: calendar name provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.CalendarNameProviderDelegate#getAvailableLocales()::: calendar name provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.CalendarNameProviderDelegate#isSupportedLocale(Locale)::: calendar name provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.CalendarNameProviderDelegate#getDisplayName(String, int, int, int, Locale)::: calendar name provider delegate get display name:::cdp->getImpl->return->cdp->getDisplayName
SPILocaleProviderAdapter.CalendarNameProviderDelegate#getDisplayNames(String, int, int, Locale)::: calendar name provider delegate get display names:::cdp->getImpl->return->cdp->getDisplayNames
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#addImpl(CurrencyNameProvider)::: currency name provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#getImpl(Locale)::: currency name provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#getAvailableLocales()::: currency name provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#isSupportedLocale(Locale)::: currency name provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#getSymbol(String, Locale)::: currency name provider delegate get symbol:::cnp->getImpl->return->cnp->getSymbol
SPILocaleProviderAdapter.CurrencyNameProviderDelegate#getDisplayName(String, Locale)::: currency name provider delegate get display name:::cnp->getImpl->return->cnp->getDisplayName
SPILocaleProviderAdapter.LocaleNameProviderDelegate#addImpl(LocaleNameProvider)::: locale name provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getImpl(Locale)::: locale name provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getAvailableLocales()::: locale name provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.LocaleNameProviderDelegate#isSupportedLocale(Locale)::: locale name provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayLanguage(String, Locale)::: locale name provider delegate get display language:::lnp->getImpl->return->lnp->getDisplayLanguage
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayScript(String, Locale)::: locale name provider delegate get display script:::lnp->getImpl->return->lnp->getDisplayScript
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayCountry(String, Locale)::: locale name provider delegate get display country:::lnp->getImpl->return->lnp->getDisplayCountry
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayVariant(String, Locale)::: locale name provider delegate get display variant:::lnp->getImpl->return->lnp->getDisplayVariant
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayUnicodeExtensionKey(String, Locale)::: locale name provider delegate get display unicode extension key:::lnp->getImpl->return->lnp->getDisplayUnicodeExtensionKey
SPILocaleProviderAdapter.LocaleNameProviderDelegate#getDisplayUnicodeExtensionType(String, String, Locale)::: locale name provider delegate get display unicode extension type:::lnp->getImpl->return->lnp->getDisplayUnicodeExtensionType
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#addImpl(TimeZoneNameProvider)::: time zone name provider delegate add impl:::foreach->impl->getAvailableLocales->map->putIfAbsent
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#getImpl(Locale)::: time zone name provider delegate get impl:::return->SPILocaleProviderAdapter->getImpl
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#getAvailableLocales()::: time zone name provider delegate get available locales:::return->map->keySet->new->LocaleArr->toArray
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#isSupportedLocale(Locale)::: time zone name provider delegate is supported locale:::return->map->containsKey
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#getDisplayName(String, boolean, int, Locale)::: time zone name provider delegate get display name:::tznp->getImpl->return->tznp->getDisplayName
SPILocaleProviderAdapter.TimeZoneNameProviderDelegate#getGenericDisplayName(String, int, Locale)::: time zone name provider delegate get generic display name:::tznp->getImpl->return->tznp->getGenericDisplayName
TimeZoneNameProviderImpl#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names.:::return->LocaleProviderAdapter->toLocaleArray
TimeZoneNameProviderImpl#isSupportedLocale(Locale)::: time zone name provider impl is supported locale:::return->LocaleProviderAdapter->forType->isSupportedProviderLocale
TimeZoneNameProviderImpl#getDisplayName(String, boolean, int, Locale):::Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale:::names->getDisplayNameArray->if->Objects->nonNull->index->if->return->return
TimeZoneNameProviderImpl#getGenericDisplayName(String, int, Locale)::: time zone name provider impl get generic display name:::names->getDisplayNameArray->if->Objects->nonNull->return->return
TimeZoneNameProviderImpl#getDisplayNameArray(String, Locale)::: time zone name provider impl get display name array:::Objects->requireNonNull->Objects->requireNonNull->return->LocaleProviderAdapter->forType->getLocaleResources->getTimeZoneNames
TimeZoneNameProviderImpl#getZoneStrings(Locale):::Returns a String[][] as the DateFormatSymbols.getZoneStrings() value for the given locale.:::return->LocaleProviderAdapter->forType->getLocaleResources->getZoneStrings
TimeZoneNameUtility#getZoneStrings(Locale):::get time zone localized strings:::zones->data->cachedZoneData->get->if->data->get->loadZoneStrings->new->SoftReference<>->cachedZoneData->put->return
TimeZoneNameUtility#loadZoneStrings(Locale)::: time zone name utility load zone strings:::adapter->LocaleProviderAdapter->getAdapter->provider->adapter->getTimeZoneNameProvider->if->zoneStrings->getZoneStrings->if->locale->equals->getZoneStrings->return->zoneIDs->LocaleProviderAdapter->forJRE->getLocaleResources->getZoneIDs->zones->new->LinkedList<>->foreach->names->retrieveDisplayNamesImpl->if->zones->add->zonesArray->zones->size->new->StringArrs->return->zones->toArray
TimeZoneNameUtility#retrieveDisplayNames(String, Locale):::Retrieve display names for a time zone ID.:::Objects->requireNonNull->Objects->requireNonNull->return->retrieveDisplayNamesImpl
TimeZoneNameUtility#retrieveGenericDisplayName(String, int, Locale):::Retrieves a generic time zone display name for a time zone ID.:::names->retrieveDisplayNamesImpl->if->Objects->nonNull->return->else->return
TimeZoneNameUtility#retrieveDisplayName(String, boolean, int, Locale):::Retrieves a standard or daylight-saving time name for the given time zone ID.:::names->retrieveDisplayNamesImpl->if->Objects->nonNull->return->else->return
TimeZoneNameUtility#convertLDMLShortID(String):::Converts the time zone id from LDML's 5-letter id to tzdb's id:::return->canonicalTZID
TimeZoneNameUtility#canonicalTZID(String):::Returns the canonical ID for the given ID:::return->LocaleProviderAdapter->forType->canonicalTZID
TimeZoneNameUtility#retrieveDisplayNamesImpl(String, Locale)::: time zone name utility retrieve display names impl:::pool->LocaleServiceProviderPool->getPool->names->perLocale->ref->cachedDisplayNames->get->if->Objects->nonNull->ref->get->if->Objects->nonNull->perLocale->get->if->Objects->nonNull->return->new->StringArr->for->i->if->Objects->isNull->new->ConcurrentHashMap<>->perLocale->put->new->SoftReference<>->cachedDisplayNames->put->return
TimeZoneNameUtility.TimeZoneNameGetter#getObject(TimeZoneNameProvider, Locale, String, Object...)::: time zone name getter get object:::style->tzid->value->getName->if->aliases->ZoneInfo->getAliasTable->if->canonicalID->aliases->get->if->getName->if->examineAliases->return
TimeZoneNameUtility.TimeZoneNameGetter#examineAliases(TimeZoneNameProvider, Locale, String, String, int, Map)::: time zone name getter examine aliases:::foreach->aliases->entrySet->if->entry->getValue->equals->alias->entry->getKey->name->getName->if->return->examineAliases->if->return->return
TimeZoneNameUtility.TimeZoneNameGetter#getName(TimeZoneNameProvider, Locale, String, int, String)::: time zone name getter get name:::value->switch->timeZoneNameProvider->getDisplayName->break->timeZoneNameProvider->getDisplayName->break->timeZoneNameProvider->getGenericDisplayName->break->return

Plugin_DynamicCounterNode_counter#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ dynamic counter node_counter execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->arg3->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.nodes.debug.DynamicCounterNode->b->add->return
Plugin_DynamicCounterNode_counter#getSource()::: plugin_ dynamic counter node_counter get source:::return
PluginFactory_DynamicCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ dynamic counter node register plugins:::plugins->new->Plugin_DynamicCounterNode_counter->register
BindToRegisterNode#generate(NodeLIRBuilderTool)::: bind to register node generate:::gen->getLIRGeneratorTool->gen->getLIRGeneratorTool->gen->operand->asAllocatable->new->StandardOp.BindToRegisterOp->append
BlackholeNode#getValue()::: blackhole node get value:::return
BlackholeNode#generate(NodeLIRBuilderTool)::: blackhole node generate:::gen->getLIRGeneratorTool->gen->operand->emitBlackhole
ControlFlowAnchorNode#generate(NodeLIRBuilderTool)::: control flow anchor node generate:::
ControlFlowAnchorNode#afterClone(Node)::: control flow anchor node after clone:::
DynamicCounterNode#clampIncrement(long):::Clamps value to a value between #MIN_INCREMENT and #MAX_INCREMENT:::return->Math->Math->max->min
DynamicCounterNode#checkIncrement()::: dynamic counter node check increment:::if->increment->isJavaConstant->incValue->increment->asJavaConstant->asLong->if->message->String->getNameWithContext->format->return
DynamicCounterNode#getIncrement()::: dynamic counter node get increment:::return
DynamicCounterNode#getName()::: dynamic counter node get name:::return
DynamicCounterNode#getGroup()::: dynamic counter node get group:::return
DynamicCounterNode#isWithContext()::: dynamic counter node is with context:::return
DynamicCounterNode#addCounterBefore(String, String, long, boolean, FixedNode)::: dynamic counter node add counter before:::graph->position->graph->graph->position->graph->ConstantNode->position->graph->forLong->new->DynamicCounterNode->add->addBeforeFixed
DynamicCounterNode#counter(String, String, long, boolean)::: dynamic counter node counter:::
DynamicCounterNode#generate(NodeLIRBuilderTool)::: dynamic counter node generate:::lirGen->generator->getLIRGeneratorTool->nameWithContext->getNameWithContext->counterOp->lirGen->getGroup->generator->operand->createBenchmarkCounter->if->lirGen->append->else->throw->GraalError->unimplemented
DynamicCounterNode#getNameWithContext()::: dynamic counter node get name with context:::nameWithContext->if->isWithContext->getName->if->graph->method->stackTraceElement->graph->method->asStackTraceElement->if->stackTraceElement->toString->else->graph->method->format->if->graph->graph->else->getName->return
SpillRegistersNode#generate(NodeLIRBuilderTool)::: spill registers node generate:::gen->getLIRGeneratorTool->new->StandardOp.SpillRegistersOp->append
StringToBytesNode#getValue()::: string to bytes node get value:::return
StringToBytesNode#lower(LoweringTool)::: string to bytes node lower:::tool->getLowerer->lower
StringToBytesNode#getLocationIdentity()::: string to bytes node get location identity:::return->NamedLocationIdentity->getArrayLocation
VerifyHeapNode#lower(LoweringTool)::: verify heap node lower:::tool->getLowerer->lower
VerifyHeapNode#addBefore(FixedNode)::: verify heap node add before:::graph->position->graph->graph->graph->new->VerifyHeapNode->add->addBeforeFixed
VerifyHeapNode#addAfter(FixedWithNextNode)::: verify heap node add after:::graph->position->graph->graph->graph->new->VerifyHeapNode->add->addAfterFixed
WeakCounterNode#simplify(SimplifierTool)::: weak counter node simplify:::if->checkedValue->getUsageCount->tool->addToWorkList->graph->removeFixed
WeakCounterNode#virtualize(VirtualizerTool)::: weak counter node virtualize:::alias->tool->getAlias->if->tool->delete
WeakCounterNode#addCounterBefore(String, String, long, boolean, ValueNode, FixedNode)::: weak counter node add counter before:::graph->position->graph->counter->graph->ConstantNode->forLong->new->WeakCounterNode->add->graph->addBeforeFixed

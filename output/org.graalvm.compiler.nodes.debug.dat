org.graalvm.compiler.nodes.debug.Plugin_DynamicCounterNode_counter#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ dynamic counter node_counter execute
org.graalvm.compiler.nodes.debug.Plugin_DynamicCounterNode_counter#getSource()->Class::: plugin_ dynamic counter node_counter get source
org.graalvm.compiler.nodes.debug.PluginFactory_DynamicCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ dynamic counter node register plugins
org.graalvm.compiler.nodes.debug.BindToRegisterNode#generate(NodeLIRBuilderTool)->void::: bind to register node generate
org.graalvm.compiler.nodes.debug.BlackholeNode#getValue()->ValueNode::: blackhole node get value
org.graalvm.compiler.nodes.debug.BlackholeNode#generate(NodeLIRBuilderTool)->void::: blackhole node generate
org.graalvm.compiler.nodes.debug.ControlFlowAnchorNode#generate(NodeLIRBuilderTool)->void::: control flow anchor node generate
org.graalvm.compiler.nodes.debug.ControlFlowAnchorNode#afterClone(Node)->void::: control flow anchor node after clone
org.graalvm.compiler.nodes.debug.DynamicCounterNode#clampIncrement(long)->long:::Clamps value to a value between #MIN_INCREMENT and #MAX_INCREMENT
org.graalvm.compiler.nodes.debug.DynamicCounterNode#getIncrement()->ValueNode::: dynamic counter node get increment
org.graalvm.compiler.nodes.debug.DynamicCounterNode#getName()->String::: dynamic counter node get name
org.graalvm.compiler.nodes.debug.DynamicCounterNode#getGroup()->String::: dynamic counter node get group
org.graalvm.compiler.nodes.debug.DynamicCounterNode#isWithContext()->boolean::: dynamic counter node is with context
org.graalvm.compiler.nodes.debug.DynamicCounterNode#addCounterBefore(String, String, long, boolean, FixedNode)->void::: dynamic counter node add counter before
org.graalvm.compiler.nodes.debug.DynamicCounterNode#counter(String, String, long, boolean)->void::: dynamic counter node counter
org.graalvm.compiler.nodes.debug.DynamicCounterNode#generate(NodeLIRBuilderTool)->void::: dynamic counter node generate
org.graalvm.compiler.nodes.debug.SpillRegistersNode#generate(NodeLIRBuilderTool)->void::: spill registers node generate
org.graalvm.compiler.nodes.debug.StringToBytesNode#getValue()->String::: string to bytes node get value
org.graalvm.compiler.nodes.debug.StringToBytesNode#lower(LoweringTool)->void::: string to bytes node lower
org.graalvm.compiler.nodes.debug.StringToBytesNode#getLocationIdentity()->LocationIdentity::: string to bytes node get location identity
org.graalvm.compiler.nodes.debug.VerifyHeapNode#lower(LoweringTool)->void::: verify heap node lower
org.graalvm.compiler.nodes.debug.VerifyHeapNode#addBefore(FixedNode)->void::: verify heap node add before
org.graalvm.compiler.nodes.debug.VerifyHeapNode#addAfter(FixedWithNextNode)->void::: verify heap node add after
org.graalvm.compiler.nodes.debug.WeakCounterNode#simplify(SimplifierTool)->void::: weak counter node simplify
org.graalvm.compiler.nodes.debug.WeakCounterNode#virtualize(VirtualizerTool)->void::: weak counter node virtualize
org.graalvm.compiler.nodes.debug.WeakCounterNode#addCounterBefore(String, String, long, boolean, ValueNode, FixedNode)->void::: weak counter node add counter before

FileSystemOption#register(OpenOption):::Register this internal option as an OpenOption.:::internalOption->register
FileSystemOption#register(CopyOption):::Register this internal option as a CopyOption.:::internalOption->register
FileSystemOption#register(WatchEvent.Modifier):::Register this internal option as a WatchEvent.Modifier.:::internalOption->register
FileSystemOption#register(WatchEvent.Modifier, T):::Register this internal option as a WatchEvent.Modifier with the given parameter.:::internalOption->register
InnocuousThread#newThread(Runnable):::Returns a new InnocuousThread with an auto-generated thread name and its context class loader is set to the system class loader.:::return->newName->newThread
InnocuousThread#newThread(String, Runnable):::Returns a new InnocuousThread with its context class loader set to the system class loader.:::return->AccessController->new->PrivilegedAction<Thread>->doPrivileged
InnocuousThread#newSystemThread(Runnable):::Returns a new InnocuousThread with an auto-generated thread name:::return->newName->newSystemThread
InnocuousThread#newSystemThread(String, Runnable):::Returns a new InnocuousThread with null context class loader.:::return->AccessController->new->PrivilegedAction<Thread>->doPrivileged
InnocuousThread#eraseThreadLocals():::Drops all thread locals (and inherited thread locals).:::UNSAFE->putObject->UNSAFE->putObject
Signal#getName():::Returns the signal name.:::return
Signal#equals(Object):::Compares the equality of two Signal objects.:::if->return->if->return->other1->return->name->equals
Signal#hashCode():::Returns a hashcode for this Signal.:::return
Signal#toString():::Returns a string representation of this signal:::return
Signal#handle(Signal, Signal.Handler):::Registers a signal handler.:::Objects->requireNonNull->Objects->requireNonNull->newH->getHandler->oldH->handle0->if->throw->new->IllegalArgumentException->signals->put->synchronized->oldHandler->handlers->get->handlers->remove->if->handlers->put->if->return->else->if->return->else->if->return->else->return->new->NativeHandler
Signal#raise(Signal):::Raises a signal in the current process.:::Objects->requireNonNull->if->handlers->get->throw->new->IllegalArgumentException->raise0
Signal.Handler#handle(Signal):::Handle the given signal:::
TerminatingThreadLocal#threadTerminated(T):::Invoked by a thread when terminating and this thread-local has an associated value for the terminating thread (even if that value is null), so that any native resources maintained by the value can be released.:::
TerminatingThreadLocal#threadTerminated():::Invokes the TerminatingThreadLocal's #threadTerminated() method on all instances registered in current thread.:::foreach->REGISTRY->get->ttl->_threadTerminated
TerminatingThreadLocal#register(TerminatingThreadLocal):::Register given TerminatingThreadLocal:::REGISTRY->get->add
Unsafe#getUnsafe():::Provides the caller with the capability of performing unsafe operations:::return
Unsafe#getInt(Object, long):::Fetches a value from a given Java variable:::
Unsafe#putInt(Object, long, int):::Stores a value into a given Java variable:::
Unsafe#getObject(Object, long):::Fetches a reference value from a given Java variable.:::
Unsafe#putObject(Object, long, Object):::Stores a reference value into a given Java variable:::
Unsafe#getAddress(Object, long):::Fetches a native pointer from a given memory address:::if->return->Integer->getInt->toUnsignedLong->else->return->getLong
Unsafe#putAddress(Object, long, long):::Stores a native pointer into a given memory address:::if->putInt->else->putLong
Unsafe#getUncompressedObject(long):::Fetches an uncompressed reference value from a given native variable ignoring the VM's compressed references mode.:::
Unsafe#getByte(long):::Fetches a value from a given memory address:::return->getByte
Unsafe#putByte(long, byte):::Stores a value into a given memory address:::putByte
Unsafe#allocateMemory(long):::Allocates a new block of native memory, of the given size in bytes:::allocateMemoryChecks->if->return->p->allocateMemory0->if->throw->new->OutOfMemoryError->return
Unsafe#reallocateMemory(long, long):::Resizes a new block of native memory, to the given size in bytes:::reallocateMemoryChecks->if->freeMemory->return->p->allocateMemory0->reallocateMemory0->if->throw->new->OutOfMemoryError->return
Unsafe#setMemory(Object, long, long, byte):::Sets all bytes in a given block of memory to a fixed value (usually zero):::setMemoryChecks->if->return->setMemory0
Unsafe#setMemory(long, long, byte):::Sets all bytes in a given block of memory to a fixed value (usually zero):::setMemory
Unsafe#copyMemory(Object, long, Object, long, long):::Sets all bytes in a given block of memory to a copy of another block:::copyMemoryChecks->if->return->copyMemory0
Unsafe#copyMemory(long, long, long):::Sets all bytes in a given block of memory to a copy of another block:::copyMemory
Unsafe#copySwapMemory(Object, long, Object, long, long, long):::Copies all elements from one block of memory to another block, *unconditionally* byte swapping the elements on the fly:::copySwapMemoryChecks->if->return->copySwapMemory0
Unsafe#copySwapMemory(long, long, long, long):::Copies all elements from one block of memory to another block, byte swapping the elements on the fly:::copySwapMemory
Unsafe#freeMemory(long):::Disposes of a block of native memory, as obtained from #allocateMemory or #reallocateMemory:::freeMemoryChecks->if->return->freeMemory0
Unsafe#objectFieldOffset(Field):::Reports the location of a given field in the storage allocation of its class:::if->throw->new->NullPointerException->return->objectFieldOffset0
Unsafe#objectFieldOffset(Class, String):::Reports the location of the field with a given name in the storage allocation of its class.:::if->throw->new->NullPointerException->return->objectFieldOffset1
Unsafe#staticFieldOffset(Field):::Reports the location of a given static field, in conjunction with #staticFieldBase:::if->throw->new->NullPointerException->return->staticFieldOffset0
Unsafe#staticFieldBase(Field):::Reports the location of a given static field, in conjunction with #staticFieldOffset:::if->throw->new->NullPointerException->return->staticFieldBase0
Unsafe#shouldBeInitialized(Class):::Detects if the given class may need to be initialized:::if->throw->new->NullPointerException->return->shouldBeInitialized0
Unsafe#ensureClassInitialized(Class):::Ensures the given class has been initialized:::if->throw->new->NullPointerException->ensureClassInitialized0
Unsafe#arrayBaseOffset(Class):::Reports the offset of the first element in the storage allocation of a given array class:::if->throw->new->NullPointerException->return->arrayBaseOffset0
Unsafe#arrayIndexScale(Class):::Reports the scale factor for addressing elements in the storage allocation of a given array class:::if->throw->new->NullPointerException->return->arrayIndexScale0
Unsafe#addressSize():::Reports the size in bytes of a native pointer, as stored via #putAddress:::return
Unsafe#pageSize():::Reports the size in bytes of a native memory page (whatever that is):::
Unsafe#defineClass(String, byte[], int, int, ClassLoader, ProtectionDomain):::Tells the VM to define a class, without security checks:::if->throw->new->NullPointerException->if->throw->new->ArrayIndexOutOfBoundsException->return->defineClass0
Unsafe#defineAnonymousClass(Class, byte[], Object[]):::Defines a class but does not make it known to the class loader or system dictionary:::if->throw->new->NullPointerException->if->hostClass->isArray->hostClass->isPrimitive->throw->new->IllegalArgumentException->return->defineAnonymousClass0
Unsafe#allocateInstance(Class):::Allocates an instance but does not run any constructor:::
Unsafe#allocateUninitializedArray(Class, int):::Allocates an array of a given type, but does not do zeroing:::if->throw->new->IllegalArgumentException->if->componentType->isPrimitive->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->allocateUninitializedArray0
Unsafe#throwException(Throwable):::Throws the exception without telling the verifier.:::
Unsafe#compareAndSetObject(Object, long, Object, Object):::Atomically updates Java variable to x if it is currently holding expected:::
Unsafe#compareAndSetInt(Object, long, int, int):::Atomically updates Java variable to x if it is currently holding expected:::
Unsafe#compareAndSetFloat(Object, long, float, float):::Atomically updates Java variable to x if it is currently holding expected:::return->Float->floatToRawIntBits->Float->floatToRawIntBits->compareAndSetInt
Unsafe#compareAndSetDouble(Object, long, double, double):::Atomically updates Java variable to x if it is currently holding expected:::return->Double->doubleToRawLongBits->Double->doubleToRawLongBits->compareAndSetLong
Unsafe#compareAndSetLong(Object, long, long, long):::Atomically updates Java variable to x if it is currently holding expected:::
Unsafe#getObjectVolatile(Object, long):::Fetches a reference value from a given Java variable, with volatile load semantics:::
Unsafe#putObjectVolatile(Object, long, Object):::Stores a reference value into a given Java variable, with volatile store semantics:::
Unsafe#getIntVolatile(Object, long):::Volatile version of #getInt(Object, long):::
Unsafe#putIntVolatile(Object, long, int):::Volatile version of #putInt(Object, long, int):::
Unsafe#getBooleanVolatile(Object, long):::Volatile version of #getBoolean(Object, long):::
Unsafe#putBooleanVolatile(Object, long, boolean):::Volatile version of #putBoolean(Object, long, boolean):::
Unsafe#getByteVolatile(Object, long):::Volatile version of #getByte(Object, long):::
Unsafe#putByteVolatile(Object, long, byte):::Volatile version of #putByte(Object, long, byte):::
Unsafe#getShortVolatile(Object, long):::Volatile version of #getShort(Object, long):::
Unsafe#putShortVolatile(Object, long, short):::Volatile version of #putShort(Object, long, short):::
Unsafe#getCharVolatile(Object, long):::Volatile version of #getChar(Object, long):::
Unsafe#putCharVolatile(Object, long, char):::Volatile version of #putChar(Object, long, char):::
Unsafe#getLongVolatile(Object, long):::Volatile version of #getLong(Object, long):::
Unsafe#putLongVolatile(Object, long, long):::Volatile version of #putLong(Object, long, long):::
Unsafe#getFloatVolatile(Object, long):::Volatile version of #getFloat(Object, long):::
Unsafe#putFloatVolatile(Object, long, float):::Volatile version of #putFloat(Object, long, float):::
Unsafe#getDoubleVolatile(Object, long):::Volatile version of #getDouble(Object, long):::
Unsafe#putDoubleVolatile(Object, long, double):::Volatile version of #putDouble(Object, long, double):::
Unsafe#getObjectAcquire(Object, long):::Acquire version of #getObjectVolatile(Object, long):::return->getObjectVolatile
Unsafe#getBooleanAcquire(Object, long):::Acquire version of #getBooleanVolatile(Object, long):::return->getBooleanVolatile
Unsafe#getByteAcquire(Object, long):::Acquire version of #getByteVolatile(Object, long):::return->getByteVolatile
Unsafe#getShortAcquire(Object, long):::Acquire version of #getShortVolatile(Object, long):::return->getShortVolatile
Unsafe#getCharAcquire(Object, long):::Acquire version of #getCharVolatile(Object, long):::return->getCharVolatile
Unsafe#getIntAcquire(Object, long):::Acquire version of #getIntVolatile(Object, long):::return->getIntVolatile
Unsafe#getFloatAcquire(Object, long):::Acquire version of #getFloatVolatile(Object, long):::return->getFloatVolatile
Unsafe#getLongAcquire(Object, long):::Acquire version of #getLongVolatile(Object, long):::return->getLongVolatile
Unsafe#getDoubleAcquire(Object, long):::Acquire version of #getDoubleVolatile(Object, long):::return->getDoubleVolatile
Unsafe#putObjectRelease(Object, long, Object):::Release version of #putObjectVolatile(Object, long, Object):::putObjectVolatile
Unsafe#putBooleanRelease(Object, long, boolean):::Release version of #putBooleanVolatile(Object, long, boolean):::putBooleanVolatile
Unsafe#putByteRelease(Object, long, byte):::Release version of #putByteVolatile(Object, long, byte):::putByteVolatile
Unsafe#putShortRelease(Object, long, short):::Release version of #putShortVolatile(Object, long, short):::putShortVolatile
Unsafe#putCharRelease(Object, long, char):::Release version of #putCharVolatile(Object, long, char):::putCharVolatile
Unsafe#putIntRelease(Object, long, int):::Release version of #putIntVolatile(Object, long, int):::putIntVolatile
Unsafe#putFloatRelease(Object, long, float):::Release version of #putFloatVolatile(Object, long, float):::putFloatVolatile
Unsafe#putLongRelease(Object, long, long):::Release version of #putLongVolatile(Object, long, long):::putLongVolatile
Unsafe#putDoubleRelease(Object, long, double):::Release version of #putDoubleVolatile(Object, long, double):::putDoubleVolatile
Unsafe#getObjectOpaque(Object, long):::Opaque version of #getObjectVolatile(Object, long):::return->getObjectVolatile
Unsafe#getBooleanOpaque(Object, long):::Opaque version of #getBooleanVolatile(Object, long):::return->getBooleanVolatile
Unsafe#getByteOpaque(Object, long):::Opaque version of #getByteVolatile(Object, long):::return->getByteVolatile
Unsafe#getShortOpaque(Object, long):::Opaque version of #getShortVolatile(Object, long):::return->getShortVolatile
Unsafe#getCharOpaque(Object, long):::Opaque version of #getCharVolatile(Object, long):::return->getCharVolatile
Unsafe#getIntOpaque(Object, long):::Opaque version of #getIntVolatile(Object, long):::return->getIntVolatile
Unsafe#getFloatOpaque(Object, long):::Opaque version of #getFloatVolatile(Object, long):::return->getFloatVolatile
Unsafe#getLongOpaque(Object, long):::Opaque version of #getLongVolatile(Object, long):::return->getLongVolatile
Unsafe#getDoubleOpaque(Object, long):::Opaque version of #getDoubleVolatile(Object, long):::return->getDoubleVolatile
Unsafe#putObjectOpaque(Object, long, Object):::Opaque version of #putObjectVolatile(Object, long, Object):::putObjectVolatile
Unsafe#putBooleanOpaque(Object, long, boolean):::Opaque version of #putBooleanVolatile(Object, long, boolean):::putBooleanVolatile
Unsafe#putByteOpaque(Object, long, byte):::Opaque version of #putByteVolatile(Object, long, byte):::putByteVolatile
Unsafe#putShortOpaque(Object, long, short):::Opaque version of #putShortVolatile(Object, long, short):::putShortVolatile
Unsafe#putCharOpaque(Object, long, char):::Opaque version of #putCharVolatile(Object, long, char):::putCharVolatile
Unsafe#putIntOpaque(Object, long, int):::Opaque version of #putIntVolatile(Object, long, int):::putIntVolatile
Unsafe#putFloatOpaque(Object, long, float):::Opaque version of #putFloatVolatile(Object, long, float):::putFloatVolatile
Unsafe#putLongOpaque(Object, long, long):::Opaque version of #putLongVolatile(Object, long, long):::putLongVolatile
Unsafe#putDoubleOpaque(Object, long, double):::Opaque version of #putDoubleVolatile(Object, long, double):::putDoubleVolatile
Unsafe#unpark(Object):::Unblocks the given thread blocked on park, or, if it is not blocked, causes the subsequent call to park not to block:::
Unsafe#park(boolean, long):::Blocks current thread, returning when a balancing unpark occurs, or a balancing unpark has already occurred, or the thread is interrupted, or, if not absolute and time is not zero, the given time nanoseconds have elapsed, or if absolute, the given deadline in milliseconds since Epoch has passed, or spuriously (i.e., returning for no "reason"):::
Unsafe#getLoadAverage(double[], int):::Gets the load average in the system run queue assigned to the available processors averaged over various periods of time:::if->throw->new->ArrayIndexOutOfBoundsException->return->getLoadAverage0
Unsafe#getAndAddInt(Object, long, int):::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.:::v->do->getIntVolatile->while->weakCompareAndSetInt->return
Unsafe#getAndAddLong(Object, long, long):::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.:::v->do->getLongVolatile->while->weakCompareAndSetLong->return
Unsafe#getAndSetInt(Object, long, int):::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.:::v->do->getIntVolatile->while->weakCompareAndSetInt->return
Unsafe#getAndSetLong(Object, long, long):::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.:::v->do->getLongVolatile->while->weakCompareAndSetLong->return
Unsafe#getAndSetObject(Object, long, Object):::Atomically exchanges the given reference value with the current reference value of a field or array element within the given object o at the given offset.:::v->do->getObjectVolatile->while->weakCompareAndSetObject->return
Unsafe#getAndBitwiseAndInt(Object, long, int):::Atomically replaces the current value of a field or array element within the given object with the result of bitwise AND between the current value and mask.:::current->do->getIntVolatile->while->weakCompareAndSetInt->return
Unsafe#loadFence():::Ensures that loads before the fence will not be reordered with loads and stores after the fence; a "LoadLoad plus LoadStore barrier":::
Unsafe#storeFence():::Ensures that loads and stores before the fence will not be reordered with stores after the fence; a "StoreStore plus LoadStore barrier":::
Unsafe#fullFence():::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence:::
Unsafe#loadLoadFence():::Ensures that loads before the fence will not be reordered with loads after the fence.:::loadFence
Unsafe#storeStoreFence():::Ensures that stores before the fence will not be reordered with stores after the fence.:::storeFence
Unsafe#getLongUnaligned(Object, long):::Fetches a value at some byte offset into a given Java object:::if->return->getLong->else->if->return->getInt->getInt->makeLong->else->if->return->getShort->getShort->getShort->getShort->makeLong->else->return->getByte->getByte->getByte->getByte->getByte->getByte->getByte->getByte->makeLong
Unsafe#getLongUnaligned(Object, long, boolean):::As #getLongUnaligned(Object, long) but with an additional argument which specifies the endianness of the value as stored in memory.:::return->getLongUnaligned->convEndian
Unsafe#putLongUnaligned(Object, long, long):::Stores a value at some byte offset into a given Java object:::if->putLong->else->if->putLongParts->else->if->putLongParts->else->putLongParts
Unsafe#putLongUnaligned(Object, long, long, boolean):::As #putLongUnaligned(Object, long, long) but with an additional argument which specifies the endianness of the value as stored in memory.:::convEndian->putLongUnaligned
Unsafe#invokeCleaner(java.nio.ByteBuffer):::Invokes the given direct byte buffer's cleaner, if any.:::if->directBuffer->isDirect->throw->new->IllegalArgumentException->db->if->db->attachment->throw->new->IllegalArgumentException->cleaner->db->cleaner->if->cleaner->clean
VM#initLevel(int):::Sets the init level.:::synchronized->if->throw->new->InternalError->lock->notifyAll
VM#initLevel():::Returns the current init level.:::return
VM#awaitInitLevel(int):::Waits for the init level to get the given value.:::synchronized->while->lock->wait
VM#isModuleSystemInited():::Returns true if the module system has been initialized.:::return->VM->initLevel
VM#isBooted():::Returns true if the VM is fully initialized.:::return
VM#shutdown():::Set shutdown state:::initLevel
VM#isShutdown():::Returns true if the VM has been shutdown:::return
VM#isSystemDomainLoader(ClassLoader):::Returns true if the given class loader is the bootstrap class loader or the platform class loader.:::return->ClassLoader->getPlatformClassLoader
VM#getSavedProperty(String):::Returns the system property of the specified key saved at system initialization time:::if->throw->new->IllegalStateException->return->savedProps->get
VM#getSavedProperties():::Gets an unmodifiable view of the system properties saved at system initialization time:::if->throw->new->IllegalStateException->return
VM#toThreadState(int):::Returns Thread.State for the given threadStatus:::if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->return
VM#isSetUID():::Returns true if we are in a set UID program.:::uid->getuid->euid->geteuid->gid->getgid->egid->getegid->return
VM#getuid():::Returns the real user ID of the calling process, or -1 if the value is not available.:::
VM#geteuid():::Returns the effective user ID of the calling process, or -1 if the value is not available.:::
VM#getgid():::Returns the real group ID of the calling process, or -1 if the value is not available.:::
VM#getegid():::Returns the effective group ID of the calling process, or -1 if the value is not available.:::
VM#getNanoTimeAdjustment(long):::Get a nanosecond time stamp adjustment in the form of a single long:::
VM#getRuntimeArguments():::Returns the VM arguments for this runtime environment.:::

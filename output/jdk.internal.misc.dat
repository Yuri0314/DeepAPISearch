jdk.internal.misc.FileSystemOption#register(OpenOption)->void:::Register this internal option as an OpenOption.
jdk.internal.misc.FileSystemOption#register(CopyOption)->void:::Register this internal option as a CopyOption.
jdk.internal.misc.FileSystemOption#register(WatchEvent.Modifier)->void:::Register this internal option as a WatchEvent.Modifier.
jdk.internal.misc.FileSystemOption#register(WatchEvent.Modifier, T)->void:::Register this internal option as a WatchEvent.Modifier with the given parameter.
jdk.internal.misc.InnocuousThread#newThread(Runnable)->Thread:::Returns a new InnocuousThread with an auto-generated thread name and its context class loader is set to the system class loader.
jdk.internal.misc.InnocuousThread#newThread(String, Runnable)->Thread:::Returns a new InnocuousThread with its context class loader set to the system class loader.
jdk.internal.misc.InnocuousThread#newSystemThread(Runnable)->Thread:::Returns a new InnocuousThread with an auto-generated thread name
jdk.internal.misc.InnocuousThread#newSystemThread(String, Runnable)->Thread:::Returns a new InnocuousThread with null context class loader.
jdk.internal.misc.InnocuousThread#setUncaughtExceptionHandler(UncaughtExceptionHandler)->void::: innocuous thread set uncaught exception handler
jdk.internal.misc.InnocuousThread#setContextClassLoader(ClassLoader)->void::: innocuous thread set context class loader
jdk.internal.misc.InnocuousThread#eraseThreadLocals()->void:::Drops all thread locals (and inherited thread locals).
jdk.internal.misc.InnocuousThread#run()->void::: innocuous thread run
jdk.internal.misc.OSEnvironment#initialize()->void::: environment initialize
jdk.internal.misc.Signal#getNumber()->int::: signal get number
jdk.internal.misc.Signal#getName()->String:::Returns the signal name.
jdk.internal.misc.Signal#equals(Object)->boolean:::Compares the equality of two Signal objects.
jdk.internal.misc.Signal#hashCode()->int:::Returns a hashcode for this Signal.
jdk.internal.misc.Signal#toString()->String:::Returns a string representation of this signal
jdk.internal.misc.Signal#handle(Signal, Signal.Handler)->Signal.Handler:::Registers a signal handler.
jdk.internal.misc.Signal#raise(Signal)->void:::Raises a signal in the current process.
jdk.internal.misc.Signal.Handler#handle(Signal)->void:::Handle the given signal
jdk.internal.misc.Signal.NativeHandler#getHandler()->long::: native handler get handler
jdk.internal.misc.Signal.NativeHandler#handle(Signal)->void::: native handler handle
jdk.internal.misc.Signal.NativeHandler#toString()->String::: native handler to string
jdk.internal.misc.TerminatingThreadLocal#set(T)->void::: terminating thread local set
jdk.internal.misc.TerminatingThreadLocal#remove()->void::: terminating thread local remove
jdk.internal.misc.TerminatingThreadLocal#threadTerminated(T)->void:::Invoked by a thread when terminating and this thread-local has an associated value for the terminating thread (even if that value is null), so that any native resources maintained by the value can be released.
jdk.internal.misc.TerminatingThreadLocal#threadTerminated()->void:::Invokes the TerminatingThreadLocal's #threadTerminated() method on all instances registered in current thread.
jdk.internal.misc.TerminatingThreadLocal#register(TerminatingThreadLocal)->void:::Register given TerminatingThreadLocal
jdk.internal.misc.Unsafe#getUnsafe()->Unsafe:::Provides the caller with the capability of performing unsafe operations
jdk.internal.misc.Unsafe#getInt(Object, long)->int:::Fetches a value from a given Java variable
jdk.internal.misc.Unsafe#putInt(Object, long, int)->void:::Stores a value into a given Java variable
jdk.internal.misc.Unsafe#getObject(Object, long)->Object:::Fetches a reference value from a given Java variable.
jdk.internal.misc.Unsafe#putObject(Object, long, Object)->void:::Stores a reference value into a given Java variable
jdk.internal.misc.Unsafe#getBoolean(Object, long)->boolean::: unsafe get boolean
jdk.internal.misc.Unsafe#putBoolean(Object, long, boolean)->void::: unsafe put boolean
jdk.internal.misc.Unsafe#getByte(Object, long)->byte::: unsafe get byte
jdk.internal.misc.Unsafe#putByte(Object, long, byte)->void::: unsafe put byte
jdk.internal.misc.Unsafe#getShort(Object, long)->short::: unsafe get short
jdk.internal.misc.Unsafe#putShort(Object, long, short)->void::: unsafe put short
jdk.internal.misc.Unsafe#getChar(Object, long)->char::: unsafe get char
jdk.internal.misc.Unsafe#putChar(Object, long, char)->void::: unsafe put char
jdk.internal.misc.Unsafe#getLong(Object, long)->long::: unsafe get long
jdk.internal.misc.Unsafe#putLong(Object, long, long)->void::: unsafe put long
jdk.internal.misc.Unsafe#getFloat(Object, long)->float::: unsafe get float
jdk.internal.misc.Unsafe#putFloat(Object, long, float)->void::: unsafe put float
jdk.internal.misc.Unsafe#getDouble(Object, long)->double::: unsafe get double
jdk.internal.misc.Unsafe#putDouble(Object, long, double)->void::: unsafe put double
jdk.internal.misc.Unsafe#getAddress(Object, long)->long:::Fetches a native pointer from a given memory address
jdk.internal.misc.Unsafe#putAddress(Object, long, long)->void:::Stores a native pointer into a given memory address
jdk.internal.misc.Unsafe#getUncompressedObject(long)->Object:::Fetches an uncompressed reference value from a given native variable ignoring the VM's compressed references mode.
jdk.internal.misc.Unsafe#getByte(long)->byte:::Fetches a value from a given memory address
jdk.internal.misc.Unsafe#putByte(long, byte)->void:::Stores a value into a given memory address
jdk.internal.misc.Unsafe#getShort(long)->short::: unsafe get short
jdk.internal.misc.Unsafe#putShort(long, short)->void::: unsafe put short
jdk.internal.misc.Unsafe#getChar(long)->char::: unsafe get char
jdk.internal.misc.Unsafe#putChar(long, char)->void::: unsafe put char
jdk.internal.misc.Unsafe#getInt(long)->int::: unsafe get int
jdk.internal.misc.Unsafe#putInt(long, int)->void::: unsafe put int
jdk.internal.misc.Unsafe#getLong(long)->long::: unsafe get long
jdk.internal.misc.Unsafe#putLong(long, long)->void::: unsafe put long
jdk.internal.misc.Unsafe#getFloat(long)->float::: unsafe get float
jdk.internal.misc.Unsafe#putFloat(long, float)->void::: unsafe put float
jdk.internal.misc.Unsafe#getDouble(long)->double::: unsafe get double
jdk.internal.misc.Unsafe#putDouble(long, double)->void::: unsafe put double
jdk.internal.misc.Unsafe#getAddress(long)->long::: unsafe get address
jdk.internal.misc.Unsafe#putAddress(long, long)->void::: unsafe put address
jdk.internal.misc.Unsafe#allocateMemory(long)->long:::Allocates a new block of native memory, of the given size in bytes
jdk.internal.misc.Unsafe#reallocateMemory(long, long)->long:::Resizes a new block of native memory, to the given size in bytes
jdk.internal.misc.Unsafe#setMemory(Object, long, long, byte)->void:::Sets all bytes in a given block of memory to a fixed value (usually zero)
jdk.internal.misc.Unsafe#setMemory(long, long, byte)->void:::Sets all bytes in a given block of memory to a fixed value (usually zero)
jdk.internal.misc.Unsafe#copyMemory(Object, long, Object, long, long)->void:::Sets all bytes in a given block of memory to a copy of another block
jdk.internal.misc.Unsafe#copyMemory(long, long, long)->void:::Sets all bytes in a given block of memory to a copy of another block
jdk.internal.misc.Unsafe#copySwapMemory(Object, long, Object, long, long, long)->void:::Copies all elements from one block of memory to another block, *unconditionally* byte swapping the elements on the fly
jdk.internal.misc.Unsafe#copySwapMemory(long, long, long, long)->void:::Copies all elements from one block of memory to another block, byte swapping the elements on the fly
jdk.internal.misc.Unsafe#freeMemory(long)->void:::Disposes of a block of native memory, as obtained from #allocateMemory or #reallocateMemory
jdk.internal.misc.Unsafe#objectFieldOffset(Field)->long:::Reports the location of a given field in the storage allocation of its class
jdk.internal.misc.Unsafe#objectFieldOffset(Class, String)->long:::Reports the location of the field with a given name in the storage allocation of its class.
jdk.internal.misc.Unsafe#staticFieldOffset(Field)->long:::Reports the location of a given static field, in conjunction with #staticFieldBase
jdk.internal.misc.Unsafe#staticFieldBase(Field)->Object:::Reports the location of a given static field, in conjunction with #staticFieldOffset
jdk.internal.misc.Unsafe#shouldBeInitialized(Class)->boolean:::Detects if the given class may need to be initialized
jdk.internal.misc.Unsafe#ensureClassInitialized(Class)->void:::Ensures the given class has been initialized
jdk.internal.misc.Unsafe#arrayBaseOffset(Class)->int:::Reports the offset of the first element in the storage allocation of a given array class
jdk.internal.misc.Unsafe#arrayIndexScale(Class)->int:::Reports the scale factor for addressing elements in the storage allocation of a given array class
jdk.internal.misc.Unsafe#addressSize()->int:::Reports the size in bytes of a native pointer, as stored via #putAddress
jdk.internal.misc.Unsafe#pageSize()->int:::Reports the size in bytes of a native memory page (whatever that is)
jdk.internal.misc.Unsafe#defineClass(String, byte[], int, int, ClassLoader, ProtectionDomain)->Class:::Tells the VM to define a class, without security checks
jdk.internal.misc.Unsafe#defineClass0(String, byte[], int, int, ClassLoader, ProtectionDomain)->Class::: unsafe define class0
jdk.internal.misc.Unsafe#defineAnonymousClass(Class, byte[], Object[])->Class:::Defines a class but does not make it known to the class loader or system dictionary
jdk.internal.misc.Unsafe#allocateInstance(Class)->Object:::Allocates an instance but does not run any constructor
jdk.internal.misc.Unsafe#allocateUninitializedArray(Class, int)->Object:::Allocates an array of a given type, but does not do zeroing
jdk.internal.misc.Unsafe#throwException(Throwable)->void:::Throws the exception without telling the verifier.
jdk.internal.misc.Unsafe#compareAndSetObject(Object, long, Object, Object)->boolean:::Atomically updates Java variable to x if it is currently holding expected
jdk.internal.misc.Unsafe#compareAndExchangeObject(Object, long, Object, Object)->Object::: unsafe compare and exchange object
jdk.internal.misc.Unsafe#compareAndExchangeObjectAcquire(Object, long, Object, Object)->Object::: unsafe compare and exchange object acquire
jdk.internal.misc.Unsafe#compareAndExchangeObjectRelease(Object, long, Object, Object)->Object::: unsafe compare and exchange object release
jdk.internal.misc.Unsafe#weakCompareAndSetObjectPlain(Object, long, Object, Object)->boolean::: unsafe weak compare and set object plain
jdk.internal.misc.Unsafe#weakCompareAndSetObjectAcquire(Object, long, Object, Object)->boolean::: unsafe weak compare and set object acquire
jdk.internal.misc.Unsafe#weakCompareAndSetObjectRelease(Object, long, Object, Object)->boolean::: unsafe weak compare and set object release
jdk.internal.misc.Unsafe#weakCompareAndSetObject(Object, long, Object, Object)->boolean::: unsafe weak compare and set object
jdk.internal.misc.Unsafe#compareAndSetInt(Object, long, int, int)->boolean:::Atomically updates Java variable to x if it is currently holding expected
jdk.internal.misc.Unsafe#compareAndExchangeInt(Object, long, int, int)->int::: unsafe compare and exchange int
jdk.internal.misc.Unsafe#compareAndExchangeIntAcquire(Object, long, int, int)->int::: unsafe compare and exchange int acquire
jdk.internal.misc.Unsafe#compareAndExchangeIntRelease(Object, long, int, int)->int::: unsafe compare and exchange int release
jdk.internal.misc.Unsafe#weakCompareAndSetIntPlain(Object, long, int, int)->boolean::: unsafe weak compare and set int plain
jdk.internal.misc.Unsafe#weakCompareAndSetIntAcquire(Object, long, int, int)->boolean::: unsafe weak compare and set int acquire
jdk.internal.misc.Unsafe#weakCompareAndSetIntRelease(Object, long, int, int)->boolean::: unsafe weak compare and set int release
jdk.internal.misc.Unsafe#weakCompareAndSetInt(Object, long, int, int)->boolean::: unsafe weak compare and set int
jdk.internal.misc.Unsafe#compareAndExchangeByte(Object, long, byte, byte)->byte::: unsafe compare and exchange byte
jdk.internal.misc.Unsafe#compareAndSetByte(Object, long, byte, byte)->boolean::: unsafe compare and set byte
jdk.internal.misc.Unsafe#weakCompareAndSetByte(Object, long, byte, byte)->boolean::: unsafe weak compare and set byte
jdk.internal.misc.Unsafe#weakCompareAndSetByteAcquire(Object, long, byte, byte)->boolean::: unsafe weak compare and set byte acquire
jdk.internal.misc.Unsafe#weakCompareAndSetByteRelease(Object, long, byte, byte)->boolean::: unsafe weak compare and set byte release
jdk.internal.misc.Unsafe#weakCompareAndSetBytePlain(Object, long, byte, byte)->boolean::: unsafe weak compare and set byte plain
jdk.internal.misc.Unsafe#compareAndExchangeByteAcquire(Object, long, byte, byte)->byte::: unsafe compare and exchange byte acquire
jdk.internal.misc.Unsafe#compareAndExchangeByteRelease(Object, long, byte, byte)->byte::: unsafe compare and exchange byte release
jdk.internal.misc.Unsafe#compareAndExchangeShort(Object, long, short, short)->short::: unsafe compare and exchange short
jdk.internal.misc.Unsafe#compareAndSetShort(Object, long, short, short)->boolean::: unsafe compare and set short
jdk.internal.misc.Unsafe#weakCompareAndSetShort(Object, long, short, short)->boolean::: unsafe weak compare and set short
jdk.internal.misc.Unsafe#weakCompareAndSetShortAcquire(Object, long, short, short)->boolean::: unsafe weak compare and set short acquire
jdk.internal.misc.Unsafe#weakCompareAndSetShortRelease(Object, long, short, short)->boolean::: unsafe weak compare and set short release
jdk.internal.misc.Unsafe#weakCompareAndSetShortPlain(Object, long, short, short)->boolean::: unsafe weak compare and set short plain
jdk.internal.misc.Unsafe#compareAndExchangeShortAcquire(Object, long, short, short)->short::: unsafe compare and exchange short acquire
jdk.internal.misc.Unsafe#compareAndExchangeShortRelease(Object, long, short, short)->short::: unsafe compare and exchange short release
jdk.internal.misc.Unsafe#compareAndSetChar(Object, long, char, char)->boolean::: unsafe compare and set char
jdk.internal.misc.Unsafe#compareAndExchangeChar(Object, long, char, char)->char::: unsafe compare and exchange char
jdk.internal.misc.Unsafe#compareAndExchangeCharAcquire(Object, long, char, char)->char::: unsafe compare and exchange char acquire
jdk.internal.misc.Unsafe#compareAndExchangeCharRelease(Object, long, char, char)->char::: unsafe compare and exchange char release
jdk.internal.misc.Unsafe#weakCompareAndSetChar(Object, long, char, char)->boolean::: unsafe weak compare and set char
jdk.internal.misc.Unsafe#weakCompareAndSetCharAcquire(Object, long, char, char)->boolean::: unsafe weak compare and set char acquire
jdk.internal.misc.Unsafe#weakCompareAndSetCharRelease(Object, long, char, char)->boolean::: unsafe weak compare and set char release
jdk.internal.misc.Unsafe#weakCompareAndSetCharPlain(Object, long, char, char)->boolean::: unsafe weak compare and set char plain
jdk.internal.misc.Unsafe#compareAndSetBoolean(Object, long, boolean, boolean)->boolean::: unsafe compare and set boolean
jdk.internal.misc.Unsafe#compareAndExchangeBoolean(Object, long, boolean, boolean)->boolean::: unsafe compare and exchange boolean
jdk.internal.misc.Unsafe#compareAndExchangeBooleanAcquire(Object, long, boolean, boolean)->boolean::: unsafe compare and exchange boolean acquire
jdk.internal.misc.Unsafe#compareAndExchangeBooleanRelease(Object, long, boolean, boolean)->boolean::: unsafe compare and exchange boolean release
jdk.internal.misc.Unsafe#weakCompareAndSetBoolean(Object, long, boolean, boolean)->boolean::: unsafe weak compare and set boolean
jdk.internal.misc.Unsafe#weakCompareAndSetBooleanAcquire(Object, long, boolean, boolean)->boolean::: unsafe weak compare and set boolean acquire
jdk.internal.misc.Unsafe#weakCompareAndSetBooleanRelease(Object, long, boolean, boolean)->boolean::: unsafe weak compare and set boolean release
jdk.internal.misc.Unsafe#weakCompareAndSetBooleanPlain(Object, long, boolean, boolean)->boolean::: unsafe weak compare and set boolean plain
jdk.internal.misc.Unsafe#compareAndSetFloat(Object, long, float, float)->boolean:::Atomically updates Java variable to x if it is currently holding expected
jdk.internal.misc.Unsafe#compareAndExchangeFloat(Object, long, float, float)->float::: unsafe compare and exchange float
jdk.internal.misc.Unsafe#compareAndExchangeFloatAcquire(Object, long, float, float)->float::: unsafe compare and exchange float acquire
jdk.internal.misc.Unsafe#compareAndExchangeFloatRelease(Object, long, float, float)->float::: unsafe compare and exchange float release
jdk.internal.misc.Unsafe#weakCompareAndSetFloatPlain(Object, long, float, float)->boolean::: unsafe weak compare and set float plain
jdk.internal.misc.Unsafe#weakCompareAndSetFloatAcquire(Object, long, float, float)->boolean::: unsafe weak compare and set float acquire
jdk.internal.misc.Unsafe#weakCompareAndSetFloatRelease(Object, long, float, float)->boolean::: unsafe weak compare and set float release
jdk.internal.misc.Unsafe#weakCompareAndSetFloat(Object, long, float, float)->boolean::: unsafe weak compare and set float
jdk.internal.misc.Unsafe#compareAndSetDouble(Object, long, double, double)->boolean:::Atomically updates Java variable to x if it is currently holding expected
jdk.internal.misc.Unsafe#compareAndExchangeDouble(Object, long, double, double)->double::: unsafe compare and exchange double
jdk.internal.misc.Unsafe#compareAndExchangeDoubleAcquire(Object, long, double, double)->double::: unsafe compare and exchange double acquire
jdk.internal.misc.Unsafe#compareAndExchangeDoubleRelease(Object, long, double, double)->double::: unsafe compare and exchange double release
jdk.internal.misc.Unsafe#weakCompareAndSetDoublePlain(Object, long, double, double)->boolean::: unsafe weak compare and set double plain
jdk.internal.misc.Unsafe#weakCompareAndSetDoubleAcquire(Object, long, double, double)->boolean::: unsafe weak compare and set double acquire
jdk.internal.misc.Unsafe#weakCompareAndSetDoubleRelease(Object, long, double, double)->boolean::: unsafe weak compare and set double release
jdk.internal.misc.Unsafe#weakCompareAndSetDouble(Object, long, double, double)->boolean::: unsafe weak compare and set double
jdk.internal.misc.Unsafe#compareAndSetLong(Object, long, long, long)->boolean:::Atomically updates Java variable to x if it is currently holding expected
jdk.internal.misc.Unsafe#compareAndExchangeLong(Object, long, long, long)->long::: unsafe compare and exchange long
jdk.internal.misc.Unsafe#compareAndExchangeLongAcquire(Object, long, long, long)->long::: unsafe compare and exchange long acquire
jdk.internal.misc.Unsafe#compareAndExchangeLongRelease(Object, long, long, long)->long::: unsafe compare and exchange long release
jdk.internal.misc.Unsafe#weakCompareAndSetLongPlain(Object, long, long, long)->boolean::: unsafe weak compare and set long plain
jdk.internal.misc.Unsafe#weakCompareAndSetLongAcquire(Object, long, long, long)->boolean::: unsafe weak compare and set long acquire
jdk.internal.misc.Unsafe#weakCompareAndSetLongRelease(Object, long, long, long)->boolean::: unsafe weak compare and set long release
jdk.internal.misc.Unsafe#weakCompareAndSetLong(Object, long, long, long)->boolean::: unsafe weak compare and set long
jdk.internal.misc.Unsafe#getObjectVolatile(Object, long)->Object:::Fetches a reference value from a given Java variable, with volatile load semantics
jdk.internal.misc.Unsafe#putObjectVolatile(Object, long, Object)->void:::Stores a reference value into a given Java variable, with volatile store semantics
jdk.internal.misc.Unsafe#getIntVolatile(Object, long)->int:::Volatile version of #getInt(Object, long)
jdk.internal.misc.Unsafe#putIntVolatile(Object, long, int)->void:::Volatile version of #putInt(Object, long, int)
jdk.internal.misc.Unsafe#getBooleanVolatile(Object, long)->boolean:::Volatile version of #getBoolean(Object, long)
jdk.internal.misc.Unsafe#putBooleanVolatile(Object, long, boolean)->void:::Volatile version of #putBoolean(Object, long, boolean)
jdk.internal.misc.Unsafe#getByteVolatile(Object, long)->byte:::Volatile version of #getByte(Object, long)
jdk.internal.misc.Unsafe#putByteVolatile(Object, long, byte)->void:::Volatile version of #putByte(Object, long, byte)
jdk.internal.misc.Unsafe#getShortVolatile(Object, long)->short:::Volatile version of #getShort(Object, long)
jdk.internal.misc.Unsafe#putShortVolatile(Object, long, short)->void:::Volatile version of #putShort(Object, long, short)
jdk.internal.misc.Unsafe#getCharVolatile(Object, long)->char:::Volatile version of #getChar(Object, long)
jdk.internal.misc.Unsafe#putCharVolatile(Object, long, char)->void:::Volatile version of #putChar(Object, long, char)
jdk.internal.misc.Unsafe#getLongVolatile(Object, long)->long:::Volatile version of #getLong(Object, long)
jdk.internal.misc.Unsafe#putLongVolatile(Object, long, long)->void:::Volatile version of #putLong(Object, long, long)
jdk.internal.misc.Unsafe#getFloatVolatile(Object, long)->float:::Volatile version of #getFloat(Object, long)
jdk.internal.misc.Unsafe#putFloatVolatile(Object, long, float)->void:::Volatile version of #putFloat(Object, long, float)
jdk.internal.misc.Unsafe#getDoubleVolatile(Object, long)->double:::Volatile version of #getDouble(Object, long)
jdk.internal.misc.Unsafe#putDoubleVolatile(Object, long, double)->void:::Volatile version of #putDouble(Object, long, double)
jdk.internal.misc.Unsafe#getObjectAcquire(Object, long)->Object:::Acquire version of #getObjectVolatile(Object, long)
jdk.internal.misc.Unsafe#getBooleanAcquire(Object, long)->boolean:::Acquire version of #getBooleanVolatile(Object, long)
jdk.internal.misc.Unsafe#getByteAcquire(Object, long)->byte:::Acquire version of #getByteVolatile(Object, long)
jdk.internal.misc.Unsafe#getShortAcquire(Object, long)->short:::Acquire version of #getShortVolatile(Object, long)
jdk.internal.misc.Unsafe#getCharAcquire(Object, long)->char:::Acquire version of #getCharVolatile(Object, long)
jdk.internal.misc.Unsafe#getIntAcquire(Object, long)->int:::Acquire version of #getIntVolatile(Object, long)
jdk.internal.misc.Unsafe#getFloatAcquire(Object, long)->float:::Acquire version of #getFloatVolatile(Object, long)
jdk.internal.misc.Unsafe#getLongAcquire(Object, long)->long:::Acquire version of #getLongVolatile(Object, long)
jdk.internal.misc.Unsafe#getDoubleAcquire(Object, long)->double:::Acquire version of #getDoubleVolatile(Object, long)
jdk.internal.misc.Unsafe#putObjectRelease(Object, long, Object)->void:::Release version of #putObjectVolatile(Object, long, Object)
jdk.internal.misc.Unsafe#putBooleanRelease(Object, long, boolean)->void:::Release version of #putBooleanVolatile(Object, long, boolean)
jdk.internal.misc.Unsafe#putByteRelease(Object, long, byte)->void:::Release version of #putByteVolatile(Object, long, byte)
jdk.internal.misc.Unsafe#putShortRelease(Object, long, short)->void:::Release version of #putShortVolatile(Object, long, short)
jdk.internal.misc.Unsafe#putCharRelease(Object, long, char)->void:::Release version of #putCharVolatile(Object, long, char)
jdk.internal.misc.Unsafe#putIntRelease(Object, long, int)->void:::Release version of #putIntVolatile(Object, long, int)
jdk.internal.misc.Unsafe#putFloatRelease(Object, long, float)->void:::Release version of #putFloatVolatile(Object, long, float)
jdk.internal.misc.Unsafe#putLongRelease(Object, long, long)->void:::Release version of #putLongVolatile(Object, long, long)
jdk.internal.misc.Unsafe#putDoubleRelease(Object, long, double)->void:::Release version of #putDoubleVolatile(Object, long, double)
jdk.internal.misc.Unsafe#getObjectOpaque(Object, long)->Object:::Opaque version of #getObjectVolatile(Object, long)
jdk.internal.misc.Unsafe#getBooleanOpaque(Object, long)->boolean:::Opaque version of #getBooleanVolatile(Object, long)
jdk.internal.misc.Unsafe#getByteOpaque(Object, long)->byte:::Opaque version of #getByteVolatile(Object, long)
jdk.internal.misc.Unsafe#getShortOpaque(Object, long)->short:::Opaque version of #getShortVolatile(Object, long)
jdk.internal.misc.Unsafe#getCharOpaque(Object, long)->char:::Opaque version of #getCharVolatile(Object, long)
jdk.internal.misc.Unsafe#getIntOpaque(Object, long)->int:::Opaque version of #getIntVolatile(Object, long)
jdk.internal.misc.Unsafe#getFloatOpaque(Object, long)->float:::Opaque version of #getFloatVolatile(Object, long)
jdk.internal.misc.Unsafe#getLongOpaque(Object, long)->long:::Opaque version of #getLongVolatile(Object, long)
jdk.internal.misc.Unsafe#getDoubleOpaque(Object, long)->double:::Opaque version of #getDoubleVolatile(Object, long)
jdk.internal.misc.Unsafe#putObjectOpaque(Object, long, Object)->void:::Opaque version of #putObjectVolatile(Object, long, Object)
jdk.internal.misc.Unsafe#putBooleanOpaque(Object, long, boolean)->void:::Opaque version of #putBooleanVolatile(Object, long, boolean)
jdk.internal.misc.Unsafe#putByteOpaque(Object, long, byte)->void:::Opaque version of #putByteVolatile(Object, long, byte)
jdk.internal.misc.Unsafe#putShortOpaque(Object, long, short)->void:::Opaque version of #putShortVolatile(Object, long, short)
jdk.internal.misc.Unsafe#putCharOpaque(Object, long, char)->void:::Opaque version of #putCharVolatile(Object, long, char)
jdk.internal.misc.Unsafe#putIntOpaque(Object, long, int)->void:::Opaque version of #putIntVolatile(Object, long, int)
jdk.internal.misc.Unsafe#putFloatOpaque(Object, long, float)->void:::Opaque version of #putFloatVolatile(Object, long, float)
jdk.internal.misc.Unsafe#putLongOpaque(Object, long, long)->void:::Opaque version of #putLongVolatile(Object, long, long)
jdk.internal.misc.Unsafe#putDoubleOpaque(Object, long, double)->void:::Opaque version of #putDoubleVolatile(Object, long, double)
jdk.internal.misc.Unsafe#unpark(Object)->void:::Unblocks the given thread blocked on park, or, if it is not blocked, causes the subsequent call to park not to block
jdk.internal.misc.Unsafe#park(boolean, long)->void:::Blocks current thread, returning when a balancing unpark occurs, or a balancing unpark has already occurred, or the thread is interrupted, or, if not absolute and time is not zero, the given time nanoseconds have elapsed, or if absolute, the given deadline in milliseconds since Epoch has passed, or spuriously (i.e., returning for no "reason")
jdk.internal.misc.Unsafe#getLoadAverage(double[], int)->int:::Gets the load average in the system run queue assigned to the available processors averaged over various periods of time
jdk.internal.misc.Unsafe#getAndAddInt(Object, long, int)->int:::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.
jdk.internal.misc.Unsafe#getAndAddIntRelease(Object, long, int)->int::: unsafe get and add int release
jdk.internal.misc.Unsafe#getAndAddIntAcquire(Object, long, int)->int::: unsafe get and add int acquire
jdk.internal.misc.Unsafe#getAndAddLong(Object, long, long)->long:::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.
jdk.internal.misc.Unsafe#getAndAddLongRelease(Object, long, long)->long::: unsafe get and add long release
jdk.internal.misc.Unsafe#getAndAddLongAcquire(Object, long, long)->long::: unsafe get and add long acquire
jdk.internal.misc.Unsafe#getAndAddByte(Object, long, byte)->byte::: unsafe get and add byte
jdk.internal.misc.Unsafe#getAndAddByteRelease(Object, long, byte)->byte::: unsafe get and add byte release
jdk.internal.misc.Unsafe#getAndAddByteAcquire(Object, long, byte)->byte::: unsafe get and add byte acquire
jdk.internal.misc.Unsafe#getAndAddShort(Object, long, short)->short::: unsafe get and add short
jdk.internal.misc.Unsafe#getAndAddShortRelease(Object, long, short)->short::: unsafe get and add short release
jdk.internal.misc.Unsafe#getAndAddShortAcquire(Object, long, short)->short::: unsafe get and add short acquire
jdk.internal.misc.Unsafe#getAndAddChar(Object, long, char)->char::: unsafe get and add char
jdk.internal.misc.Unsafe#getAndAddCharRelease(Object, long, char)->char::: unsafe get and add char release
jdk.internal.misc.Unsafe#getAndAddCharAcquire(Object, long, char)->char::: unsafe get and add char acquire
jdk.internal.misc.Unsafe#getAndAddFloat(Object, long, float)->float::: unsafe get and add float
jdk.internal.misc.Unsafe#getAndAddFloatRelease(Object, long, float)->float::: unsafe get and add float release
jdk.internal.misc.Unsafe#getAndAddFloatAcquire(Object, long, float)->float::: unsafe get and add float acquire
jdk.internal.misc.Unsafe#getAndAddDouble(Object, long, double)->double::: unsafe get and add double
jdk.internal.misc.Unsafe#getAndAddDoubleRelease(Object, long, double)->double::: unsafe get and add double release
jdk.internal.misc.Unsafe#getAndAddDoubleAcquire(Object, long, double)->double::: unsafe get and add double acquire
jdk.internal.misc.Unsafe#getAndSetInt(Object, long, int)->int:::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.
jdk.internal.misc.Unsafe#getAndSetIntRelease(Object, long, int)->int::: unsafe get and set int release
jdk.internal.misc.Unsafe#getAndSetIntAcquire(Object, long, int)->int::: unsafe get and set int acquire
jdk.internal.misc.Unsafe#getAndSetLong(Object, long, long)->long:::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.
jdk.internal.misc.Unsafe#getAndSetLongRelease(Object, long, long)->long::: unsafe get and set long release
jdk.internal.misc.Unsafe#getAndSetLongAcquire(Object, long, long)->long::: unsafe get and set long acquire
jdk.internal.misc.Unsafe#getAndSetObject(Object, long, Object)->Object:::Atomically exchanges the given reference value with the current reference value of a field or array element within the given object o at the given offset.
jdk.internal.misc.Unsafe#getAndSetObjectRelease(Object, long, Object)->Object::: unsafe get and set object release
jdk.internal.misc.Unsafe#getAndSetObjectAcquire(Object, long, Object)->Object::: unsafe get and set object acquire
jdk.internal.misc.Unsafe#getAndSetByte(Object, long, byte)->byte::: unsafe get and set byte
jdk.internal.misc.Unsafe#getAndSetByteRelease(Object, long, byte)->byte::: unsafe get and set byte release
jdk.internal.misc.Unsafe#getAndSetByteAcquire(Object, long, byte)->byte::: unsafe get and set byte acquire
jdk.internal.misc.Unsafe#getAndSetBoolean(Object, long, boolean)->boolean::: unsafe get and set boolean
jdk.internal.misc.Unsafe#getAndSetBooleanRelease(Object, long, boolean)->boolean::: unsafe get and set boolean release
jdk.internal.misc.Unsafe#getAndSetBooleanAcquire(Object, long, boolean)->boolean::: unsafe get and set boolean acquire
jdk.internal.misc.Unsafe#getAndSetShort(Object, long, short)->short::: unsafe get and set short
jdk.internal.misc.Unsafe#getAndSetShortRelease(Object, long, short)->short::: unsafe get and set short release
jdk.internal.misc.Unsafe#getAndSetShortAcquire(Object, long, short)->short::: unsafe get and set short acquire
jdk.internal.misc.Unsafe#getAndSetChar(Object, long, char)->char::: unsafe get and set char
jdk.internal.misc.Unsafe#getAndSetCharRelease(Object, long, char)->char::: unsafe get and set char release
jdk.internal.misc.Unsafe#getAndSetCharAcquire(Object, long, char)->char::: unsafe get and set char acquire
jdk.internal.misc.Unsafe#getAndSetFloat(Object, long, float)->float::: unsafe get and set float
jdk.internal.misc.Unsafe#getAndSetFloatRelease(Object, long, float)->float::: unsafe get and set float release
jdk.internal.misc.Unsafe#getAndSetFloatAcquire(Object, long, float)->float::: unsafe get and set float acquire
jdk.internal.misc.Unsafe#getAndSetDouble(Object, long, double)->double::: unsafe get and set double
jdk.internal.misc.Unsafe#getAndSetDoubleRelease(Object, long, double)->double::: unsafe get and set double release
jdk.internal.misc.Unsafe#getAndSetDoubleAcquire(Object, long, double)->double::: unsafe get and set double acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrBoolean(Object, long, boolean)->boolean::: unsafe get and bitwise or boolean
jdk.internal.misc.Unsafe#getAndBitwiseOrBooleanRelease(Object, long, boolean)->boolean::: unsafe get and bitwise or boolean release
jdk.internal.misc.Unsafe#getAndBitwiseOrBooleanAcquire(Object, long, boolean)->boolean::: unsafe get and bitwise or boolean acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndBoolean(Object, long, boolean)->boolean::: unsafe get and bitwise and boolean
jdk.internal.misc.Unsafe#getAndBitwiseAndBooleanRelease(Object, long, boolean)->boolean::: unsafe get and bitwise and boolean release
jdk.internal.misc.Unsafe#getAndBitwiseAndBooleanAcquire(Object, long, boolean)->boolean::: unsafe get and bitwise and boolean acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorBoolean(Object, long, boolean)->boolean::: unsafe get and bitwise xor boolean
jdk.internal.misc.Unsafe#getAndBitwiseXorBooleanRelease(Object, long, boolean)->boolean::: unsafe get and bitwise xor boolean release
jdk.internal.misc.Unsafe#getAndBitwiseXorBooleanAcquire(Object, long, boolean)->boolean::: unsafe get and bitwise xor boolean acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrByte(Object, long, byte)->byte::: unsafe get and bitwise or byte
jdk.internal.misc.Unsafe#getAndBitwiseOrByteRelease(Object, long, byte)->byte::: unsafe get and bitwise or byte release
jdk.internal.misc.Unsafe#getAndBitwiseOrByteAcquire(Object, long, byte)->byte::: unsafe get and bitwise or byte acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndByte(Object, long, byte)->byte::: unsafe get and bitwise and byte
jdk.internal.misc.Unsafe#getAndBitwiseAndByteRelease(Object, long, byte)->byte::: unsafe get and bitwise and byte release
jdk.internal.misc.Unsafe#getAndBitwiseAndByteAcquire(Object, long, byte)->byte::: unsafe get and bitwise and byte acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorByte(Object, long, byte)->byte::: unsafe get and bitwise xor byte
jdk.internal.misc.Unsafe#getAndBitwiseXorByteRelease(Object, long, byte)->byte::: unsafe get and bitwise xor byte release
jdk.internal.misc.Unsafe#getAndBitwiseXorByteAcquire(Object, long, byte)->byte::: unsafe get and bitwise xor byte acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrChar(Object, long, char)->char::: unsafe get and bitwise or char
jdk.internal.misc.Unsafe#getAndBitwiseOrCharRelease(Object, long, char)->char::: unsafe get and bitwise or char release
jdk.internal.misc.Unsafe#getAndBitwiseOrCharAcquire(Object, long, char)->char::: unsafe get and bitwise or char acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndChar(Object, long, char)->char::: unsafe get and bitwise and char
jdk.internal.misc.Unsafe#getAndBitwiseAndCharRelease(Object, long, char)->char::: unsafe get and bitwise and char release
jdk.internal.misc.Unsafe#getAndBitwiseAndCharAcquire(Object, long, char)->char::: unsafe get and bitwise and char acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorChar(Object, long, char)->char::: unsafe get and bitwise xor char
jdk.internal.misc.Unsafe#getAndBitwiseXorCharRelease(Object, long, char)->char::: unsafe get and bitwise xor char release
jdk.internal.misc.Unsafe#getAndBitwiseXorCharAcquire(Object, long, char)->char::: unsafe get and bitwise xor char acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrShort(Object, long, short)->short::: unsafe get and bitwise or short
jdk.internal.misc.Unsafe#getAndBitwiseOrShortRelease(Object, long, short)->short::: unsafe get and bitwise or short release
jdk.internal.misc.Unsafe#getAndBitwiseOrShortAcquire(Object, long, short)->short::: unsafe get and bitwise or short acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndShort(Object, long, short)->short::: unsafe get and bitwise and short
jdk.internal.misc.Unsafe#getAndBitwiseAndShortRelease(Object, long, short)->short::: unsafe get and bitwise and short release
jdk.internal.misc.Unsafe#getAndBitwiseAndShortAcquire(Object, long, short)->short::: unsafe get and bitwise and short acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorShort(Object, long, short)->short::: unsafe get and bitwise xor short
jdk.internal.misc.Unsafe#getAndBitwiseXorShortRelease(Object, long, short)->short::: unsafe get and bitwise xor short release
jdk.internal.misc.Unsafe#getAndBitwiseXorShortAcquire(Object, long, short)->short::: unsafe get and bitwise xor short acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrInt(Object, long, int)->int::: unsafe get and bitwise or int
jdk.internal.misc.Unsafe#getAndBitwiseOrIntRelease(Object, long, int)->int::: unsafe get and bitwise or int release
jdk.internal.misc.Unsafe#getAndBitwiseOrIntAcquire(Object, long, int)->int::: unsafe get and bitwise or int acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndInt(Object, long, int)->int:::Atomically replaces the current value of a field or array element within the given object with the result of bitwise AND between the current value and mask.
jdk.internal.misc.Unsafe#getAndBitwiseAndIntRelease(Object, long, int)->int::: unsafe get and bitwise and int release
jdk.internal.misc.Unsafe#getAndBitwiseAndIntAcquire(Object, long, int)->int::: unsafe get and bitwise and int acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorInt(Object, long, int)->int::: unsafe get and bitwise xor int
jdk.internal.misc.Unsafe#getAndBitwiseXorIntRelease(Object, long, int)->int::: unsafe get and bitwise xor int release
jdk.internal.misc.Unsafe#getAndBitwiseXorIntAcquire(Object, long, int)->int::: unsafe get and bitwise xor int acquire
jdk.internal.misc.Unsafe#getAndBitwiseOrLong(Object, long, long)->long::: unsafe get and bitwise or long
jdk.internal.misc.Unsafe#getAndBitwiseOrLongRelease(Object, long, long)->long::: unsafe get and bitwise or long release
jdk.internal.misc.Unsafe#getAndBitwiseOrLongAcquire(Object, long, long)->long::: unsafe get and bitwise or long acquire
jdk.internal.misc.Unsafe#getAndBitwiseAndLong(Object, long, long)->long::: unsafe get and bitwise and long
jdk.internal.misc.Unsafe#getAndBitwiseAndLongRelease(Object, long, long)->long::: unsafe get and bitwise and long release
jdk.internal.misc.Unsafe#getAndBitwiseAndLongAcquire(Object, long, long)->long::: unsafe get and bitwise and long acquire
jdk.internal.misc.Unsafe#getAndBitwiseXorLong(Object, long, long)->long::: unsafe get and bitwise xor long
jdk.internal.misc.Unsafe#getAndBitwiseXorLongRelease(Object, long, long)->long::: unsafe get and bitwise xor long release
jdk.internal.misc.Unsafe#getAndBitwiseXorLongAcquire(Object, long, long)->long::: unsafe get and bitwise xor long acquire
jdk.internal.misc.Unsafe#loadFence()->void:::Ensures that loads before the fence will not be reordered with loads and stores after the fence; a "LoadLoad plus LoadStore barrier"
jdk.internal.misc.Unsafe#storeFence()->void:::Ensures that loads and stores before the fence will not be reordered with stores after the fence; a "StoreStore plus LoadStore barrier"
jdk.internal.misc.Unsafe#fullFence()->void:::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence
jdk.internal.misc.Unsafe#loadLoadFence()->void:::Ensures that loads before the fence will not be reordered with loads after the fence.
jdk.internal.misc.Unsafe#storeStoreFence()->void:::Ensures that stores before the fence will not be reordered with stores after the fence.
jdk.internal.misc.Unsafe#isBigEndian()->boolean::: unsafe is big endian
jdk.internal.misc.Unsafe#unalignedAccess()->boolean::: unsafe unaligned access
jdk.internal.misc.Unsafe#getLongUnaligned(Object, long)->long:::Fetches a value at some byte offset into a given Java object
jdk.internal.misc.Unsafe#getLongUnaligned(Object, long, boolean)->long:::As #getLongUnaligned(Object, long) but with an additional argument which specifies the endianness of the value as stored in memory.
jdk.internal.misc.Unsafe#getIntUnaligned(Object, long)->int::: unsafe get int unaligned
jdk.internal.misc.Unsafe#getIntUnaligned(Object, long, boolean)->int::: unsafe get int unaligned
jdk.internal.misc.Unsafe#getShortUnaligned(Object, long)->short::: unsafe get short unaligned
jdk.internal.misc.Unsafe#getShortUnaligned(Object, long, boolean)->short::: unsafe get short unaligned
jdk.internal.misc.Unsafe#getCharUnaligned(Object, long)->char::: unsafe get char unaligned
jdk.internal.misc.Unsafe#getCharUnaligned(Object, long, boolean)->char::: unsafe get char unaligned
jdk.internal.misc.Unsafe#putLongUnaligned(Object, long, long)->void:::Stores a value at some byte offset into a given Java object
jdk.internal.misc.Unsafe#putLongUnaligned(Object, long, long, boolean)->void:::As #putLongUnaligned(Object, long, long) but with an additional argument which specifies the endianness of the value as stored in memory.
jdk.internal.misc.Unsafe#putIntUnaligned(Object, long, int)->void::: unsafe put int unaligned
jdk.internal.misc.Unsafe#putIntUnaligned(Object, long, int, boolean)->void::: unsafe put int unaligned
jdk.internal.misc.Unsafe#putShortUnaligned(Object, long, short)->void::: unsafe put short unaligned
jdk.internal.misc.Unsafe#putShortUnaligned(Object, long, short, boolean)->void::: unsafe put short unaligned
jdk.internal.misc.Unsafe#putCharUnaligned(Object, long, char)->void::: unsafe put char unaligned
jdk.internal.misc.Unsafe#putCharUnaligned(Object, long, char, boolean)->void::: unsafe put char unaligned
jdk.internal.misc.Unsafe#invokeCleaner(java.nio.ByteBuffer)->void:::Invokes the given direct byte buffer's cleaner, if any.
jdk.internal.misc.VM#initLevel(int)->void:::Sets the init level.
jdk.internal.misc.VM#initLevel()->int:::Returns the current init level.
jdk.internal.misc.VM#awaitInitLevel(int)->void:::Waits for the init level to get the given value.
jdk.internal.misc.VM#isModuleSystemInited()->boolean:::Returns true if the module system has been initialized.
jdk.internal.misc.VM#isBooted()->boolean:::Returns true if the VM is fully initialized.
jdk.internal.misc.VM#shutdown()->void:::Set shutdown state
jdk.internal.misc.VM#isShutdown()->boolean:::Returns true if the VM has been shutdown
jdk.internal.misc.VM#maxDirectMemory()->long::: m max direct memory
jdk.internal.misc.VM#isDirectMemoryPageAligned()->boolean::: m is direct memory page aligned
jdk.internal.misc.VM#isSystemDomainLoader(ClassLoader)->boolean:::Returns true if the given class loader is the bootstrap class loader or the platform class loader.
jdk.internal.misc.VM#getSavedProperty(String)->String:::Returns the system property of the specified key saved at system initialization time
jdk.internal.misc.VM#getSavedProperties()->Map:::Gets an unmodifiable view of the system properties saved at system initialization time
jdk.internal.misc.VM#saveAndRemoveProperties(Properties)->void::: m save and remove properties
jdk.internal.misc.VM#initializeOSEnvironment()->void::: m initialize environment
jdk.internal.misc.VM#getFinalRefCount()->int::: m get final ref count
jdk.internal.misc.VM#getPeakFinalRefCount()->int::: m get peak final ref count
jdk.internal.misc.VM#addFinalRefCount(int)->void::: m add final ref count
jdk.internal.misc.VM#toThreadState(int)->Thread.State:::Returns Thread.State for the given threadStatus
jdk.internal.misc.VM#latestUserDefinedLoader()->ClassLoader::: m latest user defined loader
jdk.internal.misc.VM#isSetUID()->boolean:::Returns true if we are in a set UID program.
jdk.internal.misc.VM#getuid()->long:::Returns the real user ID of the calling process, or -1 if the value is not available.
jdk.internal.misc.VM#geteuid()->long:::Returns the effective user ID of the calling process, or -1 if the value is not available.
jdk.internal.misc.VM#getgid()->long:::Returns the real group ID of the calling process, or -1 if the value is not available.
jdk.internal.misc.VM#getegid()->long:::Returns the effective group ID of the calling process, or -1 if the value is not available.
jdk.internal.misc.VM#getNanoTimeAdjustment(long)->long:::Get a nanosecond time stamp adjustment in the form of a single long
jdk.internal.misc.VM#getRuntimeArguments()->String[]:::Returns the VM arguments for this runtime environment.
jdk.internal.misc.VMNotification#newAllocState(int, int, boolean)->void::: notification new alloc state

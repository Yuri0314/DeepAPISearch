JMXAddressable#getAddress():::The address of this object.:::
JMXAuthenticator#authenticate(Object):::Authenticates the MBeanServerConnection client with the given client credentials.:::
JMXConnectionNotification#getConnectionId():::The connection ID to which this notification pertains.:::return
JMXConnector#connect():::Establishes the connection to the connector server:::
JMXConnector#connect(Map):::Establishes the connection to the connector server.  If connect has already been called successfully on this object, calling it again has no effect:::
JMXConnector#getMBeanServerConnection():::Returns an MBeanServerConnection object representing a remote MBean server:::
JMXConnector#getMBeanServerConnection(Subject):::Returns an MBeanServerConnection object representing a remote MBean server on which operations are performed on behalf of the supplied delegation subject:::
JMXConnector#close():::Closes the client connection to its server:::
JMXConnector#addConnectionNotificationListener(NotificationListener, NotificationFilter, Object):::Adds a listener to be informed of changes in connection status:::
JMXConnector#removeConnectionNotificationListener(NotificationListener):::Removes a listener from the list to be informed of changes in status:::
JMXConnector#removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object):::Removes a listener from the list to be informed of changes in status:::
JMXConnector#getConnectionId():::Gets this connection's ID from the connector server:::
JMXConnectorFactory#connect(JMXServiceURL):::Creates a connection to the connector server at the given address.  This method is equivalent to #connect(JMXServiceURL,Map) connect(serviceURL, null).:::return->connect
JMXConnectorFactory#connect(JMXServiceURL, Map):::Creates a connection to the connector server at the given address.  This method is equivalent to:   JMXConnector conn = JMXConnectorFactory.newJMXConnector(serviceURL,                                                         environment); conn.connect(environment); :::if->throw->new->NullPointerException->conn->newJMXConnector->conn->connect->return
JMXConnectorFactory#newJMXConnector(JMXServiceURL, Map):::Creates a connector client for the connector server at the given address:::envcopy->if->newHashMap->else->EnvHelp->checkAttributes->newHashMap->loader->resolveClassLoader->targetInterface->protocol->serviceURL->getProtocol->providerClassName->providerURL->provider->getProvider->exception->if->systemProvider->JMXConnectorFactory->isSystemProvider->connection->if->try->systemProvider->negate->getConnectorAsService->if->return->catch->throw->finally->getClassLoader->Collections->unmodifiableMap->getConnectorAsService->if->return->if->e->new->MalformedURLException->if->throw->else->throw->EnvHelp->initCause->fixedenv->Collections->unmodifiableMap->return->provider->newJMXConnector
JMXConnectorFactory#isSystemProvider(Provider):::Checks whether the given provider is our system provider for the RMI connector:::providerModule->provider->type->getModule->return->providerModule->isNamed->providerModule->getName->equals
JMXConnectorFactory#getConnectorAsService(Class, ClassLoader, JMXServiceURL, Predicate>, ConnectorFactory):::Creates a connector from a provider loaded from the ServiceLoader:::if->throw->providerClass->getName->new->InternalError->serviceLoader->ServiceLoader->loadInstalled->ServiceLoader->load->stream->serviceLoader->stream->filter->finder->new->ProviderFinder<>->try->stream->filter->findFirst->return->finder->get->catch->if->e->getCause->throw->e->getCause->else->throw->finally
JMXConnectorProvider#newJMXConnector(JMXServiceURL, Map):::Creates a new connector client that is ready to connect to the connector server at the given address:::
JMXConnectorServer#getMBeanServer():::Returns the MBean server that this connector server is attached to.:::return
JMXConnectorServer#toJMXConnector(Map):::Returns a client stub for this connector server:::if->isActive->throw->new->IllegalStateException->addr->getAddress->return->JMXConnectorFactory->newJMXConnector
JMXConnectorServer#getNotificationInfo():::Returns an array indicating the notifications that this MBean sends:::types->className->getName->description->return->new->MBeanNotificationInfoArr->new->MBeanNotificationInfo
JMXConnectorServer#connectionOpened(String, String, Object):::Called by a subclass when a new client connection is opened:::if->throw->new->NullPointerException->synchronized->connectionIds->add->sendNotification
JMXConnectorServer#connectionClosed(String, String, Object):::Called by a subclass when a client connection is closed normally:::if->throw->new->NullPointerException->synchronized->connectionIds->remove->sendNotification
JMXConnectorServer#connectionFailed(String, String, Object):::Called by a subclass when a client connection fails:::if->throw->new->NullPointerException->synchronized->connectionIds->remove->sendNotification
JMXConnectorServer#preRegister(MBeanServer, ObjectName):::Called by an MBean server when this connector server is registered in that MBean server:::if->throw->new->NullPointerException->if->return
JMXConnectorServer#preDeregister():::Called by an MBean server when this connector server is unregistered from that MBean server:::if->isActive->stop
JMXConnectorServerFactory#newJMXConnectorServer(JMXServiceURL, Map, MBeanServer):::Creates a connector server at the given address:::envcopy->if->new->HashMap<String,Object>->else->EnvHelp->checkAttributes->new->HashMap<String,Object>->targetInterface->loader->JMXConnectorFactory->resolveClassLoader->protocol->serviceURL->getProtocol->providerClassName->provider->JMXConnectorFactory->getProvider->exception->connection->if->systemProvider->JMXConnectorFactory->isSystemProvider->if->try->systemProvider->negate->getConnectorServerAsService->if->return->catch->throw->finally->getClassLoader->Collections->unmodifiableMap->getConnectorServerAsService->if->return->if->e->new->MalformedURLException->if->throw->else->throw->EnvHelp->initCause->Collections->unmodifiableMap->return->provider->newJMXConnectorServer
JMXConnectorServerMBean#start():::Activates the connector server, that is, starts listening for client connections:::
JMXConnectorServerMBean#stop():::Deactivates the connector server, that is, stops listening for client connections:::
JMXConnectorServerMBean#isActive():::Determines whether the connector server is active:::
JMXConnectorServerMBean#setMBeanServerForwarder(MBeanServerForwarder):::Inserts an object that intercepts requests for the MBean server that arrive through this connector server:::
JMXConnectorServerMBean#getConnectionIds():::The list of IDs for currently-open connections to this connector server.:::
JMXConnectorServerMBean#getAddress():::The address of this connector server.  The address returned may not be the exact original JMXServiceURL that was supplied when creating the connector server, since the original address may not always be complete:::
JMXConnectorServerMBean#getAttributes():::The attributes for this connector server.:::
JMXConnectorServerMBean#toJMXConnector(Map):::Returns a client stub for this connector server:::
JMXConnectorServerProvider#newJMXConnectorServer(JMXServiceURL, Map, MBeanServer):::Creates a new connector server at the given address:::
JMXPrincipal#getName():::Returns the name of this principal.:::return
JMXPrincipal#toString():::Returns a string representation of this JMXPrincipal.:::return
JMXPrincipal#equals(Object):::Compares the specified Object with this JMXPrincipal for equality:::if->return->if->return->if->return->that->return->this->getName->that->getName->equals
JMXPrincipal#hashCode():::Returns a hash code for this JMXPrincipal.:::return->name->hashCode
JMXServiceURL#getProtocol():::The protocol part of the Service URL.:::return
JMXServiceURL#getHost():::The host part of the Service URL:::return
JMXServiceURL#getPort():::The port of the Service URL:::return
JMXServiceURL#getURLPath():::The URL Path part of the Service URL:::return
JMXServiceURL#toString():::The string representation of this Service URL:::if->return->buf->new->StringBuilder->buf->getProtocol->append->append->getHost->getHost->if->isNumericIPv6Address->buf->append->append->append->else->buf->append->getPort->getPort->if->buf->append->append->buf->getURLPath->append->buf->toString->return
JMXServiceURL#equals(Object):::Indicates whether some other object is equal to this one:::if->return->u->return->u->getProtocol->getProtocol->equalsIgnoreCase->u->getHost->getHost->equalsIgnoreCase->u->getPort->getPort->u->getURLPath->getURLPath->equals
MBeanServerForwarder#getMBeanServer():::Returns the MBeanServer object to which requests will be forwarded.:::
MBeanServerForwarder#setMBeanServer(MBeanServer):::Sets the MBeanServer object to which requests will be forwarded after treatment by this object.:::
NotificationResult#getEarliestSequenceNumber():::Returns the sequence number of the earliest notification still in the buffer.:::return
NotificationResult#getNextSequenceNumber():::Returns the sequence number of the next notification available for querying.:::return
NotificationResult#getTargetedNotifications():::Returns the notifications resulting from the query, and the listeners they correspond to.:::return->targetedNotifications->clone
NotificationResult#toString():::Returns a string representation of the object:::return->getEarliestSequenceNumber->getNextSequenceNumber->getTargetedNotifications
TargetedNotification#getNotification():::The emitted notification.:::return
TargetedNotification#getListenerID():::The ID of the listener to which the notification is    targeted.:::return
TargetedNotification#toString():::Returns a textual representation of this Targeted Notification.:::return

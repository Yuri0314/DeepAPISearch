PEGraphDecoder_OptionDescriptors#get(String)::: graph decoder_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
PEGraphDecoder_OptionDescriptors#iterator()::: graph decoder_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
Plugin_ConstantStringIndexOfSnippets_byteArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ constant string index of snippets_byte array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->byteArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ConstantStringIndexOfSnippets_byteArrayBaseOffset#getSource()::: plugin_ constant string index of snippets_byte array base offset get source:::return
Plugin_ConstantStringIndexOfSnippets_charArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ constant string index of snippets_char array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ConstantStringIndexOfSnippets_charArrayBaseOffset#getSource()::: plugin_ constant string index of snippets_char array base offset get source:::return
PluginFactory_ConstantStringIndexOfSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ constant string index of snippets register plugins:::plugins->new->Plugin_ConstantStringIndexOfSnippets_byteArrayBaseOffset->register->plugins->new->Plugin_ConstantStringIndexOfSnippets_charArrayBaseOffset->register
Plugin_ReplacementsUtil_arrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ replacements util_array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->result->arrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ReplacementsUtil_arrayIndexScale#getSource()::: plugin_ replacements util_array index scale get source:::return
Plugin_ReplacementsUtil_getArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ replacements util_get array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->result->getArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ReplacementsUtil_getArrayBaseOffset#getSource()::: plugin_ replacements util_get array base offset get source:::return
PluginFactory_ReplacementsUtil#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ replacements util register plugins:::plugins->new->Plugin_ReplacementsUtil_arrayIndexScale->register->plugins->new->Plugin_ReplacementsUtil_getArrayBaseOffset->register
Plugin_SnippetCounterNode_add#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ snippet counter node_add execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->node->new->org.graalvm.compiler.replacements.SnippetCounterNode->b->add->return
Plugin_SnippetCounterNode_add#getSource()::: plugin_ snippet counter node_add get source:::return
Plugin_SnippetCounterSnippets_countOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ snippet counter snippets_count offset execute:::result->countOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_SnippetCounterSnippets_countOffset#getSource()::: plugin_ snippet counter snippets_count offset get source:::return
PluginFactory_SnippetCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ snippet counter node register plugins:::plugins->new->Plugin_SnippetCounterNode_add->register->plugins->new->Plugin_SnippetCounterSnippets_countOffset->register
SnippetTemplate_OptionDescriptors#get(String)::: snippet template_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
SnippetTemplate_OptionDescriptors#iterator()::: snippet template_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
ArraysSubstitutions#equals(boolean[], boolean[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(byte[], byte[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(char[], char[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(short[], short[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(int[], int[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(long[], long[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(float[], float[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraysSubstitutions#equals(double[], double[])::: arrays substitutions equals:::if->return->if->return->return->ArrayEqualsNode->equals
ArraySubstitutions#getLength(Object)::: array substitutions get length:::if->array->getClass->isArray->DeoptimizeNode->deopt->return->ArrayLengthNode->arrayLength
BoxingSnippets#booleanValueOf(boolean, SnippetCounter)::: boxing snippets boolean value of:::valueOfCounter->inc->return->PiNode->Boolean->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#byteValueOf(byte, SnippetCounter)::: boxing snippets byte value of:::valueOfCounter->inc->return->PiNode->Byte->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#charValueOf(char, SnippetCounter)::: boxing snippets char value of:::valueOfCounter->inc->return->PiNode->Character->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#doubleValueOf(double, SnippetCounter)::: boxing snippets double value of:::valueOfCounter->inc->return->PiNode->Double->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#floatValueOf(float, SnippetCounter)::: boxing snippets float value of:::valueOfCounter->inc->return->PiNode->Float->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#intValueOf(int, SnippetCounter)::: boxing snippets int value of:::valueOfCounter->inc->return->PiNode->Integer->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#longValueOf(long, SnippetCounter)::: boxing snippets long value of:::valueOfCounter->inc->return->PiNode->Long->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#shortValueOf(short, SnippetCounter)::: boxing snippets short value of:::valueOfCounter->inc->return->PiNode->Short->valueOf->piCastToSnippetReplaceeStamp
BoxingSnippets#booleanValue(Boolean, SnippetCounter)::: boxing snippets boolean value:::valueCounter->inc->return->value->booleanValue
BoxingSnippets#byteValue(Byte, SnippetCounter)::: boxing snippets byte value:::valueCounter->inc->return->value->byteValue
BoxingSnippets#charValue(Character, SnippetCounter)::: boxing snippets char value:::valueCounter->inc->return->value->charValue
BoxingSnippets#doubleValue(Double, SnippetCounter)::: boxing snippets double value:::valueCounter->inc->return->value->doubleValue
BoxingSnippets#floatValue(Float, SnippetCounter)::: boxing snippets float value:::valueCounter->inc->return->value->floatValue
BoxingSnippets#intValue(Integer, SnippetCounter)::: boxing snippets int value:::valueCounter->inc->return->value->intValue
BoxingSnippets#longValue(Long, SnippetCounter)::: boxing snippets long value:::valueCounter->inc->return->value->longValue
BoxingSnippets#shortValue(Short, SnippetCounter)::: boxing snippets short value:::valueCounter->inc->return->value->shortValue
BoxingSnippets#canonicalizeBoxing(BoxNode, MetaAccessProvider, ConstantReflectionProvider)::: boxing snippets canonicalize boxing:::value->box->getValue->if->value->isConstant->sourceConstant->value->asJavaConstant->if->sourceConstant->getJavaKind->box->getBoxingKind->sourceConstant->getJavaKind->isNumericInteger->switch->box->getBoxingKind->JavaConstant->sourceConstant->asLong->forBoolean->break->JavaConstant->sourceConstant->asLong->forByte->break->JavaConstant->sourceConstant->asLong->forChar->break->JavaConstant->sourceConstant->asLong->forShort->break->boxedConstant->constantReflection->boxPrimitive->if->sourceConstant->getJavaKind->box->getBoxingKind->return->ConstantNode->box->graph->forConstant->return
BoxingSnippets.Templates#lower(BoxNode, LoweringTool)::: templates lower:::canonical->providers->getMetaAccess->providers->getConstantReflection->canonicalizeBoxing->if->ImmutableCode->box->getOptions->getValue->box->graph->replaceFixedWithFloating->else->args->boxSnippets->box->getBoxingKind->get->box->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->box->getValue->add->args->addConst->template->template->box->getDebug->box->graph->log->template->providers->getMetaAccess->instantiate
BoxingSnippets.Templates#lower(UnboxNode, LoweringTool)::: templates lower:::args->unboxSnippets->unbox->getBoxingKind->get->unbox->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->unbox->getValue->add->args->addConst->template->template->unbox->getDebug->unbox->graph->log->template->providers->getMetaAccess->instantiate
CachingPEGraphDecoder#createGraphBuilderPhaseInstance(IntrinsicContext)::: caching graph decoder create graph builder phase instance:::return->new->GraphBuilderPhase.Instance
CachingPEGraphDecoder#createGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean)::: caching graph decoder create graph:::graphToEncode->if->UseEncodedGraphs->getValue->providers->getReplacements->getMethodSubstitution->else->buildGraph->try->scope->debug->scope->new->ConvertDeoptimizeToGuardPhase->apply->catch->throw->debug->handle->finally->encodedGraph->GraphEncoder->encodeSingleGraph->graphCache->put->return
CachingPEGraphDecoder#buildGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean)::: caching graph decoder build graph:::graphToEncode->new->StructuredGraph.Builder->useProfilingInfo->graphBuilderConfig->trackNodeSourcePosition->trackNodeSourcePosition->plugin->providers->getMetaAccess->getSubstitute->method->setIsSubstitution->graph->getCancellable->cancellable->build->try->scope->debug->scope->initialIntrinsicContext->plugin->providers->getMetaAccess->getSubstitute->new->IntrinsicContext->graphBuilderPhaseInstance->createGraphBuilderPhaseInstance->graphBuilderPhaseInstance->apply->new->CanonicalizerPhase->apply->if->postParsingPhase->apply->catch->throw->debug->handle->finally->return
CachingPEGraphDecoder#lookupEncodedGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean, boolean)::: caching graph decoder lookup encoded graph:::result->graphCache->get->if->method->hasBytecodes->createGraph->return
ConstantBindingParameterPlugin#interceptParameter(GraphBuilderTool, int, StampPair)::: constant binding parameter plugin intercept parameter:::if->arg->if->constantNode->if->otherCon->if->otherCon->graph->b->getGraph->ConstantNode->stamp->getTrustedStamp->otherCon->getValue->otherCon->getStableDimension->otherCon->isDefaultStable->forConstant->else->else->if->ConstantNode->stamp->getTrustedStamp->forConstant->else->ConstantNode->snippetReflection->stamp->getTrustedStamp->getStackKind->forBoxed->forConstant->return->return
ConstantStringIndexOfSnippets.Templates#lower(SnippetLowerableMemoryNode, LoweringTool)::: templates lower:::graph->stringIndexOf->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->stringIndexOf->getArgument->add->args->stringIndexOf->getArgument->add->args->stringIndexOf->getArgument->add->args->stringIndexOf->getArgument->addConst->args->stringIndexOf->getArgument->add->args->stringIndexOf->getArgument->add->args->stringIndexOf->getArgument->add->targetCharArray->snippetReflection->stringIndexOf->getArgument->asJavaConstant->asObject->args->md2->addConst->args->computeCache->addConst->template->providers->getMetaAccess->instantiate
ConstantStringIndexOfSnippets.Templates#lowerLatin1(SnippetLowerableMemoryNode, LoweringTool)::: templates lower latin1:::graph->latin1IndexOf->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->latin1IndexOf->getArgument->add->args->latin1IndexOf->getArgument->add->args->latin1IndexOf->getArgument->addConst->args->latin1IndexOf->getArgument->add->args->latin1IndexOf->getArgument->add->targetByteArray->snippetReflection->latin1IndexOf->getArgument->asJavaConstant->asObject->args->md2->addConst->args->computeCache->addConst->template->providers->getMetaAccess->instantiate
ConstantStringIndexOfSnippets.Templates#lowerUTF16(SnippetLowerableMemoryNode, LoweringTool)::: templates lower f16:::graph->utf16IndexOf->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->utf16IndexOf->getArgument->add->args->utf16IndexOf->getArgument->add->args->utf16IndexOf->getArgument->addConst->args->utf16IndexOf->getArgument->add->args->utf16IndexOf->getArgument->add->targetByteArray->snippetReflection->utf16IndexOf->getArgument->asJavaConstant->asObject->args->tool->getMetaAccess->md2Utf16->addConst->args->tool->getMetaAccess->computeCacheUtf16->addConst->template->providers->getMetaAccess->instantiate
ConstantStringIndexOfSnippets#md2(char[])::: constant string index of snippets md2:::c->if->return->lastChar->md2->for->i->return
ConstantStringIndexOfSnippets#computeCache(char[])::: constant string index of snippets compute cache:::c->cache->i->for->return
ConstantStringIndexOfSnippets#md2(byte[])::: constant string index of snippets md2:::c->if->return->lastByte->md2->for->i->return
ConstantStringIndexOfSnippets#computeCache(byte[])::: constant string index of snippets compute cache:::c->cache->i->for->return
ConstantStringIndexOfSnippets#md2Utf16(MetaAccessProvider, byte[])::: constant string index of snippets md2 utf16:::c->if->return->base->metaAccess->getArrayBaseOffset->lastChar->UNSAFE->getChar->md2->for->i->return
ConstantStringIndexOfSnippets#computeCacheUtf16(MetaAccessProvider, byte[])::: constant string index of snippets compute cache utf16:::c->cache->i->base->metaAccess->getArrayBaseOffset->for->return
ConstantStringIndexOfSnippets#byteArrayBaseOffset(MetaAccessProvider)::: constant string index of snippets byte array base offset:::return->metaAccess->getArrayBaseOffset
ConstantStringIndexOfSnippets#charArrayBaseOffset(MetaAccessProvider)::: constant string index of snippets char array base offset:::return->metaAccess->getArrayBaseOffset
ConstantStringIndexOfSnippets#indexOfConstant(char[], int, int, char[], int, int, int, int, long)::: constant string index of snippets index of constant:::fromIndex->if->return->if->if->return->targetCountLess1->sourceEnd->base->charArrayBaseOffset->lastChar->UNSAFE->getChar->for->i->return
ConstantStringIndexOfSnippets#utf16IndexOfConstant(byte[], int, byte[], int, int, int, long)::: constant string index of snippets utf16 index of constant:::fromIndex->if->return->if->if->return->targetCountLess1->sourceEnd->base->byteArrayBaseOffset->lastChar->UNSAFE->getChar->for->i->return
ConstantStringIndexOfSnippets#latin1IndexOfConstant(byte[], int, byte[], int, int, int, long)::: constant string index of snippets latin1 index of constant:::fromIndex->if->return->if->if->return->targetCountLess1->sourceEnd->base->byteArrayBaseOffset->lastByte->UNSAFE->getByte->for->i->return
DefaultJavaLoweringProvider#initialize(OptionValues, Iterable, SnippetCounter.Group.Factory, Providers, SnippetReflectionProvider)::: default java lowering provider initialize:::new->BoxingSnippets.Templates->new->ConstantStringIndexOfSnippets.Templates->providers->getReplacements->new->SnippetCounterNode.SnippetCounterSnippets.Templates->registerSnippetTemplateCache
DefaultJavaLoweringProvider#getTarget()::: default java lowering provider get target:::return
DefaultJavaLoweringProvider#getMetaAccess()::: default java lowering provider get meta access:::return
DefaultJavaLoweringProvider#lower(Node, LoweringTool)::: default java lowering provider lower:::graph->n->graph->try->context->n->withNodeSourcePosition->if->lowerLoadFieldNode->else->if->lowerStoreFieldNode->else->if->lowerLoadIndexedNode->else->if->lowerStoreIndexedNode->else->if->lowerIndexAddressNode->else->if->lowerArrayLengthNode->else->if->lowerLoadHubNode->else->if->lowerLoadArrayComponentHubNode->else->if->lowerMonitorEnterNode->else->if->lowerCompareAndSwapNode->else->if->lowerCompareAndExchangeNode->else->if->lowerAtomicReadAndWriteNode->else->if->lowerUnsafeLoadNode->else->if->lowerUnsafeMemoryLoadNode->else->if->lowerUnsafeStoreNode->else->if->lowerUnsafeMemoryStoreNode->else->if->lowerJavaReadNode->else->if->lowerJavaWriteNode->else->if->lowerCommitAllocationNode->else->if->boxingSnippets->lower->else->if->boxingSnippets->lower->else->if->lowerVerifyHeap->else->if->lowerUnaryMath->else->if->lowerBinaryMath->else->if->lowerIndexOf->else->if->lowerLatin1IndexOf->else->if->lowerUTF16IndexOf->else->if->lowerSecondHalf->else->throw->GraalError->shouldNotReachHere->catch->finally
DefaultJavaLoweringProvider#lowerSecondHalf(UnpackEndianHalfNode)::: default java lowering provider lower second half:::byteOrder->getByteOrder->n->lower
DefaultJavaLoweringProvider#lowerIndexOf(StringIndexOfNode)::: default java lowering provider lower index of:::if->n->getArgument->isConstant->lowering->new->SnippetLowering->snippetLower->NamedLocationIdentity->getArrayLocation->n->stamp->n->toArgumentArray->new->SnippetLowerableMemoryNode->n->graph->add->n->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerLatin1IndexOf(StringLatin1IndexOfNode)::: default java lowering provider lower latin1 index of:::if->n->getArgument->isConstant->lowering->new->SnippetLowering->snippetLower->NamedLocationIdentity->getArrayLocation->n->stamp->n->toArgumentArray->new->SnippetLowerableMemoryNode->n->graph->add->n->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerUTF16IndexOf(StringUTF16IndexOfNode)::: default java lowering provider lower f16 index of:::if->n->getArgument->isConstant->lowering->new->SnippetLowering->snippetLower->NamedLocationIdentity->getArrayLocation->n->stamp->n->toArgumentArray->new->SnippetLowerableMemoryNode->n->graph->add->n->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerBinaryMath(BinaryMathIntrinsicNode, LoweringTool)::: default java lowering provider lower binary math:::if->tool->getLoweringStage->return->method->math->graph->method->if->if->method->getAnnotation->return->if->method->getName->math->getOperation->name->equalsIgnoreCase->tool->getMetaAccess->lookupJavaType->method->getDeclaringClass->equals->return->graph->math->graph->call->graph->math->getOperation->math->getX->math->getY->new->ForeignCallNode->add->graph->tool->lastFixedNode->addAfterFixed->math->replaceAtUsages
DefaultJavaLoweringProvider#lowerUnaryMath(UnaryMathIntrinsicNode, LoweringTool)::: default java lowering provider lower unary math:::if->tool->getLoweringStage->return->method->math->graph->method->if->if->method->getName->math->getOperation->name->equalsIgnoreCase->tool->getMetaAccess->lookupJavaType->method->getDeclaringClass->equals->return->graph->math->graph->call->math->graph->math->getOperation->math->getValue->new->ForeignCallNode->add->graph->tool->lastFixedNode->addAfterFixed->math->replaceAtUsages
DefaultJavaLoweringProvider#lowerVerifyHeap(VerifyHeapNode)::: default java lowering provider lower verify heap:::GraphUtil->removeFixedWithUnusedInputs
DefaultJavaLoweringProvider#createOffsetAddress(StructuredGraph, ValueNode, long)::: default java lowering provider create offset address:::o->ConstantNode->forIntegerKind->return->graph->new->OffsetAddressNode->unique
DefaultJavaLoweringProvider#createFieldAddress(StructuredGraph, ValueNode, ResolvedJavaField)::: default java lowering provider create field address:::offset->fieldOffset->if->return->createOffsetAddress->else->return
DefaultJavaLoweringProvider#getStorageKind(ResolvedJavaField)::: default java lowering provider get storage kind:::
DefaultJavaLoweringProvider#lowerLoadFieldNode(LoadFieldNode, LoweringTool)::: default java lowering provider lower load field node:::graph->loadField->graph->field->loadField->field->object->loadField->isStatic->staticFieldBase->loadField->object->createNullCheckedValue->loadStamp->loadField->stamp->getStorageKind->loadStamp->address->createFieldAddress->memoryRead->graph->fieldLocationIdentity->fieldLoadBarrierType->new->ReadNode->add->readValue->getStorageKind->implicitLoadConvert->loadField->replaceAtUsages->graph->replaceFixed->if->loadField->isVolatile->preMembar->graph->new->MembarNode->add->graph->addBeforeFixed->postMembar->graph->new->MembarNode->add->graph->addAfterFixed
DefaultJavaLoweringProvider#lowerStoreFieldNode(StoreFieldNode, LoweringTool)::: default java lowering provider lower store field node:::graph->storeField->graph->field->storeField->field->object->storeField->isStatic->staticFieldBase->storeField->object->createNullCheckedValue->value->storeField->field->getStorageKind->storeField->value->implicitStoreConvert->address->createFieldAddress->memoryWrite->graph->fieldLocationIdentity->storeField->field->fieldStoreBarrierType->new->WriteNode->add->memoryWrite->storeField->stateAfter->setStateAfter->graph->replaceFixedWithFixed->if->storeField->isVolatile->preMembar->graph->new->MembarNode->add->graph->addBeforeFixed->postMembar->graph->new->MembarNode->add->graph->addAfterFixed
DefaultJavaLoweringProvider#createArrayIndexAddress(StructuredGraph, ValueNode, JavaKind, ValueNode, GuardingNode):::Create a PiNode on the index proving that the index is positive:::positiveIndex->graph->PiNode->boundsCheck->asNode->create->maybeAddOrUnique->return->createArrayAddress
DefaultJavaLoweringProvider#createArrayAddress(StructuredGraph, ValueNode, JavaKind, ValueNode)::: default java lowering provider create array address:::return->createArrayAddress
DefaultJavaLoweringProvider#createArrayAddress(StructuredGraph, ValueNode, JavaKind, JavaKind, ValueNode)::: default java lowering provider create array address:::wordIndex->if->graph->new->SignExtendNode->unique->else->shift->CodeUtil->metaAccess->getArrayIndexScale->log2->scaledIndex->graph->ConstantNode->forInt->new->LeftShiftNode->unique->base->metaAccess->getArrayBaseOffset->offset->graph->ConstantNode->forIntegerKind->new->AddNode->unique->return->graph->new->OffsetAddressNode->unique
DefaultJavaLoweringProvider#lowerIndexAddressNode(IndexAddressNode)::: default java lowering provider lower index address node:::lowered->indexAddress->graph->indexAddress->getArray->indexAddress->getArrayKind->indexAddress->getElementKind->indexAddress->getIndex->createArrayAddress->indexAddress->replaceAndDelete
DefaultJavaLoweringProvider#lowerLoadIndexedNode(LoadIndexedNode, LoweringTool)::: default java lowering provider lower load indexed node:::graph->loadIndexed->graph->array->loadIndexed->array->createNullCheckedValue->elementKind->loadIndexed->elementKind->loadStamp->loadIndexed->stamp->loadStamp->boundsCheck->getBoundsCheck->index->loadIndexed->index->if->UseIndexMasking->graph->getOptions->getValue->proxyIndex->address->createArrayIndexAddress->memoryRead->graph->NamedLocationIdentity->getArrayLocation->new->ReadNode->add->memoryRead->setGuard->readValue->implicitLoadConvert->loadIndexed->replaceAtUsages->graph->replaceFixed
DefaultJavaLoweringProvider#lowerStoreIndexedNode(StoreIndexedNode, LoweringTool)::: default java lowering provider lower store indexed node:::graph->storeIndexed->graph->value->storeIndexed->value->array->storeIndexed->array->this->createNullCheckedValue->boundsCheck->getBoundsCheck->elementKind->storeIndexed->elementKind->condition->if->storeIndexed->getStoreCheck->StampTool->isPointerAlwaysNull->arrayType->StampTool->typeReferenceOrNull->if->arrayType->isExact->elementType->arrayType->getType->getComponentType->if->elementType->isJavaLangObject->typeReference->TypeReference->storeIndexed->graph->getAssumptions->createTrusted->typeTest->graph->InstanceOfNode->create->addOrUniqueWithInputs->LogicNode->graph->IsNullNode->create->unique->or->else->arrayClass->createReadHub->componentHub->createReadArrayComponentHub->typeTest->graph->InstanceOfDynamicNode->graph->getAssumptions->tool->getConstantReflection->create->unique->LogicNode->graph->IsNullNode->create->unique->or->address->storeIndexed->index->createArrayIndexAddress->memoryWrite->graph->NamedLocationIdentity->getArrayLocation->implicitStoreConvert->storeIndexed->elementKind->arrayStoreBarrierType->new->WriteNode->add->memoryWrite->setGuard->if->tool->createGuard->memoryWrite->storeIndexed->stateAfter->setStateAfter->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerArrayLengthNode(ArrayLengthNode, LoweringTool)::: default java lowering provider lower array length node:::arrayLengthNode->arrayLengthNode->array->createReadArrayLength->replaceAtUsages->graph->arrayLengthNode->graph->graph->removeFixed
DefaultJavaLoweringProvider#createReadArrayLength(ValueNode, FixedNode, LoweringTool):::Creates a read node that read the array length and is guarded by a null-check:::graph->array->graph->canonicalArray->this->skipPiWhileNonNull->createNullCheckedValue->address->arrayLengthOffset->createOffsetAddress->readArrayLength->graph->StampFactory->positiveInt->new->ReadNode->add->graph->addBeforeFixed->return
DefaultJavaLoweringProvider#lowerLoadHubNode(LoadHubNode, LoweringTool)::: default java lowering provider lower load hub node:::graph->loadHub->graph->if->tool->getLoweringStage->return->if->graph->getGuardsStage->allowsFloatingGuards->return->hub->loadHub->getValue->createReadHub->loadHub->replaceAtUsagesAndDelete
DefaultJavaLoweringProvider#lowerLoadArrayComponentHubNode(LoadArrayComponentHubNode)::: default java lowering provider lower load array component hub node:::graph->loadHub->graph->hub->loadHub->getValue->createReadArrayComponentHub->graph->replaceFixed
DefaultJavaLoweringProvider#lowerMonitorEnterNode(MonitorEnterNode, LoweringTool, StructuredGraph)::: default java lowering provider lower monitor enter node:::object->monitorEnter->object->createNullCheckedValue->hub->graph->LoadHubNode->tool->getStampProvider->tool->getMetaAccess->tool->getConstantReflection->create->addOrUnique->rawMonitorEnter->graph->monitorEnter->getMonitorId->new->RawMonitorEnterNode->add->rawMonitorEnter->monitorEnter->stateBefore->setStateBefore->rawMonitorEnter->monitorEnter->stateAfter->setStateAfter->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerCompareAndSwapNode(UnsafeCompareAndSwapNode)::: default java lowering provider lower compare and swap node:::graph->cas->graph->valueKind->cas->getValueKind->expectedValue->cas->expected->implicitStoreConvert->newValue->cas->newValue->implicitStoreConvert->address->graph->cas->object->cas->offset->new->OffsetAddressNode->unique->barrierType->cas->object->guessStoreBarrierType->atomicNode->graph->cas->getLocationIdentity->new->LogicCompareAndSwapNode->add->atomicNode->cas->stateAfter->setStateAfter->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerCompareAndExchangeNode(UnsafeCompareAndExchangeNode)::: default java lowering provider lower compare and exchange node:::graph->cas->graph->valueKind->cas->getValueKind->expectedValue->cas->expected->implicitStoreConvert->newValue->cas->newValue->implicitStoreConvert->address->graph->cas->object->cas->offset->new->OffsetAddressNode->unique->barrierType->cas->object->guessStoreBarrierType->atomicNode->graph->cas->getLocationIdentity->new->ValueCompareAndSwapNode->add->coercedNode->implicitLoadConvert->atomicNode->cas->stateAfter->setStateAfter->cas->replaceAtUsages->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerAtomicReadAndWriteNode(AtomicReadAndWriteNode)::: default java lowering provider lower atomic read and write node:::graph->n->graph->valueKind->n->getValueKind->newValue->n->newValue->implicitStoreConvert->address->graph->n->object->n->offset->new->OffsetAddressNode->unique->barrierType->n->object->n->newValue->guessStoreBarrierType->lirAccessKind->LIRKind->fromJavaKind->memoryRead->graph->n->getLocationIdentity->new->LoweredAtomicReadAndWriteNode->add->memoryRead->n->stateAfter->setStateAfter->readValue->implicitLoadConvert->n->stateAfter->replaceFirstInput->n->replaceAtUsages->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerUnsafeLoadNode(RawLoadNode, LoweringTool)::: default java lowering provider lower unsafe load node:::graph->load->graph->if->guardedLoad->guard->guardedLoad->getGuard->if->memoryRead->createUnsafeRead->memoryRead->setForceFixed->graph->replaceFixedWithFixed->else->memoryRead->createUnsafeRead->graph->replaceFixedWithFixed->else->memoryRead->createUnsafeRead->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#createUnsafeAddress(StructuredGraph, ValueNode, ValueNode)::: default java lowering provider create unsafe address:::if->object->isConstant->object->asConstant->isDefaultForKind->return->graph->OffsetAddressNode->create->addOrUniqueWithInputs->else->return->graph->new->OffsetAddressNode->unique
DefaultJavaLoweringProvider#createUnsafeRead(StructuredGraph, RawLoadNode, GuardingNode)::: default java lowering provider create unsafe read:::compressible->load->accessKind->readKind->load->accessKind->loadStamp->load->stamp->loadStamp->address->load->object->load->offset->createUnsafeAddress->memoryRead->graph->load->getLocationIdentity->new->ReadNode->add->if->memoryRead->setForceFixed->else->memoryRead->setGuard->readValue->implicitLoadConvert->performBooleanCoercionIfNecessary->load->replaceAtUsages->return
DefaultJavaLoweringProvider#lowerUnsafeMemoryLoadNode(UnsafeMemoryLoadNode)::: default java lowering provider lower unsafe memory load node:::graph->load->graph->readKind->load->getKind->loadStamp->load->stamp->loadStamp->address->graph->OffsetAddressNode->load->getAddress->create->addOrUniqueWithInputs->memoryRead->graph->load->getLocationIdentity->new->ReadNode->add->memoryRead->setForceFixed->readValue->implicitLoadConvert->performBooleanCoercionIfNecessary->load->replaceAtUsages->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#performBooleanCoercionIfNecessary(ValueNode, JavaKind)::: default java lowering provider perform boolean coercion if necessary:::if->graph->readValue->graph->eq->graph->ConstantNode->forInt->new->IntegerEqualsNode->addOrUnique->return->graph->ConstantNode->forBoolean->ConstantNode->forBoolean->new->ConditionalNode->addOrUnique->return
DefaultJavaLoweringProvider#lowerUnsafeStoreNode(RawStoreNode)::: default java lowering provider lower unsafe store node:::graph->store->graph->compressible->store->value->getStackKind->valueKind->store->accessKind->value->store->value->implicitStoreConvert->address->store->object->store->offset->createUnsafeAddress->write->graph->store->getLocationIdentity->unsafeStoreBarrierType->new->WriteNode->add->write->store->stateAfter->setStateAfter->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerUnsafeMemoryStoreNode(UnsafeMemoryStoreNode)::: default java lowering provider lower unsafe memory store node:::graph->store->graph->valueKind->store->getKind->value->store->getValue->implicitStoreConvert->address->graph->OffsetAddressNode->store->getAddress->create->addOrUniqueWithInputs->write->graph->store->getLocationIdentity->new->WriteNode->add->write->store->stateAfter->setStateAfter->graph->replaceFixedWithFixed
DefaultJavaLoweringProvider#lowerJavaReadNode(JavaReadNode)::: default java lowering provider lower java read node:::graph->read->graph->valueKind->read->getReadKind->loadStamp->read->stamp->read->isCompressible->loadStamp->memoryRead->graph->read->getAddress->read->getLocationIdentity->read->getBarrierType->new->ReadNode->add->guard->read->getGuard->readValue->read->isCompressible->implicitLoadConvert->if->memoryRead->setForceFixed->else->memoryRead->setGuard->read->replaceAtUsages->graph->replaceFixed
DefaultJavaLoweringProvider#lowerJavaWriteNode(JavaWriteNode)::: default java lowering provider lower java write node:::graph->write->graph->value->write->getWriteKind->write->value->write->isCompressible->implicitStoreConvert->memoryWrite->graph->write->getAddress->write->getLocationIdentity->write->getBarrierType->new->WriteNode->add->memoryWrite->write->stateAfter->setStateAfter->graph->replaceFixedWithFixed->memoryWrite->write->getGuard->setGuard
DefaultJavaLoweringProvider#lowerCommitAllocationNode(CommitAllocationNode, LoweringTool)::: default java lowering provider lower commit allocation node:::graph->commit->graph->if->graph->getGuardsStage->recursiveLowerings->new->ArrayList<>->allocations->commit->getVirtualObjects->size->new->ValueNodeArr->omittedValues->new->BitSet->valuePos->for->objIndex->commit->getVirtualObjects->size->for->objIndex->commit->getVirtualObjects->size->finishAllocatedObjects->graph->removeFixed->foreach->recursiveLowering->lower
DefaultJavaLoweringProvider#createNewInstanceFromVirtual(VirtualObjectNode)::: default java lowering provider create new instance from virtual:::return->virtual->type->new->NewInstanceNode
DefaultJavaLoweringProvider#createNewArrayFromVirtual(VirtualObjectNode, ValueNode)::: default java lowering provider create new array from virtual:::return->componentType->new->NewArrayNode
DefaultJavaLoweringProvider#finishAllocatedObjects(LoweringTool, CommitAllocationNode, ValueNode[])::: default java lowering provider finish allocated objects:::graph->commit->graph->for->objIndex->commit->getVirtualObjects->size->enters->for->objIndex->commit->getVirtualObjects->size->foreach->commit->usages->snapshot->if->addObject->index->commit->getVirtualObjects->addObject->getVirtualObject->indexOf->addObject->replaceAtUsagesAndDelete->else->commit->enters->enters->size->get->replaceAtUsages->if->foreach->enter->lower->insertAllocationBarrier
DefaultJavaLoweringProvider#insertAllocationBarrier(CommitAllocationNode, StructuredGraph):::Insert the required MemoryBarriers#STORE_STORE barrier for an allocation and also include the MemoryBarriers#LOAD_STORE required for final fields if any final fields are being written, as if FinalFieldBarrierNode were emitted.:::barrier->foreach->commit->getVirtualObjects->foreach->vobj->type->getInstanceFields->if->field->isFinal->break->graph->graph->LocationIdentity->init->new->MembarNode->add->addAfterFixed
DefaultJavaLoweringProvider#fieldLoadBarrierType(ResolvedJavaField)::: default java lowering provider field load barrier type:::return
DefaultJavaLoweringProvider#fieldStoreBarrierType(ResolvedJavaField)::: default java lowering provider field store barrier type:::if->getStorageKind->return->return
DefaultJavaLoweringProvider#arrayStoreBarrierType(JavaKind)::: default java lowering provider array store barrier type:::if->return->return
DefaultJavaLoweringProvider#fieldInitializationBarrier(JavaKind)::: default java lowering provider field initialization barrier:::return
DefaultJavaLoweringProvider#arrayInitializationBarrier(JavaKind)::: default java lowering provider array initialization barrier:::return
DefaultJavaLoweringProvider#unsafeStoreBarrierType(RawStoreNode)::: default java lowering provider unsafe store barrier type:::if->store->needsBarrier->return->return->store->object->store->value->guessStoreBarrierType
DefaultJavaLoweringProvider#guessStoreBarrierType(ValueNode, ValueNode)::: default java lowering provider guess store barrier type:::if->value->getStackKind->object->getStackKind->type->StampTool->typeOrNull->if->type->isArray->return->else->if->type->isAssignableFrom->return->else->return->return
DefaultJavaLoweringProvider#fieldOffset(ResolvedJavaField)::: default java lowering provider field offset:::
DefaultJavaLoweringProvider#fieldLocationIdentity(ResolvedJavaField)::: default java lowering provider field location identity:::return->new->FieldLocationIdentity
DefaultJavaLoweringProvider#staticFieldBase(StructuredGraph, ResolvedJavaField)::: default java lowering provider static field base:::
DefaultJavaLoweringProvider#arrayLengthOffset()::: default java lowering provider array length offset:::
DefaultJavaLoweringProvider#loadStamp(Stamp, JavaKind)::: default java lowering provider load stamp:::return->loadStamp
DefaultJavaLoweringProvider#useCompressedOops(JavaKind, boolean)::: default java lowering provider use compressed oops:::return
DefaultJavaLoweringProvider#loadCompressedStamp(ObjectStamp)::: default java lowering provider load compressed stamp:::
DefaultJavaLoweringProvider#loadStamp(Stamp, JavaKind, boolean)::: default java lowering provider load stamp:::if->useCompressedOops->return->loadCompressedStamp->switch->return->getNarrow->foldStamp->return->getNarrow->foldStamp->return
DefaultJavaLoweringProvider#implicitLoadConvert(StructuredGraph, JavaKind, ValueNode)::: default java lowering provider implicit load convert:::return->implicitLoadConvert
DefaultJavaLoweringProvider#implicitLoadConvert(JavaKind, ValueNode)::: default java lowering provider implicit load convert:::return->implicitLoadConvert
DefaultJavaLoweringProvider#implicitLoadConvert(StructuredGraph, JavaKind, ValueNode, boolean)::: default java lowering provider implicit load convert:::ret->implicitLoadConvert->if->ret->isAlive->graph->addOrUnique->return
DefaultJavaLoweringProvider#newCompressionNode(CompressionOp, ValueNode)::: default java lowering provider new compression node:::
DefaultJavaLoweringProvider#implicitLoadConvert(JavaKind, ValueNode, boolean)::: default java lowering provider implicit load convert:::if->useCompressedOops->return->newCompressionNode->switch->return->new->SignExtendNode->return->new->ZeroExtendNode->return
DefaultJavaLoweringProvider#implicitStoreConvert(StructuredGraph, JavaKind, ValueNode)::: default java lowering provider implicit store convert:::return->implicitStoreConvert
DefaultJavaLoweringProvider#implicitStoreConvert(JavaKind, ValueNode)::: default java lowering provider implicit store convert:::return->implicitStoreConvert
DefaultJavaLoweringProvider#implicitStoreConvert(StructuredGraph, JavaKind, ValueNode, boolean)::: default java lowering provider implicit store convert:::ret->implicitStoreConvert->if->ret->isAlive->graph->addOrUnique->return
DefaultJavaLoweringProvider#implicitStoreConvert(JavaKind, ValueNode, boolean)::: default java lowering provider implicit store convert:::if->useCompressedOops->return->newCompressionNode->switch->return->new->NarrowNode->return->new->NarrowNode->return
DefaultJavaLoweringProvider#createReadHub(StructuredGraph, ValueNode, LoweringTool)::: default java lowering provider create read hub:::
DefaultJavaLoweringProvider#createReadArrayComponentHub(StructuredGraph, ValueNode, FixedNode)::: default java lowering provider create read array component hub:::
DefaultJavaLoweringProvider#proxyIndex(AccessIndexedNode, ValueNode, ValueNode, LoweringTool)::: default java lowering provider proxy index:::graph->index->graph->arrayLength->readOrCreateArrayLength->lengthMinusOne->SubNode->ConstantNode->forInt->create->return->branchlessMin->ConstantNode->forInt->branchlessMax
DefaultJavaLoweringProvider#getBoundsCheck(AccessIndexedNode, ValueNode, LoweringTool)::: default java lowering provider get bounds check:::if->n->getBoundsCheck->return->n->getBoundsCheck->graph->n->graph->arrayLength->readOrCreateArrayLength->boundsCheck->IntegerBelowNode->n->index->create->if->boundsCheck->isTautology->return->return->tool->graph->addOrUniqueWithInputs->createGuard
DefaultJavaLoweringProvider#readOrCreateArrayLength(AccessIndexedNode, ValueNode, LoweringTool, StructuredGraph)::: default java lowering provider read or create array length:::arrayLength->tool->getConstantReflection->readArrayLength->if->createReadArrayLength->else->arrayLength->isAlive->graph->addOrUniqueWithInputs->return
DefaultJavaLoweringProvider#createNullCheck(ValueNode, FixedNode, LoweringTool)::: default java lowering provider create null check:::if->StampTool->isPointerNonNull->return->return->tool->before->graph->IsNullNode->create->unique->createGuard
DefaultJavaLoweringProvider#createNullCheckedValue(ValueNode, FixedNode, LoweringTool)::: default java lowering provider create null checked value:::nullCheck->createNullCheck->if->return->return->before->graph->PiNode->object->stamp->StampFactory->objectNonNull->join->create->maybeAddOrUnique
DefaultJavaLoweringProvider#reconstructArrayIndex(JavaKind, AddressNode)::: default java lowering provider reconstruct array index:::graph->address->graph->offset->getOffset->base->metaAccess->getArrayBaseOffset->scaledIndex->graph->ConstantNode->offset->stamp->forIntegerStamp->new->SubNode->unique->shift->CodeUtil->metaAccess->getArrayIndexScale->log2->ret->graph->ConstantNode->forInt->new->RightShiftNode->unique->return->IntegerConvertNode->StampFactory->forKind->convert
GraphKit#getGraph()::: graph kit get graph:::return
GraphKit#getConstantReflection()::: graph kit get constant reflection:::return->providers->getConstantReflection
GraphKit#getConstantFieldProvider()::: graph kit get constant field provider:::return->providers->getConstantFieldProvider
GraphKit#getMetaAccess()::: graph kit get meta access:::return->providers->getMetaAccess
GraphKit#getReplacements()::: graph kit get replacements:::return->providers->getReplacements
GraphKit#getStampProvider()::: graph kit get stamp provider:::return->providers->getStampProvider
GraphKit#parsingIntrinsic()::: graph kit parsing intrinsic:::return
GraphKit#unique(T):::Ensures a floating node is added to or already present in the graph via Graph#unique.:::return->graph->changeToWord->unique
GraphKit#add(T)::: graph kit add:::return->graph->changeToWord->add
GraphKit#changeToWord(T)::: graph kit change to word:::if->wordTypes->isWord->node->wordTypes->StampTool->typeOrNull->getWordStamp->setStamp->return
GraphKit#append(T)::: graph kit append:::result->graph->changeToWord->addOrUniqueWithInputs->if->updateLastFixed->return
GraphKit#updateLastFixed(FixedNode)::: graph kit update last fixed:::graph->addAfterFixed->if->else
GraphKit#createInvoke(Class, String, ValueNode...)::: graph kit create invoke:::return->createInvoke
GraphKit#createInvoke(Class, String, InvokeKind, FrameStateBuilder, int, ValueNode...):::Creates and appends an InvokeNode for a call to a given method with a given set of arguments:::isStatic->method->findMethod->return->createInvoke
GraphKit#findMethod(Class, String, boolean)::: graph kit find method:::type->providers->getMetaAccess->lookupJavaType->method->foreach->type->getDeclaredMethods->if->Modifier->m->getModifiers->isStatic->m->getName->equals->GraalError->guarantee->return
GraphKit#findMethod(Class, String, Class...)::: graph kit find method:::try->m->declaringClass->getDeclaredMethod->return->providers->getMetaAccess->lookupJavaMethod->catch->throw->new->AssertionError->finally
GraphKit#createInvoke(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, ValueNode...):::Creates and appends an InvokeNode for a call to a given method with a given set of arguments.:::try->context->graph->NodeSourcePosition->graph->currentNodeSourcePosition->substitution->withNodeSourcePosition->signature->method->getSignature->returnType->signature->getReturnType->returnStamp->graphBuilderPlugins->getOverridingStamp->if->StampFactory->graph->getAssumptions->forDeclaredType->callTarget->graph->createMethodCallTarget->add->invoke->new->InvokeNode->append->if->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->push->invoke->frameStateBuilder->create->setStateAfter->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->pop->return->catch->finally
GraphKit#createInvokeWithExceptionAndUnwind(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, int, ValueNode...)::: graph kit create invoke with exception and unwind:::try->context->graph->NodeSourcePosition->graph->currentNodeSourcePosition->substitution->withNodeSourcePosition->result->startInvokeWithException->exceptionPart->exception->exceptionObject->new->UnwindNode->append->endInvokeWithException->return->catch->finally
GraphKit#createInvokeWithExceptionAndUnwind(MethodCallTargetNode, FrameStateBuilder, int, int)::: graph kit create invoke with exception and unwind:::try->context->graph->NodeSourcePosition->graph->currentNodeSourcePosition->callTarget->targetMethod->substitution->withNodeSourcePosition->result->startInvokeWithException->exceptionPart->exception->exceptionObject->new->UnwindNode->append->endInvokeWithException->return->catch->finally
GraphKit#createMethodCallTarget(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, int)::: graph kit create method call target:::return->new->MethodCallTargetNode
GraphKit#asKind(JavaType)::: graph kit as kind:::return->wordTypes->asKind->type->getJavaKind
GraphKit#checkArgs(ResolvedJavaMethod, ValueNode...):::Determines if a given set of arguments is compatible with the signature of a given method.:::signature->method->getSignature->isStatic->method->isStatic->if->signature->getParameterCount->throw->new->AssertionError->argIndex->if->expected->method->getDeclaringClass->asKind->actual->stamp->getStackKind->for->i->signature->getParameterCount->return
GraphKit#inlineInvokes(String, String):::Recursively #inline inlines all invocations currently in the graph.:::while->graph->getNodes->filter->isEmpty->foreach->graph->getNodes->filter->snapshot->inline->new->DeadCodeEliminationPhase->apply
GraphKit#inline(InvokeNode, String, String):::Inlines a given invocation to a method:::method->invoke->callTarget->targetMethod->plugins->new->Plugins->config->GraphBuilderConfiguration->getSnippetDefault->calleeGraph->if->providers->getReplacements->invoke->getOptions->getSnippet->else->invoke->getOptions->invoke->getDebug->new->StructuredGraph.Builder->method->invoke->graph->trackNodeSourcePosition->trackNodeSourcePosition->setIsSubstitution->build->initialReplacementContext->providers->getReplacements->getDefaultReplacementBytecodeProvider->new->IntrinsicContext->instance->createGraphBuilderInstance->instance->apply->calleeGraph->clearAllStateAfter->new->DeadCodeEliminationPhase->apply->InliningUtil->inline
GraphKit#createGraphBuilderInstance(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)::: graph kit create graph builder instance:::return->new->GraphBuilderPhase.Instance
GraphKit#pushStructure(Structure)::: graph kit push structure:::structures->add
GraphKit#getTopStructure(Class)::: graph kit get top structure:::return->expectedClass->structures->structures->size->get->cast
GraphKit#popStructure()::: graph kit pop structure:::structures->structures->size->remove
GraphKit#startIf(LogicNode, double):::Starts an if-block:::thenSuccessor->graph->new->BeginNode->add->elseSuccessor->graph->new->BeginNode->add->node->new->IfNode->append->s->new->IfStructure->pushStructure->return
GraphKit#saveLastIfNode()::: graph kit save last if node:::s->getTopStructure->switch->break->break->break->break->return
GraphKit#thenPart()::: graph kit then part:::s->saveLastIfNode
GraphKit#elsePart()::: graph kit else part:::s->saveLastIfNode
GraphKit#endIf():::Ends an if block started with #startIf(LogicNode, double).:::s->saveLastIfNode->thenPart->elsePart->merge->if->thenEnd->graph->new->EndNode->add->graph->addAfterFixed->elseEnd->graph->new->EndNode->add->graph->addAfterFixed->graph->new->MergeNode->add->merge->addForwardEnd->merge->addForwardEnd->else->if->else->if->else->popStructure->return
GraphKit#startInvokeWithException(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, int, ValueNode...)::: graph kit start invoke with exception:::signature->method->getSignature->returnType->signature->getReturnType->returnStamp->graphBuilderPlugins->getOverridingStamp->if->StampFactory->graph->getAssumptions->forDeclaredType->callTarget->graph->createMethodCallTarget->add->return->startInvokeWithException
GraphKit#startInvokeWithException(MethodCallTargetNode, FrameStateBuilder, int, int)::: graph kit start invoke with exception:::exceptionObject->getMetaAccess->new->ExceptionObjectNode->add->if->exceptionState->frameStateBuilder->copy->exceptionState->clearStack->exceptionState->push->exceptionState->setRethrowException->exceptionObject->exceptionState->create->setStateAfter->invoke->new->InvokeWithExceptionNode->append->noExceptionEdge->graph->KillingBeginNode->LocationIdentity->any->create->add->invoke->setNext->if->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->push->invoke->frameStateBuilder->create->setStateAfter->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->pop->s->new->InvokeWithExceptionStructure->pushStructure->return
GraphKit#saveLastInvokeWithExceptionNode()::: graph kit save last invoke with exception node:::s->getTopStructure->switch->break->break->break->break->return
GraphKit#noExceptionPart()::: graph kit no exception part:::s->saveLastInvokeWithExceptionNode
GraphKit#exceptionPart()::: graph kit exception part:::s->saveLastInvokeWithExceptionNode
GraphKit#exceptionObject()::: graph kit exception object:::s->getTopStructure->return
GraphKit#endInvokeWithException():::Finishes a control flow started with #startInvokeWithException:::s->saveLastInvokeWithExceptionNode->noExceptionEdge->exceptionEdge->merge->if->noExceptionEnd->graph->new->EndNode->add->graph->addAfterFixed->exceptionEnd->graph->new->EndNode->add->graph->addAfterFixed->graph->new->MergeNode->add->merge->addForwardEnd->merge->addForwardEnd->else->if->else->if->else->popStructure->return
InlineDuringParsingPlugin#getInteger(String, int)::: inline during parsing plugin get integer:::value->Services->getSavedProperties->get->if->return->Integer->parseInt->return
InlineDuringParsingPlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: inline during parsing plugin should inline invoke:::if->method->hasBytecodes->method->getDeclaringClass->isLinked->method->canBeInlined->if->method->shouldBeInlined->checkInliningDepth->return->createStandardInlineInfo->if->method->isSynchronized->b->getGraph->checkSize->checkInliningDepth->return->createStandardInlineInfo->return
InlineDuringParsingPlugin#checkInliningDepth(GraphBuilderContext)::: inline during parsing plugin check inlining depth:::nodeCount->b->getGraph->getNodeCount->maxDepth->InlineDuringParsingMaxDepth->b->getOptions->getValue->if->return->b->getDepth
InlineDuringParsingPlugin#checkSize(ResolvedJavaMethod, ValueNode[], StructuredGraph)::: inline during parsing plugin check size:::bonus->foreach->if->v->isConstant->return->method->getCode->TrivialInliningSize->graph->getOptions->getValue
InstanceOfSnippetsTemplates#makeArguments(InstanceOfUsageReplacer, LoweringTool):::Gets the arguments used to retrieve and instantiate an instanceof snippet template.:::
InstanceOfSnippetsTemplates#lower(FloatingNode, LoweringTool)::: instance of snippets templates lower:::usages->instanceOf->usages->snapshot->instantiation->new->Instantiation->foreach->graph->usage->graph->replacer->createReplacer->if->instantiation->isInitialized->replacer->replaceUsingInstantiation->else->args->makeArguments->template->providers->getMetaAccess->instantiate->if->instanceOf->isDeleted->GraphUtil->killWithUnusedFloatingInputs
InstanceOfSnippetsTemplates#createReplacer(FloatingNode, Instantiation, Node, StructuredGraph):::Gets the specific replacer object used to replace the usage of an instanceof node with the result of an instantiated instanceof snippet.:::replacer->if->canMaterialize->trueValue->ConstantNode->forInt->falseValue->ConstantNode->forInt->if->instantiation->isInitialized->new->NonMaterializationUsageReplacer->else->c->c->trueValue->c->falseValue->new->MaterializationUsageReplacer->return
InstanceOfSnippetsTemplates#canMaterialize(Node):::Determines if an instanceof usage can be materialized.:::if->cn->return->cn->trueValue->isConstant->cn->falseValue->isConstant->if->return->return
InstanceOfSnippetsTemplates.Instantiation#isInitialized():::Determines if the instantiation has occurred.:::return
InstanceOfSnippetsTemplates.Instantiation#initialize(ValueNode, ValueNode, ValueNode)::: instantiation initialize:::
InstanceOfSnippetsTemplates.Instantiation#asCondition(ValueNode):::Gets the result of this instantiation as a condition.:::if->result->isConstant->return->LogicConstantNode->result->asConstant->testValue->asConstant->equals->result->graph->forBoolean->if->getY->result->graph->createCompareNode->return
InstanceOfSnippetsTemplates.Instantiation#asMaterialization(StructuredGraph, ValueNode, ValueNode):::Gets the result of the instantiation as a materialized value.:::if->return->else->return->graph->asCondition->new->ConditionalNode->unique
InstanceOfSnippetsTemplates.InstanceOfUsageReplacer#replaceUsingInstantiation():::Does the replacement based on a previously snippet instantiation.:::
InstanceOfSnippetsTemplates.NonMaterializationUsageReplacer#replaceUsingInstantiation()::: non materialization usage replacer replace using instantiation:::usage->instantiation->asCondition->replaceFirstInput
InstanceOfSnippetsTemplates.NonMaterializationUsageReplacer#replace(ValueNode, ValueNode)::: non materialization usage replacer replace:::newNode->inferStamp->instantiation->initialize->usage->instantiation->asCondition->replaceFirstInput
InstanceOfSnippetsTemplates.MaterializationUsageReplacer#replaceUsingInstantiation()::: materialization usage replacer replace using instantiation:::newValue->instantiation->usage->graph->asMaterialization->usage->replaceAtUsages->GraphUtil->killWithUnusedFloatingInputs
InstanceOfSnippetsTemplates.MaterializationUsageReplacer#replace(ValueNode, ValueNode)::: materialization usage replacer replace:::newNode->inferStamp->instantiation->initialize->usage->replaceAtUsages->GraphUtil->killWithUnusedFloatingInputs
IntegerSubstitutions#numberOfLeadingZeros(int)::: integer substitutions number of leading zeros:::if->return->return->BitScanReverseNode->unsafeScan
IntegerSubstitutions#numberOfTrailingZeros(int)::: integer substitutions number of trailing zeros:::if->return->return->BitScanForwardNode->unsafeScan
IntrinsicGraphBuilder#updateLastInstruction(T)::: intrinsic graph builder update last instruction:::if->fixedNode->if->lastInstr->setNext->if->fixedWithNextNode->else
IntrinsicGraphBuilder#append(T)::: intrinsic graph builder append:::if->v->graph->return->added->graph->addOrUniqueWithInputs->if->updateLastInstruction->return
IntrinsicGraphBuilder#push(JavaKind, ValueNode)::: intrinsic graph builder push:::
IntrinsicGraphBuilder#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)::: intrinsic graph builder handle replaced invoke:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#handleReplacedInvoke(CallTargetNode, JavaKind)::: intrinsic graph builder handle replaced invoke:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#getStampProvider()::: intrinsic graph builder get stamp provider:::return->providers->getStampProvider
IntrinsicGraphBuilder#getMetaAccess()::: intrinsic graph builder get meta access:::return->providers->getMetaAccess
IntrinsicGraphBuilder#getConstantReflection()::: intrinsic graph builder get constant reflection:::return->providers->getConstantReflection
IntrinsicGraphBuilder#getConstantFieldProvider()::: intrinsic graph builder get constant field provider:::return->providers->getConstantFieldProvider
IntrinsicGraphBuilder#getReplacements()::: intrinsic graph builder get replacements:::return->providers->getReplacements
IntrinsicGraphBuilder#getGraph()::: intrinsic graph builder get graph:::return
IntrinsicGraphBuilder#setStateAfter(StateSplit)::: intrinsic graph builder set state after:::stateAfter->getGraph->new->FrameState->add->sideEffect->setStateAfter
IntrinsicGraphBuilder#getParent()::: intrinsic graph builder get parent:::return
IntrinsicGraphBuilder#getCode()::: intrinsic graph builder get code:::return
IntrinsicGraphBuilder#getMethod()::: intrinsic graph builder get method:::return
IntrinsicGraphBuilder#bci()::: intrinsic graph builder bci:::return
IntrinsicGraphBuilder#getInvokeKind()::: intrinsic graph builder get invoke kind:::return->method->isStatic
IntrinsicGraphBuilder#getInvokeReturnType()::: intrinsic graph builder get invoke return type:::return->method->getSignature->method->getDeclaringClass->getReturnType
IntrinsicGraphBuilder#getDepth()::: intrinsic graph builder get depth:::return
IntrinsicGraphBuilder#parsingIntrinsic()::: intrinsic graph builder parsing intrinsic:::return
IntrinsicGraphBuilder#getIntrinsic()::: intrinsic graph builder get intrinsic:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#bailout(String)::: intrinsic graph builder bailout:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#get(boolean)::: intrinsic graph builder get:::return
IntrinsicGraphBuilder#buildGraph(InvocationPlugin)::: intrinsic graph builder build graph:::position->graph->trackNodeSourcePosition->NodeSourcePosition->placeholder->try->context->graph->withNodeSourcePosition->receiver->method->isStatic->if->plugin->execute->new->ReturnNode->append->return->return->catch->finally
IntrinsicGraphBuilder#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: intrinsic graph builder intrinsify:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#intrinsify(ResolvedJavaMethod, StructuredGraph, Receiver, ValueNode[])::: intrinsic graph builder intrinsify:::throw->GraalError->shouldNotReachHere
IntrinsicGraphBuilder#toString()::: intrinsic graph builder to string:::return->String->method->format->format
JDK9StringSubstitutions#equals(String, Object)::: k9 string substitutions equals:::if->return->if->return->thatString->if->thisString->length->thatString->length->return->if->thisString->length->return->if->getCoder->getCoder->return->array1->getValue->array2->getValue->return->ArrayEqualsNode->equals
JDK9StringSubstitutions#getValue(String):::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.:::
JDK9StringSubstitutions#getCoder(String)::: k9 string substitutions get coder:::
JDK9StringSubstitutions#isCompactString(String)::: k9 string substitutions is compact string:::return->getCoder
LongSubstitutions#numberOfLeadingZeros(long)::: long substitutions number of leading zeros:::if->return->return->BitScanReverseNode->unsafeScan
LongSubstitutions#numberOfTrailingZeros(long)::: long substitutions number of trailing zeros:::if->return->return->BitScanForwardNode->unsafeScan
MethodHandlePlugin#countRecursiveInlining(GraphBuilderContext, ResolvedJavaMethod)::: method handle plugin count recursive inlining:::count->for->c->b->getParent->c->getParent->return
MethodHandlePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: method handle plugin handle invoke:::intrinsicMethod->methodHandleAccess->lookupMethodHandleIntrinsic->if->invokeKind->b->getInvokeKind->if->b->nullCheckedValue->invokeReturnStamp->b->b->getAssumptions->getInvokeReturnStamp->adder->b->getGraph->new->MethodHandleNode.GraphAdder->invoke->MethodHandleNode->b->bci->tryResolveTargetInvoke->if->methodHandleNode->b->bci->new->MethodHandleNode->if->invokeReturnStamp->getTrustedStamp->getStackKind->b->add->else->b->invokeReturnStamp->getTrustedStamp->getStackKind->addPush->else->callTarget->invoke->callTarget->argumentsList->callTarget->arguments->for->i->argumentsList->size->inlineEverything->if->argumentsList->size->targetMethod->callTarget->targetMethod->if->targetMethod->hasBytecodes->return->recursionDepth->countRecursiveInlining->maxRecursionDepth->MaximumRecursiveInlining->b->getOptions->getValue->if->return->b->invoke->getInvokeKind->argumentsList->argumentsList->size->new->ValueNodeArr->toArray->handleReplacedInvoke->return->return
NodeIntrinsificationProvider#getInjectedStamp(Class, boolean)::: node intrinsification provider get injected stamp:::kind->JavaKind->fromJavaClass->if->returnType->metaAccess->lookupJavaType->if->wordTypes->isWord->return->wordTypes->getWordStamp->else->return->StampFactory->TypeReference->createWithoutAssumptions->object->else->return->StampFactory->forKind
NodeIntrinsificationProvider#getInjectedArgument(Class)::: node intrinsification provider get injected argument:::injected->snippetReflection->getInjectedNodeIntrinsicParameter->if->return->else->if->type->equals->type->equals->return->type->cast->else->if->type->equals->return->type->cast->else->if->type->equals->return->type->cast->else->throw->type->getName->new->GraalError
PEGraphDecoder.PEMethodScope#isInlinedMethod()::: method scope is inlined method:::return
PEGraphDecoder.PEMethodScope#getCallerBytecodePosition(NodeSourcePosition)::: method scope get caller bytecode position:::if->return->if->invokePosition->asNode->getNodeSourcePosition->if->return->if->return->position->caller->resolveSourceLanguagePosition->addCaller->pos->caller->resolveSourceLanguagePosition->if->return->callerBytecodePosition->getCaller->callerBytecodePosition->getMethod->callerBytecodePosition->getBCI->new->NodeSourcePosition->return
PEGraphDecoder.PEMethodScope#resolveSourceLanguagePosition()::: method scope resolve source language position:::res->if->if->method->hasReceiver->isJavaConstant->constantArgument->asJavaConstant->sourceLanguagePositionProvider->getPosition->return
PEGraphDecoder.UnresolvedSourceLanguagePosition#toShortString()::: unresolved source language position to short string:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.UnresolvedSourceLanguagePosition#getOffsetEnd()::: unresolved source language position get offset end:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.UnresolvedSourceLanguagePosition#getOffsetStart()::: unresolved source language position get offset start:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.UnresolvedSourceLanguagePosition#getLineNumber()::: unresolved source language position get line number:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.UnresolvedSourceLanguagePosition#getURI()::: unresolved source language position get i:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.UnresolvedSourceLanguagePosition#getLanguage()::: unresolved source language position get language:::throw->getClass->getSimpleName->new->IllegalStateException
PEGraphDecoder.PENonAppendGraphBuilderContext#getExternalInliningContext()::: non append graph builder context get external inlining context:::return->new->ExternalInliningContext
PEGraphDecoder.PENonAppendGraphBuilderContext#canDeferPlugin(GeneratedInvocationPlugin):::Fold and NodeIntrinsic can be deferred during parsing/decoding:::return->plugin->getSource->equals->plugin->getSource->equals
PEGraphDecoder.PENonAppendGraphBuilderContext#bailout(String)::: non append graph builder context bailout:::bailout->new->PermanentBailoutException->throw->GraphUtil->GraphUtil->methodScope->getCallerBytecodePosition->approxSourceStackTraceElement->createBailoutException
PEGraphDecoder.PENonAppendGraphBuilderContext#getStampProvider()::: non append graph builder context get stamp provider:::return->providers->getStampProvider
PEGraphDecoder.PENonAppendGraphBuilderContext#getMetaAccess()::: non append graph builder context get meta access:::return->providers->getMetaAccess
PEGraphDecoder.PENonAppendGraphBuilderContext#getConstantReflection()::: non append graph builder context get constant reflection:::return->providers->getConstantReflection
PEGraphDecoder.PENonAppendGraphBuilderContext#getConstantFieldProvider()::: non append graph builder context get constant field provider:::return->providers->getConstantFieldProvider
PEGraphDecoder.PENonAppendGraphBuilderContext#getReplacements()::: non append graph builder context get replacements:::return->providers->getReplacements
PEGraphDecoder.PENonAppendGraphBuilderContext#getGraph()::: non append graph builder context get graph:::return
PEGraphDecoder.PENonAppendGraphBuilderContext#getDepth()::: non append graph builder context get depth:::return
PEGraphDecoder.PENonAppendGraphBuilderContext#getIntrinsic()::: non append graph builder context get intrinsic:::return->PEGraphDecoder.this->getIntrinsic
PEGraphDecoder.PENonAppendGraphBuilderContext#append(T)::: non append graph builder context append:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#push(JavaKind, ValueNode)::: non append graph builder context push:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)::: non append graph builder context handle replaced invoke:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)::: non append graph builder context handle replaced invoke:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: non append graph builder context intrinsify:::return
PEGraphDecoder.PENonAppendGraphBuilderContext#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[])::: non append graph builder context intrinsify:::return
PEGraphDecoder.PENonAppendGraphBuilderContext#setStateAfter(StateSplit)::: non append graph builder context set state after:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#getParent()::: non append graph builder context get parent:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#getCode()::: non append graph builder context get code:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#getMethod()::: non append graph builder context get method:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#bci()::: non append graph builder context bci:::return->invoke->bci
PEGraphDecoder.PENonAppendGraphBuilderContext#getInvokeKind()::: non append graph builder context get invoke kind:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#getInvokeReturnType()::: non append graph builder context get invoke return type:::throw->unimplemented
PEGraphDecoder.PENonAppendGraphBuilderContext#toString()::: non append graph builder context to string:::fmt->new->Formatter->scope->fmt->new->ResolvedJavaMethodBytecode->invoke->bci->asStackTraceElement->format->callers->scope->getCallerBytecodePosition->if->fmt->format->return->fmt->toString
PEGraphDecoder#getIntrinsic()::: graph decoder get intrinsic:::return
PEGraphDecoder.PEAppendGraphBuilderContext#push(JavaKind, ValueNode)::: append graph builder context push:::if->throw->unimplemented
PEGraphDecoder.PEAppendGraphBuilderContext#setStateAfter(StateSplit)::: append graph builder context set state after:::stateAfter->decodeFloatingNode->getGraph->add->fs->handleFloatingNodeAfterAdd->stateSplit->setStateAfter
PEGraphDecoder.PEAppendGraphBuilderContext#append(T)::: append graph builder context append:::if->v->graph->return->try->position->withNodeSoucePosition->added->getGraph->addOrUniqueWithInputs->if->updateLastInstruction->return->catch->finally
PEGraphDecoder.PEAppendGraphBuilderContext#withNodeSoucePosition()::: append graph builder context with node souce position:::if->getGraph->trackNodeSourcePosition->callerBytecodePosition->methodScope->getCallerBytecodePosition->if->return->getGraph->withNodeSourcePosition->return
PEGraphDecoder.PEAppendGraphBuilderContext#updateLastInstruction(T)::: append graph builder context update last instruction:::if->fixedNode->if->lastInstr->setNext->if->fixedWithNextNode->else
PEGraphDecoder.PEAppendGraphBuilderContext#getInvokeKind()::: append graph builder context get invoke kind:::if->return->return->super->getInvokeKind
PEGraphDecoder.PEAppendGraphBuilderContext#getInvokeReturnType()::: append graph builder context get invoke return type:::if->return->return->super->getInvokeReturnType
PEGraphDecoder.PEAppendGraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)::: append graph builder context handle replaced invoke:::if->throw->unimplemented->appendInvoke->invoke->asNode->updateLastInstruction
PEGraphDecoder.PEAppendGraphBuilderContext#getNonIntrinsicAncestor()::: append graph builder context get non intrinsic ancestor:::return
PEGraphDecoder.SpecialCallTargetCacheKey#hashCode()::: special call target cache key hash code:::return->invokeKind->hashCode->targetMethod->hashCode->contextType->hashCode->receiverStamp->hashCode
PEGraphDecoder.SpecialCallTargetCacheKey#equals(Object)::: special call target cache key equals:::if->key->return->equals->equals->equals->equals->return
PEGraphDecoder#loopExplosionKind(ResolvedJavaMethod, LoopExplosionPlugin)::: graph decoder loop explosion kind:::if->return->else->return->loopExplosionPlugin->loopExplosionKind
PEGraphDecoder#decode(ResolvedJavaMethod, boolean, boolean)::: graph decoder decode:::try->scope->debug->scope->encodedGraph->lookupEncodedGraph->methodScope->new->PEMethodScope->createInitialLoopScope->decode->cleanupGraph->debug->dump->catch->throw->debug->handle->finally->try->catch->throw->GraalError->shouldNotReachHere->finally
PEGraphDecoder#cleanupGraph(MethodScope)::: graph decoder cleanup graph:::super->cleanupGraph->foreach->graph->getNodes->if->peMethodScope->invoke->InliningUtil->handleMissingAfterExceptionFrameState
PEGraphDecoder#checkLoopExplosionIteration(MethodScope, LoopScope)::: graph decoder check loop explosion iteration:::methodScope->if->getValue->throw->tooManyLoopExplosionIterations
PEGraphDecoder#tooManyLoopExplosionIterations(PEMethodScope, OptionValues)::: graph decoder too many loop explosion iterations:::message->bailout->getValue->new->RuntimeException->new->PermanentBailoutException->throw->GraphUtil->GraphUtil->methodScope->getCallerBytecodePosition->approxSourceStackTraceElement->createBailoutException
PEGraphDecoder#handleInvoke(MethodScope, LoopScope, InvokeData)::: graph decoder handle invoke:::methodScope->callTarget->decodeFloatingNode->if->methodCall->if->methodCall->invokeKind->hasReceiver->methodCall->arguments->get->asJavaConstant->invokePosition->asNode->getNodeSourcePosition->if->inlineLoopScope->trySimplifyInvoke->if->return->graph->add->registerNode->return->super->handleInvoke
PEGraphDecoder#trySimplifyInvoke(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)::: graph decoder try simplify invoke:::specialCallTarget->getSpecialCallTarget->if->callTarget->setTargetMethod->callTarget->setInvokeKind->if->tryInvocationPlugin->return->inlineLoopScope->tryInline->if->return->foreach->plugin->new->PENonAppendGraphBuilderContext->callTarget->targetMethod->notifyNotInlined->return
PEGraphDecoder#getSpecialCallTarget(InvokeData, MethodCallTargetNode)::: graph decoder get special call target:::if->callTarget->invokeKind->isDirect->return->if->callTarget->targetMethod->canBeStaticallyBound->return->callTarget->targetMethod->key->callTarget->invokeKind->callTarget->targetMethod->callTarget->receiver->stamp->new->SpecialCallTargetCacheKey->specialCallTarget->specialCallTargetCache->get->if->MethodCallTargetNode->graph->getAssumptions->devirtualizeCall->if->specialCallTargetCache->put->return
PEGraphDecoder#tryInvocationPlugin(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)::: graph decoder try invocation plugin:::if->invocationPlugins->isEmpty->return->invoke->targetMethod->callTarget->targetMethod->if->isCallToOriginal->return->invocationPlugin->getInvocationPlugin->if->return->if->isCallToOriginal->return->arguments->callTarget->arguments->new->ValueNodeArr->toArray->invokePredecessor->invoke->asNode->predecessor->invoke->asNode->replaceAtPredecessor->inlineScope->new->PEMethodScope->returnType->targetMethod->getSignature->getDeclaringClass->getReturnType->graphBuilderContext->callTarget->invokeKind->new->PEAppendGraphBuilderContext->invocationPluginReceiver->new->InvocationPluginReceiver->if->invocationPlugin->invocationPluginReceiver->init->execute->if->else->if->registerNode->invoke->asNode->replaceAtUsages->AbstractBeginNode->prevBegin->nodeAfterInvoke->setNext->deleteInvoke->else->invoke->asNode->replaceAtUsages->deleteInvoke->return->else->invokePredecessor->invoke->asNode->setNext->return
PEGraphDecoder#getInvocationPlugin(ResolvedJavaMethod)::: graph decoder get invocation plugin:::invocationPlugin->invocationPluginCache->get->if->invocationPlugins->lookupInvocation->if->invocationPluginCache->put->return
PEGraphDecoder#tryInline(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)::: graph decoder try inline:::if->callTarget->invokeKind->isDirect->return->targetMethod->callTarget->targetMethod->if->targetMethod->hasNeverInlineDirective->return->arguments->callTarget->arguments->new->ValueNodeArr->toArray->graphBuilderContext->new->PENonAppendGraphBuilderContext->foreach->inlineInfo->plugin->shouldInlineInvoke->if->if->inlineInfo->allowsInlining->return->doInline->else->return->return
PEGraphDecoder#doInline(PEMethodScope, LoopScope, InvokeData, InlineInfo, ValueNode[])::: graph decoder do inline:::if->useForInlining->return->inlineMethod->inlineInfo->getMethodToInline->graphToInline->inlineInfo->getPlugin->inlineInfo->getIntrinsicBytecodeProvider->inlineInfo->isSubstitution->graph->trackNodeSourcePosition->lookupEncodedGraph->if->return->if->getValue->throw->tooDeepInlining->foreach->plugin->notifyBeforeInline->invoke->invokeNode->invoke->asNode->predecessor->invokeNode->predecessor->invokeNode->replaceAtPredecessor->inlineScope->new->PEMethodScope->if->inlineMethod->isStatic->if->StampTool->isPointerAlwaysNull->deoptimizeNode->graph->new->DeoptimizeNode->add->predecessor->setNext->finishInlining->return->else->if->StampTool->isPointerNonNull->graphBuilderContext->new->PEAppendGraphBuilderContext->graphBuilderContext->nullCheckedValue->inlineLoopScope->createInitialLoopScope->firstArgumentNodeId->for->i->assumptions->graph->getAssumptions->inlinedAssumptions->graphToInline->getAssumptions->if->if->assumptions->record->else->inlinedMethods->graphToInline->getInlinedMethods->if->foreach->graph->recordMethod->if->graphToInline->getFields->foreach->graphToInline->getFields->graph->recordField->if->graphToInline->hasUnsafeAccess->graph->markUnsafeAccess->return
PEGraphDecoder#finishInlining(MethodScope)::: graph decoder finish inlining:::inlineScope->inlineMethod->methodScope->loopScope->invokeData->invoke->invokeNode->invoke->asNode->exceptionValue->returnNodeCount->unwindNodeCount->returnAndUnwindNodes->for->i->returnAndUnwindNodes->size->if->unwindReplacement->if->makeStubNode->else->graph->new->DeoptimizeNode->add->if->unwindNode->getSingleMatchingNode->unwindNode->exception->unwindNode->replaceAndDelete->else->unwindMergeNode->graph->new->MergeNode->add->InliningUtil->getMatchingNodes->unwindNode->exception->mergeValueProducers->unwindMergeNode->setNext->ensureExceptionStateDecoded->unwindMergeNode->duplicateModified->setStateAfter->returnValue->if->else->if->returnNode->getSingleMatchingNode->returnNode->result->n->AbstractBeginNode->prevBegin->nodeAfterInvoke->returnNode->replaceAndDelete->else->merge->graph->new->MergeNode->add->merge->ensureNodeCreated->setStateAfter->InliningUtil->getMatchingNodes->mergeReturns->n->nodeAfterInvoke->merge->setNext->invokeNode->replaceAtUsages->registerNode->if->registerNode->if->replaceAtUsagesAndDelete->deleteInvoke->foreach->plugin->notifyAfterInline
PEGraphDecoder#getSingleMatchingNode(List, boolean, Class)::: graph decoder get single matching node:::if->return->returnAndUnwindNodes->get->for->i->returnAndUnwindNodes->size->throw->GraalError->shouldNotReachHere
PEGraphDecoder#getMatchingNodes(List, boolean, Class, int)::: graph decoder get matching nodes:::if->return->result->new->ArrayList<>->for->i->returnAndUnwindNodes->size->return
PEGraphDecoder#tooDeepInlining(PEMethodScope)::: graph decoder too deep inlining:::methodCounts->new->HashMap<>->for->cur->methods->methodCounts->entrySet->new->ArrayList<>->methods->Integer->e1->getValue->e2->getValue->compare->sort->msg->new->StringBuilder->System->lineSeparator->append->append->foreach->msg->System->lineSeparator->append->entry->getKey->format->append->entry->getValue->append->append->msg->System->lineSeparator->append->append->lastBci->for->cur->throw->msg->toString->new->PermanentBailoutException
PEGraphDecoder#nodeAfterInvoke(PEMethodScope, LoopScope, InvokeData, AbstractBeginNode)::: graph decoder node after invoke:::n->if->registerNode->makeStubNode->else->makeStubNode->return
PEGraphDecoder#deleteInvoke(Invoke)::: graph decoder delete invoke:::frameState->invoke->stateAfter->invoke->asNode->safeDelete->if->frameState->hasNoUsages->frameState->safeDelete
PEGraphDecoder#lookupEncodedGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean, boolean)::: graph decoder lookup encoded graph:::
PEGraphDecoder#handleFixedNode(MethodScope, LoopScope, int, FixedNode)::: graph decoder handle fixed node:::methodScope->if->foreignCall->if->foreignCall->getBci->foreignCall->bci->setBci->super->handleFixedNode
PEGraphDecoder#canonicalizeFixedNode(MethodScope, Node)::: graph decoder canonicalize fixed node:::methodScope->replacedNode->if->if->loadFieldNode->graphBuilderContext->new->PEAppendGraphBuilderContext->field->loadFieldNode->field->if->loadFieldNode->isStatic->foreach->if->nodePlugin->handleLoadStaticField->break->else->object->loadFieldNode->object->foreach->if->nodePlugin->handleLoadField->break->else->if->storeFieldNode->graphBuilderContext->new->PEAppendGraphBuilderContext->field->storeFieldNode->field->if->storeFieldNode->isStatic->value->storeFieldNode->value->foreach->if->nodePlugin->handleStoreStaticField->break->else->object->storeFieldNode->object->value->storeFieldNode->value->foreach->if->nodePlugin->handleStoreField->break->else->if->loadIndexedNode->graphBuilderContext->new->PEAppendGraphBuilderContext->array->loadIndexedNode->array->index->loadIndexedNode->index->foreach->if->nodePlugin->loadIndexedNode->getBoundsCheck->loadIndexedNode->elementKind->handleLoadIndexed->break->else->if->storeIndexedNode->graphBuilderContext->new->PEAppendGraphBuilderContext->array->storeIndexedNode->array->index->storeIndexedNode->index->value->storeIndexedNode->value->foreach->if->nodePlugin->storeIndexedNode->getBoundsCheck->storeIndexedNode->getStoreCheck->storeIndexedNode->elementKind->handleStoreIndexed->break->else->if->newInstanceNode->graphBuilderContext->new->PEAppendGraphBuilderContext->type->newInstanceNode->instanceClass->foreach->if->nodePlugin->handleNewInstance->break->else->if->newArrayNode->graphBuilderContext->new->PEAppendGraphBuilderContext->elementType->newArrayNode->elementType->length->newArrayNode->length->foreach->if->nodePlugin->handleNewArray->break->else->if->newArrayNode->graphBuilderContext->new->PEAppendGraphBuilderContext->elementType->newArrayNode->type->dimensions->newArrayNode->dimensions->new->ValueNodeArr->toArray->foreach->if->nodePlugin->handleNewMultiArray->break->return->super->canonicalizeFixedNode
PEGraphDecoder#handleFloatingNodeBeforeAdd(MethodScope, LoopScope, Node)::: graph decoder handle floating node before add:::methodScope->node->if->param->if->methodScope->isInlinedMethod->throw->GraalError->shouldNotReachHere->else->if->graphBuilderContext->new->PENonAppendGraphBuilderContext->result->parameterPlugin->param->index->StampPair->param->stamp->param->uncheckedStamp->create->interceptParameter->if->return->param->copyWithInputs->return->super->handleFloatingNodeBeforeAdd
PEGraphDecoder#ensureOuterStateDecoded(PEMethodScope)::: graph decoder ensure outer state decoded:::if->stateAtReturn->stateAfter->if->decodeFloatingNode->invokeReturnKind->asNode->getStackKind->outerState->stateAtReturn->bci->stateAtReturn->rethrowException->duplicateModified->if->outerState->outerFrameState->ensureOuterStateDecoded->outerState->setOuterFrameState
PEGraphDecoder#ensureStateAfterDecoded(PEMethodScope)::: graph decoder ensure state after decoded:::if->stateAfter->ensureNodeCreated->setStateAfter
PEGraphDecoder#ensureExceptionStateDecoded(PEMethodScope)::: graph decoder ensure exception state decoded:::if->ensureStateAfterDecoded->graph->new->ExceptionPlaceholderNode->add->registerNode->exceptionState->ensureNodeCreated->if->exceptionState->outerFrameState->ensureOuterStateDecoded->exceptionState->setOuterFrameState
PEGraphDecoder#handleFloatingNodeAfterAdd(MethodScope, LoopScope, Node)::: graph decoder handle floating node after add:::methodScope->if->methodScope->isInlinedMethod->if->frameState->ensureOuterStateDecoded->if->ensureExceptionStateDecoded->invokeArgsList->if->Arrays->asList->return->InliningUtil->processFrameState->else->if->ensureOuterStateDecoded->InliningUtil->processMonitorId->return->return
ReplacementsImpl#getProviders()::: replacements impl get providers:::return
ReplacementsImpl#setProviders(Providers)::: replacements impl set providers:::providers->copyWith
ReplacementsImpl#setGraphBuilderPlugins(GraphBuilderConfiguration.Plugins)::: replacements impl set graph builder plugins:::
ReplacementsImpl#getGraphBuilderPlugins()::: replacements impl get graph builder plugins:::return
ReplacementsImpl#getIntrinsifyingPlugin(ResolvedJavaMethod)::: replacements impl get intrinsifying plugin:::if->method->getAnnotation->method->getAnnotation->return->if->method->getAnnotation->return->return
ReplacementsImpl#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Determines whether a given method should be inlined based on whether it has a substitution or whether the inlining context is already within a substitution.:::msPlugin->getMethodSubstitution->if->if->b->parsingIntrinsic->InlineDuringParsing->b->getOptions->getValue->InlineIntrinsicsDuringParsing->b->getOptions->getValue->return->createMethodSubstitutionInlineInfo->return->if->b->parsingIntrinsic->return->createIntrinsicInlineInfo->else->return
ReplacementsImpl#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)::: replacements impl notify not inlined:::if->b->parsingIntrinsic->intrinsic->b->getIntrinsic->if->intrinsic->isCallToOriginal->pluginClass->getIntrinsifyingPlugin->if->methodDesc->method->format->throw->pluginClass->getSimpleName->new->GraalError->throw->intrinsic->getIntrinsicMethod->format->method->format->new->GraalError
ReplacementsImpl#openDebugContext(String, ResolvedJavaMethod, OptionValues)::: replacements impl open debug context:::if->DebugStubsAndSnippets->getValue->outer->DebugContext->forCurrentThread->description->nextDebugContextId->incrementAndGet->new->Description->factories->Collections->emptyList->Collections->singletonList->return->DebugContext->outer->getGlobalMetrics->create->return->DebugContext->disabled
ReplacementsImpl#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)::: replacements impl get snippet:::graph->UseSnippetGraphCache->getValue->graphs->get->if->graph->trackNodeSourcePosition->try->debug->openDebugContext->a->SnippetPreparationTime->start->newGraph->makeGraph->DebugContext->counter->newGraph->getDebug->newGraph->getNodeCount->add->if->UseSnippetGraphCache->getValue->return->newGraph->freeze->if->graphs->replace->else->graphs->putIfAbsent->graphs->get->catch->finally->return
ReplacementsImpl#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)::: replacements impl register snippet:::
ReplacementsImpl#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)::: replacements impl get method substitution:::return
ReplacementsImpl#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)::: replacements impl register method substitution:::
ReplacementsImpl#hasSubstitution(ResolvedJavaMethod, int)::: replacements impl has substitution:::plugin->graphBuilderPlugins->getInvocationPlugins->lookupInvocation->return->plugin->inlineOnly
ReplacementsImpl#getDefaultReplacementBytecodeProvider()::: replacements impl get default replacement bytecode provider:::return
ReplacementsImpl#getMethodSubstitution(ResolvedJavaMethod)::: replacements impl get method substitution:::plugin->graphBuilderPlugins->getInvocationPlugins->lookupInvocation->if->msPlugin->return->return
ReplacementsImpl#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)::: replacements impl get substitution:::result->plugin->graphBuilderPlugins->getInvocationPlugins->lookupInvocation->if->plugin->inlineOnly->metaAccess->providers->getMetaAccess->if->msPlugin->substitute->msPlugin->getSubstitute->graph->UseSnippetGraphCache->getValue->graphs->get->if->graph->trackNodeSourcePosition->try->debug->openDebugContext->msPlugin->getBytecodeProvider->makeGraph->if->UseSnippetGraphCache->getValue->return->graph->freeze->graphs->putIfAbsent->graphs->get->catch->finally->else->code->new->ResolvedJavaMethodBytecode->try->debug->openDebugContext->new->IntrinsicGraphBuilder->buildGraph->catch->finally->else->return
ReplacementsImpl#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)::: replacements impl get intrinsic graph:::msPlugin->getMethodSubstitution->if->substMethod->msPlugin->providers->getMetaAccess->getSubstitute->bytecodeProvider->msPlugin->getBytecodeProvider->graph->debug->getOptions->new->StructuredGraph.Builder->method->compilationId->bytecodeProvider->shouldRecordMethodDependencies->recordInlinedMethods->setIsSubstitution->build->try->scope->debug->scope->plugins->getGraphBuilderPlugins->new->Plugins->config->GraphBuilderConfiguration->getSnippetDefault->initialReplacementContext->new->IntrinsicContext->new->GraphBuilderPhase.Instance->apply->return->catch->debug->handle->finally->return
ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition, IntrinsicContext.CompilationContext):::Creates a preprocessed graph for a snippet or method substitution.:::return->createGraphMaker->makeGraph
ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition):::Creates a preprocessed graph for a snippet or method substitution with a context of :::return->makeGraph
ReplacementsImpl#createGraphMaker(ResolvedJavaMethod, ResolvedJavaMethod):::Can be overridden to return an object that specializes various parts of graph preprocessing.:::return->new->GraphMaker
ReplacementsImpl.GraphMaker#makeGraph(DebugContext, BytecodeProvider, Object[], boolean, NodeSourcePosition, IntrinsicContext.CompilationContext)::: graph maker make graph:::try->s->debug->scope->graph->buildInitialGraph->finalizeGraph->debug->method->getName->dump->return->catch->throw->debug->handle->finally
ReplacementsImpl.GraphMaker#finalizeGraph(StructuredGraph):::Does final processing of a snippet graph.:::if->graph->getOptions->getValue->graph->getNodes->filter->isEmpty->sideEffectCount->new->ConvertDeoptimizeToGuardPhase->apply->new->DeadCodeEliminationPhase->apply->else
ReplacementsImpl.GraphMaker#hasSideEffect(Node):::Filter nodes which have side effects and shouldn't be deleted from snippets when converting deoptimizations to guards:::if->if->hasSideEffect->if->callTarget->callTarget->if->targetMethod->targetMethod->if->targetMethod->isConstructor->throwableType->getMetaAccess->lookupJavaType->return->throwableType->targetMethod->getDeclaringClass->isAssignableFrom->return->return
ReplacementsImpl.GraphMaker.EncodedIntrinsicContext#isDeferredInvoke(StateSplit)::: encoded intrinsic context is deferred invoke:::if->invoke->method->invoke->callTarget->targetMethod->if->method->getAnnotation->return->annotation->method->getAnnotation->if->annotation->hasSideEffect->return->return
ReplacementsImpl.GraphMaker#buildInitialGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, IntrinsicContext.CompilationContext):::Builds the initial graph for a replacement.:::graph->debug->getOptions->new->StructuredGraph.Builder->method->trackNodeSourcePosition->callerContext->setIsSubstitution->build->graph->disableUnsafeAccessTracking->try->s->debug->scope->metaAccess->getMetaAccess->plugins->new->Plugins->config->GraphBuilderConfiguration->getSnippetDefault->if->plugins->new->ConstantBindingParameterPlugin->prependParameterPlugin->initialIntrinsicContext->snippetAnnotation->method->getAnnotation->methodAnnotation->method->getAnnotation->if->new->EncodedIntrinsicContext->else->original->snippetAnnotation->allowPartialIntrinsicArgumentMismatch->new->EncodedIntrinsicContext->createGraphBuilder->apply->new->CanonicalizerPhase->apply->catch->throw->debug->handle->finally->return
ReplacementsImpl.GraphMaker#createGraphBuilder(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)::: graph maker create graph builder:::return->new->GraphBuilderPhase.Instance
ReplacementsImpl#registerSnippetTemplateCache(SnippetTemplateCache)::: replacements impl register snippet template cache:::snippetTemplateCache->templates->getClass->getName->put
ReplacementsImpl#getSnippetTemplateCache(Class)::: replacements impl get snippet template cache:::ret->snippetTemplateCache->templatesClass->getName->get->return->templatesClass->cast
ReplacementsUtil#staticAssert(boolean, String):::Asserts that condition evaluates to true by the time compilation is finished:::if->AssertionNode->assertion
ReplacementsUtil#staticAssert(boolean, String, Object)::: replacements util static assert:::if->AssertionNode->assertion
ReplacementsUtil#staticAssert(boolean, String, Object, Object)::: replacements util static assert:::if->AssertionNode->assertion
ReplacementsUtil#runtimeAssert(boolean, String):::Asserts that condition evaluates to true at runtime:::if->AssertionNode->assertion
ReplacementsUtil#arrayIndexScale(MetaAccessProvider, JavaKind)::: replacements util array index scale:::return->metaAccessProvider->getArrayIndexScale
ReplacementsUtil#getArrayBaseOffset(MetaAccessProvider, JavaKind)::: replacements util get array base offset:::return->metaAccessProvider->getArrayBaseOffset
SnippetCounter.Group.Factory#createSnippetCounterGroup(String):::If snippet counters are GraalOptions#SnippetCounters enabled, creates and registers a Group with the given name:::
SnippetCounter.Group#toString()::: group to string:::Collections->sort->total->maxNameLen->foreach->Math->length->max->buf->String->format->new->StringBuilder->formatString->String->format->length->foreach->percent->buf->String->format->append->buf->String->format->append->return->buf->toString
SnippetCounter#compareTo(SnippetCounter):::Sorts counters in descending order of their #value() values.:::return->Long->signum
SnippetCounter#getGroup()::: snippet counter get group:::return
SnippetCounter#inc():::Increments the value of this counter:::if->getGroup->SnippetCounterNode->increment
SnippetCounter#add(int):::Increments the value of this counter:::if->getGroup->SnippetCounterNode->add
SnippetCounter#value():::Gets the value of this counter.:::return
SnippetCounter#toString()::: snippet counter to string:::if->return->return->super->toString
SnippetCounterNode#getCounter()::: snippet counter node get counter:::return
SnippetCounterNode#getIncrement()::: snippet counter node get increment:::return
SnippetCounterNode#add(SnippetCounter, int)::: snippet counter node add:::
SnippetCounterNode#increment(SnippetCounter)::: snippet counter node increment:::add
SnippetCounterNode#lower(LoweringTool)::: snippet counter node lower:::if->graph->getGuardsStage->areFrameStatesAtDeopts->templates->tool->getReplacements->getSnippetTemplateCache->templates->lower
SnippetCounterNode#addSnippetCounters(LocationIdentity[]):::Add #SNIPPET_COUNTER_LOCATION to privateLocations if it isn't already there.:::foreach->if->location->equals->return->result->Arrays->copyOf->return
SnippetCounterNode.SnippetCounterSnippets#countOffset()::: snippet counter snippets count offset:::try->return->UNSAFE->getDeclaredField->objectFieldOffset->catch->throw->new->GraalError->finally
SnippetCounterNode.SnippetCounterSnippets#add(SnippetCounter, int)::: snippet counter snippets add:::loadedValue->ObjectAccess->countOffset->readLong->ObjectAccess->countOffset->writeLong
SnippetCounterNode.SnippetCounterSnippets.Templates#lower(SnippetCounterNode, LoweringTool)::: templates lower:::graph->counter->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->counter->getCounter->addConst->args->counter->getIncrement->add->template->providers->getMetaAccess->instantiate
SnippetIntegerHistogram#createCounter(SnippetCounter.Group, String, String, long, long)::: snippet integer histogram create counter:::if->snippetCounter->new->SnippetCounter->return->return
SnippetIntegerHistogram#inc(long):::Increments the value of the matching histogram element:::if->if->counter0->inc->else->if->counter1->inc->else->if->counter2->inc->else->if->counter3->inc->else->if->counter4->inc->else->if->counter5->inc->else->if->counter6->inc->else->if->counter7->inc->else->if->counter8->inc->else->if->counter9->inc->else->counter10->inc
SnippetIntegerHistogram#toString()::: snippet integer histogram to string:::if->return->return->super->toString
SnippetLowerableMemoryNode.SnippetLowering#lower(SnippetLowerableMemoryNode, LoweringTool)::: snippet lowering lower:::
SnippetLowerableMemoryNode#getArgument(int)::: snippet lowerable memory node get argument:::return->arguments->get
SnippetLowerableMemoryNode#getArgumentCount()::: snippet lowerable memory node get argument count:::return->arguments->size
SnippetLowerableMemoryNode#lower(LoweringTool)::: snippet lowerable memory node lower:::lowering->lower
SnippetLowerableMemoryNode#getLocationIdentity()::: snippet lowerable memory node get location identity:::return
SnippetLowerableMemoryNode#getLastLocationAccess()::: snippet lowerable memory node get last location access:::return
SnippetLowerableMemoryNode#setLastLocationAccess(MemoryNode)::: snippet lowerable memory node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
SnippetTemplate.SnippetInfo#getReceiver()::: snippet info get receiver:::return
SnippetTemplate.SnippetInfo#hasReceiver()::: snippet info has receiver:::return->hasReceiver
SnippetTemplate.SnippetInfo#hasReceiver(ResolvedJavaMethod)::: snippet info has receiver:::return->method->hasReceiver
SnippetTemplate.SnippetInfo.Lazy#initNames(ResolvedJavaMethod, int)::: lazy init names:::new->StringArr->offset->if->method->hasReceiver->params->method->getParameters->if->for->i->else->slotIdx->localVariableTable->method->getLocalVariableTable->if->for->i->return
SnippetTemplate.SnippetInfo#lazy()::: snippet info lazy:::
SnippetTemplate.SnippetInfo#getMethod()::: snippet info get method:::return
SnippetTemplate.SnippetInfo#getParameterCount()::: snippet info get parameter count:::return->lazy
SnippetTemplate.SnippetInfo#isConstantParameter(int)::: snippet info is constant parameter:::return->lazy
SnippetTemplate.SnippetInfo#isVarargsParameter(int)::: snippet info is varargs parameter:::return->lazy
SnippetTemplate.SnippetInfo#isNonNullParameter(int)::: snippet info is non null parameter:::return->lazy
SnippetTemplate.SnippetInfo#getParameterName(int)::: snippet info get parameter name:::names->lazy->if->return->return
SnippetTemplate.SnippetInfo#toString()::: snippet info to string:::return->getClass->getSimpleName->method->format
SnippetTemplate.LazySnippetInfo#lazy()::: lazy snippet info lazy:::if->lazy->get->lazy->new->Lazy->compareAndSet->return->lazy->get
SnippetTemplate.EagerSnippetInfo#lazy()::: eager snippet info lazy:::return
SnippetTemplate.Arguments#add(String, Object)::: arguments add:::return
SnippetTemplate.Arguments#addConst(String, Object)::: arguments add const:::return->addConst
SnippetTemplate.Arguments#addConst(String, Object, Stamp)::: arguments add const:::cacheKey->setParam->return
SnippetTemplate.Arguments#addVarargs(String, Class, Stamp, Object)::: arguments add varargs:::varargs->new->Varargs->cacheKey->setParam->return
SnippetTemplate.Arguments#setCacheable(boolean)::: arguments set cacheable:::
SnippetTemplate.Arguments#check(String, boolean, boolean)::: arguments check:::return
SnippetTemplate.Arguments#toString()::: arguments to string:::result->new->StringBuilder->result->append->format->append->append->sep->for->i->info->getParameterCount->result->append->return->result->toString
SnippetTemplate.Arguments#formatTo(Formatter, int, int, int)::: arguments format to:::if->formatter->toString->applyFormattingFlagsAndWidth->format->else->sb->new->StringBuilder->sb->getName->append->append->sep->for->i->info->getParameterCount->sb->append->string->sb->toString->if->string->indexOf->string->replace->formatter->applyFormattingFlagsAndWidth->format
SnippetTemplate.Varargs#toString()::: varargs to string:::if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->if->return->Arrays->toString->return->String->valueOf
SnippetTemplate.VarargsPlaceholderNode#findLength(FindLengthMode, ConstantReflectionProvider)::: varargs placeholder node find length:::return->ConstantNode->forInt
SnippetTemplate.CacheKey#setParam(int, Object)::: cache key set param:::value->hashCode
SnippetTemplate.CacheKey#equals(Object)::: cache key equals:::if->return->other->if->method->equals->return->if->return->for->i->return
SnippetTemplate.CacheKey#hashCode()::: cache key hash code:::return
SnippetTemplate.AbstractTemplates#getProviders()::: abstract templates get providers:::return
SnippetTemplate.AbstractTemplates#findMethod(Class, String, Method)::: abstract templates find method:::foreach->declaringClass->getDeclaredMethods->if->m->getName->equals->m->equals->return->return
SnippetTemplate.AbstractTemplates#findMethod(MetaAccessProvider, Class, String)::: abstract templates find method:::type->metaAccess->lookupJavaType->result->foreach->type->getDeclaredMethods->if->m->getName->equals->if->Assertions->assertionsEnabled->return->else->if->throw->new->GraalError->return
SnippetTemplate.AbstractTemplates#snippet(Class, String, LocationIdentity...)::: abstract templates snippet:::return->snippet
SnippetTemplate.AbstractTemplates#snippet(Class, String, ResolvedJavaMethod, Object, LocationIdentity...):::Finds the unique method in declaringClass named methodName annotated by Snippet and returns a SnippetInfo value describing it:::javaMethod->providers->getMetaAccess->findMethod->providers->getReplacements->getValue->registerSnippet->privateLocations->getValue->SnippetCounterNode->addSnippetCounters->if->getValue->return->new->EagerSnippetInfo->else->return->new->LazySnippetInfo
SnippetTemplate.AbstractTemplates#openDebugContext(DebugContext, Arguments)::: abstract templates open debug context:::if->DebugStubsAndSnippets->getValue->description->nextSnippetTemplateId->incrementAndGet->new->Description->return->DebugContext->outer->getGlobalMetrics->create->return->DebugContext->disabled
SnippetTemplate.AbstractTemplates#template(ValueNode, Arguments):::Gets a template for a given key, creating it first if necessary.:::graph->replacee->graph->outer->graph->getDebug->template->getValue->templates->get->if->graph->trackNodeSourcePosition->trackNodeSourcePosition->try->debug->openDebugContext->try->a->SnippetTemplateCreationTime->start->s->debug->scope->SnippetTemplates->increment->snippetOptions->getValue->new->OptionValues->graph->trackNodeSourcePosition->new->SnippetTemplate->if->getValue->templates->put->catch->throw->debug->handle->finally->catch->finally->return
SnippetTemplate.LRUCache#removeEldestEntry(java.util.Map.Entry)::: cache remove eldest entry:::return->size
SnippetTemplate#hasConstantParameter(ResolvedJavaMethod):::Determines if any parameter of a given method is annotated with ConstantParameter.:::foreach->method->getParameterAnnotations->if->return->return
SnippetTemplate#verifyIntrinsicsProcessed(StructuredGraph)::: snippet template verify intrinsics processed:::foreach->snippetCopy->getNodes->targetMethod->target->targetMethod->if->return
SnippetTemplate#explodeLoops(StructuredGraph, CoreProviders)::: snippet template explode loops:::exploded->do->explodeLoop->snippetCopy->getNodes->filter->first->if->loopBegin->explodeLoop->findLoopBegin->if->loop->new->LoopsData->loop->mark->snippetCopy->getMark->LoopTransformations->new->CanonicalizerPhase->fullUnroll->new->CanonicalizerPhase->applyIncremental->loop->deleteUnusedNodes->GraphUtil->removeFixedWithUnusedInputs->while
SnippetTemplate#getConstantArgs(Arguments)::: snippet template get constant args:::constantArgs->clone->for->i->getParameterCount->return
SnippetTemplate#checkAllVarargPlaceholdersAreDeleted(int, VarargsPlaceholderNode[])::: snippet template check all vararg placeholders are deleted:::for->i->return
SnippetTemplate#checkConstantArgument(MetaAccessProvider, ResolvedJavaMethod, Signature, int, String, Object, JavaKind)::: snippet template check constant argument:::type->signature->method->getDeclaringClass->getParameterType->method->getDeclaringClass->resolve->if->metaAccess->lookupJavaType->isAssignableFrom->return->if->return
SnippetTemplate#checkVarargs(MetaAccessProvider, ResolvedJavaMethod, Signature, int, String, Varargs)::: snippet template check varargs:::type->signature->method->getDeclaringClass->getParameterType->return
SnippetTemplate#bind(StructuredGraph, MetaAccessProvider, Arguments):::Gets the instantiation-time bindings to this template's parameters.:::replacements->EconomicMap->create->for->i->return
SnippetTemplate#forBoxed(Object, JavaKind):::Converts a Java boxed value to a JavaConstant of the right kind:::if->return->JavaConstant->forBoxedPrimitive->return->snippetReflection->forBoxed
SnippetTemplate.UsageReplacer#replace(ValueNode, ValueNode):::Replaces all usages of oldNode with direct or indirect usages of newNode.:::
SnippetTemplate#assertSnippetKills(ValueNode)::: snippet template assert snippet kills:::if->replacee->graph->isAfterFloatingReadPhase->return->if->return->memoryMap->returnNode->getMemoryMap->if->memoryMap->isEmpty->return->kills->EconomicSet->create->kills->memoryMap->getLocations->addAll->if->locationIdentity->getLocationIdentity->if->locationIdentity->isAny->return->kills->remove->if->memoryMap->any->getLastLocationAccess->kills->any->remove->foreach->kills->remove->return
SnippetTemplate.MemoryInputMap#getLastLocationAccess(LocationIdentity)::: memory input map get last location access:::if->locationIdentity->equals->return->else->return
SnippetTemplate.MemoryInputMap#getLocations()::: memory input map get locations:::if->return->Collections->emptySet->else->return->Collections->singleton
SnippetTemplate.MemoryOutputMap#getLastLocationAccess(LocationIdentity)::: memory output map get last location access:::memoryMap->returnNode->getMemoryMap->lastLocationAccess->memoryMap->getLastLocationAccess->if->return->super->getLastLocationAccess->else->return->duplicates->ValueNodeUtil->asNode->get
SnippetTemplate.MemoryOutputMap#getLocations()::: memory output map get locations:::return->returnNode->getMemoryMap->getLocations
SnippetTemplate#rewireMemoryGraph(ValueNode, UnmodifiableEconomicMap)::: snippet template rewire memory graph:::if->replacee->graph->isAfterFloatingReadPhase->new->MemoryOutputMap->replaceMemoryUsages->if->ret->duplicates->get->if->memoryMap->ret->getMemoryMap->if->ret->setMemoryMap->memoryMap->safeDelete->if->memoryDuplicate->duplicates->get->new->MemoryInputMap->replaceMemoryUsages->if->memoryDuplicate->hasNoUsages->if->memoryDuplicate->next->memoryDuplicate->graph->removeFixed->else->memoryDuplicate->safeDelete
SnippetTemplate#getLocationIdentity(Node)::: snippet template get location identity:::if->return->getLocationIdentity->else->if->return->getLocationIdentity->else->if->return->getLocationIdentity->else->return
SnippetTemplate#replaceMemoryUsages(ValueNode, MemoryMap)::: snippet template replace memory usages:::foreach->node->usages->snapshot->if->continue->location->getLocationIdentity->if->foreach->usage->inputPositions->if->pos->getInputType->pos->get->replacement->map->getLastLocationAccess->if->else->pos->replacement->asNode->set
SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments):::Replaces a given fixed node with this specialized snippet.:::return->instantiate
SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments, boolean):::Replaces a given fixed node with this specialized snippet.:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->firstCFGNode->entryPointNode->next->replaceeGraph->replacee->graph->replacements->bind->replacements->AbstractBeginNode->prevBegin->put->duplicates->inlineSnippet->firstCFGNodeDuplicate->duplicates->get->replacee->replaceAtPredecessor->rewireFrameStates->updateStamps->rewireMemoryGraph->returnValue->if->returnDuplicate->duplicates->get->returnDuplicate->result->if->replacee->usages->isNotEmpty->replacer->replace->else->replacer->replace->if->returnDuplicate->isAlive->next->if->fwn->fwn->next->fwn->setNext->returnDuplicate->replaceAndDelete->if->GraphUtil->killCFG->debug->dump->return->catch->finally
SnippetTemplate#inlineSnippet(Node, DebugContext, StructuredGraph, EconomicMap)::: snippet template inline snippet:::mark->replaceeGraph->getMark->try->scope->replaceeGraph->getInliningLog->log->replaceeGraph->getInliningLog->if->log->trackNewCallsite->openUpdateScope->duplicates->replaceeGraph->snippet->getNodeCount->addDuplicates->if->replaceeGraph->getInliningLog->snippet->getInliningLog->addLog->position->replacee->getNodeSourcePosition->InliningUtil->updateSourcePosition->debug->snippet->method->dump->return->catch->finally
SnippetTemplate#propagateStamp(Node)::: snippet template propagate stamp:::if->phi->if->phi->inferStamp->foreach->node->usages->propagateStamp
SnippetTemplate#updateStamps(ValueNode, UnmodifiableEconomicMap)::: snippet template update stamps:::foreach->dup->duplicates->get->replaceeStamp->replacee->stamp->if->placeholderDup->placeholderDup->makeReplacement->else->dup->setStamp->foreach->snippet->getNodes->foreach->paramNode->usages->usageDup->duplicates->get->propagateStamp
SnippetTemplate#copySpecializedGraph(DebugContext):::Gets a copy of the specialized graph.:::return->snippet->copy
SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, LoweringTool, Arguments):::Replaces a given floating node with this specialized snippet.:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->firstCFGNode->entryPointNode->next->replaceeGraph->replacee->graph->replacements->bind->replacements->tool->getCurrentGuardAnchor->asNode->put->duplicates->inlineSnippet->lastFixedNode->tool->lastFixedNode->next->lastFixedNode->next->lastFixedNode->setNext->firstCFGNodeDuplicate->duplicates->get->replaceeGraph->addAfterFixed->updateStamps->rewireMemoryGraph->returnDuplicate->duplicates->get->returnValue->returnDuplicate->result->replacer->replace->if->returnDuplicate->isAlive->returnDuplicate->replaceAndDelete->debug->dump->catch->finally
SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, Arguments):::Replaces a given floating node with this specialized snippet:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->replaceeGraph->replacee->graph->replacements->bind->anchorDuplicate->if->replaceeGraph->new->MemoryAnchorNode->add->replacements->put->floatingNodes->nodes->size->new->ArrayList<>->foreach->if->floatingNodes->add->duplicates->inlineSnippet->updateStamps->rewireMemoryGraph->returnValue->duplicates->returnNode->result->get->replacer->replace->debug->dump->catch->finally
SnippetTemplate#rewireFrameStates(ValueNode, UnmodifiableEconomicMap)::: snippet template rewire frame states:::if->replacee->graph->getGuardsStage->areFrameStatesAtSideEffects->foreach->sideEffectDup->duplicates->sideEffectNode->asNode->get->stateAfter->setStateAfter->else->if->replacee->graph->getGuardsStage->areFrameStatesAtDeopts->replaceeDeopt->stateBefore->stateDuring->stateAfter->if->replaceeDeopt->canDeoptimize->if->stateBefore->if->stateDuring->if->stateAfter->foreach->deoptDup->duplicates->deoptNode->asNode->get->if->deoptDup->canDeoptimize->if->setStateBefore->if->deoptDupDuring->if->deoptDupDuring->setStateDuring->else->if->deoptDupDuring->computeStateDuring->else->if->deoptDupDuring->setStateDuring->if->deoptDupAfter->if->deoptDupAfter->setStateAfter->else->deoptDupAfter->setStateAfter
SnippetTemplate#toString()::: snippet template to string:::buf->snippet->toString->new->StringBuilder->append->sep->for->i->return->buf->append->toString
SnippetTemplate#checkTemplate(MetaAccessProvider, Arguments, ResolvedJavaMethod, Signature)::: snippet template check template:::offset->hasReceiver->for->i->getParameterCount->return
SnippetTemplate#setMayRemoveLocation(boolean)::: snippet template set may remove location:::
StandardGraphBuilderPlugins#registerInvocationPlugins(MetaAccessProvider, SnippetReflectionProvider, InvocationPlugins, BytecodeProvider, boolean, boolean)::: standard graph builder plugins register invocation plugins:::registerObjectPlugins->registerClassPlugins->registerMathPlugins->registerStrictMathPlugins->registerUnsignedMathPlugins->registerStringPlugins->registerCharacterPlugins->registerShortPlugins->registerIntegerLongPlugins->registerIntegerLongPlugins->registerFloatPlugins->registerDoublePlugins->registerArraysPlugins->registerArrayPlugins->registerUnsafePlugins->registerEdgesPlugins->registerGraalDirectivesPlugins->registerBoxingPlugins->registerJMHBlackholePlugins->registerJFRThrowablePlugins->registerMethodHandleImplPlugins->registerJcovCollectPlugins
StandardGraphBuilderPlugins#registerStringPlugins(InvocationPlugins, BytecodeProvider, SnippetReflectionProvider)::: standard graph builder plugins register string plugins:::r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->if->r->registerMethodSubstitution->r->new->StringIndexOfConstantPlugin->register7->sr->new->Registration->sr->new->InvocationPlugin->register1->else->r->registerMethodSubstitution->utf16sub->new->Registration->utf16sub->new->InvocationPlugin->register2->utf16sub->new->InvocationPlugin->register3->latin1r->new->Registration->latin1r->new->StringLatin1IndexOfConstantPlugin->register5->utf16r->new->Registration->utf16r->new->StringUTF16IndexOfConstantPlugin->register5->utf16r->setAllowOverwrite->utf16r->registerMethodSubstitution->utf16r->registerMethodSubstitution->sr->new->Registration->sr->new->InvocationPlugin->register1->sr->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerArraysPlugins(InvocationPlugins, BytecodeProvider)::: standard graph builder plugins register arrays plugins:::r->new->Registration->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution
StandardGraphBuilderPlugins#registerArrayPlugins(InvocationPlugins, BytecodeProvider)::: standard graph builder plugins register array plugins:::r->new->Registration->r->new->InvocationPlugin->register2->r->registerMethodSubstitution
StandardGraphBuilderPlugins.MathSqrtPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)::: math sqrt plugin apply:::b->b->SqrtNode->create->append->push->return
StandardGraphBuilderPlugins.UnsafeCompareAndUpdatePluginsRegistrar#register(Registration, String, boolean, JavaKind[])::: unsafe compare and update plugins registrar register:::foreach->javaClass->kind->toJavaClass->r->kind->name->returnKind->new->UnsafeAccessPlugin->register5
StandardGraphBuilderPlugins.UnsafeCompareAndUpdatePluginsRegistrar#createNode(ValueNode, ValueNode, ValueNode, ValueNode, JavaKind, LocationIdentity)::: unsafe compare and update plugins registrar create node:::
StandardGraphBuilderPlugins.UnsafeCompareAndUpdatePluginsRegistrar#returnKind(JavaKind)::: unsafe compare and update plugins registrar return kind:::
StandardGraphBuilderPlugins.UnsafeCompareAndSwapPluginsRegistrar#createNode(ValueNode, ValueNode, ValueNode, ValueNode, JavaKind, LocationIdentity)::: unsafe compare and swap plugins registrar create node:::return->new->UnsafeCompareAndSwapNode
StandardGraphBuilderPlugins.UnsafeCompareAndSwapPluginsRegistrar#returnKind(JavaKind)::: unsafe compare and swap plugins registrar return kind:::return->getStackKind
StandardGraphBuilderPlugins.UnsafeCompareAndExchangePluginsRegistrar#createNode(ValueNode, ValueNode, ValueNode, ValueNode, JavaKind, LocationIdentity)::: unsafe compare and exchange plugins registrar create node:::return->new->UnsafeCompareAndExchangeNode
StandardGraphBuilderPlugins.UnsafeCompareAndExchangePluginsRegistrar#returnKind(JavaKind)::: unsafe compare and exchange plugins registrar return kind:::if->accessKind->isNumericInteger->return->accessKind->getStackKind->else->return
StandardGraphBuilderPlugins#registerPlatformSpecificUnsafePlugins(InvocationPlugins, BytecodeProvider, boolean, JavaKind[])::: standard graph builder plugins register platform specific unsafe plugins:::new->Registration->registerPlatformSpecificUnsafePlugins->if->new->Registration->registerPlatformSpecificUnsafePlugins
StandardGraphBuilderPlugins#registerPlatformSpecificUnsafePlugins(JavaKind[], Registration, boolean, boolean)::: standard graph builder plugins register platform specific unsafe plugins:::if->unsafeCompareAndSwapPluginsRegistrar->new->JavaKindArr->register->else->unsafeCompareAndSwapPluginsRegistrar->register->unsafeCompareAndExchangePluginsRegistrar->register
StandardGraphBuilderPlugins#registerUnsafePlugins(InvocationPlugins, BytecodeProvider, boolean)::: standard graph builder plugins register unsafe plugins:::new->Registration->registerUnsafePlugins->if->new->Registration->registerUnsafePlugins
StandardGraphBuilderPlugins#registerUnsafePlugins(Registration, boolean, boolean)::: standard graph builder plugins register unsafe plugins:::foreach->JavaKind->values->if->kind->isPrimitive->javaClass->kind->toJavaClass->kindName->kind->name->getName->putName->r->new->UnsafeGetPlugin->register3->r->new->UnsafePutPlugin->register4->r->new->UnsafeGetPlugin->register3->r->new->UnsafePutPlugin->register4->if->if->r->new->UnsafePutPlugin->register4->else->r->new->UnsafePutPlugin->register4->r->new->UnsafeGetPlugin->register3->r->new->UnsafePutPlugin->register4->r->new->UnsafeGetPlugin->register3->if->r->new->UnsafeGetPlugin->register2->r->kind->toJavaClass->new->UnsafePutPlugin->register3->r->new->UnsafeGetPlugin->register2->r->new->UnsafePutPlugin->register3->r->new->InvocationPlugin->register2->r->new->UnsafeFencePlugin->register1->r->new->UnsafeFencePlugin->register1->r->new->UnsafeFencePlugin->register1
StandardGraphBuilderPlugins#registerIntegerLongPlugins(InvocationPlugins, JavaKind)::: standard graph builder plugins register integer long plugins:::declaringClass->kind->toBoxedJavaClass->type->kind->toJavaClass->r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register2
StandardGraphBuilderPlugins#registerCharacterPlugins(InvocationPlugins)::: standard graph builder plugins register character plugins:::r->new->Registration->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerShortPlugins(InvocationPlugins)::: standard graph builder plugins register short plugins:::r->new->Registration->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerFloatPlugins(InvocationPlugins)::: standard graph builder plugins register float plugins:::r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerDoublePlugins(InvocationPlugins)::: standard graph builder plugins register double plugins:::r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#createIntegerExactArithmeticGuardNode(GraphBuilderContext, ValueNode, ValueNode, IntegerExactOp)::: standard graph builder plugins create integer exact arithmetic guard node:::overflowCheck->switch->new->IntegerAddExactOverflowNode->break->new->IntegerSubExactOverflowNode->break->new->IntegerMulExactOverflowNode->break->throw->GraalError->shouldNotReachHere->return->b->new->FixedGuardNode->add
StandardGraphBuilderPlugins#createIntegerExactArithmeticNode(GraphBuilderContext, ValueNode, ValueNode, IntegerExactOp)::: standard graph builder plugins create integer exact arithmetic node:::switch->return->createIntegerExactArithmeticGuardNode->new->IntegerAddExactNode->return->createIntegerExactArithmeticGuardNode->new->IntegerSubExactNode->return->createIntegerExactArithmeticGuardNode->new->IntegerMulExactNode->throw->GraalError->shouldNotReachHere
StandardGraphBuilderPlugins#createIntegerExactSplit(ValueNode, ValueNode, AbstractBeginNode, IntegerExactOp)::: standard graph builder plugins create integer exact split:::switch->return->x->stamp->unrestricted->new->IntegerAddExactSplitNode->return->x->stamp->unrestricted->new->IntegerSubExactSplitNode->return->x->stamp->unrestricted->new->IntegerMulExactSplitNode->throw->GraalError->shouldNotReachHere
StandardGraphBuilderPlugins#createIntegerExactOperation(GraphBuilderContext, JavaKind, ValueNode, ValueNode, IntegerExactOp)::: standard graph builder plugins create integer exact operation:::if->b->needsExplicitException->exceptionKind->exceptionEdge->b->genExplicitExceptionEdge->split->b->createIntegerExactSplit->addPush->split->b->new->BeginNode->add->setNext->else->b->createIntegerExactArithmeticNode->addPush
StandardGraphBuilderPlugins#registerMathPlugins(InvocationPlugins, boolean)::: standard graph builder plugins register math plugins:::r->new->Registration->if->foreach->new->JavaKindArr->type->kind->toJavaClass->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->MathSqrtPlugin->register1
StandardGraphBuilderPlugins#registerStrictMathPlugins(InvocationPlugins)::: standard graph builder plugins register strict math plugins:::r->new->Registration->r->new->MathSqrtPlugin->register1
StandardGraphBuilderPlugins.StringIndexOfConstantPlugin#inlineOnly()::: string index of constant plugin inline only:::return
StandardGraphBuilderPlugins.StringIndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: string index of constant plugin apply:::if->target->isConstant->b->b->getInvokeKind->b->bci->b->b->getAssumptions->getInvokeReturnStamp->new->StringIndexOfNode->addPush->return->return
StandardGraphBuilderPlugins.StringLatin1IndexOfConstantPlugin#inlineOnly()::: string latin1 index of constant plugin inline only:::return
StandardGraphBuilderPlugins.StringLatin1IndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: string latin1 index of constant plugin apply:::if->target->isConstant->b->b->getInvokeKind->b->bci->b->b->getAssumptions->getInvokeReturnStamp->new->StringLatin1IndexOfNode->addPush->return->return
StandardGraphBuilderPlugins.StringUTF16IndexOfConstantPlugin#inlineOnly()::: string f16 index of constant plugin inline only:::return
StandardGraphBuilderPlugins.StringUTF16IndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)::: string f16 index of constant plugin apply:::if->target->isConstant->b->b->getInvokeKind->b->bci->b->b->getAssumptions->getInvokeReturnStamp->new->StringUTF16IndexOfNode->addPush->return->return
StandardGraphBuilderPlugins.UnsignedMathPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)::: unsigned math plugin apply:::canonical->condition->canonicalize->graph->b->getGraph->lhs->canonical->mustMirror->rhs->canonical->mustMirror->trueValue->ConstantNode->canonical->mustNegate->forBoolean->falseValue->ConstantNode->canonical->mustNegate->forBoolean->compare->CompareNode->b->getConstantReflection->b->getMetaAccess->b->getOptions->canonical->getCanonicalCondition->createCompareNode->b->new->ConditionalNode->addPush->return
StandardGraphBuilderPlugins#registerUnsignedMathPlugins(InvocationPlugins)::: standard graph builder plugins register unsigned math plugins:::r->new->Registration->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2->r->new->UnsignedMathPlugin->register2
StandardGraphBuilderPlugins#registerBoxingPlugins(InvocationPlugins)::: standard graph builder plugins register boxing plugins:::foreach->JavaKind->values->if->kind->isPrimitive->new->BoxPlugin->register->new->UnboxPlugin->register
StandardGraphBuilderPlugins#registerObjectPlugins(InvocationPlugins)::: standard graph builder plugins register object plugins:::r->new->Registration->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerClassPlugins(InvocationPlugins)::: standard graph builder plugins register class plugins:::r->new->Registration->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register2
StandardGraphBuilderPlugins#registerEdgesPlugins(MetaAccessProvider, InvocationPlugins):::Substitutions for improving the performance of some critical methods in Edges:::r->new->Registration->foreach->new->Class<?>Arr->r->c->getSimpleName->new->InvocationPlugin->register2->r->c->getSimpleName->new->InvocationPlugin->register3
StandardGraphBuilderPlugins.BoxPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)::: box plugin apply:::if->b->parsingIntrinsic->rootMethod->b->getGraph->method->if->b->getMetaAccess->lookupJavaType->rootMethod->getDeclaringClass->isAssignableFrom->return->resultType->b->getMetaAccess->kind->toBoxedJavaClass->lookupJavaType->b->new->BoxNode->addPush->return
StandardGraphBuilderPlugins.BoxPlugin#register(InvocationPlugins)::: box plugin register:::plugins->kind->toBoxedJavaClass->kind->toJavaClass->register
StandardGraphBuilderPlugins.UnboxPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver)::: unbox plugin apply:::if->b->parsingIntrinsic->rootMethod->b->getGraph->method->if->b->getMetaAccess->lookupJavaType->rootMethod->getDeclaringClass->isAssignableFrom->return->valueNode->UnboxNode->b->getMetaAccess->b->getConstantReflection->receiver->get->create->b->addPush->return
StandardGraphBuilderPlugins.UnboxPlugin#register(InvocationPlugins)::: unbox plugin register:::name->kind->toJavaClass->getSimpleName->plugins->kind->toBoxedJavaClass->register
StandardGraphBuilderPlugins.UnsafeAccessPlugin.UnsafeNodeConstructor#create(ValueNode, LocationIdentity)::: unsafe node constructor create:::
StandardGraphBuilderPlugins.UnsafeAccessPlugin#createObjectAccessNode(ValueNode, UnsafeNodeConstructor)::: unsafe access plugin create object access node:::return->nodeConstructor->create
StandardGraphBuilderPlugins.UnsafeAccessPlugin#createMemoryAccessNode(StructuredGraph, UnsafeNodeConstructor)::: unsafe access plugin create memory access node:::return->nodeConstructor->ConstantNode->forLong->create
StandardGraphBuilderPlugins.UnsafeAccessPlugin#isLoad(ValueNode)::: unsafe access plugin is load:::return->node->getStackKind
StandardGraphBuilderPlugins.UnsafeAccessPlugin#setResult(ValueNode, GraphBuilderContext)::: unsafe access plugin set result:::if->isLoad->b->addPush->else->b->add
StandardGraphBuilderPlugins.UnsafeAccessPlugin#createUnsafeAccess(ValueNode, GraphBuilderContext, UnsafeNodeConstructor)::: unsafe access plugin create unsafe access:::graph->b->getGraph->graph->markUnsafeAccess->if->createObjectAccessNode->setResult->else->if->StampTool->isPointerAlwaysNull->createMemoryAccessNode->setResult->else->if->StampTool->isPointerNonNull->createObjectAccessNode->setResult->else->objectAccess->graph->createObjectAccessNode->add->memoryAccess->graph->createMemoryAccessNode->add->accessNodes->new->FixedWithNextNodeArr->condition->graph->IsNullNode->create->addOrUniqueWithInputs->b->new->IfNode->add->merge->b->new->MergeNode->append->foreach->endNode->graph->new->EndNode->add->node->setNext->if->if->isLoad->b->push->b->setStateAfter->if->isLoad->popped->b->pop->merge->addForwardEnd->if->isLoad->phi->objectAccess->stamp->new->ValuePhiNode->b->graph->addOrUnique->push->b->setStateAfter
StandardGraphBuilderPlugins.UnsafeGetPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)::: unsafe get plugin apply:::unsafe->get->b->new->UnsafeMemoryLoadNode->addPush->b->getGraph->markUnsafeAccess->return
StandardGraphBuilderPlugins.UnsafeGetPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)::: unsafe get plugin apply:::unsafe->get->if->b->new->MembarNode->add->new->RawLoadNode->createUnsafeAccess->if->b->new->MembarNode->add->return
StandardGraphBuilderPlugins.UnsafePutPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)::: unsafe put plugin apply:::unsafe->get->b->new->UnsafeMemoryStoreNode->add->b->getGraph->markUnsafeAccess->return
StandardGraphBuilderPlugins.UnsafePutPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode, ValueNode)::: unsafe put plugin apply:::unsafe->get->if->b->new->MembarNode->add->maskedValue->b->maskSubWordValue->new->RawStoreNode->createUnsafeAccess->if->b->new->MembarNode->add->return
StandardGraphBuilderPlugins.UnsafeFencePlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver)::: unsafe fence plugin apply:::unsafe->get->b->new->MembarNode->add->return
StandardGraphBuilderPlugins#registerGraalDirectivesPlugins(InvocationPlugins)::: standard graph builder plugins register graal directives plugins:::r->new->Registration->r->new->InvocationPlugin->register0->r->new->InvocationPlugin->register0->r->new->InvocationPlugin->register0->r->new->InvocationPlugin->register0->r->new->InvocationPlugin->register0->r->new->InvocationPlugin->register2->blackholePlugin->new->InvocationPlugin->bindToRegisterPlugin->new->InvocationPlugin->foreach->JavaKind->values->if->kind->isPrimitive->javaClass->kind->toJavaClass->r->register1->r->register1->r->new->InvocationPlugin->register1->spillPlugin->new->InvocationPlugin->r->register0->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register1
StandardGraphBuilderPlugins#registerJMHBlackholePlugins(InvocationPlugins, BytecodeProvider)::: standard graph builder plugins register blackhole plugins:::blackholePlugin->new->InvocationPlugin->names->foreach->r->new->Registration->foreach->JavaKind->values->if->kind->isPrimitive->javaClass->kind->toJavaClass->r->registerOptional2->r->registerOptional2
StandardGraphBuilderPlugins#registerJFRThrowablePlugins(InvocationPlugins, BytecodeProvider)::: standard graph builder plugins register throwable plugins:::r->new->Registration->r->new->InvocationPlugin->register2
StandardGraphBuilderPlugins#registerMethodHandleImplPlugins(InvocationPlugins, SnippetReflectionProvider, BytecodeProvider)::: standard graph builder plugins register method handle impl plugins:::r->new->Registration->r->new->InvocationPlugin->registerOptional2->r->new->InvocationPlugin->register2
StandardGraphBuilderPlugins#registerJcovCollectPlugins(InvocationPlugins, BytecodeProvider):::Registers a plugin to ignore com.sun.tdk.jcov.runtime.Collect.hit within an intrinsic.:::r->new->Registration->r->new->InvocationPlugin->register1
StringIndexOfNode#lower(LoweringTool)::: string index of node lower:::tool->getLowerer->lower
StringLatin1IndexOfNode#lower(LoweringTool)::: string latin1 index of node lower:::tool->getLowerer->lower
StringSubstitutions#equals(String, Object)::: string substitutions equals:::if->return->if->return->thatString->if->thisString->length->thatString->length->return->if->thisString->length->return->array1->getValue->array2->getValue->return->ArrayEqualsNode->equals
StringSubstitutions#getValue(String):::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.:::
StringUTF16IndexOfNode#lower(LoweringTool)::: string f16 index of node lower:::tool->getLowerer->lower
StringUTF16Substitutions#getChar(byte[], int)::: string f16 substitutions get char:::ReplacementsUtil->runtimeAssert->return->getCharDirect
StringUTF16Substitutions#getCharDirect(byte[], int):::Will be intrinsified with an InvocationPlugin to a JavaReadNode.:::
StringUTF16Substitutions#putChar(byte[], int, int)::: string f16 substitutions put char:::ReplacementsUtil->runtimeAssert->putCharDirect
StringUTF16Substitutions#putCharDirect(byte[], int, int):::Will be intrinsified with an InvocationPlugin to a JavaWriteNode.:::

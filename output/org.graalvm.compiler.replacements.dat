org.graalvm.compiler.replacements.PEGraphDecoder_OptionDescriptors#get(String)->OptionDescriptor::: graph decoder_ option descriptors get
org.graalvm.compiler.replacements.PEGraphDecoder_OptionDescriptors#iterator()->Iterator::: graph decoder_ option descriptors iterator
org.graalvm.compiler.replacements.Plugin_ConstantStringIndexOfSnippets_byteArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ constant string index of snippets_byte array base offset execute
org.graalvm.compiler.replacements.Plugin_ConstantStringIndexOfSnippets_byteArrayBaseOffset#getSource()->Class::: plugin_ constant string index of snippets_byte array base offset get source
org.graalvm.compiler.replacements.Plugin_ConstantStringIndexOfSnippets_charArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ constant string index of snippets_char array base offset execute
org.graalvm.compiler.replacements.Plugin_ConstantStringIndexOfSnippets_charArrayBaseOffset#getSource()->Class::: plugin_ constant string index of snippets_char array base offset get source
org.graalvm.compiler.replacements.PluginFactory_ConstantStringIndexOfSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ constant string index of snippets register plugins
org.graalvm.compiler.replacements.Plugin_ReplacementsUtil_arrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ replacements util_array index scale execute
org.graalvm.compiler.replacements.Plugin_ReplacementsUtil_arrayIndexScale#getSource()->Class::: plugin_ replacements util_array index scale get source
org.graalvm.compiler.replacements.Plugin_ReplacementsUtil_getArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ replacements util_get array base offset execute
org.graalvm.compiler.replacements.Plugin_ReplacementsUtil_getArrayBaseOffset#getSource()->Class::: plugin_ replacements util_get array base offset get source
org.graalvm.compiler.replacements.PluginFactory_ReplacementsUtil#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ replacements util register plugins
org.graalvm.compiler.replacements.Plugin_SnippetCounterNode_add#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ snippet counter node_add execute
org.graalvm.compiler.replacements.Plugin_SnippetCounterNode_add#getSource()->Class::: plugin_ snippet counter node_add get source
org.graalvm.compiler.replacements.Plugin_SnippetCounterSnippets_countOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ snippet counter snippets_count offset execute
org.graalvm.compiler.replacements.Plugin_SnippetCounterSnippets_countOffset#getSource()->Class::: plugin_ snippet counter snippets_count offset get source
org.graalvm.compiler.replacements.PluginFactory_SnippetCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ snippet counter node register plugins
org.graalvm.compiler.replacements.SnippetTemplate_OptionDescriptors#get(String)->OptionDescriptor::: snippet template_ option descriptors get
org.graalvm.compiler.replacements.SnippetTemplate_OptionDescriptors#iterator()->Iterator::: snippet template_ option descriptors iterator
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(boolean[], boolean[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(byte[], byte[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(char[], char[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(short[], short[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(int[], int[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(long[], long[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(float[], float[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraysSubstitutions#equals(double[], double[])->boolean::: arrays substitutions equals
org.graalvm.compiler.replacements.ArraySubstitutions#getLength(Object)->int::: array substitutions get length
org.graalvm.compiler.replacements.BoxingSnippets#booleanValueOf(boolean, SnippetCounter)->Object::: boxing snippets boolean value of
org.graalvm.compiler.replacements.BoxingSnippets#byteValueOf(byte, SnippetCounter)->Object::: boxing snippets byte value of
org.graalvm.compiler.replacements.BoxingSnippets#charValueOf(char, SnippetCounter)->Object::: boxing snippets char value of
org.graalvm.compiler.replacements.BoxingSnippets#doubleValueOf(double, SnippetCounter)->Object::: boxing snippets double value of
org.graalvm.compiler.replacements.BoxingSnippets#floatValueOf(float, SnippetCounter)->Object::: boxing snippets float value of
org.graalvm.compiler.replacements.BoxingSnippets#intValueOf(int, SnippetCounter)->Object::: boxing snippets int value of
org.graalvm.compiler.replacements.BoxingSnippets#longValueOf(long, SnippetCounter)->Object::: boxing snippets long value of
org.graalvm.compiler.replacements.BoxingSnippets#shortValueOf(short, SnippetCounter)->Object::: boxing snippets short value of
org.graalvm.compiler.replacements.BoxingSnippets#booleanValue(Boolean, SnippetCounter)->boolean::: boxing snippets boolean value
org.graalvm.compiler.replacements.BoxingSnippets#byteValue(Byte, SnippetCounter)->byte::: boxing snippets byte value
org.graalvm.compiler.replacements.BoxingSnippets#charValue(Character, SnippetCounter)->char::: boxing snippets char value
org.graalvm.compiler.replacements.BoxingSnippets#doubleValue(Double, SnippetCounter)->double::: boxing snippets double value
org.graalvm.compiler.replacements.BoxingSnippets#floatValue(Float, SnippetCounter)->float::: boxing snippets float value
org.graalvm.compiler.replacements.BoxingSnippets#intValue(Integer, SnippetCounter)->int::: boxing snippets int value
org.graalvm.compiler.replacements.BoxingSnippets#longValue(Long, SnippetCounter)->long::: boxing snippets long value
org.graalvm.compiler.replacements.BoxingSnippets#shortValue(Short, SnippetCounter)->short::: boxing snippets short value
org.graalvm.compiler.replacements.BoxingSnippets#canonicalizeBoxing(BoxNode, MetaAccessProvider, ConstantReflectionProvider)->FloatingNode::: boxing snippets canonicalize boxing
org.graalvm.compiler.replacements.BoxingSnippets.Templates#lower(BoxNode, LoweringTool)->void::: templates lower
org.graalvm.compiler.replacements.BoxingSnippets.Templates#lower(UnboxNode, LoweringTool)->void::: templates lower
org.graalvm.compiler.replacements.CachingPEGraphDecoder#createGraphBuilderPhaseInstance(IntrinsicContext)->GraphBuilderPhase.Instance::: caching graph decoder create graph builder phase instance
org.graalvm.compiler.replacements.CachingPEGraphDecoder#lookupEncodedGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean, boolean)->EncodedGraph::: caching graph decoder lookup encoded graph
org.graalvm.compiler.replacements.ConstantBindingParameterPlugin#interceptParameter(GraphBuilderTool, int, StampPair)->FloatingNode::: constant binding parameter plugin intercept parameter
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets.Templates#lower(SnippetLowerableMemoryNode, LoweringTool)->void::: templates lower
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets.Templates#lowerLatin1(SnippetLowerableMemoryNode, LoweringTool)->void::: templates lower latin1
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets.Templates#lowerUTF16(SnippetLowerableMemoryNode, LoweringTool)->void::: templates lower f16
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#md2(char[])->int::: constant string index of snippets md2
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#computeCache(char[])->long::: constant string index of snippets compute cache
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#md2(byte[])->int::: constant string index of snippets md2
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#computeCache(byte[])->long::: constant string index of snippets compute cache
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#md2Utf16(MetaAccessProvider, byte[])->int::: constant string index of snippets md2 utf16
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#computeCacheUtf16(MetaAccessProvider, byte[])->long::: constant string index of snippets compute cache utf16
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#byteArrayBaseOffset(MetaAccessProvider)->int::: constant string index of snippets byte array base offset
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#charArrayBaseOffset(MetaAccessProvider)->int::: constant string index of snippets char array base offset
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#indexOfConstant(char[], int, int, char[], int, int, int, int, long)->int::: constant string index of snippets index of constant
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#utf16IndexOfConstant(byte[], int, byte[], int, int, int, long)->int::: constant string index of snippets utf16 index of constant
org.graalvm.compiler.replacements.ConstantStringIndexOfSnippets#latin1IndexOfConstant(byte[], int, byte[], int, int, int, long)->int::: constant string index of snippets latin1 index of constant
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#initialize(OptionValues, Iterable, SnippetCounter.Group.Factory, Providers, SnippetReflectionProvider)->void::: default java lowering provider initialize
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#getTarget()->TargetDescription::: default java lowering provider get target
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#getMetaAccess()->MetaAccessProvider::: default java lowering provider get meta access
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lower(Node, LoweringTool)->void::: default java lowering provider lower
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerVerifyHeap(VerifyHeapNode)->void::: default java lowering provider lower verify heap
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createOffsetAddress(StructuredGraph, ValueNode, long)->AddressNode::: default java lowering provider create offset address
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createFieldAddress(StructuredGraph, ValueNode, ResolvedJavaField)->AddressNode::: default java lowering provider create field address
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#getStorageKind(ResolvedJavaField)->JavaKind::: default java lowering provider get storage kind
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerLoadFieldNode(LoadFieldNode, LoweringTool)->void::: default java lowering provider lower load field node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerStoreFieldNode(StoreFieldNode, LoweringTool)->void::: default java lowering provider lower store field node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createArrayIndexAddress(StructuredGraph, ValueNode, JavaKind, ValueNode, GuardingNode)->AddressNode:::Create a PiNode on the index proving that the index is positive
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createArrayAddress(StructuredGraph, ValueNode, JavaKind, ValueNode)->AddressNode::: default java lowering provider create array address
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createArrayAddress(StructuredGraph, ValueNode, JavaKind, JavaKind, ValueNode)->AddressNode::: default java lowering provider create array address
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerIndexAddressNode(IndexAddressNode)->void::: default java lowering provider lower index address node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerLoadIndexedNode(LoadIndexedNode, LoweringTool)->void::: default java lowering provider lower load indexed node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerStoreIndexedNode(StoreIndexedNode, LoweringTool)->void::: default java lowering provider lower store indexed node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerArrayLengthNode(ArrayLengthNode, LoweringTool)->void::: default java lowering provider lower array length node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createReadArrayLength(ValueNode, FixedNode, LoweringTool)->ReadNode:::Creates a read node that read the array length and is guarded by a null-check
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerLoadHubNode(LoadHubNode, LoweringTool)->void::: default java lowering provider lower load hub node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerLoadArrayComponentHubNode(LoadArrayComponentHubNode)->void::: default java lowering provider lower load array component hub node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerMonitorEnterNode(MonitorEnterNode, LoweringTool, StructuredGraph)->void::: default java lowering provider lower monitor enter node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerCompareAndSwapNode(UnsafeCompareAndSwapNode)->void::: default java lowering provider lower compare and swap node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerCompareAndExchangeNode(UnsafeCompareAndExchangeNode)->void::: default java lowering provider lower compare and exchange node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerAtomicReadAndWriteNode(AtomicReadAndWriteNode)->void::: default java lowering provider lower atomic read and write node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerUnsafeLoadNode(RawLoadNode, LoweringTool)->void::: default java lowering provider lower unsafe load node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createUnsafeAddress(StructuredGraph, ValueNode, ValueNode)->AddressNode::: default java lowering provider create unsafe address
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createUnsafeRead(StructuredGraph, RawLoadNode, GuardingNode)->ReadNode::: default java lowering provider create unsafe read
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerUnsafeMemoryLoadNode(UnsafeMemoryLoadNode)->void::: default java lowering provider lower unsafe memory load node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerUnsafeStoreNode(RawStoreNode)->void::: default java lowering provider lower unsafe store node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerUnsafeMemoryStoreNode(UnsafeMemoryStoreNode)->void::: default java lowering provider lower unsafe memory store node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerJavaReadNode(JavaReadNode)->void::: default java lowering provider lower java read node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerJavaWriteNode(JavaWriteNode)->void::: default java lowering provider lower java write node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#lowerCommitAllocationNode(CommitAllocationNode, LoweringTool)->void::: default java lowering provider lower commit allocation node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createNewInstanceFromVirtual(VirtualObjectNode)->NewInstanceNode::: default java lowering provider create new instance from virtual
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createNewArrayFromVirtual(VirtualObjectNode, ValueNode)->NewArrayNode::: default java lowering provider create new array from virtual
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#finishAllocatedObjects(LoweringTool, CommitAllocationNode, ValueNode[])->void::: default java lowering provider finish allocated objects
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#fieldLoadBarrierType(ResolvedJavaField)->BarrierType::: default java lowering provider field load barrier type
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#fieldStoreBarrierType(ResolvedJavaField)->BarrierType::: default java lowering provider field store barrier type
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#arrayStoreBarrierType(JavaKind)->BarrierType::: default java lowering provider array store barrier type
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#fieldInitializationBarrier(JavaKind)->BarrierType::: default java lowering provider field initialization barrier
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#arrayInitializationBarrier(JavaKind)->BarrierType::: default java lowering provider array initialization barrier
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#fieldOffset(ResolvedJavaField)->int::: default java lowering provider field offset
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#fieldLocationIdentity(ResolvedJavaField)->FieldLocationIdentity::: default java lowering provider field location identity
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#staticFieldBase(StructuredGraph, ResolvedJavaField)->ValueNode::: default java lowering provider static field base
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#arrayLengthOffset()->int::: default java lowering provider array length offset
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#loadStamp(Stamp, JavaKind)->Stamp::: default java lowering provider load stamp
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#loadCompressedStamp(ObjectStamp)->Stamp::: default java lowering provider load compressed stamp
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#loadStamp(Stamp, JavaKind, boolean)->Stamp::: default java lowering provider load stamp
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitLoadConvert(StructuredGraph, JavaKind, ValueNode)->ValueNode::: default java lowering provider implicit load convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitLoadConvert(JavaKind, ValueNode)->ValueNode::: default java lowering provider implicit load convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitLoadConvert(StructuredGraph, JavaKind, ValueNode, boolean)->ValueNode::: default java lowering provider implicit load convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#newCompressionNode(CompressionOp, ValueNode)->ValueNode::: default java lowering provider new compression node
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitLoadConvert(JavaKind, ValueNode, boolean)->ValueNode::: default java lowering provider implicit load convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitStoreConvert(StructuredGraph, JavaKind, ValueNode)->ValueNode::: default java lowering provider implicit store convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitStoreConvert(JavaKind, ValueNode)->ValueNode::: default java lowering provider implicit store convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitStoreConvert(StructuredGraph, JavaKind, ValueNode, boolean)->ValueNode::: default java lowering provider implicit store convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#implicitStoreConvert(JavaKind, ValueNode, boolean)->ValueNode::: default java lowering provider implicit store convert
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createReadHub(StructuredGraph, ValueNode, LoweringTool)->ValueNode::: default java lowering provider create read hub
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createReadArrayComponentHub(StructuredGraph, ValueNode, FixedNode)->ValueNode::: default java lowering provider create read array component hub
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#proxyIndex(AccessIndexedNode, ValueNode, ValueNode, LoweringTool)->ValueNode::: default java lowering provider proxy index
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#getBoundsCheck(AccessIndexedNode, ValueNode, LoweringTool)->GuardingNode::: default java lowering provider get bounds check
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createNullCheck(ValueNode, FixedNode, LoweringTool)->GuardingNode::: default java lowering provider create null check
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#createNullCheckedValue(ValueNode, FixedNode, LoweringTool)->ValueNode::: default java lowering provider create null checked value
org.graalvm.compiler.replacements.DefaultJavaLoweringProvider#reconstructArrayIndex(JavaKind, AddressNode)->ValueNode::: default java lowering provider reconstruct array index
org.graalvm.compiler.replacements.GraphKit#getGraph()->StructuredGraph::: graph kit get graph
org.graalvm.compiler.replacements.GraphKit#getConstantReflection()->ConstantReflectionProvider::: graph kit get constant reflection
org.graalvm.compiler.replacements.GraphKit#getConstantFieldProvider()->ConstantFieldProvider::: graph kit get constant field provider
org.graalvm.compiler.replacements.GraphKit#getMetaAccess()->MetaAccessProvider::: graph kit get meta access
org.graalvm.compiler.replacements.GraphKit#getReplacements()->Replacements::: graph kit get replacements
org.graalvm.compiler.replacements.GraphKit#getStampProvider()->StampProvider::: graph kit get stamp provider
org.graalvm.compiler.replacements.GraphKit#parsingIntrinsic()->boolean::: graph kit parsing intrinsic
org.graalvm.compiler.replacements.GraphKit#unique(T)->T:::Ensures a floating node is added to or already present in the graph via Graph#unique.
org.graalvm.compiler.replacements.GraphKit#add(T)->T::: graph kit add
org.graalvm.compiler.replacements.GraphKit#changeToWord(T)->T::: graph kit change to word
org.graalvm.compiler.replacements.GraphKit#append(T)->T::: graph kit append
org.graalvm.compiler.replacements.GraphKit#createInvoke(Class, String, ValueNode...)->InvokeNode::: graph kit create invoke
org.graalvm.compiler.replacements.GraphKit#createInvoke(Class, String, InvokeKind, FrameStateBuilder, int, ValueNode...)->InvokeNode:::Creates and appends an InvokeNode for a call to a given method with a given set of arguments
org.graalvm.compiler.replacements.GraphKit#findMethod(Class, String, boolean)->ResolvedJavaMethod::: graph kit find method
org.graalvm.compiler.replacements.GraphKit#findMethod(Class, String, Class...)->ResolvedJavaMethod::: graph kit find method
org.graalvm.compiler.replacements.GraphKit#createInvoke(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, ValueNode...)->InvokeNode:::Creates and appends an InvokeNode for a call to a given method with a given set of arguments.
org.graalvm.compiler.replacements.GraphKit#createInvokeWithExceptionAndUnwind(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, int, ValueNode...)->InvokeWithExceptionNode::: graph kit create invoke with exception and unwind
org.graalvm.compiler.replacements.GraphKit#createInvokeWithExceptionAndUnwind(MethodCallTargetNode, FrameStateBuilder, int, int)->InvokeWithExceptionNode::: graph kit create invoke with exception and unwind
org.graalvm.compiler.replacements.GraphKit#createMethodCallTarget(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, int)->MethodCallTargetNode::: graph kit create method call target
org.graalvm.compiler.replacements.GraphKit#asKind(JavaType)->JavaKind::: graph kit as kind
org.graalvm.compiler.replacements.GraphKit#checkArgs(ResolvedJavaMethod, ValueNode...)->boolean:::Determines if a given set of arguments is compatible with the signature of a given method.
org.graalvm.compiler.replacements.GraphKit#inlineInvokes(String, String)->void:::Recursively #inline inlines all invocations currently in the graph.
org.graalvm.compiler.replacements.GraphKit#inline(InvokeNode, String, String)->void:::Inlines a given invocation to a method
org.graalvm.compiler.replacements.GraphKit#createGraphBuilderInstance(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)->GraphBuilderPhase.Instance::: graph kit create graph builder instance
org.graalvm.compiler.replacements.GraphKit#pushStructure(Structure)->void::: graph kit push structure
org.graalvm.compiler.replacements.GraphKit#getTopStructure(Class)->T::: graph kit get top structure
org.graalvm.compiler.replacements.GraphKit#popStructure()->void::: graph kit pop structure
org.graalvm.compiler.replacements.GraphKit#startIf(LogicNode, double)->IfNode:::Starts an if-block
org.graalvm.compiler.replacements.GraphKit#thenPart()->void::: graph kit then part
org.graalvm.compiler.replacements.GraphKit#elsePart()->void::: graph kit else part
org.graalvm.compiler.replacements.GraphKit#endIf()->AbstractMergeNode:::Ends an if block started with #startIf(LogicNode, double).
org.graalvm.compiler.replacements.GraphKit#startInvokeWithException(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, int, ValueNode...)->InvokeWithExceptionNode::: graph kit start invoke with exception
org.graalvm.compiler.replacements.GraphKit#startInvokeWithException(MethodCallTargetNode, FrameStateBuilder, int, int)->InvokeWithExceptionNode::: graph kit start invoke with exception
org.graalvm.compiler.replacements.GraphKit#noExceptionPart()->void::: graph kit no exception part
org.graalvm.compiler.replacements.GraphKit#exceptionPart()->void::: graph kit exception part
org.graalvm.compiler.replacements.GraphKit#exceptionObject()->ExceptionObjectNode::: graph kit exception object
org.graalvm.compiler.replacements.GraphKit#endInvokeWithException()->AbstractMergeNode:::Finishes a control flow started with #startInvokeWithException
org.graalvm.compiler.replacements.InlineDuringParsingPlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: inline during parsing plugin should inline invoke
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates#makeArguments(InstanceOfUsageReplacer, LoweringTool)->Arguments:::Gets the arguments used to retrieve and instantiate an instanceof snippet template.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates#lower(FloatingNode, LoweringTool)->void::: instance of snippets templates lower
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates#createReplacer(FloatingNode, Instantiation, Node, StructuredGraph)->InstanceOfUsageReplacer:::Gets the specific replacer object used to replace the usage of an instanceof node with the result of an instantiated instanceof snippet.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates#canMaterialize(Node)->boolean:::Determines if an instanceof usage can be materialized.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.Instantiation#isInitialized()->boolean:::Determines if the instantiation has occurred.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.Instantiation#initialize(ValueNode, ValueNode, ValueNode)->void::: instantiation initialize
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.Instantiation#asCondition(ValueNode)->LogicNode:::Gets the result of this instantiation as a condition.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.Instantiation#asMaterialization(StructuredGraph, ValueNode, ValueNode)->ValueNode:::Gets the result of the instantiation as a materialized value.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.InstanceOfUsageReplacer#replaceUsingInstantiation()->void:::Does the replacement based on a previously snippet instantiation.
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.NonMaterializationUsageReplacer#replaceUsingInstantiation()->void::: non materialization usage replacer replace using instantiation
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.NonMaterializationUsageReplacer#replace(ValueNode, ValueNode)->void::: non materialization usage replacer replace
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.MaterializationUsageReplacer#replaceUsingInstantiation()->void::: materialization usage replacer replace using instantiation
org.graalvm.compiler.replacements.InstanceOfSnippetsTemplates.MaterializationUsageReplacer#replace(ValueNode, ValueNode)->void::: materialization usage replacer replace
org.graalvm.compiler.replacements.IntegerSubstitutions#numberOfLeadingZeros(int)->int::: integer substitutions number of leading zeros
org.graalvm.compiler.replacements.IntegerSubstitutions#numberOfTrailingZeros(int)->int::: integer substitutions number of trailing zeros
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#append(T)->T::: intrinsic graph builder append
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#push(JavaKind, ValueNode)->void::: intrinsic graph builder push
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)->Invoke::: intrinsic graph builder handle replaced invoke
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#handleReplacedInvoke(CallTargetNode, JavaKind)->void::: intrinsic graph builder handle replaced invoke
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getStampProvider()->StampProvider::: intrinsic graph builder get stamp provider
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getMetaAccess()->MetaAccessProvider::: intrinsic graph builder get meta access
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getConstantReflection()->ConstantReflectionProvider::: intrinsic graph builder get constant reflection
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getConstantFieldProvider()->ConstantFieldProvider::: intrinsic graph builder get constant field provider
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getReplacements()->Replacements::: intrinsic graph builder get replacements
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getGraph()->StructuredGraph::: intrinsic graph builder get graph
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#setStateAfter(StateSplit)->void::: intrinsic graph builder set state after
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getParent()->GraphBuilderContext::: intrinsic graph builder get parent
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getCode()->Bytecode::: intrinsic graph builder get code
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getMethod()->ResolvedJavaMethod::: intrinsic graph builder get method
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#bci()->int::: intrinsic graph builder bci
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getInvokeKind()->InvokeKind::: intrinsic graph builder get invoke kind
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getInvokeReturnType()->JavaType::: intrinsic graph builder get invoke return type
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getDepth()->int::: intrinsic graph builder get depth
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#parsingIntrinsic()->boolean::: intrinsic graph builder parsing intrinsic
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#getIntrinsic()->IntrinsicContext::: intrinsic graph builder get intrinsic
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#bailout(String)->BailoutException::: intrinsic graph builder bailout
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#get(boolean)->ValueNode::: intrinsic graph builder get
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#buildGraph(InvocationPlugin)->StructuredGraph::: intrinsic graph builder build graph
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: intrinsic graph builder intrinsify
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#intrinsify(ResolvedJavaMethod, StructuredGraph, Receiver, ValueNode[])->boolean::: intrinsic graph builder intrinsify
org.graalvm.compiler.replacements.IntrinsicGraphBuilder#toString()->String::: intrinsic graph builder to string
org.graalvm.compiler.replacements.JDK9StringSubstitutions#equals(String, Object)->boolean::: k9 string substitutions equals
org.graalvm.compiler.replacements.JDK9StringSubstitutions#getValue(String)->byte[]:::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.
org.graalvm.compiler.replacements.JDK9StringSubstitutions#getCoder(String)->int::: k9 string substitutions get coder
org.graalvm.compiler.replacements.JDK9StringSubstitutions#isCompactString(String)->boolean::: k9 string substitutions is compact string
org.graalvm.compiler.replacements.LongSubstitutions#numberOfLeadingZeros(long)->int::: long substitutions number of leading zeros
org.graalvm.compiler.replacements.LongSubstitutions#numberOfTrailingZeros(long)->int::: long substitutions number of trailing zeros
org.graalvm.compiler.replacements.MethodHandlePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->boolean::: method handle plugin handle invoke
org.graalvm.compiler.replacements.NodeIntrinsificationProvider#getInjectedStamp(Class, boolean)->Stamp::: node intrinsification provider get injected stamp
org.graalvm.compiler.replacements.NodeIntrinsificationProvider#getInjectedArgument(Class)->T::: node intrinsification provider get injected argument
org.graalvm.compiler.replacements.PEGraphDecoder.PEMethodScope#isInlinedMethod()->boolean::: method scope is inlined method
org.graalvm.compiler.replacements.PEGraphDecoder.PEMethodScope#getCallerBytecodePosition(NodeSourcePosition)->NodeSourcePosition::: method scope get caller bytecode position
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getExternalInliningContext()->ExternalInliningContext::: non append graph builder context get external inlining context
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#canDeferPlugin(GeneratedInvocationPlugin)->boolean:::Fold and NodeIntrinsic can be deferred during parsing/decoding
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#bailout(String)->BailoutException::: non append graph builder context bailout
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getStampProvider()->StampProvider::: non append graph builder context get stamp provider
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getMetaAccess()->MetaAccessProvider::: non append graph builder context get meta access
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getConstantReflection()->ConstantReflectionProvider::: non append graph builder context get constant reflection
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getConstantFieldProvider()->ConstantFieldProvider::: non append graph builder context get constant field provider
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getReplacements()->Replacements::: non append graph builder context get replacements
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getGraph()->StructuredGraph::: non append graph builder context get graph
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getDepth()->int::: non append graph builder context get depth
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getIntrinsic()->IntrinsicContext::: non append graph builder context get intrinsic
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#append(T)->T::: non append graph builder context append
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#push(JavaKind, ValueNode)->void::: non append graph builder context push
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)->Invoke::: non append graph builder context handle replaced invoke
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)->void::: non append graph builder context handle replaced invoke
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: non append graph builder context intrinsify
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[])->boolean::: non append graph builder context intrinsify
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#setStateAfter(StateSplit)->void::: non append graph builder context set state after
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getParent()->GraphBuilderContext::: non append graph builder context get parent
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getCode()->Bytecode::: non append graph builder context get code
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getMethod()->ResolvedJavaMethod::: non append graph builder context get method
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#bci()->int::: non append graph builder context bci
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getInvokeKind()->InvokeKind::: non append graph builder context get invoke kind
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#getInvokeReturnType()->JavaType::: non append graph builder context get invoke return type
org.graalvm.compiler.replacements.PEGraphDecoder.PENonAppendGraphBuilderContext#toString()->String::: non append graph builder context to string
org.graalvm.compiler.replacements.PEGraphDecoder#getIntrinsic()->IntrinsicContext::: graph decoder get intrinsic
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#push(JavaKind, ValueNode)->void::: append graph builder context push
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#setStateAfter(StateSplit)->void::: append graph builder context set state after
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#append(T)->T::: append graph builder context append
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#getInvokeKind()->InvokeKind::: append graph builder context get invoke kind
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#getInvokeReturnType()->JavaType::: append graph builder context get invoke return type
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#handleReplacedInvoke(CallTargetNode, JavaKind)->void::: append graph builder context handle replaced invoke
org.graalvm.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext#getNonIntrinsicAncestor()->GraphBuilderContext::: append graph builder context get non intrinsic ancestor
org.graalvm.compiler.replacements.PEGraphDecoder.SpecialCallTargetCacheKey#hashCode()->int::: special call target cache key hash code
org.graalvm.compiler.replacements.PEGraphDecoder.SpecialCallTargetCacheKey#equals(Object)->boolean::: special call target cache key equals
org.graalvm.compiler.replacements.PEGraphDecoder#loopExplosionKind(ResolvedJavaMethod, LoopExplosionPlugin)->LoopExplosionKind::: graph decoder loop explosion kind
org.graalvm.compiler.replacements.PEGraphDecoder#decode(ResolvedJavaMethod, boolean, boolean)->void::: graph decoder decode
org.graalvm.compiler.replacements.PEGraphDecoder#cleanupGraph(MethodScope)->void::: graph decoder cleanup graph
org.graalvm.compiler.replacements.PEGraphDecoder#checkLoopExplosionIteration(MethodScope, LoopScope)->void::: graph decoder check loop explosion iteration
org.graalvm.compiler.replacements.PEGraphDecoder#handleInvoke(MethodScope, LoopScope, InvokeData)->LoopScope::: graph decoder handle invoke
org.graalvm.compiler.replacements.PEGraphDecoder#trySimplifyInvoke(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)->LoopScope::: graph decoder try simplify invoke
org.graalvm.compiler.replacements.PEGraphDecoder#tryInvocationPlugin(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)->boolean::: graph decoder try invocation plugin
org.graalvm.compiler.replacements.PEGraphDecoder#tryInline(PEMethodScope, LoopScope, InvokeData, MethodCallTargetNode)->LoopScope::: graph decoder try inline
org.graalvm.compiler.replacements.PEGraphDecoder#doInline(PEMethodScope, LoopScope, InvokeData, InlineInfo, ValueNode[])->LoopScope::: graph decoder do inline
org.graalvm.compiler.replacements.PEGraphDecoder#finishInlining(MethodScope)->void::: graph decoder finish inlining
org.graalvm.compiler.replacements.PEGraphDecoder#nodeAfterInvoke(PEMethodScope, LoopScope, InvokeData, AbstractBeginNode)->FixedNode::: graph decoder node after invoke
org.graalvm.compiler.replacements.PEGraphDecoder#lookupEncodedGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean, boolean)->EncodedGraph::: graph decoder lookup encoded graph
org.graalvm.compiler.replacements.PEGraphDecoder#handleFixedNode(MethodScope, LoopScope, int, FixedNode)->void::: graph decoder handle fixed node
org.graalvm.compiler.replacements.PEGraphDecoder#canonicalizeFixedNode(MethodScope, Node)->Node::: graph decoder canonicalize fixed node
org.graalvm.compiler.replacements.PEGraphDecoder#handleFloatingNodeBeforeAdd(MethodScope, LoopScope, Node)->Node::: graph decoder handle floating node before add
org.graalvm.compiler.replacements.PEGraphDecoder#ensureOuterStateDecoded(PEMethodScope)->void::: graph decoder ensure outer state decoded
org.graalvm.compiler.replacements.PEGraphDecoder#ensureStateAfterDecoded(PEMethodScope)->void::: graph decoder ensure state after decoded
org.graalvm.compiler.replacements.PEGraphDecoder#ensureExceptionStateDecoded(PEMethodScope)->void::: graph decoder ensure exception state decoded
org.graalvm.compiler.replacements.PEGraphDecoder#handleFloatingNodeAfterAdd(MethodScope, LoopScope, Node)->Node::: graph decoder handle floating node after add
org.graalvm.compiler.replacements.ReplacementsImpl#getProviders()->Providers::: replacements impl get providers
org.graalvm.compiler.replacements.ReplacementsImpl#setProviders(Providers)->void::: replacements impl set providers
org.graalvm.compiler.replacements.ReplacementsImpl#setGraphBuilderPlugins(GraphBuilderConfiguration.Plugins)->void::: replacements impl set graph builder plugins
org.graalvm.compiler.replacements.ReplacementsImpl#getGraphBuilderPlugins()->GraphBuilderConfiguration.Plugins::: replacements impl get graph builder plugins
org.graalvm.compiler.replacements.ReplacementsImpl#getIntrinsifyingPlugin(ResolvedJavaMethod)->Class::: replacements impl get intrinsifying plugin
org.graalvm.compiler.replacements.ReplacementsImpl#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo:::Determines whether a given method should be inlined based on whether it has a substitution or whether the inlining context is already within a substitution.
org.graalvm.compiler.replacements.ReplacementsImpl#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)->void::: replacements impl notify not inlined
org.graalvm.compiler.replacements.ReplacementsImpl#openDebugContext(String, ResolvedJavaMethod, OptionValues)->DebugContext::: replacements impl open debug context
org.graalvm.compiler.replacements.ReplacementsImpl#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: replacements impl get snippet
org.graalvm.compiler.replacements.ReplacementsImpl#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)->void::: replacements impl register snippet
org.graalvm.compiler.replacements.ReplacementsImpl#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)->StructuredGraph::: replacements impl get method substitution
org.graalvm.compiler.replacements.ReplacementsImpl#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)->void::: replacements impl register method substitution
org.graalvm.compiler.replacements.ReplacementsImpl#hasSubstitution(ResolvedJavaMethod, int)->boolean::: replacements impl has substitution
org.graalvm.compiler.replacements.ReplacementsImpl#getDefaultReplacementBytecodeProvider()->BytecodeProvider::: replacements impl get default replacement bytecode provider
org.graalvm.compiler.replacements.ReplacementsImpl#getMethodSubstitution(ResolvedJavaMethod)->MethodSubstitutionPlugin::: replacements impl get method substitution
org.graalvm.compiler.replacements.ReplacementsImpl#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: replacements impl get substitution
org.graalvm.compiler.replacements.ReplacementsImpl#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)->StructuredGraph::: replacements impl get intrinsic graph
org.graalvm.compiler.replacements.ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition, IntrinsicContext.CompilationContext)->StructuredGraph:::Creates a preprocessed graph for a snippet or method substitution.
org.graalvm.compiler.replacements.ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition)->StructuredGraph:::Creates a preprocessed graph for a snippet or method substitution with a context of 
org.graalvm.compiler.replacements.ReplacementsImpl#createGraphMaker(ResolvedJavaMethod, ResolvedJavaMethod)->GraphMaker:::Can be overridden to return an object that specializes various parts of graph preprocessing.
org.graalvm.compiler.replacements.ReplacementsImpl.GraphMaker#makeGraph(DebugContext, BytecodeProvider, Object[], boolean, NodeSourcePosition, IntrinsicContext.CompilationContext)->StructuredGraph::: graph maker make graph
org.graalvm.compiler.replacements.ReplacementsImpl.GraphMaker#finalizeGraph(StructuredGraph)->void:::Does final processing of a snippet graph.
org.graalvm.compiler.replacements.ReplacementsImpl.GraphMaker.EncodedIntrinsicContext#isDeferredInvoke(StateSplit)->boolean::: encoded intrinsic context is deferred invoke
org.graalvm.compiler.replacements.ReplacementsImpl.GraphMaker#buildInitialGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, IntrinsicContext.CompilationContext)->StructuredGraph:::Builds the initial graph for a replacement.
org.graalvm.compiler.replacements.ReplacementsImpl.GraphMaker#createGraphBuilder(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)->Instance::: graph maker create graph builder
org.graalvm.compiler.replacements.ReplacementsImpl#registerSnippetTemplateCache(SnippetTemplateCache)->void::: replacements impl register snippet template cache
org.graalvm.compiler.replacements.ReplacementsImpl#getSnippetTemplateCache(Class)->T::: replacements impl get snippet template cache
org.graalvm.compiler.replacements.ReplacementsUtil#staticAssert(boolean, String)->void:::Asserts that condition evaluates to true by the time compilation is finished
org.graalvm.compiler.replacements.ReplacementsUtil#staticAssert(boolean, String, Object)->void::: replacements util static assert
org.graalvm.compiler.replacements.ReplacementsUtil#staticAssert(boolean, String, Object, Object)->void::: replacements util static assert
org.graalvm.compiler.replacements.ReplacementsUtil#runtimeAssert(boolean, String)->void:::Asserts that condition evaluates to true at runtime
org.graalvm.compiler.replacements.ReplacementsUtil#arrayIndexScale(MetaAccessProvider, JavaKind)->int::: replacements util array index scale
org.graalvm.compiler.replacements.ReplacementsUtil#getArrayBaseOffset(MetaAccessProvider, JavaKind)->int::: replacements util get array base offset
org.graalvm.compiler.replacements.SnippetCounter.Group.Factory#createSnippetCounterGroup(String)->Group:::If snippet counters are GraalOptions#SnippetCounters enabled, creates and registers a Group with the given name
org.graalvm.compiler.replacements.SnippetCounter.Group#toString()->String::: group to string
org.graalvm.compiler.replacements.SnippetCounter#compareTo(SnippetCounter)->int:::Sorts counters in descending order of their #value() values.
org.graalvm.compiler.replacements.SnippetCounter#getGroup()->Group::: snippet counter get group
org.graalvm.compiler.replacements.SnippetCounter#inc()->void:::Increments the value of this counter
org.graalvm.compiler.replacements.SnippetCounter#add(int)->void:::Increments the value of this counter
org.graalvm.compiler.replacements.SnippetCounter#value()->long:::Gets the value of this counter.
org.graalvm.compiler.replacements.SnippetCounter#toString()->String::: snippet counter to string
org.graalvm.compiler.replacements.SnippetCounterNode#getCounter()->SnippetCounter::: snippet counter node get counter
org.graalvm.compiler.replacements.SnippetCounterNode#getIncrement()->ValueNode::: snippet counter node get increment
org.graalvm.compiler.replacements.SnippetCounterNode#add(SnippetCounter, int)->void::: snippet counter node add
org.graalvm.compiler.replacements.SnippetCounterNode#increment(SnippetCounter)->void::: snippet counter node increment
org.graalvm.compiler.replacements.SnippetCounterNode#lower(LoweringTool)->void::: snippet counter node lower
org.graalvm.compiler.replacements.SnippetCounterNode#addSnippetCounters(LocationIdentity[])->LocationIdentity[]:::Add #SNIPPET_COUNTER_LOCATION to privateLocations if it isn't already there.
org.graalvm.compiler.replacements.SnippetCounterNode.SnippetCounterSnippets#countOffset()->int::: snippet counter snippets count offset
org.graalvm.compiler.replacements.SnippetCounterNode.SnippetCounterSnippets#add(SnippetCounter, int)->void::: snippet counter snippets add
org.graalvm.compiler.replacements.SnippetCounterNode.SnippetCounterSnippets.Templates#lower(SnippetCounterNode, LoweringTool)->void::: templates lower
org.graalvm.compiler.replacements.SnippetIntegerHistogram#inc(long)->void:::Increments the value of the matching histogram element
org.graalvm.compiler.replacements.SnippetIntegerHistogram#toString()->String::: snippet integer histogram to string
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode.SnippetLowering#lower(SnippetLowerableMemoryNode, LoweringTool)->void::: snippet lowering lower
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#getArgument(int)->ValueNode::: snippet lowerable memory node get argument
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#getArgumentCount()->int::: snippet lowerable memory node get argument count
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#lower(LoweringTool)->void::: snippet lowerable memory node lower
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#getLocationIdentity()->LocationIdentity::: snippet lowerable memory node get location identity
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#getLastLocationAccess()->MemoryNode::: snippet lowerable memory node get last location access
org.graalvm.compiler.replacements.SnippetLowerableMemoryNode#setLastLocationAccess(MemoryNode)->void::: snippet lowerable memory node set last location access
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#getReceiver()->Object::: snippet info get receiver
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#hasReceiver()->boolean::: snippet info has receiver
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#hasReceiver(ResolvedJavaMethod)->boolean::: snippet info has receiver
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#lazy()->Lazy::: snippet info lazy
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#getMethod()->ResolvedJavaMethod::: snippet info get method
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#getParameterCount()->int::: snippet info get parameter count
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#isConstantParameter(int)->boolean::: snippet info is constant parameter
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#isVarargsParameter(int)->boolean::: snippet info is varargs parameter
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#isNonNullParameter(int)->boolean::: snippet info is non null parameter
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#getParameterName(int)->String::: snippet info get parameter name
org.graalvm.compiler.replacements.SnippetTemplate.SnippetInfo#toString()->String::: snippet info to string
org.graalvm.compiler.replacements.SnippetTemplate.LazySnippetInfo#lazy()->Lazy::: lazy snippet info lazy
org.graalvm.compiler.replacements.SnippetTemplate.EagerSnippetInfo#lazy()->Lazy::: eager snippet info lazy
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#add(String, Object)->Arguments::: arguments add
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#addConst(String, Object)->Arguments::: arguments add const
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#addConst(String, Object, Stamp)->Arguments::: arguments add const
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#addVarargs(String, Class, Stamp, Object)->Arguments::: arguments add varargs
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#setCacheable(boolean)->void::: arguments set cacheable
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#toString()->String::: arguments to string
org.graalvm.compiler.replacements.SnippetTemplate.Arguments#formatTo(Formatter, int, int, int)->void::: arguments format to
org.graalvm.compiler.replacements.SnippetTemplate.Varargs#toString()->String::: varargs to string
org.graalvm.compiler.replacements.SnippetTemplate.VarargsPlaceholderNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: varargs placeholder node find length
org.graalvm.compiler.replacements.SnippetTemplate.CacheKey#setParam(int, Object)->void::: cache key set param
org.graalvm.compiler.replacements.SnippetTemplate.CacheKey#equals(Object)->boolean::: cache key equals
org.graalvm.compiler.replacements.SnippetTemplate.CacheKey#hashCode()->int::: cache key hash code
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#getProviders()->Providers::: abstract templates get providers
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#findMethod(Class, String, Method)->Method::: abstract templates find method
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#findMethod(MetaAccessProvider, Class, String)->ResolvedJavaMethod::: abstract templates find method
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#snippet(Class, String, LocationIdentity...)->SnippetInfo::: abstract templates snippet
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#snippet(Class, String, ResolvedJavaMethod, Object, LocationIdentity...)->SnippetInfo:::Finds the unique method in declaringClass named methodName annotated by Snippet and returns a SnippetInfo value describing it
org.graalvm.compiler.replacements.SnippetTemplate.AbstractTemplates#template(ValueNode, Arguments)->SnippetTemplate:::Gets a template for a given key, creating it first if necessary.
org.graalvm.compiler.replacements.SnippetTemplate#hasConstantParameter(ResolvedJavaMethod)->boolean:::Determines if any parameter of a given method is annotated with ConstantParameter.
org.graalvm.compiler.replacements.SnippetTemplate#explodeLoops(StructuredGraph, CoreProviders)->void::: snippet template explode loops
org.graalvm.compiler.replacements.SnippetTemplate#getConstantArgs(Arguments)->Object[]::: snippet template get constant args
org.graalvm.compiler.replacements.SnippetTemplate#forBoxed(Object, JavaKind)->JavaConstant:::Converts a Java boxed value to a JavaConstant of the right kind
org.graalvm.compiler.replacements.SnippetTemplate.UsageReplacer#replace(ValueNode, ValueNode)->void:::Replaces all usages of oldNode with direct or indirect usages of newNode.
org.graalvm.compiler.replacements.SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments)->UnmodifiableEconomicMap:::Replaces a given fixed node with this specialized snippet.
org.graalvm.compiler.replacements.SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments, boolean)->UnmodifiableEconomicMap:::Replaces a given fixed node with this specialized snippet.
org.graalvm.compiler.replacements.SnippetTemplate#copySpecializedGraph(DebugContext)->StructuredGraph:::Gets a copy of the specialized graph.
org.graalvm.compiler.replacements.SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, LoweringTool, Arguments)->void:::Replaces a given floating node with this specialized snippet.
org.graalvm.compiler.replacements.SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, Arguments)->void:::Replaces a given floating node with this specialized snippet
org.graalvm.compiler.replacements.SnippetTemplate#rewireFrameStates(ValueNode, UnmodifiableEconomicMap)->void::: snippet template rewire frame states
org.graalvm.compiler.replacements.SnippetTemplate#toString()->String::: snippet template to string
org.graalvm.compiler.replacements.SnippetTemplate#setMayRemoveLocation(boolean)->void::: snippet template set may remove location
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins#registerInvocationPlugins(MetaAccessProvider, SnippetReflectionProvider, InvocationPlugins, BytecodeProvider, boolean, boolean)->void::: standard graph builder plugins register invocation plugins
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.MathSqrtPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)->boolean::: math sqrt plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins#registerPlatformSpecificUnsafePlugins(InvocationPlugins, BytecodeProvider, boolean, JavaKind[])->void::: standard graph builder plugins register platform specific unsafe plugins
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringIndexOfConstantPlugin#inlineOnly()->boolean::: string index of constant plugin inline only
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringIndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: string index of constant plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringLatin1IndexOfConstantPlugin#inlineOnly()->boolean::: string latin1 index of constant plugin inline only
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringLatin1IndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: string latin1 index of constant plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringUTF16IndexOfConstantPlugin#inlineOnly()->boolean::: string f16 index of constant plugin inline only
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.StringUTF16IndexOfConstantPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode, ValueNode, ValueNode, ValueNode, ValueNode)->boolean::: string f16 index of constant plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsignedMathPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)->boolean::: unsigned math plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins#registerBoxingPlugins(InvocationPlugins)->void::: standard graph builder plugins register boxing plugins
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.BoxPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)->boolean::: box plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.BoxPlugin#register(InvocationPlugins)->void::: box plugin register
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnboxPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver)->boolean::: unbox plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnboxPlugin#register(InvocationPlugins)->void::: unbox plugin register
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeAccessPlugin.UnsafeNodeConstructor#create(ValueNode, LocationIdentity)->FixedWithNextNode::: unsafe node constructor create
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeAccessPlugin#createUnsafeAccess(ValueNode, GraphBuilderContext, UnsafeNodeConstructor)->void::: unsafe access plugin create unsafe access
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeGetPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode)->boolean::: unsafe get plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeGetPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)->boolean::: unsafe get plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafePutPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode)->boolean::: unsafe put plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafePutPlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver, ValueNode, ValueNode, ValueNode)->boolean::: unsafe put plugin apply
org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeFencePlugin#apply(GraphBuilderContext, ResolvedJavaMethod, Receiver)->boolean::: unsafe fence plugin apply
org.graalvm.compiler.replacements.StringIndexOfNode#lower(LoweringTool)->void::: string index of node lower
org.graalvm.compiler.replacements.StringLatin1IndexOfNode#lower(LoweringTool)->void::: string latin1 index of node lower
org.graalvm.compiler.replacements.StringSubstitutions#equals(String, Object)->boolean::: string substitutions equals
org.graalvm.compiler.replacements.StringSubstitutions#getValue(String)->char[]:::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.
org.graalvm.compiler.replacements.StringUTF16IndexOfNode#lower(LoweringTool)->void::: string f16 index of node lower
org.graalvm.compiler.replacements.StringUTF16Substitutions#getChar(byte[], int)->char::: string f16 substitutions get char
org.graalvm.compiler.replacements.StringUTF16Substitutions#getCharDirect(byte[], int)->char:::Will be intrinsified with an InvocationPlugin to a JavaReadNode.
org.graalvm.compiler.replacements.StringUTF16Substitutions#putChar(byte[], int, int)->void::: string f16 substitutions put char
org.graalvm.compiler.replacements.StringUTF16Substitutions#putCharDirect(byte[], int, int)->void:::Will be intrinsified with an InvocationPlugin to a JavaWriteNode.

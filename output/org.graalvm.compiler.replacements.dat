DefaultJavaLoweringProvider#createArrayIndexAddress(StructuredGraph, ValueNode, JavaKind, ValueNode, GuardingNode):::Create a PiNode on the index proving that the index is positive:::positiveIndex->graph->PiNode->boundsCheck->asNode->create->maybeAddOrUnique->return->createArrayAddress
DefaultJavaLoweringProvider#createReadArrayLength(ValueNode, FixedNode, LoweringTool):::Creates a read node that read the array length and is guarded by a null-check:::graph->array->graph->canonicalArray->this->skipPiWhileNonNull->createNullCheckedValue->address->arrayLengthOffset->createOffsetAddress->readArrayLength->graph->StampFactory->positiveInt->new->ReadNode->add->graph->addBeforeFixed->return
GraphKit#unique(T):::Ensures a floating node is added to or already present in the graph via Graph#unique.:::return->graph->changeToWord->unique
GraphKit#createInvoke(Class, String, InvokeKind, FrameStateBuilder, int, ValueNode...):::Creates and appends an InvokeNode for a call to a given method with a given set of arguments:::isStatic->method->findMethod->return->createInvoke
GraphKit#createInvoke(ResolvedJavaMethod, InvokeKind, FrameStateBuilder, int, ValueNode...):::Creates and appends an InvokeNode for a call to a given method with a given set of arguments.:::try->context->graph->NodeSourcePosition->graph->currentNodeSourcePosition->substitution->withNodeSourcePosition->signature->method->getSignature->returnType->signature->getReturnType->returnStamp->graphBuilderPlugins->getOverridingStamp->if->StampFactory->graph->getAssumptions->forDeclaredType->callTarget->graph->createMethodCallTarget->add->invoke->new->InvokeNode->append->if->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->push->invoke->frameStateBuilder->create->setStateAfter->if->invoke->getStackKind->frameStateBuilder->invoke->getStackKind->pop->return->catch->finally
GraphKit#checkArgs(ResolvedJavaMethod, ValueNode...):::Determines if a given set of arguments is compatible with the signature of a given method.:::signature->method->getSignature->isStatic->method->isStatic->if->signature->getParameterCount->throw->new->AssertionError->argIndex->if->expected->method->getDeclaringClass->asKind->actual->stamp->getStackKind->for->i->signature->getParameterCount->return
GraphKit#inlineInvokes(String, String):::Recursively #inline inlines all invocations currently in the graph.:::while->graph->getNodes->filter->isEmpty->foreach->graph->getNodes->filter->snapshot->inline->new->DeadCodeEliminationPhase->apply
GraphKit#inline(InvokeNode, String, String):::Inlines a given invocation to a method:::method->invoke->callTarget->targetMethod->plugins->new->Plugins->config->GraphBuilderConfiguration->getSnippetDefault->calleeGraph->if->providers->getReplacements->invoke->getOptions->getSnippet->else->invoke->getOptions->invoke->getDebug->new->StructuredGraph.Builder->method->invoke->graph->trackNodeSourcePosition->trackNodeSourcePosition->setIsSubstitution->build->initialReplacementContext->providers->getReplacements->getDefaultReplacementBytecodeProvider->new->IntrinsicContext->instance->createGraphBuilderInstance->instance->apply->calleeGraph->clearAllStateAfter->new->DeadCodeEliminationPhase->apply->InliningUtil->inline
GraphKit#startIf(LogicNode, double):::Starts an if-block:::thenSuccessor->graph->new->BeginNode->add->elseSuccessor->graph->new->BeginNode->add->node->new->IfNode->append->s->new->IfStructure->pushStructure->return
GraphKit#endIf():::Ends an if block started with #startIf(LogicNode, double).:::s->saveLastIfNode->thenPart->elsePart->merge->if->thenEnd->graph->new->EndNode->add->graph->addAfterFixed->elseEnd->graph->new->EndNode->add->graph->addAfterFixed->graph->new->MergeNode->add->merge->addForwardEnd->merge->addForwardEnd->else->if->else->if->else->popStructure->return
GraphKit#endInvokeWithException():::Finishes a control flow started with #startInvokeWithException:::s->saveLastInvokeWithExceptionNode->noExceptionEdge->exceptionEdge->merge->if->noExceptionEnd->graph->new->EndNode->add->graph->addAfterFixed->exceptionEnd->graph->new->EndNode->add->graph->addAfterFixed->graph->new->MergeNode->add->merge->addForwardEnd->merge->addForwardEnd->else->if->else->if->else->popStructure->return
InstanceOfSnippetsTemplates#makeArguments(InstanceOfUsageReplacer, LoweringTool):::Gets the arguments used to retrieve and instantiate an instanceof snippet template.:::
InstanceOfSnippetsTemplates#createReplacer(FloatingNode, Instantiation, Node, StructuredGraph):::Gets the specific replacer object used to replace the usage of an instanceof node with the result of an instantiated instanceof snippet.:::replacer->if->canMaterialize->trueValue->ConstantNode->forInt->falseValue->ConstantNode->forInt->if->instantiation->isInitialized->new->NonMaterializationUsageReplacer->else->c->c->trueValue->c->falseValue->new->MaterializationUsageReplacer->return
InstanceOfSnippetsTemplates#canMaterialize(Node):::Determines if an instanceof usage can be materialized.:::if->cn->return->cn->trueValue->isConstant->cn->falseValue->isConstant->if->return->return
InstanceOfSnippetsTemplates.Instantiation#isInitialized():::Determines if the instantiation has occurred.:::return
InstanceOfSnippetsTemplates.Instantiation#asCondition(ValueNode):::Gets the result of this instantiation as a condition.:::if->result->isConstant->return->LogicConstantNode->result->asConstant->testValue->asConstant->equals->result->graph->forBoolean->if->getY->result->graph->createCompareNode->return
InstanceOfSnippetsTemplates.Instantiation#asMaterialization(StructuredGraph, ValueNode, ValueNode):::Gets the result of the instantiation as a materialized value.:::if->return->else->return->graph->asCondition->new->ConditionalNode->unique
InstanceOfSnippetsTemplates.InstanceOfUsageReplacer#replaceUsingInstantiation():::Does the replacement based on a previously snippet instantiation.:::
JDK9StringSubstitutions#getValue(String):::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.:::
PEGraphDecoder.PENonAppendGraphBuilderContext#canDeferPlugin(GeneratedInvocationPlugin):::Fold and NodeIntrinsic can be deferred during parsing/decoding:::return->plugin->getSource->equals->plugin->getSource->equals
ReplacementsImpl#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Determines whether a given method should be inlined based on whether it has a substitution or whether the inlining context is already within a substitution.:::msPlugin->getMethodSubstitution->if->if->b->parsingIntrinsic->InlineDuringParsing->b->getOptions->getValue->InlineIntrinsicsDuringParsing->b->getOptions->getValue->return->createMethodSubstitutionInlineInfo->return->if->b->parsingIntrinsic->return->createIntrinsicInlineInfo->else->return
ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition, IntrinsicContext.CompilationContext):::Creates a preprocessed graph for a snippet or method substitution.:::return->createGraphMaker->makeGraph
ReplacementsImpl#makeGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], ResolvedJavaMethod, boolean, NodeSourcePosition):::Creates a preprocessed graph for a snippet or method substitution with a context of :::return->makeGraph
ReplacementsImpl#createGraphMaker(ResolvedJavaMethod, ResolvedJavaMethod):::Can be overridden to return an object that specializes various parts of graph preprocessing.:::return->new->GraphMaker
ReplacementsImpl.GraphMaker#finalizeGraph(StructuredGraph):::Does final processing of a snippet graph.:::if->graph->getOptions->getValue->graph->getNodes->filter->isEmpty->sideEffectCount->new->ConvertDeoptimizeToGuardPhase->apply->new->DeadCodeEliminationPhase->apply->else
ReplacementsImpl.GraphMaker#buildInitialGraph(DebugContext, BytecodeProvider, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, IntrinsicContext.CompilationContext):::Builds the initial graph for a replacement.:::graph->debug->getOptions->new->StructuredGraph.Builder->method->trackNodeSourcePosition->callerContext->setIsSubstitution->build->graph->disableUnsafeAccessTracking->try->s->debug->scope->metaAccess->getMetaAccess->plugins->new->Plugins->config->GraphBuilderConfiguration->getSnippetDefault->if->plugins->new->ConstantBindingParameterPlugin->prependParameterPlugin->initialIntrinsicContext->snippetAnnotation->method->getAnnotation->methodAnnotation->method->getAnnotation->if->new->EncodedIntrinsicContext->else->original->snippetAnnotation->allowPartialIntrinsicArgumentMismatch->new->EncodedIntrinsicContext->createGraphBuilder->apply->new->CanonicalizerPhase->apply->catch->throw->debug->handle->finally->return
ReplacementsUtil#staticAssert(boolean, String):::Asserts that condition evaluates to true by the time compilation is finished:::if->AssertionNode->assertion
ReplacementsUtil#runtimeAssert(boolean, String):::Asserts that condition evaluates to true at runtime:::if->AssertionNode->assertion
SnippetCounter.Group.Factory#createSnippetCounterGroup(String):::If snippet counters are GraalOptions#SnippetCounters enabled, creates and registers a Group with the given name:::
SnippetCounter#compareTo(SnippetCounter):::Sorts counters in descending order of their #value() values.:::return->Long->signum
SnippetCounter#inc():::Increments the value of this counter:::if->getGroup->SnippetCounterNode->increment
SnippetCounter#add(int):::Increments the value of this counter:::if->getGroup->SnippetCounterNode->add
SnippetCounter#value():::Gets the value of this counter.:::return
SnippetCounterNode#addSnippetCounters(LocationIdentity[]):::Add #SNIPPET_COUNTER_LOCATION to privateLocations if it isn't already there.:::foreach->if->location->equals->return->result->Arrays->copyOf->return
SnippetIntegerHistogram#inc(long):::Increments the value of the matching histogram element:::if->if->counter0->inc->else->if->counter1->inc->else->if->counter2->inc->else->if->counter3->inc->else->if->counter4->inc->else->if->counter5->inc->else->if->counter6->inc->else->if->counter7->inc->else->if->counter8->inc->else->if->counter9->inc->else->counter10->inc
SnippetTemplate.AbstractTemplates#snippet(Class, String, ResolvedJavaMethod, Object, LocationIdentity...):::Finds the unique method in declaringClass named methodName annotated by Snippet and returns a SnippetInfo value describing it:::javaMethod->providers->getMetaAccess->findMethod->providers->getReplacements->getValue->registerSnippet->privateLocations->getValue->SnippetCounterNode->addSnippetCounters->if->getValue->return->new->EagerSnippetInfo->else->return->new->LazySnippetInfo
SnippetTemplate.AbstractTemplates#template(ValueNode, Arguments):::Gets a template for a given key, creating it first if necessary.:::graph->replacee->graph->outer->graph->getDebug->template->getValue->templates->get->if->graph->trackNodeSourcePosition->trackNodeSourcePosition->try->debug->openDebugContext->try->a->SnippetTemplateCreationTime->start->s->debug->scope->SnippetTemplates->increment->snippetOptions->getValue->new->OptionValues->graph->trackNodeSourcePosition->new->SnippetTemplate->if->getValue->templates->put->catch->throw->debug->handle->finally->catch->finally->return
SnippetTemplate#hasConstantParameter(ResolvedJavaMethod):::Determines if any parameter of a given method is annotated with ConstantParameter.:::foreach->method->getParameterAnnotations->if->return->return
SnippetTemplate#forBoxed(Object, JavaKind):::Converts a Java boxed value to a JavaConstant of the right kind:::if->return->JavaConstant->forBoxedPrimitive->return->snippetReflection->forBoxed
SnippetTemplate.UsageReplacer#replace(ValueNode, ValueNode):::Replaces all usages of oldNode with direct or indirect usages of newNode.:::
SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments):::Replaces a given fixed node with this specialized snippet.:::return->instantiate
SnippetTemplate#instantiate(MetaAccessProvider, FixedNode, UsageReplacer, Arguments, boolean):::Replaces a given fixed node with this specialized snippet.:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->firstCFGNode->entryPointNode->next->replaceeGraph->replacee->graph->replacements->bind->replacements->AbstractBeginNode->prevBegin->put->duplicates->inlineSnippet->firstCFGNodeDuplicate->duplicates->get->replacee->replaceAtPredecessor->rewireFrameStates->updateStamps->rewireMemoryGraph->returnValue->if->returnDuplicate->duplicates->get->returnDuplicate->result->if->replacee->usages->isNotEmpty->replacer->replace->else->replacer->replace->if->returnDuplicate->isAlive->next->if->fwn->fwn->next->fwn->setNext->returnDuplicate->replaceAndDelete->if->GraphUtil->killCFG->debug->dump->return->catch->finally
SnippetTemplate#copySpecializedGraph(DebugContext):::Gets a copy of the specialized graph.:::return->snippet->copy
SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, LoweringTool, Arguments):::Replaces a given floating node with this specialized snippet.:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->firstCFGNode->entryPointNode->next->replaceeGraph->replacee->graph->replacements->bind->replacements->tool->getCurrentGuardAnchor->asNode->put->duplicates->inlineSnippet->lastFixedNode->tool->lastFixedNode->next->lastFixedNode->next->lastFixedNode->setNext->firstCFGNodeDuplicate->duplicates->get->replaceeGraph->addAfterFixed->updateStamps->rewireMemoryGraph->returnDuplicate->duplicates->get->returnValue->returnDuplicate->result->replacer->replace->if->returnDuplicate->isAlive->returnDuplicate->replaceAndDelete->debug->dump->catch->finally
SnippetTemplate#instantiate(MetaAccessProvider, FloatingNode, UsageReplacer, Arguments):::Replaces a given floating node with this specialized snippet:::debug->replacee->getDebug->try->a->start->increment->entryPointNode->snippet->start->replaceeGraph->replacee->graph->replacements->bind->anchorDuplicate->if->replaceeGraph->new->MemoryAnchorNode->add->replacements->put->floatingNodes->nodes->size->new->ArrayList<>->foreach->if->floatingNodes->add->duplicates->inlineSnippet->updateStamps->rewireMemoryGraph->returnValue->duplicates->returnNode->result->get->replacer->replace->debug->dump->catch->finally
StringSubstitutions#getValue(String):::Will be intrinsified with an InvocationPlugin to a LoadFieldNode.:::
StringUTF16Substitutions#getCharDirect(byte[], int):::Will be intrinsified with an InvocationPlugin to a JavaReadNode.:::
StringUTF16Substitutions#putCharDirect(byte[], int, int):::Will be intrinsified with an InvocationPlugin to a JavaWriteNode.:::

Annotation#getValue():::Returns the value of the attribute, which may be null.:::return
Annotation#toString():::Returns the String representation of this Annotation.:::return->getClass->getName
AttributedCharacterIterator.Attribute#equals(Object):::Compares two objects for equality:::return->super->equals
AttributedCharacterIterator.Attribute#hashCode():::Returns a hash code value for the object:::return->super->hashCode
AttributedCharacterIterator.Attribute#toString():::Returns a string representation of the object:::return->getClass->getName
AttributedCharacterIterator.Attribute#getName():::Returns the name of the attribute.:::return
AttributedCharacterIterator.Attribute#readResolve():::Resolves instances being deserialized to the predefined constants.:::if->this->getClass->throw->new->InvalidObjectException->instance->instanceMap->getName->get->if->return->else->throw->new->InvalidObjectException
AttributedCharacterIterator#getRunStart():::Returns the index of the first character of the run with respect to all attributes containing the current character:::
AttributedCharacterIterator#getRunStart(Attribute):::Returns the index of the first character of the run with respect to the given attribute containing the current character.:::
AttributedCharacterIterator#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.:::
AttributedCharacterIterator#getRunLimit():::Returns the index of the first character following the run with respect to all attributes containing the current character:::
AttributedCharacterIterator#getRunLimit(Attribute):::Returns the index of the first character following the run with respect to the given attribute containing the current character.:::
AttributedCharacterIterator#getRunLimit(Set):::Returns the index of the first character following the run with respect to the given attributes containing the current character.:::
AttributedCharacterIterator#getAttributes():::Returns a map with the attributes defined on the current character.:::
AttributedCharacterIterator#getAttribute(Attribute):::Returns the value of the named attribute for the current character:::
AttributedCharacterIterator#getAllAttributeKeys():::Returns the keys of all attributes defined on the iterator's text range:::
AttributedString#addAttribute(Attribute, Object):::Adds an attribute to the entire string.:::if->throw->new->NullPointerException->len->length->if->throw->new->IllegalArgumentException->addAttributeImpl
AttributedString#addAttribute(Attribute, Object, int, int):::Adds an attribute to a subrange of the string.:::if->throw->new->NullPointerException->if->length->throw->new->IllegalArgumentException->addAttributeImpl
AttributedString#addAttributes(Map, int, int):::Adds a set of attributes to a subrange of the string.:::if->throw->new->NullPointerException->if->length->throw->new->IllegalArgumentException->if->if->attributes->isEmpty->return->throw->new->IllegalArgumentException->if->createRunAttributeDataVectors->beginRunIndex->ensureRunBreak->endRunIndex->ensureRunBreak->iterator->attributes->entrySet->iterator->while->iterator->hasNext->entry->iterator->next->entry->getKey->entry->getValue->addAttributeRunData
AttributedString#addAttributeImpl(Attribute, Object, int, int)::: attributed string add attribute impl:::if->createRunAttributeDataVectors->beginRunIndex->ensureRunBreak->endRunIndex->ensureRunBreak->addAttributeRunData
AttributedString#createRunAttributeDataVectors()::: attributed string create run attribute data vectors:::newRunStarts->new->intArr->newRunAttributes->new->Vector<?>Arr->newRunAttributeValues->new->Vector<?>Arr
AttributedString#ensureRunBreak(int)::: attributed string ensure run break:::return->ensureRunBreak
AttributedString#ensureRunBreak(int, boolean):::Ensures there is a run break at offset, returning the index of the run:::if->length->return->runIndex->while->if->return->currentCapacity->if->newCapacity->newRunStarts->Arrays->copyOf->newRunAttributes->Arrays->copyOf->newRunAttributeValues->Arrays->copyOf->newRunAttributes->newRunAttributeValues->if->oldRunAttributes->oldRunAttributeValues->if->new->Vector<>->if->new->Vector<>->for->i->return
AttributedString#addAttributeRunData(Attribute, Object, int, int)::: attributed string add attribute run data:::for->i
AttributedString#getIterator():::Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.:::return->length->getIterator
AttributedString#getIterator(Attribute[]):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string:::return->length->getIterator
AttributedString#getIterator(Attribute[], int, int):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string:::return->new->AttributedStringIterator
AttributedString#length()::: attributed string length:::return->text->length
AttributedString#charAt(int)::: attributed string char at:::return->text->charAt
AttributedString#getAttribute(Attribute, int)::: attributed string get attribute:::currentRunAttributes->currentRunAttributeValues->if->return->attributeIndex->currentRunAttributes->indexOf->if->return->currentRunAttributeValues->elementAt->else->return
AttributedString#getAttributeCheckRange(Attribute, int, int, int)::: attributed string get attribute check range:::value->getAttribute->if->if->currIndex->runStart->while->getAttribute->valuesMatch->if->return->textLength->length->if->currIndex->runLimit->while->getAttribute->valuesMatch->if->return->return
AttributedString#attributeValuesMatch(Set, int, int)::: attributed string attribute values match:::iterator->attributes->iterator->while->iterator->hasNext->key->iterator->next->if->getAttribute->getAttribute->valuesMatch->return->return
AttributedString#valuesMatch(Object, Object)::: attributed string values match:::if->return->else->return->value1->equals
AttributedString#appendContents(StringBuffer, CharacterIterator):::Appends the contents of the CharacterIterator iterator into the StringBuffer buf.:::index->iterator->getBeginIndex->end->iterator->getEndIndex->while->iterator->setIndex->buf->iterator->current->append
AttributedString#setAttributes(Map, int):::Sets the attributes for the range from offset to the next run break (typically the end of the text) to the ones specified in attrs:::if->createRunAttributeDataVectors->index->ensureRunBreak->size->if->attrs->size->runAttrs->new->Vector<>->runValues->new->Vector<>->iterator->attrs->entrySet->iterator->while->iterator->hasNext->entry->iterator->next->runAttrs->entry->getKey->add->runValues->entry->getValue->add
AttributedString#mapsDiffer(Map, Map):::Returns true if the attributes specified in last and attrs differ.:::if->return->attrs->size->return->last->equals
AttributedString.AttributedStringIterator#equals(Object)::: attributed string iterator equals:::if->return->if->return->that->if->that->getString->return->if->return->return
AttributedString.AttributedStringIterator#hashCode()::: attributed string iterator hash code:::return->text->hashCode
AttributedString.AttributedStringIterator#clone()::: attributed string iterator clone:::try->other->super->clone->return->catch->throw->new->InternalError->finally
AttributedString.AttributedStringIterator#first()::: attributed string iterator first:::return->internalSetIndex
AttributedString.AttributedStringIterator#last()::: attributed string iterator last:::if->return->internalSetIndex->else->return->internalSetIndex
AttributedString.AttributedStringIterator#current()::: attributed string iterator current:::if->return->else->return->charAt
AttributedString.AttributedStringIterator#next()::: attributed string iterator next:::if->return->internalSetIndex->else->return
AttributedString.AttributedStringIterator#previous()::: attributed string iterator previous:::if->return->internalSetIndex->else->return
AttributedString.AttributedStringIterator#setIndex(int)::: attributed string iterator set index:::if->throw->new->IllegalArgumentException->return->internalSetIndex
AttributedString.AttributedStringIterator#getBeginIndex()::: attributed string iterator get begin index:::return
AttributedString.AttributedStringIterator#getEndIndex()::: attributed string iterator get end index:::return
AttributedString.AttributedStringIterator#getIndex()::: attributed string iterator get index:::return
AttributedString.AttributedStringIterator#getRunStart()::: attributed string iterator get run start:::return
AttributedString.AttributedStringIterator#getRunStart(Attribute)::: attributed string iterator get run start:::if->return->else->value->getAttribute->runStart->runIndex->while->AttributedString.this->getAttribute->valuesMatch->if->return
AttributedString.AttributedStringIterator#getRunStart(Set)::: attributed string iterator get run start:::if->return->else->runStart->runIndex->while->AttributedString.this->attributeValuesMatch->if->return
AttributedString.AttributedStringIterator#getRunLimit()::: attributed string iterator get run limit:::return
AttributedString.AttributedStringIterator#getRunLimit(Attribute)::: attributed string iterator get run limit:::if->return->else->value->getAttribute->runLimit->runIndex->while->AttributedString.this->getAttribute->valuesMatch->if->return
AttributedString.AttributedStringIterator#getRunLimit(Set)::: attributed string iterator get run limit:::if->return->else->runLimit->runIndex->while->AttributedString.this->attributeValuesMatch->if->return
AttributedString.AttributedStringIterator#getAttributes()::: attributed string iterator get attributes:::if->return->new->Hashtable<>->return->new->AttributeMap
AttributedString.AttributedStringIterator#getAllAttributeKeys()::: attributed string iterator get all attribute keys:::if->return->new->HashSet<>->synchronized->keys->new->HashSet<>->i->while->if->currentRunAttributes->if->j->currentRunAttributes->size->while->keys->currentRunAttributes->get->add->return
AttributedString.AttributedStringIterator#getAttribute(Attribute)::: attributed string iterator get attribute:::runIndex->if->return->return->AttributedString.this->getAttributeCheckRange
AttributedString.AttributedStringIterator#getString()::: attributed string iterator get string:::return
AttributedString.AttributedStringIterator#internalSetIndex(int)::: attributed string iterator internal set index:::if->updateRunInfo->if->return->else->return->charAt
AttributedString.AttributedStringIterator#updateRunInfo()::: attributed string iterator update run info:::if->else->synchronized->runIndex->while->if->if->else->if->if->else
AttributedString.AttributeMap#entrySet()::: attribute map entry set:::set->new->HashSet<>->synchronized->size->size->for->i->return
AttributedString.AttributeMap#get(Object)::: attribute map get:::return->AttributedString.this->getAttributeCheckRange
AttributeEntry#equals(Object)::: attribute entry equals:::if->return->other->return->equals->equals
AttributeEntry#getKey()::: attribute entry get key:::return
AttributeEntry#getValue()::: attribute entry get value:::return
AttributeEntry#setValue(Object)::: attribute entry set value:::throw->new->UnsupportedOperationException
AttributeEntry#hashCode()::: attribute entry hash code:::return->key->hashCode->value->hashCode
AttributeEntry#toString()::: attribute entry to string:::return->key->toString->value->toString
Bidi#createLineBidi(int, int):::Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi:::astr->new->AttributedString->newBidi->astr->getIterator->new->Bidi->return->bidiBase->setLine
Bidi#isMixed():::Return true if the line is not left-to-right or right-to-left:::return->bidiBase->isMixed
Bidi#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.:::return->bidiBase->isLeftToRight
Bidi#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left.:::return->bidiBase->isRightToLeft
Bidi#getLength():::Return the length of text in the line.:::return->bidiBase->getLength
Bidi#baseIsLeftToRight():::Return true if the base direction is left-to-right.:::return->bidiBase->baseIsLeftToRight
Bidi#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).:::return->bidiBase->getParaLevel
Bidi#getLevelAt(int):::Return the resolved level of the character at offset:::return->bidiBase->getLevelAt
Bidi#getRunCount():::Return the number of level runs.:::return->bidiBase->countRuns
Bidi#getRunLevel(int):::Return the level of the nth logical run in this line.:::return->bidiBase->getRunLevel
Bidi#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.:::return->bidiBase->getRunStart
Bidi#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line:::return->bidiBase->getRunLimit
Bidi#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis:::return->BidiBase->requiresBidi
Bidi#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels:::BidiBase->reorderVisually
Bidi#toString():::Display the bidi internal state, used in debugging.:::return->bidiBase->toString
BreakIterator#clone():::Create a copy of this iterator:::try->return->super->clone->catch->throw->new->InternalError->finally
BreakIterator#first():::Returns the first boundary:::
BreakIterator#last():::Returns the last boundary:::
BreakIterator#next(int):::Returns the nth boundary from the current boundary:::
BreakIterator#next():::Returns the boundary following the current boundary:::
BreakIterator#previous():::Returns the boundary preceding the current boundary:::
BreakIterator#following(int):::Returns the first boundary following the specified character offset:::
BreakIterator#preceding(int):::Returns the last boundary preceding the specified character offset:::pos->following->while->previous->return
BreakIterator#isBoundary(int):::Returns true if the specified character offset is a text boundary.:::if->return->boundary->following->if->throw->new->IllegalArgumentException->return
BreakIterator#current():::Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int):::
BreakIterator#getText():::Get the text being scanned:::
BreakIterator#setText(String):::Set a new text string to be scanned:::new->StringCharacterIterator->setText
BreakIterator#setText(CharacterIterator):::Set a new text for scanning:::
BreakIterator#getWordInstance():::Returns a new BreakIterator instance for word breaks for the Locale#getDefault() default locale.:::return->Locale->getDefault->getWordInstance
BreakIterator#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.:::return->getBreakInstance
BreakIterator#getLineInstance():::Returns a new BreakIterator instance for line breaks for the Locale#getDefault() default locale.:::return->Locale->getDefault->getLineInstance
BreakIterator#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.:::return->getBreakInstance
BreakIterator#getCharacterInstance():::Returns a new BreakIterator instance for character breaks for the Locale#getDefault() default locale.:::return->Locale->getDefault->getCharacterInstance
BreakIterator#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.:::return->getBreakInstance
BreakIterator#getSentenceInstance():::Returns a new BreakIterator instance for sentence breaks for the Locale#getDefault() default locale.:::return->Locale->getDefault->getSentenceInstance
BreakIterator#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.:::return->getBreakInstance
BreakIterator#getBreakInstance(Locale, int)::: break iterator get break instance:::if->cache->get->if->if->cache->getLocale->equals->return->cache->createBreakInstance->result->createBreakInstance->cache->new->BreakIteratorCache->new->SoftReference<>->return
BreakIterator#createBreakInstance(Locale, int)::: break iterator create break instance:::adapter->LocaleProviderAdapter->getAdapter->iterator->createBreakInstance->if->LocaleProviderAdapter->forJRE->createBreakInstance->return
BreakIterator#createBreakInstance(LocaleProviderAdapter, Locale, int)::: break iterator create break instance:::breakIteratorProvider->adapter->getBreakIteratorProvider->iterator->switch->breakIteratorProvider->getCharacterInstance->break->breakIteratorProvider->getWordInstance->break->breakIteratorProvider->getLineInstance->break->breakIteratorProvider->getSentenceInstance->break->return
BreakIterator#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
BreakIterator.BreakIteratorCache#getLocale()::: break iterator cache get locale:::return
BreakIterator.BreakIteratorCache#createBreakInstance()::: break iterator cache create break instance:::return->iter->clone
CalendarBuilder#set(int, int)::: calendar builder set:::if->toCalendarDayOfWeek->if->return
CalendarBuilder#addYear(int)::: calendar builder add year:::return
CalendarBuilder#isSet(int)::: calendar builder is set:::if->return
CalendarBuilder#clear(int)::: calendar builder clear:::if->return
CalendarBuilder#establish(Calendar)::: calendar builder establish:::weekDate->isSet->if->cal->isWeekDateSupported->if->isSet->set->cal->clear->for->stamp->if->weekOfYear->isSet->dayOfWeek->isSet->cal->getFirstDayOfWeek->if->isValidDayOfWeek->cal->isLenient->if->else->while->toCalendarDayOfWeek->cal->setWeekDate->return
CalendarBuilder#toString()::: calendar builder to string:::sj->new->StringJoiner->for->i->return->sj->toString
CalendarBuilder#toISODayOfWeek(int)::: calendar builder to day of week:::return
CalendarBuilder#toCalendarDayOfWeek(int)::: calendar builder to calendar day of week:::if->isValidDayOfWeek->return->return
CalendarBuilder#isValidDayOfWeek(int)::: calendar builder is valid day of week:::return
CharacterIterator#first():::Sets the position to getBeginIndex() and returns the character at that position.:::
CharacterIterator#last():::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.:::
CharacterIterator#current():::Gets the character at the current position (as returned by getIndex()).:::
CharacterIterator#next():::Increments the iterator's index by one and returns the character at the new index:::
CharacterIterator#previous():::Decrements the iterator's index by one and returns the character at the new index:::
CharacterIterator#setIndex(int):::Sets the position to the specified position in the text and returns that character.:::
CharacterIterator#getBeginIndex():::Returns the start index of the text.:::
CharacterIterator#getEndIndex():::Returns the end index of the text:::
CharacterIterator#getIndex():::Returns the current index.:::
CharacterIterator#clone():::Create a copy of this iterator:::
CharacterIteratorFieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer)::: character iterator field delegate formatted:::if->if->index->asIndex->attributedStrings->size->while->as->attributedStrings->get->newIndex->as->length->aStart->Math->max->as->Math->as->length->min->addAttribute->if->attributedStrings->buffer->substring->new->AttributedString->add->if->aStart->Math->max->string->buffer->substring->new->AttributedString->string->addAttribute->attributedStrings->add
CharacterIteratorFieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer)::: character iterator field delegate formatted:::formatted
CharacterIteratorFieldDelegate#getIterator(String):::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.:::if->string->length->attributedStrings->string->substring->new->AttributedString->add->string->length->iCount->attributedStrings->size->iterators->new->AttributedCharacterIteratorArr->for->counter->return->new->AttributedString->getIterator
ChoiceFormat#applyPattern(String):::Sets the pattern.:::segments->new->StringBufferArr->for->i->newChoiceLimits->new->doubleArr->newChoiceFormats->new->StringArr->count->part->startValue->oldStartValue->inQuote->for->i->newPattern->length->if->if->doubleArraySize->doubleArraySize->toString->new->doubleArr->System->arraycopy->new->StringArr->System->arraycopy
ChoiceFormat#toPattern():::Gets the pattern.:::result->new->StringBuilder->for->i->return->result->toString
ChoiceFormat#setChoices(double[], String[]):::Set the choices to be used in formatting.:::if->throw->new->IllegalArgumentException->Arrays->copyOf->Arrays->copyOf
ChoiceFormat#getLimits():::Get the limits passed in the constructor.:::newLimits->Arrays->copyOf->return
ChoiceFormat#getFormats():::Get the formats passed in the constructor.:::newFormats->Arrays->copyOf->return
ChoiceFormat#format(long, StringBuffer, FieldPosition):::Specialization of format:::return->format
ChoiceFormat#format(double, StringBuffer, FieldPosition):::Returns pattern with formatted double.:::i->for->if->return->toAppendTo->append
ChoiceFormat#parse(String, ParsePosition):::Parses a Number from the input text.:::start->furthest->bestNumber->tempNumber->for->i->if->return->Double->valueOf
ChoiceFormat#nextDouble(double):::Finds the least double greater than d:::return->nextDouble
ChoiceFormat#previousDouble(double):::Finds the greatest double less than d:::return->nextDouble
ChoiceFormat#clone():::Overrides Cloneable:::other->super->clone->choiceLimits->clone->choiceFormats->clone->return
ChoiceFormat#hashCode():::Generates a hash code for the message format object.:::result->if->hashCode->return
ChoiceFormat#equals(Object):::Equality comparison between two:::if->return->if->return->if->getClass->obj->getClass->return->other->return->Arrays->equals->Arrays->equals
ChoiceFormat#readObject(ObjectInputStream):::After reading an object from the input stream, do a simple verification to maintain class invariants.:::in->defaultReadObject->if->throw->new->InvalidObjectException
ChoiceFormat#nextDouble(double, boolean):::Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false):::if->Double->isNaN->return->if->smallestPositiveDouble->Double->longBitsToDouble->if->return->else->return->bits->Double->doubleToLongBits->magnitude->if->if->else->signbit->return->Double->longBitsToDouble
ChoiceFormat#doubleArraySize(double[])::: choice format double array size:::oldSize->newArray->new->doubleArr->System->arraycopy->return
ChoiceFormat#doubleArraySize(String[])::: choice format double array size:::oldSize->newArray->new->StringArr->System->arraycopy->return
CollationElementIterator#reset():::Resets the cursor to the beginning of the string:::if->text->reset->mode->CollatorUtilities->owner->getDecomposition->toNormalizerMode->text->setMode
CollationElementIterator#next():::Get the next collation element in the string:::if->return->textMode->text->getMode->ownerMode->CollatorUtilities->owner->getDecomposition->toNormalizerMode->if->text->setMode->if->if->return->strengthOrder->else->else->if->if->Character->isSupplementaryCodePoint->chars->Character->toChars->return->order->return->ch->text->next->if->return->value->ordering->getUnicodeOrder->if->return->else->if->nextContractChar->if->ordering->getExpandValueList->if->ordering->isSEAsianSwapping->consonant->if->isThaiPreVowel->text->next->if->isThaiBaseConsonant->makeReorderedBuffer->else->if->text->previous->if->isLaoPreVowel->text->next->if->isLaoBaseConsonant->makeReorderedBuffer->else->if->text->previous->return->strengthOrder
CollationElementIterator#previous():::Get the previous collation element in the string:::if->return->textMode->text->getMode->ownerMode->CollatorUtilities->owner->getDecomposition->toNormalizerMode->if->text->setMode->if->if->return->strengthOrder->else->else->if->if->Character->isSupplementaryCodePoint->chars->Character->toChars->return->order->return->ch->text->previous->if->return->value->ordering->getUnicodeOrder->if->return->else->if->prevContractChar->if->ordering->getExpandValueList->if->ordering->isSEAsianSwapping->vowel->if->isThaiBaseConsonant->text->previous->if->isThaiPreVowel->makeReorderedBuffer->else->text->next->if->isLaoBaseConsonant->text->previous->if->isLaoPreVowel->makeReorderedBuffer->else->text->next->return->strengthOrder
CollationElementIterator#primaryOrder(int):::Return the primary component of a collation element.:::return
CollationElementIterator#secondaryOrder(int):::Return the secondary component of a collation element.:::return
CollationElementIterator#tertiaryOrder(int):::Return the tertiary component of a collation element.:::return
CollationElementIterator#strengthOrder(int)::: Get the comparison order in the desired strength:::s->owner->getStrength->if->else->if->return
CollationElementIterator#setOffset(int):::Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements):::if->if->text->getBeginIndex->text->getEndIndex->text->setIndexOnly->else->c->text->setIndex->if->ordering->usedInContractSeq->while->ordering->usedInContractSeq->text->previous->last->text->getIndex->while->text->getIndex->text->getIndex->next->text->setIndexOnly
CollationElementIterator#getOffset():::Returns the character offset in the original text corresponding to the next collation element:::return->text->getIndex
CollationElementIterator#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.:::return->ordering->getMaxExpansion
CollationElementIterator#setText(String):::Set a new string over which to iterate.:::mode->CollatorUtilities->owner->getDecomposition->toNormalizerMode->if->new->NormalizerBase->else->text->setMode->text->setText
CollationElementIterator#setText(CharacterIterator):::Set a new string over which to iterate.:::mode->CollatorUtilities->owner->getDecomposition->toNormalizerMode->if->new->NormalizerBase->else->text->setMode->text->setText
CollationElementIterator#isThaiPreVowel(int):::Determine if a character is a Thai vowel (which sorts after its base consonant).:::return
CollationElementIterator#isThaiBaseConsonant(int):::Determine if a character is a Thai base consonant:::return
CollationElementIterator#isLaoPreVowel(int):::Determine if a character is a Lao vowel (which sorts after its base consonant).:::return
CollationElementIterator#isLaoBaseConsonant(int):::Determine if a character is a Lao base consonant:::return
CollationElementIterator#makeReorderedBuffer(int, int, int[], boolean):::This method produces a buffer which contains the collation elements for the two characters, with colFirst's values preceding another character's:::result->firstValue->ordering->getUnicodeOrder->if->nextContractChar->prevContractChar->firstExpansion->if->ordering->getExpandValueList->if->temp1->temp2->if->new->intArr->else->firstLength->lastLength->new->intArr->if->else->System->arraycopy->if->else->System->arraycopy->return
CollationElementIterator#isIgnorable(int)::: Check if a comparison order is ignorable.:::return->primaryOrder
CollationElementIterator#nextContractChar(int):::Get the ordering priority of the next contracting character in the string.:::list->ordering->getContractValues->pair->list->firstElement->order->list->lastElement->maxLength->length->tempText->text->clone->tempText->previous->key->setLength->c->tempText->next->while->if->Character->isSupplementaryCodePoint->key->Character->toChars->append->else->key->append->tempText->next->fragment->key->toString->for->i->list->size->while->text->next->Character->charCount->return
CollationElementIterator#prevContractChar(int):::Get the ordering priority of the previous contracting character in the string.:::list->ordering->getContractValues->pair->list->firstElement->order->list->lastElement->maxLength->length->tempText->text->clone->tempText->next->key->setLength->c->tempText->previous->while->if->Character->isSupplementaryCodePoint->key->Character->toChars->append->else->key->append->tempText->previous->fragment->key->toString->for->i->list->size->while->text->previous->Character->charCount->return
CollationKey#compareTo(CollationKey):::Compare this CollationKey to the target CollationKey:::
CollationKey#getSourceString():::Returns the String that this CollationKey represents.:::return
CollationKey#toByteArray():::Converts the CollationKey to a sequence of bits:::
Collator#getInstance():::Gets the Collator for the current default locale:::return->Locale->getDefault->getInstance
Collator#getInstance(Locale):::Gets the Collator for the desired locale.:::ref->cache->get->result->ref->get->if->adapter->LocaleProviderAdapter->getAdapter->provider->adapter->getCollatorProvider->provider->getInstance->if->LocaleProviderAdapter->forJRE->getCollatorProvider->getInstance->while->if->cache->remove->cache->new->SoftReference<>->putIfAbsent->if->break->cachedColl->ref->get->if->break->return->result->clone
Collator#compare(String, String):::Compares the source string to the target string according to the collation rules for this Collator:::
Collator#compare(Object, Object):::Compares its two arguments for order:::return->compare
Collator#getCollationKey(String):::Transforms the String into a series of bits that can be compared bitwise to other CollationKeys:::
Collator#equals(String, String):::Convenience method for comparing the equality of two strings based on this Collator's collation rules.:::return->compare
Collator#getStrength():::Returns this Collator's strength property:::return
Collator#setStrength(int):::Sets this Collator's strength property:::if->throw->new->IllegalArgumentException
Collator#getDecomposition():::Get the decomposition mode of this Collator:::return
Collator#setDecomposition(int):::Set the decomposition mode of this Collator:::if->throw->new->IllegalArgumentException
Collator#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
Collator#clone():::Overrides Cloneable:::try->return->super->clone->catch->throw->new->InternalError->finally
Collator#equals(Object):::Compares the equality of two Collators.:::if->return->if->return->if->getClass->that->getClass->return->other->return
Collator#hashCode():::Generates the hash code for this Collator.:::
DateFormat#format(Object, StringBuffer, FieldPosition):::Formats the given Object into a date-time string:::if->return->format->else->if->return->longValue->new->Date->format->else->throw->new->IllegalArgumentException
DateFormat#format(Date, StringBuffer, FieldPosition):::Formats a Date into a date-time string:::
DateFormat#format(Date):::Formats a Date into a date-time string.:::return->new->StringBuffer->format->toString
DateFormat#parse(String):::Parses text from the beginning of the given string to produce a date:::pos->new->ParsePosition->result->parse->if->throw->new->ParseException->return
DateFormat#parse(String, ParsePosition):::Parse a date/time string according to the given parse position:::
DateFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Date:::return->parse
DateFormat#getTimeInstance():::Gets the time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getTimeInstance(int):::Gets the time formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getTimeInstance(int, Locale):::Gets the time formatter with the given formatting style for the given locale.:::return->get
DateFormat#getDateInstance():::Gets the date formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getDateInstance(int):::Gets the date formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getDateInstance(int, Locale):::Gets the date formatter with the given formatting style for the given locale.:::return->get
DateFormat#getDateTimeInstance():::Gets the date/time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getDateTimeInstance(int, int):::Gets the date/time formatter with the given date and time formatting styles for the default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->get
DateFormat#getDateTimeInstance(int, int, Locale):::Gets the date/time formatter with the given formatting styles for the given locale.:::return->get
DateFormat#getInstance():::Get a default date/time formatter that uses the SHORT style for both the date and the time.:::return->getDateTimeInstance
DateFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
DateFormat#setCalendar(Calendar):::Set the calendar to be used by this date format:::
DateFormat#getCalendar():::Gets the calendar associated with this date/time formatter.:::return
DateFormat#setNumberFormat(NumberFormat):::Allows you to set the number formatter.:::
DateFormat#getNumberFormat():::Gets the number formatter which this date/time formatter uses to format and parse a time.:::return
DateFormat#setTimeZone(TimeZone):::Sets the time zone for the calendar of this DateFormat object:::calendar->setTimeZone
DateFormat#getTimeZone():::Gets the time zone:::return->calendar->getTimeZone
DateFormat#setLenient(boolean):::Specify whether or not date/time parsing is to be lenient:::calendar->setLenient
DateFormat#isLenient():::Tell whether date/time parsing is to be lenient:::return->calendar->isLenient
DateFormat#hashCode():::Overrides hashCode:::return->numberFormat->hashCode
DateFormat#equals(Object):::Overrides equals:::if->return->if->getClass->obj->getClass->return->other->return->calendar->getFirstDayOfWeek->getFirstDayOfWeek->calendar->getMinimalDaysInFirstWeek->getMinimalDaysInFirstWeek->calendar->isLenient->isLenient->calendar->getTimeZone->getTimeZone->equals->numberFormat->equals
DateFormat#clone():::Overrides Cloneable:::other->super->clone->calendar->clone->numberFormat->clone->return
DateFormat#get(int, int, int, Locale):::Creates a DateFormat with the given time and/or date style in the given locale.:::if->if->throw->new->IllegalArgumentException->else->if->if->throw->new->IllegalArgumentException->else->adapter->LocaleProviderAdapter->getAdapter->dateFormat->get->if->LocaleProviderAdapter->forJRE->get->return
DateFormat#get(LocaleProviderAdapter, int, int, Locale)::: date format get:::provider->adapter->getDateFormatProvider->dateFormat->if->provider->getDateInstance->else->if->provider->getTimeInstance->else->provider->getDateTimeInstance->return
DateFormat.Field#ofCalendarField(int):::Returns the Field constant that corresponds to the Calendar constant calendarField:::if->throw->new->IllegalArgumentException->return
DateFormat.Field#getCalendarField():::Returns the Calendar field associated with this attribute:::return
DateFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::if->this->getClass->throw->new->InvalidObjectException->instance->instanceMap->getName->get->if->return->else->throw->new->InvalidObjectException
DateFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
DateFormatSymbols#getInstance():::Gets the DateFormatSymbols instance for the default locale:::return->Locale->getDefault->getInstance
DateFormatSymbols#getInstance(Locale):::Gets the DateFormatSymbols instance for the specified locale:::dfs->getProviderInstance->if->return->throw->new->RuntimeException
DateFormatSymbols#getInstanceRef(Locale):::Returns a DateFormatSymbols provided by a provider or found in the cache:::dfs->getProviderInstance->if->return->throw->new->RuntimeException
DateFormatSymbols#getProviderInstance(Locale)::: date format symbols get provider instance:::adapter->LocaleProviderAdapter->getAdapter->provider->adapter->getDateFormatSymbolsProvider->dfsyms->provider->getInstance->if->LocaleProviderAdapter->forJRE->getDateFormatSymbolsProvider->provider->getInstance->return
DateFormatSymbols#getEras():::Gets era strings:::return->Arrays->copyOf
DateFormatSymbols#setEras(String[]):::Sets era strings:::Arrays->copyOf
DateFormatSymbols#getMonths():::Gets month strings:::return->Arrays->copyOf
DateFormatSymbols#setMonths(String[]):::Sets month strings:::Arrays->copyOf
DateFormatSymbols#getShortMonths():::Gets short month strings:::return->Arrays->copyOf
DateFormatSymbols#setShortMonths(String[]):::Sets short month strings:::Arrays->copyOf
DateFormatSymbols#getWeekdays():::Gets weekday strings:::return->Arrays->copyOf
DateFormatSymbols#setWeekdays(String[]):::Sets weekday strings:::Arrays->copyOf
DateFormatSymbols#getShortWeekdays():::Gets short weekday strings:::return->Arrays->copyOf
DateFormatSymbols#setShortWeekdays(String[]):::Sets short weekday strings:::Arrays->copyOf
DateFormatSymbols#getAmPmStrings():::Gets ampm strings:::return->Arrays->copyOf
DateFormatSymbols#setAmPmStrings(String[]):::Sets ampm strings:::Arrays->copyOf
DateFormatSymbols#getZoneStrings():::Gets time zone strings:::return->getZoneStringsImpl
DateFormatSymbols#setZoneStrings(String[][]):::Sets time zone strings:::aCopy->new->StringArrs->for->i
DateFormatSymbols#getLocalPatternChars():::Gets localized date-time pattern characters:::return
DateFormatSymbols#setLocalPatternChars(String):::Sets localized date-time pattern characters:::newLocalPatternChars->toString
DateFormatSymbols#clone():::Overrides Cloneable:::try->other->super->clone->copyMembers->return->catch->throw->new->InternalError->finally
DateFormatSymbols#hashCode():::Override hashCode:::hashCode->if->Arrays->hashCode->Arrays->hashCode->Arrays->hashCode->Arrays->hashCode->Arrays->hashCode->Arrays->hashCode->Arrays->getZoneStringsWrapper->deepHashCode->Objects->hashCode->if->return
DateFormatSymbols#equals(Object):::Override equals:::if->return->if->getClass->obj->getClass->return->that->return->Arrays->equals->Arrays->equals->Arrays->equals->Arrays->equals->Arrays->equals->Arrays->equals->Arrays->getZoneStringsWrapper->that->getZoneStringsWrapper->deepEquals->localPatternChars->equals
DateFormatSymbols#initializeData(Locale):::Initializes this DateFormatSymbols with the locale data:::ref->cachedInstances->get->dfs->if->ref->get->if->cachedInstances->remove->new->DateFormatSymbols->override->CalendarDataUtility->findRegionOverride->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->resource->getLocaleData->getDateFormatData->if->resource->containsKey->resource->getStringArray->else->if->resource->containsKey->resource->getStringArray->else->if->resource->containsKey->resource->getStringArray->resource->getStringArray->resource->getStringArray->resource->getStringArray->resource->getString->resource->getStringArray->toOneBasedArray->resource->getStringArray->toOneBasedArray->new->SoftReference<>->x->cachedInstances->putIfAbsent->if->y->x->get->if->cachedInstances->replace->else->copyMembers
DateFormatSymbols#toOneBasedArray(String[])::: date format symbols to one based array:::len->dst->new->StringArr->for->i->return
DateFormatSymbols#getZoneIndex(String):::Package private: used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting:::zoneStrings->getZoneStringsWrapper->if->ID->equals->return->for->index->return
DateFormatSymbols#getZoneStringsWrapper():::Wrapper method to the getZoneStrings(), which is called from inside the java.text package and not to mutate the returned arrays, so that it does not need to create a defensive copy.:::if->isSubclassObject->return->getZoneStrings->else->return->getZoneStringsImpl
DateFormatSymbols#getZoneStringsImpl(boolean)::: date format symbols get zone strings impl:::if->TimeZoneNameUtility->getZoneStrings->if->return->len->aCopy->new->StringArrs->for->i->return
DateFormatSymbols#isSubclassObject()::: date format symbols is subclass object:::return->getClass->getName->equals
DateFormatSymbols#copyMembers(DateFormatSymbols, DateFormatSymbols):::Clones all the data members from the source DateFormatSymbols to the target DateFormatSymbols.:::Arrays->copyOf->Arrays->copyOf->Arrays->copyOf->Arrays->copyOf->Arrays->copyOf->Arrays->copyOf->if->src->getZoneStringsImpl->else
DateFormatSymbols#writeObject(ObjectOutputStream):::Write out the default serializable data, after ensuring the zoneStrings field is initialized in order to make sure the backward compatibility.:::if->TimeZoneNameUtility->getZoneStrings->stream->defaultWriteObject
DecimalFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer:::if->bitLength->return->longValue->format->else->if->return->format->else->if->return->format->else->if->return->doubleValue->format->else->throw->new->IllegalArgumentException
DecimalFormat#format(double, StringBuffer, FieldPosition):::Formats a double to produce a string.:::tryFastPath->if->else->fieldPosition->setBeginIndex->fieldPosition->setEndIndex->if->tempResult->fastFormat->if->result->append->return->return->fieldPosition->getFieldDelegate->format
DecimalFormat#format(double, StringBuffer, FieldDelegate):::Formats a double to produce a string.:::if->Double->isNaN->Double->isInfinite->iFieldStart->result->length->result->symbols->getNaN->append->delegate->result->length->formatted->return->isNegative->if->if->Double->isInfinite->if->getNegativePrefixFieldPositions->append->else->getPositivePrefixFieldPositions->append->iFieldStart->result->length->result->symbols->getInfinity->append->delegate->result->length->formatted->if->getNegativeSuffixFieldPositions->append->else->getPositiveSuffixFieldPositions->append->return->if->synchronized->maxIntDigits->super->getMaximumIntegerDigits->minIntDigits->super->getMinimumIntegerDigits->maxFraDigits->super->getMaximumFractionDigits->minFraDigits->super->getMinimumFractionDigits->digitList->set->return->subformat
DecimalFormat#format(long, StringBuffer, FieldPosition):::Format a long to produce a string.:::fieldPosition->setBeginIndex->fieldPosition->setEndIndex->return->fieldPosition->getFieldDelegate->format
DecimalFormat#format(long, StringBuffer, FieldDelegate):::Format a long to produce a string.:::isNegative->if->useBigInteger->if->if->else->if->cutoff->if->if->if->bigIntegerValue->BigInteger->valueOf->return->format->if->else->if->synchronized->maxIntDigits->super->getMaximumIntegerDigits->minIntDigits->super->getMinimumIntegerDigits->maxFraDigits->super->getMaximumFractionDigits->minFraDigits->super->getMinimumFractionDigits->digitList->set->return->subformat
DecimalFormat#format(BigDecimal, StringBuffer, FieldPosition):::Formats a BigDecimal to produce a string.:::fieldPosition->setBeginIndex->fieldPosition->setEndIndex->return->fieldPosition->getFieldDelegate->format
DecimalFormat#format(BigDecimal, StringBuffer, FieldDelegate):::Formats a BigDecimal to produce a string.:::if->number->getBigDecimalMultiplier->multiply->isNegative->number->signum->if->number->negate->synchronized->maxIntDigits->getMaximumIntegerDigits->minIntDigits->getMinimumIntegerDigits->maxFraDigits->getMaximumFractionDigits->minFraDigits->getMinimumFractionDigits->maximumDigits->digitList->set->return->subformat
DecimalFormat#format(BigInteger, StringBuffer, FieldPosition):::Format a BigInteger to produce a string.:::fieldPosition->setBeginIndex->fieldPosition->setEndIndex->return->fieldPosition->getFieldDelegate->format
DecimalFormat#format(BigInteger, StringBuffer, FieldDelegate, boolean):::Format a BigInteger to produce a string.:::if->number->getBigIntegerMultiplier->multiply->isNegative->number->signum->if->number->negate->synchronized->maxIntDigits->minIntDigits->maxFraDigits->minFraDigits->maximumDigits->if->super->getMaximumIntegerDigits->super->getMinimumIntegerDigits->super->getMaximumFractionDigits->super->getMinimumFractionDigits->else->getMaximumIntegerDigits->getMinimumIntegerDigits->getMaximumFractionDigits->getMinimumFractionDigits->if->digitList->set->return->subformat
DecimalFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::delegate->new->CharacterIteratorFieldDelegate->sb->new->StringBuffer->if->doubleValue->format->else->if->longValue->format->else->if->format->else->if->format->else->if->throw->new->NullPointerException->else->throw->new->IllegalArgumentException->return->delegate->sb->toString->getIterator
DecimalFormat#checkAndSetFastPathStatus():::Check validity of using fast-path for this instance:::fastPathWasOn->if->isGroupingUsed->if->if->if->else->if->else->resetFastPathData->return
DecimalFormat#resetFastPathData(boolean)::: decimal format reset fast path data:::if->if->new->FastPathData->symbols->getZeroDigit->symbols->getGroupingSeparator->positivePrefix->length->positiveSuffix->length->negativePrefix->length->negativeSuffix->length->maxNbIntegralDigits->maxNbGroups->containerSize->Math->positivePrefix->length->negativePrefix->length->max->Math->positiveSuffix->length->negativeSuffix->length->max->new->charArr->positiveSuffix->toCharArray->negativeSuffix->toCharArray->positivePrefix->toCharArray->negativePrefix->toCharArray->longestPrefixLength->Math->positivePrefix->length->negativePrefix->length->max->decimalPointIndex->symbols->getMonetaryDecimalSeparator->symbols->getDecimalSeparator->else->if
DecimalFormat#exactRoundUp(double, int):::Returns true if rounding-up must be done on scaledFractionalPartAsInt, false otherwise:::approxMax->approxMedium->approxMin->fastTwoSumApproximation->fastTwoSumRoundOff->bVirtual->if->else->approxS1->roundoffS1->roundoff1000->approx1000->roundoffTotal->scaledFractionalRoundoff->if->return->else->if->return->else->if->return->return
DecimalFormat#collectIntegralDigits(int, char[], int):::Collects integral digits from passed number, while setting grouping chars as needed:::index->q->r->while->if->if
DecimalFormat#collectFractionalDigits(int, char[], int):::Collects the 2 (currency) or 3 (decimal) fractional digits from passed number, starting at startIndex position inclusive:::index->digitOnes->digitTens->if->else->if->if->else->if->else
DecimalFormat#addAffixes(char[], char[], char[])::: decimal format add affixes:::pl->sl->if->prependPrefix->if->appendSuffix
DecimalFormat#prependPrefix(char[], int, char[]):::Prepends the passed prefix chars to given result container:::startIndex->if->else->if->dstLower->dstUpper->srcUpper->if->if->else->System->arraycopy
DecimalFormat#appendSuffix(char[], int, char[]):::Appends the passed suffix chars to given result container:::startIndex->if->else->if->dstLower->dstUpper->srcUpper->if->if->else->System->arraycopy
DecimalFormat#localizeDigits(char[]):::Converts digit chars from digitsBuffer to current locale:::digitsCounter->if->for->cursor
DecimalFormat#fastDoubleFormat(double, boolean):::This is the main entry point for the fast-path format algorithm:::container->integralPartAsInt->exactFractionalPart->scaledFractional->fractionalPartAsInt->roundItUp->if->if->exactRoundUp->else->if->if->else->collectFractionalDigits->collectIntegralDigits->if->localizeDigits->if->if->addAffixes->else->if->addAffixes
DecimalFormat#fastFormat(double):::A fast-path shortcut of format(double) to be called by NumberFormat, or by format(double, ...) public methods:::isDataSet->if->checkAndSetFastPathStatus->if->return->if->Double->isFinite->return->negative->if->else->if->Math->copySign->if->return->else->if->resetFastPathData->fastDoubleFormat->return->new->String
DecimalFormat#subformat(StringBuffer, FieldDelegate, boolean, boolean, int, int, int, int):::Complete the formatting of a finite number:::zero->symbols->getZeroDigit->zeroDelta->grouping->symbols->getGroupingSeparator->decimal->symbols->getMonetaryDecimalSeparator->symbols->getDecimalSeparator->if->digitList->isZero->if->getNegativePrefixFieldPositions->append->else->getPositivePrefixFieldPositions->append->if->iFieldStart->result->length->iFieldEnd->fFieldStart->exponent->repeat->minimumIntegerDigits->if->if->else->else->minimumDigits->if->integerDigits->digitList->isZero->if->totalDigits->if->addedDecimalSeparator->for->i->if->result->length->result->append->result->length->if->result->length->delegate->formatted->if->delegate->formatted->if->result->length->delegate->result->length->formatted->fieldStart->result->length->result->symbols->getExponentSeparator->append->delegate->result->length->formatted->if->digitList->isZero->negativeExponent->if->result->length->result->symbols->getMinusSign->append->delegate->result->length->formatted->digitList->set->eFieldStart->result->length->for->i->for->i->delegate->result->length->formatted->else->iFieldStart->result->length->count->digitIndex->if->if->sizeBeforeIntegerPart->result->length->for->i->fractionPresent->if->result->length->result->append->delegate->result->length->formatted->sStart->result->length->if->result->append->if->result->length->delegate->result->length->formatted->fFieldStart->result->length->for->i->delegate->result->length->formatted->if->getNegativeSuffixFieldPositions->append->else->getPositiveSuffixFieldPositions->append->return
DecimalFormat#append(StringBuffer, String, FieldDelegate, FieldPosition[], Format.Field):::Appends the String string to result:::start->result->length->if->string->length->result->append->for->counter->max
DecimalFormat#parse(String, ParsePosition):::Parses text from a string to produce a Number:::if->text->symbols->getNaN->symbols->getNaN->length->regionMatches->symbols->getNaN->length->return->Double->valueOf->status->new->booleanArr->if->subparse->return->if->if->return->Double->valueOf->else->return->Double->valueOf->if->if->digitList->isZero->return->Double->valueOf->else->if->return->Double->valueOf->else->return->Double->valueOf->if->isParseBigDecimal->bigDecimalResult->digitList->getBigDecimal->if->try->bigDecimalResult->getBigDecimalMultiplier->divide->catch->bigDecimalResult->getBigDecimalMultiplier->divide->finally->if->bigDecimalResult->negate->return->else->gotDouble->gotLongMinimum->doubleResult->longResult->if->digitList->isParseIntegerOnly->fitsIntoLong->digitList->getLong->if->else->digitList->getDouble->if->if->else->if->else->if->if->isParseIntegerOnly->return
DecimalFormat#getBigIntegerMultiplier():::Return a BigInteger multiplier.:::if->BigInteger->valueOf->return
DecimalFormat#getBigDecimalMultiplier():::Return a BigDecimal multiplier.:::if->new->BigDecimal->return
DecimalFormat#subparse(String, ParsePosition, String, String, DigitList, boolean, boolean[]):::Parse the given text into a number:::position->oldStart->backup->gotPositive->gotNegative->text->positivePrefix->length->regionMatches->text->negativePrefix->length->regionMatches->if->if->positivePrefix->length->negativePrefix->length->else->if->positivePrefix->length->negativePrefix->length->if->positivePrefix->length->else->if->negativePrefix->length->else->return->if->text->symbols->getInfinity->symbols->getInfinity->length->regionMatches->symbols->getInfinity->length->else->zero->symbols->getZeroDigit->decimal->symbols->getMonetaryDecimalSeparator->symbols->getDecimalSeparator->grouping->symbols->getGroupingSeparator->exponentString->symbols->getExponentSeparator->sawDecimal->sawExponent->sawDigit->exponent->digitCount->for->text->length->if->if->if->return->if->if->text->positiveSuffix->length->regionMatches->if->text->negativeSuffix->length->regionMatches->if->if->positiveSuffix->length->negativeSuffix->length->else->if->positiveSuffix->length->negativeSuffix->length->if->return->positiveSuffix->length->negativeSuffix->length->else->if->return->return
DecimalFormat#getDecimalFormatSymbols():::Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.:::try->return->symbols->clone->catch->return->finally
DecimalFormat#setDecimalFormatSymbols(DecimalFormatSymbols):::Sets the decimal format symbols, which is generally not changed by the programmer or user.:::try->newSymbols->clone->expandAffixes->catch->finally
DecimalFormat#getPositivePrefix():::Get the positive prefix:::return
DecimalFormat#setPositivePrefix(String):::Set the positive prefix:::
DecimalFormat#getPositivePrefixFieldPositions():::Returns the FieldPositions of the fields in the prefix used for positive numbers:::if->if->expandAffix->else->return
DecimalFormat#getNegativePrefix():::Get the negative prefix:::return
DecimalFormat#setNegativePrefix(String):::Set the negative prefix:::
DecimalFormat#getNegativePrefixFieldPositions():::Returns the FieldPositions of the fields in the prefix used for negative numbers:::if->if->expandAffix->else->return
DecimalFormat#getPositiveSuffix():::Get the positive suffix:::return
DecimalFormat#setPositiveSuffix(String):::Set the positive suffix:::
DecimalFormat#getPositiveSuffixFieldPositions():::Returns the FieldPositions of the fields in the suffix used for positive numbers:::if->if->expandAffix->else->return
DecimalFormat#getNegativeSuffix():::Get the negative suffix:::return
DecimalFormat#setNegativeSuffix(String):::Set the negative suffix:::
DecimalFormat#getNegativeSuffixFieldPositions():::Returns the FieldPositions of the fields in the suffix used for negative numbers:::if->if->expandAffix->else->return
DecimalFormat#getMultiplier():::Gets the multiplier for use in percent, per mille, and similar formats.:::return
DecimalFormat#setMultiplier(int):::Sets the multiplier for use in percent, per mille, and similar formats:::
DecimalFormat#setGroupingUsed(boolean)::: decimal format set grouping used:::super->setGroupingUsed
DecimalFormat#getGroupingSize():::Return the grouping size:::return
DecimalFormat#setGroupingSize(int):::Set the grouping size:::
DecimalFormat#isDecimalSeparatorAlwaysShown():::Allows you to get the behavior of the decimal separator with integers:::return
DecimalFormat#setDecimalSeparatorAlwaysShown(boolean):::Allows you to set the behavior of the decimal separator with integers:::
DecimalFormat#isParseBigDecimal():::Returns whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal:::return
DecimalFormat#setParseBigDecimal(boolean):::Sets whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.:::
DecimalFormat#clone():::Standard override; no change in semantics.:::other->super->clone->symbols->clone->digitList->clone->return
DecimalFormat#equals(Object):::Overrides equals:::if->return->if->super->equals->return->other->return->positivePrefix->equals->posPrefixPattern->equals->positiveSuffix->equals->posSuffixPattern->equals->negativePrefix->equals->negPrefixPattern->equals->negativeSuffix->equals->negSuffixPattern->equals->symbols->equals
DecimalFormat#hashCode():::Overrides hashCode:::return->super->hashCode->positivePrefix->hashCode
DecimalFormat#toPattern():::Synthesizes a pattern string that represents the current state of this Format object.:::return->toPattern
DecimalFormat#toLocalizedPattern():::Synthesizes a localized pattern string that represents the current state of this Format object.:::return->toPattern
DecimalFormat#expandAffixes():::Expand the affix pattern strings into the expanded affix strings:::buffer->new->StringBuffer->if->expandAffix->if->expandAffix->if->expandAffix->if->expandAffix
DecimalFormat#expandAffix(String, StringBuffer):::Expand an affix pattern into an affix string:::buffer->setLength->for->i->pattern->length->return->buffer->toString
DecimalFormat#expandAffix(String):::Expand an affix pattern into an array of FieldPositions describing how the pattern would be expanded:::positions->stringIndex->for->i->pattern->length->if->return->positions->toArray->return
DecimalFormat#appendAffix(StringBuffer, String, String, boolean):::Appends an affix pattern to the given StringBuffer, quoting special characters as needed:::if->appendAffix->else->i->for->pos->affixPattern->length
DecimalFormat#appendAffix(StringBuffer, String, boolean):::Append an affix to the given StringBuffer, using quotes if there are special characters:::needQuote->if->affix->symbols->getZeroDigit->indexOf->affix->symbols->getGroupingSeparator->indexOf->affix->symbols->getDecimalSeparator->indexOf->affix->symbols->getPercent->indexOf->affix->symbols->getPerMill->indexOf->affix->symbols->getDigit->indexOf->affix->symbols->getPatternSeparator->indexOf->affix->symbols->getMinusSign->indexOf->affix->indexOf->else->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->affix->indexOf->if->buffer->append->if->affix->indexOf->buffer->append->else->for->j->affix->length->if->buffer->append
DecimalFormat#toPattern(boolean):::Does the real work of generating a pattern.:::result->new->StringBuffer->for->j->return->result->toString
DecimalFormat#applyPattern(String):::Apply the given pattern to this Format object:::applyPattern
DecimalFormat#applyLocalizedPattern(String):::Apply the given pattern to this Format object:::applyPattern
DecimalFormat#applyPattern(String, boolean):::Does the real work of applying a pattern.:::zeroDigit->groupingSeparator->decimalSeparator->percent->perMill->digit->separator->exponent->minus->if->symbols->getZeroDigit->symbols->getGroupingSeparator->symbols->getDecimalSeparator->symbols->getPercent->symbols->getPerMill->symbols->getDigit->symbols->getPatternSeparator->symbols->getExponentSeparator->symbols->getMinusSign->gotNegative->start->for->j->pattern->length->if->pattern->length->setMinimumIntegerDigits->setMaximumIntegerDigits->setMinimumFractionDigits->setMaximumFractionDigits->if->negPrefixPattern->equals->negSuffixPattern->equals->expandAffixes
DecimalFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number:::Math->Math->max->min->super->setMaximumIntegerDigits->if->super->setMinimumIntegerDigits
DecimalFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number:::Math->Math->max->min->super->setMinimumIntegerDigits->if->super->setMaximumIntegerDigits
DecimalFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number:::Math->Math->max->min->super->setMaximumFractionDigits->if->super->setMinimumFractionDigits
DecimalFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number:::Math->Math->max->min->super->setMinimumFractionDigits->if->super->setMaximumFractionDigits
DecimalFormat#getMaximumIntegerDigits():::Gets the maximum number of digits allowed in the integer portion of a number:::return
DecimalFormat#getMinimumIntegerDigits():::Gets the minimum number of digits allowed in the integer portion of a number:::return
DecimalFormat#getMaximumFractionDigits():::Gets the maximum number of digits allowed in the fraction portion of a number:::return
DecimalFormat#getMinimumFractionDigits():::Gets the minimum number of digits allowed in the fraction portion of a number:::return
DecimalFormat#getCurrency():::Gets the currency used by this decimal format when formatting currency values:::return->symbols->getCurrency
DecimalFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values:::if->symbols->getCurrency->symbols->setCurrency->if->expandAffixes
DecimalFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this DecimalFormat.:::return
DecimalFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this DecimalFormat.:::if->throw->new->NullPointerException->digitList->setRoundingMode
DecimalFormat#readObject(ObjectInputStream):::Reads the default serializable fields from the stream and performs validations and adjustments for older serialized versions:::stream->defaultReadObject->new->DigitList->if->setRoundingMode->else->getRoundingMode->setRoundingMode->if->super->getMaximumIntegerDigits->super->getMaximumFractionDigits->throw->new->InvalidObjectException->if->super->getMaximumIntegerDigits->setMaximumIntegerDigits->super->getMinimumIntegerDigits->setMinimumIntegerDigits->super->getMaximumFractionDigits->setMaximumFractionDigits->super->getMinimumFractionDigits->setMinimumFractionDigits->if
DecimalFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
DecimalFormatSymbols#getInstance():::Gets the DecimalFormatSymbols instance for the default locale:::return->Locale->getDefault->getInstance
DecimalFormatSymbols#getInstance(Locale):::Gets the DecimalFormatSymbols instance for the specified locale:::adapter->LocaleProviderAdapter->getAdapter->provider->adapter->getDecimalFormatSymbolsProvider->dfsyms->provider->getInstance->if->LocaleProviderAdapter->forJRE->getDecimalFormatSymbolsProvider->provider->getInstance->return
DecimalFormatSymbols#getZeroDigit():::Gets the character used for zero:::return
DecimalFormatSymbols#setZeroDigit(char):::Sets the character used for zero:::
DecimalFormatSymbols#getGroupingSeparator():::Gets the character used for thousands separator:::return
DecimalFormatSymbols#setGroupingSeparator(char):::Sets the character used for thousands separator:::
DecimalFormatSymbols#getDecimalSeparator():::Gets the character used for decimal sign:::return
DecimalFormatSymbols#setDecimalSeparator(char):::Sets the character used for decimal sign:::
DecimalFormatSymbols#getPerMill():::Gets the character used for per mille sign:::return
DecimalFormatSymbols#setPerMill(char):::Sets the character used for per mille sign:::
DecimalFormatSymbols#getPercent():::Gets the character used for percent sign:::return
DecimalFormatSymbols#setPercent(char):::Sets the character used for percent sign:::
DecimalFormatSymbols#getDigit():::Gets the character used for a digit in a pattern.:::return
DecimalFormatSymbols#setDigit(char):::Sets the character used for a digit in a pattern.:::
DecimalFormatSymbols#getPatternSeparator():::Gets the character used to separate positive and negative subpatterns in a pattern.:::return
DecimalFormatSymbols#setPatternSeparator(char):::Sets the character used to separate positive and negative subpatterns in a pattern.:::
DecimalFormatSymbols#getInfinity():::Gets the string used to represent infinity:::return
DecimalFormatSymbols#setInfinity(String):::Sets the string used to represent infinity:::
DecimalFormatSymbols#getNaN():::Gets the string used to represent "not a number":::return
DecimalFormatSymbols#setNaN(String):::Sets the string used to represent "not a number":::
DecimalFormatSymbols#getMinusSign():::Gets the character used to represent minus sign:::return
DecimalFormatSymbols#setMinusSign(char):::Sets the character used to represent minus sign:::
DecimalFormatSymbols#getCurrencySymbol():::Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.:::initializeCurrency->return
DecimalFormatSymbols#setCurrencySymbol(String):::Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.:::initializeCurrency
DecimalFormatSymbols#getInternationalCurrencySymbol():::Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.:::initializeCurrency->return
DecimalFormatSymbols#setInternationalCurrencySymbol(String):::Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols:::initializeCurrency->if->try->Currency->getInstance->currency->getSymbol->catch->finally
DecimalFormatSymbols#getCurrency():::Gets the currency of these DecimalFormatSymbols:::initializeCurrency->return
DecimalFormatSymbols#setCurrency(Currency):::Sets the currency of these DecimalFormatSymbols:::if->throw->new->NullPointerException->initializeCurrency->currency->getCurrencyCode->currency->getSymbol
DecimalFormatSymbols#getMonetaryDecimalSeparator():::Returns the monetary decimal separator.:::return
DecimalFormatSymbols#setMonetaryDecimalSeparator(char):::Sets the monetary decimal separator.:::
DecimalFormatSymbols#getExponentialSymbol():::Returns the character used to separate the mantissa from the exponent.:::return
DecimalFormatSymbols#getExponentSeparator():::Returns the string used to separate the mantissa from the exponent:::return
DecimalFormatSymbols#setExponentialSymbol(char):::Sets the character used to separate the mantissa from the exponent.:::
DecimalFormatSymbols#setExponentSeparator(String):::Sets the string used to separate the mantissa from the exponent:::if->throw->new->NullPointerException
DecimalFormatSymbols#clone():::Standard override.:::try->return->super->clone->catch->throw->new->InternalError->finally
DecimalFormatSymbols#equals(Object):::Override equals.:::if->return->if->return->if->getClass->obj->getClass->return->other->return->infinity->equals->NaN->equals->getCurrencySymbol->other->getCurrencySymbol->equals->intlCurrencySymbol->equals->exponentialSeparator->equals->locale->equals
DecimalFormatSymbols#hashCode():::Override hashCode.:::result->return
DecimalFormatSymbols#initialize(Locale):::Initializes the symbols from the FormatData resource bundle.:::override->locale->getUnicodeLocaleType->CalendarDataUtility->findRegionOverride->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->data->adapter->getLocaleResources->getDecimalFormatSymbolsData->numberElements->charAt->charAt->charAt->charAt->charAt->charAt->charAt->charAt->charAt
DecimalFormatSymbols#initializeCurrency(Locale):::Lazy initialization for currency related fields:::if->return->if->locale->getCountry->length->try->Currency->getInstance->catch->finally->if->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->data->adapter->getLocaleResources->getDecimalFormatSymbolsData->currency->getCurrencyCode->if->else->currency->getSymbol->else->try->Currency->getInstance->catch->finally
DecimalFormatSymbols#readObject(ObjectInputStream):::Reads the default serializable fields, provides default values for objects in older serial versions, and initializes non-serializable fields:::stream->defaultReadObject->if->if->if->Character->toString->if->try->Currency->getInstance->catch->finally
DigitList#isZero():::Return true if the represented number is zero.:::for->i->return
DigitList#setRoundingMode(RoundingMode):::Set the rounding mode:::
DigitList#clear():::Clears out the digits:::
DigitList#append(char):::Appends a digit to the list, extending the list when necessary.:::if->data->new->charArr->System->arraycopy
DigitList#getDouble():::Utility routine to get the value of the digit list If (count == 0) this throws a NumberFormatException, which mimics Long.parseLong().:::if->return->temp->getStringBuffer->temp->append->temp->append->temp->append->temp->append->return->Double->temp->toString->parseDouble
DigitList#getLong():::Utility routine to get the value of the digit list:::if->return->if->isLongMIN_VALUE->return->temp->getStringBuffer->temp->append->for->i->return->Long->temp->toString->parseLong
DigitList#getBigDecimal()::: digit list get big decimal:::if->if->return->else->return->new->BigDecimal->if->return->new->BigDecimal->else->return->new->BigDecimal->scaleByPowerOfTen
DigitList#fitsIntoLong(boolean, boolean):::Return true if the number represented by this object can fit into a long.:::while->if->return->if->return->if->return->for->i->if->return->return
DigitList#set(boolean, double, int):::Set the digit list to a representation of the given double value:::set
DigitList#set(boolean, double, int, boolean):::Set the digit list to a representation of the given double value:::fdConverter->FloatingDecimal->getBinaryToASCIIConverter->hasBeenRoundedUp->fdConverter->digitsRoundedUp->valueExactAsDecimal->fdConverter->decimalDigitsExact->digitsString->fdConverter->toJavaFormatString->set
DigitList#set(boolean, String, boolean, boolean, int, boolean):::Generate a representation of the form DDDDD, DDDDD.DDDDD, or DDDDDE+/-DDDDD.:::len->s->length->source->getDataChars->s->getChars->exponent->leadingZerosAfterDecimal->nonZeroDigitSeen->for->i->if->if->if->if->return->else->if->if->shouldRoundUp->else->return->while->round
DigitList#round(int, boolean, boolean):::Round the representation to the given number of digits.:::if->if->shouldRoundUp->for->while
DigitList#shouldRoundUp(int, boolean, boolean):::Return true if truncating the representation to the given number of digits will result in an increment to the last digit:::if->switch->for->i->break->break->for->i->break->for->i->break->if->return->else->if->if->return->else->if->return->else->return->break->if->return->else->if->if->if->return->if->return->else->return->else->for->i->break->for->i->break->return
DigitList#set(boolean, long):::Utility routine to set the value of the digit list from a long:::set
DigitList#set(boolean, long, int):::Set the digit list to a representation of the given long value.:::if->if->System->arraycopy->else->else->left->right->while->for->System->arraycopy->if->round
DigitList#set(boolean, BigDecimal, int, boolean):::Set the digit list to a representation of the given BigDecimal value:::s->source->toString->s->length->extendDigits->set
DigitList#set(boolean, BigInteger, int):::Set the digit list to a representation of the given BigInteger value.:::s->source->toString->len->s->length->extendDigits->s->getChars->right->for->if->round
DigitList#equals(Object):::equality test between two digit lists.:::if->return->if->return->other->if->return->for->i->return
DigitList#hashCode():::Generates the hash code for the digit list.:::hashcode->for->i->return
DigitList#clone():::Creates a copy of this object.:::try->other->super->clone->newDigits->new->charArr->System->arraycopy->return->catch->throw->new->InternalError->finally
DigitList#isLongMIN_VALUE():::Returns true if this DigitList represents Long.MIN_VALUE; false, otherwise:::if->return->for->i->return
DigitList#parseInt(char[], int, int)::: digit list parse int:::c->positive->if->else->if->value->while->if->else->break->return
DigitList#toString()::: digit list to string:::if->isZero->return->buf->getStringBuffer->buf->append->buf->append->buf->append->buf->append->return->buf->toString
DigitList#getStringBuffer()::: digit list get string buffer:::if->new->StringBuffer->else->tempBuffer->setLength->return
DigitList#extendDigits(int)::: digit list extend digits:::if->new->charArr
DigitList#getDataChars(int)::: digit list get data chars:::if->new->charArr->return
DontCareFieldPosition#getFieldDelegate()::: dont care field position get field delegate:::return
FieldPosition#getFieldAttribute():::Returns the field identifier as an attribute constant from one of the Field subclasses:::return
FieldPosition#getField():::Retrieves the field identifier.:::return
FieldPosition#getBeginIndex():::Retrieves the index of the first character in the requested field.:::return
FieldPosition#getEndIndex():::Retrieves the index of the character following the last character in the requested field.:::return
FieldPosition#setBeginIndex(int):::Sets the begin index:::
FieldPosition#setEndIndex(int):::Sets the end index:::
FieldPosition#getFieldDelegate():::Returns a Format.FieldDelegate instance that is associated with the FieldPosition:::return->new->Delegate
FieldPosition#equals(Object):::Overrides equals:::if->return->if->return->other->if->if->return->else->if->attribute->equals->return->return
FieldPosition#hashCode():::Returns a hash code for this FieldPosition.:::return
FieldPosition#toString():::Return a string representation of this FieldPosition.:::return->getClass->getName
FieldPosition#matchesField(Format.Field):::Return true if the receiver wants a Format.Field value and attribute is equal to it.:::if->return->equals->return
FieldPosition#matchesField(Format.Field, int):::Return true if the receiver wants a Format.Field value and attribute is equal to it, or true if the receiver represents an inteter constant and field equals it.:::if->return->equals->return
FieldPosition.Delegate#formatted(Format.Field, Object, int, int, StringBuffer)::: delegate formatted:::if->matchesField->setBeginIndex->setEndIndex
FieldPosition.Delegate#formatted(int, Format.Field, Object, int, int, StringBuffer)::: delegate formatted:::if->matchesField->setBeginIndex->setEndIndex
Format#format(Object):::Formats an object to produce a string:::return->new->StringBuffer->new->FieldPosition->format->toString
Format#format(Object, StringBuffer, FieldPosition):::Formats an object and appends the resulting text to a given string buffer:::
Format#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::return->format->createAttributedCharacterIterator
Format#parseObject(String, ParsePosition):::Parses text from a string to produce an object:::
Format#parseObject(String):::Parses text from the beginning of the given string to produce an object:::pos->new->ParsePosition->result->parseObject->if->throw->new->ParseException->return
Format#clone():::Creates and returns a copy of this object.:::try->return->super->clone->catch->throw->new->InternalError->finally
Format#createAttributedCharacterIterator(String):::Creates an AttributedCharacterIterator for the String s.:::as->new->AttributedString->return->as->getIterator
Format#createAttributedCharacterIterator(AttributedCharacterIterator[]):::Creates an AttributedCharacterIterator containing the concatenated contents of the passed in AttributedCharacterIterators.:::as->new->AttributedString->return->as->getIterator
Format#createAttributedCharacterIterator(String, AttributedCharacterIterator.Attribute, Object):::Returns an AttributedCharacterIterator with the String string and additional key/value pair key, value.:::as->new->AttributedString->as->addAttribute->return->as->getIterator
Format#createAttributedCharacterIterator(AttributedCharacterIterator, AttributedCharacterIterator.Attribute, Object):::Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value.:::as->new->AttributedString->as->addAttribute->return->as->getIterator
Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted:::
Format.FieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted.:::
MergeCollation#getPattern():::recovers current pattern:::return->getPattern
MergeCollation#getPattern(boolean):::recovers current pattern.:::result->new->StringBuffer->tmp->extList->i->for->patterns->size->if->last->findLastWithNoExtension->for->j->extList->size->return->result->toString
MergeCollation#findLastWithNoExtension(int)::: merge collation find last with no extension:::for->return
MergeCollation#emitPattern():::emits the pattern for collation builder.:::return->emitPattern
MergeCollation#emitPattern(boolean):::emits the pattern for collation builder.:::result->new->StringBuffer->for->i->patterns->size->return->result->toString
MergeCollation#setPattern(String):::sets the pattern.:::patterns->clear->addPattern
MergeCollation#addPattern(String):::adds a pattern to the current one.:::if->return->parser->new->PatternEntry.Parser->entry->parser->next->while->fixEntry->parser->next
MergeCollation#getCount():::gets count of separate entries:::return->patterns->size
MergeCollation#getItemAt(int):::gets count of separate entries:::return->patterns->get
MergeCollation#fixEntry(PatternEntry)::: merge collation fix entry:::if->equals->equals->if->throw->new->ParseException->else->return->changeLastEntry->if->oldIndex->if->length->c->charAt->statusIndex->bitClump->setBit->if->patterns->lastIndexOf->else->else->patterns->lastIndexOf->if->patterns->remove->excess->setLength->lastIndex->findLastEntry->if->excess->length->if->patterns->size->if->patterns->size->patterns->add->else->patterns->add->if
MergeCollation#findLastEntry(PatternEntry, StringBuffer)::: merge collation find last entry:::if->return->if->oldIndex->if->length->index->charAt->if->charAt->patterns->lastIndexOf->else->patterns->lastIndexOf->if->throw->new->ParseException->return->else->i->for->patterns->size->if->throw->new->ParseException->return
MessageFormat#setLocale(Locale):::Sets the locale to be used when creating or comparing subformats:::
MessageFormat#getLocale():::Gets the locale that's used when creating or comparing subformats.:::return
MessageFormat#applyPattern(String):::Sets the pattern used by this message format:::segments->new->StringBuilderArr->new->StringBuilder->part->formatNumber->inQuote->braceStack->for->i->pattern->length->if->throw->new->IllegalArgumentException->toString
MessageFormat#toPattern():::Returns a pattern representing the current state of the message format:::lastOffset->result->new->StringBuilder->for->i->pattern->length->copyAndFixQuotes->return->result->toString
MessageFormat#setFormatsByArgumentIndex(Format[]):::Sets the formats to use for the values passed into format methods or returned from parse methods:::for->i
MessageFormat#setFormats(Format[]):::Sets the formats to use for the format elements in the previously set pattern string:::runsToCopy->if->for->i
MessageFormat#setFormatByArgumentIndex(int, Format):::Sets the format to use for the format elements within the previously set pattern string that use the given argument index:::for->j
MessageFormat#setFormat(int, Format):::Sets the format to use for the format element with the given format element index within the previously set pattern string:::if->throw->new->ArrayIndexOutOfBoundsException
MessageFormat#getFormatsByArgumentIndex():::Gets the formats used for the values passed into format methods or returned from parse methods:::maximumArgumentNumber->for->i->resultArray->new->FormatArr->for->i->return
MessageFormat#getFormats():::Gets the formats used for the format elements in the previously set pattern string:::resultArray->new->FormatArr->System->arraycopy->return
MessageFormat#format(Object[], StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer:::return->subformat
MessageFormat#format(String, Object...):::Creates a MessageFormat with the given pattern and uses it to format the given arguments:::temp->new->MessageFormat->return->temp->format
MessageFormat#format(Object, StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer:::return->subformat
MessageFormat#formatToCharacterIterator(Object):::Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator:::result->new->StringBuffer->iterators->new->ArrayList<>->if->throw->new->NullPointerException->subformat->if->iterators->size->return->createAttributedCharacterIterator->return->iterators->iterators->size->new->AttributedCharacterIteratorArr->toArray->createAttributedCharacterIterator
MessageFormat#parse(String, ParsePosition):::Parses the string:::if->empty->return->maximumArgumentNumber->for->i->resultArray->new->ObjectArr->patternOffset->sourceOffset->tempStatus->new->ParsePosition->for->i->len->pattern->length->if->pattern->regionMatches->else->return->return
MessageFormat#parse(String):::Parses text from the beginning of the given string to produce an object array:::pos->new->ParsePosition->result->parse->if->throw->new->ParseException->return
MessageFormat#parseObject(String, ParsePosition):::Parses text from a string to produce an object array:::return->parse
MessageFormat#clone():::Creates and returns a copy of this object.:::other->super->clone->formats->clone->for->i->offsets->clone->argumentNumbers->clone->return
MessageFormat#equals(Object):::Equality comparison between two message format objects:::if->return->if->getClass->obj->getClass->return->other->return->pattern->equals->locale->equals->Arrays->equals->Arrays->equals->Arrays->equals
MessageFormat#hashCode():::Generates a hash code for the message format object.:::return->pattern->hashCode
MessageFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::if->this->getClass->throw->new->InvalidObjectException->return
MessageFormat#subformat(Object[], StringBuffer, FieldPosition, List):::Internal routine used by format:::lastOffset->last->result->length->for->i->result->pattern->length->append->if->result->length->characterIterators->result->substring->createAttributedCharacterIterator->add->return
MessageFormat#append(StringBuffer, CharacterIterator):::Convenience method to append all the characters in iterator to the StringBuffer result.:::if->iterator->first->aChar->result->iterator->first->append->while->iterator->next->result->append
MessageFormat#makeFormat(int, int, StringBuilder[])::: message format make format:::segments->new->StringArr->for->i->argumentNumber->try->Integer->parseInt->catch->throw->new->IllegalArgumentException->finally->if->throw->new->IllegalArgumentException->if->newLength->newFormats->new->FormatArr->newOffsets->new->intArr->newArgumentNumbers->new->intArr->System->arraycopy->System->arraycopy->System->arraycopy->oldMaxOffset->length->newFormat->if->length->type->findKeyword->switch->break->switch->findKeyword->NumberFormat->getInstance->break->NumberFormat->getCurrencyInstance->break->NumberFormat->getPercentInstance->break->NumberFormat->getIntegerInstance->break->try->DecimalFormatSymbols->getInstance->new->DecimalFormat->catch->throw->finally->break->break->mod->findKeyword->if->if->DateFormat->getDateInstance->else->DateFormat->getTimeInstance->else->try->new->SimpleDateFormat->catch->throw->finally->break->try->new->ChoiceFormat->catch->throw->new->IllegalArgumentException->finally->break->throw->new->IllegalArgumentException
MessageFormat#findKeyword(String, String[])::: message format find keyword:::for->i->ls->s->trim->toLowerCase->if->for->i->return
MessageFormat#copyAndFixQuotes(String, int, int, StringBuilder)::: message format copy and fix quotes:::quoted->for->i->if->target->append
MessageFormat#readObject(ObjectInputStream):::After reading an object from the input stream, do a simple verification to maintain class invariants.:::in->defaultReadObject->isValid->if->lastOffset->pattern->length->for->i->if->throw->new->InvalidObjectException
Normalizer#normalize(CharSequence, Form):::Normalize a sequence of char values:::return->NormalizerBase->src->toString->normalize
Normalizer#isNormalized(CharSequence, Form):::Determines if the given sequence of char values is normalized.:::return->NormalizerBase->src->toString->isNormalized
NumberFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer:::if->bitLength->return->longValue->format->else->if->return->doubleValue->format->else->throw->new->IllegalArgumentException
NumberFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Number:::return->parse
NumberFormat#format(double):::Specialization of format.:::result->fastFormat->if->return->return->new->StringBuffer->format->toString
NumberFormat#fastFormat(double)::: number format fast format:::return
NumberFormat#format(long):::Specialization of format.:::return->new->StringBuffer->format->toString
NumberFormat#format(double, StringBuffer, FieldPosition):::Specialization of format.:::
NumberFormat#format(long, StringBuffer, FieldPosition):::Specialization of format.:::
NumberFormat#parse(String, ParsePosition):::Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double:::
NumberFormat#parse(String):::Parses text from the beginning of the given string to produce a number:::parsePosition->new->ParsePosition->result->parse->if->throw->new->ParseException->return
NumberFormat#isParseIntegerOnly():::Returns true if this format will parse numbers as integers only:::return
NumberFormat#setParseIntegerOnly(boolean):::Sets whether or not numbers should be parsed as integers only.:::
NumberFormat#getInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->getInstance
NumberFormat#getInstance(Locale):::Returns a general-purpose number format for the specified locale:::return->getInstance
NumberFormat#getNumberInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->getInstance
NumberFormat#getNumberInstance(Locale):::Returns a general-purpose number format for the specified locale.:::return->getInstance
NumberFormat#getIntegerInstance():::Returns an integer number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->getInstance
NumberFormat#getIntegerInstance(Locale):::Returns an integer number format for the specified locale:::return->getInstance
NumberFormat#getCurrencyInstance():::Returns a currency format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->getInstance
NumberFormat#getCurrencyInstance(Locale):::Returns a currency format for the specified locale.:::return->getInstance
NumberFormat#getPercentInstance():::Returns a percentage format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::return->Locale->getDefault->getInstance
NumberFormat#getPercentInstance(Locale):::Returns a percentage format for the specified locale.:::return->getInstance
NumberFormat#getScientificInstance()::: number format get scientific instance:::return->Locale->getDefault->getInstance
NumberFormat#getScientificInstance(Locale)::: number format get scientific instance:::return->getInstance
NumberFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::pool->LocaleServiceProviderPool->getPool->return->pool->getAvailableLocales
NumberFormat#hashCode():::Overrides hashCode.:::return
NumberFormat#equals(Object):::Overrides equals.:::if->return->if->return->if->getClass->obj->getClass->return->other->return
NumberFormat#clone():::Overrides Cloneable.:::other->super->clone->return
NumberFormat#isGroupingUsed():::Returns true if grouping is used in this format:::return
NumberFormat#setGroupingUsed(boolean):::Set whether or not grouping will be used in this format.:::
NumberFormat#getMaximumIntegerDigits():::Returns the maximum number of digits allowed in the integer portion of a number.:::return
NumberFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number:::Math->max->if
NumberFormat#getMinimumIntegerDigits():::Returns the minimum number of digits allowed in the integer portion of a number.:::return
NumberFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number:::Math->max->if
NumberFormat#getMaximumFractionDigits():::Returns the maximum number of digits allowed in the fraction portion of a number.:::return
NumberFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number:::Math->max->if
NumberFormat#getMinimumFractionDigits():::Returns the minimum number of digits allowed in the fraction portion of a number.:::return
NumberFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number:::Math->max->if
NumberFormat#getCurrency():::Gets the currency used by this number format when formatting currency values:::throw->new->UnsupportedOperationException
NumberFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values:::throw->new->UnsupportedOperationException
NumberFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this NumberFormat:::throw->new->UnsupportedOperationException
NumberFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this NumberFormat:::throw->new->UnsupportedOperationException
NumberFormat#getInstance(Locale, int)::: number format get instance:::adapter->LocaleProviderAdapter->getAdapter->numberFormat->getInstance->if->LocaleProviderAdapter->forJRE->getInstance->return
NumberFormat#getInstance(LocaleProviderAdapter, Locale, int)::: number format get instance:::provider->adapter->getNumberFormatProvider->numberFormat->switch->provider->getNumberInstance->break->provider->getPercentInstance->break->provider->getCurrencyInstance->break->provider->getIntegerInstance->break->return
NumberFormat#readObject(ObjectInputStream):::First, read in the default serializable data:::stream->defaultReadObject->if->if->throw->new->InvalidObjectException
NumberFormat#writeObject(ObjectOutputStream):::Write out the default serializable data, after first setting the byte fields such as maxIntegerDigits to be equal to the int fields such as maximumIntegerDigits (or to Byte.MAX_VALUE, whichever is smaller), for compatibility with the JDK 1.1 version of the stream format.:::stream->defaultWriteObject
NumberFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::if->this->getClass->throw->new->InvalidObjectException->instance->instanceMap->getName->get->if->return->else->throw->new->InvalidObjectException
ParseException#getErrorOffset():::Returns the position where the error was found.:::return
ParsePosition#getIndex():::Retrieve the current parse position:::return
ParsePosition#setIndex(int):::Set the current parse position.:::
ParsePosition#setErrorIndex(int):::Set the index at which a parse error occurred:::
ParsePosition#getErrorIndex():::Retrieve the index at which an error occurred, or -1 if the error index has not been set.:::return
ParsePosition#equals(Object):::Overrides equals:::if->return->if->return->other->return
ParsePosition#hashCode():::Returns a hash code for this ParsePosition.:::return
ParsePosition#toString():::Return a string representation of this ParsePosition.:::return->getClass->getName
PatternEntry#appendQuotedExtension(StringBuffer):::Gets the current extension, quoted:::appendQuoted
PatternEntry#appendQuotedChars(StringBuffer):::Gets the current chars, quoted:::appendQuoted
PatternEntry#equals(Object):::WARNING this is used for searching in a Vector:::if->return->other->result->chars->equals->return
PatternEntry#hashCode()::: pattern entry hash code:::return->chars->hashCode
PatternEntry#toString():::For debugging.:::result->new->StringBuffer->addToBuffer->return->result->toString
PatternEntry#getStrength():::Gets the strength of the entry.:::return
PatternEntry#getExtension():::Gets the expanding characters of the entry.:::return
PatternEntry#getChars():::Gets the core characters of the entry.:::return
PatternEntry#addToBuffer(StringBuffer, boolean, boolean, PatternEntry)::: pattern entry add to buffer:::if->toAddTo->length->if->toAddTo->append->else->toAddTo->append->if->toAddTo->append->if->toAddTo->append->lastEntry->appendQuotedChars->appendQuotedExtension->if->toAddTo->append->switch->toAddTo->append->break->toAddTo->append->break->toAddTo->append->break->toAddTo->append->break->toAddTo->append->break->toAddTo->append->break->if->toAddTo->append->appendQuoted->if->extension->length->toAddTo->append->appendQuoted
PatternEntry#appendQuoted(String, StringBuffer)::: pattern entry append quoted:::inQuote->ch->chars->charAt->if->Character->isSpaceChar->toAddTo->append->else->if->PatternEntry->isSpecialChar->toAddTo->append->else->switch->toAddTo->append->break->toAddTo->append->break->if->toAddTo->append->break->toAddTo->append->if->toAddTo->append
PatternEntry.Parser#next()::: parser next:::newStrength->newChars->setLength->newExtension->setLength->inChars->inQuote->while->pattern->length->ch->pattern->charAt->if->if->else->if->newChars->length->newChars->append->else->if->newChars->append->else->newExtension->append->else->switch->if->break->break->if->break->break->if->break->break->if->break->break->if->break->break->break->break->pattern->charAt->if->newChars->length->newChars->append->else->if->newChars->append->else->newExtension->append->break->if->throw->pattern->pattern->length->pattern->length->substring->new->ParseException->if->PatternEntry->isSpecialChar->throw->Integer->toString->new->ParseException->if->newChars->append->else->newExtension->append->break->if->return->if->newChars->length->throw->pattern->pattern->length->pattern->length->substring->new->ParseException->return->new->PatternEntry
PatternEntry#isSpecialChar(char)::: pattern entry is special char:::return
RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short):::This function is used by RBTableBuilder to fill in all the members of this object:::
RBCollationTables#getRules():::Gets the table-based rules for the collation object.:::return
RBCollationTables#isFrenchSec()::: collation tables is french sec:::return
RBCollationTables#isSEAsianSwapping()::: collation tables is asian swapping:::return
RBCollationTables#getContractValues(int)::: Get the entry of hash table of the contracting string in the collation  table.:::index->mapping->elementAt->return->getContractValuesImpl
RBCollationTables#getContractValuesImpl(int)::: collation tables get contract values impl:::if->return->contractTable->elementAt->else->return
RBCollationTables#usedInContractSeq(int):::Returns true if this character appears anywhere in a contracting character sequence:::return->contractFlags->get
RBCollationTables#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.:::result->if->for->i->expandTable->size->return
RBCollationTables#getExpandValueList(int):::Get the entry of hash table of the expanding string in the collation table.:::return->expandTable->elementAt
RBCollationTables#getUnicodeOrder(int):::Get the comarison order of a character from the collation table.:::return->mapping->elementAt
RBCollationTables#getMaxSecOrder()::: collation tables get max sec order:::return
RBCollationTables#getMaxTerOrder()::: collation tables get max ter order:::return
RBCollationTables#reverse(StringBuffer, int, int)::: collation tables reverse:::i->swap->j->while->result->charAt->result->result->charAt->setCharAt->result->setCharAt
RBCollationTables#getEntry(Vector, String, boolean)::: collation tables get entry:::for->i->list->size->return
RBTableBuilder#build(String, int)::: table builder build:::isSource->i->expChars->groupChars->if->pattern->length->throw->new->ParseException->new->UCompactIntArray->NormalizerImpl->canonicalDecomposeWithSingleQuotation->new->MergeCollation->order->for->mPattern->getCount->addComposedChars->commit->mapping->compact->tables->fillInTables
RBTableBuilder#addComposedChars():::Add expanding entries for pre-composed unicode characters so that this collator can be used reasonably well with decomposition turned off.:::iter->new->ComposedCharIter->c->while->iter->next->if->getCharOrder->s->iter->decomposition->if->s->length->order->s->charAt->getCharOrder->if->addOrder->continue->else->if->s->length->ch0->s->charAt->if->Character->isHighSurrogate->order->s->codePointAt->getCharOrder->if->addOrder->continue->contractOrder->getContractOrder->if->addOrder->else->allThere->for->i->s->length->if->addExpandOrder
RBTableBuilder#commit():::Look up for unmapped values in the expanded character table:::if->for->i->expandTable->size
RBTableBuilder#increment(int, int)::: Increment of the last order based on the comparison level.:::switch->break->if->break->if->break->return
RBTableBuilder#addOrder(int, int)::: Adds a character and its designated order into the collation table.:::order->mapping->elementAt->if->length->if->Character->isSupplementaryCodePoint->Character->toChars->else->new->String->addContractOrder->else->mapping->setElementAt
RBTableBuilder#addContractOrder(String, int)::: table builder add contract order:::addContractOrder
RBTableBuilder#addContractOrder(String, int, boolean)::: Adds the contracting string into the collation table.:::if->new->Vector<>->ch->groupChars->codePointAt->entry->mapping->elementAt->entryTable->getContractValuesImpl->if->tableIndex->contractTable->size->new->Vector<>->contractTable->addElement->entryTable->groupChars->Character->charCount->substring->new->EntryPair->addElement->mapping->setElementAt->index->RBCollationTables->getEntry->if->pair->entryTable->elementAt->else->pair->entryTable->lastElement->if->groupChars->length->length->entryTable->new->EntryPair->addElement->else->entryTable->new->EntryPair->entryTable->size->insertElementAt->if->groupChars->length->addContractFlags->new->StringBuffer->reverse->toString->addContractOrder
RBTableBuilder#getContractOrder(String):::If the given string has been specified as a contracting string in this collation table, return its ordering:::result->if->ch->groupChars->codePointAt->entryTable->getContractValues->if->index->RBCollationTables->getEntry->if->pair->entryTable->elementAt->return
RBTableBuilder#getCharOrder(int)::: table builder get char order:::order->mapping->elementAt->if->groupList->getContractValuesImpl->pair->groupList->firstElement->return
RBTableBuilder#getContractValues(int)::: Get the entry of hash table of the contracting string in the collation  table.:::index->mapping->elementAt->return->getContractValuesImpl
RBTableBuilder#getContractValuesImpl(int)::: table builder get contract values impl:::if->return->contractTable->elementAt->else->return
RBTableBuilder#addExpandOrder(String, String, int)::: Adds the expanding string into the collation table.:::tableIndex->addExpansion->if->contractChars->length->ch->contractChars->charAt->if->Character->isHighSurrogate->contractChars->length->ch2->contractChars->charAt->if->Character->isLowSurrogate->Character->toCodePoint->addOrder->else->addContractOrder->else->contractChars->charAt->addOrder
RBTableBuilder#addExpandOrder(int, String, int)::: table builder add expand order:::tableIndex->addExpansion->addOrder
RBTableBuilder#addExpansion(int, String):::Create a new entry in the expansion table that contains the orderings for the given characers:::if->new->Vector<>->offset->valueList->expandChars->length->new->intArr->if->j->for->i->expandChars->length->if->tmpBuf->new->intArr->while->tableIndex->expandTable->size->expandTable->addElement->return
RBTableBuilder#addContractFlags(String)::: table builder add contract flags:::c0->c->len->chars->length->for->i
RuleBasedCollationKey#compareTo(CollationKey):::Compare this RuleBasedCollationKey to target:::result->key->compareTo->if->return->else->if->return->return
RuleBasedCollationKey#equals(Object):::Compare this RuleBasedCollationKey and the target for equality:::if->return->if->getClass->target->getClass->equals->return->other->return->key->equals
RuleBasedCollationKey#hashCode():::Creates a hash code for this RuleBasedCollationKey:::return->key->hashCode
RuleBasedCollationKey#toByteArray():::Converts the RuleBasedCollationKey to a sequence of bits:::src->key->toCharArray->dest->new->byteArr->j->for->i->return
RuleBasedCollator#getRules():::Gets the table-based rules for the collation object.:::return->tables->getRules
RuleBasedCollator#getCollationElementIterator(String):::Returns a CollationElementIterator for the given String.:::return->new->CollationElementIterator
RuleBasedCollator#getCollationElementIterator(CharacterIterator):::Returns a CollationElementIterator for the given CharacterIterator.:::return->new->CollationElementIterator
RuleBasedCollator#compare(String, String):::Compares the character data stored in two different strings based on the collation rules:::if->throw->new->NullPointerException->result->if->getCollationElementIterator->else->sourceCursor->setText->if->getCollationElementIterator->else->targetCursor->setText->sOrder->tOrder->initialCheckSecTer->getStrength->checkSecTer->checkTertiary->getStrength->gets->gett->while->if->sourceCursor->next->else->if->targetCursor->next->else->if->break->pSOrder->CollationElementIterator->primaryOrder->pTOrder->CollationElementIterator->primaryOrder->if->if->tables->isFrenchSec->if->continue->if->if->continue->if->continue->if->if->else->if->if->else->if->return->else->return->else->if->secSOrder->CollationElementIterator->secondaryOrder->secTOrder->CollationElementIterator->secondaryOrder->if->else->if->terSOrder->CollationElementIterator->tertiaryOrder->terTOrder->CollationElementIterator->tertiaryOrder->if->if->do->if->CollationElementIterator->primaryOrder->return->else->if->CollationElementIterator->secondaryOrder->if->while->sourceCursor->next->else->if->do->if->CollationElementIterator->primaryOrder->return->else->if->CollationElementIterator->secondaryOrder->if->while->targetCursor->next->if->getStrength->mode->getDecomposition->form->if->else->if->else->return->source->compareTo->sourceDecomposition->Normalizer->normalize->targetDecomposition->Normalizer->normalize->return->sourceDecomposition->compareTo->return
RuleBasedCollator#getCollationKey(String):::Transforms the string into a series of characters that can be compared with CollationKey.compareTo:::if->return->if->new->StringBuffer->new->StringBuffer->new->StringBuffer->else->primResult->setLength->secResult->setLength->terResult->setLength->order->compareSec->getStrength->compareTer->getStrength->secOrder->terOrder->preSecIgnore->if->getCollationElementIterator->else->sourceCursor->setText->while->sourceCursor->next->CollationElementIterator->secondaryOrder->CollationElementIterator->tertiaryOrder->if->CollationElementIterator->isIgnorable->primResult->CollationElementIterator->primaryOrder->append->if->if->tables->isFrenchSec->secResult->length->RBCollationTables->secResult->length->reverse->secResult->append->secResult->length->if->terResult->append->else->if->secResult->tables->getMaxSecOrder->append->if->terResult->tables->getMaxTerOrder->append->if->tables->isFrenchSec->if->secResult->length->RBCollationTables->secResult->length->reverse->RBCollationTables->secResult->length->reverse->primResult->append->secResult->append->secResult->terResult->toString->append->primResult->secResult->toString->append->if->getStrength->primResult->append->mode->getDecomposition->if->primResult->Normalizer->normalize->append->else->if->primResult->Normalizer->normalize->append->else->primResult->append->return->primResult->toString->new->RuleBasedCollationKey
RuleBasedCollator#clone():::Standard override; no change in semantics.:::if->getClass->return->new->RuleBasedCollator->else->result->super->clone->return
RuleBasedCollator#equals(Object):::Compares the equality of two collation objects.:::if->return->if->super->equals->return->other->return->getRules->other->getRules->equals
RuleBasedCollator#hashCode():::Generates the hash code for the table-based collation object:::return->getRules->hashCode
RuleBasedCollator#getTables():::Allows CollationElementIterator access to the tables object:::return
SimpleDateFormat#initialize(Locale)::: simple date format initialize:::compile->cachedNumberFormatData->get->if->NumberFormat->getIntegerInstance->numberFormat->setGroupingUsed->cachedNumberFormatData->putIfAbsent->numberFormat->clone->initializeDefaultCentury
SimpleDateFormat#initializeCalendar(Locale)::: simple date format initialize calendar:::if->Calendar->getInstance
SimpleDateFormat#compile(String):::Returns the compiled form of the given pattern:::length->pattern->length->inQuote->compiledCode->new->StringBuilder->tmpBuffer->count->tagcount->lastTag->prevTag->for->i->if->throw->new->IllegalArgumentException->if->encode->len->compiledCode->length->r->new->charArr->compiledCode->getChars->return
SimpleDateFormat#encode(int, int, StringBuilder):::Encodes the given tag and length and puts encoded char(s) into buffer.:::if->throw->new->IllegalArgumentException->if->buffer->append->else->buffer->append->buffer->append->buffer->append
SimpleDateFormat#initializeDefaultCentury()::: simple date format initialize default century:::calendar->System->currentTimeMillis->setTimeInMillis->calendar->add->calendar->getTime->parseAmbiguousDatesAsAfter
SimpleDateFormat#parseAmbiguousDatesAsAfter(Date)::: simple date format parse ambiguous dates as after:::calendar->setTime->calendar->get
SimpleDateFormat#set2DigitYearStart(Date):::Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.:::startDate->getTime->new->Date->parseAmbiguousDatesAsAfter
SimpleDateFormat#get2DigitYearStart():::Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.:::return->defaultCenturyStart->clone
SimpleDateFormat#format(Date, StringBuffer, FieldPosition):::Formats the given Date into a date/time string and appends the result to the given StringBuffer.:::return->pos->getFieldDelegate->format
SimpleDateFormat#format(Date, StringBuffer, FieldDelegate)::: simple date format format:::calendar->setTime->useDateFormatSymbols->useDateFormatSymbols->for->i->return
SimpleDateFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::sb->new->StringBuffer->delegate->new->CharacterIteratorFieldDelegate->if->format->else->if->longValue->new->Date->format->else->if->throw->new->NullPointerException->else->throw->new->IllegalArgumentException->return->delegate->sb->toString->getIterator
SimpleDateFormat#subFormat(int, int, FieldDelegate, StringBuffer, boolean):::Private member function that does the real date/time formatting.:::maxIntCount->current->beginOffset->buffer->length->field->value->if->if->calendar->isWeekDateSupported->calendar->getWeekYear->else->calendar->get->else->if->CalendarBuilder->calendar->get->toISODayOfWeek->else->calendar->get->style->if->calendar->getDisplayName->switch->if->eras->formatData->getEras->if->if->break->if->if->zeroPaddingNumber->else->zeroPaddingNumber->else->if->zeroPaddingNumber->break->if->months->if->formatData->getMonths->else->if->formatData->getShortMonths->else->if->else->if->calendar->getDisplayName->if->calendar->getDisplayName->if->zeroPaddingNumber->break->if->months->if->formatData->getMonths->else->if->formatData->getShortMonths->else->if->calendar->getDisplayName->if->zeroPaddingNumber->break->if->if->calendar->getMaximum->zeroPaddingNumber->else->zeroPaddingNumber->break->if->weekdays->if->formatData->getWeekdays->else->formatData->getShortWeekdays->break->if->ampm->formatData->getAmPmStrings->break->if->if->calendar->getLeastMaximum->zeroPaddingNumber->else->zeroPaddingNumber->break->if->if->zoneIndex->formatData->calendar->getTimeZone->getID->getZoneIndex->if->calendar->get->calendar->get->buffer->ZoneInfoFile->toCustomID->append->else->index->calendar->get->if->zoneStrings->formatData->getZoneStringsWrapper->buffer->append->else->tz->calendar->getTimeZone->daylight->calendar->get->tzstyle->buffer->tz->getDisplayName->append->break->calendar->get->calendar->get->width->if->buffer->append->else->num->CalendarUtils->sprintf0d->break->calendar->get->calendar->get->if->buffer->append->break->if->buffer->append->else->buffer->append->CalendarUtils->sprintf0d->if->break->if->buffer->append->CalendarUtils->sprintf0d->break->if->zeroPaddingNumber->break->if->buffer->append->fieldID->f->delegate->buffer->length->formatted
SimpleDateFormat#zeroPaddingNumber(int, int, int, StringBuffer):::Formats a number with the specified minimum and maximum number of digits.:::try->if->getDecimalFormatSymbols->getZeroDigit->if->if->if->if->buffer->append->buffer->append->else->buffer->append->buffer->append->return->else->if->if->buffer->append->buffer->append->buffer->append->buffer->append->return->if->zeroPaddingNumber->return->catch->finally->numberFormat->setMinimumIntegerDigits->numberFormat->setMaximumIntegerDigits->numberFormat->format
SimpleDateFormat#parse(String, ParsePosition):::Parses text from a string to produce a Date:::checkNegativeNumberExpression->start->oldStart->textLength->text->length->ambiguousYear->calb->new->CalendarBuilder->for->i->parsedDate->try->calb->establish->getTime->if->if->parsedDate->before->calb->addYear->establish->getTime->catch->return->finally->return
SimpleDateFormat#shouldObeyCount(int, int)::: simple date format should obey count:::switch->return->return->return
SimpleDateFormat#matchString(String, int, int, String[], CalendarBuilder):::Private code-size reduction function used by subParse.:::i->count->if->bestMatchLength->bestMatch->for->if->calb->set->return->return
SimpleDateFormat#matchString(String, int, int, Map, CalendarBuilder):::Performs the same thing as matchString(String, int, int, String[]):::if->if->foreach->data->keySet->if->text->name->length->regionMatches->calb->data->get->set->return->name->length->return->bestMatch->foreach->data->keySet->length->name->length->if->bestMatch->length->if->text->regionMatches->if->calb->data->get->set->return->bestMatch->length->return
SimpleDateFormat#matchZoneString(String, int, String[])::: simple date format match zone string:::for->i->return
SimpleDateFormat#matchDSTString(String, int, int, int, String[][])::: simple date format match string:::index->zoneName->if->text->zoneName->length->regionMatches->return->return
SimpleDateFormat#subParseZoneString(String, int, CalendarBuilder):::find time zone 'text' matched zoneStrings and set to internal calendar.:::useSameName->currentTimeZone->getTimeZone->zoneIndex->formatData->currentTimeZone->getID->getZoneIndex->tz->zoneStrings->formatData->getZoneStringsWrapper->zoneNames->nameIndex->if->if->matchZoneString->if->equalsIgnoreCase->TimeZone->getTimeZone->if->formatData->TimeZone->getDefault->getID->getZoneIndex->if->if->matchZoneString->if->equalsIgnoreCase->TimeZone->getTimeZone->if->len->for->i->if->if->tz->equals->setTimeZone->dstAmount->tz->getDSTSavings->if->calb->clear->set->return->length->return
SimpleDateFormat#subParseNumericZone(String, int, int, int, boolean, CalendarBuilder):::Parses numeric forms of time zone offset, such as "hh:mm", and sets calb to the parsed value.:::index->try->c->text->charAt->hours->if->isDigit->break->text->charAt->if->isDigit->else->if->break->if->break->minutes->if->text->charAt->if->if->break->text->charAt->if->isDigit->break->text->charAt->if->isDigit->break->if->break->calb->set->set->return->catch->finally->return
SimpleDateFormat#isDigit(char)::: simple date format is digit:::return
SimpleDateFormat#subParse(String, int, int, int, boolean, boolean[], ParsePosition, boolean, CalendarBuilder):::Private member function that converts the parsed date strings into timeFields:::number->value->pos->new->ParsePosition->if->calendar->isWeekDateSupported->field->for->actualStart->if->if->if->text->length->break->numberFormat->text->substring->parse->else->numberFormat->parse->if->if->break->else->number->intValue->if->text->length->text->charAt->text->length->text->charAt->useDateFormatSymbols->useDateFormatSymbols->index->switch->if->if->formatData->getEras->matchString->return->else->map->getDisplayNamesMap->if->matchString->return->break->if->style->map->calendar->getDisplayNames->if->if->matchString->return->calb->set->return->if->Character->text->charAt->isDigit->Character->text->charAt->isDigit->ambiguousTwoDigitYear->calb->set->return->if->calb->set->return->if->newStart->if->formatData->getMonths->matchString->return->if->formatData->getShortMonths->matchString->return->else->map->getDisplayNamesMap->if->matchString->return->break->if->calb->set->return->maps->getDisplayNamesMap->if->matchString->return->break->if->isLenient->if->break->if->calendar->getMaximum->calb->set->return->if->newStart->if->formatData->getWeekdays->matchString->return->if->formatData->getShortWeekdays->matchString->return->else->styles->foreach->map->calendar->getDisplayNames->if->matchString->return->break->if->if->formatData->getAmPmStrings->matchString->return->else->map->getDisplayNamesMap->if->matchString->return->break->if->isLenient->if->break->if->calendar->getLeastMaximum->calb->set->return->sign->try->c->text->charAt->if->else->if->if->if->text->length->GMT->length->text->GMT->length->regionMatches->GMT->length->if->text->length->text->charAt->if->else->if->if->calb->set->set->return->i->subParseNumericZone->if->return->else->i->subParseZoneString->if->return->else->i->subParseNumericZone->if->return->catch->finally->break->if->text->length->break->sign->c->text->charAt->if->calb->set->set->return->if->else->if->else->break->i->subParseNumericZone->if->return->break->if->if->text->length->break->numberFormat->text->substring->parse->else->numberFormat->parse->if->number->intValue->if->text->length->text->charAt->text->length->text->charAt->calb->set->return->break->return
SimpleDateFormat#useDateFormatSymbols():::Returns true if the DateFormatSymbols has been set explicitly or locale is null.:::return
SimpleDateFormat#translatePattern(String, String, String):::Translates a pattern, mapping each character in the from string to the corresponding character in the to string.:::result->new->StringBuilder->inQuote->for->i->pattern->length->if->throw->new->IllegalArgumentException->return->result->toString
SimpleDateFormat#toPattern():::Returns a pattern string describing this date format.:::return
SimpleDateFormat#toLocalizedPattern():::Returns a localized pattern string describing this date format.:::return->formatData->getLocalPatternChars->translatePattern
SimpleDateFormat#applyPattern(String):::Applies the given pattern string to this date format.:::applyPatternImpl
SimpleDateFormat#applyPatternImpl(String)::: simple date format apply pattern impl:::compile
SimpleDateFormat#applyLocalizedPattern(String):::Applies the given localized pattern string to this date format.:::p->formatData->getLocalPatternChars->translatePattern->compile
SimpleDateFormat#getDateFormatSymbols():::Gets a copy of the date and time format symbols of this date format.:::return->formatData->clone
SimpleDateFormat#setDateFormatSymbols(DateFormatSymbols):::Sets the date and time format symbols of this date format.:::newFormatSymbols->clone
SimpleDateFormat#clone():::Creates a copy of this SimpleDateFormat:::other->super->clone->formatData->clone->return
SimpleDateFormat#hashCode():::Returns the hash code value for this SimpleDateFormat object.:::return->pattern->hashCode
SimpleDateFormat#equals(Object):::Compares the given object with this SimpleDateFormat for equality.:::if->super->equals->return->that->return->pattern->equals->formatData->equals
SimpleDateFormat#getDisplayNamesMap(int, Locale)::: simple date format get display names map:::map->calendar->getDisplayNames->foreach->m->calendar->getDisplayNames->if->map->putAll->return
SimpleDateFormat#readObject(ObjectInputStream):::After reading an object from the input stream, the format pattern in the object is verified.:::stream->defaultReadObject->try->compile->catch->throw->new->InvalidObjectException->finally->if->initializeDefaultCentury->else->parseAmbiguousDatesAsAfter->tz->getTimeZone->if->id->tz->getID->zi->TimeZone->getTimeZone->if->zi->hasSameRules->zi->getID->equals->setTimeZone
SimpleDateFormat#checkNegativeNumberExpression():::Analyze the negative subpattern of DecimalFormat and set/update values as necessary.:::if->numberFormat->equals->numberPattern->toPattern->if->numberPattern->equals->separatorIndex->numberPattern->indexOf->if->minusIndex->numberPattern->indexOf->if->numberPattern->lastIndexOf->numberPattern->lastIndexOf->getDecimalFormatSymbols->getMinusSign
StringCharacterIterator#setText(String):::Reset this iterator to point to a new string:::if->throw->new->NullPointerException->text->length
StringCharacterIterator#first():::Implements CharacterIterator.first() for String.:::return->current
StringCharacterIterator#last():::Implements CharacterIterator.last() for String.:::if->else->return->current
StringCharacterIterator#setIndex(int):::Implements CharacterIterator.setIndex() for String.:::if->throw->new->IllegalArgumentException->return->current
StringCharacterIterator#current():::Implements CharacterIterator.current() for String.:::if->return->text->charAt->else->return
StringCharacterIterator#next():::Implements CharacterIterator.next() for String.:::if->return->text->charAt->else->return
StringCharacterIterator#previous():::Implements CharacterIterator.previous() for String.:::if->return->text->charAt->else->return
StringCharacterIterator#getBeginIndex():::Implements CharacterIterator.getBeginIndex() for String.:::return
StringCharacterIterator#getEndIndex():::Implements CharacterIterator.getEndIndex() for String.:::return
StringCharacterIterator#getIndex():::Implements CharacterIterator.getIndex() for String.:::return
StringCharacterIterator#equals(Object):::Compares the equality of two StringCharacterIterator objects.:::if->return->if->return->that->if->hashCode->that->hashCode->return->if->text->equals->return->if->return->return
StringCharacterIterator#hashCode():::Computes a hashcode for this iterator.:::return->text->hashCode
StringCharacterIterator#clone():::Creates a copy of this iterator.:::try->other->super->clone->return->catch->throw->new->InternalError->finally

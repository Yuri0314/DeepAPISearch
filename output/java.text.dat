java.text.Annotation#getValue()->Object:::Returns the value of the attribute, which may be null.
java.text.Annotation#toString()->String:::Returns the String representation of this Annotation.
java.text.AttributedCharacterIterator.Attribute#equals(Object)->boolean:::Compares two objects for equality
java.text.AttributedCharacterIterator.Attribute#hashCode()->int:::Returns a hash code value for the object
java.text.AttributedCharacterIterator.Attribute#toString()->String:::Returns a string representation of the object
java.text.AttributedCharacterIterator.Attribute#getName()->String:::Returns the name of the attribute.
java.text.AttributedCharacterIterator.Attribute#readResolve()->Object:::Resolves instances being deserialized to the predefined constants.
java.text.AttributedCharacterIterator#getRunStart()->int:::Returns the index of the first character of the run with respect to all attributes containing the current character
java.text.AttributedCharacterIterator#getRunStart(Attribute)->int:::Returns the index of the first character of the run with respect to the given attribute containing the current character.
java.text.AttributedCharacterIterator#getRunStart(Set)->int:::Returns the index of the first character of the run with respect to the given attributes containing the current character.
java.text.AttributedCharacterIterator#getRunLimit()->int:::Returns the index of the first character following the run with respect to all attributes containing the current character
java.text.AttributedCharacterIterator#getRunLimit(Attribute)->int:::Returns the index of the first character following the run with respect to the given attribute containing the current character.
java.text.AttributedCharacterIterator#getRunLimit(Set)->int:::Returns the index of the first character following the run with respect to the given attributes containing the current character.
java.text.AttributedCharacterIterator#getAttributes()->Map:::Returns a map with the attributes defined on the current character.
java.text.AttributedCharacterIterator#getAttribute(Attribute)->Object:::Returns the value of the named attribute for the current character
java.text.AttributedCharacterIterator#getAllAttributeKeys()->Set:::Returns the keys of all attributes defined on the iterator's text range
java.text.AttributedString#addAttribute(Attribute, Object)->void:::Adds an attribute to the entire string.
java.text.AttributedString#addAttribute(Attribute, Object, int, int)->void:::Adds an attribute to a subrange of the string.
java.text.AttributedString#addAttributes(Map, int, int)->void:::Adds a set of attributes to a subrange of the string.
java.text.AttributedString#getIterator()->AttributedCharacterIterator:::Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.
java.text.AttributedString#getIterator(Attribute[])->AttributedCharacterIterator:::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
java.text.AttributedString#getIterator(Attribute[], int, int)->AttributedCharacterIterator:::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
java.text.AttributedString#length()->int::: attributed string length
java.text.AttributeEntry#equals(Object)->boolean::: attribute entry equals
java.text.AttributeEntry#getKey()->Attribute::: attribute entry get key
java.text.AttributeEntry#getValue()->Object::: attribute entry get value
java.text.AttributeEntry#setValue(Object)->Object::: attribute entry set value
java.text.AttributeEntry#hashCode()->int::: attribute entry hash code
java.text.AttributeEntry#toString()->String::: attribute entry to string
java.text.Bidi#createLineBidi(int, int)->Bidi:::Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi
java.text.Bidi#isMixed()->boolean:::Return true if the line is not left-to-right or right-to-left
java.text.Bidi#isLeftToRight()->boolean:::Return true if the line is all left-to-right text and the base direction is left-to-right.
java.text.Bidi#isRightToLeft()->boolean:::Return true if the line is all right-to-left text, and the base direction is right-to-left.
java.text.Bidi#getLength()->int:::Return the length of text in the line.
java.text.Bidi#baseIsLeftToRight()->boolean:::Return true if the base direction is left-to-right.
java.text.Bidi#getBaseLevel()->int:::Return the base level (0 if left-to-right, 1 if right-to-left).
java.text.Bidi#getLevelAt(int)->int:::Return the resolved level of the character at offset
java.text.Bidi#getRunCount()->int:::Return the number of level runs.
java.text.Bidi#getRunLevel(int)->int:::Return the level of the nth logical run in this line.
java.text.Bidi#getRunStart(int)->int:::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.
java.text.Bidi#getRunLimit(int)->int:::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line
java.text.Bidi#requiresBidi(char[], int, int)->boolean:::Return true if the specified text requires bidi analysis
java.text.Bidi#reorderVisually(byte[], int, Object[], int, int)->void:::Reorder the objects in the array into visual order based on their levels
java.text.Bidi#toString()->String:::Display the bidi internal state, used in debugging.
java.text.BreakIterator#clone()->Object:::Create a copy of this iterator
java.text.BreakIterator#first()->int:::Returns the first boundary
java.text.BreakIterator#last()->int:::Returns the last boundary
java.text.BreakIterator#next(int)->int:::Returns the nth boundary from the current boundary
java.text.BreakIterator#next()->int:::Returns the boundary following the current boundary
java.text.BreakIterator#previous()->int:::Returns the boundary preceding the current boundary
java.text.BreakIterator#following(int)->int:::Returns the first boundary following the specified character offset
java.text.BreakIterator#preceding(int)->int:::Returns the last boundary preceding the specified character offset
java.text.BreakIterator#isBoundary(int)->boolean:::Returns true if the specified character offset is a text boundary.
java.text.BreakIterator#current()->int:::Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)
java.text.BreakIterator#getText()->CharacterIterator:::Get the text being scanned
java.text.BreakIterator#setText(String)->void:::Set a new text string to be scanned
java.text.BreakIterator#setText(CharacterIterator)->void:::Set a new text for scanning
java.text.BreakIterator#getWordInstance()->BreakIterator:::Returns a new BreakIterator instance for word breaks for the Locale#getDefault() default locale.
java.text.BreakIterator#getWordInstance(Locale)->BreakIterator:::Returns a new BreakIterator instance for word breaks for the given locale.
java.text.BreakIterator#getLineInstance()->BreakIterator:::Returns a new BreakIterator instance for line breaks for the Locale#getDefault() default locale.
java.text.BreakIterator#getLineInstance(Locale)->BreakIterator:::Returns a new BreakIterator instance for line breaks for the given locale.
java.text.BreakIterator#getCharacterInstance()->BreakIterator:::Returns a new BreakIterator instance for character breaks for the Locale#getDefault() default locale.
java.text.BreakIterator#getCharacterInstance(Locale)->BreakIterator:::Returns a new BreakIterator instance for character breaks for the given locale.
java.text.BreakIterator#getSentenceInstance()->BreakIterator:::Returns a new BreakIterator instance for sentence breaks for the Locale#getDefault() default locale.
java.text.BreakIterator#getSentenceInstance(Locale)->BreakIterator:::Returns a new BreakIterator instance for sentence breaks for the given locale.
java.text.BreakIterator#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
java.text.CalendarBuilder#set(int, int)->CalendarBuilder::: calendar builder set
java.text.CalendarBuilder#addYear(int)->CalendarBuilder::: calendar builder add year
java.text.CalendarBuilder#isSet(int)->boolean::: calendar builder is set
java.text.CalendarBuilder#clear(int)->CalendarBuilder::: calendar builder clear
java.text.CalendarBuilder#establish(Calendar)->Calendar::: calendar builder establish
java.text.CalendarBuilder#toString()->String::: calendar builder to string
java.text.CalendarBuilder#toISODayOfWeek(int)->int::: calendar builder to day of week
java.text.CalendarBuilder#toCalendarDayOfWeek(int)->int::: calendar builder to calendar day of week
java.text.CalendarBuilder#isValidDayOfWeek(int)->boolean::: calendar builder is valid day of week
java.text.CharacterIterator#first()->char:::Sets the position to getBeginIndex() and returns the character at that position.
java.text.CharacterIterator#last()->char:::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.
java.text.CharacterIterator#current()->char:::Gets the character at the current position (as returned by getIndex()).
java.text.CharacterIterator#next()->char:::Increments the iterator's index by one and returns the character at the new index
java.text.CharacterIterator#previous()->char:::Decrements the iterator's index by one and returns the character at the new index
java.text.CharacterIterator#setIndex(int)->char:::Sets the position to the specified position in the text and returns that character.
java.text.CharacterIterator#getBeginIndex()->int:::Returns the start index of the text.
java.text.CharacterIterator#getEndIndex()->int:::Returns the end index of the text
java.text.CharacterIterator#getIndex()->int:::Returns the current index.
java.text.CharacterIterator#clone()->Object:::Create a copy of this iterator
java.text.CharacterIteratorFieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer)->void::: character iterator field delegate formatted
java.text.CharacterIteratorFieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer)->void::: character iterator field delegate formatted
java.text.CharacterIteratorFieldDelegate#getIterator(String)->AttributedCharacterIterator:::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.
java.text.ChoiceFormat#applyPattern(String)->void:::Sets the pattern.
java.text.ChoiceFormat#toPattern()->String:::Gets the pattern.
java.text.ChoiceFormat#setChoices(double[], String[])->void:::Set the choices to be used in formatting.
java.text.ChoiceFormat#getLimits()->double[]:::Get the limits passed in the constructor.
java.text.ChoiceFormat#getFormats()->Object[]:::Get the formats passed in the constructor.
java.text.ChoiceFormat#format(long, StringBuffer, FieldPosition)->StringBuffer:::Specialization of format
java.text.ChoiceFormat#format(double, StringBuffer, FieldPosition)->StringBuffer:::Returns pattern with formatted double.
java.text.ChoiceFormat#parse(String, ParsePosition)->Number:::Parses a Number from the input text.
java.text.ChoiceFormat#nextDouble(double)->double:::Finds the least double greater than d
java.text.ChoiceFormat#previousDouble(double)->double:::Finds the greatest double less than d
java.text.ChoiceFormat#clone()->Object:::Overrides Cloneable
java.text.ChoiceFormat#hashCode()->int:::Generates a hash code for the message format object.
java.text.ChoiceFormat#equals(Object)->boolean:::Equality comparison between two
java.text.ChoiceFormat#nextDouble(double, boolean)->double:::Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false)
java.text.CollationElementIterator#reset()->void:::Resets the cursor to the beginning of the string
java.text.CollationElementIterator#next()->int:::Get the next collation element in the string
java.text.CollationElementIterator#previous()->int:::Get the previous collation element in the string
java.text.CollationElementIterator#primaryOrder(int)->int:::Return the primary component of a collation element.
java.text.CollationElementIterator#secondaryOrder(int)->short:::Return the secondary component of a collation element.
java.text.CollationElementIterator#tertiaryOrder(int)->short:::Return the tertiary component of a collation element.
java.text.CollationElementIterator#strengthOrder(int)->int::: Get the comparison order in the desired strength
java.text.CollationElementIterator#setOffset(int)->void:::Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements)
java.text.CollationElementIterator#getOffset()->int:::Returns the character offset in the original text corresponding to the next collation element
java.text.CollationElementIterator#getMaxExpansion(int)->int:::Return the maximum length of any expansion sequences that end with the specified comparison order.
java.text.CollationElementIterator#setText(String)->void:::Set a new string over which to iterate.
java.text.CollationElementIterator#setText(CharacterIterator)->void:::Set a new string over which to iterate.
java.text.CollationElementIterator#isIgnorable(int)->boolean::: Check if a comparison order is ignorable.
java.text.CollationKey#compareTo(CollationKey)->int:::Compare this CollationKey to the target CollationKey
java.text.CollationKey#getSourceString()->String:::Returns the String that this CollationKey represents.
java.text.CollationKey#toByteArray()->byte[]:::Converts the CollationKey to a sequence of bits
java.text.Collator#getInstance()->Collator:::Gets the Collator for the current default locale
java.text.Collator#getInstance(Locale)->Collator:::Gets the Collator for the desired locale.
java.text.Collator#compare(String, String)->int:::Compares the source string to the target string according to the collation rules for this Collator
java.text.Collator#compare(Object, Object)->int:::Compares its two arguments for order
java.text.Collator#getCollationKey(String)->CollationKey:::Transforms the String into a series of bits that can be compared bitwise to other CollationKeys
java.text.Collator#equals(String, String)->boolean:::Convenience method for comparing the equality of two strings based on this Collator's collation rules.
java.text.Collator#getStrength()->int:::Returns this Collator's strength property
java.text.Collator#setStrength(int)->void:::Sets this Collator's strength property
java.text.Collator#getDecomposition()->int:::Get the decomposition mode of this Collator
java.text.Collator#setDecomposition(int)->void:::Set the decomposition mode of this Collator
java.text.Collator#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the getInstance methods of this class can return localized instances
java.text.Collator#clone()->Object:::Overrides Cloneable
java.text.Collator#equals(Object)->boolean:::Compares the equality of two Collators.
java.text.Collator#hashCode()->int:::Generates the hash code for this Collator.
java.text.DateFormat#format(Object, StringBuffer, FieldPosition)->StringBuffer:::Formats the given Object into a date-time string
java.text.DateFormat#format(Date, StringBuffer, FieldPosition)->StringBuffer:::Formats a Date into a date-time string
java.text.DateFormat#format(Date)->String:::Formats a Date into a date-time string.
java.text.DateFormat#parse(String)->Date:::Parses text from the beginning of the given string to produce a date
java.text.DateFormat#parse(String, ParsePosition)->Date:::Parse a date/time string according to the given parse position
java.text.DateFormat#parseObject(String, ParsePosition)->Object:::Parses text from a string to produce a Date
java.text.DateFormat#getTimeInstance()->DateFormat:::Gets the time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getTimeInstance(int)->DateFormat:::Gets the time formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getTimeInstance(int, Locale)->DateFormat:::Gets the time formatter with the given formatting style for the given locale.
java.text.DateFormat#getDateInstance()->DateFormat:::Gets the date formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getDateInstance(int)->DateFormat:::Gets the date formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getDateInstance(int, Locale)->DateFormat:::Gets the date formatter with the given formatting style for the given locale.
java.text.DateFormat#getDateTimeInstance()->DateFormat:::Gets the date/time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getDateTimeInstance(int, int)->DateFormat:::Gets the date/time formatter with the given date and time formatting styles for the default java.util.Locale.Category#FORMAT FORMAT locale
java.text.DateFormat#getDateTimeInstance(int, int, Locale)->DateFormat:::Gets the date/time formatter with the given formatting styles for the given locale.
java.text.DateFormat#getInstance()->DateFormat:::Get a default date/time formatter that uses the SHORT style for both the date and the time.
java.text.DateFormat#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
java.text.DateFormat#setCalendar(Calendar)->void:::Set the calendar to be used by this date format
java.text.DateFormat#getCalendar()->Calendar:::Gets the calendar associated with this date/time formatter.
java.text.DateFormat#setNumberFormat(NumberFormat)->void:::Allows you to set the number formatter.
java.text.DateFormat#getNumberFormat()->NumberFormat:::Gets the number formatter which this date/time formatter uses to format and parse a time.
java.text.DateFormat#setTimeZone(TimeZone)->void:::Sets the time zone for the calendar of this DateFormat object
java.text.DateFormat#getTimeZone()->TimeZone:::Gets the time zone
java.text.DateFormat#setLenient(boolean)->void:::Specify whether or not date/time parsing is to be lenient
java.text.DateFormat#isLenient()->boolean:::Tell whether date/time parsing is to be lenient
java.text.DateFormat#hashCode()->int:::Overrides hashCode
java.text.DateFormat#equals(Object)->boolean:::Overrides equals
java.text.DateFormat#clone()->Object:::Overrides Cloneable
java.text.DateFormat.Field#ofCalendarField(int)->Field:::Returns the Field constant that corresponds to the Calendar constant calendarField
java.text.DateFormat.Field#getCalendarField()->int:::Returns the Calendar field associated with this attribute
java.text.DateFormat.Field#readResolve()->Object:::Resolves instances being deserialized to the predefined constants.
java.text.DateFormatSymbols#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the getInstance methods of this class can return localized instances
java.text.DateFormatSymbols#getInstance()->DateFormatSymbols:::Gets the DateFormatSymbols instance for the default locale
java.text.DateFormatSymbols#getInstance(Locale)->DateFormatSymbols:::Gets the DateFormatSymbols instance for the specified locale
java.text.DateFormatSymbols#getInstanceRef(Locale)->DateFormatSymbols:::Returns a DateFormatSymbols provided by a provider or found in the cache
java.text.DateFormatSymbols#getEras()->String[]:::Gets era strings
java.text.DateFormatSymbols#setEras(String[])->void:::Sets era strings
java.text.DateFormatSymbols#getMonths()->String[]:::Gets month strings
java.text.DateFormatSymbols#setMonths(String[])->void:::Sets month strings
java.text.DateFormatSymbols#getShortMonths()->String[]:::Gets short month strings
java.text.DateFormatSymbols#setShortMonths(String[])->void:::Sets short month strings
java.text.DateFormatSymbols#getWeekdays()->String[]:::Gets weekday strings
java.text.DateFormatSymbols#setWeekdays(String[])->void:::Sets weekday strings
java.text.DateFormatSymbols#getShortWeekdays()->String[]:::Gets short weekday strings
java.text.DateFormatSymbols#setShortWeekdays(String[])->void:::Sets short weekday strings
java.text.DateFormatSymbols#getAmPmStrings()->String[]:::Gets ampm strings
java.text.DateFormatSymbols#setAmPmStrings(String[])->void:::Sets ampm strings
java.text.DateFormatSymbols#getZoneStrings()->String[][]:::Gets time zone strings
java.text.DateFormatSymbols#setZoneStrings(String[][])->void:::Sets time zone strings
java.text.DateFormatSymbols#getLocalPatternChars()->String:::Gets localized date-time pattern characters
java.text.DateFormatSymbols#setLocalPatternChars(String)->void:::Sets localized date-time pattern characters
java.text.DateFormatSymbols#clone()->Object:::Overrides Cloneable
java.text.DateFormatSymbols#hashCode()->int:::Override hashCode
java.text.DateFormatSymbols#equals(Object)->boolean:::Override equals
java.text.DateFormatSymbols#getZoneIndex(String)->int:::Package private: used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting
java.text.DateFormatSymbols#getZoneStringsWrapper()->String[][]:::Wrapper method to the getZoneStrings(), which is called from inside the java.text package and not to mutate the returned arrays, so that it does not need to create a defensive copy.
java.text.DecimalFormat#format(Object, StringBuffer, FieldPosition)->StringBuffer:::Formats a number and appends the resulting text to the given string buffer
java.text.DecimalFormat#format(double, StringBuffer, FieldPosition)->StringBuffer:::Formats a double to produce a string.
java.text.DecimalFormat#format(long, StringBuffer, FieldPosition)->StringBuffer:::Format a long to produce a string.
java.text.DecimalFormat#formatToCharacterIterator(Object)->AttributedCharacterIterator:::Formats an Object producing an AttributedCharacterIterator
java.text.DecimalFormat#fastFormat(double)->String:::A fast-path shortcut of format(double) to be called by NumberFormat, or by format(double, ...) public methods
java.text.DecimalFormat#parse(String, ParsePosition)->Number:::Parses text from a string to produce a Number
java.text.DecimalFormat#getDecimalFormatSymbols()->DecimalFormatSymbols:::Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.
java.text.DecimalFormat#setDecimalFormatSymbols(DecimalFormatSymbols)->void:::Sets the decimal format symbols, which is generally not changed by the programmer or user.
java.text.DecimalFormat#getPositivePrefix()->String:::Get the positive prefix
java.text.DecimalFormat#setPositivePrefix(String)->void:::Set the positive prefix
java.text.DecimalFormat#getNegativePrefix()->String:::Get the negative prefix
java.text.DecimalFormat#setNegativePrefix(String)->void:::Set the negative prefix
java.text.DecimalFormat#getPositiveSuffix()->String:::Get the positive suffix
java.text.DecimalFormat#setPositiveSuffix(String)->void:::Set the positive suffix
java.text.DecimalFormat#getNegativeSuffix()->String:::Get the negative suffix
java.text.DecimalFormat#setNegativeSuffix(String)->void:::Set the negative suffix
java.text.DecimalFormat#getMultiplier()->int:::Gets the multiplier for use in percent, per mille, and similar formats.
java.text.DecimalFormat#setMultiplier(int)->void:::Sets the multiplier for use in percent, per mille, and similar formats
java.text.DecimalFormat#setGroupingUsed(boolean)->void::: decimal format set grouping used
java.text.DecimalFormat#getGroupingSize()->int:::Return the grouping size
java.text.DecimalFormat#setGroupingSize(int)->void:::Set the grouping size
java.text.DecimalFormat#isDecimalSeparatorAlwaysShown()->boolean:::Allows you to get the behavior of the decimal separator with integers
java.text.DecimalFormat#setDecimalSeparatorAlwaysShown(boolean)->void:::Allows you to set the behavior of the decimal separator with integers
java.text.DecimalFormat#isParseBigDecimal()->boolean:::Returns whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal
java.text.DecimalFormat#setParseBigDecimal(boolean)->void:::Sets whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.
java.text.DecimalFormat#clone()->Object:::Standard override; no change in semantics.
java.text.DecimalFormat#equals(Object)->boolean:::Overrides equals
java.text.DecimalFormat#hashCode()->int:::Overrides hashCode
java.text.DecimalFormat#toPattern()->String:::Synthesizes a pattern string that represents the current state of this Format object.
java.text.DecimalFormat#toLocalizedPattern()->String:::Synthesizes a localized pattern string that represents the current state of this Format object.
java.text.DecimalFormat#applyPattern(String)->void:::Apply the given pattern to this Format object
java.text.DecimalFormat#applyLocalizedPattern(String)->void:::Apply the given pattern to this Format object
java.text.DecimalFormat#setMaximumIntegerDigits(int)->void:::Sets the maximum number of digits allowed in the integer portion of a number
java.text.DecimalFormat#setMinimumIntegerDigits(int)->void:::Sets the minimum number of digits allowed in the integer portion of a number
java.text.DecimalFormat#setMaximumFractionDigits(int)->void:::Sets the maximum number of digits allowed in the fraction portion of a number
java.text.DecimalFormat#setMinimumFractionDigits(int)->void:::Sets the minimum number of digits allowed in the fraction portion of a number
java.text.DecimalFormat#getMaximumIntegerDigits()->int:::Gets the maximum number of digits allowed in the integer portion of a number
java.text.DecimalFormat#getMinimumIntegerDigits()->int:::Gets the minimum number of digits allowed in the integer portion of a number
java.text.DecimalFormat#getMaximumFractionDigits()->int:::Gets the maximum number of digits allowed in the fraction portion of a number
java.text.DecimalFormat#getMinimumFractionDigits()->int:::Gets the minimum number of digits allowed in the fraction portion of a number
java.text.DecimalFormat#getCurrency()->Currency:::Gets the currency used by this decimal format when formatting currency values
java.text.DecimalFormat#setCurrency(Currency)->void:::Sets the currency used by this number format when formatting currency values
java.text.DecimalFormat#getRoundingMode()->RoundingMode:::Gets the java.math.RoundingMode used in this DecimalFormat.
java.text.DecimalFormat#setRoundingMode(RoundingMode)->void:::Sets the java.math.RoundingMode used in this DecimalFormat.
java.text.DecimalFormatSymbols#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the getInstance methods of this class can return localized instances
java.text.DecimalFormatSymbols#getInstance()->DecimalFormatSymbols:::Gets the DecimalFormatSymbols instance for the default locale
java.text.DecimalFormatSymbols#getInstance(Locale)->DecimalFormatSymbols:::Gets the DecimalFormatSymbols instance for the specified locale
java.text.DecimalFormatSymbols#getZeroDigit()->char:::Gets the character used for zero
java.text.DecimalFormatSymbols#setZeroDigit(char)->void:::Sets the character used for zero
java.text.DecimalFormatSymbols#getGroupingSeparator()->char:::Gets the character used for thousands separator
java.text.DecimalFormatSymbols#setGroupingSeparator(char)->void:::Sets the character used for thousands separator
java.text.DecimalFormatSymbols#getDecimalSeparator()->char:::Gets the character used for decimal sign
java.text.DecimalFormatSymbols#setDecimalSeparator(char)->void:::Sets the character used for decimal sign
java.text.DecimalFormatSymbols#getPerMill()->char:::Gets the character used for per mille sign
java.text.DecimalFormatSymbols#setPerMill(char)->void:::Sets the character used for per mille sign
java.text.DecimalFormatSymbols#getPercent()->char:::Gets the character used for percent sign
java.text.DecimalFormatSymbols#setPercent(char)->void:::Sets the character used for percent sign
java.text.DecimalFormatSymbols#getDigit()->char:::Gets the character used for a digit in a pattern.
java.text.DecimalFormatSymbols#setDigit(char)->void:::Sets the character used for a digit in a pattern.
java.text.DecimalFormatSymbols#getPatternSeparator()->char:::Gets the character used to separate positive and negative subpatterns in a pattern.
java.text.DecimalFormatSymbols#setPatternSeparator(char)->void:::Sets the character used to separate positive and negative subpatterns in a pattern.
java.text.DecimalFormatSymbols#getInfinity()->String:::Gets the string used to represent infinity
java.text.DecimalFormatSymbols#setInfinity(String)->void:::Sets the string used to represent infinity
java.text.DecimalFormatSymbols#getNaN()->String:::Gets the string used to represent "not a number"
java.text.DecimalFormatSymbols#setNaN(String)->void:::Sets the string used to represent "not a number"
java.text.DecimalFormatSymbols#getMinusSign()->char:::Gets the character used to represent minus sign
java.text.DecimalFormatSymbols#setMinusSign(char)->void:::Sets the character used to represent minus sign
java.text.DecimalFormatSymbols#getCurrencySymbol()->String:::Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.
java.text.DecimalFormatSymbols#setCurrencySymbol(String)->void:::Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.
java.text.DecimalFormatSymbols#getInternationalCurrencySymbol()->String:::Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.
java.text.DecimalFormatSymbols#setInternationalCurrencySymbol(String)->void:::Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols
java.text.DecimalFormatSymbols#getCurrency()->Currency:::Gets the currency of these DecimalFormatSymbols
java.text.DecimalFormatSymbols#setCurrency(Currency)->void:::Sets the currency of these DecimalFormatSymbols
java.text.DecimalFormatSymbols#getMonetaryDecimalSeparator()->char:::Returns the monetary decimal separator.
java.text.DecimalFormatSymbols#setMonetaryDecimalSeparator(char)->void:::Sets the monetary decimal separator.
java.text.DecimalFormatSymbols#getExponentialSymbol()->char:::Returns the character used to separate the mantissa from the exponent.
java.text.DecimalFormatSymbols#getExponentSeparator()->String:::Returns the string used to separate the mantissa from the exponent
java.text.DecimalFormatSymbols#setExponentialSymbol(char)->void:::Sets the character used to separate the mantissa from the exponent.
java.text.DecimalFormatSymbols#setExponentSeparator(String)->void:::Sets the string used to separate the mantissa from the exponent
java.text.DecimalFormatSymbols#clone()->Object:::Standard override.
java.text.DecimalFormatSymbols#equals(Object)->boolean:::Override equals.
java.text.DecimalFormatSymbols#hashCode()->int:::Override hashCode.
java.text.DigitList#isZero()->boolean:::Return true if the represented number is zero.
java.text.DigitList#setRoundingMode(RoundingMode)->void:::Set the rounding mode
java.text.DigitList#clear()->void:::Clears out the digits
java.text.DigitList#append(char)->void:::Appends a digit to the list, extending the list when necessary.
java.text.DigitList#getDouble()->double:::Utility routine to get the value of the digit list If (count == 0) this throws a NumberFormatException, which mimics Long.parseLong().
java.text.DigitList#getLong()->long:::Utility routine to get the value of the digit list
java.text.DigitList#getBigDecimal()->BigDecimal::: digit list get big decimal
java.text.DigitList#fitsIntoLong(boolean, boolean)->boolean:::Return true if the number represented by this object can fit into a long.
java.text.DigitList#set(boolean, double, int)->void:::Set the digit list to a representation of the given double value
java.text.DigitList#set(boolean, double, int, boolean)->void:::Set the digit list to a representation of the given double value
java.text.DigitList#set(boolean, long)->void:::Utility routine to set the value of the digit list from a long
java.text.DigitList#set(boolean, long, int)->void:::Set the digit list to a representation of the given long value.
java.text.DigitList#set(boolean, BigDecimal, int, boolean)->void:::Set the digit list to a representation of the given BigDecimal value
java.text.DigitList#set(boolean, BigInteger, int)->void:::Set the digit list to a representation of the given BigInteger value.
java.text.DigitList#equals(Object)->boolean:::equality test between two digit lists.
java.text.DigitList#hashCode()->int:::Generates the hash code for the digit list.
java.text.DigitList#clone()->Object:::Creates a copy of this object.
java.text.DigitList#toString()->String::: digit list to string
java.text.DontCareFieldPosition#getFieldDelegate()->Format.FieldDelegate::: dont care field position get field delegate
java.text.FieldPosition#getFieldAttribute()->Format.Field:::Returns the field identifier as an attribute constant from one of the Field subclasses
java.text.FieldPosition#getField()->int:::Retrieves the field identifier.
java.text.FieldPosition#getBeginIndex()->int:::Retrieves the index of the first character in the requested field.
java.text.FieldPosition#getEndIndex()->int:::Retrieves the index of the character following the last character in the requested field.
java.text.FieldPosition#setBeginIndex(int)->void:::Sets the begin index
java.text.FieldPosition#setEndIndex(int)->void:::Sets the end index
java.text.FieldPosition#getFieldDelegate()->Format.FieldDelegate:::Returns a Format.FieldDelegate instance that is associated with the FieldPosition
java.text.FieldPosition#equals(Object)->boolean:::Overrides equals
java.text.FieldPosition#hashCode()->int:::Returns a hash code for this FieldPosition.
java.text.FieldPosition#toString()->String:::Return a string representation of this FieldPosition.
java.text.Format#format(Object)->String:::Formats an object to produce a string
java.text.Format#format(Object, StringBuffer, FieldPosition)->StringBuffer:::Formats an object and appends the resulting text to a given string buffer
java.text.Format#formatToCharacterIterator(Object)->AttributedCharacterIterator:::Formats an Object producing an AttributedCharacterIterator
java.text.Format#parseObject(String, ParsePosition)->Object:::Parses text from a string to produce an object
java.text.Format#parseObject(String)->Object:::Parses text from the beginning of the given string to produce an object
java.text.Format#clone()->Object:::Creates and returns a copy of this object.
java.text.Format#createAttributedCharacterIterator(String)->AttributedCharacterIterator:::Creates an AttributedCharacterIterator for the String s.
java.text.Format#createAttributedCharacterIterator(AttributedCharacterIterator[])->AttributedCharacterIterator:::Creates an AttributedCharacterIterator containing the concatenated contents of the passed in AttributedCharacterIterators.
java.text.Format#createAttributedCharacterIterator(String, AttributedCharacterIterator.Attribute, Object)->AttributedCharacterIterator:::Returns an AttributedCharacterIterator with the String string and additional key/value pair key, value.
java.text.Format#createAttributedCharacterIterator(AttributedCharacterIterator, AttributedCharacterIterator.Attribute, Object)->AttributedCharacterIterator:::Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value.
java.text.Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer)->void:::Notified when a particular region of the String is formatted
java.text.Format.FieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer)->void:::Notified when a particular region of the String is formatted.
java.text.MergeCollation#getPattern()->String:::recovers current pattern
java.text.MergeCollation#getPattern(boolean)->String:::recovers current pattern.
java.text.MergeCollation#emitPattern()->String:::emits the pattern for collation builder.
java.text.MergeCollation#emitPattern(boolean)->String:::emits the pattern for collation builder.
java.text.MergeCollation#setPattern(String)->void:::sets the pattern.
java.text.MergeCollation#addPattern(String)->void:::adds a pattern to the current one.
java.text.MergeCollation#getCount()->int:::gets count of separate entries
java.text.MergeCollation#getItemAt(int)->PatternEntry:::gets count of separate entries
java.text.MessageFormat#setLocale(Locale)->void:::Sets the locale to be used when creating or comparing subformats
java.text.MessageFormat#getLocale()->Locale:::Gets the locale that's used when creating or comparing subformats.
java.text.MessageFormat#applyPattern(String)->void:::Sets the pattern used by this message format
java.text.MessageFormat#toPattern()->String:::Returns a pattern representing the current state of the message format
java.text.MessageFormat#setFormatsByArgumentIndex(Format[])->void:::Sets the formats to use for the values passed into format methods or returned from parse methods
java.text.MessageFormat#setFormats(Format[])->void:::Sets the formats to use for the format elements in the previously set pattern string
java.text.MessageFormat#setFormatByArgumentIndex(int, Format)->void:::Sets the format to use for the format elements within the previously set pattern string that use the given argument index
java.text.MessageFormat#setFormat(int, Format)->void:::Sets the format to use for the format element with the given format element index within the previously set pattern string
java.text.MessageFormat#getFormatsByArgumentIndex()->Format[]:::Gets the formats used for the values passed into format methods or returned from parse methods
java.text.MessageFormat#getFormats()->Format[]:::Gets the formats used for the format elements in the previously set pattern string
java.text.MessageFormat#format(Object[], StringBuffer, FieldPosition)->StringBuffer:::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
java.text.MessageFormat#format(String, Object...)->String:::Creates a MessageFormat with the given pattern and uses it to format the given arguments
java.text.MessageFormat#format(Object, StringBuffer, FieldPosition)->StringBuffer:::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
java.text.MessageFormat#formatToCharacterIterator(Object)->AttributedCharacterIterator:::Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator
java.text.MessageFormat#parse(String, ParsePosition)->Object[]:::Parses the string
java.text.MessageFormat#parse(String)->Object[]:::Parses text from the beginning of the given string to produce an object array
java.text.MessageFormat#parseObject(String, ParsePosition)->Object:::Parses text from a string to produce an object array
java.text.MessageFormat#clone()->Object:::Creates and returns a copy of this object.
java.text.MessageFormat#equals(Object)->boolean:::Equality comparison between two message format objects
java.text.MessageFormat#hashCode()->int:::Generates a hash code for the message format object.
java.text.MessageFormat.Field#readResolve()->Object:::Resolves instances being deserialized to the predefined constants.
java.text.Normalizer#normalize(CharSequence, Form)->String:::Normalize a sequence of char values
java.text.Normalizer#isNormalized(CharSequence, Form)->boolean:::Determines if the given sequence of char values is normalized.
java.text.NumberFormat#format(Object, StringBuffer, FieldPosition)->StringBuffer:::Formats a number and appends the resulting text to the given string buffer
java.text.NumberFormat#parseObject(String, ParsePosition)->Object:::Parses text from a string to produce a Number
java.text.NumberFormat#format(double)->String:::Specialization of format.
java.text.NumberFormat#fastFormat(double)->String::: number format fast format
java.text.NumberFormat#format(long)->String:::Specialization of format.
java.text.NumberFormat#format(double, StringBuffer, FieldPosition)->StringBuffer:::Specialization of format.
java.text.NumberFormat#format(long, StringBuffer, FieldPosition)->StringBuffer:::Specialization of format.
java.text.NumberFormat#parse(String, ParsePosition)->Number:::Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double
java.text.NumberFormat#parse(String)->Number:::Parses text from the beginning of the given string to produce a number
java.text.NumberFormat#isParseIntegerOnly()->boolean:::Returns true if this format will parse numbers as integers only
java.text.NumberFormat#setParseIntegerOnly(boolean)->void:::Sets whether or not numbers should be parsed as integers only.
java.text.NumberFormat#getInstance()->NumberFormat:::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
java.text.NumberFormat#getInstance(Locale)->NumberFormat:::Returns a general-purpose number format for the specified locale
java.text.NumberFormat#getNumberInstance()->NumberFormat:::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
java.text.NumberFormat#getNumberInstance(Locale)->NumberFormat:::Returns a general-purpose number format for the specified locale.
java.text.NumberFormat#getIntegerInstance()->NumberFormat:::Returns an integer number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
java.text.NumberFormat#getIntegerInstance(Locale)->NumberFormat:::Returns an integer number format for the specified locale
java.text.NumberFormat#getCurrencyInstance()->NumberFormat:::Returns a currency format for the current default java.util.Locale.Category#FORMAT FORMAT locale
java.text.NumberFormat#getCurrencyInstance(Locale)->NumberFormat:::Returns a currency format for the specified locale.
java.text.NumberFormat#getPercentInstance()->NumberFormat:::Returns a percentage format for the current default java.util.Locale.Category#FORMAT FORMAT locale
java.text.NumberFormat#getPercentInstance(Locale)->NumberFormat:::Returns a percentage format for the specified locale.
java.text.NumberFormat#getScientificInstance()->NumberFormat::: number format get scientific instance
java.text.NumberFormat#getScientificInstance(Locale)->NumberFormat::: number format get scientific instance
java.text.NumberFormat#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
java.text.NumberFormat#hashCode()->int:::Overrides hashCode.
java.text.NumberFormat#equals(Object)->boolean:::Overrides equals.
java.text.NumberFormat#clone()->Object:::Overrides Cloneable.
java.text.NumberFormat#isGroupingUsed()->boolean:::Returns true if grouping is used in this format
java.text.NumberFormat#setGroupingUsed(boolean)->void:::Set whether or not grouping will be used in this format.
java.text.NumberFormat#getMaximumIntegerDigits()->int:::Returns the maximum number of digits allowed in the integer portion of a number.
java.text.NumberFormat#setMaximumIntegerDigits(int)->void:::Sets the maximum number of digits allowed in the integer portion of a number
java.text.NumberFormat#getMinimumIntegerDigits()->int:::Returns the minimum number of digits allowed in the integer portion of a number.
java.text.NumberFormat#setMinimumIntegerDigits(int)->void:::Sets the minimum number of digits allowed in the integer portion of a number
java.text.NumberFormat#getMaximumFractionDigits()->int:::Returns the maximum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat#setMaximumFractionDigits(int)->void:::Sets the maximum number of digits allowed in the fraction portion of a number
java.text.NumberFormat#getMinimumFractionDigits()->int:::Returns the minimum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat#setMinimumFractionDigits(int)->void:::Sets the minimum number of digits allowed in the fraction portion of a number
java.text.NumberFormat#getCurrency()->Currency:::Gets the currency used by this number format when formatting currency values
java.text.NumberFormat#setCurrency(Currency)->void:::Sets the currency used by this number format when formatting currency values
java.text.NumberFormat#getRoundingMode()->RoundingMode:::Gets the java.math.RoundingMode used in this NumberFormat
java.text.NumberFormat#setRoundingMode(RoundingMode)->void:::Sets the java.math.RoundingMode used in this NumberFormat
java.text.NumberFormat.Field#readResolve()->Object:::Resolves instances being deserialized to the predefined constants.
java.text.ParseException#getErrorOffset()->int:::Returns the position where the error was found.
java.text.ParsePosition#getIndex()->int:::Retrieve the current parse position
java.text.ParsePosition#setIndex(int)->void:::Set the current parse position.
java.text.ParsePosition#setErrorIndex(int)->void:::Set the index at which a parse error occurred
java.text.ParsePosition#getErrorIndex()->int:::Retrieve the index at which an error occurred, or -1 if the error index has not been set.
java.text.ParsePosition#equals(Object)->boolean:::Overrides equals
java.text.ParsePosition#hashCode()->int:::Returns a hash code for this ParsePosition.
java.text.ParsePosition#toString()->String:::Return a string representation of this ParsePosition.
java.text.PatternEntry#appendQuotedExtension(StringBuffer)->void:::Gets the current extension, quoted
java.text.PatternEntry#appendQuotedChars(StringBuffer)->void:::Gets the current chars, quoted
java.text.PatternEntry#equals(Object)->boolean:::WARNING this is used for searching in a Vector
java.text.PatternEntry#hashCode()->int::: pattern entry hash code
java.text.PatternEntry#toString()->String:::For debugging.
java.text.PatternEntry#getStrength()->int:::Gets the strength of the entry.
java.text.PatternEntry#getExtension()->String:::Gets the expanding characters of the entry.
java.text.PatternEntry#getChars()->String:::Gets the core characters of the entry.
java.text.PatternEntry#addToBuffer(StringBuffer, boolean, boolean, PatternEntry)->void::: pattern entry add to buffer
java.text.PatternEntry#appendQuoted(String, StringBuffer)->void::: pattern entry append quoted
java.text.PatternEntry.Parser#next()->PatternEntry::: parser next
java.text.PatternEntry#isSpecialChar(char)->boolean::: pattern entry is special char
java.text.RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short)->void:::This function is used by RBTableBuilder to fill in all the members of this object
java.text.RBCollationTables#getRules()->String:::Gets the table-based rules for the collation object.
java.text.RBCollationTables#isFrenchSec()->boolean::: collation tables is french sec
java.text.RBCollationTables#isSEAsianSwapping()->boolean::: collation tables is asian swapping
java.text.RBCollationTables#getContractValues(int)->Vector::: Get the entry of hash table of the contracting string in the collation  table.
java.text.RBCollationTables#usedInContractSeq(int)->boolean:::Returns true if this character appears anywhere in a contracting character sequence
java.text.RBCollationTables#getMaxExpansion(int)->int:::Return the maximum length of any expansion sequences that end with the specified comparison order.
java.text.RBCollationTables#getExpandValueList(int)->int[]:::Get the entry of hash table of the expanding string in the collation table.
java.text.RBCollationTables#getUnicodeOrder(int)->int:::Get the comarison order of a character from the collation table.
java.text.RBCollationTables#getMaxSecOrder()->short::: collation tables get max sec order
java.text.RBCollationTables#getMaxTerOrder()->short::: collation tables get max ter order
java.text.RBCollationTables#reverse(StringBuffer, int, int)->void::: collation tables reverse
java.text.RBCollationTables#getEntry(Vector, String, boolean)->int::: collation tables get entry
java.text.RBTableBuilder#build(String, int)->void::: table builder build
java.text.RuleBasedCollationKey#compareTo(CollationKey)->int:::Compare this RuleBasedCollationKey to target
java.text.RuleBasedCollationKey#equals(Object)->boolean:::Compare this RuleBasedCollationKey and the target for equality
java.text.RuleBasedCollationKey#hashCode()->int:::Creates a hash code for this RuleBasedCollationKey
java.text.RuleBasedCollationKey#toByteArray()->byte[]:::Converts the RuleBasedCollationKey to a sequence of bits
java.text.RuleBasedCollator#getRules()->String:::Gets the table-based rules for the collation object.
java.text.RuleBasedCollator#getCollationElementIterator(String)->CollationElementIterator:::Returns a CollationElementIterator for the given String.
java.text.RuleBasedCollator#getCollationElementIterator(CharacterIterator)->CollationElementIterator:::Returns a CollationElementIterator for the given CharacterIterator.
java.text.RuleBasedCollator#compare(String, String)->int:::Compares the character data stored in two different strings based on the collation rules
java.text.RuleBasedCollator#getCollationKey(String)->CollationKey:::Transforms the string into a series of characters that can be compared with CollationKey.compareTo
java.text.RuleBasedCollator#clone()->Object:::Standard override; no change in semantics.
java.text.RuleBasedCollator#equals(Object)->boolean:::Compares the equality of two collation objects.
java.text.RuleBasedCollator#hashCode()->int:::Generates the hash code for the table-based collation object
java.text.RuleBasedCollator#getTables()->RBCollationTables:::Allows CollationElementIterator access to the tables object
java.text.SimpleDateFormat#set2DigitYearStart(Date)->void:::Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.
java.text.SimpleDateFormat#get2DigitYearStart()->Date:::Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.
java.text.SimpleDateFormat#format(Date, StringBuffer, FieldPosition)->StringBuffer:::Formats the given Date into a date/time string and appends the result to the given StringBuffer.
java.text.SimpleDateFormat#formatToCharacterIterator(Object)->AttributedCharacterIterator:::Formats an Object producing an AttributedCharacterIterator
java.text.SimpleDateFormat#parse(String, ParsePosition)->Date:::Parses text from a string to produce a Date
java.text.SimpleDateFormat#toPattern()->String:::Returns a pattern string describing this date format.
java.text.SimpleDateFormat#toLocalizedPattern()->String:::Returns a localized pattern string describing this date format.
java.text.SimpleDateFormat#applyPattern(String)->void:::Applies the given pattern string to this date format.
java.text.SimpleDateFormat#applyLocalizedPattern(String)->void:::Applies the given localized pattern string to this date format.
java.text.SimpleDateFormat#getDateFormatSymbols()->DateFormatSymbols:::Gets a copy of the date and time format symbols of this date format.
java.text.SimpleDateFormat#setDateFormatSymbols(DateFormatSymbols)->void:::Sets the date and time format symbols of this date format.
java.text.SimpleDateFormat#clone()->Object:::Creates a copy of this SimpleDateFormat
java.text.SimpleDateFormat#hashCode()->int:::Returns the hash code value for this SimpleDateFormat object.
java.text.SimpleDateFormat#equals(Object)->boolean:::Compares the given object with this SimpleDateFormat for equality.
java.text.StringCharacterIterator#setText(String)->void:::Reset this iterator to point to a new string
java.text.StringCharacterIterator#first()->char:::Implements CharacterIterator.first() for String.
java.text.StringCharacterIterator#last()->char:::Implements CharacterIterator.last() for String.
java.text.StringCharacterIterator#setIndex(int)->char:::Implements CharacterIterator.setIndex() for String.
java.text.StringCharacterIterator#current()->char:::Implements CharacterIterator.current() for String.
java.text.StringCharacterIterator#next()->char:::Implements CharacterIterator.next() for String.
java.text.StringCharacterIterator#previous()->char:::Implements CharacterIterator.previous() for String.
java.text.StringCharacterIterator#getBeginIndex()->int:::Implements CharacterIterator.getBeginIndex() for String.
java.text.StringCharacterIterator#getEndIndex()->int:::Implements CharacterIterator.getEndIndex() for String.
java.text.StringCharacterIterator#getIndex()->int:::Implements CharacterIterator.getIndex() for String.
java.text.StringCharacterIterator#equals(Object)->boolean:::Compares the equality of two StringCharacterIterator objects.
java.text.StringCharacterIterator#hashCode()->int:::Computes a hashcode for this iterator.
java.text.StringCharacterIterator#clone()->Object:::Creates a copy of this iterator.

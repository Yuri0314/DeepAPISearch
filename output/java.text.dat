Annotation#getValue():::Returns the value of the attribute, which may be null.
Annotation#toString():::Returns the String representation of this Annotation.
AttributedCharacterIterator.Attribute#equals(Object):::Compares two objects for equality
AttributedCharacterIterator.Attribute#hashCode():::Returns a hash code value for the object
AttributedCharacterIterator.Attribute#toString():::Returns a string representation of the object
AttributedCharacterIterator.Attribute#getName():::Returns the name of the attribute.
AttributedCharacterIterator.Attribute#readResolve():::Resolves instances being deserialized to the predefined constants.
AttributedCharacterIterator#getRunStart():::Returns the index of the first character of the run with respect to all attributes containing the current character
AttributedCharacterIterator#getRunStart(Attribute):::Returns the index of the first character of the run with respect to the given attribute containing the current character.
AttributedCharacterIterator#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.
AttributedCharacterIterator#getRunLimit():::Returns the index of the first character following the run with respect to all attributes containing the current character
AttributedCharacterIterator#getRunLimit(Attribute):::Returns the index of the first character following the run with respect to the given attribute containing the current character.
AttributedCharacterIterator#getRunLimit(Set):::Returns the index of the first character following the run with respect to the given attributes containing the current character.
AttributedCharacterIterator#getAttributes():::Returns a map with the attributes defined on the current character.
AttributedCharacterIterator#getAttribute(Attribute):::Returns the value of the named attribute for the current character
AttributedCharacterIterator#getAllAttributeKeys():::Returns the keys of all attributes defined on the iterator's text range
AttributedString#addAttribute(Attribute, Object):::Adds an attribute to the entire string.
AttributedString#addAttribute(Attribute, Object, int, int):::Adds an attribute to a subrange of the string.
AttributedString#addAttributes(Map, int, int):::Adds a set of attributes to a subrange of the string.
AttributedString#getIterator():::Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.
AttributedString#getIterator(Attribute[]):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
AttributedString#getIterator(Attribute[], int, int):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Bidi#createLineBidi(int, int):::Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi
Bidi#isMixed():::Return true if the line is not left-to-right or right-to-left
Bidi#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.
Bidi#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left.
Bidi#getLength():::Return the length of text in the line.
Bidi#baseIsLeftToRight():::Return true if the base direction is left-to-right.
Bidi#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).
Bidi#getLevelAt(int):::Return the resolved level of the character at offset
Bidi#getRunCount():::Return the number of level runs.
Bidi#getRunLevel(int):::Return the level of the nth logical run in this line.
Bidi#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.
Bidi#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line
Bidi#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis
Bidi#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels
Bidi#toString():::Display the bidi internal state, used in debugging.
BreakIterator#clone():::Create a copy of this iterator
BreakIterator#first():::Returns the first boundary
BreakIterator#last():::Returns the last boundary
BreakIterator#next(int):::Returns the nth boundary from the current boundary
BreakIterator#next():::Returns the boundary following the current boundary
BreakIterator#previous():::Returns the boundary preceding the current boundary
BreakIterator#following(int):::Returns the first boundary following the specified character offset
BreakIterator#preceding(int):::Returns the last boundary preceding the specified character offset
BreakIterator#isBoundary(int):::Returns true if the specified character offset is a text boundary.
BreakIterator#current():::Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)
BreakIterator#getText():::Get the text being scanned
BreakIterator#setText(String):::Set a new text string to be scanned
BreakIterator#setText(CharacterIterator):::Set a new text for scanning
BreakIterator#getWordInstance():::Returns a new BreakIterator instance for word breaks for the Locale#getDefault() default locale.
BreakIterator#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.
BreakIterator#getLineInstance():::Returns a new BreakIterator instance for line breaks for the Locale#getDefault() default locale.
BreakIterator#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.
BreakIterator#getCharacterInstance():::Returns a new BreakIterator instance for character breaks for the Locale#getDefault() default locale.
BreakIterator#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.
BreakIterator#getSentenceInstance():::Returns a new BreakIterator instance for sentence breaks for the Locale#getDefault() default locale.
BreakIterator#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.
BreakIterator#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
CharacterIterator#first():::Sets the position to getBeginIndex() and returns the character at that position.
CharacterIterator#last():::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.
CharacterIterator#current():::Gets the character at the current position (as returned by getIndex()).
CharacterIterator#next():::Increments the iterator's index by one and returns the character at the new index
CharacterIterator#previous():::Decrements the iterator's index by one and returns the character at the new index
CharacterIterator#setIndex(int):::Sets the position to the specified position in the text and returns that character.
CharacterIterator#getBeginIndex():::Returns the start index of the text.
CharacterIterator#getEndIndex():::Returns the end index of the text
CharacterIterator#getIndex():::Returns the current index.
CharacterIterator#clone():::Create a copy of this iterator
CharacterIteratorFieldDelegate#getIterator(String):::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.
ChoiceFormat#applyPattern(String):::Sets the pattern.
ChoiceFormat#toPattern():::Gets the pattern.
ChoiceFormat#setChoices(double[], String[]):::Set the choices to be used in formatting.
ChoiceFormat#getLimits():::Get the limits passed in the constructor.
ChoiceFormat#getFormats():::Get the formats passed in the constructor.
ChoiceFormat#format(long, StringBuffer, FieldPosition):::Specialization of format
ChoiceFormat#format(double, StringBuffer, FieldPosition):::Returns pattern with formatted double.
ChoiceFormat#parse(String, ParsePosition):::Parses a Number from the input text.
ChoiceFormat#nextDouble(double):::Finds the least double greater than d
ChoiceFormat#previousDouble(double):::Finds the greatest double less than d
ChoiceFormat#clone():::Overrides Cloneable
ChoiceFormat#hashCode():::Generates a hash code for the message format object.
ChoiceFormat#equals(Object):::Equality comparison between two
ChoiceFormat#nextDouble(double, boolean):::Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false)
CollationElementIterator#reset():::Resets the cursor to the beginning of the string
CollationElementIterator#next():::Get the next collation element in the string
CollationElementIterator#previous():::Get the previous collation element in the string
CollationElementIterator#primaryOrder(int):::Return the primary component of a collation element.
CollationElementIterator#secondaryOrder(int):::Return the secondary component of a collation element.
CollationElementIterator#tertiaryOrder(int):::Return the tertiary component of a collation element.
CollationElementIterator#strengthOrder(int)::: Get the comparison order in the desired strength
CollationElementIterator#setOffset(int):::Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements)
CollationElementIterator#getOffset():::Returns the character offset in the original text corresponding to the next collation element
CollationElementIterator#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.
CollationElementIterator#setText(String):::Set a new string over which to iterate.
CollationElementIterator#setText(CharacterIterator):::Set a new string over which to iterate.
CollationElementIterator#isIgnorable(int)::: Check if a comparison order is ignorable.
CollationKey#compareTo(CollationKey):::Compare this CollationKey to the target CollationKey
CollationKey#getSourceString():::Returns the String that this CollationKey represents.
CollationKey#toByteArray():::Converts the CollationKey to a sequence of bits
Collator#getInstance():::Gets the Collator for the current default locale
Collator#getInstance(Locale):::Gets the Collator for the desired locale.
Collator#compare(String, String):::Compares the source string to the target string according to the collation rules for this Collator
Collator#compare(Object, Object):::Compares its two arguments for order
Collator#getCollationKey(String):::Transforms the String into a series of bits that can be compared bitwise to other CollationKeys
Collator#equals(String, String):::Convenience method for comparing the equality of two strings based on this Collator's collation rules.
Collator#getStrength():::Returns this Collator's strength property
Collator#setStrength(int):::Sets this Collator's strength property
Collator#getDecomposition():::Get the decomposition mode of this Collator
Collator#setDecomposition(int):::Set the decomposition mode of this Collator
Collator#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
Collator#clone():::Overrides Cloneable
Collator#equals(Object):::Compares the equality of two Collators.
Collator#hashCode():::Generates the hash code for this Collator.
DateFormat#format(Object, StringBuffer, FieldPosition):::Formats the given Object into a date-time string
DateFormat#format(Date, StringBuffer, FieldPosition):::Formats a Date into a date-time string
DateFormat#format(Date):::Formats a Date into a date-time string.
DateFormat#parse(String):::Parses text from the beginning of the given string to produce a date
DateFormat#parse(String, ParsePosition):::Parse a date/time string according to the given parse position
DateFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Date
DateFormat#getTimeInstance():::Gets the time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getTimeInstance(int):::Gets the time formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getTimeInstance(int, Locale):::Gets the time formatter with the given formatting style for the given locale.
DateFormat#getDateInstance():::Gets the date formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateInstance(int):::Gets the date formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateInstance(int, Locale):::Gets the date formatter with the given formatting style for the given locale.
DateFormat#getDateTimeInstance():::Gets the date/time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateTimeInstance(int, int):::Gets the date/time formatter with the given date and time formatting styles for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateTimeInstance(int, int, Locale):::Gets the date/time formatter with the given formatting styles for the given locale.
DateFormat#getInstance():::Get a default date/time formatter that uses the SHORT style for both the date and the time.
DateFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
DateFormat#setCalendar(Calendar):::Set the calendar to be used by this date format
DateFormat#getCalendar():::Gets the calendar associated with this date/time formatter.
DateFormat#setNumberFormat(NumberFormat):::Allows you to set the number formatter.
DateFormat#getNumberFormat():::Gets the number formatter which this date/time formatter uses to format and parse a time.
DateFormat#setTimeZone(TimeZone):::Sets the time zone for the calendar of this DateFormat object
DateFormat#getTimeZone():::Gets the time zone
DateFormat#setLenient(boolean):::Specify whether or not date/time parsing is to be lenient
DateFormat#isLenient():::Tell whether date/time parsing is to be lenient
DateFormat#hashCode():::Overrides hashCode
DateFormat#equals(Object):::Overrides equals
DateFormat#clone():::Overrides Cloneable
DateFormat.Field#ofCalendarField(int):::Returns the Field constant that corresponds to the Calendar constant calendarField
DateFormat.Field#getCalendarField():::Returns the Calendar field associated with this attribute
DateFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
DateFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
DateFormatSymbols#getInstance():::Gets the DateFormatSymbols instance for the default locale
DateFormatSymbols#getInstance(Locale):::Gets the DateFormatSymbols instance for the specified locale
DateFormatSymbols#getInstanceRef(Locale):::Returns a DateFormatSymbols provided by a provider or found in the cache
DateFormatSymbols#getEras():::Gets era strings
DateFormatSymbols#setEras(String[]):::Sets era strings
DateFormatSymbols#getMonths():::Gets month strings
DateFormatSymbols#setMonths(String[]):::Sets month strings
DateFormatSymbols#getShortMonths():::Gets short month strings
DateFormatSymbols#setShortMonths(String[]):::Sets short month strings
DateFormatSymbols#getWeekdays():::Gets weekday strings
DateFormatSymbols#setWeekdays(String[]):::Sets weekday strings
DateFormatSymbols#getShortWeekdays():::Gets short weekday strings
DateFormatSymbols#setShortWeekdays(String[]):::Sets short weekday strings
DateFormatSymbols#getAmPmStrings():::Gets ampm strings
DateFormatSymbols#setAmPmStrings(String[]):::Sets ampm strings
DateFormatSymbols#getZoneStrings():::Gets time zone strings
DateFormatSymbols#setZoneStrings(String[][]):::Sets time zone strings
DateFormatSymbols#getLocalPatternChars():::Gets localized date-time pattern characters
DateFormatSymbols#setLocalPatternChars(String):::Sets localized date-time pattern characters
DateFormatSymbols#clone():::Overrides Cloneable
DateFormatSymbols#hashCode():::Override hashCode
DateFormatSymbols#equals(Object):::Override equals
DateFormatSymbols#getZoneIndex(String):::Package private: used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting
DateFormatSymbols#getZoneStringsWrapper():::Wrapper method to the getZoneStrings(), which is called from inside the java.text package and not to mutate the returned arrays, so that it does not need to create a defensive copy.
DecimalFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer
DecimalFormat#format(double, StringBuffer, FieldPosition):::Formats a double to produce a string.
DecimalFormat#format(long, StringBuffer, FieldPosition):::Format a long to produce a string.
DecimalFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
DecimalFormat#fastFormat(double):::A fast-path shortcut of format(double) to be called by NumberFormat, or by format(double, ...) public methods
DecimalFormat#parse(String, ParsePosition):::Parses text from a string to produce a Number
DecimalFormat#getDecimalFormatSymbols():::Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.
DecimalFormat#setDecimalFormatSymbols(DecimalFormatSymbols):::Sets the decimal format symbols, which is generally not changed by the programmer or user.
DecimalFormat#getPositivePrefix():::Get the positive prefix
DecimalFormat#setPositivePrefix(String):::Set the positive prefix
DecimalFormat#getNegativePrefix():::Get the negative prefix
DecimalFormat#setNegativePrefix(String):::Set the negative prefix
DecimalFormat#getPositiveSuffix():::Get the positive suffix
DecimalFormat#setPositiveSuffix(String):::Set the positive suffix
DecimalFormat#getNegativeSuffix():::Get the negative suffix
DecimalFormat#setNegativeSuffix(String):::Set the negative suffix
DecimalFormat#getMultiplier():::Gets the multiplier for use in percent, per mille, and similar formats.
DecimalFormat#setMultiplier(int):::Sets the multiplier for use in percent, per mille, and similar formats
DecimalFormat#getGroupingSize():::Return the grouping size
DecimalFormat#setGroupingSize(int):::Set the grouping size
DecimalFormat#isDecimalSeparatorAlwaysShown():::Allows you to get the behavior of the decimal separator with integers
DecimalFormat#setDecimalSeparatorAlwaysShown(boolean):::Allows you to set the behavior of the decimal separator with integers
DecimalFormat#isParseBigDecimal():::Returns whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal
DecimalFormat#setParseBigDecimal(boolean):::Sets whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.
DecimalFormat#clone():::Standard override; no change in semantics.
DecimalFormat#equals(Object):::Overrides equals
DecimalFormat#hashCode():::Overrides hashCode
DecimalFormat#toPattern():::Synthesizes a pattern string that represents the current state of this Format object.
DecimalFormat#toLocalizedPattern():::Synthesizes a localized pattern string that represents the current state of this Format object.
DecimalFormat#applyPattern(String):::Apply the given pattern to this Format object
DecimalFormat#applyLocalizedPattern(String):::Apply the given pattern to this Format object
DecimalFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number
DecimalFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number
DecimalFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number
DecimalFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number
DecimalFormat#getMaximumIntegerDigits():::Gets the maximum number of digits allowed in the integer portion of a number
DecimalFormat#getMinimumIntegerDigits():::Gets the minimum number of digits allowed in the integer portion of a number
DecimalFormat#getMaximumFractionDigits():::Gets the maximum number of digits allowed in the fraction portion of a number
DecimalFormat#getMinimumFractionDigits():::Gets the minimum number of digits allowed in the fraction portion of a number
DecimalFormat#getCurrency():::Gets the currency used by this decimal format when formatting currency values
DecimalFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values
DecimalFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this DecimalFormat.
DecimalFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this DecimalFormat.
DecimalFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
DecimalFormatSymbols#getInstance():::Gets the DecimalFormatSymbols instance for the default locale
DecimalFormatSymbols#getInstance(Locale):::Gets the DecimalFormatSymbols instance for the specified locale
DecimalFormatSymbols#getZeroDigit():::Gets the character used for zero
DecimalFormatSymbols#setZeroDigit(char):::Sets the character used for zero
DecimalFormatSymbols#getGroupingSeparator():::Gets the character used for thousands separator
DecimalFormatSymbols#setGroupingSeparator(char):::Sets the character used for thousands separator
DecimalFormatSymbols#getDecimalSeparator():::Gets the character used for decimal sign
DecimalFormatSymbols#setDecimalSeparator(char):::Sets the character used for decimal sign
DecimalFormatSymbols#getPerMill():::Gets the character used for per mille sign
DecimalFormatSymbols#setPerMill(char):::Sets the character used for per mille sign
DecimalFormatSymbols#getPercent():::Gets the character used for percent sign
DecimalFormatSymbols#setPercent(char):::Sets the character used for percent sign
DecimalFormatSymbols#getDigit():::Gets the character used for a digit in a pattern.
DecimalFormatSymbols#setDigit(char):::Sets the character used for a digit in a pattern.
DecimalFormatSymbols#getPatternSeparator():::Gets the character used to separate positive and negative subpatterns in a pattern.
DecimalFormatSymbols#setPatternSeparator(char):::Sets the character used to separate positive and negative subpatterns in a pattern.
DecimalFormatSymbols#getInfinity():::Gets the string used to represent infinity
DecimalFormatSymbols#setInfinity(String):::Sets the string used to represent infinity
DecimalFormatSymbols#getNaN():::Gets the string used to represent "not a number"
DecimalFormatSymbols#setNaN(String):::Sets the string used to represent "not a number"
DecimalFormatSymbols#getMinusSign():::Gets the character used to represent minus sign
DecimalFormatSymbols#setMinusSign(char):::Sets the character used to represent minus sign
DecimalFormatSymbols#getCurrencySymbol():::Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.
DecimalFormatSymbols#setCurrencySymbol(String):::Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.
DecimalFormatSymbols#getInternationalCurrencySymbol():::Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.
DecimalFormatSymbols#setInternationalCurrencySymbol(String):::Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols
DecimalFormatSymbols#getCurrency():::Gets the currency of these DecimalFormatSymbols
DecimalFormatSymbols#setCurrency(Currency):::Sets the currency of these DecimalFormatSymbols
DecimalFormatSymbols#getMonetaryDecimalSeparator():::Returns the monetary decimal separator.
DecimalFormatSymbols#setMonetaryDecimalSeparator(char):::Sets the monetary decimal separator.
DecimalFormatSymbols#getExponentialSymbol():::Returns the character used to separate the mantissa from the exponent.
DecimalFormatSymbols#getExponentSeparator():::Returns the string used to separate the mantissa from the exponent
DecimalFormatSymbols#setExponentialSymbol(char):::Sets the character used to separate the mantissa from the exponent.
DecimalFormatSymbols#setExponentSeparator(String):::Sets the string used to separate the mantissa from the exponent
DecimalFormatSymbols#clone():::Standard override.
DecimalFormatSymbols#equals(Object):::Override equals.
DecimalFormatSymbols#hashCode():::Override hashCode.
DigitList#isZero():::Return true if the represented number is zero.
DigitList#setRoundingMode(RoundingMode):::Set the rounding mode
DigitList#clear():::Clears out the digits
DigitList#append(char):::Appends a digit to the list, extending the list when necessary.
DigitList#getDouble():::Utility routine to get the value of the digit list If (count == 0) this throws a NumberFormatException, which mimics Long.parseLong().
DigitList#getLong():::Utility routine to get the value of the digit list
DigitList#fitsIntoLong(boolean, boolean):::Return true if the number represented by this object can fit into a long.
DigitList#set(boolean, double, int):::Set the digit list to a representation of the given double value
DigitList#set(boolean, double, int, boolean):::Set the digit list to a representation of the given double value
DigitList#set(boolean, long):::Utility routine to set the value of the digit list from a long
DigitList#set(boolean, long, int):::Set the digit list to a representation of the given long value.
DigitList#set(boolean, BigDecimal, int, boolean):::Set the digit list to a representation of the given BigDecimal value
DigitList#set(boolean, BigInteger, int):::Set the digit list to a representation of the given BigInteger value.
DigitList#equals(Object):::equality test between two digit lists.
DigitList#hashCode():::Generates the hash code for the digit list.
DigitList#clone():::Creates a copy of this object.
FieldPosition#getFieldAttribute():::Returns the field identifier as an attribute constant from one of the Field subclasses
FieldPosition#getField():::Retrieves the field identifier.
FieldPosition#getBeginIndex():::Retrieves the index of the first character in the requested field.
FieldPosition#getEndIndex():::Retrieves the index of the character following the last character in the requested field.
FieldPosition#setBeginIndex(int):::Sets the begin index
FieldPosition#setEndIndex(int):::Sets the end index
FieldPosition#getFieldDelegate():::Returns a Format.FieldDelegate instance that is associated with the FieldPosition
FieldPosition#equals(Object):::Overrides equals
FieldPosition#hashCode():::Returns a hash code for this FieldPosition.
FieldPosition#toString():::Return a string representation of this FieldPosition.
Format#format(Object):::Formats an object to produce a string
Format#format(Object, StringBuffer, FieldPosition):::Formats an object and appends the resulting text to a given string buffer
Format#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
Format#parseObject(String, ParsePosition):::Parses text from a string to produce an object
Format#parseObject(String):::Parses text from the beginning of the given string to produce an object
Format#clone():::Creates and returns a copy of this object.
Format#createAttributedCharacterIterator(String):::Creates an AttributedCharacterIterator for the String s.
Format#createAttributedCharacterIterator(AttributedCharacterIterator[]):::Creates an AttributedCharacterIterator containing the concatenated contents of the passed in AttributedCharacterIterators.
Format#createAttributedCharacterIterator(String, AttributedCharacterIterator.Attribute, Object):::Returns an AttributedCharacterIterator with the String string and additional key/value pair key, value.
Format#createAttributedCharacterIterator(AttributedCharacterIterator, AttributedCharacterIterator.Attribute, Object):::Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value.
Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted
Format.FieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted.
MergeCollation#getPattern():::recovers current pattern
MergeCollation#getPattern(boolean):::recovers current pattern.
MergeCollation#emitPattern():::emits the pattern for collation builder.
MergeCollation#emitPattern(boolean):::emits the pattern for collation builder.
MergeCollation#setPattern(String):::sets the pattern.
MergeCollation#addPattern(String):::adds a pattern to the current one.
MergeCollation#getCount():::gets count of separate entries
MergeCollation#getItemAt(int):::gets count of separate entries
MessageFormat#setLocale(Locale):::Sets the locale to be used when creating or comparing subformats
MessageFormat#getLocale():::Gets the locale that's used when creating or comparing subformats.
MessageFormat#applyPattern(String):::Sets the pattern used by this message format
MessageFormat#toPattern():::Returns a pattern representing the current state of the message format
MessageFormat#setFormatsByArgumentIndex(Format[]):::Sets the formats to use for the values passed into format methods or returned from parse methods
MessageFormat#setFormats(Format[]):::Sets the formats to use for the format elements in the previously set pattern string
MessageFormat#setFormatByArgumentIndex(int, Format):::Sets the format to use for the format elements within the previously set pattern string that use the given argument index
MessageFormat#setFormat(int, Format):::Sets the format to use for the format element with the given format element index within the previously set pattern string
MessageFormat#getFormatsByArgumentIndex():::Gets the formats used for the values passed into format methods or returned from parse methods
MessageFormat#getFormats():::Gets the formats used for the format elements in the previously set pattern string
MessageFormat#format(Object[], StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
MessageFormat#format(String, Object...):::Creates a MessageFormat with the given pattern and uses it to format the given arguments
MessageFormat#format(Object, StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
MessageFormat#formatToCharacterIterator(Object):::Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator
MessageFormat#parse(String, ParsePosition):::Parses the string
MessageFormat#parse(String):::Parses text from the beginning of the given string to produce an object array
MessageFormat#parseObject(String, ParsePosition):::Parses text from a string to produce an object array
MessageFormat#clone():::Creates and returns a copy of this object.
MessageFormat#equals(Object):::Equality comparison between two message format objects
MessageFormat#hashCode():::Generates a hash code for the message format object.
MessageFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
Normalizer#normalize(CharSequence, Form):::Normalize a sequence of char values
Normalizer#isNormalized(CharSequence, Form):::Determines if the given sequence of char values is normalized.
NumberFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer
NumberFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Number
NumberFormat#format(double):::Specialization of format.
NumberFormat#format(long):::Specialization of format.
NumberFormat#format(double, StringBuffer, FieldPosition):::Specialization of format.
NumberFormat#format(long, StringBuffer, FieldPosition):::Specialization of format.
NumberFormat#parse(String, ParsePosition):::Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double
NumberFormat#parse(String):::Parses text from the beginning of the given string to produce a number
NumberFormat#isParseIntegerOnly():::Returns true if this format will parse numbers as integers only
NumberFormat#setParseIntegerOnly(boolean):::Sets whether or not numbers should be parsed as integers only.
NumberFormat#getInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getInstance(Locale):::Returns a general-purpose number format for the specified locale
NumberFormat#getNumberInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getNumberInstance(Locale):::Returns a general-purpose number format for the specified locale.
NumberFormat#getIntegerInstance():::Returns an integer number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getIntegerInstance(Locale):::Returns an integer number format for the specified locale
NumberFormat#getCurrencyInstance():::Returns a currency format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getCurrencyInstance(Locale):::Returns a currency format for the specified locale.
NumberFormat#getPercentInstance():::Returns a percentage format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getPercentInstance(Locale):::Returns a percentage format for the specified locale.
NumberFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
NumberFormat#hashCode():::Overrides hashCode.
NumberFormat#equals(Object):::Overrides equals.
NumberFormat#clone():::Overrides Cloneable.
NumberFormat#isGroupingUsed():::Returns true if grouping is used in this format
NumberFormat#setGroupingUsed(boolean):::Set whether or not grouping will be used in this format.
NumberFormat#getMaximumIntegerDigits():::Returns the maximum number of digits allowed in the integer portion of a number.
NumberFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number
NumberFormat#getMinimumIntegerDigits():::Returns the minimum number of digits allowed in the integer portion of a number.
NumberFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number
NumberFormat#getMaximumFractionDigits():::Returns the maximum number of digits allowed in the fraction portion of a number.
NumberFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number
NumberFormat#getMinimumFractionDigits():::Returns the minimum number of digits allowed in the fraction portion of a number.
NumberFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number
NumberFormat#getCurrency():::Gets the currency used by this number format when formatting currency values
NumberFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values
NumberFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this NumberFormat
NumberFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this NumberFormat
NumberFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
ParseException#getErrorOffset():::Returns the position where the error was found.
ParsePosition#getIndex():::Retrieve the current parse position
ParsePosition#setIndex(int):::Set the current parse position.
ParsePosition#setErrorIndex(int):::Set the index at which a parse error occurred
ParsePosition#getErrorIndex():::Retrieve the index at which an error occurred, or -1 if the error index has not been set.
ParsePosition#equals(Object):::Overrides equals
ParsePosition#hashCode():::Returns a hash code for this ParsePosition.
ParsePosition#toString():::Return a string representation of this ParsePosition.
PatternEntry#appendQuotedExtension(StringBuffer):::Gets the current extension, quoted
PatternEntry#appendQuotedChars(StringBuffer):::Gets the current chars, quoted
PatternEntry#equals(Object):::WARNING this is used for searching in a Vector
PatternEntry#toString():::For debugging.
PatternEntry#getStrength():::Gets the strength of the entry.
PatternEntry#getExtension():::Gets the expanding characters of the entry.
PatternEntry#getChars():::Gets the core characters of the entry.
RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short):::This function is used by RBTableBuilder to fill in all the members of this object
RBCollationTables#getRules():::Gets the table-based rules for the collation object.
RBCollationTables#getContractValues(int)::: Get the entry of hash table of the contracting string in the collation  table.
RBCollationTables#usedInContractSeq(int):::Returns true if this character appears anywhere in a contracting character sequence
RBCollationTables#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.
RBCollationTables#getExpandValueList(int):::Get the entry of hash table of the expanding string in the collation table.
RBCollationTables#getUnicodeOrder(int):::Get the comarison order of a character from the collation table.
RuleBasedCollationKey#compareTo(CollationKey):::Compare this RuleBasedCollationKey to target
RuleBasedCollationKey#equals(Object):::Compare this RuleBasedCollationKey and the target for equality
RuleBasedCollationKey#hashCode():::Creates a hash code for this RuleBasedCollationKey
RuleBasedCollationKey#toByteArray():::Converts the RuleBasedCollationKey to a sequence of bits
RuleBasedCollator#getRules():::Gets the table-based rules for the collation object.
RuleBasedCollator#getCollationElementIterator(String):::Returns a CollationElementIterator for the given String.
RuleBasedCollator#getCollationElementIterator(CharacterIterator):::Returns a CollationElementIterator for the given CharacterIterator.
RuleBasedCollator#compare(String, String):::Compares the character data stored in two different strings based on the collation rules
RuleBasedCollator#getCollationKey(String):::Transforms the string into a series of characters that can be compared with CollationKey.compareTo
RuleBasedCollator#clone():::Standard override; no change in semantics.
RuleBasedCollator#equals(Object):::Compares the equality of two collation objects.
RuleBasedCollator#hashCode():::Generates the hash code for the table-based collation object
RuleBasedCollator#getTables():::Allows CollationElementIterator access to the tables object
SimpleDateFormat#set2DigitYearStart(Date):::Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.
SimpleDateFormat#get2DigitYearStart():::Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.
SimpleDateFormat#format(Date, StringBuffer, FieldPosition):::Formats the given Date into a date/time string and appends the result to the given StringBuffer.
SimpleDateFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
SimpleDateFormat#parse(String, ParsePosition):::Parses text from a string to produce a Date
SimpleDateFormat#toPattern():::Returns a pattern string describing this date format.
SimpleDateFormat#toLocalizedPattern():::Returns a localized pattern string describing this date format.
SimpleDateFormat#applyPattern(String):::Applies the given pattern string to this date format.
SimpleDateFormat#applyLocalizedPattern(String):::Applies the given localized pattern string to this date format.
SimpleDateFormat#getDateFormatSymbols():::Gets a copy of the date and time format symbols of this date format.
SimpleDateFormat#setDateFormatSymbols(DateFormatSymbols):::Sets the date and time format symbols of this date format.
SimpleDateFormat#clone():::Creates a copy of this SimpleDateFormat
SimpleDateFormat#hashCode():::Returns the hash code value for this SimpleDateFormat object.
SimpleDateFormat#equals(Object):::Compares the given object with this SimpleDateFormat for equality.
StringCharacterIterator#setText(String):::Reset this iterator to point to a new string
StringCharacterIterator#first():::Implements CharacterIterator.first() for String.
StringCharacterIterator#last():::Implements CharacterIterator.last() for String.
StringCharacterIterator#setIndex(int):::Implements CharacterIterator.setIndex() for String.
StringCharacterIterator#current():::Implements CharacterIterator.current() for String.
StringCharacterIterator#next():::Implements CharacterIterator.next() for String.
StringCharacterIterator#previous():::Implements CharacterIterator.previous() for String.
StringCharacterIterator#getBeginIndex():::Implements CharacterIterator.getBeginIndex() for String.
StringCharacterIterator#getEndIndex():::Implements CharacterIterator.getEndIndex() for String.
StringCharacterIterator#getIndex():::Implements CharacterIterator.getIndex() for String.
StringCharacterIterator#equals(Object):::Compares the equality of two StringCharacterIterator objects.
StringCharacterIterator#hashCode():::Computes a hashcode for this iterator.
StringCharacterIterator#clone():::Creates a copy of this iterator.

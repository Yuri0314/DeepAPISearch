Annotation#getValue():::Returns the value of the attribute, which may be null.:::
Annotation#toString():::Returns the String representation of this Annotation.:::getClass().getName
AttributedCharacterIterator.Attribute#equals(Object):::Compares two objects for equality:::super.equals
AttributedCharacterIterator.Attribute#hashCode():::Returns a hash code value for the object:::super.hashCode
AttributedCharacterIterator.Attribute#toString():::Returns a string representation of the object:::getClass().getName
AttributedCharacterIterator.Attribute#getName():::Returns the name of the attribute.:::
AttributedCharacterIterator.Attribute#readResolve():::Resolves instances being deserialized to the predefined constants.:::this.getClass->this.getName->instanceMap.get
AttributedCharacterIterator#getRunStart():::Returns the index of the first character of the run with respect to all attributes containing the current character:::
AttributedCharacterIterator#getRunStart(Attribute):::Returns the index of the first character of the run with respect to the given attribute containing the current character.:::
AttributedCharacterIterator#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.:::
AttributedCharacterIterator#getRunLimit():::Returns the index of the first character following the run with respect to all attributes containing the current character:::
AttributedCharacterIterator#getRunLimit(Attribute):::Returns the index of the first character following the run with respect to the given attribute containing the current character.:::
AttributedCharacterIterator#getRunLimit(Set):::Returns the index of the first character following the run with respect to the given attributes containing the current character.:::
AttributedCharacterIterator#getAttributes():::Returns a map with the attributes defined on the current character.:::
AttributedCharacterIterator#getAttribute(Attribute):::Returns the value of the named attribute for the current character:::
AttributedCharacterIterator#getAllAttributeKeys():::Returns the keys of all attributes defined on the iterator's text range:::
AttributedString#addAttribute(Attribute, Object):::Adds an attribute to the entire string.:::this.length->this.addAttributeImpl
AttributedString#addAttribute(Attribute, Object, int, int):::Adds an attribute to a subrange of the string.:::this.length->this.addAttributeImpl
AttributedString#addAttributes(Map, int, int):::Adds a set of attributes to a subrange of the string.:::this.length->attributes.isEmpty->this.createRunAttributeDataVectors->this.ensureRunBreak->this.ensureRunBreak->attributes.entrySet().iterator->iterator.next->entry.getKey->entry.getValue->this.addAttributeRunData->iterator.hasNext
AttributedString#getIterator():::Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.:::this.length->this.getIterator
AttributedString#getIterator(Attribute[]):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string:::this.length->this.getIterator
AttributedString#getIterator(Attribute[], int, int):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string:::
Bidi#createLineBidi(int, int):::Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi:::astr.getIterator->bidiBase.setLine
Bidi#isMixed():::Return true if the line is not left-to-right or right-to-left:::bidiBase.isMixed
Bidi#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.:::bidiBase.isLeftToRight
Bidi#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left.:::bidiBase.isRightToLeft
Bidi#getLength():::Return the length of text in the line.:::bidiBase.getLength
Bidi#baseIsLeftToRight():::Return true if the base direction is left-to-right.:::bidiBase.baseIsLeftToRight
Bidi#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).:::bidiBase.getParaLevel
Bidi#getLevelAt(int):::Return the resolved level of the character at offset:::bidiBase.getLevelAt
Bidi#getRunCount():::Return the number of level runs.:::bidiBase.countRuns
Bidi#getRunLevel(int):::Return the level of the nth logical run in this line.:::bidiBase.getRunLevel
Bidi#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.:::bidiBase.getRunStart
Bidi#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line:::bidiBase.getRunLimit
Bidi#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis:::BidiBase.requiresBidi
Bidi#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels:::BidiBase.reorderVisually
Bidi#toString():::Display the bidi internal state, used in debugging.:::bidiBase.toString
BreakIterator#clone():::Create a copy of this iterator:::super.clone
BreakIterator#first():::Returns the first boundary:::
BreakIterator#last():::Returns the last boundary:::
BreakIterator#next(int):::Returns the nth boundary from the current boundary:::
BreakIterator#next():::Returns the boundary following the current boundary:::
BreakIterator#previous():::Returns the boundary preceding the current boundary:::
BreakIterator#following(int):::Returns the first boundary following the specified character offset:::
BreakIterator#preceding(int):::Returns the last boundary preceding the specified character offset:::this.following->this.previous
BreakIterator#isBoundary(int):::Returns true if the specified character offset is a text boundary.:::this.following
BreakIterator#current():::Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int):::
BreakIterator#getText():::Get the text being scanned:::
BreakIterator#setText(String):::Set a new text string to be scanned:::this.setText
BreakIterator#setText(CharacterIterator):::Set a new text for scanning:::
BreakIterator#getWordInstance():::Returns a new BreakIterator instance for word breaks for the Locale#getDefault() default locale.:::Locale.getDefault->this.getWordInstance
BreakIterator#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.:::this.getBreakInstance
BreakIterator#getLineInstance():::Returns a new BreakIterator instance for line breaks for the Locale#getDefault() default locale.:::Locale.getDefault->this.getLineInstance
BreakIterator#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.:::this.getBreakInstance
BreakIterator#getCharacterInstance():::Returns a new BreakIterator instance for character breaks for the Locale#getDefault() default locale.:::Locale.getDefault->this.getCharacterInstance
BreakIterator#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.:::this.getBreakInstance
BreakIterator#getSentenceInstance():::Returns a new BreakIterator instance for sentence breaks for the Locale#getDefault() default locale.:::Locale.getDefault->this.getSentenceInstance
BreakIterator#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.:::this.getBreakInstance
BreakIterator#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
CharacterIterator#first():::Sets the position to getBeginIndex() and returns the character at that position.:::
CharacterIterator#last():::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.:::
CharacterIterator#current():::Gets the character at the current position (as returned by getIndex()).:::
CharacterIterator#next():::Increments the iterator's index by one and returns the character at the new index:::
CharacterIterator#previous():::Decrements the iterator's index by one and returns the character at the new index:::
CharacterIterator#setIndex(int):::Sets the position to the specified position in the text and returns that character.:::
CharacterIterator#getBeginIndex():::Returns the start index of the text.:::
CharacterIterator#getEndIndex():::Returns the end index of the text:::
CharacterIterator#getIndex():::Returns the current index.:::
CharacterIterator#clone():::Create a copy of this iterator:::
CharacterIteratorFieldDelegate#getIterator(String):::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.:::string.length->attributedStrings.add->string.length->attributedStrings.size->attributedStrings.get(counter).getIterator->new AttributedString(iterators).getIterator
ChoiceFormat#applyPattern(String):::Sets the pattern.:::newPattern.charAt->segments[part].append->this.doubleArraySize->this.doubleArraySize->segments[1].toString->segments[1].setLength->segments[0].length->segments[0].toString->tempBuffer.equals->tempBuffer.equals->Double.parseDouble->this.nextDouble->segments[0].setLength->segments[part].append->newPattern.length->newPattern.charAt->segments[part].append->newPattern.length->this.doubleArraySize->this.doubleArraySize->segments[1].toString->System.arraycopy->System.arraycopy
ChoiceFormat#toPattern():::Gets the pattern.:::result.append->this.previousDouble->Math.IEEEremainder->Math.abs->Math.IEEEremainder->Math.abs->result.append->result.append->result.append->result.append->result.append->result.append->text.indexOf->text.indexOf->text.indexOf->text.indexOf->result.append->text.indexOf->text.charAt->result.append->result.append->text.length->result.append->result.append->result.toString
ChoiceFormat#setChoices(double[], String[]):::Set the choices to be used in formatting.:::Arrays.copyOf->Arrays.copyOf
ChoiceFormat#getLimits():::Get the limits passed in the constructor.:::Arrays.copyOf
ChoiceFormat#getFormats():::Get the formats passed in the constructor.:::Arrays.copyOf
ChoiceFormat#format(long, StringBuffer, FieldPosition):::Specialization of format:::this.format
ChoiceFormat#format(double, StringBuffer, FieldPosition):::Returns pattern with formatted double.:::toAppendTo.append
ChoiceFormat#parse(String, ParsePosition):::Parses a Number from the input text.:::tempString.length->text.regionMatches->tempString.length->text.length->Double.valueOf
ChoiceFormat#nextDouble(double):::Finds the least double greater than d:::this.nextDouble
ChoiceFormat#previousDouble(double):::Finds the greatest double less than d:::this.nextDouble
ChoiceFormat#clone():::Overrides Cloneable:::super.clone->choiceLimits.clone->choiceFormats.clone
ChoiceFormat#hashCode():::Generates a hash code for the message format object.:::choiceFormats[choiceFormats.length - 1].hashCode
ChoiceFormat#equals(Object):::Equality comparison between two:::this.getClass->obj.getClass->Arrays.equals->Arrays.equals
ChoiceFormat#nextDouble(double, boolean):::Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false):::Double.isNaN->Double.longBitsToDouble->Double.doubleToLongBits->Double.longBitsToDouble
CollationElementIterator#reset():::Resets the cursor to the beginning of the string:::text.reset->owner.getDecomposition->CollatorUtilities.toNormalizerMode->text.setMode
CollationElementIterator#next():::Get the next collation element in the string:::text.getMode->owner.getDecomposition->CollatorUtilities.toNormalizerMode->text.setMode->Character.isSupplementaryCodePoint->Character.toChars->this.strengthOrder->text.next->ordering.getUnicodeOrder->this.nextContractChar->ordering.getExpandValueList->ordering.isSEAsianSwapping->this.isThaiPreVowel->text.next->this.isThaiBaseConsonant->text.previous->this.makeReorderedBuffer->this.isLaoPreVowel->text.next->this.isLaoBaseConsonant->text.previous->this.makeReorderedBuffer->this.strengthOrder
CollationElementIterator#previous():::Get the previous collation element in the string:::text.getMode->owner.getDecomposition->CollatorUtilities.toNormalizerMode->text.setMode->Character.isSupplementaryCodePoint->Character.toChars->this.strengthOrder->text.previous->ordering.getUnicodeOrder->this.prevContractChar->ordering.getExpandValueList->ordering.isSEAsianSwapping->this.isThaiBaseConsonant->text.previous->this.isThaiPreVowel->text.next->this.makeReorderedBuffer->this.isLaoBaseConsonant->text.previous->this.isLaoPreVowel->text.next->this.makeReorderedBuffer->this.strengthOrder
CollationElementIterator#primaryOrder(int):::Return the primary component of a collation element.:::
CollationElementIterator#secondaryOrder(int):::Return the secondary component of a collation element.:::
CollationElementIterator#tertiaryOrder(int):::Return the tertiary component of a collation element.:::
CollationElementIterator#strengthOrder(int)::: Get the comparison order in the desired strength:::owner.getStrength
CollationElementIterator#setOffset(int):::Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements):::text.getBeginIndex->text.getEndIndex->text.setIndex->ordering.usedInContractSeq->text.previous->ordering.usedInContractSeq->text.getIndex->text.getIndex->this.next->text.getIndex->text.setIndexOnly->text.setIndexOnly
CollationElementIterator#getOffset():::Returns the character offset in the original text corresponding to the next collation element:::text.getIndex
CollationElementIterator#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.:::ordering.getMaxExpansion
CollationElementIterator#setText(String):::Set a new string over which to iterate.:::owner.getDecomposition->CollatorUtilities.toNormalizerMode->text.setMode->text.setText
CollationElementIterator#setText(CharacterIterator):::Set a new string over which to iterate.:::owner.getDecomposition->CollatorUtilities.toNormalizerMode->text.setMode->text.setText
CollationElementIterator#isIgnorable(int)::: Check if a comparison order is ignorable.:::this.primaryOrder
CollationKey#compareTo(CollationKey):::Compare this CollationKey to the target CollationKey:::
CollationKey#getSourceString():::Returns the String that this CollationKey represents.:::
CollationKey#toByteArray():::Converts the CollationKey to a sequence of bits:::
Collator#getInstance():::Gets the Collator for the current default locale:::Locale.getDefault->this.getInstance
Collator#getInstance(Locale):::Gets the Collator for the desired locale.:::cache.get->ref.get->LocaleProviderAdapter.getAdapter->adapter.getCollatorProvider->provider.getInstance->LocaleProviderAdapter.forJRE().getCollatorProvider().getInstance->cache.remove->cache.putIfAbsent->ref.get->result.clone
Collator#compare(String, String):::Compares the source string to the target string according to the collation rules for this Collator:::
Collator#compare(Object, Object):::Compares its two arguments for order:::this.compare
Collator#getCollationKey(String):::Transforms the String into a series of bits that can be compared bitwise to other CollationKeys:::
Collator#equals(String, String):::Convenience method for comparing the equality of two strings based on this Collator's collation rules.:::this.compare
Collator#getStrength():::Returns this Collator's strength property:::
Collator#setStrength(int):::Sets this Collator's strength property:::
Collator#getDecomposition():::Get the decomposition mode of this Collator:::
Collator#setDecomposition(int):::Set the decomposition mode of this Collator:::
Collator#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
Collator#clone():::Overrides Cloneable:::super.clone
Collator#equals(Object):::Compares the equality of two Collators.:::this.getClass->that.getClass
Collator#hashCode():::Generates the hash code for this Collator.:::
DateFormat#format(Object, StringBuffer, FieldPosition):::Formats the given Object into a date-time string:::this.format->this.format
DateFormat#format(Date, StringBuffer, FieldPosition):::Formats a Date into a date-time string:::
DateFormat#format(Date):::Formats a Date into a date-time string.:::format(date, new StringBuffer(), DontCareFieldPosition.INSTANCE).toString
DateFormat#parse(String):::Parses text from the beginning of the given string to produce a date:::this.parse
DateFormat#parse(String, ParsePosition):::Parse a date/time string according to the given parse position:::
DateFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Date:::this.parse
DateFormat#getTimeInstance():::Gets the time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getTimeInstance(int):::Gets the time formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getTimeInstance(int, Locale):::Gets the time formatter with the given formatting style for the given locale.:::this.get
DateFormat#getDateInstance():::Gets the date formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getDateInstance(int):::Gets the date formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getDateInstance(int, Locale):::Gets the date formatter with the given formatting style for the given locale.:::this.get
DateFormat#getDateTimeInstance():::Gets the date/time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getDateTimeInstance(int, int):::Gets the date/time formatter with the given date and time formatting styles for the default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.get
DateFormat#getDateTimeInstance(int, int, Locale):::Gets the date/time formatter with the given formatting styles for the given locale.:::this.get
DateFormat#getInstance():::Get a default date/time formatter that uses the SHORT style for both the date and the time.:::this.getDateTimeInstance
DateFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
DateFormat#setCalendar(Calendar):::Set the calendar to be used by this date format:::
DateFormat#getCalendar():::Gets the calendar associated with this date/time formatter.:::
DateFormat#setNumberFormat(NumberFormat):::Allows you to set the number formatter.:::
DateFormat#getNumberFormat():::Gets the number formatter which this date/time formatter uses to format and parse a time.:::
DateFormat#setTimeZone(TimeZone):::Sets the time zone for the calendar of this DateFormat object:::calendar.setTimeZone
DateFormat#getTimeZone():::Gets the time zone:::calendar.getTimeZone
DateFormat#setLenient(boolean):::Specify whether or not date/time parsing is to be lenient:::calendar.setLenient
DateFormat#isLenient():::Tell whether date/time parsing is to be lenient:::calendar.isLenient
DateFormat#hashCode():::Overrides hashCode:::numberFormat.hashCode
DateFormat#equals(Object):::Overrides equals:::this.getClass->obj.getClass->calendar.getFirstDayOfWeek->other.calendar.getFirstDayOfWeek->calendar.getMinimalDaysInFirstWeek->other.calendar.getMinimalDaysInFirstWeek->calendar.isLenient->other.calendar.isLenient->other.calendar.getTimeZone->calendar.getTimeZone().equals->numberFormat.equals
DateFormat#clone():::Overrides Cloneable:::super.clone->calendar.clone->numberFormat.clone
DateFormat.Field#ofCalendarField(int):::Returns the Field constant that corresponds to the Calendar constant calendarField:::
DateFormat.Field#getCalendarField():::Returns the Calendar field associated with this attribute:::
DateFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::this.getClass->this.getName->instanceMap.get
DateFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
DateFormatSymbols#getInstance():::Gets the DateFormatSymbols instance for the default locale:::Locale.getDefault->this.getInstance
DateFormatSymbols#getInstance(Locale):::Gets the DateFormatSymbols instance for the specified locale:::this.getProviderInstance
DateFormatSymbols#getInstanceRef(Locale):::Returns a DateFormatSymbols provided by a provider or found in the cache:::this.getProviderInstance
DateFormatSymbols#getEras():::Gets era strings:::Arrays.copyOf
DateFormatSymbols#setEras(String[]):::Sets era strings:::Arrays.copyOf
DateFormatSymbols#getMonths():::Gets month strings:::Arrays.copyOf
DateFormatSymbols#setMonths(String[]):::Sets month strings:::Arrays.copyOf
DateFormatSymbols#getShortMonths():::Gets short month strings:::Arrays.copyOf
DateFormatSymbols#setShortMonths(String[]):::Sets short month strings:::Arrays.copyOf
DateFormatSymbols#getWeekdays():::Gets weekday strings:::Arrays.copyOf
DateFormatSymbols#setWeekdays(String[]):::Sets weekday strings:::Arrays.copyOf
DateFormatSymbols#getShortWeekdays():::Gets short weekday strings:::Arrays.copyOf
DateFormatSymbols#setShortWeekdays(String[]):::Sets short weekday strings:::Arrays.copyOf
DateFormatSymbols#getAmPmStrings():::Gets ampm strings:::Arrays.copyOf
DateFormatSymbols#setAmPmStrings(String[]):::Sets ampm strings:::Arrays.copyOf
DateFormatSymbols#getZoneStrings():::Gets time zone strings:::this.getZoneStringsImpl
DateFormatSymbols#setZoneStrings(String[][]):::Sets time zone strings:::Arrays.copyOf
DateFormatSymbols#getLocalPatternChars():::Gets localized date-time pattern characters:::
DateFormatSymbols#setLocalPatternChars(String):::Sets localized date-time pattern characters:::newLocalPatternChars.toString
DateFormatSymbols#clone():::Overrides Cloneable:::super.clone->this.copyMembers
DateFormatSymbols#hashCode():::Override hashCode:::Arrays.hashCode->Arrays.hashCode->Arrays.hashCode->Arrays.hashCode->Arrays.hashCode->Arrays.hashCode->this.getZoneStringsWrapper->Arrays.deepHashCode->Objects.hashCode
DateFormatSymbols#equals(Object):::Override equals:::this.getClass->obj.getClass->Arrays.equals->Arrays.equals->Arrays.equals->Arrays.equals->Arrays.equals->Arrays.equals->this.getZoneStringsWrapper->that.getZoneStringsWrapper->Arrays.deepEquals->localPatternChars.equals
DateFormatSymbols#getZoneIndex(String):::Package private: used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting:::this.getZoneStringsWrapper->ID.equals->ID.equals
DateFormatSymbols#getZoneStringsWrapper():::Wrapper method to the getZoneStrings(), which is called from inside the java.text package and not to mutate the returned arrays, so that it does not need to create a defensive copy.:::this.isSubclassObject->this.getZoneStringsImpl->this.getZoneStrings
DecimalFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer:::((BigInteger) number).bitLength->((Number) number).doubleValue->this.format->this.format->this.format->((Number) number).longValue->this.format
DecimalFormat#format(double, StringBuffer, FieldPosition):::Formats a double to produce a string.:::fieldPosition.setBeginIndex->fieldPosition.setEndIndex->this.fastFormat->result.append->fieldPosition.getFieldDelegate->this.format
DecimalFormat#format(long, StringBuffer, FieldPosition):::Format a long to produce a string.:::fieldPosition.setBeginIndex->fieldPosition.setEndIndex->fieldPosition.getFieldDelegate->this.format
DecimalFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::this.format->this.format->((Number) obj).longValue->this.format->((Number) obj).doubleValue->this.format->sb.toString->delegate.getIterator
DecimalFormat#fastFormat(double):::A fast-path shortcut of format(double) to be called by NumberFormat, or by format(double, ...) public methods:::this.checkAndSetFastPathStatus->Double.isFinite->Math.copySign->this.resetFastPathData->this.fastDoubleFormat
DecimalFormat#parse(String, ParsePosition):::Parses text from a string to produce a Number:::symbols.getNaN->symbols.getNaN().length->text.regionMatches->symbols.getNaN().length->Double.valueOf->this.subparse->Double.valueOf->Double.valueOf->digitList.isZero->Double.valueOf->Double.valueOf->Double.valueOf->this.isParseBigDecimal->this.isParseIntegerOnly->digitList.fitsIntoLong->digitList.getDouble->digitList.getLong->this.isParseIntegerOnly->digitList.getBigDecimal->this.getBigDecimalMultiplier->bigDecimalResult.divide->this.getBigDecimalMultiplier->bigDecimalResult.divide->bigDecimalResult.negate
DecimalFormat#getDecimalFormatSymbols():::Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.:::symbols.clone
DecimalFormat#setDecimalFormatSymbols(DecimalFormatSymbols):::Sets the decimal format symbols, which is generally not changed by the programmer or user.:::newSymbols.clone->this.expandAffixes
DecimalFormat#getPositivePrefix():::Get the positive prefix:::
DecimalFormat#setPositivePrefix(String):::Set the positive prefix:::
DecimalFormat#getNegativePrefix():::Get the negative prefix:::
DecimalFormat#setNegativePrefix(String):::Set the negative prefix:::
DecimalFormat#getPositiveSuffix():::Get the positive suffix:::
DecimalFormat#setPositiveSuffix(String):::Set the positive suffix:::
DecimalFormat#getNegativeSuffix():::Get the negative suffix:::
DecimalFormat#setNegativeSuffix(String):::Set the negative suffix:::
DecimalFormat#getMultiplier():::Gets the multiplier for use in percent, per mille, and similar formats.:::
DecimalFormat#setMultiplier(int):::Sets the multiplier for use in percent, per mille, and similar formats:::
DecimalFormat#getGroupingSize():::Return the grouping size:::
DecimalFormat#setGroupingSize(int):::Set the grouping size:::
DecimalFormat#isDecimalSeparatorAlwaysShown():::Allows you to get the behavior of the decimal separator with integers:::
DecimalFormat#setDecimalSeparatorAlwaysShown(boolean):::Allows you to set the behavior of the decimal separator with integers:::
DecimalFormat#isParseBigDecimal():::Returns whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal:::
DecimalFormat#setParseBigDecimal(boolean):::Sets whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.:::
DecimalFormat#clone():::Standard override; no change in semantics.:::super.clone->symbols.clone->digitList.clone
DecimalFormat#equals(Object):::Overrides equals:::super.equals->positivePrefix.equals->posPrefixPattern.equals->positiveSuffix.equals->posSuffixPattern.equals->negativePrefix.equals->negPrefixPattern.equals->negativeSuffix.equals->negSuffixPattern.equals->symbols.equals
DecimalFormat#hashCode():::Overrides hashCode:::super.hashCode->positivePrefix.hashCode
DecimalFormat#toPattern():::Synthesizes a pattern string that represents the current state of this Format object.:::this.toPattern
DecimalFormat#toLocalizedPattern():::Synthesizes a localized pattern string that represents the current state of this Format object.:::this.toPattern
DecimalFormat#applyPattern(String):::Apply the given pattern to this Format object:::this.applyPattern
DecimalFormat#applyLocalizedPattern(String):::Apply the given pattern to this Format object:::this.applyPattern
DecimalFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number:::Math.max->Math.min->super.setMaximumIntegerDigits->super.setMinimumIntegerDigits
DecimalFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number:::Math.max->Math.min->super.setMinimumIntegerDigits->super.setMaximumIntegerDigits
DecimalFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number:::Math.max->Math.min->super.setMaximumFractionDigits->super.setMinimumFractionDigits
DecimalFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number:::Math.max->Math.min->super.setMinimumFractionDigits->super.setMaximumFractionDigits
DecimalFormat#getMaximumIntegerDigits():::Gets the maximum number of digits allowed in the integer portion of a number:::
DecimalFormat#getMinimumIntegerDigits():::Gets the minimum number of digits allowed in the integer portion of a number:::
DecimalFormat#getMaximumFractionDigits():::Gets the maximum number of digits allowed in the fraction portion of a number:::
DecimalFormat#getMinimumFractionDigits():::Gets the minimum number of digits allowed in the fraction portion of a number:::
DecimalFormat#getCurrency():::Gets the currency used by this decimal format when formatting currency values:::symbols.getCurrency
DecimalFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values:::symbols.getCurrency->symbols.setCurrency->this.expandAffixes
DecimalFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this DecimalFormat.:::
DecimalFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this DecimalFormat.:::digitList.setRoundingMode
DecimalFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
DecimalFormatSymbols#getInstance():::Gets the DecimalFormatSymbols instance for the default locale:::Locale.getDefault->this.getInstance
DecimalFormatSymbols#getInstance(Locale):::Gets the DecimalFormatSymbols instance for the specified locale:::LocaleProviderAdapter.getAdapter->adapter.getDecimalFormatSymbolsProvider->provider.getInstance->LocaleProviderAdapter.forJRE().getDecimalFormatSymbolsProvider->provider.getInstance
DecimalFormatSymbols#getZeroDigit():::Gets the character used for zero:::
DecimalFormatSymbols#setZeroDigit(char):::Sets the character used for zero:::
DecimalFormatSymbols#getGroupingSeparator():::Gets the character used for thousands separator:::
DecimalFormatSymbols#setGroupingSeparator(char):::Sets the character used for thousands separator:::
DecimalFormatSymbols#getDecimalSeparator():::Gets the character used for decimal sign:::
DecimalFormatSymbols#setDecimalSeparator(char):::Sets the character used for decimal sign:::
DecimalFormatSymbols#getPerMill():::Gets the character used for per mille sign:::
DecimalFormatSymbols#setPerMill(char):::Sets the character used for per mille sign:::
DecimalFormatSymbols#getPercent():::Gets the character used for percent sign:::
DecimalFormatSymbols#setPercent(char):::Sets the character used for percent sign:::
DecimalFormatSymbols#getDigit():::Gets the character used for a digit in a pattern.:::
DecimalFormatSymbols#setDigit(char):::Sets the character used for a digit in a pattern.:::
DecimalFormatSymbols#getPatternSeparator():::Gets the character used to separate positive and negative subpatterns in a pattern.:::
DecimalFormatSymbols#setPatternSeparator(char):::Sets the character used to separate positive and negative subpatterns in a pattern.:::
DecimalFormatSymbols#getInfinity():::Gets the string used to represent infinity:::
DecimalFormatSymbols#setInfinity(String):::Sets the string used to represent infinity:::
DecimalFormatSymbols#getNaN():::Gets the string used to represent "not a number":::
DecimalFormatSymbols#setNaN(String):::Sets the string used to represent "not a number":::
DecimalFormatSymbols#getMinusSign():::Gets the character used to represent minus sign:::
DecimalFormatSymbols#setMinusSign(char):::Sets the character used to represent minus sign:::
DecimalFormatSymbols#getCurrencySymbol():::Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.:::this.initializeCurrency
DecimalFormatSymbols#setCurrencySymbol(String):::Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.:::this.initializeCurrency
DecimalFormatSymbols#getInternationalCurrencySymbol():::Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.:::this.initializeCurrency
DecimalFormatSymbols#setInternationalCurrencySymbol(String):::Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols:::this.initializeCurrency->Currency.getInstance->currency.getSymbol
DecimalFormatSymbols#getCurrency():::Gets the currency of these DecimalFormatSymbols:::this.initializeCurrency
DecimalFormatSymbols#setCurrency(Currency):::Sets the currency of these DecimalFormatSymbols:::this.initializeCurrency->currency.getCurrencyCode->currency.getSymbol
DecimalFormatSymbols#getMonetaryDecimalSeparator():::Returns the monetary decimal separator.:::
DecimalFormatSymbols#setMonetaryDecimalSeparator(char):::Sets the monetary decimal separator.:::
DecimalFormatSymbols#getExponentialSymbol():::Returns the character used to separate the mantissa from the exponent.:::
DecimalFormatSymbols#getExponentSeparator():::Returns the string used to separate the mantissa from the exponent:::
DecimalFormatSymbols#setExponentialSymbol(char):::Sets the character used to separate the mantissa from the exponent.:::
DecimalFormatSymbols#setExponentSeparator(String):::Sets the string used to separate the mantissa from the exponent:::
DecimalFormatSymbols#clone():::Standard override.:::super.clone
DecimalFormatSymbols#equals(Object):::Override equals.:::this.getClass->obj.getClass->infinity.equals->NaN.equals->other.getCurrencySymbol->getCurrencySymbol().equals->intlCurrencySymbol.equals->exponentialSeparator.equals->locale.equals
DecimalFormatSymbols#hashCode():::Override hashCode.:::
DigitList#isZero():::Return true if the represented number is zero.:::
DigitList#setRoundingMode(RoundingMode):::Set the rounding mode:::
DigitList#clear():::Clears out the digits:::
DigitList#append(char):::Appends a digit to the list, extending the list when necessary.:::System.arraycopy
DigitList#getDouble():::Utility routine to get the value of the digit list If (count == 0) this throws a NumberFormatException, which mimics Long.parseLong().:::this.getStringBuffer->temp.append->temp.append->temp.append->temp.append->temp.toString->Double.parseDouble
DigitList#getLong():::Utility routine to get the value of the digit list:::this.isLongMIN_VALUE->this.getStringBuffer->temp.append->temp.append->temp.toString->Long.parseLong
DigitList#fitsIntoLong(boolean, boolean):::Return true if the number represented by this object can fit into a long.:::
DigitList#set(boolean, double, int):::Set the digit list to a representation of the given double value:::this.set
DigitList#set(boolean, double, int, boolean):::Set the digit list to a representation of the given double value:::FloatingDecimal.getBinaryToASCIIConverter->fdConverter.digitsRoundedUp->fdConverter.decimalDigitsExact->fdConverter.isExceptional->fdConverter.toJavaFormatString->this.set
DigitList#set(boolean, long):::Utility routine to set the value of the digit list from a long:::this.set
DigitList#set(boolean, long, int):::Set the digit list to a representation of the given long value.:::System.arraycopy->System.arraycopy->this.round
DigitList#set(boolean, BigDecimal, int, boolean):::Set the digit list to a representation of the given BigDecimal value:::source.toString->s.length->this.extendDigits->this.set
DigitList#set(boolean, BigInteger, int):::Set the digit list to a representation of the given BigInteger value.:::source.toString->s.length->this.extendDigits->s.getChars->this.round
DigitList#equals(Object):::equality test between two digit lists.:::
DigitList#hashCode():::Generates the hash code for the digit list.:::
DigitList#clone():::Creates a copy of this object.:::super.clone->System.arraycopy
FieldPosition#getFieldAttribute():::Returns the field identifier as an attribute constant from one of the Field subclasses:::
FieldPosition#getField():::Retrieves the field identifier.:::
FieldPosition#getBeginIndex():::Retrieves the index of the first character in the requested field.:::
FieldPosition#getEndIndex():::Retrieves the index of the character following the last character in the requested field.:::
FieldPosition#setBeginIndex(int):::Sets the begin index:::
FieldPosition#setEndIndex(int):::Sets the end index:::
FieldPosition#getFieldDelegate():::Returns a Format.FieldDelegate instance that is associated with the FieldPosition:::
FieldPosition#equals(Object):::Overrides equals:::attribute.equals
FieldPosition#hashCode():::Returns a hash code for this FieldPosition.:::
FieldPosition#toString():::Return a string representation of this FieldPosition.:::getClass().getName
Format#format(Object):::Formats an object to produce a string:::format(obj, new StringBuffer(), new FieldPosition(0)).toString
Format#format(Object, StringBuffer, FieldPosition):::Formats an object and appends the resulting text to a given string buffer:::
Format#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::this.format->this.createAttributedCharacterIterator
Format#parseObject(String, ParsePosition):::Parses text from a string to produce an object:::
Format#parseObject(String):::Parses text from the beginning of the given string to produce an object:::this.parseObject
Format#clone():::Creates and returns a copy of this object.:::super.clone
Format#createAttributedCharacterIterator(String):::Creates an AttributedCharacterIterator for the String s.:::as.getIterator
Format#createAttributedCharacterIterator(AttributedCharacterIterator[]):::Creates an AttributedCharacterIterator containing the concatenated contents of the passed in AttributedCharacterIterators.:::as.getIterator
Format#createAttributedCharacterIterator(String, AttributedCharacterIterator.Attribute, Object):::Returns an AttributedCharacterIterator with the String string and additional key/value pair key, value.:::as.addAttribute->as.getIterator
Format#createAttributedCharacterIterator(AttributedCharacterIterator, AttributedCharacterIterator.Attribute, Object):::Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value.:::as.addAttribute->as.getIterator
Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted:::
Format.FieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted.:::
MergeCollation#getPattern():::recovers current pattern:::this.getPattern
MergeCollation#getPattern(boolean):::recovers current pattern.:::patterns.get->entry.extension.length->this.findLastWithNoExtension->extList.get->tmp.addToBuffer->extList.size->entry.addToBuffer->extList.add->patterns.size->this.findLastWithNoExtension->extList.get->tmp.addToBuffer->extList.size->result.toString
MergeCollation#emitPattern():::emits the pattern for collation builder.:::this.emitPattern
MergeCollation#emitPattern(boolean):::emits the pattern for collation builder.:::patterns.get->entry.addToBuffer->patterns.size->result.toString
MergeCollation#setPattern(String):::sets the pattern.:::patterns.clear->this.addPattern
MergeCollation#addPattern(String):::adds a pattern to the current one.:::parser.next->this.fixEntry->parser.next
MergeCollation#getCount():::gets count of separate entries:::patterns.size
MergeCollation#getItemAt(int):::gets count of separate entries:::patterns.get
MessageFormat#setLocale(Locale):::Sets the locale to be used when creating or comparing subformats:::
MessageFormat#getLocale():::Gets the locale that's used when creating or comparing subformats.:::
MessageFormat#applyPattern(String):::Sets the pattern used by this message format:::pattern.charAt->segments[part].append->segments[part].append->segments[part].append->this.makeFormat->segments[SEG_TYPE].length->segments[part].append->segments[part].append->segments[part].append->segments[part].append->pattern.length->pattern.charAt->segments[part].append->pattern.length->segments[0].toString
MessageFormat#toPattern():::Returns a pattern representing the current state of the message format:::this.copyAndFixQuotes->result.append('{').append->DateFormat.getDateInstance->fmt.equals->result.append->DateFormat.getTimeInstance->fmt.equals->result.append->result.append(',').append->((SimpleDateFormat) fmt).toPattern->result.append(",date,").append->NumberFormat.getInstance->fmt.equals->NumberFormat.getCurrencyInstance->fmt.equals->NumberFormat.getPercentInstance->fmt.equals->NumberFormat.getIntegerInstance->fmt.equals->((ChoiceFormat) fmt).toPattern->result.append(",choice,").append->((DecimalFormat) fmt).toPattern->result.append(",number,").append->result.append->result.append->result.append->result.append->result.append->pattern.length->this.copyAndFixQuotes->result.toString
MessageFormat#setFormatsByArgumentIndex(Format[]):::Sets the formats to use for the values passed into format methods or returned from parse methods:::
MessageFormat#setFormats(Format[]):::Sets the formats to use for the format elements in the previously set pattern string:::
MessageFormat#setFormatByArgumentIndex(int, Format):::Sets the format to use for the format elements within the previously set pattern string that use the given argument index:::
MessageFormat#setFormat(int, Format):::Sets the format to use for the format element with the given format element index within the previously set pattern string:::
MessageFormat#getFormatsByArgumentIndex():::Gets the formats used for the values passed into format methods or returned from parse methods:::
MessageFormat#getFormats():::Gets the formats used for the format elements in the previously set pattern string:::System.arraycopy
MessageFormat#format(Object[], StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer:::this.subformat
MessageFormat#format(String, Object...):::Creates a MessageFormat with the given pattern and uses it to format the given arguments:::temp.format
MessageFormat#format(Object, StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer:::this.subformat
MessageFormat#formatToCharacterIterator(Object):::Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator:::this.subformat->iterators.size->this.createAttributedCharacterIterator->iterators.toArray->this.createAttributedCharacterIterator
MessageFormat#parse(String, ParsePosition):::Parses the string:::pattern.regionMatches->formats[i].parseObject->pattern.length->pattern.substring->source.indexOf->source.length->source.substring->strValue.equals->source.substring->pattern.length->pattern.regionMatches
MessageFormat#parse(String):::Parses text from the beginning of the given string to produce an object array:::this.parse
MessageFormat#parseObject(String, ParsePosition):::Parses text from a string to produce an object array:::this.parse
MessageFormat#clone():::Creates and returns a copy of this object.:::super.clone->formats.clone->formats[i].clone->offsets.clone->argumentNumbers.clone
MessageFormat#equals(Object):::Equality comparison between two message format objects:::this.getClass->obj.getClass->pattern.equals->locale.equals->Arrays.equals->Arrays.equals->Arrays.equals
MessageFormat#hashCode():::Generates a hash code for the message format object.:::pattern.hashCode
MessageFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::this.getClass
Normalizer#normalize(CharSequence, Form):::Normalize a sequence of char values:::src.toString->NormalizerBase.normalize
Normalizer#isNormalized(CharSequence, Form):::Determines if the given sequence of char values is normalized.:::src.toString->NormalizerBase.isNormalized
NumberFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer:::((BigInteger) number).bitLength->((Number) number).doubleValue->this.format->((Number) number).longValue->this.format
NumberFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Number:::this.parse
NumberFormat#format(double):::Specialization of format.:::this.fastFormat->format(number, new StringBuffer(), DontCareFieldPosition.INSTANCE).toString
NumberFormat#format(long):::Specialization of format.:::format(number, new StringBuffer(), DontCareFieldPosition.INSTANCE).toString
NumberFormat#format(double, StringBuffer, FieldPosition):::Specialization of format.:::
NumberFormat#format(long, StringBuffer, FieldPosition):::Specialization of format.:::
NumberFormat#parse(String, ParsePosition):::Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double:::
NumberFormat#parse(String):::Parses text from the beginning of the given string to produce a number:::this.parse
NumberFormat#isParseIntegerOnly():::Returns true if this format will parse numbers as integers only:::
NumberFormat#setParseIntegerOnly(boolean):::Sets whether or not numbers should be parsed as integers only.:::
NumberFormat#getInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.getInstance
NumberFormat#getInstance(Locale):::Returns a general-purpose number format for the specified locale:::this.getInstance
NumberFormat#getNumberInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.getInstance
NumberFormat#getNumberInstance(Locale):::Returns a general-purpose number format for the specified locale.:::this.getInstance
NumberFormat#getIntegerInstance():::Returns an integer number format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.getInstance
NumberFormat#getIntegerInstance(Locale):::Returns an integer number format for the specified locale:::this.getInstance
NumberFormat#getCurrencyInstance():::Returns a currency format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.getInstance
NumberFormat#getCurrencyInstance(Locale):::Returns a currency format for the specified locale.:::this.getInstance
NumberFormat#getPercentInstance():::Returns a percentage format for the current default java.util.Locale.Category#FORMAT FORMAT locale:::Locale.getDefault->this.getInstance
NumberFormat#getPercentInstance(Locale):::Returns a percentage format for the specified locale.:::this.getInstance
NumberFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances:::LocaleServiceProviderPool.getPool->pool.getAvailableLocales
NumberFormat#hashCode():::Overrides hashCode.:::
NumberFormat#equals(Object):::Overrides equals.:::this.getClass->obj.getClass
NumberFormat#clone():::Overrides Cloneable.:::super.clone
NumberFormat#isGroupingUsed():::Returns true if grouping is used in this format:::
NumberFormat#setGroupingUsed(boolean):::Set whether or not grouping will be used in this format.:::
NumberFormat#getMaximumIntegerDigits():::Returns the maximum number of digits allowed in the integer portion of a number.:::
NumberFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number:::Math.max
NumberFormat#getMinimumIntegerDigits():::Returns the minimum number of digits allowed in the integer portion of a number.:::
NumberFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number:::Math.max
NumberFormat#getMaximumFractionDigits():::Returns the maximum number of digits allowed in the fraction portion of a number.:::
NumberFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number:::Math.max
NumberFormat#getMinimumFractionDigits():::Returns the minimum number of digits allowed in the fraction portion of a number.:::
NumberFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number:::Math.max
NumberFormat#getCurrency():::Gets the currency used by this number format when formatting currency values:::
NumberFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values:::
NumberFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this NumberFormat:::
NumberFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this NumberFormat:::
NumberFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.:::this.getClass->this.getName->instanceMap.get
ParseException#getErrorOffset():::Returns the position where the error was found.:::
ParsePosition#getIndex():::Retrieve the current parse position:::
ParsePosition#setIndex(int):::Set the current parse position.:::
ParsePosition#setErrorIndex(int):::Set the index at which a parse error occurred:::
ParsePosition#getErrorIndex():::Retrieve the index at which an error occurred, or -1 if the error index has not been set.:::
ParsePosition#equals(Object):::Overrides equals:::
ParsePosition#hashCode():::Returns a hash code for this ParsePosition.:::
ParsePosition#toString():::Return a string representation of this ParsePosition.:::getClass().getName
PatternEntry#appendQuotedExtension(StringBuffer):::Gets the current extension, quoted:::this.appendQuoted
PatternEntry#appendQuotedChars(StringBuffer):::Gets the current chars, quoted:::this.appendQuoted
PatternEntry#equals(Object):::WARNING this is used for searching in a Vector:::chars.equals
PatternEntry#toString():::For debugging.:::this.addToBuffer->result.toString
PatternEntry#getStrength():::Gets the strength of the entry.:::
PatternEntry#getExtension():::Gets the expanding characters of the entry.:::
PatternEntry#getChars():::Gets the core characters of the entry.:::
RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short):::This function is used by RBTableBuilder to fill in all the members of this object:::
RBCollationTables#getRules():::Gets the table-based rules for the collation object.:::
RBCollationTables#getContractValues(int)::: Get the entry of hash table of the contracting string in the collation  table.:::mapping.elementAt->this.getContractValuesImpl
RBCollationTables#usedInContractSeq(int):::Returns true if this character appears anywhere in a contracting character sequence:::contractFlags.get
RBCollationTables#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.:::expandTable.elementAt->expandTable.size
RBCollationTables#getExpandValueList(int):::Get the entry of hash table of the expanding string in the collation table.:::expandTable.elementAt
RBCollationTables#getUnicodeOrder(int):::Get the comarison order of a character from the collation table.:::mapping.elementAt
RuleBasedCollationKey#compareTo(CollationKey):::Compare this RuleBasedCollationKey to target:::key.compareTo
RuleBasedCollationKey#equals(Object):::Compare this RuleBasedCollationKey and the target for equality:::target.getClass->getClass().equals->key.equals
RuleBasedCollationKey#hashCode():::Creates a hash code for this RuleBasedCollationKey:::key.hashCode
RuleBasedCollationKey#toByteArray():::Converts the RuleBasedCollationKey to a sequence of bits:::key.toCharArray
RuleBasedCollator#getRules():::Gets the table-based rules for the collation object.:::tables.getRules
RuleBasedCollator#getCollationElementIterator(String):::Returns a CollationElementIterator for the given String.:::
RuleBasedCollator#getCollationElementIterator(CharacterIterator):::Returns a CollationElementIterator for the given CharacterIterator.:::
RuleBasedCollator#compare(String, String):::Compares the character data stored in two different strings based on the collation rules:::sourceCursor.setText->this.getCollationElementIterator->targetCursor.setText->this.getCollationElementIterator->this.getStrength->this.getStrength->sourceCursor.next->targetCursor.next->CollationElementIterator.primaryOrder->CollationElementIterator.primaryOrder->tables.isFrenchSec->CollationElementIterator.secondaryOrder->CollationElementIterator.secondaryOrder->CollationElementIterator.tertiaryOrder->CollationElementIterator.tertiaryOrder->CollationElementIterator.primaryOrder->CollationElementIterator.secondaryOrder->targetCursor.next->CollationElementIterator.primaryOrder->CollationElementIterator.secondaryOrder->sourceCursor.next->this.getStrength->this.getDecomposition->source.compareTo->Normalizer.normalize->Normalizer.normalize->sourceDecomposition.compareTo
RuleBasedCollator#getCollationKey(String):::Transforms the string into a series of characters that can be compared with CollationKey.compareTo:::primResult.setLength->secResult.setLength->terResult.setLength->this.getStrength->this.getStrength->sourceCursor.setText->this.getCollationElementIterator->CollationElementIterator.secondaryOrder->CollationElementIterator.tertiaryOrder->CollationElementIterator.isIgnorable->secResult.append->terResult.append->primResult.append->tables.isFrenchSec->secResult.length->secResult.length->RBCollationTables.reverse->secResult.append->secResult.length->terResult.append->sourceCursor.next->tables.isFrenchSec->secResult.length->secResult.length->RBCollationTables.reverse->secResult.length->RBCollationTables.reverse->primResult.append->secResult.append->terResult.toString->secResult.append->secResult.toString->primResult.append->this.getStrength->primResult.append->this.getDecomposition->primResult.append->Normalizer.normalize->primResult.append->Normalizer.normalize->primResult.append->primResult.toString
RuleBasedCollator#clone():::Standard override; no change in semantics.:::this.getClass->super.clone
RuleBasedCollator#equals(Object):::Compares the equality of two collation objects.:::super.equals->other.getRules->getRules().equals
RuleBasedCollator#hashCode():::Generates the hash code for the table-based collation object:::getRules().hashCode
RuleBasedCollator#getTables():::Allows CollationElementIterator access to the tables object:::
SimpleDateFormat#set2DigitYearStart(Date):::Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.:::this.parseAmbiguousDatesAsAfter
SimpleDateFormat#get2DigitYearStart():::Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.:::defaultCenturyStart.clone
SimpleDateFormat#format(Date, StringBuffer, FieldPosition):::Formats the given Date into a date/time string and appends the result to the given StringBuffer.:::pos.getFieldDelegate->this.format
SimpleDateFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator:::this.format->this.format->sb.toString->delegate.getIterator
SimpleDateFormat#parse(String, ParsePosition):::Parses text from a string to produce a Date:::this.checkNegativeNumberExpression->text.length->text.charAt->text.charAt->this.shouldObeyCount->this.subParse->calb.establish(calendar).getTime->parsedDate.before->calb.addYear(100).establish(calendar).getTime
SimpleDateFormat#toPattern():::Returns a pattern string describing this date format.:::
SimpleDateFormat#toLocalizedPattern():::Returns a localized pattern string describing this date format.:::formatData.getLocalPatternChars->this.translatePattern
SimpleDateFormat#applyPattern(String):::Applies the given pattern string to this date format.:::this.applyPatternImpl
SimpleDateFormat#applyLocalizedPattern(String):::Applies the given localized pattern string to this date format.:::formatData.getLocalPatternChars->this.translatePattern->this.compile
SimpleDateFormat#getDateFormatSymbols():::Gets a copy of the date and time format symbols of this date format.:::formatData.clone
SimpleDateFormat#setDateFormatSymbols(DateFormatSymbols):::Sets the date and time format symbols of this date format.:::newFormatSymbols.clone
SimpleDateFormat#clone():::Creates a copy of this SimpleDateFormat:::super.clone->formatData.clone
SimpleDateFormat#hashCode():::Returns the hash code value for this SimpleDateFormat object.:::pattern.hashCode
SimpleDateFormat#equals(Object):::Compares the given object with this SimpleDateFormat for equality.:::super.equals->pattern.equals->formatData.equals
StringCharacterIterator#setText(String):::Reset this iterator to point to a new string:::text.length
StringCharacterIterator#first():::Implements CharacterIterator.first() for String.:::this.current
StringCharacterIterator#last():::Implements CharacterIterator.last() for String.:::this.current
StringCharacterIterator#setIndex(int):::Implements CharacterIterator.setIndex() for String.:::this.current
StringCharacterIterator#current():::Implements CharacterIterator.current() for String.:::text.charAt
StringCharacterIterator#next():::Implements CharacterIterator.next() for String.:::text.charAt
StringCharacterIterator#previous():::Implements CharacterIterator.previous() for String.:::text.charAt
StringCharacterIterator#getBeginIndex():::Implements CharacterIterator.getBeginIndex() for String.:::
StringCharacterIterator#getEndIndex():::Implements CharacterIterator.getEndIndex() for String.:::
StringCharacterIterator#getIndex():::Implements CharacterIterator.getIndex() for String.:::
StringCharacterIterator#equals(Object):::Compares the equality of two StringCharacterIterator objects.:::this.hashCode->that.hashCode->text.equals
StringCharacterIterator#hashCode():::Computes a hashcode for this iterator.:::text.hashCode
StringCharacterIterator#clone():::Creates a copy of this iterator.:::super.clone

RemoteAddress#equals(Object)::: remote address equals:::if->return->if->return->return
RemoteAddress#hashCode()::: remote address hash code:::return
RemoteAddress#toString()::: remote address to string:::return->debugger->addressValueToString
RemoteAddress#getCIntegerAt(long, long, boolean)::: remote address get integer at:::return->debugger->readCInteger
RemoteAddress#getAddressAt(long)::: remote address get address at:::return->debugger->readAddress
RemoteAddress#getCompOopAddressAt(long)::: remote address get comp oop address at:::return->debugger->readCompOopAddress
RemoteAddress#getCompKlassAddressAt(long)::: remote address get comp klass address at:::return->debugger->readCompKlassAddress
RemoteAddress#getJBooleanAt(long)::: remote address get boolean at:::return->debugger->readJBoolean
RemoteAddress#getJByteAt(long)::: remote address get byte at:::return->debugger->readJByte
RemoteAddress#getJCharAt(long)::: remote address get char at:::return->debugger->readJChar
RemoteAddress#getJDoubleAt(long)::: remote address get double at:::return->debugger->readJDouble
RemoteAddress#getJFloatAt(long)::: remote address get float at:::return->debugger->readJFloat
RemoteAddress#getJIntAt(long)::: remote address get int at:::return->debugger->readJInt
RemoteAddress#getJLongAt(long)::: remote address get long at:::return->debugger->readJLong
RemoteAddress#getJShortAt(long)::: remote address get short at:::return->debugger->readJShort
RemoteAddress#getOopHandleAt(long)::: remote address get oop handle at:::return->debugger->readOopHandle
RemoteAddress#getCompOopHandleAt(long)::: remote address get comp oop handle at:::return->debugger->readCompOopHandle
RemoteAddress#setCIntegerAt(long, long, long)::: remote address set integer at:::throw->new->DebuggerException
RemoteAddress#setAddressAt(long, Address)::: remote address set address at:::throw->new->DebuggerException
RemoteAddress#setJBooleanAt(long, boolean)::: remote address set boolean at:::throw->new->DebuggerException
RemoteAddress#setJByteAt(long, byte)::: remote address set byte at:::throw->new->DebuggerException
RemoteAddress#setJCharAt(long, char)::: remote address set char at:::throw->new->DebuggerException
RemoteAddress#setJDoubleAt(long, double)::: remote address set double at:::throw->new->DebuggerException
RemoteAddress#setJFloatAt(long, float)::: remote address set float at:::throw->new->DebuggerException
RemoteAddress#setJIntAt(long, int)::: remote address set int at:::throw->new->DebuggerException
RemoteAddress#setJLongAt(long, long)::: remote address set long at:::throw->new->DebuggerException
RemoteAddress#setJShortAt(long, short)::: remote address set short at:::throw->new->DebuggerException
RemoteAddress#setOopHandleAt(long, OopHandle)::: remote address set oop handle at:::throw->new->DebuggerException
RemoteAddress#addOffsetTo(long)::: remote address add offset to:::value->if->return->return->new->RemoteAddress
RemoteAddress#addOffsetToAsOopHandle(long)::: remote address add offset to as oop handle:::value->if->return->return->new->RemoteOopHandle
RemoteAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
RemoteAddress#lessThan(Address)::: remote address less than:::if->return->remoteArg->if->return->if->return->return
RemoteAddress#lessThanOrEqual(Address)::: remote address less than or equal:::if->return->remoteArg->if->return->if->return->return
RemoteAddress#greaterThan(Address)::: remote address greater than:::if->return->remoteArg->if->return->if->return->return
RemoteAddress#greaterThanOrEqual(Address)::: remote address greater than or equal:::if->return->remoteArg->if->return->if->return->return
RemoteAddress#andWithMask(long)::: remote address and with mask:::value->if->return->return->new->RemoteAddress
RemoteAddress#orWithMask(long)::: remote address or with mask:::value->if->return->return->new->RemoteAddress
RemoteAddress#xorWithMask(long)::: remote address xor with mask:::value->if->return->return->new->RemoteAddress
RemoteAddress#asLongValue()::: remote address as long value:::return
RemoteAddress#getValue()::: remote address get value:::return
RemoteAddress#check(boolean, String)::: remote address check:::if->println->System->exit
RemoteAddress#main(String[])::: remote address main:::p1->new->RemoteAddress->p2->p1->addOffsetTo->n1->p2->addOffsetTo->n2->n1->addOffsetTo->p1->lessThan->check->p1->lessThan->check->p1->lessThan->check->p2->lessThan->check->p2->lessThan->check->n1->lessThan->check->p1->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n2->lessThan->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->greaterThan->check->n2->greaterThan->check->n2->greaterThan->check->n1->greaterThan->check->n1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->n2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->println
RemoteDebugger#getOS()::: remote debugger get s:::
RemoteDebugger#getCPU()::: remote debugger get u:::
RemoteDebugger#getMachineDescription()::: remote debugger get machine description:::
RemoteDebugger#lookupInProcess(String, String)::: remote debugger lookup in process:::
RemoteDebugger#readBytesFromProcess(long, long)::: remote debugger read bytes from process:::
RemoteDebugger#hasConsole()::: remote debugger has console:::
RemoteDebugger#getConsolePrompt()::: remote debugger get console prompt:::
RemoteDebugger#consoleExecuteCommand(String)::: remote debugger console execute command:::
RemoteDebugger#getJBooleanSize()::: remote debugger get boolean size:::
RemoteDebugger#getJByteSize()::: remote debugger get byte size:::
RemoteDebugger#getJCharSize()::: remote debugger get char size:::
RemoteDebugger#getJDoubleSize()::: remote debugger get double size:::
RemoteDebugger#getJFloatSize()::: remote debugger get float size:::
RemoteDebugger#getJIntSize()::: remote debugger get int size:::
RemoteDebugger#getJLongSize()::: remote debugger get long size:::
RemoteDebugger#getJShortSize()::: remote debugger get short size:::
RemoteDebugger#getHeapOopSize()::: remote debugger get heap oop size:::
RemoteDebugger#getNarrowOopBase()::: remote debugger get narrow oop base:::
RemoteDebugger#getNarrowOopShift()::: remote debugger get narrow oop shift:::
RemoteDebugger#getKlassPtrSize()::: remote debugger get klass ptr size:::
RemoteDebugger#getNarrowKlassBase()::: remote debugger get narrow klass base:::
RemoteDebugger#getNarrowKlassShift()::: remote debugger get narrow klass shift:::
RemoteDebugger#areThreadsEqual(long, boolean, long, boolean)::: remote debugger are threads equal:::
RemoteDebugger#getThreadHashCode(long, boolean)::: remote debugger get thread hash code:::
RemoteDebugger#getThreadIntegerRegisterSet(long, boolean)::: remote debugger get thread integer register set:::
RemoteDebuggerClient#getThreadIntegerRegisterSet(Address)::: remote debugger client get thread integer register set:::try->return->remoteDebugger->getAddressValue->getThreadIntegerRegisterSet->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#getThreadIntegerRegisterSet(long)::: remote debugger client get thread integer register set:::try->return->remoteDebugger->getThreadIntegerRegisterSet->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#hasProcessList():::Unimplemented in this class (remote remoteDebugger should already be attached):::throw->new->DebuggerException
RemoteDebuggerClient#getProcessList():::Unimplemented in this class (remote remoteDebugger should already be attached):::throw->new->DebuggerException
RemoteDebuggerClient#attach(int):::Unimplemented in this class (remote remoteDebugger should already be attached):::throw->new->DebuggerException
RemoteDebuggerClient#attach(String, String):::Unimplemented in this class (remote remoteDebugger should already be attached):::throw->new->DebuggerException
RemoteDebuggerClient#detach():::Unimplemented in this class (remote remoteDebugger can not be detached):::throw->new->DebuggerException
RemoteDebuggerClient#parseAddress(String)::: remote debugger client parse address:::addr->utils->scanAddress->if->return->return->new->RemoteAddress
RemoteDebuggerClient#getOS()::: remote debugger client get s:::try->return->remoteDebugger->getOS->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#getCPU()::: remote debugger client get u:::try->return->remoteDebugger->getCPU->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#hasConsole()::: remote debugger client has console:::try->return->remoteDebugger->hasConsole->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#consoleExecuteCommand(String)::: remote debugger client console execute command:::try->return->remoteDebugger->consoleExecuteCommand->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#getConsolePrompt()::: remote debugger client get console prompt:::try->return->remoteDebugger->getConsolePrompt->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#getCDebugger()::: remote debugger client get debugger:::return
RemoteDebuggerClient#lookup(String, String)::: remote debugger client lookup:::try->addr->remoteDebugger->lookupInProcess->if->return->return->new->RemoteAddress->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#lookupOop(String, String)::: remote debugger client lookup oop:::try->addr->remoteDebugger->lookupInProcess->if->return->return->new->RemoteOopHandle->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#readCInteger(long, long, boolean):::Need to override this to relax alignment checks on x86.:::if->utils->checkAlignment->else->if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToCInteger
RemoteDebuggerClient#readJLong(long)::: remote debugger client read long:::if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToJLong
RemoteDebuggerClient#configureJavaPrimitiveTypeSizes(long, long, long, long, long, long, long, long):::Unimplemented in this class (remote remoteDebugger should already be configured):::throw->new->DebuggerException
RemoteDebuggerClient#setMachineDescription(MachineDescription)::: remote debugger client set machine description:::throw->new->DebuggerException
RemoteDebuggerClient#getRemoteProcessAddressSize()::: remote debugger client get remote process address size:::throw->new->DebuggerException
RemoteDebuggerClient#addressValueToString(long)::: remote debugger client address value to string:::return->utils->addressValueToString
RemoteDebuggerClient#getAddressValue(Address)::: remote debugger client get address value:::if->return->return->getValue
RemoteDebuggerClient#newAddress(long)::: remote debugger client new address:::if->return->return->new->RemoteAddress
RemoteDebuggerClient#readAddress(long)::: remote debugger client read address:::value->readAddressValue->return->new->RemoteAddress
RemoteDebuggerClient#readCompOopAddress(long)::: remote debugger client read comp oop address:::value->readCompOopAddressValue->return->new->RemoteAddress
RemoteDebuggerClient#readCompKlassAddress(long)::: remote debugger client read comp klass address:::value->readCompKlassAddressValue->return->new->RemoteAddress
RemoteDebuggerClient#readOopHandle(long)::: remote debugger client read oop handle:::value->readAddressValue->return->new->RemoteOopHandle
RemoteDebuggerClient#readCompOopHandle(long)::: remote debugger client read comp oop handle:::value->readCompOopAddressValue->return->new->RemoteOopHandle
RemoteDebuggerClient#areThreadsEqual(Address, Address)::: remote debugger client are threads equal:::try->return->remoteDebugger->getAddressValue->getAddressValue->areThreadsEqual->catch->finally->return
RemoteDebuggerClient#areThreadsEqual(long, long)::: remote debugger client are threads equal:::try->return->remoteDebugger->areThreadsEqual->catch->finally->return
RemoteDebuggerClient#areThreadsEqual(Address, long)::: remote debugger client are threads equal:::try->return->remoteDebugger->getAddressValue->areThreadsEqual->catch->finally->return
RemoteDebuggerClient#areThreadsEqual(long, Address)::: remote debugger client are threads equal:::try->return->remoteDebugger->getAddressValue->areThreadsEqual->catch->finally->return
RemoteDebuggerClient#getThreadHashCode(Address)::: remote debugger client get thread hash code:::try->return->remoteDebugger->getAddressValue->getThreadHashCode->catch->finally->return->a->hashCode
RemoteDebuggerClient#getThreadHashCode(long)::: remote debugger client get thread hash code:::try->return->remoteDebugger->getThreadHashCode->catch->finally->return
RemoteDebuggerClient#getThreadForIdentifierAddress(Address)::: remote debugger client get thread for identifier address:::return->threadFactory->createThreadWrapper
RemoteDebuggerClient#getThreadForThreadId(long)::: remote debugger client get thread for thread id:::return->threadFactory->createThreadWrapper
RemoteDebuggerClient#getMachineDescription()::: remote debugger client get machine description:::return
RemoteDebuggerClient#readBytesFromProcess(long, long):::This reads bytes from the remote process.:::try->return->remoteDebugger->readBytesFromProcess->catch->throw->new->DebuggerException->finally
RemoteDebuggerClient#writeBytesToProcess(long, long, byte[])::: remote debugger client write bytes to process:::throw->new->DebuggerException
RemoteDebuggerServer#getOS()::: remote debugger server get s:::return->debugger->getOS
RemoteDebuggerServer#getCPU()::: remote debugger server get u:::return->debugger->getCPU
RemoteDebuggerServer#getMachineDescription()::: remote debugger server get machine description:::return->debugger->getMachineDescription
RemoteDebuggerServer#lookupInProcess(String, String)::: remote debugger server lookup in process:::addr->debugger->lookup->return->debugger->getAddressValue
RemoteDebuggerServer#readBytesFromProcess(long, long)::: remote debugger server read bytes from process:::return->debugger->readBytesFromProcess
RemoteDebuggerServer#hasConsole()::: remote debugger server has console:::return->debugger->hasConsole
RemoteDebuggerServer#getConsolePrompt()::: remote debugger server get console prompt:::return->debugger->getConsolePrompt
RemoteDebuggerServer#consoleExecuteCommand(String)::: remote debugger server console execute command:::return->debugger->consoleExecuteCommand
RemoteDebuggerServer#getJBooleanSize()::: remote debugger server get boolean size:::return->debugger->getJBooleanSize
RemoteDebuggerServer#getJByteSize()::: remote debugger server get byte size:::return->debugger->getJByteSize
RemoteDebuggerServer#getJCharSize()::: remote debugger server get char size:::return->debugger->getJCharSize
RemoteDebuggerServer#getJDoubleSize()::: remote debugger server get double size:::return->debugger->getJDoubleSize
RemoteDebuggerServer#getJFloatSize()::: remote debugger server get float size:::return->debugger->getJFloatSize
RemoteDebuggerServer#getJIntSize()::: remote debugger server get int size:::return->debugger->getJIntSize
RemoteDebuggerServer#getJLongSize()::: remote debugger server get long size:::return->debugger->getJLongSize
RemoteDebuggerServer#getJShortSize()::: remote debugger server get short size:::return->debugger->getJShortSize
RemoteDebuggerServer#getHeapOopSize()::: remote debugger server get heap oop size:::return->debugger->getHeapOopSize
RemoteDebuggerServer#getNarrowOopBase()::: remote debugger server get narrow oop base:::return->debugger->getNarrowOopBase
RemoteDebuggerServer#getNarrowOopShift()::: remote debugger server get narrow oop shift:::return->debugger->getNarrowOopShift
RemoteDebuggerServer#getKlassPtrSize()::: remote debugger server get klass ptr size:::return->debugger->getHeapOopSize
RemoteDebuggerServer#getNarrowKlassBase()::: remote debugger server get narrow klass base:::return->debugger->getNarrowKlassBase
RemoteDebuggerServer#getNarrowKlassShift()::: remote debugger server get narrow klass shift:::return->debugger->getNarrowKlassShift
RemoteDebuggerServer#areThreadsEqual(long, boolean, long, boolean)::: remote debugger server are threads equal:::t1->getThreadProxy->t2->getThreadProxy->return->t1->equals
RemoteDebuggerServer#getThreadHashCode(long, boolean)::: remote debugger server get thread hash code:::t->getThreadProxy->return->t->hashCode
RemoteDebuggerServer#getThreadIntegerRegisterSet(long, boolean)::: remote debugger server get thread integer register set:::t->getThreadProxy->tc->t->getContext->regs->tc->getNumRegisters->new->longArr->for->r->return
RemoteDebuggerServer#getThreadProxy(long, boolean)::: remote debugger server get thread proxy:::if->addr->debugger->Long->toHexString->parseAddress->return->debugger->getThreadForIdentifierAddress->else->return->debugger->getThreadForThreadId
RemoteOopHandle#addOffsetTo(long)::: remote oop handle add offset to:::throw->new->UnsupportedOperationException
RemoteOopHandle#andWithMask(long)::: remote oop handle and with mask:::throw->new->UnsupportedOperationException
RemoteOopHandle#orWithMask(long)::: remote oop handle or with mask:::throw->new->UnsupportedOperationException
RemoteOopHandle#xorWithMask(long)::: remote oop handle xor with mask:::throw->new->UnsupportedOperationException
RemoteThread#canSetContext()::: remote thread can set context:::return
RemoteThread#setContext(ThreadContext)::: remote thread set context:::throw->new->DebuggerException
RemoteThread#equals(Object)::: remote thread equals:::if->return->if->return->other->isOtherAddress->isAddress->if->return->debugger->areThreadsEqual->debugger->areThreadsEqual->else->return->debugger->areThreadsEqual->debugger->areThreadsEqual
RemoteThread#hashCode()::: remote thread hash code:::return->debugger->getThreadHashCode->debugger->getThreadHashCode
RemoteThread#toString()::: remote thread to string:::return->hashCode
RemoteThreadFactory#createThreadWrapper(Address)::: remote thread factory create thread wrapper:::
RemoteThreadFactory#createThreadWrapper(long)::: remote thread factory create thread wrapper:::

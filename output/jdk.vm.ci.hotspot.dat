Cleaner#doCleanup():::Performs the cleanup action now that this object's referent has become weakly reachable.:::
Cleaner#clean():::Remove the cleaners whose referents have become weakly reachable.:::c->queue->poll->while->remove->c->doCleanup->queue->poll
CompilerToVM#compilerToVM():::Gets the CompilerToVM instance associated with the singleton HotSpotJVMCIRuntime instance.:::return->runtime->getCompilerToVM
CompilerToVM#getBytecode(HotSpotResolvedJavaMethodImpl):::Copies the original bytecode of method into a new byte array and returns it.:::
CompilerToVM#getExceptionTableLength(HotSpotResolvedJavaMethodImpl):::Gets the number of entries in method's exception handler table or 0 if it has no exception handler table.:::
CompilerToVM#getExceptionTableStart(HotSpotResolvedJavaMethodImpl):::Gets the address of the first entry in method's exception handler table:::
CompilerToVM#isCompilable(HotSpotResolvedJavaMethodImpl):::Determines whether method is currently compilable by the JVMCI compiler being used by the VM:::
CompilerToVM#hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl):::Determines if method is targeted by a VM directive (e.g., -XX:CompileCommand=dontinline,<pattern>) or annotation (e.g., jdk.internal.vm.annotation.DontInline) that specifies it should not be inlined.:::
CompilerToVM#shouldInlineMethod(HotSpotResolvedJavaMethodImpl):::Determines if method should be inlined at any cost:::
CompilerToVM#findUniqueConcreteMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl):::Used to implement ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod).:::
CompilerToVM#getImplementor(HotSpotResolvedObjectTypeImpl):::Gets the implementor for the interface class type.:::
CompilerToVM#methodIsIgnoredBySecurityStackWalk(HotSpotResolvedJavaMethodImpl):::Determines if method is ignored by security stack walks.:::
CompilerToVM#lookupType(String, HotSpotResolvedObjectTypeImpl, boolean):::Converts a name to a type.:::
CompilerToVM#resolvePossiblyCachedConstantInPool(HotSpotConstantPool, int):::Resolves the entry at index cpi in constantPool to an object, looking in the constant pool cache first:::
CompilerToVM#lookupNameAndTypeRefIndexInPool(HotSpotConstantPool, int):::Gets the JVM_CONSTANT_NameAndType index from the entry at index cpi in constantPool:::
CompilerToVM#lookupNameInPool(HotSpotConstantPool, int):::Gets the name of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool:::
CompilerToVM#lookupSignatureInPool(HotSpotConstantPool, int):::Gets the signature of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool:::
CompilerToVM#lookupKlassRefIndexInPool(HotSpotConstantPool, int):::Gets the JVM_CONSTANT_Class index from the entry at index cpi in constantPool:::
CompilerToVM#lookupKlassInPool(HotSpotConstantPool, int):::Looks up a class denoted by the JVM_CONSTANT_Class entry at index cpi in constantPool:::
CompilerToVM#lookupMethodInPool(HotSpotConstantPool, int, byte):::Looks up a method denoted by the entry at index cpi in constantPool:::
CompilerToVM#resolveInvokeDynamicInPool(HotSpotConstantPool, int):::Ensures that the type referenced by the specified JVM_CONSTANT_InvokeDynamic entry at index cpi in constantPool is loaded and initialized:::
CompilerToVM#resolveInvokeHandleInPool(HotSpotConstantPool, int):::If cpi denotes an entry representing a signature polymorphic method, this method ensures that the type referenced by the entry is loaded and initialized:::
CompilerToVM#isResolvedInvokeHandleInPool(HotSpotConstantPool, int):::If cpi denotes an entry representing a resolved dynamic adapter (see #resolveInvokeDynamicInPool and #resolveInvokeHandleInPool), return the opcode of the instruction for which the resolution was performed (invokedynamic or invokevirtual), or -1 otherwise.:::
CompilerToVM#getSignaturePolymorphicHolders():::Gets the list of type names (in the format of JavaType#getName()) denoting the classes that define signature polymorphic methods.:::
CompilerToVM#resolveTypeInPool(HotSpotConstantPool, int):::Gets the resolved type denoted by the entry at index cpi in constantPool:::
CompilerToVM#resolveFieldInPool(HotSpotConstantPool, int, HotSpotResolvedJavaMethodImpl, byte, int[]):::Looks up and attempts to resolve the JVM_CONSTANT_Field entry for at index cpi in constantPool:::
CompilerToVM#constantPoolRemapInstructionOperandFromCache(HotSpotConstantPool, int):::Converts cpci from an index into the cache for constantPool to an index directly into constantPool:::
CompilerToVM#lookupAppendixInPool(HotSpotConstantPool, int):::Gets the appendix object (if any) associated with the entry at index cpi in constantPool.:::
CompilerToVM#installCode(TargetDescription, HotSpotCompiledCode, InstalledCode, long, byte[]):::Installs the result of a compilation into the code cache.:::
CompilerToVM#getMetadata(TargetDescription, HotSpotCompiledCode, HotSpotMetaData):::Generates the VM metadata for some compiled code and copies them into metaData:::
CompilerToVM#resetCompilationStatistics():::Resets all compilation statistics.:::
CompilerToVM#readConfiguration():::Reads the database of VM info:::
CompilerToVM#resolveMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl, HotSpotResolvedObjectTypeImpl):::Resolves the implementation of method for virtual dispatches on objects of dynamic type exactReceiver:::
CompilerToVM#getClassInitializer(HotSpotResolvedObjectTypeImpl):::Gets the static initializer of type.:::
CompilerToVM#hasFinalizableSubclass(HotSpotResolvedObjectTypeImpl):::Determines if type or any of its currently loaded subclasses overrides Object.finalize().:::
CompilerToVM#asResolvedJavaMethod(Executable):::Gets the method corresponding to executable.:::
CompilerToVM#getMaxCallTargetOffset(long):::Gets the maximum absolute offset of a PC relative call to address from any position in the code cache.:::
CompilerToVM#getStackTraceElement(HotSpotResolvedJavaMethodImpl, int):::Gets a stack trace element for method at bytecode index bci.:::
CompilerToVM#executeHotSpotNmethod(Object[], HotSpotNmethod):::Executes some installedCode with arguments args.:::
CompilerToVM#getLineNumberTable(HotSpotResolvedJavaMethodImpl):::Gets the line number table for method:::
CompilerToVM#getLocalVariableTableLength(HotSpotResolvedJavaMethodImpl):::Gets the number of entries in the local variable table for method.:::
CompilerToVM#getLocalVariableTableStart(HotSpotResolvedJavaMethodImpl):::Gets the address of the first entry in the local variable table for method:::
CompilerToVM#readUncompressedOop(long):::Reads an object pointer within a VM data structure:::
CompilerToVM#setNotInlinableOrCompilable(HotSpotResolvedJavaMethodImpl):::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::
CompilerToVM#reprofile(HotSpotResolvedJavaMethodImpl):::Invalidates the profiling information for method and (re)initializes it such that profiling restarts upon its next invocation.:::
CompilerToVM#invalidateHotSpotNmethod(HotSpotNmethod):::Invalidates nmethodMirror such that InvalidInstalledCodeException will be raised the next time nmethodMirror is #executeHotSpotNmethod executed:::
CompilerToVM#collectCounters():::Collects the current values of all JVMCI benchmark counters, summed up over all threads.:::
CompilerToVM#getCountersSize():::Get the current number of counters allocated for use by JVMCI:::
CompilerToVM#setCountersSize(int):::Attempt to change the size of the counters allocated for JVMCI:::
CompilerToVM#isMature(long):::Determines if metaspaceMethodData is mature.:::
CompilerToVM#allocateCompileId(HotSpotResolvedJavaMethodImpl, int):::Generate a unique id to identify the result of the compile.:::
CompilerToVM#hasCompiledCodeForOSR(HotSpotResolvedJavaMethodImpl, int, int):::Determines if method has OSR compiled code identified by entryBCI for compilation level level.:::
CompilerToVM#getSymbol(long):::Gets the value of metaspaceSymbol as a String.:::
CompilerToVM#materializeVirtualObjects(HotSpotStackFrameReference, boolean):::Materializes all virtual objects within stackFrame and updates its locals.:::
CompilerToVM#getVtableIndexForInterfaceMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl):::Gets the v-table index for interface method method in the receiver type or HotSpotVMConfig#invalidVtableIndex if method is not in type's v-table.:::
CompilerToVM#shouldDebugNonSafepoints():::Determines if debug info should also be emitted at non-safepoint locations.:::
CompilerToVM#writeDebugOutput(byte[], int, int, boolean, boolean):::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.:::
CompilerToVM#flushDebugOutput():::Flush HotSpot's log stream.:::
CompilerToVM#getResolvedJavaMethod(HotSpotObjectConstantImpl, long):::Read a HotSpot Method* value from the memory location described by base plus displacement and return the HotSpotResolvedJavaMethodImpl wrapping it:::
CompilerToVM#getConstantPool(MetaspaceObject):::Gets the ConstantPool* associated with object and returns a HotSpotConstantPool wrapping it.:::
CompilerToVM#methodDataProfileDataSize(long, int):::Return the size of the HotSpot ProfileData* pointed at by position:::
CompilerToVM#getFingerprint(long):::Gets the fingerprint for a given Klass*.:::
CompilerToVM#interpreterFrameSize(BytecodeFrame):::Return the amount of native stack required for the interpreter frames represented by frame:::
CompilerToVM#compileToBytecode(HotSpotObjectConstantImpl):::Invokes non-public method java.lang.invoke.LambdaForm.compileToBytecode() on lambdaForm (which must be a java.lang.invoke.LambdaForm instance).:::
CompilerToVM#getFlagValue(String):::Gets the value of the VM flag named name.:::
CompilerToVM#getHostClass(HotSpotResolvedObjectTypeImpl):::Gets the host class for type.:::
CompilerToVM#getObjectAtAddress(long):::Gets the object at the address oopAddress.:::
CompilerToVM#getArrayType(HotSpotResolvedJavaType):::Get the array class for type:::
CompilerToVM#ensureInitialized(HotSpotResolvedObjectTypeImpl):::Forces initialization of type.:::
CompilerToVM#isInternedString(HotSpotObjectConstantImpl):::Checks if object is a String and is an interned string value.:::
CompilerToVM#getIdentityHashCode(HotSpotObjectConstantImpl):::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.:::
CompilerToVM#unboxPrimitive(HotSpotObjectConstantImpl):::Converts a constant object representing a boxed primitive into a boxed primitive.:::
CompilerToVM#boxPrimitive(Object):::Converts a boxed primitive into a JavaConstant representing the same value.:::
CompilerToVM#getDeclaredConstructors(HotSpotResolvedObjectTypeImpl):::Gets the ResolvedJavaMethods for all the constructors of the type holder.:::
CompilerToVM#getDeclaredMethods(HotSpotResolvedObjectTypeImpl):::Gets the ResolvedJavaMethods for all the non-constructor methods of the type holder.:::
CompilerToVM#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean):::Reads the current value of a static field.:::
CompilerToVM#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean):::Reads the current value of an instance field.:::
CompilerToVM#asString(HotSpotObjectConstantImpl):::Converts a String constant into a String.:::
CompilerToVM#equals(HotSpotObjectConstantImpl, long, HotSpotObjectConstantImpl, long):::Compares the contents of xHandle and yHandle for pointer equality.:::
CompilerToVM#getJavaMirror(HotSpotResolvedJavaType):::Gets a JavaConstant wrapping the java.lang.Class mirror for type.:::
CompilerToVM#getArrayLength(HotSpotObjectConstantImpl):::Returns the length of the array if object represents an array or -1 otherwise.:::
CompilerToVM#readArrayElement(HotSpotObjectConstantImpl, int):::Reads the element at index if object is an array:::
CompilerToVM#getByte(HotSpotObjectConstantImpl, long):::Reads a byte sized value from displacement in object.:::
CompilerToVM#getShort(HotSpotObjectConstantImpl, long):::Reads a short sized value from displacement in object.:::
CompilerToVM#getInt(HotSpotObjectConstantImpl, long):::Reads an int sized value from displacement in object.:::
CompilerToVM#getLong(HotSpotObjectConstantImpl, long):::Reads a long sized value from displacement in object.:::
CompilerToVM#getObject(HotSpotObjectConstantImpl, long):::Reads a Java object from displacement in object.:::
CompilerToVM#updateHotSpotNmethod(HotSpotNmethod):::Updates address and entryPoint fields of nmethodMirror based on the current state of the nmethod identified by address and nmethodMirror.compileId in the code cache.:::
CompilerToVM#asReflectionExecutable(HotSpotResolvedJavaMethodImpl):::Gets a Executable corresponding to method.:::
CompilerToVM#asReflectionField(HotSpotResolvedObjectTypeImpl, int):::Gets a Field denoted by holder and index.:::
CompilerToVM#deleteGlobalHandle(long):::Releases the resources backing the global JNI handle:::
CompilerToVM#getFailedSpeculations(long, byte[][]):::Gets the failed speculations pointed to by *failedSpeculationsAddress.:::
CompilerToVM#getFailedSpeculationsAddress(HotSpotResolvedJavaMethodImpl):::Gets the address of the MethodData::_failed_speculations field in the MethodData associated with method:::
CompilerToVM#releaseFailedSpeculations(long):::Frees the failed speculations pointed to by *failedSpeculationsAddress.:::
CompilerToVM#addFailedSpeculation(long, byte[]):::Adds a speculation to the failed speculations pointed to by *failedSpeculationsAddress.:::
EventProvider#createEmptyEventProvider():::Creates and returns an empty implementation for EventProvider:::return->new->EmptyEventProvider
EventProvider#createEmptyCompilationEvent():::Creates and returns an empty implementation for CompilationEvent.:::return->new->EmptyCompilationEvent
EventProvider#createEmptyCompilerFailureEvent():::Creates and returns an empty implementation for CompilationEvent.:::return->new->EmptyCompilerFailureEvent
EventProvider.InstantEvent#commit():::Commits the event.:::
EventProvider.InstantEvent#shouldWrite():::Determines if this particular event instance would be committed to the data stream right now if application called #commit():::
EventProvider.TimedEvent#begin():::Starts the timing for this event.:::
EventProvider.TimedEvent#end():::Ends the timing period for this event.:::
EventProvider#newCompilationEvent():::Creates a new CompilationEvent.:::
EventProvider#newCompilerFailureEvent():::Creates a new CompilerFailureEvent.:::
HandleCleaner#doCleanup():::Releases the resource associated with this.handle.:::if->CompilerToVM->compilerToVM->deleteGlobalHandle->else->value->UNSAFE->getLong->UNSAFE->compareAndSetLong
HandleCleaner#create(Object, long):::Registers a cleaner for handle:::new->HandleCleaner
HotSpotCodeCacheProvider#getTargetName(Call):::Decodes a call target to a mnemonic if possible.:::if->address->store->runtime->getConfigStore->foreach->store->getFields->entrySet->field->e->getValue->if->field->isStatic->return->e->getValue->Long->toHexString->return->CodeCacheProvider.super->getTargetName
HotSpotCodeCacheProvider#resetCompilationStatistics():::Resets all compilation statistics.:::runtime->getCompilerToVM->resetCompilationStatistics
HotSpotCompilationRequest#getJvmciEnv():::Gets the address of the native JVMCICompileState or 0L if no such object exists:::return
HotSpotCompilationRequest#getId():::Gets the VM allocated identifier for this compilation.:::return
HotSpotCompilationRequestResult#success(int):::Creates a result representing a successful compilation.:::return->new->HotSpotCompilationRequestResult
HotSpotCompilationRequestResult#failure(String, boolean):::Creates a result representing a failed compilation.:::return->new->HotSpotCompilationRequestResult
HotSpotConstantPool.Bytecodes#isInvokeHandleAlias(int):::See: Rewriter::maybe_rewrite_invokehandle.:::switch->return->return
HotSpotConstantPool#getEntryAt(int):::Gets the constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getAddress
HotSpotConstantPool#rawIndexToConstantPoolIndex(int, int):::Converts a raw index from the bytecodes to a constant pool index (not a cache index).:::index->if->isInvokedynamicIndex->decodeInvokedynamicIndex->config->else->rawIndexToConstantPoolCacheIndex->return->compilerToVM->constantPoolRemapInstructionOperandFromCache
HotSpotConstantPool#isSignaturePolymorphicHolder(ResolvedJavaType):::Determines if type contains signature polymorphic methods.:::name->type->getName->if->compilerToVM->getSignaturePolymorphicHolders->foreach->if->name->equals->return->return
HotSpotConstantPool#isResolvedDynamicInvoke(int, int):::Check for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).:::if->Bytecodes->isInvokeHandleAlias->methodRefCacheIndex->rawIndexToConstantPoolCacheIndex->op->compilerToVM->isResolvedInvokeHandleInPool->return->return
HotSpotInstalledCode#getSize():::Gets the value of CodeBlob::size().:::return
HotSpotInstalledCode#getStart():::Gets the value of CodeBlob::code_begin() if #isValid() valid, 0 otherwise.:::return
HotSpotInstalledCode#getCodeSize():::Gets the value of CodeBlob::code_size() if #isValid() valid, 0 otherwise.:::return
HotSpotJVMCIBackendFactory#getArchitecture():::Gets the CPU architecture of this backend.:::
HotSpotJVMCICompilerConfig#getCompilerFactory():::Gets the selected system compiler factory.:::if->factory->compilerName->getString->if->if->compilerName->isEmpty->new->DummyCompilerFactory->else->if->compilerName->equals->new->DummyCompilerFactory->else->foreach->getJVMCICompilerFactories->if->f->getCompilerName->equals->if->throw->new->JVMCIError->else->reason->foreach->getJVMCICompilerFactories->if->f->getClass->getModule->openJVMCITo->else->factory->getCompilerName->f->getCompilerName->break->if->new->DummyCompilerFactory->factory->onSelection->return
HotSpotJVMCICompilerFactory#getCompilationLevelAdjustment():::Determines if this object may want to adjust the compilation level for a method that is being scheduled by the VM for compilation.:::return
HotSpotJVMCICompilerFactory#adjustCompilationLevel(Object, String, String, boolean, CompilationLevel):::Potentially modifies the compilation level currently selected by the VM compilation policy for a method.:::throw->getClass->getName->getName->new->InternalError
HotSpotJVMCIReflection#asJavaType(HotSpotObjectConstantImpl):::Given a java.lang.Class instance, return the corresponding ResolvedJavaType.:::
HotSpotJVMCIReflection#resolveObject(HotSpotObjectConstantImpl):::Resolves objectHandle to a raw object if possible.:::
HotSpotJVMCIRuntime#runtime():::Gets the singleton HotSpotJVMCIRuntime object.:::result->if->synchronized->if->try->t->timer->new->HotSpotJVMCIRuntime->if->getFlag->result->getCompiler->catch->finally->JVMCI->getRuntime->Boolean->valueOf->Byte->valueOf->Short->valueOf->Character->valueOf->Integer->valueOf->Long->valueOf->return
HotSpotJVMCIRuntime#getHostWordKind():::Gets the kind of a word value on the #getHostJVMCIBackend() host backend.:::return->runtime->getHostJVMCIBackend->getCodeCache->getTarget
HotSpotJVMCIRuntime#fromClass(Class):::Gets the JVMCI mirror for a Class object.:::if->return->return->fromClass0
HotSpotJVMCIRuntime#getIntrinsificationTrustPredicate(Class...):::Gets a predicate that determines if a given type can be considered trusted for the purpose of intrinsifying methods it declares.:::return->new->Predicate<>
HotSpotJVMCIRuntime#getMirror(ResolvedJavaType):::Get the Class corresponding to type.:::if->return->getMirror->return
HotSpotJVMCIRuntime#lookupType(String, HotSpotResolvedObjectType, boolean):::Converts a name to a Java type:::Objects->requireNonNull->return->lookupTypeInternal
HotSpotJVMCIRuntime#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notify on successful install into the CodeCache.:::foreach->getVmEventListeners->vmEventListener->notifyInstall
HotSpotJVMCIRuntime#writeDebugOutput(byte[], int, int, boolean, boolean):::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.:::return->compilerToVm->writeDebugOutput
HotSpotJVMCIRuntime#getLogStream():::Gets an output stream that writes to HotSpot's tty stream.:::return->new->OutputStream
HotSpotJVMCIRuntime#collectCounters():::Collects the current values of all JVMCI benchmark counters, summed up over all threads.:::return->compilerToVm->collectCounters
HotSpotJVMCIRuntime#setCountersSize(int):::Attempt to enlarge the number of per thread counters available:::return->compilerToVm->setCountersSize
HotSpotJVMCIRuntime#getArrayBaseOffset(JavaKind):::The offset from the origin of an array to the first element.:::switch->return->return->return->return->return->return->return->return->return->throw->new->JVMCIError
HotSpotJVMCIRuntime#getArrayIndexScale(JavaKind):::The scale used for the index when accessing elements of an array of this kind.:::switch->return->return->return->return->return->return->return->return->return->throw->new->JVMCIError
HotSpotJVMCIRuntime#registerNativeMethods(Class):::Links each native method in clazz to an implementation in the JVMCI shared library:::return->compilerToVm->registerNativeMethods
HotSpotJVMCIRuntime#translate(Object):::Creates or retrieves an object in the peer runtime that mirrors obj:::return->compilerToVm->translate
HotSpotJVMCIRuntime#unhand(Class, long):::Dereferences and returns the object referred to by the JNI global reference handle:::return->type->compilerToVm->unhand->cast
HotSpotJVMCIRuntime#isCurrentThreadAttached():::Determines if the current thread is attached to the peer runtime.:::return->compilerToVm->isCurrentThreadAttached
HotSpotJVMCIRuntime#getCurrentJavaThread():::Gets the address of the HotSpot JavaThread C++ object for the current thread:::return->compilerToVm->getCurrentJavaThread
HotSpotJVMCIRuntime#attachCurrentThread(boolean):::Ensures the current thread is attached to the peer runtime.:::return->compilerToVm->attachCurrentThread
HotSpotJVMCIRuntime#detachCurrentThread():::Detaches the current thread from the peer runtime.:::compilerToVm->detachCurrentThread
HotSpotJVMCIRuntime#excludeFromJVMCICompilation(Module...):::Informs HotSpot that no method whose module is in modules is to be compiled with #compileMethod.:::modules->clone
HotSpotJVMCIRuntime#exitHotSpot(int):::Calls System#exit(int) in HotSpot's runtime.:::if->System->exit->compilerToVm->callSystemExit
HotSpotMetaAccessProvider#computeArrayAllocationSize(int, int, int):::Computes the size of the memory chunk allocated for an array:::config->runtime->getConfig->alignment->size->mask->return
HotSpotMethodData#isProfileMature():::Returns whether profiling ran long enough that the profile information is mature:::return->runtime->getCompilerToVM->isMature
HotSpotMethodDataAccessor#getTag():::Returns the tag stored in the LayoutData header.:::return
HotSpotMethodDataAccessor#getBCI(HotSpotMethodData, int):::Returns the BCI stored in the LayoutData header.:::return->data->readUnsignedShort
HotSpotMethodDataAccessor#getSize(HotSpotMethodData, int):::Computes the size for the specific data at the given position.:::size->getDynamicSize->vmSize->HotSpotJVMCIRuntime->runtime->methodDataProfileDataSize->return
HotSpotNmethod#inOopsTable():::Determines whether this object is in the oops table of the nmethod:::return
HotSpotNmethod#isDefault():::Determines if the nmethod associated with this object is the compiled entry point for #getMethod().:::return
HotSpotObjectConstant#getType():::Gets the resolved Java type of the object represented by this constant.:::
HotSpotObjectConstant#getIdentityHashCode():::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.:::
HotSpotObjectConstant#getCallSiteTarget(Assumptions):::Gets the result of CallSite#getTarget() for the CallSite object represented by this constant.:::
HotSpotObjectConstant#isInternedString():::Determines if this constant represents an String#intern() interned string.:::
HotSpotObjectConstant#asObject(Class):::Gets the object represented by this constant represents if it is of a given type.:::
HotSpotObjectConstant#asObject(ResolvedJavaType):::Gets the object represented by this constant represents if it is of a given type.:::
HotSpotObjectConstantScope#openLocalScope(Object):::Opens a local scope that upon closing, will release foreign object references encapsulated by HotSpotObjectConstants created in the scope.:::return->Objects->requireNonNull->new->HotSpotObjectConstantScope
HotSpotObjectConstantScope#enterGlobalScope():::Enters the global scope:::return->CURRENT->get->new->HotSpotObjectConstantScope
HotSpotObjectConstantScope#isGlobal():::Determines if this scope is global.:::return
HotSpotResolvedJavaField#isInObject(JavaConstant):::Determines if a given object contains this field.:::
HotSpotResolvedJavaField#isStable():::Determines if this field should be treated as a constant.:::
HotSpotResolvedJavaFieldImpl#isInObject(JavaConstant):::Determines if a given object contains this field.:::if->isStatic->return->constant->return->getDeclaringClass->constant->getType->isAssignableFrom
HotSpotResolvedJavaFieldImpl#getIndex():::Gets the value of this field's index (i.e:::return
HotSpotResolvedJavaFieldImpl#isStable():::Checks if this field has the Stable annotation.:::return->config
HotSpotResolvedJavaMethod#isCallerSensitive():::Returns true if this method has a CallerSensitive annotation.:::
HotSpotResolvedJavaMethod#isForceInline():::Returns true if this method has a ForceInline annotation.:::
HotSpotResolvedJavaMethod#hasReservedStackAccess():::Returns true if this method has a ReservedStackAccess annotation.:::
HotSpotResolvedJavaMethod#setNotInlinableOrCompilable():::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::
HotSpotResolvedJavaMethod#ignoredBySecurityStackWalk():::Returns true if this method is one of the special methods that is ignored by security stack walks.:::
HotSpotResolvedJavaMethod#hasCompiledCode():::Returns whether this method has compiled code.:::
HotSpotResolvedJavaMethod#vtableEntryOffset(ResolvedJavaType):::Returns the offset of this method into the v-table:::
HotSpotResolvedJavaMethod#isIntrinsicCandidate():::Determines if this method denotes itself as a candidate for intrinsification:::
HotSpotResolvedJavaMethod#allocateCompileId(int):::Allocates a compile id for this method by asking the VM for one.:::
HotSpotResolvedJavaMethodImpl#getMetaspaceMethodConstant():::Gets the address of the C++ Method object for this method.:::return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotResolvedJavaMethodImpl#getAllModifiers():::Gets the complete set of modifiers for this method which includes the JVM specification modifiers as well as the HotSpot internal modifiers.:::return->UNSAFE->getMetaspaceMethod->config->getInt
HotSpotResolvedJavaMethodImpl#isCallerSensitive():::Returns true if this method has a CallerSensitive annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#isForceInline():::Returns true if this method has a ForceInline annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#hasReservedStackAccess():::Returns true if this method has a ReservedStackAccess annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#setNotInlinableOrCompilable():::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::compilerToVM->setNotInlinableOrCompilable
HotSpotResolvedJavaMethodImpl#ignoredBySecurityStackWalk():::Returns true if this method is one of the special methods that is ignored by security stack walks.:::return->compilerToVM->methodIsIgnoredBySecurityStackWalk
HotSpotResolvedJavaMethodImpl#hasCompiledCode():::Returns whether this method has compiled code.:::return->getCompiledCode
HotSpotResolvedJavaMethodImpl#vtableEntryOffset(ResolvedJavaType):::Returns the offset of this method into the v-table:::if->isInVirtualMethodTable->throw->new->JVMCIError->config->config->vtableIndex->getVtableIndex->return
HotSpotResolvedJavaMethodImpl#allocateCompileId(int):::Allocates a compile id for this method by asking the VM for one.:::return->compilerToVM->allocateCompileId
HotSpotResolvedObjectType#instanceSize():::Gets the instance size of this type:::
HotSpotResolvedObjectType#isDefinitelyResolvedWithRespectTo(ResolvedJavaType):::Performs a fast-path check that this type is resolved in the context of a given accessing class:::
HotSpotResolvedObjectType#klass():::Gets the metaspace Klass boxed in a JavaConstant.:::
HotSpotResolvedObjectType#getFingerprint():::Gets the fingerprint for this type.:::
HotSpotResolvedObjectTypeImpl#getMetaspaceKlass():::Gets the metaspace Klass for this type.:::metaspacePointer->getMetaspacePointer->if->throw->new->NullPointerException->return
HotSpotResolvedObjectTypeImpl#instanceSize():::Gets the instance size of this type:::config->config->layoutHelper->layoutHelper->size->needsSlowPath->return
HotSpotResolvedObjectTypeImpl.FieldInfo#getName():::Returns the name of this field as a String:::nameIndex->getNameIndex->return->isInternal->config->symbolAt->getConstantPool->lookupUtf8
HotSpotResolvedObjectTypeImpl.FieldInfo#getSignature():::Returns the signature of this field as String:::signatureIndex->getSignatureIndex->return->isInternal->config->symbolAt->getConstantPool->lookupUtf8
HotSpotResolvedObjectTypeImpl#isDefinitelyResolvedWithRespectTo(ResolvedJavaType):::Performs a fast-path check that this type is resolved in the context of a given accessing class:::elementType->getElementalType->if->elementType->isPrimitive->return->if->elementType->getName->startsWith->runtime->getJavaLangObject->hasSameClassLoader->return->otherMirror->return->hasSameClassLoader
HotSpotResolvedObjectTypeImpl#klass():::Gets the metaspace Klass boxed in a JavaConstant.:::return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotSpeculationEncoding#getByteArray():::Gets the final encoded byte array and closes this encoding such that any further attempts to update it result in an IllegalArgumentException.:::if->if->try->md->SHA1->clone->MessageDigest->getInstance->md->update->md->digest->catch->throw->new->InternalError->finally->else->if->return->Arrays->copyOf->return
HotSpotSpeculationLog#getFailedSpeculationsAddress():::Gets the address of the pointer to the native failed speculations list.:::if->synchronized->if->HotSpotJVMCIRuntime->getHostWordKind->getByteCount->allocateMemory->putAddress->c->new->LogCleaner->return
HotSpotSpeculationLog#addFailedSpeculation(Speculation):::Adds speculation to the native list of failed speculations:::return->compilerToVM->getFailedSpeculationsAddress->addFailedSpeculation
HotSpotSpeculationLog#managesFailedSpeculations():::Returns true if the value returned by #getFailedSpeculationsAddress() is only valid only as long as this object is alive, false otherwise.:::return
HotSpotVMConfig#config():::Gets the configuration associated with the singleton HotSpotJVMCIRuntime.:::return->runtime->getConfig
HotSpotVMConfig#getHostArchitectureName():::Gets the host architecture name for the purpose of finding the corresponding HotSpotJVMCIBackendFactory backend.:::arch->Services->getSavedProperty->switch->return->return->return
HotSpotVMConfig#arrayPrototypeMarkWord():::See markOopDesc::prototype().:::return
HotSpotVMConfig#symbolAt(int):::Returns the symbol in the vmSymbols table at position index as a String.:::runtime->runtime->offset->return->runtime->getCompilerToVM->UNSAFE->getAddress->getSymbol
HotSpotVMConfigAccess#getStore():::Gets the available configuration data.:::return
HotSpotVMConfigAccess#getAddress(String, Long):::Gets the address of a C++ symbol.:::entry->get->if->if->return->throw->keySet->missingEntry->return
HotSpotVMConfigAccess#getAddress(String):::Gets the address of a C++ symbol.:::return->getAddress
HotSpotVMConfigAccess#getConstant(String, Class, T):::Gets the value of a C++ constant.:::c->get->if->if->return->throw->keySet->missingEntry->return->type->convertValue->cast
HotSpotVMConfigAccess#getConstant(String, Class):::Gets the value of a C++ constant.:::return->getConstant
HotSpotVMConfigAccess#getFieldOffset(String, Class, String, T):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class, T, String[]):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class, String):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldAddress(String, String, Long):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldAddress(String, Long, String[]):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldAddress(String, String):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldValue(String, Class, String, T):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class, String):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class, T, String[]):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFlag(String, Class):::Gets a VM flag value.:::return->getFlag
HotSpotVMConfigAccess#getFlag(String, Class, T):::Gets a VM flag value.:::entry->get->value->cppType->if->getFlagValue->if->if->return->throw->keySet->missingEntry->else->else->return->type->convertValue->cast
HotSpotVMConfigStore#getAddresses():::Gets the C++ symbols whose addresses are exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getConstants():::Gets the C++ constants exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getFlags():::Gets the VM flags exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getFields():::Gets the C++ fields exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getIntrinsics():::Gets the VM intrinsic descriptions exposed by this object.:::return->Collections->unmodifiableList
HotSpotVMEventListener#notifyShutdown():::Notifies this client that the VM is shutting down.:::
HotSpotVMEventListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notify on successful install into the code cache.:::
HotSpotVMEventListener#notifyBootstrapFinished():::Notify on completion of a bootstrap.:::
IndirectHotSpotObjectConstantImpl#clear(Object):::Clears the foreign object reference.:::checkHandle->CompilerToVM->compilerToVM->deleteGlobalHandle->if
TranslatedException#fillInStackTrace():::No need to record an initial stack trace since it will be manually overwritten.:::return
TranslatedException#encodeThrowable(Throwable):::Encodes throwable including its stack and causes as a string:::try->enc->new->Formatter->throwables->new->ArrayList<>->for->current->current->getCause->Collections->reverse->foreach->enc->current->getClass->getName->current->getMessage->encodeMessage->encodedString->format->stackTrace->current->getStackTrace->if->new->StackTraceElementArr->enc->format->for->i->return->enc->toString->catch->try->return->e->getClass->getName->e->getMessage->encodedString->catch->return->finally->finally
TranslatedException#decodeThrowable(String):::Decodes encodedThrowable into a TranslatedException.:::try->i->parts->encodedThrowable->split->cause->throwable->while->exceptionClassName->exceptionMessage->decodeMessage->create->stackTraceDepth->Integer->parseInt->suffix->getStackTraceSuffix->stackTrace->new->StackTraceElementArr->for->j->System->arraycopy->throwable->setStackTrace->return->catch->return->new->TranslatedException->finally
VMField#isStatic():::Determines if the represented field is static.:::return

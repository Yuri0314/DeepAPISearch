jdk.vm.ci.hotspot.Cleaner#doCleanup()->void:::Performs the cleanup action now that this object's referent has become weakly reachable.
jdk.vm.ci.hotspot.Cleaner#clean()->void:::Remove the cleaners whose referents have become weakly reachable.
jdk.vm.ci.hotspot.CompilerToVM#arrayBaseOffset(JavaKind)->int::: compiler to m array base offset
jdk.vm.ci.hotspot.CompilerToVM#arrayIndexScale(JavaKind)->int::: compiler to m array index scale
jdk.vm.ci.hotspot.CompilerToVM#compilerToVM()->CompilerToVM:::Gets the CompilerToVM instance associated with the singleton HotSpotJVMCIRuntime instance.
jdk.vm.ci.hotspot.CompilerToVM#getBytecode(HotSpotResolvedJavaMethodImpl)->byte[]:::Copies the original bytecode of method into a new byte array and returns it.
jdk.vm.ci.hotspot.CompilerToVM#getExceptionTableLength(HotSpotResolvedJavaMethodImpl)->int:::Gets the number of entries in method's exception handler table or 0 if it has no exception handler table.
jdk.vm.ci.hotspot.CompilerToVM#getExceptionTableStart(HotSpotResolvedJavaMethodImpl)->long:::Gets the address of the first entry in method's exception handler table
jdk.vm.ci.hotspot.CompilerToVM#isCompilable(HotSpotResolvedJavaMethodImpl)->boolean:::Determines whether method is currently compilable by the JVMCI compiler being used by the VM
jdk.vm.ci.hotspot.CompilerToVM#hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl)->boolean:::Determines if method is targeted by a VM directive (e.g., -XX:CompileCommand=dontinline,<pattern>) or annotation (e.g., jdk.internal.vm.annotation.DontInline) that specifies it should not be inlined.
jdk.vm.ci.hotspot.CompilerToVM#shouldInlineMethod(HotSpotResolvedJavaMethodImpl)->boolean:::Determines if method should be inlined at any cost
jdk.vm.ci.hotspot.CompilerToVM#findUniqueConcreteMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl)->HotSpotResolvedJavaMethodImpl:::Used to implement ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod).
jdk.vm.ci.hotspot.CompilerToVM#getImplementor(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectTypeImpl:::Gets the implementor for the interface class type.
jdk.vm.ci.hotspot.CompilerToVM#methodIsIgnoredBySecurityStackWalk(HotSpotResolvedJavaMethodImpl)->boolean:::Determines if method is ignored by security stack walks.
jdk.vm.ci.hotspot.CompilerToVM#lookupType(String, HotSpotResolvedObjectTypeImpl, boolean)->HotSpotResolvedJavaType:::Converts a name to a type.
jdk.vm.ci.hotspot.CompilerToVM#lookupClass(Class)->HotSpotResolvedJavaType::: compiler to m lookup class
jdk.vm.ci.hotspot.CompilerToVM#resolvePossiblyCachedConstantInPool(HotSpotConstantPool, int)->HotSpotObjectConstantImpl:::Resolves the entry at index cpi in constantPool to an object, looking in the constant pool cache first
jdk.vm.ci.hotspot.CompilerToVM#lookupNameAndTypeRefIndexInPool(HotSpotConstantPool, int)->int:::Gets the JVM_CONSTANT_NameAndType index from the entry at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupNameInPool(HotSpotConstantPool, int)->String:::Gets the name of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupSignatureInPool(HotSpotConstantPool, int)->String:::Gets the signature of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupKlassRefIndexInPool(HotSpotConstantPool, int)->int:::Gets the JVM_CONSTANT_Class index from the entry at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupKlassInPool(HotSpotConstantPool, int)->Object:::Looks up a class denoted by the JVM_CONSTANT_Class entry at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupMethodInPool(HotSpotConstantPool, int, byte)->HotSpotResolvedJavaMethodImpl:::Looks up a method denoted by the entry at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#resolveInvokeDynamicInPool(HotSpotConstantPool, int)->void:::Ensures that the type referenced by the specified JVM_CONSTANT_InvokeDynamic entry at index cpi in constantPool is loaded and initialized
jdk.vm.ci.hotspot.CompilerToVM#resolveInvokeHandleInPool(HotSpotConstantPool, int)->void:::If cpi denotes an entry representing a signature polymorphic method, this method ensures that the type referenced by the entry is loaded and initialized
jdk.vm.ci.hotspot.CompilerToVM#isResolvedInvokeHandleInPool(HotSpotConstantPool, int)->int:::If cpi denotes an entry representing a resolved dynamic adapter (see #resolveInvokeDynamicInPool and #resolveInvokeHandleInPool), return the opcode of the instruction for which the resolution was performed (invokedynamic or invokevirtual), or -1 otherwise.
jdk.vm.ci.hotspot.CompilerToVM#getSignaturePolymorphicHolders()->String[]:::Gets the list of type names (in the format of JavaType#getName()) denoting the classes that define signature polymorphic methods.
jdk.vm.ci.hotspot.CompilerToVM#resolveTypeInPool(HotSpotConstantPool, int)->HotSpotResolvedObjectTypeImpl:::Gets the resolved type denoted by the entry at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#resolveFieldInPool(HotSpotConstantPool, int, HotSpotResolvedJavaMethodImpl, byte, int[])->HotSpotResolvedObjectTypeImpl:::Looks up and attempts to resolve the JVM_CONSTANT_Field entry for at index cpi in constantPool
jdk.vm.ci.hotspot.CompilerToVM#constantPoolRemapInstructionOperandFromCache(HotSpotConstantPool, int)->int:::Converts cpci from an index into the cache for constantPool to an index directly into constantPool
jdk.vm.ci.hotspot.CompilerToVM#lookupAppendixInPool(HotSpotConstantPool, int)->HotSpotObjectConstantImpl:::Gets the appendix object (if any) associated with the entry at index cpi in constantPool.
jdk.vm.ci.hotspot.CompilerToVM#installCode(TargetDescription, HotSpotCompiledCode, InstalledCode, long, byte[])->int:::Installs the result of a compilation into the code cache.
jdk.vm.ci.hotspot.CompilerToVM#getMetadata(TargetDescription, HotSpotCompiledCode, HotSpotMetaData)->int:::Generates the VM metadata for some compiled code and copies them into metaData
jdk.vm.ci.hotspot.CompilerToVM#resetCompilationStatistics()->void:::Resets all compilation statistics.
jdk.vm.ci.hotspot.CompilerToVM#readConfiguration()->Object[]:::Reads the database of VM info
jdk.vm.ci.hotspot.CompilerToVM#resolveMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl, HotSpotResolvedObjectTypeImpl)->HotSpotResolvedJavaMethodImpl:::Resolves the implementation of method for virtual dispatches on objects of dynamic type exactReceiver
jdk.vm.ci.hotspot.CompilerToVM#getClassInitializer(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedJavaMethodImpl:::Gets the static initializer of type.
jdk.vm.ci.hotspot.CompilerToVM#hasFinalizableSubclass(HotSpotResolvedObjectTypeImpl)->boolean:::Determines if type or any of its currently loaded subclasses overrides Object.finalize().
jdk.vm.ci.hotspot.CompilerToVM#asResolvedJavaMethod(Executable)->HotSpotResolvedJavaMethodImpl:::Gets the method corresponding to executable.
jdk.vm.ci.hotspot.CompilerToVM#getMaxCallTargetOffset(long)->long:::Gets the maximum absolute offset of a PC relative call to address from any position in the code cache.
jdk.vm.ci.hotspot.CompilerToVM#disassembleCodeBlob(InstalledCode)->String::: compiler to m disassemble code blob
jdk.vm.ci.hotspot.CompilerToVM#getStackTraceElement(HotSpotResolvedJavaMethodImpl, int)->StackTraceElement:::Gets a stack trace element for method at bytecode index bci.
jdk.vm.ci.hotspot.CompilerToVM#executeHotSpotNmethod(Object[], HotSpotNmethod)->Object:::Executes some installedCode with arguments args.
jdk.vm.ci.hotspot.CompilerToVM#getLineNumberTable(HotSpotResolvedJavaMethodImpl)->long[]:::Gets the line number table for method
jdk.vm.ci.hotspot.CompilerToVM#getLocalVariableTableLength(HotSpotResolvedJavaMethodImpl)->int:::Gets the number of entries in the local variable table for method.
jdk.vm.ci.hotspot.CompilerToVM#getLocalVariableTableStart(HotSpotResolvedJavaMethodImpl)->long:::Gets the address of the first entry in the local variable table for method
jdk.vm.ci.hotspot.CompilerToVM#readUncompressedOop(long)->HotSpotObjectConstantImpl:::Reads an object pointer within a VM data structure
jdk.vm.ci.hotspot.CompilerToVM#setNotInlinableOrCompilable(HotSpotResolvedJavaMethodImpl)->void:::Sets flags on method indicating that it should never be inlined or compiled by the VM.
jdk.vm.ci.hotspot.CompilerToVM#reprofile(HotSpotResolvedJavaMethodImpl)->void:::Invalidates the profiling information for method and (re)initializes it such that profiling restarts upon its next invocation.
jdk.vm.ci.hotspot.CompilerToVM#invalidateHotSpotNmethod(HotSpotNmethod)->void:::Invalidates nmethodMirror such that InvalidInstalledCodeException will be raised the next time nmethodMirror is #executeHotSpotNmethod executed
jdk.vm.ci.hotspot.CompilerToVM#collectCounters()->long[]:::Collects the current values of all JVMCI benchmark counters, summed up over all threads.
jdk.vm.ci.hotspot.CompilerToVM#getCountersSize()->int:::Get the current number of counters allocated for use by JVMCI
jdk.vm.ci.hotspot.CompilerToVM#setCountersSize(int)->boolean:::Attempt to change the size of the counters allocated for JVMCI
jdk.vm.ci.hotspot.CompilerToVM#isMature(long)->boolean:::Determines if metaspaceMethodData is mature.
jdk.vm.ci.hotspot.CompilerToVM#allocateCompileId(HotSpotResolvedJavaMethodImpl, int)->int:::Generate a unique id to identify the result of the compile.
jdk.vm.ci.hotspot.CompilerToVM#hasCompiledCodeForOSR(HotSpotResolvedJavaMethodImpl, int, int)->boolean:::Determines if method has OSR compiled code identified by entryBCI for compilation level level.
jdk.vm.ci.hotspot.CompilerToVM#getSymbol(long)->String:::Gets the value of metaspaceSymbol as a String.
jdk.vm.ci.hotspot.CompilerToVM#iterateFrames(ResolvedJavaMethod[], ResolvedJavaMethod[], int, InspectedFrameVisitor)->T::: compiler to m iterate frames
jdk.vm.ci.hotspot.CompilerToVM#materializeVirtualObjects(HotSpotStackFrameReference, boolean)->void:::Materializes all virtual objects within stackFrame and updates its locals.
jdk.vm.ci.hotspot.CompilerToVM#getVtableIndexForInterfaceMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl)->int:::Gets the v-table index for interface method method in the receiver type or HotSpotVMConfig#invalidVtableIndex if method is not in type's v-table.
jdk.vm.ci.hotspot.CompilerToVM#shouldDebugNonSafepoints()->boolean:::Determines if debug info should also be emitted at non-safepoint locations.
jdk.vm.ci.hotspot.CompilerToVM#writeDebugOutput(byte[], int, int, boolean, boolean)->int:::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.
jdk.vm.ci.hotspot.CompilerToVM#flushDebugOutput()->void:::Flush HotSpot's log stream.
jdk.vm.ci.hotspot.CompilerToVM#getResolvedJavaMethod(HotSpotObjectConstantImpl, long)->HotSpotResolvedJavaMethodImpl:::Read a HotSpot Method* value from the memory location described by base plus displacement and return the HotSpotResolvedJavaMethodImpl wrapping it
jdk.vm.ci.hotspot.CompilerToVM#getConstantPool(MetaspaceObject)->HotSpotConstantPool:::Gets the ConstantPool* associated with object and returns a HotSpotConstantPool wrapping it.
jdk.vm.ci.hotspot.CompilerToVM#getResolvedJavaType(MetaspaceObject, long, boolean)->HotSpotResolvedObjectTypeImpl::: compiler to m get resolved java type
jdk.vm.ci.hotspot.CompilerToVM#getResolvedJavaType(HotSpotObjectConstantImpl, long, boolean)->HotSpotResolvedObjectTypeImpl::: compiler to m get resolved java type
jdk.vm.ci.hotspot.CompilerToVM#getResolvedJavaType(long, boolean)->HotSpotResolvedObjectTypeImpl::: compiler to m get resolved java type
jdk.vm.ci.hotspot.CompilerToVM#methodDataProfileDataSize(long, int)->int:::Return the size of the HotSpot ProfileData* pointed at by position
jdk.vm.ci.hotspot.CompilerToVM#getFingerprint(long)->long:::Gets the fingerprint for a given Klass*.
jdk.vm.ci.hotspot.CompilerToVM#interpreterFrameSize(BytecodeFrame)->int:::Return the amount of native stack required for the interpreter frames represented by frame
jdk.vm.ci.hotspot.CompilerToVM#compileToBytecode(HotSpotObjectConstantImpl)->void:::Invokes non-public method java.lang.invoke.LambdaForm.compileToBytecode() on lambdaForm (which must be a java.lang.invoke.LambdaForm instance).
jdk.vm.ci.hotspot.CompilerToVM#getFlagValue(String)->Object:::Gets the value of the VM flag named name.
jdk.vm.ci.hotspot.CompilerToVM#getHostClass(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectTypeImpl:::Gets the host class for type.
jdk.vm.ci.hotspot.CompilerToVM#getObjectAtAddress(long)->Object:::Gets the object at the address oopAddress.
jdk.vm.ci.hotspot.CompilerToVM#getInterfaces(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectTypeImpl[]::: compiler to m get interfaces
jdk.vm.ci.hotspot.CompilerToVM#getComponentType(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedJavaType::: compiler to m get component type
jdk.vm.ci.hotspot.CompilerToVM#getArrayType(HotSpotResolvedJavaType)->HotSpotResolvedObjectTypeImpl:::Get the array class for type
jdk.vm.ci.hotspot.CompilerToVM#ensureInitialized(HotSpotResolvedObjectTypeImpl)->void:::Forces initialization of type.
jdk.vm.ci.hotspot.CompilerToVM#isInternedString(HotSpotObjectConstantImpl)->boolean:::Checks if object is a String and is an interned string value.
jdk.vm.ci.hotspot.CompilerToVM#getIdentityHashCode(HotSpotObjectConstantImpl)->int:::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.
jdk.vm.ci.hotspot.CompilerToVM#unboxPrimitive(HotSpotObjectConstantImpl)->Object:::Converts a constant object representing a boxed primitive into a boxed primitive.
jdk.vm.ci.hotspot.CompilerToVM#boxPrimitive(Object)->HotSpotObjectConstantImpl:::Converts a boxed primitive into a JavaConstant representing the same value.
jdk.vm.ci.hotspot.CompilerToVM#getDeclaredConstructors(HotSpotResolvedObjectTypeImpl)->ResolvedJavaMethod[]:::Gets the ResolvedJavaMethods for all the constructors of the type holder.
jdk.vm.ci.hotspot.CompilerToVM#getDeclaredMethods(HotSpotResolvedObjectTypeImpl)->ResolvedJavaMethod[]:::Gets the ResolvedJavaMethods for all the non-constructor methods of the type holder.
jdk.vm.ci.hotspot.CompilerToVM#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)->JavaConstant:::Reads the current value of a static field.
jdk.vm.ci.hotspot.CompilerToVM#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)->JavaConstant:::Reads the current value of an instance field.
jdk.vm.ci.hotspot.CompilerToVM#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)->boolean::: compiler to m is instance
jdk.vm.ci.hotspot.CompilerToVM#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)->boolean::: compiler to m is assignable from
jdk.vm.ci.hotspot.CompilerToVM#asJavaType(HotSpotObjectConstantImpl)->HotSpotResolvedJavaType::: compiler to m as java type
jdk.vm.ci.hotspot.CompilerToVM#asString(HotSpotObjectConstantImpl)->String:::Converts a String constant into a String.
jdk.vm.ci.hotspot.CompilerToVM#equals(HotSpotObjectConstantImpl, long, HotSpotObjectConstantImpl, long)->boolean:::Compares the contents of xHandle and yHandle for pointer equality.
jdk.vm.ci.hotspot.CompilerToVM#getJavaMirror(HotSpotResolvedJavaType)->HotSpotObjectConstantImpl:::Gets a JavaConstant wrapping the java.lang.Class mirror for type.
jdk.vm.ci.hotspot.CompilerToVM#getArrayLength(HotSpotObjectConstantImpl)->int:::Returns the length of the array if object represents an array or -1 otherwise.
jdk.vm.ci.hotspot.CompilerToVM#readArrayElement(HotSpotObjectConstantImpl, int)->Object:::Reads the element at index if object is an array
jdk.vm.ci.hotspot.CompilerToVM#getByte(HotSpotObjectConstantImpl, long)->byte:::Reads a byte sized value from displacement in object.
jdk.vm.ci.hotspot.CompilerToVM#getShort(HotSpotObjectConstantImpl, long)->short:::Reads a short sized value from displacement in object.
jdk.vm.ci.hotspot.CompilerToVM#getInt(HotSpotObjectConstantImpl, long)->int:::Reads an int sized value from displacement in object.
jdk.vm.ci.hotspot.CompilerToVM#getLong(HotSpotObjectConstantImpl, long)->long:::Reads a long sized value from displacement in object.
jdk.vm.ci.hotspot.CompilerToVM#getObject(HotSpotObjectConstantImpl, long)->HotSpotObjectConstantImpl:::Reads a Java object from displacement in object.
jdk.vm.ci.hotspot.CompilerToVM#registerNativeMethods(Class)->long[]::: compiler to m register native methods
jdk.vm.ci.hotspot.CompilerToVM#translate(Object)->long::: compiler to m translate
jdk.vm.ci.hotspot.CompilerToVM#unhand(long)->Object::: compiler to m unhand
jdk.vm.ci.hotspot.CompilerToVM#updateHotSpotNmethod(HotSpotNmethod)->void:::Updates address and entryPoint fields of nmethodMirror based on the current state of the nmethod identified by address and nmethodMirror.compileId in the code cache.
jdk.vm.ci.hotspot.CompilerToVM#getCode(HotSpotInstalledCode)->byte[]::: compiler to m get code
jdk.vm.ci.hotspot.CompilerToVM#asReflectionExecutable(HotSpotResolvedJavaMethodImpl)->Executable:::Gets a Executable corresponding to method.
jdk.vm.ci.hotspot.CompilerToVM#asReflectionField(HotSpotResolvedObjectTypeImpl, int)->Field:::Gets a Field denoted by holder and index.
jdk.vm.ci.hotspot.CompilerToVM#isTrustedForIntrinsics(HotSpotResolvedObjectTypeImpl)->boolean::: compiler to m is trusted for intrinsics
jdk.vm.ci.hotspot.CompilerToVM#deleteGlobalHandle(long)->void:::Releases the resources backing the global JNI handle
jdk.vm.ci.hotspot.CompilerToVM#getFailedSpeculations(long, byte[][])->byte[][]:::Gets the failed speculations pointed to by *failedSpeculationsAddress.
jdk.vm.ci.hotspot.CompilerToVM#getFailedSpeculationsAddress(HotSpotResolvedJavaMethodImpl)->long:::Gets the address of the MethodData::_failed_speculations field in the MethodData associated with method
jdk.vm.ci.hotspot.CompilerToVM#releaseFailedSpeculations(long)->void:::Frees the failed speculations pointed to by *failedSpeculationsAddress.
jdk.vm.ci.hotspot.CompilerToVM#addFailedSpeculation(long, byte[])->boolean:::Adds a speculation to the failed speculations pointed to by *failedSpeculationsAddress.
jdk.vm.ci.hotspot.CompilerToVM#isCurrentThreadAttached()->boolean::: compiler to m is current thread attached
jdk.vm.ci.hotspot.CompilerToVM#getCurrentJavaThread()->long::: compiler to m get current java thread
jdk.vm.ci.hotspot.CompilerToVM#attachCurrentThread(boolean)->boolean::: compiler to m attach current thread
jdk.vm.ci.hotspot.CompilerToVM#detachCurrentThread()->void::: compiler to m detach current thread
jdk.vm.ci.hotspot.CompilerToVM#callSystemExit(int)->void::: compiler to m call system exit
jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl#forObject(Object, boolean)->JavaConstant::: direct hot spot object constant impl for object
jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl#forNonNullObject(Object, boolean)->HotSpotObjectConstantImpl::: direct hot spot object constant impl for non null object
jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl#compress()->JavaConstant::: direct hot spot object constant impl compress
jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl#uncompress()->JavaConstant::: direct hot spot object constant impl uncompress
jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl#getIdentityHashCode()->int::: direct hot spot object constant impl get identity hash code
jdk.vm.ci.hotspot.EmptyEventProvider#shouldNotReachHere()->InternalError::: empty event provider should not reach here
jdk.vm.ci.hotspot.EmptyEventProvider#newCompilationEvent()->CompilationEvent::: empty event provider new compilation event
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#commit()->void::: empty compilation event commit
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#shouldWrite()->boolean::: empty compilation event should write
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#begin()->void::: empty compilation event begin
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#end()->void::: empty compilation event end
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setMethod(String)->void::: empty compilation event set method
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setCompileId(int)->void::: empty compilation event set compile id
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setCompileLevel(int)->void::: empty compilation event set compile level
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setSucceeded(boolean)->void::: empty compilation event set succeeded
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setIsOsr(boolean)->void::: empty compilation event set is osr
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setCodeSize(int)->void::: empty compilation event set code size
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilationEvent#setInlinedBytes(int)->void::: empty compilation event set inlined bytes
jdk.vm.ci.hotspot.EmptyEventProvider#newCompilerFailureEvent()->CompilerFailureEvent::: empty event provider new compiler failure event
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilerFailureEvent#commit()->void::: empty compiler failure event commit
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilerFailureEvent#shouldWrite()->boolean::: empty compiler failure event should write
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilerFailureEvent#setCompileId(int)->void::: empty compiler failure event set compile id
jdk.vm.ci.hotspot.EmptyEventProvider.EmptyCompilerFailureEvent#setMessage(String)->void::: empty compiler failure event set message
jdk.vm.ci.hotspot.EventProvider#createEmptyEventProvider()->EventProvider:::Creates and returns an empty implementation for EventProvider
jdk.vm.ci.hotspot.EventProvider#createEmptyCompilationEvent()->CompilationEvent:::Creates and returns an empty implementation for CompilationEvent.
jdk.vm.ci.hotspot.EventProvider#createEmptyCompilerFailureEvent()->CompilerFailureEvent:::Creates and returns an empty implementation for CompilationEvent.
jdk.vm.ci.hotspot.EventProvider.InstantEvent#commit()->void:::Commits the event.
jdk.vm.ci.hotspot.EventProvider.InstantEvent#shouldWrite()->boolean:::Determines if this particular event instance would be committed to the data stream right now if application called #commit()
jdk.vm.ci.hotspot.EventProvider.TimedEvent#begin()->void:::Starts the timing for this event.
jdk.vm.ci.hotspot.EventProvider.TimedEvent#end()->void:::Ends the timing period for this event.
jdk.vm.ci.hotspot.EventProvider#newCompilationEvent()->CompilationEvent:::Creates a new CompilationEvent.
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setMethod(String)->void::: compilation event set method
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setCompileId(int)->void::: compilation event set compile id
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setCompileLevel(int)->void::: compilation event set compile level
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setSucceeded(boolean)->void::: compilation event set succeeded
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setIsOsr(boolean)->void::: compilation event set is osr
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setCodeSize(int)->void::: compilation event set code size
jdk.vm.ci.hotspot.EventProvider.CompilationEvent#setInlinedBytes(int)->void::: compilation event set inlined bytes
jdk.vm.ci.hotspot.EventProvider#newCompilerFailureEvent()->CompilerFailureEvent:::Creates a new CompilerFailureEvent.
jdk.vm.ci.hotspot.EventProvider.CompilerFailureEvent#setCompileId(int)->void::: compiler failure event set compile id
jdk.vm.ci.hotspot.EventProvider.CompilerFailureEvent#setMessage(String)->void::: compiler failure event set message
jdk.vm.ci.hotspot.HandleCleaner#doCleanup()->void:::Releases the resource associated with this.handle.
jdk.vm.ci.hotspot.HandleCleaner#create(Object, long)->void:::Registers a cleaner for handle
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getMarkName(Mark)->String::: hot spot code cache provider get mark name
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getTargetName(Call)->String:::Decodes a call target to a mnemonic if possible.
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getRegisterConfig()->RegisterConfig::: hot spot code cache provider get register config
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getMinimumOutgoingSize()->int::: hot spot code cache provider get minimum outgoing size
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#installCode(ResolvedJavaMethod, CompiledCode, InstalledCode, SpeculationLog, boolean)->InstalledCode::: hot spot code cache provider install code
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#invalidateInstalledCode(InstalledCode)->void::: hot spot code cache provider invalidate installed code
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getTarget()->TargetDescription::: hot spot code cache provider get target
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#disassemble(InstalledCode)->String::: hot spot code cache provider disassemble
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#createSpeculationLog()->SpeculationLog::: hot spot code cache provider create speculation log
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#getMaxCallTargetOffset(long)->long::: hot spot code cache provider get max call target offset
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#shouldDebugNonSafepoints()->boolean::: hot spot code cache provider should debug non safepoints
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#interpreterFrameSize(BytecodeFrame)->int::: hot spot code cache provider interpreter frame size
jdk.vm.ci.hotspot.HotSpotCodeCacheProvider#resetCompilationStatistics()->void:::Resets all compilation statistics.
jdk.vm.ci.hotspot.HotSpotCompilationRequest#getMethod()->HotSpotResolvedJavaMethod::: hot spot compilation request get method
jdk.vm.ci.hotspot.HotSpotCompilationRequest#getJvmciEnv()->long:::Gets the address of the native JVMCICompileState or 0L if no such object exists
jdk.vm.ci.hotspot.HotSpotCompilationRequest#getId()->int:::Gets the VM allocated identifier for this compilation.
jdk.vm.ci.hotspot.HotSpotCompilationRequest#toString()->String::: hot spot compilation request to string
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#getFailure()->Object::: hot spot compilation request result get failure
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#success(int)->HotSpotCompilationRequestResult:::Creates a result representing a successful compilation.
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#failure(String, boolean)->HotSpotCompilationRequestResult:::Creates a result representing a failed compilation.
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#getFailureMessage()->String::: hot spot compilation request result get failure message
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#getRetry()->boolean::: hot spot compilation request result get retry
jdk.vm.ci.hotspot.HotSpotCompilationRequestResult#getInlinedBytecodes()->int::: hot spot compilation request result get inlined bytecodes
jdk.vm.ci.hotspot.HotSpotCompiledCode#getName()->String::: hot spot compiled code get name
jdk.vm.ci.hotspot.HotSpotCompiledCode#toString()->String::: hot spot compiled code to string
jdk.vm.ci.hotspot.HotSpotCompiledCode#verifyVirtualObject(VirtualObject)->void::: hot spot compiled code verify virtual object
jdk.vm.ci.hotspot.HotSpotCompiledNmethod#toString()->String::: hot spot compiled nmethod to string
jdk.vm.ci.hotspot.HotSpotCompiledNmethod#getInstallationFailureMessage()->String::: hot spot compiled nmethod get installation failure message
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#getJavaKind()->JavaKind::: hot spot compressed null constant get java kind
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#isNull()->boolean::: hot spot compressed null constant is null
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#isCompressed()->boolean::: hot spot compressed null constant is compressed
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#compress()->Constant::: hot spot compressed null constant compress
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#uncompress()->Constant::: hot spot compressed null constant uncompress
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#isDefaultForKind()->boolean::: hot spot compressed null constant is default for kind
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asBoxedPrimitive()->Object::: hot spot compressed null constant as boxed primitive
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asInt()->int::: hot spot compressed null constant as int
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asBoolean()->boolean::: hot spot compressed null constant as boolean
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asLong()->long::: hot spot compressed null constant as long
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asFloat()->float::: hot spot compressed null constant as float
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#asDouble()->double::: hot spot compressed null constant as double
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#toString()->String::: hot spot compressed null constant to string
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#toValueString()->String::: hot spot compressed null constant to value string
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#hashCode()->int::: hot spot compressed null constant hash code
jdk.vm.ci.hotspot.HotSpotCompressedNullConstant#equals(Object)->boolean::: hot spot compressed null constant equals
jdk.vm.ci.hotspot.HotSpotConstant#isCompressed()->boolean::: hot spot constant is compressed
jdk.vm.ci.hotspot.HotSpotConstant#compress()->Constant::: hot spot constant compress
jdk.vm.ci.hotspot.HotSpotConstant#uncompress()->Constant::: hot spot constant uncompress
jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes#isInvoke(int)->boolean::: bytecodes is invoke
jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes#isInvokeHandleAlias(int)->boolean:::See: Rewriter::maybe_rewrite_invokehandle.
jdk.vm.ci.hotspot.HotSpotConstantPool.JvmConstant#toString()->String::: jvm constant to string
jdk.vm.ci.hotspot.HotSpotConstantPool.JvmConstants#get(int)->JvmConstant::: jvm constants get
jdk.vm.ci.hotspot.HotSpotConstantPool.JvmConstants#instance()->JvmConstants::: jvm constants instance
jdk.vm.ci.hotspot.HotSpotConstantPool#getMetaspaceConstantPool()->long::: hot spot constant pool get metaspace constant pool
jdk.vm.ci.hotspot.HotSpotConstantPool#getMetadataHandle()->long::: hot spot constant pool get metadata handle
jdk.vm.ci.hotspot.HotSpotConstantPool#getEntryAt(int)->long:::Gets the constant pool entry at index index.
jdk.vm.ci.hotspot.HotSpotConstantPool#length()->int::: hot spot constant pool length
jdk.vm.ci.hotspot.HotSpotConstantPool#hasDynamicConstant()->boolean::: hot spot constant pool has dynamic constant
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupConstant(int)->Object::: hot spot constant pool lookup constant
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupUtf8(int)->String::: hot spot constant pool lookup utf8
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupSignature(int)->Signature::: hot spot constant pool lookup signature
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupAppendix(int, int)->JavaConstant::: hot spot constant pool lookup appendix
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupMethod(int, int)->JavaMethod::: hot spot constant pool lookup method
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupType(int, int)->JavaType::: hot spot constant pool lookup type
jdk.vm.ci.hotspot.HotSpotConstantPool#lookupField(int, ResolvedJavaMethod, int)->JavaField::: hot spot constant pool lookup field
jdk.vm.ci.hotspot.HotSpotConstantPool#rawIndexToConstantPoolIndex(int, int)->int:::Converts a raw index from the bytecodes to a constant pool index (not a cache index).
jdk.vm.ci.hotspot.HotSpotConstantPool#loadReferencedType(int, int)->void::: hot spot constant pool load referenced type
jdk.vm.ci.hotspot.HotSpotConstantPool#loadReferencedType(int, int, boolean)->void::: hot spot constant pool load referenced type
jdk.vm.ci.hotspot.HotSpotConstantPool#isSignaturePolymorphicHolder(ResolvedJavaType)->boolean:::Determines if type contains signature polymorphic methods.
jdk.vm.ci.hotspot.HotSpotConstantPool#isResolvedDynamicInvoke(int, int)->boolean:::Check for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).
jdk.vm.ci.hotspot.HotSpotConstantPool#toString()->String::: hot spot constant pool to string
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#forObject(HotSpotResolvedObjectType, int, JavaConstant)->JavaConstant::: hot spot constant pool object for object
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#getCpType()->HotSpotResolvedObjectType::: hot spot constant pool object get cp type
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#getCpi()->int::: hot spot constant pool object get cpi
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#equals(Object)->boolean::: hot spot constant pool object equals
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#hashCode()->int::: hot spot constant pool object hash code
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#getJavaKind()->JavaKind::: hot spot constant pool object get java kind
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#isNull()->boolean::: hot spot constant pool object is null
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#isDefaultForKind()->boolean::: hot spot constant pool object is default for kind
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asBoxedPrimitive()->Object::: hot spot constant pool object as boxed primitive
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asInt()->int::: hot spot constant pool object as int
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asBoolean()->boolean::: hot spot constant pool object as boolean
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asLong()->long::: hot spot constant pool object as long
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asFloat()->float::: hot spot constant pool object as float
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#asDouble()->double::: hot spot constant pool object as double
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#toValueString()->String::: hot spot constant pool object to value string
jdk.vm.ci.hotspot.HotSpotConstantPoolObject#toString()->String::: hot spot constant pool object to string
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#getMethodHandleAccess()->MethodHandleAccessProvider::: hot spot constant reflection provider get method handle access
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#getMemoryAccessProvider()->MemoryAccessProvider::: hot spot constant reflection provider get memory access provider
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#constantEquals(Constant, Constant)->Boolean::: hot spot constant reflection provider constant equals
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#readArrayLength(JavaConstant)->Integer::: hot spot constant reflection provider read array length
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#readArrayElement(JavaConstant, int)->JavaConstant::: hot spot constant reflection provider read array element
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#boxPrimitive(JavaConstant)->JavaConstant::: hot spot constant reflection provider box primitive
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#unboxPrimitive(JavaConstant)->JavaConstant::: hot spot constant reflection provider unbox primitive
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#forString(String)->JavaConstant::: hot spot constant reflection provider for string
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#forObject(Object)->JavaConstant::: hot spot constant reflection provider for object
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#asJavaType(Constant)->ResolvedJavaType::: hot spot constant reflection provider as java type
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant)->JavaConstant::: hot spot constant reflection provider read field value
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#asJavaClass(ResolvedJavaType)->JavaConstant::: hot spot constant reflection provider as java class
jdk.vm.ci.hotspot.HotSpotConstantReflectionProvider#asObjectHub(ResolvedJavaType)->Constant::: hot spot constant reflection provider as object hub
jdk.vm.ci.hotspot.HotSpotInstalledCode#getSize()->int:::Gets the value of CodeBlob::size().
jdk.vm.ci.hotspot.HotSpotInstalledCode#toString()->String::: hot spot installed code to string
jdk.vm.ci.hotspot.HotSpotInstalledCode#getStart()->long:::Gets the value of CodeBlob::code_begin() if #isValid() valid, 0 otherwise.
jdk.vm.ci.hotspot.HotSpotInstalledCode#getCodeSize()->long:::Gets the value of CodeBlob::code_size() if #isValid() valid, 0 otherwise.
jdk.vm.ci.hotspot.HotSpotInstalledCode#getCode()->byte[]::: hot spot installed code get code
jdk.vm.ci.hotspot.HotSpotJavaType#getName()->String::: hot spot java type get name
jdk.vm.ci.hotspot.HotSpotJDKReflection#resolveObject(HotSpotObjectConstantImpl)->Object::: hot spot reflection resolve object
jdk.vm.ci.hotspot.HotSpotJDKReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)->boolean::: hot spot reflection is instance
jdk.vm.ci.hotspot.HotSpotJDKReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is assignable from
jdk.vm.ci.hotspot.HotSpotJDKReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: hot spot reflection get annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: hot spot reflection get declared annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)->T::: hot spot reflection get annotation
jdk.vm.ci.hotspot.HotSpotJDKReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is local class
jdk.vm.ci.hotspot.HotSpotJDKReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is member class
jdk.vm.ci.hotspot.HotSpotJDKReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectType::: hot spot reflection get enclosing class
jdk.vm.ci.hotspot.HotSpotJDKReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot reflection read field value
jdk.vm.ci.hotspot.HotSpotJDKReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot reflection read field value
jdk.vm.ci.hotspot.HotSpotJDKReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)->boolean::: hot spot reflection equals
jdk.vm.ci.hotspot.HotSpotJDKReflection#getJavaMirror(HotSpotResolvedPrimitiveType)->JavaConstant::: hot spot reflection get java mirror
jdk.vm.ci.hotspot.HotSpotJDKReflection#getParameters(HotSpotResolvedJavaMethodImpl)->ResolvedJavaMethod.Parameter[]::: hot spot reflection get parameters
jdk.vm.ci.hotspot.HotSpotJDKReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[][]::: hot spot reflection get parameter annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)->Type[]::: hot spot reflection get generic parameter types
jdk.vm.ci.hotspot.HotSpotJDKReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: hot spot reflection get field annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: hot spot reflection get method annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: hot spot reflection get method declared annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: hot spot reflection get field declared annotations
jdk.vm.ci.hotspot.HotSpotJDKReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)->T::: hot spot reflection get method annotation
jdk.vm.ci.hotspot.HotSpotJDKReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)->T::: hot spot reflection get field annotation
jdk.vm.ci.hotspot.HotSpotJDKReflection#getType(HotSpotObjectConstantImpl)->HotSpotResolvedObjectTypeImpl::: hot spot reflection get type
jdk.vm.ci.hotspot.HotSpotJDKReflection#asString(HotSpotObjectConstantImpl)->String::: hot spot reflection as string
jdk.vm.ci.hotspot.HotSpotJDKReflection#asJavaType(HotSpotObjectConstantImpl)->ResolvedJavaType::: hot spot reflection as java type
jdk.vm.ci.hotspot.HotSpotJDKReflection#asObject(HotSpotObjectConstantImpl, Class)->T::: hot spot reflection as object
jdk.vm.ci.hotspot.HotSpotJDKReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)->Object::: hot spot reflection as object
jdk.vm.ci.hotspot.HotSpotJDKReflection#formatString(HotSpotObjectConstantImpl)->String::: hot spot reflection format string
jdk.vm.ci.hotspot.HotSpotJDKReflection#getLength(HotSpotObjectConstantImpl)->Integer::: hot spot reflection get length
jdk.vm.ci.hotspot.HotSpotJDKReflection#readArrayElement(HotSpotObjectConstantImpl, int)->JavaConstant::: hot spot reflection read array element
jdk.vm.ci.hotspot.HotSpotJDKReflection#unboxPrimitive(HotSpotObjectConstantImpl)->JavaConstant::: hot spot reflection unbox primitive
jdk.vm.ci.hotspot.HotSpotJDKReflection#forObject(Object)->JavaConstant::: hot spot reflection for object
jdk.vm.ci.hotspot.HotSpotJDKReflection#boxPrimitive(JavaConstant)->JavaConstant::: hot spot reflection box primitive
jdk.vm.ci.hotspot.HotSpotJDKReflection#getInt(HotSpotObjectConstantImpl, long)->int::: hot spot reflection get int
jdk.vm.ci.hotspot.HotSpotJDKReflection#getByte(HotSpotObjectConstantImpl, long)->byte::: hot spot reflection get byte
jdk.vm.ci.hotspot.HotSpotJDKReflection#getShort(HotSpotObjectConstantImpl, long)->short::: hot spot reflection get short
jdk.vm.ci.hotspot.HotSpotJDKReflection#getLong(HotSpotObjectConstantImpl, long)->long::: hot spot reflection get long
jdk.vm.ci.hotspot.HotSpotJDKReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)->void::: hot spot reflection check read
jdk.vm.ci.hotspot.HotSpotJDKReflection#oopSizeOffset()->long::: hot spot reflection oop size offset
jdk.vm.ci.hotspot.HotSpotJDKReflection#readFieldValue(HotSpotResolvedJavaField, Object, boolean)->JavaConstant::: hot spot reflection read field value
jdk.vm.ci.hotspot.HotSpotJDKReflection#getMirror(HotSpotResolvedObjectTypeImpl)->Class::: hot spot reflection get mirror
jdk.vm.ci.hotspot.HotSpotJDKReflection#getMirror(HotSpotResolvedJavaType)->Class::: hot spot reflection get mirror
jdk.vm.ci.hotspot.HotSpotJVMCIBackendFactory#createJVMCIBackend(HotSpotJVMCIRuntime, JVMCIBackend)->JVMCIBackend::: hot spot backend factory create backend
jdk.vm.ci.hotspot.HotSpotJVMCIBackendFactory#getArchitecture()->String:::Gets the CPU architecture of this backend.
jdk.vm.ci.hotspot.HotSpotJVMCICompilerConfig#getCompilerFactory()->JVMCICompilerFactory:::Gets the selected system compiler factory.
jdk.vm.ci.hotspot.HotSpotJVMCICompilerFactory#getCompilationLevelAdjustment()->CompilationLevelAdjustment:::Determines if this object may want to adjust the compilation level for a method that is being scheduled by the VM for compilation.
jdk.vm.ci.hotspot.HotSpotJVMCICompilerFactory#adjustCompilationLevel(Object, String, String, boolean, CompilationLevel)->CompilationLevel:::Potentially modifies the compilation level currently selected by the VM compilation policy for a method.
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)->boolean::: hot spot reflection is instance
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is assignable from
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: hot spot reflection get annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: hot spot reflection get declared annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)->T::: hot spot reflection get annotation
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is local class
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)->boolean::: hot spot reflection is member class
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectType::: hot spot reflection get enclosing class
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot reflection read field value
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot reflection read field value
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)->boolean::: hot spot reflection equals
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getJavaMirror(HotSpotResolvedPrimitiveType)->JavaConstant::: hot spot reflection get java mirror
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getParameters(HotSpotResolvedJavaMethodImpl)->ResolvedJavaMethod.Parameter[]::: hot spot reflection get parameters
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[][]::: hot spot reflection get parameter annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)->Type[]::: hot spot reflection get generic parameter types
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: hot spot reflection get field annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: hot spot reflection get method annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: hot spot reflection get method declared annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: hot spot reflection get field declared annotations
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)->T::: hot spot reflection get method annotation
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getType(HotSpotObjectConstantImpl)->HotSpotResolvedObjectTypeImpl::: hot spot reflection get type
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#asString(HotSpotObjectConstantImpl)->String::: hot spot reflection as string
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#asJavaType(HotSpotObjectConstantImpl)->ResolvedJavaType:::Given a java.lang.Class instance, return the corresponding ResolvedJavaType.
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#asObject(HotSpotObjectConstantImpl, Class)->T::: hot spot reflection as object
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)->Object::: hot spot reflection as object
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#formatString(HotSpotObjectConstantImpl)->String::: hot spot reflection format string
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getLength(HotSpotObjectConstantImpl)->Integer::: hot spot reflection get length
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#readArrayElement(HotSpotObjectConstantImpl, int)->JavaConstant::: hot spot reflection read array element
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#unboxPrimitive(HotSpotObjectConstantImpl)->JavaConstant::: hot spot reflection unbox primitive
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#forObject(Object)->JavaConstant::: hot spot reflection for object
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#boxPrimitive(JavaConstant)->JavaConstant::: hot spot reflection box primitive
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getInt(HotSpotObjectConstantImpl, long)->int::: hot spot reflection get int
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getByte(HotSpotObjectConstantImpl, long)->byte::: hot spot reflection get byte
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getShort(HotSpotObjectConstantImpl, long)->short::: hot spot reflection get short
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getLong(HotSpotObjectConstantImpl, long)->long::: hot spot reflection get long
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)->void::: hot spot reflection check read
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)->T::: hot spot reflection get field annotation
jdk.vm.ci.hotspot.HotSpotJVMCIReflection#resolveObject(HotSpotObjectConstantImpl)->Object:::Resolves objectHandle to a raw object if possible.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangObject()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang object
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangString()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang string
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangClass()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang class
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangCloneable()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang cloneable
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangSerializable()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang serializable
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangThrowable()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang throwable
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJavaLangEnum()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get java lang enum
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getConstantCallSite()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get constant call site
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getCallSite()->HotSpotResolvedObjectTypeImpl::: hot spot runtime get call site
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getMethodHandleClass()->HotSpotResolvedObjectType::: hot spot runtime get method handle class
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#runtime()->HotSpotJVMCIRuntime:::Gets the singleton HotSpotJVMCIRuntime object.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#decodeThrowable(String)->Throwable::: hot spot runtime decode throwable
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#encodeThrowable(Throwable)->String::: hot spot runtime encode throwable
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#callToString(Object)->String::: hot spot runtime call to string
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getHostWordKind()->JavaKind:::Gets the kind of a word value on the #getHostJVMCIBackend() host backend.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#createClass(Class)->HotSpotResolvedJavaType::: hot spot runtime create class
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#fromClass(Class)->HotSpotResolvedJavaType:::Gets the JVMCI mirror for a Class object.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#fromMetaspace(long, String)->HotSpotResolvedObjectTypeImpl::: hot spot runtime from metaspace
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getConfigStore()->HotSpotVMConfigStore::: hot spot runtime get config store
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getConfig()->HotSpotVMConfig::: hot spot runtime get config
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getCompilerToVM()->CompilerToVM::: hot spot runtime get compiler to m
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getReflection()->HotSpotJVMCIReflection::: hot spot runtime get reflection
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getIntrinsificationTrustPredicate(Class...)->Predicate:::Gets a predicate that determines if a given type can be considered trusted for the purpose of intrinsifying methods it declares.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getMirror(ResolvedJavaType)->Class:::Get the Class corresponding to type.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getCompiler()->JVMCICompiler::: hot spot runtime get compiler
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#lookupType(String, HotSpotResolvedObjectType, boolean)->JavaType:::Converts a name to a Java type
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#lookupTypeInternal(String, HotSpotResolvedObjectType, boolean)->JavaType::: hot spot runtime lookup type internal
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getHostJVMCIBackend()->JVMCIBackend::: hot spot runtime get host backend
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJVMCIBackend(Class)->JVMCIBackend::: hot spot runtime get backend
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getJVMCIBackends()->Map, JVMCIBackend>::: hot spot runtime get backends
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode)->void:::Notify on successful install into the CodeCache.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#writeDebugOutput(byte[], int, int, boolean, boolean)->int:::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getLogStream()->OutputStream:::Gets an output stream that writes to HotSpot's tty stream.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#collectCounters()->long[]:::Collects the current values of all JVMCI benchmark counters, summed up over all threads.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getCountersSize()->int::: hot spot runtime get counters size
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#setCountersSize(int)->boolean:::Attempt to enlarge the number of per thread counters available
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getArrayBaseOffset(JavaKind)->int:::The offset from the origin of an array to the first element.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getArrayIndexScale(JavaKind)->int:::The scale used for the index when accessing elements of an array of this kind.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#registerNativeMethods(Class)->long[]:::Links each native method in clazz to an implementation in the JVMCI shared library
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#translate(Object)->long:::Creates or retrieves an object in the peer runtime that mirrors obj
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#unhand(Class, long)->T:::Dereferences and returns the object referred to by the JNI global reference handle
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#isCurrentThreadAttached()->boolean:::Determines if the current thread is attached to the peer runtime.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#getCurrentJavaThread()->long:::Gets the address of the HotSpot JavaThread C++ object for the current thread
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#attachCurrentThread(boolean)->boolean:::Ensures the current thread is attached to the peer runtime.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#detachCurrentThread()->void:::Detaches the current thread from the peer runtime.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#excludeFromJVMCICompilation(Module...)->void:::Informs HotSpot that no method whose module is in modules is to be compiled with #compileMethod.
jdk.vm.ci.hotspot.HotSpotJVMCIRuntime#exitHotSpot(int)->void:::Calls System#exit(int) in HotSpot's runtime.
jdk.vm.ci.hotspot.HotSpotMemoryAccessProvider#readNarrowOopConstant(Constant, long)->JavaConstant::: hot spot memory access provider read narrow oop constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProvider#readKlassPointerConstant(Constant, long)->Constant::: hot spot memory access provider read klass pointer constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProvider#readNarrowKlassPointerConstant(Constant, long)->Constant::: hot spot memory access provider read narrow klass pointer constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProvider#readMethodPointerConstant(Constant, long)->Constant::: hot spot memory access provider read method pointer constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readPrimitiveConstant(JavaKind, Constant, long, int)->JavaConstant::: hot spot memory access provider impl read primitive constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readObjectConstant(Constant, long)->JavaConstant::: hot spot memory access provider impl read object constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readNarrowOopConstant(Constant, long)->JavaConstant::: hot spot memory access provider impl read narrow oop constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readKlassPointerConstant(Constant, long)->Constant::: hot spot memory access provider impl read klass pointer constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readNarrowKlassPointerConstant(Constant, long)->Constant::: hot spot memory access provider impl read narrow klass pointer constant
jdk.vm.ci.hotspot.HotSpotMemoryAccessProviderImpl#readMethodPointerConstant(Constant, long)->Constant::: hot spot memory access provider impl read method pointer constant
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#lookupJavaType(Class)->ResolvedJavaType::: hot spot meta access provider lookup java type
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#lookupJavaType(JavaConstant)->HotSpotResolvedObjectType::: hot spot meta access provider lookup java type
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#parseMethodDescriptor(String)->Signature::: hot spot meta access provider parse method descriptor
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#lookupJavaMethod(Executable)->ResolvedJavaMethod::: hot spot meta access provider lookup java method
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#lookupJavaField(Field)->ResolvedJavaField::: hot spot meta access provider lookup java field
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#encodeDeoptActionAndReason(DeoptimizationAction, DeoptimizationReason, int)->JavaConstant::: hot spot meta access provider encode deopt action and reason
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#decodeDeoptReason(JavaConstant)->DeoptimizationReason::: hot spot meta access provider decode deopt reason
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#decodeDeoptAction(JavaConstant)->DeoptimizationAction::: hot spot meta access provider decode deopt action
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#decodeDebugId(JavaConstant)->int::: hot spot meta access provider decode debug id
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#encodeSpeculation(Speculation)->JavaConstant::: hot spot meta access provider encode speculation
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#decodeSpeculation(JavaConstant, SpeculationLog)->Speculation::: hot spot meta access provider decode speculation
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#convertDeoptAction(DeoptimizationAction)->int::: hot spot meta access provider convert deopt action
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#convertDeoptAction(int)->DeoptimizationAction::: hot spot meta access provider convert deopt action
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#convertDeoptReason(DeoptimizationReason)->int::: hot spot meta access provider convert deopt reason
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#convertDeoptReason(int)->DeoptimizationReason::: hot spot meta access provider convert deopt reason
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#getMemorySize(JavaConstant)->long::: hot spot meta access provider get memory size
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#computeArrayAllocationSize(int, int, int)->int:::Computes the size of the memory chunk allocated for an array
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#getArrayBaseOffset(JavaKind)->int::: hot spot meta access provider get array base offset
jdk.vm.ci.hotspot.HotSpotMetaAccessProvider#getArrayIndexScale(JavaKind)->int::: hot spot meta access provider get array index scale
jdk.vm.ci.hotspot.HotSpotMetaData#pcDescBytes()->byte[]::: hot spot meta data pc desc bytes
jdk.vm.ci.hotspot.HotSpotMetaData#scopesDescBytes()->byte[]::: hot spot meta data scopes desc bytes
jdk.vm.ci.hotspot.HotSpotMetaData#relocBytes()->byte[]::: hot spot meta data reloc bytes
jdk.vm.ci.hotspot.HotSpotMetaData#exceptionBytes()->byte[]::: hot spot meta data exception bytes
jdk.vm.ci.hotspot.HotSpotMetaData#implicitExceptionBytes()->byte[]::: hot spot meta data implicit exception bytes
jdk.vm.ci.hotspot.HotSpotMetaData#oopMaps()->byte[]::: hot spot meta data oop maps
jdk.vm.ci.hotspot.HotSpotMetaData#metadataEntries()->Object[]::: hot spot meta data metadata entries
jdk.vm.ci.hotspot.HotSpotMetaspaceConstant#asResolvedJavaType()->HotSpotResolvedObjectType::: hot spot metaspace constant as resolved java type
jdk.vm.ci.hotspot.HotSpotMetaspaceConstant#asResolvedJavaMethod()->HotSpotResolvedJavaMethod::: hot spot metaspace constant as resolved java method
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#forMetaspaceObject(MetaspaceObject, boolean)->HotSpotMetaspaceConstantImpl::: hot spot metaspace constant impl for metaspace object
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#getMetaspaceObject(Constant)->MetaspaceObject::: hot spot metaspace constant impl get metaspace object
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#hashCode()->int::: hot spot metaspace constant impl hash code
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#equals(Object)->boolean::: hot spot metaspace constant impl equals
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#toValueString()->String::: hot spot metaspace constant impl to value string
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#toString()->String::: hot spot metaspace constant impl to string
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#isDefaultForKind()->boolean::: hot spot metaspace constant impl is default for kind
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#isCompressed()->boolean::: hot spot metaspace constant impl is compressed
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#compress()->Constant::: hot spot metaspace constant impl compress
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#uncompress()->Constant::: hot spot metaspace constant impl uncompress
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#asResolvedJavaType()->HotSpotResolvedObjectType::: hot spot metaspace constant impl as resolved java type
jdk.vm.ci.hotspot.HotSpotMetaspaceConstantImpl#asResolvedJavaMethod()->HotSpotResolvedJavaMethod::: hot spot metaspace constant impl as resolved java method
jdk.vm.ci.hotspot.HotSpotMethod#applyFormattingFlagsAndWidth(String, int, int)->String::: hot spot method apply formatting flags and width
jdk.vm.ci.hotspot.HotSpotMethod#toString()->String::: hot spot method to string
jdk.vm.ci.hotspot.HotSpotMethod#formatTo(Formatter, int, int, int)->void::: hot spot method format to
jdk.vm.ci.hotspot.HotSpotMethodData.VMState#instance()->VMState::: state instance
jdk.vm.ci.hotspot.HotSpotMethodData#hasNormalData()->boolean::: hot spot method data has normal data
jdk.vm.ci.hotspot.HotSpotMethodData#hasExtraData()->boolean::: hot spot method data has extra data
jdk.vm.ci.hotspot.HotSpotMethodData#getExtraDataBeginOffset()->int::: hot spot method data get extra data begin offset
jdk.vm.ci.hotspot.HotSpotMethodData#isWithin(int)->boolean::: hot spot method data is within
jdk.vm.ci.hotspot.HotSpotMethodData#getDeoptimizationCount(DeoptimizationReason)->int::: hot spot method data get deoptimization count
jdk.vm.ci.hotspot.HotSpotMethodData#getOSRDeoptimizationCount(DeoptimizationReason)->int::: hot spot method data get deoptimization count
jdk.vm.ci.hotspot.HotSpotMethodData#getDecompileCount()->int::: hot spot method data get decompile count
jdk.vm.ci.hotspot.HotSpotMethodData#getOverflowRecompileCount()->int::: hot spot method data get overflow recompile count
jdk.vm.ci.hotspot.HotSpotMethodData#getOverflowTrapCount()->int::: hot spot method data get overflow trap count
jdk.vm.ci.hotspot.HotSpotMethodData#getNormalData(int)->HotSpotMethodDataAccessor::: hot spot method data get normal data
jdk.vm.ci.hotspot.HotSpotMethodData#getExtraData(int)->HotSpotMethodDataAccessor::: hot spot method data get extra data
jdk.vm.ci.hotspot.HotSpotMethodData#getNoDataAccessor(boolean)->HotSpotMethodDataAccessor::: hot spot method data get no data accessor
jdk.vm.ci.hotspot.HotSpotMethodData#readUnsignedByte(int, int)->int::: hot spot method data read unsigned byte
jdk.vm.ci.hotspot.HotSpotMethodData#readUnsignedShort(int, int)->int::: hot spot method data read unsigned short
jdk.vm.ci.hotspot.HotSpotMethodData#isProfileMature()->boolean:::Returns whether profiling ran long enough that the profile information is mature
jdk.vm.ci.hotspot.HotSpotMethodData#toString()->String::: hot spot method data to string
jdk.vm.ci.hotspot.HotSpotMethodData.NoMethodData#getBCI(HotSpotMethodData, int)->int::: no method data get i
jdk.vm.ci.hotspot.HotSpotMethodData.NoMethodData#getExceptionSeen(HotSpotMethodData, int)->TriState::: no method data get exception seen
jdk.vm.ci.hotspot.HotSpotMethodData.NoMethodData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: no method data append to
jdk.vm.ci.hotspot.HotSpotMethodData.BitData#getNullSeen(HotSpotMethodData, int)->TriState::: bit data get null seen
jdk.vm.ci.hotspot.HotSpotMethodData.BitData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: bit data append to
jdk.vm.ci.hotspot.HotSpotMethodData.CounterData#getExecutionCount(HotSpotMethodData, int)->int::: counter data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.CounterData#getCounterValue(HotSpotMethodData, int)->int::: counter data get counter value
jdk.vm.ci.hotspot.HotSpotMethodData.CounterData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: counter data append to
jdk.vm.ci.hotspot.HotSpotMethodData.JumpData#getBranchTakenProbability(HotSpotMethodData, int)->double::: jump data get branch taken probability
jdk.vm.ci.hotspot.HotSpotMethodData.JumpData#getExecutionCount(HotSpotMethodData, int)->int::: jump data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.JumpData#getTakenDisplacement(HotSpotMethodData, int)->int::: jump data get taken displacement
jdk.vm.ci.hotspot.HotSpotMethodData.JumpData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: jump data append to
jdk.vm.ci.hotspot.HotSpotMethodData.AbstractTypeData#getTypeProfile(HotSpotMethodData, int)->JavaTypeProfile::: abstract type data get type profile
jdk.vm.ci.hotspot.HotSpotMethodData.AbstractTypeData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)->long::: abstract type data get types not recorded execution count
jdk.vm.ci.hotspot.HotSpotMethodData.AbstractTypeData#getNonprofiledCount(HotSpotMethodData, int)->int::: abstract type data get nonprofiled count
jdk.vm.ci.hotspot.HotSpotMethodData.AbstractTypeData#getTypeCountOffset(int)->int::: abstract type data get type count offset
jdk.vm.ci.hotspot.HotSpotMethodData.AbstractTypeData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: abstract type data append to
jdk.vm.ci.hotspot.HotSpotMethodData.ReceiverTypeData#getExecutionCount(HotSpotMethodData, int)->int::: receiver type data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.ReceiverTypeData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)->long::: receiver type data get types not recorded execution count
jdk.vm.ci.hotspot.HotSpotMethodData.VirtualCallData#getExecutionCount(HotSpotMethodData, int)->int::: virtual call data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.VirtualCallData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)->long::: virtual call data get types not recorded execution count
jdk.vm.ci.hotspot.HotSpotMethodData.VirtualCallData#getMethodProfile(HotSpotMethodData, int)->JavaMethodProfile::: virtual call data get method profile
jdk.vm.ci.hotspot.HotSpotMethodData.VirtualCallData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: virtual call data append to
jdk.vm.ci.hotspot.HotSpotMethodData.VirtualCallTypeData#getDynamicSize(HotSpotMethodData, int)->int::: virtual call type data get dynamic size
jdk.vm.ci.hotspot.HotSpotMethodData.BranchData#getBranchTakenProbability(HotSpotMethodData, int)->double::: branch data get branch taken probability
jdk.vm.ci.hotspot.HotSpotMethodData.BranchData#getExecutionCount(HotSpotMethodData, int)->int::: branch data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.BranchData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: branch data append to
jdk.vm.ci.hotspot.HotSpotMethodData.ArrayData#getDynamicSize(HotSpotMethodData, int)->int::: array data get dynamic size
jdk.vm.ci.hotspot.HotSpotMethodData.ArrayData#getLength(HotSpotMethodData, int)->int::: array data get length
jdk.vm.ci.hotspot.HotSpotMethodData.ArrayData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: array data append to
jdk.vm.ci.hotspot.HotSpotMethodData.MultiBranchData#getSwitchProbabilities(HotSpotMethodData, int)->double[]::: multi branch data get switch probabilities
jdk.vm.ci.hotspot.HotSpotMethodData.MultiBranchData#getExecutionCount(HotSpotMethodData, int)->int::: multi branch data get execution count
jdk.vm.ci.hotspot.HotSpotMethodData.MultiBranchData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: multi branch data append to
jdk.vm.ci.hotspot.HotSpotMethodData.UnknownProfileData#getDynamicSize(HotSpotMethodData, int)->int::: unknown profile data get dynamic size
jdk.vm.ci.hotspot.HotSpotMethodData.UnknownProfileData#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: unknown profile data append to
jdk.vm.ci.hotspot.HotSpotMethodData#setCompiledIRSize(int)->void::: hot spot method data set compiled size
jdk.vm.ci.hotspot.HotSpotMethodData#getCompiledIRSize()->int::: hot spot method data get compiled size
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getTag()->int:::Returns the tag stored in the LayoutData header.
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#readTag(HotSpotVMConfig, HotSpotMethodData, int)->int::: hot spot method data accessor read tag
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getBCI(HotSpotMethodData, int)->int:::Returns the BCI stored in the LayoutData header.
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getSize(HotSpotMethodData, int)->int:::Computes the size for the specific data at the given position.
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getExceptionSeen(HotSpotMethodData, int)->TriState::: hot spot method data accessor get exception seen
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getTypeProfile(HotSpotMethodData, int)->JavaTypeProfile::: hot spot method data accessor get type profile
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getMethodProfile(HotSpotMethodData, int)->JavaMethodProfile::: hot spot method data accessor get method profile
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getBranchTakenProbability(HotSpotMethodData, int)->double::: hot spot method data accessor get branch taken probability
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getSwitchProbabilities(HotSpotMethodData, int)->double[]::: hot spot method data accessor get switch probabilities
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getExecutionCount(HotSpotMethodData, int)->int::: hot spot method data accessor get execution count
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getNullSeen(HotSpotMethodData, int)->TriState::: hot spot method data accessor get null seen
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getFlags(HotSpotMethodData, int)->int::: hot spot method data accessor get flags
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#getDynamicSize(HotSpotMethodData, int)->int::: hot spot method data accessor get dynamic size
jdk.vm.ci.hotspot.HotSpotMethodDataAccessor#appendTo(StringBuilder, HotSpotMethodData, int)->StringBuilder::: hot spot method data accessor append to
jdk.vm.ci.hotspot.HotSpotMethodHandleAccessProvider.Internals#instance()->Internals::: internals instance
jdk.vm.ci.hotspot.HotSpotMethodHandleAccessProvider#lookupMethodHandleIntrinsic(ResolvedJavaMethod)->IntrinsicMethod::: hot spot method handle access provider lookup method handle intrinsic
jdk.vm.ci.hotspot.HotSpotMethodHandleAccessProvider#getMethodHandleIntrinsic(int)->IntrinsicMethod::: hot spot method handle access provider get method handle intrinsic
jdk.vm.ci.hotspot.HotSpotMethodHandleAccessProvider#resolveInvokeBasicTarget(JavaConstant, boolean)->ResolvedJavaMethod::: hot spot method handle access provider resolve invoke basic target
jdk.vm.ci.hotspot.HotSpotMethodHandleAccessProvider#resolveLinkToTarget(JavaConstant)->ResolvedJavaMethod::: hot spot method handle access provider resolve link to target
jdk.vm.ci.hotspot.HotSpotModifiers#jvmClassModifiers()->int::: hot spot modifiers jvm class modifiers
jdk.vm.ci.hotspot.HotSpotModifiers#jvmMethodModifiers()->int::: hot spot modifiers jvm method modifiers
jdk.vm.ci.hotspot.HotSpotModifiers#jvmFieldModifiers()->int::: hot spot modifiers jvm field modifiers
jdk.vm.ci.hotspot.HotSpotNmethod#inOopsTable()->boolean:::Determines whether this object is in the oops table of the nmethod
jdk.vm.ci.hotspot.HotSpotNmethod#isDefault()->boolean:::Determines if the nmethod associated with this object is the compiled entry point for #getMethod().
jdk.vm.ci.hotspot.HotSpotNmethod#isValid()->boolean::: hot spot nmethod is valid
jdk.vm.ci.hotspot.HotSpotNmethod#getMethod()->ResolvedJavaMethod::: hot spot nmethod get method
jdk.vm.ci.hotspot.HotSpotNmethod#invalidate()->void::: hot spot nmethod invalidate
jdk.vm.ci.hotspot.HotSpotNmethod#getAddress()->long::: hot spot nmethod get address
jdk.vm.ci.hotspot.HotSpotNmethod#getEntryPoint()->long::: hot spot nmethod get entry point
jdk.vm.ci.hotspot.HotSpotNmethod#toString()->String::: hot spot nmethod to string
jdk.vm.ci.hotspot.HotSpotNmethod#executeVarargs(Object...)->Object::: hot spot nmethod execute varargs
jdk.vm.ci.hotspot.HotSpotNmethod#getStart()->long::: hot spot nmethod get start
jdk.vm.ci.hotspot.HotSpotObjectConstant#compress()->JavaConstant::: hot spot object constant compress
jdk.vm.ci.hotspot.HotSpotObjectConstant#uncompress()->JavaConstant::: hot spot object constant uncompress
jdk.vm.ci.hotspot.HotSpotObjectConstant#getType()->HotSpotResolvedObjectType:::Gets the resolved Java type of the object represented by this constant.
jdk.vm.ci.hotspot.HotSpotObjectConstant#getIdentityHashCode()->int:::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.
jdk.vm.ci.hotspot.HotSpotObjectConstant#getCallSiteTarget(Assumptions)->JavaConstant:::Gets the result of CallSite#getTarget() for the CallSite object represented by this constant.
jdk.vm.ci.hotspot.HotSpotObjectConstant#isInternedString()->boolean:::Determines if this constant represents an String#intern() interned string.
jdk.vm.ci.hotspot.HotSpotObjectConstant#asObject(Class)->T:::Gets the object represented by this constant represents if it is of a given type.
jdk.vm.ci.hotspot.HotSpotObjectConstant#asObject(ResolvedJavaType)->Object:::Gets the object represented by this constant represents if it is of a given type.
jdk.vm.ci.hotspot.HotSpotObjectConstant#toValueString()->String::: hot spot object constant to value string
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#getJavaKind()->JavaKind::: hot spot object constant impl get java kind
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#isCompressed()->boolean::: hot spot object constant impl is compressed
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#compress()->JavaConstant::: hot spot object constant impl compress
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#uncompress()->JavaConstant::: hot spot object constant impl uncompress
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#getType()->HotSpotResolvedObjectType::: hot spot object constant impl get type
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#getIdentityHashCode()->int::: hot spot object constant impl get identity hash code
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#getCallSiteTarget(Assumptions)->JavaConstant::: hot spot object constant impl get call site target
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#isInternedString()->boolean::: hot spot object constant impl is interned string
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asObject(Class)->T::: hot spot object constant impl as object
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asObject(ResolvedJavaType)->Object::: hot spot object constant impl as object
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#isNull()->boolean::: hot spot object constant impl is null
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#isDefaultForKind()->boolean::: hot spot object constant impl is default for kind
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asBoxedPrimitive()->Object::: hot spot object constant impl as boxed primitive
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asInt()->int::: hot spot object constant impl as int
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asBoolean()->boolean::: hot spot object constant impl as boolean
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asLong()->long::: hot spot object constant impl as long
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asFloat()->float::: hot spot object constant impl as float
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asDouble()->double::: hot spot object constant impl as double
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#equals(Object)->boolean::: hot spot object constant impl equals
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#hashCode()->int::: hot spot object constant impl hash code
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#toValueString()->String::: hot spot object constant impl to value string
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#toString()->String::: hot spot object constant impl to string
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#readFieldValue(HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot object constant impl read field value
jdk.vm.ci.hotspot.HotSpotObjectConstantImpl#asJavaType()->ResolvedJavaType::: hot spot object constant impl as java type
jdk.vm.ci.hotspot.HotSpotObjectConstantScope#openLocalScope(Object)->HotSpotObjectConstantScope:::Opens a local scope that upon closing, will release foreign object references encapsulated by HotSpotObjectConstants created in the scope.
jdk.vm.ci.hotspot.HotSpotObjectConstantScope#enterGlobalScope()->HotSpotObjectConstantScope:::Enters the global scope
jdk.vm.ci.hotspot.HotSpotObjectConstantScope#isGlobal()->boolean:::Determines if this scope is global.
jdk.vm.ci.hotspot.HotSpotObjectConstantScope#add(IndirectHotSpotObjectConstantImpl)->void::: hot spot object constant scope add
jdk.vm.ci.hotspot.HotSpotObjectConstantScope#close()->void::: hot spot object constant scope close
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getCodeSize()->int::: hot spot profiling info get code size
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getDecompileCount()->int::: hot spot profiling info get decompile count
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getOverflowRecompileCount()->int::: hot spot profiling info get overflow recompile count
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getOverflowTrapCount()->int::: hot spot profiling info get overflow trap count
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getTypeProfile(int)->JavaTypeProfile::: hot spot profiling info get type profile
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getMethodProfile(int)->JavaMethodProfile::: hot spot profiling info get method profile
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getBranchTakenProbability(int)->double::: hot spot profiling info get branch taken probability
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getSwitchProbabilities(int)->double[]::: hot spot profiling info get switch probabilities
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getExceptionSeen(int)->TriState::: hot spot profiling info get exception seen
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getNullSeen(int)->TriState::: hot spot profiling info get null seen
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getExecutionCount(int)->int::: hot spot profiling info get execution count
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getDeoptimizationCount(DeoptimizationReason)->int::: hot spot profiling info get deoptimization count
jdk.vm.ci.hotspot.HotSpotProfilingInfo#isMature()->boolean::: hot spot profiling info is mature
jdk.vm.ci.hotspot.HotSpotProfilingInfo#ignoreMature()->void::: hot spot profiling info ignore mature
jdk.vm.ci.hotspot.HotSpotProfilingInfo#toString()->String::: hot spot profiling info to string
jdk.vm.ci.hotspot.HotSpotProfilingInfo#setMature()->void::: hot spot profiling info set mature
jdk.vm.ci.hotspot.HotSpotProfilingInfo#setCompilerIRSize(Class, int)->boolean::: hot spot profiling info set compiler size
jdk.vm.ci.hotspot.HotSpotProfilingInfo#getCompilerIRSize(Class)->int::: hot spot profiling info get compiler size
jdk.vm.ci.hotspot.HotSpotReferenceMap#hashCode()->int::: hot spot reference map hash code
jdk.vm.ci.hotspot.HotSpotReferenceMap#equals(Object)->boolean::: hot spot reference map equals
jdk.vm.ci.hotspot.HotSpotReferenceMap#toString()->String::: hot spot reference map to string
jdk.vm.ci.hotspot.HotSpotResolvedJavaField#isInObject(JavaConstant)->boolean:::Determines if a given object contains this field.
jdk.vm.ci.hotspot.HotSpotResolvedJavaField#isStable()->boolean:::Determines if this field should be treated as a constant.
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#equals(Object)->boolean::: hot spot resolved java field impl equals
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#hashCode()->int::: hot spot resolved java field impl hash code
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getModifiers()->int::: hot spot resolved java field impl get modifiers
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#isInternal()->boolean::: hot spot resolved java field impl is internal
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#isInObject(JavaConstant)->boolean:::Determines if a given object contains this field.
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getDeclaringClass()->HotSpotResolvedObjectTypeImpl::: hot spot resolved java field impl get declaring class
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getName()->String::: hot spot resolved java field impl get name
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getType()->JavaType::: hot spot resolved java field impl get type
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getOffset()->int::: hot spot resolved java field impl get offset
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getIndex()->int:::Gets the value of this field's index (i.e
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#toString()->String::: hot spot resolved java field impl to string
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#isSynthetic()->boolean::: hot spot resolved java field impl is synthetic
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#isStable()->boolean:::Checks if this field has the Stable annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getAnnotations()->Annotation[]::: hot spot resolved java field impl get annotations
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getDeclaredAnnotations()->Annotation[]::: hot spot resolved java field impl get declared annotations
jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl#getAnnotation(Class)->T::: hot spot resolved java field impl get annotation
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#isCallerSensitive()->boolean:::Returns true if this method has a CallerSensitive annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#getDeclaringClass()->HotSpotResolvedObjectType::: hot spot resolved java method get declaring class
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#isForceInline()->boolean:::Returns true if this method has a ForceInline annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#hasReservedStackAccess()->boolean:::Returns true if this method has a ReservedStackAccess annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#setNotInlinableOrCompilable()->void:::Sets flags on method indicating that it should never be inlined or compiled by the VM.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#ignoredBySecurityStackWalk()->boolean:::Returns true if this method is one of the special methods that is ignored by security stack walks.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#uniqueConcreteMethod(HotSpotResolvedObjectType)->ResolvedJavaMethod::: hot spot resolved java method unique concrete method
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#hasCompiledCode()->boolean:::Returns whether this method has compiled code.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#hasCompiledCodeAtLevel(int)->boolean::: hot spot resolved java method has compiled code at level
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#isDefault()->boolean::: hot spot resolved java method is default
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#vtableEntryOffset(ResolvedJavaType)->int:::Returns the offset of this method into the v-table
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#intrinsicId()->int::: hot spot resolved java method intrinsic id
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#isIntrinsicCandidate()->boolean:::Determines if this method denotes itself as a candidate for intrinsification
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#allocateCompileId(int)->int:::Allocates a compile id for this method by asking the VM for one.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#hasCodeAtLevel(int, int)->boolean::: hot spot resolved java method has code at level
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod#methodIdnum()->int::: hot spot resolved java method method idnum
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getName()->String::: hot spot resolved java method impl get name
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#equals(Object)->boolean::: hot spot resolved java method impl equals
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hashCode()->int::: hot spot resolved java method impl hash code
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getDeclaringClass()->HotSpotResolvedObjectTypeImpl::: hot spot resolved java method impl get declaring class
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getMetaspaceMethodConstant()->Constant:::Gets the address of the C++ Method object for this method.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getMetaspaceMethod()->long::: hot spot resolved java method impl get metaspace method
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getMetadataHandle()->long::: hot spot resolved java method impl get metadata handle
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getEncoding()->Constant::: hot spot resolved java method impl get encoding
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getAllModifiers()->int:::Gets the complete set of modifiers for this method which includes the JVM specification modifiers as well as the HotSpot internal modifiers.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getModifiers()->int::: hot spot resolved java method impl get modifiers
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#canBeStaticallyBound()->boolean::: hot spot resolved java method impl can be statically bound
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getCode()->byte[]::: hot spot resolved java method impl get code
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getCodeSize()->int::: hot spot resolved java method impl get code size
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getExceptionHandlers()->ExceptionHandler[]::: hot spot resolved java method impl get exception handlers
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isCallerSensitive()->boolean:::Returns true if this method has a CallerSensitive annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isForceInline()->boolean:::Returns true if this method has a ForceInline annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hasReservedStackAccess()->boolean:::Returns true if this method has a ReservedStackAccess annotation.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#setNotInlinableOrCompilable()->void:::Sets flags on method indicating that it should never be inlined or compiled by the VM.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#ignoredBySecurityStackWalk()->boolean:::Returns true if this method is one of the special methods that is ignored by security stack walks.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isClassInitializer()->boolean::: hot spot resolved java method impl is class initializer
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isConstructor()->boolean::: hot spot resolved java method impl is constructor
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getMaxLocals()->int::: hot spot resolved java method impl get max locals
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getMaxStackSize()->int::: hot spot resolved java method impl get max stack size
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#asStackTraceElement(int)->StackTraceElement::: hot spot resolved java method impl as stack trace element
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#uniqueConcreteMethod(HotSpotResolvedObjectType)->ResolvedJavaMethod::: hot spot resolved java method impl unique concrete method
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getSignature()->HotSpotSignature::: hot spot resolved java method impl get signature
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hasCompiledCode()->boolean:::Returns whether this method has compiled code.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hasCompiledCodeAtLevel(int)->boolean::: hot spot resolved java method impl has compiled code at level
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getProfilingInfo(boolean, boolean)->ProfilingInfo::: hot spot resolved java method impl get profiling info
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#reprofile()->void::: hot spot resolved java method impl reprofile
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getConstantPool()->ConstantPool::: hot spot resolved java method impl get constant pool
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getParameters()->Parameter[]::: hot spot resolved java method impl get parameters
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getParameterAnnotations()->Annotation[][]::: hot spot resolved java method impl get parameter annotations
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getAnnotations()->Annotation[]::: hot spot resolved java method impl get annotations
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getDeclaredAnnotations()->Annotation[]::: hot spot resolved java method impl get declared annotations
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getAnnotation(Class)->T::: hot spot resolved java method impl get annotation
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isBridge()->boolean::: hot spot resolved java method impl is bridge
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isSynthetic()->boolean::: hot spot resolved java method impl is synthetic
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isVarArgs()->boolean::: hot spot resolved java method impl is var args
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isDefault()->boolean::: hot spot resolved java method impl is default
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getGenericParameterTypes()->Type[]::: hot spot resolved java method impl get generic parameter types
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#canBeInlined()->boolean::: hot spot resolved java method impl can be inlined
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hasNeverInlineDirective()->boolean::: hot spot resolved java method impl has never inline directive
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#shouldBeInlined()->boolean::: hot spot resolved java method impl should be inlined
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getLineNumberTable()->LineNumberTable::: hot spot resolved java method impl get line number table
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getLocalVariableTable()->LocalVariableTable::: hot spot resolved java method impl get local variable table
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#vtableEntryOffset(ResolvedJavaType)->int:::Returns the offset of this method into the v-table
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isInVirtualMethodTable(ResolvedJavaType)->boolean::: hot spot resolved java method impl is in virtual method table
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#getSpeculationLog()->SpeculationLog::: hot spot resolved java method impl get speculation log
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#intrinsicId()->int::: hot spot resolved java method impl intrinsic id
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#isIntrinsicCandidate()->boolean::: hot spot resolved java method impl is intrinsic candidate
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#allocateCompileId(int)->int:::Allocates a compile id for this method by asking the VM for one.
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#hasCodeAtLevel(int, int)->boolean::: hot spot resolved java method impl has code at level
jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl#methodIdnum()->int::: hot spot resolved java method impl method idnum
jdk.vm.ci.hotspot.HotSpotResolvedJavaType#equals(Object)->boolean::: hot spot resolved java type equals
jdk.vm.ci.hotspot.HotSpotResolvedJavaType#hashCode()->int::: hot spot resolved java type hash code
jdk.vm.ci.hotspot.HotSpotResolvedJavaType#getJavaMirror()->JavaConstant::: hot spot resolved java type get java mirror
jdk.vm.ci.hotspot.HotSpotResolvedJavaType#getArrayClass()->HotSpotResolvedObjectType::: hot spot resolved java type get array class
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getArrayClass()->HotSpotResolvedObjectType::: hot spot resolved object type get array class
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getComponentType()->ResolvedJavaType::: hot spot resolved object type get component type
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#findLeafConcreteSubtype()->AssumptionResult::: hot spot resolved object type find leaf concrete subtype
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getSuperclass()->HotSpotResolvedObjectType::: hot spot resolved object type get superclass
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getInterfaces()->HotSpotResolvedObjectType[]::: hot spot resolved object type get interfaces
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getSupertype()->HotSpotResolvedObjectType::: hot spot resolved object type get supertype
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#findLeastCommonAncestor(ResolvedJavaType)->HotSpotResolvedObjectType::: hot spot resolved object type find least common ancestor
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#isPrimitive()->boolean::: hot spot resolved object type is primitive
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getJavaKind()->JavaKind::: hot spot resolved object type get java kind
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getConstantPool()->ConstantPool::: hot spot resolved object type get constant pool
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#instanceSize()->int:::Gets the instance size of this type
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getVtableLength()->int::: hot spot resolved object type get vtable length
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#findUniqueConcreteMethod(ResolvedJavaMethod)->AssumptionResult::: hot spot resolved object type find unique concrete method
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#isDefinitelyResolvedWithRespectTo(ResolvedJavaType)->boolean:::Performs a fast-path check that this type is resolved in the context of a given accessing class
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#klass()->Constant:::Gets the metaspace Klass boxed in a JavaConstant.
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#isPrimaryType()->boolean::: hot spot resolved object type is primary type
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#superCheckOffset()->int::: hot spot resolved object type super check offset
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#prototypeMarkWord()->long::: hot spot resolved object type prototype mark word
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#layoutHelper()->int::: hot spot resolved object type layout helper
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getEnclosingType()->HotSpotResolvedObjectType::: hot spot resolved object type get enclosing type
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getClassInitializer()->ResolvedJavaMethod::: hot spot resolved object type get class initializer
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#isAnonymous()->boolean::: hot spot resolved object type is anonymous
jdk.vm.ci.hotspot.HotSpotResolvedObjectType#getFingerprint()->long:::Gets the fingerprint for this type.
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getJavaLangObject()->HotSpotResolvedObjectTypeImpl::: hot spot resolved object type impl get java lang object
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getMetaspaceKlass()->long:::Gets the metaspace Klass for this type.
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getMetaspacePointer()->long::: hot spot resolved object type impl get metaspace pointer
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getModifiers()->int::: hot spot resolved object type impl get modifiers
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getAccessFlags()->int::: hot spot resolved object type impl get access flags
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getComponentType()->ResolvedJavaType::: hot spot resolved object type impl get component type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#findLeafConcreteSubtype()->AssumptionResult::: hot spot resolved object type impl find leaf concrete subtype
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getSuperclass()->HotSpotResolvedObjectTypeImpl::: hot spot resolved object type impl get superclass
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getInterfaces()->HotSpotResolvedObjectTypeImpl[]::: hot spot resolved object type impl get interfaces
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getSingleImplementor()->HotSpotResolvedObjectTypeImpl::: hot spot resolved object type impl get single implementor
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getSupertype()->HotSpotResolvedObjectTypeImpl::: hot spot resolved object type impl get supertype
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#findLeastCommonAncestor(ResolvedJavaType)->HotSpotResolvedObjectType::: hot spot resolved object type impl find least common ancestor
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#hasFinalizableSubclass()->AssumptionResult::: hot spot resolved object type impl has finalizable subclass
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#hasFinalizer()->boolean::: hot spot resolved object type impl has finalizer
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isArray()->boolean::: hot spot resolved object type impl is array
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isEnum()->boolean::: hot spot resolved object type impl is enum
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isInitialized()->boolean::: hot spot resolved object type impl is initialized
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isLinked()->boolean::: hot spot resolved object type impl is linked
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#initialize()->void::: hot spot resolved object type impl initialize
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isInstance(JavaConstant)->boolean::: hot spot resolved object type impl is instance
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isInstanceClass()->boolean::: hot spot resolved object type impl is instance class
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isInterface()->boolean::: hot spot resolved object type impl is interface
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isAssignableFrom(ResolvedJavaType)->boolean::: hot spot resolved object type impl is assignable from
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getHostClass()->ResolvedJavaType::: hot spot resolved object type impl get host class
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isJavaLangObject()->boolean::: hot spot resolved object type impl is java lang object
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getJavaKind()->JavaKind::: hot spot resolved object type impl get java kind
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#resolveMethod(ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod::: hot spot resolved object type impl resolve method
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getConstantPool()->HotSpotConstantPool::: hot spot resolved object type impl get constant pool
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#instanceSize()->int:::Gets the instance size of this type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#layoutHelper()->int::: hot spot resolved object type impl layout helper
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getFingerprint()->long::: hot spot resolved object type impl get fingerprint
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#createMethod(long)->HotSpotResolvedJavaMethod::: hot spot resolved object type impl create method
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getVtableLength()->int::: hot spot resolved object type impl get vtable length
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#createField(JavaType, long, int, int)->HotSpotResolvedJavaField::: hot spot resolved object type impl create field
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#findUniqueConcreteMethod(ResolvedJavaMethod)->AssumptionResult::: hot spot resolved object type impl find unique concrete method
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#createFieldInfo(int)->FieldInfo::: hot spot resolved object type impl create field info
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#ensureInitialized()->void::: hot spot resolved object type impl ensure initialized
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#equals(Object)->boolean::: hot spot resolved object type impl equals
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getJavaMirror()->JavaConstant::: hot spot resolved object type impl get java mirror
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#getOffset()->int::: field info get offset
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#getName()->String:::Returns the name of this field as a String
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#getSignature()->String:::Returns the signature of this field as String
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#getType()->JavaType::: field info get type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#isStatic()->boolean::: field info is static
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.FieldInfo#hasGenericSignature()->boolean::: field info has generic signature
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getInstanceFields(boolean)->ResolvedJavaField[]::: hot spot resolved object type impl get instance fields
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getStaticFields()->ResolvedJavaField[]::: hot spot resolved object type impl get static fields
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getSourceFileName()->String::: hot spot resolved object type impl get source file name
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getAnnotations()->Annotation[]::: hot spot resolved object type impl get annotations
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getDeclaredAnnotations()->Annotation[]::: hot spot resolved object type impl get declared annotations
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getAnnotation(Class)->T::: hot spot resolved object type impl get annotation
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isDefinitelyResolvedWithRespectTo(ResolvedJavaType)->boolean:::Performs a fast-path check that this type is resolved in the context of a given accessing class
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#resolve(ResolvedJavaType)->ResolvedJavaType::: hot spot resolved object type impl resolve
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#klass()->Constant:::Gets the metaspace Klass boxed in a JavaConstant.
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isPrimaryType()->boolean::: hot spot resolved object type impl is primary type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#superCheckOffset()->int::: hot spot resolved object type impl super check offset
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#prototypeMarkWord()->long::: hot spot resolved object type impl prototype mark word
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#findInstanceFieldWithOffset(long, JavaKind)->ResolvedJavaField::: hot spot resolved object type impl find instance field with offset
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#findStaticFieldWithOffset(long, JavaKind)->ResolvedJavaField::: hot spot resolved object type impl find static field with offset
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isLocal()->boolean::: hot spot resolved object type impl is local
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isMember()->boolean::: hot spot resolved object type impl is member
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getEnclosingType()->HotSpotResolvedObjectType::: hot spot resolved object type impl get enclosing type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getDeclaredConstructors()->ResolvedJavaMethod[]::: hot spot resolved object type impl get declared constructors
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getDeclaredMethods()->ResolvedJavaMethod[]::: hot spot resolved object type impl get declared methods
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#getClassInitializer()->ResolvedJavaMethod::: hot spot resolved object type impl get class initializer
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#toString()->String::: hot spot resolved object type impl to string
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#lookupType(UnresolvedJavaType, boolean)->ResolvedJavaType::: hot spot resolved object type impl lookup type
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#resolveField(UnresolvedJavaField, ResolvedJavaType)->ResolvedJavaField::: hot spot resolved object type impl resolve field
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isCloneableWithAllocation()->boolean::: hot spot resolved object type impl is cloneable with allocation
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#readFieldValue(HotSpotResolvedJavaField, boolean)->JavaConstant::: hot spot resolved object type impl read field value
jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl#isAnonymous()->boolean::: hot spot resolved object type impl is anonymous
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#forKind(JavaKind)->HotSpotResolvedPrimitiveType::: hot spot resolved primitive type for kind
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#fromMetaspace(HotSpotObjectConstantImpl, char)->HotSpotResolvedPrimitiveType::: hot spot resolved primitive type from metaspace
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getModifiers()->int::: hot spot resolved primitive type get modifiers
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getArrayClass()->HotSpotResolvedObjectType::: hot spot resolved primitive type get array class
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getElementalType()->ResolvedJavaType::: hot spot resolved primitive type get elemental type
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getComponentType()->ResolvedJavaType::: hot spot resolved primitive type get component type
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getSuperclass()->ResolvedJavaType::: hot spot resolved primitive type get superclass
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getInterfaces()->ResolvedJavaType[]::: hot spot resolved primitive type get interfaces
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getSingleImplementor()->ResolvedJavaType::: hot spot resolved primitive type get single implementor
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#findLeastCommonAncestor(ResolvedJavaType)->ResolvedJavaType::: hot spot resolved primitive type find least common ancestor
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#hasFinalizableSubclass()->AssumptionResult::: hot spot resolved primitive type has finalizable subclass
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#hasFinalizer()->boolean::: hot spot resolved primitive type has finalizer
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isArray()->boolean::: hot spot resolved primitive type is array
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isEnum()->boolean::: hot spot resolved primitive type is enum
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isPrimitive()->boolean::: hot spot resolved primitive type is primitive
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isInitialized()->boolean::: hot spot resolved primitive type is initialized
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isLinked()->boolean::: hot spot resolved primitive type is linked
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isInstance(JavaConstant)->boolean::: hot spot resolved primitive type is instance
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isInstanceClass()->boolean::: hot spot resolved primitive type is instance class
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isInterface()->boolean::: hot spot resolved primitive type is interface
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isAssignableFrom(ResolvedJavaType)->boolean::: hot spot resolved primitive type is assignable from
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getHostClass()->ResolvedJavaType::: hot spot resolved primitive type get host class
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getJavaKind()->JavaKind::: hot spot resolved primitive type get java kind
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isJavaLangObject()->boolean::: hot spot resolved primitive type is java lang object
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#resolveMethod(ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod::: hot spot resolved primitive type resolve method
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#toString()->String::: hot spot resolved primitive type to string
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#findLeafConcreteSubtype()->AssumptionResult::: hot spot resolved primitive type find leaf concrete subtype
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#findUniqueConcreteMethod(ResolvedJavaMethod)->AssumptionResult::: hot spot resolved primitive type find unique concrete method
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getInstanceFields(boolean)->ResolvedJavaField[]::: hot spot resolved primitive type get instance fields
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getStaticFields()->ResolvedJavaField[]::: hot spot resolved primitive type get static fields
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getAnnotations()->Annotation[]::: hot spot resolved primitive type get annotations
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getDeclaredAnnotations()->Annotation[]::: hot spot resolved primitive type get declared annotations
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getAnnotation(Class)->T::: hot spot resolved primitive type get annotation
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#resolve(ResolvedJavaType)->ResolvedJavaType::: hot spot resolved primitive type resolve
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#initialize()->void::: hot spot resolved primitive type initialize
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#findInstanceFieldWithOffset(long, JavaKind)->ResolvedJavaField::: hot spot resolved primitive type find instance field with offset
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getSourceFileName()->String::: hot spot resolved primitive type get source file name
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isLocal()->boolean::: hot spot resolved primitive type is local
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isMember()->boolean::: hot spot resolved primitive type is member
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getEnclosingType()->ResolvedJavaType::: hot spot resolved primitive type get enclosing type
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getDeclaredConstructors()->ResolvedJavaMethod[]::: hot spot resolved primitive type get declared constructors
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getDeclaredMethods()->ResolvedJavaMethod[]::: hot spot resolved primitive type get declared methods
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getClassInitializer()->ResolvedJavaMethod::: hot spot resolved primitive type get class initializer
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#isCloneableWithAllocation()->boolean::: hot spot resolved primitive type is cloneable with allocation
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#equals(Object)->boolean::: hot spot resolved primitive type equals
jdk.vm.ci.hotspot.HotSpotResolvedPrimitiveType#getJavaMirror()->JavaConstant::: hot spot resolved primitive type get java mirror
jdk.vm.ci.hotspot.HotSpotRuntimeStub#getMethod()->ResolvedJavaMethod::: hot spot runtime stub get method
jdk.vm.ci.hotspot.HotSpotRuntimeStub#isValid()->boolean::: hot spot runtime stub is valid
jdk.vm.ci.hotspot.HotSpotRuntimeStub#invalidate()->void::: hot spot runtime stub invalidate
jdk.vm.ci.hotspot.HotSpotRuntimeStub#toString()->String::: hot spot runtime stub to string
jdk.vm.ci.hotspot.HotSpotRuntimeStub#executeVarargs(Object...)->Object::: hot spot runtime stub execute varargs
jdk.vm.ci.hotspot.HotSpotSentinelConstant#getJavaKind()->JavaKind::: hot spot sentinel constant get java kind
jdk.vm.ci.hotspot.HotSpotSentinelConstant#isNull()->boolean::: hot spot sentinel constant is null
jdk.vm.ci.hotspot.HotSpotSentinelConstant#isDefaultForKind()->boolean::: hot spot sentinel constant is default for kind
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asBoxedPrimitive()->Object::: hot spot sentinel constant as boxed primitive
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asInt()->int::: hot spot sentinel constant as int
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asBoolean()->boolean::: hot spot sentinel constant as boolean
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asLong()->long::: hot spot sentinel constant as long
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asFloat()->float::: hot spot sentinel constant as float
jdk.vm.ci.hotspot.HotSpotSentinelConstant#asDouble()->double::: hot spot sentinel constant as double
jdk.vm.ci.hotspot.HotSpotSentinelConstant#toString()->String::: hot spot sentinel constant to string
jdk.vm.ci.hotspot.HotSpotSentinelConstant#toValueString()->String::: hot spot sentinel constant to value string
jdk.vm.ci.hotspot.HotSpotSentinelConstant#hashCode()->int::: hot spot sentinel constant hash code
jdk.vm.ci.hotspot.HotSpotSentinelConstant#equals(Object)->boolean::: hot spot sentinel constant equals
jdk.vm.ci.hotspot.HotSpotSignature#getParameterCount(boolean)->int::: hot spot signature get parameter count
jdk.vm.ci.hotspot.HotSpotSignature#getParameterKind(int)->JavaKind::: hot spot signature get parameter kind
jdk.vm.ci.hotspot.HotSpotSignature#getParameterType(int, ResolvedJavaType)->JavaType::: hot spot signature get parameter type
jdk.vm.ci.hotspot.HotSpotSignature#toMethodDescriptor()->String::: hot spot signature to method descriptor
jdk.vm.ci.hotspot.HotSpotSignature#getReturnKind()->JavaKind::: hot spot signature get return kind
jdk.vm.ci.hotspot.HotSpotSignature#getReturnType(ResolvedJavaType)->JavaType::: hot spot signature get return type
jdk.vm.ci.hotspot.HotSpotSignature#toString()->String::: hot spot signature to string
jdk.vm.ci.hotspot.HotSpotSignature#equals(Object)->boolean::: hot spot signature equals
jdk.vm.ci.hotspot.HotSpotSignature#hashCode()->int::: hot spot signature hash code
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addByte(int)->void::: hot spot speculation encoding add byte
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addShort(int)->void::: hot spot speculation encoding add short
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addMethod(ResolvedJavaMethod)->void::: hot spot speculation encoding add method
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addType(ResolvedJavaType)->void::: hot spot speculation encoding add type
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addString(String)->void::: hot spot speculation encoding add string
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addInt(int)->void::: hot spot speculation encoding add int
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#addLong(long)->void::: hot spot speculation encoding add long
jdk.vm.ci.hotspot.HotSpotSpeculationEncoding#getByteArray()->byte[]:::Gets the final encoded byte array and closes this encoding such that any further attempts to update it result in an IllegalArgumentException.
jdk.vm.ci.hotspot.HotSpotSpeculationLog#getFailedSpeculationsAddress()->long:::Gets the address of the pointer to the native failed speculations list.
jdk.vm.ci.hotspot.HotSpotSpeculationLog#addFailedSpeculation(Speculation)->boolean:::Adds speculation to the native list of failed speculations
jdk.vm.ci.hotspot.HotSpotSpeculationLog#managesFailedSpeculations()->boolean:::Returns true if the value returned by #getFailedSpeculationsAddress() is only valid only as long as this object is alive, false otherwise.
jdk.vm.ci.hotspot.HotSpotSpeculationLog.HotSpotSpeculation#getEncoding()->JavaConstant::: hot spot speculation get encoding
jdk.vm.ci.hotspot.HotSpotSpeculationLog.HotSpotSpeculation#toString()->String::: hot spot speculation to string
jdk.vm.ci.hotspot.HotSpotSpeculationLog#collectFailedSpeculations()->void::: hot spot speculation log collect failed speculations
jdk.vm.ci.hotspot.HotSpotSpeculationLog#getFlattenedSpeculations(boolean)->byte[]::: hot spot speculation log get flattened speculations
jdk.vm.ci.hotspot.HotSpotSpeculationLog#maySpeculate(SpeculationReason)->boolean::: hot spot speculation log may speculate
jdk.vm.ci.hotspot.HotSpotSpeculationLog#speculate(SpeculationReason)->Speculation::: hot spot speculation log speculate
jdk.vm.ci.hotspot.HotSpotSpeculationLog#hasSpeculations()->boolean::: hot spot speculation log has speculations
jdk.vm.ci.hotspot.HotSpotSpeculationLog#lookupSpeculation(JavaConstant)->Speculation::: hot spot speculation log lookup speculation
jdk.vm.ci.hotspot.HotSpotSpeculationLog#toString()->String::: hot spot speculation log to string
jdk.vm.ci.hotspot.HotSpotStackFrameReference#getStackPointer()->long::: hot spot stack frame reference get stack pointer
jdk.vm.ci.hotspot.HotSpotStackFrameReference#getFrameNumber()->int::: hot spot stack frame reference get frame number
jdk.vm.ci.hotspot.HotSpotStackFrameReference#getLocal(int)->Object::: hot spot stack frame reference get local
jdk.vm.ci.hotspot.HotSpotStackFrameReference#isVirtual(int)->boolean::: hot spot stack frame reference is virtual
jdk.vm.ci.hotspot.HotSpotStackFrameReference#materializeVirtualObjects(boolean)->void::: hot spot stack frame reference materialize virtual objects
jdk.vm.ci.hotspot.HotSpotStackFrameReference#getBytecodeIndex()->int::: hot spot stack frame reference get bytecode index
jdk.vm.ci.hotspot.HotSpotStackFrameReference#getMethod()->ResolvedJavaMethod::: hot spot stack frame reference get method
jdk.vm.ci.hotspot.HotSpotStackFrameReference#isMethod(ResolvedJavaMethod)->boolean::: hot spot stack frame reference is method
jdk.vm.ci.hotspot.HotSpotStackFrameReference#hasVirtualObjects()->boolean::: hot spot stack frame reference has virtual objects
jdk.vm.ci.hotspot.HotSpotStackFrameReference#toString()->String::: hot spot stack frame reference to string
jdk.vm.ci.hotspot.HotSpotStackIntrospection#iterateFrames(ResolvedJavaMethod[], ResolvedJavaMethod[], int, InspectedFrameVisitor)->T::: hot spot stack introspection iterate frames
jdk.vm.ci.hotspot.HotSpotVMConfig#config()->HotSpotVMConfig:::Gets the configuration associated with the singleton HotSpotJVMCIRuntime.
jdk.vm.ci.hotspot.HotSpotVMConfig#getHostArchitectureName()->String:::Gets the host architecture name for the purpose of finding the corresponding HotSpotJVMCIBackendFactory backend.
jdk.vm.ci.hotspot.HotSpotVMConfig#arrayPrototypeMarkWord()->long:::See markOopDesc::prototype().
jdk.vm.ci.hotspot.HotSpotVMConfig#symbolAt(int)->String:::Returns the symbol in the vmSymbols table at position index as a String.
jdk.vm.ci.hotspot.HotSpotVMConfig#baseVtableLength()->int::: hot spot config base vtable length
jdk.vm.ci.hotspot.HotSpotVMConfig#getCodeInstallResultDescription(int)->String::: hot spot config get code install result description
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getStore()->HotSpotVMConfigStore:::Gets the available configuration data.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getAddress(String, Long)->long:::Gets the address of a C++ symbol.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getAddress(String)->long:::Gets the address of a C++ symbol.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getConstant(String, Class, T)->T:::Gets the value of a C++ constant.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getConstant(String, Class)->T:::Gets the value of a C++ constant.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldOffset(String, Class, String, T)->T:::Gets the offset of a non-static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldOffset(String, Class, T, String[])->T:::Gets the offset of a non-static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldOffset(String, Class, String)->T:::Gets the offset of a non-static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldOffset(String, Class)->T:::Gets the offset of a non-static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldAddress(String, String, Long)->long:::Gets the address of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldAddress(String, Long, String[])->long:::Gets the address of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldAddress(String, String)->long:::Gets the address of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldValue(String, Class, String, T)->T:::Gets the value of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldValue(String, Class, String)->T:::Gets the value of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldValue(String, Class, T, String[])->T:::Gets the value of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFieldValue(String, Class)->T:::Gets the value of a static C++ field.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFlag(String, Class)->T:::Gets a VM flag value.
jdk.vm.ci.hotspot.HotSpotVMConfigAccess#getFlag(String, Class, T)->T:::Gets a VM flag value.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#getAddresses()->Map:::Gets the C++ symbols whose addresses are exposed by this object.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#getConstants()->Map:::Gets the C++ constants exposed by this object.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#getFlags()->Map:::Gets the VM flags exposed by this object.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#getFields()->Map:::Gets the C++ fields exposed by this object.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#getIntrinsics()->List:::Gets the VM intrinsic descriptions exposed by this object.
jdk.vm.ci.hotspot.HotSpotVMConfigStore#toString()->String::: hot spot config store to string
jdk.vm.ci.hotspot.HotSpotVMConfigStore#printConfig()->void::: hot spot config store print config
jdk.vm.ci.hotspot.HotSpotVMEventListener#notifyShutdown()->void:::Notifies this client that the VM is shutting down.
jdk.vm.ci.hotspot.HotSpotVMEventListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode)->void:::Notify on successful install into the code cache.
jdk.vm.ci.hotspot.HotSpotVMEventListener#notifyBootstrapFinished()->void:::Notify on completion of a bootstrap.
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#getHandle()->long::: indirect hot spot object constant impl get handle
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#isValid()->boolean::: indirect hot spot object constant impl is valid
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#getType()->HotSpotResolvedObjectType::: indirect hot spot object constant impl get type
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#clear(Object)->void:::Clears the foreign object reference.
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#compress()->JavaConstant::: indirect hot spot object constant impl compress
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#uncompress()->JavaConstant::: indirect hot spot object constant impl uncompress
jdk.vm.ci.hotspot.IndirectHotSpotObjectConstantImpl#getIdentityHashCode()->int::: indirect hot spot object constant impl get identity hash code
jdk.vm.ci.hotspot.MetaspaceHandleObject#getMetadataHandle()->long::: metaspace handle object get metadata handle
jdk.vm.ci.hotspot.MetaspaceHandleObject#getMetaspacePointer()->long::: metaspace handle object get metaspace pointer
jdk.vm.ci.hotspot.MetaspaceObject#getMetaspacePointer()->long::: metaspace object get metaspace pointer
jdk.vm.ci.hotspot.SharedHotSpotSpeculationLog#toString()->String::: shared hot spot speculation log to string
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#resolveObject(HotSpotObjectConstantImpl)->Object::: shared library reflection resolve object
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)->boolean::: shared library reflection is instance
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)->boolean::: shared library reflection is assignable from
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)->boolean::: shared library reflection is local class
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)->boolean::: shared library reflection is member class
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)->HotSpotResolvedObjectType::: shared library reflection get enclosing class
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: shared library reflection read field value
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)->JavaConstant::: shared library reflection read field value
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)->boolean::: shared library reflection equals
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getJavaMirror(HotSpotResolvedPrimitiveType)->JavaConstant::: shared library reflection get java mirror
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getParameters(HotSpotResolvedJavaMethodImpl)->ResolvedJavaMethod.Parameter[]::: shared library reflection get parameters
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getClassAnnotations(String)->Annotation[]::: shared library reflection get class annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getParameterAnnotations(String, String)->Annotation[][]::: shared library reflection get parameter annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: shared library reflection get annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)->Annotation[]::: shared library reflection get declared annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)->T::: shared library reflection get annotation
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[][]::: shared library reflection get parameter annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)->Type[]::: shared library reflection get generic parameter types
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: shared library reflection get field annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: shared library reflection get method annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)->T::: shared library reflection get method annotation
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)->Annotation[]::: shared library reflection get method declared annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)->Annotation[]::: shared library reflection get field declared annotations
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)->T::: shared library reflection get field annotation
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getType(HotSpotObjectConstantImpl)->HotSpotResolvedObjectTypeImpl::: shared library reflection get type
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#asString(HotSpotObjectConstantImpl)->String::: shared library reflection as string
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#asJavaType(HotSpotObjectConstantImpl)->ResolvedJavaType::: shared library reflection as java type
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#convertUnknownValue(Object)->Object::: shared library reflection convert unknown value
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#asObject(HotSpotObjectConstantImpl, Class)->T::: shared library reflection as object
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)->Object::: shared library reflection as object
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#formatString(HotSpotObjectConstantImpl)->String::: shared library reflection format string
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getLength(HotSpotObjectConstantImpl)->Integer::: shared library reflection get length
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#readArrayElement(HotSpotObjectConstantImpl, int)->JavaConstant::: shared library reflection read array element
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#forObject(Object)->JavaConstant::: shared library reflection for object
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#unboxPrimitive(HotSpotObjectConstantImpl)->JavaConstant::: shared library reflection unbox primitive
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#boxPrimitive(JavaConstant)->JavaConstant::: shared library reflection box primitive
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getInt(HotSpotObjectConstantImpl, long)->int::: shared library reflection get int
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getByte(HotSpotObjectConstantImpl, long)->byte::: shared library reflection get byte
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getShort(HotSpotObjectConstantImpl, long)->short::: shared library reflection get short
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#getLong(HotSpotObjectConstantImpl, long)->long::: shared library reflection get long
jdk.vm.ci.hotspot.SharedLibraryJVMCIReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)->void::: shared library reflection check read
jdk.vm.ci.hotspot.TranslatedException#fillInStackTrace()->Throwable:::No need to record an initial stack trace since it will be manually overwritten.
jdk.vm.ci.hotspot.TranslatedException#encodeThrowable(Throwable)->String:::Encodes throwable including its stack and causes as a string
jdk.vm.ci.hotspot.TranslatedException#decodeThrowable(String)->Throwable:::Decodes encodedThrowable into a TranslatedException.
jdk.vm.ci.hotspot.VMField#isStatic()->boolean:::Determines if the represented field is static.
jdk.vm.ci.hotspot.VMField#toString()->String::: field to string
jdk.vm.ci.hotspot.VMFlag#toString()->String::: flag to string
jdk.vm.ci.hotspot.VMIntrinsicMethod#equals(Object)->boolean::: intrinsic method equals
jdk.vm.ci.hotspot.VMIntrinsicMethod#hashCode()->int::: intrinsic method hash code
jdk.vm.ci.hotspot.VMIntrinsicMethod#toString()->String::: intrinsic method to string

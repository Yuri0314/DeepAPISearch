Cleaner#add(Cleaner)::: cleaner add:::if->clean->if->return
Cleaner#remove(Cleaner):::Removes cl from the linked list of cleaners.:::if->return->if->if->else->if->if
Cleaner#doCleanup():::Performs the cleanup action now that this object's referent has become weakly reachable.:::
Cleaner#clean():::Remove the cleaners whose referents have become weakly reachable.:::c->queue->poll->while->remove->c->doCleanup->queue->poll
CompilerToVM#registerNatives():::Initializes the native part of the JVMCI runtime.:::
CompilerToVM#arrayBaseOffset(JavaKind)::: compiler to m array base offset:::
CompilerToVM#arrayIndexScale(JavaKind)::: compiler to m array index scale:::
CompilerToVM#compilerToVM():::Gets the CompilerToVM instance associated with the singleton HotSpotJVMCIRuntime instance.:::return->runtime->getCompilerToVM
CompilerToVM#getBytecode(HotSpotResolvedJavaMethodImpl):::Copies the original bytecode of method into a new byte array and returns it.:::
CompilerToVM#getExceptionTableLength(HotSpotResolvedJavaMethodImpl):::Gets the number of entries in method's exception handler table or 0 if it has no exception handler table.:::
CompilerToVM#getExceptionTableStart(HotSpotResolvedJavaMethodImpl):::Gets the address of the first entry in method's exception handler table:::
CompilerToVM#isCompilable(HotSpotResolvedJavaMethodImpl):::Determines whether method is currently compilable by the JVMCI compiler being used by the VM:::
CompilerToVM#hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl):::Determines if method is targeted by a VM directive (e.g., -XX:CompileCommand=dontinline,<pattern>) or annotation (e.g., jdk.internal.vm.annotation.DontInline) that specifies it should not be inlined.:::
CompilerToVM#shouldInlineMethod(HotSpotResolvedJavaMethodImpl):::Determines if method should be inlined at any cost:::
CompilerToVM#findUniqueConcreteMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl):::Used to implement ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod).:::
CompilerToVM#getImplementor(HotSpotResolvedObjectTypeImpl):::Gets the implementor for the interface class type.:::
CompilerToVM#methodIsIgnoredBySecurityStackWalk(HotSpotResolvedJavaMethodImpl):::Determines if method is ignored by security stack walks.:::
CompilerToVM#lookupType(String, HotSpotResolvedObjectTypeImpl, boolean):::Converts a name to a type.:::
CompilerToVM#lookupClass(Class)::: compiler to m lookup class:::
CompilerToVM#resolvePossiblyCachedConstantInPool(HotSpotConstantPool, int):::Resolves the entry at index cpi in constantPool to an object, looking in the constant pool cache first:::
CompilerToVM#lookupNameAndTypeRefIndexInPool(HotSpotConstantPool, int):::Gets the JVM_CONSTANT_NameAndType index from the entry at index cpi in constantPool:::
CompilerToVM#lookupNameInPool(HotSpotConstantPool, int):::Gets the name of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool:::
CompilerToVM#lookupSignatureInPool(HotSpotConstantPool, int):::Gets the signature of the JVM_CONSTANT_NameAndType entry referenced by another entry denoted by which in constantPool:::
CompilerToVM#lookupKlassRefIndexInPool(HotSpotConstantPool, int):::Gets the JVM_CONSTANT_Class index from the entry at index cpi in constantPool:::
CompilerToVM#lookupKlassInPool(HotSpotConstantPool, int):::Looks up a class denoted by the JVM_CONSTANT_Class entry at index cpi in constantPool:::
CompilerToVM#lookupMethodInPool(HotSpotConstantPool, int, byte):::Looks up a method denoted by the entry at index cpi in constantPool:::
CompilerToVM#resolveInvokeDynamicInPool(HotSpotConstantPool, int):::Ensures that the type referenced by the specified JVM_CONSTANT_InvokeDynamic entry at index cpi in constantPool is loaded and initialized:::
CompilerToVM#resolveInvokeHandleInPool(HotSpotConstantPool, int):::If cpi denotes an entry representing a signature polymorphic method, this method ensures that the type referenced by the entry is loaded and initialized:::
CompilerToVM#isResolvedInvokeHandleInPool(HotSpotConstantPool, int):::If cpi denotes an entry representing a resolved dynamic adapter (see #resolveInvokeDynamicInPool and #resolveInvokeHandleInPool), return the opcode of the instruction for which the resolution was performed (invokedynamic or invokevirtual), or -1 otherwise.:::
CompilerToVM#getSignaturePolymorphicHolders():::Gets the list of type names (in the format of JavaType#getName()) denoting the classes that define signature polymorphic methods.:::
CompilerToVM#resolveTypeInPool(HotSpotConstantPool, int):::Gets the resolved type denoted by the entry at index cpi in constantPool:::
CompilerToVM#resolveFieldInPool(HotSpotConstantPool, int, HotSpotResolvedJavaMethodImpl, byte, int[]):::Looks up and attempts to resolve the JVM_CONSTANT_Field entry for at index cpi in constantPool:::
CompilerToVM#constantPoolRemapInstructionOperandFromCache(HotSpotConstantPool, int):::Converts cpci from an index into the cache for constantPool to an index directly into constantPool:::
CompilerToVM#lookupAppendixInPool(HotSpotConstantPool, int):::Gets the appendix object (if any) associated with the entry at index cpi in constantPool.:::
CompilerToVM#installCode(TargetDescription, HotSpotCompiledCode, InstalledCode, long, byte[]):::Installs the result of a compilation into the code cache.:::
CompilerToVM#getMetadata(TargetDescription, HotSpotCompiledCode, HotSpotMetaData):::Generates the VM metadata for some compiled code and copies them into metaData:::
CompilerToVM#resetCompilationStatistics():::Resets all compilation statistics.:::
CompilerToVM#readConfiguration():::Reads the database of VM info:::
CompilerToVM#resolveMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl, HotSpotResolvedObjectTypeImpl):::Resolves the implementation of method for virtual dispatches on objects of dynamic type exactReceiver:::
CompilerToVM#getClassInitializer(HotSpotResolvedObjectTypeImpl):::Gets the static initializer of type.:::
CompilerToVM#hasFinalizableSubclass(HotSpotResolvedObjectTypeImpl):::Determines if type or any of its currently loaded subclasses overrides Object.finalize().:::
CompilerToVM#asResolvedJavaMethod(Executable):::Gets the method corresponding to executable.:::
CompilerToVM#getMaxCallTargetOffset(long):::Gets the maximum absolute offset of a PC relative call to address from any position in the code cache.:::
CompilerToVM#disassembleCodeBlob(InstalledCode)::: compiler to m disassemble code blob:::
CompilerToVM#getStackTraceElement(HotSpotResolvedJavaMethodImpl, int):::Gets a stack trace element for method at bytecode index bci.:::
CompilerToVM#executeHotSpotNmethod(Object[], HotSpotNmethod):::Executes some installedCode with arguments args.:::
CompilerToVM#getLineNumberTable(HotSpotResolvedJavaMethodImpl):::Gets the line number table for method:::
CompilerToVM#getLocalVariableTableLength(HotSpotResolvedJavaMethodImpl):::Gets the number of entries in the local variable table for method.:::
CompilerToVM#getLocalVariableTableStart(HotSpotResolvedJavaMethodImpl):::Gets the address of the first entry in the local variable table for method:::
CompilerToVM#readUncompressedOop(long):::Reads an object pointer within a VM data structure:::
CompilerToVM#setNotInlinableOrCompilable(HotSpotResolvedJavaMethodImpl):::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::
CompilerToVM#reprofile(HotSpotResolvedJavaMethodImpl):::Invalidates the profiling information for method and (re)initializes it such that profiling restarts upon its next invocation.:::
CompilerToVM#invalidateHotSpotNmethod(HotSpotNmethod):::Invalidates nmethodMirror such that InvalidInstalledCodeException will be raised the next time nmethodMirror is #executeHotSpotNmethod executed:::
CompilerToVM#collectCounters():::Collects the current values of all JVMCI benchmark counters, summed up over all threads.:::
CompilerToVM#getCountersSize():::Get the current number of counters allocated for use by JVMCI:::
CompilerToVM#setCountersSize(int):::Attempt to change the size of the counters allocated for JVMCI:::
CompilerToVM#isMature(long):::Determines if metaspaceMethodData is mature.:::
CompilerToVM#allocateCompileId(HotSpotResolvedJavaMethodImpl, int):::Generate a unique id to identify the result of the compile.:::
CompilerToVM#hasCompiledCodeForOSR(HotSpotResolvedJavaMethodImpl, int, int):::Determines if method has OSR compiled code identified by entryBCI for compilation level level.:::
CompilerToVM#getSymbol(long):::Gets the value of metaspaceSymbol as a String.:::
CompilerToVM#iterateFrames(ResolvedJavaMethod[], ResolvedJavaMethod[], int, InspectedFrameVisitor)::: compiler to m iterate frames:::
CompilerToVM#materializeVirtualObjects(HotSpotStackFrameReference, boolean):::Materializes all virtual objects within stackFrame and updates its locals.:::
CompilerToVM#getVtableIndexForInterfaceMethod(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaMethodImpl):::Gets the v-table index for interface method method in the receiver type or HotSpotVMConfig#invalidVtableIndex if method is not in type's v-table.:::
CompilerToVM#shouldDebugNonSafepoints():::Determines if debug info should also be emitted at non-safepoint locations.:::
CompilerToVM#writeDebugOutput(byte[], int, int, boolean, boolean):::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.:::
CompilerToVM#flushDebugOutput():::Flush HotSpot's log stream.:::
CompilerToVM#getResolvedJavaMethod(HotSpotObjectConstantImpl, long):::Read a HotSpot Method* value from the memory location described by base plus displacement and return the HotSpotResolvedJavaMethodImpl wrapping it:::
CompilerToVM#getConstantPool(MetaspaceObject):::Gets the ConstantPool* associated with object and returns a HotSpotConstantPool wrapping it.:::
CompilerToVM#getResolvedJavaType0(Object, long, boolean):::Read a HotSpot Klass* value from the memory location described by base plus displacement and return the HotSpotResolvedObjectTypeImpl wrapping it:::
CompilerToVM#getResolvedJavaType(MetaspaceObject, long, boolean)::: compiler to m get resolved java type:::return->getResolvedJavaType0
CompilerToVM#getResolvedJavaType(HotSpotObjectConstantImpl, long, boolean)::: compiler to m get resolved java type:::return->getResolvedJavaType0
CompilerToVM#getResolvedJavaType(long, boolean)::: compiler to m get resolved java type:::return->getResolvedJavaType0
CompilerToVM#methodDataProfileDataSize(long, int):::Return the size of the HotSpot ProfileData* pointed at by position:::
CompilerToVM#getFingerprint(long):::Gets the fingerprint for a given Klass*.:::
CompilerToVM#interpreterFrameSize(BytecodeFrame):::Return the amount of native stack required for the interpreter frames represented by frame:::
CompilerToVM#compileToBytecode(HotSpotObjectConstantImpl):::Invokes non-public method java.lang.invoke.LambdaForm.compileToBytecode() on lambdaForm (which must be a java.lang.invoke.LambdaForm instance).:::
CompilerToVM#getFlagValue(String):::Gets the value of the VM flag named name.:::
CompilerToVM#getHostClass(HotSpotResolvedObjectTypeImpl):::Gets the host class for type.:::
CompilerToVM#getObjectAtAddress(long):::Gets the object at the address oopAddress.:::
CompilerToVM#getInterfaces(HotSpotResolvedObjectTypeImpl)::: compiler to m get interfaces:::
CompilerToVM#getComponentType(HotSpotResolvedObjectTypeImpl)::: compiler to m get component type:::
CompilerToVM#getArrayType(HotSpotResolvedJavaType):::Get the array class for type:::
CompilerToVM#ensureInitialized(HotSpotResolvedObjectTypeImpl):::Forces initialization of type.:::
CompilerToVM#isInternedString(HotSpotObjectConstantImpl):::Checks if object is a String and is an interned string value.:::
CompilerToVM#getIdentityHashCode(HotSpotObjectConstantImpl):::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.:::
CompilerToVM#unboxPrimitive(HotSpotObjectConstantImpl):::Converts a constant object representing a boxed primitive into a boxed primitive.:::
CompilerToVM#boxPrimitive(Object):::Converts a boxed primitive into a JavaConstant representing the same value.:::
CompilerToVM#getDeclaredConstructors(HotSpotResolvedObjectTypeImpl):::Gets the ResolvedJavaMethods for all the constructors of the type holder.:::
CompilerToVM#getDeclaredMethods(HotSpotResolvedObjectTypeImpl):::Gets the ResolvedJavaMethods for all the non-constructor methods of the type holder.:::
CompilerToVM#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean):::Reads the current value of a static field.:::
CompilerToVM#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean):::Reads the current value of an instance field.:::
CompilerToVM#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)::: compiler to m is instance:::
CompilerToVM#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)::: compiler to m is assignable from:::
CompilerToVM#asJavaType(HotSpotObjectConstantImpl)::: compiler to m as java type:::
CompilerToVM#asString(HotSpotObjectConstantImpl):::Converts a String constant into a String.:::
CompilerToVM#equals(HotSpotObjectConstantImpl, long, HotSpotObjectConstantImpl, long):::Compares the contents of xHandle and yHandle for pointer equality.:::
CompilerToVM#getJavaMirror(HotSpotResolvedJavaType):::Gets a JavaConstant wrapping the java.lang.Class mirror for type.:::
CompilerToVM#getArrayLength(HotSpotObjectConstantImpl):::Returns the length of the array if object represents an array or -1 otherwise.:::
CompilerToVM#readArrayElement(HotSpotObjectConstantImpl, int):::Reads the element at index if object is an array:::
CompilerToVM#getByte(HotSpotObjectConstantImpl, long):::Reads a byte sized value from displacement in object.:::
CompilerToVM#getShort(HotSpotObjectConstantImpl, long):::Reads a short sized value from displacement in object.:::
CompilerToVM#getInt(HotSpotObjectConstantImpl, long):::Reads an int sized value from displacement in object.:::
CompilerToVM#getLong(HotSpotObjectConstantImpl, long):::Reads a long sized value from displacement in object.:::
CompilerToVM#getObject(HotSpotObjectConstantImpl, long):::Reads a Java object from displacement in object.:::
CompilerToVM#registerNativeMethods(Class)::: compiler to m register native methods:::
CompilerToVM#translate(Object)::: compiler to m translate:::
CompilerToVM#unhand(long)::: compiler to m unhand:::
CompilerToVM#updateHotSpotNmethod(HotSpotNmethod):::Updates address and entryPoint fields of nmethodMirror based on the current state of the nmethod identified by address and nmethodMirror.compileId in the code cache.:::
CompilerToVM#getCode(HotSpotInstalledCode)::: compiler to m get code:::
CompilerToVM#asReflectionExecutable(HotSpotResolvedJavaMethodImpl):::Gets a Executable corresponding to method.:::
CompilerToVM#asReflectionField(HotSpotResolvedObjectTypeImpl, int):::Gets a Field denoted by holder and index.:::
CompilerToVM#isTrustedForIntrinsics(HotSpotResolvedObjectTypeImpl)::: compiler to m is trusted for intrinsics:::
CompilerToVM#deleteGlobalHandle(long):::Releases the resources backing the global JNI handle:::
CompilerToVM#getFailedSpeculations(long, byte[][]):::Gets the failed speculations pointed to by *failedSpeculationsAddress.:::
CompilerToVM#getFailedSpeculationsAddress(HotSpotResolvedJavaMethodImpl):::Gets the address of the MethodData::_failed_speculations field in the MethodData associated with method:::
CompilerToVM#releaseFailedSpeculations(long):::Frees the failed speculations pointed to by *failedSpeculationsAddress.:::
CompilerToVM#addFailedSpeculation(long, byte[]):::Adds a speculation to the failed speculations pointed to by *failedSpeculationsAddress.:::
CompilerToVM#isCurrentThreadAttached()::: compiler to m is current thread attached:::
CompilerToVM#getCurrentJavaThread()::: compiler to m get current java thread:::
CompilerToVM#attachCurrentThread(boolean)::: compiler to m attach current thread:::
CompilerToVM#detachCurrentThread()::: compiler to m detach current thread:::
CompilerToVM#callSystemExit(int)::: compiler to m call system exit:::
DirectHotSpotObjectConstantImpl#forObject(Object, boolean)::: direct hot spot object constant impl for object:::if->return->else->return->new->DirectHotSpotObjectConstantImpl
DirectHotSpotObjectConstantImpl#forNonNullObject(Object, boolean)::: direct hot spot object constant impl for non null object:::if->throw->new->NullPointerException->return->new->DirectHotSpotObjectConstantImpl
DirectHotSpotObjectConstantImpl#compress()::: direct hot spot object constant impl compress:::return->new->DirectHotSpotObjectConstantImpl
DirectHotSpotObjectConstantImpl#uncompress()::: direct hot spot object constant impl uncompress:::return->new->DirectHotSpotObjectConstantImpl
DirectHotSpotObjectConstantImpl#getIdentityHashCode()::: direct hot spot object constant impl get identity hash code:::return->System->identityHashCode
EmptyEventProvider#shouldNotReachHere()::: empty event provider should not reach here:::throw->new->InternalError
EmptyEventProvider#newCompilationEvent()::: empty event provider new compilation event:::return->new->EmptyCompilationEvent
EmptyEventProvider.EmptyCompilationEvent#commit()::: empty compilation event commit:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#shouldWrite()::: empty compilation event should write:::return
EmptyEventProvider.EmptyCompilationEvent#begin()::: empty compilation event begin:::
EmptyEventProvider.EmptyCompilationEvent#end()::: empty compilation event end:::
EmptyEventProvider.EmptyCompilationEvent#setMethod(String)::: empty compilation event set method:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setCompileId(int)::: empty compilation event set compile id:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setCompileLevel(int)::: empty compilation event set compile level:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setSucceeded(boolean)::: empty compilation event set succeeded:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setIsOsr(boolean)::: empty compilation event set is osr:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setCodeSize(int)::: empty compilation event set code size:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilationEvent#setInlinedBytes(int)::: empty compilation event set inlined bytes:::throw->shouldNotReachHere
EmptyEventProvider#newCompilerFailureEvent()::: empty event provider new compiler failure event:::return->new->EmptyCompilerFailureEvent
EmptyEventProvider.EmptyCompilerFailureEvent#commit()::: empty compiler failure event commit:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilerFailureEvent#shouldWrite()::: empty compiler failure event should write:::return
EmptyEventProvider.EmptyCompilerFailureEvent#setCompileId(int)::: empty compiler failure event set compile id:::throw->shouldNotReachHere
EmptyEventProvider.EmptyCompilerFailureEvent#setMessage(String)::: empty compiler failure event set message:::throw->shouldNotReachHere
EventProvider#createEmptyEventProvider():::Creates and returns an empty implementation for EventProvider:::return->new->EmptyEventProvider
EventProvider#createEmptyCompilationEvent():::Creates and returns an empty implementation for CompilationEvent.:::return->new->EmptyCompilationEvent
EventProvider#createEmptyCompilerFailureEvent():::Creates and returns an empty implementation for CompilationEvent.:::return->new->EmptyCompilerFailureEvent
EventProvider.InstantEvent#commit():::Commits the event.:::
EventProvider.InstantEvent#shouldWrite():::Determines if this particular event instance would be committed to the data stream right now if application called #commit():::
EventProvider.TimedEvent#begin():::Starts the timing for this event.:::
EventProvider.TimedEvent#end():::Ends the timing period for this event.:::
EventProvider#newCompilationEvent():::Creates a new CompilationEvent.:::
EventProvider.CompilationEvent#setMethod(String)::: compilation event set method:::
EventProvider.CompilationEvent#setCompileId(int)::: compilation event set compile id:::
EventProvider.CompilationEvent#setCompileLevel(int)::: compilation event set compile level:::
EventProvider.CompilationEvent#setSucceeded(boolean)::: compilation event set succeeded:::
EventProvider.CompilationEvent#setIsOsr(boolean)::: compilation event set is osr:::
EventProvider.CompilationEvent#setCodeSize(int)::: compilation event set code size:::
EventProvider.CompilationEvent#setInlinedBytes(int)::: compilation event set inlined bytes:::
EventProvider#newCompilerFailureEvent():::Creates a new CompilerFailureEvent.:::
EventProvider.CompilerFailureEvent#setCompileId(int)::: compiler failure event set compile id:::
EventProvider.CompilerFailureEvent#setMessage(String)::: compiler failure event set message:::
HandleCleaner#doCleanup():::Releases the resource associated with this.handle.:::if->CompilerToVM->compilerToVM->deleteGlobalHandle->else->value->UNSAFE->getLong->UNSAFE->compareAndSetLong
HandleCleaner#create(Object, long):::Registers a cleaner for handle:::new->HandleCleaner
HotSpotCodeCacheProvider#getMarkName(Mark)::: hot spot code cache provider get mark name:::markId->store->runtime->getConfigStore->foreach->store->getConstants->entrySet->name->e->getKey->if->name->startsWith->e->getValue->return->return->CodeCacheProvider.super->getMarkName
HotSpotCodeCacheProvider#getTargetName(Call):::Decodes a call target to a mnemonic if possible.:::if->address->store->runtime->getConfigStore->foreach->store->getFields->entrySet->field->e->getValue->if->field->isStatic->return->e->getValue->Long->toHexString->return->CodeCacheProvider.super->getTargetName
HotSpotCodeCacheProvider#getRegisterConfig()::: hot spot code cache provider get register config:::return
HotSpotCodeCacheProvider#getMinimumOutgoingSize()::: hot spot code cache provider get minimum outgoing size:::return
HotSpotCodeCacheProvider#logOrDump(InstalledCode, CompiledCode)::: hot spot code cache provider log or dump:::runtime->notifyInstall->return
HotSpotCodeCacheProvider#installCode(ResolvedJavaMethod, CompiledCode, InstalledCode, SpeculationLog, boolean)::: hot spot code cache provider install code:::resultInstalledCode->if->throw->new->IllegalArgumentException->hsCompiledCode->name->hsCompiledCode->getName->hsCompiledNmethod->if->new->HotSpotRuntimeStub->else->hsMethod->new->HotSpotNmethod->speculationLog->if->if->log->hasSpeculations->speculations->failedSpeculationsAddress->if->speculationLog->getFlattenedSpeculations->speculationLog->getFailedSpeculationsAddress->else->new->byteArr->result->runtime->getCompilerToVM->installCode->if->resultDesc->config->getCodeInstallResultDescription->if->msg->hsCompiledNmethod->getInstallationFailureMessage->if->String->format->else->String->format->if->throw->new->AssertionError->throw->new->BailoutException->else->throw->getName->new->BailoutException->return->logOrDump
HotSpotCodeCacheProvider#invalidateInstalledCode(InstalledCode)::: hot spot code cache provider invalidate installed code:::if->runtime->getCompilerToVM->invalidateHotSpotNmethod->else->throw->Objects->requireNonNull->getClass->getName->new->IllegalArgumentException
HotSpotCodeCacheProvider#getTarget()::: hot spot code cache provider get target:::return
HotSpotCodeCacheProvider#disassemble(InstalledCode)::: hot spot code cache provider disassemble:::if->code->isValid->return->runtime->getCompilerToVM->disassembleCodeBlob->return
HotSpotCodeCacheProvider#createSpeculationLog()::: hot spot code cache provider create speculation log:::return->new->HotSpotSpeculationLog
HotSpotCodeCacheProvider#getMaxCallTargetOffset(long)::: hot spot code cache provider get max call target offset:::return->runtime->getCompilerToVM->getMaxCallTargetOffset
HotSpotCodeCacheProvider#shouldDebugNonSafepoints()::: hot spot code cache provider should debug non safepoints:::return->runtime->getCompilerToVM->shouldDebugNonSafepoints
HotSpotCodeCacheProvider#interpreterFrameSize(BytecodeFrame)::: hot spot code cache provider interpreter frame size:::return->runtime->getCompilerToVM->interpreterFrameSize
HotSpotCodeCacheProvider#resetCompilationStatistics():::Resets all compilation statistics.:::runtime->getCompilerToVM->resetCompilationStatistics
HotSpotCompilationRequest#getMethod()::: hot spot compilation request get method:::return->super->getMethod
HotSpotCompilationRequest#getJvmciEnv():::Gets the address of the native JVMCICompileState or 0L if no such object exists:::return
HotSpotCompilationRequest#getId():::Gets the VM allocated identifier for this compilation.:::return
HotSpotCompilationRequest#toString()::: hot spot compilation request to string:::return->super->toString
HotSpotCompilationRequestResult#getFailure()::: hot spot compilation request result get failure:::return
HotSpotCompilationRequestResult#success(int):::Creates a result representing a successful compilation.:::return->new->HotSpotCompilationRequestResult
HotSpotCompilationRequestResult#failure(String, boolean):::Creates a result representing a failed compilation.:::return->new->HotSpotCompilationRequestResult
HotSpotCompilationRequestResult#getFailureMessage()::: hot spot compilation request result get failure message:::return
HotSpotCompilationRequestResult#getRetry()::: hot spot compilation request result get retry:::return
HotSpotCompilationRequestResult#getInlinedBytecodes()::: hot spot compilation request result get inlined bytecodes:::return
HotSpotCompiledCode#getName()::: hot spot compiled code get name:::return
HotSpotCompiledCode#toString()::: hot spot compiled code to string:::return
HotSpotCompiledCode#validateFrames():::Ensure that all the frames passed into the VM are properly formatted with an empty or illegal slot following double word slots.:::foreach->if->info->if->frame->frame->if->getVirtualObjectMapping->foreach->getVirtualObjectMapping->verifyVirtualObject->return
HotSpotCompiledCode#verifyVirtualObject(VirtualObject)::: hot spot compiled code verify virtual object:::v->new->VirtualObject.LayoutVerifier->verifyLayout
HotSpotCompiledNmethod#toString()::: hot spot compiled nmethod to string:::return->getClass->getSimpleName->method->format
HotSpotCompiledNmethod#getInstallationFailureMessage()::: hot spot compiled nmethod get installation failure message:::return
HotSpotCompressedNullConstant#getJavaKind()::: hot spot compressed null constant get java kind:::return
HotSpotCompressedNullConstant#isNull()::: hot spot compressed null constant is null:::return
HotSpotCompressedNullConstant#isCompressed()::: hot spot compressed null constant is compressed:::return
HotSpotCompressedNullConstant#compress()::: hot spot compressed null constant compress:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#uncompress()::: hot spot compressed null constant uncompress:::return
HotSpotCompressedNullConstant#isDefaultForKind()::: hot spot compressed null constant is default for kind:::return
HotSpotCompressedNullConstant#asBoxedPrimitive()::: hot spot compressed null constant as boxed primitive:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#asInt()::: hot spot compressed null constant as int:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#asBoolean()::: hot spot compressed null constant as boolean:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#asLong()::: hot spot compressed null constant as long:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#asFloat()::: hot spot compressed null constant as float:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#asDouble()::: hot spot compressed null constant as double:::throw->new->IllegalArgumentException
HotSpotCompressedNullConstant#toString()::: hot spot compressed null constant to string:::return->JavaConstant->toString
HotSpotCompressedNullConstant#toValueString()::: hot spot compressed null constant to value string:::return
HotSpotCompressedNullConstant#hashCode()::: hot spot compressed null constant hash code:::return->System->identityHashCode
HotSpotCompressedNullConstant#equals(Object)::: hot spot compressed null constant equals:::return
HotSpotConstant#isCompressed()::: hot spot constant is compressed:::
HotSpotConstant#compress()::: hot spot constant compress:::
HotSpotConstant#uncompress()::: hot spot constant uncompress:::
HotSpotConstantPool.Bytecodes#isInvoke(int)::: bytecodes is invoke:::switch->return->return
HotSpotConstantPool.Bytecodes#isInvokeHandleAlias(int):::See: Rewriter::maybe_rewrite_invokehandle.:::switch->return->return
HotSpotConstantPool.JvmConstant#toString()::: jvm constant to string:::return
HotSpotConstantPool.JvmConstants#add(JvmConstant)::: jvm constants add:::indexOf->return
HotSpotConstantPool.JvmConstants#indexOf(int)::: jvm constants index of:::if->return->else->return
HotSpotConstantPool.JvmConstants#get(int)::: jvm constants get:::res->indexOf->if->return->throw->new->JVMCIError
HotSpotConstantPool.JvmConstants#instance()::: jvm constants instance:::result->if->synchronized->if->new->JvmConstants->return
HotSpotConstantPool#fromMetaspace(long):::Gets the JVMCI mirror from a HotSpot constant pool.The VM is responsible for ensuring that the ConstantPool is kept alive for the duration of this call and the HotSpotJVMCIRuntime keeps it alive after that:::return->new->HotSpotConstantPool
HotSpotConstantPool#getHolder():::Gets the holder for this constant pool as HotSpotResolvedObjectTypeImpl.:::return->compilerToVM->config->getResolvedJavaType
HotSpotConstantPool#rawIndexToConstantPoolCacheIndex(int, int):::Converts a raw index from the bytecodes to a constant pool cache index by adding a HotSpotVMConfig#constantPoolCpCacheIndexTag constant.:::index->if->else->config->return
HotSpotConstantPool#decodeConstantPoolCacheIndex(int):::Decode a constant pool cache index to a constant pool index:::if->isInvokedynamicIndex->return->decodeInvokedynamicIndex->else->return->config
HotSpotConstantPool#isInvokedynamicIndex(int):::See ConstantPool::is_invokedynamic_index.:::return
HotSpotConstantPool#decodeInvokedynamicIndex(int):::See ConstantPool::decode_invokedynamic_index.:::return
HotSpotConstantPool#getMetaspaceConstantPool()::: hot spot constant pool get metaspace constant pool:::return->getMetaspacePointer
HotSpotConstantPool#getMetadataHandle()::: hot spot constant pool get metadata handle:::return
HotSpotConstantPool#getTagAt(int):::Gets the constant pool tag at index index.:::config->config->metaspaceConstantPoolTags->UNSAFE->getMetaspaceConstantPool->getAddress->tag->UNSAFE->getByteVolatile->if->return->return->constants->get
HotSpotConstantPool#getEntryAt(int):::Gets the constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getAddress
HotSpotConstantPool#getIntAt(int):::Gets the integer constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getInt
HotSpotConstantPool#getLongAt(int):::Gets the long constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getLong
HotSpotConstantPool#getFloatAt(int):::Gets the float constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getFloat
HotSpotConstantPool#getDoubleAt(int):::Gets the double constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getDouble
HotSpotConstantPool#getNameAndTypeAt(int):::Gets the JVM_CONSTANT_NameAndType constant pool entry at index index.:::offset->runtime->getHostJVMCIBackend->getTarget->return->UNSAFE->getMetaspaceConstantPool->config->getInt
HotSpotConstantPool#getNameAndTypeRefIndexAt(int):::Gets the JVM_CONSTANT_NameAndType reference index constant pool entry at index index.:::return->compilerToVM->lookupNameAndTypeRefIndexInPool
HotSpotConstantPool#getNameOf(int):::Gets the name of a JVM_CONSTANT_NameAndType constant pool entry referenced by another entry denoted by which.:::return->compilerToVM->lookupNameInPool
HotSpotConstantPool#getNameRefIndexAt(int):::Gets the name reference index of a JVM_CONSTANT_NameAndType constant pool entry at index index.:::refIndex->getNameAndTypeAt->return
HotSpotConstantPool#getSignatureOf(int):::Gets the signature of a JVM_CONSTANT_NameAndType constant pool entry referenced by another entry denoted by which.:::return->compilerToVM->lookupSignatureInPool
HotSpotConstantPool#getSignatureRefIndexAt(int):::Gets the signature reference index of a JVM_CONSTANT_NameAndType constant pool entry at index index.:::refIndex->getNameAndTypeAt->return
HotSpotConstantPool#getKlassRefIndexAt(int):::Gets the klass reference index constant pool entry at index index.:::return->compilerToVM->lookupKlassRefIndexInPool
HotSpotConstantPool#getUncachedKlassRefIndexAt(int):::Gets the uncached klass reference index constant pool entry at index index:::offset->runtime->getHostJVMCIBackend->getTarget->refIndex->UNSAFE->getMetaspaceConstantPool->config->getInt->return
HotSpotConstantPool#checkBounds(int):::Checks that the constant pool index index is in the bounds of the constant pool.:::return
HotSpotConstantPool#checkTag(int, JvmConstant):::Checks that the constant pool tag at index index is equal to tag.:::tagAt->getTagAt->return
HotSpotConstantPool#checkTagIsFieldOrMethod(int):::Asserts that the constant pool tag at index index is a JvmConstants#jvmFieldref, or a JvmConstants#jvmMethodref, or a JvmConstants#jvmInterfaceMethodref.:::tagAt->getTagAt->return
HotSpotConstantPool#length()::: hot spot constant pool length:::return->UNSAFE->getMetaspaceConstantPool->config->getInt
HotSpotConstantPool#hasDynamicConstant()::: hot spot constant pool has dynamic constant:::return->flags->config
HotSpotConstantPool#flags()::: hot spot constant pool flags:::return->UNSAFE->getMetaspaceConstantPool->config->getInt
HotSpotConstantPool#lookupConstant(int)::: hot spot constant pool lookup constant:::tag->getTagAt->switch->return->JavaConstant->getIntAt->forInt->return->JavaConstant->getLongAt->forLong->return->JavaConstant->getFloatAt->forFloat->return->JavaConstant->getDoubleAt->forDouble->opcode->return->lookupType->return->compilerToVM->resolvePossiblyCachedConstantInPool->return->compilerToVM->resolvePossiblyCachedConstantInPool->throw->new->JVMCIError
HotSpotConstantPool#lookupUtf8(int)::: hot spot constant pool lookup utf8:::return->compilerToVM->getEntryAt->getSymbol
HotSpotConstantPool#lookupSignature(int)::: hot spot constant pool lookup signature:::return->runtime->lookupUtf8->new->HotSpotSignature
HotSpotConstantPool#lookupAppendix(int, int)::: hot spot constant pool lookup appendix:::index->rawIndexToConstantPoolCacheIndex->return->compilerToVM->lookupAppendixInPool
HotSpotConstantPool#getJavaType(Object):::Gets a JavaType corresponding a given resolved or unresolved type.:::if->name->return->UnresolvedJavaType->create->else->return
HotSpotConstantPool#lookupMethod(int, int)::: hot spot constant pool lookup method:::index->rawIndexToConstantPoolCacheIndex->method->compilerToVM->lookupMethodInPool->if->return->else->name->getNameOf->signature->runtime->getSignatureOf->new->HotSpotSignature->if->holder->runtime->getMethodHandleClass->return->new->UnresolvedJavaMethod->else->klassIndex->getKlassRefIndexAt->type->compilerToVM->lookupKlassInPool->holder->getJavaType->return->new->UnresolvedJavaMethod
HotSpotConstantPool#lookupType(int, int)::: hot spot constant pool lookup type:::elem->if->return->else->type->compilerToVM->lookupKlassInPool->result->getJavaType->if->new->LookupTypeCacheElement->return
HotSpotConstantPool#lookupField(int, ResolvedJavaMethod, int)::: hot spot constant pool lookup field:::index->rawIndexToConstantPoolCacheIndex->nameAndTypeIndex->getNameAndTypeRefIndexAt->typeIndex->getSignatureRefIndexAt->typeName->lookupUtf8->type->runtime->getHolder->lookupType->holderIndex->getKlassRefIndexAt->holder->lookupType->if->info->new->intArr->resolvedHolder->try->compilerToVM->resolveFieldInPool->catch->return->getNameRefIndexAt->lookupUtf8->new->UnresolvedJavaField->finally->flags->offset->fieldIndex->result->resolvedHolder->createField->return->else->return->getNameRefIndexAt->lookupUtf8->new->UnresolvedJavaField
HotSpotConstantPool#rawIndexToConstantPoolIndex(int, int):::Converts a raw index from the bytecodes to a constant pool index (not a cache index).:::index->if->isInvokedynamicIndex->decodeInvokedynamicIndex->config->else->rawIndexToConstantPoolCacheIndex->return->compilerToVM->constantPoolRemapInstructionOperandFromCache
HotSpotConstantPool#loadReferencedType(int, int)::: hot spot constant pool load referenced type:::loadReferencedType
HotSpotConstantPool#loadReferencedType(int, int, boolean)::: hot spot constant pool load referenced type:::index->switch->break->decodeConstantPoolCacheIndex->config->compilerToVM->constantPoolRemapInstructionOperandFromCache->break->rawIndexToConstantPoolCacheIndex->compilerToVM->constantPoolRemapInstructionOperandFromCache->break->throw->JVMCIError->shouldNotReachHere->tag->getTagAt->if->return->switch->getUncachedKlassRefIndexAt->klassTag->getTagAt->type->compilerToVM->resolveTypeInPool->if->type->isPrimitive->type->isArray->type->ensureInitialized->if->if->Bytecodes->isInvokeHandleAlias->isSignaturePolymorphicHolder->methodRefCacheIndex->rawIndexToConstantPoolCacheIndex->compilerToVM->resolveInvokeHandleInPool->break->if->isInvokedynamicIndex->compilerToVM->resolveInvokeDynamicInPool->break->break
HotSpotConstantPool#isSignaturePolymorphicHolder(ResolvedJavaType):::Determines if type contains signature polymorphic methods.:::name->type->getName->if->compilerToVM->getSignaturePolymorphicHolders->foreach->if->name->equals->return->return
HotSpotConstantPool#isResolvedDynamicInvoke(int, int):::Check for a resolved dynamic adapter method at the specified index, resulting from either a resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method (HotSpot invokehandle).:::if->Bytecodes->isInvokeHandleAlias->methodRefCacheIndex->rawIndexToConstantPoolCacheIndex->op->compilerToVM->isResolvedInvokeHandleInPool->return->return
HotSpotConstantPool#toString()::: hot spot constant pool to string:::holder->getHolder->return->holder->toJavaName
HotSpotConstantPoolObject#forObject(HotSpotResolvedObjectType, int, JavaConstant)::: hot spot constant pool object for object:::return->new->HotSpotConstantPoolObject
HotSpotConstantPoolObject#getCpType()::: hot spot constant pool object get cp type:::return
HotSpotConstantPoolObject#getCpi()::: hot spot constant pool object get cpi:::return
HotSpotConstantPoolObject#equals(Object)::: hot spot constant pool object equals:::if->other->return->type->equals->constant->equals->return
HotSpotConstantPoolObject#hashCode()::: hot spot constant pool object hash code:::return->constant->hashCode->type->hashCode
HotSpotConstantPoolObject#getJavaKind()::: hot spot constant pool object get java kind:::return->constant->getJavaKind
HotSpotConstantPoolObject#isNull()::: hot spot constant pool object is null:::return->constant->isNull
HotSpotConstantPoolObject#isDefaultForKind()::: hot spot constant pool object is default for kind:::return->constant->isDefaultForKind
HotSpotConstantPoolObject#asBoxedPrimitive()::: hot spot constant pool object as boxed primitive:::return->constant->asBoxedPrimitive
HotSpotConstantPoolObject#asInt()::: hot spot constant pool object as int:::return->constant->asInt
HotSpotConstantPoolObject#asBoolean()::: hot spot constant pool object as boolean:::return->constant->asBoolean
HotSpotConstantPoolObject#asLong()::: hot spot constant pool object as long:::return->constant->asLong
HotSpotConstantPoolObject#asFloat()::: hot spot constant pool object as float:::return->constant->asFloat
HotSpotConstantPoolObject#asDouble()::: hot spot constant pool object as double:::return
HotSpotConstantPoolObject#toValueString()::: hot spot constant pool object to value string:::return->getCpType->getName->getCpi
HotSpotConstantPoolObject#toString()::: hot spot constant pool object to string:::return->super->toString->toValueString
HotSpotConstantReflectionProvider#getMethodHandleAccess()::: hot spot constant reflection provider get method handle access:::return
HotSpotConstantReflectionProvider#getMemoryAccessProvider()::: hot spot constant reflection provider get memory access provider:::return
HotSpotConstantReflectionProvider#constantEquals(Constant, Constant)::: hot spot constant reflection provider constant equals:::if->return->else->if->return->x->equals->else->return->Objects->equals
HotSpotConstantReflectionProvider#readArrayLength(JavaConstant)::: hot spot constant reflection provider read array length:::if->array->getJavaKind->array->isNull->return->arrayObject->return->runtime->getReflection->getLength
HotSpotConstantReflectionProvider#readArrayElement(JavaConstant, int)::: hot spot constant reflection provider read array element:::if->array->getJavaKind->array->isNull->return->arrayObject->return->runtime->getReflection->readArrayElement
HotSpotConstantReflectionProvider#isBoxCached(JavaConstant):::Check if the constant is a boxed value that is guaranteed to be cached by the platform:::switch->source->getJavaKind->return->return->source->asInt->return->source->asInt->source->asInt->return->source->asLong->source->asLong->return->throw->source->getJavaKind->new->IllegalArgumentException
HotSpotConstantReflectionProvider#boxPrimitive(JavaConstant)::: hot spot constant reflection provider box primitive:::if->source->getJavaKind->isPrimitive->isBoxCached->return->return->runtime->getReflection->boxPrimitive
HotSpotConstantReflectionProvider#unboxPrimitive(JavaConstant)::: hot spot constant reflection provider unbox primitive:::if->source->getJavaKind->isObject->return->if->source->isNull->return->return->runtime->getReflection->unboxPrimitive
HotSpotConstantReflectionProvider#forString(String)::: hot spot constant reflection provider for string:::return->runtime->getReflection->forObject
HotSpotConstantReflectionProvider#forObject(Object)::: hot spot constant reflection provider for object:::return->runtime->getReflection->forObject
HotSpotConstantReflectionProvider#asJavaType(Constant)::: hot spot constant reflection provider as java type:::if->return->asJavaType->if->obj->HotSpotMetaspaceConstantImpl->getMetaspaceObject->if->return->return
HotSpotConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant)::: hot spot constant reflection provider read field value:::hotspotField->if->hotspotField->isStatic->holder->hotspotField->getDeclaringClass->if->holder->isInitialized->return->holder->field->isVolatile->readFieldValue->else->if->receiver->isNonNull->object->if->hotspotField->isInObject->return->object->field->isVolatile->readFieldValue->return
HotSpotConstantReflectionProvider#asJavaClass(ResolvedJavaType)::: hot spot constant reflection provider as java class:::return->getJavaMirror
HotSpotConstantReflectionProvider#asObjectHub(ResolvedJavaType)::: hot spot constant reflection provider as object hub:::if->return->klass->else->throw->JVMCIError->unimplemented
HotSpotInstalledCode#getSize():::Gets the value of CodeBlob::size().:::return
HotSpotInstalledCode#toString()::: hot spot installed code to string:::
HotSpotInstalledCode#getStart():::Gets the value of CodeBlob::code_begin() if #isValid() valid, 0 otherwise.:::return
HotSpotInstalledCode#getCodeSize():::Gets the value of CodeBlob::code_size() if #isValid() valid, 0 otherwise.:::return
HotSpotInstalledCode#getCode()::: hot spot installed code get code:::return->compilerToVM->getCode
HotSpotJavaType#getName()::: hot spot java type get name:::return
HotSpotJDKReflection#resolveObject(HotSpotObjectConstantImpl)::: hot spot reflection resolve object:::if->return->return
HotSpotJDKReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)::: hot spot reflection is instance:::javaMirror->getMirror->value->resolveObject->return->javaMirror->isInstance
HotSpotJDKReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)::: hot spot reflection is assignable from:::javaMirror->getMirror->return->javaMirror->getMirror->isAssignableFrom
HotSpotJDKReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get annotations:::javaMirror->getMirror->return->javaMirror->getAnnotations
HotSpotJDKReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get declared annotations:::javaMirror->getMirror->return->javaMirror->getDeclaredAnnotations
HotSpotJDKReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)::: hot spot reflection get annotation:::javaMirror->getMirror->return->javaMirror->getAnnotation
HotSpotJDKReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection is local class:::javaMirror->getMirror->return->javaMirror->isLocalClass
HotSpotJDKReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection is member class:::javaMirror->getMirror->return->javaMirror->isMemberClass
HotSpotJDKReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get enclosing class:::javaMirror->getMirror->return->runtime->javaMirror->getEnclosingClass->fromClass
HotSpotJDKReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)::: hot spot reflection read field value:::javaMirror->getMirror->return->readFieldValue
HotSpotJDKReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)::: hot spot reflection read field value:::value->resolveObject->return->readFieldValue
HotSpotJDKReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)::: hot spot reflection equals:::return->resolveObject->resolveObject->a->isCompressed->b->isCompressed
HotSpotJDKReflection#getJavaMirror(HotSpotResolvedPrimitiveType)::: hot spot reflection get java mirror:::return
HotSpotJDKReflection#getParameters(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get parameters:::javaParameters->getMethod->getParameters->res->new->ResolvedJavaMethod.ParameterArr->for->i->return
HotSpotJDKReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get parameter annotations:::return->getMethod->getParameterAnnotations
HotSpotJDKReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get generic parameter types:::return->getMethod->getGenericParameterTypes
HotSpotJDKReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)::: hot spot reflection get field annotations:::return->getField->getAnnotations
HotSpotJDKReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get method annotations:::return->getMethod->getAnnotations
HotSpotJDKReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get method declared annotations:::return->getMethod->getDeclaredAnnotations
HotSpotJDKReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)::: hot spot reflection get field declared annotations:::return->getField->getDeclaredAnnotations
HotSpotJDKReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)::: hot spot reflection get method annotation:::return->getMethod->getAnnotation
HotSpotJDKReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)::: hot spot reflection get field annotation:::return->getField->getAnnotation
HotSpotJDKReflection#getType(HotSpotObjectConstantImpl)::: hot spot reflection get type:::value->resolveObject->theClass->value->getClass->return->runtime->fromClass
HotSpotJDKReflection#asString(HotSpotObjectConstantImpl)::: hot spot reflection as string:::value->resolveObject->if->return->return
HotSpotJDKReflection#asJavaType(HotSpotObjectConstantImpl)::: hot spot reflection as java type:::value->resolveObject->if->javaClass->return->runtime->fromClass->if->return->return
HotSpotJDKReflection#asObject(HotSpotObjectConstantImpl, Class)::: hot spot reflection as object:::value->resolveObject->if->type->isInstance->return->return
HotSpotJDKReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)::: hot spot reflection as object:::value->resolveObject->if->getMirror->isInstance->return->return
HotSpotJDKReflection#formatString(HotSpotObjectConstantImpl)::: hot spot reflection format string:::return->resolveObject->format
HotSpotJDKReflection#getLength(HotSpotObjectConstantImpl)::: hot spot reflection get length:::object->resolveObject->if->object->getClass->isArray->return->Array->getLength->return
HotSpotJDKReflection#readArrayElement(HotSpotObjectConstantImpl, int)::: hot spot reflection read array element:::a->resolveObject->if->a->getClass->isArray->Array->getLength->return->if->element->return->forObject->else->if->return->JavaConstant->forInt->else->if->return->JavaConstant->forChar->else->if->return->JavaConstant->forByte->else->if->return->JavaConstant->forLong->else->if->return->JavaConstant->forShort->else->if->return->JavaConstant->forFloat->else->if->return->JavaConstant->forDouble->else->if->return->JavaConstant->forBoolean->else->throw->new->JVMCIError
HotSpotJDKReflection#unboxPrimitive(HotSpotObjectConstantImpl)::: hot spot reflection unbox primitive:::return->JavaConstant->resolveObject->forBoxedPrimitive
HotSpotJDKReflection#forObject(Object)::: hot spot reflection for object:::if->return->return->forNonNullObject
HotSpotJDKReflection#forNonNullObject(Object)::: hot spot reflection for non null object:::return->DirectHotSpotObjectConstantImpl->forNonNullObject
HotSpotJDKReflection#boxPrimitive(JavaConstant)::: hot spot reflection box primitive:::return->source->asBoxedPrimitive->forNonNullObject
HotSpotJDKReflection#getInt(HotSpotObjectConstantImpl, long)::: hot spot reflection get int:::return->UNSAFE->resolveObject->getInt
HotSpotJDKReflection#getByte(HotSpotObjectConstantImpl, long)::: hot spot reflection get byte:::return->UNSAFE->resolveObject->getByte
HotSpotJDKReflection#getShort(HotSpotObjectConstantImpl, long)::: hot spot reflection get short:::return->UNSAFE->resolveObject->getShort
HotSpotJDKReflection#getLong(HotSpotObjectConstantImpl, long)::: hot spot reflection get long:::return->UNSAFE->resolveObject->getLong
HotSpotJDKReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)::: hot spot reflection check read:::resolveObject->checkRead
HotSpotJDKReflection#computeOopSizeOffset(HotSpotJVMCIRuntime)::: hot spot reflection compute oop size offset:::metaAccess->runtime->getHostJVMCIBackend->getMetaAccess->staticType->metaAccess->lookupJavaType->foreach->staticType->getInstanceFields->if->f->getName->equals->offset->f->getOffset->return->throw->new->JVMCIError
HotSpotJDKReflection#oopSizeOffset()::: hot spot reflection oop size offset:::if->runtime->computeOopSizeOffset->return
HotSpotJDKReflection#checkRead(JavaKind, long, HotSpotResolvedObjectType, Object)::: hot spot reflection check read:::if->type->isArray->componentType->type->getComponentType->componentKind->componentType->getJavaKind->headerSize->runtime->getArrayBaseOffset->sizeOfElement->runtime->getArrayIndexScale->length->Array->getLength->arrayEnd->aligned->if->index->throw->type->toJavaName->new->IllegalArgumentException->else->if->size->if->wordSize->runtime->getHostJVMCIBackend->getCodeCache->getTarget->UNSAFE->oopSizeOffset->getInt->else->Math->type->instanceSize->abs->bytesToRead->kind->getByteCount->if->throw->type->toJavaName->new->IllegalArgumentException->else->field->if->hotSpotResolvedJavaType->runtime->fromClass->if->staticFieldsHolder->staticFieldsHolder->findStaticFieldWithOffset->if->type->findInstanceFieldWithOffset->if->throw->type->toJavaName->new->IllegalArgumentException->if->field->getJavaKind->throw->field->format->type->toJavaName->new->IllegalArgumentException->return
HotSpotJDKReflection#readFieldValue(HotSpotResolvedJavaField, Object, boolean)::: hot spot reflection read field value:::displacement->field->getOffset->kind->field->getJavaKind->switch->return->JavaConstant->UNSAFE->getBooleanVolatile->UNSAFE->getBoolean->forBoolean->return->JavaConstant->UNSAFE->getByteVolatile->UNSAFE->getByte->forByte->return->JavaConstant->UNSAFE->getCharVolatile->UNSAFE->getChar->forChar->return->JavaConstant->UNSAFE->getShortVolatile->UNSAFE->getShort->forShort->return->JavaConstant->UNSAFE->getIntVolatile->UNSAFE->getInt->forInt->return->JavaConstant->UNSAFE->getLongVolatile->UNSAFE->getLong->forLong->return->JavaConstant->UNSAFE->getFloatVolatile->UNSAFE->getFloat->forFloat->return->JavaConstant->UNSAFE->getDoubleVolatile->UNSAFE->getDouble->forDouble->return->UNSAFE->getObjectVolatile->UNSAFE->getObject->forObject->throw->new->IllegalArgumentException
HotSpotJDKReflection#getMethod(HotSpotResolvedJavaMethodImpl):::Gets a Method object corresponding to method:::if->synchronized->if->compilerToVM->asReflectionExecutable->return
HotSpotJDKReflection#getField(HotSpotResolvedJavaFieldImpl):::Gets a Field object corresponding to field:::declaringClass->field->getDeclaringClass->synchronized->cache->if->new->HashMap<>->reflect->cache->get->if->compilerToVM->field->getDeclaringClass->field->getIndex->asReflectionField->cache->put->return
HotSpotJDKReflection#getMirror(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get mirror:::return->holder->getJavaMirror->resolveObject
HotSpotJDKReflection#getMirror(HotSpotResolvedJavaType)::: hot spot reflection get mirror:::if->return->resolveObject->else->return->getMirror
HotSpotJVMCIBackendFactory#createJVMCIBackend(HotSpotJVMCIRuntime, JVMCIBackend)::: hot spot backend factory create backend:::
HotSpotJVMCIBackendFactory#getArchitecture():::Gets the CPU architecture of this backend.:::
HotSpotJVMCICompilerConfig.DummyCompilerFactory#compileMethod(CompilationRequest)::: dummy compiler factory compile method:::throw->new->JVMCIError
HotSpotJVMCICompilerConfig.DummyCompilerFactory#getCompilerName()::: dummy compiler factory get compiler name:::return
HotSpotJVMCICompilerConfig.DummyCompilerFactory#createCompiler(JVMCIRuntime)::: dummy compiler factory create compiler:::return
HotSpotJVMCICompilerConfig#getCompilerFactory():::Gets the selected system compiler factory.:::if->factory->compilerName->getString->if->if->compilerName->isEmpty->new->DummyCompilerFactory->else->if->compilerName->equals->new->DummyCompilerFactory->else->foreach->getJVMCICompilerFactories->if->f->getCompilerName->equals->if->throw->new->JVMCIError->else->reason->foreach->getJVMCICompilerFactories->if->f->getClass->getModule->openJVMCITo->else->factory->getCompilerName->f->getCompilerName->break->if->new->DummyCompilerFactory->factory->onSelection->return
HotSpotJVMCICompilerConfig#openJVMCITo(Module):::Opens all JVMCI packages to otherModule.:::if->jvmci->getModule->if->packages->jvmci->getPackages->foreach->opened->jvmci->isOpen->if->jvmci->addOpens
HotSpotJVMCICompilerConfig#getJVMCICompilerFactories()::: hot spot compiler config get compiler factories:::return->JVMCIServiceLocator->getProviders
HotSpotJVMCICompilerFactory#getCompilationLevelAdjustment():::Determines if this object may want to adjust the compilation level for a method that is being scheduled by the VM for compilation.:::return
HotSpotJVMCICompilerFactory#adjustCompilationLevel(Object, String, String, boolean, CompilationLevel):::Potentially modifies the compilation level currently selected by the VM compilation policy for a method.:::throw->getClass->getName->getName->new->InternalError
HotSpotJVMCIReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)::: hot spot reflection is instance:::
HotSpotJVMCIReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)::: hot spot reflection is assignable from:::
HotSpotJVMCIReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get annotations:::
HotSpotJVMCIReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get declared annotations:::
HotSpotJVMCIReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)::: hot spot reflection get annotation:::
HotSpotJVMCIReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection is local class:::
HotSpotJVMCIReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection is member class:::
HotSpotJVMCIReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)::: hot spot reflection get enclosing class:::
HotSpotJVMCIReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)::: hot spot reflection read field value:::
HotSpotJVMCIReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)::: hot spot reflection read field value:::
HotSpotJVMCIReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)::: hot spot reflection equals:::
HotSpotJVMCIReflection#getJavaMirror(HotSpotResolvedPrimitiveType)::: hot spot reflection get java mirror:::
HotSpotJVMCIReflection#getParameters(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get parameters:::
HotSpotJVMCIReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get parameter annotations:::
HotSpotJVMCIReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get generic parameter types:::
HotSpotJVMCIReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)::: hot spot reflection get field annotations:::
HotSpotJVMCIReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get method annotations:::
HotSpotJVMCIReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)::: hot spot reflection get method declared annotations:::
HotSpotJVMCIReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)::: hot spot reflection get field declared annotations:::
HotSpotJVMCIReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)::: hot spot reflection get method annotation:::
HotSpotJVMCIReflection#getType(HotSpotObjectConstantImpl)::: hot spot reflection get type:::
HotSpotJVMCIReflection#asString(HotSpotObjectConstantImpl)::: hot spot reflection as string:::
HotSpotJVMCIReflection#asJavaType(HotSpotObjectConstantImpl):::Given a java.lang.Class instance, return the corresponding ResolvedJavaType.:::
HotSpotJVMCIReflection#asObject(HotSpotObjectConstantImpl, Class)::: hot spot reflection as object:::
HotSpotJVMCIReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)::: hot spot reflection as object:::
HotSpotJVMCIReflection#formatString(HotSpotObjectConstantImpl)::: hot spot reflection format string:::
HotSpotJVMCIReflection#getLength(HotSpotObjectConstantImpl)::: hot spot reflection get length:::
HotSpotJVMCIReflection#readArrayElement(HotSpotObjectConstantImpl, int)::: hot spot reflection read array element:::
HotSpotJVMCIReflection#unboxPrimitive(HotSpotObjectConstantImpl)::: hot spot reflection unbox primitive:::
HotSpotJVMCIReflection#forObject(Object)::: hot spot reflection for object:::
HotSpotJVMCIReflection#boxPrimitive(JavaConstant)::: hot spot reflection box primitive:::
HotSpotJVMCIReflection#getInt(HotSpotObjectConstantImpl, long)::: hot spot reflection get int:::
HotSpotJVMCIReflection#getByte(HotSpotObjectConstantImpl, long)::: hot spot reflection get byte:::
HotSpotJVMCIReflection#getShort(HotSpotObjectConstantImpl, long)::: hot spot reflection get short:::
HotSpotJVMCIReflection#getLong(HotSpotObjectConstantImpl, long)::: hot spot reflection get long:::
HotSpotJVMCIReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)::: hot spot reflection check read:::
HotSpotJVMCIReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)::: hot spot reflection get field annotation:::
HotSpotJVMCIReflection#resolveObject(HotSpotObjectConstantImpl):::Resolves objectHandle to a raw object if possible.:::
HotSpotJVMCIRuntime#getJavaLangObject()::: hot spot runtime get java lang object:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangString()::: hot spot runtime get java lang string:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangClass()::: hot spot runtime get java lang class:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangCloneable()::: hot spot runtime get java lang cloneable:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangSerializable()::: hot spot runtime get java lang serializable:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangThrowable()::: hot spot runtime get java lang throwable:::if->fromClass->return
HotSpotJVMCIRuntime#getJavaLangEnum()::: hot spot runtime get java lang enum:::if->fromClass->return
HotSpotJVMCIRuntime#getConstantCallSite()::: hot spot runtime get constant call site:::if->fromClass->return
HotSpotJVMCIRuntime#getCallSite()::: hot spot runtime get call site:::if->fromClass->return
HotSpotJVMCIRuntime#getMethodHandleClass()::: hot spot runtime get method handle class:::if->fromClass->return
HotSpotJVMCIRuntime#runtime():::Gets the singleton HotSpotJVMCIRuntime object.:::result->if->synchronized->if->try->t->timer->new->HotSpotJVMCIRuntime->if->getFlag->result->getCompiler->catch->finally->JVMCI->getRuntime->Boolean->valueOf->Byte->valueOf->Short->valueOf->Character->valueOf->Integer->valueOf->Long->valueOf->return
HotSpotJVMCIRuntime#decodeThrowable(String)::: hot spot runtime decode throwable:::return->TranslatedException->decodeThrowable
HotSpotJVMCIRuntime#encodeThrowable(Throwable)::: hot spot runtime encode throwable:::return->TranslatedException->encodeThrowable
HotSpotJVMCIRuntime#callToString(Object)::: hot spot runtime call to string:::return->o->toString
HotSpotJVMCIRuntime#findFactory(String)::: hot spot runtime find factory:::factories->getHotSpotJVMCIBackendFactories->foreach->if->factory->getArchitecture->equalsIgnoreCase->return->throw->new->JVMCIError
HotSpotJVMCIRuntime#getHotSpotJVMCIBackendFactories()::: hot spot runtime get hot spot backend factories:::if->return->result->ServiceLoader->ClassLoader->getSystemClassLoader->load->if->new->ArrayList<>->foreach->cachedHotSpotJVMCIBackendFactories->add->return
HotSpotJVMCIRuntime#getHostWordKind():::Gets the kind of a word value on the #getHostJVMCIBackend() host backend.:::return->runtime->getHostJVMCIBackend->getCodeCache->getTarget
HotSpotJVMCIRuntime.WeakReferenceHolder#set(T)::: weak reference holder set:::new->WeakReference<>
HotSpotJVMCIRuntime.WeakReferenceHolder#get()::: weak reference holder get:::return->ref->get
HotSpotJVMCIRuntime#getVmEventListeners()::: hot spot runtime get vm event listeners:::if->synchronized->if->JVMCIServiceLocator->getProviders->return
HotSpotJVMCIRuntime#createClass(Class)::: hot spot runtime create class:::if->javaClass->isPrimitive->return->HotSpotResolvedPrimitiveType->JavaKind->fromJavaClass->forKind->if->try->return->compilerToVm->javaClass->getName->replace->lookupType->catch->throw->new->JVMCIError->finally->return->compilerToVm->lookupClass
HotSpotJVMCIRuntime#fromClass0(Class)::: hot spot runtime from class0:::if->synchronized->if->new->ClassValue<>->ref->resolvedJavaType->get->javaType->ref->get->if->createClass->ref->set->return
HotSpotJVMCIRuntime#fromClass(Class):::Gets the JVMCI mirror for a Class object.:::if->return->return->fromClass0
HotSpotJVMCIRuntime#fromMetaspace(long, String)::: hot spot runtime from metaspace:::if->new->HashMap<>->klassReference->resolvedJavaTypes->get->javaType->if->klassReference->get->if->new->HotSpotResolvedObjectTypeImpl->resolvedJavaTypes->new->WeakReference<>->put->return
HotSpotJVMCIRuntime#registerBackend(JVMCIBackend)::: hot spot runtime register backend:::arch->backend->getCodeCache->getTarget->getClass->oldValue->backends->put->return
HotSpotJVMCIRuntime#getConfigStore()::: hot spot runtime get config store:::return
HotSpotJVMCIRuntime#getConfig()::: hot spot runtime get config:::return
HotSpotJVMCIRuntime#getCompilerToVM()::: hot spot runtime get compiler to m:::return
HotSpotJVMCIRuntime#getReflection()::: hot spot runtime get reflection:::return
HotSpotJVMCIRuntime#getIntrinsificationTrustPredicate(Class...):::Gets a predicate that determines if a given type can be considered trusted for the purpose of intrinsifying methods it declares.:::return->new->Predicate<>
HotSpotJVMCIRuntime#getMirror(ResolvedJavaType):::Get the Class corresponding to type.:::if->return->getMirror->return
HotSpotJVMCIRuntime#getCompiler()::: hot spot runtime get compiler:::if->synchronized->if->compilerFactory->createCompiler->return
HotSpotJVMCIRuntime#lookupType(String, HotSpotResolvedObjectType, boolean):::Converts a name to a Java type:::Objects->requireNonNull->return->lookupTypeInternal
HotSpotJVMCIRuntime#lookupTypeInternal(String, HotSpotResolvedObjectType, boolean)::: hot spot runtime lookup type internal:::if->name->length->kind->JavaKind->name->charAt->fromPrimitiveOrVoidTypeChar->return->HotSpotResolvedPrimitiveType->forKind->hsAccessingType->try->klass->compilerToVm->lookupType->if->return->UnresolvedJavaType->create->return->catch->throw->new->NoClassDefFoundError->initCause->finally
HotSpotJVMCIRuntime#getHostJVMCIBackend()::: hot spot runtime get host backend:::return
HotSpotJVMCIRuntime#getJVMCIBackend(Class)::: hot spot runtime get backend:::return->backends->get
HotSpotJVMCIRuntime#getJVMCIBackends()::: hot spot runtime get backends:::return->Collections->unmodifiableMap
HotSpotJVMCIRuntime#compileMethod(HotSpotResolvedJavaMethod, int, long, int)::: hot spot runtime compile method:::request->new->HotSpotCompilationRequest->result->getCompiler->compileMethod->hsResult->if->else->failure->result->getFailure->if->retry->HotSpotCompilationRequestResult->failure->toString->failure->else->inlinedBytecodes->HotSpotCompilationRequestResult->success->return
HotSpotJVMCIRuntime#shutdown():::Shuts down the runtime.:::Cleaner->clean->foreach->getVmEventListeners->vmEventListener->notifyShutdown
HotSpotJVMCIRuntime#bootstrapFinished():::Notify on completion of a bootstrap.:::foreach->getVmEventListeners->vmEventListener->notifyBootstrapFinished
HotSpotJVMCIRuntime#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notify on successful install into the CodeCache.:::foreach->getVmEventListeners->vmEventListener->notifyInstall
HotSpotJVMCIRuntime#writeDebugOutput(byte[], int, int, boolean, boolean):::Writes length bytes from bytes starting at offset offset to HotSpot's log stream.:::return->compilerToVm->writeDebugOutput
HotSpotJVMCIRuntime#getLogStream():::Gets an output stream that writes to HotSpot's tty stream.:::return->new->OutputStream
HotSpotJVMCIRuntime#collectCounters():::Collects the current values of all JVMCI benchmark counters, summed up over all threads.:::return->compilerToVm->collectCounters
HotSpotJVMCIRuntime#getCountersSize()::: hot spot runtime get counters size:::return->compilerToVm->getCountersSize
HotSpotJVMCIRuntime#setCountersSize(int):::Attempt to enlarge the number of per thread counters available:::return->compilerToVm->setCountersSize
HotSpotJVMCIRuntime#getArrayBaseOffset(JavaKind):::The offset from the origin of an array to the first element.:::switch->return->return->return->return->return->return->return->return->return->throw->new->JVMCIError
HotSpotJVMCIRuntime#getArrayIndexScale(JavaKind):::The scale used for the index when accessing elements of an array of this kind.:::switch->return->return->return->return->return->return->return->return->return->throw->new->JVMCIError
HotSpotJVMCIRuntime#registerNativeMethods(Class):::Links each native method in clazz to an implementation in the JVMCI shared library:::return->compilerToVm->registerNativeMethods
HotSpotJVMCIRuntime#translate(Object):::Creates or retrieves an object in the peer runtime that mirrors obj:::return->compilerToVm->translate
HotSpotJVMCIRuntime#unhand(Class, long):::Dereferences and returns the object referred to by the JNI global reference handle:::return->type->compilerToVm->unhand->cast
HotSpotJVMCIRuntime#isCurrentThreadAttached():::Determines if the current thread is attached to the peer runtime.:::return->compilerToVm->isCurrentThreadAttached
HotSpotJVMCIRuntime#getCurrentJavaThread():::Gets the address of the HotSpot JavaThread C++ object for the current thread:::return->compilerToVm->getCurrentJavaThread
HotSpotJVMCIRuntime#attachCurrentThread(boolean):::Ensures the current thread is attached to the peer runtime.:::return->compilerToVm->attachCurrentThread
HotSpotJVMCIRuntime#detachCurrentThread():::Detaches the current thread from the peer runtime.:::compilerToVm->detachCurrentThread
HotSpotJVMCIRuntime#excludeFromJVMCICompilation(Module...):::Informs HotSpot that no method whose module is in modules is to be compiled with #compileMethod.:::modules->clone
HotSpotJVMCIRuntime#exitHotSpot(int):::Calls System#exit(int) in HotSpot's runtime.:::if->System->exit->compilerToVm->callSystemExit
HotSpotMemoryAccessProvider#readNarrowOopConstant(Constant, long)::: hot spot memory access provider read narrow oop constant:::
HotSpotMemoryAccessProvider#readKlassPointerConstant(Constant, long)::: hot spot memory access provider read klass pointer constant:::
HotSpotMemoryAccessProvider#readNarrowKlassPointerConstant(Constant, long)::: hot spot memory access provider read narrow klass pointer constant:::
HotSpotMemoryAccessProvider#readMethodPointerConstant(Constant, long)::: hot spot memory access provider read method pointer constant:::
HotSpotMemoryAccessProviderImpl#asObject(Constant, JavaKind, long):::Gets the object boxed by base that is about to have a value of kind kind read from it at the offset displacement.:::if->constant->type->constant->getType->runtime->checkRead->return->return
HotSpotMemoryAccessProviderImpl#isValidObjectFieldDisplacement(Constant, long)::: hot spot memory access provider impl is valid object field displacement:::if->metaspaceObject->HotSpotMetaspaceConstantImpl->getMetaspaceObject->if->if->runtime->getConfig->return->else->throw->String->valueOf->new->IllegalArgumentException->return
HotSpotMemoryAccessProviderImpl#asRawPointer(Constant)::: hot spot memory access provider impl as raw pointer:::if->meta->HotSpotMetaspaceConstantImpl->getMetaspaceObject->return->meta->getMetaspacePointer->else->if->prim->if->prim->getJavaKind->isNumericInteger->return->prim->asLong->throw->String->valueOf->new->IllegalArgumentException
HotSpotMemoryAccessProviderImpl#readRawValue(Constant, long, JavaKind, int)::: hot spot memory access provider impl read raw value:::base->asObject->if->switch->return->runtime->getByte->return->runtime->getShort->return->runtime->getInt->return->runtime->getLong->throw->String->valueOf->new->IllegalArgumentException->else->pointer->asRawPointer->switch->return->UNSAFE->getByte->return->UNSAFE->getShort->return->UNSAFE->getInt->return->UNSAFE->getLong->throw->String->valueOf->new->IllegalArgumentException
HotSpotMemoryAccessProviderImpl#verifyReadRawObject(JavaConstant, Constant, long)::: hot spot memory access provider impl verify read raw object:::if->metaspaceObject->HotSpotMetaspaceConstantImpl->getMetaspaceObject->if->if->runtime->getConfig->type->return
HotSpotMemoryAccessProviderImpl#readRawObject(Constant, long, boolean)::: hot spot memory access provider impl read raw object:::displacement->ret->base->asObject->if->asRawPointer->runtime->getCompilerToVM->readUncompressedOop->else->runtime->getCompilerToVM->getObject->return
HotSpotMemoryAccessProviderImpl#readPrimitiveConstant(JavaKind, Constant, long, int)::: hot spot memory access provider impl read primitive constant:::try->rawValue->readRawValue->switch->return->JavaConstant->forBoolean->return->JavaConstant->forByte->return->JavaConstant->forChar->return->JavaConstant->forShort->return->JavaConstant->forInt->return->JavaConstant->forLong->return->JavaConstant->Float->intBitsToFloat->forFloat->return->JavaConstant->Double->longBitsToDouble->forDouble->throw->new->IllegalArgumentException->catch->return->finally
HotSpotMemoryAccessProviderImpl#readObjectConstant(Constant, long)::: hot spot memory access provider impl read object constant:::if->return->runtime->getConfig->readRawObject->if->isValidObjectFieldDisplacement->return->if->runtime->getConfig->metaspaceObject->HotSpotMetaspaceConstantImpl->getMetaspaceObject->return->getJavaMirror->return->readRawObject
HotSpotMemoryAccessProviderImpl#readNarrowOopConstant(Constant, long)::: hot spot memory access provider impl read narrow oop constant:::res->readRawObject->return->equals->compress
HotSpotMemoryAccessProviderImpl#readKlass(Constant, long, boolean)::: hot spot memory access provider impl read klass:::if->return->runtime->getCompilerToVM->asResolvedJavaType->getResolvedJavaType->else->return->runtime->getCompilerToVM->getResolvedJavaType
HotSpotMemoryAccessProviderImpl#readKlassPointerConstant(Constant, long)::: hot spot memory access provider impl read klass pointer constant:::klass->readKlass->if->return->return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotMemoryAccessProviderImpl#readNarrowKlassPointerConstant(Constant, long)::: hot spot memory access provider impl read narrow klass pointer constant:::klass->readKlass->if->return->return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotMemoryAccessProviderImpl#readMethodPointerConstant(Constant, long)::: hot spot memory access provider impl read method pointer constant:::method->runtime->getCompilerToVM->getResolvedJavaMethod->return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotMetaAccessProvider#lookupJavaType(Class)::: hot spot meta access provider lookup java type:::if->throw->new->IllegalArgumentException->return->runtime->fromClass
HotSpotMetaAccessProvider#lookupJavaType(JavaConstant)::: hot spot meta access provider lookup java type:::if->constant->isNull->return->return->getType
HotSpotMetaAccessProvider#parseMethodDescriptor(String)::: hot spot meta access provider parse method descriptor:::return->new->HotSpotSignature
HotSpotMetaAccessProvider#lookupJavaMethod(Executable)::: hot spot meta access provider lookup java method:::return->runtime->getCompilerToVM->Objects->requireNonNull->asResolvedJavaMethod
HotSpotMetaAccessProvider#lookupJavaField(Field)::: hot spot meta access provider lookup java field:::fieldHolder->reflectionField->getDeclaringClass->holder->runtime->fromClass->fields->if->Modifier->reflectionField->getModifiers->isStatic->holder->getStaticFields->else->holder->getInstanceFields->fieldType->reflectionField->getType->lookupJavaType->foreach->if->reflectionField->getName->field->getName->equals->field->getType->equals->return->throw->new->JVMCIError
HotSpotMetaAccessProvider#intMaskRight(int)::: hot spot meta access provider int mask right:::return
HotSpotMetaAccessProvider#encodeDeoptActionAndReason(DeoptimizationAction, DeoptimizationReason, int)::: hot spot meta access provider encode deopt action and reason:::config->runtime->getConfig->actionValue->convertDeoptAction->reasonValue->convertDeoptReason->debugValue->intMaskRight->c->JavaConstant->forInt->return
HotSpotMetaAccessProvider#decodeDeoptReason(JavaConstant)::: hot spot meta access provider decode deopt reason:::config->runtime->getConfig->reasonValue->constant->asInt->intMaskRight->reason->convertDeoptReason->return
HotSpotMetaAccessProvider#decodeDeoptAction(JavaConstant)::: hot spot meta access provider decode deopt action:::config->runtime->getConfig->actionValue->constant->asInt->intMaskRight->action->convertDeoptAction->return
HotSpotMetaAccessProvider#decodeDebugId(JavaConstant)::: hot spot meta access provider decode debug id:::config->runtime->getConfig->return->constant->asInt->intMaskRight
HotSpotMetaAccessProvider#encodeSpeculation(Speculation)::: hot spot meta access provider encode speculation:::if->speculation->getReason->return->return->getEncoding
HotSpotMetaAccessProvider#decodeSpeculation(JavaConstant, SpeculationLog)::: hot spot meta access provider decode speculation:::if->constant->equals->return->if->throw->new->IllegalArgumentException->return->speculationLog->lookupSpeculation
HotSpotMetaAccessProvider#convertDeoptAction(DeoptimizationAction)::: hot spot meta access provider convert deopt action:::config->runtime->getConfig->switch->return->return->return->return->return->throw->new->JVMCIError
HotSpotMetaAccessProvider#convertDeoptAction(int)::: hot spot meta access provider convert deopt action:::config->runtime->getConfig->if->return->if->return->if->return->if->return->if->return->throw->new->JVMCIError
HotSpotMetaAccessProvider#convertDeoptReason(DeoptimizationReason)::: hot spot meta access provider convert deopt reason:::config->runtime->getConfig->switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->JVMCIError
HotSpotMetaAccessProvider#convertDeoptReason(int)::: hot spot meta access provider convert deopt reason:::config->runtime->getConfig->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->throw->new->JVMCIError
HotSpotMetaAccessProvider#getMemorySize(JavaConstant)::: hot spot meta access provider get memory size:::if->constant->getJavaKind->lookupJavaType->lookupJavaType->if->return->else->if->lookupJavaType->isArray->length->runtime->getHostJVMCIBackend->getConstantReflection->readArrayLength->elementType->lookupJavaType->getComponentType->elementKind->elementType->getJavaKind->headerSize->runtime->getArrayBaseOffset->sizeOfElement->runtime->getArrayIndexScale->log2ElementSize->CodeUtil->log2->return->computeArrayAllocationSize->return->lookupJavaType->instanceSize->else->return->constant->getJavaKind->getByteCount
HotSpotMetaAccessProvider#computeArrayAllocationSize(int, int, int):::Computes the size of the memory chunk allocated for an array:::config->runtime->getConfig->alignment->size->mask->return
HotSpotMetaAccessProvider#getArrayBaseOffset(JavaKind)::: hot spot meta access provider get array base offset:::return->runtime->getArrayBaseOffset
HotSpotMetaAccessProvider#getArrayIndexScale(JavaKind)::: hot spot meta access provider get array index scale:::return->runtime->getArrayIndexScale
HotSpotMetaData#pcDescBytes()::: hot spot meta data pc desc bytes:::return
HotSpotMetaData#scopesDescBytes()::: hot spot meta data scopes desc bytes:::return
HotSpotMetaData#relocBytes()::: hot spot meta data reloc bytes:::return
HotSpotMetaData#exceptionBytes()::: hot spot meta data exception bytes:::return
HotSpotMetaData#implicitExceptionBytes()::: hot spot meta data implicit exception bytes:::return
HotSpotMetaData#oopMaps()::: hot spot meta data oop maps:::return
HotSpotMetaData#metadataEntries()::: hot spot meta data metadata entries:::return
HotSpotMetaspaceConstant#asResolvedJavaType()::: hot spot metaspace constant as resolved java type:::
HotSpotMetaspaceConstant#asResolvedJavaMethod()::: hot spot metaspace constant as resolved java method:::
HotSpotMetaspaceConstantImpl#forMetaspaceObject(MetaspaceObject, boolean)::: hot spot metaspace constant impl for metaspace object:::return->new->HotSpotMetaspaceConstantImpl
HotSpotMetaspaceConstantImpl#getMetaspaceObject(Constant)::: hot spot metaspace constant impl get metaspace object:::return
HotSpotMetaspaceConstantImpl#hashCode()::: hot spot metaspace constant impl hash code:::return->System->identityHashCode
HotSpotMetaspaceConstantImpl#equals(Object)::: hot spot metaspace constant impl equals:::if->return->if->return->other->return->Objects->equals
HotSpotMetaspaceConstantImpl#toValueString()::: hot spot metaspace constant impl to value string:::return->String->format
HotSpotMetaspaceConstantImpl#toString()::: hot spot metaspace constant impl to string:::return->toValueString
HotSpotMetaspaceConstantImpl#isDefaultForKind()::: hot spot metaspace constant impl is default for kind:::return
HotSpotMetaspaceConstantImpl#isCompressed()::: hot spot metaspace constant impl is compressed:::return
HotSpotMetaspaceConstantImpl#compress()::: hot spot metaspace constant impl compress:::res->HotSpotMetaspaceConstantImpl->forMetaspaceObject->return
HotSpotMetaspaceConstantImpl#uncompress()::: hot spot metaspace constant impl uncompress:::res->HotSpotMetaspaceConstantImpl->forMetaspaceObject->return
HotSpotMetaspaceConstantImpl#asResolvedJavaType()::: hot spot metaspace constant impl as resolved java type:::if->return->return
HotSpotMetaspaceConstantImpl#asResolvedJavaMethod()::: hot spot metaspace constant impl as resolved java method:::if->return->return
HotSpotMethod#applyFormattingFlagsAndWidth(String, int, int)::: hot spot method apply formatting flags and width:::if->return->sb->new->StringBuilder->len->sb->length->if->for->i->res->sb->toString->if->res->toUpperCase->return
HotSpotMethod#toString()::: hot spot method to string:::h->suffix->fmt->String->format->return->format
HotSpotMethod#formatTo(Formatter, int, int, int)::: hot spot method format to:::base->getName->toString->formatter->applyFormattingFlagsAndWidth->format
HotSpotMethodData.VMState#checkAccessorTags()::: state check accessor tags:::expectedTag->foreach->if->else->return
HotSpotMethodData.VMState#truncateLongToInt(long)::: state truncate long to int:::return
HotSpotMethodData.VMState#computeFullOffset(int, int)::: state compute full offset:::return
HotSpotMethodData.VMState#cellIndexToOffset(int)::: state cell index to offset:::return->cellsToBytes
HotSpotMethodData.VMState#cellsToBytes(int)::: state cells to bytes:::return
HotSpotMethodData.VMState#instance()::: state instance:::result->if->synchronized->if->new->VMState->return
HotSpotMethodData#normalDataSize()::: hot spot method data normal data size:::return->UNSAFE->getInt
HotSpotMethodData#extraDataSize():::Returns the size of the extra data records:::extraDataBase->normalDataSize->extraDataLimit->UNSAFE->getInt->return
HotSpotMethodData#hasNormalData()::: hot spot method data has normal data:::return->normalDataSize
HotSpotMethodData#hasExtraData()::: hot spot method data has extra data:::return->extraDataSize
HotSpotMethodData#getExtraDataBeginOffset()::: hot spot method data get extra data begin offset:::return->normalDataSize
HotSpotMethodData#isWithin(int)::: hot spot method data is within:::return->normalDataSize->extraDataSize
HotSpotMethodData#getDeoptimizationCount(DeoptimizationReason)::: hot spot method data get deoptimization count:::metaAccess->runtime->getHostJVMCIBackend->getMetaAccess->reasonIndex->metaAccess->convertDeoptReason->return->UNSAFE->getByte
HotSpotMethodData#getOSRDeoptimizationCount(DeoptimizationReason)::: hot spot method data get deoptimization count:::metaAccess->runtime->getHostJVMCIBackend->getMetaAccess->reasonIndex->metaAccess->convertDeoptReason->return->UNSAFE->getByte
HotSpotMethodData#getDecompileCount()::: hot spot method data get decompile count:::return->UNSAFE->getInt
HotSpotMethodData#getOverflowRecompileCount()::: hot spot method data get overflow recompile count:::return->UNSAFE->getInt
HotSpotMethodData#getOverflowTrapCount()::: hot spot method data get overflow trap count:::return->UNSAFE->getInt
HotSpotMethodData#getNormalData(int)::: hot spot method data get normal data:::if->normalDataSize->return->return->getData
HotSpotMethodData#getExtraData(int)::: hot spot method data get extra data:::if->normalDataSize->extraDataSize->return->data->getData->if->return->return
HotSpotMethodData#getNoDataAccessor(boolean)::: hot spot method data get no data accessor:::if->return->VMState->instance->else->return->VMState->instance
HotSpotMethodData#getData(int)::: hot spot method data get data:::tag->HotSpotMethodDataAccessor->readTag->accessor->return
HotSpotMethodData#readUnsignedByte(int, int)::: hot spot method data read unsigned byte:::fullOffsetInBytes->state->computeFullOffset->return->UNSAFE->getByte
HotSpotMethodData#readUnsignedShort(int, int)::: hot spot method data read unsigned short:::fullOffsetInBytes->state->computeFullOffset->return->UNSAFE->getShort
HotSpotMethodData#readUnsignedInt(int, int):::Since the values are stored in cells (platform words) this method uses Unsafe#getAddress to read the right value on both little and big endian machines.:::fullOffsetInBytes->state->computeFullOffset->return->UNSAFE->getAddress
HotSpotMethodData#readUnsignedIntAsSignedInt(int, int)::: hot spot method data read unsigned int as signed int:::value->readUnsignedInt->return->VMState->truncateLongToInt
HotSpotMethodData#readInt(int, int):::Since the values are stored in cells (platform words) this method uses Unsafe#getAddress to read the right value on both little and big endian machines.:::fullOffsetInBytes->state->computeFullOffset->return->UNSAFE->getAddress
HotSpotMethodData#readMethod(int, int)::: hot spot method data read method:::fullOffsetInBytes->state->computeFullOffset->return->compilerToVM->getResolvedJavaMethod
HotSpotMethodData#readKlass(int, int)::: hot spot method data read klass:::fullOffsetInBytes->state->computeFullOffset->return->compilerToVM->getResolvedJavaType
HotSpotMethodData#isProfileMature():::Returns whether profiling ran long enough that the profile information is mature:::return->runtime->getCompilerToVM->isMature
HotSpotMethodData#toString()::: hot spot method data to string:::sb->new->StringBuilder->nl->String->format->nlIndent->String->format->sb->append->sb->method->format->append->sb->append->sb->append->sb->String->getDecompileCount->getOverflowRecompileCount->getOverflowTrapCount->format->append->if->hasNormalData->pos->data->while->getNormalData->if->sb->append->bci->data->getBCI->sb->String->data->getClass->getSimpleName->format->append->sb->data->new->StringBuilder->appendTo->toString->replace->append->data->getSize->if->hasExtraData->pos->getExtraDataBeginOffset->data->while->getExtraData->if->getExtraDataBeginOffset->sb->append->append->bci->data->getBCI->sb->String->data->getClass->getSimpleName->format->append->sb->data->new->StringBuilder->appendTo->toString->replace->append->data->getSize->return->sb->toString
HotSpotMethodData.NoMethodData#getBCI(HotSpotMethodData, int)::: no method data get i:::return
HotSpotMethodData.NoMethodData#getExceptionSeen(HotSpotMethodData, int)::: no method data get exception seen:::return
HotSpotMethodData.NoMethodData#appendTo(StringBuilder, HotSpotMethodData, int)::: no method data append to:::return
HotSpotMethodData.BitData#getNullSeen(HotSpotMethodData, int)::: bit data get null seen:::return->TriState->getFlags->get
HotSpotMethodData.BitData#appendTo(StringBuilder, HotSpotMethodData, int)::: bit data append to:::return->sb->getExceptionSeen->format->append
HotSpotMethodData.CounterData#getExecutionCount(HotSpotMethodData, int)::: counter data get execution count:::return->getCounterValue
HotSpotMethodData.CounterData#getCounterValue(HotSpotMethodData, int)::: counter data get counter value:::return->data->readUnsignedIntAsSignedInt
HotSpotMethodData.CounterData#appendTo(StringBuilder, HotSpotMethodData, int)::: counter data append to:::return->sb->getCounterValue->getNullSeen->getExceptionSeen->format->append
HotSpotMethodData.JumpData#getBranchTakenProbability(HotSpotMethodData, int)::: jump data get branch taken probability:::return->getExecutionCount
HotSpotMethodData.JumpData#getExecutionCount(HotSpotMethodData, int)::: jump data get execution count:::return->data->readUnsignedIntAsSignedInt
HotSpotMethodData.JumpData#getTakenDisplacement(HotSpotMethodData, int)::: jump data get taken displacement:::return->data->readInt
HotSpotMethodData.JumpData#appendTo(StringBuilder, HotSpotMethodData, int)::: jump data append to:::return->sb->getExecutionCount->getTakenDisplacement->format->append
HotSpotMethodData.AbstractTypeData#getTypeProfile(HotSpotMethodData, int)::: abstract type data get type profile:::return->getNullSeen->getRawTypeProfile->createTypeProfile
HotSpotMethodData.AbstractTypeData#getRawTypeProfile(HotSpotMethodData, int)::: abstract type data get raw type profile:::typeProfileWidth->types->new->ResolvedJavaTypeArr->counts->new->longArr->totalCount->entries->for->i->getTypesNotRecordedExecutionCount->return->new->RawItemProfile<>
HotSpotMethodData.AbstractTypeData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)::: abstract type data get types not recorded execution count:::
HotSpotMethodData.AbstractTypeData#getNonprofiledCount(HotSpotMethodData, int)::: abstract type data get nonprofiled count:::return->data->readUnsignedIntAsSignedInt
HotSpotMethodData.AbstractTypeData#createTypeProfile(TriState, RawItemProfile)::: abstract type data create type profile:::if->return->ptypes->new->ProfiledTypeArr->totalProbability->for->i->Arrays->sort->notRecordedTypeProbability->Math->Math->max->min->return->new->JavaTypeProfile
HotSpotMethodData.AbstractTypeData#getTypeOffset(int)::: abstract type data get type offset:::return
HotSpotMethodData.AbstractTypeData#getTypeCountOffset(int)::: abstract type data get type count offset:::return
HotSpotMethodData.AbstractTypeData#appendTo(StringBuilder, HotSpotMethodData, int)::: abstract type data append to:::profile->getRawTypeProfile->nullSeen->getNullSeen->exceptionSeen->getExceptionSeen->sb->getCounterValue->getNonprofiledCount->format->append->for->i->return
HotSpotMethodData.ReceiverTypeData#getExecutionCount(HotSpotMethodData, int)::: receiver type data get execution count:::return
HotSpotMethodData.ReceiverTypeData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)::: receiver type data get types not recorded execution count:::return->getNonprofiledCount
HotSpotMethodData.VirtualCallData#getExecutionCount(HotSpotMethodData, int)::: virtual call data get execution count:::typeProfileWidth->total->for->i->getCounterValue->return->VMState->truncateLongToInt
HotSpotMethodData.VirtualCallData#getTypesNotRecordedExecutionCount(HotSpotMethodData, int)::: virtual call data get types not recorded execution count:::return->getCounterValue
HotSpotMethodData.VirtualCallData#getMethodsNotRecordedExecutionCount(HotSpotMethodData, int)::: virtual call data get methods not recorded execution count:::return->data->readUnsignedIntAsSignedInt
HotSpotMethodData.VirtualCallData#getMethodProfile(HotSpotMethodData, int)::: virtual call data get method profile:::return->getRawMethodProfile->createMethodProfile
HotSpotMethodData.VirtualCallData#getRawMethodProfile(HotSpotMethodData, int)::: virtual call data get raw method profile:::profileWidth->methods->new->ResolvedJavaMethodArr->counts->new->longArr->totalCount->entries->for->i->getMethodsNotRecordedExecutionCount->if->return->new->RawItemProfile<>
HotSpotMethodData.VirtualCallData#createMethodProfile(RawItemProfile)::: virtual call data create method profile:::if->return->pmethods->new->ProfiledMethodArr->totalProbability->for->i->Arrays->sort->notRecordedMethodProbability->Math->Math->max->min->return->new->JavaMethodProfile
HotSpotMethodData.VirtualCallData#getMethodOffset(int)::: virtual call data get method offset:::return
HotSpotMethodData.VirtualCallData#getMethodCountOffset(int)::: virtual call data get method count offset:::return
HotSpotMethodData.VirtualCallData#appendTo(StringBuilder, HotSpotMethodData, int)::: virtual call data append to:::profile->getRawMethodProfile->super->sb->getExceptionSeen->format->append->appendTo->format->append->for->i->return
HotSpotMethodData.VirtualCallTypeData#getDynamicSize(HotSpotMethodData, int)::: virtual call type data get dynamic size:::return->HotSpotJVMCIRuntime->runtime->methodDataProfileDataSize
HotSpotMethodData.BranchData#getBranchTakenProbability(HotSpotMethodData, int)::: branch data get branch taken probability:::takenCount->data->readUnsignedInt->notTakenCount->data->readUnsignedInt->total->return
HotSpotMethodData.BranchData#getExecutionCount(HotSpotMethodData, int)::: branch data get execution count:::count->data->readUnsignedInt->data->readUnsignedInt->return->VMState->truncateLongToInt
HotSpotMethodData.BranchData#appendTo(StringBuilder, HotSpotMethodData, int)::: branch data append to:::taken->data->readUnsignedInt->notTaken->data->readUnsignedInt->takenProbability->getBranchTakenProbability->return->sb->getTakenDisplacement->format->append
HotSpotMethodData.ArrayData#getDynamicSize(HotSpotMethodData, int)::: array data get dynamic size:::return->state->getLength->cellsToBytes
HotSpotMethodData.ArrayData#getLength(HotSpotMethodData, int)::: array data get length:::return->data->readInt
HotSpotMethodData.ArrayData#appendTo(StringBuilder, HotSpotMethodData, int)::: array data append to:::return->sb->getLength->format->append
HotSpotMethodData.MultiBranchData#getSwitchProbabilities(HotSpotMethodData, int)::: multi branch data get switch probabilities:::arrayLength->getLength->length->totalCount->result->new->doubleArr->count->readCount->for->i->if->return->else->for->i->return
HotSpotMethodData.MultiBranchData#readCount(HotSpotMethodData, int, int)::: multi branch data read count:::offset->count->getCountOffset->data->readUnsignedInt->return
HotSpotMethodData.MultiBranchData#getExecutionCount(HotSpotMethodData, int)::: multi branch data get execution count:::arrayLength->getLength->length->totalCount->for->i->return->VMState->truncateLongToInt
HotSpotMethodData.MultiBranchData#getCountOffset(int)::: multi branch data get count offset:::return
HotSpotMethodData.MultiBranchData#getDisplacementOffset(int)::: multi branch data get displacement offset:::return
HotSpotMethodData.MultiBranchData#appendTo(StringBuilder, HotSpotMethodData, int)::: multi branch data append to:::entries->getLength->sb->format->append->for->i->return
HotSpotMethodData.UnknownProfileData#getDynamicSize(HotSpotMethodData, int)::: unknown profile data get dynamic size:::return->HotSpotJVMCIRuntime->runtime->methodDataProfileDataSize
HotSpotMethodData.UnknownProfileData#appendTo(StringBuilder, HotSpotMethodData, int)::: unknown profile data append to:::sb->append->return
HotSpotMethodData#setCompiledIRSize(int)::: hot spot method data set compiled size:::UNSAFE->putInt
HotSpotMethodData#getCompiledIRSize()::: hot spot method data get compiled size:::return->UNSAFE->getInt
HotSpotMethodDataAccessor#getTag():::Returns the tag stored in the LayoutData header.:::return
HotSpotMethodDataAccessor#readTag(HotSpotVMConfig, HotSpotMethodData, int)::: hot spot method data accessor read tag:::tag->data->readUnsignedByte->return
HotSpotMethodDataAccessor#getBCI(HotSpotMethodData, int):::Returns the BCI stored in the LayoutData header.:::return->data->readUnsignedShort
HotSpotMethodDataAccessor#getSize(HotSpotMethodData, int):::Computes the size for the specific data at the given position.:::size->getDynamicSize->vmSize->HotSpotJVMCIRuntime->runtime->methodDataProfileDataSize->return
HotSpotMethodDataAccessor#getExceptionSeen(HotSpotMethodData, int)::: hot spot method data accessor get exception seen:::exceptionsMask->return->TriState->getFlags->get
HotSpotMethodDataAccessor#getTypeProfile(HotSpotMethodData, int)::: hot spot method data accessor get type profile:::return
HotSpotMethodDataAccessor#getMethodProfile(HotSpotMethodData, int)::: hot spot method data accessor get method profile:::return
HotSpotMethodDataAccessor#getBranchTakenProbability(HotSpotMethodData, int)::: hot spot method data accessor get branch taken probability:::return
HotSpotMethodDataAccessor#getSwitchProbabilities(HotSpotMethodData, int)::: hot spot method data accessor get switch probabilities:::return
HotSpotMethodDataAccessor#getExecutionCount(HotSpotMethodData, int)::: hot spot method data accessor get execution count:::return
HotSpotMethodDataAccessor#getNullSeen(HotSpotMethodData, int)::: hot spot method data accessor get null seen:::return
HotSpotMethodDataAccessor#getFlags(HotSpotMethodData, int)::: hot spot method data accessor get flags:::return->data->readUnsignedByte
HotSpotMethodDataAccessor#getDynamicSize(HotSpotMethodData, int)::: hot spot method data accessor get dynamic size:::return
HotSpotMethodDataAccessor#appendTo(StringBuilder, HotSpotMethodData, int)::: hot spot method data accessor append to:::
HotSpotMethodHandleAccessProvider.Internals#findFieldInClass(ResolvedJavaType, String, ResolvedJavaType):::Search for an instance field with the given name in a class.:::fields->declaringType->getInstanceFields->foreach->if->field->getName->equals->field->getType->equals->return->throw->new->NoSuchFieldError
HotSpotMethodHandleAccessProvider.Internals#resolveType(String)::: internals resolve type:::return->runtime->lookupTypeInternal
HotSpotMethodHandleAccessProvider.Internals#instance()::: internals instance:::result->if->synchronized->if->new->Internals->return
HotSpotMethodHandleAccessProvider#lookupMethodHandleIntrinsic(ResolvedJavaMethod)::: hot spot method handle access provider lookup method handle intrinsic:::intrinsicId->intrinsicId->if->return->getMethodHandleIntrinsic->return
HotSpotMethodHandleAccessProvider#getMethodHandleIntrinsic(int)::: hot spot method handle access provider get method handle intrinsic:::config->runtime->getConfig->if->return->else->if->return->else->if->return->else->if->return->else->if->return->return
HotSpotMethodHandleAccessProvider#resolveInvokeBasicTarget(JavaConstant, boolean)::: hot spot method handle access provider resolve invoke basic target:::if->methodHandle->isNull->return->internals->Internals->instance->lambdaForm->constantReflection->readFieldValue->if->lambdaForm->isNull->return->memberName->constantReflection->readFieldValue->if->memberName->isNull->compilerToVM->compileToBytecode->constantReflection->readFieldValue->method->constantReflection->readFieldValue->return->getTargetMethod
HotSpotMethodHandleAccessProvider#resolveLinkToTarget(JavaConstant)::: hot spot method handle access provider resolve link to target:::if->memberName->isNull->return->method->constantReflection->Internals->instance->readFieldValue->return->getTargetMethod
HotSpotMethodHandleAccessProvider#getTargetMethod(JavaConstant):::Returns the ResolvedJavaMethod for the method of a java.lang.invoke.MemberName.:::if->throw->new->IllegalArgumentException->return->compilerToVM->Internals->instance->getOffset->getResolvedJavaMethod
HotSpotModifiers#jvmClassModifiers()::: hot spot modifiers jvm class modifiers:::return
HotSpotModifiers#jvmMethodModifiers()::: hot spot modifiers jvm method modifiers:::return
HotSpotModifiers#jvmFieldModifiers()::: hot spot modifiers jvm field modifiers:::return
HotSpotNmethod#inOopsTable():::Determines whether this object is in the oops table of the nmethod:::return
HotSpotNmethod#isDefault():::Determines if the nmethod associated with this object is the compiled entry point for #getMethod().:::return
HotSpotNmethod#isValid()::: hot spot nmethod is valid:::if->compilerToVM->updateHotSpotNmethod->return->super->isValid
HotSpotNmethod#getMethod()::: hot spot nmethod get method:::return
HotSpotNmethod#invalidate()::: hot spot nmethod invalidate:::compilerToVM->invalidateHotSpotNmethod
HotSpotNmethod#getAddress()::: hot spot nmethod get address:::if->compilerToVM->updateHotSpotNmethod->return->super->getAddress
HotSpotNmethod#getEntryPoint()::: hot spot nmethod get entry point:::if->return->return->super->getEntryPoint
HotSpotNmethod#toString()::: hot spot nmethod to string:::return->String->getAddress->inOopsTable->format
HotSpotNmethod#checkArgs(Object...)::: hot spot nmethod check args:::sig->method->toParameterTypes->for->i->return
HotSpotNmethod#executeVarargs(Object...)::: hot spot nmethod execute varargs:::if->throw->new->HotSpotJVMCIUnsupportedOperationError->return->compilerToVM->executeHotSpotNmethod
HotSpotNmethod#getStart()::: hot spot nmethod get start:::return->isValid->super->getStart
HotSpotObjectConstant#compress()::: hot spot object constant compress:::
HotSpotObjectConstant#uncompress()::: hot spot object constant uncompress:::
HotSpotObjectConstant#getType():::Gets the resolved Java type of the object represented by this constant.:::
HotSpotObjectConstant#getIdentityHashCode():::Gets the System#identityHashCode(Object) identity has code for the object represented by this constant.:::
HotSpotObjectConstant#getCallSiteTarget(Assumptions):::Gets the result of CallSite#getTarget() for the CallSite object represented by this constant.:::
HotSpotObjectConstant#isInternedString():::Determines if this constant represents an String#intern() interned string.:::
HotSpotObjectConstant#asObject(Class):::Gets the object represented by this constant represents if it is of a given type.:::
HotSpotObjectConstant#asObject(ResolvedJavaType):::Gets the object represented by this constant represents if it is of a given type.:::
HotSpotObjectConstant#toValueString()::: hot spot object constant to value string:::
HotSpotObjectConstantImpl#getJavaKind()::: hot spot object constant impl get java kind:::return
HotSpotObjectConstantImpl#isCompressed()::: hot spot object constant impl is compressed:::return
HotSpotObjectConstantImpl#compress()::: hot spot object constant impl compress:::
HotSpotObjectConstantImpl#uncompress()::: hot spot object constant impl uncompress:::
HotSpotObjectConstantImpl#getType()::: hot spot object constant impl get type:::return->runtime->getType
HotSpotObjectConstantImpl#getIdentityHashCode()::: hot spot object constant impl get identity hash code:::
HotSpotObjectConstantImpl#getCallSiteTarget(Assumptions)::: hot spot object constant impl get call site target:::if->runtime->getCallSite->isInstance->target->runtime->getHostJVMCIBackend->getConstantReflection->instance->readFieldValue->if->runtime->getConstantCallSite->isInstance->if->return->assumptions->new->Assumptions.CallSiteTargetValue->record->return->return
HotSpotObjectConstantImpl#isInternedString()::: hot spot object constant impl is interned string:::return->runtime->isInternedString
HotSpotObjectConstantImpl#asObject(Class)::: hot spot object constant impl as object:::return->runtime->asObject
HotSpotObjectConstantImpl#asObject(ResolvedJavaType)::: hot spot object constant impl as object:::return->runtime->asObject
HotSpotObjectConstantImpl#isNull()::: hot spot object constant impl is null:::return
HotSpotObjectConstantImpl#isDefaultForKind()::: hot spot object constant impl is default for kind:::return
HotSpotObjectConstantImpl#asBoxedPrimitive()::: hot spot object constant impl as boxed primitive:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#asInt()::: hot spot object constant impl as int:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#asBoolean()::: hot spot object constant impl as boolean:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#asLong()::: hot spot object constant impl as long:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#asFloat()::: hot spot object constant impl as float:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#asDouble()::: hot spot object constant impl as double:::throw->new->IllegalArgumentException
HotSpotObjectConstantImpl#equals(Object)::: hot spot object constant impl equals:::if->return->else->if->other->return->runtime->equals->return
HotSpotObjectConstantImpl#hashCode()::: hot spot object constant impl hash code:::return->getIdentityHashCode
HotSpotObjectConstantImpl#toValueString()::: hot spot object constant impl to value string:::if->runtime->getJavaLangString->isInstance->return->runtime->asString->else->return->runtime->formatString
HotSpotObjectConstantImpl#toString()::: hot spot object constant impl to string:::return->getJavaKind->getJavaName->runtime->formatString
HotSpotObjectConstantImpl#readFieldValue(HotSpotResolvedJavaField, boolean)::: hot spot object constant impl read field value:::return->runtime->readFieldValue
HotSpotObjectConstantImpl#asJavaType()::: hot spot object constant impl as java type:::return->runtime->asJavaType
HotSpotObjectConstantScope#openLocalScope(Object):::Opens a local scope that upon closing, will release foreign object references encapsulated by HotSpotObjectConstants created in the scope.:::return->Objects->requireNonNull->new->HotSpotObjectConstantScope
HotSpotObjectConstantScope#enterGlobalScope():::Enters the global scope:::return->CURRENT->get->new->HotSpotObjectConstantScope
HotSpotObjectConstantScope#isGlobal():::Determines if this scope is global.:::return
HotSpotObjectConstantScope#add(IndirectHotSpotObjectConstantImpl)::: hot spot object constant scope add:::if->new->ArrayList<>->foreignObjects->add
HotSpotObjectConstantScope#close()::: hot spot object constant scope close:::if->CURRENT->get->throw->new->IllegalStateException->if->foreach->obj->clear->CURRENT->set
HotSpotProfilingInfo#getCodeSize()::: hot spot profiling info get code size:::return->method->getCodeSize
HotSpotProfilingInfo#getDecompileCount()::: hot spot profiling info get decompile count:::return->methodData->getDecompileCount
HotSpotProfilingInfo#getOverflowRecompileCount()::: hot spot profiling info get overflow recompile count:::return->methodData->getOverflowRecompileCount
HotSpotProfilingInfo#getOverflowTrapCount()::: hot spot profiling info get overflow trap count:::return->methodData->getOverflowTrapCount
HotSpotProfilingInfo#getTypeProfile(int)::: hot spot profiling info get type profile:::if->return->findBCI->return->dataAccessor->getTypeProfile
HotSpotProfilingInfo#getMethodProfile(int)::: hot spot profiling info get method profile:::if->return->findBCI->return->dataAccessor->getMethodProfile
HotSpotProfilingInfo#getBranchTakenProbability(int)::: hot spot profiling info get branch taken probability:::if->return->findBCI->return->dataAccessor->getBranchTakenProbability
HotSpotProfilingInfo#getSwitchProbabilities(int)::: hot spot profiling info get switch probabilities:::if->return->findBCI->return->dataAccessor->getSwitchProbabilities
HotSpotProfilingInfo#getExceptionSeen(int)::: hot spot profiling info get exception seen:::findBCI->return->dataAccessor->getExceptionSeen
HotSpotProfilingInfo#getNullSeen(int)::: hot spot profiling info get null seen:::findBCI->return->dataAccessor->getNullSeen
HotSpotProfilingInfo#getExecutionCount(int)::: hot spot profiling info get execution count:::if->return->findBCI->return->dataAccessor->getExecutionCount
HotSpotProfilingInfo#getDeoptimizationCount(DeoptimizationReason)::: hot spot profiling info get deoptimization count:::count->if->methodData->getDeoptimizationCount->if->methodData->getOSRDeoptimizationCount->return
HotSpotProfilingInfo#findBCI(int, boolean)::: hot spot profiling info find i:::if->methodData->hasNormalData->currentPosition->currentAccessor->while->methodData->getNormalData->currentBCI->currentAccessor->getBCI->if->normalDataFound->return->else->if->break->currentAccessor->getSize->exceptionPossiblyNotRecorded->if->methodData->hasExtraData->currentPosition->methodData->getExtraDataBeginOffset->currentAccessor->while->methodData->getExtraData->currentBCI->currentAccessor->getBCI->if->extraDataFound->return->currentAccessor->getSize->if->methodData->isWithin->noDataFound
HotSpotProfilingInfo#normalDataFound(HotSpotMethodDataAccessor, int, int)::: hot spot profiling info normal data found:::setCurrentData
HotSpotProfilingInfo#extraDataFound(HotSpotMethodDataAccessor, int)::: hot spot profiling info extra data found:::setCurrentData
HotSpotProfilingInfo#noDataFound(boolean)::: hot spot profiling info no data found:::accessor->HotSpotMethodData->getNoDataAccessor->setCurrentData
HotSpotProfilingInfo#setCurrentData(HotSpotMethodDataAccessor, int)::: hot spot profiling info set current data:::
HotSpotProfilingInfo#isMature()::: hot spot profiling info is mature:::return
HotSpotProfilingInfo#ignoreMature()::: hot spot profiling info ignore mature:::
HotSpotProfilingInfo#toString()::: hot spot profiling info to string:::return->this->toString
HotSpotProfilingInfo#setMature()::: hot spot profiling info set mature:::
HotSpotProfilingInfo#setCompilerIRSize(Class, int)::: hot spot profiling info set compiler size:::if->synchronized->if->if->return->methodData->setCompiledIRSize->return
HotSpotProfilingInfo#getCompilerIRSize(Class)::: hot spot profiling info get compiler size:::if->return->methodData->getCompiledIRSize->return
HotSpotReferenceMap#hashCode()::: hot spot reference map hash code:::throw->new->UnsupportedOperationException
HotSpotReferenceMap#equals(Object)::: hot spot reference map equals:::if->return->if->that->if->Arrays->equals->Arrays->equals->return->return
HotSpotReferenceMap#toString()::: hot spot reference map to string:::return->Arrays->toString
HotSpotResolvedJavaField#isInObject(JavaConstant):::Determines if a given object contains this field.:::
HotSpotResolvedJavaField#isStable():::Determines if this field should be treated as a constant.:::
HotSpotResolvedJavaFieldImpl#equals(Object)::: hot spot resolved java field impl equals:::if->return->if->that->if->that->isStatic->this->isStatic->return->else->if->equals->return->return
HotSpotResolvedJavaFieldImpl#hashCode()::: hot spot resolved java field impl hash code:::return->holder->hashCode
HotSpotResolvedJavaFieldImpl#getModifiers()::: hot spot resolved java field impl get modifiers:::return->HotSpotModifiers->jvmFieldModifiers
HotSpotResolvedJavaFieldImpl#isInternal()::: hot spot resolved java field impl is internal:::return->config
HotSpotResolvedJavaFieldImpl#isInObject(JavaConstant):::Determines if a given object contains this field.:::if->isStatic->return->constant->return->getDeclaringClass->constant->getType->isAssignableFrom
HotSpotResolvedJavaFieldImpl#getDeclaringClass()::: hot spot resolved java field impl get declaring class:::return
HotSpotResolvedJavaFieldImpl#getName()::: hot spot resolved java field impl get name:::return->holder->createFieldInfo->getName
HotSpotResolvedJavaFieldImpl#getType()::: hot spot resolved java field impl get type:::currentType->if->unresolvedType->resolved->HotSpotJVMCIRuntime->runtime->unresolvedType->getName->lookupType->if->return
HotSpotResolvedJavaFieldImpl#getOffset()::: hot spot resolved java field impl get offset:::return
HotSpotResolvedJavaFieldImpl#getIndex():::Gets the value of this field's index (i.e:::return
HotSpotResolvedJavaFieldImpl#toString()::: hot spot resolved java field impl to string:::return->format
HotSpotResolvedJavaFieldImpl#isSynthetic()::: hot spot resolved java field impl is synthetic:::return->config
HotSpotResolvedJavaFieldImpl#isStable():::Checks if this field has the Stable annotation.:::return->config
HotSpotResolvedJavaFieldImpl#hasAnnotations()::: hot spot resolved java field impl has annotations:::if->isInternal->config->config->metaspaceAnnotations->UNSAFE->holder->getMetaspaceKlass->getAddress->if->fieldsAnnotations->UNSAFE->getAddress->if->fieldAnnotations->UNSAFE->getAddress->return->return
HotSpotResolvedJavaFieldImpl#getAnnotations()::: hot spot resolved java field impl get annotations:::if->hasAnnotations->return->new->AnnotationArr->return->runtime->getFieldAnnotations
HotSpotResolvedJavaFieldImpl#getDeclaredAnnotations()::: hot spot resolved java field impl get declared annotations:::if->hasAnnotations->return->new->AnnotationArr->return->runtime->getFieldDeclaredAnnotations
HotSpotResolvedJavaFieldImpl#getAnnotation(Class)::: hot spot resolved java field impl get annotation:::if->hasAnnotations->return->return->runtime->getFieldAnnotation
HotSpotResolvedJavaMethod#isCallerSensitive():::Returns true if this method has a CallerSensitive annotation.:::
HotSpotResolvedJavaMethod#getDeclaringClass()::: hot spot resolved java method get declaring class:::
HotSpotResolvedJavaMethod#isForceInline():::Returns true if this method has a ForceInline annotation.:::
HotSpotResolvedJavaMethod#hasReservedStackAccess():::Returns true if this method has a ReservedStackAccess annotation.:::
HotSpotResolvedJavaMethod#setNotInlinableOrCompilable():::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::
HotSpotResolvedJavaMethod#ignoredBySecurityStackWalk():::Returns true if this method is one of the special methods that is ignored by security stack walks.:::
HotSpotResolvedJavaMethod#uniqueConcreteMethod(HotSpotResolvedObjectType)::: hot spot resolved java method unique concrete method:::
HotSpotResolvedJavaMethod#hasCompiledCode():::Returns whether this method has compiled code.:::
HotSpotResolvedJavaMethod#hasCompiledCodeAtLevel(int)::: hot spot resolved java method has compiled code at level:::
HotSpotResolvedJavaMethod#isDefault()::: hot spot resolved java method is default:::if->isConstructor->return->mask->return->getModifiers->getDeclaringClass->isInterface
HotSpotResolvedJavaMethod#vtableEntryOffset(ResolvedJavaType):::Returns the offset of this method into the v-table:::
HotSpotResolvedJavaMethod#intrinsicId()::: hot spot resolved java method intrinsic id:::
HotSpotResolvedJavaMethod#isIntrinsicCandidate():::Determines if this method denotes itself as a candidate for intrinsification:::
HotSpotResolvedJavaMethod#allocateCompileId(int):::Allocates a compile id for this method by asking the VM for one.:::
HotSpotResolvedJavaMethod#hasCodeAtLevel(int, int)::: hot spot resolved java method has code at level:::
HotSpotResolvedJavaMethod#methodIdnum()::: hot spot resolved java method method idnum:::
HotSpotResolvedJavaMethodImpl#getHolder(long):::Gets the holder of a HotSpot metaspace method native object.:::config->config->metaspaceMethod->UNSAFE->getLong->metaspaceConstMethod->UNSAFE->getAddress->metaspaceConstantPool->UNSAFE->getAddress->result->compilerToVM->getResolvedJavaType->return
HotSpotResolvedJavaMethodImpl#fromMetaspace(long):::Gets the JVMCI mirror from a HotSpot method:::holder->getHolder->return->holder->createMethod
HotSpotResolvedJavaMethodImpl#getConstMethod():::Returns a pointer to this method's constant method data structure ( Method::_constMethod):::return->UNSAFE->getMetaspaceMethod->config->getAddress
HotSpotResolvedJavaMethodImpl#getName()::: hot spot resolved java method impl get name:::if->nameIndex->UNSAFE->getConstMethod->config->getChar->constantPool->lookupUtf8->return
HotSpotResolvedJavaMethodImpl#equals(Object)::: hot spot resolved java method impl equals:::if->return->if->that->return->that->getMetaspaceMethod->getMetaspaceMethod->return
HotSpotResolvedJavaMethodImpl#hashCode()::: hot spot resolved java method impl hash code:::return->getMetaspaceMethod
HotSpotResolvedJavaMethodImpl#getFlags():::Returns this method's flags (Method::_flags).:::return->UNSAFE->getMetaspaceMethod->config->getShort
HotSpotResolvedJavaMethodImpl#getConstMethodFlags():::Returns this method's constant method flags (ConstMethod::_flags).:::return->UNSAFE->getConstMethod->config->getChar
HotSpotResolvedJavaMethodImpl#getDeclaringClass()::: hot spot resolved java method impl get declaring class:::return
HotSpotResolvedJavaMethodImpl#getMetaspaceMethodConstant():::Gets the address of the C++ Method object for this method.:::return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotResolvedJavaMethodImpl#getMetaspaceMethod()::: hot spot resolved java method impl get metaspace method:::metaspacePointer->getMetaspacePointer->if->throw->new->NullPointerException->return
HotSpotResolvedJavaMethodImpl#getMetadataHandle()::: hot spot resolved java method impl get metadata handle:::return
HotSpotResolvedJavaMethodImpl#getEncoding()::: hot spot resolved java method impl get encoding:::return->getMetaspaceMethodConstant
HotSpotResolvedJavaMethodImpl#getAllModifiers():::Gets the complete set of modifiers for this method which includes the JVM specification modifiers as well as the HotSpot internal modifiers.:::return->UNSAFE->getMetaspaceMethod->config->getInt
HotSpotResolvedJavaMethodImpl#getModifiers()::: hot spot resolved java method impl get modifiers:::return->getAllModifiers->jvmMethodModifiers
HotSpotResolvedJavaMethodImpl#canBeStaticallyBound()::: hot spot resolved java method impl can be statically bound:::return->isFinal->isPrivate->isStatic->holder->isLeaf->isConcrete
HotSpotResolvedJavaMethodImpl#getCode()::: hot spot resolved java method impl get code:::if->getCodeSize->return->if->holder->isLinked->compilerToVM->getBytecode->return
HotSpotResolvedJavaMethodImpl#getCodeSize()::: hot spot resolved java method impl get code size:::return->UNSAFE->getConstMethod->config->getChar
HotSpotResolvedJavaMethodImpl#getExceptionHandlers()::: hot spot resolved java method impl get exception handlers:::hasExceptionTable->getConstMethodFlags->config->if->return->new->ExceptionHandlerArr->config->config->exceptionTableLength->compilerToVM->getExceptionTableLength->handlers->new->ExceptionHandlerArr->exceptionTableElement->compilerToVM->getExceptionTableStart->for->i->return
HotSpotResolvedJavaMethodImpl#isCallerSensitive():::Returns true if this method has a CallerSensitive annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#isForceInline():::Returns true if this method has a ForceInline annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#hasReservedStackAccess():::Returns true if this method has a ReservedStackAccess annotation.:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#setNotInlinableOrCompilable():::Sets flags on method indicating that it should never be inlined or compiled by the VM.:::compilerToVM->setNotInlinableOrCompilable
HotSpotResolvedJavaMethodImpl#ignoredBySecurityStackWalk():::Returns true if this method is one of the special methods that is ignored by security stack walks.:::return->compilerToVM->methodIsIgnoredBySecurityStackWalk
HotSpotResolvedJavaMethodImpl#isClassInitializer()::: hot spot resolved java method impl is class initializer:::if->isStatic->nameIndex->UNSAFE->getConstMethod->config->getChar->nameSymbol->constantPool->getEntryAt->clinitSymbol->config->return->return
HotSpotResolvedJavaMethodImpl#isConstructor()::: hot spot resolved java method impl is constructor:::if->isStatic->nameIndex->UNSAFE->getConstMethod->config->getChar->nameSymbol->constantPool->getEntryAt->initSymbol->config->return->return
HotSpotResolvedJavaMethodImpl#getMaxLocals()::: hot spot resolved java method impl get max locals:::if->isAbstract->isNative->return->config->config->return->UNSAFE->getConstMethod->getChar
HotSpotResolvedJavaMethodImpl#getMaxStackSize()::: hot spot resolved java method impl get max stack size:::if->isAbstract->isNative->return->config->config->return->UNSAFE->getConstMethod->getChar
HotSpotResolvedJavaMethodImpl#asStackTraceElement(int)::: hot spot resolved java method impl as stack trace element:::if->getCodeSize->ste->compilerToVM->getStackTraceElement->return->ste->getClassName->ste->getMethodName->ste->getFileName->new->StackTraceElement->return->compilerToVM->getStackTraceElement
HotSpotResolvedJavaMethodImpl#uniqueConcreteMethod(HotSpotResolvedObjectType)::: hot spot resolved java method impl unique concrete method:::if->receiver->isInterface->return->if->this->isDefault->return->return->compilerToVM->findUniqueConcreteMethod
HotSpotResolvedJavaMethodImpl#getSignature()::: hot spot resolved java method impl get signature:::return
HotSpotResolvedJavaMethodImpl#getCompiledCode():::Gets the value of Method::_code.:::config->config->return->UNSAFE->getMetaspaceMethod->getAddress
HotSpotResolvedJavaMethodImpl#hasCompiledCode():::Returns whether this method has compiled code.:::return->getCompiledCode
HotSpotResolvedJavaMethodImpl#hasCompiledCodeAtLevel(int)::: hot spot resolved java method impl has compiled code at level:::compiledCode->getCompiledCode->if->return->UNSAFE->config->getInt->return
HotSpotResolvedJavaMethodImpl#getProfilingInfo(boolean, boolean)::: hot spot resolved java method impl get profiling info:::info->if->getBoolean->metaspaceMethodData->UNSAFE->getMetaspaceMethod->config->getAddress->if->new->HotSpotMethodData->methodDataFilter->getString->if->this->format->contains->line->methodData->toString->System->lineSeparator->lineBytes->line->getBytes->CompilerToVM->compilerToVM->writeDebugOutput->if->methodData->hasNormalData->methodData->hasExtraData->DefaultProfilingInfo->get->else->new->HotSpotProfilingInfo->return
HotSpotResolvedJavaMethodImpl#reprofile()::: hot spot resolved java method impl reprofile:::compilerToVM->reprofile
HotSpotResolvedJavaMethodImpl#getConstantPool()::: hot spot resolved java method impl get constant pool:::return
HotSpotResolvedJavaMethodImpl#getParameters()::: hot spot resolved java method impl get parameters:::if->signature->getParameterCount->return->new->ResolvedJavaMethod.ParameterArr->return->runtime->getParameters
HotSpotResolvedJavaMethodImpl#getParameterAnnotations()::: hot spot resolved java method impl get parameter annotations:::if->getConstMethodFlags->config->isClassInitializer->return->signature->getParameterCount->new->AnnotationArrs->return->runtime->getParameterAnnotations
HotSpotResolvedJavaMethodImpl#getAnnotations()::: hot spot resolved java method impl get annotations:::if->getConstMethodFlags->config->isClassInitializer->return->new->AnnotationArr->return->runtime->getMethodAnnotations
HotSpotResolvedJavaMethodImpl#getDeclaredAnnotations()::: hot spot resolved java method impl get declared annotations:::if->getConstMethodFlags->config->isClassInitializer->return->new->AnnotationArr->return->runtime->getMethodDeclaredAnnotations
HotSpotResolvedJavaMethodImpl#getAnnotation(Class)::: hot spot resolved java method impl get annotation:::if->getConstMethodFlags->config->isClassInitializer->return->return->runtime->getMethodAnnotation
HotSpotResolvedJavaMethodImpl#isBridge()::: hot spot resolved java method impl is bridge:::return->getModifiers
HotSpotResolvedJavaMethodImpl#isSynthetic()::: hot spot resolved java method impl is synthetic:::return->getModifiers
HotSpotResolvedJavaMethodImpl#isVarArgs()::: hot spot resolved java method impl is var args:::return->getModifiers
HotSpotResolvedJavaMethodImpl#isDefault()::: hot spot resolved java method impl is default:::mask->return->getModifiers->getDeclaringClass->isInterface
HotSpotResolvedJavaMethodImpl#getGenericParameterTypes()::: hot spot resolved java method impl get generic parameter types:::if->isClassInitializer->return->new->TypeArr->return->runtime->getGenericParameterTypes
HotSpotResolvedJavaMethodImpl#canBeInlined()::: hot spot resolved java method impl can be inlined:::if->hasNeverInlineDirective->return->return->compilerToVM->isCompilable
HotSpotResolvedJavaMethodImpl#hasNeverInlineDirective()::: hot spot resolved java method impl has never inline directive:::return->compilerToVM->hasNeverInlineDirective
HotSpotResolvedJavaMethodImpl#shouldBeInlined()::: hot spot resolved java method impl should be inlined:::if->isForceInline->return->return->compilerToVM->shouldInlineMethod
HotSpotResolvedJavaMethodImpl#getLineNumberTable()::: hot spot resolved java method impl get line number table:::hasLineNumberTable->getConstMethodFlags->config->if->return->values->compilerToVM->getLineNumberTable->if->return->bci->new->intArr->line->new->intArr->for->i->return->new->LineNumberTable
HotSpotResolvedJavaMethodImpl#getLocalVariableTable()::: hot spot resolved java method impl get local variable table:::hasLocalVariableTable->getConstMethodFlags->config->if->return->config->config->localVariableTableElement->compilerToVM->getLocalVariableTableStart->localVariableTableLength->compilerToVM->getLocalVariableTableLength->locals->new->LocalArr->for->i->return->new->LocalVariableTable
HotSpotResolvedJavaMethodImpl#vtableEntryOffset(ResolvedJavaType):::Returns the offset of this method into the v-table:::if->isInVirtualMethodTable->throw->new->JVMCIError->config->config->vtableIndex->getVtableIndex->return
HotSpotResolvedJavaMethodImpl#isInVirtualMethodTable(ResolvedJavaType)::: hot spot resolved java method impl is in virtual method table:::if->hotspotResolved->vtableIndex->getVtableIndex->return->hotspotResolved->getVtableLength->return
HotSpotResolvedJavaMethodImpl#getVtableIndex(HotSpotResolvedObjectTypeImpl)::: hot spot resolved java method impl get vtable index:::if->holder->isLinked->return->config->if->holder->isInterface->if->resolved->isInterface->resolved->isLinked->return->config->return->getVtableIndexForInterfaceMethod->return->getVtableIndex
HotSpotResolvedJavaMethodImpl#getVtableIndex():::Returns this method's virtual table index.:::config->config->result->UNSAFE->getMetaspaceMethod->getInt->return
HotSpotResolvedJavaMethodImpl#getVtableIndexForInterfaceMethod(ResolvedJavaType)::: hot spot resolved java method impl get vtable index for interface method:::hotspotType->return->compilerToVM->getVtableIndexForInterfaceMethod
HotSpotResolvedJavaMethodImpl#getSpeculationLog()::: hot spot resolved java method impl get speculation log:::address->compilerToVM->getFailedSpeculationsAddress->return->new->HotSpotSpeculationLog
HotSpotResolvedJavaMethodImpl#intrinsicId()::: hot spot resolved java method impl intrinsic id:::config->config->return->UNSAFE->getMetaspaceMethod->getChar
HotSpotResolvedJavaMethodImpl#isIntrinsicCandidate()::: hot spot resolved java method impl is intrinsic candidate:::return->getFlags->config
HotSpotResolvedJavaMethodImpl#allocateCompileId(int):::Allocates a compile id for this method by asking the VM for one.:::return->compilerToVM->allocateCompileId
HotSpotResolvedJavaMethodImpl#hasCodeAtLevel(int, int)::: hot spot resolved java method impl has code at level:::if->config->return->hasCompiledCodeAtLevel->return->compilerToVM->hasCompiledCodeForOSR
HotSpotResolvedJavaMethodImpl#methodIdnum()::: hot spot resolved java method impl method idnum:::return->UNSAFE->getConstMethod->config->getChar
HotSpotResolvedJavaType#equals(Object)::: hot spot resolved java type equals:::
HotSpotResolvedJavaType#hashCode()::: hot spot resolved java type hash code:::return->getName->hashCode
HotSpotResolvedJavaType#getJavaMirror()::: hot spot resolved java type get java mirror:::
HotSpotResolvedJavaType#getArrayClass()::: hot spot resolved java type get array class:::if->runtime->getArrayType->return
HotSpotResolvedObjectType#getArrayClass()::: hot spot resolved object type get array class:::
HotSpotResolvedObjectType#getComponentType()::: hot spot resolved object type get component type:::
HotSpotResolvedObjectType#findLeafConcreteSubtype()::: hot spot resolved object type find leaf concrete subtype:::
HotSpotResolvedObjectType#getSuperclass()::: hot spot resolved object type get superclass:::
HotSpotResolvedObjectType#getInterfaces()::: hot spot resolved object type get interfaces:::
HotSpotResolvedObjectType#getSupertype()::: hot spot resolved object type get supertype:::
HotSpotResolvedObjectType#findLeastCommonAncestor(ResolvedJavaType)::: hot spot resolved object type find least common ancestor:::
HotSpotResolvedObjectType#isPrimitive()::: hot spot resolved object type is primitive:::return
HotSpotResolvedObjectType#getJavaKind()::: hot spot resolved object type get java kind:::return
HotSpotResolvedObjectType#getConstantPool()::: hot spot resolved object type get constant pool:::
HotSpotResolvedObjectType#instanceSize():::Gets the instance size of this type:::
HotSpotResolvedObjectType#getVtableLength()::: hot spot resolved object type get vtable length:::
HotSpotResolvedObjectType#findUniqueConcreteMethod(ResolvedJavaMethod)::: hot spot resolved object type find unique concrete method:::
HotSpotResolvedObjectType#isDefinitelyResolvedWithRespectTo(ResolvedJavaType):::Performs a fast-path check that this type is resolved in the context of a given accessing class:::
HotSpotResolvedObjectType#klass():::Gets the metaspace Klass boxed in a JavaConstant.:::
HotSpotResolvedObjectType#isPrimaryType()::: hot spot resolved object type is primary type:::
HotSpotResolvedObjectType#superCheckOffset()::: hot spot resolved object type super check offset:::
HotSpotResolvedObjectType#prototypeMarkWord()::: hot spot resolved object type prototype mark word:::
HotSpotResolvedObjectType#layoutHelper()::: hot spot resolved object type layout helper:::
HotSpotResolvedObjectType#getEnclosingType()::: hot spot resolved object type get enclosing type:::
HotSpotResolvedObjectType#getClassInitializer()::: hot spot resolved object type get class initializer:::
HotSpotResolvedObjectType#isAnonymous()::: hot spot resolved object type is anonymous:::
HotSpotResolvedObjectType#getFingerprint():::Gets the fingerprint for this type.:::
HotSpotResolvedObjectTypeImpl#getJavaLangObject()::: hot spot resolved object type impl get java lang object:::return->runtime->getJavaLangObject
HotSpotResolvedObjectTypeImpl#fromMetaspace(long, String):::Gets the JVMCI mirror from a HotSpot type:::return->runtime->fromMetaspace
HotSpotResolvedObjectTypeImpl#getMetaspaceKlass():::Gets the metaspace Klass for this type.:::metaspacePointer->getMetaspacePointer->if->throw->new->NullPointerException->return
HotSpotResolvedObjectTypeImpl#getMetaspacePointer()::: hot spot resolved object type impl get metaspace pointer:::return
HotSpotResolvedObjectTypeImpl#getModifiers()::: hot spot resolved object type impl get modifiers:::if->isArray->return->getElementalType->getModifiers->else->return->getAccessFlags->jvmClassModifiers
HotSpotResolvedObjectTypeImpl#getAccessFlags()::: hot spot resolved object type impl get access flags:::config->config->return->UNSAFE->getMetaspaceKlass->getInt
HotSpotResolvedObjectTypeImpl#getComponentType()::: hot spot resolved object type impl get component type:::return->runtime->getComponentType
HotSpotResolvedObjectTypeImpl#findLeafConcreteSubtype()::: hot spot resolved object type impl find leaf concrete subtype:::if->isLeaf->return->new->AssumptionResult<>->config->config->if->isArray->elementalType->getElementalType->elementType->elementalType->findLeafConcreteSubtype->if->elementType->getResult->equals->result->new->AssumptionResult<>->result->add->return->return->else->if->isInterface->implementor->getSingleImplementor->if->implementor->equals->return->if->implementor->isAbstract->implementor->isLeafClass->leafConcreteSubtype->implementor->findLeafConcreteSubtype->if->newResult->leafConcreteSubtype->getResult->new->ConcreteSubtype->new->AssumptionResult<>->newResult->add->return->return->return->concreteSubtype->else->type->while->type->isAbstract->subklass->type->getSubklass->if->UNSAFE->subklass->getMetaspaceKlass->getAddress->return->if->type->isAbstract->type->isInterface->type->isLeafClass->return->if->this->isAbstract->return->concreteSubtype->else->return->new->LeafType->new->AssumptionResult<>
HotSpotResolvedObjectTypeImpl#concreteSubtype(HotSpotResolvedObjectTypeImpl)::: hot spot resolved object type impl concrete subtype:::if->type->isLeaf->return->new->ConcreteSubtype->new->AssumptionResult<>->else->return->new->LeafType->new->ConcreteSubtype->new->AssumptionResult<>
HotSpotResolvedObjectTypeImpl#isLeafClass():::Returns if type type is a leaf class:::return->UNSAFE->this->getMetaspaceKlass->config->getLong
HotSpotResolvedObjectTypeImpl#getSubklass():::Returns the Klass::_subklass field of the underlying metaspace klass for the given type type.:::return->compilerToVM->config->getResolvedJavaType
HotSpotResolvedObjectTypeImpl#getSuperclass()::: hot spot resolved object type impl get superclass:::if->isInterface->return->javaLangObject->runtime->getJavaLangObject->if->this->equals->return->if->isArray->return->if->compilerToVM->config->getResolvedJavaType->return
HotSpotResolvedObjectTypeImpl#getInterfaces()::: hot spot resolved object type impl get interfaces:::if->if->isArray->types->new->HotSpotResolvedObjectTypeImplArr->runtime->getJavaLangCloneable->runtime->getJavaLangSerializable->else->runtime->getInterfaces->return
HotSpotResolvedObjectTypeImpl#getSingleImplementor()::: hot spot resolved object type impl get single implementor:::if->isInterface->throw->new->JVMCIError->return->compilerToVM->getImplementor
HotSpotResolvedObjectTypeImpl#getSupertype()::: hot spot resolved object type impl get supertype:::if->isArray->componentType->getComponentType->if->componentType->getJavaLangObject->equals->componentType->isPrimitive->return->getJavaLangObject->supertype->getSupertype->return->supertype->getArrayClass->if->isInterface->return->getJavaLangObject->return->getSuperclass
HotSpotResolvedObjectTypeImpl#findLeastCommonAncestor(ResolvedJavaType)::: hot spot resolved object type impl find least common ancestor:::if->otherType->isPrimitive->return->else->t1->t2->while->if->t1->isAssignableFrom->return->if->t2->isAssignableFrom->return->t1->getSupertype->t2->getSupertype
HotSpotResolvedObjectTypeImpl#hasFinalizableSubclass()::: hot spot resolved object type impl has finalizable subclass:::if->compilerToVM->hasFinalizableSubclass->return->new->NoFinalizableSubclass->new->AssumptionResult<>->return->new->AssumptionResult<>
HotSpotResolvedObjectTypeImpl#hasFinalizer()::: hot spot resolved object type impl has finalizer:::return->getAccessFlags->config
HotSpotResolvedObjectTypeImpl#isArray()::: hot spot resolved object type impl is array:::return->layoutHelper->config
HotSpotResolvedObjectTypeImpl#isEnum()::: hot spot resolved object type impl is enum:::superclass->getSuperclass->return->superclass->runtime->getJavaLangEnum->equals
HotSpotResolvedObjectTypeImpl#isInitialized()::: hot spot resolved object type impl is initialized:::return->isArray->getInitState->config
HotSpotResolvedObjectTypeImpl#isLinked()::: hot spot resolved object type impl is linked:::return->isArray->getInitState->config
HotSpotResolvedObjectTypeImpl#getInitState():::Returns the value of the state field InstanceKlass::_init_state of the metaspace klass.:::return->UNSAFE->getMetaspaceKlass->config->getByte
HotSpotResolvedObjectTypeImpl#initialize()::: hot spot resolved object type impl initialize:::if->isInitialized->runtime->ensureInitialized
HotSpotResolvedObjectTypeImpl#isInstance(JavaConstant)::: hot spot resolved object type impl is instance:::if->obj->getJavaKind->obj->isNull->return->runtime->isInstance->return
HotSpotResolvedObjectTypeImpl#isInstanceClass()::: hot spot resolved object type impl is instance class:::return->isArray->isInterface
HotSpotResolvedObjectTypeImpl#isInterface()::: hot spot resolved object type impl is interface:::return->getAccessFlags->config
HotSpotResolvedObjectTypeImpl#isAssignableFrom(ResolvedJavaType)::: hot spot resolved object type impl is assignable from:::if->otherType->return->runtime->isAssignableFrom->return
HotSpotResolvedObjectTypeImpl#getHostClass()::: hot spot resolved object type impl get host class:::if->isArray->return->return->compilerToVM->getHostClass
HotSpotResolvedObjectTypeImpl#isJavaLangObject()::: hot spot resolved object type impl is java lang object:::return->getName->equals
HotSpotResolvedObjectTypeImpl#getJavaKind()::: hot spot resolved object type impl get java kind:::return
HotSpotResolvedObjectTypeImpl#resolveMethod(ResolvedJavaMethod, ResolvedJavaType)::: hot spot resolved object type impl resolve method:::if->isInterface->return->if->method->isConcrete->method->getDeclaringClass->equals->method->isPublic->method->getDeclaringClass->isSignaturePolymorphicHolder->return->if->method->getDeclaringClass->isAssignableFrom->return->hotSpotMethod->hotSpotCallerType->return->compilerToVM->resolveMethod
HotSpotResolvedObjectTypeImpl#getConstantPool()::: hot spot resolved object type impl get constant pool:::if->isArray->UNSAFE->getMetaspaceKlass->config->getAddress->constantPool->getMetaspaceConstantPool->compilerToVM->getConstantPool->return
HotSpotResolvedObjectTypeImpl#instanceSize():::Gets the instance size of this type:::config->config->layoutHelper->layoutHelper->size->needsSlowPath->return
HotSpotResolvedObjectTypeImpl#layoutHelper()::: hot spot resolved object type impl layout helper:::config->config->return->UNSAFE->getMetaspaceKlass->getInt
HotSpotResolvedObjectTypeImpl#getFingerprint()::: hot spot resolved object type impl get fingerprint:::return->compilerToVM->getMetaspaceKlass->getFingerprint
HotSpotResolvedObjectTypeImpl#createMethod(long)::: hot spot resolved object type impl create method:::metaspaceMethod->UNSAFE->getLong->if->new->HotSpotResolvedJavaMethodImplArr->i->for->if->new->HashMap<>->lookupResult->methodCacheHashMap->get->if->newMethod->new->HotSpotResolvedJavaMethodImpl->methodCacheHashMap->put->return->else->return
HotSpotResolvedObjectTypeImpl#getVtableLength()::: hot spot resolved object type impl get vtable length:::config->config->if->isInterface->isArray->return->config->baseVtableLength->result->UNSAFE->getMetaspaceKlass->getInt->return
HotSpotResolvedObjectTypeImpl#createField(JavaType, long, int, int)::: hot spot resolved object type impl create field:::return->new->HotSpotResolvedJavaFieldImpl
HotSpotResolvedObjectTypeImpl#findUniqueConcreteMethod(ResolvedJavaMethod)::: hot spot resolved object type impl find unique concrete method:::hmethod->declaredHolder->hmethod->getDeclaringClass->if->declaredHolder->isAssignableFrom->this->isArray->this->equals->isLinked->isInterface->if->hmethod->canBeStaticallyBound->return->new->AssumptionResult<>->result->hmethod->uniqueConcreteMethod->if->return->new->ConcreteMethod->new->AssumptionResult<>->return->resolvedMethod->resolveMethod->if->return->if->resolvedMethod->canBeStaticallyBound->return->new->AssumptionResult<>->result->resolvedMethod->uniqueConcreteMethod->if->return->new->ConcreteMethod->new->AssumptionResult<>->return
HotSpotResolvedObjectTypeImpl#createFieldInfo(int)::: hot spot resolved object type impl create field info:::return->new->FieldInfo
HotSpotResolvedObjectTypeImpl#ensureInitialized()::: hot spot resolved object type impl ensure initialized:::runtime->ensureInitialized
HotSpotResolvedObjectTypeImpl#equals(Object)::: hot spot resolved object type impl equals:::if->return->if->return->that->return->getMetaspaceKlass->that->getMetaspaceKlass
HotSpotResolvedObjectTypeImpl#getJavaMirror()::: hot spot resolved object type impl get java mirror:::return
HotSpotResolvedObjectTypeImpl.FieldInfo#getAccessFlags()::: field info get access flags:::return->config->readFieldSlot
HotSpotResolvedObjectTypeImpl.FieldInfo#getNameIndex()::: field info get name index:::return->config->readFieldSlot
HotSpotResolvedObjectTypeImpl.FieldInfo#getSignatureIndex()::: field info get signature index:::return->config->readFieldSlot
HotSpotResolvedObjectTypeImpl.FieldInfo#getOffset()::: field info get offset:::config->config->lowPacked->readFieldSlot->highPacked->readFieldSlot->offset->return
HotSpotResolvedObjectTypeImpl.FieldInfo#readFieldSlot(int):::Helper method to read an entry (slot) from the field array:::offset->return->UNSAFE->getChar
HotSpotResolvedObjectTypeImpl.FieldInfo#getName():::Returns the name of this field as a String:::nameIndex->getNameIndex->return->isInternal->config->symbolAt->getConstantPool->lookupUtf8
HotSpotResolvedObjectTypeImpl.FieldInfo#getSignature():::Returns the signature of this field as String:::signatureIndex->getSignatureIndex->return->isInternal->config->symbolAt->getConstantPool->lookupUtf8
HotSpotResolvedObjectTypeImpl.FieldInfo#getType()::: field info get type:::signature->getSignature->return->runtime->lookupType
HotSpotResolvedObjectTypeImpl.FieldInfo#isInternal()::: field info is internal:::return->getAccessFlags->config
HotSpotResolvedObjectTypeImpl.FieldInfo#isStatic()::: field info is static:::return->Modifier->getAccessFlags->isStatic
HotSpotResolvedObjectTypeImpl.FieldInfo#hasGenericSignature()::: field info has generic signature:::return->getAccessFlags->config
HotSpotResolvedObjectTypeImpl#getInstanceFields(boolean)::: hot spot resolved object type impl get instance fields:::if->if->isArray->isInterface->else->prepend->if->getSuperclass->getSuperclass->getInstanceFields->getFields->if->getSuperclass->superClassFieldCount->getSuperclass->getInstanceFields->if->return->else->if->result->new->HotSpotResolvedJavaFieldArr->System->arraycopy->return->else->return
HotSpotResolvedObjectTypeImpl#getStaticFields()::: hot spot resolved object type impl get static fields:::if->isArray->return->new->HotSpotResolvedJavaFieldArr->else->return->getFields
HotSpotResolvedObjectTypeImpl#getFields(boolean, HotSpotResolvedJavaField[]):::Gets the instance or static fields of this class.:::config->config->metaspaceFields->UNSAFE->getMetaspaceKlass->getAddress->metaspaceFieldsLength->UNSAFE->getInt->resultCount->index->for->i->if->return->prependLength->result->new->HotSpotResolvedJavaFieldArr->if->System->arraycopy->resultIndex->for->i->return
HotSpotResolvedObjectTypeImpl#getSourceFileName()::: hot spot resolved object type impl get source file name:::config->config->sourceFileNameIndex->UNSAFE->getMetaspaceKlass->getChar->if->return->return->getConstantPool->lookupUtf8
HotSpotResolvedObjectTypeImpl#getAnnotations()::: hot spot resolved object type impl get annotations:::return->runtime->getAnnotations
HotSpotResolvedObjectTypeImpl#getDeclaredAnnotations()::: hot spot resolved object type impl get declared annotations:::return->runtime->getDeclaredAnnotations
HotSpotResolvedObjectTypeImpl#getAnnotation(Class)::: hot spot resolved object type impl get annotation:::return->runtime->getAnnotation
HotSpotResolvedObjectTypeImpl#isDefinitelyResolvedWithRespectTo(ResolvedJavaType):::Performs a fast-path check that this type is resolved in the context of a given accessing class:::elementType->getElementalType->if->elementType->isPrimitive->return->if->elementType->getName->startsWith->runtime->getJavaLangObject->hasSameClassLoader->return->otherMirror->return->hasSameClassLoader
HotSpotResolvedObjectTypeImpl#hasSameClassLoader(HotSpotResolvedObjectTypeImpl)::: hot spot resolved object type impl has same class loader:::return->getMetaspaceKlass->config->getAddress->otherMirror->getMetaspaceKlass->config->getAddress
HotSpotResolvedObjectTypeImpl#resolve(ResolvedJavaType)::: hot spot resolved object type impl resolve:::if->requireNonNull->isDefinitelyResolvedWithRespectTo->return->accessingType->return->runtime->getName->lookupType
HotSpotResolvedObjectTypeImpl#klass():::Gets the metaspace Klass boxed in a JavaConstant.:::return->HotSpotMetaspaceConstantImpl->forMetaspaceObject
HotSpotResolvedObjectTypeImpl#isPrimaryType()::: hot spot resolved object type impl is primary type:::return->config->superCheckOffset
HotSpotResolvedObjectTypeImpl#superCheckOffset()::: hot spot resolved object type impl super check offset:::config->config->return->UNSAFE->getMetaspaceKlass->getInt
HotSpotResolvedObjectTypeImpl#prototypeMarkWord()::: hot spot resolved object type impl prototype mark word:::config->config->if->isArray->return->config->arrayPrototypeMarkWord->else->return->UNSAFE->getMetaspaceKlass->getAddress
HotSpotResolvedObjectTypeImpl#findInstanceFieldWithOffset(long, JavaKind)::: hot spot resolved object type impl find instance field with offset:::declaredFields->getInstanceFields->return->findFieldWithOffset
HotSpotResolvedObjectTypeImpl#findStaticFieldWithOffset(long, JavaKind)::: hot spot resolved object type impl find static field with offset:::declaredFields->getStaticFields->return->findFieldWithOffset
HotSpotResolvedObjectTypeImpl#findFieldWithOffset(long, JavaKind, ResolvedJavaField[])::: hot spot resolved object type impl find field with offset:::foreach->resolvedFieldOffset->field->getOffset->if->ByteOrder->nativeOrder->expectedEntryKind->isPrimitive->expectedEntryKind->equals->field->getJavaKind->isPrimitive->field->getJavaKind->getByteCount->Math->field->getJavaKind->getByteCount->expectedEntryKind->getByteCount->min->if->return->return
HotSpotResolvedObjectTypeImpl#isLocal()::: hot spot resolved object type impl is local:::return->runtime->isLocalClass
HotSpotResolvedObjectTypeImpl#isMember()::: hot spot resolved object type impl is member:::return->runtime->isMemberClass
HotSpotResolvedObjectTypeImpl#getEnclosingType()::: hot spot resolved object type impl get enclosing type:::return->runtime->getEnclosingClass
HotSpotResolvedObjectTypeImpl#getDeclaredConstructors()::: hot spot resolved object type impl get declared constructors:::return->runtime->getDeclaredConstructors
HotSpotResolvedObjectTypeImpl#getDeclaredMethods()::: hot spot resolved object type impl get declared methods:::return->runtime->getDeclaredMethods
HotSpotResolvedObjectTypeImpl#getClassInitializer()::: hot spot resolved object type impl get class initializer:::if->isArray->return->compilerToVM->getClassInitializer->return
HotSpotResolvedObjectTypeImpl#toString()::: hot spot resolved object type impl to string:::return->getName
HotSpotResolvedObjectTypeImpl#lookupType(UnresolvedJavaType, boolean)::: hot spot resolved object type impl lookup type:::javaType->HotSpotJVMCIRuntime->runtime->unresolvedJavaType->getName->lookupType->if->return->return
HotSpotResolvedObjectTypeImpl#resolveField(UnresolvedJavaField, ResolvedJavaType)::: hot spot resolved object type impl resolve field:::foreach->getInstanceFields->if->field->getName->unresolvedJavaField->getName->equals->return->foreach->getStaticFields->if->field->getName->unresolvedJavaField->getName->equals->return->throw->unresolvedJavaField->toString->new->InternalError
HotSpotResolvedObjectTypeImpl#isCloneableWithAllocation()::: hot spot resolved object type impl is cloneable with allocation:::return->getAccessFlags->config
HotSpotResolvedObjectTypeImpl#readFieldValue(HotSpotResolvedJavaField, boolean)::: hot spot resolved object type impl read field value:::return->runtime->readFieldValue
HotSpotResolvedObjectTypeImpl#getMiscFlags()::: hot spot resolved object type impl get misc flags:::return->UNSAFE->getMetaspaceKlass->config->getInt
HotSpotResolvedObjectTypeImpl#isAnonymous()::: hot spot resolved object type impl is anonymous:::return->getMiscFlags->config
HotSpotResolvedPrimitiveType#forKind(JavaKind)::: hot spot resolved primitive type for kind:::primitive->kind->getBasicType->return
HotSpotResolvedPrimitiveType#fromMetaspace(HotSpotObjectConstantImpl, char)::: hot spot resolved primitive type from metaspace:::kind->JavaKind->fromPrimitiveOrVoidTypeChar->if->getBasicType->new->HotSpotResolvedPrimitiveTypeArr->result->new->HotSpotResolvedPrimitiveType->kind->getBasicType->return
HotSpotResolvedPrimitiveType#getModifiers()::: hot spot resolved primitive type get modifiers:::return
HotSpotResolvedPrimitiveType#getArrayClass()::: hot spot resolved primitive type get array class:::if->return->return->super->getArrayClass
HotSpotResolvedPrimitiveType#getElementalType()::: hot spot resolved primitive type get elemental type:::return
HotSpotResolvedPrimitiveType#getComponentType()::: hot spot resolved primitive type get component type:::return
HotSpotResolvedPrimitiveType#getSuperclass()::: hot spot resolved primitive type get superclass:::return
HotSpotResolvedPrimitiveType#getInterfaces()::: hot spot resolved primitive type get interfaces:::return->new->ResolvedJavaTypeArr
HotSpotResolvedPrimitiveType#getSingleImplementor()::: hot spot resolved primitive type get single implementor:::throw->new->JVMCIError
HotSpotResolvedPrimitiveType#findLeastCommonAncestor(ResolvedJavaType)::: hot spot resolved primitive type find least common ancestor:::return
HotSpotResolvedPrimitiveType#hasFinalizableSubclass()::: hot spot resolved primitive type has finalizable subclass:::return->new->AssumptionResult<>
HotSpotResolvedPrimitiveType#hasFinalizer()::: hot spot resolved primitive type has finalizer:::return
HotSpotResolvedPrimitiveType#isArray()::: hot spot resolved primitive type is array:::return
HotSpotResolvedPrimitiveType#isEnum()::: hot spot resolved primitive type is enum:::return
HotSpotResolvedPrimitiveType#isPrimitive()::: hot spot resolved primitive type is primitive:::return
HotSpotResolvedPrimitiveType#isInitialized()::: hot spot resolved primitive type is initialized:::return
HotSpotResolvedPrimitiveType#isLinked()::: hot spot resolved primitive type is linked:::return
HotSpotResolvedPrimitiveType#isInstance(JavaConstant)::: hot spot resolved primitive type is instance:::return
HotSpotResolvedPrimitiveType#isInstanceClass()::: hot spot resolved primitive type is instance class:::return
HotSpotResolvedPrimitiveType#isInterface()::: hot spot resolved primitive type is interface:::return
HotSpotResolvedPrimitiveType#isAssignableFrom(ResolvedJavaType)::: hot spot resolved primitive type is assignable from:::return->other->equals
HotSpotResolvedPrimitiveType#getHostClass()::: hot spot resolved primitive type get host class:::return
HotSpotResolvedPrimitiveType#getJavaKind()::: hot spot resolved primitive type get java kind:::return
HotSpotResolvedPrimitiveType#isJavaLangObject()::: hot spot resolved primitive type is java lang object:::return
HotSpotResolvedPrimitiveType#resolveMethod(ResolvedJavaMethod, ResolvedJavaType)::: hot spot resolved primitive type resolve method:::return
HotSpotResolvedPrimitiveType#toString()::: hot spot resolved primitive type to string:::return
HotSpotResolvedPrimitiveType#findLeafConcreteSubtype()::: hot spot resolved primitive type find leaf concrete subtype:::return->new->AssumptionResult<>
HotSpotResolvedPrimitiveType#findUniqueConcreteMethod(ResolvedJavaMethod)::: hot spot resolved primitive type find unique concrete method:::return
HotSpotResolvedPrimitiveType#getInstanceFields(boolean)::: hot spot resolved primitive type get instance fields:::return->new->ResolvedJavaFieldArr
HotSpotResolvedPrimitiveType#getStaticFields()::: hot spot resolved primitive type get static fields:::return->new->ResolvedJavaFieldArr
HotSpotResolvedPrimitiveType#getAnnotations()::: hot spot resolved primitive type get annotations:::return->new->AnnotationArr
HotSpotResolvedPrimitiveType#getDeclaredAnnotations()::: hot spot resolved primitive type get declared annotations:::return->new->AnnotationArr
HotSpotResolvedPrimitiveType#getAnnotation(Class)::: hot spot resolved primitive type get annotation:::return
HotSpotResolvedPrimitiveType#resolve(ResolvedJavaType)::: hot spot resolved primitive type resolve:::requireNonNull->return
HotSpotResolvedPrimitiveType#initialize()::: hot spot resolved primitive type initialize:::
HotSpotResolvedPrimitiveType#findInstanceFieldWithOffset(long, JavaKind)::: hot spot resolved primitive type find instance field with offset:::return
HotSpotResolvedPrimitiveType#getSourceFileName()::: hot spot resolved primitive type get source file name:::throw->JVMCIError->unimplemented
HotSpotResolvedPrimitiveType#isLocal()::: hot spot resolved primitive type is local:::return
HotSpotResolvedPrimitiveType#isMember()::: hot spot resolved primitive type is member:::return
HotSpotResolvedPrimitiveType#getEnclosingType()::: hot spot resolved primitive type get enclosing type:::return
HotSpotResolvedPrimitiveType#getDeclaredConstructors()::: hot spot resolved primitive type get declared constructors:::return->new->ResolvedJavaMethodArr
HotSpotResolvedPrimitiveType#getDeclaredMethods()::: hot spot resolved primitive type get declared methods:::return->new->ResolvedJavaMethodArr
HotSpotResolvedPrimitiveType#getClassInitializer()::: hot spot resolved primitive type get class initializer:::return
HotSpotResolvedPrimitiveType#isCloneableWithAllocation()::: hot spot resolved primitive type is cloneable with allocation:::return
HotSpotResolvedPrimitiveType#equals(Object)::: hot spot resolved primitive type equals:::if->return->that->return
HotSpotResolvedPrimitiveType#getJavaMirror()::: hot spot resolved primitive type get java mirror:::return->runtime->getJavaMirror
HotSpotRuntimeStub#getMethod()::: hot spot runtime stub get method:::return
HotSpotRuntimeStub#isValid()::: hot spot runtime stub is valid:::return
HotSpotRuntimeStub#invalidate()::: hot spot runtime stub invalidate:::
HotSpotRuntimeStub#toString()::: hot spot runtime stub to string:::return->String->getAddress->format
HotSpotRuntimeStub#executeVarargs(Object...)::: hot spot runtime stub execute varargs:::throw->new->InternalError
HotSpotSentinelConstant#getJavaKind()::: hot spot sentinel constant get java kind:::return
HotSpotSentinelConstant#isNull()::: hot spot sentinel constant is null:::return
HotSpotSentinelConstant#isDefaultForKind()::: hot spot sentinel constant is default for kind:::return
HotSpotSentinelConstant#asBoxedPrimitive()::: hot spot sentinel constant as boxed primitive:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#asInt()::: hot spot sentinel constant as int:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#asBoolean()::: hot spot sentinel constant as boolean:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#asLong()::: hot spot sentinel constant as long:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#asFloat()::: hot spot sentinel constant as float:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#asDouble()::: hot spot sentinel constant as double:::throw->new->IllegalArgumentException
HotSpotSentinelConstant#toString()::: hot spot sentinel constant to string:::return->JavaConstant->toString
HotSpotSentinelConstant#toValueString()::: hot spot sentinel constant to value string:::return
HotSpotSentinelConstant#hashCode()::: hot spot sentinel constant hash code:::return
HotSpotSentinelConstant#equals(Object)::: hot spot sentinel constant equals:::return
HotSpotSignature#parseSignature(String, int)::: hot spot signature parse signature:::try->cur->first->do->signature->charAt->while->switch->while->signature->charAt->if->signature->charAt->throw->new->IllegalArgumentException->break->break->throw->signature->charAt->new->IllegalArgumentException->return->catch->throw->new->IllegalArgumentException->finally
HotSpotSignature#getParameterCount(boolean)::: hot spot signature get parameter count:::return->parameters->size
HotSpotSignature#getParameterKind(int)::: hot spot signature get parameter kind:::return->JavaKind->parameters->get->fromTypeString
HotSpotSignature#checkValidCache(ResolvedJavaType, ResolvedJavaType)::: hot spot signature check valid cache:::if->return->else->if->return->isDefinitelyResolvedWithRespectTo->return
HotSpotSignature#getUnresolvedOrPrimitiveType(HotSpotJVMCIRuntime, String)::: hot spot signature get unresolved or primitive type:::if->name->length->kind->JavaKind->name->charAt->fromPrimitiveOrVoidTypeChar->return->runtime->getHostJVMCIBackend->getMetaAccess->kind->toJavaClass->lookupJavaType->return->UnresolvedJavaType->create
HotSpotSignature#getParameterType(int, ResolvedJavaType)::: hot spot signature get parameter type:::if->return->parameters->get->getUnresolvedOrPrimitiveType->if->parameters->size->new->ResolvedJavaTypeArr->type->if->checkValidCache->result->runtime->parameters->get->lookupType->if->else->return->return
HotSpotSignature#toMethodDescriptor()::: hot spot signature to method descriptor:::return
HotSpotSignature#getReturnKind()::: hot spot signature get return kind:::return->JavaKind->fromTypeString
HotSpotSignature#getReturnType(ResolvedJavaType)::: hot spot signature get return type:::if->return->getUnresolvedOrPrimitiveType->if->checkValidCache->result->runtime->lookupType->if->else->return->return
HotSpotSignature#toString()::: hot spot signature to string:::return
HotSpotSignature#equals(Object)::: hot spot signature equals:::if->other->if->equals->return->return
HotSpotSignature#hashCode()::: hot spot signature hash code:::return->originalString->hashCode
HotSpotSpeculationEncoding#checkOpen()::: hot spot speculation encoding check open:::if->throw->new->IllegalArgumentException
HotSpotSpeculationEncoding#addByte(int)::: hot spot speculation encoding add byte:::checkOpen->try->dos->writeByte->catch->throw->new->InternalError->finally
HotSpotSpeculationEncoding#addShort(int)::: hot spot speculation encoding add short:::checkOpen->try->dos->writeShort->catch->throw->new->InternalError->finally
HotSpotSpeculationEncoding#addMethod(ResolvedJavaMethod)::: hot spot speculation encoding add method:::if->addNull->checkOpen->if->try->dos->getMetaspaceMethod->writeLong->catch->throw->new->InternalError->finally->else->throw->method->getClass->getName->method->format->new->IllegalArgumentException
HotSpotSpeculationEncoding#addType(ResolvedJavaType)::: hot spot speculation encoding add type:::if->addNull->checkOpen->if->try->dos->getMetaspaceKlass->writeLong->catch->throw->new->InternalError->finally->else->throw->type->getClass->getName->type->toClassName->new->IllegalArgumentException
HotSpotSpeculationEncoding#addString(String)::: hot spot speculation encoding add string:::if->addNull->checkOpen->try->dos->writeChars->catch->throw->new->InternalError->finally
HotSpotSpeculationEncoding#addInt(int)::: hot spot speculation encoding add int:::checkOpen->try->dos->writeInt->catch->throw->new->InternalError->finally
HotSpotSpeculationEncoding#addLong(long)::: hot spot speculation encoding add long:::checkOpen->try->dos->writeLong->catch->throw->new->InternalError->finally
HotSpotSpeculationEncoding#addNull(Object, int)::: hot spot speculation encoding add null:::if->addInt->return->return
HotSpotSpeculationEncoding#getByteArray():::Gets the final encoded byte array and closes this encoding such that any further attempts to update it result in an IllegalArgumentException.:::if->if->try->md->SHA1->clone->MessageDigest->getInstance->md->update->md->digest->catch->throw->new->InternalError->finally->else->if->return->Arrays->copyOf->return
HotSpotSpeculationLog#getFailedSpeculationsAddress():::Gets the address of the pointer to the native failed speculations list.:::if->synchronized->if->HotSpotJVMCIRuntime->getHostWordKind->getByteCount->allocateMemory->putAddress->c->new->LogCleaner->return
HotSpotSpeculationLog#addFailedSpeculation(Speculation):::Adds speculation to the native list of failed speculations:::return->compilerToVM->getFailedSpeculationsAddress->addFailedSpeculation
HotSpotSpeculationLog#managesFailedSpeculations():::Returns true if the value returned by #getFailedSpeculationsAddress() is only valid only as long as this object is alive, false otherwise.:::return
HotSpotSpeculationLog.HotSpotSpeculation#getEncoding()::: hot spot speculation get encoding:::return
HotSpotSpeculationLog.HotSpotSpeculation#toString()::: hot spot speculation to string:::indexAndLength->id->asLong->index->decodeIndex->length->decodeLength->return->String->Arrays->hashCode->getReason->format
HotSpotSpeculationLog#collectFailedSpeculations()::: hot spot speculation log collect failed speculations:::if->getLong->compilerToVM->getFailedSpeculations
HotSpotSpeculationLog#getFlattenedSpeculations(boolean)::: hot spot speculation log get flattened speculations:::if->return->if->newFailuresStart->collectFailedSpeculations->if->foreach->encoding->encode->if->contains->throw->new->BailoutException->size->foreach->result->new->byteArr->foreach->System->arraycopy->return
HotSpotSpeculationLog#maySpeculate(SpeculationReason)::: hot spot speculation log may speculate:::if->collectFailedSpeculations->if->encoding->encode->return->contains->return
HotSpotSpeculationLog#contains(byte[][], int, byte[])::: hot spot speculation log contains:::for->i->return
HotSpotSpeculationLog#encodeIndexAndLength(int, int)::: hot spot speculation log encode index and length:::return
HotSpotSpeculationLog#decodeIndex(long)::: hot spot speculation log decode index:::return
HotSpotSpeculationLog#decodeLength(long)::: hot spot speculation log decode length:::return
HotSpotSpeculationLog#speculate(SpeculationReason)::: hot spot speculation log speculate:::encoding->encode->id->if->new->ArrayList<>->new->ArrayList<>->JavaConstant->encodeIndexAndLength->forLong->speculations->add->speculationReasons->add->else->flattenedIndex->foreach->if->Arrays->equals->JavaConstant->encodeIndexAndLength->forLong->break->if->JavaConstant->encodeIndexAndLength->forLong->speculations->add->speculationReasons->add->return->new->HotSpotSpeculation
HotSpotSpeculationLog#encode(SpeculationReason)::: hot spot speculation log encode:::encoding->reason->HotSpotSpeculationEncoding->new->encode->result->encoding->getByteArray->if->throw->getName->reason->getClass->getName->new->IllegalArgumentException->return
HotSpotSpeculationLog#hasSpeculations()::: hot spot speculation log has speculations:::return
HotSpotSpeculationLog#lookupSpeculation(JavaConstant)::: hot spot speculation log lookup speculation:::if->constant->isDefaultForKind->return->flattenedIndex->constant->asLong->decodeIndex->index->foreach->if->reason->speculationReasons->get->return->new->HotSpotSpeculation->throw->new->IllegalArgumentException
HotSpotSpeculationLog#toString()::: hot spot speculation log to string:::buf->new->Formatter->buf->format->sep->if->for->i->buf->format->size->if->for->i->speculations->size->buf->Arrays->getFlattenedSpeculations->hashCode->format->return->buf->toString
HotSpotSpeculationLog.LogCleaner#doCleanup()::: log cleaner do cleanup:::pointer->getAddress->if->compilerToVM->releaseFailedSpeculations->freeMemory
HotSpotStackFrameReference#getStackPointer()::: hot spot stack frame reference get stack pointer:::return
HotSpotStackFrameReference#getFrameNumber()::: hot spot stack frame reference get frame number:::return
HotSpotStackFrameReference#getLocal(int)::: hot spot stack frame reference get local:::return
HotSpotStackFrameReference#isVirtual(int)::: hot spot stack frame reference is virtual:::return
HotSpotStackFrameReference#materializeVirtualObjects(boolean)::: hot spot stack frame reference materialize virtual objects:::compilerToVM->materializeVirtualObjects
HotSpotStackFrameReference#getBytecodeIndex()::: hot spot stack frame reference get bytecode index:::return
HotSpotStackFrameReference#getMethod()::: hot spot stack frame reference get method:::return
HotSpotStackFrameReference#isMethod(ResolvedJavaMethod)::: hot spot stack frame reference is method:::return->method->equals
HotSpotStackFrameReference#hasVirtualObjects()::: hot spot stack frame reference has virtual objects:::return
HotSpotStackFrameReference#toString()::: hot spot stack frame reference to string:::return->getMethod->Arrays->toString->Arrays->toString
HotSpotStackIntrospection#iterateFrames(ResolvedJavaMethod[], ResolvedJavaMethod[], int, InspectedFrameVisitor)::: hot spot stack introspection iterate frames:::compilerToVM->runtime->getCompilerToVM->return->compilerToVM->iterateFrames
HotSpotVMConfig#config():::Gets the configuration associated with the singleton HotSpotJVMCIRuntime.:::return->runtime->getConfig
HotSpotVMConfig#getHostArchitectureName():::Gets the host architecture name for the purpose of finding the corresponding HotSpotJVMCIBackendFactory backend.:::arch->Services->getSavedProperty->switch->return->return->return
HotSpotVMConfig#arrayPrototypeMarkWord():::See markOopDesc::prototype().:::return
HotSpotVMConfig#symbolAt(int):::Returns the symbol in the vmSymbols table at position index as a String.:::runtime->runtime->offset->return->runtime->getCompilerToVM->UNSAFE->getAddress->getSymbol
HotSpotVMConfig#baseVtableLength()::: hot spot config base vtable length:::return
HotSpotVMConfig#getCodeInstallResultDescription(int)::: hot spot config get code install result description:::if->return->if->return->if->return->if->return->if->return->return
HotSpotVMConfigAccess#getStore():::Gets the available configuration data.:::return
HotSpotVMConfigAccess#getAddress(String, Long):::Gets the address of a C++ symbol.:::entry->get->if->if->return->throw->keySet->missingEntry->return
HotSpotVMConfigAccess#getAddress(String):::Gets the address of a C++ symbol.:::return->getAddress
HotSpotVMConfigAccess#getConstant(String, Class, T):::Gets the value of a C++ constant.:::c->get->if->if->return->throw->keySet->missingEntry->return->type->convertValue->cast
HotSpotVMConfigAccess#getConstant(String, Class):::Gets the value of a C++ constant.:::return->getConstant
HotSpotVMConfigAccess#getFieldOffset(String, Class, String, T):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class, T, String[]):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class, String):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset(String, Class):::Gets the offset of a non-static C++ field.:::return->getFieldOffset0
HotSpotVMConfigAccess#getFieldOffset0(String, Class, T, String, String[])::: hot spot config access get field offset0:::entry->getField->if->return->if->throw->new->JVMCIError->if->return->type->convertValue->cast
HotSpotVMConfigAccess#getFieldAddress(String, String, Long):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldAddress(String, Long, String[]):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldAddress(String, String):::Gets the address of a static C++ field.:::return->getFieldAddress0
HotSpotVMConfigAccess#getFieldAddress0(String, Long, String, String[])::: hot spot config access get field address0:::entry->getField->if->return->if->throw->new->JVMCIError->if->return
HotSpotVMConfigAccess#getFieldValue(String, Class, String, T):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class, String):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class, T, String[]):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue(String, Class):::Gets the value of a static C++ field.:::return->getFieldValue0
HotSpotVMConfigAccess#getFieldValue0(String, Class, T, String, String[])::: hot spot config access get field value0:::entry->getField->if->return->if->throw->new->JVMCIError->if->return->type->convertValue->cast
HotSpotVMConfigAccess#getField(String, String, boolean):::Gets a C++ field.:::entry->get->if->if->return->throw->keySet->missingEntry->if->cppType->equals->throw->new->JVMCIError->return
HotSpotVMConfigAccess#getFlag(String, Class):::Gets a VM flag value.:::return->getFlag
HotSpotVMConfigAccess#getFlag(String, Class, T):::Gets a VM flag value.:::entry->get->value->cppType->if->getFlagValue->if->if->return->throw->keySet->missingEntry->else->else->return->type->convertValue->cast
HotSpotVMConfigAccess#missingEntry(String, String, Set)::: hot spot config access missing entry:::throw->keys->stream->sorted->Collectors->System->lineSeparator->joining->collect->new->JVMCIError
HotSpotVMConfigAccess#convertValue(String, Class, Object, String)::: hot spot config access convert value:::if->if->return->Boolean->valueOf->else->if->return->else->if->return->else->if->if->return->else->if->if->return->else->if->return->else->if->if->return->else->if->return->throw->value->getClass->getSimpleName->toType->getSimpleName->new->JVMCIError
HotSpotVMConfigStore#getAddresses():::Gets the C++ symbols whose addresses are exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getConstants():::Gets the C++ constants exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getFlags():::Gets the VM flags exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getFields():::Gets the C++ fields exposed by this object.:::return->Collections->unmodifiableMap
HotSpotVMConfigStore#getIntrinsics():::Gets the VM intrinsic descriptions exposed by this object.:::return->Collections->unmodifiableList
HotSpotVMConfigStore#toString()::: hot spot config store to string:::return->String->getClass->getSimpleName->vmFields->size->vmConstants->size->vmAddresses->size->vmFlags->size->vmIntrinsics->size->format
HotSpotVMConfigStore#printConfig()::: hot spot config store print config:::vm->fields->getFields->new->TreeMap<>->foreach->fields->values->if->field->isStatic->printConfigLine->else->value->toString->String->format->printConfigLine->flags->getFlags->new->TreeMap<>->foreach->flags->values->printConfigLine->addresses->getAddresses->new->TreeMap<>->foreach->addresses->entrySet->e->getKey->e->getValue->e->getValue->printConfigLine->constants->getConstants->new->TreeMap<>->foreach->constants->entrySet->e->getKey->e->getValue->e->getValue->printConfigLine->foreach->getIntrinsics->printConfigLine
HotSpotVMConfigStore#printConfigLine(CompilerToVM, String, Object...)::: hot spot config store print config line:::line->String->format->lineBytes->line->getBytes->vm->writeDebugOutput
HotSpotVMEventListener#notifyShutdown():::Notifies this client that the VM is shutting down.:::
HotSpotVMEventListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notify on successful install into the code cache.:::
HotSpotVMEventListener#notifyBootstrapFinished():::Notify on completion of a bootstrap.:::
IndirectHotSpotObjectConstantImpl#getHandle()::: indirect hot spot object constant impl get handle:::checkHandle->return
IndirectHotSpotObjectConstantImpl#checkHandle()::: indirect hot spot object constant impl check handle:::if->message->if->audit->baos->new->ByteArrayOutputStream->ps->new->PrintStream->ps->println->printStackTrace->ps->print->ps->flush->baos->toString->else->getPropertyName->throw->new->NullPointerException
IndirectHotSpotObjectConstantImpl#isValid()::: indirect hot spot object constant impl is valid:::return
IndirectHotSpotObjectConstantImpl#getType()::: indirect hot spot object constant impl get type:::checkHandle->return->super->getType
IndirectHotSpotObjectConstantImpl#clear(Object):::Clears the foreign object reference.:::checkHandle->CompilerToVM->compilerToVM->deleteGlobalHandle->if
IndirectHotSpotObjectConstantImpl#compress()::: indirect hot spot object constant impl compress:::return->new->IndirectHotSpotObjectConstantImpl
IndirectHotSpotObjectConstantImpl#uncompress()::: indirect hot spot object constant impl uncompress:::return->new->IndirectHotSpotObjectConstantImpl
IndirectHotSpotObjectConstantImpl#getIdentityHashCode()::: indirect hot spot object constant impl get identity hash code:::checkHandle->hash->if->runtime->getIdentityHashCode->if->return
MetaspaceHandleObject#getMetadataHandle()::: metaspace handle object get metadata handle:::
MetaspaceHandleObject#getMetaspacePointer()::: metaspace handle object get metaspace pointer:::return->getMetadataHandle->getLong
MetaspaceObject#getMetaspacePointer()::: metaspace object get metaspace pointer:::
SharedHotSpotSpeculationLog#toString()::: shared hot spot speculation log to string:::return->masterLog->toString
SharedLibraryJVMCIReflection#resolveObject(HotSpotObjectConstantImpl)::: shared library reflection resolve object:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#isInstance(HotSpotResolvedObjectTypeImpl, HotSpotObjectConstantImpl)::: shared library reflection is instance:::if->type->getType->return->holder->isAssignableFrom->return->runtime->isInstance
SharedLibraryJVMCIReflection#isAssignableFrom(HotSpotResolvedObjectTypeImpl, HotSpotResolvedObjectTypeImpl)::: shared library reflection is assignable from:::return->runtime->isAssignableFrom
SharedLibraryJVMCIReflection#isLocalClass(HotSpotResolvedObjectTypeImpl)::: shared library reflection is local class:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#isMemberClass(HotSpotResolvedObjectTypeImpl)::: shared library reflection is member class:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getEnclosingClass(HotSpotResolvedObjectTypeImpl)::: shared library reflection get enclosing class:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#readFieldValue(HotSpotResolvedObjectTypeImpl, HotSpotResolvedJavaField, boolean)::: shared library reflection read field value:::javaConstant->runtime->readFieldValue->if->return->return
SharedLibraryJVMCIReflection#readFieldValue(HotSpotObjectConstantImpl, HotSpotResolvedJavaField, boolean)::: shared library reflection read field value:::if->return->javaConstant->runtime->readFieldValue->if->return->return
SharedLibraryJVMCIReflection#equals(HotSpotObjectConstantImpl, HotSpotObjectConstantImpl)::: shared library reflection equals:::if->return->if->return->if->xd->yd->return->if->return->indirectX->indirectY->return->runtime->indirectX->getHandle->indirectY->getHandle->equals
SharedLibraryJVMCIReflection#getJavaMirror(HotSpotResolvedPrimitiveType)::: shared library reflection get java mirror:::return->runtime->getJavaMirror
SharedLibraryJVMCIReflection#getParameters(HotSpotResolvedJavaMethodImpl)::: shared library reflection get parameters:::return
SharedLibraryJVMCIReflection#getClassAnnotations(String)::: shared library reflection get class annotations:::throw->new->InternalError
SharedLibraryJVMCIReflection#getParameterAnnotations(String, String)::: shared library reflection get parameter annotations:::throw->new->InternalError
SharedLibraryJVMCIReflection#getAnnotations(HotSpotResolvedObjectTypeImpl)::: shared library reflection get annotations:::annotations->holder->getName->getClassAnnotations->return->new->AnnotationArr
SharedLibraryJVMCIReflection#getDeclaredAnnotations(HotSpotResolvedObjectTypeImpl)::: shared library reflection get declared annotations:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getAnnotation(HotSpotResolvedObjectTypeImpl, Class)::: shared library reflection get annotation:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getParameterAnnotations(HotSpotResolvedJavaMethodImpl)::: shared library reflection get parameter annotations:::annotations->javaMethod->getDeclaringClass->getName->javaMethod->getName->getParameterAnnotations->if->return->getParameterCount->new->AnnotationArrs->return
SharedLibraryJVMCIReflection#getGenericParameterTypes(HotSpotResolvedJavaMethodImpl)::: shared library reflection get generic parameter types:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getFieldAnnotations(HotSpotResolvedJavaFieldImpl)::: shared library reflection get field annotations:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getMethodAnnotations(HotSpotResolvedJavaMethodImpl)::: shared library reflection get method annotations:::annotations->getMethodAnnotationsInternal->return->new->AnnotationArr
SharedLibraryJVMCIReflection#getMethodAnnotation(HotSpotResolvedJavaMethodImpl, Class)::: shared library reflection get method annotation:::methodAnnotations->getMethodAnnotations->if->foreach->if->annotationClass->isInstance->return->annotationClass->cast->return
SharedLibraryJVMCIReflection#getMethodAnnotationsInternal(ResolvedJavaMethod)::: shared library reflection get method annotations internal:::throw->new->InternalError
SharedLibraryJVMCIReflection#getMethodDeclaredAnnotations(HotSpotResolvedJavaMethodImpl)::: shared library reflection get method declared annotations:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getFieldDeclaredAnnotations(HotSpotResolvedJavaFieldImpl)::: shared library reflection get field declared annotations:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getFieldAnnotation(HotSpotResolvedJavaFieldImpl, Class)::: shared library reflection get field annotation:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#getType(HotSpotObjectConstantImpl)::: shared library reflection get type:::if->theClass->getClass->try->name->theClass->getName->replace->type->runtime->lookupType->if->throw->new->InternalError->return->catch->throw->new->InternalError->finally->return->runtime->runtime->getConfig->getResolvedJavaType
SharedLibraryJVMCIReflection#asString(HotSpotObjectConstantImpl)::: shared library reflection as string:::if->return->runtime->asString->value->if->return->return
SharedLibraryJVMCIReflection#asJavaType(HotSpotObjectConstantImpl)::: shared library reflection as java type:::if->direct->if->javaClass->return->runtime->fromClass->if->return->convertUnknownValue->return->return->runtime->asJavaType
SharedLibraryJVMCIReflection#convertUnknownValue(Object)::: shared library reflection convert unknown value:::return
SharedLibraryJVMCIReflection#asObject(HotSpotObjectConstantImpl, Class)::: shared library reflection as object:::if->theObject->if->type->isInstance->return->type->cast->convertUnknownValue->return
SharedLibraryJVMCIReflection#asObject(HotSpotObjectConstantImpl, HotSpotResolvedJavaType)::: shared library reflection as object:::throw->new->HotSpotJVMCIUnsupportedOperationError
SharedLibraryJVMCIReflection#formatString(HotSpotObjectConstantImpl)::: shared library reflection format string:::if->direct->return->getClass->getName->indirect->if->indirect->isValid->return->return->object->getType->toJavaName
SharedLibraryJVMCIReflection#getLength(HotSpotObjectConstantImpl)::: shared library reflection get length:::if->direct->if->getClass->isArray->return->Array->getLength->return->length->runtime->getArrayLength->if->return->return
SharedLibraryJVMCIReflection#readArrayElement(HotSpotObjectConstantImpl, int)::: shared library reflection read array element:::result->runtime->readArrayElement->if->return->if->return->constant->JavaConstant->forBoxedPrimitive->if->throw->new->InternalError->return
SharedLibraryJVMCIReflection#forObject(Object)::: shared library reflection for object:::return->DirectHotSpotObjectConstantImpl->forObject
SharedLibraryJVMCIReflection#unboxPrimitive(HotSpotObjectConstantImpl)::: shared library reflection unbox primitive:::box->runtime->unboxPrimitive->return->JavaConstant->forBoxedPrimitive
SharedLibraryJVMCIReflection#boxPrimitive(JavaConstant)::: shared library reflection box primitive:::return->runtime->source->asBoxedPrimitive->boxPrimitive
SharedLibraryJVMCIReflection#getInt(HotSpotObjectConstantImpl, long)::: shared library reflection get int:::return->runtime->getInt
SharedLibraryJVMCIReflection#getByte(HotSpotObjectConstantImpl, long)::: shared library reflection get byte:::return->runtime->getByte
SharedLibraryJVMCIReflection#getShort(HotSpotObjectConstantImpl, long)::: shared library reflection get short:::return->runtime->getShort
SharedLibraryJVMCIReflection#getLong(HotSpotObjectConstantImpl, long)::: shared library reflection get long:::return->runtime->getLong
SharedLibraryJVMCIReflection#checkRead(HotSpotObjectConstantImpl, JavaKind, long, HotSpotResolvedObjectType)::: shared library reflection check read:::
TranslatedException#fillInStackTrace():::No need to record an initial stack trace since it will be manually overwritten.:::return
TranslatedException#printStackTrace(Throwable):::Prints a stack trace for throwable and returns true:::throwable->printStackTrace->return
TranslatedException#initCause(Throwable, Throwable)::: translated exception init cause:::if->try->throwable->initCause->catch->finally->return
TranslatedException#create(String, String, Throwable)::: translated exception create:::try->cls->Class->forName->if->if->return->new->InvocationTargetException->if->return->new->ExceptionInInitializerError->if->return->cls->getConstructor->newInstance->initCause->cls->getDeclaredConstructor->return->cls->getConstructor->newInstance->initCause->catch->if->className->getName->equals->return->new->TranslatedException->initCause->return->new->TranslatedException->initCause->finally
TranslatedException#encodeMessage(String):::Encodes an exception message to distinguish a null message from an empty message.:::return
TranslatedException#decodeMessage(String)::: translated exception decode message:::if->value->length->return->return->value->substring
TranslatedException#encodedString(String)::: translated exception encoded string:::return->Objects->toString->replace
TranslatedException#encodeThrowable(Throwable):::Encodes throwable including its stack and causes as a string:::try->enc->new->Formatter->throwables->new->ArrayList<>->for->current->current->getCause->Collections->reverse->foreach->enc->current->getClass->getName->current->getMessage->encodeMessage->encodedString->format->stackTrace->current->getStackTrace->if->new->StackTraceElementArr->enc->format->for->i->return->enc->toString->catch->try->return->e->getClass->getName->e->getMessage->encodedString->catch->return->finally->finally
TranslatedException#getStackTraceSuffix():::Gets the stack of the current thread without the frames between this call and the one just below the frame of the first method in CompilerToVM:::stack->new->Exception->getStackTrace->for->i->return->new->StackTraceElementArr
TranslatedException#decodeThrowable(String):::Decodes encodedThrowable into a TranslatedException.:::try->i->parts->encodedThrowable->split->cause->throwable->while->exceptionClassName->exceptionMessage->decodeMessage->create->stackTraceDepth->Integer->parseInt->suffix->getStackTraceSuffix->stackTrace->new->StackTraceElementArr->for->j->System->arraycopy->throwable->setStackTrace->return->catch->return->new->TranslatedException->finally
VMField#isStatic():::Determines if the represented field is static.:::return
VMField#toString()::: field to string:::val->type->contains->String->format->String->format->return->String->format
VMFlag#toString()::: flag to string:::return->String->format
VMIntrinsicMethod#equals(Object)::: intrinsic method equals:::if->that->if->return->return
VMIntrinsicMethod#hashCode()::: intrinsic method hash code:::return
VMIntrinsicMethod#toString()::: intrinsic method to string:::return->String->format

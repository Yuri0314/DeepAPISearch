SPARCControlFlow.StrategySwitchOp.SwitchClosure#conditionalJump(int, Condition):::This method caches the generated labels over two assembly passes to get information about branch lengths.:::label->if->conditionalLabels->size->new->Label->conditionalLabels->add->conditionalLabels->size->else->conditionalLabels->get->conditionalJump->return
SPARCDelayedControlTransfer#emitControlTransfer(CompilationResultBuilder, SPARCMacroAssembler):::This method must be called, to generate the control transfer, but without any Nop in the delay slot.:::
SPARCFrameMap#spillSlotSize(ValueKind):::In SPARC we have spill slots word aligned.:::return->kind->getPlatformKind->getSizeInBytes
SPARCMove#generateSimm13OffsetLoad(SPARCAddress, SPARCMacroAssembler, Register):::Guarantees that the given SPARCAddress given before is loadable by subsequent load/store instruction:::displacementOutOfBound->addr->getIndex->equals->SPARCAssembler->addr->getDisplacement->isSimm13->if->masm->addr->getDisplacement->setx->return->addr->getBase->new->SPARCAddress->else->return
SPARCMove#loadFromConstantTable(CompilationResultBuilder, SPARCMacroAssembler, Register, Constant, Register, SPARCDelayedControlTransfer):::This method creates a load from the constant section:::address->scratch->try->data->crb->createDataItem->size->data->getSize->if->masm->isImmediateConstantLoad->new->SPARCAddress->delaySlotInstruction->emitControlTransfer->crb->recordDataReferenceInCode->else->masm->getScratchRegister->sr->scratch->getRegister->crb->recordDataReferenceInCode->masm->sethix->new->SPARCAddress->masm->ld->return->catch->finally->if->scratch->close

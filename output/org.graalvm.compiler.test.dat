GraalTest#getMethod(String)::: graal test get method:::return->getClass->getMethod
GraalTest#getMethod(Class, String)::: graal test get method:::found->foreach->clazz->getMethods->if->m->getName->equals->Assert->assertNull->if->foreach->clazz->getDeclaredMethods->if->m->getName->equals->Assert->assertNull->if->return->else->throw->new->RuntimeException
GraalTest#getMethod(Class, String, Class...)::: graal test get method:::try->return->clazz->getMethod->catch->throw->Arrays->toString->new->RuntimeException->finally
GraalTest#assertDeepEquals(Object, Object):::Compares two given objects for Assert#assertEquals(Object, Object) equality:::assertDeepEquals
GraalTest#assertDeepEquals(String, Object, Object):::Compares two given objects for Assert#assertEquals(Object, Object) equality:::if->ulpsDelta->ulpsDelta->assertDeepEquals->else->equalFloatsOrDoublesDelta->assertDeepEquals
GraalTest#assertDeepEquals(String, Object, Object, double):::Compares two given values for equality, doing a recursive test if both values are arrays of the same type.:::if->expectedClass->expected->getClass->actualClass->actual->getClass->if->expectedClass->isArray->Assert->actual->getClass->assertEquals->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->new->ExactComparisonCriteria->arrayEquals->else->if->new->ComparisonCriteria->arrayEquals->else->Assert->fail->else->if->expectedClass->equals->actualClass->equals->Assert->assertEquals->else->if->expectedClass->equals->actualClass->equals->Assert->assertEquals->else->Assert->assertEquals->else->Assert->assertEquals
GraalTest#assertDeepEquals(String, Object, Object, int):::Compares two given values for equality, doing a recursive test if both values are arrays of the same type:::doubleUlpsDeltaCriteria->new->ComparisonCriteria->floatUlpsDeltaCriteria->new->ComparisonCriteria->if->expectedClass->expected->getClass->actualClass->actual->getClass->if->expectedClass->isArray->Assert->assertEquals->if->doubleUlpsDeltaCriteria->arrayEquals->return->else->if->floatUlpsDeltaCriteria->arrayEquals->return->else->if->expectedClass->equals->actualClass->equals->doubleUlpsDeltaCriteria->arrayEquals->return->else->if->expectedClass->equals->actualClass->equals->floatUlpsDeltaCriteria->arrayEquals->return->equalFloatsOrDoublesDelta->assertDeepEquals
GraalTest#assumeManagementLibraryIsLoadable()::: graal test assume management library is loadable:::try->GraalServices->getCurrentThreadAllocatedBytes->catch->throw->new->AssumptionViolatedException->finally
GraalTest#equalFloatsOrDoublesDelta():::Gets the value used by #assertDeepEquals(Object, Object) and #assertDeepEquals(String, Object, Object) for the maximum delta between two doubles or floats for which both numbers are still considered equal.:::return
GraalTest#ulpsDelta()::: graal test ulps delta:::return
GraalTest.MultiCauseAssertionError#printStackTrace(PrintStream)::: multi cause assertion error print stack trace:::super->printStackTrace->num->foreach->if->out->print->cause->printStackTrace
GraalTest.MultiCauseAssertionError#printStackTrace(PrintWriter)::: multi cause assertion error print stack trace:::super->printStackTrace->num->foreach->if->out->print->cause->printStackTrace
GraalTest#fail(String, Object...):::Fails a test with the given message.:::e->if->new->AssertionError->else->String->format->new->AssertionError->trace->e->getStackTrace->start->thisClassName->getName->while->getClassName->equals->getMethodName->equals->getMethodName->equals->e->Arrays->copyOfRange->setStackTrace->throw
GraalTest#assertTrue(String, boolean):::Asserts that a condition is true:::assertTrue
GraalTest#assertTrue(boolean):::Asserts that a condition is true:::assertTrue
GraalTest#assertFalse(String, boolean):::Asserts that a condition is false:::assertTrue
GraalTest#assertFalse(boolean):::Asserts that a condition is false:::assertTrue
GraalTest#assertTrue(boolean, String, Object...):::Asserts that a condition is true:::if->fail
GraalTest#assertFalse(boolean, String, Object...):::Asserts that a condition is false:::assertTrue
GraalTest#getDebugHandlersFactories():::Gets the DebugHandlersFactorys available for a DebugContext.:::return->Collections->emptyList
GraalTest#getDebugContext(OptionValues):::Gets a DebugContext object corresponding to options, creating a new one if none currently exists:::return->getDebugContext
GraalTest#getDebugContext(OptionValues, String, ResolvedJavaMethod):::Gets a DebugContext object corresponding to options, creating a new one if none currently exists:::cached->cachedDebugs->get->if->new->ArrayList<>->cachedDebugs->set->foreach->if->debug->getOptions->return->descr->if->else->method->getName->new->DebugContext.Description->debug->DebugContext->getDebugHandlersFactories->create->cached->add->return
GraalTest#afterTest()::: graal test after test:::cached->cachedDebugs->get->if->foreach->debug->close->debug->closeDumpHandlers
GraalTest#createTimeout(long, TimeUnit):::Creates a TestRule that applies a given timeout:::timeout->new->Timeout->try->return->new->DisableOnDebug->catch->return->finally
GraalTest#createTimeoutSeconds(int)::: graal test create timeout seconds:::return->createTimeout
GraalTest#createTimeoutMillis(long)::: graal test create timeout millis:::return->createTimeout
GraalTest#removeDirectory(Path):::Tries to recursively remove directory:::try->Files->new->SimpleFileVisitor<Path>->walkFileTree->catch->println->return->finally->return
JLModule#fromClass(Class)::: module from class:::try->return->getModuleMethod->invoke->new->JLModule->catch->throw->new->AssertionError->finally
JLModule#getUnnamedModuleFor(ClassLoader)::: module get unnamed module for:::try->return->getUnnamedModuleMethod->invoke->new->JLModule->catch->throw->new->AssertionError->finally
JLModule#exportAllPackagesTo(JLModule):::Exports all packages in this module to a given module.:::if->foreach->getPackages->if->isExported->addExports
JLModule#getPackages()::: module get packages:::try->return->getPackagesMethod->invoke->catch->throw->new->AssertionError->finally
JLModule#isExported(String)::: module is exported:::try->return->isExportedMethod->invoke->catch->throw->new->AssertionError->finally
JLModule#isExported(String, JLModule)::: module is exported:::try->return->isExported2Method->invoke->catch->throw->new->AssertionError->finally
JLModule#addExports(String, JLModule)::: module add exports:::try->addExportsMethod->invoke->catch->throw->new->AssertionError->finally
JLModule#unbox(Object)::: module unbox:::if->return->return
JLModule#uncheckedAddExports(Object, String, Object):::Updates module m1 to export a package to module m2:::try->modulesAddExportsMethod->unbox->unbox->invoke->catch->throw->new->AssertionError->finally
JLModule#openAllPackagesForReflectionTo(Class, Class):::Opens all packages in moduleMember's module for deep reflection (i.e., allow AccessibleObject#setAccessible(boolean) to be called for any class/method/field) by requestor's module.:::try->moduleToOpen->getModuleMethod->invoke->requestorModule->getModuleMethod->invoke->if->packages->getPackagesMethod->invoke->foreach->modulesAddOpensMethod->invoke->catch->throw->new->AssertionError->finally
JLModule#openForReflectionTo(Class, Class):::Opens declaringClass's package to allow a method declared in accessor to call AccessibleObject#setAccessible(boolean) on an AccessibleObject representing a field or method declared by declaringClass.:::try->moduleToOpen->getModuleMethod->invoke->accessorModule->getModuleMethod->invoke->if->modulesAddOpensMethod->declaringClass->getPackage->getName->invoke->catch->throw->new->AssertionError->finally
JLModule#exportPackageTo(Class, String, Class):::Exports the package named packageName declared in moduleMember's module to requestor's module.:::try->moduleToExport->getModuleMethod->invoke->requestorModule->getModuleMethod->invoke->if->modulesAddExportsMethod->invoke->catch->throw->new->AssertionError->finally
SubprocessUtil#getProcessCommandLine():::Gets the command line for the current process.:::processArgsFile->System->getenv->get->if->try->return->Files->new->File->toPath->readAllLines->catch->finally->else->Assume->assumeTrue->return
SubprocessUtil#quoteShellArg(String):::Reliably quote a string as a single shell command argument.:::if->arg->isEmpty->return->m->SAFE_SHELL_ARG->matcher->if->m->matches->return->return->arg->replace
SubprocessUtil#withoutDebuggerArguments(List):::Returns a new copy args with debugger arguments removed.:::result->args->size->new->ArrayList<>->foreach->if->arg->equals->arg->startsWith->result->add->return
SubprocessUtil#getVMCommandLine():::Gets the command line used to start the current Java VM, including all VM arguments, but not including the main class or any Java arguments:::args->getProcessCommandLine->if->return->else->index->findMainClassIndex->return->args->subList
SubprocessUtil#isJavaAgentAttached():::Detects whether a java agent is attached.:::return->SubprocessUtil->getVMCommandLine->stream->args->startsWith->anyMatch
SubprocessUtil.Subprocess#toString(String):::Returns the command followed by the output as a string.:::msg->new->Formatter->if->msg->format->msg->CollectionsUtil->String->valueOf->quoteShellArg->mapAndJoin->format->foreach->msg->format->if->msg->format->return->msg->toString
SubprocessUtil.Subprocess#toString():::Returns the command followed by the output as a string delimited by #DASHES_DELIMITER.:::return->toString
SubprocessUtil#java(List, String...):::Executes a Java subprocess.:::return->Arrays->asList->java
SubprocessUtil#java(List, List):::Executes a Java subprocess.:::return->javaHelper
SubprocessUtil#java(List, Map, String...):::Executes a Java subprocess.:::return->Arrays->asList->java
SubprocessUtil#java(List, Map, List):::Executes a Java subprocess.:::return->javaHelper
SubprocessUtil#javaHelper(List, Map, List):::Executes a Java subprocess.:::command->new->ArrayList<>->command->addAll->processBuilder->new->ProcessBuilder->if->processBuilderEnv->processBuilder->environment->processBuilderEnv->putAll->processBuilder->redirectErrorStream->process->processBuilder->start->stdout->process->getInputStream->new->InputStreamReader->new->BufferedReader->line->output->new->ArrayList<>->while->stdout->readLine->output->add->return->process->waitFor->new->Subprocess
SubprocessUtil#hasArg(String)::: subprocess util has arg:::if->optionName->equals->optionName->equals->return->if->if->optionName->equals->optionName->equals->optionName->equals->optionName->equals->optionName->equals->optionName->equals->optionName->equals->return->if->optionName->startsWith->return->optionName->indexOf->return
SubprocessUtil#findMainClassIndex(List)::: subprocess util find main class index:::i->while->commandLine->size->s->commandLine->get->if->s->charAt->return->else->if->hasArg->else->throw->new->InternalError

AbstractDocument#getDocumentProperties():::Supports managing a set of properties:::if->new->Hashtable<Object,Object>->return
AbstractDocument#setDocumentProperties(Dictionary):::Replaces the document properties dictionary for this document.:::
AbstractDocument#fireInsertUpdate(DocumentEvent):::Notifies all listeners that have registered interest for notification on this event type:::try->listeners->listenerList->getListenerList->for->i->catch->finally
AbstractDocument#fireChangedUpdate(DocumentEvent):::Notifies all listeners that have registered interest for notification on this event type:::try->listeners->listenerList->getListenerList->for->i->catch->finally
AbstractDocument#fireRemoveUpdate(DocumentEvent):::Notifies all listeners that have registered interest for notification on this event type:::try->listeners->listenerList->getListenerList->for->i->catch->finally
AbstractDocument#fireUndoableEditUpdate(UndoableEditEvent):::Notifies all listeners that have registered interest for notification on this event type:::if->e->getEdit->e->getSource->e->getEdit->new->DefaultDocumentEventUndoableWrapper->new->UndoableEditEvent->listeners->listenerList->getListenerList->for->i
AbstractDocument#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this document:::return->listenerList->getListeners
AbstractDocument#getAsynchronousLoadPriority():::Gets the asynchronous loading priority:::loadPriority->getProperty->if->return->loadPriority->intValue->return
AbstractDocument#setAsynchronousLoadPriority(int):::Sets the asynchronous loading priority.:::loadPriority->Integer->valueOf->putProperty
AbstractDocument#setDocumentFilter(DocumentFilter):::Sets the DocumentFilter:::
AbstractDocument#getDocumentFilter():::Returns the DocumentFilter that is responsible for filtering of insertion/removal:::return
AbstractDocument#render(Runnable):::This allows the model to be safely rendered in the presence of currency, if the model supports being updated asynchronously:::readLock->try->r->run->catch->finally->readUnlock
AbstractDocument#getLength():::Returns the length of the data:::return->data->length
AbstractDocument#addDocumentListener(DocumentListener):::Adds a document listener for notification of any changes.:::listenerList->add
AbstractDocument#removeDocumentListener(DocumentListener):::Removes a document listener.:::listenerList->remove
AbstractDocument#getDocumentListeners():::Returns an array of all the document listeners registered on this document.:::return->listenerList->getListeners
AbstractDocument#addUndoableEditListener(UndoableEditListener):::Adds an undo listener for notification of any changes:::listenerList->add
AbstractDocument#removeUndoableEditListener(UndoableEditListener):::Removes an undo listener.:::listenerList->remove
AbstractDocument#getUndoableEditListeners():::Returns an array of all the undoable edit listeners registered on this document.:::return->listenerList->getListeners
AbstractDocument#getProperty(Object):::A convenience method for looking up a property value:::return->getDocumentProperties->get
AbstractDocument#putProperty(Object, Object):::A convenience method for storing up a property value:::if->getDocumentProperties->put->else->getDocumentProperties->remove->if->getProperty->equals->writeLock->try->e->getLength->new->DefaultDocumentEvent->updateBidi->catch->finally->writeUnlock
AbstractDocument#remove(int, int):::Removes some content from the document:::filter->getDocumentFilter->writeLock->try->if->filter->getFilterBypass->remove->else->handleRemove->catch->finally->writeUnlock
AbstractDocument#handleRemove(int, int):::Performs the actual work of the remove:::if->if->getLength->throw->getLength->new->BadLocationException->chng->new->DefaultDocumentEvent->isComposedTextElement->Utilities->isComposedTextElement->removeUpdate->u->data->remove->if->chng->addEdit->postRemoveUpdate->chng->end->fireRemoveUpdate->if->new->UndoableEditEvent->fireUndoableEditUpdate
AbstractDocument#replace(int, int, String, AttributeSet):::Deletes the region of text from offset to offset + length, and replaces it with text:::if->text->length->return->filter->getDocumentFilter->writeLock->try->if->filter->getFilterBypass->replace->else->if->remove->if->text->length->insertString->catch->finally->writeUnlock
AbstractDocument#insertString(int, String, AttributeSet):::Inserts some content into the document:::if->str->length->return->if->getLength->throw->getLength->new->BadLocationException->filter->getDocumentFilter->writeLock->try->if->filter->getFilterBypass->insertString->else->handleInsertString->catch->finally->writeUnlock
AbstractDocument#getText(int, int):::Gets a sequence of text from the document.:::if->throw->new->BadLocationException->str->data->getString->return
AbstractDocument#getText(int, int, Segment):::Fetches the text contained within the given portion of the document:::if->throw->new->BadLocationException->data->getChars
AbstractDocument#createPosition(int):::Returns a position that will track change as the document is altered:::return->data->createPosition
AbstractDocument#getStartPosition():::Returns a position that represents the start of the document:::p->try->createPosition->catch->finally->return
AbstractDocument#getEndPosition():::Returns a position that represents the end of the document:::p->try->data->length->createPosition->catch->finally->return
AbstractDocument#getRootElements():::Gets all root elements defined:::elems->new->ElementArr->getDefaultRootElement->getBidiRootElement->return
AbstractDocument#getDefaultRootElement():::Returns the root element that views should be based upon unless some other mechanism for assigning views to element structures is provided.:::
AbstractDocument#getBidiRootElement():::Returns the root element of the bidirectional structure for this document:::return
AbstractDocument#isLeftToRight(Document, int, int):::Returns true if the text in the range p0 to p1 is left to right.:::if->doc->getProperty->equals->if->adoc->bidiRoot->adoc->getBidiRootElement->index->bidiRoot->getElementIndex->bidiElem->bidiRoot->getElement->if->bidiElem->getEndOffset->bidiAttrs->bidiElem->getAttributes->return->StyleConstants->getBidiLevel->return
AbstractDocument#getParagraphElement(int):::Get the paragraph element containing the given position:::
AbstractDocument#getAttributeContext():::Fetches the context for managing attributes:::return
AbstractDocument#insertUpdate(DefaultDocumentEvent, AttributeSet):::Updates document structure as a result of text insertion:::if->getProperty->equals->updateBidi->if->chng->getLength->getProperty->equals->segment->SegmentCache->getSharedSegment->try->chng->getOffset->chng->getLength->getText->segment->first->do->if->segment->current->putProperty->break->while->segment->next->catch->finally->SegmentCache->releaseSharedSegment
AbstractDocument#removeUpdate(DefaultDocumentEvent):::Updates any document structure as a result of text removal:::
AbstractDocument#postRemoveUpdate(DefaultDocumentEvent):::Updates any document structure as a result of text removal:::if->getProperty->equals->updateBidi
AbstractDocument#updateBidi(DefaultDocumentEvent):::Update the bidi element structure as a result of the given change to the document:::firstPStart->lastPEnd->if->chngStart->chng->getOffset->chngEnd->chng->getLength->getParagraphElement->getStartOffset->getParagraphElement->getEndOffset->else->if->paragraph->chng->getOffset->getParagraphElement->paragraph->getStartOffset->paragraph->getEndOffset->else->throw->new->Error->levels->calculateBidiLevels->newElements->new->Vector<Element>->firstSpanStart->removeFromIndex->if->prevElemIndex->bidiRoot->getElementIndex->prevElem->bidiRoot->getElement->prevLevel->StyleConstants->prevElem->getAttributes->getBidiLevel->if->prevElem->getStartOffset->else->if->prevElem->getEndOffset->newElements->prevElem->getStartOffset->new->BidiElement->addElement->else->firstSpanEnd->while->lastSpanEnd->newNextElem->removeToIndex->bidiRoot->getElementCount->if->getLength->nextElemIndex->bidiRoot->getElementIndex->nextElem->bidiRoot->getElement->nextLevel->StyleConstants->nextElem->getAttributes->getBidiLevel->if->nextElem->getEndOffset->else->if->nextElem->getStartOffset->nextElem->getEndOffset->new->BidiElement->else->lastSpanStart->while->if->newElements->new->BidiElement->addElement->else->newElements->new->BidiElement->addElement->for->i->newElements->new->BidiElement->addElement->if->newElements->addElement->removedElemCount->if->bidiRoot->getElementCount->removedElems->new->ElementArr->for->i->addedElems->newElements->size->new->ElementArr->newElements->copyInto->ee->new->ElementEdit->chng->addEdit->bidiRoot->replace
AbstractDocument#dump(PrintStream):::Gives a diagnostic dump.:::root->getDefaultRootElement->if->dump->bidiRoot->dump
AbstractDocument#getContent():::Gets the content for the document.:::return
AbstractDocument#createLeafElement(Element, AttributeSet, int, int):::Creates a document leaf element:::return->new->LeafElement
AbstractDocument#createBranchElement(Element, AttributeSet):::Creates a document branch element, that can contain other elements.:::return->new->BranchElement
AbstractDocument#getCurrentWriter():::Fetches the current writing thread if there is one:::return
AbstractDocument#writeLock():::Acquires a lock to begin mutating the document this lock protects:::try->while->if->Thread->currentThread->if->throw->new->IllegalStateException->return->wait->Thread->currentThread->catch->throw->new->Error->finally
AbstractDocument#writeUnlock():::Releases a write lock previously obtained via writeLock:::if->notifyAll
AbstractDocument#readLock():::Acquires a lock to begin reading some state from the document:::try->while->if->Thread->currentThread->return->wait->catch->throw->new->Error->finally
AbstractDocument#readUnlock():::Does a read unlock:::if->Thread->currentThread->return->if->throw->new->StateInvariantError->notify
AbstractDocument.Content#createPosition(int):::Creates a position within the content that will track change as the content is mutated.:::
AbstractDocument.Content#length():::Current length of the sequence of character content.:::
AbstractDocument.Content#insertString(int, String):::Inserts a string of characters into the sequence.:::
AbstractDocument.Content#remove(int, int):::Removes some portion of the sequence.:::
AbstractDocument.Content#getString(int, int):::Fetches a string of characters contained in the sequence.:::
AbstractDocument.Content#getChars(int, int, Segment):::Gets a sequence of characters and copies them into a Segment.:::
AbstractDocument.AttributeContext#addAttribute(AttributeSet, Object, Object):::Adds an attribute to the given set, and returns the new representative set.:::
AbstractDocument.AttributeContext#addAttributes(AttributeSet, AttributeSet):::Adds a set of attributes to the element.:::
AbstractDocument.AttributeContext#removeAttribute(AttributeSet, Object):::Removes an attribute from the set.:::
AbstractDocument.AttributeContext#removeAttributes(AttributeSet, Enumeration):::Removes a set of attributes for the element.:::
AbstractDocument.AttributeContext#removeAttributes(AttributeSet, AttributeSet):::Removes a set of attributes for the element.:::
AbstractDocument.AttributeContext#getEmptySet():::Fetches an empty AttributeSet.:::
AbstractDocument.AttributeContext#reclaim(AttributeSet):::Reclaims an attribute set:::
AbstractDocument.AbstractElement#dump(PrintStream, int):::Dumps a debugging representation of the element hierarchy.:::out->try->new->OutputStreamWriter->new->PrintWriter->catch->new->PrintWriter->finally->indent->if->getName->out->print->else->out->getName->print->if->getAttributeCount->out->println->names->attributes->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->indent->out->getAttribute->println->indent->out->println->if->isLeaf->indent->out->getStartOffset->getEndOffset->print->c->getContent->try->contentStr->c->getStartOffset->getEndOffset->getStartOffset->getString->if->contentStr->length->contentStr->substring->out->println->catch->finally->else->n->getElementCount->for->i
AbstractDocument.AbstractElement#getAttributeCount():::Gets the number of attributes that are defined.:::return->attributes->getAttributeCount
AbstractDocument.AbstractElement#isDefined(Object):::Checks whether a given attribute is defined.:::return->attributes->isDefined
AbstractDocument.AbstractElement#isEqual(AttributeSet):::Checks whether two attribute sets are equal.:::return->attributes->isEqual
AbstractDocument.AbstractElement#copyAttributes():::Copies a set of attributes.:::return->attributes->copyAttributes
AbstractDocument.AbstractElement#getAttribute(Object):::Gets the value of an attribute.:::value->attributes->getAttribute->if->a->parent->getAttributes->if->a->getAttribute->return
AbstractDocument.AbstractElement#getAttributeNames():::Gets the names of all attributes.:::return->attributes->getAttributeNames
AbstractDocument.AbstractElement#containsAttribute(Object, Object):::Checks whether a given attribute name/value is defined.:::return->attributes->containsAttribute
AbstractDocument.AbstractElement#containsAttributes(AttributeSet):::Checks whether the element contains all the attributes.:::return->attributes->containsAttributes
AbstractDocument.AbstractElement#getResolveParent():::Gets the resolving parent:::a->attributes->getResolveParent->if->parent->getAttributes->return
AbstractDocument.AbstractElement#addAttribute(Object, Object):::Adds an attribute to the element.:::checkForIllegalCast->context->getAttributeContext->context->addAttribute
AbstractDocument.AbstractElement#addAttributes(AttributeSet):::Adds a set of attributes to the element.:::checkForIllegalCast->context->getAttributeContext->context->addAttributes
AbstractDocument.AbstractElement#removeAttribute(Object):::Removes an attribute from the set.:::checkForIllegalCast->context->getAttributeContext->context->removeAttribute
AbstractDocument.AbstractElement#removeAttributes(Enumeration):::Removes a set of attributes for the element.:::checkForIllegalCast->context->getAttributeContext->context->removeAttributes
AbstractDocument.AbstractElement#removeAttributes(AttributeSet):::Removes a set of attributes for the element.:::checkForIllegalCast->context->getAttributeContext->if->context->getEmptySet->else->context->removeAttributes
AbstractDocument.AbstractElement#setResolveParent(AttributeSet):::Sets the resolving parent.:::checkForIllegalCast->context->getAttributeContext->if->context->addAttribute->else->context->removeAttribute
AbstractDocument.AbstractElement#getDocument():::Retrieves the underlying model.:::return
AbstractDocument.AbstractElement#getParentElement():::Gets the parent of the element.:::return
AbstractDocument.AbstractElement#getAttributes():::Gets the attributes for the element.:::return
AbstractDocument.AbstractElement#getName():::Gets the name of the element.:::if->attributes->isDefined->return->attributes->getAttribute->return
AbstractDocument.AbstractElement#getStartOffset():::Gets the starting offset in the model for the element.:::
AbstractDocument.AbstractElement#getEndOffset():::Gets the ending offset in the model for the element.:::
AbstractDocument.AbstractElement#getElement(int):::Gets a child element.:::
AbstractDocument.AbstractElement#getElementCount():::Gets the number of children for the element.:::
AbstractDocument.AbstractElement#getElementIndex(int):::Gets the child element index closest to the given model offset.:::
AbstractDocument.AbstractElement#isLeaf():::Checks whether the element is a leaf.:::
AbstractDocument.AbstractElement#getChildAt(int):::Returns the child TreeNode at index childIndex.:::return->getElement
AbstractDocument.AbstractElement#getChildCount():::Returns the number of children TreeNode's receiver contains.:::return->getElementCount
AbstractDocument.AbstractElement#getParent():::Returns the parent TreeNode of the receiver.:::return->getParentElement
AbstractDocument.AbstractElement#getIndex(TreeNode):::Returns the index of node in the receivers children:::for->counter->getChildCount->return
AbstractDocument.AbstractElement#getAllowsChildren():::Returns true if the receiver allows children.:::
AbstractDocument.AbstractElement#children():::Returns the children of the receiver as an Enumeration.:::
AbstractDocument.BranchElement#positionToElement(int):::Gets the child element that contains the given model position.:::index->getElementIndex->child->p0->child->getStartOffset->p1->child->getEndOffset->if->return->return
AbstractDocument.BranchElement#replace(int, int, Element[]):::Replaces content with a new set of elements.:::delta->src->nmove->dest->if->newLength->Math->max->newChildren->new->AbstractElementArr->System->arraycopy->System->arraycopy->System->arraycopy->else->System->arraycopy->System->arraycopy
AbstractDocument.BranchElement#toString():::Converts the element to a string.:::return->getName->getStartOffset->getEndOffset
AbstractDocument.BranchElement#getName():::Gets the element name.:::nm->super->getName->if->return
AbstractDocument.BranchElement#getStartOffset():::Gets the starting offset in the model for the element.:::return->getStartOffset
AbstractDocument.BranchElement#getEndOffset():::Gets the ending offset in the model for the element.:::child->return->child->getEndOffset
AbstractDocument.BranchElement#getElement(int):::Gets a child element.:::if->return->return
AbstractDocument.BranchElement#getElementCount():::Gets the number of children for the element.:::return
AbstractDocument.BranchElement#getElementIndex(int):::Gets the child element index closest to the given model offset.:::index->lower->upper->mid->p0->getStartOffset->p1->if->return->if->getEndOffset->return->if->lastHit->lastHit->getStartOffset->lastHit->getEndOffset->if->return->if->else->while->elem->elem->getStartOffset->elem->getEndOffset->if->return->else->if->else->if->else->return
AbstractDocument.BranchElement#isLeaf():::Checks whether the element is a leaf.:::return
AbstractDocument.BranchElement#getAllowsChildren():::Returns true if the receiver allows children.:::return
AbstractDocument.BranchElement#children():::Returns the children of the receiver as an Enumeration.:::if->return->tempVector->new->Vector<>->for->counter->return->tempVector->elements
AbstractDocument.LeafElement#toString():::Converts the element to a string.:::return->getName
AbstractDocument.LeafElement#getStartOffset():::Gets the starting offset in the model for the element.:::return->p0->getOffset
AbstractDocument.LeafElement#getEndOffset():::Gets the ending offset in the model for the element.:::return->p1->getOffset
AbstractDocument.LeafElement#getName():::Gets the element name.:::nm->super->getName->if->return
AbstractDocument.LeafElement#getElementIndex(int):::Gets the child element index closest to the given model offset.:::return
AbstractDocument.LeafElement#getElement(int):::Gets a child element.:::return
AbstractDocument.LeafElement#getElementCount():::Returns the number of child elements.:::return
AbstractDocument.LeafElement#isLeaf():::Checks whether the element is a leaf.:::return
AbstractDocument.LeafElement#getAllowsChildren():::Returns true if the receiver allows children.:::return
AbstractDocument.LeafElement#children():::Returns the children of the receiver as an Enumeration.:::return
AbstractDocument.BidiRootElement#getName():::Gets the name of the element.:::return
AbstractDocument.BidiElement#getName():::Gets the name of the element.:::return
AbstractDocument.DefaultDocumentEvent#toString():::Returns a string description of the change event.:::return->edits->toString
AbstractDocument.DefaultDocumentEvent#addEdit(UndoableEdit):::Adds a document edit:::if->edits->size->new->Hashtable<Element,ElementChange>->n->edits->size->for->i->if->ec->changeLookup->ec->getElement->put->return->super->addEdit
AbstractDocument.DefaultDocumentEvent#redo():::Redoes a change.:::writeLock->try->super->redo->ev->new->UndoRedoDocumentEvent->if->fireInsertUpdate->else->if->fireRemoveUpdate->else->fireChangedUpdate->catch->finally->writeUnlock
AbstractDocument.DefaultDocumentEvent#undo():::Undoes a change.:::writeLock->try->super->undo->ev->new->UndoRedoDocumentEvent->if->fireInsertUpdate->else->if->fireRemoveUpdate->else->fireChangedUpdate->catch->finally->writeUnlock
AbstractDocument.DefaultDocumentEvent#isSignificant():::DefaultDocument events are significant:::return
AbstractDocument.DefaultDocumentEvent#getPresentationName():::Provides a localized, human readable description of this edit suitable for use in, say, a change log.:::type->getType->if->return->UIManager->getString->if->return->UIManager->getString->return->UIManager->getString
AbstractDocument.DefaultDocumentEvent#getUndoPresentationName():::Provides a localized, human readable description of the undoable form of this edit, e.g:::return->UIManager->getString->getPresentationName
AbstractDocument.DefaultDocumentEvent#getRedoPresentationName():::Provides a localized, human readable description of the redoable form of this edit, e.g:::return->UIManager->getString->getPresentationName
AbstractDocument.DefaultDocumentEvent#getType():::Returns the type of event.:::return
AbstractDocument.DefaultDocumentEvent#getOffset():::Returns the offset within the document of the start of the change.:::return
AbstractDocument.DefaultDocumentEvent#getLength():::Returns the length of the change.:::return
AbstractDocument.DefaultDocumentEvent#getDocument():::Gets the document that sourced the change event.:::return
AbstractDocument.DefaultDocumentEvent#getChange(Element):::Gets the changes for an element.:::if->return->changeLookup->get->n->edits->size->for->i->return
AbstractDocument.ElementEdit#getElement():::Returns the underlying element.:::return
AbstractDocument.ElementEdit#getIndex():::Returns the index into the list of elements.:::return
AbstractDocument.ElementEdit#getChildrenRemoved():::Gets a list of children that were removed.:::return
AbstractDocument.ElementEdit#getChildrenAdded():::Gets a list of children that were added.:::return
AbstractDocument.ElementEdit#redo():::Redoes a change.:::super->redo->tmp->replace
AbstractDocument.ElementEdit#undo():::Undoes a change.:::super->undo->replace->tmp
AbstractWriter#getStartOffset():::Returns the first offset to be output.:::return
AbstractWriter#getEndOffset():::Returns the last offset to be output.:::return
AbstractWriter#getElementIterator():::Fetches the ElementIterator.:::return
AbstractWriter#getWriter():::Returns the Writer that is used to output the content.:::return
AbstractWriter#getDocument():::Fetches the document.:::return
AbstractWriter#inRange(Element):::This method determines whether the current element is in the range specified:::startOffset->getStartOffset->endOffset->getEndOffset->if->next->getStartOffset->next->getStartOffset->next->getStartOffset->next->getEndOffset->return->return
AbstractWriter#write():::This abstract method needs to be implemented by subclasses:::
AbstractWriter#getText(Element):::Returns the text associated with the element:::return->doc->elem->getStartOffset->elem->getEndOffset->elem->getStartOffset->getText
AbstractWriter#text(Element):::Writes out text:::start->Math->getStartOffset->elem->getStartOffset->max->end->Math->getEndOffset->elem->getEndOffset->min->if->if->new->Segment->getDocument->getText->if->write
AbstractWriter#setLineLength(int):::Enables subclasses to set the number of characters they want written per line:::
AbstractWriter#getLineLength():::Returns the maximum line length.:::return
AbstractWriter#setCurrentLineLength(int):::Sets the current line length.:::
AbstractWriter#getCurrentLineLength():::Returns the current line length.:::return
AbstractWriter#isLineEmpty():::Returns true if the current line should be considered empty:::return
AbstractWriter#setCanWrapLines(boolean):::Sets whether or not lines can be wrapped:::
AbstractWriter#getCanWrapLines():::Returns whether or not the lines can be wrapped:::return
AbstractWriter#setIndentSpace(int):::Enables subclasses to specify how many spaces an indent maps to:::
AbstractWriter#getIndentSpace():::Returns the amount of space to indent.:::return
AbstractWriter#setLineSeparator(String):::Sets the String used to represent newlines:::
AbstractWriter#getLineSeparator():::Returns the string used to represent newlines.:::return
AbstractWriter#incrIndent():::Increments the indent level:::if->else->if->getIndentSpace->getLineLength
AbstractWriter#decrIndent():::Decrements the indent level.:::if->else
AbstractWriter#getIndentLevel():::Returns the current indentation level:::return
AbstractWriter#indent():::Does indentation:::max->getIndentLevel->getIndentSpace->if->new->charArr->for->counter->length->getCurrentLineLength->wasEmpty->isLineEmpty->output->if
AbstractWriter#write(char):::Writes out a character:::if->new->charArr->write
AbstractWriter#write(String):::Writes out a string:::if->return->size->content->length->if->new->charArr->content->getChars->write
AbstractWriter#writeLineSeparator():::Writes the line separator:::newline->getLineSeparator->length->newline->length->if->new->charArr->newline->getChars->output->setCurrentLineLength
AbstractWriter#write(char[], int, int):::All write methods call into this one:::if->getCanWrapLines->lastIndex->endIndex->newlineIndex->indexOf->while->if->output->writeLineSeparator->indexOf->if->output->else->lastIndex->endIndex->lineLength->getCurrentLineLength->maxLength->getLineLength->while->newlineIndex->indexOf->needsNewline->forceNewLine->getCurrentLineLength->if->if->output->else->if->if->output->else->breakPoint->maxBreak->Math->min->counter->while->if->Character->isWhitespace->if->output->else->Math->max->while->if->Character->isWhitespace->break->if->output->else->if->output->else->output->if->writeLineSeparator->if->indent
AbstractWriter#writeAttributes(AttributeSet):::Writes out the set of attributes as " &lt;name&gt;=&lt;value&gt;" pairs:::names->attr->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attr->getAttribute->write
AbstractWriter#output(char[], int, int):::The last stop in writing out content:::getWriter->write->getCurrentLineLength->setCurrentLineLength
AsyncBoxView#getMajorAxis():::Fetch the major axis (the axis the children are tiled along):::return
AsyncBoxView#getMinorAxis():::Fetch the minor axis (the axis orthogonal to the tiled axis):::return
AsyncBoxView#getTopInset():::Get the top part of the margin around the view.:::return
AsyncBoxView#setTopInset(float):::Set the top part of the margin around the view.:::
AsyncBoxView#getBottomInset():::Get the bottom part of the margin around the view.:::return
AsyncBoxView#setBottomInset(float):::Set the bottom part of the margin around the view.:::
AsyncBoxView#getLeftInset():::Get the left part of the margin around the view.:::return
AsyncBoxView#setLeftInset(float):::Set the left part of the margin around the view.:::
AsyncBoxView#getRightInset():::Get the right part of the margin around the view.:::return
AsyncBoxView#setRightInset(float):::Set the right part of the margin around the view.:::
AsyncBoxView#getInsetSpan(int):::Fetch the span along an axis that is taken up by the insets.:::margin->getLeftInset->getRightInset->getTopInset->getBottomInset->return
AsyncBoxView#setEstimatedMajorSpan(boolean):::Set the estimatedMajorSpan property that determines if the major span should be treated as being estimated:::
AsyncBoxView#getEstimatedMajorSpan():::Is the major span currently estimated?:::return
AsyncBoxView#getChildState(int):::Fetch the object representing the layout state of of the child at the given index.:::synchronized->if->stats->size->return->stats->get->return
AsyncBoxView#getLayoutQueue():::Fetch the queue to use for layout.:::return->LayoutQueue->getDefaultQueue
AsyncBoxView#createChildState(View):::New ChildState records are created through this method to allow subclasses the extend the ChildState records to do/hold more.:::return->new->ChildState
AsyncBoxView#majorRequirementChange(ChildState, float):::Requirements changed along the major axis:::if
AsyncBoxView#minorRequirementChange(ChildState):::Requirements changed along the minor axis:::
AsyncBoxView#flushRequirementChanges():::Publish the changes in preferences upward to the parent view:::doc->getDocument->try->doc->readLock->parent->horizontal->vertical->synchronized->synchronized->n->getViewCount->if->q->getLayoutQueue->min->getChildState->pref->getChildState->span->for->i->if->if->if->getParent->if->if->else->if->parent->preferenceChanged->c->getContainer->if->c->repaint->catch->finally->doc->readUnlock
AsyncBoxView#replace(int, int, View[]):::Calls the superclass to update the child views, and updates the status records for the children:::synchronized->for->i->q->getLayoutQueue->if->for->i->q->addTask
AsyncBoxView#loadChildren(ViewFactory):::Loads all of the children to initialize the view:::e->getElement->n->e->getElementCount->if->added->new->ViewArr->for->i->replace
AsyncBoxView#getViewIndexAtPosition(int, Position.Bias):::Fetches the child view index representing the given position in the model:::isBackward->Math->max->elem->getElement->return->elem->getElementIndex
AsyncBoxView#updateLayout(DocumentEvent.ElementChange, DocumentEvent, Shape):::Update the layout in response to receiving notification of change from the model:::if->index->Math->ec->getIndex->max->cs->getChildState->locator->childChanged
AsyncBoxView#setParent(View):::Sets the parent of the view:::super->setParent->if->getViewCount->f->getViewFactory->loadChildren
AsyncBoxView#preferenceChanged(View, boolean, boolean):::Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout:::if->getParent->preferenceChanged->else->if->cv->changing->getChildView->if->changing->preferenceChanged->return->index->child->getStartOffset->getViewIndex->cs->getChildState->cs->preferenceChanged->q->getLayoutQueue->q->addTask->q->addTask
AsyncBoxView#setSize(float, float):::Sets the size of the view:::setSpanOnAxis->setSpanOnAxis
AsyncBoxView#getSpanOnAxis(int):::Retrieves the size of the view along an axis.:::if->getMajorAxis->return->return
AsyncBoxView#setSpanOnAxis(int, float):::Sets the size of the view along an axis:::margin->getInsetSpan->if->getMinorAxis->targetSpan->if->n->getViewCount->if->q->getLayoutQueue->for->i->q->addTask->else->if
AsyncBoxView#paint(Graphics, Shape):::Render the view using the given allocation and rendering surface:::synchronized->locator->setAllocation->locator->paintChildren
AsyncBoxView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::margin->getInsetSpan->if->return->if->child->prefRequest->getChildView->return->child->getPreferredSpan->return
AsyncBoxView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::if->return->getPreferredSpan->if->child->minRequest->getChildView->return->child->getMinimumSpan->if->return->getLeftInset->getRightInset->else->return->getTopInset->getBottomInset
AsyncBoxView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::if->return->getPreferredSpan->return
AsyncBoxView#getViewCount():::Returns the number of views in this view:::synchronized->return->stats->size
AsyncBoxView#getView(int):::Gets the nth child view:::cs->getChildState->if->return->cs->getChildView->return
AsyncBoxView#getChildAllocation(int, Shape):::Fetches the allocation for the given child view:::ca->locator->getChildAllocation->return
AsyncBoxView#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::return->getViewIndexAtPosition
AsyncBoxView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::index->getViewIndex->ca->locator->getChildAllocation->cs->getChildState->synchronized->cv->cs->getChildView->v->cv->modelToView->return
AsyncBoxView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model:::pos->index->ca->synchronized->locator->getViewIndexAtPoint->locator->getChildAllocation->cs->getChildState->synchronized->v->cs->getChildView->v->viewToModel->return
AsyncBoxView#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->return->Utilities->getNextVisualPositionFrom
AsyncBoxView.ChildLocator#childChanged(ChildState):::Notification that a child changed:::if->else->if->cs->getChildView->getStartOffset->lastValidOffset->getChildView->getStartOffset
AsyncBoxView.ChildLocator#paintChildren(Graphics):::Paint the children that intersect the clip area.:::clip->g->getClipBounds->targetOffset->index->getViewIndexAtVisualOffset->n->getViewCount->offs->getChildState->getMajorOffset->for->i
AsyncBoxView.ChildLocator#getChildAllocation(int, Shape):::Fetch the allocation to use for a child view:::if->return->setAllocation->cs->getChildState->if->getChildState->if->cs->getChildView->getStartOffset->lastValidOffset->getChildView->getStartOffset->updateChildOffsetsToIndex->ca->getChildAllocation->return
AsyncBoxView.ChildLocator#getViewIndexAtPoint(float, float, Shape):::Fetches the child view index at the given point:::setAllocation->targetOffset->index->getViewIndexAtVisualOffset->return
AsyncBoxView.ChildLocator#getChildAllocation(int):::Fetch the allocation to use for a child view:::cs->getChildState->if->cs->isLayoutValid->cs->run->if->cs->getMajorOffset->cs->getMinorOffset->cs->getMajorSpan->cs->getMinorSpan->else->cs->getMajorOffset->cs->getMinorOffset->cs->getMajorSpan->cs->getMinorSpan->getLeftInset->getRightInset->return
AsyncBoxView.ChildLocator#setAllocation(Shape):::Copy the currently allocated shape into the Rectangle used to store the current allocation:::if->lastAlloc->setBounds->else->lastAlloc->a->getBounds->setBounds->setSize
AsyncBoxView.ChildLocator#getViewIndexAtVisualOffset(float):::Locate the view responsible for an offset into the box along the major axis:::n->getViewCount->if->lastValid->if->getChildState->if->if->return->pos->lastValidOffset->getChildView->getStartOffset->index->getViewIndex->return->else->if->lastValidOffset->getMajorOffset->return->updateChildOffsets->else->offs->for->i->return
AsyncBoxView.ChildLocator#updateChildOffsets(float):::Move the location of the last offset calculation forward to the desired offset.:::n->getViewCount->targetIndex->pos->lastValidOffset->getChildView->getStartOffset->startIndex->getViewIndex->start->lastValidOffset->getMajorOffset->lastOffset->for->i->return
AsyncBoxView.ChildLocator#updateChildOffsetsToIndex(int):::Move the location of the last offset calculation forward to the desired index.:::pos->lastValidOffset->getChildView->getStartOffset->startIndex->getViewIndex->lastOffset->lastValidOffset->getMajorOffset->for->i
AsyncBoxView.ChildState#getChildView():::Fetch the child view this record represents.:::return
AsyncBoxView.ChildState#run():::Update the child state:::doc->getDocument->try->doc->readLock->if->return->if->child->getParent->synchronized->updateChild->synchronized->updateChild->catch->finally->doc->readUnlock
AsyncBoxView.ChildState#getMinorSpan():::What is the span along the minor axis.:::if->return->return->Math->max
AsyncBoxView.ChildState#getMinorOffset():::What is the offset along the minor axis:::if->align->child->getMinorAxis->getAlignment->return->return
AsyncBoxView.ChildState#getMajorSpan():::What is the span along the major axis.:::return
AsyncBoxView.ChildState#getMajorOffset():::Get the offset along the major axis.:::return
AsyncBoxView.ChildState#setMajorOffset(float):::This method should only be called by the ChildLocator, it is simply a convenient place to hold the cached location.:::
AsyncBoxView.ChildState#preferenceChanged(boolean, boolean):::Mark preferences changed for this child.:::if->if->if->else->if->if
AsyncBoxView.ChildState#isLayoutValid():::Has the child view been laid out.:::return
AttributeSet#getAttributeCount():::Returns the number of attributes that are defined locally in this set:::
AttributeSet#isDefined(Object):::Checks whether the named attribute has a value specified in the set without resolving through another attribute set.:::
AttributeSet#isEqual(AttributeSet):::Determines if the two attribute sets are equivalent.:::
AttributeSet#copyAttributes():::Returns an attribute set that is guaranteed not to change over time.:::
AttributeSet#getAttribute(Object):::Fetches the value of the given attribute:::
AttributeSet#getAttributeNames():::Returns an enumeration over the names of the attributes that are defined locally in the set:::
AttributeSet#containsAttribute(Object, Object):::Returns true if this set defines an attribute with the same name and an equal value:::
AttributeSet#containsAttributes(AttributeSet):::Returns true if this set defines all the attributes from the given set with equal values:::
AttributeSet#getResolveParent():::Gets the resolving parent.:::
BadLocationException#offsetRequested():::Returns the offset into the document that was not legal.:::return
BoxView#getAxis():::Fetches the tile axis property:::return
BoxView#setAxis(int):::Sets the tile axis property:::axisChanged->if->preferenceChanged
BoxView#layoutChanged(int):::Invalidates the layout along an axis:::if->else
BoxView#isLayoutValid(int):::Determines if the layout is valid along the given axis.:::if->return->else->return
BoxView#paintChild(Graphics, Rectangle, int):::Paints a child:::child->getView->child->paint
BoxView#replace(int, int, View[]):::Invalidates the layout and resizes the cache of requests/allocations:::super->replace->nInserted->updateLayoutArray->updateLayoutArray->updateLayoutArray->updateLayoutArray
BoxView#updateLayoutArray(int[], int, int):::Resizes the given layout array to match the new number of child views:::n->getViewCount->newArray->new->intArr->System->arraycopy->System->arraycopy->return
BoxView#forwardUpdate(DocumentEvent.ElementChange, DocumentEvent, Shape, ViewFactory):::Forwards the given DocumentEvent to the child views that need to be notified of the change to the model:::wasValid->isLayoutValid->super->forwardUpdate->if->isLayoutValid->c->getContainer->if->pos->e->getOffset->index->getViewIndexAtPosition->alloc->getInsideAllocation->if->else->c->repaint
BoxView#preferenceChanged(View, boolean, boolean):::This is called by a child to indicate its preferred span has changed:::majorChanged->minorChanged->if->if->super->preferenceChanged
BoxView#getResizeWeight(int):::Gets the resize weight:::checkRequests->if->if->return->else->if->return->return
BoxView#setSpanOnAxis(int, float):::Sets the size of the view along an axis:::if->if->if->checkRequests->layoutMajorAxis->updateChildSizes->else->if->if->checkRequests->layoutMinorAxis->updateChildSizes
BoxView#updateChildSizes():::Propagates the current allocations to the child views.:::n->getViewCount->if->for->i->else->for->i
BoxView#getSpanOnAxis(int):::Returns the size of the view along an axis:::if->return->else->return
BoxView#setSize(float, float):::Sets the size of the view:::Math->getLeftInset->getRightInset->max->Math->getTopInset->getBottomInset->max->layout
BoxView#paint(Graphics, Shape):::Renders the BoxView using the given rendering surface and area on that surface:::alloc->allocation->getBounds->n->getViewCount->x->getLeftInset->y->getTopInset->clip->g->getClipBounds->for->i
BoxView#getChildAllocation(int, Shape):::Fetches the allocation for the given child view:::if->ca->super->getChildAllocation->if->isAllocationValid->r->ca->getBounds->if->return->return->return
BoxView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it:::if->isAllocationValid->alloc->a->getBounds->setSize->return->super->modelToView
BoxView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::if->isAllocationValid->alloc->a->getBounds->setSize->return->super->viewToModel
BoxView#getAlignment(int):::Determines the desired alignment for this view along an axis:::checkRequests->if->return->else->return
BoxView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::checkRequests->marginSpan->getLeftInset->getRightInset->getTopInset->getBottomInset->if->return->else->return
BoxView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::checkRequests->marginSpan->getLeftInset->getRightInset->getTopInset->getBottomInset->if->return->else->return
BoxView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::checkRequests->marginSpan->getLeftInset->getRightInset->getTopInset->getBottomInset->if->return->else->return
BoxView#isAllocationValid():::Are the allocations for the children still valid?:::return
BoxView#isBefore(int, int, Rectangle):::Determines if a point falls before an allocated region.:::if->return->else->return
BoxView#isAfter(int, int, Rectangle):::Determines if a point falls after an allocated region.:::if->return->else->return
BoxView#getViewAtPoint(int, int, Rectangle):::Fetches the child view at the given coordinates.:::n->getViewCount->if->if->childAllocation->return->getView->for->i->childAllocation->return->getView->else->if->childAllocation->return->getView->for->i->childAllocation->return->getView
BoxView#childAllocation(int, Rectangle):::Allocates a region for a child view.:::getOffset->getOffset->getSpan->getSpan
BoxView#layout(int, int):::Perform layout on the box:::setSpanOnAxis->setSpanOnAxis
BoxView#getWidth():::Returns the current width of the box:::span->if->else->getLeftInset->getRightInset->return
BoxView#getHeight():::Returns the current height of the box:::span->if->else->getTopInset->getBottomInset->return
BoxView#layoutMajorAxis(int, int, int[], int[]):::Performs layout for the major axis of the box (i.e:::preferred->n->getViewCount->for->i->desiredAdjustment->adjustmentFactor->diffs->if->totalSpan->new->intArr->for->i->maximumAdjustment->Math->abs->Math->min->Math->max->totalOffset->for->i
BoxView#layoutMinorAxis(int, int, int[], int[]):::Performs layout for the minor axis of the box (i.e:::n->getViewCount->for->i
BoxView#calculateMajorAxisRequirements(int, SizeRequirements):::Calculates the size requirements for the major axis axis.:::min->pref->max->n->getViewCount->for->i->if->new->SizeRequirements->return
BoxView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculates the size requirements for the minor axis axis.:::min->pref->max->n->getViewCount->for->i->if->new->SizeRequirements->return
BoxView#checkRequests(int):::Checks the request cache and update if needed.:::if->throw->new->IllegalArgumentException->if->if->calculateMajorAxisRequirements->else->if->calculateMinorAxisRequirements
BoxView#baselineLayout(int, int, int[], int[]):::Computes the location and extent of each child view in this BoxView given the targetSpan, which is the width (or height) of the region we have to work with.:::totalAscent->getAlignment->totalDescent->n->getViewCount->for->i
BoxView#baselineRequirements(int, SizeRequirements):::Calculates the size requirements for this BoxView by examining the size of each child view.:::totalAscent->new->SizeRequirements->totalDescent->new->SizeRequirements->if->new->SizeRequirements->n->getViewCount->for->i->Math->min->if->if->else->if->else->Math->Math->max->round->Math->Math->min->round->return
BoxView#getOffset(int, int):::Fetches the offset of a particular child's current layout.:::offsets->return
BoxView#getSpan(int, int):::Fetches the span of a particular child's current layout.:::spans->return
BoxView#flipEastAndWestAtEnds(int, Position.Bias):::Determines in which direction the next view lays:::if->testPos->Math->max->index->getViewIndexAtPosition->if->v->getView->if->return->flipEastAndWestAtEnds->return
Caret#install(JTextComponent):::Called when the UI is being installed into the interface of a JTextComponent:::
Caret#deinstall(JTextComponent):::Called when the UI is being removed from the interface of a JTextComponent:::
Caret#paint(Graphics):::Renders the caret:::
Caret#addChangeListener(ChangeListener):::Adds a listener to track whenever the caret position has been changed.:::
Caret#removeChangeListener(ChangeListener):::Removes a listener that was tracking caret position changes.:::
Caret#isVisible():::Determines if the caret is currently visible.:::
Caret#setVisible(boolean):::Sets the visibility of the caret.:::
Caret#isSelectionVisible():::Determines if the selection is currently visible.:::
Caret#setSelectionVisible(boolean):::Sets the visibility of the selection:::
Caret#setMagicCaretPosition(Point):::Set the current caret visual location:::
Caret#getMagicCaretPosition():::Gets the current caret visual location.:::
Caret#setBlinkRate(int):::Sets the blink rate of the caret:::
Caret#getBlinkRate():::Gets the blink rate of the caret:::
Caret#getDot():::Fetches the current position of the caret.:::
Caret#getMark():::Fetches the current position of the mark:::
Caret#setDot(int):::Sets the caret position to some position:::
Caret#moveDot(int):::Moves the caret position (dot) to some other position, leaving behind the mark:::
ChangedCharSetException#getCharSetSpec():::Returns the char set specification.:::return
ChangedCharSetException#keyEqualsCharSet():::Returns the char set key.:::return
ComponentView#createComponent():::Create the component that is associated with this view:::attr->getElement->getAttributes->comp->StyleConstants->getComponent->return
ComponentView#getComponent():::Fetch the component associated with the view.:::return
ComponentView#paint(Graphics, Shape):::The real paint behavior occurs naturally from the association that the component has with its parent container (the same container hosting this view):::if->alloc->a->getBounds->c->setBounds
ComponentView#getPreferredSpan(int):::Determines the preferred span for this view along an axis:::if->throw->new->IllegalArgumentException->if->size->c->getPreferredSize->if->return->else->return->return
ComponentView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::if->throw->new->IllegalArgumentException->if->size->c->getMinimumSize->if->return->else->return->return
ComponentView#getMaximumSpan(int):::Determines the maximum span for this view along an axis:::if->throw->new->IllegalArgumentException->if->size->c->getMaximumSize->if->return->else->return->return
ComponentView#getAlignment(int):::Determines the desired alignment for this view along an axis:::if->switch->return->c->getAlignmentX->return->c->getAlignmentY->return->super->getAlignment
ComponentView#setParent(View):::Sets the parent for a child view:::super->setParent->if->SwingUtilities->isEventDispatchThread->setComponentParent->else->callSetComponentParent->new->Runnable->SwingUtilities->invokeLater
ComponentView#setComponentParent():::Set the parent of the embedded component with assurance that it is thread-safe.:::p->getParent->if->parent->getContainer->if->if->comp->createComponent->if->new->Invalidator->if->if->c->getParent->parent->add->parent->addPropertyChangeListener->else->if->parent->c->getParent->if->parent->remove->parent->removePropertyChangeListener
ComponentView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the coordinate space of the model to that of the view.:::p0->getStartOffset->p1->getEndOffset->if->r->a->getBounds->if->return->throw->new->BadLocationException
ComponentView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->if->return->getStartOffset->return->getEndOffset
ComponentView.Invalidator#invalidate():::The components invalid layout needs to be propagated through the view hierarchy so the views (which position the component) can have their layout recomputed.:::super->invalidate->if->getParent->preferenceChanged
ComponentView.Invalidator#setVisible(boolean):::Shows or hides this component depending on the value of parameter b.:::super->setVisible->if->getComponentCount->getComponent->setVisible
ComponentView.Invalidator#isShowing():::Overridden to fix 4759054:::return
CompositeView#loadChildren(ViewFactory):::Loads all of the children to initialize the view:::if->return->e->getElement->n->e->getElementCount->if->added->new->ViewArr->for->i->replace
CompositeView#setParent(View):::Sets the parent of the view:::super->setParent->if->f->getViewFactory->loadChildren
CompositeView#getViewCount():::Returns the number of child views of this view.:::return
CompositeView#getView(int):::Returns the n-th view in this container.:::return
CompositeView#replace(int, int, View[]):::Replaces child views:::if->set->Arrays->asList->new->HashSet<>->for->i->delta->src->nmove->dest->if->newLength->Math->max->newChildren->new->ViewArr->System->arraycopy->System->arraycopy->System->arraycopy->else->System->arraycopy->System->arraycopy->for->i
CompositeView#getChildAllocation(int, Shape):::Fetches the allocation for the given child view to render into:::alloc->getInsideAllocation->childAllocation->return
CompositeView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::isBackward->testPos->Math->max->if->getStartOffset->return->vIndex->getViewIndexAtPosition->if->getViewCount->v->getView->if->v->getStartOffset->v->getEndOffset->childShape->getChildAllocation->if->return->retShape->v->modelToView->if->v->getEndOffset->if->getViewCount->getView->v->getChildAllocation->modelToView->return->throw->new->BadLocationException
CompositeView#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::if->getStartOffset->getEndOffset->return->alloc->getInsideAllocation->r0->new->Rectangle->v0->Math->max->getViewAtPosition->r1->new->Rectangle->v1->Math->max->getViewAtPosition->if->if->return->return->v0->modelToView->viewCount->getViewCount->counter->while->v->if->getView->endView->retRect->tempRect->new->Rectangle->if->v0->v0->getEndOffset->modelToView->getBounds->else->v1->v1->getStartOffset->modelToView->getBounds->while->getView->tempRect->setBounds->childAllocation->retRect->add->if->endShape->if->v1->v1->getStartOffset->modelToView->else->v0->v0->getEndOffset->modelToView->if->retRect->add->else->retRect->endShape->getBounds->add->return->throw->new->BadLocationException
CompositeView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->getInsideAllocation->if->isBefore->retValue->try->getNextVisualPositionFrom->catch->finally->if->getStartOffset->return->else->if->isAfter->retValue->try->getNextVisualPositionFrom->catch->finally->if->getEndOffset->return->else->v->getViewAtPoint->if->return->v->viewToModel->return
CompositeView#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->alloc->getInsideAllocation->switch->return->getNextNorthSouthVisualPositionFrom->return->getNextNorthSouthVisualPositionFrom->return->getNextEastWestVisualPositionFrom->return->getNextEastWestVisualPositionFrom->throw->new->IllegalArgumentException
CompositeView#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::if->if->getStartOffset->getEndOffset->return->getViewIndexAtPosition->return
CompositeView#isBefore(int, int, Rectangle):::Tests whether a point lies before the rectangle range.:::
CompositeView#isAfter(int, int, Rectangle):::Tests whether a point lies after the rectangle range.:::
CompositeView#getViewAtPoint(int, int, Rectangle):::Fetches the child view at the given coordinates.:::
CompositeView#childAllocation(int, Rectangle):::Returns the allocation for a given child.:::
CompositeView#getViewAtPosition(int, Rectangle):::Fetches the child view that represents the given position in the model:::index->getViewIndexAtPosition->if->getViewCount->v->getView->if->childAllocation->return->return
CompositeView#getViewIndexAtPosition(int):::Fetches the child view index representing the given position in the model:::elem->getElement->return->elem->getElementIndex
CompositeView#getInsideAllocation(Shape):::Translates the immutable allocation given to the view to a mutable allocation that represents the interior allocation (i.e:::if->alloc->if->else->a->getBounds->childAlloc->setBounds->getLeftInset->getTopInset->getLeftInset->getRightInset->getTopInset->getBottomInset->return->return
CompositeView#setParagraphInsets(AttributeSet):::Sets the insets from the paragraph attributes specified in the given attributes.:::StyleConstants->getSpaceAbove->StyleConstants->getLeftIndent->StyleConstants->getSpaceBelow->StyleConstants->getRightIndent
CompositeView#setInsets(short, short, short, short):::Sets the insets for the view.:::
CompositeView#getLeftInset():::Gets the left inset.:::return
CompositeView#getRightInset():::Gets the right inset.:::return
CompositeView#getTopInset():::Gets the top inset.:::return
CompositeView#getBottomInset():::Gets the bottom inset.:::return
CompositeView#getNextNorthSouthVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Returns the next visual position for the cursor, in either the north or south direction.:::if->getDocument->getLength->throw->new->BadLocationException->return->Utilities->getNextVisualPositionFrom
CompositeView#getNextEastWestVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Returns the next visual position for the cursor, in either the east or west direction.:::if->getDocument->getLength->throw->new->BadLocationException->return->Utilities->getNextVisualPositionFrom
CompositeView#flipEastAndWestAtEnds(int, Position.Bias):::Determines in which direction the next view lays:::return
DateFormatter#setFormat(DateFormat):::Sets the format that dictates the legal values that can be edited and displayed:::super->setFormat
DateFormatter#getSupportsIncrement():::Returns true, as DateFormatterFilter will support incrementing/decrementing of the value.:::return
DateFormatter#getAdjustField(int, Map):::Returns the field that will be adjusted by adjustValue.:::attrs->attributes->keySet->iterator->while->attrs->hasNext->key->attrs->next->if->getCalendarField->return->return
DateFormatter#adjustValue(Object, Map, Object, int):::Adjusts the Date if FieldPosition identifies a known calendar field.:::if->field->if->getCalendarField->calendar->getCalendar->if->calendar->setTime->fieldValue->calendar->get->try->calendar->add->calendar->getTime->catch->finally->return->return
DefaultCaret#setUpdatePolicy(int):::Sets the caret movement policy on the document updates:::
DefaultCaret#getUpdatePolicy():::Gets the caret movement policy on document updates.:::return
DefaultCaret#getComponent():::Gets the text editor component that this caret is is bound to.:::return
DefaultCaret#repaint():::Cause the caret to be painted:::if->component->repaint
DefaultCaret#damage(Rectangle):::Damages the area surrounding the caret to cause it to be repainted in a new location:::if->damageWidth->getCaretWidth->repaint
DefaultCaret#adjustVisibility(Rectangle):::Scrolls the associated view (if necessary) to make the caret visible:::if->return->if->SwingUtilities->isEventDispatchThread->component->scrollRectToVisible->else->SwingUtilities->new->SafeScroller->invokeLater
DefaultCaret#getSelectionPainter():::Gets the painter for the Highlighter.:::return
DefaultCaret#positionCaret(MouseEvent):::Tries to set the position of the caret from the coordinates of a mouse event, using viewToModel().:::pt->e->getX->e->getY->new->Point->biasRet->new->Position.BiasArr->pos->component->getUI->viewToModel->if->if->setDot
DefaultCaret#moveCaret(MouseEvent):::Tries to move the position of the caret from the coordinates of a mouse event, using viewToModel():::pt->e->getX->e->getY->new->Point->biasRet->new->Position.BiasArr->pos->component->getUI->viewToModel->if->if->moveDot
DefaultCaret#focusGained(FocusEvent):::Called when the component containing the caret gains focus:::if->component->isEnabled->if->component->isEditable->setVisible->setSelectionVisible->updateSystemSelection
DefaultCaret#focusLost(FocusEvent):::Called when the component containing the caret loses focus:::setVisible->e->getCause->e->getOppositeComponent->e->isTemporary->setSelectionVisible
DefaultCaret#mouseClicked(MouseEvent):::Called when the mouse is clicked:::if->getComponent->return->nclicks->SwingUtilities2->getComponent->getAdjustedClickCount->if->e->isConsumed->if->SwingUtilities->isLeftMouseButton->if->else->if->SwingUtilities2->canEventAccessSystemClipboard->selectWord->else->if->SwingUtilities2->canEventAccessSystemClipboard->a->map->getComponent->getActionMap->if->map->get->if->if->new->DefaultEditorKit.SelectLineAction->a->getComponent->e->getWhen->e->getModifiers->new->ActionEvent->actionPerformed->else->if->SwingUtilities->isMiddleMouseButton->if->component->isEditable->component->isEnabled->SwingUtilities2->canEventAccessSystemClipboard->c->e->getSource->if->try->tk->c->getToolkit->buffer->tk->getSystemSelection->if->adjustCaret->th->c->getTransferHandler->if->trans->try->buffer->getContents->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally->if->th->importData->adjustFocus->catch->finally
DefaultCaret#mousePressed(MouseEvent):::If button 1 is pressed, this is implemented to request focus on the associated text component, and to set the caret position:::nclicks->SwingUtilities2->getComponent->getAdjustedClickCount->if->SwingUtilities->isLeftMouseButton->if->e->isConsumed->else->adjustCaretAndFocus->if->SwingUtilities2->canEventAccessSystemClipboard->selectWord
DefaultCaret#mouseReleased(MouseEvent):::Called when the mouse is released.:::if->e->isConsumed->SwingUtilities->isLeftMouseButton->adjustCaretAndFocus
DefaultCaret#mouseEntered(MouseEvent):::Called when the mouse enters a region.:::
DefaultCaret#mouseExited(MouseEvent):::Called when the mouse exits a region.:::
DefaultCaret#mouseDragged(MouseEvent):::Moves the caret position according to the mouse pointer's current location:::if->e->isConsumed->SwingUtilities->isLeftMouseButton->moveCaret
DefaultCaret#mouseMoved(MouseEvent):::Called when the mouse is moved.:::
DefaultCaret#paint(Graphics):::Renders the caret as a vertical line:::if->isVisible->try->mapper->component->getUI->r->mapper->modelToView->if->return->if->this->_contains->clip->g->getClipBounds->if->clip->contains->repaint->damage->g->component->getCaretColor->setColor->paintWidth->getCaretWidth->g->fillRect->doc->component->getDocument->if->bidi->getBidiRootElement->if->bidi->getElementCount->g->fillPolygon->catch->finally
DefaultCaret#install(JTextComponent):::Called when the UI is being installed into the interface of a JTextComponent:::doc->c->getDocument->if->doc->addDocumentListener->c->addPropertyChangeListener->c->addFocusListener->c->addMouseListener->c->addMouseMotionListener->if->component->hasFocus->focusGained->ratio->c->getClientProperty->if->ratio->floatValue->else->width->c->getClientProperty->if->width->intValue->else
DefaultCaret#deinstall(JTextComponent):::Called when the UI is being removed from the interface of a JTextComponent:::c->removeMouseListener->c->removeMouseMotionListener->c->removeFocusListener->c->removePropertyChangeListener->doc->c->getDocument->if->doc->removeDocumentListener->synchronized->if->flasher->stop
DefaultCaret#addChangeListener(ChangeListener):::Adds a listener to track whenever the caret position has been changed.:::listenerList->add
DefaultCaret#removeChangeListener(ChangeListener):::Removes a listener that was tracking caret position changes.:::listenerList->remove
DefaultCaret#getChangeListeners():::Returns an array of all the change listeners registered on this caret.:::return->listenerList->getListeners
DefaultCaret#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultCaret#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this caret:::return->listenerList->getListeners
DefaultCaret#setSelectionVisible(boolean):::Changes the selection visibility.:::if->if->h->component->getHighlighter->if->p0->Math->min->p1->Math->max->p->getSelectionPainter->try->h->addHighlight->catch->finally->else->if->h->component->getHighlighter->h->removeHighlight
DefaultCaret#isSelectionVisible():::Checks whether the current selection is visible.:::return
DefaultCaret#isActive():::Determines if the caret is currently active:::return
DefaultCaret#isVisible():::Indicates whether or not the caret is currently visible:::return
DefaultCaret#setVisible(boolean):::Sets the caret visibility, and repaints the caret:::if->mapper->component->getUI->if->try->loc->mapper->modelToView->damage->catch->finally->if->if->flasher->start->else->flasher->stop
DefaultCaret#setBlinkRate(int):::Sets the caret blink rate.:::if->if->new->Timer->flasher->setDelay->else->if->flasher->stop->flasher->removeActionListener
DefaultCaret#getBlinkRate():::Gets the caret blink rate.:::return->flasher->getDelay
DefaultCaret#getDot():::Fetches the current position of the caret.:::return
DefaultCaret#getMark():::Fetches the current position of the mark:::return
DefaultCaret#setDot(int):::Sets the caret position and mark to the specified position, with a forward bias:::setDot
DefaultCaret#moveDot(int):::Moves the caret position to the specified position, with a forward bias.:::moveDot
DefaultCaret#moveDot(int, Position.Bias):::Moves the caret position to the specified position, with the specified bias.:::if->throw->new->IllegalArgumentException->if->component->isEnabled->setDot->return->if->filter->component->getNavigationFilter->if->filter->getFilterBypass->moveDot->else->handleMoveDot
DefaultCaret#setDot(int, Position.Bias):::Sets the caret position and mark to the specified position, with the specified bias:::if->throw->new->IllegalArgumentException->filter->component->getNavigationFilter->if->filter->getFilterBypass->setDot->else->handleSetDot
DefaultCaret#getDotBias():::Returns the bias of the caret position.:::return
DefaultCaret#getMarkBias():::Returns the bias of the mark.:::return
DefaultCaret#changeCaretPosition(int, Position.Bias):::Sets the caret position (dot) to a new location:::repaint->if->flasher->isRunning->flasher->restart->isPositionLTR->fireStateChanged->updateSystemSelection->setMagicCaretPosition->callRepaintNewCaret->new->Runnable->SwingUtilities->invokeLater
DefaultCaret#repaintNewCaret():::Repaints the new caret position, with the assumption that this is happening on the event thread so that calling modelToView is safe.:::if->mapper->component->getUI->doc->component->getDocument->if->newLoc->try->mapper->modelToView->catch->finally->if->adjustVisibility->if->getMagicCaretPosition->new->Point->setMagicCaretPosition->damage
DefaultCaret#setMagicCaretPosition(Point):::Saves the current caret position:::
DefaultCaret#getMagicCaretPosition():::Gets the saved caret position.:::return
DefaultCaret#equals(Object):::Compares this object to the specified object:::return
DefaultCaret.Handler#actionPerformed(ActionEvent):::Invoked when the blink timer fires:::if->if->mapper->component->getUI->try->r->mapper->modelToView->if->damage->catch->finally->repaint
DefaultCaret.Handler#insertUpdate(DocumentEvent):::Updates the dot and mark if they were changed by the insertion.:::if->getUpdatePolicy->getUpdatePolicy->SwingUtilities->isEventDispatchThread->if->e->getOffset->e->getOffset->try->component->getHighlighter->Math->min->Math->max->changeHighlight->catch->e1->printStackTrace->finally->return->offset->e->getOffset->length->e->getLength->newDot->changed->if->setDot->return->if->newMark->if->if->dotBias->if->doc->component->getDocument->isNewline->try->s->new->Segment->doc->getText->catch->finally->if->else->if->setDot->ensureValidPosition->else->setDot->if->getDot->moveDot->ensureValidPosition
DefaultCaret.Handler#removeUpdate(DocumentEvent):::Updates the dot and mark if they were changed by the removal.:::if->getUpdatePolicy->getUpdatePolicy->SwingUtilities->isEventDispatchThread->length->component->getDocument->getLength->Math->min->Math->min->if->e->getOffset->e->getOffset->try->component->getHighlighter->Math->min->Math->max->changeHighlight->catch->e1->printStackTrace->finally->return->offs0->e->getOffset->offs1->e->getLength->newDot->adjustDotBias->newMark->adjustMarkBias->if->setDot->return->if->if->else->if->if->if->else->if->if->try->guessBiasForOffset->setDot->catch->finally->ensureValidPosition->else->dotBias->markBias->if->guessBiasForOffset->if->guessBiasForOffset->setDot->if->getDot->moveDot->ensureValidPosition
DefaultCaret.Handler#changedUpdate(DocumentEvent):::Gives notification that an attribute or set of attributes changed.:::if->getUpdatePolicy->getUpdatePolicy->SwingUtilities->isEventDispatchThread->return->if->e->getOffset->e->getLength->setDot
DefaultCaret.Handler#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed:::oldValue->evt->getOldValue->newValue->evt->getNewValue->if->setDot->if->removeDocumentListener->if->addDocumentListener->else->if->evt->getPropertyName->equals->enabled->evt->getNewValue->if->component->isFocusOwner->if->if->component->isEditable->setVisible->setSelectionVisible->else->setVisible->setSelectionVisible->else->if->evt->getPropertyName->equals->newWidth->evt->getNewValue->if->newWidth->intValue->else->repaint->else->if->evt->getPropertyName->equals->newRatio->evt->getNewValue->if->newRatio->floatValue->else->repaint
DefaultCaret.Handler#lostOwnership(Clipboard, Transferable):::Toggles the visibility of the selection when ownership is lost.:::if->if->component->hasFocus->setSelectionVisible
DefaultEditorKit#getContentType():::Gets the MIME type of the data that this kit represents support for:::return
DefaultEditorKit#getViewFactory():::Fetches a factory that is suitable for producing views of any models that are produced by this kit:::return
DefaultEditorKit#getActions():::Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.:::return->defaultActions->clone
DefaultEditorKit#createCaret():::Fetches a caret that can navigate through views produced by the associated ViewFactory.:::return
DefaultEditorKit#createDefaultDocument():::Creates an uninitialized text storage model (PlainDocument) that is appropriate for this type of editor.:::return->new->PlainDocument
DefaultEditorKit#read(InputStream, Document, int):::Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.:::new->InputStreamReader->read
DefaultEditorKit#write(OutputStream, Document, int, int):::Writes content from a document to the given stream in a format appropriate for this kind of content handler.:::osw->new->OutputStreamWriter->write->osw->flush
DefaultEditorKit#getInputAttributes():::Gets the input attributes for the pane:::return
DefaultEditorKit#read(Reader, Document, int):::Inserts content from the given stream, which will be treated as plain text.:::buff->new->charArr->nch->lastWasCR->isCRLF->isCR->last->wasEmpty->doc->getLength->attr->getInputAttributes->while->in->read->for->counter->if->if->if->doc->new->String->insertString->else->doc->new->String->insertString->if->doc->insertString->if->if->doc->putProperty->else->if->doc->putProperty->else->doc->putProperty
DefaultEditorKit#write(Writer, Document, int, int):::Writes content from a document to the given stream as plain text.:::if->doc->getLength->throw->new->BadLocationException->data->new->Segment->nleft->offs->endOfLineProperty->doc->getProperty->if->System->lineSeparator->endOfLine->if->else->if->endOfLine->equals->while->n->Math->min->doc->getText->last->array->maxCounter->for->counter->if->out->write->else->while->n->Math->min->doc->getText->out->write->out->flush
DefaultEditorKit.DefaultKeyTypedAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->isEditable->target->isEnabled->return->content->e->getActionCommand->mod->e->getModifiers->if->content->length->isPrintableMask->tk->Toolkit->getDefaultToolkit->if->isPrintableCharacterModifiersMask->c->content->charAt->if->target->replaceSelection
DefaultEditorKit.InsertContentAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->isEditable->target->isEnabled->UIManager->getLookAndFeel->provideErrorFeedback->return->content->e->getActionCommand->if->target->replaceSelection->else->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.InsertBreakAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->isEditable->target->isEnabled->UIManager->getLookAndFeel->provideErrorFeedback->return->target->replaceSelection
DefaultEditorKit.InsertTabAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->isEditable->target->isEnabled->UIManager->getLookAndFeel->provideErrorFeedback->return->target->replaceSelection
DefaultEditorKit.DeletePrevCharAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->beep->if->target->isEditable->try->doc->target->getDocument->caret->target->getCaret->dot->caret->getDot->mark->caret->getMark->if->doc->Math->min->Math->abs->remove->else->if->delChars->if->dotChars->doc->getText->c0->dotChars->charAt->c1->dotChars->charAt->if->doc->remove->catch->finally->if->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.DeleteNextCharAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->beep->if->target->isEditable->try->doc->target->getDocument->caret->target->getCaret->dot->caret->getDot->mark->caret->getMark->if->doc->Math->min->Math->abs->remove->else->if->doc->getLength->delChars->if->doc->getLength->dotChars->doc->getText->c0->dotChars->charAt->c1->dotChars->charAt->if->doc->remove->catch->finally->if->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.DeleteWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->isEditable->target->isEnabled->UIManager->getLookAndFeel->provideErrorFeedback->return->beep->try->start->target->getSelectionStart->line->Utilities->getParagraphElement->end->if->getValue->Utilities->getNextWordInParagraph->if->endOfLine->line->getEndOffset->if->else->else->Utilities->getPrevWordInParagraph->if->startOfLine->line->getStartOffset->if->else->offs->Math->min->len->Math->abs->if->target->getDocument->remove->catch->finally->if->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.ReadOnlyAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->setEditable
DefaultEditorKit.WritableAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->setEditable
DefaultEditorKit.CutAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->cut
DefaultEditorKit.CopyAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->copy
DefaultEditorKit.PasteAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->paste
DefaultEditorKit.BeepAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.VerticalPageAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->visible->target->getVisibleRect->newVis->new->Rectangle->selectedIndex->target->getCaretPosition->scrollAmount->target->getScrollableBlockIncrement->initialY->caret->target->getCaret->magicPosition->caret->getMagicCaretPosition->if->try->dotBounds->target->modelToView->x->h->if->constrainY->newIndex->if->visible->contains->target->constrainY->new->Point->viewToModel->else->if->target->new->Point->viewToModel->else->target->new->Point->viewToModel->constrainOffset->if->newY->getAdjustedY->if->if->target->moveCaretPosition->else->target->setCaretPosition->else->if->catch->finally->else->constrainY->if->caret->setMagicCaretPosition->target->scrollRectToVisible
DefaultEditorKit.PageAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->selectedIndex->visible->new->Rectangle->target->computeVisibleRect->if->Math->max->else->target->getCaretPosition->if->if->target->new->Point->viewToModel->else->target->new->Point->viewToModel->doc->target->getDocument->if->doc->getLength->doc->getLength->else->if->if->target->moveCaretPosition->else->target->setCaretPosition
DefaultEditorKit.NextVisualPositionAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->caret->target->getCaret->bidiCaret->dot->caret->getDot->bias->new->Position.BiasArr->magicPosition->caret->getMagicCaretPosition->try->if->r->target->getUI->bidiCaret->getDotBias->modelToView->target->modelToView->new->Point->filter->target->getNavigationFilter->if->filter->bidiCaret->getDotBias->getNextVisualPositionFrom->else->target->getUI->bidiCaret->getDotBias->getNextVisualPositionFrom->if->if->if->bidiCaret->moveDot->else->bidiCaret->setDot->else->if->caret->moveDot->else->caret->setDot->if->target->getCaret->setMagicCaretPosition->catch->finally
DefaultEditorKit.BeginWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->try->offs->target->getCaretPosition->begOffs->Utilities->getWordStart->if->target->moveCaretPosition->else->target->setCaretPosition->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
DefaultEditorKit.EndWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->try->offs->target->getCaretPosition->endOffs->Utilities->getWordEnd->if->target->moveCaretPosition->else->target->setCaretPosition->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
DefaultEditorKit.PreviousWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->offs->target->getCaretPosition->failed->try->curPara->Utilities->getParagraphElement->Utilities->getPreviousWord->if->curPara->getStartOffset->Utilities->getParagraphElement->getEndOffset->catch->if->else->finally->if->if->target->moveCaretPosition->else->target->setCaretPosition->else->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.NextWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->offs->target->getCaretPosition->failed->oldOffs->curPara->Utilities->getParagraphElement->try->Utilities->getNextWord->if->curPara->getEndOffset->curPara->getEndOffset->curPara->getEndOffset->catch->end->target->getDocument->getLength->if->if->curPara->getEndOffset->curPara->getEndOffset->else->else->finally->if->if->target->moveCaretPosition->else->target->setCaretPosition->else->UIManager->getLookAndFeel->provideErrorFeedback
DefaultEditorKit.BeginLineAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->try->offs->target->getCaretPosition->begOffs->Utilities->getRowStart->if->target->moveCaretPosition->else->target->setCaretPosition->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
DefaultEditorKit.EndLineAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->try->offs->target->getCaretPosition->endOffs->Utilities->getRowEnd->if->target->moveCaretPosition->else->target->setCaretPosition->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
DefaultEditorKit.BeginParagraphAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->offs->target->getCaretPosition->elem->Utilities->getParagraphElement->elem->getStartOffset->if->target->moveCaretPosition->else->target->setCaretPosition
DefaultEditorKit.EndParagraphAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->offs->target->getCaretPosition->elem->Utilities->getParagraphElement->Math->target->getDocument->getLength->elem->getEndOffset->min->if->target->moveCaretPosition->else->target->setCaretPosition
DefaultEditorKit.BeginAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->if->target->moveCaretPosition->else->target->setCaretPosition
DefaultEditorKit.EndAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->doc->target->getDocument->dot->doc->getLength->if->target->moveCaretPosition->else->target->setCaretPosition
DefaultEditorKit.SelectWordAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::start->actionPerformed->end->actionPerformed
DefaultEditorKit.SelectLineAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::start->actionPerformed->end->actionPerformed
DefaultEditorKit.SelectParagraphAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::start->actionPerformed->end->actionPerformed
DefaultEditorKit.SelectAllAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->doc->target->getDocument->target->setCaretPosition->target->doc->getLength->moveCaretPosition
DefaultEditorKit.UnselectAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->target->target->getCaretPosition->setCaretPosition
DefaultEditorKit.ToggleComponentOrientationAction#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::target->getTextComponent->if->last->target->getComponentOrientation->next->if->else->target->setComponentOrientation->target->repaint
DefaultFormatter#install(JFormattedTextField):::Installs the DefaultFormatter onto a particular JFormattedTextField:::super->install->positionCursorAtInitialLocation
DefaultFormatter#setCommitsOnValidEdit(boolean):::Sets when edits are published back to the JFormattedTextField:::
DefaultFormatter#getCommitsOnValidEdit():::Returns when edits are published back to the JFormattedTextField.:::return
DefaultFormatter#setOverwriteMode(boolean):::Configures the behavior when inserting characters:::
DefaultFormatter#getOverwriteMode():::Returns the behavior when inserting characters.:::return
DefaultFormatter#setAllowsInvalid(boolean):::Sets whether or not the value being edited is allowed to be invalid for a length of time (that is, stringToValue throws a ParseException):::
DefaultFormatter#getAllowsInvalid():::Returns whether or not the value being edited is allowed to be invalid for a length of time.:::return
DefaultFormatter#setValueClass(Class):::Sets that class that is used to create new Objects:::
DefaultFormatter#getValueClass():::Returns that class that is used to create new Objects.:::return
DefaultFormatter#stringToValue(String):::Converts the passed in String into an instance of getValueClass by way of the constructor that takes a String argument:::vc->getValueClass->ftf->getFormattedTextField->if->value->ftf->getValue->if->value->getClass->if->cons->try->ReflectUtil->checkPackageAccess->SwingUtilities2->vc->getModifiers->checkAccess->vc->new->Class<?>Arr->getConstructor->catch->finally->if->try->SwingUtilities2->cons->getModifiers->checkAccess->return->cons->new->ObjectArr->newInstance->catch->throw->new->ParseException->finally->return
DefaultFormatter#valueToString(Object):::Converts the passed in Object into a String by way of the toString method.:::if->return->return->value->toString
DefaultFormatter#getDocumentFilter():::Returns the DocumentFilter used to restrict the characters that can be input into the JFormattedTextField.:::if->new->DefaultDocumentFilter->return
DefaultFormatter#getNavigationFilter():::Returns the NavigationFilter used to restrict where the cursor can be placed.:::if->new->DefaultNavigationFilter->return
DefaultFormatter#clone():::Creates a copy of the DefaultFormatter.:::formatter->super->clone->return
DefaultFormatter#positionCursorAtInitialLocation():::Positions the cursor at the initial location.:::ftf->getFormattedTextField->if->ftf->getInitialVisualPosition->setCaretPosition
DefaultFormatter#getInitialVisualPosition():::Returns the initial location to position the cursor at:::return->getNextNavigatableChar
DefaultFormatter#isNavigatable(int):::Subclasses should override this if they want cursor navigation to skip certain characters:::return
DefaultFormatter#isLegalInsertText(String):::Returns true if the text in text can be inserted:::return
DefaultFormatter#getReplaceString(int, int, String):::A convenience methods to return the result of deleting deleteLength characters at offset and inserting replaceString at offset in the current text field.:::string->getFormattedTextField->getText->result->string->substring->if->if->string->length->string->substring->return
DefaultFormatter#commitEdit():::Invokes commitEdit on the JFormattedTextField.:::ftf->getFormattedTextField->if->ftf->commitEdit
DefaultFormatter#updateValue():::Pushes the value to the JFormattedTextField if the current value is valid and invokes setEditValid based on the validity of the value.:::updateValue
DefaultFormatter#updateValue(Object):::Pushes the value to the editor if we are to commit on edits:::try->if->string->getFormattedTextField->getText->stringToValue->if->getCommitsOnValidEdit->commitEdit->setEditValid->catch->setEditValid->finally
DefaultFormatter#getNextCursorPosition(int, int):::Returns the next cursor position from offset by incrementing direction:::newOffset->getNextNavigatableChar->max->getFormattedTextField->getDocument->getLength->if->getAllowsInvalid->if->getNextNavigatableChar->if->else->if->getNextNavigatableChar->if->return
DefaultFormatter#repositionCursor(int, int):::Resets the cursor by using getNextCursorPosition.:::getFormattedTextField->getCaret->getNextCursorPosition->setDot
DefaultFormatter#getNextVisualPositionFrom(JTextComponent, int, Position.Bias, int, Position.Bias[]):::Finds the next navigable character.:::value->text->getUI->getNextVisualPositionFrom->if->return->if->getAllowsInvalid->last->while->isNavigatable->text->getUI->getNextVisualPositionFrom->max->getFormattedTextField->getDocument->getLength->if->if->getInitialVisualPosition->if->getNextNavigatableChar->return
DefaultFormatter#canReplace(ReplaceHolder):::Returns true if the edit described by rh will result in a legal value.:::return->isValidEdit
DefaultFormatter#replace(DocumentFilter.FilterBypass, int, int, String, AttributeSet):::DocumentFilter method, funnels into replace.:::rh->getReplaceHolder->replace
DefaultFormatter#replace(ReplaceHolder):::If the edit described by rh is legal, this will return true, commit the edit (if necessary) and update the cursor position:::valid->direction->if->length->getFormattedTextField->getSelectionStart->if->getOverwriteMode->getFormattedTextField->getSelectedText->Math->Math->length->max->getDocument->getLength->min->if->isLegalInsertText->canReplace->length->if->cursor->replace->if->if->length->updateValue->repositionCursor->return->else->invalidEdit->return
DefaultFormatter#setDot(NavigationFilter.FilterBypass, int, Position.Bias):::NavigationFilter method, subclasses that wish finer control should override this.:::fb->setDot
DefaultFormatter#moveDot(NavigationFilter.FilterBypass, int, Position.Bias):::NavigationFilter method, subclasses that wish finer control should override this.:::fb->moveDot
DefaultFormatter#getReplaceHolder(DocumentFilter.FilterBypass, int, int, String, AttributeSet):::Returns the ReplaceHolder to track the replace of the specified text.:::if->new->ReplaceHolder->replaceHolder->reset->return
DefaultFormatterFactory#setDefaultFormatter(JFormattedTextField.AbstractFormatter):::Sets the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.:::
DefaultFormatterFactory#getDefaultFormatter():::Returns the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.:::return
DefaultFormatterFactory#setDisplayFormatter(JFormattedTextField.AbstractFormatter):::Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.:::
DefaultFormatterFactory#getDisplayFormatter():::Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.:::return
DefaultFormatterFactory#setEditFormatter(JFormattedTextField.AbstractFormatter):::Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.:::
DefaultFormatterFactory#getEditFormatter():::Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.:::return
DefaultFormatterFactory#setNullFormatter(JFormattedTextField.AbstractFormatter):::Sets the formatter to use if the value of the JFormattedTextField is null.:::
DefaultFormatterFactory#getNullFormatter():::Returns the formatter to use if the value is null.:::return
DefaultFormatterFactory#getFormatter(JFormattedTextField):::Returns either the default formatter, display formatter, editor formatter or null formatter based on the state of the JFormattedTextField.:::format->if->return->value->source->getValue->if->getNullFormatter->if->if->source->hasFocus->getEditFormatter->else->getDisplayFormatter->if->getDefaultFormatter->return
DefaultHighlighter#paint(Graphics):::Renders the highlights.:::len->highlights->size->for->i
DefaultHighlighter#install(JTextComponent):::Called when the UI is being installed into the interface of a JTextComponent:::removeAllHighlights
DefaultHighlighter#deinstall(JTextComponent):::Called when the UI is being removed from the interface of a JTextComponent.:::
DefaultHighlighter#addHighlight(int, int, Highlighter.HighlightPainter):::Adds a highlight to the view:::if->throw->new->BadLocationException->if->throw->new->BadLocationException->doc->component->getDocument->i->getDrawsLayeredHighlights->new->LayeredHighlightInfo->new->HighlightInfo->doc->createPosition->doc->createPosition->highlights->addElement->safeDamageRange->return
DefaultHighlighter#removeHighlight(Object):::Removes a highlight from the view.:::if->lhi->if->component->repaint->else->info->safeDamageRange->highlights->removeElement
DefaultHighlighter#removeAllHighlights():::Removes all highlights.:::mapper->component->getUI->if->getDrawsLayeredHighlights->len->highlights->size->if->minX->minY->maxX->maxY->p0->p1->for->i->if->component->repaint->if->try->safeDamageRange->catch->finally->highlights->removeAllElements->else->if->len->highlights->size->if->p0->p1->for->i->try->safeDamageRange->catch->finally->highlights->removeAllElements
DefaultHighlighter#changeHighlight(Object, int, int):::Changes a highlight.:::if->throw->new->BadLocationException->if->throw->new->BadLocationException->doc->component->getDocument->if->lhi->if->component->repaint->doc->createPosition->doc->createPosition->Math->min->Math->max->safeDamageRange->else->info->oldP0->getOffset->oldP1->getOffset->if->Math->min->Math->max->safeDamageRange->else->if->Math->min->Math->max->safeDamageRange->else->safeDamageRange->safeDamageRange->doc->createPosition->doc->createPosition
DefaultHighlighter#getHighlights():::Makes a copy of the highlights:::size->highlights->size->if->return->h->new->Highlighter.HighlightArr->highlights->copyInto->return
DefaultHighlighter#paintLayeredHighlights(Graphics, int, int, Shape, JTextComponent, View):::When leaf Views (such as LabelView) are rendering they should call into this method:::for->counter->highlights->size
DefaultHighlighter#setDrawsLayeredHighlights(boolean):::If true, highlights are drawn as the Views draw the text:::
DefaultHighlighter#getDrawsLayeredHighlights():::Return the draw layered highlights.:::return
DefaultHighlighter.DefaultHighlightPainter#getColor():::Returns the color of the highlight.:::return
DefaultHighlighter.DefaultHighlightPainter#paint(Graphics, int, int, Shape, JTextComponent):::Paints a highlight.:::alloc->bounds->getBounds->try->mapper->c->getUI->p0->mapper->modelToView->p1->mapper->modelToView->color->getColor->if->g->c->getSelectionColor->setColor->else->g->setColor->if->r->p0->union->g->fillRect->else->p0ToMarginWidth->g->fillRect->if->g->fillRect->g->fillRect->catch->finally
DefaultHighlighter.DefaultHighlightPainter#paintLayer(Graphics, int, int, Shape, JTextComponent, View):::Paints a portion of a highlight.:::color->getColor->if->g->c->getSelectionColor->setColor->else->g->setColor->r->if->view->getStartOffset->view->getEndOffset->if->else->bounds->getBounds->else->try->shape->view->modelToView->shape->getBounds->catch->finally->if->Math->max->g->fillRect->return
DefaultHighlighter.LayeredHighlightInfo#paintLayeredHighlights(Graphics, int, int, Shape, JTextComponent, View):::Restricts the region based on the receivers offsets and messages the painter to paint the region.:::start->getStartOffset->end->getEndOffset->Math->max->Math->min->paintLayer->union
DefaultHighlighter.SafeDamager#run():::Executes range(s) damage and cleans range queue.:::if->mapper->component->getUI->if->component->getDocument->len->p0->size->for->i->p0->clear->p1->clear
DefaultHighlighter.SafeDamager#damageRange(Position, Position):::Adds the range to be damaged into the range queue:::if->p0->clear->return->addToQueue->p0->isEmpty->curDoc->component->getDocument->if->if->p0->isEmpty->p0->clear->p1->clear->p0->add->p1->add->if->SwingUtilities->invokeLater
DefaultStyledDocument#getDefaultRootElement():::Gets the default root element.:::return->buffer->getRootElement
DefaultStyledDocument#create(ElementSpec[]):::Initialize the document to reflect the given element structure (i.e:::try->if->getLength->getLength->remove->writeLock->c->getContent->n->sb->new->StringBuilder->for->i->cEdit->c->sb->toString->insertString->length->sb->length->evnt->new->DefaultDocumentEvent->evnt->addEdit->buffer->create->super->insertUpdate->evnt->end->fireInsertUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->throw->new->StateInvariantError->finally->writeUnlock
DefaultStyledDocument#insert(int, ElementSpec[]):::Inserts new elements in bulk:::if->return->try->writeLock->c->getContent->n->sb->new->StringBuilder->for->i->if->sb->length->return->cEdit->c->sb->toString->insertString->length->sb->length->evnt->new->DefaultDocumentEvent->evnt->addEdit->buffer->insert->super->insertUpdate->evnt->end->fireInsertUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->finally->writeUnlock
DefaultStyledDocument#removeElement(Element):::Removes an element from this document:::try->writeLock->removeElementImpl->catch->finally->writeUnlock
DefaultStyledDocument#addStyle(String, Style):::Adds a new style into the logical style hierarchy:::styles->getAttributeContext->return->styles->addStyle
DefaultStyledDocument#removeStyle(String):::Removes a named style previously added to the document.:::styles->getAttributeContext->styles->removeStyle
DefaultStyledDocument#getStyle(String):::Fetches a named style previously added.:::styles->getAttributeContext->return->styles->getStyle
DefaultStyledDocument#getStyleNames():::Fetches the list of style names.:::return->getAttributeContext->getStyleNames
DefaultStyledDocument#setLogicalStyle(int, Style):::Sets the logical style to use for the paragraph at the given position:::paragraph->getParagraphElement->if->try->writeLock->edit->new->StyleChangeUndoableEdit->setResolveParent->p0->paragraph->getStartOffset->p1->paragraph->getEndOffset->e->new->DefaultDocumentEvent->e->addEdit->e->end->fireChangedUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->finally->writeUnlock
DefaultStyledDocument#getLogicalStyle(int):::Fetches the logical style assigned to the paragraph represented by the given position.:::s->paragraph->getParagraphElement->if->a->paragraph->getAttributes->parent->a->getResolveParent->if->return
DefaultStyledDocument#setCharacterAttributes(int, int, AttributeSet, boolean):::Sets attributes for some part of the document:::if->return->try->writeLock->changes->new->DefaultDocumentEvent->buffer->change->sCopy->s->copyAttributes->lastEnd->for->pos->changes->end->fireChangedUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->finally->writeUnlock
DefaultStyledDocument#setParagraphAttributes(int, int, AttributeSet, boolean):::Sets attributes for a paragraph:::try->writeLock->changes->new->DefaultDocumentEvent->sCopy->s->copyAttributes->section->getDefaultRootElement->index0->section->getElementIndex->index1->section->getElementIndex->isI18N->getProperty->equals->hasRuns->for->i->if->updateBidi->changes->end->fireChangedUpdate->new->UndoableEditEvent->fireUndoableEditUpdate->catch->finally->writeUnlock
DefaultStyledDocument#getParagraphElement(int):::Gets the paragraph element at the offset pos:::e->for->getDefaultRootElement->e->isLeaf->if->return->e->getParentElement->return
DefaultStyledDocument#getCharacterElement(int):::Gets a character element based on a position.:::e->for->getDefaultRootElement->e->isLeaf->return
DefaultStyledDocument#insertUpdate(DefaultDocumentEvent, AttributeSet):::Updates document structure as a result of text insertion:::offset->chng->getOffset->length->chng->getLength->if->paragraph->getParagraphElement->pattr->paragraph->getAttributes->pParagraph->getParagraphElement->run->pParagraph->pParagraph->getElementIndex->getElement->endOffset->insertingAtBoundry->run->getEndOffset->cattr->run->getAttributes->try->s->new->Segment->parseBuffer->new->Vector<ElementSpec>->lastStartSpec->insertingAfterNewline->lastStartDirection->if->getText->if->createSpecsForInsertAfterNewline->for->counter->parseBuffer->size->if->pParagraph->getAttributes->getText->txt->n->lastOffset->for->i->if->parseBuffer->new->ElementSpec->addElement->first->parseBuffer->firstElement->docLength->getLength->if->first->getType->cattr->isEqual->first->setDirection->if->if->lastStartSpec->setDirection->else->if->pParagraph->getEndOffset->lastStartSpec->setDirection->else->parent->pParagraph->getParentElement->pParagraphIndex->parent->getElementIndex->if->parent->getElementCount->parent->getElement->isLeaf->lastStartSpec->setDirection->if->last->parseBuffer->lastElement->if->last->getType->last->getDirection->lastStartSpec->getDirection->nextRun->paragraph->paragraph->getElementIndex->getElement->if->nextRun->isLeaf->attr->nextRun->getAttributes->isEqual->last->setDirection->else->if->lastStartSpec->getDirection->last->parseBuffer->lastElement->if->last->getType->last->getDirection->attr->isEqual->last->setDirection->if->Utilities->isComposedTextAttributeDefined->mattr->mattr->addAttributes->mattr->addAttribute->mattr->addAttribute->if->mattr->isDefined->mattr->removeAttribute->spec->parseBuffer->size->new->ElementSpecArr->parseBuffer->copyInto->buffer->insert->catch->finally->super->insertUpdate
DefaultStyledDocument#createSpecsForInsertAfterNewline(Element, Element, AttributeSet, Vector, int, int):::This is called by insertUpdate when inserting after a new line:::if->paragraph->getParentElement->pParagraph->getParentElement->spec->new->ElementSpec->parseBuffer->addElement->new->ElementSpec->parseBuffer->addElement->if->pParagraph->getEndOffset->return->parent->pParagraph->getParentElement->if->parent->getElementIndex->parent->getElementCount->return->else->leftParents->new->Vector<Element>->rightParents->new->Vector<Element>->e->while->leftParents->addElement->e->getParentElement->leftIndex->while->leftParents->indexOf->rightParents->addElement->e->getParentElement->if->for->counter->spec->for->counter->rightParents->size->if->rightParents->size->return->return->return
DefaultStyledDocument#removeUpdate(DefaultDocumentEvent):::Updates document structure as a result of text removal.:::super->removeUpdate->buffer->chng->getOffset->chng->getLength->remove
DefaultStyledDocument#createDefaultRoot():::Creates the root element to be used to represent the default document structure.:::writeLock->section->new->SectionElement->paragraph->new->BranchElement->brk->new->LeafElement->buff->new->ElementArr->paragraph->replace->section->replace->writeUnlock->return
DefaultStyledDocument#getForeground(AttributeSet):::Gets the foreground color from an attribute set.:::styles->getAttributeContext->return->styles->getForeground
DefaultStyledDocument#getBackground(AttributeSet):::Gets the background color from an attribute set.:::styles->getAttributeContext->return->styles->getBackground
DefaultStyledDocument#getFont(AttributeSet):::Gets the font from an attribute set.:::styles->getAttributeContext->return->styles->getFont
DefaultStyledDocument#styleChanged(Style):::Called when any of this document's styles have changed:::if->getLength->if->new->ChangeUpdateRunnable->synchronized->if->SwingUtilities->invokeLater
DefaultStyledDocument#addDocumentListener(DocumentListener):::Adds a document listener for notification of any changes.:::synchronized->oldDLCount->listenerList->getListenerCount->super->addDocumentListener->if->if->createStyleContextChangeListener->if->styles->getAttributeContext->staleListeners->AbstractChangeHandler->getStaleListeners->foreach->styles->removeChangeListener->styles->addChangeListener->updateStylesListeningTo
DefaultStyledDocument#removeDocumentListener(DocumentListener):::Removes a document listener.:::synchronized->super->removeDocumentListener->if->listenerList->getListenerCount->for->counter->listeningStyles->size->listeningStyles->removeAllElements->if->styles->getAttributeContext->styles->removeChangeListener
DefaultStyledDocument#createStyleChangeListener():::Returns a new instance of StyleChangeHandler.:::return->new->StyleChangeHandler
DefaultStyledDocument#createStyleContextChangeListener():::Returns a new instance of StyleContextChangeHandler.:::return->new->StyleContextChangeHandler
DefaultStyledDocument#updateStylesListeningTo():::Adds a ChangeListener to new styles, and removes ChangeListener from old styles.:::synchronized->styles->getAttributeContext->if->createStyleChangeListener->if->styleNames->styles->getStyleNames->v->listeningStyles->clone->listeningStyles->removeAllElements->staleListeners->AbstractChangeHandler->getStaleListeners->while->styleNames->hasMoreElements->name->styleNames->nextElement->aStyle->styles->getStyle->index->v->indexOf->listeningStyles->addElement->if->foreach->aStyle->removeChangeListener->aStyle->addChangeListener->else->v->removeElementAt->for->counter->v->size->if->listeningStyles->size
DefaultStyledDocument.SectionElement#getName():::Gets the name of the element.:::return
DefaultStyledDocument.ElementSpec#setType(short):::Sets the element type.:::
DefaultStyledDocument.ElementSpec#getType():::Gets the element type.:::return
DefaultStyledDocument.ElementSpec#setDirection(short):::Sets the direction.:::
DefaultStyledDocument.ElementSpec#getDirection():::Gets the direction.:::return
DefaultStyledDocument.ElementSpec#getAttributes():::Gets the element attributes.:::return
DefaultStyledDocument.ElementSpec#getArray():::Gets the array of characters.:::return->Arrays->copyOf
DefaultStyledDocument.ElementSpec#getOffset():::Gets the starting offset.:::return
DefaultStyledDocument.ElementSpec#getLength():::Gets the length.:::return
DefaultStyledDocument.ElementSpec#toString():::Converts the element to a string.:::tlbl->plbl->switch->break->break->break->switch->break->break->break->break->return->getLength
DefaultStyledDocument.ElementBuffer#getRootElement():::Gets the root element.:::return
DefaultStyledDocument.ElementBuffer#insert(int, int, ElementSpec[], DefaultDocumentEvent):::Inserts new content.:::if->return->beginEdits->insertUpdate->endEdits
DefaultStyledDocument.ElementBuffer#remove(int, int, DefaultDocumentEvent):::Removes content.:::beginEdits->removeUpdate->endEdits
DefaultStyledDocument.ElementBuffer#change(int, int, DefaultDocumentEvent):::Changes content.:::beginEdits->changeUpdate->endEdits
DefaultStyledDocument.ElementBuffer#insertUpdate(ElementSpec[]):::Inserts an update into the document.:::elem->index->elem->getElementIndex->while->elem->isLeaf->child->elem->getElement->child->isLeaf->push->elem->getElementIndex->path->size->new->ElemChangesArr->path->copyInto->i->if->getType->insertFirstContent->getLength->else->fractureDeepestLeaf->n->for->if->fracture->while->path->size->pop->if->for->counter->if->getType->counter->while->getType->change->getElement->insertElementAt
DefaultStyledDocument.ElementBuffer#removeUpdate():::Updates the element structure in response to a removal from the associated sequence in the document:::removeElements
DefaultStyledDocument.ElementBuffer#changeUpdate():::Updates the element structure in response to a change in the document.:::didEnd->split->if->while->path->size->pop->split->while->path->size->pop
DefaultStyledDocument.ElementBuffer#endEdits(DefaultDocumentEvent):::Creates the UndoableEdit record for the edits made in the buffer.:::n->changes->size->for->i->changes->removeAllElements->path->removeAllElements
DefaultStyledDocument.ElementBuffer#beginEdits(int, int):::Initialize the buffer:::if->new->Vector<ElemChanges>->else->changes->removeAllElements->if->new->Stack<ElemChanges>->else->path->removeAllElements
DefaultStyledDocument.ElementBuffer#push(Element, int, boolean):::Pushes a new element onto the stack that represents the current path.:::ec->new->ElemChanges->path->push
DefaultStyledDocument.ElementBuffer#advance(int):::move the current offset forward by n.:::
DefaultStyledDocument.ElementBuffer#removeElements(Element, int, int):::Remove the elements from elem in range rmOffs0, rmOffs1:::if->elem->isLeaf->index0->elem->getElementIndex->index1->elem->getElementIndex->push->ec->path->peek->if->child0->elem->getElement->if->child0->getStartOffset->child0->getEndOffset->addElement->else->if->removeElements->addElement->else->child0->elem->getElement->child1->elem->getElement->containsOffs1->elem->getEndOffset->if->canJoin->for->i->e->join->addElement->else->rmIndex0->rmIndex1->if->child0->getStartOffset->child0->getStartOffset->child0->getEndOffset->if->else->if->child1->getStartOffset->if->for->i->if->if->removeElements->insertElementAt->if->if->removeElements->addElement->pop->if->elem->getElementCount->size->size->return->return
DefaultStyledDocument.ElementBuffer#canJoin(Element, Element):::Can the two given elements be coelesced together into one element?:::if->return->leaf0->e0->isLeaf->leaf1->e1->isLeaf->if->return->if->return->e0->getAttributes->e1->getAttributes->isEqual->name0->e0->getName->name1->e1->getName->if->return->name0->equals->if->return->name1->equals->return
DefaultStyledDocument.ElementBuffer#join(Element, Element, Element, int, int):::Joins the two elements carving out a hole for the given removed range.:::if->left->isLeaf->right->isLeaf->return->left->getAttributes->left->getStartOffset->right->getEndOffset->createLeafElement->else->if->left->isLeaf->right->isLeaf->to->left->getAttributes->createBranchElement->ljIndex->left->getElementIndex->rjIndex->right->getElementIndex->lj->left->getElement->if->lj->getStartOffset->rj->right->getElement->if->rj->getStartOffset->children->new->Vector<Element>->for->i->if->canJoin->e->join->children->addElement->else->if->children->cloneAsNecessary->addElement->if->children->cloneAsNecessary->addElement->n->right->getElementCount->for->i->c->children->size->new->ElementArr->children->copyInto->replace->return->else->throw->new->StateInvariantError
DefaultStyledDocument.ElementBuffer#clone(Element, Element):::Creates a copy of this element, with a different parent.:::if->clonee->isLeaf->return->clonee->getAttributes->clonee->getStartOffset->clonee->getEndOffset->createLeafElement->e->clonee->getAttributes->createBranchElement->n->clonee->getElementCount->children->new->ElementArr->for->i->replace->return
DefaultStyledDocument.ElementBuffer#cloneAsNecessary(Element, Element, int, int):::Creates a copy of this element, with a different parent:::if->clonee->isLeaf->return->clonee->getAttributes->clonee->getStartOffset->clonee->getEndOffset->createLeafElement->e->clonee->getAttributes->createBranchElement->n->clonee->getElementCount->childrenList->new->ArrayList<Element>->for->i->children->childrenList->size->new->ElementArr->childrenList->toArray->replace->return
DefaultStyledDocument.ElementBuffer#fracture(int):::Determines if a fracture needs to be performed:::cLength->lastIndex->needRecreate->lastChange->childAltered->getElementCount->deepestAlteredIndex->lastAlteredIndex->for->counter->if->if->fractureFrom
DefaultStyledDocument.ElementBuffer#fractureFrom(ElemChanges[], int, int):::Recreates the elements to the right of the insertion point:::change->child->newChild->changeLength->if->getElement->else->getElement->if->child->isLeaf->child->getAttributes->Math->child->getStartOffset->max->child->getEndOffset->createLeafElement->else->child->getAttributes->createBranchElement->parent->while->isEnd->isEndLeaf->if->if->else->getElement->else->getElement->if->if->child->isLeaf->child->getAttributes->Math->child->getStartOffset->max->child->getEndOffset->createLeafElement->else->child->getAttributes->createBranchElement->else->kidsToMove->getElementCount->kids->moveStartIndex->kidStartIndex->if->if->else->new->ElementArr->else->if->else->new->ElementArr->for->counter->replace
DefaultStyledDocument.ElementBuffer#recreateFracturedElement(Element, Element):::Recreates toDuplicate:::if->toDuplicate->isLeaf->return->toDuplicate->getAttributes->Math->toDuplicate->getStartOffset->max->toDuplicate->getEndOffset->createLeafElement->newParent->toDuplicate->getAttributes->createBranchElement->childCount->toDuplicate->getElementCount->newKids->new->ElementArr->for->counter->replace->return
DefaultStyledDocument.ElementBuffer#fractureDeepestLeaf(ElementSpec[]):::Splits the bottommost leaf in path:::ec->path->peek->child->getElement->if->newChild->child->getAttributes->child->getStartOffset->createLeafElement->addElement->addElement->if->child->getEndOffset->else
DefaultStyledDocument.ElementBuffer#insertFirstContent(ElementSpec[]):::Inserts the first content:::firstSpec->ec->path->peek->child->getElement->firstEndOffset->firstSpec->getLength->isOnlyContent->switch->firstSpec->getDirection->if->child->getEndOffset->newE->child->getAttributes->child->getStartOffset->createLeafElement->addElement->addElement->if->child->getEndOffset->else->else->break->if->newE->child->getAttributes->child->getStartOffset->createLeafElement->addElement->nextChild->getElement->if->nextChild->getAttributes->nextChild->getEndOffset->createLeafElement->else->nextChild->getAttributes->createLeafElement->addElement->addElement->addElement->break->if->child->getStartOffset->newE->child->getAttributes->child->getStartOffset->createLeafElement->addElement->addElement->newE->firstSpec->getAttributes->createLeafElement->addElement->if->child->getEndOffset->else->break
DefaultStyledDocument.AttributeUndoableEdit#redo():::Redoes a change.:::super->redo->as->element->getAttributes->if->as->removeAttributes->as->addAttributes
DefaultStyledDocument.AttributeUndoableEdit#undo():::Undoes a change.:::super->undo->as->element->getAttributes->as->removeAttributes->as->addAttributes
DefaultStyledDocument.StyleChangeUndoableEdit#redo():::Redoes a change.:::super->redo->element->setResolveParent
DefaultStyledDocument.StyleChangeUndoableEdit#undo():::Undoes a change.:::super->undo->element->setResolveParent
DefaultStyledDocument.AbstractChangeHandler#getStaleListeners(ChangeListener):::Return a list of stale change listeners:::staleListeners->new->ArrayList<ChangeListener>->q->queueMap->l->getClass->get->if->r->synchronized->while->q->poll->staleListeners->r->getListener->add->return
DefaultStyledDocument.AbstractChangeHandler#stateChanged(ChangeEvent):::The ChangeListener wrapper which guards against dead documents.:::d->doc->get->if->fireStateChanged
DefaultStyledDocument.AbstractChangeHandler#fireStateChanged(DefaultStyledDocument, ChangeEvent):::Run the actual class-specific stateChanged() method.:::
Document#getLength():::Returns number of characters of content currently in the document.:::
Document#addDocumentListener(DocumentListener):::Registers the given observer to begin receiving notifications when changes are made to the document.:::
Document#removeDocumentListener(DocumentListener):::Unregisters the given observer from the notification list so it will no longer receive change updates.:::
Document#addUndoableEditListener(UndoableEditListener):::Registers the given observer to begin receiving notifications when undoable edits are made to the document.:::
Document#removeUndoableEditListener(UndoableEditListener):::Unregisters the given observer from the notification list so it will no longer receive updates.:::
Document#getProperty(Object):::Gets the properties associated with the document.:::
Document#putProperty(Object, Object):::Associates a property with the document:::
Document#remove(int, int):::Removes a portion of the content of the document:::
Document#insertString(int, String, AttributeSet):::Inserts a string of content:::
Document#getText(int, int):::Fetches the text contained within the given portion of the document.:::
Document#getText(int, int, Segment):::Fetches the text contained within the given portion of the document:::
Document#getStartPosition():::Returns a position that represents the start of the document:::
Document#getEndPosition():::Returns a position that represents the end of the document:::
Document#createPosition(int):::This method allows an application to mark a place in a sequence of character content:::
Document#getRootElements():::Returns all of the root elements that are defined:::
Document#getDefaultRootElement():::Returns the root element that views should be based upon, unless some other mechanism for assigning views to element structures is provided.:::
Document#render(Runnable):::Allows the model to be safely rendered in the presence of concurrency, if the model supports being updated asynchronously:::
DocumentFilter#remove(FilterBypass, int, int):::Invoked prior to removal of the specified region in the specified Document:::fb->remove
DocumentFilter#insertString(FilterBypass, int, String, AttributeSet):::Invoked prior to insertion of text into the specified Document:::fb->insertString
DocumentFilter#replace(FilterBypass, int, int, String, AttributeSet):::Invoked prior to replacing a region of text in the specified Document:::fb->replace
DocumentFilter.FilterBypass#getDocument():::Returns the Document the mutation is occurring on.:::
DocumentFilter.FilterBypass#remove(int, int):::Removes the specified region of text, bypassing the DocumentFilter.:::
DocumentFilter.FilterBypass#insertString(int, String, AttributeSet):::Inserts the specified text, bypassing the DocumentFilter.:::
DocumentFilter.FilterBypass#replace(int, int, String, AttributeSet):::Deletes the region of text from offset to offset + length, and replaces it with  text.:::
EditorKit#clone():::Creates a copy of the editor kit:::o->try->super->clone->catch->finally->return
EditorKit#install(JEditorPane):::Called when the kit is being installed into the a JEditorPane.:::
EditorKit#deinstall(JEditorPane):::Called when the kit is being removed from the JEditorPane:::
EditorKit#getContentType():::Gets the MIME type of the data that this kit represents support for.:::
EditorKit#getViewFactory():::Fetches a factory that is suitable for producing views of any models that are produced by this kit.:::
EditorKit#getActions():::Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.:::
EditorKit#createCaret():::Fetches a caret that can navigate through views produced by the associated ViewFactory.:::
EditorKit#createDefaultDocument():::Creates an uninitialized text storage model that is appropriate for this type of editor.:::
EditorKit#read(InputStream, Document, int):::Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.:::
EditorKit#write(OutputStream, Document, int, int):::Writes content from a document to the given stream in a format appropriate for this kind of content handler.:::
EditorKit#read(Reader, Document, int):::Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler:::
EditorKit#write(Writer, Document, int, int):::Writes content from a document to the given stream in a format appropriate for this kind of content handler:::
Element#getDocument():::Fetches the document associated with this element.:::
Element#getParentElement():::Fetches the parent element:::
Element#getName():::Fetches the name of the element:::
Element#getAttributes():::Fetches the collection of attributes this element contains.:::
Element#getStartOffset():::Fetches the offset from the beginning of the document that this element begins at:::
Element#getEndOffset():::Fetches the offset from the beginning of the document that this element ends at:::
Element#getElementIndex(int):::Gets the child element index closest to the given offset:::
Element#getElementCount():::Gets the number of child elements contained by this element:::
Element#getElement(int):::Fetches the child element at the given index.:::
Element#isLeaf():::Is this element a leaf element? An element that may have children, even if it currently has no children, would return false.:::
ElementIterator#clone():::Clones the ElementIterator.:::try->it->new->ElementIterator->if->new->Stack<StackItem>->for->i->elementStack->size->return->catch->throw->new->InternalError->finally
ElementIterator#first():::Fetches the first element.:::if->return->new->Stack<StackItem>->if->root->getElementCount->elementStack->new->StackItem->push->return
ElementIterator#depth():::Fetches the current depth of element tree.:::if->return->return->elementStack->size
ElementIterator#current():::Fetches the current Element.:::if->return->first->if->elementStack->empty->item->elementStack->peek->elem->item->getElement->index->item->getIndex->if->return->return->elem->getElement->return
ElementIterator#next():::Fetches the next Element:::if->return->first->if->elementStack->isEmpty->return->item->elementStack->peek->elem->item->getElement->index->item->getIndex->if->elem->getElementCount->child->elem->getElement->if->child->isLeaf->item->incrementIndex->else->elementStack->new->StackItem->push->return->else->elementStack->pop->if->elementStack->isEmpty->top->elementStack->peek->top->incrementIndex->return->next->return
ElementIterator#previous():::Fetches the previous Element:::stackSize->if->elementStack->size->return->item->elementStack->peek->elem->item->getElement->index->item->getIndex->if->return->elem->getElement->getDeepestLeaf->else->if->return->else->if->if->return->top->elementStack->pop->elementStack->peek->elementStack->push->item->getElement->item->getIndex->return->elem->getElement->getDeepestLeaf->return
FieldView#getFontMetrics():::Fetches the font metrics associated with the component hosting this view.:::c->getContainer->return->c->c->getFont->getFontMetrics
FieldView#adjustAllocation(Shape):::Adjusts the allocation given to the view to be a suitable allocation for a text field:::if->bounds->a->getBounds->vspan->getPreferredSpan->hspan->getPreferredSpan->if->slop->c->getContainer->if->field->vis->field->getHorizontalVisibility->max->Math->max->value->vis->getValue->extent->Math->min->if->vis->vis->getMinimum->setRangeProperties->if->slop->align->getHorizontalAlignment->if->Utilities->isLeftToRight->if->else->if->else->if->else->if->switch->break->break->else->vis->getValue->return->return
FieldView#updateVisibilityModel():::Update the visibility model with the associated JTextField (if there is one) to reflect the current visibility as a result of changes to the document model:::c->getContainer->if->field->vis->field->getHorizontalVisibility->hspan->getPreferredSpan->extent->vis->getExtent->maximum->Math->max->value->oldValue->vis->getValue->if->Math->Math->min->max->vis->setRangeProperties
FieldView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::r->g->clipRect->super->paint
FieldView#adjustPaintRegion(Shape):::Adjusts a based on the visible region and returns it.:::return->adjustAllocation
FieldView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::switch->buff->SegmentCache->getSharedSegment->doc->getDocument->width->try->fm->getFontMetrics->doc->doc->getLength->getText->Utilities->getTabbedTextWidth->if->c->getContainer->getLeftSideBearing->Math->max->else->catch->finally->SegmentCache->releaseSharedSegment->return->return->super->getPreferredSpan
FieldView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::if->return->return
FieldView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->super->adjustAllocation->modelToView
FieldView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->super->adjustAllocation->viewToModel
FieldView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::super->adjustAllocation->insertUpdate->updateVisibilityModel
FieldView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::super->adjustAllocation->removeUpdate->updateVisibilityModel
FlowView#getFlowAxis():::Fetches the axis along which views should be flowed:::if->getAxis->return->return
FlowView#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index:::return
FlowView#getFlowStart(int):::Fetch the location along the flow axis that the flow span will start at:::return
FlowView#createRow():::Create a View that should be used to hold a a rows worth of children in a flow:::
FlowView#loadChildren(ViewFactory):::Loads all of the children to initialize the view:::if->getElement->new->LogicalView->layoutPool->setParent->strategy->insertUpdate
FlowView#getViewIndexAtPosition(int):::Fetches the child view index representing the given position in the model.:::if->getStartOffset->getEndOffset->for->counter->getViewCount->return
FlowView#layout(int, int):::Lays out the children:::faxis->getFlowAxis->newSpan->if->else->if->layoutChanged->getAxis->layoutChanged->if->isLayoutValid->heightAxis->getAxis->oldFlowHeight->getWidth->getHeight->strategy->layout->newFlowHeight->getPreferredSpan->if->p->getParent->if->p->preferenceChanged->host->getContainer->if->host->repaint->super->layout
FlowView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate requirements along the minor axis:::if->new->SizeRequirements->pref->layoutPool->getPreferredSpan->min->layoutPool->getMinimumSpan->Math->max->return
FlowView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::layoutPool->insertUpdate->strategy->getInsideAllocation->insertUpdate
FlowView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::layoutPool->removeUpdate->strategy->getInsideAllocation->removeUpdate
FlowView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::layoutPool->changedUpdate->strategy->getInsideAllocation->changedUpdate
FlowView.FlowStrategy#insertUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification that something was inserted into the document in a location that the given flow view is responsible for:::if->e->getOffset->addDamage->if->host->fv->getContainer->if->host->repaint->else->fv->preferenceChanged
FlowView.FlowStrategy#removeUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification that something was removed from the document in a location that the given flow view is responsible for.:::e->getOffset->addDamage->if->host->fv->getContainer->if->host->repaint->else->fv->preferenceChanged
FlowView.FlowStrategy#changedUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::e->getOffset->addDamage->if->host->fv->getContainer->if->host->repaint->else->fv->preferenceChanged
FlowView.FlowStrategy#getLogicalView(FlowView):::This method gives flow strategies access to the logical view of the FlowView.:::return
FlowView.FlowStrategy#layout(FlowView):::Update the flow on the given FlowView:::pool->getLogicalView->rowIndex->p0->p1->fv->getEndOffset->if->if->return->offset->damageStart->getOffset->while->fv->getViewIndexAtPosition->if->fv->getView->getStartOffset->else->fv->getStartOffset->reparentViews->new->Vector<View>->rowCount->fv->getViewCount->while->row->if->fv->createRow->fv->append->else->fv->getView->layoutRow->if->fv->replace->unsetDamage
FlowView.FlowStrategy#layoutRow(FlowView, int, int):::Creates a row of views that will fit within the layout span of the row:::row->fv->getView->x->fv->getFlowStart->spanLeft->fv->getFlowSpan->end->fv->getEndOffset->te->flowAxis->fv->getFlowAxis->breakWeight->breakX->breakSpan->breakIndex->n->viewBuffer->clear->while->v->createView->if->break->bw->v->getBreakWeight->if->w->v->breakView->if->viewBuffer->add->else->if->viewBuffer->add->break->else->if->chunkSpan->if->getTabbedSpan->else->v->getPreferredSpan->if->if->viewBuffer->get->for->i->v->v->getStartOffset->breakView->viewBuffer->add->v->getEndOffset->views->viewBuffer->size->new->ViewArr->viewBuffer->toArray->row->row->getViewCount->replace->return->row->getEndOffset
FlowView.FlowStrategy#adjustRow(FlowView, int, int, int):::Adjusts the given row if possible to fit within the layout span:::flowAxis->fv->getFlowAxis->r->fv->getView->n->r->getViewCount->span->bestWeight->bestSpan->bestIndex->v->for->i->if->return->spanLeft->r->getView->v->v->getStartOffset->breakView->va->new->ViewArr->lv->getLogicalView->p0->r->getView->getStartOffset->p1->r->getEndOffset->for->i->lv->getViewCount->r->replace
FlowView.FlowStrategy#createView(FlowView, int, int, int):::Creates a view that can be used to represent the current piece of the flow:::lv->getLogicalView->childIndex->lv->getViewIndex->v->lv->getView->if->v->getStartOffset->return->v->v->getEndOffset->createFragment->return
FlowView.LogicalView#getAttributes():::Fetches the attributes to use when rendering:::p->getParent->return->p->getAttributes
FlowView.LogicalView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::maxpref->pref->n->getViewCount->for->i->Math->max->return
FlowView.LogicalView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::maxmin->min->nowrap->n->getViewCount->for->i->Math->max->return
FlowView.LogicalView#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory):::Forward the DocumentEvent to the given child view:::parent->v->getParent->v->setParent->super->forwardUpdateToView->v->setParent
FlowView.LogicalView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::
FlowView.LogicalView#isBefore(int, int, Rectangle):::Tests whether a point lies before the rectangle range:::return
FlowView.LogicalView#isAfter(int, int, Rectangle):::Tests whether a point lies after the rectangle range:::return
FlowView.LogicalView#getViewAtPoint(int, int, Rectangle):::Fetches the child view at the given point:::return
FlowView.LogicalView#childAllocation(int, Rectangle):::Returns the allocation for a given child:::
GapContent#allocateArray(int):::Allocate an array to store items of the type appropriate (which is determined by the subclass).:::return->new->charArr
GapContent#getArrayLength():::Get the length of the allocated array.:::carray->getArray->return
GapContent#length():::Returns the length of the content.:::len->getArrayLength->getGapEnd->getGapStart->return
GapContent#insertString(int, String):::Inserts a string into the content.:::if->length->throw->length->new->BadLocationException->chars->str->toCharArray->replace->return->str->length->new->InsertUndo
GapContent#remove(int, int):::Removes part of the content.:::if->length->throw->length->new->BadLocationException->removedString->getString->edit->new->RemoveUndo->replace->return
GapContent#getString(int, int):::Retrieves a portion of the content.:::s->new->Segment->getChars->return->new->String
GapContent#getChars(int, int, Segment):::Retrieves a portion of the content:::end->if->throw->new->BadLocationException->if->length->length->throw->length->new->BadLocationException->g0->getGapStart->g1->getGapEnd->array->getArray->if->else->if->else->before->if->chars->isPartialReturn->return->new->charArr->System->arraycopy->System->arraycopy
GapContent#createPosition(int):::Creates a position within the content that will track change as the content is mutated.:::while->queue->poll->if->Math->marks->size->max->removeUnusedMarks->g0->getGapStart->g1->getGapEnd->index->sortIndex->findSortIndex->m->position->if->marks->size->marks->elementAt->m->getPosition->else->new->StickyPosition->new->MarkData->position->setMark->marks->insertElementAt->return
GapContent.MarkData#getOffset():::Fetch the location in the contiguous sequence being modeled:::g0->getGapStart->g1->getGapEnd->offs->return->Math->max
GapContent#shiftEnd(int):::Make the gap bigger, moving any necessary data and updating the appropriate marks:::oldGapEnd->getGapEnd->super->shiftEnd->dg->getGapEnd->adjustIndex->findMarkAdjustIndex->n->marks->size->for->i
GapContent#getNewArraySize(int):::Overridden to make growth policy less agressive for large text amount.:::if->return->super->getNewArraySize->else->return
GapContent#shiftGap(int):::Move the start of the gap to a new location, without changing the size of the gap:::oldGapStart->getGapStart->dg->oldGapEnd->getGapEnd->newGapEnd->gapSize->super->shiftGap->if->adjustIndex->findMarkAdjustIndex->n->marks->size->for->i->else->if->adjustIndex->findMarkAdjustIndex->n->marks->size->for->i->resetMarksAtZero
GapContent#resetMarksAtZero():::Resets all the marks that have an offset of 0 to have an index of zero as well.:::if->getGapStart->g1->getGapEnd->for->counter->maxCounter->marks->size
GapContent#shiftGapStartDown(int):::Adjust the gap end downward:::adjustIndex->findMarkAdjustIndex->n->marks->size->g0->getGapStart->g1->getGapEnd->for->i->super->shiftGapStartDown->resetMarksAtZero
GapContent#shiftGapEndUp(int):::Adjust the gap end upward:::adjustIndex->getGapEnd->findMarkAdjustIndex->n->marks->size->for->i->super->shiftGapEndUp->resetMarksAtZero
GapContent#compare(MarkData, MarkData):::Compares two marks.:::if->return->else->if->return->else->return
GapContent#findMarkAdjustIndex(int):::Finds the index to start mark adjustments given some search index.:::Math->max->index->findSortIndex->for->i->return
GapContent#findSortIndex(MarkData):::Finds the index of where to insert a new mark.:::lower->upper->marks->size->mid->if->return->cmp->last->marks->elementAt->compare->if->return->while->entry->marks->elementAt->compare->if->return->else->if->else->return
GapContent#removeUnusedMarks():::Remove all unused marks out of the sorted collection of marks.:::n->marks->size->cleaned->new->MarkVector->for->i
GapContent.MarkVector#allocateArray(int):::Allocate an array to store items of the type appropriate (which is determined by the subclass).:::return->new->MarkDataArr
GapContent.MarkVector#getArrayLength():::Get the length of the allocated array:::marks->getArray->return
GapContent.MarkVector#size():::Returns the number of marks currently held:::len->getArrayLength->getGapEnd->getGapStart->return
GapContent.MarkVector#insertElementAt(MarkData, int):::Inserts a mark into the vector:::replace
GapContent.MarkVector#addElement(MarkData):::Add a mark to the end:::size->insertElementAt
GapContent.MarkVector#elementAt(int):::Fetches the mark at the given index:::g0->getGapStart->g1->getGapEnd->array->getArray->if->return->else->return
GapContent.MarkVector#replaceRange(int, int, Object[]):::Replaces the elements in the specified range with the passed in objects:::g0->getGapStart->g1->getGapEnd->index->newIndex->array->getArray->if->else->if->while->else->while->while
GapContent#getPositionsInRange(Vector, int, int):::Returns a Vector containing instances of UndoPosRef for the Positions in the range offset to offset + length:::endOffset->startIndex->endIndex->g0->getGapStart->g1->getGapEnd->if->if->else->findMarkAdjustIndex->if->findMarkAdjustIndex->else->findMarkAdjustIndex->else->findMarkAdjustIndex->findMarkAdjustIndex->placeIn->Math->max->new->Vector<>->for->counter->return
GapContent#updateUndoPositions(Vector, int, int):::Resets the location for all the UndoPosRef instances in positions:::endOffset->g1->getGapEnd->startIndex->endIndex->findMarkAdjustIndex->if->findMarkAdjustIndex->else->for->counter->positions->size->if->sorted->new->ObjectArr->addIndex->counter->if->for->for->else->for->for->marks->replaceRange
GapContent.UndoPosRef#resetLocation(int, int):::Resets the location of the Position to the offset when the receiver was instantiated.:::if->else
GapVector#allocateArray(int):::Allocate an array to store items of the type appropriate (which is determined by the subclass).:::
GapVector#getArrayLength():::Get the length of the allocated array:::
GapVector#getArray():::Access to the array:::return
GapVector#getGapStart():::Access to the start of the gap.:::return
GapVector#getGapEnd():::Access to the end of the gap.:::return
GapVector#replace(int, int, Object, int):::Replace the given logical position in the storage with the given new items:::addOffset->if->close->return->else->if->close->else->endSize->end->open->System->arraycopy->System->arraycopy
GapVector#close(int, int):::Delete nItems at position:::if->return->end->new_gs->if->if->shiftGap->shiftGapStartDown->else->if->if->shiftGap->shiftGapEndUp->else->shiftGapStartDown->shiftGapEndUp
GapVector#open(int, int):::Make space for the given number of items at the given location.:::gapSize->if->if->return->shiftGap->if->getArrayLength->shiftEnd->return
GapVector#resize(int):::resize the underlying storage array to the given new size:::narray->allocateArray->System->Math->getArrayLength->min->arraycopy
GapVector#shiftEnd(int):::Make the gap bigger, moving any necessary data and updating the appropriate marks:::oldSize->getArrayLength->oldGapEnd->upperSize->arrayLength->getNewArraySize->newGapEnd->resize->if->System->arraycopy
GapVector#getNewArraySize(int):::Calculates a new size of the storage array depending on required capacity.:::return
GapVector#shiftGap(int):::Move the start of the gap to a new location, without changing the size of the gap:::if->return->oldGapStart->dg->oldGapEnd->newGapEnd->gapSize->if->System->arraycopy->else->if->System->arraycopy
GapVector#shiftGapStartDown(int):::Adjust the gap end downward:::
GapVector#shiftGapEndUp(int):::Adjust the gap end upward:::
GlyphPainter1#getSpan(GlyphView, int, int, TabExpander, float):::Determine the span the glyphs given a start location (for tab expansion).:::sync->text->v->getText->justificationData->getJustificationData->width->Utilities->getTabbedTextWidth->SegmentCache->releaseSharedSegment->return
GlyphPainter1#getAscent(GlyphView):::Fetches the ascent above the baseline for the glyphs corresponding to the given range in the model.:::sync->return->metrics->getAscent
GlyphPainter1#getDescent(GlyphView):::Fetches the descent below the baseline for the glyphs corresponding to the given range in the model.:::sync->return->metrics->getDescent
GlyphPainter1#paint(GlyphView, Graphics, Shape, int, int):::Paints the glyphs representing the given range.:::sync->text->expander->v->getTabExpander->alloc->a->getBounds->x->p->v->getStartOffset->justificationData->getJustificationData->if->v->getText->width->Utilities->getTabbedTextWidth->SegmentCache->releaseSharedSegment->y->metrics->getHeight->metrics->getDescent->v->getText->g->metrics->getFont->setFont->Utilities->drawTabbedText->SegmentCache->releaseSharedSegment
GlyphPainter1#viewToModel(GlyphView, float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::sync->alloc->a->getBounds->p0->v->getStartOffset->p1->v->getEndOffset->expander->v->getTabExpander->text->v->getText->justificationData->getJustificationData->offs->Utilities->getTabbedTextOffset->SegmentCache->releaseSharedSegment->retValue->if->return
GlyphPainter1#getBoundedPosition(GlyphView, int, float, float):::Determines the best location (in the model) to break the given view:::sync->expander->v->getTabExpander->s->v->v->getEndOffset->getText->justificationData->getJustificationData->index->Utilities->getTabbedTextOffset->SegmentCache->releaseSharedSegment->p1->return
GlyphPainter2#getPainter(GlyphView, int, int):::Create a painter to use for the given GlyphView.:::return
GlyphPainter2#getSpan(GlyphView, int, int, TabExpander, float):::Determine the span the glyphs given a start location (for tab expansion):::if->v->getStartOffset->v->getEndOffset->return->layout->getAdvance->p->v->getStartOffset->index0->index1->hit0->TextHitInfo->afterOffset->hit1->TextHitInfo->beforeOffset->locs->layout->getCaretInfo->x0->layout->getCaretInfo->x1->return
GlyphPainter2#getAscent(GlyphView):::Fetch the ascent above the baseline for the glyphs corresponding to the given range in the model.:::return->layout->getAscent
GlyphPainter2#getDescent(GlyphView):::Fetch the descent below the baseline for the glyphs corresponding to the given range in the model.:::return->layout->getDescent
GlyphPainter2#paint(GlyphView, Graphics, Shape, int, int):::Paint the glyphs for the given view:::if->alloc->a->getBounds2D->g2d->y->alloc->getY->layout->getAscent->layout->getLeading->x->alloc->getX->if->v->getStartOffset->v->getEndOffset->try->s->v->modelToView->savedClip->g->getClip->g2d->clip->layout->draw->g->setClip->catch->finally->else->layout->draw
GlyphPainter2#viewToModel(GlyphView, float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->a->getBounds2D->hit->layout->alloc->getX->hitTestChar->pos->hit->getInsertionIndex->if->v->getEndOffset->hit->isLeadingEdge->return->v->getStartOffset
GlyphPainter2#getBoundedPosition(GlyphView, int, float, float):::Determines the model location that represents the maximum advance that fits within the given span:::if->throw->new->IllegalArgumentException->hit->if->layout->isLeftToRight->layout->hitTestChar->else->layout->layout->getAdvance->hitTestChar->return->v->getStartOffset->hit->getCharIndex
GlyphPainter2#getNextVisualPositionFrom(GlyphView, int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::doc->v->getDocument->startOffset->v->getStartOffset->endOffset->v->getEndOffset->text->viewIsLeftToRight->currentHit->nextHit->switch->break->break->AbstractDocument->isLeftToRight->if->doc->getLength->if->return->return->if->if->return->else->v->getText->c->SegmentCache->releaseSharedSegment->if->return->return->if->TextHitInfo->afterOffset->else->TextHitInfo->beforeOffset->layout->getNextRightHit->if->return->if->layout->isLeftToRight->layout->getVisualOtherHit->nextHit->getInsertionIndex->if->v->getText->c->SegmentCache->releaseSharedSegment->if->return->else->return->AbstractDocument->isLeftToRight->if->doc->getLength->if->return->return->if->if->v->getText->c->SegmentCache->releaseSharedSegment->if->Character->isSpaceChar->return->return->else->return->if->TextHitInfo->afterOffset->else->TextHitInfo->beforeOffset->layout->getNextLeftHit->if->return->if->layout->isLeftToRight->layout->getVisualOtherHit->nextHit->getInsertionIndex->if->v->getText->c->SegmentCache->releaseSharedSegment->if->return->else->return->throw->new->IllegalArgumentException->return
GlyphView#clone():::Creates a shallow copy:::o->try->super->clone->catch->finally->return
GlyphView#getGlyphPainter():::Fetch the currently installed glyph painter:::return
GlyphView#setGlyphPainter(GlyphPainter):::Sets the painter to use for rendering glyphs.:::
GlyphView#getText(int, int):::Fetch a reference to the text that occupies the given range:::text->SegmentCache->getSharedSegment->try->doc->getDocument->doc->getText->catch->throw->new->StateInvariantError->finally->return
GlyphView#getBackground():::Fetch the background color to use to render the glyphs:::doc->getDocument->if->attr->getAttributes->if->attr->isDefined->return->getBackground->return
GlyphView#getForeground():::Fetch the foreground color to use to render the glyphs:::doc->getDocument->if->attr->getAttributes->return->getForeground->c->getContainer->if->return->c->getForeground->return
GlyphView#getFont():::Fetch the font that the glyphs should be based upon:::doc->getDocument->if->attr->getAttributes->return->getFont->c->getContainer->if->return->c->getFont->return
GlyphView#isUnderline():::Determine if the glyphs should be underlined:::attr->getAttributes->return->StyleConstants->isUnderline
GlyphView#isStrikeThrough():::Determine if the glyphs should have a strikethrough line:::attr->getAttributes->return->StyleConstants->isStrikeThrough
GlyphView#isSubscript():::Determine if the glyphs should be rendered as superscript.:::attr->getAttributes->return->StyleConstants->isSubscript
GlyphView#isSuperscript():::Determine if the glyphs should be rendered as subscript.:::attr->getAttributes->return->StyleConstants->isSuperscript
GlyphView#getTabExpander():::Fetch the TabExpander to use if tabs are present in this view.:::return
GlyphView#checkPainter():::Check to see that a glyph painter exists:::if->if->new->GlyphPainter1->defaultPainter->getStartOffset->getEndOffset->getPainter->setGlyphPainter
GlyphView#getTabbedSpan(float, TabExpander):::Determines the desired span when using the given tab expansion implementation.:::checkPainter->old->if->preferenceChanged->p0->getStartOffset->p1->getEndOffset->width->painter->getSpan->return
GlyphView#getPartialSpan(int, int):::Determines the span along the same axis as tab expansion for a portion of the view:::checkPainter->width->painter->getSpan->return
GlyphView#getStartOffset():::Fetches the portion of the model that this view is responsible for.:::e->getElement->return->e->getStartOffset->e->getStartOffset
GlyphView#getEndOffset():::Fetches the portion of the model that this view is responsible for.:::e->getElement->return->e->getStartOffset->e->getEndOffset
GlyphView#paint(Graphics, Shape):::Renders a portion of a text style run.:::checkPainter->paintedText->c->getContainer->p0->getStartOffset->p1->getEndOffset->alloc->a->getBounds->bg->getBackground->fg->getForeground->if->c->isEnabled->getDisabledTextColor->UIManager->getColor->if->g->setColor->g->fillRect->if->tc->h->tc->getHighlighter->if->paintLayeredHighlights->if->Utilities->getElement->isComposedTextElement->Utilities->a->getBounds->paintComposedText->else->if->tc->selFG->tc->getSelectedTextColor->if->tc->getHighlighter->selFG->equals->h->tc->getHighlighter->getHighlights->if->initialized->viewSelectionCount->for->i->if->curPos->startPos->viewLen->while->while->if->paintTextUsingColor->checkSum->while->if->paintTextUsingColor
GlyphView#paintTextUsingColor(Graphics, Shape, Color, int, int):::Paints the specified region of text in the specified color.:::g->setColor->painter->paint->underline->isUnderline->strike->isStrikeThrough->if->alloc->a->getBounds->parent->getParent->if->parent->getEndOffset->s->getText->while->Character->s->last->isWhitespace->SegmentCache->releaseSharedSegment->x0->p->getStartOffset->if->painter->getTabExpander->getSpan->x1->painter->getTabExpander->getSpan->y->painter->getHeight->painter->getDescent->if->yTmp->g->drawLine->if->yTmp->painter->getAscent->g->drawLine
GlyphView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::switch->if->p0->getStartOffset->p1->getEndOffset->while->breakSpot->getBreakSpot->if->Math->getPartialSpan->max->return->return->super->getMinimumSpan->throw->new->IllegalArgumentException
GlyphView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::if->return->checkPainter->p0->getStartOffset->p1->getEndOffset->switch->if->return->return->painter->getSpan->h->painter->getHeight->if->isSuperscript->return->throw->new->IllegalArgumentException
GlyphView#getAlignment(int):::Determines the desired alignment for this view along an axis:::checkPainter->if->sup->isSuperscript->sub->isSubscript->h->painter->getHeight->d->painter->getDescent->a->painter->getAscent->align->if->else->if->else->return->return->super->getAlignment
GlyphView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::checkPainter->return->painter->modelToView
GlyphView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::checkPainter->return->painter->viewToModel
GlyphView#getBreakWeight(int, float, float):::Determines how attractive a break opportunity in this view is:::if->checkPainter->p0->getStartOffset->p1->painter->getBoundedPosition->return->getBreakSpot->return->super->getBreakWeight
GlyphView#breakView(int, int, float, float):::Breaks this view on the given axis at the given length:::if->checkPainter->p1->painter->getBoundedPosition->breakSpot->getBreakSpot->if->if->getStartOffset->getEndOffset->return->v->createFragment->return->return
GlyphView#createFragment(int, int):::Creates a view that represents a portion of the element:::checkPainter->elem->getElement->v->clone->elem->getStartOffset->painter->getPainter->return
GlyphView#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->return->painter->getNextVisualPositionFrom
GlyphView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::syncCR->preferenceChanged
GlyphView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::syncCR->preferenceChanged
GlyphView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for:::syncCR->preferenceChanged
GlyphView.GlyphPainter#getSpan(GlyphView, int, int, TabExpander, float):::Determine the span the glyphs given a start location (for tab expansion).:::
GlyphView.GlyphPainter#getHeight(GlyphView):::Returns of the height.:::
GlyphView.GlyphPainter#getAscent(GlyphView):::Returns of the ascent.:::
GlyphView.GlyphPainter#getDescent(GlyphView):::Returns of the descent.:::
GlyphView.GlyphPainter#paint(GlyphView, Graphics, Shape, int, int):::Paint the glyphs representing the given range.:::
GlyphView.GlyphPainter#modelToView(GlyphView, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it:::
GlyphView.GlyphPainter#viewToModel(GlyphView, float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::
GlyphView.GlyphPainter#getBoundedPosition(GlyphView, int, float, float):::Determines the model location that represents the maximum advance that fits within the given span:::
GlyphView.GlyphPainter#getPainter(GlyphView, int, int):::Create a painter to use for the given GlyphView:::return
GlyphView.GlyphPainter#getNextVisualPositionFrom(GlyphView, int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::startOffset->v->getStartOffset->endOffset->v->getEndOffset->text->switch->if->return->container->v->getContainer->if->c->getCaret->magicPoint->c->getMagicCaretPosition->if->return->value->v->viewToModel->return->break->if->v->getDocument->getLength->if->return->return->if->return->if->return->if->return->else->return->if->v->getDocument->getLength->if->return->return->if->return->if->return->return->throw->new->IllegalArgumentException->return
Highlighter#install(JTextComponent):::Called when the UI is being installed into the interface of a JTextComponent:::
Highlighter#deinstall(JTextComponent):::Called when the UI is being removed from the interface of a JTextComponent:::
Highlighter#paint(Graphics):::Renders the highlights.:::
Highlighter#addHighlight(int, int, HighlightPainter):::Adds a highlight to the view:::
Highlighter#removeHighlight(Object):::Removes a highlight from the view.:::
Highlighter#removeAllHighlights():::Removes all highlights this highlighter is responsible for.:::
Highlighter#changeHighlight(Object, int, int):::Changes the given highlight to span a different portion of the document:::
Highlighter#getHighlights():::Fetches the current list of highlights.:::
Highlighter.HighlightPainter#paint(Graphics, int, int, Shape, JTextComponent):::Renders the highlight.:::
Highlighter.Highlight#getStartOffset():::Gets the starting model offset for the highlight.:::
Highlighter.Highlight#getEndOffset():::Gets the ending model offset for the highlight.:::
Highlighter.Highlight#getPainter():::Gets the painter for the highlighter.:::
IconView#paint(Graphics, Shape):::Paints the icon:::alloc->a->getBounds->c->getContainer->paintIcon
IconView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::switch->return->c->getIconWidth->return->c->getIconHeight->throw->new->IllegalArgumentException
IconView#getAlignment(int):::Determines the desired alignment for this view along an axis:::switch->return->return->super->getAlignment
IconView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::p0->getStartOffset->p1->getEndOffset->if->r->a->getBounds->if->return->throw->new->BadLocationException
IconView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->if->return->getStartOffset->return->getEndOffset
InternationalFormatter#setFormat(Format):::Sets the format that dictates the legal values that can be edited and displayed.:::
InternationalFormatter#getFormat():::Returns the format that dictates the legal values that can be edited and displayed.:::return
InternationalFormatter#setMinimum(Comparable):::Sets the minimum permissible value:::if->getValueClass->minimum->getClass->setValueClass
InternationalFormatter#getMinimum():::Returns the minimum permissible value.:::return
InternationalFormatter#setMaximum(Comparable):::Sets the maximum permissible value:::if->getValueClass->max->getClass->setValueClass
InternationalFormatter#getMaximum():::Returns the maximum permissible value.:::return
InternationalFormatter#install(JFormattedTextField):::Installs the DefaultFormatter onto a particular JFormattedTextField:::super->install->updateMaskIfNecessary->positionCursorAtInitialLocation
InternationalFormatter#valueToString(Object):::Returns a String representation of the Object value:::if->return->f->getFormat->if->return->value->toString->return->f->format
InternationalFormatter#stringToValue(String):::Returns the Object representation of the String text.:::value->getFormat->stringToValue->if->getValueClass->getValueClass->isInstance->super->value->toString->stringToValue->try->if->isValidValue->throw->new->ParseException->catch->throw->new->ParseException->finally->return
InternationalFormatter#getFields(int):::Returns the Format.Field constants associated with the text at offset:::if->getAllowsInvalid->updateMask->attrs->getAttributes->if->attrs->size->al->new->ArrayList<Attribute>->al->attrs->keySet->addAll->return->al->toArray->return
InternationalFormatter#clone():::Creates a copy of the DefaultFormatter.:::formatter->super->clone->return
InternationalFormatter#getActions():::If getSupportsIncrement returns true, this returns two Actions suitable for incrementing/decrementing the value.:::if->getSupportsIncrement->return->new->ActionArr->new->IncrementAction->new->IncrementAction->return
InternationalFormatter#stringToValue(String, Format):::Invokes parseObject on f, returning its value.:::if->return->return->f->parseObject
InternationalFormatter#isValidValue(Object, boolean):::Returns true if value is between the min/max.:::min->getMinimum->try->if->min->compareTo->return->catch->if->throw->return->finally->max->getMaximum->try->if->max->compareTo->return->catch->if->throw->return->finally->return
InternationalFormatter#getAttributes(int):::Returns a Set of the attribute identifiers at index.:::if->isValidMask->iterator->getIterator->if->iterator->getEndIndex->iterator->setIndex->return->iterator->getAttributes->return
InternationalFormatter#getAttributeStart(AttributedCharacterIterator.Attribute):::Returns the start of the first run that contains the attribute id:::if->isValidMask->iterator->getIterator->iterator->first->while->iterator->current->if->iterator->getAttribute->return->iterator->getIndex->iterator->next->return
InternationalFormatter#getIterator():::Returns the AttributedCharacterIterator used to format the last value.:::return
InternationalFormatter#updateMaskIfNecessary():::Updates the AttributedCharacterIterator and bitset, if necessary.:::if->getAllowsInvalid->getFormat->if->isValidMask->updateMask->else->newString->getFormattedTextField->getText->if->newString->equals->updateMask
InternationalFormatter#updateMask():::Updates the AttributedCharacterIterator by invoking formatToCharacterIterator on the Format:::if->getFormat->doc->getFormattedTextField->getDocument->if->try->doc->doc->getLength->getText->catch->finally->if->try->value->stringToValue->iterator->getFormat->formatToCharacterIterator->updateMask->catch->finally
InternationalFormatter#getLiteralCountTo(int):::Returns the number of literal characters before index.:::lCount->for->counter->return
InternationalFormatter#isLiteral(int):::Returns true if the character at index is a literal, that is not editable.:::if->isValidMask->string->length->return->literalMask->get->return
InternationalFormatter#getLiteral(int):::Returns the literal character at index.:::if->isValidMask->string->length->return->string->charAt->return
InternationalFormatter#isNavigatable(int):::Returns true if the character at offset is navigable too:::return->isLiteral
InternationalFormatter#updateValue(Object):::Overriden to update the mask after invoking supers implementation.:::super->updateValue->updateMaskIfNecessary
InternationalFormatter#replace(DocumentFilter.FilterBypass, int, int, String, AttributeSet):::Overriden to unconditionally allow the replace if ignoreDocumentMutate is true.:::if->fb->replace->return->super->replace
InternationalFormatter#canReplace(ReplaceHolder):::Overriden in an attempt to honor the literals:::if->getAllowsInvalid->text->tl->text->length->c->getFormattedTextField->if->c->getSelectionStart->getNextNonliteralIndex->else->if->getOverwriteMode->pos->textPos->overflown->for->i->if->c->getSelectedText->else->if->getNextNonliteralIndex->else->getNextNonliteralIndex->length->else->length->can->super->canReplace->if->getAllowsInvalid->resetFromValue->return
InternationalFormatter#replace(ReplaceHolder):::When in !allowsInvalid mode the text is reset on every edit, thus supers implementation will position the cursor at the wrong position:::start->direction->literalCount->if->length->getFormattedTextField->getSelectionStart->if->getAllowsInvalid->if->length->getFormattedTextField->getSelectionStart->else->getLiteralCountTo->if->super->replace->if->end->repositionCursor->else->if->repositionCursor->return->return
InternationalFormatter#getBufferedChar(int):::Returns the character from the mask that has been buffered at index.:::if->isValidMask->if->string->length->return->string->charAt->return
InternationalFormatter#isValidMask():::Returns true if the current mask is valid.:::return
InternationalFormatter#isLiteral(Map):::Returns true if attributes is null or empty.:::return->attributes->size
InternationalFormatter#canIncrement(Object, int):::Returns true if field is non-null:::return
InternationalFormatter#selectField(Object, int):::Selects the fields identified by attributes.:::iterator->getIterator->if->field->iterator->first->while->iterator->current->while->iterator->getAttribute->iterator->next->if->iterator->current->limit->iterator->getRunLimit->if->getFormattedTextField->iterator->getIndex->select->break->iterator->setIndex->iterator->next
InternationalFormatter#getAdjustField(int, Map):::Returns the field that will be adjusted by adjustValue.:::return
InternationalFormatter#adjustValue(Object, Map, Object, int):::Subclasses supporting incrementing must override this to handle the actual incrementing:::return
InternationalFormatter#getSupportsIncrement():::Returns false, indicating InternationalFormatter does not allow incrementing of the value:::return
InternationalFormatter#resetValue(Object):::Resets the value of the JFormattedTextField to be value.:::doc->getFormattedTextField->getDocument->string->valueToString->try->doc->doc->getLength->remove->doc->insertString->catch->finally->updateValue
InternationalFormatter#getReplaceHolder(DocumentFilter.FilterBypass, int, int, String, AttributeSet):::Overriden to return an instance of ExtendedReplaceHolder.:::if->new->ExtendedReplaceHolder->return->super->getReplaceHolder
InternationalFormatter.ExtendedReplaceHolder#resetFromValue(InternationalFormatter):::Resets the region to delete to be the complete document and the text from invoking valueToString on the current value.:::try->formatter->valueToString->catch->finally->fb->getDocument->getLength
JTextComponent#getUI():::Fetches the user-interface factory for this text-oriented editor.:::return
JTextComponent#setUI(TextUI):::Sets the user-interface factory for this text-oriented editor.:::super->setUI
JTextComponent#updateUI():::Reloads the pluggable UI:::UIManager->getUI->setUI->invalidate
JTextComponent#addCaretListener(CaretListener):::Adds a caret listener for notification of any changes to the caret.:::listenerList->add
JTextComponent#removeCaretListener(CaretListener):::Removes a caret listener.:::listenerList->remove
JTextComponent#getCaretListeners():::Returns an array of all the caret listeners registered on this text component.:::return->listenerList->getListeners
JTextComponent#fireCaretUpdate(CaretEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
JTextComponent#setDocument(Document):::Associates the editor with a text document:::old->try->if->readLock->if->model->removeDocumentListener->if->model->removeDocumentListener->runDir->getComponentOrientation->isLeftToRight->if->doc->getProperty->doc->putProperty->firePropertyChange->catch->finally->if->readUnlock->revalidate->repaint->if->model->addDocumentListener->if->model->addDocumentListener
JTextComponent#getDocument():::Fetches the model associated with the editor:::return
JTextComponent#getActions():::Fetches the command list for the editor:::return->getUI->getEditorKit->getActions
JTextComponent#setMargin(Insets):::Sets margin space between the text component's border and its text:::old->firePropertyChange->invalidate
JTextComponent#getMargin():::Returns the margin between the text component's border and its text.:::return
JTextComponent#setNavigationFilter(NavigationFilter):::Sets the NavigationFilter:::
JTextComponent#getNavigationFilter():::Returns the NavigationFilter:::return
JTextComponent#getCaret():::Fetches the caret that allows text-oriented navigation over the view.:::return
JTextComponent#setCaret(Caret):::Sets the caret to be used:::if->caret->removeChangeListener->caret->deinstall->old->if->caret->install->caret->addChangeListener->firePropertyChange
JTextComponent#getHighlighter():::Fetches the object responsible for making highlights.:::return
JTextComponent#setHighlighter(Highlighter):::Sets the highlighter to be used:::if->highlighter->deinstall->old->if->highlighter->install->firePropertyChange
JTextComponent#setKeymap(Keymap):::Sets the keymap to use for binding events to actions:::old->firePropertyChange->updateInputMap
JTextComponent#setDragEnabled(boolean):::Turns on or off automatic drag handling:::checkDragEnabled
JTextComponent#getDragEnabled():::Returns whether or not automatic drag handling is enabled.:::return
JTextComponent#setDropMode(DropMode):::Sets the drop mode for this component:::checkDropMode
JTextComponent#getDropMode():::Returns the drop mode for this component.:::return
JTextComponent#dropLocationForPoint(Point):::Calculates a drop location in this component, representing where a drop at the given point should insert data:::bias->new->Position.BiasArr->index->getUI->viewToModel->if->return->new->DropLocation
JTextComponent#setDropLocation(TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation:::retVal->textLocation->if->if->if->vals->if->if->intValue->setDot->intValue->moveDot->else->caret->intValue->setDot->caret->intValue->moveDot->caret->booleanValue->setVisible->else->if->visible->if->dc->dc->isActive->new->ObjectArr->Integer->dc->getMark->valueOf->Integer->dc->getDot->valueOf->Boolean->valueOf->dc->getMarkBias->dc->getDotBias->else->caret->isVisible->new->ObjectArr->Integer->caret->getMark->valueOf->Integer->caret->getDot->valueOf->Boolean->valueOf->caret->setVisible->else->if->textLocation->getIndex->textLocation->getBias->setDot->else->caret->textLocation->getIndex->setDot->else->if->if->caret->booleanValue->setVisible->else->if->visible->isActive->caret->isVisible->Boolean->valueOf->caret->setVisible->else->old->firePropertyChange->return
JTextComponent#getDropLocation():::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown:::return
JTextComponent#updateInputMap(Keymap, Keymap):::Updates the InputMaps in response to a Keymap change.:::km->getInputMap->last->while->km->getParent->if->if->if->last->km->getParent->setParent->else->last->setParent->else->newKM->new->KeymapWrapper->last->setParent->if->newKM->km->getParent->setParent->else->if->getInputMap->if->newKM->new->KeymapWrapper->newKM->km->getParent->setParent->km->setParent->am->getActionMap->lastAM->while->am->getParent->if->if->if->lastAM->am->getParent->setParent->else->lastAM->setParent->else->newAM->new->KeymapActionMap->lastAM->setParent->if->newAM->am->getParent->setParent->else->if->getActionMap->if->newAM->new->KeymapActionMap->newAM->am->getParent->setParent->am->setParent
JTextComponent#getKeymap():::Fetches the keymap currently active in this text component.:::return
JTextComponent#addKeymap(String, Keymap):::Adds a new keymap into the keymap hierarchy:::map->new->DefaultKeymap->if->getKeymapTable->put->return
JTextComponent#removeKeymap(String):::Removes a named keymap previously added to the document:::return->getKeymapTable->remove
JTextComponent#getKeymap(String):::Fetches a named keymap previously added to the document:::return->getKeymapTable->get
JTextComponent#loadKeymap(Keymap, KeyBinding[], Action[])::: Loads a keymap with a bunch of bindings:::h->new->Hashtable<String,Action>->foreach->value->a->getValue->h->put->foreach->a->h->get->if->map->addActionForKeyStroke
JTextComponent#getCaretColor():::Fetches the current color used to render the caret.:::return
JTextComponent#setCaretColor(Color):::Sets the current color used to render the caret:::old->firePropertyChange
JTextComponent#getSelectionColor():::Fetches the current color used to render the selection.:::return
JTextComponent#setSelectionColor(Color):::Sets the current color used to render the selection:::old->firePropertyChange
JTextComponent#getSelectedTextColor():::Fetches the current color used to render the selected text.:::return
JTextComponent#setSelectedTextColor(Color):::Sets the current color used to render the selected text:::old->firePropertyChange
JTextComponent#getDisabledTextColor():::Fetches the current color used to render the disabled text.:::return
JTextComponent#setDisabledTextColor(Color):::Sets the current color used to render the disabled text:::old->firePropertyChange
JTextComponent#replaceSelection(String):::Replaces the currently selected content with new content represented by the given string:::doc->getDocument->if->try->composedTextSaved->caret->getDot->saveComposedText->p0->Math->caret->getDot->caret->getMark->min->p1->Math->caret->getDot->caret->getMark->max->if->replace->else->if->doc->remove->if->content->length->doc->insertString->if->restoreComposedText->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
JTextComponent#getText(int, int):::Fetches a portion of the text represented by the component:::return->getDocument->getText
JTextComponent#modelToView(int):::Converts the given location in the model to a place in the view coordinate system:::return->getUI->modelToView
JTextComponent#modelToView2D(int):::Converts the given location in the model to a place in the view coordinate system:::return->getUI->modelToView2D
JTextComponent#viewToModel(Point):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->getUI->viewToModel
JTextComponent#viewToModel2D(Point2D):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->getUI->new->Position.BiasArr->viewToModel2D
JTextComponent#cut():::Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model:::if->isEditable->isEnabled->TransferHandler->getCutAction->invokeAction
JTextComponent#copy():::Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model:::TransferHandler->getCopyAction->invokeAction
JTextComponent#paste():::Transfers the contents of the system clipboard into the associated text model:::if->isEditable->isEnabled->TransferHandler->getPasteAction->invokeAction
JTextComponent#moveCaretPosition(int):::Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called:::doc->getDocument->if->if->doc->getLength->throw->new->IllegalArgumentException->caret->moveDot
JTextComponent#setFocusAccelerator(char):::Sets the key accelerator that will cause the receiving text component to get the focus:::Character->toUpperCase->old->firePropertyChange->firePropertyChange
JTextComponent#getFocusAccelerator():::Returns the key accelerator that will cause the receiving text component to get the focus:::return
JTextComponent#read(Reader, Object):::Initializes from a stream:::kit->getUI->getEditorKit->doc->kit->createDefaultDocument->if->doc->putProperty->try->kit->read->setDocument->catch->throw->e->getMessage->new->IOException->finally
JTextComponent#write(Writer):::Stores the contents of the model into the given stream:::doc->getDocument->try->getUI->getEditorKit->doc->getLength->write->catch->throw->e->getMessage->new->IOException->finally
JTextComponent#setCaretPosition(int):::Sets the position of the text insertion caret for the TextComponent:::doc->getDocument->if->if->doc->getLength->throw->new->IllegalArgumentException->caret->setDot
JTextComponent#getCaretPosition():::Returns the position of the text insertion caret for the text component.:::return->caret->getDot
JTextComponent#setText(String):::Sets the text of this TextComponent to the specified text:::try->doc->getDocument->if->doc->getLength->replace->else->doc->doc->getLength->remove->doc->insertString->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
JTextComponent#getText():::Returns the text contained in this TextComponent:::doc->getDocument->txt->try->doc->doc->getLength->getText->catch->finally->return
JTextComponent#getSelectedText():::Returns the selected text contained in this TextComponent:::txt->p0->Math->caret->getDot->caret->getMark->min->p1->Math->caret->getDot->caret->getMark->max->if->try->doc->getDocument->doc->getText->catch->throw->e->getMessage->new->IllegalArgumentException->finally->return
JTextComponent#isEditable():::Returns the boolean indicating whether this TextComponent is editable or not.:::return
JTextComponent#setEditable(boolean):::Sets the specified boolean to indicate whether or not this TextComponent should be editable:::if->oldVal->enableInputMethods->Boolean->valueOf->Boolean->valueOf->firePropertyChange->repaint
JTextComponent#getSelectionStart():::Returns the selected text's start position:::start->Math->caret->getDot->caret->getMark->min->return
JTextComponent#setSelectionStart(int):::Sets the selection start to the specified position:::getSelectionEnd->select
JTextComponent#getSelectionEnd():::Returns the selected text's end position:::end->Math->caret->getDot->caret->getMark->max->return
JTextComponent#setSelectionEnd(int):::Sets the selection end to the specified position:::getSelectionStart->select
JTextComponent#select(int, int):::Selects the text between the specified start and end positions:::docLength->getDocument->getLength->if->if->if->if->setCaretPosition->moveCaretPosition
JTextComponent#selectAll():::Selects all the text in the TextComponent:::doc->getDocument->if->setCaretPosition->doc->getLength->moveCaretPosition
JTextComponent#getToolTipText(MouseEvent):::Returns the string to be used as the tooltip for event:::retValue->super->getToolTipText->if->ui->getUI->if->ui->event->getX->event->getY->new->Point->getToolTipText->return
JTextComponent#getPreferredScrollableViewportSize():::Returns the preferred size of the viewport for a view component:::return->getPreferredSize
JTextComponent#getScrollableUnitIncrement(Rectangle, int, int):::Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation:::switch->return->return->throw->new->IllegalArgumentException
JTextComponent#getScrollableBlockIncrement(Rectangle, int, int):::Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation:::switch->return->return->throw->new->IllegalArgumentException
JTextComponent#getScrollableTracksViewportWidth():::Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport:::parent->SwingUtilities->getUnwrappedParent->if->return->parent->getWidth->getPreferredSize->return
JTextComponent#getScrollableTracksViewportHeight():::Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport:::parent->SwingUtilities->getUnwrappedParent->if->return->parent->getHeight->getPreferredSize->return
JTextComponent#print(MessageFormat, MessageFormat):::A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text:::return->print
JTextComponent#print(MessageFormat, MessageFormat, boolean, PrintService, PrintRequestAttributeSet, boolean):::Prints the content of this JTextComponent:::job->PrinterJob->getPrinterJob->printable->printingStatus->isHeadless->GraphicsEnvironment->isHeadless->isEventDispatchThread->SwingUtilities->isEventDispatchThread->textPrintable->getPrintable->if->PrintingStatus->createPrintingStatus->printingStatus->createNotificationPrintable->else->if->job->setPrintService->job->setPrintable->attr->new->HashPrintRequestAttributeSet->if->job->printDialog->return->doPrint->new->Callable<Object>->futurePrinting->new->FutureTask<Object>->runnablePrinting->new->Runnable->if->runnablePrinting->run->else->if->new->Thread->start->printingStatus->showModal->else->printingStatus->showModal->runnablePrinting->run->try->futurePrinting->get->catch->throw->new->RuntimeException->cause->e->getCause->if->if->printingStatus->isAborted->return->else->throw->else->if->throw->else->if->throw->else->if->throw->else->throw->new->AssertionError->finally->return
JTextComponent#getPrintable(MessageFormat, MessageFormat):::Returns a Printable to use for printing the content of this JTextComponent:::return->TextComponentPrintable->getPrintable
JTextComponent#getAccessibleContext():::Gets the AccessibleContext associated with this JTextComponent:::if->new->AccessibleJTextComponent->return
JTextComponent.AccessibleJTextComponent#caretUpdate(CaretEvent):::Handles caret updates (fire appropriate property change event, which are AccessibleContext.ACCESSIBLE_CARET_PROPERTY and AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY):::dot->e->getDot->mark->e->getMark->if->firePropertyChange->try->getLocationOnScreen->catch->finally->if->getSelectedText->firePropertyChange
JTextComponent.AccessibleJTextComponent#insertUpdate(DocumentEvent):::Handles document insert (fire appropriate property change event which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY):::pos->e->getOffset->if->SwingUtilities->isEventDispatchThread->firePropertyChange->else->doFire->new->Runnable->SwingUtilities->invokeLater
JTextComponent.AccessibleJTextComponent#removeUpdate(DocumentEvent):::Handles document remove (fire appropriate property change event, which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY):::pos->e->getOffset->if->SwingUtilities->isEventDispatchThread->firePropertyChange->else->doFire->new->Runnable->SwingUtilities->invokeLater
JTextComponent.AccessibleJTextComponent#changedUpdate(DocumentEvent):::Handles document remove (fire appropriate property change event, which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY):::pos->e->getOffset->if->SwingUtilities->isEventDispatchThread->firePropertyChange->else->doFire->new->Runnable->SwingUtilities->invokeLater
JTextComponent.AccessibleJTextComponent#getAccessibleStateSet():::Gets the state set of the JTextComponent:::states->super->getAccessibleStateSet->if->JTextComponent.this->isEditable->states->add->return
JTextComponent.AccessibleJTextComponent#getAccessibleRole():::Gets the role of this object.:::return
JTextComponent.AccessibleJTextComponent#getAccessibleText():::Get the AccessibleText associated with this object:::return
JTextComponent.AccessibleJTextComponent#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::if->return->return->JTextComponent.this->viewToModel
JTextComponent.AccessibleJTextComponent#getRootEditorRect():::Gets the editor's drawing rectangle:::alloc->JTextComponent.this->getBounds->if->insets->JTextComponent.this->getInsets->return->return
JTextComponent.AccessibleJTextComponent#getCharacterBounds(int):::Determines the bounding box of the character at the given index into the string:::if->model->getLength->return->ui->getUI->if->return->rect->alloc->getRootEditorRect->if->return->if->readLock->try->rootView->ui->getRootView->if->rootView->setSize->bounds->rootView->modelToView->bounds->getBounds->catch->finally->if->readUnlock->return
JTextComponent.AccessibleJTextComponent#getCharCount():::Returns the number of characters (valid indices):::return->model->getLength
JTextComponent.AccessibleJTextComponent#getCaretPosition():::Returns the zero-based offset of the caret:::return->JTextComponent.this->getCaretPosition
JTextComponent.AccessibleJTextComponent#getCharacterAttribute(int):::Returns the AttributeSet for a given character (at a given index).:::e->if->readLock->try->for->model->getDefaultRootElement->e->isLeaf->catch->finally->if->readUnlock->return->e->getAttributes
JTextComponent.AccessibleJTextComponent#getSelectionStart():::Returns the start offset within the selected text:::return->JTextComponent.this->getSelectionStart
JTextComponent.AccessibleJTextComponent#getSelectionEnd():::Returns the end offset within the selected text:::return->JTextComponent.this->getSelectionEnd
JTextComponent.AccessibleJTextComponent#getSelectedText():::Returns the portion of the text that is selected.:::return->JTextComponent.this->getSelectedText
JTextComponent.AccessibleJTextComponent#getAtIndex(int, int):::Returns the String at a given index:::return->getAtIndex
JTextComponent.AccessibleJTextComponent#getAfterIndex(int, int):::Returns the String after a given index:::return->getAtIndex
JTextComponent.AccessibleJTextComponent#getBeforeIndex(int, int):::Returns the String before a given index:::return->getAtIndex
JTextComponent.AccessibleJTextComponent#getAccessibleEditableText():::Returns the AccessibleEditableText interface for this text component.:::return
JTextComponent.AccessibleJTextComponent#setTextContents(String):::Sets the text contents to the specified string.:::JTextComponent.this->setText
JTextComponent.AccessibleJTextComponent#insertTextAtIndex(int, String):::Inserts the specified string at the given index:::doc->JTextComponent.this->getDocument->if->try->if->s->length->composedTextSaved->saveComposedText->doc->insertString->if->restoreComposedText->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
JTextComponent.AccessibleJTextComponent#getTextRange(int, int):::Returns the text string between two indices.:::txt->p0->Math->min->p1->Math->max->if->try->doc->JTextComponent.this->getDocument->doc->getText->catch->throw->e->getMessage->new->IllegalArgumentException->finally->return
JTextComponent.AccessibleJTextComponent#delete(int, int):::Deletes the text between two indices:::if->isEditable->isEnabled->try->p0->Math->min->p1->Math->max->if->doc->getDocument->doc->remove->catch->finally->else->UIManager->getLookAndFeel->provideErrorFeedback
JTextComponent.AccessibleJTextComponent#cut(int, int):::Cuts the text between two indices into the system clipboard.:::selectText->JTextComponent.this->cut
JTextComponent.AccessibleJTextComponent#paste(int):::Pastes the text from the system clipboard into the text starting at the specified index.:::setCaretPosition->JTextComponent.this->paste
JTextComponent.AccessibleJTextComponent#replaceText(int, int, String):::Replaces the text between two indices with the specified string.:::selectText->JTextComponent.this->replaceSelection
JTextComponent.AccessibleJTextComponent#selectText(int, int):::Selects the text between two indices.:::JTextComponent.this->select
JTextComponent.AccessibleJTextComponent#setAttributes(int, int, AttributeSet):::Sets attributes for the text between two indices.:::doc->JTextComponent.this->getDocument->if->sDoc->offset->length->sDoc->setCharacterAttributes
JTextComponent.AccessibleJTextComponent#getTextSequenceAt(int, int):::Returns the AccessibleTextSequence at a given index.:::return->getSequenceAtIndex
JTextComponent.AccessibleJTextComponent#getTextSequenceAfter(int, int):::Returns the AccessibleTextSequence after a given index.:::return->getSequenceAtIndex
JTextComponent.AccessibleJTextComponent#getTextSequenceBefore(int, int):::Returns the AccessibleTextSequence before a given index.:::return->getSequenceAtIndex
JTextComponent.AccessibleJTextComponent#getTextBounds(int, int):::Returns the Rectangle enclosing the text between two indicies.:::if->model->getLength->model->getLength->return->ui->getUI->if->return->rect->alloc->getRootEditorRect->if->return->if->readLock->try->rootView->ui->getRootView->if->bounds->rootView->modelToView->bounds->getBounds->catch->finally->if->readUnlock->return
JTextComponent.AccessibleJTextComponent#getAccessibleActionCount():::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object.:::actions->JTextComponent.this->getActions->return
JTextComponent.AccessibleJTextComponent#getAccessibleActionDescription(int):::Returns a description of the specified action of the object.:::actions->JTextComponent.this->getActions->if->return->return->getValue
JTextComponent.AccessibleJTextComponent#doAccessibleAction(int):::Performs the specified Action on the object:::actions->JTextComponent.this->getActions->if->return->ae->EventQueue->getMostRecentEventTime->getCurrentEventModifiers->new->ActionEvent->actionPerformed->return
JTextComponent.DropLocation#getIndex():::Returns the index where dropped data should be inserted into the associated component:::return
JTextComponent.DropLocation#getBias():::Returns the bias for the drop index.:::return
JTextComponent.DropLocation#toString():::Returns a string representation of this drop location:::return->getClass->getName->getDropPoint
JTextComponent#paramString():::Returns a string representation of this JTextComponent:::editableString->caretColorString->caretColor->toString->selectionColorString->selectionColor->toString->selectedTextColorString->selectedTextColor->toString->disabledTextColorString->disabledTextColor->toString->marginString->margin->toString->return->super->paramString
JTextComponent#getFocusedComponent():::Returns the JTextComponent that most recently had focus:::return->AppContext->getAppContext->get
JTextComponent.DefaultKeymap#getDefaultAction():::Fetch the default action to fire if a key is typed (ie a KEY_TYPED KeyEvent is received) and there is no binding for it:::if->return->return->parent->getDefaultAction
JTextComponent.DefaultKeymap#setDefaultAction(Action):::Set the default action to fire if a key is typed.:::
JTextComponent.DefaultKeymap#toString():::String representation of the keymap..:::return
JTextComponent.MutableCaretEvent#mousePressed(MouseEvent):::Requests focus on the associated text component, and try to set the cursor position.:::
JTextComponent.MutableCaretEvent#mouseReleased(MouseEvent):::Called when the mouse is released.:::fire
JTextComponent#saveComposedText(int):::Saves composed text around the specified position:::if->composedTextExists->start->composedTextStart->getOffset->len->composedTextEnd->getOffset->composedTextStart->getOffset->if->try->getDocument->remove->return->catch->finally->return
JTextComponent#restoreComposedText():::Restores composed text previously saved by saveComposedText:::doc->getDocument->try->doc->caret->getDot->insertString->doc->caret->getDot->composedTextContent->length->createPosition->doc->caret->getDot->createPosition->catch->finally
Keymap#getName():::Fetches the name of the set of key-bindings.:::
Keymap#getDefaultAction():::Fetches the default action to fire if a key is typed (i.e:::
Keymap#setDefaultAction(Action):::Set the default action to fire if a key is typed.:::
Keymap#getAction(KeyStroke):::Fetches the action appropriate for the given symbolic event sequence:::
Keymap#getBoundKeyStrokes():::Fetches all of the keystrokes in this map that are bound to some action.:::
Keymap#getBoundActions():::Fetches all of the actions defined in this keymap.:::
Keymap#getKeyStrokesForAction(Action):::Fetches the keystrokes that will result in the given action.:::
Keymap#isLocallyDefined(KeyStroke):::Determines if the given key sequence is locally defined.:::
Keymap#addActionForKeyStroke(KeyStroke, Action):::Adds a binding to the keymap.:::
Keymap#removeKeyStrokeBinding(KeyStroke):::Removes a binding from the keymap.:::
Keymap#removeBindings():::Removes all bindings from the keymap.:::
Keymap#getResolveParent():::Fetches the parent keymap used to resolve key-bindings.:::
Keymap#setResolveParent(Keymap):::Sets the parent keymap, which will be used to resolve key-bindings:::
LabelView#sync():::Synchronize the view's cached values with the model:::if->setPropertiesFromAttributes
LabelView#setUnderline(boolean):::Sets whether or not the view is underlined:::
LabelView#setStrikeThrough(boolean):::Sets whether or not the view has a strike/line through it:::
LabelView#setSuperscript(boolean):::Sets whether or not the view represents a superscript:::
LabelView#setSubscript(boolean):::Sets whether or not the view represents a subscript:::
LabelView#setBackground(Color):::Sets the background color for the view:::
LabelView#setPropertiesFromAttributes():::Sets the cached properties from the attributes.:::attr->getAttributes->if->d->getDocument->if->doc->doc->getFont->doc->getForeground->if->attr->isDefined->doc->getBackground->else->StyleConstants->isUnderline->setUnderline->StyleConstants->isStrikeThrough->setStrikeThrough->StyleConstants->isSuperscript->setSuperscript->StyleConstants->isSubscript->setSubscript->else->throw->new->StateInvariantError
LabelView#getFontMetrics():::Fetches the FontMetrics used for this view.:::sync->c->getContainer->return->c->getFontMetrics->Toolkit->getDefaultToolkit->getFontMetrics
LabelView#getBackground():::Fetches the background color to use to render the glyphs:::sync->return
LabelView#getForeground():::Fetches the foreground color to use to render the glyphs:::sync->return
LabelView#getFont():::Fetches the font that the glyphs should be based upon:::sync->return
LabelView#isUnderline():::Determines if the glyphs should be underlined:::sync->return
LabelView#isStrikeThrough():::Determines if the glyphs should have a strikethrough line:::sync->return
LabelView#isSubscript():::Determines if the glyphs should be rendered as superscript.:::sync->return
LabelView#isSuperscript():::Determines if the glyphs should be rendered as subscript:::sync->return
LabelView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::super->changedUpdate
LayeredHighlighter#paintLayeredHighlights(Graphics, int, int, Shape, JTextComponent, View):::When leaf Views (such as LabelView) are rendering they should call into this method:::
LayoutQueue#getDefaultQueue():::Fetch the default layout queue.:::ac->AppContext->getAppContext->synchronized->defaultQueue->ac->get->if->new->LayoutQueue->ac->put->return
LayoutQueue#setDefaultQueue(LayoutQueue):::Set the default layout queue.:::synchronized->AppContext->getAppContext->put
LayoutQueue#addTask(Runnable):::Add a task that is not needed immediately because the results are not believed to be visible.:::if->workerRunnable->work->do->waitForWork->if->work->run->while->new->Thread->worker->setPriority->worker->start->tasks->addElement->notifyAll
LayoutQueue#waitForWork():::Used by the worker thread to get a new task to execute.:::while->tasks->size->try->wait->catch->return->finally->work->tasks->firstElement->tasks->removeElementAt->return
MaskFormatter#setMask(String):::Sets the mask dictating the legal characters:::updateInternalMask
MaskFormatter#getMask():::Returns the formatting mask.:::return
MaskFormatter#setValidCharacters(String):::Allows for further restricting of the characters that can be input:::
MaskFormatter#getValidCharacters():::Returns the valid characters that can be input.:::return
MaskFormatter#setInvalidCharacters(String):::Allows for further restricting of the characters that can be input:::
MaskFormatter#getInvalidCharacters():::Returns the characters that are not valid for input.:::return
MaskFormatter#setPlaceholder(String):::Sets the string to use if the value does not completely fill in the mask:::
MaskFormatter#getPlaceholder():::Returns the String to use if the value does not completely fill in the mask.:::return
MaskFormatter#setPlaceholderCharacter(char):::Sets the character to use in place of characters that are not present in the value, ie the user must fill them in:::
MaskFormatter#getPlaceholderCharacter():::Returns the character to use in place of characters that are not present in the value, ie the user must fill them in.:::return
MaskFormatter#setValueContainsLiteralCharacters(boolean):::If true, the returned value and set value will also contain the literal characters in mask:::
MaskFormatter#getValueContainsLiteralCharacters():::Returns true if stringToValue should return literal characters in the mask.:::return
MaskFormatter#stringToValue(String):::Parses the text, returning the appropriate Object representation of the String value:::return->stringToValue
MaskFormatter#valueToString(Object):::Returns a String representation of the Object value based on the mask:::sValue->value->toString->result->new->StringBuilder->placeholder->getPlaceholder->valueCounter->append->return->result->toString
MaskFormatter#install(JFormattedTextField):::Installs the DefaultFormatter onto a particular JFormattedTextField:::super->install->if->value->ftf->getValue->try->valueToString->stringToValue->catch->setEditValid->finally
MaskFormatter#isNavigatable(int):::Returns true if the MaskFormatter allows invalid, or the offset is less than the max length and the character at offset is a literal.:::if->getAllowsInvalid->return->getMaxLength->isLiteral->return
MaskFormatter#canReplace(ReplaceHolder):::This method does the following (assuming !getAllowsInvalid()): iterate over the max of the deleted region or the text length, for each character: <ol> <li>If it is valid (matches the mask at the particular position, or     matches the literal character at the position), allow it <li>Else if the position identifies a literal character, add it:::if->getAllowsInvalid->replace->text->tl->text->length->if->getFormattedTextField->getSelectionStart->while->isLiteral->max->Math->getMaxLength->Math->max->min->for->counter->textIndex->if->replace->toString->else->if->getMaxLength->text->getMaxLength->substring->if->getOverwriteMode->length->return->super->canReplace
MutableAttributeSet#addAttribute(Object, Object):::Creates a new attribute set similar to this one except that it contains an attribute with the given name and value:::
MutableAttributeSet#addAttributes(AttributeSet):::Creates a new attribute set similar to this one except that it contains the given attributes and values.:::
MutableAttributeSet#removeAttribute(Object):::Removes an attribute with the given name.:::
MutableAttributeSet#removeAttributes(Enumeration):::Removes an attribute set with the given names.:::
MutableAttributeSet#removeAttributes(AttributeSet):::Removes a set of attributes with the given name.:::
MutableAttributeSet#setResolveParent(AttributeSet):::Sets the resolving parent:::
NavigationFilter#setDot(FilterBypass, int, Position.Bias):::Invoked prior to the Caret setting the dot:::fb->setDot
NavigationFilter#moveDot(FilterBypass, int, Position.Bias):::Invoked prior to the Caret moving the dot:::fb->moveDot
NavigationFilter#getNextVisualPositionFrom(JTextComponent, int, Position.Bias, int, Position.Bias[]):::Returns the next visual position to place the caret at from an existing position:::return->text->getUI->getNextVisualPositionFrom
NavigationFilter.FilterBypass#getCaret():::Returns the Caret that is changing.:::
NavigationFilter.FilterBypass#setDot(int, Position.Bias):::Sets the caret location, bypassing the NavigationFilter.:::
NavigationFilter.FilterBypass#moveDot(int, Position.Bias):::Moves the caret location, bypassing the NavigationFilter.:::
NumberFormatter#setFormat(Format):::Sets the format that dictates the legal values that can be edited and displayed:::super->setFormat->dfs->getDecimalFormatSymbols->if->sb->new->StringBuilder->sb->dfs->getCurrencySymbol->append->sb->dfs->getDecimalSeparator->append->sb->dfs->getGroupingSeparator->append->sb->dfs->getInfinity->append->sb->dfs->getInternationalCurrencySymbol->append->sb->dfs->getMinusSign->append->sb->dfs->getMonetaryDecimalSeparator->append->sb->dfs->getNaN->append->sb->dfs->getPercent->append->sb->append->sb->toString->else
NumberFormatter#stringToValue(String, Format):::Invokes parseObject on f, returning its value.:::if->return->value->f->parseObject->return->getValueClass->convertValueToValueClass
NumberFormatter#isLegalInsertText(String):::Subclassed to return false if text contains in an invalid character to insert, that is, it is not a digit (Character.isDigit()) and not one of the characters defined by the DecimalFormatSymbols.:::if->getAllowsInvalid->return->for->counter->text->length->return
NumberFormatter#isLiteral(Map):::Subclassed to treat the decimal separator, grouping separator, exponent symbol, percent, permille, currency and sign as literals.:::if->super->isLiteral->if->return->size->attrs->size->if->attrs->get->if->attrs->get->if->attrs->get->if->attrs->get->if->attrs->get->if->attrs->get->if->attrs->get->return->return
NumberFormatter#isNavigatable(int):::Subclassed to make the decimal separator navigable, as well as making the character between the integer field and the next field navigable.:::if->super->isNavigatable->return->getBufferedChar->getDecimalSeparator->return
NumberFormatter#replace(DocumentFilter.FilterBypass, int, int, String, AttributeSet):::Overriden to toggle the value if the positive/minus sign is inserted.:::if->getAllowsInvalid->string->length->string->charAt->toggleSignIfNecessary->return->super->replace
ParagraphView#setJustification(int):::Sets the type of justification.:::
ParagraphView#setLineSpacing(float):::Sets the line spacing.:::
ParagraphView#setFirstLineIndent(float):::Sets the indent on the first line.:::
ParagraphView#setPropertiesFromAttributes():::Set the cached properties from the attributes.:::attr->getAttributes->if->setParagraphInsets->a->attr->getAttribute->alignment->if->doc->getElement->getDocument->o->doc->getProperty->if->o->equals->else->else->a->intValue->setJustification->StyleConstants->getLineSpacing->setLineSpacing->StyleConstants->getFirstLineIndent->setFirstLineIndent
ParagraphView#getLayoutViewCount():::Returns the number of views that this view is responsible for:::return->layoutPool->getViewCount
ParagraphView#getLayoutView(int):::Returns the view at a given index:::return->layoutPool->getView
ParagraphView#getNextNorthSouthVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Returns the next visual position for the cursor, in either the east or west direction:::vIndex->if->getViewCount->else->if->getViewIndexAtPosition->else->getViewIndexAtPosition->if->if->return->else->if->getViewCount->return->text->getContainer->c->text->getCaret->magicPoint->c->getMagicCaretPosition->x->if->posBounds->try->text->getUI->modelToView->catch->finally->if->else->posBounds->getBounds->else->return->getClosestPositionTo
ParagraphView#flipEastAndWestAtEnds(int, Position.Bias):::Determines in which direction the next view lays:::doc->getDocument->getStartOffset->return->AbstractDocument->isLeftToRight
ParagraphView#getFlowSpan(int):::Fetches the constraining span to flow against for the given child index.:::child->getView->adjust->if->row->row->getLeftInset->row->getRightInset->return
ParagraphView#getFlowStart(int):::Fetches the location along the flow axis that the flow span will start at.:::child->getView->adjust->if->row->row->getLeftInset->return
ParagraphView#createRow():::Create a View that should be used to hold a a row's worth of children in a flow.:::return->getElement->new->Row
ParagraphView#nextTabStop(float, int):::Returns the next tab stop position given a reference position:::if->return->tabs->getTabSet->if->return->tab->tabs->getTabAfter->if->return->alignment->tab->getAlignment->offset->switch->return->tab->getPosition->return->tab->getPosition->findOffsetToCharactersInString->break->findOffsetToCharactersInString->break->if->getEndOffset->charsSize->getPartialSize->switch->return->Math->tab->getPosition->max->return->Math->tab->getPosition->max->return
ParagraphView#getTabSet():::Gets the Tabset to be used in calculating tabs.:::return->StyleConstants->getElement->getAttributes->getTabSet
ParagraphView#getPartialSize(int, int):::Returns the size used by the views between startOffset and endOffset:::size->viewIndex->numViews->getViewCount->view->viewEnd->tempEnd->getElement->getElementIndex->layoutPool->getViewCount->while->layoutPool->getView->view->getEndOffset->Math->min->if->getPartialSpan->else->if->view->getStartOffset->view->getEndOffset->view->getPreferredSpan->else->return->return
ParagraphView#findOffsetToCharactersInString(char[], int):::Finds the next character in the document with a character in string, starting at offset start:::stringLength->end->getEndOffset->seg->new->Segment->try->getDocument->getText->catch->return->finally->for->counter->maxCounter->return
ParagraphView#getTabBase():::Returns where the tabs are calculated from.:::return
ParagraphView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::alloc->a->getBounds->getLeftInset->super->paint->if->sh->getChildAllocation->if->sh->intersects->x->getLeftInset->y->getTopInset->clip->g->getClipBounds->getOffset->getOffset->getSpan->getSpan->if->tempRect->intersects->paintChild
ParagraphView#getAlignment(int):::Determines the desired alignment for this view along an axis:::switch->a->if->getViewCount->paragraphSpan->getPreferredSpan->v->getView->rowSpan->v->getPreferredSpan->return->return->throw->new->IllegalArgumentException
ParagraphView#breakView(int, float, Shape):::Breaks this view on the given axis at the given length:::if->if->alloc->a->getBounds->setSize->return->return
ParagraphView#getBreakWeight(int, float):::Gets the break weight for a given location:::if->return->return
ParagraphView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the needs for the paragraph along the minor axis:::super->calculateMinorAxisRequirements->min->glue->n->getLayoutViewCount->for->i->Math->max->Math->max->Math->max->return
ParagraphView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::setPropertiesFromAttributes->layoutChanged->layoutChanged->super->changedUpdate
ParagraphView.Row#loadChildren(ViewFactory):::This is reimplemented to do nothing since the paragraph fills in the row with its needed children.:::
ParagraphView.Row#getAttributes():::Fetches the attributes to use when rendering:::p->getParent->return->p->getAttributes
ParagraphView.Row#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it:::r->a->getBounds->v->getViewAtPosition->if->v->getElement->isLeaf->return->super->modelToView->a->getBounds->height->y->loc->super->modelToView->bounds->loc->getBounds2D->bounds->bounds->getX->bounds->getWidth->setRect->return
ParagraphView.Row#getStartOffset():::Range represented by a row in the paragraph is only a subset of the total range of the paragraph element.:::offs->n->getViewCount->for->i->return
ParagraphView.Row#layoutMinorAxis(int, int, int[], int[]):::Perform layout for the minor axis of the box (i.e:::baselineLayout
ParagraphView.Row#getViewIndexAtPosition(int):::Fetches the child view index representing the given position in the model.:::if->getStartOffset->getEndOffset->return->for->counter->getViewCount->return
ParagraphView.Row#getLeftInset():::Gets the left inset.:::parentView->adjustment->if->getParent->if->parentView->getView->return->super->getLeftInset
PasswordView#drawUnselectedText(Graphics, int, int, int, int):::Renders the given range in the model as normal unselected text:::return->drawUnselectedTextImpl
PasswordView#drawSelectedText(Graphics, int, int, int, int):::Renders the given range in the model as selected text:::return->drawSelectedTextImpl
PasswordView#drawEchoCharacter(Graphics, int, int, char):::Renders the echo character, or whatever graphic should be used to display the password characters:::return->drawEchoCharacterImpl
PasswordView#drawEchoCharacter(Graphics2D, float, float, char):::Renders the echo character, or whatever graphic should be used to display the password characters:::return->drawEchoCharacterImpl
PasswordView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::c->getContainer->if->f->if->f->echoCharIsSet->return->super->modelToView->echoChar->f->getEchoChar->m->f->f->getFont->getFontMetrics->alloc->adjustAllocation->getBounds->dx->getStartOffset->m->charWidth->return->return
PasswordView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::n->c->getContainer->if->f->if->f->echoCharIsSet->return->super->viewToModel->echoChar->f->getEchoChar->charWidth->f->f->getFont->getFontMetrics->charWidth->adjustAllocation->alloc->a->getBounds->if->else->if->getStartOffset->getDocument->getLength->getDocument->getLength->getStartOffset->return->getStartOffset
PasswordView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::switch->c->getContainer->if->f->if->f->echoCharIsSet->echoChar->f->getEchoChar->m->f->f->getFont->getFontMetrics->doc->getDocument->return->m->charWidth->getDocument->getLength->return->super->getPreferredSpan
PlainDocument#insertString(int, String, AttributeSet):::Inserts some content into the document:::filterNewlines->getProperty->if->filterNewlines->equals->if->str->indexOf->filtered->new->StringBuilder->n->filtered->length->for->i->filtered->toString->super->insertString
PlainDocument#getDefaultRootElement():::Gets the default root element for the document model.:::return
PlainDocument#createDefaultRoot():::Creates the root element to be used to represent the default document structure.:::map->createBranchElement->line->createLeafElement->lines->new->ElementArr->map->replace->return
PlainDocument#getParagraphElement(int):::Get the paragraph element containing the given position:::lineMap->getDefaultRootElement->return->lineMap->lineMap->getElementIndex->getElement
PlainDocument#insertUpdate(DefaultDocumentEvent, AttributeSet):::Updates document structure as a result of text insertion:::removed->removeAllElements->added->removeAllElements->lineMap->getDefaultRootElement->offset->chng->getOffset->length->chng->getLength->if->index->lineMap->getElementIndex->rmCandidate->lineMap->getElement->rmOffs0->rmCandidate->getStartOffset->rmOffs1->rmCandidate->getEndOffset->lastOffset->try->if->new->Segment->getContent->getChars->hasBreaks->for->i->if->removed->addElement->if->lineMap->getElementCount->e->lineMap->getElement->removed->addElement->e->getEndOffset->if->added->createLeafElement->addElement->aelems->added->size->new->ElementArr->added->copyInto->relems->removed->size->new->ElementArr->removed->copyInto->ee->new->ElementEdit->chng->addEdit->lineMap->replace->if->Utilities->isComposedTextAttributeDefined->insertComposedTextUpdate->catch->throw->e->toString->new->Error->finally->super->insertUpdate
PlainDocument#removeUpdate(DefaultDocumentEvent):::Updates any document structure as a result of text removal:::removed->removeAllElements->map->getDefaultRootElement->offset->chng->getOffset->length->chng->getLength->line0->map->getElementIndex->line1->map->getElementIndex->if->for->i->p0->map->getElement->getStartOffset->p1->map->getElement->getEndOffset->aelems->new->ElementArr->createLeafElement->relems->removed->size->new->ElementArr->removed->copyInto->ee->new->ElementEdit->chng->addEdit->map->replace->else->line->map->getElement->if->line->isLeaf->leaf->line->line->getElementIndex->getElement->if->Utilities->isComposedTextElement->aelem->new->ElementArr->line->getStartOffset->line->getEndOffset->createLeafElement->relem->new->ElementArr->ee->new->ElementEdit->chng->addEdit->map->replace->super->removeUpdate
PlainView#getTabSize():::Returns the tab size set for the document, defaulting to 8.:::i->getDocument->getProperty->size->i->intValue->return
PlainView#drawLine(int, Graphics, int, int):::Renders a line of text, suppressing whitespace at the end and expanding any tabs:::drawLineImpl
PlainView#drawLine(int, Graphics2D, float, float):::Renders a line of text, suppressing whitespace at the end and expanding any tabs:::drawLineImpl
PlainView#drawUnselectedText(Graphics, int, int, int, int):::Renders the given range in the model as normal unselected text:::return->drawUnselectedTextImpl
PlainView#drawUnselectedText(Graphics2D, float, float, int, int):::Renders the given range in the model as normal unselected text:::return->drawUnselectedTextImpl
PlainView#drawSelectedText(Graphics, int, int, int, int):::Renders the given range in the model as selected text:::return->drawSelectedTextImpl
PlainView#drawSelectedText(Graphics2D, float, float, int, int):::Renders the given range in the model as selected text:::return->drawSelectedTextImpl
PlainView#getLineBuffer():::Gives access to a buffer that can be used to fetch text from the associated document.:::if->new->Segment->return
PlainView#updateMetrics():::Checks to see if the font metrics and longest line are up-to-date.:::host->getContainer->f->host->getFont->fm->host->getFontMetrics->if->Objects->equals->calculateLongestLine->if->frc->metrics->getFontRenderContext->tabWidth->font->getStringBounds->getWidth->getTabSize->else->getTabSize->metrics->charWidth
PlainView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::updateMetrics->switch->return->getLineWidth->return->getElement->getElementCount->metrics->getHeight->throw->new->IllegalArgumentException
PlainView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::originalA->adjustPaintRegion->alloc->host->getContainer->h->host->getHighlighter->g->host->getFont->setFont->host->getSelectionStart->host->getSelectionEnd->host->isEnabled->host->getForeground->host->getDisabledTextColor->c->host->getCaret->c->isSelectionVisible->host->getSelectedTextColor->updateMetrics->clip->g->getClipBounds->fontHeight->metrics->getHeight->heightBelow->heightAbove->linesBelow->linesAbove->linesTotal->if->Math->max->Math->max->if->else->lineArea->lineToRect->y->metrics->getAscent->x->map->getElement->lineCount->map->getElementCount->endLine->Math->min->dh->for->line
PlainView#adjustPaintRegion(Shape):::Should return a shape ideal for painting based on the passed in Shape a:::return
PlainView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::doc->getDocument->map->getElement->lineIndex->map->getElementIndex->if->return->lineToRect->lineArea->lineToRect->line->map->getElement->p0->line->getStartOffset->s->SegmentCache->getSharedSegment->doc->getText->if->xOffs->Utilities->getTabbedTextWidth->SegmentCache->releaseSharedSegment->return->metrics->getHeight->new->Rectangle2D.Float->xOffs->Utilities->getTabbedTextWidth->SegmentCache->releaseSharedSegment->metrics->getHeight->return
PlainView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->a->getBounds->doc->getDocument->if->return->getStartOffset->else->if->return->getEndOffset->else->map->doc->getDefaultRootElement->fontHeight->metrics->getHeight->lineIndex->Math->abs->map->getElementCount->if->map->getElementCount->return->getEndOffset->line->map->getElement->dx->if->if->return->line->getStartOffset->else->if->return->line->getEndOffset->else->try->p0->line->getStartOffset->p1->line->getEndOffset->s->SegmentCache->getSharedSegment->doc->getText->offs->Utilities->getTabbedTextOffset->SegmentCache->releaseSharedSegment->return->catch->return->finally
PlainView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::updateDamage
PlainView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::updateDamage
PlainView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::updateDamage
PlainView#setSize(float, float):::Sets the size of the view:::super->setSize->updateMetrics
PlainView#nextTabStop(float, int):::Returns the next tab stop position after a given reference position:::if->return->ntabs->return
PlainView#updateDamage(DocumentEvent, Shape, ViewFactory):::Repaint the region of change covered by the given document event:::host->getContainer->updateMetrics->elem->getElement->ec->changes->getChange->added->ec->getChildrenAdded->removed->ec->getChildrenRemoved->if->if->currWide->getLineWidth->for->i->if->for->i->preferenceChanged->host->repaint->else->map->getElement->line->map->changes->getOffset->getElementIndex->damageLineRange->if->changes->getType->w->getLineWidth->e->map->getElement->if->preferenceChanged->else->if->getLineWidth->preferenceChanged->else->if->changes->getType->if->map->getElement->calculateLongestLine->preferenceChanged
PlainView#damageLineRange(int, int, Shape, Component):::Repaint the given line range.:::if->area0->lineToRect->area1->lineToRect->if->damage->area0->union->host->repaint->else->host->repaint
PlainView#lineToRect(Shape, int):::Determine the rectangle that represents the given line.:::r->updateMetrics->if->alloc->a->getBounds->if->metrics->getHeight->metrics->getHeight->new->Rectangle->return
Position#getOffset():::Fetches the current offset within the document.:::
Position.Bias#toString():::string representation:::return
Segment#setPartialReturn(boolean):::Flag to indicate that partial returns are valid:::
Segment#isPartialReturn():::Flag to indicate that partial returns are valid.:::return
Segment#toString():::Converts a segment into a String.:::if->return->new->String->return
Segment#first():::Sets the position to getBeginIndex() and returns the character at that position.:::if->return->return
Segment#last():::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.:::if->return->return
Segment#current():::Gets the character at the current position (as returned by getIndex()).:::if->return->return
Segment#next():::Increments the iterator's index by one and returns the character at the new index:::end->if->return->return->current
Segment#previous():::Decrements the iterator's index by one and returns the character at the new index:::if->return->return->current
Segment#setIndex(int):::Sets the position to the specified position in the text and returns that character.:::end->if->throw->new->IllegalArgumentException->if->return->return
Segment#getBeginIndex():::Returns the start index of the text.:::return
Segment#getEndIndex():::Returns the end index of the text:::return
Segment#getIndex():::Returns the current index.:::return
Segment#clone():::Creates a shallow copy.:::o->try->super->clone->catch->finally->return
SegmentCache#getSharedInstance():::Returns the shared SegmentCache.:::return
SegmentCache#getSharedSegment():::A convenience method to get a Segment from the shared SegmentCache.:::return->getSharedInstance->getSegment
SegmentCache#releaseSharedSegment(Segment):::A convenience method to release a Segment to the shared SegmentCache.:::getSharedInstance->releaseSegment
SegmentCache#getSegment():::Returns a Segment:::synchronized->size->segments->size->if->return->segments->remove->return->new->CachedSegment
SegmentCache#releaseSegment(Segment):::Releases a Segment:::if->synchronized->segments->add
SimpleAttributeSet#isEmpty():::Checks whether the set of attributes is empty.:::return->table->isEmpty
SimpleAttributeSet#getAttributeCount():::Gets a count of the number of attributes.:::return->table->size
SimpleAttributeSet#isDefined(Object):::Tells whether a given attribute is defined.:::return->table->containsKey
SimpleAttributeSet#isEqual(AttributeSet):::Compares two attribute sets.:::return->getAttributeCount->attr->getAttributeCount->containsAttributes
SimpleAttributeSet#copyAttributes():::Makes a copy of the attributes.:::return->clone
SimpleAttributeSet#getAttributeNames():::Gets the names of the attributes in the set.:::return->Collections->table->keySet->enumeration
SimpleAttributeSet#getAttribute(Object):::Gets the value of an attribute.:::value->table->get->if->parent->getResolveParent->if->parent->getAttribute->return
SimpleAttributeSet#containsAttribute(Object, Object):::Checks whether the attribute list contains a specified attribute name/value pair.:::return->value->getAttribute->equals
SimpleAttributeSet#containsAttributes(AttributeSet):::Checks whether the attribute list contains all the specified name/value pairs.:::result->names->attributes->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attributes->getAttribute->getAttribute->equals->return
SimpleAttributeSet#addAttribute(Object, Object):::Adds an attribute to the list.:::table->put
SimpleAttributeSet#addAttributes(AttributeSet):::Adds a set of attributes to the list.:::names->attributes->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attributes->getAttribute->addAttribute
SimpleAttributeSet#removeAttribute(Object):::Removes an attribute from the list.:::table->remove
SimpleAttributeSet#removeAttributes(Enumeration):::Removes a set of attributes from the list.:::while->names->hasMoreElements->names->nextElement->removeAttribute
SimpleAttributeSet#removeAttributes(AttributeSet):::Removes a set of attributes from the list.:::if->table->clear->else->names->attributes->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->value->attributes->getAttribute->if->value->getAttribute->equals->removeAttribute
SimpleAttributeSet#getResolveParent():::Gets the resolving parent:::return->table->get
SimpleAttributeSet#setResolveParent(AttributeSet):::Sets the resolving parent.:::addAttribute
SimpleAttributeSet#clone():::Clones a set of attributes.:::attr->try->super->clone->table->clone->catch->finally->return
SimpleAttributeSet#hashCode():::Returns a hashcode for this set of attributes.:::return->table->hashCode
SimpleAttributeSet#equals(Object):::Compares this object to the specified object:::if->return->if->attrs->return->isEqual->return
SimpleAttributeSet#toString():::Converts the attribute set to a String.:::s->names->getAttributeNames->while->names->hasMoreElements->key->names->nextElement->value->getAttribute->if->else->return
StringContent#length():::Returns the length of the content.:::return
StringContent#insertString(int, String):::Inserts a string into the content.:::if->throw->new->BadLocationException->chars->str->toCharArray->replace->if->str->length->updateMarksForInsert->return->str->length->new->InsertUndo
StringContent#remove(int, int):::Removes part of the content:::if->throw->new->BadLocationException->removedString->getString->edit->new->RemoveUndo->replace->if->updateMarksForRemove->return
StringContent#getString(int, int):::Retrieves a portion of the content:::if->throw->new->BadLocationException->return->new->String
StringContent#getChars(int, int, Segment):::Retrieves a portion of the content:::if->throw->new->BadLocationException
StringContent#createPosition(int):::Creates a position within the content that will track change as the content is mutated.:::if->new->Vector<PosRec>->return->new->StickyPosition
StringContent#replace(int, int, char[], int, int):::Replaces some of the characters in the array:::delta->src->nmove->dest->if->newLength->Math->max->newData->new->charArr->System->arraycopy->System->arraycopy->System->arraycopy->else->System->arraycopy->System->arraycopy
StringContent#getPositionsInRange(Vector, int, int):::Returns a Vector containing instances of UndoPosRef for the Positions in the range offset to offset + length:::n->marks->size->end->placeIn->new->Vector->for->i->return
StringContent#updateUndoPositions(Vector):::Resets the location for all the UndoPosRef instances in positions:::for->counter->positions->size
StringContent.UndoPosRef#resetLocation():::Resets the location of the Position to the offset when the receiver was instantiated.:::
Style#getName():::Fetches the name of the style:::
Style#addChangeListener(ChangeListener):::Adds a listener to track whenever an attribute has been changed.:::
Style#removeChangeListener(ChangeListener):::Removes a listener that was tracking attribute changes.:::
StyleConstants#toString():::Returns the string representation.:::return
StyleConstants#getBidiLevel(AttributeSet):::Gets the BidiLevel setting.:::o->a->getAttribute->if->return->o->intValue->return
StyleConstants#setBidiLevel(MutableAttributeSet, int):::Sets the BidiLevel.:::a->Integer->valueOf->addAttribute
StyleConstants#getComponent(AttributeSet):::Gets the component setting from the attribute list.:::return->a->getAttribute
StyleConstants#setComponent(MutableAttributeSet, Component):::Sets the component attribute.:::a->addAttribute->a->addAttribute
StyleConstants#getIcon(AttributeSet):::Gets the icon setting from the attribute list.:::return->a->getAttribute
StyleConstants#setIcon(MutableAttributeSet, Icon):::Sets the icon attribute.:::a->addAttribute->a->addAttribute
StyleConstants#getFontFamily(AttributeSet):::Gets the font family setting from the attribute list.:::family->a->getAttribute->if->return
StyleConstants#setFontFamily(MutableAttributeSet, String):::Sets the font attribute.:::a->addAttribute
StyleConstants#getFontSize(AttributeSet):::Gets the font size setting from the attribute list.:::size->a->getAttribute->if->return->size->intValue->return
StyleConstants#setFontSize(MutableAttributeSet, int):::Sets the font size attribute.:::a->Integer->valueOf->addAttribute
StyleConstants#isBold(AttributeSet):::Checks whether the bold attribute is set.:::bold->a->getAttribute->if->return->bold->booleanValue->return
StyleConstants#setBold(MutableAttributeSet, boolean):::Sets the bold attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#isItalic(AttributeSet):::Checks whether the italic attribute is set.:::italic->a->getAttribute->if->return->italic->booleanValue->return
StyleConstants#setItalic(MutableAttributeSet, boolean):::Sets the italic attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#isUnderline(AttributeSet):::Checks whether the underline attribute is set.:::underline->a->getAttribute->if->return->underline->booleanValue->return
StyleConstants#isStrikeThrough(AttributeSet):::Checks whether the strikethrough attribute is set.:::strike->a->getAttribute->if->return->strike->booleanValue->return
StyleConstants#isSuperscript(AttributeSet):::Checks whether the superscript attribute is set.:::superscript->a->getAttribute->if->return->superscript->booleanValue->return
StyleConstants#isSubscript(AttributeSet):::Checks whether the subscript attribute is set.:::subscript->a->getAttribute->if->return->subscript->booleanValue->return
StyleConstants#setUnderline(MutableAttributeSet, boolean):::Sets the underline attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#setStrikeThrough(MutableAttributeSet, boolean):::Sets the strikethrough attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#setSuperscript(MutableAttributeSet, boolean):::Sets the superscript attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#setSubscript(MutableAttributeSet, boolean):::Sets the subscript attribute.:::a->Boolean->valueOf->addAttribute
StyleConstants#getForeground(AttributeSet):::Gets the foreground color setting from the attribute list.:::fg->a->getAttribute->if->return
StyleConstants#setForeground(MutableAttributeSet, Color):::Sets the foreground color.:::a->addAttribute
StyleConstants#getBackground(AttributeSet):::Gets the background color setting from the attribute list.:::fg->a->getAttribute->if->return
StyleConstants#setBackground(MutableAttributeSet, Color):::Sets the background color.:::a->addAttribute
StyleConstants#getFirstLineIndent(AttributeSet):::Gets the first line indent setting.:::indent->a->getAttribute->if->return->indent->floatValue->return
StyleConstants#setFirstLineIndent(MutableAttributeSet, float):::Sets the first line indent.:::a->Float->valueOf->addAttribute
StyleConstants#getRightIndent(AttributeSet):::Gets the right indent setting.:::indent->a->getAttribute->if->return->indent->floatValue->return
StyleConstants#setRightIndent(MutableAttributeSet, float):::Sets right indent.:::a->Float->valueOf->addAttribute
StyleConstants#getLeftIndent(AttributeSet):::Gets the left indent setting.:::indent->a->getAttribute->if->return->indent->floatValue->return
StyleConstants#setLeftIndent(MutableAttributeSet, float):::Sets left indent.:::a->Float->valueOf->addAttribute
StyleConstants#getLineSpacing(AttributeSet):::Gets the line spacing setting.:::space->a->getAttribute->if->return->space->floatValue->return
StyleConstants#setLineSpacing(MutableAttributeSet, float):::Sets line spacing.:::a->Float->valueOf->addAttribute
StyleConstants#getSpaceAbove(AttributeSet):::Gets the space above setting.:::space->a->getAttribute->if->return->space->floatValue->return
StyleConstants#setSpaceAbove(MutableAttributeSet, float):::Sets space above.:::a->Float->valueOf->addAttribute
StyleConstants#getSpaceBelow(AttributeSet):::Gets the space below setting.:::space->a->getAttribute->if->return->space->floatValue->return
StyleConstants#setSpaceBelow(MutableAttributeSet, float):::Sets space below.:::a->Float->valueOf->addAttribute
StyleConstants#getAlignment(AttributeSet):::Gets the alignment setting.:::align->a->getAttribute->if->return->align->intValue->return
StyleConstants#setAlignment(MutableAttributeSet, int):::Sets alignment.:::a->Integer->valueOf->addAttribute
StyleConstants#getTabSet(AttributeSet):::Gets the TabSet.:::tabs->a->getAttribute->return
StyleConstants#setTabSet(MutableAttributeSet, TabSet):::Sets the TabSet.:::a->addAttribute
StyleContext#getDefaultStyleContext():::Returns default AttributeContext shared by all documents that don't bother to define/supply their own context.:::if->new->StyleContext->return
StyleContext#addStyle(String, Style):::Adds a new style into the style hierarchy:::style->new->NamedStyle->if->styles->addAttribute->return
StyleContext#removeStyle(String):::Removes a named style previously added to the document.:::styles->removeAttribute
StyleContext#getStyle(String):::Fetches a named style previously added to the document:::return->styles->getAttribute
StyleContext#getStyleNames():::Fetches the names of the styles defined.:::return->styles->getAttributeNames
StyleContext#addChangeListener(ChangeListener):::Adds a listener to track when styles are added or removed.:::styles->addChangeListener
StyleContext#removeChangeListener(ChangeListener):::Removes a listener that was tracking styles being added or removed.:::styles->removeChangeListener
StyleContext#getChangeListeners():::Returns an array of all the ChangeListeners added to this StyleContext with addChangeListener().:::return->getChangeListeners
StyleContext#getFont(AttributeSet):::Gets the font from an attribute set:::style->if->StyleConstants->isBold->if->StyleConstants->isItalic->family->StyleConstants->getFontFamily->size->StyleConstants->getFontSize->if->StyleConstants->isSuperscript->StyleConstants->isSubscript->return->getFont
StyleContext#getForeground(AttributeSet):::Takes a set of attributes and turn it into a foreground color specification:::return->StyleConstants->getForeground
StyleContext#getBackground(AttributeSet):::Takes a set of attributes and turn it into a background color specification:::return->StyleConstants->getBackground
StyleContext#getFont(String, int, int):::Gets a new font:::fontSearch->setValue->f->fontTable->get->if->defaultStyle->getStyle->if->FONT_ATTRIBUTE_KEY->defaultFont->defaultStyle->getAttribute->if->defaultFont->getFamily->equalsIgnoreCase->defaultFont->deriveFont->if->new->Font->if->FontUtilities->fontSupportsDefaultEncoding->FontUtilities->getCompositeFontUIResource->key->new->FontKey->fontTable->put->return
StyleContext#getFontMetrics(Font):::Returns font metrics for a font.:::return->Toolkit->getDefaultToolkit->getFontMetrics
StyleContext#addAttribute(AttributeSet, Object, Object):::Adds an attribute to the given set, and returns the new representative set:::if->old->getAttributeCount->getCompressionThreshold->search->removeAttributes->search->addAttributes->search->addAttribute->reclaim->return->getImmutableUniqueSet->ma->getMutableAttributeSet->ma->addAttribute->return
StyleContext#addAttributes(AttributeSet, AttributeSet):::Adds a set of attributes to the element:::if->old->getAttributeCount->attr->getAttributeCount->getCompressionThreshold->search->removeAttributes->search->addAttributes->search->addAttributes->reclaim->return->getImmutableUniqueSet->ma->getMutableAttributeSet->ma->addAttributes->return
StyleContext#removeAttribute(AttributeSet, Object):::Removes an attribute from the set:::if->old->getAttributeCount->getCompressionThreshold->search->removeAttributes->search->addAttributes->search->removeAttribute->reclaim->return->getImmutableUniqueSet->ma->getMutableAttributeSet->ma->removeAttribute->return
StyleContext#removeAttributes(AttributeSet, Enumeration):::Removes a set of attributes for the element:::if->old->getAttributeCount->getCompressionThreshold->search->removeAttributes->search->addAttributes->search->removeAttributes->reclaim->return->getImmutableUniqueSet->ma->getMutableAttributeSet->ma->removeAttributes->return
StyleContext#removeAttributes(AttributeSet, AttributeSet):::Removes a set of attributes for the element:::if->old->getAttributeCount->getCompressionThreshold->search->removeAttributes->search->addAttributes->search->removeAttributes->reclaim->return->getImmutableUniqueSet->ma->getMutableAttributeSet->ma->removeAttributes->return
StyleContext#getEmptySet():::Fetches an empty AttributeSet.:::return
StyleContext#reclaim(AttributeSet):::Returns a set no longer needed by the MutableAttributeSet implementation:::if->SwingUtilities->isEventDispatchThread->attributesPool->size
StyleContext#getCompressionThreshold():::Returns the maximum number of key/value pairs to try and compress into unique/immutable sets:::return
StyleContext#createSmallAttributeSet(AttributeSet):::Create a compact set of attributes that might be shared:::return->new->SmallAttributeSet
StyleContext#createLargeAttributeSet(AttributeSet):::Create a large set of attributes that should trade off space for time:::return->new->SimpleAttributeSet
StyleContext#removeUnusedSets():::Clean the unused immutable sets out of the hashtable.:::attributesPool->size
StyleContext#getImmutableUniqueSet():::Search for an existing attribute set using the current search parameters:::key->createSmallAttributeSet->reference->attributesPool->get->a->if->reference->get->attributesPool->new->WeakReference<SmallAttributeSet>->put->return
StyleContext#getMutableAttributeSet(AttributeSet):::Creates a mutable attribute set to hand out because the current needs are too big to try and use a shared version.:::if->return->return->createLargeAttributeSet
StyleContext#toString():::Converts a StyleContext to a String.:::removeUnusedSets->s->foreach->attributesPool->keySet->return
StyleContext#writeAttributes(ObjectOutputStream, AttributeSet):::Context-specific handling of writing out attributes:::writeAttributeSet
StyleContext#readAttributes(ObjectInputStream, MutableAttributeSet):::Context-specific handling of reading in attributes:::readAttributeSet
StyleContext#writeAttributeSet(ObjectOutputStream, AttributeSet):::Writes a set of attributes to the given object stream for the purpose of serialization:::n->a->getAttributeCount->out->writeInt->keys->a->getAttributeNames->while->keys->hasMoreElements->key->keys->nextElement->if->out->writeObject->else->ioFmt->freezeKeyMap->get->if->throw->key->getClass->getName->new->NotSerializableException->out->writeObject->value->a->getAttribute->ioFmt->freezeKeyMap->get->if->out->writeObject->else->if->throw->value->getClass->getName->new->NotSerializableException->out->writeObject
StyleContext#readAttributeSet(ObjectInputStream, MutableAttributeSet):::Reads a set of attributes from the given object input stream that have been previously written out with writeAttributeSet:::n->in->readInt->for->i
StyleContext#registerStaticAttributeKey(Object):::Registers an object as a static object that is being used as a key in attribute sets:::ioFmt->key->getClass->getName->key->toString->if->new->Hashtable<Object,String>->new->Hashtable<String,Object>->freezeKeyMap->put->thawKeyMap->put
StyleContext#getStaticAttribute(Object):::Returns the object previously registered with registerStaticAttributeKey.:::if->return->return->thawKeyMap->get
StyleContext#getStaticAttributeKey(Object):::Returns the String that key will be registered with.:::return->key->getClass->getName->key->toString
StyleContext.SmallAttributeSet#toString():::Returns a string showing the key/value pairs.:::s->tbl->for->i->return
StyleContext.SmallAttributeSet#hashCode():::Returns a hashcode for this set of attributes.:::code->tbl->for->i->return
StyleContext.SmallAttributeSet#equals(Object):::Compares this object to the specified object:::if->attrs->return->getAttributeCount->attrs->getAttributeCount->containsAttributes->return
StyleContext.SmallAttributeSet#clone():::Clones a set of attributes:::return
StyleContext.SmallAttributeSet#getAttributeCount():::Gets the number of attributes that are defined.:::return
StyleContext.SmallAttributeSet#isDefined(Object):::Checks whether a given attribute is defined.:::a->n->for->i->return
StyleContext.SmallAttributeSet#isEqual(AttributeSet):::Checks whether two attribute sets are equal.:::if->return->return->getAttributeCount->attr->getAttributeCount->containsAttributes
StyleContext.SmallAttributeSet#copyAttributes():::Copies a set of attributes.:::return
StyleContext.SmallAttributeSet#getAttribute(Object):::Gets the value of an attribute.:::value->getLocalAttribute->if->parent->getResolveParent->if->parent->getAttribute->return
StyleContext.SmallAttributeSet#getAttributeNames():::Gets the names of all attributes.:::return->new->KeyEnumeration
StyleContext.SmallAttributeSet#containsAttribute(Object, Object):::Checks whether a given attribute name/value is defined.:::return->value->getAttribute->equals
StyleContext.SmallAttributeSet#containsAttributes(AttributeSet):::Checks whether the attribute set contains all of the given attributes.:::result->names->attrs->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attrs->getAttribute->getAttribute->equals->return
StyleContext.SmallAttributeSet#getResolveParent():::If not overriden, the resolving parent defaults to the parent element.:::return
StyleContext.KeyEnumeration#hasMoreElements():::Tests if this enumeration contains more elements.:::return
StyleContext.KeyEnumeration#nextElement():::Returns the next element of this enumeration.:::if->o->return->throw->new->NoSuchElementException
StyleContext.KeyBuilder#createTable():::Creates a table of sorted key/value entries suitable for creation of an instance of SmallAttributeSet.:::n->keys->size->tbl->new->ObjectArr->for->i->return
StyleContext.KeyBuilder#getCount():::The number of key/value pairs contained in the current key being forged.:::return->keys->size
StyleContext.KeyBuilder#addAttribute(Object, Object):::Adds a key/value to the set.:::keys->addElement->data->addElement
StyleContext.KeyBuilder#addAttributes(AttributeSet):::Adds a set of key/value pairs to the set.:::if->tbl->n->for->i->else->names->attr->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->attr->getAttribute->addAttribute
StyleContext.KeyBuilder#removeAttribute(Object):::Removes the given name from the set.:::n->keys->size->for->i
StyleContext.KeyBuilder#removeAttributes(Enumeration):::Removes the set of keys from the set.:::while->names->hasMoreElements->name->names->nextElement->removeAttribute
StyleContext.KeyBuilder#removeAttributes(AttributeSet):::Removes the set of matching attributes from the set.:::names->attr->getAttributeNames->while->names->hasMoreElements->name->names->nextElement->value->attr->getAttribute->removeSearchAttribute
StyleContext.FontKey#hashCode():::Returns a hashcode for this font.:::fhash->family->hashCode->return
StyleContext.FontKey#equals(Object):::Compares this object to the specified object:::if->font->return->return
StyleContext.NamedStyle#toString():::Converts the style to a string.:::return->getName
StyleContext.NamedStyle#getName():::Fetches the name of the style:::if->isDefined->return->getAttribute->toString->return
StyleContext.NamedStyle#setName(String):::Changes the name of the style:::if->this->addAttribute
StyleContext.NamedStyle#addChangeListener(ChangeListener):::Adds a change listener.:::listenerList->add
StyleContext.NamedStyle#removeChangeListener(ChangeListener):::Removes a change listener.:::listenerList->remove
StyleContext.NamedStyle#getChangeListeners():::Returns an array of all the ChangeListeners added to this NamedStyle with addChangeListener().:::return->listenerList->getListeners
StyleContext.NamedStyle#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
StyleContext.NamedStyle#getListeners(Class):::Return an array of all the listeners of the given type that were added to this model.:::return->listenerList->getListeners
StyleContext.NamedStyle#getAttributeCount():::Gets the number of attributes that are defined.:::return->attributes->getAttributeCount
StyleContext.NamedStyle#isDefined(Object):::Checks whether a given attribute is defined.:::return->attributes->isDefined
StyleContext.NamedStyle#isEqual(AttributeSet):::Checks whether two attribute sets are equal.:::return->attributes->isEqual
StyleContext.NamedStyle#copyAttributes():::Copies a set of attributes.:::a->new->NamedStyle->attributes->copyAttributes->return
StyleContext.NamedStyle#getAttribute(Object):::Gets the value of an attribute.:::return->attributes->getAttribute
StyleContext.NamedStyle#getAttributeNames():::Gets the names of all attributes.:::return->attributes->getAttributeNames
StyleContext.NamedStyle#containsAttribute(Object, Object):::Checks whether a given attribute name/value is defined.:::return->attributes->containsAttribute
StyleContext.NamedStyle#containsAttributes(AttributeSet):::Checks whether the element contains all the attributes.:::return->attributes->containsAttributes
StyleContext.NamedStyle#getResolveParent():::Gets attributes from the parent:::return->attributes->getResolveParent
StyleContext.NamedStyle#addAttribute(Object, Object):::Adds an attribute.:::context->context->addAttribute->fireStateChanged
StyleContext.NamedStyle#addAttributes(AttributeSet):::Adds a set of attributes to the element.:::context->context->addAttributes->fireStateChanged
StyleContext.NamedStyle#removeAttribute(Object):::Removes an attribute from the set.:::context->context->removeAttribute->fireStateChanged
StyleContext.NamedStyle#removeAttributes(Enumeration):::Removes a set of attributes for the element.:::context->context->removeAttributes->fireStateChanged
StyleContext.NamedStyle#removeAttributes(AttributeSet):::Removes a set of attributes for the element.:::context->if->context->getEmptySet->else->context->removeAttributes->fireStateChanged
StyleContext.NamedStyle#setResolveParent(AttributeSet):::Sets the resolving parent.:::if->addAttribute->else->removeAttribute
StyledDocument#addStyle(String, Style):::Adds a new style into the logical style hierarchy:::
StyledDocument#removeStyle(String):::Removes a named style previously added to the document.:::
StyledDocument#getStyle(String):::Fetches a named style previously added.:::
StyledDocument#setCharacterAttributes(int, int, AttributeSet, boolean):::Changes the content element attributes used for the given range of existing content in the document:::
StyledDocument#setParagraphAttributes(int, int, AttributeSet, boolean):::Sets paragraph attributes.:::
StyledDocument#setLogicalStyle(int, Style):::Sets the logical style to use for the paragraph at the given position:::
StyledDocument#getLogicalStyle(int):::Gets a logical style for a given position in a paragraph.:::
StyledDocument#getParagraphElement(int):::Gets the element that represents the paragraph that encloses the given offset within the document.:::
StyledDocument#getCharacterElement(int):::Gets the element that represents the character that is at the given offset within the document.:::
StyledDocument#getForeground(AttributeSet):::Takes a set of attributes and turn it into a foreground color specification:::
StyledDocument#getBackground(AttributeSet):::Takes a set of attributes and turn it into a background color specification:::
StyledDocument#getFont(AttributeSet):::Takes a set of attributes and turn it into a font specification:::
StyledEditorKit#getInputAttributes():::Gets the input attributes for the pane:::return
StyledEditorKit#getCharacterAttributeRun():::Fetches the element representing the current run of character attributes for the caret.:::return
StyledEditorKit#getActions():::Fetches the command list for the editor:::return->TextAction->super->getActions->augmentList
StyledEditorKit#createDefaultDocument():::Creates an uninitialized text storage model that is appropriate for this type of editor.:::return->new->DefaultStyledDocument
StyledEditorKit#install(JEditorPane):::Called when the kit is being installed into a JEditorPane.:::c->addCaretListener->c->addPropertyChangeListener->caret->c->getCaret->if->inputAttributeUpdater->caret->getDot->caret->getMark->updateInputAttributes
StyledEditorKit#deinstall(JEditorPane):::Called when the kit is being removed from the JEditorPane:::c->removeCaretListener->c->removePropertyChangeListener
StyledEditorKit#getViewFactory():::Fetches a factory that is suitable for producing views of any models that are produced by this kit:::return
StyledEditorKit#clone():::Creates a copy of the editor kit.:::o->super->clone->o->createInputAttributeUpdated->o->createInputAttributes->return
StyledEditorKit.AttributeTracker#updateInputAttributes(int, int, JTextComponent):::Updates the attributes:::aDoc->c->getDocument->if->return->start->Math->min->doc->run->doc->getParagraphElement->if->currentParagraph->getStartOffset->doc->getCharacterElement->else->doc->Math->max->getCharacterElement->if->getInputAttributes->createInputAttributes
StyledEditorKit#createInputAttributes(Element, MutableAttributeSet):::Copies the key/values in elements AttributeSet into set:::if->element->getAttributes->getAttributeCount->element->getEndOffset->element->getStartOffset->element->getEndOffset->element->getDocument->getLength->set->removeAttributes->set->element->getAttributes->addAttributes->set->removeAttribute->set->removeAttribute->set->removeAttribute->set->removeAttribute
StyledEditorKit.StyledTextAction#getEditor(ActionEvent):::Gets the target editor for an action.:::tcomp->getTextComponent->if->return->return
StyledEditorKit.StyledTextAction#getStyledDocument(JEditorPane):::Gets the document associated with an editor pane.:::d->e->getDocument->if->return->throw->new->IllegalArgumentException
StyledEditorKit.StyledTextAction#getStyledEditorKit(JEditorPane):::Gets the editor kit associated with an editor pane.:::k->e->getEditorKit->if->return->throw->new->IllegalArgumentException
StyledEditorKit.StyledTextAction#setCharacterAttributes(JEditorPane, AttributeSet, boolean):::Applies the given attributes to character content:::p0->editor->getSelectionStart->p1->editor->getSelectionEnd->if->doc->getStyledDocument->doc->setCharacterAttributes->k->getStyledEditorKit->inputAttributes->k->getInputAttributes->if->inputAttributes->removeAttributes->inputAttributes->addAttributes
StyledEditorKit.StyledTextAction#setParagraphAttributes(JEditorPane, AttributeSet, boolean):::Applies the given attributes to paragraphs:::p0->editor->getSelectionStart->p1->editor->getSelectionEnd->doc->getStyledDocument->doc->setParagraphAttributes
StyledEditorKit.FontFamilyAction#actionPerformed(ActionEvent):::Sets the font family.:::editor->getEditor->if->family->if->e->getSource->s->e->getActionCommand->if->if->attr->new->SimpleAttributeSet->StyleConstants->setFontFamily->setCharacterAttributes->else->UIManager->getLookAndFeel->provideErrorFeedback
StyledEditorKit.FontSizeAction#actionPerformed(ActionEvent):::Sets the font size.:::editor->getEditor->if->size->if->e->getSource->s->e->getActionCommand->try->Integer->parseInt->catch->finally->if->attr->new->SimpleAttributeSet->StyleConstants->setFontSize->setCharacterAttributes->else->UIManager->getLookAndFeel->provideErrorFeedback
StyledEditorKit.ForegroundAction#actionPerformed(ActionEvent):::Sets the foreground color.:::editor->getEditor->if->fg->if->e->getSource->s->e->getActionCommand->try->Color->decode->catch->finally->if->attr->new->SimpleAttributeSet->StyleConstants->setForeground->setCharacterAttributes->else->UIManager->getLookAndFeel->provideErrorFeedback
StyledEditorKit.AlignmentAction#actionPerformed(ActionEvent):::Sets the alignment.:::editor->getEditor->if->a->if->e->getSource->s->e->getActionCommand->try->Integer->parseInt->catch->finally->attr->new->SimpleAttributeSet->StyleConstants->setAlignment->setParagraphAttributes
StyledEditorKit.BoldAction#actionPerformed(ActionEvent):::Toggles the bold attribute.:::editor->getEditor->if->kit->getStyledEditorKit->attr->kit->getInputAttributes->bold->StyleConstants->isBold->sas->new->SimpleAttributeSet->StyleConstants->setBold->setCharacterAttributes
StyledEditorKit.ItalicAction#actionPerformed(ActionEvent):::Toggles the italic attribute.:::editor->getEditor->if->kit->getStyledEditorKit->attr->kit->getInputAttributes->italic->StyleConstants->isItalic->sas->new->SimpleAttributeSet->StyleConstants->setItalic->setCharacterAttributes
StyledEditorKit.UnderlineAction#actionPerformed(ActionEvent):::Toggles the Underline attribute.:::editor->getEditor->if->kit->getStyledEditorKit->attr->kit->getInputAttributes->underline->StyleConstants->isUnderline->sas->new->SimpleAttributeSet->StyleConstants->setUnderline->setCharacterAttributes
TabableView#getTabbedSpan(float, TabExpander):::Determines the desired span when using the given tab expansion implementation:::
TabableView#getPartialSpan(int, int):::Determines the span along the same axis as tab expansion for a portion of the view:::
TabExpander#nextTabStop(float, int):::Returns the next tab stop position given a reference position:::
TableView#createTableRow(Element):::Creates a new table row.:::return->new->TableRow
TableView#getColumnCount():::The number of columns in the table.:::return
TableView#getColumnSpan(int):::Fetches the span (width) of the given column:::return
TableView#getRowCount():::The number of rows in the table.:::return->rows->size
TableView#getRowSpan(int):::Fetches the span (height) of the given row.:::rv->getRow->if->return->rv->getPreferredSpan->return
TableView#replace(int, int, View[]):::Change the child views:::super->replace->invalidateGrid
TableView#updateGrid():::Fill in the grid locations that are placeholders for multi-column, multi-row, and missing grid locations.:::if->rows->removeAllElements->n->getViewCount->for->i->maxColumns->nrows->rows->size->for->row->new->intArr->new->intArr->new->SizeRequirementsArr->for->i
TableView#addFill(int, int):::Mark a grid location as filled in for a cells overflow.:::rv->getRow->if->rv->fillColumn
TableView#layoutColumns(int, int[], int[], SizeRequirements[]):::Lays out the columns to fit within the given target span:::SizeRequirements->calculateTiledPositions
TableView#layoutMinorAxis(int, int, int[], int[]):::Perform layout for the minor axis of the box (i.e:::updateGrid->n->getRowCount->for->i->layoutColumns->super->layoutMinorAxis
TableView#calculateMinorAxisRequirements(int, SizeRequirements):::Calculate the requirements for the minor axis:::updateGrid->calculateColumnRequirements->if->new->SizeRequirements->min->pref->max->foreach->return
TableView#calculateColumnRequirements(int):::Calculate the requirements for each column:::foreach->hasMultiColumn->nrows->getRowCount->for->i->if->for->i
TableView#checkSingleColumnCell(int, int, View):::check the requirements of a table cell that spans a single column.:::req->Math->v->getMinimumSpan->max->Math->v->getPreferredSpan->max->Math->v->getMaximumSpan->max
TableView#checkMultiColumnCell(int, int, int, View):::check the requirements of a table cell that spans multiple columns.:::min->pref->max->for->i->cmin->v->getMinimumSpan->if->reqs->new->SizeRequirementsArr->for->i->spans->new->intArr->offsets->new->intArr->SizeRequirements->calculateTiledPositions->for->i->cpref->v->getPreferredSpan->if->reqs->new->SizeRequirementsArr->for->i->spans->new->intArr->offsets->new->intArr->SizeRequirements->calculateTiledPositions->for->i
TableView#getViewAtPosition(int, Rectangle):::Fetches the child view that represents the given position in the model:::n->getViewCount->for->i->if->getEndOffset->v->getView->if->this->childAllocation->return->return
TableView.TableRow#getRow():::get location in the overall set of rows:::return
TableView.TableRow#setRow(int):::set location in the overall set of rows, this is set by the TableView.updateGrid() method.:::
TableView.TableRow#getColumnCount():::The number of columns present in this row.:::nfill->n->fillColumns->size->for->i->return->getViewCount
TableView.TableRow#replace(int, int, View[]):::Change the child views:::super->replace->invalidateGrid
TableView.TableRow#layoutMajorAxis(int, int, int[], int[]):::Perform layout for the major axis of the box (i.e:::col->ncells->getViewCount->for->cell
TableView.TableRow#layoutMinorAxis(int, int, int[], int[]):::Perform layout for the minor axis of the box (i.e:::super->layoutMinorAxis->col->ncells->getViewCount->for->cell
TableView.TableRow#getResizeWeight(int):::Determines the resizability of the view along the given axis:::return
TableView.TableRow#getViewAtPosition(int, Rectangle):::Fetches the child view that represents the given position in the model:::n->getViewCount->for->i->if->getEndOffset->v->getView->if->this->childAllocation->return->return
TableView.TableCell#getColumnCount():::Gets the number of columns this cell spans (e.g:::return
TableView.TableCell#getRowCount():::Gets the number of rows this cell spans (that is, the grid height).:::return
TableView.TableCell#setGridLocation(int, int):::Sets the grid location.:::
TableView.TableCell#getGridRow():::Gets the row of the grid location:::return
TableView.TableCell#getGridColumn():::Gets the column of the grid location:::return
TableView.GridCell#setGridLocation(int, int):::Sets the grid location.:::
TableView.GridCell#getGridRow():::Gets the row of the grid location:::
TableView.GridCell#getGridColumn():::Gets the column of the grid location:::
TableView.GridCell#getColumnCount():::Gets the number of columns this cell spans (e.g:::
TableView.GridCell#getRowCount():::Gets the number of rows this cell spans (that is, the grid height).:::
TabSet#getTabCount():::Returns the number of Tab instances the receiver contains.:::return
TabSet#getTab(int):::Returns the TabStop at index index:::numTabs->getTabCount->if->throw->new->IllegalArgumentException->return
TabSet#getTabAfter(float):::Returns the Tab instance after location:::index->getTabIndexAfter->return
TabSet#getTabIndex(TabStop):::Returns the index of the TabStop tab, or -1 if tab is not contained in the receiver.:::for->counter->getTabCount->return
TabSet#getTabIndexAfter(float):::Returns the index of the Tab to be used after location:::current->min->max->getTabCount->while->if->getPosition->if->else->else->if->getPosition->return->return
TabSet#equals(Object):::Indicates whether this TabSet is equal to another one.:::if->return->if->ts->count->getTabCount->if->ts->getTabCount->return->for->i->return->return
TabSet#hashCode():::Returns a hashcode for this set of TabStops.:::if->len->getTabCount->for->i->if->return
TabSet#toString():::Returns the string representation of the set of tabs.:::tabCount->getTabCount->buffer->new->StringBuilder->for->counter->buffer->append->return->buffer->toString
TabStop#getPosition():::Returns the position, as a float, of the tab.:::return
TabStop#getAlignment():::Returns the alignment, as an integer, of the tab.:::return
TabStop#getLeader():::Returns the leader of the tab.:::return
TabStop#equals(Object):::Returns true if the tabs are equal.:::if->return->if->o->return->return
TabStop#hashCode():::Returns the hashCode for the object:::return->Math->round
TextAction#getTextComponent(ActionEvent):::Determines the component to use for the action:::if->o->e->getSource->if->return->return->getFocusedComponent
TextAction#augmentList(Action[], Action[]):::Takes one list of commands and augments it with another list of commands:::h->new->Hashtable<String,Action>->foreach->value->a->getValue->h->put->foreach->value->a->getValue->h->put->actions->h->size->new->ActionArr->index->for->e->h->elements->e->hasMoreElements->return
TextAction#getFocusedComponent():::Fetches the text component that currently has focus:::return->JTextComponent->getFocusedComponent
TextLayoutStrategy#insertUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification that something was inserted into the document in a location that the given flow view is responsible for:::sync->super->insertUpdate
TextLayoutStrategy#removeUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification that something was removed from the document in a location that the given flow view is responsible for.:::sync->super->removeUpdate
TextLayoutStrategy#changedUpdate(FlowView, DocumentEvent, Rectangle):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::sync->super->changedUpdate
TextLayoutStrategy#layout(FlowView):::Does a a full layout on the given View:::super->layout
TextLayoutStrategy#layoutRow(FlowView, int, int):::Creates a row of views that will fit within the layout span of the row:::p1->super->layoutRow->row->fv->getView->doc->fv->getDocument->i18nFlag->doc->getProperty->if->i18nFlag->equals->n->row->getViewCount->if->d->fv->getDocument->bidiRoot->d->getBidiRootElement->levels->new->byteArr->reorder->new->ViewArr->for->i->BidiUtils->reorderVisually->row->replace->return
TextLayoutStrategy#adjustRow(FlowView, int, int, int):::Adjusts the given row if possible to fit within the layout span:::
TextLayoutStrategy#createView(FlowView, int, int, int):::Creates a unidirectional view that can be used to represent the current chunk:::lv->getLogicalView->row->fv->getView->requireNextWord->viewBuffer->size->childIndex->lv->getViewIndex->v->lv->getView->endOffset->getLimitingOffset->if->return->frag->if->v->getStartOffset->v->getEndOffset->else->v->createFragment->if->isTab->p0->frag->getStartOffset->p1->frag->getEndOffset->if->s->getText->ch->s->first->if->tl->measurer->text->toIteratorIndex->nextLayout->if->new->GlyphPainter2->setGlyphPainter->return
TextLayoutStrategy#getLimitingOffset(View, int, int, boolean):::Calculate the limiting offset for the next view fragment:::endOffset->v->getEndOffset->doc->v->getDocument->if->d->bidiRoot->d->getBidiRootElement->if->bidiRoot->getElementCount->bidiIndex->bidiRoot->getElementIndex->bidiElem->bidiRoot->getElement->Math->bidiElem->getEndOffset->min->if->s->getText->ch->s->first->if->else->for->s->next->s->next->limitIndex->text->toIteratorIndex->if->index->text->toIteratorIndex->if->measurer->getPosition->measurer->setPosition->measurer->nextOffset->pos->text->toModelPosition->return
TextLayoutStrategy#sync(FlowView):::Synchronize the strategy with its FlowView:::lv->getLogicalView->text->setView->container->fv->getContainer->frc->getFontRenderContext->iter->c->fv->getContainer->if->BreakIterator->c->getLocale->getLineInstance->else->BreakIterator->getLineInstance->shaper->if->getClientProperty->text->setShaper->new->LineBreakMeasurer->n->lv->getViewCount->for->i->measurer->text->getBeginIndex->setPosition
TextLayoutStrategy.AttributedSegment#getFontBoundary(int, int):::Get a boundary position for the font:::child->v->getView->f->getFont->for->v->getViewCount->return->child->getStartOffset->child->getEndOffset
TextLayoutStrategy.AttributedSegment#getFont(int):::Get the font at the given child index.:::child->v->getView->if->return->getFont->return
TextLayoutStrategy.AttributedSegment#getRunStart():::Returns the index of the first character of the run with respect to all attributes containing the current character.:::pos->getIndex->toModelPosition->i->v->getViewIndex->child->v->getView->return->child->getStartOffset->toIteratorIndex
TextLayoutStrategy.AttributedSegment#getRunStart(AttributedCharacterIterator.Attribute):::Returns the index of the first character of the run with respect to the given attribute containing the current character.:::if->pos->getIndex->toModelPosition->i->v->getViewIndex->if->return->getFontBoundary->toIteratorIndex->return->getBeginIndex
TextLayoutStrategy.AttributedSegment#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.:::index->getBeginIndex->a->attributes->toArray->for->i->return->Math->getIndex->min
TextLayoutStrategy.AttributedSegment#getRunLimit():::Returns the index of the first character following the run with respect to all attributes containing the current character.:::pos->getIndex->toModelPosition->i->v->getViewIndex->child->v->getView->return->child->getEndOffset->toIteratorIndex
TextLayoutStrategy.AttributedSegment#getRunLimit(AttributedCharacterIterator.Attribute):::Returns the index of the first character following the run with respect to the given attribute containing the current character.:::if->pos->getIndex->toModelPosition->i->v->getViewIndex->if->return->getFontBoundary->toIteratorIndex->return->getEndIndex
TextLayoutStrategy.AttributedSegment#getRunLimit(Set):::Returns the index of the first character following the run with respect to the given attributes containing the current character.:::index->getEndIndex->a->attributes->toArray->for->i->return->Math->getIndex->max
TextLayoutStrategy.AttributedSegment#getAttributes():::Returns a map with the attributes defined on the current character.:::ka->keys->toArray->h->new->Hashtable<Attribute,Object>->for->i->return
TextLayoutStrategy.AttributedSegment#getAttribute(AttributedCharacterIterator.Attribute):::Returns the value of the named attribute for the current character:::pos->getIndex->toModelPosition->childIndex->v->getViewIndex->if->return->getFont->else->if->return->v->getDocument->getProperty->else->if->return->return
TextLayoutStrategy.AttributedSegment#getAllAttributeKeys():::Returns the keys of all attributes defined on the iterator's text range:::return
Utilities#getJComponent(View):::If view's container is a JComponent it is returned, after casting.:::if->component->view->getContainer->if->return->return
Utilities#drawTabbedText(Segment, int, int, Graphics, TabExpander, int):::Draws the given text, expanding any tabs that are contained using the given tab expansion technique:::return->drawTabbedText
Utilities#drawTabbedText(Segment, float, float, Graphics2D, TabExpander, int):::Draws the given text, expanding any tabs that are contained using the given tab expansion technique.:::return->drawTabbedText
Utilities#drawTabbedText(View, Segment, int, int, Graphics, TabExpander, int):::Draws the given text, expanding any tabs that are contained using the given tab expansion technique:::return->drawTabbedText
Utilities#getTabbedTextWidth(Segment, FontMetrics, int, TabExpander, int):::Determines the width of the given segment of text taking tabs into consideration:::return->getTabbedTextWidth
Utilities#getTabbedTextWidth(Segment, FontMetrics, float, TabExpander, int):::Determines the width of the given segment of text taking tabs into consideration.:::return->getTabbedTextWidth
Utilities#getTabbedTextOffset(Segment, FontMetrics, int, int, TabExpander, int):::Determines the relative offset into the given text that best represents the given span in the view coordinate system:::return->getTabbedTextOffset
Utilities#getTabbedTextOffset(Segment, FontMetrics, int, int, TabExpander, int, boolean):::Determines the relative offset into the given text that best represents the given span in the view coordinate system.:::return->getTabbedTextOffset
Utilities#getTabbedTextOffset(Segment, FontMetrics, float, float, TabExpander, int, boolean):::Determines the relative offset into the given text that best represents the given span in the view coordinate system.:::return->getTabbedTextOffset
Utilities#getBreakLocation(Segment, FontMetrics, int, int, TabExpander, int):::Determine where to break the given text to fit within the given span:::return->getBreakLocation
Utilities#getBreakLocation(Segment, FontMetrics, float, float, TabExpander, int):::Determine where to break the given text to fit within the given span:::return->getBreakLocation
Utilities#getRowStart(JTextComponent, int):::Determines the starting row model position of the row that contains the specified model position:::r->c->modelToView->if->return->lastOffs->y->while->if->c->modelToView->return
Utilities#getRowEnd(JTextComponent, int):::Determines the ending row model position of the row that contains the specified model position:::r->c->modelToView2D->if->return->n->c->getDocument->getLength->lastOffs->y->r->getY->while->r->getY->if->r->getHeight->c->modelToView->return
Utilities#getPositionAbove(JTextComponent, int, int):::Determines the position in the model that is closest to the given view location in the row above:::return->getPositionAbove
Utilities#getPositionAbove(JTextComponent, int, float):::Determines the position in the model that is closest to the given view location in the row above:::return->getPositionAbove
Utilities#getPositionBelow(JTextComponent, int, int):::Determines the position in the model that is closest to the given view location in the row below:::return->getPositionBelow
Utilities#getPositionBelow(JTextComponent, int, float):::Determines the position in the model that is closest to the given view location in the row below:::return->getPositionBelow
Utilities#getWordStart(JTextComponent, int):::Determines the start of a word for the given model location:::doc->c->getDocument->line->getParagraphElement->if->throw->new->BadLocationException->lineStart->line->getStartOffset->lineEnd->Math->line->getEndOffset->doc->getLength->min->seg->SegmentCache->getSharedSegment->doc->getText->if->words->BreakIterator->c->getLocale->getWordInstance->words->setText->wordPosition->if->words->last->words->last->words->following->words->previous->SegmentCache->releaseSharedSegment->return
Utilities#getWordEnd(JTextComponent, int):::Determines the end of a word for the given location:::doc->c->getDocument->line->getParagraphElement->if->throw->new->BadLocationException->lineStart->line->getStartOffset->lineEnd->Math->line->getEndOffset->doc->getLength->min->seg->SegmentCache->getSharedSegment->doc->getText->if->words->BreakIterator->c->getLocale->getWordInstance->words->setText->wordPosition->if->words->last->words->last->words->following->SegmentCache->releaseSharedSegment->return
Utilities#getNextWord(JTextComponent, int):::Determines the start of the next word for the given location:::nextWord->line->getParagraphElement->for->getNextWordInParagraph->getNextWordInParagraph->return
Utilities#getNextWordInParagraph(JTextComponent, Element, int, boolean):::Finds the next word in the given elements text:::if->throw->new->BadLocationException->doc->line->getDocument->lineStart->line->getStartOffset->lineEnd->Math->line->getEndOffset->doc->getLength->min->if->throw->new->BadLocationException->seg->SegmentCache->getSharedSegment->doc->getText->words->BreakIterator->c->getLocale->getWordInstance->words->setText->if->words->first->Character->words->first->isWhitespace->return->wordPosition->words->following->if->return->ch->if->Character->isWhitespace->return->words->next->if->if->return->SegmentCache->releaseSharedSegment->return
Utilities#getPreviousWord(JTextComponent, int):::Determine the start of the prev word for the given location:::prevWord->line->getParagraphElement->for->getPrevWordInParagraph->getPrevWordInParagraph->return
Utilities#getPrevWordInParagraph(JTextComponent, Element, int):::Finds the previous word in the given elements text:::if->throw->new->BadLocationException->doc->line->getDocument->lineStart->line->getStartOffset->lineEnd->line->getEndOffset->if->throw->new->BadLocationException->seg->SegmentCache->getSharedSegment->doc->getText->words->BreakIterator->c->getLocale->getWordInstance->words->setText->if->words->following->words->last->wordPosition->words->previous->if->words->previous->if->return->ch->if->Character->isWhitespace->return->words->previous->if->return->SegmentCache->releaseSharedSegment->return
Utilities#getParagraphElement(JTextComponent, int):::Determines the element to use for a paragraph/line.:::doc->c->getDocument->if->return->getParagraphElement->map->doc->getDefaultRootElement->index->map->getElementIndex->paragraph->map->getElement->if->paragraph->getStartOffset->paragraph->getEndOffset->return->return
Utilities#drawComposedText(View, AttributeSet, Graphics, int, int, int, int):::Draws the given composed text passed from an input method.:::return->drawComposedText
Utilities#paintComposedText(Graphics, Rectangle, GlyphView):::Paints the composed text in a GlyphView:::if->g2d->p0->v->getStartOffset->p1->v->getEndOffset->attrSet->v->getElement->getAttributes->as->attrSet->getAttribute->start->v->getElement->getStartOffset->y->v->getGlyphPainter->getDescent->x->as->v->getFont->addAttribute->as->v->getForeground->addAttribute->if->StyleConstants->v->getAttributes->isBold->as->addAttribute->if->StyleConstants->v->getAttributes->isItalic->as->addAttribute->if->v->isUnderline->as->addAttribute->if->v->isStrikeThrough->as->addAttribute->if->v->isSuperscript->as->addAttribute->if->v->isSubscript->as->addAttribute->aci->as->getIterator->SwingUtilities2->getJComponent->drawString
Utilities#getNextVisualPositionFrom(View, int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->v->getViewCount->return->top->retValue->if->childIndex->v->getViewCount->child->v->getView->childBounds->v->getChildAllocation->child->getNextVisualPositionFrom->if->v->getViewCount->v->getView->v->getChildAllocation->child->getNextVisualPositionFrom->else->increment->childIndex->if->v->getViewIndex->else->v->getViewIndex->child->v->getView->childBounds->v->getChildAllocation->child->getNextVisualPositionFrom->if->flipEastAndWestAtEnds->if->v->getViewCount->v->getView->v->getChildAllocation->child->getNextVisualPositionFrom->if->return->getNextVisualPositionFrom->else->if->child->getEndOffset->child->getStartOffset->v->getViewCount->v->getView->v->getChildAllocation->originalBias->nextPos->child->getNextVisualPositionFrom->if->else->return
View#getParent():::Returns the parent of the view.:::return
View#isVisible()::: Returns a boolean that indicates whether  the view is visible or not:::return
View#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::
View#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::w->getResizeWeight->if->return->getPreferredSpan->return
View#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::w->getResizeWeight->if->return->getPreferredSpan->return
View#preferenceChanged(View, boolean, boolean):::Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout:::parent->getParent->if->parent->preferenceChanged
View#getAlignment(int):::Determines the desired alignment for this view along an axis:::return
View#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::
View#setParent(View):::Establishes the parent view for this view:::if->for->i->getViewCount
View#getViewCount():::Returns the number of views in this view:::return
View#getView(int):::Gets the nth child view:::return
View#removeAll():::Removes all of the children:::getViewCount->replace
View#remove(int):::Removes one of the children at the given position:::replace
View#insert(int, View):::Inserts a single child view:::one->new->ViewArr->replace
View#append(View):::Appends a single child view:::one->new->ViewArr->getViewCount->replace
View#replace(int, int, View[]):::Replaces child views:::
View#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::return
View#getChildAllocation(int, Shape):::Fetches the allocation for the given child view:::return
View#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location at which one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->switch->if->Math->getEndOffset->max->getStartOffset->break->target->getContainer->c->target->getCaret->mcp->if->c->getMagicCaretPosition->else->x->if->loc->target->modelToView->else->if->Utilities->getPositionAbove->else->Utilities->getPositionBelow->break->if->Math->getEndOffset->max->else->Math->max->break->if->getStartOffset->else->Math->getDocument->getLength->min->break->throw->new->IllegalArgumentException->return
View#modelToView(int, Shape, Position.Bias):::Provides a mapping, for a given character, from the document model coordinate space to the view coordinate space.:::
View#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping, for a given region, from the document model coordinate space to the view coordinate space:::s0->modelToView->s1->if->getEndOffset->try->modelToView->catch->finally->if->alloc->a->getBounds->new->Rectangle->else->modelToView->r0->s0->getBounds->r1->s1->getBounds->if->alloc->a->getBounds->r0->add->return
View#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model:::
View#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::if->getViewCount->elem->getElement->ec->e->getChange->if->if->updateChildren->forwardUpdate->updateLayout
View#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::if->getViewCount->elem->getElement->ec->e->getChange->if->if->updateChildren->forwardUpdate->updateLayout
View#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for:::if->getViewCount->elem->getElement->ec->e->getChange->if->if->updateChildren->forwardUpdate->updateLayout
View#getDocument():::Fetches the model associated with the view.:::return->elem->getDocument
View#getStartOffset():::Fetches the portion of the model for which this view is responsible.:::return->elem->getStartOffset
View#getEndOffset():::Fetches the portion of the model for which this view is responsible.:::return->elem->getEndOffset
View#getElement():::Fetches the structural portion of the subject that this view is mapped to:::return
View#getGraphics():::Fetch a Graphics for rendering:::c->getContainer->return->c->getGraphics
View#getAttributes():::Fetches the attributes to use when rendering:::return->elem->getAttributes
View#breakView(int, int, float, float):::Tries to break this view on the given axis:::return
View#createFragment(int, int):::Creates a view that represents a portion of the element:::return
View#getBreakWeight(int, float, float):::Determines how attractive a break opportunity in this view is:::if->getPreferredSpan->return->return
View#getResizeWeight(int):::Determines the resizability of the view along the given axis:::return
View#setSize(float, float):::Sets the size of the view:::
View#getContainer():::Fetches the container hosting the view:::v->getParent->return->v->getContainer
View#getViewFactory():::Fetches the ViewFactory implementation that is feeding the view hierarchy:::v->getParent->return->v->getViewFactory
View#getToolTipText(float, float, Shape):::Returns the tooltip text at the specified location:::viewIndex->getViewIndex->if->getChildAllocation->rect->allocation->getBounds->if->rect->contains->return->getView->getToolTipText->return
View#getViewIndex(float, float, Shape):::Returns the child view index representing the given position in the view:::for->counter->getViewCount->return
View#updateChildren(DocumentEvent.ElementChange, DocumentEvent, ViewFactory):::Updates the child views in response to receiving notification that the model changed, and there is change record for the element this view is responsible for:::removedElems->ec->getChildrenRemoved->addedElems->ec->getChildrenAdded->added->if->new->ViewArr->for->i->nremoved->index->ec->getIndex->if->replace->return
View#forwardUpdate(DocumentEvent.ElementChange, DocumentEvent, Shape, ViewFactory):::Forwards the given DocumentEvent to the child views that need to be notified of the change to the model:::calculateUpdateIndexes->hole0->hole1->addedElems->ec->getChildrenAdded->if->ec->getIndex->for->i
View#calculateUpdateIndexes(DocumentEvent):::Calculates the first and the last indexes of the child views that need to be notified of the change to the model.:::pos->e->getOffset->getViewIndex->if->e->getType->getEndOffset->getViewCount->v->getView->if->if->v->getStartOffset->Math->max->if->e->getType->e->getLength->getViewIndex->if->getViewCount->Math->max
View#updateAfterChange():::Updates the view to reflect the changes.:::
View#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory):::Forwards the DocumentEvent to the give child view:::type->e->getType->if->v->insertUpdate->else->if->v->removeUpdate->else->v->changedUpdate
View#updateLayout(DocumentEvent.ElementChange, DocumentEvent, Shape):::Updates the layout in response to receiving notification of change from the model:::if->preferenceChanged->host->getContainer->if->host->repaint
View#modelToView(int, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it:::return->modelToView
View#viewToModel(float, float, Shape):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->viewToModel
ViewFactory#create(Element):::Creates a view from the given structural element of a document.:::
WhitespaceBasedBreakIterator#setText(CharacterIterator):::Calculate break positions eagerly parallel to reading text.:::begin->ci->getBeginIndex->ci->getEndIndex->new->charArr->breaks0->new->intArr->brIx->charIx->inWs->for->c->ci->first->ci->next->if->System->new->intArr->arraycopy
WrappedPlainView#getTabSize():::Returns the tab size set for the document, defaulting to 8.:::i->getDocument->getProperty->size->i->intValue->return
WrappedPlainView#drawLine(int, int, Graphics, int, int):::Renders a line of text, suppressing whitespace at the end and expanding any tabs:::drawLineImpl
WrappedPlainView#drawLine(int, int, Graphics2D, float, float):::Renders a line of text, suppressing whitespace at the end and expanding any tabs:::drawLineImpl
WrappedPlainView#drawUnselectedText(Graphics, int, int, int, int):::Renders the given range in the model as normal unselected text.:::return->drawUnselectedTextImpl
WrappedPlainView#drawUnselectedText(Graphics2D, float, float, int, int):::Renders the given range in the model as normal unselected text.:::return->drawUnselectedTextImpl
WrappedPlainView#drawSelectedText(Graphics, int, int, int, int):::Renders the given range in the model as selected text:::return->drawSelectedTextImpl
WrappedPlainView#drawSelectedText(Graphics2D, float, float, int, int):::Renders the given range in the model as selected text:::return->drawSelectedTextImpl
WrappedPlainView#getLineBuffer():::Gives access to a buffer that can be used to fetch text from the associated document.:::if->new->Segment->return
WrappedPlainView#calculateBreakPosition(int, int):::This is called by the nested wrapped line views to determine the break location:::p->segment->SegmentCache->getSharedSegment->loadText->currentWidth->getWidth->if->Utilities->getBreakLocation->else->Utilities->getTabbedTextOffset->SegmentCache->releaseSharedSegment->return
WrappedPlainView#loadChildren(ViewFactory):::Loads all of the children to initialize the view:::e->getElement->n->e->getElementCount->if->added->new->ViewArr->for->i->replace
WrappedPlainView#updateChildren(DocumentEvent, Shape):::Update the child views in response to a document event.:::elem->getElement->ec->e->getChange->if->removedElems->ec->getChildrenRemoved->addedElems->ec->getChildrenAdded->added->new->ViewArr->for->i->ec->getIndex->replace->if->preferenceChanged->getContainer->repaint->updateMetrics
WrappedPlainView#loadText(Segment, int, int):::Load the text buffer with the given range of text:::try->doc->getDocument->doc->getText->catch->throw->new->StateInvariantError->finally
WrappedPlainView#nextTabStop(float, int):::Returns the next tab stop position after a given reference position:::if->return->ntabs->return
WrappedPlainView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::alloc->host->getContainer->host->getSelectionStart->host->getSelectionEnd->host->isEnabled->host->getForeground->host->getDisabledTextColor->c->host->getCaret->c->isSelectionVisible->host->getHighlighter->host->getSelectedTextColor->g->host->getFont->setFont->super->paint
WrappedPlainView#setSize(float, float):::Sets the size of the view:::updateMetrics->if->getWidth->preferenceChanged->super->setSize
WrappedPlainView#getPreferredSpan(int):::Determines the preferred span for this view along an axis:::updateMetrics->return->super->getPreferredSpan
WrappedPlainView#getMinimumSpan(int):::Determines the minimum span for this view along an axis:::updateMetrics->return->super->getMinimumSpan
WrappedPlainView#getMaximumSpan(int):::Determines the maximum span for this view along an axis:::updateMetrics->return->super->getMaximumSpan
WrappedPlainView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::updateChildren->alloc->isAllocationValid->getInsideAllocation->pos->e->getOffset->v->getViewAtPosition->if->v->insertUpdate
WrappedPlainView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::updateChildren->alloc->isAllocationValid->getInsideAllocation->pos->e->getOffset->v->getViewAtPosition->if->v->removeUpdate
WrappedPlainView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::updateChildren
WrappedPlainView.WrappedLine#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::switch->width->getWidth->if->return->return->if->getStartOffset->breakLines->return->metrics->getHeight->throw->new->IllegalArgumentException
WrappedPlainView.WrappedLine#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::alloc->y->metrics->getAscent->x->host->getContainer->h->host->getHighlighter->dh->start->getStartOffset->end->getEndOffset->p0->lineEnds->getLineEnds->useDrawLineFP->for->i
WrappedPlainView.WrappedLine#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::alloc->a->getBounds->metrics->getHeight->p0->getStartOffset->if->getEndOffset->throw->new->BadLocationException->testP->Math->max->line->lineEnds->getLineEnds->if->findLine->if->if->segment->SegmentCache->getSharedSegment->loadText->x->Utilities->getTabbedTextWidth->SegmentCache->releaseSharedSegment->return->new->Rectangle2D.Float->return
WrappedPlainView.WrappedLine#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::alloc->x->y->if->return->getStartOffset->else->if->return->getEndOffset->else->metrics->getHeight->line->if->return->getEndOffset->else->p0->getStartOffset->p1->if->getEndOffset->else->lineEnds->getLineEnds->if->if->return->else->if->return->else->segment->SegmentCache->getSharedSegment->loadText->n->Utilities->getTabbedTextOffset->SegmentCache->releaseSharedSegment->return->Math->min
WrappedPlainView.WrappedLine#getLineEnds():::Returns line cache:::if->return->else->lineEnds->lineCache->get->if->return->getStartOffset->breakLines->else->return
WrappedPlainView.WrappedLine#breakLines(int):::Creates line cache if text breaks into more than one physical line.:::lineEnds->lineCache->get->oldLineEnds->start->getStartOffset->lineIndex->if->findLine->if->p0->p1->getEndOffset->while->p->calculateBreakPosition->if->break->else->if->growFactor->newSize->Math->ceil->Math->max->tmp->new->intArr->if->System->arraycopy->if->maxCapacity->if->tmp->new->intArr->System->arraycopy->if->new->SoftReference<int[]>->return
ZoneView#getMaximumZoneSize():::Get the current maximum zone size.:::return
ZoneView#setMaximumZoneSize(int):::Set the desired maximum zone size:::
ZoneView#getMaxZonesLoaded():::Get the current setting of the number of zones allowed to be loaded at the same time.:::return
ZoneView#setMaxZonesLoaded(int):::Sets the current setting of the number of zones allowed to be loaded at the same time:::if->throw->new->IllegalArgumentException->unloadOldZones
ZoneView#zoneWasLoaded(View):::Called by a zone when it gets loaded:::loadedZones->addElement->unloadOldZones
ZoneView#unloadZone(View):::Unload a zone (Convert the zone to its memory saving state):::zone->removeAll
ZoneView#isZoneLoaded(View):::Determine if a zone is in the loaded state:::return->zone->getViewCount
ZoneView#createZone(int, int):::Create a view to represent a zone for the given range within the model (which should be within the range of this objects responsibility):::doc->getDocument->zone->try->getElement->doc->createPosition->doc->createPosition->new->Zone->catch->throw->ble->getMessage->new->StateInvariantError->finally->return
ZoneView#loadChildren(ViewFactory):::Loads all of the children to initialize the view:::doc->getDocument->offs0->getStartOffset->offs1->getEndOffset->createZone->append->handleInsert
ZoneView#getViewIndexAtPosition(int):::Returns the child view index representing the given position in the model.:::n->getViewCount->if->getEndOffset->return->for->i->return
ZoneView#splitZone(int, int, int):::Break up the zone at the given index into pieces of an acceptable size.:::elem->getElement->doc->elem->getDocument->zones->new->Vector<View>->offs->do->Math->getDesiredZoneEnd->min->zones->createZone->addElement->while->oldZone->getView->newZones->zones->size->new->ViewArr->zones->copyInto->replace
ZoneView#getDesiredZoneEnd(int):::Returns the zone position to use for the end of a zone that starts at the given position:::elem->getElement->index->elem->getElementIndex->child->elem->getElement->offs0->child->getStartOffset->offs1->child->getEndOffset->if->if->return->return
ZoneView#updateChildren(DocumentEvent.ElementChange, DocumentEvent, ViewFactory):::The superclass behavior will try to update the child views which is not desired in this case, since the children are zones and not directly effected by the changes to the associated element:::return
ZoneView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::changes->getOffset->changes->getLength->handleInsert->super->insertUpdate
ZoneView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::changes->getOffset->changes->getLength->handleRemove->super->removeUpdate
ZoneView.Zone#load():::Creates the child views and populates the zone with them:::if->isLoaded->setEstimatedMajorSpan->e->getElement->f->getViewFactory->index0->e->getStartOffset->getElementIndex->index1->e->getEndOffset->getElementIndex->added->new->ViewArr->for->i->replace->zoneWasLoaded
ZoneView.Zone#unload():::Removes the child views and returns to a state of unloaded.:::setEstimatedMajorSpan->removeAll
ZoneView.Zone#isLoaded():::Determines if the zone is in the loaded state or not.:::return->getViewCount
ZoneView.Zone#loadChildren(ViewFactory):::This method is reimplemented to not build the children since the children are created when the zone is loaded rather then when it is placed in the view hierarchy:::setEstimatedMajorSpan->elem->getElement->index0->elem->getStartOffset->getElementIndex->index1->elem->getEndOffset->getElementIndex->nChildren->first->f->elem->getElement->create->first->setParent->w->first->getPreferredSpan->h->first->getPreferredSpan->if->getMajorAxis->else->setSize
ZoneView.Zone#flushRequirementChanges():::Publish the changes in preferences upward to the parent view:::if->isLoaded->super->flushRequirementChanges
ZoneView.Zone#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::isBackward->Math->max->elem->getElement->index1->elem->getElementIndex->index0->elem->getStartOffset->getElementIndex->return
ZoneView.Zone#getAttributes():::Fetches the attributes to use when rendering:::return->ZoneView.this->getAttributes
ZoneView.Zone#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::load->super->paint
ZoneView.Zone#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model:::load->return->super->viewToModel
ZoneView.Zone#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it:::load->return->super->modelToView
ZoneView.Zone#getStartOffset():::Start of the zones range.:::return->start->getOffset
ZoneView.Zone#getEndOffset():::End of the zones range.:::return->end->getOffset
ZoneView.Zone#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for:::if->isLoaded->super->insertUpdate
ZoneView.Zone#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for:::if->isLoaded->super->removeUpdate
ZoneView.Zone#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for:::if->isLoaded->super->changedUpdate

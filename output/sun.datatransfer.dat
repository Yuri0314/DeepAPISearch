DataFlavorUtil#standardEncodings():::Returns a SortedSet of Strings which are a total order of the standard character sets supported by the JRE:::return
DataFlavorUtil#canonicalName(String):::Converts an arbitrary text encoding to its canonical name.:::if->return->try->return->Charset->forName->name->catch->return->return->finally
DataFlavorUtil#doesSubtypeSupportCharset(DataFlavor):::Tests only whether the flavor's MIME type supports the charset parameter:::subType->flavor->getSubType->if->return->support->textMIMESubtypeCharsetSupport->get->if->return->ret_val->flavor->getParameter->textMIMESubtypeCharsetSupport->put->return
DataFlavorUtil#isFlavorCharsetTextType(DataFlavor):::Returns whether this flavor is a text type which supports the 'charset' parameter.:::if->equals->return->if->flavor->getPrimaryType->equals->doesSubtypeSupportCharset->return->rep_class->flavor->getRepresentationClass->if->flavor->isRepresentationClassReader->equals->flavor->isRepresentationClassCharBuffer->equals->return->if->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassByteBuffer->equals->return->charset->flavor->getParameter->return->isEncodingSupported
DataFlavorUtil#isFlavorNoncharsetTextType(DataFlavor):::Returns whether this flavor is a text type which does not support the 'charset' parameter.:::if->flavor->getPrimaryType->equals->doesSubtypeSupportCharset->return->return->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassByteBuffer->flavor->getRepresentationClass->equals
DataFlavorUtil#getTextCharset(DataFlavor):::If the specified flavor is a text flavor which supports the "charset" parameter, then this method returns that parameter, or the default charset if no such parameter was specified at construction:::if->isFlavorCharsetTextType->return->encoding->flavor->getParameter->return->Charset->defaultCharset->name
DataFlavorUtil#compareIndices(Map, T, T, Integer):::Helper method to compare two objects by their Integer indices in the given map:::index1->indexMap->getOrDefault->index2->indexMap->getOrDefault->return->index1->compareTo
DataFlavorUtil.RMI#remoteClass():::Returns java.rmi.Remote.class if RMI is present; otherwise null.:::return
DataFlavorUtil.RMI#isRemote(Class):::Returns true if the given class is java.rmi.Remote.:::return->remoteClass->isAssignableFrom
DataFlavorUtil.RMI#newMarshalledObject(Object):::Returns a new MarshalledObject containing the serialized representation of the given object.:::try->return->marshallCtor->newInstance->catch->throw->new->AssertionError->cause->x->getCause->if->throw->throw->new->AssertionError->finally
DataFlavorUtil.RMI#getMarshalledObject(Object):::Returns a new copy of the contained marshalled object.:::try->return->marshallGet->invoke->catch->throw->new->AssertionError->cause->x->getCause->if->throw->if->throw->throw->new->AssertionError->finally
DesktopDatatransferService#invokeOnEventThread(Runnable):::If desktop is present - invokes a Runnable on the event dispatch thread:::
DesktopDatatransferService#getDefaultUnicodeEncoding():::Get a platform-dependent default unicode encoding to use in datatransfer system.:::
DesktopDatatransferService#getFlavorMap(Supplier):::Takes an appropriate FlavorMap from the desktop:::
DesktopDatatransferService#isDesktopPresent():::Checks if desktop is present.:::
DesktopDatatransferService#getPlatformMappingsForNative(String):::Returns platform-specific mappings for the specified native format:::
DesktopDatatransferService#getPlatformMappingsForFlavor(DataFlavor):::Returns platform-specific mappings for the specified flavor:::
DesktopDatatransferService#registerTextFlavorProperties(String, String, String, String):::This method is called for text flavor mappings established while parsing the default flavor mappings file:::

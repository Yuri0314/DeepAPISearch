Constants#getSAXFeatures():::Returns an enumeration of the SAX features.:::return->new->ArrayEnumeration
Constants#getSAXProperties():::Returns an enumeration of the SAX properties.:::return->new->ArrayEnumeration
Constants#getXercesFeatures():::Returns an enumeration of the Xerces features.:::return->new->ArrayEnumeration
Constants#getXercesProperties():::Returns an enumeration of the Xerces properties.:::return->new->ArrayEnumeration
Constants.ArrayEnumeration#hasMoreElements():::Tests if this enumeration contains more elements.:::return
Constants.ArrayEnumeration#nextElement():::Returns the next element of this enumeration.:::if->return->throw->new->NoSuchElementException
Constants#main(String[]):::Prints all of the constants to standard output.:::print->print->print->print
Constants#print(String, String, Object[]):::Prints a list of features/properties.:::print->if->println->for->i->else->println
ExternalSubsetResolver#getExternalSubset(XMLDTDDescription):::Locates an external subset for documents which do not explicitly provide one:::
PropertyManager#getProperties()::: property manager get properties:::return
PropertyManager#initConfigurableReaderProperties():::Important point: 1:::supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->supportedProps->put->new->XMLSecurityManager->supportedProps->put->new->XMLSecurityPropertyManager->supportedProps->put->supportedProps->put->foreach->values->supportedProps->f->getPropertyName->put->supportedProps->put
PropertyManager#initWriterProps()::: property manager init writer props:::supportedProps->put->supportedProps->put->supportedProps->put
PropertyManager#containsProperty(String):::public void reset(){ supportedProps.clear() ; }:::return->supportedProps->containsKey->fSecurityManager->getIndex->fSecurityPropertyMgr->getIndex
PropertyManager#getProperty(String)::: property manager get property:::return->supportedProps->get
PropertyManager#setProperty(String, Object)::: property manager set property:::equivalentProperty->if->property->equals->else->if->property->equals->if->booleanValue->throw->new->java.lang.IllegalArgumentException->else->if->property->equals->if->booleanValue->throw->new->java.lang.IllegalArgumentException->else->if->property->equals->supportedProps->new->StaxEntityResolverWrapper->put->if->property->equals->XMLSecurityManager->convert->supportedProps->put->return->if->property->equals->if->new->XMLSecurityPropertyManager->else->supportedProps->put->return->if->fSecurityManager->setLimit->if->fSecurityPropertyMgr->setValue->supportedProps->put->if->supportedProps->put
PropertyManager#toString()::: property manager to string:::return->supportedProps->toString
RevalidationHandler#characterData(String, Augmentations):::Character content.:::
XML11DocumentScannerImpl#scanContent(XMLStringBuffer):::Scans element content.:::c->fEntityScanner->scanContent->content->append->if->fEntityScanner->scanChar->content->append->if->content->fEntityScanner->scanChar->append->if->fEntityScanner->skipChar->content->append->while->fEntityScanner->skipChar->content->append->if->fEntityScanner->skipChar->reportFatalError->return
XML11DocumentScannerImpl#scanAttributeValue(XMLString, XMLString, String, boolean, String, boolean):::Scans an attribute value and normalizes whitespace converting all whitespace characters to space characters:::quote->fEntityScanner->peekChar->if->new->ObjectArr->reportFatalError->fEntityScanner->scanChar->entityDepth->c->fEntityScanner->scanLiteral->if->value->toString->println->fromIndex->if->isUnchangedByNormalization->nonNormalizedValue->setValues->cquote->fEntityScanner->scanChar->if->new->ObjectArr->reportFatalError->return->fStringBuffer2->clear->fStringBuffer2->append->normalizeWhitespace->if->value->toString->println->if->fStringBuffer->clear->do->fStringBuffer->append->if->fStringBuffer->toString->println->if->fEntityScanner->skipChar->if->fStringBuffer2->append->if->fEntityScanner->skipChar->if->fStringBuffer2->append->ch->scanCharReferenceValue->if->if->fStringBuffer->toString->println->else->entityName->fEntityScanner->scanName->if->reportFatalError->else->if->fStringBuffer2->append->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->else->if->fStringBuffer2->append->if->resolveCharacter->checkEntityLimit->else->if->fEntityManager->isExternalEntity->new->ObjectArr->reportFatalError->else->if->fEntityManager->isDeclaredEntity->if->if->fErrorReporter->new->ObjectArr->reportError->else->new->ObjectArr->reportFatalError->fEntityManager->startEntity->else->if->new->ObjectArr->reportFatalError->fEntityScanner->scanChar->if->fStringBuffer2->append->else->if->fEntityScanner->scanChar->fStringBuffer->append->if->fStringBuffer2->append->if->fStringBuffer->toString->println->else->if->fEntityScanner->scanChar->fStringBuffer->append->if->fStringBuffer2->append->else->if->XMLChar->isHighSurrogate->fStringBuffer3->clear->if->scanSurrogates->fStringBuffer->append->if->fStringBuffer2->append->if->fStringBuffer->toString->println->else->if->isInvalidLiteral->new->ObjectArr->Integer->toString->reportFatalError->fEntityScanner->scanChar->if->fStringBuffer2->append->fEntityScanner->scanLiteral->if->fStringBuffer2->append->normalizeWhitespace->while->fStringBuffer->append->if->fStringBuffer->toString->println->value->setValues->nonNormalizedValue->setValues->cquote->fEntityScanner->scanChar->if->new->ObjectArr->reportFatalError->return->nonNormalizedValue->equals
XML11DocumentScannerImpl#scanPubidLiteral(XMLString):::Scans public ID literal:::quote->fEntityScanner->scanChar->if->reportFatalError->return->fStringBuffer->clear->skipSpace->dataok->while->c->fEntityScanner->scanChar->if->if->fStringBuffer->append->else->if->if->literal->setValues->break->else->if->XMLChar->isPubid->fStringBuffer->append->else->if->reportFatalError->return->else->new->ObjectArr->Integer->toHexString->reportFatalError->return
XML11DocumentScannerImpl#normalizeWhitespace(XMLString):::Normalize whitespace in an XMLString converting all whitespace characters to space characters.:::end->for->i
XML11DocumentScannerImpl#normalizeWhitespace(XMLString, int):::Normalize whitespace in an XMLString converting all whitespace characters to space characters.:::end->for->i
XML11DocumentScannerImpl#isUnchangedByNormalization(XMLString):::Checks whether this string would be unchanged by normalization.:::end->for->i->return
XML11DocumentScannerImpl#isInvalid(int)::: l11 document scanner impl is invalid:::return->XML11Char->isXML11Invalid
XML11DocumentScannerImpl#isInvalidLiteral(int)::: l11 document scanner impl is invalid literal:::return->XML11Char->isXML11ValidLiteral
XML11DocumentScannerImpl#isValidNameChar(int)::: l11 document scanner impl is valid name char:::return->XML11Char->isXML11Name
XML11DocumentScannerImpl#isValidNameStartChar(int)::: l11 document scanner impl is valid name start char:::return->XML11Char->isXML11NameStart
XML11DocumentScannerImpl#isValidNCName(int)::: l11 document scanner impl is valid name:::return->XML11Char->isXML11NCName
XML11DocumentScannerImpl#isValidNameStartHighSurrogate(int)::: l11 document scanner impl is valid name start high surrogate:::return->XML11Char->isXML11NameHighSurrogate
XML11DocumentScannerImpl#versionSupported(String)::: l11 document scanner impl version supported:::return->version->equals->version->equals
XML11DocumentScannerImpl#getVersionNotSupportedKey()::: l11 document scanner impl get version not supported key:::return
XML11DTDScannerImpl#scanPubidLiteral(XMLString):::Scans public ID literal:::quote->fEntityScanner->scanChar->if->reportFatalError->return->fStringBuffer->clear->skipSpace->dataok->while->c->fEntityScanner->scanChar->if->if->fStringBuffer->append->else->if->if->literal->setValues->break->else->if->XMLChar->isPubid->fStringBuffer->append->else->if->reportFatalError->return->else->new->ObjectArr->Integer->toHexString->reportFatalError->return
XML11DTDScannerImpl#normalizeWhitespace(XMLString):::Normalize whitespace in an XMLString converting all whitespace characters to space characters.:::end->for->i
XML11DTDScannerImpl#normalizeWhitespace(XMLString, int):::Normalize whitespace in an XMLString converting all whitespace characters to space characters.:::end->for->i
XML11DTDScannerImpl#isUnchangedByNormalization(XMLString):::Checks whether this string would be unchanged by normalization.:::end->for->i->return
XML11DTDScannerImpl#isInvalid(int)::: l11 scanner impl is invalid:::return->XML11Char->isXML11Valid
XML11DTDScannerImpl#isInvalidLiteral(int)::: l11 scanner impl is invalid literal:::return->XML11Char->isXML11ValidLiteral
XML11DTDScannerImpl#isValidNameChar(int)::: l11 scanner impl is valid name char:::return->XML11Char->isXML11Name
XML11DTDScannerImpl#isValidNameStartChar(int)::: l11 scanner impl is valid name start char:::return->XML11Char->isXML11NameStart
XML11DTDScannerImpl#isValidNCName(int)::: l11 scanner impl is valid name:::return->XML11Char->isXML11NCName
XML11DTDScannerImpl#isValidNameStartHighSurrogate(int)::: l11 scanner impl is valid name start high surrogate:::return->XML11Char->isXML11NameHighSurrogate
XML11DTDScannerImpl#versionSupported(String)::: l11 scanner impl version supported:::return->version->equals->version->equals
XML11DTDScannerImpl#getVersionNotSupportedKey()::: l11 scanner impl get version not supported key:::return
XML11EntityScanner#peekChar():::Returns the next character on the input:::if->load->c->if->fCurrentEntity->isExternal->return->else->return
XML11EntityScanner#scanChar(NameType):::Returns the next character on the input:::if->load->offset->c->external->if->fCurrentEntity->isExternal->if->invokeListeners->load->if->cc->if->if->checkEntityLimit->return
XML11EntityScanner#scanNmtoken():::Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present:::if->load->offset->do->ch->if->XML11Char->isXML11Name->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->else->if->XML11Char->isXML11NameHighSurrogate->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11Name->break->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->else->break->while->length->symbol->if->fSymbolTable->addSymbol->return
XML11EntityScanner#scanName(NameType):::Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present:::if->load->offset->ch->if->XML11Char->isXML11NameStart->if->invokeListeners->if->load->symbol->fSymbolTable->addSymbol->return->else->if->XML11Char->isXML11NameHighSurrogate->if->invokeListeners->if->load->return->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11NameStart->return->if->invokeListeners->if->load->symbol->fSymbolTable->addSymbol->return->else->return->length->do->if->XML11Char->isXML11Name->if->checkBeforeLoad->if->load->break->else->if->XML11Char->isXML11NameHighSurrogate->if->checkBeforeLoad->if->load->break->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11Name->break->if->checkBeforeLoad->if->load->break->else->break->while->symbol->if->checkLimit->checkEntityLimit->fSymbolTable->addSymbol->return
XML11EntityScanner#scanNCName():::Returns a string matching the NCName production appearing immediately on the input as a symbol, or null if no NCName string is present:::if->load->offset->ch->if->XML11Char->isXML11NCNameStart->if->invokeListeners->if->load->symbol->fSymbolTable->addSymbol->return->else->if->XML11Char->isXML11NameHighSurrogate->if->invokeListeners->if->load->return->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11NCNameStart->return->if->invokeListeners->if->load->symbol->fSymbolTable->addSymbol->return->else->return->do->if->XML11Char->isXML11NCName->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->else->if->XML11Char->isXML11NameHighSurrogate->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11NCName->break->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->else->break->while->length->symbol->if->fSymbolTable->addSymbol->return
XML11EntityScanner#scanQName(QName, XMLScanner.NameType):::Scans a qualified name from the input, setting the fields of the QName structure appropriately:::if->load->offset->ch->if->XML11Char->isXML11NCNameStart->if->invokeListeners->if->load->name->fSymbolTable->addSymbol->qname->setValues->checkEntityLimit->return->else->if->XML11Char->isXML11NameHighSurrogate->if->invokeListeners->if->load->return->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11NCNameStart->return->if->invokeListeners->if->load->name->fSymbolTable->addSymbol->qname->setValues->checkEntityLimit->return->else->return->index->length->sawIncompleteSurrogatePair->do->if->XML11Char->isXML11Name->if->if->break->checkLimit->if->checkBeforeLoad->if->if->load->break->else->if->XML11Char->isXML11NameHighSurrogate->if->checkBeforeLoad->if->if->load->break->ch2->if->XMLChar->isLowSurrogate->XML11Char->XMLChar->supplemental->isXML11Name->break->if->checkBeforeLoad->if->if->load->break->else->break->while->if->prefix->localpart->rawname->fSymbolTable->addSymbol->if->prefixLength->checkLimit->fSymbolTable->addSymbol->len->startLocal->if->XML11Char->isXML11NCNameStart->XML11Char->isXML11NameHighSurrogate->fErrorReporter->reportError->checkLimit->fSymbolTable->addSymbol->else->checkLimit->qname->setValues->checkEntityLimit->return->return
XML11EntityScanner#scanContent(XMLString):::Scans a range of parsed character data, setting the fields of the XMLString structure, appropriately:::if->load->else->if->invokeListeners->load->offset->c->newlines->counted->external->fCurrentEntity->isExternal->if->do->if->if->checkEntityLimit->if->load->break->cc->if->else->else->if->if->checkEntityLimit->if->load->break->else->break->while->for->i->length->if->checkEntityLimit->content->setValues->return->if->while->if->XML11Char->isXML11Content->break->else->while->if->XML11Char->isXML11InternalEntityContent->break->length->if->checkEntityLimit->content->setValues->if->if->else->return
XML11EntityScanner#scanLiteral(int, XMLString, boolean):::Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately:::if->load->else->if->invokeListeners->load->offset->c->newlines->external->fCurrentEntity->isExternal->if->do->if->if->if->load->break->cc->if->else->else->if->if->if->load->break->else->break->while->for->i->length->if->content->setValues->return->if->while->if->XML11Char->isXML11Content->break->else->while->if->XML11Char->isXML11InternalEntityContent->break->length->checkEntityLimit->if->checkLimit->content->setValues->if->if->else->return
XML11EntityScanner#scanData(String, XMLStringBuffer, int):::Scans a range of character data up to the specicied delimiter, setting the fields of the XMLString structure, appropriately:::done->delimLen->delimiter->length->charAt0->delimiter->charAt->external->fCurrentEntity->isExternal->do->if->load->bNextEntity->while->System->arraycopy->load->if->length->checkEntityLimit->buffer->append->load->return->offset->c->newlines->if->do->if->if->if->load->break->cc->if->else->else->if->if->if->load->break->else->break->while->for->i->length->if->checkEntityLimit->buffer->append->return->while->if->delimOffset->for->i->if->break->else->if->break->else->if->XML11Char->isXML11ValidLiteral->XML11Char->isXML11Valid->length->checkEntityLimit->buffer->append->return->if->break->length->checkEntityLimit->if->buffer->append->if->break->while->return
XML11EntityScanner#skipChar(int, NameType):::Skips a character appearing immediately on the input:::if->load->offset->cc->if->if->else->checkEntityLimit->return->else->if->fCurrentEntity->isExternal->checkEntityLimit->return->else->if->fCurrentEntity->isExternal->if->invokeListeners->load->ccc->if->checkEntityLimit->return->return
XML11EntityScanner#skipSpaces():::Skips space characters appearing immediately on the input:::if->load->if->return->c->offset->if->fCurrentEntity->isExternal->if->XML11Char->isXML11Space->do->entityChanged->if->if->invokeListeners->load->if->else->if->return->if->cc->if->else->checkEntityLimit->if->if->load->if->return->while->XML11Char->isXML11Space->return->else->if->XMLChar->isSpace->do->entityChanged->if->if->invokeListeners->load->if->else->if->return->else->checkEntityLimit->if->if->load->if->return->while->XMLChar->isSpace->return->return
XML11EntityScanner#skipString(String):::Skips the specified string appearing immediately on the input:::if->load->length->s->length->beforeSkip->for->i->if->checkEntityLimit->return
XML11NamespaceBinder#prefixBoundToNullURI(String, String)::: l11 namespace binder prefix bound to null i:::return
XML11NSDocumentScannerImpl#setDTDValidator(XMLDTDValidatorFilter):::The scanner is responsible for removing DTD validator from the pipeline if it is not needed.:::
XML11NSDocumentScannerImpl#scanStartElement():::Scans a start element:::if->println->fEntityScanner->scanQName->rawname->if->fNamespaceContext->pushContext->if->if->fErrorReporter->new->ObjectArr->reportError->if->fDoctypeName->equals->fErrorReporter->new->ObjectArr->reportError->fElementStack->pushElement->empty->fAttributes->removeAllAttributes->do->sawSpace->fEntityScanner->skipSpaces->c->fEntityScanner->peekChar->if->fEntityScanner->scanChar->break->else->if->fEntityScanner->scanChar->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->break->else->if->isValidNameStartChar->if->isValidNameStartHighSurrogate->new->ObjectArr->reportFatalError->scanAttribute->if->fSecurityManager->isNoLimit->fAttributes->getLength->fErrorReporter->new->ObjectArr->reportError->while->if->if->fErrorReporter->new->ObjectArr->reportError->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->length->fAttributes->getLength->for->i->if->name->fAttributes->checkDuplicatesNS->if->if->fErrorReporter->new->ObjectArr->reportError->else->fErrorReporter->new->ObjectArr->reportError->if->if->new->ObjectArr->reportFatalError->if->fDocumentHandler->emptyElement->fElementStack->popElement->else->if->dtdGrammarUtil->startElement->if->fDocumentHandler->startElement->if->println->return
XML11NSDocumentScannerImpl#scanStartElementName():::Scans the name of an element in a start or empty tag.:::fEntityScanner->scanQName->fEntityScanner->skipSpaces
XML11NSDocumentScannerImpl#scanStartElementAfterName():::Scans the remainder of a start or empty tag after the element name.:::rawname->if->fNamespaceContext->pushContext->if->if->fErrorReporter->new->ObjectArr->reportError->if->fDoctypeName->equals->fErrorReporter->new->ObjectArr->reportError->fElementStack->pushElement->empty->fAttributes->removeAllAttributes->do->c->fEntityScanner->peekChar->if->fEntityScanner->scanChar->break->else->if->fEntityScanner->scanChar->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->break->else->if->isValidNameStartChar->if->isValidNameStartHighSurrogate->new->ObjectArr->reportFatalError->scanAttribute->fEntityScanner->skipSpaces->while->if->if->fErrorReporter->new->ObjectArr->reportError->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->length->fAttributes->getLength->for->i->if->name->fAttributes->checkDuplicatesNS->if->if->fErrorReporter->new->ObjectArr->reportError->else->fErrorReporter->new->ObjectArr->reportError->if->if->if->new->ObjectArr->reportFatalError->fDocumentHandler->emptyElement->if->fNamespaceContext->popContext->fElementStack->popElement->else->fDocumentHandler->startElement->if->println->return
XML11NSDocumentScannerImpl#scanAttribute(XMLAttributesImpl):::Scans an attribute:::if->println->fEntityScanner->scanQName->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->attrIndex->if->attributes->getLength->attributes->addAttributeNS->else->oldLen->attributes->getLength->attributes->addAttribute->if->attributes->getLength->new->ObjectArr->reportFatalError->isVC->localpart->prefix->isNSDecl->scanAttributeValue->value->fTempString->toString->attributes->setValue->attributes->fTempString2->toString->setNonNormalizedValue->attributes->setSpecified->if->if->if->value->length->fErrorReporter->new->ObjectArr->value->length->fSecurityManager->getStateLiteral->reportError->uri->fSymbolTable->addSymbol->if->fErrorReporter->new->ObjectArr->reportError->if->fErrorReporter->new->ObjectArr->reportError->if->if->fErrorReporter->new->ObjectArr->reportError->else->if->fErrorReporter->new->ObjectArr->reportError->fNamespaceContext->uri->length->declarePrefix->attributes->fNamespaceContext->getURI->setURI->else->if->attributes->fNamespaceContext->getURI->setURI->if->println
XML11NSDocumentScannerImpl#scanEndElement():::Scans an end element:::if->println->endElementName->fElementStack->popElement->if->fEntityScanner->skipString->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->new->ObjectArr->reportFatalError->if->fDocumentHandler->endElement->if->dtdGrammarUtil->endElement->return
XML11NSDocumentScannerImpl#reset(XMLComponentManager)::: l11 document scanner impl reset:::super->reset
XML11NSDocumentScannerImpl#createContentDriver():::Creates a content Driver.:::return->new->NS11ContentDriver
XML11NSDocumentScannerImpl#next()::: l11 document scanner impl next:::if->fNamespaceContext->popContext->return->super->next
XML11NSDocumentScannerImpl.NS11ContentDriver#scanRootElementHook():::Scan for root element hook:::if->scanStartElementName->resolveExternalSubsetAndRead->reconfigurePipeline->if->scanStartElementAfterName->setScannerState->setDriver->return->else->reconfigurePipeline->if->scanStartElement->setScannerState->setDriver->return->return
XML11NSDocumentScannerImpl.NS11ContentDriver#reconfigurePipeline():::Re-configures pipeline by removing the DTD validator if no DTD grammar exists:::if->else->if->fDTDValidator->hasGrammar->fDTDValidator->validate->source->fDTDValidator->getDocumentSource->handler->fDTDValidator->getDocumentHandler->source->setDocumentHandler->if->handler->setDocumentSource->fDTDValidator->setDocumentSource->fDTDValidator->setDocumentHandler
XMLDocumentFragmentScannerImpl#setInputSource(XMLInputSource):::Sets the input source.:::fEntityManager->setEntityHandler->fEntityManager->startEntity
XMLDocumentFragmentScannerImpl#scanDocument(boolean):::Scans a document.:::fEntityManager->setEntityHandler->event->next->do->switch->break->break->fEntityScanner->checkNodeCount->fDocumentHandler->getCharacterData->characters->break->break->fEntityScanner->checkNodeCount->break->fEntityScanner->checkNodeCount->fDocumentHandler->getPITarget->getPIData->processingInstruction->break->fEntityScanner->checkNodeCount->fDocumentHandler->getCharacterData->comment->break->break->fEntityScanner->checkNodeCount->if->fDocumentHandler->startCDATA->fDocumentHandler->getCharacterData->characters->if->fDocumentHandler->endCDATA->break->break->break->break->break->break->return->next->while->if->fDocumentHandler->endDocument->return->return
XMLDocumentFragmentScannerImpl#getElementQName()::: document fragment scanner impl get element name:::if->fElementQName->fElementStack->getLastPoppedElement->setValues->return
XMLDocumentFragmentScannerImpl#next()::: document fragment scanner impl next:::return->fDriver->next
XMLDocumentFragmentScannerImpl#reset(XMLComponentManager)::: document fragment scanner impl reset:::super->reset->componentManager->getFeature->componentManager->getProperty->componentManager->getFeature->resolver->componentManager->getProperty->setScannerState->setDriver->spm->componentManager->getProperty->spm->getValue->componentManager->getFeature->JdkXmlUtils->componentManager->getProperty->getValue->resetCommon
XMLDocumentFragmentScannerImpl#reset(PropertyManager)::: document fragment scanner impl reset:::super->reset->propertyManager->getProperty->bo->propertyManager->getProperty->propertyManager->getProperty->cdata->propertyManager->getProperty->if->coalesce->propertyManager->getProperty->if->spm->propertyManager->getProperty->spm->getValue->propertyManager->getProperty->JdkXmlUtils->propertyManager->getProperty->getValue->resetCommon
XMLDocumentFragmentScannerImpl#resetCommon()::: document fragment scanner impl reset common:::fElementStack->clear->fEntityManager->getEntityStore->if->fSecurityManager->getLimit->fSecurityManager->getLimit->else->defaultValue
XMLDocumentFragmentScannerImpl#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLDocumentFragmentScannerImpl#setFeature(String, boolean):::Sets the state of a feature:::super->setFeature->if->featureId->startsWith->feature->featureId->length->substring->if->feature->equals
XMLDocumentFragmentScannerImpl#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLDocumentFragmentScannerImpl#setProperty(String, Object):::Sets the value of a property:::super->setProperty->if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->return->if->length->propertyId->endsWith->return->if->propertyId->startsWith->property->propertyId->length->substring->if->property->equals->return->if->propertyId->equals->spm->spm->getValue
XMLDocumentFragmentScannerImpl#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLDocumentFragmentScannerImpl#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLDocumentFragmentScannerImpl#setDocumentHandler(XMLDocumentHandler):::setDocumentHandler:::
XMLDocumentFragmentScannerImpl#getDocumentHandler():::Returns the document handler:::return
XMLDocumentFragmentScannerImpl#startEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::if->entityarray->new->intArr->System->arraycopy->super->startEntity->if->fEntityStore->isEntityDeclInExternalSubset->new->ObjectArr->reportFatalError->if->if->name->equals->fDocumentHandler->startGeneralEntity
XMLDocumentFragmentScannerImpl#endEntity(String, Augmentations):::This method notifies the end of an entity:::super->endEntity->if->reportFatalError->if->if->name->equals->fDocumentHandler->endGeneralEntity
XMLDocumentFragmentScannerImpl#createContentDriver():::Creates a content Driver.:::return->new->FragmentContentDriver
XMLDocumentFragmentScannerImpl#scanXMLDeclOrTextDecl(boolean):::Scans an XML or text declaration:::super->scanXMLDeclOrTextDecl->version->encoding->standalone->standalone->equals->fEntityManager->setStandalone->if->if->fDocumentHandler->textDecl->else->fDocumentHandler->xmlDecl->if->fEntityScanner->setVersion->fEntityScanner->setXMLVersion->if->fEntityScanner->getCurrentEntity->isEncodingExternallySpecified->fEntityScanner->setEncoding
XMLDocumentFragmentScannerImpl#getPITarget()::: document fragment scanner impl get target:::return
XMLDocumentFragmentScannerImpl#getPIData()::: document fragment scanner impl get data:::return
XMLDocumentFragmentScannerImpl#getCharacterData()::: document fragment scanner impl get character data:::if->return->else->return
XMLDocumentFragmentScannerImpl#scanPIData(String, XMLStringBuffer):::Scans a processing data:::super->scanPIData
XMLDocumentFragmentScannerImpl#scanComment():::Scans a comment:::fContentBuffer->clear->scanComment
XMLDocumentFragmentScannerImpl#getComment()::: document fragment scanner impl get comment:::return->fContentBuffer->toString
XMLDocumentFragmentScannerImpl#addElement(String)::: document fragment scanner impl add element:::if->if->sb->new->StringBuffer->sb->append->sb->append->sb->append->sb->append->sb->toString->println->if->column->storePointerForADepth->if->pointer->getElementPointer->if->resetPointer->return->else
XMLDocumentFragmentScannerImpl#resetPointer(short, short)::: document fragment scanner impl reset pointer:::
XMLDocumentFragmentScannerImpl#storePointerForADepth(short)::: document fragment scanner impl store pointer for depth:::depth->for->i->return
XMLDocumentFragmentScannerImpl#canStore(short, short)::: document fragment scanner impl can store:::return
XMLDocumentFragmentScannerImpl#getElementPointer(short, short)::: document fragment scanner impl get element pointer:::return
XMLDocumentFragmentScannerImpl#skipFromTheBuffer(String)::: document fragment scanner impl skip from the buffer:::if->fEntityScanner->skipString->c->fEntityScanner->peekChar->if->return->else->return->else->return
XMLDocumentFragmentScannerImpl#skipQElement(String)::: document fragment scanner impl skip element:::c->fEntityScanner->rawname->length->getChar->if->XMLChar->isName->return->else->return->fEntityScanner->skipString
XMLDocumentFragmentScannerImpl#skipElement()::: document fragment scanner impl skip element:::if->return->if->rawname->if->skipFromTheBuffer->if->println->return->else->return->skipElement
XMLDocumentFragmentScannerImpl#skipElement(short)::: document fragment scanner impl skip element:::depth->if->return->for->i->return
XMLDocumentFragmentScannerImpl#scanStartElement()::: document fragment scanner impl scan start element:::if->this->getClass->toString->println->if->name->fElementStack->getNext->if->println->fEntityScanner->skipString->if->if->println->fElementStack->push->else->fElementStack->reposition->if->println->if->fElementStack->nextElement->if->fEntityScanner->scanQName->else->name->fEntityScanner->scanName->fElementQName->setValues->if->fElementQName->toString->println->if->if->println->if->fElementStack->matchElement->rawname->fAttributes->removeAllAttributes->checkDepth->if->seekCloseOfStartTag->do->scanAttribute->if->fSecurityManager->isNoLimit->fAttributes->getLength->fErrorReporter->new->ObjectArr->reportError->while->seekCloseOfStartTag->if->if->new->ObjectArr->reportFatalError->if->fDocumentHandler->emptyElement->fElementStack->popElement->else->if->dtdGrammarUtil->startElement->if->fDocumentHandler->startElement->if->this->getClass->toString->println->return
XMLDocumentFragmentScannerImpl#seekCloseOfStartTag():::Looks for the close of start tag, i.e:::sawSpace->fEntityScanner->skipSpaces->c->fEntityScanner->peekChar->if->fEntityScanner->scanChar->return->else->if->fEntityScanner->scanChar->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->return->else->if->isValidNameStartChar->if->isValidNameStartHighSurrogate->new->ObjectArr->reportFatalError->return
XMLDocumentFragmentScannerImpl#hasAttributes()::: document fragment scanner impl has attributes:::return->fAttributes->getLength
XMLDocumentFragmentScannerImpl#getAttributeIterator():::return the attribute iterator implementation:::if->dtdGrammarUtil->addDTDDefaultAttrs->return
XMLDocumentFragmentScannerImpl#standaloneSet():::return if standalone is set:::return
XMLDocumentFragmentScannerImpl#isStandAlone():::return if the doucment is standalone:::return
XMLDocumentFragmentScannerImpl#scanAttribute(XMLAttributes)::: document fragment scanner impl scan attribute:::if->this->getClass->toString->println->if->fEntityScanner->scanQName->else->name->fEntityScanner->scanName->fAttributeQName->setValues->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->attIndex->isVC->tmpStr->getString->scanAttributeValue->oldLen->attributes->getLength->attributes->addAttribute->if->attributes->getLength->new->ObjectArr->reportFatalError->attributes->setValue->attributes->setSpecified->if->this->getClass->toString->println
XMLDocumentFragmentScannerImpl#scanContent(XMLStringBuffer)::: document fragment scanner impl scan content:::c->fEntityScanner->scanContent->content->append->if->fEntityScanner->scanChar->content->append->else->if->content->fEntityScanner->scanChar->append->if->fEntityScanner->skipChar->content->append->while->fEntityScanner->skipChar->content->append->if->fEntityScanner->skipChar->reportFatalError->if->return
XMLDocumentFragmentScannerImpl#scanCDATASection(XMLStringBuffer, boolean)::: document fragment scanner impl scan section:::if->while->if->fEntityScanner->scanData->break->else->c->fEntityScanner->peekChar->if->isInvalidLiteral->if->XMLChar->isHighSurrogate->scanSurrogates->else->new->ObjectArr->Integer->toString->reportFatalError->fEntityScanner->scanChar->else->break->if->return
XMLDocumentFragmentScannerImpl#scanEndElement():::Scans an end element:::if->this->getClass->toString->println->endElementName->fElementStack->popElement->rawname->if->endElementName->toString->println->if->fEntityScanner->skipString->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->new->ObjectArr->reportFatalError->if->fDocumentHandler->endElement->if->dtdGrammarUtil->endElement->return
XMLDocumentFragmentScannerImpl#scanCharReference():::Scans a character reference:::fStringBuffer2->clear->ch->scanCharReferenceValue->if->if->if->fDocumentHandler->startGeneralEntity->augs->if->if->fTempAugmentations->removeAllItems->else->new->AugmentationsImpl->augs->putItem->if->fDocumentHandler->endGeneralEntity
XMLDocumentFragmentScannerImpl#scanEntityReference(XMLStringBuffer):::Scans an entity reference.:::name->fEntityScanner->scanName->if->reportFatalError->return->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->fEntityStore->isUnparsedEntity->new->ObjectArr->reportFatalError->if->handleCharacter->return->else->if->handleCharacter->return->else->if->handleCharacter->return->else->if->handleCharacter->return->else->if->handleCharacter->return->isEE->fEntityStore->isExternalEntity->if->return->if->fEntityStore->isDeclaredEntity->if->new->ObjectArr->reportFatalError->return->if->if->fErrorReporter->new->ObjectArr->reportError->else->new->ObjectArr->reportFatalError->fEntityManager->startEntity
XMLDocumentFragmentScannerImpl#checkDepth(String):::Check if the depth exceeds the maxElementDepth limit:::fLimitAnalyzer->addValue->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->new->ObjectArr->fLimitAnalyzer->getTotalValue->fSecurityManager->getLimit->reportFatalError
XMLDocumentFragmentScannerImpl#handleCharacter(char, String, XMLStringBuffer):::Calls document handler with a single character resulting from built-in entity resolution.:::checkEntityLimit->content->append->if->if->fDocumentHandler->startGeneralEntity->fTempString->setValues->if->fDocumentHandler->characters->if->fDocumentHandler->endGeneralEntity
XMLDocumentFragmentScannerImpl#setScannerState(int):::Sets the scanner state.:::if->print->getScannerStateName->print->println
XMLDocumentFragmentScannerImpl#setDriver(Driver):::Sets the Driver.:::if->print->getDriverName->print->println
XMLDocumentFragmentScannerImpl#getScannerStateName(int):::Returns the scanner state name.:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return
XMLDocumentFragmentScannerImpl#getEntityName()::: document fragment scanner impl get entity name:::return
XMLDocumentFragmentScannerImpl#getDriverName(Driver):::Returns the driver name.:::if->if->name->driver->getClass->getName->index->name->lastIndexOf->if->name->substring->name->lastIndexOf->if->name->substring->return->return
XMLDocumentFragmentScannerImpl#checkAccess(String, String):::Check the protocol used in the systemId against allowed protocols:::baseSystemId->fEntityScanner->getBaseSystemId->expandedSystemId->XMLEntityManager->expandSystemId->return->SecuritySupport->checkAccess
XMLDocumentFragmentScannerImpl.ElementStack2#resize()::: element stack2 resize:::oldLength->tmp->new->QNameArr->System->arraycopy->for->i
XMLDocumentFragmentScannerImpl.ElementStack2#matchElement(QName):::Check if the element scanned during the start element matches the stored element.:::if->println->println->match->if->if->println->if->if->println->println->println->println->println->else->if->println->return
XMLDocumentFragmentScannerImpl.ElementStack2#nextElement():::This function doesn't increase depth:::if->if->println->return->if->println->return
XMLDocumentFragmentScannerImpl.ElementStack2#getNext():::Note that this function is considerably different than nextElement() This function just returns the previously stored elements:::if->return
XMLDocumentFragmentScannerImpl.ElementStack2#popElement():::returns the current depth:::return
XMLDocumentFragmentScannerImpl.ElementStack2#clear():::Clears the stack without throwing away existing QName objects.:::
XMLDocumentFragmentScannerImpl.ElementStack#pushElement(QName)::: element stack push element:::if->array->new->QNameArr->System->arraycopy->for->i->setValues->return
XMLDocumentFragmentScannerImpl.ElementStack#getNext():::Note that this function is considerably different than nextElement() This function just returns the previously stored elements:::if->if->println->return
XMLDocumentFragmentScannerImpl.ElementStack#push():::This function should be called only when element was skipped sucessfully:::
XMLDocumentFragmentScannerImpl.ElementStack#matchElement(QName):::Check if the element scanned during the start element matches the stored element.:::match->if->if->println->println->if->if->println->println->println->println->println->println->println->else->if->println->if->else->if->println->if->reposition->if->println->println->println->println->return->if->if->println->else->println->return
XMLDocumentFragmentScannerImpl.ElementStack#nextElement():::Returns the next element on the stack.:::if->return->else->if->array->new->QNameArr->System->arraycopy->for->i->return
XMLDocumentFragmentScannerImpl.ElementStack#popElement():::Pops an element off of the stack by setting the values of the specified QName:::if->if->println->println->return->else->if->println->return
XMLDocumentFragmentScannerImpl.ElementStack#reposition():::Reposition the stack:::for->i->if->for->i
XMLDocumentFragmentScannerImpl.ElementStack#clear():::Clears the stack without throwing away existing QName objects.:::
XMLDocumentFragmentScannerImpl.ElementStack#getLastPoppedElement()::: element stack get last popped element:::return
XMLDocumentFragmentScannerImpl.Driver#next()::: driver next:::
XMLDocumentFragmentScannerImpl.FragmentContentDriver#startOfMarkup()::: decides the appropriate state of the parser:::ch->fEntityScanner->peekChar->if->isValidNameStartChar->isValidNameStartHighSurrogate->setScannerState->else->switch->setScannerState->fEntityScanner->skipChar->break->fEntityScanner->skipChar->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->reportFatalError->setScannerState->else->if->fEntityScanner->skipString->setScannerState->else->if->scanForDoctypeHook->reportFatalError->break->setScannerState->fEntityScanner->skipChar->break->reportFatalError
XMLDocumentFragmentScannerImpl.FragmentContentDriver#startOfContent()::: fragment content driver start of content:::if->fEntityScanner->skipChar->setScannerState->else->if->fEntityScanner->skipChar->setScannerState->else->setScannerState
XMLDocumentFragmentScannerImpl.FragmentContentDriver#decideSubState():::SCANNER_STATE_CONTENT and SCANNER_STATE_START_OF_MARKUP are two super states of the parser:::while->switch->startOfContent->break->startOfMarkup->break
XMLDocumentFragmentScannerImpl.FragmentContentDriver#next()::: fragment content driver next:::while->try->if->ch->fEntityScanner->peekChar->if->fEntityScanner->scanChar->setScannerState->else->if->fEntityScanner->scanChar->setScannerState->else->setScannerState->if->startOfMarkup->if->if->if->return->else->if->if->return->switch->return->scanStartElement->if->setScannerState->else->setScannerState->return->if->else->fContentBuffer->clear->c->fEntityScanner->scanContent->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->setScannerState->else->if->XMLChar->fEntityScanner->peekChar->isNameStart->setScannerState->else->setScannerState->if->bufferContent->continue->if->bufferContent->if->dtdGrammarUtil->isIgnorableWhiteSpace->if->println->return->else->return->else->bufferContent->if->if->println->fEntityScanner->scanChar->fContentBuffer->append->else->if->fContentBuffer->fEntityScanner->scanChar->append->if->fEntityScanner->skipChar->fContentBuffer->append->while->fEntityScanner->skipChar->fContentBuffer->append->if->fEntityScanner->skipChar->reportFatalError->do->if->fEntityScanner->scanChar->setScannerState->break->else->if->fEntityScanner->scanChar->setScannerState->break->else->if->isInvalidLiteral->if->XMLChar->isHighSurrogate->scanSurrogates->setScannerState->else->new->ObjectArr->Integer->toString->reportFatalError->fEntityScanner->scanChar->break->scanContent->if->setScannerState->break->while->if->fContentBuffer->toString->println->if->continue->else->if->dtdGrammarUtil->isIgnorableWhiteSpace->if->println->return->else->return->if->setScannerState->return->elementDepthIsZeroHook->else->if->scanEndElement->if->elementDepthIsZeroHook->return->setScannerState->return->scanComment->setScannerState->return->fContentBuffer->clear->scanPI->setScannerState->return->if->else->fContentBuffer->clear->scanCDATASection->if->setScannerState->else->setScannerState->if->continue->else->if->return->else->return->if->else->fContentBuffer->clear->if->fEntityScanner->skipChar->scanCharReferenceValue->if->setScannerState->return->else->scanEntityReference->if->setScannerState->if->return->else->return->if->continue->if->setScannerState->if->fEntityStore->isDeclaredEntity->continue->return->setScannerState->continue->if->fEntityScanner->skipString->if->fEntityScanner->peekChar->isValidNameChar->fStringBuffer->clear->fStringBuffer->append->if->while->fEntityScanner->peekChar->isValidNCName->fStringBuffer->fEntityScanner->scanChar->append->else->while->fEntityScanner->peekChar->isValidNameChar->fStringBuffer->fEntityScanner->scanChar->append->target->fSymbolTable->addSymbol->fContentBuffer->clear->scanPIData->else->scanXMLDeclOrTextDecl->setScannerState->continue->if->scanRootElementHook->return->setScannerState->return->fContentBuffer->clear->scanCharReferenceValue->setScannerState->return->throw->new->XNIException->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->endOfFileHook->return->finally
XMLDocumentFragmentScannerImpl.FragmentContentDriver#scanForDoctypeHook():::Scan for DOCTYPE hook:::return
XMLDocumentFragmentScannerImpl.FragmentContentDriver#elementDepthIsZeroHook():::Element depth iz zero:::return
XMLDocumentFragmentScannerImpl.FragmentContentDriver#scanRootElementHook():::Scan for root element hook:::return
XMLDocumentFragmentScannerImpl.FragmentContentDriver#endOfFileHook(EOFException):::End of file hook:::if->reportFatalError
XMLDocumentFragmentScannerImpl#pr(String)::: document fragment scanner impl pr:::println
XMLDocumentFragmentScannerImpl#getString()::: document fragment scanner impl get string:::if->attributeValueCache->size->return->attributeValueCache->get->else->str->new->XMLString->attributeValueCache->add->return
XMLDocumentFragmentScannerImpl#refresh()::: document fragment scanner impl refresh:::refresh
XMLDocumentFragmentScannerImpl#refresh(int):::receives callbacks from XMLEntityReader  when buffer is being changed.:::if->fAttributes->refresh->if->bufferContent
XMLDocumentFragmentScannerImpl#bufferContent():::Since 'TempString' shares the buffer (a char array) with the CurrentEntity, when the cursor position reaches the end, that is, before the buffer is being loaded with new data, the content in the TempString needs to be copied into the ContentBuffer.:::fContentBuffer->append
XMLDocumentScannerImpl#setInputSource(XMLInputSource):::Sets the input source.:::fEntityManager->setEntityHandler->fEntityManager->startDocumentEntity->setScannerState
XMLDocumentScannerImpl#getScannetState():::return the state of the scanner:::return
XMLDocumentScannerImpl#reset(PropertyManager)::: document scanner impl reset:::super->reset->fNamespaceContext->reset->propertyManager->getProperty->booleanValue->propertyManager->getProperty->booleanValue->setScannerState->setDriver->if->reset->if->fDTDDecl->clear
XMLDocumentScannerImpl#reset(XMLComponentManager):::Resets the component:::super->reset->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getProperty->componentManager->getProperty->try->componentManager->getProperty->catch->finally->if->new->NamespaceSupport->fNamespaceContext->reset->if->fDTDDecl->clear->setScannerState->setDriver
XMLDocumentScannerImpl#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::featureIds->super->getRecognizedFeatures->length->combinedFeatureIds->new->StringArr->if->System->arraycopy->System->arraycopy->return
XMLDocumentScannerImpl#setFeature(String, boolean):::Sets the state of a feature:::super->setFeature->if->featureId->startsWith->suffixLength->featureId->length->length->if->length->featureId->endsWith->return->else->if->length->featureId->endsWith->return
XMLDocumentScannerImpl#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::propertyIds->super->getRecognizedProperties->length->combinedPropertyIds->new->StringArr->if->System->arraycopy->System->arraycopy->return
XMLDocumentScannerImpl#setProperty(String, Object):::Sets the value of a property:::super->setProperty->if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->if->length->propertyId->endsWith->if->return
XMLDocumentScannerImpl#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return->super->getFeatureDefault
XMLDocumentScannerImpl#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return->super->getPropertyDefault
XMLDocumentScannerImpl#startEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::super->startEntity->fEntityScanner->registerListener->if->name->equals->fEntityScanner->isExternal->if->augs->getItem->booleanValue->setScannerState->if->name->equals->fDocumentHandler->startDocument
XMLDocumentScannerImpl#endEntity(String, Augmentations):::This method notifies the end of an entity:::super->endEntity->if->name->equals->if->setScannerState->else->throw->new->java.io.EOFException
XMLDocumentScannerImpl#getDTDDecl()::: document scanner impl get decl:::entity->fEntityScanner->getCurrentEntity->fDTDDecl->append->if->fDTDDecl->append->return
XMLDocumentScannerImpl#getCharacterEncodingScheme()::: document scanner impl get character encoding scheme:::return
XMLDocumentScannerImpl#next()::: document scanner impl next:::return->fDriver->next
XMLDocumentScannerImpl#getNamespaceContext()::: document scanner impl get namespace context:::return
XMLDocumentScannerImpl#createContentDriver():::Creates a content driver.:::return->new->ContentDriver
XMLDocumentScannerImpl#scanDoctypeDecl(boolean):::Scans a doctype declaration.:::if->fEntityScanner->skipSpaces->reportFatalError->fEntityScanner->scanName->if->reportFatalError->if->fEntityScanner->skipSpaces->scanExternalID->fEntityScanner->skipSpaces->if->fDTDDescription->fEntityManager->getCurrentResourceIdentifier->getExpandedSystemId->setValues->fDTDDescription->setRootName->fExternalSubsetResolver->getExternalSubset->if->if->fDocumentHandler->doctypeDecl->else->fDocumentHandler->fExternalSubsetSource->getPublicId->fExternalSubsetSource->getSystemId->doctypeDecl->internalSubset->if->fEntityScanner->skipChar->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->return
XMLDocumentScannerImpl#setEndDTDScanState():::Set the scanner state after scanning DTD:::setScannerState->setDriver->fEntityManager->setEntityHandler
XMLDocumentScannerImpl#getScannerStateName(int):::Returns the scanner state name.:::switch->return->return->return->return->return->return->return->super->getScannerStateName
XMLDocumentScannerImpl.XMLDeclDriver#next()::: decl driver next:::setScannerState->setDriver->try->if->fEntityScanner->skipString->if->XMLChar->fEntityScanner->peekChar->isSpace->scanXMLDeclOrTextDecl->else->return->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->reportFatalError->return->finally
XMLDocumentScannerImpl.PrologDriver#next()::: prolog driver next:::try->do->switch->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->setScannerState->else->if->fEntityScanner->skipChar->setScannerState->else->setScannerState->break->if->fEntityScanner->peekChar->isValidNameStartChar->fEntityScanner->peekChar->isValidNameStartHighSurrogate->setScannerState->setDriver->return->fContentDriver->next->else->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->reportFatalError->setScannerState->else->if->fEntityScanner->skipString->setScannerState->entity->fEntityScanner->getCurrentEntity->if->if->new->XMLStringBuffer->fDTDDecl->append->else->reportFatalError->else->if->fEntityScanner->skipChar->setScannerState->else->reportFatalError->break->while->switch->scanComment->setScannerState->return->fContentBuffer->clear->scanPI->setScannerState->return->if->reportFatalError->if->reportFatalError->if->scanDoctypeDecl->setScannerState->if->new->DTDDriver->setDriver->return->fDTDDriver->next->if->entity->fEntityScanner->getCurrentEntity->if->if->if->fValidationManager->isCachedDTD->if->setScannerState->else->setScannerState->setDriver->if->new->DTDDriver->return->fDTDDriver->next->else->if->if->fValidationManager->isCachedDTD->fDTDScanner->setInputSource->if->setScannerState->else->setScannerState->setDriver->if->new->DTDDriver->return->fDTDDriver->next->if->fDTDScanner->setInputSource->setScannerState->return->reportFatalError->fEntityScanner->scanChar->return->reportFatalError->return->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->reportFatalError->return->finally->return
XMLDocumentScannerImpl.DTDDriver#next()::: driver next:::dispatch->if->getGrammar->new->DTDGrammarUtil->return
XMLDocumentScannerImpl.DTDDriver#dispatch(boolean):::Dispatch an XML "event".:::fEntityManager->setEntityHandler->try->again->resourceIdentifier->new->XMLResourceIdentifierImpl->if->if->fEntityManager->getEntityScanner->new->XML11DTDScannerImpl->else->new->XMLDTDScannerImpl->reset->fDTDScanner->setLimitAnalyzer->do->switch->moreToScan->if->fDTDScanner->skipDTD->completeDTD->fDTDScanner->scanDTDInternalSubset->entity->fEntityScanner->getCurrentEntity->if->if->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->fEntityManager->getEntityStore->fEntityStore->reset->else->if->setScannerState->break->setEndDTDScanState->return->break->resourceIdentifier->setValues->xmlInputSource->staxInputSource->fEntityManager->resolveEntityAsPerStax->if->staxInputSource->isCreatedByResolver->accessError->checkAccess->if->new->ObjectArr->SecuritySupport->sanitizePath->reportFatalError->staxInputSource->getXMLInputSource->fDTDScanner->setInputSource->if->setScannerState->else->setScannerState->break->completeDTD->moreToScan->fDTDScanner->scanDTDExternalSubset->if->setEndDTDScanState->return->break->setEndDTDScanState->return->throw->getScannerStateName->new->XNIException->while->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->e->printStackTrace->reportFatalError->return->finally->fEntityManager->setEntityHandler->return
XMLDocumentScannerImpl.ContentDriver#scanForDoctypeHook():::Scan for DOCTYPE hook:::if->fEntityScanner->skipString->setScannerState->return->return
XMLDocumentScannerImpl.ContentDriver#elementDepthIsZeroHook():::Element depth iz zero:::setScannerState->setDriver->return
XMLDocumentScannerImpl.ContentDriver#scanRootElementHook():::Scan for root element hook:::if->scanStartElement->setScannerState->setDriver->return->return
XMLDocumentScannerImpl.ContentDriver#endOfFileHook(EOFException):::End of file hook:::reportFatalError
XMLDocumentScannerImpl.ContentDriver#resolveExternalSubsetAndRead()::: content driver resolve external subset and read:::fDTDDescription->fEntityManager->getCurrentResourceIdentifier->getExpandedSystemId->setValues->fDTDDescription->setRootName->src->fExternalSubsetResolver->getExternalSubset->if->src->getPublicId->src->getSystemId->if->fDocumentHandler->doctypeDecl->try->fDTDScanner->setInputSource->while->fDTDScanner->scanDTDExternalSubset->catch->finally->fEntityManager->setEntityHandler
XMLDocumentScannerImpl.TrailingMiscDriver#next()::: trailing misc driver next:::if->return->try->if->return->do->switch->fEntityScanner->skipSpaces->if->return->if->fEntityScanner->skipChar->setScannerState->else->setScannerState->break->if->fEntityScanner->skipChar->setScannerState->else->if->fEntityScanner->skipChar->setScannerState->else->if->fEntityScanner->skipChar->reportFatalError->else->if->fEntityScanner->peekChar->isValidNameStartChar->fEntityScanner->peekChar->isValidNameStartHighSurrogate->reportFatalError->scanStartElement->setScannerState->else->reportFatalError->break->while->switch->fContentBuffer->clear->scanPI->setScannerState->return->if->fEntityScanner->skipString->reportFatalError->scanComment->setScannerState->return->ch->fEntityScanner->peekChar->if->setScannerState->return->else->reportFatalError->fEntityScanner->scanChar->setScannerState->return->reportFatalError->setScannerState->return->setScannerState->return->throw->new->java.util.NoSuchElementException->throw->new->XNIException->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->if->reportFatalError->return->setScannerState->finally->return
XMLDocumentScannerImpl#refresh(int):::receives callbacks from XMLEntityReader  when buffer is being changed.:::super->refresh->if->entity->fEntityScanner->getCurrentEntity->if->fDTDDecl->append
XMLDTDScannerImpl#setInputSource(XMLInputSource):::Sets the input source.:::if->if->fDTDHandler->startDTD->fDTDHandler->endDTD->if->nvGrammarInfo->startDTD->nvGrammarInfo->endDTD->return->fEntityManager->setEntityHandler->fEntityManager->startDTDEntity
XMLDTDScannerImpl#setLimitAnalyzer(XMLLimitAnalyzer)::: scanner impl set limit analyzer:::
XMLDTDScannerImpl#scanDTDExternalSubset(boolean):::Scans the external subset of the document.:::fEntityManager->setEntityHandler->if->textDecl->scanTextDecl->if->return->else->setScannerState->if->return->do->if->scanDecls->return->while->return
XMLDTDScannerImpl#scanDTDInternalSubset(boolean, boolean, boolean):::Scans the internal subset of the document.:::fEntityManager->getEntityScanner->fEntityManager->setEntityHandler->if->if->fDTDHandler->startDTD->if->nvGrammarInfo->startDTD->setScannerState->do->if->scanDecls->if->fDTDHandler->endDTD->if->nvGrammarInfo->endDTD->setScannerState->fLimitAnalyzer->reset->fLimitAnalyzer->reset->return->while->return
XMLDTDScannerImpl#skipDTD(boolean):::Skip the DTD if javax.xml.stream.supportDTD is false.:::if->return->fStringBuffer->clear->while->fEntityScanner->scanData->c->fEntityScanner->peekChar->if->if->XMLChar->isHighSurrogate->scanSurrogates->if->isInvalidLiteral->new->ObjectArr->Integer->toHexString->reportFatalError->fEntityScanner->scanChar->return
XMLDTDScannerImpl#reset(XMLComponentManager):::reset:::super->reset->init
XMLDTDScannerImpl#reset()::: scanner impl reset:::super->reset->init
XMLDTDScannerImpl#reset(PropertyManager)::: scanner impl reset:::setPropertyManager->super->reset->init->new->DTDGrammar
XMLDTDScannerImpl#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLDTDScannerImpl#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLDTDScannerImpl#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLDTDScannerImpl#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLDTDScannerImpl#setDTDHandler(XMLDTDHandler):::setDTDHandler:::
XMLDTDScannerImpl#getDTDHandler():::getDTDHandler:::return
XMLDTDScannerImpl#setDTDContentModelHandler(XMLDTDContentModelHandler):::setDTDContentModelHandler:::
XMLDTDScannerImpl#getDTDContentModelHandler():::getDTDContentModelHandler:::return
XMLDTDScannerImpl#startEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::super->startEntity->dtdEntity->name->equals->if->if->fDTDHandler->startDTD->if->fDTDHandler->startExternalSubset->fEntityManager->startExternalSubset->fEntityStore->startExternalSubset->else->if->name->charAt->pushPEStack->if->fEntityScanner->isExternal->if->fDTDHandler->startParameterEntity
XMLDTDScannerImpl#endEntity(String, Augmentations):::This method notifies the end of an entity:::super->endEntity->if->return->reportEntity->if->name->startsWith->peekReportEntity->startMarkUpDepth->popPEStack->if->fErrorReporter->new->ObjectArr->reportError->if->if->fErrorReporter->new->ObjectArr->reportError->if->fEntityScanner->isExternal->dtdEntity->name->equals->if->fDTDHandler->endParameterEntity->if->if->reportFatalError->fEntityManager->endExternalSubset->fEntityStore->endExternalSubset->if->fDTDHandler->endExternalSubset->fDTDHandler->endDTD->if->augs->getItem->equals->throw->new->EOFException
XMLDTDScannerImpl#setScannerState(int):::Sets the scanner state.:::if->print->getScannerStateName->print
XMLDTDScannerImpl#getScannerStateName(int):::Returns the scanner state name.:::if->switch->return->return->return->return
XMLDTDScannerImpl#scanningInternalSubset()::: scanner impl scanning internal subset:::return
XMLDTDScannerImpl#startPE(String, boolean):::start a parameter entity dealing with the textdecl if there is any:::depth->pName->if->fEntityStore->isDeclaredEntity->fErrorReporter->new->ObjectArr->reportError->fEntityManager->fSymbolTable->addSymbol->startEntity->if->fEntityScanner->isExternal->scanTextDecl
XMLDTDScannerImpl#scanTextDecl():::Dispatch an XML "event".:::textDecl->if->fEntityScanner->skipString->if->fEntityScanner->peekChar->isValidNameChar->fStringBuffer->clear->fStringBuffer->append->while->fEntityScanner->peekChar->isValidNameChar->fStringBuffer->fEntityScanner->scanChar->append->target->fSymbolTable->addSymbol->scanPIData->else->version->encoding->scanXMLDeclOrTextDecl->fEntityScanner->setEncoding->if->fDTDHandler->textDecl->return
XMLDTDScannerImpl#scanPIData(String, XMLString):::Scans a processing data:::if->fDTDHandler->processingInstruction
XMLDTDScannerImpl#scanComment():::Scans a comment:::scanComment->if->fDTDHandler->comment
XMLDTDScannerImpl#scanElementDecl():::Scans an element declaration   [45]    elementdecl    ::=    '&lt;!ELEMENT' S Name S contentspec S? '>' [46]    contentspec    ::=    'EMPTY' | 'ANY' | Mixed | children   Note: Called after scanning past '&lt;!ELEMENT':::if->scanningInternalSubset->skipSeparator->reportFatalError->name->fEntityScanner->scanName->if->reportFatalError->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->if->fDTDContentModelHandler->startContentModel->contentModel->if->fEntityScanner->skipString->if->fDTDContentModelHandler->empty->else->if->fEntityScanner->skipString->if->fDTDContentModelHandler->any->else->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->fDTDContentModelHandler->startGroup->fStringBuffer->clear->fStringBuffer->append->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipString->scanMixed->else->scanChildren->fStringBuffer->toString->if->fDTDContentModelHandler->endContentModel->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->fDTDHandler->elementDecl->if->nvGrammarInfo->elementDecl
XMLDTDScannerImpl#scanMixed(String):::scan Mixed content model This assumes the content model has been parsed up to #PCDATA and can simply append to fStringBuffer:::childName->fStringBuffer->append->if->fDTDContentModelHandler->pcdata->scanningInternalSubset->skipSeparator->while->fEntityScanner->skipChar->fStringBuffer->append->if->fDTDContentModelHandler->separator->scanningInternalSubset->skipSeparator->fEntityScanner->scanName->if->new->ObjectArr->reportFatalError->fStringBuffer->append->if->fDTDContentModelHandler->element->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipString->fStringBuffer->append->if->fDTDContentModelHandler->endGroup->fDTDContentModelHandler->occurrence->else->if->new->ObjectArr->reportFatalError->else->if->fEntityScanner->skipChar->fStringBuffer->append->if->fDTDContentModelHandler->endGroup->else->new->ObjectArr->reportFatalError
XMLDTDScannerImpl#scanChildren(String):::scan children content model This assumes it can simply append to fStringBuffer:::pushContentStack->currentOp->c->while->if->fEntityScanner->skipChar->fStringBuffer->append->if->fDTDContentModelHandler->startGroup->pushContentStack->scanningInternalSubset->skipSeparator->continue->scanningInternalSubset->skipSeparator->childName->fEntityScanner->scanName->if->new->ObjectArr->reportFatalError->return->if->fDTDContentModelHandler->element->fStringBuffer->append->fEntityScanner->peekChar->if->if->oc->if->else->if->else->fDTDContentModelHandler->occurrence->fEntityScanner->scanChar->fStringBuffer->append->while->scanningInternalSubset->skipSeparator->fEntityScanner->peekChar->if->if->fDTDContentModelHandler->separator->fEntityScanner->scanChar->fStringBuffer->append->break->else->if->if->fDTDContentModelHandler->separator->fEntityScanner->scanChar->fStringBuffer->append->break->else->if->new->ObjectArr->reportFatalError->if->fDTDContentModelHandler->endGroup->popContentStack->oc->if->fEntityScanner->skipString->fStringBuffer->append->if->fDTDContentModelHandler->occurrence->else->if->fEntityScanner->skipString->fStringBuffer->append->if->fDTDContentModelHandler->occurrence->else->if->fEntityScanner->skipString->fStringBuffer->append->if->fDTDContentModelHandler->occurrence->else->fEntityScanner->scanChar->fStringBuffer->append->if->return->scanningInternalSubset->skipSeparator
XMLDTDScannerImpl#scanAttlistDecl():::Scans an attlist declaration   [52]  AttlistDecl    ::=   '&lt;!ATTLIST' S Name AttDef* S? '>' [53]  AttDef         ::=   S Name S AttType S DefaultDecl   Note: Called after scanning past '&lt;!ATTLIST':::if->scanningInternalSubset->skipSeparator->reportFatalError->elName->fEntityScanner->scanName->if->reportFatalError->if->fDTDHandler->startAttlist->if->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipChar->if->fDTDHandler->endAttlist->return->else->new->ObjectArr->reportFatalError->while->fEntityScanner->skipChar->name->fEntityScanner->scanName->if->new->ObjectArr->reportFatalError->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->type->scanAttType->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->defaultType->scanAttDefaultDecl->enumr->if->if->new->StringArr->System->arraycopy->if->defaultType->equals->defaultType->equals->if->fDTDHandler->attributeDecl->if->nvGrammarInfo->attributeDecl->else->if->fDTDHandler->attributeDecl->if->nvGrammarInfo->attributeDecl->scanningInternalSubset->skipSeparator->if->fDTDHandler->endAttlist
XMLDTDScannerImpl#scanAttType(String, String):::Scans an attribute type definition   [54]  AttType        ::=   StringType | TokenizedType | EnumeratedType [55]  StringType     ::=   'CDATA' [56]  TokenizedType  ::=   'ID'                          | 'IDREF'                          | 'IDREFS'                          | 'ENTITY'                          | 'ENTITIES'                          | 'NMTOKEN'                          | 'NMTOKENS' [57]  EnumeratedType ::=    NotationType | Enumeration [58]  NotationType ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')' [59]  Enumeration    ::=    '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'   Note: Called after scanning past '&lt;!ATTLIST':::type->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->c->fEntityScanner->scanChar->if->new->ObjectArr->reportFatalError->do->scanningInternalSubset->skipSeparator->aName->fEntityScanner->scanName->if->new->ObjectArr->reportFatalError->ensureEnumerationSize->scanningInternalSubset->skipSeparator->fEntityScanner->scanChar->while->if->new->ObjectArr->reportFatalError->else->c->fEntityScanner->scanChar->if->new->ObjectArr->reportFatalError->do->scanningInternalSubset->skipSeparator->token->fEntityScanner->scanNmtoken->if->new->ObjectArr->reportFatalError->ensureEnumerationSize->scanningInternalSubset->skipSeparator->fEntityScanner->scanChar->while->if->new->ObjectArr->reportFatalError->return
XMLDTDScannerImpl#scanAttDefaultDecl(String, String, String, XMLString, XMLString):::Scans an attribute default declaration   [60] DefaultDecl ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue) :::defaultType->fString->clear->defaultVal->clear->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->else->if->fEntityScanner->skipString->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->isVC->scanAttributeValue->return
XMLDTDScannerImpl#scanEntityDecl():::Scans an entity declaration   [70]    EntityDecl  ::=    GEDecl | PEDecl [71]    GEDecl      ::=    '&lt;!ENTITY' S Name S EntityDef S? '>' [72]    PEDecl      ::=    '&lt;!ENTITY' S '%' S Name S PEDef S? '>' [73]    EntityDef   ::=    EntityValue | (ExternalID NDataDecl?) [74]    PEDef       ::=    EntityValue | ExternalID [75]    ExternalID  ::=    'SYSTEM' S SystemLiteral                          | 'PUBLIC' S PubidLiteral S SystemLiteral [76]    NDataDecl   ::=    S 'NDATA' S Name   Note: Called after scanning past '&lt;!ENTITY':::isPEDecl->sawPERef->if->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->else->if->scanningInternalSubset->skipSeparator->else->if->scanningInternalSubset->reportFatalError->else->if->fEntityScanner->peekChar->scanningInternalSubset->skipSeparator->else->else->if->scanningInternalSubset->fEntityScanner->skipChar->reportFatalError->else->if->fEntityScanner->skipSpaces->reportFatalError->else->if->while->peName->fEntityScanner->scanName->if->reportFatalError->else->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->else->startPE->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->break->if->if->scanningInternalSubset->skipSeparator->break->fEntityScanner->skipChar->name->fEntityScanner->scanName->if->reportFatalError->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->scanExternalID->systemId->publicId->if->notation->sawSpace->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipString->if->new->ObjectArr->reportFatalError->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->fEntityScanner->scanName->if->new->ObjectArr->reportFatalError->if->scanEntityValue->fStringBuffer->clear->fStringBuffer2->clear->fStringBuffer->append->fStringBuffer2->append->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->if->if->baseSystemId->fEntityScanner->getBaseSystemId->if->fEntityStore->addUnparsedEntity->else->fEntityStore->addExternalEntity->if->fResourceIdentifier->XMLEntityManager->expandSystemId->setValues->if->fDTDHandler->unparsedEntityDecl->else->fDTDHandler->externalEntityDecl->else->fEntityStore->fStringBuffer->toString->addInternalEntity->if->fDTDHandler->internalEntityDecl
XMLDTDScannerImpl#scanEntityValue(String, boolean, XMLString, XMLString):::Scans an entity value.:::quote->fEntityScanner->scanChar->if->reportFatalError->entityDepth->literal->literal2->countChar->if->fLimitAnalyzer->startEntity->if->fEntityScanner->scanLiteral->fStringBuffer->clear->fStringBuffer2->clear->offset->do->fStringBuffer->append->fStringBuffer2->append->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->fStringBuffer2->append->scanCharReferenceValue->else->fStringBuffer->append->fStringBuffer2->append->eName->fEntityScanner->scanName->if->reportFatalError->else->fStringBuffer->append->fStringBuffer2->append->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->else->fStringBuffer->append->fStringBuffer2->append->else->if->fEntityScanner->skipChar->while->fStringBuffer2->append->peName->fEntityScanner->scanName->if->reportFatalError->else->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->else->if->scanningInternalSubset->new->ObjectArr->reportFatalError->fStringBuffer2->append->fStringBuffer2->append->startPE->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->break->else->c->fEntityScanner->peekChar->if->XMLChar->isHighSurrogate->scanSurrogates->else->if->isInvalidLiteral->new->ObjectArr->Integer->toHexString->reportFatalError->fEntityScanner->scanChar->else->if->fStringBuffer->append->fStringBuffer2->append->fEntityScanner->scanChar->checkEntityLimit->while->fEntityScanner->scanLiteral->checkEntityLimit->fStringBuffer->append->fStringBuffer2->append->else->checkEntityLimit->value->setValues->nonNormalizedValue->setValues->if->if->fLimitAnalyzer->endEntity->else->fLimitAnalyzer->endEntity->if->fEntityScanner->skipChar->reportFatalError
XMLDTDScannerImpl#scanNotationDecl():::Scans a notation declaration   [82] NotationDecl ::= '&lt;!NOTATION' S Name S (ExternalID|PublicID) S? '>' [83]  PublicID    ::= 'PUBLIC' S PubidLiteral   Note: Called after scanning past '&lt;!NOTATION':::if->scanningInternalSubset->skipSeparator->reportFatalError->name->fEntityScanner->scanName->if->reportFatalError->if->scanningInternalSubset->skipSeparator->new->ObjectArr->reportFatalError->scanExternalID->systemId->publicId->baseSystemId->fEntityScanner->getBaseSystemId->if->new->ObjectArr->reportFatalError->scanningInternalSubset->skipSeparator->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fResourceIdentifier->XMLEntityManager->expandSystemId->setValues->if->nvGrammarInfo->notationDecl->if->fDTDHandler->notationDecl
XMLDTDScannerImpl#scanConditionalSect(int):::Scans a conditional section:::scanningInternalSubset->skipSeparator->if->fEntityScanner->skipString->scanningInternalSubset->skipSeparator->if->fErrorReporter->new->ObjectArr->reportError->if->fEntityScanner->skipChar->reportFatalError->if->fDTDHandler->startConditional->else->if->fEntityScanner->skipString->scanningInternalSubset->skipSeparator->if->fErrorReporter->new->ObjectArr->reportError->if->fDTDHandler->startConditional->if->fEntityScanner->skipChar->reportFatalError->initialDepth->if->fIgnoreConditionalBuffer->clear->while->if->fEntityScanner->skipChar->if->fIgnoreConditionalBuffer->append->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->if->fIgnoreConditionalBuffer->append->else->if->fIgnoreConditionalBuffer->append->else->if->fEntityScanner->skipChar->if->fIgnoreConditionalBuffer->append->if->fEntityScanner->skipChar->if->fIgnoreConditionalBuffer->append->while->fEntityScanner->skipChar->if->fIgnoreConditionalBuffer->append->if->fEntityScanner->skipChar->if->if->fLiteral->setValues->fDTDHandler->ignoredCharacters->fDTDHandler->endConditional->return->else->if->fIgnoreConditionalBuffer->append->else->c->fEntityScanner->scanChar->if->reportFatalError->return->if->fIgnoreConditionalBuffer->append->else->reportFatalError
XMLDTDScannerImpl#scanDecls(boolean):::Dispatch an XML "event".:::skipSeparator->again->while->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->fStringBuffer->clear->scanPI->else->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->reportFatalError->else->scanComment->else->if->fEntityScanner->skipString->scanElementDecl->else->if->fEntityScanner->skipString->scanAttlistDecl->else->if->fEntityScanner->skipString->scanEntityDecl->else->if->fEntityScanner->skipString->scanNotationDecl->else->if->fEntityScanner->skipChar->scanningInternalSubset->scanConditionalSect->else->reportFatalError->else->reportFatalError->else->if->fEntityScanner->skipChar->if->fEntityScanner->skipChar->fEntityScanner->skipChar->reportFatalError->if->fDTDHandler->endConditional->else->if->scanningInternalSubset->fEntityScanner->peekChar->return->else->if->fEntityScanner->skipSpaces->else->reportFatalError->skipSeparator->return
XMLDTDScannerImpl#skipSeparator(boolean, boolean):::Skip separator:::depth->sawSpace->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->return->while->name->fEntityScanner->scanName->if->reportFatalError->else->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->startPE->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->return
XMLDTDScannerImpl#pushContentStack(int)::: scanner impl push content stack:::if->newStack->new->intArr->System->arraycopy
XMLDTDScannerImpl#popContentStack()::: scanner impl pop content stack:::return
XMLDTDScannerImpl#pushPEStack(int, boolean)::: scanner impl push stack:::if->newIntStack->new->intArr->System->arraycopy->newBooleanStack->new->booleanArr->System->arraycopy
XMLDTDScannerImpl#popPEStack():::pop the stack:::return
XMLDTDScannerImpl#peekReportEntity():::look at the top of the stack:::return
XMLDTDScannerImpl#ensureEnumerationSize(int)::: scanner impl ensure enumeration size:::if->newEnum->new->StringArr->System->arraycopy
XMLDTDScannerImpl#init()::: scanner impl init:::setScannerState
XMLDTDScannerImpl#getGrammar()::: scanner impl get grammar:::return
XMLEntityDescription#setEntityName(String):::Sets the name of the entity.:::
XMLEntityDescription#getEntityName():::Returns the name of the entity.:::
XMLEntityHandler#startEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::
XMLEntityHandler#endEntity(String, Augmentations):::This method notifies the end of an entity:::
XMLEntityManager#addInternalEntity(String, String):::Adds an internal entity declaration:::if->fEntities->containsKey->entity->new->Entity.InternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityManager#addExternalEntity(String, String, String, String):::Adds an external entity declaration:::if->fEntities->containsKey->if->size->fEntityStack->size->if->getExpandedSystemId->for->i->entity->expandSystemId->new->XMLEntityDescriptionImpl->new->Entity.ExternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityManager#addUnparsedEntity(String, String, String, String, String):::Adds an unparsed entity declaration:::if->fEntities->containsKey->entity->new->XMLEntityDescriptionImpl->new->Entity.ExternalEntity->fEntities->put->else->if->fErrorReporter->new->ObjectArr->reportError
XMLEntityManager#getEntityStore():::get the entity storage object from entity manager:::return
XMLEntityManager#getEntityScanner():::return the entity responsible for reading the entity:::if->if->new->XMLEntityScanner->fXML10EntityScanner->reset->return
XMLEntityManager#setScannerVersion(short)::: entity manager set scanner version:::if->if->new->XMLEntityScanner->fXML10EntityScanner->reset->fEntityScanner->setCurrentEntity->else->if->new->XML11EntityScanner->fXML11EntityScanner->reset->fEntityScanner->setCurrentEntity
XMLEntityManager#setupCurrentEntity(boolean, String, XMLInputSource, boolean, boolean):::This method uses the passed-in XMLInputSource to make fCurrentEntity usable for reading.:::publicId->xmlInputSource->getPublicId->literalSystemId->xmlInputSource->getSystemId->baseSystemId->xmlInputSource->getBaseSystemId->encoding->xmlInputSource->getEncoding->encodingExternallySpecified->isBigEndian->stream->reader->xmlInputSource->getCharacterStream->expandedSystemId->expandSystemId->if->if->xmlInputSource->getByteStream->if->location->new->URL->connect->location->openConnection->if->connect->getInputStream->else->followRedirects->if->urlConnection->httpInputSource->propIter->httpInputSource->getHTTPRequestProperties->while->propIter->hasNext->entry->propIter->next->urlConnection->entry->getKey->entry->getValue->setRequestProperty->httpInputSource->getFollowHTTPRedirects->if->urlConnection->setInstanceFollowRedirects->connect->getInputStream->if->redirect->connect->getURL->toString->if->redirect->equals->rewindableStream->new->RewindableInputStream->if->b4->new->byteArr->count->for->if->info->getEncodingInfo->readerEncoding->stream->reset->if->if->equals->stream->skip->else->if->equals->stream->skip->createReader->else->createReader->else->encoding->toUpperCase->if->equals->b3->new->intArr->count->for->if->if->stream->reset->else->stream->reset->else->if->equals->b4->new->intArr->count->for->stream->reset->if->b0->b1->if->stream->skip->else->if->stream->skip->else->if->b2->b3->if->if->else->if->equals->b4->new->intArr->count->for->stream->reset->if->if->else->if->else->if->equals->b4->new->intArr->count->for->stream->reset->if->if->else->if->createReader->if->println->fReaderStack->push->if->fEntityStack->push->new->XMLResourceIdentifierImpl->new->Entity.ScannedEntity->fCurrentEntity->setEncodingExternallySpecified->fEntityScanner->setCurrentEntity->fResourceIdentifier->setValues->if->fLimitAnalyzer->startEntity->return
XMLEntityManager#isExternalEntity(String):::Checks whether an entity given by name is external.:::entity->fEntities->get->if->return->return->entity->isExternal
XMLEntityManager#isEntityDeclInExternalSubset(String):::Checks whether the declaration of an entity given by name is // in the external subset.:::entity->fEntities->get->if->return->return->entity->isEntityDeclInExternalSubset
XMLEntityManager#setStandalone(boolean):::Sets whether the document entity is standalone.:::
XMLEntityManager#isStandalone():::Returns true if the document entity is standalone.:::return
XMLEntityManager#isDeclaredEntity(String)::: entity manager is declared entity:::entity->fEntities->get->return
XMLEntityManager#isUnparsedEntity(String)::: entity manager is unparsed entity:::entity->fEntities->get->if->return->return->entity->isUnparsed
XMLEntityManager#getCurrentResourceIdentifier()::: entity manager get current resource identifier:::return
XMLEntityManager#setEntityHandler(com.sun.org.apache.xerces.internal.impl.XMLEntityHandler)::: entity manager set entity handler:::
XMLEntityManager#resolveEntityAsPerStax(XMLResourceIdentifier)::: entity manager resolve entity as per stax:::if->return->publicId->resourceIdentifier->getPublicId->literalSystemId->resourceIdentifier->getLiteralSystemId->baseSystemId->resourceIdentifier->getBaseSystemId->expandedSystemId->resourceIdentifier->getExpandedSystemId->needExpand->if->getExpandedSystemId->if->if->expandSystemId->staxInputSource->xmlInputSource->ri->if->else->fResourceIdentifier->clear->ri->setValues->if->println->if->fStaxEntityResolver->resolveEntity->if->if->fEntityResolver->resolveEntity->if->if->new->StaxXMLInputSource->if->if->JdkXmlUtils->getCatalogFeatures->fCatalogFeatures->get->if->try->if->CatalogManager->catalogResolver->is->fCatalogResolver->resolveEntity->if->is->isEmpty->new->XMLInputSource->new->StaxXMLInputSource->catch->fErrorReporter->new->ObjectArr->SecuritySupport->sanitizePath->reportError->finally->if->new->XMLInputSource->new->StaxXMLInputSource->else->if->staxInputSource->hasXMLStreamOrXMLEventReader->if->println->println->return
XMLEntityManager#resolveEntity(XMLResourceIdentifier):::Resolves the specified public and system identifiers:::if->return->publicId->resourceIdentifier->getPublicId->literalSystemId->resourceIdentifier->getLiteralSystemId->baseSystemId->resourceIdentifier->getBaseSystemId->expandedSystemId->resourceIdentifier->getExpandedSystemId->needExpand->if->getExpandedSystemId->if->if->expandSystemId->xmlInputSource->if->resourceIdentifier->setBaseSystemId->resourceIdentifier->setExpandedSystemId->fEntityResolver->resolveEntity->if->if->JdkXmlUtils->getCatalogFeatures->fCatalogFeatures->get->if->is->try->if->CatalogManager->catalogResolver->pid->resourceIdentifier->getNamespace->if->fCatalogResolver->resolveEntity->catch->finally->if->is->isEmpty->new->XMLInputSource->else->if->if->CatalogManager->catalogResolver->source->try->fCatalogResolver->resolve->catch->throw->new->XNIException->finally->if->source->isEmpty->source->getSystemId->new->XMLInputSource->if->new->XMLInputSource->if->println->println->return
XMLEntityManager#startEntity(boolean, String, boolean):::Starts a named entity.:::entity->fEntityStorage->getEntity->if->if->encoding->fResourceIdentifier->clear->fEntityAugs->removeAllItems->fEntityAugs->putItem->fEntityHandler->startEntity->fEntityAugs->removeAllItems->fEntityAugs->putItem->fEntityHandler->endEntity->return->external->entity->isExternal->externalEntity->extLitSysId->extBaseSysId->expandedSystemId->if->getLiteralSystemId->getBaseSystemId->expandSystemId->unparsed->entity->isUnparsed->parameter->entityName->startsWith->general->if->if->fResourceIdentifier->clear->encoding->fResourceIdentifier->getPublicId->setValues->fEntityAugs->removeAllItems->fEntityAugs->putItem->fEntityHandler->startEntity->fEntityAugs->removeAllItems->fEntityAugs->putItem->fEntityHandler->endEntity->return->size->fEntityStack->size->for->i->staxInputSource->xmlInputSource->if->resolveEntityAsPerStax->staxInputSource->getXMLInputSource->if->if->accessError->SecuritySupport->checkAccess->if->fErrorReporter->this->getEntityScanner->new->ObjectArr->SecuritySupport->sanitizePath->reportError->else->internalEntity->reader->new->StringReader->new->XMLInputSource->startEntity
XMLEntityManager#startDocumentEntity(XMLInputSource):::Starts the document entity:::startEntity
XMLEntityManager#startDTDEntity(XMLInputSource):::Starts the DTD entity:::startEntity
XMLEntityManager#startExternalSubset()::: entity manager start external subset:::
XMLEntityManager#endExternalSubset()::: entity manager end external subset:::
XMLEntityManager#startEntity(boolean, String, XMLInputSource, boolean, boolean):::Starts an entity:::encoding->setupCurrentEntity->if->fLimitAnalyzer->addValue->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->fErrorReporter->new->ObjectArr->fSecurityManager->getLimitValueByIndex->reportError->if->fEntityHandler->startEntity
XMLEntityManager#getCurrentEntity()::: entity manager get current entity:::return
XMLEntityManager#getTopLevelEntity():::Return the top level entity handled by this manager, or null if no entity was added.:::return->fEntityStack->empty->fEntityStack->get
XMLEntityManager#closeReaders():::Close all opened InputStreams and Readers opened by this parser.:::while->fReaderStack->isEmpty->try->fReaderStack->pop->close->catch->finally
XMLEntityManager#endEntity()::: entity manager end entity:::if->print->print->println->entity->fEntityStack->size->fEntityStack->pop->if->try->if->fLimitAnalyzer->endEntity->if->equals->fSecurityManager->debugPrint->fCurrentEntity->close->catch->throw->new->XNIException->finally->if->fReaderStack->isEmpty->fReaderStack->pop->if->if->fEntityAugs->removeAllItems->fEntityAugs->putItem->fEntityHandler->endEntity->fEntityAugs->removeAllItems->else->fEntityHandler->endEntity->documentEntity->fEntityScanner->setCurrentEntity->if->throw->new->EOFException->if->print->print->println
XMLEntityManager#reset(PropertyManager)::: entity manager reset:::propertyManager->getProperty->propertyManager->getProperty->try->propertyManager->getProperty->catch->finally->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->spm->propertyManager->getProperty->spm->getValue->propertyManager->getProperty->new->XMLLimitAnalyzer->fEntityStorage->reset->fEntityScanner->reset->fEntities->clear->fEntityStack->removeAllElements
XMLEntityManager#reset(XMLComponentManager):::Resets the component:::parser_settings->componentManager->getFeature->if->reset->if->fEntityScanner->reset->if->fEntityStorage->reset->return->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->fSecurityManager->getIndex->spm->componentManager->getProperty->if->new->XMLSecurityPropertyManager->spm->getValue->componentManager->getFeature->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->reset->fEntityScanner->reset->fEntityStorage->reset
XMLEntityManager#reset()::: entity manager reset:::new->XMLLimitAnalyzer->fEntities->clear->fEntityStack->removeAllElements->if->fXML10EntityScanner->reset->if->fXML11EntityScanner->reset->if->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->addInternalEntity->try->addExternalEntity->addExternalEntity->addExternalEntity->addExternalEntity->catch->finally
XMLEntityManager#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLEntityManager#setFeature(String, boolean):::Sets the state of a feature:::if->featureId->startsWith->suffixLength->featureId->length->length->if->length->featureId->endsWith->if->length->featureId->endsWith->return->else->if->featureId->equals
XMLEntityManager#setProperty(String, Object):::Sets the value of a property:::if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->return->if->length->propertyId->endsWith->return->if->length->propertyId->endsWith->return->if->length->propertyId->endsWith->bufferSize->if->bufferSize->intValue->bufferSize->intValue->fEntityScanner->setBufferSize->if->length->propertyId->endsWith->if->propertyId->equals->spm->spm->getValue->return->if->propertyId->equals->else->if->propertyId->equals->else->if->propertyId->equals->else->if->propertyId->equals
XMLEntityManager#setLimitAnalyzer(XMLLimitAnalyzer)::: entity manager set limit analyzer:::
XMLEntityManager#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLEntityManager#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLEntityManager#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLEntityManager#expandSystemId(String):::Expands a system id and returns the system id as a URI, if it can be expanded:::return->expandSystemId
XMLEntityManager#getUserDir()::: entity manager get user dir:::userDir->try->SecuritySupport->getSystemProperty->catch->finally->if->userDir->length->return->new->URI->if->userDir->equals->return->separator->userDir->replace->len->userDir->length->ch->buffer->new->StringBuilder->if->userDir->charAt->Character->userDir->charAt->toUpperCase->if->buffer->append->i->for->if->bytes->b->try->userDir->substring->getBytes->catch->return->new->URI->finally->for->if->userDir->endsWith->buffer->append->buffer->toString->new->URI->return
XMLEntityManager#createOutputStream(String)::: entity manager create output stream:::expanded->XMLEntityManager->expandSystemId->url->new->URL->out->protocol->url->getProtocol->host->url->getHost->if->protocol->equals->host->length->host->equals->file->url->getPath->getPathWithoutEscapes->new->File->if->file->exists->parent->file->getParentFile->if->parent->exists->parent->mkdirs->new->FileOutputStream->else->urlCon->url->openConnection->urlCon->setDoInput->urlCon->setDoOutput->urlCon->setUseCaches->if->httpCon->httpCon->setRequestMethod->urlCon->getOutputStream->return
XMLEntityManager#getPathWithoutEscapes(String)::: entity manager get path without escapes:::if->origPath->length->origPath->indexOf->tokenizer->new->StringTokenizer->result->origPath->length->new->StringBuilder->size->tokenizer->countTokens->result->tokenizer->nextToken->append->for->i->return->result->toString->return
XMLEntityManager#absolutizeAgainstUserDir(URI):::Absolutizes a URI using the current value of the "user.dir" property as the base URI:::uri->getUserDir->absolutize
XMLEntityManager#expandSystemId(String, String):::Expands a system id and returns the system id as a URI, if it can be expanded:::if->systemId->length->return->try->uri->new->URI->if->return->catch->finally->id->fixURI->base->uri->try->if->baseSystemId->length->baseSystemId->equals->dir->getUserDir->toString->new->URI->else->try->fixURI->new->URI->catch->if->baseSystemId->indexOf->fixURI->new->URI->else->dir->getUserDir->toString->fixURI->new->URI->finally->new->URI->catch->finally->if->return->return->uri->toString
XMLEntityManager#expandSystemId(String, String, boolean):::Expands a system id and returns the system id as a URI, if it can be expanded:::if->return->if->try->new->URI->return->catch->finally->base->if->baseSystemId->length->getUserDir->toString->new->URI->else->try->new->URI->catch->dir->getUserDir->toString->new->URI->finally->uri->new->URI->return->uri->toString->try->return->expandSystemIdStrictOff->catch->try->return->expandSystemIdStrictOff1->catch->finally->finally->if->systemId->length->return->id->fixURI->base->uri->try->if->baseSystemId->length->baseSystemId->equals->getUserDir->else->try->fixURI->trim->new->URI->catch->if->baseSystemId->indexOf->fixURI->trim->new->URI->else->getUserDir->fixURI->new->URI->finally->id->trim->new->URI->catch->finally->if->return->return->uri->toString
XMLEntityManager#expandSystemIdStrictOn(String, String):::Helper method for expandSystemId(String,String,boolean):String:::systemURI->new->URI->if->systemURI->isAbsoluteURI->return->baseURI->if->baseSystemId->length->getUserDir->else->new->URI->if->baseURI->isAbsoluteURI->baseURI->getUserDir->absolutize->systemURI->absolutize->return->systemURI->toString
XMLEntityManager#expandSystemIdStrictOff(String, String):::Helper method for expandSystemId(String,String,boolean):String:::systemURI->new->URI->if->systemURI->isAbsoluteURI->if->systemURI->getScheme->length->return->throw->new->URI.MalformedURIException->baseURI->if->baseSystemId->length->getUserDir->else->new->URI->if->baseURI->isAbsoluteURI->baseURI->getUserDir->absolutize->systemURI->absolutize->return->systemURI->toString
XMLEntityManager#expandSystemIdStrictOff1(String, String)::: entity manager expand system id strict off1:::systemURI->new->java.net.URI->if->systemURI->isAbsolute->if->systemURI->getScheme->length->return->throw->new->URISyntaxException->baseURI->if->baseSystemId->length->getUserDir->else->new->URI->if->baseURI->isAbsoluteURI->baseURI->getUserDir->absolutize->baseURI->toString->new->java.net.URI->resolve->return->systemURI->toString
XMLEntityManager#getEncodingInfo(byte[], int):::Returns the IANA encoding name that is auto-detected from the bytes specified, with the endian-ness of that encoding where appropriate.:::if->return->b0->b1->if->return->if->return->if->return->b2->if->return->if->return->b3->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
XMLEntityManager#createReader(InputStream, String, Boolean):::Creates a reader capable of reading the given input stream in the specified encoding.:::enc->enc->toUpperCase->f->fErrorReporter->getMessageFormatter->l->fErrorReporter->getLocale->switch->return->new->UTF8Reader->if->return->new->UTF16Reader->break->return->new->UTF16Reader->return->new->UTF16Reader->if->if->return->new->UCSReader->else->return->new->UCSReader->else->fErrorReporter->this->getEntityScanner->new->ObjectArr->reportError->break->if->if->return->new->UCSReader->else->return->new->UCSReader->else->fErrorReporter->this->getEntityScanner->new->ObjectArr->reportError->break->validIANA->XMLChar->isValidIANAEncoding->validJava->XMLChar->isValidJavaEncoding->if->fErrorReporter->this->getEntityScanner->new->ObjectArr->reportError->javaEncoding->EncodingMap->getIANA2JavaMapping->if->if->else->fErrorReporter->this->getEntityScanner->new->ObjectArr->reportError->if->print->if->print->println->return->new->InputStreamReader->new->BufferedReader
XMLEntityManager#getPublicId():::Return the public identifier for the current document event:::return->getPublicId
XMLEntityManager#getExpandedSystemId():::Return the expanded system identifier for the current document event:::if->if->getExpandedSystemId->return->getExpandedSystemId->else->size->fEntityStack->size->for->i->return
XMLEntityManager#getLiteralSystemId():::Return the literal system identifier for the current document event:::if->if->getLiteralSystemId->return->getLiteralSystemId->else->size->fEntityStack->size->for->i->return
XMLEntityManager#getLineNumber():::Return the line number where the current document event ends:::if->if->fCurrentEntity->isExternal->return->else->size->fEntityStack->size->for->i->return
XMLEntityManager#getColumnNumber():::Return the column number where the current document event ends:::if->if->fCurrentEntity->isExternal->return->else->size->fEntityStack->size->for->i->return
XMLEntityManager#fixURI(String):::Fixes a platform dependent filename to standard URI form.:::str->replace->if->str->length->ch1->str->charAt->if->ch0->Character->str->charAt->toUpperCase->if->else->if->str->charAt->pos->str->indexOf->if->sb->str->length->new->StringBuilder->for->i->sb->append->for->i->str->length->sb->toString->return
XMLEntityManager#print():::Prints the contents of the buffer.:::if->if->print->print->print->print->if->print->for->i->if->print->print->print->print->print->print->print->else->print
XMLEntityManager.RewindableInputStream#setStartOffset(int)::: rewindable input stream set start offset:::
XMLEntityManager.RewindableInputStream#rewind()::: rewindable input stream rewind:::
XMLEntityManager.RewindableInputStream#readAndBuffer()::: rewindable input stream read and buffer:::if->newData->new->byteArr->System->arraycopy->b->fInputStream->read->if->return->return
XMLEntityManager.RewindableInputStream#read()::: rewindable input stream read:::if->return->if->return->if->return->fInputStream->read->return->readAndBuffer
XMLEntityManager.RewindableInputStream#read(byte[], int, int)::: rewindable input stream read:::bytesLeft->if->if->return->if->if->return->fInputStream->read->returnedVal->readAndBuffer->if->return->return->if->if->return->else->if->System->arraycopy->return
XMLEntityManager.RewindableInputStream#skip(long)::: rewindable input stream skip:::bytesLeft->if->return->if->if->return->return->fInputStream->skip->if->return->if->return->return->fInputStream->skip
XMLEntityManager.RewindableInputStream#available()::: rewindable input stream available:::bytesLeft->if->if->return->return->fInputStream->available->return
XMLEntityManager.RewindableInputStream#mark(int)::: rewindable input stream mark:::
XMLEntityManager.RewindableInputStream#reset()::: rewindable input stream reset:::
XMLEntityManager.RewindableInputStream#markSupported()::: rewindable input stream mark supported:::return
XMLEntityManager.RewindableInputStream#close()::: rewindable input stream close:::if->fInputStream->close
XMLEntityManager#test()::: entity manager test:::fEntityStorage->addExternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity->fEntityStorage->addInternalEntity
XMLEntityScanner#setBufferSize(int)::: entity scanner set buffer size:::
XMLEntityScanner#reset(PropertyManager):::Resets the components.:::propertyManager->getProperty->propertyManager->getProperty->resetCommon
XMLEntityScanner#reset(XMLComponentManager):::Resets the component:::componentManager->getFeature->componentManager->getProperty->componentManager->getProperty->resetCommon
XMLEntityScanner#reset(SymbolTable, XMLEntityManager, XMLErrorReporter)::: entity scanner reset:::
XMLEntityScanner#resetCommon()::: entity scanner reset common:::listeners->clear
XMLEntityScanner#getXMLVersion():::Returns the XML version of the current entity:::if->return->return
XMLEntityScanner#setXMLVersion(String):::Sets the XML version:::
XMLEntityScanner#setCurrentEntity(Entity.ScannedEntity)::: entity scanner set current entity:::if->fCurrentEntity->isExternal->if->println
XMLEntityScanner#getCurrentEntity()::: entity scanner get current entity:::return
XMLEntityScanner#getBaseSystemId():::Returns the base system identifier of the currently scanned entity, or null if none is available.:::return->getExpandedSystemId
XMLEntityScanner#setBaseSystemId(String)::: entity scanner set base system id:::
XMLEntityScanner#getLineNumber()::: entity scanner get line number:::return
XMLEntityScanner#setLineNumber(int)::: entity scanner set line number:::
XMLEntityScanner#getColumnNumber()::: entity scanner get column number:::return
XMLEntityScanner#setColumnNumber(int)::: entity scanner set column number:::
XMLEntityScanner#getCharacterOffset()::: entity scanner get character offset:::return
XMLEntityScanner#getExpandedSystemId():::Returns the expanded system identifier.:::return->getExpandedSystemId
XMLEntityScanner#setExpandedSystemId(String)::: entity scanner set expanded system id:::
XMLEntityScanner#getLiteralSystemId():::Returns the literal system identifier.:::return->getLiteralSystemId
XMLEntityScanner#setLiteralSystemId(String)::: entity scanner set literal system id:::
XMLEntityScanner#getPublicId():::Returns the public identifier.:::return->getPublicId
XMLEntityScanner#setPublicId(String)::: entity scanner set public id:::
XMLEntityScanner#setVersion(String):::the version of the current entity being scanned:::
XMLEntityScanner#getVersion()::: entity scanner get version:::if->return->return
XMLEntityScanner#getEncoding():::Returns the encoding of the current entity:::if->return->return
XMLEntityScanner#setEncoding(String):::Sets the encoding of the scanner:::if->println->if->if->equals->if->startsWith->ENCODING->encoding->toUpperCase->if->ENCODING->equals->return->if->ENCODING->equals->if->equals->new->UCSReader->else->new->UCSReader->return->if->ENCODING->equals->if->equals->new->UCSReader->else->new->UCSReader->return->if->println->createReader->else->if->println
XMLEntityScanner#isExternal():::Returns true if the current entity being scanned is external.:::return->fCurrentEntity->isExternal
XMLEntityScanner#getChar(int)::: entity scanner get char:::if->arrangeCapacity->return->else->return
XMLEntityScanner#peekChar():::Returns the next character on the input:::if->print->print->println->if->load->c->if->print->print->if->println->else->println->if->return->else->return
XMLEntityScanner#scanChar(NameType):::Returns the next character on the input:::if->print->print->println->if->load->offset->c->if->if->invokeListeners->load->if->if->if->print->print->println->if->checkEntityLimit->return
XMLEntityScanner#scanNmtoken():::Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present:::if->print->print->println->if->load->offset->vc->c->while->if->else->XMLChar->isName->if->break->if->length->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->if->load->break->length->symbol->if->fSymbolTable->addSymbol->if->print->print->String->valueOf->println->return
XMLEntityScanner#scanName(NameType):::Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present:::if->print->print->println->if->load->offset->length->if->XMLChar->isNameStart->if->invokeListeners->if->load->symbol->fSymbolTable->addSymbol->if->print->print->String->valueOf->println->return->vc->while->c->if->else->XMLChar->isName->if->break->if->checkBeforeLoad->if->load->break->symbol->if->checkLimit->checkEntityLimit->fSymbolTable->addSymbol->else->if->print->print->String->valueOf->println->return
XMLEntityScanner#scanQName(QName, NameType):::Scans a qualified name from the input, setting the fields of the QName structure appropriately:::if->print->print->println->if->load->offset->if->XMLChar->isNameStart->if->invokeListeners->if->load->name->fSymbolTable->addSymbol->qname->setValues->if->print->print->println->checkEntityLimit->return->index->vc->length->while->c->if->else->XMLChar->isName->if->break->if->if->break->checkLimit->if->checkBeforeLoad->if->if->load->break->if->prefix->localpart->rawname->fSymbolTable->addSymbol->if->prefixLength->checkLimit->fSymbolTable->addSymbol->len->checkLimit->fSymbolTable->addSymbol->else->checkLimit->qname->setValues->if->print->print->println->checkEntityLimit->return->if->print->print->println->return
XMLEntityScanner#checkBeforeLoad(Entity.ScannedEntity, int, int):::Checks whether the end of the entity buffer has been reached:::length->if->nameLength->if->else->checkLimit->invokeListeners->if->tmp->new->charArr->System->arraycopy->else->System->arraycopy->return
XMLEntityScanner#checkEntityLimit(NameType, ScannedEntity, int, int):::If the current entity is an Entity reference, check the accumulated size against the limit.:::if->return->if->checkLimit->if->checkNodeCount
XMLEntityScanner#checkNodeCount(ScannedEntity):::If the current entity is an Entity reference, counts the total nodes in the entity and checks the accumulated value against the limit.:::if->checkLimit
XMLEntityScanner#checkLimit(Limit, ScannedEntity, int, int):::Checks whether the value of the specified Limit exceeds its limit:::fLimitAnalyzer->addValue->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->e->new->ObjectArr->fLimitAnalyzer->getValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->new->ObjectArr->fLimitAnalyzer->getValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->fErrorReporter->limit->key->reportError->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->fErrorReporter->new->ObjectArr->fLimitAnalyzer->getTotalValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->reportError
XMLEntityScanner#scanContent(XMLString):::CHANGED: Scans a range of parsed character data, This function appends the character data to the supplied buffer:::if->print->print->println->if->load->else->if->invokeListeners->load->offset->c->newlines->counted->if->if->print->print->println->do->if->if->checkEntityLimit->if->load->break->if->else->else->if->if->checkEntityLimit->if->load->break->else->break->while->for->i->length->if->checkEntityLimit->content->setValues->if->print->print->println->return->if->print->print->println->while->if->XMLChar->isContent->break->length->if->checkEntityLimit->content->setValues->if->if->else->if->print->print->println->return
XMLEntityScanner#scanLiteral(int, XMLString, boolean):::Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately:::if->print->print->println->if->load->else->if->invokeListeners->load->offset->c->newlines->if->if->if->print->print->println->do->if->if->if->load->break->if->else->else->if->if->if->load->break->else->break->while->i->for->length->if->content->setValues->if->print->print->println->return->if->print->print->println->for->length->checkEntityLimit->if->checkLimit->content->setValues->if->if->else->if->print->print->println->return
XMLEntityScanner#storeWhiteSpace(int):::Save whitespace information:::if->tmp->new->intArr->System->arraycopy
XMLEntityScanner#scanData(String, XMLStringBuffer, int):::Scans a range of character data up to the specified delimiter, setting the fields of the XMLString structure, appropriately:::done->delimLen->delimiter->length->charAt0->delimiter->charAt->do->if->print->print->println->if->load->bNextEntity->while->System->arraycopy->load->if->length->checkEntityLimit->buffer->append->load->return->offset->c->newlines->if->if->print->print->println->do->if->if->if->load->break->if->else->else->if->if->if->load->break->else->break->while->for->i->length->if->checkEntityLimit->buffer->append->if->print->print->println->return->if->print->print->println->while->if->delimOffset->for->i->if->break->else->if->break->else->if->XMLChar->isInvalid->length->checkEntityLimit->buffer->append->return->if->break->length->checkEntityLimit->if->buffer->append->if->print->print->println->if->break->while->return
XMLEntityScanner#skipChar(int, NameType):::Skips a character appearing immediately on the input:::if->print->print->println->if->load->offset->cc->if->if->else->if->print->print->println->checkEntityLimit->return->else->if->if->invokeListeners->load->if->if->print->print->println->checkEntityLimit->return->if->print->print->println->return
XMLEntityScanner#isSpace(char)::: entity scanner is space:::return
XMLEntityScanner#skipSpaces():::Skips space characters appearing immediately on the input:::if->print->print->println->if->load->if->return->c->offset->if->XMLChar->isSpace->do->entityChanged->if->if->invokeListeners->load->if->else->if->return->if->if->else->checkEntityLimit->if->if->load->if->return->while->XMLChar->isSpace->if->print->print->println->return->if->print->print->println->return
XMLEntityScanner#arrangeCapacity(int)::: entity scanner arrange capacity:::return->arrangeCapacity
XMLEntityScanner#arrangeCapacity(int, boolean)::: entity scanner arrange capacity:::if->return->if->println->println->println->entityChanged->while->if->invokeListeners->System->arraycopy->if->pos->invokeListeners->load->if->break->if->println->println->println->if->return->else->return
XMLEntityScanner#skipString(String):::Skips the specified string appearing immediately on the input:::length->s->length->if->arrangeCapacity->beforeSkip->afterSkip->if->println->new->String->println->i->while->s->charAt->if->if->checkEntityLimit->return->return
XMLEntityScanner#skipString(char[])::: entity scanner skip string:::length->if->arrangeCapacity->beforeSkip->if->new->String->println->new->String->println->for->i->if->checkEntityLimit->return->return
XMLEntityScanner#load(int, boolean, boolean):::Loads a chunk of text.:::if->print->print->println->if->invokeListeners->length->if->if->println->count->read->if->println->entityChanged->if->if->else->if->fEntityManager->endEntity->if->throw->if->load->if->print->print->println->return
XMLEntityScanner#createReader(InputStream, String, Boolean):::Creates a reader capable of reading the given input stream in the specified encoding.:::if->ENCODING->encoding->toUpperCase->if->ENCODING->equals->if->println->return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->UTF8Reader->if->ENCODING->equals->if->println->return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->ASCIIReader->if->ENCODING->equals->if->isBE->isBigEndian->booleanValue->if->return->new->UCSReader->else->return->new->UCSReader->else->fErrorReporter->new->ObjectArr->reportError->if->ENCODING->equals->if->isBE->isBigEndian->booleanValue->if->return->new->UCSReader->else->return->new->UCSReader->else->fErrorReporter->new->ObjectArr->reportError->validIANA->XMLChar->isValidIANAEncoding->validJava->XMLChar->isValidJavaEncoding->if->fErrorReporter->new->ObjectArr->reportError->javaEncoding->EncodingMap->getIANA2JavaMapping->if->if->else->fErrorReporter->new->ObjectArr->reportError->else->if->javaEncoding->equals->if->println->return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->ASCIIReader->if->print->if->print->println->return->new->InputStreamReader
XMLEntityScanner#getEncodingName(byte[], int):::Returns the IANA encoding name that is auto-detected from the bytes specified, with the endian-ness of that encoding where appropriate.:::if->return->new->ObjectArr->b0->b1->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->b2->if->return->new->ObjectArr->if->return->new->ObjectArr->b3->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->if->return->new->ObjectArr->return->new->ObjectArr
XMLEntityScanner#print():::Prints the contents of the buffer.:::if->if->print->print->print->print->if->print->for->i->if->print->print->print->print->print->print->print->else->print
XMLEntityScanner#registerListener(XMLBufferListener):::Registers the listener object and provides callback.:::if->listeners->contains->listeners->add
XMLEntityScanner#invokeListeners(int)::: entity scanner invoke listeners:::for->i->listeners->size
XMLEntityScanner#skipDeclSpaces():::Skips space characters appearing immediately on the input that would match non-terminal S (0x09, 0x0A, 0x0D, 0x20) before end of line normalization is performed:::if->print->println->if->load->c->if->XMLChar->isSpace->external->fCurrentEntity->isExternal->do->entityChanged->if->if->load->if->if->if->else->if->if->load->while->XMLChar->isSpace->if->print->println->return->if->print->println->return
XMLErrorReporter#setLocale(Locale):::Sets the current locale.:::
XMLErrorReporter#getLocale():::Gets the current locale.:::return
XMLErrorReporter#setDocumentLocator(XMLLocator):::Sets the document locator.:::
XMLErrorReporter#putMessageFormatter(String, MessageFormatter):::Registers a message formatter for the specified domain:::fMessageFormatters->put
XMLErrorReporter#getMessageFormatter(String):::Returns the message formatter associated with the specified domain, or null if no message formatter is registered for that domain.:::return->fMessageFormatters->get
XMLErrorReporter#removeMessageFormatter(String):::Removes the message formatter for the specified domain and returns the removed message formatter.:::return->fMessageFormatters->remove
XMLErrorReporter#reportError(String, String, Object[], short):::Reports an error:::return->reportError
XMLErrorReporter#reportError(String, String, Object[], short, Exception):::Reports an error:::return->reportError
XMLErrorReporter#reportError(XMLLocator, String, String, Object[], short):::Reports an error at a specific location.:::return->reportError
XMLErrorReporter#reportError(XMLLocator, String, String, Object[], short, Exception):::Reports an error at a specific location.:::messageFormatter->getMessageFormatter->message->if->messageFormatter->formatMessage->else->str->new->StringBuffer->str->append->str->append->str->append->argCount->if->str->append->for->i->str->toString->parseException->new->XMLParseException->new->XMLParseException->errorHandler->if->if->new->DefaultErrorHandler->switch->errorHandler->warning->break->errorHandler->error->break->errorHandler->fatalError->if->throw->break->return
XMLErrorReporter#reset(XMLComponentManager):::Resets the component:::componentManager->getFeature->componentManager->getProperty
XMLErrorReporter#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLErrorReporter#setFeature(String, boolean):::Sets the state of a feature:::if->featureId->startsWith->suffixLength->featureId->length->length->if->length->featureId->endsWith
XMLErrorReporter#getFeature(String)::: error reporter get feature:::if->featureId->startsWith->suffixLength->featureId->length->length->if->length->featureId->endsWith->return->return
XMLErrorReporter#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLErrorReporter#setProperty(String, Object):::Sets the value of a property:::if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith
XMLErrorReporter#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLErrorReporter#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLErrorReporter#getErrorHandler():::Get the internal XMLErrrorHandler.:::return
XMLErrorReporter#getSAXErrorHandler():::Gets the internal XMLErrorHandler as SAX ErrorHandler.:::if->new->ErrorHandlerProxy->return
XMLNamespaceBinder#setOnlyPassPrefixMappingEvents(boolean):::Sets whether the namespace binder only passes the prefix mapping events to the registered document handler or passes all document events.:::
XMLNamespaceBinder#getOnlyPassPrefixMappingEvents():::Returns true if the namespace binder only passes the prefix mapping events to the registered document handler; false if the namespace binder passes all document events.:::return
XMLNamespaceBinder#reset(XMLComponentManager):::Resets the component:::componentManager->getFeature->componentManager->getProperty->componentManager->getProperty
XMLNamespaceBinder#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLNamespaceBinder#setFeature(String, boolean):::Sets the state of a feature:::
XMLNamespaceBinder#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLNamespaceBinder#setProperty(String, Object):::Sets the value of a property during parsing.:::if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->else->if->length->propertyId->endsWith->return
XMLNamespaceBinder#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLNamespaceBinder#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLNamespaceBinder#setDocumentHandler(XMLDocumentHandler):::Sets the document handler to receive information about the document.:::
XMLNamespaceBinder#getDocumentHandler():::Returns the document handler:::return
XMLNamespaceBinder#setDocumentSource(XMLDocumentSource):::Sets the document source:::
XMLNamespaceBinder#getDocumentSource():::Returns the document source:::return
XMLNamespaceBinder#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::if->fDocumentHandler->startGeneralEntity
XMLNamespaceBinder#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::if->fDocumentHandler->textDecl
XMLNamespaceBinder#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::The start of the document.:::if->fDocumentHandler->startDocument
XMLNamespaceBinder#xmlDecl(String, String, String, Augmentations):::Notifies of the presence of an XMLDecl line in the document:::if->fDocumentHandler->xmlDecl
XMLNamespaceBinder#doctypeDecl(String, String, String, Augmentations):::Notifies of the presence of the DOCTYPE line in the document.:::if->fDocumentHandler->doctypeDecl
XMLNamespaceBinder#comment(XMLString, Augmentations):::A comment.:::if->fDocumentHandler->comment
XMLNamespaceBinder#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::if->fDocumentHandler->processingInstruction
XMLNamespaceBinder#startElement(QName, XMLAttributes, Augmentations):::Binds the namespaces:::if->handleStartElement->else->if->fDocumentHandler->startElement
XMLNamespaceBinder#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::if->handleStartElement->handleEndElement->else->if->fDocumentHandler->emptyElement
XMLNamespaceBinder#characters(XMLString, Augmentations):::Character content.:::if->fDocumentHandler->characters
XMLNamespaceBinder#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::if->fDocumentHandler->ignorableWhitespace
XMLNamespaceBinder#endElement(QName, Augmentations):::The end of an element.:::if->handleEndElement->else->if->fDocumentHandler->endElement
XMLNamespaceBinder#startCDATA(Augmentations):::The start of a CDATA section.:::if->fDocumentHandler->startCDATA
XMLNamespaceBinder#endCDATA(Augmentations):::The end of a CDATA section.:::if->fDocumentHandler->endCDATA
XMLNamespaceBinder#endDocument(Augmentations):::The end of the document.:::if->fDocumentHandler->endDocument
XMLNamespaceBinder#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::if->fDocumentHandler->endGeneralEntity
XMLNamespaceBinder#handleStartElement(QName, XMLAttributes, Augmentations, boolean):::Handles start element.:::fNamespaceContext->pushContext->if->fErrorReporter->new->ObjectArr->reportError->length->attributes->getLength->for->i->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->for->i->attrCount->attributes->getLength->for->i->if->if->fDocumentHandler->emptyElement->else->fDocumentHandler->startElement
XMLNamespaceBinder#handleEndElement(QName, Augmentations, boolean):::Handles end element.:::eprefix->fNamespaceContext->getURI->if->if->if->fDocumentHandler->endElement->fNamespaceContext->popContext
XMLNamespaceBinder#prefixBoundToNullURI(String, String)::: namespace binder prefix bound to null i:::return
XMLNSDocumentScannerImpl#reset(PropertyManager):::Resets the fields of this scanner.:::setPropertyManager->super->reset->propertyManager->getProperty->booleanValue
XMLNSDocumentScannerImpl#reset(XMLComponentManager)::: document scanner impl reset:::super->reset
XMLNSDocumentScannerImpl#next()::: document scanner impl next:::if->fNamespaceContext->popContext->return->super->next
XMLNSDocumentScannerImpl#setDTDValidator(XMLDTDValidatorFilter):::The scanner is responsible for removing DTD validator from the pipeline if it is not needed.:::
XMLNSDocumentScannerImpl#scanStartElement():::Scans a start element:::if->this->getClass->toString->println->if->name->fElementStack->getNext->if->println->fEntityScanner->skipString->if->if->println->fElementStack->push->else->fElementStack->reposition->if->println->if->fElementStack->nextElement->if->fEntityScanner->scanQName->else->name->fEntityScanner->scanName->fElementQName->setValues->if->fElementQName->toString->println->if->if->println->if->fElementStack->matchElement->rawname->checkDepth->if->fNamespaceContext->pushContext->if->if->fErrorReporter->new->ObjectArr->reportError->if->fDoctypeName->equals->fErrorReporter->new->ObjectArr->reportError->fAttributes->removeAllAttributes->if->seekCloseOfStartTag->do->scanAttribute->if->fSecurityManager->isNoLimit->fAttributes->getLength->fErrorReporter->new->ObjectArr->reportError->while->seekCloseOfStartTag->if->if->fErrorReporter->new->ObjectArr->reportError->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->length->fAttributes->getLength->for->i->if->name->fAttributes->checkDuplicatesNS->if->if->fErrorReporter->new->ObjectArr->reportError->else->fErrorReporter->new->ObjectArr->reportError->if->if->new->ObjectArr->reportFatalError->if->if->println->fDocumentHandler->emptyElement->fElementStack->popElement->else->if->dtdGrammarUtil->startElement->if->if->println->fDocumentHandler->startElement->if->this->getClass->toString->println->return
XMLNSDocumentScannerImpl#scanAttribute(XMLAttributesImpl):::Scans an attribute:::if->this->getClass->toString->println->fEntityScanner->scanQName->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->attrIndex->isVC->tmpStr->getString->localpart->prefix->isNSDecl->scanAttributeValue->value->if->if->if->fErrorReporter->new->ObjectArr->new->String->fSecurityManager->getStateLiteral->reportError->uri->fSymbolTable->addSymbol->if->fErrorReporter->new->ObjectArr->reportError->if->fErrorReporter->new->ObjectArr->reportError->if->if->fErrorReporter->new->ObjectArr->reportError->else->if->fErrorReporter->new->ObjectArr->reportError->if->if->fErrorReporter->new->ObjectArr->reportError->if->containsPrefixInCurrentContext->new->ObjectArr->reportFatalError->declared->fNamespaceContext->uri->length->declarePrefix->if->if->new->ObjectArr->reportFatalError->if->return->if->attributes->getLength->attributes->addAttributeNS->else->oldLen->attributes->getLength->attributes->addAttribute->if->attributes->getLength->new->ObjectArr->reportFatalError->attributes->setValue->attributes->setSpecified->if->attributes->fNamespaceContext->getURI->setURI->if->this->getClass->toString->println
XMLNSDocumentScannerImpl#createContentDriver():::Creates a content driver.:::return->new->NSContentDriver
XMLNSDocumentScannerImpl.NSContentDriver#scanRootElementHook():::Scan for root element hook:::reconfigurePipeline->if->scanStartElement->setScannerState->setDriver->return->return
XMLNSDocumentScannerImpl.NSContentDriver#reconfigurePipeline():::Re-configures pipeline by removing the DTD validator if no DTD grammar exists:::if->else->if->fDTDValidator->hasGrammar->fDTDValidator->validate->source->fDTDValidator->getDocumentSource->handler->fDTDValidator->getDocumentHandler->source->setDocumentHandler->if->handler->setDocumentSource->fDTDValidator->setDocumentSource->fDTDValidator->setDocumentHandler
XMLScanner#reset(XMLComponentManager)::: scanner reset:::componentManager->getFeature->if->init->return->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->fEntityManager->getEntityStore->componentManager->getFeature->componentManager->getFeature->componentManager->getFeature->init
XMLScanner#setPropertyManager(PropertyManager)::: scanner set property manager:::
XMLScanner#setProperty(String, Object):::Sets the value of a property during parsing.:::if->propertyId->startsWith->property->propertyId->length->substring->if->property->equals->else->if->property->equals->else->if->property->equals->if->propertyId->equals
XMLScanner#setFeature(String, boolean)::: scanner set feature:::if->VALIDATION->equals->else->if->NOTIFY_CHAR_REFS->equals
XMLScanner#getFeature(String)::: scanner get feature:::if->VALIDATION->equals->return->else->if->NOTIFY_CHAR_REFS->equals->return->throw->new->XMLConfigurationException
XMLScanner#reset()::: scanner reset:::init
XMLScanner#reset(PropertyManager)::: scanner reset:::init->propertyManager->getProperty->propertyManager->getProperty->propertyManager->getProperty->fEntityManager->getEntityStore->fEntityManager->getEntityScanner->propertyManager->getProperty
XMLScanner#scanXMLDeclOrTextDecl(boolean, String[]):::Scans an XML or text declaration:::version->encoding->standalone->STATE_VERSION->STATE_ENCODING->STATE_STANDALONE->STATE_DONE->state->dataFoundForTarget->sawSpace->fEntityScanner->skipSpaces->currEnt->fEntityManager->getCurrentEntity->currLiteral->while->fEntityScanner->peekChar->name->scanPseudoAttribute->switch->if->name->equals->if->reportFatalError->fString->toString->if->versionSupported->new->ObjectArr->reportFatalError->if->version->equals->top->fEntityManager->getTopLevelEntity->if->equals->reportFatalError->fEntityManager->setScannerVersion->else->if->name->equals->if->reportFatalError->if->reportFatalError->fString->toString->else->if->reportFatalError->else->reportFatalError->break->if->name->equals->if->reportFatalError->fString->toString->else->if->name->equals->if->reportFatalError->fString->toString->if->standalone->equals->standalone->equals->new->ObjectArr->reportFatalError->else->reportFatalError->break->if->name->equals->if->reportFatalError->fString->toString->if->standalone->equals->standalone->equals->new->ObjectArr->reportFatalError->else->reportFatalError->break->reportFatalError->fEntityScanner->skipSpaces->if->if->reportFatalError->if->if->reportFatalError->else->if->reportFatalError->if->fEntityScanner->skipChar->reportFatalError->if->fEntityScanner->skipChar->reportFatalError
XMLScanner#scanPseudoAttribute(boolean, XMLString):::Scans a pseudo attribute.:::name->scanPseudoAttributeName->if->reportFatalError->fEntityScanner->skipSpaces->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->fEntityScanner->skipSpaces->quote->fEntityScanner->peekChar->if->new->ObjectArr->reportFatalError->fEntityScanner->scanChar->c->fEntityScanner->scanLiteral->if->fStringBuffer2->clear->do->fStringBuffer2->append->if->if->fStringBuffer2->fEntityScanner->scanChar->append->else->if->XMLChar->isHighSurrogate->scanSurrogates->else->if->isInvalidLiteral->key->new->ObjectArr->Integer->toString->reportFatalError->fEntityScanner->scanChar->fEntityScanner->scanLiteral->while->fStringBuffer2->append->value->setValues->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->return
XMLScanner#scanPseudoAttributeName():::Scans the name of a pseudo attribute:::ch->fEntityScanner->peekChar->switch->if->fEntityScanner->skipString->return->break->if->fEntityScanner->skipString->return->break->if->fEntityScanner->skipString->return->break->return
XMLScanner#scanPI(XMLStringBuffer)::: scanner scan i:::target->fEntityScanner->scanName->if->reportFatalError->scanPIData
XMLScanner#scanPIData(String, XMLStringBuffer)::: scanner scan data:::if->target->length->c0->Character->target->charAt->toLowerCase->c1->Character->target->charAt->toLowerCase->c2->Character->target->charAt->toLowerCase->if->reportFatalError->if->fEntityScanner->skipSpaces->if->fEntityScanner->skipString->return->else->reportFatalError->if->fEntityScanner->scanData->do->c->fEntityScanner->peekChar->if->if->XMLChar->isHighSurrogate->scanSurrogates->else->if->isInvalidLiteral->new->ObjectArr->Integer->toHexString->reportFatalError->fEntityScanner->scanChar->while->fEntityScanner->scanData
XMLScanner#scanComment(XMLStringBuffer):::Scans a comment:::text->clear->while->fEntityScanner->scanData->c->fEntityScanner->peekChar->if->if->XMLChar->isHighSurrogate->scanSurrogates->else->if->isInvalidLiteral->new->ObjectArr->Integer->toHexString->reportFatalError->fEntityScanner->scanChar->if->fEntityScanner->skipChar->reportFatalError
XMLScanner#scanAttributeValue(XMLString, XMLString, String, XMLAttributes, int, boolean, String, boolean):::Scans an attribute value and normalizes whitespace converting all whitespace characters to space characters:::stringBuffer->quote->fEntityScanner->peekChar->if->new->ObjectArr->reportFatalError->fEntityScanner->scanChar->entityDepth->c->fEntityScanner->scanLiteral->if->value->toString->println->if->fStringBuffer2->clear->fStringBuffer2->append->if->normalizeWhitespace->if->value->toString->println->if->getStringBuffer->stringBuffer->clear->do->stringBuffer->append->if->stringBuffer->toString->println->if->fEntityScanner->skipChar->if->fStringBuffer2->append->if->fEntityScanner->skipChar->if->fStringBuffer2->append->ch->if->scanCharReferenceValue->else->scanCharReferenceValue->if->if->stringBuffer->toString->println->else->entityName->fEntityScanner->scanName->if->reportFatalError->else->if->fStringBuffer2->append->if->fEntityScanner->skipChar->new->ObjectArr->reportFatalError->else->if->fStringBuffer2->append->if->resolveCharacter->checkEntityLimit->else->if->fEntityStore->isExternalEntity->new->ObjectArr->reportFatalError->else->if->fEntityStore->isDeclaredEntity->if->if->fErrorReporter->new->ObjectArr->reportError->else->new->ObjectArr->reportFatalError->fEntityManager->startEntity->else->if->new->ObjectArr->reportFatalError->fEntityScanner->scanChar->if->fStringBuffer2->append->else->if->fEntityScanner->scanChar->stringBuffer->append->if->fStringBuffer2->append->if->stringBuffer->toString->println->else->if->fEntityScanner->scanChar->stringBuffer->append->if->fStringBuffer2->append->else->if->XMLChar->isHighSurrogate->fStringBuffer3->clear->if->scanSurrogates->stringBuffer->append->if->fStringBuffer2->append->if->stringBuffer->toString->println->else->if->isInvalidLiteral->new->ObjectArr->Integer->toString->reportFatalError->fEntityScanner->scanChar->if->fStringBuffer2->append->fEntityScanner->scanLiteral->if->fStringBuffer2->append->if->normalizeWhitespace->while->stringBuffer->append->if->stringBuffer->toString->println->value->setValues->if->nonNormalizedValue->setValues->cquote->fEntityScanner->scanChar->if->new->ObjectArr->reportFatalError
XMLScanner#resolveCharacter(String, XMLStringBuffer):::Resolves character entity references.:::if->stringBuffer->append->return->else->if->stringBuffer->append->return->else->if->stringBuffer->append->return->else->if->checkEntityLimit->stringBuffer->append->return->else->if->checkEntityLimit->stringBuffer->append->return->return
XMLScanner#scanExternalID(String[], boolean):::Scans External ID and return the public and system IDs.:::systemId->publicId->if->fEntityScanner->skipString->if->fEntityScanner->skipSpaces->reportFatalError->scanPubidLiteral->fString->toString->if->fEntityScanner->skipSpaces->reportFatalError->if->fEntityScanner->skipString->if->fEntityScanner->skipSpaces->reportFatalError->quote->fEntityScanner->peekChar->if->if->return->reportFatalError->fEntityScanner->scanChar->ident->if->fEntityScanner->scanLiteral->fStringBuffer->clear->do->fStringBuffer->append->c->fEntityScanner->peekChar->if->XMLChar->isMarkup->fStringBuffer->fEntityScanner->scanChar->append->else->if->isInvalidLiteral->new->ObjectArr->Integer->toString->reportFatalError->while->fEntityScanner->scanLiteral->fStringBuffer->append->ident->toString->if->fEntityScanner->skipChar->reportFatalError
XMLScanner#scanPubidLiteral(XMLString):::Scans public ID literal:::quote->fEntityScanner->scanChar->if->reportFatalError->return->fStringBuffer->clear->skipSpace->dataok->while->c->fEntityScanner->scanChar->if->if->fStringBuffer->append->else->if->if->literal->setValues->break->else->if->XMLChar->isPubid->fStringBuffer->append->else->if->reportFatalError->return->else->new->ObjectArr->Integer->toHexString->reportFatalError->return
XMLScanner#normalizeWhitespace(XMLString):::Normalize whitespace in an XMLString converting all whitespace characters to space characters.:::i->j->buff->buffLen->end->while->if
XMLScanner#startEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::fEntityManager->getEntityScanner->fEntityManager->getEntityStore
XMLScanner#endEntity(String, Augmentations):::This method notifies the end of an entity:::
XMLScanner#scanCharReferenceValue(XMLStringBuffer, XMLStringBuffer):::Scans a character reference and append the corresponding chars to the specified buffer:::initLen->hex->if->fEntityScanner->skipChar->if->buf2->append->fStringBuffer3->clear->digit->c->fEntityScanner->peekChar->if->if->buf2->append->fEntityScanner->scanChar->fStringBuffer3->append->do->fEntityScanner->peekChar->if->if->buf2->append->fEntityScanner->scanChar->fStringBuffer3->append->while->else->reportFatalError->else->fStringBuffer3->clear->digit->c->fEntityScanner->peekChar->if->if->buf2->append->fEntityScanner->scanChar->fStringBuffer3->append->do->fEntityScanner->peekChar->if->if->buf2->append->fEntityScanner->scanChar->fStringBuffer3->append->while->else->reportFatalError->if->fEntityScanner->skipChar->reportFatalError->if->buf2->append->value->try->Integer->fStringBuffer3->toString->parseInt->if->isInvalid->errorBuf->new->StringBuffer->if->errorBuf->append->errorBuf->append->new->ObjectArr->errorBuf->toString->reportFatalError->catch->errorBuf->new->StringBuffer->if->errorBuf->append->errorBuf->append->new->ObjectArr->errorBuf->toString->reportFatalError->finally->if->XMLChar->isSupplemental->buf->append->else->buf->XMLChar->highSurrogate->append->buf->XMLChar->lowSurrogate->append->if->literal->fStringBuffer3->toString->if->if->checkEntityLimit->return
XMLScanner#isInvalid(int)::: scanner is invalid:::return->XMLChar->isInvalid
XMLScanner#isInvalidLiteral(int)::: scanner is invalid literal:::return->XMLChar->isInvalid
XMLScanner#isValidNameChar(int)::: scanner is valid name char:::return->XMLChar->isName
XMLScanner#isValidNCName(int)::: scanner is valid name:::return->XMLChar->isNCName
XMLScanner#isValidNameStartChar(int)::: scanner is valid name start char:::return->XMLChar->isNameStart
XMLScanner#isValidNameStartHighSurrogate(int)::: scanner is valid name start high surrogate:::return
XMLScanner#versionSupported(String)::: scanner version supported:::return->version->equals->version->equals
XMLScanner#scanSurrogates(XMLStringBuffer):::Scans surrogates and append them to the specified buffer:::high->fEntityScanner->scanChar->low->fEntityScanner->peekChar->if->XMLChar->isLowSurrogate->new->ObjectArr->Integer->toString->reportFatalError->return->fEntityScanner->scanChar->c->XMLChar->supplemental->if->isInvalid->new->ObjectArr->Integer->toString->reportFatalError->return->buf->append->buf->append->return
XMLScanner#reportFatalError(String, Object[]):::Convenience function used in all XML scanners.:::fErrorReporter->reportError
XMLScanner#init()::: scanner init:::fResourceIdentifier->clear->if->for->i
XMLScanner#getStringBuffer()::: scanner get string buffer:::if->stringBufferCache->size->return->stringBufferCache->get->else->tmpObj->new->XMLStringBuffer->stringBufferCache->add->return
XMLScanner#checkEntityLimit(boolean, String, XMLString):::Add the count of the content buffer and check if the accumulated value exceeds the limit:::checkEntityLimit
XMLScanner#checkEntityLimit(boolean, String, int):::Add the count and check limit:::if->if->fLimitAnalyzer->addValue->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->new->ObjectArr->fLimitAnalyzer->getValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->reportFatalError->else->fLimitAnalyzer->addValue->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->new->ObjectArr->fLimitAnalyzer->getValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->reportFatalError->if->fSecurityManager->isOverLimit->fSecurityManager->debugPrint->new->ObjectArr->fLimitAnalyzer->getTotalValue->fSecurityManager->getLimit->fSecurityManager->getStateLiteral->reportFatalError
XMLStreamFilterImpl#setStreamFilter(StreamFilter)::: stream filter impl set stream filter:::
XMLStreamFilterImpl#next()::: stream filter impl next:::if->return->event->findNextEvent->if->return->throw->new->IllegalStateException
XMLStreamFilterImpl#nextTag()::: stream filter impl next tag:::if->return->event->findNextTag->if->return->throw->new->IllegalStateException
XMLStreamFilterImpl#hasNext()::: stream filter impl has next:::if->fStreamReader->hasNext->if->if->findNextEvent->return->else->return->return
XMLStreamFilterImpl#findNextEvent()::: stream filter impl find next event:::while->fStreamReader->hasNext->fStreamReader->next->if->fStreamFilter->accept->return->if->return->else->return
XMLStreamFilterImpl#findNextTag()::: stream filter impl find next tag:::while->fStreamReader->hasNext->fStreamReader->nextTag->if->fStreamFilter->accept->return->if->return->else->return
XMLStreamFilterImpl#close()::: stream filter impl close:::fStreamReader->close
XMLStreamFilterImpl#getAttributeCount()::: stream filter impl get attribute count:::return->fStreamReader->getAttributeCount
XMLStreamFilterImpl#getAttributeName(int)::: stream filter impl get attribute name:::return->fStreamReader->getAttributeName
XMLStreamFilterImpl#getAttributeNamespace(int)::: stream filter impl get attribute namespace:::return->fStreamReader->getAttributeNamespace
XMLStreamFilterImpl#getAttributePrefix(int)::: stream filter impl get attribute prefix:::return->fStreamReader->getAttributePrefix
XMLStreamFilterImpl#getAttributeType(int)::: stream filter impl get attribute type:::return->fStreamReader->getAttributeType
XMLStreamFilterImpl#getAttributeValue(int)::: stream filter impl get attribute value:::return->fStreamReader->getAttributeValue
XMLStreamFilterImpl#getAttributeValue(String, String)::: stream filter impl get attribute value:::return->fStreamReader->getAttributeValue
XMLStreamFilterImpl#getCharacterEncodingScheme()::: stream filter impl get character encoding scheme:::return->fStreamReader->getCharacterEncodingScheme
XMLStreamFilterImpl#getElementText()::: stream filter impl get element text:::return->fStreamReader->getElementText
XMLStreamFilterImpl#getEncoding()::: stream filter impl get encoding:::return->fStreamReader->getEncoding
XMLStreamFilterImpl#getEventType()::: stream filter impl get event type:::return->fStreamReader->getEventType
XMLStreamFilterImpl#getLocalName()::: stream filter impl get local name:::return->fStreamReader->getLocalName
XMLStreamFilterImpl#getLocation()::: stream filter impl get location:::return->fStreamReader->getLocation
XMLStreamFilterImpl#getName()::: stream filter impl get name:::return->fStreamReader->getName
XMLStreamFilterImpl#getNamespaceContext()::: stream filter impl get namespace context:::return->fStreamReader->getNamespaceContext
XMLStreamFilterImpl#getNamespaceCount()::: stream filter impl get namespace count:::return->fStreamReader->getNamespaceCount
XMLStreamFilterImpl#getNamespacePrefix(int)::: stream filter impl get namespace prefix:::return->fStreamReader->getNamespacePrefix
XMLStreamFilterImpl#getNamespaceURI()::: stream filter impl get namespace i:::return->fStreamReader->getNamespaceURI
XMLStreamFilterImpl#getNamespaceURI(int)::: stream filter impl get namespace i:::return->fStreamReader->getNamespaceURI
XMLStreamFilterImpl#getNamespaceURI(String)::: stream filter impl get namespace i:::return->fStreamReader->getNamespaceURI
XMLStreamFilterImpl#getPIData()::: stream filter impl get data:::return->fStreamReader->getPIData
XMLStreamFilterImpl#getPITarget()::: stream filter impl get target:::return->fStreamReader->getPITarget
XMLStreamFilterImpl#getPrefix()::: stream filter impl get prefix:::return->fStreamReader->getPrefix
XMLStreamFilterImpl#getProperty(java.lang.String)::: stream filter impl get property:::return->fStreamReader->getProperty
XMLStreamFilterImpl#getText()::: stream filter impl get text:::return->fStreamReader->getText
XMLStreamFilterImpl#getTextCharacters()::: stream filter impl get text characters:::return->fStreamReader->getTextCharacters
XMLStreamFilterImpl#getTextCharacters(int, char[], int, int)::: stream filter impl get text characters:::return->fStreamReader->getTextCharacters
XMLStreamFilterImpl#getTextLength()::: stream filter impl get text length:::return->fStreamReader->getTextLength
XMLStreamFilterImpl#getTextStart()::: stream filter impl get text start:::return->fStreamReader->getTextStart
XMLStreamFilterImpl#getVersion()::: stream filter impl get version:::return->fStreamReader->getVersion
XMLStreamFilterImpl#hasName()::: stream filter impl has name:::return->fStreamReader->hasName
XMLStreamFilterImpl#hasText()::: stream filter impl has text:::return->fStreamReader->hasText
XMLStreamFilterImpl#isAttributeSpecified(int)::: stream filter impl is attribute specified:::return->fStreamReader->isAttributeSpecified
XMLStreamFilterImpl#isCharacters()::: stream filter impl is characters:::return->fStreamReader->isCharacters
XMLStreamFilterImpl#isEndElement()::: stream filter impl is end element:::return->fStreamReader->isEndElement
XMLStreamFilterImpl#isStandalone()::: stream filter impl is standalone:::return->fStreamReader->isStandalone
XMLStreamFilterImpl#isStartElement()::: stream filter impl is start element:::return->fStreamReader->isStartElement
XMLStreamFilterImpl#isWhiteSpace()::: stream filter impl is white space:::return->fStreamReader->isWhiteSpace
XMLStreamFilterImpl#require(int, String, String)::: stream filter impl require:::fStreamReader->require
XMLStreamFilterImpl#standaloneSet()::: stream filter impl standalone set:::return->fStreamReader->standaloneSet
XMLStreamFilterImpl#getAttributeLocalName(int)::: stream filter impl get attribute local name:::return->fStreamReader->getAttributeLocalName
XMLStreamReaderImpl#getScanner()::: stream reader impl get scanner:::println->return
XMLStreamReaderImpl#setInputSource(XMLInputSource)::: stream reader impl set input source:::try->fScanner->setInputSource->if->fScanner->next->if->getVersion->if->versionStr->equals->switchToXML11Scanner->catch->throw->new->XMLStreamException->throw->ex->getMessage->getLocation->ex->getException->new->XMLStreamException->finally
XMLStreamReaderImpl#init(PropertyManager)::: stream reader impl init:::propertyManager->setProperty->propertyManager->setProperty->propertyManager->setProperty->reset
XMLStreamReaderImpl#canReuse():::This function tells if this instances is available for reuse:::if->println->getEventTypeString->println->return
XMLStreamReaderImpl#reset():::Resets this instance so that this instance is ready for reuse.:::fEntityManager->reset->fScanner->reset->fEntityManager->getEntityScanner->fPropertyManager->getProperty
XMLStreamReaderImpl#close():::Frees any resources associated with this Reader:::
XMLStreamReaderImpl#getCharacterEncodingScheme():::Returns the character encoding declared on the xml declaration Returns null if none was declared:::return->fScanner->getCharacterEncodingScheme
XMLStreamReaderImpl#getColumnNumber()::: stream reader impl get column number:::return->fEntityScanner->getColumnNumber
XMLStreamReaderImpl#getEncoding():::Return input encoding if known or null if unknown.:::return->fEntityScanner->getEncoding
XMLStreamReaderImpl#getEventType():::Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD:::return
XMLStreamReaderImpl#getLineNumber()::: stream reader impl get line number:::return->fEntityScanner->getLineNumber
XMLStreamReaderImpl#getLocalName()::: stream reader impl get local name:::if->return->fScanner->getElementQName->else->if->return->fScanner->getEntityName->throw->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getNamespaceURI()::: stream reader impl get namespace i:::if->return->fScanner->getElementQName->return
XMLStreamReaderImpl#getPIData():::Get the data section of a processing instruction:::if->return->fScanner->getPIData->toString->else->throw->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getPITarget():::Get the target of a processing instruction:::if->return->fScanner->getPITarget->else->throw->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getPrefix()::: stream reader impl get prefix:::if->prefix->fScanner->getElementQName->return->return
XMLStreamReaderImpl#getTextCharacters()::: stream reader impl get text characters:::if->return->fScanner->getCharacterData->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getTextLength()::: stream reader impl get text length:::if->return->fScanner->getCharacterData->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getTextStart()::: stream reader impl get text start:::if->return->fScanner->getCharacterData->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getValue()::: stream reader impl get value:::if->return->fScanner->getPIData->toString->else->if->return->fScanner->getComment->else->if->return->fScanner->getElementQName->else->if->return->fScanner->getCharacterData->toString->return
XMLStreamReaderImpl#getVersion():::Get the XML language version of the current document being parsed:::version->fEntityScanner->getXMLVersion->return->equals
XMLStreamReaderImpl#hasAttributes()::: stream reader impl has attributes:::return->fScanner->getAttributeIterator->getLength
XMLStreamReaderImpl#hasName():::this Funtion returns true if the current event has name:::if->return->else->return
XMLStreamReaderImpl#hasNext()::: stream reader impl has next:::if->return->return
XMLStreamReaderImpl#hasValue()::: stream reader impl has value:::if->return->else->return
XMLStreamReaderImpl#isEndElement()::: stream reader impl is end element:::return
XMLStreamReaderImpl#isStandalone()::: stream reader impl is standalone:::return->fScanner->isStandAlone
XMLStreamReaderImpl#isStartElement()::: stream reader impl is start element:::return
XMLStreamReaderImpl#isWhiteSpace():::Returns true if the cursor points to a character data event that consists of all whitespace Application calling this method needs to cache the value and avoid calling this method again for the same event.:::if->isCharacters->ch->this->getTextCharacters->start->this->getTextStart->end->this->getTextLength->for->i->return->return
XMLStreamReaderImpl#next()::: stream reader impl next:::if->hasNext->if->throw->new->java.util.NoSuchElementException->else->throw->new->XMLStreamException->try->fScanner->next->if->getVersion->if->versionStr->equals->switchToXML11Scanner->if->fEntityScanner->checkNodeCount->return->catch->if->isValidating->fPropertyManager->getProperty->if->isValidating->booleanValue->fScanner->setScannerState->fScanner->setDriver->if->fDTDDecl->length->return->throw->ex->getMessage->getLocation->new->XMLStreamException->throw->ex->getMessage->getLocation->ex->getException->new->XMLStreamException->finally
XMLStreamReaderImpl#switchToXML11Scanner()::: stream reader impl switch to l11 scanner:::oldEntityDepth->oldNamespaceContext->new->XML11NSDocumentScannerImpl->fScanner->reset->fScanner->setPropertyManager->fEntityManager->getEntityScanner->fEntityScanner->registerListener->fScanner->setScannerState->fScanner->next
XMLStreamReaderImpl#getEventTypeString(int)::: stream reader impl get event type string:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->String->valueOf
XMLStreamReaderImpl#getAttributeCount():::Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE:::if->return->fScanner->getAttributeIterator->getLength->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeName(int):::Returns the localName of the attribute at the provided index:::if->return->fScanner->getAttributeIterator->getQualifiedName->convertXNIQNametoJavaxQName->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeLocalName(int)::: stream reader impl get attribute local name:::if->return->fScanner->getAttributeIterator->getLocalName->else->throw->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeNamespace(int):::Returns the namespace of the attribute at the provided index:::if->return->fScanner->getAttributeIterator->getURI->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributePrefix(int):::Returns the prefix of this attribute at the provided index:::if->return->fScanner->getAttributeIterator->getPrefix->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeQName(int):::Returns the qname of the attribute at the provided index:::if->localName->fScanner->getAttributeIterator->getLocalName->uri->fScanner->getAttributeIterator->getURI->return->new->javax.xml.namespace.QName->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeType(int):::Returns the XML type of the attribute at the provided index:::if->return->fScanner->getAttributeIterator->getType->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeValue(int):::Returns the value of the attribute at the index:::if->return->fScanner->getAttributeIterator->getValue->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getAttributeValue(String, String)::: stream reader impl get attribute value:::if->attributes->fScanner->getAttributeIterator->if->return->attributes->attributes->getIndexByLocalName->getValue->else->return->fScanner->getAttributeIterator->namespaceURI->length->getValue->else->throw->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getElementText():::Reads the content of a text-only element:::if->getEventType->throw->getLocation->new->XMLStreamException->eventType->next->content->new->StringBuilder->while->if->content->getText->append->else->if->else->if->throw->new->XMLStreamException->else->if->throw->getLocation->new->XMLStreamException->else->throw->getLocation->new->XMLStreamException->next->return->content->toString
XMLStreamReaderImpl#getLocation():::Return the current location of the processor:::return->new->Location
XMLStreamReaderImpl#getName():::Returns a QName for the current START_ELEMENT or END_ELEMENT event:::if->return->fScanner->getElementQName->convertXNIQNametoJavaxQName->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->new->java.lang.IllegalStateException
XMLStreamReaderImpl#getNamespaceContext():::Returns a read only namespace context for the current position:::return
XMLStreamReaderImpl#getNamespaceCount():::Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE:::if->return->fScanner->getNamespaceContext->getDeclaredPrefixCount->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getNamespacePrefix(int):::Returns the prefix for the namespace declared at the index:::if->prefix->fScanner->getNamespaceContext->getDeclaredPrefixAt->return->prefix->equals->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getNamespaceURI(int):::Returns the uri for the namespace declared at the index.:::if->return->fScanner->getNamespaceContext->fScanner->getNamespaceContext->getDeclaredPrefixAt->getURI->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::if->throw->new->java.lang.IllegalArgumentException->if->if->name->equals->return->getNotationDecls->else->if->name->equals->return->getEntityDecls->else->return->fPropertyManager->getProperty->return
XMLStreamReaderImpl#getText():::Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, or the String value of the DTD:::if->return->fScanner->getCharacterData->toString->else->if->name->fScanner->getEntityName->if->if->return->fScanner->getCharacterData->toString->entityStore->fEntityManager->getEntityStore->en->entityStore->getEntity->if->return->if->en->isExternal->return->getExpandedSystemId->else->return->else->return->else->if->if->return->tmpBuffer->fScanner->getDTDDecl->tmpBuffer->toString->return->else->throw->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#require(int, String, String):::Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event:::if->throw->getEventTypeString->getEventTypeString->new->XMLStreamException->if->namespaceURI->getNamespaceURI->equals->throw->new->XMLStreamException->if->localName->getLocalName->equals->throw->new->XMLStreamException->return
XMLStreamReaderImpl#getTextCharacters(int, char[], int, int):::Gets the the text associated with a CHARACTERS, SPACE or CDATA event:::if->throw->new->NullPointerException->if->throw->new->IndexOutOfBoundsException->copiedLength->available->getTextLength->if->throw->new->IndexOutOfBoundsException->if->else->System->getTextCharacters->getTextStart->arraycopy->return
XMLStreamReaderImpl#hasText():::Return true if the current event has text, false otherwise The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT:::if->pr->if->return->fScanner->getCharacterData->else->if->name->fScanner->getEntityName->if->if->return->entityStore->fEntityManager->getEntityStore->en->entityStore->getEntity->if->return->if->en->isExternal->return->getExpandedSystemId->else->return->else->return->else->if->return->return
XMLStreamReaderImpl#isAttributeSpecified(int):::Returns a boolean which indicates if this attribute was created by default:::if->return->fScanner->getAttributeIterator->isSpecified->else->throw->getEventTypeString->getEventTypeString->new->IllegalStateException
XMLStreamReaderImpl#isCharacters():::Returns true if the cursor points to a character data event:::return
XMLStreamReaderImpl#nextTag():::Skips any insignificant events (COMMENT and PROCESSING_INSTRUCTION) until a START_ELEMENT or END_ELEMENT is reached:::eventType->next->while->isWhiteSpace->isWhiteSpace->next->if->throw->getEventTypeString->getEventTypeString->getEventTypeString->getLocation->new->XMLStreamException->return
XMLStreamReaderImpl#standaloneSet():::Checks if standalone was set in the document:::return->fScanner->standaloneSet
XMLStreamReaderImpl#convertXNIQNametoJavaxQName(com.sun.org.apache.xerces.internal.xni.QName)::: stream reader impl convert nameto javax name:::if->return->if->return->new->javax.xml.namespace.QName->else->return->new->javax.xml.namespace.QName
XMLStreamReaderImpl#getNamespaceURI(String):::Return the uri for the given prefix:::if->throw->new->java.lang.IllegalArgumentException->return->fScanner->getNamespaceContext->fSymbolTable->addSymbol->getURI
XMLStreamReaderImpl#setPropertyManager(PropertyManager)::: stream reader impl set property manager:::fScanner->setProperty->fScanner->setPropertyManager
XMLStreamReaderImpl#getPropertyManager()::: stream reader impl get property manager:::return
XMLStreamReaderImpl#pr(String)::: stream reader impl pr:::println
XMLStreamReaderImpl#getEntityDecls()::: stream reader impl get entity decls:::if->entityStore->fEntityManager->getEntityStore->list->entities->entityStore->getEntities->if->entities->size->decl->entities->size->new->ArrayList<>->foreach->entities->entrySet->key->entry->getKey->en->entry->getValue->new->EntityDeclarationImpl->decl->setEntityName->if->en->isExternal->decl->setXMLResourceIdentifier->decl->setNotationName->else->decl->setEntityReplacementText->list->add->return->return
XMLStreamReaderImpl#getNotationDecls()::: stream reader impl get notation decls:::if->if->return->grammar->getGrammar->if->return->notations->grammar->getNotationDecls->list->new->ArrayList<>->foreach->if->list->new->NotationDeclarationImpl->add->return->return
XMLVersionDetector#reset(XMLComponentManager)::: version detector reset:::componentManager->getProperty->componentManager->getProperty->componentManager->getProperty->for->i
XMLVersionDetector#startDocumentParsing(XMLEntityHandler, short):::Reset the reference to the appropriate scanner given the version of the document and start document scanning.:::if->fEntityManager->setScannerVersion->else->fEntityManager->setScannerVersion->fErrorReporter->fEntityManager->getEntityScanner->setDocumentLocator->fEntityManager->setEntityHandler->scanner->fEntityManager->getCurrentResourceIdentifier->startEntity
XMLVersionDetector#determineDocVersion(XMLInputSource):::This methods scans the XML declaration to find out the version (and provisional encoding)  of the document:::fEntityManager->setupCurrentEntity->fEntityManager->setScannerVersion->scanner->fEntityManager->getEntityScanner->try->if->scanner->skipString->return->if->scanner->skipDeclSpaces->fixupCurrentEntity->return->if->scanner->skipString->fixupCurrentEntity->return->scanner->skipDeclSpaces->if->scanner->peekChar->fixupCurrentEntity->return->scanner->scanChar->scanner->skipDeclSpaces->quoteChar->scanner->scanChar->for->versionPos->scanner->scanChar->fixupCurrentEntity->matched->for->if->return->return->catch->fErrorReporter->e->getDomain->e->getKey->e->getArguments->reportError->return->fErrorReporter->reportError->return->fErrorReporter->reportError->return->finally
XMLVersionDetector#fixupCurrentEntity(XMLEntityManager, char[], int)::: version detector fixup current entity:::currentEntity->manager->getCurrentEntity->if->tempCh->new->charArr->System->arraycopy->if->System->arraycopy->else->for->i->System->arraycopy

FileSystemProvider#installedProviders():::Returns a list of the installed file system providers:::FileSystems.getDefault().provider->AccessController.doPrivileged->list.add->Collections.unmodifiableList
FileSystemProvider#getScheme():::Returns the URI scheme that identifies this provider.:::
FileSystemProvider#newFileSystem(URI, Map):::Constructs a new FileSystem object identified by a URI:::
FileSystemProvider#getFileSystem(URI):::Returns an existing FileSystem created by this provider:::
FileSystemProvider#getPath(URI):::Return a Path object by converting the given URI:::
FileSystemProvider#newFileSystem(Path, Map):::Constructs a new FileSystem to access the contents of a file as a file system:::
FileSystemProvider#newInputStream(Path, OpenOption...):::Opens a file, returning an input stream to read from the file:::Files.newByteChannel->((FileChannelImpl) rbc).setUninterruptible->Channels.newInputStream
FileSystemProvider#newOutputStream(Path, OpenOption...):::Opens or creates a file, returning an output stream that may be used to write bytes to the file:::opts.add->opts.add->this.newByteChannel->((FileChannelImpl) wbc).setUninterruptible->Channels.newOutputStream
FileSystemProvider#newFileChannel(Path, Set, FileAttribute...):::Opens or creates a file for reading and/or writing, returning a file channel to access the file:::
FileSystemProvider#newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file:::
FileSystemProvider#newByteChannel(Path, Set, FileAttribute...):::Opens or creates a file, returning a seekable byte channel to access the file:::
FileSystemProvider#newDirectoryStream(Path, DirectoryStream.Filter):::Opens a directory, returning a DirectoryStream to iterate over the entries in the directory:::
FileSystemProvider#createDirectory(Path, FileAttribute...):::Creates a new directory:::
FileSystemProvider#createSymbolicLink(Path, Path, FileAttribute...):::Creates a symbolic link to a target:::
FileSystemProvider#createLink(Path, Path):::Creates a new link (directory entry) for an existing file:::
FileSystemProvider#delete(Path):::Deletes a file:::
FileSystemProvider#deleteIfExists(Path):::Deletes a file if it exists:::this.delete
FileSystemProvider#readSymbolicLink(Path):::Reads the target of a symbolic link:::
FileSystemProvider#copy(Path, Path, CopyOption...):::Copy a file to a target file:::
FileSystemProvider#move(Path, Path, CopyOption...):::Move or rename a file to a target file:::
FileSystemProvider#isSameFile(Path, Path):::Tests if two paths locate the same file:::
FileSystemProvider#isHidden(Path):::Tells whether or not a file is considered hidden:::
FileSystemProvider#getFileStore(Path):::Returns the FileStore representing the file store where a file is located:::
FileSystemProvider#checkAccess(Path, AccessMode...):::Checks the existence, and optionally the accessibility, of a file:::
FileSystemProvider#getFileAttributeView(Path, Class, LinkOption...):::Returns a file attribute view of a given type:::
FileSystemProvider#readAttributes(Path, Class, LinkOption...):::Reads a file's attributes as a bulk operation:::
FileSystemProvider#readAttributes(Path, String, LinkOption...):::Reads a set of file attributes as a bulk operation:::
FileSystemProvider#setAttribute(Path, String, Object, LinkOption...):::Sets the value of a file attribute:::
FileTypeDetector#probeContentType(Path):::Probes the given file to guess its content type:::

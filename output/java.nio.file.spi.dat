java.nio.file.spi.FileSystemProvider#installedProviders()->List:::Returns a list of the installed file system providers
java.nio.file.spi.FileSystemProvider#getScheme()->String:::Returns the URI scheme that identifies this provider.
java.nio.file.spi.FileSystemProvider#newFileSystem(URI, Map)->FileSystem:::Constructs a new FileSystem object identified by a URI
java.nio.file.spi.FileSystemProvider#getFileSystem(URI)->FileSystem:::Returns an existing FileSystem created by this provider
java.nio.file.spi.FileSystemProvider#getPath(URI)->Path:::Return a Path object by converting the given URI
java.nio.file.spi.FileSystemProvider#newFileSystem(Path, Map)->FileSystem:::Constructs a new FileSystem to access the contents of a file as a file system
java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)->InputStream:::Opens a file, returning an input stream to read from the file
java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)->OutputStream:::Opens or creates a file, returning an output stream that may be used to write bytes to the file
java.nio.file.spi.FileSystemProvider#newFileChannel(Path, Set, FileAttribute...)->FileChannel:::Opens or creates a file for reading and/or writing, returning a file channel to access the file
java.nio.file.spi.FileSystemProvider#newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute...)->AsynchronousFileChannel:::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
java.nio.file.spi.FileSystemProvider#newByteChannel(Path, Set, FileAttribute...)->SeekableByteChannel:::Opens or creates a file, returning a seekable byte channel to access the file
java.nio.file.spi.FileSystemProvider#newDirectoryStream(Path, DirectoryStream.Filter)->DirectoryStream:::Opens a directory, returning a DirectoryStream to iterate over the entries in the directory
java.nio.file.spi.FileSystemProvider#createDirectory(Path, FileAttribute...)->void:::Creates a new directory
java.nio.file.spi.FileSystemProvider#createSymbolicLink(Path, Path, FileAttribute...)->void:::Creates a symbolic link to a target
java.nio.file.spi.FileSystemProvider#createLink(Path, Path)->void:::Creates a new link (directory entry) for an existing file
java.nio.file.spi.FileSystemProvider#delete(Path)->void:::Deletes a file
java.nio.file.spi.FileSystemProvider#deleteIfExists(Path)->boolean:::Deletes a file if it exists
java.nio.file.spi.FileSystemProvider#readSymbolicLink(Path)->Path:::Reads the target of a symbolic link
java.nio.file.spi.FileSystemProvider#copy(Path, Path, CopyOption...)->void:::Copy a file to a target file
java.nio.file.spi.FileSystemProvider#move(Path, Path, CopyOption...)->void:::Move or rename a file to a target file
java.nio.file.spi.FileSystemProvider#isSameFile(Path, Path)->boolean:::Tests if two paths locate the same file
java.nio.file.spi.FileSystemProvider#isHidden(Path)->boolean:::Tells whether or not a file is considered hidden
java.nio.file.spi.FileSystemProvider#getFileStore(Path)->FileStore:::Returns the FileStore representing the file store where a file is located
java.nio.file.spi.FileSystemProvider#checkAccess(Path, AccessMode...)->void:::Checks the existence, and optionally the accessibility, of a file
java.nio.file.spi.FileSystemProvider#getFileAttributeView(Path, Class, LinkOption...)->V:::Returns a file attribute view of a given type
java.nio.file.spi.FileSystemProvider#readAttributes(Path, Class, LinkOption...)->A:::Reads a file's attributes as a bulk operation
java.nio.file.spi.FileSystemProvider#readAttributes(Path, String, LinkOption...)->Map:::Reads a set of file attributes as a bulk operation
java.nio.file.spi.FileSystemProvider#setAttribute(Path, String, Object, LinkOption...)->void:::Sets the value of a file attribute
java.nio.file.spi.FileTypeDetector#probeContentType(Path)->String:::Probes the given file to guess its content type

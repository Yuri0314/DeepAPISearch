AttributesProxy#setAttributes(XMLAttributes):::Sets the XML attributes to be wrapped.:::
AugmentationsImpl#putItem(String, Object):::Add additional information identified by a key to the Augmentations structure.:::oldValue->fAugmentationsContainer->putItem->if->fAugmentationsContainer->isFull->fAugmentationsContainer->expand->return
AugmentationsImpl#getItem(String):::Get information identified by a key from the Augmentations structure:::return->fAugmentationsContainer->getItem
AugmentationsImpl#removeItem(String):::Remove additional info from the Augmentations structure:::return->fAugmentationsContainer->removeItem
AugmentationsImpl#keys():::Returns an enumeration of the keys in the Augmentations structure:::return->fAugmentationsContainer->keys
AugmentationsImpl#removeAllItems():::Remove all objects from the Augmentations structure.:::fAugmentationsContainer->clear
DatatypeMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->if->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
DefaultErrorHandler#warning(String, String, XMLParseException):::Warning.:::printError
DefaultErrorHandler#error(String, String, XMLParseException):::Error.:::printError
DefaultErrorHandler#fatalError(String, String, XMLParseException):::Fatal error.:::printError->throw
DOMEntityResolverWrapper#setEntityResolver(LSResourceResolver):::Sets the DOM entity resolver.:::
DOMEntityResolverWrapper#getEntityResolver():::Returns the DOM entity resolver.:::return
DOMEntityResolverWrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::if->inputSource->fEntityResolver->resolveResource->fEntityResolver->getType->resourceIdentifier->getNamespace->resourceIdentifier->getPublicId->resourceIdentifier->getLiteralSystemId->resourceIdentifier->getBaseSystemId->resolveResource->if->publicId->inputSource->getPublicId->systemId->inputSource->getSystemId->baseSystemId->inputSource->getBaseURI->byteStream->inputSource->getByteStream->charStream->inputSource->getCharacterStream->encoding->inputSource->getEncoding->data->inputSource->getStringData->xmlInputSource->new->XMLInputSource->if->xmlInputSource->setCharacterStream->else->if->xmlInputSource->setByteStream->else->if->data->length->xmlInputSource->new->StringReader->setCharacterStream->xmlInputSource->setEncoding->return->return
DOMErrorHandlerWrapper#setErrorHandler(DOMErrorHandler):::Sets the DOM error handler.:::
DOMErrorHandlerWrapper#error(String, String, XMLParseException):::Reports an error:::exception->getMessage->locator->if->exception->getColumnNumber->exception->getLineNumber->exception->getCharacterOffset->exception->getExpandedSystemId->if->fDomErrorHandler->handleError
DOMErrorHandlerWrapper#fatalError(String, String, XMLParseException):::Report a fatal error:::fErrorCode->setValues->domErrorType->DOMErrorTypeMap->getDOMErrorType->exception->getMessage->locator->if->exception->getColumnNumber->exception->getLineNumber->exception->getCharacterOffset->exception->getExpandedSystemId->if->fDomErrorHandler->handleError
DOMUtil#copyInto(Node, Node):::Copies the source tree into the specified place in a destination tree:::factory->dest->getOwnerDocument->domimpl->start->parent->place->while->node->type->place->getNodeType->switch->factory->place->getNodeValue->createCDATASection->break->factory->place->getNodeValue->createComment->break->element->factory->place->getNodeName->createElement->attrs->place->getAttributes->attrCount->attrs->getLength->for->i->break->factory->place->getNodeName->createEntityReference->break->factory->place->getNodeName->place->getNodeValue->createProcessingInstruction->break->factory->place->getNodeValue->createTextNode->break->throw->place->getNodeName->new->IllegalArgumentException->dest->appendChild->if->place->hasChildNodes->place->getFirstChild->else->place->getNextSibling->while->parent->getNextSibling->parent->getParentNode->dest->getParentNode
DOMUtil#getFirstChildElement(Node):::Finds and returns the first child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->return->child->getNextSibling->return
DOMUtil#getFirstVisibleChildElement(Node):::Finds and returns the first visible child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->isHidden->return->child->getNextSibling->return
DOMUtil#getFirstVisibleChildElement(Node, Map):::Finds and returns the first visible child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->isHidden->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node):::Finds and returns the last child element node:::child->parent->getLastChild->while->if->child->getNodeType->return->child->getPreviousSibling->return
DOMUtil#getLastVisibleChildElement(Node):::Finds and returns the last visible child element node.:::child->parent->getLastChild->while->if->child->getNodeType->isHidden->return->child->getPreviousSibling->return
DOMUtil#getLastVisibleChildElement(Node, Map):::Finds and returns the last visible child element node:::child->parent->getLastChild->while->if->child->getNodeType->isHidden->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node):::Finds and returns the next sibling element node.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->return->sibling->getNextSibling->return
DOMUtil#getFirstChildElement(Node, String):::Finds and returns the first child node with the given name.:::child->parent->getFirstChild->while->if->child->getNodeType->if->child->getNodeName->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String):::Finds and returns the last child node with the given name.:::child->parent->getLastChild->while->if->child->getNodeType->if->child->getNodeName->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String):::Finds and returns the next sibling node with the given name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->if->sibling->getNodeName->equals->return->sibling->getNextSibling->return
DOMUtil#getFirstChildElementNS(Node, String, String):::Finds and returns the first child node with the given qualified name.:::child->parent->getFirstChild->while->if->child->getNodeType->childURI->child->getNamespaceURI->if->childURI->equals->child->getLocalName->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElementNS(Node, String, String):::Finds and returns the last child node with the given qualified name.:::child->parent->getLastChild->while->if->child->getNodeType->childURI->child->getNamespaceURI->if->childURI->equals->child->getLocalName->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElementNS(Node, String, String):::Finds and returns the next sibling node with the given qualified name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->siblingURI->sibling->getNamespaceURI->if->siblingURI->equals->sibling->getLocalName->equals->return->sibling->getNextSibling->return
DOMUtil#getFirstChildElement(Node, String[]):::Finds and returns the first child node with the given name.:::child->parent->getFirstChild->while->if->child->getNodeType->for->i->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String[]):::Finds and returns the last child node with the given name.:::child->parent->getLastChild->while->if->child->getNodeType->for->i->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String[]):::Finds and returns the next sibling node with the given name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->for->i->sibling->getNextSibling->return
DOMUtil#getFirstChildElementNS(Node, String[][]):::Finds and returns the first child node with the given qualified name.:::child->parent->getFirstChild->while->if->child->getNodeType->for->i->child->getNextSibling->return
DOMUtil#getLastChildElementNS(Node, String[][]):::Finds and returns the last child node with the given qualified name.:::child->parent->getLastChild->while->if->child->getNodeType->for->i->child->getPreviousSibling->return
DOMUtil#getNextSiblingElementNS(Node, String[][]):::Finds and returns the next sibling node with the given qualified name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->for->i->sibling->getNextSibling->return
DOMUtil#getFirstChildElement(Node, String, String, String):::Finds and returns the first child node with the given name and attribute name, value pair.:::child->parent->getFirstChild->while->if->child->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String, String, String):::Finds and returns the last child node with the given name and attribute name, value pair.:::child->parent->getLastChild->while->if->child->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String, String, String):::Finds and returns the next sibling node with the given name and attribute name, value pair:::sibling->node->getNextSibling->while->if->sibling->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->sibling->getNextSibling->return
DOMUtil#getChildText(Node):::Returns the concatenated child text of the specified node:::if->return->str->new->StringBuffer->child->node->getFirstChild->while->type->child->getNodeType->if->str->child->getNodeValue->append->else->if->str->getChildText->append->child->getNextSibling->return->str->toString
DOMUtil#getLocalName(Node):::returns local name of this element if not null, otherwise      returns the name of the node:::name->node->getLocalName->return->node->getNodeName
DOMUtil#createDOMException(short, Throwable):::Creates a DOMException:::de->cause->getMessage->new->DOMException->if->de->initCause->return
DOMUtil#createLSException(short, Throwable):::Creates an LSException:::lse->cause->getMessage->new->LSException->if->lse->initCause->return
EncodingMap#getIANA2JavaMapping(String):::Returns the Java encoding name for the specified IANA encoding name.:::return->fIANA2JavaMap->get
EncodingMap#getJava2IANAMapping(String):::Returns the IANA encoding name for the specified Java encoding name.:::return->fJava2IANAMap->get
EntityResolver2Wrapper#setEntityResolver(EntityResolver2):::Sets the SAX entity resolver wrapped by this object.:::
EntityResolver2Wrapper#getEntityResolver():::Returns the SAX entity resolver wrapped by this object.:::return
EntityResolver2Wrapper#getExternalSubset(XMLDTDDescription):::Locates an external subset for documents which do not explicitly provide one:::if->name->grammarDescription->getRootName->baseURI->grammarDescription->getBaseSystemId->try->inputSource->fEntityResolver->getExternalSubset->return->createXMLInputSource->catch->ex->e->getException->if->throw->new->XNIException->finally->return
EntityResolver2Wrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::if->pubId->resourceIdentifier->getPublicId->sysId->resourceIdentifier->getLiteralSystemId->baseURI->resourceIdentifier->getBaseSystemId->name->if->else->if->getEntityName->if->return->try->inputSource->fEntityResolver->resolveEntity->return->createXMLInputSource->catch->ex->e->getException->if->throw->new->XNIException->finally->return
EntityResolverWrapper#setEntityResolver(EntityResolver):::Sets the SAX entity resolver.:::
EntityResolverWrapper#getEntityResolver():::Returns the SAX entity resolver.:::return
EntityResolverWrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::pubId->resourceIdentifier->getPublicId->sysId->resourceIdentifier->getExpandedSystemId->if->return->if->try->inputSource->fEntityResolver->resolveEntity->if->publicId->inputSource->getPublicId->systemId->inputSource->getSystemId->baseSystemId->resourceIdentifier->getBaseSystemId->byteStream->inputSource->getByteStream->charStream->inputSource->getCharacterStream->encoding->inputSource->getEncoding->xmlInputSource->new->XMLInputSource->xmlInputSource->setByteStream->xmlInputSource->setCharacterStream->xmlInputSource->setEncoding->return->catch->ex->e->getException->if->throw->new->XNIException->throw->new->XNIException->finally->return
ErrorHandlerWrapper#setErrorHandler(ErrorHandler):::Sets the SAX error handler.:::
ErrorHandlerWrapper#getErrorHandler():::Returns the SAX error handler.:::return
ErrorHandlerWrapper#warning(String, String, XMLParseException):::Reports a warning:::if->saxException->createSAXParseException->try->fErrorHandler->warning->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#error(String, String, XMLParseException):::Reports an error:::if->saxException->createSAXParseException->try->fErrorHandler->error->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#fatalError(String, String, XMLParseException):::Report a fatal error:::if->saxException->createSAXParseException->try->fErrorHandler->fatalError->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#createSAXParseException(XMLParseException):::Creates a SAXParseException from an XMLParseException.:::return->exception->getMessage->exception->getPublicId->exception->getExpandedSystemId->exception->getLineNumber->exception->getColumnNumber->exception->getException->new->SAXParseException
ErrorHandlerWrapper#createXMLParseException(SAXParseException):::Creates an XMLParseException from a SAXParseException.:::fPublicId->exception->getPublicId->fExpandedSystemId->exception->getSystemId->fLineNumber->exception->getLineNumber->fColumnNumber->exception->getColumnNumber->location->new->XMLLocator->return->exception->getMessage->new->XMLParseException
ErrorHandlerWrapper#createXNIException(SAXException):::Creates an XNIException from a SAXException:::return->exception->getMessage->new->XNIException
HTTPInputSource#getFollowHTTPRedirects():::Returns the preference whether HTTP redirects should be followed:::return
HTTPInputSource#setFollowHTTPRedirects(boolean):::Sets the preference whether HTTP redirects should be followed:::
HTTPInputSource#getHTTPRequestProperty(String):::Returns the value of the request property associated with the given property name.:::return->fHTTPRequestProperties->get
HTTPInputSource#getHTTPRequestProperties():::Returns an iterator for the request properties this input source contains:::return->fHTTPRequestProperties->entrySet->iterator
HTTPInputSource#setHTTPRequestProperty(String, String):::Sets the value of the request property associated with the given property name.:::if->fHTTPRequestProperties->put->else->fHTTPRequestProperties->remove
IntStack#size():::Returns the size of the stack.:::return
IntStack#push(int):::Pushes a value onto the stack.:::ensureCapacity
IntStack#peek():::Peeks at the top of the stack.:::return
IntStack#elementAt(int):::Returns the element at the specified depth in the stack.:::return
IntStack#pop():::Pops a value off of the stack.:::return
IntStack#clear():::Clears the stack.:::
IntStack#print():::Prints the stack.:::print->print->print->for->i->print->println
LocatorProxy#getPublicId():::Public identifier.:::return->fLocator->getPublicId
LocatorProxy#getSystemId():::System identifier.:::return->fLocator->getExpandedSystemId
LocatorProxy#getLineNumber():::Line number.:::return->fLocator->getLineNumber
LocatorProxy#getColumnNumber():::Column number.:::return->fLocator->getColumnNumber
LocatorWrapper#getCharacterOffset():::Returns the character offset, or -1, if no character offset is available.  As this information is not available from org.xml.sax.Locator, always return -1.:::return
LocatorWrapper#getXMLVersion():::Returns the XML version of the current entity.  As this information is not available from org.xml.sax.Locator, always return null.:::return
MessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::
NamespaceContextWrapper#getPrefixes(String):::TODO: Namespace doesn't give information giving multiple prefixes for the same namespaceURI.:::if->throw->new->IllegalArgumentException->else->vector->namespaceURI->intern->getPrefixes->return->vector->iterator
NamespaceContextWrapper#getNamespaceContext():::This method supports all functions in the NamespaceContext utility class:::return
NamespaceSupport#containsPrefix(String):::Checks whether a binding or unbinding for the given prefix exists in the context.:::for->i->return
NamespaceSupport#containsPrefixInCurrentContext(String):::Checks whether a binding or unbinding for the given prefix exists in the current context.:::for->i->return
ParserConfigurationSettings#addRecognizedFeatures(String[]):::Allows a parser to add parser specific features to be recognized and managed by the parser configuration.:::featureIdsCount->for->i
ParserConfigurationSettings#setFeature(String, boolean):::Set the state of a feature:::checkState->checkFeature->if->checkState->isExceptional->throw->new->XMLConfigurationException->fFeatures->put
ParserConfigurationSettings#addRecognizedProperties(String[]):::Allows a parser to add parser specific properties to be recognized and managed by the parser configuration.:::fRecognizedProperties->Arrays->asList->addAll
ParserConfigurationSettings#setProperty(String, Object):::setProperty:::checkState->checkProperty->if->checkState->isExceptional->throw->new->XMLConfigurationException->fProperties->put
ParserConfigurationSettings#getFeature(String):::Returns the state of a feature.:::state->getFeatureState->if->state->isExceptional->throw->new->XMLConfigurationException->return
ParserConfigurationSettings#getProperty(String):::Returns the value of a property.:::state->getPropertyState->if->state->isExceptional->throw->new->XMLConfigurationException->return
ParserConfigurationSettings#checkFeature(String):::Check a feature:::if->fRecognizedFeatures->contains->if->return->fParentSettings->getFeatureState->else->return->return
ParserConfigurationSettings#checkProperty(String):::Check a property:::if->fRecognizedProperties->contains->if->state->fParentSettings->getPropertyState->if->state->isExceptional->return->else->return->return
SAXInputSource#setPublicId(String):::Sets the public identifier.:::super->setPublicId->if->new->InputSource->fInputSource->setPublicId
SAXInputSource#setSystemId(String):::Sets the system identifier.:::super->setSystemId->if->new->InputSource->fInputSource->setSystemId
SAXInputSource#setByteStream(InputStream):::Sets the byte stream:::super->setByteStream->if->new->InputSource->fInputSource->setByteStream
SAXInputSource#setCharacterStream(Reader):::Sets the character stream:::super->setCharacterStream->if->new->InputSource->fInputSource->setCharacterStream
SAXInputSource#setEncoding(String):::Sets the encoding of the stream.:::super->setEncoding->if->new->InputSource->fInputSource->setEncoding
SAXMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->if->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
SecurityManager#setEntityExpansionLimit(int):::Sets the number of entity expansions that the parser should permit in a document.:::
SecurityManager#getEntityExpansionLimit():::Returns the number of entity expansions that the parser permits in a document.:::return
SecurityManager#setMaxOccurNodeLimit(int):::Sets the limit of the number of content model nodes that may be created when building a grammar for a W3C XML Schema that contains maxOccurs attributes with values other than "unbounded".:::
SecurityManager#getMaxOccurNodeLimit():::Returns the limit of the number of content model nodes that may be created when building a grammar for a W3C XML Schema that contains maxOccurs attributes with values other than "unbounded".:::return
ShadowedSymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::if->fSymbolTable->containsSymbol->return->fSymbolTable->addSymbol->return->super->addSymbol
ShadowedSymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::if->fSymbolTable->containsSymbol->return->fSymbolTable->addSymbol->return->super->addSymbol
ShadowedSymbolTable#hash(String):::Returns a hashcode value for the specified symbol:::return->fSymbolTable->hash
ShadowedSymbolTable#hash(char[], int, int):::Returns a hashcode value for the specified symbol information:::return->fSymbolTable->hash
SymbolHash#put(Object, Object):::Adds the key/value mapping to the key table:::collisionCount->hash->hash->bucket->for->entry->if->rehash->else->if->rebalance->hash->entry->new->Entry
SymbolHash#get(Object):::Get the value associated with the given key.:::bucket->hash->entry->search->if->return->return
SymbolHash#getLength():::Get the number of key/value pairs stored in this table.:::return
SymbolHash#getValues(Object[], int):::Add all values to the given array:::for->i->j->return
SymbolHash#getEntries():::Return key/value pairs of all entries in the map:::entries->new->ObjectArr->for->i->j->return
SymbolHash#makeClone():::Make a clone of this object.:::newTable->new->SymbolHash->fHashMultipliers->clone->for->i->return
SymbolHash#clear():::Remove all key/value association:::for->i
SymbolHash#hash(Object):::Returns a hashcode value for the specified key.:::if->return->key->hashCode->return->hash0
SymbolHash#rehash():::Increases the capacity of and internally reorganizes this SymbolHash, in order to accommodate and access its entries more efficiently:::rehashCommon
SymbolHash#rebalance():::Randomly selects a new hash function and reorganizes this SymbolHash in order to more evenly distribute its entries across the table:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->rehashCommon
SymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::collisionCount->bucket->hash->for->entry->return->addSymbol0
SymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::collisionCount->bucket->hash->for->entry->return->addSymbol0
SymbolTable#hash(String):::Returns a hashcode value for the specified symbol:::if->return->symbol->hashCode->return->hash0
SymbolTable#hash(char[], int, int):::Returns a hashcode value for the specified symbol information:::if->code->for->i->return->return->hash0
SymbolTable#rehash():::Increases the capacity of and internally reorganizes this SymbolTable, in order to accommodate and access its entries more efficiently:::rehashCommon
SymbolTable#rebalance():::Randomly selects a new hash function and reorganizes this SymbolTable in order to more evenly distribute its entries across the table:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->rehashCommon
SymbolTable#containsSymbol(String):::Returns true if the symbol table already contains the specified symbol.:::bucket->hash->length->symbol->length->for->entry->return
SymbolTable#containsSymbol(char[], int, int):::Returns true if the symbol table already contains the specified symbol.:::bucket->hash->for->entry->return
SynchronizedSymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::synchronized->return->fSymbolTable->addSymbol
SynchronizedSymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::synchronized->return->fSymbolTable->addSymbol
SynchronizedSymbolTable#containsSymbol(String):::Returns true if the symbol table already contains the specified symbol.:::synchronized->return->fSymbolTable->containsSymbol
SynchronizedSymbolTable#containsSymbol(char[], int, int):::Returns true if the symbol table already contains the specified symbol.:::synchronized->return->fSymbolTable->containsSymbol
URI#absolutize(URI):::Absolutize URI with given base URI.:::if->m_path->length->p_base->getScheme->p_base->getUserinfo->p_base->getHost->p_base->getPort->p_base->getRegBasedAuthority->p_base->getPath->if->p_base->getQueryString->if->p_base->getFragment->return->if->p_base->getScheme->else->return->if->p_base->getUserinfo->p_base->getHost->p_base->getPort->p_base->getRegBasedAuthority->else->return->if->m_path->length->m_path->startsWith->return->path->basePath->p_base->getPath->if->basePath->length->lastSlash->basePath->lastIndexOf->if->basePath->substring->else->if->m_path->length->path->concat->index->while->path->indexOf->path->substring->path->substring->concat->if->path->endsWith->path->path->length->substring->segIndex->tempString->while->path->indexOf->path->path->indexOf->substring->tempString->lastIndexOf->if->if->tempString->substring->equals->path->substring->path->substring->concat->else->else->if->path->endsWith->path->path->length->substring->tempString->lastIndexOf->if->path->substring
URI#getScheme():::Get the scheme for this URI.:::return
URI#getSchemeSpecificPart():::Get the scheme-specific part for this URI (everything following the scheme and the first colon):::schemespec->new->StringBuilder->if->schemespec->append->if->if->schemespec->append->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->else->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->return->schemespec->toString
URI#getUserinfo():::Get the userinfo for this URI.:::return
URI#getHost():::Get the host for this URI.:::return
URI#getPort():::Get the port for this URI.:::return
URI#getRegBasedAuthority():::Get the registry based authority for this URI.:::return
URI#getAuthority():::Get the authority for this URI.:::authority->new->StringBuilder->if->authority->append->if->if->authority->append->authority->append->authority->append->if->authority->append->authority->append->else->authority->append->return->authority->toString
URI#getPath(boolean, boolean):::Get the path for this URI (optionally with the query string and fragment).:::pathString->new->StringBuilder->if->pathString->append->pathString->append->if->pathString->append->pathString->append->return->pathString->toString
URI#getPath():::Get the path for this URI:::return
URI#getQueryString():::Get the query string for this URI.:::return
URI#getFragment():::Get the fragment for this URI.:::return
URI#setScheme(String):::Set the scheme for this URI:::if->throw->new->MalformedURIException->if->isConformantSchemeName->throw->new->MalformedURIException->p_scheme->toLowerCase
URI#setUserinfo(String):::Set the userinfo for this URI:::if->return->else->if->throw->new->MalformedURIException->index->end->p_userinfo->length->testChar->while->p_userinfo->charAt->if->if->p_userinfo->charAt->isHex->p_userinfo->charAt->isHex->throw->new->MalformedURIException->else->if->isUserinfoCharacter->throw->new->MalformedURIException
URI#setHost(String):::Set the host for this URI:::if->p_host->length->if->return->else->if->isWellFormedAddress->throw->new->MalformedURIException
URI#setPort(int):::Set the port for this URI:::if->if->throw->new->MalformedURIException->else->if->throw->new->MalformedURIException
URI#setRegBasedAuthority(String):::Sets the registry based authority for this URI.  Note: This method overwrites server based authority if it previously existed in this URI.:::if->return->else->if->authority->length->isValidRegistryBasedAuthority->authority->indexOf->throw->new->MalformedURIException
URI#setPath(String):::Set the path for this URI:::if->else->initializePath
URI#appendPath(String):::Append to the end of the path of this URI:::if->p_addToPath->trim->length->return->if->isURIString->throw->new->MalformedURIException->if->m_path->trim->length->if->p_addToPath->startsWith->else->else->if->m_path->endsWith->if->p_addToPath->startsWith->m_path->p_addToPath->substring->concat->else->m_path->concat->else->if->p_addToPath->startsWith->m_path->concat->else->m_path->concat
URI#setQueryString(String):::Set the query string for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#setFragment(String):::Set the fragment for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#equals(Object):::Determines if the passed-in Object is equivalent to this URI.:::if->testURI->if->m_scheme->equals->m_userinfo->equals->m_host->equals->m_path->equals->m_queryString->equals->m_fragment->equals->return->return
URI#toString():::Get the URI as a string specification:::uriSpecString->new->StringBuilder->if->uriSpecString->append->uriSpecString->append->uriSpecString->getSchemeSpecificPart->append->return->uriSpecString->toString
URI#isGenericURI():::Get the indicator as to whether this URI uses the "generic URI" syntax.:::return
URI#isAbsoluteURI():::Returns whether this URI represents an absolute URI.:::return
URI#isConformantSchemeName(String):::Determine whether a scheme conforms to the rules for a scheme name:::if->p_scheme->trim->length->return->if->p_scheme->charAt->isAlpha->return->testChar->schemeLength->p_scheme->length->for->i->return
URI#isWellFormedAddress(String):::Determine whether a string is syntactically capable of representing a valid IPv4 address, IPv6 reference or the domain name of a network host:::if->return->addrLength->address->length->if->return->if->address->startsWith->return->isWellFormedIPv6Reference->if->address->startsWith->address->startsWith->address->endsWith->return->index->address->lastIndexOf->if->address->endsWith->address->substring->lastIndexOf->if->address->charAt->isDigit->return->isWellFormedIPv4Address->else->if->return->testChar->labelCharCount->for->i->return
URI#isWellFormedIPv4Address(String):::Determines whether a string is an IPv4 address as defined by RFC 2373, and under the further constraint that it must be a 32-bit address:::addrLength->address->length->testChar->numDots->numDigits->for->i->return
URI#isWellFormedIPv6Reference(String):::Determines whether a string is an IPv6 reference as defined by RFC 2732, where IPv6address is defined in RFC 2373:::addrLength->address->length->index->end->if->address->charAt->address->charAt->return->counter->new->intArr->scanHexSequence->if->return->else->if->return->if->address->charAt->if->address->charAt->if->return->if->return->else->return->address->substring->isWellFormedIPv4Address->else->return->prevCount->scanHexSequence->return->address->substring->isWellFormedIPv4Address
XML11Char#isXML11Space(int):::Returns true if the specified character is a space character as amdended in the XML 1.1 specification.:::return
XML11Char#isXML11Valid(int):::Returns true if the specified character is valid:::return
XML11Char#isXML11Invalid(int):::Returns true if the specified character is invalid.:::return->isXML11Valid
XML11Char#isXML11ValidLiteral(int):::Returns true if the specified character is valid and permitted outside of a character reference:::return
XML11Char#isXML11Content(int):::Returns true if the specified character can be considered content in an external parsed entity.:::return
XML11Char#isXML11InternalEntityContent(int):::Returns true if the specified character can be considered content in an internal parsed entity.:::return
XML11Char#isXML11NameStart(int):::Returns true if the specified character is a valid name start character as defined by production [4] in the XML 1.1 specification.:::return
XML11Char#isXML11Name(int):::Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1.1 specification.:::return
XML11Char#isXML11NCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NameHighSurrogate(int):::Returns whether the given character is a valid high surrogate for a name character:::return
XML11Char#isXML11ValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.1 Recommendation:::length->name->length->if->return->i->ch->name->charAt->if->isXML11NameStart->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NameStart->return->else->return->while->name->charAt->if->isXML11Name->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11Name->return->else->return->return
XML11Char#isXML11ValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.1 Recommendation:::length->ncName->length->if->return->i->ch->ncName->charAt->if->isXML11NCNameStart->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCNameStart->return->else->return->while->ncName->charAt->if->isXML11NCName->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCName->return->else->return->return
XML11Char#isXML11ValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.1 Recommendation:::length->nmtoken->length->if->return->for->i->return
XMLAttributesImpl#setNamespaces(boolean):::Sets whether namespace processing is being performed:::
XMLAttributesImpl#addAttribute(QName, String, String):::Adds an attribute:::return->addAttribute
XMLAttributesImpl#removeAllAttributes():::Removes all of the attributes:::
XMLAttributesImpl#removeAttributeAt(int):::Removes the attribute at the specified index:::if->removedAttr->System->arraycopy
XMLAttributesImpl#setName(int, QName):::Sets the name of the attribute at the specified index.:::setValues
XMLAttributesImpl#getName(int, QName):::Sets the fields in the given QName structure with the values of the attribute name at the specified index.:::attrName->setValues
XMLAttributesImpl#setType(int, String):::Sets the type of the attribute at the specified index.:::
XMLAttributesImpl#setValue(int, String):::Sets the value of the attribute at the specified index:::setValue
XMLAttributesImpl#setNonNormalizedValue(int, String):::Sets the non-normalized value of the attribute at the specified index.:::if
XMLAttributesImpl#getNonNormalizedValue(int):::Returns the non-normalized value of the attribute at the specified index:::value->return
XMLAttributesImpl#setSpecified(int, boolean):::Sets whether an attribute is specified in the instance document or not.:::
XMLAttributesImpl#isSpecified(int):::Returns true if the attribute is specified in the instance document.:::return
XMLAttributesImpl#getLength():::Return the number of attributes in the list:::return
XMLAttributesImpl#getType(int):::Look up an attribute's type by index:::if->return->return->getReportableType
XMLAttributesImpl#getType(String):::Look up an attribute's type by XML 1.0 qualified name:::index->getIndex->return->getReportableType
XMLAttributesImpl#getValue(int):::Look up an attribute's value by index:::if->return->if->toString->return
XMLAttributesImpl#getValue(String):::Look up an attribute's value by XML 1.0 qualified name:::index->getIndex->if->return->if->toString->return
XMLAttributesImpl#getName(int):::Return the name of an attribute in this list (by position):::if->return->return
XMLAttributesImpl#getIndex(String):::Look up the index of an attribute by XML 1.0 qualified name.:::for->i->return
XMLAttributesImpl#getIndex(String, String):::Look up the index of an attribute by Namespace name.:::for->i->return
XMLAttributesImpl#getIndexByLocalName(String):::Look up the index of an attribute by local name only, ignoring its namespace.:::for->i->return
XMLAttributesImpl#getLocalName(int):::Look up an attribute's local name by index.:::if->return->if->return->return
XMLAttributesImpl#getQName(int):::Look up an attribute's XML 1.0 qualified name by index.:::if->return->rawname->return
XMLAttributesImpl#getType(String, String):::Look up an attribute's type by Namespace name:::if->return->index->getIndex->return->getType
XMLAttributesImpl#getIndexFast(String):::Look up the index of an attribute by XML 1.0 qualified name:::for->i->return
XMLAttributesImpl#addAttributeNS(QName, String, String):::Adds an attribute:::index->if->attributes->if->new->AttributeArr->else->new->AttributeArr->System->arraycopy->for->i->attribute->setValues->removeAllItems
XMLAttributesImpl#checkDuplicatesNS():::Checks for duplicate expanded names (local part and namespace name pairs) in the attribute specification:::length->if->attributes->for->i->return->else->return->checkManyDuplicatesNS
XMLAttributesImpl#getIndexFast(String, String):::Look up the index of an attribute by Namespace name:::for->i->return
XMLAttributesImpl#getTableViewBucket(String):::Returns the position in the table view where the given attribute name would be hashed.:::return->hash
XMLAttributesImpl#getTableViewBucket(String, String):::Returns the position in the table view where the given attribute name would be hashed.:::if->return->hash->else->return->hash
XMLAttributesImpl#cleanTableView():::Purges all elements from the table view.:::if->if->for->i
XMLAttributesImpl#prepareTableView():::Prepares the table view of the attributes list for use.:::if->growTableView->if->new->AttributeArr->new->intArr->else->cleanTableView
XMLAttributesImpl#prepareAndPopulateTableView():::Prepares the table view of the attributes list for use, and populates it with the attributes which have been previously read.:::prepareAndPopulateTableView
XMLAttributesImpl#getPrefix(int):::Returns the prefix of the attribute at the specified index.:::if->return->prefix->return
XMLAttributesImpl#getURI(int):::Look up an attribute's Namespace URI by index.:::if->return->uri->return
XMLAttributesImpl#getValue(String, String):::Look up an attribute's value by Namespace name and Local name:::index->getIndex->return->getValue
XMLAttributesImpl#getAugmentations(String, String):::Look up an augmentations by Namespace name.:::index->getIndex->return
XMLAttributesImpl#getAugmentations(String):::Look up an augmentation by XML 1.0 qualified name:::index->getIndex->return
XMLAttributesImpl#getAugmentations(int):::Look up an augmentations by attributes index.:::if->return->return
XMLAttributesImpl#setAugmentations(int, Augmentations):::Sets the augmentations of the attribute at the specified index.:::
XMLAttributesImpl#setURI(int, String):::Sets the uri of the attribute at the specified index.:::
XMLAttributesImpl#refresh():::This method will be invoked by XMLEntityReader before ScannedEntities buffer is reloaded.:::if->for->i
XMLChar#isSupplemental(int):::Returns true if the specified character is a supplemental character.:::return
XMLChar#supplemental(char, char):::Returns true the supplemental character corresponding to the given surrogates.:::return
XMLChar#highSurrogate(int):::Returns the high surrogate of a supplemental character:::return
XMLChar#lowSurrogate(int):::Returns the low surrogate of a supplemental character:::return
XMLChar#isHighSurrogate(int):::Returns whether the given character is a high surrogate:::return
XMLChar#isLowSurrogate(int):::Returns whether the given character is a low surrogate:::return
XMLChar#isValid(int):::Returns true if the specified character is valid:::return
XMLChar#isInvalid(int):::Returns true if the specified character is invalid.:::return->isValid
XMLChar#isContent(int):::Returns true if the specified character can be considered content.:::return
XMLChar#isMarkup(int):::Returns true if the specified character can be considered markup:::return
XMLChar#isSpace(int):::Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.:::return
XMLChar#isNameStart(int):::Returns true if the specified character is a valid name start character as defined by production [5] in the XML 1.0 specification.:::return
XMLChar#isName(int):::Returns true if the specified character is a valid name character as defined by production [4] in the XML 1.0 specification.:::return
XMLChar#isNCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML recommendation.:::return
XMLChar#isNCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation.:::return
XMLChar#isPubid(int):::Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1.0 specification.:::return
XMLChar#isValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.0 Recommendation:::length->name->length->if->return->ch->name->charAt->if->isNameStart->return->for->i->return
XMLChar#isValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.0 Recommendation:::length->ncName->length->if->return->ch->ncName->charAt->if->isNCNameStart->return->for->i->return
XMLChar#isValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation:::length->nmtoken->length->if->return->for->i->return
XMLChar#isValidIANAEncoding(String):::Returns true if the encoding name is a valid IANA encoding:::if->length->ianaEncoding->length->if->c->ianaEncoding->charAt->if->for->i->return->return
XMLChar#isValidJavaEncoding(String):::Returns true if the encoding name is a valid Java encoding:::if->length->javaEncoding->length->if->for->i->return->return
XMLChar#trim(String):::Trims space characters as defined by production [3] in the XML 1.0 specification from both ends of the given string.:::start->end->lengthMinusOne->value->length->for->for->if->return->if->return->return->value->substring
XMLEntityDescriptionImpl#setEntityName(String):::Sets the name of the entity.:::
XMLEntityDescriptionImpl#getEntityName():::Returns the name of the entity.:::return
XMLEntityDescriptionImpl#setDescription(String, String, String, String, String):::Sets the values of this entity description.:::setDescription
XMLEntityDescriptionImpl#setDescription(String, String, String, String, String, String):::Sets the values of this entity description.:::setValues
XMLEntityDescriptionImpl#clear():::Clears the values.:::super->clear
XMLEntityDescriptionImpl#hashCode():::Returns a hash code for this object.:::code->super->hashCode->if->fEntityName->hashCode->return
XMLEntityDescriptionImpl#toString():::Returns a string representation of this object.:::str->new->StringBuffer->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->return->str->toString
XMLErrorCode#setValues(String, String):::Convenience method to set the values of an XMLErrorCode.:::
XMLErrorCode#equals(Object):::Indicates whether some other object is equal to this XMLErrorCode.:::if->return->err->return->fDomain->equals->fKey->equals
XMLErrorCode#hashCode():::Returns a hash code value for this XMLErrorCode.:::return->fDomain->hashCode->fKey->hashCode
XMLGrammarPoolImpl#putGrammar(Grammar):::Puts the specified grammar into the grammar pool and associates it to its root element name or its target namespace.:::if->synchronized->desc->grammar->getGrammarDescription->hash->hashCode->index->for->entry->entry->new->Entry
XMLGrammarPoolImpl#getGrammar(XMLGrammarDescription):::Returns the grammar associated to the specified grammar description:::synchronized->hash->hashCode->index->for->entry->return
XMLGrammarPoolImpl#removeGrammar(XMLGrammarDescription):::Removes the grammar associated to the specified grammar description from the grammar pool and returns the removed grammar:::synchronized->hash->hashCode->index->for->entry->prev->return
XMLGrammarPoolImpl#containsGrammar(XMLGrammarDescription):::Returns true if the grammar pool contains a grammar associated to the specified grammar description:::synchronized->hash->hashCode->index->for->entry->return
XMLGrammarPoolImpl#equals(XMLGrammarDescription, XMLGrammarDescription):::This method checks whether two grammars are the same:::return->desc1->equals
XMLGrammarPoolImpl#hashCode(XMLGrammarDescription):::Returns the hash code value for the given grammar description.:::return->desc->hashCode
XMLResourceIdentifierImpl#setValues(String, String, String, String):::Sets the values of the resource identifier.:::setValues
XMLResourceIdentifierImpl#setValues(String, String, String, String, String):::Sets the values of the resource identifier.:::
XMLResourceIdentifierImpl#clear():::Clears the values.:::
XMLResourceIdentifierImpl#setPublicId(String):::Sets the public identifier.:::
XMLResourceIdentifierImpl#setLiteralSystemId(String):::Sets the literal system identifier.:::
XMLResourceIdentifierImpl#setBaseSystemId(String):::Sets the base system identifier.:::
XMLResourceIdentifierImpl#setExpandedSystemId(String):::Sets the expanded system identifier.:::
XMLResourceIdentifierImpl#setNamespace(String):::Sets the namespace of the resource.:::
XMLResourceIdentifierImpl#getPublicId():::Returns the public identifier.:::return
XMLResourceIdentifierImpl#getLiteralSystemId():::Returns the literal system identifier.:::return
XMLResourceIdentifierImpl#getBaseSystemId():::Returns the base URI against which the literal SystemId is to be resolved.:::return
XMLResourceIdentifierImpl#getExpandedSystemId():::Returns the expanded system identifier.:::return
XMLResourceIdentifierImpl#getNamespace():::Returns the namespace of the resource.:::return
XMLResourceIdentifierImpl#hashCode():::Returns a hash code for this object.:::code->if->fPublicId->hashCode->if->fLiteralSystemId->hashCode->if->fBaseSystemId->hashCode->if->fExpandedSystemId->hashCode->if->fNamespace->hashCode->return
XMLResourceIdentifierImpl#toString():::Returns a string representation of this object.:::str->new->StringBuffer->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->return->str->toString
XMLStringBuffer#clear():::Clears the string buffer.:::
XMLStringBuffer#append(char):::append:::if->newLength->if->tmp->new->charArr->System->arraycopy
XMLStringBuffer#append(String):::append:::length->s->length->if->newLength->if->newch->new->charArr->System->arraycopy->s->getChars
XMLStringBuffer#append(char[], int, int):::append:::if->newLength->if->newch->new->charArr->System->arraycopy->if->System->arraycopy
XMLStringBuffer#append(XMLString):::append:::append

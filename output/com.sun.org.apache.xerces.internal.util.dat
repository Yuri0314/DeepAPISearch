AttributesProxy#setAttributes(XMLAttributes):::Sets the XML attributes to be wrapped.:::
AttributesProxy#getAttributes()::: attributes proxy get attributes:::return
AttributesProxy#getLength()::: attributes proxy get length:::return->fAttributes->getLength
AttributesProxy#getQName(int)::: attributes proxy get name:::return->fAttributes->getQName
AttributesProxy#getURI(int)::: attributes proxy get i:::uri->fAttributes->getURI->return
AttributesProxy#getLocalName(int)::: attributes proxy get local name:::return->fAttributes->getLocalName
AttributesProxy#getType(int)::: attributes proxy get type:::return->fAttributes->getType
AttributesProxy#getType(String)::: attributes proxy get type:::return->fAttributes->getType
AttributesProxy#getType(String, String)::: attributes proxy get type:::return->uri->equals->fAttributes->getType->fAttributes->getType
AttributesProxy#getValue(int)::: attributes proxy get value:::return->fAttributes->getValue
AttributesProxy#getValue(String)::: attributes proxy get value:::return->fAttributes->getValue
AttributesProxy#getValue(String, String)::: attributes proxy get value:::return->uri->equals->fAttributes->getValue->fAttributes->getValue
AttributesProxy#getIndex(String)::: attributes proxy get index:::return->fAttributes->getIndex
AttributesProxy#getIndex(String, String)::: attributes proxy get index:::return->uri->equals->fAttributes->getIndex->fAttributes->getIndex
AttributesProxy#isDeclared(int)::: attributes proxy is declared:::if->fAttributes->getLength->throw->new->ArrayIndexOutOfBoundsException->return->fAttributes->getAugmentations->getItem->equals
AttributesProxy#isDeclared(String)::: attributes proxy is declared:::index->getIndex->if->throw->new->IllegalArgumentException->return->fAttributes->getAugmentations->getItem->equals
AttributesProxy#isDeclared(String, String)::: attributes proxy is declared:::index->getIndex->if->throw->new->IllegalArgumentException->return->fAttributes->getAugmentations->getItem->equals
AttributesProxy#isSpecified(int)::: attributes proxy is specified:::if->fAttributes->getLength->throw->new->ArrayIndexOutOfBoundsException->return->fAttributes->isSpecified
AttributesProxy#isSpecified(String)::: attributes proxy is specified:::index->getIndex->if->throw->new->IllegalArgumentException->return->fAttributes->isSpecified
AttributesProxy#isSpecified(String, String)::: attributes proxy is specified:::index->getIndex->if->throw->new->IllegalArgumentException->return->fAttributes->isSpecified
AttributesProxy#getName(int)::: attributes proxy get name:::return->fAttributes->getQName
AugmentationsImpl#putItem(String, Object):::Add additional information identified by a key to the Augmentations structure.:::oldValue->fAugmentationsContainer->putItem->if->fAugmentationsContainer->isFull->fAugmentationsContainer->expand->return
AugmentationsImpl#getItem(String):::Get information identified by a key from the Augmentations structure:::return->fAugmentationsContainer->getItem
AugmentationsImpl#removeItem(String):::Remove additional info from the Augmentations structure:::return->fAugmentationsContainer->removeItem
AugmentationsImpl#keys():::Returns an enumeration of the keys in the Augmentations structure:::return->fAugmentationsContainer->keys
AugmentationsImpl#removeAllItems():::Remove all objects from the Augmentations structure.:::fAugmentationsContainer->clear
AugmentationsImpl#toString()::: augmentations impl to string:::return->fAugmentationsContainer->toString
AugmentationsImpl.AugmentationsItemsContainer#putItem(Object, Object)::: augmentations items container put item:::
AugmentationsImpl.AugmentationsItemsContainer#getItem(Object)::: augmentations items container get item:::
AugmentationsImpl.AugmentationsItemsContainer#removeItem(Object)::: augmentations items container remove item:::
AugmentationsImpl.AugmentationsItemsContainer#keys()::: augmentations items container keys:::
AugmentationsImpl.AugmentationsItemsContainer#clear()::: augmentations items container clear:::
AugmentationsImpl.AugmentationsItemsContainer#isFull()::: augmentations items container is full:::
AugmentationsImpl.AugmentationsItemsContainer#expand()::: augmentations items container expand:::
AugmentationsImpl.SmallContainer#keys()::: small container keys:::return->new->SmallContainerKeyEnumeration
AugmentationsImpl.SmallContainer#getItem(Object)::: small container get item:::for->i->return
AugmentationsImpl.SmallContainer#putItem(Object, Object)::: small container put item:::for->i->return
AugmentationsImpl.SmallContainer#removeItem(Object)::: small container remove item:::for->i->return
AugmentationsImpl.SmallContainer#clear()::: small container clear:::for->i
AugmentationsImpl.SmallContainer#isFull()::: small container is full:::return
AugmentationsImpl.SmallContainer#expand()::: small container expand:::expandedContainer->new->LargeContainer->for->i->return
AugmentationsImpl.SmallContainer#toString()::: small container to string:::buff->new->StringBuilder->buff->append->append->for->i->return->buff->toString
AugmentationsImpl.SmallContainer.SmallContainerKeyEnumeration#hasMoreElements()::: small container key enumeration has more elements:::return
AugmentationsImpl.SmallContainer.SmallContainerKeyEnumeration#nextElement()::: small container key enumeration next element:::if->throw->new->java.util.NoSuchElementException->nextVal->return
AugmentationsImpl.LargeContainer#getItem(Object)::: large container get item:::return->fAugmentations->get
AugmentationsImpl.LargeContainer#putItem(Object, Object)::: large container put item:::return->fAugmentations->put
AugmentationsImpl.LargeContainer#removeItem(Object)::: large container remove item:::return->fAugmentations->remove
AugmentationsImpl.LargeContainer#keys()::: large container keys:::return->Collections->fAugmentations->keySet->enumeration
AugmentationsImpl.LargeContainer#clear()::: large container clear:::fAugmentations->clear
AugmentationsImpl.LargeContainer#isFull()::: large container is full:::return
AugmentationsImpl.LargeContainer#expand()::: large container expand:::return
AugmentationsImpl.LargeContainer#toString()::: large container to string:::buff->new->StringBuilder->buff->append->foreach->fAugmentations->keySet->buff->append->buff->append->buff->append->buff->fAugmentations->get->append->return->buff->toString
DatatypeMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->if->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
DefaultErrorHandler#warning(String, String, XMLParseException):::Warning.:::printError
DefaultErrorHandler#error(String, String, XMLParseException):::Error.:::printError
DefaultErrorHandler#fatalError(String, String, XMLParseException):::Fatal error.:::printError->throw
DefaultErrorHandler#printError(String, XMLParseException):::Prints the error message.:::fOut->print->fOut->print->fOut->print->systemId->ex->getExpandedSystemId->if->index->systemId->lastIndexOf->if->systemId->substring->fOut->print->fOut->print->fOut->ex->getLineNumber->print->fOut->print->fOut->ex->getColumnNumber->print->fOut->print->fOut->ex->getMessage->print->fOut->println->fOut->flush
DOMEntityResolverWrapper#setEntityResolver(LSResourceResolver):::Sets the DOM entity resolver.:::
DOMEntityResolverWrapper#getEntityResolver():::Returns the DOM entity resolver.:::return
DOMEntityResolverWrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::if->inputSource->fEntityResolver->resolveResource->fEntityResolver->getType->resourceIdentifier->getNamespace->resourceIdentifier->getPublicId->resourceIdentifier->getLiteralSystemId->resourceIdentifier->getBaseSystemId->resolveResource->if->publicId->inputSource->getPublicId->systemId->inputSource->getSystemId->baseSystemId->inputSource->getBaseURI->byteStream->inputSource->getByteStream->charStream->inputSource->getCharacterStream->encoding->inputSource->getEncoding->data->inputSource->getStringData->xmlInputSource->new->XMLInputSource->if->xmlInputSource->setCharacterStream->else->if->xmlInputSource->setByteStream->else->if->data->length->xmlInputSource->new->StringReader->setCharacterStream->xmlInputSource->setEncoding->return->return
DOMEntityResolverWrapper#getType(XMLResourceIdentifier):::Determines the type of resource being resolved *:::if->desc->if->desc->getGrammarType->equals->return->return
DOMErrorHandlerWrapper#setErrorHandler(DOMErrorHandler):::Sets the DOM error handler.:::
DOMErrorHandlerWrapper#getErrorHandler()::: error handler wrapper get error handler:::return
DOMErrorHandlerWrapper#warning(String, String, XMLParseException)::: error handler wrapper warning:::exception->getMessage->locator->if->exception->getColumnNumber->exception->getLineNumber->exception->getCharacterOffset->exception->getExpandedSystemId->if->fDomErrorHandler->handleError
DOMErrorHandlerWrapper#error(String, String, XMLParseException):::Reports an error:::exception->getMessage->locator->if->exception->getColumnNumber->exception->getLineNumber->exception->getCharacterOffset->exception->getExpandedSystemId->if->fDomErrorHandler->handleError
DOMErrorHandlerWrapper#fatalError(String, String, XMLParseException):::Report a fatal error:::fErrorCode->setValues->domErrorType->DOMErrorTypeMap->getDOMErrorType->exception->getMessage->locator->if->exception->getColumnNumber->exception->getLineNumber->exception->getCharacterOffset->exception->getExpandedSystemId->if->fDomErrorHandler->handleError
DOMErrorHandlerWrapper#handleError(DOMError)::: error handler wrapper handle error:::printError->return
DOMErrorHandlerWrapper#printError(DOMError)::: error handler wrapper print error:::severity->error->getSeverity->fOut->print->if->fOut->print->else->if->fOut->print->else->fOut->print->fOut->print->locator->error->getLocation->if->fOut->locator->getLineNumber->print->fOut->print->fOut->locator->getColumnNumber->print->fOut->print->fOut->locator->getByteOffset->print->fOut->print->fOut->locator->getUtf16Offset->print->node->locator->getRelatedNode->if->fOut->print->fOut->node->getNodeName->print->fOut->print->systemId->locator->getUri->if->index->systemId->lastIndexOf->if->systemId->substring->fOut->print->fOut->print->fOut->print->fOut->error->getMessage->print->fOut->println->fOut->flush
DOMErrorHandlerWrapper.DOMErrorTypeMap#getDOMErrorType(XMLErrorCode)::: error type map get error type:::return->fgDOMErrorTypeTable->get
DOMInputSource#getNode()::: input source get node:::return
DOMInputSource#setNode(Node)::: input source set node:::
DOMInputSource#getSystemIdFromNode(Node)::: input source get system id from node:::if->try->return->node->getBaseURI->catch->return->return->finally->return
DOMUtil#copyInto(Node, Node):::Copies the source tree into the specified place in a destination tree:::factory->dest->getOwnerDocument->domimpl->start->parent->place->while->node->type->place->getNodeType->switch->factory->place->getNodeValue->createCDATASection->break->factory->place->getNodeValue->createComment->break->element->factory->place->getNodeName->createElement->attrs->place->getAttributes->attrCount->attrs->getLength->for->i->break->factory->place->getNodeName->createEntityReference->break->factory->place->getNodeName->place->getNodeValue->createProcessingInstruction->break->factory->place->getNodeValue->createTextNode->break->throw->place->getNodeName->new->IllegalArgumentException->dest->appendChild->if->place->hasChildNodes->place->getFirstChild->else->place->getNextSibling->while->parent->getNextSibling->parent->getParentNode->dest->getParentNode
DOMUtil#getFirstChildElement(Node):::Finds and returns the first child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->return->child->getNextSibling->return
DOMUtil#getFirstVisibleChildElement(Node):::Finds and returns the first visible child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->isHidden->return->child->getNextSibling->return
DOMUtil#getFirstVisibleChildElement(Node, Map):::Finds and returns the first visible child element node.:::child->parent->getFirstChild->while->if->child->getNodeType->isHidden->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node):::Finds and returns the last child element node:::child->parent->getLastChild->while->if->child->getNodeType->return->child->getPreviousSibling->return
DOMUtil#getLastVisibleChildElement(Node):::Finds and returns the last visible child element node.:::child->parent->getLastChild->while->if->child->getNodeType->isHidden->return->child->getPreviousSibling->return
DOMUtil#getLastVisibleChildElement(Node, Map):::Finds and returns the last visible child element node:::child->parent->getLastChild->while->if->child->getNodeType->isHidden->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node):::Finds and returns the next sibling element node.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->return->sibling->getNextSibling->return
DOMUtil#getNextVisibleSiblingElement(Node)::: util get next visible sibling element:::sibling->node->getNextSibling->while->if->sibling->getNodeType->isHidden->return->sibling->getNextSibling->return
DOMUtil#getNextVisibleSiblingElement(Node, Map)::: util get next visible sibling element:::sibling->node->getNextSibling->while->if->sibling->getNodeType->isHidden->return->sibling->getNextSibling->return
DOMUtil#setHidden(Node)::: util set hidden:::if->setReadOnly->else->if->setReadOnly
DOMUtil#setHidden(Node, Map)::: util set hidden:::if->setReadOnly->else->hiddenNodes->put
DOMUtil#setVisible(Node)::: util set visible:::if->setReadOnly->else->if->setReadOnly
DOMUtil#setVisible(Node, Map)::: util set visible:::if->setReadOnly->else->hiddenNodes->remove
DOMUtil#isHidden(Node)::: util is hidden:::if->return->getReadOnly->else->if->return->getReadOnly->return
DOMUtil#isHidden(Node, Map)::: util is hidden:::if->return->getReadOnly->else->return->hiddenNodes->containsKey
DOMUtil#getFirstChildElement(Node, String):::Finds and returns the first child node with the given name.:::child->parent->getFirstChild->while->if->child->getNodeType->if->child->getNodeName->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String):::Finds and returns the last child node with the given name.:::child->parent->getLastChild->while->if->child->getNodeType->if->child->getNodeName->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String):::Finds and returns the next sibling node with the given name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->if->sibling->getNodeName->equals->return->sibling->getNextSibling->return
DOMUtil#getFirstChildElementNS(Node, String, String):::Finds and returns the first child node with the given qualified name.:::child->parent->getFirstChild->while->if->child->getNodeType->childURI->child->getNamespaceURI->if->childURI->equals->child->getLocalName->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElementNS(Node, String, String):::Finds and returns the last child node with the given qualified name.:::child->parent->getLastChild->while->if->child->getNodeType->childURI->child->getNamespaceURI->if->childURI->equals->child->getLocalName->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElementNS(Node, String, String):::Finds and returns the next sibling node with the given qualified name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->siblingURI->sibling->getNamespaceURI->if->siblingURI->equals->sibling->getLocalName->equals->return->sibling->getNextSibling->return
DOMUtil#getFirstChildElement(Node, String[]):::Finds and returns the first child node with the given name.:::child->parent->getFirstChild->while->if->child->getNodeType->for->i->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String[]):::Finds and returns the last child node with the given name.:::child->parent->getLastChild->while->if->child->getNodeType->for->i->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String[]):::Finds and returns the next sibling node with the given name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->for->i->sibling->getNextSibling->return
DOMUtil#getFirstChildElementNS(Node, String[][]):::Finds and returns the first child node with the given qualified name.:::child->parent->getFirstChild->while->if->child->getNodeType->for->i->child->getNextSibling->return
DOMUtil#getLastChildElementNS(Node, String[][]):::Finds and returns the last child node with the given qualified name.:::child->parent->getLastChild->while->if->child->getNodeType->for->i->child->getPreviousSibling->return
DOMUtil#getNextSiblingElementNS(Node, String[][]):::Finds and returns the next sibling node with the given qualified name.:::sibling->node->getNextSibling->while->if->sibling->getNodeType->for->i->sibling->getNextSibling->return
DOMUtil#getFirstChildElement(Node, String, String, String):::Finds and returns the first child node with the given name and attribute name, value pair.:::child->parent->getFirstChild->while->if->child->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->child->getNextSibling->return
DOMUtil#getLastChildElement(Node, String, String, String):::Finds and returns the last child node with the given name and attribute name, value pair.:::child->parent->getLastChild->while->if->child->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->child->getPreviousSibling->return
DOMUtil#getNextSiblingElement(Node, String, String, String):::Finds and returns the next sibling node with the given name and attribute name, value pair:::sibling->node->getNextSibling->while->if->sibling->getNodeType->element->if->element->getNodeName->equals->element->getAttribute->equals->return->sibling->getNextSibling->return
DOMUtil#getChildText(Node):::Returns the concatenated child text of the specified node:::if->return->str->new->StringBuffer->child->node->getFirstChild->while->type->child->getNodeType->if->str->child->getNodeValue->append->else->if->str->getChildText->append->child->getNextSibling->return->str->toString
DOMUtil#getName(Node)::: util get name:::return->node->getNodeName
DOMUtil#getLocalName(Node):::returns local name of this element if not null, otherwise      returns the name of the node:::name->node->getLocalName->return->node->getNodeName
DOMUtil#getParent(Element)::: util get parent:::parent->elem->getParentNode->if->return->return
DOMUtil#getDocument(Node)::: util get document:::return->node->getOwnerDocument
DOMUtil#getRoot(Document)::: util get root:::return->doc->getDocumentElement
DOMUtil#getAttr(Element, String)::: util get attr:::return->elem->getAttributeNode
DOMUtil#getAttrNS(Element, String, String)::: util get attr s:::return->elem->getAttributeNodeNS
DOMUtil#getAttrs(Element)::: util get attrs:::attrMap->elem->getAttributes->attrArray->attrMap->getLength->new->AttrArr->for->i->attrMap->getLength->return
DOMUtil#getValue(Attr)::: util get value:::return->attribute->getValue
DOMUtil#getAttrValue(Element, String)::: util get attr value:::return->elem->getAttribute
DOMUtil#getAttrValueNS(Element, String, String)::: util get attr value s:::return->elem->getAttributeNS
DOMUtil#getPrefix(Node)::: util get prefix:::return->node->getPrefix
DOMUtil#getNamespaceURI(Node)::: util get namespace i:::return->node->getNamespaceURI
DOMUtil#getAnnotation(Node)::: util get annotation:::if->return->getAnnotation->return
DOMUtil#getSyntheticAnnotation(Node)::: util get synthetic annotation:::if->return->getSyntheticAnnotation->return
DOMUtil#createDOMException(short, Throwable):::Creates a DOMException:::de->cause->getMessage->new->DOMException->if->de->initCause->return
DOMUtil#createLSException(short, Throwable):::Creates an LSException:::lse->cause->getMessage->new->LSException->if->lse->initCause->return
DraconianErrorHandler#error(SAXParseException)::: draconian error handler error:::throw
DraconianErrorHandler#fatalError(SAXParseException)::: draconian error handler fatal error:::throw
DraconianErrorHandler#warning(SAXParseException)::: draconian error handler warning:::
EncodingMap#getIANA2JavaMapping(String):::Returns the Java encoding name for the specified IANA encoding name.:::return->fIANA2JavaMap->get
EncodingMap#getJava2IANAMapping(String):::Returns the IANA encoding name for the specified Java encoding name.:::return->fJava2IANAMap->get
EntityResolver2Wrapper#setEntityResolver(EntityResolver2):::Sets the SAX entity resolver wrapped by this object.:::
EntityResolver2Wrapper#getEntityResolver():::Returns the SAX entity resolver wrapped by this object.:::return
EntityResolver2Wrapper#getExternalSubset(XMLDTDDescription):::Locates an external subset for documents which do not explicitly provide one:::if->name->grammarDescription->getRootName->baseURI->grammarDescription->getBaseSystemId->try->inputSource->fEntityResolver->getExternalSubset->return->createXMLInputSource->catch->ex->e->getException->if->throw->new->XNIException->finally->return
EntityResolver2Wrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::if->pubId->resourceIdentifier->getPublicId->sysId->resourceIdentifier->getLiteralSystemId->baseURI->resourceIdentifier->getBaseSystemId->name->if->else->if->getEntityName->if->return->try->inputSource->fEntityResolver->resolveEntity->return->createXMLInputSource->catch->ex->e->getException->if->throw->new->XNIException->finally->return
EntityResolver2Wrapper#createXMLInputSource(InputSource, String):::Creates an XMLInputSource from a SAX InputSource.:::publicId->source->getPublicId->systemId->source->getSystemId->baseSystemId->byteStream->source->getByteStream->charStream->source->getCharacterStream->encoding->source->getEncoding->xmlInputSource->new->XMLInputSource->xmlInputSource->setByteStream->xmlInputSource->setCharacterStream->xmlInputSource->setEncoding->return
EntityResolverWrapper#setEntityResolver(EntityResolver):::Sets the SAX entity resolver.:::
EntityResolverWrapper#getEntityResolver():::Returns the SAX entity resolver.:::return
EntityResolverWrapper#resolveEntity(XMLResourceIdentifier):::Resolves an external parsed entity:::pubId->resourceIdentifier->getPublicId->sysId->resourceIdentifier->getExpandedSystemId->if->return->if->try->inputSource->fEntityResolver->resolveEntity->if->publicId->inputSource->getPublicId->systemId->inputSource->getSystemId->baseSystemId->resourceIdentifier->getBaseSystemId->byteStream->inputSource->getByteStream->charStream->inputSource->getCharacterStream->encoding->inputSource->getEncoding->xmlInputSource->new->XMLInputSource->xmlInputSource->setByteStream->xmlInputSource->setCharacterStream->xmlInputSource->setEncoding->return->catch->ex->e->getException->if->throw->new->XNIException->throw->new->XNIException->finally->return
ErrorHandlerProxy#error(SAXParseException)::: error handler proxy error:::eh->getErrorHandler->if->error->else->eh->ErrorHandlerWrapper->createXMLParseException->error
ErrorHandlerProxy#fatalError(SAXParseException)::: error handler proxy fatal error:::eh->getErrorHandler->if->fatalError->else->eh->ErrorHandlerWrapper->createXMLParseException->fatalError
ErrorHandlerProxy#warning(SAXParseException)::: error handler proxy warning:::eh->getErrorHandler->if->warning->else->eh->ErrorHandlerWrapper->createXMLParseException->warning
ErrorHandlerProxy#getErrorHandler()::: error handler proxy get error handler:::
ErrorHandlerWrapper#setErrorHandler(ErrorHandler):::Sets the SAX error handler.:::
ErrorHandlerWrapper#getErrorHandler():::Returns the SAX error handler.:::return
ErrorHandlerWrapper#warning(String, String, XMLParseException):::Reports a warning:::if->saxException->createSAXParseException->try->fErrorHandler->warning->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#error(String, String, XMLParseException):::Reports an error:::if->saxException->createSAXParseException->try->fErrorHandler->error->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#fatalError(String, String, XMLParseException):::Report a fatal error:::if->saxException->createSAXParseException->try->fErrorHandler->fatalError->catch->throw->createXMLParseException->throw->createXNIException->finally
ErrorHandlerWrapper#createSAXParseException(XMLParseException):::Creates a SAXParseException from an XMLParseException.:::return->exception->getMessage->exception->getPublicId->exception->getExpandedSystemId->exception->getLineNumber->exception->getColumnNumber->exception->getException->new->SAXParseException
ErrorHandlerWrapper#createXMLParseException(SAXParseException):::Creates an XMLParseException from a SAXParseException.:::fPublicId->exception->getPublicId->fExpandedSystemId->exception->getSystemId->fLineNumber->exception->getLineNumber->fColumnNumber->exception->getColumnNumber->location->new->XMLLocator->return->exception->getMessage->new->XMLParseException
ErrorHandlerWrapper#createXNIException(SAXException):::Creates an XNIException from a SAXException:::return->exception->getMessage->new->XNIException
FeatureState#of(Status)::: feature state of:::return->new->FeatureState
FeatureState#is(boolean)::: feature state is:::return->new->FeatureState
FeatureState#isExceptional()::: feature state is exceptional:::return->isExceptional
HTTPInputSource#getFollowHTTPRedirects():::Returns the preference whether HTTP redirects should be followed:::return
HTTPInputSource#setFollowHTTPRedirects(boolean):::Sets the preference whether HTTP redirects should be followed:::
HTTPInputSource#getHTTPRequestProperty(String):::Returns the value of the request property associated with the given property name.:::return->fHTTPRequestProperties->get
HTTPInputSource#getHTTPRequestProperties():::Returns an iterator for the request properties this input source contains:::return->fHTTPRequestProperties->entrySet->iterator
HTTPInputSource#setHTTPRequestProperty(String, String):::Sets the value of the request property associated with the given property name.:::if->fHTTPRequestProperties->put->else->fHTTPRequestProperties->remove
IntStack#size():::Returns the size of the stack.:::return
IntStack#push(int):::Pushes a value onto the stack.:::ensureCapacity
IntStack#peek():::Peeks at the top of the stack.:::return
IntStack#elementAt(int):::Returns the element at the specified depth in the stack.:::return
IntStack#pop():::Pops a value off of the stack.:::return
IntStack#clear():::Clears the stack.:::
IntStack#print():::Prints the stack.:::print->print->print->for->i->print->println
IntStack#ensureCapacity(int):::Ensures capacity.:::if->new->intArr->else->if->newdata->new->intArr->System->arraycopy
JAXPNamespaceContextWrapper#setNamespaceContext(javax.xml.namespace.NamespaceContext)::: namespace context wrapper set namespace context:::
JAXPNamespaceContextWrapper#getNamespaceContext()::: namespace context wrapper get namespace context:::return
JAXPNamespaceContextWrapper#setSymbolTable(SymbolTable)::: namespace context wrapper set symbol table:::
JAXPNamespaceContextWrapper#getSymbolTable()::: namespace context wrapper get symbol table:::return
JAXPNamespaceContextWrapper#setDeclaredPrefixes(List)::: namespace context wrapper set declared prefixes:::
JAXPNamespaceContextWrapper#getDeclaredPrefixes()::: namespace context wrapper get declared prefixes:::return
JAXPNamespaceContextWrapper#getURI(String)::: namespace context wrapper get i:::if->uri->fNamespaceContext->getNamespaceURI->if->equals->return->fSymbolTable->addSymbol->uri->intern->return
JAXPNamespaceContextWrapper#getPrefix(String)::: namespace context wrapper get prefix:::if->if->prefix->fNamespaceContext->getPrefix->if->return->fSymbolTable->addSymbol->prefix->intern->return
JAXPNamespaceContextWrapper#getAllPrefixes()::: namespace context wrapper get all prefixes:::return->Collections->new->TreeSet<String>->enumeration
JAXPNamespaceContextWrapper#pushContext()::: namespace context wrapper push context:::if->contextarray->new->intArr->System->arraycopy->fAllPrefixes->size->if->fAllPrefixes->addAll
JAXPNamespaceContextWrapper#popContext()::: namespace context wrapper pop context:::fAllPrefixes->setSize
JAXPNamespaceContextWrapper#declarePrefix(String, String)::: namespace context wrapper declare prefix:::return
JAXPNamespaceContextWrapper#getDeclaredPrefixCount()::: namespace context wrapper get declared prefix count:::return->fPrefixes->size
JAXPNamespaceContextWrapper#getDeclaredPrefixAt(int)::: namespace context wrapper get declared prefix at:::return->fPrefixes->get
JAXPNamespaceContextWrapper#reset()::: namespace context wrapper reset:::fAllPrefixes->clear
LocatorProxy#getPublicId():::Public identifier.:::return->fLocator->getPublicId
LocatorProxy#getSystemId():::System identifier.:::return->fLocator->getExpandedSystemId
LocatorProxy#getLineNumber():::Line number.:::return->fLocator->getLineNumber
LocatorProxy#getColumnNumber():::Column number.:::return->fLocator->getColumnNumber
LocatorProxy#getXMLVersion()::: locator proxy get version:::return->fLocator->getXMLVersion
LocatorProxy#getEncoding()::: locator proxy get encoding:::return->fLocator->getEncoding
LocatorWrapper#getColumnNumber()::: locator wrapper get column number:::return->locator->getColumnNumber
LocatorWrapper#getLineNumber()::: locator wrapper get line number:::return->locator->getLineNumber
LocatorWrapper#getBaseSystemId()::: locator wrapper get base system id:::return
LocatorWrapper#getExpandedSystemId()::: locator wrapper get expanded system id:::return->locator->getSystemId
LocatorWrapper#getLiteralSystemId()::: locator wrapper get literal system id:::return->locator->getSystemId
LocatorWrapper#getPublicId()::: locator wrapper get public id:::return->locator->getPublicId
LocatorWrapper#getEncoding()::: locator wrapper get encoding:::return
LocatorWrapper#getCharacterOffset():::Returns the character offset, or -1, if no character offset is available.  As this information is not available from org.xml.sax.Locator, always return -1.:::return
LocatorWrapper#getXMLVersion():::Returns the XML version of the current entity.  As this information is not available from org.xml.sax.Locator, always return null.:::return
MessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::
NamespaceContextWrapper#getNamespaceURI(String)::: namespace context wrapper get namespace i:::if->throw->new->IllegalArgumentException->return->fNamespaceContext->prefix->intern->getURI
NamespaceContextWrapper#getPrefix(String)::: namespace context wrapper get prefix:::if->throw->new->IllegalArgumentException->return->fNamespaceContext->namespaceURI->intern->getPrefix
NamespaceContextWrapper#getPrefixes(String):::TODO: Namespace doesn't give information giving multiple prefixes for the same namespaceURI.:::if->throw->new->IllegalArgumentException->else->vector->namespaceURI->intern->getPrefixes->return->vector->iterator
NamespaceContextWrapper#getNamespaceContext():::This method supports all functions in the NamespaceContext utility class:::return
NamespaceSupport#reset()::: namespace support reset:::
NamespaceSupport#pushContext()::: namespace support push context:::if->contextarray->new->intArr->System->arraycopy
NamespaceSupport#popContext()::: namespace support pop context:::
NamespaceSupport#declarePrefix(String, String)::: namespace support declare prefix:::if->return->for->i->if->namespacearray->new->StringArr->System->arraycopy->return
NamespaceSupport#getURI(String)::: namespace support get i:::for->i->return
NamespaceSupport#getPrefix(String)::: namespace support get prefix:::for->i->return
NamespaceSupport#getDeclaredPrefixCount()::: namespace support get declared prefix count:::return
NamespaceSupport#getDeclaredPrefixAt(int)::: namespace support get declared prefix at:::return
NamespaceSupport#getPrefixes()::: namespace support get prefixes:::count->if->prefixes->new->StringArr->prefix->unique->for->i->return->new->IteratorPrefixes
NamespaceSupport#getAllPrefixes()::: namespace support get all prefixes:::count->if->prefixes->new->StringArr->prefix->unique->for->i->return->new->Prefixes
NamespaceSupport#getPrefixes(String)::: namespace support get prefixes:::count->prefix->unique->prefixList->new->ArrayList<>->for->i->return
NamespaceSupport#containsPrefix(String):::Checks whether a binding or unbinding for the given prefix exists in the context.:::for->i->return
NamespaceSupport#containsPrefixInCurrentContext(String):::Checks whether a binding or unbinding for the given prefix exists in the current context.:::for->i->return
NamespaceSupport.IteratorPrefixes#hasNext()::: iterator prefixes has next:::return
NamespaceSupport.IteratorPrefixes#next()::: iterator prefixes next:::if->return->throw->new->NoSuchElementException
NamespaceSupport.IteratorPrefixes#toString()::: iterator prefixes to string:::buf->new->StringBuilder->for->i->return->buf->toString
NamespaceSupport.IteratorPrefixes#remove()::: iterator prefixes remove:::throw->new->UnsupportedOperationException
NamespaceSupport.Prefixes#hasMoreElements()::: prefixes has more elements:::return
NamespaceSupport.Prefixes#nextElement()::: prefixes next element:::if->return->throw->new->NoSuchElementException
NamespaceSupport.Prefixes#toString()::: prefixes to string:::buf->new->StringBuilder->for->i->return->buf->toString
ParserConfigurationSettings#addRecognizedFeatures(String[]):::Allows a parser to add parser specific features to be recognized and managed by the parser configuration.:::featureIdsCount->for->i
ParserConfigurationSettings#setFeature(String, boolean):::Set the state of a feature:::checkState->checkFeature->if->checkState->isExceptional->throw->new->XMLConfigurationException->fFeatures->put
ParserConfigurationSettings#addRecognizedProperties(String[]):::Allows a parser to add parser specific properties to be recognized and managed by the parser configuration.:::fRecognizedProperties->Arrays->asList->addAll
ParserConfigurationSettings#setProperty(String, Object):::setProperty:::checkState->checkProperty->if->checkState->isExceptional->throw->new->XMLConfigurationException->fProperties->put
ParserConfigurationSettings#getFeature(String):::Returns the state of a feature.:::state->getFeatureState->if->state->isExceptional->throw->new->XMLConfigurationException->return
ParserConfigurationSettings#getFeature(String, boolean)::: parser configuration settings get feature:::state->getFeatureState->if->state->isExceptional->return->return
ParserConfigurationSettings#getFeatureState(String)::: parser configuration settings get feature state:::state->fFeatures->get->if->checkState->checkFeature->if->checkState->isExceptional->return->return->FeatureState->is->return->FeatureState->is
ParserConfigurationSettings#getProperty(String):::Returns the value of a property.:::state->getPropertyState->if->state->isExceptional->throw->new->XMLConfigurationException->return
ParserConfigurationSettings#getProperty(String, Object)::: parser configuration settings get property:::state->getPropertyState->if->state->isExceptional->return->return
ParserConfigurationSettings#getPropertyState(String)::: parser configuration settings get property state:::propertyValue->fProperties->get->if->state->checkProperty->if->state->isExceptional->return->return->PropertyState->is
ParserConfigurationSettings#checkFeature(String):::Check a feature:::if->fRecognizedFeatures->contains->if->return->fParentSettings->getFeatureState->else->return->return
ParserConfigurationSettings#checkProperty(String):::Check a property:::if->fRecognizedProperties->contains->if->state->fParentSettings->getPropertyState->if->state->isExceptional->return->else->return->return
PrimeNumberSequenceGenerator#generateSequence(int[])::: prime number sequence generator generate sequence:::r->new->Random->IntStream->range->r->nextInt->forEach
PropertyState#of(Status)::: property state of:::return->new->PropertyState
PropertyState#is(Object)::: property state is:::return->new->PropertyState
PropertyState#isExceptional()::: property state is exceptional:::return->isExceptional
SAX2XNI#setDocumentHandler(XMLDocumentHandler)::: x2 i set document handler:::
SAX2XNI#getDocumentHandler()::: x2 i get document handler:::return
SAX2XNI#startDocument()::: x2 i start document:::try->nsContext->reset->xmlLocator->if->new->SimpleLocator->else->new->LocatorWrapper->fCore->startDocument->catch->throw->finally
SAX2XNI#endDocument()::: x2 i end document:::try->fCore->endDocument->catch->throw->finally
SAX2XNI#startElement(String, String, String, Attributes)::: x2 i start element:::try->fCore->createQName->createAttributes->startElement->catch->throw->finally
SAX2XNI#endElement(String, String, String)::: x2 i end element:::try->fCore->createQName->endElement->catch->throw->finally
SAX2XNI#characters(char[], int, int)::: x2 i characters:::try->fCore->new->XMLString->characters->catch->throw->finally
SAX2XNI#ignorableWhitespace(char[], int, int)::: x2 i ignorable whitespace:::try->fCore->new->XMLString->ignorableWhitespace->catch->throw->finally
SAX2XNI#startPrefixMapping(String, String)::: x2 i start prefix mapping:::nsContext->pushContext->nsContext->declarePrefix
SAX2XNI#endPrefixMapping(String)::: x2 i end prefix mapping:::nsContext->popContext
SAX2XNI#processingInstruction(String, String)::: x2 i processing instruction:::try->fCore->symbolize->createXMLString->processingInstruction->catch->throw->finally
SAX2XNI#skippedEntity(String)::: x2 i skipped entity:::
SAX2XNI#setDocumentLocator(Locator)::: x2 i set document locator:::
SAX2XNI#createQName(String, String, String):::Creates a QName object.:::idx->raw->indexOf->if->local->length->if->else->raw->substring->prefix->if->else->raw->substring->if->uri->length->return->symbolize->symbolize->symbolize->symbolize->new->QName
SAX2XNI#symbolize(String):::Symbolizes the specified string.:::if->return->else->return->symbolTable->addSymbol
SAX2XNI#createXMLString(String)::: x2 i create string:::return->str->toCharArray->str->length->new->XMLString
SAX2XNI#createAttributes(Attributes):::Creates an XMLAttributes object.:::xa->removeAllAttributes->len->att->getLength->for->i->return
SAXInputSource#setXMLReader(XMLReader)::: input source set reader:::
SAXInputSource#getXMLReader()::: input source get reader:::return
SAXInputSource#setInputSource(InputSource)::: input source set input source:::if->inputSource->getPublicId->setPublicId->inputSource->getSystemId->setSystemId->inputSource->getByteStream->setByteStream->inputSource->getCharacterStream->setCharacterStream->inputSource->getEncoding->setEncoding->else->setPublicId->setSystemId->setByteStream->setCharacterStream->setEncoding
SAXInputSource#getInputSource()::: input source get input source:::return
SAXInputSource#setPublicId(String):::Sets the public identifier.:::super->setPublicId->if->new->InputSource->fInputSource->setPublicId
SAXInputSource#setSystemId(String):::Sets the system identifier.:::super->setSystemId->if->new->InputSource->fInputSource->setSystemId
SAXInputSource#setByteStream(InputStream):::Sets the byte stream:::super->setByteStream->if->new->InputSource->fInputSource->setByteStream
SAXInputSource#setCharacterStream(Reader):::Sets the character stream:::super->setCharacterStream->if->new->InputSource->fInputSource->setCharacterStream
SAXInputSource#setEncoding(String):::Sets the encoding of the stream.:::super->setEncoding->if->new->InputSource->fInputSource->setEncoding
SAXLocatorWrapper#setLocator(Locator)::: locator wrapper set locator:::if
SAXLocatorWrapper#getLocator()::: locator wrapper get locator:::return
SAXLocatorWrapper#getPublicId()::: locator wrapper get public id:::if->return->fLocator->getPublicId->return
SAXLocatorWrapper#getLiteralSystemId()::: locator wrapper get literal system id:::if->return->fLocator->getSystemId->return
SAXLocatorWrapper#getBaseSystemId()::: locator wrapper get base system id:::return
SAXLocatorWrapper#getExpandedSystemId()::: locator wrapper get expanded system id:::return->getLiteralSystemId
SAXLocatorWrapper#getLineNumber()::: locator wrapper get line number:::if->return->fLocator->getLineNumber->return
SAXLocatorWrapper#getColumnNumber()::: locator wrapper get column number:::if->return->fLocator->getColumnNumber->return
SAXLocatorWrapper#getCharacterOffset()::: locator wrapper get character offset:::return
SAXLocatorWrapper#getEncoding()::: locator wrapper get encoding:::if->return->fLocator2->getEncoding->return
SAXLocatorWrapper#getXMLVersion()::: locator wrapper get version:::if->return->fLocator2->getXMLVersion->return
SAXMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->if->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
SecurityManager#setEntityExpansionLimit(int):::Sets the number of entity expansions that the parser should permit in a document.:::
SecurityManager#getEntityExpansionLimit():::Returns the number of entity expansions that the parser permits in a document.:::return
SecurityManager#setMaxOccurNodeLimit(int):::Sets the limit of the number of content model nodes that may be created when building a grammar for a W3C XML Schema that contains maxOccurs attributes with values other than "unbounded".:::
SecurityManager#getMaxOccurNodeLimit():::Returns the limit of the number of content model nodes that may be created when building a grammar for a W3C XML Schema that contains maxOccurs attributes with values other than "unbounded".:::return
SecurityManager#getElementAttrLimit()::: security manager get element attr limit:::return
SecurityManager#setElementAttrLimit(int)::: security manager set element attr limit:::
SecurityManager#readSystemProperties()::: security manager read system properties:::try->value->System->getProperty->if->value->equals->Integer->parseInt->if->else->catch->finally->try->value->System->getProperty->if->value->equals->Integer->parseInt->if->else->catch->finally->try->value->System->getProperty->if->value->equals->Integer->parseInt->if->else->catch->finally
ShadowedSymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::if->fSymbolTable->containsSymbol->return->fSymbolTable->addSymbol->return->super->addSymbol
ShadowedSymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::if->fSymbolTable->containsSymbol->return->fSymbolTable->addSymbol->return->super->addSymbol
ShadowedSymbolTable#hash(String):::Returns a hashcode value for the specified symbol:::return->fSymbolTable->hash
ShadowedSymbolTable#hash(char[], int, int):::Returns a hashcode value for the specified symbol information:::return->fSymbolTable->hash
StAXInputSource#getXMLStreamReader()::: st input source get stream reader:::return
StAXInputSource#getXMLEventReader()::: st input source get event reader:::return
StAXInputSource#shouldConsumeRemainingContent()::: st input source should consume remaining content:::return
StAXInputSource#setSystemId(String)::: st input source set system id:::throw->new->UnsupportedOperationException
StAXInputSource#getEventReaderSystemId(XMLEventReader)::: st input source get event reader system id:::try->if->return->reader->peek->getLocation->getSystemId->catch->finally->return
StAXLocationWrapper#setLocation(Location)::: st location wrapper set location:::
StAXLocationWrapper#getLocation()::: st location wrapper get location:::return
StAXLocationWrapper#getPublicId()::: st location wrapper get public id:::if->return->fLocation->getPublicId->return
StAXLocationWrapper#getLiteralSystemId()::: st location wrapper get literal system id:::if->return->fLocation->getSystemId->return
StAXLocationWrapper#getBaseSystemId()::: st location wrapper get base system id:::return
StAXLocationWrapper#getExpandedSystemId()::: st location wrapper get expanded system id:::return->getLiteralSystemId
StAXLocationWrapper#getLineNumber()::: st location wrapper get line number:::if->return->fLocation->getLineNumber->return
StAXLocationWrapper#getColumnNumber()::: st location wrapper get column number:::if->return->fLocation->getColumnNumber->return
StAXLocationWrapper#getCharacterOffset()::: st location wrapper get character offset:::if->return->fLocation->getCharacterOffset->return
StAXLocationWrapper#getEncoding()::: st location wrapper get encoding:::return
StAXLocationWrapper#getXMLVersion()::: st location wrapper get version:::return
SymbolHash#put(Object, Object):::Adds the key/value mapping to the key table:::collisionCount->hash->hash->bucket->for->entry->if->rehash->else->if->rebalance->hash->entry->new->Entry
SymbolHash#get(Object):::Get the value associated with the given key.:::bucket->hash->entry->search->if->return->return
SymbolHash#getLength():::Get the number of key/value pairs stored in this table.:::return
SymbolHash#getValues(Object[], int):::Add all values to the given array:::for->i->j->return
SymbolHash#getEntries():::Return key/value pairs of all entries in the map:::entries->new->ObjectArr->for->i->j->return
SymbolHash#makeClone():::Make a clone of this object.:::newTable->new->SymbolHash->fHashMultipliers->clone->for->i->return
SymbolHash#clear():::Remove all key/value association:::for->i
SymbolHash#search(Object, int)::: symbol hash search:::for->entry->return
SymbolHash#hash(Object):::Returns a hashcode value for the specified key.:::if->return->key->hashCode->return->hash0
SymbolHash#hash0(String)::: symbol hash hash0:::code->length->symbol->length->multipliers->for->i->return
SymbolHash#rehash():::Increases the capacity of and internally reorganizes this SymbolHash, in order to accommodate and access its entries more efficiently:::rehashCommon
SymbolHash#rebalance():::Randomly selects a new hash function and reorganizes this SymbolHash in order to more evenly distribute its entries across the table:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->rehashCommon
SymbolHash#rehashCommon(int)::: symbol hash rehash common:::oldCapacity->oldTable->newTable->new->EntryArr->for->i
SymbolHash.Entry#makeClone()::: entry make clone:::entry->new->Entry->if->next->makeClone->return
SymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::collisionCount->bucket->hash->for->entry->return->addSymbol0
SymbolTable#addSymbol0(String, int, int)::: symbol table add symbol0:::if->rehash->hash->else->if->rebalance->hash->entry->new->Entry->return
SymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::collisionCount->bucket->hash->for->entry->return->addSymbol0
SymbolTable#addSymbol0(char[], int, int, int, int)::: symbol table add symbol0:::if->rehash->hash->else->if->rebalance->hash->entry->new->Entry->return
SymbolTable#hash(String):::Returns a hashcode value for the specified symbol:::if->return->symbol->hashCode->return->hash0
SymbolTable#hash0(String)::: symbol table hash0:::code->length->symbol->length->multipliers->for->i->return
SymbolTable#hash(char[], int, int):::Returns a hashcode value for the specified symbol information:::if->code->for->i->return->return->hash0
SymbolTable#hash0(char[], int, int)::: symbol table hash0:::code->multipliers->for->i->return
SymbolTable#rehash():::Increases the capacity of and internally reorganizes this SymbolTable, in order to accommodate and access its entries more efficiently:::rehashCommon
SymbolTable#rebalance():::Randomly selects a new hash function and reorganizes this SymbolTable in order to more evenly distribute its entries across the table:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->rehashCommon
SymbolTable#rehashCommon(int)::: symbol table rehash common:::oldCapacity->oldTable->newTable->new->EntryArr->for->i
SymbolTable#containsSymbol(String):::Returns true if the symbol table already contains the specified symbol.:::bucket->hash->length->symbol->length->for->entry->return
SymbolTable#containsSymbol(char[], int, int):::Returns true if the symbol table already contains the specified symbol.:::bucket->hash->for->entry->return
SynchronizedSymbolTable#addSymbol(String):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::synchronized->return->fSymbolTable->addSymbol
SynchronizedSymbolTable#addSymbol(char[], int, int):::Adds the specified symbol to the symbol table and returns a reference to the unique symbol:::synchronized->return->fSymbolTable->addSymbol
SynchronizedSymbolTable#containsSymbol(String):::Returns true if the symbol table already contains the specified symbol.:::synchronized->return->fSymbolTable->containsSymbol
SynchronizedSymbolTable#containsSymbol(char[], int, int):::Returns true if the symbol table already contains the specified symbol.:::synchronized->return->fSymbolTable->containsSymbol
TeeXMLDocumentFilterImpl#getSide()::: tee document filter impl get side:::return
TeeXMLDocumentFilterImpl#setSide(XMLDocumentHandler)::: tee document filter impl set side:::
TeeXMLDocumentFilterImpl#getDocumentSource()::: tee document filter impl get document source:::return
TeeXMLDocumentFilterImpl#setDocumentSource(XMLDocumentSource)::: tee document filter impl set document source:::
TeeXMLDocumentFilterImpl#getDocumentHandler()::: tee document filter impl get document handler:::return
TeeXMLDocumentFilterImpl#setDocumentHandler(XMLDocumentHandler)::: tee document filter impl set document handler:::
TeeXMLDocumentFilterImpl#characters(XMLString, Augmentations)::: tee document filter impl characters:::side->characters->next->characters
TeeXMLDocumentFilterImpl#comment(XMLString, Augmentations)::: tee document filter impl comment:::side->comment->next->comment
TeeXMLDocumentFilterImpl#doctypeDecl(String, String, String, Augmentations)::: tee document filter impl doctype decl:::side->doctypeDecl->next->doctypeDecl
TeeXMLDocumentFilterImpl#emptyElement(QName, XMLAttributes, Augmentations)::: tee document filter impl empty element:::side->emptyElement->next->emptyElement
TeeXMLDocumentFilterImpl#endCDATA(Augmentations)::: tee document filter impl end a:::side->endCDATA->next->endCDATA
TeeXMLDocumentFilterImpl#endDocument(Augmentations)::: tee document filter impl end document:::side->endDocument->next->endDocument
TeeXMLDocumentFilterImpl#endElement(QName, Augmentations)::: tee document filter impl end element:::side->endElement->next->endElement
TeeXMLDocumentFilterImpl#endGeneralEntity(String, Augmentations)::: tee document filter impl end general entity:::side->endGeneralEntity->next->endGeneralEntity
TeeXMLDocumentFilterImpl#ignorableWhitespace(XMLString, Augmentations)::: tee document filter impl ignorable whitespace:::side->ignorableWhitespace->next->ignorableWhitespace
TeeXMLDocumentFilterImpl#processingInstruction(String, XMLString, Augmentations)::: tee document filter impl processing instruction:::side->processingInstruction->next->processingInstruction
TeeXMLDocumentFilterImpl#startCDATA(Augmentations)::: tee document filter impl start a:::side->startCDATA->next->startCDATA
TeeXMLDocumentFilterImpl#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: tee document filter impl start document:::side->startDocument->next->startDocument
TeeXMLDocumentFilterImpl#startElement(QName, XMLAttributes, Augmentations)::: tee document filter impl start element:::side->startElement->next->startElement
TeeXMLDocumentFilterImpl#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: tee document filter impl start general entity:::side->startGeneralEntity->next->startGeneralEntity
TeeXMLDocumentFilterImpl#textDecl(String, String, Augmentations)::: tee document filter impl text decl:::side->textDecl->next->textDecl
TeeXMLDocumentFilterImpl#xmlDecl(String, String, String, Augmentations)::: tee document filter impl xml decl:::side->xmlDecl->next->xmlDecl
URI#initialize(URI):::Initialize all fields of this URI from another URI.:::p_other->getScheme->p_other->getUserinfo->p_other->getHost->p_other->getPort->p_other->getRegBasedAuthority->p_other->getPath->p_other->getQueryString->p_other->getFragment
URI#initialize(URI, String, boolean):::Initializes this URI from a base URI and a URI specification string:::uriSpec->uriSpecLen->uriSpec->length->if->if->return->throw->new->MalformedURIException->if->initialize->return->index->colonIdx->uriSpec->indexOf->if->searchFrom->slashIdx->uriSpec->lastIndexOf->queryIdx->uriSpec->lastIndexOf->fragmentIdx->uriSpec->lastIndexOf->if->if->throw->new->MalformedURIException->else->initializeScheme->m_scheme->length->if->uriSpec->charAt->throw->new->MalformedURIException->else->if->uriSpec->indexOf->throw->new->MalformedURIException->if->uriSpec->charAt->uriSpec->charAt->startPos->testChar->while->uriSpec->charAt->if->break->if->if->uriSpec->substring->initializeAuthority->else->initializePath->if->absolutize
URI#initialize(URI, String):::Initializes this URI from a base URI and a URI specification string:::uriSpec->uriSpecLen->uriSpec->length->if->throw->new->MalformedURIException->if->initialize->return->index->colonIdx->uriSpec->indexOf->if->searchFrom->slashIdx->uriSpec->lastIndexOf->queryIdx->uriSpec->lastIndexOf->fragmentIdx->uriSpec->lastIndexOf->if->if->throw->new->MalformedURIException->else->initializeScheme->m_scheme->length->if->uriSpec->charAt->throw->new->MalformedURIException->else->if->uriSpec->indexOf->throw->new->MalformedURIException->if->uriSpec->charAt->uriSpec->charAt->startPos->testChar->while->uriSpec->charAt->if->break->if->if->uriSpec->substring->initializeAuthority->else->if->else->throw->new->MalformedURIException->initializePath->if->absolutize
URI#absolutize(URI):::Absolutize URI with given base URI.:::if->m_path->length->p_base->getScheme->p_base->getUserinfo->p_base->getHost->p_base->getPort->p_base->getRegBasedAuthority->p_base->getPath->if->p_base->getQueryString->if->p_base->getFragment->return->if->p_base->getScheme->else->return->if->p_base->getUserinfo->p_base->getHost->p_base->getPort->p_base->getRegBasedAuthority->else->return->if->m_path->length->m_path->startsWith->return->path->basePath->p_base->getPath->if->basePath->length->lastSlash->basePath->lastIndexOf->if->basePath->substring->else->if->m_path->length->path->concat->index->while->path->indexOf->path->substring->path->substring->concat->if->path->endsWith->path->path->length->substring->segIndex->tempString->while->path->indexOf->path->path->indexOf->substring->tempString->lastIndexOf->if->if->tempString->substring->equals->path->substring->path->substring->concat->else->else->if->path->endsWith->path->path->length->substring->tempString->lastIndexOf->if->path->substring
URI#initializeScheme(String):::Initialize the scheme for this URI from a URI string spec.:::uriSpecLen->p_uriSpec->length->index->scheme->testChar->while->p_uriSpec->charAt->if->break->p_uriSpec->substring->if->scheme->length->throw->new->MalformedURIException->else->setScheme
URI#initializeAuthority(String):::Initialize the authority (either server or registry based) for this URI from a URI string spec.:::index->start->end->p_uriSpec->length->testChar->userinfo->if->p_uriSpec->indexOf->while->p_uriSpec->charAt->if->break->p_uriSpec->substring->host->hasPort->if->if->p_uriSpec->charAt->bracketIndex->p_uriSpec->indexOf->if->p_uriSpec->charAt->else->else->colonIndex->p_uriSpec->lastIndexOf->p_uriSpec->substring->port->if->host->length->if->while->portStr->p_uriSpec->substring->if->portStr->length->try->Integer->parseInt->if->catch->finally->if->isValidServerBasedAuthority->return->else->if->isValidRegistryBasedAuthority->return->return
URI#isValidServerBasedAuthority(String, int, String):::Determines whether the components host, port, and user info are valid as a server authority.:::if->isWellFormedAddress->return->if->return->if->index->end->userinfo->length->testChar->while->userinfo->charAt->if->if->userinfo->charAt->isHex->userinfo->charAt->isHex->return->else->if->isUserinfoCharacter->return->return
URI#isValidRegistryBasedAuthority(String):::Determines whether the given string is a registry based authority.:::index->end->authority->length->testChar->while->authority->charAt->if->if->authority->charAt->isHex->authority->charAt->isHex->return->else->if->isPathCharacter->return->return
URI#initializePath(String, int):::Initialize the path for this URI from a URI string spec.:::if->throw->new->MalformedURIException->index->start->end->p_uriSpec->length->testChar->if->if->getScheme->p_uriSpec->charAt->while->p_uriSpec->charAt->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isPathCharacter->if->break->throw->new->MalformedURIException->else->while->p_uriSpec->charAt->if->break->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isURICharacter->throw->new->MalformedURIException->p_uriSpec->substring->if->while->p_uriSpec->charAt->if->break->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isURICharacter->throw->new->MalformedURIException->p_uriSpec->substring->if->while->p_uriSpec->charAt->if->if->p_uriSpec->charAt->isHex->p_uriSpec->charAt->isHex->throw->new->MalformedURIException->else->if->isURICharacter->throw->new->MalformedURIException->p_uriSpec->substring
URI#getScheme():::Get the scheme for this URI.:::return
URI#getSchemeSpecificPart():::Get the scheme-specific part for this URI (everything following the scheme and the first colon):::schemespec->new->StringBuilder->if->schemespec->append->if->if->schemespec->append->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->else->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->return->schemespec->toString
URI#getUserinfo():::Get the userinfo for this URI.:::return
URI#getHost():::Get the host for this URI.:::return
URI#getPort():::Get the port for this URI.:::return
URI#getRegBasedAuthority():::Get the registry based authority for this URI.:::return
URI#getAuthority():::Get the authority for this URI.:::authority->new->StringBuilder->if->authority->append->if->if->authority->append->authority->append->authority->append->if->authority->append->authority->append->else->authority->append->return->authority->toString
URI#getPath(boolean, boolean):::Get the path for this URI (optionally with the query string and fragment).:::pathString->new->StringBuilder->if->pathString->append->pathString->append->if->pathString->append->pathString->append->return->pathString->toString
URI#getPath():::Get the path for this URI:::return
URI#getQueryString():::Get the query string for this URI.:::return
URI#getFragment():::Get the fragment for this URI.:::return
URI#setScheme(String):::Set the scheme for this URI:::if->throw->new->MalformedURIException->if->isConformantSchemeName->throw->new->MalformedURIException->p_scheme->toLowerCase
URI#setUserinfo(String):::Set the userinfo for this URI:::if->return->else->if->throw->new->MalformedURIException->index->end->p_userinfo->length->testChar->while->p_userinfo->charAt->if->if->p_userinfo->charAt->isHex->p_userinfo->charAt->isHex->throw->new->MalformedURIException->else->if->isUserinfoCharacter->throw->new->MalformedURIException
URI#setHost(String):::Set the host for this URI:::if->p_host->length->if->return->else->if->isWellFormedAddress->throw->new->MalformedURIException
URI#setPort(int):::Set the port for this URI:::if->if->throw->new->MalformedURIException->else->if->throw->new->MalformedURIException
URI#setRegBasedAuthority(String):::Sets the registry based authority for this URI.  Note: This method overwrites server based authority if it previously existed in this URI.:::if->return->else->if->authority->length->isValidRegistryBasedAuthority->authority->indexOf->throw->new->MalformedURIException
URI#setPath(String):::Set the path for this URI:::if->else->initializePath
URI#appendPath(String):::Append to the end of the path of this URI:::if->p_addToPath->trim->length->return->if->isURIString->throw->new->MalformedURIException->if->m_path->trim->length->if->p_addToPath->startsWith->else->else->if->m_path->endsWith->if->p_addToPath->startsWith->m_path->p_addToPath->substring->concat->else->m_path->concat->else->if->p_addToPath->startsWith->m_path->concat->else->m_path->concat
URI#setQueryString(String):::Set the query string for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#setFragment(String):::Set the fragment for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#equals(Object):::Determines if the passed-in Object is equivalent to this URI.:::if->testURI->if->m_scheme->equals->m_userinfo->equals->m_host->equals->m_path->equals->m_queryString->equals->m_fragment->equals->return->return
URI#hashCode()::: i hash code:::hash->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->return
URI#toString():::Get the URI as a string specification:::uriSpecString->new->StringBuilder->if->uriSpecString->append->uriSpecString->append->uriSpecString->getSchemeSpecificPart->append->return->uriSpecString->toString
URI#isGenericURI():::Get the indicator as to whether this URI uses the "generic URI" syntax.:::return
URI#isAbsoluteURI():::Returns whether this URI represents an absolute URI.:::return
URI#isConformantSchemeName(String):::Determine whether a scheme conforms to the rules for a scheme name:::if->p_scheme->trim->length->return->if->p_scheme->charAt->isAlpha->return->testChar->schemeLength->p_scheme->length->for->i->return
URI#isWellFormedAddress(String):::Determine whether a string is syntactically capable of representing a valid IPv4 address, IPv6 reference or the domain name of a network host:::if->return->addrLength->address->length->if->return->if->address->startsWith->return->isWellFormedIPv6Reference->if->address->startsWith->address->startsWith->address->endsWith->return->index->address->lastIndexOf->if->address->endsWith->address->substring->lastIndexOf->if->address->charAt->isDigit->return->isWellFormedIPv4Address->else->if->return->testChar->labelCharCount->for->i->return
URI#isWellFormedIPv4Address(String):::Determines whether a string is an IPv4 address as defined by RFC 2373, and under the further constraint that it must be a 32-bit address:::addrLength->address->length->testChar->numDots->numDigits->for->i->return
URI#isWellFormedIPv6Reference(String):::Determines whether a string is an IPv6 reference as defined by RFC 2732, where IPv6address is defined in RFC 2373:::addrLength->address->length->index->end->if->address->charAt->address->charAt->return->counter->new->intArr->scanHexSequence->if->return->else->if->return->if->address->charAt->if->address->charAt->if->return->if->return->else->return->address->substring->isWellFormedIPv4Address->else->return->prevCount->scanHexSequence->return->address->substring->isWellFormedIPv4Address
URI#scanHexSequence(String, int, int, int[]):::Helper method for isWellFormedIPv6Reference which scans the hex sequences of an IPv6 address:::testChar->numDigits->start->for->return
URI#isDigit(char):::Determine whether a char is a digit.:::return
URI#isHex(char):::Determine whether a character is a hexadecimal character.:::return
URI#isAlpha(char):::Determine whether a char is an alphabetic character: a-z or A-Z:::return
URI#isAlphanum(char):::Determine whether a char is an alphanumeric: 0-9, a-z or A-Z:::return
URI#isReservedCharacter(char):::Determine whether a character is a reserved character: ';', '/', '?', ':', '@', '&', '=', '+', '$', ',', '[', or ']':::return
URI#isUnreservedCharacter(char):::Determine whether a char is an unreserved character.:::return
URI#isURICharacter(char):::Determine whether a char is a URI character (reserved or unreserved, not including '%' for escaped octets).:::return
URI#isSchemeCharacter(char):::Determine whether a char is a scheme character.:::return
URI#isUserinfoCharacter(char):::Determine whether a char is a userinfo character.:::return
URI#isPathCharacter(char):::Determine whether a char is a path character.:::return
URI#isURIString(String):::Determine whether a given string contains only URI characters (also called "uric" in RFC 2396):::if->return->end->p_uric->length->testChar->for->i->return
XML11Char#isXML11Space(int):::Returns true if the specified character is a space character as amdended in the XML 1.1 specification.:::return
XML11Char#isXML11Valid(int):::Returns true if the specified character is valid:::return
XML11Char#isXML11Invalid(int):::Returns true if the specified character is invalid.:::return->isXML11Valid
XML11Char#isXML11ValidLiteral(int):::Returns true if the specified character is valid and permitted outside of a character reference:::return
XML11Char#isXML11Content(int):::Returns true if the specified character can be considered content in an external parsed entity.:::return
XML11Char#isXML11InternalEntityContent(int):::Returns true if the specified character can be considered content in an internal parsed entity.:::return
XML11Char#isXML11NameStart(int):::Returns true if the specified character is a valid name start character as defined by production [4] in the XML 1.1 specification.:::return
XML11Char#isXML11Name(int):::Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1.1 specification.:::return
XML11Char#isXML11NCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NameHighSurrogate(int):::Returns whether the given character is a valid high surrogate for a name character:::return
XML11Char#isXML11ValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.1 Recommendation:::length->name->length->if->return->i->ch->name->charAt->if->isXML11NameStart->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NameStart->return->else->return->while->name->charAt->if->isXML11Name->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11Name->return->else->return->return
XML11Char#isXML11ValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.1 Recommendation:::length->ncName->length->if->return->i->ch->ncName->charAt->if->isXML11NCNameStart->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCNameStart->return->else->return->while->ncName->charAt->if->isXML11NCName->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCName->return->else->return->return
XML11Char#isXML11ValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.1 Recommendation:::length->nmtoken->length->if->return->for->i->return
XMLAttributesImpl#setNamespaces(boolean):::Sets whether namespace processing is being performed:::
XMLAttributesImpl#addAttribute(QName, String, String):::Adds an attribute:::return->addAttribute
XMLAttributesImpl#addAttribute(QName, String, String, XMLString)::: attributes impl add attribute:::index->if->length->getIndexFast->getIndexFast->if->if->attributes->new->AttributeArr->System->arraycopy->for->i->else->if->length->getIndexFast->if->prepareAndPopulateTableView->bucket->getTableViewBucket->if->if->attributes->new->AttributeArr->System->arraycopy->for->i->else->collisionCount->found->while->if->break->if->if->attributes->new->AttributeArr->System->arraycopy->for->i->if->setValues->rebalanceTableView->else->else->getIndexFast->attribute->setValues->if->removeAllItems->return
XMLAttributesImpl#removeAllAttributes():::Removes all of the attributes:::
XMLAttributesImpl#removeAttributeAt(int):::Removes the attribute at the specified index:::if->removedAttr->System->arraycopy
XMLAttributesImpl#setName(int, QName):::Sets the name of the attribute at the specified index.:::setValues
XMLAttributesImpl#getName(int, QName):::Sets the fields in the given QName structure with the values of the attribute name at the specified index.:::attrName->setValues
XMLAttributesImpl#setType(int, String):::Sets the type of the attribute at the specified index.:::
XMLAttributesImpl#setValue(int, String):::Sets the value of the attribute at the specified index:::setValue
XMLAttributesImpl#setValue(int, String, XMLString)::: attributes impl set value:::attribute
XMLAttributesImpl#setNonNormalizedValue(int, String):::Sets the non-normalized value of the attribute at the specified index.:::if
XMLAttributesImpl#getNonNormalizedValue(int):::Returns the non-normalized value of the attribute at the specified index:::value->return
XMLAttributesImpl#setSpecified(int, boolean):::Sets whether an attribute is specified in the instance document or not.:::
XMLAttributesImpl#isSpecified(int):::Returns true if the attribute is specified in the instance document.:::return
XMLAttributesImpl#getLength():::Return the number of attributes in the list:::return
XMLAttributesImpl#getType(int):::Look up an attribute's type by index:::if->return->return->getReportableType
XMLAttributesImpl#getType(String):::Look up an attribute's type by XML 1.0 qualified name:::index->getIndex->return->getReportableType
XMLAttributesImpl#getValue(int):::Look up an attribute's value by index:::if->return->if->toString->return
XMLAttributesImpl#getValue(String):::Look up an attribute's value by XML 1.0 qualified name:::index->getIndex->if->return->if->toString->return
XMLAttributesImpl#getName(int):::Return the name of an attribute in this list (by position):::if->return->return
XMLAttributesImpl#getIndex(String):::Look up the index of an attribute by XML 1.0 qualified name.:::for->i->return
XMLAttributesImpl#getIndex(String, String):::Look up the index of an attribute by Namespace name.:::for->i->return
XMLAttributesImpl#getIndexByLocalName(String):::Look up the index of an attribute by local name only, ignoring its namespace.:::for->i->return
XMLAttributesImpl#getLocalName(int):::Look up an attribute's local name by index.:::if->return->if->return->return
XMLAttributesImpl#getQName(int):::Look up an attribute's XML 1.0 qualified name by index.:::if->return->rawname->return
XMLAttributesImpl#getQualifiedName(int)::: attributes impl get qualified name:::if->return->return
XMLAttributesImpl#getType(String, String):::Look up an attribute's type by Namespace name:::if->return->index->getIndex->return->getType
XMLAttributesImpl#getIndexFast(String):::Look up the index of an attribute by XML 1.0 qualified name:::for->i->return
XMLAttributesImpl#addAttributeNS(QName, String, String):::Adds an attribute:::index->if->attributes->if->new->AttributeArr->else->new->AttributeArr->System->arraycopy->for->i->attribute->setValues->removeAllItems
XMLAttributesImpl#checkDuplicatesNS():::Checks for duplicate expanded names (local part and namespace name pairs) in the attribute specification:::length->if->attributes->for->i->return->else->return->checkManyDuplicatesNS
XMLAttributesImpl#checkManyDuplicatesNS()::: attributes impl check many duplicates s:::prepareTableView->attr->bucket->length->attributes->attributeTableView->attributeTableViewChainState->largeCount->for->i->return
XMLAttributesImpl#getIndexFast(String, String):::Look up the index of an attribute by Namespace name:::for->i->return
XMLAttributesImpl#getReportableType(String):::Returns the value passed in or NMTOKEN if it's an enumerated type.:::if->type->charAt->return->return
XMLAttributesImpl#getTableViewBucket(String):::Returns the position in the table view where the given attribute name would be hashed.:::return->hash
XMLAttributesImpl#getTableViewBucket(String, String):::Returns the position in the table view where the given attribute name would be hashed.:::if->return->hash->else->return->hash
XMLAttributesImpl#hash(String)::: attributes impl hash:::if->return->localpart->hashCode->return->hash0
XMLAttributesImpl#hash(String, String)::: attributes impl hash:::if->return->localpart->hashCode->uri->hashCode->return->hash0->hash0
XMLAttributesImpl#hash0(String)::: attributes impl hash0:::code->length->symbol->length->multipliers->for->i->return
XMLAttributesImpl#cleanTableView():::Purges all elements from the table view.:::if->if->for->i
XMLAttributesImpl#growTableView():::Increases the capacity of the table view.:::length->tableViewBuckets->do->if->break->while
XMLAttributesImpl#prepareTableView():::Prepares the table view of the attributes list for use.:::if->growTableView->if->new->AttributeArr->new->intArr->else->cleanTableView
XMLAttributesImpl#prepareAndPopulateTableView():::Prepares the table view of the attributes list for use, and populates it with the attributes which have been previously read.:::prepareAndPopulateTableView
XMLAttributesImpl#prepareAndPopulateTableView(int)::: attributes impl prepare and populate table view:::prepareTableView->attr->bucket->for->i
XMLAttributesImpl#getPrefix(int):::Returns the prefix of the attribute at the specified index.:::if->return->prefix->return
XMLAttributesImpl#getURI(int):::Look up an attribute's Namespace URI by index.:::if->return->uri->return
XMLAttributesImpl#getValue(String, String):::Look up an attribute's value by Namespace name and Local name:::index->getIndex->return->getValue
XMLAttributesImpl#getAugmentations(String, String):::Look up an augmentations by Namespace name.:::index->getIndex->return
XMLAttributesImpl#getAugmentations(String):::Look up an augmentation by XML 1.0 qualified name:::index->getIndex->return
XMLAttributesImpl#getAugmentations(int):::Look up an augmentations by attributes index.:::if->return->return
XMLAttributesImpl#setAugmentations(int, Augmentations):::Sets the augmentations of the attribute at the specified index.:::
XMLAttributesImpl#setURI(int, String):::Sets the uri of the attribute at the specified index.:::
XMLAttributesImpl#refresh():::This method will be invoked by XMLEntityReader before ScannedEntities buffer is reloaded.:::if->for->i
XMLAttributesImpl#refresh(int)::: attributes impl refresh:::
XMLAttributesImpl#prepareAndPopulateTableViewNS(int)::: attributes impl prepare and populate table view s:::prepareTableView->attr->bucket->for->i
XMLAttributesImpl#rebalanceTableView(int):::Randomly selects a new hash function and reorganizes the table view in order to more evenly distribute its entries:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->prepareAndPopulateTableView
XMLAttributesImpl#rebalanceTableViewNS(int):::Randomly selects a new hash function and reorganizes the table view in order to more evenly distribute its entries:::if->new->intArr->PrimeNumberSequenceGenerator->generateSequence->prepareAndPopulateTableViewNS
XMLAttributesIteratorImpl#hasNext()::: attributes iterator impl has next:::return->getLength
XMLAttributesIteratorImpl#next()::: attributes iterator impl next:::if->hasNext->return->else->throw->new->NoSuchElementException
XMLAttributesIteratorImpl#remove()::: attributes iterator impl remove:::if->removeAttributeAt->else->throw->new->IllegalStateException
XMLAttributesIteratorImpl#removeAllAttributes()::: attributes iterator impl remove all attributes:::super->removeAllAttributes
XMLChar#isSupplemental(int):::Returns true if the specified character is a supplemental character.:::return
XMLChar#supplemental(char, char):::Returns true the supplemental character corresponding to the given surrogates.:::return
XMLChar#highSurrogate(int):::Returns the high surrogate of a supplemental character:::return
XMLChar#lowSurrogate(int):::Returns the low surrogate of a supplemental character:::return
XMLChar#isHighSurrogate(int):::Returns whether the given character is a high surrogate:::return
XMLChar#isLowSurrogate(int):::Returns whether the given character is a low surrogate:::return
XMLChar#isValid(int):::Returns true if the specified character is valid:::return
XMLChar#isInvalid(int):::Returns true if the specified character is invalid.:::return->isValid
XMLChar#isContent(int):::Returns true if the specified character can be considered content.:::return
XMLChar#isMarkup(int):::Returns true if the specified character can be considered markup:::return
XMLChar#isSpace(int):::Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.:::return
XMLChar#isNameStart(int):::Returns true if the specified character is a valid name start character as defined by production [5] in the XML 1.0 specification.:::return
XMLChar#isName(int):::Returns true if the specified character is a valid name character as defined by production [4] in the XML 1.0 specification.:::return
XMLChar#isNCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML recommendation.:::return
XMLChar#isNCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation.:::return
XMLChar#isPubid(int):::Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1.0 specification.:::return
XMLChar#isValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.0 Recommendation:::length->name->length->if->return->ch->name->charAt->if->isNameStart->return->for->i->return
XMLChar#isValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.0 Recommendation:::length->ncName->length->if->return->ch->ncName->charAt->if->isNCNameStart->return->for->i->return
XMLChar#isValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation:::length->nmtoken->length->if->return->for->i->return
XMLChar#isValidIANAEncoding(String):::Returns true if the encoding name is a valid IANA encoding:::if->length->ianaEncoding->length->if->c->ianaEncoding->charAt->if->for->i->return->return
XMLChar#isValidJavaEncoding(String):::Returns true if the encoding name is a valid Java encoding:::if->length->javaEncoding->length->if->for->i->return->return
XMLChar#trim(String):::Trims space characters as defined by production [3] in the XML 1.0 specification from both ends of the given string.:::start->end->lengthMinusOne->value->length->for->for->if->return->if->return->return->value->substring
XMLDocumentFilterImpl#setDocumentHandler(XMLDocumentHandler)::: document filter impl set document handler:::
XMLDocumentFilterImpl#getDocumentHandler()::: document filter impl get document handler:::return
XMLDocumentFilterImpl#setDocumentSource(XMLDocumentSource)::: document filter impl set document source:::
XMLDocumentFilterImpl#getDocumentSource()::: document filter impl get document source:::return
XMLDocumentFilterImpl#characters(XMLString, Augmentations)::: document filter impl characters:::next->characters
XMLDocumentFilterImpl#comment(XMLString, Augmentations)::: document filter impl comment:::next->comment
XMLDocumentFilterImpl#doctypeDecl(String, String, String, Augmentations)::: document filter impl doctype decl:::next->doctypeDecl
XMLDocumentFilterImpl#emptyElement(QName, XMLAttributes, Augmentations)::: document filter impl empty element:::next->emptyElement
XMLDocumentFilterImpl#endCDATA(Augmentations)::: document filter impl end a:::next->endCDATA
XMLDocumentFilterImpl#endDocument(Augmentations)::: document filter impl end document:::next->endDocument
XMLDocumentFilterImpl#endElement(QName, Augmentations)::: document filter impl end element:::next->endElement
XMLDocumentFilterImpl#endGeneralEntity(String, Augmentations)::: document filter impl end general entity:::next->endGeneralEntity
XMLDocumentFilterImpl#ignorableWhitespace(XMLString, Augmentations)::: document filter impl ignorable whitespace:::next->ignorableWhitespace
XMLDocumentFilterImpl#processingInstruction(String, XMLString, Augmentations)::: document filter impl processing instruction:::next->processingInstruction
XMLDocumentFilterImpl#startCDATA(Augmentations)::: document filter impl start a:::next->startCDATA
XMLDocumentFilterImpl#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: document filter impl start document:::next->startDocument
XMLDocumentFilterImpl#startElement(QName, XMLAttributes, Augmentations)::: document filter impl start element:::next->startElement
XMLDocumentFilterImpl#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: document filter impl start general entity:::next->startGeneralEntity
XMLDocumentFilterImpl#textDecl(String, String, Augmentations)::: document filter impl text decl:::next->textDecl
XMLDocumentFilterImpl#xmlDecl(String, String, String, Augmentations)::: document filter impl xml decl:::next->xmlDecl
XMLEntityDescriptionImpl#setEntityName(String):::Sets the name of the entity.:::
XMLEntityDescriptionImpl#getEntityName():::Returns the name of the entity.:::return
XMLEntityDescriptionImpl#setDescription(String, String, String, String, String):::Sets the values of this entity description.:::setDescription
XMLEntityDescriptionImpl#setDescription(String, String, String, String, String, String):::Sets the values of this entity description.:::setValues
XMLEntityDescriptionImpl#clear():::Clears the values.:::super->clear
XMLEntityDescriptionImpl#hashCode():::Returns a hash code for this object.:::code->super->hashCode->if->fEntityName->hashCode->return
XMLEntityDescriptionImpl#toString():::Returns a string representation of this object.:::str->new->StringBuffer->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->return->str->toString
XMLErrorCode#setValues(String, String):::Convenience method to set the values of an XMLErrorCode.:::
XMLErrorCode#equals(Object):::Indicates whether some other object is equal to this XMLErrorCode.:::if->return->err->return->fDomain->equals->fKey->equals
XMLErrorCode#hashCode():::Returns a hash code value for this XMLErrorCode.:::return->fDomain->hashCode->fKey->hashCode
XMLGrammarPoolImpl#retrieveInitialGrammarSet(String)::: grammar pool impl retrieve initial grammar set:::synchronized->grammarSize->tempGrammars->new->GrammarArr->pos->for->i->toReturn->new->GrammarArr->System->arraycopy->return
XMLGrammarPoolImpl#cacheGrammars(String, Grammar[])::: grammar pool impl cache grammars:::if->for->i
XMLGrammarPoolImpl#retrieveGrammar(XMLGrammarDescription)::: grammar pool impl retrieve grammar:::if->println->return->getGrammar
XMLGrammarPoolImpl#putGrammar(Grammar):::Puts the specified grammar into the grammar pool and associates it to its root element name or its target namespace.:::if->synchronized->desc->grammar->getGrammarDescription->hash->hashCode->index->for->entry->entry->new->Entry
XMLGrammarPoolImpl#getGrammar(XMLGrammarDescription):::Returns the grammar associated to the specified grammar description:::synchronized->hash->hashCode->index->for->entry->return
XMLGrammarPoolImpl#removeGrammar(XMLGrammarDescription):::Removes the grammar associated to the specified grammar description from the grammar pool and returns the removed grammar:::synchronized->hash->hashCode->index->for->entry->prev->return
XMLGrammarPoolImpl#containsGrammar(XMLGrammarDescription):::Returns true if the grammar pool contains a grammar associated to the specified grammar description:::synchronized->hash->hashCode->index->for->entry->return
XMLGrammarPoolImpl#lockPool()::: grammar pool impl lock pool:::
XMLGrammarPoolImpl#unlockPool()::: grammar pool impl unlock pool:::
XMLGrammarPoolImpl#clear()::: grammar pool impl clear:::for->i
XMLGrammarPoolImpl#equals(XMLGrammarDescription, XMLGrammarDescription):::This method checks whether two grammars are the same:::return->desc1->equals
XMLGrammarPoolImpl#hashCode(XMLGrammarDescription):::Returns the hash code value for the given grammar description.:::return->desc->hashCode
XMLGrammarPoolImpl.Entry#clear()::: entry clear:::if->next->clear
XMLInputSourceAdaptor#setSystemId(String)::: input source adaptor set system id:::fSource->setSystemId
XMLInputSourceAdaptor#getSystemId()::: input source adaptor get system id:::try->return->XMLEntityManager->fSource->getSystemId->fSource->getBaseSystemId->expandSystemId->catch->return->fSource->getSystemId->finally
XMLLocatorWrapper#setLocator(XMLLocator)::: locator wrapper set locator:::
XMLLocatorWrapper#getLocator()::: locator wrapper get locator:::return
XMLLocatorWrapper#getPublicId()::: locator wrapper get public id:::if->return->fLocator->getPublicId->return
XMLLocatorWrapper#getLiteralSystemId()::: locator wrapper get literal system id:::if->return->fLocator->getLiteralSystemId->return
XMLLocatorWrapper#getBaseSystemId()::: locator wrapper get base system id:::if->return->fLocator->getBaseSystemId->return
XMLLocatorWrapper#getExpandedSystemId()::: locator wrapper get expanded system id:::if->return->fLocator->getExpandedSystemId->return
XMLLocatorWrapper#getLineNumber()::: locator wrapper get line number:::if->return->fLocator->getLineNumber->return
XMLLocatorWrapper#getColumnNumber()::: locator wrapper get column number:::if->return->fLocator->getColumnNumber->return
XMLLocatorWrapper#getCharacterOffset()::: locator wrapper get character offset:::if->return->fLocator->getCharacterOffset->return
XMLLocatorWrapper#getEncoding()::: locator wrapper get encoding:::if->return->fLocator->getEncoding->return
XMLLocatorWrapper#getXMLVersion()::: locator wrapper get version:::if->return->fLocator->getXMLVersion->return
XMLResourceIdentifierImpl#setValues(String, String, String, String):::Sets the values of the resource identifier.:::setValues
XMLResourceIdentifierImpl#setValues(String, String, String, String, String):::Sets the values of the resource identifier.:::
XMLResourceIdentifierImpl#clear():::Clears the values.:::
XMLResourceIdentifierImpl#setPublicId(String):::Sets the public identifier.:::
XMLResourceIdentifierImpl#setLiteralSystemId(String):::Sets the literal system identifier.:::
XMLResourceIdentifierImpl#setBaseSystemId(String):::Sets the base system identifier.:::
XMLResourceIdentifierImpl#setExpandedSystemId(String):::Sets the expanded system identifier.:::
XMLResourceIdentifierImpl#setNamespace(String):::Sets the namespace of the resource.:::
XMLResourceIdentifierImpl#getPublicId():::Returns the public identifier.:::return
XMLResourceIdentifierImpl#getLiteralSystemId():::Returns the literal system identifier.:::return
XMLResourceIdentifierImpl#getBaseSystemId():::Returns the base URI against which the literal SystemId is to be resolved.:::return
XMLResourceIdentifierImpl#getExpandedSystemId():::Returns the expanded system identifier.:::return
XMLResourceIdentifierImpl#getNamespace():::Returns the namespace of the resource.:::return
XMLResourceIdentifierImpl#hashCode():::Returns a hash code for this object.:::code->if->fPublicId->hashCode->if->fLiteralSystemId->hashCode->if->fBaseSystemId->hashCode->if->fExpandedSystemId->hashCode->if->fNamespace->hashCode->return
XMLResourceIdentifierImpl#toString():::Returns a string representation of this object.:::str->new->StringBuffer->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->str->append->if->str->append->return->str->toString
XMLStringBuffer#clear():::Clears the string buffer.:::
XMLStringBuffer#append(char):::append:::if->newLength->if->tmp->new->charArr->System->arraycopy
XMLStringBuffer#append(String):::append:::length->s->length->if->newLength->if->newch->new->charArr->System->arraycopy->s->getChars
XMLStringBuffer#append(char[], int, int):::append:::if->newLength->if->newch->new->charArr->System->arraycopy->if->System->arraycopy
XMLStringBuffer#append(XMLString):::append:::append

AbstractNotificationHandler#handleNotification(Notification, T):::Invoked when an implementation specific notification is received from the SCTP stack.:::return
AbstractNotificationHandler#handleNotification(AssociationChangeNotification, T):::Invoked when an AssociationChangeNotification is received from the SCTP stack.:::return
AbstractNotificationHandler#handleNotification(PeerAddressChangeNotification, T):::Invoked when an PeerAddressChangeNotification is received from the SCTP stack.:::return
AbstractNotificationHandler#handleNotification(SendFailedNotification, T):::Invoked when an SendFailedNotification is received from the SCTP stack.:::return
AbstractNotificationHandler#handleNotification(ShutdownNotification, T):::Invoked when an ShutdownNotification is received from the SCTP stack.:::return
Association#associationID():::Returns the associationID.:::return
Association#maxInboundStreams():::Returns the maximum number of inbound streams that this association supports:::return
Association#maxOutboundStreams():::Returns the maximum number of outbound streams that this association supports:::return
AssociationChangeNotification#association():::Returns the association that this notification is applicable to.:::
AssociationChangeNotification#event():::Returns the type of change event.:::
MessageInfo#createOutgoing(SocketAddress, int):::Creates a MessageInfo instance suitable for use when sending a message:::if->throw->new->IllegalArgumentException->return->new->sun.nio.ch.sctp.MessageInfoImpl
MessageInfo#createOutgoing(Association, SocketAddress, int):::Creates a MessageInfo instance suitable for use when sending a message to a given association:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->new->sun.nio.ch.sctp.MessageInfoImpl
MessageInfo#address():::Returns the source socket address if the message has been received, otherwise the preferred destination of the message to be sent.:::
MessageInfo#association():::Returns the association that the message was received on, if the message has been received, otherwise the association that the message is to be sent on.:::
MessageInfo#bytes():::Returns the number of bytes read for the received message:::
MessageInfo#isComplete():::Tells whether or not the message is complete:::
MessageInfo#complete(boolean):::Sets whether or not the message is complete:::
MessageInfo#isUnordered():::Tells whether or not the message is unordered:::
MessageInfo#unordered(boolean):::Sets whether or not the message is unordered.:::
MessageInfo#payloadProtocolID():::Returns the payload protocol Identifier:::
MessageInfo#payloadProtocolID(int):::Sets the payload protocol Identifier:::
MessageInfo#streamNumber():::Returns the stream number that the message was received on, if the message has been received, otherwise the stream number that the message is to be sent on.:::
MessageInfo#streamNumber(int):::Sets the stream number that the message is to be sent on.:::
MessageInfo#timeToLive():::The time period that the sending side may expire the message if it has not been sent, or 0 to indicate that no timeout should occur:::
MessageInfo#timeToLive(long):::Sets the time period that the sending side may expire the message if it has not been sent.:::
Notification#association():::Returns the association that this notification is applicable to.:::
NotificationHandler#handleNotification(Notification, T):::Invoked when a notification is received from the SCTP stack.:::
PeerAddressChangeNotification#address():::Returns the peer address.:::
PeerAddressChangeNotification#association():::Returns the association that this notification is applicable to.:::
PeerAddressChangeNotification#event():::Returns the type of change event.:::
SctpChannel#open():::Opens an SCTP channel:::return->new->sun.nio.ch.sctp.SctpChannelImpl
SctpChannel#open(SocketAddress, int, int):::Opens an SCTP channel and connects it to a remote address:::ssc->SctpChannel->open->ssc->connect->return
SctpChannel#association():::Returns the association on this channel's socket.:::
SctpChannel#bind(SocketAddress):::Binds the channel's socket to a local address:::
SctpChannel#bindAddress(InetAddress):::Adds the given address to the bound addresses for the channel's socket:::
SctpChannel#unbindAddress(InetAddress):::Removes the given address from the bound addresses for the channel's socket:::
SctpChannel#connect(SocketAddress):::Connects this channel's socket:::
SctpChannel#connect(SocketAddress, int, int):::Connects this channel's socket:::
SctpChannel#isConnectionPending():::Tells whether or not a connection operation is in progress on this channel.:::
SctpChannel#finishConnect():::Finishes the process of connecting an SCTP channel:::
SctpChannel#getAllLocalAddresses():::Returns all of the socket addresses to which this channel's socket is bound.:::
SctpChannel#getRemoteAddresses():::Returns all of the remote addresses to which this channel's socket is connected:::
SctpChannel#shutdown():::Shutdown a connection without closing the channel:::
SctpChannel#getOption(SctpSocketOption):::Returns the value of a socket option.:::
SctpChannel#setOption(SctpSocketOption, T):::Sets the value of a socket option.:::
SctpChannel#supportedOptions():::Returns a set of the socket options supported by this channel:::
SctpChannel#validOps():::Returns an operation set identifying this channel's supported operations:::return
SctpChannel#receive(ByteBuffer, T, NotificationHandler):::Receives a message into the given buffer and/or handles a notification:::
SctpChannel#send(ByteBuffer, MessageInfo):::Sends a message via this channel:::
SctpMultiChannel#open():::Opens an SCTP multi channel:::return->new->sun.nio.ch.sctp.SctpMultiChannelImpl
SctpMultiChannel#associations():::Returns the open associations on this channel's socket:::
SctpMultiChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for connections:::
SctpMultiChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for connections:::return->bind
SctpMultiChannel#bindAddress(InetAddress):::Adds the given address to the bound addresses for the channel's socket:::
SctpMultiChannel#unbindAddress(InetAddress):::Removes the given address from the bound addresses for the channel's socket:::
SctpMultiChannel#getAllLocalAddresses():::Returns all of the socket addresses to which this channel's socket is bound.:::
SctpMultiChannel#getRemoteAddresses(Association):::Returns all of the remote addresses to which the given association on this channel's socket is connected.:::
SctpMultiChannel#shutdown(Association):::Shutdown an association without closing the channel.:::
SctpMultiChannel#getOption(SctpSocketOption, Association):::Returns the value of a socket option:::
SctpMultiChannel#setOption(SctpSocketOption, T, Association):::Sets the value of a socket option:::
SctpMultiChannel#supportedOptions():::Returns a set of the socket options supported by this channel:::
SctpMultiChannel#validOps():::Returns an operation set identifying this channel's supported operations:::return
SctpMultiChannel#receive(ByteBuffer, T, NotificationHandler):::Receives a message and/or handles a notification via this channel:::
SctpMultiChannel#send(ByteBuffer, MessageInfo):::Sends a message via this channel:::
SctpMultiChannel#branch(Association):::Branches off an association:::
SctpServerChannel#open():::Opens an SCTP server channel:::return->new->sun.nio.ch.sctp.SctpServerChannelImpl
SctpServerChannel#accept():::Accepts an association on this channel's socket:::
SctpServerChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for associations:::return->bind
SctpServerChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for associations:::
SctpServerChannel#bindAddress(InetAddress):::Adds the given address to the bound addresses for the channel's socket:::
SctpServerChannel#unbindAddress(InetAddress):::Removes the given address from the bound addresses for the channel's socket:::
SctpServerChannel#getAllLocalAddresses():::Returns all of the socket addresses to which this channel's socket is bound.:::
SctpServerChannel#getOption(SctpSocketOption):::Returns the value of a socket option.:::
SctpServerChannel#setOption(SctpSocketOption, T):::Sets the value of a socket option.:::
SctpServerChannel#supportedOptions():::Returns a set of the socket options supported by this channel:::
SctpServerChannel#validOps():::Returns an operation set identifying this channel's supported operations:::return
SctpStandardSocketOptions.InitMaxStreams#create(int, int):::Creates an InitMaxStreams instance.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->new->InitMaxStreams
SctpStandardSocketOptions.InitMaxStreams#maxInStreams():::Returns the maximum number of inbound streams.:::return
SctpStandardSocketOptions.InitMaxStreams#maxOutStreams():::Returns the maximum number of outbound streams.:::return
SctpStandardSocketOptions.InitMaxStreams#toString():::Returns a string representation of this init max streams, including the maximum in and out bound streams.:::sb->new->StringBuilder->sb->super->toString->append->append->sb->append->append->sb->append->append->append->return->sb->toString
SctpStandardSocketOptions.InitMaxStreams#equals(Object):::Returns true if the specified object is another InitMaxStreams instance with the same number of in and out bound streams.:::if->that->if->return->return
SctpStandardSocketOptions.InitMaxStreams#hashCode():::Returns a hash code value for this init max streams.:::hash->return
SendFailedNotification#association():::Returns the association that this notification is applicable to.:::
SendFailedNotification#address():::Returns the address.:::
SendFailedNotification#buffer():::Returns the data that was to be sent.:::
SendFailedNotification#errorCode():::Returns the error code:::
SendFailedNotification#streamNumber():::Returns the stream number that the messge was to be sent on.:::
ShutdownNotification#association():::Returns the association that this notification is applicable to.:::

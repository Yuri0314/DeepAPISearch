Plugin_AcquiredCASLockNode_mark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ acquired lock node_mark execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.AcquiredCASLockNode->b->add->return
Plugin_AcquiredCASLockNode_mark#getSource()::: plugin_ acquired lock node_mark get source:::return
PluginFactory_AcquiredCASLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ acquired lock node register plugins:::plugins->new->Plugin_AcquiredCASLockNode_mark->register
Plugin_AllocaNode_alloca#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ alloca node_alloca execute:::arg0->arg1->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.AllocaNode->b->addPush->return
Plugin_AllocaNode_alloca#getSource()::: plugin_ alloca node_alloca get source:::return
PluginFactory_AllocaNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ alloca node register plugins:::plugins->new->Plugin_AllocaNode_alloca->register
Plugin_BeginLockScopeNode_beginLockScope#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ begin lock scope node_begin lock scope execute:::arg0->arg1->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.BeginLockScopeNode->b->addPush->return
Plugin_BeginLockScopeNode_beginLockScope#getSource()::: plugin_ begin lock scope node_begin lock scope get source:::return
PluginFactory_BeginLockScopeNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ begin lock scope node register plugins:::plugins->new->Plugin_BeginLockScopeNode_beginLockScope->register
Plugin_CurrentJavaThreadNode_get#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ current java thread node_get execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.CurrentJavaThreadNode->b->addPush->return
Plugin_CurrentJavaThreadNode_get#getSource()::: plugin_ current java thread node_get get source:::return
PluginFactory_CurrentJavaThreadNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ current java thread node register plugins:::plugins->new->Plugin_CurrentJavaThreadNode_get->register
Plugin_CurrentLockNode_currentLock#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ current lock node_current lock execute:::arg0->arg1->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.CurrentLockNode->b->addPush->return
Plugin_CurrentLockNode_currentLock#getSource()::: plugin_ current lock node_current lock get source:::return
PluginFactory_CurrentLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ current lock node register plugins:::plugins->new->Plugin_CurrentLockNode_currentLock->register
Plugin_DeoptimizeCallerNode_deopt#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ deoptimize caller node_deopt execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.hotspot.nodes.DeoptimizeCallerNode->b->add->return
Plugin_DeoptimizeCallerNode_deopt#getSource()::: plugin_ deoptimize caller node_deopt get source:::return
PluginFactory_DeoptimizeCallerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ deoptimize caller node register plugins:::plugins->new->Plugin_DeoptimizeCallerNode_deopt->register
Plugin_DimensionsNode_allocaDimsArray#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ dimensions node_alloca dims array execute:::arg0->arg1->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.DimensionsNode->b->addPush->return
Plugin_DimensionsNode_allocaDimsArray#getSource()::: plugin_ dimensions node_alloca dims array get source:::return
PluginFactory_DimensionsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ dimensions node register plugins:::plugins->new->Plugin_DimensionsNode_allocaDimsArray->register
Plugin_EndLockScopeNode_endLockScope#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ end lock scope node_end lock scope execute:::node->new->org.graalvm.compiler.hotspot.nodes.EndLockScopeNode->b->add->return
Plugin_EndLockScopeNode_endLockScope#getSource()::: plugin_ end lock scope node_end lock scope get source:::return
PluginFactory_EndLockScopeNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ end lock scope node register plugins:::plugins->new->Plugin_EndLockScopeNode_endLockScope->register
Plugin_FastAcquireBiasedLockNode_mark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ fast acquire biased lock node_mark execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.FastAcquireBiasedLockNode->b->add->return
Plugin_FastAcquireBiasedLockNode_mark#getSource()::: plugin_ fast acquire biased lock node_mark get source:::return
PluginFactory_FastAcquireBiasedLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ fast acquire biased lock node register plugins:::plugins->new->Plugin_FastAcquireBiasedLockNode_mark->register
Plugin_GraalHotSpotVMConfigNode_areConfigValuesConstant#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_are config values constant execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode->b->addPush->return
Plugin_GraalHotSpotVMConfigNode_areConfigValuesConstant#getSource()::: plugin_ graal hot spot config node_are config values constant get source:::return
Plugin_GraalHotSpotVMConfigNode_cardTableAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_card table address mark execute:::if->checkInjectedArgument->return->arg0->result->cardTableAddressMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_cardTableAddressMark#getSource()::: plugin_ graal hot spot config node_card table address mark get source:::return
Plugin_GraalHotSpotVMConfigNode_crcTableAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_crc table address mark execute:::if->checkInjectedArgument->return->arg0->result->crcTableAddressMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_crcTableAddressMark#getSource()::: plugin_ graal hot spot config node_crc table address mark get source:::return
Plugin_GraalHotSpotVMConfigNode_heapEndAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_heap end address mark execute:::if->checkInjectedArgument->return->arg0->result->heapEndAddressMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_heapEndAddressMark#getSource()::: plugin_ graal hot spot config node_heap end address mark get source:::return
Plugin_GraalHotSpotVMConfigNode_heapTopAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_heap top address mark execute:::if->checkInjectedArgument->return->arg0->result->heapTopAddressMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_heapTopAddressMark#getSource()::: plugin_ graal hot spot config node_heap top address mark get source:::return
Plugin_GraalHotSpotVMConfigNode_inlineContiguousAllocationSupportedMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_inline contiguous allocation supported mark execute:::if->checkInjectedArgument->return->arg0->result->inlineContiguousAllocationSupportedMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_inlineContiguousAllocationSupportedMark#getSource()::: plugin_ graal hot spot config node_inline contiguous allocation supported mark get source:::return
Plugin_GraalHotSpotVMConfigNode_loadByteConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_load byte config value execute:::arg0->arg1->arg2->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode->b->addPush->return
Plugin_GraalHotSpotVMConfigNode_loadByteConfigValue#getSource()::: plugin_ graal hot spot config node_load byte config value get source:::return
Plugin_GraalHotSpotVMConfigNode_loadIntConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_load int config value execute:::arg0->arg1->arg2->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode->b->addPush->return
Plugin_GraalHotSpotVMConfigNode_loadIntConfigValue#getSource()::: plugin_ graal hot spot config node_load int config value get source:::return
Plugin_GraalHotSpotVMConfigNode_loadLongConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_load long config value execute:::arg0->arg1->arg2->if->isConstant->asJavaConstant->asInt->else->return->node->new->org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode->b->addPush->return
Plugin_GraalHotSpotVMConfigNode_loadLongConfigValue#getSource()::: plugin_ graal hot spot config node_load long config value get source:::return
Plugin_GraalHotSpotVMConfigNode_logOfHeapRegionGrainBytesMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ graal hot spot config node_log of heap region grain bytes mark execute:::if->checkInjectedArgument->return->arg0->result->logOfHeapRegionGrainBytesMark->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_GraalHotSpotVMConfigNode_logOfHeapRegionGrainBytesMark#getSource()::: plugin_ graal hot spot config node_log of heap region grain bytes mark get source:::return
PluginFactory_GraalHotSpotVMConfigNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ graal hot spot config node register plugins:::plugins->new->Plugin_GraalHotSpotVMConfigNode_areConfigValuesConstant->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_cardTableAddressMark->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_crcTableAddressMark->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_heapEndAddressMark->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_heapTopAddressMark->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_inlineContiguousAllocationSupportedMark->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_loadByteConfigValue->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_loadIntConfigValue->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_loadLongConfigValue->register->plugins->new->Plugin_GraalHotSpotVMConfigNode_logOfHeapRegionGrainBytesMark->register
Plugin_JumpToExceptionHandlerInCallerNode_jumpToExceptionHandlerInCaller#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ jump to exception handler in caller node_jump to exception handler in caller execute:::arg0->arg1->arg2->node->new->org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerInCallerNode->b->add->return
Plugin_JumpToExceptionHandlerInCallerNode_jumpToExceptionHandlerInCaller#getSource()::: plugin_ jump to exception handler in caller node_jump to exception handler in caller get source:::return
PluginFactory_JumpToExceptionHandlerInCallerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ jump to exception handler in caller node register plugins:::plugins->new->Plugin_JumpToExceptionHandlerInCallerNode_jumpToExceptionHandlerInCaller->register
Plugin_JumpToExceptionHandlerNode_jumpToExceptionHandler#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ jump to exception handler node_jump to exception handler execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerNode->b->add->return
Plugin_JumpToExceptionHandlerNode_jumpToExceptionHandler#getSource()::: plugin_ jump to exception handler node_jump to exception handler get source:::return
PluginFactory_JumpToExceptionHandlerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ jump to exception handler node register plugins:::plugins->new->Plugin_JumpToExceptionHandlerNode_jumpToExceptionHandler->register
Plugin_MonitorCounterNode_counter#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ monitor counter node_counter execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.MonitorCounterNode->b->addPush->return
Plugin_MonitorCounterNode_counter#getSource()::: plugin_ monitor counter node_counter get source:::return
PluginFactory_MonitorCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ monitor counter node register plugins:::plugins->new->Plugin_MonitorCounterNode_counter->register
Plugin_PatchReturnAddressNode_patchReturnAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ patch return address node_patch return address execute:::arg0->node->new->org.graalvm.compiler.hotspot.nodes.PatchReturnAddressNode->b->add->return
Plugin_PatchReturnAddressNode_patchReturnAddress#getSource()::: plugin_ patch return address node_patch return address get source:::return
PluginFactory_PatchReturnAddressNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ patch return address node register plugins:::plugins->new->Plugin_PatchReturnAddressNode_patchReturnAddress->register
Plugin_VMErrorNode_vmError#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ error node_vm error execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->node->new->org.graalvm.compiler.hotspot.nodes.VMErrorNode->b->add->return
Plugin_VMErrorNode_vmError#getSource()::: plugin_ error node_vm error get source:::return
PluginFactory_VMErrorNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ error node register plugins:::plugins->new->Plugin_VMErrorNode_vmError->register
AcquiredCASLockNode#object()::: acquired lock node object:::return
AcquiredCASLockNode#generate(NodeLIRBuilderTool)::: acquired lock node generate:::
AcquiredCASLockNode#mark(Object)::: acquired lock node mark:::
AllocaNode#generate(NodeLIRBuilderTool)::: alloca node generate:::array->gen->getLIRGeneratorTool->allocateStackSlots->result->gen->getLIRGeneratorTool->emitAddress->gen->setResult
AllocaNode#alloca(int)::: alloca node alloca:::
BeginLockScopeNode#hasSideEffect()::: begin lock scope node has side effect:::return
BeginLockScopeNode#getLocationIdentity()::: begin lock scope node get location identity:::return->LocationIdentity->any
BeginLockScopeNode#generate(NodeLIRBuilderTool)::: begin lock scope node generate:::hsGen->gen->getLIRGeneratorTool->slot->hsGen->getLockSlot->result->gen->getLIRGeneratorTool->emitAddress->gen->setResult
BeginLockScopeNode#beginLockScope(int)::: begin lock scope node begin lock scope:::
CurrentJavaThreadNode#generate(NodeLIRBuilderTool)::: current java thread node generate:::rawThread->gen->getLIRGeneratorTool->getProviders->getRegisters->getThreadRegister->wordKind->gen->getLIRGeneratorTool->target->getWordKind->gen->rawThread->LIRKind->value->asValue->setResult
CurrentJavaThreadNode#get()::: current java thread node get:::
CurrentLockNode#generate(NodeLIRBuilderTool)::: current lock node generate:::hsGen->gen->getLIRGeneratorTool->slot->hsGen->getLockSlot->result->gen->getLIRGeneratorTool->emitAddress->gen->setResult
CurrentLockNode#currentLock(int)::: current lock node current lock:::
DeoptimizeCallerNode#generate(NodeLIRBuilderTool)::: deoptimize caller node generate:::gen->getLIRGeneratorTool->emitDeoptimizeCaller
DeoptimizeCallerNode#deopt(DeoptimizationAction, DeoptimizationReason)::: deoptimize caller node deopt:::
DeoptimizingStubCall#canDeoptimize()::: deoptimizing stub call can deoptimize:::return
DimensionsNode#generate(NodeLIRBuilderTool)::: dimensions node generate:::lirGen->gen->getLIRGeneratorTool->size->wordSize->lirGen->target->slots->roundUp->array->lirGen->allocateStackSlots->result->lirGen->emitAddress->gen->setResult
DimensionsNode#allocaDimsArray(int)::: dimensions node alloca dims array:::
EndLockScopeNode#hasSideEffect()::: end lock scope node has side effect:::return
EndLockScopeNode#getLocationIdentity()::: end lock scope node get location identity:::return->LocationIdentity->any
EndLockScopeNode#generate(NodeLIRBuilderTool)::: end lock scope node generate:::
EndLockScopeNode#endLockScope()::: end lock scope node end lock scope:::
FastAcquireBiasedLockNode#object()::: fast acquire biased lock node object:::return
FastAcquireBiasedLockNode#generate(NodeLIRBuilderTool)::: fast acquire biased lock node generate:::
FastAcquireBiasedLockNode#mark(Object)::: fast acquire biased lock node mark:::
GraalHotSpotVMConfigNode#generate(NodeLIRBuilderTool)::: graal hot spot config node generate:::res->generator->getLIRGeneratorTool->generator->getLIRGeneratorTool->getLIRKind->emitLoadConfigValue->generator->setResult
GraalHotSpotVMConfigNode#areConfigValuesConstant()::: graal hot spot config node are config values constant:::
GraalHotSpotVMConfigNode#loadLongConfigValue(int)::: graal hot spot config node load long config value:::
GraalHotSpotVMConfigNode#loadIntConfigValue(int)::: graal hot spot config node load int config value:::
GraalHotSpotVMConfigNode#loadByteConfigValue(int)::: graal hot spot config node load byte config value:::
GraalHotSpotVMConfigNode#cardTableAddress()::: graal hot spot config node card table address:::return->cardTableAddressMark->loadLongConfigValue
GraalHotSpotVMConfigNode#isCardTableAddressConstant()::: graal hot spot config node is card table address constant:::return->areConfigValuesConstant
GraalHotSpotVMConfigNode#heapTopAddress()::: graal hot spot config node heap top address:::return->heapTopAddressMark->loadLongConfigValue
GraalHotSpotVMConfigNode#heapEndAddress()::: graal hot spot config node heap end address:::return->heapEndAddressMark->loadLongConfigValue
GraalHotSpotVMConfigNode#crcTableAddress()::: graal hot spot config node crc table address:::return->crcTableAddressMark->loadLongConfigValue
GraalHotSpotVMConfigNode#logOfHeapRegionGrainBytes()::: graal hot spot config node log of heap region grain bytes:::return->logOfHeapRegionGrainBytesMark->loadIntConfigValue
GraalHotSpotVMConfigNode#inlineContiguousAllocationSupported()::: graal hot spot config node inline contiguous allocation supported:::return->inlineContiguousAllocationSupportedMark->loadByteConfigValue
GraalHotSpotVMConfigNode#cardTableAddressMark(GraalHotSpotVMConfig)::: graal hot spot config node card table address mark:::return
GraalHotSpotVMConfigNode#heapTopAddressMark(GraalHotSpotVMConfig)::: graal hot spot config node heap top address mark:::return
GraalHotSpotVMConfigNode#heapEndAddressMark(GraalHotSpotVMConfig)::: graal hot spot config node heap end address mark:::return
GraalHotSpotVMConfigNode#crcTableAddressMark(GraalHotSpotVMConfig)::: graal hot spot config node crc table address mark:::return
GraalHotSpotVMConfigNode#logOfHeapRegionGrainBytesMark(GraalHotSpotVMConfig)::: graal hot spot config node log of heap region grain bytes mark:::return
GraalHotSpotVMConfigNode#inlineContiguousAllocationSupportedMark(GraalHotSpotVMConfig)::: graal hot spot config node inline contiguous allocation supported mark:::return
GraalHotSpotVMConfigNode#canonical(CanonicalizerTool)::: graal hot spot config node canonical:::if->return->ConstantNode->GeneratePIC->tool->getOptions->getValue->forBoolean->if->GeneratePIC->tool->getOptions->getValue->if->return->ConstantNode->forLong->else->if->return->ConstantNode->forLong->else->if->return->ConstantNode->forLong->else->if->return->ConstantNode->forLong->else->if->return->ConstantNode->forInt->else->if->return->ConstantNode->forBoolean->else->return
HotSpotCompressionNode#compress(ValueNode, CompressEncoding)::: hot spot compression node compress:::return->input->graph->new->HotSpotCompressionNode->unique
HotSpotCompressionNode#uncompress(ValueNode, CompressEncoding)::: hot spot compression node uncompress:::return->input->graph->new->HotSpotCompressionNode->unique
HotSpotCompressionNode#compress(Constant)::: hot spot compression node compress:::if->equals->return->else->if->return->compress->else->throw->GraalError->shouldNotReachHere
HotSpotCompressionNode#uncompress(Constant)::: hot spot compression node uncompress:::if->return->uncompress->else->throw->GraalError->shouldNotReachHere
HotSpotCompressionNode#mkStamp(Stamp)::: hot spot compression node mk stamp:::return->HotSpotNarrowOopStamp->mkStamp
HotSpotIndirectCallTargetNode#metaspaceMethod()::: hot spot indirect call target node metaspace method:::return
JumpToExceptionHandlerInCallerNode#generate(NodeLIRBuilderTool)::: jump to exception handler in caller node generate:::emitJumpToExceptionHandlerInCaller
JumpToExceptionHandlerInCallerNode#jumpToExceptionHandlerInCaller(Word, Object, Word)::: jump to exception handler in caller node jump to exception handler in caller:::
JumpToExceptionHandlerNode#generate(NodeLIRBuilderTool)::: jump to exception handler node generate:::emitJumpToExceptionHandler
JumpToExceptionHandlerNode#jumpToExceptionHandler(Word)::: jump to exception handler node jump to exception handler:::
LoadIndexedPointerNode#inferStamp()::: load indexed pointer node infer stamp:::return
MonitorCounterNode#generate(NodeLIRBuilderTool)::: monitor counter node generate:::counter->gen->getLIRGeneratorTool->getResult->getFrameMapBuilder->allocateStackSlots->result->gen->getLIRGeneratorTool->emitAddress->gen->setResult
MonitorCounterNode#counter()::: monitor counter node counter:::
PatchReturnAddressNode#generate(NodeLIRBuilderTool)::: patch return address node generate:::emitPatchReturnAddress
PatchReturnAddressNode#patchReturnAddress(Word)::: patch return address node patch return address:::
StubForeignCallNode#getDescriptor()::: stub foreign call node get descriptor:::return
StubForeignCallNode#getLocationIdentities()::: stub foreign call node get location identities:::killedLocations->foreignCalls->getKilledLocations->Arrays->copyOf->return
StubForeignCallNode#operands(NodeLIRBuilderTool)::: stub foreign call node operands:::operands->arguments->size->new->ValueArr->for->i->return
StubForeignCallNode#generate(NodeLIRBuilderTool)::: stub foreign call node generate:::linkage->foreignCalls->lookupForeignCall->operands->operands->result->gen->getLIRGeneratorTool->emitForeignCall->if->gen->setResult
StubForeignCallNode#toString(Verbosity)::: stub foreign call node to string:::if->return->super->toString->return->super->toString
StubStartNode#getStub()::: stub start node get stub:::return
VMErrorNode#generate(NodeLIRBuilderTool)::: error node generate:::whereString->if->stateBefore->nl->sb->new->StringBuilder->fs->stateBefore->while->Bytecode->sb->append->append->fs->getCode->appendLocation->fs->outerFrameState->sb->toString->else->method->graph->method->graph->toString->method->format->wordKind->gen->getLIRGeneratorTool->StampFactory->pointer->getLIRKind->whereArg->gen->getLIRGeneratorTool->new->CStringConstant->emitConstant->formatArg->gen->getLIRGeneratorTool->new->CStringConstant->emitConstant->linkage->gen->getLIRGeneratorTool->getForeignCalls->lookupForeignCall->gen->getLIRGeneratorTool->gen->operand->emitForeignCall
VMErrorNode#vmError(String, long)::: error node vm error:::

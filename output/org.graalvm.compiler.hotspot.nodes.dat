org.graalvm.compiler.hotspot.nodes.Plugin_AcquiredCASLockNode_mark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ acquired lock node_mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_AcquiredCASLockNode_mark#getSource()->Class::: plugin_ acquired lock node_mark get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_AcquiredCASLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ acquired lock node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_AllocaNode_alloca#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ alloca node_alloca execute
org.graalvm.compiler.hotspot.nodes.Plugin_AllocaNode_alloca#getSource()->Class::: plugin_ alloca node_alloca get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_AllocaNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ alloca node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_BeginLockScopeNode_beginLockScope#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ begin lock scope node_begin lock scope execute
org.graalvm.compiler.hotspot.nodes.Plugin_BeginLockScopeNode_beginLockScope#getSource()->Class::: plugin_ begin lock scope node_begin lock scope get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_BeginLockScopeNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ begin lock scope node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_CurrentJavaThreadNode_get#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ current java thread node_get execute
org.graalvm.compiler.hotspot.nodes.Plugin_CurrentJavaThreadNode_get#getSource()->Class::: plugin_ current java thread node_get get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_CurrentJavaThreadNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ current java thread node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_CurrentLockNode_currentLock#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ current lock node_current lock execute
org.graalvm.compiler.hotspot.nodes.Plugin_CurrentLockNode_currentLock#getSource()->Class::: plugin_ current lock node_current lock get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_CurrentLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ current lock node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_DeoptimizeCallerNode_deopt#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ deoptimize caller node_deopt execute
org.graalvm.compiler.hotspot.nodes.Plugin_DeoptimizeCallerNode_deopt#getSource()->Class::: plugin_ deoptimize caller node_deopt get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_DeoptimizeCallerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ deoptimize caller node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_DimensionsNode_allocaDimsArray#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ dimensions node_alloca dims array execute
org.graalvm.compiler.hotspot.nodes.Plugin_DimensionsNode_allocaDimsArray#getSource()->Class::: plugin_ dimensions node_alloca dims array get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_DimensionsNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ dimensions node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_EndLockScopeNode_endLockScope#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ end lock scope node_end lock scope execute
org.graalvm.compiler.hotspot.nodes.Plugin_EndLockScopeNode_endLockScope#getSource()->Class::: plugin_ end lock scope node_end lock scope get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_EndLockScopeNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ end lock scope node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_FastAcquireBiasedLockNode_mark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ fast acquire biased lock node_mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_FastAcquireBiasedLockNode_mark#getSource()->Class::: plugin_ fast acquire biased lock node_mark get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_FastAcquireBiasedLockNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ fast acquire biased lock node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_areConfigValuesConstant#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_are config values constant execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_areConfigValuesConstant#getSource()->Class::: plugin_ graal hot spot config node_are config values constant get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_cardTableAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_card table address mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_cardTableAddressMark#getSource()->Class::: plugin_ graal hot spot config node_card table address mark get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_crcTableAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_crc table address mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_crcTableAddressMark#getSource()->Class::: plugin_ graal hot spot config node_crc table address mark get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_heapEndAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_heap end address mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_heapEndAddressMark#getSource()->Class::: plugin_ graal hot spot config node_heap end address mark get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_heapTopAddressMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_heap top address mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_heapTopAddressMark#getSource()->Class::: plugin_ graal hot spot config node_heap top address mark get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_inlineContiguousAllocationSupportedMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_inline contiguous allocation supported mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_inlineContiguousAllocationSupportedMark#getSource()->Class::: plugin_ graal hot spot config node_inline contiguous allocation supported mark get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadByteConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_load byte config value execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadByteConfigValue#getSource()->Class::: plugin_ graal hot spot config node_load byte config value get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadIntConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_load int config value execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadIntConfigValue#getSource()->Class::: plugin_ graal hot spot config node_load int config value get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadLongConfigValue#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_load long config value execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_loadLongConfigValue#getSource()->Class::: plugin_ graal hot spot config node_load long config value get source
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_logOfHeapRegionGrainBytesMark#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ graal hot spot config node_log of heap region grain bytes mark execute
org.graalvm.compiler.hotspot.nodes.Plugin_GraalHotSpotVMConfigNode_logOfHeapRegionGrainBytesMark#getSource()->Class::: plugin_ graal hot spot config node_log of heap region grain bytes mark get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_GraalHotSpotVMConfigNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ graal hot spot config node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_JumpToExceptionHandlerInCallerNode_jumpToExceptionHandlerInCaller#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ jump to exception handler in caller node_jump to exception handler in caller execute
org.graalvm.compiler.hotspot.nodes.Plugin_JumpToExceptionHandlerInCallerNode_jumpToExceptionHandlerInCaller#getSource()->Class::: plugin_ jump to exception handler in caller node_jump to exception handler in caller get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_JumpToExceptionHandlerInCallerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ jump to exception handler in caller node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_JumpToExceptionHandlerNode_jumpToExceptionHandler#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ jump to exception handler node_jump to exception handler execute
org.graalvm.compiler.hotspot.nodes.Plugin_JumpToExceptionHandlerNode_jumpToExceptionHandler#getSource()->Class::: plugin_ jump to exception handler node_jump to exception handler get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_JumpToExceptionHandlerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ jump to exception handler node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_MonitorCounterNode_counter#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ monitor counter node_counter execute
org.graalvm.compiler.hotspot.nodes.Plugin_MonitorCounterNode_counter#getSource()->Class::: plugin_ monitor counter node_counter get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_MonitorCounterNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ monitor counter node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_PatchReturnAddressNode_patchReturnAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ patch return address node_patch return address execute
org.graalvm.compiler.hotspot.nodes.Plugin_PatchReturnAddressNode_patchReturnAddress#getSource()->Class::: plugin_ patch return address node_patch return address get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_PatchReturnAddressNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ patch return address node register plugins
org.graalvm.compiler.hotspot.nodes.Plugin_VMErrorNode_vmError#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ error node_vm error execute
org.graalvm.compiler.hotspot.nodes.Plugin_VMErrorNode_vmError#getSource()->Class::: plugin_ error node_vm error get source
org.graalvm.compiler.hotspot.nodes.PluginFactory_VMErrorNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ error node register plugins
org.graalvm.compiler.hotspot.nodes.AcquiredCASLockNode#object()->ValueNode::: acquired lock node object
org.graalvm.compiler.hotspot.nodes.AcquiredCASLockNode#generate(NodeLIRBuilderTool)->void::: acquired lock node generate
org.graalvm.compiler.hotspot.nodes.AcquiredCASLockNode#mark(Object)->void::: acquired lock node mark
org.graalvm.compiler.hotspot.nodes.AllocaNode#generate(NodeLIRBuilderTool)->void::: alloca node generate
org.graalvm.compiler.hotspot.nodes.AllocaNode#alloca(int)->Word::: alloca node alloca
org.graalvm.compiler.hotspot.nodes.BeginLockScopeNode#hasSideEffect()->boolean::: begin lock scope node has side effect
org.graalvm.compiler.hotspot.nodes.BeginLockScopeNode#getLocationIdentity()->LocationIdentity::: begin lock scope node get location identity
org.graalvm.compiler.hotspot.nodes.BeginLockScopeNode#generate(NodeLIRBuilderTool)->void::: begin lock scope node generate
org.graalvm.compiler.hotspot.nodes.BeginLockScopeNode#beginLockScope(int)->Word::: begin lock scope node begin lock scope
org.graalvm.compiler.hotspot.nodes.CurrentJavaThreadNode#generate(NodeLIRBuilderTool)->void::: current java thread node generate
org.graalvm.compiler.hotspot.nodes.CurrentJavaThreadNode#get()->Word::: current java thread node get
org.graalvm.compiler.hotspot.nodes.CurrentLockNode#generate(NodeLIRBuilderTool)->void::: current lock node generate
org.graalvm.compiler.hotspot.nodes.CurrentLockNode#currentLock(int)->Word::: current lock node current lock
org.graalvm.compiler.hotspot.nodes.DeoptimizeCallerNode#generate(NodeLIRBuilderTool)->void::: deoptimize caller node generate
org.graalvm.compiler.hotspot.nodes.DeoptimizeCallerNode#deopt(DeoptimizationAction, DeoptimizationReason)->void::: deoptimize caller node deopt
org.graalvm.compiler.hotspot.nodes.DeoptimizingStubCall#canDeoptimize()->boolean::: deoptimizing stub call can deoptimize
org.graalvm.compiler.hotspot.nodes.DimensionsNode#generate(NodeLIRBuilderTool)->void::: dimensions node generate
org.graalvm.compiler.hotspot.nodes.DimensionsNode#allocaDimsArray(int)->Word::: dimensions node alloca dims array
org.graalvm.compiler.hotspot.nodes.EndLockScopeNode#hasSideEffect()->boolean::: end lock scope node has side effect
org.graalvm.compiler.hotspot.nodes.EndLockScopeNode#getLocationIdentity()->LocationIdentity::: end lock scope node get location identity
org.graalvm.compiler.hotspot.nodes.EndLockScopeNode#generate(NodeLIRBuilderTool)->void::: end lock scope node generate
org.graalvm.compiler.hotspot.nodes.EndLockScopeNode#endLockScope()->void::: end lock scope node end lock scope
org.graalvm.compiler.hotspot.nodes.FastAcquireBiasedLockNode#object()->ValueNode::: fast acquire biased lock node object
org.graalvm.compiler.hotspot.nodes.FastAcquireBiasedLockNode#generate(NodeLIRBuilderTool)->void::: fast acquire biased lock node generate
org.graalvm.compiler.hotspot.nodes.FastAcquireBiasedLockNode#mark(Object)->void::: fast acquire biased lock node mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#generate(NodeLIRBuilderTool)->void::: graal hot spot config node generate
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#cardTableAddress()->long::: graal hot spot config node card table address
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#isCardTableAddressConstant()->boolean::: graal hot spot config node is card table address constant
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#heapTopAddress()->long::: graal hot spot config node heap top address
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#heapEndAddress()->long::: graal hot spot config node heap end address
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#crcTableAddress()->long::: graal hot spot config node crc table address
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#logOfHeapRegionGrainBytes()->int::: graal hot spot config node log of heap region grain bytes
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#inlineContiguousAllocationSupported()->boolean::: graal hot spot config node inline contiguous allocation supported
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#cardTableAddressMark(GraalHotSpotVMConfig)->int::: graal hot spot config node card table address mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#heapTopAddressMark(GraalHotSpotVMConfig)->int::: graal hot spot config node heap top address mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#heapEndAddressMark(GraalHotSpotVMConfig)->int::: graal hot spot config node heap end address mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#crcTableAddressMark(GraalHotSpotVMConfig)->int::: graal hot spot config node crc table address mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#logOfHeapRegionGrainBytesMark(GraalHotSpotVMConfig)->int::: graal hot spot config node log of heap region grain bytes mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#inlineContiguousAllocationSupportedMark(GraalHotSpotVMConfig)->int::: graal hot spot config node inline contiguous allocation supported mark
org.graalvm.compiler.hotspot.nodes.GraalHotSpotVMConfigNode#canonical(CanonicalizerTool)->Node::: graal hot spot config node canonical
org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode#compress(ValueNode, CompressEncoding)->HotSpotCompressionNode::: hot spot compression node compress
org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode#uncompress(ValueNode, CompressEncoding)->CompressionNode::: hot spot compression node uncompress
org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode#compress(Constant)->Constant::: hot spot compression node compress
org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode#uncompress(Constant)->Constant::: hot spot compression node uncompress
org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode#mkStamp(Stamp)->Stamp::: hot spot compression node mk stamp
org.graalvm.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode#metaspaceMethod()->ValueNode::: hot spot indirect call target node metaspace method
org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerInCallerNode#generate(NodeLIRBuilderTool)->void::: jump to exception handler in caller node generate
org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerInCallerNode#jumpToExceptionHandlerInCaller(Word, Object, Word)->void::: jump to exception handler in caller node jump to exception handler in caller
org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerNode#generate(NodeLIRBuilderTool)->void::: jump to exception handler node generate
org.graalvm.compiler.hotspot.nodes.JumpToExceptionHandlerNode#jumpToExceptionHandler(Word)->void::: jump to exception handler node jump to exception handler
org.graalvm.compiler.hotspot.nodes.LoadIndexedPointerNode#inferStamp()->boolean::: load indexed pointer node infer stamp
org.graalvm.compiler.hotspot.nodes.MonitorCounterNode#generate(NodeLIRBuilderTool)->void::: monitor counter node generate
org.graalvm.compiler.hotspot.nodes.MonitorCounterNode#counter()->Word::: monitor counter node counter
org.graalvm.compiler.hotspot.nodes.PatchReturnAddressNode#generate(NodeLIRBuilderTool)->void::: patch return address node generate
org.graalvm.compiler.hotspot.nodes.PatchReturnAddressNode#patchReturnAddress(Word)->void::: patch return address node patch return address
org.graalvm.compiler.hotspot.nodes.StubForeignCallNode#getDescriptor()->ForeignCallDescriptor::: stub foreign call node get descriptor
org.graalvm.compiler.hotspot.nodes.StubForeignCallNode#getLocationIdentities()->LocationIdentity[]::: stub foreign call node get location identities
org.graalvm.compiler.hotspot.nodes.StubForeignCallNode#operands(NodeLIRBuilderTool)->Value[]::: stub foreign call node operands
org.graalvm.compiler.hotspot.nodes.StubForeignCallNode#generate(NodeLIRBuilderTool)->void::: stub foreign call node generate
org.graalvm.compiler.hotspot.nodes.StubForeignCallNode#toString(Verbosity)->String::: stub foreign call node to string
org.graalvm.compiler.hotspot.nodes.StubStartNode#getStub()->Stub::: stub start node get stub
org.graalvm.compiler.hotspot.nodes.VMErrorNode#generate(NodeLIRBuilderTool)->void::: error node generate
org.graalvm.compiler.hotspot.nodes.VMErrorNode#vmError(String, long)->void::: error node vm error

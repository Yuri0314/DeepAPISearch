sun.net.www.http.ChunkedInputStream#read()->int:::See the general contract of the read method of InputStream.
sun.net.www.http.ChunkedInputStream#read(byte[], int, int)->int:::Reads bytes from this stream into the specified byte array, starting at the given offset.
sun.net.www.http.ChunkedInputStream#available()->int:::Returns the number of bytes that can be read from this input stream without blocking.
sun.net.www.http.ChunkedInputStream#close()->void:::Close the stream by either returning the connection to the keep alive cache or closing the underlying stream
sun.net.www.http.ChunkedInputStream#hurry()->boolean:::Hurry the input stream by reading everything from the underlying stream
sun.net.www.http.ChunkedOutputStream#checkError()->boolean::: chunked output stream check error
sun.net.www.http.ChunkedOutputStream#write(byte[], int, int)->void::: chunked output stream write
sun.net.www.http.ChunkedOutputStream#write(int)->void::: chunked output stream write
sun.net.www.http.ChunkedOutputStream#reset()->void::: chunked output stream reset
sun.net.www.http.ChunkedOutputStream#size()->int::: chunked output stream size
sun.net.www.http.ChunkedOutputStream#close()->void::: chunked output stream close
sun.net.www.http.ChunkedOutputStream#flush()->void::: chunked output stream flush
sun.net.www.http.HttpCapture#sent(int)->void::: http capture sent
sun.net.www.http.HttpCapture#received(int)->void::: http capture received
sun.net.www.http.HttpCapture#flush()->void::: http capture flush
sun.net.www.http.HttpCapture#getCapture(java.net.URL)->HttpCapture::: http capture get capture
sun.net.www.http.HttpCaptureInputStream#read()->int::: http capture input stream read
sun.net.www.http.HttpCaptureInputStream#close()->void::: http capture input stream close
sun.net.www.http.HttpCaptureInputStream#read(byte[])->int::: http capture input stream read
sun.net.www.http.HttpCaptureInputStream#read(byte[], int, int)->int::: http capture input stream read
sun.net.www.http.HttpCaptureOutputStream#write(int)->void::: http capture output stream write
sun.net.www.http.HttpCaptureOutputStream#write(byte[])->void::: http capture output stream write
sun.net.www.http.HttpCaptureOutputStream#write(byte[], int, int)->void::: http capture output stream write
sun.net.www.http.HttpCaptureOutputStream#flush()->void::: http capture output stream flush
sun.net.www.http.HttpClient#getDefaultPort()->int:::return default port number (subclasses may override)
sun.net.www.http.HttpClient#resetProperties()->void:::A NOP method kept for backwards binary compatibility
sun.net.www.http.HttpClient#getKeepAliveTimeout()->int::: http client get keep alive timeout
sun.net.www.http.HttpClient#getHttpKeepAliveSet()->boolean::: http client get http keep alive set
sun.net.www.http.HttpClient#newHttpProxy(String, int, String)->Proxy::: http client new http proxy
sun.net.www.http.HttpClient#New(URL)->HttpClient::: http client  new
sun.net.www.http.HttpClient#New(URL, boolean)->HttpClient::: http client  new
sun.net.www.http.HttpClient#New(URL, Proxy, int, boolean, HttpURLConnection)->HttpClient::: http client  new
sun.net.www.http.HttpClient#New(URL, Proxy, int, HttpURLConnection)->HttpClient::: http client  new
sun.net.www.http.HttpClient#New(URL, String, int, boolean)->HttpClient::: http client  new
sun.net.www.http.HttpClient#New(URL, String, int, boolean, int, HttpURLConnection)->HttpClient::: http client  new
sun.net.www.http.HttpClient#getAuthenticatorKey()->String::: http client get authenticator key
sun.net.www.http.HttpClient#finished()->void::: http client finished
sun.net.www.http.HttpClient#available()->boolean::: http client available
sun.net.www.http.HttpClient#putInKeepAliveCache()->void::: http client put in keep alive cache
sun.net.www.http.HttpClient#isInKeepAliveCache()->boolean::: http client is in keep alive cache
sun.net.www.http.HttpClient#closeIdleConnection()->void::: http client close idle connection
sun.net.www.http.HttpClient#openServer(String, int)->void::: http client open server
sun.net.www.http.HttpClient#needsTunneling()->boolean::: http client needs tunneling
sun.net.www.http.HttpClient#isCachedConnection()->boolean::: http client is cached connection
sun.net.www.http.HttpClient#afterConnect()->void::: http client after connect
sun.net.www.http.HttpClient#openServer()->void::: http client open server
sun.net.www.http.HttpClient#getURLFile()->String::: http client get file
sun.net.www.http.HttpClient#writeRequests(MessageHeader)->void::: http client write requests
sun.net.www.http.HttpClient#writeRequests(MessageHeader, PosterOutputStream)->void::: http client write requests
sun.net.www.http.HttpClient#writeRequests(MessageHeader, PosterOutputStream, boolean)->void::: http client write requests
sun.net.www.http.HttpClient#parseHTTP(MessageHeader, ProgressSource, HttpURLConnection)->boolean::: http client parse p
sun.net.www.http.HttpClient#getInputStream()->InputStream::: http client get input stream
sun.net.www.http.HttpClient#getOutputStream()->OutputStream::: http client get output stream
sun.net.www.http.HttpClient#toString()->String::: http client to string
sun.net.www.http.HttpClient#isKeepingAlive()->boolean::: http client is keeping alive
sun.net.www.http.HttpClient#setCacheRequest(CacheRequest)->void::: http client set cache request
sun.net.www.http.HttpClient#getCacheRequest()->CacheRequest::: http client get cache request
sun.net.www.http.HttpClient#getRequestMethod()->String::: http client get request method
sun.net.www.http.HttpClient#setDoNotRetry(boolean)->void::: http client set do not retry
sun.net.www.http.HttpClient#setIgnoreContinue(boolean)->void::: http client set ignore continue
sun.net.www.http.HttpClient#closeServer()->void::: http client close server
sun.net.www.http.HttpClient#getProxyHostUsed()->String::: http client get proxy host used
sun.net.www.http.HttpClient#getProxyPortUsed()->int::: http client get proxy port used
sun.net.www.http.Hurryable#hurry()->boolean::: hurryable hurry
sun.net.www.http.KeepAliveCache#getMaxConnections()->int::: keep alive cache get max connections
sun.net.www.http.KeepAliveCache#put(URL, Object, HttpClient)->void:::Register this URL and HttpClient (that supports keep-alive) with the cache
sun.net.www.http.KeepAliveCache#remove(HttpClient, Object)->void::: keep alive cache remove
sun.net.www.http.KeepAliveCache#removeVector(KeepAliveKey)->void::: keep alive cache remove vector
sun.net.www.http.KeepAliveCache#get(URL, Object)->HttpClient:::Check to see if this URL has a cached HttpClient
sun.net.www.http.KeepAliveCache#run()->void::: keep alive cache run
sun.net.www.http.ClientVector#get()->HttpClient::: client vector get
sun.net.www.http.ClientVector#put(HttpClient)->void::: client vector put
sun.net.www.http.ClientVector#remove(HttpClient)->boolean::: client vector remove
sun.net.www.http.KeepAliveKey#equals(Object)->boolean:::Determine whether or not two objects of this type are equal
sun.net.www.http.KeepAliveKey#hashCode()->int:::The hashCode() for this object is the string hashCode() of concatenation of the protocol, host name and port.
sun.net.www.http.KeepAliveCleanerEntry#getKeepAliveStream()->KeepAliveStream::: keep alive cleaner entry get keep alive stream
sun.net.www.http.KeepAliveCleanerEntry#getHttpClient()->HttpClient::: keep alive cleaner entry get http client
sun.net.www.http.KeepAliveCleanerEntry#setQueuedForCleanup()->void::: keep alive cleaner entry set queued for cleanup
sun.net.www.http.KeepAliveCleanerEntry#getQueuedForCleanup()->boolean::: keep alive cleaner entry get queued for cleanup
sun.net.www.http.KeepAliveStream#close()->void:::Attempt to cache this connection
sun.net.www.http.KeepAliveStream#markSupported()->boolean::: keep alive stream mark supported
sun.net.www.http.KeepAliveStream#mark(int)->void::: keep alive stream mark
sun.net.www.http.KeepAliveStream#reset()->void::: keep alive stream reset
sun.net.www.http.KeepAliveStream#hurry()->boolean::: keep alive stream hurry
sun.net.www.http.KeepAliveStream#remainingToRead()->long::: keep alive stream remaining to read
sun.net.www.http.KeepAliveStream#setClosed()->void::: keep alive stream set closed
sun.net.www.http.KeepAliveStreamCleaner#offer(KeepAliveCleanerEntry)->boolean::: keep alive stream cleaner offer
sun.net.www.http.KeepAliveStreamCleaner#run()->void::: keep alive stream cleaner run
sun.net.www.http.PosterOutputStream#write(int)->void:::Writes the specified byte to this output stream.
sun.net.www.http.PosterOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this output stream.
sun.net.www.http.PosterOutputStream#reset()->void:::Resets the count field of this output stream to zero, so that all currently accumulated output in the output stream is discarded
sun.net.www.http.PosterOutputStream#close()->void:::After close() has been called, it is no longer possible to write to this stream

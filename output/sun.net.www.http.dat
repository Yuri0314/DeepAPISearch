ChunkedInputStream#read():::See the general contract of the read method of InputStream.:::ensureOpen->if->if->readAhead->return->return
ChunkedInputStream#read(byte[], int, int):::Reads bytes from this stream into the specified byte array, starting at the given offset.:::ensureOpen->if->throw->new->IndexOutOfBoundsException->else->if->return->avail->if->if->return->fastRead->readAhead->if->return->cnt->System->arraycopy->return
ChunkedInputStream#available():::Returns the number of bytes that can be read from this input stream without blocking.:::ensureOpen->avail->if->return->readAhead->if->return->else->return
ChunkedInputStream#close():::Close the stream by either returning the connection to the keep alive cache or closing the underlying stream:::if->return->closeUnderlying
ChunkedInputStream#hurry():::Hurry the input stream by reading everything from the underlying stream:::if->return->try->readAhead->catch->return->finally->if->return->return
HttpClient#getDefaultPort():::return default port number (subclasses may override):::return
HttpClient#resetProperties():::A NOP method kept for backwards binary compatibility:::
KeepAliveCache#put(URL, Object, HttpClient):::Register this URL and HttpClient (that supports keep-alive) with the cache:::startThread->if->if->keepAliveTimer->isAlive->if->clear->cache->AccessController->new->PrivilegedAction<>->doPrivileged->key->new->KeepAliveKey->v->super->get->if->keepAliveTimeout->http->getKeepAliveTimeout->new->ClientVector->v->put->super->put->else->v->put
KeepAliveCache#get(URL, Object):::Check to see if this URL has a cached HttpClient:::key->new->KeepAliveKey->v->super->get->if->return->return->v->get
KeepAliveKey#equals(Object):::Determine whether or not two objects of this type are equal:::if->return->kae->return->host->equals->protocol->equals
KeepAliveKey#hashCode():::The hashCode() for this object is the string hashCode() of concatenation of the protocol, host name and port.:::str->return->str->hashCode->str->hashCode->hashCode
KeepAliveStream#close():::Attempt to cache this connection:::if->return->if->return->try->if->nskip->if->available->do->while->Math->available->min->skip->else->if->new->KeepAliveCleanerEntry->queueForCleanup->else->hc->closeServer->if->hc->finished->catch->finally->if->pi->finishTracking->if
PosterOutputStream#write(int):::Writes the specified byte to this output stream.:::if->return->super->write
PosterOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this output stream.:::if->return->super->write
PosterOutputStream#reset():::Resets the count field of this output stream to zero, so that all currently accumulated output in the output stream is discarded:::if->return->super->reset
PosterOutputStream#close():::After close() has been called, it is no longer possible to write to this stream:::super->close

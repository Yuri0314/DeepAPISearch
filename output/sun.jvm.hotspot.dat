HotSpotAgent#attach(int):::This attaches to a process running on the local machine.:::if->throw->new->DebuggerException->go
HotSpotAgent#attach(String, String):::This opens a core file on the local machine:::if->throw->new->DebuggerException->if->throw->new->DebuggerException->go
HotSpotAgent#attach(JVMDebugger):::This uses a JVMDebugger that is already attached to the core or process:::go
HotSpotAgent#attach(String):::This attaches to a "debug server" on a remote machine; this       remote server has already attached to a process or opened a       core file and is waiting for RMI calls on the Debugger object to       come in.:::if->throw->new->DebuggerException->if->throw->new->DebuggerException->go
HotSpotAgent#detach():::This should only be called by the user on the client machine,       not the server machine:::if->throw->new->DebuggerException->return->detachInternal
HotSpotAgent#startServer(int, String):::This attaches to a process running on the local machine and       starts a debug server, allowing remote machines to connect and       examine this process:::if->throw->new->DebuggerException->go
HotSpotAgent#startServer(int):::This attaches to a process running on the local machine and       starts a debug server, allowing remote machines to connect and       examine this process.:::startServer
HotSpotAgent#startServer(String, String, String):::This opens a core file on the local machine and starts a debug       server, allowing remote machines to connect and examine this       core file:::if->throw->new->DebuggerException->if->throw->new->DebuggerException->go
HotSpotAgent#startServer(String, String):::This opens a core file on the local machine and starts a debug       server, allowing remote machines to connect and examine this       core file.:::startServer
HotSpotAgent#shutdownServer():::This may only be called on the server side after startServer()       has been called:::if->throw->new->DebuggerException->return->detachInternal
HotSpotTypeDataBase#createField(BasicType, String, Type, boolean, long, Address):::"Virtual constructor" for fields based on type:::containingType->internalCreateField->addField
SALauncherLoader#findLibrary(String):::Checks native libraries under directories specified using the System property "sa.library.path".:::System->mapLibraryName->for->i->return
SALauncherLoader#loadClass(String, boolean):::Override loadClass so we can checkPackageAccess.:::i->name->lastIndexOf->if->sm->System->getSecurityManager->if->sm->name->substring->checkPackageAccess->clazz->findLoadedClass->if->return->try->return->findClass->catch->return->super->loadClass->finally
SALauncherLoader#getPermissions(CodeSource):::allow any classes loaded from classpath to exit the VM.:::perms->super->getPermissions->perms->new->RuntimePermission->add->return

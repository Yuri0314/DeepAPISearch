sun.jvm.hotspot.BsdVtblAccess#vtblSymbolForType(Type)->String::: bsd vtbl access vtbl symbol for type
sun.jvm.hotspot.CLHSDB#main(String[])->void::: b main
sun.jvm.hotspot.CLHSDB#run()->void::: b run
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#getAgent()->HotSpotAgent::: debugger interface get agent
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#isAttached()->boolean::: debugger interface is attached
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#attach(String)->void::: debugger interface attach
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#attach(String, String)->void::: debugger interface attach
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#detach()->void::: debugger interface detach
sun.jvm.hotspot.CommandProcessor.DebuggerInterface#reattach()->void::: debugger interface reattach
sun.jvm.hotspot.CommandProcessor.BootFilter#canInclude(InstanceKlass)->boolean::: boot filter can include
sun.jvm.hotspot.CommandProcessor.NonBootFilter#canInclude(InstanceKlass)->boolean::: non boot filter can include
sun.jvm.hotspot.CommandProcessor.Tokens#splitWhitespace(String)->String[]::: tokens split whitespace
sun.jvm.hotspot.CommandProcessor.Tokens#add(String, ArrayList)->void::: tokens add
sun.jvm.hotspot.CommandProcessor.Tokens#nextToken()->String::: tokens next token
sun.jvm.hotspot.CommandProcessor.Tokens#hasMoreTokens()->boolean::: tokens has more tokens
sun.jvm.hotspot.CommandProcessor.Tokens#countTokens()->int::: tokens count tokens
sun.jvm.hotspot.CommandProcessor.Tokens#trim(int)->void::: tokens trim
sun.jvm.hotspot.CommandProcessor.Tokens#join(String)->String::: tokens join
sun.jvm.hotspot.CommandProcessor.Tokens#at(int)->String::: tokens at
sun.jvm.hotspot.CommandProcessor.Command#doit(Tokens)->void::: command doit
sun.jvm.hotspot.CommandProcessor.Command#usage()->void::: command usage
sun.jvm.hotspot.CommandProcessor.Command#printOopValue(Oop)->void::: command print oop value
sun.jvm.hotspot.CommandProcessor.Command#printNode(SimpleTreeNode)->void::: command print node
sun.jvm.hotspot.CommandProcessor#quote(String)->void::: command processor quote
sun.jvm.hotspot.CommandProcessor#dumpType(Type)->void::: command processor dump type
sun.jvm.hotspot.CommandProcessor#dumpFields(Type)->void::: command processor dump fields
sun.jvm.hotspot.CommandProcessor#dumpFields(Type, boolean)->void::: command processor dump fields
sun.jvm.hotspot.CommandProcessor#lookup(String)->Address::: command processor lookup
sun.jvm.hotspot.CommandProcessor#parseAddress(String)->Address::: command processor parse address
sun.jvm.hotspot.CommandProcessor#printPrompt()->void::: command processor print prompt
sun.jvm.hotspot.CommandProcessor#registerCommand(String, String, String)->void::: command processor register command
sun.jvm.hotspot.CommandProcessor#setOutput(PrintStream)->void::: command processor set output
sun.jvm.hotspot.CommandProcessor#setErr(PrintStream)->void::: command processor set err
sun.jvm.hotspot.CommandProcessor#run(boolean)->void::: command processor run
sun.jvm.hotspot.CommandProcessor#executeCommand(String, boolean)->void::: command processor execute command
sun.jvm.hotspot.CommandProcessor#executeCommand(Tokens)->void::: command processor execute command
sun.jvm.hotspot.DebugServer#main(String[])->void::: debug server main
sun.jvm.hotspot.HelloWorld#main(String[])->void::: hello world main
sun.jvm.hotspot.HelloWorld#e()->int::: hello world e
sun.jvm.hotspot.HelloWorld#fib(int)->int::: hello world fib
sun.jvm.hotspot.HotSpotAgent#showUsage()->void::: hot spot agent show usage
sun.jvm.hotspot.HotSpotAgent#getDebugger()->Debugger::: hot spot agent get debugger
sun.jvm.hotspot.HotSpotAgent#getTypeDataBase()->TypeDataBase::: hot spot agent get type data base
sun.jvm.hotspot.HotSpotAgent#attach(int)->void:::This attaches to a process running on the local machine.
sun.jvm.hotspot.HotSpotAgent#attach(String, String)->void:::This opens a core file on the local machine
sun.jvm.hotspot.HotSpotAgent#attach(JVMDebugger)->void:::This uses a JVMDebugger that is already attached to the core or process
sun.jvm.hotspot.HotSpotAgent#attach(String)->void:::This attaches to a "debug server" on a remote machine; this       remote server has already attached to a process or opened a       core file and is waiting for RMI calls on the Debugger object to       come in.
sun.jvm.hotspot.HotSpotAgent#detach()->boolean:::This should only be called by the user on the client machine,       not the server machine
sun.jvm.hotspot.HotSpotAgent#startServer(int, String)->void:::This attaches to a process running on the local machine and       starts a debug server, allowing remote machines to connect and       examine this process
sun.jvm.hotspot.HotSpotAgent#startServer(int)->void:::This attaches to a process running on the local machine and       starts a debug server, allowing remote machines to connect and       examine this process.
sun.jvm.hotspot.HotSpotAgent#startServer(String, String, String)->void:::This opens a core file on the local machine and starts a debug       server, allowing remote machines to connect and examine this       core file
sun.jvm.hotspot.HotSpotAgent#startServer(String, String)->void:::This opens a core file on the local machine and starts a debug       server, allowing remote machines to connect and examine this       core file.
sun.jvm.hotspot.HotSpotAgent#shutdownServer()->boolean:::This may only be called on the server side after startServer()       has been called
sun.jvm.hotspot.HotSpotSolarisVtblAccess#vtblSymbolForType(Type)->String::: hot spot solaris vtbl access vtbl symbol for type
sun.jvm.hotspot.HotSpotTypeDataBase#lookupType(String, boolean)->Type::: hot spot type data base lookup type
sun.jvm.hotspot.HotSpotTypeDataBase#createType(String, String, boolean, boolean, boolean, long)->void::: hot spot type data base create type
sun.jvm.hotspot.HotSpotTypeDataBase#createField(BasicType, String, Type, boolean, long, Address)->void:::"Virtual constructor" for fields based on type
sun.jvm.hotspot.HotSpotTypeDataBase#internalCreateField(BasicType, String, Type, boolean, long, Address)->Field::: hot spot type data base internal create field
sun.jvm.hotspot.HSDB#main(String[])->void::: b main
sun.jvm.hotspot.HSDB#run()->void::: b run
sun.jvm.hotspot.HSDB#showThreadOopInspector(JavaThread)->void::: b show thread oop inspector
sun.jvm.hotspot.HSDB#showInspector(SimpleTreeNode)->void::: b show inspector
sun.jvm.hotspot.HSDB#showLiveness(Oop, LivenessPathList)->void::: b show liveness
sun.jvm.hotspot.HSDB#showThreadStackMemory(JavaThread)->void::: b show thread stack memory
sun.jvm.hotspot.HSDB.ObjectHistogramCleanupThunk#heapIterationComplete()->void::: object histogram cleanup thunk heap iteration complete
sun.jvm.hotspot.HSDB#showObjectsOfType(Klass)->void::: b show objects of type
sun.jvm.hotspot.HSDB.FindObjectByTypeCleanupThunk#heapIterationComplete()->void::: find object by type cleanup thunk heap iteration complete
sun.jvm.hotspot.HSDB#showThreadInfo(JavaThread)->void::: b show thread info
sun.jvm.hotspot.HSDB#showJavaStackTrace(JavaThread)->void::: b show java stack trace
sun.jvm.hotspot.HSDB#showClassBrowser()->void::: b show class browser
sun.jvm.hotspot.HSDB#showCodeViewer()->void::: b show code viewer
sun.jvm.hotspot.HSDB#showCodeViewer(Address)->void::: b show code viewer
sun.jvm.hotspot.HSDB#showMemoryViewer()->void::: b show memory viewer
sun.jvm.hotspot.HSDB#showCommandLineFlags()->void::: b show command line flags
sun.jvm.hotspot.HSDB#showVMVersion()->void::: b show version
sun.jvm.hotspot.HSDB#showSystemProperties()->void::: b show system properties
sun.jvm.hotspot.HSDB.CleanupThunk#heapIterationComplete()->void::: cleanup thunk heap iteration complete
sun.jvm.hotspot.HSDB.HeapProgress#heapIterationFractionUpdate(double)->void::: heap progress heap iteration fraction update
sun.jvm.hotspot.HSDB.HeapProgress#heapIterationComplete()->void::: heap progress heap iteration complete
sun.jvm.hotspot.HSDB.VisitHeap#run()->void::: visit heap run
sun.jvm.hotspot.LinuxVtblAccess#vtblSymbolForType(Type)->String::: linux vtbl access vtbl symbol for type
sun.jvm.hotspot.ObjectHistogram#main(String[])->void::: object histogram main
sun.jvm.hotspot.RMIHelper#rebind(String, Remote)->void::: helper rebind
sun.jvm.hotspot.RMIHelper#unbind(String)->void::: helper unbind
sun.jvm.hotspot.RMIHelper#lookup(String)->Remote::: helper lookup
sun.jvm.hotspot.SAGetopt#getOptarg()->String::: getopt get optarg
sun.jvm.hotspot.SAGetopt#getOptind()->int::: getopt get optind
sun.jvm.hotspot.SAGetopt#next(String, String[])->String::: getopt next
sun.jvm.hotspot.SALauncher#main(String[])->void::: launcher main
sun.jvm.hotspot.SALauncherLoader#findLibrary(String)->String:::Checks native libraries under directories specified using the System property "sa.library.path".
sun.jvm.hotspot.SALauncherLoader#loadClass(String, boolean)->Class:::Override loadClass so we can checkPackageAccess.
sun.jvm.hotspot.SALauncherLoader#getPermissions(CodeSource)->PermissionCollection:::allow any classes loaded from classpath to exit the VM.
sun.jvm.hotspot.StackTrace#main(String[])->void::: stack trace main
sun.jvm.hotspot.Win32VtblAccess#vtblSymbolForType(Type)->String::: win32 vtbl access vtbl symbol for type

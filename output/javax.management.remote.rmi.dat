NoCallStackClassLoader#stringToBytes(String):::Construct a byte[] using the characters of the given String:::slen->s->length->bytes->new->byteArr->for->i->return
RMIConnection#getConnectionId():::Returns the connection ID:::
RMIConnection#close():::Closes this connection:::
RMIConnection#createMBean(String, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName).:::
RMIConnection#createMBean(String, ObjectName, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName).:::
RMIConnection#createMBean(String, ObjectName, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, Object[], String[]):::
RMIConnection#createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName, Object[], String[]):::
RMIConnection#unregisterMBean(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#unregisterMBean(ObjectName).:::
RMIConnection#getObjectInstance(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#getObjectInstance(ObjectName).:::
RMIConnection#queryMBeans(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#queryMBeans(ObjectName, QueryExp):::
RMIConnection#queryNames(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#queryNames(ObjectName, QueryExp):::
RMIConnection#isRegistered(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#isRegistered(ObjectName).:::
RMIConnection#getMBeanCount(Subject):::Handles the method javax.management.MBeanServerConnection#getMBeanCount().:::
RMIConnection#getAttribute(ObjectName, String, Subject):::Handles the method javax.management.MBeanServerConnection#getAttribute(ObjectName, String).:::
RMIConnection#getAttributes(ObjectName, String[], Subject):::Handles the method javax.management.MBeanServerConnection#getAttributes(ObjectName, String[]).:::
RMIConnection#setAttribute(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#setAttribute(ObjectName, Attribute):::
RMIConnection#setAttributes(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#setAttributes(ObjectName, AttributeList):::
RMIConnection#invoke(ObjectName, String, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#invoke(ObjectName, String, Object[], String[]):::
RMIConnection#getDefaultDomain(Subject):::Handles the method javax.management.MBeanServerConnection#getDefaultDomain().:::
RMIConnection#getDomains(Subject):::Handles the method javax.management.MBeanServerConnection#getDomains().:::
RMIConnection#getMBeanInfo(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#getMBeanInfo(ObjectName).:::
RMIConnection#isInstanceOf(ObjectName, String, Subject):::Handles the method javax.management.MBeanServerConnection#isInstanceOf(ObjectName, String).:::
RMIConnection#addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::
RMIConnection#removeNotificationListener(ObjectName, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName).:::
RMIConnection#removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::
RMIConnection#addNotificationListeners(ObjectName[], MarshalledObject[], Subject[]):::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object).  Register for notifications from the given MBeans that match the given filters:::
RMIConnection#removeNotificationListeners(ObjectName, Integer[], Subject):::Handles the javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) removeNotificationListener(ObjectName, NotificationListener) and javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object) removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.  This method removes one or more NotificationListeners from a given MBean in the MBean server.  The NotificationListeners are identified by the IDs which were returned by the #addNotificationListeners(ObjectName[], MarshalledObject[], Subject[]) method.:::
RMIConnection#fetchNotifications(long, int, long):::Retrieves notifications from the connector server:::
RMIConnectionImpl#toString():::Returns a string representation of this object:::return->super->toString
RMIConnector#toString():::Returns a string representation of this object:::b->this->getClass->getName->new->StringBuilder->b->append->if->b->append->rmiServer->toString->append->if->if->b->append->b->append->jmxServiceURL->toString->append->return->b->toString
RMIConnector#getAddress():::The address of this connector.:::return
RMIConnectorServer#toJMXConnector(Map):::Returns a client stub for this connector server:::if->isActive->throw->new->IllegalStateException->usemap->Collections->emptyMap->new->HashMap<String,Object>->if->EnvHelp->checkAttributes->usemap->putAll->EnvHelp->filterAttributes->stub->rmiServerImpl->toStub->return->new->RMIConnector
RMIConnectorServer#start():::Activates the connector server, that is starts listening for client connections:::tracing->logger->traceOn->if->if->logger->trace->return->else->if->if->logger->trace->throw->new->IOException->if->getMBeanServer->throw->new->IllegalStateException->if->accessFile->attributes->get->if->mbsf->try->new->MBeanServerFileAccessController->catch->throw->EnvHelp->e->getMessage->new->IllegalArgumentException->initCause->finally->setMBeanServerForwarder->try->if->logger->trace->EnvHelp->getMBeanServer->resolveServerClassLoader->catch->x->new->IllegalArgumentException->throw->EnvHelp->initCause->finally->if->logger->trace->rmiServer->if->else->newServer->rmiServer->getMBeanServer->setMBeanServer->rmiServer->setDefaultClassLoader->rmiServer->setRMIConnectorServer->rmiServer->export->try->if->logger->trace->objref->objectToBind->if->address->getURLPath->startsWith->jndiUrl->address->getURLPath->substring->if->logger->trace->stringBoolean->attributes->get->rebind->EnvHelp->computeBooleanFromString->if->logger->trace->try->if->logger->trace->usemap->EnvHelp->mapToHashtable->bind->catch->throw->newIOException->finally->else->if->logger->trace->encodeStubInAddress->if->logger->trace->catch->try->rmiServer->close->catch->finally->if->throw->else->if->throw->else->throw->newIOException->finally->synchronized->openedServers->add->if->logger->trace->logger->trace
RMIConnectorServer#stop():::Deactivates the connector server, that is, stops listening for client connections:::tracing->logger->traceOn->synchronized->if->if->logger->trace->return->else->if->if->logger->trace->if->logger->trace->synchronized->openedServers->remove->exception->if->try->if->logger->trace->rmiServerImpl->close->catch->if->logger->trace->if->logger->debugOn->logger->debug->finally->if->try->if->logger->trace->usemap->EnvHelp->mapToHashtable->ctx->new->InitialContext->ctx->unbind->ctx->close->catch->if->logger->trace->if->logger->debugOn->logger->debug->if->newIOException->finally->if->throw->if->logger->trace
RMIConnectorServer#bind(String, Hashtable, RMIServer, boolean):::Bind a stub to a registry.:::ctx->new->InitialContext->if->ctx->rebind->else->ctx->bind->ctx->close
RMIConnectorServer#newServer():::Creates a new RMIServerImpl.:::port->if->else->address->getPort->return->newJRMPServer
RMIConnectorServer#encodeStub(RMIServer, Map):::Returns the IOR of the given rmiServer.:::return->encodeJRMPStub
RMIJRMPServerImpl#toStub():::Returns a serializable stub for this RMIServer object.:::return->RemoteObject->toStub
RMIJRMPServerImpl#makeClient(String, Subject):::Creates a new client connection as an RMI object exported through JRMP:::if->throw->new->NullPointerException->client->getDefaultClassLoader->new->RMIConnectionImpl->export->return
RMIJRMPServerImpl#closeServer():::Called by #close() to close the connector server by unexporting this object:::unexport
RMIJRMPServerImpl#newClientCheckInput(ObjectInputFilter.FilterInfo):::Check that a type in the remote invocation of RMIServerImpl#newClient is one of the allowedTypes.:::status->if->filterInfo->serialClass->type->filterInfo->serialClass->getName->if->allowedTypes->contains->else->return
RMIServer#getVersion():::The version of the RMI Connector Protocol understood by this connector server:::
RMIServer#newClient(Object):::Makes a new connection through this RMI connector:::
RMIServerImpl#export():::Exports this RMI object.:::
RMIServerImpl#toStub():::Returns a remotable stub for this server object.:::
RMIServerImpl#setDefaultClassLoader(ClassLoader):::Sets the default ClassLoader for this connector server:::
RMIServerImpl#getDefaultClassLoader():::Gets the default ClassLoader used by this connector server.:::return
RMIServerImpl#setMBeanServer(MBeanServer):::Sets the MBeanServer to which this connector server is attached:::
RMIServerImpl#getMBeanServer():::The MBeanServer to which this connector server is attached:::return
RMIServerImpl#newClient(Object):::Creates a new client connection:::return->doNewClient
RMIServerImpl#doNewClient(Object):::This method could be overridden by subclasses defined in this package to perform additional operations specific to the underlying transport before creating the new client connection.:::tracing->logger->traceOn->if->logger->trace->if->getMBeanServer->throw->new->IllegalStateException->subject->authenticator->env->get->if->if->env->get->env->get->new->JMXPluggableAuthenticator->if->if->logger->authenticator->getClass->getName->trace->try->authenticator->authenticate->catch->logger->trace->throw->finally->if->if->logger->trace->else->logger->trace->connectionId->getProtocol->makeConnectionId->if->logger->trace->client->makeClient->dropDeadReferences->wr->new->WeakReference<RMIConnection>->synchronized->clientList->add->connServer->connectionOpened->synchronized->if->clientList->contains->throw->new->IOException->if->logger->trace->return
RMIServerImpl#makeClient(String, Subject):::Creates a new client connection:::
RMIServerImpl#closeClient(RMIConnection):::Closes a client connection made by #makeClient makeClient.:::
RMIServerImpl#getProtocol():::Returns the protocol string for this object:::
RMIServerImpl#clientClosed(RMIConnection):::Method called when a client connection created by #makeClient makeClient is closed:::debug->logger->debugOn->if->logger->trace->if->throw->new->NullPointerException->synchronized->dropDeadReferences->for->it->clientList->iterator->it->hasNext->if->logger->trace->closeClient->if->logger->trace->connServer->client->getConnectionId->connectionClosed->if->logger->trace
RMIServerImpl#close():::Closes this connection server:::tracing->logger->traceOn->debug->logger->debugOn->if->logger->trace->ioException->try->if->logger->debug->closeServer->catch->if->logger->trace->if->logger->debug->finally->if->logger->debug->while->synchronized->if->logger->debug->dropDeadReferences->if->logger->clientList->size->debug->if->clientList->size->break->for->it->clientList->iterator->it->hasNext->if->notifBuffer->dispose->if->if->logger->trace->throw->if->logger->trace
RMIServerImpl#closeServer():::Called by #close() to close the connector server:::

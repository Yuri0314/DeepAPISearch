javax.management.remote.rmi.NoCallStackClassLoader#findClass(String)->Class::: no call stack class loader find class
javax.management.remote.rmi.NoCallStackClassLoader#stringToBytes(String)->byte[]:::Construct a byte[] using the characters of the given String
javax.management.remote.rmi.RMIConnection#getConnectionId()->String:::Returns the connection ID
javax.management.remote.rmi.RMIConnection#close()->void:::Closes this connection
javax.management.remote.rmi.RMIConnection#createMBean(String, ObjectName, Subject)->ObjectInstance:::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName).
javax.management.remote.rmi.RMIConnection#createMBean(String, ObjectName, ObjectName, Subject)->ObjectInstance:::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName).
javax.management.remote.rmi.RMIConnection#createMBean(String, ObjectName, MarshalledObject, String[], Subject)->ObjectInstance:::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, Object[], String[])
javax.management.remote.rmi.RMIConnection#createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)->ObjectInstance:::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName, Object[], String[])
javax.management.remote.rmi.RMIConnection#unregisterMBean(ObjectName, Subject)->void:::Handles the method javax.management.MBeanServerConnection#unregisterMBean(ObjectName).
javax.management.remote.rmi.RMIConnection#getObjectInstance(ObjectName, Subject)->ObjectInstance:::Handles the method javax.management.MBeanServerConnection#getObjectInstance(ObjectName).
javax.management.remote.rmi.RMIConnection#queryMBeans(ObjectName, MarshalledObject, Subject)->Set:::Handles the method javax.management.MBeanServerConnection#queryMBeans(ObjectName, QueryExp)
javax.management.remote.rmi.RMIConnection#queryNames(ObjectName, MarshalledObject, Subject)->Set:::Handles the method javax.management.MBeanServerConnection#queryNames(ObjectName, QueryExp)
javax.management.remote.rmi.RMIConnection#isRegistered(ObjectName, Subject)->boolean:::Handles the method javax.management.MBeanServerConnection#isRegistered(ObjectName).
javax.management.remote.rmi.RMIConnection#getMBeanCount(Subject)->Integer:::Handles the method javax.management.MBeanServerConnection#getMBeanCount().
javax.management.remote.rmi.RMIConnection#getAttribute(ObjectName, String, Subject)->Object:::Handles the method javax.management.MBeanServerConnection#getAttribute(ObjectName, String).
javax.management.remote.rmi.RMIConnection#getAttributes(ObjectName, String[], Subject)->AttributeList:::Handles the method javax.management.MBeanServerConnection#getAttributes(ObjectName, String[]).
javax.management.remote.rmi.RMIConnection#setAttribute(ObjectName, MarshalledObject, Subject)->void:::Handles the method javax.management.MBeanServerConnection#setAttribute(ObjectName, Attribute)
javax.management.remote.rmi.RMIConnection#setAttributes(ObjectName, MarshalledObject, Subject)->AttributeList:::Handles the method javax.management.MBeanServerConnection#setAttributes(ObjectName, AttributeList)
javax.management.remote.rmi.RMIConnection#invoke(ObjectName, String, MarshalledObject, String[], Subject)->Object:::Handles the method javax.management.MBeanServerConnection#invoke(ObjectName, String, Object[], String[])
javax.management.remote.rmi.RMIConnection#getDefaultDomain(Subject)->String:::Handles the method javax.management.MBeanServerConnection#getDefaultDomain().
javax.management.remote.rmi.RMIConnection#getDomains(Subject)->String[]:::Handles the method javax.management.MBeanServerConnection#getDomains().
javax.management.remote.rmi.RMIConnection#getMBeanInfo(ObjectName, Subject)->MBeanInfo:::Handles the method javax.management.MBeanServerConnection#getMBeanInfo(ObjectName).
javax.management.remote.rmi.RMIConnection#isInstanceOf(ObjectName, String, Subject)->boolean:::Handles the method javax.management.MBeanServerConnection#isInstanceOf(ObjectName, String).
javax.management.remote.rmi.RMIConnection#addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)->void:::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
javax.management.remote.rmi.RMIConnection#removeNotificationListener(ObjectName, ObjectName, Subject)->void:::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName).
javax.management.remote.rmi.RMIConnection#removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)->void:::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
javax.management.remote.rmi.RMIConnection#addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])->Integer[]:::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object).  Register for notifications from the given MBeans that match the given filters
javax.management.remote.rmi.RMIConnection#removeNotificationListeners(ObjectName, Integer[], Subject)->void:::Handles the javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) removeNotificationListener(ObjectName, NotificationListener) and javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object) removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.  This method removes one or more NotificationListeners from a given MBean in the MBean server.  The NotificationListeners are identified by the IDs which were returned by the #addNotificationListeners(ObjectName[], MarshalledObject[], Subject[]) method.
javax.management.remote.rmi.RMIConnection#fetchNotifications(long, int, long)->NotificationResult:::Retrieves notifications from the connector server
javax.management.remote.rmi.RMIConnectionImpl#getConnectionId()->String::: connection impl get connection id
javax.management.remote.rmi.RMIConnectionImpl#close()->void::: connection impl close
javax.management.remote.rmi.RMIConnectionImpl#unreferenced()->void::: connection impl unreferenced
javax.management.remote.rmi.RMIConnectionImpl#createMBean(String, ObjectName, Subject)->ObjectInstance::: connection impl create bean
javax.management.remote.rmi.RMIConnectionImpl#createMBean(String, ObjectName, ObjectName, Subject)->ObjectInstance::: connection impl create bean
javax.management.remote.rmi.RMIConnectionImpl#createMBean(String, ObjectName, MarshalledObject, String[], Subject)->ObjectInstance::: connection impl create bean
javax.management.remote.rmi.RMIConnectionImpl#createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)->ObjectInstance::: connection impl create bean
javax.management.remote.rmi.RMIConnectionImpl#unregisterMBean(ObjectName, Subject)->void::: connection impl unregister bean
javax.management.remote.rmi.RMIConnectionImpl#getObjectInstance(ObjectName, Subject)->ObjectInstance::: connection impl get object instance
javax.management.remote.rmi.RMIConnectionImpl#queryMBeans(ObjectName, MarshalledObject, Subject)->Set::: connection impl query beans
javax.management.remote.rmi.RMIConnectionImpl#queryNames(ObjectName, MarshalledObject, Subject)->Set::: connection impl query names
javax.management.remote.rmi.RMIConnectionImpl#isRegistered(ObjectName, Subject)->boolean::: connection impl is registered
javax.management.remote.rmi.RMIConnectionImpl#getMBeanCount(Subject)->Integer::: connection impl get bean count
javax.management.remote.rmi.RMIConnectionImpl#getAttribute(ObjectName, String, Subject)->Object::: connection impl get attribute
javax.management.remote.rmi.RMIConnectionImpl#getAttributes(ObjectName, String[], Subject)->AttributeList::: connection impl get attributes
javax.management.remote.rmi.RMIConnectionImpl#setAttribute(ObjectName, MarshalledObject, Subject)->void::: connection impl set attribute
javax.management.remote.rmi.RMIConnectionImpl#setAttributes(ObjectName, MarshalledObject, Subject)->AttributeList::: connection impl set attributes
javax.management.remote.rmi.RMIConnectionImpl#invoke(ObjectName, String, MarshalledObject, String[], Subject)->Object::: connection impl invoke
javax.management.remote.rmi.RMIConnectionImpl#getDefaultDomain(Subject)->String::: connection impl get default domain
javax.management.remote.rmi.RMIConnectionImpl#getDomains(Subject)->String[]::: connection impl get domains
javax.management.remote.rmi.RMIConnectionImpl#getMBeanInfo(ObjectName, Subject)->MBeanInfo::: connection impl get bean info
javax.management.remote.rmi.RMIConnectionImpl#isInstanceOf(ObjectName, String, Subject)->boolean::: connection impl is instance of
javax.management.remote.rmi.RMIConnectionImpl#addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])->Integer[]::: connection impl add notification listeners
javax.management.remote.rmi.RMIConnectionImpl#addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)->void::: connection impl add notification listener
javax.management.remote.rmi.RMIConnectionImpl#removeNotificationListeners(ObjectName, Integer[], Subject)->void::: connection impl remove notification listeners
javax.management.remote.rmi.RMIConnectionImpl#removeNotificationListener(ObjectName, ObjectName, Subject)->void::: connection impl remove notification listener
javax.management.remote.rmi.RMIConnectionImpl#removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)->void::: connection impl remove notification listener
javax.management.remote.rmi.RMIConnectionImpl#fetchNotifications(long, int, long)->NotificationResult::: connection impl fetch notifications
javax.management.remote.rmi.RMIConnectionImpl#toString()->String:::Returns a string representation of this object
javax.management.remote.rmi.RMIConnectionImpl_Stub#addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)->void::: connection impl_ stub add notification listener
javax.management.remote.rmi.RMIConnectionImpl_Stub#addNotificationListeners(javax.management.ObjectName[], java.rmi.MarshalledObject[], javax.security.auth.Subject[])->java.lang.Integer[]::: connection impl_ stub add notification listeners
javax.management.remote.rmi.RMIConnectionImpl_Stub#close()->void::: connection impl_ stub close
javax.management.remote.rmi.RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)->javax.management.ObjectInstance::: connection impl_ stub create bean
javax.management.remote.rmi.RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)->javax.management.ObjectInstance::: connection impl_ stub create bean
javax.management.remote.rmi.RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName, javax.security.auth.Subject)->javax.management.ObjectInstance::: connection impl_ stub create bean
javax.management.remote.rmi.RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.security.auth.Subject)->javax.management.ObjectInstance::: connection impl_ stub create bean
javax.management.remote.rmi.RMIConnectionImpl_Stub#fetchNotifications(long, int, long)->javax.management.remote.NotificationResult::: connection impl_ stub fetch notifications
javax.management.remote.rmi.RMIConnectionImpl_Stub#getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)->java.lang.Object::: connection impl_ stub get attribute
javax.management.remote.rmi.RMIConnectionImpl_Stub#getAttributes(javax.management.ObjectName, java.lang.String[], javax.security.auth.Subject)->javax.management.AttributeList::: connection impl_ stub get attributes
javax.management.remote.rmi.RMIConnectionImpl_Stub#getConnectionId()->java.lang.String::: connection impl_ stub get connection id
javax.management.remote.rmi.RMIConnectionImpl_Stub#getDefaultDomain(javax.security.auth.Subject)->java.lang.String::: connection impl_ stub get default domain
javax.management.remote.rmi.RMIConnectionImpl_Stub#getDomains(javax.security.auth.Subject)->java.lang.String[]::: connection impl_ stub get domains
javax.management.remote.rmi.RMIConnectionImpl_Stub#getMBeanCount(javax.security.auth.Subject)->java.lang.Integer::: connection impl_ stub get bean count
javax.management.remote.rmi.RMIConnectionImpl_Stub#getMBeanInfo(javax.management.ObjectName, javax.security.auth.Subject)->javax.management.MBeanInfo::: connection impl_ stub get bean info
javax.management.remote.rmi.RMIConnectionImpl_Stub#getObjectInstance(javax.management.ObjectName, javax.security.auth.Subject)->javax.management.ObjectInstance::: connection impl_ stub get object instance
javax.management.remote.rmi.RMIConnectionImpl_Stub#invoke(javax.management.ObjectName, java.lang.String, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)->java.lang.Object::: connection impl_ stub invoke
javax.management.remote.rmi.RMIConnectionImpl_Stub#isInstanceOf(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)->boolean::: connection impl_ stub is instance of
javax.management.remote.rmi.RMIConnectionImpl_Stub#isRegistered(javax.management.ObjectName, javax.security.auth.Subject)->boolean::: connection impl_ stub is registered
javax.management.remote.rmi.RMIConnectionImpl_Stub#queryMBeans(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)->java.util.Set::: connection impl_ stub query beans
javax.management.remote.rmi.RMIConnectionImpl_Stub#queryNames(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)->java.util.Set::: connection impl_ stub query names
javax.management.remote.rmi.RMIConnectionImpl_Stub#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)->void::: connection impl_ stub remove notification listener
javax.management.remote.rmi.RMIConnectionImpl_Stub#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName, javax.security.auth.Subject)->void::: connection impl_ stub remove notification listener
javax.management.remote.rmi.RMIConnectionImpl_Stub#removeNotificationListeners(javax.management.ObjectName, java.lang.Integer[], javax.security.auth.Subject)->void::: connection impl_ stub remove notification listeners
javax.management.remote.rmi.RMIConnectionImpl_Stub#setAttribute(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)->void::: connection impl_ stub set attribute
javax.management.remote.rmi.RMIConnectionImpl_Stub#setAttributes(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)->javax.management.AttributeList::: connection impl_ stub set attributes
javax.management.remote.rmi.RMIConnectionImpl_Stub#unregisterMBean(javax.management.ObjectName, javax.security.auth.Subject)->void::: connection impl_ stub unregister bean
javax.management.remote.rmi.RMIConnector.Util#cast(Object)->T::: util cast
javax.management.remote.rmi.RMIConnector#toString()->String:::Returns a string representation of this object
javax.management.remote.rmi.RMIConnector#getAddress()->JMXServiceURL:::The address of this connector.
javax.management.remote.rmi.RMIConnector#connect()->void::: connector connect
javax.management.remote.rmi.RMIConnector#connect(Map)->void::: connector connect
javax.management.remote.rmi.RMIConnector#getConnectionId()->String::: connector get connection id
javax.management.remote.rmi.RMIConnector#getMBeanServerConnection()->MBeanServerConnection::: connector get bean server connection
javax.management.remote.rmi.RMIConnector#getMBeanServerConnection(Subject)->MBeanServerConnection::: connector get bean server connection
javax.management.remote.rmi.RMIConnector#addConnectionNotificationListener(NotificationListener, NotificationFilter, Object)->void::: connector add connection notification listener
javax.management.remote.rmi.RMIConnector#removeConnectionNotificationListener(NotificationListener)->void::: connector remove connection notification listener
javax.management.remote.rmi.RMIConnector#removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)->void::: connector remove connection notification listener
javax.management.remote.rmi.RMIConnector#close()->void::: connector close
javax.management.remote.rmi.RMIConnector#getAttributesNames(AttributeList)->String::: connector get attributes names
javax.management.remote.rmi.RMIConnectorServer#toJMXConnector(Map)->JMXConnector:::Returns a client stub for this connector server
javax.management.remote.rmi.RMIConnectorServer#start()->void:::Activates the connector server, that is starts listening for client connections
javax.management.remote.rmi.RMIConnectorServer#stop()->void:::Deactivates the connector server, that is, stops listening for client connections
javax.management.remote.rmi.RMIConnectorServer#isActive()->boolean::: connector server is active
javax.management.remote.rmi.RMIConnectorServer#getAddress()->JMXServiceURL::: connector server get address
javax.management.remote.rmi.RMIConnectorServer#getAttributes()->Map::: connector server get attributes
javax.management.remote.rmi.RMIConnectorServer#setMBeanServerForwarder(MBeanServerForwarder)->void::: connector server set bean server forwarder
javax.management.remote.rmi.RMIConnectorServer#connectionOpened(String, String, Object)->void::: connector server connection opened
javax.management.remote.rmi.RMIConnectorServer#connectionClosed(String, String, Object)->void::: connector server connection closed
javax.management.remote.rmi.RMIConnectorServer#connectionFailed(String, String, Object)->void::: connector server connection failed
javax.management.remote.rmi.RMIConnectorServer#bind(String, Hashtable, RMIServer, boolean)->void:::Bind a stub to a registry.
javax.management.remote.rmi.RMIConnectorServer#newServer()->RMIServerImpl:::Creates a new RMIServerImpl.
javax.management.remote.rmi.RMIConnectorServer#encodeStub(RMIServer, Map)->String:::Returns the IOR of the given rmiServer.
javax.management.remote.rmi.RMIConnectorServer#encodeJRMPStub(RMIServer, Map)->String::: connector server encode stub
javax.management.remote.rmi.RMIIIOPServerImpl#export()->void::: server impl export
javax.management.remote.rmi.RMIIIOPServerImpl#getProtocol()->String::: server impl get protocol
javax.management.remote.rmi.RMIIIOPServerImpl#toStub()->Remote::: server impl to stub
javax.management.remote.rmi.RMIIIOPServerImpl#makeClient(String, Subject)->RMIConnection::: server impl make client
javax.management.remote.rmi.RMIIIOPServerImpl#closeClient(RMIConnection)->void::: server impl close client
javax.management.remote.rmi.RMIIIOPServerImpl#closeServer()->void::: server impl close server
javax.management.remote.rmi.RMIIIOPServerImpl#doNewClient(Object)->RMIConnection::: server impl do new client
javax.management.remote.rmi.RMIJRMPServerImpl#export()->void::: server impl export
javax.management.remote.rmi.RMIJRMPServerImpl#getProtocol()->String::: server impl get protocol
javax.management.remote.rmi.RMIJRMPServerImpl#toStub()->Remote:::Returns a serializable stub for this RMIServer object.
javax.management.remote.rmi.RMIJRMPServerImpl#makeClient(String, Subject)->RMIConnection:::Creates a new client connection as an RMI object exported through JRMP
javax.management.remote.rmi.RMIJRMPServerImpl#closeClient(RMIConnection)->void::: server impl close client
javax.management.remote.rmi.RMIJRMPServerImpl#closeServer()->void:::Called by #close() to close the connector server by unexporting this object
javax.management.remote.rmi.RMIJRMPServerImpl#newClientCheckInput(ObjectInputFilter.FilterInfo)->ObjectInputFilter.Status:::Check that a type in the remote invocation of RMIServerImpl#newClient is one of the allowedTypes.
javax.management.remote.rmi.RMIServer#getVersion()->String:::The version of the RMI Connector Protocol understood by this connector server
javax.management.remote.rmi.RMIServer#newClient(Object)->RMIConnection:::Makes a new connection through this RMI connector
javax.management.remote.rmi.RMIServerImpl#setRMIConnectorServer(RMIConnectorServer)->void::: server impl set connector server
javax.management.remote.rmi.RMIServerImpl#export()->void:::Exports this RMI object.
javax.management.remote.rmi.RMIServerImpl#toStub()->Remote:::Returns a remotable stub for this server object.
javax.management.remote.rmi.RMIServerImpl#setDefaultClassLoader(ClassLoader)->void:::Sets the default ClassLoader for this connector server
javax.management.remote.rmi.RMIServerImpl#getDefaultClassLoader()->ClassLoader:::Gets the default ClassLoader used by this connector server.
javax.management.remote.rmi.RMIServerImpl#setMBeanServer(MBeanServer)->void:::Sets the MBeanServer to which this connector server is attached
javax.management.remote.rmi.RMIServerImpl#getMBeanServer()->MBeanServer:::The MBeanServer to which this connector server is attached
javax.management.remote.rmi.RMIServerImpl#getVersion()->String::: server impl get version
javax.management.remote.rmi.RMIServerImpl#newClient(Object)->RMIConnection:::Creates a new client connection
javax.management.remote.rmi.RMIServerImpl#doNewClient(Object)->RMIConnection:::This method could be overridden by subclasses defined in this package to perform additional operations specific to the underlying transport before creating the new client connection.
javax.management.remote.rmi.RMIServerImpl#makeClient(String, Subject)->RMIConnection:::Creates a new client connection
javax.management.remote.rmi.RMIServerImpl#closeClient(RMIConnection)->void:::Closes a client connection made by #makeClient makeClient.
javax.management.remote.rmi.RMIServerImpl#getProtocol()->String:::Returns the protocol string for this object
javax.management.remote.rmi.RMIServerImpl#clientClosed(RMIConnection)->void:::Method called when a client connection created by #makeClient makeClient is closed
javax.management.remote.rmi.RMIServerImpl#close()->void:::Closes this connection server
javax.management.remote.rmi.RMIServerImpl#closeServer()->void:::Called by #close() to close the connector server
javax.management.remote.rmi.RMIServerImpl#getNotifBuffer()->NotificationBuffer::: server impl get notif buffer
javax.management.remote.rmi.RMIServerImpl_Stub#getVersion()->java.lang.String::: server impl_ stub get version
javax.management.remote.rmi.RMIServerImpl_Stub#newClient(java.lang.Object)->javax.management.remote.rmi.RMIConnection::: server impl_ stub new client

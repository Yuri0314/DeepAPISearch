NoCallStackClassLoader#findClass(String)::: no call stack class loader find class:::for->i->if->for->i->throw->new->ClassNotFoundException
NoCallStackClassLoader#stringToBytes(String):::Construct a byte[] using the characters of the given String:::slen->s->length->bytes->new->byteArr->for->i->return
RMIConnection#getConnectionId():::Returns the connection ID:::
RMIConnection#close():::Closes this connection:::
RMIConnection#createMBean(String, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName).:::
RMIConnection#createMBean(String, ObjectName, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName).:::
RMIConnection#createMBean(String, ObjectName, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, Object[], String[]):::
RMIConnection#createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#createMBean(String, ObjectName, ObjectName, Object[], String[]):::
RMIConnection#unregisterMBean(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#unregisterMBean(ObjectName).:::
RMIConnection#getObjectInstance(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#getObjectInstance(ObjectName).:::
RMIConnection#queryMBeans(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#queryMBeans(ObjectName, QueryExp):::
RMIConnection#queryNames(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#queryNames(ObjectName, QueryExp):::
RMIConnection#isRegistered(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#isRegistered(ObjectName).:::
RMIConnection#getMBeanCount(Subject):::Handles the method javax.management.MBeanServerConnection#getMBeanCount().:::
RMIConnection#getAttribute(ObjectName, String, Subject):::Handles the method javax.management.MBeanServerConnection#getAttribute(ObjectName, String).:::
RMIConnection#getAttributes(ObjectName, String[], Subject):::Handles the method javax.management.MBeanServerConnection#getAttributes(ObjectName, String[]).:::
RMIConnection#setAttribute(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#setAttribute(ObjectName, Attribute):::
RMIConnection#setAttributes(ObjectName, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#setAttributes(ObjectName, AttributeList):::
RMIConnection#invoke(ObjectName, String, MarshalledObject, String[], Subject):::Handles the method javax.management.MBeanServerConnection#invoke(ObjectName, String, Object[], String[]):::
RMIConnection#getDefaultDomain(Subject):::Handles the method javax.management.MBeanServerConnection#getDefaultDomain().:::
RMIConnection#getDomains(Subject):::Handles the method javax.management.MBeanServerConnection#getDomains().:::
RMIConnection#getMBeanInfo(ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#getMBeanInfo(ObjectName).:::
RMIConnection#isInstanceOf(ObjectName, String, Subject):::Handles the method javax.management.MBeanServerConnection#isInstanceOf(ObjectName, String).:::
RMIConnection#addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::
RMIConnection#removeNotificationListener(ObjectName, ObjectName, Subject):::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName).:::
RMIConnection#removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject):::Handles the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::
RMIConnection#addNotificationListeners(ObjectName[], MarshalledObject[], Subject[]):::Handles the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object).  Register for notifications from the given MBeans that match the given filters:::
RMIConnection#removeNotificationListeners(ObjectName, Integer[], Subject):::Handles the javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) removeNotificationListener(ObjectName, NotificationListener) and javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object) removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.  This method removes one or more NotificationListeners from a given MBean in the MBean server.  The NotificationListeners are identified by the IDs which were returned by the #addNotificationListeners(ObjectName[], MarshalledObject[], Subject[]) method.:::
RMIConnection#fetchNotifications(long, int, long):::Retrieves notifications from the connector server:::
RMIConnectionImpl#withPermissions(Permission...)::: connection impl with permissions:::col->new->Permissions->foreach->col->add->pd->new->ProtectionDomain->return->new->ProtectionDomainArr->new->AccessControlContext
RMIConnectionImpl#getServerNotifFwd()::: connection impl get server notif fwd:::if->rmiServer->getNotifBuffer->new->ServerNotifForwarder->return
RMIConnectionImpl#getConnectionId()::: connection impl get connection id:::return
RMIConnectionImpl#close()::: connection impl close:::debug->logger->debugOn->idstr->this->toString->synchronized->if->if->logger->debug->return->if->logger->debug->if->serverCommunicatorAdmin->terminate->if->serverNotifForwarder->terminate->rmiServer->clientClosed->if->logger->debug
RMIConnectionImpl#unreferenced()::: connection impl unreferenced:::logger->debug->try->close->logger->debug->catch->logger->fine->finally
RMIConnectionImpl#createMBean(String, ObjectName, Subject)::: connection impl create bean:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#createMBean(String, ObjectName, ObjectName, Subject)::: connection impl create bean:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#createMBean(String, ObjectName, MarshalledObject, String[], Subject)::: connection impl create bean:::values->debug->logger->debugOn->if->logger->debug->unwrap->nullIsEmpty->try->params2->new->ObjectArr->nullIsEmpty->if->logger->strings->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)::: connection impl create bean:::values->debug->logger->debugOn->if->logger->debug->getClassLoader->unwrap->nullIsEmpty->try->params2->new->ObjectArr->nullIsEmpty->if->logger->strings->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#unregisterMBean(ObjectName, Subject)::: connection impl unregister bean:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#getObjectInstance(ObjectName, Subject)::: connection impl get object instance:::checkNonNull->try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#queryMBeans(ObjectName, MarshalledObject, Subject)::: connection impl query beans:::queryValue->debug->logger->debugOn->if->logger->debug->unwrap->try->params->new->ObjectArr->if->logger->debug->return->doPrivilegedOperation->cast->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#queryNames(ObjectName, MarshalledObject, Subject)::: connection impl query names:::queryValue->debug->logger->debugOn->if->logger->debug->unwrap->try->params->new->ObjectArr->if->logger->debug->return->doPrivilegedOperation->cast->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#isRegistered(ObjectName, Subject)::: connection impl is registered:::try->params->new->ObjectArr->return->doPrivilegedOperation->booleanValue->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#getMBeanCount(Subject)::: connection impl get bean count:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#getAttribute(ObjectName, String, Subject)::: connection impl get attribute:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#getAttributes(ObjectName, String[], Subject)::: connection impl get attributes:::try->params->new->ObjectArr->if->logger->debugOn->logger->strings->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#setAttribute(ObjectName, MarshalledObject, Subject)::: connection impl set attribute:::attr->debug->logger->debugOn->if->logger->debug->getClassLoaderFor->unwrap->try->params->new->ObjectArr->if->logger->attr->getName->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#setAttributes(ObjectName, MarshalledObject, Subject)::: connection impl set attributes:::attrlist->debug->logger->debugOn->if->logger->debug->getClassLoaderFor->unwrap->try->params->new->ObjectArr->if->logger->RMIConnector->getAttributesNames->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#invoke(ObjectName, String, MarshalledObject, String[], Subject)::: connection impl invoke:::checkNonNull->checkNonNull->values->debug->logger->debugOn->if->logger->debug->getClassLoaderFor->unwrap->nullIsEmpty->try->params2->new->ObjectArr->nullIsEmpty->if->logger->strings->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#getDefaultDomain(Subject)::: connection impl get default domain:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#getDomains(Subject)::: connection impl get domains:::try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->throw->newIOException->finally
RMIConnectionImpl#getMBeanInfo(ObjectName, Subject)::: connection impl get bean info:::checkNonNull->try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#isInstanceOf(ObjectName, String, Subject)::: connection impl is instance of:::checkNonNull->try->params->new->ObjectArr->if->logger->debugOn->logger->debug->return->doPrivilegedOperation->booleanValue->catch->e->extractException->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])::: connection impl add notification listeners:::if->throw->new->IllegalArgumentException->sbjs->new->SubjectArr->if->msg->throw->new->IllegalArgumentException->for->i->i->targetCl->filterValues->new->NotificationFilterArr->ids->new->IntegerArr->debug->logger->debugOn->try->for->return->catch->for->j->if->extractException->if->throw->else->if->throw->else->if->throw->else->if->throw->else->throw->newIOException->finally
RMIConnectionImpl#addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)::: connection impl add notification listener:::checkNonNull->checkNonNull->filterValue->handbackValue->debug->logger->debugOn->targetCl->getClassLoaderFor->if->logger->debug->unwrap->if->logger->debug->unwrap->try->params->new->ObjectArr->if->logger->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#removeNotificationListeners(ObjectName, Integer[], Subject)::: connection impl remove notification listeners:::if->throw->new->IllegalArgumentException->for->i->try->params->new->ObjectArr->if->logger->debugOn->logger->objects->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#removeNotificationListener(ObjectName, ObjectName, Subject)::: connection impl remove notification listener:::checkNonNull->checkNonNull->try->params->new->ObjectArr->if->logger->debugOn->logger->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)::: connection impl remove notification listener:::checkNonNull->checkNonNull->filterValue->handbackValue->debug->logger->debugOn->targetCl->getClassLoaderFor->if->logger->debug->unwrap->if->logger->debug->unwrap->try->params->new->ObjectArr->if->logger->debug->doPrivilegedOperation->catch->e->extractException->if->throw->if->throw->if->throw->throw->newIOException->finally
RMIConnectionImpl#fetchNotifications(long, int, long)::: connection impl fetch notifications:::if->logger->debugOn->logger->debug->if->throw->new->IllegalArgumentException->serverTerminated->serverCommunicatorAdmin->reqIncoming->try->if->if->logger->debugOn->logger->debug->return->csn->mn->t->action->new->PrivilegedAction<NotificationResult>->if->return->action->run->else->return->AccessController->doPrivileged->catch->finally->serverCommunicatorAdmin->rspOutgoing
RMIConnectionImpl#toString():::Returns a string representation of this object:::return->super->toString
RMIConnectionImpl.PrivilegedOperation#run()::: privileged operation run:::return->doOperation
RMIConnectionImpl.RMIServerCommunicatorAdmin#doStop()::: server communicator admin do stop:::try->close->catch->logger->warning->logger->debug->finally
RMIConnectionImpl#getClassLoader(ObjectName)::: connection impl get class loader:::try->return->AccessController->new->PrivilegedExceptionAction<ClassLoader>->new->MBeanPermission->withPermissions->doPrivileged->catch->throw->extractException->finally
RMIConnectionImpl#getClassLoaderFor(ObjectName)::: connection impl get class loader for:::try->return->AccessController->new->PrivilegedExceptionAction<Object>->new->MBeanPermission->withPermissions->doPrivileged->catch->throw->extractException->finally
RMIConnectionImpl#doPrivilegedOperation(int, Object[], Subject)::: connection impl do privileged operation:::serverCommunicatorAdmin->reqIncoming->try->reqACC->if->else->if->msg->throw->new->SecurityException->subjectDelegator->delegatedContext->op->new->PrivilegedOperation->if->try->return->op->run->catch->if->throw->throw->new->PrivilegedActionException->finally->else->return->AccessController->doPrivileged->catch->throw->e->toString->new->JMXServerErrorException->finally->serverCommunicatorAdmin->rspOutgoing
RMIConnectionImpl#doOperation(int, Object[])::: connection impl do operation:::switch->return->mbeanServer->createMBean->return->mbeanServer->createMBean->return->mbeanServer->createMBean->return->mbeanServer->createMBean->return->mbeanServer->getAttribute->return->mbeanServer->getAttributes->return->mbeanServer->getDefaultDomain->return->mbeanServer->getDomains->return->mbeanServer->getMBeanCount->return->mbeanServer->getMBeanInfo->return->mbeanServer->getObjectInstance->return->mbeanServer->invoke->return->mbeanServer->isInstanceOf->return->mbeanServer->isRegistered->return->mbeanServer->queryMBeans->return->mbeanServer->queryNames->mbeanServer->setAttribute->return->return->mbeanServer->setAttributes->mbeanServer->unregisterMBean->return->return->getServerNotifFwd->addNotificationListener->mbeanServer->addNotificationListener->return->getServerNotifFwd->removeNotificationListener->return->mbeanServer->removeNotificationListener->return->mbeanServer->removeNotificationListener->return->throw->new->IllegalArgumentException
RMIConnectionImpl.SetCcl#run()::: set ccl run:::currentThread->Thread->currentThread->old->currentThread->getContextClassLoader->currentThread->setContextClassLoader->return
RMIConnectionImpl#unwrap(MarshalledObject, ClassLoader, Class, Subject)::: connection impl unwrap:::if->return->try->old->AccessController->new->SetCcl->doPrivileged->try->reqACC->if->else->if->msg->throw->new->SecurityException->subjectDelegator->delegatedContext->if->return->AccessController->wrappedClass->mo->get->cast->doPrivileged->else->return->wrappedClass->mo->get->cast->catch->finally->AccessController->new->SetCcl->doPrivileged->catch->e->extractException->if->throw->if->throw->e->toString->new->UnmarshalException->logger->warning->logger->debug->logger->warning->logger->debug->throw->ex->toString->new->UnmarshalException->finally->return
RMIConnectionImpl#unwrap(MarshalledObject, ClassLoader, ClassLoader, Class, Subject)::: connection impl unwrap:::if->return->try->orderCL->AccessController->new->PrivilegedExceptionAction<ClassLoader>->doPrivileged->return->unwrap->catch->e->extractException->if->throw->if->throw->e->toString->new->UnmarshalException->logger->warning->logger->debug->finally->return
RMIConnectionImpl#newIOException(String, Throwable):::Construct a new IOException with a nested exception:::x->new->IOException->return->EnvHelp->initCause
RMIConnectionImpl#extractException(Exception):::Iterate until we extract the real exception from a stack of PrivilegedActionExceptions.:::while->getException->return
RMIConnectionImpl#nullIsEmpty(Object[])::: connection impl null is empty:::return
RMIConnectionImpl#nullIsEmpty(String[])::: connection impl null is empty:::return
RMIConnectionImpl#checkNonNull(String, Object)::: connection impl check non null:::if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException
RMIConnectionImpl#objects(Object[])::: connection impl objects:::if->return->else->return->Arrays->asList->toString
RMIConnectionImpl#strings(String[])::: connection impl strings:::return->objects
RMIConnectionImpl.CombinedClassLoader.ClassLoaderWrapper#loadClass(String, boolean)::: class loader wrapper load class:::return->super->loadClass
RMIConnectionImpl.CombinedClassLoader#loadClass(String, boolean)::: combined class loader load class:::ReflectUtil->checkPackageAccess->try->super->loadClass->catch->for->t->t->getCause->finally->cl->defaultCL->loadClass->return
RMIConnectionImpl_Stub#addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub add notification listener:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#addNotificationListeners(javax.management.ObjectName[], java.rmi.MarshalledObject[], javax.security.auth.Subject[])::: connection impl_ stub add notification listeners:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#close()::: connection impl_ stub close:::try->ref->invoke->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)::: connection impl_ stub create bean:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)::: connection impl_ stub create bean:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub create bean:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#createMBean(java.lang.String, javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub create bean:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#fetchNotifications(long, int, long)::: connection impl_ stub fetch notifications:::try->$result->ref->new->java.lang.ObjectArr->new->java.lang.Long->new->java.lang.Integer->new->java.lang.Long->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)::: connection impl_ stub get attribute:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getAttributes(javax.management.ObjectName, java.lang.String[], javax.security.auth.Subject)::: connection impl_ stub get attributes:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getConnectionId()::: connection impl_ stub get connection id:::try->$result->ref->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getDefaultDomain(javax.security.auth.Subject)::: connection impl_ stub get default domain:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getDomains(javax.security.auth.Subject)::: connection impl_ stub get domains:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getMBeanCount(javax.security.auth.Subject)::: connection impl_ stub get bean count:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getMBeanInfo(javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub get bean info:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#getObjectInstance(javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub get object instance:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#invoke(javax.management.ObjectName, java.lang.String, java.rmi.MarshalledObject, java.lang.String[], javax.security.auth.Subject)::: connection impl_ stub invoke:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#isInstanceOf(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)::: connection impl_ stub is instance of:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->booleanValue->catch->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#isRegistered(javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub is registered:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->booleanValue->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#queryMBeans(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub query beans:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#queryNames(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub query names:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub remove notification listener:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#removeNotificationListener(javax.management.ObjectName, javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub remove notification listener:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#removeNotificationListeners(javax.management.ObjectName, java.lang.Integer[], javax.security.auth.Subject)::: connection impl_ stub remove notification listeners:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#setAttribute(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub set attribute:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#setAttributes(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)::: connection impl_ stub set attributes:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnectionImpl_Stub#unregisterMBean(javax.management.ObjectName, javax.security.auth.Subject)::: connection impl_ stub unregister bean:::try->ref->new->java.lang.ObjectArr->invoke->catch->throw->throw->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIConnector.Util#cast(Object)::: util cast:::return
RMIConnector#toString():::Returns a string representation of this object:::b->this->getClass->getName->new->StringBuilder->b->append->if->b->append->rmiServer->toString->append->if->if->b->append->b->append->jmxServiceURL->toString->append->return->b->toString
RMIConnector#getAddress():::The address of this connector.:::return
RMIConnector#connect()::: connector connect:::connect
RMIConnector#connect(Map)::: connector connect:::tracing->logger->traceOn->idstr->this->toString->if->logger->trace->throw->new->IOException->if->logger->trace->return->try->if->logger->trace->usemap->Collections->emptyMap->new->HashMap<String,Object>->if->EnvHelp->checkAttributes->usemap->putAll->if->logger->trace->stub->findRMIServer->stringBoolean->usemap->get->checkStub->EnvHelp->computeBooleanFromString->if->checkStub->if->logger->trace->this->toString->if->logger->trace->credentials->usemap->get->try->getConnection->catch->throw->finally->if->logger->trace->EnvHelp->resolveClientClassLoader->usemap->put->new->RMINotifClient->checkPeriod->EnvHelp->getConnectionCheckPeriod->new->RMIClientCommunicatorAdmin->getConnectionId->connectedNotif->new->JMXConnectionNotification->sendNotification->if->logger->trace->catch->if->logger->trace->throw->if->logger->trace->throw->msg->if->logger->trace->throw->EnvHelp->new->IOException->initCause->finally
RMIConnector#getConnectionId()::: connector get connection id:::if->if->logger->traceOn->logger->this->toString->trace->throw->new->IOException->return->connection->getConnectionId
RMIConnector#getMBeanServerConnection()::: connector get bean server connection:::return->getMBeanServerConnection
RMIConnector#getMBeanServerConnection(Subject)::: connector get bean server connection:::if->if->logger->traceOn->logger->this->toString->trace->throw->new->IOException->else->if->if->logger->traceOn->logger->this->toString->trace->throw->new->IOException->return->getConnectionWithSubject
RMIConnector#addConnectionNotificationListener(NotificationListener, NotificationFilter, Object)::: connector add connection notification listener:::if->throw->new->NullPointerException->connectionBroadcaster->addNotificationListener
RMIConnector#removeConnectionNotificationListener(NotificationListener)::: connector remove connection notification listener:::if->throw->new->NullPointerException->connectionBroadcaster->removeNotificationListener
RMIConnector#removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)::: connector remove connection notification listener:::if->throw->new->NullPointerException->connectionBroadcaster->removeNotificationListener
RMIConnector#sendNotification(Notification)::: connector send notification:::connectionBroadcaster->sendNotification
RMIConnector#close()::: connector close:::close
RMIConnector#close(boolean)::: connector close:::tracing->logger->traceOn->debug->logger->debugOn->idstr->this->toString->if->if->if->if->logger->trace->return->else->if->if->logger->trace->logger->trace->savedConnectionId->if->if->logger->trace->if->communicatorAdmin->terminate->if->try->rmiNotifClient->terminate->if->logger->trace->catch->if->logger->trace->if->logger->debug->finally->if->try->connection->close->if->logger->trace->catch->if->logger->trace->if->logger->debug->finally->rmbscMap->clear->if->closedNotif->new->JMXConnectionNotification->sendNotification->if->if->logger->trace->if->throw->if->throw->x->new->IOException->throw->EnvHelp->initCause
RMIConnector#addListenerWithSubject(ObjectName, MarshalledObject, Subject, boolean)::: connector add listener with subject:::debug->logger->debugOn->if->logger->debug->names->new->ObjectNameArr->filters->Util->new->MarshalledObject<?>Arr->cast->delegationSubjects->new->SubjectArr->listenerIDs->addListenersWithSubjects->if->logger->debug->return
RMIConnector#addListenersWithSubjects(ObjectName[], MarshalledObject[], Subject[], boolean)::: connector add listeners with subjects:::debug->logger->debugOn->if->logger->debug->old->pushDefaultClassLoader->listenerIDs->try->connection->addNotificationListeners->catch->if->communicatorAdmin->gotIOException->connection->addNotificationListeners->else->throw->communicatorAdmin->gotIOException->finally->popDefaultClassLoader->if->logger->debug->return
RMIConnector.RemoteMBeanServerConnection#createMBean(String, ObjectName)::: remote bean server connection create bean:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->createMBean->catch->communicatorAdmin->gotIOException->return->connection->createMBean->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#createMBean(String, ObjectName, ObjectName)::: remote bean server connection create bean:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->createMBean->catch->communicatorAdmin->gotIOException->return->connection->createMBean->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#createMBean(String, ObjectName, Object[], String[])::: remote bean server connection create bean:::if->logger->debugOn->logger->strings->debug->sParams->new->MarshalledObject<Object[]>->old->pushDefaultClassLoader->try->return->connection->createMBean->catch->communicatorAdmin->gotIOException->return->connection->createMBean->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#createMBean(String, ObjectName, ObjectName, Object[], String[])::: remote bean server connection create bean:::if->logger->debugOn->logger->strings->debug->sParams->new->MarshalledObject<Object[]>->old->pushDefaultClassLoader->try->return->connection->createMBean->catch->communicatorAdmin->gotIOException->return->connection->createMBean->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#unregisterMBean(ObjectName)::: remote bean server connection unregister bean:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->connection->unregisterMBean->catch->communicatorAdmin->gotIOException->connection->unregisterMBean->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getObjectInstance(ObjectName)::: remote bean server connection get object instance:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getObjectInstance->catch->communicatorAdmin->gotIOException->return->connection->getObjectInstance->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#queryMBeans(ObjectName, QueryExp)::: remote bean server connection query beans:::if->logger->debugOn->logger->debug->sQuery->new->MarshalledObject<QueryExp>->old->pushDefaultClassLoader->try->return->connection->queryMBeans->catch->communicatorAdmin->gotIOException->return->connection->queryMBeans->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#queryNames(ObjectName, QueryExp)::: remote bean server connection query names:::if->logger->debugOn->logger->debug->sQuery->new->MarshalledObject<QueryExp>->old->pushDefaultClassLoader->try->return->connection->queryNames->catch->communicatorAdmin->gotIOException->return->connection->queryNames->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#isRegistered(ObjectName)::: remote bean server connection is registered:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->isRegistered->catch->communicatorAdmin->gotIOException->return->connection->isRegistered->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getMBeanCount()::: remote bean server connection get bean count:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getMBeanCount->catch->communicatorAdmin->gotIOException->return->connection->getMBeanCount->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getAttribute(ObjectName, String)::: remote bean server connection get attribute:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getAttribute->catch->communicatorAdmin->gotIOException->return->connection->getAttribute->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getAttributes(ObjectName, String[])::: remote bean server connection get attributes:::if->logger->debugOn->logger->strings->debug->old->pushDefaultClassLoader->try->return->connection->getAttributes->catch->communicatorAdmin->gotIOException->return->connection->getAttributes->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#setAttribute(ObjectName, Attribute)::: remote bean server connection set attribute:::if->logger->debugOn->logger->attribute->getName->debug->sAttribute->new->MarshalledObject<Attribute>->old->pushDefaultClassLoader->try->connection->setAttribute->catch->communicatorAdmin->gotIOException->connection->setAttribute->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#setAttributes(ObjectName, AttributeList)::: remote bean server connection set attributes:::if->logger->debugOn->logger->getAttributesNames->debug->sAttributes->new->MarshalledObject<AttributeList>->old->pushDefaultClassLoader->try->return->connection->setAttributes->catch->communicatorAdmin->gotIOException->return->connection->setAttributes->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#invoke(ObjectName, String, Object[], String[])::: remote bean server connection invoke:::if->logger->debugOn->logger->strings->debug->sParams->new->MarshalledObject<Object[]>->old->pushDefaultClassLoader->try->return->connection->invoke->catch->communicatorAdmin->gotIOException->return->connection->invoke->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getDefaultDomain()::: remote bean server connection get default domain:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getDefaultDomain->catch->communicatorAdmin->gotIOException->return->connection->getDefaultDomain->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getDomains()::: remote bean server connection get domains:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getDomains->catch->communicatorAdmin->gotIOException->return->connection->getDomains->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#getMBeanInfo(ObjectName)::: remote bean server connection get bean info:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->getMBeanInfo->catch->communicatorAdmin->gotIOException->return->connection->getMBeanInfo->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#isInstanceOf(ObjectName, String)::: remote bean server connection is instance of:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->return->connection->isInstanceOf->catch->communicatorAdmin->gotIOException->return->connection->isInstanceOf->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)::: remote bean server connection add notification listener:::if->logger->debugOn->logger->debug->sFilter->new->MarshalledObject<NotificationFilter>->sHandback->new->MarshalledObject<Object>->old->pushDefaultClassLoader->try->connection->addNotificationListener->catch->communicatorAdmin->gotIOException->connection->addNotificationListener->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#removeNotificationListener(ObjectName, ObjectName)::: remote bean server connection remove notification listener:::if->logger->debugOn->logger->debug->old->pushDefaultClassLoader->try->connection->removeNotificationListener->catch->communicatorAdmin->gotIOException->connection->removeNotificationListener->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)::: remote bean server connection remove notification listener:::if->logger->debugOn->logger->debug->sFilter->new->MarshalledObject<NotificationFilter>->sHandback->new->MarshalledObject<Object>->old->pushDefaultClassLoader->try->connection->removeNotificationListener->catch->communicatorAdmin->gotIOException->connection->removeNotificationListener->finally->popDefaultClassLoader
RMIConnector.RemoteMBeanServerConnection#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: remote bean server connection add notification listener:::debug->logger->debugOn->if->logger->debug->listenerID->new->MarshalledObject<NotificationFilter>->addListenerWithSubject->rmiNotifClient->addNotificationListener
RMIConnector.RemoteMBeanServerConnection#removeNotificationListener(ObjectName, NotificationListener)::: remote bean server connection remove notification listener:::debug->logger->debugOn->if->logger->debug->ret->rmiNotifClient->getListenerIds->if->logger->objects->debug->old->pushDefaultClassLoader->try->connection->removeNotificationListeners->catch->communicatorAdmin->gotIOException->connection->removeNotificationListeners->finally->popDefaultClassLoader->rmiNotifClient->removeNotificationListener
RMIConnector.RemoteMBeanServerConnection#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: remote bean server connection remove notification listener:::debug->logger->debugOn->if->logger->debug->ret->rmiNotifClient->getListenerId->if->logger->debug->old->pushDefaultClassLoader->try->connection->new->IntegerArr->removeNotificationListeners->catch->communicatorAdmin->gotIOException->connection->new->IntegerArr->removeNotificationListeners->finally->popDefaultClassLoader->rmiNotifClient->removeNotificationListener
RMIConnector.RMINotifClient#fetchNotifs(long, int, long)::: notif client fetch notifs:::retried->while->try->return->connection->fetchNotifications->catch->rethrowDeserializationException->try->communicatorAdmin->gotIOException->catch->toClose->synchronized->if->throw->else->if->if->failedNotif->ioe->toString->new->JMXConnectionNotification->sendNotification->try->close->catch->finally->throw->else->finally->finally
RMIConnector.RMINotifClient#rethrowDeserializationException(IOException)::: notif client rethrow deserialization exception:::if->nse->new->NotSerializableException->nse->initCause->throw
RMIConnector.RMINotifClient#addListenerForMBeanRemovedNotif()::: notif client add listener for bean removed notif:::clientFilter->new->NotificationFilterSupport->clientFilter->enableType->sFilter->new->MarshalledObject<NotificationFilter>->listenerIDs->names->new->ObjectNameArr->filters->Util->new->MarshalledObject<?>Arr->cast->subjects->new->SubjectArr->try->connection->addNotificationListeners->catch->communicatorAdmin->gotIOException->connection->addNotificationListeners->finally->return
RMIConnector.RMINotifClient#removeListenerForMBeanRemovedNotif(Integer)::: notif client remove listener for bean removed notif:::try->connection->new->IntegerArr->removeNotificationListeners->catch->communicatorAdmin->gotIOException->connection->new->IntegerArr->removeNotificationListeners->finally
RMIConnector.RMINotifClient#lostNotifs(String, long)::: notif client lost notifs:::notifType->n->Long->valueOf->new->JMXConnectionNotification->sendNotification
RMIConnector.RMIClientCommunicatorAdmin#gotIOException(IOException)::: client communicator admin got exception:::if->super->gotIOException->return->try->connection->getDefaultDomain->catch->toClose->synchronized->if->if->failedNotif->ioe->toString->new->JMXConnectionNotification->sendNotification->try->close->catch->finally->finally->if->tt->if->throw->else->if->throw->throw
RMIConnector.RMIClientCommunicatorAdmin#reconnectNotificationListeners(ClientListenerInfo[])::: client communicator admin reconnect notification listeners:::len->i->clis->new->ClientListenerInfoArr->subjects->new->SubjectArr->names->new->ObjectNameArr->listeners->new->NotificationListenerArr->filters->new->NotificationFilterArr->mFilters->Util->new->MarshalledObject<?>Arr->cast->handbacks->new->ObjectArr->for->try->ids->addListenersWithSubjects->for->rmiNotifClient->postReconnection->return->catch->finally->j->for->if->tmp->new->ClientListenerInfoArr->System->arraycopy->rmiNotifClient->postReconnection
RMIConnector.RMIClientCommunicatorAdmin#checkConnection()::: client communicator admin check connection:::if->logger->debugOn->logger->debug->connection->getDefaultDomain
RMIConnector.RMIClientCommunicatorAdmin#doStart()::: client communicator admin do start:::stub->try->findRMIServer->catch->throw->new->IOException->finally->credentials->env->get->stub->newClient->old->rmiNotifClient->preReconnection->reconnectNotificationListeners->getConnectionId->reconnectedNotif->new->JMXConnectionNotification->sendNotification
RMIConnector.RMIClientCommunicatorAdmin#doStop()::: client communicator admin do stop:::try->close->catch->logger->warning->logger->debug->finally
RMIConnector#readObject(java.io.ObjectInputStream):::Read RMIConnector fields from an java.io.ObjectInputStream ObjectInputStream:::s->defaultReadObject->if->throw->new->InvalidObjectException->initTransients
RMIConnector#writeObject(java.io.ObjectOutputStream):::Writes the RMIConnector fields to an java.io.ObjectOutputStream ObjectOutputStream:::if->throw->new->InvalidObjectException->s->defaultWriteObject
RMIConnector#initTransients()::: connector init transients:::new->WeakHashMap<Subject,WeakReference<MBeanServerConnection>>->new->NotificationBroadcasterSupport
RMIConnector#checkStub(Remote, Class)::: connector check stub:::if->stub->getClass->if->Proxy->stub->getClass->isProxyClass->throw->stubClass->getName->new->SecurityException->else->handler->Proxy->getInvocationHandler->if->handler->getClass->throw->getName->new->SecurityException->else->ref->getRef->if->ref->getClass->throw->getName->new->SecurityException->liveRef->getLiveRef->csf->liveRef->getClientSocketFactory->if->csf->getClass->throw->getName->new->SecurityException
RMIConnector#findRMIServer(JMXServiceURL, Map)::: connector find server:::path->directoryURL->getURLPath->end->path->indexOf->if->path->length->if->path->startsWith->return->path->substring->findRMIServerJNDI->else->if->path->startsWith->return->path->substring->findRMIServerJRMP->else->msg->throw->new->MalformedURLException
RMIConnector#findRMIServerJNDI(String, Map):::Lookup the RMIServer stub in a directory.:::ctx->EnvHelp->mapToHashtable->new->InitialContext->objref->ctx->lookup->ctx->close->return->narrowJRMPServer
RMIConnector#narrowJRMPServer(Object)::: connector narrow server:::return
RMIConnector#findRMIServerJRMP(String, Map)::: connector find server p:::serialized->try->base64ToByteArray->catch->throw->e->getMessage->new->MalformedURLException->finally->bin->new->ByteArrayInputStream->loader->EnvHelp->resolveClientClassLoader->oin->new->ObjectInputStream->new->ObjectInputStreamWithLoader->stub->try->oin->readObject->catch->throw->new->MalformedURLException->finally->return
RMIConnector.ObjectInputStreamWithLoader#resolveClass(ObjectStreamClass)::: object input stream with loader resolve class:::name->classDesc->getName->ReflectUtil->checkPackageAccess->return->Class->Objects->requireNonNull->forName
RMIConnector#getConnectionWithSubject(Subject)::: connector get connection with subject:::conn->if->if->nullSubjectConnRef->get->new->RemoteMBeanServerConnection->new->WeakReference<MBeanServerConnection>->else->wr->rmbscMap->get->if->wr->get->new->RemoteMBeanServerConnection->rmbscMap->new->WeakReference<MBeanServerConnection>->put->return
RMIConnector#packageOf(String)::: connector package of:::i->cn->lastIndexOf->return->cn->substring
RMIConnector#shadowJrmpStub(RemoteObject)::: connector shadow jrmp stub:::ref->stub->getRef->proxyRef->proxyRefConstructor->new->ObjectArr->newInstance->rmiConnectionImplStubConstructor->rmiConnectionImplStubClass->getConstructor->args->proxyStub->rmiConnectionImplStubConstructor->newInstance->return
RMIConnector#getConnection(RMIServer, Object, boolean)::: connector get connection:::c->server->newClient->if->checkStub->try->if->c->getClass->return->shadowJrmpStub->logger->c->getClass->trace->catch->logger->c->getClass->error->logger->debug->finally->return
RMIConnector#base64ToByteArray(String)::: connector base64 to byte array:::sLen->s->length->numGroups->if->throw->new->IllegalArgumentException->missingBytesInLastGroup->numFullGroups->if->if->s->charAt->if->s->charAt->result->new->byteArr->inCursor->outCursor->for->i->if->ch0->s->charAt->base64toInt->ch1->s->charAt->base64toInt->if->ch2->s->charAt->base64toInt->return
RMIConnector#base64toInt(char):::Translates the specified character, which is assumed to be in the "Base 64 Alphabet" into its equivalent 6-bit positive integer.:::result->if->else->if->throw->new->IllegalArgumentException->return
RMIConnector#pushDefaultClassLoader()::: connector push default class loader:::t->Thread->currentThread->old->t->getContextClassLoader->if->AccessController->new->PrivilegedAction<Void>->doPrivileged->return
RMIConnector#popDefaultClassLoader(ClassLoader)::: connector pop default class loader:::AccessController->new->PrivilegedAction<Void>->doPrivileged
RMIConnector#objects(Object[])::: connector objects:::if->return->else->return->Arrays->asList->toString
RMIConnector#strings(String[])::: connector strings:::return->objects
RMIConnector#getAttributesNames(AttributeList)::: connector get attributes names:::return->attributes->asList->stream->Attribute->getName->map->Collectors->joining->collect
RMIConnectorServer#toJMXConnector(Map):::Returns a client stub for this connector server:::if->isActive->throw->new->IllegalStateException->usemap->Collections->emptyMap->new->HashMap<String,Object>->if->EnvHelp->checkAttributes->usemap->putAll->EnvHelp->filterAttributes->stub->rmiServerImpl->toStub->return->new->RMIConnector
RMIConnectorServer#start():::Activates the connector server, that is starts listening for client connections:::tracing->logger->traceOn->if->if->logger->trace->return->else->if->if->logger->trace->throw->new->IOException->if->getMBeanServer->throw->new->IllegalStateException->if->accessFile->attributes->get->if->mbsf->try->new->MBeanServerFileAccessController->catch->throw->EnvHelp->e->getMessage->new->IllegalArgumentException->initCause->finally->setMBeanServerForwarder->try->if->logger->trace->EnvHelp->getMBeanServer->resolveServerClassLoader->catch->x->new->IllegalArgumentException->throw->EnvHelp->initCause->finally->if->logger->trace->rmiServer->if->else->newServer->rmiServer->getMBeanServer->setMBeanServer->rmiServer->setDefaultClassLoader->rmiServer->setRMIConnectorServer->rmiServer->export->try->if->logger->trace->objref->objectToBind->if->address->getURLPath->startsWith->jndiUrl->address->getURLPath->substring->if->logger->trace->stringBoolean->attributes->get->rebind->EnvHelp->computeBooleanFromString->if->logger->trace->try->if->logger->trace->usemap->EnvHelp->mapToHashtable->bind->catch->throw->newIOException->finally->else->if->logger->trace->encodeStubInAddress->if->logger->trace->catch->try->rmiServer->close->catch->finally->if->throw->else->if->throw->else->throw->newIOException->finally->synchronized->openedServers->add->if->logger->trace->logger->trace
RMIConnectorServer#stop():::Deactivates the connector server, that is, stops listening for client connections:::tracing->logger->traceOn->synchronized->if->if->logger->trace->return->else->if->if->logger->trace->if->logger->trace->synchronized->openedServers->remove->exception->if->try->if->logger->trace->rmiServerImpl->close->catch->if->logger->trace->if->logger->debugOn->logger->debug->finally->if->try->if->logger->trace->usemap->EnvHelp->mapToHashtable->ctx->new->InitialContext->ctx->unbind->ctx->close->catch->if->logger->trace->if->logger->debugOn->logger->debug->if->newIOException->finally->if->throw->if->logger->trace
RMIConnectorServer#isActive()::: connector server is active:::return
RMIConnectorServer#getAddress()::: connector server get address:::if->isActive->return->return
RMIConnectorServer#getAttributes()::: connector server get attributes:::map->EnvHelp->filterAttributes->return->Collections->unmodifiableMap
RMIConnectorServer#setMBeanServerForwarder(MBeanServerForwarder)::: connector server set bean server forwarder:::super->setMBeanServerForwarder->if->rmiServerImpl->getMBeanServer->setMBeanServer
RMIConnectorServer#connectionOpened(String, String, Object)::: connector server connection opened:::super->connectionOpened
RMIConnectorServer#connectionClosed(String, String, Object)::: connector server connection closed:::super->connectionClosed
RMIConnectorServer#connectionFailed(String, String, Object)::: connector server connection failed:::super->connectionFailed
RMIConnectorServer#bind(String, Hashtable, RMIServer, boolean):::Bind a stub to a registry.:::ctx->new->InitialContext->if->ctx->rebind->else->ctx->bind->ctx->close
RMIConnectorServer#newServer():::Creates a new RMIServerImpl.:::port->if->else->address->getPort->return->newJRMPServer
RMIConnectorServer#encodeStubInAddress(RMIServer, Map):::Encode a stub into the JMXServiceURL.:::protocol->host->port->if->else->address->getProtocol->address->getHost->equals->address->getHost->address->getPort->urlPath->encodeStub->new->JMXServiceURL
RMIConnectorServer#encodeStub(RMIServer, Map):::Returns the IOR of the given rmiServer.:::return->encodeJRMPStub
RMIConnectorServer#encodeJRMPStub(RMIServer, Map)::: connector server encode stub:::bout->new->ByteArrayOutputStream->oout->new->ObjectOutputStream->oout->writeObject->oout->close->bytes->bout->toByteArray->return->byteArrayToBase64
RMIConnectorServer#objectToBind(RMIServerImpl, Map):::Object that we will bind to the registry:::return->rmiServer->toStub
RMIConnectorServer#newJRMPServer(Map, int)::: connector server new server:::csf->env->get->ssf->env->get->return->new->RMIJRMPServerImpl
RMIConnectorServer#byteArrayToBase64(byte[])::: connector server byte array to base64:::aLen->numFullGroups->numBytesInPartialGroup->resultLen->result->new->StringBuilder->inCursor->for->i->if->byte0->result->append->if->result->append->result->append->else->byte1->result->append->result->append->result->append->return->result->toString
RMIConnectorServer#newIOException(String, Throwable):::Construct a new IOException with a nested exception:::x->new->IOException->return->EnvHelp->initCause
RMIIIOPServerImpl#export()::: server impl export:::throw->new->UnsupportedOperationException
RMIIIOPServerImpl#getProtocol()::: server impl get protocol:::return
RMIIIOPServerImpl#toStub()::: server impl to stub:::throw->new->UnsupportedOperationException
RMIIIOPServerImpl#makeClient(String, Subject)::: server impl make client:::throw->new->UnsupportedOperationException
RMIIIOPServerImpl#closeClient(RMIConnection)::: server impl close client:::throw->new->UnsupportedOperationException
RMIIIOPServerImpl#closeServer()::: server impl close server:::throw->new->UnsupportedOperationException
RMIIIOPServerImpl#doNewClient(Object)::: server impl do new client:::throw->new->UnsupportedOperationException
RMIJRMPServerImpl#export()::: server impl export:::export
RMIJRMPServerImpl#export(Remote, ObjectInputFilter)::: server impl export:::exporter->env->get->daemon->EnvHelp->isServerDaemon->if->throw->new->IllegalArgumentException->if->exporter->exportObject->else->if->new->LiveRef->new->UnicastServerRef->exportObject->else->new->UnicastServerRef2->exportObject
RMIJRMPServerImpl#unexport(Remote, boolean)::: server impl unexport:::exporter->env->get->if->UnicastRemoteObject->unexportObject->else->exporter->unexportObject
RMIJRMPServerImpl#getProtocol()::: server impl get protocol:::return
RMIJRMPServerImpl#toStub():::Returns a serializable stub for this RMIServer object.:::return->RemoteObject->toStub
RMIJRMPServerImpl#makeClient(String, Subject):::Creates a new client connection as an RMI object exported through JRMP:::if->throw->new->NullPointerException->client->getDefaultClassLoader->new->RMIConnectionImpl->export->return
RMIJRMPServerImpl#closeClient(RMIConnection)::: server impl close client:::unexport
RMIJRMPServerImpl#closeServer():::Called by #close() to close the connector server by unexporting this object:::unexport
RMIJRMPServerImpl#newClientCheckInput(ObjectInputFilter.FilterInfo):::Check that a type in the remote invocation of RMIServerImpl#newClient is one of the allowedTypes.:::status->if->filterInfo->serialClass->type->filterInfo->serialClass->getName->if->allowedTypes->contains->else->return
RMIServer#getVersion():::The version of the RMI Connector Protocol understood by this connector server:::
RMIServer#newClient(Object):::Makes a new connection through this RMI connector:::
RMIServerImpl#setRMIConnectorServer(RMIConnectorServer)::: server impl set connector server:::
RMIServerImpl#export():::Exports this RMI object.:::
RMIServerImpl#toStub():::Returns a remotable stub for this server object.:::
RMIServerImpl#setDefaultClassLoader(ClassLoader):::Sets the default ClassLoader for this connector server:::
RMIServerImpl#getDefaultClassLoader():::Gets the default ClassLoader used by this connector server.:::return
RMIServerImpl#setMBeanServer(MBeanServer):::Sets the MBeanServer to which this connector server is attached:::
RMIServerImpl#getMBeanServer():::The MBeanServer to which this connector server is attached:::return
RMIServerImpl#getVersion()::: server impl get version:::try->return->System->getProperty->catch->return->finally
RMIServerImpl#newClient(Object):::Creates a new client connection:::return->doNewClient
RMIServerImpl#doNewClient(Object):::This method could be overridden by subclasses defined in this package to perform additional operations specific to the underlying transport before creating the new client connection.:::tracing->logger->traceOn->if->logger->trace->if->getMBeanServer->throw->new->IllegalStateException->subject->authenticator->env->get->if->if->env->get->env->get->new->JMXPluggableAuthenticator->if->if->logger->authenticator->getClass->getName->trace->try->authenticator->authenticate->catch->logger->trace->throw->finally->if->if->logger->trace->else->logger->trace->connectionId->getProtocol->makeConnectionId->if->logger->trace->client->makeClient->dropDeadReferences->wr->new->WeakReference<RMIConnection>->synchronized->clientList->add->connServer->connectionOpened->synchronized->if->clientList->contains->throw->new->IOException->if->logger->trace->return
RMIServerImpl#makeClient(String, Subject):::Creates a new client connection:::
RMIServerImpl#closeClient(RMIConnection):::Closes a client connection made by #makeClient makeClient.:::
RMIServerImpl#getProtocol():::Returns the protocol string for this object:::
RMIServerImpl#clientClosed(RMIConnection):::Method called when a client connection created by #makeClient makeClient is closed:::debug->logger->debugOn->if->logger->trace->if->throw->new->NullPointerException->synchronized->dropDeadReferences->for->it->clientList->iterator->it->hasNext->if->logger->trace->closeClient->if->logger->trace->connServer->client->getConnectionId->connectionClosed->if->logger->trace
RMIServerImpl#close():::Closes this connection server:::tracing->logger->traceOn->debug->logger->debugOn->if->logger->trace->ioException->try->if->logger->debug->closeServer->catch->if->logger->trace->if->logger->debug->finally->if->logger->debug->while->synchronized->if->logger->debug->dropDeadReferences->if->logger->clientList->size->debug->if->clientList->size->break->for->it->clientList->iterator->it->hasNext->if->notifBuffer->dispose->if->if->logger->trace->throw->if->logger->trace
RMIServerImpl#closeServer():::Called by #close() to close the connector server:::
RMIServerImpl#makeConnectionId(String, Subject)::: server impl make connection id:::clientHost->try->RemoteServer->getClientHost->if->clientHost->contains->catch->logger->trace->finally->buf->new->StringBuilder->buf->append->append->if->clientHost->length->buf->append->append->buf->append->if->principals->subject->getPrincipals->sep->for->it->principals->iterator->it->hasNext->buf->append->append->if->logger->traceOn->logger->trace->return->buf->toString
RMIServerImpl#dropDeadReferences()::: server impl drop dead references:::synchronized->for->it->clientList->iterator->it->hasNext
RMIServerImpl#getNotifBuffer()::: server impl get notif buffer:::if->ArrayNotificationBuffer->getNotificationBuffer->return
RMIServerImpl_Stub#getVersion()::: server impl_ stub get version:::try->$result->ref->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally
RMIServerImpl_Stub#newClient(java.lang.Object)::: server impl_ stub new client:::try->$result->ref->new->java.lang.ObjectArr->invoke->return->catch->throw->throw->throw->new->java.rmi.UnexpectedException->finally

BasicArrowButton#getDirection():::Returns the direction of the arrow.:::return
BasicArrowButton#setDirection(int):::Sets the direction of the arrow.:::
BasicArrowButton#paint(Graphics)::: basic arrow button paint:::origColor->isPressed->isEnabled->w->h->size->getSize->getSize->g->getColor->getModel->isPressed->isEnabled->g->getBackground->setColor->g->fillRect->if->getBorder->getBorder->paintBorder->else->if->g->setColor->g->drawRect->else->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->if->g->setColor->return->if->g->translate->Math->min->Math->max->paintTriangle->if->g->translate->g->setColor
BasicArrowButton#getPreferredSize():::Returns the preferred size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#getMinimumSize():::Returns the minimum size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#getMaximumSize():::Returns the maximum size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#isFocusTraversable():::Returns whether the arrow button should get the focus:::return
BasicArrowButton#paintTriangle(Graphics, int, int, int, int, boolean):::Paints a triangle.:::if->SwingUtilities2->isScaledGraphics->paintScaledTriangle->else->paintUnscaledTriangle
BasicArrowButton#paintUnscaledTriangle(Graphics, int, int, int, int, boolean)::: basic arrow button paint unscaled triangle:::oldColor->g->getColor->mid->i->j->Math->max->g->translate->if->g->setColor->else->g->setColor->switch->for->if->g->setColor->g->drawLine->break->if->g->translate->g->setColor->for->g->translate->g->setColor->for->break->for->if->g->setColor->g->drawLine->break->if->g->translate->g->setColor->for->g->translate->g->setColor->for->break->g->translate->g->setColor
BasicArrowButton#paintScaledTriangle(Graphics, double, double, double, int, boolean)::: basic arrow button paint scaled triangle:::Math->max->path->new->Path2D.Double->path->moveTo->path->lineTo->path->lineTo->path->closePath->affineTransform->new->AffineTransform->affineTransform->rotate->path->transform->g2d->tx->ty->g2d->translate->oldColor->g->getColor->if->g2d->translate->g2d->setColor->g2d->fill->g2d->translate->g2d->setColor->g2d->fill->g2d->translate->g2d->setColor
BasicBorders#getButtonBorder():::Returns a border instance for a JButton.:::table->UIManager->getLookAndFeelDefaults->buttonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getRadioButtonBorder():::Returns a border instance for a JRadioButton.:::table->UIManager->getLookAndFeelDefaults->radioButtonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.RadioButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getToggleButtonBorder():::Returns a border instance for a JToggleButton.:::table->UIManager->getLookAndFeelDefaults->toggleButtonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ToggleButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getMenuBarBorder():::Returns a border instance for a JMenuBar.:::table->UIManager->getLookAndFeelDefaults->menuBarBorder->table->getColor->table->getColor->new->BasicBorders.MenuBarBorder->return
BasicBorders#getSplitPaneBorder():::Returns a border instance for a JSplitPane.:::table->UIManager->getLookAndFeelDefaults->splitPaneBorder->table->getColor->table->getColor->new->BasicBorders.SplitPaneBorder->return
BasicBorders#getSplitPaneDividerBorder():::Returns a border instance for a JSplitPane divider.:::table->UIManager->getLookAndFeelDefaults->splitPaneBorder->table->getColor->table->getColor->new->BasicBorders.SplitPaneDividerBorder->return
BasicBorders#getTextFieldBorder():::Returns a border instance for a JTextField.:::table->UIManager->getLookAndFeelDefaults->textFieldBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.FieldBorder->return
BasicBorders#getProgressBarBorder():::Returns a border instance for a JProgressBar.:::table->UIManager->getLookAndFeelDefaults->progressBarBorder->new->BorderUIResource.LineBorderUIResource->return
BasicBorders#getInternalFrameBorder():::Returns a border instance for a JInternalFrame.:::table->UIManager->getLookAndFeelDefaults->internalFrameBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BevelBorder->BorderFactory->table->getColor->createLineBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders.RolloverButtonBorder#paintBorder(Component, Graphics, int, int, int, int)::: rollover button border paint border:::b->model->b->getModel->shade->p->b->getParent->if->p->getBackground->equals->if->model->isRollover->model->isPressed->model->isArmed->model->isSelected->oldColor->g->getColor->g->translate->if->model->isPressed->model->isArmed->model->isSelected->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->else->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BasicBorders.RolloverMarginBorder#getBorderInsets(Component, Insets)::: rollover margin border get border insets:::margin->if->getMargin->if->else->return
BasicBorders.ButtonBorder#paintBorder(Component, Graphics, int, int, int, int)::: button border paint border:::isPressed->isDefault->if->b->model->b->getModel->model->isPressed->model->isArmed->if->isDefaultButton->BasicGraphicsUtils->drawBezel
BasicBorders.ButtonBorder#getBorderInsets(Component, Insets)::: button border get border insets:::insets->set->return
BasicBorders.ToggleButtonBorder#paintBorder(Component, Graphics, int, int, int, int)::: toggle button border paint border:::BasicGraphicsUtils->drawBezel
BasicBorders.ToggleButtonBorder#getBorderInsets(Component, Insets)::: toggle button border get border insets:::insets->set->return
BasicBorders.RadioButtonBorder#paintBorder(Component, Graphics, int, int, int, int)::: radio button border paint border:::if->b->model->b->getModel->if->model->isArmed->model->isPressed->model->isSelected->BasicGraphicsUtils->drawLoweredBezel->else->BasicGraphicsUtils->b->isFocusPainted->b->hasFocus->drawBezel->else->BasicGraphicsUtils->drawBezel
BasicBorders.RadioButtonBorder#getBorderInsets(Component, Insets)::: radio button border get border insets:::insets->set->return
BasicBorders.MenuBarBorder#paintBorder(Component, Graphics, int, int, int, int)::: menu bar border paint border:::oldColor->g->getColor->g->translate->g->setColor->SwingUtilities2->drawHLine->g->setColor->SwingUtilities2->drawHLine->g->translate->g->setColor
BasicBorders.MenuBarBorder#getBorderInsets(Component, Insets)::: menu bar border get border insets:::insets->set->return
BasicBorders.MarginBorder#getBorderInsets(Component, Insets)::: margin border get border insets:::margin->if->b->b->getMargin->else->if->t->t->getMargin->else->if->t->t->getMargin->return
BasicBorders.FieldBorder#paintBorder(Component, Graphics, int, int, int, int)::: field border paint border:::BasicGraphicsUtils->drawEtchedRect
BasicBorders.FieldBorder#getBorderInsets(Component, Insets)::: field border get border insets:::margin->if->getMargin->return
BasicBorders.SplitPaneDividerBorder#paintBorder(Component, Graphics, int, int, int, int)::: split pane divider border paint border:::if->return->child->cBounds->splitPane->getBasicSplitPaneUI->getSplitPane->size->c->getSize->splitPane->getLeftComponent->g->c->getBackground->setColor->g->drawRect->if->splitPane->getOrientation->if->g->setColor->g->drawLine->splitPane->getRightComponent->if->g->setColor->g->drawLine->else->if->g->setColor->g->drawLine->splitPane->getRightComponent->if->g->setColor->g->drawLine
BasicBorders.SplitPaneDividerBorder#getBorderInsets(Component)::: split pane divider border get border insets:::insets->new->Insets->if->bspui->getBasicSplitPaneUI->if->splitPane->bspui->getSplitPane->if->if->splitPane->getOrientation->return->return->return
BasicBorders.SplitPaneDividerBorder#isBorderOpaque()::: split pane divider border is border opaque:::return
BasicBorders.SplitPaneBorder#paintBorder(Component, Graphics, int, int, int, int)::: split pane border paint border:::if->return->child->cBounds->splitPane->splitPane->getLeftComponent->g->c->getBackground->setColor->g->drawRect->if->splitPane->getOrientation->if->child->getBounds->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->splitPane->getRightComponent->if->child->getBounds->maxX->maxY->g->setColor->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->if->child->getBounds->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->splitPane->getRightComponent->if->child->getBounds->maxX->maxY->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine
BasicBorders.SplitPaneBorder#getBorderInsets(Component)::: split pane border get border insets:::return->new->Insets
BasicBorders.SplitPaneBorder#isBorderOpaque()::: split pane border is border opaque:::return
BasicButtonListener#loadActionMap(LazyActionMap):::Populates Buttons actions.:::map->new->Actions->put->map->new->Actions->put
BasicButtonListener#propertyChange(PropertyChangeEvent)::: basic button listener property change:::prop->e->getPropertyName->if->e->getSource->updateMnemonicBinding->else->if->e->getSource->checkOpacity->else->if->SwingUtilities2->isScaleChanged->b->e->getSource->BasicHTML->b->getText->updateRenderer
BasicButtonListener#checkOpacity(AbstractButton):::Checks the opacity of the AbstractButton.:::b->b->isContentAreaFilled->setOpaque
BasicButtonListener#installKeyboardActions(JComponent):::Register default key actions: pressing space to "click" a button and registering the keyboard mnemonic (if any).:::b->updateMnemonicBinding->LazyActionMap->installLazyActionMap->km->getInputMap->SwingUtilities->replaceUIInputMap
BasicButtonListener#uninstallKeyboardActions(JComponent):::Unregister default key actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicButtonListener#getInputMap(int, JComponent):::Returns the InputMap for condition condition:::if->ui->BasicLookAndFeel->getUI->getUIOfType->if->return->DefaultLookup->ui->getPropertyPrefix->get->return
BasicButtonListener#updateMnemonicBinding(AbstractButton):::Resets the binding for the mnemonic in the WHEN_IN_FOCUSED_WINDOW UI InputMap.:::m->b->getMnemonic->if->map->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->map->clear->map->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->map->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->map->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->map->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->map->KeyStroke->getKeyStroke->put->else->map->SwingUtilities->getUIInputMap->if->map->clear
BasicButtonListener#stateChanged(ChangeEvent)::: basic button listener state changed:::b->e->getSource->b->repaint
BasicButtonListener#focusGained(FocusEvent)::: basic button listener focus gained:::b->e->getSource->if->isDefaultCapable->root->b->getRootPane->if->ui->BasicLookAndFeel->b->getUI->getUIOfType->if->DefaultLookup->ui->getPropertyPrefix->getBoolean->root->putClientProperty->root->setDefaultButton->root->putClientProperty->b->repaint
BasicButtonListener#focusLost(FocusEvent)::: basic button listener focus lost:::b->e->getSource->root->b->getRootPane->if->initialDefault->root->getClientProperty->if->ui->BasicLookAndFeel->b->getUI->getUIOfType->if->DefaultLookup->ui->getPropertyPrefix->getBoolean->root->setDefaultButton->model->b->getModel->model->setPressed->model->setArmed->b->repaint
BasicButtonListener#mouseMoved(MouseEvent)::: basic button listener mouse moved:::
BasicButtonListener#mouseDragged(MouseEvent)::: basic button listener mouse dragged:::
BasicButtonListener#mouseClicked(MouseEvent)::: basic button listener mouse clicked:::
BasicButtonListener#mousePressed(MouseEvent)::: basic button listener mouse pressed:::if->SwingUtilities->isLeftMouseButton->b->e->getSource->if->b->e->getX->e->getY->contains->lastTime->e->getWhen->timeSinceLastClick->if->b->getMultiClickThreshhold->return->model->b->getModel->if->model->isEnabled->return->if->model->isArmed->model->setArmed->model->setPressed->if->b->hasFocus->b->isRequestFocusEnabled->b->requestFocus
BasicButtonListener#mouseReleased(MouseEvent)::: basic button listener mouse released:::if->SwingUtilities->isLeftMouseButton->if->return->b->e->getSource->model->b->getModel->model->setPressed->model->setArmed
BasicButtonListener#mouseEntered(MouseEvent)::: basic button listener mouse entered:::b->e->getSource->model->b->getModel->if->b->isRolloverEnabled->SwingUtilities->isLeftMouseButton->model->setRollover->if->model->isPressed->model->setArmed
BasicButtonListener#mouseExited(MouseEvent)::: basic button listener mouse exited:::b->e->getSource->model->b->getModel->if->b->isRolloverEnabled->model->setRollover->model->setArmed
BasicButtonListener.Actions#actionPerformed(ActionEvent)::: actions action performed:::b->e->getSource->key->getName->if->model->b->getModel->model->setArmed->model->setPressed->if->b->hasFocus->b->requestFocus->else->if->model->b->getModel->model->setPressed->model->setArmed
BasicButtonListener.Actions#accept(Object)::: actions accept:::return->getModel->isEnabled
BasicButtonUI#createUI(JComponent):::Returns an instance of BasicButtonUI.:::appContext->AppContext->getAppContext->buttonUI->appContext->get->if->new->BasicButtonUI->appContext->put->return
BasicButtonUI#getPropertyPrefix():::Returns the property prefix.:::return
BasicButtonUI#installUI(JComponent)::: basic button i install i:::installDefaults->installListeners->installKeyboardActions->BasicHTML->getText->updateRenderer
BasicButtonUI#installDefaults(AbstractButton):::Installs default properties.:::pp->getPropertyPrefix->UIManager->getInt->if->b->isContentAreaFilled->LookAndFeel->installProperty->else->LookAndFeel->installProperty->if->b->getMargin->b->getMargin->b->UIManager->getInsets->setMargin->LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->rollover->UIManager->get->if->LookAndFeel->installProperty->LookAndFeel->Integer->valueOf->installProperty
BasicButtonUI#installListeners(AbstractButton):::Registers listeners.:::listener->createButtonListener->if->b->addMouseListener->b->addMouseMotionListener->b->addFocusListener->b->addPropertyChangeListener->b->addChangeListener
BasicButtonUI#installKeyboardActions(AbstractButton):::Registers keyboard actions.:::listener->getButtonListener->if->listener->installKeyboardActions
BasicButtonUI#uninstallUI(JComponent)::: basic button i uninstall i:::uninstallKeyboardActions->uninstallListeners->uninstallDefaults->BasicHTML->updateRenderer
BasicButtonUI#uninstallKeyboardActions(AbstractButton):::Unregisters keyboard actions.:::listener->getButtonListener->if->listener->uninstallKeyboardActions
BasicButtonUI#uninstallListeners(AbstractButton):::Unregisters listeners.:::listener->getButtonListener->if->b->removeMouseListener->b->removeMouseMotionListener->b->removeFocusListener->b->removeChangeListener->b->removePropertyChangeListener
BasicButtonUI#uninstallDefaults(AbstractButton):::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicButtonUI#createButtonListener(AbstractButton):::Returns a new instance of BasicButtonListener.:::return->new->BasicButtonListener
BasicButtonUI#getDefaultTextIconGap(AbstractButton):::Returns the default gap between a text and an icon.:::return
BasicButtonUI#paint(Graphics, JComponent)::: basic button i paint:::b->model->b->getModel->text->SwingUtilities2->getFontMetrics->b->getWidth->b->getHeight->layout->clearTextShiftOffset->if->model->isArmed->model->isPressed->paintButtonPressed->if->b->getIcon->paintIcon->if->text->equals->v->c->getClientProperty->if->v->paint->else->paintText->if->b->isFocusPainted->b->hasFocus->paintFocus
BasicButtonUI#paintIcon(Graphics, JComponent, Rectangle):::Paints an icon of the current button.:::b->model->b->getModel->icon->b->getIcon->tmpIcon->if->return->selectedIcon->if->model->isSelected->b->getSelectedIcon->if->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->if->if->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->clearTextShiftOffset->else->if->b->isRolloverEnabled->model->isRollover->if->model->isSelected->b->getRolloverSelectedIcon->if->if->b->getRolloverIcon->if->if->model->isPressed->model->isArmed->icon->getTextShiftOffset->getTextShiftOffset->paintIcon->else->icon->paintIcon
BasicButtonUI#paintText(Graphics, JComponent, Rectangle, String):::Method which renders the text of the current button:::b->model->b->getModel->fm->SwingUtilities2->getFontMetrics->mnemonicIndex->b->getDisplayedMnemonicIndex->if->model->isEnabled->g->b->getForeground->setColor->SwingUtilities2->getTextShiftOffset->fm->getAscent->getTextShiftOffset->drawStringUnderlineCharAt->else->g->b->getBackground->brighter->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->g->b->getBackground->darker->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt
BasicButtonUI#paintText(Graphics, AbstractButton, Rectangle, String):::Method which renders the text of the current button.:::paintText
BasicButtonUI#paintFocus(Graphics, AbstractButton, Rectangle, Rectangle, Rectangle):::Paints a focused button.:::
BasicButtonUI#paintButtonPressed(Graphics, AbstractButton):::Paints a pressed button.:::
BasicButtonUI#clearTextShiftOffset():::Clears the offset of the text.:::
BasicButtonUI#setTextShiftOffset():::Sets the offset of the text.:::
BasicButtonUI#getTextShiftOffset():::Returns the offset of the text.:::return
BasicButtonUI#getMinimumSize(JComponent)::: basic button i get minimum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getPreferredSpan->v->getMinimumSpan->return
BasicButtonUI#getPreferredSize(JComponent)::: basic button i get preferred size:::b->return->BasicGraphicsUtils->b->getIconTextGap->getPreferredButtonSize
BasicButtonUI#getMaximumSize(JComponent)::: basic button i get maximum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getMaximumSpan->v->getPreferredSpan->return
BasicButtonUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->b->text->b->getText->if->equals->return->fm->b->b->getFont->getFontMetrics->layout->return->BasicHTML->fm->getAscent->getBaseline
BasicButtonUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->c->getClientProperty->return->switch->getVerticalAlignment->return->return->return->return
BasicButtonUI#layout(AbstractButton, FontMetrics, int, int)::: basic button i layout:::i->b->getInsets->return->SwingUtilities->b->getText->b->getIcon->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getText->b->getIconTextGap->layoutCompoundLabel
BasicButtonUI#getButtonListener(AbstractButton):::Returns the ButtonListener for the passed in Button, or null if one could not be found.:::listeners->b->getMouseMotionListeners->if->foreach->if->return->return
BasicCheckBoxMenuItemUI#createUI(JComponent):::Constructs a new instance of BasicCheckBoxMenuItemUI.:::return->new->BasicCheckBoxMenuItemUI
BasicCheckBoxMenuItemUI#getPropertyPrefix()::: basic check box menu item i get property prefix:::return
BasicCheckBoxMenuItemUI#processMouseEvent(JMenuItem, MouseEvent, MenuElement[], MenuSelectionManager):::Invoked when mouse event occurs.:::p->e->getPoint->if->item->getWidth->item->getHeight->if->e->getID->manager->clearSelectedPath->item->doClick->else->manager->setSelectedPath->else->if->item->getModel->isArmed->newPath->new->MenuElementArr->i->c->for->manager->setSelectedPath
BasicCheckBoxUI#createUI(JComponent):::Returns an instance of BasicCheckBoxUI.:::appContext->AppContext->getAppContext->checkboxUI->appContext->get->if->new->BasicCheckBoxUI->appContext->put->return
BasicCheckBoxUI#getPropertyPrefix()::: basic check box i get property prefix:::return
BasicColorChooserUI#createUI(JComponent):::Returns a new instance of BasicColorChooserUI.:::return->new->BasicColorChooserUI
BasicColorChooserUI#createDefaultChoosers():::Returns an array of default color choosers.:::panels->ColorChooserComponentFactory->getDefaultChooserPanels->return
BasicColorChooserUI#uninstallDefaultChoosers():::Uninstalls default color choosers.:::choosers->chooser->getChooserPanels->for->i
BasicColorChooserUI#installUI(JComponent)::: basic color chooser i install i:::super->installUI->installDefaults->installListeners->new->JTabbedPane->tabbedPane->setName->tabbedPane->setInheritsPopupMenu->tabbedPane->getAccessibleContext->tabbedPane->getName->setAccessibleDescription->new->CenterLayout->new->JPanel->singlePanel->setName->singlePanel->setInheritsPopupMenu->chooser->new->BorderLayout->setLayout->createDefaultChoosers->chooser->setChooserPanels->new->CenterLayout->new->JPanel->previewPanelHolder->setName->if->DefaultLookup->getBoolean->previewString->UIManager->chooser->getLocale->getString->previewPanelHolder->new->TitledBorder->setBorder->previewPanelHolder->setInheritsPopupMenu->installPreviewPanel->chooser->c->getComponentOrientation->applyComponentOrientation
BasicColorChooserUI#uninstallUI(JComponent)::: basic color chooser i uninstall i:::chooser->remove->chooser->remove->chooser->remove->uninstallDefaultChoosers->uninstallListeners->uninstallPreviewPanel->uninstallDefaults
BasicColorChooserUI#installPreviewPanel():::Installs preview panel.:::previewPanel->getPreviewPanel->if->ColorChooserComponentFactory->getPreviewPanel->else->if->previewPanel->getClass->equals->previewPanel->getComponentCount->if->chooser->add->previewPanel->chooser->getColor->setForeground->previewPanelHolder->add->previewPanel->getHandler->addMouseListener->previewPanel->setInheritsPopupMenu
BasicColorChooserUI#uninstallPreviewPanel():::Removes installed preview panel from the UI delegate.:::if->getHandler->removeMouseListener->remove->remove
BasicColorChooserUI#installDefaults():::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->th->chooser->getTransferHandler->if->chooser->setTransferHandler
BasicColorChooserUI#uninstallDefaults():::Uninstalls default properties.:::if->chooser->getTransferHandler->chooser->setTransferHandler
BasicColorChooserUI#installListeners():::Registers listeners.:::createPropertyChangeListener->chooser->addPropertyChangeListener->getHandler->chooser->getSelectionModel->addChangeListener
BasicColorChooserUI#getHandler()::: basic color chooser i get handler:::if->new->Handler->return
BasicColorChooserUI#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicColorChooserUI#uninstallListeners():::Unregisters listeners.:::chooser->removePropertyChangeListener->chooser->getSelectionModel->removeChangeListener
BasicColorChooserUI#selectionChanged(ColorSelectionModel)::: basic color chooser i selection changed:::previewPanel->getPreviewPanel->if->previewPanel->model->getSelectedColor->setForeground->previewPanel->repaint->panels->getChooserPanels->if->foreach->if->panel->updateChooser
BasicColorChooserUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::evt->getSource->selectionChanged
BasicColorChooserUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->chooser->getDragEnabled->th->chooser->getTransferHandler->th->exportAsDrag
BasicColorChooserUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::
BasicColorChooserUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicColorChooserUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicColorChooserUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicColorChooserUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::prop->evt->getPropertyName->if->oldPanels->evt->getOldValue->newPanels->evt->getNewValue->for->i->numNewPanels->if->chooser->remove->return->else->if->chooser->remove->centerWrapper->new->CenterLayout->new->JPanel->centerWrapper->setInheritsPopupMenu->centerWrapper->add->singlePanel->add->chooser->add->else->if->chooser->remove->chooser->add->for->i->chooser->chooser->getComponentOrientation->applyComponentOrientation->for->i->else->if->uninstallPreviewPanel->installPreviewPanel->else->if->oldModel->evt->getOldValue->oldModel->removeChangeListener->newModel->evt->getNewValue->newModel->addChangeListener->selectionChanged->else->if->o->evt->getNewValue->cc->evt->getSource->if->evt->getOldValue->cc->applyComponentOrientation->cc->updateUI
BasicColorChooserUI.PropertyHandler#propertyChange(PropertyChangeEvent)::: property handler property change:::getHandler->propertyChange
BasicComboBoxEditor#getEditorComponent()::: basic combo box editor get editor component:::return
BasicComboBoxEditor#createEditorComponent():::Creates the internal editor component:::editor->new->BorderlessTextField->editor->setBorder->return
BasicComboBoxEditor#setItem(Object):::Sets the item that should be edited.:::text->if->anObject->toString->if->else->if->text->editor->getText->equals->editor->setText
BasicComboBoxEditor#getItem()::: basic combo box editor get item:::newValue->editor->getText->if->if->newValue->oldValue->toString->equals->return->else->cls->oldValue->getClass->try->method->MethodUtil->new->Class<?>Arr->getMethod->MethodUtil->new->ObjectArr->editor->getText->invoke->catch->finally->return
BasicComboBoxEditor#selectAll()::: basic combo box editor select all:::editor->selectAll->editor->requestFocus
BasicComboBoxEditor#focusGained(FocusEvent)::: basic combo box editor focus gained:::
BasicComboBoxEditor#focusLost(FocusEvent)::: basic combo box editor focus lost:::
BasicComboBoxEditor#addActionListener(ActionListener)::: basic combo box editor add action listener:::editor->addActionListener
BasicComboBoxEditor#removeActionListener(ActionListener)::: basic combo box editor remove action listener:::editor->removeActionListener
BasicComboBoxEditor.BorderlessTextField#setText(String)::: borderless text field set text:::if->getText->equals->return->super->setText
BasicComboBoxEditor.BorderlessTextField#setBorder(Border)::: borderless text field set border:::if->super->setBorder
BasicComboBoxRenderer#getNoFocusBorder()::: basic combo box renderer get no focus border:::if->System->getSecurityManager->return->else->return
BasicComboBoxRenderer#getPreferredSize()::: basic combo box renderer get preferred size:::size->if->this->getText->this->getText->equals->setText->super->getPreferredSize->setText->else->super->getPreferredSize->return
BasicComboBoxRenderer#getListCellRendererComponent(JList, Object, int, boolean, boolean)::: basic combo box renderer get list cell renderer component:::if->list->getSelectionBackground->setBackground->list->getSelectionForeground->setForeground->else->list->getBackground->setBackground->list->getForeground->setForeground->list->getFont->setFont->if->setIcon->else->value->toString->setText->return
BasicComboBoxUI#getDefaultListCellRenderer()::: basic combo box i get default list cell renderer:::renderer->AppContext->getAppContext->get->if->new->DefaultListCellRenderer->AppContext->getAppContext->new->DefaultListCellRenderer->put->return
BasicComboBoxUI#loadActionMap(LazyActionMap):::Populates ComboBox's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicComboBoxUI#createUI(JComponent):::Constructs a new instance of BasicComboBoxUI.:::return->new->BasicComboBoxUI
BasicComboBoxUI#installUI(JComponent)::: basic combo box i install i:::tmp->installDefaults->createPopup->popup->getList->inTable->c->getClientProperty->if->inTable->equals->if->comboBox->getRenderer->comboBox->getRenderer->comboBox->createRenderer->setRenderer->if->comboBox->getEditor->comboBox->getEditor->comboBox->createEditor->setEditor->installListeners->installComponents->comboBox->createLayoutManager->setLayout->comboBox->setRequestFocusEnabled->installKeyboardActions->comboBox->putClientProperty->if->new->DefaultKeySelectionManager->comboBox->setKeySelectionManager
BasicComboBoxUI#uninstallUI(JComponent)::: basic combo box i uninstall i:::setPopupVisible->popup->uninstallingUI->uninstallKeyboardActions->comboBox->setLayout->uninstallComponents->uninstallListeners->uninstallDefaults->if->comboBox->getRenderer->comboBox->getRenderer->comboBox->setRenderer->comboBoxEditor->comboBox->getEditor->if->if->comboBoxEditor->getEditorComponent->hasFocus->comboBox->requestFocusInWindow->comboBox->setEditor->if->comboBox->setKeySelectionManager
BasicComboBoxUI#installDefaults():::Installs the default colors, default font, default renderer, and default editor into the JComboBox.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->LookAndFeel->installProperty->l->UIManager->get->l->longValue->b->UIManager->get->UIManager->getInsets
BasicComboBoxUI#installListeners():::Creates and installs listeners for the combo box and its model:::if->createItemListener->comboBox->addItemListener->if->createPropertyChangeListener->comboBox->addPropertyChangeListener->if->createKeyListener->comboBox->addKeyListener->if->createFocusListener->comboBox->addFocusListener->if->popup->getMouseListener->comboBox->addMouseListener->if->popup->getMouseMotionListener->comboBox->addMouseMotionListener->if->popup->getKeyListener->comboBox->addKeyListener->if->comboBox->getModel->if->createListDataListener->comboBox->getModel->addListDataListener
BasicComboBoxUI#uninstallDefaults():::Uninstalls the default colors, default font, default renderer, and default editor from the combo box.:::LookAndFeel->installColorsAndFont->LookAndFeel->uninstallBorder
BasicComboBoxUI#uninstallListeners():::Removes the installed listeners from the combo box and its model:::if->comboBox->removeKeyListener->if->comboBox->removeItemListener->if->comboBox->removePropertyChangeListener->if->comboBox->removeFocusListener->if->comboBox->removeMouseListener->if->comboBox->removeMouseMotionListener->if->comboBox->removeKeyListener->if->comboBox->getModel->if->comboBox->getModel->removeListDataListener
BasicComboBoxUI#createPopup():::Creates the popup portion of the combo box.:::return->new->BasicComboPopup
BasicComboBoxUI#createKeyListener():::Creates a KeyListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createFocusListener():::Creates a FocusListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createListDataListener():::Creates a list data listener which will be added to the ComboBoxModel:::return->getHandler
BasicComboBoxUI#createItemListener():::Creates an ItemListener which will be added to the combo box:::return
BasicComboBoxUI#createPropertyChangeListener():::Creates a PropertyChangeListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createLayoutManager():::Creates a layout manager for managing the components which make up the combo box.:::return->getHandler
BasicComboBoxUI#createRenderer():::Creates the default renderer that will be used in a non-editiable combo box:::return->new->BasicComboBoxRenderer.UIResource
BasicComboBoxUI#createEditor():::Creates the default editor that will be used in editable combo boxes:::return->new->BasicComboBoxEditor.UIResource
BasicComboBoxUI#getHandler():::Returns the shared listener.:::if->new->Handler->return
BasicComboBoxUI.KeyHandler#keyPressed(KeyEvent)::: key handler key pressed:::getHandler->keyPressed
BasicComboBoxUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicComboBoxUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicComboBoxUI.ListDataHandler#contentsChanged(ListDataEvent)::: list data handler contents changed:::getHandler->contentsChanged
BasicComboBoxUI.ListDataHandler#intervalAdded(ListDataEvent)::: list data handler interval added:::getHandler->intervalAdded
BasicComboBoxUI.ListDataHandler#intervalRemoved(ListDataEvent)::: list data handler interval removed:::getHandler->intervalRemoved
BasicComboBoxUI.ItemHandler#itemStateChanged(ItemEvent)::: item handler item state changed:::
BasicComboBoxUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicComboBoxUI#updateToolTipTextForChildren()::: basic combo box i update tool tip text for children:::children->comboBox->getComponents->for->i
BasicComboBoxUI.ComboBoxLayoutManager#addLayoutComponent(String, Component)::: combo box layout manager add layout component:::
BasicComboBoxUI.ComboBoxLayoutManager#removeLayoutComponent(Component)::: combo box layout manager remove layout component:::
BasicComboBoxUI.ComboBoxLayoutManager#preferredLayoutSize(Container)::: combo box layout manager preferred layout size:::return->getHandler->preferredLayoutSize
BasicComboBoxUI.ComboBoxLayoutManager#minimumLayoutSize(Container)::: combo box layout manager minimum layout size:::return->getHandler->minimumLayoutSize
BasicComboBoxUI.ComboBoxLayoutManager#layoutContainer(Container)::: combo box layout manager layout container:::getHandler->layoutContainer
BasicComboBoxUI#installComponents():::Creates and initializes the components which make up the aggregate combo box:::createArrowButton->if->comboBox->add->configureArrowButton->if->comboBox->isEditable->addEditor->comboBox->add
BasicComboBoxUI#uninstallComponents():::The aggregate components which comprise the combo box are unregistered and uninitialized:::if->unconfigureArrowButton->if->unconfigureEditor->comboBox->removeAll
BasicComboBoxUI#addEditor():::This public method is implementation specific and should be private:::removeEditor->comboBox->getEditor->getEditorComponent->if->configureEditor->comboBox->add->if->comboBox->isFocusOwner->editor->requestFocusInWindow
BasicComboBoxUI#removeEditor():::This public method is implementation specific and should be private:::if->unconfigureEditor->comboBox->remove
BasicComboBoxUI#configureEditor():::This protected method is implementation specific and should be private:::editor->comboBox->isEnabled->setEnabled->editor->comboBox->isFocusable->setFocusable->editor->comboBox->getFont->setFont->if->editor->addFocusListener->editor->getHandler->addFocusListener->comboBox->getEditor->getHandler->addActionListener->if->putClientProperty->setInheritsPopupMenu->comboBox->comboBox->getEditor->comboBox->getSelectedItem->configureEditor->editor->addPropertyChangeListener
BasicComboBoxUI#unconfigureEditor():::This protected method is implementation specific and should be private:::if->editor->removeFocusListener->editor->removePropertyChangeListener->editor->getHandler->removeFocusListener->comboBox->getEditor->getHandler->removeActionListener
BasicComboBoxUI#configureArrowButton():::This public method is implementation specific and should be private:::if->arrowButton->comboBox->isEnabled->setEnabled->arrowButton->comboBox->isFocusable->setFocusable->arrowButton->setRequestFocusEnabled->arrowButton->popup->getMouseListener->addMouseListener->arrowButton->popup->getMouseMotionListener->addMouseMotionListener->arrowButton->resetKeyboardActions->arrowButton->putClientProperty->arrowButton->setInheritsPopupMenu
BasicComboBoxUI#unconfigureArrowButton():::This public method is implementation specific and should be private:::if->arrowButton->popup->getMouseListener->removeMouseListener->arrowButton->popup->getMouseMotionListener->removeMouseMotionListener
BasicComboBoxUI#createArrowButton():::Creates a button which will be used as the control to show or hide the popup portion of the combo box.:::button->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton->button->setName->return
BasicComboBoxUI#isPopupVisible(JComboBox):::Tells if the popup is visible or not.:::return->popup->isVisible
BasicComboBoxUI#setPopupVisible(JComboBox, boolean):::Hides the popup.:::if->popup->show->else->popup->hide
BasicComboBoxUI#isFocusTraversable(JComboBox):::Determines if the JComboBox is focus traversable:::return->comboBox->isEditable
BasicComboBoxUI#paint(Graphics, JComponent)::: basic combo box i paint:::comboBox->hasFocus->if->comboBox->isEditable->r->rectangleForCurrentValue->paintCurrentValueBackground->paintCurrentValue
BasicComboBoxUI#getPreferredSize(JComponent)::: basic combo box i get preferred size:::return->getMinimumSize
BasicComboBoxUI#getMinimumSize(JComponent):::The minimum size is the size of the display area plus insets plus the button.:::if->return->new->Dimension->size->getDisplaySize->insets->getInsets->buttonHeight->buttonWidth->arrowButton->getPreferredSize->cachedMinimumSize->setSize->return->new->Dimension
BasicComboBoxUI#getMaximumSize(JComponent)::: basic combo box i get maximum size:::return->new->Dimension
BasicComboBoxUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->getDisplaySize->if->insets->c->getInsets->Math->max->if->comboBox->isEditable->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->value->prototypeValue->comboBox->getPrototypeDisplayValue->if->else->if->comboBox->getModel->getSize->comboBox->getModel->getElementAt->component->renderer->getListCellRendererComponent->if->label->text->label->getText->if->text->isEmpty->label->setText->if->component->comboBox->getFont->setFont->component->getBaseline->else->editor->getBaseline->if->return
BasicComboBoxUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->getDisplaySize->if->comboBox->isEditable->return->editor->getBaselineResizeBehavior->else->if->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->value->prototypeValue->comboBox->getPrototypeDisplayValue->if->else->if->comboBox->getModel->getSize->comboBox->getModel->getElementAt->if->component->renderer->getListCellRendererComponent->return->component->getBaselineResizeBehavior->return
BasicComboBoxUI#getAccessibleChildrenCount(JComponent)::: basic combo box i get accessible children count:::if->comboBox->isEditable->return->else->return
BasicComboBoxUI#getAccessibleChild(JComponent, int)::: basic combo box i get accessible child:::switch->if->ac->getAccessibleContext->ac->setAccessibleParent->return->break->if->comboBox->isEditable->ac->getAccessibleContext->ac->setAccessibleParent->return->break->return
BasicComboBoxUI#isNavigationKey(int):::Returns whether or not the supplied keyCode maps to a key that is used for navigation:::return
BasicComboBoxUI#isNavigationKey(int, int)::: basic combo box i is navigation key:::inputMap->comboBox->getInputMap->key->KeyStroke->getKeyStroke->if->inputMap->get->return->return
BasicComboBoxUI#selectNextPossibleValue():::Selects the next item in the list:::si->if->comboBox->isPopupVisible->listBox->getSelectedIndex->else->comboBox->getSelectedIndex->if->comboBox->getModel->getSize->listBox->setSelectedIndex->listBox->ensureIndexIsVisible->if->if->UIManager->getBoolean->comboBox->isPopupVisible->comboBox->setSelectedIndex->comboBox->repaint
BasicComboBoxUI#selectPreviousPossibleValue():::Selects the previous item in the list:::si->if->comboBox->isPopupVisible->listBox->getSelectedIndex->else->comboBox->getSelectedIndex->if->listBox->setSelectedIndex->listBox->ensureIndexIsVisible->if->if->UIManager->getBoolean->comboBox->isPopupVisible->comboBox->setSelectedIndex->comboBox->repaint
BasicComboBoxUI#toggleOpenClose():::Hides the popup if it is showing and shows the popup if it is hidden.:::isPopupVisible->setPopupVisible
BasicComboBoxUI#rectangleForCurrentValue():::Returns the area that is reserved for drawing the currently selected item.:::width->comboBox->getWidth->height->comboBox->getHeight->insets->getInsets->buttonSize->if->arrowButton->getWidth->if->BasicGraphicsUtils->isLeftToRight->return->new->Rectangle->else->return->new->Rectangle
BasicComboBoxUI#getInsets():::Gets the insets from the JComboBox.:::return->comboBox->getInsets
BasicComboBoxUI#paintCurrentValue(Graphics, Rectangle, boolean):::Paints the currently selected item.:::renderer->comboBox->getRenderer->c->if->isPopupVisible->renderer->comboBox->getSelectedItem->getListCellRendererComponent->else->renderer->comboBox->getSelectedItem->getListCellRendererComponent->c->UIManager->getColor->setBackground->c->comboBox->getFont->setFont->if->isPopupVisible->c->listBox->getSelectionForeground->setForeground->c->listBox->getSelectionBackground->setBackground->else->if->comboBox->isEnabled->c->comboBox->getForeground->setForeground->c->comboBox->getBackground->setBackground->else->c->DefaultLookup->getColor->setForeground->c->DefaultLookup->getColor->setBackground->shouldValidate->if->x->y->w->h->if->currentValuePane->paintComponent
BasicComboBoxUI#paintCurrentValueBackground(Graphics, Rectangle, boolean):::Paints the background of the currently selected item.:::t->g->getColor->if->comboBox->isEnabled->g->DefaultLookup->getColor->setColor->else->g->DefaultLookup->getColor->setColor->g->fillRect->g->setColor
BasicComboBoxUI#repaintCurrentValue():::Repaint the currently selected item.:::r->rectangleForCurrentValue->comboBox->repaint
BasicComboBoxUI#getDefaultSize():::Return the default size of an empty display area of the combo box using the current renderer and font.:::d->getDefaultListCellRenderer->getListCellRendererComponent->getSizeForComponent->return->new->Dimension
BasicComboBoxUI#getDisplaySize():::Returns the calculated size of the display area:::if->return->new->Dimension->result->new->Dimension->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->prototypeValue->comboBox->getPrototypeDisplayValue->if->renderer->getListCellRendererComponent->getSizeForComponent->else->model->comboBox->getModel->modelSize->model->getSize->baseline->d->cpn->if->for->i->else->getDefaultSize->if->comboBox->isEditable->if->comboBox->isEditable->d->editor->getPreferredSize->Math->max->Math->max->if->cachedDisplaySize->setSize->return
BasicComboBoxUI#getSizeForComponent(Component):::Returns the size a component would have if used as a cell renderer.:::currentValuePane->add->comp->comboBox->getFont->setFont->d->comp->getPreferredSize->currentValuePane->remove->return
BasicComboBoxUI#installKeyboardActions():::Adds keyboard actions to the JComboBox:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicComboBoxUI#getInputMap(int)::: basic combo box i get input map:::if->return->DefaultLookup->get->return
BasicComboBoxUI#isTableCellEditor()::: basic combo box i is table cell editor:::return
BasicComboBoxUI#uninstallKeyboardActions():::Removes the focus InputMap and ActionMap.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicComboBoxUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::key->getName->comboBox->e->getSource->ui->BasicLookAndFeel->comboBox->getUI->getUIOfType->if->comboBox->firePopupMenuCanceled->comboBox->setPopupVisible->else->if->index->getNextIndex->if->comboBox->getItemCount->if->UIManager->getBoolean->comboBox->isPopupVisible->setSelectedIndex->ensureIndexIsVisible->comboBox->repaint->else->comboBox->setSelectedIndex->else->if->if->comboBox->isShowing->if->comboBox->isPopupVisible->if->ui->selectNextPossibleValue->else->comboBox->setPopupVisible->else->if->if->comboBox->isShowing->if->comboBox->isEditable->ui->isTableCellEditor->comboBox->isPopupVisible->comboBox->setPopupVisible->else->if->ui->selectNextPossibleValue->else->if->if->comboBox->isEditable->if->ui->isTableCellEditor->comboBox->getList->getSelectedIndex->setSelectedIndex->else->comboBox->comboBox->isPopupVisible->setPopupVisible->else->if->if->if->ui->isPopupVisible->ui->selectPreviousPossibleValue->else->if->DefaultLookup->getBoolean->ui->setPopupVisible->else->if->if->comboBox->isShowing->if->comboBox->isEditable->comboBox->isPopupVisible->comboBox->setPopupVisible->else->ui->selectPreviousPossibleValue->else->if->if->comboBox->isPopupVisible->if->UIManager->getBoolean->listItem->getList->getSelectedValue->if->comboBox->getEditor->setItem->comboBox->setSelectedItem->comboBox->setPopupVisible->else->isEnterSelectablePopup->UIManager->getBoolean->if->comboBox->isEditable->listItem->getList->getSelectedValue->if->comboBox->getEditor->setItem->comboBox->setSelectedItem->comboBox->setPopupVisible->else->if->comboBox->isEditable->comboBox->comboBox->getSelectedItem->setSelectedItem->root->SwingUtilities->getRootPane->if->im->root->getInputMap->am->root->getActionMap->if->obj->im->KeyStroke->getKeyStroke->get->if->action->am->get->if->action->e->getID->e->getActionCommand->e->getWhen->e->getModifiers->new->ActionEvent->actionPerformed
BasicComboBoxUI.Actions#getNextIndex(JComboBox, String)::: actions get next index:::listHeight->comboBox->getMaximumRowCount->selectedIndex->comboBox->getSelectedIndex->if->UIManager->getBoolean->comboBox->getUI->comboBox->getUI->getSelectedIndex->if->index->return->else->if->index->max->comboBox->getItemCount->return->else->if->return->else->if->return->comboBox->getItemCount->return->comboBox->getSelectedIndex
BasicComboBoxUI.Actions#accept(Object)::: actions accept:::if->getName->return->isPopupVisible->return
BasicComboBoxUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->e->getPropertyName->if->e->getSource->if->equals->comboBox->revalidate->else->comboBox->e->getSource->if->newModel->e->getNewValue->oldModel->e->getOldValue->if->oldModel->removeListDataListener->if->newModel->addListDataListener->if->comboBox->comboBox->getEditor->comboBox->getSelectedItem->configureEditor->comboBox->revalidate->comboBox->repaint->else->if->comboBox->isEditable->addEditor->comboBox->revalidate->else->if->if->comboBox->isEditable->comboBox->setRequestFocusEnabled->addEditor->else->comboBox->setRequestFocusEnabled->removeEditor->updateToolTipTextForChildren->comboBox->revalidate->else->if->enabled->comboBox->isEnabled->if->editor->setEnabled->if->arrowButton->setEnabled->comboBox->repaint->else->if->focusable->comboBox->isFocusable->if->editor->setFocusable->if->arrowButton->setFocusable->comboBox->repaint->else->if->if->isPopupVisible->setPopupVisible->setPopupVisible->else->if->listBox->comboBox->getFont->setFont->if->editor->comboBox->getFont->setFont->comboBox->validate->else->if->SwingUtilities2->isScaleChanged->comboBox->validate->else->if->updateToolTipTextForChildren->else->if->inTable->e->getNewValue->inTable->equals->else->if->comboBox->revalidate->else->if->comboBox->revalidate
BasicComboBoxUI.Handler#keyPressed(KeyEvent)::: handler key pressed:::if->e->getKeyCode->e->getModifiers->isNavigationKey->else->if->comboBox->isEnabled->comboBox->getModel->getSize->isTypeAheadKey->e->getKeyChar->e->getWhen->if->comboBox->e->getKeyChar->selectWithKeyChar->e->consume
BasicComboBoxUI.Handler#keyTyped(KeyEvent)::: handler key typed:::
BasicComboBoxUI.Handler#keyReleased(KeyEvent)::: handler key released:::
BasicComboBoxUI.Handler#isTypeAheadKey(KeyEvent)::: handler is type ahead key:::return->e->isAltDown->BasicGraphicsUtils->isMenuShortcutKeyDown
BasicComboBoxUI.Handler#focusGained(FocusEvent)::: handler focus gained:::comboBoxEditor->comboBox->getEditor->if->e->getSource->comboBoxEditor->getEditorComponent->return->comboBox->repaint->if->comboBox->isEditable->editor->requestFocus
BasicComboBoxUI.Handler#focusLost(FocusEvent)::: handler focus lost:::editor->comboBox->getEditor->if->e->getSource->editor->getEditorComponent->item->editor->getItem->selectedItem->comboBox->getSelectedItem->if->e->isTemporary->item->equals->comboBox->EventQueue->getMostRecentEventTime->new->ActionEvent->actionPerformed->if->e->isTemporary->setPopupVisible->comboBox->repaint
BasicComboBoxUI.Handler#contentsChanged(ListDataEvent)::: handler contents changed:::if->e->getIndex0->e->getIndex1->comboBox->revalidate->if->comboBox->isEditable->comboBox->comboBox->getEditor->comboBox->getSelectedItem->configureEditor->comboBox->repaint
BasicComboBoxUI.Handler#intervalAdded(ListDataEvent)::: handler interval added:::contentsChanged
BasicComboBoxUI.Handler#intervalRemoved(ListDataEvent)::: handler interval removed:::contentsChanged
BasicComboBoxUI.Handler#addLayoutComponent(String, Component)::: handler add layout component:::
BasicComboBoxUI.Handler#removeLayoutComponent(Component)::: handler remove layout component:::
BasicComboBoxUI.Handler#preferredLayoutSize(Container)::: handler preferred layout size:::return->parent->getPreferredSize
BasicComboBoxUI.Handler#minimumLayoutSize(Container)::: handler minimum layout size:::return->parent->getMinimumSize
BasicComboBoxUI.Handler#layoutContainer(Container)::: handler layout container:::cb->width->cb->getWidth->height->cb->getHeight->insets->getInsets->buttonHeight->buttonWidth->if->arrowInsets->arrowButton->getInsets->arrowButton->getPreferredSize->cvb->if->if->BasicGraphicsUtils->isLeftToRight->arrowButton->setBounds->else->arrowButton->setBounds->if->rectangleForCurrentValue->editor->setBounds
BasicComboBoxUI.Handler#actionPerformed(ActionEvent)::: handler action performed:::item->comboBox->getEditor->getItem->if->if->comboBox->isPopupVisible->item->comboBox->getSelectedItem->equals->comboBox->comboBox->getEditor->getItem->setSelectedItem->am->comboBox->getActionMap->if->action->am->get->if->action->evt->getID->evt->getActionCommand->evt->getModifiers->new->ActionEvent->actionPerformed
BasicComboBoxUI.DefaultKeySelectionManager#selectionForKey(char, ComboBoxModel)::: default key selection manager selection for key:::if->startingFromSelection->startIndex->comboBox->getSelectedIndex->if->if->prefix->length->prefix->charAt->else->else->if->aModel->getSize->index->listBox->getNextMatch->if->listBox->getNextMatch->return
BasicComboPopup.EmptyListModelClass#getSize()::: empty list model class get size:::return
BasicComboPopup.EmptyListModelClass#getElementAt(int)::: empty list model class get element at:::return
BasicComboPopup.EmptyListModelClass#addListDataListener(ListDataListener)::: empty list model class add list data listener:::
BasicComboPopup.EmptyListModelClass#removeListDataListener(ListDataListener)::: empty list model class remove list data listener:::
BasicComboPopup#show():::Implementation of ComboPopup.show().:::comboBox->firePopupMenuWillBecomeVisible->comboBox->getSelectedIndex->setListSelection->location->getPopupLocation->show
BasicComboPopup#hide():::Implementation of ComboPopup.hide().:::manager->MenuSelectionManager->defaultManager->selection->manager->getSelectedPath->for->i->if->comboBox->repaint
BasicComboPopup#getList():::Implementation of ComboPopup.getList().:::return
BasicComboPopup#getMouseListener():::Implementation of ComboPopup.getMouseListener().:::if->createMouseListener->return
BasicComboPopup#getMouseMotionListener():::Implementation of ComboPopup.getMouseMotionListener().:::if->createMouseMotionListener->return
BasicComboPopup#getKeyListener():::Implementation of ComboPopup.getKeyListener().:::if->createKeyListener->return
BasicComboPopup#uninstallingUI():::Called when the UI is uninstalling:::if->comboBox->removePropertyChangeListener->if->comboBox->removeItemListener->comboBox->getModel->uninstallComboBoxModelListeners->uninstallKeyboardActions->uninstallListListeners->uninstallScrollerListeners->list->setModel
BasicComboPopup#uninstallComboBoxModelListeners(ComboBoxModel):::Removes the listeners from the combo box model:::if->model->removeListDataListener
BasicComboPopup#uninstallKeyboardActions():::Unregisters keyboard actions.:::
BasicComboPopup#firePopupMenuWillBecomeVisible()::: basic combo popup fire popup menu will become visible:::if->comboBox->addMouseWheelListener->super->firePopupMenuWillBecomeVisible
BasicComboPopup#firePopupMenuWillBecomeInvisible()::: basic combo popup fire popup menu will become invisible:::if->comboBox->removeMouseWheelListener->super->firePopupMenuWillBecomeInvisible->comboBox->firePopupMenuWillBecomeInvisible
BasicComboPopup#firePopupMenuCanceled()::: basic combo popup fire popup menu canceled:::if->comboBox->removeMouseWheelListener->super->firePopupMenuCanceled->comboBox->firePopupMenuCanceled
BasicComboPopup#createMouseListener():::Creates a listener that will watch for mouse-press and release events on the combo box:::return->getHandler
BasicComboPopup#createMouseMotionListener():::Creates the mouse motion listener which will be added to the combo box:::return->getHandler
BasicComboPopup#createKeyListener():::Creates the key listener that will be added to the combo box:::return
BasicComboPopup#createListSelectionListener():::Creates a list selection listener that watches for selection changes in the popup's list:::return
BasicComboPopup#createListDataListener():::Creates a list data listener which will be added to the ComboBoxModel:::return
BasicComboPopup#createListMouseListener():::Creates a mouse listener that watches for mouse events in the popup's list:::return->getHandler
BasicComboPopup#createListMouseMotionListener():::Creates a mouse motion listener that watches for mouse motion events in the popup's list:::return->getHandler
BasicComboPopup#createPropertyChangeListener():::Creates a PropertyChangeListener which will be added to the combo box:::return->getHandler
BasicComboPopup#createItemListener():::Creates an ItemListener which will be added to the combo box:::return->getHandler
BasicComboPopup#getHandler()::: basic combo popup get handler:::if->new->Handler->return
BasicComboPopup#createList():::Creates the JList used in the popup to display the items in the combo box model:::return->comboBox->getModel->new->JList<Object>
BasicComboPopup#configureList():::Configures the list which is used to hold the combo box items in the popup:::list->comboBox->getFont->setFont->list->comboBox->getForeground->setForeground->list->comboBox->getBackground->setBackground->list->UIManager->getColor->setSelectionForeground->list->UIManager->getColor->setSelectionBackground->list->setBorder->list->comboBox->getRenderer->setCellRenderer->list->setFocusable->list->setSelectionMode->comboBox->getSelectedIndex->setListSelection->installListListeners
BasicComboPopup#installListListeners():::Adds the listeners to the list control.:::if->createListMouseListener->list->addMouseListener->if->createListMouseMotionListener->list->addMouseMotionListener->if->createListSelectionListener->list->addListSelectionListener
BasicComboPopup#uninstallListListeners()::: basic combo popup uninstall list listeners:::if->list->removeMouseListener->if->list->removeMouseMotionListener->if->list->removeListSelectionListener
BasicComboPopup#createScroller():::Creates the scroll pane which houses the scrollable list.:::sp->new->JScrollPane->sp->setHorizontalScrollBar->return
BasicComboPopup#configureScroller():::Configures the scrollable portion which holds the list within the combo box popup:::scroller->setFocusable->scroller->getVerticalScrollBar->setFocusable->scroller->setBorder->installScrollerListeners
BasicComboPopup#configurePopup():::Configures the popup portion of the combo box:::new->BoxLayout->setLayout->setBorderPainted->setBorder->setOpaque->add->setDoubleBuffered->setFocusable
BasicComboPopup#installScrollerListeners()::: basic combo popup install scroller listeners:::getHandler->if->scroller->addMouseWheelListener
BasicComboPopup#uninstallScrollerListeners()::: basic combo popup uninstall scroller listeners:::if->scroller->removeMouseWheelListener
BasicComboPopup#installComboBoxListeners():::This method adds the necessary listeners to the JComboBox.:::if->createPropertyChangeListener->comboBox->addPropertyChangeListener->if->createItemListener->comboBox->addItemListener->comboBox->getModel->installComboBoxModelListeners
BasicComboPopup#installComboBoxModelListeners(ComboBoxModel):::Installs the listeners on the combo box model:::if->createListDataListener->model->addListDataListener
BasicComboPopup#installKeyboardActions():::Registers keyboard actions.:::
BasicComboPopup.InvocationMouseHandler#mousePressed(MouseEvent):::Responds to mouse-pressed events on the combo box.:::getHandler->mousePressed
BasicComboPopup.InvocationMouseHandler#mouseReleased(MouseEvent):::Responds to the user terminating a click or drag that began on the combo box.:::getHandler->mouseReleased
BasicComboPopup.InvocationMouseMotionHandler#mouseDragged(MouseEvent)::: invocation mouse motion handler mouse dragged:::getHandler->mouseDragged
BasicComboPopup.InvocationKeyHandler#keyReleased(KeyEvent)::: invocation key handler key released:::
BasicComboPopup.ListSelectionHandler#valueChanged(ListSelectionEvent)::: list selection handler value changed:::
BasicComboPopup.ListDataHandler#contentsChanged(ListDataEvent)::: list data handler contents changed:::
BasicComboPopup.ListDataHandler#intervalAdded(ListDataEvent)::: list data handler interval added:::
BasicComboPopup.ListDataHandler#intervalRemoved(ListDataEvent)::: list data handler interval removed:::
BasicComboPopup.ListMouseHandler#mousePressed(MouseEvent)::: list mouse handler mouse pressed:::
BasicComboPopup.ListMouseHandler#mouseReleased(MouseEvent)::: list mouse handler mouse released:::getHandler->mouseReleased
BasicComboPopup.ListMouseMotionHandler#mouseMoved(MouseEvent)::: list mouse motion handler mouse moved:::getHandler->mouseMoved
BasicComboPopup.ItemHandler#itemStateChanged(ItemEvent)::: item handler item state changed:::getHandler->itemStateChanged
BasicComboPopup.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicComboPopup.AutoScrollActionHandler#actionPerformed(ActionEvent)::: auto scroll action handler action performed:::if->autoScrollUp->else->autoScrollDown
BasicComboPopup.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicComboPopup.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->e->getSource->return->if->SwingUtilities->isLeftMouseButton->comboBox->isEnabled->return->if->comboBox->isEditable->comp->comboBox->getEditor->getEditorComponent->if->isRequestFocusEnabled->comp->requestFocus->else->if->comboBox->isRequestFocusEnabled->comboBox->requestFocus->togglePopup
BasicComboPopup.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->e->getSource->if->list->getModel->getSize->if->comboBox->getSelectedIndex->list->getSelectedIndex->comboBox->getEditor->list->getSelectedValue->setItem->comboBox->list->getSelectedIndex->setSelectedIndex->comboBox->setPopupVisible->if->comboBox->isEditable->comboBox->getEditor->comboBox->comboBox->getEditor->comboBox->getSelectedItem->configureEditor->return->source->e->getSource->size->source->getSize->bounds->new->Rectangle->if->bounds->e->getPoint->contains->newEvent->convertMouseEvent->location->newEvent->getPoint->r->new->Rectangle->list->computeVisibleRect->if->r->contains->if->comboBox->getSelectedIndex->list->getSelectedIndex->comboBox->getEditor->list->getSelectedValue->setItem->comboBox->list->getSelectedIndex->setSelectedIndex->comboBox->setPopupVisible->stopAutoScrolling
BasicComboPopup.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicComboPopup.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicComboPopup.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::if->anEvent->getSource->location->anEvent->getPoint->r->new->Rectangle->list->computeVisibleRect->if->r->contains->updateListBoxSelectionForEvent
BasicComboPopup.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::if->e->getSource->return->if->isVisible->newEvent->convertMouseEvent->r->new->Rectangle->list->computeVisibleRect->if->newEvent->getPoint->newEvent->getPoint->if->stopAutoScrolling->location->newEvent->getPoint->if->r->contains->updateListBoxSelectionForEvent->else->if->directionToScroll->newEvent->getPoint->if->stopAutoScrolling->startAutoScrolling->else->if->startAutoScrolling->else->if->e->getPoint->startAutoScrolling
BasicComboPopup.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::comboBox->e->getSource->propertyName->e->getPropertyName->if->oldModel->e->getOldValue->newModel->e->getNewValue->uninstallComboBoxModelListeners->installComboBoxModelListeners->list->setModel->if->isVisible->hide->else->if->list->comboBox->getRenderer->setCellRenderer->if->isVisible->hide->else->if->o->e->getNewValue->list->getList->if->list->getComponentOrientation->list->setComponentOrientation->if->scroller->getComponentOrientation->scroller->setComponentOrientation->if->getComponentOrientation->setComponentOrientation->else->if->comboBox->isLightWeightPopupEnabled->setLightWeightPopupEnabled
BasicComboPopup.Handler#itemStateChanged(ItemEvent)::: handler item state changed:::if->e->getStateChange->comboBox->e->getSource->comboBox->getSelectedIndex->setListSelection->else->setListSelection
BasicComboPopup.Handler#mouseWheelMoved(MouseWheelEvent)::: handler mouse wheel moved:::e->consume
BasicComboPopup#isFocusTraversable():::Overridden to unconditionally return false.:::return
BasicComboPopup#startAutoScrolling(int):::This protected method is implementation specific and should be private:::if->autoscrollTimer->stop->if->convertedPoint->SwingUtilities->new->Point->convertPoint->top->list->locationToIndex->list->setSelectedIndex->new->AutoScrollActionHandler->new->Timer->else->if->size->scroller->getSize->convertedPoint->SwingUtilities->new->Point->convertPoint->bottom->list->locationToIndex->list->setSelectedIndex->new->AutoScrollActionHandler->new->Timer->autoscrollTimer->start
BasicComboPopup#stopAutoScrolling():::This protected method is implementation specific and should be private:::if->autoscrollTimer->stop
BasicComboPopup#autoScrollUp():::This protected method is implementation specific and should be private:::index->list->getSelectedIndex->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicComboPopup#autoScrollDown():::This protected method is implementation specific and should be private:::index->list->getSelectedIndex->lastItem->list->getModel->getSize->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicComboPopup#getAccessibleContext():::Gets the AccessibleContext associated with this BasicComboPopup:::context->super->getAccessibleContext->context->setAccessibleParent->return
BasicComboPopup#delegateFocus(MouseEvent):::This is a utility method that helps event handlers figure out where to send the focus when the popup is brought up:::if->comboBox->isEditable->comp->comboBox->getEditor->getEditorComponent->if->isRequestFocusEnabled->comp->requestFocus->else->if->comboBox->isRequestFocusEnabled->comboBox->requestFocus
BasicComboPopup#togglePopup():::Makes the popup visible if it is hidden and makes it hidden if it is visible.:::if->isVisible->hide->else->show
BasicComboPopup#setListSelection(int):::Sets the list selection index to the selectedIndex:::if->list->clearSelection->else->list->setSelectedIndex->list->ensureIndexIsVisible
BasicComboPopup#convertMouseEvent(MouseEvent):::Converts mouse event.:::convertedPoint->SwingUtilities->e->getSource->e->getPoint->convertPoint->newEvent->e->getSource->e->getID->e->getWhen->e->getModifiers->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->return
BasicComboPopup#getPopupHeightForRowCount(int):::Retrieves the height of the popup based on the current ListCellRenderer and the maximum row count.:::minRowCount->Math->comboBox->getItemCount->min->height->renderer->list->getCellRenderer->value->for->i->if->comboBox->getHeight->border->scroller->getViewportBorder->if->insets->border->getBorderInsets->scroller->getBorder->if->insets->border->getBorderInsets->return
BasicComboPopup#computePopupBounds(int, int, int, int):::Calculate the placement and size of the popup portion of the combo box based on the combo box location and the enclosing screen bounds:::toolkit->Toolkit->getDefaultToolkit->screenBounds->gc->comboBox->getGraphicsConfiguration->p->new->Point->SwingUtilities->convertPointFromScreen->if->screenInsets->toolkit->getScreenInsets->gc->getBounds->else->toolkit->getScreenSize->new->Rectangle->borderHeight->popupBorder->getBorder->if->borderInsets->popupBorder->getBorderInsets->rect->new->Rectangle->if->if->else->Math->max->Math->min->return
BasicComboPopup#getPopupLocation():::Calculates the upper left location of the Popup.:::popupSize->comboBox->getSize->insets->getInsets->popupSize->comboBox->getMaximumRowCount->getPopupHeightForRowCount->setSize->popupBounds->comboBox->getBounds->computePopupBounds->scrollSize->popupBounds->getSize->popupLocation->popupBounds->getLocation->scroller->setMaximumSize->scroller->setPreferredSize->scroller->setMinimumSize->list->revalidate->return
BasicComboPopup#updateListBoxSelectionForEvent(MouseEvent, boolean):::A utility method used by the event listeners:::location->anEvent->getPoint->if->return->index->list->locationToIndex->if->if->else->comboBox->getModel->getSize->if->list->getSelectedIndex->list->setSelectedIndex->if->list->ensureIndexIsVisible
BasicDesktopIconUI#createUI(JComponent):::Constructs a new instance of BasicDesktopIconUI.:::return->new->BasicDesktopIconUI
BasicDesktopIconUI#installUI(JComponent)::: basic desktop icon i install i:::desktopIcon->getInternalFrame->installDefaults->installComponents->f->desktopIcon->getInternalFrame->if->f->isIcon->f->getParent->desktop->desktopIcon->getDesktopPane->if->desktopManager->desktop->getDesktopManager->if->desktopManager->iconifyFrame->installListeners->JLayeredPane->JLayeredPane->getLayer->putLayer
BasicDesktopIconUI#uninstallUI(JComponent)::: basic desktop icon i uninstall i:::uninstallDefaults->uninstallComponents->f->desktopIcon->getInternalFrame->if->f->isIcon->desktop->desktopIcon->getDesktopPane->if->desktopManager->desktop->getDesktopManager->if->f->putClientProperty->desktopIcon->setLocation->uninstallListeners
BasicDesktopIconUI#installComponents():::Registers components.:::new->BasicInternalFrameTitlePane->desktopIcon->new->BorderLayout->setLayout->desktopIcon->add
BasicDesktopIconUI#uninstallComponents():::Unregisters components.:::desktopIcon->remove->desktopIcon->setLayout
BasicDesktopIconUI#installListeners():::Registers listeners.:::createMouseInputListener->desktopIcon->addMouseMotionListener->desktopIcon->addMouseListener
BasicDesktopIconUI#uninstallListeners():::Unregisters listeners.:::desktopIcon->removeMouseMotionListener->desktopIcon->removeMouseListener
BasicDesktopIconUI#installDefaults():::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installProperty
BasicDesktopIconUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicDesktopIconUI#createMouseInputListener():::Returns a new instance of MouseInputListener.:::return->new->MouseInputHandler
BasicDesktopIconUI#getPreferredSize(JComponent)::: basic desktop icon i get preferred size:::return->desktopIcon->getLayout->preferredLayoutSize
BasicDesktopIconUI#getMinimumSize(JComponent)::: basic desktop icon i get minimum size:::dim->iconPane->getMinimumSize->new->Dimension->border->frame->getBorder->if->border->getBorderInsets->border->getBorderInsets->return
BasicDesktopIconUI#getMaximumSize(JComponent):::Desktop icons can not be resized:::return->iconPane->getMaximumSize
BasicDesktopIconUI#getInsets(JComponent):::Returns the insets.:::iframe->desktopIcon->getInternalFrame->border->iframe->getBorder->if->return->border->getBorderInsets->return->new->Insets
BasicDesktopIconUI#deiconize():::De-iconifies the internal frame.:::try->frame->setIcon->catch->finally
BasicDesktopIconUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::d->if->desktopIcon->getDesktopPane->dm->d->getDesktopManager->dm->endDraggingFrame
BasicDesktopIconUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::p->SwingUtilities->e->getSource->e->getX->e->getY->convertPoint->e->getX->e->getY->desktopIcon->getBounds->d->if->desktopIcon->getDesktopPane->dm->d->getDesktopManager->dm->beginDraggingFrame->try->frame->setSelected->catch->finally->if->desktopIcon->getParent->desktopIcon->getParent->moveToFront->if->e->getClickCount->if->frame->isIconifiable->frame->isIcon->deiconize
BasicDesktopIconUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::
BasicDesktopIconUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::p->newX->newY->newW->newH->deltaX->deltaY->min->max->SwingUtilities->e->getSource->e->getX->e->getY->convertPoint->i->desktopIcon->getInsets->pWidth->pHeight->desktopIcon->getParent->getWidth->desktopIcon->getParent->getHeight->if->return->if->if->if->if->d->if->desktopIcon->getDesktopPane->dm->d->getDesktopManager->dm->dragFrame->else->desktopIcon->getWidth->desktopIcon->getHeight->moveAndRepaint->return
BasicDesktopIconUI.MouseInputHandler#moveAndRepaint(JComponent, int, int, int, int):::Moves and repaints a component f.:::r->f->getBounds->f->setBounds->SwingUtilities->computeUnion->f->getParent->repaint
BasicDesktopPaneUI#createUI(JComponent):::Constructs a new instance of BasicDesktopPaneUI.:::return->new->BasicDesktopPaneUI
BasicDesktopPaneUI#installUI(JComponent)::: basic desktop pane i install i:::installDefaults->installDesktopManager->installListeners->installKeyboardActions
BasicDesktopPaneUI#uninstallUI(JComponent)::: basic desktop pane i uninstall i:::uninstallKeyboardActions->uninstallListeners->uninstallDesktopManager->uninstallDefaults
BasicDesktopPaneUI#installDefaults():::Installs default properties.:::if->desktop->getBackground->desktop->getBackground->desktop->UIManager->getColor->setBackground->LookAndFeel->installProperty
BasicDesktopPaneUI#uninstallDefaults():::Uninstalls default properties.:::
BasicDesktopPaneUI#installListeners():::Installs the PropertyChangeListener returned from createPropertyChangeListener on the JDesktopPane.:::createPropertyChangeListener->desktop->addPropertyChangeListener
BasicDesktopPaneUI#uninstallListeners():::Uninstalls the PropertyChangeListener returned from createPropertyChangeListener from the JDesktopPane.:::desktop->removePropertyChangeListener
BasicDesktopPaneUI#installDesktopManager():::Installs desktop manager.:::desktop->getDesktopManager->if->new->BasicDesktopManager->desktop->setDesktopManager
BasicDesktopPaneUI#uninstallDesktopManager():::Uninstalls desktop manager.:::if->desktop->getDesktopManager->desktop->setDesktopManager
BasicDesktopPaneUI#installKeyboardActions():::Installs keyboard actions.:::inputMap->getInputMap->if->SwingUtilities->replaceUIInputMap->getInputMap->if->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->registerKeyboardActions
BasicDesktopPaneUI#registerKeyboardActions():::Registers keyboard actions.:::
BasicDesktopPaneUI#unregisterKeyboardActions():::Unregisters keyboard actions.:::
BasicDesktopPaneUI#getInputMap(int)::: basic desktop pane i get input map:::if->return->createInputMap->else->if->return->DefaultLookup->get->return
BasicDesktopPaneUI#createInputMap(int)::: basic desktop pane i create input map:::if->bindings->DefaultLookup->get->if->return->LookAndFeel->makeComponentInputMap->return
BasicDesktopPaneUI#loadActionMap(LazyActionMap)::: basic desktop pane i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicDesktopPaneUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::unregisterKeyboardActions->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicDesktopPaneUI#paint(Graphics, JComponent)::: basic desktop pane i paint:::
BasicDesktopPaneUI#getPreferredSize(JComponent)::: basic desktop pane i get preferred size:::return
BasicDesktopPaneUI#getMinimumSize(JComponent)::: basic desktop pane i get minimum size:::return->new->Dimension
BasicDesktopPaneUI#getMaximumSize(JComponent)::: basic desktop pane i get maximum size:::return->new->Dimension
BasicDesktopPaneUI#createPropertyChangeListener():::Returns the PropertyChangeListener to install on the JDesktopPane.:::return->getHandler
BasicDesktopPaneUI#getHandler()::: basic desktop pane i get handler:::if->new->Handler->return
BasicDesktopPaneUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->evt->getPropertyName->if->installDesktopManager
BasicDesktopPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::dp->e->getSource->key->getName->if->setState->else->if->if->dp->getSelectedFrame->focusOwner->requestFocus->else->if->dp->getSelectedFrame->if->return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->SwingUtilities->isDescendingFrom->sourceFrame->requestFocus->else->if->c->dp->getSelectedFrame->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->return->minOnScreenInsets->UIManager->getInsets->size->c->getSize->minSize->c->getMinimumSize->dpWidth->dp->getWidth->dpHeight->dp->getHeight->delta->loc->c->getLocation->if->if->c->setLocation->else->if->c->setLocation->c->setSize->else->if->if->c->setLocation->else->if->c->setSize->else->if->if->c->setLocation->else->if->c->setLocation->c->setSize->else->if->if->c->setLocation->else->if->c->setSize->else->if->if->else->if->c->setSize->else->if->if->else->if->c->setLocation->c->setSize->else->if->if->else->if->c->setSize->else->if->if->else->if->c->setLocation->c->setSize->else->if->dp->selectFrame->else->if->moveForward->if->cycleRoot->dp->getFocusCycleRootAncestor->if->policy->cycleRoot->getFocusTraversalPolicy->if->sPolicy->idc->sPolicy->getImplicitDownCycleTraversal->try->sPolicy->setImplicitDownCycleTraversal->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->focusNextComponent->else->KeyboardFocusManager->getCurrentKeyboardFocusManager->focusPreviousComponent->catch->finally->sPolicy->setImplicitDownCycleTraversal
BasicDesktopPaneUI.Actions#setState(JDesktopPane, String)::: actions set state:::if->f->dp->getSelectedFrame->if->return->f->doDefaultCloseAction->else->if->f->dp->getSelectedFrame->if->return->if->f->isMaximum->if->f->isIcon->try->f->setIcon->f->setMaximum->catch->finally->else->try->f->setMaximum->catch->finally->else->if->f->dp->getSelectedFrame->if->return->if->f->isIcon->try->f->setIcon->catch->finally->else->if->f->dp->getSelectedFrame->if->return->try->if->f->isIcon->f->setIcon->else->if->f->isMaximum->f->setMaximum->f->setSelected->catch->finally
BasicDesktopPaneUI.Actions#accept(Object)::: actions accept:::if->dp->action->getName->if->return->iFrame->dp->getSelectedFrame->if->return->else->if->return->iFrame->isClosable->else->if->return->iFrame->isIconifiable->else->if->return->iFrame->isMaximizable->return->return
BasicDesktopPaneUI.OpenAction#actionPerformed(ActionEvent)::: open action action performed:::dp->evt->getSource->SHARED_ACTION->setState
BasicDesktopPaneUI.OpenAction#isEnabled()::: open action is enabled:::return
BasicDesktopPaneUI.CloseAction#actionPerformed(ActionEvent)::: close action action performed:::dp->evt->getSource->SHARED_ACTION->setState
BasicDesktopPaneUI.CloseAction#isEnabled()::: close action is enabled:::iFrame->desktop->getSelectedFrame->if->return->iFrame->isClosable->return
BasicDesktopPaneUI.MinimizeAction#actionPerformed(ActionEvent)::: minimize action action performed:::dp->evt->getSource->SHARED_ACTION->setState
BasicDesktopPaneUI.MinimizeAction#isEnabled()::: minimize action is enabled:::iFrame->desktop->getSelectedFrame->if->return->iFrame->isIconifiable->return
BasicDesktopPaneUI.MaximizeAction#actionPerformed(ActionEvent)::: maximize action action performed:::dp->evt->getSource->SHARED_ACTION->setState
BasicDesktopPaneUI.MaximizeAction#isEnabled()::: maximize action is enabled:::iFrame->desktop->getSelectedFrame->if->return->iFrame->isMaximizable->return
BasicDesktopPaneUI.NavigateAction#actionPerformed(ActionEvent)::: navigate action action performed:::dp->evt->getSource->dp->selectFrame
BasicDesktopPaneUI.NavigateAction#isEnabled()::: navigate action is enabled:::return
BasicDirectoryModel#propertyChange(PropertyChangeEvent)::: basic directory model property change:::prop->e->getPropertyName->if->validateFileCache->else->if->equals->old->e->getOldValue->if->ui->model->ui->getModel->if->model->invalidateFileCache->else->if->equals->invalidateFileCache
BasicDirectoryModel#invalidateFileCache():::This method is used to interrupt file loading thread.:::if->interrupt->filesLoader->cancelRunnables
BasicDirectoryModel#getDirectories():::Returns a list of directories.:::synchronized->if->return->fls->getFiles->return
BasicDirectoryModel#getFiles():::Returns a list of files.:::synchronized->if->return->new->Vector<File>->new->Vector<File>->directories->filechooser->getFileSystemView->filechooser->getCurrentDirectory->createFileObject->addElement->for->i->getSize->return
BasicDirectoryModel#validateFileCache():::Validates content of file cache.:::currentDirectory->filechooser->getCurrentDirectory->if->return->if->interrupt->filesLoader->cancelRunnables->setBusy->new->FilesLoader
BasicDirectoryModel#renameFile(File, File):::Renames a file in the underlying file system.:::synchronized->if->oldFile->renameTo->validateFileCache->return->return
BasicDirectoryModel#fireContentsChanged():::Invoked when a content is changed.:::getSize->fireContentsChanged
BasicDirectoryModel#getSize()::: basic directory model get size:::return->fileCache->size
BasicDirectoryModel#contains(Object):::Returns true if an element o is in file cache, otherwise, returns false.:::return->fileCache->contains
BasicDirectoryModel#indexOf(Object):::Returns an index of element o in file cache.:::return->fileCache->indexOf
BasicDirectoryModel#getElementAt(int)::: basic directory model get element at:::return->fileCache->get
BasicDirectoryModel#intervalAdded(ListDataEvent):::Obsolete - not used.:::
BasicDirectoryModel#intervalRemoved(ListDataEvent):::Obsolete - not used.:::
BasicDirectoryModel#sort(Vector):::Sorts a list of files.:::ShellFolder->sort
BasicDirectoryModel#lt(File, File):::Obsolete - not used:::diff->a->getName->toLowerCase->b->getName->toLowerCase->compareTo->if->return->else->return->a->getName->b->getName->compareTo
BasicDirectoryModel.FilesLoader#run()::: files loader run:::run0->setBusy
BasicDirectoryModel.FilesLoader#run0()::: files loader run0:::fileSystem->filechooser->getFileSystemView->if->loadThread->isInterrupted->return->list->fileSystem->filechooser->isFileHidingEnabled->getFiles->if->loadThread->isInterrupted->return->newFileCache->new->Vector<File>->newFiles->new->Vector<File>->foreach->if->filechooser->accept->isTraversable->filechooser->isTraversable->if->newFileCache->addElement->else->if->filechooser->isFileSelectionEnabled->newFiles->addElement->if->loadThread->isInterrupted->return->sort->sort->newFileCache->addAll->doChangeContents->ShellFolder->new->Callable<DoChangeContents>->invoke->if->runnables->addElement->SwingUtilities->invokeLater
BasicDirectoryModel.FilesLoader#cancelRunnables(Vector)::: files loader cancel runnables:::foreach->runnable->cancel
BasicDirectoryModel.FilesLoader#cancelRunnables()::: files loader cancel runnables:::cancelRunnables
BasicDirectoryModel#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
BasicDirectoryModel#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->changeSupport->removePropertyChangeListener
BasicDirectoryModel#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this component.:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
BasicDirectoryModel#firePropertyChange(String, Object, Object):::Support for reporting bound property changes for boolean properties:::if->changeSupport->firePropertyChange
BasicDirectoryModel#setBusy(boolean, int):::Set the busy state for the model:::if->oldValue->if->SwingUtilities->new->Runnable->invokeLater
BasicDirectoryModel.DoChangeContents#cancel()::: do change contents cancel:::
BasicDirectoryModel.DoChangeContents#run()::: do change contents run:::if->remSize->remFiles->size->addSize->addFiles->size->synchronized->if->fileCache->removeAll->if->fileCache->addAll->if->fireIntervalRemoved->else->if->fileCache->size->fireIntervalAdded->else->fireContentsChanged
BasicEditorPaneUI#createUI(JComponent):::Creates a UI for the JTextPane.:::return->new->BasicEditorPaneUI
BasicEditorPaneUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicEditorPaneUI#installUI(JComponent)::: basic editor pane i install i:::super->installUI->c->getFont->c->getForeground->updateDisplayProperties
BasicEditorPaneUI#uninstallUI(JComponent)::: basic editor pane i uninstall i:::cleanDisplayProperties->super->uninstallUI
BasicEditorPaneUI#getEditorKit(JTextComponent):::Fetches the EditorKit for the UI:::pane->getComponent->return->pane->getEditorKit
BasicEditorPaneUI#getActionMap():::Fetch an action map to use:::am->new->ActionMapUIResource->am->new->FocusAction->put->editorKit->getComponent->getEditorKit->if->actions->editorKit->getActions->if->addActions->am->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->am->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->am->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put->return
BasicEditorPaneUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange->name->evt->getPropertyName->if->equals->map->SwingUtilities->getComponent->getUIActionMap->if->oldValue->evt->getOldValue->if->actions->getActions->if->removeActions->newValue->evt->getNewValue->if->actions->getActions->if->addActions->updateFocusTraversalKeys->else->if->equals->updateFocusTraversalKeys->else->if->equals->equals->equals->equals->equals->c->getComponent->c->getFont->c->getForeground->updateDisplayProperties->if->equals->equals->modelChanged->if->equals->honorDisplayPropertiesObject->c->getClientProperty->honorDisplayProperties->if->booleanValue->if->modelChanged
BasicEditorPaneUI#removeActions(ActionMap, Action[])::: basic editor pane i remove actions:::n->for->i
BasicEditorPaneUI#addActions(ActionMap, Action[])::: basic editor pane i add actions:::n->for->i
BasicEditorPaneUI#updateDisplayProperties(Font, Color)::: basic editor pane i update display properties:::c->getComponent->honorDisplayPropertiesObject->c->getClientProperty->honorDisplayProperties->w3cLengthUnitsObject->c->getClientProperty->w3cLengthUnits->if->booleanValue->if->booleanValue->if->doc->getComponent->getDocument->if->if->updateCSS->else->updateStyle->else->cleanDisplayProperties->if->doc->getComponent->getDocument->if->documentStyleSheet->getStyleSheet->documentStyleSheet->addRule->else->doc->getComponent->getDocument->if->documentStyleSheet->getStyleSheet->documentStyleSheet->addRule
BasicEditorPaneUI#cleanDisplayProperties()::: basic editor pane i clean display properties:::document->getComponent->getDocument->if->documentStyleSheet->getStyleSheet->styleSheets->documentStyleSheet->getStyleSheets->if->foreach->if->documentStyleSheet->removeStyleSheet->documentStyleSheet->addRule->break->style->getStyle->if->style->getAttribute->style->removeAttribute
BasicEditorPaneUI#updateCSS(Font, Color)::: basic editor pane i update s:::component->getComponent->document->component->getDocument->if->styleSheet->new->StyleSheetUIResource->documentStyleSheet->getStyleSheet->styleSheets->documentStyleSheet->getStyleSheets->if->foreach->if->documentStyleSheet->removeStyleSheet->cssRule->displayPropertiesToCSS->styleSheet->addRule->documentStyleSheet->addStyleSheet->documentStyleSheet->component->getFont->getSize->addRule->style->getStyle->if->font->style->getAttribute->equals->style->addAttribute
BasicEditorPaneUI#updateStyle(Font, Color)::: basic editor pane i update style:::updateFont->updateForeground
BasicEditorPaneUI#updateForeground(Color):::Update the color in the default style of the document.:::doc->getComponent->getDocument->style->doc->getStyle->if->return->if->if->style->getAttribute->style->removeAttribute->else->if->color->StyleConstants->getForeground->equals->StyleConstants->setForeground
BasicEditorPaneUI#updateFont(Font):::Update the font in the default style of the document.:::doc->getComponent->getDocument->style->doc->getStyle->if->return->fontFamily->style->getAttribute->fontSize->style->getAttribute->isBold->style->getAttribute->isItalic->style->getAttribute->fontAttribute->style->getAttribute->if->if->style->removeAttribute->if->style->removeAttribute->if->style->removeAttribute->if->style->removeAttribute->if->style->removeAttribute->else->if->font->getName->equals->StyleConstants->font->getName->setFontFamily->if->fontSize->intValue->font->getSize->StyleConstants->font->getSize->setFontSize->if->isBold->booleanValue->font->isBold->StyleConstants->font->isBold->setBold->if->isItalic->booleanValue->font->isItalic->StyleConstants->font->isItalic->setItalic->if->font->equals->style->addAttribute
BasicFileChooserUI#createUI(JComponent):::Creates a BasicFileChooserUI implementation for the specified component:::return->new->BasicFileChooserUI
BasicFileChooserUI#installUI(JComponent):::Installs the UI.:::new->BorderLayout->new->JPanel->createModel->clearIconCache->installDefaults->installComponents->installListeners->filechooser->filechooser->getComponentOrientation->applyComponentOrientation
BasicFileChooserUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallListeners->uninstallComponents->uninstallDefaults->if->accessoryPanel->removeAll->getFileChooser->removeAll
BasicFileChooserUI#installComponents(JFileChooser):::Installs the components.:::
BasicFileChooserUI#uninstallComponents(JFileChooser):::Uninstalls the components.:::
BasicFileChooserUI#installListeners(JFileChooser):::Installs the listeners.:::createPropertyChangeListener->if->fc->addPropertyChangeListener->fc->getModel->addPropertyChangeListener->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->actionMap->getActionMap->SwingUtilities->replaceUIActionMap
BasicFileChooserUI#getInputMap(int)::: basic file chooser i get input map:::if->return->DefaultLookup->getFileChooser->get->return
BasicFileChooserUI#getActionMap()::: basic file chooser i get action map:::return->createActionMap
BasicFileChooserUI#createActionMap()::: basic file chooser i create action map:::map->new->ActionMapUIResource->refreshAction->new->UIAction->map->getApproveSelectionAction->put->map->getCancelSelectionAction->put->map->put->map->getChangeToParentDirectoryAction->put->return
BasicFileChooserUI#uninstallListeners(JFileChooser):::Uninstalls the listeners.:::if->fc->removePropertyChangeListener->fc->getModel->removePropertyChangeListener->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicFileChooserUI#installDefaults(JFileChooser):::Installs the defaults.:::installIcons->installStrings->UIManager->getBoolean->UIManager->getBoolean->th->fc->getTransferHandler->if->fc->setTransferHandler->LookAndFeel->installProperty
BasicFileChooserUI#installIcons(JFileChooser):::Installs the icons.:::UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon
BasicFileChooserUI#installStrings(JFileChooser):::Installs the strings.:::l->fc->getLocale->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->getMnemonic->getMnemonic->getMnemonic->getMnemonic->getMnemonic->getMnemonic->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString
BasicFileChooserUI#uninstallDefaults(JFileChooser):::Uninstalls the defaults.:::uninstallIcons->uninstallStrings->if->fc->getTransferHandler->fc->setTransferHandler
BasicFileChooserUI#uninstallIcons(JFileChooser):::Uninstalls the icons.:::
BasicFileChooserUI#uninstallStrings(JFileChooser):::Uninstalls the strings.:::
BasicFileChooserUI#createModel():::Creates the model.:::if->model->invalidateFileCache->getFileChooser->new->BasicDirectoryModel
BasicFileChooserUI#getModel():::Returns the model.:::return
BasicFileChooserUI#createPropertyChangeListener(JFileChooser):::Creates the property change listener.:::return
BasicFileChooserUI#getFileName():::Returns the file name.:::return
BasicFileChooserUI#getDirectoryName():::Returns the directory name.:::return
BasicFileChooserUI#setFileName(String):::Sets the file name.:::
BasicFileChooserUI#setDirectoryName(String):::Sets the directory name.:::
BasicFileChooserUI#rescanCurrentDirectory(JFileChooser)::: basic file chooser i rescan current directory:::
BasicFileChooserUI#ensureFileIsVisible(JFileChooser, File)::: basic file chooser i ensure file is visible:::
BasicFileChooserUI#getFileChooser():::Returns the file chooser.:::return
BasicFileChooserUI#getAccessoryPanel():::Returns the accessory panel.:::return
BasicFileChooserUI#getApproveButton(JFileChooser):::Returns the approve button.:::return
BasicFileChooserUI#getDefaultButton(JFileChooser)::: basic file chooser i get default button:::return->getApproveButton
BasicFileChooserUI#getApproveButtonToolTipText(JFileChooser):::Returns the approve button tool tip.:::tooltipText->fc->getApproveButtonToolTipText->if->return->if->fc->getDialogType->return->else->if->fc->getDialogType->return->return
BasicFileChooserUI#clearIconCache():::Clears the icon cache.:::fileView->clearIconCache
BasicFileChooserUI#getHandler()::: basic file chooser i get handler:::if->new->Handler->return
BasicFileChooserUI#createDoubleClickListener(JFileChooser, JList):::Creates a double click listener.:::return->new->Handler
BasicFileChooserUI#createListSelectionListener(JFileChooser):::Creates a list selection listener.:::return->getHandler
BasicFileChooserUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::if->SwingUtilities->isLeftMouseButton->evt->getClickCount->index->SwingUtilities2->evt->getPoint->loc2IndexFileList->if->f->list->getModel->getElementAt->try->ShellFolder->getNormalizedFile->catch->finally->if->getFileChooser->isTraversable->list->clearSelection->changeDirectory->else->getFileChooser->approveSelection
BasicFileChooserUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::if->th1->getFileChooser->getTransferHandler->th2->list->getTransferHandler->if->list->setTransferHandler->if->getFileChooser->getDragEnabled->list->getDragEnabled->list->getFileChooser->getDragEnabled->setDragEnabled
BasicFileChooserUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicFileChooserUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::
BasicFileChooserUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::
BasicFileChooserUI.Handler#valueChanged(ListSelectionEvent)::: handler value changed:::if->evt->getValueIsAdjusting->chooser->getFileChooser->fsv->chooser->getFileSystemView->list->evt->getSource->fsm->chooser->getFileSelectionMode->useSetDirectory->if->chooser->isMultiSelectionEnabled->files->objects->list->getSelectedValues->if->if->isDirectory->chooser->isTraversable->fsv->isFileSystem->setDirectorySelected->setDirectory->else->fList->new->ArrayList<File>->foreach->f->isDir->f->isDirectory->if->chooser->isFileSelectionEnabled->chooser->isDirectorySelectionEnabled->fsv->isFileSystem->fList->add->if->fList->size->fList->fList->size->new->FileArr->toArray->setDirectorySelected->chooser->setSelectedFiles->else->file->list->getSelectedValue->if->file->isDirectory->chooser->isTraversable->fsv->isFileSystem->setDirectorySelected->setDirectory->if->chooser->setSelectedFile->else->setDirectorySelected->if->chooser->setSelectedFile
BasicFileChooserUI.DoubleClickListener#mouseEntered(MouseEvent):::The JList used for representing the files is created by subclasses, but the selection is monitored in this class:::handler->mouseEntered
BasicFileChooserUI.DoubleClickListener#mouseClicked(MouseEvent)::: double click listener mouse clicked:::handler->mouseClicked
BasicFileChooserUI.SelectionListener#valueChanged(ListSelectionEvent)::: selection listener value changed:::getHandler->valueChanged
BasicFileChooserUI#isDirectorySelected():::Property to remember whether a directory is currently selected in the UI.:::return
BasicFileChooserUI#setDirectorySelected(boolean):::Property to remember whether a directory is currently selected in the UI:::
BasicFileChooserUI#getDirectory():::Property to remember the directory that is currently selected in the UI.:::return
BasicFileChooserUI#setDirectory(File):::Property to remember the directory that is currently selected in the UI:::
BasicFileChooserUI#getMnemonic(String, Locale):::Returns the mnemonic for the given key.:::return->SwingUtilities2->getUIDefaultsInt
BasicFileChooserUI#getAcceptAllFileFilter(JFileChooser):::Returns the default accept all file filter:::return
BasicFileChooserUI#getFileView(JFileChooser)::: basic file chooser i get file view:::return
BasicFileChooserUI#getDialogTitle(JFileChooser):::Returns the title of this dialog:::dialogTitle->fc->getDialogTitle->if->return->else->if->fc->getDialogType->return->else->if->fc->getDialogType->return->else->return->getApproveButtonText
BasicFileChooserUI#getApproveButtonMnemonic(JFileChooser):::Returns the approve button mnemonic.:::mnemonic->fc->getApproveButtonMnemonic->if->return->else->if->fc->getDialogType->return->else->if->fc->getDialogType->return->else->return
BasicFileChooserUI#getApproveButtonText(JFileChooser)::: basic file chooser i get approve button text:::buttonText->fc->getApproveButtonText->if->return->else->if->fc->getDialogType->return->else->if->fc->getDialogType->return->else->return
BasicFileChooserUI#getNewFolderAction():::Returns a new folder action.:::if->new->NewFolderAction->if->newFolderAction->setEnabled->return
BasicFileChooserUI#getGoHomeAction():::Returns a go home action.:::return
BasicFileChooserUI#getChangeToParentDirectoryAction():::Returns a change to parent directory action.:::return
BasicFileChooserUI#getApproveSelectionAction():::Returns an approve selection action.:::return
BasicFileChooserUI#getCancelSelectionAction():::Returns a cancel selection action.:::return
BasicFileChooserUI#getUpdateAction():::Returns an update action.:::return
BasicFileChooserUI.NewFolderAction#actionPerformed(ActionEvent)::: new folder action action performed:::if->return->fc->getFileChooser->currentDirectory->fc->getCurrentDirectory->if->currentDirectory->exists->JOptionPane->showMessageDialog->return->newFolder->try->fc->getFileSystemView->createNewFolder->if->fc->isMultiSelectionEnabled->fc->new->FileArr->setSelectedFiles->else->fc->setSelectedFile->catch->JOptionPane->showMessageDialog->return->finally->fc->rescanCurrentDirectory
BasicFileChooserUI.GoHomeAction#actionPerformed(ActionEvent)::: go home action action performed:::fc->getFileChooser->fc->getFileSystemView->getHomeDirectory->changeDirectory
BasicFileChooserUI.ChangeToParentDirectoryAction#actionPerformed(ActionEvent)::: change to parent directory action action performed:::getFileChooser->changeToParentDirectory
BasicFileChooserUI.ApproveSelectionAction#actionPerformed(ActionEvent)::: approve selection action action performed:::if->isDirectorySelected->dir->getDirectory->if->try->ShellFolder->getNormalizedFile->catch->finally->changeDirectory->return->chooser->getFileChooser->filename->getFileName->fs->chooser->getFileSystemView->dir->chooser->getCurrentDirectory->if->filename->length->resetGlobFilter->return->selectedFile->selectedFiles->if->if->filename->startsWith->System->getProperty->filename->substring->else->if->filename->equals->System->getProperty->if->chooser->isMultiSelectionEnabled->filename->length->filename->charAt->filename->filename->length->charAt->fList->new->ArrayList<File>->files->filename->filename->length->substring->split->Arrays->sort->children->childIndex->foreach->file->fs->createFileObject->if->file->isAbsolute->if->fs->getFiles->Arrays->sort->for->k->fList->add->if->fList->isEmpty->fList->fList->size->new->FileArr->toArray->resetGlobFilter->else->fs->createFileObject->if->selectedFile->isAbsolute->fs->getChild->currentFilter->chooser->getFileFilter->if->selectedFile->exists->isGlobPattern->selectedFile->getParentFile->changeDirectory->if->new->GlobFilter->try->globFilter->selectedFile->getName->setPattern->if->chooser->setFileFilter->chooser->setFileFilter->return->catch->finally->resetGlobFilter->isDir->selectedFile->isDirectory->isTrav->chooser->isTraversable->isDirSelEnabled->chooser->isDirectorySelectionEnabled->isFileSelEnabled->chooser->isFileSelectionEnabled->isCtrl->e->getModifiers->Toolkit->getDefaultToolkit->getMenuShortcutKeyMask->if->changeDirectory->return->else->if->selectedFile->exists->if->if->chooser->isMultiSelectionEnabled->if->new->FileArr->chooser->setSelectedFiles->chooser->setSelectedFiles->else->chooser->setSelectedFile->chooser->approveSelection->else->if->chooser->isMultiSelectionEnabled->chooser->setSelectedFiles->else->chooser->setSelectedFile->chooser->cancelSelection
BasicFileChooserUI#resetGlobFilter()::: basic file chooser i reset glob filter:::if->chooser->getFileChooser->currentFilter->chooser->getFileFilter->if->currentFilter->equals->chooser->setFileFilter->chooser->removeChoosableFileFilter
BasicFileChooserUI#isGlobPattern(String)::: basic file chooser i is glob pattern:::return->filename->indexOf->filename->indexOf->filename->indexOf->filename->indexOf->filename->indexOf
BasicFileChooserUI.GlobFilter#setPattern(String)::: glob filter set pattern:::gPat->globPattern->toCharArray->rPat->new->charArr->isWin32->inBrackets->j->if->len->if->globPattern->endsWith->for->i->else->for->i->Pattern->new->String->compile
BasicFileChooserUI.GlobFilter#accept(File)::: glob filter accept:::if->return->if->f->isDirectory->return->return->pattern->f->getName->matcher->matches
BasicFileChooserUI.GlobFilter#getDescription()::: glob filter get description:::return
BasicFileChooserUI.CancelSelectionAction#actionPerformed(ActionEvent)::: cancel selection action action performed:::getFileChooser->cancelSelection
BasicFileChooserUI.UpdateAction#actionPerformed(ActionEvent)::: update action action performed:::fc->getFileChooser->fc->fc->getFileSystemView->getDirectoryName->createFileObject->setCurrentDirectory->fc->rescanCurrentDirectory
BasicFileChooserUI#changeDirectory(File)::: basic file chooser i change directory:::fc->getFileChooser->if->FilePane->usesShellFolder->try->shellFolder->ShellFolder->getShellFolder->if->shellFolder->isLink->linkedTo->shellFolder->getLinkLocation->if->if->fc->isTraversable->else->return->else->catch->return->finally->fc->setCurrentDirectory->if->fc->getFileSelectionMode->fc->getFileSystemView->isFileSystem->dir->getAbsolutePath->setFileName
BasicFileChooserUI.AcceptAllFileFilter#accept(File):::Returns true.:::return
BasicFileChooserUI.AcceptAllFileFilter#getDescription()::: accept all file filter get description:::return->UIManager->getString
BasicFileChooserUI.BasicFileView#clearIconCache():::Clears the icon cache.:::new->Hashtable<File,Icon>
BasicFileChooserUI.BasicFileView#getName(File)::: basic file view get name:::fileName->if->getFileChooser->getFileSystemView->getSystemDisplayName->return
BasicFileChooserUI.BasicFileView#getDescription(File)::: basic file view get description:::return->f->getName
BasicFileChooserUI.BasicFileView#getTypeDescription(File)::: basic file view get type description:::type->getFileChooser->getFileSystemView->getSystemTypeDescription->if->if->f->isDirectory->else->return
BasicFileChooserUI.BasicFileView#getCachedIcon(File):::Returns the cached icon for the file.:::return->iconCache->get
BasicFileChooserUI.BasicFileView#cacheIcon(File, Icon):::Caches an icon for a file.:::if->return->iconCache->put
BasicFileChooserUI.BasicFileView#getIcon(File)::: basic file view get icon:::icon->getCachedIcon->if->return->if->fsv->getFileChooser->getFileSystemView->if->fsv->isFloppyDrive->else->if->fsv->isDrive->else->if->fsv->isComputerNode->else->if->f->isDirectory->cacheIcon->return
BasicFileChooserUI.BasicFileView#isHidden(File):::Returns whether or not a file is hidden.:::name->f->getName->if->name->charAt->return->else->return
BasicFileChooserUI.FileTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::values->if->getSelectedValues->else->if->table->rows->table->getSelectedRows->if->new->ObjectArr->for->i->if->return->plainBuf->new->StringBuilder->htmlBuf->new->StringBuilder->htmlBuf->append->foreach->val->obj->toString->plainBuf->append->append->htmlBuf->append->append->append->plainBuf->plainBuf->length->deleteCharAt->htmlBuf->append->return->plainBuf->toString->htmlBuf->toString->new->FileTransferable
BasicFileChooserUI.FileTransferHandler#getSourceActions(JComponent)::: file transfer handler get source actions:::return
BasicFileChooserUI.FileTransferHandler.FileTransferable#getRicherFlavors():::Best format of the file chooser is DataFlavor.javaFileListFlavor.:::flavors->new->DataFlavorArr->return
BasicFileChooserUI.FileTransferHandler.FileTransferable#getRicherData(DataFlavor):::The only richer format supported is the file list flavor:::if->equals->files->new->ArrayList<Object>->foreach->files->add->return->return
BasicFormattedTextFieldUI#createUI(JComponent):::Creates a UI for a JFormattedTextField.:::return->new->BasicFormattedTextFieldUI
BasicFormattedTextFieldUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicGraphicsUtils#drawEtchedRect(Graphics, int, int, int, int, Color, Color, Color, Color):::Draws an etched rectangle.:::oldColor->g->getColor->g->translate->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#getEtchedInsets():::Returns the amount of space taken up by a border drawn by drawEtchedRect():::return
BasicGraphicsUtils#drawGroove(Graphics, int, int, int, int, Color, Color):::Draws a groove.:::oldColor->g->getColor->g->translate->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#getGrooveInsets():::Returns the amount of space taken up by a border drawn by drawGroove():::return
BasicGraphicsUtils#drawBezel(Graphics, int, int, int, int, boolean, boolean, Color, Color, Color, Color):::Draws a bezel.:::oldColor->g->getColor->g->translate->if->g->setColor->g->drawRect->g->setColor->g->drawRect->else->if->drawLoweredBezel->else->if->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#drawLoweredBezel(Graphics, int, int, int, int, Color, Color, Color, Color):::Draws a lowered bezel.:::g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine
BasicGraphicsUtils#drawString(Graphics, String, int, int, int):::Draw a string with the graphics g at location (x,y) just like g.drawString would:::index->if->uc->Character->toUpperCase->lc->Character->toLowerCase->uci->text->indexOf->lci->text->indexOf->if->else->if->else->drawStringUnderlineCharAt
BasicGraphicsUtils#drawStringUnderlineCharAt(Graphics, String, int, int, int):::Draw a string with the graphics g at location (x, y) just like g.drawString would:::SwingUtilities2->drawStringUnderlineCharAt
BasicGraphicsUtils#drawDashedRect(Graphics, int, int, int, int):::Draws dashed rectangle.:::vx->vy->for->for
BasicGraphicsUtils#getPreferredButtonSize(AbstractButton, int):::Returns the preferred size of the button.:::if->b->getComponentCount->return->icon->b->getIcon->text->b->getText->font->b->getFont->fm->b->getFontMetrics->iconR->new->Rectangle->textR->new->Rectangle->viewR->new->Rectangle->SwingUtilities->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->layoutCompoundLabel->r->iconR->union->insets->b->getInsets->return->r->getSize
BasicGraphicsUtils#isLeftToRight(Component)::: basic graphics utils is left to right:::return->c->getComponentOrientation->isLeftToRight
BasicGraphicsUtils#isMenuShortcutKeyDown(InputEvent)::: basic graphics utils is menu shortcut key down:::return->event->getModifiersEx->Toolkit->getDefaultToolkit->getMenuShortcutKeyMaskEx
BasicGraphicsUtils#drawString(JComponent, Graphics2D, String, float, float):::Draws the given string at the specified location using text properties and anti-aliasing hints from the provided component:::SwingUtilities2->drawString
BasicGraphicsUtils#drawStringUnderlineCharAt(JComponent, Graphics2D, String, int, float, float):::Draws the given string at the specified location underlining the specified character:::SwingUtilities2->drawStringUnderlineCharAt
BasicGraphicsUtils#getClippedString(JComponent, FontMetrics, String, int):::Clips the passed in string to the space provided:::return->SwingUtilities2->clipStringIfNecessary
BasicGraphicsUtils#getStringWidth(JComponent, FontMetrics, String):::Returns the width of the passed in string using text properties and anti-aliasing hints from the provided component:::return->SwingUtilities2->stringWidth
BasicHTML#createHTMLView(JComponent, String):::Create an html renderer for the given component and string of html.:::kit->getFactory->doc->kit->c->getFont->c->getForeground->createDefaultDocument->base->c->getClientProperty->if->setBase->r->new->StringReader->try->kit->read->catch->finally->f->kit->getViewFactory->hview->f->doc->getDefaultRootElement->create->v->new->Renderer->return
BasicHTML#getHTMLBaseline(View, int, int):::Returns the baseline for the html renderer.:::if->throw->new->IllegalArgumentException->if->return->view->getView->getBaseline->return
BasicHTML#getBaseline(JComponent, int, int, int, int):::Gets the baseline for the specified component:::view->c->getClientProperty->if->baseline->getHTMLBaseline->if->return->return->return
BasicHTML#getBaseline(View, int, int):::Gets the baseline for the specified View.:::if->hasParagraph->view->setSize->return->new->Rectangle->getBaseline->return
BasicHTML#getBaseline(View, Shape)::: basic l get baseline:::if->view->getViewCount->return->attributes->view->getElement->getAttributes->name->if->attributes->getAttribute->index->if->view->getViewCount->view->getChildAllocation->if->return->child->view->getView->if->rect->if->else->bounds->getBounds->return->child->getAlignment->return->getBaseline
BasicHTML#hasParagraph(View)::: basic l has paragraph:::if->return->if->view->getViewCount->return->attributes->view->getElement->getAttributes->name->if->attributes->getAttribute->index->if->view->getViewCount->return->view->getView->hasParagraph
BasicHTML#isHTMLString(String):::Check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering.:::if->if->s->length->s->charAt->s->charAt->tag->s->substring->return->tag->equalsIgnoreCase->return
BasicHTML#updateRenderer(JComponent, String):::Stash the HTML render for the given text into the client properties of the given JComponent:::value->oldValue->c->getClientProperty->htmlDisabled->c->getClientProperty->if->BasicHTML->isHTMLString->BasicHTML->createHTMLView->if->for->i->oldValue->getViewCount->c->putClientProperty->currentAccessibleNameProperty->c->getClientProperty->previousParsedText->if->try->oldValue->getDocument->oldValue->getDocument->getLength->getText->strip->catch->finally->if->currentAccessibleNameProperty->equals->parsedText->if->try->value->getDocument->value->getDocument->getLength->getText->strip->catch->finally->c->putClientProperty
BasicHTML#getFactory()::: basic l get factory:::if->new->BasicHTMLViewFactory->new->BasicEditorKit->return
BasicHTML.BasicEditorKit#getStyleSheet():::Overriden to return our own slimmed down style sheet.:::if->new->StyleSheet->r->new->StringReader->try->defaultStyles->loadRules->catch->finally->r->close->defaultStyles->super->getStyleSheet->addStyleSheet->return
BasicHTML.BasicEditorKit#createDefaultDocument(Font, Color):::Sets the async policy to flush everything in one chunk, and to not display unknown tags.:::styles->getStyleSheet->ss->new->StyleSheet->ss->addStyleSheet->doc->new->BasicDocument->doc->setAsynchronousLoadPriority->doc->setPreservesUnknownTags->return
BasicHTML.BasicEditorKit#getViewFactory():::Returns the ViewFactory that is used to make sure the Views don't load in the background.:::return
BasicHTML.BasicHTMLViewFactory#create(Element)::: basic view factory create:::view->super->create->if->setLoadsSynchronously->return
BasicHTML.BasicDocument#setFontAndColor(Font, Color):::Sets the default font and default color:::getStyleSheet->displayPropertiesToCSS->addRule
BasicHTML.Renderer#getAttributes():::Fetches the attributes to use when rendering:::return
BasicHTML.Renderer#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::if->return->return->view->getPreferredSpan
BasicHTML.Renderer#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::return->view->getMinimumSpan
BasicHTML.Renderer#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return
BasicHTML.Renderer#preferenceChanged(View, boolean, boolean):::Specifies that a preference has changed:::host->revalidate->host->repaint
BasicHTML.Renderer#getAlignment(int):::Determines the desired alignment for this view along an axis.:::return->view->getAlignment
BasicHTML.Renderer#paint(Graphics, Shape):::Renders the view.:::alloc->allocation->getBounds->view->setSize->view->paint
BasicHTML.Renderer#setParent(View):::Sets the view parent.:::throw->new->Error
BasicHTML.Renderer#getViewCount():::Returns the number of views in this view:::return
BasicHTML.Renderer#getView(int):::Gets the n-th view in this container.:::return
BasicHTML.Renderer#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->view->modelToView
BasicHTML.Renderer#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->view->modelToView
BasicHTML.Renderer#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->view->viewToModel
BasicHTML.Renderer#getDocument():::Returns the document model underlying the view.:::return->view->getDocument
BasicHTML.Renderer#getStartOffset():::Returns the starting offset into the model for this view.:::return->view->getStartOffset
BasicHTML.Renderer#getEndOffset():::Returns the ending offset into the model for this view.:::return->view->getEndOffset
BasicHTML.Renderer#getElement():::Gets the element that this view is mapped to.:::return->view->getElement
BasicHTML.Renderer#setSize(float, float):::Sets the view size.:::view->setSize
BasicHTML.Renderer#getContainer():::Fetches the container hosting the view:::return
BasicHTML.Renderer#getViewFactory():::Fetches the factory to be used for building the various view fragments that make up the view that represents the model:::return
BasicIconFactory#getMenuItemCheckIcon():::Returns a menu item check icon.:::if->new->MenuItemCheckIcon->return
BasicIconFactory#getMenuItemArrowIcon():::Returns a menu item arrow icon.:::if->new->MenuItemArrowIcon->return
BasicIconFactory#getMenuArrowIcon():::Returns a menu arrow icon.:::if->new->MenuArrowIcon->return
BasicIconFactory#getCheckBoxIcon():::Returns a check box icon.:::if->new->CheckBoxIcon->return
BasicIconFactory#getRadioButtonIcon():::Returns a radio button icon.:::if->new->RadioButtonIcon->return
BasicIconFactory#getCheckBoxMenuItemIcon():::Returns a check box menu item icon.:::if->new->CheckBoxMenuItemIcon->return
BasicIconFactory#getRadioButtonMenuItemIcon():::Returns a radio button menu item icon.:::if->new->RadioButtonMenuItemIcon->return
BasicIconFactory#createEmptyFrameIcon():::Returns an empty frame icon.:::if->new->EmptyFrameIcon->return
BasicIconFactory.EmptyFrameIcon#paintIcon(Component, Graphics, int, int)::: empty frame icon paint icon:::
BasicIconFactory.EmptyFrameIcon#getIconWidth()::: empty frame icon get icon width:::return
BasicIconFactory.EmptyFrameIcon#getIconHeight()::: empty frame icon get icon height:::return
BasicIconFactory.CheckBoxIcon#paintIcon(Component, Graphics, int, int)::: check box icon paint icon:::
BasicIconFactory.CheckBoxIcon#getIconWidth()::: check box icon get icon width:::return
BasicIconFactory.CheckBoxIcon#getIconHeight()::: check box icon get icon height:::return
BasicIconFactory.RadioButtonIcon#paintIcon(Component, Graphics, int, int)::: radio button icon paint icon:::
BasicIconFactory.RadioButtonIcon#getIconWidth()::: radio button icon get icon width:::return
BasicIconFactory.RadioButtonIcon#getIconHeight()::: radio button icon get icon height:::return
BasicIconFactory.CheckBoxMenuItemIcon#paintIcon(Component, Graphics, int, int)::: check box menu item icon paint icon:::b->model->b->getModel->isSelected->model->isSelected->if->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->drawLine
BasicIconFactory.CheckBoxMenuItemIcon#getIconWidth()::: check box menu item icon get icon width:::return
BasicIconFactory.CheckBoxMenuItemIcon#getIconHeight()::: check box menu item icon get icon height:::return
BasicIconFactory.RadioButtonMenuItemIcon#paintIcon(Component, Graphics, int, int)::: radio button menu item icon paint icon:::b->model->b->getModel->if->b->isSelected->g->getIconWidth->getIconHeight->fillOval
BasicIconFactory.RadioButtonMenuItemIcon#getIconWidth()::: radio button menu item icon get icon width:::return
BasicIconFactory.RadioButtonMenuItemIcon#getIconHeight()::: radio button menu item icon get icon height:::return
BasicIconFactory.MenuItemCheckIcon#paintIcon(Component, Graphics, int, int)::: menu item check icon paint icon:::
BasicIconFactory.MenuItemCheckIcon#getIconWidth()::: menu item check icon get icon width:::return
BasicIconFactory.MenuItemCheckIcon#getIconHeight()::: menu item check icon get icon height:::return
BasicIconFactory.MenuItemArrowIcon#paintIcon(Component, Graphics, int, int)::: menu item arrow icon paint icon:::
BasicIconFactory.MenuItemArrowIcon#getIconWidth()::: menu item arrow icon get icon width:::return
BasicIconFactory.MenuItemArrowIcon#getIconHeight()::: menu item arrow icon get icon height:::return
BasicIconFactory.MenuArrowIcon#paintIcon(Component, Graphics, int, int)::: menu arrow icon paint icon:::p->new->Polygon->p->addPoint->p->getIconWidth->getIconHeight->addPoint->p->getIconHeight->addPoint->g->fillPolygon
BasicIconFactory.MenuArrowIcon#getIconWidth()::: menu arrow icon get icon width:::return
BasicIconFactory.MenuArrowIcon#getIconHeight()::: menu arrow icon get icon height:::return
BasicInternalFrameTitlePane#installTitlePane():::Installs the title pane.:::installDefaults->installListeners->createActions->enableActions->createActionMap->createLayout->setLayout->assembleSystemMenu->createButtons->addSubComponents->updateProperties
BasicInternalFrameTitlePane#updateProperties()::: basic internal frame title pane update properties:::frame->getClientProperty->putClientProperty->frame->getClientProperty->putClientProperty
BasicInternalFrameTitlePane#addSubComponents():::Adds subcomponents.:::add->add->add->add
BasicInternalFrameTitlePane#createActions():::Creates actions.:::new->MaximizeAction->new->IconifyAction->new->CloseAction->new->RestoreAction->new->MoveAction->new->SizeAction
BasicInternalFrameTitlePane#createActionMap()::: basic internal frame title pane create action map:::map->new->ActionMapUIResource->map->new->ShowSystemMenuAction->put->map->new->ShowSystemMenuAction->put->return
BasicInternalFrameTitlePane#installListeners():::Registers listeners.:::if->createPropertyChangeListener->frame->addPropertyChangeListener
BasicInternalFrameTitlePane#uninstallListeners():::Unregisters listeners.:::frame->removePropertyChangeListener
BasicInternalFrameTitlePane#installDefaults():::Installs default properties.:::UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getFont->setFont->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString
BasicInternalFrameTitlePane#uninstallDefaults():::Uninstalls default properties.:::
BasicInternalFrameTitlePane#createButtons():::Creates buttons.:::new->NoFocusButton->iconButton->addActionListener->if->iconButtonToolTip->length->iconButton->setToolTipText->new->NoFocusButton->maxButton->addActionListener->new->NoFocusButton->closeButton->addActionListener->if->closeButtonToolTip->length->closeButton->setToolTipText->setButtonIcons
BasicInternalFrameTitlePane#setButtonIcons():::Sets the button icons.:::if->frame->isIcon->if->iconButton->setIcon->if->restoreButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->maxButtonToolTip->length->maxButton->setToolTipText->else->if->frame->isMaximum->if->iconButton->setIcon->if->iconButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->restoreButtonToolTip->length->maxButton->setToolTipText->else->if->iconButton->setIcon->if->iconButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->maxButtonToolTip->length->maxButton->setToolTipText->if->closeButton->setIcon
BasicInternalFrameTitlePane#assembleSystemMenu():::Assembles system menu.:::createSystemMenuBar->createSystemMenu->menuBar->add->addSystemMenuItems->enableActions
BasicInternalFrameTitlePane#addSystemMenuItems(JMenu):::Adds system menu items to systemMenu.:::mi->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->new->JSeparator->add->systemMenu->add->mi->getButtonMnemonic->setMnemonic
BasicInternalFrameTitlePane#getButtonMnemonic(String)::: basic internal frame title pane get button mnemonic:::try->return->Integer->UIManager->getString->parseInt->catch->return->finally
BasicInternalFrameTitlePane#createSystemMenu():::Returns a new instance of JMenu.:::return->new->JMenu
BasicInternalFrameTitlePane#createSystemMenuBar():::Returns a new instance of JMenuBar.:::new->SystemMenuBar->menuBar->setBorderPainted->return
BasicInternalFrameTitlePane#showSystemMenu():::Shows system menu.:::windowMenu->doClick
BasicInternalFrameTitlePane#paintComponent(Graphics)::: basic internal frame title pane paint component:::paintTitleBackground->if->frame->getTitle->isSelected->frame->isSelected->f->g->getFont->g->getFont->setFont->if->g->setColor->else->g->setColor->fm->SwingUtilities2->getFontMetrics->baseline->getHeight->fm->getAscent->fm->getLeading->fm->getDescent->titleX->r->new->Rectangle->if->frame->isIconifiable->iconButton->getBounds->else->if->frame->isMaximizable->maxButton->getBounds->else->if->frame->isClosable->closeButton->getBounds->titleW->title->frame->getTitle->if->BasicGraphicsUtils->isLeftToRight->if->frame->getWidth->frame->getInsets->menuBar->getX->menuBar->getWidth->frame->getTitle->getTitle->else->menuBar->getX->SwingUtilities2->stringWidth->SwingUtilities2->drawString->g->setFont
BasicInternalFrameTitlePane#paintTitleBackground(Graphics):::Invoked from paintComponent:::isSelected->frame->isSelected->if->g->setColor->else->g->setColor->g->getWidth->getHeight->fillRect
BasicInternalFrameTitlePane#getTitle(String, FontMetrics, int):::Returns the title.:::return->SwingUtilities2->clipStringIfNecessary
BasicInternalFrameTitlePane#postClosingEvent(JInternalFrame):::Post a WINDOW_CLOSING-like event to the frame, so that it can be treated like a regular Frame.:::e->new->InternalFrameEvent->try->Toolkit->getDefaultToolkit->getSystemEventQueue->postEvent->catch->frame->dispatchEvent->finally
BasicInternalFrameTitlePane#enableActions():::Enables actions.:::restoreAction->frame->isMaximum->frame->isIcon->setEnabled->maximizeAction->frame->isMaximizable->frame->isMaximum->frame->isIcon->frame->isMaximizable->frame->isIcon->setEnabled->iconifyAction->frame->isIconifiable->frame->isIcon->setEnabled->closeAction->frame->isClosable->setEnabled->sizeAction->setEnabled->moveAction->setEnabled
BasicInternalFrameTitlePane#getHandler()::: basic internal frame title pane get handler:::if->new->Handler->return
BasicInternalFrameTitlePane#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicInternalFrameTitlePane#createLayout():::Returns a layout manager.:::return->getHandler
BasicInternalFrameTitlePane.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::prop->evt->getPropertyName->if->repaint->return->if->setButtonIcons->enableActions->return->if->if->evt->getNewValue->add->else->remove->else->if->if->evt->getNewValue->add->else->remove->else->if->if->evt->getNewValue->add->else->remove->enableActions->revalidate->repaint
BasicInternalFrameTitlePane.Handler#addLayoutComponent(String, Component)::: handler add layout component:::
BasicInternalFrameTitlePane.Handler#removeLayoutComponent(Component)::: handler remove layout component:::
BasicInternalFrameTitlePane.Handler#preferredLayoutSize(Container)::: handler preferred layout size:::return->minimumLayoutSize
BasicInternalFrameTitlePane.Handler#minimumLayoutSize(Container)::: handler minimum layout size:::width->if->frame->isClosable->if->frame->isMaximizable->if->frame->isIconifiable->fm->frame->getFont->getFontMetrics->frameTitle->frame->getTitle->title_w->SwingUtilities2->stringWidth->title_length->frameTitle->length->if->subtitle_w->SwingUtilities2->frameTitle->substring->stringWidth->else->icon->frame->getFrameIcon->fontHeight->fm->getHeight->iconHeight->if->Math->icon->getIconHeight->min->height->Math->max->dim->new->Dimension->if->getBorder->insets->getBorder->getBorderInsets->return
BasicInternalFrameTitlePane.Handler#layoutContainer(Container)::: handler layout container:::leftToRight->BasicGraphicsUtils->isLeftToRight->w->getWidth->h->getHeight->x->buttonHeight->closeButton->getIcon->getIconHeight->icon->frame->getFrameIcon->iconHeight->if->icon->getIconHeight->menuBar->setBounds->if->frame->isClosable->closeButton->setBounds->if->frame->isMaximizable->maxButton->setBounds->if->frame->isIconifiable->iconButton->setBounds
BasicInternalFrameTitlePane.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicInternalFrameTitlePane.TitlePaneLayout#addLayoutComponent(String, Component)::: title pane layout add layout component:::getHandler->addLayoutComponent
BasicInternalFrameTitlePane.TitlePaneLayout#removeLayoutComponent(Component)::: title pane layout remove layout component:::getHandler->removeLayoutComponent
BasicInternalFrameTitlePane.TitlePaneLayout#preferredLayoutSize(Container)::: title pane layout preferred layout size:::return->getHandler->preferredLayoutSize
BasicInternalFrameTitlePane.TitlePaneLayout#minimumLayoutSize(Container)::: title pane layout minimum layout size:::return->getHandler->minimumLayoutSize
BasicInternalFrameTitlePane.TitlePaneLayout#layoutContainer(Container)::: title pane layout layout container:::getHandler->layoutContainer
BasicInternalFrameTitlePane.CloseAction#actionPerformed(ActionEvent)::: close action action performed:::if->frame->isClosable->frame->doDefaultCloseAction
BasicInternalFrameTitlePane.MaximizeAction#actionPerformed(ActionEvent)::: maximize action action performed:::if->frame->isMaximizable->if->frame->isMaximum->frame->isIcon->try->frame->setIcon->catch->finally->else->if->frame->isMaximum->try->frame->setMaximum->catch->finally->else->try->frame->setMaximum->catch->finally
BasicInternalFrameTitlePane.IconifyAction#actionPerformed(ActionEvent)::: iconify action action performed:::if->frame->isIconifiable->if->frame->isIcon->try->frame->setIcon->catch->finally->else->try->frame->setIcon->catch->finally
BasicInternalFrameTitlePane.RestoreAction#actionPerformed(ActionEvent)::: restore action action performed:::if->frame->isMaximizable->frame->isMaximum->frame->isIcon->try->frame->setIcon->catch->finally->else->if->frame->isMaximizable->frame->isMaximum->try->frame->setMaximum->catch->finally->else->if->frame->isIconifiable->frame->isIcon->try->frame->setIcon->catch->finally
BasicInternalFrameTitlePane.MoveAction#actionPerformed(ActionEvent)::: move action action performed:::
BasicInternalFrameTitlePane.ShowSystemMenuAction#actionPerformed(ActionEvent)::: show system menu action action performed:::if->windowMenu->doClick->else->windowMenu->setVisible
BasicInternalFrameTitlePane.SizeAction#actionPerformed(ActionEvent)::: size action action performed:::
BasicInternalFrameTitlePane.SystemMenuBar#isFocusTraversable()::: system menu bar is focus traversable:::return
BasicInternalFrameTitlePane.SystemMenuBar#requestFocus()::: system menu bar request focus:::
BasicInternalFrameTitlePane.SystemMenuBar#paint(Graphics)::: system menu bar paint:::icon->frame->getFrameIcon->if->DefaultLookup->frame->getUI->get->if->if->icon->getIconWidth->icon->getIconHeight->img->getImage->img->getScaledInstance->setImage->icon->paintIcon
BasicInternalFrameTitlePane.SystemMenuBar#isOpaque()::: system menu bar is opaque:::return
BasicInternalFrameTitlePane.NoFocusButton#isFocusTraversable()::: no focus button is focus traversable:::return
BasicInternalFrameTitlePane.NoFocusButton#requestFocus()::: no focus button request focus:::
BasicInternalFrameTitlePane.NoFocusButton#getAccessibleContext()::: no focus button get accessible context:::ac->super->getAccessibleContext->if->ac->UIManager->getString->setAccessibleName->return
BasicInternalFrameUI#createUI(JComponent):::Returns a component UI.:::return->new->BasicInternalFrameUI
BasicInternalFrameUI#installUI(JComponent):::Installs the UI.:::installDefaults->installListeners->installComponents->installKeyboardActions->LookAndFeel->installProperty
BasicInternalFrameUI#uninstallUI(JComponent):::Uninstalls the UI.:::if->throw->new->IllegalComponentStateException->uninstallKeyboardActions->uninstallComponents->uninstallListeners->uninstallDefaults->updateFrameCursor
BasicInternalFrameUI#installDefaults():::Installs the defaults.:::frameIcon->frame->getFrameIcon->if->frame->UIManager->getIcon->setFrameIcon->contentPane->frame->getContentPane->if->bg->contentPane->getBackground->if->contentPane->setBackground->frame->createLayoutManager->setLayout->frame->UIManager->getLookAndFeelDefaults->getColor->setBackground->LookAndFeel->installBorder
BasicInternalFrameUI#installKeyboardActions():::Installs the keyboard actions.:::createInternalFrameListener->if->frame->addInternalFrameListener->LazyActionMap->installLazyActionMap
BasicInternalFrameUI#loadActionMap(LazyActionMap)::: basic internal frame i load action map:::map->new->UIAction->put->BasicLookAndFeel->installAudioActionMap
BasicInternalFrameUI#installComponents():::Installs the components.:::createNorthPane->setNorthPane->createSouthPane->setSouthPane->createEastPane->setEastPane->createWestPane->setWestPane
BasicInternalFrameUI#installListeners():::Installs the listeners.:::createBorderListener->createPropertyChangeListener->frame->addPropertyChangeListener->installMouseHandlers->createGlassPaneDispatcher->if->frame->getGlassPane->addMouseListener->frame->getGlassPane->addMouseMotionListener->createComponentListener->if->frame->getParent->frame->getParent->getBounds->if->frame->getParent->frame->getParent->addComponentListener
BasicInternalFrameUI#getWindowFocusListener()::: basic internal frame i get window focus listener:::return->getHandler
BasicInternalFrameUI#cancelResize()::: basic internal frame i cancel resize:::if->if->finishMouseReleased
BasicInternalFrameUI#getHandler()::: basic internal frame i get handler:::if->new->Handler->return
BasicInternalFrameUI#getInputMap(int)::: basic internal frame i get input map:::if->return->createInputMap->return
BasicInternalFrameUI#createInputMap(int)::: basic internal frame i create input map:::if->bindings->DefaultLookup->get->if->return->LookAndFeel->makeComponentInputMap->return
BasicInternalFrameUI#uninstallDefaults():::Uninstalls the defaults.:::frameIcon->frame->getFrameIcon->if->frame->setFrameIcon->frame->setLayout->LookAndFeel->uninstallBorder
BasicInternalFrameUI#uninstallComponents():::Uninstalls the components.:::setNorthPane->setSouthPane->setEastPane->setWestPane->if->titlePane->uninstallDefaults
BasicInternalFrameUI#uninstallListeners():::Uninstalls the listeners.:::if->frame->getParent->frame->getParent->removeComponentListener->if->frame->getGlassPane->removeMouseListener->frame->getGlassPane->removeMouseMotionListener->deinstallMouseHandlers->frame->removePropertyChangeListener
BasicInternalFrameUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::if->frame->removeInternalFrameListener->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicInternalFrameUI#updateFrameCursor()::: basic internal frame i update frame cursor:::if->return->s->frame->getLastCursor->if->Cursor->getPredefinedCursor->frame->setCursor
BasicInternalFrameUI#createLayoutManager():::Creates the layout manager.:::return->getHandler
BasicInternalFrameUI#createPropertyChangeListener():::Creates the property change listener.:::return->getHandler
BasicInternalFrameUI#getPreferredSize(JComponent):::Returns the preferred size.:::if->return->frame->getLayout->preferredLayoutSize->return->new->Dimension
BasicInternalFrameUI#getMinimumSize(JComponent):::Returns the minimum size.:::if->return->frame->getLayout->minimumLayoutSize->return->new->Dimension
BasicInternalFrameUI#getMaximumSize(JComponent):::Returns the maximum size.:::return->new->Dimension
BasicInternalFrameUI#replacePane(JComponent, JComponent):::Installs necessary mouse handlers on newPane and adds it to the frame:::if->deinstallMouseHandlers->frame->remove->if->frame->add->installMouseHandlers
BasicInternalFrameUI#deinstallMouseHandlers(JComponent):::Deinstalls the mouse handlers.:::c->removeMouseListener->c->removeMouseMotionListener
BasicInternalFrameUI#installMouseHandlers(JComponent):::Installs the mouse handlers.:::c->addMouseListener->c->addMouseMotionListener
BasicInternalFrameUI#createNorthPane(JInternalFrame):::Creates the north pane.:::new->BasicInternalFrameTitlePane->return
BasicInternalFrameUI#createSouthPane(JInternalFrame):::Creates the north pane.:::return
BasicInternalFrameUI#createWestPane(JInternalFrame):::Creates the west pane.:::return
BasicInternalFrameUI#createEastPane(JInternalFrame):::Creates the east pane.:::return
BasicInternalFrameUI#createBorderListener(JInternalFrame):::Creates the border listener.:::return->new->BorderListener
BasicInternalFrameUI#createInternalFrameListener():::Creates the internal frame listener.:::getHandler
BasicInternalFrameUI#isKeyBindingRegistered():::Returns whether or no the key binding is registered.:::return
BasicInternalFrameUI#setKeyBindingRegistered(boolean):::Sets the key binding registration.:::
BasicInternalFrameUI#isKeyBindingActive():::Returns whether or no the key binding is active.:::return
BasicInternalFrameUI#setKeyBindingActive(boolean):::Sets the key binding activity.:::
BasicInternalFrameUI#setupMenuOpenKey():::Setup the menu open key.:::map->getInputMap->SwingUtilities->replaceUIInputMap
BasicInternalFrameUI#setupMenuCloseKey():::Setup the menu close key.:::
BasicInternalFrameUI#getNorthPane():::Returns the north pane.:::return
BasicInternalFrameUI#setNorthPane(JComponent):::Sets the north pane.:::if->uninstallListeners->replacePane->if
BasicInternalFrameUI#getSouthPane():::Returns the south pane.:::return
BasicInternalFrameUI#setSouthPane(JComponent):::Sets the south pane.:::
BasicInternalFrameUI#getWestPane():::Returns the west pane.:::return
BasicInternalFrameUI#setWestPane(JComponent):::Sets the west pane.:::
BasicInternalFrameUI#getEastPane():::Returns the east pane.:::return
BasicInternalFrameUI#setEastPane(JComponent):::Sets the east pane.:::
BasicInternalFrameUI.InternalFramePropertyChangeListener#propertyChange(PropertyChangeEvent):::Detects changes in state from the JInternalFrame and handles actions.:::getHandler->propertyChange
BasicInternalFrameUI.InternalFrameLayout#addLayoutComponent(String, Component)::: internal frame layout add layout component:::getHandler->addLayoutComponent
BasicInternalFrameUI.InternalFrameLayout#removeLayoutComponent(Component)::: internal frame layout remove layout component:::getHandler->removeLayoutComponent
BasicInternalFrameUI.InternalFrameLayout#preferredLayoutSize(Container)::: internal frame layout preferred layout size:::return->getHandler->preferredLayoutSize
BasicInternalFrameUI.InternalFrameLayout#minimumLayoutSize(Container)::: internal frame layout minimum layout size:::return->getHandler->minimumLayoutSize
BasicInternalFrameUI.InternalFrameLayout#layoutContainer(Container)::: internal frame layout layout container:::getHandler->layoutContainer
BasicInternalFrameUI#getDesktopManager():::Returns the proper DesktopManager:::if->frame->getDesktopPane->frame->getDesktopPane->getDesktopManager->return->frame->getDesktopPane->getDesktopManager->if->createDesktopManager->return
BasicInternalFrameUI#createDesktopManager():::Creates the desktop manager.:::return->new->DefaultDesktopManager
BasicInternalFrameUI#closeFrame(JInternalFrame):::This method is called when the user wants to close the frame:::BasicLookAndFeel->playSound->getDesktopManager->closeFrame
BasicInternalFrameUI#maximizeFrame(JInternalFrame):::This method is called when the user wants to maximize the frame:::BasicLookAndFeel->playSound->getDesktopManager->maximizeFrame
BasicInternalFrameUI#minimizeFrame(JInternalFrame):::This method is called when the user wants to minimize the frame:::if->f->isIcon->BasicLookAndFeel->playSound->getDesktopManager->minimizeFrame
BasicInternalFrameUI#iconifyFrame(JInternalFrame):::This method is called when the user wants to iconify the frame:::BasicLookAndFeel->playSound->getDesktopManager->iconifyFrame
BasicInternalFrameUI#deiconifyFrame(JInternalFrame):::This method is called when the user wants to deiconify the frame:::if->f->isMaximum->BasicLookAndFeel->playSound->getDesktopManager->deiconifyFrame
BasicInternalFrameUI#activateFrame(JInternalFrame):::This method is called when the frame becomes selected:::getDesktopManager->activateFrame
BasicInternalFrameUI#deactivateFrame(JInternalFrame):::This method is called when the frame is no longer selected:::getDesktopManager->deactivateFrame
BasicInternalFrameUI.BorderListener#mouseClicked(MouseEvent)::: border listener mouse clicked:::if->e->getClickCount->e->getSource->getNorthPane->if->frame->isIconifiable->frame->isIcon->try->frame->setIcon->catch->finally->else->if->frame->isMaximizable->if->frame->isMaximum->try->frame->setMaximum->catch->finally->else->try->frame->setMaximum->catch->finally
BasicInternalFrameUI.BorderListener#finishMouseReleased()::: border listener finish mouse released:::if->return->if->getDesktopManager->endDraggingFrame->else->windowAncestor->SwingUtilities->getWindowAncestor->if->windowAncestor->getWindowFocusListener->removeWindowFocusListener->c->frame->getTopLevelAncestor->if->glassPane->getGlassPane->glassPane->Cursor->getPredefinedCursor->setCursor->glassPane->setVisible->getDesktopManager->endResizingFrame->updateFrameCursor
BasicInternalFrameUI.BorderListener#mouseReleased(MouseEvent)::: border listener mouse released:::finishMouseReleased
BasicInternalFrameUI.BorderListener#mousePressed(MouseEvent)::: border listener mouse pressed:::p->SwingUtilities->e->getSource->e->getX->e->getY->convertPoint->e->getX->e->getY->frame->getBounds->try->frame->setSelected->catch->finally->i->frame->getInsets->ep->new->Point->if->e->getSource->getNorthPane->np->getNorthPane->getLocation->if->e->getSource->getNorthPane->if->frame->getWidth->getDesktopManager->beginDraggingFrame->return->if->frame->isResizable->return->if->e->getSource->e->getSource->getNorthPane->if->if->else->if->frame->getHeight->else->else->if->frame->getWidth->if->else->if->frame->getHeight->else->else->if->if->else->if->frame->getWidth->else->else->if->frame->getHeight->if->else->if->frame->getWidth->else->else->return->s->Cursor->getPredefinedCursor->switch->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->Cursor->getPredefinedCursor->break->c->frame->getTopLevelAncestor->if->glassPane->getGlassPane->glassPane->setVisible->glassPane->setCursor->getDesktopManager->beginResizingFrame->windowAncestor->SwingUtilities->getWindowAncestor->if->windowAncestor->getWindowFocusListener->addWindowFocusListener->return
BasicInternalFrameUI.BorderListener#mouseDragged(MouseEvent)::: border listener mouse dragged:::if->return->p->SwingUtilities->e->getSource->e->getX->e->getY->convertPoint->deltaX->deltaY->min->frame->getMinimumSize->max->frame->getMaximumSize->newX->newY->newW->newH->i->frame->getInsets->if->if->frame->isMaximum->e->getModifiers->return->pWidth->pHeight->s->frame->getParent->getSize->if->if->if->if->getDesktopManager->dragFrame->return->if->frame->isResizable->return->frame->getX->frame->getY->frame->getWidth->frame->getHeight->frame->getParent->getBounds->switch->return->if->else->if->if->break->if->else->if->if->if->else->if->if->break->if->else->if->if->break->if->else->if->if->if->else->if->if->break->if->else->if->if->break->if->else->if->if->if->else->if->if->break->if->else->if->if->break->if->else->if->if->if->else->if->if->break->return->getDesktopManager->resizeFrame
BasicInternalFrameUI.BorderListener#mouseMoved(MouseEvent)::: border listener mouse moved:::if->frame->isResizable->return->if->e->getSource->e->getSource->getNorthPane->i->frame->getInsets->ep->e->getX->e->getY->new->Point->if->e->getSource->getNorthPane->np->getNorthPane->getLocation->if->if->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getHeight->frame->Cursor->getPredefinedCursor->setCursor->else->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getWidth->if->e->getY->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getHeight->frame->Cursor->getPredefinedCursor->setCursor->else->frame->Cursor->getPredefinedCursor->setCursor->else->if->if->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getWidth->frame->Cursor->getPredefinedCursor->setCursor->else->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getHeight->if->frame->Cursor->getPredefinedCursor->setCursor->else->if->frame->getWidth->frame->Cursor->getPredefinedCursor->setCursor->else->frame->Cursor->getPredefinedCursor->setCursor->else->updateFrameCursor->return->updateFrameCursor
BasicInternalFrameUI.BorderListener#mouseEntered(MouseEvent)::: border listener mouse entered:::updateFrameCursor
BasicInternalFrameUI.BorderListener#mouseExited(MouseEvent)::: border listener mouse exited:::updateFrameCursor
BasicInternalFrameUI.ComponentHandler#componentResized(ComponentEvent):::Invoked when a JInternalFrame's parent's size changes.:::getHandler->componentResized
BasicInternalFrameUI.ComponentHandler#componentMoved(ComponentEvent)::: component handler component moved:::getHandler->componentMoved
BasicInternalFrameUI.ComponentHandler#componentShown(ComponentEvent)::: component handler component shown:::getHandler->componentShown
BasicInternalFrameUI.ComponentHandler#componentHidden(ComponentEvent)::: component handler component hidden:::getHandler->componentHidden
BasicInternalFrameUI#createComponentListener():::Creates a component listener.:::return->getHandler
BasicInternalFrameUI.GlassPaneDispatcher#mousePressed(MouseEvent)::: glass pane dispatcher mouse pressed:::getHandler->mousePressed
BasicInternalFrameUI.GlassPaneDispatcher#mouseEntered(MouseEvent)::: glass pane dispatcher mouse entered:::getHandler->mouseEntered
BasicInternalFrameUI.GlassPaneDispatcher#mouseMoved(MouseEvent)::: glass pane dispatcher mouse moved:::getHandler->mouseMoved
BasicInternalFrameUI.GlassPaneDispatcher#mouseExited(MouseEvent)::: glass pane dispatcher mouse exited:::getHandler->mouseExited
BasicInternalFrameUI.GlassPaneDispatcher#mouseClicked(MouseEvent)::: glass pane dispatcher mouse clicked:::getHandler->mouseClicked
BasicInternalFrameUI.GlassPaneDispatcher#mouseReleased(MouseEvent)::: glass pane dispatcher mouse released:::getHandler->mouseReleased
BasicInternalFrameUI.GlassPaneDispatcher#mouseDragged(MouseEvent)::: glass pane dispatcher mouse dragged:::getHandler->mouseDragged
BasicInternalFrameUI#createGlassPaneDispatcher():::Creates a GlassPaneDispatcher.:::return
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameClosing(InternalFrameEvent)::: basic internal frame listener internal frame closing:::getHandler->internalFrameClosing
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameClosed(InternalFrameEvent)::: basic internal frame listener internal frame closed:::getHandler->internalFrameClosed
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameOpened(InternalFrameEvent)::: basic internal frame listener internal frame opened:::getHandler->internalFrameOpened
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameIconified(InternalFrameEvent)::: basic internal frame listener internal frame iconified:::getHandler->internalFrameIconified
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameDeiconified(InternalFrameEvent)::: basic internal frame listener internal frame deiconified:::getHandler->internalFrameDeiconified
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameActivated(InternalFrameEvent)::: basic internal frame listener internal frame activated:::getHandler->internalFrameActivated
BasicInternalFrameUI.BasicInternalFrameListener#internalFrameDeactivated(InternalFrameEvent)::: basic internal frame listener internal frame deactivated:::getHandler->internalFrameDeactivated
BasicInternalFrameUI.Handler#windowGainedFocus(WindowEvent)::: handler window gained focus:::
BasicInternalFrameUI.Handler#windowLostFocus(WindowEvent)::: handler window lost focus:::cancelResize
BasicInternalFrameUI.Handler#componentResized(ComponentEvent):::Invoked when a JInternalFrame's parent's size changes.:::parentNewBounds->e->getSource->getBounds->icon->if->frame->getDesktopIcon->if->frame->isMaximum->frame->setBounds->if->iconBounds->icon->getBounds->y->icon->setBounds->if->parentBounds->equals->if->frame->validate
BasicInternalFrameUI.Handler#componentMoved(ComponentEvent)::: handler component moved:::
BasicInternalFrameUI.Handler#componentShown(ComponentEvent)::: handler component shown:::
BasicInternalFrameUI.Handler#componentHidden(ComponentEvent)::: handler component hidden:::
BasicInternalFrameUI.Handler#internalFrameClosed(InternalFrameEvent)::: handler internal frame closed:::frame->getHandler->removeInternalFrameListener
BasicInternalFrameUI.Handler#internalFrameActivated(InternalFrameEvent)::: handler internal frame activated:::if->isKeyBindingRegistered->setKeyBindingRegistered->setupMenuOpenKey->setupMenuCloseKey->if->isKeyBindingRegistered->setKeyBindingActive
BasicInternalFrameUI.Handler#internalFrameDeactivated(InternalFrameEvent)::: handler internal frame deactivated:::setKeyBindingActive
BasicInternalFrameUI.Handler#internalFrameClosing(InternalFrameEvent)::: handler internal frame closing:::
BasicInternalFrameUI.Handler#internalFrameOpened(InternalFrameEvent)::: handler internal frame opened:::
BasicInternalFrameUI.Handler#internalFrameIconified(InternalFrameEvent)::: handler internal frame iconified:::
BasicInternalFrameUI.Handler#internalFrameDeiconified(InternalFrameEvent)::: handler internal frame deiconified:::
BasicInternalFrameUI.Handler#addLayoutComponent(String, Component)::: handler add layout component:::
BasicInternalFrameUI.Handler#removeLayoutComponent(Component)::: handler remove layout component:::
BasicInternalFrameUI.Handler#preferredLayoutSize(Container)::: handler preferred layout size:::result->i->frame->getInsets->frame->getRootPane->getPreferredSize->new->Dimension->if->getNorthPane->d->getNorthPane->getPreferredSize->Math->max->if->getSouthPane->d->getSouthPane->getPreferredSize->Math->max->if->getEastPane->d->getEastPane->getPreferredSize->Math->max->if->getWestPane->d->getWestPane->getPreferredSize->Math->max->return
BasicInternalFrameUI.Handler#minimumLayoutSize(Container)::: handler minimum layout size:::result->new->Dimension->if->getNorthPane->getNorthPane->getNorthPane->getMinimumSize->new->Dimension->i->frame->getInsets->return
BasicInternalFrameUI.Handler#layoutContainer(Container)::: handler layout container:::i->frame->getInsets->cx->cy->cw->ch->frame->getWidth->frame->getHeight->if->getNorthPane->size->getNorthPane->getPreferredSize->if->DefaultLookup->getBoolean->getNorthPane->frame->getWidth->setBounds->else->getNorthPane->setBounds->if->getSouthPane->size->getSouthPane->getPreferredSize->getSouthPane->frame->getHeight->setBounds->if->getWestPane->size->getWestPane->getPreferredSize->getWestPane->setBounds->if->getEastPane->size->getEastPane->getPreferredSize->getEastPane->setBounds->if->frame->getRootPane->frame->getRootPane->setBounds
BasicInternalFrameUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::
BasicInternalFrameUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicInternalFrameUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicInternalFrameUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicInternalFrameUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicInternalFrameUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::
BasicInternalFrameUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::
BasicInternalFrameUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::prop->evt->getPropertyName->f->evt->getSource->newValue->evt->getNewValue->oldValue->evt->getOldValue->if->if->cancelResize->if->frame->getParent->frame->getParent->removeComponentListener->closeFrame->else->if->if->maximizeFrame->else->minimizeFrame->else->if->if->iconifyFrame->else->deiconifyFrame->else->if->if->activateFrame->else->if->deactivateFrame->else->if->if->cancelResize->if->frame->getParent->f->getParent->getBounds->else->if->frame->getParent->frame->isIcon->value->frame->getClientProperty->if->equals->iconifyFrame->if->frame->getParent->f->getParent->addComponentListener->if->f->isMaximum->maximizeFrame->else->if->dim->frame->getMinimumSize->frame_dim->frame->getSize->if->frame->setSize
BasicLabelUI#loadActionMap(LazyActionMap)::: basic label i load action map:::map->new->Actions->put->map->new->Actions->put
BasicLabelUI#layoutCL(JLabel, FontMetrics, String, Icon, Rectangle, Rectangle, Rectangle):::Forwards the call to SwingUtilities.layoutCompoundLabel():::return->SwingUtilities->label->getVerticalAlignment->label->getHorizontalAlignment->label->getVerticalTextPosition->label->getHorizontalTextPosition->label->getIconTextGap->layoutCompoundLabel
BasicLabelUI#paintEnabledText(JLabel, Graphics, String, int, int):::Paint clippedText at textX, textY with the labels foreground color.:::mnemIndex->l->getDisplayedMnemonicIndex->g->l->getForeground->setColor->SwingUtilities2->drawStringUnderlineCharAt
BasicLabelUI#paintDisabledText(JLabel, Graphics, String, int, int):::Paint clippedText at textX, textY with background.lighter() and then shifted down and to the right by one pixel with background.darker().:::accChar->l->getDisplayedMnemonicIndex->background->l->getBackground->g->background->brighter->setColor->SwingUtilities2->drawStringUnderlineCharAt->g->background->darker->setColor->SwingUtilities2->drawStringUnderlineCharAt
BasicLabelUI#paint(Graphics, JComponent):::Paints the label text with the foreground color, if the label is opaque then paints the entire background with the background color:::label->text->label->getText->icon->label->isEnabled->label->getIcon->label->getDisabledIcon->if->return->fm->SwingUtilities2->getFontMetrics->clippedText->c->getWidth->c->getHeight->layout->if->icon->paintIcon->if->v->c->getClientProperty->if->v->paint->else->textX->textY->fm->getAscent->if->label->isEnabled->paintEnabledText->else->paintDisabledText
BasicLabelUI#layout(JLabel, FontMetrics, int, int)::: basic label i layout:::insets->label->getInsets->text->label->getText->icon->label->isEnabled->label->getIcon->label->getDisabledIcon->paintViewR->new->Rectangle->return->layoutCL
BasicLabelUI#getPreferredSize(JComponent)::: basic label i get preferred size:::label->text->label->getText->icon->label->isEnabled->label->getIcon->label->getDisabledIcon->insets->label->getInsets->font->label->getFont->dx->dy->if->return->new->Dimension->else->if->return->icon->getIconWidth->icon->getIconHeight->new->Dimension->else->fm->label->getFontMetrics->iconR->new->Rectangle->textR->new->Rectangle->viewR->new->Rectangle->layoutCL->x1->Math->min->x2->Math->max->y1->Math->min->y2->Math->max->rv->new->Dimension->return
BasicLabelUI#getMinimumSize(JComponent)::: basic label i get minimum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getPreferredSpan->v->getMinimumSpan->return
BasicLabelUI#getMaximumSize(JComponent)::: basic label i get maximum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getMaximumSpan->v->getPreferredSpan->return
BasicLabelUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->label->text->label->getText->if->equals->label->getFont->return->fm->label->label->getFont->getFontMetrics->layout->return->BasicHTML->fm->getAscent->getBaseline
BasicLabelUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->c->getClientProperty->return->switch->getVerticalAlignment->return->return->return->return
BasicLabelUI#installUI(JComponent)::: basic label i install i:::installDefaults->installComponents->installListeners->installKeyboardActions
BasicLabelUI#uninstallUI(JComponent)::: basic label i uninstall i:::uninstallDefaults->uninstallComponents->uninstallListeners->uninstallKeyboardActions
BasicLabelUI#installDefaults(JLabel):::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicLabelUI#installListeners(JLabel):::Registers listeners.:::c->addPropertyChangeListener
BasicLabelUI#installComponents(JLabel):::Registers components.:::BasicHTML->c->getText->updateRenderer->c->setInheritsPopupMenu
BasicLabelUI#installKeyboardActions(JLabel):::Registers keyboard actions.:::dka->l->getDisplayedMnemonic->lf->l->getLabelFor->if->LazyActionMap->installLazyActionMap->inputMap->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->inputMap->clear->inputMap->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->inputMap->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->else->inputMap->SwingUtilities->getUIInputMap->if->inputMap->clear
BasicLabelUI#uninstallDefaults(JLabel):::Uninstalls default properties.:::
BasicLabelUI#uninstallListeners(JLabel):::Unregisters listeners.:::c->removePropertyChangeListener
BasicLabelUI#uninstallComponents(JLabel):::Unregisters components.:::BasicHTML->updateRenderer
BasicLabelUI#uninstallKeyboardActions(JLabel):::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicLabelUI#createUI(JComponent):::Returns an instance of BasicLabelUI.:::if->System->getSecurityManager->appContext->AppContext->getAppContext->safeBasicLabelUI->appContext->get->if->new->BasicLabelUI->appContext->put->return->return
BasicLabelUI#propertyChange(PropertyChangeEvent)::: basic label i property change:::name->e->getPropertyName->if->SwingUtilities2->isScaleChanged->lbl->e->getSource->text->lbl->getText->BasicHTML->updateRenderer->else->if->e->getSource->installKeyboardActions
BasicLabelUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::label->e->getSource->key->getName->if->doPress->else->if->e->getActionCommand->doRelease
BasicLabelUI.Actions#doPress(JLabel)::: actions do press:::labelFor->label->getLabelFor->if->labelFor->isEnabled->inputMap->SwingUtilities->getUIInputMap->if->new->InputMapUIResource->SwingUtilities->replaceUIInputMap->dka->label->getDisplayedMnemonic->BasicLookAndFeel->getFocusAcceleratorKeyMask->putOnRelease->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->putOnRelease->putOnRelease->putOnRelease->label->requestFocus
BasicLabelUI.Actions#doRelease(JLabel, boolean)::: actions do release:::labelFor->label->getLabelFor->if->labelFor->isEnabled->if->label->hasFocus->inputMap->SwingUtilities->getUIInputMap->if->dka->label->getDisplayedMnemonic->BasicLookAndFeel->getFocusAcceleratorKeyMask->removeOnRelease->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->removeOnRelease->removeOnRelease->removeOnRelease->SwingUtilities->getUIInputMap->if->new->InputMapUIResource->SwingUtilities->replaceUIInputMap->dka->label->getDisplayedMnemonic->if->putOnRelease->else->BasicLookAndFeel->getFocusAcceleratorKeyMask->putOnRelease->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->putOnRelease->putOnRelease->if->isFocusCycleRoot->labelFor->requestFocus->else->SwingUtilities2->compositeRequestFocus->else->inputMap->SwingUtilities->getUIInputMap->dka->label->getDisplayedMnemonic->if->if->BasicLookAndFeel->getFocusAcceleratorKeyMask->removeOnRelease->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->removeOnRelease->removeOnRelease->else->removeOnRelease
BasicLabelUI.Actions#putOnRelease(InputMap, int, int)::: actions put on release:::inputMap->KeyStroke->getKeyStroke->put
BasicLabelUI.Actions#removeOnRelease(InputMap, int, int)::: actions remove on release:::inputMap->KeyStroke->getKeyStroke->remove
BasicListUI#loadActionMap(LazyActionMap)::: basic list i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->map->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->map->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put
BasicListUI#paintCell(Graphics, int, Rectangle, ListCellRenderer, ListModel, ListSelectionModel, int):::Paint one List cell: compute the relevant state, get the "rubber stamp" cell renderer component, and then use the CellRendererPane to paint it:::value->dataModel->getElementAt->cellHasFocus->list->hasFocus->isSelected->selModel->isSelectedIndex->rendererComponent->cellRenderer->getListCellRendererComponent->cx->cy->cw->ch->if->w->Math->rendererComponent->getPreferredSize->min->if->rendererPane->paintComponent
BasicListUI#paint(Graphics, JComponent):::Paint the rows that intersect the Graphics objects clipRect:::clip->g->getClip->paintImpl->g->setClip->paintDropLine
BasicListUI#paintImpl(Graphics, JComponent)::: basic list i paint impl:::switch->if->list->getHeight->redrawList->break->if->list->getWidth->redrawList->break->break->maybeUpdateLayoutState->renderer->list->getCellRenderer->dataModel->list->getModel->selModel->list->getSelectionModel->size->if->dataModel->getSize->return->paintBounds->g->getClipBounds->startColumn->endColumn->if->c->getComponentOrientation->isLeftToRight->convertLocationToColumn->convertLocationToColumn->else->convertLocationToColumn->convertLocationToColumn->maxY->leadIndex->list->getLeadSelectionIndex->adjustIndex->rowIncrement->for->colCounter->rendererPane->removeAll
BasicListUI#paintDropLine(Graphics)::: basic list i paint drop line:::loc->list->getDropLocation->if->loc->isInsert->return->c->DefaultLookup->getColor->if->g->setColor->rect->getDropLineRect->g->fillRect
BasicListUI#getDropLineRect(JList.DropLocation)::: basic list i get drop line rect:::size->list->getModel->getSize->if->insets->list->getInsets->if->if->return->new->Rectangle->else->return->list->getWidth->new->Rectangle->else->return->list->getWidth->new->Rectangle->rect->index->loc->getIndex->decr->if->if->else->if->convertModelToRow->convertModelToRow->prev->getCellBounds->me->getCellBounds->p->loc->getDropPoint->if->Point2D->distance->Point2D->distance->else->Point2D->distance->Point2D->distance->if->getCellBounds->if->else->else->getCellBounds->if->if->list->getWidth->list->getWidth->else->if->else->if->if->getCellBounds->else->if->convertModelToColumn->convertModelToColumn->prev->getCellBounds->me->getCellBounds->p->loc->getDropPoint->if->Point2D->distance->Point2D->distance->getCellBounds->else->getCellBounds->else->getCellBounds->if->list->getHeight->list->getHeight->else->if->getCellBounds->else->getCellBounds->if->list->getHeight->list->getHeight->return
BasicListUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->rowHeight->list->getFixedCellHeight->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->lcr->UIManager->get->if->new->DefaultListCellRenderer->lcr->getListCellRendererComponent->lafDefaults->put->renderer->list->getFont->setFont->if->renderer->getPreferredSize->return->renderer->getBaseline->list->getInsets
BasicListUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicListUI#getPreferredSize(JComponent):::The preferredSize of the list depends upon the layout orientation:::maybeUpdateLayoutState->lastRow->list->getModel->getSize->if->return->new->Dimension->insets->list->getInsets->width->height->if->else->bounds->getCellBounds->if->else->return->new->Dimension
BasicListUI#selectPreviousIndex():::Selected the previous row and force it to be visible.:::s->list->getSelectedIndex->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicListUI#selectNextIndex():::Selected the previous row and force it to be visible.:::s->list->getSelectedIndex->if->list->getModel->getSize->list->setSelectedIndex->list->ensureIndexIsVisible
BasicListUI#installKeyboardActions():::Registers the keyboard bindings on the JList that the BasicListUI is associated with:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicListUI#getInputMap(int)::: basic list i get input map:::if->keyMap->DefaultLookup->get->rtlKeyMap->if->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicListUI#uninstallKeyboardActions():::Unregisters keyboard actions installed from installKeyboardActions:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicListUI#installListeners():::Creates and installs the listeners for the JList, its model, and its selectionModel:::th->list->getTransferHandler->if->list->setTransferHandler->if->list->getDropTarget->list->setDropTarget->createFocusListener->createMouseInputListener->createPropertyChangeListener->createListSelectionListener->createListDataListener->list->addFocusListener->list->addMouseListener->list->addMouseMotionListener->list->addPropertyChangeListener->list->getHandler->addKeyListener->model->list->getModel->if->model->addListDataListener->selectionModel->list->getSelectionModel->if->selectionModel->addListSelectionListener
BasicListUI#uninstallListeners():::Removes the listeners from the JList, its model, and its selectionModel:::list->removeFocusListener->list->removeMouseListener->list->removeMouseMotionListener->list->removePropertyChangeListener->list->getHandler->removeKeyListener->model->list->getModel->if->model->removeListDataListener->selectionModel->list->getSelectionModel->if->selectionModel->removeListSelectionListener
BasicListUI#installDefaults():::Initializes list properties such as font, foreground, and background, and adds the CellRendererPane:::list->setLayout->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->if->list->getCellRenderer->tmp->UIManager->get->list->setCellRenderer->sbg->list->getSelectionBackground->if->list->UIManager->getColor->setSelectionBackground->sfg->list->getSelectionForeground->if->list->UIManager->getColor->setSelectionForeground->l->UIManager->get->l->longValue->updateIsFileList
BasicListUI#updateIsFileList()::: basic list i update is file list:::b->list->getClientProperty->equals->if->oldFont->list->getFont->if->newFont->UIManager->getFont->if->list->setFont
BasicListUI#uninstallDefaults():::Sets the list properties that have not been explicitly overridden to null:::LookAndFeel->uninstallBorder->if->list->getFont->list->setFont->if->list->getForeground->list->setForeground->if->list->getBackground->list->setBackground->if->list->getSelectionBackground->list->setSelectionBackground->if->list->getSelectionForeground->list->setSelectionForeground->if->list->getCellRenderer->list->setCellRenderer->if->list->getTransferHandler->list->setTransferHandler
BasicListUI#installUI(JComponent):::Initializes this.list by calling installDefaults(), installListeners(), and installKeyboardActions() in order.:::tmp->list->getLayoutOrientation->new->CellRendererPane->list->add->list->getComponentOrientation->isLeftToRight->installDefaults->installListeners->installKeyboardActions
BasicListUI#uninstallUI(JComponent):::Uninitializes this.list by calling uninstallListeners(), uninstallKeyboardActions(), and uninstallDefaults() in order:::uninstallListeners->uninstallDefaults->uninstallKeyboardActions->list->remove
BasicListUI#createUI(JComponent):::Returns a new instance of BasicListUI:::return->new->BasicListUI
BasicListUI#locationToIndex(JList, Point)::: basic list i location to index:::maybeUpdateLayoutState->return->convertLocationToModel
BasicListUI#indexToLocation(JList, int)::: basic list i index to location:::maybeUpdateLayoutState->rect->getCellBounds->if->return->new->Point->return
BasicListUI#getCellBounds(JList, int, int)::: basic list i get cell bounds:::maybeUpdateLayoutState->minIndex->Math->min->maxIndex->Math->max->if->list->getModel->getSize->return->minBounds->getCellBounds->if->return->if->return->maxBounds->getCellBounds->if->if->minRow->convertModelToRow->maxRow->convertModelToRow->if->list->getWidth->else->if->list->getHeight->minBounds->add->return
BasicListUI#getCellBounds(JList, int):::Gets the bounds of the specified model index, returning the resulting bounds, or null if index is not valid.:::maybeUpdateLayoutState->row->convertModelToRow->column->convertModelToColumn->if->return->insets->list->getInsets->x->w->y->h->switch->if->else->list->getWidth->break->if->else->if->else->for->i->list->getWidth->getRowHeight->break->return->new->Rectangle
BasicListUI#getRowHeight(int):::Returns the height of the specified row based on the current layout.:::return->getHeight
BasicListUI#convertYToRow(int):::Convert the JList relative coordinate to the row that contains it, based on the current layout:::return->convertLocationToRow
BasicListUI#convertRowToY(int):::Return the JList relative Y coordinate of the origin of the specified row or -1 if row isn't valid.:::if->getRowCount->return->bounds->getCellBounds->return
BasicListUI#getHeight(int, int):::Returns the height of the cell at the passed in location.:::if->return->if->return->if->list->getModel->getSize->return->return
BasicListUI#convertLocationToRow(int, int, boolean):::Returns the row at location x/y.:::size->list->getModel->getSize->if->return->insets->list->getInsets->if->row->if->if->else->if->return->else->if->return->else->y->row->if->return->i->for->return
BasicListUI#convertLocationToRowInColumn(int, int):::Returns the closest row that starts at the specified y-location in the passed in column.:::x->if->if->else->list->getWidth->list->getInsets->return->convertLocationToRow
BasicListUI#convertLocationToModel(int, int):::Returns the closest location to the model index of the passed in location.:::row->convertLocationToRow->column->convertLocationToColumn->if->return->getModelIndex->return
BasicListUI#getRowCount(int):::Returns the number of rows in the given column.:::if->return->if->return->list->getModel->getSize->if->return->if->if->return->return->list->getModel->getSize->diff->list->getModel->getSize->if->return->Math->max->return
BasicListUI#getModelIndex(int, int):::Returns the model index for the specified display location:::switch->return->Math->list->getModel->getSize->Math->min->min->return->Math->list->getModel->getSize->min->return
BasicListUI#convertLocationToColumn(int, int):::Returns the closest column to the passed in location.:::if->if->return->insets->list->getInsets->col->if->else->list->getWidth->if->return->else->if->return->return->return
BasicListUI#convertModelToRow(int):::Returns the row that the model index index will be displayed in..:::size->list->getModel->getSize->if->return->if->if->return->return->return
BasicListUI#convertModelToColumn(int):::Returns the column that the model index index will be displayed in.:::size->list->getModel->getSize->if->return->if->if->return->return->return
BasicListUI#maybeUpdateLayoutState():::If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset updateLayoutStateNeeded:::if->updateLayoutState
BasicListUI#updateLayoutState():::Recompute the value of cellHeight or cellHeights based and cellWidth, based on the current font and the current values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.:::fixedCellHeight->list->getFixedCellHeight->fixedCellWidth->list->getFixedCellWidth->if->else->list->getModel->getSize->new->intArr->if->dataModel->list->getModel->dataModelSize->dataModel->getSize->renderer->list->getCellRenderer->if->for->index->else->if->if->new->intArr->for->index->if->updateHorizontalLayoutState
BasicListUI#updateHorizontalLayoutState(int, int):::Invoked when the list is layed out horizontally to determine how many columns to create:::visRows->list->getVisibleRowCount->dataModelSize->list->getModel->getSize->insets->list->getInsets->list->getHeight->list->getWidth->if->return->height->if->else->maxHeight->if->for->counter->if->Math->max->if->if->if->else->if->Math->max->Math->max->if->else->if->Math->max->if
BasicListUI#getHandler()::: basic list i get handler:::if->new->Handler->return
BasicListUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::getHandler->mouseClicked
BasicListUI.MouseInputHandler#mouseEntered(MouseEvent)::: mouse input handler mouse entered:::getHandler->mouseEntered
BasicListUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::getHandler->mouseExited
BasicListUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::getHandler->mousePressed
BasicListUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::getHandler->mouseDragged
BasicListUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::getHandler->mouseMoved
BasicListUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::getHandler->mouseReleased
BasicListUI#createMouseInputListener():::Creates a delegate that implements MouseInputListener:::return->getHandler
BasicListUI.FocusHandler#repaintCellFocus():::Repaints focused cells.:::getHandler->repaintCellFocus
BasicListUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicListUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicListUI#createFocusListener():::Returns an instance of FocusListener.:::return->getHandler
BasicListUI.ListSelectionHandler#valueChanged(ListSelectionEvent)::: list selection handler value changed:::getHandler->valueChanged
BasicListUI#createListSelectionListener():::Creates an instance of ListSelectionHandler that's added to the JLists by selectionModel as needed:::return->getHandler
BasicListUI#redrawList()::: basic list i redraw list:::list->revalidate->list->repaint
BasicListUI.ListDataHandler#intervalAdded(ListDataEvent)::: list data handler interval added:::getHandler->intervalAdded
BasicListUI.ListDataHandler#intervalRemoved(ListDataEvent)::: list data handler interval removed:::getHandler->intervalRemoved
BasicListUI.ListDataHandler#contentsChanged(ListDataEvent)::: list data handler contents changed:::getHandler->contentsChanged
BasicListUI#createListDataListener():::Creates an instance of ListDataListener that's added to the JLists by model as needed:::return->getHandler
BasicListUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicListUI#createPropertyChangeListener():::Creates an instance of PropertyChangeHandler that's added to the JList by installUI():::return->getHandler
BasicListUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::name->getName->list->e->getSource->ui->BasicLookAndFeel->list->getUI->getUIOfType->if->getNextColumnIndex->changeSelection->else->if->getNextColumnIndex->changeSelection->else->if->getNextColumnIndex->changeSelection->else->if->getNextColumnIndex->changeSelection->else->if->getNextColumnIndex->changeSelection->else->if->getNextColumnIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->getNextIndex->changeSelection->else->if->changeSelection->else->if->changeSelection->else->if->changeSelection->else->if->list->getModel->getSize->changeSelection->else->if->list->getModel->getSize->changeSelection->else->if->list->getModel->getSize->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->getNextPageIndex->changeSelection->else->if->selectAll->else->if->clearSelection->else->if->index->list->getSelectionModel->getLeadSelectionIndex->adjustIndex->if->list->isSelectedIndex->oldAnchor->list->getSelectionModel->getAnchorSelectionIndex->list->setValueIsAdjusting->list->addSelectionInterval->list->getSelectionModel->setAnchorSelectionIndex->list->setValueIsAdjusting->else->if->index->list->getSelectionModel->getLeadSelectionIndex->adjustIndex->if->list->isSelectedIndex->list->removeSelectionInterval->else->list->addSelectionInterval->else->if->list->getSelectionModel->getLeadSelectionIndex->adjustIndex->changeSelection->else->if->list->getSelectionModel->getLeadSelectionIndex->adjustIndex->changeSelection
BasicListUI.Actions#accept(Object)::: actions accept:::name->getName->if->return->getSelectionModel->return
BasicListUI.Actions#clearSelection(JList)::: actions clear selection:::list->clearSelection
BasicListUI.Actions#selectAll(JList)::: actions select all:::size->list->getModel->getSize->if->lsm->list->getSelectionModel->lead->lsm->getLeadSelectionIndex->adjustIndex->if->lsm->getSelectionMode->if->min->list->getMinSelectionIndex->adjustIndex->list->setSelectionInterval->list->ensureIndexIsVisible->else->list->setValueIsAdjusting->anchor->lsm->getAnchorSelectionIndex->adjustIndex->list->setSelectionInterval->SwingUtilities2->setLeadAnchorWithoutSelection->list->setValueIsAdjusting
BasicListUI.Actions#getNextPageIndex(JList, int)::: actions get next page index:::if->list->getModel->getSize->return->index->visRect->list->getVisibleRect->lsm->list->getSelectionModel->lead->lsm->getLeadSelectionIndex->adjustIndex->leadRect->new->Rectangle->list->getCellBounds->if->return->if->list->getLayoutOrientation->list->getVisibleRowCount->if->list->getComponentOrientation->isLeftToRight->if->p->new->Point->list->locationToIndex->if->return->cellBounds->list->getCellBounds->if->visRect->intersects->list->locationToIndex->if->return->list->getCellBounds->if->list->locationToIndex->else->p->new->Point->list->locationToIndex->if->return->cellBounds->list->getCellBounds->if->visRect->intersects->list->locationToIndex->if->return->list->getCellBounds->if->list->locationToIndex->else->if->p->new->Point->list->locationToIndex->if->list->locationToIndex->if->return->cellBounds->list->getCellBounds->if->list->locationToIndex->if->return->list->getCellBounds->if->list->locationToIndex->else->p->new->Point->list->locationToIndex->if->return->cellBounds->list->getCellBounds->if->list->locationToIndex->if->return->list->getCellBounds->Math->max->if->list->locationToIndex->if->return->list->getCellBounds->if->list->locationToIndex->if->return->list->getCellBounds->if->list->locationToIndex->return
BasicListUI.Actions#changeSelection(JList, int, int, int)::: actions change selection:::if->list->getModel->getSize->lsm->list->getSelectionModel->if->list->getSelectionMode->adjustScrollPositionIfNecessary->if->anchor->lsm->getAnchorSelectionIndex->adjustIndex->if->list->setSelectionInterval->else->if->list->setSelectedIndex->else->moveLeadSelectionIndex
BasicListUI.Actions#adjustScrollPositionIfNecessary(JList, int, int):::When scroll down makes selected index the last completely visible index:::if->return->cellBounds->list->getCellBounds->visRect->list->getVisibleRect->if->visRect->contains->if->list->getLayoutOrientation->list->getVisibleRowCount->if->list->getComponentOrientation->isLeftToRight->if->x->Math->max->startIndex->list->new->Point->locationToIndex->if->return->startRect->list->getCellBounds->if->list->startRect->getLocation->locationToIndex->if->return->list->getCellBounds->if->else->if->x->rightIndex->list->new->Point->locationToIndex->if->return->rightRect->list->getCellBounds->if->if->Math->max->else->Math->max->Math->min->else->if->y->Math->max->startIndex->list->new->Point->locationToIndex->if->return->startRect->list->getCellBounds->if->list->startRect->getLocation->locationToIndex->if->return->list->getCellBounds->if->else->Math->min->if->list->scrollRectToVisible
BasicListUI.Actions#getNextColumnIndex(JList, BasicListUI, int)::: actions get next column index:::if->list->getLayoutOrientation->index->list->getLeadSelectionIndex->adjustIndex->size->list->getModel->getSize->if->return->else->if->return->else->if->return->column->ui->convertModelToColumn->row->ui->convertModelToRow->if->return->maxRowCount->ui->getRowCount->if->return->return->ui->getModelIndex->return
BasicListUI.Actions#getNextIndex(JList, BasicListUI, int)::: actions get next index:::index->list->getLeadSelectionIndex->adjustIndex->size->list->getModel->getSize->if->if->if->else->else->if->else->if->list->getLayoutOrientation->if->else->return
BasicListUI.Handler#keyTyped(KeyEvent):::Invoked when a key has been typed:::src->e->getSource->model->src->getModel->if->model->getSize->e->isAltDown->BasicGraphicsUtils->isMenuShortcutKeyDown->isNavigationKey->return->startingFromSelection->c->e->getKeyChar->time->e->getWhen->startIndex->src->getLeadSelectionIndex->adjustIndex->if->if->prefix->length->prefix->charAt->else->else->if->model->getSize->index->src->getNextMatch->if->src->setSelectedIndex->src->ensureIndexIsVisible->else->if->src->getNextMatch->if->src->setSelectedIndex->src->ensureIndexIsVisible
BasicListUI.Handler#keyPressed(KeyEvent):::Invoked when a key has been pressed:::if->isNavigationKey
BasicListUI.Handler#keyReleased(KeyEvent):::Invoked when a key has been released:::
BasicListUI.Handler#isNavigationKey(KeyEvent):::Returns whether or not the supplied key event maps to a key that is used for navigation:::inputMap->list->getInputMap->key->KeyStroke->getKeyStrokeForEvent->if->inputMap->get->return->return
BasicListUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->e->getPropertyName->if->oldModel->e->getOldValue->newModel->e->getNewValue->if->oldModel->removeListDataListener->if->newModel->addListDataListener->redrawList->else->if->oldModel->e->getOldValue->newModel->e->getNewValue->if->oldModel->removeListSelectionListener->if->newModel->addListSelectionListener->redrawList->else->if->redrawList->else->if->SwingUtilities2->isScaleChanged->redrawList->else->if->redrawList->else->if->redrawList->else->if->redrawList->else->if->list->repaint->else->if->list->repaint->else->if->list->getLayoutOrientation->redrawList->else->if->if->redrawList->else->if->list->getComponentOrientation->isLeftToRight->redrawList->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->else->if->updateIsFileList->redrawList->else->if->oldValue->e->getOldValue->repaintDropLocation->list->getDropLocation->repaintDropLocation
BasicListUI.Handler#repaintDropLocation(JList.DropLocation)::: handler repaint drop location:::if->return->r->if->loc->isInsert->getDropLineRect->else->loc->getIndex->getCellBounds->if->list->repaint
BasicListUI.Handler#intervalAdded(ListDataEvent)::: handler interval added:::minIndex->Math->e->getIndex0->e->getIndex1->min->maxIndex->Math->e->getIndex0->e->getIndex1->max->sm->list->getSelectionModel->if->sm->insertIndexInterval->redrawList
BasicListUI.Handler#intervalRemoved(ListDataEvent)::: handler interval removed:::sm->list->getSelectionModel->if->sm->e->getIndex0->e->getIndex1->removeIndexInterval->redrawList
BasicListUI.Handler#contentsChanged(ListDataEvent)::: handler contents changed:::redrawList
BasicListUI.Handler#valueChanged(ListSelectionEvent)::: handler value changed:::maybeUpdateLayoutState->size->list->getModel->getSize->firstIndex->Math->Math->e->getFirstIndex->max->min->lastIndex->Math->Math->e->getLastIndex->max->min->bounds->getCellBounds->if->list->repaint
BasicListUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicListUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicListUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicListUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->SwingUtilities2->shouldIgnore->return->dragEnabled->list->getDragEnabled->grabFocus->if->row->SwingUtilities2->e->getPoint->loc2IndexFileList->if->DragRecognitionSupport->mousePressed->if->BasicGraphicsUtils->isMenuShortcutKeyDown->return->else->if->e->isShiftDown->list->isSelectedIndex->list->addSelectionInterval->return->else->list->setValueIsAdjusting->if->SwingUtilities2->adjustFocus->adjustSelection
BasicListUI.Handler#adjustSelection(MouseEvent)::: handler adjust selection:::row->SwingUtilities2->e->getPoint->loc2IndexFileList->if->if->e->getID->e->isShiftDown->list->getSelectionMode->list->clearSelection->else->anchorIndex->list->getAnchorSelectionIndex->adjustIndex->anchorSelected->if->else->list->isSelectedIndex->if->BasicGraphicsUtils->isMenuShortcutKeyDown->if->e->isShiftDown->if->list->addSelectionInterval->else->list->removeSelectionInterval->if->list->addSelectionInterval->list->getSelectionModel->setAnchorSelectionIndex->else->if->list->isSelectedIndex->list->removeSelectionInterval->else->list->addSelectionInterval->else->if->e->isShiftDown->list->setSelectionInterval->else->list->setSelectionInterval
BasicListUI.Handler#dragStarting(MouseEvent)::: handler drag starting:::if->BasicGraphicsUtils->isMenuShortcutKeyDown->row->SwingUtilities2->me->getPoint->loc2IndexFileList->list->addSelectionInterval
BasicListUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::if->SwingUtilities2->shouldIgnore->return->if->list->getDragEnabled->DragRecognitionSupport->mouseDragged->return->if->e->isShiftDown->BasicGraphicsUtils->isMenuShortcutKeyDown->return->row->e->getPoint->locationToIndex->if->if->return->cellBounds->getCellBounds->if->list->scrollRectToVisible->list->setSelectionInterval
BasicListUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicListUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->SwingUtilities2->shouldIgnore->return->if->list->getDragEnabled->me->DragRecognitionSupport->mouseReleased->if->SwingUtilities2->adjustFocus->if->adjustSelection->else->list->setValueIsAdjusting
BasicListUI.Handler#repaintCellFocus()::: handler repaint cell focus:::leadIndex->list->getLeadSelectionIndex->adjustIndex->if->r->getCellBounds->if->list->repaint
BasicListUI.Handler#focusGained(FocusEvent)::: handler focus gained:::repaintCellFocus
BasicListUI.Handler#focusLost(FocusEvent)::: handler focus lost:::repaintCellFocus
BasicListUI#adjustIndex(int, JList)::: basic list i adjust index:::return->list->getModel->getSize
BasicListUI.ListTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->list->values->list->getSelectedValues->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->for->i->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicListUI.ListTransferHandler#getSourceActions(JComponent)::: list transfer handler get source actions:::return
BasicLookAndFeel#getDefaults():::Returns the look and feel defaults:::table->new->UIDefaults->initClassDefaults->initSystemColorDefaults->initComponentDefaults->return
BasicLookAndFeel#initialize()::: basic look and feel initialize:::if->installAWTEventListener
BasicLookAndFeel#installAWTEventListener()::: basic look and feel install event listener:::if->new->AWTEventHelper->new->PropertyChangeListener->AppContext->getAppContext->addPropertyChangeListener
BasicLookAndFeel#uninitialize()::: basic look and feel uninitialize:::context->AppContext->getAppContext->synchronized->grabber->context->get->if->uninstall->synchronized->helper->context->get->if->uninstall->if->AccessController->doPrivileged->if->context->removePropertyChangeListener
BasicLookAndFeel#initClassDefaults(UIDefaults):::Populates table with mappings from uiClassID to the fully qualified name of the ui class:::basicPackageName->uiDefaults->table->putDefaults
BasicLookAndFeel#initSystemColorDefaults(UIDefaults):::Populates table with system colors:::defaultSystemColors->isNativeLookAndFeel->loadSystemColors
BasicLookAndFeel#loadSystemColors(UIDefaults, String[], boolean):::Populates table with the name-color pairs in systemColors:::if->for->i->else->for->i
BasicLookAndFeel#initResourceBundle(UIDefaults):::Initialize the defaults table with the name of the ResourceBundle used for getting localized defaults:::table->Locale->getDefault->setDefaultLocale->SwingAccessor->getUIDefaultsAccessor->addInternalBundle
BasicLookAndFeel#initComponentDefaults(UIDefaults):::Populates table with the defaults for the basic look and feel.:::initResourceBundle->fiveHundred->oneThousand->dialogPlain12->new->FontUIResource->serifPlain12->new->FontUIResource->sansSerifPlain12->new->FontUIResource->monospacedPlain12->new->FontUIResource->dialogBold12->new->FontUIResource->red->new->ColorUIResource->black->new->ColorUIResource->white->new->ColorUIResource->yellow->new->ColorUIResource->gray->new->ColorUIResource->lightGray->new->ColorUIResource->darkGray->new->ColorUIResource->scrollBarTrack->new->ColorUIResource->control->table->getColor->controlDkShadow->table->getColor->controlHighlight->table->getColor->controlLtHighlight->table->getColor->controlShadow->table->getColor->controlText->table->getColor->menu->table->getColor->menuText->table->getColor->textHighlight->table->getColor->textHighlightText->table->getColor->textInactiveText->table->getColor->textText->table->getColor->window->table->getColor->zeroInsets->new->InsetsUIResource->twoInsets->new->InsetsUIResource->threeInsets->new->InsetsUIResource->marginBorder->new->BasicBorders.MarginBorder->etchedBorder->BorderUIResource->getEtchedBorderUIResource->loweredBevelBorder->BorderUIResource->getLoweredBevelBorderUIResource->popupMenuBorder->BasicBorders->getInternalFrameBorder->blackLineBorder->BorderUIResource->getBlackLineBorderUIResource->focusCellHighlightBorder->new->BorderUIResource.LineBorderUIResource->noFocusBorder->new->BorderUIResource.EmptyBorderUIResource->tableHeaderBorder->new->BorderUIResource.BevelBorderUIResource->buttonBorder->BasicBorders->getButtonBorder->buttonToggleBorder->BasicBorders->getToggleButtonBorder->radioButtonBorder->BasicBorders->getRadioButtonBorder->newFolderIcon->SwingUtilities2->getClass->makeIcon->upFolderIcon->SwingUtilities2->getClass->makeIcon->homeFolderIcon->SwingUtilities2->getClass->makeIcon->detailsViewIcon->SwingUtilities2->getClass->makeIcon->listViewIcon->SwingUtilities2->getClass->makeIcon->directoryIcon->SwingUtilities2->getClass->makeIcon->fileIcon->SwingUtilities2->getClass->makeIcon->computerIcon->SwingUtilities2->getClass->makeIcon->hardDriveIcon->SwingUtilities2->getClass->makeIcon->floppyDriveIcon->SwingUtilities2->getClass->makeIcon->internalFrameBorder->BasicBorders->getInternalFrameBorder->listCellRendererActiveValue->new->UIDefaults.ActiveValue->menuBarBorder->BasicBorders->getMenuBarBorder->menuItemCheckIcon->BasicIconFactory->getMenuItemCheckIcon->menuItemArrowIcon->BasicIconFactory->getMenuItemArrowIcon->menuArrowIcon->BasicIconFactory->getMenuArrowIcon->checkBoxIcon->BasicIconFactory->getCheckBoxIcon->radioButtonIcon->BasicIconFactory->getRadioButtonIcon->checkBoxMenuItemIcon->BasicIconFactory->getCheckBoxMenuItemIcon->radioButtonMenuItemIcon->BasicIconFactory->getRadioButtonMenuItemIcon->menuItemAcceleratorDelimiter->optionPaneMinimumSize->new->DimensionUIResource->zero->zeroBorder->new->BorderUIResource.EmptyBorderUIResource->ten->optionPaneBorder->new->BorderUIResource.EmptyBorderUIResource->optionPaneButtonAreaBorder->new->BorderUIResource.EmptyBorderUIResource->progressBarBorder->BasicBorders->getProgressBarBorder->minimumThumbSize->new->DimensionUIResource->maximumThumbSize->new->DimensionUIResource->sliderFocusInsets->toolBarSeparatorSize->new->DimensionUIResource->splitPaneBorder->BasicBorders->getSplitPaneBorder->splitPaneDividerBorder->BasicBorders->getSplitPaneDividerBorder->tabbedPaneTabInsets->new->InsetsUIResource->tabbedPaneTabPadInsets->new->InsetsUIResource->tabbedPaneTabAreaInsets->new->InsetsUIResource->tabbedPaneContentBorderInsets->new->InsetsUIResource->textFieldBorder->BasicBorders->getTextFieldBorder->editorMargin->caretBlinkRate->allAuditoryCues->new->ObjectArr->noAuditoryCues->new->ObjectArr->defaults->new->InsetsUIResource->new->ObjectArr->new->UIDefaults.LazyInputMap->new->InsetsUIResource->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->SwingUtilities2->getClass->makeIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->table->get->table->get->table->get->table->get->new->ObjectArr->table->get->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->intArr->SwingUtilities2->getSystemMnemonicKeyMask->SwingUtilities2->SwingUtilities2->getSystemMnemonicKeyMask->setAltGraphMask->new->ObjectArr->new->ObjectArr->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->DimensionUIResource->new->DimensionUIResource->table->get->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->Dimension->new->Dimension->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->SortArrowIcon->new->SortArrowIcon->table->getColor->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->UIDefaults.LazyInputMap->table->get->table->get->table->get->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->table->putDefaults
BasicLookAndFeel#getFocusAcceleratorKeyMask()::: basic look and feel get focus accelerator key mask:::tk->Toolkit->getDefaultToolkit->if->return->getFocusAcceleratorKeyMask->return
BasicLookAndFeel#getUIOfType(ComponentUI, Class):::Returns the ui that is of type klass, or null if one can not be found.:::if->klass->isInstance->return->return
BasicLookAndFeel#getAudioActionMap():::Returns an ActionMap containing the audio actions for this look and feel:::audioActionMap->UIManager->get->if->acList->UIManager->get->if->new->ActionMapUIResource->for->counter->UIManager->getLookAndFeelDefaults->put->return
BasicLookAndFeel#createAudioAction(Object):::Creates and returns an Action used to play a sound:::if->audioKey->audioValue->UIManager->get->return->new->AudioAction->else->return
BasicLookAndFeel.AudioAction#actionPerformed(ActionEvent)::: audio action action performed:::if->loadAudioData->if->cancelCurrentSound->try->soundStream->AudioSystem->new->ByteArrayInputStream->getAudioInputStream->info->soundStream->getFormat->new->DataLine.Info->clip->AudioSystem->getLine->clip->open->clip->addLineListener->synchronized->clip->start->catch->finally
BasicLookAndFeel.AudioAction#update(LineEvent)::: audio action update:::if->event->getType->event->getLine->cancelCurrentSound
BasicLookAndFeel.AudioAction#cancelCurrentSound(Clip):::If the parameter is null, or equal to the currently playing sound, then cancel the currently playing sound.:::lastClip->synchronized->if->if->lastClip->removeLineListener->lastClip->close
BasicLookAndFeel#loadAudioData(String):::Utility method that loads audio bits for the specified soundFile filename:::if->return->buffer->AccessController->new->PrivilegedAction<byte[]>->doPrivileged->if->getClass->getName->println->return->if->println->return->return
BasicLookAndFeel#playSound(Action):::If necessary, invokes actionPerformed on audioAction to play a sound:::if->audioStrings->UIManager->get->if->audioCues->new->HashSet<Object>->foreach->audioCues->add->actionName->audioAction->getValue->if->audioCues->contains->audioAction->new->ActionEvent->actionPerformed
BasicLookAndFeel#installAudioActionMap(ActionMap):::Sets the parent of the passed in ActionMap to be the audio action map.:::laf->UIManager->getLookAndFeel->if->map->getAudioActionMap->setParent
BasicLookAndFeel#playSound(JComponent, Object):::Helper method to play a named sound.:::laf->UIManager->getLookAndFeel->if->map->c->getActionMap->if->audioAction->map->get->if->playSound
BasicLookAndFeel.AWTEventHelper#run()::: event helper run:::tk->Toolkit->getDefaultToolkit->if->tk->addAWTEventListener->else->tk->removeAWTEventListener->return
BasicLookAndFeel.AWTEventHelper#eventDispatched(AWTEvent)::: event helper event dispatched:::eventID->ev->getID->if->me->if->me->isPopupTrigger->elems->MenuSelectionManager->defaultManager->getSelectedPath->if->return->c->me->getSource->src->if->else->if->getParent->if->if->src->getComponentPopupMenu->pt->src->getPopupLocation->if->me->getPoint->SwingUtilities->convertPoint->src->getComponentPopupMenu->show->me->consume->if->object->ev->getSource->if->return->component->if->parent->while->if->try->setSelected->catch->finally->parent->getParent
BasicMenuBarUI#createUI(JComponent):::Returns a new instance of BasicMenuBarUI.:::return->new->BasicMenuBarUI
BasicMenuBarUI#loadActionMap(LazyActionMap)::: basic menu bar i load action map:::map->new->Actions->put
BasicMenuBarUI#installUI(JComponent)::: basic menu bar i install i:::installDefaults->installListeners->installKeyboardActions
BasicMenuBarUI#installDefaults():::Installs default properties.:::if->menuBar->getLayout->menuBar->getLayout->menuBar->new->DefaultMenuLayout->setLayout->LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont
BasicMenuBarUI#installListeners():::Registers listeners.:::createContainerListener->createChangeListener->for->i->menuBar->getMenuCount->menuBar->addContainerListener
BasicMenuBarUI#installKeyboardActions():::Registers keyboard actions.:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicMenuBarUI#getInputMap(int)::: basic menu bar i get input map:::if->bindings->DefaultLookup->get->if->return->LookAndFeel->makeComponentInputMap->return
BasicMenuBarUI#uninstallUI(JComponent)::: basic menu bar i uninstall i:::uninstallDefaults->uninstallListeners->uninstallKeyboardActions
BasicMenuBarUI#uninstallDefaults():::Uninstalls default properties.:::if->LookAndFeel->uninstallBorder
BasicMenuBarUI#uninstallListeners():::Unregisters listeners.:::menuBar->removeContainerListener->for->i->menuBar->getMenuCount
BasicMenuBarUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicMenuBarUI#createContainerListener():::Returns an instance of ContainerListener.:::return->getHandler
BasicMenuBarUI#createChangeListener():::Returns an instance of ChangeListener.:::return->getHandler
BasicMenuBarUI#getHandler()::: basic menu bar i get handler:::if->new->Handler->return
BasicMenuBarUI#getMinimumSize(JComponent)::: basic menu bar i get minimum size:::return
BasicMenuBarUI#getMaximumSize(JComponent)::: basic menu bar i get maximum size:::return
BasicMenuBarUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::i->c->for->menuBar->getMenuCount
BasicMenuBarUI.Handler#componentAdded(ContainerEvent)::: handler component added:::c->e->getChild->if->getModel->addChangeListener
BasicMenuBarUI.Handler#componentRemoved(ContainerEvent)::: handler component removed:::c->e->getChild->if->getModel->removeChangeListener
BasicMenuBarUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::menuBar->e->getSource->defaultManager->MenuSelectionManager->defaultManager->me->subElements->menu->menuBar->getMenu->if->new->MenuElementArr->menu->getPopupMenu->defaultManager->setSelectedPath
BasicMenuItemUI#loadActionMap(LazyActionMap)::: basic menu item i load action map:::map->new->Actions->put->BasicLookAndFeel->installAudioActionMap
BasicMenuItemUI#createUI(JComponent):::Returns a new instance of BasicMenuItemUI.:::return->new->BasicMenuItemUI
BasicMenuItemUI#installUI(JComponent)::: basic menu item i install i:::installDefaults->installComponents->installListeners->installKeyboardActions
BasicMenuItemUI#installDefaults():::Installs default properties.:::prefix->getPropertyPrefix->UIManager->getFont->if->UIManager->getFont->opaque->UIManager->getPropertyPrefix->get->if->LookAndFeel->installProperty->else->LookAndFeel->installProperty->if->menuItem->getMargin->menuItem->getMargin->menuItem->UIManager->getInsets->setMargin->LookAndFeel->Integer->valueOf->installProperty->menuItem->getIconTextGap->LookAndFeel->installBorder->menuItem->isBorderPainted->LookAndFeel->UIManager->getBoolean->installProperty->LookAndFeel->installColorsAndFont->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->UIManager->getString->if->if->UIManager->getIcon->updateCheckIcon
BasicMenuItemUI#updateCheckIcon():::Updates check Icon based on column layout:::prefix->getPropertyPrefix->if->UIManager->getIcon->isColumnLayout->MenuItemLayoutHelper->BasicGraphicsUtils->isLeftToRight->isColumnLayout->if->iconFactory->UIManager->get->if->MenuItemLayoutHelper->useCheckAndArrow->iconFactory->isCompatible->iconFactory->getIcon
BasicMenuItemUI#installComponents(JMenuItem)::: basic menu item i install components:::BasicHTML->menuItem->getText->updateRenderer
BasicMenuItemUI#getPropertyPrefix():::Returns a property prefix.:::return
BasicMenuItemUI#installListeners():::Registers listeners.:::if->createMouseInputListener->menuItem->addMouseListener->menuItem->addMouseMotionListener->if->createMenuDragMouseListener->menuItem->addMenuDragMouseListener->if->createMenuKeyListener->menuItem->addMenuKeyListener->if->createPropertyChangeListener->menuItem->addPropertyChangeListener
BasicMenuItemUI#installKeyboardActions():::Registers keyboard action.:::installLazyActionMap->updateAcceleratorBinding
BasicMenuItemUI#installLazyActionMap()::: basic menu item i install lazy action map:::LazyActionMap->getPropertyPrefix->installLazyActionMap
BasicMenuItemUI#uninstallUI(JComponent)::: basic menu item i uninstall i:::uninstallDefaults->uninstallComponents->uninstallListeners->uninstallKeyboardActions->MenuItemLayoutHelper->clearUsedParentClientProperties
BasicMenuItemUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder->LookAndFeel->installProperty->if->menuItem->getMargin->menuItem->setMargin->if->if
BasicMenuItemUI#uninstallComponents(JMenuItem):::Unregisters components.:::BasicHTML->updateRenderer
BasicMenuItemUI#uninstallListeners():::Unregisters listeners.:::if->menuItem->removeMouseListener->menuItem->removeMouseMotionListener->if->menuItem->removeMenuDragMouseListener->if->menuItem->removeMenuKeyListener->if->menuItem->removePropertyChangeListener
BasicMenuItemUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicMenuItemUI#createMouseInputListener(JComponent):::Returns an instance of MouseInputListener.:::return->getHandler
BasicMenuItemUI#createMenuDragMouseListener(JComponent):::Returns an instance of MenuDragMouseListener.:::return->getHandler
BasicMenuItemUI#createMenuKeyListener(JComponent):::Returns an instance of MenuKeyListener.:::return
BasicMenuItemUI#createPropertyChangeListener(JComponent):::Creates a PropertyChangeListener which will be added to the menu item:::return->getHandler
BasicMenuItemUI#getHandler()::: basic menu item i get handler:::if->new->Handler->return
BasicMenuItemUI#createInputMap(int)::: basic menu item i create input map:::if->return->new->ComponentInputMapUIResource->return
BasicMenuItemUI#updateAcceleratorBinding()::: basic menu item i update accelerator binding:::accelerator->menuItem->getAccelerator->windowInputMap->SwingUtilities->getUIInputMap->if->windowInputMap->clear->if->if->createInputMap->SwingUtilities->replaceUIInputMap->windowInputMap->put->modifiers->accelerator->getModifiers->if->keyStroke->KeyStroke->accelerator->getKeyCode->accelerator->isOnKeyRelease->getKeyStroke->windowInputMap->put->else->if->keyStroke->KeyStroke->accelerator->getKeyCode->accelerator->isOnKeyRelease->getKeyStroke->windowInputMap->put->else->if->keyStroke->KeyStroke->accelerator->getKeyCode->accelerator->isOnKeyRelease->getKeyStroke->windowInputMap->put->KeyStroke->accelerator->getKeyCode->accelerator->isOnKeyRelease->getKeyStroke->windowInputMap->put
BasicMenuItemUI#getMinimumSize(JComponent)::: basic menu item i get minimum size:::d->v->c->getClientProperty->if->getPreferredSize->v->getPreferredSpan->v->getMinimumSpan->return
BasicMenuItemUI#getPreferredSize(JComponent)::: basic menu item i get preferred size:::return->getPreferredMenuItemSize
BasicMenuItemUI#getMaximumSize(JComponent)::: basic menu item i get maximum size:::d->v->c->getClientProperty->if->getPreferredSize->v->getMaximumSpan->v->getPreferredSpan->return
BasicMenuItemUI#getPreferredMenuItemSize(JComponent, Icon, Icon, int):::Returns the preferred size of a menu item.:::mi->lh->MenuItemLayoutHelper->createMaxRect->BasicGraphicsUtils->isLeftToRight->mi->getFont->MenuItemLayoutHelper->useCheckAndArrow->getPropertyPrefix->new->MenuItemLayoutHelper->result->new->Dimension->lh->getLeadingGap->MenuItemLayoutHelper->lh->getCheckSize->lh->getAfterCheckIconGap->addMaxWidth->if->lh->isTopLevelMenu->lh->getMinTextOffset->lh->getMinTextOffset->lh->getMinTextOffset->MenuItemLayoutHelper->lh->getLabelSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getAccSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getArrowSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getCheckSize->getHeight->lh->getLabelSize->getHeight->lh->getAccSize->getHeight->lh->getArrowSize->getHeight->max->insets->lh->getMenuItem->getInsets->if->if->if->UIManager->getPropertyPrefix->get->return
BasicMenuItemUI#update(Graphics, JComponent):::We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint().:::paint
BasicMenuItemUI#paint(Graphics, JComponent)::: basic menu item i paint:::paintMenuItem
BasicMenuItemUI#paintMenuItem(Graphics, JComponent, Icon, Icon, Color, Color, int):::Paints a menu item.:::holdf->g->getFont->holdc->g->getColor->mi->g->mi->getFont->setFont->viewRect->mi->getWidth->mi->getHeight->new->Rectangle->mi->getInsets->applyInsets->lh->BasicGraphicsUtils->isLeftToRight->mi->getFont->MenuItemLayoutHelper->useCheckAndArrow->getPropertyPrefix->new->MenuItemLayoutHelper->lr->lh->layoutMenuItem->paintBackground->paintCheckIcon->paintIcon->paintText->paintAccText->paintArrowIcon->g->setColor->g->setFont
BasicMenuItemUI#paintIcon(Graphics, MenuItemLayoutHelper, MenuItemLayoutHelper.LayoutResult, Color)::: basic menu item i paint icon:::if->lh->getIcon->icon->model->lh->getMenuItem->getModel->if->model->isEnabled->lh->getMenuItem->getDisabledIcon->else->if->model->isPressed->model->isArmed->lh->getMenuItem->getPressedIcon->if->lh->getMenuItem->getIcon->else->lh->getMenuItem->getIcon->if->icon->lh->getMenuItem->lr->getIconRect->lr->getIconRect->paintIcon->g->setColor
BasicMenuItemUI#paintCheckIcon(Graphics, MenuItemLayoutHelper, MenuItemLayoutHelper.LayoutResult, Color, Color)::: basic menu item i paint check icon:::if->lh->getCheckIcon->model->lh->getMenuItem->getModel->if->model->isArmed->lh->getMenuItem->model->isSelected->g->setColor->else->g->setColor->if->lh->useCheckAndArrow->lh->getCheckIcon->lh->getMenuItem->lr->getCheckRect->lr->getCheckRect->paintIcon->g->setColor
BasicMenuItemUI#paintAccText(Graphics, MenuItemLayoutHelper, MenuItemLayoutHelper.LayoutResult)::: basic menu item i paint acc text:::if->lh->getAccText->equals->model->lh->getMenuItem->getModel->g->lh->getAccFontMetrics->getFont->setFont->if->model->isEnabled->if->g->setColor->SwingUtilities2->lh->getMenuItem->lh->getAccText->lr->getAccRect->lr->getAccRect->lh->getAccFontMetrics->getAscent->drawString->else->g->lh->getMenuItem->getBackground->brighter->setColor->SwingUtilities2->lh->getMenuItem->lh->getAccText->lr->getAccRect->lr->getAccRect->lh->getAccFontMetrics->getAscent->drawString->g->lh->getMenuItem->getBackground->darker->setColor->SwingUtilities2->lh->getMenuItem->lh->getAccText->lr->getAccRect->lr->getAccRect->lh->getFontMetrics->getAscent->drawString->else->if->model->isArmed->lh->getMenuItem->model->isSelected->g->setColor->else->g->setColor->SwingUtilities2->lh->getMenuItem->lh->getAccText->lr->getAccRect->lr->getAccRect->lh->getAccFontMetrics->getAscent->drawString
BasicMenuItemUI#paintText(Graphics, MenuItemLayoutHelper, MenuItemLayoutHelper.LayoutResult)::: basic menu item i paint text:::if->lh->getText->equals->if->lh->getHtmlView->lh->getHtmlView->lr->getTextRect->paint->else->lh->getMenuItem->lr->getTextRect->lh->getText->paintText
BasicMenuItemUI#paintArrowIcon(Graphics, MenuItemLayoutHelper, MenuItemLayoutHelper.LayoutResult, Color)::: basic menu item i paint arrow icon:::if->lh->getArrowIcon->model->lh->getMenuItem->getModel->if->model->isArmed->lh->getMenuItem->model->isSelected->g->setColor->if->lh->useCheckAndArrow->lh->getArrowIcon->lh->getMenuItem->lr->getArrowRect->lr->getArrowRect->paintIcon
BasicMenuItemUI#applyInsets(Rectangle, Insets)::: basic menu item i apply insets:::if
BasicMenuItemUI#paintBackground(Graphics, JMenuItem, Color):::Draws the background of the menu item.:::model->menuItem->getModel->oldColor->g->getColor->menuWidth->menuItem->getWidth->menuHeight->menuItem->getHeight->if->menuItem->isOpaque->if->model->isArmed->model->isSelected->g->setColor->g->fillRect->else->g->menuItem->getBackground->setColor->g->fillRect->g->setColor->else->if->model->isArmed->model->isSelected->g->setColor->g->fillRect->g->setColor
BasicMenuItemUI#paintText(Graphics, JMenuItem, Rectangle, String):::Renders the text of the current menu item.:::model->menuItem->getModel->fm->SwingUtilities2->getFontMetrics->mnemIndex->menuItem->getDisplayedMnemonicIndex->if->model->isEnabled->if->UIManager->get->g->UIManager->getColor->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->else->g->menuItem->getBackground->brighter->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->g->menuItem->getBackground->darker->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->else->if->model->isArmed->model->isSelected->g->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt
BasicMenuItemUI#getPath():::Returns a menu element path.:::m->MenuSelectionManager->defaultManager->oldPath->m->getSelectedPath->newPath->i->if->return->new->MenuElementArr->parent->menuItem->getParent->if->getComponent->new->MenuElementArr->System->arraycopy->else->j->for->new->MenuElementArr->System->arraycopy->return
BasicMenuItemUI#printMenuElementArray(MenuElement[], boolean)::: basic menu item i print menu element array:::println->i->j->for->println->if->Thread->dumpStack
BasicMenuItemUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::getHandler->mouseClicked
BasicMenuItemUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::getHandler->mousePressed
BasicMenuItemUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::getHandler->mouseReleased
BasicMenuItemUI.MouseInputHandler#mouseEntered(MouseEvent)::: mouse input handler mouse entered:::getHandler->mouseEntered
BasicMenuItemUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::getHandler->mouseExited
BasicMenuItemUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::getHandler->mouseDragged
BasicMenuItemUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::getHandler->mouseMoved
BasicMenuItemUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::mi->e->getSource->MenuSelectionManager->defaultManager->clearSelectedPath->mi->doClick
BasicMenuItemUI#doNotCloseOnMouseClick()::: basic menu item i do not close on mouse click:::if->property->return->SwingUtilities2->getBoolean->else->if->property->return->SwingUtilities2->getBoolean->return
BasicMenuItemUI#doClick(MenuSelectionManager):::Call this method when a menu item is to be activated:::if->isInternalFrameSystemMenu->BasicLookAndFeel->getPropertyPrefix->playSound->if->doNotCloseOnMouseClick->if->MenuSelectionManager->defaultManager->msm->clearSelectedPath->menuItem->doClick
BasicMenuItemUI#isInternalFrameSystemMenu():::This is to see if the menu item in question is part of the system menu on an internal frame:::actionCommand->menuItem->getActionCommand->if->return->else->return
BasicMenuItemUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicMenuItemUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::
BasicMenuItemUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->menuItem->isEnabled->return->manager->MenuSelectionManager->defaultManager->p->e->getPoint->if->menuItem->getWidth->menuItem->getHeight->doClick->else->manager->processMouseEvent
BasicMenuItemUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::manager->MenuSelectionManager->defaultManager->modifiers->e->getModifiers->if->MenuSelectionManager->defaultManager->processMouseEvent->else->manager->getPath->setSelectedPath
BasicMenuItemUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::manager->MenuSelectionManager->defaultManager->modifiers->e->getModifiers->if->MenuSelectionManager->defaultManager->processMouseEvent->else->path->manager->getSelectedPath->if->newPath->new->MenuElementArr->i->c->for->manager->setSelectedPath
BasicMenuItemUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::MenuSelectionManager->defaultManager->processMouseEvent
BasicMenuItemUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicMenuItemUI.Handler#menuDragMouseEntered(MenuDragMouseEvent)::: handler menu drag mouse entered:::manager->e->getMenuSelectionManager->path->e->getPath->manager->setSelectedPath
BasicMenuItemUI.Handler#menuDragMouseDragged(MenuDragMouseEvent)::: handler menu drag mouse dragged:::manager->e->getMenuSelectionManager->path->e->getPath->manager->setSelectedPath
BasicMenuItemUI.Handler#menuDragMouseExited(MenuDragMouseEvent)::: handler menu drag mouse exited:::
BasicMenuItemUI.Handler#menuDragMouseReleased(MenuDragMouseEvent)::: handler menu drag mouse released:::if->menuItem->isEnabled->return->manager->e->getMenuSelectionManager->path->e->getPath->p->e->getPoint->if->menuItem->getWidth->menuItem->getHeight->doClick->else->manager->clearSelectedPath
BasicMenuItemUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::name->e->getPropertyName->if->updateAcceleratorBinding->else->if->SwingUtilities2->isScaleChanged->lbl->e->getSource->text->lbl->getText->BasicHTML->updateRenderer->else->if->e->getNewValue->intValue->else->if->updateCheckIcon
BasicMenuUI#createUI(JComponent):::Constructs a new instance of BasicMenuUI.:::return->new->BasicMenuUI
BasicMenuUI#loadActionMap(LazyActionMap)::: basic menu i load action map:::BasicMenuItemUI->loadActionMap->map->new->Actions->put
BasicMenuUI#installDefaults()::: basic menu i install defaults:::super->installDefaults->updateDefaultBackgroundColor->setDelay->UIManager->getBoolean
BasicMenuUI#getPropertyPrefix()::: basic menu i get property prefix:::return
BasicMenuUI#installListeners()::: basic menu i install listeners:::super->installListeners->if->createChangeListener->if->menuItem->addChangeListener->if->createMenuListener->if->addMenuListener
BasicMenuUI#installKeyboardActions()::: basic menu i install keyboard actions:::super->installKeyboardActions->updateMnemonicBinding
BasicMenuUI#installLazyActionMap()::: basic menu i install lazy action map:::LazyActionMap->getPropertyPrefix->installLazyActionMap
BasicMenuUI#updateMnemonicBinding()::: basic menu i update mnemonic binding:::mnemonic->menuItem->getModel->getMnemonic->shortcutKeys->DefaultLookup->get->if->new->intArr->if->return->windowInputMap->SwingUtilities->getUIInputMap->if->foreach->windowInputMap->KeyStroke->getKeyStroke->remove->if->if->createInputMap->SwingUtilities->replaceUIInputMap->foreach->windowInputMap->KeyStroke->getKeyStroke->put
BasicMenuUI#uninstallKeyboardActions()::: basic menu i uninstall keyboard actions:::super->uninstallKeyboardActions
BasicMenuUI#createMouseInputListener(JComponent)::: basic menu i create mouse input listener:::return->getHandler
BasicMenuUI#createMenuListener(JComponent):::Returns an instance of MenuListener.:::return
BasicMenuUI#createChangeListener(JComponent):::Returns an instance of ChangeListener.:::return
BasicMenuUI#createPropertyChangeListener(JComponent)::: basic menu i create property change listener:::return->getHandler
BasicMenuUI#getHandler()::: basic menu i get handler:::if->new->Handler->return
BasicMenuUI#uninstallDefaults()::: basic menu i uninstall defaults:::menuItem->setArmed->menuItem->setSelected->menuItem->resetKeyboardActions->super->uninstallDefaults
BasicMenuUI#uninstallListeners()::: basic menu i uninstall listeners:::super->uninstallListeners->if->menuItem->removeChangeListener->if->removeMenuListener
BasicMenuUI#createMenuDragMouseListener(JComponent)::: basic menu i create menu drag mouse listener:::return->getHandler
BasicMenuUI#createMenuKeyListener(JComponent)::: basic menu i create menu key listener:::return->getHandler
BasicMenuUI#getMinimumSize(JComponent)::: basic menu i get minimum size:::return->isTopLevelMenu->c->getPreferredSize
BasicMenuUI#getMaximumSize(JComponent)::: basic menu i get maximum size:::if->isTopLevelMenu->d->c->getPreferredSize->return->new->Dimension->return
BasicMenuUI#setupPostTimer(JMenu):::Sets timer to the menu.:::timer->menu->getDelay->new->Actions->new->Timer->timer->setRepeats->timer->start
BasicMenuUI#appendPath(MenuElement[], MenuElement)::: basic menu i append path:::newPath->new->MenuElementArr->System->arraycopy->MenuSelectionManager->defaultManager->setSelectedPath
BasicMenuUI.Actions#getMenu(ActionEvent)::: actions get menu:::if->e->getSource->return->e->getSource->return
BasicMenuUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::menu->getMenu->if->pm->BasicPopupMenuUI->getLastPopup->if->menu->getParent->return->defaultManager->MenuSelectionManager->defaultManager->if->cnt->menu->getParent->if->me->subElements->menu->getPopupMenu->getSubElements->if->new->MenuElementArr->menu->getPopupMenu->else->new->MenuElementArr->menu->getPopupMenu->defaultManager->setSelectedPath->else->path->defaultManager->getSelectedPath->if->menu->getPopupMenu->appendPath
BasicMenuUI.Actions#accept(Object)::: actions accept:::if->return->isEnabled->return
BasicMenuUI#updateDefaultBackgroundColor()::: basic menu i update default background color:::if->UIManager->getBoolean->return->menu->if->menu->getBackground->if->menu->isTopLevelMenu->menu->UIManager->getColor->setBackground->else->menu->UIManager->getPropertyPrefix->getColor->setBackground
BasicMenuUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::getHandler->mouseClicked
BasicMenuUI.MouseInputHandler#mousePressed(MouseEvent):::Invoked when the mouse has been clicked on the menu:::getHandler->mousePressed
BasicMenuUI.MouseInputHandler#mouseReleased(MouseEvent):::Invoked when the mouse has been released on the menu:::getHandler->mouseReleased
BasicMenuUI.MouseInputHandler#mouseEntered(MouseEvent):::Invoked when the cursor enters the menu:::getHandler->mouseEntered
BasicMenuUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::getHandler->mouseExited
BasicMenuUI.MouseInputHandler#mouseDragged(MouseEvent):::Invoked when a mouse button is pressed on the menu and then dragged:::getHandler->mouseDragged
BasicMenuUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::getHandler->mouseMoved
BasicMenuUI.ChangeHandler#stateChanged(ChangeEvent)::: change handler state changed:::
BasicMenuUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::if->e->getPropertyName->updateMnemonicBinding->else->if->e->getPropertyName->equals->updateDefaultBackgroundColor->super->propertyChange
BasicMenuUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicMenuUI.Handler#mousePressed(MouseEvent):::Invoked when the mouse has been clicked on the menu:::menu->if->menu->isEnabled->return->manager->MenuSelectionManager->defaultManager->if->menu->isTopLevelMenu->if->menu->isSelected->menu->getPopupMenu->isShowing->manager->clearSelectedPath->else->cnt->menu->getParent->if->me->new->MenuElementArr->manager->setSelectedPath->selectedPath->manager->getSelectedPath->if->menu->getPopupMenu->if->menu->isTopLevelMenu->menu->getDelay->menu->getPopupMenu->appendPath->else->setupPostTimer
BasicMenuUI.Handler#mouseReleased(MouseEvent):::Invoked when the mouse has been released on the menu:::menu->if->menu->isEnabled->return->manager->MenuSelectionManager->defaultManager->manager->processMouseEvent->if->e->isConsumed->manager->clearSelectedPath
BasicMenuUI.Handler#mouseEntered(MouseEvent):::Invoked when the cursor enters the menu:::menu->if->menu->isEnabled->UIManager->getBoolean->return->manager->MenuSelectionManager->defaultManager->selectedPath->manager->getSelectedPath->if->menu->isTopLevelMenu->if->menu->getPopupMenu->if->menu->getDelay->getPath->menu->getPopupMenu->appendPath->else->manager->getPath->setSelectedPath->setupPostTimer->else->if->menu->getParent->newPath->new->MenuElementArr->menu->getParent->if->BasicPopupMenuUI->getLastPopup->menu->getPopupMenu->manager->setSelectedPath
BasicMenuUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicMenuUI.Handler#mouseDragged(MouseEvent):::Invoked when a mouse button is pressed on the menu and then dragged:::menu->if->menu->isEnabled->return->MenuSelectionManager->defaultManager->processMouseEvent
BasicMenuUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicMenuUI.Handler#menuDragMouseEntered(MenuDragMouseEvent)::: handler menu drag mouse entered:::
BasicMenuUI.Handler#menuDragMouseDragged(MenuDragMouseEvent)::: handler menu drag mouse dragged:::if->menuItem->isEnabled->return->manager->e->getMenuSelectionManager->path->e->getPath->p->e->getPoint->if->menuItem->getWidth->menuItem->getHeight->menu->selectedPath->manager->getSelectedPath->if->menu->getPopupMenu->if->menu->isTopLevelMenu->menu->getDelay->e->getID->menu->getPopupMenu->appendPath->else->manager->setSelectedPath->setupPostTimer->else->if->e->getID->comp->manager->e->getComponent->e->getPoint->componentForPoint->if->manager->clearSelectedPath
BasicMenuUI.Handler#menuDragMouseExited(MenuDragMouseEvent)::: handler menu drag mouse exited:::
BasicMenuUI.Handler#menuDragMouseReleased(MenuDragMouseEvent)::: handler menu drag mouse released:::
BasicMenuUI.Handler#menuKeyTyped(MenuKeyEvent):::Open the Menu:::if->BasicPopupMenuUI->getLastPopup->return->if->BasicPopupMenuUI->getPopups->size->return->key->Character->menuItem->getMnemonic->toLowerCase->path->e->getPath->if->Character->e->getKeyChar->toLowerCase->popupMenu->getPopupMenu->newList->Arrays->asList->new->ArrayList<>->newList->add->subs->popupMenu->getSubElements->sub->BasicPopupMenuUI->findEnabledChild->if->newList->add->manager->e->getMenuSelectionManager->newPath->new->MenuElementArr->newList->toArray->manager->setSelectedPath->e->consume
BasicMenuUI.Handler#menuKeyPressed(MenuKeyEvent)::: handler menu key pressed:::
BasicMenuUI.Handler#menuKeyReleased(MenuKeyEvent)::: handler menu key released:::
BasicOptionPaneUI#loadActionMap(LazyActionMap)::: basic option pane i load action map:::map->new->Actions->put->BasicLookAndFeel->installAudioActionMap
BasicOptionPaneUI#createUI(JComponent):::Creates a new BasicOptionPaneUI instance.:::return->new->BasicOptionPaneUI
BasicOptionPaneUI#installUI(JComponent):::Installs the receiver as the L&F for the passed in JOptionPane.:::installDefaults->optionPane->createLayoutManager->setLayout->installComponents->installListeners->installKeyboardActions
BasicOptionPaneUI#uninstallUI(JComponent):::Removes the receiver from the L&F controller of the passed in split pane.:::uninstallComponents->optionPane->setLayout->uninstallKeyboardActions->uninstallListeners->uninstallDefaults
BasicOptionPaneUI#installDefaults():::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->UIManager->getDimension->LookAndFeel->installProperty
BasicOptionPaneUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicOptionPaneUI#installComponents():::Registers components.:::optionPane->createMessageArea->add->separator->createSeparator->if->optionPane->add->optionPane->createButtonArea->add->optionPane->optionPane->getComponentOrientation->applyComponentOrientation
BasicOptionPaneUI#uninstallComponents():::Unregisters components.:::optionPane->removeAll
BasicOptionPaneUI#createLayoutManager():::Returns a layout manager.:::return->new->BoxLayout
BasicOptionPaneUI#installListeners():::Registers listeners.:::if->createPropertyChangeListener->optionPane->addPropertyChangeListener
BasicOptionPaneUI#uninstallListeners():::Unregisters listeners.:::if->optionPane->removePropertyChangeListener
BasicOptionPaneUI#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicOptionPaneUI#getHandler()::: basic option pane i get handler:::if->new->Handler->return
BasicOptionPaneUI#installKeyboardActions():::Registers keyboard actions.:::map->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicOptionPaneUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicOptionPaneUI#getInputMap(int)::: basic option pane i get input map:::if->bindings->DefaultLookup->get->if->return->LookAndFeel->makeComponentInputMap->return
BasicOptionPaneUI#getMinimumOptionPaneSize():::Returns the minimum size the option pane should be:::if->return->new->Dimension->return->new->Dimension
BasicOptionPaneUI#getPreferredSize(JComponent):::If c is the JOptionPane the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the LayoutManager for the JOptionPane, and getMinimumOptionPaneSize.:::if->ourMin->getMinimumOptionPaneSize->lm->c->getLayout->if->lmSize->lm->preferredLayoutSize->if->return->Math->max->Math->max->new->Dimension->return->return->return
BasicOptionPaneUI#createMessageArea():::Messaged from installComponents to create a Container containing the body of the message:::top->new->JPanel->topBorder->DefaultLookup->get->if->top->setBorder->top->new->BorderLayout->setLayout->body->new->GridBagLayout->new->JPanel->realBody->new->BorderLayout->new->JPanel->body->setName->realBody->setName->if->getIcon->sep->new->JPanel->sep->setName->sep->new->Dimension->setPreferredSize->realBody->add->realBody->add->cons->new->GridBagConstraints->DefaultLookup->getInt->new->Insets->getMessage->getMaxCharactersPerLineCount->addMessageComponents->top->add->addIcon->return
BasicOptionPaneUI#addMessageComponents(Container, GridBagConstraints, Object, int, boolean):::Creates the appropriate object to represent msg and places it into container:::if->return->if->if->else->container->add->if->else->if->msgs->foreach->addMessageComponents->else->if->label->new->JLabel->configureMessageLabel->addMessageComponents->else->s->msg->toString->len->s->length->if->return->nl->nll->if->s->indexOf->newline->length->else->if->s->indexOf->else->if->s->indexOf->if->if->breakPanel->new->JPanel->breakPanel->setName->addMessageComponents->else->s->substring->addMessageComponents->s->substring->addMessageComponents->else->if->c->Box->createVerticalBox->c->setName->burstStringInto->addMessageComponents->else->label->new->JLabel->label->setName->configureMessageLabel->addMessageComponents
BasicOptionPaneUI#getMessage():::Returns the message to display from the JOptionPane the receiver is providing the look and feel for.:::if->if->optionPane->getWantsInput->message->optionPane->getMessage->sValues->optionPane->getSelectionValues->inputValue->optionPane->getInitialSelectionValue->toAdd->if->if->cBox->new->JComboBox<>->cBox->setName->for->counter->maxCounter->if->cBox->setSelectedItem->else->list->new->JList<>->sp->new->JScrollPane->sp->setName->list->setName->list->setVisibleRowCount->list->setSelectionMode->if->list->setSelectedValue->list->getHandler->addMouseListener->else->tf->new->MultiplexingTextField->tf->setName->tf->new->KeyStrokeArr->KeyStroke->getKeyStroke->setKeyStrokes->if->inputString->inputValue->toString->tf->setText->tf->setSelectionStart->tf->inputString->length->setSelectionEnd->tf->getHandler->addActionListener->newMessage->if->new->ObjectArr->else->new->ObjectArr->return->return->optionPane->getMessage->return
BasicOptionPaneUI#addIcon(Container):::Creates and adds a JLabel representing the icon returned from getIcon to top:::sideIcon->getIcon->if->iconLabel->new->JLabel->iconLabel->setName->iconLabel->setVerticalAlignment->top->add
BasicOptionPaneUI#getIcon():::Returns the icon from the JOptionPane the receiver is providing the look and feel for, or the default icon as returned from getDefaultIcon.:::mIcon->optionPane->getIcon->if->optionPane->getMessageType->getIconForType->return
BasicOptionPaneUI#getIconForType(int):::Returns the icon to use for the passed in type.:::if->return->propertyName->switch->break->break->break->break->if->return->DefaultLookup->get->return
BasicOptionPaneUI#getMaxCharactersPerLineCount():::Returns the maximum number of characters to place on a line.:::return->optionPane->getMaxCharactersPerLineCount
BasicOptionPaneUI#burstStringInto(Container, String, int):::Recursively creates new JLabel instances to represent d:::len->d->length->if->return->if->p->d->lastIndexOf->if->d->indexOf->if->d->substring->burstStringInto->d->substring->burstStringInto->return->label->new->JLabel->label->setName->configureMessageLabel->c->add
BasicOptionPaneUI#createSeparator():::Returns a separator.:::return
BasicOptionPaneUI#createButtonArea():::Creates and returns a Container containing the buttons:::bottom->new->JPanel->border->DefaultLookup->get->bottom->setName->if->bottom->setBorder->bottom->DefaultLookup->getBoolean->DefaultLookup->getInt->DefaultLookup->getInt->DefaultLookup->getBoolean->new->ButtonAreaLayout->setLayout->getButtons->getInitialValueIndex->addButtonComponents->return
BasicOptionPaneUI#addButtonComponents(Container, Object[], int):::Creates the appropriate object to represent each of the objects in buttons and adds it to container:::if->sizeButtonsToSame->getSizeButtonsToSameWidth->createdAll->numButtons->createdButtons->maxWidth->if->new->JButtonArr->for->counter->container->getLayout->setSyncAllWidths->if->DefaultLookup->getBoolean->aButton->padSize->for->counter
BasicOptionPaneUI#createButtonActionListener(int):::Constructs a new instance of a ButtonActionListener.:::return->new->ButtonActionListener
BasicOptionPaneUI#getButtons():::Returns the buttons to display from the JOptionPane the receiver is providing the look and feel for:::if->suppliedOptions->optionPane->getOptions->if->defaultOptions->type->optionPane->getOptionType->l->optionPane->getLocale->minimumWidth->DefaultLookup->getInt->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->return->return->return
BasicOptionPaneUI#getMnemonic(String, Locale)::: basic option pane i get mnemonic:::value->UIManager->get->if->return->try->return->Integer->parseInt->catch->finally->return
BasicOptionPaneUI#getSizeButtonsToSameWidth():::Returns true, basic L&F wants all the buttons to have the same width.:::return
BasicOptionPaneUI#getInitialValueIndex():::Returns the initial index into the buttons to select:::if->iv->optionPane->getInitialValue->options->optionPane->getOptions->if->return->else->if->for->counter->return
BasicOptionPaneUI#resetInputValue():::Sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputComponent.:::if->optionPane->getText->setInputValue->else->if->optionPane->getSelectedItem->setInputValue->else->if->optionPane->getSelectedValue->setInputValue
BasicOptionPaneUI#selectInitialValue(JOptionPane):::If inputComponent is non-null, the focus is requested on that, otherwise request focus on the default value:::if->inputComponent->requestFocus->else->if->initialFocusComponent->requestFocus->if->root->SwingUtilities->getRootPane->if->root->setDefaultButton
BasicOptionPaneUI#containsCustomComponents(JOptionPane):::Returns true if in the last call to validateComponent the message or buttons contained a subclass of Component.:::return
BasicOptionPaneUI.ButtonAreaLayout#setSyncAllWidths(boolean):::Sets if the width of children should be synchronized.:::
BasicOptionPaneUI.ButtonAreaLayout#getSyncAllWidths():::Returns if the width of children should be synchronized.:::return
BasicOptionPaneUI.ButtonAreaLayout#setPadding(int):::Sets the padding value.:::
BasicOptionPaneUI.ButtonAreaLayout#getPadding():::Returns the padding.:::return
BasicOptionPaneUI.ButtonAreaLayout#setCentersChildren(boolean):::Sets whether or not center children should be used.:::
BasicOptionPaneUI.ButtonAreaLayout#getCentersChildren():::Returns whether or not center children should be used.:::return
BasicOptionPaneUI.ButtonAreaLayout#getOrientation(Container)::: button area layout get orientation:::if->return->if->container->getComponentOrientation->isLeftToRight->return->switch->return->return->return->return
BasicOptionPaneUI.ButtonAreaLayout#addLayoutComponent(String, Component)::: button area layout add layout component:::
BasicOptionPaneUI.ButtonAreaLayout#layoutContainer(Container)::: button area layout layout container:::children->container->getComponents->if->numChildren->insets->container->getInsets->maxWidth->maxHeight->totalButtonWidth->x->xOffset->ltr->container->getComponentOrientation->isLeftToRight->reverse->for->counter->if->getSyncAllWidths->switch->getOrientation->break->container->getWidth->break->if->getCentersChildren->container->getWidth->else->if->getSyncAllWidths->container->getWidth->else->container->getWidth->break->for->counter
BasicOptionPaneUI.ButtonAreaLayout#minimumLayoutSize(Container)::: button area layout minimum layout size:::if->children->c->getComponents->if->aSize->numChildren->height->cInsets->c->getInsets->extraHeight->extraWidth->if->maxWidth->for->counter->return->new->Dimension->else->totalWidth->for->counter->return->new->Dimension->return->new->Dimension
BasicOptionPaneUI.ButtonAreaLayout#preferredLayoutSize(Container)::: button area layout preferred layout size:::return->minimumLayoutSize
BasicOptionPaneUI.ButtonAreaLayout#removeLayoutComponent(Component)::: button area layout remove layout component:::
BasicOptionPaneUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent):::If the source of the PropertyChangeEvent e equals the optionPane and is one of the ICON_PROPERTY, MESSAGE_PROPERTY, OPTIONS_PROPERTY or INITIAL_VALUE_PROPERTY, validateComponent is invoked.:::getHandler->propertyChange
BasicOptionPaneUI#configureMessageLabel(JLabel):::Configures any necessary colors/fonts for the specified label used representing the message.:::color->DefaultLookup->get->if->label->setForeground->messageFont->DefaultLookup->get->if->label->setFont
BasicOptionPaneUI#configureButton(JButton):::Configures any necessary colors/fonts for the specified button used representing the button portion of the optionpane.:::buttonFont->DefaultLookup->get->if->button->setFont
BasicOptionPaneUI.ButtonActionListener#actionPerformed(ActionEvent)::: button action listener action performed:::if->optionType->optionPane->getOptionType->options->optionPane->getOptions->if->if->resetInputValue->if->if->optionPane->Integer->valueOf->setValue->else->optionPane->Integer->valueOf->setValue->else->optionPane->setValue
BasicOptionPaneUI.Handler#actionPerformed(ActionEvent)::: handler action performed:::optionPane->e->getSource->getText->setInputValue
BasicOptionPaneUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicOptionPaneUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::
BasicOptionPaneUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicOptionPaneUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicOptionPaneUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->e->getClickCount->list->e->getSource->index->list->e->getPoint->locationToIndex->optionPane->list->getModel->getElementAt->setInputValue->optionPane->setValue
BasicOptionPaneUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::if->e->getSource->if->e->getPropertyName->op->e->getSource->isComingUp->if->e->getOldValue->else->switch->op->getMessageType->if->BasicLookAndFeel->playSound->break->if->BasicLookAndFeel->playSound->break->if->BasicLookAndFeel->playSound->break->if->BasicLookAndFeel->playSound->break->if->BasicLookAndFeel->playSound->break->op->getMessageType->println->break->changeName->e->getPropertyName->if->uninstallComponents->installComponents->optionPane->validate->else->if->o->e->getNewValue->op->e->getSource->if->e->getOldValue->op->applyComponentOrientation
BasicOptionPaneUI.MultiplexingTextField#setKeyStrokes(KeyStroke[]):::Sets the KeyStrokes that will be additional processed for ancestor bindings.:::
BasicOptionPaneUI.MultiplexingTextField#processKeyBinding(KeyStroke, KeyEvent, int, boolean)::: multiplexing text field process key binding:::processed->super->processKeyBinding->if->for->counter->return
BasicOptionPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::if->getName->optionPane->e->getSource->optionPane->Integer->valueOf->setValue
BasicOptionPaneUI.ButtonFactory#createButton()::: button factory create button:::button->if->new->ConstrainedButton->else->new->JButton->if->button->setIcon->if->button->setMnemonic->return
BasicOptionPaneUI.ButtonFactory.ConstrainedButton#getMinimumSize()::: constrained button get minimum size:::min->super->getMinimumSize->Math->max->return
BasicOptionPaneUI.ButtonFactory.ConstrainedButton#getPreferredSize()::: constrained button get preferred size:::pref->super->getPreferredSize->Math->max->return
BasicPanelUI#createUI(JComponent):::Returns an instance of BasicPanelUI.:::if->new->BasicPanelUI->return
BasicPanelUI#installUI(JComponent)::: basic panel i install i:::p->super->installUI->installDefaults
BasicPanelUI#uninstallUI(JComponent)::: basic panel i uninstall i:::p->uninstallDefaults->super->uninstallUI
BasicPanelUI#installDefaults(JPanel):::Method for installing panel properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->LookAndFeel->installProperty
BasicPanelUI#uninstallDefaults(JPanel):::Method for uninstalling panel properties.:::LookAndFeel->uninstallBorder
BasicPanelUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->border->c->getBorder->if->return->getBaseline->return
BasicPanelUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->border->c->getBorder->if->return->getBaselineResizeBehavior->return
BasicPasswordFieldUI#createUI(JComponent):::Creates a UI for a JPasswordField.:::return->new->BasicPasswordFieldUI
BasicPasswordFieldUI#getPropertyPrefix():::Fetches the name used as a key to look up properties through the UIManager:::return
BasicPasswordFieldUI#installDefaults():::Installs the necessary properties on the JPasswordField.:::super->installDefaults->prefix->getPropertyPrefix->echoChar->UIManager->getDefaults->get->if->LookAndFeel->getComponent->installProperty
BasicPasswordFieldUI#create(Element):::Creates a view (PasswordView) for an element.:::return->new->PasswordView
BasicPasswordFieldUI#createActionMap()::: basic password field i create action map:::map->super->createActionMap->if->map->get->a->map->get->if->map->remove->map->put->return
BasicPopupMenuSeparatorUI#createUI(JComponent):::Returns a new instance of BasicPopupMenuSeparatorUI.:::return->new->BasicPopupMenuSeparatorUI
BasicPopupMenuSeparatorUI#paint(Graphics, JComponent)::: basic popup menu separator i paint:::s->c->getSize->g->c->getForeground->setColor->g->drawLine->g->c->getBackground->setColor->g->drawLine
BasicPopupMenuSeparatorUI#getPreferredSize(JComponent)::: basic popup menu separator i get preferred size:::return->new->Dimension
BasicPopupMenuUI#createUI(JComponent):::Constructs a new instance of BasicPopupMenuUI.:::return->new->BasicPopupMenuUI
BasicPopupMenuUI#installUI(JComponent)::: basic popup menu i install i:::installDefaults->installListeners->installKeyboardActions
BasicPopupMenuUI#installDefaults():::Installs default properties.:::if->popupMenu->getLayout->popupMenu->getLayout->popupMenu->new->DefaultMenuLayout->setLayout->LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont
BasicPopupMenuUI#installListeners():::Registers listeners.:::if->new->BasicPopupMenuListener->popupMenu->addPopupMenuListener->if->new->BasicMenuKeyListener->popupMenu->addMenuKeyListener->context->AppContext->getAppContext->synchronized->mouseGrabber->context->get->if->new->MouseGrabber->context->put->synchronized->helper->context->get->if->new->MenuKeyboardHelper->context->put->msm->MenuSelectionManager->defaultManager->msm->addChangeListener
BasicPopupMenuUI#installKeyboardActions():::Registers keyboard actions.:::
BasicPopupMenuUI#getInputMap(JPopupMenu, JComponent)::: basic popup menu i get input map:::windowInputMap->bindings->UIManager->get->if->LookAndFeel->makeComponentInputMap->if->popup->getComponentOrientation->isLeftToRight->km->UIManager->get->if->rightToLeftInputMap->LookAndFeel->makeComponentInputMap->rightToLeftInputMap->setParent->return
BasicPopupMenuUI#getActionMap()::: basic popup menu i get action map:::return->LazyActionMap->getActionMap
BasicPopupMenuUI#loadActionMap(LazyActionMap)::: basic popup menu i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->BasicLookAndFeel->installAudioActionMap
BasicPopupMenuUI#uninstallUI(JComponent)::: basic popup menu i uninstall i:::uninstallDefaults->uninstallListeners->uninstallKeyboardActions
BasicPopupMenuUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicPopupMenuUI#uninstallListeners():::Unregisters listeners.:::if->popupMenu->removePopupMenuListener->if->popupMenu->removeMenuKeyListener
BasicPopupMenuUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicPopupMenuUI#getFirstPopup()::: basic popup menu i get first popup:::msm->MenuSelectionManager->defaultManager->p->msm->getSelectedPath->me->for->i->return
BasicPopupMenuUI#getLastPopup()::: basic popup menu i get last popup:::msm->MenuSelectionManager->defaultManager->p->msm->getSelectedPath->popup->for->i->return
BasicPopupMenuUI#getPopups()::: basic popup menu i get popups:::msm->MenuSelectionManager->defaultManager->p->msm->getSelectedPath->list->new->ArrayList<JPopupMenu>->foreach->if->list->add->return
BasicPopupMenuUI#isPopupTrigger(MouseEvent)::: basic popup menu i is popup trigger:::return->e->getID->e->getModifiers
BasicPopupMenuUI#checkInvokerEqual(MenuElement, MenuElement)::: basic popup menu i check invoker equal:::invokerPresent->present->getComponent->invokerLast->last->getComponent->if->getInvoker->if->getInvoker->return
BasicPopupMenuUI.BasicPopupMenuListener#popupMenuCanceled(PopupMenuEvent)::: basic popup menu listener popup menu canceled:::
BasicPopupMenuUI.BasicPopupMenuListener#popupMenuWillBecomeInvisible(PopupMenuEvent)::: basic popup menu listener popup menu will become invisible:::
BasicPopupMenuUI.BasicPopupMenuListener#popupMenuWillBecomeVisible(PopupMenuEvent)::: basic popup menu listener popup menu will become visible:::BasicLookAndFeel->e->getSource->playSound
BasicPopupMenuUI.BasicMenuKeyListener#menuKeyTyped(MenuKeyEvent)::: basic menu key listener menu key typed:::if->subpopup->getPopupMenu->subitem->subpopup->getSubElements->findEnabledChild->lst->Arrays->e->getPath->asList->new->ArrayList<MenuElement>->lst->add->lst->add->if->lst->add->newPath->new->MenuElementArr->lst->toArray->MenuSelectionManager->defaultManager->setSelectedPath->e->consume
BasicPopupMenuUI.BasicMenuKeyListener#menuKeyPressed(MenuKeyEvent)::: basic menu key listener menu key pressed:::keyChar->e->getKeyChar->if->Character->isLetterOrDigit->return->manager->e->getMenuSelectionManager->path->e->getPath->items->popupMenu->getSubElements->currentIndex->matches->firstMatch->indexes->for->j->if->else->if->item->if->else->if->item->isEnabled->manager->clearSelectedPath->item->doClick->e->consume->else->newItem->newPath->new->MenuElementArr->System->arraycopy->manager->setSelectedPath->e->consume
BasicPopupMenuUI.BasicMenuKeyListener#menuKeyReleased(MenuKeyEvent)::: basic menu key listener menu key released:::
BasicPopupMenuUI.BasicMenuKeyListener#lower(char)::: basic menu key listener lower:::return->Character->toLowerCase
BasicPopupMenuUI.BasicMenuKeyListener#lower(int)::: basic menu key listener lower:::return->Character->toLowerCase
BasicPopupMenuUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::key->getName->if->cancel->else->if->selectItem->else->if->selectItem->else->if->selectParentChild->else->if->selectParentChild->else->if->doReturn
BasicPopupMenuUI.Actions#doReturn()::: actions do return:::fmgr->KeyboardFocusManager->getCurrentKeyboardFocusManager->focusOwner->fmgr->getFocusOwner->if->return->msm->MenuSelectionManager->defaultManager->path->msm->getSelectedPath->lastElement->if->if->newPath->new->MenuElementArr->System->arraycopy->getPopupMenu->msm->setSelectedPath->else->if->mi->if->mi->getUI->mi->getUI->doClick->else->msm->clearSelectedPath->mi->doClick
BasicPopupMenuUI.Actions#selectParentChild(boolean)::: actions select parent child:::msm->MenuSelectionManager->defaultManager->path->msm->getSelectedPath->len->if->popupIndex->if->isTopLevelMenu->newPath->new->MenuElementArr->System->arraycopy->msm->setSelectedPath->return->else->if->isTopLevelMenu->menu->popup->menu->getPopupMenu->subs->popup->getSubElements->item->findEnabledChild->newPath->if->new->MenuElementArr->else->new->MenuElementArr->System->arraycopy->msm->setSelectedPath->return->if->currentMenu->nextMenu->getSubElements->findEnabledChild->if->newSelection->if->new->MenuElementArr->else->new->MenuElementArr->getPopupMenu->msm->setSelectedPath
BasicPopupMenuUI.Actions#selectItem(boolean)::: actions select item:::msm->MenuSelectionManager->defaultManager->path->msm->getSelectedPath->if->return->len->if->popup->newPath->new->MenuElementArr->popup->getSubElements->findEnabledChild->msm->setSelectedPath->else->if->popup->getPopupMenu->next->popup->getSubElements->findEnabledChild->newPath->if->new->MenuElementArr->else->new->MenuElementArr->System->arraycopy->msm->setSelectedPath->else->if->menu->popup->menu->getPopupMenu->next->popup->getSubElements->findEnabledChild->if->newPath->new->MenuElementArr->System->arraycopy->msm->setSelectedPath->else->if->popup->getSubElements->findEnabledChild->if->newPath->new->MenuElementArr->System->arraycopy->msm->setSelectedPath->else->subs->getSubElements->nextChild->findEnabledChild->if->findEnabledChild->if->msm->setSelectedPath
BasicPopupMenuUI.Actions#cancel()::: actions cancel:::lastPopup->getLastPopup->if->lastPopup->putClientProperty->mode->UIManager->getString->if->equals->MenuSelectionManager->defaultManager->clearSelectedPath->else->shortenSelectedPath
BasicPopupMenuUI.Actions#shortenSelectedPath()::: actions shorten selected path:::path->MenuSelectionManager->defaultManager->getSelectedPath->if->MenuSelectionManager->defaultManager->clearSelectedPath->return->value->lastElement->lastPopup->getLastPopup->if->previousElement->if->lastMenu->if->lastMenu->isEnabled->lastPopup->getComponentCount->else->if->UIManager->getBoolean->newPath->new->MenuElementArr->System->arraycopy->MenuSelectionManager->defaultManager->setSelectedPath
BasicPopupMenuUI#nextEnabledChild(MenuElement[], int, int)::: basic popup menu i next enabled child:::for->i->return
BasicPopupMenuUI#previousEnabledChild(MenuElement[], int, int)::: basic popup menu i previous enabled child:::for->i->return
BasicPopupMenuUI#findEnabledChild(MenuElement[], int, boolean)::: basic popup menu i find enabled child:::result->if->nextEnabledChild->if->nextEnabledChild->else->previousEnabledChild->if->previousEnabledChild->return
BasicPopupMenuUI#findEnabledChild(MenuElement[], MenuElement, boolean)::: basic popup menu i find enabled child:::for->i->return
BasicPopupMenuUI.MouseGrabber#uninstall()::: mouse grabber uninstall:::synchronized->MenuSelectionManager->defaultManager->removeChangeListener->ungrabWindow->AppContext->getAppContext->remove
BasicPopupMenuUI.MouseGrabber#grabWindow(MenuElement[])::: mouse grabber grab window:::tk->Toolkit->getDefaultToolkit->new->java.security.PrivilegedAction<Object>->doPrivileged->invoker->getComponent->if->getInvoker->SwingUtilities->getWindowAncestor->if->if->grab->else->grabbedWindow->addComponentListener->grabbedWindow->addWindowListener
BasicPopupMenuUI.MouseGrabber#ungrabWindow()::: mouse grabber ungrab window:::tk->Toolkit->getDefaultToolkit->new->java.security.PrivilegedAction<Object>->doPrivileged->realUngrabWindow
BasicPopupMenuUI.MouseGrabber#realUngrabWindow()::: mouse grabber real ungrab window:::tk->Toolkit->getDefaultToolkit->if->if->ungrab->else->grabbedWindow->removeComponentListener->grabbedWindow->removeWindowListener
BasicPopupMenuUI.MouseGrabber#stateChanged(ChangeEvent)::: mouse grabber state changed:::msm->MenuSelectionManager->defaultManager->p->msm->getSelectedPath->if->grabWindow->if->ungrabWindow
BasicPopupMenuUI.MouseGrabber#eventDispatched(AWTEvent)::: mouse grabber event dispatched:::if->cancelPopupMenu->return->if->return->me->src->me->getComponent->switch->me->getID->if->isInPopup->isSelected->return->if->getClientProperty->cancelPopupMenu->consumeEvent->UIManager->getBoolean->if->me->consume->break->if->if->isInPopup->break->if->MenuSelectionManager->defaultManager->processMouseEvent->break->if->if->isInPopup->break->MenuSelectionManager->defaultManager->processMouseEvent->break->if->isInPopup->isPopupVisible->isVisible->isVisible->return->cancelPopupMenu->break
BasicPopupMenuUI.MouseGrabber#isInPopup(Component)::: mouse grabber is in popup:::for->c->c->getParent->return
BasicPopupMenuUI.MouseGrabber#cancelPopupMenu()::: mouse grabber cancel popup menu:::try->popups->getPopups->foreach->popup->putClientProperty->MenuSelectionManager->defaultManager->clearSelectedPath->catch->realUngrabWindow->throw->realUngrabWindow->throw->finally
BasicPopupMenuUI.MouseGrabber#componentResized(ComponentEvent)::: mouse grabber component resized:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#componentMoved(ComponentEvent)::: mouse grabber component moved:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#componentShown(ComponentEvent)::: mouse grabber component shown:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#componentHidden(ComponentEvent)::: mouse grabber component hidden:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#windowClosing(WindowEvent)::: mouse grabber window closing:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#windowClosed(WindowEvent)::: mouse grabber window closed:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#windowIconified(WindowEvent)::: mouse grabber window iconified:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#windowDeactivated(WindowEvent)::: mouse grabber window deactivated:::cancelPopupMenu
BasicPopupMenuUI.MouseGrabber#windowOpened(WindowEvent)::: mouse grabber window opened:::
BasicPopupMenuUI.MouseGrabber#windowDeiconified(WindowEvent)::: mouse grabber window deiconified:::
BasicPopupMenuUI.MouseGrabber#windowActivated(WindowEvent)::: mouse grabber window activated:::
BasicPopupMenuUI.MenuKeyboardHelper#removeItems()::: menu keyboard helper remove items:::if->if->lastFocused->requestFocusInWindow->cfw->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusedWindow->if->cfw->getName->equals->lastFocused->requestFocus->if->invokerRootPane->removeKeyListener->invokerRootPane->setFocusTraversalKeysEnabled->removeUIInputMap->removeUIActionMap
BasicPopupMenuUI.MenuKeyboardHelper#getActivePopup(MenuElement[]):::Return the last JPopupMenu in path, or null if none found:::for->i->return
BasicPopupMenuUI.MenuKeyboardHelper#addUIInputMap(JComponent, InputMap)::: menu keyboard helper add input map:::lastNonUI->parent->c->getInputMap->while->parent->getParent->if->c->setInputMap->else->lastNonUI->setParent->map->setParent
BasicPopupMenuUI.MenuKeyboardHelper#addUIActionMap(JComponent, ActionMap)::: menu keyboard helper add action map:::lastNonUI->parent->c->getActionMap->while->parent->getParent->if->c->setActionMap->else->lastNonUI->setParent->map->setParent
BasicPopupMenuUI.MenuKeyboardHelper#removeUIInputMap(JComponent, InputMap)::: menu keyboard helper remove input map:::im->parent->c->getInputMap->while->if->if->c->map->getParent->setInputMap->else->im->map->getParent->setParent->break->parent->getParent
BasicPopupMenuUI.MenuKeyboardHelper#removeUIActionMap(JComponent, ActionMap)::: menu keyboard helper remove action map:::im->parent->c->getActionMap->while->if->if->c->map->getParent->setActionMap->else->im->map->getParent->setParent->break->parent->getParent
BasicPopupMenuUI.MenuKeyboardHelper#stateChanged(ChangeEvent)::: menu keyboard helper state changed:::if->UIManager->getLookAndFeel->uninstall->return->msm->ev->getSource->p->msm->getSelectedPath->popup->getActivePopup->if->popup->isFocusable->return->if->if->checkInvokerEqual->removeItems->new->MenuElementArr->if->invoker->if->if->getPopupMenu->else->return->else->c->popup->getInvoker->if->getRootPane->else->if->getRootPane->else->if->getRootPane->else->while->if->return->c->getParent->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->SwingUtilities->getRootPane->if->invokerRootPane->addFocusListener->invokerRootPane->requestFocus->invokerRootPane->addKeyListener->invokerRootPane->getFocusTraversalKeysEnabled->invokerRootPane->setFocusTraversalKeysEnabled->getInputMap->addUIInputMap->addUIActionMap->else->if->removeItems->else->if
BasicPopupMenuUI.MenuKeyboardHelper#keyPressed(KeyEvent)::: menu keyboard helper key pressed:::MenuSelectionManager->defaultManager->processKeyEvent
BasicPopupMenuUI.MenuKeyboardHelper#keyReleased(KeyEvent)::: menu keyboard helper key released:::if->MenuSelectionManager->defaultManager->processKeyEvent
BasicPopupMenuUI.MenuKeyboardHelper#keyTyped(KeyEvent)::: menu keyboard helper key typed:::if->MenuSelectionManager->defaultManager->processKeyEvent
BasicPopupMenuUI.MenuKeyboardHelper#uninstall()::: menu keyboard helper uninstall:::synchronized->MenuSelectionManager->defaultManager->removeChangeListener->AppContext->getAppContext->remove
BasicProgressBarUI#createUI(JComponent):::Returns a new instance of BasicProgressBarUI.:::return->new->BasicProgressBarUI
BasicProgressBarUI#installUI(JComponent)::: basic progress bar i install i:::installDefaults->installListeners->if->progressBar->isIndeterminate->initIndeterminateValues
BasicProgressBarUI#uninstallUI(JComponent)::: basic progress bar i uninstall i:::if->progressBar->isIndeterminate->cleanUpIndeterminateValues->uninstallDefaults->uninstallListeners
BasicProgressBarUI#installDefaults():::Installs default properties.:::LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->UIManager->getInt->if->UIManager->getInt->UIManager->getColor->UIManager->getColor
BasicProgressBarUI#uninstallDefaults():::Unintalls default properties.:::LookAndFeel->uninstallBorder
BasicProgressBarUI#installListeners():::Registers listeners.:::getHandler->progressBar->addChangeListener->progressBar->getHandler->addPropertyChangeListener
BasicProgressBarUI#getHandler()::: basic progress bar i get handler:::if->new->Handler->return
BasicProgressBarUI#startAnimationTimer():::Starts the animation thread, creating and initializing it if necessary:::if->new->Animator->animator->getRepaintInterval->start
BasicProgressBarUI#stopAnimationTimer():::Stops the animation thread:::if->animator->stop
BasicProgressBarUI#uninstallListeners():::Removes all listeners installed by this object.:::progressBar->removeChangeListener->progressBar->getHandler->removePropertyChangeListener
BasicProgressBarUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->if->progressBar->isStringPainted->progressBar->getOrientation->metrics->progressBar->progressBar->getFont->getFontMetrics->insets->progressBar->getInsets->y->return->metrics->getAscent->metrics->getLeading->metrics->getDescent->return
BasicProgressBarUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->progressBar->isStringPainted->progressBar->getOrientation->return->return
BasicProgressBarUI#getPreferredInnerHorizontal():::Returns preferred size of the horizontal JProgressBar.:::horizDim->DefaultLookup->get->if->new->Dimension->return
BasicProgressBarUI#getPreferredInnerVertical():::Returns preferred size of the vertical JProgressBar.:::vertDim->DefaultLookup->get->if->new->Dimension->return
BasicProgressBarUI#getSelectionForeground():::The "selectionForeground" is the color of the text when it is painted over a filled area of the progress bar.:::return
BasicProgressBarUI#getSelectionBackground():::The "selectionBackground" is the color of the text when it is painted over an unfilled area of the progress bar.:::return
BasicProgressBarUI#getCachedPercent()::: basic progress bar i get cached percent:::return
BasicProgressBarUI#setCachedPercent(int)::: basic progress bar i set cached percent:::
BasicProgressBarUI#getCellLength():::Returns the width (if HORIZONTAL) or height (if VERTICAL) of each of the individual cells/units to be rendered in the progress bar:::if->progressBar->isStringPainted->return->else->return
BasicProgressBarUI#setCellLength(int):::Sets the cell length.:::
BasicProgressBarUI#getCellSpacing():::Returns the spacing between each of the cells/units in the progress bar:::if->progressBar->isStringPainted->return->else->return
BasicProgressBarUI#setCellSpacing(int):::Sets the cell spacing.:::
BasicProgressBarUI#getAmountFull(Insets, int, int):::This determines the amount of the progress bar that should be filled based on the percent done gathered from the model:::amountFull->model->progressBar->getModel->if->model->getMaximum->model->getMinimum->if->progressBar->getOrientation->Math->progressBar->getPercentComplete->round->else->Math->progressBar->getPercentComplete->round->return
BasicProgressBarUI#paint(Graphics, JComponent):::Delegates painting to one of two methods: paintDeterminate or paintIndeterminate.:::if->progressBar->isIndeterminate->paintIndeterminate->else->paintDeterminate
BasicProgressBarUI#getBox(Rectangle):::Stores the position and size of the bouncing box that would be painted for the current animation index in r and returns r:::currentFrame->getAnimationIndex->middleFrame->if->sizeChanged->updateSizes->getGenericBox->if->return->if->return->if->progressBar->getOrientation->if->Math->round->else->Math->round->else->if->Math->round->else->Math->round->return
BasicProgressBarUI#updateSizes():::Updates delta, max position:::length->if->progressBar->getOrientation->getBoxLength->else->getBoxLength
BasicProgressBarUI#getGenericBox(Rectangle):::Assumes that the component innards, max position, etc:::if->new->Rectangle->if->progressBar->getOrientation->getBoxLength->if->else->else->getBoxLength->if->else->return
BasicProgressBarUI#getBoxLength(int, int):::Returns the length of the "bouncing box" to be painted:::return->Math->round
BasicProgressBarUI#paintIndeterminate(Graphics, JComponent):::All purpose paint method that should do the right thing for all linear bouncing-box progress bars:::if->return->b->progressBar->getInsets->barRectWidth->progressBar->getWidth->barRectHeight->progressBar->getHeight->if->return->g2->getBox->if->g2->progressBar->getForeground->setColor->g2->fillRect->if->progressBar->isStringPainted->if->progressBar->getOrientation->paintString->else->paintString
BasicProgressBarUI#paintDeterminate(Graphics, JComponent):::All purpose paint method that should do the right thing for almost all linear, determinate progress bars:::if->return->b->progressBar->getInsets->barRectWidth->progressBar->getWidth->barRectHeight->progressBar->getHeight->if->return->cellLength->getCellLength->cellSpacing->getCellSpacing->amountFull->getAmountFull->g2->g2->progressBar->getForeground->setColor->if->progressBar->getOrientation->if->g2->new->BasicStroke->setStroke->else->g2->new->floatArr->new->BasicStroke->setStroke->if->BasicGraphicsUtils->isLeftToRight->g2->drawLine->else->g2->drawLine->else->if->g2->new->BasicStroke->setStroke->else->g2->new->floatArr->new->BasicStroke->setStroke->g2->drawLine->if->progressBar->isStringPainted->paintString
BasicProgressBarUI#paintString(Graphics, int, int, int, int, int, Insets):::Paints the progress string.:::if->progressBar->getOrientation->if->BasicGraphicsUtils->isLeftToRight->if->progressBar->isIndeterminate->getBox->paintString->else->paintString->else->paintString->else->if->progressBar->isIndeterminate->getBox->paintString->else->paintString
BasicProgressBarUI#paintString(Graphics, int, int, int, int, int, int, Insets):::Paints the progress string.:::if->return->g2->progressString->progressBar->getString->g2->progressBar->getFont->setFont->renderLocation->getStringPlacement->oldClip->g2->getClipBounds->if->progressBar->getOrientation->g2->getSelectionBackground->setColor->SwingUtilities2->drawString->g2->getSelectionForeground->setColor->g2->clipRect->SwingUtilities2->drawString->else->g2->getSelectionBackground->setColor->rotate->AffineTransform->getRotateInstance->g2->progressBar->getFont->deriveFont->setFont->getStringPlacement->SwingUtilities2->drawString->g2->getSelectionForeground->setColor->g2->clipRect->SwingUtilities2->drawString->g2->setClip
BasicProgressBarUI#getStringPlacement(Graphics, String, int, int, int, int):::Designate the place where the progress string will be painted:::fontSizer->SwingUtilities2->progressBar->getFont->getFontMetrics->stringWidth->SwingUtilities2->stringWidth->if->progressBar->getOrientation->return->Math->round->fontSizer->getAscent->fontSizer->getLeading->fontSizer->getDescent->new->Point->else->return->fontSizer->getAscent->fontSizer->getLeading->fontSizer->getDescent->Math->round->new->Point
BasicProgressBarUI#getPreferredSize(JComponent)::: basic progress bar i get preferred size:::size->border->progressBar->getInsets->fontSizer->progressBar->progressBar->getFont->getFontMetrics->if->progressBar->getOrientation->getPreferredInnerHorizontal->new->Dimension->if->progressBar->isStringPainted->progString->progressBar->getString->stringWidth->SwingUtilities2->stringWidth->if->stringHeight->fontSizer->getHeight->fontSizer->getDescent->if->else->getPreferredInnerVertical->new->Dimension->if->progressBar->isStringPainted->progString->progressBar->getString->stringHeight->fontSizer->getHeight->fontSizer->getDescent->if->stringWidth->SwingUtilities2->stringWidth->if->return
BasicProgressBarUI#getMinimumSize(JComponent):::The Minimum size for this component is 10:::pref->getPreferredSize->if->progressBar->getOrientation->else->return
BasicProgressBarUI#getMaximumSize(JComponent)::: basic progress bar i get maximum size:::pref->getPreferredSize->if->progressBar->getOrientation->else->return
BasicProgressBarUI#getAnimationIndex():::Gets the index of the current animation frame.:::return
BasicProgressBarUI#getFrameCount():::Returns the number of frames for the complete animation loop used by an indeterminate JProgessBar:::return
BasicProgressBarUI#setAnimationIndex(int):::Sets the index of the current animation frame to the specified value and requests that the progress bar be repainted:::if->if->sizeChanged->progressBar->repaint->return->getBox->if->getBox->if->nextPaintRect->add->else->return->if->progressBar->repaint->else->progressBar->repaint
BasicProgressBarUI#sizeChanged()::: basic progress bar i size changed:::if->return->oldComponentInnards->setRect->SwingUtilities->calculateInnerArea->return->oldComponentInnards->equals
BasicProgressBarUI#incrementAnimationIndex():::Sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted:::newValue->getAnimationIndex->if->setAnimationIndex->else->setAnimationIndex
BasicProgressBarUI#getRepaintInterval():::Returns the desired number of milliseconds between repaints:::return
BasicProgressBarUI#initRepaintInterval()::: basic progress bar i init repaint interval:::DefaultLookup->getInt->return
BasicProgressBarUI#getCycleTime():::Returns the number of milliseconds per animation cycle:::return
BasicProgressBarUI#initCycleTime()::: basic progress bar i init cycle time:::DefaultLookup->getInt->return
BasicProgressBarUI#initIndeterminateDefaults():::Initialize cycleTime, repaintInterval, numFrames, animationIndex.:::initRepaintInterval->initCycleTime->if->if->else->factor->Math->ceil
BasicProgressBarUI#initIndeterminateValues():::Invoked by PropertyChangeHandler:::initIndeterminateDefaults->initAnimationIndex->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->progressBar->getHandler->addHierarchyListener->if->progressBar->isDisplayable->startAnimationTimer
BasicProgressBarUI#cleanUpIndeterminateValues():::Invoked by PropertyChangeHandler.:::if->progressBar->isDisplayable->stopAnimationTimer->progressBar->getHandler->removeHierarchyListener
BasicProgressBarUI#initAnimationIndex()::: basic progress bar i init animation index:::if->progressBar->getOrientation->BasicGraphicsUtils->isLeftToRight->setAnimationIndex->else->setAnimationIndex
BasicProgressBarUI.Animator#start(int):::Creates a timer if one doesn't already exist, then starts the timer thread.:::if->new->Timer->else->timer->setDelay->if->timer->setRepeats->timer->setCoalesce->timer->start
BasicProgressBarUI.Animator#stop():::Stops the timer thread.:::timer->stop
BasicProgressBarUI.Animator#actionPerformed(ActionEvent):::Reacts to the timer's action events.:::if->time->System->currentTimeMillis->if->nextDelay->getRepaintInterval->if->timer->setInitialDelay->timer->start->incrementAnimationIndex
BasicProgressBarUI.ChangeHandler#stateChanged(ChangeEvent)::: change handler state changed:::getHandler->stateChanged
BasicProgressBarUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::model->progressBar->getModel->newRange->model->getMaximum->model->getMinimum->newPercent->oldPercent->getCachedPercent->if->model->getValue->else->if->setCachedPercent->progressBar->repaint
BasicProgressBarUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::prop->e->getPropertyName->if->if->progressBar->isIndeterminate->initIndeterminateValues->else->cleanUpIndeterminateValues->progressBar->repaint
BasicProgressBarUI.Handler#hierarchyChanged(HierarchyEvent)::: handler hierarchy changed:::if->he->getChangeFlags->if->progressBar->isIndeterminate->if->progressBar->isDisplayable->startAnimationTimer->else->stopAnimationTimer
BasicRadioButtonMenuItemUI#createUI(JComponent):::Returns a new instance of BasicRadioButtonMenuItemUI.:::return->new->BasicRadioButtonMenuItemUI
BasicRadioButtonMenuItemUI#getPropertyPrefix()::: basic radio button menu item i get property prefix:::return
BasicRadioButtonMenuItemUI#processMouseEvent(JMenuItem, MouseEvent, MenuElement[], MenuSelectionManager):::Invoked when mouse event occurs.:::p->e->getPoint->if->item->getWidth->item->getHeight->if->e->getID->manager->clearSelectedPath->item->doClick->item->setArmed->else->manager->setSelectedPath->else->if->item->getModel->isArmed->newPath->new->MenuElementArr->i->c->for->manager->setSelectedPath
BasicRadioButtonUI#createUI(JComponent):::Returns an instance of BasicRadioButtonUI.:::appContext->AppContext->getAppContext->radioButtonUI->appContext->get->if->new->BasicRadioButtonUI->appContext->put->return
BasicRadioButtonUI#getPropertyPrefix()::: basic radio button i get property prefix:::return
BasicRadioButtonUI#installDefaults(AbstractButton)::: basic radio button i install defaults:::super->installDefaults->if->UIManager->getPropertyPrefix->getIcon
BasicRadioButtonUI#uninstallDefaults(AbstractButton)::: basic radio button i uninstall defaults:::super->uninstallDefaults
BasicRadioButtonUI#getDefaultIcon():::Returns the default icon.:::return
BasicRadioButtonUI#installListeners(AbstractButton)::: basic radio button i install listeners:::super->installListeners->if->return->createKeyListener->button->addKeyListener->button->setFocusTraversalKeysEnabled->button->getActionMap->new->SelectPreviousBtn->put->button->getActionMap->new->SelectNextBtn->put->button->getInputMap->KeyStroke->getKeyStroke->put->button->getInputMap->KeyStroke->getKeyStroke->put->button->getInputMap->KeyStroke->getKeyStroke->put->button->getInputMap->KeyStroke->getKeyStroke->put
BasicRadioButtonUI#uninstallListeners(AbstractButton)::: basic radio button i uninstall listeners:::super->uninstallListeners->if->return->button->getActionMap->remove->button->getActionMap->remove->button->getInputMap->KeyStroke->getKeyStroke->remove->button->getInputMap->KeyStroke->getKeyStroke->remove->button->getInputMap->KeyStroke->getKeyStroke->remove->button->getInputMap->KeyStroke->getKeyStroke->remove->if->button->removeKeyListener
BasicRadioButtonUI#paint(Graphics, JComponent):::paint the radio button:::b->model->b->getModel->f->c->getFont->g->setFont->fm->SwingUtilities2->getFontMetrics->i->c->getInsets->b->getSize->altIcon->b->getIcon->selectedIcon->disabledIcon->text->SwingUtilities->b->getText->getDefaultIcon->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getText->b->getIconTextGap->layoutCompoundLabel->if->c->isOpaque->g->b->getBackground->setColor->g->fillRect->if->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->else->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->b->getSelectedIcon->else->if->model->isSelected->if->b->isRolloverEnabled->model->isRollover->b->getRolloverSelectedIcon->if->b->getSelectedIcon->else->b->getSelectedIcon->else->if->b->isRolloverEnabled->model->isRollover->b->getRolloverIcon->if->b->getIcon->altIcon->paintIcon->else->getDefaultIcon->paintIcon->if->v->c->getClientProperty->if->v->paint->else->paintText->if->b->hasFocus->b->isFocusPainted->paintFocus
BasicRadioButtonUI#paintFocus(Graphics, Rectangle, Dimension):::Paints focused radio button.:::
BasicRadioButtonUI#getPreferredSize(JComponent):::The preferred size of the radio button:::if->c->getComponentCount->return->b->text->b->getText->buttonIcon->b->getIcon->if->getDefaultIcon->font->b->getFont->fm->b->getFontMetrics->SwingUtilities->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getIconTextGap->layoutCompoundLabel->x1->Math->min->x2->Math->max->y1->Math->min->y2->Math->max->width->height->b->getInsets->return->new->Dimension
BasicRadioButtonUI#createKeyListener():::Creates the key listener to handle tab navigation in JRadioButton Group.:::if->new->KeyHandler->return
BasicRadioButtonUI#isValidRadioButtonObj(Object)::: basic radio button i is valid radio button obj:::return->isVisible->isEnabled
BasicRadioButtonUI#selectRadioButton(ActionEvent, boolean):::Select radio button based on "Previous" or "Next" operation:::eventSrc->event->getSource->if->isValidRadioButtonObj->return->btnGroupInfo->new->ButtonGroupInfo->btnGroupInfo->selectNewButton
BasicRadioButtonUI.SelectPreviousBtn#actionPerformed(ActionEvent)::: select previous btn action performed:::BasicRadioButtonUI.this->selectRadioButton
BasicRadioButtonUI.SelectNextBtn#actionPerformed(ActionEvent)::: select next btn action performed:::BasicRadioButtonUI.this->selectRadioButton
BasicRadioButtonUI.ButtonGroupInfo#containsInGroup(Object)::: button group info contains in group:::return->btnsInGroup->contains
BasicRadioButtonUI.ButtonGroupInfo#getFocusTransferBaseComponent(boolean)::: button group info get focus transfer base component:::return
BasicRadioButtonUI.ButtonGroupInfo#getButtonGroupInfo()::: button group info get button group info:::if->return->btnsInGroup->clear->model->activeBtn->getModel->if->return->bm->group->bm->getGroup->if->return->e->group->getElements->if->return->while->e->hasMoreElements->curElement->e->nextElement->if->isValidRadioButtonObj->continue->btnsInGroup->add->if->if->else->if->else->if->return
BasicRadioButtonUI.ButtonGroupInfo#selectNewButton(boolean):::Find the new radio button that focus needs to be moved to in the group, select the button:::if->getButtonGroupInfo->return->if->newSelectedBtn->if->else->if->btnModel->newSelectedBtn->getModel->btnModel->setPressed->btnModel->setArmed->newSelectedBtn->requestFocusInWindow->newSelectedBtn->setSelected->btnModel->setPressed->btnModel->setArmed
BasicRadioButtonUI.ButtonGroupInfo#jumpToNextComponent(boolean):::Find the button group the passed in JRadioButton belongs to, and move focus to next component of the last button in the group or previous component of first button:::if->getButtonGroupInfo->if->else->return->compTransferFocusFrom->focusBase->getFocusTransferBaseComponent->if->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->focusNextComponent->else->KeyboardFocusManager->getCurrentKeyboardFocusManager->focusPreviousComponent
BasicRadioButtonUI.KeyHandler#keyPressed(KeyEvent)::: key handler key pressed:::stroke->AWTKeyStroke->getAWTKeyStrokeForEvent->if->e->getSource->source->e->getSource->next->isFocusTraversalKey->if->isFocusTraversalKey->e->consume->btnGroupInfo->new->ButtonGroupInfo->btnGroupInfo->jumpToNextComponent
BasicRadioButtonUI.KeyHandler#isFocusTraversalKey(JComponent, int, AWTKeyStroke)::: key handler is focus traversal key:::keys->c->getFocusTraversalKeys->return->keys->contains
BasicRadioButtonUI.KeyHandler#keyReleased(KeyEvent)::: key handler key released:::
BasicRadioButtonUI.KeyHandler#keyTyped(KeyEvent)::: key handler key typed:::
BasicRootPaneUI#createUI(JComponent):::Returns a new instance of BasicRootPaneUI.:::return
BasicRootPaneUI#installUI(JComponent)::: basic root pane i install i:::installDefaults->installComponents->installListeners->installKeyboardActions
BasicRootPaneUI#uninstallUI(JComponent)::: basic root pane i uninstall i:::uninstallDefaults->uninstallComponents->uninstallListeners->uninstallKeyboardActions
BasicRootPaneUI#installDefaults(JRootPane):::Installs default properties.:::LookAndFeel->installProperty
BasicRootPaneUI#installComponents(JRootPane):::Installs components.:::
BasicRootPaneUI#installListeners(JRootPane):::Registers listeners.:::root->addPropertyChangeListener
BasicRootPaneUI#installKeyboardActions(JRootPane):::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->updateDefaultButtonBindings
BasicRootPaneUI#uninstallDefaults(JRootPane):::Uninstalls default properties.:::
BasicRootPaneUI#uninstallComponents(JRootPane):::Unregisters components.:::
BasicRootPaneUI#uninstallListeners(JRootPane):::Unregisters listeners.:::root->removePropertyChangeListener
BasicRootPaneUI#uninstallKeyboardActions(JRootPane):::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicRootPaneUI#getInputMap(int, JComponent)::: basic root pane i get input map:::if->return->DefaultLookup->get->if->return->createInputMap->return
BasicRootPaneUI#createInputMap(int, JComponent)::: basic root pane i create input map:::return->new->RootPaneInputMap
BasicRootPaneUI#loadActionMap(LazyActionMap)::: basic root pane i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicRootPaneUI#updateDefaultButtonBindings(JRootPane):::Invoked when the default button property has changed:::km->SwingUtilities->getUIInputMap->while->km->getParent->if->km->clear->if->root->getDefaultButton->bindings->DefaultLookup->get->if->LookAndFeel->loadKeyBindings
BasicRootPaneUI#propertyChange(PropertyChangeEvent):::Invoked when a property changes on the root pane:::if->e->getPropertyName->equals->rootpane->e->getSource->updateDefaultButtonBindings->if->rootpane->getClientProperty->rootpane->e->getNewValue->putClientProperty
BasicRootPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::root->evt->getSource->owner->root->getDefaultButton->key->getName->if->c->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->src->jpm->src->getComponentPopupMenu->if->pt->src->getPopupLocation->if->vis->src->getVisibleRect->new->Point->jpm->show->else->if->SwingUtilities->getRootPane->if->owner->doClick
BasicRootPaneUI.Actions#accept(Object)::: actions accept:::key->getName->if->elems->MenuSelectionManager->defaultManager->getSelectedPath->if->return->c->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->src->return->src->getComponentPopupMenu->return->if->owner->getDefaultButton->return->owner->getModel->isEnabled->owner->isShowing->return
BasicScrollBarUI#loadActionMap(LazyActionMap)::: basic scroll bar i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicScrollBarUI#createUI(JComponent):::Creates the UI.:::return->new->BasicScrollBarUI
BasicScrollBarUI#configureScrollBarColors():::Configures the scroll bar colors.:::LookAndFeel->installColors->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor
BasicScrollBarUI#installUI(JComponent):::Installs the UI.:::new->Rectangle->new->Rectangle->installDefaults->installComponents->installListeners->installKeyboardActions
BasicScrollBarUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallListeners->uninstallDefaults->uninstallComponents->uninstallKeyboardActions
BasicScrollBarUI#installDefaults():::Installs the defaults.:::UIManager->getInt->if->UIManager->get->UIManager->get->absB->UIManager->get->absB->booleanValue->if->scrollbar->getLayout->scrollbar->getLayout->scrollbar->setLayout->configureScrollBarColors->LookAndFeel->installBorder->LookAndFeel->installProperty->scrollbar->getValue->UIManager->getInt->UIManager->getInt->scaleKey->scrollbar->getClientProperty->if->if->equals->else->if->equals->else->if->equals
BasicScrollBarUI#installComponents():::Installs the components.:::switch->scrollbar->getOrientation->createIncreaseButton->createDecreaseButton->break->if->scrollbar->getComponentOrientation->isLeftToRight->createIncreaseButton->createDecreaseButton->else->createIncreaseButton->createDecreaseButton->break->scrollbar->add->scrollbar->add->scrollbar->scrollbar->isEnabled->setEnabled
BasicScrollBarUI#uninstallComponents():::Uninstalls the components.:::scrollbar->remove->scrollbar->remove
BasicScrollBarUI#installListeners():::Installs the listeners.:::createTrackListener->createArrowButtonListener->createModelListener->createPropertyChangeListener->scrollbar->addMouseListener->scrollbar->addMouseMotionListener->scrollbar->getModel->addChangeListener->scrollbar->addPropertyChangeListener->scrollbar->getHandler->addFocusListener->if->incrButton->addMouseListener->if->decrButton->addMouseListener->createScrollListener->new->Timer->scrollTimer->setInitialDelay
BasicScrollBarUI#installKeyboardActions():::Installs the keyboard actions.:::LazyActionMap->installLazyActionMap->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap
BasicScrollBarUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicScrollBarUI#getInputMap(int)::: basic scroll bar i get input map:::if->keyMap->DefaultLookup->get->rtlKeyMap->if->scrollbar->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->else->if->keyMap->DefaultLookup->get->rtlKeyMap->if->scrollbar->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicScrollBarUI#uninstallListeners():::Uninstall the listeners.:::scrollTimer->stop->if->decrButton->removeMouseListener->if->incrButton->removeMouseListener->scrollbar->getModel->removeChangeListener->scrollbar->removeMouseListener->scrollbar->removeMouseMotionListener->scrollbar->removePropertyChangeListener->scrollbar->getHandler->removeFocusListener
BasicScrollBarUI#uninstallDefaults():::Uninstalls the defaults.:::LookAndFeel->uninstallBorder->if->scrollbar->getLayout->scrollbar->setLayout
BasicScrollBarUI#getHandler()::: basic scroll bar i get handler:::if->new->Handler->return
BasicScrollBarUI#createTrackListener():::Creates a track listener.:::return->new->TrackListener
BasicScrollBarUI#createArrowButtonListener():::Creates an arrow button listener.:::return->new->ArrowButtonListener
BasicScrollBarUI#createModelListener():::Creates a model listener.:::return->new->ModelListener
BasicScrollBarUI#createScrollListener():::Creates a scroll listener.:::return->new->ScrollListener
BasicScrollBarUI#createPropertyChangeListener():::Creates a property change listener.:::return->getHandler
BasicScrollBarUI#updateThumbState(int, int)::: basic scroll bar i update thumb state:::rect->getThumbBounds->rect->contains->setThumbRollover
BasicScrollBarUI#setThumbRollover(boolean):::Sets whether or not the mouse is currently over the thumb.:::if->scrollbar->getThumbBounds->repaint
BasicScrollBarUI#isThumbRollover():::Returns true if the mouse is currently over the thumb.:::return
BasicScrollBarUI#paint(Graphics, JComponent)::: basic scroll bar i paint:::getTrackBounds->paintTrack->thumbBounds->getThumbBounds->if->thumbBounds->g->getClipBounds->intersects->paintThumb
BasicScrollBarUI#getPreferredSize(JComponent):::A vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb:::return->scrollbar->getOrientation->new->Dimension->new->Dimension
BasicScrollBarUI#getMaximumSize(JComponent)::: basic scroll bar i get maximum size:::return->new->Dimension
BasicScrollBarUI#createDecreaseButton(int):::Creates a decrease button.:::return->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton
BasicScrollBarUI#createIncreaseButton(int):::Creates an increase button.:::return->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton
BasicScrollBarUI#paintDecreaseHighlight(Graphics):::Paints the decrease highlight.:::insets->scrollbar->getInsets->thumbR->getThumbBounds->g->setColor->if->scrollbar->getOrientation->x->y->w->scrollbar->getWidth->h->g->fillRect->else->x->w->if->scrollbar->getComponentOrientation->isLeftToRight->else->y->h->scrollbar->getHeight->g->fillRect
BasicScrollBarUI#paintIncreaseHighlight(Graphics):::Paints the increase highlight.:::insets->scrollbar->getInsets->thumbR->getThumbBounds->g->setColor->if->scrollbar->getOrientation->x->y->w->scrollbar->getWidth->h->g->fillRect->else->x->w->if->scrollbar->getComponentOrientation->isLeftToRight->else->y->h->scrollbar->getHeight->g->fillRect
BasicScrollBarUI#paintTrack(Graphics, JComponent, Rectangle):::Paints the track.:::g->setColor->g->fillRect->if->paintDecreaseHighlight->else->if->paintIncreaseHighlight
BasicScrollBarUI#paintThumb(Graphics, JComponent, Rectangle):::Paints the thumb.:::if->thumbBounds->isEmpty->scrollbar->isEnabled->return->w->h->g->translate->g->setColor->drawRect->g->setColor->g->fillRect->g->setColor->drawVLine->drawHLine->g->setColor->drawHLine->drawVLine->g->translate
BasicScrollBarUI#getMinimumThumbSize():::Returns the smallest acceptable size for the thumb:::return
BasicScrollBarUI#getMaximumThumbSize():::Returns the largest acceptable size for the thumb:::return
BasicScrollBarUI#addLayoutComponent(String, Component)::: basic scroll bar i add layout component:::
BasicScrollBarUI#removeLayoutComponent(Component)::: basic scroll bar i remove layout component:::
BasicScrollBarUI#preferredLayoutSize(Container)::: basic scroll bar i preferred layout size:::return->getPreferredSize
BasicScrollBarUI#minimumLayoutSize(Container)::: basic scroll bar i minimum layout size:::return->getMinimumSize
BasicScrollBarUI#getValue(JScrollBar)::: basic scroll bar i get value:::return->sb->getValue
BasicScrollBarUI#layoutVScrollbar(JScrollBar):::Laysouts a  vertical scroll bar.:::sbSize->sb->getSize->sbInsets->sb->getInsets->itemW->itemX->squareButtons->DefaultLookup->getBoolean->decrButtonH->decrButton->getPreferredSize->decrButtonY->incrButtonH->incrButton->getPreferredSize->incrButtonY->sbInsetsH->sbButtonsH->gaps->trackH->min->sb->getMinimum->extent->sb->getVisibleAmount->range->sb->getMaximum->value->getValue->thumbH->getMaximumThumbSize->Math->getMinimumThumbSize->max->Math->getMaximumThumbSize->min->thumbY->if->sb->getMaximum->sb->getVisibleAmount->thumbRange->sbAvailButtonH->if->decrButton->setBounds->incrButton->setBounds->itrackY->itrackH->trackRect->setBounds->if->if->UIManager->getBoolean->setThumbBounds->else->setThumbBounds->else->if->if->setThumbBounds
BasicScrollBarUI#layoutHScrollbar(JScrollBar):::Laysouts a  vertical scroll bar.:::sbSize->sb->getSize->sbInsets->sb->getInsets->itemH->itemY->ltr->sb->getComponentOrientation->isLeftToRight->squareButtons->DefaultLookup->getBoolean->leftButtonW->decrButton->getPreferredSize->rightButtonW->incrButton->getPreferredSize->if->temp->leftButtonX->rightButtonX->leftGap->rightGap->sbInsetsW->sbButtonsW->trackW->min->sb->getMinimum->max->sb->getMaximum->extent->sb->getVisibleAmount->range->value->getValue->thumbW->getMaximumThumbSize->Math->getMinimumThumbSize->max->Math->getMaximumThumbSize->min->thumbX->if->sb->getVisibleAmount->thumbRange->if->else->sbAvailButtonW->if->setBounds->setBounds->itrackX->itrackW->trackRect->setBounds->if->if->UIManager->getBoolean->setThumbBounds->else->setThumbBounds->else->if->if->setThumbBounds
BasicScrollBarUI#layoutContainer(Container)::: basic scroll bar i layout container:::if->return->scrollbar->switch->scrollbar->getOrientation->layoutVScrollbar->break->layoutHScrollbar->break
BasicScrollBarUI#setThumbBounds(int, int, int, int):::Set the bounds of the thumb and force a repaint that includes the old thumbBounds and the new one.:::if->return->minX->Math->min->minY->Math->min->maxX->Math->max->maxY->Math->max->thumbRect->setBounds->scrollbar->repaint->setThumbRollover
BasicScrollBarUI#getThumbBounds():::Return the current size/location of the thumb:::return
BasicScrollBarUI#getTrackBounds():::Returns the current bounds of the track, i.e:::return
BasicScrollBarUI#scrollByBlock(JScrollBar, int)::: basic scroll bar i scroll by block:::oldValue->scrollbar->getValue->blockIncrement->scrollbar->getBlockIncrement->delta->newValue->if->scrollbar->getMaximum->else->if->scrollbar->getMinimum->scrollbar->setValue
BasicScrollBarUI#scrollByBlock(int):::Scrolls by block.:::scrollByBlock->dirtyRect->getTrackBounds->scrollbar->repaint
BasicScrollBarUI#scrollByUnits(JScrollBar, int, int, boolean)::: basic scroll bar i scroll by units:::delta->limit->if->if->scrollbar->getValue->scrollbar->getBlockIncrement->else->scrollbar->getValue->scrollbar->getBlockIncrement->for->i
BasicScrollBarUI#scrollByUnit(int):::Scrolls by unit.:::scrollByUnits
BasicScrollBarUI#getSupportsAbsolutePositioning():::Indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button).:::return
BasicScrollBarUI.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::if->scrollbar->getValue->layoutContainer
BasicScrollBarUI.TrackListener#mouseReleased(MouseEvent)::: track listener mouse released:::if->e->getX->e->getY->updateThumbState->if->SwingUtilities->isRightMouseButton->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->return->if->scrollbar->isEnabled->return->r->getTrackBounds->scrollbar->repaint->setDragging->scrollTimer->stop->scrollbar->setValueIsAdjusting
BasicScrollBarUI.TrackListener#mousePressed(MouseEvent):::If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page:::if->SwingUtilities->isRightMouseButton->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->return->if->scrollbar->isEnabled->return->if->scrollbar->hasFocus->scrollbar->isRequestFocusEnabled->scrollbar->requestFocus->scrollbar->setValueIsAdjusting->e->getX->e->getY->if->getThumbBounds->contains->switch->scrollbar->getOrientation->getThumbBounds->break->getThumbBounds->break->setDragging->return->else->if->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->switch->scrollbar->getOrientation->getThumbBounds->break->getThumbBounds->break->setDragging->setValueFrom->return->setDragging->sbSize->scrollbar->getSize->switch->scrollbar->getOrientation->if->getThumbBounds->isEmpty->scrollbarCenter->else->thumbY->getThumbBounds->break->if->getThumbBounds->isEmpty->scrollbarCenter->else->thumbX->getThumbBounds->if->scrollbar->getComponentOrientation->isLeftToRight->break->scrollByBlock->scrollTimer->stop->scrollListener->setDirection->scrollListener->setScrollByBlock->startScrollTimerIfNecessary
BasicScrollBarUI.TrackListener#mouseDragged(MouseEvent):::Set the models value to the position of the thumb's top of Vertical scrollbar, or the left/right of Horizontal scrollbar in left-to-right/right-to-left scrollbar relative to the origin of the track.:::if->SwingUtilities->isRightMouseButton->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->return->if->scrollbar->isEnabled->getThumbBounds->isEmpty->return->if->setValueFrom->else->e->getX->e->getY->updateThumbState->startScrollTimerIfNecessary
BasicScrollBarUI.TrackListener#setValueFrom(MouseEvent)::: track listener set value from:::active->isThumbRollover->model->scrollbar->getModel->thumbR->getThumbBounds->trackLength->thumbMin->thumbMax->thumbPos->if->scrollbar->getOrientation->Math->Math->e->getY->max->min->setThumbBounds->getTrackBounds->else->Math->Math->e->getX->max->min->setThumbBounds->getTrackBounds->if->if->scrollbar->getOrientation->scrollbar->getComponentOrientation->isLeftToRight->scrollbar->model->getMaximum->model->getExtent->setValue->else->scrollbar->model->getMinimum->setValue->else->valueMax->model->getMaximum->model->getExtent->valueRange->model->getMinimum->thumbValue->thumbRange->value->if->scrollbar->getOrientation->scrollbar->getComponentOrientation->isLeftToRight->else->model->getMinimum->scrollbar->adjustValueIfNecessary->setValue->setThumbRollover
BasicScrollBarUI.TrackListener#adjustValueIfNecessary(int)::: track listener adjust value if necessary:::if->scrollbar->getParent->scrollpane->scrollbar->getParent->viewport->scrollpane->getViewport->view->viewport->getView->if->list->if->DefaultLookup->list->getUI->getBoolean->adjustedValue->mode->list->getLayoutOrientation->orientation->scrollbar->getOrientation->if->index->list->new->Point->locationToIndex->rect->list->getCellBounds->if->if->if->scrollpane->getComponentOrientation->isLeftToRight->index->list->new->Point->locationToIndex->rect->list->getCellBounds->if->else->loc->new->Point->extent->viewport->getExtentSize->index->list->locationToIndex->rect->list->getCellBounds->if->return
BasicScrollBarUI.TrackListener#startScrollTimerIfNecessary()::: track listener start scroll timer if necessary:::if->scrollTimer->isRunning->return->tb->getThumbBounds->switch->scrollbar->getOrientation->if->if->scrollTimer->start->else->if->scrollTimer->start->break->if->isMouseAfterThumb->isMouseBeforeThumb->scrollTimer->start->break
BasicScrollBarUI.TrackListener#mouseMoved(MouseEvent)::: track listener mouse moved:::if->e->getX->e->getY->updateThumbState
BasicScrollBarUI.TrackListener#mouseExited(MouseEvent):::Invoked when the mouse exits the scrollbar.:::if->setThumbRollover
BasicScrollBarUI.ArrowButtonListener#mousePressed(MouseEvent)::: arrow button listener mouse pressed:::if->scrollbar->isEnabled->return->if->SwingUtilities->isLeftMouseButton->return->direction->e->getSource->scrollByUnit->scrollTimer->stop->scrollListener->setDirection->scrollListener->setScrollByBlock->scrollTimer->start->if->scrollbar->hasFocus->scrollbar->isRequestFocusEnabled->scrollbar->requestFocus
BasicScrollBarUI.ArrowButtonListener#mouseReleased(MouseEvent)::: arrow button listener mouse released:::scrollTimer->stop->scrollbar->setValueIsAdjusting
BasicScrollBarUI.ScrollListener#setDirection(int):::Sets the direction.:::
BasicScrollBarUI.ScrollListener#setScrollByBlock(boolean):::Sets the scrolling by block:::
BasicScrollBarUI.ScrollListener#actionPerformed(ActionEvent)::: scroll listener action performed:::if->scrollByBlock->if->scrollbar->getOrientation->if->if->getThumbBounds->getThumbBounds->e->getSource->stop->else->if->getThumbBounds->e->getSource->stop->else->if->isMouseAfterThumb->isMouseBeforeThumb->e->getSource->stop->else->scrollByUnit->if->scrollbar->getValue->scrollbar->getVisibleAmount->scrollbar->getMaximum->e->getSource->stop->else->if->scrollbar->getValue->scrollbar->getMinimum->e->getSource->stop
BasicScrollBarUI#isMouseLeftOfThumb()::: basic scroll bar i is mouse left of thumb:::return->getThumbBounds
BasicScrollBarUI#isMouseRightOfThumb()::: basic scroll bar i is mouse right of thumb:::tb->getThumbBounds->return
BasicScrollBarUI#isMouseBeforeThumb()::: basic scroll bar i is mouse before thumb:::return->scrollbar->getComponentOrientation->isLeftToRight->isMouseLeftOfThumb->isMouseRightOfThumb
BasicScrollBarUI#isMouseAfterThumb()::: basic scroll bar i is mouse after thumb:::return->scrollbar->getComponentOrientation->isLeftToRight->isMouseRightOfThumb->isMouseLeftOfThumb
BasicScrollBarUI#updateButtonDirections()::: basic scroll bar i update button directions:::orient->scrollbar->getOrientation->if->scrollbar->getComponentOrientation->isLeftToRight->if->setDirection->if->setDirection->else->if->setDirection->if->setDirection
BasicScrollBarUI#setDragging(boolean)::: basic scroll bar i set dragging:::scrollbar->getThumbBounds->repaint
BasicScrollBarUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicScrollBarUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::scrollBar->e->getSource->key->getName->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll
BasicScrollBarUI.Actions#scroll(JScrollBar, int, boolean)::: actions scroll:::if->amount->if->if->scrollBar->getBlockIncrement->else->scrollBar->getBlockIncrement->else->if->scrollBar->getUnitIncrement->else->scrollBar->getUnitIncrement->scrollBar->scrollBar->getValue->setValue->else->if->scrollBar->scrollBar->getMinimum->setValue->else->if->scrollBar->scrollBar->getMaximum->setValue
BasicScrollBarUI.Handler#focusGained(FocusEvent)::: handler focus gained:::scrollbar->repaint
BasicScrollBarUI.Handler#focusLost(FocusEvent)::: handler focus lost:::scrollbar->repaint
BasicScrollBarUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->e->getPropertyName->if->oldModel->e->getOldValue->newModel->e->getNewValue->oldModel->removeChangeListener->newModel->addChangeListener->scrollbar->getValue->scrollbar->repaint->scrollbar->revalidate->else->if->updateButtonDirections->else->if->updateButtonDirections->inputMap->getInputMap->SwingUtilities->replaceUIInputMap
BasicScrollPaneUI#createUI(JComponent):::Returns a new instance of BasicScrollPaneUI.:::return->new->BasicScrollPaneUI
BasicScrollPaneUI#loadActionMap(LazyActionMap)::: basic scroll pane i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicScrollPaneUI#paint(Graphics, JComponent)::: basic scroll pane i paint:::vpBorder->scrollpane->getViewportBorder->if->r->scrollpane->getViewportBorderBounds->vpBorder->paintBorder
BasicScrollPaneUI#getMaximumSize(JComponent)::: basic scroll pane i get maximum size:::return->new->Dimension
BasicScrollPaneUI#installDefaults(JScrollPane):::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->vpBorder->scrollpane->getViewportBorder->if->UIManager->getBorder->scrollpane->setViewportBorder->LookAndFeel->installProperty
BasicScrollPaneUI#installListeners(JScrollPane):::Registers listeners.:::createVSBChangeListener->createVSBPropertyChangeListener->createHSBChangeListener->createHSBPropertyChangeListener->createViewportChangeListener->createPropertyChangeListener->viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->if->viewport->addChangeListener->if->vsb->getModel->addChangeListener->vsb->addPropertyChangeListener->if->hsb->getModel->addChangeListener->hsb->addPropertyChangeListener->scrollpane->addPropertyChangeListener->createMouseWheelListener->scrollpane->addMouseWheelListener
BasicScrollPaneUI#installKeyboardActions(JScrollPane):::Registers keyboard actions.:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicScrollPaneUI#getInputMap(int)::: basic scroll pane i get input map:::if->keyMap->DefaultLookup->get->rtlKeyMap->if->scrollpane->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicScrollPaneUI#installUI(JComponent)::: basic scroll pane i install i:::installDefaults->installListeners->installKeyboardActions
BasicScrollPaneUI#uninstallDefaults(JScrollPane):::Uninstalls default properties.:::LookAndFeel->uninstallBorder->if->scrollpane->getViewportBorder->scrollpane->setViewportBorder
BasicScrollPaneUI#uninstallListeners(JComponent):::Unregisters listeners.:::viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->if->viewport->removeChangeListener->if->vsb->getModel->removeChangeListener->vsb->removePropertyChangeListener->if->hsb->getModel->removeChangeListener->hsb->removePropertyChangeListener->scrollpane->removePropertyChangeListener->if->scrollpane->removeMouseWheelListener
BasicScrollPaneUI#uninstallKeyboardActions(JScrollPane):::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicScrollPaneUI#uninstallUI(JComponent)::: basic scroll pane i uninstall i:::uninstallDefaults->uninstallListeners->uninstallKeyboardActions
BasicScrollPaneUI#getHandler()::: basic scroll pane i get handler:::if->new->Handler->return
BasicScrollPaneUI#syncScrollPaneWithViewport():::Synchronizes the JScrollPane with Viewport.:::viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->rowHead->scrollpane->getRowHeader->colHead->scrollpane->getColumnHeader->ltr->scrollpane->getComponentOrientation->isLeftToRight->if->extentSize->viewport->getExtentSize->viewSize->viewport->getViewSize->viewPosition->viewport->getViewPosition->if->extent->max->value->Math->Math->min->max->vsb->setValues->if->extent->max->value->if->Math->Math->min->max->else->currentValue->hsb->getValue->if->Math->Math->min->max->if->else->if->viewport->setViewPosition->else->Math->Math->min->max->if->hsb->setValues->if->p->rowHead->getViewPosition->viewport->getViewPosition->rowHead->setViewPosition->if->p->colHead->getViewPosition->if->viewport->getViewPosition->else->Math->viewport->getViewPosition->max->colHead->setViewPosition
BasicScrollPaneUI#getBaseline(JComponent, int, int):::Returns the baseline.:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->viewport->scrollpane->getViewport->spInsets->scrollpane->getInsets->y->columnHeader->scrollpane->getColumnHeader->if->columnHeader->isVisible->header->columnHeader->getView->if->header->isVisible->headerPref->header->getPreferredSize->baseline->header->getBaseline->if->return->columnPref->columnHeader->getPreferredSize->view->viewport->getView->if->view->isVisible->view->getBaselineResizeBehavior->viewportBorder->scrollpane->getViewportBorder->if->vpbInsets->viewportBorder->getBorderInsets->if->view->getWidth->view->getHeight->min->view->getMinimumSize->Math->view->getWidth->max->Math->view->getHeight->max->if->baseline->view->getBaseline->if->return->return
BasicScrollPaneUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicScrollPaneUI.ViewportChangeHandler#stateChanged(ChangeEvent)::: viewport change handler state changed:::getHandler->stateChanged
BasicScrollPaneUI#createViewportChangeListener():::Returns an instance of viewport ChangeListener.:::return->getHandler
BasicScrollPaneUI.HSBChangeListener#stateChanged(ChangeEvent)::: change listener state changed:::getHandler->stateChanged
BasicScrollPaneUI#createHSBPropertyChangeListener():::Returns a PropertyChangeListener that will be installed on the horizontal JScrollBar.:::return->getHandler
BasicScrollPaneUI#createHSBChangeListener():::Returns an instance of horizontal scroll bar ChangeListener.:::return->getHandler
BasicScrollPaneUI.VSBChangeListener#stateChanged(ChangeEvent)::: change listener state changed:::getHandler->stateChanged
BasicScrollPaneUI#createVSBPropertyChangeListener():::Returns a PropertyChangeListener that will be installed on the vertical JScrollBar.:::return->getHandler
BasicScrollPaneUI#createVSBChangeListener():::Returns an instance of vertical scroll bar ChangeListener.:::return->getHandler
BasicScrollPaneUI.MouseWheelHandler#mouseWheelMoved(MouseWheelEvent):::Called when the mouse wheel is rotated while over a JScrollPane.:::getHandler->mouseWheelMoved
BasicScrollPaneUI#createMouseWheelListener():::Creates an instance of MouseWheelListener, which is added to the JScrollPane by installUI():::return->getHandler
BasicScrollPaneUI#updateScrollBarDisplayPolicy(PropertyChangeEvent):::Updates a scroll bar display policy.:::scrollpane->revalidate->scrollpane->repaint
BasicScrollPaneUI#updateViewport(PropertyChangeEvent):::Updates viewport.:::oldViewport->e->getOldValue->newViewport->e->getNewValue->if->oldViewport->removeChangeListener->if->p->newViewport->getViewPosition->if->scrollpane->getComponentOrientation->isLeftToRight->Math->max->else->max->newViewport->getViewSize->extent->newViewport->getExtentSize->if->else->Math->Math->min->max->Math->max->newViewport->setViewPosition->newViewport->addChangeListener
BasicScrollPaneUI#updateRowHeader(PropertyChangeEvent):::Updates row header.:::newRowHead->e->getNewValue->if->viewport->scrollpane->getViewport->p->newRowHead->getViewPosition->viewport->getViewPosition->newRowHead->setViewPosition
BasicScrollPaneUI#updateColumnHeader(PropertyChangeEvent):::Updates column header.:::newColHead->e->getNewValue->if->viewport->scrollpane->getViewport->p->newColHead->getViewPosition->if->else->if->scrollpane->getComponentOrientation->isLeftToRight->viewport->getViewPosition->else->Math->viewport->getViewPosition->max->newColHead->setViewPosition->scrollpane->add
BasicScrollPaneUI#updateHorizontalScrollBar(PropertyChangeEvent)::: basic scroll pane i update horizontal scroll bar:::updateScrollBar
BasicScrollPaneUI#updateVerticalScrollBar(PropertyChangeEvent)::: basic scroll pane i update vertical scroll bar:::updateScrollBar
BasicScrollPaneUI#updateScrollBar(PropertyChangeEvent, ChangeListener, PropertyChangeListener)::: basic scroll pane i update scroll bar:::sb->pce->getOldValue->if->if->sb->getModel->removeChangeListener->if->sb->removePropertyChangeListener->pce->getNewValue->if->if->sb->getModel->addChangeListener->if->sb->addPropertyChangeListener
BasicScrollPaneUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicScrollPaneUI#createPropertyChangeListener():::Creates an instance of PropertyChangeListener that's added to the JScrollPane by installUI():::return->getHandler
BasicScrollPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::scrollPane->e->getSource->ltr->scrollPane->getComponentOrientation->isLeftToRight->key->getName->if->scroll->else->if->scroll->else->if->scrollHome->else->if->scrollEnd->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll
BasicScrollPaneUI.Actions#scrollEnd(JScrollPane)::: actions scroll end:::vp->scrollpane->getViewport->view->if->vp->getView->visRect->vp->getViewRect->bounds->view->getBounds->if->scrollpane->getComponentOrientation->isLeftToRight->vp->new->Point->setViewPosition->else->vp->new->Point->setViewPosition
BasicScrollPaneUI.Actions#scrollHome(JScrollPane)::: actions scroll home:::vp->scrollpane->getViewport->view->if->vp->getView->if->scrollpane->getComponentOrientation->isLeftToRight->vp->new->Point->setViewPosition->else->visRect->vp->getViewRect->bounds->view->getBounds->vp->new->Point->setViewPosition
BasicScrollPaneUI.Actions#scroll(JScrollPane, int, int, boolean)::: actions scroll:::vp->scrollpane->getViewport->view->if->vp->getView->visRect->vp->getViewRect->vSize->view->getSize->amount->if->if->getScrollableBlockIncrement->else->getScrollableUnitIncrement->else->if->if->else->else->if->if->Math->max->else->if->else->if->scrollpane->getComponentOrientation->isLeftToRight->if->Math->max->else->if->else->if->else->Math->Math->min->max->vp->visRect->getLocation->setViewPosition
BasicScrollPaneUI.Handler#mouseWheelMoved(MouseWheelEvent)::: handler mouse wheel moved:::if->scrollpane->isWheelScrollingEnabled->e->getWheelRotation->toScroll->scrollpane->getVerticalScrollBar->direction->e->getWheelRotation->orientation->if->toScroll->isVisible->e->isShiftDown->scrollpane->getHorizontalScrollBar->if->toScroll->isVisible->return->e->consume->if->e->getScrollType->vp->scrollpane->getViewport->if->return->comp->vp->getView->units->Math->e->getUnitsToScroll->abs->limitScroll->Math->e->getWheelRotation->abs->fastWheelScroll->toScroll->getClientProperty->if->scrollComp->viewRect->vp->getViewRect->startingX->leftToRight->comp->getComponentOrientation->isLeftToRight->scrollMin->toScroll->getMinimum->scrollMax->toScroll->getMaximum->toScroll->getModel->getExtent->if->blockIncr->scrollComp->getScrollableBlockIncrement->if->Math->toScroll->getValue->max->else->Math->toScroll->getValue->min->for->i->if->toScroll->setValue->else->if->toScroll->setValue->else->newPos->toScroll->getValue->if->else->if->toScroll->setValue->else->BasicScrollBarUI->scrollByUnits->else->if->e->getScrollType->BasicScrollBarUI->scrollByBlock
BasicScrollPaneUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::viewport->scrollpane->getViewport->if->if->e->getSource->syncScrollPaneWithViewport->else->hsb->scrollpane->getHorizontalScrollBar->if->e->getSource->hsb->getModel->hsbStateChanged->else->vsb->scrollpane->getVerticalScrollBar->if->e->getSource->vsb->getModel->vsbStateChanged
BasicScrollPaneUI.Handler#vsbStateChanged(JViewport, ChangeEvent)::: handler vsb state changed:::model->e->getSource->p->viewport->getViewPosition->model->getValue->viewport->setViewPosition
BasicScrollPaneUI.Handler#hsbStateChanged(JViewport, ChangeEvent)::: handler hsb state changed:::model->e->getSource->p->viewport->getViewPosition->value->model->getValue->if->scrollpane->getComponentOrientation->isLeftToRight->else->max->viewport->getViewSize->extent->viewport->getExtentSize->oldX->if->else->if->viewport->setViewPosition
BasicScrollPaneUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::if->e->getSource->scrollPanePropertyChange->else->sbPropertyChange
BasicScrollPaneUI.Handler#scrollPanePropertyChange(PropertyChangeEvent)::: handler scroll pane property change:::propertyName->e->getPropertyName->if->updateScrollBarDisplayPolicy->else->if->updateScrollBarDisplayPolicy->else->if->updateViewport->else->if->updateRowHeader->else->if->updateColumnHeader->else->if->updateVerticalScrollBar->else->if->updateHorizontalScrollBar->else->if->scrollpane->revalidate->scrollpane->repaint
BasicScrollPaneUI.Handler#sbPropertyChange(PropertyChangeEvent)::: handler sb property change:::propertyName->e->getPropertyName->source->e->getSource->if->sb->scrollpane->getVerticalScrollBar->oldModel->e->getOldValue->cl->if->else->if->scrollpane->getHorizontalScrollBar->scrollpane->getHorizontalScrollBar->if->if->oldModel->removeChangeListener->if->sb->getModel->sb->getModel->addChangeListener->else->if->if->scrollpane->getHorizontalScrollBar->hsb->scrollpane->getHorizontalScrollBar->viewport->scrollpane->getViewport->p->viewport->getViewPosition->if->scrollpane->getComponentOrientation->isLeftToRight->hsb->getValue->else->viewport->getViewSize->viewport->getExtentSize->hsb->getValue->viewport->setViewPosition
BasicSeparatorUI#createUI(JComponent):::Returns a new instance of BasicSeparatorUI.:::return->new->BasicSeparatorUI
BasicSeparatorUI#installUI(JComponent)::: basic separator i install i:::installDefaults->installListeners
BasicSeparatorUI#uninstallUI(JComponent)::: basic separator i uninstall i:::uninstallDefaults->uninstallListeners
BasicSeparatorUI#installDefaults(JSeparator):::Installs default properties.:::LookAndFeel->installColors->LookAndFeel->installProperty
BasicSeparatorUI#uninstallDefaults(JSeparator):::Uninstalls default properties.:::
BasicSeparatorUI#installListeners(JSeparator):::Registers listeners.:::
BasicSeparatorUI#uninstallListeners(JSeparator):::Unregisters listeners.:::
BasicSeparatorUI#paint(Graphics, JComponent)::: basic separator i paint:::s->c->getSize->if->getOrientation->g->c->getForeground->setColor->g->drawLine->g->c->getBackground->setColor->g->drawLine->else->g->c->getForeground->setColor->g->drawLine->g->c->getBackground->setColor->g->drawLine
BasicSeparatorUI#getPreferredSize(JComponent)::: basic separator i get preferred size:::if->getOrientation->return->new->Dimension->else->return->new->Dimension
BasicSeparatorUI#getMinimumSize(JComponent)::: basic separator i get minimum size:::return
BasicSeparatorUI#getMaximumSize(JComponent)::: basic separator i get maximum size:::return
BasicSliderUI#getShadowColor():::Returns the shadow color.:::return
BasicSliderUI#getHighlightColor():::Returns the highlight color.:::return
BasicSliderUI#getFocusColor():::Returns the focus color.:::return
BasicSliderUI#isDragging():::Returns true if the user is dragging the slider.:::return
BasicSliderUI#createUI(JComponent):::Creates a UI.:::return->new->BasicSliderUI
BasicSliderUI#installUI(JComponent):::Installs a UI.:::slider->slider->isEnabled->setEnabled->LookAndFeel->installProperty->createTrackListener->createChangeListener->createComponentListener->createFocusListener->createScrollListener->createPropertyChangeListener->installDefaults->installListeners->installKeyboardActions->new->Timer->scrollTimer->setInitialDelay->slider->getInsets->BasicGraphicsUtils->isLeftToRight->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->slider->getValue->calculateGeometry
BasicSliderUI#uninstallUI(JComponent):::Uninstalls a UI.:::if->throw->new->IllegalComponentStateException->scrollTimer->stop->uninstallDefaults->uninstallListeners->uninstallKeyboardActions
BasicSliderUI#installDefaults(JSlider):::Installs the defaults.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->get->if->new->InsetsUIResource
BasicSliderUI#uninstallDefaults(JSlider):::Uninstalls the defaults.:::LookAndFeel->uninstallBorder
BasicSliderUI#createTrackListener(JSlider):::Creates a track listener.:::return->new->TrackListener
BasicSliderUI#createChangeListener(JSlider):::Creates a change listener.:::return->getHandler
BasicSliderUI#createComponentListener(JSlider):::Creates a composite listener.:::return->getHandler
BasicSliderUI#createFocusListener(JSlider):::Creates a focus listener.:::return->getHandler
BasicSliderUI#createScrollListener(JSlider):::Creates a scroll listener.:::return->new->ScrollListener
BasicSliderUI#createPropertyChangeListener(JSlider):::Creates a property change listener.:::return->getHandler
BasicSliderUI#getHandler()::: basic slider i get handler:::if->new->Handler->return
BasicSliderUI#installListeners(JSlider):::Installs listeners.:::slider->addMouseListener->slider->addMouseMotionListener->slider->addFocusListener->slider->addComponentListener->slider->addPropertyChangeListener->slider->getModel->addChangeListener
BasicSliderUI#uninstallListeners(JSlider):::Uninstalls listeners.:::slider->removeMouseListener->slider->removeMouseMotionListener->slider->removeFocusListener->slider->removeComponentListener->slider->removePropertyChangeListener->slider->getModel->removeChangeListener
BasicSliderUI#installKeyboardActions(JSlider):::Installs keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSliderUI#getInputMap(int, JSlider)::: basic slider i get input map:::if->keyMap->DefaultLookup->get->rtlKeyMap->if->slider->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicSliderUI#loadActionMap(LazyActionMap):::Populates ComboBox's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicSliderUI#uninstallKeyboardActions(JSlider):::Uninstalls keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicSliderUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->if->slider->getPaintLabels->labelsHaveSameBaselines->metrics->slider->slider->getFont->getFontMetrics->insets->slider->getInsets->thumbSize->getThumbSize->if->slider->getOrientation->tickLength->getTickLength->contentHeight->thumbHeight->centerSpacing->if->slider->getPaintTicks->getHeightOfTallestLabel->trackY->trackHeight->tickY->tickHeight->if->slider->getPaintTicks->labelY->return->metrics->getAscent->else->inverted->slider->getInverted->value->getLowestValue->getHighestValue->if->thumbHeight->trackBuffer->Math->metrics->getHeight->max->contentY->trackY->trackHeight->yPosition->yPositionForValue->return->metrics->getHeight->metrics->getAscent->return
BasicSliderUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicSliderUI#labelsHaveSameBaselines():::Returns true if all the labels from the label table have the same baseline.:::if->dictionary->slider->getLabelTable->if->elements->dictionary->elements->baseline->while->elements->hasMoreElements->label->elements->nextElement->pref->label->getPreferredSize->labelBaseline->label->getBaseline->if->if->else->if->break->else->break->else->return
BasicSliderUI#getPreferredHorizontalSize():::Returns the preferred horizontal size.:::horizDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getPreferredVerticalSize():::Returns the preferred vertical size.:::vertDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getMinimumHorizontalSize():::Returns the minimum horizontal size.:::minHorizDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getMinimumVerticalSize():::Returns the minimum vertical size.:::minVertDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getPreferredSize(JComponent):::Returns the preferred size.:::recalculateIfInsetsChanged->d->if->slider->getOrientation->getPreferredVerticalSize->new->Dimension->else->getPreferredHorizontalSize->new->Dimension->return
BasicSliderUI#getMinimumSize(JComponent):::Returns the minimum size.:::recalculateIfInsetsChanged->d->if->slider->getOrientation->getMinimumVerticalSize->new->Dimension->else->getMinimumHorizontalSize->new->Dimension->return
BasicSliderUI#getMaximumSize(JComponent):::Returns the maximum size.:::d->getPreferredSize->if->slider->getOrientation->else->return
BasicSliderUI#calculateGeometry():::Calculates the geometry.:::calculateFocusRect->calculateContentRect->calculateThumbSize->calculateTrackBuffer->calculateTrackRect->calculateTickRect->calculateLabelRect->calculateThumbLocation
BasicSliderUI#calculateFocusRect():::Calculates the focus rectangle.:::slider->getWidth->slider->getHeight
BasicSliderUI#calculateThumbSize():::Calculates the thumb size rectangle.:::size->getThumbSize->thumbRect->setSize
BasicSliderUI#calculateContentRect():::Calculates the content rectangle.:::
BasicSliderUI#getTickSpacing()::: basic slider i get tick spacing:::majorTickSpacing->slider->getMajorTickSpacing->minorTickSpacing->slider->getMinorTickSpacing->result->if->else->if->else->return
BasicSliderUI#calculateThumbLocation():::Calculates the thumb location.:::if->slider->getSnapToTicks->sliderValue->slider->getValue->snappedValue->tickSpacing->getTickSpacing->if->if->slider->getMinimum->temp->slider->getMinimum->whichTick->Math->round->if->slider->getMinimum->if->slider->setValue->if->slider->getOrientation->valuePosition->slider->getValue->xPositionForValue->else->valuePosition->slider->getValue->yPositionForValue
BasicSliderUI#calculateTrackBuffer():::Calculates the track buffer.:::if->slider->getPaintLabels->slider->getLabelTable->highLabel->getHighestValueLabel->lowLabel->getLowestValueLabel->if->slider->getOrientation->Math->highLabel->getBounds->lowLabel->getBounds->max->Math->max->else->Math->highLabel->getBounds->lowLabel->getBounds->max->Math->max->else->if->slider->getOrientation->else
BasicSliderUI#calculateTrackRect():::Calculates the track rectangle.:::centerSpacing->if->slider->getOrientation->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getHeightOfTallestLabel->else->if->BasicGraphicsUtils->isLeftToRight->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getWidthOfWidestLabel->else->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getWidthOfWidestLabel
BasicSliderUI#getTickLength():::Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders:::return
BasicSliderUI#calculateTickRect():::Calculates the tick rectangle.:::if->slider->getOrientation->slider->getPaintTicks->getTickLength->else->slider->getPaintTicks->getTickLength->if->BasicGraphicsUtils->isLeftToRight->else
BasicSliderUI#calculateLabelRect():::Calculates the label rectangle.:::if->slider->getPaintLabels->if->slider->getOrientation->getHeightOfTallestLabel->else->if->BasicGraphicsUtils->isLeftToRight->getWidthOfWidestLabel->else->getWidthOfWidestLabel->else->if->slider->getOrientation->else->if->BasicGraphicsUtils->isLeftToRight->else
BasicSliderUI#getThumbSize():::Returns the thumb size.:::size->new->Dimension->if->slider->getOrientation->else->return
BasicSliderUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicSliderUI#getWidthOfWidestLabel():::Returns the width of the widest label.:::dictionary->slider->getLabelTable->widest->if->keys->dictionary->keys->while->keys->hasMoreElements->label->dictionary->keys->nextElement->get->Math->label->getPreferredSize->max->return
BasicSliderUI#getHeightOfTallestLabel():::Returns the height of the tallest label.:::dictionary->slider->getLabelTable->tallest->if->keys->dictionary->keys->while->keys->hasMoreElements->label->dictionary->keys->nextElement->get->Math->label->getPreferredSize->max->return
BasicSliderUI#getWidthOfHighValueLabel():::Returns the width of the highest value label.:::label->getHighestValueLabel->width->if->label->getPreferredSize->return
BasicSliderUI#getWidthOfLowValueLabel():::Returns the width of the lowest value label.:::label->getLowestValueLabel->width->if->label->getPreferredSize->return
BasicSliderUI#getHeightOfHighValueLabel():::Returns the height of the highest value label.:::label->getHighestValueLabel->height->if->label->getPreferredSize->return
BasicSliderUI#getHeightOfLowValueLabel():::Returns the height of the lowest value label.:::label->getLowestValueLabel->height->if->label->getPreferredSize->return
BasicSliderUI#drawInverted():::Draws inverted.:::if->slider->getOrientation->if->BasicGraphicsUtils->isLeftToRight->return->slider->getInverted->else->return->slider->getInverted->else->return->slider->getInverted
BasicSliderUI#getHighestValue():::Returns the biggest value that has an entry in the label table.:::dictionary->slider->getLabelTable->if->return->keys->dictionary->keys->max->while->keys->hasMoreElements->i->keys->nextElement->if->return
BasicSliderUI#getLowestValue():::Returns the smallest value that has an entry in the label table.:::dictionary->slider->getLabelTable->if->return->keys->dictionary->keys->min->while->keys->hasMoreElements->i->keys->nextElement->if->return
BasicSliderUI#getLowestValueLabel():::Returns the label that corresponds to the highest slider value in the label table.:::min->getLowestValue->if->return->slider->getLabelTable->get->return
BasicSliderUI#getHighestValueLabel():::Returns the label that corresponds to the lowest slider value in the label table.:::max->getHighestValue->if->return->slider->getLabelTable->get->return
BasicSliderUI#paint(Graphics, JComponent)::: basic slider i paint:::recalculateIfInsetsChanged->recalculateIfOrientationChanged->clip->g->getClipBounds->if->clip->intersects->slider->getPaintTrack->calculateGeometry->if->slider->getPaintTrack->clip->intersects->paintTrack->if->slider->getPaintTicks->clip->intersects->paintTicks->if->slider->getPaintLabels->clip->intersects->paintLabels->if->slider->hasFocus->clip->intersects->paintFocus->if->clip->intersects->paintThumb
BasicSliderUI#recalculateIfInsetsChanged():::Recalculates if the insets have changed.:::newInsets->slider->getInsets->if->newInsets->equals->calculateGeometry
BasicSliderUI#recalculateIfOrientationChanged():::Recalculates if the orientation has changed.:::ltr->BasicGraphicsUtils->isLeftToRight->if->calculateGeometry
BasicSliderUI#paintFocus(Graphics):::Paints focus.:::g->getFocusColor->setColor->BasicGraphicsUtils->drawDashedRect
BasicSliderUI#paintTrack(Graphics):::Paints track.:::trackBounds->if->slider->getOrientation->cy->cw->g->translate->g->getShadowColor->setColor->g->drawLine->g->drawLine->g->getHighlightColor->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->translate->else->cx->ch->g->translate->g->getShadowColor->setColor->g->drawLine->g->drawLine->g->getHighlightColor->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->translate
BasicSliderUI#paintTicks(Graphics):::Paints ticks.:::tickBounds->g->DefaultLookup->getColor->setColor->if->slider->getOrientation->g->translate->if->slider->getMinorTickSpacing->value->slider->getMinimum->while->slider->getMaximum->xPos->xPositionForValue->paintMinorTickForHorizSlider->if->slider->getMinorTickSpacing->break->slider->getMinorTickSpacing->if->slider->getMajorTickSpacing->value->slider->getMinimum->while->slider->getMaximum->xPos->xPositionForValue->paintMajorTickForHorizSlider->if->slider->getMajorTickSpacing->break->slider->getMajorTickSpacing->g->translate->else->g->translate->if->slider->getMinorTickSpacing->offset->if->BasicGraphicsUtils->isLeftToRight->g->translate->value->slider->getMinimum->while->slider->getMaximum->yPos->yPositionForValue->paintMinorTickForVertSlider->if->slider->getMinorTickSpacing->break->slider->getMinorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->if->slider->getMajorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->value->slider->getMinimum->while->slider->getMaximum->yPos->yPositionForValue->paintMajorTickForVertSlider->if->slider->getMajorTickSpacing->break->slider->getMajorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->g->translate
BasicSliderUI#paintMinorTickForHorizSlider(Graphics, Rectangle, int):::Paints minor tick for horizontal slider.:::g->drawLine
BasicSliderUI#paintMajorTickForHorizSlider(Graphics, Rectangle, int):::Paints major tick for horizontal slider.:::g->drawLine
BasicSliderUI#paintMinorTickForVertSlider(Graphics, Rectangle, int):::Paints minor tick for vertical slider.:::g->drawLine
BasicSliderUI#paintMajorTickForVertSlider(Graphics, Rectangle, int):::Paints major tick for vertical slider.:::g->drawLine
BasicSliderUI#paintLabels(Graphics):::Paints the labels.:::labelBounds->dictionary->slider->getLabelTable->if->keys->dictionary->keys->minValue->slider->getMinimum->maxValue->slider->getMaximum->enabled->slider->isEnabled->while->keys->hasMoreElements->key->keys->nextElement->value->key->intValue->if->label->dictionary->get->label->setEnabled->if->icon->label->isEnabled->getIcon->getDisabledIcon->if->Toolkit->getDefaultToolkit->getImage->checkImage->if->slider->getOrientation->g->translate->paintHorizontalLabel->g->translate->else->offset->if->BasicGraphicsUtils->isLeftToRight->label->getPreferredSize->g->translate->paintVerticalLabel->g->translate
BasicSliderUI#paintHorizontalLabel(Graphics, int, Component):::Called for every label in the label table:::labelCenter->xPositionForValue->labelLeft->label->getPreferredSize->g->translate->label->paint->g->translate
BasicSliderUI#paintVerticalLabel(Graphics, int, Component):::Called for every label in the label table:::labelCenter->yPositionForValue->labelTop->label->getPreferredSize->g->translate->label->paint->g->translate
BasicSliderUI#paintThumb(Graphics):::Paints the thumb.:::knobBounds->w->h->g->translate->if->slider->isEnabled->g->slider->getBackground->setColor->else->g->slider->getBackground->darker->setColor->paintThumbArrowShape->slider->getClientProperty->if->slider->getPaintTicks->g->fillRect->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->if->slider->getOrientation->cw->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->cw->if->BasicGraphicsUtils->isLeftToRight->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate
BasicSliderUI#setThumbLocation(int, int):::Sets the thumb location.:::unionRect->setBounds->thumbRect->setLocation->SwingUtilities->computeUnion->slider->repaint
BasicSliderUI#scrollByBlock(int):::Scrolls by block.:::synchronized->blockIncrement->slider->getMaximum->slider->getMinimum->if->tickSpacing->getTickSpacing->if->slider->getSnapToTicks->if->else->if->delta->slider->slider->getValue->setValue
BasicSliderUI#scrollByUnit(int):::Scrolls by unit.:::synchronized->delta->if->slider->getSnapToTicks->getTickSpacing->slider->slider->getValue->setValue
BasicSliderUI#scrollDueToClickInTrack(int):::This function is called when a mousePressed was detected in the track, not in the thumb:::scrollByBlock
BasicSliderUI#xPositionForValue(int):::Returns the x position for a value.:::min->slider->getMinimum->max->slider->getMaximum->trackLength->valueRange->pixelsPerValue->trackLeft->trackRight->xPosition->if->drawInverted->Math->round->else->Math->round->Math->max->Math->min->return
BasicSliderUI#yPositionForValue(int):::Returns the y position for a value.:::return->yPositionForValue
BasicSliderUI#yPositionForValue(int, int, int):::Returns the y location for the specified value:::min->slider->getMinimum->max->slider->getMaximum->valueRange->pixelsPerValue->trackBottom->yPosition->if->drawInverted->Math->round->else->Math->round->Math->max->Math->min->return
BasicSliderUI#valueForYPosition(int):::Returns the value at the y position:::value->minValue->slider->getMinimum->maxValue->slider->getMaximum->trackLength->trackTop->trackBottom->if->drawInverted->else->if->drawInverted->else->distanceFromTrackTop->valueRange->valuePerPixel->valueFromTrackTop->Math->round->drawInverted->return
BasicSliderUI#valueForXPosition(int):::Returns the value at the x position:::value->minValue->slider->getMinimum->maxValue->slider->getMaximum->trackLength->trackLeft->trackRight->if->drawInverted->else->if->drawInverted->else->distanceFromTrackLeft->valueRange->valuePerPixel->valueFromTrackLeft->Math->round->drawInverted->return
BasicSliderUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::if->calculateThumbLocation->slider->repaint->slider->getValue
BasicSliderUI.Handler#componentHidden(ComponentEvent)::: handler component hidden:::
BasicSliderUI.Handler#componentMoved(ComponentEvent)::: handler component moved:::
BasicSliderUI.Handler#componentResized(ComponentEvent)::: handler component resized:::calculateGeometry->slider->repaint
BasicSliderUI.Handler#componentShown(ComponentEvent)::: handler component shown:::
BasicSliderUI.Handler#focusGained(FocusEvent)::: handler focus gained:::slider->repaint
BasicSliderUI.Handler#focusLost(FocusEvent)::: handler focus lost:::slider->repaint
BasicSliderUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->e->getPropertyName->if->SwingUtilities2->isScaleChanged->calculateGeometry->slider->repaint->else->if->calculateGeometry->slider->repaint->km->getInputMap->SwingUtilities->replaceUIInputMap->else->if->e->getOldValue->removeChangeListener->e->getNewValue->addChangeListener->calculateThumbLocation->slider->repaint
BasicSliderUI.ChangeHandler#stateChanged(ChangeEvent)::: change handler state changed:::getHandler->stateChanged
BasicSliderUI.TrackListener#mouseReleased(MouseEvent)::: track listener mouse released:::if->slider->isEnabled->return->scrollTimer->stop->slider->setValueIsAdjusting->slider->repaint
BasicSliderUI.TrackListener#mousePressed(MouseEvent):::If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page:::if->slider->isEnabled->return->calculateGeometry->e->getX->e->getY->if->slider->isRequestFocusEnabled->slider->requestFocus->if->thumbRect->contains->if->UIManager->getBoolean->SwingUtilities->isLeftMouseButton->return->switch->slider->getOrientation->break->break->return->if->SwingUtilities->isLeftMouseButton->return->slider->setValueIsAdjusting->sbSize->slider->getSize->direction->switch->slider->getOrientation->if->thumbRect->isEmpty->scrollbarCenter->if->drawInverted->else->else->thumbY->if->drawInverted->else->break->if->thumbRect->isEmpty->scrollbarCenter->if->drawInverted->else->else->thumbX->if->drawInverted->else->break->if->shouldScroll->scrollDueToClickInTrack->if->shouldScroll->scrollTimer->stop->scrollListener->setDirection->scrollTimer->start
BasicSliderUI.TrackListener#shouldScroll(int):::Returns if scrolling should occur:::r->if->slider->getOrientation->if->drawInverted->if->return->else->if->return->else->if->drawInverted->if->return->else->if->return->if->slider->getValue->slider->getExtent->slider->getMaximum->return->else->if->slider->getValue->slider->getMinimum->return->return
BasicSliderUI.TrackListener#mouseDragged(MouseEvent):::Set the models value to the position of the top/left of the thumb relative to the origin of the track.:::thumbMiddle->if->slider->isEnabled->return->e->getX->e->getY->if->return->slider->setValueIsAdjusting->switch->slider->getOrientation->halfThumbHeight->thumbTop->e->getY->trackTop->trackBottom->vMax->slider->getMaximum->slider->getExtent->yPositionForValue->if->drawInverted->else->Math->max->Math->min->setThumbLocation->slider->valueForYPosition->setValue->break->halfThumbWidth->thumbLeft->e->getX->trackLeft->trackRight->hMax->slider->getMaximum->slider->getExtent->xPositionForValue->if->drawInverted->else->Math->max->Math->min->setThumbLocation->slider->valueForXPosition->setValue->break
BasicSliderUI.TrackListener#mouseMoved(MouseEvent)::: track listener mouse moved:::
BasicSliderUI.ScrollListener#setDirection(int):::Sets the direction.:::
BasicSliderUI.ScrollListener#setScrollByBlock(boolean):::Sets scrolling by block:::
BasicSliderUI.ScrollListener#actionPerformed(ActionEvent)::: scroll listener action performed:::if->scrollByBlock->else->scrollByUnit->if->trackListener->shouldScroll->e->getSource->stop
BasicSliderUI.ComponentHandler#componentResized(ComponentEvent)::: component handler component resized:::getHandler->componentResized
BasicSliderUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicSliderUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicSliderUI.ActionScroller#actionPerformed(ActionEvent)::: action scroller action performed:::SHARED_ACTION->scroll
BasicSliderUI.ActionScroller#isEnabled()::: action scroller is enabled:::b->if->slider->isEnabled->return
BasicSliderUI.SharedActionScroller#actionPerformed(ActionEvent)::: shared action scroller action performed:::slider->evt->getSource->ui->BasicLookAndFeel->slider->getUI->getUIOfType->if->return->SHARED_ACTION->scroll
BasicSliderUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::slider->evt->getSource->ui->BasicLookAndFeel->slider->getUI->getUIOfType->name->getName->if->return->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll->else->if->scroll
BasicSliderUI.Actions#scroll(JSlider, BasicSliderUI, int, boolean)::: actions scroll:::invert->slider->getInverted->if->if->if->ui->scrollByBlock->else->ui->scrollByUnit->else->if->slider->slider->getMinimum->slider->getMaximum->setValue
BasicSpinnerUI#createUI(JComponent):::Returns a new instance of BasicSpinnerUI:::return->new->BasicSpinnerUI
BasicSpinnerUI#maybeAdd(Component, String)::: basic spinner i maybe add:::if->spinner->add
BasicSpinnerUI#installUI(JComponent):::Calls installDefaults, installListeners, and then adds the components returned by createNextButton, createPreviousButton, and createEditor.:::installDefaults->installListeners->createNextButton->maybeAdd->createPreviousButton->maybeAdd->createEditor->maybeAdd->updateEnabledState->installKeyboardActions
BasicSpinnerUI#uninstallUI(JComponent):::Calls uninstallDefaults, uninstallListeners, and then removes all of the spinners children.:::uninstallDefaults->uninstallListeners->c->removeAll
BasicSpinnerUI#installListeners():::Initializes PropertyChangeListener with a shared object that delegates interesting PropertyChangeEvents to protected methods:::createPropertyChangeListener->spinner->addPropertyChangeListener->if->DefaultLookup->getBoolean->spinner->getHandler->addChangeListener->editor->spinner->getEditor->if->tf->getTextField->if->tf->addFocusListener->tf->addFocusListener
BasicSpinnerUI#uninstallListeners():::Removes the PropertyChangeListener added by installListeners:::spinner->removePropertyChangeListener->spinner->removeChangeListener->editor->spinner->getEditor->removeEditorBorderListener->if->tf->getTextField->if->tf->removeFocusListener->tf->removeFocusListener
BasicSpinnerUI#installDefaults():::Initialize the JSpinner border, foreground, and background, properties based on the corresponding "Spinner.*" properties from defaults table:::spinner->createLayout->setLayout->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->editor->spinner->getEditor->if->tf->getTextField->if->if->tf->getFont->font->spinner->getFont->tf->new->FontUIResource->setFont
BasicSpinnerUI#uninstallDefaults():::Sets the JSpinner's layout manager to null:::spinner->setLayout
BasicSpinnerUI#getHandler()::: basic spinner i get handler:::if->new->Handler->return
BasicSpinnerUI#installNextButtonListeners(Component):::Installs the necessary listeners on the next button, c, to update the JSpinner in response to a user gesture.:::installButtonListeners
BasicSpinnerUI#installPreviousButtonListeners(Component):::Installs the necessary listeners on the previous button, c, to update the JSpinner in response to a user gesture.:::installButtonListeners
BasicSpinnerUI#installButtonListeners(Component, ArrowButtonHandler)::: basic spinner i install button listeners:::if->addActionListener->c->addMouseListener
BasicSpinnerUI#createLayout():::Creates a LayoutManager that manages the editor, nextButton, and previousButton children of the JSpinner:::return->getHandler
BasicSpinnerUI#createPropertyChangeListener():::Creates a PropertyChangeListener that can be added to the JSpinner itself:::return->getHandler
BasicSpinnerUI#createPreviousButton():::Creates a decrement button, i.e:::c->createArrowButton->c->setName->installPreviousButtonListeners->return
BasicSpinnerUI#createNextButton():::Creates an increment button, i.e:::c->createArrowButton->c->setName->installNextButtonListeners->return
BasicSpinnerUI#createArrowButton(int)::: basic spinner i create arrow button:::b->new->BasicArrowButton->buttonBorder->UIManager->getBorder->if->b->new->CompoundBorder->setBorder->else->b->setBorder->b->setInheritsPopupMenu->return
BasicSpinnerUI#createEditor():::This method is called by installUI to get the editor component of the JSpinner:::editor->spinner->getEditor->maybeRemoveEditorBorder->installEditorBorderListener->editor->setInheritsPopupMenu->updateEditorAlignment->return
BasicSpinnerUI#replaceEditor(JComponent, JComponent):::Called by the PropertyChangeListener when the JSpinner editor property changes:::spinner->remove->maybeRemoveEditorBorder->installEditorBorderListener->newEditor->setInheritsPopupMenu->spinner->add
BasicSpinnerUI#updateEditorAlignment(JComponent)::: basic spinner i update editor alignment:::if->alignment->UIManager->getInt->text->getTextField->text->setHorizontalAlignment
BasicSpinnerUI#maybeRemoveEditorBorder(JComponent):::Remove the border around the inner editor component for LaFs that install an outside border around the spinner,:::if->UIManager->getBoolean->if->editor->getBorder->editor->getComponentCount->editor->getComponent->if->editor->getBorder->editor->setBorder
BasicSpinnerUI#installEditorBorderListener(JComponent):::Remove the border around the inner editor component for LaFs that install an outside border around the spinner,:::if->UIManager->getBoolean->if->editor->getBorder->editor->getComponentCount->editor->getComponent->if->editor->getBorder->editor->getBorder->editor->getHandler->addPropertyChangeListener
BasicSpinnerUI#removeEditorBorderListener(JComponent)::: basic spinner i remove editor border listener:::if->UIManager->getBoolean->if->editor->getComponentCount->editor->getComponent->if->editor->getHandler->removePropertyChangeListener
BasicSpinnerUI#updateEnabledState():::Updates the enabled state of the children Components based on the enabled state of the JSpinner.:::spinner->isEnabled->updateEnabledState
BasicSpinnerUI#updateEnabledState(Container, boolean):::Recursively updates the enabled state of the child Components of c.:::for->counter->c->getComponentCount
BasicSpinnerUI#installKeyboardActions():::Installs the keyboard Actions onto the JSpinner.:::iMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSpinnerUI#getInputMap(int):::Returns the InputMap to install for condition.:::if->return->DefaultLookup->get->return
BasicSpinnerUI#loadActionMap(LazyActionMap)::: basic spinner i load action map:::map->put->map->put
BasicSpinnerUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->editor->spinner->getEditor->insets->spinner->getInsets->if->baseline->editor->getBaseline->if->return->return
BasicSpinnerUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return->spinner->getEditor->getBaselineResizeBehavior
BasicSpinnerUI.ArrowButtonHandler#eventToSpinner(AWTEvent)::: arrow button handler event to spinner:::src->e->getSource->while->getParent->return
BasicSpinnerUI.ArrowButtonHandler#actionPerformed(ActionEvent)::: arrow button handler action performed:::spinner->if->e->getSource->eventToSpinner->if->e->getSource->e->getSource->else->if->arrowButton->getModel->isPressed->autoRepeatTimer->isRunning->autoRepeatTimer->stop->if->try->calendarField->getCalendarField->spinner->commitEdit->if->spinner->getModel->setCalendarField->value->spinner->getNextValue->spinner->getPreviousValue->if->spinner->setValue->select->catch->UIManager->getLookAndFeel->provideErrorFeedback->UIManager->getLookAndFeel->provideErrorFeedback->finally
BasicSpinnerUI.ArrowButtonHandler#select(JSpinner):::If the spinner's editor is a DateEditor, this selects the field associated with the value that is being incremented.:::editor->spinner->getEditor->if->dateEditor->ftf->dateEditor->getTextField->format->dateEditor->getFormat->value->if->spinner->getValue->model->dateEditor->getModel->field->model->getCalendarField->ofCalendarField->if->try->iterator->format->formatToCharacterIterator->if->select->select->catch->finally
BasicSpinnerUI.ArrowButtonHandler#select(JFormattedTextField, AttributedCharacterIterator, DateFormat.Field):::Selects the passed in field, returning true if it is found, false otherwise.:::max->ftf->getDocument->getLength->iterator->first->do->attrs->iterator->getAttributes->if->attrs->containsKey->start->iterator->getRunStart->end->iterator->getRunLimit->if->ftf->select->return->while->iterator->next->return
BasicSpinnerUI.ArrowButtonHandler#getCalendarField(JSpinner):::Returns the calendarField under the start of the selection, or -1 if there is no valid calendar field under the selection (or the spinner isn't editing dates.:::editor->spinner->getEditor->if->dateEditor->ftf->dateEditor->getTextField->start->ftf->getSelectionStart->formatter->ftf->getFormatter->if->fields->getFields->for->counter->return
BasicSpinnerUI.ArrowButtonHandler#mousePressed(MouseEvent)::: arrow button handler mouse pressed:::if->SwingUtilities->isLeftMouseButton->e->getComponent->isEnabled->eventToSpinner->autoRepeatTimer->start->focusSpinnerIfNecessary
BasicSpinnerUI.ArrowButtonHandler#mouseReleased(MouseEvent)::: arrow button handler mouse released:::autoRepeatTimer->stop
BasicSpinnerUI.ArrowButtonHandler#mouseClicked(MouseEvent)::: arrow button handler mouse clicked:::
BasicSpinnerUI.ArrowButtonHandler#mouseEntered(MouseEvent)::: arrow button handler mouse entered:::if->autoRepeatTimer->isRunning->eventToSpinner->autoRepeatTimer->start
BasicSpinnerUI.ArrowButtonHandler#mouseExited(MouseEvent)::: arrow button handler mouse exited:::if->autoRepeatTimer->isRunning->autoRepeatTimer->stop
BasicSpinnerUI.ArrowButtonHandler#focusSpinnerIfNecessary():::Requests focus on a child of the spinner if the spinner doesn't have focus.:::fo->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->spinner->isRequestFocusEnabled->SwingUtilities->isDescendingFrom->root->if->root->isFocusCycleRoot->root->getFocusCycleRootAncestor->if->ftp->root->getFocusTraversalPolicy->child->ftp->getComponentAfter->if->SwingUtilities->isDescendingFrom->child->requestFocus
BasicSpinnerUI.ArrowButtonHandler#focusGained(FocusEvent)::: arrow button handler focus gained:::
BasicSpinnerUI.ArrowButtonHandler#focusLost(FocusEvent)::: arrow button handler focus lost:::if->eventToSpinner->if->autoRepeatTimer->isRunning->autoRepeatTimer->stop->if->model->arrowButton->getModel->model->setPressed->model->setArmed
BasicSpinnerUI.Handler#addLayoutComponent(String, Component)::: handler add layout component:::if->equals->else->if->equals->else->if->equals
BasicSpinnerUI.Handler#removeLayoutComponent(Component)::: handler remove layout component:::if->else->if->else->if
BasicSpinnerUI.Handler#preferredSize(Component)::: handler preferred size:::return->c->getPreferredSize
BasicSpinnerUI.Handler#preferredLayoutSize(Container)::: handler preferred layout size:::nextD->preferredSize->previousD->preferredSize->editorD->preferredSize->size->new->Dimension->Math->max->insets->parent->getInsets->return
BasicSpinnerUI.Handler#minimumLayoutSize(Container)::: handler minimum layout size:::return->preferredLayoutSize
BasicSpinnerUI.Handler#setBounds(Component, int, int, int, int)::: handler set bounds:::if->c->setBounds
BasicSpinnerUI.Handler#layoutContainer(Container)::: handler layout container:::width->parent->getWidth->height->parent->getHeight->insets->parent->getInsets->if->setBounds->return->nextD->preferredSize->previousD->preferredSize->buttonsWidth->Math->max->editorHeight->buttonInsets->UIManager->getInsets->if->editorX->editorWidth->buttonsX->if->parent->getComponentOrientation->isLeftToRight->else->nextY->nextHeight->previousY->previousHeight->setBounds->setBounds->setBounds
BasicSpinnerUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->e->getPropertyName->if->e->getSource->spinner->e->getSource->spinnerUI->spinner->getUI->if->ui->if->equals->oldEditor->e->getOldValue->newEditor->e->getNewValue->ui->replaceEditor->ui->updateEnabledState->if->tf->getTextField->if->tf->removeFocusListener->tf->removeFocusListener->if->tf->getTextField->if->if->tf->getFont->font->spinner->getFont->tf->new->FontUIResource->setFont->tf->addFocusListener->tf->addFocusListener->else->if->equals->equals->ui->updateEnabledState->else->if->equals->editor->spinner->getEditor->if->tf->getTextField->if->if->tf->getFont->font->spinner->getFont->tf->new->FontUIResource->setFont->else->if->equals->updateToolTipTextForChildren->else->if->equals->o->e->getNewValue->if->e->getOldValue->editor->spinner->getEditor->if->editor->applyComponentOrientation->spinner->revalidate->spinner->repaint->else->if->e->getSource->c->e->getSource->if->c->getParent->c->getParent->getParent->equals->spinner->c->getParent->getParent->spinnerUI->spinner->getUI->if->ui->ui->maybeRemoveEditorBorder
BasicSpinnerUI.Handler#updateToolTipTextForChildren(JComponent)::: handler update tool tip text for children:::toolTipText->spinner->getToolTipText->children->spinner->getComponents->for->i
BasicSpinnerUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::if->e->getSource->spinner->e->getSource->spinnerUI->spinner->getUI->if->DefaultLookup->getBoolean->ui->ui->updateEnabledState
BasicSplitPaneDivider#revalidateSplitPane()::: basic split pane divider revalidate split pane:::invalidate->if->splitPane->revalidate
BasicSplitPaneDivider#setBasicSplitPaneUI(BasicSplitPaneUI):::Sets the SplitPaneUI that is using the receiver.:::if->splitPane->removePropertyChangeListener->if->splitPane->removeMouseListener->splitPane->removeMouseMotionListener->removeMouseListener->removeMouseMotionListener->if->newUI->getSplitPane->if->if->new->MouseHandler->splitPane->addMouseListener->splitPane->addMouseMotionListener->addMouseListener->addMouseMotionListener->splitPane->addPropertyChangeListener->if->splitPane->isOneTouchExpandable->oneTouchExpandableChanged->else
BasicSplitPaneDivider#getBasicSplitPaneUI():::Returns the SplitPaneUI the receiver is currently in.:::return
BasicSplitPaneDivider#setDividerSize(int):::Sets the size of the divider to newSize:::
BasicSplitPaneDivider#getDividerSize():::Returns the size of the divider, that is the width if the splitpane is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.:::return
BasicSplitPaneDivider#setBorder(Border):::Sets the border of this component.:::oldBorder
BasicSplitPaneDivider#getBorder():::Returns the border of this component or null if no border is currently set.:::return
BasicSplitPaneDivider#getInsets():::If a border has been set on this component, returns the border's insets, else calls super.getInsets.:::border->getBorder->if->return->border->getBorderInsets->return->super->getInsets
BasicSplitPaneDivider#setMouseOver(boolean):::Sets whether or not the mouse is currently over the divider.:::
BasicSplitPaneDivider#isMouseOver():::Returns whether or not the mouse is currently over the divider:::return
BasicSplitPaneDivider#getPreferredSize():::Returns dividerSize x dividerSize:::if->return->getDividerSize->new->Dimension->return->getDividerSize->new->Dimension
BasicSplitPaneDivider#getMinimumSize():::Returns dividerSize x dividerSize:::return->getPreferredSize
BasicSplitPaneDivider#propertyChange(PropertyChangeEvent):::Property change event, presumably from the JSplitPane, will message updateOrientation if necessary.:::if->e->getSource->if->e->getPropertyName->splitPane->getOrientation->Cursor->getPredefinedCursor->Cursor->getPredefinedCursor->setCursor->revalidateSplitPane->else->if->e->getPropertyName->oneTouchExpandableChanged
BasicSplitPaneDivider#paint(Graphics):::Paints the divider.:::super->paint->border->getBorder->if->size->getSize->border->paintBorder
BasicSplitPaneDivider#oneTouchExpandableChanged():::Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes:::if->DefaultLookup->getBoolean->return->if->splitPane->isOneTouchExpandable->createLeftOneTouchButton->if->leftButton->new->OneTouchActionHandler->addActionListener->createRightOneTouchButton->if->rightButton->new->OneTouchActionHandler->addActionListener->if->add->add->revalidateSplitPane
BasicSplitPaneDivider#createLeftOneTouchButton():::Creates and return an instance of JButton that can be used to collapse the left component in the split pane.:::b->new->JButton->b->new->Dimension->setMinimumSize->b->Cursor->getPredefinedCursor->setCursor->b->setFocusPainted->b->setBorderPainted->b->setRequestFocusEnabled->return
BasicSplitPaneDivider#createRightOneTouchButton():::Creates and return an instance of JButton that can be used to collapse the right component in the split pane.:::b->new->JButton->b->new->Dimension->setMinimumSize->b->Cursor->getPredefinedCursor->setCursor->b->setFocusPainted->b->setBorderPainted->b->setRequestFocusEnabled->return
BasicSplitPaneDivider#prepareForDragging():::Message to prepare for dragging:::splitPaneUI->startDragging
BasicSplitPaneDivider#dragDividerTo(int):::Messages the BasicSplitPaneUI with dragDividerTo that this instance is contained in.:::splitPaneUI->dragDividerTo
BasicSplitPaneDivider#finishDraggingTo(int):::Messages the BasicSplitPaneUI with finishDraggingTo that this instance is contained in.:::splitPaneUI->finishDraggingTo
BasicSplitPaneDivider.MouseHandler#mousePressed(MouseEvent):::Starts the dragging session by creating the appropriate instance of DragController.:::if->e->getSource->e->getSource->splitPane->isEnabled->newHiddenDivider->splitPaneUI->getNonContinuousLayoutDivider->if->if->hiddenDivider->removeMouseListener->hiddenDivider->removeMouseMotionListener->if->hiddenDivider->addMouseMotionListener->hiddenDivider->addMouseListener->if->splitPane->getLeftComponent->splitPane->getRightComponent->if->new->DragController->else->new->VerticalDragController->if->dragger->isValid->else->prepareForDragging->dragger->continueDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseReleased(MouseEvent):::If dragger is not null it is messaged with completeDrag.:::if->if->e->getSource->dragger->e->getX->e->getY->completeDrag->else->if->e->getSource->ourLoc->getLocation->dragger->e->getX->e->getY->completeDrag->else->if->e->getSource->hDividerLoc->hiddenDivider->getLocation->ourX->e->getX->ourY->e->getY->dragger->completeDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseDragged(MouseEvent):::If dragger is not null it is messaged with continueDrag.:::if->if->e->getSource->dragger->e->getX->e->getY->continueDrag->else->if->e->getSource->ourLoc->getLocation->dragger->e->getX->e->getY->continueDrag->else->if->e->getSource->hDividerLoc->hiddenDivider->getLocation->ourX->e->getX->ourY->e->getY->dragger->continueDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseMoved(MouseEvent)::: Resets the cursor based on the orientation.:::
BasicSplitPaneDivider.MouseHandler#mouseEntered(MouseEvent):::Invoked when the mouse enters a component.:::if->e->getSource->setMouseOver
BasicSplitPaneDivider.MouseHandler#mouseExited(MouseEvent):::Invoked when the mouse exits a component.:::if->e->getSource->setMouseOver
BasicSplitPaneDivider.DragController#isValid():::Returns true if the dragging session is valid.:::return
BasicSplitPaneDivider.DragController#positionForMouseEvent(MouseEvent):::Returns the new position to put the divider at based on the passed in MouseEvent.:::newX->e->getSource->e->getX->getLocation->e->getX->Math->Math->max->min->return
BasicSplitPaneDivider.DragController#getNeededLocation(int, int):::Returns the x argument, since this is used for horizontal splits.:::newX->Math->Math->max->min->return
BasicSplitPaneDivider.DragController#continueDrag(int, int):::Messages dragDividerTo with the new location for the mouse event.:::getNeededLocation->dragDividerTo
BasicSplitPaneDivider.DragController#continueDrag(MouseEvent):::Messages dragDividerTo with the new location for the mouse event.:::positionForMouseEvent->dragDividerTo
BasicSplitPaneDivider.DragController#completeDrag(int, int):::Messages finishDraggingTo with the new location for the mouse event.:::getNeededLocation->finishDraggingTo
BasicSplitPaneDivider.DragController#completeDrag(MouseEvent):::Messages finishDraggingTo with the new location for the mouse event.:::positionForMouseEvent->finishDraggingTo
BasicSplitPaneDivider.VerticalDragController#getNeededLocation(int, int):::Returns the y argument, since this is used for vertical splits.:::newY->Math->Math->max->min->return
BasicSplitPaneDivider.VerticalDragController#positionForMouseEvent(MouseEvent):::Returns the new position to put the divider at based on the passed in MouseEvent.:::newY->e->getSource->e->getY->getLocation->e->getY->Math->Math->max->min->return
BasicSplitPaneDivider.DividerLayout#layoutContainer(Container)::: divider layout layout container:::if->if->splitPane->isOneTouchExpandable->insets->getInsets->if->extraX->blockSize->getHeight->if->Math->max->Math->min->y->c->getSize->if->leftButton->setBounds->rightButton->setBounds->else->extraY->blockSize->getWidth->if->Math->max->Math->min->x->c->getSize->if->leftButton->setBounds->rightButton->setBounds->else->leftButton->setBounds->rightButton->setBounds
BasicSplitPaneDivider.DividerLayout#minimumLayoutSize(Container)::: divider layout minimum layout size:::if->return->new->Dimension->buttonMinSize->if->splitPane->isOneTouchExpandable->leftButton->getMinimumSize->insets->getInsets->width->getDividerSize->height->if->if->size->if->Math->max->else->if->size->if->Math->max->return->new->Dimension
BasicSplitPaneDivider.DividerLayout#preferredLayoutSize(Container)::: divider layout preferred layout size:::return->minimumLayoutSize
BasicSplitPaneDivider.DividerLayout#removeLayoutComponent(Component)::: divider layout remove layout component:::
BasicSplitPaneDivider.DividerLayout#addLayoutComponent(String, Component)::: divider layout add layout component:::
BasicSplitPaneDivider.OneTouchActionHandler#actionPerformed(ActionEvent)::: one touch action handler action performed:::insets->splitPane->getInsets->lastLoc->splitPane->getLastDividerLocation->currentLoc->splitPaneUI->getDividerLocation->newLoc->if->if->if->splitPane->getHeight->getHeight->maxLoc->splitPane->getMaximumDividerLocation->Math->min->splitPaneUI->setKeepHidden->else->splitPaneUI->setKeepHidden->else->if->splitPane->getWidth->getWidth->maxLoc->splitPane->getMaximumDividerLocation->Math->min->splitPaneUI->setKeepHidden->else->splitPaneUI->setKeepHidden->else->if->if->maxLoc->splitPane->getMaximumDividerLocation->Math->min->splitPaneUI->setKeepHidden->else->splitPane->getHeight->getHeight->splitPaneUI->setKeepHidden->else->if->maxLoc->splitPane->getMaximumDividerLocation->Math->min->splitPaneUI->setKeepHidden->else->splitPane->getWidth->getWidth->splitPaneUI->setKeepHidden->if->splitPane->setDividerLocation->splitPane->setLastDividerLocation
BasicSplitPaneUI#createUI(JComponent):::Creates a new instance of BasicSplitPaneUI.:::return->new->BasicSplitPaneUI
BasicSplitPaneUI#loadActionMap(LazyActionMap)::: basic split pane i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicSplitPaneUI#installUI(JComponent):::Installs the UI.:::installDefaults->installListeners->installKeyboardActions->setLastDragLocation
BasicSplitPaneUI#installDefaults():::Installs the UI defaults.:::LookAndFeel->installBorder->LookAndFeel->installColors->LookAndFeel->installProperty->if->createDefaultDivider->divider->setBasicSplitPaneUI->b->divider->getBorder->if->divider->UIManager->getBorder->setBorder->UIManager->getColor->splitPane->getOrientation->setOrientation->temp->UIManager->get->LookAndFeel->installProperty->divider->splitPane->getDividerSize->setDividerSize->divider->getDividerSize->splitPane->add->splitPane->isContinuousLayout->setContinuousLayout->resetLayoutManager->if->createDefaultNonContinuousLayoutDivider->setNonContinuousLayoutDivider->else->setNonContinuousLayoutDivider->if->new->HashSet<KeyStroke>->managingFocusForwardTraversalKeys->KeyStroke->getKeyStroke->add->splitPane->setFocusTraversalKeys->if->new->HashSet<KeyStroke>->managingFocusBackwardTraversalKeys->KeyStroke->getKeyStroke->add->splitPane->setFocusTraversalKeys
BasicSplitPaneUI#installListeners():::Installs the event listeners for the UI.:::if->createPropertyChangeListener->splitPane->addPropertyChangeListener->if->createFocusListener->splitPane->addFocusListener
BasicSplitPaneUI#installKeyboardActions():::Installs the keyboard actions for the UI.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSplitPaneUI#getInputMap(int)::: basic split pane i get input map:::if->return->DefaultLookup->get->return
BasicSplitPaneUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallKeyboardActions->uninstallListeners->uninstallDefaults
BasicSplitPaneUI#uninstallDefaults():::Uninstalls the UI defaults.:::if->splitPane->getLayout->splitPane->setLayout->if->splitPane->remove->LookAndFeel->uninstallBorder->b->divider->getBorder->if->divider->setBorder->splitPane->remove->divider->setBasicSplitPaneUI->setNonContinuousLayoutDivider->splitPane->setFocusTraversalKeys->splitPane->setFocusTraversalKeys
BasicSplitPaneUI#uninstallListeners():::Uninstalls the event listeners for the UI.:::if->splitPane->removePropertyChangeListener->if->splitPane->removeFocusListener
BasicSplitPaneUI#uninstallKeyboardActions():::Uninstalls the keyboard actions for the UI.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicSplitPaneUI#createPropertyChangeListener():::Creates a PropertyChangeListener for the JSplitPane UI.:::return->getHandler
BasicSplitPaneUI#getHandler()::: basic split pane i get handler:::if->new->Handler->return
BasicSplitPaneUI#createFocusListener():::Creates a FocusListener for the JSplitPane UI.:::return->getHandler
BasicSplitPaneUI#createKeyboardUpLeftListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardUpLeftHandler
BasicSplitPaneUI#createKeyboardDownRightListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardDownRightHandler
BasicSplitPaneUI#createKeyboardHomeListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardHomeHandler
BasicSplitPaneUI#createKeyboardEndListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardEndHandler
BasicSplitPaneUI#createKeyboardResizeToggleListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardResizeToggleHandler
BasicSplitPaneUI#getOrientation():::Returns the orientation for the JSplitPane.:::return
BasicSplitPaneUI#setOrientation(int):::Set the orientation for the JSplitPane.:::
BasicSplitPaneUI#isContinuousLayout():::Determines whether the JSplitPane is set to use a continuous layout.:::return
BasicSplitPaneUI#setContinuousLayout(boolean):::Turn continuous layout on/off.:::
BasicSplitPaneUI#getLastDragLocation():::Returns the last drag location of the JSplitPane.:::return
BasicSplitPaneUI#setLastDragLocation(int):::Set the last drag location of the JSplitPane.:::
BasicSplitPaneUI#getKeyboardMoveIncrement()::: basic split pane i get keyboard move increment:::return
BasicSplitPaneUI.PropertyHandler#propertyChange(PropertyChangeEvent):::Messaged from the JSplitPane the receiver is contained in:::getHandler->propertyChange
BasicSplitPaneUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicSplitPaneUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicSplitPaneUI.KeyboardUpLeftHandler#actionPerformed(ActionEvent)::: keyboard up left handler action performed:::if->splitPane->Math->getDividerLocation->getKeyboardMoveIncrement->max->setDividerLocation
BasicSplitPaneUI.KeyboardDownRightHandler#actionPerformed(ActionEvent)::: keyboard down right handler action performed:::if->splitPane->getDividerLocation->getKeyboardMoveIncrement->setDividerLocation
BasicSplitPaneUI.KeyboardHomeHandler#actionPerformed(ActionEvent)::: keyboard home handler action performed:::if->splitPane->setDividerLocation
BasicSplitPaneUI.KeyboardEndHandler#actionPerformed(ActionEvent)::: keyboard end handler action performed:::if->insets->splitPane->getInsets->bottomI->rightI->if->splitPane->splitPane->getHeight->setDividerLocation->else->splitPane->splitPane->getWidth->setDividerLocation
BasicSplitPaneUI.KeyboardResizeToggleHandler#actionPerformed(ActionEvent)::: keyboard resize toggle handler action performed:::if->splitPane->requestFocus
BasicSplitPaneUI#getDivider():::Returns the divider between the top Components.:::return
BasicSplitPaneUI#createDefaultNonContinuousLayoutDivider():::Returns the default non continuous layout divider, which is an instance of Canvas that fills in the background with dark gray.:::return->new->Canvas
BasicSplitPaneUI#setNonContinuousLayoutDivider(Component):::Sets the divider to use when the JSplitPane is configured to not continuously layout:::setNonContinuousLayoutDivider
BasicSplitPaneUI#setNonContinuousLayoutDivider(Component, boolean):::Sets the divider to use.:::if->splitPane->remove
BasicSplitPaneUI#addHeavyweightDivider()::: basic split pane i add heavyweight divider:::if->leftC->splitPane->getLeftComponent->rightC->splitPane->getRightComponent->lastLocation->splitPane->getDividerLocation->if->splitPane->setLeftComponent->if->splitPane->setRightComponent->splitPane->remove->splitPane->splitPane->getComponentCount->add->splitPane->setLeftComponent->splitPane->setRightComponent->splitPane->add->if->splitPane->setDividerLocation
BasicSplitPaneUI#getNonContinuousLayoutDivider():::Returns the divider to use when the JSplitPane is configured to not continuously layout:::return
BasicSplitPaneUI#getSplitPane():::Returns the JSplitPane this instance is currently contained in.:::return
BasicSplitPaneUI#createDefaultDivider():::Creates the default divider.:::return->new->BasicSplitPaneDivider
BasicSplitPaneUI#resetToPreferredSizes(JSplitPane):::Messaged to reset the preferred sizes.:::if->layoutManager->resetToPreferredSizes->splitPane->revalidate->splitPane->repaint
BasicSplitPaneUI#setDividerLocation(JSplitPane, int):::Sets the location of the divider to location.:::if->splitPane->revalidate->splitPane->repaint->if->insets->splitPane->getInsets->orientation->splitPane->getOrientation->if->splitPane->getHeight->divider->getHeight->splitPane->getWidth->divider->getWidth->setKeepHidden->else
BasicSplitPaneUI#getDividerLocation(JSplitPane):::Returns the location of the divider, which may differ from what the splitpane thinks the location of the divider is.:::if->return->divider->getLocation->return->divider->getLocation
BasicSplitPaneUI#getMinimumDividerLocation(JSplitPane):::Gets the minimum location of the divider.:::minLoc->leftC->splitPane->getLeftComponent->if->leftC->isVisible->insets->splitPane->getInsets->minSize->leftC->getMinimumSize->if->else->if->if->else->return
BasicSplitPaneUI#getMaximumDividerLocation(JSplitPane):::Gets the maximum location of the divider.:::splitPaneSize->splitPane->getSize->maxLoc->rightC->splitPane->getRightComponent->if->insets->splitPane->getInsets->minSize->new->Dimension->if->rightC->isVisible->rightC->getMinimumSize->if->else->if->if->else->return->Math->getMinimumDividerLocation->max
BasicSplitPaneUI#finishedPaintingChildren(JSplitPane, Graphics):::Called when the specified split pane has finished painting its children.:::if->getLastDragLocation->isContinuousLayout->size->splitPane->getSize->g->setColor->if->g->getLastDragLocation->fillRect->else->g->fillRect
BasicSplitPaneUI#paint(Graphics, JComponent)::: basic split pane i paint:::if->splitPane->getDividerLocation->splitPane->getDividerLocation->setDividerLocation
BasicSplitPaneUI#getPreferredSize(JComponent):::Returns the preferred size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->preferredLayoutSize->return->new->Dimension
BasicSplitPaneUI#getMinimumSize(JComponent):::Returns the minimum size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->minimumLayoutSize->return->new->Dimension
BasicSplitPaneUI#getMaximumSize(JComponent):::Returns the maximum size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->maximumLayoutSize->return->new->Dimension
BasicSplitPaneUI#getInsets(JComponent):::Returns the insets:::return
BasicSplitPaneUI#resetLayoutManager():::Resets the layout manager based on orientation and messages it with invalidateLayout to pull in appropriate Components.:::if->new->BasicHorizontalLayoutManager->else->new->BasicHorizontalLayoutManager->splitPane->setLayout->layoutManager->updateComponents->splitPane->revalidate->splitPane->repaint
BasicSplitPaneUI#setKeepHidden(boolean):::Set the value to indicate if one of the splitpane sides is expanded.:::
BasicSplitPaneUI#getKeepHidden():::The value returned indicates if one of the splitpane sides is expanded.:::return
BasicSplitPaneUI#startDragging():::Should be messaged before the dragging session starts, resets lastDragLocation and dividerSize.:::leftC->splitPane->getLeftComponent->rightC->splitPane->getRightComponent->cPeer->getDividerLocation->acc->AWTAccessor->getComponentAccessor->if->acc->getPeer->else->if->acc->getPeer->if->divider->getBounds->setLastDragLocation->divider->getSize->if->isContinuousLayout->nonContinuousLayoutDivider->getLastDragLocation->splitPane->getHeight->setBounds->addHeavyweightDivider->else->divider->getBounds->setLastDragLocation->divider->getSize->if->isContinuousLayout->nonContinuousLayoutDivider->getLastDragLocation->splitPane->getWidth->setBounds->addHeavyweightDivider
BasicSplitPaneUI#dragDividerTo(int):::Messaged during a dragging session to move the divider to the passed in location:::if->getLastDragLocation->if->isContinuousLayout->splitPane->setDividerLocation->setLastDragLocation->else->lastLoc->getLastDragLocation->setLastDragLocation->if->if->nonContinuousLayoutDivider->getLastDragLocation->setLocation->else->splitHeight->splitPane->getHeight->splitPane->repaint->splitPane->repaint->else->if->nonContinuousLayoutDivider->getLastDragLocation->setLocation->else->splitWidth->splitPane->getWidth->splitPane->repaint->splitPane->repaint
BasicSplitPaneUI#finishDraggingTo(int):::Messaged to finish the dragging session:::dragDividerTo->setLastDragLocation->if->isContinuousLayout->leftC->splitPane->getLeftComponent->leftBounds->leftC->getBounds->if->if->nonContinuousLayoutDivider->setLocation->else->nonContinuousLayoutDivider->setLocation->splitPane->remove->splitPane->setDividerLocation
BasicSplitPaneUI#getDividerBorderSize():::As of Java 2 platform v1.3 this method is no longer used:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#layoutContainer(Container):::Does the actual layout.:::containerSize->container->getSize->if->return->spDividerLocation->splitPane->getDividerLocation->insets->splitPane->getInsets->availableSize->getAvailableSize->newSize->getSizeForPrimaryAxis->beginLocation->getDividerLocation->dOffset->getSizeForPrimaryAxis->dSize->getPreferredSize->if->resetToPreferredSizes->else->if->getSizeForPrimaryAxis->if->getSizeForPrimaryAxis->else->setDividerLocation->else->if->getKeepHidden->distributeSpace->nextLocation->getInitialLocation->counter->while->if->isVisible->setComponentToSize->switch->break->break->break->if->newLocation->getDividerLocation->if->lastLocation->splitPane->getLastDividerLocation->try->splitPane->setDividerLocation->splitPane->setLastDividerLocation->catch->finally
BasicSplitPaneUI.BasicHorizontalLayoutManager#addLayoutComponent(String, Component):::Adds the component at place:::isValid->if->if->place->equals->component->getPreferredSize->getSizeForPrimaryAxis->else->if->place->equals->place->equals->else->if->place->equals->place->equals->else->if->place->equals->else->if->throw->new->IllegalArgumentException
BasicSplitPaneUI.BasicHorizontalLayoutManager#minimumLayoutSize(Container):::Returns the minimum size needed to contain the children:::minPrimary->minSecondary->insets->splitPane->getInsets->for->counter->if->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForSecondaryAxis->getSizeForSecondaryAxis->if->return->new->Dimension->return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#preferredLayoutSize(Container):::Returns the preferred size needed to contain the children:::prePrimary->preSecondary->insets->splitPane->getInsets->for->counter->if->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForSecondaryAxis->getSizeForSecondaryAxis->if->return->new->Dimension->return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#removeLayoutComponent(Component):::Removes the specified component from our knowledge.:::for->counter
BasicSplitPaneUI.BasicHorizontalLayoutManager#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object.:::if->addLayoutComponent->else->throw->new->IllegalArgumentException
BasicSplitPaneUI.BasicHorizontalLayoutManager#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#invalidateLayout(Container):::Does nothing:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#maximumLayoutSize(Container):::Returns the maximum layout size, which is Integer.MAX_VALUE in both directions.:::return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetToPreferredSizes():::Marks the receiver so that the next time this instance is laid out it'll ask for the preferred sizes.:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetSizeAt(int):::Resets the size of the Component at the passed in location.:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#setSizes(int[]):::Sets the sizes to newSizes.:::System->arraycopy
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizes():::Returns the sizes of the components.:::retSizes->new->intArr->System->arraycopy->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getPreferredSizeOfComponent(Component):::Returns the width of the passed in Components preferred size.:::return->c->getPreferredSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getMinimumSizeOfComponent(Component):::Returns the width of the passed in Components minimum size.:::return->c->getMinimumSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeOfComponent(Component):::Returns the width of the passed in component.:::return->c->getSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getAvailableSize(Dimension, Insets):::Returns the available width based on the container size and Insets.:::if->return->getSizeForPrimaryAxis->return->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getInitialLocation(Insets):::Returns the left inset, unless the Insets are null in which case 0 is returned.:::if->return->getSizeForPrimaryAxis->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#setComponentToSize(Component, int, int, Insets, Dimension):::Sets the width of the component c to be size, placing its x location at location, y to the insets.top and height to the containerSize.height less the top and bottom insets.:::if->if->c->setBounds->else->c->setBounds->else->if->c->setBounds->else->c->setBounds
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForPrimaryAxis(Dimension):::If the axis == 0, the width is returned, otherwise the height.:::if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForSecondaryAxis(Dimension):::If the axis == 0, the width is returned, otherwise the height.:::if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForPrimaryAxis(Insets, boolean):::Returns a particular value of the inset identified by the axis and isTop   axis isTop    0    true    - left    0    false   - right    1    true    - top    1    false   - bottom:::if->if->return->return->if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForSecondaryAxis(Insets, boolean):::Returns a particular value of the inset identified by the axis and isTop   axis isTop    0    true    - left    0    false   - right    1    true    - top    1    false   - bottom:::if->if->return->return->if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#updateComponents():::Determines the components:::comp->splitPane->getLeftComponent->if->if->else->splitPane->getRightComponent->if->if->else->children->splitPane->getComponents->oldDivider->for->counter->if->else->getPreferredSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#setDividerLocation(int, int):::Resets the size of the first component to leftSize, and the right component to the remainder of the space.:::lValid->isVisible->rValid->isVisible->dValid->isVisible->max->if->Math->Math->min->max->if->if->else->else->if
BasicSplitPaneUI.BasicHorizontalLayoutManager#getPreferredSizes():::Returns an array of the minimum sizes of the components.:::retValue->new->intArr->for->counter->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getMinimumSizes():::Returns an array of the minimum sizes of the components.:::retValue->new->intArr->for->counter->getMinimumSizeOfComponent->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetToPreferredSizes(int):::Resets the components to their preferred sizes.:::testSizes->getPreferredSizes->totalSize->for->counter->if->getMinimumSizes->for->counter->setSizes->distributeSpace
BasicSplitPaneUI.BasicHorizontalLayoutManager#distributeSpace(int, boolean):::Distributes space between the two components (divider won't get any extra space) based on the weighting:::lValid->isVisible->rValid->isVisible->if->if->getSize->getSizeForPrimaryAxis->if->getSize->getSizeForPrimaryAxis->else->if->getSize->getSizeForPrimaryAxis->if->weight->splitPane->getResizeWeight->lExtra->rExtra->lMin->getMinimumSizeOfComponent->rMin->getMinimumSizeOfComponent->lMinValid->rMinValid->if->if->else->if->else->if->if->if->else->else->if->if->if->else->if->if->else->if->Math->max->else->if->Math->max
BasicSplitPaneUI.Handler#propertyChange(PropertyChangeEvent):::Messaged from the JSplitPane the receiver is contained in:::if->e->getSource->changeName->e->getPropertyName->if->splitPane->getOrientation->resetLayoutManager->else->if->splitPane->isContinuousLayout->setContinuousLayout->if->isContinuousLayout->if->createDefaultNonContinuousLayoutDivider->setNonContinuousLayoutDivider->else->if->nonContinuousLayoutDivider->getParent->setNonContinuousLayoutDivider->else->if->divider->splitPane->getDividerSize->setDividerSize->divider->getDividerSize->splitPane->revalidate->splitPane->repaint
BasicSplitPaneUI.Handler#focusGained(FocusEvent)::: handler focus gained:::splitPane->repaint
BasicSplitPaneUI.Handler#focusLost(FocusEvent)::: handler focus lost:::splitPane->repaint
BasicSplitPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::splitPane->ev->getSource->ui->BasicLookAndFeel->splitPane->getUI->getUIOfType->if->return->key->getName->if->if->splitPane->Math->ui->getDividerLocation->ui->getKeyboardMoveIncrement->max->setDividerLocation->else->if->if->splitPane->ui->getDividerLocation->ui->getKeyboardMoveIncrement->setDividerLocation->else->if->if->splitPane->setDividerLocation->else->if->if->insets->splitPane->getInsets->bottomI->rightI->if->splitPane->splitPane->getHeight->setDividerLocation->else->splitPane->splitPane->getWidth->setDividerLocation->else->if->if->splitPane->requestFocus->else->parentSplitPane->SwingUtilities->getAncestorOfClass->if->parentSplitPane->requestFocus->else->if->toggleFocus->else->if->moveFocus->else->if->moveFocus
BasicSplitPaneUI.Actions#moveFocus(JSplitPane, int)::: actions move focus:::rootAncestor->splitPane->getFocusCycleRootAncestor->policy->rootAncestor->getFocusTraversalPolicy->focusOn->policy->getComponentAfter->policy->getComponentBefore->focusFrom->new->HashSet<Component>->if->splitPane->isAncestorOf->do->focusFrom->add->focusOn->getFocusCycleRootAncestor->rootAncestor->getFocusTraversalPolicy->policy->getComponentAfter->policy->getComponentBefore->while->splitPane->isAncestorOf->focusFrom->contains->if->splitPane->isAncestorOf->focusOn->requestFocus
BasicSplitPaneUI.Actions#toggleFocus(JSplitPane)::: actions toggle focus:::left->splitPane->getLeftComponent->right->splitPane->getRightComponent->manager->KeyboardFocusManager->getCurrentKeyboardFocusManager->focus->manager->getFocusOwner->focusOn->getNextSide->if->if->SwingUtilities->isDescendingFrom->SwingUtilities->isDescendingFrom->SwingUtilities->isDescendingFrom->SwingUtilities->isDescendingFrom->return->SwingUtilities2->compositeRequestFocus
BasicSplitPaneUI.Actions#getNextSide(JSplitPane, Component)::: actions get next side:::left->splitPane->getLeftComponent->right->splitPane->getRightComponent->next->if->SwingUtilities->isDescendingFrom->getFirstAvailableComponent->if->return->parentSplitPane->SwingUtilities->getAncestorOfClass->if->getNextSide->else->getFirstAvailableComponent->if->getFirstAvailableComponent->return
BasicSplitPaneUI.Actions#getFirstAvailableComponent(Component)::: actions get first available component:::if->sp->left->sp->getLeftComponent->getFirstAvailableComponent->if->else->sp->getRightComponent->getFirstAvailableComponent->return
BasicTabbedPaneUI#createUI(JComponent):::Create a UI.:::return->new->BasicTabbedPaneUI
BasicTabbedPaneUI#loadActionMap(LazyActionMap)::: basic tabbed pane i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicTabbedPaneUI#installUI(JComponent)::: basic tabbed pane i install i:::c->createLayoutManager->setLayout->installComponents->installDefaults->installListeners->installKeyboardActions
BasicTabbedPaneUI#uninstallUI(JComponent)::: basic tabbed pane i uninstall i:::uninstallKeyboardActions->uninstallListeners->uninstallDefaults->uninstallComponents->c->setLayout
BasicTabbedPaneUI#createLayoutManager():::Invoked by installUI to create a layout manager object to manage the JTabbedPane.:::if->tabPane->getTabLayoutPolicy->return->new->TabbedPaneScrollLayout->else->return->new->TabbedPaneLayout
BasicTabbedPaneUI#scrollableTabLayoutEnabled()::: basic tabbed pane i scrollable tab layout enabled:::return->tabPane->getLayout
BasicTabbedPaneUI#installComponents():::Creates and installs any required subcomponents for the JTabbedPane:::if->scrollableTabLayoutEnabled->if->tabPane->getTabPlacement->new->ScrollableTabSupport->tabPane->add->installTabContainer
BasicTabbedPaneUI#installTabContainer()::: basic tabbed pane i install tab container:::for->i->tabPane->getTabCount->if->return->if->scrollableTabLayoutEnabled->add->else->tabPane->add
BasicTabbedPaneUI#createScrollButton(int):::Creates and returns a JButton that will provide the user with a way to scroll the tabs in a particular direction:::if->throw->new->IllegalArgumentException->return->new->ScrollableTabButton
BasicTabbedPaneUI#uninstallComponents():::Removes any installed subcomponents from the JTabbedPane:::uninstallTabContainer->if->scrollableTabLayoutEnabled->tabPane->remove->tabPane->remove->tabPane->remove
BasicTabbedPaneUI#uninstallTabContainer()::: basic tabbed pane i uninstall tab container:::if->return->tabContainer->removeAll->if->scrollableTabLayoutEnabled->tabContainer->remove->remove->else->tabPane->remove
BasicTabbedPaneUI#installDefaults():::Install the defaults.:::LookAndFeel->installColorsAndFont->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getInt->UIManager->getInsets->UIManager->getInsets->UIManager->getInsets->UIManager->getBoolean->UIManager->getInsets->UIManager->getInt->UIManager->getBoolean->UIManager->getBoolean->opaque->UIManager->get->if->LookAndFeel->installProperty->if->new->Insets->if->new->Insets->if->new->Insets->if->new->Insets
BasicTabbedPaneUI#uninstallDefaults():::Uninstall the defaults.:::
BasicTabbedPaneUI#installListeners():::Install the listeners.:::if->createPropertyChangeListener->tabPane->addPropertyChangeListener->if->createChangeListener->tabPane->addChangeListener->if->createMouseListener->tabPane->addMouseListener->tabPane->getHandler->addMouseMotionListener->if->createFocusListener->tabPane->addFocusListener->tabPane->getHandler->addContainerListener->if->tabPane->getTabCount->createHTMLVector
BasicTabbedPaneUI#uninstallListeners():::Uninstall the listeners.:::if->tabPane->removeMouseListener->tabPane->getHandler->removeMouseMotionListener->if->tabPane->removeFocusListener->tabPane->getHandler->removeContainerListener->if->htmlViews->removeAllElements->if->tabPane->removeChangeListener->if->tabPane->removePropertyChangeListener
BasicTabbedPaneUI#createMouseListener():::Creates a mouse listener.:::return->getHandler
BasicTabbedPaneUI#createFocusListener():::Creates a focus listener.:::return->getHandler
BasicTabbedPaneUI#createChangeListener():::Creates a change listener.:::return->getHandler
BasicTabbedPaneUI#createPropertyChangeListener():::Creates a property change listener.:::return->getHandler
BasicTabbedPaneUI#getHandler()::: basic tabbed pane i get handler:::if->new->Handler->return
BasicTabbedPaneUI#installKeyboardActions():::Installs the keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->updateMnemonics
BasicTabbedPaneUI#getInputMap(int)::: basic tabbed pane i get input map:::if->return->DefaultLookup->get->else->if->return->DefaultLookup->get->return
BasicTabbedPaneUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap
BasicTabbedPaneUI#updateMnemonics():::Reloads the mnemonics:::resetMnemonics->for->counter->tabPane->getTabCount
BasicTabbedPaneUI#resetMnemonics():::Resets the mnemonics bindings to an empty state.:::if->mnemonicToIndexMap->clear->mnemonicInputMap->clear
BasicTabbedPaneUI#addMnemonic(int, int):::Adds the specified mnemonic at the specified index.:::if->initMnemonics->mnemonicInputMap->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->mnemonicInputMap->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->mnemonicToIndexMap->Integer->valueOf->Integer->valueOf->put
BasicTabbedPaneUI#initMnemonics():::Installs the state needed for mnemonics.:::new->Hashtable<Integer,Integer>->new->ComponentInputMapUIResource->mnemonicInputMap->SwingUtilities->getUIInputMap->setParent->SwingUtilities->replaceUIInputMap
BasicTabbedPaneUI#setRolloverTab(int, int):::Sets the tab the mouse is over by location:::tabForCoordinate->setRolloverTab
BasicTabbedPaneUI#setRolloverTab(int):::Sets the tab the mouse is currently over to index:::
BasicTabbedPaneUI#getRolloverTab():::Returns the tab the mouse is currently over, or -1 if the mouse is no longer over any tab.:::return
BasicTabbedPaneUI#getMinimumSize(JComponent)::: basic tabbed pane i get minimum size:::return
BasicTabbedPaneUI#getMaximumSize(JComponent)::: basic tabbed pane i get maximum size:::return
BasicTabbedPaneUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->calculateBaselineIfNecessary->if->placement->tabPane->getTabPlacement->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->switch->return->return->return->return
BasicTabbedPaneUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->switch->tabPane->getTabPlacement->return->return->return
BasicTabbedPaneUI#getBaseline(int):::Returns the baseline for the specified tab.:::if->tabPane->getTabComponentAt->offset->getBaselineOffset->if->return->c->tabPane->getTabComponentAt->pref->c->getPreferredSize->tabInsets->tabPane->getTabPlacement->getTabInsets->cellHeight->return->c->getBaseline->else->view->getTextViewForTab->if->viewHeight->view->getPreferredSpan->baseline->BasicHTML->view->getPreferredSpan->getHTMLBaseline->if->return->getBaselineOffset->return->metrics->getFontMetrics->fontHeight->metrics->getHeight->fontBaseline->metrics->getAscent->return->getBaselineOffset
BasicTabbedPaneUI#getBaselineOffset():::Returns the amount the baseline is offset by:::switch->tabPane->getTabPlacement->if->tabPane->getTabCount->return->else->return->if->tabPane->getTabCount->return->else->return->return
BasicTabbedPaneUI#calculateBaselineIfNecessary()::: basic tabbed pane i calculate baseline if necessary:::if->if->tabPane->getTabCount->calculateBaseline->return
BasicTabbedPaneUI#calculateBaseline()::: basic tabbed pane i calculate baseline:::tabCount->tabPane->getTabCount->tabPlacement->tabPane->getTabPlacement->calculateMaxTabHeight->getBaseline->if->isHorizontalTabPlacement->for->i->else->fontMetrics->getFontMetrics->fontHeight->fontMetrics->getHeight->height->calculateTabHeight->for->i
BasicTabbedPaneUI#paint(Graphics, JComponent)::: basic tabbed pane i paint:::selectedIndex->tabPane->getSelectedIndex->tabPlacement->tabPane->getTabPlacement->ensureCurrentLayout->if->paintContentBorder->if->scrollableTabLayoutEnabled->paintTabArea->if->paintContentBorder
BasicTabbedPaneUI#paintTabArea(Graphics, int, int):::Paints the tabs in the tab area:::tabCount->tabPane->getTabCount->iconRect->new->Rectangle->textRect->new->Rectangle->clipRect->g->getClipBounds->for->i->if->intersects->paintTab
BasicTabbedPaneUI#paintTab(Graphics, int, Rectangle[], int, Rectangle, Rectangle):::Paints a tab.:::tabRect->selectedIndex->tabPane->getSelectedIndex->isSelected->if->tabPane->isOpaque->paintTabBackground->paintTabBorder->title->tabPane->getTitleAt->font->tabPane->getFont->metrics->SwingUtilities2->getFontMetrics->icon->getIconForTab->layoutLabel->if->tabPane->getTabComponentAt->clippedTitle->if->scrollableTabLayoutEnabled->isParamsSet->getTabIndex->isHorizontalTabPlacement->availTextWidth->getCropline->getCroppedSideWidth->SwingUtilities2->clipStringIfNecessary->else->if->scrollableTabLayoutEnabled->isHorizontalTabPlacement->SwingUtilities2->clipStringIfNecessary->paintText->paintIcon->paintFocusIndicator
BasicTabbedPaneUI#isHorizontalTabPlacement()::: basic tabbed pane i is horizontal tab placement:::return->tabPane->getTabPlacement->tabPane->getTabPlacement
BasicTabbedPaneUI#createCroppedTabShape(int, Rectangle, int)::: basic tabbed pane i create cropped tab shape:::rlen->start->end->ostart->switch->break->rcnt->if->npts->xp->new->intArr->yp->new->intArr->pcnt->for->i->if->return->new->Polygon->else->return->new->Polygon
BasicTabbedPaneUI#paintCroppedTabEdge(Graphics)::: basic tabbed pane i paint cropped tab edge:::tabIndex->getTabIndex->cropline->getCropline->x->y->switch->tabPane->getTabPlacement->xx->g->setColor->while->for->i->break->yy->g->setColor->while->for->i
BasicTabbedPaneUI#layoutLabel(int, FontMetrics, int, String, Icon, Rectangle, Rectangle, Rectangle, boolean):::Laysout a label.:::v->getTextViewForTab->if->tabPane->putClientProperty->SwingUtilities->layoutCompoundLabel->tabPane->putClientProperty->xNudge->getTabLabelShiftX->yNudge->getTabLabelShiftY
BasicTabbedPaneUI#paintIcon(Graphics, int, int, Icon, Rectangle, boolean):::Paints an icon.:::if->oldClip->g->getClip->clip->icon->paintIcon->g->setClip
BasicTabbedPaneUI#paintText(Graphics, int, Font, FontMetrics, int, String, Rectangle, boolean):::Paints text.:::g->setFont->v->getTextViewForTab->if->v->paint->else->mnemIndex->tabPane->getDisplayedMnemonicIndexAt->if->tabPane->isEnabled->tabPane->isEnabledAt->fg->tabPane->getForegroundAt->if->selectedFG->UIManager->getColor->if->g->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt->else->g->tabPane->getBackgroundAt->brighter->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt->g->tabPane->getBackgroundAt->darker->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt
BasicTabbedPaneUI#getTabLabelShiftX(int, int, boolean):::Returns the tab label shift x.:::tabRect->propKey->nudge->DefaultLookup->getInt->switch->return->return->return
BasicTabbedPaneUI#getTabLabelShiftY(int, int, boolean):::Returns the tab label shift y.:::tabRect->nudge->DefaultLookup->getInt->DefaultLookup->getInt->switch->return->return->return
BasicTabbedPaneUI#paintFocusIndicator(Graphics, int, Rectangle[], int, Rectangle, Rectangle, boolean):::Paints the focus indicator.:::tabRect->if->tabPane->hasFocus->x->y->w->h->g->setColor->switch->break->break->break->BasicGraphicsUtils->drawDashedRect
BasicTabbedPaneUI#paintTabBorder(Graphics, int, int, int, int, int, int, boolean):::this function draws the border around each tab note that this function does now draw the background of the tab:::g->setColor->switch->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->setColor->g->drawLine->break->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->break->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->drawLine->break->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->setColor->g->drawLine->g->drawLine
BasicTabbedPaneUI#paintTabBackground(Graphics, int, int, int, int, int, int, boolean):::Paints the tab background.:::g->tabPane->getBackgroundAt->setColor->switch->g->fillRect->break->g->fillRect->break->g->fillRect->break->g->fillRect
BasicTabbedPaneUI#paintContentBorder(Graphics, int, int):::Paints the content border.:::width->tabPane->getWidth->height->tabPane->getHeight->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->x->y->w->h->switch->calculateTabAreaWidth->if->break->calculateTabAreaWidth->if->break->calculateTabAreaHeight->if->break->calculateTabAreaHeight->if->if->tabPane->getTabCount->tabPane->isOpaque->color->UIManager->getColor->if->g->setColor->else->if->g->tabPane->getBackground->setColor->else->g->setColor->g->fillRect->paintContentBorderTopEdge->paintContentBorderLeftEdge->paintContentBorderBottomEdge->paintContentBorderRightEdge
BasicTabbedPaneUI#paintContentBorderTopEdge(Graphics, int, int, int, int, int, int):::Paints the content border top edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->else->g->drawLine->if->g->drawLine->else->g->setColor->g->drawLine
BasicTabbedPaneUI#paintContentBorderLeftEdge(Graphics, int, int, int, int, int, int):::Paints the content border left edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->else->g->drawLine->if->g->drawLine
BasicTabbedPaneUI#paintContentBorderBottomEdge(Graphics, int, int, int, int, int, int):::Paints the content border bottom edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->g->setColor->g->drawLine->else->g->drawLine->g->setColor->g->drawLine->if->g->setColor->g->drawLine->g->setColor->g->drawLine
BasicTabbedPaneUI#paintContentBorderRightEdge(Graphics, int, int, int, int, int, int):::Paints the content border right edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->g->setColor->g->drawLine->else->g->drawLine->g->setColor->g->drawLine->if->g->setColor->g->drawLine->g->setColor->g->drawLine
BasicTabbedPaneUI#ensureCurrentLayout()::: basic tabbed pane i ensure current layout:::if->tabPane->isValid->tabPane->validate->if->tabPane->isValid->layout->tabPane->getLayout->layout->calculateLayoutInfo
BasicTabbedPaneUI#getTabBounds(JTabbedPane, int):::Returns the bounds of the specified tab index:::ensureCurrentLayout->tabRect->new->Rectangle->return->getTabBounds
BasicTabbedPaneUI#getTabRunCount(JTabbedPane)::: basic tabbed pane i get tab run count:::ensureCurrentLayout->return
BasicTabbedPaneUI#tabForCoordinate(JTabbedPane, int, int):::Returns the tab index which intersects the specified point in the JTabbedPane's coordinate space.:::return->tabForCoordinate
BasicTabbedPaneUI#tabForCoordinate(JTabbedPane, int, int, boolean)::: basic tabbed pane i tab for coordinate:::if->ensureCurrentLayout->if->return->p->new->Point->if->scrollableTabLayoutEnabled->translatePointToTabPanel->viewRect->getViewRect->if->viewRect->contains->return->tabCount->tabPane->getTabCount->for->i->return
BasicTabbedPaneUI#getTabBounds(int, Rectangle):::Returns the bounds of the specified tab in the coordinate space of the JTabbedPane component:::if->scrollableTabLayoutEnabled->vpp->getLocation->viewp->getViewPosition->else->return
BasicTabbedPaneUI#getClosestTab(int, int):::Returns the index of the tab closest to the passed in location, note that the returned tab may not contain the location x,y.:::min->tabCount->Math->tabPane->getTabCount->min->max->tabPlacement->tabPane->getTabPlacement->useX->want->while->current->minLoc->maxLoc->if->else->if->if->return->Math->max->else->if->if->return->Math->max->else->return->return
BasicTabbedPaneUI#translatePointToTabPanel(int, int, Point):::Returns a point which is translated from the specified point in the JTabbedPane's coordinate space to the coordinate space of the ScrollableTabPanel:::vpp->getLocation->viewp->getViewPosition->return
BasicTabbedPaneUI#getVisibleComponent():::Returns the visible component.:::return
BasicTabbedPaneUI#setVisibleComponent(Component):::Sets the visible component.:::if->visibleComponent->getParent->visibleComponent->isVisible->visibleComponent->setVisible->if->component->isVisible->component->setVisible
BasicTabbedPaneUI#assureRectsCreated(int):::Assure the rectangles are created.:::rectArrayLen->if->tempRectArray->new->RectangleArr->System->Math->min->arraycopy->for->rectIndex
BasicTabbedPaneUI#expandTabRunsArray():::Expands the tab runs array.:::rectLen->newArray->new->intArr->System->arraycopy
BasicTabbedPaneUI#getRunForTab(int, int):::Returns the run for a tab.:::for->i->return
BasicTabbedPaneUI#lastTabInRun(int, int):::Returns the last tab in a run.:::if->return->nextRun->if->return->return
BasicTabbedPaneUI#getTabRunOverlay(int):::Returns the tab run overlay.:::return
BasicTabbedPaneUI#getTabRunIndent(int, int):::Returns the tab run indent.:::return
BasicTabbedPaneUI#shouldPadTabRun(int, int):::Returns whether or not the tab run should be padded.:::return
BasicTabbedPaneUI#shouldRotateTabRuns(int):::Returns whether or not the tab run should be rotated.:::return
BasicTabbedPaneUI#getIconForTab(int):::Returns the icon for a tab.:::return->tabPane->isEnabled->tabPane->isEnabledAt->tabPane->getDisabledIconAt->tabPane->getIconAt
BasicTabbedPaneUI#getTextViewForTab(int):::Returns the text View object required to render stylized text (HTML) for the specified tab or null if no specialized text rendering is needed for this tab:::if->return->htmlViews->elementAt->return
BasicTabbedPaneUI#calculateTabHeight(int, int, int):::Calculates the tab height.:::height->c->tabPane->getTabComponentAt->if->c->getPreferredSize->else->v->getTextViewForTab->if->v->getPreferredSpan->else->icon->getIconForTab->if->Math->icon->getIconHeight->max->tabInsets->getTabInsets->return
BasicTabbedPaneUI#calculateMaxTabHeight(int):::Calculates the maximum tab height.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->result->fontHeight->metrics->getHeight->for->i->return
BasicTabbedPaneUI#calculateTabWidth(int, int, FontMetrics):::Calculates the tab width.:::tabInsets->getTabInsets->width->tabComponent->tabPane->getTabComponentAt->if->tabComponent->getPreferredSize->else->icon->getIconForTab->if->icon->getIconWidth->v->getTextViewForTab->if->v->getPreferredSpan->else->title->tabPane->getTitleAt->SwingUtilities2->stringWidth->return
BasicTabbedPaneUI#calculateMaxTabWidth(int):::Calculates the maximum tab width.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->result->for->i->return
BasicTabbedPaneUI#calculateTabAreaHeight(int, int, int):::Calculates the tab area height.:::tabAreaInsets->getTabAreaInsets->tabRunOverlay->getTabRunOverlay->return
BasicTabbedPaneUI#calculateTabAreaWidth(int, int, int):::Calculates the tab area width.:::tabAreaInsets->getTabAreaInsets->tabRunOverlay->getTabRunOverlay->return
BasicTabbedPaneUI#getTabInsets(int, int):::Returns the tab insets.:::return
BasicTabbedPaneUI#getSelectedTabPadInsets(int):::Returns the selected tab pad insets.:::rotateInsets->return
BasicTabbedPaneUI#getTabAreaInsets(int):::Returns the tab area insets.:::rotateInsets->return
BasicTabbedPaneUI#getContentBorderInsets(int):::Returns the content border insets.:::return
BasicTabbedPaneUI#getFontMetrics():::Returns the font metrics.:::font->tabPane->getFont->return->tabPane->getFontMetrics
BasicTabbedPaneUI#navigateSelectedTab(int):::Navigate the selected tab.:::tabPlacement->tabPane->getTabPlacement->current->DefaultLookup->getBoolean->tabPane->getSelectedIndex->getFocusIndex->tabCount->tabPane->getTabCount->leftToRight->BasicGraphicsUtils->isLeftToRight->if->return->offset->switch->switch->selectNextTab->break->selectPreviousTab->break->selectPreviousTabInRun->break->selectNextTabInRun->break->getTabRunOffset->selectAdjacentRunTab->break->getTabRunOffset->selectAdjacentRunTab->break->break->switch->selectNextTab->break->selectPreviousTab->break->getTabRunOffset->selectAdjacentRunTab->break->getTabRunOffset->selectAdjacentRunTab->break->if->selectNextTabInRun->else->selectPreviousTabInRun->break->if->selectPreviousTabInRun->else->selectNextTabInRun->break
BasicTabbedPaneUI#selectNextTabInRun(int):::Select the next tab in the run.:::tabCount->tabPane->getTabCount->tabIndex->getNextTabIndexInRun->while->tabPane->isEnabledAt->getNextTabIndexInRun->navigateTo
BasicTabbedPaneUI#selectPreviousTabInRun(int):::Select the previous tab in the run.:::tabCount->tabPane->getTabCount->tabIndex->getPreviousTabIndexInRun->while->tabPane->isEnabledAt->getPreviousTabIndexInRun->navigateTo
BasicTabbedPaneUI#selectNextTab(int):::Select the next tab.:::tabIndex->getNextTabIndex->while->tabPane->isEnabledAt->getNextTabIndex->navigateTo
BasicTabbedPaneUI#selectPreviousTab(int):::Select the previous tab.:::tabIndex->getPreviousTabIndex->while->tabPane->isEnabledAt->getPreviousTabIndex->navigateTo
BasicTabbedPaneUI#selectAdjacentRunTab(int, int, int):::Selects an adjacent run of tabs.:::if->return->newIndex->r->switch->tabForCoordinate->break->tabForCoordinate->if->while->tabPane->isEnabledAt->getNextTabIndex->navigateTo
BasicTabbedPaneUI#navigateTo(int)::: basic tabbed pane i navigate to:::if->DefaultLookup->getBoolean->tabPane->setSelectedIndex->else->setFocusIndex
BasicTabbedPaneUI#setFocusIndex(int, boolean)::: basic tabbed pane i set focus index:::if->repaintTab->repaintTab->else
BasicTabbedPaneUI#repaintTab(int):::Repaints the specified tab.:::if->tabPane->getTabCount->tabPane->getTabBounds->repaint
BasicTabbedPaneUI#validateFocusIndex():::Makes sure the focusIndex is valid.:::if->tabPane->getTabCount->tabPane->getSelectedIndex->setFocusIndex
BasicTabbedPaneUI#getFocusIndex():::Returns the index of the tab that has focus.:::return
BasicTabbedPaneUI#getTabRunOffset(int, int, int, boolean):::Returns the tab run offset.:::run->getRunForTab->offset->switch->if->calculateTabAreaWidth->else->if->calculateTabAreaWidth->else->break->if->calculateTabAreaWidth->else->if->calculateTabAreaWidth->else->break->if->calculateTabAreaHeight->else->if->calculateTabAreaHeight->else->break->if->calculateTabAreaHeight->else->if->calculateTabAreaHeight->else->return
BasicTabbedPaneUI#getPreviousTabIndex(int):::Returns the previous tab index.:::tabIndex->tabPane->getTabCount->return
BasicTabbedPaneUI#getNextTabIndex(int):::Returns the next tab index.:::return->tabPane->getTabCount
BasicTabbedPaneUI#getNextTabIndexInRun(int, int):::Returns the next tab index in the run.:::if->return->getNextTabIndex->currentRun->getRunForTab->next->getNextTabIndex->if->getNextTabRun->return->return
BasicTabbedPaneUI#getPreviousTabIndexInRun(int, int):::Returns the previous tab index in the run.:::if->return->getPreviousTabIndex->currentRun->getRunForTab->if->previous->getNextTabRun->return->return->getPreviousTabIndex
BasicTabbedPaneUI#getPreviousTabRun(int):::Returns the previous tab run.:::runIndex->return
BasicTabbedPaneUI#getNextTabRun(int):::Returns the next tab run.:::return
BasicTabbedPaneUI#rotateInsets(Insets, Insets, int):::Rotates the insets.:::switch->break->break->break
BasicTabbedPaneUI#requestFocusForVisibleComponent()::: basic tabbed pane i request focus for visible component:::return->SwingUtilities2->getVisibleComponent->tabbedPaneChangeFocusTo
BasicTabbedPaneUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::key->getName->pane->e->getSource->ui->BasicLookAndFeel->pane->getUI->getUIOfType->if->return->if->ui->navigateSelectedTab->else->if->ui->navigateSelectedTab->else->if->ui->navigateSelectedTab->else->if->ui->navigateSelectedTab->else->if->ui->navigateSelectedTab->else->if->ui->navigateSelectedTab->else->if->tabPlacement->pane->getTabPlacement->if->ui->navigateSelectedTab->else->ui->navigateSelectedTab->else->if->tabPlacement->pane->getTabPlacement->if->ui->navigateSelectedTab->else->ui->navigateSelectedTab->else->if->pane->requestFocus->else->if->ui->requestFocusForVisibleComponent->else->if->command->e->getActionCommand->if->command->length->mnemonic->e->getActionCommand->charAt->if->index->Integer->valueOf->get->if->pane->index->intValue->isEnabledAt->pane->index->intValue->setSelectedIndex->else->if->focusIndex->ui->getFocusIndex->if->pane->setSelectedIndex->else->if->if->ui->scrollableTabLayoutEnabled->pane->getTabPlacement->scrollForward->else->if->if->ui->scrollableTabLayoutEnabled->pane->getTabPlacement->scrollBackward
BasicTabbedPaneUI.TabbedPaneLayout#addLayoutComponent(String, Component)::: tabbed pane layout add layout component:::
BasicTabbedPaneUI.TabbedPaneLayout#removeLayoutComponent(Component)::: tabbed pane layout remove layout component:::
BasicTabbedPaneUI.TabbedPaneLayout#preferredLayoutSize(Container)::: tabbed pane layout preferred layout size:::return->calculateSize
BasicTabbedPaneUI.TabbedPaneLayout#minimumLayoutSize(Container)::: tabbed pane layout minimum layout size:::return->calculateSize
BasicTabbedPaneUI.TabbedPaneLayout#calculateSize(boolean):::Returns the calculated size.:::tabPlacement->tabPane->getTabPlacement->insets->tabPane->getInsets->contentInsets->getContentBorderInsets->tabAreaInsets->getTabAreaInsets->zeroSize->new->Dimension->height->width->cWidth->cHeight->for->i->tabPane->getTabCount->tabExtent->switch->Math->calculateMaxTabHeight->max->preferredTabAreaWidth->break->Math->calculateMaxTabWidth->max->preferredTabAreaHeight->return->new->Dimension
BasicTabbedPaneUI.TabbedPaneLayout#preferredTabAreaHeight(int, int):::Returns the preferred tab area height.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->total->if->rows->x->maxTabHeight->calculateMaxTabHeight->for->i->calculateTabAreaHeight->return
BasicTabbedPaneUI.TabbedPaneLayout#preferredTabAreaWidth(int, int):::Returns the preferred tab area width.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->total->if->columns->y->fontHeight->metrics->getHeight->calculateMaxTabWidth->for->i->calculateTabAreaWidth->return
BasicTabbedPaneUI.TabbedPaneLayout#layoutContainer(Container)::: tabbed pane layout layout container:::setRolloverTab->tabPlacement->tabPane->getTabPlacement->insets->tabPane->getInsets->selectedIndex->tabPane->getSelectedIndex->visibleComponent->getVisibleComponent->calculateLayoutInfo->selectedComponent->if->if->setVisibleComponent->else->tabPane->getComponentAt->cx->cy->cw->ch->totalTabWidth->totalTabHeight->contentInsets->getContentBorderInsets->shouldChangeFocus->if->if->if->SwingUtilities->findFocusOwner->setVisibleComponent->bounds->tabPane->getBounds->numChildren->tabPane->getComponentCount->if->switch->calculateTabAreaWidth->break->calculateTabAreaWidth->break->calculateTabAreaHeight->break->calculateTabAreaHeight->for->i->layoutTabComponents->if->if->requestFocusForVisibleComponent->tabPane->requestFocus
BasicTabbedPaneUI.TabbedPaneLayout#calculateLayoutInfo():::Calculates the layout info.:::tabCount->tabPane->getTabCount->assureRectsCreated->tabPane->getTabPlacement->calculateTabRects
BasicTabbedPaneUI.TabbedPaneLayout#layoutTabComponents()::: tabbed pane layout layout tab components:::if->return->rect->new->Rectangle->delta->tabContainer->getX->tabContainer->getY->new->Point->if->scrollableTabLayoutEnabled->translatePointToTabPanel->for->i->tabPane->getTabCount
BasicTabbedPaneUI.TabbedPaneLayout#calculateTabRects(int, int):::Calculate the tab rectangles.:::metrics->getFontMetrics->size->tabPane->getSize->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->fontHeight->metrics->getHeight->selectedIndex->tabPane->getSelectedIndex->tabRunOverlay->i->j->x->y->returnAt->verticalTabRuns->leftToRight->BasicGraphicsUtils->isLeftToRight->switch->calculateMaxTabWidth->break->calculateMaxTabWidth->break->calculateMaxTabHeight->break->calculateMaxTabHeight->break->getTabRunOverlay->if->return->rect->for->if->normalizeTabRuns->getRunForTab->if->shouldRotateTabRuns->rotateTabRuns->for->padSelectedTab->if->rightMargin->for
BasicTabbedPaneUI.TabbedPaneLayout#rotateTabRuns(int, int):::Rotates the run-index array so that the selected run is run[0].:::for->i
BasicTabbedPaneUI.TabbedPaneLayout#normalizeTabRuns(int, int, int, int):::Normalizes the tab runs.:::verticalTabRuns->run->keepAdjusting->weight->while->last->lastTabInRun->prevLast->lastTabInRun->end->prevLastLen->if->else->if->if->else->for->i->else->if->if->else
BasicTabbedPaneUI.TabbedPaneLayout#padTabRun(int, int, int, int):::Pads the tab run.:::lastRect->if->runWidth->deltaWidth->factor->for->j->else->runHeight->deltaHeight->factor->for->j
BasicTabbedPaneUI.TabbedPaneLayout#padSelectedTab(int, int):::Pads selected tab.:::if->selRect->padInsets->getSelectedTabPadInsets->if->scrollableTabLayoutEnabled->size->tabPane->getSize->insets->tabPane->getInsets->if->top->if->bottom->if->else->left->if->right->if
BasicTabbedPaneUI.TabbedPaneScrollLayout#preferredTabAreaHeight(int, int)::: tabbed pane scroll layout preferred tab area height:::return->calculateMaxTabHeight
BasicTabbedPaneUI.TabbedPaneScrollLayout#preferredTabAreaWidth(int, int)::: tabbed pane scroll layout preferred tab area width:::return->calculateMaxTabWidth
BasicTabbedPaneUI.TabbedPaneScrollLayout#layoutContainer(Container)::: tabbed pane scroll layout layout container:::setRolloverTab->tabPlacement->tabPane->getTabPlacement->tabCount->tabPane->getTabCount->insets->tabPane->getInsets->selectedIndex->tabPane->getSelectedIndex->visibleComponent->getVisibleComponent->calculateLayoutInfo->selectedComponent->if->if->setVisibleComponent->else->tabPane->getComponentAt->if->tabPane->getTabCount->resetParams->setVisible->setVisible->return->shouldChangeFocus->if->if->if->SwingUtilities->findFocusOwner->setVisibleComponent->tx->ty->tw->th->cx->cy->cw->ch->contentInsets->getContentBorderInsets->bounds->tabPane->getBounds->numChildren->tabPane->getComponentCount->if->switch->calculateTabAreaWidth->break->calculateTabAreaWidth->break->calculateTabAreaHeight->break->calculateTabAreaHeight->for->i->super->layoutTabComponents->layoutCroppedEdge->if->if->requestFocusForVisibleComponent->tabPane->requestFocus
BasicTabbedPaneUI.TabbedPaneScrollLayout#layoutCroppedEdge()::: tabbed pane scroll layout layout cropped edge:::resetParams->viewRect->getViewRect->cropline->for->i
BasicTabbedPaneUI.TabbedPaneScrollLayout#calculateTabRects(int, int)::: tabbed pane scroll layout calculate tab rects:::metrics->getFontMetrics->size->tabPane->getSize->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->fontHeight->metrics->getHeight->selectedIndex->tabPane->getSelectedIndex->i->verticalTabRuns->leftToRight->BasicGraphicsUtils->isLeftToRight->x->y->totalWidth->totalHeight->switch->calculateMaxTabWidth->break->calculateMaxTabHeight->if->return->rect->for->if->padSelectedTab->if->rightMargin->for->new->Dimension->setPreferredSize->invalidate
BasicTabbedPaneUI.ScrollableTabSupport#createButtons():::Recreates the scroll buttons and adds them to the TabbedPane.:::if->tabPane->remove->scrollForwardButton->removeActionListener->tabPane->remove->scrollBackwardButton->removeActionListener->tabPlacement->tabPane->getTabPlacement->if->createScrollButton->createScrollButton->else->createScrollButton->createScrollButton->scrollForwardButton->addActionListener->scrollBackwardButton->addActionListener->tabPane->add->tabPane->add
BasicTabbedPaneUI.ScrollableTabSupport#scrollForward(int)::: scrollable tab support scroll forward:::viewSize->viewport->getViewSize->viewRect->viewport->getViewRect->if->if->return->else->if->return->setLeadingTabIndex
BasicTabbedPaneUI.ScrollableTabSupport#scrollBackward(int)::: scrollable tab support scroll backward:::if->return->setLeadingTabIndex
BasicTabbedPaneUI.ScrollableTabSupport#setLeadingTabIndex(int, int)::: scrollable tab support set leading tab index:::viewSize->viewport->getViewSize->viewRect->viewport->getViewRect->switch->if->extentSize->new->Dimension->viewport->setExtentSize->break->if->extentSize->new->Dimension->viewport->setExtentSize->viewport->setViewPosition
BasicTabbedPaneUI.ScrollableTabSupport#stateChanged(ChangeEvent)::: scrollable tab support state changed:::updateView
BasicTabbedPaneUI.ScrollableTabSupport#updateView()::: scrollable tab support update view:::tabPlacement->tabPane->getTabPlacement->tabCount->tabPane->getTabCount->assureRectsCreated->vpRect->viewport->getBounds->viewSize->viewport->getViewSize->viewRect->viewport->getViewRect->getClosestTab->if->switch->if->break->if->break->contentInsets->getContentBorderInsets->switch->tabPane->repaint->scrollBackwardButton->setEnabled->scrollForwardButton->setEnabled->break->tabPane->repaint->scrollBackwardButton->setEnabled->scrollForwardButton->setEnabled->break->tabPane->repaint->scrollBackwardButton->setEnabled->scrollForwardButton->setEnabled->break->tabPane->repaint->scrollBackwardButton->setEnabled->scrollForwardButton->setEnabled
BasicTabbedPaneUI.ScrollableTabSupport#actionPerformed(ActionEvent):::ActionListener for the scroll buttons.:::map->tabPane->getActionMap->if->actionKey->if->e->getSource->else->action->map->get->if->action->isEnabled->action->e->getWhen->e->getModifiers->new->ActionEvent->actionPerformed
BasicTabbedPaneUI.ScrollableTabSupport#toString()::: scrollable tab support to string:::return->viewport->getViewSize->viewport->getViewRect
BasicTabbedPaneUI.ScrollableTabPanel#paintComponent(Graphics)::: scrollable tab panel paint component:::super->paintComponent->BasicTabbedPaneUI.this->tabPane->getTabPlacement->tabPane->getSelectedIndex->paintTabArea->if->isParamsSet->croppedRect->getTabIndex->g->translate->paintComponent->g->translate
BasicTabbedPaneUI.ScrollableTabPanel#doLayout()::: scrollable tab panel do layout:::if->getComponentCount->child->getComponent->child->getWidth->getHeight->setBounds
BasicTabbedPaneUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::pane->e->getSource->name->e->getPropertyName->isScrollLayout->scrollableTabLayoutEnabled->if->updateMnemonics->pane->repaint->else->if->pane->repaint->else->if->index->e->getNewValue->updateHtmlViews->else->if->BasicTabbedPaneUI.this->uninstallUI->BasicTabbedPaneUI.this->installUI->else->if->if->scrollableTabLayoutEnabled->tabScroller->createButtons->else->if->newVal->e->getNewValue->booleanValue->setOpaque->setOpaque->else->if->newVal->e->getNewValue->setBackground->setBackground->newColor->setBackground->setBackground->else->if->if->tabContainer->removeUnusedTabComponents->c->tabPane->e->getNewValue->getTabComponentAt->if->if->installTabContainer->else->tabContainer->add->tabPane->revalidate->tabPane->repaint->else->if->e->getNewValue->updateHtmlViews->else->if->SwingUtilities2->isScaleChanged
BasicTabbedPaneUI.Handler#updateHtmlViews(int, boolean)::: handler update html views:::title->tabPane->getTitleAt->isHTML->BasicHTML->isHTMLString->if->if->createHTMLVector->else->v->BasicHTML->createHTMLView->setHtmlView->else->if->setHtmlView->updateMnemonics
BasicTabbedPaneUI.Handler#setHtmlView(View, boolean, int)::: handler set html view:::if->htmlViews->size->htmlViews->insertElementAt->else->htmlViews->setElementAt
BasicTabbedPaneUI.Handler#stateChanged(ChangeEvent)::: handler state changed:::tabPane->e->getSource->tabPane->revalidate->tabPane->repaint->tabPane->getSelectedIndex->setFocusIndex->if->scrollableTabLayoutEnabled->ensureCurrentLayout->index->tabPane->getSelectedIndex->if->clone->scrollRectToVisible
BasicTabbedPaneUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicTabbedPaneUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::
BasicTabbedPaneUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::e->getX->e->getY->setRolloverTab
BasicTabbedPaneUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::setRolloverTab
BasicTabbedPaneUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->tabPane->isEnabled->return->tabIndex->e->getX->e->getY->tabForCoordinate->if->tabPane->isEnabledAt->if->tabPane->getSelectedIndex->tabPane->setSelectedIndex->else->if->tabPane->isRequestFocusEnabled->tabPane->requestFocus
BasicTabbedPaneUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::
BasicTabbedPaneUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::e->getX->e->getY->setRolloverTab
BasicTabbedPaneUI.Handler#focusGained(FocusEvent)::: handler focus gained:::tabPane->getSelectedIndex->setFocusIndex
BasicTabbedPaneUI.Handler#focusLost(FocusEvent)::: handler focus lost:::repaintTab
BasicTabbedPaneUI.Handler#componentAdded(ContainerEvent)::: handler component added:::tp->e->getContainer->child->e->getChild->if->return->tp->indexOfComponent->updateHtmlViews
BasicTabbedPaneUI.Handler#componentRemoved(ContainerEvent)::: handler component removed:::tp->e->getContainer->child->e->getChild->if->return->indexObj->tp->getClientProperty->if->index->indexObj->intValue->if->htmlViews->size->htmlViews->removeElementAt->tp->putClientProperty->updateMnemonics->validateFocusIndex
BasicTabbedPaneUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicTabbedPaneUI.TabSelectionHandler#stateChanged(ChangeEvent)::: tab selection handler state changed:::getHandler->stateChanged
BasicTabbedPaneUI.MouseHandler#mousePressed(MouseEvent)::: mouse handler mouse pressed:::getHandler->mousePressed
BasicTabbedPaneUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicTabbedPaneUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicTabbedPaneUI#createHTMLVector()::: basic tabbed pane i create vector:::htmlViews->new->Vector<View>->count->tabPane->getTabCount->if->for->i->return
BasicTabbedPaneUI.TabContainer#remove(Component)::: tab container remove:::index->tabPane->indexOfTabComponent->super->remove->if->tabPane->setTabComponentAt
BasicTabbedPaneUI.TabContainer#removeUnusedTabComponents()::: tab container remove unused tab components:::foreach->getComponents->if->index->tabPane->indexOfTabComponent->if->super->remove
BasicTabbedPaneUI.TabContainer#isOptimizedDrawingEnabled()::: tab container is optimized drawing enabled:::return->isParamsSet
BasicTabbedPaneUI.TabContainer#doLayout()::: tab container do layout:::if->scrollableTabLayoutEnabled->repaint->tabScroller->updateView->else->tabPane->getBounds->repaint
BasicTabbedPaneUI.CroppedEdge#setParams(int, int, int, int)::: cropped edge set params:::tabRect->setBounds->tabPane->getTabPlacement->createCroppedTabShape->if->getParent->tabContainer->add
BasicTabbedPaneUI.CroppedEdge#resetParams()::: cropped edge reset params:::if->getParent->tabContainer->remove
BasicTabbedPaneUI.CroppedEdge#isParamsSet()::: cropped edge is params set:::return
BasicTabbedPaneUI.CroppedEdge#getTabIndex()::: cropped edge get tab index:::return
BasicTabbedPaneUI.CroppedEdge#getCropline()::: cropped edge get cropline:::return
BasicTabbedPaneUI.CroppedEdge#getCroppedSideWidth()::: cropped edge get cropped side width:::return
BasicTabbedPaneUI.CroppedEdge#getBgColor()::: cropped edge get bg color:::parent->tabPane->getParent->if->bg->parent->getBackground->if->return->return->UIManager->getColor
BasicTabbedPaneUI.CroppedEdge#paintComponent(Graphics)::: cropped edge paint component:::super->paintComponent->if->isParamsSet->g2->g2->getWidth->getHeight->clipRect->g2->getBgColor->setColor->g2->translate->g2->fill->paintCroppedTabEdge->g2->translate
BasicTableHeaderUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::if->header->isEnabled->return->if->e->getClickCount->SwingUtilities->isLeftMouseButton->table->header->getTable->sorter->if->table->getRowSorter->columnIndex->header->e->getPoint->columnAtPoint->if->table->convertColumnIndexToModel->sorter->toggleSortOrder
BasicTableHeaderUI.MouseInputHandler#getResizingColumn(Point)::: mouse input handler get resizing column:::return->header->columnAtPoint->getResizingColumn
BasicTableHeaderUI.MouseInputHandler#getResizingColumn(Point, int)::: mouse input handler get resizing column:::if->return->r->header->getHeaderRect->r->grow->if->r->contains->return->midPoint->columnIndex->if->header->getComponentOrientation->isLeftToRight->else->if->return->return->header->getColumnModel->getColumn
BasicTableHeaderUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::if->header->isEnabled->return->header->setDraggedColumn->header->setResizingColumn->header->setDraggedDistance->p->e->getPoint->columnModel->header->getColumnModel->index->header->columnAtPoint->if->resizingColumn->getResizingColumn->if->canResize->header->setResizingColumn->if->header->getComponentOrientation->isLeftToRight->resizingColumn->getWidth->else->resizingColumn->getWidth->else->if->header->getReorderingAllowed->hitColumn->columnModel->getColumn->header->setDraggedColumn->if->header->getReorderingAllowed->oldRolloverColumn->rolloverColumnUpdated
BasicTableHeaderUI.MouseInputHandler#swapCursor()::: mouse input handler swap cursor:::tmp->header->getCursor->header->setCursor
BasicTableHeaderUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::if->header->isEnabled->return->if->e->getPoint->getResizingColumn->canResize->header->getCursor->swapCursor->updateRolloverColumn
BasicTableHeaderUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::if->header->isEnabled->return->mouseX->e->getX->resizingColumn->header->getResizingColumn->draggedColumn->header->getDraggedColumn->headerLeftToRight->header->getComponentOrientation->isLeftToRight->if->oldWidth->resizingColumn->getWidth->newWidth->if->else->changeColumnWidth->else->if->cm->header->getColumnModel->draggedDistance->direction->columnIndex->viewIndexForColumn->newColumnIndex->if->cm->getColumnCount->width->cm->getColumn->getWidth->if->Math->abs->header->setDraggedDistance->selectedIndex->SwingUtilities2->header->getColumnModel->getSelectedColumnIndex->convertColumnIndexToModel->cm->moveColumn->SwingUtilities2->header->getColumnModel->convertColumnIndexToView->selectColumn->return->setDraggedDistance->updateRolloverColumn
BasicTableHeaderUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::if->header->isEnabled->return->header->getDraggedColumn->viewIndexForColumn->setDraggedDistance->header->setResizingColumn->header->setDraggedColumn->updateRolloverColumn
BasicTableHeaderUI.MouseInputHandler#mouseEntered(MouseEvent)::: mouse input handler mouse entered:::if->header->isEnabled->return->updateRolloverColumn
BasicTableHeaderUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::if->header->isEnabled->return->oldRolloverColumn->rolloverColumnUpdated
BasicTableHeaderUI.MouseInputHandler#setDraggedDistance(int, int)::: mouse input handler set dragged distance:::header->setDraggedDistance->if->header->getColumnModel->moveColumn
BasicTableHeaderUI#createMouseInputListener():::Creates the mouse listener for the JTableHeader.:::return->new->MouseInputHandler
BasicTableHeaderUI#createUI(JComponent):::Returns a new instance of BasicTableHeaderUI.:::return->new->BasicTableHeaderUI
BasicTableHeaderUI#installUI(JComponent)::: basic table header i install i:::new->CellRendererPane->header->add->installDefaults->installListeners->installKeyboardActions
BasicTableHeaderUI#installDefaults():::Initializes JTableHeader properties such as font, foreground, and background:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicTableHeaderUI#installListeners():::Attaches listeners to the JTableHeader.:::createMouseInputListener->header->addMouseListener->header->addMouseMotionListener->header->addFocusListener
BasicTableHeaderUI#installKeyboardActions():::Register all keyboard actions on the JTableHeader.:::keyMap->DefaultLookup->get->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicTableHeaderUI#uninstallUI(JComponent)::: basic table header i uninstall i:::uninstallDefaults->uninstallListeners->uninstallKeyboardActions->header->remove
BasicTableHeaderUI#uninstallDefaults():::Uninstalls default properties:::
BasicTableHeaderUI#uninstallListeners():::Unregisters listeners.:::header->removeMouseListener->header->removeMouseMotionListener->header->removeFocusListener
BasicTableHeaderUI#uninstallKeyboardActions():::Unregisters default key actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTableHeaderUI#loadActionMap(LazyActionMap):::Populates TableHeader's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicTableHeaderUI#getRolloverColumn():::Returns the index of the column header over which the mouse currently is:::return
BasicTableHeaderUI#rolloverColumnUpdated(int, int):::This method gets called every time when a rollover column in the table header is updated:::
BasicTableHeaderUI#updateRolloverColumn(MouseEvent)::: basic table header i update rollover column:::if->header->getDraggedColumn->header->e->getPoint->contains->col->header->e->getPoint->columnAtPoint->if->oldRolloverColumn->rolloverColumnUpdated
BasicTableHeaderUI#selectNextColumn(boolean)::: basic table header i select next column:::newIndex->getSelectedColumnIndex->if->header->getColumnModel->getColumnCount->if->selectColumn->return
BasicTableHeaderUI#selectPreviousColumn(boolean)::: basic table header i select previous column:::newIndex->getSelectedColumnIndex->if->if->selectColumn->return
BasicTableHeaderUI#selectColumn(int):::Selects the specified column in the table header:::selectColumn
BasicTableHeaderUI#selectColumn(int, boolean)::: basic table header i select column:::repaintRect->header->getHeaderRect->header->repaint->header->getHeaderRect->header->repaint->if->scrollToColumn->return
BasicTableHeaderUI#scrollToColumn(int):::Used by selectColumn to scroll horizontally, if necessary, to ensure that the newly selected column is visible.:::container->table->if->header->getParent->header->getParent->getParent->header->getTable->return->vis->table->getVisibleRect->cellBounds->table->getCellRect->table->scrollRectToVisible
BasicTableHeaderUI#getSelectedColumnIndex()::: basic table header i get selected column index:::numCols->header->getColumnModel->getColumnCount->if->return
BasicTableHeaderUI#canResize(TableColumn, JTableHeader)::: basic table header i can resize:::return->header->getResizingAllowed->column->getResizable
BasicTableHeaderUI#changeColumnWidth(TableColumn, JTableHeader, int, int)::: basic table header i change column width:::resizingColumn->setWidth->container->table->if->th->getParent->th->getParent->getParent->th->getTable->return->if->container->getComponentOrientation->isLeftToRight->th->getComponentOrientation->isLeftToRight->viewport->getViewport->viewportWidth->viewport->getWidth->diff->newHeaderWidth->table->getWidth->tableSize->table->getSize->table->setSize->if->table->getAutoResizeMode->p->viewport->getViewPosition->Math->Math->min->max->viewport->setViewPosition->return->return
BasicTableHeaderUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->columnModel->header->getColumnModel->for->column->columnModel->getColumnCount->return
BasicTableHeaderUI#paint(Graphics, JComponent)::: basic table header i paint:::if->header->getColumnModel->getColumnCount->return->ltr->header->getComponentOrientation->isLeftToRight->clip->g->getClipBounds->left->clip->getLocation->right->new->Point->cm->header->getColumnModel->cMin->header->columnAtPoint->cMax->header->columnAtPoint->if->if->cm->getColumnCount->draggedColumn->header->getDraggedColumn->columnWidth->cellRect->header->getHeaderRect->aColumn->if->for->column->else->for->column->if->draggedColumnIndex->viewIndexForColumn->draggedCellRect->header->getHeaderRect->g->header->getParent->getBackground->setColor->g->fillRect->header->getDraggedDistance->g->header->getBackground->setColor->g->fillRect->paintCell->rendererPane->removeAll
BasicTableHeaderUI#getHeaderRenderer(int)::: basic table header i get header renderer:::aColumn->header->getColumnModel->getColumn->renderer->aColumn->getHeaderRenderer->if->header->getDefaultRenderer->hasFocus->header->isPaintingForPrint->getSelectedColumnIndex->header->hasFocus->return->renderer->header->getTable->aColumn->getHeaderValue->getTableCellRendererComponent
BasicTableHeaderUI#paintCell(Graphics, Rectangle, int)::: basic table header i paint cell:::component->getHeaderRenderer->rendererPane->paintComponent
BasicTableHeaderUI#viewIndexForColumn(TableColumn)::: basic table header i view index for column:::cm->header->getColumnModel->for->column->cm->getColumnCount->return
BasicTableHeaderUI#getHeaderHeight()::: basic table header i get header height:::height->accomodatedDefault->columnModel->header->getColumnModel->for->column->columnModel->getColumnCount->return
BasicTableHeaderUI#createHeaderSize(long)::: basic table header i create header size:::if->return->getHeaderHeight->new->Dimension
BasicTableHeaderUI#getMinimumSize(JComponent):::Return the minimum size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMinWidth->return->createHeaderSize
BasicTableHeaderUI#getPreferredSize(JComponent):::Return the preferred size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getPreferredWidth->return->createHeaderSize
BasicTableHeaderUI#getMaximumSize(JComponent):::Return the maximum size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMaxWidth->return->createHeaderSize
BasicTableHeaderUI.Actions#accept(Object)::: actions accept:::if->th->cm->th->getColumnModel->if->cm->getColumnCount->return->key->getName->ui->BasicLookAndFeel->th->getUI->getUIOfType->if->if->return->th->getReorderingAllowed->maybeMoveColumn->else->if->return->th->getReorderingAllowed->maybeMoveColumn->else->if->return->cm->ui->getSelectedColumnIndex->getColumn->canResize->else->if->return->th->getTable->return
BasicTableHeaderUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::th->e->getSource->ui->BasicLookAndFeel->th->getUI->getUIOfType->if->return->name->getName->if->table->th->getTable->sorter->table->getRowSorter->if->columnIndex->ui->getSelectedColumnIndex->table->convertColumnIndexToModel->sorter->toggleSortOrder->else->if->if->th->getComponentOrientation->isLeftToRight->ui->selectPreviousColumn->else->ui->selectNextColumn->else->if->if->th->getComponentOrientation->isLeftToRight->ui->selectNextColumn->else->ui->selectPreviousColumn->else->if->moveColumn->else->if->moveColumn->else->if->resize->else->if->resize->else->if->table->th->getTable->if->table->requestFocusInWindow
BasicTableHeaderUI.Actions#moveColumn(boolean, JTableHeader, BasicTableHeaderUI)::: actions move column:::maybeMoveColumn
BasicTableHeaderUI.Actions#maybeMoveColumn(boolean, JTableHeader, BasicTableHeaderUI, boolean)::: actions maybe move column:::oldIndex->ui->getSelectedColumnIndex->newIndex->if->th->getComponentOrientation->isLeftToRight->ui->selectPreviousColumn->ui->selectNextColumn->else->ui->selectNextColumn->ui->selectPreviousColumn->if->if->th->getColumnModel->moveColumn->else->return->return
BasicTableHeaderUI.Actions#resize(boolean, JTableHeader, BasicTableHeaderUI)::: actions resize:::columnIndex->ui->getSelectedColumnIndex->resizingColumn->th->getColumnModel->getColumn->th->setResizingColumn->oldWidth->resizingColumn->getWidth->newWidth->if->th->getComponentOrientation->isLeftToRight->else->ui->changeColumnWidth
BasicTableUI.Actions#clipToRange(int, int, int)::: actions clip to range:::return->Math->Math->max->min
BasicTableUI.Actions#moveWithinTableRange(JTable, int, int)::: actions move within table range:::table->getRowCount->clipToRange->table->getColumnCount->clipToRange
BasicTableUI.Actions#sign(int)::: actions sign:::return
BasicTableUI.Actions#moveWithinSelectedRange(JTable, int, int, ListSelectionModel, ListSelectionModel):::Called to move within the selected range of the given JTable:::totalCount->minX->maxX->minY->maxY->rs->table->getRowSelectionAllowed->cs->table->getColumnSelectionAllowed->if->table->getSelectedRowCount->table->getSelectedColumnCount->csm->getMinSelectionIndex->csm->getMaxSelectionIndex->rsm->getMinSelectionIndex->rsm->getMaxSelectionIndex->else->if->table->getSelectedRowCount->table->getColumnCount->rsm->getMinSelectionIndex->rsm->getMaxSelectionIndex->else->if->table->getSelectedColumnCount->csm->getMinSelectionIndex->csm->getMaxSelectionIndex->table->getRowCount->else->stayInSelection->if->table->isCellSelected->table->getColumnCount->table->getRowCount->Math->min->Math->min->else->if->else->if->else->if->else->if->Math->Math->max->min->Math->Math->max->min->do->calcNextPos->while->table->isCellSelected->return
BasicTableUI.Actions#calcNextPos(int, int, int, int, int, int):::Find the next lead row and column based on the given dx/dy and max/min values.:::if->if->if->else->if->if->else->if->if->else->if->if
BasicTableUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::key->getName->table->e->getSource->rsm->table->getSelectionModel->getAdjustedLead->csm->table->getColumnModel->getSelectionModel->getAdjustedLead->if->if->if->rowCount->table->getRowCount->else->colCount->table->getColumnCount->else->if->SwingUtilities->getUnwrappedParent->getParent->return->delta->table->getParent->getSize->if->r->table->getCellRect->if->Math->max->else->newRow->table->r->getLocation->rowAtPoint->if->table->getRowCount->else->r->table->getCellRect->if->Math->max->else->newColumn->table->r->getLocation->columnAtPoint->if->ltr->table->getComponentOrientation->isLeftToRight->table->getColumnCount->table->getColumnCount->if->if->table->isEditing->table->getCellEditor->stopCellEditing->return->changeLead->if->rsm->getSelectionMode->else->if->csm->getSelectionMode->if->moveWithinTableRange->if->moveLeadSelectionIndex->if->getAdjustedLead->table->getColumnCount->moveLeadSelectionIndex->else->moveLeadSelectionIndex->if->getAdjustedLead->table->getRowCount->moveLeadSelectionIndex->cellRect->table->getCellRect->if->table->scrollRectToVisible->else->if->moveWithinTableRange->table->changeSelection->else->if->table->getRowCount->table->getColumnCount->return->if->moveWithinSelectedRange->if->rsm->isSelectedIndex->rsm->addSelectionInterval->else->rsm->removeSelectionInterval->if->csm->isSelectedIndex->csm->addSelectionInterval->else->csm->removeSelectionInterval->cellRect->table->getCellRect->if->table->scrollRectToVisible->else->table->changeSelection->else->if->table->removeEditor->else->if->table->selectAll->else->if->table->clearSelection->else->if->if->table->hasFocus->cellEditor->table->getCellEditor->if->cellEditor->stopCellEditing->return->table->requestFocus->return->table->editCellAt->editorComp->table->getEditorComponent->if->editorComp->requestFocus->else->if->if->table->isCellSelected->oldAnchorRow->rsm->getAnchorSelectionIndex->oldAnchorColumn->csm->getAnchorSelectionIndex->rsm->setValueIsAdjusting->csm->setValueIsAdjusting->table->changeSelection->rsm->setAnchorSelectionIndex->csm->setAnchorSelectionIndex->rsm->setValueIsAdjusting->csm->setValueIsAdjusting->else->if->table->changeSelection->else->if->table->changeSelection->else->if->table->changeSelection->else->if->th->table->getTableHeader->if->col->table->getSelectedColumn->if->thUI->th->getUI->if->selectColumn->th->requestFocusInWindow
BasicTableUI.Actions#accept(Object)::: actions accept:::key->getName->if->getClientProperty->equals->if->return->if->return->isEditing->else->if->return->getSelectionModel->else->if->return->getColumnModel->getSelectionModel->else->if->table->leadRow->getAdjustedLead->leadCol->getAdjustedLead->return->table->isEditing->table->isCellSelected->else->if->table->return->table->getTableHeader->return
BasicTableUI.KeyHandler#keyPressed(KeyEvent)::: key handler key pressed:::getHandler->keyPressed
BasicTableUI.KeyHandler#keyReleased(KeyEvent)::: key handler key released:::getHandler->keyReleased
BasicTableUI.KeyHandler#keyTyped(KeyEvent)::: key handler key typed:::getHandler->keyTyped
BasicTableUI.FocusHandler#focusGained(FocusEvent)::: focus handler focus gained:::getHandler->focusGained
BasicTableUI.FocusHandler#focusLost(FocusEvent)::: focus handler focus lost:::getHandler->focusLost
BasicTableUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::getHandler->mouseClicked
BasicTableUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::getHandler->mousePressed
BasicTableUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::getHandler->mouseReleased
BasicTableUI.MouseInputHandler#mouseEntered(MouseEvent)::: mouse input handler mouse entered:::getHandler->mouseEntered
BasicTableUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::getHandler->mouseExited
BasicTableUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::getHandler->mouseMoved
BasicTableUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::getHandler->mouseDragged
BasicTableUI.Handler#repaintLeadCell()::: handler repaint lead cell:::lr->getAdjustedLead->lc->getAdjustedLead->if->return->dirtyRect->table->getCellRect->table->repaint
BasicTableUI.Handler#focusGained(FocusEvent)::: handler focus gained:::repaintLeadCell
BasicTableUI.Handler#focusLost(FocusEvent)::: handler focus lost:::repaintLeadCell
BasicTableUI.Handler#keyPressed(KeyEvent)::: handler key pressed:::
BasicTableUI.Handler#keyReleased(KeyEvent)::: handler key released:::
BasicTableUI.Handler#keyTyped(KeyEvent)::: handler key typed:::keyStroke->KeyStroke->e->getKeyChar->e->getModifiers->getKeyStroke->map->table->getInputMap->if->map->get->return->table->getInputMap->if->map->get->return->KeyStroke->getKeyStrokeForEvent->if->e->getKeyChar->return->leadRow->getAdjustedLead->leadColumn->getAdjustedLead->if->table->isEditing->if->table->editCellAt->return->editorComp->table->getEditorComponent->if->table->isEditing->if->component->component->getInputMap->binding->map->get->if->component->getInputMap->map->get->if->am->component->getActionMap->action->am->get->if->SwingUtilities->e->getModifiers->notifyAction->e->consume
BasicTableUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicTableUI.Handler#setDispatchComponent(MouseEvent)::: handler set dispatch component:::editorComponent->table->getEditorComponent->p->e->getPoint->p2->SwingUtilities->convertPoint->SwingUtilities->getDeepestComponentAt->SwingUtilities2->e->getClickCount->setSkipClickCount
BasicTableUI.Handler#repostEvent(MouseEvent)::: handler repost event:::if->table->isEditing->return->e2->SwingUtilities->convertMouseEvent->dispatchComponent->dispatchEvent->return
BasicTableUI.Handler#setValueIsAdjusting(boolean)::: handler set value is adjusting:::table->getSelectionModel->setValueIsAdjusting->table->getColumnModel->getSelectionModel->setValueIsAdjusting
BasicTableUI.Handler#canStartDrag()::: handler can start drag:::if->return->if->return->if->table->getSelectionModel->getSelectionMode->table->getColumnModel->getSelectionModel->getSelectionMode->return->return->table->isCellSelected
BasicTableUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->SwingUtilities2->shouldIgnore->return->if->table->isEditing->table->getCellEditor->stopCellEditing->editorComponent->table->getEditorComponent->if->editorComponent->hasFocus->SwingUtilities2->compositeRequestFocus->return->p->e->getPoint->table->rowAtPoint->table->columnAtPoint->pointOutsidePrefSize->if->table->isCellSelected->e->isShiftDown->BasicGraphicsUtils->isMenuShortcutKeyDown->if->table->getDragEnabled->mousePressedDND->else->SwingUtilities2->adjustFocus->if->setValueIsAdjusting->adjustSelection
BasicTableUI.Handler#mousePressedDND(MouseEvent)::: handler mouse pressed d:::grabFocus->if->canStartDrag->DragRecognitionSupport->mousePressed->if->BasicGraphicsUtils->isMenuShortcutKeyDown->return->else->if->e->isShiftDown->table->isCellSelected->table->getSelectionModel->addSelectionInterval->table->getColumnModel->getSelectionModel->addSelectionInterval->return->else->if->setValueIsAdjusting->if->SwingUtilities2->adjustFocus->adjustSelection
BasicTableUI.Handler#adjustSelection(MouseEvent)::: handler adjust selection:::if->if->e->getID->e->isShiftDown->table->getSelectionModel->getSelectionMode->table->clearSelection->tce->table->getCellEditor->if->tce->stopCellEditing->return->if->return->dragEnabled->table->getDragEnabled->if->table->editCellAt->setDispatchComponent->repostEvent->editor->table->getCellEditor->if->editor->shouldSelectCell->table->BasicGraphicsUtils->isMenuShortcutKeyDown->e->isShiftDown->changeSelection
BasicTableUI.Handler#valueChanged(ListSelectionEvent)::: handler value changed:::if->timer->stop
BasicTableUI.Handler#actionPerformed(ActionEvent)::: handler action performed:::table->editCellAt->editorComponent->table->getEditorComponent->if->editorComponent->hasFocus->SwingUtilities2->compositeRequestFocus->return
BasicTableUI.Handler#maybeStartTimer()::: handler maybe start timer:::if->return->if->new->Timer->timer->setRepeats->timer->start
BasicTableUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->SwingUtilities2->shouldIgnore->return->if->table->getDragEnabled->mouseReleasedDND->else->if->maybeStartTimer->repostEvent->setValueIsAdjusting
BasicTableUI.Handler#mouseReleasedDND(MouseEvent)::: handler mouse released d:::me->DragRecognitionSupport->mouseReleased->if->SwingUtilities2->adjustFocus->if->adjustSelection->if->if->maybeStartTimer->return->p->e->getPoint->if->table->rowAtPoint->table->columnAtPoint->table->editCellAt->setDispatchComponent->repostEvent->ce->table->getCellEditor->if->ce->shouldSelectCell
BasicTableUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicTableUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicTableUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicTableUI.Handler#dragStarting(MouseEvent)::: handler drag starting:::if->BasicGraphicsUtils->isMenuShortcutKeyDown->table->getSelectionModel->addSelectionInterval->table->getColumnModel->getSelectionModel->addSelectionInterval
BasicTableUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::if->SwingUtilities2->shouldIgnore->return->if->table->getDragEnabled->DragRecognitionSupport->mouseDragged->return->repostEvent->if->table->isEditing->return->p->e->getPoint->row->table->rowAtPoint->column->table->columnAtPoint->if->return->table->BasicGraphicsUtils->isMenuShortcutKeyDown->changeSelection
BasicTableUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::changeName->event->getPropertyName->if->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->header->table->getTableHeader->if->header->event->getNewValue->setComponentOrientation->else->if->oldValue->event->getOldValue->repaintDropLocation->table->getDropLocation->repaintDropLocation->else->if->table->getClientProperty->equals->table->revalidate->table->repaint->if->table->getSelectionModel->getHandler->addListSelectionListener->else->table->getSelectionModel->getHandler->removeListSelectionListener->else->if->if->old->event->getOldValue->old->getHandler->removeListSelectionListener->table->getSelectionModel->getHandler->addListSelectionListener
BasicTableUI.Handler#repaintDropLocation(JTable.DropLocation)::: handler repaint drop location:::if->return->if->loc->isInsertRow->loc->isInsertColumn->rect->table->loc->getRow->loc->getColumn->getCellRect->if->table->repaint->return->if->loc->isInsertRow->rect->getHDropLineRect->extendRect->if->table->repaint->if->loc->isInsertColumn->rect->getVDropLineRect->extendRect->if->table->repaint
BasicTableUI#pointOutsidePrefSize(int, int, Point)::: basic table i point outside pref size:::if->return->return->SwingUtilities2->pointOutsidePrefSize
BasicTableUI#getHandler()::: basic table i get handler:::if->new->Handler->return
BasicTableUI#createKeyListener():::Creates the key listener for handling keyboard navigation in the JTable.:::return
BasicTableUI#createFocusListener():::Creates the focus listener for handling keyboard navigation in the JTable.:::return->getHandler
BasicTableUI#createMouseInputListener():::Creates the mouse listener for the JTable.:::return->getHandler
BasicTableUI#createUI(JComponent):::Returns a new instance of BasicTableUI.:::return->new->BasicTableUI
BasicTableUI#installUI(JComponent)::: basic table i install i:::new->CellRendererPane->table->add->installDefaults->installDefaults2->installListeners->installKeyboardActions
BasicTableUI#installDefaults():::Initialize JTable properties, e.g:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->sbg->table->getSelectionBackground->if->UIManager->getColor->table->UIManager->getColor->setSelectionBackground->sfg->table->getSelectionForeground->if->UIManager->getColor->table->UIManager->getColor->setSelectionForeground->gridColor->table->getGridColor->if->UIManager->getColor->table->setGridColor->parent->SwingUtilities->getUnwrappedParent->if->parent->getParent->if->LookAndFeel->installBorder->table->getClientProperty->equals
BasicTableUI#installDefaults2()::: basic table i install defaults2:::th->table->getTransferHandler->if->table->setTransferHandler->if->table->getDropTarget->table->setDropTarget
BasicTableUI#installListeners():::Attaches listeners to the JTable.:::createFocusListener->createKeyListener->createMouseInputListener->table->addFocusListener->table->addKeyListener->table->addMouseListener->table->addMouseMotionListener->table->getHandler->addPropertyChangeListener->if->table->getSelectionModel->getHandler->addListSelectionListener
BasicTableUI#installKeyboardActions():::Register all keyboard actions on the JTable.:::LazyActionMap->installLazyActionMap->inputMap->getInputMap->SwingUtilities->replaceUIInputMap
BasicTableUI#getInputMap(int)::: basic table i get input map:::if->keyMap->DefaultLookup->get->rtlKeyMap->if->table->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicTableUI#loadActionMap(LazyActionMap)::: basic table i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->map->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->map->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicTableUI#uninstallUI(JComponent)::: basic table i uninstall i:::uninstallDefaults->uninstallListeners->uninstallKeyboardActions->table->remove
BasicTableUI#uninstallDefaults():::Uninstalls default properties.:::if->table->getTransferHandler->table->setTransferHandler
BasicTableUI#uninstallListeners():::Unregisters listeners.:::table->removeFocusListener->table->removeKeyListener->table->removeMouseListener->table->removeMouseMotionListener->table->getHandler->removePropertyChangeListener->if->table->getSelectionModel->getHandler->removeListSelectionListener
BasicTableUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTableUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->tcr->new->DefaultTableCellRenderer->tcr->getTableCellRendererComponent->lafDefaults->put->renderer->table->getFont->setFont->rowMargin->table->getRowMargin->return->renderer->table->getRowHeight->getBaseline
BasicTableUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTableUI#createTableSize(long)::: basic table i create table size:::height->rowCount->table->getRowCount->if->table->getColumnCount->r->table->getCellRect->tmp->Math->abs->if->return->new->Dimension
BasicTableUI#getMinimumSize(JComponent):::Return the minimum size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMinWidth->return->createTableSize
BasicTableUI#getPreferredSize(JComponent):::Return the preferred size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getPreferredWidth->return->createTableSize
BasicTableUI#getMaximumSize(JComponent):::Return the maximum size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMaxWidth->return->createTableSize
BasicTableUI#paint(Graphics, JComponent):::Paint a representation of the table instance that was set in installUI().:::clip->g->getClipBounds->bounds->table->getBounds->if->table->getRowCount->table->getColumnCount->bounds->intersects->paintDropLines->return->ltr->table->getComponentOrientation->isLeftToRight->upperLeft->lowerRight->visibleBounds->clip->intersection->visibleBounds->getLocation->new->Point->rMin->table->rowAtPoint->rMax->table->rowAtPoint->if->if->table->getRowCount->printMode->table->getClientProperty->if->clip->getLocation->new->Point->cMin->table->columnAtPoint->cMax->table->columnAtPoint->if->if->table->getColumnCount->comp->SwingUtilities->getUnwrappedParent->if->comp->getParent->if->if->table->getRowCount->table->getSelectedRow->paintGrid->paintCells->paintDropLines
BasicTableUI#paintDropLines(Graphics)::: basic table i paint drop lines:::loc->table->getDropLocation->if->return->color->UIManager->getColor->shortColor->UIManager->getColor->if->return->rect->getHDropLineRect->if->x->w->if->extendRect->g->setColor->g->fillRect->if->loc->isInsertColumn->g->setColor->g->fillRect->getVDropLineRect->if->y->h->if->extendRect->g->setColor->g->fillRect->if->loc->isInsertRow->g->setColor->g->fillRect
BasicTableUI#getHDropLineRect(JTable.DropLocation)::: basic table i get drop line rect:::if->loc->isInsertRow->return->row->loc->getRow->col->loc->getColumn->if->table->getColumnCount->rect->table->getCellRect->if->table->getRowCount->prevRect->table->getCellRect->if->else->return
BasicTableUI#getVDropLineRect(JTable.DropLocation)::: basic table i get drop line rect:::if->loc->isInsertColumn->return->ltr->table->getComponentOrientation->isLeftToRight->col->loc->getColumn->rect->table->loc->getRow->getCellRect->if->table->getColumnCount->table->loc->getRow->getCellRect->if->else->if->if->else->return
BasicTableUI#extendRect(Rectangle, boolean)::: basic table i extend rect:::if->return->if->table->getWidth->else->if->table->getRowCount->lastRect->table->table->getRowCount->getCellRect->else->table->getHeight->return
BasicTableUI#paintGrid(Graphics, int, int, int, int)::: basic table i paint grid:::g->table->getGridColor->setColor->minCell->table->getCellRect->maxCell->table->getCellRect->damagedArea->minCell->union->if->table->getShowHorizontalLines->tableWidth->y->for->row->if->table->getShowVerticalLines->cm->table->getColumnModel->tableHeight->x->if->table->getComponentOrientation->isLeftToRight->for->column->else->for->column
BasicTableUI#viewIndexForColumn(TableColumn)::: basic table i view index for column:::cm->table->getColumnModel->for->column->cm->getColumnCount->return
BasicTableUI#paintCells(Graphics, int, int, int, int)::: basic table i paint cells:::header->table->getTableHeader->draggedColumn->header->getDraggedColumn->cm->table->getColumnModel->columnMargin->cm->getColumnMargin->cellRect->aColumn->columnWidth->if->table->getComponentOrientation->isLeftToRight->for->row->else->for->row->if->header->getDraggedDistance->paintDraggedArea->rendererPane->removeAll
BasicTableUI#paintDraggedArea(Graphics, int, int, TableColumn, int)::: basic table i paint dragged area:::draggedColumnIndex->viewIndexForColumn->minCell->table->getCellRect->maxCell->table->getCellRect->vacatedColumnRect->minCell->union->g->table->getParent->getBackground->setColor->g->fillRect->g->table->getBackground->setColor->g->fillRect->if->table->getShowVerticalLines->g->table->getGridColor->setColor->x1->y1->x2->y2->g->drawLine->g->drawLine->for->row
BasicTableUI#paintCell(Graphics, Rectangle, int, int)::: basic table i paint cell:::if->table->isEditing->table->getEditingRow->table->getEditingColumn->component->table->getEditorComponent->component->setBounds->component->validate->else->renderer->table->getCellRenderer->component->table->prepareRenderer->rendererPane->paintComponent
BasicTableUI#getAdjustedLead(JTable, boolean, ListSelectionModel)::: basic table i get adjusted lead:::index->model->getLeadSelectionIndex->compare->table->getRowCount->table->getColumnCount->return
BasicTableUI#getAdjustedLead(JTable, boolean)::: basic table i get adjusted lead:::return->table->getSelectionModel->getAdjustedLead->table->getColumnModel->getSelectionModel->getAdjustedLead
BasicTableUI.TableTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->table->rows->cols->if->table->getRowSelectionAllowed->table->getColumnSelectionAllowed->return->if->table->getRowSelectionAllowed->rowCount->table->getRowCount->new->intArr->for->counter->else->table->getSelectedRows->if->table->getColumnSelectionAllowed->colCount->table->getColumnCount->new->intArr->for->counter->else->table->getSelectedColumns->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->for->row->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicTableUI.TableTransferHandler#getSourceActions(JComponent)::: table transfer handler get source actions:::return
BasicTextAreaUI#createUI(JComponent):::Creates a UI for a JTextArea.:::return->new->BasicTextAreaUI
BasicTextAreaUI#getPropertyPrefix():::Fetches the name used as a key to look up properties through the UIManager:::return
BasicTextAreaUI#installDefaults()::: basic text area i install defaults:::super->installDefaults
BasicTextAreaUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange->if->evt->getPropertyName->equals->evt->getPropertyName->equals->evt->getPropertyName->equals->modelChanged->else->if->evt->getPropertyName->equals->updateFocusTraversalKeys
BasicTextAreaUI#getPreferredSize(JComponent):::The method is overridden to take into account caret width.:::return->super->getPreferredSize
BasicTextAreaUI#getMinimumSize(JComponent):::The method is overridden to take into account caret width.:::return->super->getMinimumSize
BasicTextAreaUI#create(Element):::Creates the view for an element:::doc->elem->getDocument->i18nFlag->doc->getProperty->if->i18nFlag->equals->return->createI18N->else->c->getComponent->if->area->v->if->area->getLineWrap->area->getWrapStyleWord->new->WrappedPlainView->else->new->PlainView->return->return
BasicTextAreaUI#createI18N(Element)::: basic text area i create i18 n:::kind->elem->getName->if->if->kind->equals->return->new->PlainParagraph->else->if->kind->equals->return->new->BoxView->return
BasicTextAreaUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->i18nFlag->getDocument->getProperty->insets->c->getInsets->if->equals->rootView->getRootView->if->rootView->getViewCount->baseline->fieldBaseline->BasicHTML->rootView->getView->getBaseline->if->return->return->return->fm->c->c->getFont->getFontMetrics->return->fm->getAscent
BasicTextAreaUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTextAreaUI.PlainParagraph#setParent(View)::: plain paragraph set parent:::super->setParent->if->setPropertiesFromAttributes
BasicTextAreaUI.PlainParagraph#setPropertiesFromAttributes()::: plain paragraph set properties from attributes:::c->getContainer->if->c->getComponentOrientation->isLeftToRight->setJustification->else->setJustification
BasicTextAreaUI.PlainParagraph#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index.:::c->getContainer->if->area->if->area->getLineWrap->return->return->super->getFlowSpan
BasicTextAreaUI.PlainParagraph#calculateMinorAxisRequirements(int, SizeRequirements)::: plain paragraph calculate minor axis requirements:::req->super->calculateMinorAxisRequirements->c->getContainer->if->area->if->area->getLineWrap->else->getWidth->if->return
BasicTextAreaUI.PlainParagraph#setSize(float, float):::Sets the size of the view:::if->getWidth->preferenceChanged->super->setSize
BasicTextAreaUI.PlainParagraph.LogicalView#getViewIndexAtPosition(int)::: logical view get view index at position:::elem->getElement->if->elem->getElementCount->return->elem->getElementIndex->return
BasicTextAreaUI.PlainParagraph.LogicalView#updateChildren(DocumentEvent.ElementChange, DocumentEvent, ViewFactory)::: logical view update children:::return
BasicTextAreaUI.PlainParagraph.LogicalView#loadChildren(ViewFactory)::: logical view load children:::elem->getElement->if->elem->getElementCount->super->loadChildren->else->v->new->GlyphView->append
BasicTextAreaUI.PlainParagraph.LogicalView#getPreferredSpan(int)::: logical view get preferred span:::if->getViewCount->throw->new->Error->v->getView->return->v->getPreferredSpan
BasicTextAreaUI.PlainParagraph.LogicalView#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory):::Forward the DocumentEvent to the given child view:::v->setParent->super->forwardUpdateToView
BasicTextAreaUI.PlainParagraph.LogicalView#paint(Graphics, Shape)::: logical view paint:::
BasicTextAreaUI.PlainParagraph.LogicalView#isBefore(int, int, Rectangle)::: logical view is before:::return
BasicTextAreaUI.PlainParagraph.LogicalView#isAfter(int, int, Rectangle)::: logical view is after:::return
BasicTextAreaUI.PlainParagraph.LogicalView#getViewAtPoint(int, int, Rectangle)::: logical view get view at point:::return
BasicTextAreaUI.PlainParagraph.LogicalView#childAllocation(int, Rectangle)::: logical view child allocation:::
BasicTextFieldUI#createUI(JComponent):::Creates a UI for a JTextField.:::return->new->BasicTextFieldUI
BasicTextFieldUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicTextFieldUI#create(Element):::Creates a view (FieldView) based on an element.:::doc->elem->getDocument->i18nFlag->doc->getProperty->if->equals->kind->elem->getName->if->if->kind->equals->return->new->GlyphView->else->if->kind->equals->return->new->I18nFieldView->return->new->FieldView
BasicTextFieldUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->rootView->getRootView->if->rootView->getViewCount->insets->c->getInsets->if->baseline->fieldView->rootView->getView->vspan->fieldView->getPreferredSpan->if->slop->if->fieldBaseline->BasicHTML->getBaseline->if->return->else->fm->c->c->getFont->getFontMetrics->fm->getAscent->return->return
BasicTextFieldUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTextFieldUI.I18nFieldView#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index:::return
BasicTextFieldUI.I18nFieldView#setJustification(int)::: i18n field view set justification:::
BasicTextFieldUI.I18nFieldView#isLeftToRight(java.awt.Component)::: i18n field view is left to right:::return->c->getComponentOrientation->isLeftToRight
BasicTextFieldUI.I18nFieldView#adjustAllocation(Shape):::Adjusts the allocation given to the view to be a suitable allocation for a text field:::if->bounds->a->getBounds->vspan->getPreferredSpan->hspan->getPreferredSpan->if->slop->c->getContainer->if->field->vis->field->getHorizontalVisibility->max->Math->max->value->vis->getValue->extent->Math->min->if->vis->vis->getMinimum->setRangeProperties->if->slop->align->getHorizontalAlignment->if->isLeftToRight->if->else->if->else->if->else->if->switch->break->break->else->vis->getValue->return->return
BasicTextFieldUI.I18nFieldView#updateVisibilityModel():::Update the visibility model with the associated JTextField (if there is one) to reflect the current visibility as a result of changes to the document model:::c->getContainer->if->field->vis->field->getHorizontalVisibility->hspan->getPreferredSpan->extent->vis->getExtent->maximum->Math->max->value->oldValue->vis->getValue->if->Math->Math->min->max->vis->setRangeProperties
BasicTextFieldUI.I18nFieldView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::r->g->clipRect->super->adjustAllocation->paint
BasicTextFieldUI.I18nFieldView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::if->return->return
BasicTextFieldUI.I18nFieldView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->super->adjustAllocation->modelToView
BasicTextFieldUI.I18nFieldView#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->super->adjustAllocation->modelToView
BasicTextFieldUI.I18nFieldView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->super->adjustAllocation->viewToModel
BasicTextFieldUI.I18nFieldView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::super->adjustAllocation->insertUpdate->updateVisibilityModel
BasicTextFieldUI.I18nFieldView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::super->adjustAllocation->removeUpdate->updateVisibilityModel
BasicTextPaneUI#createUI(JComponent):::Creates a UI for the JTextPane.:::return->new->BasicTextPaneUI
BasicTextPaneUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicTextPaneUI#installUI(JComponent)::: basic text pane i install i:::super->installUI
BasicTextPaneUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange
BasicTextUI#createCaret():::Creates the object to use for a caret:::return->new->BasicCaret
BasicTextUI#createHighlighter():::Creates the object to use for adding highlights:::return->new->BasicHighlighter
BasicTextUI#getKeymapName():::Fetches the name of the keymap that will be installed/used by default for this UI:::nm->getClass->getName->index->nm->lastIndexOf->if->nm->nm->length->substring->return
BasicTextUI#createKeymap():::Creates the keymap to use for the text component, and installs any necessary bindings into it:::nm->getKeymapName->map->JTextComponent->getKeymap->if->parent->JTextComponent->getKeymap->JTextComponent->addKeymap->prefix->getPropertyPrefix->o->DefaultLookup->get->if->bindings->JTextComponent->getComponent->getActions->loadKeymap->return
BasicTextUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::if->evt->getPropertyName->equals->evt->getPropertyName->equals->evt->getSource->updateBackground->else->if->evt->getPropertyName->equals->value->evt->getNewValue->if->width->intValue->if
BasicTextUI#updateBackground(JTextComponent):::Updates the background of the text component based on whether the text component is editable and/or enabled.:::if->return->background->c->getBackground->if->prefix->getPropertyPrefix->disabledBG->DefaultLookup->getColor->inactiveBG->DefaultLookup->getColor->bg->DefaultLookup->getColor->if->return->newColor->if->c->isEnabled->if->c->isEditable->if->if->c->setBackground
BasicTextUI#getPropertyPrefix():::Gets the name used as a key to look up properties through the UIManager:::
BasicTextUI#installDefaults():::Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color:::prefix->getPropertyPrefix->f->editor->getFont->if->editor->UIManager->getFont->setFont->bg->editor->getBackground->if->editor->UIManager->getColor->setBackground->fg->editor->getForeground->if->editor->UIManager->getColor->setForeground->color->editor->getCaretColor->if->editor->UIManager->getColor->setCaretColor->s->editor->getSelectionColor->if->editor->UIManager->getColor->setSelectionColor->sfg->editor->getSelectedTextColor->if->editor->UIManager->getColor->setSelectedTextColor->dfg->editor->getDisabledTextColor->if->editor->UIManager->getColor->setDisabledTextColor->b->editor->getBorder->if->editor->UIManager->getBorder->setBorder->margin->editor->getMargin->if->editor->UIManager->getInsets->setMargin->updateCursor
BasicTextUI#installDefaults2()::: basic text i install defaults2:::editor->addMouseListener->editor->addMouseMotionListener->prefix->getPropertyPrefix->caret->editor->getCaret->if->createCaret->editor->setCaret->rate->DefaultLookup->getComponent->getInt->caret->setBlinkRate->highlighter->editor->getHighlighter->if->editor->createHighlighter->setHighlighter->th->editor->getTransferHandler->if->editor->getTransferHandler->setTransferHandler
BasicTextUI#uninstallDefaults():::Sets the component properties that have not been explicitly overridden to null:::editor->removeMouseListener->editor->removeMouseMotionListener->if->editor->getCaretColor->editor->setCaretColor->if->editor->getSelectionColor->editor->setSelectionColor->if->editor->getDisabledTextColor->editor->setDisabledTextColor->if->editor->getSelectedTextColor->editor->setSelectedTextColor->if->editor->getBorder->editor->setBorder->if->editor->getMargin->editor->setMargin->if->editor->getCaret->editor->setCaret->if->editor->getHighlighter->editor->setHighlighter->if->editor->getTransferHandler->editor->setTransferHandler->if->editor->getCursor->editor->setCursor
BasicTextUI#installListeners():::Installs listeners for the UI.:::
BasicTextUI#uninstallListeners():::Uninstalls listeners for the UI.:::
BasicTextUI#installKeyboardActions():::Registers keyboard actions.:::editor->createKeymap->setKeymap->km->getInputMap->if->SwingUtilities->replaceUIInputMap->map->getActionMap->if->SwingUtilities->replaceUIActionMap->updateFocusAcceleratorBinding
BasicTextUI#getInputMap():::Get the InputMap to use for the UI.:::map->new->InputMapUIResource->shared->DefaultLookup->getPropertyPrefix->get->if->map->setParent->return
BasicTextUI#updateFocusAcceleratorBinding(boolean):::Invoked when the focus accelerator changes, this will update the key bindings as necessary.:::accelerator->editor->getFocusAccelerator->if->km->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->am->getActionMap->SwingUtilities->replaceUIActionMap->if->km->clear->if->km->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->km->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put
BasicTextUI#updateFocusTraversalKeys():::Invoked when editable property is changed:::editorKit->getEditorKit->if->storedForwardTraversalKeys->editor->getFocusTraversalKeys->storedBackwardTraversalKeys->editor->getFocusTraversalKeys->forwardTraversalKeys->new->HashSet<AWTKeyStroke>->backwardTraversalKeys->new->HashSet<AWTKeyStroke>->if->editor->isEditable->forwardTraversalKeys->KeyStroke->getKeyStroke->remove->backwardTraversalKeys->KeyStroke->getKeyStroke->remove->else->forwardTraversalKeys->KeyStroke->getKeyStroke->add->backwardTraversalKeys->KeyStroke->getKeyStroke->add->LookAndFeel->installProperty->LookAndFeel->installProperty
BasicTextUI#updateCursor():::As needed updates cursor for the target editor.:::if->editor->isCursorSet->editor->getCursor->cursor->editor->isEditable->editor->setCursor
BasicTextUI#getTransferHandler():::Returns the TransferHandler that will be installed if their isn't one installed on the JTextComponent.:::return
BasicTextUI#getActionMap():::Fetch an action map to use.:::mapName->getPropertyPrefix->map->UIManager->get->if->createActionMap->if->UIManager->getLookAndFeelDefaults->put->componentMap->new->ActionMapUIResource->componentMap->new->FocusAction->put->if->getEditorKit->if->obj->map->get->if->action->new->TextActionWrapper->componentMap->action->getValue->put->if->componentMap->setParent->return
BasicTextUI#createActionMap():::Create a default action map:::map->new->ActionMapUIResource->actions->editor->getActions->n->for->i->map->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->map->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->map->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put->return
BasicTextUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::editor->setKeymap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTextUI#paintBackground(Graphics):::Paints a background for the view:::g->editor->getBackground->setColor->g->editor->getWidth->editor->getHeight->fillRect
BasicTextUI#getComponent():::Fetches the text component associated with this UI implementation:::return
BasicTextUI#modelChanged():::Flags model changes:::f->rootView->getViewFactory->doc->editor->getDocument->elem->doc->getDefaultRootElement->f->create->setView
BasicTextUI#setView(View):::Sets the current root of the view hierarchy and calls invalidate():::rootView->setView->editor->revalidate->editor->repaint
BasicTextUI#paintSafely(Graphics):::Paints the interface safely with a guarantee that the model won't change from the view of this thread:::highlighter->editor->getHighlighter->caret->editor->getCaret->if->editor->isOpaque->paintBackground->if->highlighter->paint->alloc->getVisibleEditorRect->if->rootView->paint->if->caret->paint->if->dropCaret->paint
BasicTextUI#installUI(JComponent):::Installs the UI for a component:::if->LookAndFeel->installProperty->LookAndFeel->installProperty->installDefaults->installDefaults2->property->UIManager->get->if->intValue->c->getClientProperty->if->intValue->if->editor->addPropertyChangeListener->doc->editor->getDocument->if->editor->getEditorKit->createDefaultDocument->setDocument->else->doc->addDocumentListener->modelChanged->installListeners->installKeyboardActions->oldLayout->editor->getLayout->if->editor->setLayout->updateBackground->else->throw->new->Error
BasicTextUI#uninstallUI(JComponent):::Deinstalls the UI for a component:::editor->removePropertyChangeListener->editor->getDocument->removeDocumentListener->uninstallDefaults->rootView->setView->c->removeAll->lm->c->getLayout->if->c->setLayout->uninstallKeyboardActions->uninstallListeners
BasicTextUI#update(Graphics, JComponent):::Superclass paints background in an uncontrollable way (i.e:::paint
BasicTextUI#paint(Graphics, JComponent):::Paints the interface:::if->rootView->getViewCount->rootView->getView->doc->editor->getDocument->if->readLock->try->paintSafely->catch->finally->if->readUnlock
BasicTextUI#getPreferredSize(JComponent):::Gets the preferred size for the editor component:::doc->editor->getDocument->i->c->getInsets->d->c->getSize->if->readLock->try->if->rootView->setSize->else->if->rootView->setSize->Math->rootView->getPreferredSpan->min->Math->rootView->getPreferredSpan->min->catch->finally->if->readUnlock->return
BasicTextUI#getMinimumSize(JComponent):::Gets the minimum size for the editor component.:::doc->editor->getDocument->i->c->getInsets->d->new->Dimension->if->readLock->try->rootView->getMinimumSpan->rootView->getMinimumSpan->catch->finally->if->readUnlock->return
BasicTextUI#getMaximumSize(JComponent):::Gets the maximum size for the editor component.:::doc->editor->getDocument->i->c->getInsets->d->new->Dimension->if->readLock->try->Math->rootView->getMaximumSpan->min->Math->rootView->getMaximumSpan->min->catch->finally->if->readUnlock->return
BasicTextUI#getVisibleEditorRect():::Gets the allocation to give the root View:::alloc->editor->getBounds->if->insets->editor->getInsets->return->return
BasicTextUI#modelToView(JTextComponent, int):::Converts the given location in the model to a place in the view coordinate system:::return->modelToView
BasicTextUI#modelToView(JTextComponent, int, Position.Bias):::Converts the given location in the model to a place in the view coordinate system:::return->modelToView
BasicTextUI#modelToView2D(JTextComponent, int, Position.Bias)::: basic text i model to view2 d:::return->modelToView
BasicTextUI#modelToView(JTextComponent, int, Position.Bias, boolean)::: basic text i model to view:::doc->editor->getDocument->if->readLock->try->alloc->getVisibleEditorRect->if->rootView->setSize->s->rootView->modelToView->if->return->s->getBounds2D->s->getBounds->catch->finally->if->readUnlock->return
BasicTextUI#viewToModel(JTextComponent, Point):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->viewToModel
BasicTextUI#viewToModel(JTextComponent, Point, Position.Bias[]):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->viewToModel
BasicTextUI#viewToModel2D(JTextComponent, Point2D, Position.Bias[])::: basic text i view to model2 d:::return->pt->getX->pt->getY->viewToModel
BasicTextUI#viewToModel(JTextComponent, float, float, Position.Bias[])::: basic text i view to model:::offs->doc->editor->getDocument->if->readLock->try->alloc->getVisibleEditorRect->if->rootView->setSize->rootView->viewToModel->catch->finally->if->readUnlock->return
BasicTextUI#getNextVisualPositionFrom(JTextComponent, int, Position.Bias, int, Position.Bias[])::: basic text i get next visual position from:::doc->editor->getDocument->if->doc->getLength->throw->new->BadLocationException->if->readLock->try->if->alloc->getVisibleEditorRect->if->rootView->setSize->return->rootView->getNextVisualPositionFrom->catch->finally->if->readUnlock->return
BasicTextUI#damageRange(JTextComponent, int, int):::Causes the portion of the view responsible for the given part of the model to be repainted:::damageRange
BasicTextUI#damageRange(JTextComponent, int, int, Position.Bias, Position.Bias):::Causes the portion of the view responsible for the given part of the model to be repainted.:::if->alloc->getVisibleEditorRect->if->doc->t->getDocument->if->readLock->try->rootView->setSize->toDamage->rootView->modelToView->rect->toDamage->getBounds->editor->repaint->catch->finally->if->readUnlock
BasicTextUI#getEditorKit(JTextComponent):::Fetches the EditorKit for the UI.:::return
BasicTextUI#getRootView(JTextComponent):::Fetches a View with the allocation of the associated text component (i.e:::return
BasicTextUI#getToolTipText(JTextComponent, Point):::Returns the string to be used as the tooltip at the passed in location:::if->return->doc->editor->getDocument->tt->alloc->getVisibleEditorRect->if->if->readLock->try->rootView->getToolTipText->catch->finally->if->readUnlock->return
BasicTextUI#create(Element):::Creates a view for an element:::return
BasicTextUI#create(Element, int, int):::Creates a view for an element:::return
BasicTextUI.RootView#setView(View)::: root view set view:::oldView->if->oldView->setParent->if->v->setParent
BasicTextUI.RootView#getAttributes():::Fetches the attributes to use when rendering:::return
BasicTextUI.RootView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::if->return->view->getPreferredSpan->return
BasicTextUI.RootView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::if->return->view->getMinimumSpan->return
BasicTextUI.RootView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return
BasicTextUI.RootView#preferenceChanged(View, boolean, boolean):::Specifies that a preference has changed:::editor->revalidate
BasicTextUI.RootView#getAlignment(int):::Determines the desired alignment for this view along an axis.:::if->return->view->getAlignment->return
BasicTextUI.RootView#paint(Graphics, Shape):::Renders the view.:::if->alloc->allocation->getBounds->setSize->view->paint
BasicTextUI.RootView#setParent(View):::Sets the view parent.:::throw->new->Error
BasicTextUI.RootView#getViewCount():::Returns the number of views in this view:::return
BasicTextUI.RootView#getView(int):::Gets the n-th view in this container.:::return
BasicTextUI.RootView#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::return
BasicTextUI.RootView#getChildAllocation(int, Shape):::Fetches the allocation for the given child view:::return
BasicTextUI.RootView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::if->return->view->modelToView->return
BasicTextUI.RootView#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::if->return->view->modelToView->return
BasicTextUI.RootView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::if->retValue->view->viewToModel->return->return
BasicTextUI.RootView#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->if->nextPos->view->getNextVisualPositionFrom->if->else->return
BasicTextUI.RootView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::if->view->insertUpdate
BasicTextUI.RootView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::if->view->removeUpdate
BasicTextUI.RootView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::if->view->changedUpdate
BasicTextUI.RootView#getDocument():::Returns the document model underlying the view.:::return->editor->getDocument
BasicTextUI.RootView#getStartOffset():::Returns the starting offset into the model for this view.:::if->return->view->getStartOffset->return->getElement->getStartOffset
BasicTextUI.RootView#getEndOffset():::Returns the ending offset into the model for this view.:::if->return->view->getEndOffset->return->getElement->getEndOffset
BasicTextUI.RootView#getElement():::Gets the element that this view is mapped to.:::if->return->view->getElement->return->editor->getDocument->getDefaultRootElement
BasicTextUI.RootView#breakView(int, float, Shape):::Breaks this view on the given axis at the given length.:::throw->new->Error
BasicTextUI.RootView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::if->return->view->getResizeWeight->return
BasicTextUI.RootView#setSize(float, float):::Sets the view size.:::if->view->setSize
BasicTextUI.RootView#getContainer():::Fetches the container hosting the view:::return
BasicTextUI.RootView#getViewFactory():::Fetches the factory to be used for building the various view fragments that make up the view that represents the model:::kit->getEditorKit->f->kit->getViewFactory->if->return->return
BasicTextUI.UpdateHandler#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed:::oldValue->evt->getOldValue->newValue->evt->getNewValue->propertyName->evt->getPropertyName->if->if->removeDocumentListener->if->addDocumentListener->if->setView->BasicTextUI.this->propertyChange->modelChanged->return->modelChanged->if->updateFocusAcceleratorBinding->else->if->modelChanged->else->if->modelChanged->else->if->dropIndexChanged->else->if->updateCursor->modelChanged->BasicTextUI.this->propertyChange
BasicTextUI.UpdateHandler#dropIndexChanged()::: update handler drop index changed:::if->editor->getDropMode->return->dropLocation->editor->getDropLocation->if->if->dropCaret->deinstall->editor->repaint->else->if->new->BasicCaret->dropCaret->install->dropCaret->setVisible->dropCaret->dropLocation->getIndex->dropLocation->getBias->setDot
BasicTextUI.UpdateHandler#insertUpdate(DocumentEvent):::The insert notification:::doc->e->getDocument->o->doc->getProperty->if->i18nFlag->if->i18nFlag->booleanValue->i18nFlag->booleanValue->modelChanged->return->alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->insertUpdate
BasicTextUI.UpdateHandler#removeUpdate(DocumentEvent):::The remove notification:::alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->removeUpdate
BasicTextUI.UpdateHandler#changedUpdate(DocumentEvent):::The change notification:::alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->changedUpdate
BasicTextUI.UpdateHandler#addLayoutComponent(String, Component):::Adds the specified component with the specified name to the layout.:::
BasicTextUI.UpdateHandler#removeLayoutComponent(Component):::Removes the specified component from the layout.:::if->constraints->remove
BasicTextUI.UpdateHandler#preferredLayoutSize(Container):::Calculates the preferred size dimensions for the specified panel given the components in the specified parent container.:::return
BasicTextUI.UpdateHandler#minimumLayoutSize(Container):::Calculates the minimum size dimensions for the specified panel given the components in the specified parent container.:::return
BasicTextUI.UpdateHandler#layoutContainer(Container):::Lays out the container in the specified panel:::if->constraints->isEmpty->alloc->getVisibleEditorRect->if->doc->editor->getDocument->if->readLock->try->rootView->setSize->components->constraints->keys->while->components->hasMoreElements->comp->components->nextElement->v->constraints->get->ca->calculateViewPosition->if->compAlloc->ca->getBounds->comp->setBounds->catch->finally->if->readUnlock
BasicTextUI.UpdateHandler#calculateViewPosition(Shape, View):::Find the Shape representing the given view.:::pos->v->getStartOffset->child->for->parent->return
BasicTextUI.UpdateHandler#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object:::if->if->new->Hashtable<Component,Object>->constraints->put
BasicTextUI.UpdateHandler#maximumLayoutSize(Container):::Returns the maximum size of this component.:::return
BasicTextUI.UpdateHandler#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
BasicTextUI.UpdateHandler#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
BasicTextUI.UpdateHandler#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
BasicTextUI.TextActionWrapper#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::action->actionPerformed
BasicTextUI.TextActionWrapper#isEnabled()::: text action wrapper is enabled:::return->editor->isEditable->action->isEnabled
BasicTextUI.FocusAction#actionPerformed(ActionEvent)::: focus action action performed:::editor->requestFocus
BasicTextUI.FocusAction#isEnabled()::: focus action is enabled:::return->editor->isEditable
BasicTextUI#getDragListener()::: basic text i get drag listener:::synchronized->listener->AppContext->getAppContext->get->if->new->DragListener->AppContext->getAppContext->put->return
BasicTextUI.DragListener#dragStarting(MouseEvent)::: drag listener drag starting:::
BasicTextUI.DragListener#mousePressed(MouseEvent)::: drag listener mouse pressed:::c->e->getSource->if->c->getDragEnabled->if->isDragPossible->DragRecognitionSupport->mousePressed->e->consume
BasicTextUI.DragListener#mouseReleased(MouseEvent)::: drag listener mouse released:::c->e->getSource->if->c->getDragEnabled->if->e->consume->DragRecognitionSupport->mouseReleased
BasicTextUI.DragListener#mouseDragged(MouseEvent)::: drag listener mouse dragged:::c->e->getSource->if->c->getDragEnabled->if->DragRecognitionSupport->mouseDragged->e->consume
BasicTextUI.DragListener#isDragPossible(MouseEvent):::Determines if the following are true: <ul> <li>the component is enabled <li>the press event is located over a selection </ul>:::c->e->getSource->if->c->isEnabled->caret->c->getCaret->dot->caret->getDot->mark->caret->getMark->if->p->e->getX->e->getY->new->Point->pos->c->viewToModel->p0->Math->min->p1->Math->max->if->return->return
BasicTextUI.TextTransferHandler#getImportFlavor(DataFlavor[], JTextComponent):::Try to find a flavor that can be used to import a Transferable:::plainFlavor->refFlavor->stringFlavor->if->for->i->if->return->else->if->return->else->if->return->return->for->i->if->return->else->if->return->return
BasicTextUI.TextTransferHandler#handleReaderImport(Reader, JTextComponent, boolean):::Import the given stream data into the text component.:::if->startPosition->c->getSelectionStart->endPosition->c->getSelectionEnd->length->kit->c->getUI->getEditorKit->doc->c->getDocument->if->doc->remove->kit->read->else->buff->new->charArr->nch->lastWasCR->last->sbuff->while->in->read->if->new->StringBuffer->for->counter->if->if->if->sbuff->append->else->sbuff->append->if->sbuff->append->c->sbuff->toString->replaceSelection
BasicTextUI.TextTransferHandler#getSourceActions(JComponent):::This is the type of transfer actions supported by the source:::if->c->getClientProperty->return->return->isEditable
BasicTextUI.TextTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::exportComp->getSelectionStart->exportComp->getSelectionEnd->return->new->TextTransferable
BasicTextUI.TextTransferHandler#exportDone(JComponent, Transferable, int):::This method is called after data has been exported:::if->t->t->removeText
BasicTextUI.TextTransferHandler#importData(TransferSupport)::: text transfer handler import data:::support->isDrop->if->support->getComponent->getDropMode->support->getDropLocation->getBias->support->getDropAction->try->return->super->importData->catch->finally
BasicTextUI.TextTransferHandler#importData(JComponent, Transferable):::This method causes a transfer to a component from a clipboard or a DND drop operation:::c->pos->c->getDropLocation->getIndex->c->getCaretPosition->if->return->imported->importFlavor->t->getTransferDataFlavors->getImportFlavor->if->try->useRead->if->ep->if->ep->getContentType->startsWith->importFlavor->getMimeType->ep->getContentType->startsWith->ic->c->getInputContext->if->ic->endComposition->r->importFlavor->getReaderForText->if->caret->c->getCaret->if->setDot->else->c->setCaretPosition->handleReaderImport->if->c->requestFocus->caret->c->getCaret->if->newPos->caret->getDot->newBias->getDotBias->setDot->moveDot->else->c->c->getCaretPosition->select->catch->finally->return
BasicTextUI.TextTransferHandler#canImport(JComponent, DataFlavor[]):::This method indicates if a component would accept an import of the given set of data flavors prior to actually attempting to import it.:::c->if->c->isEditable->c->isEnabled->return->return->getImportFlavor
BasicTextUI.TextTransferHandler.TextTransferable#removeText()::: text transferable remove text:::if->p0->getOffset->p1->getOffset->try->doc->c->getDocument->doc->p0->getOffset->p1->getOffset->p0->getOffset->remove->catch->finally
BasicTextUI.TextTransferHandler.TextTransferable#getRicherFlavors():::If the EditorKit is not for text/plain or text/html, that format is supported through the "richer flavors" part of BasicTransferable.:::if->return->try->flavors->new->DataFlavorArr->new->DataFlavor->new->DataFlavor->new->DataFlavor->return->catch->finally->return
BasicTextUI.TextTransferHandler.TextTransferable#getRicherData(DataFlavor):::The only richer format supported is the file list flavor:::if->return->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->new->StringBufferInputStream->throw->new->UnsupportedFlavorException
BasicToggleButtonUI#createUI(JComponent):::Returns an instance of BasicToggleButtonUI.:::appContext->AppContext->getAppContext->toggleButtonUI->appContext->get->if->new->BasicToggleButtonUI->appContext->put->return
BasicToggleButtonUI#getPropertyPrefix()::: basic toggle button i get property prefix:::return
BasicToggleButtonUI#paint(Graphics, JComponent)::: basic toggle button i paint:::b->model->b->getModel->size->b->getSize->fm->g->getFontMetrics->i->c->getInsets->viewRect->new->Rectangle->iconRect->new->Rectangle->textRect->new->Rectangle->f->c->getFont->g->setFont->text->SwingUtilities->b->getText->b->getIcon->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getText->b->getIconTextGap->layoutCompoundLabel->g->b->getBackground->setColor->if->model->isArmed->model->isPressed->model->isSelected->paintButtonPressed->if->b->getIcon->paintIcon->if->text->equals->v->c->getClientProperty->if->v->paint->else->paintText->if->b->isFocusPainted->b->hasFocus->paintFocus
BasicToggleButtonUI#paintIcon(Graphics, AbstractButton, Rectangle):::Paints an icon in the specified location.:::model->b->getModel->icon->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->else->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->b->getSelectedIcon->else->if->model->isSelected->if->b->isRolloverEnabled->model->isRollover->b->getRolloverSelectedIcon->if->b->getSelectedIcon->else->b->getSelectedIcon->else->if->b->isRolloverEnabled->model->isRollover->b->getRolloverIcon->if->b->getIcon->icon->paintIcon
BasicToggleButtonUI#getTextShiftOffset():::Overriden so that the text will not be rendered as shifted for Toggle buttons and subclasses.:::return
BasicToolBarSeparatorUI#createUI(JComponent):::Returns a new instance of BasicToolBarSeparatorUI.:::return->new->BasicToolBarSeparatorUI
BasicToolBarSeparatorUI#installDefaults(JSeparator)::: basic tool bar separator i install defaults:::size->getSeparatorSize->if->sep->UIManager->get->if->if->sep->getOrientation->new->Dimension->sep->setSeparatorSize
BasicToolBarSeparatorUI#paint(Graphics, JComponent)::: basic tool bar separator i paint:::
BasicToolBarSeparatorUI#getPreferredSize(JComponent)::: basic tool bar separator i get preferred size:::size->getSeparatorSize->if->return->size->getSize->else->return
BasicToolBarUI#createUI(JComponent):::Constructs a new instance of BasicToolBarUI.:::return->new->BasicToolBarUI
BasicToolBarUI#installUI(JComponent)::: basic tool bar i install i:::installDefaults->installComponents->installListeners->installKeyboardActions->toolBar->getOrientation->setOrientation->LookAndFeel->installProperty->if->c->getClientProperty->c->getClientProperty->intValue
BasicToolBarUI#uninstallUI(JComponent)::: basic tool bar i uninstall i:::uninstallDefaults->uninstallComponents->uninstallListeners->uninstallKeyboardActions->if->isFloating->setFloating->c->Integer->valueOf->putClientProperty
BasicToolBarUI#installDefaults():::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->rolloverProp->toolBar->getClientProperty->if->UIManager->get->if->booleanValue->if->createRolloverBorder->if->createNonRolloverBorder->if->createNonRolloverToggleBorder->isRolloverBorders->setRolloverBorders
BasicToolBarUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder->installNormalBorders
BasicToolBarUI#installComponents():::Registers components.:::
BasicToolBarUI#uninstallComponents():::Unregisters components.:::
BasicToolBarUI#installListeners():::Registers listeners.:::createDockingListener->if->toolBar->addMouseMotionListener->toolBar->addMouseListener->createPropertyListener->if->toolBar->addPropertyChangeListener->createToolBarContListener->if->toolBar->addContainerListener->createToolBarFocusListener->if->components->toolBar->getComponents->foreach->component->addFocusListener
BasicToolBarUI#uninstallListeners():::Unregisters listeners.:::if->toolBar->removeMouseMotionListener->toolBar->removeMouseListener->if->toolBar->removePropertyChangeListener->if->toolBar->removeContainerListener->if->components->toolBar->getComponents->foreach->component->removeFocusListener
BasicToolBarUI#installKeyboardActions():::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicToolBarUI#getInputMap(int)::: basic tool bar i get input map:::if->return->DefaultLookup->get->return
BasicToolBarUI#loadActionMap(LazyActionMap)::: basic tool bar i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicToolBarUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicToolBarUI#navigateFocusedComp(int):::Navigates the focused component.:::nComp->toolBar->getComponentCount->j->switch->if->break->while->if->comp->toolBar->getComponentAtIndex->if->comp->isFocusTraversable->comp->isEnabled->comp->requestFocus->break->break->if->break->while->if->comp->toolBar->getComponentAtIndex->if->comp->isFocusTraversable->comp->isEnabled->comp->requestFocus->break->break->break
BasicToolBarUI#createRolloverBorder():::Creates a rollover border for toolbar components:::border->UIManager->get->if->return->table->UIManager->getLookAndFeelDefaults->return->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.RolloverButtonBorder->new->BasicBorders.RolloverMarginBorder->new->CompoundBorder
BasicToolBarUI#createNonRolloverBorder():::Creates the non rollover border for toolbar components:::border->UIManager->get->if->return->table->UIManager->getLookAndFeelDefaults->return->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ButtonBorder->new->BasicBorders.RolloverMarginBorder->new->CompoundBorder
BasicToolBarUI#createNonRolloverToggleBorder():::Creates a non rollover border for Toggle buttons in the toolbar.:::table->UIManager->getLookAndFeelDefaults->return->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.RadioButtonBorder->new->BasicBorders.RolloverMarginBorder->new->CompoundBorder
BasicToolBarUI#createFloatingFrame(JToolBar):::No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar):::window->SwingUtilities->getWindowAncestor->frame->toolbar->getName->window->getGraphicsConfiguration->new->JFrame->frame->getRootPane->setName->frame->setResizable->wl->createFrameListener->frame->addWindowListener->return
BasicToolBarUI#createFloatingWindow(JToolBar):::Creates a window which contains the toolbar after it has been dragged out from its container:::dialog->window->SwingUtilities->getWindowAncestor->if->toolbar->getName->new->ToolBarDialog->else->if->toolbar->getName->new->ToolBarDialog->else->toolbar->getName->new->ToolBarDialog->dialog->getRootPane->setName->dialog->toolbar->getName->setTitle->dialog->setResizable->wl->createFrameListener->dialog->addWindowListener->return
BasicToolBarUI#createDragWindow(JToolBar):::Returns an instance of DragWindow.:::frame->if->p->for->toolBar->getParent->p->getParent->if->if->createFloatingWindow->if->dragWindow->new->DragWindow->return
BasicToolBarUI#isRolloverBorders():::Returns a flag to determine whether rollover button borders are enabled.:::return
BasicToolBarUI#setRolloverBorders(boolean):::Sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag.:::if->installRolloverBorders->else->installNonRolloverBorders
BasicToolBarUI#installRolloverBorders(JComponent):::Installs rollover borders on all the child components of the JComponent:::components->c->getComponents->foreach->if->updateUI->setBorderToRollover
BasicToolBarUI#installNonRolloverBorders(JComponent):::Installs non-rollover borders on all the child components of the JComponent:::components->c->getComponents->foreach->if->updateUI->setBorderToNonRollover
BasicToolBarUI#installNormalBorders(JComponent):::Installs normal borders on all the child components of the JComponent:::components->c->getComponents->foreach->setBorderToNormal
BasicToolBarUI#setBorderToRollover(Component):::Sets the border of the component to have a rollover border which was created by the #createRolloverBorder method.:::if->b->border->borderTable->get->if->borderTable->b->getBorder->put->if->b->getBorder->b->getRolloverBorder->setBorder->rolloverTable->b->isRolloverEnabled->put->b->setRolloverEnabled
BasicToolBarUI#getRolloverBorder(AbstractButton):::Returns a rollover border for the button.:::return
BasicToolBarUI#setBorderToNonRollover(Component):::Sets the border of the component to have a non-rollover border which was created by the #createNonRolloverBorder method.:::if->b->border->borderTable->get->if->borderTable->b->getBorder->put->if->b->getBorder->b->getNonRolloverBorder->setBorder->rolloverTable->b->isRolloverEnabled->put->b->setRolloverEnabled
BasicToolBarUI#getNonRolloverBorder(AbstractButton):::Returns a non-rollover border for the button.:::if->return->else->return
BasicToolBarUI#setBorderToNormal(Component):::Sets the border of the component to have a normal border:::if->b->border->borderTable->remove->b->setBorder->value->rolloverTable->remove->if->b->value->booleanValue->setRolloverEnabled
BasicToolBarUI#setFloatingLocation(int, int):::Sets the floating location.:::
BasicToolBarUI#isFloating():::Returns true if the JToolBar is floating:::return
BasicToolBarUI#setFloating(boolean, Point):::Sets the floating property.:::if->toolBar->isFloatable->visible->ancestor->SwingUtilities->getWindowAncestor->if->ancestor->isVisible->if->dragWindow->setVisible->if->createFloatingWindow->if->if->toolBar->getParent->dockingSource->remove->calculateConstraint->if->UIManager->addPropertyChangeListener->floatingToolBar->getContentPane->add->if->pack->setLocation->if->show->else->ancestor->new->WindowAdapter->addWindowListener->else->if->createFloatingWindow->if->setVisible->floatingToolBar->getContentPane->remove->constraint->getDockingConstraint->if->orientation->mapConstraintToOrientation->setOrientation->if->toolBar->getParent->if->UIManager->removePropertyChangeListener->dockingSource->add->dockingSource->invalidate->dockingSourceParent->dockingSource->getParent->if->dockingSourceParent->validate->dockingSource->repaint
BasicToolBarUI#mapConstraintToOrientation(String)::: basic tool bar i map constraint to orientation:::orientation->toolBar->getOrientation->if->if->constraint->equals->constraint->equals->else->if->constraint->equals->constraint->equals->return
BasicToolBarUI#setOrientation(int):::Sets the tool bar's orientation.:::toolBar->setOrientation->if->dragWindow->setOrientation
BasicToolBarUI#getDockingColor():::Gets the color displayed when over a docking area:::return
BasicToolBarUI#setDockingColor(Color):::Sets the color displayed when over a docking area:::
BasicToolBarUI#getFloatingColor():::Gets the color displayed when over a floating area:::return
BasicToolBarUI#setFloatingColor(Color):::Sets the color displayed when over a floating area:::
BasicToolBarUI#isBlocked(Component, Object)::: basic tool bar i is blocked:::if->cont->lm->cont->getLayout->if->blm->c->blm->getLayoutComponent->return->return
BasicToolBarUI#canDock(Component, Point):::Returns true if the JToolBar can dock at the given position.:::return->getDockingConstraint
BasicToolBarUI#calculateConstraint()::: basic tool bar i calculate constraint:::constraint->lm->dockingSource->getLayout->if->getConstraints->return
BasicToolBarUI#getDockingConstraint(Component, Point)::: basic tool bar i get docking constraint:::if->return->if->c->contains->toolBar->getOrientation->toolBar->getSize->toolBar->getSize->if->isBlocked->return->if->c->getWidth->isBlocked->return->if->isBlocked->return->if->c->getHeight->isBlocked->return->return
BasicToolBarUI#dragTo(Point, Point):::The method is used to drag DragWindow during the JToolBar is being dragged.:::if->toolBar->isFloatable->try->if->createDragWindow->offset->dragWindow->getOffset->if->size->toolBar->getPreferredSize->new->Point->dragWindow->setOffset->global->new->Point->dragPoint->new->Point->if->toolBar->getParent->calculateConstraint->dockingPosition->dockingSource->getLocationOnScreen->comparisonPoint->new->Point->if->canDock->dragWindow->getDockingColor->setBackground->constraint->getDockingConstraint->orientation->mapConstraintToOrientation->dragWindow->setOrientation->dragWindow->setBorderColor->else->dragWindow->getFloatingColor->setBackground->dragWindow->setBorderColor->dragWindow->toolBar->getOrientation->setOrientation->dragWindow->setLocation->if->dragWindow->isVisible->size->toolBar->getPreferredSize->dragWindow->setSize->dragWindow->show->catch->finally
BasicToolBarUI#floatAt(Point, Point):::The method is called at end of dragging to place the frame in either its original place or in its floating frame.:::if->toolBar->isFloatable->try->offset->dragWindow->getOffset->if->dragWindow->setOffset->global->new->Point->setFloatingLocation->if->dockingPosition->dockingSource->getLocationOnScreen->comparisonPoint->new->Point->if->canDock->setFloating->else->setFloating->else->setFloating->dragWindow->setOffset->catch->finally
BasicToolBarUI#getHandler()::: basic tool bar i get handler:::if->new->Handler->return
BasicToolBarUI#createToolBarContListener():::Returns an instance of ContainerListener.:::return->getHandler
BasicToolBarUI#createToolBarFocusListener():::Returns an instance of FocusListener.:::return->getHandler
BasicToolBarUI#createPropertyListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicToolBarUI#createDockingListener():::Returns an instance of MouseInputListener.:::getHandler->return->getHandler
BasicToolBarUI#createFrameListener():::Constructs a new instance of WindowListener.:::return->new->FrameListener
BasicToolBarUI#paintDragWindow(Graphics):::Paints the contents of the window used for dragging.:::g->dragWindow->getBackground->setColor->w->dragWindow->getWidth->h->dragWindow->getHeight->g->fillRect->g->dragWindow->getBorderColor->setColor->g->drawRect
BasicToolBarUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::key->getName->toolBar->evt->getSource->ui->BasicLookAndFeel->toolBar->getUI->getUIOfType->if->ui->navigateFocusedComp->else->if->ui->navigateFocusedComp->else->if->ui->navigateFocusedComp->else->if->ui->navigateFocusedComp
BasicToolBarUI.Handler#componentAdded(ContainerEvent)::: handler component added:::c->evt->getChild->if->c->addFocusListener->if->isRolloverBorders->setBorderToRollover->else->setBorderToNonRollover
BasicToolBarUI.Handler#componentRemoved(ContainerEvent)::: handler component removed:::c->evt->getChild->if->c->removeFocusListener->setBorderToNormal
BasicToolBarUI.Handler#focusGained(FocusEvent)::: handler focus gained:::c->evt->getComponent->toolBar->getComponentIndex
BasicToolBarUI.Handler#focusLost(FocusEvent)::: handler focus lost:::
BasicToolBarUI.Handler#mousePressed(MouseEvent)::: handler mouse pressed:::if->tb->isEnabled->return
BasicToolBarUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->tb->isEnabled->return->if->position->evt->getPoint->if->evt->getComponent->getLocationOnScreen->floatAt
BasicToolBarUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::if->tb->isEnabled->return->position->evt->getPoint->if->evt->getComponent->getLocationOnScreen->dragTo
BasicToolBarUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicToolBarUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicToolBarUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicToolBarUI.Handler#mouseMoved(MouseEvent)::: handler mouse moved:::
BasicToolBarUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::propertyName->evt->getPropertyName->if->toolBar->updateUI->else->if->components->toolBar->getComponents->orientation->evt->getNewValue->intValue->separator->for->i->else->if->installNormalBorders->evt->getNewValue->booleanValue->setRolloverBorders
BasicToolBarUI.FrameListener#windowClosing(WindowEvent)::: frame listener window closing:::if->toolBar->isFloatable->if->dragWindow->setVisible->if->createFloatingWindow->if->setVisible->floatingToolBar->getContentPane->remove->constraint->if->toolBar->getOrientation->if->else->if->if->toolBar->getParent->if->UIManager->removePropertyChangeListener->dockingSource->add->dockingSource->invalidate->dockingSourceParent->dockingSource->getParent->if->dockingSourceParent->validate->dockingSource->repaint
BasicToolBarUI.ToolBarContListener#componentAdded(ContainerEvent)::: tool bar cont listener component added:::getHandler->componentAdded
BasicToolBarUI.ToolBarContListener#componentRemoved(ContainerEvent)::: tool bar cont listener component removed:::getHandler->componentRemoved
BasicToolBarUI.ToolBarFocusListener#focusGained(FocusEvent)::: tool bar focus listener focus gained:::getHandler->focusGained
BasicToolBarUI.ToolBarFocusListener#focusLost(FocusEvent)::: tool bar focus listener focus lost:::getHandler->focusLost
BasicToolBarUI.PropertyListener#propertyChange(PropertyChangeEvent)::: property listener property change:::getHandler->propertyChange
BasicToolBarUI.DockingListener#mouseClicked(MouseEvent)::: docking listener mouse clicked:::getHandler->mouseClicked
BasicToolBarUI.DockingListener#mousePressed(MouseEvent)::: docking listener mouse pressed:::getHandler->getHandler->mousePressed->getHandler
BasicToolBarUI.DockingListener#mouseReleased(MouseEvent)::: docking listener mouse released:::getHandler->getHandler->getHandler->getHandler->mouseReleased->getHandler->getHandler
BasicToolBarUI.DockingListener#mouseEntered(MouseEvent)::: docking listener mouse entered:::getHandler->mouseEntered
BasicToolBarUI.DockingListener#mouseExited(MouseEvent)::: docking listener mouse exited:::getHandler->mouseExited
BasicToolBarUI.DockingListener#mouseDragged(MouseEvent)::: docking listener mouse dragged:::getHandler->getHandler->getHandler->mouseDragged->getHandler->getHandler
BasicToolBarUI.DockingListener#mouseMoved(MouseEvent)::: docking listener mouse moved:::getHandler->mouseMoved
BasicToolBarUI.DragWindow#getOrientation():::Returns the orientation of the toolbar window when the toolbar is floating:::return
BasicToolBarUI.DragWindow#setOrientation(int):::Sets the orientation.:::if->isShowing->if->return->size->getSize->new->Dimension->setSize->if->if->BasicGraphicsUtils->isLeftToRight->new->Point->setOffset->else->if->new->Point->setOffset->else->new->Point->setOffset->repaint
BasicToolBarUI.DragWindow#getOffset():::Returns the offset.:::return
BasicToolBarUI.DragWindow#setOffset(Point):::Sets the offset.:::
BasicToolBarUI.DragWindow#setBorderColor(Color):::Sets the border color.:::if->return->repaint
BasicToolBarUI.DragWindow#getBorderColor():::Returns the border color.:::return
BasicToolBarUI.DragWindow#paint(Graphics)::: drag window paint:::paintDragWindow->super->paint
BasicToolBarUI.DragWindow#getInsets()::: drag window get insets:::return->new->Insets
BasicToolTipUI#createUI(JComponent):::Returns the instance of BasicToolTipUI.:::return
BasicToolTipUI#installUI(JComponent)::: basic tool tip i install i:::installDefaults->installComponents->installListeners
BasicToolTipUI#uninstallUI(JComponent)::: basic tool tip i uninstall i:::uninstallDefaults->uninstallComponents->uninstallListeners
BasicToolTipUI#installDefaults(JComponent):::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->componentChanged
BasicToolTipUI#uninstallDefaults(JComponent):::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicToolTipUI#installComponents(JComponent)::: basic tool tip i install components:::BasicHTML->getTipText->updateRenderer
BasicToolTipUI#uninstallComponents(JComponent)::: basic tool tip i uninstall components:::BasicHTML->updateRenderer
BasicToolTipUI#installListeners(JComponent):::Registers listeners.:::createPropertyChangeListener->c->addPropertyChangeListener
BasicToolTipUI#uninstallListeners(JComponent):::Unregisters listeners.:::c->removePropertyChangeListener
BasicToolTipUI#createPropertyChangeListener(JComponent)::: basic tool tip i create property change listener:::if->new->PropertyChangeHandler->return
BasicToolTipUI#paint(Graphics, JComponent)::: basic tool tip i paint:::font->c->getFont->metrics->SwingUtilities2->getFontMetrics->size->c->getSize->g->c->getForeground->setColor->tipText->getTipText->if->insets->c->getInsets->paintTextR->new->Rectangle->v->c->getClientProperty->if->v->paint->else->g->setFont->SwingUtilities2->metrics->getAscent->drawString
BasicToolTipUI#getPreferredSize(JComponent)::: basic tool tip i get preferred size:::font->c->getFont->fm->c->getFontMetrics->insets->c->getInsets->prefSize->new->Dimension->text->getTipText->if->text->equals->else->v->c->getClientProperty->if->v->getPreferredSpan->v->getPreferredSpan->else->SwingUtilities2->stringWidth->fm->getHeight->return
BasicToolTipUI#getMinimumSize(JComponent)::: basic tool tip i get minimum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getPreferredSpan->v->getMinimumSpan->return
BasicToolTipUI#getMaximumSize(JComponent)::: basic tool tip i get maximum size:::d->getPreferredSize->v->c->getClientProperty->if->v->getMaximumSpan->v->getPreferredSpan->return
BasicToolTipUI#componentChanged(JComponent):::Invoked when the JCompoment associated with the JToolTip has changed, or at initialization time:::comp->getComponent->if->comp->isEnabled->if->UIManager->getBorder->LookAndFeel->installBorder->else->LookAndFeel->installBorder->if->UIManager->getColor->LookAndFeel->installColors->else->LookAndFeel->installColors->else->LookAndFeel->installBorder->LookAndFeel->installColors
BasicToolTipUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::name->e->getPropertyName->if->name->equals->equals->equals->SwingUtilities2->isScaleChanged->tip->e->getSource->text->tip->getTipText->BasicHTML->updateRenderer->else->if->equals->tip->e->getSource->if->tip->getUI->tip->getUI->componentChanged
BasicTransferable#getTransferDataFlavors():::Returns an array of DataFlavor objects indicating the flavors the data can be provided in:::richerFlavors->getRicherFlavors->nRicher->nHTML->isHTMLSupported->nPlain->isPlainSupported->nString->isPlainSupported->nFlavors->flavors->new->DataFlavorArr->nDone->if->System->arraycopy->if->System->arraycopy->if->System->arraycopy->if->System->arraycopy->return
BasicTransferable#isDataFlavorSupported(DataFlavor):::Returns whether or not the specified data flavor is supported for this object.:::flavors->getTransferDataFlavors->for->i->return
BasicTransferable#getTransferData(DataFlavor):::Returns an object which represents the data to be transferred:::richerFlavors->getRicherFlavors->if->isRicherFlavor->return->getRicherData->else->if->isHTMLFlavor->data->getHTMLData->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->createInputStream->else->if->isPlainFlavor->data->getPlainData->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->createInputStream->else->if->isStringFlavor->data->getPlainData->return->throw->new->UnsupportedFlavorException
BasicTransferable#createInputStream(DataFlavor, String)::: basic transferable create input stream:::cs->DataFlavorUtil->getTextCharset->if->throw->new->UnsupportedFlavorException->return->data->getBytes->new->ByteArrayInputStream
BasicTransferable#isRicherFlavor(DataFlavor)::: basic transferable is richer flavor:::richerFlavors->getRicherFlavors->nFlavors->for->i->return
BasicTransferable#getRicherFlavors():::Some subclasses will have flavors that are more descriptive than HTML or plain text:::return
BasicTransferable#getRicherData(DataFlavor)::: basic transferable get richer data:::return
BasicTransferable#isHTMLFlavor(DataFlavor):::Returns whether or not the specified data flavor is an HTML flavor that is supported.:::flavors->for->i->return
BasicTransferable#isHTMLSupported():::Should the HTML flavors be offered?  If so, the method getHTMLData should be implemented to provide something reasonable.:::return
BasicTransferable#getHTMLData():::Fetch the data in a text/html format:::return
BasicTransferable#isPlainFlavor(DataFlavor):::Returns whether or not the specified data flavor is an plain flavor that is supported.:::flavors->for->i->return
BasicTransferable#isPlainSupported():::Should the plain text flavors be offered?  If so, the method getPlainData should be implemented to provide something reasonable.:::return
BasicTransferable#getPlainData():::Fetch the data in a text/plain format.:::return
BasicTransferable#isStringFlavor(DataFlavor):::Returns whether or not the specified data flavor is a String flavor that is supported.:::flavors->for->i->return
BasicTreeUI#createUI(JComponent):::Constructs a new instance of BasicTreeUI.:::return->new->BasicTreeUI
BasicTreeUI#loadActionMap(LazyActionMap)::: basic tree i load action map:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->TransferHandler->getCutAction->put->map->TransferHandler->getCopyAction->put->map->TransferHandler->getPasteAction->put
BasicTreeUI#getHashColor():::Returns the hash color.:::return
BasicTreeUI#setHashColor(Color):::Sets the hash color.:::
BasicTreeUI#setLeftChildIndent(int):::Sets the left child indent.:::if->treeState->invalidateSizes->updateSize
BasicTreeUI#getLeftChildIndent():::Returns the left child indent.:::return
BasicTreeUI#setRightChildIndent(int):::Sets the right child indent.:::if->treeState->invalidateSizes->updateSize
BasicTreeUI#getRightChildIndent():::Returns the right child indent.:::return
BasicTreeUI#setExpandedIcon(Icon):::Sets the expanded icon.:::
BasicTreeUI#getExpandedIcon():::Returns the expanded icon.:::return
BasicTreeUI#setCollapsedIcon(Icon):::Sets the collapsed icon.:::
BasicTreeUI#getCollapsedIcon():::Returns the collapsed icon.:::return
BasicTreeUI#setLargeModel(boolean):::Updates the componentListener, if necessary.:::if->getRowHeight->if->completeEditing->createLayoutCache->configureLayoutCache->updateLayoutCacheExpandedNodesIfNecessary->updateSize
BasicTreeUI#isLargeModel():::Returns true if large model is set.:::return
BasicTreeUI#setRowHeight(int):::Sets the row height, this is forwarded to the treeState.:::completeEditing->if->tree->isLargeModel->setLargeModel->treeState->setRowHeight->updateSize
BasicTreeUI#getRowHeight():::Returns the row height.:::return->tree->getRowHeight
BasicTreeUI#setCellRenderer(TreeCellRenderer):::Sets the TreeCellRenderer to tcr:::completeEditing->updateRenderer->if->treeState->invalidateSizes->updateSize
BasicTreeUI#getCellRenderer():::Return currentCellRenderer, which will either be the trees renderer, or defaultCellRenderer, which ever wasn't null.:::return
BasicTreeUI#setModel(TreeModel):::Sets the TreeModel.:::completeEditing->if->treeModel->removeTreeModelListener->if->if->treeModel->addTreeModelListener->if->treeState->setModel->updateLayoutCacheExpandedNodesIfNecessary->updateSize
BasicTreeUI#getModel():::Returns the tree model.:::return
BasicTreeUI#setRootVisible(boolean):::Sets the root to being visible.:::completeEditing->updateDepthOffset->if->treeState->setRootVisible->treeState->invalidateSizes->updateSize
BasicTreeUI#isRootVisible():::Returns true if the tree root is visible.:::return->tree->isRootVisible
BasicTreeUI#setShowsRootHandles(boolean):::Determines whether the node handles are to be displayed.:::completeEditing->updateDepthOffset->if->treeState->invalidateSizes->updateSize
BasicTreeUI#getShowsRootHandles():::Returns true if the root handles are to be displayed.:::return->tree->getShowsRootHandles
BasicTreeUI#setCellEditor(TreeCellEditor):::Sets the cell editor.:::updateCellEditor
BasicTreeUI#getCellEditor():::Returns an instance of TreeCellEditor.:::return->tree->getCellEditor
BasicTreeUI#setEditable(boolean):::Configures the receiver to allow, or not allow, editing.:::updateCellEditor
BasicTreeUI#isEditable():::Returns true if the tree is editable.:::return->tree->isEditable
BasicTreeUI#setSelectionModel(TreeSelectionModel):::Resets the selection model:::completeEditing->if->treeSelectionModel->removePropertyChangeListener->if->treeSelectionModel->removeTreeSelectionListener->if->if->treeSelectionModel->addPropertyChangeListener->if->treeSelectionModel->addTreeSelectionListener->if->treeState->setSelectionModel->else->if->treeState->setSelectionModel->if->tree->repaint
BasicTreeUI#getSelectionModel():::Returns the tree selection model.:::return
BasicTreeUI#getPathBounds(JTree, TreePath):::Returns the Rectangle enclosing the label portion that the last item in path will be drawn into:::if->return->tree->getInsets->new->Rectangle->getPathBounds->return
BasicTreeUI#getPathBounds(TreePath, Insets, Rectangle)::: basic tree i get path bounds:::treeState->getBounds->if->if->else->tree->getWidth->return
BasicTreeUI#getPathForRow(JTree, int):::Returns the path for passed in row:::return->treeState->getPathForRow
BasicTreeUI#getRowForPath(JTree, TreePath):::Returns the row that the last item identified in path is visible at:::return->treeState->getRowForPath
BasicTreeUI#getRowCount(JTree):::Returns the number of rows that are being displayed.:::return->treeState->getRowCount
BasicTreeUI#getClosestPathForLocation(JTree, int, int):::Returns the path to the node that is closest to x,y:::if->tree->getInsets->return->treeState->getPathClosestTo->return
BasicTreeUI#isEditing(JTree):::Returns true if the tree is being edited:::return
BasicTreeUI#stopEditing(JTree):::Stops the current editing session:::if->cellEditor->stopCellEditing->completeEditing->return->return
BasicTreeUI#cancelEditing(JTree):::Cancels the current editing session.:::if->completeEditing
BasicTreeUI#startEditingAtPath(JTree, TreePath):::Selects the last item in path and tries to edit it:::tree->scrollPathToVisible->if->tree->isVisible->startEditing
BasicTreeUI#getEditingPath(JTree):::Returns the path to the element that is being edited.:::return
BasicTreeUI#installUI(JComponent)::: basic tree i install i:::if->throw->new->NullPointerException->prepareForUIInstall->installDefaults->installKeyboardActions->installComponents->installListeners->completeUIInstall
BasicTreeUI#prepareForUIInstall():::Invoked after the tree instance variable has been set, but before any defaults/listeners have been installed.:::new->Hashtable<TreePath,Boolean>->BasicGraphicsUtils->isLeftToRight->new->Dimension->tree->isLargeModel->if->getRowHeight->tree->getModel->setModel
BasicTreeUI#completeUIInstall():::Invoked from installUI after all the defaults/listeners have been installed.:::this->tree->getShowsRootHandles->setShowsRootHandles->updateRenderer->updateDepthOffset->tree->getSelectionModel->setSelectionModel->createLayoutCache->configureLayoutCache->updateSize
BasicTreeUI#installDefaults():::Installs default properties.:::if->tree->getBackground->tree->getBackground->tree->UIManager->getColor->setBackground->if->getHashColor->getHashColor->UIManager->getColor->setHashColor->if->tree->getFont->tree->getFont->tree->UIManager->getFont->setFont->UIManager->get->setExpandedIcon->UIManager->get->setCollapsedIcon->UIManager->get->intValue->setLeftChildIndent->UIManager->get->intValue->setRightChildIndent->LookAndFeel->UIManager->get->installProperty->tree->isLargeModel->tree->getRowHeight->scrollsOnExpand->UIManager->get->if->LookAndFeel->installProperty->UIManager->getBoolean->UIManager->getBoolean->l->UIManager->get->l->longValue->showsRootHandles->UIManager->get->if->LookAndFeel->installProperty
BasicTreeUI#installListeners():::Registers listeners.:::if->createPropertyChangeListener->tree->addPropertyChangeListener->if->createMouseListener->tree->addMouseListener->if->tree->addMouseMotionListener->if->createFocusListener->tree->addFocusListener->if->createKeyListener->tree->addKeyListener->if->createTreeExpansionListener->tree->addTreeExpansionListener->if->createTreeModelListener->treeModel->addTreeModelListener->if->createSelectionModelPropertyChangeListener->treeSelectionModel->addPropertyChangeListener->if->createTreeSelectionListener->treeSelectionModel->addTreeSelectionListener->th->tree->getTransferHandler->if->tree->setTransferHandler->if->tree->getDropTarget->tree->setDropTarget->LookAndFeel->installProperty
BasicTreeUI#installKeyboardActions():::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicTreeUI#getInputMap(int)::: basic tree i get input map:::if->return->DefaultLookup->get->else->if->keyMap->DefaultLookup->get->rtlKeyMap->if->tree->getComponentOrientation->isLeftToRight->DefaultLookup->get->return->else->rtlKeyMap->setParent->return->return
BasicTreeUI#installComponents():::Intalls the subcomponents of the tree, which is the renderer pane.:::if->createCellRendererPane->tree->add
BasicTreeUI#createNodeDimensions():::Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree.:::return->new->NodeDimensionsHandler
BasicTreeUI#createPropertyChangeListener():::Creates a listener that is responsible that updates the UI based on how the tree changes.:::return->getHandler
BasicTreeUI#getHandler()::: basic tree i get handler:::if->new->Handler->return
BasicTreeUI#createMouseListener():::Creates the listener responsible for updating the selection based on mouse events.:::return->getHandler
BasicTreeUI#createFocusListener():::Creates a listener that is responsible for updating the display when focus is lost/gained.:::return->getHandler
BasicTreeUI#createKeyListener():::Creates the listener responsible for getting key events from the tree.:::return->getHandler
BasicTreeUI#createSelectionModelPropertyChangeListener():::Creates the listener responsible for getting property change events from the selection model.:::return->getHandler
BasicTreeUI#createTreeSelectionListener():::Creates the listener that updates the display based on selection change methods.:::return->getHandler
BasicTreeUI#createCellEditorListener():::Creates a listener to handle events from the current editor.:::return->getHandler
BasicTreeUI#createComponentListener():::Creates and returns a new ComponentHandler:::return->new->ComponentHandler
BasicTreeUI#createTreeExpansionListener():::Creates and returns the object responsible for updating the treestate when nodes expanded state changes.:::return->getHandler
BasicTreeUI#createLayoutCache():::Creates the object responsible for managing what is expanded, as well as the size of nodes.:::if->isLargeModel->getRowHeight->return->new->FixedHeightLayoutCache->return->new->VariableHeightLayoutCache
BasicTreeUI#createCellRendererPane():::Returns the renderer pane that renderer components are placed in.:::return->new->CellRendererPane
BasicTreeUI#createDefaultCellEditor():::Creates a default cell editor.:::if->editor->new->DefaultTreeCellEditor->return->return->new->DefaultTreeCellEditor
BasicTreeUI#createDefaultCellRenderer():::Returns the default cell renderer that is used to do the stamping of each node.:::return->new->DefaultTreeCellRenderer
BasicTreeUI#createTreeModelListener():::Returns a listener that can update the tree when the model changes.:::return->getHandler
BasicTreeUI#uninstallUI(JComponent)::: basic tree i uninstall i:::completeEditing->prepareForUIUninstall->uninstallDefaults->uninstallListeners->uninstallKeyboardActions->uninstallComponents->completeUIUninstall
BasicTreeUI#prepareForUIUninstall():::Invoked before unstallation of UI.:::
BasicTreeUI#completeUIUninstall():::Uninstalls UI.:::if->tree->setCellRenderer->if->tree->setCellEditor->setSelectionModel
BasicTreeUI#uninstallDefaults():::Uninstalls default properties.:::if->tree->getTransferHandler->tree->setTransferHandler
BasicTreeUI#uninstallListeners():::Unregisters listeners.:::if->tree->removeComponentListener->if->tree->removePropertyChangeListener->if->tree->removeMouseListener->if->tree->removeMouseMotionListener->if->tree->removeFocusListener->if->tree->removeKeyListener->if->tree->removeTreeExpansionListener->if->treeModel->removeTreeModelListener->if->treeSelectionModel->removePropertyChangeListener->if->treeSelectionModel->removeTreeSelectionListener
BasicTreeUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap
BasicTreeUI#uninstallComponents():::Uninstalls the renderer pane.:::if->tree->remove
BasicTreeUI#redoTheLayout():::Recomputes the right margin, and invalidates any tree states:::if->treeState->invalidateSizes
BasicTreeUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->tcr->createDefaultCellRenderer->tcr->getTreeCellRendererComponent->lafDefaults->put->rowHeight->tree->getRowHeight->baseline->if->renderer->getBaseline->else->pref->renderer->getPreferredSize->renderer->getBaseline->return->tree->getInsets
BasicTreeUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTreeUI#paint(Graphics, JComponent)::: basic tree i paint:::if->throw->new->InternalError->if->return->paintBounds->g->getClipBounds->insets->tree->getInsets->initialPath->getClosestPathForLocation->paintingEnumerator->treeState->getVisiblePathsFrom->row->treeState->getRowForPath->endY->drawingCache->clear->if->parentPath->parentPath->getParentPath->while->paintVerticalPartOfLeg->drawingCache->put->parentPath->getParentPath->done->isExpanded->hasBeenExpanded->isLeaf->boundsBuffer->new->Rectangle->bounds->path->rootVisible->isRootVisible->while->paintingEnumerator->hasMoreElements->paintingEnumerator->nextElement->if->treeModel->path->getLastPathComponent->isLeaf->if->else->treeState->getExpandedState->tree->hasBeenExpanded->getPathBounds->if->return->path->getParentPath->if->if->drawingCache->get->paintVerticalPartOfLeg->drawingCache->put->paintHorizontalPartOfLeg->else->if->paintHorizontalPartOfLeg->if->shouldPaintExpandControl->paintExpandControl->paintRow->if->else->paintDropLine->rendererPane->removeAll->drawingCache->clear
BasicTreeUI#isDropLine(JTree.DropLocation):::Tells if a DropLocation should be indicated by a line between nodes:::return->loc->getPath->loc->getChildIndex
BasicTreeUI#paintDropLine(Graphics):::Paints the drop line.:::loc->tree->getDropLocation->if->isDropLine->return->c->UIManager->getColor->if->g->setColor->rect->getDropLineRect->g->fillRect
BasicTreeUI#getDropLineRect(JTree.DropLocation):::Returns a unbounding box for the drop line.:::rect->path->loc->getPath->index->loc->getChildIndex->ltr->insets->tree->getInsets->if->tree->getRowCount->tree->getWidth->new->Rectangle->else->model->getModel->root->model->getRoot->if->path->getLastPathComponent->model->getChildCount->tree->tree->getRowCount->getRowBounds->xRect->if->tree->isRootVisible->tree->getRowBounds->else->if->model->getChildCount->tree->getRowBounds->else->lastChildPath->path->model->model->getChildCount->getChild->pathByAddingChild->tree->getPathBounds->else->if->model->path->getLastPathComponent->getChildCount->tree->path->model->path->getLastPathComponent->getChild->pathByAddingChild->getPathBounds->else->tree->path->model->path->getLastPathComponent->getChild->pathByAddingChild->getPathBounds->if->if->return
BasicTreeUI#paintHorizontalPartOfLeg(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the horizontal part of the leg:::if->return->depth->path->getPathCount->if->isRootVisible->getShowsRootHandles->return->clipLeft->clipRight->clipTop->clipBottom->lineY->if->leftX->getRightChildIndent->nodeX->getHorizontalLegBuffer->if->g->getHashColor->setColor->paintHorizontalLine->else->nodeX->getHorizontalLegBuffer->rightX->getRightChildIndent->if->g->getHashColor->setColor->paintHorizontalLine
BasicTreeUI#paintVerticalPartOfLeg(Graphics, Rectangle, Insets, TreePath):::Paints the vertical part of the leg:::if->return->depth->path->getPathCount->if->getShowsRootHandles->isRootVisible->return->lineX->getRowX->if->getRightChildIndent->else->tree->getWidth->getRightChildIndent->clipLeft->clipRight->if->clipTop->clipBottom->parentBounds->getPathBounds->lastChildBounds->getLastChildPath->getPathBounds->if->return->top->if->Math->getVerticalLegBuffer->max->else->Math->getVerticalLegBuffer->max->if->isRootVisible->model->getModel->if->root->model->getRoot->if->model->getChildCount->path->model->getChild->pathByAddingChild->getPathBounds->if->Math->getVerticalLegBuffer->max->bottom->Math->min->if->g->getHashColor->setColor->paintVerticalLine
BasicTreeUI#paintExpandControl(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the expand (toggle) part of a row:::value->path->getLastPathComponent->if->treeModel->getChildCount->middleXOfKnob->if->getRightChildIndent->else->getRightChildIndent->middleYOfKnob->if->expandedIcon->getExpandedIcon->if->drawCentered->else->collapsedIcon->getCollapsedIcon->if->drawCentered
BasicTreeUI#paintRow(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the renderer part of a row:::if->return->leadIndex->if->tree->hasFocus->getLeadSelectionRow->else->component->currentCellRenderer->path->getLastPathComponent->tree->isRowSelected->getTreeCellRendererComponent->rendererPane->paintComponent
BasicTreeUI#shouldPaintExpandControl(TreePath, int, boolean, boolean, boolean):::Returns true if the expand (toggle) control should be drawn for the specified row.:::if->return->depth->path->getPathCount->if->isRootVisible->getShowsRootHandles->return->return
BasicTreeUI#paintVerticalLine(Graphics, JComponent, int, int, int):::Paints a vertical line.:::if->drawDashedVerticalLine->else->g->drawLine
BasicTreeUI#paintHorizontalLine(Graphics, JComponent, int, int, int):::Paints a horizontal line.:::if->drawDashedHorizontalLine->else->g->drawLine
BasicTreeUI#getVerticalLegBuffer():::The vertical element of legs between nodes starts at the bottom of the parent node by default:::return
BasicTreeUI#getHorizontalLegBuffer():::The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default:::return
BasicTreeUI#findCenteredX(int, int)::: basic tree i find centered x:::return->Math->ceil->Math->floor
BasicTreeUI#drawCentered(Component, Graphics, Icon, int, int):::Draws the icon centered at (x,y).:::icon->icon->getIconWidth->findCenteredX->icon->getIconHeight->paintIcon
BasicTreeUI#drawDashedHorizontalLine(Graphics, int, int, int):::Draws a horizontal dashed line:::drawDashedLine
BasicTreeUI#drawDashedVerticalLine(Graphics, int, int, int):::Draws a vertical dashed line:::drawDashedLine
BasicTreeUI#drawDashedLine(Graphics, int, int, int, boolean)::: basic tree i draw dashed line:::if->return->g2d->oldStroke->g2d->getStroke->dashedStroke->new->floatArr->new->BasicStroke->g2d->setStroke->if->g2d->drawLine->else->g2d->drawLine->g2d->setStroke
BasicTreeUI#getRowX(int, int):::Returns the location, along the x-axis, to render a particular row at:::return
BasicTreeUI#updateLayoutCacheExpandedNodes():::Makes all the nodes that are expanded in JTree expanded in LayoutCache:::if->treeModel->getRoot->treeModel->getRoot->new->TreePath->updateExpandedDescendants
BasicTreeUI#updateLayoutCacheExpandedNodesIfNecessary()::: basic tree i update layout cache expanded nodes if necessary:::if->treeModel->getRoot->rootPath->treeModel->getRoot->new->TreePath->if->tree->isExpanded->updateLayoutCacheExpandedNodes->else->treeState->setExpandedState
BasicTreeUI#updateExpandedDescendants(TreePath):::Updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state.:::completeEditing->if->treeState->setExpandedState->descendants->tree->getExpandedDescendants->if->while->descendants->hasMoreElements->descendants->nextElement->treeState->setExpandedState->updateLeadSelectionRow->updateSize
BasicTreeUI#getLastChildPath(TreePath):::Returns a path to the last child of parent.:::if->childCount->treeModel->parent->getLastPathComponent->getChildCount->if->return->parent->treeModel->parent->getLastPathComponent->getChild->pathByAddingChild->return
BasicTreeUI#updateDepthOffset():::Updates how much each depth should be offset by.:::if->isRootVisible->if->getShowsRootHandles->else->else->if->getShowsRootHandles->else
BasicTreeUI#updateCellEditor():::Updates the cellEditor based on the editability of the JTree that we're contained in:::newEditor->completeEditing->if->else->if->tree->isEditable->tree->getCellEditor->if->createDefaultCellEditor->if->tree->setCellEditor->else->if->if->cellEditor->removeCellEditorListener->if->createCellEditorListener->if->newEditor->addCellEditorListener
BasicTreeUI#updateRenderer():::Messaged from the tree we're in when the renderer has changed.:::if->newCellRenderer->tree->getCellRenderer->if->tree->createDefaultCellRenderer->setCellRenderer->else->if->tree->setCellEditor->else->updateCellEditor
BasicTreeUI#configureLayoutCache():::Resets the TreeState instance based on the tree we're providing the look and feel for.:::if->if->createNodeDimensions->treeState->setNodeDimensions->treeState->tree->isRootVisible->setRootVisible->treeState->tree->getRowHeight->setRowHeight->treeState->getSelectionModel->setSelectionModel->if->treeState->getModel->tree->getModel->treeState->tree->getModel->setModel->updateLayoutCacheExpandedNodesIfNecessary->if->isLargeModel->if->createComponentListener->if->tree->addComponentListener->else->if->tree->removeComponentListener->else->if->tree->removeComponentListener
BasicTreeUI#updateSize():::Marks the cached size as being invalid, and messages the tree with treeDidChange.:::tree->treeDidChange
BasicTreeUI#updateSize0()::: basic tree i update size0:::tree->revalidate
BasicTreeUI#updateCachedPreferredSize():::Updates the preferredSize instance variable, which is returned from getPreferredSize(). For left to right orientations, the size is determined from the current AbstractLayoutCache:::if->i->tree->getInsets->if->isLargeModel->visRect->tree->getVisibleRect->if->tree->getVisibleRowCount->tree->getRowHeight->tree->getVisibleRowCount->else->component->SwingUtilities->getUnwrappedParent->if->component->getParent->if->pane->bar->pane->getHorizontalScrollBar->if->bar->isVisible->height->bar->getHeight->treeState->getPreferredWidth->else->treeState->getPreferredWidth->treeState->getPreferredHeight
BasicTreeUI#pathWasExpanded(TreePath):::Messaged from the VisibleTreeNode after it has been expanded.:::if->tree->fireTreeExpanded
BasicTreeUI#pathWasCollapsed(TreePath):::Messaged from the VisibleTreeNode after it has collapsed.:::if->tree->fireTreeCollapsed
BasicTreeUI#ensureRowsAreVisible(int, int):::Ensures that the rows identified by beginRow through endRow are visible.:::if->getRowCount->scrollVert->DefaultLookup->getBoolean->if->scrollBounds->getPathForRow->getPathBounds->if->if->tree->getVisibleRect->tree->scrollRectToVisible->else->beginRect->getPathForRow->getPathBounds->if->visRect->tree->getVisibleRect->testRect->beginY->maxY->for->counter->tree->new->Rectangle->scrollRectToVisible
BasicTreeUI#setPreferredMinSize(Dimension):::Sets the preferred minimum size.:::
BasicTreeUI#getPreferredMinSize():::Returns the minimum preferred size.:::if->return->return->new->Dimension
BasicTreeUI#getPreferredSize(JComponent):::Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, true).:::return->getPreferredSize
BasicTreeUI#getPreferredSize(JComponent, boolean):::Returns the preferred size to represent the tree in c:::pSize->this->getPreferredMinSize->if->updateCachedPreferredSize->if->if->return->Math->max->Math->max->new->Dimension->return->new->Dimension->else->if->return->else->return->new->Dimension
BasicTreeUI#getMinimumSize(JComponent):::Returns the minimum size for this component:::if->this->getPreferredMinSize->return->this->getPreferredMinSize->return->new->Dimension
BasicTreeUI#getMaximumSize(JComponent):::Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0.:::if->return->getPreferredSize->if->this->getPreferredMinSize->return->this->getPreferredMinSize->return->new->Dimension
BasicTreeUI#completeEditing():::Messages to stop the editing session:::if->tree->getInvokesStopCellEditing->cellEditor->stopCellEditing->completeEditing
BasicTreeUI#completeEditing(boolean, boolean, boolean):::Stops the editing session:::if->oldComponent->oldPath->oldEditor->newValue->oldEditor->getCellEditorValue->editingBounds->getPathBounds->requestFocus->tree->hasFocus->SwingUtilities->findFocusOwner->if->oldEditor->stopCellEditing->else->if->oldEditor->cancelCellEditing->tree->remove->if->treeState->invalidatePathBounds->updateSize->else->if->tree->getSize->tree->repaint->if->tree->requestFocus->if->treeModel->valueForPathChanged
BasicTreeUI#startEditingOnRelease(TreePath, MouseEvent, MouseEvent)::: basic tree i start editing on release:::try->return->startEditing->catch->finally
BasicTreeUI#startEditing(TreePath, MouseEvent):::Will start editing for node if there is a cellEditor and shouldSelectCell returns true. This assumes that path is valid and visible.:::if->isEditing->tree->getInvokesStopCellEditing->stopEditing->return->completeEditing->if->tree->isPathEditable->row->getRowForPath->if->cellEditor->isCellEditable->cellEditor->path->getLastPathComponent->tree->isPathSelected->tree->isExpanded->treeModel->path->getLastPathComponent->isLeaf->getTreeCellEditorComponent->nodeBounds->getPathBounds->if->return->editorSize->editingComponent->getPreferredSize->if->getRowHeight->getRowHeight->if->treeState->invalidatePathBounds->updateSize->getPathBounds->if->return->else->tree->add->editingComponent->setBounds->AWTAccessor->getComponentAccessor->revalidateSynchronously->editingComponent->repaint->if->cellEditor->shouldSelectCell->tree->setSelectionRow->focusedComponent->SwingUtilities2->compositeRequestFocus->selectAll->if->componentPoint->SwingUtilities->event->getX->event->getY->new->Point->convertPoint->activeComponent->SwingUtilities->getDeepestComponentAt->if->handler->new->MouseInputHandler->if->handler->mouseReleased->if->selectAll->return->else->return
BasicTreeUI#checkForClickInExpandControl(TreePath, int, int):::If the mouseX and mouseY are in the expand/collapse region of the row, this will toggle the row.:::if->isLocationInExpandControl->handleExpandControlClick
BasicTreeUI#isLocationInExpandControl(TreePath, int, int):::Returns true if mouseX and mouseY fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf.:::if->treeModel->path->getLastPathComponent->isLeaf->boxWidth->i->tree->getInsets->if->getExpandedIcon->getExpandedIcon->getIconWidth->else->boxLeftX->tree->getRowForPath->path->getPathCount->getRowX->if->getRightChildIndent->else->tree->getWidth->getRightChildIndent->findCenteredX->return->return
BasicTreeUI#handleExpandControlClick(TreePath, int, int):::Messaged when the user clicks the particular row, this invokes toggleExpandState.:::toggleExpandState
BasicTreeUI#toggleExpandState(TreePath):::Expands path if it is not expanded, or collapses row if it is expanded:::if->tree->isExpanded->row->getRowForPath->tree->expandPath->updateSize->if->if->tree->getScrollsOnExpand->treeState->getVisibleChildCount->ensureRowsAreVisible->else->ensureRowsAreVisible->else->tree->collapsePath->updateSize
BasicTreeUI#isToggleSelectionEvent(MouseEvent):::Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse.:::return->SwingUtilities->isLeftMouseButton->BasicGraphicsUtils->isMenuShortcutKeyDown
BasicTreeUI#isMultiSelectEvent(MouseEvent):::Returning true signifies a mouse event on the node should select from the anchor point.:::return->SwingUtilities->isLeftMouseButton->event->isShiftDown
BasicTreeUI#isToggleEvent(MouseEvent):::Returning true indicates the row under the mouse should be toggled based on the event:::if->SwingUtilities->isLeftMouseButton->return->clickCount->tree->getToggleClickCount->if->return->return->event->getClickCount
BasicTreeUI#selectPathForEvent(TreePath, MouseEvent):::Messaged to update the selection based on a MouseEvent over a particular row:::if->isMultiSelectEvent->anchor->getAnchorSelectionPath->anchorRow->getRowForPath->if->tree->getSelectionModel->getSelectionMode->tree->setSelectionPath->else->row->getRowForPath->lastAnchorPath->if->isToggleSelectionEvent->if->tree->isRowSelected->tree->addSelectionInterval->else->tree->removeSelectionInterval->tree->addSelectionInterval->else->if->tree->setSelectionInterval->else->tree->setSelectionInterval->setAnchorSelectionPath->setLeadSelectionPath->else->if->isToggleSelectionEvent->if->tree->isPathSelected->tree->removeSelectionPath->else->tree->addSelectionPath->getRowForPath->setAnchorSelectionPath->setLeadSelectionPath->else->if->SwingUtilities->isLeftMouseButton->tree->setSelectionPath->if->isToggleEvent->toggleExpandState
BasicTreeUI#isLeaf(int):::Returns true if the node at row is a leaf.:::path->getPathForRow->if->return->treeModel->path->getLastPathComponent->isLeaf->return
BasicTreeUI#setAnchorSelectionPath(TreePath)::: basic tree i set anchor selection path:::try->tree->setAnchorSelectionPath->catch->finally
BasicTreeUI#getAnchorSelectionPath()::: basic tree i get anchor selection path:::return->tree->getAnchorSelectionPath
BasicTreeUI#setLeadSelectionPath(TreePath)::: basic tree i set lead selection path:::setLeadSelectionPath
BasicTreeUI#setLeadSelectionPath(TreePath, boolean)::: basic tree i set lead selection path:::bounds->getLeadSelectionPath->getPathBounds->try->tree->setLeadSelectionPath->catch->finally->getRowForPath->if->if->tree->getRepaintPathBounds->repaint->getPathBounds->if->tree->getRepaintPathBounds->repaint
BasicTreeUI#getRepaintPathBounds(Rectangle)::: basic tree i get repaint path bounds:::if->UIManager->getBoolean->tree->getWidth->return
BasicTreeUI#getLeadSelectionPath()::: basic tree i get lead selection path:::return->tree->getLeadSelectionPath
BasicTreeUI#updateLeadSelectionRow():::Updates the lead row of the selection.:::getLeadSelectionPath->getRowForPath
BasicTreeUI#getLeadSelectionRow():::Returns the lead row of the selection.:::return
BasicTreeUI#extendSelection(TreePath):::Extends the selection from the anchor to make newLead the lead of the selection:::aPath->getAnchorSelectionPath->aRow->getRowForPath->newIndex->getRowForPath->if->tree->setSelectionRow->else->if->tree->setSelectionInterval->else->tree->setSelectionInterval->setAnchorSelectionPath->setLeadSelectionPath
BasicTreeUI#repaintPath(TreePath):::Invokes repaint on the JTree for the passed in TreePath, path.:::if->bounds->getPathBounds->if->tree->repaint
BasicTreeUI.TreeExpansionHandler#treeExpanded(TreeExpansionEvent):::Called whenever an item in the tree has been expanded.:::getHandler->treeExpanded
BasicTreeUI.TreeExpansionHandler#treeCollapsed(TreeExpansionEvent):::Called whenever an item in the tree has been collapsed.:::getHandler->treeCollapsed
BasicTreeUI.ComponentHandler#componentMoved(ComponentEvent)::: component handler component moved:::if->scrollPane->getScrollPane->if->updateSize->else->scrollPane->getVerticalScrollBar->if->scrollBar->getValueIsAdjusting->if->scrollPane->getHorizontalScrollBar->scrollBar->getValueIsAdjusting->startTimer->else->updateSize->else->startTimer
BasicTreeUI.ComponentHandler#startTimer():::Creates, if necessary, and starts a Timer to check if need to resize the bounds.:::if->new->Timer->timer->setRepeats->timer->start
BasicTreeUI.ComponentHandler#getScrollPane():::Returns the JScrollPane housing the JTree, or null if one isn't found.:::c->tree->getParent->while->c->getParent->if->return->return
BasicTreeUI.ComponentHandler#actionPerformed(ActionEvent):::Public as a result of Timer:::if->scrollBar->getValueIsAdjusting->if->timer->stop->updateSize
BasicTreeUI.TreeModelHandler#treeNodesChanged(TreeModelEvent)::: tree model handler tree nodes changed:::getHandler->treeNodesChanged
BasicTreeUI.TreeModelHandler#treeNodesInserted(TreeModelEvent)::: tree model handler tree nodes inserted:::getHandler->treeNodesInserted
BasicTreeUI.TreeModelHandler#treeNodesRemoved(TreeModelEvent)::: tree model handler tree nodes removed:::getHandler->treeNodesRemoved
BasicTreeUI.TreeModelHandler#treeStructureChanged(TreeModelEvent)::: tree model handler tree structure changed:::getHandler->treeStructureChanged
BasicTreeUI.TreeSelectionHandler#valueChanged(TreeSelectionEvent):::Messaged when the selection changes in the tree we're displaying for:::getHandler->valueChanged
BasicTreeUI.CellEditorHandler#editingStopped(ChangeEvent):::Messaged when editing has stopped in the tree.:::getHandler->editingStopped
BasicTreeUI.CellEditorHandler#editingCanceled(ChangeEvent):::Messaged when editing has been canceled in the tree.:::getHandler->editingCanceled
BasicTreeUI.KeyHandler#keyTyped(KeyEvent):::Invoked when a key has been typed:::getHandler->keyTyped
BasicTreeUI.KeyHandler#keyPressed(KeyEvent)::: key handler key pressed:::getHandler->keyPressed
BasicTreeUI.KeyHandler#keyReleased(KeyEvent)::: key handler key released:::getHandler->keyReleased
BasicTreeUI.FocusHandler#focusGained(FocusEvent):::Invoked when focus is activated on the tree we're in, redraws the lead row.:::getHandler->focusGained
BasicTreeUI.FocusHandler#focusLost(FocusEvent):::Invoked when focus is activated on the tree we're in, redraws the lead row.:::getHandler->focusLost
BasicTreeUI.NodeDimensionsHandler#getNodeDimensions(Object, int, int, boolean, Rectangle):::Responsible for getting the size of a particular node.:::if->prefSize->editingComponent->getPreferredSize->rh->getRowHeight->if->if->getRowX->else->getRowX->new->Rectangle->return->if->aComponent->currentCellRenderer->tree->isRowSelected->treeModel->isLeaf->getTreeCellRendererComponent->if->rendererPane->add->aComponent->validate->prefSize->aComponent->getPreferredSize->if->getRowX->else->getRowX->new->Rectangle->return->return
BasicTreeUI.NodeDimensionsHandler#getRowX(int, int):::Returns amount to indent the given row.:::return->BasicTreeUI.this->getRowX
BasicTreeUI.MouseHandler#mousePressed(MouseEvent):::Invoked when a mouse button has been pressed on a component.:::getHandler->mousePressed
BasicTreeUI.MouseHandler#mouseDragged(MouseEvent)::: mouse handler mouse dragged:::getHandler->mouseDragged
BasicTreeUI.MouseHandler#mouseMoved(MouseEvent):::Invoked when the mouse button has been moved on a component (with no buttons no down).:::getHandler->mouseMoved
BasicTreeUI.MouseHandler#mouseReleased(MouseEvent)::: mouse handler mouse released:::getHandler->mouseReleased
BasicTreeUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent)::: property change handler property change:::getHandler->propertyChange
BasicTreeUI.SelectionModelPropertyChangeHandler#propertyChange(PropertyChangeEvent)::: selection model property change handler property change:::getHandler->propertyChange
BasicTreeUI.TreeTraverseAction#actionPerformed(ActionEvent)::: tree traverse action action performed:::if->SHARED_ACTION->traverse
BasicTreeUI.TreeTraverseAction#isEnabled()::: tree traverse action is enabled:::return->tree->isEnabled
BasicTreeUI.TreePageAction#actionPerformed(ActionEvent)::: tree page action action performed:::if->SHARED_ACTION->page
BasicTreeUI.TreePageAction#isEnabled()::: tree page action is enabled:::return->tree->isEnabled
BasicTreeUI.TreeIncrementAction#actionPerformed(ActionEvent)::: tree increment action action performed:::if->SHARED_ACTION->increment
BasicTreeUI.TreeIncrementAction#isEnabled()::: tree increment action is enabled:::return->tree->isEnabled
BasicTreeUI.TreeHomeAction#actionPerformed(ActionEvent)::: tree home action action performed:::if->SHARED_ACTION->home
BasicTreeUI.TreeHomeAction#isEnabled()::: tree home action is enabled:::return->tree->isEnabled
BasicTreeUI.TreeToggleAction#actionPerformed(ActionEvent)::: tree toggle action action performed:::if->SHARED_ACTION->toggle
BasicTreeUI.TreeToggleAction#isEnabled()::: tree toggle action is enabled:::return->tree->isEnabled
BasicTreeUI.TreeCancelEditingAction#actionPerformed(ActionEvent)::: tree cancel editing action action performed:::if->SHARED_ACTION->cancelEditing
BasicTreeUI.TreeCancelEditingAction#isEnabled()::: tree cancel editing action is enabled:::return->tree->isEnabled->isEditing
BasicTreeUI.MouseInputHandler#mouseClicked(MouseEvent)::: mouse input handler mouse clicked:::if->destination->SwingUtilities->convertMouseEvent->dispatchEvent
BasicTreeUI.MouseInputHandler#mousePressed(MouseEvent)::: mouse input handler mouse pressed:::
BasicTreeUI.MouseInputHandler#mouseReleased(MouseEvent)::: mouse input handler mouse released:::if->destination->SwingUtilities->convertMouseEvent->dispatchEvent->removeFromSource
BasicTreeUI.MouseInputHandler#mouseEntered(MouseEvent)::: mouse input handler mouse entered:::if->SwingUtilities->isLeftMouseButton->removeFromSource
BasicTreeUI.MouseInputHandler#mouseExited(MouseEvent)::: mouse input handler mouse exited:::if->SwingUtilities->isLeftMouseButton->removeFromSource
BasicTreeUI.MouseInputHandler#mouseDragged(MouseEvent)::: mouse input handler mouse dragged:::if->destination->SwingUtilities->convertMouseEvent->dispatchEvent
BasicTreeUI.MouseInputHandler#mouseMoved(MouseEvent)::: mouse input handler mouse moved:::removeFromSource
BasicTreeUI.MouseInputHandler#removeFromSource():::Removes an event from the source.:::if->source->removeMouseListener->source->removeMouseMotionListener->if->selectAll
BasicTreeUI.TreeTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->paths->tree->getSelectionPaths->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->model->tree->getModel->lastPath->displayPaths->getDisplayOrderPaths->foreach->node->path->getLastPathComponent->leaf->model->isLeaf->label->getDisplayString->plainStr->append->append->htmlStr->append->append->append->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicTreeUI.TreeTransferHandler#compare(TreePath, TreePath)::: tree transfer handler compare:::row1->tree->getRowForPath->row2->tree->getRowForPath->return
BasicTreeUI.TreeTransferHandler#getDisplayString(TreePath, boolean, boolean)::: tree transfer handler get display string:::row->tree->getRowForPath->hasFocus->tree->getLeadSelectionRow->node->path->getLastPathComponent->return->tree->tree->isExpanded->convertValueToText
BasicTreeUI.TreeTransferHandler#getDisplayOrderPaths(TreePath[]):::Selection paths are in selection order:::selOrder->new->ArrayList<TreePath>->foreach->selOrder->add->Collections->sort->n->selOrder->size->displayPaths->new->TreePathArr->for->i->return
BasicTreeUI.TreeTransferHandler#getSourceActions(JComponent)::: tree transfer handler get source actions:::return
BasicTreeUI.Handler#keyTyped(KeyEvent):::Invoked when a key has been typed:::if->tree->getRowCount->tree->hasFocus->tree->isEnabled->if->e->isAltDown->BasicGraphicsUtils->isMenuShortcutKeyDown->isNavigationKey->return->startingFromSelection->c->e->getKeyChar->time->e->getWhen->startingRow->tree->getLeadSelectionRow->if->if->prefix->length->prefix->charAt->else->else->if->tree->getRowCount->path->tree->getNextMatch->if->tree->setSelectionPath->row->getRowForPath->ensureRowsAreVisible->else->if->tree->getNextMatch->if->tree->setSelectionPath->row->getRowForPath->ensureRowsAreVisible
BasicTreeUI.Handler#keyPressed(KeyEvent):::Invoked when a key has been pressed:::if->isNavigationKey
BasicTreeUI.Handler#keyReleased(KeyEvent)::: handler key released:::
BasicTreeUI.Handler#isNavigationKey(KeyEvent):::Returns whether or not the supplied key event maps to a key that is used for navigation:::inputMap->tree->getInputMap->key->KeyStroke->getKeyStrokeForEvent->return->inputMap->get
BasicTreeUI.Handler#propertyChange(PropertyChangeEvent)::: handler property change:::if->event->getSource->treeSelectionModel->resetRowSelection->else->if->event->getSource->changeName->event->getPropertyName->if->if->updateLeadSelectionRow->event->getOldValue->repaintPath->event->getNewValue->repaintPath->else->if->if->event->getOldValue->repaintPath->event->getNewValue->repaintPath->if->event->getNewValue->setCellRenderer->redoTheLayout->else->if->event->getNewValue->setModel->else->if->event->getNewValue->booleanValue->setRootVisible->else->if->event->getNewValue->booleanValue->setShowsRootHandles->else->if->event->getNewValue->intValue->setRowHeight->else->if->event->getNewValue->setCellEditor->else->if->event->getNewValue->booleanValue->setEditable->else->if->tree->isLargeModel->setLargeModel->else->if->tree->getSelectionModel->setSelectionModel->else->if->SwingUtilities2->isScaleChanged->completeEditing->if->treeState->invalidateSizes->updateSize->else->if->if->BasicGraphicsUtils->isLeftToRight->redoTheLayout->tree->treeDidChange->km->getInputMap->SwingUtilities->replaceUIInputMap->else->if->oldValue->event->getOldValue->repaintDropLocation->tree->getDropLocation->repaintDropLocation
BasicTreeUI.Handler#repaintDropLocation(JTree.DropLocation)::: handler repaint drop location:::if->return->r->if->isDropLine->getDropLineRect->else->tree->loc->getPath->getPathBounds->if->tree->repaint
BasicTreeUI.Handler#isActualPath(TreePath, int, int)::: handler is actual path:::if->return->bounds->getPathBounds->if->return->return
BasicTreeUI.Handler#mouseClicked(MouseEvent)::: handler mouse clicked:::
BasicTreeUI.Handler#mouseEntered(MouseEvent)::: handler mouse entered:::
BasicTreeUI.Handler#mouseExited(MouseEvent)::: handler mouse exited:::
BasicTreeUI.Handler#mousePressed(MouseEvent):::Invoked when a mouse button has been pressed on a component.:::if->SwingUtilities2->shouldIgnore->return->if->isEditing->tree->getInvokesStopCellEditing->stopEditing->return->completeEditing->e->getX->e->getY->getClosestPathForLocation->if->tree->getDragEnabled->mousePressedDND->else->SwingUtilities2->adjustFocus->handleSelection
BasicTreeUI.Handler#mousePressedDND(MouseEvent)::: handler mouse pressed d:::grabFocus->if->e->getX->e->getY->isActualPath->DragRecognitionSupport->mousePressed->if->BasicGraphicsUtils->isMenuShortcutKeyDown->return->else->if->e->isShiftDown->tree->isPathSelected->setAnchorSelectionPath->setLeadSelectionPath->return->if->SwingUtilities2->adjustFocus->handleSelection
BasicTreeUI.Handler#handleSelection(MouseEvent)::: handler handle selection:::if->bounds->getPathBounds->if->e->getY->return->if->SwingUtilities->isLeftMouseButton->e->getX->e->getY->checkForClickInExpandControl->x->e->getX->if->if->tree->getDragEnabled->startEditing->selectPathForEvent
BasicTreeUI.Handler#dragStarting(MouseEvent)::: handler drag starting:::if->BasicGraphicsUtils->isMenuShortcutKeyDown->tree->addSelectionPath->setAnchorSelectionPath->setLeadSelectionPath
BasicTreeUI.Handler#mouseDragged(MouseEvent)::: handler mouse dragged:::if->SwingUtilities2->shouldIgnore->return->if->tree->getDragEnabled->DragRecognitionSupport->mouseDragged
BasicTreeUI.Handler#mouseMoved(MouseEvent):::Invoked when the mouse button has been moved on a component (with no buttons no down).:::
BasicTreeUI.Handler#mouseReleased(MouseEvent)::: handler mouse released:::if->SwingUtilities2->shouldIgnore->return->if->tree->getDragEnabled->mouseReleasedDND
BasicTreeUI.Handler#mouseReleasedDND(MouseEvent)::: handler mouse released d:::me->DragRecognitionSupport->mouseReleased->if->SwingUtilities2->adjustFocus->if->handleSelection->if->if->pressedEvent->getX->pressedEvent->getY->isActualPath->startEditingOnRelease
BasicTreeUI.Handler#focusGained(FocusEvent)::: handler focus gained:::if->pBounds->tree->getLeadSelectionPath->getPathBounds->if->tree->getRepaintPathBounds->repaint->getLeadSelectionPath->getPathBounds->if->tree->getRepaintPathBounds->repaint
BasicTreeUI.Handler#focusLost(FocusEvent)::: handler focus lost:::focusGained
BasicTreeUI.Handler#editingStopped(ChangeEvent)::: handler editing stopped:::completeEditing
BasicTreeUI.Handler#editingCanceled(ChangeEvent):::Messaged when editing has been canceled in the tree.:::completeEditing
BasicTreeUI.Handler#valueChanged(TreeSelectionEvent)::: handler value changed:::completeEditing->if->tree->getExpandsSelectedPaths->paths->treeSelectionModel->getSelectionPaths->if->for->counter->oldLead->getLeadSelectionPath->tree->getMinSelectionRow->lead->tree->getSelectionModel->getLeadSelectionPath->setAnchorSelectionPath->setLeadSelectionPath->changedPaths->event->getPaths->nodeBounds->visRect->tree->getVisibleRect->paintPaths->nWidth->tree->getWidth->if->counter->maxCounter->if->tree->repaint->else->for->if->getPathBounds->if->visRect->intersects->tree->repaint->getPathBounds->if->visRect->intersects->tree->repaint
BasicTreeUI.Handler#treeExpanded(TreeExpansionEvent)::: handler tree expanded:::if->path->event->getPath->updateExpandedDescendants
BasicTreeUI.Handler#treeCollapsed(TreeExpansionEvent)::: handler tree collapsed:::if->path->event->getPath->completeEditing->if->tree->isVisible->treeState->setExpandedState->updateLeadSelectionRow->updateSize
BasicTreeUI.Handler#treeNodesChanged(TreeModelEvent)::: handler tree nodes changed:::if->parentPath->SwingUtilities2->getModel->getTreePath->indices->e->getChildIndices->if->treeState->treeNodesChanged->updateSize->else->if->treeState->isExpanded->minIndex->for->i->minChild->treeModel->parentPath->getLastPathComponent->getChild->minPath->parentPath->pathByAddingChild->minBounds->getPathBounds->treeState->treeNodesChanged->updateSize0->newMinBounds->getPathBounds->if->return->if->tree->tree->getWidth->repaint->else->tree->tree->getWidth->tree->getHeight->repaint->else->treeState->treeNodesChanged
BasicTreeUI.Handler#treeNodesInserted(TreeModelEvent)::: handler tree nodes inserted:::if->treeState->treeNodesInserted->updateLeadSelectionRow->path->SwingUtilities2->getModel->getTreePath->if->treeState->isExpanded->updateSize->else->indices->e->getChildIndices->childCount->treeModel->path->getLastPathComponent->getChildCount->if->updateSize
BasicTreeUI.Handler#treeNodesRemoved(TreeModelEvent)::: handler tree nodes removed:::if->treeState->treeNodesRemoved->updateLeadSelectionRow->path->SwingUtilities2->getModel->getTreePath->if->treeState->isExpanded->treeModel->path->getLastPathComponent->getChildCount->updateSize
BasicTreeUI.Handler#treeStructureChanged(TreeModelEvent)::: handler tree structure changed:::if->treeState->treeStructureChanged->updateLeadSelectionRow->pPath->SwingUtilities2->getModel->getTreePath->if->pPath->getParentPath->if->treeState->isExpanded->updateSize
BasicTreeUI.Actions#accept(Object)::: actions accept:::if->if->getName->return->isEditing->return
BasicTreeUI.Actions#actionPerformed(ActionEvent)::: actions action performed:::tree->e->getSource->ui->BasicLookAndFeel->tree->getUI->getUIOfType->if->return->key->getName->if->increment->else->if->increment->else->if->increment->else->if->increment->else->if->increment->else->if->increment->else->if->traverse->else->if->traverse->else->if->traverse->else->if->traverse->else->if->page->else->if->page->else->if->page->else->if->page->else->if->page->else->if->page->else->if->home->else->if->home->else->if->home->else->if->home->else->if->home->else->if->home->else->if->toggle->else->if->cancelEditing->else->if->startEditing->else->if->selectAll->else->if->selectAll->else->if->if->ui->getRowCount->lead->ui->getLeadSelectionRow->if->tree->isRowSelected->aPath->ui->getAnchorSelectionPath->tree->addSelectionRow->ui->setAnchorSelectionPath->else->if->if->ui->getRowCount->lead->ui->getLeadSelectionRow->lPath->ui->getLeadSelectionPath->if->tree->isRowSelected->tree->addSelectionRow->else->tree->removeSelectionRow->ui->setLeadSelectionPath->ui->setAnchorSelectionPath->else->if->extendSelection->else->if->if->ui->getRowCount->lead->ui->getLeadSelectionRow->tree->setSelectionInterval->else->if->scroll->else->if->scroll->else->if->scrollChangeSelection->else->if->scrollChangeSelection->else->if->scrollChangeSelection->else->if->scrollChangeSelection->else->if->expand->else->if->collapse->else->if->moveSelectionToParent
BasicTreeUI.Actions#scrollChangeSelection(JTree, BasicTreeUI, int, boolean, boolean)::: actions scroll change selection:::rowCount->if->ui->getRowCount->newPath->visRect->tree->getVisibleRect->if->ui->getClosestPathForLocation->Math->max->else->Math->Math->tree->getWidth->max->min->ui->getClosestPathForLocation->tree->scrollRectToVisible->if->ui->extendSelection->else->if->tree->setSelectionPath->else->ui->setLeadSelectionPath
BasicTreeUI.Actions#scroll(JTree, BasicTreeUI, int, int)::: actions scroll:::visRect->component->getVisibleRect->size->component->getSize->if->Math->max->Math->Math->max->min->else->Math->max->Math->Math->max->min->component->scrollRectToVisible
BasicTreeUI.Actions#extendSelection(JTree, BasicTreeUI)::: actions extend selection:::if->ui->getRowCount->lead->ui->getLeadSelectionRow->if->leadP->ui->getLeadSelectionPath->aPath->ui->getAnchorSelectionPath->aRow->ui->getRowForPath->if->tree->setSelectionInterval->ui->setLeadSelectionPath->ui->setAnchorSelectionPath
BasicTreeUI.Actions#selectAll(JTree, BasicTreeUI, boolean)::: actions select all:::rowCount->ui->getRowCount->if->if->if->tree->getSelectionModel->getSelectionMode->lead->ui->getLeadSelectionRow->if->tree->setSelectionRow->else->if->tree->getMinSelectionRow->tree->setSelectionRow->ui->ensureRowsAreVisible->return->lastPath->ui->getLeadSelectionPath->aPath->ui->getAnchorSelectionPath->if->tree->isVisible->tree->setSelectionInterval->if->ui->setLeadSelectionPath->if->tree->isVisible->ui->setAnchorSelectionPath->else->lastPath->ui->getLeadSelectionPath->aPath->ui->getAnchorSelectionPath->tree->clearSelection->ui->setAnchorSelectionPath->ui->setLeadSelectionPath
BasicTreeUI.Actions#startEditing(JTree, BasicTreeUI)::: actions start editing:::lead->ui->getLeadSelectionPath->editRow->ui->getRowForPath->if->tree->startEditingAtPath
BasicTreeUI.Actions#cancelEditing(JTree, BasicTreeUI)::: actions cancel editing:::tree->cancelEditing
BasicTreeUI.Actions#toggle(JTree, BasicTreeUI)::: actions toggle:::selRow->ui->getLeadSelectionRow->if->ui->isLeaf->aPath->ui->getAnchorSelectionPath->lPath->ui->getLeadSelectionPath->ui->ui->getPathForRow->toggleExpandState->ui->setAnchorSelectionPath->ui->setLeadSelectionPath
BasicTreeUI.Actions#expand(JTree, BasicTreeUI)::: actions expand:::selRow->ui->getLeadSelectionRow->tree->expandRow
BasicTreeUI.Actions#collapse(JTree, BasicTreeUI)::: actions collapse:::selRow->ui->getLeadSelectionRow->tree->collapseRow
BasicTreeUI.Actions#increment(JTree, BasicTreeUI, int, boolean, boolean)::: actions increment:::if->tree->getSelectionModel->getSelectionMode->rowCount->if->tree->getRowCount->selIndex->ui->getLeadSelectionRow->newIndex->if->if->else->else->Math->Math->max->min->if->getSelectionMode->ui->tree->getPathForRow->extendSelection->else->if->tree->setSelectionInterval->else->ui->tree->getPathForRow->setLeadSelectionPath->ui->ensureRowsAreVisible
BasicTreeUI.Actions#traverse(JTree, BasicTreeUI, int, boolean)::: actions traverse:::if->tree->getSelectionModel->getSelectionMode->rowCount->if->tree->getRowCount->minSelIndex->ui->getLeadSelectionRow->newIndex->if->else->if->minSelPath->ui->getPathForRow->childCount->tree->getModel->minSelPath->getLastPathComponent->getChildCount->if->ui->isLeaf->if->tree->isExpanded->ui->toggleExpandState->else->if->Math->min->else->if->ui->isLeaf->tree->isExpanded->ui->ui->getPathForRow->toggleExpandState->else->path->ui->getPathForRow->if->path->getPathCount->ui->path->getParentPath->getRowForPath->else->if->if->tree->setSelectionInterval->else->ui->ui->getPathForRow->setLeadSelectionPath->ui->ensureRowsAreVisible
BasicTreeUI.Actions#moveSelectionToParent(JTree, BasicTreeUI)::: actions move selection to parent:::selRow->ui->getLeadSelectionRow->path->ui->getPathForRow->if->path->getPathCount->newIndex->ui->path->getParentPath->getRowForPath->if->tree->setSelectionInterval->ui->ensureRowsAreVisible
BasicTreeUI.Actions#page(JTree, BasicTreeUI, int, boolean, boolean)::: actions page:::if->tree->getSelectionModel->getSelectionMode->rowCount->if->ui->getRowCount->maxSize->tree->getSize->lead->ui->getLeadSelectionPath->newPath->visRect->tree->getVisibleRect->if->ui->getClosestPathForLocation->if->newPath->equals->Math->max->tree->getClosestPathForLocation->else->Math->min->tree->getClosestPathForLocation->if->newPath->equals->Math->min->tree->getClosestPathForLocation->newRect->ui->getPathBounds->if->if->else->if->ui->extendSelection->else->if->tree->setSelectionPath->else->ui->setLeadSelectionPath->tree->scrollRectToVisible
BasicTreeUI.Actions#home(JTree, BasicTreeUI, int, boolean, boolean)::: actions home:::if->tree->getSelectionModel->getSelectionMode->rowCount->ui->getRowCount->if->if->ui->ensureRowsAreVisible->if->aPath->ui->getAnchorSelectionPath->aRow->ui->getRowForPath->if->tree->setSelectionInterval->else->tree->setSelectionInterval->ui->setAnchorSelectionPath->ui->ui->getPathForRow->setLeadSelectionPath->else->if->tree->setSelectionInterval->else->ui->ui->getPathForRow->setLeadSelectionPath->else->ui->ensureRowsAreVisible->if->aPath->ui->getAnchorSelectionPath->aRow->ui->getRowForPath->if->tree->setSelectionInterval->else->tree->setSelectionInterval->ui->setAnchorSelectionPath->ui->ui->getPathForRow->setLeadSelectionPath->else->if->tree->setSelectionInterval->else->ui->ui->getPathForRow->setLeadSelectionPath->if->ui->isLargeModel->SwingUtilities->new->Runnable->invokeLater
BasicViewportUI#createUI(JComponent):::Returns an instance of BasicViewportUI.:::if->new->BasicViewportUI->return
BasicViewportUI#installUI(JComponent)::: basic viewport i install i:::super->installUI->installDefaults
BasicViewportUI#uninstallUI(JComponent)::: basic viewport i uninstall i:::uninstallDefaults->super->uninstallUI
BasicViewportUI#installDefaults(JComponent):::Installs view port properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicViewportUI#uninstallDefaults(JComponent):::Uninstall view port properties.:::
CenterLayout#addLayoutComponent(String, Component)::: center layout add layout component:::
CenterLayout#removeLayoutComponent(Component)::: center layout remove layout component:::
CenterLayout#preferredLayoutSize(Container)::: center layout preferred layout size:::c->container->getComponent->if->size->c->getPreferredSize->insets->container->getInsets->return->new->Dimension->else->return->new->Dimension
CenterLayout#minimumLayoutSize(Container)::: center layout minimum layout size:::return->preferredLayoutSize
CenterLayout#layoutContainer(Container)::: center layout layout container:::if->container->getComponentCount->c->container->getComponent->pref->c->getPreferredSize->containerWidth->container->getWidth->containerHeight->container->getHeight->containerInsets->container->getInsets->left->right->c->setBounds
ComboPopup#show():::Shows the popup:::
ComboPopup#hide():::Hides the popup:::
ComboPopup#isVisible():::Returns true if the popup is visible (currently being displayed).:::
ComboPopup#getList():::Returns the list that is being used to draw the items in the combo box:::
ComboPopup#getMouseListener():::Returns a mouse listener that will be added to the combo box or null:::
ComboPopup#getMouseMotionListener():::Returns a mouse motion listener that will be added to the combo box or null:::
ComboPopup#getKeyListener():::Returns a key listener that will be added to the combo box or null:::
ComboPopup#uninstallingUI():::Called to inform the ComboPopup that the UI is uninstalling:::
DefaultMenuLayout#preferredLayoutSize(Container)::: default menu layout preferred layout size:::if->popupMenu->clearUsedClientProperties->if->popupMenu->getComponentCount->return->new->Dimension->super->invalidateLayout->return->super->preferredLayoutSize
DragRecognitionSupport.BeforeDrag#dragStarting(MouseEvent)::: before drag drag starting:::
DragRecognitionSupport#getDragRecognitionSupport():::Returns the DragRecognitionSupport for the caller's AppContext.:::support->AppContext->getAppContext->get->if->new->DragRecognitionSupport->AppContext->getAppContext->put->return
DragRecognitionSupport#mousePressed(MouseEvent):::Returns whether or not the event is potentially part of a drag sequence.:::return->getDragRecognitionSupport->mousePressedImpl
DragRecognitionSupport#mouseReleased(MouseEvent):::If a dnd recognition has been going on, return the MouseEvent that started the recognition:::return->getDragRecognitionSupport->mouseReleasedImpl
DragRecognitionSupport#mouseDragged(MouseEvent, BeforeDrag):::Returns whether or not a drag gesture recognition is ongoing.:::return->getDragRecognitionSupport->mouseDraggedImpl
DragRecognitionSupport#clearState()::: drag recognition support clear state:::
DragRecognitionSupport#mapDragOperationFromModifiers(MouseEvent, TransferHandler)::: drag recognition support map drag operation from modifiers:::if->SwingUtilities->isLeftMouseButton->return->return->SunDragSourceContextPeer->me->getModifiersEx->th->getSourceActions->convertModifiersToDropAction
DragRecognitionSupport#mousePressedImpl(MouseEvent):::Returns whether or not the event is potentially part of a drag sequence.:::me->getSource->if->component->getTransferHandler->mapDragOperationFromModifiers->DragSource->getDragThreshold->return->clearState->return
DragRecognitionSupport#mouseReleasedImpl(MouseEvent):::If a dnd recognition has been going on, return the MouseEvent that started the recognition:::if->return->retEvent->if->me->getSource->clearState->return
DragRecognitionSupport#mouseDraggedImpl(MouseEvent, BeforeDrag):::Returns whether or not a drag gesture recognition is ongoing.:::if->return->if->me->getSource->clearState->return->dx->Math->me->getX->dndArmedEvent->getX->abs->dy->Math->me->getY->dndArmedEvent->getY->abs->if->th->component->getTransferHandler->action->mapDragOperationFromModifiers->if->if->bd->dragStarting->th->exportAsDrag->clearState->return
LazyActionMap#installLazyActionMap(JComponent, Class, String):::Installs an ActionMap that will be populated by invoking the loadActionMap method on the specified Class when necessary:::map->UIManager->get->if->new->LazyActionMap->UIManager->getLookAndFeelDefaults->put->SwingUtilities->replaceUIActionMap
LazyActionMap#getActionMap(Class, String):::Returns an ActionMap that will be populated by invoking the loadActionMap method on the specified Class when necessary:::map->UIManager->get->if->new->LazyActionMap->UIManager->getLookAndFeelDefaults->put->return
LazyActionMap#put(Action)::: lazy action map put:::action->getValue->put
LazyActionMap#put(Object, Action)::: lazy action map put:::loadIfNecessary->super->put
LazyActionMap#get(Object)::: lazy action map get:::loadIfNecessary->return->super->get
LazyActionMap#remove(Object)::: lazy action map remove:::loadIfNecessary->super->remove
LazyActionMap#clear()::: lazy action map clear:::loadIfNecessary->super->clear
LazyActionMap#keys()::: lazy action map keys:::loadIfNecessary->return->super->keys
LazyActionMap#size()::: lazy action map size:::loadIfNecessary->return->super->size
LazyActionMap#allKeys()::: lazy action map all keys:::loadIfNecessary->return->super->allKeys
LazyActionMap#setParent(ActionMap)::: lazy action map set parent:::loadIfNecessary->super->setParent
LazyActionMap#loadIfNecessary()::: lazy action map load if necessary:::if->loader->klass->try->method->klass->new->Class<?>Arr->getDeclaredMethod->method->new->ObjectArr->invoke->catch->finally

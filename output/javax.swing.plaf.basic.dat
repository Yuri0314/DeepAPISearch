BasicArrowButton#getDirection():::Returns the direction of the arrow.:::return
BasicArrowButton#setDirection(int):::Sets the direction of the arrow.:::
BasicArrowButton#getPreferredSize():::Returns the preferred size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#getMinimumSize():::Returns the minimum size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#getMaximumSize():::Returns the maximum size of the BasicArrowButton.:::return->new->Dimension
BasicArrowButton#isFocusTraversable():::Returns whether the arrow button should get the focus:::return
BasicArrowButton#paintTriangle(Graphics, int, int, int, int, boolean):::Paints a triangle.:::if->SwingUtilities2->isScaledGraphics->paintScaledTriangle->else->paintUnscaledTriangle
BasicBorders#getButtonBorder():::Returns a border instance for a JButton.:::table->UIManager->getLookAndFeelDefaults->buttonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getRadioButtonBorder():::Returns a border instance for a JRadioButton.:::table->UIManager->getLookAndFeelDefaults->radioButtonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.RadioButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getToggleButtonBorder():::Returns a border instance for a JToggleButton.:::table->UIManager->getLookAndFeelDefaults->toggleButtonBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ToggleButtonBorder->new->MarginBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicBorders#getMenuBarBorder():::Returns a border instance for a JMenuBar.:::table->UIManager->getLookAndFeelDefaults->menuBarBorder->table->getColor->table->getColor->new->BasicBorders.MenuBarBorder->return
BasicBorders#getSplitPaneBorder():::Returns a border instance for a JSplitPane.:::table->UIManager->getLookAndFeelDefaults->splitPaneBorder->table->getColor->table->getColor->new->BasicBorders.SplitPaneBorder->return
BasicBorders#getSplitPaneDividerBorder():::Returns a border instance for a JSplitPane divider.:::table->UIManager->getLookAndFeelDefaults->splitPaneBorder->table->getColor->table->getColor->new->BasicBorders.SplitPaneDividerBorder->return
BasicBorders#getTextFieldBorder():::Returns a border instance for a JTextField.:::table->UIManager->getLookAndFeelDefaults->textFieldBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.FieldBorder->return
BasicBorders#getProgressBarBorder():::Returns a border instance for a JProgressBar.:::table->UIManager->getLookAndFeelDefaults->progressBarBorder->new->BorderUIResource.LineBorderUIResource->return
BasicBorders#getInternalFrameBorder():::Returns a border instance for a JInternalFrame.:::table->UIManager->getLookAndFeelDefaults->internalFrameBorder->table->getColor->table->getColor->table->getColor->table->getColor->new->BevelBorder->BorderFactory->table->getColor->createLineBorder->new->BorderUIResource.CompoundBorderUIResource->return
BasicButtonListener#loadActionMap(LazyActionMap):::Populates Buttons actions.:::map->new->Actions->put->map->new->Actions->put
BasicButtonListener#checkOpacity(AbstractButton):::Checks the opacity of the AbstractButton.:::b->b->isContentAreaFilled->setOpaque
BasicButtonListener#installKeyboardActions(JComponent):::Register default key actions: pressing space to "click" a button and registering the keyboard mnemonic (if any).:::b->updateMnemonicBinding->LazyActionMap->installLazyActionMap->km->getInputMap->SwingUtilities->replaceUIInputMap
BasicButtonListener#uninstallKeyboardActions(JComponent):::Unregister default key actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicButtonListener#getInputMap(int, JComponent):::Returns the InputMap for condition condition:::if->ui->BasicLookAndFeel->getUI->getUIOfType->if->return->DefaultLookup->ui->getPropertyPrefix->get->return
BasicButtonListener#updateMnemonicBinding(AbstractButton):::Resets the binding for the mnemonic in the WHEN_IN_FOCUSED_WINDOW UI InputMap.:::m->b->getMnemonic->if->map->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->map->clear->map->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->map->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->map->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->map->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->map->KeyStroke->getKeyStroke->put->else->map->SwingUtilities->getUIInputMap->if->map->clear
BasicButtonUI#createUI(JComponent):::Returns an instance of BasicButtonUI.:::appContext->AppContext->getAppContext->buttonUI->appContext->get->if->new->BasicButtonUI->appContext->put->return
BasicButtonUI#getPropertyPrefix():::Returns the property prefix.:::return
BasicButtonUI#installDefaults(AbstractButton):::Installs default properties.:::pp->getPropertyPrefix->UIManager->getInt->if->b->isContentAreaFilled->LookAndFeel->installProperty->else->LookAndFeel->installProperty->if->b->getMargin->b->getMargin->b->UIManager->getInsets->setMargin->LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->rollover->UIManager->get->if->LookAndFeel->installProperty->LookAndFeel->Integer->valueOf->installProperty
BasicButtonUI#installListeners(AbstractButton):::Registers listeners.:::listener->createButtonListener->if->b->addMouseListener->b->addMouseMotionListener->b->addFocusListener->b->addPropertyChangeListener->b->addChangeListener
BasicButtonUI#installKeyboardActions(AbstractButton):::Registers keyboard actions.:::listener->getButtonListener->if->listener->installKeyboardActions
BasicButtonUI#uninstallKeyboardActions(AbstractButton):::Unregisters keyboard actions.:::listener->getButtonListener->if->listener->uninstallKeyboardActions
BasicButtonUI#uninstallListeners(AbstractButton):::Unregisters listeners.:::listener->getButtonListener->if->b->removeMouseListener->b->removeMouseMotionListener->b->removeFocusListener->b->removeChangeListener->b->removePropertyChangeListener
BasicButtonUI#uninstallDefaults(AbstractButton):::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicButtonUI#createButtonListener(AbstractButton):::Returns a new instance of BasicButtonListener.:::return->new->BasicButtonListener
BasicButtonUI#getDefaultTextIconGap(AbstractButton):::Returns the default gap between a text and an icon.:::return
BasicButtonUI#paintIcon(Graphics, JComponent, Rectangle):::Paints an icon of the current button.:::b->model->b->getModel->icon->b->getIcon->tmpIcon->if->return->selectedIcon->if->model->isSelected->b->getSelectedIcon->if->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->if->if->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->clearTextShiftOffset->else->if->b->isRolloverEnabled->model->isRollover->if->model->isSelected->b->getRolloverSelectedIcon->if->if->b->getRolloverIcon->if->if->model->isPressed->model->isArmed->icon->getTextShiftOffset->getTextShiftOffset->paintIcon->else->icon->paintIcon
BasicButtonUI#paintText(Graphics, JComponent, Rectangle, String):::Method which renders the text of the current button:::b->model->b->getModel->fm->SwingUtilities2->getFontMetrics->mnemonicIndex->b->getDisplayedMnemonicIndex->if->model->isEnabled->g->b->getForeground->setColor->SwingUtilities2->getTextShiftOffset->fm->getAscent->getTextShiftOffset->drawStringUnderlineCharAt->else->g->b->getBackground->brighter->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->g->b->getBackground->darker->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt
BasicButtonUI#paintText(Graphics, AbstractButton, Rectangle, String):::Method which renders the text of the current button.:::paintText
BasicButtonUI#paintFocus(Graphics, AbstractButton, Rectangle, Rectangle, Rectangle):::Paints a focused button.:::
BasicButtonUI#paintButtonPressed(Graphics, AbstractButton):::Paints a pressed button.:::
BasicButtonUI#clearTextShiftOffset():::Clears the offset of the text.:::
BasicButtonUI#setTextShiftOffset():::Sets the offset of the text.:::
BasicButtonUI#getTextShiftOffset():::Returns the offset of the text.:::return
BasicButtonUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->b->text->b->getText->if->equals->return->fm->b->b->getFont->getFontMetrics->layout->return->BasicHTML->fm->getAscent->getBaseline
BasicButtonUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->c->getClientProperty->return->switch->getVerticalAlignment->return->return->return->return
BasicCheckBoxMenuItemUI#createUI(JComponent):::Constructs a new instance of BasicCheckBoxMenuItemUI.:::return->new->BasicCheckBoxMenuItemUI
BasicCheckBoxMenuItemUI#processMouseEvent(JMenuItem, MouseEvent, MenuElement[], MenuSelectionManager):::Invoked when mouse event occurs.:::p->e->getPoint->if->item->getWidth->item->getHeight->if->e->getID->manager->clearSelectedPath->item->doClick->else->manager->setSelectedPath->else->if->item->getModel->isArmed->newPath->new->MenuElementArr->i->c->for->manager->setSelectedPath
BasicCheckBoxUI#createUI(JComponent):::Returns an instance of BasicCheckBoxUI.:::appContext->AppContext->getAppContext->checkboxUI->appContext->get->if->new->BasicCheckBoxUI->appContext->put->return
BasicColorChooserUI#createUI(JComponent):::Returns a new instance of BasicColorChooserUI.:::return->new->BasicColorChooserUI
BasicColorChooserUI#createDefaultChoosers():::Returns an array of default color choosers.:::panels->ColorChooserComponentFactory->getDefaultChooserPanels->return
BasicColorChooserUI#uninstallDefaultChoosers():::Uninstalls default color choosers.:::choosers->chooser->getChooserPanels->for->i
BasicColorChooserUI#installPreviewPanel():::Installs preview panel.:::previewPanel->getPreviewPanel->if->ColorChooserComponentFactory->getPreviewPanel->else->if->previewPanel->getClass->equals->previewPanel->getComponentCount->if->chooser->add->previewPanel->chooser->getColor->setForeground->previewPanelHolder->add->previewPanel->getHandler->addMouseListener->previewPanel->setInheritsPopupMenu
BasicColorChooserUI#uninstallPreviewPanel():::Removes installed preview panel from the UI delegate.:::if->getHandler->removeMouseListener->remove->remove
BasicColorChooserUI#installDefaults():::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->th->chooser->getTransferHandler->if->chooser->setTransferHandler
BasicColorChooserUI#uninstallDefaults():::Uninstalls default properties.:::if->chooser->getTransferHandler->chooser->setTransferHandler
BasicColorChooserUI#installListeners():::Registers listeners.:::createPropertyChangeListener->chooser->addPropertyChangeListener->getHandler->chooser->getSelectionModel->addChangeListener
BasicColorChooserUI#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicColorChooserUI#uninstallListeners():::Unregisters listeners.:::chooser->removePropertyChangeListener->chooser->getSelectionModel->removeChangeListener
BasicComboBoxEditor#createEditorComponent():::Creates the internal editor component:::editor->new->BorderlessTextField->editor->setBorder->return
BasicComboBoxEditor#setItem(Object):::Sets the item that should be edited.:::text->if->anObject->toString->if->else->if->text->editor->getText->equals->editor->setText
BasicComboBoxUI#loadActionMap(LazyActionMap):::Populates ComboBox's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicComboBoxUI#createUI(JComponent):::Constructs a new instance of BasicComboBoxUI.:::return->new->BasicComboBoxUI
BasicComboBoxUI#installDefaults():::Installs the default colors, default font, default renderer, and default editor into the JComboBox.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->LookAndFeel->installProperty->l->UIManager->get->l->longValue->b->UIManager->get->UIManager->getInsets
BasicComboBoxUI#installListeners():::Creates and installs listeners for the combo box and its model:::if->createItemListener->comboBox->addItemListener->if->createPropertyChangeListener->comboBox->addPropertyChangeListener->if->createKeyListener->comboBox->addKeyListener->if->createFocusListener->comboBox->addFocusListener->if->popup->getMouseListener->comboBox->addMouseListener->if->popup->getMouseMotionListener->comboBox->addMouseMotionListener->if->popup->getKeyListener->comboBox->addKeyListener->if->comboBox->getModel->if->createListDataListener->comboBox->getModel->addListDataListener
BasicComboBoxUI#uninstallDefaults():::Uninstalls the default colors, default font, default renderer, and default editor from the combo box.:::LookAndFeel->installColorsAndFont->LookAndFeel->uninstallBorder
BasicComboBoxUI#uninstallListeners():::Removes the installed listeners from the combo box and its model:::if->comboBox->removeKeyListener->if->comboBox->removeItemListener->if->comboBox->removePropertyChangeListener->if->comboBox->removeFocusListener->if->comboBox->removeMouseListener->if->comboBox->removeMouseMotionListener->if->comboBox->removeKeyListener->if->comboBox->getModel->if->comboBox->getModel->removeListDataListener
BasicComboBoxUI#createPopup():::Creates the popup portion of the combo box.:::return->new->BasicComboPopup
BasicComboBoxUI#createKeyListener():::Creates a KeyListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createFocusListener():::Creates a FocusListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createListDataListener():::Creates a list data listener which will be added to the ComboBoxModel:::return->getHandler
BasicComboBoxUI#createItemListener():::Creates an ItemListener which will be added to the combo box:::return
BasicComboBoxUI#createPropertyChangeListener():::Creates a PropertyChangeListener which will be added to the combo box:::return->getHandler
BasicComboBoxUI#createLayoutManager():::Creates a layout manager for managing the components which make up the combo box.:::return->getHandler
BasicComboBoxUI#createRenderer():::Creates the default renderer that will be used in a non-editiable combo box:::return->new->BasicComboBoxRenderer.UIResource
BasicComboBoxUI#createEditor():::Creates the default editor that will be used in editable combo boxes:::return->new->BasicComboBoxEditor.UIResource
BasicComboBoxUI#installComponents():::Creates and initializes the components which make up the aggregate combo box:::createArrowButton->if->comboBox->add->configureArrowButton->if->comboBox->isEditable->addEditor->comboBox->add
BasicComboBoxUI#uninstallComponents():::The aggregate components which comprise the combo box are unregistered and uninitialized:::if->unconfigureArrowButton->if->unconfigureEditor->comboBox->removeAll
BasicComboBoxUI#addEditor():::This public method is implementation specific and should be private:::removeEditor->comboBox->getEditor->getEditorComponent->if->configureEditor->comboBox->add->if->comboBox->isFocusOwner->editor->requestFocusInWindow
BasicComboBoxUI#removeEditor():::This public method is implementation specific and should be private:::if->unconfigureEditor->comboBox->remove
BasicComboBoxUI#configureEditor():::This protected method is implementation specific and should be private:::editor->comboBox->isEnabled->setEnabled->editor->comboBox->isFocusable->setFocusable->editor->comboBox->getFont->setFont->if->editor->addFocusListener->editor->getHandler->addFocusListener->comboBox->getEditor->getHandler->addActionListener->if->putClientProperty->setInheritsPopupMenu->comboBox->comboBox->getEditor->comboBox->getSelectedItem->configureEditor->editor->addPropertyChangeListener
BasicComboBoxUI#unconfigureEditor():::This protected method is implementation specific and should be private:::if->editor->removeFocusListener->editor->removePropertyChangeListener->editor->getHandler->removeFocusListener->comboBox->getEditor->getHandler->removeActionListener
BasicComboBoxUI#configureArrowButton():::This public method is implementation specific and should be private:::if->arrowButton->comboBox->isEnabled->setEnabled->arrowButton->comboBox->isFocusable->setFocusable->arrowButton->setRequestFocusEnabled->arrowButton->popup->getMouseListener->addMouseListener->arrowButton->popup->getMouseMotionListener->addMouseMotionListener->arrowButton->resetKeyboardActions->arrowButton->putClientProperty->arrowButton->setInheritsPopupMenu
BasicComboBoxUI#unconfigureArrowButton():::This public method is implementation specific and should be private:::if->arrowButton->popup->getMouseListener->removeMouseListener->arrowButton->popup->getMouseMotionListener->removeMouseMotionListener
BasicComboBoxUI#createArrowButton():::Creates a button which will be used as the control to show or hide the popup portion of the combo box.:::button->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton->button->setName->return
BasicComboBoxUI#isPopupVisible(JComboBox):::Tells if the popup is visible or not.:::return->popup->isVisible
BasicComboBoxUI#setPopupVisible(JComboBox, boolean):::Hides the popup.:::if->popup->show->else->popup->hide
BasicComboBoxUI#isFocusTraversable(JComboBox):::Determines if the JComboBox is focus traversable:::return->comboBox->isEditable
BasicComboBoxUI#getMinimumSize(JComponent):::The minimum size is the size of the display area plus insets plus the button.:::if->return->new->Dimension->size->getDisplaySize->insets->getInsets->buttonHeight->buttonWidth->arrowButton->getPreferredSize->cachedMinimumSize->setSize->return->new->Dimension
BasicComboBoxUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->getDisplaySize->if->insets->c->getInsets->Math->max->if->comboBox->isEditable->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->value->prototypeValue->comboBox->getPrototypeDisplayValue->if->else->if->comboBox->getModel->getSize->comboBox->getModel->getElementAt->component->renderer->getListCellRendererComponent->if->label->text->label->getText->if->text->isEmpty->label->setText->if->component->comboBox->getFont->setFont->component->getBaseline->else->editor->getBaseline->if->return
BasicComboBoxUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->getDisplaySize->if->comboBox->isEditable->return->editor->getBaselineResizeBehavior->else->if->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->value->prototypeValue->comboBox->getPrototypeDisplayValue->if->else->if->comboBox->getModel->getSize->comboBox->getModel->getElementAt->if->component->renderer->getListCellRendererComponent->return->component->getBaselineResizeBehavior->return
BasicComboBoxUI#isNavigationKey(int):::Returns whether or not the supplied keyCode maps to a key that is used for navigation:::return
BasicComboBoxUI#selectNextPossibleValue():::Selects the next item in the list:::si->if->comboBox->isPopupVisible->listBox->getSelectedIndex->else->comboBox->getSelectedIndex->if->comboBox->getModel->getSize->listBox->setSelectedIndex->listBox->ensureIndexIsVisible->if->if->UIManager->getBoolean->comboBox->isPopupVisible->comboBox->setSelectedIndex->comboBox->repaint
BasicComboBoxUI#selectPreviousPossibleValue():::Selects the previous item in the list:::si->if->comboBox->isPopupVisible->listBox->getSelectedIndex->else->comboBox->getSelectedIndex->if->listBox->setSelectedIndex->listBox->ensureIndexIsVisible->if->if->UIManager->getBoolean->comboBox->isPopupVisible->comboBox->setSelectedIndex->comboBox->repaint
BasicComboBoxUI#toggleOpenClose():::Hides the popup if it is showing and shows the popup if it is hidden.:::isPopupVisible->setPopupVisible
BasicComboBoxUI#rectangleForCurrentValue():::Returns the area that is reserved for drawing the currently selected item.:::width->comboBox->getWidth->height->comboBox->getHeight->insets->getInsets->buttonSize->if->arrowButton->getWidth->if->BasicGraphicsUtils->isLeftToRight->return->new->Rectangle->else->return->new->Rectangle
BasicComboBoxUI#getInsets():::Gets the insets from the JComboBox.:::return->comboBox->getInsets
BasicComboBoxUI#paintCurrentValue(Graphics, Rectangle, boolean):::Paints the currently selected item.:::renderer->comboBox->getRenderer->c->if->isPopupVisible->renderer->comboBox->getSelectedItem->getListCellRendererComponent->else->renderer->comboBox->getSelectedItem->getListCellRendererComponent->c->UIManager->getColor->setBackground->c->comboBox->getFont->setFont->if->isPopupVisible->c->listBox->getSelectionForeground->setForeground->c->listBox->getSelectionBackground->setBackground->else->if->comboBox->isEnabled->c->comboBox->getForeground->setForeground->c->comboBox->getBackground->setBackground->else->c->DefaultLookup->getColor->setForeground->c->DefaultLookup->getColor->setBackground->shouldValidate->if->x->y->w->h->if->currentValuePane->paintComponent
BasicComboBoxUI#paintCurrentValueBackground(Graphics, Rectangle, boolean):::Paints the background of the currently selected item.:::t->g->getColor->if->comboBox->isEnabled->g->DefaultLookup->getColor->setColor->else->g->DefaultLookup->getColor->setColor->g->fillRect->g->setColor
BasicComboBoxUI#repaintCurrentValue():::Repaint the currently selected item.:::r->rectangleForCurrentValue->comboBox->repaint
BasicComboBoxUI#getDefaultSize():::Return the default size of an empty display area of the combo box using the current renderer and font.:::d->getDefaultListCellRenderer->getListCellRendererComponent->getSizeForComponent->return->new->Dimension
BasicComboBoxUI#getDisplaySize():::Returns the calculated size of the display area:::if->return->new->Dimension->result->new->Dimension->renderer->comboBox->getRenderer->if->new->DefaultListCellRenderer->prototypeValue->comboBox->getPrototypeDisplayValue->if->renderer->getListCellRendererComponent->getSizeForComponent->else->model->comboBox->getModel->modelSize->model->getSize->baseline->d->cpn->if->for->i->else->getDefaultSize->if->comboBox->isEditable->if->comboBox->isEditable->d->editor->getPreferredSize->Math->max->Math->max->if->cachedDisplaySize->setSize->return
BasicComboBoxUI#getSizeForComponent(Component):::Returns the size a component would have if used as a cell renderer.:::currentValuePane->add->comp->comboBox->getFont->setFont->d->comp->getPreferredSize->currentValuePane->remove->return
BasicComboBoxUI#installKeyboardActions():::Adds keyboard actions to the JComboBox:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicComboBoxUI#uninstallKeyboardActions():::Removes the focus InputMap and ActionMap.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicComboPopup#show():::Implementation of ComboPopup.show().:::comboBox->firePopupMenuWillBecomeVisible->comboBox->getSelectedIndex->setListSelection->location->getPopupLocation->show
BasicComboPopup#hide():::Implementation of ComboPopup.hide().:::manager->MenuSelectionManager->defaultManager->selection->manager->getSelectedPath->for->i->if->comboBox->repaint
BasicComboPopup#getList():::Implementation of ComboPopup.getList().:::return
BasicComboPopup#getMouseListener():::Implementation of ComboPopup.getMouseListener().:::if->createMouseListener->return
BasicComboPopup#getMouseMotionListener():::Implementation of ComboPopup.getMouseMotionListener().:::if->createMouseMotionListener->return
BasicComboPopup#getKeyListener():::Implementation of ComboPopup.getKeyListener().:::if->createKeyListener->return
BasicComboPopup#uninstallingUI():::Called when the UI is uninstalling:::if->comboBox->removePropertyChangeListener->if->comboBox->removeItemListener->comboBox->getModel->uninstallComboBoxModelListeners->uninstallKeyboardActions->uninstallListListeners->uninstallScrollerListeners->list->setModel
BasicComboPopup#uninstallComboBoxModelListeners(ComboBoxModel):::Removes the listeners from the combo box model:::if->model->removeListDataListener
BasicComboPopup#uninstallKeyboardActions():::Unregisters keyboard actions.:::
BasicComboPopup#createMouseListener():::Creates a listener that will watch for mouse-press and release events on the combo box:::return->getHandler
BasicComboPopup#createMouseMotionListener():::Creates the mouse motion listener which will be added to the combo box:::return->getHandler
BasicComboPopup#createKeyListener():::Creates the key listener that will be added to the combo box:::return
BasicComboPopup#createListSelectionListener():::Creates a list selection listener that watches for selection changes in the popup's list:::return
BasicComboPopup#createListDataListener():::Creates a list data listener which will be added to the ComboBoxModel:::return
BasicComboPopup#createListMouseListener():::Creates a mouse listener that watches for mouse events in the popup's list:::return->getHandler
BasicComboPopup#createListMouseMotionListener():::Creates a mouse motion listener that watches for mouse motion events in the popup's list:::return->getHandler
BasicComboPopup#createPropertyChangeListener():::Creates a PropertyChangeListener which will be added to the combo box:::return->getHandler
BasicComboPopup#createItemListener():::Creates an ItemListener which will be added to the combo box:::return->getHandler
BasicComboPopup#createList():::Creates the JList used in the popup to display the items in the combo box model:::return->comboBox->getModel->new->JList<Object>
BasicComboPopup#configureList():::Configures the list which is used to hold the combo box items in the popup:::list->comboBox->getFont->setFont->list->comboBox->getForeground->setForeground->list->comboBox->getBackground->setBackground->list->UIManager->getColor->setSelectionForeground->list->UIManager->getColor->setSelectionBackground->list->setBorder->list->comboBox->getRenderer->setCellRenderer->list->setFocusable->list->setSelectionMode->comboBox->getSelectedIndex->setListSelection->installListListeners
BasicComboPopup#installListListeners():::Adds the listeners to the list control.:::if->createListMouseListener->list->addMouseListener->if->createListMouseMotionListener->list->addMouseMotionListener->if->createListSelectionListener->list->addListSelectionListener
BasicComboPopup#createScroller():::Creates the scroll pane which houses the scrollable list.:::sp->new->JScrollPane->sp->setHorizontalScrollBar->return
BasicComboPopup#configureScroller():::Configures the scrollable portion which holds the list within the combo box popup:::scroller->setFocusable->scroller->getVerticalScrollBar->setFocusable->scroller->setBorder->installScrollerListeners
BasicComboPopup#configurePopup():::Configures the popup portion of the combo box:::new->BoxLayout->setLayout->setBorderPainted->setBorder->setOpaque->add->setDoubleBuffered->setFocusable
BasicComboPopup#installComboBoxListeners():::This method adds the necessary listeners to the JComboBox.:::if->createPropertyChangeListener->comboBox->addPropertyChangeListener->if->createItemListener->comboBox->addItemListener->comboBox->getModel->installComboBoxModelListeners
BasicComboPopup#installComboBoxModelListeners(ComboBoxModel):::Installs the listeners on the combo box model:::if->createListDataListener->model->addListDataListener
BasicComboPopup#installKeyboardActions():::Registers keyboard actions.:::
BasicComboPopup.InvocationMouseHandler#mousePressed(MouseEvent):::Responds to mouse-pressed events on the combo box.:::getHandler->mousePressed
BasicComboPopup.InvocationMouseHandler#mouseReleased(MouseEvent):::Responds to the user terminating a click or drag that began on the combo box.:::getHandler->mouseReleased
BasicComboPopup#isFocusTraversable():::Overridden to unconditionally return false.:::return
BasicComboPopup#startAutoScrolling(int):::This protected method is implementation specific and should be private:::if->autoscrollTimer->stop->if->convertedPoint->SwingUtilities->new->Point->convertPoint->top->list->locationToIndex->list->setSelectedIndex->new->AutoScrollActionHandler->new->Timer->else->if->size->scroller->getSize->convertedPoint->SwingUtilities->new->Point->convertPoint->bottom->list->locationToIndex->list->setSelectedIndex->new->AutoScrollActionHandler->new->Timer->autoscrollTimer->start
BasicComboPopup#stopAutoScrolling():::This protected method is implementation specific and should be private:::if->autoscrollTimer->stop
BasicComboPopup#autoScrollUp():::This protected method is implementation specific and should be private:::index->list->getSelectedIndex->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicComboPopup#autoScrollDown():::This protected method is implementation specific and should be private:::index->list->getSelectedIndex->lastItem->list->getModel->getSize->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicComboPopup#getAccessibleContext():::Gets the AccessibleContext associated with this BasicComboPopup:::context->super->getAccessibleContext->context->setAccessibleParent->return
BasicComboPopup#delegateFocus(MouseEvent):::This is a utility method that helps event handlers figure out where to send the focus when the popup is brought up:::if->comboBox->isEditable->comp->comboBox->getEditor->getEditorComponent->if->isRequestFocusEnabled->comp->requestFocus->else->if->comboBox->isRequestFocusEnabled->comboBox->requestFocus
BasicComboPopup#togglePopup():::Makes the popup visible if it is hidden and makes it hidden if it is visible.:::if->isVisible->hide->else->show
BasicComboPopup#convertMouseEvent(MouseEvent):::Converts mouse event.:::convertedPoint->SwingUtilities->e->getSource->e->getPoint->convertPoint->newEvent->e->getSource->e->getID->e->getWhen->e->getModifiers->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->return
BasicComboPopup#getPopupHeightForRowCount(int):::Retrieves the height of the popup based on the current ListCellRenderer and the maximum row count.:::minRowCount->Math->comboBox->getItemCount->min->height->renderer->list->getCellRenderer->value->for->i->if->comboBox->getHeight->border->scroller->getViewportBorder->if->insets->border->getBorderInsets->scroller->getBorder->if->insets->border->getBorderInsets->return
BasicComboPopup#computePopupBounds(int, int, int, int):::Calculate the placement and size of the popup portion of the combo box based on the combo box location and the enclosing screen bounds:::toolkit->Toolkit->getDefaultToolkit->screenBounds->gc->comboBox->getGraphicsConfiguration->p->new->Point->SwingUtilities->convertPointFromScreen->if->screenInsets->toolkit->getScreenInsets->gc->getBounds->else->toolkit->getScreenSize->new->Rectangle->borderHeight->popupBorder->getBorder->if->borderInsets->popupBorder->getBorderInsets->rect->new->Rectangle->if->if->else->Math->max->Math->min->return
BasicComboPopup#updateListBoxSelectionForEvent(MouseEvent, boolean):::A utility method used by the event listeners:::location->anEvent->getPoint->if->return->index->list->locationToIndex->if->if->else->comboBox->getModel->getSize->if->list->getSelectedIndex->list->setSelectedIndex->if->list->ensureIndexIsVisible
BasicDesktopIconUI#createUI(JComponent):::Constructs a new instance of BasicDesktopIconUI.:::return->new->BasicDesktopIconUI
BasicDesktopIconUI#installComponents():::Registers components.:::new->BasicInternalFrameTitlePane->desktopIcon->new->BorderLayout->setLayout->desktopIcon->add
BasicDesktopIconUI#uninstallComponents():::Unregisters components.:::desktopIcon->remove->desktopIcon->setLayout
BasicDesktopIconUI#installListeners():::Registers listeners.:::createMouseInputListener->desktopIcon->addMouseMotionListener->desktopIcon->addMouseListener
BasicDesktopIconUI#uninstallListeners():::Unregisters listeners.:::desktopIcon->removeMouseMotionListener->desktopIcon->removeMouseListener
BasicDesktopIconUI#installDefaults():::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installProperty
BasicDesktopIconUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicDesktopIconUI#createMouseInputListener():::Returns a new instance of MouseInputListener.:::return->new->MouseInputHandler
BasicDesktopIconUI#getMaximumSize(JComponent):::Desktop icons can not be resized:::return->iconPane->getMaximumSize
BasicDesktopIconUI#getInsets(JComponent):::Returns the insets.:::iframe->desktopIcon->getInternalFrame->border->iframe->getBorder->if->return->border->getBorderInsets->return->new->Insets
BasicDesktopIconUI#deiconize():::De-iconifies the internal frame.:::try->frame->setIcon->catch->finally
BasicDesktopIconUI.MouseInputHandler#moveAndRepaint(JComponent, int, int, int, int):::Moves and repaints a component f.:::r->f->getBounds->f->setBounds->SwingUtilities->computeUnion->f->getParent->repaint
BasicDesktopPaneUI#createUI(JComponent):::Constructs a new instance of BasicDesktopPaneUI.:::return->new->BasicDesktopPaneUI
BasicDesktopPaneUI#installDefaults():::Installs default properties.:::if->desktop->getBackground->desktop->getBackground->desktop->UIManager->getColor->setBackground->LookAndFeel->installProperty
BasicDesktopPaneUI#uninstallDefaults():::Uninstalls default properties.:::
BasicDesktopPaneUI#installListeners():::Installs the PropertyChangeListener returned from createPropertyChangeListener on the JDesktopPane.:::createPropertyChangeListener->desktop->addPropertyChangeListener
BasicDesktopPaneUI#uninstallListeners():::Uninstalls the PropertyChangeListener returned from createPropertyChangeListener from the JDesktopPane.:::desktop->removePropertyChangeListener
BasicDesktopPaneUI#installDesktopManager():::Installs desktop manager.:::desktop->getDesktopManager->if->new->BasicDesktopManager->desktop->setDesktopManager
BasicDesktopPaneUI#uninstallDesktopManager():::Uninstalls desktop manager.:::if->desktop->getDesktopManager->desktop->setDesktopManager
BasicDesktopPaneUI#installKeyboardActions():::Installs keyboard actions.:::inputMap->getInputMap->if->SwingUtilities->replaceUIInputMap->getInputMap->if->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->registerKeyboardActions
BasicDesktopPaneUI#registerKeyboardActions():::Registers keyboard actions.:::
BasicDesktopPaneUI#unregisterKeyboardActions():::Unregisters keyboard actions.:::
BasicDesktopPaneUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::unregisterKeyboardActions->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicDesktopPaneUI#createPropertyChangeListener():::Returns the PropertyChangeListener to install on the JDesktopPane.:::return->getHandler
BasicDirectoryModel#invalidateFileCache():::This method is used to interrupt file loading thread.:::if->interrupt->filesLoader->cancelRunnables
BasicDirectoryModel#getDirectories():::Returns a list of directories.:::synchronized->if->return->fls->getFiles->return
BasicDirectoryModel#getFiles():::Returns a list of files.:::synchronized->if->return->new->Vector<File>->new->Vector<File>->directories->filechooser->getFileSystemView->filechooser->getCurrentDirectory->createFileObject->addElement->for->i->getSize->return
BasicDirectoryModel#validateFileCache():::Validates content of file cache.:::currentDirectory->filechooser->getCurrentDirectory->if->return->if->interrupt->filesLoader->cancelRunnables->setBusy->new->FilesLoader
BasicDirectoryModel#renameFile(File, File):::Renames a file in the underlying file system.:::synchronized->if->oldFile->renameTo->validateFileCache->return->return
BasicDirectoryModel#fireContentsChanged():::Invoked when a content is changed.:::getSize->fireContentsChanged
BasicDirectoryModel#contains(Object):::Returns true if an element o is in file cache, otherwise, returns false.:::return->fileCache->contains
BasicDirectoryModel#indexOf(Object):::Returns an index of element o in file cache.:::return->fileCache->indexOf
BasicDirectoryModel#intervalAdded(ListDataEvent):::Obsolete - not used.:::
BasicDirectoryModel#intervalRemoved(ListDataEvent):::Obsolete - not used.:::
BasicDirectoryModel#sort(Vector):::Sorts a list of files.:::ShellFolder->sort
BasicDirectoryModel#lt(File, File):::Obsolete - not used:::diff->a->getName->toLowerCase->b->getName->toLowerCase->compareTo->if->return->else->return->a->getName->b->getName->compareTo
BasicDirectoryModel#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
BasicDirectoryModel#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->changeSupport->removePropertyChangeListener
BasicDirectoryModel#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this component.:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
BasicDirectoryModel#firePropertyChange(String, Object, Object):::Support for reporting bound property changes for boolean properties:::if->changeSupport->firePropertyChange
BasicEditorPaneUI#createUI(JComponent):::Creates a UI for the JTextPane.:::return->new->BasicEditorPaneUI
BasicEditorPaneUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicEditorPaneUI#getEditorKit(JTextComponent):::Fetches the EditorKit for the UI:::pane->getComponent->return->pane->getEditorKit
BasicEditorPaneUI#getActionMap():::Fetch an action map to use:::am->new->ActionMapUIResource->am->new->FocusAction->put->editorKit->getComponent->getEditorKit->if->actions->editorKit->getActions->if->addActions->am->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->am->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->am->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put->return
BasicEditorPaneUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange->name->evt->getPropertyName->if->equals->map->SwingUtilities->getComponent->getUIActionMap->if->oldValue->evt->getOldValue->if->actions->getActions->if->removeActions->newValue->evt->getNewValue->if->actions->getActions->if->addActions->updateFocusTraversalKeys->else->if->equals->updateFocusTraversalKeys->else->if->equals->equals->equals->equals->equals->c->getComponent->c->getFont->c->getForeground->updateDisplayProperties->if->equals->equals->modelChanged->if->equals->honorDisplayPropertiesObject->c->getClientProperty->honorDisplayProperties->if->booleanValue->if->modelChanged
BasicFileChooserUI#createUI(JComponent):::Creates a BasicFileChooserUI implementation for the specified component:::return->new->BasicFileChooserUI
BasicFileChooserUI#installUI(JComponent):::Installs the UI.:::new->BorderLayout->new->JPanel->createModel->clearIconCache->installDefaults->installComponents->installListeners->filechooser->filechooser->getComponentOrientation->applyComponentOrientation
BasicFileChooserUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallListeners->uninstallComponents->uninstallDefaults->if->accessoryPanel->removeAll->getFileChooser->removeAll
BasicFileChooserUI#installComponents(JFileChooser):::Installs the components.:::
BasicFileChooserUI#uninstallComponents(JFileChooser):::Uninstalls the components.:::
BasicFileChooserUI#installListeners(JFileChooser):::Installs the listeners.:::createPropertyChangeListener->if->fc->addPropertyChangeListener->fc->getModel->addPropertyChangeListener->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->actionMap->getActionMap->SwingUtilities->replaceUIActionMap
BasicFileChooserUI#uninstallListeners(JFileChooser):::Uninstalls the listeners.:::if->fc->removePropertyChangeListener->fc->getModel->removePropertyChangeListener->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicFileChooserUI#installDefaults(JFileChooser):::Installs the defaults.:::installIcons->installStrings->UIManager->getBoolean->UIManager->getBoolean->th->fc->getTransferHandler->if->fc->setTransferHandler->LookAndFeel->installProperty
BasicFileChooserUI#installIcons(JFileChooser):::Installs the icons.:::UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon
BasicFileChooserUI#installStrings(JFileChooser):::Installs the strings.:::l->fc->getLocale->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->getMnemonic->getMnemonic->getMnemonic->getMnemonic->getMnemonic->getMnemonic->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString
BasicFileChooserUI#uninstallDefaults(JFileChooser):::Uninstalls the defaults.:::uninstallIcons->uninstallStrings->if->fc->getTransferHandler->fc->setTransferHandler
BasicFileChooserUI#uninstallIcons(JFileChooser):::Uninstalls the icons.:::
BasicFileChooserUI#uninstallStrings(JFileChooser):::Uninstalls the strings.:::
BasicFileChooserUI#createModel():::Creates the model.:::if->model->invalidateFileCache->getFileChooser->new->BasicDirectoryModel
BasicFileChooserUI#getModel():::Returns the model.:::return
BasicFileChooserUI#createPropertyChangeListener(JFileChooser):::Creates the property change listener.:::return
BasicFileChooserUI#getFileName():::Returns the file name.:::return
BasicFileChooserUI#getDirectoryName():::Returns the directory name.:::return
BasicFileChooserUI#setFileName(String):::Sets the file name.:::
BasicFileChooserUI#setDirectoryName(String):::Sets the directory name.:::
BasicFileChooserUI#getFileChooser():::Returns the file chooser.:::return
BasicFileChooserUI#getAccessoryPanel():::Returns the accessory panel.:::return
BasicFileChooserUI#getApproveButton(JFileChooser):::Returns the approve button.:::return
BasicFileChooserUI#getApproveButtonToolTipText(JFileChooser):::Returns the approve button tool tip.:::tooltipText->fc->getApproveButtonToolTipText->if->return->if->fc->getDialogType->return->else->if->fc->getDialogType->return->return
BasicFileChooserUI#clearIconCache():::Clears the icon cache.:::fileView->clearIconCache
BasicFileChooserUI#createDoubleClickListener(JFileChooser, JList):::Creates a double click listener.:::return->new->Handler
BasicFileChooserUI#createListSelectionListener(JFileChooser):::Creates a list selection listener.:::return->getHandler
BasicFileChooserUI.DoubleClickListener#mouseEntered(MouseEvent):::The JList used for representing the files is created by subclasses, but the selection is monitored in this class:::handler->mouseEntered
BasicFileChooserUI#isDirectorySelected():::Property to remember whether a directory is currently selected in the UI.:::return
BasicFileChooserUI#setDirectorySelected(boolean):::Property to remember whether a directory is currently selected in the UI:::
BasicFileChooserUI#getDirectory():::Property to remember the directory that is currently selected in the UI.:::return
BasicFileChooserUI#setDirectory(File):::Property to remember the directory that is currently selected in the UI:::
BasicFileChooserUI#getAcceptAllFileFilter(JFileChooser):::Returns the default accept all file filter:::return
BasicFileChooserUI#getDialogTitle(JFileChooser):::Returns the title of this dialog:::dialogTitle->fc->getDialogTitle->if->return->else->if->fc->getDialogType->return->else->if->fc->getDialogType->return->else->return->getApproveButtonText
BasicFileChooserUI#getApproveButtonMnemonic(JFileChooser):::Returns the approve button mnemonic.:::mnemonic->fc->getApproveButtonMnemonic->if->return->else->if->fc->getDialogType->return->else->if->fc->getDialogType->return->else->return
BasicFileChooserUI#getNewFolderAction():::Returns a new folder action.:::if->new->NewFolderAction->if->newFolderAction->setEnabled->return
BasicFileChooserUI#getGoHomeAction():::Returns a go home action.:::return
BasicFileChooserUI#getChangeToParentDirectoryAction():::Returns a change to parent directory action.:::return
BasicFileChooserUI#getApproveSelectionAction():::Returns an approve selection action.:::return
BasicFileChooserUI#getCancelSelectionAction():::Returns a cancel selection action.:::return
BasicFileChooserUI#getUpdateAction():::Returns an update action.:::return
BasicFileChooserUI.AcceptAllFileFilter#accept(File):::Returns true.:::return
BasicFileChooserUI.BasicFileView#clearIconCache():::Clears the icon cache.:::new->Hashtable<File,Icon>
BasicFileChooserUI.BasicFileView#getCachedIcon(File):::Returns the cached icon for the file.:::return->iconCache->get
BasicFileChooserUI.BasicFileView#cacheIcon(File, Icon):::Caches an icon for a file.:::if->return->iconCache->put
BasicFileChooserUI.BasicFileView#isHidden(File):::Returns whether or not a file is hidden.:::name->f->getName->if->name->charAt->return->else->return
BasicFileChooserUI.FileTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::values->if->getSelectedValues->else->if->table->rows->table->getSelectedRows->if->new->ObjectArr->for->i->if->return->plainBuf->new->StringBuilder->htmlBuf->new->StringBuilder->htmlBuf->append->foreach->val->obj->toString->plainBuf->append->append->htmlBuf->append->append->append->plainBuf->plainBuf->length->deleteCharAt->htmlBuf->append->return->plainBuf->toString->htmlBuf->toString->new->FileTransferable
BasicFileChooserUI.FileTransferHandler.FileTransferable#getRicherFlavors():::Best format of the file chooser is DataFlavor.javaFileListFlavor.:::flavors->new->DataFlavorArr->return
BasicFileChooserUI.FileTransferHandler.FileTransferable#getRicherData(DataFlavor):::The only richer format supported is the file list flavor:::if->equals->files->new->ArrayList<Object>->foreach->files->add->return->return
BasicFormattedTextFieldUI#createUI(JComponent):::Creates a UI for a JFormattedTextField.:::return->new->BasicFormattedTextFieldUI
BasicFormattedTextFieldUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicGraphicsUtils#drawEtchedRect(Graphics, int, int, int, int, Color, Color, Color, Color):::Draws an etched rectangle.:::oldColor->g->getColor->g->translate->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#getEtchedInsets():::Returns the amount of space taken up by a border drawn by drawEtchedRect():::return
BasicGraphicsUtils#drawGroove(Graphics, int, int, int, int, Color, Color):::Draws a groove.:::oldColor->g->getColor->g->translate->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#getGrooveInsets():::Returns the amount of space taken up by a border drawn by drawGroove():::return
BasicGraphicsUtils#drawBezel(Graphics, int, int, int, int, boolean, boolean, Color, Color, Color, Color):::Draws a bezel.:::oldColor->g->getColor->g->translate->if->g->setColor->g->drawRect->g->setColor->g->drawRect->else->if->drawLoweredBezel->else->if->g->setColor->g->drawRect->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate->g->setColor
BasicGraphicsUtils#drawLoweredBezel(Graphics, int, int, int, int, Color, Color, Color, Color):::Draws a lowered bezel.:::g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine
BasicGraphicsUtils#drawString(Graphics, String, int, int, int):::Draw a string with the graphics g at location (x,y) just like g.drawString would:::index->if->uc->Character->toUpperCase->lc->Character->toLowerCase->uci->text->indexOf->lci->text->indexOf->if->else->if->else->drawStringUnderlineCharAt
BasicGraphicsUtils#drawStringUnderlineCharAt(Graphics, String, int, int, int):::Draw a string with the graphics g at location (x, y) just like g.drawString would:::SwingUtilities2->drawStringUnderlineCharAt
BasicGraphicsUtils#drawDashedRect(Graphics, int, int, int, int):::Draws dashed rectangle.:::vx->vy->for->for
BasicGraphicsUtils#getPreferredButtonSize(AbstractButton, int):::Returns the preferred size of the button.:::if->b->getComponentCount->return->icon->b->getIcon->text->b->getText->font->b->getFont->fm->b->getFontMetrics->iconR->new->Rectangle->textR->new->Rectangle->viewR->new->Rectangle->SwingUtilities->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->layoutCompoundLabel->r->iconR->union->insets->b->getInsets->return->r->getSize
BasicGraphicsUtils#drawString(JComponent, Graphics2D, String, float, float):::Draws the given string at the specified location using text properties and anti-aliasing hints from the provided component:::SwingUtilities2->drawString
BasicGraphicsUtils#drawStringUnderlineCharAt(JComponent, Graphics2D, String, int, float, float):::Draws the given string at the specified location underlining the specified character:::SwingUtilities2->drawStringUnderlineCharAt
BasicGraphicsUtils#getClippedString(JComponent, FontMetrics, String, int):::Clips the passed in string to the space provided:::return->SwingUtilities2->clipStringIfNecessary
BasicGraphicsUtils#getStringWidth(JComponent, FontMetrics, String):::Returns the width of the passed in string using text properties and anti-aliasing hints from the provided component:::return->SwingUtilities2->stringWidth
BasicHTML#createHTMLView(JComponent, String):::Create an html renderer for the given component and string of html.:::kit->getFactory->doc->kit->c->getFont->c->getForeground->createDefaultDocument->base->c->getClientProperty->if->setBase->r->new->StringReader->try->kit->read->catch->finally->f->kit->getViewFactory->hview->f->doc->getDefaultRootElement->create->v->new->Renderer->return
BasicHTML#getHTMLBaseline(View, int, int):::Returns the baseline for the html renderer.:::if->throw->new->IllegalArgumentException->if->return->view->getView->getBaseline->return
BasicHTML#getBaseline(JComponent, int, int, int, int):::Gets the baseline for the specified component:::view->c->getClientProperty->if->baseline->getHTMLBaseline->if->return->return->return
BasicHTML#getBaseline(View, int, int):::Gets the baseline for the specified View.:::if->hasParagraph->view->setSize->return->new->Rectangle->getBaseline->return
BasicHTML#isHTMLString(String):::Check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering.:::if->if->s->length->s->charAt->s->charAt->tag->s->substring->return->tag->equalsIgnoreCase->return
BasicHTML#updateRenderer(JComponent, String):::Stash the HTML render for the given text into the client properties of the given JComponent:::value->oldValue->c->getClientProperty->htmlDisabled->c->getClientProperty->if->BasicHTML->isHTMLString->BasicHTML->createHTMLView->if->for->i->oldValue->getViewCount->c->putClientProperty->currentAccessibleNameProperty->c->getClientProperty->previousParsedText->if->try->oldValue->getDocument->oldValue->getDocument->getLength->getText->strip->catch->finally->if->currentAccessibleNameProperty->equals->parsedText->if->try->value->getDocument->value->getDocument->getLength->getText->strip->catch->finally->c->putClientProperty
BasicHTML.BasicEditorKit#getStyleSheet():::Overriden to return our own slimmed down style sheet.:::if->new->StyleSheet->r->new->StringReader->try->defaultStyles->loadRules->catch->finally->r->close->defaultStyles->super->getStyleSheet->addStyleSheet->return
BasicHTML.BasicEditorKit#createDefaultDocument(Font, Color):::Sets the async policy to flush everything in one chunk, and to not display unknown tags.:::styles->getStyleSheet->ss->new->StyleSheet->ss->addStyleSheet->doc->new->BasicDocument->doc->setAsynchronousLoadPriority->doc->setPreservesUnknownTags->return
BasicHTML.BasicEditorKit#getViewFactory():::Returns the ViewFactory that is used to make sure the Views don't load in the background.:::return
BasicHTML.Renderer#getAttributes():::Fetches the attributes to use when rendering:::return
BasicHTML.Renderer#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::if->return->return->view->getPreferredSpan
BasicHTML.Renderer#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::return->view->getMinimumSpan
BasicHTML.Renderer#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return
BasicHTML.Renderer#preferenceChanged(View, boolean, boolean):::Specifies that a preference has changed:::host->revalidate->host->repaint
BasicHTML.Renderer#getAlignment(int):::Determines the desired alignment for this view along an axis.:::return->view->getAlignment
BasicHTML.Renderer#paint(Graphics, Shape):::Renders the view.:::alloc->allocation->getBounds->view->setSize->view->paint
BasicHTML.Renderer#setParent(View):::Sets the view parent.:::throw->new->Error
BasicHTML.Renderer#getViewCount():::Returns the number of views in this view:::return
BasicHTML.Renderer#getView(int):::Gets the n-th view in this container.:::return
BasicHTML.Renderer#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->view->modelToView
BasicHTML.Renderer#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->view->modelToView
BasicHTML.Renderer#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->view->viewToModel
BasicHTML.Renderer#getDocument():::Returns the document model underlying the view.:::return->view->getDocument
BasicHTML.Renderer#getStartOffset():::Returns the starting offset into the model for this view.:::return->view->getStartOffset
BasicHTML.Renderer#getEndOffset():::Returns the ending offset into the model for this view.:::return->view->getEndOffset
BasicHTML.Renderer#getElement():::Gets the element that this view is mapped to.:::return->view->getElement
BasicHTML.Renderer#setSize(float, float):::Sets the view size.:::view->setSize
BasicHTML.Renderer#getContainer():::Fetches the container hosting the view:::return
BasicHTML.Renderer#getViewFactory():::Fetches the factory to be used for building the various view fragments that make up the view that represents the model:::return
BasicIconFactory#getMenuItemCheckIcon():::Returns a menu item check icon.:::if->new->MenuItemCheckIcon->return
BasicIconFactory#getMenuItemArrowIcon():::Returns a menu item arrow icon.:::if->new->MenuItemArrowIcon->return
BasicIconFactory#getMenuArrowIcon():::Returns a menu arrow icon.:::if->new->MenuArrowIcon->return
BasicIconFactory#getCheckBoxIcon():::Returns a check box icon.:::if->new->CheckBoxIcon->return
BasicIconFactory#getRadioButtonIcon():::Returns a radio button icon.:::if->new->RadioButtonIcon->return
BasicIconFactory#getCheckBoxMenuItemIcon():::Returns a check box menu item icon.:::if->new->CheckBoxMenuItemIcon->return
BasicIconFactory#getRadioButtonMenuItemIcon():::Returns a radio button menu item icon.:::if->new->RadioButtonMenuItemIcon->return
BasicIconFactory#createEmptyFrameIcon():::Returns an empty frame icon.:::if->new->EmptyFrameIcon->return
BasicInternalFrameTitlePane#installTitlePane():::Installs the title pane.:::installDefaults->installListeners->createActions->enableActions->createActionMap->createLayout->setLayout->assembleSystemMenu->createButtons->addSubComponents->updateProperties
BasicInternalFrameTitlePane#addSubComponents():::Adds subcomponents.:::add->add->add->add
BasicInternalFrameTitlePane#createActions():::Creates actions.:::new->MaximizeAction->new->IconifyAction->new->CloseAction->new->RestoreAction->new->MoveAction->new->SizeAction
BasicInternalFrameTitlePane#installListeners():::Registers listeners.:::if->createPropertyChangeListener->frame->addPropertyChangeListener
BasicInternalFrameTitlePane#uninstallListeners():::Unregisters listeners.:::frame->removePropertyChangeListener
BasicInternalFrameTitlePane#installDefaults():::Installs default properties.:::UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getIcon->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getFont->setFont->UIManager->getString->UIManager->getString->UIManager->getString->UIManager->getString
BasicInternalFrameTitlePane#uninstallDefaults():::Uninstalls default properties.:::
BasicInternalFrameTitlePane#createButtons():::Creates buttons.:::new->NoFocusButton->iconButton->addActionListener->if->iconButtonToolTip->length->iconButton->setToolTipText->new->NoFocusButton->maxButton->addActionListener->new->NoFocusButton->closeButton->addActionListener->if->closeButtonToolTip->length->closeButton->setToolTipText->setButtonIcons
BasicInternalFrameTitlePane#setButtonIcons():::Sets the button icons.:::if->frame->isIcon->if->iconButton->setIcon->if->restoreButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->maxButtonToolTip->length->maxButton->setToolTipText->else->if->frame->isMaximum->if->iconButton->setIcon->if->iconButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->restoreButtonToolTip->length->maxButton->setToolTipText->else->if->iconButton->setIcon->if->iconButtonToolTip->length->iconButton->setToolTipText->if->maxButton->setIcon->if->maxButtonToolTip->length->maxButton->setToolTipText->if->closeButton->setIcon
BasicInternalFrameTitlePane#assembleSystemMenu():::Assembles system menu.:::createSystemMenuBar->createSystemMenu->menuBar->add->addSystemMenuItems->enableActions
BasicInternalFrameTitlePane#addSystemMenuItems(JMenu):::Adds system menu items to systemMenu.:::mi->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->add->mi->getButtonMnemonic->setMnemonic->systemMenu->new->JSeparator->add->systemMenu->add->mi->getButtonMnemonic->setMnemonic
BasicInternalFrameTitlePane#createSystemMenu():::Returns a new instance of JMenu.:::return->new->JMenu
BasicInternalFrameTitlePane#createSystemMenuBar():::Returns a new instance of JMenuBar.:::new->SystemMenuBar->menuBar->setBorderPainted->return
BasicInternalFrameTitlePane#showSystemMenu():::Shows system menu.:::windowMenu->doClick
BasicInternalFrameTitlePane#paintTitleBackground(Graphics):::Invoked from paintComponent:::isSelected->frame->isSelected->if->g->setColor->else->g->setColor->g->getWidth->getHeight->fillRect
BasicInternalFrameTitlePane#getTitle(String, FontMetrics, int):::Returns the title.:::return->SwingUtilities2->clipStringIfNecessary
BasicInternalFrameTitlePane#postClosingEvent(JInternalFrame):::Post a WINDOW_CLOSING-like event to the frame, so that it can be treated like a regular Frame.:::e->new->InternalFrameEvent->try->Toolkit->getDefaultToolkit->getSystemEventQueue->postEvent->catch->frame->dispatchEvent->finally
BasicInternalFrameTitlePane#enableActions():::Enables actions.:::restoreAction->frame->isMaximum->frame->isIcon->setEnabled->maximizeAction->frame->isMaximizable->frame->isMaximum->frame->isIcon->frame->isMaximizable->frame->isIcon->setEnabled->iconifyAction->frame->isIconifiable->frame->isIcon->setEnabled->closeAction->frame->isClosable->setEnabled->sizeAction->setEnabled->moveAction->setEnabled
BasicInternalFrameTitlePane#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicInternalFrameTitlePane#createLayout():::Returns a layout manager.:::return->getHandler
BasicInternalFrameUI#createUI(JComponent):::Returns a component UI.:::return->new->BasicInternalFrameUI
BasicInternalFrameUI#installUI(JComponent):::Installs the UI.:::installDefaults->installListeners->installComponents->installKeyboardActions->LookAndFeel->installProperty
BasicInternalFrameUI#uninstallUI(JComponent):::Uninstalls the UI.:::if->throw->new->IllegalComponentStateException->uninstallKeyboardActions->uninstallComponents->uninstallListeners->uninstallDefaults->updateFrameCursor
BasicInternalFrameUI#installDefaults():::Installs the defaults.:::frameIcon->frame->getFrameIcon->if->frame->UIManager->getIcon->setFrameIcon->contentPane->frame->getContentPane->if->bg->contentPane->getBackground->if->contentPane->setBackground->frame->createLayoutManager->setLayout->frame->UIManager->getLookAndFeelDefaults->getColor->setBackground->LookAndFeel->installBorder
BasicInternalFrameUI#installKeyboardActions():::Installs the keyboard actions.:::createInternalFrameListener->if->frame->addInternalFrameListener->LazyActionMap->installLazyActionMap
BasicInternalFrameUI#installComponents():::Installs the components.:::createNorthPane->setNorthPane->createSouthPane->setSouthPane->createEastPane->setEastPane->createWestPane->setWestPane
BasicInternalFrameUI#installListeners():::Installs the listeners.:::createBorderListener->createPropertyChangeListener->frame->addPropertyChangeListener->installMouseHandlers->createGlassPaneDispatcher->if->frame->getGlassPane->addMouseListener->frame->getGlassPane->addMouseMotionListener->createComponentListener->if->frame->getParent->frame->getParent->getBounds->if->frame->getParent->frame->getParent->addComponentListener
BasicInternalFrameUI#uninstallDefaults():::Uninstalls the defaults.:::frameIcon->frame->getFrameIcon->if->frame->setFrameIcon->frame->setLayout->LookAndFeel->uninstallBorder
BasicInternalFrameUI#uninstallComponents():::Uninstalls the components.:::setNorthPane->setSouthPane->setEastPane->setWestPane->if->titlePane->uninstallDefaults
BasicInternalFrameUI#uninstallListeners():::Uninstalls the listeners.:::if->frame->getParent->frame->getParent->removeComponentListener->if->frame->getGlassPane->removeMouseListener->frame->getGlassPane->removeMouseMotionListener->deinstallMouseHandlers->frame->removePropertyChangeListener
BasicInternalFrameUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::if->frame->removeInternalFrameListener->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicInternalFrameUI#createLayoutManager():::Creates the layout manager.:::return->getHandler
BasicInternalFrameUI#createPropertyChangeListener():::Creates the property change listener.:::return->getHandler
BasicInternalFrameUI#getPreferredSize(JComponent):::Returns the preferred size.:::if->return->frame->getLayout->preferredLayoutSize->return->new->Dimension
BasicInternalFrameUI#getMinimumSize(JComponent):::Returns the minimum size.:::if->return->frame->getLayout->minimumLayoutSize->return->new->Dimension
BasicInternalFrameUI#getMaximumSize(JComponent):::Returns the maximum size.:::return->new->Dimension
BasicInternalFrameUI#replacePane(JComponent, JComponent):::Installs necessary mouse handlers on newPane and adds it to the frame:::if->deinstallMouseHandlers->frame->remove->if->frame->add->installMouseHandlers
BasicInternalFrameUI#deinstallMouseHandlers(JComponent):::Deinstalls the mouse handlers.:::c->removeMouseListener->c->removeMouseMotionListener
BasicInternalFrameUI#installMouseHandlers(JComponent):::Installs the mouse handlers.:::c->addMouseListener->c->addMouseMotionListener
BasicInternalFrameUI#createNorthPane(JInternalFrame):::Creates the north pane.:::new->BasicInternalFrameTitlePane->return
BasicInternalFrameUI#createSouthPane(JInternalFrame):::Creates the north pane.:::return
BasicInternalFrameUI#createWestPane(JInternalFrame):::Creates the west pane.:::return
BasicInternalFrameUI#createEastPane(JInternalFrame):::Creates the east pane.:::return
BasicInternalFrameUI#createBorderListener(JInternalFrame):::Creates the border listener.:::return->new->BorderListener
BasicInternalFrameUI#createInternalFrameListener():::Creates the internal frame listener.:::getHandler
BasicInternalFrameUI#isKeyBindingRegistered():::Returns whether or no the key binding is registered.:::return
BasicInternalFrameUI#setKeyBindingRegistered(boolean):::Sets the key binding registration.:::
BasicInternalFrameUI#isKeyBindingActive():::Returns whether or no the key binding is active.:::return
BasicInternalFrameUI#setKeyBindingActive(boolean):::Sets the key binding activity.:::
BasicInternalFrameUI#setupMenuOpenKey():::Setup the menu open key.:::map->getInputMap->SwingUtilities->replaceUIInputMap
BasicInternalFrameUI#setupMenuCloseKey():::Setup the menu close key.:::
BasicInternalFrameUI#getNorthPane():::Returns the north pane.:::return
BasicInternalFrameUI#setNorthPane(JComponent):::Sets the north pane.:::if->uninstallListeners->replacePane->if
BasicInternalFrameUI#getSouthPane():::Returns the south pane.:::return
BasicInternalFrameUI#setSouthPane(JComponent):::Sets the south pane.:::
BasicInternalFrameUI#getWestPane():::Returns the west pane.:::return
BasicInternalFrameUI#setWestPane(JComponent):::Sets the west pane.:::
BasicInternalFrameUI#getEastPane():::Returns the east pane.:::return
BasicInternalFrameUI#setEastPane(JComponent):::Sets the east pane.:::
BasicInternalFrameUI.InternalFramePropertyChangeListener#propertyChange(PropertyChangeEvent):::Detects changes in state from the JInternalFrame and handles actions.:::getHandler->propertyChange
BasicInternalFrameUI#getDesktopManager():::Returns the proper DesktopManager:::if->frame->getDesktopPane->frame->getDesktopPane->getDesktopManager->return->frame->getDesktopPane->getDesktopManager->if->createDesktopManager->return
BasicInternalFrameUI#createDesktopManager():::Creates the desktop manager.:::return->new->DefaultDesktopManager
BasicInternalFrameUI#closeFrame(JInternalFrame):::This method is called when the user wants to close the frame:::BasicLookAndFeel->playSound->getDesktopManager->closeFrame
BasicInternalFrameUI#maximizeFrame(JInternalFrame):::This method is called when the user wants to maximize the frame:::BasicLookAndFeel->playSound->getDesktopManager->maximizeFrame
BasicInternalFrameUI#minimizeFrame(JInternalFrame):::This method is called when the user wants to minimize the frame:::if->f->isIcon->BasicLookAndFeel->playSound->getDesktopManager->minimizeFrame
BasicInternalFrameUI#iconifyFrame(JInternalFrame):::This method is called when the user wants to iconify the frame:::BasicLookAndFeel->playSound->getDesktopManager->iconifyFrame
BasicInternalFrameUI#deiconifyFrame(JInternalFrame):::This method is called when the user wants to deiconify the frame:::if->f->isMaximum->BasicLookAndFeel->playSound->getDesktopManager->deiconifyFrame
BasicInternalFrameUI#activateFrame(JInternalFrame):::This method is called when the frame becomes selected:::getDesktopManager->activateFrame
BasicInternalFrameUI#deactivateFrame(JInternalFrame):::This method is called when the frame is no longer selected:::getDesktopManager->deactivateFrame
BasicInternalFrameUI.ComponentHandler#componentResized(ComponentEvent):::Invoked when a JInternalFrame's parent's size changes.:::getHandler->componentResized
BasicInternalFrameUI#createComponentListener():::Creates a component listener.:::return->getHandler
BasicInternalFrameUI#createGlassPaneDispatcher():::Creates a GlassPaneDispatcher.:::return
BasicLabelUI#layoutCL(JLabel, FontMetrics, String, Icon, Rectangle, Rectangle, Rectangle):::Forwards the call to SwingUtilities.layoutCompoundLabel():::return->SwingUtilities->label->getVerticalAlignment->label->getHorizontalAlignment->label->getVerticalTextPosition->label->getHorizontalTextPosition->label->getIconTextGap->layoutCompoundLabel
BasicLabelUI#paintEnabledText(JLabel, Graphics, String, int, int):::Paint clippedText at textX, textY with the labels foreground color.:::mnemIndex->l->getDisplayedMnemonicIndex->g->l->getForeground->setColor->SwingUtilities2->drawStringUnderlineCharAt
BasicLabelUI#paintDisabledText(JLabel, Graphics, String, int, int):::Paint clippedText at textX, textY with background.lighter() and then shifted down and to the right by one pixel with background.darker().:::accChar->l->getDisplayedMnemonicIndex->background->l->getBackground->g->background->brighter->setColor->SwingUtilities2->drawStringUnderlineCharAt->g->background->darker->setColor->SwingUtilities2->drawStringUnderlineCharAt
BasicLabelUI#paint(Graphics, JComponent):::Paints the label text with the foreground color, if the label is opaque then paints the entire background with the background color:::label->text->label->getText->icon->label->isEnabled->label->getIcon->label->getDisabledIcon->if->return->fm->SwingUtilities2->getFontMetrics->clippedText->c->getWidth->c->getHeight->layout->if->icon->paintIcon->if->v->c->getClientProperty->if->v->paint->else->textX->textY->fm->getAscent->if->label->isEnabled->paintEnabledText->else->paintDisabledText
BasicLabelUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->label->text->label->getText->if->equals->label->getFont->return->fm->label->label->getFont->getFontMetrics->layout->return->BasicHTML->fm->getAscent->getBaseline
BasicLabelUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->c->getClientProperty->return->switch->getVerticalAlignment->return->return->return->return
BasicLabelUI#installDefaults(JLabel):::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicLabelUI#installListeners(JLabel):::Registers listeners.:::c->addPropertyChangeListener
BasicLabelUI#installComponents(JLabel):::Registers components.:::BasicHTML->c->getText->updateRenderer->c->setInheritsPopupMenu
BasicLabelUI#installKeyboardActions(JLabel):::Registers keyboard actions.:::dka->l->getDisplayedMnemonic->lf->l->getLabelFor->if->LazyActionMap->installLazyActionMap->inputMap->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->inputMap->clear->inputMap->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->inputMap->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put->else->inputMap->SwingUtilities->getUIInputMap->if->inputMap->clear
BasicLabelUI#uninstallDefaults(JLabel):::Uninstalls default properties.:::
BasicLabelUI#uninstallListeners(JLabel):::Unregisters listeners.:::c->removePropertyChangeListener
BasicLabelUI#uninstallComponents(JLabel):::Unregisters components.:::BasicHTML->updateRenderer
BasicLabelUI#uninstallKeyboardActions(JLabel):::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicLabelUI#createUI(JComponent):::Returns an instance of BasicLabelUI.:::if->System->getSecurityManager->appContext->AppContext->getAppContext->safeBasicLabelUI->appContext->get->if->new->BasicLabelUI->appContext->put->return->return
BasicListUI#paintCell(Graphics, int, Rectangle, ListCellRenderer, ListModel, ListSelectionModel, int):::Paint one List cell: compute the relevant state, get the "rubber stamp" cell renderer component, and then use the CellRendererPane to paint it:::value->dataModel->getElementAt->cellHasFocus->list->hasFocus->isSelected->selModel->isSelectedIndex->rendererComponent->cellRenderer->getListCellRendererComponent->cx->cy->cw->ch->if->w->Math->rendererComponent->getPreferredSize->min->if->rendererPane->paintComponent
BasicListUI#paint(Graphics, JComponent):::Paint the rows that intersect the Graphics objects clipRect:::clip->g->getClip->paintImpl->g->setClip->paintDropLine
BasicListUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->rowHeight->list->getFixedCellHeight->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->lcr->UIManager->get->if->new->DefaultListCellRenderer->lcr->getListCellRendererComponent->lafDefaults->put->renderer->list->getFont->setFont->if->renderer->getPreferredSize->return->renderer->getBaseline->list->getInsets
BasicListUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicListUI#getPreferredSize(JComponent):::The preferredSize of the list depends upon the layout orientation:::maybeUpdateLayoutState->lastRow->list->getModel->getSize->if->return->new->Dimension->insets->list->getInsets->width->height->if->else->bounds->getCellBounds->if->else->return->new->Dimension
BasicListUI#selectPreviousIndex():::Selected the previous row and force it to be visible.:::s->list->getSelectedIndex->if->list->setSelectedIndex->list->ensureIndexIsVisible
BasicListUI#selectNextIndex():::Selected the previous row and force it to be visible.:::s->list->getSelectedIndex->if->list->getModel->getSize->list->setSelectedIndex->list->ensureIndexIsVisible
BasicListUI#installKeyboardActions():::Registers the keyboard bindings on the JList that the BasicListUI is associated with:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicListUI#uninstallKeyboardActions():::Unregisters keyboard actions installed from installKeyboardActions:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicListUI#installListeners():::Creates and installs the listeners for the JList, its model, and its selectionModel:::th->list->getTransferHandler->if->list->setTransferHandler->if->list->getDropTarget->list->setDropTarget->createFocusListener->createMouseInputListener->createPropertyChangeListener->createListSelectionListener->createListDataListener->list->addFocusListener->list->addMouseListener->list->addMouseMotionListener->list->addPropertyChangeListener->list->getHandler->addKeyListener->model->list->getModel->if->model->addListDataListener->selectionModel->list->getSelectionModel->if->selectionModel->addListSelectionListener
BasicListUI#uninstallListeners():::Removes the listeners from the JList, its model, and its selectionModel:::list->removeFocusListener->list->removeMouseListener->list->removeMouseMotionListener->list->removePropertyChangeListener->list->getHandler->removeKeyListener->model->list->getModel->if->model->removeListDataListener->selectionModel->list->getSelectionModel->if->selectionModel->removeListSelectionListener
BasicListUI#installDefaults():::Initializes list properties such as font, foreground, and background, and adds the CellRendererPane:::list->setLayout->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->if->list->getCellRenderer->tmp->UIManager->get->list->setCellRenderer->sbg->list->getSelectionBackground->if->list->UIManager->getColor->setSelectionBackground->sfg->list->getSelectionForeground->if->list->UIManager->getColor->setSelectionForeground->l->UIManager->get->l->longValue->updateIsFileList
BasicListUI#uninstallDefaults():::Sets the list properties that have not been explicitly overridden to null:::LookAndFeel->uninstallBorder->if->list->getFont->list->setFont->if->list->getForeground->list->setForeground->if->list->getBackground->list->setBackground->if->list->getSelectionBackground->list->setSelectionBackground->if->list->getSelectionForeground->list->setSelectionForeground->if->list->getCellRenderer->list->setCellRenderer->if->list->getTransferHandler->list->setTransferHandler
BasicListUI#installUI(JComponent):::Initializes this.list by calling installDefaults(), installListeners(), and installKeyboardActions() in order.:::tmp->list->getLayoutOrientation->new->CellRendererPane->list->add->list->getComponentOrientation->isLeftToRight->installDefaults->installListeners->installKeyboardActions
BasicListUI#uninstallUI(JComponent):::Uninitializes this.list by calling uninstallListeners(), uninstallKeyboardActions(), and uninstallDefaults() in order:::uninstallListeners->uninstallDefaults->uninstallKeyboardActions->list->remove
BasicListUI#createUI(JComponent):::Returns a new instance of BasicListUI:::return->new->BasicListUI
BasicListUI#getRowHeight(int):::Returns the height of the specified row based on the current layout.:::return->getHeight
BasicListUI#convertYToRow(int):::Convert the JList relative coordinate to the row that contains it, based on the current layout:::return->convertLocationToRow
BasicListUI#convertRowToY(int):::Return the JList relative Y coordinate of the origin of the specified row or -1 if row isn't valid.:::if->getRowCount->return->bounds->getCellBounds->return
BasicListUI#maybeUpdateLayoutState():::If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset updateLayoutStateNeeded:::if->updateLayoutState
BasicListUI#updateLayoutState():::Recompute the value of cellHeight or cellHeights based and cellWidth, based on the current font and the current values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.:::fixedCellHeight->list->getFixedCellHeight->fixedCellWidth->list->getFixedCellWidth->if->else->list->getModel->getSize->new->intArr->if->dataModel->list->getModel->dataModelSize->dataModel->getSize->renderer->list->getCellRenderer->if->for->index->else->if->if->new->intArr->for->index->if->updateHorizontalLayoutState
BasicListUI#createMouseInputListener():::Creates a delegate that implements MouseInputListener:::return->getHandler
BasicListUI.FocusHandler#repaintCellFocus():::Repaints focused cells.:::getHandler->repaintCellFocus
BasicListUI#createFocusListener():::Returns an instance of FocusListener.:::return->getHandler
BasicListUI#createListSelectionListener():::Creates an instance of ListSelectionHandler that's added to the JLists by selectionModel as needed:::return->getHandler
BasicListUI#createListDataListener():::Creates an instance of ListDataListener that's added to the JLists by model as needed:::return->getHandler
BasicListUI#createPropertyChangeListener():::Creates an instance of PropertyChangeHandler that's added to the JList by installUI():::return->getHandler
BasicListUI.ListTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->list->values->list->getSelectedValues->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->for->i->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicLookAndFeel#getDefaults():::Returns the look and feel defaults:::table->new->UIDefaults->initClassDefaults->initSystemColorDefaults->initComponentDefaults->return
BasicLookAndFeel#initClassDefaults(UIDefaults):::Populates table with mappings from uiClassID to the fully qualified name of the ui class:::basicPackageName->uiDefaults->table->putDefaults
BasicLookAndFeel#initSystemColorDefaults(UIDefaults):::Populates table with system colors:::defaultSystemColors->isNativeLookAndFeel->loadSystemColors
BasicLookAndFeel#loadSystemColors(UIDefaults, String[], boolean):::Populates table with the name-color pairs in systemColors:::if->for->i->else->for->i
BasicLookAndFeel#initComponentDefaults(UIDefaults):::Populates table with the defaults for the basic look and feel.:::initResourceBundle->fiveHundred->oneThousand->dialogPlain12->new->FontUIResource->serifPlain12->new->FontUIResource->sansSerifPlain12->new->FontUIResource->monospacedPlain12->new->FontUIResource->dialogBold12->new->FontUIResource->red->new->ColorUIResource->black->new->ColorUIResource->white->new->ColorUIResource->yellow->new->ColorUIResource->gray->new->ColorUIResource->lightGray->new->ColorUIResource->darkGray->new->ColorUIResource->scrollBarTrack->new->ColorUIResource->control->table->getColor->controlDkShadow->table->getColor->controlHighlight->table->getColor->controlLtHighlight->table->getColor->controlShadow->table->getColor->controlText->table->getColor->menu->table->getColor->menuText->table->getColor->textHighlight->table->getColor->textHighlightText->table->getColor->textInactiveText->table->getColor->textText->table->getColor->window->table->getColor->zeroInsets->new->InsetsUIResource->twoInsets->new->InsetsUIResource->threeInsets->new->InsetsUIResource->marginBorder->new->BasicBorders.MarginBorder->etchedBorder->BorderUIResource->getEtchedBorderUIResource->loweredBevelBorder->BorderUIResource->getLoweredBevelBorderUIResource->popupMenuBorder->BasicBorders->getInternalFrameBorder->blackLineBorder->BorderUIResource->getBlackLineBorderUIResource->focusCellHighlightBorder->new->BorderUIResource.LineBorderUIResource->noFocusBorder->new->BorderUIResource.EmptyBorderUIResource->tableHeaderBorder->new->BorderUIResource.BevelBorderUIResource->buttonBorder->BasicBorders->getButtonBorder->buttonToggleBorder->BasicBorders->getToggleButtonBorder->radioButtonBorder->BasicBorders->getRadioButtonBorder->newFolderIcon->SwingUtilities2->getClass->makeIcon->upFolderIcon->SwingUtilities2->getClass->makeIcon->homeFolderIcon->SwingUtilities2->getClass->makeIcon->detailsViewIcon->SwingUtilities2->getClass->makeIcon->listViewIcon->SwingUtilities2->getClass->makeIcon->directoryIcon->SwingUtilities2->getClass->makeIcon->fileIcon->SwingUtilities2->getClass->makeIcon->computerIcon->SwingUtilities2->getClass->makeIcon->hardDriveIcon->SwingUtilities2->getClass->makeIcon->floppyDriveIcon->SwingUtilities2->getClass->makeIcon->internalFrameBorder->BasicBorders->getInternalFrameBorder->listCellRendererActiveValue->new->UIDefaults.ActiveValue->menuBarBorder->BasicBorders->getMenuBarBorder->menuItemCheckIcon->BasicIconFactory->getMenuItemCheckIcon->menuItemArrowIcon->BasicIconFactory->getMenuItemArrowIcon->menuArrowIcon->BasicIconFactory->getMenuArrowIcon->checkBoxIcon->BasicIconFactory->getCheckBoxIcon->radioButtonIcon->BasicIconFactory->getRadioButtonIcon->checkBoxMenuItemIcon->BasicIconFactory->getCheckBoxMenuItemIcon->radioButtonMenuItemIcon->BasicIconFactory->getRadioButtonMenuItemIcon->menuItemAcceleratorDelimiter->optionPaneMinimumSize->new->DimensionUIResource->zero->zeroBorder->new->BorderUIResource.EmptyBorderUIResource->ten->optionPaneBorder->new->BorderUIResource.EmptyBorderUIResource->optionPaneButtonAreaBorder->new->BorderUIResource.EmptyBorderUIResource->progressBarBorder->BasicBorders->getProgressBarBorder->minimumThumbSize->new->DimensionUIResource->maximumThumbSize->new->DimensionUIResource->sliderFocusInsets->toolBarSeparatorSize->new->DimensionUIResource->splitPaneBorder->BasicBorders->getSplitPaneBorder->splitPaneDividerBorder->BasicBorders->getSplitPaneDividerBorder->tabbedPaneTabInsets->new->InsetsUIResource->tabbedPaneTabPadInsets->new->InsetsUIResource->tabbedPaneTabAreaInsets->new->InsetsUIResource->tabbedPaneContentBorderInsets->new->InsetsUIResource->textFieldBorder->BasicBorders->getTextFieldBorder->editorMargin->caretBlinkRate->allAuditoryCues->new->ObjectArr->noAuditoryCues->new->ObjectArr->defaults->new->InsetsUIResource->new->ObjectArr->new->UIDefaults.LazyInputMap->new->InsetsUIResource->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->SwingUtilities2->getClass->makeIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->BasicIconFactory->createEmptyFrameIcon->table->get->table->get->table->get->table->get->new->ObjectArr->table->get->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->intArr->SwingUtilities2->getSystemMnemonicKeyMask->SwingUtilities2->SwingUtilities2->getSystemMnemonicKeyMask->setAltGraphMask->new->ObjectArr->new->ObjectArr->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->DimensionUIResource->new->DimensionUIResource->table->get->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->Dimension->new->Dimension->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->Dimension->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->SortArrowIcon->new->SortArrowIcon->table->getColor->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->UIDefaults.LazyInputMap->table->get->table->get->table->get->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->SwingUtilities2->getClass->makeIcon->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->new->UIDefaults.LazyInputMap->new->ObjectArr->table->putDefaults
BasicLookAndFeel#getUIOfType(ComponentUI, Class):::Returns the ui that is of type klass, or null if one can not be found.:::if->klass->isInstance->return->return
BasicLookAndFeel#getAudioActionMap():::Returns an ActionMap containing the audio actions for this look and feel:::audioActionMap->UIManager->get->if->acList->UIManager->get->if->new->ActionMapUIResource->for->counter->UIManager->getLookAndFeelDefaults->put->return
BasicLookAndFeel#createAudioAction(Object):::Creates and returns an Action used to play a sound:::if->audioKey->audioValue->UIManager->get->return->new->AudioAction->else->return
BasicLookAndFeel#playSound(Action):::If necessary, invokes actionPerformed on audioAction to play a sound:::if->audioStrings->UIManager->get->if->audioCues->new->HashSet<Object>->foreach->audioCues->add->actionName->audioAction->getValue->if->audioCues->contains->audioAction->new->ActionEvent->actionPerformed
BasicLookAndFeel#installAudioActionMap(ActionMap):::Sets the parent of the passed in ActionMap to be the audio action map.:::laf->UIManager->getLookAndFeel->if->map->getAudioActionMap->setParent
BasicLookAndFeel#playSound(JComponent, Object):::Helper method to play a named sound.:::laf->UIManager->getLookAndFeel->if->map->c->getActionMap->if->audioAction->map->get->if->playSound
BasicMenuBarUI#createUI(JComponent):::Returns a new instance of BasicMenuBarUI.:::return->new->BasicMenuBarUI
BasicMenuBarUI#installDefaults():::Installs default properties.:::if->menuBar->getLayout->menuBar->getLayout->menuBar->new->DefaultMenuLayout->setLayout->LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont
BasicMenuBarUI#installListeners():::Registers listeners.:::createContainerListener->createChangeListener->for->i->menuBar->getMenuCount->menuBar->addContainerListener
BasicMenuBarUI#installKeyboardActions():::Registers keyboard actions.:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicMenuBarUI#uninstallDefaults():::Uninstalls default properties.:::if->LookAndFeel->uninstallBorder
BasicMenuBarUI#uninstallListeners():::Unregisters listeners.:::menuBar->removeContainerListener->for->i->menuBar->getMenuCount
BasicMenuBarUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicMenuBarUI#createContainerListener():::Returns an instance of ContainerListener.:::return->getHandler
BasicMenuBarUI#createChangeListener():::Returns an instance of ChangeListener.:::return->getHandler
BasicMenuItemUI#createUI(JComponent):::Returns a new instance of BasicMenuItemUI.:::return->new->BasicMenuItemUI
BasicMenuItemUI#installDefaults():::Installs default properties.:::prefix->getPropertyPrefix->UIManager->getFont->if->UIManager->getFont->opaque->UIManager->getPropertyPrefix->get->if->LookAndFeel->installProperty->else->LookAndFeel->installProperty->if->menuItem->getMargin->menuItem->getMargin->menuItem->UIManager->getInsets->setMargin->LookAndFeel->Integer->valueOf->installProperty->menuItem->getIconTextGap->LookAndFeel->installBorder->menuItem->isBorderPainted->LookAndFeel->UIManager->getBoolean->installProperty->LookAndFeel->installColorsAndFont->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->UIManager->getString->if->if->UIManager->getIcon->updateCheckIcon
BasicMenuItemUI#getPropertyPrefix():::Returns a property prefix.:::return
BasicMenuItemUI#installListeners():::Registers listeners.:::if->createMouseInputListener->menuItem->addMouseListener->menuItem->addMouseMotionListener->if->createMenuDragMouseListener->menuItem->addMenuDragMouseListener->if->createMenuKeyListener->menuItem->addMenuKeyListener->if->createPropertyChangeListener->menuItem->addPropertyChangeListener
BasicMenuItemUI#installKeyboardActions():::Registers keyboard action.:::installLazyActionMap->updateAcceleratorBinding
BasicMenuItemUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder->LookAndFeel->installProperty->if->menuItem->getMargin->menuItem->setMargin->if->if
BasicMenuItemUI#uninstallComponents(JMenuItem):::Unregisters components.:::BasicHTML->updateRenderer
BasicMenuItemUI#uninstallListeners():::Unregisters listeners.:::if->menuItem->removeMouseListener->menuItem->removeMouseMotionListener->if->menuItem->removeMenuDragMouseListener->if->menuItem->removeMenuKeyListener->if->menuItem->removePropertyChangeListener
BasicMenuItemUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicMenuItemUI#createMouseInputListener(JComponent):::Returns an instance of MouseInputListener.:::return->getHandler
BasicMenuItemUI#createMenuDragMouseListener(JComponent):::Returns an instance of MenuDragMouseListener.:::return->getHandler
BasicMenuItemUI#createMenuKeyListener(JComponent):::Returns an instance of MenuKeyListener.:::return
BasicMenuItemUI#createPropertyChangeListener(JComponent):::Creates a PropertyChangeListener which will be added to the menu item:::return->getHandler
BasicMenuItemUI#getPreferredMenuItemSize(JComponent, Icon, Icon, int):::Returns the preferred size of a menu item.:::mi->lh->MenuItemLayoutHelper->createMaxRect->BasicGraphicsUtils->isLeftToRight->mi->getFont->MenuItemLayoutHelper->useCheckAndArrow->getPropertyPrefix->new->MenuItemLayoutHelper->result->new->Dimension->lh->getLeadingGap->MenuItemLayoutHelper->lh->getCheckSize->lh->getAfterCheckIconGap->addMaxWidth->if->lh->isTopLevelMenu->lh->getMinTextOffset->lh->getMinTextOffset->lh->getMinTextOffset->MenuItemLayoutHelper->lh->getLabelSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getAccSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getArrowSize->lh->getGap->addMaxWidth->MenuItemLayoutHelper->lh->getCheckSize->getHeight->lh->getLabelSize->getHeight->lh->getAccSize->getHeight->lh->getArrowSize->getHeight->max->insets->lh->getMenuItem->getInsets->if->if->if->UIManager->getPropertyPrefix->get->return
BasicMenuItemUI#update(Graphics, JComponent):::We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint().:::paint
BasicMenuItemUI#paintMenuItem(Graphics, JComponent, Icon, Icon, Color, Color, int):::Paints a menu item.:::holdf->g->getFont->holdc->g->getColor->mi->g->mi->getFont->setFont->viewRect->mi->getWidth->mi->getHeight->new->Rectangle->mi->getInsets->applyInsets->lh->BasicGraphicsUtils->isLeftToRight->mi->getFont->MenuItemLayoutHelper->useCheckAndArrow->getPropertyPrefix->new->MenuItemLayoutHelper->lr->lh->layoutMenuItem->paintBackground->paintCheckIcon->paintIcon->paintText->paintAccText->paintArrowIcon->g->setColor->g->setFont
BasicMenuItemUI#paintBackground(Graphics, JMenuItem, Color):::Draws the background of the menu item.:::model->menuItem->getModel->oldColor->g->getColor->menuWidth->menuItem->getWidth->menuHeight->menuItem->getHeight->if->menuItem->isOpaque->if->model->isArmed->model->isSelected->g->setColor->g->fillRect->else->g->menuItem->getBackground->setColor->g->fillRect->g->setColor->else->if->model->isArmed->model->isSelected->g->setColor->g->fillRect->g->setColor
BasicMenuItemUI#paintText(Graphics, JMenuItem, Rectangle, String):::Renders the text of the current menu item.:::model->menuItem->getModel->fm->SwingUtilities2->getFontMetrics->mnemIndex->menuItem->getDisplayedMnemonicIndex->if->model->isEnabled->if->UIManager->get->g->UIManager->getColor->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->else->g->menuItem->getBackground->brighter->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->g->menuItem->getBackground->darker->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt->else->if->model->isArmed->model->isSelected->g->setColor->SwingUtilities2->fm->getAscent->drawStringUnderlineCharAt
BasicMenuItemUI#getPath():::Returns a menu element path.:::m->MenuSelectionManager->defaultManager->oldPath->m->getSelectedPath->newPath->i->if->return->new->MenuElementArr->parent->menuItem->getParent->if->getComponent->new->MenuElementArr->System->arraycopy->else->j->for->new->MenuElementArr->System->arraycopy->return
BasicMenuItemUI#doClick(MenuSelectionManager):::Call this method when a menu item is to be activated:::if->isInternalFrameSystemMenu->BasicLookAndFeel->getPropertyPrefix->playSound->if->doNotCloseOnMouseClick->if->MenuSelectionManager->defaultManager->msm->clearSelectedPath->menuItem->doClick
BasicMenuUI#createUI(JComponent):::Constructs a new instance of BasicMenuUI.:::return->new->BasicMenuUI
BasicMenuUI#createMenuListener(JComponent):::Returns an instance of MenuListener.:::return
BasicMenuUI#createChangeListener(JComponent):::Returns an instance of ChangeListener.:::return
BasicMenuUI#setupPostTimer(JMenu):::Sets timer to the menu.:::timer->menu->getDelay->new->Actions->new->Timer->timer->setRepeats->timer->start
BasicMenuUI.MouseInputHandler#mousePressed(MouseEvent):::Invoked when the mouse has been clicked on the menu:::getHandler->mousePressed
BasicMenuUI.MouseInputHandler#mouseReleased(MouseEvent):::Invoked when the mouse has been released on the menu:::getHandler->mouseReleased
BasicMenuUI.MouseInputHandler#mouseEntered(MouseEvent):::Invoked when the cursor enters the menu:::getHandler->mouseEntered
BasicMenuUI.MouseInputHandler#mouseDragged(MouseEvent):::Invoked when a mouse button is pressed on the menu and then dragged:::getHandler->mouseDragged
BasicOptionPaneUI#createUI(JComponent):::Creates a new BasicOptionPaneUI instance.:::return->new->BasicOptionPaneUI
BasicOptionPaneUI#installUI(JComponent):::Installs the receiver as the L&amp;F for the passed in JOptionPane.:::installDefaults->optionPane->createLayoutManager->setLayout->installComponents->installListeners->installKeyboardActions
BasicOptionPaneUI#uninstallUI(JComponent):::Removes the receiver from the L&amp;F controller of the passed in split pane.:::uninstallComponents->optionPane->setLayout->uninstallKeyboardActions->uninstallListeners->uninstallDefaults
BasicOptionPaneUI#installDefaults():::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->UIManager->getDimension->LookAndFeel->installProperty
BasicOptionPaneUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicOptionPaneUI#installComponents():::Registers components.:::optionPane->createMessageArea->add->separator->createSeparator->if->optionPane->add->optionPane->createButtonArea->add->optionPane->optionPane->getComponentOrientation->applyComponentOrientation
BasicOptionPaneUI#uninstallComponents():::Unregisters components.:::optionPane->removeAll
BasicOptionPaneUI#createLayoutManager():::Returns a layout manager.:::return->new->BoxLayout
BasicOptionPaneUI#installListeners():::Registers listeners.:::if->createPropertyChangeListener->optionPane->addPropertyChangeListener
BasicOptionPaneUI#uninstallListeners():::Unregisters listeners.:::if->optionPane->removePropertyChangeListener
BasicOptionPaneUI#createPropertyChangeListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicOptionPaneUI#installKeyboardActions():::Registers keyboard actions.:::map->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicOptionPaneUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicOptionPaneUI#getMinimumOptionPaneSize():::Returns the minimum size the option pane should be:::if->return->new->Dimension->return->new->Dimension
BasicOptionPaneUI#getPreferredSize(JComponent):::If c is the JOptionPane the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the LayoutManager for the JOptionPane, and getMinimumOptionPaneSize.:::if->ourMin->getMinimumOptionPaneSize->lm->c->getLayout->if->lmSize->lm->preferredLayoutSize->if->return->Math->max->Math->max->new->Dimension->return->return->return
BasicOptionPaneUI#createMessageArea():::Messaged from installComponents to create a Container containing the body of the message:::top->new->JPanel->topBorder->DefaultLookup->get->if->top->setBorder->top->new->BorderLayout->setLayout->body->new->GridBagLayout->new->JPanel->realBody->new->BorderLayout->new->JPanel->body->setName->realBody->setName->if->getIcon->sep->new->JPanel->sep->setName->sep->new->Dimension->setPreferredSize->realBody->add->realBody->add->cons->new->GridBagConstraints->DefaultLookup->getInt->new->Insets->getMessage->getMaxCharactersPerLineCount->addMessageComponents->top->add->addIcon->return
BasicOptionPaneUI#addMessageComponents(Container, GridBagConstraints, Object, int, boolean):::Creates the appropriate object to represent msg and places it into container:::if->return->if->if->else->container->add->if->else->if->msgs->foreach->addMessageComponents->else->if->label->new->JLabel->configureMessageLabel->addMessageComponents->else->s->msg->toString->len->s->length->if->return->nl->nll->if->s->indexOf->newline->length->else->if->s->indexOf->else->if->s->indexOf->if->if->breakPanel->new->JPanel->breakPanel->setName->addMessageComponents->else->s->substring->addMessageComponents->s->substring->addMessageComponents->else->if->c->Box->createVerticalBox->c->setName->burstStringInto->addMessageComponents->else->label->new->JLabel->label->setName->configureMessageLabel->addMessageComponents
BasicOptionPaneUI#getMessage():::Returns the message to display from the JOptionPane the receiver is providing the look and feel for.:::if->if->optionPane->getWantsInput->message->optionPane->getMessage->sValues->optionPane->getSelectionValues->inputValue->optionPane->getInitialSelectionValue->toAdd->if->if->cBox->new->JComboBox<>->cBox->setName->for->counter->maxCounter->if->cBox->setSelectedItem->else->list->new->JList<>->sp->new->JScrollPane->sp->setName->list->setName->list->setVisibleRowCount->list->setSelectionMode->if->list->setSelectedValue->list->getHandler->addMouseListener->else->tf->new->MultiplexingTextField->tf->setName->tf->new->KeyStrokeArr->KeyStroke->getKeyStroke->setKeyStrokes->if->inputString->inputValue->toString->tf->setText->tf->setSelectionStart->tf->inputString->length->setSelectionEnd->tf->getHandler->addActionListener->newMessage->if->new->ObjectArr->else->new->ObjectArr->return->return->optionPane->getMessage->return
BasicOptionPaneUI#addIcon(Container):::Creates and adds a JLabel representing the icon returned from getIcon to top:::sideIcon->getIcon->if->iconLabel->new->JLabel->iconLabel->setName->iconLabel->setVerticalAlignment->top->add
BasicOptionPaneUI#getIcon():::Returns the icon from the JOptionPane the receiver is providing the look and feel for, or the default icon as returned from getDefaultIcon.:::mIcon->optionPane->getIcon->if->optionPane->getMessageType->getIconForType->return
BasicOptionPaneUI#getIconForType(int):::Returns the icon to use for the passed in type.:::if->return->propertyName->switch->break->break->break->break->if->return->DefaultLookup->get->return
BasicOptionPaneUI#getMaxCharactersPerLineCount():::Returns the maximum number of characters to place on a line.:::return->optionPane->getMaxCharactersPerLineCount
BasicOptionPaneUI#burstStringInto(Container, String, int):::Recursively creates new JLabel instances to represent d:::len->d->length->if->return->if->p->d->lastIndexOf->if->d->indexOf->if->d->substring->burstStringInto->d->substring->burstStringInto->return->label->new->JLabel->label->setName->configureMessageLabel->c->add
BasicOptionPaneUI#createSeparator():::Returns a separator.:::return
BasicOptionPaneUI#createButtonArea():::Creates and returns a Container containing the buttons:::bottom->new->JPanel->border->DefaultLookup->get->bottom->setName->if->bottom->setBorder->bottom->DefaultLookup->getBoolean->DefaultLookup->getInt->DefaultLookup->getInt->DefaultLookup->getBoolean->new->ButtonAreaLayout->setLayout->getButtons->getInitialValueIndex->addButtonComponents->return
BasicOptionPaneUI#addButtonComponents(Container, Object[], int):::Creates the appropriate object to represent each of the objects in buttons and adds it to container:::if->sizeButtonsToSame->getSizeButtonsToSameWidth->createdAll->numButtons->createdButtons->maxWidth->if->new->JButtonArr->for->counter->container->getLayout->setSyncAllWidths->if->DefaultLookup->getBoolean->aButton->padSize->for->counter
BasicOptionPaneUI#createButtonActionListener(int):::Constructs a new instance of a ButtonActionListener.:::return->new->ButtonActionListener
BasicOptionPaneUI#getButtons():::Returns the buttons to display from the JOptionPane the receiver is providing the look and feel for:::if->suppliedOptions->optionPane->getOptions->if->defaultOptions->type->optionPane->getOptionType->l->optionPane->getLocale->minimumWidth->DefaultLookup->getInt->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->if->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->else->new->ButtonFactoryArr->UIManager->getString->getMnemonic->DefaultLookup->get->new->ButtonFactory->return->return->return
BasicOptionPaneUI#getSizeButtonsToSameWidth():::Returns true, basic L&amp;F wants all the buttons to have the same width.:::return
BasicOptionPaneUI#getInitialValueIndex():::Returns the initial index into the buttons to select:::if->iv->optionPane->getInitialValue->options->optionPane->getOptions->if->return->else->if->for->counter->return
BasicOptionPaneUI#resetInputValue():::Sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputComponent.:::if->optionPane->getText->setInputValue->else->if->optionPane->getSelectedItem->setInputValue->else->if->optionPane->getSelectedValue->setInputValue
BasicOptionPaneUI#selectInitialValue(JOptionPane):::If inputComponent is non-null, the focus is requested on that, otherwise request focus on the default value:::if->inputComponent->requestFocus->else->if->initialFocusComponent->requestFocus->if->root->SwingUtilities->getRootPane->if->root->setDefaultButton
BasicOptionPaneUI#containsCustomComponents(JOptionPane):::Returns true if in the last call to validateComponent the message or buttons contained a subclass of Component.:::return
BasicOptionPaneUI.ButtonAreaLayout#setSyncAllWidths(boolean):::Sets if the width of children should be synchronized.:::
BasicOptionPaneUI.ButtonAreaLayout#getSyncAllWidths():::Returns if the width of children should be synchronized.:::return
BasicOptionPaneUI.ButtonAreaLayout#setPadding(int):::Sets the padding value.:::
BasicOptionPaneUI.ButtonAreaLayout#getPadding():::Returns the padding.:::return
BasicOptionPaneUI.ButtonAreaLayout#setCentersChildren(boolean):::Sets whether or not center children should be used.:::
BasicOptionPaneUI.ButtonAreaLayout#getCentersChildren():::Returns whether or not center children should be used.:::return
BasicOptionPaneUI.PropertyChangeHandler#propertyChange(PropertyChangeEvent):::If the source of the PropertyChangeEvent e equals the optionPane and is one of the ICON_PROPERTY, MESSAGE_PROPERTY, OPTIONS_PROPERTY or INITIAL_VALUE_PROPERTY, validateComponent is invoked.:::getHandler->propertyChange
BasicPanelUI#createUI(JComponent):::Returns an instance of BasicPanelUI.:::if->new->BasicPanelUI->return
BasicPanelUI#installDefaults(JPanel):::Method for installing panel properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installBorder->LookAndFeel->installProperty
BasicPanelUI#uninstallDefaults(JPanel):::Method for uninstalling panel properties.:::LookAndFeel->uninstallBorder
BasicPanelUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->border->c->getBorder->if->return->getBaseline->return
BasicPanelUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->border->c->getBorder->if->return->getBaselineResizeBehavior->return
BasicPasswordFieldUI#createUI(JComponent):::Creates a UI for a JPasswordField.:::return->new->BasicPasswordFieldUI
BasicPasswordFieldUI#getPropertyPrefix():::Fetches the name used as a key to look up properties through the UIManager:::return
BasicPasswordFieldUI#installDefaults():::Installs the necessary properties on the JPasswordField.:::super->installDefaults->prefix->getPropertyPrefix->echoChar->UIManager->getDefaults->get->if->LookAndFeel->getComponent->installProperty
BasicPasswordFieldUI#create(Element):::Creates a view (PasswordView) for an element.:::return->new->PasswordView
BasicPopupMenuSeparatorUI#createUI(JComponent):::Returns a new instance of BasicPopupMenuSeparatorUI.:::return->new->BasicPopupMenuSeparatorUI
BasicPopupMenuUI#createUI(JComponent):::Constructs a new instance of BasicPopupMenuUI.:::return->new->BasicPopupMenuUI
BasicPopupMenuUI#installDefaults():::Installs default properties.:::if->popupMenu->getLayout->popupMenu->getLayout->popupMenu->new->DefaultMenuLayout->setLayout->LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont
BasicPopupMenuUI#installListeners():::Registers listeners.:::if->new->BasicPopupMenuListener->popupMenu->addPopupMenuListener->if->new->BasicMenuKeyListener->popupMenu->addMenuKeyListener->context->AppContext->getAppContext->synchronized->mouseGrabber->context->get->if->new->MouseGrabber->context->put->synchronized->helper->context->get->if->new->MenuKeyboardHelper->context->put->msm->MenuSelectionManager->defaultManager->msm->addChangeListener
BasicPopupMenuUI#installKeyboardActions():::Registers keyboard actions.:::
BasicPopupMenuUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicPopupMenuUI#uninstallListeners():::Unregisters listeners.:::if->popupMenu->removePopupMenuListener->if->popupMenu->removeMenuKeyListener
BasicPopupMenuUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicPopupMenuUI.MenuKeyboardHelper#getActivePopup(MenuElement[]):::Return the last JPopupMenu in path, or null if none found:::for->i->return
BasicProgressBarUI#createUI(JComponent):::Returns a new instance of BasicProgressBarUI.:::return->new->BasicProgressBarUI
BasicProgressBarUI#installDefaults():::Installs default properties.:::LookAndFeel->installProperty->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->UIManager->getInt->if->UIManager->getInt->UIManager->getColor->UIManager->getColor
BasicProgressBarUI#uninstallDefaults():::Unintalls default properties.:::LookAndFeel->uninstallBorder
BasicProgressBarUI#installListeners():::Registers listeners.:::getHandler->progressBar->addChangeListener->progressBar->getHandler->addPropertyChangeListener
BasicProgressBarUI#startAnimationTimer():::Starts the animation thread, creating and initializing it if necessary:::if->new->Animator->animator->getRepaintInterval->start
BasicProgressBarUI#stopAnimationTimer():::Stops the animation thread:::if->animator->stop
BasicProgressBarUI#uninstallListeners():::Removes all listeners installed by this object.:::progressBar->removeChangeListener->progressBar->getHandler->removePropertyChangeListener
BasicProgressBarUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->if->progressBar->isStringPainted->progressBar->getOrientation->metrics->progressBar->progressBar->getFont->getFontMetrics->insets->progressBar->getInsets->y->return->metrics->getAscent->metrics->getLeading->metrics->getDescent->return
BasicProgressBarUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->if->progressBar->isStringPainted->progressBar->getOrientation->return->return
BasicProgressBarUI#getPreferredInnerHorizontal():::Returns preferred size of the horizontal JProgressBar.:::horizDim->DefaultLookup->get->if->new->Dimension->return
BasicProgressBarUI#getPreferredInnerVertical():::Returns preferred size of the vertical JProgressBar.:::vertDim->DefaultLookup->get->if->new->Dimension->return
BasicProgressBarUI#getSelectionForeground():::The "selectionForeground" is the color of the text when it is painted over a filled area of the progress bar.:::return
BasicProgressBarUI#getSelectionBackground():::The "selectionBackground" is the color of the text when it is painted over an unfilled area of the progress bar.:::return
BasicProgressBarUI#getCellLength():::Returns the width (if HORIZONTAL) or height (if VERTICAL) of each of the individual cells/units to be rendered in the progress bar:::if->progressBar->isStringPainted->return->else->return
BasicProgressBarUI#setCellLength(int):::Sets the cell length.:::
BasicProgressBarUI#getCellSpacing():::Returns the spacing between each of the cells/units in the progress bar:::if->progressBar->isStringPainted->return->else->return
BasicProgressBarUI#setCellSpacing(int):::Sets the cell spacing.:::
BasicProgressBarUI#getAmountFull(Insets, int, int):::This determines the amount of the progress bar that should be filled based on the percent done gathered from the model:::amountFull->model->progressBar->getModel->if->model->getMaximum->model->getMinimum->if->progressBar->getOrientation->Math->progressBar->getPercentComplete->round->else->Math->progressBar->getPercentComplete->round->return
BasicProgressBarUI#paint(Graphics, JComponent):::Delegates painting to one of two methods: paintDeterminate or paintIndeterminate.:::if->progressBar->isIndeterminate->paintIndeterminate->else->paintDeterminate
BasicProgressBarUI#getBox(Rectangle):::Stores the position and size of the bouncing box that would be painted for the current animation index in r and returns r:::currentFrame->getAnimationIndex->middleFrame->if->sizeChanged->updateSizes->getGenericBox->if->return->if->return->if->progressBar->getOrientation->if->Math->round->else->Math->round->else->if->Math->round->else->Math->round->return
BasicProgressBarUI#getBoxLength(int, int):::Returns the length of the "bouncing box" to be painted:::return->Math->round
BasicProgressBarUI#paintIndeterminate(Graphics, JComponent):::All purpose paint method that should do the right thing for all linear bouncing-box progress bars:::if->return->b->progressBar->getInsets->barRectWidth->progressBar->getWidth->barRectHeight->progressBar->getHeight->if->return->g2->getBox->if->g2->progressBar->getForeground->setColor->g2->fillRect->if->progressBar->isStringPainted->if->progressBar->getOrientation->paintString->else->paintString
BasicProgressBarUI#paintDeterminate(Graphics, JComponent):::All purpose paint method that should do the right thing for almost all linear, determinate progress bars:::if->return->b->progressBar->getInsets->barRectWidth->progressBar->getWidth->barRectHeight->progressBar->getHeight->if->return->cellLength->getCellLength->cellSpacing->getCellSpacing->amountFull->getAmountFull->g2->g2->progressBar->getForeground->setColor->if->progressBar->getOrientation->if->g2->new->BasicStroke->setStroke->else->g2->new->floatArr->new->BasicStroke->setStroke->if->BasicGraphicsUtils->isLeftToRight->g2->drawLine->else->g2->drawLine->else->if->g2->new->BasicStroke->setStroke->else->g2->new->floatArr->new->BasicStroke->setStroke->g2->drawLine->if->progressBar->isStringPainted->paintString
BasicProgressBarUI#paintString(Graphics, int, int, int, int, int, Insets):::Paints the progress string.:::if->progressBar->getOrientation->if->BasicGraphicsUtils->isLeftToRight->if->progressBar->isIndeterminate->getBox->paintString->else->paintString->else->paintString->else->if->progressBar->isIndeterminate->getBox->paintString->else->paintString
BasicProgressBarUI#getStringPlacement(Graphics, String, int, int, int, int):::Designate the place where the progress string will be painted:::fontSizer->SwingUtilities2->progressBar->getFont->getFontMetrics->stringWidth->SwingUtilities2->stringWidth->if->progressBar->getOrientation->return->Math->round->fontSizer->getAscent->fontSizer->getLeading->fontSizer->getDescent->new->Point->else->return->fontSizer->getAscent->fontSizer->getLeading->fontSizer->getDescent->Math->round->new->Point
BasicProgressBarUI#getMinimumSize(JComponent):::The Minimum size for this component is 10:::pref->getPreferredSize->if->progressBar->getOrientation->else->return
BasicProgressBarUI#getAnimationIndex():::Gets the index of the current animation frame.:::return
BasicProgressBarUI#getFrameCount():::Returns the number of frames for the complete animation loop used by an indeterminate JProgessBar:::return
BasicProgressBarUI#setAnimationIndex(int):::Sets the index of the current animation frame to the specified value and requests that the progress bar be repainted:::if->if->sizeChanged->progressBar->repaint->return->getBox->if->getBox->if->nextPaintRect->add->else->return->if->progressBar->repaint->else->progressBar->repaint
BasicProgressBarUI#incrementAnimationIndex():::Sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted:::newValue->getAnimationIndex->if->setAnimationIndex->else->setAnimationIndex
BasicRadioButtonMenuItemUI#createUI(JComponent):::Returns a new instance of BasicRadioButtonMenuItemUI.:::return->new->BasicRadioButtonMenuItemUI
BasicRadioButtonMenuItemUI#processMouseEvent(JMenuItem, MouseEvent, MenuElement[], MenuSelectionManager):::Invoked when mouse event occurs.:::p->e->getPoint->if->item->getWidth->item->getHeight->if->e->getID->manager->clearSelectedPath->item->doClick->item->setArmed->else->manager->setSelectedPath->else->if->item->getModel->isArmed->newPath->new->MenuElementArr->i->c->for->manager->setSelectedPath
BasicRadioButtonUI#createUI(JComponent):::Returns an instance of BasicRadioButtonUI.:::appContext->AppContext->getAppContext->radioButtonUI->appContext->get->if->new->BasicRadioButtonUI->appContext->put->return
BasicRadioButtonUI#getDefaultIcon():::Returns the default icon.:::return
BasicRadioButtonUI#paint(Graphics, JComponent):::paint the radio button:::b->model->b->getModel->f->c->getFont->g->setFont->fm->SwingUtilities2->getFontMetrics->i->c->getInsets->b->getSize->altIcon->b->getIcon->selectedIcon->disabledIcon->text->SwingUtilities->b->getText->getDefaultIcon->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getText->b->getIconTextGap->layoutCompoundLabel->if->c->isOpaque->g->b->getBackground->setColor->g->fillRect->if->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->else->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->b->getSelectedIcon->else->if->model->isSelected->if->b->isRolloverEnabled->model->isRollover->b->getRolloverSelectedIcon->if->b->getSelectedIcon->else->b->getSelectedIcon->else->if->b->isRolloverEnabled->model->isRollover->b->getRolloverIcon->if->b->getIcon->altIcon->paintIcon->else->getDefaultIcon->paintIcon->if->v->c->getClientProperty->if->v->paint->else->paintText->if->b->hasFocus->b->isFocusPainted->paintFocus
BasicRadioButtonUI#paintFocus(Graphics, Rectangle, Dimension):::Paints focused radio button.:::
BasicRadioButtonUI#getPreferredSize(JComponent):::The preferred size of the radio button:::if->c->getComponentCount->return->b->text->b->getText->buttonIcon->b->getIcon->if->getDefaultIcon->font->b->getFont->fm->b->getFontMetrics->SwingUtilities->b->getVerticalAlignment->b->getHorizontalAlignment->b->getVerticalTextPosition->b->getHorizontalTextPosition->b->getIconTextGap->layoutCompoundLabel->x1->Math->min->x2->Math->max->y1->Math->min->y2->Math->max->width->height->b->getInsets->return->new->Dimension
BasicRootPaneUI#createUI(JComponent):::Returns a new instance of BasicRootPaneUI.:::return
BasicRootPaneUI#installDefaults(JRootPane):::Installs default properties.:::LookAndFeel->installProperty
BasicRootPaneUI#installComponents(JRootPane):::Installs components.:::
BasicRootPaneUI#installListeners(JRootPane):::Registers listeners.:::root->addPropertyChangeListener
BasicRootPaneUI#installKeyboardActions(JRootPane):::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->updateDefaultButtonBindings
BasicRootPaneUI#uninstallDefaults(JRootPane):::Uninstalls default properties.:::
BasicRootPaneUI#uninstallComponents(JRootPane):::Unregisters components.:::
BasicRootPaneUI#uninstallListeners(JRootPane):::Unregisters listeners.:::root->removePropertyChangeListener
BasicRootPaneUI#uninstallKeyboardActions(JRootPane):::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicRootPaneUI#updateDefaultButtonBindings(JRootPane):::Invoked when the default button property has changed:::km->SwingUtilities->getUIInputMap->while->km->getParent->if->km->clear->if->root->getDefaultButton->bindings->DefaultLookup->get->if->LookAndFeel->loadKeyBindings
BasicRootPaneUI#propertyChange(PropertyChangeEvent):::Invoked when a property changes on the root pane:::if->e->getPropertyName->equals->rootpane->e->getSource->updateDefaultButtonBindings->if->rootpane->getClientProperty->rootpane->e->getNewValue->putClientProperty
BasicScrollBarUI#createUI(JComponent):::Creates the UI.:::return->new->BasicScrollBarUI
BasicScrollBarUI#configureScrollBarColors():::Configures the scroll bar colors.:::LookAndFeel->installColors->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor
BasicScrollBarUI#installUI(JComponent):::Installs the UI.:::new->Rectangle->new->Rectangle->installDefaults->installComponents->installListeners->installKeyboardActions
BasicScrollBarUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallListeners->uninstallDefaults->uninstallComponents->uninstallKeyboardActions
BasicScrollBarUI#installDefaults():::Installs the defaults.:::UIManager->getInt->if->UIManager->get->UIManager->get->absB->UIManager->get->absB->booleanValue->if->scrollbar->getLayout->scrollbar->getLayout->scrollbar->setLayout->configureScrollBarColors->LookAndFeel->installBorder->LookAndFeel->installProperty->scrollbar->getValue->UIManager->getInt->UIManager->getInt->scaleKey->scrollbar->getClientProperty->if->if->equals->else->if->equals->else->if->equals
BasicScrollBarUI#installComponents():::Installs the components.:::switch->scrollbar->getOrientation->createIncreaseButton->createDecreaseButton->break->if->scrollbar->getComponentOrientation->isLeftToRight->createIncreaseButton->createDecreaseButton->else->createIncreaseButton->createDecreaseButton->break->scrollbar->add->scrollbar->add->scrollbar->scrollbar->isEnabled->setEnabled
BasicScrollBarUI#uninstallComponents():::Uninstalls the components.:::scrollbar->remove->scrollbar->remove
BasicScrollBarUI#installListeners():::Installs the listeners.:::createTrackListener->createArrowButtonListener->createModelListener->createPropertyChangeListener->scrollbar->addMouseListener->scrollbar->addMouseMotionListener->scrollbar->getModel->addChangeListener->scrollbar->addPropertyChangeListener->scrollbar->getHandler->addFocusListener->if->incrButton->addMouseListener->if->decrButton->addMouseListener->createScrollListener->new->Timer->scrollTimer->setInitialDelay
BasicScrollBarUI#installKeyboardActions():::Installs the keyboard actions.:::LazyActionMap->installLazyActionMap->inputMap->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap
BasicScrollBarUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicScrollBarUI#uninstallListeners():::Uninstall the listeners.:::scrollTimer->stop->if->decrButton->removeMouseListener->if->incrButton->removeMouseListener->scrollbar->getModel->removeChangeListener->scrollbar->removeMouseListener->scrollbar->removeMouseMotionListener->scrollbar->removePropertyChangeListener->scrollbar->getHandler->removeFocusListener
BasicScrollBarUI#uninstallDefaults():::Uninstalls the defaults.:::LookAndFeel->uninstallBorder->if->scrollbar->getLayout->scrollbar->setLayout
BasicScrollBarUI#createTrackListener():::Creates a track listener.:::return->new->TrackListener
BasicScrollBarUI#createArrowButtonListener():::Creates an arrow button listener.:::return->new->ArrowButtonListener
BasicScrollBarUI#createModelListener():::Creates a model listener.:::return->new->ModelListener
BasicScrollBarUI#createScrollListener():::Creates a scroll listener.:::return->new->ScrollListener
BasicScrollBarUI#createPropertyChangeListener():::Creates a property change listener.:::return->getHandler
BasicScrollBarUI#setThumbRollover(boolean):::Sets whether or not the mouse is currently over the thumb.:::if->scrollbar->getThumbBounds->repaint
BasicScrollBarUI#isThumbRollover():::Returns true if the mouse is currently over the thumb.:::return
BasicScrollBarUI#getPreferredSize(JComponent):::A vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb:::return->scrollbar->getOrientation->new->Dimension->new->Dimension
BasicScrollBarUI#createDecreaseButton(int):::Creates a decrease button.:::return->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton
BasicScrollBarUI#createIncreaseButton(int):::Creates an increase button.:::return->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->new->BasicArrowButton
BasicScrollBarUI#paintDecreaseHighlight(Graphics):::Paints the decrease highlight.:::insets->scrollbar->getInsets->thumbR->getThumbBounds->g->setColor->if->scrollbar->getOrientation->x->y->w->scrollbar->getWidth->h->g->fillRect->else->x->w->if->scrollbar->getComponentOrientation->isLeftToRight->else->y->h->scrollbar->getHeight->g->fillRect
BasicScrollBarUI#paintIncreaseHighlight(Graphics):::Paints the increase highlight.:::insets->scrollbar->getInsets->thumbR->getThumbBounds->g->setColor->if->scrollbar->getOrientation->x->y->w->scrollbar->getWidth->h->g->fillRect->else->x->w->if->scrollbar->getComponentOrientation->isLeftToRight->else->y->h->scrollbar->getHeight->g->fillRect
BasicScrollBarUI#paintTrack(Graphics, JComponent, Rectangle):::Paints the track.:::g->setColor->g->fillRect->if->paintDecreaseHighlight->else->if->paintIncreaseHighlight
BasicScrollBarUI#paintThumb(Graphics, JComponent, Rectangle):::Paints the thumb.:::if->thumbBounds->isEmpty->scrollbar->isEnabled->return->w->h->g->translate->g->setColor->drawRect->g->setColor->g->fillRect->g->setColor->drawVLine->drawHLine->g->setColor->drawHLine->drawVLine->g->translate
BasicScrollBarUI#getMinimumThumbSize():::Returns the smallest acceptable size for the thumb:::return
BasicScrollBarUI#getMaximumThumbSize():::Returns the largest acceptable size for the thumb:::return
BasicScrollBarUI#layoutVScrollbar(JScrollBar):::Laysouts a  vertical scroll bar.:::sbSize->sb->getSize->sbInsets->sb->getInsets->itemW->itemX->squareButtons->DefaultLookup->getBoolean->decrButtonH->decrButton->getPreferredSize->decrButtonY->incrButtonH->incrButton->getPreferredSize->incrButtonY->sbInsetsH->sbButtonsH->gaps->trackH->min->sb->getMinimum->extent->sb->getVisibleAmount->range->sb->getMaximum->value->getValue->thumbH->getMaximumThumbSize->Math->getMinimumThumbSize->max->Math->getMaximumThumbSize->min->thumbY->if->sb->getMaximum->sb->getVisibleAmount->thumbRange->sbAvailButtonH->if->decrButton->setBounds->incrButton->setBounds->itrackY->itrackH->trackRect->setBounds->if->if->UIManager->getBoolean->setThumbBounds->else->setThumbBounds->else->if->if->setThumbBounds
BasicScrollBarUI#layoutHScrollbar(JScrollBar):::Laysouts a  vertical scroll bar.:::sbSize->sb->getSize->sbInsets->sb->getInsets->itemH->itemY->ltr->sb->getComponentOrientation->isLeftToRight->squareButtons->DefaultLookup->getBoolean->leftButtonW->decrButton->getPreferredSize->rightButtonW->incrButton->getPreferredSize->if->temp->leftButtonX->rightButtonX->leftGap->rightGap->sbInsetsW->sbButtonsW->trackW->min->sb->getMinimum->max->sb->getMaximum->extent->sb->getVisibleAmount->range->value->getValue->thumbW->getMaximumThumbSize->Math->getMinimumThumbSize->max->Math->getMaximumThumbSize->min->thumbX->if->sb->getVisibleAmount->thumbRange->if->else->sbAvailButtonW->if->setBounds->setBounds->itrackX->itrackW->trackRect->setBounds->if->if->UIManager->getBoolean->setThumbBounds->else->setThumbBounds->else->if->if->setThumbBounds
BasicScrollBarUI#setThumbBounds(int, int, int, int):::Set the bounds of the thumb and force a repaint that includes the old thumbBounds and the new one.:::if->return->minX->Math->min->minY->Math->min->maxX->Math->max->maxY->Math->max->thumbRect->setBounds->scrollbar->repaint->setThumbRollover
BasicScrollBarUI#getThumbBounds():::Return the current size/location of the thumb:::return
BasicScrollBarUI#getTrackBounds():::Returns the current bounds of the track, i.e:::return
BasicScrollBarUI#scrollByBlock(int):::Scrolls by block.:::scrollByBlock->dirtyRect->getTrackBounds->scrollbar->repaint
BasicScrollBarUI#scrollByUnit(int):::Scrolls by unit.:::scrollByUnits
BasicScrollBarUI#getSupportsAbsolutePositioning():::Indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button).:::return
BasicScrollBarUI.TrackListener#mousePressed(MouseEvent):::If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page:::if->SwingUtilities->isRightMouseButton->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->return->if->scrollbar->isEnabled->return->if->scrollbar->hasFocus->scrollbar->isRequestFocusEnabled->scrollbar->requestFocus->scrollbar->setValueIsAdjusting->e->getX->e->getY->if->getThumbBounds->contains->switch->scrollbar->getOrientation->getThumbBounds->break->getThumbBounds->break->setDragging->return->else->if->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->switch->scrollbar->getOrientation->getThumbBounds->break->getThumbBounds->break->setDragging->setValueFrom->return->setDragging->sbSize->scrollbar->getSize->switch->scrollbar->getOrientation->if->getThumbBounds->isEmpty->scrollbarCenter->else->thumbY->getThumbBounds->break->if->getThumbBounds->isEmpty->scrollbarCenter->else->thumbX->getThumbBounds->if->scrollbar->getComponentOrientation->isLeftToRight->break->scrollByBlock->scrollTimer->stop->scrollListener->setDirection->scrollListener->setScrollByBlock->startScrollTimerIfNecessary
BasicScrollBarUI.TrackListener#mouseDragged(MouseEvent):::Set the models value to the position of the thumb's top of Vertical scrollbar, or the left/right of Horizontal scrollbar in left-to-right/right-to-left scrollbar relative to the origin of the track.:::if->SwingUtilities->isRightMouseButton->getSupportsAbsolutePositioning->SwingUtilities->isMiddleMouseButton->return->if->scrollbar->isEnabled->getThumbBounds->isEmpty->return->if->setValueFrom->else->e->getX->e->getY->updateThumbState->startScrollTimerIfNecessary
BasicScrollBarUI.TrackListener#mouseExited(MouseEvent):::Invoked when the mouse exits the scrollbar.:::if->setThumbRollover
BasicScrollBarUI.ScrollListener#setDirection(int):::Sets the direction.:::
BasicScrollBarUI.ScrollListener#setScrollByBlock(boolean):::Sets the scrolling by block:::
BasicScrollPaneUI#createUI(JComponent):::Returns a new instance of BasicScrollPaneUI.:::return->new->BasicScrollPaneUI
BasicScrollPaneUI#installDefaults(JScrollPane):::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->vpBorder->scrollpane->getViewportBorder->if->UIManager->getBorder->scrollpane->setViewportBorder->LookAndFeel->installProperty
BasicScrollPaneUI#installListeners(JScrollPane):::Registers listeners.:::createVSBChangeListener->createVSBPropertyChangeListener->createHSBChangeListener->createHSBPropertyChangeListener->createViewportChangeListener->createPropertyChangeListener->viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->if->viewport->addChangeListener->if->vsb->getModel->addChangeListener->vsb->addPropertyChangeListener->if->hsb->getModel->addChangeListener->hsb->addPropertyChangeListener->scrollpane->addPropertyChangeListener->createMouseWheelListener->scrollpane->addMouseWheelListener
BasicScrollPaneUI#installKeyboardActions(JScrollPane):::Registers keyboard actions.:::inputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicScrollPaneUI#uninstallDefaults(JScrollPane):::Uninstalls default properties.:::LookAndFeel->uninstallBorder->if->scrollpane->getViewportBorder->scrollpane->setViewportBorder
BasicScrollPaneUI#uninstallListeners(JComponent):::Unregisters listeners.:::viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->if->viewport->removeChangeListener->if->vsb->getModel->removeChangeListener->vsb->removePropertyChangeListener->if->hsb->getModel->removeChangeListener->hsb->removePropertyChangeListener->scrollpane->removePropertyChangeListener->if->scrollpane->removeMouseWheelListener
BasicScrollPaneUI#uninstallKeyboardActions(JScrollPane):::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicScrollPaneUI#syncScrollPaneWithViewport():::Synchronizes the JScrollPane with Viewport.:::viewport->scrollpane->getViewport->vsb->scrollpane->getVerticalScrollBar->hsb->scrollpane->getHorizontalScrollBar->rowHead->scrollpane->getRowHeader->colHead->scrollpane->getColumnHeader->ltr->scrollpane->getComponentOrientation->isLeftToRight->if->extentSize->viewport->getExtentSize->viewSize->viewport->getViewSize->viewPosition->viewport->getViewPosition->if->extent->max->value->Math->Math->min->max->vsb->setValues->if->extent->max->value->if->Math->Math->min->max->else->currentValue->hsb->getValue->if->Math->Math->min->max->if->else->if->viewport->setViewPosition->else->Math->Math->min->max->if->hsb->setValues->if->p->rowHead->getViewPosition->viewport->getViewPosition->rowHead->setViewPosition->if->p->colHead->getViewPosition->if->viewport->getViewPosition->else->Math->viewport->getViewPosition->max->colHead->setViewPosition
BasicScrollPaneUI#getBaseline(JComponent, int, int):::Returns the baseline.:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->viewport->scrollpane->getViewport->spInsets->scrollpane->getInsets->y->columnHeader->scrollpane->getColumnHeader->if->columnHeader->isVisible->header->columnHeader->getView->if->header->isVisible->headerPref->header->getPreferredSize->baseline->header->getBaseline->if->return->columnPref->columnHeader->getPreferredSize->view->viewport->getView->if->view->isVisible->view->getBaselineResizeBehavior->viewportBorder->scrollpane->getViewportBorder->if->vpbInsets->viewportBorder->getBorderInsets->if->view->getWidth->view->getHeight->min->view->getMinimumSize->Math->view->getWidth->max->Math->view->getHeight->max->if->baseline->view->getBaseline->if->return->return
BasicScrollPaneUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicScrollPaneUI#createViewportChangeListener():::Returns an instance of viewport ChangeListener.:::return->getHandler
BasicScrollPaneUI#createHSBChangeListener():::Returns an instance of horizontal scroll bar ChangeListener.:::return->getHandler
BasicScrollPaneUI#createVSBChangeListener():::Returns an instance of vertical scroll bar ChangeListener.:::return->getHandler
BasicScrollPaneUI.MouseWheelHandler#mouseWheelMoved(MouseWheelEvent):::Called when the mouse wheel is rotated while over a JScrollPane.:::getHandler->mouseWheelMoved
BasicScrollPaneUI#createMouseWheelListener():::Creates an instance of MouseWheelListener, which is added to the JScrollPane by installUI():::return->getHandler
BasicScrollPaneUI#updateScrollBarDisplayPolicy(PropertyChangeEvent):::Updates a scroll bar display policy.:::scrollpane->revalidate->scrollpane->repaint
BasicScrollPaneUI#updateViewport(PropertyChangeEvent):::Updates viewport.:::oldViewport->e->getOldValue->newViewport->e->getNewValue->if->oldViewport->removeChangeListener->if->p->newViewport->getViewPosition->if->scrollpane->getComponentOrientation->isLeftToRight->Math->max->else->max->newViewport->getViewSize->extent->newViewport->getExtentSize->if->else->Math->Math->min->max->Math->max->newViewport->setViewPosition->newViewport->addChangeListener
BasicScrollPaneUI#updateRowHeader(PropertyChangeEvent):::Updates row header.:::newRowHead->e->getNewValue->if->viewport->scrollpane->getViewport->p->newRowHead->getViewPosition->viewport->getViewPosition->newRowHead->setViewPosition
BasicScrollPaneUI#updateColumnHeader(PropertyChangeEvent):::Updates column header.:::newColHead->e->getNewValue->if->viewport->scrollpane->getViewport->p->newColHead->getViewPosition->if->else->if->scrollpane->getComponentOrientation->isLeftToRight->viewport->getViewPosition->else->Math->viewport->getViewPosition->max->newColHead->setViewPosition->scrollpane->add
BasicScrollPaneUI#createPropertyChangeListener():::Creates an instance of PropertyChangeListener that's added to the JScrollPane by installUI():::return->getHandler
BasicSeparatorUI#createUI(JComponent):::Returns a new instance of BasicSeparatorUI.:::return->new->BasicSeparatorUI
BasicSeparatorUI#installDefaults(JSeparator):::Installs default properties.:::LookAndFeel->installColors->LookAndFeel->installProperty
BasicSeparatorUI#uninstallDefaults(JSeparator):::Uninstalls default properties.:::
BasicSeparatorUI#installListeners(JSeparator):::Registers listeners.:::
BasicSeparatorUI#uninstallListeners(JSeparator):::Unregisters listeners.:::
BasicSliderUI#getShadowColor():::Returns the shadow color.:::return
BasicSliderUI#getHighlightColor():::Returns the highlight color.:::return
BasicSliderUI#getFocusColor():::Returns the focus color.:::return
BasicSliderUI#isDragging():::Returns true if the user is dragging the slider.:::return
BasicSliderUI#createUI(JComponent):::Creates a UI.:::return->new->BasicSliderUI
BasicSliderUI#installUI(JComponent):::Installs a UI.:::slider->slider->isEnabled->setEnabled->LookAndFeel->installProperty->createTrackListener->createChangeListener->createComponentListener->createFocusListener->createScrollListener->createPropertyChangeListener->installDefaults->installListeners->installKeyboardActions->new->Timer->scrollTimer->setInitialDelay->slider->getInsets->BasicGraphicsUtils->isLeftToRight->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->new->Rectangle->slider->getValue->calculateGeometry
BasicSliderUI#uninstallUI(JComponent):::Uninstalls a UI.:::if->throw->new->IllegalComponentStateException->scrollTimer->stop->uninstallDefaults->uninstallListeners->uninstallKeyboardActions
BasicSliderUI#installDefaults(JSlider):::Installs the defaults.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->get->if->new->InsetsUIResource
BasicSliderUI#uninstallDefaults(JSlider):::Uninstalls the defaults.:::LookAndFeel->uninstallBorder
BasicSliderUI#createTrackListener(JSlider):::Creates a track listener.:::return->new->TrackListener
BasicSliderUI#createChangeListener(JSlider):::Creates a change listener.:::return->getHandler
BasicSliderUI#createComponentListener(JSlider):::Creates a composite listener.:::return->getHandler
BasicSliderUI#createFocusListener(JSlider):::Creates a focus listener.:::return->getHandler
BasicSliderUI#createScrollListener(JSlider):::Creates a scroll listener.:::return->new->ScrollListener
BasicSliderUI#createPropertyChangeListener(JSlider):::Creates a property change listener.:::return->getHandler
BasicSliderUI#installListeners(JSlider):::Installs listeners.:::slider->addMouseListener->slider->addMouseMotionListener->slider->addFocusListener->slider->addComponentListener->slider->addPropertyChangeListener->slider->getModel->addChangeListener
BasicSliderUI#uninstallListeners(JSlider):::Uninstalls listeners.:::slider->removeMouseListener->slider->removeMouseMotionListener->slider->removeFocusListener->slider->removeComponentListener->slider->removePropertyChangeListener->slider->getModel->removeChangeListener
BasicSliderUI#installKeyboardActions(JSlider):::Installs keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSliderUI#loadActionMap(LazyActionMap):::Populates ComboBox's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicSliderUI#uninstallKeyboardActions(JSlider):::Uninstalls keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicSliderUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->if->slider->getPaintLabels->labelsHaveSameBaselines->metrics->slider->slider->getFont->getFontMetrics->insets->slider->getInsets->thumbSize->getThumbSize->if->slider->getOrientation->tickLength->getTickLength->contentHeight->thumbHeight->centerSpacing->if->slider->getPaintTicks->getHeightOfTallestLabel->trackY->trackHeight->tickY->tickHeight->if->slider->getPaintTicks->labelY->return->metrics->getAscent->else->inverted->slider->getInverted->value->getLowestValue->getHighestValue->if->thumbHeight->trackBuffer->Math->metrics->getHeight->max->contentY->trackY->trackHeight->yPosition->yPositionForValue->return->metrics->getHeight->metrics->getAscent->return
BasicSliderUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicSliderUI#labelsHaveSameBaselines():::Returns true if all the labels from the label table have the same baseline.:::if->dictionary->slider->getLabelTable->if->elements->dictionary->elements->baseline->while->elements->hasMoreElements->label->elements->nextElement->pref->label->getPreferredSize->labelBaseline->label->getBaseline->if->if->else->if->break->else->break->else->return
BasicSliderUI#getPreferredHorizontalSize():::Returns the preferred horizontal size.:::horizDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getPreferredVerticalSize():::Returns the preferred vertical size.:::vertDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getMinimumHorizontalSize():::Returns the minimum horizontal size.:::minHorizDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getMinimumVerticalSize():::Returns the minimum vertical size.:::minVertDim->DefaultLookup->get->if->new->Dimension->return
BasicSliderUI#getPreferredSize(JComponent):::Returns the preferred size.:::recalculateIfInsetsChanged->d->if->slider->getOrientation->getPreferredVerticalSize->new->Dimension->else->getPreferredHorizontalSize->new->Dimension->return
BasicSliderUI#getMinimumSize(JComponent):::Returns the minimum size.:::recalculateIfInsetsChanged->d->if->slider->getOrientation->getMinimumVerticalSize->new->Dimension->else->getMinimumHorizontalSize->new->Dimension->return
BasicSliderUI#getMaximumSize(JComponent):::Returns the maximum size.:::d->getPreferredSize->if->slider->getOrientation->else->return
BasicSliderUI#calculateGeometry():::Calculates the geometry.:::calculateFocusRect->calculateContentRect->calculateThumbSize->calculateTrackBuffer->calculateTrackRect->calculateTickRect->calculateLabelRect->calculateThumbLocation
BasicSliderUI#calculateFocusRect():::Calculates the focus rectangle.:::slider->getWidth->slider->getHeight
BasicSliderUI#calculateThumbSize():::Calculates the thumb size rectangle.:::size->getThumbSize->thumbRect->setSize
BasicSliderUI#calculateContentRect():::Calculates the content rectangle.:::
BasicSliderUI#calculateThumbLocation():::Calculates the thumb location.:::if->slider->getSnapToTicks->sliderValue->slider->getValue->snappedValue->tickSpacing->getTickSpacing->if->if->slider->getMinimum->temp->slider->getMinimum->whichTick->Math->round->if->slider->getMinimum->if->slider->setValue->if->slider->getOrientation->valuePosition->slider->getValue->xPositionForValue->else->valuePosition->slider->getValue->yPositionForValue
BasicSliderUI#calculateTrackBuffer():::Calculates the track buffer.:::if->slider->getPaintLabels->slider->getLabelTable->highLabel->getHighestValueLabel->lowLabel->getLowestValueLabel->if->slider->getOrientation->Math->highLabel->getBounds->lowLabel->getBounds->max->Math->max->else->Math->highLabel->getBounds->lowLabel->getBounds->max->Math->max->else->if->slider->getOrientation->else
BasicSliderUI#calculateTrackRect():::Calculates the track rectangle.:::centerSpacing->if->slider->getOrientation->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getHeightOfTallestLabel->else->if->BasicGraphicsUtils->isLeftToRight->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getWidthOfWidestLabel->else->if->slider->getPaintTicks->getTickLength->if->slider->getPaintLabels->getWidthOfWidestLabel
BasicSliderUI#getTickLength():::Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders:::return
BasicSliderUI#calculateTickRect():::Calculates the tick rectangle.:::if->slider->getOrientation->slider->getPaintTicks->getTickLength->else->slider->getPaintTicks->getTickLength->if->BasicGraphicsUtils->isLeftToRight->else
BasicSliderUI#calculateLabelRect():::Calculates the label rectangle.:::if->slider->getPaintLabels->if->slider->getOrientation->getHeightOfTallestLabel->else->if->BasicGraphicsUtils->isLeftToRight->getWidthOfWidestLabel->else->getWidthOfWidestLabel->else->if->slider->getOrientation->else->if->BasicGraphicsUtils->isLeftToRight->else
BasicSliderUI#getThumbSize():::Returns the thumb size.:::size->new->Dimension->if->slider->getOrientation->else->return
BasicSliderUI#getWidthOfWidestLabel():::Returns the width of the widest label.:::dictionary->slider->getLabelTable->widest->if->keys->dictionary->keys->while->keys->hasMoreElements->label->dictionary->keys->nextElement->get->Math->label->getPreferredSize->max->return
BasicSliderUI#getHeightOfTallestLabel():::Returns the height of the tallest label.:::dictionary->slider->getLabelTable->tallest->if->keys->dictionary->keys->while->keys->hasMoreElements->label->dictionary->keys->nextElement->get->Math->label->getPreferredSize->max->return
BasicSliderUI#getWidthOfHighValueLabel():::Returns the width of the highest value label.:::label->getHighestValueLabel->width->if->label->getPreferredSize->return
BasicSliderUI#getWidthOfLowValueLabel():::Returns the width of the lowest value label.:::label->getLowestValueLabel->width->if->label->getPreferredSize->return
BasicSliderUI#getHeightOfHighValueLabel():::Returns the height of the highest value label.:::label->getHighestValueLabel->height->if->label->getPreferredSize->return
BasicSliderUI#getHeightOfLowValueLabel():::Returns the height of the lowest value label.:::label->getLowestValueLabel->height->if->label->getPreferredSize->return
BasicSliderUI#drawInverted():::Draws inverted.:::if->slider->getOrientation->if->BasicGraphicsUtils->isLeftToRight->return->slider->getInverted->else->return->slider->getInverted->else->return->slider->getInverted
BasicSliderUI#getHighestValue():::Returns the biggest value that has an entry in the label table.:::dictionary->slider->getLabelTable->if->return->keys->dictionary->keys->max->while->keys->hasMoreElements->i->keys->nextElement->if->return
BasicSliderUI#getLowestValue():::Returns the smallest value that has an entry in the label table.:::dictionary->slider->getLabelTable->if->return->keys->dictionary->keys->min->while->keys->hasMoreElements->i->keys->nextElement->if->return
BasicSliderUI#getLowestValueLabel():::Returns the label that corresponds to the highest slider value in the label table.:::min->getLowestValue->if->return->slider->getLabelTable->get->return
BasicSliderUI#getHighestValueLabel():::Returns the label that corresponds to the lowest slider value in the label table.:::max->getHighestValue->if->return->slider->getLabelTable->get->return
BasicSliderUI#recalculateIfInsetsChanged():::Recalculates if the insets have changed.:::newInsets->slider->getInsets->if->newInsets->equals->calculateGeometry
BasicSliderUI#recalculateIfOrientationChanged():::Recalculates if the orientation has changed.:::ltr->BasicGraphicsUtils->isLeftToRight->if->calculateGeometry
BasicSliderUI#paintFocus(Graphics):::Paints focus.:::g->getFocusColor->setColor->BasicGraphicsUtils->drawDashedRect
BasicSliderUI#paintTrack(Graphics):::Paints track.:::trackBounds->if->slider->getOrientation->cy->cw->g->translate->g->getShadowColor->setColor->g->drawLine->g->drawLine->g->getHighlightColor->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->translate->else->cx->ch->g->translate->g->getShadowColor->setColor->g->drawLine->g->drawLine->g->getHighlightColor->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->translate
BasicSliderUI#paintTicks(Graphics):::Paints ticks.:::tickBounds->g->DefaultLookup->getColor->setColor->if->slider->getOrientation->g->translate->if->slider->getMinorTickSpacing->value->slider->getMinimum->while->slider->getMaximum->xPos->xPositionForValue->paintMinorTickForHorizSlider->if->slider->getMinorTickSpacing->break->slider->getMinorTickSpacing->if->slider->getMajorTickSpacing->value->slider->getMinimum->while->slider->getMaximum->xPos->xPositionForValue->paintMajorTickForHorizSlider->if->slider->getMajorTickSpacing->break->slider->getMajorTickSpacing->g->translate->else->g->translate->if->slider->getMinorTickSpacing->offset->if->BasicGraphicsUtils->isLeftToRight->g->translate->value->slider->getMinimum->while->slider->getMaximum->yPos->yPositionForValue->paintMinorTickForVertSlider->if->slider->getMinorTickSpacing->break->slider->getMinorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->if->slider->getMajorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->value->slider->getMinimum->while->slider->getMaximum->yPos->yPositionForValue->paintMajorTickForVertSlider->if->slider->getMajorTickSpacing->break->slider->getMajorTickSpacing->if->BasicGraphicsUtils->isLeftToRight->g->translate->g->translate
BasicSliderUI#paintMinorTickForHorizSlider(Graphics, Rectangle, int):::Paints minor tick for horizontal slider.:::g->drawLine
BasicSliderUI#paintMajorTickForHorizSlider(Graphics, Rectangle, int):::Paints major tick for horizontal slider.:::g->drawLine
BasicSliderUI#paintMinorTickForVertSlider(Graphics, Rectangle, int):::Paints minor tick for vertical slider.:::g->drawLine
BasicSliderUI#paintMajorTickForVertSlider(Graphics, Rectangle, int):::Paints major tick for vertical slider.:::g->drawLine
BasicSliderUI#paintLabels(Graphics):::Paints the labels.:::labelBounds->dictionary->slider->getLabelTable->if->keys->dictionary->keys->minValue->slider->getMinimum->maxValue->slider->getMaximum->enabled->slider->isEnabled->while->keys->hasMoreElements->key->keys->nextElement->value->key->intValue->if->label->dictionary->get->label->setEnabled->if->icon->label->isEnabled->getIcon->getDisabledIcon->if->Toolkit->getDefaultToolkit->getImage->checkImage->if->slider->getOrientation->g->translate->paintHorizontalLabel->g->translate->else->offset->if->BasicGraphicsUtils->isLeftToRight->label->getPreferredSize->g->translate->paintVerticalLabel->g->translate
BasicSliderUI#paintHorizontalLabel(Graphics, int, Component):::Called for every label in the label table:::labelCenter->xPositionForValue->labelLeft->label->getPreferredSize->g->translate->label->paint->g->translate
BasicSliderUI#paintVerticalLabel(Graphics, int, Component):::Called for every label in the label table:::labelCenter->yPositionForValue->labelTop->label->getPreferredSize->g->translate->label->paint->g->translate
BasicSliderUI#paintThumb(Graphics):::Paints the thumb.:::knobBounds->w->h->g->translate->if->slider->isEnabled->g->slider->getBackground->setColor->else->g->slider->getBackground->darker->setColor->paintThumbArrowShape->slider->getClientProperty->if->slider->getPaintTicks->g->fillRect->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->if->slider->getOrientation->cw->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->cw->if->BasicGraphicsUtils->isLeftToRight->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->else->g->fillRect->p->new->Polygon->p->addPoint->p->addPoint->p->addPoint->g->fillPolygon->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->translate
BasicSliderUI#setThumbLocation(int, int):::Sets the thumb location.:::unionRect->setBounds->thumbRect->setLocation->SwingUtilities->computeUnion->slider->repaint
BasicSliderUI#scrollByBlock(int):::Scrolls by block.:::synchronized->blockIncrement->slider->getMaximum->slider->getMinimum->if->tickSpacing->getTickSpacing->if->slider->getSnapToTicks->if->else->if->delta->slider->slider->getValue->setValue
BasicSliderUI#scrollByUnit(int):::Scrolls by unit.:::synchronized->delta->if->slider->getSnapToTicks->getTickSpacing->slider->slider->getValue->setValue
BasicSliderUI#scrollDueToClickInTrack(int):::This function is called when a mousePressed was detected in the track, not in the thumb:::scrollByBlock
BasicSliderUI#xPositionForValue(int):::Returns the x position for a value.:::min->slider->getMinimum->max->slider->getMaximum->trackLength->valueRange->pixelsPerValue->trackLeft->trackRight->xPosition->if->drawInverted->Math->round->else->Math->round->Math->max->Math->min->return
BasicSliderUI#yPositionForValue(int):::Returns the y position for a value.:::return->yPositionForValue
BasicSliderUI#yPositionForValue(int, int, int):::Returns the y location for the specified value:::min->slider->getMinimum->max->slider->getMaximum->valueRange->pixelsPerValue->trackBottom->yPosition->if->drawInverted->Math->round->else->Math->round->Math->max->Math->min->return
BasicSliderUI#valueForYPosition(int):::Returns the value at the y position:::value->minValue->slider->getMinimum->maxValue->slider->getMaximum->trackLength->trackTop->trackBottom->if->drawInverted->else->if->drawInverted->else->distanceFromTrackTop->valueRange->valuePerPixel->valueFromTrackTop->Math->round->drawInverted->return
BasicSliderUI#valueForXPosition(int):::Returns the value at the x position:::value->minValue->slider->getMinimum->maxValue->slider->getMaximum->trackLength->trackLeft->trackRight->if->drawInverted->else->if->drawInverted->else->distanceFromTrackLeft->valueRange->valuePerPixel->valueFromTrackLeft->Math->round->drawInverted->return
BasicSliderUI.TrackListener#mousePressed(MouseEvent):::If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page:::if->slider->isEnabled->return->calculateGeometry->e->getX->e->getY->if->slider->isRequestFocusEnabled->slider->requestFocus->if->thumbRect->contains->if->UIManager->getBoolean->SwingUtilities->isLeftMouseButton->return->switch->slider->getOrientation->break->break->return->if->SwingUtilities->isLeftMouseButton->return->slider->setValueIsAdjusting->sbSize->slider->getSize->direction->switch->slider->getOrientation->if->thumbRect->isEmpty->scrollbarCenter->if->drawInverted->else->else->thumbY->if->drawInverted->else->break->if->thumbRect->isEmpty->scrollbarCenter->if->drawInverted->else->else->thumbX->if->drawInverted->else->break->if->shouldScroll->scrollDueToClickInTrack->if->shouldScroll->scrollTimer->stop->scrollListener->setDirection->scrollTimer->start
BasicSliderUI.TrackListener#shouldScroll(int):::Returns if scrolling should occur:::r->if->slider->getOrientation->if->drawInverted->if->return->else->if->return->else->if->drawInverted->if->return->else->if->return->if->slider->getValue->slider->getExtent->slider->getMaximum->return->else->if->slider->getValue->slider->getMinimum->return->return
BasicSliderUI.TrackListener#mouseDragged(MouseEvent):::Set the models value to the position of the top/left of the thumb relative to the origin of the track.:::thumbMiddle->if->slider->isEnabled->return->e->getX->e->getY->if->return->slider->setValueIsAdjusting->switch->slider->getOrientation->halfThumbHeight->thumbTop->e->getY->trackTop->trackBottom->vMax->slider->getMaximum->slider->getExtent->yPositionForValue->if->drawInverted->else->Math->max->Math->min->setThumbLocation->slider->valueForYPosition->setValue->break->halfThumbWidth->thumbLeft->e->getX->trackLeft->trackRight->hMax->slider->getMaximum->slider->getExtent->xPositionForValue->if->drawInverted->else->Math->max->Math->min->setThumbLocation->slider->valueForXPosition->setValue->break
BasicSliderUI.ScrollListener#setDirection(int):::Sets the direction.:::
BasicSliderUI.ScrollListener#setScrollByBlock(boolean):::Sets scrolling by block:::
BasicSpinnerUI#createUI(JComponent):::Returns a new instance of BasicSpinnerUI:::return->new->BasicSpinnerUI
BasicSpinnerUI#installUI(JComponent):::Calls installDefaults, installListeners, and then adds the components returned by createNextButton, createPreviousButton, and createEditor.:::installDefaults->installListeners->createNextButton->maybeAdd->createPreviousButton->maybeAdd->createEditor->maybeAdd->updateEnabledState->installKeyboardActions
BasicSpinnerUI#uninstallUI(JComponent):::Calls uninstallDefaults, uninstallListeners, and then removes all of the spinners children.:::uninstallDefaults->uninstallListeners->c->removeAll
BasicSpinnerUI#installListeners():::Initializes PropertyChangeListener with a shared object that delegates interesting PropertyChangeEvents to protected methods:::createPropertyChangeListener->spinner->addPropertyChangeListener->if->DefaultLookup->getBoolean->spinner->getHandler->addChangeListener->editor->spinner->getEditor->if->tf->getTextField->if->tf->addFocusListener->tf->addFocusListener
BasicSpinnerUI#uninstallListeners():::Removes the PropertyChangeListener added by installListeners:::spinner->removePropertyChangeListener->spinner->removeChangeListener->editor->spinner->getEditor->removeEditorBorderListener->if->tf->getTextField->if->tf->removeFocusListener->tf->removeFocusListener
BasicSpinnerUI#installDefaults():::Initialize the JSpinner border, foreground, and background, properties based on the corresponding "Spinner.*" properties from defaults table:::spinner->createLayout->setLayout->LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->editor->spinner->getEditor->if->tf->getTextField->if->if->tf->getFont->font->spinner->getFont->tf->new->FontUIResource->setFont
BasicSpinnerUI#uninstallDefaults():::Sets the JSpinner's layout manager to null:::spinner->setLayout
BasicSpinnerUI#installNextButtonListeners(Component):::Installs the necessary listeners on the next button, c, to update the JSpinner in response to a user gesture.:::installButtonListeners
BasicSpinnerUI#installPreviousButtonListeners(Component):::Installs the necessary listeners on the previous button, c, to update the JSpinner in response to a user gesture.:::installButtonListeners
BasicSpinnerUI#createLayout():::Creates a LayoutManager that manages the editor, nextButton, and previousButton children of the JSpinner:::return->getHandler
BasicSpinnerUI#createPropertyChangeListener():::Creates a PropertyChangeListener that can be added to the JSpinner itself:::return->getHandler
BasicSpinnerUI#createPreviousButton():::Creates a decrement button, i.e:::c->createArrowButton->c->setName->installPreviousButtonListeners->return
BasicSpinnerUI#createNextButton():::Creates an increment button, i.e:::c->createArrowButton->c->setName->installNextButtonListeners->return
BasicSpinnerUI#createEditor():::This method is called by installUI to get the editor component of the JSpinner:::editor->spinner->getEditor->maybeRemoveEditorBorder->installEditorBorderListener->editor->setInheritsPopupMenu->updateEditorAlignment->return
BasicSpinnerUI#replaceEditor(JComponent, JComponent):::Called by the PropertyChangeListener when the JSpinner editor property changes:::spinner->remove->maybeRemoveEditorBorder->installEditorBorderListener->newEditor->setInheritsPopupMenu->spinner->add
BasicSpinnerUI#installKeyboardActions():::Installs the keyboard Actions onto the JSpinner.:::iMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSpinnerUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->editor->spinner->getEditor->insets->spinner->getInsets->if->baseline->editor->getBaseline->if->return->return
BasicSpinnerUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return->spinner->getEditor->getBaselineResizeBehavior
BasicSplitPaneDivider#setBasicSplitPaneUI(BasicSplitPaneUI):::Sets the SplitPaneUI that is using the receiver.:::if->splitPane->removePropertyChangeListener->if->splitPane->removeMouseListener->splitPane->removeMouseMotionListener->removeMouseListener->removeMouseMotionListener->if->newUI->getSplitPane->if->if->new->MouseHandler->splitPane->addMouseListener->splitPane->addMouseMotionListener->addMouseListener->addMouseMotionListener->splitPane->addPropertyChangeListener->if->splitPane->isOneTouchExpandable->oneTouchExpandableChanged->else
BasicSplitPaneDivider#getBasicSplitPaneUI():::Returns the SplitPaneUI the receiver is currently in.:::return
BasicSplitPaneDivider#setDividerSize(int):::Sets the size of the divider to newSize:::
BasicSplitPaneDivider#getDividerSize():::Returns the size of the divider, that is the width if the splitpane is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.:::return
BasicSplitPaneDivider#setBorder(Border):::Sets the border of this component.:::oldBorder
BasicSplitPaneDivider#getBorder():::Returns the border of this component or null if no border is currently set.:::return
BasicSplitPaneDivider#getInsets():::If a border has been set on this component, returns the border's insets, else calls super.getInsets.:::border->getBorder->if->return->border->getBorderInsets->return->super->getInsets
BasicSplitPaneDivider#setMouseOver(boolean):::Sets whether or not the mouse is currently over the divider.:::
BasicSplitPaneDivider#isMouseOver():::Returns whether or not the mouse is currently over the divider:::return
BasicSplitPaneDivider#getPreferredSize():::Returns dividerSize x dividerSize:::if->return->getDividerSize->new->Dimension->return->getDividerSize->new->Dimension
BasicSplitPaneDivider#getMinimumSize():::Returns dividerSize x dividerSize:::return->getPreferredSize
BasicSplitPaneDivider#propertyChange(PropertyChangeEvent):::Property change event, presumably from the JSplitPane, will message updateOrientation if necessary.:::if->e->getSource->if->e->getPropertyName->splitPane->getOrientation->Cursor->getPredefinedCursor->Cursor->getPredefinedCursor->setCursor->revalidateSplitPane->else->if->e->getPropertyName->oneTouchExpandableChanged
BasicSplitPaneDivider#paint(Graphics):::Paints the divider.:::super->paint->border->getBorder->if->size->getSize->border->paintBorder
BasicSplitPaneDivider#oneTouchExpandableChanged():::Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes:::if->DefaultLookup->getBoolean->return->if->splitPane->isOneTouchExpandable->createLeftOneTouchButton->if->leftButton->new->OneTouchActionHandler->addActionListener->createRightOneTouchButton->if->rightButton->new->OneTouchActionHandler->addActionListener->if->add->add->revalidateSplitPane
BasicSplitPaneDivider#createLeftOneTouchButton():::Creates and return an instance of JButton that can be used to collapse the left component in the split pane.:::b->new->JButton->b->new->Dimension->setMinimumSize->b->Cursor->getPredefinedCursor->setCursor->b->setFocusPainted->b->setBorderPainted->b->setRequestFocusEnabled->return
BasicSplitPaneDivider#createRightOneTouchButton():::Creates and return an instance of JButton that can be used to collapse the right component in the split pane.:::b->new->JButton->b->new->Dimension->setMinimumSize->b->Cursor->getPredefinedCursor->setCursor->b->setFocusPainted->b->setBorderPainted->b->setRequestFocusEnabled->return
BasicSplitPaneDivider#prepareForDragging():::Message to prepare for dragging:::splitPaneUI->startDragging
BasicSplitPaneDivider#dragDividerTo(int):::Messages the BasicSplitPaneUI with dragDividerTo that this instance is contained in.:::splitPaneUI->dragDividerTo
BasicSplitPaneDivider#finishDraggingTo(int):::Messages the BasicSplitPaneUI with finishDraggingTo that this instance is contained in.:::splitPaneUI->finishDraggingTo
BasicSplitPaneDivider.MouseHandler#mousePressed(MouseEvent):::Starts the dragging session by creating the appropriate instance of DragController.:::if->e->getSource->e->getSource->splitPane->isEnabled->newHiddenDivider->splitPaneUI->getNonContinuousLayoutDivider->if->if->hiddenDivider->removeMouseListener->hiddenDivider->removeMouseMotionListener->if->hiddenDivider->addMouseMotionListener->hiddenDivider->addMouseListener->if->splitPane->getLeftComponent->splitPane->getRightComponent->if->new->DragController->else->new->VerticalDragController->if->dragger->isValid->else->prepareForDragging->dragger->continueDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseReleased(MouseEvent):::If dragger is not null it is messaged with completeDrag.:::if->if->e->getSource->dragger->e->getX->e->getY->completeDrag->else->if->e->getSource->ourLoc->getLocation->dragger->e->getX->e->getY->completeDrag->else->if->e->getSource->hDividerLoc->hiddenDivider->getLocation->ourX->e->getX->ourY->e->getY->dragger->completeDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseDragged(MouseEvent):::If dragger is not null it is messaged with continueDrag.:::if->if->e->getSource->dragger->e->getX->e->getY->continueDrag->else->if->e->getSource->ourLoc->getLocation->dragger->e->getX->e->getY->continueDrag->else->if->e->getSource->hDividerLoc->hiddenDivider->getLocation->ourX->e->getX->ourY->e->getY->dragger->continueDrag->e->consume
BasicSplitPaneDivider.MouseHandler#mouseMoved(MouseEvent)::: Resets the cursor based on the orientation.:::
BasicSplitPaneDivider.MouseHandler#mouseEntered(MouseEvent):::Invoked when the mouse enters a component.:::if->e->getSource->setMouseOver
BasicSplitPaneDivider.MouseHandler#mouseExited(MouseEvent):::Invoked when the mouse exits a component.:::if->e->getSource->setMouseOver
BasicSplitPaneDivider.DragController#isValid():::Returns true if the dragging session is valid.:::return
BasicSplitPaneDivider.DragController#positionForMouseEvent(MouseEvent):::Returns the new position to put the divider at based on the passed in MouseEvent.:::newX->e->getSource->e->getX->getLocation->e->getX->Math->Math->max->min->return
BasicSplitPaneDivider.DragController#getNeededLocation(int, int):::Returns the x argument, since this is used for horizontal splits.:::newX->Math->Math->max->min->return
BasicSplitPaneDivider.DragController#continueDrag(int, int):::Messages dragDividerTo with the new location for the mouse event.:::getNeededLocation->dragDividerTo
BasicSplitPaneDivider.DragController#continueDrag(MouseEvent):::Messages dragDividerTo with the new location for the mouse event.:::positionForMouseEvent->dragDividerTo
BasicSplitPaneDivider.DragController#completeDrag(int, int):::Messages finishDraggingTo with the new location for the mouse event.:::getNeededLocation->finishDraggingTo
BasicSplitPaneDivider.DragController#completeDrag(MouseEvent):::Messages finishDraggingTo with the new location for the mouse event.:::positionForMouseEvent->finishDraggingTo
BasicSplitPaneDivider.VerticalDragController#getNeededLocation(int, int):::Returns the y argument, since this is used for vertical splits.:::newY->Math->Math->max->min->return
BasicSplitPaneDivider.VerticalDragController#positionForMouseEvent(MouseEvent):::Returns the new position to put the divider at based on the passed in MouseEvent.:::newY->e->getSource->e->getY->getLocation->e->getY->Math->Math->max->min->return
BasicSplitPaneUI#createUI(JComponent):::Creates a new instance of BasicSplitPaneUI.:::return->new->BasicSplitPaneUI
BasicSplitPaneUI#installUI(JComponent):::Installs the UI.:::installDefaults->installListeners->installKeyboardActions->setLastDragLocation
BasicSplitPaneUI#installDefaults():::Installs the UI defaults.:::LookAndFeel->installBorder->LookAndFeel->installColors->LookAndFeel->installProperty->if->createDefaultDivider->divider->setBasicSplitPaneUI->b->divider->getBorder->if->divider->UIManager->getBorder->setBorder->UIManager->getColor->splitPane->getOrientation->setOrientation->temp->UIManager->get->LookAndFeel->installProperty->divider->splitPane->getDividerSize->setDividerSize->divider->getDividerSize->splitPane->add->splitPane->isContinuousLayout->setContinuousLayout->resetLayoutManager->if->createDefaultNonContinuousLayoutDivider->setNonContinuousLayoutDivider->else->setNonContinuousLayoutDivider->if->new->HashSet<KeyStroke>->managingFocusForwardTraversalKeys->KeyStroke->getKeyStroke->add->splitPane->setFocusTraversalKeys->if->new->HashSet<KeyStroke>->managingFocusBackwardTraversalKeys->KeyStroke->getKeyStroke->add->splitPane->setFocusTraversalKeys
BasicSplitPaneUI#installListeners():::Installs the event listeners for the UI.:::if->createPropertyChangeListener->splitPane->addPropertyChangeListener->if->createFocusListener->splitPane->addFocusListener
BasicSplitPaneUI#installKeyboardActions():::Installs the keyboard actions for the UI.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicSplitPaneUI#uninstallUI(JComponent):::Uninstalls the UI.:::uninstallKeyboardActions->uninstallListeners->uninstallDefaults
BasicSplitPaneUI#uninstallDefaults():::Uninstalls the UI defaults.:::if->splitPane->getLayout->splitPane->setLayout->if->splitPane->remove->LookAndFeel->uninstallBorder->b->divider->getBorder->if->divider->setBorder->splitPane->remove->divider->setBasicSplitPaneUI->setNonContinuousLayoutDivider->splitPane->setFocusTraversalKeys->splitPane->setFocusTraversalKeys
BasicSplitPaneUI#uninstallListeners():::Uninstalls the event listeners for the UI.:::if->splitPane->removePropertyChangeListener->if->splitPane->removeFocusListener
BasicSplitPaneUI#uninstallKeyboardActions():::Uninstalls the keyboard actions for the UI.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicSplitPaneUI#createPropertyChangeListener():::Creates a PropertyChangeListener for the JSplitPane UI.:::return->getHandler
BasicSplitPaneUI#createFocusListener():::Creates a FocusListener for the JSplitPane UI.:::return->getHandler
BasicSplitPaneUI#createKeyboardUpLeftListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardUpLeftHandler
BasicSplitPaneUI#createKeyboardDownRightListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardDownRightHandler
BasicSplitPaneUI#createKeyboardHomeListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardHomeHandler
BasicSplitPaneUI#createKeyboardEndListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardEndHandler
BasicSplitPaneUI#createKeyboardResizeToggleListener():::As of Java 2 platform v1.3 this method is no longer used:::return->new->KeyboardResizeToggleHandler
BasicSplitPaneUI#getOrientation():::Returns the orientation for the JSplitPane.:::return
BasicSplitPaneUI#setOrientation(int):::Set the orientation for the JSplitPane.:::
BasicSplitPaneUI#isContinuousLayout():::Determines whether the JSplitPane is set to use a continuous layout.:::return
BasicSplitPaneUI#setContinuousLayout(boolean):::Turn continuous layout on/off.:::
BasicSplitPaneUI#getLastDragLocation():::Returns the last drag location of the JSplitPane.:::return
BasicSplitPaneUI#setLastDragLocation(int):::Set the last drag location of the JSplitPane.:::
BasicSplitPaneUI.PropertyHandler#propertyChange(PropertyChangeEvent):::Messaged from the JSplitPane the receiver is contained in:::getHandler->propertyChange
BasicSplitPaneUI#getDivider():::Returns the divider between the top Components.:::return
BasicSplitPaneUI#createDefaultNonContinuousLayoutDivider():::Returns the default non continuous layout divider, which is an instance of Canvas that fills in the background with dark gray.:::return->new->Canvas
BasicSplitPaneUI#setNonContinuousLayoutDivider(Component):::Sets the divider to use when the JSplitPane is configured to not continuously layout:::setNonContinuousLayoutDivider
BasicSplitPaneUI#setNonContinuousLayoutDivider(Component, boolean):::Sets the divider to use.:::if->splitPane->remove
BasicSplitPaneUI#getNonContinuousLayoutDivider():::Returns the divider to use when the JSplitPane is configured to not continuously layout:::return
BasicSplitPaneUI#getSplitPane():::Returns the JSplitPane this instance is currently contained in.:::return
BasicSplitPaneUI#createDefaultDivider():::Creates the default divider.:::return->new->BasicSplitPaneDivider
BasicSplitPaneUI#resetToPreferredSizes(JSplitPane):::Messaged to reset the preferred sizes.:::if->layoutManager->resetToPreferredSizes->splitPane->revalidate->splitPane->repaint
BasicSplitPaneUI#setDividerLocation(JSplitPane, int):::Sets the location of the divider to location.:::if->splitPane->revalidate->splitPane->repaint->if->insets->splitPane->getInsets->orientation->splitPane->getOrientation->if->splitPane->getHeight->divider->getHeight->splitPane->getWidth->divider->getWidth->setKeepHidden->else
BasicSplitPaneUI#getDividerLocation(JSplitPane):::Returns the location of the divider, which may differ from what the splitpane thinks the location of the divider is.:::if->return->divider->getLocation->return->divider->getLocation
BasicSplitPaneUI#getMinimumDividerLocation(JSplitPane):::Gets the minimum location of the divider.:::minLoc->leftC->splitPane->getLeftComponent->if->leftC->isVisible->insets->splitPane->getInsets->minSize->leftC->getMinimumSize->if->else->if->if->else->return
BasicSplitPaneUI#getMaximumDividerLocation(JSplitPane):::Gets the maximum location of the divider.:::splitPaneSize->splitPane->getSize->maxLoc->rightC->splitPane->getRightComponent->if->insets->splitPane->getInsets->minSize->new->Dimension->if->rightC->isVisible->rightC->getMinimumSize->if->else->if->if->else->return->Math->getMinimumDividerLocation->max
BasicSplitPaneUI#finishedPaintingChildren(JSplitPane, Graphics):::Called when the specified split pane has finished painting its children.:::if->getLastDragLocation->isContinuousLayout->size->splitPane->getSize->g->setColor->if->g->getLastDragLocation->fillRect->else->g->fillRect
BasicSplitPaneUI#getPreferredSize(JComponent):::Returns the preferred size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->preferredLayoutSize->return->new->Dimension
BasicSplitPaneUI#getMinimumSize(JComponent):::Returns the minimum size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->minimumLayoutSize->return->new->Dimension
BasicSplitPaneUI#getMaximumSize(JComponent):::Returns the maximum size for the passed in component, This is passed off to the current layout manager.:::if->return->layoutManager->maximumLayoutSize->return->new->Dimension
BasicSplitPaneUI#getInsets(JComponent):::Returns the insets:::return
BasicSplitPaneUI#resetLayoutManager():::Resets the layout manager based on orientation and messages it with invalidateLayout to pull in appropriate Components.:::if->new->BasicHorizontalLayoutManager->else->new->BasicHorizontalLayoutManager->splitPane->setLayout->layoutManager->updateComponents->splitPane->revalidate->splitPane->repaint
BasicSplitPaneUI#setKeepHidden(boolean):::Set the value to indicate if one of the splitpane sides is expanded.:::
BasicSplitPaneUI#startDragging():::Should be messaged before the dragging session starts, resets lastDragLocation and dividerSize.:::leftC->splitPane->getLeftComponent->rightC->splitPane->getRightComponent->cPeer->getDividerLocation->acc->AWTAccessor->getComponentAccessor->if->acc->getPeer->else->if->acc->getPeer->if->divider->getBounds->setLastDragLocation->divider->getSize->if->isContinuousLayout->nonContinuousLayoutDivider->getLastDragLocation->splitPane->getHeight->setBounds->addHeavyweightDivider->else->divider->getBounds->setLastDragLocation->divider->getSize->if->isContinuousLayout->nonContinuousLayoutDivider->getLastDragLocation->splitPane->getWidth->setBounds->addHeavyweightDivider
BasicSplitPaneUI#dragDividerTo(int):::Messaged during a dragging session to move the divider to the passed in location:::if->getLastDragLocation->if->isContinuousLayout->splitPane->setDividerLocation->setLastDragLocation->else->lastLoc->getLastDragLocation->setLastDragLocation->if->if->nonContinuousLayoutDivider->getLastDragLocation->setLocation->else->splitHeight->splitPane->getHeight->splitPane->repaint->splitPane->repaint->else->if->nonContinuousLayoutDivider->getLastDragLocation->setLocation->else->splitWidth->splitPane->getWidth->splitPane->repaint->splitPane->repaint
BasicSplitPaneUI#finishDraggingTo(int):::Messaged to finish the dragging session:::dragDividerTo->setLastDragLocation->if->isContinuousLayout->leftC->splitPane->getLeftComponent->leftBounds->leftC->getBounds->if->if->nonContinuousLayoutDivider->setLocation->else->nonContinuousLayoutDivider->setLocation->splitPane->remove->splitPane->setDividerLocation
BasicSplitPaneUI#getDividerBorderSize():::As of Java 2 platform v1.3 this method is no longer used:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#layoutContainer(Container):::Does the actual layout.:::containerSize->container->getSize->if->return->spDividerLocation->splitPane->getDividerLocation->insets->splitPane->getInsets->availableSize->getAvailableSize->newSize->getSizeForPrimaryAxis->beginLocation->getDividerLocation->dOffset->getSizeForPrimaryAxis->dSize->getPreferredSize->if->resetToPreferredSizes->else->if->getSizeForPrimaryAxis->if->getSizeForPrimaryAxis->else->setDividerLocation->else->if->getKeepHidden->distributeSpace->nextLocation->getInitialLocation->counter->while->if->isVisible->setComponentToSize->switch->break->break->break->if->newLocation->getDividerLocation->if->lastLocation->splitPane->getLastDividerLocation->try->splitPane->setDividerLocation->splitPane->setLastDividerLocation->catch->finally
BasicSplitPaneUI.BasicHorizontalLayoutManager#addLayoutComponent(String, Component):::Adds the component at place:::isValid->if->if->place->equals->component->getPreferredSize->getSizeForPrimaryAxis->else->if->place->equals->place->equals->else->if->place->equals->place->equals->else->if->place->equals->else->if->throw->new->IllegalArgumentException
BasicSplitPaneUI.BasicHorizontalLayoutManager#minimumLayoutSize(Container):::Returns the minimum size needed to contain the children:::minPrimary->minSecondary->insets->splitPane->getInsets->for->counter->if->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForSecondaryAxis->getSizeForSecondaryAxis->if->return->new->Dimension->return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#preferredLayoutSize(Container):::Returns the preferred size needed to contain the children:::prePrimary->preSecondary->insets->splitPane->getInsets->for->counter->if->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForSecondaryAxis->getSizeForSecondaryAxis->if->return->new->Dimension->return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#removeLayoutComponent(Component):::Removes the specified component from our knowledge.:::for->counter
BasicSplitPaneUI.BasicHorizontalLayoutManager#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object.:::if->addLayoutComponent->else->throw->new->IllegalArgumentException
BasicSplitPaneUI.BasicHorizontalLayoutManager#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
BasicSplitPaneUI.BasicHorizontalLayoutManager#invalidateLayout(Container):::Does nothing:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#maximumLayoutSize(Container):::Returns the maximum layout size, which is Integer.MAX_VALUE in both directions.:::return->new->Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetToPreferredSizes():::Marks the receiver so that the next time this instance is laid out it'll ask for the preferred sizes.:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetSizeAt(int):::Resets the size of the Component at the passed in location.:::
BasicSplitPaneUI.BasicHorizontalLayoutManager#setSizes(int[]):::Sets the sizes to newSizes.:::System->arraycopy
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizes():::Returns the sizes of the components.:::retSizes->new->intArr->System->arraycopy->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getPreferredSizeOfComponent(Component):::Returns the width of the passed in Components preferred size.:::return->c->getPreferredSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getMinimumSizeOfComponent(Component):::Returns the width of the passed in Components minimum size.:::return->c->getMinimumSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeOfComponent(Component):::Returns the width of the passed in component.:::return->c->getSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getAvailableSize(Dimension, Insets):::Returns the available width based on the container size and Insets.:::if->return->getSizeForPrimaryAxis->return->getSizeForPrimaryAxis->getSizeForPrimaryAxis->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#getInitialLocation(Insets):::Returns the left inset, unless the Insets are null in which case 0 is returned.:::if->return->getSizeForPrimaryAxis->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#setComponentToSize(Component, int, int, Insets, Dimension):::Sets the width of the component c to be size, placing its x location at location, y to the insets.top and height to the containerSize.height less the top and bottom insets.:::if->if->c->setBounds->else->c->setBounds->else->if->c->setBounds->else->c->setBounds
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForPrimaryAxis(Dimension):::If the axis == 0, the width is returned, otherwise the height.:::if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForSecondaryAxis(Dimension):::If the axis == 0, the width is returned, otherwise the height.:::if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForPrimaryAxis(Insets, boolean):::Returns a particular value of the inset identified by the axis and isTop   axis isTop    0    true    - left    0    false   - right    1    true    - top    1    false   - bottom:::if->if->return->return->if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getSizeForSecondaryAxis(Insets, boolean):::Returns a particular value of the inset identified by the axis and isTop   axis isTop    0    true    - left    0    false   - right    1    true    - top    1    false   - bottom:::if->if->return->return->if->return->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#updateComponents():::Determines the components:::comp->splitPane->getLeftComponent->if->if->else->splitPane->getRightComponent->if->if->else->children->splitPane->getComponents->oldDivider->for->counter->if->else->getPreferredSize->getSizeForPrimaryAxis
BasicSplitPaneUI.BasicHorizontalLayoutManager#setDividerLocation(int, int):::Resets the size of the first component to leftSize, and the right component to the remainder of the space.:::lValid->isVisible->rValid->isVisible->dValid->isVisible->max->if->Math->Math->min->max->if->if->else->else->if
BasicSplitPaneUI.BasicHorizontalLayoutManager#getPreferredSizes():::Returns an array of the minimum sizes of the components.:::retValue->new->intArr->for->counter->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#getMinimumSizes():::Returns an array of the minimum sizes of the components.:::retValue->new->intArr->for->counter->getMinimumSizeOfComponent->return
BasicSplitPaneUI.BasicHorizontalLayoutManager#resetToPreferredSizes(int):::Resets the components to their preferred sizes.:::testSizes->getPreferredSizes->totalSize->for->counter->if->getMinimumSizes->for->counter->setSizes->distributeSpace
BasicSplitPaneUI.BasicHorizontalLayoutManager#distributeSpace(int, boolean):::Distributes space between the two components (divider won't get any extra space) based on the weighting:::lValid->isVisible->rValid->isVisible->if->if->getSize->getSizeForPrimaryAxis->if->getSize->getSizeForPrimaryAxis->else->if->getSize->getSizeForPrimaryAxis->if->weight->splitPane->getResizeWeight->lExtra->rExtra->lMin->getMinimumSizeOfComponent->rMin->getMinimumSizeOfComponent->lMinValid->rMinValid->if->if->else->if->else->if->if->if->else->else->if->if->if->else->if->if->else->if->Math->max->else->if->Math->max
BasicTabbedPaneUI#createUI(JComponent):::Create a UI.:::return->new->BasicTabbedPaneUI
BasicTabbedPaneUI#createLayoutManager():::Invoked by installUI to create a layout manager object to manage the JTabbedPane.:::if->tabPane->getTabLayoutPolicy->return->new->TabbedPaneScrollLayout->else->return->new->TabbedPaneLayout
BasicTabbedPaneUI#installComponents():::Creates and installs any required subcomponents for the JTabbedPane:::if->scrollableTabLayoutEnabled->if->tabPane->getTabPlacement->new->ScrollableTabSupport->tabPane->add->installTabContainer
BasicTabbedPaneUI#createScrollButton(int):::Creates and returns a JButton that will provide the user with a way to scroll the tabs in a particular direction:::if->throw->new->IllegalArgumentException->return->new->ScrollableTabButton
BasicTabbedPaneUI#uninstallComponents():::Removes any installed subcomponents from the JTabbedPane:::uninstallTabContainer->if->scrollableTabLayoutEnabled->tabPane->remove->tabPane->remove->tabPane->remove
BasicTabbedPaneUI#installDefaults():::Install the defaults.:::LookAndFeel->installColorsAndFont->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getColor->UIManager->getInt->UIManager->getInsets->UIManager->getInsets->UIManager->getInsets->UIManager->getBoolean->UIManager->getInsets->UIManager->getInt->UIManager->getBoolean->UIManager->getBoolean->opaque->UIManager->get->if->LookAndFeel->installProperty->if->new->Insets->if->new->Insets->if->new->Insets->if->new->Insets
BasicTabbedPaneUI#uninstallDefaults():::Uninstall the defaults.:::
BasicTabbedPaneUI#installListeners():::Install the listeners.:::if->createPropertyChangeListener->tabPane->addPropertyChangeListener->if->createChangeListener->tabPane->addChangeListener->if->createMouseListener->tabPane->addMouseListener->tabPane->getHandler->addMouseMotionListener->if->createFocusListener->tabPane->addFocusListener->tabPane->getHandler->addContainerListener->if->tabPane->getTabCount->createHTMLVector
BasicTabbedPaneUI#uninstallListeners():::Uninstall the listeners.:::if->tabPane->removeMouseListener->tabPane->getHandler->removeMouseMotionListener->if->tabPane->removeFocusListener->tabPane->getHandler->removeContainerListener->if->htmlViews->removeAllElements->if->tabPane->removeChangeListener->if->tabPane->removePropertyChangeListener
BasicTabbedPaneUI#createMouseListener():::Creates a mouse listener.:::return->getHandler
BasicTabbedPaneUI#createFocusListener():::Creates a focus listener.:::return->getHandler
BasicTabbedPaneUI#createChangeListener():::Creates a change listener.:::return->getHandler
BasicTabbedPaneUI#createPropertyChangeListener():::Creates a property change listener.:::return->getHandler
BasicTabbedPaneUI#installKeyboardActions():::Installs the keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap->updateMnemonics
BasicTabbedPaneUI#uninstallKeyboardActions():::Uninstalls the keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap
BasicTabbedPaneUI#setRolloverTab(int):::Sets the tab the mouse is currently over to index:::
BasicTabbedPaneUI#getRolloverTab():::Returns the tab the mouse is currently over, or -1 if the mouse is no longer over any tab.:::return
BasicTabbedPaneUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->calculateBaselineIfNecessary->if->placement->tabPane->getTabPlacement->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->switch->return->return->return->return
BasicTabbedPaneUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->switch->tabPane->getTabPlacement->return->return->return
BasicTabbedPaneUI#getBaseline(int):::Returns the baseline for the specified tab.:::if->tabPane->getTabComponentAt->offset->getBaselineOffset->if->return->c->tabPane->getTabComponentAt->pref->c->getPreferredSize->tabInsets->tabPane->getTabPlacement->getTabInsets->cellHeight->return->c->getBaseline->else->view->getTextViewForTab->if->viewHeight->view->getPreferredSpan->baseline->BasicHTML->view->getPreferredSpan->getHTMLBaseline->if->return->getBaselineOffset->return->metrics->getFontMetrics->fontHeight->metrics->getHeight->fontBaseline->metrics->getAscent->return->getBaselineOffset
BasicTabbedPaneUI#getBaselineOffset():::Returns the amount the baseline is offset by:::switch->tabPane->getTabPlacement->if->tabPane->getTabCount->return->else->return->if->tabPane->getTabCount->return->else->return->return
BasicTabbedPaneUI#paintTabArea(Graphics, int, int):::Paints the tabs in the tab area:::tabCount->tabPane->getTabCount->iconRect->new->Rectangle->textRect->new->Rectangle->clipRect->g->getClipBounds->for->i->if->intersects->paintTab
BasicTabbedPaneUI#paintTab(Graphics, int, Rectangle[], int, Rectangle, Rectangle):::Paints a tab.:::tabRect->selectedIndex->tabPane->getSelectedIndex->isSelected->if->tabPane->isOpaque->paintTabBackground->paintTabBorder->title->tabPane->getTitleAt->font->tabPane->getFont->metrics->SwingUtilities2->getFontMetrics->icon->getIconForTab->layoutLabel->if->tabPane->getTabComponentAt->clippedTitle->if->scrollableTabLayoutEnabled->isParamsSet->getTabIndex->isHorizontalTabPlacement->availTextWidth->getCropline->getCroppedSideWidth->SwingUtilities2->clipStringIfNecessary->else->if->scrollableTabLayoutEnabled->isHorizontalTabPlacement->SwingUtilities2->clipStringIfNecessary->paintText->paintIcon->paintFocusIndicator
BasicTabbedPaneUI#layoutLabel(int, FontMetrics, int, String, Icon, Rectangle, Rectangle, Rectangle, boolean):::Laysout a label.:::v->getTextViewForTab->if->tabPane->putClientProperty->SwingUtilities->layoutCompoundLabel->tabPane->putClientProperty->xNudge->getTabLabelShiftX->yNudge->getTabLabelShiftY
BasicTabbedPaneUI#paintIcon(Graphics, int, int, Icon, Rectangle, boolean):::Paints an icon.:::if->oldClip->g->getClip->clip->icon->paintIcon->g->setClip
BasicTabbedPaneUI#paintText(Graphics, int, Font, FontMetrics, int, String, Rectangle, boolean):::Paints text.:::g->setFont->v->getTextViewForTab->if->v->paint->else->mnemIndex->tabPane->getDisplayedMnemonicIndexAt->if->tabPane->isEnabled->tabPane->isEnabledAt->fg->tabPane->getForegroundAt->if->selectedFG->UIManager->getColor->if->g->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt->else->g->tabPane->getBackgroundAt->brighter->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt->g->tabPane->getBackgroundAt->darker->setColor->SwingUtilities2->metrics->getAscent->drawStringUnderlineCharAt
BasicTabbedPaneUI#getTabLabelShiftX(int, int, boolean):::Returns the tab label shift x.:::tabRect->propKey->nudge->DefaultLookup->getInt->switch->return->return->return
BasicTabbedPaneUI#getTabLabelShiftY(int, int, boolean):::Returns the tab label shift y.:::tabRect->nudge->DefaultLookup->getInt->DefaultLookup->getInt->switch->return->return->return
BasicTabbedPaneUI#paintFocusIndicator(Graphics, int, Rectangle[], int, Rectangle, Rectangle, boolean):::Paints the focus indicator.:::tabRect->if->tabPane->hasFocus->x->y->w->h->g->setColor->switch->break->break->break->BasicGraphicsUtils->drawDashedRect
BasicTabbedPaneUI#paintTabBorder(Graphics, int, int, int, int, int, int, boolean):::this function draws the border around each tab note that this function does now draw the background of the tab:::g->setColor->switch->g->drawLine->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->setColor->g->drawLine->break->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->drawLine->g->drawLine->break->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->drawLine->g->drawLine->break->g->drawLine->g->drawLine->g->drawLine->g->setColor->g->drawLine->g->setColor->g->drawLine->g->drawLine
BasicTabbedPaneUI#paintTabBackground(Graphics, int, int, int, int, int, int, boolean):::Paints the tab background.:::g->tabPane->getBackgroundAt->setColor->switch->g->fillRect->break->g->fillRect->break->g->fillRect->break->g->fillRect
BasicTabbedPaneUI#paintContentBorder(Graphics, int, int):::Paints the content border.:::width->tabPane->getWidth->height->tabPane->getHeight->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->x->y->w->h->switch->calculateTabAreaWidth->if->break->calculateTabAreaWidth->if->break->calculateTabAreaHeight->if->break->calculateTabAreaHeight->if->if->tabPane->getTabCount->tabPane->isOpaque->color->UIManager->getColor->if->g->setColor->else->if->g->tabPane->getBackground->setColor->else->g->setColor->g->fillRect->paintContentBorderTopEdge->paintContentBorderLeftEdge->paintContentBorderBottomEdge->paintContentBorderRightEdge
BasicTabbedPaneUI#paintContentBorderTopEdge(Graphics, int, int, int, int, int, int):::Paints the content border top edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->else->g->drawLine->if->g->drawLine->else->g->setColor->g->drawLine
BasicTabbedPaneUI#paintContentBorderLeftEdge(Graphics, int, int, int, int, int, int):::Paints the content border left edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->else->g->drawLine->if->g->drawLine
BasicTabbedPaneUI#paintContentBorderBottomEdge(Graphics, int, int, int, int, int, int):::Paints the content border bottom edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->g->setColor->g->drawLine->else->g->drawLine->g->setColor->g->drawLine->if->g->setColor->g->drawLine->g->setColor->g->drawLine
BasicTabbedPaneUI#paintContentBorderRightEdge(Graphics, int, int, int, int, int, int):::Paints the content border right edge.:::selRect->getTabBounds->g->setColor->if->g->drawLine->g->setColor->g->drawLine->else->g->drawLine->g->setColor->g->drawLine->if->g->setColor->g->drawLine->g->setColor->g->drawLine
BasicTabbedPaneUI#getTabBounds(JTabbedPane, int):::Returns the bounds of the specified tab index:::ensureCurrentLayout->tabRect->new->Rectangle->return->getTabBounds
BasicTabbedPaneUI#tabForCoordinate(JTabbedPane, int, int):::Returns the tab index which intersects the specified point in the JTabbedPane's coordinate space.:::return->tabForCoordinate
BasicTabbedPaneUI#getTabBounds(int, Rectangle):::Returns the bounds of the specified tab in the coordinate space of the JTabbedPane component:::if->scrollableTabLayoutEnabled->vpp->getLocation->viewp->getViewPosition->else->return
BasicTabbedPaneUI#getVisibleComponent():::Returns the visible component.:::return
BasicTabbedPaneUI#setVisibleComponent(Component):::Sets the visible component.:::if->visibleComponent->getParent->visibleComponent->isVisible->visibleComponent->setVisible->if->component->isVisible->component->setVisible
BasicTabbedPaneUI#assureRectsCreated(int):::Assure the rectangles are created.:::rectArrayLen->if->tempRectArray->new->RectangleArr->System->Math->min->arraycopy->for->rectIndex
BasicTabbedPaneUI#expandTabRunsArray():::Expands the tab runs array.:::rectLen->newArray->new->intArr->System->arraycopy
BasicTabbedPaneUI#getRunForTab(int, int):::Returns the run for a tab.:::for->i->return
BasicTabbedPaneUI#lastTabInRun(int, int):::Returns the last tab in a run.:::if->return->nextRun->if->return->return
BasicTabbedPaneUI#getTabRunOverlay(int):::Returns the tab run overlay.:::return
BasicTabbedPaneUI#getTabRunIndent(int, int):::Returns the tab run indent.:::return
BasicTabbedPaneUI#shouldPadTabRun(int, int):::Returns whether or not the tab run should be padded.:::return
BasicTabbedPaneUI#shouldRotateTabRuns(int):::Returns whether or not the tab run should be rotated.:::return
BasicTabbedPaneUI#getIconForTab(int):::Returns the icon for a tab.:::return->tabPane->isEnabled->tabPane->isEnabledAt->tabPane->getDisabledIconAt->tabPane->getIconAt
BasicTabbedPaneUI#getTextViewForTab(int):::Returns the text View object required to render stylized text (HTML) for the specified tab or null if no specialized text rendering is needed for this tab:::if->return->htmlViews->elementAt->return
BasicTabbedPaneUI#calculateTabHeight(int, int, int):::Calculates the tab height.:::height->c->tabPane->getTabComponentAt->if->c->getPreferredSize->else->v->getTextViewForTab->if->v->getPreferredSpan->else->icon->getIconForTab->if->Math->icon->getIconHeight->max->tabInsets->getTabInsets->return
BasicTabbedPaneUI#calculateMaxTabHeight(int):::Calculates the maximum tab height.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->result->fontHeight->metrics->getHeight->for->i->return
BasicTabbedPaneUI#calculateTabWidth(int, int, FontMetrics):::Calculates the tab width.:::tabInsets->getTabInsets->width->tabComponent->tabPane->getTabComponentAt->if->tabComponent->getPreferredSize->else->icon->getIconForTab->if->icon->getIconWidth->v->getTextViewForTab->if->v->getPreferredSpan->else->title->tabPane->getTitleAt->SwingUtilities2->stringWidth->return
BasicTabbedPaneUI#calculateMaxTabWidth(int):::Calculates the maximum tab width.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->result->for->i->return
BasicTabbedPaneUI#calculateTabAreaHeight(int, int, int):::Calculates the tab area height.:::tabAreaInsets->getTabAreaInsets->tabRunOverlay->getTabRunOverlay->return
BasicTabbedPaneUI#calculateTabAreaWidth(int, int, int):::Calculates the tab area width.:::tabAreaInsets->getTabAreaInsets->tabRunOverlay->getTabRunOverlay->return
BasicTabbedPaneUI#getTabInsets(int, int):::Returns the tab insets.:::return
BasicTabbedPaneUI#getSelectedTabPadInsets(int):::Returns the selected tab pad insets.:::rotateInsets->return
BasicTabbedPaneUI#getTabAreaInsets(int):::Returns the tab area insets.:::rotateInsets->return
BasicTabbedPaneUI#getContentBorderInsets(int):::Returns the content border insets.:::return
BasicTabbedPaneUI#getFontMetrics():::Returns the font metrics.:::font->tabPane->getFont->return->tabPane->getFontMetrics
BasicTabbedPaneUI#navigateSelectedTab(int):::Navigate the selected tab.:::tabPlacement->tabPane->getTabPlacement->current->DefaultLookup->getBoolean->tabPane->getSelectedIndex->getFocusIndex->tabCount->tabPane->getTabCount->leftToRight->BasicGraphicsUtils->isLeftToRight->if->return->offset->switch->switch->selectNextTab->break->selectPreviousTab->break->selectPreviousTabInRun->break->selectNextTabInRun->break->getTabRunOffset->selectAdjacentRunTab->break->getTabRunOffset->selectAdjacentRunTab->break->break->switch->selectNextTab->break->selectPreviousTab->break->getTabRunOffset->selectAdjacentRunTab->break->getTabRunOffset->selectAdjacentRunTab->break->if->selectNextTabInRun->else->selectPreviousTabInRun->break->if->selectPreviousTabInRun->else->selectNextTabInRun->break
BasicTabbedPaneUI#selectNextTabInRun(int):::Select the next tab in the run.:::tabCount->tabPane->getTabCount->tabIndex->getNextTabIndexInRun->while->tabPane->isEnabledAt->getNextTabIndexInRun->navigateTo
BasicTabbedPaneUI#selectPreviousTabInRun(int):::Select the previous tab in the run.:::tabCount->tabPane->getTabCount->tabIndex->getPreviousTabIndexInRun->while->tabPane->isEnabledAt->getPreviousTabIndexInRun->navigateTo
BasicTabbedPaneUI#selectNextTab(int):::Select the next tab.:::tabIndex->getNextTabIndex->while->tabPane->isEnabledAt->getNextTabIndex->navigateTo
BasicTabbedPaneUI#selectPreviousTab(int):::Select the previous tab.:::tabIndex->getPreviousTabIndex->while->tabPane->isEnabledAt->getPreviousTabIndex->navigateTo
BasicTabbedPaneUI#selectAdjacentRunTab(int, int, int):::Selects an adjacent run of tabs.:::if->return->newIndex->r->switch->tabForCoordinate->break->tabForCoordinate->if->while->tabPane->isEnabledAt->getNextTabIndex->navigateTo
BasicTabbedPaneUI#getFocusIndex():::Returns the index of the tab that has focus.:::return
BasicTabbedPaneUI#getTabRunOffset(int, int, int, boolean):::Returns the tab run offset.:::run->getRunForTab->offset->switch->if->calculateTabAreaWidth->else->if->calculateTabAreaWidth->else->break->if->calculateTabAreaWidth->else->if->calculateTabAreaWidth->else->break->if->calculateTabAreaHeight->else->if->calculateTabAreaHeight->else->break->if->calculateTabAreaHeight->else->if->calculateTabAreaHeight->else->return
BasicTabbedPaneUI#getPreviousTabIndex(int):::Returns the previous tab index.:::tabIndex->tabPane->getTabCount->return
BasicTabbedPaneUI#getNextTabIndex(int):::Returns the next tab index.:::return->tabPane->getTabCount
BasicTabbedPaneUI#getNextTabIndexInRun(int, int):::Returns the next tab index in the run.:::if->return->getNextTabIndex->currentRun->getRunForTab->next->getNextTabIndex->if->getNextTabRun->return->return
BasicTabbedPaneUI#getPreviousTabIndexInRun(int, int):::Returns the previous tab index in the run.:::if->return->getPreviousTabIndex->currentRun->getRunForTab->if->previous->getNextTabRun->return->return->getPreviousTabIndex
BasicTabbedPaneUI#getPreviousTabRun(int):::Returns the previous tab run.:::runIndex->return
BasicTabbedPaneUI#getNextTabRun(int):::Returns the next tab run.:::return
BasicTabbedPaneUI#rotateInsets(Insets, Insets, int):::Rotates the insets.:::switch->break->break->break
BasicTabbedPaneUI.TabbedPaneLayout#calculateSize(boolean):::Returns the calculated size.:::tabPlacement->tabPane->getTabPlacement->insets->tabPane->getInsets->contentInsets->getContentBorderInsets->tabAreaInsets->getTabAreaInsets->zeroSize->new->Dimension->height->width->cWidth->cHeight->for->i->tabPane->getTabCount->tabExtent->switch->Math->calculateMaxTabHeight->max->preferredTabAreaWidth->break->Math->calculateMaxTabWidth->max->preferredTabAreaHeight->return->new->Dimension
BasicTabbedPaneUI.TabbedPaneLayout#preferredTabAreaHeight(int, int):::Returns the preferred tab area height.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->total->if->rows->x->maxTabHeight->calculateMaxTabHeight->for->i->calculateTabAreaHeight->return
BasicTabbedPaneUI.TabbedPaneLayout#preferredTabAreaWidth(int, int):::Returns the preferred tab area width.:::metrics->getFontMetrics->tabCount->tabPane->getTabCount->total->if->columns->y->fontHeight->metrics->getHeight->calculateMaxTabWidth->for->i->calculateTabAreaWidth->return
BasicTabbedPaneUI.TabbedPaneLayout#calculateLayoutInfo():::Calculates the layout info.:::tabCount->tabPane->getTabCount->assureRectsCreated->tabPane->getTabPlacement->calculateTabRects
BasicTabbedPaneUI.TabbedPaneLayout#calculateTabRects(int, int):::Calculate the tab rectangles.:::metrics->getFontMetrics->size->tabPane->getSize->insets->tabPane->getInsets->tabAreaInsets->getTabAreaInsets->fontHeight->metrics->getHeight->selectedIndex->tabPane->getSelectedIndex->tabRunOverlay->i->j->x->y->returnAt->verticalTabRuns->leftToRight->BasicGraphicsUtils->isLeftToRight->switch->calculateMaxTabWidth->break->calculateMaxTabWidth->break->calculateMaxTabHeight->break->calculateMaxTabHeight->break->getTabRunOverlay->if->return->rect->for->if->normalizeTabRuns->getRunForTab->if->shouldRotateTabRuns->rotateTabRuns->for->padSelectedTab->if->rightMargin->for
BasicTabbedPaneUI.TabbedPaneLayout#rotateTabRuns(int, int):::Rotates the run-index array so that the selected run is run[0].:::for->i
BasicTabbedPaneUI.TabbedPaneLayout#normalizeTabRuns(int, int, int, int):::Normalizes the tab runs.:::verticalTabRuns->run->keepAdjusting->weight->while->last->lastTabInRun->prevLast->lastTabInRun->end->prevLastLen->if->else->if->if->else->for->i->else->if->if->else
BasicTabbedPaneUI.TabbedPaneLayout#padTabRun(int, int, int, int):::Pads the tab run.:::lastRect->if->runWidth->deltaWidth->factor->for->j->else->runHeight->deltaHeight->factor->for->j
BasicTabbedPaneUI.TabbedPaneLayout#padSelectedTab(int, int):::Pads selected tab.:::if->selRect->padInsets->getSelectedTabPadInsets->if->scrollableTabLayoutEnabled->size->tabPane->getSize->insets->tabPane->getInsets->if->top->if->bottom->if->else->left->if->right->if
BasicTableHeaderUI#createMouseInputListener():::Creates the mouse listener for the JTableHeader.:::return->new->MouseInputHandler
BasicTableHeaderUI#createUI(JComponent):::Returns a new instance of BasicTableHeaderUI.:::return->new->BasicTableHeaderUI
BasicTableHeaderUI#installDefaults():::Initializes JTableHeader properties such as font, foreground, and background:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicTableHeaderUI#installListeners():::Attaches listeners to the JTableHeader.:::createMouseInputListener->header->addMouseListener->header->addMouseMotionListener->header->addFocusListener
BasicTableHeaderUI#installKeyboardActions():::Register all keyboard actions on the JTableHeader.:::keyMap->DefaultLookup->get->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicTableHeaderUI#uninstallDefaults():::Uninstalls default properties:::
BasicTableHeaderUI#uninstallListeners():::Unregisters listeners.:::header->removeMouseListener->header->removeMouseMotionListener->header->removeFocusListener
BasicTableHeaderUI#uninstallKeyboardActions():::Unregisters default key actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTableHeaderUI#loadActionMap(LazyActionMap):::Populates TableHeader's actions.:::map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put->map->new->Actions->put
BasicTableHeaderUI#getRolloverColumn():::Returns the index of the column header over which the mouse currently is:::return
BasicTableHeaderUI#rolloverColumnUpdated(int, int):::This method gets called every time when a rollover column in the table header is updated:::
BasicTableHeaderUI#selectColumn(int):::Selects the specified column in the table header:::selectColumn
BasicTableHeaderUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->baseline->columnModel->header->getColumnModel->for->column->columnModel->getColumnCount->return
BasicTableHeaderUI#getMinimumSize(JComponent):::Return the minimum size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMinWidth->return->createHeaderSize
BasicTableHeaderUI#getPreferredSize(JComponent):::Return the preferred size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getPreferredWidth->return->createHeaderSize
BasicTableHeaderUI#getMaximumSize(JComponent):::Return the maximum size of the header:::width->enumeration->header->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMaxWidth->return->createHeaderSize
BasicTableUI#createKeyListener():::Creates the key listener for handling keyboard navigation in the JTable.:::return
BasicTableUI#createFocusListener():::Creates the focus listener for handling keyboard navigation in the JTable.:::return->getHandler
BasicTableUI#createMouseInputListener():::Creates the mouse listener for the JTable.:::return->getHandler
BasicTableUI#createUI(JComponent):::Returns a new instance of BasicTableUI.:::return->new->BasicTableUI
BasicTableUI#installDefaults():::Initialize JTable properties, e.g:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->sbg->table->getSelectionBackground->if->UIManager->getColor->table->UIManager->getColor->setSelectionBackground->sfg->table->getSelectionForeground->if->UIManager->getColor->table->UIManager->getColor->setSelectionForeground->gridColor->table->getGridColor->if->UIManager->getColor->table->setGridColor->parent->SwingUtilities->getUnwrappedParent->if->parent->getParent->if->LookAndFeel->installBorder->table->getClientProperty->equals
BasicTableUI#installListeners():::Attaches listeners to the JTable.:::createFocusListener->createKeyListener->createMouseInputListener->table->addFocusListener->table->addKeyListener->table->addMouseListener->table->addMouseMotionListener->table->getHandler->addPropertyChangeListener->if->table->getSelectionModel->getHandler->addListSelectionListener
BasicTableUI#installKeyboardActions():::Register all keyboard actions on the JTable.:::LazyActionMap->installLazyActionMap->inputMap->getInputMap->SwingUtilities->replaceUIInputMap
BasicTableUI#uninstallDefaults():::Uninstalls default properties.:::if->table->getTransferHandler->table->setTransferHandler
BasicTableUI#uninstallListeners():::Unregisters listeners.:::table->removeFocusListener->table->removeKeyListener->table->removeMouseListener->table->removeMouseMotionListener->table->getHandler->removePropertyChangeListener->if->table->getSelectionModel->getHandler->removeListSelectionListener
BasicTableUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTableUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->tcr->new->DefaultTableCellRenderer->tcr->getTableCellRendererComponent->lafDefaults->put->renderer->table->getFont->setFont->rowMargin->table->getRowMargin->return->renderer->table->getRowHeight->getBaseline
BasicTableUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTableUI#getMinimumSize(JComponent):::Return the minimum size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMinWidth->return->createTableSize
BasicTableUI#getPreferredSize(JComponent):::Return the preferred size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getPreferredWidth->return->createTableSize
BasicTableUI#getMaximumSize(JComponent):::Return the maximum size of the table:::width->enumeration->table->getColumnModel->getColumns->while->enumeration->hasMoreElements->aColumn->enumeration->nextElement->aColumn->getMaxWidth->return->createTableSize
BasicTableUI#paint(Graphics, JComponent):::Paint a representation of the table instance that was set in installUI().:::clip->g->getClipBounds->bounds->table->getBounds->if->table->getRowCount->table->getColumnCount->bounds->intersects->paintDropLines->return->ltr->table->getComponentOrientation->isLeftToRight->upperLeft->lowerRight->visibleBounds->clip->intersection->visibleBounds->getLocation->new->Point->rMin->table->rowAtPoint->rMax->table->rowAtPoint->if->if->table->getRowCount->printMode->table->getClientProperty->if->clip->getLocation->new->Point->cMin->table->columnAtPoint->cMax->table->columnAtPoint->if->if->table->getColumnCount->comp->SwingUtilities->getUnwrappedParent->if->comp->getParent->if->if->table->getRowCount->table->getSelectedRow->paintGrid->paintCells->paintDropLines
BasicTableUI.TableTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->table->rows->cols->if->table->getRowSelectionAllowed->table->getColumnSelectionAllowed->return->if->table->getRowSelectionAllowed->rowCount->table->getRowCount->new->intArr->for->counter->else->table->getSelectedRows->if->table->getColumnSelectionAllowed->colCount->table->getColumnCount->new->intArr->for->counter->else->table->getSelectedColumns->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->for->row->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicTextAreaUI#createUI(JComponent):::Creates a UI for a JTextArea.:::return->new->BasicTextAreaUI
BasicTextAreaUI#getPropertyPrefix():::Fetches the name used as a key to look up properties through the UIManager:::return
BasicTextAreaUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange->if->evt->getPropertyName->equals->evt->getPropertyName->equals->evt->getPropertyName->equals->modelChanged->else->if->evt->getPropertyName->equals->updateFocusTraversalKeys
BasicTextAreaUI#getPreferredSize(JComponent):::The method is overridden to take into account caret width.:::return->super->getPreferredSize
BasicTextAreaUI#getMinimumSize(JComponent):::The method is overridden to take into account caret width.:::return->super->getMinimumSize
BasicTextAreaUI#create(Element):::Creates the view for an element:::doc->elem->getDocument->i18nFlag->doc->getProperty->if->i18nFlag->equals->return->createI18N->else->c->getComponent->if->area->v->if->area->getLineWrap->area->getWrapStyleWord->new->WrappedPlainView->else->new->PlainView->return->return
BasicTextAreaUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->i18nFlag->getDocument->getProperty->insets->c->getInsets->if->equals->rootView->getRootView->if->rootView->getViewCount->baseline->fieldBaseline->BasicHTML->rootView->getView->getBaseline->if->return->return->return->fm->c->c->getFont->getFontMetrics->return->fm->getAscent
BasicTextAreaUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTextAreaUI.PlainParagraph#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index.:::c->getContainer->if->area->if->area->getLineWrap->return->return->super->getFlowSpan
BasicTextAreaUI.PlainParagraph#setSize(float, float):::Sets the size of the view:::if->getWidth->preferenceChanged->super->setSize
BasicTextAreaUI.PlainParagraph.LogicalView#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory):::Forward the DocumentEvent to the given child view:::v->setParent->super->forwardUpdateToView
BasicTextFieldUI#createUI(JComponent):::Creates a UI for a JTextField.:::return->new->BasicTextFieldUI
BasicTextFieldUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicTextFieldUI#create(Element):::Creates a view (FieldView) based on an element.:::doc->elem->getDocument->i18nFlag->doc->getProperty->if->equals->kind->elem->getName->if->if->kind->equals->return->new->GlyphView->else->if->kind->equals->return->new->I18nFieldView->return->new->FieldView
BasicTextFieldUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->rootView->getRootView->if->rootView->getViewCount->insets->c->getInsets->if->baseline->fieldView->rootView->getView->vspan->fieldView->getPreferredSpan->if->slop->if->fieldBaseline->BasicHTML->getBaseline->if->return->else->fm->c->c->getFont->getFontMetrics->fm->getAscent->return->return
BasicTextFieldUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTextFieldUI.I18nFieldView#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index:::return
BasicTextFieldUI.I18nFieldView#adjustAllocation(Shape):::Adjusts the allocation given to the view to be a suitable allocation for a text field:::if->bounds->a->getBounds->vspan->getPreferredSpan->hspan->getPreferredSpan->if->slop->c->getContainer->if->field->vis->field->getHorizontalVisibility->max->Math->max->value->vis->getValue->extent->Math->min->if->vis->vis->getMinimum->setRangeProperties->if->slop->align->getHorizontalAlignment->if->isLeftToRight->if->else->if->else->if->else->if->switch->break->break->else->vis->getValue->return->return
BasicTextFieldUI.I18nFieldView#updateVisibilityModel():::Update the visibility model with the associated JTextField (if there is one) to reflect the current visibility as a result of changes to the document model:::c->getContainer->if->field->vis->field->getHorizontalVisibility->hspan->getPreferredSpan->extent->vis->getExtent->maximum->Math->max->value->oldValue->vis->getValue->if->Math->Math->min->max->vis->setRangeProperties
BasicTextFieldUI.I18nFieldView#paint(Graphics, Shape):::Renders using the given rendering surface and area on that surface:::r->g->clipRect->super->adjustAllocation->paint
BasicTextFieldUI.I18nFieldView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::if->return->return
BasicTextFieldUI.I18nFieldView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->super->adjustAllocation->modelToView
BasicTextFieldUI.I18nFieldView#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::return->super->adjustAllocation->modelToView
BasicTextFieldUI.I18nFieldView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::return->super->adjustAllocation->viewToModel
BasicTextFieldUI.I18nFieldView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::super->adjustAllocation->insertUpdate->updateVisibilityModel
BasicTextFieldUI.I18nFieldView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::super->adjustAllocation->removeUpdate->updateVisibilityModel
BasicTextPaneUI#createUI(JComponent):::Creates a UI for the JTextPane.:::return->new->BasicTextPaneUI
BasicTextPaneUI#getPropertyPrefix():::Fetches the name used as a key to lookup properties through the UIManager:::return
BasicTextPaneUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::super->propertyChange
BasicTextUI#createCaret():::Creates the object to use for a caret:::return->new->BasicCaret
BasicTextUI#createHighlighter():::Creates the object to use for adding highlights:::return->new->BasicHighlighter
BasicTextUI#getKeymapName():::Fetches the name of the keymap that will be installed/used by default for this UI:::nm->getClass->getName->index->nm->lastIndexOf->if->nm->nm->length->substring->return
BasicTextUI#createKeymap():::Creates the keymap to use for the text component, and installs any necessary bindings into it:::nm->getKeymapName->map->JTextComponent->getKeymap->if->parent->JTextComponent->getKeymap->JTextComponent->addKeymap->prefix->getPropertyPrefix->o->DefaultLookup->get->if->bindings->JTextComponent->getComponent->getActions->loadKeymap->return
BasicTextUI#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed on the associated JTextComponent:::if->evt->getPropertyName->equals->evt->getPropertyName->equals->evt->getSource->updateBackground->else->if->evt->getPropertyName->equals->value->evt->getNewValue->if->width->intValue->if
BasicTextUI#getPropertyPrefix():::Gets the name used as a key to look up properties through the UIManager:::
BasicTextUI#installDefaults():::Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color:::prefix->getPropertyPrefix->f->editor->getFont->if->editor->UIManager->getFont->setFont->bg->editor->getBackground->if->editor->UIManager->getColor->setBackground->fg->editor->getForeground->if->editor->UIManager->getColor->setForeground->color->editor->getCaretColor->if->editor->UIManager->getColor->setCaretColor->s->editor->getSelectionColor->if->editor->UIManager->getColor->setSelectionColor->sfg->editor->getSelectedTextColor->if->editor->UIManager->getColor->setSelectedTextColor->dfg->editor->getDisabledTextColor->if->editor->UIManager->getColor->setDisabledTextColor->b->editor->getBorder->if->editor->UIManager->getBorder->setBorder->margin->editor->getMargin->if->editor->UIManager->getInsets->setMargin->updateCursor
BasicTextUI#uninstallDefaults():::Sets the component properties that have not been explicitly overridden to null:::editor->removeMouseListener->editor->removeMouseMotionListener->if->editor->getCaretColor->editor->setCaretColor->if->editor->getSelectionColor->editor->setSelectionColor->if->editor->getDisabledTextColor->editor->setDisabledTextColor->if->editor->getSelectedTextColor->editor->setSelectedTextColor->if->editor->getBorder->editor->setBorder->if->editor->getMargin->editor->setMargin->if->editor->getCaret->editor->setCaret->if->editor->getHighlighter->editor->setHighlighter->if->editor->getTransferHandler->editor->setTransferHandler->if->editor->getCursor->editor->setCursor
BasicTextUI#installListeners():::Installs listeners for the UI.:::
BasicTextUI#uninstallListeners():::Uninstalls listeners for the UI.:::
BasicTextUI#installKeyboardActions():::Registers keyboard actions.:::editor->createKeymap->setKeymap->km->getInputMap->if->SwingUtilities->replaceUIInputMap->map->getActionMap->if->SwingUtilities->replaceUIActionMap->updateFocusAcceleratorBinding
BasicTextUI#getInputMap():::Get the InputMap to use for the UI.:::map->new->InputMapUIResource->shared->DefaultLookup->getPropertyPrefix->get->if->map->setParent->return
BasicTextUI#updateFocusAcceleratorBinding(boolean):::Invoked when the focus accelerator changes, this will update the key bindings as necessary.:::accelerator->editor->getFocusAccelerator->if->km->SwingUtilities->getUIInputMap->if->new->ComponentInputMapUIResource->SwingUtilities->replaceUIInputMap->am->getActionMap->SwingUtilities->replaceUIActionMap->if->km->clear->if->km->KeyStroke->BasicLookAndFeel->getFocusAcceleratorKeyMask->getKeyStroke->put->km->KeyStroke->SwingUtilities2->BasicLookAndFeel->getFocusAcceleratorKeyMask->setAltGraphMask->getKeyStroke->put
BasicTextUI#updateFocusTraversalKeys():::Invoked when editable property is changed:::editorKit->getEditorKit->if->storedForwardTraversalKeys->editor->getFocusTraversalKeys->storedBackwardTraversalKeys->editor->getFocusTraversalKeys->forwardTraversalKeys->new->HashSet<AWTKeyStroke>->backwardTraversalKeys->new->HashSet<AWTKeyStroke>->if->editor->isEditable->forwardTraversalKeys->KeyStroke->getKeyStroke->remove->backwardTraversalKeys->KeyStroke->getKeyStroke->remove->else->forwardTraversalKeys->KeyStroke->getKeyStroke->add->backwardTraversalKeys->KeyStroke->getKeyStroke->add->LookAndFeel->installProperty->LookAndFeel->installProperty
BasicTextUI#getTransferHandler():::Returns the TransferHandler that will be installed if their isn't one installed on the JTextComponent.:::return
BasicTextUI#getActionMap():::Fetch an action map to use.:::mapName->getPropertyPrefix->map->UIManager->get->if->createActionMap->if->UIManager->getLookAndFeelDefaults->put->componentMap->new->ActionMapUIResource->componentMap->new->FocusAction->put->if->getEditorKit->if->obj->map->get->if->action->new->TextActionWrapper->componentMap->action->getValue->put->if->componentMap->setParent->return
BasicTextUI#createActionMap():::Create a default action map:::map->new->ActionMapUIResource->actions->editor->getActions->n->for->i->map->TransferHandler->getCutAction->getValue->TransferHandler->getCutAction->put->map->TransferHandler->getCopyAction->getValue->TransferHandler->getCopyAction->put->map->TransferHandler->getPasteAction->getValue->TransferHandler->getPasteAction->put->return
BasicTextUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::editor->setKeymap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIActionMap
BasicTextUI#paintBackground(Graphics):::Paints a background for the view:::g->editor->getBackground->setColor->g->editor->getWidth->editor->getHeight->fillRect
BasicTextUI#getComponent():::Fetches the text component associated with this UI implementation:::return
BasicTextUI#modelChanged():::Flags model changes:::f->rootView->getViewFactory->doc->editor->getDocument->elem->doc->getDefaultRootElement->f->create->setView
BasicTextUI#setView(View):::Sets the current root of the view hierarchy and calls invalidate():::rootView->setView->editor->revalidate->editor->repaint
BasicTextUI#paintSafely(Graphics):::Paints the interface safely with a guarantee that the model won't change from the view of this thread:::highlighter->editor->getHighlighter->caret->editor->getCaret->if->editor->isOpaque->paintBackground->if->highlighter->paint->alloc->getVisibleEditorRect->if->rootView->paint->if->caret->paint->if->dropCaret->paint
BasicTextUI#installUI(JComponent):::Installs the UI for a component:::if->LookAndFeel->installProperty->LookAndFeel->installProperty->installDefaults->installDefaults2->property->UIManager->get->if->intValue->c->getClientProperty->if->intValue->if->editor->addPropertyChangeListener->doc->editor->getDocument->if->editor->getEditorKit->createDefaultDocument->setDocument->else->doc->addDocumentListener->modelChanged->installListeners->installKeyboardActions->oldLayout->editor->getLayout->if->editor->setLayout->updateBackground->else->throw->new->Error
BasicTextUI#uninstallUI(JComponent):::Deinstalls the UI for a component:::editor->removePropertyChangeListener->editor->getDocument->removeDocumentListener->uninstallDefaults->rootView->setView->c->removeAll->lm->c->getLayout->if->c->setLayout->uninstallKeyboardActions->uninstallListeners
BasicTextUI#update(Graphics, JComponent):::Superclass paints background in an uncontrollable way (i.e:::paint
BasicTextUI#paint(Graphics, JComponent):::Paints the interface:::if->rootView->getViewCount->rootView->getView->doc->editor->getDocument->if->readLock->try->paintSafely->catch->finally->if->readUnlock
BasicTextUI#getPreferredSize(JComponent):::Gets the preferred size for the editor component:::doc->editor->getDocument->i->c->getInsets->d->c->getSize->if->readLock->try->if->rootView->setSize->else->if->rootView->setSize->Math->rootView->getPreferredSpan->min->Math->rootView->getPreferredSpan->min->catch->finally->if->readUnlock->return
BasicTextUI#getMinimumSize(JComponent):::Gets the minimum size for the editor component.:::doc->editor->getDocument->i->c->getInsets->d->new->Dimension->if->readLock->try->rootView->getMinimumSpan->rootView->getMinimumSpan->catch->finally->if->readUnlock->return
BasicTextUI#getMaximumSize(JComponent):::Gets the maximum size for the editor component.:::doc->editor->getDocument->i->c->getInsets->d->new->Dimension->if->readLock->try->Math->rootView->getMaximumSpan->min->Math->rootView->getMaximumSpan->min->catch->finally->if->readUnlock->return
BasicTextUI#getVisibleEditorRect():::Gets the allocation to give the root View:::alloc->editor->getBounds->if->insets->editor->getInsets->return->return
BasicTextUI#modelToView(JTextComponent, int):::Converts the given location in the model to a place in the view coordinate system:::return->modelToView
BasicTextUI#modelToView(JTextComponent, int, Position.Bias):::Converts the given location in the model to a place in the view coordinate system:::return->modelToView
BasicTextUI#viewToModel(JTextComponent, Point):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->viewToModel
BasicTextUI#viewToModel(JTextComponent, Point, Position.Bias[]):::Converts the given place in the view coordinate system to the nearest representative location in the model:::return->viewToModel
BasicTextUI#damageRange(JTextComponent, int, int):::Causes the portion of the view responsible for the given part of the model to be repainted:::damageRange
BasicTextUI#damageRange(JTextComponent, int, int, Position.Bias, Position.Bias):::Causes the portion of the view responsible for the given part of the model to be repainted.:::if->alloc->getVisibleEditorRect->if->doc->t->getDocument->if->readLock->try->rootView->setSize->toDamage->rootView->modelToView->rect->toDamage->getBounds->editor->repaint->catch->finally->if->readUnlock
BasicTextUI#getEditorKit(JTextComponent):::Fetches the EditorKit for the UI.:::return
BasicTextUI#getRootView(JTextComponent):::Fetches a View with the allocation of the associated text component (i.e:::return
BasicTextUI#getToolTipText(JTextComponent, Point):::Returns the string to be used as the tooltip at the passed in location:::if->return->doc->editor->getDocument->tt->alloc->getVisibleEditorRect->if->if->readLock->try->rootView->getToolTipText->catch->finally->if->readUnlock->return
BasicTextUI#create(Element):::Creates a view for an element:::return
BasicTextUI#create(Element, int, int):::Creates a view for an element:::return
BasicTextUI.RootView#getAttributes():::Fetches the attributes to use when rendering:::return
BasicTextUI.RootView#getPreferredSpan(int):::Determines the preferred span for this view along an axis.:::if->return->view->getPreferredSpan->return
BasicTextUI.RootView#getMinimumSpan(int):::Determines the minimum span for this view along an axis.:::if->return->view->getMinimumSpan->return
BasicTextUI.RootView#getMaximumSpan(int):::Determines the maximum span for this view along an axis.:::return
BasicTextUI.RootView#preferenceChanged(View, boolean, boolean):::Specifies that a preference has changed:::editor->revalidate
BasicTextUI.RootView#getAlignment(int):::Determines the desired alignment for this view along an axis.:::if->return->view->getAlignment->return
BasicTextUI.RootView#paint(Graphics, Shape):::Renders the view.:::if->alloc->allocation->getBounds->setSize->view->paint
BasicTextUI.RootView#setParent(View):::Sets the view parent.:::throw->new->Error
BasicTextUI.RootView#getViewCount():::Returns the number of views in this view:::return
BasicTextUI.RootView#getView(int):::Gets the n-th view in this container.:::return
BasicTextUI.RootView#getViewIndex(int, Position.Bias):::Returns the child view index representing the given position in the model:::return
BasicTextUI.RootView#getChildAllocation(int, Shape):::Fetches the allocation for the given child view:::return
BasicTextUI.RootView#modelToView(int, Shape, Position.Bias):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::if->return->view->modelToView->return
BasicTextUI.RootView#modelToView(int, Position.Bias, int, Position.Bias, Shape):::Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.:::if->return->view->modelToView->return
BasicTextUI.RootView#viewToModel(float, float, Shape, Position.Bias[]):::Provides a mapping from the view coordinate space to the logical coordinate space of the model.:::if->retValue->view->viewToModel->return->return
BasicTextUI.RootView#getNextVisualPositionFrom(int, Position.Bias, Shape, int, Position.Bias[]):::Provides a way to determine the next visually represented model location that one might place a caret:::if->getDocument->getLength->throw->new->BadLocationException->if->nextPos->view->getNextVisualPositionFrom->if->else->return
BasicTextUI.RootView#insertUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was inserted into the document in a location that this view is responsible for.:::if->view->insertUpdate
BasicTextUI.RootView#removeUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification that something was removed from the document in a location that this view is responsible for.:::if->view->removeUpdate
BasicTextUI.RootView#changedUpdate(DocumentEvent, Shape, ViewFactory):::Gives notification from the document that attributes were changed in a location that this view is responsible for.:::if->view->changedUpdate
BasicTextUI.RootView#getDocument():::Returns the document model underlying the view.:::return->editor->getDocument
BasicTextUI.RootView#getStartOffset():::Returns the starting offset into the model for this view.:::if->return->view->getStartOffset->return->getElement->getStartOffset
BasicTextUI.RootView#getEndOffset():::Returns the ending offset into the model for this view.:::if->return->view->getEndOffset->return->getElement->getEndOffset
BasicTextUI.RootView#getElement():::Gets the element that this view is mapped to.:::if->return->view->getElement->return->editor->getDocument->getDefaultRootElement
BasicTextUI.RootView#breakView(int, float, Shape):::Breaks this view on the given axis at the given length.:::throw->new->Error
BasicTextUI.RootView#getResizeWeight(int):::Determines the resizability of the view along the given axis:::if->return->view->getResizeWeight->return
BasicTextUI.RootView#setSize(float, float):::Sets the view size.:::if->view->setSize
BasicTextUI.RootView#getContainer():::Fetches the container hosting the view:::return
BasicTextUI.RootView#getViewFactory():::Fetches the factory to be used for building the various view fragments that make up the view that represents the model:::kit->getEditorKit->f->kit->getViewFactory->if->return->return
BasicTextUI.UpdateHandler#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed:::oldValue->evt->getOldValue->newValue->evt->getNewValue->propertyName->evt->getPropertyName->if->if->removeDocumentListener->if->addDocumentListener->if->setView->BasicTextUI.this->propertyChange->modelChanged->return->modelChanged->if->updateFocusAcceleratorBinding->else->if->modelChanged->else->if->modelChanged->else->if->dropIndexChanged->else->if->updateCursor->modelChanged->BasicTextUI.this->propertyChange
BasicTextUI.UpdateHandler#insertUpdate(DocumentEvent):::The insert notification:::doc->e->getDocument->o->doc->getProperty->if->i18nFlag->if->i18nFlag->booleanValue->i18nFlag->booleanValue->modelChanged->return->alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->insertUpdate
BasicTextUI.UpdateHandler#removeUpdate(DocumentEvent):::The remove notification:::alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->removeUpdate
BasicTextUI.UpdateHandler#changedUpdate(DocumentEvent):::The change notification:::alloc->getVisibleEditorRect->rootView->rootView->getViewFactory->changedUpdate
BasicTextUI.UpdateHandler#addLayoutComponent(String, Component):::Adds the specified component with the specified name to the layout.:::
BasicTextUI.UpdateHandler#removeLayoutComponent(Component):::Removes the specified component from the layout.:::if->constraints->remove
BasicTextUI.UpdateHandler#preferredLayoutSize(Container):::Calculates the preferred size dimensions for the specified panel given the components in the specified parent container.:::return
BasicTextUI.UpdateHandler#minimumLayoutSize(Container):::Calculates the minimum size dimensions for the specified panel given the components in the specified parent container.:::return
BasicTextUI.UpdateHandler#layoutContainer(Container):::Lays out the container in the specified panel:::if->constraints->isEmpty->alloc->getVisibleEditorRect->if->doc->editor->getDocument->if->readLock->try->rootView->setSize->components->constraints->keys->while->components->hasMoreElements->comp->components->nextElement->v->constraints->get->ca->calculateViewPosition->if->compAlloc->ca->getBounds->comp->setBounds->catch->finally->if->readUnlock
BasicTextUI.UpdateHandler#calculateViewPosition(Shape, View):::Find the Shape representing the given view.:::pos->v->getStartOffset->child->for->parent->return
BasicTextUI.UpdateHandler#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object:::if->if->new->Hashtable<Component,Object>->constraints->put
BasicTextUI.UpdateHandler#maximumLayoutSize(Container):::Returns the maximum size of this component.:::return
BasicTextUI.UpdateHandler#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
BasicTextUI.UpdateHandler#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
BasicTextUI.UpdateHandler#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
BasicTextUI.TextActionWrapper#actionPerformed(ActionEvent):::The operation to perform when this action is triggered.:::action->actionPerformed
BasicTextUI.DragListener#isDragPossible(MouseEvent):::Determines if the following are true: <ul> <li>the component is enabled <li>the press event is located over a selection </ul>:::c->e->getSource->if->c->isEnabled->caret->c->getCaret->dot->caret->getDot->mark->caret->getMark->if->p->e->getX->e->getY->new->Point->pos->c->viewToModel->p0->Math->min->p1->Math->max->if->return->return
BasicTextUI.TextTransferHandler#getImportFlavor(DataFlavor[], JTextComponent):::Try to find a flavor that can be used to import a Transferable:::plainFlavor->refFlavor->stringFlavor->if->for->i->if->return->else->if->return->else->if->return->return->for->i->if->return->else->if->return->return
BasicTextUI.TextTransferHandler#handleReaderImport(Reader, JTextComponent, boolean):::Import the given stream data into the text component.:::if->startPosition->c->getSelectionStart->endPosition->c->getSelectionEnd->length->kit->c->getUI->getEditorKit->doc->c->getDocument->if->doc->remove->kit->read->else->buff->new->charArr->nch->lastWasCR->last->sbuff->while->in->read->if->new->StringBuffer->for->counter->if->if->if->sbuff->append->else->sbuff->append->if->sbuff->append->c->sbuff->toString->replaceSelection
BasicTextUI.TextTransferHandler#getSourceActions(JComponent):::This is the type of transfer actions supported by the source:::if->c->getClientProperty->return->return->isEditable
BasicTextUI.TextTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::exportComp->getSelectionStart->exportComp->getSelectionEnd->return->new->TextTransferable
BasicTextUI.TextTransferHandler#exportDone(JComponent, Transferable, int):::This method is called after data has been exported:::if->t->t->removeText
BasicTextUI.TextTransferHandler#importData(JComponent, Transferable):::This method causes a transfer to a component from a clipboard or a DND drop operation:::c->pos->c->getDropLocation->getIndex->c->getCaretPosition->if->return->imported->importFlavor->t->getTransferDataFlavors->getImportFlavor->if->try->useRead->if->ep->if->ep->getContentType->startsWith->importFlavor->getMimeType->ep->getContentType->startsWith->ic->c->getInputContext->if->ic->endComposition->r->importFlavor->getReaderForText->if->caret->c->getCaret->if->setDot->else->c->setCaretPosition->handleReaderImport->if->c->requestFocus->caret->c->getCaret->if->newPos->caret->getDot->newBias->getDotBias->setDot->moveDot->else->c->c->getCaretPosition->select->catch->finally->return
BasicTextUI.TextTransferHandler#canImport(JComponent, DataFlavor[]):::This method indicates if a component would accept an import of the given set of data flavors prior to actually attempting to import it.:::c->if->c->isEditable->c->isEnabled->return->return->getImportFlavor
BasicTextUI.TextTransferHandler.TextTransferable#getRicherFlavors():::If the EditorKit is not for text/plain or text/html, that format is supported through the "richer flavors" part of BasicTransferable.:::if->return->try->flavors->new->DataFlavorArr->new->DataFlavor->new->DataFlavor->new->DataFlavor->return->catch->finally->return
BasicTextUI.TextTransferHandler.TextTransferable#getRicherData(DataFlavor):::The only richer format supported is the file list flavor:::if->return->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->new->StringBufferInputStream->throw->new->UnsupportedFlavorException
BasicToggleButtonUI#createUI(JComponent):::Returns an instance of BasicToggleButtonUI.:::appContext->AppContext->getAppContext->toggleButtonUI->appContext->get->if->new->BasicToggleButtonUI->appContext->put->return
BasicToggleButtonUI#paintIcon(Graphics, AbstractButton, Rectangle):::Paints an icon in the specified location.:::model->b->getModel->icon->if->model->isEnabled->if->model->isSelected->b->getDisabledSelectedIcon->else->b->getDisabledIcon->else->if->model->isPressed->model->isArmed->b->getPressedIcon->if->b->getSelectedIcon->else->if->model->isSelected->if->b->isRolloverEnabled->model->isRollover->b->getRolloverSelectedIcon->if->b->getSelectedIcon->else->b->getSelectedIcon->else->if->b->isRolloverEnabled->model->isRollover->b->getRolloverIcon->if->b->getIcon->icon->paintIcon
BasicToggleButtonUI#getTextShiftOffset():::Overriden so that the text will not be rendered as shifted for Toggle buttons and subclasses.:::return
BasicToolBarSeparatorUI#createUI(JComponent):::Returns a new instance of BasicToolBarSeparatorUI.:::return->new->BasicToolBarSeparatorUI
BasicToolBarUI#createUI(JComponent):::Constructs a new instance of BasicToolBarUI.:::return->new->BasicToolBarUI
BasicToolBarUI#installDefaults():::Installs default properties.:::LookAndFeel->installBorder->LookAndFeel->installColorsAndFont->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->if->UIManager->getColor->rolloverProp->toolBar->getClientProperty->if->UIManager->get->if->booleanValue->if->createRolloverBorder->if->createNonRolloverBorder->if->createNonRolloverToggleBorder->isRolloverBorders->setRolloverBorders
BasicToolBarUI#uninstallDefaults():::Uninstalls default properties.:::LookAndFeel->uninstallBorder->installNormalBorders
BasicToolBarUI#installComponents():::Registers components.:::
BasicToolBarUI#uninstallComponents():::Unregisters components.:::
BasicToolBarUI#installListeners():::Registers listeners.:::createDockingListener->if->toolBar->addMouseMotionListener->toolBar->addMouseListener->createPropertyListener->if->toolBar->addPropertyChangeListener->createToolBarContListener->if->toolBar->addContainerListener->createToolBarFocusListener->if->components->toolBar->getComponents->foreach->component->addFocusListener
BasicToolBarUI#uninstallListeners():::Unregisters listeners.:::if->toolBar->removeMouseMotionListener->toolBar->removeMouseListener->if->toolBar->removePropertyChangeListener->if->toolBar->removeContainerListener->if->components->toolBar->getComponents->foreach->component->removeFocusListener
BasicToolBarUI#installKeyboardActions():::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicToolBarUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap
BasicToolBarUI#navigateFocusedComp(int):::Navigates the focused component.:::nComp->toolBar->getComponentCount->j->switch->if->break->while->if->comp->toolBar->getComponentAtIndex->if->comp->isFocusTraversable->comp->isEnabled->comp->requestFocus->break->break->if->break->while->if->comp->toolBar->getComponentAtIndex->if->comp->isFocusTraversable->comp->isEnabled->comp->requestFocus->break->break->break
BasicToolBarUI#createRolloverBorder():::Creates a rollover border for toolbar components:::border->UIManager->get->if->return->table->UIManager->getLookAndFeelDefaults->return->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.RolloverButtonBorder->new->BasicBorders.RolloverMarginBorder->new->CompoundBorder
BasicToolBarUI#createNonRolloverBorder():::Creates the non rollover border for toolbar components:::border->UIManager->get->if->return->table->UIManager->getLookAndFeelDefaults->return->table->getColor->table->getColor->table->getColor->table->getColor->new->BasicBorders.ButtonBorder->new->BasicBorders.RolloverMarginBorder->new->CompoundBorder
BasicToolBarUI#createFloatingFrame(JToolBar):::No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar):::window->SwingUtilities->getWindowAncestor->frame->toolbar->getName->window->getGraphicsConfiguration->new->JFrame->frame->getRootPane->setName->frame->setResizable->wl->createFrameListener->frame->addWindowListener->return
BasicToolBarUI#createFloatingWindow(JToolBar):::Creates a window which contains the toolbar after it has been dragged out from its container:::dialog->window->SwingUtilities->getWindowAncestor->if->toolbar->getName->new->ToolBarDialog->else->if->toolbar->getName->new->ToolBarDialog->else->toolbar->getName->new->ToolBarDialog->dialog->getRootPane->setName->dialog->toolbar->getName->setTitle->dialog->setResizable->wl->createFrameListener->dialog->addWindowListener->return
BasicToolBarUI#createDragWindow(JToolBar):::Returns an instance of DragWindow.:::frame->if->p->for->toolBar->getParent->p->getParent->if->if->createFloatingWindow->if->dragWindow->new->DragWindow->return
BasicToolBarUI#isRolloverBorders():::Returns a flag to determine whether rollover button borders are enabled.:::return
BasicToolBarUI#setRolloverBorders(boolean):::Sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag.:::if->installRolloverBorders->else->installNonRolloverBorders
BasicToolBarUI#installRolloverBorders(JComponent):::Installs rollover borders on all the child components of the JComponent:::components->c->getComponents->foreach->if->updateUI->setBorderToRollover
BasicToolBarUI#installNonRolloverBorders(JComponent):::Installs non-rollover borders on all the child components of the JComponent:::components->c->getComponents->foreach->if->updateUI->setBorderToNonRollover
BasicToolBarUI#installNormalBorders(JComponent):::Installs normal borders on all the child components of the JComponent:::components->c->getComponents->foreach->setBorderToNormal
BasicToolBarUI#setBorderToRollover(Component):::Sets the border of the component to have a rollover border which was created by the #createRolloverBorder method.:::if->b->border->borderTable->get->if->borderTable->b->getBorder->put->if->b->getBorder->b->getRolloverBorder->setBorder->rolloverTable->b->isRolloverEnabled->put->b->setRolloverEnabled
BasicToolBarUI#getRolloverBorder(AbstractButton):::Returns a rollover border for the button.:::return
BasicToolBarUI#setBorderToNonRollover(Component):::Sets the border of the component to have a non-rollover border which was created by the #createNonRolloverBorder method.:::if->b->border->borderTable->get->if->borderTable->b->getBorder->put->if->b->getBorder->b->getNonRolloverBorder->setBorder->rolloverTable->b->isRolloverEnabled->put->b->setRolloverEnabled
BasicToolBarUI#getNonRolloverBorder(AbstractButton):::Returns a non-rollover border for the button.:::if->return->else->return
BasicToolBarUI#setBorderToNormal(Component):::Sets the border of the component to have a normal border:::if->b->border->borderTable->remove->b->setBorder->value->rolloverTable->remove->if->b->value->booleanValue->setRolloverEnabled
BasicToolBarUI#setFloatingLocation(int, int):::Sets the floating location.:::
BasicToolBarUI#isFloating():::Returns true if the JToolBar is floating:::return
BasicToolBarUI#setFloating(boolean, Point):::Sets the floating property.:::if->toolBar->isFloatable->visible->ancestor->SwingUtilities->getWindowAncestor->if->ancestor->isVisible->if->dragWindow->setVisible->if->createFloatingWindow->if->if->toolBar->getParent->dockingSource->remove->calculateConstraint->if->UIManager->addPropertyChangeListener->floatingToolBar->getContentPane->add->if->pack->setLocation->if->show->else->ancestor->new->WindowAdapter->addWindowListener->else->if->createFloatingWindow->if->setVisible->floatingToolBar->getContentPane->remove->constraint->getDockingConstraint->if->orientation->mapConstraintToOrientation->setOrientation->if->toolBar->getParent->if->UIManager->removePropertyChangeListener->dockingSource->add->dockingSource->invalidate->dockingSourceParent->dockingSource->getParent->if->dockingSourceParent->validate->dockingSource->repaint
BasicToolBarUI#setOrientation(int):::Sets the tool bar's orientation.:::toolBar->setOrientation->if->dragWindow->setOrientation
BasicToolBarUI#getDockingColor():::Gets the color displayed when over a docking area:::return
BasicToolBarUI#setDockingColor(Color):::Sets the color displayed when over a docking area:::
BasicToolBarUI#getFloatingColor():::Gets the color displayed when over a floating area:::return
BasicToolBarUI#setFloatingColor(Color):::Sets the color displayed when over a floating area:::
BasicToolBarUI#canDock(Component, Point):::Returns true if the JToolBar can dock at the given position.:::return->getDockingConstraint
BasicToolBarUI#dragTo(Point, Point):::The method is used to drag DragWindow during the JToolBar is being dragged.:::if->toolBar->isFloatable->try->if->createDragWindow->offset->dragWindow->getOffset->if->size->toolBar->getPreferredSize->new->Point->dragWindow->setOffset->global->new->Point->dragPoint->new->Point->if->toolBar->getParent->calculateConstraint->dockingPosition->dockingSource->getLocationOnScreen->comparisonPoint->new->Point->if->canDock->dragWindow->getDockingColor->setBackground->constraint->getDockingConstraint->orientation->mapConstraintToOrientation->dragWindow->setOrientation->dragWindow->setBorderColor->else->dragWindow->getFloatingColor->setBackground->dragWindow->setBorderColor->dragWindow->toolBar->getOrientation->setOrientation->dragWindow->setLocation->if->dragWindow->isVisible->size->toolBar->getPreferredSize->dragWindow->setSize->dragWindow->show->catch->finally
BasicToolBarUI#floatAt(Point, Point):::The method is called at end of dragging to place the frame in either its original place or in its floating frame.:::if->toolBar->isFloatable->try->offset->dragWindow->getOffset->if->dragWindow->setOffset->global->new->Point->setFloatingLocation->if->dockingPosition->dockingSource->getLocationOnScreen->comparisonPoint->new->Point->if->canDock->setFloating->else->setFloating->else->setFloating->dragWindow->setOffset->catch->finally
BasicToolBarUI#createToolBarContListener():::Returns an instance of ContainerListener.:::return->getHandler
BasicToolBarUI#createToolBarFocusListener():::Returns an instance of FocusListener.:::return->getHandler
BasicToolBarUI#createPropertyListener():::Returns an instance of PropertyChangeListener.:::return->getHandler
BasicToolBarUI#createDockingListener():::Returns an instance of MouseInputListener.:::getHandler->return->getHandler
BasicToolBarUI#createFrameListener():::Constructs a new instance of WindowListener.:::return->new->FrameListener
BasicToolBarUI#paintDragWindow(Graphics):::Paints the contents of the window used for dragging.:::g->dragWindow->getBackground->setColor->w->dragWindow->getWidth->h->dragWindow->getHeight->g->fillRect->g->dragWindow->getBorderColor->setColor->g->drawRect
BasicToolBarUI.DragWindow#getOrientation():::Returns the orientation of the toolbar window when the toolbar is floating:::return
BasicToolBarUI.DragWindow#setOrientation(int):::Sets the orientation.:::if->isShowing->if->return->size->getSize->new->Dimension->setSize->if->if->BasicGraphicsUtils->isLeftToRight->new->Point->setOffset->else->if->new->Point->setOffset->else->new->Point->setOffset->repaint
BasicToolBarUI.DragWindow#getOffset():::Returns the offset.:::return
BasicToolBarUI.DragWindow#setOffset(Point):::Sets the offset.:::
BasicToolBarUI.DragWindow#setBorderColor(Color):::Sets the border color.:::if->return->repaint
BasicToolBarUI.DragWindow#getBorderColor():::Returns the border color.:::return
BasicToolTipUI#createUI(JComponent):::Returns the instance of BasicToolTipUI.:::return
BasicToolTipUI#installDefaults(JComponent):::Installs default properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty->componentChanged
BasicToolTipUI#uninstallDefaults(JComponent):::Uninstalls default properties.:::LookAndFeel->uninstallBorder
BasicToolTipUI#installListeners(JComponent):::Registers listeners.:::createPropertyChangeListener->c->addPropertyChangeListener
BasicToolTipUI#uninstallListeners(JComponent):::Unregisters listeners.:::c->removePropertyChangeListener
BasicTransferable#getTransferDataFlavors():::Returns an array of DataFlavor objects indicating the flavors the data can be provided in:::richerFlavors->getRicherFlavors->nRicher->nHTML->isHTMLSupported->nPlain->isPlainSupported->nString->isPlainSupported->nFlavors->flavors->new->DataFlavorArr->nDone->if->System->arraycopy->if->System->arraycopy->if->System->arraycopy->if->System->arraycopy->return
BasicTransferable#isDataFlavorSupported(DataFlavor):::Returns whether or not the specified data flavor is supported for this object.:::flavors->getTransferDataFlavors->for->i->return
BasicTransferable#getTransferData(DataFlavor):::Returns an object which represents the data to be transferred:::richerFlavors->getRicherFlavors->if->isRicherFlavor->return->getRicherData->else->if->isHTMLFlavor->data->getHTMLData->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->createInputStream->else->if->isPlainFlavor->data->getPlainData->if->flavor->getRepresentationClass->equals->return->else->if->flavor->getRepresentationClass->equals->return->new->StringReader->else->if->flavor->getRepresentationClass->equals->return->createInputStream->else->if->isStringFlavor->data->getPlainData->return->throw->new->UnsupportedFlavorException
BasicTransferable#getRicherFlavors():::Some subclasses will have flavors that are more descriptive than HTML or plain text:::return
BasicTransferable#isHTMLFlavor(DataFlavor):::Returns whether or not the specified data flavor is an HTML flavor that is supported.:::flavors->for->i->return
BasicTransferable#isHTMLSupported():::Should the HTML flavors be offered?  If so, the method getHTMLData should be implemented to provide something reasonable.:::return
BasicTransferable#getHTMLData():::Fetch the data in a text/html format:::return
BasicTransferable#isPlainFlavor(DataFlavor):::Returns whether or not the specified data flavor is an plain flavor that is supported.:::flavors->for->i->return
BasicTransferable#isPlainSupported():::Should the plain text flavors be offered?  If so, the method getPlainData should be implemented to provide something reasonable.:::return
BasicTransferable#getPlainData():::Fetch the data in a text/plain format.:::return
BasicTransferable#isStringFlavor(DataFlavor):::Returns whether or not the specified data flavor is a String flavor that is supported.:::flavors->for->i->return
BasicTreeUI#createUI(JComponent):::Constructs a new instance of BasicTreeUI.:::return->new->BasicTreeUI
BasicTreeUI#getHashColor():::Returns the hash color.:::return
BasicTreeUI#setHashColor(Color):::Sets the hash color.:::
BasicTreeUI#setLeftChildIndent(int):::Sets the left child indent.:::if->treeState->invalidateSizes->updateSize
BasicTreeUI#getLeftChildIndent():::Returns the left child indent.:::return
BasicTreeUI#setRightChildIndent(int):::Sets the right child indent.:::if->treeState->invalidateSizes->updateSize
BasicTreeUI#getRightChildIndent():::Returns the right child indent.:::return
BasicTreeUI#setExpandedIcon(Icon):::Sets the expanded icon.:::
BasicTreeUI#getExpandedIcon():::Returns the expanded icon.:::return
BasicTreeUI#setCollapsedIcon(Icon):::Sets the collapsed icon.:::
BasicTreeUI#getCollapsedIcon():::Returns the collapsed icon.:::return
BasicTreeUI#setLargeModel(boolean):::Updates the componentListener, if necessary.:::if->getRowHeight->if->completeEditing->createLayoutCache->configureLayoutCache->updateLayoutCacheExpandedNodesIfNecessary->updateSize
BasicTreeUI#isLargeModel():::Returns true if large model is set.:::return
BasicTreeUI#setRowHeight(int):::Sets the row height, this is forwarded to the treeState.:::completeEditing->if->tree->isLargeModel->setLargeModel->treeState->setRowHeight->updateSize
BasicTreeUI#getRowHeight():::Returns the row height.:::return->tree->getRowHeight
BasicTreeUI#setCellRenderer(TreeCellRenderer):::Sets the TreeCellRenderer to tcr:::completeEditing->updateRenderer->if->treeState->invalidateSizes->updateSize
BasicTreeUI#getCellRenderer():::Return currentCellRenderer, which will either be the trees renderer, or defaultCellRenderer, which ever wasn't null.:::return
BasicTreeUI#setModel(TreeModel):::Sets the TreeModel.:::completeEditing->if->treeModel->removeTreeModelListener->if->if->treeModel->addTreeModelListener->if->treeState->setModel->updateLayoutCacheExpandedNodesIfNecessary->updateSize
BasicTreeUI#getModel():::Returns the tree model.:::return
BasicTreeUI#setRootVisible(boolean):::Sets the root to being visible.:::completeEditing->updateDepthOffset->if->treeState->setRootVisible->treeState->invalidateSizes->updateSize
BasicTreeUI#isRootVisible():::Returns true if the tree root is visible.:::return->tree->isRootVisible
BasicTreeUI#setShowsRootHandles(boolean):::Determines whether the node handles are to be displayed.:::completeEditing->updateDepthOffset->if->treeState->invalidateSizes->updateSize
BasicTreeUI#getShowsRootHandles():::Returns true if the root handles are to be displayed.:::return->tree->getShowsRootHandles
BasicTreeUI#setCellEditor(TreeCellEditor):::Sets the cell editor.:::updateCellEditor
BasicTreeUI#getCellEditor():::Returns an instance of TreeCellEditor.:::return->tree->getCellEditor
BasicTreeUI#setEditable(boolean):::Configures the receiver to allow, or not allow, editing.:::updateCellEditor
BasicTreeUI#isEditable():::Returns true if the tree is editable.:::return->tree->isEditable
BasicTreeUI#setSelectionModel(TreeSelectionModel):::Resets the selection model:::completeEditing->if->treeSelectionModel->removePropertyChangeListener->if->treeSelectionModel->removeTreeSelectionListener->if->if->treeSelectionModel->addPropertyChangeListener->if->treeSelectionModel->addTreeSelectionListener->if->treeState->setSelectionModel->else->if->treeState->setSelectionModel->if->tree->repaint
BasicTreeUI#getSelectionModel():::Returns the tree selection model.:::return
BasicTreeUI#getPathBounds(JTree, TreePath):::Returns the Rectangle enclosing the label portion that the last item in path will be drawn into:::if->return->tree->getInsets->new->Rectangle->getPathBounds->return
BasicTreeUI#getPathForRow(JTree, int):::Returns the path for passed in row:::return->treeState->getPathForRow
BasicTreeUI#getRowForPath(JTree, TreePath):::Returns the row that the last item identified in path is visible at:::return->treeState->getRowForPath
BasicTreeUI#getRowCount(JTree):::Returns the number of rows that are being displayed.:::return->treeState->getRowCount
BasicTreeUI#getClosestPathForLocation(JTree, int, int):::Returns the path to the node that is closest to x,y:::if->tree->getInsets->return->treeState->getPathClosestTo->return
BasicTreeUI#isEditing(JTree):::Returns true if the tree is being edited:::return
BasicTreeUI#stopEditing(JTree):::Stops the current editing session:::if->cellEditor->stopCellEditing->completeEditing->return->return
BasicTreeUI#cancelEditing(JTree):::Cancels the current editing session.:::if->completeEditing
BasicTreeUI#startEditingAtPath(JTree, TreePath):::Selects the last item in path and tries to edit it:::tree->scrollPathToVisible->if->tree->isVisible->startEditing
BasicTreeUI#getEditingPath(JTree):::Returns the path to the element that is being edited.:::return
BasicTreeUI#prepareForUIInstall():::Invoked after the tree instance variable has been set, but before any defaults/listeners have been installed.:::new->Hashtable<TreePath,Boolean>->BasicGraphicsUtils->isLeftToRight->new->Dimension->tree->isLargeModel->if->getRowHeight->tree->getModel->setModel
BasicTreeUI#completeUIInstall():::Invoked from installUI after all the defaults/listeners have been installed.:::this->tree->getShowsRootHandles->setShowsRootHandles->updateRenderer->updateDepthOffset->tree->getSelectionModel->setSelectionModel->createLayoutCache->configureLayoutCache->updateSize
BasicTreeUI#installDefaults():::Installs default properties.:::if->tree->getBackground->tree->getBackground->tree->UIManager->getColor->setBackground->if->getHashColor->getHashColor->UIManager->getColor->setHashColor->if->tree->getFont->tree->getFont->tree->UIManager->getFont->setFont->UIManager->get->setExpandedIcon->UIManager->get->setCollapsedIcon->UIManager->get->intValue->setLeftChildIndent->UIManager->get->intValue->setRightChildIndent->LookAndFeel->UIManager->get->installProperty->tree->isLargeModel->tree->getRowHeight->scrollsOnExpand->UIManager->get->if->LookAndFeel->installProperty->UIManager->getBoolean->UIManager->getBoolean->l->UIManager->get->l->longValue->showsRootHandles->UIManager->get->if->LookAndFeel->installProperty
BasicTreeUI#installListeners():::Registers listeners.:::if->createPropertyChangeListener->tree->addPropertyChangeListener->if->createMouseListener->tree->addMouseListener->if->tree->addMouseMotionListener->if->createFocusListener->tree->addFocusListener->if->createKeyListener->tree->addKeyListener->if->createTreeExpansionListener->tree->addTreeExpansionListener->if->createTreeModelListener->treeModel->addTreeModelListener->if->createSelectionModelPropertyChangeListener->treeSelectionModel->addPropertyChangeListener->if->createTreeSelectionListener->treeSelectionModel->addTreeSelectionListener->th->tree->getTransferHandler->if->tree->setTransferHandler->if->tree->getDropTarget->tree->setDropTarget->LookAndFeel->installProperty
BasicTreeUI#installKeyboardActions():::Registers keyboard actions.:::km->getInputMap->SwingUtilities->replaceUIInputMap->getInputMap->SwingUtilities->replaceUIInputMap->LazyActionMap->installLazyActionMap
BasicTreeUI#installComponents():::Intalls the subcomponents of the tree, which is the renderer pane.:::if->createCellRendererPane->tree->add
BasicTreeUI#createNodeDimensions():::Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree.:::return->new->NodeDimensionsHandler
BasicTreeUI#createPropertyChangeListener():::Creates a listener that is responsible that updates the UI based on how the tree changes.:::return->getHandler
BasicTreeUI#createMouseListener():::Creates the listener responsible for updating the selection based on mouse events.:::return->getHandler
BasicTreeUI#createFocusListener():::Creates a listener that is responsible for updating the display when focus is lost/gained.:::return->getHandler
BasicTreeUI#createKeyListener():::Creates the listener responsible for getting key events from the tree.:::return->getHandler
BasicTreeUI#createSelectionModelPropertyChangeListener():::Creates the listener responsible for getting property change events from the selection model.:::return->getHandler
BasicTreeUI#createTreeSelectionListener():::Creates the listener that updates the display based on selection change methods.:::return->getHandler
BasicTreeUI#createCellEditorListener():::Creates a listener to handle events from the current editor.:::return->getHandler
BasicTreeUI#createComponentListener():::Creates and returns a new ComponentHandler:::return->new->ComponentHandler
BasicTreeUI#createTreeExpansionListener():::Creates and returns the object responsible for updating the treestate when nodes expanded state changes.:::return->getHandler
BasicTreeUI#createLayoutCache():::Creates the object responsible for managing what is expanded, as well as the size of nodes.:::if->isLargeModel->getRowHeight->return->new->FixedHeightLayoutCache->return->new->VariableHeightLayoutCache
BasicTreeUI#createCellRendererPane():::Returns the renderer pane that renderer components are placed in.:::return->new->CellRendererPane
BasicTreeUI#createDefaultCellEditor():::Creates a default cell editor.:::if->editor->new->DefaultTreeCellEditor->return->return->new->DefaultTreeCellEditor
BasicTreeUI#createDefaultCellRenderer():::Returns the default cell renderer that is used to do the stamping of each node.:::return->new->DefaultTreeCellRenderer
BasicTreeUI#createTreeModelListener():::Returns a listener that can update the tree when the model changes.:::return->getHandler
BasicTreeUI#prepareForUIUninstall():::Invoked before unstallation of UI.:::
BasicTreeUI#completeUIUninstall():::Uninstalls UI.:::if->tree->setCellRenderer->if->tree->setCellEditor->setSelectionModel
BasicTreeUI#uninstallDefaults():::Uninstalls default properties.:::if->tree->getTransferHandler->tree->setTransferHandler
BasicTreeUI#uninstallListeners():::Unregisters listeners.:::if->tree->removeComponentListener->if->tree->removePropertyChangeListener->if->tree->removeMouseListener->if->tree->removeMouseMotionListener->if->tree->removeFocusListener->if->tree->removeKeyListener->if->tree->removeTreeExpansionListener->if->treeModel->removeTreeModelListener->if->treeSelectionModel->removePropertyChangeListener->if->treeSelectionModel->removeTreeSelectionListener
BasicTreeUI#uninstallKeyboardActions():::Unregisters keyboard actions.:::SwingUtilities->replaceUIActionMap->SwingUtilities->replaceUIInputMap->SwingUtilities->replaceUIInputMap
BasicTreeUI#uninstallComponents():::Uninstalls the renderer pane.:::if->tree->remove
BasicTreeUI#getBaseline(JComponent, int, int):::Returns the baseline.:::super->getBaseline->lafDefaults->UIManager->getLookAndFeelDefaults->renderer->lafDefaults->get->if->tcr->createDefaultCellRenderer->tcr->getTreeCellRendererComponent->lafDefaults->put->rowHeight->tree->getRowHeight->baseline->if->renderer->getBaseline->else->pref->renderer->getPreferredSize->renderer->getBaseline->return->tree->getInsets
BasicTreeUI#getBaselineResizeBehavior(JComponent):::Returns an enum indicating how the baseline of the component changes as the size changes.:::super->getBaselineResizeBehavior->return
BasicTreeUI#isDropLine(JTree.DropLocation):::Tells if a DropLocation should be indicated by a line between nodes:::return->loc->getPath->loc->getChildIndex
BasicTreeUI#paintDropLine(Graphics):::Paints the drop line.:::loc->tree->getDropLocation->if->isDropLine->return->c->UIManager->getColor->if->g->setColor->rect->getDropLineRect->g->fillRect
BasicTreeUI#getDropLineRect(JTree.DropLocation):::Returns a unbounding box for the drop line.:::rect->path->loc->getPath->index->loc->getChildIndex->ltr->insets->tree->getInsets->if->tree->getRowCount->tree->getWidth->new->Rectangle->else->model->getModel->root->model->getRoot->if->path->getLastPathComponent->model->getChildCount->tree->tree->getRowCount->getRowBounds->xRect->if->tree->isRootVisible->tree->getRowBounds->else->if->model->getChildCount->tree->getRowBounds->else->lastChildPath->path->model->model->getChildCount->getChild->pathByAddingChild->tree->getPathBounds->else->if->model->path->getLastPathComponent->getChildCount->tree->path->model->path->getLastPathComponent->getChild->pathByAddingChild->getPathBounds->else->tree->path->model->path->getLastPathComponent->getChild->pathByAddingChild->getPathBounds->if->if->return
BasicTreeUI#paintHorizontalPartOfLeg(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the horizontal part of the leg:::if->return->depth->path->getPathCount->if->isRootVisible->getShowsRootHandles->return->clipLeft->clipRight->clipTop->clipBottom->lineY->if->leftX->getRightChildIndent->nodeX->getHorizontalLegBuffer->if->g->getHashColor->setColor->paintHorizontalLine->else->nodeX->getHorizontalLegBuffer->rightX->getRightChildIndent->if->g->getHashColor->setColor->paintHorizontalLine
BasicTreeUI#paintVerticalPartOfLeg(Graphics, Rectangle, Insets, TreePath):::Paints the vertical part of the leg:::if->return->depth->path->getPathCount->if->getShowsRootHandles->isRootVisible->return->lineX->getRowX->if->getRightChildIndent->else->tree->getWidth->getRightChildIndent->clipLeft->clipRight->if->clipTop->clipBottom->parentBounds->getPathBounds->lastChildBounds->getLastChildPath->getPathBounds->if->return->top->if->Math->getVerticalLegBuffer->max->else->Math->getVerticalLegBuffer->max->if->isRootVisible->model->getModel->if->root->model->getRoot->if->model->getChildCount->path->model->getChild->pathByAddingChild->getPathBounds->if->Math->getVerticalLegBuffer->max->bottom->Math->min->if->g->getHashColor->setColor->paintVerticalLine
BasicTreeUI#paintExpandControl(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the expand (toggle) part of a row:::value->path->getLastPathComponent->if->treeModel->getChildCount->middleXOfKnob->if->getRightChildIndent->else->getRightChildIndent->middleYOfKnob->if->expandedIcon->getExpandedIcon->if->drawCentered->else->collapsedIcon->getCollapsedIcon->if->drawCentered
BasicTreeUI#paintRow(Graphics, Rectangle, Insets, Rectangle, TreePath, int, boolean, boolean, boolean):::Paints the renderer part of a row:::if->return->leadIndex->if->tree->hasFocus->getLeadSelectionRow->else->component->currentCellRenderer->path->getLastPathComponent->tree->isRowSelected->getTreeCellRendererComponent->rendererPane->paintComponent
BasicTreeUI#shouldPaintExpandControl(TreePath, int, boolean, boolean, boolean):::Returns true if the expand (toggle) control should be drawn for the specified row.:::if->return->depth->path->getPathCount->if->isRootVisible->getShowsRootHandles->return->return
BasicTreeUI#paintVerticalLine(Graphics, JComponent, int, int, int):::Paints a vertical line.:::if->drawDashedVerticalLine->else->g->drawLine
BasicTreeUI#paintHorizontalLine(Graphics, JComponent, int, int, int):::Paints a horizontal line.:::if->drawDashedHorizontalLine->else->g->drawLine
BasicTreeUI#getVerticalLegBuffer():::The vertical element of legs between nodes starts at the bottom of the parent node by default:::return
BasicTreeUI#getHorizontalLegBuffer():::The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default:::return
BasicTreeUI#drawCentered(Component, Graphics, Icon, int, int):::Draws the icon centered at (x,y).:::icon->icon->getIconWidth->findCenteredX->icon->getIconHeight->paintIcon
BasicTreeUI#drawDashedHorizontalLine(Graphics, int, int, int):::Draws a horizontal dashed line:::drawDashedLine
BasicTreeUI#drawDashedVerticalLine(Graphics, int, int, int):::Draws a vertical dashed line:::drawDashedLine
BasicTreeUI#getRowX(int, int):::Returns the location, along the x-axis, to render a particular row at:::return
BasicTreeUI#updateLayoutCacheExpandedNodes():::Makes all the nodes that are expanded in JTree expanded in LayoutCache:::if->treeModel->getRoot->treeModel->getRoot->new->TreePath->updateExpandedDescendants
BasicTreeUI#updateExpandedDescendants(TreePath):::Updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state.:::completeEditing->if->treeState->setExpandedState->descendants->tree->getExpandedDescendants->if->while->descendants->hasMoreElements->descendants->nextElement->treeState->setExpandedState->updateLeadSelectionRow->updateSize
BasicTreeUI#getLastChildPath(TreePath):::Returns a path to the last child of parent.:::if->childCount->treeModel->parent->getLastPathComponent->getChildCount->if->return->parent->treeModel->parent->getLastPathComponent->getChild->pathByAddingChild->return
BasicTreeUI#updateDepthOffset():::Updates how much each depth should be offset by.:::if->isRootVisible->if->getShowsRootHandles->else->else->if->getShowsRootHandles->else
BasicTreeUI#updateCellEditor():::Updates the cellEditor based on the editability of the JTree that we're contained in:::newEditor->completeEditing->if->else->if->tree->isEditable->tree->getCellEditor->if->createDefaultCellEditor->if->tree->setCellEditor->else->if->if->cellEditor->removeCellEditorListener->if->createCellEditorListener->if->newEditor->addCellEditorListener
BasicTreeUI#updateRenderer():::Messaged from the tree we're in when the renderer has changed.:::if->newCellRenderer->tree->getCellRenderer->if->tree->createDefaultCellRenderer->setCellRenderer->else->if->tree->setCellEditor->else->updateCellEditor
BasicTreeUI#configureLayoutCache():::Resets the TreeState instance based on the tree we're providing the look and feel for.:::if->if->createNodeDimensions->treeState->setNodeDimensions->treeState->tree->isRootVisible->setRootVisible->treeState->tree->getRowHeight->setRowHeight->treeState->getSelectionModel->setSelectionModel->if->treeState->getModel->tree->getModel->treeState->tree->getModel->setModel->updateLayoutCacheExpandedNodesIfNecessary->if->isLargeModel->if->createComponentListener->if->tree->addComponentListener->else->if->tree->removeComponentListener->else->if->tree->removeComponentListener
BasicTreeUI#updateSize():::Marks the cached size as being invalid, and messages the tree with treeDidChange.:::tree->treeDidChange
BasicTreeUI#updateCachedPreferredSize():::Updates the preferredSize instance variable, which is returned from getPreferredSize(). For left to right orientations, the size is determined from the current AbstractLayoutCache:::if->i->tree->getInsets->if->isLargeModel->visRect->tree->getVisibleRect->if->tree->getVisibleRowCount->tree->getRowHeight->tree->getVisibleRowCount->else->component->SwingUtilities->getUnwrappedParent->if->component->getParent->if->pane->bar->pane->getHorizontalScrollBar->if->bar->isVisible->height->bar->getHeight->treeState->getPreferredWidth->else->treeState->getPreferredWidth->treeState->getPreferredHeight
BasicTreeUI#pathWasExpanded(TreePath):::Messaged from the VisibleTreeNode after it has been expanded.:::if->tree->fireTreeExpanded
BasicTreeUI#pathWasCollapsed(TreePath):::Messaged from the VisibleTreeNode after it has collapsed.:::if->tree->fireTreeCollapsed
BasicTreeUI#ensureRowsAreVisible(int, int):::Ensures that the rows identified by beginRow through endRow are visible.:::if->getRowCount->scrollVert->DefaultLookup->getBoolean->if->scrollBounds->getPathForRow->getPathBounds->if->if->tree->getVisibleRect->tree->scrollRectToVisible->else->beginRect->getPathForRow->getPathBounds->if->visRect->tree->getVisibleRect->testRect->beginY->maxY->for->counter->tree->new->Rectangle->scrollRectToVisible
BasicTreeUI#setPreferredMinSize(Dimension):::Sets the preferred minimum size.:::
BasicTreeUI#getPreferredMinSize():::Returns the minimum preferred size.:::if->return->return->new->Dimension
BasicTreeUI#getPreferredSize(JComponent):::Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, true).:::return->getPreferredSize
BasicTreeUI#getPreferredSize(JComponent, boolean):::Returns the preferred size to represent the tree in c:::pSize->this->getPreferredMinSize->if->updateCachedPreferredSize->if->if->return->Math->max->Math->max->new->Dimension->return->new->Dimension->else->if->return->else->return->new->Dimension
BasicTreeUI#getMinimumSize(JComponent):::Returns the minimum size for this component:::if->this->getPreferredMinSize->return->this->getPreferredMinSize->return->new->Dimension
BasicTreeUI#getMaximumSize(JComponent):::Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0.:::if->return->getPreferredSize->if->this->getPreferredMinSize->return->this->getPreferredMinSize->return->new->Dimension
BasicTreeUI#completeEditing():::Messages to stop the editing session:::if->tree->getInvokesStopCellEditing->cellEditor->stopCellEditing->completeEditing
BasicTreeUI#completeEditing(boolean, boolean, boolean):::Stops the editing session:::if->oldComponent->oldPath->oldEditor->newValue->oldEditor->getCellEditorValue->editingBounds->getPathBounds->requestFocus->tree->hasFocus->SwingUtilities->findFocusOwner->if->oldEditor->stopCellEditing->else->if->oldEditor->cancelCellEditing->tree->remove->if->treeState->invalidatePathBounds->updateSize->else->if->tree->getSize->tree->repaint->if->tree->requestFocus->if->treeModel->valueForPathChanged
BasicTreeUI#startEditing(TreePath, MouseEvent):::Will start editing for node if there is a cellEditor and shouldSelectCell returns true. This assumes that path is valid and visible.:::if->isEditing->tree->getInvokesStopCellEditing->stopEditing->return->completeEditing->if->tree->isPathEditable->row->getRowForPath->if->cellEditor->isCellEditable->cellEditor->path->getLastPathComponent->tree->isPathSelected->tree->isExpanded->treeModel->path->getLastPathComponent->isLeaf->getTreeCellEditorComponent->nodeBounds->getPathBounds->if->return->editorSize->editingComponent->getPreferredSize->if->getRowHeight->getRowHeight->if->treeState->invalidatePathBounds->updateSize->getPathBounds->if->return->else->tree->add->editingComponent->setBounds->AWTAccessor->getComponentAccessor->revalidateSynchronously->editingComponent->repaint->if->cellEditor->shouldSelectCell->tree->setSelectionRow->focusedComponent->SwingUtilities2->compositeRequestFocus->selectAll->if->componentPoint->SwingUtilities->event->getX->event->getY->new->Point->convertPoint->activeComponent->SwingUtilities->getDeepestComponentAt->if->handler->new->MouseInputHandler->if->handler->mouseReleased->if->selectAll->return->else->return
BasicTreeUI#checkForClickInExpandControl(TreePath, int, int):::If the mouseX and mouseY are in the expand/collapse region of the row, this will toggle the row.:::if->isLocationInExpandControl->handleExpandControlClick
BasicTreeUI#isLocationInExpandControl(TreePath, int, int):::Returns true if mouseX and mouseY fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf.:::if->treeModel->path->getLastPathComponent->isLeaf->boxWidth->i->tree->getInsets->if->getExpandedIcon->getExpandedIcon->getIconWidth->else->boxLeftX->tree->getRowForPath->path->getPathCount->getRowX->if->getRightChildIndent->else->tree->getWidth->getRightChildIndent->findCenteredX->return->return
BasicTreeUI#handleExpandControlClick(TreePath, int, int):::Messaged when the user clicks the particular row, this invokes toggleExpandState.:::toggleExpandState
BasicTreeUI#toggleExpandState(TreePath):::Expands path if it is not expanded, or collapses row if it is expanded:::if->tree->isExpanded->row->getRowForPath->tree->expandPath->updateSize->if->if->tree->getScrollsOnExpand->treeState->getVisibleChildCount->ensureRowsAreVisible->else->ensureRowsAreVisible->else->tree->collapsePath->updateSize
BasicTreeUI#isToggleSelectionEvent(MouseEvent):::Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse.:::return->SwingUtilities->isLeftMouseButton->BasicGraphicsUtils->isMenuShortcutKeyDown
BasicTreeUI#isMultiSelectEvent(MouseEvent):::Returning true signifies a mouse event on the node should select from the anchor point.:::return->SwingUtilities->isLeftMouseButton->event->isShiftDown
BasicTreeUI#isToggleEvent(MouseEvent):::Returning true indicates the row under the mouse should be toggled based on the event:::if->SwingUtilities->isLeftMouseButton->return->clickCount->tree->getToggleClickCount->if->return->return->event->getClickCount
BasicTreeUI#selectPathForEvent(TreePath, MouseEvent):::Messaged to update the selection based on a MouseEvent over a particular row:::if->isMultiSelectEvent->anchor->getAnchorSelectionPath->anchorRow->getRowForPath->if->tree->getSelectionModel->getSelectionMode->tree->setSelectionPath->else->row->getRowForPath->lastAnchorPath->if->isToggleSelectionEvent->if->tree->isRowSelected->tree->addSelectionInterval->else->tree->removeSelectionInterval->tree->addSelectionInterval->else->if->tree->setSelectionInterval->else->tree->setSelectionInterval->setAnchorSelectionPath->setLeadSelectionPath->else->if->isToggleSelectionEvent->if->tree->isPathSelected->tree->removeSelectionPath->else->tree->addSelectionPath->getRowForPath->setAnchorSelectionPath->setLeadSelectionPath->else->if->SwingUtilities->isLeftMouseButton->tree->setSelectionPath->if->isToggleEvent->toggleExpandState
BasicTreeUI#isLeaf(int):::Returns true if the node at row is a leaf.:::path->getPathForRow->if->return->treeModel->path->getLastPathComponent->isLeaf->return
BasicTreeUI#updateLeadSelectionRow():::Updates the lead row of the selection.:::getLeadSelectionPath->getRowForPath
BasicTreeUI#getLeadSelectionRow():::Returns the lead row of the selection.:::return
BasicTreeUI.TreeExpansionHandler#treeExpanded(TreeExpansionEvent):::Called whenever an item in the tree has been expanded.:::getHandler->treeExpanded
BasicTreeUI.TreeExpansionHandler#treeCollapsed(TreeExpansionEvent):::Called whenever an item in the tree has been collapsed.:::getHandler->treeCollapsed
BasicTreeUI.ComponentHandler#startTimer():::Creates, if necessary, and starts a Timer to check if need to resize the bounds.:::if->new->Timer->timer->setRepeats->timer->start
BasicTreeUI.ComponentHandler#getScrollPane():::Returns the JScrollPane housing the JTree, or null if one isn't found.:::c->tree->getParent->while->c->getParent->if->return->return
BasicTreeUI.ComponentHandler#actionPerformed(ActionEvent):::Public as a result of Timer:::if->scrollBar->getValueIsAdjusting->if->timer->stop->updateSize
BasicTreeUI.TreeSelectionHandler#valueChanged(TreeSelectionEvent):::Messaged when the selection changes in the tree we're displaying for:::getHandler->valueChanged
BasicTreeUI.CellEditorHandler#editingStopped(ChangeEvent):::Messaged when editing has stopped in the tree.:::getHandler->editingStopped
BasicTreeUI.CellEditorHandler#editingCanceled(ChangeEvent):::Messaged when editing has been canceled in the tree.:::getHandler->editingCanceled
BasicTreeUI.KeyHandler#keyTyped(KeyEvent):::Invoked when a key has been typed:::getHandler->keyTyped
BasicTreeUI.FocusHandler#focusGained(FocusEvent):::Invoked when focus is activated on the tree we're in, redraws the lead row.:::getHandler->focusGained
BasicTreeUI.FocusHandler#focusLost(FocusEvent):::Invoked when focus is activated on the tree we're in, redraws the lead row.:::getHandler->focusLost
BasicTreeUI.NodeDimensionsHandler#getNodeDimensions(Object, int, int, boolean, Rectangle):::Responsible for getting the size of a particular node.:::if->prefSize->editingComponent->getPreferredSize->rh->getRowHeight->if->if->getRowX->else->getRowX->new->Rectangle->return->if->aComponent->currentCellRenderer->tree->isRowSelected->treeModel->isLeaf->getTreeCellRendererComponent->if->rendererPane->add->aComponent->validate->prefSize->aComponent->getPreferredSize->if->getRowX->else->getRowX->new->Rectangle->return->return
BasicTreeUI.NodeDimensionsHandler#getRowX(int, int):::Returns amount to indent the given row.:::return->BasicTreeUI.this->getRowX
BasicTreeUI.MouseHandler#mousePressed(MouseEvent):::Invoked when a mouse button has been pressed on a component.:::getHandler->mousePressed
BasicTreeUI.MouseHandler#mouseMoved(MouseEvent):::Invoked when the mouse button has been moved on a component (with no buttons no down).:::getHandler->mouseMoved
BasicTreeUI.MouseInputHandler#removeFromSource():::Removes an event from the source.:::if->source->removeMouseListener->source->removeMouseMotionListener->if->selectAll
BasicTreeUI.TreeTransferHandler#createTransferable(JComponent):::Create a Transferable to use as the source for a data transfer.:::if->paths->tree->getSelectionPaths->if->return->plainStr->new->StringBuilder->htmlStr->new->StringBuilder->htmlStr->append->model->tree->getModel->lastPath->displayPaths->getDisplayOrderPaths->foreach->node->path->getLastPathComponent->leaf->model->isLeaf->label->getDisplayString->plainStr->append->append->htmlStr->append->append->append->plainStr->plainStr->length->deleteCharAt->htmlStr->append->return->plainStr->toString->htmlStr->toString->new->BasicTransferable->return
BasicTreeUI.TreeTransferHandler#getDisplayOrderPaths(TreePath[]):::Selection paths are in selection order:::selOrder->new->ArrayList<TreePath>->foreach->selOrder->add->Collections->sort->n->selOrder->size->displayPaths->new->TreePathArr->for->i->return
BasicViewportUI#createUI(JComponent):::Returns an instance of BasicViewportUI.:::if->new->BasicViewportUI->return
BasicViewportUI#installDefaults(JComponent):::Installs view port properties.:::LookAndFeel->installColorsAndFont->LookAndFeel->installProperty
BasicViewportUI#uninstallDefaults(JComponent):::Uninstall view port properties.:::
ComboPopup#show():::Shows the popup:::
ComboPopup#hide():::Hides the popup:::
ComboPopup#isVisible():::Returns true if the popup is visible (currently being displayed).:::
ComboPopup#getList():::Returns the list that is being used to draw the items in the combo box:::
ComboPopup#getMouseListener():::Returns a mouse listener that will be added to the combo box or null:::
ComboPopup#getMouseMotionListener():::Returns a mouse motion listener that will be added to the combo box or null:::
ComboPopup#getKeyListener():::Returns a key listener that will be added to the combo box or null:::
ComboPopup#uninstallingUI():::Called to inform the ComboPopup that the UI is uninstalling:::
DragRecognitionSupport#mousePressed(MouseEvent):::Returns whether or not the event is potentially part of a drag sequence.:::return->getDragRecognitionSupport->mousePressedImpl
DragRecognitionSupport#mouseReleased(MouseEvent):::If a dnd recognition has been going on, return the MouseEvent that started the recognition:::return->getDragRecognitionSupport->mouseReleasedImpl
DragRecognitionSupport#mouseDragged(MouseEvent, BeforeDrag):::Returns whether or not a drag gesture recognition is ongoing.:::return->getDragRecognitionSupport->mouseDraggedImpl
LazyActionMap#installLazyActionMap(JComponent, Class, String):::Installs an ActionMap that will be populated by invoking the loadActionMap method on the specified Class when necessary:::map->UIManager->get->if->new->LazyActionMap->UIManager->getLookAndFeelDefaults->put->SwingUtilities->replaceUIActionMap
LazyActionMap#getActionMap(Class, String):::Returns an ActionMap that will be populated by invoking the loadActionMap method on the specified Class when necessary:::map->UIManager->get->if->new->LazyActionMap->UIManager->getLookAndFeelDefaults->put->return

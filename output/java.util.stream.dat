AbstractPipeline#evaluate(TerminalOp):::Evaluate the pipeline with a terminal operation to produce a result.:::if->throw->new->IllegalStateException->return->isParallel->terminalOp->terminalOp->getOpFlags->sourceSpliterator->evaluateParallel->terminalOp->terminalOp->getOpFlags->sourceSpliterator->evaluateSequential
AbstractPipeline#evaluateToArrayNode(IntFunction):::Collect the elements output from the pipeline stage.:::if->throw->new->IllegalStateException->if->isParallel->opIsStateful->return->previousStage->sourceSpliterator->opEvaluateParallel->else->return->sourceSpliterator->evaluate
AbstractPipeline#sourceStageSpliterator():::Gets the source stage spliterator if this pipeline stage is the source stage:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->s->return->else->if->s->get->return->else->throw->new->IllegalStateException
AbstractPipeline#getStreamFlags():::Returns the composition of stream flags of the stream source and all intermediate operations.:::return->StreamOpFlag->toStreamFlags
AbstractPipeline#getOutputShape():::Get the output shape of the pipeline:::
AbstractPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction):::Collect elements output from a pipeline into a Node that holds elements of this shape.:::
AbstractPipeline#wrap(PipelineHelper, Supplier>, boolean):::Create a spliterator that wraps a source spliterator, compatible with this stream shape, and operations associated with a PipelineHelper.:::
AbstractPipeline#lazySpliterator(Supplier>):::Create a lazy spliterator that wraps and obtains the supplied the spliterator when a method is invoked on the lazy spliterator.:::
AbstractPipeline#forEachWithCancel(Spliterator, Sink):::Traverse the elements of a spliterator compatible with this stream shape, pushing those elements into a sink:::
AbstractPipeline#makeNodeBuilder(long, IntFunction):::Make a node builder compatible with this stream shape.:::
AbstractPipeline#opIsStateful():::Returns whether this operation is stateful or not:::
AbstractPipeline#opWrapSink(int, Sink):::Accepts a Sink which will receive the results of this operation, and return a Sink which accepts elements of the input type of this operation and which performs the operation, passing the results to the provided Sink.:::
AbstractPipeline#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction):::Performs a parallel evaluation of the operation using the specified PipelineHelper which describes the upstream intermediate operations:::throw->new->UnsupportedOperationException
AbstractPipeline#opEvaluateParallelLazy(PipelineHelper, Spliterator):::Returns a Spliterator describing a parallel evaluation of the operation, using the specified PipelineHelper which describes the upstream intermediate operations:::return->new->ObjectArr->opEvaluateParallel->spliterator
AbstractShortCircuitTask#getEmptyResult():::Returns the value indicating the computation completed with no task finding a short-circuitable result:::
AbstractShortCircuitTask#compute():::Overrides AbstractTask version to include checks for early exits while splitting or computing.:::rs->ls->sizeEstimate->rs->estimateSize->sizeThreshold->getTargetSize->forkRight->task->sr->result->while->sr->get->if->task->taskCanceled->task->getEmptyResult->break->if->rs->trySplit->task->doLeaf->break->leftChild->rightChild->taskToFork->task->makeChild->task->makeChild->task->setPendingCount->if->else->taskToFork->fork->rs->estimateSize->task->setLocalResult->task->tryComplete
AbstractShortCircuitTask#shortCircuit(R):::Declares that a globally valid result has been found:::if->sharedResult->compareAndSet
AbstractShortCircuitTask#setLocalResult(R):::Sets a local result for this task:::if->isRoot->if->sharedResult->compareAndSet->else->super->setLocalResult
AbstractShortCircuitTask#getRawResult():::Retrieves the local result for this task:::return->getLocalResult
AbstractShortCircuitTask#getLocalResult():::Retrieves the local result for this task:::if->isRoot->answer->sharedResult->get->return->getEmptyResult->else->return->super->getLocalResult
AbstractShortCircuitTask#cancel():::Mark this task as canceled:::
AbstractShortCircuitTask#taskCanceled():::Queries whether this task is canceled:::cancel->if->for->parent->getParent->parent->getParent->return
AbstractShortCircuitTask#cancelLaterNodes():::Cancels all tasks which succeed this one in the encounter order:::for->parent->getParent->node->parent->getParent
AbstractSpinedBuffer#isEmpty():::Is the buffer currently empty?:::return
AbstractSpinedBuffer#count():::How many elements are currently in the buffer?:::return
AbstractSpinedBuffer#chunkSize(int):::How big should the nth chunk be?:::power->Math->min->return
AbstractSpinedBuffer#clear():::Remove all data from the buffer:::
AbstractTask#getLeafTarget():::Default target of leaf tasks for parallel decomposition:::t->Thread->currentThread->if->return->getPool->getParallelism->else->return
AbstractTask#makeChild(Spliterator):::Constructs a new node of type T whose parent is the receiver; must call the AbstractTask(T, Spliterator) constructor with the receiver and the provided Spliterator.:::
AbstractTask#doLeaf():::Computes the result associated with a leaf node:::
AbstractTask#suggestTargetSize(long):::Returns a suggested target leaf size based on the initial size estimate.:::est->getLeafTarget->return
AbstractTask#getTargetSize(long):::Returns the targetSize, initializing it via the supplied size estimate if not already initialized.:::s->return->suggestTargetSize
AbstractTask#getRawResult():::Returns the local result, if any:::return
AbstractTask#setRawResult(R):::Does nothing; instead, subclasses should use #setLocalResult(Object)} to manage results.:::if->throw->new->IllegalStateException
AbstractTask#getLocalResult():::Retrieves a result previously stored with #setLocalResult:::return
AbstractTask#setLocalResult(R):::Associates the result with the task, can be retrieved with #getLocalResult:::
AbstractTask#isLeaf():::Indicates whether this task is a leaf node:::return
AbstractTask#isRoot():::Indicates whether this task is the root node:::return->getParent
AbstractTask#getParent():::Returns the parent of this task, or null if this task is the root:::return->getCompleter
AbstractTask#compute():::Decides whether or not to split a task further or compute it directly:::rs->ls->sizeEstimate->rs->estimateSize->sizeThreshold->getTargetSize->forkRight->task->while->rs->trySplit->leftChild->rightChild->taskToFork->task->makeChild->task->makeChild->task->setPendingCount->if->else->taskToFork->fork->rs->estimateSize->task->task->doLeaf->setLocalResult->task->tryComplete
AbstractTask#isLeftmostNode():::Returns whether this node is a "leftmost" node -- whether the path from the root to this node involves only traversing leftmost child links:::node->while->parent->node->getParent->if->return->return
BaseStream#iterator():::Returns an iterator for the elements of this stream:::
BaseStream#spliterator():::Returns a spliterator for the elements of this stream:::
BaseStream#isParallel():::Returns whether this stream, if a terminal operation were to be executed, would execute in parallel:::
BaseStream#sequential():::Returns an equivalent stream that is sequential:::
BaseStream#parallel():::Returns an equivalent stream that is parallel:::
BaseStream#unordered():::Returns an equivalent stream that is unordered:::
BaseStream#onClose(Runnable):::Returns an equivalent stream with an additional close handler:::
BaseStream#close():::Closes this stream, causing all close handlers for this stream pipeline to be called.:::
Collector#supplier():::A function that creates and returns a new mutable result container.:::
Collector#accumulator():::A function that folds a value into a mutable result container.:::
Collector#combiner():::A function that accepts two partial results and merges them:::
Collector#finisher():::Perform the final transformation from the intermediate accumulation type A to the final result type R:::
Collector#characteristics():::Returns a Set of Collector.Characteristics indicating the characteristics of this Collector:::
Collector#of(Supplier, BiConsumer, BinaryOperator, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, and combiner functions:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->cs->Collections->EnumSet->of->unmodifiableSet->return->new->Collectors.CollectorImpl<>
Collector#of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->cs->if->EnumSet->noneOf->Collections->addAll->Collections->unmodifiableSet->return->new->Collectors.CollectorImpl<>
Collectors#toCollection(Supplier):::Returns a Collector that accumulates the input elements into a new Collection, in encounter order:::return->Collection<T>->add->r1->addAll->return->new->CollectorImpl<>
Collectors#toList():::Returns a Collector that accumulates the input elements into a new List:::return->ArrayList->new->List->add->left->addAll->return->new->CollectorImpl<>
Collectors#toUnmodifiableList():::Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order:::return->ArrayList->new->List->add->left->addAll->return->List->list->toArray->of->new->CollectorImpl<>
Collectors#toSet():::Returns a Collector that accumulates the input elements into a new Set:::return->HashSet->new->Set->add->if->left->size->right->size->right->addAll->return->else->left->addAll->return->new->CollectorImpl<>
Collectors#toUnmodifiableSet():::Returns a Collector that accumulates the input elements into an unmodifiable Set:::return->HashSet->new->Set->add->if->left->size->right->size->right->addAll->return->else->left->addAll->return->Set->set->toArray->of->new->CollectorImpl<>
Collectors#joining():::Returns a Collector that concatenates the input elements into a String, in encounter order.:::return->StringBuilder->new->StringBuilder->append->r1->append->return->StringBuilder->toString->new->CollectorImpl<CharSequence,StringBuilder,String>
Collectors#joining(CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order.:::return->joining
Collectors#joining(CharSequence, CharSequence, CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order.:::return->new->StringJoiner->StringJoiner->add->StringJoiner->merge->StringJoiner->toString->new->CollectorImpl<>
Collectors#mapping(Function, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.:::downstreamAccumulator->downstream->accumulator->return->downstream->supplier->downstreamAccumulator->mapper->apply->accept->downstream->combiner->downstream->finisher->downstream->characteristics->new->CollectorImpl<>
Collectors#flatMapping(Function>, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation:::downstreamAccumulator->downstream->accumulator->return->downstream->supplier->try->result->mapper->apply->if->result->sequential->downstreamAccumulator->accept->forEach->catch->finally->downstream->combiner->downstream->finisher->downstream->characteristics->new->CollectorImpl<>
Collectors#filtering(Predicate, Collector):::Adapts a Collector to one accepting elements of the same type T by applying the predicate to each input element and only accumulating if the predicate returns true.:::downstreamAccumulator->downstream->accumulator->return->downstream->supplier->if->predicate->test->downstreamAccumulator->accept->downstream->combiner->downstream->finisher->downstream->characteristics->new->CollectorImpl<>
Collectors#collectingAndThen(Collector, Function):::Adapts a Collector to perform an additional finishing transformation:::characteristics->downstream->characteristics->if->characteristics->contains->if->characteristics->size->else->EnumSet->copyOf->characteristics->remove->Collections->unmodifiableSet->return->downstream->supplier->downstream->accumulator->downstream->combiner->downstream->finisher->andThen->new->CollectorImpl<>
Collectors#counting():::Returns a Collector accepting elements of type T that counts the number of input elements:::return->summingLong
Collectors#minBy(Comparator):::Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.:::return->BinaryOperator->minBy->reducing
Collectors#maxBy(Comparator):::Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.:::return->BinaryOperator->maxBy->reducing
Collectors#summingInt(ToIntFunction):::Returns a Collector that produces the sum of a integer-valued function applied to the input elements:::return->new->intArr->mapper->applyAsInt->return->new->CollectorImpl<>
Collectors#summingLong(ToLongFunction):::Returns a Collector that produces the sum of a long-valued function applied to the input elements:::return->new->longArr->mapper->applyAsLong->return->new->CollectorImpl<>
Collectors#summingDouble(ToDoubleFunction):::Returns a Collector that produces the sum of a double-valued function applied to the input elements:::return->new->doubleArr->val->mapper->applyAsDouble->sumWithCompensation->sumWithCompensation->return->sumWithCompensation->computeFinalSum->new->CollectorImpl<>
Collectors#sumWithCompensation(double[], double):::Incorporate a new double value using Kahan summation / compensation summation:::tmp->sum->velvel->return
Collectors#computeFinalSum(double[]):::If the compensated sum is spuriously NaN from accumulating one or more same-signed infinite values, return the correctly-signed infinity stored in the simple sum.:::tmp->simpleSum->if->Double->isNaN->Double->isInfinite->return->else->return
Collectors#averagingInt(ToIntFunction):::Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements:::return->new->longArr->mapper->applyAsInt->return->new->CollectorImpl<>
Collectors#averagingLong(ToLongFunction):::Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements:::return->new->longArr->mapper->applyAsLong->return->new->CollectorImpl<>
Collectors#averagingDouble(ToDoubleFunction):::Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements:::return->new->doubleArr->val->mapper->applyAsDouble->sumWithCompensation->sumWithCompensation->sumWithCompensation->return->computeFinalSum->new->CollectorImpl<>
Collectors#reducing(T, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.:::return->boxSupplier->op->apply->op->apply->return->new->CollectorImpl<>
Collectors#reducing(BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator:::return->OptionalBox->new->OptionalBox->accept->if->a->accept->return->Optional->ofNullable->new->CollectorImpl<T,OptionalBox,Optional<T>>
Collectors#reducing(U, Function, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator:::return->boxSupplier->op->mapper->apply->apply->op->apply->return->new->CollectorImpl<>
Collectors#groupingBy(Function):::Returns a Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map:::return->toList->groupingBy
Collectors#groupingBy(Function, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector:::return->HashMap->new->groupingBy
Collectors#groupingBy(Function, Supplier, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector:::downstreamSupplier->downstream->supplier->downstreamAccumulator->downstream->accumulator->accumulator->key->Objects->classifier->apply->requireNonNull->container->m->downstreamSupplier->get->computeIfAbsent->downstreamAccumulator->accept->merger->Collectors->downstream->combiner->mapMerger->mangledFactory->if->downstream->characteristics->contains->return->new->CollectorImpl<>->else->downstreamFinisher->downstream->finisher->finisher->intermediate->downstreamFinisher->apply->replaceAll->castResult->return->return->new->CollectorImpl<>
Collectors#groupingByConcurrent(Function):::Returns a concurrent Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function:::return->ConcurrentHashMap->new->toList->groupingByConcurrent
Collectors#groupingByConcurrent(Function, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector:::return->ConcurrentHashMap->new->groupingByConcurrent
Collectors#groupingByConcurrent(Function, Supplier, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector:::downstreamSupplier->downstream->supplier->downstreamAccumulator->downstream->accumulator->merger->Collectors->downstream->combiner->mapMerger->mangledFactory->accumulator->if->downstream->characteristics->contains->key->Objects->classifier->apply->requireNonNull->resultContainer->m->downstreamSupplier->get->computeIfAbsent->downstreamAccumulator->accept->else->key->Objects->classifier->apply->requireNonNull->resultContainer->m->downstreamSupplier->get->computeIfAbsent->synchronized->downstreamAccumulator->accept->if->downstream->characteristics->contains->return->new->CollectorImpl<>->else->downstreamFinisher->downstream->finisher->finisher->intermediate->downstreamFinisher->apply->replaceAll->castResult->return->return->new->CollectorImpl<>
Collectors#partitioningBy(Predicate):::Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>:::return->toList->partitioningBy
Collectors#partitioningBy(Predicate, Collector):::Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction:::downstreamAccumulator->downstream->accumulator->accumulator->downstreamAccumulator->predicate->test->accept->op->downstream->combiner->merger->op->apply->op->apply->new->Partition<>->supplier->downstream->supplier->get->downstream->supplier->get->new->Partition<>->if->downstream->characteristics->contains->return->new->CollectorImpl<>->else->finisher->downstream->finisher->apply->downstream->finisher->apply->new->Partition<>->return->new->CollectorImpl<>
Collectors#toMap(Function, Function):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements:::return->HashMap->new->uniqKeysMapAccumulator->uniqKeysMapMerger->new->CollectorImpl<>
Collectors#toUnmodifiableMap(Function, Function):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements:::Objects->requireNonNull->Objects->requireNonNull->return->toMap->Map->map->entrySet->new->Map.EntryArr->toArray->ofEntries->collectingAndThen
Collectors#toMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements:::return->HashMap->new->toMap
Collectors#toUnmodifiableMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->return->HashMap->new->toMap->Map->map->entrySet->new->Map.EntryArr->toArray->ofEntries->collectingAndThen
Collectors#toMap(Function, Function, BinaryOperator, Supplier):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements:::accumulator->map->keyMapper->apply->valueMapper->apply->merge->return->mapMerger->new->CollectorImpl<>
Collectors#toConcurrentMap(Function, Function):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements:::return->ConcurrentHashMap->new->uniqKeysMapAccumulator->uniqKeysMapMerger->new->CollectorImpl<>
Collectors#toConcurrentMap(Function, Function, BinaryOperator):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements:::return->ConcurrentHashMap->new->toConcurrentMap
Collectors#toConcurrentMap(Function, Function, BinaryOperator, Supplier):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements:::accumulator->map->keyMapper->apply->valueMapper->apply->merge->return->mapMerger->new->CollectorImpl<>
Collectors#summarizingInt(ToIntFunction):::Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.:::return->IntSummaryStatistics->new->r->mapper->applyAsInt->accept->l->combine->return->new->CollectorImpl<T,IntSummaryStatistics,IntSummaryStatistics>
Collectors#summarizingLong(ToLongFunction):::Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.:::return->LongSummaryStatistics->new->r->mapper->applyAsLong->accept->l->combine->return->new->CollectorImpl<T,LongSummaryStatistics,LongSummaryStatistics>
Collectors#summarizingDouble(ToDoubleFunction):::Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values.:::return->DoubleSummaryStatistics->new->r->mapper->applyAsDouble->accept->l->combine->return->new->CollectorImpl<T,DoubleSummaryStatistics,DoubleSummaryStatistics>
DistinctOps#makeRef(AbstractPipeline):::Appends a "distinct" operation to the provided stream, and returns the new stream.:::return->new->ReferencePipeline.StatefulOp<T,T>
DoubleStream#filter(DoublePredicate):::Returns a stream consisting of the elements of this stream that match the given predicate:::
DoubleStream#map(DoubleUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream:::
DoubleStream#mapToObj(DoubleFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream:::
DoubleStream#mapToInt(DoubleToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream:::
DoubleStream#mapToLong(DoubleToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream:::
DoubleStream#flatMap(DoubleFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
DoubleStream#distinct():::Returns a stream consisting of the distinct elements of this stream:::
DoubleStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order:::
DoubleStream#peek(DoubleConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream:::
DoubleStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length:::
DoubleStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream:::
DoubleStream#takeWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfDouble.Taking->isParallel->doubleStream->this->close->onClose
DoubleStream#dropWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfDouble.Dropping->isParallel->doubleStream->this->close->onClose
DoubleStream#forEach(DoubleConsumer):::Performs an action for each element of this stream:::
DoubleStream#forEachOrdered(DoubleConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order:::
DoubleStream#toArray():::Returns an array containing the elements of this stream:::
DoubleStream#reduce(double, DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value:::
DoubleStream#reduce(DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalDouble describing the reduced value, if any:::
DoubleStream#collect(Supplier, ObjDoubleConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream:::
DoubleStream#sum():::Returns the sum of elements in this stream:::
DoubleStream#min():::Returns an OptionalDouble describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty:::
DoubleStream#max():::Returns an OptionalDouble describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty:::
DoubleStream#count():::Returns the count of elements in this stream:::
DoubleStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty:::
DoubleStream#summaryStatistics():::Returns a DoubleSummaryStatistics describing various summary data about the elements of this stream:::
DoubleStream#anyMatch(DoublePredicate):::Returns whether any elements of this stream match the provided predicate:::
DoubleStream#allMatch(DoublePredicate):::Returns whether all elements of this stream match the provided predicate:::
DoubleStream#noneMatch(DoublePredicate):::Returns whether no elements of this stream match the provided predicate:::
DoubleStream#findFirst():::Returns an OptionalDouble describing the first element of this stream, or an empty OptionalDouble if the stream is empty:::
DoubleStream#findAny():::Returns an OptionalDouble describing some element of the stream, or an empty OptionalDouble if the stream is empty:::
DoubleStream#boxed():::Returns a Stream consisting of the elements of this stream, boxed to Double:::
DoubleStream#builder():::Returns a builder for a DoubleStream.:::return->new->Streams.DoubleStreamBuilderImpl
DoubleStream#empty():::Returns an empty sequential DoubleStream.:::return->StreamSupport->Spliterators->emptyDoubleSpliterator->doubleStream
DoubleStream#of(double):::Returns a sequential DoubleStream containing a single element.:::return->StreamSupport->new->Streams.DoubleStreamBuilderImpl->doubleStream
DoubleStream#of(double...):::Returns a sequential ordered stream whose elements are the specified values.:::return->Arrays->stream
DoubleStream#iterate(double, DoubleUnaryOperator):::Returns an infinite sequential ordered DoubleStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc:::Objects->requireNonNull->spliterator->new->Spliterators.AbstractDoubleSpliterator->return->StreamSupport->doubleStream
DoubleStream#iterate(double, DoublePredicate, DoubleUnaryOperator):::Returns a sequential ordered DoubleStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate:::Objects->requireNonNull->Objects->requireNonNull->spliterator->new->Spliterators.AbstractDoubleSpliterator->return->StreamSupport->doubleStream
DoubleStream#generate(DoubleSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided DoubleSupplier:::Objects->requireNonNull->return->StreamSupport->new->StreamSpliterators.InfiniteSupplyingSpliterator.OfDouble->doubleStream
DoubleStream#concat(DoubleStream, DoubleStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream:::Objects->requireNonNull->Objects->requireNonNull->split->a->spliterator->b->spliterator->new->Streams.ConcatSpliterator.OfDouble->stream->StreamSupport->a->isParallel->b->isParallel->doubleStream->return->stream->Streams->composedClose->onClose
DoubleStream.Builder#accept(double):::Adds an element to the stream being built.:::
DoubleStream.Builder#add(double):::Adds an element to the stream being built.:::accept->return
DoubleStream.Builder#build():::Builds the stream, transitioning this builder to the built state:::
FindOps#makeRef(boolean):::Constructs a TerminalOp for streams of objects.:::return
FindOps#makeInt(boolean):::Constructs a TerminalOp for streams of ints.:::return
FindOps#makeLong(boolean):::Constructs a TerminalOp for streams of longs.:::return
FindOps#makeDouble(boolean):::Constructs a FindOp for streams of doubles.:::return
ForEachOps#makeRef(Consumer, boolean):::Constructs a TerminalOp that perform an action for every element of a stream.:::Objects->requireNonNull->return->new->ForEachOp.OfRef<>
ForEachOps#makeInt(IntConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of an IntStream.:::Objects->requireNonNull->return->new->ForEachOp.OfInt
ForEachOps#makeLong(LongConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a LongStream.:::Objects->requireNonNull->return->new->ForEachOp.OfLong
ForEachOps#makeDouble(DoubleConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a DoubleStream.:::Objects->requireNonNull->return->new->ForEachOp.OfDouble
IntStream#filter(IntPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate:::
IntStream#map(IntUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream:::
IntStream#mapToObj(IntFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream:::
IntStream#mapToLong(IntToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream:::
IntStream#mapToDouble(IntToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream:::
IntStream#flatMap(IntFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
IntStream#distinct():::Returns a stream consisting of the distinct elements of this stream:::
IntStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order:::
IntStream#peek(IntConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream:::
IntStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length:::
IntStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream:::
IntStream#takeWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfInt.Taking->isParallel->intStream->this->close->onClose
IntStream#dropWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfInt.Dropping->isParallel->intStream->this->close->onClose
IntStream#forEach(IntConsumer):::Performs an action for each element of this stream:::
IntStream#forEachOrdered(IntConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order:::
IntStream#toArray():::Returns an array containing the elements of this stream:::
IntStream#reduce(int, IntBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value:::
IntStream#reduce(IntBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any:::
IntStream#collect(Supplier, ObjIntConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream:::
IntStream#sum():::Returns the sum of elements in this stream:::
IntStream#min():::Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty:::
IntStream#max():::Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty:::
IntStream#count():::Returns the count of elements in this stream:::
IntStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty:::
IntStream#summaryStatistics():::Returns an IntSummaryStatistics describing various summary data about the elements of this stream:::
IntStream#anyMatch(IntPredicate):::Returns whether any elements of this stream match the provided predicate:::
IntStream#allMatch(IntPredicate):::Returns whether all elements of this stream match the provided predicate:::
IntStream#noneMatch(IntPredicate):::Returns whether no elements of this stream match the provided predicate:::
IntStream#findFirst():::Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty:::
IntStream#findAny():::Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty:::
IntStream#asLongStream():::Returns a LongStream consisting of the elements of this stream, converted to long:::
IntStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double:::
IntStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to an Integer:::
IntStream#builder():::Returns a builder for an IntStream.:::return->new->Streams.IntStreamBuilderImpl
IntStream#empty():::Returns an empty sequential IntStream.:::return->StreamSupport->Spliterators->emptyIntSpliterator->intStream
IntStream#of(int):::Returns a sequential IntStream containing a single element.:::return->StreamSupport->new->Streams.IntStreamBuilderImpl->intStream
IntStream#of(int...):::Returns a sequential ordered stream whose elements are the specified values.:::return->Arrays->stream
IntStream#iterate(int, IntUnaryOperator):::Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc:::Objects->requireNonNull->spliterator->new->Spliterators.AbstractIntSpliterator->return->StreamSupport->intStream
IntStream#iterate(int, IntPredicate, IntUnaryOperator):::Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate:::Objects->requireNonNull->Objects->requireNonNull->spliterator->new->Spliterators.AbstractIntSpliterator->return->StreamSupport->intStream
IntStream#generate(IntSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier:::Objects->requireNonNull->return->StreamSupport->new->StreamSpliterators.InfiniteSupplyingSpliterator.OfInt->intStream
IntStream#range(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.:::if->return->empty->else->return->StreamSupport->new->Streams.RangeIntSpliterator->intStream
IntStream#rangeClosed(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.:::if->return->empty->else->return->StreamSupport->new->Streams.RangeIntSpliterator->intStream
IntStream#concat(IntStream, IntStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream:::Objects->requireNonNull->Objects->requireNonNull->split->a->spliterator->b->spliterator->new->Streams.ConcatSpliterator.OfInt->stream->StreamSupport->a->isParallel->b->isParallel->intStream->return->stream->Streams->composedClose->onClose
IntStream.Builder#accept(int):::Adds an element to the stream being built.:::
IntStream.Builder#add(int):::Adds an element to the stream being built.:::accept->return
IntStream.Builder#build():::Builds the stream, transitioning this builder to the built state:::
LongStream#filter(LongPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate:::
LongStream#map(LongUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream:::
LongStream#mapToObj(LongFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream:::
LongStream#mapToInt(LongToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream:::
LongStream#mapToDouble(LongToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream:::
LongStream#flatMap(LongFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
LongStream#distinct():::Returns a stream consisting of the distinct elements of this stream:::
LongStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order:::
LongStream#peek(LongConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream:::
LongStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length:::
LongStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream:::
LongStream#takeWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfLong.Taking->isParallel->longStream->this->close->onClose
LongStream#dropWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfLong.Dropping->isParallel->longStream->this->close->onClose
LongStream#forEach(LongConsumer):::Performs an action for each element of this stream:::
LongStream#forEachOrdered(LongConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order:::
LongStream#toArray():::Returns an array containing the elements of this stream:::
LongStream#reduce(long, LongBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value:::
LongStream#reduce(LongBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalLong describing the reduced value, if any:::
LongStream#collect(Supplier, ObjLongConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream:::
LongStream#sum():::Returns the sum of elements in this stream:::
LongStream#min():::Returns an OptionalLong describing the minimum element of this stream, or an empty optional if this stream is empty:::
LongStream#max():::Returns an OptionalLong describing the maximum element of this stream, or an empty optional if this stream is empty:::
LongStream#count():::Returns the count of elements in this stream:::
LongStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty:::
LongStream#summaryStatistics():::Returns a LongSummaryStatistics describing various summary data about the elements of this stream:::
LongStream#anyMatch(LongPredicate):::Returns whether any elements of this stream match the provided predicate:::
LongStream#allMatch(LongPredicate):::Returns whether all elements of this stream match the provided predicate:::
LongStream#noneMatch(LongPredicate):::Returns whether no elements of this stream match the provided predicate:::
LongStream#findFirst():::Returns an OptionalLong describing the first element of this stream, or an empty OptionalLong if the stream is empty:::
LongStream#findAny():::Returns an OptionalLong describing some element of the stream, or an empty OptionalLong if the stream is empty:::
LongStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double:::
LongStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to a Long:::
LongStream#builder():::Returns a builder for a LongStream.:::return->new->Streams.LongStreamBuilderImpl
LongStream#empty():::Returns an empty sequential LongStream.:::return->StreamSupport->Spliterators->emptyLongSpliterator->longStream
LongStream#of(long):::Returns a sequential LongStream containing a single element.:::return->StreamSupport->new->Streams.LongStreamBuilderImpl->longStream
LongStream#of(long...):::Returns a sequential ordered stream whose elements are the specified values.:::return->Arrays->stream
LongStream#iterate(long, LongUnaryOperator):::Returns an infinite sequential ordered LongStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc:::Objects->requireNonNull->spliterator->new->Spliterators.AbstractLongSpliterator->return->StreamSupport->longStream
LongStream#iterate(long, LongPredicate, LongUnaryOperator):::Returns a sequential ordered LongStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate:::Objects->requireNonNull->Objects->requireNonNull->spliterator->new->Spliterators.AbstractLongSpliterator->return->StreamSupport->longStream
LongStream#generate(LongSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided LongSupplier:::Objects->requireNonNull->return->StreamSupport->new->StreamSpliterators.InfiniteSupplyingSpliterator.OfLong->longStream
LongStream#range(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.:::if->return->empty->else->if->m->Long->divideUnsigned->return->range->range->concat->else->return->StreamSupport->new->Streams.RangeLongSpliterator->longStream
LongStream#rangeClosed(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.:::if->return->empty->else->if->m->Long->divideUnsigned->return->range->rangeClosed->concat->else->return->StreamSupport->new->Streams.RangeLongSpliterator->longStream
LongStream#concat(LongStream, LongStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream:::Objects->requireNonNull->Objects->requireNonNull->split->a->spliterator->b->spliterator->new->Streams.ConcatSpliterator.OfLong->stream->StreamSupport->a->isParallel->b->isParallel->longStream->return->stream->Streams->composedClose->onClose
LongStream.Builder#accept(long):::Adds an element to the stream being built.:::
LongStream.Builder#add(long):::Adds an element to the stream being built.:::accept->return
LongStream.Builder#build():::Builds the stream, transitioning this builder to the built state:::
MatchOps#makeRef(Predicate, MatchKind):::Constructs a quantified predicate matcher for a Stream.:::Objects->requireNonNull->Objects->requireNonNull->return->MatchSink->new->new->MatchOp<>
MatchOps#makeInt(IntPredicate, MatchKind):::Constructs a quantified predicate matcher for an IntStream.:::Objects->requireNonNull->Objects->requireNonNull->return->MatchSink->new->new->MatchOp<>
MatchOps#makeLong(LongPredicate, MatchKind):::Constructs a quantified predicate matcher for a LongStream.:::Objects->requireNonNull->Objects->requireNonNull->return->MatchSink->new->new->MatchOp<>
MatchOps#makeDouble(DoublePredicate, MatchKind):::Constructs a quantified predicate matcher for a DoubleStream.:::Objects->requireNonNull->Objects->requireNonNull->return->MatchSink->new->new->MatchOp<>
Node#spliterator():::Returns a Spliterator describing the elements contained in this Node.:::
Node#forEach(Consumer):::Traverses the elements of this node, and invoke the provided Consumer with each element:::
Node#getChildCount():::Returns the number of child nodes of this node.:::return
Node#getChild(int):::Retrieves the child Node at a given index.:::throw->new->IndexOutOfBoundsException
Node#truncate(long, long, IntFunction):::Return a node describing a subsequence of the elements of this node, starting at the given inclusive start offset and ending at the given exclusive end offset.:::if->count->return->spliterator->spliterator->size->nodeBuilder->Nodes->builder->nodeBuilder->begin->for->i->spliterator->tryAdvance->if->count->spliterator->forEachRemaining->else->for->i->spliterator->tryAdvance->nodeBuilder->end->return->nodeBuilder->build
Node#asArray(IntFunction):::Provides an array view of the contents of this node:::
Node#copyInto(T[], int):::Copies the content of this Node into an array, starting at a given offset into the array:::
Node#getShape():::Gets the StreamShape associated with this Node.:::return
Node#count():::Returns the number of elements contained in this node.:::
Node.Builder#build():::Builds the node:::
Node.OfPrimitive#forEach(T_CONS):::Traverses the elements of this node, and invoke the provided action with each element.:::
Node.OfPrimitive#asPrimitiveArray():::Views this node as a primitive array:::
Node.OfPrimitive#newArray(int):::Creates a new primitive array.:::
Node.OfPrimitive#copyInto(T_ARR, int):::Copies the content of this Node into a primitive array, starting at a given offset into the array:::
Nodes#emptyNode(StreamShape):::Produces an empty node whose count is zero, has no children and no content.:::switch->return->return->return->return->throw->new->IllegalStateException
Nodes#conc(StreamShape, Node, Node):::Produces a concatenated Node that has two or more children:::switch->return->new->ConcNode<>->return->new->ConcNode.OfInt->return->new->ConcNode.OfLong->return->new->ConcNode.OfDouble->throw->new->IllegalStateException
Nodes#node(T[]):::Produces a Node describing an array:::return->new->ArrayNode<>
Nodes#node(Collection):::Produces a Node describing a Collection:::return->new->CollectionNode<>
Nodes#builder(long, IntFunction):::Produces a Node.Builder.:::return->new->FixedNodeBuilder<>->builder
Nodes#builder():::Produces a variable size @{link Node.Builder}.:::return->new->SpinedNodeBuilder<>
Nodes#node(int[]):::Produces a Node.OfInt describing an int[] array:::return->new->IntArrayNode
Nodes#intBuilder(long):::Produces a Node.Builder.OfInt.:::return->new->IntFixedNodeBuilder->intBuilder
Nodes#intBuilder():::Produces a variable size @{link Node.Builder.OfInt}.:::return->new->IntSpinedNodeBuilder
Nodes#node(long[]):::Produces a Node.OfLong describing a long[] array:::return->new->LongArrayNode
Nodes#longBuilder(long):::Produces a Node.Builder.OfLong.:::return->new->LongFixedNodeBuilder->longBuilder
Nodes#longBuilder():::Produces a variable size @{link Node.Builder.OfLong}.:::return->new->LongSpinedNodeBuilder
Nodes#node(double[]):::Produces a Node.OfDouble describing a double[] array:::return->new->DoubleArrayNode
Nodes#doubleBuilder(long):::Produces a Node.Builder.OfDouble.:::return->new->DoubleFixedNodeBuilder->doubleBuilder
Nodes#doubleBuilder():::Produces a variable size @{link Node.Builder.OfDouble}.:::return->new->DoubleSpinedNodeBuilder
Nodes#collect(PipelineHelper, Spliterator, boolean, IntFunction):::Collect, in parallel, elements output from a pipeline and describe those elements with a Node.:::size->helper->exactOutputSizeIfKnown->if->spliterator->hasCharacteristics->if->throw->new->IllegalArgumentException->array->generator->apply->new->SizedCollectorTask.OfRef<>->invoke->return->node->else->node->new->CollectorTask.OfRef<>->invoke->return->flatten
Nodes#collectInt(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from an int-valued pipeline and describe those elements with a Node.OfInt.:::size->helper->exactOutputSizeIfKnown->if->spliterator->hasCharacteristics->if->throw->new->IllegalArgumentException->array->new->intArr->new->SizedCollectorTask.OfInt<>->invoke->return->node->else->node->new->CollectorTask.OfInt<>->invoke->return->flattenInt
Nodes#collectLong(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from a long-valued pipeline and describe those elements with a Node.OfLong.:::size->helper->exactOutputSizeIfKnown->if->spliterator->hasCharacteristics->if->throw->new->IllegalArgumentException->array->new->longArr->new->SizedCollectorTask.OfLong<>->invoke->return->node->else->node->new->CollectorTask.OfLong<>->invoke->return->flattenLong
Nodes#collectDouble(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from n double-valued pipeline and describe those elements with a Node.OfDouble.:::size->helper->exactOutputSizeIfKnown->if->spliterator->hasCharacteristics->if->throw->new->IllegalArgumentException->array->new->doubleArr->new->SizedCollectorTask.OfDouble<>->invoke->return->node->else->node->new->CollectorTask.OfDouble<>->invoke->return->flattenDouble
Nodes#flatten(Node, IntFunction):::Flatten, in parallel, a Node:::if->node->getChildCount->size->node->count->if->throw->new->IllegalArgumentException->array->generator->apply->new->ToArrayTask.OfRef<>->invoke->return->node->else->return
Nodes#flattenInt(Node.OfInt):::Flatten, in parallel, a Node.OfInt:::if->node->getChildCount->size->node->count->if->throw->new->IllegalArgumentException->array->new->intArr->new->ToArrayTask.OfInt->invoke->return->node->else->return
Nodes#flattenLong(Node.OfLong):::Flatten, in parallel, a Node.OfLong:::if->node->getChildCount->size->node->count->if->throw->new->IllegalArgumentException->array->new->longArr->new->ToArrayTask.OfLong->invoke->return->node->else->return
Nodes#flattenDouble(Node.OfDouble):::Flatten, in parallel, a Node.OfDouble:::if->node->getChildCount->size->node->count->if->throw->new->IllegalArgumentException->array->new->doubleArr->new->ToArrayTask.OfDouble->invoke->return->node->else->return
PipelineHelper#getSourceShape():::Gets the stream shape for the source of the pipeline segment.:::
PipelineHelper#getStreamAndOpFlags():::Gets the combined stream and operation flags for the output of the described pipeline:::
PipelineHelper#exactOutputSizeIfKnown(Spliterator):::Returns the exact output size of the portion of the output resulting from applying the pipeline stages described by this PipelineHelper to the portion of the input described by the provided Spliterator, if known:::
PipelineHelper#wrapAndCopyInto(S, Spliterator):::Applies the pipeline stages described by this PipelineHelper to the provided Spliterator and send the results to the provided Sink.:::
PipelineHelper#copyInto(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink:::
PipelineHelper#copyIntoWithCancel(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink, checking Sink#cancellationRequested() after each element, and stopping if cancellation is requested.:::
PipelineHelper#wrapSink(Sink):::Takes a Sink that accepts elements of the output type of the PipelineHelper, and wrap it with a Sink that accepts elements of the input type and implements all the intermediate operations described by this PipelineHelper, delivering the result into the provided Sink.:::
PipelineHelper#makeNodeBuilder(long, IntFunction):::Constructs a @{link Node.Builder} compatible with the output shape of this PipelineHelper.:::
PipelineHelper#evaluate(Spliterator, boolean, IntFunction):::Collects all output elements resulting from applying the pipeline stages to the source Spliterator into a Node.:::
ReduceOps#makeRef(U, BiFunction, BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values.:::Objects->requireNonNull->Objects->requireNonNull->return->new->ReduceOp<T,U,ReducingSink>
ReduceOps#makeRef(BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values producing an optional reference result.:::Objects->requireNonNull->return->new->ReduceOp<T,Optional<T>,ReducingSink>
ReduceOps#makeRef(Collector):::Constructs a TerminalOp that implements a mutable reduce on reference values.:::supplier->Objects->requireNonNull->supplier->accumulator->collector->accumulator->combiner->collector->combiner->return->new->ReduceOp<T,I,ReducingSink>
ReduceOps#makeRef(Supplier, BiConsumer, BiConsumer):::Constructs a TerminalOp that implements a mutable reduce on reference values.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->return->new->ReduceOp<T,R,ReducingSink>
ReduceOps#makeRefCounting():::Constructs a TerminalOp that counts the number of stream elements:::return->new->ReduceOp<T,Long,CountingSink<T>>
ReduceOps#makeInt(int, IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values.:::Objects->requireNonNull->return->new->ReduceOp<Integer,Integer,ReducingSink>
ReduceOps#makeInt(IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values, producing an optional integer result.:::Objects->requireNonNull->return->new->ReduceOp<Integer,OptionalInt,ReducingSink>
ReduceOps#makeInt(Supplier, ObjIntConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on int values.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->return->new->ReduceOp<Integer,R,ReducingSink>
ReduceOps#makeIntCounting():::Constructs a TerminalOp that counts the number of stream elements:::return->new->ReduceOp<Integer,Long,CountingSink<Integer>>
ReduceOps#makeLong(long, LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values.:::Objects->requireNonNull->return->new->ReduceOp<Long,Long,ReducingSink>
ReduceOps#makeLong(LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values, producing an optional long result.:::Objects->requireNonNull->return->new->ReduceOp<Long,OptionalLong,ReducingSink>
ReduceOps#makeLong(Supplier, ObjLongConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on long values.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->return->new->ReduceOp<Long,R,ReducingSink>
ReduceOps#makeLongCounting():::Constructs a TerminalOp that counts the number of stream elements:::return->new->ReduceOp<Long,Long,CountingSink<Long>>
ReduceOps#makeDouble(double, DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values.:::Objects->requireNonNull->return->new->ReduceOp<Double,Double,ReducingSink>
ReduceOps#makeDouble(DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values, producing an optional double result.:::Objects->requireNonNull->return->new->ReduceOp<Double,OptionalDouble,ReducingSink>
ReduceOps#makeDouble(Supplier, ObjDoubleConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on double values.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->return->new->ReduceOp<Double,R,ReducingSink>
ReduceOps#makeDoubleCounting():::Constructs a TerminalOp that counts the number of stream elements:::return->new->ReduceOp<Double,Long,CountingSink<Double>>
Sink#begin(long):::Resets the sink state to receive a fresh data set:::
Sink#end():::Indicates that all elements have been pushed:::
Sink#cancellationRequested():::Indicates that this Sink does not wish to receive any more data.:::return
Sink#accept(int):::Accepts an int value.:::throw->new->IllegalStateException
Sink#accept(long):::Accepts a long value.:::throw->new->IllegalStateException
Sink#accept(double):::Accepts a double value.:::throw->new->IllegalStateException
SliceOps#makeRef(AbstractPipeline, long, long):::Appends a "slice" operation to the provided stream:::if->throw->new->IllegalArgumentException->return->flags->new->ReferencePipeline.StatefulOp<T,T>
SliceOps#makeInt(AbstractPipeline, long, long):::Appends a "slice" operation to the provided IntStream:::if->throw->new->IllegalArgumentException->return->flags->new->IntPipeline.StatefulOp<Integer>
SliceOps#makeLong(AbstractPipeline, long, long):::Appends a "slice" operation to the provided LongStream:::if->throw->new->IllegalArgumentException->return->flags->new->LongPipeline.StatefulOp<Long>
SliceOps#makeDouble(AbstractPipeline, long, long):::Appends a "slice" operation to the provided DoubleStream:::if->throw->new->IllegalArgumentException->return->flags->new->DoublePipeline.StatefulOp<Double>
SortedOps#makeRef(AbstractPipeline):::Appends a "sorted" operation to the provided stream.:::return->new->OfRef<>
SortedOps#makeRef(AbstractPipeline, Comparator):::Appends a "sorted" operation to the provided stream.:::return->new->OfRef<>
SortedOps#makeInt(AbstractPipeline):::Appends a "sorted" operation to the provided stream.:::return->new->OfInt
SortedOps#makeLong(AbstractPipeline):::Appends a "sorted" operation to the provided stream.:::return->new->OfLong
SortedOps#makeDouble(AbstractPipeline):::Appends a "sorted" operation to the provided stream.:::return->new->OfDouble
SpinedBuffer#capacity():::Returns the current capacity of the buffer:::return
SpinedBuffer#ensureCapacity(long):::Ensure that the buffer has at least capacity to hold the target size:::capacity->capacity->if->inflateSpine->for->i
SpinedBuffer#increaseCapacity():::Force the buffer to increase its capacity.:::capacity->ensureCapacity
SpinedBuffer#get(long):::Retrieve the element at the specified index.:::if->if->return->else->throw->Long->toString->new->IndexOutOfBoundsException->if->count->throw->Long->toString->new->IndexOutOfBoundsException->for->j->throw->Long->toString->new->IndexOutOfBoundsException
SpinedBuffer#copyInto(E[], int):::Copy the elements, starting at the specified offset, into the specified array.:::finalOffset->count->if->throw->new->IndexOutOfBoundsException->if->System->arraycopy->else->for->i->if->System->arraycopy
SpinedBuffer#asArray(IntFunction):::Create a new array using the specified array factory, and copy the elements into it.:::size->count->if->throw->new->IllegalArgumentException->result->arrayFactory->apply->copyInto->return
SpinedBuffer#spliterator():::Return a Spliterator describing the contents of the buffer.:::return->new->Splitr
SpinedBuffer.OfPrimitive#newArrayArray(int):::Create a new array-of-array of the proper type and size:::
SpinedBuffer.OfPrimitive#newArray(int):::Create a new array of the proper type and size:::
SpinedBuffer.OfPrimitive#arrayLength(T_ARR):::Get the length of an array:::
SpinedBuffer.OfPrimitive#arrayForEach(T_ARR, int, int, T_CONS):::Iterate an array with the provided consumer:::
Stream#filter(Predicate):::Returns a stream consisting of the elements of this stream that match the given predicate:::
Stream#map(Function):::Returns a stream consisting of the results of applying the given function to the elements of this stream:::
Stream#mapToInt(ToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream:::
Stream#mapToLong(ToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream:::
Stream#mapToDouble(ToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream:::
Stream#flatMap(Function>):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
Stream#flatMapToInt(Function):::Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
Stream#flatMapToLong(Function):::Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
Stream#flatMapToDouble(Function):::Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element:::
Stream#distinct():::Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream:::
Stream#sorted():::Returns a stream consisting of the elements of this stream, sorted according to natural order:::
Stream#sorted(Comparator):::Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator:::
Stream#peek(Consumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream:::
Stream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length:::
Stream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream:::
Stream#takeWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfRef.Taking<>->isParallel->stream->this->close->onClose
Stream#dropWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate:::Objects->requireNonNull->return->StreamSupport->spliterator->new->WhileOps.UnorderedWhileSpliterator.OfRef.Dropping<>->isParallel->stream->this->close->onClose
Stream#forEach(Consumer):::Performs an action for each element of this stream:::
Stream#forEachOrdered(Consumer):::Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order:::
Stream#toArray():::Returns an array containing the elements of this stream:::
Stream#toArray(IntFunction):::Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing:::
Stream#reduce(T, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value:::
Stream#reduce(BinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any:::
Stream#reduce(U, BiFunction, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions:::
Stream#collect(Supplier, BiConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream:::
Stream#collect(Collector):::Performs a mutable reduction operation on the elements of this stream using a Collector:::
Stream#min(Comparator):::Returns the minimum element of this stream according to the provided Comparator:::
Stream#max(Comparator):::Returns the maximum element of this stream according to the provided Comparator:::
Stream#count():::Returns the count of elements in this stream:::
Stream#anyMatch(Predicate):::Returns whether any elements of this stream match the provided predicate:::
Stream#allMatch(Predicate):::Returns whether all elements of this stream match the provided predicate:::
Stream#noneMatch(Predicate):::Returns whether no elements of this stream match the provided predicate:::
Stream#findFirst():::Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty:::
Stream#findAny():::Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty:::
Stream#builder():::Returns a builder for a Stream.:::return->new->Streams.StreamBuilderImpl<>
Stream#empty():::Returns an empty sequential Stream.:::return->StreamSupport->Spliterators->emptySpliterator->stream
Stream#of(T):::Returns a sequential Stream containing a single element.:::return->StreamSupport->new->Streams.StreamBuilderImpl<>->stream
Stream#ofNullable(T):::Returns a sequential Stream containing a single element, if non-null, otherwise returns an empty Stream.:::return->Stream->empty->StreamSupport->new->Streams.StreamBuilderImpl<>->stream
Stream#of(T...):::Returns a sequential ordered stream whose elements are the specified values.:::return->Arrays->stream
Stream#iterate(T, UnaryOperator):::Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc:::Objects->requireNonNull->spliterator->new->Spliterators.AbstractSpliterator<>->return->StreamSupport->stream
Stream#iterate(T, Predicate, UnaryOperator):::Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate:::Objects->requireNonNull->Objects->requireNonNull->spliterator->new->Spliterators.AbstractSpliterator<>->return->StreamSupport->stream
Stream#generate(Supplier):::Returns an infinite sequential unordered stream where each element is generated by the provided Supplier:::Objects->requireNonNull->return->StreamSupport->new->StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>->stream
Stream#concat(Stream, Stream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream:::Objects->requireNonNull->Objects->requireNonNull->split->a->spliterator->b->spliterator->new->Streams.ConcatSpliterator.OfRef<>->stream->StreamSupport->a->isParallel->b->isParallel->stream->return->stream->Streams->composedClose->onClose
Stream.Builder#accept(T):::Adds an element to the stream being built.:::
Stream.Builder#add(T):::Adds an element to the stream being built.:::accept->return
Stream.Builder#build():::Builds the stream, transitioning this builder to the built state:::
Streams#composeWithExceptions(Runnable, Runnable):::Given two Runnables, return a Runnable that executes both in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.:::return->new->Runnable
Streams#composedClose(BaseStream, BaseStream):::Given two streams, return a Runnable that executes both of their BaseStream#close methods in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.:::return->new->Runnable
StreamSpliterators.UnorderedSliceSpliterator#acquirePermits(long):::Acquire permission to skip or process elements:::remainingPermits->grabbing->do->permits->get->if->return->Math->min->while->permits->compareAndSet->if->return->Math->max->else->if->return->Math->max->else->return
StreamSpliterators.UnorderedSliceSpliterator#permitStatus():::Call to check if permits might be available before acquiring data:::if->permits->get->return->else->return
StreamSupport#stream(Spliterator, boolean):::Creates a new sequential or parallel Stream from a Spliterator:::Objects->requireNonNull->return->StreamOpFlag->fromCharacteristics->new->ReferencePipeline.Head<>
StreamSupport#stream(Supplier>, int, boolean):::Creates a new sequential or parallel Stream from a Supplier of Spliterator:::Objects->requireNonNull->return->StreamOpFlag->fromCharacteristics->new->ReferencePipeline.Head<>
StreamSupport#intStream(Spliterator.OfInt, boolean):::Creates a new sequential or parallel IntStream from a Spliterator.OfInt:::return->StreamOpFlag->fromCharacteristics->new->IntPipeline.Head<>
StreamSupport#intStream(Supplier, int, boolean):::Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt:::return->StreamOpFlag->fromCharacteristics->new->IntPipeline.Head<>
StreamSupport#longStream(Spliterator.OfLong, boolean):::Creates a new sequential or parallel LongStream from a Spliterator.OfLong:::return->StreamOpFlag->fromCharacteristics->new->LongPipeline.Head<>
StreamSupport#longStream(Supplier, int, boolean):::Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong:::return->StreamOpFlag->fromCharacteristics->new->LongPipeline.Head<>
StreamSupport#doubleStream(Spliterator.OfDouble, boolean):::Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble:::return->StreamOpFlag->fromCharacteristics->new->DoublePipeline.Head<>
StreamSupport#doubleStream(Supplier, int, boolean):::Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble:::return->StreamOpFlag->fromCharacteristics->new->DoublePipeline.Head<>
TerminalOp#inputShape():::Gets the shape of the input type of this operation.:::return
TerminalOp#getOpFlags():::Gets the stream flags of the operation:::return
TerminalOp#evaluateParallel(PipelineHelper, Spliterator):::Performs a parallel evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.:::if->Tripwire->getClass->trip->return->evaluateSequential
TerminalOp#evaluateSequential(PipelineHelper, Spliterator):::Performs a sequential evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.:::
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message:::PlatformLogger->trippingClass->getName->getLogger->trippingClass->getName->warning
WhileOps#makeTakeWhileRef(AbstractPipeline, Predicate):::Appends a "takeWhile" operation to the provided Stream.:::Objects->requireNonNull->return->new->ReferencePipeline.StatefulOp<T,T>
WhileOps#makeTakeWhileInt(AbstractPipeline, IntPredicate):::Appends a "takeWhile" operation to the provided IntStream.:::Objects->requireNonNull->return->new->IntPipeline.StatefulOp<Integer>
WhileOps#makeTakeWhileLong(AbstractPipeline, LongPredicate):::Appends a "takeWhile" operation to the provided LongStream.:::Objects->requireNonNull->return->new->LongPipeline.StatefulOp<Long>
WhileOps#makeTakeWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "takeWhile" operation to the provided DoubleStream.:::Objects->requireNonNull->return->new->DoublePipeline.StatefulOp<Double>
WhileOps.DropWhileOp#opWrapSink(Sink, boolean):::Accepts a Sink which will receive the results of this dropWhile operation, and return a DropWhileSink which accepts elements and which performs the dropWhile operation passing the results to the provided Sink.:::
WhileOps#makeDropWhileRef(AbstractPipeline, Predicate):::Appends a "dropWhile" operation to the provided Stream.:::Objects->requireNonNull->return->new->Op
WhileOps#makeDropWhileInt(AbstractPipeline, IntPredicate):::Appends a "dropWhile" operation to the provided IntStream.:::Objects->requireNonNull->return->new->Op
WhileOps#makeDropWhileLong(AbstractPipeline, LongPredicate):::Appends a "dropWhile" operation to the provided LongStream.:::Objects->requireNonNull->return->new->Op
WhileOps#makeDropWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "dropWhile" operation to the provided DoubleStream.:::Objects->requireNonNull->return->new->Op

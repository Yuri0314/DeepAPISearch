AbstractPipeline#evaluate(TerminalOp):::Evaluate the pipeline with a terminal operation to produce a result.
AbstractPipeline#evaluateToArrayNode(IntFunction):::Collect the elements output from the pipeline stage.
AbstractPipeline#sourceStageSpliterator():::Gets the source stage spliterator if this pipeline stage is the source stage
AbstractPipeline#getStreamFlags():::Returns the composition of stream flags of the stream source and all intermediate operations.
AbstractPipeline#getOutputShape():::Get the output shape of the pipeline
AbstractPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction):::Collect elements output from a pipeline into a Node that holds elements of this shape.
AbstractPipeline#wrap(PipelineHelper, Supplier>, boolean):::Create a spliterator that wraps a source spliterator, compatible with this stream shape, and operations associated with a PipelineHelper.
AbstractPipeline#lazySpliterator(Supplier>):::Create a lazy spliterator that wraps and obtains the supplied the spliterator when a method is invoked on the lazy spliterator.
AbstractPipeline#forEachWithCancel(Spliterator, Sink):::Traverse the elements of a spliterator compatible with this stream shape, pushing those elements into a sink
AbstractPipeline#makeNodeBuilder(long, IntFunction):::Make a node builder compatible with this stream shape.
AbstractPipeline#opIsStateful():::Returns whether this operation is stateful or not
AbstractPipeline#opWrapSink(int, Sink):::Accepts a Sink which will receive the results of this operation, and return a Sink which accepts elements of the input type of this operation and which performs the operation, passing the results to the provided Sink.
AbstractPipeline#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction):::Performs a parallel evaluation of the operation using the specified PipelineHelper which describes the upstream intermediate operations
AbstractPipeline#opEvaluateParallelLazy(PipelineHelper, Spliterator):::Returns a Spliterator describing a parallel evaluation of the operation, using the specified PipelineHelper which describes the upstream intermediate operations
AbstractShortCircuitTask#getEmptyResult():::Returns the value indicating the computation completed with no task finding a short-circuitable result
AbstractShortCircuitTask#compute():::Overrides AbstractTask version to include checks for early exits while splitting or computing.
AbstractShortCircuitTask#shortCircuit(R):::Declares that a globally valid result has been found
AbstractShortCircuitTask#setLocalResult(R):::Sets a local result for this task
AbstractShortCircuitTask#getRawResult():::Retrieves the local result for this task
AbstractShortCircuitTask#getLocalResult():::Retrieves the local result for this task
AbstractShortCircuitTask#cancel():::Mark this task as canceled
AbstractShortCircuitTask#taskCanceled():::Queries whether this task is canceled
AbstractShortCircuitTask#cancelLaterNodes():::Cancels all tasks which succeed this one in the encounter order
AbstractSpinedBuffer#isEmpty():::Is the buffer currently empty?
AbstractSpinedBuffer#count():::How many elements are currently in the buffer?
AbstractSpinedBuffer#chunkSize(int):::How big should the nth chunk be?
AbstractSpinedBuffer#clear():::Remove all data from the buffer
AbstractTask#getLeafTarget():::Default target of leaf tasks for parallel decomposition
AbstractTask#makeChild(Spliterator):::Constructs a new node of type T whose parent is the receiver; must call the AbstractTask(T, Spliterator) constructor with the receiver and the provided Spliterator.
AbstractTask#doLeaf():::Computes the result associated with a leaf node
AbstractTask#suggestTargetSize(long):::Returns a suggested target leaf size based on the initial size estimate.
AbstractTask#getTargetSize(long):::Returns the targetSize, initializing it via the supplied size estimate if not already initialized.
AbstractTask#getRawResult():::Returns the local result, if any
AbstractTask#setRawResult(R):::Does nothing; instead, subclasses should use #setLocalResult(Object)} to manage results.
AbstractTask#getLocalResult():::Retrieves a result previously stored with #setLocalResult
AbstractTask#setLocalResult(R):::Associates the result with the task, can be retrieved with #getLocalResult
AbstractTask#isLeaf():::Indicates whether this task is a leaf node
AbstractTask#isRoot():::Indicates whether this task is the root node
AbstractTask#getParent():::Returns the parent of this task, or null if this task is the root
AbstractTask#compute():::Decides whether or not to split a task further or compute it directly
AbstractTask#isLeftmostNode():::Returns whether this node is a "leftmost" node -- whether the path from the root to this node involves only traversing leftmost child links
BaseStream#iterator():::Returns an iterator for the elements of this stream
BaseStream#spliterator():::Returns a spliterator for the elements of this stream
BaseStream#isParallel():::Returns whether this stream, if a terminal operation were to be executed, would execute in parallel
BaseStream#sequential():::Returns an equivalent stream that is sequential
BaseStream#parallel():::Returns an equivalent stream that is parallel
BaseStream#unordered():::Returns an equivalent stream that is unordered
BaseStream#onClose(Runnable):::Returns an equivalent stream with an additional close handler
BaseStream#close():::Closes this stream, causing all close handlers for this stream pipeline to be called.
Collector#supplier():::A function that creates and returns a new mutable result container.
Collector#accumulator():::A function that folds a value into a mutable result container.
Collector#combiner():::A function that accepts two partial results and merges them
Collector#finisher():::Perform the final transformation from the intermediate accumulation type A to the final result type R
Collector#characteristics():::Returns a Set of Collector.Characteristics indicating the characteristics of this Collector
Collector#of(Supplier, BiConsumer, BinaryOperator, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, and combiner functions
Collector#of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.
Collectors#toCollection(Supplier):::Returns a Collector that accumulates the input elements into a new Collection, in encounter order
Collectors#toList():::Returns a Collector that accumulates the input elements into a new List
Collectors#toUnmodifiableList():::Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order
Collectors#toSet():::Returns a Collector that accumulates the input elements into a new Set
Collectors#toUnmodifiableSet():::Returns a Collector that accumulates the input elements into an unmodifiable Set
Collectors#joining():::Returns a Collector that concatenates the input elements into a String, in encounter order.
Collectors#joining(CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order.
Collectors#joining(CharSequence, CharSequence, CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order.
Collectors#mapping(Function, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.
Collectors#flatMapping(Function>, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation
Collectors#filtering(Predicate, Collector):::Adapts a Collector to one accepting elements of the same type T by applying the predicate to each input element and only accumulating if the predicate returns true.
Collectors#collectingAndThen(Collector, Function):::Adapts a Collector to perform an additional finishing transformation
Collectors#counting():::Returns a Collector accepting elements of type T that counts the number of input elements
Collectors#minBy(Comparator):::Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.
Collectors#maxBy(Comparator):::Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.
Collectors#summingInt(ToIntFunction):::Returns a Collector that produces the sum of a integer-valued function applied to the input elements
Collectors#summingLong(ToLongFunction):::Returns a Collector that produces the sum of a long-valued function applied to the input elements
Collectors#summingDouble(ToDoubleFunction):::Returns a Collector that produces the sum of a double-valued function applied to the input elements
Collectors#sumWithCompensation(double[], double):::Incorporate a new double value using Kahan summation / compensation summation
Collectors#computeFinalSum(double[]):::If the compensated sum is spuriously NaN from accumulating one or more same-signed infinite values, return the correctly-signed infinity stored in the simple sum.
Collectors#averagingInt(ToIntFunction):::Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements
Collectors#averagingLong(ToLongFunction):::Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements
Collectors#averagingDouble(ToDoubleFunction):::Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements
Collectors#reducing(T, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.
Collectors#reducing(BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator
Collectors#reducing(U, Function, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator
Collectors#groupingBy(Function):::Returns a Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map
Collectors#groupingBy(Function, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingBy(Function, Supplier, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingByConcurrent(Function):::Returns a concurrent Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function
Collectors#groupingByConcurrent(Function, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingByConcurrent(Function, Supplier, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#partitioningBy(Predicate):::Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>
Collectors#partitioningBy(Predicate, Collector):::Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction
Collectors#toMap(Function, Function):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toUnmodifiableMap(Function, Function):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toUnmodifiableMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toMap(Function, Function, BinaryOperator, Supplier):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function, BinaryOperator):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function, BinaryOperator, Supplier):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#summarizingInt(ToIntFunction):::Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.
Collectors#summarizingLong(ToLongFunction):::Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.
Collectors#summarizingDouble(ToDoubleFunction):::Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values.
DistinctOps#makeRef(AbstractPipeline):::Appends a "distinct" operation to the provided stream, and returns the new stream.
DoubleStream#filter(DoublePredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
DoubleStream#map(DoubleUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToObj(DoubleFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToInt(DoubleToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToLong(DoubleToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
DoubleStream#flatMap(DoubleFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
DoubleStream#distinct():::Returns a stream consisting of the distinct elements of this stream
DoubleStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
DoubleStream#peek(DoubleConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
DoubleStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
DoubleStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
DoubleStream#takeWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
DoubleStream#dropWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
DoubleStream#forEach(DoubleConsumer):::Performs an action for each element of this stream
DoubleStream#forEachOrdered(DoubleConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
DoubleStream#toArray():::Returns an array containing the elements of this stream
DoubleStream#reduce(double, DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
DoubleStream#reduce(DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalDouble describing the reduced value, if any
DoubleStream#collect(Supplier, ObjDoubleConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
DoubleStream#sum():::Returns the sum of elements in this stream
DoubleStream#min():::Returns an OptionalDouble describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty
DoubleStream#max():::Returns an OptionalDouble describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty
DoubleStream#count():::Returns the count of elements in this stream
DoubleStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
DoubleStream#summaryStatistics():::Returns a DoubleSummaryStatistics describing various summary data about the elements of this stream
DoubleStream#anyMatch(DoublePredicate):::Returns whether any elements of this stream match the provided predicate
DoubleStream#allMatch(DoublePredicate):::Returns whether all elements of this stream match the provided predicate
DoubleStream#noneMatch(DoublePredicate):::Returns whether no elements of this stream match the provided predicate
DoubleStream#findFirst():::Returns an OptionalDouble describing the first element of this stream, or an empty OptionalDouble if the stream is empty
DoubleStream#findAny():::Returns an OptionalDouble describing some element of the stream, or an empty OptionalDouble if the stream is empty
DoubleStream#boxed():::Returns a Stream consisting of the elements of this stream, boxed to Double
DoubleStream#builder():::Returns a builder for a DoubleStream.
DoubleStream#empty():::Returns an empty sequential DoubleStream.
DoubleStream#of(double):::Returns a sequential DoubleStream containing a single element.
DoubleStream#of(double...):::Returns a sequential ordered stream whose elements are the specified values.
DoubleStream#iterate(double, DoubleUnaryOperator):::Returns an infinite sequential ordered DoubleStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
DoubleStream#iterate(double, DoublePredicate, DoubleUnaryOperator):::Returns a sequential ordered DoubleStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
DoubleStream#generate(DoubleSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided DoubleSupplier
DoubleStream#concat(DoubleStream, DoubleStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
DoubleStream.Builder#accept(double):::Adds an element to the stream being built.
DoubleStream.Builder#add(double):::Adds an element to the stream being built.
DoubleStream.Builder#build():::Builds the stream, transitioning this builder to the built state
FindOps#makeRef(boolean):::Constructs a TerminalOp for streams of objects.
FindOps#makeInt(boolean):::Constructs a TerminalOp for streams of ints.
FindOps#makeLong(boolean):::Constructs a TerminalOp for streams of longs.
FindOps#makeDouble(boolean):::Constructs a FindOp for streams of doubles.
ForEachOps#makeRef(Consumer, boolean):::Constructs a TerminalOp that perform an action for every element of a stream.
ForEachOps#makeInt(IntConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of an IntStream.
ForEachOps#makeLong(LongConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a LongStream.
ForEachOps#makeDouble(DoubleConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a DoubleStream.
IntStream#filter(IntPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
IntStream#map(IntUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToObj(IntFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToLong(IntToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToDouble(IntToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
IntStream#flatMap(IntFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
IntStream#distinct():::Returns a stream consisting of the distinct elements of this stream
IntStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
IntStream#peek(IntConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
IntStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
IntStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
IntStream#takeWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
IntStream#dropWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
IntStream#forEach(IntConsumer):::Performs an action for each element of this stream
IntStream#forEachOrdered(IntConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
IntStream#toArray():::Returns an array containing the elements of this stream
IntStream#reduce(int, IntBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
IntStream#reduce(IntBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any
IntStream#collect(Supplier, ObjIntConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
IntStream#sum():::Returns the sum of elements in this stream
IntStream#min():::Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty
IntStream#max():::Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty
IntStream#count():::Returns the count of elements in this stream
IntStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
IntStream#summaryStatistics():::Returns an IntSummaryStatistics describing various summary data about the elements of this stream
IntStream#anyMatch(IntPredicate):::Returns whether any elements of this stream match the provided predicate
IntStream#allMatch(IntPredicate):::Returns whether all elements of this stream match the provided predicate
IntStream#noneMatch(IntPredicate):::Returns whether no elements of this stream match the provided predicate
IntStream#findFirst():::Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty
IntStream#findAny():::Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty
IntStream#asLongStream():::Returns a LongStream consisting of the elements of this stream, converted to long
IntStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double
IntStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to an Integer
IntStream#builder():::Returns a builder for an IntStream.
IntStream#empty():::Returns an empty sequential IntStream.
IntStream#of(int):::Returns a sequential IntStream containing a single element.
IntStream#of(int...):::Returns a sequential ordered stream whose elements are the specified values.
IntStream#iterate(int, IntUnaryOperator):::Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
IntStream#iterate(int, IntPredicate, IntUnaryOperator):::Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
IntStream#generate(IntSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier
IntStream#range(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
IntStream#rangeClosed(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
IntStream#concat(IntStream, IntStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
IntStream.Builder#accept(int):::Adds an element to the stream being built.
IntStream.Builder#add(int):::Adds an element to the stream being built.
IntStream.Builder#build():::Builds the stream, transitioning this builder to the built state
LongStream#filter(LongPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
LongStream#map(LongUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToObj(LongFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToInt(LongToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToDouble(LongToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
LongStream#flatMap(LongFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
LongStream#distinct():::Returns a stream consisting of the distinct elements of this stream
LongStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
LongStream#peek(LongConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
LongStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
LongStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
LongStream#takeWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
LongStream#dropWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
LongStream#forEach(LongConsumer):::Performs an action for each element of this stream
LongStream#forEachOrdered(LongConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
LongStream#toArray():::Returns an array containing the elements of this stream
LongStream#reduce(long, LongBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
LongStream#reduce(LongBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalLong describing the reduced value, if any
LongStream#collect(Supplier, ObjLongConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
LongStream#sum():::Returns the sum of elements in this stream
LongStream#min():::Returns an OptionalLong describing the minimum element of this stream, or an empty optional if this stream is empty
LongStream#max():::Returns an OptionalLong describing the maximum element of this stream, or an empty optional if this stream is empty
LongStream#count():::Returns the count of elements in this stream
LongStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
LongStream#summaryStatistics():::Returns a LongSummaryStatistics describing various summary data about the elements of this stream
LongStream#anyMatch(LongPredicate):::Returns whether any elements of this stream match the provided predicate
LongStream#allMatch(LongPredicate):::Returns whether all elements of this stream match the provided predicate
LongStream#noneMatch(LongPredicate):::Returns whether no elements of this stream match the provided predicate
LongStream#findFirst():::Returns an OptionalLong describing the first element of this stream, or an empty OptionalLong if the stream is empty
LongStream#findAny():::Returns an OptionalLong describing some element of the stream, or an empty OptionalLong if the stream is empty
LongStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double
LongStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to a Long
LongStream#builder():::Returns a builder for a LongStream.
LongStream#empty():::Returns an empty sequential LongStream.
LongStream#of(long):::Returns a sequential LongStream containing a single element.
LongStream#of(long...):::Returns a sequential ordered stream whose elements are the specified values.
LongStream#iterate(long, LongUnaryOperator):::Returns an infinite sequential ordered LongStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
LongStream#iterate(long, LongPredicate, LongUnaryOperator):::Returns a sequential ordered LongStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
LongStream#generate(LongSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided LongSupplier
LongStream#range(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
LongStream#rangeClosed(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
LongStream#concat(LongStream, LongStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
LongStream.Builder#accept(long):::Adds an element to the stream being built.
LongStream.Builder#add(long):::Adds an element to the stream being built.
LongStream.Builder#build():::Builds the stream, transitioning this builder to the built state
MatchOps#makeRef(Predicate, MatchKind):::Constructs a quantified predicate matcher for a Stream.
MatchOps#makeInt(IntPredicate, MatchKind):::Constructs a quantified predicate matcher for an IntStream.
MatchOps#makeLong(LongPredicate, MatchKind):::Constructs a quantified predicate matcher for a LongStream.
MatchOps#makeDouble(DoublePredicate, MatchKind):::Constructs a quantified predicate matcher for a DoubleStream.
Node#spliterator():::Returns a Spliterator describing the elements contained in this Node.
Node#forEach(Consumer):::Traverses the elements of this node, and invoke the provided Consumer with each element
Node#getChildCount():::Returns the number of child nodes of this node.
Node#getChild(int):::Retrieves the child Node at a given index.
Node#truncate(long, long, IntFunction):::Return a node describing a subsequence of the elements of this node, starting at the given inclusive start offset and ending at the given exclusive end offset.
Node#asArray(IntFunction):::Provides an array view of the contents of this node
Node#copyInto(T[], int):::Copies the content of this Node into an array, starting at a given offset into the array
Node#getShape():::Gets the StreamShape associated with this Node.
Node#count():::Returns the number of elements contained in this node.
Node.Builder#build():::Builds the node
Node.OfPrimitive#forEach(T_CONS):::Traverses the elements of this node, and invoke the provided action with each element.
Node.OfPrimitive#asPrimitiveArray():::Views this node as a primitive array
Node.OfPrimitive#newArray(int):::Creates a new primitive array.
Node.OfPrimitive#copyInto(T_ARR, int):::Copies the content of this Node into a primitive array, starting at a given offset into the array
Nodes#emptyNode(StreamShape):::Produces an empty node whose count is zero, has no children and no content.
Nodes#conc(StreamShape, Node, Node):::Produces a concatenated Node that has two or more children
Nodes#node(T[]):::Produces a Node describing an array
Nodes#node(Collection):::Produces a Node describing a Collection
Nodes#builder(long, IntFunction):::Produces a Node.Builder.
Nodes#builder():::Produces a variable size @{link Node.Builder}.
Nodes#node(int[]):::Produces a Node.OfInt describing an int[] array
Nodes#intBuilder(long):::Produces a Node.Builder.OfInt.
Nodes#intBuilder():::Produces a variable size @{link Node.Builder.OfInt}.
Nodes#node(long[]):::Produces a Node.OfLong describing a long[] array
Nodes#longBuilder(long):::Produces a Node.Builder.OfLong.
Nodes#longBuilder():::Produces a variable size @{link Node.Builder.OfLong}.
Nodes#node(double[]):::Produces a Node.OfDouble describing a double[] array
Nodes#doubleBuilder(long):::Produces a Node.Builder.OfDouble.
Nodes#doubleBuilder():::Produces a variable size @{link Node.Builder.OfDouble}.
Nodes#collect(PipelineHelper, Spliterator, boolean, IntFunction):::Collect, in parallel, elements output from a pipeline and describe those elements with a Node.
Nodes#collectInt(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from an int-valued pipeline and describe those elements with a Node.OfInt.
Nodes#collectLong(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from a long-valued pipeline and describe those elements with a Node.OfLong.
Nodes#collectDouble(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from n double-valued pipeline and describe those elements with a Node.OfDouble.
Nodes#flatten(Node, IntFunction):::Flatten, in parallel, a Node
Nodes#flattenInt(Node.OfInt):::Flatten, in parallel, a Node.OfInt
Nodes#flattenLong(Node.OfLong):::Flatten, in parallel, a Node.OfLong
Nodes#flattenDouble(Node.OfDouble):::Flatten, in parallel, a Node.OfDouble
PipelineHelper#getSourceShape():::Gets the stream shape for the source of the pipeline segment.
PipelineHelper#getStreamAndOpFlags():::Gets the combined stream and operation flags for the output of the described pipeline
PipelineHelper#exactOutputSizeIfKnown(Spliterator):::Returns the exact output size of the portion of the output resulting from applying the pipeline stages described by this PipelineHelper to the portion of the input described by the provided Spliterator, if known
PipelineHelper#wrapAndCopyInto(S, Spliterator):::Applies the pipeline stages described by this PipelineHelper to the provided Spliterator and send the results to the provided Sink.
PipelineHelper#copyInto(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink
PipelineHelper#copyIntoWithCancel(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink, checking Sink#cancellationRequested() after each element, and stopping if cancellation is requested.
PipelineHelper#wrapSink(Sink):::Takes a Sink that accepts elements of the output type of the PipelineHelper, and wrap it with a Sink that accepts elements of the input type and implements all the intermediate operations described by this PipelineHelper, delivering the result into the provided Sink.
PipelineHelper#makeNodeBuilder(long, IntFunction):::Constructs a @{link Node.Builder} compatible with the output shape of this PipelineHelper.
PipelineHelper#evaluate(Spliterator, boolean, IntFunction):::Collects all output elements resulting from applying the pipeline stages to the source Spliterator into a Node.
ReduceOps#makeRef(U, BiFunction, BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values.
ReduceOps#makeRef(BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values producing an optional reference result.
ReduceOps#makeRef(Collector):::Constructs a TerminalOp that implements a mutable reduce on reference values.
ReduceOps#makeRef(Supplier, BiConsumer, BiConsumer):::Constructs a TerminalOp that implements a mutable reduce on reference values.
ReduceOps#makeRefCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeInt(int, IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values.
ReduceOps#makeInt(IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values, producing an optional integer result.
ReduceOps#makeInt(Supplier, ObjIntConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on int values.
ReduceOps#makeIntCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeLong(long, LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values.
ReduceOps#makeLong(LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values, producing an optional long result.
ReduceOps#makeLong(Supplier, ObjLongConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on long values.
ReduceOps#makeLongCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeDouble(double, DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values.
ReduceOps#makeDouble(DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values, producing an optional double result.
ReduceOps#makeDouble(Supplier, ObjDoubleConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on double values.
ReduceOps#makeDoubleCounting():::Constructs a TerminalOp that counts the number of stream elements
Sink#begin(long):::Resets the sink state to receive a fresh data set
Sink#end():::Indicates that all elements have been pushed
Sink#cancellationRequested():::Indicates that this Sink does not wish to receive any more data.
Sink#accept(int):::Accepts an int value.
Sink#accept(long):::Accepts a long value.
Sink#accept(double):::Accepts a double value.
SliceOps#makeRef(AbstractPipeline, long, long):::Appends a "slice" operation to the provided stream
SliceOps#makeInt(AbstractPipeline, long, long):::Appends a "slice" operation to the provided IntStream
SliceOps#makeLong(AbstractPipeline, long, long):::Appends a "slice" operation to the provided LongStream
SliceOps#makeDouble(AbstractPipeline, long, long):::Appends a "slice" operation to the provided DoubleStream
SortedOps#makeRef(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeRef(AbstractPipeline, Comparator):::Appends a "sorted" operation to the provided stream.
SortedOps#makeInt(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeLong(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeDouble(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SpinedBuffer#capacity():::Returns the current capacity of the buffer
SpinedBuffer#ensureCapacity(long):::Ensure that the buffer has at least capacity to hold the target size
SpinedBuffer#increaseCapacity():::Force the buffer to increase its capacity.
SpinedBuffer#get(long):::Retrieve the element at the specified index.
SpinedBuffer#copyInto(E[], int):::Copy the elements, starting at the specified offset, into the specified array.
SpinedBuffer#asArray(IntFunction):::Create a new array using the specified array factory, and copy the elements into it.
SpinedBuffer#spliterator():::Return a Spliterator describing the contents of the buffer.
SpinedBuffer.OfPrimitive#newArrayArray(int):::Create a new array-of-array of the proper type and size
SpinedBuffer.OfPrimitive#newArray(int):::Create a new array of the proper type and size
SpinedBuffer.OfPrimitive#arrayLength(T_ARR):::Get the length of an array
SpinedBuffer.OfPrimitive#arrayForEach(T_ARR, int, int, T_CONS):::Iterate an array with the provided consumer
Stream#filter(Predicate):::Returns a stream consisting of the elements of this stream that match the given predicate
Stream#map(Function):::Returns a stream consisting of the results of applying the given function to the elements of this stream
Stream#mapToInt(ToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
Stream#mapToLong(ToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
Stream#mapToDouble(ToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
Stream#flatMap(Function>):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToInt(Function):::Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToLong(Function):::Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToDouble(Function):::Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#distinct():::Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream
Stream#sorted():::Returns a stream consisting of the elements of this stream, sorted according to natural order
Stream#sorted(Comparator):::Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator
Stream#peek(Consumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Stream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
Stream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
Stream#takeWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
Stream#dropWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
Stream#forEach(Consumer):::Performs an action for each element of this stream
Stream#forEachOrdered(Consumer):::Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order
Stream#toArray():::Returns an array containing the elements of this stream
Stream#toArray(IntFunction):::Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing
Stream#reduce(T, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
Stream#reduce(BinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any
Stream#reduce(U, BiFunction, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions
Stream#collect(Supplier, BiConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
Stream#collect(Collector):::Performs a mutable reduction operation on the elements of this stream using a Collector
Stream#min(Comparator):::Returns the minimum element of this stream according to the provided Comparator
Stream#max(Comparator):::Returns the maximum element of this stream according to the provided Comparator
Stream#count():::Returns the count of elements in this stream
Stream#anyMatch(Predicate):::Returns whether any elements of this stream match the provided predicate
Stream#allMatch(Predicate):::Returns whether all elements of this stream match the provided predicate
Stream#noneMatch(Predicate):::Returns whether no elements of this stream match the provided predicate
Stream#findFirst():::Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty
Stream#findAny():::Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty
Stream#builder():::Returns a builder for a Stream.
Stream#empty():::Returns an empty sequential Stream.
Stream#of(T):::Returns a sequential Stream containing a single element.
Stream#ofNullable(T):::Returns a sequential Stream containing a single element, if non-null, otherwise returns an empty Stream.
Stream#of(T...):::Returns a sequential ordered stream whose elements are the specified values.
Stream#iterate(T, UnaryOperator):::Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
Stream#iterate(T, Predicate, UnaryOperator):::Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
Stream#generate(Supplier):::Returns an infinite sequential unordered stream where each element is generated by the provided Supplier
Stream#concat(Stream, Stream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Stream.Builder#accept(T):::Adds an element to the stream being built.
Stream.Builder#add(T):::Adds an element to the stream being built.
Stream.Builder#build():::Builds the stream, transitioning this builder to the built state
Streams#composeWithExceptions(Runnable, Runnable):::Given two Runnables, return a Runnable that executes both in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
Streams#composedClose(BaseStream, BaseStream):::Given two streams, return a Runnable that executes both of their BaseStream#close methods in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
StreamSpliterators.UnorderedSliceSpliterator#acquirePermits(long):::Acquire permission to skip or process elements
StreamSpliterators.UnorderedSliceSpliterator#permitStatus():::Call to check if permits might be available before acquiring data
StreamSupport#stream(Spliterator, boolean):::Creates a new sequential or parallel Stream from a Spliterator
StreamSupport#stream(Supplier>, int, boolean):::Creates a new sequential or parallel Stream from a Supplier of Spliterator
StreamSupport#intStream(Spliterator.OfInt, boolean):::Creates a new sequential or parallel IntStream from a Spliterator.OfInt
StreamSupport#intStream(Supplier, int, boolean):::Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt
StreamSupport#longStream(Spliterator.OfLong, boolean):::Creates a new sequential or parallel LongStream from a Spliterator.OfLong
StreamSupport#longStream(Supplier, int, boolean):::Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong
StreamSupport#doubleStream(Spliterator.OfDouble, boolean):::Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble
StreamSupport#doubleStream(Supplier, int, boolean):::Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble
TerminalOp#inputShape():::Gets the shape of the input type of this operation.
TerminalOp#getOpFlags():::Gets the stream flags of the operation
TerminalOp#evaluateParallel(PipelineHelper, Spliterator):::Performs a parallel evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
TerminalOp#evaluateSequential(PipelineHelper, Spliterator):::Performs a sequential evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
WhileOps#makeTakeWhileRef(AbstractPipeline, Predicate):::Appends a "takeWhile" operation to the provided Stream.
WhileOps#makeTakeWhileInt(AbstractPipeline, IntPredicate):::Appends a "takeWhile" operation to the provided IntStream.
WhileOps#makeTakeWhileLong(AbstractPipeline, LongPredicate):::Appends a "takeWhile" operation to the provided LongStream.
WhileOps#makeTakeWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "takeWhile" operation to the provided DoubleStream.
WhileOps.DropWhileOp#opWrapSink(Sink, boolean):::Accepts a Sink which will receive the results of this dropWhile operation, and return a DropWhileSink which accepts elements and which performs the dropWhile operation passing the results to the provided Sink.
WhileOps#makeDropWhileRef(AbstractPipeline, Predicate):::Appends a "dropWhile" operation to the provided Stream.
WhileOps#makeDropWhileInt(AbstractPipeline, IntPredicate):::Appends a "dropWhile" operation to the provided IntStream.
WhileOps#makeDropWhileLong(AbstractPipeline, LongPredicate):::Appends a "dropWhile" operation to the provided LongStream.
WhileOps#makeDropWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "dropWhile" operation to the provided DoubleStream.

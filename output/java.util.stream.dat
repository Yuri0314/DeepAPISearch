java.util.stream.AbstractPipeline#evaluate(TerminalOp)->R:::Evaluate the pipeline with a terminal operation to produce a result.
java.util.stream.AbstractPipeline#evaluateToArrayNode(IntFunction)->Node:::Collect the elements output from the pipeline stage.
java.util.stream.AbstractPipeline#sourceStageSpliterator()->Spliterator:::Gets the source stage spliterator if this pipeline stage is the source stage
java.util.stream.AbstractPipeline#sequential()->S::: abstract pipeline sequential
java.util.stream.AbstractPipeline#parallel()->S::: abstract pipeline parallel
java.util.stream.AbstractPipeline#close()->void::: abstract pipeline close
java.util.stream.AbstractPipeline#onClose(Runnable)->S::: abstract pipeline on close
java.util.stream.AbstractPipeline#spliterator()->Spliterator::: abstract pipeline spliterator
java.util.stream.AbstractPipeline#isParallel()->boolean::: abstract pipeline is parallel
java.util.stream.AbstractPipeline#getStreamFlags()->int:::Returns the composition of stream flags of the stream source and all intermediate operations.
java.util.stream.AbstractPipeline#getSourceShape()->StreamShape::: abstract pipeline get source shape
java.util.stream.AbstractPipeline#exactOutputSizeIfKnown(Spliterator)->long::: abstract pipeline exact output size if known
java.util.stream.AbstractPipeline#wrapAndCopyInto(S, Spliterator)->S::: abstract pipeline wrap and copy into
java.util.stream.AbstractPipeline#copyInto(Sink, Spliterator)->void::: abstract pipeline copy into
java.util.stream.AbstractPipeline#copyIntoWithCancel(Sink, Spliterator)->boolean::: abstract pipeline copy into with cancel
java.util.stream.AbstractPipeline#getStreamAndOpFlags()->int::: abstract pipeline get stream and op flags
java.util.stream.AbstractPipeline#isOrdered()->boolean::: abstract pipeline is ordered
java.util.stream.AbstractPipeline#wrapSink(Sink)->Sink::: abstract pipeline wrap sink
java.util.stream.AbstractPipeline#wrapSpliterator(Spliterator)->Spliterator::: abstract pipeline wrap spliterator
java.util.stream.AbstractPipeline#evaluate(Spliterator, boolean, IntFunction)->Node::: abstract pipeline evaluate
java.util.stream.AbstractPipeline#getOutputShape()->StreamShape:::Get the output shape of the pipeline
java.util.stream.AbstractPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction)->Node:::Collect elements output from a pipeline into a Node that holds elements of this shape.
java.util.stream.AbstractPipeline#wrap(PipelineHelper, Supplier>, boolean)->Spliterator:::Create a spliterator that wraps a source spliterator, compatible with this stream shape, and operations associated with a PipelineHelper.
java.util.stream.AbstractPipeline#lazySpliterator(Supplier>)->Spliterator:::Create a lazy spliterator that wraps and obtains the supplied the spliterator when a method is invoked on the lazy spliterator.
java.util.stream.AbstractPipeline#forEachWithCancel(Spliterator, Sink)->boolean:::Traverse the elements of a spliterator compatible with this stream shape, pushing those elements into a sink
java.util.stream.AbstractPipeline#makeNodeBuilder(long, IntFunction)->Node.Builder:::Make a node builder compatible with this stream shape.
java.util.stream.AbstractPipeline#opIsStateful()->boolean:::Returns whether this operation is stateful or not
java.util.stream.AbstractPipeline#opWrapSink(int, Sink)->Sink:::Accepts a Sink which will receive the results of this operation, and return a Sink which accepts elements of the input type of this operation and which performs the operation, passing the results to the provided Sink.
java.util.stream.AbstractPipeline#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction)->Node:::Performs a parallel evaluation of the operation using the specified PipelineHelper which describes the upstream intermediate operations
java.util.stream.AbstractPipeline#opEvaluateParallelLazy(PipelineHelper, Spliterator)->Spliterator:::Returns a Spliterator describing a parallel evaluation of the operation, using the specified PipelineHelper which describes the upstream intermediate operations
java.util.stream.AbstractShortCircuitTask#getEmptyResult()->R:::Returns the value indicating the computation completed with no task finding a short-circuitable result
java.util.stream.AbstractShortCircuitTask#compute()->void:::Overrides AbstractTask version to include checks for early exits while splitting or computing.
java.util.stream.AbstractShortCircuitTask#shortCircuit(R)->void:::Declares that a globally valid result has been found
java.util.stream.AbstractShortCircuitTask#setLocalResult(R)->void:::Sets a local result for this task
java.util.stream.AbstractShortCircuitTask#getRawResult()->R:::Retrieves the local result for this task
java.util.stream.AbstractShortCircuitTask#getLocalResult()->R:::Retrieves the local result for this task
java.util.stream.AbstractShortCircuitTask#cancel()->void:::Mark this task as canceled
java.util.stream.AbstractShortCircuitTask#taskCanceled()->boolean:::Queries whether this task is canceled
java.util.stream.AbstractShortCircuitTask#cancelLaterNodes()->void:::Cancels all tasks which succeed this one in the encounter order
java.util.stream.AbstractSpinedBuffer#isEmpty()->boolean:::Is the buffer currently empty?
java.util.stream.AbstractSpinedBuffer#count()->long:::How many elements are currently in the buffer?
java.util.stream.AbstractSpinedBuffer#chunkSize(int)->int:::How big should the nth chunk be?
java.util.stream.AbstractSpinedBuffer#clear()->void:::Remove all data from the buffer
java.util.stream.AbstractTask#getLeafTarget()->int:::Default target of leaf tasks for parallel decomposition
java.util.stream.AbstractTask#makeChild(Spliterator)->K:::Constructs a new node of type T whose parent is the receiver; must call the AbstractTask(T, Spliterator) constructor with the receiver and the provided Spliterator.
java.util.stream.AbstractTask#doLeaf()->R:::Computes the result associated with a leaf node
java.util.stream.AbstractTask#suggestTargetSize(long)->long:::Returns a suggested target leaf size based on the initial size estimate.
java.util.stream.AbstractTask#getTargetSize(long)->long:::Returns the targetSize, initializing it via the supplied size estimate if not already initialized.
java.util.stream.AbstractTask#getRawResult()->R:::Returns the local result, if any
java.util.stream.AbstractTask#setRawResult(R)->void:::Does nothing; instead, subclasses should use #setLocalResult(Object)} to manage results.
java.util.stream.AbstractTask#getLocalResult()->R:::Retrieves a result previously stored with #setLocalResult
java.util.stream.AbstractTask#setLocalResult(R)->void:::Associates the result with the task, can be retrieved with #getLocalResult
java.util.stream.AbstractTask#isLeaf()->boolean:::Indicates whether this task is a leaf node
java.util.stream.AbstractTask#isRoot()->boolean:::Indicates whether this task is the root node
java.util.stream.AbstractTask#getParent()->K:::Returns the parent of this task, or null if this task is the root
java.util.stream.AbstractTask#compute()->void:::Decides whether or not to split a task further or compute it directly
java.util.stream.AbstractTask#onCompletion(CountedCompleter)->void::: abstract task on completion
java.util.stream.AbstractTask#isLeftmostNode()->boolean:::Returns whether this node is a "leftmost" node -- whether the path from the root to this node involves only traversing leftmost child links
java.util.stream.BaseStream#iterator()->Iterator:::Returns an iterator for the elements of this stream
java.util.stream.BaseStream#spliterator()->Spliterator:::Returns a spliterator for the elements of this stream
java.util.stream.BaseStream#isParallel()->boolean:::Returns whether this stream, if a terminal operation were to be executed, would execute in parallel
java.util.stream.BaseStream#sequential()->S:::Returns an equivalent stream that is sequential
java.util.stream.BaseStream#parallel()->S:::Returns an equivalent stream that is parallel
java.util.stream.BaseStream#unordered()->S:::Returns an equivalent stream that is unordered
java.util.stream.BaseStream#onClose(Runnable)->S:::Returns an equivalent stream with an additional close handler
java.util.stream.BaseStream#close()->void:::Closes this stream, causing all close handlers for this stream pipeline to be called.
java.util.stream.Collector#supplier()->Supplier:::A function that creates and returns a new mutable result container.
java.util.stream.Collector#accumulator()->BiConsumer:::A function that folds a value into a mutable result container.
java.util.stream.Collector#combiner()->BinaryOperator:::A function that accepts two partial results and merges them
java.util.stream.Collector#finisher()->Function:::Perform the final transformation from the intermediate accumulation type A to the final result type R
java.util.stream.Collector#characteristics()->Set:::Returns a Set of Collector.Characteristics indicating the characteristics of this Collector
java.util.stream.Collector#of(Supplier, BiConsumer, BinaryOperator, Characteristics...)->Collector:::Returns a new Collector described by the given supplier, accumulator, and combiner functions
java.util.stream.Collector#of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...)->Collector:::Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.
java.util.stream.Collectors.CollectorImpl#accumulator()->BiConsumer::: collector impl accumulator
java.util.stream.Collectors.CollectorImpl#supplier()->Supplier::: collector impl supplier
java.util.stream.Collectors.CollectorImpl#combiner()->BinaryOperator::: collector impl combiner
java.util.stream.Collectors.CollectorImpl#finisher()->Function::: collector impl finisher
java.util.stream.Collectors.CollectorImpl#characteristics()->Set::: collector impl characteristics
java.util.stream.Collectors#toCollection(Supplier)->Collector:::Returns a Collector that accumulates the input elements into a new Collection, in encounter order
java.util.stream.Collectors#toList()->Collector>:::Returns a Collector that accumulates the input elements into a new List
java.util.stream.Collectors#toUnmodifiableList()->Collector>:::Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order
java.util.stream.Collectors#toSet()->Collector>:::Returns a Collector that accumulates the input elements into a new Set
java.util.stream.Collectors#toUnmodifiableSet()->Collector>:::Returns a Collector that accumulates the input elements into an unmodifiable Set
java.util.stream.Collectors#joining()->Collector:::Returns a Collector that concatenates the input elements into a String, in encounter order.
java.util.stream.Collectors#joining(CharSequence)->Collector:::Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order.
java.util.stream.Collectors#joining(CharSequence, CharSequence, CharSequence)->Collector:::Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order.
java.util.stream.Collectors#mapping(Function, Collector)->Collector:::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.
java.util.stream.Collectors#flatMapping(Function>, Collector)->Collector:::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation
java.util.stream.Collectors#filtering(Predicate, Collector)->Collector:::Adapts a Collector to one accepting elements of the same type T by applying the predicate to each input element and only accumulating if the predicate returns true.
java.util.stream.Collectors#collectingAndThen(Collector, Function)->Collector:::Adapts a Collector to perform an additional finishing transformation
java.util.stream.Collectors#counting()->Collector:::Returns a Collector accepting elements of type T that counts the number of input elements
java.util.stream.Collectors#minBy(Comparator)->Collector>:::Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.
java.util.stream.Collectors#maxBy(Comparator)->Collector>:::Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.
java.util.stream.Collectors#summingInt(ToIntFunction)->Collector:::Returns a Collector that produces the sum of a integer-valued function applied to the input elements
java.util.stream.Collectors#summingLong(ToLongFunction)->Collector:::Returns a Collector that produces the sum of a long-valued function applied to the input elements
java.util.stream.Collectors#summingDouble(ToDoubleFunction)->Collector:::Returns a Collector that produces the sum of a double-valued function applied to the input elements
java.util.stream.Collectors#sumWithCompensation(double[], double)->double[]:::Incorporate a new double value using Kahan summation / compensation summation
java.util.stream.Collectors#computeFinalSum(double[])->double:::If the compensated sum is spuriously NaN from accumulating one or more same-signed infinite values, return the correctly-signed infinity stored in the simple sum.
java.util.stream.Collectors#averagingInt(ToIntFunction)->Collector:::Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements
java.util.stream.Collectors#averagingLong(ToLongFunction)->Collector:::Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements
java.util.stream.Collectors#averagingDouble(ToDoubleFunction)->Collector:::Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements
java.util.stream.Collectors#reducing(T, BinaryOperator)->Collector:::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.
java.util.stream.Collectors#reducing(BinaryOperator)->Collector>:::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator
java.util.stream.Collectors#reducing(U, Function, BinaryOperator)->Collector:::Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator
java.util.stream.Collectors#groupingBy(Function)->Collector>>:::Returns a Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map
java.util.stream.Collectors#groupingBy(Function, Collector)->Collector>:::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
java.util.stream.Collectors#groupingBy(Function, Supplier, Collector)->Collector:::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
java.util.stream.Collectors#groupingByConcurrent(Function)->Collector>>:::Returns a concurrent Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function
java.util.stream.Collectors#groupingByConcurrent(Function, Collector)->Collector>:::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
java.util.stream.Collectors#groupingByConcurrent(Function, Supplier, Collector)->Collector:::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
java.util.stream.Collectors#partitioningBy(Predicate)->Collector>>:::Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>
java.util.stream.Collectors#partitioningBy(Predicate, Collector)->Collector>:::Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction
java.util.stream.Collectors#toMap(Function, Function)->Collector>:::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toUnmodifiableMap(Function, Function)->Collector>:::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toMap(Function, Function, BinaryOperator)->Collector>:::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toUnmodifiableMap(Function, Function, BinaryOperator)->Collector>:::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toMap(Function, Function, BinaryOperator, Supplier)->Collector:::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toConcurrentMap(Function, Function)->Collector>:::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toConcurrentMap(Function, Function, BinaryOperator)->Collector>:::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#toConcurrentMap(Function, Function, BinaryOperator, Supplier)->Collector:::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
java.util.stream.Collectors#summarizingInt(ToIntFunction)->Collector:::Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.
java.util.stream.Collectors#summarizingLong(ToLongFunction)->Collector:::Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.
java.util.stream.Collectors#summarizingDouble(ToDoubleFunction)->Collector:::Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values.
java.util.stream.DistinctOps#makeRef(AbstractPipeline)->ReferencePipeline:::Appends a "distinct" operation to the provided stream, and returns the new stream.
java.util.stream.DoublePipeline#getOutputShape()->StreamShape::: double pipeline get output shape
java.util.stream.DoublePipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction)->Node::: double pipeline evaluate to node
java.util.stream.DoublePipeline#wrap(PipelineHelper, Supplier>, boolean)->Spliterator::: double pipeline wrap
java.util.stream.DoublePipeline#lazySpliterator(Supplier>)->Spliterator.OfDouble::: double pipeline lazy spliterator
java.util.stream.DoublePipeline#forEachWithCancel(Spliterator, Sink)->boolean::: double pipeline for each with cancel
java.util.stream.DoublePipeline#makeNodeBuilder(long, IntFunction)->Node.Builder::: double pipeline make node builder
java.util.stream.DoublePipeline#iterator()->PrimitiveIterator.OfDouble::: double pipeline iterator
java.util.stream.DoublePipeline#spliterator()->Spliterator.OfDouble::: double pipeline spliterator
java.util.stream.DoublePipeline#boxed()->Stream::: double pipeline boxed
java.util.stream.DoublePipeline#map(DoubleUnaryOperator)->DoubleStream::: double pipeline map
java.util.stream.DoublePipeline#mapToObj(DoubleFunction)->Stream::: double pipeline map to obj
java.util.stream.DoublePipeline#mapToInt(DoubleToIntFunction)->IntStream::: double pipeline map to int
java.util.stream.DoublePipeline#mapToLong(DoubleToLongFunction)->LongStream::: double pipeline map to long
java.util.stream.DoublePipeline#flatMap(DoubleFunction)->DoubleStream::: double pipeline flat map
java.util.stream.DoublePipeline#unordered()->DoubleStream::: double pipeline unordered
java.util.stream.DoublePipeline#filter(DoublePredicate)->DoubleStream::: double pipeline filter
java.util.stream.DoublePipeline#peek(DoubleConsumer)->DoubleStream::: double pipeline peek
java.util.stream.DoublePipeline#limit(long)->DoubleStream::: double pipeline limit
java.util.stream.DoublePipeline#skip(long)->DoubleStream::: double pipeline skip
java.util.stream.DoublePipeline#takeWhile(DoublePredicate)->DoubleStream::: double pipeline take while
java.util.stream.DoublePipeline#dropWhile(DoublePredicate)->DoubleStream::: double pipeline drop while
java.util.stream.DoublePipeline#sorted()->DoubleStream::: double pipeline sorted
java.util.stream.DoublePipeline#distinct()->DoubleStream::: double pipeline distinct
java.util.stream.DoublePipeline#forEach(DoubleConsumer)->void::: double pipeline for each
java.util.stream.DoublePipeline#forEachOrdered(DoubleConsumer)->void::: double pipeline for each ordered
java.util.stream.DoublePipeline#sum()->double::: double pipeline sum
java.util.stream.DoublePipeline#min()->OptionalDouble::: double pipeline min
java.util.stream.DoublePipeline#max()->OptionalDouble::: double pipeline max
java.util.stream.DoublePipeline#average()->OptionalDouble::: double pipeline average
java.util.stream.DoublePipeline#count()->long::: double pipeline count
java.util.stream.DoublePipeline#summaryStatistics()->DoubleSummaryStatistics::: double pipeline summary statistics
java.util.stream.DoublePipeline#reduce(double, DoubleBinaryOperator)->double::: double pipeline reduce
java.util.stream.DoublePipeline#reduce(DoubleBinaryOperator)->OptionalDouble::: double pipeline reduce
java.util.stream.DoublePipeline#collect(Supplier, ObjDoubleConsumer, BiConsumer)->R::: double pipeline collect
java.util.stream.DoublePipeline#anyMatch(DoublePredicate)->boolean::: double pipeline any match
java.util.stream.DoublePipeline#allMatch(DoublePredicate)->boolean::: double pipeline all match
java.util.stream.DoublePipeline#noneMatch(DoublePredicate)->boolean::: double pipeline none match
java.util.stream.DoublePipeline#findFirst()->OptionalDouble::: double pipeline find first
java.util.stream.DoublePipeline#findAny()->OptionalDouble::: double pipeline find any
java.util.stream.DoublePipeline#toArray()->double[]::: double pipeline to array
java.util.stream.DoublePipeline.Head#opIsStateful()->boolean::: head op is stateful
java.util.stream.DoublePipeline.Head#opWrapSink(int, Sink)->Sink::: head op wrap sink
java.util.stream.DoublePipeline.Head#forEach(DoubleConsumer)->void::: head for each
java.util.stream.DoublePipeline.Head#forEachOrdered(DoubleConsumer)->void::: head for each ordered
java.util.stream.DoublePipeline.StatelessOp#opIsStateful()->boolean::: stateless op op is stateful
java.util.stream.DoublePipeline.StatefulOp#opIsStateful()->boolean::: stateful op op is stateful
java.util.stream.DoublePipeline.StatefulOp#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction)->Node::: stateful op op evaluate parallel
java.util.stream.DoubleStream#filter(DoublePredicate)->DoubleStream:::Returns a stream consisting of the elements of this stream that match the given predicate
java.util.stream.DoubleStream#map(DoubleUnaryOperator)->DoubleStream:::Returns a stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.DoubleStream#mapToObj(DoubleFunction)->Stream:::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.DoubleStream#mapToInt(DoubleToIntFunction)->IntStream:::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.DoubleStream#mapToLong(DoubleToLongFunction)->LongStream:::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.DoubleStream#flatMap(DoubleFunction)->DoubleStream:::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.DoubleStream#distinct()->DoubleStream:::Returns a stream consisting of the distinct elements of this stream
java.util.stream.DoubleStream#sorted()->DoubleStream:::Returns a stream consisting of the elements of this stream in sorted order
java.util.stream.DoubleStream#peek(DoubleConsumer)->DoubleStream:::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
java.util.stream.DoubleStream#limit(long)->DoubleStream:::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
java.util.stream.DoubleStream#skip(long)->DoubleStream:::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
java.util.stream.DoubleStream#takeWhile(DoublePredicate)->DoubleStream:::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
java.util.stream.DoubleStream#dropWhile(DoublePredicate)->DoubleStream:::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
java.util.stream.DoubleStream#forEach(DoubleConsumer)->void:::Performs an action for each element of this stream
java.util.stream.DoubleStream#forEachOrdered(DoubleConsumer)->void:::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
java.util.stream.DoubleStream#toArray()->double[]:::Returns an array containing the elements of this stream
java.util.stream.DoubleStream#reduce(double, DoubleBinaryOperator)->double:::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
java.util.stream.DoubleStream#reduce(DoubleBinaryOperator)->OptionalDouble:::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalDouble describing the reduced value, if any
java.util.stream.DoubleStream#collect(Supplier, ObjDoubleConsumer, BiConsumer)->R:::Performs a mutable reduction operation on the elements of this stream
java.util.stream.DoubleStream#sum()->double:::Returns the sum of elements in this stream
java.util.stream.DoubleStream#min()->OptionalDouble:::Returns an OptionalDouble describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty
java.util.stream.DoubleStream#max()->OptionalDouble:::Returns an OptionalDouble describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty
java.util.stream.DoubleStream#count()->long:::Returns the count of elements in this stream
java.util.stream.DoubleStream#average()->OptionalDouble:::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
java.util.stream.DoubleStream#summaryStatistics()->DoubleSummaryStatistics:::Returns a DoubleSummaryStatistics describing various summary data about the elements of this stream
java.util.stream.DoubleStream#anyMatch(DoublePredicate)->boolean:::Returns whether any elements of this stream match the provided predicate
java.util.stream.DoubleStream#allMatch(DoublePredicate)->boolean:::Returns whether all elements of this stream match the provided predicate
java.util.stream.DoubleStream#noneMatch(DoublePredicate)->boolean:::Returns whether no elements of this stream match the provided predicate
java.util.stream.DoubleStream#findFirst()->OptionalDouble:::Returns an OptionalDouble describing the first element of this stream, or an empty OptionalDouble if the stream is empty
java.util.stream.DoubleStream#findAny()->OptionalDouble:::Returns an OptionalDouble describing some element of the stream, or an empty OptionalDouble if the stream is empty
java.util.stream.DoubleStream#boxed()->Stream:::Returns a Stream consisting of the elements of this stream, boxed to Double
java.util.stream.DoubleStream#sequential()->DoubleStream::: double stream sequential
java.util.stream.DoubleStream#parallel()->DoubleStream::: double stream parallel
java.util.stream.DoubleStream#iterator()->PrimitiveIterator.OfDouble::: double stream iterator
java.util.stream.DoubleStream#spliterator()->Spliterator.OfDouble::: double stream spliterator
java.util.stream.DoubleStream#builder()->Builder:::Returns a builder for a DoubleStream.
java.util.stream.DoubleStream#empty()->DoubleStream:::Returns an empty sequential DoubleStream.
java.util.stream.DoubleStream#of(double)->DoubleStream:::Returns a sequential DoubleStream containing a single element.
java.util.stream.DoubleStream#of(double...)->DoubleStream:::Returns a sequential ordered stream whose elements are the specified values.
java.util.stream.DoubleStream#iterate(double, DoubleUnaryOperator)->DoubleStream:::Returns an infinite sequential ordered DoubleStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
java.util.stream.DoubleStream#iterate(double, DoublePredicate, DoubleUnaryOperator)->DoubleStream:::Returns a sequential ordered DoubleStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
java.util.stream.DoubleStream#generate(DoubleSupplier)->DoubleStream:::Returns an infinite sequential unordered stream where each element is generated by the provided DoubleSupplier
java.util.stream.DoubleStream#concat(DoubleStream, DoubleStream)->DoubleStream:::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
java.util.stream.DoubleStream.Builder#accept(double)->void:::Adds an element to the stream being built.
java.util.stream.DoubleStream.Builder#add(double)->Builder:::Adds an element to the stream being built.
java.util.stream.DoubleStream.Builder#build()->DoubleStream:::Builds the stream, transitioning this builder to the built state
java.util.stream.FindOps#makeRef(boolean)->TerminalOp>:::Constructs a TerminalOp for streams of objects.
java.util.stream.FindOps#makeInt(boolean)->TerminalOp:::Constructs a TerminalOp for streams of ints.
java.util.stream.FindOps#makeLong(boolean)->TerminalOp:::Constructs a TerminalOp for streams of longs.
java.util.stream.FindOps#makeDouble(boolean)->TerminalOp:::Constructs a FindOp for streams of doubles.
java.util.stream.ForEachOps#makeRef(Consumer, boolean)->TerminalOp:::Constructs a TerminalOp that perform an action for every element of a stream.
java.util.stream.ForEachOps#makeInt(IntConsumer, boolean)->TerminalOp:::Constructs a TerminalOp that perform an action for every element of an IntStream.
java.util.stream.ForEachOps#makeLong(LongConsumer, boolean)->TerminalOp:::Constructs a TerminalOp that perform an action for every element of a LongStream.
java.util.stream.ForEachOps#makeDouble(DoubleConsumer, boolean)->TerminalOp:::Constructs a TerminalOp that perform an action for every element of a DoubleStream.
java.util.stream.ForEachOps.ForEachOp#getOpFlags()->int::: for each op get op flags
java.util.stream.ForEachOps.ForEachOp#evaluateSequential(PipelineHelper, Spliterator)->Void::: for each op evaluate sequential
java.util.stream.ForEachOps.ForEachOp#evaluateParallel(PipelineHelper, Spliterator)->Void::: for each op evaluate parallel
java.util.stream.ForEachOps.ForEachOp#get()->Void::: for each op get
java.util.stream.ForEachOps.ForEachOp.OfRef#accept(T)->void::: of ref accept
java.util.stream.ForEachOps.ForEachOp.OfInt#inputShape()->StreamShape::: of int input shape
java.util.stream.ForEachOps.ForEachOp.OfInt#accept(int)->void::: of int accept
java.util.stream.ForEachOps.ForEachOp.OfLong#inputShape()->StreamShape::: of long input shape
java.util.stream.ForEachOps.ForEachOp.OfLong#accept(long)->void::: of long accept
java.util.stream.ForEachOps.ForEachOp.OfDouble#inputShape()->StreamShape::: of double input shape
java.util.stream.ForEachOps.ForEachOp.OfDouble#accept(double)->void::: of double accept
java.util.stream.ForEachOps.ForEachTask#compute()->void::: for each task compute
java.util.stream.ForEachOps.ForEachOrderedTask#compute()->void::: for each ordered task compute
java.util.stream.ForEachOps.ForEachOrderedTask#onCompletion(CountedCompleter)->void::: for each ordered task on completion
java.util.stream.IntPipeline#getOutputShape()->StreamShape::: int pipeline get output shape
java.util.stream.IntPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction)->Node::: int pipeline evaluate to node
java.util.stream.IntPipeline#wrap(PipelineHelper, Supplier>, boolean)->Spliterator::: int pipeline wrap
java.util.stream.IntPipeline#lazySpliterator(Supplier>)->Spliterator.OfInt::: int pipeline lazy spliterator
java.util.stream.IntPipeline#forEachWithCancel(Spliterator, Sink)->boolean::: int pipeline for each with cancel
java.util.stream.IntPipeline#makeNodeBuilder(long, IntFunction)->Node.Builder::: int pipeline make node builder
java.util.stream.IntPipeline#iterator()->PrimitiveIterator.OfInt::: int pipeline iterator
java.util.stream.IntPipeline#spliterator()->Spliterator.OfInt::: int pipeline spliterator
java.util.stream.IntPipeline#asLongStream()->LongStream::: int pipeline as long stream
java.util.stream.IntPipeline#asDoubleStream()->DoubleStream::: int pipeline as double stream
java.util.stream.IntPipeline#boxed()->Stream::: int pipeline boxed
java.util.stream.IntPipeline#map(IntUnaryOperator)->IntStream::: int pipeline map
java.util.stream.IntPipeline#mapToObj(IntFunction)->Stream::: int pipeline map to obj
java.util.stream.IntPipeline#mapToLong(IntToLongFunction)->LongStream::: int pipeline map to long
java.util.stream.IntPipeline#mapToDouble(IntToDoubleFunction)->DoubleStream::: int pipeline map to double
java.util.stream.IntPipeline#flatMap(IntFunction)->IntStream::: int pipeline flat map
java.util.stream.IntPipeline#unordered()->IntStream::: int pipeline unordered
java.util.stream.IntPipeline#filter(IntPredicate)->IntStream::: int pipeline filter
java.util.stream.IntPipeline#peek(IntConsumer)->IntStream::: int pipeline peek
java.util.stream.IntPipeline#limit(long)->IntStream::: int pipeline limit
java.util.stream.IntPipeline#skip(long)->IntStream::: int pipeline skip
java.util.stream.IntPipeline#takeWhile(IntPredicate)->IntStream::: int pipeline take while
java.util.stream.IntPipeline#dropWhile(IntPredicate)->IntStream::: int pipeline drop while
java.util.stream.IntPipeline#sorted()->IntStream::: int pipeline sorted
java.util.stream.IntPipeline#distinct()->IntStream::: int pipeline distinct
java.util.stream.IntPipeline#forEach(IntConsumer)->void::: int pipeline for each
java.util.stream.IntPipeline#forEachOrdered(IntConsumer)->void::: int pipeline for each ordered
java.util.stream.IntPipeline#sum()->int::: int pipeline sum
java.util.stream.IntPipeline#min()->OptionalInt::: int pipeline min
java.util.stream.IntPipeline#max()->OptionalInt::: int pipeline max
java.util.stream.IntPipeline#count()->long::: int pipeline count
java.util.stream.IntPipeline#average()->OptionalDouble::: int pipeline average
java.util.stream.IntPipeline#summaryStatistics()->IntSummaryStatistics::: int pipeline summary statistics
java.util.stream.IntPipeline#reduce(int, IntBinaryOperator)->int::: int pipeline reduce
java.util.stream.IntPipeline#reduce(IntBinaryOperator)->OptionalInt::: int pipeline reduce
java.util.stream.IntPipeline#collect(Supplier, ObjIntConsumer, BiConsumer)->R::: int pipeline collect
java.util.stream.IntPipeline#anyMatch(IntPredicate)->boolean::: int pipeline any match
java.util.stream.IntPipeline#allMatch(IntPredicate)->boolean::: int pipeline all match
java.util.stream.IntPipeline#noneMatch(IntPredicate)->boolean::: int pipeline none match
java.util.stream.IntPipeline#findFirst()->OptionalInt::: int pipeline find first
java.util.stream.IntPipeline#findAny()->OptionalInt::: int pipeline find any
java.util.stream.IntPipeline#toArray()->int[]::: int pipeline to array
java.util.stream.IntPipeline.Head#opIsStateful()->boolean::: head op is stateful
java.util.stream.IntPipeline.Head#opWrapSink(int, Sink)->Sink::: head op wrap sink
java.util.stream.IntPipeline.Head#forEach(IntConsumer)->void::: head for each
java.util.stream.IntPipeline.Head#forEachOrdered(IntConsumer)->void::: head for each ordered
java.util.stream.IntPipeline.StatelessOp#opIsStateful()->boolean::: stateless op op is stateful
java.util.stream.IntPipeline.StatefulOp#opIsStateful()->boolean::: stateful op op is stateful
java.util.stream.IntPipeline.StatefulOp#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction)->Node::: stateful op op evaluate parallel
java.util.stream.IntStream#filter(IntPredicate)->IntStream:::Returns a stream consisting of the elements of this stream that match the given predicate
java.util.stream.IntStream#map(IntUnaryOperator)->IntStream:::Returns a stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.IntStream#mapToObj(IntFunction)->Stream:::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.IntStream#mapToLong(IntToLongFunction)->LongStream:::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.IntStream#mapToDouble(IntToDoubleFunction)->DoubleStream:::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.IntStream#flatMap(IntFunction)->IntStream:::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.IntStream#distinct()->IntStream:::Returns a stream consisting of the distinct elements of this stream
java.util.stream.IntStream#sorted()->IntStream:::Returns a stream consisting of the elements of this stream in sorted order
java.util.stream.IntStream#peek(IntConsumer)->IntStream:::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
java.util.stream.IntStream#limit(long)->IntStream:::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
java.util.stream.IntStream#skip(long)->IntStream:::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
java.util.stream.IntStream#takeWhile(IntPredicate)->IntStream:::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
java.util.stream.IntStream#dropWhile(IntPredicate)->IntStream:::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
java.util.stream.IntStream#forEach(IntConsumer)->void:::Performs an action for each element of this stream
java.util.stream.IntStream#forEachOrdered(IntConsumer)->void:::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
java.util.stream.IntStream#toArray()->int[]:::Returns an array containing the elements of this stream
java.util.stream.IntStream#reduce(int, IntBinaryOperator)->int:::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
java.util.stream.IntStream#reduce(IntBinaryOperator)->OptionalInt:::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any
java.util.stream.IntStream#collect(Supplier, ObjIntConsumer, BiConsumer)->R:::Performs a mutable reduction operation on the elements of this stream
java.util.stream.IntStream#sum()->int:::Returns the sum of elements in this stream
java.util.stream.IntStream#min()->OptionalInt:::Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty
java.util.stream.IntStream#max()->OptionalInt:::Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty
java.util.stream.IntStream#count()->long:::Returns the count of elements in this stream
java.util.stream.IntStream#average()->OptionalDouble:::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
java.util.stream.IntStream#summaryStatistics()->IntSummaryStatistics:::Returns an IntSummaryStatistics describing various summary data about the elements of this stream
java.util.stream.IntStream#anyMatch(IntPredicate)->boolean:::Returns whether any elements of this stream match the provided predicate
java.util.stream.IntStream#allMatch(IntPredicate)->boolean:::Returns whether all elements of this stream match the provided predicate
java.util.stream.IntStream#noneMatch(IntPredicate)->boolean:::Returns whether no elements of this stream match the provided predicate
java.util.stream.IntStream#findFirst()->OptionalInt:::Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty
java.util.stream.IntStream#findAny()->OptionalInt:::Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty
java.util.stream.IntStream#asLongStream()->LongStream:::Returns a LongStream consisting of the elements of this stream, converted to long
java.util.stream.IntStream#asDoubleStream()->DoubleStream:::Returns a DoubleStream consisting of the elements of this stream, converted to double
java.util.stream.IntStream#boxed()->Stream:::Returns a Stream consisting of the elements of this stream, each boxed to an Integer
java.util.stream.IntStream#sequential()->IntStream::: int stream sequential
java.util.stream.IntStream#parallel()->IntStream::: int stream parallel
java.util.stream.IntStream#iterator()->PrimitiveIterator.OfInt::: int stream iterator
java.util.stream.IntStream#spliterator()->Spliterator.OfInt::: int stream spliterator
java.util.stream.IntStream#builder()->Builder:::Returns a builder for an IntStream.
java.util.stream.IntStream#empty()->IntStream:::Returns an empty sequential IntStream.
java.util.stream.IntStream#of(int)->IntStream:::Returns a sequential IntStream containing a single element.
java.util.stream.IntStream#of(int...)->IntStream:::Returns a sequential ordered stream whose elements are the specified values.
java.util.stream.IntStream#iterate(int, IntUnaryOperator)->IntStream:::Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
java.util.stream.IntStream#iterate(int, IntPredicate, IntUnaryOperator)->IntStream:::Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
java.util.stream.IntStream#generate(IntSupplier)->IntStream:::Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier
java.util.stream.IntStream#range(int, int)->IntStream:::Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
java.util.stream.IntStream#rangeClosed(int, int)->IntStream:::Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
java.util.stream.IntStream#concat(IntStream, IntStream)->IntStream:::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
java.util.stream.IntStream.Builder#accept(int)->void:::Adds an element to the stream being built.
java.util.stream.IntStream.Builder#add(int)->Builder:::Adds an element to the stream being built.
java.util.stream.IntStream.Builder#build()->IntStream:::Builds the stream, transitioning this builder to the built state
java.util.stream.LongPipeline#getOutputShape()->StreamShape::: long pipeline get output shape
java.util.stream.LongPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction)->Node::: long pipeline evaluate to node
java.util.stream.LongPipeline#wrap(PipelineHelper, Supplier>, boolean)->Spliterator::: long pipeline wrap
java.util.stream.LongPipeline#lazySpliterator(Supplier>)->Spliterator.OfLong::: long pipeline lazy spliterator
java.util.stream.LongPipeline#forEachWithCancel(Spliterator, Sink)->boolean::: long pipeline for each with cancel
java.util.stream.LongPipeline#makeNodeBuilder(long, IntFunction)->Node.Builder::: long pipeline make node builder
java.util.stream.LongPipeline#iterator()->PrimitiveIterator.OfLong::: long pipeline iterator
java.util.stream.LongPipeline#spliterator()->Spliterator.OfLong::: long pipeline spliterator
java.util.stream.LongPipeline#asDoubleStream()->DoubleStream::: long pipeline as double stream
java.util.stream.LongPipeline#boxed()->Stream::: long pipeline boxed
java.util.stream.LongPipeline#map(LongUnaryOperator)->LongStream::: long pipeline map
java.util.stream.LongPipeline#mapToObj(LongFunction)->Stream::: long pipeline map to obj
java.util.stream.LongPipeline#mapToInt(LongToIntFunction)->IntStream::: long pipeline map to int
java.util.stream.LongPipeline#mapToDouble(LongToDoubleFunction)->DoubleStream::: long pipeline map to double
java.util.stream.LongPipeline#flatMap(LongFunction)->LongStream::: long pipeline flat map
java.util.stream.LongPipeline#unordered()->LongStream::: long pipeline unordered
java.util.stream.LongPipeline#filter(LongPredicate)->LongStream::: long pipeline filter
java.util.stream.LongPipeline#peek(LongConsumer)->LongStream::: long pipeline peek
java.util.stream.LongPipeline#limit(long)->LongStream::: long pipeline limit
java.util.stream.LongPipeline#skip(long)->LongStream::: long pipeline skip
java.util.stream.LongPipeline#takeWhile(LongPredicate)->LongStream::: long pipeline take while
java.util.stream.LongPipeline#dropWhile(LongPredicate)->LongStream::: long pipeline drop while
java.util.stream.LongPipeline#sorted()->LongStream::: long pipeline sorted
java.util.stream.LongPipeline#distinct()->LongStream::: long pipeline distinct
java.util.stream.LongPipeline#forEach(LongConsumer)->void::: long pipeline for each
java.util.stream.LongPipeline#forEachOrdered(LongConsumer)->void::: long pipeline for each ordered
java.util.stream.LongPipeline#sum()->long::: long pipeline sum
java.util.stream.LongPipeline#min()->OptionalLong::: long pipeline min
java.util.stream.LongPipeline#max()->OptionalLong::: long pipeline max
java.util.stream.LongPipeline#average()->OptionalDouble::: long pipeline average
java.util.stream.LongPipeline#count()->long::: long pipeline count
java.util.stream.LongPipeline#summaryStatistics()->LongSummaryStatistics::: long pipeline summary statistics
java.util.stream.LongPipeline#reduce(long, LongBinaryOperator)->long::: long pipeline reduce
java.util.stream.LongPipeline#reduce(LongBinaryOperator)->OptionalLong::: long pipeline reduce
java.util.stream.LongPipeline#collect(Supplier, ObjLongConsumer, BiConsumer)->R::: long pipeline collect
java.util.stream.LongPipeline#anyMatch(LongPredicate)->boolean::: long pipeline any match
java.util.stream.LongPipeline#allMatch(LongPredicate)->boolean::: long pipeline all match
java.util.stream.LongPipeline#noneMatch(LongPredicate)->boolean::: long pipeline none match
java.util.stream.LongPipeline#findFirst()->OptionalLong::: long pipeline find first
java.util.stream.LongPipeline#findAny()->OptionalLong::: long pipeline find any
java.util.stream.LongPipeline#toArray()->long[]::: long pipeline to array
java.util.stream.LongPipeline.Head#opIsStateful()->boolean::: head op is stateful
java.util.stream.LongPipeline.Head#opWrapSink(int, Sink)->Sink::: head op wrap sink
java.util.stream.LongPipeline.Head#forEach(LongConsumer)->void::: head for each
java.util.stream.LongPipeline.Head#forEachOrdered(LongConsumer)->void::: head for each ordered
java.util.stream.LongPipeline.StatelessOp#opIsStateful()->boolean::: stateless op op is stateful
java.util.stream.LongPipeline.StatefulOp#opIsStateful()->boolean::: stateful op op is stateful
java.util.stream.LongPipeline.StatefulOp#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction)->Node::: stateful op op evaluate parallel
java.util.stream.LongStream#filter(LongPredicate)->LongStream:::Returns a stream consisting of the elements of this stream that match the given predicate
java.util.stream.LongStream#map(LongUnaryOperator)->LongStream:::Returns a stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.LongStream#mapToObj(LongFunction)->Stream:::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.LongStream#mapToInt(LongToIntFunction)->IntStream:::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.LongStream#mapToDouble(LongToDoubleFunction)->DoubleStream:::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.LongStream#flatMap(LongFunction)->LongStream:::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.LongStream#distinct()->LongStream:::Returns a stream consisting of the distinct elements of this stream
java.util.stream.LongStream#sorted()->LongStream:::Returns a stream consisting of the elements of this stream in sorted order
java.util.stream.LongStream#peek(LongConsumer)->LongStream:::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
java.util.stream.LongStream#limit(long)->LongStream:::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
java.util.stream.LongStream#skip(long)->LongStream:::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
java.util.stream.LongStream#takeWhile(LongPredicate)->LongStream:::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
java.util.stream.LongStream#dropWhile(LongPredicate)->LongStream:::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
java.util.stream.LongStream#forEach(LongConsumer)->void:::Performs an action for each element of this stream
java.util.stream.LongStream#forEachOrdered(LongConsumer)->void:::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
java.util.stream.LongStream#toArray()->long[]:::Returns an array containing the elements of this stream
java.util.stream.LongStream#reduce(long, LongBinaryOperator)->long:::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
java.util.stream.LongStream#reduce(LongBinaryOperator)->OptionalLong:::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalLong describing the reduced value, if any
java.util.stream.LongStream#collect(Supplier, ObjLongConsumer, BiConsumer)->R:::Performs a mutable reduction operation on the elements of this stream
java.util.stream.LongStream#sum()->long:::Returns the sum of elements in this stream
java.util.stream.LongStream#min()->OptionalLong:::Returns an OptionalLong describing the minimum element of this stream, or an empty optional if this stream is empty
java.util.stream.LongStream#max()->OptionalLong:::Returns an OptionalLong describing the maximum element of this stream, or an empty optional if this stream is empty
java.util.stream.LongStream#count()->long:::Returns the count of elements in this stream
java.util.stream.LongStream#average()->OptionalDouble:::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
java.util.stream.LongStream#summaryStatistics()->LongSummaryStatistics:::Returns a LongSummaryStatistics describing various summary data about the elements of this stream
java.util.stream.LongStream#anyMatch(LongPredicate)->boolean:::Returns whether any elements of this stream match the provided predicate
java.util.stream.LongStream#allMatch(LongPredicate)->boolean:::Returns whether all elements of this stream match the provided predicate
java.util.stream.LongStream#noneMatch(LongPredicate)->boolean:::Returns whether no elements of this stream match the provided predicate
java.util.stream.LongStream#findFirst()->OptionalLong:::Returns an OptionalLong describing the first element of this stream, or an empty OptionalLong if the stream is empty
java.util.stream.LongStream#findAny()->OptionalLong:::Returns an OptionalLong describing some element of the stream, or an empty OptionalLong if the stream is empty
java.util.stream.LongStream#asDoubleStream()->DoubleStream:::Returns a DoubleStream consisting of the elements of this stream, converted to double
java.util.stream.LongStream#boxed()->Stream:::Returns a Stream consisting of the elements of this stream, each boxed to a Long
java.util.stream.LongStream#sequential()->LongStream::: long stream sequential
java.util.stream.LongStream#parallel()->LongStream::: long stream parallel
java.util.stream.LongStream#iterator()->PrimitiveIterator.OfLong::: long stream iterator
java.util.stream.LongStream#spliterator()->Spliterator.OfLong::: long stream spliterator
java.util.stream.LongStream#builder()->Builder:::Returns a builder for a LongStream.
java.util.stream.LongStream#empty()->LongStream:::Returns an empty sequential LongStream.
java.util.stream.LongStream#of(long)->LongStream:::Returns a sequential LongStream containing a single element.
java.util.stream.LongStream#of(long...)->LongStream:::Returns a sequential ordered stream whose elements are the specified values.
java.util.stream.LongStream#iterate(long, LongUnaryOperator)->LongStream:::Returns an infinite sequential ordered LongStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
java.util.stream.LongStream#iterate(long, LongPredicate, LongUnaryOperator)->LongStream:::Returns a sequential ordered LongStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
java.util.stream.LongStream#generate(LongSupplier)->LongStream:::Returns an infinite sequential unordered stream where each element is generated by the provided LongSupplier
java.util.stream.LongStream#range(long, long)->LongStream:::Returns a sequential ordered LongStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
java.util.stream.LongStream#rangeClosed(long, long)->LongStream:::Returns a sequential ordered LongStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
java.util.stream.LongStream#concat(LongStream, LongStream)->LongStream:::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
java.util.stream.LongStream.Builder#accept(long)->void:::Adds an element to the stream being built.
java.util.stream.LongStream.Builder#add(long)->Builder:::Adds an element to the stream being built.
java.util.stream.LongStream.Builder#build()->LongStream:::Builds the stream, transitioning this builder to the built state
java.util.stream.MatchOps#makeRef(Predicate, MatchKind)->TerminalOp:::Constructs a quantified predicate matcher for a Stream.
java.util.stream.MatchOps#makeInt(IntPredicate, MatchKind)->TerminalOp:::Constructs a quantified predicate matcher for an IntStream.
java.util.stream.MatchOps#makeLong(LongPredicate, MatchKind)->TerminalOp:::Constructs a quantified predicate matcher for a LongStream.
java.util.stream.MatchOps#makeDouble(DoublePredicate, MatchKind)->TerminalOp:::Constructs a quantified predicate matcher for a DoubleStream.
java.util.stream.Node#spliterator()->Spliterator:::Returns a Spliterator describing the elements contained in this Node.
java.util.stream.Node#forEach(Consumer)->void:::Traverses the elements of this node, and invoke the provided Consumer with each element
java.util.stream.Node#getChildCount()->int:::Returns the number of child nodes of this node.
java.util.stream.Node#getChild(int)->Node:::Retrieves the child Node at a given index.
java.util.stream.Node#truncate(long, long, IntFunction)->Node:::Return a node describing a subsequence of the elements of this node, starting at the given inclusive start offset and ending at the given exclusive end offset.
java.util.stream.Node#asArray(IntFunction)->T[]:::Provides an array view of the contents of this node
java.util.stream.Node#copyInto(T[], int)->void:::Copies the content of this Node into an array, starting at a given offset into the array
java.util.stream.Node#getShape()->StreamShape:::Gets the StreamShape associated with this Node.
java.util.stream.Node#count()->long:::Returns the number of elements contained in this node.
java.util.stream.Node.Builder#build()->Node:::Builds the node
java.util.stream.Node.Builder.OfInt#build()->Node.OfInt::: of int build
java.util.stream.Node.Builder.OfLong#build()->Node.OfLong::: of long build
java.util.stream.Node.Builder.OfDouble#build()->Node.OfDouble::: of double build
java.util.stream.Node.OfPrimitive#spliterator()->T_SPLITR::: of primitive spliterator
java.util.stream.Node.OfPrimitive#forEach(T_CONS)->void:::Traverses the elements of this node, and invoke the provided action with each element.
java.util.stream.Node.OfPrimitive#getChild(int)->T_NODE::: of primitive get child
java.util.stream.Node.OfPrimitive#truncate(long, long, IntFunction)->T_NODE::: of primitive truncate
java.util.stream.Node.OfPrimitive#asArray(IntFunction)->T[]::: of primitive as array
java.util.stream.Node.OfPrimitive#asPrimitiveArray()->T_ARR:::Views this node as a primitive array
java.util.stream.Node.OfPrimitive#newArray(int)->T_ARR:::Creates a new primitive array.
java.util.stream.Node.OfPrimitive#copyInto(T_ARR, int)->void:::Copies the content of this Node into a primitive array, starting at a given offset into the array
java.util.stream.Node.OfInt#forEach(Consumer)->void::: of int for each
java.util.stream.Node.OfInt#copyInto(Integer[], int)->void::: of int copy into
java.util.stream.Node.OfInt#truncate(long, long, IntFunction)->Node.OfInt::: of int truncate
java.util.stream.Node.OfInt#newArray(int)->int[]::: of int new array
java.util.stream.Node.OfInt#getShape()->StreamShape::: of int get shape
java.util.stream.Node.OfLong#forEach(Consumer)->void::: of long for each
java.util.stream.Node.OfLong#copyInto(Long[], int)->void::: of long copy into
java.util.stream.Node.OfLong#truncate(long, long, IntFunction)->Node.OfLong::: of long truncate
java.util.stream.Node.OfLong#newArray(int)->long[]::: of long new array
java.util.stream.Node.OfLong#getShape()->StreamShape::: of long get shape
java.util.stream.Node.OfDouble#forEach(Consumer)->void::: of double for each
java.util.stream.Node.OfDouble#copyInto(Double[], int)->void::: of double copy into
java.util.stream.Node.OfDouble#truncate(long, long, IntFunction)->Node.OfDouble::: of double truncate
java.util.stream.Node.OfDouble#newArray(int)->double[]::: of double new array
java.util.stream.Node.OfDouble#getShape()->StreamShape::: of double get shape
java.util.stream.Nodes#castingArray()->IntFunction::: nodes casting array
java.util.stream.Nodes#emptyNode(StreamShape)->Node:::Produces an empty node whose count is zero, has no children and no content.
java.util.stream.Nodes#conc(StreamShape, Node, Node)->Node:::Produces a concatenated Node that has two or more children
java.util.stream.Nodes#node(T[])->Node:::Produces a Node describing an array
java.util.stream.Nodes#node(Collection)->Node:::Produces a Node describing a Collection
java.util.stream.Nodes#builder(long, IntFunction)->Node.Builder:::Produces a Node.Builder.
java.util.stream.Nodes#builder()->Node.Builder:::Produces a variable size @{link Node.Builder}.
java.util.stream.Nodes#node(int[])->Node.OfInt:::Produces a Node.OfInt describing an int[] array
java.util.stream.Nodes#intBuilder(long)->Node.Builder.OfInt:::Produces a Node.Builder.OfInt.
java.util.stream.Nodes#intBuilder()->Node.Builder.OfInt:::Produces a variable size @{link Node.Builder.OfInt}.
java.util.stream.Nodes#node(long[])->Node.OfLong:::Produces a Node.OfLong describing a long[] array
java.util.stream.Nodes#longBuilder(long)->Node.Builder.OfLong:::Produces a Node.Builder.OfLong.
java.util.stream.Nodes#longBuilder()->Node.Builder.OfLong:::Produces a variable size @{link Node.Builder.OfLong}.
java.util.stream.Nodes#node(double[])->Node.OfDouble:::Produces a Node.OfDouble describing a double[] array
java.util.stream.Nodes#doubleBuilder(long)->Node.Builder.OfDouble:::Produces a Node.Builder.OfDouble.
java.util.stream.Nodes#doubleBuilder()->Node.Builder.OfDouble:::Produces a variable size @{link Node.Builder.OfDouble}.
java.util.stream.Nodes#collect(PipelineHelper, Spliterator, boolean, IntFunction)->Node:::Collect, in parallel, elements output from a pipeline and describe those elements with a Node.
java.util.stream.Nodes#collectInt(PipelineHelper, Spliterator, boolean)->Node.OfInt:::Collect, in parallel, elements output from an int-valued pipeline and describe those elements with a Node.OfInt.
java.util.stream.Nodes#collectLong(PipelineHelper, Spliterator, boolean)->Node.OfLong:::Collect, in parallel, elements output from a long-valued pipeline and describe those elements with a Node.OfLong.
java.util.stream.Nodes#collectDouble(PipelineHelper, Spliterator, boolean)->Node.OfDouble:::Collect, in parallel, elements output from n double-valued pipeline and describe those elements with a Node.OfDouble.
java.util.stream.Nodes#flatten(Node, IntFunction)->Node:::Flatten, in parallel, a Node
java.util.stream.Nodes#flattenInt(Node.OfInt)->Node.OfInt:::Flatten, in parallel, a Node.OfInt
java.util.stream.Nodes#flattenLong(Node.OfLong)->Node.OfLong:::Flatten, in parallel, a Node.OfLong
java.util.stream.Nodes#flattenDouble(Node.OfDouble)->Node.OfDouble:::Flatten, in parallel, a Node.OfDouble
java.util.stream.Nodes.ConcNode#spliterator()->Spliterator::: conc node spliterator
java.util.stream.Nodes.ConcNode#copyInto(T[], int)->void::: conc node copy into
java.util.stream.Nodes.ConcNode#asArray(IntFunction)->T[]::: conc node as array
java.util.stream.Nodes.ConcNode#forEach(Consumer)->void::: conc node for each
java.util.stream.Nodes.ConcNode#truncate(long, long, IntFunction)->Node::: conc node truncate
java.util.stream.Nodes.ConcNode#toString()->String::: conc node to string
java.util.stream.Nodes.ConcNode.OfInt#spliterator()->Spliterator.OfInt::: of int spliterator
java.util.stream.Nodes.ConcNode.OfLong#spliterator()->Spliterator.OfLong::: of long spliterator
java.util.stream.Nodes.ConcNode.OfDouble#spliterator()->Spliterator.OfDouble::: of double spliterator
java.util.stream.PipelineHelper#getSourceShape()->StreamShape:::Gets the stream shape for the source of the pipeline segment.
java.util.stream.PipelineHelper#getStreamAndOpFlags()->int:::Gets the combined stream and operation flags for the output of the described pipeline
java.util.stream.PipelineHelper#exactOutputSizeIfKnown(Spliterator)->long:::Returns the exact output size of the portion of the output resulting from applying the pipeline stages described by this PipelineHelper to the portion of the input described by the provided Spliterator, if known
java.util.stream.PipelineHelper#wrapAndCopyInto(S, Spliterator)->S:::Applies the pipeline stages described by this PipelineHelper to the provided Spliterator and send the results to the provided Sink.
java.util.stream.PipelineHelper#copyInto(Sink, Spliterator)->void:::Pushes elements obtained from the Spliterator into the provided Sink
java.util.stream.PipelineHelper#copyIntoWithCancel(Sink, Spliterator)->boolean:::Pushes elements obtained from the Spliterator into the provided Sink, checking Sink#cancellationRequested() after each element, and stopping if cancellation is requested.
java.util.stream.PipelineHelper#wrapSink(Sink)->Sink:::Takes a Sink that accepts elements of the output type of the PipelineHelper, and wrap it with a Sink that accepts elements of the input type and implements all the intermediate operations described by this PipelineHelper, delivering the result into the provided Sink.
java.util.stream.PipelineHelper#wrapSpliterator(Spliterator)->Spliterator::: pipeline helper wrap spliterator
java.util.stream.PipelineHelper#makeNodeBuilder(long, IntFunction)->Node.Builder:::Constructs a @{link Node.Builder} compatible with the output shape of this PipelineHelper.
java.util.stream.PipelineHelper#evaluate(Spliterator, boolean, IntFunction)->Node:::Collects all output elements resulting from applying the pipeline stages to the source Spliterator into a Node.
java.util.stream.ReduceOps#makeRef(U, BiFunction, BinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on reference values.
java.util.stream.ReduceOps#makeRef(BinaryOperator)->TerminalOp>:::Constructs a TerminalOp that implements a functional reduce on reference values producing an optional reference result.
java.util.stream.ReduceOps#makeRef(Collector)->TerminalOp:::Constructs a TerminalOp that implements a mutable reduce on reference values.
java.util.stream.ReduceOps#makeRef(Supplier, BiConsumer, BiConsumer)->TerminalOp:::Constructs a TerminalOp that implements a mutable reduce on reference values.
java.util.stream.ReduceOps#makeRefCounting()->TerminalOp:::Constructs a TerminalOp that counts the number of stream elements
java.util.stream.ReduceOps#makeInt(int, IntBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on int values.
java.util.stream.ReduceOps#makeInt(IntBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on int values, producing an optional integer result.
java.util.stream.ReduceOps#makeInt(Supplier, ObjIntConsumer, BinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a mutable reduce on int values.
java.util.stream.ReduceOps#makeIntCounting()->TerminalOp:::Constructs a TerminalOp that counts the number of stream elements
java.util.stream.ReduceOps#makeLong(long, LongBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on long values.
java.util.stream.ReduceOps#makeLong(LongBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on long values, producing an optional long result.
java.util.stream.ReduceOps#makeLong(Supplier, ObjLongConsumer, BinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a mutable reduce on long values.
java.util.stream.ReduceOps#makeLongCounting()->TerminalOp:::Constructs a TerminalOp that counts the number of stream elements
java.util.stream.ReduceOps#makeDouble(double, DoubleBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on double values.
java.util.stream.ReduceOps#makeDouble(DoubleBinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a functional reduce on double values, producing an optional double result.
java.util.stream.ReduceOps#makeDouble(Supplier, ObjDoubleConsumer, BinaryOperator)->TerminalOp:::Constructs a TerminalOp that implements a mutable reduce on double values.
java.util.stream.ReduceOps#makeDoubleCounting()->TerminalOp:::Constructs a TerminalOp that counts the number of stream elements
java.util.stream.ReduceOps.CountingSink#begin(long)->void::: counting sink begin
java.util.stream.ReduceOps.CountingSink#get()->Long::: counting sink get
java.util.stream.ReduceOps.CountingSink#combine(CountingSink)->void::: counting sink combine
java.util.stream.ReduceOps.CountingSink.OfRef#accept(T)->void::: of ref accept
java.util.stream.ReduceOps.CountingSink.OfInt#accept(int)->void::: of int accept
java.util.stream.ReduceOps.CountingSink.OfLong#accept(long)->void::: of long accept
java.util.stream.ReduceOps.CountingSink.OfDouble#accept(double)->void::: of double accept
java.util.stream.ReferencePipeline#getOutputShape()->StreamShape::: reference pipeline get output shape
java.util.stream.ReferencePipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction)->Node::: reference pipeline evaluate to node
java.util.stream.ReferencePipeline#wrap(PipelineHelper, Supplier>, boolean)->Spliterator::: reference pipeline wrap
java.util.stream.ReferencePipeline#lazySpliterator(Supplier>)->Spliterator::: reference pipeline lazy spliterator
java.util.stream.ReferencePipeline#forEachWithCancel(Spliterator, Sink)->boolean::: reference pipeline for each with cancel
java.util.stream.ReferencePipeline#makeNodeBuilder(long, IntFunction)->Node.Builder::: reference pipeline make node builder
java.util.stream.ReferencePipeline#iterator()->Iterator::: reference pipeline iterator
java.util.stream.ReferencePipeline#unordered()->Stream::: reference pipeline unordered
java.util.stream.ReferencePipeline#filter(Predicate)->Stream::: reference pipeline filter
java.util.stream.ReferencePipeline#map(Function)->Stream::: reference pipeline map
java.util.stream.ReferencePipeline#mapToInt(ToIntFunction)->IntStream::: reference pipeline map to int
java.util.stream.ReferencePipeline#mapToLong(ToLongFunction)->LongStream::: reference pipeline map to long
java.util.stream.ReferencePipeline#mapToDouble(ToDoubleFunction)->DoubleStream::: reference pipeline map to double
java.util.stream.ReferencePipeline#flatMap(Function>)->Stream::: reference pipeline flat map
java.util.stream.ReferencePipeline#flatMapToInt(Function)->IntStream::: reference pipeline flat map to int
java.util.stream.ReferencePipeline#flatMapToDouble(Function)->DoubleStream::: reference pipeline flat map to double
java.util.stream.ReferencePipeline#flatMapToLong(Function)->LongStream::: reference pipeline flat map to long
java.util.stream.ReferencePipeline#peek(Consumer)->Stream::: reference pipeline peek
java.util.stream.ReferencePipeline#distinct()->Stream::: reference pipeline distinct
java.util.stream.ReferencePipeline#sorted()->Stream::: reference pipeline sorted
java.util.stream.ReferencePipeline#sorted(Comparator)->Stream::: reference pipeline sorted
java.util.stream.ReferencePipeline#limit(long)->Stream::: reference pipeline limit
java.util.stream.ReferencePipeline#skip(long)->Stream::: reference pipeline skip
java.util.stream.ReferencePipeline#takeWhile(Predicate)->Stream::: reference pipeline take while
java.util.stream.ReferencePipeline#dropWhile(Predicate)->Stream::: reference pipeline drop while
java.util.stream.ReferencePipeline#forEach(Consumer)->void::: reference pipeline for each
java.util.stream.ReferencePipeline#forEachOrdered(Consumer)->void::: reference pipeline for each ordered
java.util.stream.ReferencePipeline#toArray(IntFunction)->A[]::: reference pipeline to array
java.util.stream.ReferencePipeline#toArray()->Object[]::: reference pipeline to array
java.util.stream.ReferencePipeline#anyMatch(Predicate)->boolean::: reference pipeline any match
java.util.stream.ReferencePipeline#allMatch(Predicate)->boolean::: reference pipeline all match
java.util.stream.ReferencePipeline#noneMatch(Predicate)->boolean::: reference pipeline none match
java.util.stream.ReferencePipeline#findFirst()->Optional::: reference pipeline find first
java.util.stream.ReferencePipeline#findAny()->Optional::: reference pipeline find any
java.util.stream.ReferencePipeline#reduce(P_OUT, BinaryOperator)->P_OUT::: reference pipeline reduce
java.util.stream.ReferencePipeline#reduce(BinaryOperator)->Optional::: reference pipeline reduce
java.util.stream.ReferencePipeline#reduce(R, BiFunction, BinaryOperator)->R::: reference pipeline reduce
java.util.stream.ReferencePipeline#collect(Collector)->R::: reference pipeline collect
java.util.stream.ReferencePipeline#collect(Supplier, BiConsumer, BiConsumer)->R::: reference pipeline collect
java.util.stream.ReferencePipeline#max(Comparator)->Optional::: reference pipeline max
java.util.stream.ReferencePipeline#min(Comparator)->Optional::: reference pipeline min
java.util.stream.ReferencePipeline#count()->long::: reference pipeline count
java.util.stream.ReferencePipeline.Head#opIsStateful()->boolean::: head op is stateful
java.util.stream.ReferencePipeline.Head#opWrapSink(int, Sink)->Sink::: head op wrap sink
java.util.stream.ReferencePipeline.Head#forEach(Consumer)->void::: head for each
java.util.stream.ReferencePipeline.Head#forEachOrdered(Consumer)->void::: head for each ordered
java.util.stream.ReferencePipeline.StatelessOp#opIsStateful()->boolean::: stateless op op is stateful
java.util.stream.ReferencePipeline.StatefulOp#opIsStateful()->boolean::: stateful op op is stateful
java.util.stream.ReferencePipeline.StatefulOp#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction)->Node::: stateful op op evaluate parallel
java.util.stream.Sink#begin(long)->void:::Resets the sink state to receive a fresh data set
java.util.stream.Sink#end()->void:::Indicates that all elements have been pushed
java.util.stream.Sink#cancellationRequested()->boolean:::Indicates that this Sink does not wish to receive any more data.
java.util.stream.Sink#accept(int)->void:::Accepts an int value.
java.util.stream.Sink#accept(long)->void:::Accepts a long value.
java.util.stream.Sink#accept(double)->void:::Accepts a double value.
java.util.stream.Sink.OfInt#accept(int)->void::: of int accept
java.util.stream.Sink.OfInt#accept(Integer)->void::: of int accept
java.util.stream.Sink.OfLong#accept(long)->void::: of long accept
java.util.stream.Sink.OfLong#accept(Long)->void::: of long accept
java.util.stream.Sink.OfDouble#accept(double)->void::: of double accept
java.util.stream.Sink.OfDouble#accept(Double)->void::: of double accept
java.util.stream.Sink.ChainedReference#begin(long)->void::: chained reference begin
java.util.stream.Sink.ChainedReference#end()->void::: chained reference end
java.util.stream.Sink.ChainedReference#cancellationRequested()->boolean::: chained reference cancellation requested
java.util.stream.Sink.ChainedInt#begin(long)->void::: chained int begin
java.util.stream.Sink.ChainedInt#end()->void::: chained int end
java.util.stream.Sink.ChainedInt#cancellationRequested()->boolean::: chained int cancellation requested
java.util.stream.Sink.ChainedLong#begin(long)->void::: chained long begin
java.util.stream.Sink.ChainedLong#end()->void::: chained long end
java.util.stream.Sink.ChainedLong#cancellationRequested()->boolean::: chained long cancellation requested
java.util.stream.Sink.ChainedDouble#begin(long)->void::: chained double begin
java.util.stream.Sink.ChainedDouble#end()->void::: chained double end
java.util.stream.Sink.ChainedDouble#cancellationRequested()->boolean::: chained double cancellation requested
java.util.stream.SliceOps#makeRef(AbstractPipeline, long, long)->Stream:::Appends a "slice" operation to the provided stream
java.util.stream.SliceOps#makeInt(AbstractPipeline, long, long)->IntStream:::Appends a "slice" operation to the provided IntStream
java.util.stream.SliceOps#makeLong(AbstractPipeline, long, long)->LongStream:::Appends a "slice" operation to the provided LongStream
java.util.stream.SliceOps#makeDouble(AbstractPipeline, long, long)->DoubleStream:::Appends a "slice" operation to the provided DoubleStream
java.util.stream.SortedOps#makeRef(AbstractPipeline)->Stream:::Appends a "sorted" operation to the provided stream.
java.util.stream.SortedOps#makeRef(AbstractPipeline, Comparator)->Stream:::Appends a "sorted" operation to the provided stream.
java.util.stream.SortedOps#makeInt(AbstractPipeline)->IntStream:::Appends a "sorted" operation to the provided stream.
java.util.stream.SortedOps#makeLong(AbstractPipeline)->LongStream:::Appends a "sorted" operation to the provided stream.
java.util.stream.SortedOps#makeDouble(AbstractPipeline)->DoubleStream:::Appends a "sorted" operation to the provided stream.
java.util.stream.SpinedBuffer#capacity()->long:::Returns the current capacity of the buffer
java.util.stream.SpinedBuffer#ensureCapacity(long)->void:::Ensure that the buffer has at least capacity to hold the target size
java.util.stream.SpinedBuffer#increaseCapacity()->void:::Force the buffer to increase its capacity.
java.util.stream.SpinedBuffer#get(long)->E:::Retrieve the element at the specified index.
java.util.stream.SpinedBuffer#copyInto(E[], int)->void:::Copy the elements, starting at the specified offset, into the specified array.
java.util.stream.SpinedBuffer#asArray(IntFunction)->E[]:::Create a new array using the specified array factory, and copy the elements into it.
java.util.stream.SpinedBuffer#clear()->void::: spined buffer clear
java.util.stream.SpinedBuffer#iterator()->Iterator::: spined buffer iterator
java.util.stream.SpinedBuffer#forEach(Consumer)->void::: spined buffer for each
java.util.stream.SpinedBuffer#accept(E)->void::: spined buffer accept
java.util.stream.SpinedBuffer#toString()->String::: spined buffer to string
java.util.stream.SpinedBuffer#spliterator()->Spliterator:::Return a Spliterator describing the contents of the buffer.
java.util.stream.SpinedBuffer.OfPrimitive#iterator()->Iterator::: of primitive iterator
java.util.stream.SpinedBuffer.OfPrimitive#forEach(Consumer)->void::: of primitive for each
java.util.stream.SpinedBuffer.OfPrimitive#newArrayArray(int)->T_ARR[]:::Create a new array-of-array of the proper type and size
java.util.stream.SpinedBuffer.OfPrimitive#newArray(int)->T_ARR:::Create a new array of the proper type and size
java.util.stream.SpinedBuffer.OfPrimitive#arrayLength(T_ARR)->int:::Get the length of an array
java.util.stream.SpinedBuffer.OfPrimitive#arrayForEach(T_ARR, int, int, T_CONS)->void:::Iterate an array with the provided consumer
java.util.stream.SpinedBuffer.OfPrimitive#capacity()->long::: of primitive capacity
java.util.stream.SpinedBuffer.OfPrimitive#ensureCapacity(long)->void::: of primitive ensure capacity
java.util.stream.SpinedBuffer.OfPrimitive#increaseCapacity()->void::: of primitive increase capacity
java.util.stream.SpinedBuffer.OfPrimitive#chunkFor(long)->int::: of primitive chunk for
java.util.stream.SpinedBuffer.OfPrimitive#copyInto(T_ARR, int)->void::: of primitive copy into
java.util.stream.SpinedBuffer.OfPrimitive#asPrimitiveArray()->T_ARR::: of primitive as primitive array
java.util.stream.SpinedBuffer.OfPrimitive#preAccept()->void::: of primitive pre accept
java.util.stream.SpinedBuffer.OfPrimitive#clear()->void::: of primitive clear
java.util.stream.SpinedBuffer.OfPrimitive#forEach(T_CONS)->void::: of primitive for each
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#newSpliterator(int, int, int, int)->T_SPLITR::: base spliterator new spliterator
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#arrayForOne(T_ARR, int, T_CONS)->void::: base spliterator array for one
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#arraySpliterator(T_ARR, int, int)->T_SPLITR::: base spliterator array spliterator
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#estimateSize()->long::: base spliterator estimate size
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#characteristics()->int::: base spliterator characteristics
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#tryAdvance(T_CONS)->boolean::: base spliterator try advance
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#forEachRemaining(T_CONS)->void::: base spliterator for each remaining
java.util.stream.SpinedBuffer.OfPrimitive.BaseSpliterator#trySplit()->T_SPLITR::: base spliterator try split
java.util.stream.SpinedBuffer.OfInt#forEach(Consumer)->void::: of int for each
java.util.stream.SpinedBuffer.OfInt#newArrayArray(int)->int[][]::: of int new array array
java.util.stream.SpinedBuffer.OfInt#newArray(int)->int[]::: of int new array
java.util.stream.SpinedBuffer.OfInt#arrayLength(int[])->int::: of int array length
java.util.stream.SpinedBuffer.OfInt#arrayForEach(int[], int, int, IntConsumer)->void::: of int array for each
java.util.stream.SpinedBuffer.OfInt#accept(int)->void::: of int accept
java.util.stream.SpinedBuffer.OfInt#get(long)->int::: of int get
java.util.stream.SpinedBuffer.OfInt#iterator()->PrimitiveIterator.OfInt::: of int iterator
java.util.stream.SpinedBuffer.OfInt#spliterator()->Spliterator.OfInt::: of int spliterator
java.util.stream.SpinedBuffer.OfInt#toString()->String::: of int to string
java.util.stream.SpinedBuffer.OfLong#forEach(Consumer)->void::: of long for each
java.util.stream.SpinedBuffer.OfLong#newArrayArray(int)->long[][]::: of long new array array
java.util.stream.SpinedBuffer.OfLong#newArray(int)->long[]::: of long new array
java.util.stream.SpinedBuffer.OfLong#arrayLength(long[])->int::: of long array length
java.util.stream.SpinedBuffer.OfLong#arrayForEach(long[], int, int, LongConsumer)->void::: of long array for each
java.util.stream.SpinedBuffer.OfLong#accept(long)->void::: of long accept
java.util.stream.SpinedBuffer.OfLong#get(long)->long::: of long get
java.util.stream.SpinedBuffer.OfLong#iterator()->PrimitiveIterator.OfLong::: of long iterator
java.util.stream.SpinedBuffer.OfLong#spliterator()->Spliterator.OfLong::: of long spliterator
java.util.stream.SpinedBuffer.OfLong#toString()->String::: of long to string
java.util.stream.SpinedBuffer.OfDouble#forEach(Consumer)->void::: of double for each
java.util.stream.SpinedBuffer.OfDouble#newArrayArray(int)->double[][]::: of double new array array
java.util.stream.SpinedBuffer.OfDouble#newArray(int)->double[]::: of double new array
java.util.stream.SpinedBuffer.OfDouble#arrayLength(double[])->int::: of double array length
java.util.stream.SpinedBuffer.OfDouble#arrayForEach(double[], int, int, DoubleConsumer)->void::: of double array for each
java.util.stream.SpinedBuffer.OfDouble#accept(double)->void::: of double accept
java.util.stream.SpinedBuffer.OfDouble#get(long)->double::: of double get
java.util.stream.SpinedBuffer.OfDouble#iterator()->PrimitiveIterator.OfDouble::: of double iterator
java.util.stream.SpinedBuffer.OfDouble#spliterator()->Spliterator.OfDouble::: of double spliterator
java.util.stream.SpinedBuffer.OfDouble#toString()->String::: of double to string
java.util.stream.Stream#filter(Predicate)->Stream:::Returns a stream consisting of the elements of this stream that match the given predicate
java.util.stream.Stream#map(Function)->Stream:::Returns a stream consisting of the results of applying the given function to the elements of this stream
java.util.stream.Stream#mapToInt(ToIntFunction)->IntStream:::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.Stream#mapToLong(ToLongFunction)->LongStream:::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.Stream#mapToDouble(ToDoubleFunction)->DoubleStream:::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
java.util.stream.Stream#flatMap(Function>)->Stream:::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.Stream#flatMapToInt(Function)->IntStream:::Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.Stream#flatMapToLong(Function)->LongStream:::Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.Stream#flatMapToDouble(Function)->DoubleStream:::Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
java.util.stream.Stream#distinct()->Stream:::Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream
java.util.stream.Stream#sorted()->Stream:::Returns a stream consisting of the elements of this stream, sorted according to natural order
java.util.stream.Stream#sorted(Comparator)->Stream:::Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator
java.util.stream.Stream#peek(Consumer)->Stream:::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
java.util.stream.Stream#limit(long)->Stream:::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
java.util.stream.Stream#skip(long)->Stream:::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
java.util.stream.Stream#takeWhile(Predicate)->Stream:::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
java.util.stream.Stream#dropWhile(Predicate)->Stream:::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
java.util.stream.Stream#forEach(Consumer)->void:::Performs an action for each element of this stream
java.util.stream.Stream#forEachOrdered(Consumer)->void:::Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order
java.util.stream.Stream#toArray()->Object[]:::Returns an array containing the elements of this stream
java.util.stream.Stream#toArray(IntFunction)->A[]:::Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing
java.util.stream.Stream#reduce(T, BinaryOperator)->T:::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
java.util.stream.Stream#reduce(BinaryOperator)->Optional:::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any
java.util.stream.Stream#reduce(U, BiFunction, BinaryOperator)->U:::Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions
java.util.stream.Stream#collect(Supplier, BiConsumer, BiConsumer)->R:::Performs a mutable reduction operation on the elements of this stream
java.util.stream.Stream#collect(Collector)->R:::Performs a mutable reduction operation on the elements of this stream using a Collector
java.util.stream.Stream#min(Comparator)->Optional:::Returns the minimum element of this stream according to the provided Comparator
java.util.stream.Stream#max(Comparator)->Optional:::Returns the maximum element of this stream according to the provided Comparator
java.util.stream.Stream#count()->long:::Returns the count of elements in this stream
java.util.stream.Stream#anyMatch(Predicate)->boolean:::Returns whether any elements of this stream match the provided predicate
java.util.stream.Stream#allMatch(Predicate)->boolean:::Returns whether all elements of this stream match the provided predicate
java.util.stream.Stream#noneMatch(Predicate)->boolean:::Returns whether no elements of this stream match the provided predicate
java.util.stream.Stream#findFirst()->Optional:::Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty
java.util.stream.Stream#findAny()->Optional:::Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty
java.util.stream.Stream#builder()->Builder:::Returns a builder for a Stream.
java.util.stream.Stream#empty()->Stream:::Returns an empty sequential Stream.
java.util.stream.Stream#of(T)->Stream:::Returns a sequential Stream containing a single element.
java.util.stream.Stream#ofNullable(T)->Stream:::Returns a sequential Stream containing a single element, if non-null, otherwise returns an empty Stream.
java.util.stream.Stream#of(T...)->Stream:::Returns a sequential ordered stream whose elements are the specified values.
java.util.stream.Stream#iterate(T, UnaryOperator)->Stream:::Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
java.util.stream.Stream#iterate(T, Predicate, UnaryOperator)->Stream:::Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
java.util.stream.Stream#generate(Supplier)->Stream:::Returns an infinite sequential unordered stream where each element is generated by the provided Supplier
java.util.stream.Stream#concat(Stream, Stream)->Stream:::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
java.util.stream.Stream.Builder#accept(T)->void:::Adds an element to the stream being built.
java.util.stream.Stream.Builder#add(T)->Builder:::Adds an element to the stream being built.
java.util.stream.Stream.Builder#build()->Stream:::Builds the stream, transitioning this builder to the built state
java.util.stream.Streams.RangeIntSpliterator#tryAdvance(IntConsumer)->boolean::: range int spliterator try advance
java.util.stream.Streams.RangeIntSpliterator#forEachRemaining(IntConsumer)->void::: range int spliterator for each remaining
java.util.stream.Streams.RangeIntSpliterator#estimateSize()->long::: range int spliterator estimate size
java.util.stream.Streams.RangeIntSpliterator#characteristics()->int::: range int spliterator characteristics
java.util.stream.Streams.RangeIntSpliterator#getComparator()->Comparator::: range int spliterator get comparator
java.util.stream.Streams.RangeIntSpliterator#trySplit()->Spliterator.OfInt::: range int spliterator try split
java.util.stream.Streams.RangeLongSpliterator#tryAdvance(LongConsumer)->boolean::: range long spliterator try advance
java.util.stream.Streams.RangeLongSpliterator#forEachRemaining(LongConsumer)->void::: range long spliterator for each remaining
java.util.stream.Streams.RangeLongSpliterator#estimateSize()->long::: range long spliterator estimate size
java.util.stream.Streams.RangeLongSpliterator#characteristics()->int::: range long spliterator characteristics
java.util.stream.Streams.RangeLongSpliterator#getComparator()->Comparator::: range long spliterator get comparator
java.util.stream.Streams.RangeLongSpliterator#trySplit()->Spliterator.OfLong::: range long spliterator try split
java.util.stream.Streams.StreamBuilderImpl#accept(T)->void::: stream builder impl accept
java.util.stream.Streams.StreamBuilderImpl#add(T)->Stream.Builder::: stream builder impl add
java.util.stream.Streams.StreamBuilderImpl#build()->Stream::: stream builder impl build
java.util.stream.Streams.StreamBuilderImpl#tryAdvance(Consumer)->boolean::: stream builder impl try advance
java.util.stream.Streams.StreamBuilderImpl#forEachRemaining(Consumer)->void::: stream builder impl for each remaining
java.util.stream.Streams.IntStreamBuilderImpl#accept(int)->void::: int stream builder impl accept
java.util.stream.Streams.IntStreamBuilderImpl#build()->IntStream::: int stream builder impl build
java.util.stream.Streams.IntStreamBuilderImpl#tryAdvance(IntConsumer)->boolean::: int stream builder impl try advance
java.util.stream.Streams.IntStreamBuilderImpl#forEachRemaining(IntConsumer)->void::: int stream builder impl for each remaining
java.util.stream.Streams.LongStreamBuilderImpl#accept(long)->void::: long stream builder impl accept
java.util.stream.Streams.LongStreamBuilderImpl#build()->LongStream::: long stream builder impl build
java.util.stream.Streams.LongStreamBuilderImpl#tryAdvance(LongConsumer)->boolean::: long stream builder impl try advance
java.util.stream.Streams.LongStreamBuilderImpl#forEachRemaining(LongConsumer)->void::: long stream builder impl for each remaining
java.util.stream.Streams.DoubleStreamBuilderImpl#accept(double)->void::: double stream builder impl accept
java.util.stream.Streams.DoubleStreamBuilderImpl#build()->DoubleStream::: double stream builder impl build
java.util.stream.Streams.DoubleStreamBuilderImpl#tryAdvance(DoubleConsumer)->boolean::: double stream builder impl try advance
java.util.stream.Streams.DoubleStreamBuilderImpl#forEachRemaining(DoubleConsumer)->void::: double stream builder impl for each remaining
java.util.stream.Streams.ConcatSpliterator#trySplit()->T_SPLITR::: concat spliterator try split
java.util.stream.Streams.ConcatSpliterator#tryAdvance(Consumer)->boolean::: concat spliterator try advance
java.util.stream.Streams.ConcatSpliterator#forEachRemaining(Consumer)->void::: concat spliterator for each remaining
java.util.stream.Streams.ConcatSpliterator#estimateSize()->long::: concat spliterator estimate size
java.util.stream.Streams.ConcatSpliterator#characteristics()->int::: concat spliterator characteristics
java.util.stream.Streams.ConcatSpliterator#getComparator()->Comparator::: concat spliterator get comparator
java.util.stream.Streams#composeWithExceptions(Runnable, Runnable)->Runnable:::Given two Runnables, return a Runnable that executes both in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
java.util.stream.Streams#composedClose(BaseStream, BaseStream)->Runnable:::Given two streams, return a Runnable that executes both of their BaseStream#close methods in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
java.util.stream.StreamSpliterators.WrappingSpliterator#wrap(Spliterator)->WrappingSpliterator::: wrapping spliterator wrap
java.util.stream.StreamSpliterators.WrappingSpliterator#initPartialTraversalState()->void::: wrapping spliterator init partial traversal state
java.util.stream.StreamSpliterators.WrappingSpliterator#tryAdvance(Consumer)->boolean::: wrapping spliterator try advance
java.util.stream.StreamSpliterators.WrappingSpliterator#forEachRemaining(Consumer)->void::: wrapping spliterator for each remaining
java.util.stream.StreamSpliterators.IntWrappingSpliterator#wrap(Spliterator)->AbstractWrappingSpliterator::: int wrapping spliterator wrap
java.util.stream.StreamSpliterators.IntWrappingSpliterator#initPartialTraversalState()->void::: int wrapping spliterator init partial traversal state
java.util.stream.StreamSpliterators.IntWrappingSpliterator#trySplit()->Spliterator.OfInt::: int wrapping spliterator try split
java.util.stream.StreamSpliterators.IntWrappingSpliterator#tryAdvance(IntConsumer)->boolean::: int wrapping spliterator try advance
java.util.stream.StreamSpliterators.IntWrappingSpliterator#forEachRemaining(IntConsumer)->void::: int wrapping spliterator for each remaining
java.util.stream.StreamSpliterators.LongWrappingSpliterator#wrap(Spliterator)->AbstractWrappingSpliterator::: long wrapping spliterator wrap
java.util.stream.StreamSpliterators.LongWrappingSpliterator#initPartialTraversalState()->void::: long wrapping spliterator init partial traversal state
java.util.stream.StreamSpliterators.LongWrappingSpliterator#trySplit()->Spliterator.OfLong::: long wrapping spliterator try split
java.util.stream.StreamSpliterators.LongWrappingSpliterator#tryAdvance(LongConsumer)->boolean::: long wrapping spliterator try advance
java.util.stream.StreamSpliterators.LongWrappingSpliterator#forEachRemaining(LongConsumer)->void::: long wrapping spliterator for each remaining
java.util.stream.StreamSpliterators.DoubleWrappingSpliterator#wrap(Spliterator)->AbstractWrappingSpliterator::: double wrapping spliterator wrap
java.util.stream.StreamSpliterators.DoubleWrappingSpliterator#initPartialTraversalState()->void::: double wrapping spliterator init partial traversal state
java.util.stream.StreamSpliterators.DoubleWrappingSpliterator#trySplit()->Spliterator.OfDouble::: double wrapping spliterator try split
java.util.stream.StreamSpliterators.DoubleWrappingSpliterator#tryAdvance(DoubleConsumer)->boolean::: double wrapping spliterator try advance
java.util.stream.StreamSpliterators.DoubleWrappingSpliterator#forEachRemaining(DoubleConsumer)->void::: double wrapping spliterator for each remaining
java.util.stream.StreamSpliterators.DelegatingSpliterator#get()->T_SPLITR::: delegating spliterator get
java.util.stream.StreamSpliterators.DelegatingSpliterator#trySplit()->T_SPLITR::: delegating spliterator try split
java.util.stream.StreamSpliterators.DelegatingSpliterator#tryAdvance(Consumer)->boolean::: delegating spliterator try advance
java.util.stream.StreamSpliterators.DelegatingSpliterator#forEachRemaining(Consumer)->void::: delegating spliterator for each remaining
java.util.stream.StreamSpliterators.DelegatingSpliterator#estimateSize()->long::: delegating spliterator estimate size
java.util.stream.StreamSpliterators.DelegatingSpliterator#characteristics()->int::: delegating spliterator characteristics
java.util.stream.StreamSpliterators.DelegatingSpliterator#getComparator()->Comparator::: delegating spliterator get comparator
java.util.stream.StreamSpliterators.DelegatingSpliterator#getExactSizeIfKnown()->long::: delegating spliterator get exact size if known
java.util.stream.StreamSpliterators.DelegatingSpliterator#toString()->String::: delegating spliterator to string
java.util.stream.StreamSpliterators.DelegatingSpliterator.OfPrimitive#tryAdvance(T_CONS)->boolean::: of primitive try advance
java.util.stream.StreamSpliterators.DelegatingSpliterator.OfPrimitive#forEachRemaining(T_CONS)->void::: of primitive for each remaining
java.util.stream.StreamSpliterators.SliceSpliterator#makeSpliterator(T_SPLITR, long, long, long, long)->T_SPLITR::: slice spliterator make spliterator
java.util.stream.StreamSpliterators.SliceSpliterator#trySplit()->T_SPLITR::: slice spliterator try split
java.util.stream.StreamSpliterators.SliceSpliterator#estimateSize()->long::: slice spliterator estimate size
java.util.stream.StreamSpliterators.SliceSpliterator#characteristics()->int::: slice spliterator characteristics
java.util.stream.StreamSpliterators.SliceSpliterator.OfRef#makeSpliterator(Spliterator, long, long, long, long)->Spliterator::: of ref make spliterator
java.util.stream.StreamSpliterators.SliceSpliterator.OfRef#tryAdvance(Consumer)->boolean::: of ref try advance
java.util.stream.StreamSpliterators.SliceSpliterator.OfRef#forEachRemaining(Consumer)->void::: of ref for each remaining
java.util.stream.StreamSpliterators.SliceSpliterator.OfPrimitive#tryAdvance(T_CONS)->boolean::: of primitive try advance
java.util.stream.StreamSpliterators.SliceSpliterator.OfPrimitive#forEachRemaining(T_CONS)->void::: of primitive for each remaining
java.util.stream.StreamSpliterators.SliceSpliterator.OfPrimitive#emptyConsumer()->T_CONS::: of primitive empty consumer
java.util.stream.StreamSpliterators.SliceSpliterator.OfInt#makeSpliterator(Spliterator.OfInt, long, long, long, long)->Spliterator.OfInt::: of int make spliterator
java.util.stream.StreamSpliterators.SliceSpliterator.OfInt#emptyConsumer()->IntConsumer::: of int empty consumer
java.util.stream.StreamSpliterators.SliceSpliterator.OfLong#makeSpliterator(Spliterator.OfLong, long, long, long, long)->Spliterator.OfLong::: of long make spliterator
java.util.stream.StreamSpliterators.SliceSpliterator.OfLong#emptyConsumer()->LongConsumer::: of long empty consumer
java.util.stream.StreamSpliterators.SliceSpliterator.OfDouble#makeSpliterator(Spliterator.OfDouble, long, long, long, long)->Spliterator.OfDouble::: of double make spliterator
java.util.stream.StreamSpliterators.SliceSpliterator.OfDouble#emptyConsumer()->DoubleConsumer::: of double empty consumer
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#acquirePermits(long)->long:::Acquire permission to skip or process elements
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#permitStatus()->PermitStatus:::Call to check if permits might be available before acquiring data
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#trySplit()->T_SPLITR::: unordered slice spliterator try split
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#makeSpliterator(T_SPLITR)->T_SPLITR::: unordered slice spliterator make spliterator
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#estimateSize()->long::: unordered slice spliterator estimate size
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator#characteristics()->int::: unordered slice spliterator characteristics
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfRef#accept(T)->void::: of ref accept
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfRef#tryAdvance(Consumer)->boolean::: of ref try advance
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfRef#forEachRemaining(Consumer)->void::: of ref for each remaining
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfRef#makeSpliterator(Spliterator)->Spliterator::: of ref make spliterator
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfPrimitive#tryAdvance(T_CONS)->boolean::: of primitive try advance
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfPrimitive#acceptConsumed(T_CONS)->void::: of primitive accept consumed
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfPrimitive#forEachRemaining(T_CONS)->void::: of primitive for each remaining
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfPrimitive#bufferCreate(int)->T_BUFF::: of primitive buffer create
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfInt#accept(int)->void::: of int accept
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfInt#acceptConsumed(IntConsumer)->void::: of int accept consumed
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfInt#bufferCreate(int)->ArrayBuffer.OfInt::: of int buffer create
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfInt#makeSpliterator(Spliterator.OfInt)->Spliterator.OfInt::: of int make spliterator
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfLong#accept(long)->void::: of long accept
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfLong#acceptConsumed(LongConsumer)->void::: of long accept consumed
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfLong#bufferCreate(int)->ArrayBuffer.OfLong::: of long buffer create
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfLong#makeSpliterator(Spliterator.OfLong)->Spliterator.OfLong::: of long make spliterator
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfDouble#accept(double)->void::: of double accept
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfDouble#acceptConsumed(DoubleConsumer)->void::: of double accept consumed
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfDouble#bufferCreate(int)->ArrayBuffer.OfDouble::: of double buffer create
java.util.stream.StreamSpliterators.UnorderedSliceSpliterator.OfDouble#makeSpliterator(Spliterator.OfDouble)->Spliterator.OfDouble::: of double make spliterator
java.util.stream.StreamSpliterators.DistinctSpliterator#accept(T)->void::: distinct spliterator accept
java.util.stream.StreamSpliterators.DistinctSpliterator#tryAdvance(Consumer)->boolean::: distinct spliterator try advance
java.util.stream.StreamSpliterators.DistinctSpliterator#forEachRemaining(Consumer)->void::: distinct spliterator for each remaining
java.util.stream.StreamSpliterators.DistinctSpliterator#trySplit()->Spliterator::: distinct spliterator try split
java.util.stream.StreamSpliterators.DistinctSpliterator#estimateSize()->long::: distinct spliterator estimate size
java.util.stream.StreamSpliterators.DistinctSpliterator#characteristics()->int::: distinct spliterator characteristics
java.util.stream.StreamSpliterators.DistinctSpliterator#getComparator()->Comparator::: distinct spliterator get comparator
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator#estimateSize()->long::: infinite supplying spliterator estimate size
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator#characteristics()->int::: infinite supplying spliterator characteristics
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfRef#tryAdvance(Consumer)->boolean::: of ref try advance
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfRef#trySplit()->Spliterator::: of ref try split
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfInt#tryAdvance(IntConsumer)->boolean::: of int try advance
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfInt#trySplit()->Spliterator.OfInt::: of int try split
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfLong#tryAdvance(LongConsumer)->boolean::: of long try advance
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfLong#trySplit()->Spliterator.OfLong::: of long try split
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfDouble#tryAdvance(DoubleConsumer)->boolean::: of double try advance
java.util.stream.StreamSpliterators.InfiniteSupplyingSpliterator.OfDouble#trySplit()->Spliterator.OfDouble::: of double try split
java.util.stream.StreamSpliterators.ArrayBuffer#reset()->void::: array buffer reset
java.util.stream.StreamSpliterators.ArrayBuffer.OfRef#accept(T)->void::: of ref accept
java.util.stream.StreamSpliterators.ArrayBuffer.OfRef#forEach(Consumer, long)->void::: of ref for each
java.util.stream.StreamSpliterators.ArrayBuffer.OfPrimitive#reset()->void::: of primitive reset
java.util.stream.StreamSpliterators.ArrayBuffer.OfPrimitive#forEach(T_CONS, long)->void::: of primitive for each
java.util.stream.StreamSpliterators.ArrayBuffer.OfInt#accept(int)->void::: of int accept
java.util.stream.StreamSpliterators.ArrayBuffer.OfInt#forEach(IntConsumer, long)->void::: of int for each
java.util.stream.StreamSpliterators.ArrayBuffer.OfLong#accept(long)->void::: of long accept
java.util.stream.StreamSpliterators.ArrayBuffer.OfLong#forEach(LongConsumer, long)->void::: of long for each
java.util.stream.StreamSpliterators.ArrayBuffer.OfDouble#accept(double)->void::: of double accept
java.util.stream.StreamSpliterators.ArrayBuffer.OfDouble#forEach(DoubleConsumer, long)->void::: of double for each
java.util.stream.StreamSupport#stream(Spliterator, boolean)->Stream:::Creates a new sequential or parallel Stream from a Spliterator
java.util.stream.StreamSupport#stream(Supplier>, int, boolean)->Stream:::Creates a new sequential or parallel Stream from a Supplier of Spliterator
java.util.stream.StreamSupport#intStream(Spliterator.OfInt, boolean)->IntStream:::Creates a new sequential or parallel IntStream from a Spliterator.OfInt
java.util.stream.StreamSupport#intStream(Supplier, int, boolean)->IntStream:::Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt
java.util.stream.StreamSupport#longStream(Spliterator.OfLong, boolean)->LongStream:::Creates a new sequential or parallel LongStream from a Spliterator.OfLong
java.util.stream.StreamSupport#longStream(Supplier, int, boolean)->LongStream:::Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong
java.util.stream.StreamSupport#doubleStream(Spliterator.OfDouble, boolean)->DoubleStream:::Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble
java.util.stream.StreamSupport#doubleStream(Supplier, int, boolean)->DoubleStream:::Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble
java.util.stream.TerminalOp#inputShape()->StreamShape:::Gets the shape of the input type of this operation.
java.util.stream.TerminalOp#getOpFlags()->int:::Gets the stream flags of the operation
java.util.stream.TerminalOp#evaluateParallel(PipelineHelper, Spliterator)->R:::Performs a parallel evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
java.util.stream.TerminalOp#evaluateSequential(PipelineHelper, Spliterator)->R:::Performs a sequential evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
java.util.stream.Tripwire#trip(Class, String)->void:::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
java.util.stream.WhileOps#makeTakeWhileRef(AbstractPipeline, Predicate)->Stream:::Appends a "takeWhile" operation to the provided Stream.
java.util.stream.WhileOps#makeTakeWhileInt(AbstractPipeline, IntPredicate)->IntStream:::Appends a "takeWhile" operation to the provided IntStream.
java.util.stream.WhileOps#makeTakeWhileLong(AbstractPipeline, LongPredicate)->LongStream:::Appends a "takeWhile" operation to the provided LongStream.
java.util.stream.WhileOps#makeTakeWhileDouble(AbstractPipeline, DoublePredicate)->DoubleStream:::Appends a "takeWhile" operation to the provided DoubleStream.
java.util.stream.WhileOps.DropWhileOp#opWrapSink(Sink, boolean)->DropWhileSink:::Accepts a Sink which will receive the results of this dropWhile operation, and return a DropWhileSink which accepts elements and which performs the dropWhile operation passing the results to the provided Sink.
java.util.stream.WhileOps.DropWhileSink#getDropCount()->long::: drop while sink get drop count
java.util.stream.WhileOps#makeDropWhileRef(AbstractPipeline, Predicate)->Stream:::Appends a "dropWhile" operation to the provided Stream.
java.util.stream.WhileOps#makeDropWhileInt(AbstractPipeline, IntPredicate)->IntStream:::Appends a "dropWhile" operation to the provided IntStream.
java.util.stream.WhileOps#makeDropWhileLong(AbstractPipeline, LongPredicate)->LongStream:::Appends a "dropWhile" operation to the provided LongStream.
java.util.stream.WhileOps#makeDropWhileDouble(AbstractPipeline, DoublePredicate)->DoubleStream:::Appends a "dropWhile" operation to the provided DoubleStream.
java.util.stream.WhileOps.UnorderedWhileSpliterator#estimateSize()->long::: unordered while spliterator estimate size
java.util.stream.WhileOps.UnorderedWhileSpliterator#characteristics()->int::: unordered while spliterator characteristics
java.util.stream.WhileOps.UnorderedWhileSpliterator#getExactSizeIfKnown()->long::: unordered while spliterator get exact size if known
java.util.stream.WhileOps.UnorderedWhileSpliterator#getComparator()->Comparator::: unordered while spliterator get comparator
java.util.stream.WhileOps.UnorderedWhileSpliterator#trySplit()->T_SPLITR::: unordered while spliterator try split
java.util.stream.WhileOps.UnorderedWhileSpliterator#checkCancelOnCount()->boolean::: unordered while spliterator check cancel on count
java.util.stream.WhileOps.UnorderedWhileSpliterator#makeSpliterator(T_SPLITR)->T_SPLITR::: unordered while spliterator make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef#accept(T)->void::: of ref accept
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef.Taking#tryAdvance(Consumer)->boolean::: taking try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef.Taking#trySplit()->Spliterator::: taking try split
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef.Taking#makeSpliterator(Spliterator)->Spliterator::: taking make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef.Dropping#tryAdvance(Consumer)->boolean::: dropping try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfRef.Dropping#makeSpliterator(Spliterator)->Spliterator::: dropping make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt#accept(int)->void::: of int accept
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt.Taking#tryAdvance(IntConsumer)->boolean::: taking try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt.Taking#trySplit()->Spliterator.OfInt::: taking try split
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt.Taking#makeSpliterator(Spliterator.OfInt)->Spliterator.OfInt::: taking make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt.Dropping#tryAdvance(IntConsumer)->boolean::: dropping try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfInt.Dropping#makeSpliterator(Spliterator.OfInt)->Spliterator.OfInt::: dropping make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong#accept(long)->void::: of long accept
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong.Taking#tryAdvance(LongConsumer)->boolean::: taking try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong.Taking#trySplit()->Spliterator.OfLong::: taking try split
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong.Taking#makeSpliterator(Spliterator.OfLong)->Spliterator.OfLong::: taking make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong.Dropping#tryAdvance(LongConsumer)->boolean::: dropping try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfLong.Dropping#makeSpliterator(Spliterator.OfLong)->Spliterator.OfLong::: dropping make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble#accept(double)->void::: of double accept
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble.Taking#tryAdvance(DoubleConsumer)->boolean::: taking try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble.Taking#trySplit()->Spliterator.OfDouble::: taking try split
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble.Taking#makeSpliterator(Spliterator.OfDouble)->Spliterator.OfDouble::: taking make spliterator
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble.Dropping#tryAdvance(DoubleConsumer)->boolean::: dropping try advance
java.util.stream.WhileOps.UnorderedWhileSpliterator.OfDouble.Dropping#makeSpliterator(Spliterator.OfDouble)->Spliterator.OfDouble::: dropping make spliterator

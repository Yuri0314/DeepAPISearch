GraphOutputTest#testWritableByteChannel()::: graph output test test writable byte channel:::out->new->ByteArrayOutputStream->channel->Channels->newChannel->data->generateData->graphOutput->GraphOutput->new->MockGraphStructure->newBuilder->protocolVersion->embedded->build->try->closable->closable->isOpen->assertTrue->closable->write->catch->finally->graphOutput->isOpen->assertFalse->data->array->out->toByteArray->assertArrayEquals
GraphOutputTest#testWriteDuringPrint()::: graph output test test write during print:::out->new->ByteArrayOutputStream->channel->Channels->newChannel->action->new->Action->try->graphOutput->GraphOutput->new->MockGraphStructure->newBuilder->protocolVersion->build->try->graphOutput->new->MockGraph->Collections->emptyMap->print->fail->catch->finally->catch->finally
GraphOutputTest#testEmbeddedWritableByteChannel()::: graph output test test embedded writable byte channel:::expected->new->ByteArrayOutputStream->expectedChannel->Channels->newChannel->properties->Collections->singletonMap->try->graphOutput->GraphOutput->new->MockGraphStructure->newBuilder->protocolVersion->build->graphOutput->new->MockGraph->print->graphOutput->ByteBuffer->allocate->write->graphOutput->new->MockGraph->print->catch->finally->embedded->new->ByteArrayOutputStream->embeddChannel->Channels->newChannel->new->SharedWritableByteChannel->try->try->baseOutput->GraphOutput->new->MockGraphStructure->newBuilder->protocolVersion->build->try->embeddedOutput->GraphOutput->new->MockGraphStructure->newBuilder->protocolVersion->embedded->build->embeddedOutput->new->MockGraph->print->baseOutput->new->MockGraph->print->catch->finally->catch->finally->catch->finally->embeddChannel->realClose->expected->toByteArray->embedded->toByteArray->assertArrayEquals
GraphOutputTest#generateData(int)::: graph output test generate data:::buffer->ByteBuffer->allocate->for->i->buffer->limit->return
GraphOutputTest.SharedWritableByteChannel#write(ByteBuffer)::: shared writable byte channel write:::return->delegate->write
GraphOutputTest.SharedWritableByteChannel#isOpen()::: shared writable byte channel is open:::return->delegate->isOpen
GraphOutputTest.SharedWritableByteChannel#close()::: shared writable byte channel close:::
GraphOutputTest.SharedWritableByteChannel#realClose()::: shared writable byte channel real close:::delegate->close
GraphOutputTest.MockGraphStructure#graph(MockGraph, Object)::: mock graph structure graph:::onEnter->return
GraphOutputTest.MockGraphStructure#nodes(MockGraph)::: mock graph structure nodes:::onEnter->return->Collections->emptySet
GraphOutputTest.MockGraphStructure#nodesCount(MockGraph)::: mock graph structure nodes count:::onEnter->return
GraphOutputTest.MockGraphStructure#nodeId(Void)::: mock graph structure node id:::onEnter->return
GraphOutputTest.MockGraphStructure#nodeHasPredecessor(Void)::: mock graph structure node has predecessor:::onEnter->return
GraphOutputTest.MockGraphStructure#nodeProperties(MockGraph, Void, Map)::: mock graph structure node properties:::onEnter
GraphOutputTest.MockGraphStructure#node(Object)::: mock graph structure node:::onEnter->return
GraphOutputTest.MockGraphStructure#nodeClass(Object)::: mock graph structure node class:::onEnter->return
GraphOutputTest.MockGraphStructure#classForNode(Void)::: mock graph structure class for node:::onEnter->return
GraphOutputTest.MockGraphStructure#nameTemplate(Void)::: mock graph structure name template:::onEnter->return
GraphOutputTest.MockGraphStructure#nodeClassType(Void)::: mock graph structure node class type:::onEnter->return
GraphOutputTest.MockGraphStructure#portInputs(Void)::: mock graph structure port inputs:::onEnter->return
GraphOutputTest.MockGraphStructure#portOutputs(Void)::: mock graph structure port outputs:::onEnter->return
GraphOutputTest.MockGraphStructure#portSize(Void)::: mock graph structure port size:::onEnter->return
GraphOutputTest.MockGraphStructure#edgeDirect(Void, int)::: mock graph structure edge direct:::onEnter->return
GraphOutputTest.MockGraphStructure#edgeName(Void, int)::: mock graph structure edge name:::onEnter->return
GraphOutputTest.MockGraphStructure#edgeType(Void, int)::: mock graph structure edge type:::onEnter->return
GraphOutputTest.MockGraphStructure#edgeNodes(MockGraph, Void, Void, int)::: mock graph structure edge nodes:::onEnter->return
GraphOutputTest.MockGraphStructure#onEnter()::: mock graph structure on enter:::if->enterAction->run
GraphSnippetTest#dumpTheFile()::: graph snippet test dump the file:::snippets->try->Class->forName->catch->Assume->assumeNoException->finally->dump->try->snippets->getDeclaredMethod->dump->setAccessible->catch->Assume->dump->isAccessible->assumeTrue->finally->diamond->File->createTempFile->dump->invoke->diamond->length->assertTrue
NodeEncodingTest#initOutput()::: node encoding test init output:::new->ByteArrayOutputStream
NodeEncodingTest#version40TheNodeIsntDumpedWithItsID()::: node encoding test version40 the node isnt dumped with its d:::runTheNodeIsntDumpedWithItsID
NodeEncodingTest#defaultVersionTheNodeIsntDumpedWithItsID()::: node encoding test default version the node isnt dumped with its d:::runTheNodeIsntDumpedWithItsID
NodeEncodingTest#runTheNodeIsntDumpedWithItsID(boolean)::: node encoding test run the node isnt dumped with its d:::w->Channels->newChannel->graph->new->MockGraph->clazz->new->MockNodeClass->node->new->MockNode->try->dump->GraphOutput->new->MockStructure->newBuilder->protocolVersion->build->GraphOutput->new->MockStructure->newBuilder->build->dump->Collections->singletonMap->beginGroup->dump->endGroup->catch->finally->assertEquals->assertEquals->out->toByteArray->assertByte->assertEquals->assertEquals->assertFalse
NodeEncodingTest#dumpingNodeInVersion10()::: node encoding test dumping node in version10:::runTheNodeIsTreatedAsString
NodeEncodingTest#runTheNodeIsTreatedAsString(boolean)::: node encoding test run the node is treated as string:::w->Channels->newChannel->graph->new->MockGraph->clazz->new->MockNodeClass->node->new->MockNode->try->dump->GraphOutput->new->MockStructure->newBuilder->protocolVersion->build->GraphOutput->new->MockStructure->newBuilder->build->dump->Collections->singletonMap->beginGroup->dump->endGroup->catch->finally->assertEquals->assertEquals->out->toByteArray->assertByte->assertEquals->assertEquals->assertTrue
NodeEncodingTest#dumpingNodeInVersion15()::: node encoding test dumping node in version15:::runTheNodeIsTreatedPoolEntry
NodeEncodingTest#runTheNodeIsTreatedPoolEntry(boolean)::: node encoding test run the node is treated pool entry:::w->Channels->newChannel->graph->new->MockGraph->clazz->new->MockNodeClass->node->new->MockNode->try->dump->GraphOutput->new->MockStructure->newBuilder->protocolVersion->build->GraphOutput->new->MockStructure->newBuilder->build->dump->Collections->singletonMap->beginGroup->dump->endGroup->catch->finally->assertEquals->assertEquals->out->toByteArray->assertByte->assertTrue->assertEquals->assertFalse
NodeEncodingTest#dumpingNodeTwiceInVersion4()::: node encoding test dumping node twice in version4:::w->Channels->newChannel->graph->new->MockGraph->clazz->new->MockNodeClass->node->new->MockNode->try->dump->GraphOutput->new->MockStructure->newBuilder->protocolVersion->build->props->new->LinkedHashMap<>->props->put->props->put->props->put->dump->beginGroup->dump->endGroup->catch->finally->assertEquals->assertEquals->out->toByteArray->assertByte->assertEquals->assertEquals->assertFalse
NodeEncodingTest#assertByte(boolean, byte[], int...)::: node encoding test assert byte:::found->at->for->i->if->return->if->Arrays->toString->fail->else->Arrays->toString->fail
NodeEncodingTest.MockStructure#graph(MockGraph, Object)::: mock structure graph:::return
NodeEncodingTest.MockStructure#nodes(MockGraph)::: mock structure nodes:::return->Collections->emptyList
NodeEncodingTest.MockStructure#nodesCount(MockGraph)::: mock structure nodes count:::return
NodeEncodingTest.MockStructure#nodeId(MockNode)::: mock structure node id:::return
NodeEncodingTest.MockStructure#nodeHasPredecessor(MockNode)::: mock structure node has predecessor:::return
NodeEncodingTest.MockStructure#nodeProperties(MockGraph, MockNode, Map)::: mock structure node properties:::
NodeEncodingTest.MockStructure#node(Object)::: mock structure node:::if->return->return
NodeEncodingTest.MockStructure#nodeClass(Object)::: mock structure node class:::if->return
NodeEncodingTest.MockStructure#classForNode(MockNode)::: mock structure class for node:::return
NodeEncodingTest.MockStructure#nameTemplate(MockNodeClass)::: mock structure name template:::return
NodeEncodingTest.MockStructure#nodeClassType(MockNodeClass)::: mock structure node class type:::return->nodeClass->getClass
NodeEncodingTest.MockStructure#portInputs(MockNodeClass)::: mock structure port inputs:::return
NodeEncodingTest.MockStructure#portOutputs(MockNodeClass)::: mock structure port outputs:::return
NodeEncodingTest.MockStructure#portSize(MockNodeClass)::: mock structure port size:::return
NodeEncodingTest.MockStructure#edgeDirect(MockNodeClass, int)::: mock structure edge direct:::return
NodeEncodingTest.MockStructure#edgeName(MockNodeClass, int)::: mock structure edge name:::return
NodeEncodingTest.MockStructure#edgeType(MockNodeClass, int)::: mock structure edge type:::return
NodeEncodingTest.MockStructure#edgeNodes(MockGraph, MockNode, MockNodeClass, int)::: mock structure edge nodes:::return
NodeEncodingTest.MockNode#toString()::: mock node to string:::return
NodeEncodingTest.MockNodeClass#toString()::: mock node class to string:::return

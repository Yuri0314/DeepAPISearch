Archive.Entry#name():::Returns the name of this entry.:::return
Archive.Entry#getResourcePoolEntryName():::Returns the name representing a ResourcePoolEntry in the form of:    /$MODULE/$ENTRY_NAME:::return->archive->moduleName
ExecutableImage#getHome():::Image home directory,:::
ExecutableImage#getModules():::The names of the modules located in the image.:::
ExecutableImage#getExecutionArgs():::The list of arguments required to execute the image.:::
ExecutableImage#storeLaunchArgs(List):::Store new arguments required to execute the image.:::
ImageFileCreator#splitPath(String):::Helper method that splits a Resource path onto 3 items: module, parent and resource name.:::Objects->requireNonNull->noRoot->path->substring->pkgStart->noRoot->indexOf->module->noRoot->substring->result->new->ArrayList<>->result->add->pkg->noRoot->substring->resName->pkgEnd->pkg->lastIndexOf->if->else->pkg->substring->toPackage->result->add->result->add->array->result->size->new->StringArr->return->result->toArray
ImageFileCreator#resourceName(String):::Returns the path of the resource.:::Objects->requireNonNull->s->path->substring->index->s->indexOf->return->s->substring
ImagePluginStack.OrderedResourcePoolManager#add(ResourcePoolEntry):::Add a resource.:::super->add->orderedList->add
ImagePluginStack#visitResources(ResourcePoolManager):::Resource Plugins stack entry point:::Objects->requireNonNull->if->resources->isEmpty->return->resources->byteOrder->resources->getStringTable->new->ResourcePoolManager->resourcePool->previsit->new->PreVisitStrings->resourcePrevisitors->stream->p->resources->resourcePool->previsit->forEach->sorted->previsit->getSortedStrings->sorted->stream->resources->getStringTable->addString->forEach->resPool->resources->resourcePool->frozenOrder->foreach->resMgr->if->if->throw->p->getName->new->Exception->resPool->byteOrder->resources->getStringTable->new->OrderedResourcePoolManager->else->if->resPool->byteOrder->resources->getStringTable->new->CheckOrderResourcePoolManager->else->resPool->byteOrder->resources->getStringTable->new->ResourcePoolManager->try->p->resMgr->resourcePoolBuilder->transform->catch->if->p->getName->println->pe->printStackTrace->throw->finally->if->resPool->isEmpty->throw->new->Exception->if->getOrderedList->return
ImagePluginStack#storeFiles(ResourcePool, ResourcePool, BasicImageWriter):::Make the imageBuilder to store files.:::Objects->requireNonNull->Objects->requireNonNull->lastPool->new->LastPoolManager->resourcePool->if->ResourcePoolConfiguration->validate->imageBuilder->storeFiles
JarArchive.JarEntry#size():::Returns the number of uncompressed bytes for this entry.:::return
Jlink#newPlugin(String, Map, ModuleLayer):::Create a plugin.:::Objects->requireNonNull->Objects->requireNonNull->ModuleLayer->boot->return->PluginRepository->newPlugin
Jlink.JlinkConfiguration#finder():::Returns ModuleFinder that finds all observable modules for this jlink configuration.:::return
Jlink.JlinkConfiguration#resolveAndBind():::Returns a Configuration of the given module path, root modules with full service binding.:::return->Configuration->empty->ModuleFinder->of->resolveAndBind
Jlink.JlinkConfiguration#resolve():::Returns a Configuration of the given module path, root modules with no service binding.:::return->Configuration->empty->ModuleFinder->of->resolve
Jlink#build(JlinkConfiguration):::Build the image.:::build
Jlink#build(JlinkConfiguration, PluginsConfiguration):::Build the image with a plugin configuration.:::Objects->requireNonNull->if->new->PluginsConfiguration->addAutoEnabledPlugins->try->JlinkTask->createImage->catch->throw->new->PluginException->finally
Jlink#postProcess(ExecutableImage, List):::Post process the image with a plugin configuration.:::Objects->requireNonNull->Objects->requireNonNull->try->JlinkTask->postProcessImage->catch->throw->new->PluginException->finally
JmodArchive.JmodEntry#size():::Returns the number of uncompressed bytes for this entry.:::return->entry->size
Main#run(PrintWriter, PrintWriter, String...):::Entry point that does not call System.exit.:::if->System->getSecurityManager->System->getSecurityManager->new->JlinkPermission->checkPermission->t->new->JlinkTask->t->setLog->return->t->run
PluginRepository#getPlugin(String, ModuleLayer):::Retrieves the plugin associated to the passed name:::return->getPlugin
PluginRepository#newPlugin(Map, String, ModuleLayer):::Build plugin for the passed name.:::Objects->requireNonNull->Objects->requireNonNull->plugin->getPlugin->if->try->plugin->configure->catch->if->plugin->getName->println->e->printStackTrace->throw->finally->return
PluginRepository#registerPlugin(Plugin):::Explicit registration of a plugin in the repository:::Objects->requireNonNull->registeredPlugins->plugin->getName->put
PluginRepository#unregisterPlugin(String):::Explicit unregistration of a plugin in the repository:::Objects->requireNonNull->registeredPlugins->remove
PostProcessor#process(ExecutableImage):::Post process an image.:::
ResourcePoolManager#isNamedPackageResource(String):::Returns true if a resource has an effective package.:::return->path->endsWith->path->endsWith->Resources->canEncapsulate
ResourcePoolManager#add(ResourcePoolEntry):::Add a ResourcePoolEntry.:::Objects->requireNonNull->if->resources->data->path->get->throw->data->path->new->PluginException->modulename->data->moduleName->m->modules->get->if->new->ResourcePoolModuleImpl->modules->put->resources->data->path->put->data->path->put
ResourcePoolManager#findModule(String):::Retrieves the module for the provided name.:::Objects->requireNonNull->return->Optional->modules->get->ofNullable
ResourcePoolManager#modules():::The stream of modules contained in this ResourcePool.:::return->modules->values->stream
ResourcePoolManager#moduleCount():::Return the number of ResourcePoolModule count in this ResourcePool.:::return->modules->size
ResourcePoolManager#entries():::Get all ResourcePoolEntry contained in this ResourcePool instance.:::return->resources->values->stream
ResourcePoolManager#entryCount():::Return the number of ResourcePoolEntry count in this ResourcePool.:::return->resources->values->size
ResourcePoolManager#findEntry(String):::Get the ResourcePoolEntry for the passed path.:::Objects->requireNonNull->return->Optional->resources->get->ofNullable
ResourcePoolManager#findEntryInContext(String, ResourcePoolEntry):::Get the ResourcePoolEntry for the passed path restricted to supplied context.:::Objects->requireNonNull->Objects->requireNonNull->module->modules->context->moduleName->get->Objects->requireNonNull->entry->module->findEntry->return
ResourcePoolManager#contains(ResourcePoolEntry):::Check if the ResourcePool contains the given ResourcePoolEntry.:::Objects->requireNonNull->return->data->path->findEntry->isPresent
ResourcePoolManager#isEmpty():::Check if the ResourcePool contains some content at all.:::return->resources->isEmpty
ResourcePoolManager#byteOrder():::The ByteOrder currently in use when generating the jimage file.:::return
ResourcePrevisitor#previsit(ResourcePool, StringTable):::Previsit the collection of resources.:::
StringTable#addString(String):::Add a string to the jimage strings table.:::
StringTable#getString(int):::Retrieve a string from the passed id.:::
TaskHelper.OptionsHelper#handleOptions(T, String[]):::Handles all options:::Arrays->copyOf->new->PluginsHelper->for->i->return->Collections->emptyList

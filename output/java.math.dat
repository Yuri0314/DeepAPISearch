java.math.BigDecimal#valueOf(long, int)->BigDecimal:::Translates a long unscaled value and an int scale into a BigDecimal.
java.math.BigDecimal#valueOf(long)->BigDecimal:::Translates a long value into a BigDecimal with a scale of zero.
java.math.BigDecimal#valueOf(long, int, int)->BigDecimal:::
java.math.BigDecimal#valueOf(BigInteger, int, int)->BigDecimal:::
java.math.BigDecimal#zeroValueOf(int)->BigDecimal:::
java.math.BigDecimal#valueOf(double)->BigDecimal:::Translates a double into a BigDecimal, using the double's canonical string representation provided by the {@link Double#toString(double)} method.
java.math.BigDecimal#add(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).
java.math.BigDecimal#add(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings
java.math.BigDecimal#subtract(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).
java.math.BigDecimal#subtract(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings
java.math.BigDecimal#multiply(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is (this &times; multiplicand), and whose scale is (this.scale() + multiplicand.scale()).
java.math.BigDecimal#multiply(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this &times; multiplicand), with rounding according to the context settings.
java.math.BigDecimal#divide(BigDecimal, int, int)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
java.math.BigDecimal#divide(BigDecimal, int, RoundingMode)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
java.math.BigDecimal#divide(BigDecimal, int)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
java.math.BigDecimal#divide(BigDecimal, RoundingMode)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
java.math.BigDecimal#divide(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.
java.math.BigDecimal#divide(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.
java.math.BigDecimal#divideToIntegralValue(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down
java.math.BigDecimal#divideToIntegralValue(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is the integer part of (this / divisor)
java.math.BigDecimal#remainder(BigDecimal)->BigDecimal:::Returns a BigDecimal whose value is (this % divisor)
java.math.BigDecimal#remainder(BigDecimal, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings
java.math.BigDecimal#divideAndRemainder(BigDecimal)->BigDecimal[]:::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands
java.math.BigDecimal#divideAndRemainder(BigDecimal, MathContext)->BigDecimal[]:::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings
java.math.BigDecimal#sqrt(MathContext)->BigDecimal:::Returns an approximation to the square root of this with rounding according to the context settings
java.math.BigDecimal#pow(int)->BigDecimal:::Returns a BigDecimal whose value is (this^n), The power is computed exactly, to unlimited precision
java.math.BigDecimal#pow(int, MathContext)->BigDecimal:::Returns a BigDecimal whose value is (this^n)
java.math.BigDecimal#abs()->BigDecimal:::Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().
java.math.BigDecimal#abs(MathContext)->BigDecimal:::Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.
java.math.BigDecimal#negate()->BigDecimal:::Returns a BigDecimal whose value is (-this), and whose scale is this.scale().
java.math.BigDecimal#negate(MathContext)->BigDecimal:::Returns a BigDecimal whose value is (-this), with rounding according to the context settings.
java.math.BigDecimal#plus()->BigDecimal:::Returns a BigDecimal whose value is (+this), and whose scale is this.scale()
java.math.BigDecimal#plus(MathContext)->BigDecimal:::Returns a BigDecimal whose value is (+this), with rounding according to the context settings
java.math.BigDecimal#signum()->int:::Returns the signum function of this BigDecimal.
java.math.BigDecimal#scale()->int:::Returns the scale of this BigDecimal
java.math.BigDecimal#precision()->int:::Returns the precision of this BigDecimal
java.math.BigDecimal#unscaledValue()->BigInteger:::Returns a BigInteger whose value is the unscaled value of this BigDecimal
java.math.BigDecimal#round(MathContext)->BigDecimal:::Returns a BigDecimal rounded according to the MathContext settings
java.math.BigDecimal#setScale(int, RoundingMode)->BigDecimal:::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
java.math.BigDecimal#setScale(int, int)->BigDecimal:::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
java.math.BigDecimal#setScale(int)->BigDecimal:::Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's
java.math.BigDecimal#movePointLeft(int)->BigDecimal:::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left
java.math.BigDecimal#movePointRight(int)->BigDecimal:::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right
java.math.BigDecimal#scaleByPowerOfTen(int)->BigDecimal:::Returns a BigDecimal whose numerical value is equal to (this * 10^n)
java.math.BigDecimal#stripTrailingZeros()->BigDecimal:::Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation
java.math.BigDecimal#compareTo(BigDecimal)->int:::Compares this BigDecimal with the specified BigDecimal
java.math.BigDecimal#equals(Object)->boolean:::Compares this BigDecimal with the specified Object for equality
java.math.BigDecimal#min(BigDecimal)->BigDecimal:::Returns the minimum of this BigDecimal and val.
java.math.BigDecimal#max(BigDecimal)->BigDecimal:::Returns the maximum of this BigDecimal and val.
java.math.BigDecimal#hashCode()->int:::Returns the hash code for this BigDecimal
java.math.BigDecimal#toString()->String:::Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed
java.math.BigDecimal#toEngineeringString()->String:::Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed
java.math.BigDecimal#toPlainString()->String:::Returns a string representation of this BigDecimal without an exponent field
java.math.BigDecimal#toBigInteger()->BigInteger:::Converts this BigDecimal to a BigInteger
java.math.BigDecimal#toBigIntegerExact()->BigInteger:::Converts this BigDecimal to a BigInteger, checking for lost information
java.math.BigDecimal#longValue()->long:::Converts this BigDecimal to a long
java.math.BigDecimal#longValueExact()->long:::Converts this BigDecimal to a long, checking for lost information
java.math.BigDecimal#intValue()->int:::Converts this BigDecimal to an int
java.math.BigDecimal#intValueExact()->int:::Converts this BigDecimal to an int, checking for lost information
java.math.BigDecimal#shortValueExact()->short:::Converts this BigDecimal to a short, checking for lost information
java.math.BigDecimal#byteValueExact()->byte:::Converts this BigDecimal to a byte, checking for lost information
java.math.BigDecimal#floatValue()->float:::Converts this BigDecimal to a float
java.math.BigDecimal#doubleValue()->double:::Converts this BigDecimal to a double
java.math.BigDecimal#ulp()->BigDecimal:::Returns the size of an ulp, a unit in the last place, of this BigDecimal
java.math.BigDecimal.StringBuilderHelper#getStringBuilder()->StringBuilder:::
java.math.BigDecimal.StringBuilderHelper#getCompactCharArray()->char[]:::
java.math.BigDecimal.StringBuilderHelper#putIntCompact(long)->int:::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.
java.math.BigDecimal#longDigitLength(long)->int:::Returns the length of the absolute value of a long, in decimal digits.
java.math.BigDecimal#scaledTenPow(int, int, int)->BigDecimal:::
java.math.BigInteger#probablePrime(int, Random)->BigInteger:::Returns a positive BigInteger that is probably prime, with the specified bitLength
java.math.BigInteger#nextProbablePrime()->BigInteger:::Returns the first integer greater than this BigInteger that is probably prime
java.math.BigInteger#primeToCertainty(int, Random)->boolean:::Returns true if this BigInteger is probably prime, false if it's definitely composite
java.math.BigInteger#valueOf(long)->BigInteger:::Returns a BigInteger whose value is equal to that of the specified long.
java.math.BigInteger#add(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this + val).
java.math.BigInteger#add(long)->BigInteger:::Package private methods used by BigDecimal code to add a BigInteger with a long
java.math.BigInteger#subtract(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this - val).
java.math.BigInteger#multiply(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this * val).
java.math.BigInteger#multiply(long)->BigInteger:::Package private methods used by BigDecimal code to multiply a BigInteger with a long
java.math.BigInteger#divide(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this / val).
java.math.BigInteger#divideAndRemainder(BigInteger)->BigInteger[]:::Returns an array of two BigIntegers containing (this / val) followed by (this % val).
java.math.BigInteger#remainder(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this % val).
java.math.BigInteger#pow(int)->BigInteger:::Returns a BigInteger whose value is (this^exponent)
java.math.BigInteger#sqrt()->BigInteger:::Returns the integer square root of this BigInteger
java.math.BigInteger#sqrtAndRemainder()->BigInteger[]:::Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.
java.math.BigInteger#gcd(BigInteger)->BigInteger:::Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val)
java.math.BigInteger#bitLengthForInt(int)->int:::Package private method to return bit length for an integer.
java.math.BigInteger#primitiveRightShift(int[], int, int)->void:::
java.math.BigInteger#primitiveLeftShift(int[], int, int)->void:::
java.math.BigInteger#abs()->BigInteger:::Returns a BigInteger whose value is the absolute value of this BigInteger.
java.math.BigInteger#negate()->BigInteger:::Returns a BigInteger whose value is (-this).
java.math.BigInteger#signum()->int:::Returns the signum function of this BigInteger.
java.math.BigInteger#mod(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this mod m)
java.math.BigInteger#modPow(BigInteger, BigInteger)->BigInteger:::Returns a BigInteger whose value is (this^exponent mod m)
java.math.BigInteger#mulAdd(int[], int[], int, int, int)->int:::Multiply an array by one word k and add to result, return the carry
java.math.BigInteger#addOne(int[], int, int, int)->int:::Add one word to the number a mlen words into a
java.math.BigInteger#modInverse(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this^-1 mod m).
java.math.BigInteger#shiftLeft(int)->BigInteger:::Returns a BigInteger whose value is (this << n)
java.math.BigInteger#shiftRight(int)->BigInteger:::Returns a BigInteger whose value is (this >> n)
java.math.BigInteger#javaIncrement(int[])->int[]:::
java.math.BigInteger#and(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this & val)
java.math.BigInteger#or(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this | val)
java.math.BigInteger#xor(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this ^ val)
java.math.BigInteger#not()->BigInteger:::Returns a BigInteger whose value is (~this)
java.math.BigInteger#andNot(BigInteger)->BigInteger:::Returns a BigInteger whose value is (this & ~val)
java.math.BigInteger#testBit(int)->boolean:::Returns true if and only if the designated bit is set
java.math.BigInteger#setBit(int)->BigInteger:::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set
java.math.BigInteger#clearBit(int)->BigInteger:::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared
java.math.BigInteger#flipBit(int)->BigInteger:::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped
java.math.BigInteger#getLowestSetBit()->int:::Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit)
java.math.BigInteger#bitLength()->int:::Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit
java.math.BigInteger#bitCount()->int:::Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit
java.math.BigInteger#isProbablePrime(int)->boolean:::Returns true if this BigInteger is probably prime, false if it's definitely composite
java.math.BigInteger#compareTo(BigInteger)->int:::Compares this BigInteger with the specified BigInteger
java.math.BigInteger#compareMagnitude(BigInteger)->int:::Compares the magnitude array of this BigInteger with the specified BigInteger's
java.math.BigInteger#compareMagnitude(long)->int:::Version of compareMagnitude that compares magnitude with long value
java.math.BigInteger#equals(Object)->boolean:::Compares this BigInteger with the specified Object for equality.
java.math.BigInteger#min(BigInteger)->BigInteger:::Returns the minimum of this BigInteger and val.
java.math.BigInteger#max(BigInteger)->BigInteger:::Returns the maximum of this BigInteger and val.
java.math.BigInteger#hashCode()->int:::Returns the hash code for this BigInteger.
java.math.BigInteger#toString(int)->String:::Returns the String representation of this BigInteger in the given radix
java.math.BigInteger#toString()->String:::Returns the decimal String representation of this BigInteger
java.math.BigInteger#toByteArray()->byte[]:::Returns a byte array containing the two's-complement representation of this BigInteger
java.math.BigInteger#intValue()->int:::Converts this BigInteger to an int
java.math.BigInteger#longValue()->long:::Converts this BigInteger to a long
java.math.BigInteger#floatValue()->float:::Converts this BigInteger to a float
java.math.BigInteger#doubleValue()->double:::Converts this BigInteger to a double
java.math.BigInteger#longValueExact()->long:::Converts this BigInteger to a long, checking for lost information
java.math.BigInteger#intValueExact()->int:::Converts this BigInteger to an int, checking for lost information
java.math.BigInteger#shortValueExact()->short:::Converts this BigInteger to a short, checking for lost information
java.math.BigInteger#byteValueExact()->byte:::Converts this BigInteger to a byte, checking for lost information
java.math.BitSieve#retrieve(BigInteger, int, java.util.Random)->BigInteger:::Test probable primes in the sieve and return successful candidates.
java.math.MathContext#getPrecision()->int:::Returns the precision setting
java.math.MathContext#getRoundingMode()->RoundingMode:::
java.math.MathContext#equals(Object)->boolean:::Compares this MathContext with the specified Object for equality.
java.math.MathContext#hashCode()->int:::Returns the hash code for this MathContext.
java.math.MathContext#toString()->java.lang.String:::Returns the string representation of this MathContext
java.math.MutableBigInteger#toBigInteger(int)->BigInteger:::Convert this MutableBigInteger to a BigInteger object.
java.math.MutableBigInteger#toBigInteger()->BigInteger:::Converts this number to a nonnegative BigInteger.
java.math.MutableBigInteger#toBigDecimal(int, int)->BigDecimal:::Convert this MutableBigInteger to BigDecimal object with the specified sign and scale.
java.math.MutableBigInteger#toCompactValue(int)->long:::This is for internal use in converting from a MutableBigInteger object into a long value given a specified sign
java.math.MutableBigInteger#clear()->void:::Clear out a MutableBigInteger for reuse.
java.math.MutableBigInteger#reset()->void:::Set a MutableBigInteger to zero, removing its offset.
java.math.MutableBigInteger#compare(MutableBigInteger)->int:::Compare the magnitude of two MutableBigIntegers
java.math.MutableBigInteger#compareHalf(MutableBigInteger)->int:::Compare this against half of a MutableBigInteger object (Needed for remainder tests)
java.math.MutableBigInteger#normalize()->void:::Ensure that the MutableBigInteger is in normal form, specifically making sure that there are no leading zeros, and that if the magnitude is zero, then intLen is zero.
java.math.MutableBigInteger#toIntArray()->int[]:::Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.
java.math.MutableBigInteger#setInt(int, int)->void:::Sets the int at index+offset in this MutableBigInteger to val
java.math.MutableBigInteger#setValue(int[], int)->void:::Sets this MutableBigInteger's value array to the specified array
java.math.MutableBigInteger#copyValue(MutableBigInteger)->void:::Sets this MutableBigInteger's value array to a copy of the specified array
java.math.MutableBigInteger#copyValue(int[])->void:::Sets this MutableBigInteger's value array to a copy of the specified array
java.math.MutableBigInteger#isOne()->boolean:::Returns true iff this MutableBigInteger has a value of one.
java.math.MutableBigInteger#isZero()->boolean:::Returns true iff this MutableBigInteger has a value of zero.
java.math.MutableBigInteger#isEven()->boolean:::Returns true iff this MutableBigInteger is even.
java.math.MutableBigInteger#isOdd()->boolean:::Returns true iff this MutableBigInteger is odd.
java.math.MutableBigInteger#isNormal()->boolean:::Returns true iff this MutableBigInteger is in normal form
java.math.MutableBigInteger#toString()->String:::Returns a String representation of this MutableBigInteger in radix 10.
java.math.MutableBigInteger#safeRightShift(int)->void:::Like {@link #rightShift(int)} but n can be greater than the length of the number.
java.math.MutableBigInteger#rightShift(int)->void:::Right shift this MutableBigInteger n bits
java.math.MutableBigInteger#safeLeftShift(int)->void:::Like {@link #leftShift(int)} but n can be zero.
java.math.MutableBigInteger#leftShift(int)->void:::Left shift this MutableBigInteger n bits.
java.math.MutableBigInteger#add(MutableBigInteger)->void:::Adds the contents of two MutableBigInteger objects.The result is placed within this MutableBigInteger
java.math.MutableBigInteger#addShifted(MutableBigInteger, int)->void:::Adds the value of addend shifted n ints to the left
java.math.MutableBigInteger#addDisjoint(MutableBigInteger, int)->void:::Like {@link #addShifted(MutableBigInteger, int)} but this.intLen must not be greater than n
java.math.MutableBigInteger#addLower(MutableBigInteger, int)->void:::Adds the low n ints of addend.
java.math.MutableBigInteger#subtract(MutableBigInteger)->int:::Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger.
java.math.MutableBigInteger#multiply(MutableBigInteger, MutableBigInteger)->void:::Multiply the contents of two MutableBigInteger objects
java.math.MutableBigInteger#mul(int, MutableBigInteger)->void:::Multiply the contents of this MutableBigInteger by the word y
java.math.MutableBigInteger#divideOneWord(int, MutableBigInteger)->int:::This method is used for division of an n word dividend by a one word divisor
java.math.MutableBigInteger#divide(MutableBigInteger, MutableBigInteger)->MutableBigInteger:::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned.
java.math.MutableBigInteger#divide(MutableBigInteger, MutableBigInteger, boolean)->MutableBigInteger:::
java.math.MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger)->MutableBigInteger:::
java.math.MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean)->MutableBigInteger:::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned
java.math.MutableBigInteger#divideAndRemainderBurnikelZiegler(MutableBigInteger, MutableBigInteger)->MutableBigInteger:::Computes this/b and this%b using the  Burnikel-Ziegler algorithm
java.math.MutableBigInteger#bitLength()->long:::
java.math.MutableBigInteger#divide(long, MutableBigInteger)->long:::Internally used  to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned.
java.math.MutableBigInteger#divWord(long, int)->long:::This method divides a long quantity by an int to estimate qhat for two multi precision numbers
java.math.MutableBigInteger#sqrt()->MutableBigInteger:::Calculate the integer square root floor(sqrt(this)) where sqrt(.) denotes the mathematical square root
java.math.MutableBigInteger#hybridGCD(MutableBigInteger)->MutableBigInteger:::Calculate GCD of this and b
java.math.MutableBigInteger#binaryGcd(int, int)->int:::Calculate GCD of a and b interpreted as unsigned integers.
java.math.MutableBigInteger#mutableModInverse(MutableBigInteger)->MutableBigInteger:::Returns the modInverse of this mod p
java.math.MutableBigInteger#modInverseMP2(int)->MutableBigInteger:::
java.math.MutableBigInteger#inverseMod32(int)->int:::Returns the multiplicative inverse of val mod 2^32
java.math.MutableBigInteger#inverseMod64(long)->long:::Returns the multiplicative inverse of val mod 2^64
java.math.MutableBigInteger#modInverseBP2(MutableBigInteger, int)->MutableBigInteger:::Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.
java.math.MutableBigInteger#fixup(MutableBigInteger, MutableBigInteger, int)->MutableBigInteger:::The Fixup Algorithm Calculates X such that X = C * 2^(-k) (mod P) Assumes C<P and P is odd.
java.math.MutableBigInteger#euclidModInverse(int)->MutableBigInteger:::Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of 2
java.math.SignedMutableBigInteger#signedAdd(SignedMutableBigInteger)->void:::Signed addition built upon unsigned add and subtract.
java.math.SignedMutableBigInteger#signedAdd(MutableBigInteger)->void:::Signed addition built upon unsigned add and subtract.
java.math.SignedMutableBigInteger#signedSubtract(SignedMutableBigInteger)->void:::Signed subtraction built upon unsigned add and subtract.
java.math.SignedMutableBigInteger#signedSubtract(MutableBigInteger)->void:::Signed subtraction built upon unsigned add and subtract.
java.math.SignedMutableBigInteger#toString()->String:::Print out the first intLen ints of this MutableBigInteger's value array starting at offset.

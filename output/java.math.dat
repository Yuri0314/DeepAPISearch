BigDecimal#adjustScale(int, long)::: big decimal adjust scale:::adjustedScale->if->throw->new->NumberFormatException->return
BigDecimal#parseExp(char[], int, int)::: big decimal parse exp:::exp->c->negexp->if->if->throw->new->NumberFormatException->while->Character->digit->if->throw->new->NumberFormatException->for->if->return
BigDecimal#valueOf(long, int):::Translates a long unscaled value and an int scale into a BigDecimal.:::if->return->valueOf->else->if->return->zeroValueOf->return->new->BigDecimal
BigDecimal#valueOf(long):::Translates a long value into a BigDecimal with a scale of zero.:::if->return->else->if->return->new->BigDecimal->return->new->BigDecimal
BigDecimal#valueOf(long, int, int)::: big decimal value of:::if->return->else->if->return->zeroValueOf->return->new->BigDecimal
BigDecimal#valueOf(BigInteger, int, int)::: big decimal value of:::val->compactValFor->if->return->zeroValueOf->else->if->return->return->new->BigDecimal
BigDecimal#zeroValueOf(int)::: big decimal zero value of:::if->return->else->return->new->BigDecimal
BigDecimal#valueOf(double):::Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double#toString(double) method.:::return->Double->toString->new->BigDecimal
BigDecimal#add(BigDecimal):::Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).:::if->if->return->add->else->return->add->else->if->return->add->else->return->add
BigDecimal#add(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings:::if->return->add->lhs->lhsIsZero->lhs->signum->augendIsZero->augend->signum->if->preferredScale->Math->lhs->scale->augend->scale->max->result->if->return->zeroValueOf->doRound->doRound->if->result->scale->return->else->if->result->scale->return->stripZerosToMatchScale->else->precisionDiff->result->precision->scaleDiff->result->scale->if->return->result->setScale->else->return->result->result->scale->setScale->padding->if->arg->preAlign->matchScale->return->lhs->inflated->augend->inflated->add->doRound
BigDecimal#preAlign(BigDecimal, BigDecimal, long, MathContext):::Returns an array of length two, the sum of whose entries is equal to the rounded sum of the BigDecimal arguments:::big->small->if->else->estResultUlpScale->big->precision->smallHighDigitPos->small->precision->if->BigDecimal->small->signum->this->Math->max->checkScale->valueOf->result->return
BigDecimal#subtract(BigDecimal):::Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).:::if->if->return->add->else->return->negate->add->else->if->return->add->else->return->negate->add
BigDecimal#subtract(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings:::if->return->subtract->return->subtrahend->negate->add
BigDecimal#multiply(BigDecimal):::Returns a BigDecimal whose value is (this &times; multiplicand), and whose scale is (this.scale() + multiplicand.scale()).:::productScale->checkScale->if->if->return->multiply->else->return->multiply->else->if->return->multiply->else->return->multiply
BigDecimal#multiply(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this &times; multiplicand), with rounding according to the context settings.:::if->return->multiply->productScale->checkScale->if->if->return->multiplyAndRound->else->return->multiplyAndRound->else->if->return->multiplyAndRound->else->return->multiplyAndRound
BigDecimal#divide(BigDecimal, int, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified:::if->throw->new->IllegalArgumentException->if->if->return->divide->else->return->divide->else->if->return->divide->else->return->divide
BigDecimal#divide(BigDecimal, int, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified:::return->divide
BigDecimal#divide(BigDecimal, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale():::return->this->divide
BigDecimal#divide(BigDecimal, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale():::return->this->divide
BigDecimal#divide(BigDecimal):::Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.:::if->divisor->signum->if->this->signum->throw->new->ArithmeticException->throw->new->ArithmeticException->preferredScale->saturateLong->if->this->signum->return->zeroValueOf->else->mc->Math->this->precision->Math->divisor->precision->ceil->min->new->MathContext->quotient->try->this->divide->catch->throw->new->ArithmeticException->finally->quotientScale->quotient->scale->if->return->quotient->setScale->return
BigDecimal#divide(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.:::mcp->if->return->divide->dividend->preferredScale->if->divisor->signum->if->dividend->signum->throw->new->ArithmeticException->throw->new->ArithmeticException->if->dividend->signum->return->saturateLong->zeroValueOf->xscale->dividend->precision->yscale->divisor->precision->if->if->return->divide->else->return->divide->else->if->return->divide->else->return->divide
BigDecimal#divideToIntegralValue(BigDecimal):::Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down:::preferredScale->saturateLong->if->this->compareMagnitude->return->zeroValueOf->if->this->signum->divisor->signum->return->this->setScale->maxDigits->Math->this->precision->Math->divisor->precision->ceil->Math->this->scale->divisor->scale->abs->min->quotient->this->new->MathContext->divide->if->quotient->setScale->stripZerosToMatchScale->if->quotient->setScale->return
BigDecimal#divideToIntegralValue(BigDecimal, MathContext):::Returns a BigDecimal whose value is the integer part of (this / divisor):::if->this->compareMagnitude->return->divideToIntegralValue->preferredScale->saturateLong->result->this->new->MathContext->divide->if->result->scale->product->result->multiply->if->this->subtract->compareMagnitude->throw->new->ArithmeticException->else->if->result->scale->result->setScale->precisionDiff->if->result->scale->result->precision->return->result->result->scale->Math->min->setScale->else->return->stripZerosToMatchScale
BigDecimal#remainder(BigDecimal):::Returns a BigDecimal whose value is (this % divisor):::divrem->this->divideAndRemainder->return
BigDecimal#remainder(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings:::divrem->this->divideAndRemainder->return
BigDecimal#divideAndRemainder(BigDecimal):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands:::result->new->BigDecimalArr->this->divideToIntegralValue->this->multiply->subtract->return
BigDecimal#divideAndRemainder(BigDecimal, MathContext):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings:::if->return->divideAndRemainder->result->new->BigDecimalArr->lhs->lhs->divideToIntegralValue->lhs->multiply->subtract->return
BigDecimal#sqrt(MathContext):::Returns an approximation to the square root of this with rounding according to the context settings:::signum->signum->if->preferredScale->this->scale->zeroWithFinalPreferredScale->valueOf->stripped->this->stripTrailingZeros->strippedScale->stripped->scale->if->stripped->isPowerOfTen->result->valueOf->if->result->scale->result->add->return->scaleAdjust->scale->stripped->scale->stripped->precision->if->else->working->stripped->scaleByPowerOfTen->guess->Math->working->doubleValue->sqrt->new->BigDecimal->guessPrecision->originalPrecision->mc->getPrecision->targetPrecision->if->stripped->precision->else->approx->workingPrecision->working->precision->do->tmpPrecision->Math->Math->max->max->mcTmp->new->MathContext->ONE_HALF->approx->working->divide->add->multiply->while->result->targetRm->mc->getRoundingMode->if->tmpRm->mcTmp->new->MathContext->approx->scaleByPowerOfTen->round->if->this->result->multiply->subtract->compareTo->throw->new->ArithmeticException->else->approx->scaleByPowerOfTen->round->if->result->scale->result->stripTrailingZeros->new->MathContext->add->return->else->switch->throw->new->ArithmeticException->return->scale->valueOf->throw->new->AssertionError
BigDecimal#isPowerOfTen()::: big decimal is power of ten:::return->this->unscaledValue->equals
BigDecimal#squareRootResultAssertions(BigDecimal, MathContext):::For nonzero values, check numerical correctness properties of the computed result for the chosen rounding mode:::if->result->signum->return->squareRootZeroResultAssertions->else->rm->mc->getRoundingMode->ulp->result->ulp->neighborUp->result->add->if->this->isPowerOfTen->ulp->divide->neighborDown->result->subtract->if->result->signum->this->signum->return->switch->return->result->multiply->compareTo->neighborUp->multiply->compareTo->return->result->multiply->compareTo->neighborDown->multiply->compareTo->err->result->multiply->subtract->abs->errUp->neighborUp->multiply->subtract->errDown->this->neighborDown->multiply->subtract->err_comp_errUp->err->compareTo->err_comp_errDown->err->compareTo->return->errUp->signum->errDown->signum->return
BigDecimal#squareRootZeroResultAssertions(BigDecimal, MathContext)::: big decimal square root zero result assertions:::return->this->compareTo
BigDecimal#pow(int):::Returns a BigDecimal whose value is (this^n), The power is computed exactly, to unlimited precision:::if->throw->new->ArithmeticException->newScale->checkScale->return->this->inflated->pow->new->BigDecimal
BigDecimal#pow(int, MathContext):::Returns a BigDecimal whose value is (this^n):::if->return->pow->if->throw->new->ArithmeticException->if->return->lhs->workmc->mag->Math->abs->if->elength->longDigitLength->if->throw->new->ArithmeticException->new->MathContext->acc->seenbit->for->i->if->ONE->divide->return->doRound
BigDecimal#abs():::Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().:::return->signum->negate
BigDecimal#abs(MathContext):::Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.:::return->signum->negate->plus
BigDecimal#negate():::Returns a BigDecimal whose value is (-this), and whose scale is this.scale().:::if->return->intVal->negate->new->BigDecimal->else->return->valueOf
BigDecimal#negate(MathContext):::Returns a BigDecimal whose value is (-this), with rounding according to the context settings.:::return->negate->plus
BigDecimal#plus():::Returns a BigDecimal whose value is (+this), and whose scale is this.scale():::return
BigDecimal#plus(MathContext):::Returns a BigDecimal whose value is (+this), with rounding according to the context settings:::if->return->return->doRound
BigDecimal#signum():::Returns the signum function of this BigDecimal.:::return->Long->signum->intVal->signum
BigDecimal#scale():::Returns the scale of this BigDecimal:::return
BigDecimal#precision():::Returns the precision of this BigDecimal:::result->if->s->if->longDigitLength->else->bigDigitLength->return
BigDecimal#unscaledValue():::Returns a BigInteger whose value is the unscaled value of this BigDecimal:::return->this->inflated
BigDecimal#round(MathContext):::Returns a BigDecimal rounded according to the MathContext settings:::return->plus
BigDecimal#setScale(int, RoundingMode):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value:::return->setScale
BigDecimal#setScale(int, int):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value:::if->throw->new->IllegalArgumentException->oldScale->if->return->if->this->signum->return->zeroValueOf->if->rs->if->raise->checkScale->if->longMultiplyPowerTen->return->valueOf->rb->bigMultiplyPowerTen->return->new->BigDecimal->else->drop->checkScale->if->return->divideAndRound->else->return->this->inflated->bigTenToThe->divideAndRound->else->if->raise->checkScale->rb->bigMultiplyPowerTen->return->new->BigDecimal->else->drop->checkScale->if->return->divideAndRound->else->return->bigTenToThe->divideAndRound
BigDecimal#setScale(int):::Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's:::return->setScale
BigDecimal#movePointLeft(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left:::newScale->checkScale->num->new->BigDecimal->return->num->setScale
BigDecimal#movePointRight(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right:::newScale->checkScale->num->new->BigDecimal->return->num->setScale
BigDecimal#scaleByPowerOfTen(int):::Returns a BigDecimal whose numerical value is equal to (this * 10^n):::return->checkScale->new->BigDecimal
BigDecimal#stripTrailingZeros():::Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation:::if->intVal->signum->return->else->if->return->createAndStripZerosToMatchScale->else->return->createAndStripZerosToMatchScale
BigDecimal#compareTo(BigDecimal):::Compares this BigDecimal with the specified BigDecimal:::if->xs->ys->if->return->xsign->this->signum->ysign->val->signum->if->return->if->return->cmp->compareMagnitude->return
BigDecimal#compareMagnitude(BigDecimal):::Version of compareTo that ignores sign.:::ys->xs->if->return->if->return->sdiff->if->xae->this->precision->yae->val->precision->if->return->if->return->if->if->longMultiplyPowerTen->rb->bigMultiplyPowerTen->return->rb->compareMagnitude->else->if->longMultiplyPowerTen->rb->val->bigMultiplyPowerTen->return->compareMagnitude->if->return->longCompareMagnitude->else->if->return->else->return->compareMagnitude
BigDecimal#equals(Object):::Compares this BigDecimal with the specified Object for equality:::if->return->xDec->if->return->if->return->s->xs->if->if->compactValFor->return->else->if->return->compactValFor->return->this->inflated->xDec->inflated->equals
BigDecimal#min(BigDecimal):::Returns the minimum of this BigDecimal and val.:::return->compareTo
BigDecimal#max(BigDecimal):::Returns the maximum of this BigDecimal and val.:::return->compareTo
BigDecimal#hashCode():::Returns the hash code for this BigDecimal:::if->val2->temp->return->else->return->intVal->hashCode
BigDecimal#toString():::Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed:::sc->if->layoutChars->return
BigDecimal#toEngineeringString():::Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed:::return->layoutChars
BigDecimal#toPlainString():::Returns a string representation of this BigDecimal without an exponent field:::if->if->return->Long->toString->else->return->intVal->toString->if->if->signum->return->trailingZeros->checkScaleNonZero->buf->if->new->StringBuilder->buf->append->else->str->intVal->toString->str->length->new->StringBuilder->buf->append->for->i->return->buf->toString->str->if->Long->Math->abs->toString->else->intVal->abs->toString->return->signum->getValueString
BigDecimal#getValueString(int, String, int)::: big decimal get value string:::buf->insertionPoint->intString->length->if->return->else->if->new->StringBuilder->buf->insert->if->buf->insert->else->intString->length->new->StringBuilder->buf->append->for->i->buf->append->return->buf->toString
BigDecimal#toBigInteger():::Converts this BigDecimal to a BigInteger:::return->this->setScale->inflated
BigDecimal#toBigIntegerExact():::Converts this BigDecimal to a BigInteger, checking for lost information:::return->this->setScale->inflated
BigDecimal#longValue():::Converts this BigDecimal to a long:::if->return->else->if->this->signum->fractionOnly->return->else->return->toBigInteger->longValue
BigDecimal#fractionOnly():::Return true if a nonzero BigDecimal has an absolute value less than one; i.e:::return->this->precision
BigDecimal#longValueExact():::Converts this BigDecimal to a long, checking for lost information:::if->return->if->this->signum->return->if->fractionOnly->throw->new->ArithmeticException->if->precision->throw->new->java.lang.ArithmeticException->num->this->setScale->if->num->precision->LongOverflow->check->return->num->inflated->longValue
BigDecimal.LongOverflow#check(BigDecimal)::: long overflow check:::intVal->num->inflated->if->intVal->compareTo->intVal->compareTo->throw->new->java.lang.ArithmeticException
BigDecimal#intValue():::Converts this BigDecimal to an int:::return->longValue
BigDecimal#intValueExact():::Converts this BigDecimal to an int, checking for lost information:::num->this->longValueExact->if->throw->new->java.lang.ArithmeticException->return
BigDecimal#shortValueExact():::Converts this BigDecimal to a short, checking for lost information:::num->this->longValueExact->if->throw->new->java.lang.ArithmeticException->return
BigDecimal#byteValueExact():::Converts this BigDecimal to a byte, checking for lost information:::num->this->longValueExact->if->throw->new->java.lang.ArithmeticException->return
BigDecimal#floatValue():::Converts this BigDecimal to a float:::if->if->return->else->if->Math->abs->if->return->else->if->return->return->Float->this->toString->parseFloat
BigDecimal#doubleValue():::Converts this BigDecimal to a double:::if->if->return->else->if->Math->abs->if->return->else->if->return->return->Double->this->toString->parseDouble
BigDecimal#ulp():::Returns the size of an ulp, a unit in the last place, of this BigDecimal:::return->BigDecimal->this->scale->valueOf
BigDecimal.StringBuilderHelper#getStringBuilder()::: string builder helper get string builder:::sb->setLength->return
BigDecimal.StringBuilderHelper#getCompactCharArray()::: string builder helper get compact char array:::return
BigDecimal.StringBuilderHelper#putIntCompact(long):::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.:::q->r->charPos->while->q2->i2->while->if->return
BigDecimal#layoutChars(boolean):::Lay out this BigDecimal into a char[] array:::if->return->Long->toString->intVal->toString->if->lowInt->highInt->return->Integer->toString->sbHelper->threadLocalStringBuilderHelper->get->coeff->offset->if->sbHelper->Math->abs->putIntCompact->sbHelper->getCompactCharArray->else->intVal->abs->toString->toCharArray->buf->sbHelper->getStringBuilder->if->signum->buf->append->coeffLen->adjusted->if->pad->if->buf->append->buf->append->for->buf->append->else->buf->append->buf->append->buf->append->else->if->buf->append->if->buf->append->buf->append->else->sig->if->if->signum->switch->buf->append->break->buf->append->break->buf->append->break->throw->new->AssertionError->else->if->buf->append->for->i->else->buf->append->buf->append->buf->append->if->buf->append->if->buf->append->buf->append->return->buf->toString
BigDecimal#bigTenToThe(int):::Return 10 to the power n, as a BigInteger.:::if->return->if->pows->if->return->else->return->expandBigIntegerTenPowers->return->pow
BigDecimal#expandBigIntegerTenPowers(int):::Expand the BIG_TEN_POWERS_TABLE array to contain at least 10**n.:::synchronized->pows->curLen->if->newLen->while->Arrays->copyOf->for->i->return
BigDecimal#longMultiplyPowerTen(long, int):::Compute val * 10 ^ n; return this product if it is representable as a long, INFLATED otherwise.:::if->return->tab->bounds->if->tenpower->if->return->if->Math->abs->return->return
BigDecimal#bigMultiplyPowerTen(int):::Compute this * 10 ^ n:::if->return->this->inflated->if->return->bigTenToThe->multiply->else->return->intVal->bigTenToThe->multiply
BigDecimal#inflated():::Returns appropriate BigInteger from intVal field if intVal is null, i.e:::if->return->BigInteger->valueOf->return
BigDecimal#matchScale(BigDecimal[]):::Match the scales of two BigDecimals to align their least significant digits:::if->setScale->else->if->setScale
BigDecimal.UnsafeHolder#setIntCompact(BigDecimal, long)::: unsafe holder set int compact:::unsafe->putLong
BigDecimal.UnsafeHolder#setIntValVolatile(BigDecimal, BigInteger)::: unsafe holder set int val volatile:::unsafe->putObjectVolatile
BigDecimal#readObject(java.io.ObjectInputStream):::Reconstitute the BigDecimal instance from a stream (that is, deserialize it).:::s->defaultReadObject->if->message->throw->new->java.io.StreamCorruptedException->UnsafeHolder->compactValFor->setIntCompact
BigDecimal#writeObject(java.io.ObjectOutputStream):::Serialize this BigDecimal to the stream in question:::if->UnsafeHolder->BigInteger->valueOf->setIntValVolatile->s->defaultWriteObject
BigDecimal#longDigitLength(long):::Returns the length of the absolute value of a long, in decimal digits.:::if->if->return->r->Long->numberOfLeadingZeros->tab->return
BigDecimal#bigDigitLength(BigInteger):::Returns the length of the absolute value of a BigInteger, in decimal digits.:::if->return->r->b->bitLength->return->b->bigTenToThe->compareMagnitude
BigDecimal#checkScale(long):::Check a scale for Underflow or Overflow:::asInt->if->b->if->b->signum->throw->new->ArithmeticException->return
BigDecimal#compactValFor(BigInteger):::Returns the compact value for given BigInteger, or INFLATED if too big:::m->len->if->return->d->if->return->u->return
BigDecimal#longCompareMagnitude(long, long)::: big decimal long compare magnitude:::if->if->return
BigDecimal#saturateLong(long)::: big decimal saturate long:::i->return
BigDecimal#print(String, BigDecimal)::: big decimal print:::format
BigDecimal#audit():::Check internal invariants of this BigDecimal:::if->if->print->throw->new->AssertionError->if->bigDigitLength->print->throw->new->AssertionError->else->if->val->intVal->longValue->if->print->throw->new->AssertionError->if->longDigitLength->print->throw->new->AssertionError->return
BigDecimal#checkScaleNonZero(long)::: big decimal check scale non zero:::asInt->if->throw->new->ArithmeticException->return
BigDecimal#checkScale(long, long)::: big decimal check scale:::asInt->if->if->throw->new->ArithmeticException->return
BigDecimal#checkScale(BigInteger, long)::: big decimal check scale:::asInt->if->if->intVal->signum->throw->new->ArithmeticException->return
BigDecimal#doRound(BigDecimal, MathContext):::Returns a BigDecimal rounded according to the MathContext settings; If rounding is needed a new BigDecimal is created and returned.:::mcp->wasDivided->if->intVal->compactVal->scale->prec->val->precision->mode->drop->if->while->checkScaleNonZero->divideAndRoundByTenPow->compactValFor->if->longDigitLength->break->bigDigitLength->if->while->checkScaleNonZero->divideAndRound->longDigitLength->return->new->BigDecimal->return
BigDecimal#doRound(long, int, MathContext)::: big decimal do round:::mcp->if->prec->longDigitLength->drop->while->checkScaleNonZero->divideAndRound->longDigitLength->return->valueOf->return->valueOf
BigDecimal#doRound(BigInteger, int, MathContext)::: big decimal do round:::mcp->prec->if->compactVal->compactValFor->mode->drop->if->bigDigitLength->while->checkScaleNonZero->divideAndRoundByTenPow->compactValFor->if->break->bigDigitLength->if->longDigitLength->while->checkScaleNonZero->divideAndRound->longDigitLength->return->valueOf->return->new->BigDecimal
BigDecimal#divideAndRoundByTenPow(BigInteger, int, int)::: big decimal divide and round by ten pow:::if->divideAndRound->else->bigTenToThe->divideAndRound->return
BigDecimal#divideAndRound(long, long, int, int, int):::Internally used for division operation for division long by long:::qsign->q->if->return->valueOf->r->if->increment->needIncrement->return->valueOf->else->if->return->createAndStripZerosToMatchScale->else->return->valueOf
BigDecimal#divideAndRound(long, long, int):::Divides long by long and do rounding based on the passed in roundingMode.:::qsign->q->if->return->r->if->increment->needIncrement->return->else->return
BigDecimal#commonNeedIncrement(int, int, int, boolean):::Shared logic of need increment computation.:::switch->throw->new->ArithmeticException->return->return->return->return->if->return->else->if->return->else->switch->return->return->return->throw->new->AssertionError
BigDecimal#needIncrement(long, int, int, long, long):::Tests if quotient has to be incremented according the roundingMode:::cmpFracHalf->if->else->longCompareMagnitude->return->commonNeedIncrement
BigDecimal#divideAndRound(BigInteger, long, int):::Divides BigInteger value by long value and do rounding based on the passed in roundingMode.:::mdividend->new->MutableBigInteger->mq->new->MutableBigInteger->r->mdividend->divide->isRemainderZero->qsign->if->if->needIncrement->mq->add->return->mq->toBigInteger
BigDecimal#divideAndRound(BigInteger, long, int, int, int):::Internally used for division operation for division BigInteger by long:::mdividend->new->MutableBigInteger->mq->new->MutableBigInteger->r->mdividend->divide->isRemainderZero->qsign->if->if->needIncrement->mq->add->return->mq->toBigDecimal->else->if->compactVal->mq->toCompactValue->if->return->createAndStripZerosToMatchScale->intVal->mq->toBigInteger->return->createAndStripZerosToMatchScale->else->return->mq->toBigDecimal
BigDecimal#needIncrement(long, int, int, MutableBigInteger, long):::Tests if quotient has to be incremented according the roundingMode:::cmpFracHalf->if->else->longCompareMagnitude->return->mq->isOdd->commonNeedIncrement
BigDecimal#divideAndRound(BigInteger, BigInteger, int):::Divides BigInteger value by BigInteger value and do rounding based on the passed in roundingMode.:::isRemainderZero->qsign->mdividend->new->MutableBigInteger->mq->new->MutableBigInteger->mdivisor->new->MutableBigInteger->mr->mdividend->divide->mr->isZero->if->if->needIncrement->mq->add->return->mq->toBigInteger
BigDecimal#divideAndRound(BigInteger, BigInteger, int, int, int):::Internally used for division operation for division BigInteger by BigInteger:::isRemainderZero->qsign->mdividend->new->MutableBigInteger->mq->new->MutableBigInteger->mdivisor->new->MutableBigInteger->mr->mdividend->divide->mr->isZero->if->if->needIncrement->mq->add->return->mq->toBigDecimal->else->if->compactVal->mq->toCompactValue->if->return->createAndStripZerosToMatchScale->intVal->mq->toBigInteger->return->createAndStripZerosToMatchScale->else->return->mq->toBigDecimal
BigDecimal#needIncrement(MutableBigInteger, int, int, MutableBigInteger, MutableBigInteger):::Tests if quotient has to be incremented according the roundingMode:::cmpFracHalf->mr->compareHalf->return->mq->isOdd->commonNeedIncrement
BigDecimal#createAndStripZerosToMatchScale(BigInteger, int, long):::Remove insignificant trailing zeros from this BigInteger value until the preferred scale is reached or no more zeros can be removed:::qr->while->intVal->compareMagnitude->if->intVal->testBit->break->intVal->divideAndRemainder->if->signum->break->checkScale->return->valueOf
BigDecimal#createAndStripZerosToMatchScale(long, int, long):::Remove insignificant trailing zeros from this long value until the preferred scale is reached or no more zeros can be removed:::while->Math->abs->if->break->r->if->break->checkScale->return->valueOf
BigDecimal#stripZerosToMatchScale(BigInteger, long, int, int)::: big decimal strip zeros to match scale:::if->return->createAndStripZerosToMatchScale->else->return->createAndStripZerosToMatchScale
BigDecimal#add(long, long)::: big decimal add:::sum->if->return->return
BigDecimal#add(long, long, int)::: big decimal add:::sum->add->if->return->BigDecimal->valueOf->return->BigInteger->valueOf->add->new->BigDecimal
BigDecimal#add(long, int, long, int)::: big decimal add:::sdiff->if->return->add->else->if->raise->checkScale->scaledX->longMultiplyPowerTen->if->return->add->else->bigsum->bigMultiplyPowerTen->add->return->new->BigDecimal->valueOf->else->raise->checkScale->scaledY->longMultiplyPowerTen->if->return->add->else->bigsum->bigMultiplyPowerTen->add->return->new->BigDecimal->valueOf
BigDecimal#add(long, int, BigInteger, int)::: big decimal add:::rscale->sdiff->sameSigns->Long->signum->sum->if->raise->checkScale->scaledX->longMultiplyPowerTen->if->snd->bigMultiplyPowerTen->add->else->snd->add->else->raise->checkScale->bigMultiplyPowerTen->snd->add->return->new->BigDecimal->valueOf
BigDecimal#add(BigInteger, int, BigInteger, int)::: big decimal add:::rscale->sdiff->if->if->raise->checkScale->bigMultiplyPowerTen->else->raise->checkScale->bigMultiplyPowerTen->sum->fst->add->return->new->BigDecimal->valueOf
BigDecimal#bigMultiplyPowerTen(long, int)::: big decimal big multiply power ten:::if->return->BigInteger->valueOf->return->bigTenToThe->multiply
BigDecimal#bigMultiplyPowerTen(BigInteger, int)::: big decimal big multiply power ten:::if->return->if->return->value->multiply->return->value->bigTenToThe->multiply
BigDecimal#divideSmallFastPath(long, int, long, int, long, MathContext):::Returns a BigDecimal whose value is (xs / ys), with rounding according to the context settings:::mcp->roundingMode->xraise->scaledX->longMultiplyPowerTen->quotient->cmp->longCompareMagnitude->if->scl->checkScaleNonZero->if->checkScaleNonZero->raise->checkScaleNonZero->scaledXs->if->longMultiplyPowerTen->if->checkScaleNonZero->multiplyDivideAndRound->if->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->else->newScale->checkScaleNonZero->if->checkScaleNonZero->divideAndRound->else->raise->checkScaleNonZero->scaledYs->if->longMultiplyPowerTen->rb->bigMultiplyPowerTen->BigInteger->valueOf->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->else->scl->checkScaleNonZero->if->checkScaleNonZero->roundedTenPower->else->scaledXs->if->longMultiplyPowerTen->if->checkScaleNonZero->multiplyDivideAndRound->if->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->return->doRound
BigDecimal#divide(long, int, long, int, long, MathContext):::Returns a BigDecimal whose value is (xs / ys), with rounding according to the context settings.:::mcp->if->return->divideSmallFastPath->if->compareMagnitudeNormalized->roundingMode->scl->checkScaleNonZero->quotient->if->checkScaleNonZero->raise->checkScaleNonZero->scaledXs->if->longMultiplyPowerTen->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->else->newScale->checkScaleNonZero->if->checkScaleNonZero->divideAndRound->else->raise->checkScaleNonZero->scaledYs->if->longMultiplyPowerTen->rb->bigMultiplyPowerTen->BigInteger->valueOf->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->return->doRound
BigDecimal#divide(BigInteger, int, long, int, long, MathContext):::Returns a BigDecimal whose value is (xs / ys), with rounding according to the context settings.:::if->compareMagnitudeNormalized->mcp->roundingMode->quotient->scl->checkScaleNonZero->if->checkScaleNonZero->raise->checkScaleNonZero->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->newScale->checkScaleNonZero->if->checkScaleNonZero->divideAndRound->else->raise->checkScaleNonZero->scaledYs->if->longMultiplyPowerTen->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->checkScaleNonZero->divideAndRound->return->doRound
BigDecimal#divide(long, int, BigInteger, int, long, MathContext):::Returns a BigDecimal whose value is (xs / ys), with rounding according to the context settings.:::if->compareMagnitudeNormalized->mcp->roundingMode->quotient->scl->checkScaleNonZero->if->checkScaleNonZero->raise->checkScaleNonZero->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->newScale->checkScaleNonZero->raise->checkScaleNonZero->rb->bigMultiplyPowerTen->BigInteger->valueOf->checkScaleNonZero->divideAndRound->return->doRound
BigDecimal#divide(BigInteger, int, BigInteger, int, long, MathContext):::Returns a BigDecimal whose value is (xs / ys), with rounding according to the context settings.:::if->compareMagnitudeNormalized->mcp->roundingMode->quotient->scl->checkScaleNonZero->if->checkScaleNonZero->raise->checkScaleNonZero->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->else->newScale->checkScaleNonZero->raise->checkScaleNonZero->rb->bigMultiplyPowerTen->checkScaleNonZero->divideAndRound->return->doRound
BigDecimal#multiplyDivideAndRound(long, long, long, int, int, int)::: big decimal multiply divide and round:::qsign->Long->signum->Long->signum->Long->signum->Math->abs->Math->abs->Math->abs->d0_hi->d0_lo->d1_hi->d1_lo->product->d0->d1->d2->d3->dividendHi->make64->dividendLo->make64->return->divideAndRound128
BigDecimal#divideAndRound128(long, long, long, int, int, int, int)::: big decimal divide and round128:::if->return->shift->Long->numberOfLeadingZeros->v1->v0->tmp->u1->u0->u2->q1->r_tmp->if->else->if->else->rq->divRemNegativeLong->while->make64->unsignedLongCompare->if->break->mulsub->q0->if->else->if->else->rq->divRemNegativeLong->while->make64->unsignedLongCompare->if->break->if->mq->new->intArr->new->MutableBigInteger->if->return->mq->toBigDecimal->r->mulsub->if->if->needIncrement->mq->add->return->mq->toBigDecimal->else->if->intVal->mq->toBigInteger->return->createAndStripZerosToMatchScale->else->return->mq->toBigDecimal->q->make64->if->return->valueOf->r->mulsub->if->increment->needIncrement->return->valueOf->else->if->return->createAndStripZerosToMatchScale->else->return->valueOf
BigDecimal#roundedTenPower(int, int, int, int)::: big decimal rounded ten power:::if->diff->if->return->scaledTenPow->else->return->valueOf->else->return->scaledTenPow
BigDecimal#scaledTenPow(int, int, int)::: big decimal scaled ten pow:::if->return->valueOf->else->unscaledVal->bigTenToThe->if->unscaledVal->negate->return->new->BigDecimal
BigDecimal#divRemNegativeLong(long, long):::Calculate the quotient and remainder of dividing a negative long by another long.:::q->r->while->while->return->new->longArr
BigDecimal#make64(long, long)::: big decimal make64:::return
BigDecimal#mulsub(long, long, long, long, long)::: big decimal mulsub:::tmp->return->make64
BigDecimal#unsignedLongCompare(long, long)::: big decimal unsigned long compare:::return
BigDecimal#unsignedLongCompareEq(long, long)::: big decimal unsigned long compare eq:::return
BigDecimal#compareMagnitudeNormalized(long, int, long, int)::: big decimal compare magnitude normalized:::sdiff->if->if->longMultiplyPowerTen->else->longMultiplyPowerTen->if->return->longCompareMagnitude->else->return
BigDecimal#compareMagnitudeNormalized(long, int, BigInteger, int)::: big decimal compare magnitude normalized:::if->return->sdiff->if->if->longMultiplyPowerTen->return->bigMultiplyPowerTen->compareMagnitude->return
BigDecimal#compareMagnitudeNormalized(BigInteger, int, BigInteger, int)::: big decimal compare magnitude normalized:::sdiff->if->return->bigMultiplyPowerTen->compareMagnitude->else->return->xs->bigMultiplyPowerTen->compareMagnitude
BigDecimal#multiply(long, long)::: big decimal multiply:::product->ax->Math->abs->ay->Math->abs->if->return->return
BigDecimal#multiply(long, long, int)::: big decimal multiply:::product->multiply->if->return->valueOf->return->BigInteger->valueOf->multiply->new->BigDecimal
BigDecimal#multiply(long, BigInteger, int)::: big decimal multiply:::if->return->zeroValueOf->return->y->multiply->new->BigDecimal
BigDecimal#multiply(BigInteger, BigInteger, int)::: big decimal multiply:::return->x->multiply->new->BigDecimal
BigDecimal#multiplyAndRound(long, long, int, MathContext):::Multiplies two long values and rounds according MathContext:::product->multiply->if->return->doRound->rsign->if->if->m0_hi->m0_lo->m1_hi->m1_lo->m0->m1->m2->m3->mHi->make64->mLo->make64->res->doRound128->if->return->BigInteger->valueOf->multiply->new->BigDecimal->return->doRound
BigDecimal#multiplyAndRound(long, BigInteger, int, MathContext)::: big decimal multiply and round:::if->return->zeroValueOf->return->y->multiply->doRound
BigDecimal#multiplyAndRound(BigInteger, BigInteger, int, MathContext)::: big decimal multiply and round:::return->x->multiply->doRound
BigDecimal#doRound128(long, long, int, int, MathContext):::rounds 128-bit value according MathContext returns null if result can't be repsented as compact BigDecimal.:::mcp->drop->res->if->precision->checkScaleNonZero->divideAndRound128->if->return->doRound->return
BigDecimal#precision(long, long)::: big decimal precision:::if->if->return->longDigitLength->return->unsignedLongCompareEq->r->Long->numberOfLeadingZeros->idx->return->longLongCompareMagnitude
BigDecimal#longLongCompareMagnitude(long, long, long, long)::: big decimal long long compare magnitude:::if->return->return
BigDecimal#divide(long, int, long, int, int, int)::: big decimal divide:::if->checkScale->newScale->raise->if->xs->if->longMultiplyPowerTen->return->divideAndRound->q->multiplyDivideAndRound->if->return->scaledDividend->bigMultiplyPowerTen->return->divideAndRound->else->newScale->checkScale->raise->if->ys->if->longMultiplyPowerTen->return->divideAndRound->scaledDivisor->bigMultiplyPowerTen->return->BigInteger->valueOf->divideAndRound
BigDecimal#divide(BigInteger, int, long, int, int, int)::: big decimal divide:::if->checkScale->newScale->raise->scaledDividend->bigMultiplyPowerTen->return->divideAndRound->else->newScale->checkScale->raise->if->ys->if->longMultiplyPowerTen->return->divideAndRound->scaledDivisor->bigMultiplyPowerTen->return->divideAndRound
BigDecimal#divide(long, int, BigInteger, int, int, int)::: big decimal divide:::if->checkScale->newScale->raise->scaledDividend->bigMultiplyPowerTen->return->divideAndRound->else->newScale->checkScale->raise->scaledDivisor->bigMultiplyPowerTen->return->BigInteger->valueOf->divideAndRound
BigDecimal#divide(BigInteger, int, BigInteger, int, int, int)::: big decimal divide:::if->checkScale->newScale->raise->scaledDividend->bigMultiplyPowerTen->return->divideAndRound->else->newScale->checkScale->raise->scaledDivisor->bigMultiplyPowerTen->return->divideAndRound
BigInteger#parseInt(char[], int, int)::: big integer parse int:::result->Character->digit->if->throw->new->String->new->NumberFormatException->for->index->return
BigInteger#destructiveMulAdd(int[], int, int)::: big integer destructive mul add:::ylong->zlong->len->product->carry->for->i->sum->for->i
BigInteger#randomBits(int, Random)::: big integer random bits:::if->throw->new->IllegalArgumentException->numBytes->randomBits->new->byteArr->if->rnd->nextBytes->excessBits->return
BigInteger#probablePrime(int, Random):::Returns a positive BigInteger that is probably prime, with the specified bitLength:::if->throw->new->ArithmeticException->return->smallPrime->largePrime
BigInteger#smallPrime(int, int, Random):::Find a random number of the specified bitLength that is probably prime:::magLen->temp->new->intArr->highBit->highMask->while->for->i->if->p->new->BigInteger->if->r->p->remainder->longValue->if->continue->if->return->if->p->primeToCertainty->return
BigInteger#largePrime(int, int, Random):::Find a random number of the specified bitLength that is probably prime:::p->new->BigInteger->setBit->searchLen->getPrimeSearchLen->searchSieve->new->BitSieve->candidate->searchSieve->retrieve->while->candidate->bitLength->p->BigInteger->valueOf->add->if->p->bitLength->new->BigInteger->setBit->new->BitSieve->searchSieve->retrieve->return
BigInteger#nextProbablePrime():::Returns the first integer greater than this BigInteger that is probably prime:::if->throw->new->ArithmeticException->if->this->equals->return->result->this->add->if->result->bitLength->if->result->testBit->result->add->while->if->result->bitLength->r->result->remainder->longValue->if->result->add->continue->if->result->bitLength->return->if->result->primeToCertainty->return->result->add->if->result->testBit->result->subtract->searchLen->result->bitLength->getPrimeSearchLen->while->searchSieve->new->BitSieve->candidate->searchSieve->retrieve->if->return->result->BigInteger->valueOf->add
BigInteger#getPrimeSearchLen(int)::: big integer get prime search len:::if->throw->new->ArithmeticException->return
BigInteger#primeToCertainty(int, Random):::Returns true if this BigInteger is probably prime, false if it's definitely composite:::rounds->n->Math->min->sizeInBits->this->bitLength->if->return->passesMillerRabin->if->else->if->else->if->else->if->else->return->passesMillerRabin->passesLucasLehmer
BigInteger#passesLucasLehmer():::Returns true iff this BigInteger is a Lucas-Lehmer probable prime:::thisPlusOne->this->add->d->while->jacobiSymbol->Math->abs->u->lucasLehmerSequence->return->u->mod->equals
BigInteger#jacobiSymbol(int, BigInteger):::Computes Jacobi(p,n):::if->return->j->u->if->n8->if->while->if->if->if->return->if->n->BigInteger->valueOf->mod->intValue->while->while->if->if->if->return->t->if->return
BigInteger#lucasLehmerSequence(int, BigInteger, BigInteger)::: big integer lucas lehmer sequence:::d->BigInteger->valueOf->u->u2->v->v2->for->i->k->bitLength->return
BigInteger#passesMillerRabin(int, Random):::Returns true iff this BigInteger passes the specified number of Miller-Rabin tests:::thisMinusOne->this->subtract->m->a->m->getLowestSetBit->m->shiftRight->if->ThreadLocalRandom->current->for->i->return
BigInteger#checkRange():::Throws an ArithmeticException if the BigInteger would be out of the supported range.:::if->reportOverflow
BigInteger#reportOverflow()::: big integer report overflow:::throw->new->ArithmeticException
BigInteger#valueOf(long):::Returns a BigInteger whose value is equal to that of the specified long.:::if->return->if->return->else->if->return->return->new->BigInteger
BigInteger#valueOf(int[]):::Returns a BigInteger with the given two's complement representation:::return->new->BigInteger->new->BigInteger
BigInteger#add(BigInteger):::Returns a BigInteger whose value is (this + val).:::if->return->if->return->if->return->add->new->BigInteger->cmp->compareMagnitude->if->return->resultMag->subtract->subtract->trustedStripLeadingZeroInts->return->new->BigInteger
BigInteger#add(long):::Package private methods used by BigDecimal code to add a BigInteger with a long:::if->return->if->return->valueOf->if->Long->signum->return->Math->abs->add->new->BigInteger->cmp->compareMagnitude->if->return->resultMag->Math->abs->subtract->Math->abs->subtract->trustedStripLeadingZeroInts->return->new->BigInteger
BigInteger#add(int[], long):::Adds the contents of the int array x and long value val:::y->sum->xIndex->result->highWord->if->new->intArr->else->if->new->intArr->return->else->new->intArr->carry->while->while->if->bigger->new->intArr->System->arraycopy->return->return
BigInteger#add(int[], int[]):::Adds the contents of the int arrays x and y:::if->tmp->xIndex->yIndex->result->new->intArr->sum->if->else->while->carry->while->while->if->bigger->new->intArr->System->arraycopy->return->return
BigInteger#subtract(long, int[])::: big integer subtract:::highWord->if->result->new->intArr->return->else->result->new->intArr->if->difference->borrow->if->else->return->else->difference->return
BigInteger#subtract(int[], long):::Subtracts the contents of the second argument (val) from the first (big):::highWord->bigIndex->result->new->intArr->difference->if->else->borrow->while->while->return
BigInteger#subtract(BigInteger):::Returns a BigInteger whose value is (this - val).:::if->return->if->return->val->negate->if->return->add->new->BigInteger->cmp->compareMagnitude->if->return->resultMag->subtract->subtract->trustedStripLeadingZeroInts->return->new->BigInteger
BigInteger#subtract(int[], int[]):::Subtracts the contents of the second int arrays (little) from the first (big):::bigIndex->result->new->intArr->littleIndex->difference->while->borrow->while->while->return
BigInteger#multiply(BigInteger):::Returns a BigInteger whose value is (this * val).:::return->multiply
BigInteger#multiply(BigInteger, boolean):::Returns a BigInteger whose value is (this * val):::if->return->xlen->if->return->square->ylen->if->resultSign->if->return->multiplyByInt->if->return->multiplyByInt->result->multiplyToLen->trustedStripLeadingZeroInts->return->new->BigInteger->else->if->return->multiplyKaratsuba->else->if->if->bitLength->bitLength->reportOverflow->return->multiplyToomCook3
BigInteger#multiplyByInt(int[], int, int)::: big integer multiply by int:::if->Integer->bitCount->return->Integer->numberOfTrailingZeros->shiftLeft->new->BigInteger->xlen->rmag->new->intArr->carry->yl->rstart->for->i->if->copyOfRange->else->return->new->BigInteger
BigInteger#multiply(long):::Package private methods used by BigDecimal code to multiply a BigInteger with a long:::if->return->if->return->BigInteger->valueOf->multiply->rsign->if->dh->dl->xlen->value->rmag->new->intArr->new->intArr->carry->rstart->for->i->if->for->i->if->copyOfRange->return->new->BigInteger
BigInteger#multiplyToLen(int[], int, int[], int, int[]):::Multiplies int arrays x and y to the specified lengths and places the result into z:::multiplyToLenCheck->multiplyToLenCheck->return->implMultiplyToLen
BigInteger#implMultiplyToLen(int[], int, int[], int, int[])::: big integer impl multiply to len:::xstart->ystart->if->new->intArr->carry->for->j->k->for->i->return
BigInteger#multiplyToLenCheck(int[], int)::: big integer multiply to len check:::if->return->Objects->requireNonNull->if->throw->new->ArrayIndexOutOfBoundsException
BigInteger#multiplyKaratsuba(BigInteger, BigInteger):::Multiplies two BigIntegers using the Karatsuba multiplication algorithm:::xlen->ylen->half->Math->max->xl->x->getLower->xh->x->getUpper->yl->y->getLower->yh->y->getUpper->p1->xh->multiply->p2->xl->multiply->p3->xh->add->yh->add->multiply->result->p1->shiftLeft->p3->subtract->subtract->add->shiftLeft->add->if->return->result->negate->else->return
BigInteger#multiplyToomCook3(BigInteger, BigInteger):::Multiplies two BigIntegers using a 3-way Toom-Cook multiplication algorithm:::alen->blen->largest->Math->max->k->r->a0->a1->a2->b0->b1->b2->a->getToomSlice->a->getToomSlice->a->getToomSlice->b->getToomSlice->b->getToomSlice->b->getToomSlice->v0->v1->v2->vm1->vinf->t1->t2->tm1->da1->db1->a0->multiply->a2->add->b2->add->da1->subtract->db1->subtract->multiply->da1->add->db1->add->da1->multiply->da1->add->shiftLeft->subtract->db1->add->shiftLeft->subtract->multiply->a2->multiply->v2->subtract->exactDivideBy3->v1->subtract->shiftRight->v1->subtract->t2->subtract->shiftRight->t1->subtract->subtract->t2->vinf->shiftLeft->subtract->tm1->subtract->ss->result->vinf->shiftLeft->add->shiftLeft->add->shiftLeft->add->shiftLeft->add->if->return->result->negate->else->return
BigInteger#getToomSlice(int, int, int, int):::Returns a slice of a BigInteger for use in Toom-Cook multiplication.:::start->end->sliceSize->len->offset->if->else->if->if->return->if->return->if->return->this->abs->intSlice->new->intArr->System->arraycopy->return->trustedStripLeadingZeroInts->new->BigInteger
BigInteger#exactDivideBy3():::Does an exact division (that is, the remainder is known to be zero) of the specified number by 3:::len->result->new->intArr->x->w->q->borrow->for->i->trustedStripLeadingZeroInts->return->new->BigInteger
BigInteger#getLower(int):::Returns a new BigInteger representing n lower ints of the number:::len->if->return->abs->lowerInts->new->intArr->System->arraycopy->return->trustedStripLeadingZeroInts->new->BigInteger
BigInteger#getUpper(int):::Returns a new BigInteger representing mag.length-n upper ints of the number:::len->if->return->upperLen->upperInts->new->intArr->System->arraycopy->return->trustedStripLeadingZeroInts->new->BigInteger
BigInteger#square():::Returns a BigInteger whose value is (this^2).:::return->square
BigInteger#square(boolean):::Returns a BigInteger whose value is (this^2):::if->return->len->if->z->squareToLen->return->trustedStripLeadingZeroInts->new->BigInteger->else->if->return->squareKaratsuba->else->if->if->bitLength->reportOverflow->return->squareToomCook3
BigInteger#squareToLen(int[], int, int[]):::Squares the contents of the int array x:::zlen->if->new->intArr->implSquareToLenChecks->return->implSquareToLen
BigInteger#implSquareToLenChecks(int[], int, int[], int):::Parameters validation.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
BigInteger#implSquareToLen(int[], int, int[], int):::Java Runtime may use intrinsic for this method.:::lastProductLowWord->for->j->i->for->i->offset->primitiveLeftShift->return
BigInteger#squareKaratsuba():::Squares a BigInteger using the Karatsuba squaring algorithm:::half->xl->getLower->xh->getUpper->xhs->xh->square->xls->xl->square->return->xhs->shiftLeft->xl->add->square->xhs->add->subtract->add->shiftLeft->add
BigInteger#squareToomCook3():::Squares a BigInteger using the 3-way Toom-Cook squaring algorithm:::len->k->r->a0->a1->a2->getToomSlice->getToomSlice->getToomSlice->v0->v1->v2->vm1->vinf->t1->t2->tm1->da1->a0->square->a2->add->da1->subtract->square->da1->add->da1->square->a2->square->da1->add->shiftLeft->subtract->square->v2->subtract->exactDivideBy3->v1->subtract->shiftRight->v1->subtract->t2->subtract->shiftRight->t1->subtract->subtract->t2->vinf->shiftLeft->subtract->tm1->subtract->ss->return->vinf->shiftLeft->add->shiftLeft->add->shiftLeft->add->shiftLeft->add
BigInteger#divide(BigInteger):::Returns a BigInteger whose value is (this / val).:::if->return->divideKnuth->else->return->divideBurnikelZiegler
BigInteger#divideKnuth(BigInteger):::Returns a BigInteger whose value is (this / val) using an O(n^2) algorithm from Knuth.:::q->new->MutableBigInteger->a->new->MutableBigInteger->b->new->MutableBigInteger->a->divideKnuth->return->q->toBigInteger
BigInteger#divideAndRemainder(BigInteger):::Returns an array of two BigIntegers containing (this / val) followed by (this % val).:::if->return->divideAndRemainderKnuth->else->return->divideAndRemainderBurnikelZiegler
BigInteger#divideAndRemainderKnuth(BigInteger):::Long division:::result->new->BigIntegerArr->q->new->MutableBigInteger->a->new->MutableBigInteger->b->new->MutableBigInteger->r->a->divideKnuth->q->toBigInteger->r->toBigInteger->return
BigInteger#remainder(BigInteger):::Returns a BigInteger whose value is (this % val).:::if->return->remainderKnuth->else->return->remainderBurnikelZiegler
BigInteger#remainderKnuth(BigInteger):::Long division:::q->new->MutableBigInteger->a->new->MutableBigInteger->b->new->MutableBigInteger->return->a->divideKnuth->toBigInteger
BigInteger#divideBurnikelZiegler(BigInteger):::Calculates this / val using the Burnikel-Ziegler algorithm.:::return->divideAndRemainderBurnikelZiegler
BigInteger#remainderBurnikelZiegler(BigInteger):::Calculates this % val using the Burnikel-Ziegler algorithm.:::return->divideAndRemainderBurnikelZiegler
BigInteger#divideAndRemainderBurnikelZiegler(BigInteger):::Computes this / val and this % val using the Burnikel-Ziegler algorithm.:::q->new->MutableBigInteger->r->new->MutableBigInteger->new->MutableBigInteger->divideAndRemainderBurnikelZiegler->qBigInt->q->isZero->q->toBigInteger->rBigInt->r->isZero->r->toBigInteger->return->new->BigIntegerArr
BigInteger#pow(int):::Returns a BigInteger whose value is (this^exponent):::if->throw->new->ArithmeticException->if->return->partToSquare->this->abs->powersOfTwo->partToSquare->getLowestSetBit->bitsToShiftLong->if->reportOverflow->bitsToShift->remainingBits->if->partToSquare->shiftRight->partToSquare->bitLength->if->if->return->NEGATIVE_ONE->shiftLeft->else->return->ONE->shiftLeft->else->partToSquare->bitLength->if->if->return->else->return->scaleFactor->if->newSign->result->baseToPow2->workingExponent->while->if->if->if->if->return->valueOf->else->return->valueOf->shiftLeft->else->return->valueOf->else->if->bitLength->reportOverflow->answer->workingExponent->while->if->answer->multiply->if->partToSquare->square->if->answer->shiftLeft->if->return->answer->negate->else->return
BigInteger#sqrt():::Returns the integer square root of this BigInteger:::if->throw->new->ArithmeticException->return->new->MutableBigInteger->sqrt->toBigInteger
BigInteger#sqrtAndRemainder():::Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.:::s->sqrt->r->this->s->square->subtract->return->new->BigIntegerArr
BigInteger#gcd(BigInteger):::Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val):::if->return->this->abs->else->if->return->val->abs->a->new->MutableBigInteger->b->new->MutableBigInteger->result->a->hybridGCD->return->result->toBigInteger
BigInteger#bitLengthForInt(int):::Package private method to return bit length for an integer.:::return->Integer->numberOfLeadingZeros
BigInteger#leftShift(int[], int, int):::Left shift int array a up to len by n bits:::nInts->nBits->bitsInHighWord->bitLengthForInt->if->primitiveLeftShift->return->else->if->result->new->intArr->System->arraycopy->primitiveLeftShift->return->else->result->new->intArr->System->arraycopy->primitiveRightShift->return
BigInteger#primitiveRightShift(int[], int, int)::: big integer primitive right shift:::n2->for->i->c
BigInteger#primitiveLeftShift(int[], int, int)::: big integer primitive left shift:::if->return->n2->for->i->c->m
BigInteger#bitLength(int[], int):::Calculate bitlength of contents of the first len elements an int array, assuming there are no leading zero ints.:::if->return->return->bitLengthForInt
BigInteger#abs():::Returns a BigInteger whose value is the absolute value of this BigInteger.:::return->this->negate
BigInteger#negate():::Returns a BigInteger whose value is (-this).:::return->new->BigInteger
BigInteger#signum():::Returns the signum function of this BigInteger.:::return
BigInteger#mod(BigInteger):::Returns a BigInteger whose value is (this mod m):::if->throw->new->ArithmeticException->result->this->remainder->return->result->add
BigInteger#modPow(BigInteger, BigInteger):::Returns a BigInteger whose value is (this^exponent mod m):::if->throw->new->ArithmeticException->if->return->m->equals->if->this->equals->return->m->equals->if->this->equals->return->if->this->equals->exponent->testBit->return->m->equals->invertResult->if->exponent->negate->base->this->compareTo->this->mod->result->if->m->testBit->base->oddModPow->else->p->m->getLowestSetBit->m1->m->shiftRight->m2->ONE->shiftLeft->base2->this->compareTo->this->mod->a1->m1->equals->base2->oddModPow->a2->base->modPow2->y1->m2->modInverse->y2->m1->modInverse->if->a1->multiply->multiply->a2->multiply->multiply->add->mod->else->t1->new->MutableBigInteger->a1->multiply->new->MutableBigInteger->new->MutableBigInteger->multiply->t2->new->MutableBigInteger->a2->multiply->new->MutableBigInteger->new->MutableBigInteger->multiply->t1->add->q->new->MutableBigInteger->t1->new->MutableBigInteger->divide->toBigInteger->return->result->modInverse
BigInteger#montgomeryMultiply(int[], int[], int[], int, long, int[])::: big integer montgomery multiply:::implMontgomeryMultiplyChecks->if->multiplyToLen->return->montReduce->else->return->materialize->implMontgomeryMultiply
BigInteger#montgomerySquare(int[], int[], int, long, int[])::: big integer montgomery square:::implMontgomeryMultiplyChecks->if->squareToLen->return->montReduce->else->return->materialize->implMontgomerySquare
BigInteger#implMontgomeryMultiplyChecks(int[], int[], int[], int, int[])::: big integer impl montgomery multiply checks:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
BigInteger#materialize(int[], int)::: big integer materialize:::if->new->intArr->return
BigInteger#implMontgomeryMultiply(int[], int[], int[], int, long, int[])::: big integer impl montgomery multiply:::multiplyToLen->return->montReduce
BigInteger#implMontgomerySquare(int[], int[], int, long, int[])::: big integer impl montgomery square:::squareToLen->return->montReduce
BigInteger#oddModPow(BigInteger, BigInteger):::Returns a BigInteger whose value is x to the power of y mod z:::if->y->equals->return->if->return->base->mag->clone->exp->mod->modLen->if->x->new->intArr->System->arraycopy->wbits->ebits->bitLength->if->while->tblmask->table->new->intArrs->for->i->n0->inv->MutableBigInteger->inverseMod64->a->leftShift->q->new->MutableBigInteger->a2->new->MutableBigInteger->b2->new->MutableBigInteger->b2->normalize->r->a2->divide->r->toIntArray->if->offset->t2->new->intArr->System->arraycopy->b->montgomerySquare->t->Arrays->copyOf->for->i->bitpos->buf->elen->eIndex->for->i->multpos->isone->while->mult->if->while->if->if->if->while->if->if->mult->clone->else->montgomeryMultiply->if->break->if->montgomerySquare->t2->new->intArr->System->arraycopy->montReduce->Arrays->copyOf->return->new->BigInteger
BigInteger#montReduce(int[], int[], int, int):::Montgomery reduce n, modulo mod:::c->len->offset->do->nEnd->carry->mulAdd->addOne->while->while->subN->while->intArrayCmpToLen->subN->return
BigInteger#intArrayCmpToLen(int[], int[], int)::: big integer int array cmp to len:::for->i->return
BigInteger#subN(int[], int[], int):::Subtracts two numbers of same length, returning borrow.:::sum->while->return
BigInteger#mulAdd(int[], int[], int, int, int):::Multiply an array by one word k and add to result, return the carry:::implMulAddCheck->return->implMulAdd
BigInteger#implMulAddCheck(int[], int[], int, int, int):::Parameters validation.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
BigInteger#implMulAdd(int[], int[], int, int, int):::Java Runtime may use intrinsic for this method.:::kLong->carry->for->j->return
BigInteger#addOne(int[], int, int, int):::Add one word to the number a mlen words into a:::t->if->return->while->if->return->else->if->return->return
BigInteger#modPow2(BigInteger, int):::Returns a BigInteger whose value is (this ** exponent) mod (2**p):::result->baseToPow2->this->mod2->expOffset->limit->exponent->bitLength->if->this->testBit->while->if->exponent->testBit->result->multiply->mod2->if->baseToPow2->square->mod2->return
BigInteger#mod2(int):::Returns a BigInteger whose value is this mod(2**p):::if->bitLength->return->numInts->mag->new->intArr->System->arraycopy->excessBits->return->new->BigInteger->new->BigInteger
BigInteger#modInverse(BigInteger):::Returns a BigInteger whose value is (this^-1 mod m).:::if->throw->new->ArithmeticException->if->m->equals->return->modVal->if->this->compareMagnitude->this->mod->if->modVal->equals->return->a->new->MutableBigInteger->b->new->MutableBigInteger->result->a->mutableModInverse->return->result->toBigInteger
BigInteger#shiftLeft(int):::Returns a BigInteger whose value is (this << n):::if->return->if->return->shiftLeft->new->BigInteger->else->if->return->else->return->shiftRightImpl
BigInteger#shiftLeft(int[], int):::Returns a magnitude array whose value is (mag << n):::nInts->nBits->magLen->newMag->if->new->intArr->System->arraycopy->else->i->nBits2->highBits->if->new->intArr->else->new->intArr->j->while->return
BigInteger#shiftRight(int):::Returns a BigInteger whose value is (this >> n):::if->return->if->return->shiftRightImpl->else->if->return->else->return->shiftLeft->new->BigInteger
BigInteger#shiftRightImpl(int):::Returns a BigInteger whose value is (this >> n):::nInts->nBits->magLen->newMag->if->return->if->newMagLen->Arrays->copyOf->else->i->highBits->if->new->intArr->else->new->intArr->nBits2->j->while->if->onesLost->for->i->j->if->if->javaIncrement->return->new->BigInteger
BigInteger#javaIncrement(int[])::: big integer java increment:::lastSum->for->i->if->new->intArr->return
BigInteger#and(BigInteger):::Returns a BigInteger whose value is (this & val):::result->Math->intLength->val->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#or(BigInteger):::Returns a BigInteger whose value is (this | val):::result->Math->intLength->val->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#xor(BigInteger):::Returns a BigInteger whose value is (this ^ val):::result->Math->intLength->val->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#not():::Returns a BigInteger whose value is (~this):::result->intLength->new->intArr->for->i->return->valueOf
BigInteger#andNot(BigInteger):::Returns a BigInteger whose value is (this & ~val):::result->Math->intLength->val->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#testBit(int):::Returns true if and only if the designated bit is set:::if->throw->new->ArithmeticException->return->getInt
BigInteger#setBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set:::if->throw->new->ArithmeticException->intNum->result->Math->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#clearBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared:::if->throw->new->ArithmeticException->intNum->result->Math->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#flipBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped:::if->throw->new->ArithmeticException->intNum->result->Math->intLength->max->new->intArr->for->i->return->valueOf
BigInteger#getLowestSetBit():::Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit):::lsb->if->if->else->i->b->for->getInt->Integer->numberOfTrailingZeros->return
BigInteger#bitLength():::Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit:::n->if->m->len->if->else->magBitLength->bitLengthForInt->if->pow2->Integer->bitCount->for->i->else->return
BigInteger#bitCount():::Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit:::bc->if->for->i->if->magTrailingZeroCount->j->for->Integer->numberOfTrailingZeros->return
BigInteger#isProbablePrime(int):::Returns true if this BigInteger is probably prime, false if it's definitely composite:::if->return->w->this->abs->if->w->equals->return->if->w->testBit->w->equals->return->return->w->primeToCertainty
BigInteger#compareTo(BigInteger):::Compares this BigInteger with the specified BigInteger:::if->switch->return->compareMagnitude->return->val->compareMagnitude->return->return
BigInteger#compareMagnitude(BigInteger):::Compares the magnitude array of this BigInteger with the specified BigInteger's:::m1->len1->m2->len2->if->return->if->return->for->i->return
BigInteger#compareMagnitude(long):::Version of compareMagnitude that compares magnitude with long value:::m1->len->if->return->if->highWord->if->if->return->if->return->a->b->if->return->return->else->if->return->a->b->if->return->if->return->return
BigInteger#equals(Object):::Compares this BigInteger with the specified Object for equality.:::if->return->if->return->xInt->if->return->m->len->xm->if->return->for->i->return
BigInteger#min(BigInteger):::Returns the minimum of this BigInteger and val.:::return->compareTo
BigInteger#max(BigInteger):::Returns the maximum of this BigInteger and val.:::return->compareTo
BigInteger#hashCode():::Returns the hash code for this BigInteger.:::hashCode->for->i->return
BigInteger#toString(int):::Returns the String representation of this BigInteger in the given radix:::if->return->if->if->return->smallToString->sb->new->StringBuilder->if->this->negate->toString->sb->insert->else->toString->return->sb->toString
BigInteger#smallToString(int):::This method is used to perform toString when arguments are small.:::if->return->maxNumDigitGroups->digitGroup->new->StringArr->tmp->this->abs->numGroups->while->d->q->new->MutableBigInteger->a->new->MutableBigInteger->b->new->MutableBigInteger->r->a->divide->q2->q->toBigInteger->r2->r->toBigInteger->Long->r2->longValue->toString->buf->new->StringBuilder->if->buf->append->buf->append->for->i->return->buf->toString
BigInteger#toString(BigInteger, StringBuilder, int, int):::Converts the specified BigInteger to a string and appends to sb:::if->s->u->smallToString->if->s->length->sb->length->for->i->s->length->sb->append->return->b->n->u->bitLength->Math->Math->log->round->v->getRadixConversionCache->results->u->divideAndRemainder->expectedDigits->toString->toString
BigInteger#getRadixConversionCache(int, int):::Returns the value radix^(2^exponent) from the cache:::cacheLine->if->return->oldLength->Arrays->copyOf->for->i->pc->if->pc->clone->return
BigInteger#toString():::Returns the decimal String representation of this BigInteger:::return->toString
BigInteger#toByteArray():::Returns a byte array containing the two's-complement representation of this BigInteger:::byteLen->bitLength->byteArray->new->byteArr->for->i->bytesCopied->nextInt->intIndex->return
BigInteger#intValue():::Converts this BigInteger to an int:::result->getInt->return
BigInteger#longValue():::Converts this BigInteger to a long:::result->for->i->return
BigInteger#floatValue():::Converts this BigInteger to a float:::if->return->exponent->bitLengthForInt->if->return->longValue->else->if->return->shift->twiceSignifFloor->nBits->nBits2->if->else->if->signifFloor->increment->abs->getLowestSetBit->signifRounded->bits->return->Float->intBitsToFloat
BigInteger#doubleValue():::Converts this BigInteger to a double:::if->return->exponent->bitLengthForInt->if->return->longValue->else->if->return->shift->twiceSignifFloor->nBits->nBits2->highBits->lowBits->if->else->if->signifFloor->increment->abs->getLowestSetBit->signifRounded->bits->return->Double->longBitsToDouble
BigInteger#stripLeadingZeroInts(int[]):::Returns a copy of the input array stripped of any leading zero bytes.:::vlen->keep->for->return->copyOfRange
BigInteger#trustedStripLeadingZeroInts(int[]):::Returns the input array stripped of any leading zero bytes:::vlen->keep->for->return->copyOfRange
BigInteger#stripLeadingZeroBytes(byte[], int, int):::Returns a copy of the input array stripped of any leading zero bytes.:::indexBound->keep->for->intLength->result->new->intArr->b->for->i->return
BigInteger#makePositive(byte[], int, int):::Takes an array a representing a negative 2's-complement number and returns the minimal (no leading zero bytes) unsigned whose value is -a.:::keep->k->indexBound->for->for->extraByte->intLength->result->new->intArr->b->for->i->for->i->return
BigInteger#makePositive(int[]):::Takes an array a representing a negative 2's-complement number and returns the minimal (no leading zero ints) unsigned whose value is -a.:::keep->j->for->for->extraInt->result->new->intArr->for->i->for->i->return
BigInteger#intLength():::Returns the length of the two's complement representation in ints, including space for at least one sign bit.:::return->bitLength
BigInteger#signBit()::: big integer sign bit:::return
BigInteger#signInt()::: big integer sign int:::return
BigInteger#getInt(int):::Returns the specified int of the little-endian two's complement representation (int 0 is the least significant):::if->return->if->return->signInt->magInt->return->firstNonzeroIntNum
BigInteger#firstNonzeroIntNum():::Returns the index of the int that contains the first nonzero int in the little-endian binary representation of the magnitude (int 0 is the least significant):::fn->if->i->mlen->for->return
BigInteger#readObject(java.io.ObjectInputStream):::Reconstitute the BigInteger instance from a stream (that is, deserialize it):::fields->s->readFields->sign->fields->get->magnitude->fields->get->if->message->if->fields->defaulted->throw->new->java.io.StreamCorruptedException->mag->stripLeadingZeroBytes->if->message->if->fields->defaulted->throw->new->java.io.StreamCorruptedException->UnsafeHolder->putSign->UnsafeHolder->putMag->if->try->checkRange->catch->throw->new->java.io.StreamCorruptedException->finally
BigInteger.UnsafeHolder#putSign(BigInteger, int)::: unsafe holder put sign:::unsafe->putInt
BigInteger.UnsafeHolder#putMag(BigInteger, int[])::: unsafe holder put mag:::unsafe->putObject
BigInteger#writeObject(ObjectOutputStream):::Save the BigInteger instance to a stream:::fields->s->putFields->fields->put->fields->magSerializedForm->put->fields->put->fields->put->fields->put->fields->put->s->writeFields
BigInteger#magSerializedForm():::Returns the mag array as an array of bytes.:::len->bitLen->bitLengthForInt->byteLen->result->new->byteArr->for->i->bytesCopied->intIndex->nextInt->return
BigInteger#longValueExact():::Converts this BigInteger to a long, checking for lost information:::if->bitLength->return->longValue->else->throw->new->ArithmeticException
BigInteger#intValueExact():::Converts this BigInteger to an int, checking for lost information:::if->bitLength->return->intValue->else->throw->new->ArithmeticException
BigInteger#shortValueExact():::Converts this BigInteger to a short, checking for lost information:::if->bitLength->value->intValue->if->return->shortValue->throw->new->ArithmeticException
BigInteger#byteValueExact():::Converts this BigInteger to a byte, checking for lost information:::if->bitLength->value->intValue->if->return->byteValue->throw->new->ArithmeticException
BitSieve#unitIndex(int):::Given a bit index return unit index containing it.:::return
BitSieve#bit(int):::Return a unit that masks the specified bit in its unit.:::return
BitSieve#get(int):::Get the value of the bit at the specified index.:::unitIndex->unitIndex->return->bit
BitSieve#set(int):::Set the bit at the specified index.:::unitIndex->unitIndex->bit
BitSieve#sieveSearch(int, int):::This method returns the index of the first clear bit in the search array that occurs at or after start:::if->return->index->do->if->get->return->while->return
BitSieve#sieveSingle(int, int, int):::Sieve a single set of multiples out of the sieve:::while->set
BitSieve#retrieve(BigInteger, int, java.util.Random):::Test probable primes in the sieve and return successful candidates.:::offset->for->i->return
MathContext#getPrecision():::Returns the precision setting:::return
MathContext#getRoundingMode()::: math context get rounding mode:::return
MathContext#equals(Object):::Compares this MathContext with the specified Object for equality.:::mc->if->return->return
MathContext#hashCode():::Returns the hash code for this MathContext.:::return->roundingMode->hashCode
MathContext#toString():::Returns the string representation of this MathContext:::return->roundingMode->toString
MathContext#readObject(java.io.ObjectInputStream):::Reconstitute the MathContext instance from a stream (that is, deserialize it).:::s->defaultReadObject->if->message->throw->new->java.io.StreamCorruptedException->if->message->throw->new->java.io.StreamCorruptedException
MutableBigInteger#ones(int):::Makes this number an n-int number all of whose bits are ones:::if->new->intArr->Arrays->fill
MutableBigInteger#getMagnitudeArray():::Internal helper method to return the magnitude array:::if->return->Arrays->copyOfRange->return
MutableBigInteger#toLong():::Convert this MutableBigInteger to a long value:::if->return->d->return
MutableBigInteger#toBigInteger(int):::Convert this MutableBigInteger to a BigInteger object.:::if->return->return->getMagnitudeArray->new->BigInteger
MutableBigInteger#toBigInteger():::Converts this number to a nonnegative BigInteger.:::normalize->return->isZero->toBigInteger
MutableBigInteger#toBigDecimal(int, int):::Convert this MutableBigInteger to BigDecimal object with the specified sign and scale.:::if->return->BigDecimal->zeroValueOf->mag->getMagnitudeArray->len->d->if->return->new->BigInteger->new->BigDecimal->v->return->BigDecimal->valueOf
MutableBigInteger#toCompactValue(int):::This is for internal use in converting from a MutableBigInteger object into a long value given a specified sign:::if->return->mag->getMagnitudeArray->len->d->if->return->v->return
MutableBigInteger#clear():::Clear out a MutableBigInteger for reuse.:::for->index->n
MutableBigInteger#reset():::Set a MutableBigInteger to zero, removing its offset.:::
MutableBigInteger#compare(MutableBigInteger):::Compare the magnitude of two MutableBigIntegers:::blen->if->return->if->return->bval->for->i->j->return
MutableBigInteger#compareShifted(MutableBigInteger, int):::Returns a value equal to what b.leftShift(32*ints); return compare(b); would return, but doesn't change the value of b.:::blen->alen->if->return->if->return->bval->for->i->j->return
MutableBigInteger#compareHalf(MutableBigInteger):::Compare this against half of a MutableBigInteger object (Needed for remainder tests):::blen->len->if->return->if->return->if->return->bval->bstart->carry->if->if->else->return->val->for->i->j->return
MutableBigInteger#getLowestSetBit():::Return the index of the lowest set bit in this MutableBigInteger:::if->return->j->b->for->if->return->return->Integer->numberOfTrailingZeros
MutableBigInteger#getInt(int):::Return the int in use in this MutableBigInteger at the specified index:::return
MutableBigInteger#getLong(int):::Return a long which is equal to the unsigned value of the int in use in this MutableBigInteger at the specified index:::return
MutableBigInteger#normalize():::Ensure that the MutableBigInteger is in normal form, specifically making sure that there are no leading zeros, and that if the magnitude is zero, then intLen is zero.:::if->return->index->if->return->indexBound->do->while->numZeros
MutableBigInteger#ensureCapacity(int):::If this MutableBigInteger cannot hold len words, increase the size of the value array to len words.:::if->new->intArr
MutableBigInteger#toIntArray():::Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.:::result->new->intArr->for->i->return
MutableBigInteger#setInt(int, int):::Sets the int at index+offset in this MutableBigInteger to val:::
MutableBigInteger#setValue(int[], int):::Sets this MutableBigInteger's value array to the specified array:::
MutableBigInteger#copyValue(MutableBigInteger):::Sets this MutableBigInteger's value array to a copy of the specified array:::len->if->new->intArr->System->arraycopy
MutableBigInteger#copyValue(int[]):::Sets this MutableBigInteger's value array to a copy of the specified array:::len->if->new->intArr->System->arraycopy
MutableBigInteger#isOne():::Returns true iff this MutableBigInteger has a value of one.:::return
MutableBigInteger#isZero():::Returns true iff this MutableBigInteger has a value of zero.:::return
MutableBigInteger#isEven():::Returns true iff this MutableBigInteger is even.:::return
MutableBigInteger#isOdd():::Returns true iff this MutableBigInteger is odd.:::return->isZero
MutableBigInteger#isNormal():::Returns true iff this MutableBigInteger is in normal form:::if->return->if->return->return
MutableBigInteger#toString():::Returns a String representation of this MutableBigInteger in radix 10.:::b->toBigInteger->return->b->toString
MutableBigInteger#safeRightShift(int):::Like #rightShift(int) but n can be greater than the length of the number.:::if->reset->else->rightShift
MutableBigInteger#rightShift(int):::Right shift this MutableBigInteger n bits:::if->return->nInts->nBits->if->return->bitsInHighWord->BigInteger->bitLengthForInt->if->this->primitiveLeftShift->else->primitiveRightShift
MutableBigInteger#safeLeftShift(int):::Like #leftShift(int) but n can be zero.:::if->leftShift
MutableBigInteger#leftShift(int):::Left shift this MutableBigInteger n bits.:::if->return->nInts->nBits->bitsInHighWord->BigInteger->bitLengthForInt->if->primitiveLeftShift->return->newLen->if->if->result->new->intArr->for->i->setValue->else->if->for->i->else->for->i->for->i->if->return->if->primitiveLeftShift->else->primitiveRightShift
MutableBigInteger#divadd(int[], int[], int):::A primitive used for division:::carry->for->j->return
MutableBigInteger#mulsub(int[], int[], int, int, int):::This method is used for division:::xLong->carry->for->j->return
MutableBigInteger#mulsubBorrow(int[], int[], int, int, int):::The method is the same as mulsun, except the fact that q array is not updated, the only result of the method is borrow flag.:::xLong->carry->for->j->return
MutableBigInteger#primitiveRightShift(int):::Right shift this MutableBigInteger n bits, where n is less than 32:::val->n2->for->i->c
MutableBigInteger#primitiveLeftShift(int):::Left shift this MutableBigInteger n bits, where n is less than 32:::val->n2->for->i->c->m
MutableBigInteger#getLower(int):::Returns a BigInteger equal to the n low ints of this number.:::if->isZero->return->else->if->return->toBigInteger->else->len->while->sign->return->Arrays->copyOfRange->new->BigInteger
MutableBigInteger#keepLower(int):::Discards all ints whose index is greater than n.:::if
MutableBigInteger#add(MutableBigInteger):::Adds the contents of two MutableBigInteger objects.The result is placed within this MutableBigInteger:::x->y->resultLen->result->new->intArr->rstart->sum->carry->while->while->if->return->while->if->if->temp->new->intArr->System->arraycopy->else
MutableBigInteger#addShifted(MutableBigInteger, int):::Adds the value of addend shifted n ints to the left:::if->addend->isZero->return->x->y->resultLen->result->new->intArr->rstart->sum->carry->while->bval->while->if->return->while->bval->if->if->temp->new->intArr->System->arraycopy->else
MutableBigInteger#addDisjoint(MutableBigInteger, int):::Like #addShifted(MutableBigInteger, int) but this.intLen must not be greater than n:::if->addend->isZero->return->x->y->resultLen->result->if->new->intArr->else->Arrays->fill->rstart->System->arraycopy->len->Math->min->System->arraycopy->for->i
MutableBigInteger#addLower(MutableBigInteger, int):::Adds the low n ints of addend.:::a->new->MutableBigInteger->if->a->normalize->add
MutableBigInteger#subtract(MutableBigInteger):::Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger.:::a->result->sign->a->compare->if->reset->return->if->tmp->resultLen->if->new->intArr->diff->x->y->rstart->while->while->normalize->return
MutableBigInteger#difference(MutableBigInteger):::Subtracts the smaller of a and b from the larger and places the result into the larger:::a->sign->a->compare->if->return->if->tmp->diff->x->y->while->while->a->normalize->return
MutableBigInteger#multiply(MutableBigInteger, MutableBigInteger):::Multiply the contents of two MutableBigInteger objects:::xLen->yLen->newLen->if->new->intArr->carry->for->j->k->for->i->z->normalize
MutableBigInteger#mul(int, MutableBigInteger):::Multiply the contents of this MutableBigInteger by the word y:::if->z->copyValue->return->if->z->clear->return->ylong->zval->new->intArr->carry->for->i->if->else
MutableBigInteger#divideOneWord(int, MutableBigInteger):::This method is used for division of an n word dividend by a one word divisor:::divisorLong->if->dividendValue->q->r->return->if->new->intArr->shift->Integer->numberOfLeadingZeros->rem->remLong->if->else->xlen->while->dividendEstimate->q->if->else->tmp->divWord->quotient->normalize->if->return->else->return
MutableBigInteger#divide(MutableBigInteger, MutableBigInteger):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned.:::return->divide
MutableBigInteger#divide(MutableBigInteger, MutableBigInteger, boolean)::: mutable big integer divide:::if->return->divideKnuth->else->return->divideAndRemainderBurnikelZiegler
MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger)::: mutable big integer divide knuth:::return->divideKnuth
MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned:::if->throw->new->ArithmeticException->if->return->new->MutableBigInteger->cmp->compare->if->return->new->MutableBigInteger->if->return->new->MutableBigInteger->quotient->clear->if->r->divideOneWord->if->if->return->new->MutableBigInteger->return->new->MutableBigInteger->else->return->if->trailingZeroBits->Math->getLowestSetBit->b->getLowestSetBit->min->if->a->new->MutableBigInteger->new->MutableBigInteger->a->rightShift->b->rightShift->r->a->divideKnuth->r->leftShift->return->return->divideMagnitude
MutableBigInteger#divideAndRemainderBurnikelZiegler(MutableBigInteger, MutableBigInteger):::Computes this/b and this%b using the  Burnikel-Ziegler algorithm:::r->s->if->return->else->m->Integer->numberOfLeadingZeros->j->n->n32->sigma->Math->b->bitLength->max->bShifted->new->MutableBigInteger->bShifted->safeLeftShift->aShifted->new->MutableBigInteger->aShifted->safeLeftShift->t->aShifted->bitLength->if->a1->aShifted->getBlock->z->aShifted->getBlock->z->addDisjoint->qi->new->MutableBigInteger->ri->for->i->z->divide2n1n->quotient->add->ri->rightShift->return
MutableBigInteger#divide2n1n(MutableBigInteger, MutableBigInteger):::This method implements algorithm 1 from pg:::n->if->return->divideKnuth->aUpper->new->MutableBigInteger->aUpper->safeRightShift->keepLower->q1->new->MutableBigInteger->r1->aUpper->divide3n2n->addDisjoint->r2->divide3n2n->quotient->addDisjoint->return
MutableBigInteger#divide3n2n(MutableBigInteger, MutableBigInteger):::This method implements algorithm 2 from pg:::n->a12->new->MutableBigInteger->a12->safeRightShift->b1->new->MutableBigInteger->b1->safeRightShift->b2->b->getLower->r->d->if->compareShifted->a12->divide2n1n->quotient->toBigInteger->multiply->new->MutableBigInteger->else->quotient->ones->a12->add->b1->leftShift->a12->subtract->new->MutableBigInteger->d->leftShift->d->new->MutableBigInteger->subtract->r->leftShift->r->addLower->while->r->compare->r->add->quotient->subtract->r->subtract->return
MutableBigInteger#getBlock(int, int, int):::Returns a MutableBigInteger containing blockLength ints from this number, starting at index*blockLength.<br/> Used by Burnikel-Ziegler division.:::blockStart->if->return->new->MutableBigInteger->blockEnd->if->else->if->return->new->MutableBigInteger->newVal->Arrays->copyOfRange->return->new->MutableBigInteger
MutableBigInteger#bitLength()::: mutable big integer bit length:::if->return->return->Integer->numberOfLeadingZeros
MutableBigInteger#divide(long, MutableBigInteger):::Internally used  to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned.:::if->throw->new->ArithmeticException->if->return->if->d->quotient->clear->if->return->divideOneWord->else->return->divideLongMagnitude->toLong
MutableBigInteger#copyAndShift(int[], int, int, int[], int, int)::: mutable big integer copy and shift:::n2->c->for->i
MutableBigInteger#divideMagnitude(MutableBigInteger, MutableBigInteger, boolean):::Divide this MutableBigInteger by the divisor:::shift->Integer->numberOfLeadingZeros->dlen->divisor->rem->if->new->intArr->copyAndShift->if->Integer->numberOfLeadingZeros->remarr->new->intArr->new->MutableBigInteger->copyAndShift->else->remarr->new->intArr->new->MutableBigInteger->rFrom->c->n2->for->i->else->Arrays->copyOfRange->new->intArr->new->MutableBigInteger->System->arraycopy->nlen->limit->if->new->intArr->q->if->dh->dhLong->dl->for->j->qhat->qrem->skipCorrection->nh->nh2->nm->if->else->nChunk->if->else->tmp->divWord->if->if->nl->rs->estProduct->if->unsignedLongCompare->if->if->unsignedLongCompare->borrow->if->mulsub->else->mulsubBorrow->if->if->divadd->if->if->rem->rightShift->rem->normalize->quotient->normalize->return
MutableBigInteger#divideLongMagnitude(long, MutableBigInteger):::Divide this MutableBigInteger by the divisor represented by positive long value:::rem->new->intArr->new->MutableBigInteger->System->arraycopy->nlen->limit->if->new->intArr->q->shift->Long->numberOfLeadingZeros->if->rem->leftShift->if->dh->dhLong->dl->for->j->if->rem->rightShift->quotient->normalize->rem->normalize->return
MutableBigInteger#divaddLong(int, int, int[], int):::A primitive used for division by long:::carry->sum->return
MutableBigInteger#mulsubLong(int[], int, int, int, int):::This method is used for division by long:::xLong->product->difference->carry->return
MutableBigInteger#unsignedLongCompare(long, long):::Compare two longs as if they were unsigned:::return
MutableBigInteger#divWord(long, int):::This method divides a long quantity by an int to estimate qhat for two multi precision numbers:::dLong->r->q->if->return->while->while->return
MutableBigInteger#sqrt():::Calculate the integer square root floor(sqrt(this)) where sqrt(.) denotes the mathematical square root:::if->this->isZero->return->new->MutableBigInteger->else->if->return->if->bitLength->v->new->BigInteger->longValueExact->xk->Math->Math->sqrt->floor->do->xk1->if->return->new->intArr->new->MutableBigInteger->while->else->bitLength->this->bitLength->if->this->bitLength->throw->new->ArithmeticException->shift->if->xk->new->MutableBigInteger->xk->rightShift->xk->normalize->d->new->BigInteger->doubleValue->bi->BigInteger->Math->Math->sqrt->ceil->valueOf->new->MutableBigInteger->xk->leftShift->xk1->new->MutableBigInteger->do->this->divide->xk1->add->xk1->rightShift->if->xk1->compare->return->xk->copyValue->xk1->reset->while
MutableBigInteger#hybridGCD(MutableBigInteger):::Calculate GCD of this and b:::a->q->new->MutableBigInteger->while->if->Math->abs->return->a->binaryGCD->r->a->divide->return
MutableBigInteger#binaryGCD(MutableBigInteger):::Calculate GCD of this and v:::u->r->new->MutableBigInteger->s1->u->getLowestSetBit->s2->v->getLowestSetBit->k->if->u->rightShift->v->rightShift->uOdd->t->tsign->lb->while->t->getLowestSetBit->t->rightShift->if->else->if->x->y->binaryGcd->if->r->leftShift->return->if->u->difference->break->if->u->leftShift->return
MutableBigInteger#binaryGcd(int, int):::Calculate GCD of a and b interpreted as unsigned integers.:::if->return->if->return->aZeros->Integer->numberOfTrailingZeros->bZeros->Integer->numberOfTrailingZeros->t->while->if->Integer->numberOfTrailingZeros->else->Integer->numberOfTrailingZeros->return
MutableBigInteger#mutableModInverse(MutableBigInteger):::Returns the modInverse of this mod p:::if->p->isOdd->return->modInverse->if->isEven->throw->new->ArithmeticException->powersOf2->p->getLowestSetBit->oddMod->new->MutableBigInteger->oddMod->rightShift->if->oddMod->isOne->return->modInverseMP2->oddPart->modInverse->evenPart->modInverseMP2->y1->modInverseBP2->y2->oddMod->modInverseMP2->temp1->new->MutableBigInteger->temp2->new->MutableBigInteger->result->new->MutableBigInteger->oddPart->leftShift->oddPart->multiply->evenPart->multiply->temp1->multiply->result->add->return->result->divide
MutableBigInteger#modInverseMP2(int)::: mutable big integer mod inverse p2:::if->isEven->throw->new->ArithmeticException->if->return->euclidModInverse->t->inverseMod32->if->return->new->MutableBigInteger->pLong->if->tLong->result->new->intArr->new->MutableBigInteger->result->normalize->return
MutableBigInteger#inverseMod32(int):::Returns the multiplicative inverse of val mod 2^32:::t->return
MutableBigInteger#inverseMod64(long):::Returns the multiplicative inverse of val mod 2^64:::t->return
MutableBigInteger#modInverseBP2(MutableBigInteger, int):::Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.:::return->new->MutableBigInteger->new->MutableBigInteger->fixup
MutableBigInteger#modInverse(MutableBigInteger):::Calculate the multiplicative inverse of this modulo mod, where the mod argument is odd:::p->new->MutableBigInteger->f->new->MutableBigInteger->g->new->MutableBigInteger->c->new->SignedMutableBigInteger->d->new->SignedMutableBigInteger->temp->sTemp->k->if->f->isEven->trailingZeros->f->getLowestSetBit->f->rightShift->d->leftShift->while->f->isOne->if->f->isZero->throw->new->ArithmeticException->if->f->compare->if->f->subtract->c->signedSubtract->else->f->add->c->signedAdd->trailingZeros->f->getLowestSetBit->f->rightShift->d->leftShift->if->c->compare->remainder->c->new->MutableBigInteger->divide->c->copyValue->if->c->signedAdd->return->fixup
MutableBigInteger#fixup(MutableBigInteger, MutableBigInteger, int):::The Fixup Algorithm Calculates X such that X = C * 2^(-k) (mod P) Assumes C<P and P is odd.:::temp->new->MutableBigInteger->r->inverseMod32->for->i->numWords->numBits->if->v->p->mul->c->add->c->rightShift->if->c->compare->c->new->MutableBigInteger->divide->return
MutableBigInteger#euclidModInverse(int):::Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of 2:::b->new->MutableBigInteger->b->leftShift->mod->new->MutableBigInteger->a->new->MutableBigInteger->q->new->MutableBigInteger->r->b->divide->swapper->t1->new->MutableBigInteger->t0->new->MutableBigInteger->temp->new->MutableBigInteger->while->b->isOne->a->divide->if->throw->new->ArithmeticException->if->t1->mul->else->q->multiply->t0->add->if->a->isOne->return->b->divide->if->throw->new->ArithmeticException->if->t0->mul->else->q->multiply->t1->add->mod->subtract->return
SignedMutableBigInteger#signedAdd(SignedMutableBigInteger):::Signed addition built upon unsigned add and subtract.:::if->add->else->subtract
SignedMutableBigInteger#signedAdd(MutableBigInteger):::Signed addition built upon unsigned add and subtract.:::if->add->else->subtract
SignedMutableBigInteger#signedSubtract(SignedMutableBigInteger):::Signed subtraction built upon unsigned add and subtract.:::if->subtract->else->add
SignedMutableBigInteger#signedSubtract(MutableBigInteger):::Signed subtraction built upon unsigned add and subtract.:::if->subtract->else->add->if
SignedMutableBigInteger#toString():::Print out the first intLen ints of this MutableBigInteger's value array starting at offset.:::return->this->toBigInteger->toString

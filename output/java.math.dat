BigDecimal#valueOf(long, int):::Translates a long unscaled value and an int scale into a BigDecimal.:::this.zeroValueOf->this.valueOf
BigDecimal#valueOf(long):::Translates a long value into a BigDecimal with a scale of zero.:::
BigDecimal#valueOf(double):::Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double#toString(double) method.:::Double.toString
BigDecimal#add(BigDecimal):::Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).:::this.add->this.add->this.add->this.add
BigDecimal#add(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings:::this.add->lhs.signum->augend.signum->lhs.scale->augend.scale->Math.max->this.zeroValueOf->this.doRound->this.doRound->result.scale->result.scale->result.precision->result.scale->result.scale->result.setScale->result.setScale->this.stripZerosToMatchScale->this.preAlign->this.matchScale->augend.inflated->lhs.inflated().add->this.doRound
BigDecimal#subtract(BigDecimal):::Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).:::subtrahend.intVal.negate->this.add->this.add->subtrahend.intVal.negate->this.add->this.add
BigDecimal#subtract(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings:::this.subtract->subtrahend.negate->this.add
BigDecimal#multiply(BigDecimal):::Returns a BigDecimal whose value is (this &times; multiplicand), and whose scale is (this.scale() + multiplicand.scale()).:::this.checkScale->this.multiply->this.multiply->this.multiply->this.multiply
BigDecimal#multiply(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this &times; multiplicand), with rounding according to the context settings.:::this.multiply->this.checkScale->this.multiplyAndRound->this.multiplyAndRound->this.multiplyAndRound->this.multiplyAndRound
BigDecimal#divide(BigDecimal, int, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified:::this.divide->this.divide->this.divide->this.divide
BigDecimal#divide(BigDecimal, int, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified:::this.divide
BigDecimal#divide(BigDecimal, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale():::this.divide
BigDecimal#divide(BigDecimal, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale():::this.divide
BigDecimal#divide(BigDecimal):::Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.:::divisor.signum->this.signum->this.saturateLong->this.signum->this.precision->Math.min->this.divide->quotient.scale->quotient.setScale->this.zeroValueOf
BigDecimal#divide(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.:::this.divide->divisor.signum->dividend.signum->dividend.signum->this.saturateLong->this.zeroValueOf->dividend.precision->divisor.precision->this.divide->this.divide->this.divide->this.divide
BigDecimal#divideToIntegralValue(BigDecimal):::Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down:::this.saturateLong->this.compareMagnitude->this.zeroValueOf->this.signum->divisor.signum->this.setScale->this.precision->divisor.scale->Math.abs->Math.min->this.divide->quotient.setScale->this.stripZerosToMatchScale->quotient.setScale
BigDecimal#divideToIntegralValue(BigDecimal, MathContext):::Returns a BigDecimal whose value is the integer part of (this / divisor):::this.compareMagnitude->this.divideToIntegralValue->this.saturateLong->this.divide->result.scale->result.scale->result.setScale->result.multiply->this.subtract(product).compareMagnitude->result.scale->result.precision->this.stripZerosToMatchScale->result.scale->Math.min->result.setScale
BigDecimal#remainder(BigDecimal):::Returns a BigDecimal whose value is (this % divisor):::this.divideAndRemainder
BigDecimal#remainder(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings:::this.divideAndRemainder
BigDecimal#divideAndRemainder(BigDecimal):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands:::this.divideToIntegralValue->result[0].multiply->this.subtract
BigDecimal#divideAndRemainder(BigDecimal, MathContext):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings:::this.divideAndRemainder->lhs.divideToIntegralValue->result[0].multiply->lhs.subtract
BigDecimal#sqrt(MathContext):::Returns an approximation to the square root of this with rounding according to the context settings:::this.signum->this.scale->this.valueOf->this.scale->this.valueOf->this.stripTrailingZeros->stripped.scale->stripped.isPowerOfTen->this.valueOf->result.scale->result.add->stripped.scale->stripped.precision->stripped.scaleByPowerOfTen->ONE_TENTH.compareTo->working.compareTo->working.doubleValue->Math.sqrt->mc.getPrecision->stripped.precision->working.precision->Math.max->Math.max->working.divide->approx.add->ONE_HALF.multiply->mc.getRoundingMode->approx.scaleByPowerOfTen(-scaleAdjust / 2).round->approx.scaleByPowerOfTen(-scaleAdjust / 2).round->this.subtract(result.multiply(result)).compareTo->result.scale->result.stripTrailingZeros().add->this.squareRootResultAssertions
BigDecimal#pow(int):::Returns a BigDecimal whose value is (this^n), The power is computed exactly, to unlimited precision:::this.checkScale->this.inflated().pow
BigDecimal#pow(int, MathContext):::Returns a BigDecimal whose value is (this^n):::this.pow->Math.abs->this.longDigitLength->acc.multiply->acc.multiply->ONE.divide->this.doRound
BigDecimal#abs():::Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().:::this.signum->this.negate
BigDecimal#abs(MathContext):::Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.:::this.signum->this.plus->this.negate
BigDecimal#negate():::Returns a BigDecimal whose value is (-this), and whose scale is this.scale().:::this.valueOf->intVal.negate
BigDecimal#negate(MathContext):::Returns a BigDecimal whose value is (-this), with rounding according to the context settings.:::negate().plus
BigDecimal#plus():::Returns a BigDecimal whose value is (+this), and whose scale is this.scale():::
BigDecimal#plus(MathContext):::Returns a BigDecimal whose value is (+this), with rounding according to the context settings:::this.doRound
BigDecimal#signum():::Returns the signum function of this BigDecimal.:::intVal.signum->Long.signum
BigDecimal#scale():::Returns the scale of this BigDecimal:::
BigDecimal#precision():::Returns the precision of this BigDecimal:::this.bigDigitLength->this.longDigitLength
BigDecimal#unscaledValue():::Returns a BigInteger whose value is the unscaled value of this BigDecimal:::this.inflated
BigDecimal#round(MathContext):::Returns a BigDecimal rounded according to the MathContext settings:::this.plus
BigDecimal#setScale(int, RoundingMode):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value:::this.setScale
BigDecimal#setScale(int, int):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value:::this.signum->this.zeroValueOf->this.checkScale->this.bigTenToThe->this.divideAndRound->this.divideAndRound->this.checkScale->this.bigMultiplyPowerTen->this.checkScale->this.inflated->this.bigTenToThe->this.divideAndRound->this.divideAndRound->this.checkScale->this.longMultiplyPowerTen->this.valueOf->this.bigMultiplyPowerTen
BigDecimal#setScale(int):::Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's:::this.setScale
BigDecimal#movePointLeft(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left:::this.checkScale->num.setScale
BigDecimal#movePointRight(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right:::this.checkScale->num.setScale
BigDecimal#scaleByPowerOfTen(int):::Returns a BigDecimal whose numerical value is equal to (this * 10^n):::this.checkScale
BigDecimal#stripTrailingZeros():::Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation:::intVal.signum->this.createAndStripZerosToMatchScale->this.createAndStripZerosToMatchScale
BigDecimal#compareTo(BigDecimal):::Compares this BigDecimal with the specified BigDecimal:::this.signum->val.signum->this.compareMagnitude
BigDecimal#equals(Object):::Compares this BigDecimal with the specified Object for equality:::this.compactValFor->this.compactValFor->xDec.inflated->this.inflated().equals
BigDecimal#min(BigDecimal):::Returns the minimum of this BigDecimal and val.:::this.compareTo
BigDecimal#max(BigDecimal):::Returns the maximum of this BigDecimal and val.:::this.compareTo
BigDecimal#hashCode():::Returns the hash code for this BigDecimal:::intVal.hashCode
BigDecimal#toString():::Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed:::this.layoutChars
BigDecimal#toEngineeringString():::Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed:::this.layoutChars
BigDecimal#toPlainString():::Returns a string representation of this BigDecimal without an exponent field:::intVal.toString->Long.toString->this.signum->this.checkScaleNonZero->intVal.toString->str.length->buf.append->buf.append->buf.append->buf.toString->intVal.abs().toString->Math.abs->Long.toString->this.signum->this.getValueString
BigDecimal#toBigInteger():::Converts this BigDecimal to a BigInteger:::this.setScale(0, ROUND_DOWN).inflated
BigDecimal#toBigIntegerExact():::Converts this BigDecimal to a BigInteger, checking for lost information:::this.setScale(0, ROUND_UNNECESSARY).inflated
BigDecimal#longValue():::Converts this BigDecimal to a long:::this.signum->this.fractionOnly->toBigInteger().longValue
BigDecimal#longValueExact():::Converts this BigDecimal to a long, checking for lost information:::this.signum->this.fractionOnly->this.precision->this.setScale->num.precision->LongOverflow.check->num.inflated().longValue
BigDecimal#intValue():::Converts this BigDecimal to an int:::this.longValue
BigDecimal#intValueExact():::Converts this BigDecimal to an int, checking for lost information:::this.longValueExact
BigDecimal#shortValueExact():::Converts this BigDecimal to a short, checking for lost information:::this.longValueExact
BigDecimal#byteValueExact():::Converts this BigDecimal to a byte, checking for lost information:::this.longValueExact
BigDecimal#floatValue():::Converts this BigDecimal to a float:::Math.abs->this.toString->Float.parseFloat
BigDecimal#doubleValue():::Converts this BigDecimal to a double:::Math.abs->this.toString->Double.parseDouble
BigDecimal#ulp():::Returns the size of an ulp, a unit in the last place, of this BigDecimal:::this.scale->BigDecimal.valueOf
BigDecimal.StringBuilderHelper#putIntCompact(long):::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.:::
BigDecimal#longDigitLength(long):::Returns the length of the absolute value of a long, in decimal digits.:::Long.numberOfLeadingZeros
BigInteger#probablePrime(int, Random):::Returns a positive BigInteger that is probably prime, with the specified bitLength:::this.largePrime->this.smallPrime
BigInteger#nextProbablePrime():::Returns the first integer greater than this BigInteger that is probably prime:::this.equals->this.add->result.bitLength->result.testBit->result.add->result.bitLength->result.remainder(SMALL_PRIME_PRODUCT).longValue->result.add->result.bitLength->result.primeToCertainty->result.add->result.testBit->result.subtract->result.bitLength->this.getPrimeSearchLen->searchSieve.retrieve->BigInteger.valueOf->result.add
BigInteger#primeToCertainty(int, Random):::Returns true if this BigInteger is probably prime, false if it's definitely composite:::Math.min->this.bitLength->this.passesMillerRabin->this.passesMillerRabin->this.passesLucasLehmer
BigInteger#valueOf(long):::Returns a BigInteger whose value is equal to that of the specified long.:::
BigInteger#add(BigInteger):::Returns a BigInteger whose value is (this + val).:::this.add->this.compareMagnitude->this.subtract->this.subtract->this.trustedStripLeadingZeroInts
BigInteger#add(long):::Package private methods used by BigDecimal code to add a BigInteger with a long:::this.valueOf->Long.signum->Math.abs->this.add->this.compareMagnitude->Math.abs->this.subtract->Math.abs->this.subtract->this.trustedStripLeadingZeroInts
BigInteger#subtract(BigInteger):::Returns a BigInteger whose value is (this - val).:::val.negate->this.add->this.compareMagnitude->this.subtract->this.subtract->this.trustedStripLeadingZeroInts
BigInteger#multiply(BigInteger):::Returns a BigInteger whose value is (this * val).:::this.multiply
BigInteger#multiply(long):::Package private methods used by BigDecimal code to multiply a BigInteger with a long:::BigInteger.valueOf->this.multiply->java.util.Arrays.copyOfRange
BigInteger#divide(BigInteger):::Returns a BigInteger whose value is (this / val).:::this.divideBurnikelZiegler->this.divideKnuth
BigInteger#divideAndRemainder(BigInteger):::Returns an array of two BigIntegers containing (this / val) followed by (this % val).:::this.divideAndRemainderBurnikelZiegler->this.divideAndRemainderKnuth
BigInteger#remainder(BigInteger):::Returns a BigInteger whose value is (this % val).:::this.remainderBurnikelZiegler->this.remainderKnuth
BigInteger#pow(int):::Returns a BigInteger whose value is (this^exponent):::this.abs->partToSquare.getLowestSetBit->this.reportOverflow->partToSquare.bitLength->partToSquare.shiftRight->partToSquare.bitLength->ONE.shiftLeft->NEGATIVE_ONE.shiftLeft->this.bitLength->this.reportOverflow->answer.multiply->partToSquare.square->answer.shiftLeft->answer.negate->this.valueOf->valueOf(result * newSign).shiftLeft->this.valueOf
BigInteger#sqrt():::Returns the integer square root of this BigInteger:::new MutableBigInteger(this.mag).sqrt().toBigInteger
BigInteger#sqrtAndRemainder():::Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.:::this.sqrt->s.square->this.subtract->r.compareTo
BigInteger#gcd(BigInteger):::Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val):::val.abs->this.abs->a.hybridGCD->result.toBigInteger
BigInteger#bitLengthForInt(int):::Package private method to return bit length for an integer.:::Integer.numberOfLeadingZeros
BigInteger#abs():::Returns a BigInteger whose value is the absolute value of this BigInteger.:::this.negate
BigInteger#negate():::Returns a BigInteger whose value is (-this).:::
BigInteger#signum():::Returns the signum function of this BigInteger.:::
BigInteger#mod(BigInteger):::Returns a BigInteger whose value is (this mod m):::this.remainder->result.add
BigInteger#modPow(BigInteger, BigInteger):::Returns a BigInteger whose value is (this^exponent mod m):::m.equals->this.equals->m.equals->this.equals->this.equals->exponent.testBit->m.equals->exponent.negate->this.compareTo->this.mod->m.testBit->m.getLowestSetBit->m.shiftRight->ONE.shiftLeft->this.compareTo->this.mod->m1.equals->base2.oddModPow->base.modPow2->m2.modInverse->m1.modInverse->new MutableBigInteger(a1.multiply(m2)).multiply->new MutableBigInteger(a2.multiply(m1)).multiply->t1.add->t1.divide(new MutableBigInteger(m), q).toBigInteger->a1.multiply(m2).multiply(y1).add(a2.multiply(m1).multiply(y2)).mod->base.oddModPow->result.modInverse
BigInteger#mulAdd(int[], int[], int, int, int):::Multiply an array by one word k and add to result, return the carry:::this.implMulAddCheck->this.implMulAdd
BigInteger#addOne(int[], int, int, int):::Add one word to the number a mlen words into a:::
BigInteger#modInverse(BigInteger):::Returns a BigInteger whose value is (this^-1 mod m).:::m.equals->this.compareMagnitude->this.mod->modVal.equals->a.mutableModInverse->result.toBigInteger
BigInteger#shiftLeft(int):::Returns a BigInteger whose value is (this << n):::this.shiftRightImpl->this.shiftLeft
BigInteger#shiftRight(int):::Returns a BigInteger whose value is (this >> n):::this.shiftLeft->this.shiftRightImpl
BigInteger#and(BigInteger):::Returns a BigInteger whose value is (this & val):::this.intLength->val.intLength->Math.max->this.getInt->val.getInt->this.valueOf
BigInteger#or(BigInteger):::Returns a BigInteger whose value is (this | val):::this.intLength->val.intLength->Math.max->this.getInt->val.getInt->this.valueOf
BigInteger#xor(BigInteger):::Returns a BigInteger whose value is (this ^ val):::this.intLength->val.intLength->Math.max->this.getInt->val.getInt->this.valueOf
BigInteger#not():::Returns a BigInteger whose value is (~this):::this.intLength->this.getInt->this.valueOf
BigInteger#andNot(BigInteger):::Returns a BigInteger whose value is (this & ~val):::this.intLength->val.intLength->Math.max->this.getInt->val.getInt->this.valueOf
BigInteger#testBit(int):::Returns true if and only if the designated bit is set:::this.getInt
BigInteger#setBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set:::this.intLength->Math.max->this.getInt->this.valueOf
BigInteger#clearBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared:::this.intLength->Math.max->this.getInt->this.valueOf
BigInteger#flipBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped:::this.intLength->Math.max->this.getInt->this.valueOf
BigInteger#getLowestSetBit():::Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit):::this.getInt->Integer.numberOfTrailingZeros
BigInteger#bitLength():::Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit:::this.bitLengthForInt->Integer.bitCount
BigInteger#bitCount():::Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit:::Integer.bitCount->Integer.numberOfTrailingZeros
BigInteger#isProbablePrime(int):::Returns true if this BigInteger is probably prime, false if it's definitely composite:::this.abs->w.equals->w.testBit->w.equals->w.primeToCertainty
BigInteger#compareTo(BigInteger):::Compares this BigInteger with the specified BigInteger:::this.compareMagnitude->val.compareMagnitude
BigInteger#compareMagnitude(BigInteger):::Compares the magnitude array of this BigInteger with the specified BigInteger's:::
BigInteger#compareMagnitude(long):::Version of compareMagnitude that compares magnitude with long value:::
BigInteger#equals(Object):::Compares this BigInteger with the specified Object for equality.:::
BigInteger#min(BigInteger):::Returns the minimum of this BigInteger and val.:::this.compareTo
BigInteger#max(BigInteger):::Returns the maximum of this BigInteger and val.:::this.compareTo
BigInteger#hashCode():::Returns the hash code for this BigInteger.:::
BigInteger#toString(int):::Returns the String representation of this BigInteger in the given radix:::this.smallToString->this.toString->this.negate->this.toString->sb.insert->sb.toString
BigInteger#toString():::Returns the decimal String representation of this BigInteger:::this.toString
BigInteger#toByteArray():::Returns a byte array containing the two's-complement representation of this BigInteger:::this.bitLength->this.getInt
BigInteger#intValue():::Converts this BigInteger to an int:::this.getInt
BigInteger#longValue():::Converts this BigInteger to a long:::this.getInt
BigInteger#floatValue():::Converts this BigInteger to a float:::this.bitLengthForInt->this.longValue->abs().getLowestSetBit->Float.intBitsToFloat
BigInteger#doubleValue():::Converts this BigInteger to a double:::this.bitLengthForInt->this.longValue->abs().getLowestSetBit->Double.longBitsToDouble
BigInteger#longValueExact():::Converts this BigInteger to a long, checking for lost information:::this.bitLength->this.longValue
BigInteger#intValueExact():::Converts this BigInteger to an int, checking for lost information:::this.bitLength->this.intValue
BigInteger#shortValueExact():::Converts this BigInteger to a short, checking for lost information:::this.bitLength->this.intValue->this.shortValue
BigInteger#byteValueExact():::Converts this BigInteger to a byte, checking for lost information:::this.bitLength->this.intValue->this.byteValue
BitSieve#retrieve(BigInteger, int, java.util.Random):::Test probable primes in the sieve and return successful candidates.:::BigInteger.valueOf->initValue.add->candidate.primeToCertainty
MathContext#getPrecision():::Returns the precision setting:::
MathContext#equals(Object):::Compares this MathContext with the specified Object for equality.:::
MathContext#hashCode():::Returns the hash code for this MathContext.:::roundingMode.hashCode
MathContext#toString():::Returns the string representation of this MathContext:::roundingMode.toString
MutableBigInteger#toBigInteger(int):::Convert this MutableBigInteger to a BigInteger object.:::this.getMagnitudeArray
MutableBigInteger#toBigInteger():::Converts this number to a nonnegative BigInteger.:::this.normalize->this.toBigInteger
MutableBigInteger#toBigDecimal(int, int):::Convert this MutableBigInteger to BigDecimal object with the specified sign and scale.:::BigDecimal.zeroValueOf->this.getMagnitudeArray->BigDecimal.valueOf
MutableBigInteger#toCompactValue(int):::This is for internal use in converting from a MutableBigInteger object into a long value given a specified sign:::this.getMagnitudeArray
MutableBigInteger#clear():::Clear out a MutableBigInteger for reuse.:::
MutableBigInteger#reset():::Set a MutableBigInteger to zero, removing its offset.:::
MutableBigInteger#compare(MutableBigInteger):::Compare the magnitude of two MutableBigIntegers:::
MutableBigInteger#compareHalf(MutableBigInteger):::Compare this against half of a MutableBigInteger object (Needed for remainder tests):::
MutableBigInteger#normalize():::Ensure that the MutableBigInteger is in normal form, specifically making sure that there are no leading zeros, and that if the magnitude is zero, then intLen is zero.:::
MutableBigInteger#toIntArray():::Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.:::
MutableBigInteger#setInt(int, int):::Sets the int at index+offset in this MutableBigInteger to val:::
MutableBigInteger#setValue(int[], int):::Sets this MutableBigInteger's value array to the specified array:::
MutableBigInteger#copyValue(MutableBigInteger):::Sets this MutableBigInteger's value array to a copy of the specified array:::System.arraycopy
MutableBigInteger#copyValue(int[]):::Sets this MutableBigInteger's value array to a copy of the specified array:::System.arraycopy
MutableBigInteger#isOne():::Returns true iff this MutableBigInteger has a value of one.:::
MutableBigInteger#isZero():::Returns true iff this MutableBigInteger has a value of zero.:::
MutableBigInteger#isEven():::Returns true iff this MutableBigInteger is even.:::
MutableBigInteger#isOdd():::Returns true iff this MutableBigInteger is odd.:::this.isZero
MutableBigInteger#isNormal():::Returns true iff this MutableBigInteger is in normal form:::
MutableBigInteger#toString():::Returns a String representation of this MutableBigInteger in radix 10.:::this.toBigInteger->b.toString
MutableBigInteger#safeRightShift(int):::Like #rightShift(int) but n can be greater than the length of the number.:::this.rightShift->this.reset
MutableBigInteger#rightShift(int):::Right shift this MutableBigInteger n bits:::BigInteger.bitLengthForInt->this.primitiveRightShift->this.primitiveLeftShift
MutableBigInteger#safeLeftShift(int):::Like #leftShift(int) but n can be zero.:::this.leftShift
MutableBigInteger#leftShift(int):::Left shift this MutableBigInteger n bits.:::BigInteger.bitLengthForInt->this.primitiveLeftShift->this.setValue->this.primitiveRightShift->this.primitiveLeftShift
MutableBigInteger#add(MutableBigInteger):::Adds the contents of two MutableBigInteger objects.The result is placed within this MutableBigInteger:::System.arraycopy
MutableBigInteger#addShifted(MutableBigInteger, int):::Adds the value of addend shifted n ints to the left:::addend.isZero->System.arraycopy
MutableBigInteger#addDisjoint(MutableBigInteger, int):::Like #addShifted(MutableBigInteger, int) but this.intLen must not be greater than n:::addend.isZero->Arrays.fill->System.arraycopy->Math.min->System.arraycopy
MutableBigInteger#addLower(MutableBigInteger, int):::Adds the low n ints of addend.:::a.normalize->this.add
MutableBigInteger#subtract(MutableBigInteger):::Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger.:::a.compare->this.reset->this.normalize
MutableBigInteger#multiply(MutableBigInteger, MutableBigInteger):::Multiply the contents of two MutableBigInteger objects:::z.normalize
MutableBigInteger#mul(int, MutableBigInteger):::Multiply the contents of this MutableBigInteger by the word y:::z.copyValue->z.clear
MutableBigInteger#divideOneWord(int, MutableBigInteger):::This method is used for division of an n word dividend by a one word divisor:::Integer.numberOfLeadingZeros->this.divWord->quotient.normalize
MutableBigInteger#divide(MutableBigInteger, MutableBigInteger):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned.:::this.divide
MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned:::this.compare->quotient.clear->this.divideOneWord->this.getLowestSetBit->b.getLowestSetBit->Math.min->a.rightShift->b.rightShift->a.divideKnuth->r.leftShift->this.divideMagnitude
MutableBigInteger#divideAndRemainderBurnikelZiegler(MutableBigInteger, MutableBigInteger):::Computes this/b and this%b using the  Burnikel-Ziegler algorithm:::Integer.numberOfLeadingZeros->b.bitLength->Math.max->bShifted.safeLeftShift->aShifted.safeLeftShift->aShifted.bitLength->aShifted.getBlock->aShifted.getBlock->z.addDisjoint->z.divide2n1n->aShifted.getBlock->z.addDisjoint->quotient.addShifted->z.divide2n1n->quotient.add->ri.rightShift
MutableBigInteger#divide(long, MutableBigInteger):::Internally used  to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned.:::quotient.clear->divideLongMagnitude(v, quotient).toLong->this.divideOneWord
MutableBigInteger#divWord(long, int):::This method divides a long quantity by an int to estimate qhat for two multi precision numbers:::
MutableBigInteger#sqrt():::Calculate the integer square root floor(sqrt(this)) where sqrt(.) denotes the mathematical square root:::this.isZero->this.bitLength->this.bitLength->this.bitLength->xk.rightShift->xk.normalize->new BigInteger(xk.value, 1).doubleValue->BigInteger.valueOf->xk.leftShift->this.divide->xk1.add->xk1.rightShift->xk1.compare->xk.copyValue->xk1.reset->new BigInteger(this.value, 1).longValueExact->Math.sqrt->Math.floor
MutableBigInteger#hybridGCD(MutableBigInteger):::Calculate GCD of this and b:::Math.abs->a.binaryGCD->a.divide
MutableBigInteger#binaryGcd(int, int):::Calculate GCD of a and b interpreted as unsigned integers.:::Integer.numberOfTrailingZeros->Integer.numberOfTrailingZeros->Integer.numberOfTrailingZeros->Integer.numberOfTrailingZeros
MutableBigInteger#mutableModInverse(MutableBigInteger):::Returns the modInverse of this mod p:::p.isOdd->this.modInverse->this.isEven->p.getLowestSetBit->oddMod.rightShift->oddMod.isOne->this.modInverseMP2->this.modInverse->this.modInverseMP2->this.modInverseBP2->oddMod.modInverseMP2->oddPart.leftShift->oddPart.multiply->evenPart.multiply->temp1.multiply->result.add->result.divide
MutableBigInteger#inverseMod32(int):::Returns the multiplicative inverse of val mod 2^32:::
MutableBigInteger#inverseMod64(long):::Returns the multiplicative inverse of val mod 2^64:::
MutableBigInteger#modInverseBP2(MutableBigInteger, int):::Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.:::this.fixup
MutableBigInteger#fixup(MutableBigInteger, MutableBigInteger, int):::The Fixup Algorithm Calculates X such that X = C * 2^(-k) (mod P) Assumes C<P and P is odd.:::this.inverseMod32->p.mul->c.add->p.mul->c.add->c.rightShift->c.compare->c.divide
MutableBigInteger#euclidModInverse(int):::Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of 2:::b.leftShift->b.divide->a.divide->q.multiply->t1.mul->t0.add->a.isOne->b.divide->q.multiply->t0.mul->t1.add->b.isOne->mod.subtract
SignedMutableBigInteger#signedAdd(SignedMutableBigInteger):::Signed addition built upon unsigned add and subtract.:::this.subtract->this.add
SignedMutableBigInteger#signedAdd(MutableBigInteger):::Signed addition built upon unsigned add and subtract.:::this.subtract->this.add
SignedMutableBigInteger#signedSubtract(SignedMutableBigInteger):::Signed subtraction built upon unsigned add and subtract.:::this.add->this.subtract
SignedMutableBigInteger#signedSubtract(MutableBigInteger):::Signed subtraction built upon unsigned add and subtract.:::this.add->this.subtract
SignedMutableBigInteger#toString():::Print out the first intLen ints of this MutableBigInteger's value array starting at offset.:::this.toBigInteger(sign).toString

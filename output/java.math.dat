BigDecimal#valueOf(long, int):::Translates a long unscaled value and an int scale into a BigDecimal.
BigDecimal#valueOf(long):::Translates a long value into a BigDecimal with a scale of zero.
BigDecimal#valueOf(double):::Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double#toString(double) method.
BigDecimal#add(BigDecimal):::Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).
BigDecimal#add(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings
BigDecimal#subtract(BigDecimal):::Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).
BigDecimal#subtract(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings
BigDecimal#multiply(BigDecimal):::Returns a BigDecimal whose value is (this &times; multiplicand), and whose scale is (this.scale() + multiplicand.scale()).
BigDecimal#multiply(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this &times; multiplicand), with rounding according to the context settings.
BigDecimal#divide(BigDecimal, int, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
BigDecimal#divide(BigDecimal, int, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
BigDecimal#divide(BigDecimal, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
BigDecimal#divide(BigDecimal, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
BigDecimal#divide(BigDecimal):::Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.
BigDecimal#divide(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.
BigDecimal#divideToIntegralValue(BigDecimal):::Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down
BigDecimal#divideToIntegralValue(BigDecimal, MathContext):::Returns a BigDecimal whose value is the integer part of (this / divisor)
BigDecimal#remainder(BigDecimal):::Returns a BigDecimal whose value is (this % divisor)
BigDecimal#remainder(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings
BigDecimal#divideAndRemainder(BigDecimal):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands
BigDecimal#divideAndRemainder(BigDecimal, MathContext):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings
BigDecimal#sqrt(MathContext):::Returns an approximation to the square root of this with rounding according to the context settings
BigDecimal#pow(int):::Returns a BigDecimal whose value is (this^n), The power is computed exactly, to unlimited precision
BigDecimal#pow(int, MathContext):::Returns a BigDecimal whose value is (this^n)
BigDecimal#abs():::Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().
BigDecimal#abs(MathContext):::Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.
BigDecimal#negate():::Returns a BigDecimal whose value is (-this), and whose scale is this.scale().
BigDecimal#negate(MathContext):::Returns a BigDecimal whose value is (-this), with rounding according to the context settings.
BigDecimal#plus():::Returns a BigDecimal whose value is (+this), and whose scale is this.scale()
BigDecimal#plus(MathContext):::Returns a BigDecimal whose value is (+this), with rounding according to the context settings
BigDecimal#signum():::Returns the signum function of this BigDecimal.
BigDecimal#scale():::Returns the scale of this BigDecimal
BigDecimal#precision():::Returns the precision of this BigDecimal
BigDecimal#unscaledValue():::Returns a BigInteger whose value is the unscaled value of this BigDecimal
BigDecimal#round(MathContext):::Returns a BigDecimal rounded according to the MathContext settings
BigDecimal#setScale(int, RoundingMode):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
BigDecimal#setScale(int, int):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
BigDecimal#setScale(int):::Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's
BigDecimal#movePointLeft(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left
BigDecimal#movePointRight(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right
BigDecimal#scaleByPowerOfTen(int):::Returns a BigDecimal whose numerical value is equal to (this * 10^n)
BigDecimal#stripTrailingZeros():::Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation
BigDecimal#compareTo(BigDecimal):::Compares this BigDecimal with the specified BigDecimal
BigDecimal#equals(Object):::Compares this BigDecimal with the specified Object for equality
BigDecimal#min(BigDecimal):::Returns the minimum of this BigDecimal and val.
BigDecimal#max(BigDecimal):::Returns the maximum of this BigDecimal and val.
BigDecimal#hashCode():::Returns the hash code for this BigDecimal
BigDecimal#toString():::Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed
BigDecimal#toEngineeringString():::Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed
BigDecimal#toPlainString():::Returns a string representation of this BigDecimal without an exponent field
BigDecimal#toBigInteger():::Converts this BigDecimal to a BigInteger
BigDecimal#toBigIntegerExact():::Converts this BigDecimal to a BigInteger, checking for lost information
BigDecimal#longValue():::Converts this BigDecimal to a long
BigDecimal#longValueExact():::Converts this BigDecimal to a long, checking for lost information
BigDecimal#intValue():::Converts this BigDecimal to an int
BigDecimal#intValueExact():::Converts this BigDecimal to an int, checking for lost information
BigDecimal#shortValueExact():::Converts this BigDecimal to a short, checking for lost information
BigDecimal#byteValueExact():::Converts this BigDecimal to a byte, checking for lost information
BigDecimal#floatValue():::Converts this BigDecimal to a float
BigDecimal#doubleValue():::Converts this BigDecimal to a double
BigDecimal#ulp():::Returns the size of an ulp, a unit in the last place, of this BigDecimal
BigDecimal.StringBuilderHelper#putIntCompact(long):::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.
BigDecimal#longDigitLength(long):::Returns the length of the absolute value of a long, in decimal digits.
BigInteger#probablePrime(int, Random):::Returns a positive BigInteger that is probably prime, with the specified bitLength
BigInteger#nextProbablePrime():::Returns the first integer greater than this BigInteger that is probably prime
BigInteger#primeToCertainty(int, Random):::Returns true if this BigInteger is probably prime, false if it's definitely composite
BigInteger#valueOf(long):::Returns a BigInteger whose value is equal to that of the specified long.
BigInteger#add(BigInteger):::Returns a BigInteger whose value is (this + val).
BigInteger#add(long):::Package private methods used by BigDecimal code to add a BigInteger with a long
BigInteger#subtract(BigInteger):::Returns a BigInteger whose value is (this - val).
BigInteger#multiply(BigInteger):::Returns a BigInteger whose value is (this * val).
BigInteger#multiply(long):::Package private methods used by BigDecimal code to multiply a BigInteger with a long
BigInteger#divide(BigInteger):::Returns a BigInteger whose value is (this / val).
BigInteger#divideAndRemainder(BigInteger):::Returns an array of two BigIntegers containing (this / val) followed by (this % val).
BigInteger#remainder(BigInteger):::Returns a BigInteger whose value is (this % val).
BigInteger#pow(int):::Returns a BigInteger whose value is (this^exponent)
BigInteger#sqrt():::Returns the integer square root of this BigInteger
BigInteger#sqrtAndRemainder():::Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.
BigInteger#gcd(BigInteger):::Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val)
BigInteger#bitLengthForInt(int):::Package private method to return bit length for an integer.
BigInteger#abs():::Returns a BigInteger whose value is the absolute value of this BigInteger.
BigInteger#negate():::Returns a BigInteger whose value is (-this).
BigInteger#signum():::Returns the signum function of this BigInteger.
BigInteger#mod(BigInteger):::Returns a BigInteger whose value is (this mod m)
BigInteger#modPow(BigInteger, BigInteger):::Returns a BigInteger whose value is (this^exponent mod m)
BigInteger#mulAdd(int[], int[], int, int, int):::Multiply an array by one word k and add to result, return the carry
BigInteger#addOne(int[], int, int, int):::Add one word to the number a mlen words into a
BigInteger#modInverse(BigInteger):::Returns a BigInteger whose value is (this^-1 mod m).
BigInteger#shiftLeft(int):::Returns a BigInteger whose value is (this << n)
BigInteger#shiftRight(int):::Returns a BigInteger whose value is (this >> n)
BigInteger#and(BigInteger):::Returns a BigInteger whose value is (this & val)
BigInteger#or(BigInteger):::Returns a BigInteger whose value is (this | val)
BigInteger#xor(BigInteger):::Returns a BigInteger whose value is (this ^ val)
BigInteger#not():::Returns a BigInteger whose value is (~this)
BigInteger#andNot(BigInteger):::Returns a BigInteger whose value is (this & ~val)
BigInteger#testBit(int):::Returns true if and only if the designated bit is set
BigInteger#setBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set
BigInteger#clearBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared
BigInteger#flipBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped
BigInteger#getLowestSetBit():::Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit)
BigInteger#bitLength():::Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit
BigInteger#bitCount():::Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit
BigInteger#isProbablePrime(int):::Returns true if this BigInteger is probably prime, false if it's definitely composite
BigInteger#compareTo(BigInteger):::Compares this BigInteger with the specified BigInteger
BigInteger#compareMagnitude(BigInteger):::Compares the magnitude array of this BigInteger with the specified BigInteger's
BigInteger#compareMagnitude(long):::Version of compareMagnitude that compares magnitude with long value
BigInteger#equals(Object):::Compares this BigInteger with the specified Object for equality.
BigInteger#min(BigInteger):::Returns the minimum of this BigInteger and val.
BigInteger#max(BigInteger):::Returns the maximum of this BigInteger and val.
BigInteger#hashCode():::Returns the hash code for this BigInteger.
BigInteger#toString(int):::Returns the String representation of this BigInteger in the given radix
BigInteger#toString():::Returns the decimal String representation of this BigInteger
BigInteger#toByteArray():::Returns a byte array containing the two's-complement representation of this BigInteger
BigInteger#intValue():::Converts this BigInteger to an int
BigInteger#longValue():::Converts this BigInteger to a long
BigInteger#floatValue():::Converts this BigInteger to a float
BigInteger#doubleValue():::Converts this BigInteger to a double
BigInteger#longValueExact():::Converts this BigInteger to a long, checking for lost information
BigInteger#intValueExact():::Converts this BigInteger to an int, checking for lost information
BigInteger#shortValueExact():::Converts this BigInteger to a short, checking for lost information
BigInteger#byteValueExact():::Converts this BigInteger to a byte, checking for lost information
BitSieve#retrieve(BigInteger, int, java.util.Random):::Test probable primes in the sieve and return successful candidates.
MathContext#getPrecision():::Returns the precision setting
MathContext#equals(Object):::Compares this MathContext with the specified Object for equality.
MathContext#hashCode():::Returns the hash code for this MathContext.
MathContext#toString():::Returns the string representation of this MathContext
MutableBigInteger#toBigInteger(int):::Convert this MutableBigInteger to a BigInteger object.
MutableBigInteger#toBigInteger():::Converts this number to a nonnegative BigInteger.
MutableBigInteger#toBigDecimal(int, int):::Convert this MutableBigInteger to BigDecimal object with the specified sign and scale.
MutableBigInteger#toCompactValue(int):::This is for internal use in converting from a MutableBigInteger object into a long value given a specified sign
MutableBigInteger#clear():::Clear out a MutableBigInteger for reuse.
MutableBigInteger#reset():::Set a MutableBigInteger to zero, removing its offset.
MutableBigInteger#compare(MutableBigInteger):::Compare the magnitude of two MutableBigIntegers
MutableBigInteger#compareHalf(MutableBigInteger):::Compare this against half of a MutableBigInteger object (Needed for remainder tests)
MutableBigInteger#normalize():::Ensure that the MutableBigInteger is in normal form, specifically making sure that there are no leading zeros, and that if the magnitude is zero, then intLen is zero.
MutableBigInteger#toIntArray():::Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.
MutableBigInteger#setInt(int, int):::Sets the int at index+offset in this MutableBigInteger to val
MutableBigInteger#setValue(int[], int):::Sets this MutableBigInteger's value array to the specified array
MutableBigInteger#copyValue(MutableBigInteger):::Sets this MutableBigInteger's value array to a copy of the specified array
MutableBigInteger#copyValue(int[]):::Sets this MutableBigInteger's value array to a copy of the specified array
MutableBigInteger#isOne():::Returns true iff this MutableBigInteger has a value of one.
MutableBigInteger#isZero():::Returns true iff this MutableBigInteger has a value of zero.
MutableBigInteger#isEven():::Returns true iff this MutableBigInteger is even.
MutableBigInteger#isOdd():::Returns true iff this MutableBigInteger is odd.
MutableBigInteger#isNormal():::Returns true iff this MutableBigInteger is in normal form
MutableBigInteger#toString():::Returns a String representation of this MutableBigInteger in radix 10.
MutableBigInteger#safeRightShift(int):::Like #rightShift(int) but n can be greater than the length of the number.
MutableBigInteger#rightShift(int):::Right shift this MutableBigInteger n bits
MutableBigInteger#safeLeftShift(int):::Like #leftShift(int) but n can be zero.
MutableBigInteger#leftShift(int):::Left shift this MutableBigInteger n bits.
MutableBigInteger#add(MutableBigInteger):::Adds the contents of two MutableBigInteger objects.The result is placed within this MutableBigInteger
MutableBigInteger#addShifted(MutableBigInteger, int):::Adds the value of addend shifted n ints to the left
MutableBigInteger#addDisjoint(MutableBigInteger, int):::Like #addShifted(MutableBigInteger, int) but this.intLen must not be greater than n
MutableBigInteger#addLower(MutableBigInteger, int):::Adds the low n ints of addend.
MutableBigInteger#subtract(MutableBigInteger):::Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger.
MutableBigInteger#multiply(MutableBigInteger, MutableBigInteger):::Multiply the contents of two MutableBigInteger objects
MutableBigInteger#mul(int, MutableBigInteger):::Multiply the contents of this MutableBigInteger by the word y
MutableBigInteger#divideOneWord(int, MutableBigInteger):::This method is used for division of an n word dividend by a one word divisor
MutableBigInteger#divide(MutableBigInteger, MutableBigInteger):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned.
MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned
MutableBigInteger#divideAndRemainderBurnikelZiegler(MutableBigInteger, MutableBigInteger):::Computes this/b and this%b using the  Burnikel-Ziegler algorithm
MutableBigInteger#divide(long, MutableBigInteger):::Internally used  to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned.
MutableBigInteger#divWord(long, int):::This method divides a long quantity by an int to estimate qhat for two multi precision numbers
MutableBigInteger#sqrt():::Calculate the integer square root floor(sqrt(this)) where sqrt(.) denotes the mathematical square root
MutableBigInteger#hybridGCD(MutableBigInteger):::Calculate GCD of this and b
MutableBigInteger#binaryGcd(int, int):::Calculate GCD of a and b interpreted as unsigned integers.
MutableBigInteger#mutableModInverse(MutableBigInteger):::Returns the modInverse of this mod p
MutableBigInteger#inverseMod32(int):::Returns the multiplicative inverse of val mod 2^32
MutableBigInteger#inverseMod64(long):::Returns the multiplicative inverse of val mod 2^64
MutableBigInteger#modInverseBP2(MutableBigInteger, int):::Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.
MutableBigInteger#fixup(MutableBigInteger, MutableBigInteger, int):::The Fixup Algorithm Calculates X such that X = C * 2^(-k) (mod P) Assumes C<P and P is odd.
MutableBigInteger#euclidModInverse(int):::Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of 2
SignedMutableBigInteger#signedAdd(SignedMutableBigInteger):::Signed addition built upon unsigned add and subtract.
SignedMutableBigInteger#signedAdd(MutableBigInteger):::Signed addition built upon unsigned add and subtract.
SignedMutableBigInteger#signedSubtract(SignedMutableBigInteger):::Signed subtraction built upon unsigned add and subtract.
SignedMutableBigInteger#signedSubtract(MutableBigInteger):::Signed subtraction built upon unsigned add and subtract.
SignedMutableBigInteger#toString():::Print out the first intLen ints of this MutableBigInteger's value array starting at offset.

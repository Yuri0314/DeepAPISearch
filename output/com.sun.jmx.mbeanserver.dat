ClassLoaderRepositorySupport#add(ObjectName, ClassLoader):::Same behavior as add(Object o) in java.util.List:::l->Arrays->asList->new->ArrayList<LoaderEntry>->l->new->LoaderEntry->add->l->toArray->return
ClassLoaderRepositorySupport#remove(ObjectName, ClassLoader):::Same behavior as remove(Object o) in java.util.List:::size->for->i->return
ClassLoaderRepositorySupport#loadClass(String)::: class loader repository support load class:::return->loadClass
ClassLoaderRepositorySupport#loadClassWithout(ClassLoader, String)::: class loader repository support load class without:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->if->return->loadClass->startValidSearch->try->return->loadClass->catch->finally->stopValidSearch
ClassLoaderRepositorySupport#loadClassBefore(ClassLoader, String)::: class loader repository support load class before:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->if->return->loadClass->startValidSearch->try->return->loadClass->catch->finally->stopValidSearch
ClassLoaderRepositorySupport#loadClass(LoaderEntry[], String, ClassLoader, ClassLoader)::: class loader repository support load class:::ReflectUtil->checkPackageAccess->size->for->i->throw->new->ClassNotFoundException
ClassLoaderRepositorySupport#startValidSearch(ClassLoader, String)::: class loader repository support start valid search:::excluded->search->get->if->excluded->contains->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->ClassNotFoundException->if->new->ArrayList<ClassLoader>->search->put->excluded->add->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log
ClassLoaderRepositorySupport#stopValidSearch(ClassLoader, String)::: class loader repository support stop valid search:::excluded->search->get->if->excluded->remove->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log
ClassLoaderRepositorySupport#addClassLoader(ClassLoader)::: class loader repository support add class loader:::add
ClassLoaderRepositorySupport#removeClassLoader(ClassLoader)::: class loader repository support remove class loader:::remove
ClassLoaderRepositorySupport#addClassLoader(ObjectName, ClassLoader)::: class loader repository support add class loader:::loadersWithNames->put->if->add
ClassLoaderRepositorySupport#removeClassLoader(ObjectName)::: class loader repository support remove class loader:::loader->loadersWithNames->remove->if->remove
ClassLoaderRepositorySupport#getClassLoader(ObjectName)::: class loader repository support get class loader:::instance->loadersWithNames->get->if->sm->System->getSecurityManager->if->perm->instance->getClass->getName->new->MBeanPermission->sm->checkPermission->return
ConvertingMethod#from(Method)::: converting method from:::try->return->new->ConvertingMethod->catch->msg->m->getDeclaringClass->getName->m->getName->throw->new->IllegalArgumentException->finally
ConvertingMethod#getMethod()::: converting method get method:::return
ConvertingMethod#getDescriptor()::: converting method get descriptor:::return->Introspector->descriptorForElement
ConvertingMethod#getGenericReturnType()::: converting method get generic return type:::return->method->getGenericReturnType
ConvertingMethod#getGenericParameterTypes()::: converting method get generic parameter types:::return->method->getGenericParameterTypes
ConvertingMethod#getName()::: converting method get name:::return->method->getName
ConvertingMethod#getOpenReturnType()::: converting method get open return type:::return->returnMapping->getOpenType
ConvertingMethod#getOpenParameterTypes()::: converting method get open parameter types:::types->new->OpenType<?>Arr->for->i->return
ConvertingMethod#checkCallFromOpen()::: converting method check call from open:::try->foreach->paramConverter->checkReconstructible->catch->throw->new->IllegalArgumentException->finally
ConvertingMethod#checkCallToOpen()::: converting method check call to open:::try->returnMapping->checkReconstructible->catch->throw->new->IllegalArgumentException->finally
ConvertingMethod#getOpenSignature()::: converting method get open signature:::if->return->sig->new->StringArr->for->i->return
ConvertingMethod#toOpenReturnValue(MXBeanLookup, Object)::: converting method to open return value:::return->returnMapping->toOpenValue
ConvertingMethod#fromOpenReturnValue(MXBeanLookup, Object)::: converting method from open return value:::return->returnMapping->fromOpenValue
ConvertingMethod#toOpenParameters(MXBeanLookup, Object[])::: converting method to open parameters:::if->return->oparams->new->ObjectArr->for->i->return
ConvertingMethod#fromOpenParameters(Object[])::: converting method from open parameters:::if->return->jparams->new->ObjectArr->for->i->return
ConvertingMethod#toOpenParameter(MXBeanLookup, Object, int)::: converting method to open parameter:::return->toOpenValue
ConvertingMethod#fromOpenParameter(MXBeanLookup, Object, int)::: converting method from open parameter:::return->fromOpenValue
ConvertingMethod#invokeWithOpenReturn(MXBeanLookup, Object, Object[])::: converting method invoke with open return:::old->MXBeanLookup->getLookup->try->MXBeanLookup->setLookup->return->invokeWithOpenReturn->catch->finally->MXBeanLookup->setLookup
ConvertingMethod#invokeWithOpenReturn(Object, Object[])::: converting method invoke with open return:::javaParams->try->fromOpenParameters->catch->msg->methodName->throw->new->MBeanException->finally->javaReturn->MethodUtil->invoke->try->return->returnMapping->toOpenValue->catch->msg->methodName->throw->new->MBeanException->finally
ConvertingMethod#methodName()::: converting method method name:::return->method->getDeclaringClass->method->getName
DefaultMXBeanMappingFactory.NonNullMXBeanMapping#fromOpenValue(Object)::: non null bean mapping from open value:::if->return->else->return->fromNonNullOpenValue
DefaultMXBeanMappingFactory.NonNullMXBeanMapping#toOpenValue(Object)::: non null bean mapping to open value:::if->return->else->return->toNonNullOpenValue
DefaultMXBeanMappingFactory.NonNullMXBeanMapping#fromNonNullOpenValue(Object)::: non null bean mapping from non null open value:::
DefaultMXBeanMappingFactory.NonNullMXBeanMapping#toNonNullOpenValue(Object)::: non null bean mapping to non null open value:::
DefaultMXBeanMappingFactory.NonNullMXBeanMapping#isIdentity():::True if and only if this MXBeanMapping's toOpenValue and fromOpenValue methods are the identity function.:::return
DefaultMXBeanMappingFactory#isIdentity(MXBeanMapping)::: default bean mapping factory is identity:::return->isIdentity
DefaultMXBeanMappingFactory#getMapping(Type)::: default bean mapping factory get mapping:::wr->mappings->get->return->wr->get
DefaultMXBeanMappingFactory#putMapping(Type, MXBeanMapping)::: default bean mapping factory put mapping:::wr->new->WeakReference<MXBeanMapping>->mappings->put
DefaultMXBeanMappingFactory#putPermanentMapping(Type, MXBeanMapping)::: default bean mapping factory put permanent mapping:::putMapping->permanentMappings->add
DefaultMXBeanMappingFactory#mappingForType(Type, MXBeanMappingFactory):::Get the converter for the given Java type, creating it if necessary.:::if->inProgress->containsKey->throw->typeName->new->OpenDataException->mapping->getMapping->if->return->inProgress->put->try->makeMapping->catch->throw->typeName->openDataException->finally->inProgress->remove->putMapping->return
DefaultMXBeanMappingFactory#makeMapping(Type, MXBeanMappingFactory)::: default bean mapping factory make mapping:::if->componentType->getGenericComponentType->return->makeArrayOrCollectionMapping->else->if->objClass->if->objClass->isEnum->return->makeEnumMapping->else->if->objClass->isArray->componentType->objClass->getComponentType->return->makeArrayOrCollectionMapping->else->if->JMX->isMXBeanInterface->return->makeMXBeanRefMapping->else->return->makeCompositeMapping->else->if->return->makeParameterizedTypeMapping->else->throw->new->OpenDataException
DefaultMXBeanMappingFactory#makeEnumMapping(Class, Class)::: default bean mapping factory make enum mapping:::ReflectUtil->checkPackageAccess->return->Util->cast->new->EnumMapping<T>
DefaultMXBeanMappingFactory#makeArrayOrCollectionMapping(Type, Type, MXBeanMappingFactory)::: default bean mapping factory make array or collection mapping:::elementMapping->factory->mappingForType->elementOpenType->elementMapping->getOpenType->openType->ArrayType->getArrayType->elementOpenClass->elementMapping->getOpenClass->openArrayClass->openArrayClassName->if->elementOpenClass->isArray->elementOpenClass->getName->else->elementOpenClass->getName->try->Class->forName->catch->throw->openDataException->finally->if->return->new->CollectionMapping->else->if->isIdentity->return->new->IdentityMapping->else->return->new->ArrayMapping
DefaultMXBeanMappingFactory#makeTabularMapping(Type, boolean, Type, Type, MXBeanMappingFactory)::: default bean mapping factory make tabular mapping:::objTypeName->typeName->keyMapping->factory->mappingForType->valueMapping->factory->mappingForType->keyOpenType->keyMapping->getOpenType->valueOpenType->valueMapping->getOpenType->rowType->new->OpenType<?>Arr->new->CompositeType->tabularType->new->TabularType->return->new->TabularMapping
DefaultMXBeanMappingFactory#makeParameterizedTypeMapping(ParameterizedType, MXBeanMappingFactory)::: default bean mapping factory make parameterized type mapping:::rawType->objType->getRawType->if->c->if->actuals->objType->getActualTypeArguments->if->mustBeComparable->return->makeArrayOrCollectionMapping->else->sortedMap->if->actuals->objType->getActualTypeArguments->if->mustBeComparable->return->makeTabularMapping->throw->new->OpenDataException
DefaultMXBeanMappingFactory#makeMXBeanRefMapping(Type)::: default bean mapping factory make bean ref mapping:::return->new->MXBeanRefMapping
DefaultMXBeanMappingFactory#makeCompositeMapping(Class, MXBeanMappingFactory)::: default bean mapping factory make composite mapping:::gcInfoHack->c->getName->equals->c->getClassLoader->ReflectUtil->checkPackageAccess->methods->MBeanAnalyzer->Arrays->c->getMethods->asList->eliminateCovariantMethods->getterMap->newSortedMap->foreach->propertyName->propertyName->if->continue->if->propertyName->equals->continue->old->getterMap->decapitalize->put->if->msg->c->getName->old->getName->method->getName->throw->new->OpenDataException->nitems->getterMap->size->if->throw->c->getName->new->OpenDataException->getters->new->MethodArr->itemNames->new->StringArr->openTypes->new->OpenType<?>Arr->i->foreach->getterMap->entrySet->entry->getKey->getter->entry->getValue->retType->getter->getGenericReturnType->factory->mappingForType->getOpenType->compositeType->c->getName->c->getName->new->CompositeType->return->new->CompositeMapping
DefaultMXBeanMappingFactory.IdentityMapping#isIdentity()::: identity mapping is identity:::return
DefaultMXBeanMappingFactory.IdentityMapping#fromNonNullOpenValue(Object)::: identity mapping from non null open value:::return
DefaultMXBeanMappingFactory.IdentityMapping#toNonNullOpenValue(Object)::: identity mapping to non null open value:::return
DefaultMXBeanMappingFactory.EnumMapping#toNonNullOpenValue(Object)::: enum mapping to non null open value:::return->name
DefaultMXBeanMappingFactory.EnumMapping#fromNonNullOpenValue(Object)::: enum mapping from non null open value:::try->return->Enum->valueOf->catch->throw->invalidObjectException->finally
DefaultMXBeanMappingFactory.ArrayMapping#toNonNullOpenValue(Object)::: array mapping to non null open value:::valueArray->len->openArray->Array->getOpenClass->getComponentType->newInstance->for->i->return
DefaultMXBeanMappingFactory.ArrayMapping#fromNonNullOpenValue(Object)::: array mapping from non null open value:::openArray->javaType->getJavaType->valueArray->componentType->if->getGenericComponentType->else->if->isArray->getComponentType->else->throw->new->IllegalArgumentException->Array->newInstance->for->i->return
DefaultMXBeanMappingFactory.ArrayMapping#checkReconstructible()::: array mapping check reconstructible:::elementMapping->checkReconstructible
DefaultMXBeanMappingFactory.CollectionMapping#toNonNullOpenValue(Object)::: collection mapping to non null open value:::valueCollection->if->comparator->comparator->if->msg->throw->new->IllegalArgumentException->openDataException->openArray->Array->getOpenClass->getComponentType->valueCollection->size->newInstance->i->foreach->elementMapping->toOpenValue->return
DefaultMXBeanMappingFactory.CollectionMapping#fromNonNullOpenValue(Object)::: collection mapping from non null open value:::openArray->valueCollection->try->tmp->collectionClass->newInstance->cast->catch->throw->invalidObjectException->finally->foreach->value->elementMapping->fromOpenValue->if->valueCollection->add->msg->collectionClass->getName->throw->new->InvalidObjectException->return
DefaultMXBeanMappingFactory.CollectionMapping#checkReconstructible()::: collection mapping check reconstructible:::elementMapping->checkReconstructible
DefaultMXBeanMappingFactory.MXBeanRefMapping#toNonNullOpenValue(Object)::: bean ref mapping to non null open value:::lookup->lookupNotNull->name->lookup->mxbeanToObjectName->if->throw->new->OpenDataException->return
DefaultMXBeanMappingFactory.MXBeanRefMapping#fromNonNullOpenValue(Object)::: bean ref mapping from non null open value:::lookup->lookupNotNull->name->mxbean->lookup->getJavaType->objectNameToMXBean->if->msg->throw->new->InvalidObjectException->return
DefaultMXBeanMappingFactory.MXBeanRefMapping#lookupNotNull(Class)::: bean ref mapping lookup not null:::lookup->MXBeanLookup->getLookup->if->msg->exc->try->con->excClass->getConstructor->con->newInstance->catch->throw->new->RuntimeException->finally->throw->return
DefaultMXBeanMappingFactory.TabularMapping#toNonNullOpenValue(Object)::: tabular mapping to non null open value:::valueMap->cast->if->comparator->comparator->if->msg->throw->new->IllegalArgumentException->openDataException->tabularType->getOpenType->table->new->TabularDataSupport->rowType->tabularType->getRowType->foreach->valueMap->entrySet->openKey->keyMapping->entry->getKey->toOpenValue->openValue->valueMapping->entry->getValue->toOpenValue->row->new->ObjectArr->new->CompositeDataSupport->table->put->return
DefaultMXBeanMappingFactory.TabularMapping#fromNonNullOpenValue(Object)::: tabular mapping from non null open value:::table->rows->table->values->cast->valueMap->newSortedMap->newInsertionOrderMap->foreach->key->keyMapping->row->get->fromOpenValue->value->valueMapping->row->get->fromOpenValue->if->valueMap->put->msg->throw->new->InvalidObjectException->return
DefaultMXBeanMappingFactory.TabularMapping#checkReconstructible()::: tabular mapping check reconstructible:::keyMapping->checkReconstructible->valueMapping->checkReconstructible
DefaultMXBeanMappingFactory.CompositeMapping#toNonNullOpenValue(Object)::: composite mapping to non null open value:::ct->getOpenType->if->return->toCompositeData->if->return->values->new->ObjectArr->for->i->return->new->CompositeDataSupport
DefaultMXBeanMappingFactory.CompositeMapping#makeCompositeBuilder():::Determine how to convert back from the CompositeData into             the original Java type:::if->return->targetClass->getJavaType->builders->new->CompositeBuilderViaFrom->new->CompositeBuilderViaConstructor->new->CompositeBuilderCheckGetters->new->CompositeBuilderViaSetters->new->CompositeBuilderViaProxy->foundBuilder->whyNots->new->StringBuilder->possibleCause->foreach->for->i->if->msg->targetClass->getName->if->throw->invalidObjectException
DefaultMXBeanMappingFactory.CompositeMapping#checkReconstructible()::: composite mapping check reconstructible:::makeCompositeBuilder
DefaultMXBeanMappingFactory.CompositeMapping#fromNonNullOpenValue(Object)::: composite mapping from non null open value:::makeCompositeBuilder->return->compositeBuilder->fromCompositeData
DefaultMXBeanMappingFactory.CompositeBuilder#getTargetClass()::: composite builder get target class:::return
DefaultMXBeanMappingFactory.CompositeBuilder#getItemNames()::: composite builder get item names:::return
DefaultMXBeanMappingFactory.CompositeBuilder#applicable(Method[]):::If the subclass is appropriate for targetClass, then the             method returns null:::
DefaultMXBeanMappingFactory.CompositeBuilder#possibleCause():::If the subclass returns an explanation of why it is not applicable,             it can additionally indicate an exception with details:::return
DefaultMXBeanMappingFactory.CompositeBuilder#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder from composite data:::
DefaultMXBeanMappingFactory.CompositeBuilderViaFrom#applicable(Method[])::: composite builder via from applicable:::targetClass->getTargetClass->try->fromMethod->targetClass->getMethod->if->Modifier->fromMethod->getModifiers->isStatic->msg->throw->new->InvalidObjectException->if->fromMethod->getReturnType->getTargetClass->msg->fromMethod->getReturnType->typeName->typeName->throw->new->InvalidObjectException->return->catch->throw->return->finally
DefaultMXBeanMappingFactory.CompositeBuilderViaFrom#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder via from from composite data:::try->return->MethodUtil->new->ObjectArr->invoke->catch->msg->throw->invalidObjectException->finally
DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters#applicable(Method[])::: composite builder check getters applicable:::for->i->return
DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters#possibleCause()::: composite builder check getters possible cause:::return
DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder check getters from composite data:::throw->new->Error
DefaultMXBeanMappingFactory.CompositeBuilderViaSetters#applicable(Method[])::: composite builder via setters applicable:::try->c->getTargetClass->getConstructor->catch->return->finally->setters->new->MethodArr->for->i->return
DefaultMXBeanMappingFactory.CompositeBuilderViaSetters#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder via setters from composite data:::o->try->targetClass->getTargetClass->ReflectUtil->checkPackageAccess->tmp->targetClass->newInstance->for->i->catch->throw->invalidObjectException->finally->return
DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor#getConstPropValues(Constructor)::: composite builder via constructor get const prop values:::ctrProps->ctr->getAnnotation->if->return->ctrProps->value->else->vals->JavaBeansAccessor->getConstructorPropertiesValue->return
DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor#applicable(Method[])::: composite builder via constructor applicable:::targetClass->getTargetClass->constrs->targetClass->getConstructors->annotatedConstrList->newList->foreach->if->Modifier->constr->getModifiers->isPublic->getConstPropValues->annotatedConstrList->add->if->annotatedConstrList->isEmpty->return->newList->getterMap->newMap->itemNames->getItemNames->for->i->getterIndexSets->newSet->foreach->annotationName->constr->isAnnotationPresent->propertyNames->getConstPropValues->paramTypes->constr->getGenericParameterTypes->if->msg->throw->new->InvalidObjectException->paramIndexes->new->intArr->for->i->present->new->BitSet->for->i->if->getterIndexSets->add->msg->Arrays->toString->throw->new->InvalidObjectException->c->new->Constr->annotatedConstructors->add->foreach->seen->foreach->if->else->if->u->new->BitSet->u->or->u->or->if->getterIndexSets->contains->names->new->TreeSet<String>->for->i->u->nextSetBit->u->nextSetBit->msg->throw->new->InvalidObjectException->return
DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder via constructor from composite data:::ct->cd->getCompositeType->present->new->BitSet->for->i->max->foreach->if->subset->subset->if->msg->ct->keySet->throw->new->InvalidObjectException->params->cardinality->new->ObjectArr->for->i->try->ReflectUtil->getDeclaringClass->checkPackageAccess->return->newInstance->catch->msg->getTargetClass->getName->throw->invalidObjectException->finally
DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor#subset(BitSet, BitSet)::: composite builder via constructor subset:::subcopy->sub->clone->subcopy->andNot->return->subcopy->isEmpty
DefaultMXBeanMappingFactory.CompositeBuilderViaProxy#applicable(Method[])::: composite builder via proxy applicable:::targetClass->getTargetClass->if->targetClass->isInterface->return->methods->Arrays->targetClass->getMethods->asList->newSet->methods->Arrays->asList->removeAll->bad->foreach->mname->m->getName->mparams->m->getParameterTypes->try->om->getMethod->if->Modifier->om->getModifiers->isPublic->catch->finally->if->return->return
DefaultMXBeanMappingFactory.CompositeBuilderViaProxy#fromCompositeData(CompositeData, String[], MXBeanMapping[])::: composite builder via proxy from composite data:::targetClass->getTargetClass->return->Proxy->targetClass->getClassLoader->new->Class<?>Arr->new->CompositeDataInvocationHandler->newProxyInstance
DefaultMXBeanMappingFactory#invalidObjectException(String, Throwable)::: default bean mapping factory invalid object exception:::return->EnvHelp->new->InvalidObjectException->initCause
DefaultMXBeanMappingFactory#invalidObjectException(Throwable)::: default bean mapping factory invalid object exception:::return->cause->getMessage->invalidObjectException
DefaultMXBeanMappingFactory#openDataException(String, Throwable)::: default bean mapping factory open data exception:::return->EnvHelp->new->OpenDataException->initCause
DefaultMXBeanMappingFactory#openDataException(Throwable)::: default bean mapping factory open data exception:::return->cause->getMessage->openDataException
DefaultMXBeanMappingFactory#mustBeComparable(Class, Type)::: default bean mapping factory must be comparable:::if->isAssignableFrom->msg->collection->getName->getName->throw->new->OpenDataException
DefaultMXBeanMappingFactory#decapitalize(String):::Utility method to take a string and convert it to normal Java variable name capitalization:::if->name->length->return->offset1->Character->offsetByCodePoints->if->name->length->Character->name->codePointAt->isUpperCase->return->return->name->substring->toLowerCase->name->substring
DefaultMXBeanMappingFactory#capitalize(String):::Reverse operation for java.beans.Introspector.decapitalize:::if->name->length->return->offset1->name->offsetByCodePoints->return->name->substring->toUpperCase->name->substring
DefaultMXBeanMappingFactory#propertyName(Method)::: default bean mapping factory property name:::rest->name->m->getName->if->name->startsWith->name->substring->else->if->name->startsWith->m->getReturnType->name->substring->if->rest->length->m->getParameterTypes->m->getReturnType->name->equals->return->return
DescriptorCache#getInstance()::: descriptor cache get instance:::return
DescriptorCache#getInstance(JMX)::: descriptor cache get instance:::if->return->else->return
DescriptorCache#get(ImmutableDescriptor)::: descriptor cache get:::wr->map->get->got->wr->get->if->return->map->new->WeakReference<ImmutableDescriptor>->put->return
DescriptorCache#union(Descriptor...)::: descriptor cache union:::return->ImmutableDescriptor->union->get
DynamicMBean2#getResource():::The resource corresponding to this MBean:::
DynamicMBean2#getClassName():::The name of this MBean's class, as used by permission checks:::
DynamicMBean2#preRegister2(MBeanServer, ObjectName):::Additional registration hook:::
DynamicMBean2#registerFailed():::Additional registration hook:::
GetPropertyAction#run()::: get property action run:::return->System->getProperty
Introspector#isDynamic(Class):::Tell whether a MBean of the given class is a Dynamic MBean:::return->isAssignableFrom
Introspector#testCreation(Class):::Basic method for testing that a MBean of a given class can be instantiated by the MBean server. This method checks that: <ul><li>The given class is a concrete class.</li>     <li>The given class exposes at least one public constructor.</li> </ul> If these conditions are not met, throws a NotCompliantMBeanException.:::mods->c->getModifiers->if->Modifier->isAbstract->Modifier->isInterface->throw->new->NotCompliantMBeanException->consList->c->getConstructors->if->throw->new->NotCompliantMBeanException
Introspector#checkCompliance(Class)::: introspector check compliance:::if->isAssignableFrom->return->mbeanException->try->getStandardMBeanInterface->return->catch->finally->mxbeanException->try->getMXBeanInterface->return->catch->finally->msg->mbeanClass->getName->mbeanException->toString->mxbeanException->toString->throw->new->NotCompliantMBeanException
Introspector#makeDynamicMBean(T)::: introspector make dynamic bean:::if->return->mbeanClass->mbean->getClass->c->try->Util->getStandardMBeanInterface->cast->catch->finally->if->return->new->StandardMBeanSupport->try->Util->getMXBeanInterface->cast->catch->finally->if->return->new->MXBeanSupport->checkCompliance->throw->new->NotCompliantMBeanException
Introspector#testCompliance(Class):::Basic method for testing if a given class is a JMX compliant MBean.:::if->isDynamic->return->return->testCompliance
Introspector#testComplianceMXBeanInterface(Class):::Tests the given interface class for being a compliant MXBean interface:::MXBeanIntrospector->getInstance->getAnalyzer
Introspector#testComplianceMBeanInterface(Class):::Tests the given interface class for being a compliant MBean interface:::StandardMBeanIntrospector->getInstance->getAnalyzer
Introspector#testCompliance(Class, Class):::Basic method for testing if a given class is a JMX compliant Standard MBean:::if->getStandardMBeanInterface->ReflectUtil->checkPackageAccess->introspector->StandardMBeanIntrospector->getInstance->return->getClassMBeanInfo
Introspector#getClassMBeanInfo(MBeanIntrospector, Class, Class)::: introspector get class bean info:::perInterface->introspector->getPerInterface->return->introspector->getClassMBeanInfo
Introspector#getMBeanInterface(Class):::Get the MBean interface implemented by a JMX Standard MBean class:::if->isDynamic->return->try->return->getStandardMBeanInterface->catch->return->finally
Introspector#getStandardMBeanInterface(Class):::Get the MBean interface implemented by a JMX Standard MBean class.:::current->mbeanInterface->while->current->getName->findMBeanInterface->if->break->current->getSuperclass->if->return->else->msg->baseClass->getName->throw->new->NotCompliantMBeanException
Introspector#getMXBeanInterface(Class):::Get the MXBean interface implemented by a JMX MXBean class.:::try->return->MXBeanSupport->findMXBeanInterface->catch->throw->throwException->finally
Introspector#findMBeanInterface(Class, String):::Try to find the MBean interface corresponding to the class aName - i.e:::current->while->interfaces->current->getInterfaces->len->for->i->current->getSuperclass->return
Introspector#descriptorForElement(AnnotatedElement)::: introspector descriptor for element:::if->return->annots->elmt->getAnnotations->return->descriptorForAnnotations
Introspector#descriptorForAnnotations(Annotation[])::: introspector descriptor for annotations:::if->return->descriptorMap->new->HashMap<String,Object>->foreach->c->a->annotationType->elements->c->getMethods->packageAccess->foreach->key->element->getAnnotation->if->name->key->value->value->try->if->ReflectUtil->checkPackageAccess->MethodUtil->invoke->catch->throw->throw->new->UndeclaredThrowableException->finally->annotationToField->oldValue->descriptorMap->put->if->equals->msg->throw->new->IllegalArgumentException->if->descriptorMap->isEmpty->return->else->return->new->ImmutableDescriptor
Introspector#throwException(Class, Throwable):::Throws a NotCompliantMBeanException or a SecurityException.:::if->throw->if->throw->classname->notCompliant->getName->reason->cause->getMessage->res->new->NotCompliantMBeanException->res->initCause->throw
Introspector#annotationToField(Object)::: introspector annotation to field:::if->return->if->return->c->x->getClass->if->c->isArray->if->c->getComponentType->isPrimitive->return->xx->ss->new->StringArr->for->i->return->if->return->getName->if->return->name->if->Proxy->isProxyClass->c->getInterfaces->throw->c->getName->new->IllegalArgumentException
Introspector#equals(Object, Object)::: introspector equals:::return->Arrays->new->ObjectArr->new->ObjectArr->deepEquals
Introspector#implementsMBean(Class, String):::Returns the XXMBean interface or null if no such interface exists:::clMBeanName->if->c->getName->equals->return->interfaces->c->getInterfaces->for->i->return
Introspector#elementFromComplex(Object, String)::: introspector element from complex:::try->if->complex->getClass->isArray->element->equals->return->Array->getLength->else->if->return->get->else->clazz->complex->getClass->readMethod->if->JavaBeansAccessor->isAvailable->JavaBeansAccessor->getReadMethod->else->SimpleIntrospector->getReadMethod->if->ReflectUtil->readMethod->getDeclaringClass->checkPackageAccess->return->MethodUtil->new->Class<?>Arr->invoke->throw->new->AttributeNotFoundException->catch->throw->new->IllegalArgumentException->throw->throw->EnvHelp->e->getMessage->new->AttributeNotFoundException->initCause->finally
Introspector.SimpleIntrospector#getCachedMethods(Class):::Returns the list of methods cached for the given class, or null if not cached.:::ref->cache->get->if->cached->ref->get->if->return->return
Introspector.SimpleIntrospector#isReadMethod(Method):::Returns true if the given method is a "getter" method (where "getter" method is a public method of the form getXXX or "boolean isXXX"):::modifiers->method->getModifiers->if->Modifier->isStatic->return->name->method->getName->paramTypes->method->getParameterTypes->paramCount->if->name->length->if->name->startsWith->return->method->getReturnType->if->name->length->name->startsWith->return->method->getReturnType->return
Introspector.SimpleIntrospector#getReadMethods(Class):::Returns the list of "getter" methods for the given class:::cachedResult->getCachedMethods->if->return->methods->StandardMBeanIntrospector->getInstance->getMethods->MBeanAnalyzer->eliminateCovariantMethods->result->new->LinkedList<Method>->foreach->if->isReadMethod->if->m->getName->startsWith->result->add->else->result->add->cache->new->SoftReference<List<Method>>->put->return
Introspector.SimpleIntrospector#getReadMethod(Class, String):::Returns the "getter" to read the given property from the given class or null if no method is found.:::if->Character->property->charAt->isUpperCase->return->property->substring->toUpperCase->property->substring->getMethod->isMethod->foreach->getReadMethods->name->m->getName->if->name->equals->name->equals->return->return
JavaBeansAccessor#getJavaBeansAccess()::: java beans accessor get java beans access:::return->SharedSecrets->getJavaBeansAccess
JavaBeansAccessor#isAvailable()::: java beans accessor is available:::return->getJavaBeansAccess
JavaBeansAccessor#getReadMethod(Class, String):::Returns the getter method for a property of the given name:::jba->getJavaBeansAccess->return->jba->getReadMethod
JavaBeansAccessor#getConstructorPropertiesValue(Constructor):::Return the value attribute of the associated @ConstructorProperties annotation if that is present.:::jba->getJavaBeansAccess->return->jba->getConstructorPropertiesValue
JmxMBeanServer#interceptorsEnabled():::Tell whether MBeanServerInterceptors are enabled on this object.:::return
JmxMBeanServer#getMBeanInstantiator():::Return the MBeanInstantiator associated to this MBeanServer.:::if->return->else->throw->new->UnsupportedOperationException
JmxMBeanServer#createMBean(String, ObjectName):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, ObjectName):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, Object[], String[]):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, ObjectName, Object[], String[]):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#registerMBean(Object, ObjectName):::Registers a pre-existing object as an MBean with the MBean server:::return->mbsInterceptor->cloneObjectName->registerMBean
JmxMBeanServer#unregisterMBean(ObjectName):::De-registers an MBean from the MBean server:::mbsInterceptor->cloneObjectName->unregisterMBean
JmxMBeanServer#getObjectInstance(ObjectName):::Gets the <CODE>ObjectInstance</CODE> for a given MBean registered with the MBean server.:::return->mbsInterceptor->cloneObjectName->getObjectInstance
JmxMBeanServer#queryMBeans(ObjectName, QueryExp):::Gets MBeans controlled by the MBean server:::return->mbsInterceptor->cloneObjectName->queryMBeans
JmxMBeanServer#queryNames(ObjectName, QueryExp):::Gets the names of MBeans controlled by the MBean server:::return->mbsInterceptor->cloneObjectName->queryNames
JmxMBeanServer#isRegistered(ObjectName):::Checks whether an MBean, identified by its object name, is already registered with the MBean server.:::return->mbsInterceptor->isRegistered
JmxMBeanServer#getMBeanCount():::Returns the number of MBeans registered in the MBean server.:::return->mbsInterceptor->getMBeanCount
JmxMBeanServer#getAttribute(ObjectName, String):::Gets the value of a specific attribute of a named MBean:::return->mbsInterceptor->cloneObjectName->getAttribute
JmxMBeanServer#getAttributes(ObjectName, String[]):::Enables the values of several attributes of a named MBean:::return->mbsInterceptor->cloneObjectName->getAttributes
JmxMBeanServer#setAttribute(ObjectName, Attribute):::Sets the value of a specific attribute of a named MBean:::mbsInterceptor->cloneObjectName->cloneAttribute->setAttribute
JmxMBeanServer#setAttributes(ObjectName, AttributeList):::Sets the values of several attributes of a named MBean:::return->mbsInterceptor->cloneObjectName->cloneAttributeList->setAttributes
JmxMBeanServer#invoke(ObjectName, String, Object[], String[]):::Invokes an operation on an MBean.:::return->mbsInterceptor->cloneObjectName->invoke
JmxMBeanServer#getDefaultDomain():::Returns the default domain used for naming the MBean:::return->mbsInterceptor->getDefaultDomain
JmxMBeanServer#getDomains()::: jmx bean server get domains:::return->mbsInterceptor->getDomains
JmxMBeanServer#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object):::Adds a listener to a registered MBean.:::mbsInterceptor->cloneObjectName->addNotificationListener
JmxMBeanServer#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::Adds a listener to a registered MBean.:::mbsInterceptor->cloneObjectName->addNotificationListener
JmxMBeanServer#removeNotificationListener(ObjectName, NotificationListener)::: jmx bean server remove notification listener:::mbsInterceptor->cloneObjectName->removeNotificationListener
JmxMBeanServer#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: jmx bean server remove notification listener:::mbsInterceptor->cloneObjectName->removeNotificationListener
JmxMBeanServer#removeNotificationListener(ObjectName, ObjectName)::: jmx bean server remove notification listener:::mbsInterceptor->cloneObjectName->removeNotificationListener
JmxMBeanServer#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)::: jmx bean server remove notification listener:::mbsInterceptor->cloneObjectName->removeNotificationListener
JmxMBeanServer#getMBeanInfo(ObjectName):::This method discovers the attributes and operations that an MBean exposes for management.:::return->mbsInterceptor->cloneObjectName->getMBeanInfo
JmxMBeanServer#instantiate(String):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository Default Loader Repository):::checkMBeanPermission->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, ObjectName):::Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>:::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, Object[], String[]):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository Default Loader Repository):::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, ObjectName, Object[], String[]):::Instantiates an object:::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#isInstanceOf(ObjectName, String):::Returns true if the MBean specified is an instance of the specified class, false otherwise.:::return->mbsInterceptor->cloneObjectName->isInstanceOf
JmxMBeanServer#deserialize(ObjectName, byte[]):::De-serializes a byte array in the context of the class loader of an MBean.:::loader->getClassLoaderFor->return->instantiator->deserialize
JmxMBeanServer#deserialize(String, byte[]):::De-serializes a byte array in the context of a given MBean class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->clr->getClassLoaderRepository->theClass->try->if->throw->new->ClassNotFoundException->clr->loadClass->catch->throw->new->ReflectionException->finally->return->instantiator->theClass->getClassLoader->deserialize
JmxMBeanServer#deserialize(String, ObjectName, byte[]):::De-serializes a byte array in the context of a given MBean class loader:::cloneObjectName->try->getClassLoader->catch->throw->finally->myLoader->outerShell->getClass->getClassLoader->return->instantiator->deserialize
JmxMBeanServer#initialize():::Initializes this MBeanServer, registering the MBeanServerDelegate:::if->throw->new->IllegalStateException->try->AccessController->new->PrivilegedExceptionAction<Object>->doPrivileged->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->IllegalStateException->finally->myLoader->outerShell->getClass->getClassLoader->loaders->AccessController->new->PrivilegedAction<ModifiableClassLoaderRepository>->doPrivileged->if->loaders->addClassLoader->systemLoader->ClassLoader->getSystemClassLoader->if->loaders->addClassLoader
JmxMBeanServer#getMBeanServerInterceptor():::Return the MBeanServerInterceptor.:::if->return->else->throw->new->UnsupportedOperationException
JmxMBeanServer#setMBeanServerInterceptor(MBeanServer):::Set the MBeanServerInterceptor.:::if->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException
JmxMBeanServer#getClassLoaderFor(ObjectName):::Return the java.lang.ClassLoader that was used for loading the class of the named MBean.:::return->mbsInterceptor->cloneObjectName->getClassLoaderFor
JmxMBeanServer#getClassLoader(ObjectName):::Return the named java.lang.ClassLoader.:::return->mbsInterceptor->cloneObjectName->getClassLoader
JmxMBeanServer#getClassLoaderRepository():::Return the ClassLoaderRepository for that MBeanServer.:::checkMBeanPermission->return
JmxMBeanServer#getMBeanServerDelegate()::: jmx bean server get bean server delegate:::if->throw->new->UnsupportedOperationException->return
JmxMBeanServer#newMBeanServerDelegate():::This method creates a new MBeanServerDelegate for a new MBeanServer:::return->new->MBeanServerDelegateImpl
JmxMBeanServer#newMBeanServer(String, MBeanServer, MBeanServerDelegate, boolean):::This method creates a new MBeanServer implementation object:::fairLock->checkNewMBeanServerPermission->return->new->JmxMBeanServer
JmxMBeanServer#cloneObjectName(ObjectName):::Clone object name.:::if->return->ObjectName->getInstance->return
JmxMBeanServer#cloneAttribute(Attribute):::Clone attribute.:::if->if->attribute->getClass->equals->return->attribute->getName->attribute->getValue->new->Attribute->return
JmxMBeanServer#cloneAttributeList(AttributeList):::Clone attribute list.:::if->alist->list->asList->if->list->getClass->equals->newList->alist->size->new->AttributeList->foreach->newList->cloneAttribute->add->return->else->for->i->alist->size->return->return
JmxMBeanServer#checkMBeanPermission(String, String, ObjectName, String)::: jmx bean server check bean permission:::sm->System->getSecurityManager->if->perm->new->MBeanPermission->sm->checkPermission
JmxMBeanServer#checkNewMBeanServerPermission()::: jmx bean server check new bean server permission:::sm->System->getSecurityManager->if->perm->new->MBeanServerPermission->sm->checkPermission
JmxMBeanServerBuilder#newMBeanServerDelegate():::This method creates a new MBeanServerDelegate for a new MBeanServer:::return->JmxMBeanServer->newMBeanServerDelegate
JmxMBeanServerBuilder#newMBeanServer(String, MBeanServer, MBeanServerDelegate):::This method creates a new MBeanServer implementation object:::return->JmxMBeanServer->newMBeanServer
MBeanAnalyzer.MBeanVisitor#visitAttribute(String, M, M)::: bean visitor visit attribute:::
MBeanAnalyzer.MBeanVisitor#visitOperation(String, M)::: bean visitor visit operation:::
MBeanAnalyzer#visit(MBeanVisitor)::: bean analyzer visit:::foreach->attrMap->entrySet->name->entry->getKey->am->entry->getValue->visitor->visitAttribute->foreach->opMap->entrySet->foreach->entry->getValue->visitor->entry->getKey->visitOperation
MBeanAnalyzer#analyzer(Class, MBeanIntrospector)::: bean analyzer analyzer:::return->new->MBeanAnalyzer<M>
MBeanAnalyzer#initMaps(Class, MBeanIntrospector)::: bean analyzer init maps:::methods1->introspector->getMethods->methods->eliminateCovariantMethods->foreach->name->m->getName->nParams->m->getParameterTypes->cm->introspector->mFrom->attrName->if->name->startsWith->name->substring->else->if->name->startsWith->m->getReturnType->name->substring->if->attrName->length->m->getReturnType->am->attrMap->get->if->new->AttrMethods<M>->else->if->msg->throw->new->NotCompliantMBeanException->attrMap->put->else->if->name->startsWith->name->length->m->getReturnType->name->substring->am->attrMap->get->if->new->AttrMethods<M>->else->if->msg->throw->new->NotCompliantMBeanException->attrMap->put->else->cms->opMap->get->if->newList->cms->add->opMap->put->foreach->attrMap->entrySet->am->entry->getValue->if->introspector->consistent->msg->entry->getKey->throw->new->NotCompliantMBeanException
MBeanAnalyzer.MethodOrder#compare(Method, Method)::: method order compare:::cmp->a->getName->b->getName->compareTo->if->return->aparams->a->getParameterTypes->bparams->b->getParameterTypes->if->return->if->Arrays->equals->return->Arrays->toString->Arrays->toString->compareTo->aret->a->getReturnType->bret->b->getReturnType->if->return->if->aret->isAssignableFrom->return->return
MBeanAnalyzer#eliminateCovariantMethods(List)::: bean analyzer eliminate covariant methods:::len->startMethods->size->sorted->startMethods->new->MethodArr->toArray->Arrays->sort->overridden->newSet->for->i->methods->newList->methods->removeAll->return
MBeanInstantiator#testCreation(Class):::This methods tests if the MBean class makes it possible to instantiate an MBean of this class in the MBeanServer:::Introspector->testCreation
MBeanInstantiator#findClassWithDefaultLoaderRepository(String):::Loads the class with the specified name using this object's Default Loader Repository.:::theClass->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->try->if->throw->new->ClassNotFoundException->clr->loadClass->catch->throw->new->ReflectionException->finally->return
MBeanInstantiator#findClass(String, ClassLoader):::Gets the class for the specified class name using the MBean Interceptor's classloader:::return->loadClass
MBeanInstantiator#findClass(String, ObjectName):::Gets the class for the specified class name using the specified class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->loader->synchronized->getClassLoader->if->throw->new->InstanceNotFoundException->return->findClass
MBeanInstantiator#findSignatureClasses(String[], ClassLoader):::Return an array of Class corresponding to the given signature, using the specified class loader.:::if->return->aLoader->length->tab->new->Class<?>Arr->if->return->try->for->i->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->ReflectionException->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->finally->return
MBeanInstantiator#instantiate(Class):::Instantiates an object given its class, using its empty constructor:::checkMBeanPermission->moi->cons->findConstructor->if->throw->new->NoSuchMethodException->new->ReflectionException->try->ReflectUtil->checkPackageAccess->ensureClassAccess->cons->newInstance->catch->t->e->getTargetException->if->throw->new->RuntimeMBeanException->else->if->throw->new->RuntimeErrorException->else->throw->new->MBeanException->throw->new->NoSuchMethodException->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->finally->return
MBeanInstantiator#instantiate(Class, Object[], String[], ClassLoader):::Instantiates an object given its class, the parameters and signature of its constructor The call returns a reference to the newly created object.:::checkMBeanPermission->tab->moi->try->aLoader->theClass->getClassLoader->findSignatureClasses->catch->throw->new->ReflectionException->finally->cons->findConstructor->if->throw->new->NoSuchMethodException->new->ReflectionException->try->ReflectUtil->checkPackageAccess->ensureClassAccess->cons->newInstance->catch->throw->new->NoSuchMethodException->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->th->e->getTargetException->if->throw->new->RuntimeMBeanException->else->if->throw->new->RuntimeErrorException->else->throw->new->MBeanException->finally->return
MBeanInstantiator#deserialize(ClassLoader, byte[]):::De-serializes a byte array in the context of a classloader.:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->bIn->objIn->new->ByteArrayInputStream->try->new->ObjectInputStreamWithLoader->catch->throw->new->OperationsException->finally->return
MBeanInstantiator#deserialize(String, ObjectName, byte[], ClassLoader):::De-serializes a byte array in the context of a given MBean class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->theClass->if->findClass->else->try->instance->getClassLoader->if->throw->new->ClassNotFoundException->Class->forName->catch->throw->loaderName->toString->new->ReflectionException->finally->bIn->objIn->new->ByteArrayInputStream->try->theClass->getClassLoader->new->ObjectInputStreamWithLoader->catch->throw->new->OperationsException->finally->return
MBeanInstantiator#instantiate(String):::Instantiates an object using the list of all class loaders registered in the MBean Interceptor (using its javax.management.loading.ClassLoaderRepository):::return->instantiate
MBeanInstantiator#instantiate(String, ObjectName, ClassLoader):::Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>:::return->instantiate
MBeanInstantiator#instantiate(String, Object[], String[], ClassLoader):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository):::theClass->findClassWithDefaultLoaderRepository->return->instantiate
MBeanInstantiator#instantiate(String, ObjectName, Object[], String[], ClassLoader):::Instantiates an object:::theClass->if->findClass->else->findClass->return->instantiate
MBeanInstantiator#getClassLoaderRepository():::Return the Default Loader Repository used by this instantiator object.:::checkMBeanPermission->return
MBeanInstantiator#loadClass(String, ClassLoader):::Load a class with the specified loader, or with this object class loader if the specified loader is null.:::theClass->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->try->if->getClassLoader->if->Class->forName->else->Class->forName->catch->throw->new->ReflectionException->finally->return
MBeanInstantiator#loadSignatureClasses(String[], ClassLoader):::Load the classes specified in the signature with the given loader, or with this object class loader.:::if->return->aLoader->getClassLoader->length->tab->new->Class<?>Arr->if->return->try->for->i->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->ReflectionException->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->finally->return
MBeanInstantiator#findConstructor(Class, Class[])::: bean instantiator find constructor:::try->return->ConstructorUtil->getConstructor->catch->return->finally
MBeanInstantiator#checkMBeanPermission(Class, String, ObjectName, String)::: bean instantiator check bean permission:::if->clazz->getName->checkMBeanPermission
MBeanInstantiator#checkMBeanPermission(String, String, ObjectName, String)::: bean instantiator check bean permission:::sm->System->getSecurityManager->if->perm->new->MBeanPermission->sm->checkPermission
MBeanInstantiator#ensureClassAccess(Class)::: bean instantiator ensure class access:::mod->clazz->getModifiers->if->Modifier->isPublic->throw->new->IllegalAccessException
MBeanInstantiator#getClassLoader(ObjectName)::: bean instantiator get class loader:::if->return->permissions->new->Permissions->permissions->new->MBeanPermission->add->protectionDomain->new->ProtectionDomain->domains->ctx->new->AccessControlContext->loader->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged->return
MBeanIntrospector#getPerInterfaceMap():::The map from interface to PerInterface for this type of MBean.:::
MBeanIntrospector#getMBeanInfoMap():::The map from concrete implementation class and interface to MBeanInfo for this type of MBean.:::
MBeanIntrospector#getAnalyzer(Class):::Make an interface analyzer for this type of MBean.:::
MBeanIntrospector#isMXBean():::True if MBeans with this kind of introspector are MXBeans.:::
MBeanIntrospector#mFrom(Method):::Find the M corresponding to the given Method.:::
MBeanIntrospector#getName(M):::Get the name of this method.:::
MBeanIntrospector#getGenericReturnType(M):::Get the return type of this method:::
MBeanIntrospector#getGenericParameterTypes(M):::Get the parameter types of this method in the Java interface it came from.:::
MBeanIntrospector#getSignature(M):::Get the signature of this method as a caller would have to supply it in MBeanServer.invoke:::
MBeanIntrospector#checkMethod(M):::Check that this method is valid:::
MBeanIntrospector#invokeM2(M, Object, Object[], Object)::: bean introspector invoke m2:::
MBeanIntrospector#validParameter(M, Object, int, Object):::Test whether the given value is valid for the given parameter of this M.:::
MBeanIntrospector#getMBeanAttributeInfo(String, M, M):::Construct an MBeanAttributeInfo for the given attribute based on the given getter and setter:::
MBeanIntrospector#getMBeanOperationInfo(String, M):::Construct an MBeanOperationInfo for the given operation based on the M it was derived from.:::
MBeanIntrospector#getBasicMBeanDescriptor():::Get a Descriptor containing fields that MBeans of this kind will always have:::
MBeanIntrospector#getMBeanDescriptor(Class):::Get a Descriptor containing additional fields beyond the ones from getBasicMBeanDescriptor that MBeans whose concrete class is resourceClass will always have.:::
MBeanIntrospector#getMethods(Class):::Get the methods to be analyzed to build the MBean interface.:::ReflectUtil->checkPackageAccess->return->Arrays->mbeanType->getMethods->asList
MBeanIntrospector#getPerInterface(Class)::: bean introspector get per interface:::map->getPerInterfaceMap->synchronized->wr->map->get->pi->wr->get->if->try->analyzer->getAnalyzer->mbeanInfo->makeInterfaceMBeanInfo->new->PerInterface<M>->new->WeakReference<PerInterface<M>>->map->put->catch->throw->Introspector->throwException->finally->return
MBeanIntrospector#makeInterfaceMBeanInfo(Class, MBeanAnalyzer):::Make the MBeanInfo skeleton for the given MBean interface using the given analyzer:::maker->new->MBeanInfoMaker->analyzer->visit->description->return->maker->makeMBeanInfo
MBeanIntrospector#consistent(M, M):::True if the given getter and setter are consistent.:::return->getGenericReturnType->getGenericParameterTypes->equals
MBeanIntrospector#invokeM(M, Object, Object[], Object):::Invoke the given M on the given target with the given args and cookie:::try->return->invokeM2->catch->unwrapInvocationTargetException->throw->new->RuntimeException->throw->e->toString->new->ReflectionException->finally
MBeanIntrospector#invokeSetter(String, M, Object, Object, Object)::: bean introspector invoke setter:::try->new->ObjectArr->invokeM2->catch->throw->e->toString->new->ReflectionException->maybeInvalidParameter->throw->maybeInvalidParameter->unwrapInvocationTargetException->finally
MBeanIntrospector#maybeInvalidParameter(String, M, Object, Object)::: bean introspector maybe invalid parameter:::if->validParameter->msg->throw->new->InvalidAttributeValueException
MBeanIntrospector#isValidParameter(Method, Object, int)::: bean introspector is valid parameter:::c->m->getParameterTypes->try->a->Array->newInstance->Array->set->return->catch->return->finally
MBeanIntrospector#unwrapInvocationTargetException(InvocationTargetException)::: bean introspector unwrap invocation target exception:::t->e->getCause->if->throw->else->if->throw->else->throw->t->toString->new->MBeanException
MBeanIntrospector.MBeanInfoMaker#visitAttribute(String, M, M)::: bean info maker visit attribute:::mbai->getMBeanAttributeInfo->attrs->add
MBeanIntrospector.MBeanInfoMaker#visitOperation(String, M)::: bean info maker visit operation:::mboi->getMBeanOperationInfo->ops->add
MBeanIntrospector.MBeanInfoMaker#makeMBeanInfo(Class, String):::Make an MBeanInfo based on the attributes and operations  found in the interface.:::attrArray->attrs->new->MBeanAttributeInfoArr->toArray->opArray->ops->new->MBeanOperationInfoArr->toArray->interfaceClassName->mbeanInterface->getName->classNameDescriptor->new->ImmutableDescriptor->mbeanDescriptor->getBasicMBeanDescriptor->annotatedDescriptor->Introspector->descriptorForElement->descriptor->DescriptorCache->getInstance->union->return->mbeanInterface->getName->new->MBeanInfo
MBeanIntrospector#getMBeanInfo(Object, PerInterface):::Return the MBeanInfo for the given resource, based on the given per-interface data.:::mbi->resource->getClass->getClassMBeanInfo->notifs->findNotifications->if->return->else->return->mbi->getClassName->mbi->getDescription->mbi->getAttributes->mbi->getConstructors->mbi->getOperations->mbi->getDescriptor->new->MBeanInfo
MBeanIntrospector#getClassMBeanInfo(Class, PerInterface):::Return the basic MBeanInfo for resources of the given class and per-interface data:::map->getMBeanInfoMap->synchronized->intfMap->map->get->if->new->WeakHashMap<Class<?>,MBeanInfo>->map->put->intfClass->perInterface->getMBeanInterface->mbi->intfMap->get->if->imbi->perInterface->getMBeanInfo->descriptor->ImmutableDescriptor->imbi->getDescriptor->getMBeanDescriptor->union->resourceClass->getName->imbi->getDescription->imbi->getAttributes->findConstructors->imbi->getOperations->new->MBeanInfo->intfMap->put->return
MBeanIntrospector#findNotifications(Object)::: bean introspector find notifications:::if->return->mbn->getNotificationInfo->if->return->result->new->MBeanNotificationInfoArr->for->i->return
MBeanIntrospector#findConstructors(Class)::: bean introspector find constructors:::cons->c->getConstructors->mbc->new->MBeanConstructorInfoArr->for->i->return
MBeanServerDelegateImpl#preRegister(MBeanServer, ObjectName)::: bean server delegate impl pre register:::if->return->else->return
MBeanServerDelegateImpl#postRegister(Boolean)::: bean server delegate impl post register:::
MBeanServerDelegateImpl#preDeregister()::: bean server delegate impl pre deregister:::throw->new->IllegalArgumentException
MBeanServerDelegateImpl#postDeregister()::: bean server delegate impl post deregister:::
MBeanServerDelegateImpl#getAttribute(String):::Obtains the value of a specific attribute of the MBeanServerDelegate.:::try->if->throw->new->AttributeNotFoundException->if->attribute->equals->return->getMBeanServerId->else->if->attribute->equals->return->getSpecificationName->else->if->attribute->equals->return->getSpecificationVersion->else->if->attribute->equals->return->getSpecificationVendor->else->if->attribute->equals->return->getImplementationName->else->if->attribute->equals->return->getImplementationVersion->else->if->attribute->equals->return->getImplementationVendor->else->throw->new->AttributeNotFoundException->catch->throw->throw->throw->throw->new->MBeanException->finally
MBeanServerDelegateImpl#setAttribute(Attribute):::This method always fail since all MBeanServerDelegateMBean attributes are read-only.:::attname->attribute->getName->if->r->new->IllegalArgumentException->throw->new->RuntimeOperationsException->val->getAttribute->throw->new->AttributeNotFoundException
MBeanServerDelegateImpl#getAttributes(String[]):::Makes it possible to get the values of several attributes of the MBeanServerDelegate.:::attn->len->list->new->AttributeList->for->i->return
MBeanServerDelegateImpl#setAttributes(AttributeList):::This method always return an empty list since all MBeanServerDelegateMBean attributes are read-only.:::return->new->AttributeList
MBeanServerDelegateImpl#invoke(String, Object[], String[]):::Always fails since the MBeanServerDelegate MBean has no operation.:::if->r->new->IllegalArgumentException->throw->new->RuntimeOperationsException->throw->new->NoSuchMethodException->new->ReflectionException
MBeanServerDelegateImpl#getMBeanInfo():::Provides the MBeanInfo describing the MBeanServerDelegate.:::return
MBeanSupport#getMBeanIntrospector():::Return the appropriate introspector for this type of MBean.:::
MBeanSupport#getCookie():::Return a cookie for this MBean:::
MBeanSupport#isMXBean()::: bean support is bean:::return->perInterface->isMXBean
MBeanSupport#register(MBeanServer, ObjectName)::: bean support register:::
MBeanSupport#unregister()::: bean support unregister:::
MBeanSupport#preRegister(MBeanServer, ObjectName)::: bean support pre register:::if->preRegister->return
MBeanSupport#preRegister2(MBeanServer, ObjectName)::: bean support pre register2:::register
MBeanSupport#registerFailed()::: bean support register failed:::unregister
MBeanSupport#postRegister(Boolean)::: bean support post register:::if->postRegister
MBeanSupport#preDeregister()::: bean support pre deregister:::if->preDeregister
MBeanSupport#postDeregister()::: bean support post deregister:::try->unregister->catch->finally->if->postDeregister
MBeanSupport#getAttribute(String)::: bean support get attribute:::return->perInterface->getCookie->getAttribute
MBeanSupport#getAttributes(String[])::: bean support get attributes:::result->new->AttributeList->foreach->try->attrValue->getAttribute->result->new->Attribute->add->catch->finally->return
MBeanSupport#setAttribute(Attribute)::: bean support set attribute:::name->attribute->getName->value->attribute->getValue->perInterface->getCookie->setAttribute
MBeanSupport#setAttributes(AttributeList)::: bean support set attributes:::result->attributes->size->new->AttributeList->foreach->attr->try->setAttribute->result->attr->getName->attr->getValue->new->Attribute->add->catch->finally->return
MBeanSupport#invoke(String, Object[], String[])::: bean support invoke:::return->perInterface->getCookie->invoke
MBeanSupport#getMBeanInfo()::: bean support get bean info:::return
MBeanSupport#getClassName()::: bean support get class name:::return->resource->getClass->getName
MBeanSupport#getResource()::: bean support get resource:::return
MBeanSupport#getMBeanInterface()::: bean support get bean interface:::return->perInterface->getMBeanInterface
ModifiableClassLoaderRepository#addClassLoader(ClassLoader):::Add an anonymous ClassLoader to the repository.:::
ModifiableClassLoaderRepository#removeClassLoader(ClassLoader):::Remove the specified ClassLoader to the repository:::
ModifiableClassLoaderRepository#addClassLoader(ObjectName, ClassLoader):::Add a named ClassLoader to the repository.:::
ModifiableClassLoaderRepository#removeClassLoader(ObjectName):::Remove a named ClassLoader from the repository.:::
ModifiableClassLoaderRepository#getClassLoader(ObjectName):::Get a named ClassLoader from the repository.:::
MXBeanIntrospector#getInstance()::: bean introspector get instance:::return
MXBeanIntrospector#getPerInterfaceMap()::: bean introspector get per interface map:::return
MXBeanIntrospector#getMBeanInfoMap()::: bean introspector get bean info map:::return
MXBeanIntrospector#getAnalyzer(Class)::: bean introspector get analyzer:::return->MBeanAnalyzer->analyzer
MXBeanIntrospector#isMXBean()::: bean introspector is bean:::return
MXBeanIntrospector#mFrom(Method)::: bean introspector m from:::return->ConvertingMethod->from
MXBeanIntrospector#getName(ConvertingMethod)::: bean introspector get name:::return->m->getName
MXBeanIntrospector#getGenericReturnType(ConvertingMethod)::: bean introspector get generic return type:::return->m->getGenericReturnType
MXBeanIntrospector#getGenericParameterTypes(ConvertingMethod)::: bean introspector get generic parameter types:::return->m->getGenericParameterTypes
MXBeanIntrospector#getSignature(ConvertingMethod)::: bean introspector get signature:::return->m->getOpenSignature
MXBeanIntrospector#checkMethod(ConvertingMethod)::: bean introspector check method:::m->checkCallFromOpen
MXBeanIntrospector#invokeM2(ConvertingMethod, Object, Object[], Object)::: bean introspector invoke m2:::return->m->invokeWithOpenReturn
MXBeanIntrospector#validParameter(ConvertingMethod, Object, int, Object)::: bean introspector valid parameter:::if->t->m->getGenericParameterTypes->return->isPrimitive->else->v->try->m->fromOpenParameter->catch->return->finally->return->m->getMethod->isValidParameter
MXBeanIntrospector#getMBeanAttributeInfo(String, ConvertingMethod, ConvertingMethod)::: bean introspector get bean attribute info:::isReadable->isWritable->isIs->getName->startsWith->description->openType->originalType->if->getter->getOpenReturnType->getter->getGenericReturnType->else->setter->getOpenParameterTypes->setter->getGenericParameterTypes->descriptor->typeDescriptor->if->ImmutableDescriptor->getter->getDescriptor->union->if->ImmutableDescriptor->setter->getDescriptor->union->ai->if->canUseOpenInfo->new->OpenMBeanAttributeInfoSupport->else->originalTypeString->new->MBeanAttributeInfo->return
MXBeanIntrospector#getMBeanOperationInfo(String, ConvertingMethod)::: bean introspector get bean operation info:::method->operation->getMethod->description->impact->returnType->operation->getOpenReturnType->originalReturnType->operation->getGenericReturnType->paramTypes->operation->getOpenParameterTypes->originalParamTypes->operation->getGenericParameterTypes->params->new->MBeanParameterInfoArr->openReturnType->canUseOpenInfo->openParameterTypes->annots->method->getParameterAnnotations->for->i->descriptor->typeDescriptor->ImmutableDescriptor->Introspector->descriptorForElement->union->oi->if->oparams->new->OpenMBeanParameterInfoArr->System->arraycopy->new->OpenMBeanOperationInfoSupport->else->returnType->getClassName->originalTypeString->new->MBeanOperationInfo->return
MXBeanIntrospector#getBasicMBeanDescriptor()::: bean introspector get basic bean descriptor:::return->new->ImmutableDescriptor
MXBeanIntrospector#getMBeanDescriptor(Class)::: bean introspector get bean descriptor:::return
MXBeanIntrospector#typeDescriptor(OpenType, Type)::: bean introspector type descriptor:::return->new->StringArr->new->ObjectArr->originalTypeString->new->ImmutableDescriptor
MXBeanIntrospector#canUseOpenInfo(Type):::True if this type can be faithfully represented in an OpenMBean*Info.  Compatibility with JSR 174 means that primitive types must be represented by an MBean*Info whose getType() is the primitive type string, e.g:::if->return->getGenericComponentType->canUseOpenInfo->else->if->isArray->return->getComponentType->canUseOpenInfo->return->isPrimitive
MXBeanIntrospector#originalTypeString(Type)::: bean introspector original type string:::if->return->getName->else->return->typeName
MXBeanIntrospector#typeName(Type)::: bean introspector type name:::if->c->if->c->isArray->return->c->getComponentType->typeName->else->return->c->getName->else->if->gat->return->gat->getGenericComponentType->typeName->else->if->pt->sb->new->StringBuilder->sb->pt->getRawType->typeName->append->append->sep->foreach->pt->getActualTypeArguments->sb->append->typeName->append->return->sb->append->toString->else->return
MXBeanLookup#lookupFor(MBeanServerConnection)::: bean lookup lookup for:::synchronized->weakLookup->mbscToLookup->get->lookup->weakLookup->get->if->new->MXBeanLookup->mbscToLookup->new->WeakReference<MXBeanLookup>->put->return
MXBeanLookup#objectNameToMXBean(ObjectName, Class)::: bean lookup object name to bean:::wr->objectNameToProxy->get->if->proxy->wr->get->if->type->isInstance->return->type->cast->proxy->JMX->newMXBeanProxy->objectNameToProxy->new->WeakReference<Object>->put->return
MXBeanLookup#mxbeanToObjectName(Object)::: bean lookup mxbean to object name:::wrong->if->ih->Proxy->getInvocationHandler->if->mbsih->if->mbsih->getMBeanServerConnection->equals->return->mbsih->getObjectName->else->else->else->name->mxbeanToObjectName->get->if->return->s->mxbean->getClass->getName->throw->new->OpenDataException
MXBeanLookup#addReference(ObjectName, Object)::: bean lookup add reference:::existing->mxbeanToObjectName->get->if->multiname->AccessController->new->GetPropertyAction->doPrivileged->if->equalsIgnoreCase->throw->new->InstanceAlreadyExistsException->mxbeanToObjectName->put
MXBeanLookup#removeReference(ObjectName, Object)::: bean lookup remove reference:::if->name->mxbeanToObjectName->get->equals->mxbeanToObjectName->remove->return->else->return
MXBeanLookup#getLookup()::: bean lookup get lookup:::return->currentLookup->get
MXBeanLookup#setLookup(MXBeanLookup)::: bean lookup set lookup:::currentLookup->set
MXBeanMapping#getJavaType():::The Java type that was supplied to the constructor.:::return
MXBeanMapping#getOpenType():::The Open Type that was supplied to the constructor.:::return
MXBeanMapping#getOpenClass():::The Java class that corresponds to instances of the #getOpenType() Open Type for this mapping.:::return
MXBeanMapping#makeOpenClass(Type, OpenType)::: bean mapping make open class:::if->isPrimitive->return->try->className->openType->getClassName->return->Class->getClassLoader->forName->catch->throw->new->RuntimeException->finally
MXBeanMapping#fromOpenValue(Object):::Convert an instance of the Open Type into the Java type.:::
MXBeanMapping#toOpenValue(Object):::Convert an instance of the Java type into the Open Type.:::
MXBeanMapping#checkReconstructible():::Throw an appropriate InvalidObjectException if we will not be able to convert back from the open data to the original Java object:::
MXBeanMappingFactory#mappingForType(Type, MXBeanMappingFactory):::Return the mapping for the given Java type:::
MXBeanProxy.Visitor#visitAttribute(String, ConvertingMethod, ConvertingMethod)::: visitor visit attribute:::if->getter->checkCallToOpen->getterMethod->getter->getMethod->handlerMap->new->GetHandler->put->if->setterMethod->setter->getMethod->handlerMap->new->SetHandler->put
MXBeanProxy.Visitor#visitOperation(String, ConvertingMethod)::: visitor visit operation:::operation->checkCallToOpen->operationMethod->operation->getMethod->sig->operation->getOpenSignature->handlerMap->new->InvokeHandler->put
MXBeanProxy.Handler#getName()::: handler get name:::return
MXBeanProxy.Handler#getConvertingMethod()::: handler get converting method:::return
MXBeanProxy.Handler#invoke(MBeanServerConnection, ObjectName, Object[])::: handler invoke:::
MXBeanProxy.GetHandler#invoke(MBeanServerConnection, ObjectName, Object[])::: get handler invoke:::return->mbsc->getName->getAttribute
MXBeanProxy.SetHandler#invoke(MBeanServerConnection, ObjectName, Object[])::: set handler invoke:::attr->getName->new->Attribute->mbsc->setAttribute->return
MXBeanProxy.InvokeHandler#invoke(MBeanServerConnection, ObjectName, Object[])::: invoke handler invoke:::return->mbsc->getName->invoke
MXBeanProxy#invoke(MBeanServerConnection, ObjectName, Method, Object[])::: bean proxy invoke:::handler->handlerMap->get->cm->handler->getConvertingMethod->lookup->MXBeanLookup->lookupFor->oldLookup->MXBeanLookup->getLookup->try->MXBeanLookup->setLookup->openArgs->cm->toOpenParameters->result->handler->invoke->return->cm->fromOpenReturnValue->catch->finally->MXBeanLookup->setLookup
MXBeanSupport#getMBeanIntrospector()::: bean support get bean introspector:::return->MXBeanIntrospector->getInstance
MXBeanSupport#getCookie()::: bean support get cookie:::return
MXBeanSupport#findMXBeanInterface(Class)::: bean support find bean interface:::if->throw->new->IllegalArgumentException->intfs->transitiveInterfaces->candidates->newSet->foreach->if->JMX->isMXBeanInterface->candidates->add->while->candidates->size->foreach->for->it->candidates->iterator->it->hasNext->msg->resourceClass->getName->throw->new->IllegalArgumentException->if->candidates->iterator->hasNext->return->Util->candidates->iterator->next->cast->else->msg->resourceClass->getName->throw->new->IllegalArgumentException
MXBeanSupport#transitiveInterfaces(Class)::: bean support transitive interfaces:::set->newSet->transitiveInterfaces->return
MXBeanSupport#transitiveInterfaces(Class, Set>)::: bean support transitive interfaces:::if->return->if->c->isInterface->intfs->add->c->getSuperclass->transitiveInterfaces->foreach->c->getInterfaces->transitiveInterfaces
MXBeanSupport#register(MBeanServer, ObjectName)::: bean support register:::if->throw->new->IllegalArgumentException->synchronized->MXBeanLookup->lookupFor->getResource->addReference
MXBeanSupport#unregister()::: bean support unregister:::synchronized->if->if->mxbeanLookup->getResource->removeReference
NamedObject#equals(Object):::Compares the current object name with another object name.:::if->return->if->return->if->return->no->return->name->no->getName->equals
NamedObject#hashCode():::Returns a hash code for this named object.:::return->name->hashCode
NamedObject#getName():::Get the object name.:::return
NamedObject#getObject():::Get the object:::return
ObjectInputStreamWithLoader#resolveClass(ObjectStreamClass)::: object input stream with loader resolve class:::if->return->super->resolveClass->else->name->aClass->getName->ReflectUtil->checkPackageAccess->return->Class->forName
PerInterface#getMBeanInterface()::: per interface get bean interface:::return
PerInterface#getMBeanInfo()::: per interface get bean info:::return
PerInterface#isMXBean()::: per interface is bean:::return->introspector->isMXBean
PerInterface#getAttribute(Object, String, Object)::: per interface get attribute:::cm->getters->get->if->msg->if->setters->containsKey->else->throw->new->AttributeNotFoundException->return->introspector->invokeM
PerInterface#setAttribute(Object, String, Object, Object)::: per interface set attribute:::cm->setters->get->if->msg->if->getters->containsKey->else->throw->new->AttributeNotFoundException->introspector->invokeSetter
PerInterface#invoke(Object, String, Object[], String[], Object)::: per interface invoke:::list->ops->get->if->msg->return->noSuchMethod->if->new->StringArr->found->foreach->if->Arrays->equals->break->if->badSig->sigString->msg->if->list->size->list->get->sigString->else->return->noSuchMethod->return->introspector->invokeM
PerInterface#noSuchMethod(String, Object, String, Object[], String[], Object)::: per interface no such method:::nsme->sigString->new->NoSuchMethodException->exception->new->ReflectionException->if->introspector->isMXBean->throw->act->new->GetPropertyAction->invokeGettersS->try->AccessController->doPrivileged->catch->finally->if->throw->rest->methods->if->if->operation->startsWith->else->if->operation->startsWith->if->else->if->operation->startsWith->if->attrName->operation->substring->method->methods->get->if->introspector->getName->equals->msig->introspector->getSignature->if->Arrays->equals->return->introspector->invokeM->throw
PerInterface#sigString(String[])::: per interface sig string:::b->new->StringBuilder->if->foreach->if->b->length->b->append->b->append->return->b->append->toString
PerInterface.InitMaps#visitAttribute(String, M, M)::: init maps visit attribute:::if->introspector->checkMethod->old->getters->put->if->introspector->checkMethod->old->setters->put
PerInterface.InitMaps#visitOperation(String, M)::: init maps visit operation:::introspector->checkMethod->sig->introspector->getSignature->mas->new->MethodAndSig->list->ops->get->if->Collections->singletonList->else->if->list->size->newList->list->add->ops->put
Repository.RegistrationContext#registering():::Called by #addMBean:::
Repository.RegistrationContext#unregistered():::Called by #remove:::
Repository.ObjectNamePattern#matchKeys(ObjectName):::Return true if the given ObjectName matches the ObjectName pattern for which this object has been built:::if->name->getKeyPropertyList->size->return->if->for->i->return->p1->name->getCanonicalKeyPropertyListString->p2->return->p1->equals
Repository#addAllMatching(Map, Set, ObjectNamePattern):::Add all the matching objects from the given hashtable in the result set for the given ObjectNamePattern Do not check whether the domains match (only check for matching key property lists - see matchKeys()):::synchronized->foreach->moiTb->values->on->no->getName->if->pattern->matchKeys->result->add
Repository#addNewDomMoi(DynamicMBean, String, ObjectName, RegistrationContext)::: repository add new dom moi:::moiTb->new->HashMap<String,NamedObject>->key->name->getCanonicalKeyPropertyListString->addMoiToTb->domainTb->put
Repository#registering(RegistrationContext)::: repository registering:::if->return->try->context->registering->catch->throw->throw->new->RuntimeOperationsException->finally
Repository#unregistering(RegistrationContext, ObjectName)::: repository unregistering:::if->return->try->context->unregistered->catch->MBEANSERVER_LOGGER->log->finally
Repository#addMoiToTb(DynamicMBean, ObjectName, String, Map, RegistrationContext)::: repository add moi to tb:::registering->moiTb->new->NamedObject->put
Repository#retrieveNamedObject(ObjectName):::Retrieves the named object contained in repository from the given objectname.:::if->name->isPattern->return->dom->name->getDomain->intern->if->dom->length->moiTb->domainTb->get->if->return->return->moiTb->name->getCanonicalKeyPropertyListString->get
Repository#getDomains():::Returns the list of domains in which any MBean is currently registered.:::lock->readLock->lock->result->try->domainTb->size->new->ArrayList<String>->foreach->domainTb->entrySet->t->entry->getValue->if->t->size->result->entry->getKey->add->catch->finally->lock->readLock->unlock->return->result->result->size->new->StringArr->toArray
Repository#addMBean(DynamicMBean, ObjectName, RegistrationContext):::Stores an MBean associated with its object name in the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->dom->name->getDomain->intern->to_default_domain->if->dom->length->Util->name->toString->newObjectName->if->else->if->name->isPattern->throw->name->toString->new->IllegalArgumentException->new->RuntimeOperationsException->lock->writeLock->lock->try->if->dom->equals->domainTb->containsKey->throw->new->IllegalArgumentException->new->RuntimeOperationsException->moiTb->domainTb->get->if->addNewDomMoi->return->else->cstr->name->getCanonicalKeyPropertyListString->elmt->moiTb->get->if->throw->name->toString->new->InstanceAlreadyExistsException->else->addMoiToTb->catch->finally->lock->writeLock->unlock
Repository#contains(ObjectName):::Checks whether an MBean of the name specified is already stored in the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->lock->readLock->lock->try->return->retrieveNamedObject->catch->finally->lock->readLock->unlock
Repository#retrieve(ObjectName):::Retrieves the MBean of the name specified from the repository:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->lock->readLock->lock->try->no->retrieveNamedObject->if->return->else->return->no->getObject->catch->finally->lock->readLock->unlock
Repository#query(ObjectName, QueryExp):::Selects and retrieves the list of MBeans whose names match the specified object name pattern and which match the specified query expression (optionally).:::result->new->HashSet<NamedObject>->name->if->pattern->getCanonicalName->length->pattern->equals->else->lock->readLock->lock->try->if->name->isPattern->no->retrieveNamedObject->if->result->add->return->if->foreach->domainTb->values->result->moiTb->values->addAll->return->canonical_key_property_list_string->name->getCanonicalKeyPropertyListString->allNames->canonical_key_property_list_string->length->namePattern->new->ObjectNamePattern->if->name->getDomain->length->moiTb->domainTb->get->if->result->moiTb->values->addAll->else->addAllMatching->return->if->name->isDomainPattern->moiTb->domainTb->name->getDomain->get->if->return->Collections->emptySet->if->result->moiTb->values->addAll->else->addAllMatching->return->dom2Match->name->getDomain->foreach->domainTb->keySet->if->Util->wildmatch->moiTb->domainTb->get->if->result->moiTb->values->addAll->else->addAllMatching->return->catch->finally->lock->readLock->unlock
Repository#remove(ObjectName, RegistrationContext):::Removes an MBean from the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->dom->name->getDomain->intern->if->dom->length->lock->writeLock->lock->try->moiTb->domainTb->get->if->throw->name->toString->new->InstanceNotFoundException->if->moiTb->name->getCanonicalKeyPropertyListString->remove->throw->name->toString->new->InstanceNotFoundException->if->moiTb->isEmpty->domainTb->remove->if->domainTb->new->HashMap<String,NamedObject>->put->unregistering->catch->finally->lock->writeLock->unlock
Repository#getCount():::Gets the number of MBeans stored in the repository.:::return
Repository#getDefaultDomain():::Gets the name of the domain currently used by default in the repository.:::return
SecureClassLoaderRepository#loadClass(String)::: secure class loader repository load class:::return->clr->loadClass
SecureClassLoaderRepository#loadClassWithout(ClassLoader, String)::: secure class loader repository load class without:::return->clr->loadClassWithout
SecureClassLoaderRepository#loadClassBefore(ClassLoader, String)::: secure class loader repository load class before:::return->clr->loadClassBefore
StandardMBeanIntrospector#getInstance()::: standard bean introspector get instance:::return
StandardMBeanIntrospector#getPerInterfaceMap()::: standard bean introspector get per interface map:::return
StandardMBeanIntrospector#getMBeanInfoMap()::: standard bean introspector get bean info map:::return
StandardMBeanIntrospector#getAnalyzer(Class)::: standard bean introspector get analyzer:::return->MBeanAnalyzer->analyzer
StandardMBeanIntrospector#isMXBean()::: standard bean introspector is bean:::return
StandardMBeanIntrospector#mFrom(Method)::: standard bean introspector m from:::return
StandardMBeanIntrospector#getName(Method)::: standard bean introspector get name:::return->m->getName
StandardMBeanIntrospector#getGenericReturnType(Method)::: standard bean introspector get generic return type:::return->m->getGenericReturnType
StandardMBeanIntrospector#getGenericParameterTypes(Method)::: standard bean introspector get generic parameter types:::return->m->getGenericParameterTypes
StandardMBeanIntrospector#getSignature(Method)::: standard bean introspector get signature:::params->m->getParameterTypes->sig->new->StringArr->for->i->return
StandardMBeanIntrospector#checkMethod(Method)::: standard bean introspector check method:::
StandardMBeanIntrospector#invokeM2(Method, Object, Object[], Object)::: standard bean introspector invoke m2:::return->MethodUtil->invoke
StandardMBeanIntrospector#validParameter(Method, Object, int, Object)::: standard bean introspector valid parameter:::return->isValidParameter
StandardMBeanIntrospector#getMBeanAttributeInfo(String, Method, Method)::: standard bean introspector get bean attribute info:::description->try->return->new->MBeanAttributeInfo->catch->throw->new->RuntimeException->finally
StandardMBeanIntrospector#getMBeanOperationInfo(String, Method)::: standard bean introspector get bean operation info:::description->return->new->MBeanOperationInfo
StandardMBeanIntrospector#getBasicMBeanDescriptor()::: standard bean introspector get basic bean descriptor:::return
StandardMBeanIntrospector#getMBeanDescriptor(Class)::: standard bean introspector get bean descriptor:::immutable->isDefinitelyImmutableInfo->return->new->ImmutableDescriptor
StandardMBeanIntrospector#isDefinitelyImmutableInfo(Class)::: standard bean introspector is definitely immutable info:::if->isAssignableFrom->return->synchronized->immutable->definitelyImmutable->get->if->nbs->if->nbs->isAssignableFrom->try->m->implClass->getMethod->m->getDeclaringClass->catch->return->finally->else->definitelyImmutable->put->return
StandardMBeanSupport#getMBeanIntrospector()::: standard bean support get bean introspector:::return->StandardMBeanIntrospector->getInstance
StandardMBeanSupport#getCookie()::: standard bean support get cookie:::return
StandardMBeanSupport#register(MBeanServer, ObjectName)::: standard bean support register:::
StandardMBeanSupport#unregister()::: standard bean support unregister:::
StandardMBeanSupport#getMBeanInfo()::: standard bean support get bean info:::mbi->super->getMBeanInfo->resourceClass->getResource->getClass->if->StandardMBeanIntrospector->isDefinitelyImmutableInfo->return->return->mbi->getClassName->mbi->getDescription->mbi->getAttributes->mbi->getConstructors->mbi->getOperations->MBeanIntrospector->getResource->findNotifications->mbi->getDescriptor->new->MBeanInfo
SunJmxMBeanServer#getMBeanInstantiator():::Return the MBeanInstantiator associated to this MBeanServer.:::
SunJmxMBeanServer#interceptorsEnabled():::Tell whether MBeanServerInterceptors are enabled on this object.:::
SunJmxMBeanServer#getMBeanServerInterceptor():::Return the MBeanServerInterceptor.:::
SunJmxMBeanServer#setMBeanServerInterceptor(MBeanServer):::Set the MBeanServerInterceptor.:::
SunJmxMBeanServer#getMBeanServerDelegate():::Return the MBeanServerDelegate representing the MBeanServer:::
Util#newObjectName(String)::: util new object name:::try->return->new->ObjectName->catch->throw->new->IllegalArgumentException->finally
Util#newMap()::: util new map:::return->new->HashMap<K,V>
Util#newSynchronizedMap()::: util new synchronized map:::return->Collections->Util->newMap->synchronizedMap
Util#newIdentityHashMap()::: util new identity hash map:::return->new->IdentityHashMap<K,V>
Util#newSynchronizedIdentityHashMap()::: util new synchronized identity hash map:::map->newIdentityHashMap->return->Collections->synchronizedMap
Util#newSortedMap()::: util new sorted map:::return->new->TreeMap<K,V>
Util#newSortedMap(Comparator)::: util new sorted map:::return->new->TreeMap<K,V>
Util#newInsertionOrderMap()::: util new insertion order map:::return->new->LinkedHashMap<K,V>
Util#newSet()::: util new set:::return->new->HashSet<E>
Util#newSet(Collection)::: util new set:::return->new->HashSet<E>
Util#newList()::: util new list:::return->new->ArrayList<E>
Util#newList(Collection)::: util new list:::return->new->ArrayList<E>
Util#cast(Object)::: util cast:::return
Util#hashCode(String[], Object[]):::Computes a descriptor hashcode from its names and values.:::hash->for->i->return
Util#wildmatch(String, String, int, int, int, int)::: util wildmatch:::starstri->starpati->while->if->patc->pat->charAt->switch->if->break->continue->continue->if->str->charAt->continue->break->else->if->return->if->return
Util#wildmatch(String, String):::Match a string against a shell-style pattern:::return->str->length->pat->length->wildmatch
WeakIdentityHashMap#make()::: weak identity hash map make:::return->new->WeakIdentityHashMap<K,V>
WeakIdentityHashMap#get(K)::: weak identity hash map get:::expunge->keyref->makeReference->return->map->get
WeakIdentityHashMap#put(K, V)::: weak identity hash map put:::expunge->if->throw->new->IllegalArgumentException->keyref->makeReference->return->map->put
WeakIdentityHashMap#remove(K)::: weak identity hash map remove:::expunge->keyref->makeReference->return->map->remove
WeakIdentityHashMap#expunge()::: weak identity hash map expunge:::ref->while->refQueue->poll->map->remove
WeakIdentityHashMap#makeReference(K)::: weak identity hash map make reference:::return->new->IdentityWeakReference<K>
WeakIdentityHashMap#makeReference(K, ReferenceQueue)::: weak identity hash map make reference:::return->new->IdentityWeakReference<K>
WeakIdentityHashMap.IdentityWeakReference#equals(Object)::: identity weak reference equals:::if->return->if->return->wr->got->get->return->wr->get
WeakIdentityHashMap.IdentityWeakReference#hashCode()::: identity weak reference hash code:::return

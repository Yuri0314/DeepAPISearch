DefaultMXBeanMappingFactory.NonNullMXBeanMapping#isIdentity():::True if and only if this MXBeanMapping's toOpenValue and fromOpenValue methods are the identity function.:::return
DefaultMXBeanMappingFactory#mappingForType(Type, MXBeanMappingFactory):::Get the converter for the given Java type, creating it if necessary.:::if->inProgress->containsKey->throw->typeName->new->OpenDataException->mapping->getMapping->if->return->inProgress->put->try->makeMapping->catch->throw->typeName->openDataException->finally->inProgress->remove->putMapping->return
DefaultMXBeanMappingFactory#decapitalize(String):::Utility method to take a string and convert it to normal Java variable name capitalization:::if->name->length->return->offset1->Character->offsetByCodePoints->if->name->length->Character->name->codePointAt->isUpperCase->return->return->name->substring->toLowerCase->name->substring
DefaultMXBeanMappingFactory#capitalize(String):::Reverse operation for java.beans.Introspector.decapitalize:::if->name->length->return->offset1->name->offsetByCodePoints->return->name->substring->toUpperCase->name->substring
DynamicMBean2#getResource():::The resource corresponding to this MBean:::
DynamicMBean2#getClassName():::The name of this MBean's class, as used by permission checks:::
DynamicMBean2#preRegister2(MBeanServer, ObjectName):::Additional registration hook:::
DynamicMBean2#registerFailed():::Additional registration hook:::
Introspector#isDynamic(Class):::Tell whether a MBean of the given class is a Dynamic MBean:::return->isAssignableFrom
Introspector#testCreation(Class):::Basic method for testing that a MBean of a given class can be instantiated by the MBean server. This method checks that: <ul><li>The given class is a concrete class.</li>     <li>The given class exposes at least one public constructor.</li> </ul> If these conditions are not met, throws a NotCompliantMBeanException.:::mods->c->getModifiers->if->Modifier->isAbstract->Modifier->isInterface->throw->new->NotCompliantMBeanException->consList->c->getConstructors->if->throw->new->NotCompliantMBeanException
Introspector#testCompliance(Class):::Basic method for testing if a given class is a JMX compliant MBean.:::if->isDynamic->return->return->testCompliance
Introspector#testComplianceMXBeanInterface(Class):::Tests the given interface class for being a compliant MXBean interface:::MXBeanIntrospector->getInstance->getAnalyzer
Introspector#testComplianceMBeanInterface(Class):::Tests the given interface class for being a compliant MBean interface:::StandardMBeanIntrospector->getInstance->getAnalyzer
Introspector#testCompliance(Class, Class):::Basic method for testing if a given class is a JMX compliant Standard MBean:::if->getStandardMBeanInterface->ReflectUtil->checkPackageAccess->introspector->StandardMBeanIntrospector->getInstance->return->getClassMBeanInfo
Introspector#getMBeanInterface(Class):::Get the MBean interface implemented by a JMX Standard MBean class:::if->isDynamic->return->try->return->getStandardMBeanInterface->catch->return->finally
Introspector#getStandardMBeanInterface(Class):::Get the MBean interface implemented by a JMX Standard MBean class.:::current->mbeanInterface->while->current->getName->findMBeanInterface->if->break->current->getSuperclass->if->return->else->msg->baseClass->getName->throw->new->NotCompliantMBeanException
Introspector#getMXBeanInterface(Class):::Get the MXBean interface implemented by a JMX MXBean class.:::try->return->MXBeanSupport->findMXBeanInterface->catch->throw->throwException->finally
Introspector#throwException(Class, Throwable):::Throws a NotCompliantMBeanException or a SecurityException.:::if->throw->if->throw->classname->notCompliant->getName->reason->cause->getMessage->res->new->NotCompliantMBeanException->res->initCause->throw
JavaBeansAccessor#getReadMethod(Class, String):::Returns the getter method for a property of the given name:::jba->getJavaBeansAccess->return->jba->getReadMethod
JavaBeansAccessor#getConstructorPropertiesValue(Constructor):::Return the value attribute of the associated @ConstructorProperties annotation if that is present.:::jba->getJavaBeansAccess->return->jba->getConstructorPropertiesValue
JmxMBeanServer#interceptorsEnabled():::Tell whether MBeanServerInterceptors are enabled on this object.:::return
JmxMBeanServer#getMBeanInstantiator():::Return the MBeanInstantiator associated to this MBeanServer.:::if->return->else->throw->new->UnsupportedOperationException
JmxMBeanServer#createMBean(String, ObjectName):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, ObjectName):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, Object[], String[]):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#createMBean(String, ObjectName, ObjectName, Object[], String[]):::Instantiates and registers an MBean in the MBean server:::return->mbsInterceptor->cloneObjectName->createMBean
JmxMBeanServer#registerMBean(Object, ObjectName):::Registers a pre-existing object as an MBean with the MBean server:::return->mbsInterceptor->cloneObjectName->registerMBean
JmxMBeanServer#unregisterMBean(ObjectName):::De-registers an MBean from the MBean server:::mbsInterceptor->cloneObjectName->unregisterMBean
JmxMBeanServer#getObjectInstance(ObjectName):::Gets the <CODE>ObjectInstance</CODE> for a given MBean registered with the MBean server.:::return->mbsInterceptor->cloneObjectName->getObjectInstance
JmxMBeanServer#queryMBeans(ObjectName, QueryExp):::Gets MBeans controlled by the MBean server:::return->mbsInterceptor->cloneObjectName->queryMBeans
JmxMBeanServer#queryNames(ObjectName, QueryExp):::Gets the names of MBeans controlled by the MBean server:::return->mbsInterceptor->cloneObjectName->queryNames
JmxMBeanServer#isRegistered(ObjectName):::Checks whether an MBean, identified by its object name, is already registered with the MBean server.:::return->mbsInterceptor->isRegistered
JmxMBeanServer#getMBeanCount():::Returns the number of MBeans registered in the MBean server.:::return->mbsInterceptor->getMBeanCount
JmxMBeanServer#getAttribute(ObjectName, String):::Gets the value of a specific attribute of a named MBean:::return->mbsInterceptor->cloneObjectName->getAttribute
JmxMBeanServer#getAttributes(ObjectName, String[]):::Enables the values of several attributes of a named MBean:::return->mbsInterceptor->cloneObjectName->getAttributes
JmxMBeanServer#setAttribute(ObjectName, Attribute):::Sets the value of a specific attribute of a named MBean:::mbsInterceptor->cloneObjectName->cloneAttribute->setAttribute
JmxMBeanServer#setAttributes(ObjectName, AttributeList):::Sets the values of several attributes of a named MBean:::return->mbsInterceptor->cloneObjectName->cloneAttributeList->setAttributes
JmxMBeanServer#invoke(ObjectName, String, Object[], String[]):::Invokes an operation on an MBean.:::return->mbsInterceptor->cloneObjectName->invoke
JmxMBeanServer#getDefaultDomain():::Returns the default domain used for naming the MBean:::return->mbsInterceptor->getDefaultDomain
JmxMBeanServer#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object):::Adds a listener to a registered MBean.:::mbsInterceptor->cloneObjectName->addNotificationListener
JmxMBeanServer#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::Adds a listener to a registered MBean.:::mbsInterceptor->cloneObjectName->addNotificationListener
JmxMBeanServer#getMBeanInfo(ObjectName):::This method discovers the attributes and operations that an MBean exposes for management.:::return->mbsInterceptor->cloneObjectName->getMBeanInfo
JmxMBeanServer#instantiate(String):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository Default Loader Repository):::checkMBeanPermission->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, ObjectName):::Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>:::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, Object[], String[]):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository Default Loader Repository):::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#instantiate(String, ObjectName, Object[], String[]):::Instantiates an object:::checkMBeanPermission->myLoader->outerShell->getClass->getClassLoader->return->instantiator->instantiate
JmxMBeanServer#isInstanceOf(ObjectName, String):::Returns true if the MBean specified is an instance of the specified class, false otherwise.:::return->mbsInterceptor->cloneObjectName->isInstanceOf
JmxMBeanServer#deserialize(ObjectName, byte[]):::De-serializes a byte array in the context of the class loader of an MBean.:::loader->getClassLoaderFor->return->instantiator->deserialize
JmxMBeanServer#deserialize(String, byte[]):::De-serializes a byte array in the context of a given MBean class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->clr->getClassLoaderRepository->theClass->try->if->throw->new->ClassNotFoundException->clr->loadClass->catch->throw->new->ReflectionException->finally->return->instantiator->theClass->getClassLoader->deserialize
JmxMBeanServer#deserialize(String, ObjectName, byte[]):::De-serializes a byte array in the context of a given MBean class loader:::cloneObjectName->try->getClassLoader->catch->throw->finally->myLoader->outerShell->getClass->getClassLoader->return->instantiator->deserialize
JmxMBeanServer#getMBeanServerInterceptor():::Return the MBeanServerInterceptor.:::if->return->else->throw->new->UnsupportedOperationException
JmxMBeanServer#setMBeanServerInterceptor(MBeanServer):::Set the MBeanServerInterceptor.:::if->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException
JmxMBeanServer#getClassLoaderFor(ObjectName):::Return the java.lang.ClassLoader that was used for loading the class of the named MBean.:::return->mbsInterceptor->cloneObjectName->getClassLoaderFor
JmxMBeanServer#getClassLoader(ObjectName):::Return the named java.lang.ClassLoader.:::return->mbsInterceptor->cloneObjectName->getClassLoader
JmxMBeanServer#getClassLoaderRepository():::Return the ClassLoaderRepository for that MBeanServer.:::checkMBeanPermission->return
JmxMBeanServer#newMBeanServerDelegate():::This method creates a new MBeanServerDelegate for a new MBeanServer:::return->new->MBeanServerDelegateImpl
JmxMBeanServer#newMBeanServer(String, MBeanServer, MBeanServerDelegate, boolean):::This method creates a new MBeanServer implementation object:::fairLock->checkNewMBeanServerPermission->return->new->JmxMBeanServer
JmxMBeanServerBuilder#newMBeanServerDelegate():::This method creates a new MBeanServerDelegate for a new MBeanServer:::return->JmxMBeanServer->newMBeanServerDelegate
JmxMBeanServerBuilder#newMBeanServer(String, MBeanServer, MBeanServerDelegate):::This method creates a new MBeanServer implementation object:::return->JmxMBeanServer->newMBeanServer
MBeanInstantiator#testCreation(Class):::This methods tests if the MBean class makes it possible to instantiate an MBean of this class in the MBeanServer:::Introspector->testCreation
MBeanInstantiator#findClassWithDefaultLoaderRepository(String):::Loads the class with the specified name using this object's Default Loader Repository.:::theClass->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->try->if->throw->new->ClassNotFoundException->clr->loadClass->catch->throw->new->ReflectionException->finally->return
MBeanInstantiator#findClass(String, ClassLoader):::Gets the class for the specified class name using the MBean Interceptor's classloader:::return->loadClass
MBeanInstantiator#findClass(String, ObjectName):::Gets the class for the specified class name using the specified class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->loader->synchronized->getClassLoader->if->throw->new->InstanceNotFoundException->return->findClass
MBeanInstantiator#findSignatureClasses(String[], ClassLoader):::Return an array of Class corresponding to the given signature, using the specified class loader.:::if->return->aLoader->length->tab->new->Class<?>Arr->if->return->try->for->i->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->ReflectionException->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->finally->return
MBeanInstantiator#instantiate(Class):::Instantiates an object given its class, using its empty constructor:::checkMBeanPermission->moi->cons->findConstructor->if->throw->new->NoSuchMethodException->new->ReflectionException->try->ReflectUtil->checkPackageAccess->ensureClassAccess->cons->newInstance->catch->t->e->getTargetException->if->throw->new->RuntimeMBeanException->else->if->throw->new->RuntimeErrorException->else->throw->new->MBeanException->throw->new->NoSuchMethodException->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->finally->return
MBeanInstantiator#instantiate(Class, Object[], String[], ClassLoader):::Instantiates an object given its class, the parameters and signature of its constructor The call returns a reference to the newly created object.:::checkMBeanPermission->tab->moi->try->aLoader->theClass->getClassLoader->findSignatureClasses->catch->throw->new->ReflectionException->finally->cons->findConstructor->if->throw->new->NoSuchMethodException->new->ReflectionException->try->ReflectUtil->checkPackageAccess->ensureClassAccess->cons->newInstance->catch->throw->new->NoSuchMethodException->new->ReflectionException->throw->new->ReflectionException->throw->new->ReflectionException->th->e->getTargetException->if->throw->new->RuntimeMBeanException->else->if->throw->new->RuntimeErrorException->else->throw->new->MBeanException->finally->return
MBeanInstantiator#deserialize(ClassLoader, byte[]):::De-serializes a byte array in the context of a classloader.:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->bIn->objIn->new->ByteArrayInputStream->try->new->ObjectInputStreamWithLoader->catch->throw->new->OperationsException->finally->return
MBeanInstantiator#deserialize(String, ObjectName, byte[], ClassLoader):::De-serializes a byte array in the context of a given MBean class loader:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->theClass->if->findClass->else->try->instance->getClassLoader->if->throw->new->ClassNotFoundException->Class->forName->catch->throw->loaderName->toString->new->ReflectionException->finally->bIn->objIn->new->ByteArrayInputStream->try->theClass->getClassLoader->new->ObjectInputStreamWithLoader->catch->throw->new->OperationsException->finally->return
MBeanInstantiator#instantiate(String):::Instantiates an object using the list of all class loaders registered in the MBean Interceptor (using its javax.management.loading.ClassLoaderRepository):::return->instantiate
MBeanInstantiator#instantiate(String, ObjectName, ClassLoader):::Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>:::return->instantiate
MBeanInstantiator#instantiate(String, Object[], String[], ClassLoader):::Instantiates an object using the list of all class loaders registered in the MBean server (using its javax.management.loading.ClassLoaderRepository):::theClass->findClassWithDefaultLoaderRepository->return->instantiate
MBeanInstantiator#instantiate(String, ObjectName, Object[], String[], ClassLoader):::Instantiates an object:::theClass->if->findClass->else->findClass->return->instantiate
MBeanInstantiator#getClassLoaderRepository():::Return the Default Loader Repository used by this instantiator object.:::checkMBeanPermission->return
MBeanInstantiator#loadClass(String, ClassLoader):::Load a class with the specified loader, or with this object class loader if the specified loader is null.:::theClass->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ReflectUtil->checkPackageAccess->try->if->getClassLoader->if->Class->forName->else->Class->forName->catch->throw->new->ReflectionException->finally->return
MBeanInstantiator#loadSignatureClasses(String[], ClassLoader):::Load the classes specified in the signature with the given loader, or with this object class loader.:::if->return->aLoader->getClassLoader->length->tab->new->Class<?>Arr->if->return->try->for->i->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->new->ReflectionException->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->finally->return
MBeanIntrospector#getPerInterfaceMap():::The map from interface to PerInterface for this type of MBean.:::
MBeanIntrospector#getMBeanInfoMap():::The map from concrete implementation class and interface to MBeanInfo for this type of MBean.:::
MBeanIntrospector#getAnalyzer(Class):::Make an interface analyzer for this type of MBean.:::
MBeanIntrospector#isMXBean():::True if MBeans with this kind of introspector are MXBeans.:::
MBeanIntrospector#mFrom(Method):::Find the M corresponding to the given Method.:::
MBeanIntrospector#getName(M):::Get the name of this method.:::
MBeanIntrospector#getGenericReturnType(M):::Get the return type of this method:::
MBeanIntrospector#getGenericParameterTypes(M):::Get the parameter types of this method in the Java interface it came from.:::
MBeanIntrospector#getSignature(M):::Get the signature of this method as a caller would have to supply it in MBeanServer.invoke:::
MBeanIntrospector#checkMethod(M):::Check that this method is valid:::
MBeanIntrospector#validParameter(M, Object, int, Object):::Test whether the given value is valid for the given parameter of this M.:::
MBeanIntrospector#getMBeanAttributeInfo(String, M, M):::Construct an MBeanAttributeInfo for the given attribute based on the given getter and setter:::
MBeanIntrospector#getMBeanOperationInfo(String, M):::Construct an MBeanOperationInfo for the given operation based on the M it was derived from.:::
MBeanIntrospector#getBasicMBeanDescriptor():::Get a Descriptor containing fields that MBeans of this kind will always have:::
MBeanIntrospector#getMBeanDescriptor(Class):::Get a Descriptor containing additional fields beyond the ones from getBasicMBeanDescriptor that MBeans whose concrete class is resourceClass will always have.:::
MBeanIntrospector#getMethods(Class):::Get the methods to be analyzed to build the MBean interface.:::ReflectUtil->checkPackageAccess->return->Arrays->mbeanType->getMethods->asList
MBeanIntrospector#consistent(M, M):::True if the given getter and setter are consistent.:::return->getGenericReturnType->getGenericParameterTypes->equals
MBeanIntrospector#invokeM(M, Object, Object[], Object):::Invoke the given M on the given target with the given args and cookie:::try->return->invokeM2->catch->unwrapInvocationTargetException->throw->new->RuntimeException->throw->e->toString->new->ReflectionException->finally
MBeanIntrospector#getMBeanInfo(Object, PerInterface):::Return the MBeanInfo for the given resource, based on the given per-interface data.:::mbi->resource->getClass->getClassMBeanInfo->notifs->findNotifications->if->return->else->return->mbi->getClassName->mbi->getDescription->mbi->getAttributes->mbi->getConstructors->mbi->getOperations->mbi->getDescriptor->new->MBeanInfo
MBeanIntrospector#getClassMBeanInfo(Class, PerInterface):::Return the basic MBeanInfo for resources of the given class and per-interface data:::map->getMBeanInfoMap->synchronized->intfMap->map->get->if->new->WeakHashMap<Class<?>,MBeanInfo>->map->put->intfClass->perInterface->getMBeanInterface->mbi->intfMap->get->if->imbi->perInterface->getMBeanInfo->descriptor->ImmutableDescriptor->imbi->getDescriptor->getMBeanDescriptor->union->resourceClass->getName->imbi->getDescription->imbi->getAttributes->findConstructors->imbi->getOperations->new->MBeanInfo->intfMap->put->return
MBeanServerDelegateImpl#getAttribute(String):::Obtains the value of a specific attribute of the MBeanServerDelegate.:::try->if->throw->new->AttributeNotFoundException->if->attribute->equals->return->getMBeanServerId->else->if->attribute->equals->return->getSpecificationName->else->if->attribute->equals->return->getSpecificationVersion->else->if->attribute->equals->return->getSpecificationVendor->else->if->attribute->equals->return->getImplementationName->else->if->attribute->equals->return->getImplementationVersion->else->if->attribute->equals->return->getImplementationVendor->else->throw->new->AttributeNotFoundException->catch->throw->throw->throw->throw->new->MBeanException->finally
MBeanServerDelegateImpl#setAttribute(Attribute):::This method always fail since all MBeanServerDelegateMBean attributes are read-only.:::attname->attribute->getName->if->r->new->IllegalArgumentException->throw->new->RuntimeOperationsException->val->getAttribute->throw->new->AttributeNotFoundException
MBeanServerDelegateImpl#getAttributes(String[]):::Makes it possible to get the values of several attributes of the MBeanServerDelegate.:::attn->len->list->new->AttributeList->for->i->return
MBeanServerDelegateImpl#setAttributes(AttributeList):::This method always return an empty list since all MBeanServerDelegateMBean attributes are read-only.:::return->new->AttributeList
MBeanServerDelegateImpl#invoke(String, Object[], String[]):::Always fails since the MBeanServerDelegate MBean has no operation.:::if->r->new->IllegalArgumentException->throw->new->RuntimeOperationsException->throw->new->NoSuchMethodException->new->ReflectionException
MBeanServerDelegateImpl#getMBeanInfo():::Provides the MBeanInfo describing the MBeanServerDelegate.:::return
MBeanSupport#getMBeanIntrospector():::Return the appropriate introspector for this type of MBean.:::
MBeanSupport#getCookie():::Return a cookie for this MBean:::
ModifiableClassLoaderRepository#addClassLoader(ClassLoader):::Add an anonymous ClassLoader to the repository.:::
ModifiableClassLoaderRepository#removeClassLoader(ClassLoader):::Remove the specified ClassLoader to the repository:::
ModifiableClassLoaderRepository#addClassLoader(ObjectName, ClassLoader):::Add a named ClassLoader to the repository.:::
ModifiableClassLoaderRepository#removeClassLoader(ObjectName):::Remove a named ClassLoader from the repository.:::
ModifiableClassLoaderRepository#getClassLoader(ObjectName):::Get a named ClassLoader from the repository.:::
MXBeanMapping#getJavaType():::The Java type that was supplied to the constructor.:::return
MXBeanMapping#getOpenType():::The Open Type that was supplied to the constructor.:::return
MXBeanMapping#getOpenClass():::The Java class that corresponds to instances of the #getOpenType() Open Type for this mapping.:::return
MXBeanMapping#fromOpenValue(Object):::Convert an instance of the Open Type into the Java type.:::
MXBeanMapping#toOpenValue(Object):::Convert an instance of the Java type into the Open Type.:::
MXBeanMapping#checkReconstructible():::Throw an appropriate InvalidObjectException if we will not be able to convert back from the open data to the original Java object:::
MXBeanMappingFactory#mappingForType(Type, MXBeanMappingFactory):::Return the mapping for the given Java type:::
NamedObject#equals(Object):::Compares the current object name with another object name.:::if->return->if->return->if->return->no->return->name->no->getName->equals
NamedObject#hashCode():::Returns a hash code for this named object.:::return->name->hashCode
NamedObject#getName():::Get the object name.:::return
NamedObject#getObject():::Get the object:::return
Repository.RegistrationContext#registering():::Called by #addMBean:::
Repository.RegistrationContext#unregistered():::Called by #remove:::
Repository#getDomains():::Returns the list of domains in which any MBean is currently registered.:::lock->readLock->lock->result->try->domainTb->size->new->ArrayList<String>->foreach->domainTb->entrySet->t->entry->getValue->if->t->size->result->entry->getKey->add->catch->finally->lock->readLock->unlock->return->result->result->size->new->StringArr->toArray
Repository#addMBean(DynamicMBean, ObjectName, RegistrationContext):::Stores an MBean associated with its object name in the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->dom->name->getDomain->intern->to_default_domain->if->dom->length->Util->name->toString->newObjectName->if->else->if->name->isPattern->throw->name->toString->new->IllegalArgumentException->new->RuntimeOperationsException->lock->writeLock->lock->try->if->dom->equals->domainTb->containsKey->throw->new->IllegalArgumentException->new->RuntimeOperationsException->moiTb->domainTb->get->if->addNewDomMoi->return->else->cstr->name->getCanonicalKeyPropertyListString->elmt->moiTb->get->if->throw->name->toString->new->InstanceAlreadyExistsException->else->addMoiToTb->catch->finally->lock->writeLock->unlock
Repository#contains(ObjectName):::Checks whether an MBean of the name specified is already stored in the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->lock->readLock->lock->try->return->retrieveNamedObject->catch->finally->lock->readLock->unlock
Repository#retrieve(ObjectName):::Retrieves the MBean of the name specified from the repository:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->lock->readLock->lock->try->no->retrieveNamedObject->if->return->else->return->no->getObject->catch->finally->lock->readLock->unlock
Repository#query(ObjectName, QueryExp):::Selects and retrieves the list of MBeans whose names match the specified object name pattern and which match the specified query expression (optionally).:::result->new->HashSet<NamedObject>->name->if->pattern->getCanonicalName->length->pattern->equals->else->lock->readLock->lock->try->if->name->isPattern->no->retrieveNamedObject->if->result->add->return->if->foreach->domainTb->values->result->moiTb->values->addAll->return->canonical_key_property_list_string->name->getCanonicalKeyPropertyListString->allNames->canonical_key_property_list_string->length->namePattern->new->ObjectNamePattern->if->name->getDomain->length->moiTb->domainTb->get->if->result->moiTb->values->addAll->else->addAllMatching->return->if->name->isDomainPattern->moiTb->domainTb->name->getDomain->get->if->return->Collections->emptySet->if->result->moiTb->values->addAll->else->addAllMatching->return->dom2Match->name->getDomain->foreach->domainTb->keySet->if->Util->wildmatch->moiTb->domainTb->get->if->result->moiTb->values->addAll->else->addAllMatching->return->catch->finally->lock->readLock->unlock
Repository#remove(ObjectName, RegistrationContext):::Removes an MBean from the repository.:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->dom->name->getDomain->intern->if->dom->length->lock->writeLock->lock->try->moiTb->domainTb->get->if->throw->name->toString->new->InstanceNotFoundException->if->moiTb->name->getCanonicalKeyPropertyListString->remove->throw->name->toString->new->InstanceNotFoundException->if->moiTb->isEmpty->domainTb->remove->if->domainTb->new->HashMap<String,NamedObject>->put->unregistering->catch->finally->lock->writeLock->unlock
Repository#getCount():::Gets the number of MBeans stored in the repository.:::return
Repository#getDefaultDomain():::Gets the name of the domain currently used by default in the repository.:::return
SunJmxMBeanServer#getMBeanInstantiator():::Return the MBeanInstantiator associated to this MBeanServer.:::
SunJmxMBeanServer#interceptorsEnabled():::Tell whether MBeanServerInterceptors are enabled on this object.:::
SunJmxMBeanServer#getMBeanServerInterceptor():::Return the MBeanServerInterceptor.:::
SunJmxMBeanServer#setMBeanServerInterceptor(MBeanServer):::Set the MBeanServerInterceptor.:::
SunJmxMBeanServer#getMBeanServerDelegate():::Return the MBeanServerDelegate representing the MBeanServer:::
Util#hashCode(String[], Object[]):::Computes a descriptor hashcode from its names and values.:::hash->for->i->return
Util#wildmatch(String, String):::Match a string against a shell-style pattern:::return->str->length->pat->length->wildmatch

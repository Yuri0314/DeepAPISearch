Charset#checkName(String):::Checks that the given string is a legal charset name:::n->s->length->if->throw->new->IllegalCharsetNameException->for->i
Charset#cache(String, Charset)::: charset cache:::new->ObjectArr
Charset#providers()::: charset providers:::return->new->Iterator<>
Charset#lookupViaProviders(String)::: charset lookup via providers:::if->VM->isBooted->return->if->gate->get->return->try->gate->set->return->AccessController->new->PrivilegedAction<>->doPrivileged->catch->finally->gate->set
Charset.ExtendedProviderHolder#extendedProviders()::: extended provider holder extended providers:::return->AccessController->new->PrivilegedAction<>->doPrivileged
Charset#lookupExtendedCharset(String)::: charset lookup extended charset:::if->VM->isBooted->return->ecps->foreach->cs->cp->charsetForName->if->return->return
Charset#lookup(String)::: charset lookup:::if->throw->new->IllegalArgumentException->a->if->charsetName->equals->return->return->lookup2
Charset#lookup2(String)::: charset lookup2:::a->if->charsetName->equals->return->cs->if->standardProvider->charsetForName->lookupExtendedCharset->lookupViaProviders->cache->return->checkName->return
Charset#isSupported(String):::Tells whether the named charset is supported.:::return->lookup
Charset#forName(String):::Returns a charset object for the named charset.:::cs->lookup->if->return->throw->new->UnsupportedCharsetException
Charset#put(Iterator, Map)::: charset put:::while->i->hasNext->cs->i->next->if->m->cs->name->containsKey->m->cs->name->put
Charset#availableCharsets():::Constructs a sorted map from canonical charset names to charset objects:::return->AccessController->new->PrivilegedAction<>->doPrivileged
Charset#defaultCharset():::Returns the default charset of this Java virtual machine:::if->synchronized->csn->GetPropertyAction->privilegedGetProperty->cs->lookup->if->else->return
Charset#name():::Returns this charset's canonical name.:::return
Charset#aliases():::Returns a set containing this charset's aliases.:::if->return->n->hs->new->HashSet<>->for->i->Collections->unmodifiableSet->return
Charset#displayName():::Returns this charset's human-readable name for the default locale:::return
Charset#isRegistered():::Tells whether or not this charset is registered in the IANA Charset Registry.:::return->name->startsWith->name->startsWith
Charset#displayName(Locale):::Returns this charset's human-readable name for the given locale:::return
Charset#contains(Charset):::Tells whether or not this charset contains the given charset:::
Charset#newDecoder():::Constructs a new decoder for this charset.:::
Charset#newEncoder():::Constructs a new encoder for this charset.:::
Charset#canEncode():::Tells whether or not this charset supports encoding:::return
Charset#decode(ByteBuffer):::Convenience method that decodes bytes in this charset into Unicode characters:::try->return->ThreadLocalCoders->decoderFor->onMalformedInput->onUnmappableCharacter->decode->catch->throw->new->Error->finally
Charset#encode(CharBuffer):::Convenience method that encodes Unicode characters into bytes in this charset:::try->return->ThreadLocalCoders->encoderFor->onMalformedInput->onUnmappableCharacter->encode->catch->throw->new->Error->finally
Charset#encode(String):::Convenience method that encodes a string into bytes in this charset:::return->CharBuffer->wrap->encode
Charset#compareTo(Charset):::Compares this charset to another:::return->name->that->name->compareToIgnoreCase
Charset#hashCode():::Computes a hashcode for this charset.:::return->name->hashCode
Charset#equals(Object):::Tells whether or not this object is equal to another:::if->return->if->return->return->name->name->equals
Charset#toString():::Returns a string describing this charset.:::return->name
CharsetDecoder#charset():::Returns the charset that created this decoder.:::return
CharsetDecoder#replacement():::Returns this decoder's replacement value.:::return
CharsetDecoder#replaceWith(String):::Changes this decoder's replacement value:::if->throw->new->IllegalArgumentException->len->newReplacement->length->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->implReplaceWith->return
CharsetDecoder#implReplaceWith(String):::Reports a change to this decoder's replacement value:::
CharsetDecoder#malformedInputAction():::Returns this decoder's current action for malformed-input errors.:::return
CharsetDecoder#onMalformedInput(CodingErrorAction):::Changes this decoder's action for malformed-input errors:::if->throw->new->IllegalArgumentException->implOnMalformedInput->return
CharsetDecoder#implOnMalformedInput(CodingErrorAction):::Reports a change to this decoder's malformed-input action:::
CharsetDecoder#unmappableCharacterAction():::Returns this decoder's current action for unmappable-character errors.:::return
CharsetDecoder#onUnmappableCharacter(CodingErrorAction):::Changes this decoder's action for unmappable-character errors:::if->throw->new->IllegalArgumentException->implOnUnmappableCharacter->return
CharsetDecoder#implOnUnmappableCharacter(CodingErrorAction):::Reports a change to this decoder's unmappable-character action:::
CharsetDecoder#averageCharsPerByte():::Returns the average number of characters that will be produced for each byte of input:::return
CharsetDecoder#maxCharsPerByte():::Returns the maximum number of characters that will be produced for each byte of input:::return
CharsetDecoder#decode(ByteBuffer, CharBuffer, boolean):::Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer:::newState->if->throwIllegalStateException->for
CharsetDecoder#flush(CharBuffer):::Flushes this decoder:::if->cr->implFlush->if->cr->isUnderflow->return->if->throwIllegalStateException->return
CharsetDecoder#implFlush(CharBuffer):::Flushes this decoder:::return
CharsetDecoder#reset():::Resets this decoder, clearing any internal state:::implReset->return
CharsetDecoder#implReset():::Resets this decoder, clearing any charset-specific internal state:::
CharsetDecoder#decodeLoop(ByteBuffer, CharBuffer):::Decodes one or more bytes into one or more characters:::
CharsetDecoder#decode(ByteBuffer):::Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer:::n->in->remaining->averageCharsPerByte->out->CharBuffer->allocate->if->in->remaining->return->reset->for->out->flip->return
CharsetDecoder#isAutoDetecting():::Tells whether or not this decoder implements an auto-detecting charset:::return
CharsetDecoder#isCharsetDetected():::Tells whether or not this decoder has yet detected a charset&nbsp;&nbsp;(optional operation):::throw->new->UnsupportedOperationException
CharsetDecoder#detectedCharset():::Retrieves the charset that was detected by this decoder&nbsp;&nbsp;(optional operation):::throw->new->UnsupportedOperationException
CharsetDecoder#throwIllegalStateException(int, int)::: charset decoder throw illegal state exception:::throw->new->IllegalStateException
CharsetEncoder#charset():::Returns the charset that created this encoder.:::return
CharsetEncoder#replacement():::Returns this encoder's replacement value.:::return->Arrays->copyOf
CharsetEncoder#replaceWith(byte[]):::Changes this encoder's replacement value:::if->throw->new->IllegalArgumentException->len->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->isLegalReplacement->throw->new->IllegalArgumentException->Arrays->copyOf->implReplaceWith->return
CharsetEncoder#implReplaceWith(byte[]):::Reports a change to this encoder's replacement value:::
CharsetEncoder#isLegalReplacement(byte[]):::Tells whether or not the given byte array is a legal replacement value for this encoder:::wr->dec->if->wr->get->charset->newDecoder->dec->onMalformedInput->dec->onUnmappableCharacter->new->WeakReference<CharsetDecoder>->else->dec->reset->bb->ByteBuffer->wrap->cb->CharBuffer->bb->remaining->dec->maxCharsPerByte->allocate->cr->dec->decode->return->cr->isError
CharsetEncoder#malformedInputAction():::Returns this encoder's current action for malformed-input errors.:::return
CharsetEncoder#onMalformedInput(CodingErrorAction):::Changes this encoder's action for malformed-input errors:::if->throw->new->IllegalArgumentException->implOnMalformedInput->return
CharsetEncoder#implOnMalformedInput(CodingErrorAction):::Reports a change to this encoder's malformed-input action:::
CharsetEncoder#unmappableCharacterAction():::Returns this encoder's current action for unmappable-character errors.:::return
CharsetEncoder#onUnmappableCharacter(CodingErrorAction):::Changes this encoder's action for unmappable-character errors:::if->throw->new->IllegalArgumentException->implOnUnmappableCharacter->return
CharsetEncoder#implOnUnmappableCharacter(CodingErrorAction):::Reports a change to this encoder's unmappable-character action:::
CharsetEncoder#averageBytesPerChar():::Returns the average number of bytes that will be produced for each character of input:::return
CharsetEncoder#maxBytesPerChar():::Returns the maximum number of bytes that will be produced for each character of input:::return
CharsetEncoder#encode(CharBuffer, ByteBuffer, boolean):::Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer:::newState->if->throwIllegalStateException->for
CharsetEncoder#flush(ByteBuffer):::Flushes this encoder:::if->cr->implFlush->if->cr->isUnderflow->return->if->throwIllegalStateException->return
CharsetEncoder#implFlush(ByteBuffer):::Flushes this encoder:::return
CharsetEncoder#reset():::Resets this encoder, clearing any internal state:::implReset->return
CharsetEncoder#implReset():::Resets this encoder, clearing any charset-specific internal state:::
CharsetEncoder#encodeLoop(CharBuffer, ByteBuffer):::Encodes one or more characters into one or more bytes:::
CharsetEncoder#encode(CharBuffer):::Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer:::n->in->remaining->averageBytesPerChar->out->ByteBuffer->allocate->if->in->remaining->return->reset->for->out->flip->return
CharsetEncoder#canEncode(CharBuffer)::: charset encoder can encode:::if->reset->else->if->throwIllegalStateException->ma->malformedInputAction->ua->unmappableCharacterAction->try->onMalformedInput->onUnmappableCharacter->encode->catch->return->finally->onMalformedInput->onUnmappableCharacter->reset->return
CharsetEncoder#canEncode(char):::Tells whether or not this encoder can encode the given character:::cb->CharBuffer->allocate->cb->put->cb->flip->return->canEncode
CharsetEncoder#canEncode(CharSequence):::Tells whether or not this encoder can encode the given character sequence:::cb->if->duplicate->else->CharBuffer->cs->toString->wrap->return->canEncode
CharsetEncoder#throwIllegalStateException(int, int)::: charset encoder throw illegal state exception:::throw->new->IllegalStateException
CoderResult#toString():::Returns a string describing this coder result.:::nm->return->isError
CoderResult#isUnderflow():::Tells whether or not this object describes an underflow condition.:::return
CoderResult#isOverflow():::Tells whether or not this object describes an overflow condition.:::return
CoderResult#isError():::Tells whether or not this object describes an error condition.:::return
CoderResult#isMalformed():::Tells whether or not this object describes a malformed-input error.:::return
CoderResult#isUnmappable():::Tells whether or not this object describes an unmappable-character error.:::return
CoderResult#length():::Returns the length of the erroneous input described by this object&nbsp;&nbsp;(optional operation).:::if->isError->throw->new->UnsupportedOperationException->return
CoderResult#malformedForLength(int):::Static factory method that returns the unique object describing a malformed-input error of the given length.:::if->throw->new->IllegalArgumentException->if->return->return->new->CoderResult->computeIfAbsent
CoderResult#unmappableForLength(int):::Static factory method that returns the unique result object describing an unmappable-character error of the given length.:::if->throw->new->IllegalArgumentException->if->return->return->new->CoderResult->computeIfAbsent
CoderResult#throwException():::Throws an exception appropriate to the result described by this object.:::switch->throw->new->BufferUnderflowException->throw->new->BufferOverflowException->throw->new->MalformedInputException->throw->new->UnmappableCharacterException
CodingErrorAction#toString():::Returns a string describing this action.:::return
IllegalCharsetNameException#getCharsetName():::Retrieves the illegal charset name.:::return
MalformedInputException#getInputLength():::Returns the length of the input.:::return
MalformedInputException#getMessage():::Returns the message.:::return
UnmappableCharacterException#getInputLength():::Returns the length of the input.:::return
UnmappableCharacterException#getMessage():::Returns the message.:::return
UnsupportedCharsetException#getCharsetName():::Retrieves the name of the unsupported charset.:::return

BufferedInputStream#read():::See the general contract of the read method of InputStream.
BufferedInputStream#read(byte[], int, int):::Reads bytes from this byte-input stream into the specified byte array, starting at the given offset
BufferedInputStream#skip(long):::See the general contract of the skip method of InputStream.
BufferedInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
BufferedInputStream#mark(int):::See the general contract of the mark method of InputStream.
BufferedInputStream#reset():::See the general contract of the reset method of InputStream
BufferedInputStream#markSupported():::Tests if this input stream supports the mark and reset methods
BufferedInputStream#close():::Closes this input stream and releases any system resources associated with the stream
BufferedOutputStream#write(int):::Writes the specified byte to this buffered output stream.
BufferedOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this buffered output stream
BufferedOutputStream#flush():::Flushes this buffered output stream
BufferedReader#read():::Reads a single character.
BufferedReader#read(char[], int, int):::Reads characters into a portion of an array
BufferedReader#readLine(boolean):::Reads a line of text
BufferedReader#readLine():::Reads a line of text
BufferedReader#skip(long):::Skips characters.
BufferedReader#ready():::Tells whether this stream is ready to be read
BufferedReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.
BufferedReader#mark(int):::Marks the present position in the stream
BufferedReader#reset():::Resets the stream to the most recent mark.
BufferedReader#lines():::Returns a Stream, the elements of which are lines read from this BufferedReader
BufferedWriter#flushBuffer():::Flushes the output buffer to the underlying character stream, without flushing the stream itself
BufferedWriter#write(int):::Writes a single character.
BufferedWriter#write(char[], int, int):::Writes a portion of an array of characters
BufferedWriter#write(String, int, int):::Writes a portion of a String.
BufferedWriter#newLine():::Writes a line separator
BufferedWriter#flush():::Flushes the stream.
ByteArrayInputStream#read():::Reads the next byte of data from this input stream
ByteArrayInputStream#read(byte[], int, int):::Reads up to len bytes of data into an array of bytes from this input stream
ByteArrayInputStream#skip(long):::Skips n bytes of input from this input stream
ByteArrayInputStream#available():::Returns the number of remaining bytes that can be read (or skipped over) from this input stream
ByteArrayInputStream#markSupported():::Tests if this InputStream supports mark/reset
ByteArrayInputStream#mark(int):::Set the current marked position in the stream
ByteArrayInputStream#reset():::Resets the buffer to the marked position
ByteArrayInputStream#close():::Closing a ByteArrayInputStream has no effect
ByteArrayOutputStream#write(int):::Writes the specified byte to this ByteArrayOutputStream.
ByteArrayOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this ByteArrayOutputStream.
ByteArrayOutputStream#writeBytes(byte[]):::Writes the complete contents of the specified byte array to this ByteArrayOutputStream.
ByteArrayOutputStream#writeTo(OutputStream):::Writes the complete contents of this ByteArrayOutputStream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).
ByteArrayOutputStream#reset():::Resets the count field of this ByteArrayOutputStream to zero, so that all currently accumulated output in the output stream is discarded
ByteArrayOutputStream#toByteArray():::Creates a newly allocated byte array
ByteArrayOutputStream#size():::Returns the current size of the buffer.
ByteArrayOutputStream#toString():::Converts the buffer's contents into a string decoding bytes using the platform's default character set
ByteArrayOutputStream#toString(String):::Converts the buffer's contents into a string by decoding the bytes using the named java.nio.charset.Charset charset
ByteArrayOutputStream#toString(Charset):::Converts the buffer's contents into a string by decoding the bytes using the specified java.nio.charset.Charset charset
ByteArrayOutputStream#toString(int):::Creates a newly allocated string
ByteArrayOutputStream#close():::Closing a ByteArrayOutputStream has no effect
CharArrayReader#read():::Reads a single character.
CharArrayReader#read(char[], int, int):::Reads characters into a portion of an array.
CharArrayReader#skip(long):::Skips characters
CharArrayReader#ready():::Tells whether this stream is ready to be read
CharArrayReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.
CharArrayReader#mark(int):::Marks the present position in the stream
CharArrayReader#reset():::Resets the stream to the most recent mark, or to the beginning if it has never been marked.
CharArrayReader#close():::Closes the stream and releases any system resources associated with it
CharArrayWriter#write(int):::Writes a character to the buffer.
CharArrayWriter#write(char[], int, int):::Writes characters to the buffer.
CharArrayWriter#write(String, int, int):::Write a portion of a string to the buffer.
CharArrayWriter#writeTo(Writer):::Writes the contents of the buffer to another character stream.
CharArrayWriter#append(CharSequence):::Appends the specified character sequence to this writer
CharArrayWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer
CharArrayWriter#append(char):::Appends the specified character to this writer
CharArrayWriter#reset():::Resets the buffer so that you can use it again without throwing away the already allocated buffer.
CharArrayWriter#toCharArray():::Returns a copy of the input data.
CharArrayWriter#size():::Returns the current size of the buffer.
CharArrayWriter#toString():::Converts input data to a string.
CharArrayWriter#flush():::Flush the stream.
CharArrayWriter#close():::Close the stream
Closeable#close():::Closes this stream and releases any system resources associated with it
Console#writer():::Retrieves the unique java.io.PrintWriter PrintWriter object associated with this console.
Console#reader():::Retrieves the unique java.io.Reader Reader object associated with this console
Console#format(String, Object...):::Writes a formatted string to this console's output stream using the specified format string and arguments.
Console#printf(String, Object...):::A convenience method to write a formatted string to this console's output stream using the specified format string and arguments
Console#readLine(String, Object...):::Provides a formatted prompt, then reads a single line of text from the console.
Console#readLine():::Reads a single line of text from the console.
Console#readPassword(String, Object...):::Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.
Console#readPassword():::Reads a password or passphrase from the console with echoing disabled
Console#flush():::Flushes the console and forces any buffered output to be written immediately .
DataInput#readFully(byte[]):::Reads some bytes from an input stream and stores them into the buffer array b
DataInput#readFully(byte[], int, int):::Reads len bytes from an input stream
DataInput#skipBytes(int):::Makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes
DataInput#readBoolean():::Reads one input byte and returns true if that byte is nonzero, false if that byte is zero
DataInput#readByte():::Reads and returns one input byte
DataInput#readUnsignedByte():::Reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255
DataInput#readShort():::Reads two input bytes and returns a short value
DataInput#readUnsignedShort():::Reads two input bytes and returns an int value in the range 0 through 65535
DataInput#readChar():::Reads two input bytes and returns a char value
DataInput#readInt():::Reads four input bytes and returns an int value
DataInput#readLong():::Reads eight input bytes and returns a long value
DataInput#readFloat():::Reads four input bytes and returns a float value
DataInput#readDouble():::Reads eight input bytes and returns a double value
DataInput#readLine():::Reads the next line of text from the input stream
DataInput#readUTF():::Reads in a string that has been encoded using a modified UTF-8 format
DataInputStream#read(byte[]):::Reads some number of bytes from the contained input stream and stores them into the buffer array b
DataInputStream#read(byte[], int, int):::Reads up to len bytes of data from the contained input stream into an array of bytes
DataInputStream#readFully(byte[]):::See the general contract of the readFully method of DataInput
DataInputStream#readFully(byte[], int, int):::See the general contract of the readFully method of DataInput
DataInputStream#skipBytes(int):::See the general contract of the skipBytes method of DataInput
DataInputStream#readBoolean():::See the general contract of the readBoolean method of DataInput
DataInputStream#readByte():::See the general contract of the readByte method of DataInput
DataInputStream#readUnsignedByte():::See the general contract of the readUnsignedByte method of DataInput
DataInputStream#readShort():::See the general contract of the readShort method of DataInput
DataInputStream#readUnsignedShort():::See the general contract of the readUnsignedShort method of DataInput
DataInputStream#readChar():::See the general contract of the readChar method of DataInput
DataInputStream#readInt():::See the general contract of the readInt method of DataInput
DataInputStream#readLong():::See the general contract of the readLong method of DataInput
DataInputStream#readFloat():::See the general contract of the readFloat method of DataInput
DataInputStream#readDouble():::See the general contract of the readDouble method of DataInput
DataInputStream#readLine():::See the general contract of the readLine method of DataInput
DataInputStream#readUTF():::See the general contract of the readUTF method of DataInput
DataInputStream#readUTF(DataInput):::Reads from the stream in a representation of a Unicode  character string encoded in modified UTF-8 format; this string of characters is then returned as a String
DataOutput#write(int):::Writes to the output stream the eight low-order bits of the argument b
DataOutput#write(byte[]):::Writes to the output stream all the bytes in array b
DataOutput#write(byte[], int, int):::Writes len bytes from array b, in order,  to the output stream
DataOutput#writeBoolean(boolean):::Writes a boolean value to this output stream
DataOutput#writeByte(int):::Writes to the output stream the eight low- order bits of the argument v
DataOutput#writeShort(int):::Writes two bytes to the output stream to represent the value of the argument
DataOutput#writeChar(int):::Writes a char value, which is comprised of two bytes, to the output stream
DataOutput#writeInt(int):::Writes an int value, which is comprised of four bytes, to the output stream
DataOutput#writeLong(long):::Writes a long value, which is comprised of eight bytes, to the output stream
DataOutput#writeFloat(float):::Writes a float value, which is comprised of four bytes, to the output stream
DataOutput#writeDouble(double):::Writes a double value, which is comprised of eight bytes, to the output stream
DataOutput#writeBytes(String):::Writes a string to the output stream
DataOutput#writeChars(String):::Writes every character in the string s, to the output stream, in order, two bytes per character
DataOutput#writeUTF(String):::Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of  every character in the string s
DataOutputStream#write(int):::Writes the specified byte (the low eight bits of the argument b) to the underlying output stream
DataOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to the underlying output stream
DataOutputStream#flush():::Flushes this data output stream
DataOutputStream#writeBoolean(boolean):::Writes a boolean to the underlying output stream as a 1-byte value
DataOutputStream#writeByte(int):::Writes out a byte to the underlying output stream as a 1-byte value
DataOutputStream#writeShort(int):::Writes a short to the underlying output stream as two bytes, high byte first
DataOutputStream#writeChar(int):::Writes a char to the underlying output stream as a 2-byte value, high byte first
DataOutputStream#writeInt(int):::Writes an int to the underlying output stream as four bytes, high byte first
DataOutputStream#writeLong(long):::Writes a long to the underlying output stream as eight bytes, high byte first
DataOutputStream#writeFloat(float):::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first
DataOutputStream#writeDouble(double):::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first
DataOutputStream#writeBytes(String):::Writes out the string to the underlying output stream as a sequence of bytes
DataOutputStream#writeChars(String):::Writes a string to the underlying output stream as a sequence of characters
DataOutputStream#writeUTF(String):::Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner
DataOutputStream#writeUTF(String, DataOutput):::Writes a string to the specified DataOutput using modified UTF-8 encoding in a machine-independent manner
DataOutputStream#size():::Returns the current value of the counter written, the number of bytes written to this data output stream so far
DefaultFileSystem#getFileSystem():::Return the FileSystem object for Windows platform.
Externalizable#writeExternal(ObjectOutput):::The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays.
Externalizable#readExternal(ObjectInput):::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays
File#isInvalid():::Check if the file has an invalid path
File#getPrefixLength():::Returns the length of this abstract pathname's prefix
File#getName():::Returns the name of the file or directory denoted by this abstract pathname
File#getParent():::Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory
File#getParentFile():::Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory
File#getPath():::Converts this abstract pathname into a pathname string
File#isAbsolute():::Tests whether this abstract pathname is absolute
File#getAbsolutePath():::Returns the absolute pathname string of this abstract pathname
File#getAbsoluteFile():::Returns the absolute form of this abstract pathname
File#getCanonicalPath():::Returns the canonical pathname string of this abstract pathname
File#getCanonicalFile():::Returns the canonical form of this abstract pathname
File#toURL():::Converts this abstract pathname into a file: URL
File#toURI():::Constructs a file: URI that represents this abstract pathname
File#canRead():::Tests whether the application can read the file denoted by this abstract pathname
File#canWrite():::Tests whether the application can modify the file denoted by this abstract pathname
File#exists():::Tests whether the file or directory denoted by this abstract pathname exists.
File#isDirectory():::Tests whether the file denoted by this abstract pathname is a directory
File#isFile():::Tests whether the file denoted by this abstract pathname is a normal file
File#isHidden():::Tests whether the file named by this abstract pathname is a hidden file
File#lastModified():::Returns the time that the file denoted by this abstract pathname was last modified.
File#length():::Returns the length of the file denoted by this abstract pathname
File#createNewFile():::Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist
File#delete():::Deletes the file or directory denoted by this abstract pathname
File#deleteOnExit():::Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates
File#list():::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname
File#list(FilenameFilter):::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
File#listFiles():::Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname
File#listFiles(FilenameFilter):::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
File#listFiles(FileFilter):::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
File#mkdir():::Creates the directory named by this abstract pathname.
File#mkdirs():::Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories
File#renameTo(File):::Renames the file denoted by this abstract pathname
File#setLastModified(long):::Sets the last-modified time of the file or directory named by this abstract pathname
File#setReadOnly():::Marks the file or directory named by this abstract pathname so that only read operations are allowed
File#setWritable(boolean, boolean):::Sets the owner's or everybody's write permission for this abstract pathname
File#setWritable(boolean):::A convenience method to set the owner's write permission for this abstract pathname
File#setReadable(boolean, boolean):::Sets the owner's or everybody's read permission for this abstract pathname
File#setReadable(boolean):::A convenience method to set the owner's read permission for this abstract pathname
File#setExecutable(boolean, boolean):::Sets the owner's or everybody's execute permission for this abstract pathname
File#setExecutable(boolean):::A convenience method to set the owner's execute permission for this abstract pathname
File#canExecute():::Tests whether the application can execute the file denoted by this abstract pathname
File#listRoots():::List the available filesystem roots
File#getTotalSpace():::Returns the size of the partition named by this abstract pathname.
File#getFreeSpace():::Returns the number of unallocated bytes in the partition named by this abstract path name
File#getUsableSpace():::Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname
File#createTempFile(String, String, File)::: Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
File#createTempFile(String, String):::Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
File#compareTo(File):::Compares two abstract pathnames lexicographically
File#equals(Object):::Tests this abstract pathname for equality with the given object
File#hashCode():::Computes a hash code for this abstract pathname
File#toString():::Returns the pathname string of this abstract pathname
File#toPath():::Returns a Path java.nio.file.Path object constructed from this abstract path
FileCleanable#register(FileDescriptor):::Register a Cleanable with the FileDescriptor if the FileDescriptor is non-null and valid.
FileCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.
FileCleanable#performCleanup():::Close the native handle or fd.
FileDescriptor#valid():::Tests if this file descriptor object is valid.
FileDescriptor#sync():::Force all system buffers to synchronize with the underlying device
FileDescriptor#set(int):::Set the fd
FileDescriptor#setHandle(long):::Set the handle
FileDescriptor#registerCleanup(PhantomCleanable):::Register a cleanup for the current handle
FileDescriptor#unregisterCleanup():::Unregister a cleanup for the current raw fd or handle
FileDescriptor#close():::Close the raw file descriptor or handle, if it has not already been closed
FileDescriptor#attach(Closeable):::Attach a Closeable to this FD for tracking
FileDescriptor#closeAll(Closeable):::Cycle through all Closeables sharing this FD and call close() on each one
FileFilter#accept(File):::Tests whether or not the specified abstract pathname should be included in a pathname list.
FileInputStream#read():::Reads a byte of data from this input stream
FileInputStream#read(byte[]):::Reads up to b.length bytes of data from this input stream into an array of bytes
FileInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
FileInputStream#skip(long):::Skips over and discards n bytes of data from the input stream
FileInputStream#available():::Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
FileInputStream#close():::Closes this file input stream and releases any system resources associated with the stream
FileInputStream#getFD():::Returns the FileDescriptor object  that represents the connection to the actual file in the file system being used by this FileInputStream.
FileInputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream
FileInputStream#finalize():::Ensures that the #close method of this file input stream is called when there are no more references to it
FilenameFilter#accept(File, String):::Tests if a specified file should be included in a file list.
FileOutputStream#write(int):::Writes the specified byte to this file output stream
FileOutputStream#write(byte[]):::Writes b.length bytes from the specified byte array to this file output stream.
FileOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this file output stream.
FileOutputStream#close():::Closes this file output stream and releases any system resources associated with this stream
FileOutputStream#getFD():::Returns the file descriptor associated with this stream.
FileOutputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream
FileOutputStream#finalize():::Cleans up the connection to the file, and ensures that the #close method of this file output stream is called when there are no more references to this stream
FilePermission#implies(Permission):::Checks if this FilePermission object "implies" the specified permission
FilePermission#impliesIgnoreMask(FilePermission):::Checks if the Permission's actions are a proper subset of the this object's actions
FilePermission#equals(Object):::Checks two FilePermission objects for equality
FilePermission#hashCode():::Returns the hash code value for this object.
FilePermission#getMask():::Return the current action mask
FilePermission#getActions():::Returns the "canonical string representation" of the actions
FilePermission#newPermissionCollection():::Returns a new PermissionCollection object for storing FilePermission objects
FilePermission#withNewActions(int):::Create a cloned FilePermission with a different actions.
FilePermissionCollection#add(Permission):::Adds a permission to the FilePermissionCollection
FilePermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
FilePermissionCollection#elements():::Returns an enumeration of all the FilePermission objects in the container.
FileSystem#getSeparator():::Return the local filesystem's name-separator character.
FileSystem#getPathSeparator():::Return the local filesystem's path-separator character.
FileSystem#normalize(String):::Convert the given pathname string to normal form
FileSystem#prefixLength(String):::Compute the length of this pathname string's prefix
FileSystem#resolve(String, String):::Resolve the child pathname string against the parent
FileSystem#getDefaultParent():::Return the parent pathname string to be used when the parent-directory argument in one of the two-argument File constructors is the empty pathname.
FileSystem#fromURIPath(String):::Post-process the given URI path string if necessary
FileSystem#isAbsolute(File):::Tell whether or not the given abstract pathname is absolute.
FileSystem#resolve(File):::Resolve the given abstract pathname into absolute form
FileSystem#getBooleanAttributes(File):::Return the simple boolean attributes for the file or directory denoted by the given abstract pathname, or zero if it does not exist or some other I/O error occurs.
FileSystem#checkAccess(File, int):::Check whether the file or directory denoted by the given abstract pathname may be accessed by this process
FileSystem#setPermission(File, int, boolean, boolean):::Set on or off the access permission (to owner only or to all) to the file or directory denoted by the given abstract pathname, based on the parameters enable, access and oweronly.
FileSystem#getLastModifiedTime(File):::Return the time at which the file or directory denoted by the given abstract pathname was last modified, or zero if it does not exist or some other I/O error occurs.
FileSystem#getLength(File):::Return the length in bytes of the file denoted by the given abstract pathname, or zero if it does not exist, is a directory, or some other I/O error occurs.
FileSystem#createFileExclusively(String):::Create a new empty file with the given pathname
FileSystem#delete(File):::Delete the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
FileSystem#list(File):::List the elements of the directory denoted by the given abstract pathname
FileSystem#createDirectory(File):::Create a new directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
FileSystem#rename(File, File):::Rename the file or directory denoted by the first abstract pathname to the second abstract pathname, returning true if and only if the operation succeeds.
FileSystem#setLastModifiedTime(File, long):::Set the last-modified time of the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
FileSystem#setReadOnly(File):::Mark the file or directory denoted by the given abstract pathname as read-only, returning true if and only if the operation succeeds.
FileSystem#listRoots():::List the available filesystem roots.
FileSystem#getNameMax(String):::Retrieve the maximum length of a component of a file path.
FileSystem#compare(File, File):::Compare two abstract pathnames lexicographically.
FileSystem#hashCode(File):::Compute the hash code of an abstract pathname.
FilterInputStream#read():::Reads the next byte of data from this input stream
FilterInputStream#read(byte[]):::Reads up to b.length bytes of data from this input stream into an array of bytes
FilterInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
FilterInputStream#skip(long):::Skips over and discards n bytes of data from the input stream
FilterInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream
FilterInputStream#close():::Closes this input stream and releases any system resources associated with the stream
FilterInputStream#mark(int):::Marks the current position in this input stream
FilterInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
FilterInputStream#markSupported():::Tests if this input stream supports the mark and reset methods
FilterOutputStream#write(int):::Writes the specified byte to this output stream
FilterOutputStream#write(byte[]):::Writes b.length bytes to this output stream
FilterOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this output stream
FilterOutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out to the stream
FilterOutputStream#close():::Closes this output stream and releases any system resources associated with the stream
FilterReader#read():::Reads a single character.
FilterReader#read(char[], int, int):::Reads characters into a portion of an array.
FilterReader#skip(long):::Skips characters.
FilterReader#ready():::Tells whether this stream is ready to be read.
FilterReader#markSupported():::Tells whether this stream supports the mark() operation.
FilterReader#mark(int):::Marks the present position in the stream.
FilterReader#reset():::Resets the stream.
FilterWriter#write(int):::Writes a single character.
FilterWriter#write(char[], int, int):::Writes a portion of an array of characters.
FilterWriter#write(String, int, int):::Writes a portion of a string.
FilterWriter#flush():::Flushes the stream.
Flushable#flush():::Flushes this stream by writing any buffered output to the underlying stream.
InputStream#nullInputStream():::Returns a new InputStream that reads no bytes
InputStream#read():::Reads the next byte of data from the input stream
InputStream#read(byte[]):::Reads some number of bytes from the input stream and stores them into the buffer array b
InputStream#read(byte[], int, int):::Reads up to len bytes of data from the input stream into an array of bytes
InputStream#readAllBytes():::Reads all remaining bytes from the input stream
InputStream#readNBytes(int):::Reads up to a specified number of bytes from the input stream
InputStream#readNBytes(byte[], int, int):::Reads the requested number of bytes from the input stream into the given byte array
InputStream#skip(long):::Skips over and discards n bytes of data from this input stream
InputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking, which may be 0, or 0 when end of stream is detected
InputStream#close():::Closes this input stream and releases any system resources associated with the stream
InputStream#mark(int):::Marks the current position in this input stream
InputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
InputStream#markSupported():::Tests if this input stream supports the mark and reset methods
InputStream#transferTo(OutputStream):::Reads all bytes from this input stream and writes the bytes to the given output stream in the order that they are read
InputStreamReader#getEncoding():::Returns the name of the character encoding being used by this stream
InputStreamReader#read():::Reads a single character.
InputStreamReader#read(char[], int, int):::Reads characters into a portion of an array.
InputStreamReader#ready():::Tells whether this stream is ready to be read
InvalidClassException#getMessage():::Produce the message and include the classname, if present.
LineNumberInputStream#read():::Reads the next byte of data from this input stream
LineNumberInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
LineNumberInputStream#skip(long):::Skips over and discards n bytes of data from this input stream
LineNumberInputStream#setLineNumber(int):::Sets the line number to the specified argument.
LineNumberInputStream#getLineNumber():::Returns the current line number.
LineNumberInputStream#available():::Returns the number of bytes that can be read from this input stream without blocking
LineNumberInputStream#mark(int):::Marks the current position in this input stream
LineNumberInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
LineNumberReader#setLineNumber(int):::Set the current line number.
LineNumberReader#getLineNumber():::Get the current line number.
LineNumberReader#read():::Read a single character
LineNumberReader#read(char[], int, int):::Read characters into a portion of an array
LineNumberReader#readLine():::Read a line of text
LineNumberReader#skip(long):::Skip characters.
LineNumberReader#mark(int):::Mark the present position in the stream
LineNumberReader#reset():::Reset the stream to the most recent mark.
ObjectInput#readObject():::Read and return an object
ObjectInput#read():::Reads a byte of data
ObjectInput#read(byte[]):::Reads into an array of bytes
ObjectInput#read(byte[], int, int):::Reads into an array of bytes
ObjectInput#skip(long):::Skips n bytes of input.
ObjectInput#available():::Returns the number of bytes that can be read without blocking.
ObjectInput#close():::Closes the input stream
ObjectInputFilter#checkInput(FilterInfo):::Check the class, array length, number of object references, depth, stream size, and other available filtering information
ObjectInputFilter.FilterInfo#serialClass():::The class of an object being deserialized
ObjectInputFilter.FilterInfo#arrayLength():::The number of array elements when deserializing an array of the class.
ObjectInputFilter.FilterInfo#depth():::The current depth
ObjectInputFilter.FilterInfo#references():::The current number of object references.
ObjectInputFilter.FilterInfo#streamBytes():::The current number of bytes consumed.
ObjectInputFilter.Config#filterLog(System.Logger.Level, String, Object...):::Logger for debugging.
ObjectInputFilter.Config#getSerialFilter():::Returns the process-wide serialization filter or null if not configured.
ObjectInputFilter.Config#setSerialFilter(ObjectInputFilter):::Set the process-wide filter if it has not already been configured or set.
ObjectInputFilter.Config#createFilter(String):::Returns an ObjectInputFilter from a string of patterns
ObjectInputFilter.Config#createFilter2(String):::Returns an ObjectInputFilter from a string of patterns that checks only the length for arrays, not the component type.
ObjectInputFilter.Config.Global#createFilter(String, boolean):::Returns an ObjectInputFilter from a string of patterns.
ObjectInputFilter.Config.Global#toString():::Returns the pattern used to create this filter.
ObjectInputStream#readObject():::Read an object from the ObjectInputStream
ObjectInputStream#readObjectOverride():::This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor
ObjectInputStream#readUnshared():::Reads an "unshared" object from the ObjectInputStream
ObjectInputStream#defaultReadObject():::Read the non-static and non-transient fields of the current class from this stream
ObjectInputStream#readFields():::Reads the persistent fields from the stream and makes them available by name.
ObjectInputStream#registerValidation(ObjectInputValidation, int):::Register an object to be validated before the graph is returned
ObjectInputStream#resolveClass(ObjectStreamClass):::Load the local class equivalent of the specified stream class description
ObjectInputStream#resolveProxyClass(String[]):::Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class
ObjectInputStream#resolveObject(Object):::This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization
ObjectInputStream#enableResolveObject(boolean):::Enables the stream to do replacement of objects read from the stream
ObjectInputStream#readStreamHeader():::The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers
ObjectInputStream#readClassDescriptor():::Read a class descriptor from the serialization stream
ObjectInputStream#read():::Reads a byte of data
ObjectInputStream#read(byte[], int, int):::Reads into an array of bytes
ObjectInputStream#available():::Returns the number of bytes that can be read without blocking.
ObjectInputStream#close():::Closes the input stream
ObjectInputStream#readBoolean():::Reads in a boolean.
ObjectInputStream#readByte():::Reads an 8 bit byte.
ObjectInputStream#readUnsignedByte():::Reads an unsigned 8 bit byte.
ObjectInputStream#readChar():::Reads a 16 bit char.
ObjectInputStream#readShort():::Reads a 16 bit short.
ObjectInputStream#readUnsignedShort():::Reads an unsigned 16 bit short.
ObjectInputStream#readInt():::Reads a 32 bit int.
ObjectInputStream#readLong():::Reads a 64 bit long.
ObjectInputStream#readFloat():::Reads a 32 bit float.
ObjectInputStream#readDouble():::Reads a 64 bit double.
ObjectInputStream#readFully(byte[]):::Reads bytes, blocking until all bytes are read.
ObjectInputStream#readFully(byte[], int, int):::Reads bytes, blocking until all bytes are read.
ObjectInputStream#skipBytes(int):::Skips bytes.
ObjectInputStream#readLine():::Reads in a line that has been terminated by a \n, \r, \r\n or EOF.
ObjectInputStream#readUTF():::Reads a String in modified UTF-8 format.
ObjectInputStream#getObjectInputFilter():::Returns the serialization filter for this stream
ObjectInputStream#setObjectInputFilter(ObjectInputFilter):::Set the serialization filter for the stream
ObjectInputStream.GetField#getObjectStreamClass():::Get the ObjectStreamClass that describes the fields in the stream.
ObjectInputStream.GetField#defaulted(String):::Return true if the named field is defaulted and has no value in this stream.
ObjectInputStream.GetField#get(String, boolean):::Get the value of the named boolean field from the persistent field.
ObjectInputStream.GetField#get(String, byte):::Get the value of the named byte field from the persistent field.
ObjectInputStream.GetField#get(String, char):::Get the value of the named char field from the persistent field.
ObjectInputStream.GetField#get(String, short):::Get the value of the named short field from the persistent field.
ObjectInputStream.GetField#get(String, int):::Get the value of the named int field from the persistent field.
ObjectInputStream.GetField#get(String, long):::Get the value of the named long field from the persistent field.
ObjectInputStream.GetField#get(String, float):::Get the value of the named float field from the persistent field.
ObjectInputStream.GetField#get(String, double):::Get the value of the named double field from the persistent field.
ObjectInputStream.GetField#get(String, Object):::Get the value of the named Object field from the persistent field.
ObjectInputStream#readTypeString():::Reads string without allowing it to be replaced in stream
ObjectInputValidation#validateObject():::Validates the object.
ObjectOutput#writeObject(Object):::Write an object to the underlying storage or stream
ObjectOutput#write(int):::Writes a byte
ObjectOutput#write(byte[]):::Writes an array of bytes
ObjectOutput#write(byte[], int, int):::Writes a sub array of bytes.
ObjectOutput#flush():::Flushes the stream
ObjectOutput#close():::Closes the stream
ObjectOutputStream#useProtocolVersion(int):::Specify stream protocol version to use when writing the stream
ObjectOutputStream#writeObject(Object):::Write the specified object to the ObjectOutputStream
ObjectOutputStream#writeObjectOverride(Object):::Method used by subclasses to override the default writeObject method
ObjectOutputStream#writeUnshared(Object):::Writes an "unshared" object to the ObjectOutputStream
ObjectOutputStream#defaultWriteObject():::Write the non-static and non-transient fields of the current class to this stream
ObjectOutputStream#putFields():::Retrieve the object used to buffer persistent fields to be written to the stream
ObjectOutputStream#writeFields():::Write the buffered fields to the stream.
ObjectOutputStream#reset():::Reset will disregard the state of any objects already written to the stream
ObjectOutputStream#annotateClass(Class):::Subclasses may implement this method to allow class data to be stored in the stream
ObjectOutputStream#annotateProxyClass(Class):::Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes
ObjectOutputStream#replaceObject(Object):::This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization
ObjectOutputStream#enableReplaceObject(boolean):::Enables the stream to do replacement of objects written to the stream
ObjectOutputStream#writeStreamHeader():::The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream
ObjectOutputStream#writeClassDescriptor(ObjectStreamClass):::Write the specified class descriptor to the ObjectOutputStream
ObjectOutputStream#write(int):::Writes a byte
ObjectOutputStream#write(byte[]):::Writes an array of bytes
ObjectOutputStream#write(byte[], int, int):::Writes a sub array of bytes.
ObjectOutputStream#flush():::Flushes the stream
ObjectOutputStream#drain():::Drain any buffered data in ObjectOutputStream
ObjectOutputStream#close():::Closes the stream
ObjectOutputStream#writeBoolean(boolean):::Writes a boolean.
ObjectOutputStream#writeByte(int):::Writes an 8 bit byte.
ObjectOutputStream#writeShort(int):::Writes a 16 bit short.
ObjectOutputStream#writeChar(int):::Writes a 16 bit char.
ObjectOutputStream#writeInt(int):::Writes a 32 bit int.
ObjectOutputStream#writeLong(long):::Writes a 64 bit long.
ObjectOutputStream#writeFloat(float):::Writes a 32 bit float.
ObjectOutputStream#writeDouble(double):::Writes a 64 bit double.
ObjectOutputStream#writeBytes(String):::Writes a String as a sequence of bytes.
ObjectOutputStream#writeChars(String):::Writes a String as a sequence of chars.
ObjectOutputStream#writeUTF(String):::Primitive data write of this String in modified UTF-8 format
ObjectOutputStream.PutField#put(String, boolean):::Put the value of the named boolean field into the persistent field.
ObjectOutputStream.PutField#put(String, byte):::Put the value of the named byte field into the persistent field.
ObjectOutputStream.PutField#put(String, char):::Put the value of the named char field into the persistent field.
ObjectOutputStream.PutField#put(String, short):::Put the value of the named short field into the persistent field.
ObjectOutputStream.PutField#put(String, int):::Put the value of the named int field into the persistent field.
ObjectOutputStream.PutField#put(String, long):::Put the value of the named long field into the persistent field.
ObjectOutputStream.PutField#put(String, float):::Put the value of the named float field into the persistent field.
ObjectOutputStream.PutField#put(String, double):::Put the value of the named double field into the persistent field.
ObjectOutputStream.PutField#put(String, Object):::Put the value of the named Object field into the persistent field.
ObjectOutputStream.PutField#write(ObjectOutput):::Write the data and fields to the specified ObjectOutput stream, which must be the same stream that produced this PutField object.
ObjectOutputStream#getProtocolVersion():::Returns protocol version in use.
ObjectOutputStream#writeTypeString(String):::Writes string without allowing it to be replaced in stream
ObjectStreamClass#lookup(Class):::Find the descriptor for a class that can be serialized
ObjectStreamClass#lookupAny(Class):::Returns the descriptor for any class, regardless of whether it implements Serializable.
ObjectStreamClass#getName():::Returns the name of the class described by this descriptor
ObjectStreamClass#getSerialVersionUID():::Return the serialVersionUID for this class
ObjectStreamClass#forClass():::Return the class in the local VM that this version is mapped to
ObjectStreamClass#getFields():::Return an array of the fields of this serializable class.
ObjectStreamClass#getField(String):::Get the field of this class by name.
ObjectStreamClass#toString():::Return a string describing this ObjectStreamClass.
ObjectStreamClass#lookup(Class, boolean):::Looks up and returns class descriptor for given class, or null if class is non-serializable and "all" is set to false.
ObjectStreamClass#initProxy(Class, ClassNotFoundException, ObjectStreamClass):::Initializes class descriptor representing a proxy class.
ObjectStreamClass#initNonProxy(ObjectStreamClass, Class, ClassNotFoundException, ObjectStreamClass):::Initializes class descriptor representing a non-proxy class.
ObjectStreamClass#readNonProxy(ObjectInputStream):::Reads non-proxy class descriptor information from given input stream
ObjectStreamClass#writeNonProxy(ObjectOutputStream):::Writes non-proxy class descriptor information to given output stream.
ObjectStreamClass#getResolveException():::Returns ClassNotFoundException (if any) thrown while attempting to resolve local class corresponding to this class descriptor.
ObjectStreamClass#checkInitialized():::Throws InvalidClassException if not initialized
ObjectStreamClass#checkDeserialize():::Throws an InvalidClassException if object instances referencing this class descriptor should not be allowed to deserialize
ObjectStreamClass#checkSerialize():::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be allowed to serialize
ObjectStreamClass#checkDefaultSerialize():::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be permitted to use default serialization (e.g., if the class declares serializable fields that do not correspond to actual fields, and hence must use the GetField API)
ObjectStreamClass#getSuperDesc():::Returns superclass descriptor
ObjectStreamClass#getLocalDesc():::Returns the "local" class descriptor for the class associated with this class descriptor (i.e., the result of ObjectStreamClass.lookup(this.forClass())) or null if there is no class associated with this descriptor.
ObjectStreamClass#getFields(boolean):::Returns arrays of ObjectStreamFields representing the serializable fields of the represented class
ObjectStreamClass#getField(String, Class):::Looks up a serializable field of the represented class by name and type
ObjectStreamClass#isProxy():::Returns true if class descriptor represents a dynamic proxy class, false otherwise.
ObjectStreamClass#isEnum():::Returns true if class descriptor represents an enum type, false otherwise.
ObjectStreamClass#isExternalizable():::Returns true if represented class implements Externalizable, false otherwise.
ObjectStreamClass#isSerializable():::Returns true if represented class implements Serializable, false otherwise.
ObjectStreamClass#hasBlockExternalData():::Returns true if class descriptor represents externalizable class that has written its data in 1.2 (block data) format, false otherwise.
ObjectStreamClass#hasWriteObjectData():::Returns true if class descriptor represents serializable (but not externalizable) class which has written its data via a custom writeObject() method, false otherwise.
ObjectStreamClass#isInstantiable():::Returns true if represented class is serializable/externalizable and can be instantiated by the serialization runtime--i.e., if it is externalizable and defines a public no-arg constructor, or if it is non-externalizable and its first non-serializable superclass defines an accessible no-arg constructor
ObjectStreamClass#hasWriteObjectMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant writeObject method
ObjectStreamClass#hasReadObjectMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObject method
ObjectStreamClass#hasReadObjectNoDataMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObjectNoData method
ObjectStreamClass#hasWriteReplaceMethod():::Returns true if represented class is serializable or externalizable and defines a conformant writeReplace method
ObjectStreamClass#hasReadResolveMethod():::Returns true if represented class is serializable or externalizable and defines a conformant readResolve method
ObjectStreamClass#newInstance():::Creates a new instance of the represented class
ObjectStreamClass#invokeWriteObject(Object, ObjectOutputStream):::Invokes the writeObject method of the represented serializable class
ObjectStreamClass#invokeReadObject(Object, ObjectInputStream):::Invokes the readObject method of the represented serializable class
ObjectStreamClass#invokeReadObjectNoData(Object):::Invokes the readObjectNoData method of the represented serializable class
ObjectStreamClass#invokeWriteReplace(Object):::Invokes the writeReplace method of the represented serializable class and returns the result
ObjectStreamClass#invokeReadResolve(Object):::Invokes the readResolve method of the represented serializable class and returns the result
ObjectStreamClass#getClassDataLayout():::Returns array of ClassDataSlot instances representing the data layout (including superclass data) for serialized objects described by this class descriptor
ObjectStreamClass#getPrimDataSize():::Returns aggregate size (in bytes) of marshalled primitive field values for represented class.
ObjectStreamClass#getNumObjFields():::Returns number of non-primitive serializable fields of represented class.
ObjectStreamClass#getPrimFieldValues(Object, byte[]):::Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset 0
ObjectStreamClass#setPrimFieldValues(Object, byte[]):::Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset 0
ObjectStreamClass#getObjFieldValues(Object, Object[]):::Fetches the serializable object field values of object obj and stores them in array vals starting at offset 0
ObjectStreamClass#checkObjFieldValueTypes(Object, Object[]):::Checks that the given values, from array vals starting at offset 0, are assignable to the given serializable object fields.
ObjectStreamClass#setObjFieldValues(Object, Object[]):::Sets the serializable object fields of object obj using values from array vals starting at offset 0
ObjectStreamClass#processQueue(ReferenceQueue>, ConcurrentMap>, ?>):::Removes from the specified map any keys that have been enqueued on the specified reference queue.
ObjectStreamClass.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.
ObjectStreamClass.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.
ObjectStreamField#getClassSignature(Class):::Returns JVM type signature for given class.
ObjectStreamField#getName():::Get the name of this field.
ObjectStreamField#getType():::Get the type of the field
ObjectStreamField#isUnshared():::Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
ObjectStreamField#toString():::Return a string that describes this field.
ObjectStreamField#getField():::Returns field represented by this ObjectStreamField, or null if ObjectStreamField is not associated with an actual field.
ObjectStreamField#getSignature():::Returns JVM type signature of field (similar to getTypeString, except that signature strings are returned for primitive fields as well).
OutputStream#nullOutputStream():::Returns a new OutputStream which discards all bytes
OutputStream#write(int):::Writes the specified byte to this output stream
OutputStream#write(byte[]):::Writes b.length bytes from the specified byte array to this output stream
OutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this output stream
OutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out
OutputStream#close():::Closes this output stream and releases any system resources associated with this stream
OutputStreamWriter#getEncoding():::Returns the name of the character encoding being used by this stream
OutputStreamWriter#flushBuffer():::Flushes the output buffer to the underlying byte stream, without flushing the byte stream itself
OutputStreamWriter#write(int):::Writes a single character.
OutputStreamWriter#write(char[], int, int):::Writes a portion of an array of characters.
OutputStreamWriter#write(String, int, int):::Writes a portion of a string.
OutputStreamWriter#flush():::Flushes the stream.
PipedInputStream#connect(PipedOutputStream):::Causes this piped input stream to be connected to the piped  output stream src
PipedInputStream#receive(int):::Receives a byte of data
PipedInputStream#receive(byte[], int, int):::Receives data into an array of bytes
PipedInputStream#receivedLast():::Notifies all waiting threads that the last byte of data has been received.
PipedInputStream#read():::Reads the next byte of data from this piped input stream
PipedInputStream#read(byte[], int, int):::Reads up to len bytes of data from this piped input stream into an array of bytes
PipedInputStream#available():::Returns the number of bytes that can be read from this input stream without blocking.
PipedInputStream#close():::Closes this piped input stream and releases any system resources associated with the stream.
PipedOutputStream#connect(PipedInputStream):::Connects this piped output stream to a receiver
PipedOutputStream#write(int):::Writes the specified byte to the piped output stream
PipedOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this piped output stream
PipedOutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out
PipedOutputStream#close():::Closes this piped output stream and releases any system resources associated with this stream
PipedReader#connect(PipedWriter):::Causes this piped reader to be connected to the piped  writer src
PipedReader#receive(int):::Receives a char of data
PipedReader#receive(char[], int, int):::Receives data into an array of characters
PipedReader#receivedLast():::Notifies all waiting threads that the last character of data has been received.
PipedReader#read():::Reads the next character of data from this piped stream
PipedReader#read(char[], int, int):::Reads up to len characters of data from this piped stream into an array of characters
PipedReader#ready():::Tell whether this stream is ready to be read
PipedReader#close():::Closes this piped stream and releases any system resources associated with the stream.
PipedWriter#connect(PipedReader):::Connects this piped writer to a receiver
PipedWriter#write(int):::Writes the specified char to the piped output stream
PipedWriter#write(char[], int, int):::Writes len characters from the specified character array starting at offset off to this piped output stream
PipedWriter#flush():::Flushes this output stream and forces any buffered output characters to be written out
PipedWriter#close():::Closes this piped output stream and releases any system resources associated with this stream
PrintStream#flush():::Flushes the stream
PrintStream#close():::Closes the stream
PrintStream#checkError():::Flushes the stream and checks its error state
PrintStream#setError():::Sets the error state of the stream to true
PrintStream#clearError():::Clears the internal error state of this stream
PrintStream#write(int):::Writes the specified byte to this stream
PrintStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this stream
PrintStream#print(boolean):::Prints a boolean value
PrintStream#print(char):::Prints a character
PrintStream#print(int):::Prints an integer
PrintStream#print(long):::Prints a long integer
PrintStream#print(float):::Prints a floating-point number
PrintStream#print(double):::Prints a double-precision floating-point number
PrintStream#print(char[]):::Prints an array of characters
PrintStream#print(String):::Prints a string
PrintStream#print(Object):::Prints an object
PrintStream#println():::Terminates the current line by writing the line separator string
PrintStream#println(boolean):::Prints a boolean and then terminate the line
PrintStream#println(char):::Prints a character and then terminate the line
PrintStream#println(int):::Prints an integer and then terminate the line
PrintStream#println(long):::Prints a long and then terminate the line
PrintStream#println(float):::Prints a float and then terminate the line
PrintStream#println(double):::Prints a double and then terminate the line
PrintStream#println(char[]):::Prints an array of characters and then terminate the line
PrintStream#println(String):::Prints a String and then terminate the line
PrintStream#println(Object):::Prints an Object and then terminate the line
PrintStream#printf(String, Object...):::A convenience method to write a formatted string to this output stream using the specified format string and arguments
PrintStream#printf(Locale, String, Object...):::A convenience method to write a formatted string to this output stream using the specified format string and arguments
PrintStream#format(String, Object...):::Writes a formatted string to this output stream using the specified format string and arguments
PrintStream#format(Locale, String, Object...):::Writes a formatted string to this output stream using the specified format string and arguments.
PrintStream#append(CharSequence):::Appends the specified character sequence to this output stream
PrintStream#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this output stream
PrintStream#append(char):::Appends the specified character to this output stream
PrintWriter#flush():::Flushes the stream.
PrintWriter#close():::Closes the stream and releases any system resources associated with it
PrintWriter#checkError():::Flushes the stream if it's not closed and checks its error state.
PrintWriter#setError():::Indicates that an error has occurred
PrintWriter#clearError():::Clears the error state of this stream
PrintWriter#write(int):::Writes a single character.
PrintWriter#write(char[], int, int):::Writes A Portion of an array of characters.
PrintWriter#write(char[]):::Writes an array of characters
PrintWriter#write(String, int, int):::Writes a portion of a string.
PrintWriter#write(String):::Writes a string
PrintWriter#print(boolean):::Prints a boolean value
PrintWriter#print(char):::Prints a character
PrintWriter#print(int):::Prints an integer
PrintWriter#print(long):::Prints a long integer
PrintWriter#print(float):::Prints a floating-point number
PrintWriter#print(double):::Prints a double-precision floating-point number
PrintWriter#print(char[]):::Prints an array of characters
PrintWriter#print(String):::Prints a string
PrintWriter#print(Object):::Prints an object
PrintWriter#println():::Terminates the current line by writing the line separator string
PrintWriter#println(boolean):::Prints a boolean value and then terminates the line
PrintWriter#println(char):::Prints a character and then terminates the line
PrintWriter#println(int):::Prints an integer and then terminates the line
PrintWriter#println(long):::Prints a long integer and then terminates the line
PrintWriter#println(float):::Prints a floating-point number and then terminates the line
PrintWriter#println(double):::Prints a double-precision floating-point number and then terminates the line
PrintWriter#println(char[]):::Prints an array of characters and then terminates the line
PrintWriter#println(String):::Prints a String and then terminates the line
PrintWriter#println(Object):::Prints an Object and then terminates the line
PrintWriter#printf(String, Object...):::A convenience method to write a formatted string to this writer using the specified format string and arguments
PrintWriter#printf(Locale, String, Object...):::A convenience method to write a formatted string to this writer using the specified format string and arguments
PrintWriter#format(String, Object...):::Writes a formatted string to this writer using the specified format string and arguments
PrintWriter#format(Locale, String, Object...):::Writes a formatted string to this writer using the specified format string and arguments
PrintWriter#append(CharSequence):::Appends the specified character sequence to this writer
PrintWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer
PrintWriter#append(char):::Appends the specified character to this writer
PushbackInputStream#read():::Reads the next byte of data from this input stream
PushbackInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
PushbackInputStream#unread(int):::Pushes back a byte by copying it to the front of the pushback buffer
PushbackInputStream#unread(byte[], int, int):::Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer
PushbackInputStream#unread(byte[]):::Pushes back an array of bytes by copying it to the front of the pushback buffer
PushbackInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
PushbackInputStream#skip(long):::Skips over and discards n bytes of data from this input stream
PushbackInputStream#markSupported():::Tests if this input stream supports the mark and reset methods, which it does not.
PushbackInputStream#mark(int):::Marks the current position in this input stream
PushbackInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
PushbackInputStream#close():::Closes this input stream and releases any system resources associated with the stream
PushbackReader#read():::Reads a single character.
PushbackReader#read(char[], int, int):::Reads characters into a portion of an array.
PushbackReader#unread(int):::Pushes back a single character by copying it to the front of the pushback buffer
PushbackReader#unread(char[], int, int):::Pushes back a portion of an array of characters by copying it to the front of the pushback buffer
PushbackReader#unread(char[]):::Pushes back an array of characters by copying it to the front of the pushback buffer
PushbackReader#ready():::Tells whether this stream is ready to be read.
PushbackReader#mark(int):::Marks the present position in the stream
PushbackReader#reset():::Resets the stream
PushbackReader#markSupported():::Tells whether this stream supports the mark() operation, which it does not.
PushbackReader#close():::Closes the stream and releases any system resources associated with it
PushbackReader#skip(long):::Skips characters
RandomAccessFile#getFD():::Returns the opaque file descriptor object associated with this stream.
RandomAccessFile#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file
RandomAccessFile#read():::Reads a byte of data from this file
RandomAccessFile#read(byte[], int, int):::Reads up to len bytes of data from this file into an array of bytes
RandomAccessFile#read(byte[]):::Reads up to b.length bytes of data from this file into an array of bytes
RandomAccessFile#readFully(byte[]):::Reads b.length bytes from this file into the byte array, starting at the current file pointer
RandomAccessFile#readFully(byte[], int, int):::Reads exactly len bytes from this file into the byte array, starting at the current file pointer
RandomAccessFile#skipBytes(int):::Attempts to skip over n bytes of input discarding the skipped bytes
RandomAccessFile#write(int):::Writes the specified byte to this file
RandomAccessFile#write(byte[]):::Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.
RandomAccessFile#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this file.
RandomAccessFile#getFilePointer():::Returns the current offset in this file.
RandomAccessFile#seek(long):::Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs
RandomAccessFile#length():::Returns the length of this file.
RandomAccessFile#setLength(long):::Sets the length of this file
RandomAccessFile#close():::Closes this random access file stream and releases any system resources associated with the stream
RandomAccessFile#readBoolean():::Reads a boolean from this file
RandomAccessFile#readByte():::Reads a signed eight-bit value from this file
RandomAccessFile#readUnsignedByte():::Reads an unsigned eight-bit number from this file
RandomAccessFile#readShort():::Reads a signed 16-bit number from this file
RandomAccessFile#readUnsignedShort():::Reads an unsigned 16-bit number from this file
RandomAccessFile#readChar():::Reads a character from this file
RandomAccessFile#readInt():::Reads a signed 32-bit integer from this file
RandomAccessFile#readLong():::Reads a signed 64-bit integer from this file
RandomAccessFile#readFloat():::Reads a float from this file
RandomAccessFile#readDouble():::Reads a double from this file
RandomAccessFile#readUTF():::Reads in a string from this file
RandomAccessFile#writeBoolean(boolean):::Writes a boolean to the file as a one-byte value
RandomAccessFile#writeByte(int):::Writes a byte to the file as a one-byte value
RandomAccessFile#writeShort(int):::Writes a short to the file as two bytes, high byte first
RandomAccessFile#writeChar(int):::Writes a char to the file as a two-byte value, high byte first
RandomAccessFile#writeInt(int):::Writes an int to the file as four bytes, high byte first
RandomAccessFile#writeLong(long):::Writes a long to the file as eight bytes, high byte first
RandomAccessFile#writeFloat(float):::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first
RandomAccessFile#writeDouble(double):::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first
RandomAccessFile#writeBytes(String):::Writes the string to the file as a sequence of bytes
RandomAccessFile#writeChars(String):::Writes a string to the file as a sequence of characters
RandomAccessFile#writeUTF(String):::Writes a string to the file using modified UTF-8 encoding in a machine-independent manner
Reader#nullReader():::Returns a new Reader that reads no characters
Reader#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer
Reader#read():::Reads a single character
Reader#read(char[]):::Reads characters into an array
Reader#read(char[], int, int):::Reads characters into a portion of an array
Reader#skip(long):::Skips characters
Reader#ready():::Tells whether this stream is ready to be read.
Reader#markSupported():::Tells whether this stream supports the mark() operation
Reader#mark(int):::Marks the present position in the stream
Reader#reset():::Resets the stream
Reader#close():::Closes the stream and releases any system resources associated with it
Reader#transferTo(Writer):::Reads all characters from this reader and writes the characters to the given writer in the order that they are read
SequenceInputStream#nextStream()::: Continues reading in the next stream if an EOF is reached.
SequenceInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream
SequenceInputStream#read():::Reads the next byte of data from this input stream
SequenceInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
SequenceInputStream#close():::Closes this input stream and releases any system resources associated with the stream
StreamTokenizer#resetSyntax():::Resets this tokenizer's syntax table so that all characters are "ordinary." See the ordinaryChar method for more information on a character being ordinary.
StreamTokenizer#wordChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are word constituents
StreamTokenizer#whitespaceChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters
StreamTokenizer#ordinaryChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are "ordinary" in this tokenizer
StreamTokenizer#ordinaryChar(int):::Specifies that the character argument is "ordinary" in this tokenizer
StreamTokenizer#commentChar(int):::Specified that the character argument starts a single-line comment
StreamTokenizer#quoteChar(int):::Specifies that matching pairs of this character delimit string constants in this tokenizer
StreamTokenizer#parseNumbers():::Specifies that numbers should be parsed by this tokenizer
StreamTokenizer#eolIsSignificant(boolean):::Determines whether or not ends of line are treated as tokens
StreamTokenizer#slashStarComments(boolean):::Determines whether or not the tokenizer recognizes C-style comments
StreamTokenizer#slashSlashComments(boolean):::Determines whether or not the tokenizer recognizes C++-style comments
StreamTokenizer#lowerCaseMode(boolean):::Determines whether or not word token are automatically lowercased
StreamTokenizer#nextToken():::Parses the next token from the input stream of this tokenizer
StreamTokenizer#pushBack():::Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.
StreamTokenizer#lineno():::Return the current line number.
StreamTokenizer#toString():::Returns the string representation of the current stream token and the line number it occurs on
StringBufferInputStream#read():::Reads the next byte of data from this input stream
StringBufferInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
StringBufferInputStream#skip(long):::Skips n bytes of input from this input stream
StringBufferInputStream#available():::Returns the number of bytes that can be read from the input stream without blocking.
StringBufferInputStream#reset():::Resets the input stream to begin reading from the first character of this input stream's underlying buffer.
StringReader#read():::Reads a single character.
StringReader#read(char[], int, int):::Reads characters into a portion of an array.
StringReader#skip(long):::Skips the specified number of characters in the stream
StringReader#ready():::Tells whether this stream is ready to be read.
StringReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.
StringReader#mark(int):::Marks the present position in the stream
StringReader#reset():::Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.
StringReader#close():::Closes the stream and releases any system resources associated with it
StringWriter#write(int):::Write a single character.
StringWriter#write(char[], int, int):::Write a portion of an array of characters.
StringWriter#write(String):::Write a string.
StringWriter#write(String, int, int):::Write a portion of a string.
StringWriter#append(CharSequence):::Appends the specified character sequence to this writer
StringWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer
StringWriter#append(char):::Appends the specified character to this writer
StringWriter#toString():::Return the buffer's current value as a string.
StringWriter#getBuffer():::Return the string buffer itself.
StringWriter#flush():::Flush the stream.
StringWriter#close():::Closing a StringWriter has no effect
UncheckedIOException#getCause():::Returns the cause of this exception.
WriteAbortedException#getMessage():::Produce the message and include the message from the nested exception, if there is one.
WriteAbortedException#getCause():::Returns the exception that terminated the operation (the cause).
Writer#nullWriter():::Returns a new Writer which discards all characters
Writer#write(int):::Writes a single character
Writer#write(char[]):::Writes an array of characters.
Writer#write(char[], int, int):::Writes a portion of an array of characters.
Writer#write(String):::Writes a string.
Writer#write(String, int, int):::Writes a portion of a string.
Writer#append(CharSequence):::Appends the specified character sequence to this writer
Writer#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer
Writer#append(char):::Appends the specified character to this writer
Writer#flush():::Flushes the stream
Writer#close():::Closes the stream, flushing it first
Annotation#equals(Object):::Returns true if the specified object represents an annotation that is logically equivalent to this one
Annotation#hashCode():::Returns the hash code of this annotation, as defined below:  The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below:  The hash code of an annotation member is (127 times the hash code of the member-name as computed by String#hashCode()) XOR the hash code of the member-value, as defined below:  The hash code of a member-value depends on its type: <ul> <li>The hash code of a primitive value v is equal to     WrapperType.valueOf(v).hashCode(), where     WrapperType is the wrapper type corresponding     to the primitive type of v (Byte,     Character, Double, Float, Integer,     Long, Short, or Boolean)
Annotation#toString():::Returns a string representation of this annotation
Annotation#annotationType():::Returns the annotation type of this annotation.
AnnotationTypeMismatchException#element():::Returns the Method object for the incorrectly typed element
AnnotationTypeMismatchException#foundType():::Returns the type of data found in the incorrectly typed element
IncompleteAnnotationException#annotationType():::Returns the Class object for the annotation type with the missing element.
IncompleteAnnotationException#elementName():::Returns the name of the missing element.
AbstractStringBuilder#compareTo(AbstractStringBuilder):::Compares the objects of two AbstractStringBuilder implementations lexicographically.
AbstractStringBuilder#length():::Returns the length (character count).
AbstractStringBuilder#capacity():::Returns the current capacity
AbstractStringBuilder#ensureCapacity(int):::Ensures that the capacity is at least equal to the specified minimum
AbstractStringBuilder#trimToSize():::Attempts to reduce storage used for the character sequence
AbstractStringBuilder#setLength(int):::Sets the length of the character sequence
AbstractStringBuilder#charAt(int):::Returns the char value in this sequence at the specified index
AbstractStringBuilder#codePointAt(int):::Returns the character (Unicode code point) at the specified index
AbstractStringBuilder#codePointBefore(int):::Returns the character (Unicode code point) before the specified index
AbstractStringBuilder#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this sequence
AbstractStringBuilder#offsetByCodePoints(int, int):::Returns the index within this sequence that is offset from the given index by codePointOffset code points
AbstractStringBuilder#getChars(int, int, char[], int):::Characters are copied from this sequence into the destination character array dst
AbstractStringBuilder#setCharAt(int, char):::The character at the specified index is set to ch
AbstractStringBuilder#append(Object):::Appends the string representation of the Object argument
AbstractStringBuilder#append(String):::Appends the specified string to this character sequence
AbstractStringBuilder#append(CharSequence, int, int):::Appends a subsequence of the specified CharSequence to this sequence
AbstractStringBuilder#append(char[]):::Appends the string representation of the char array argument to this sequence
AbstractStringBuilder#append(char[], int, int):::Appends the string representation of a subarray of the char array argument to this sequence
AbstractStringBuilder#append(boolean):::Appends the string representation of the boolean argument to the sequence
AbstractStringBuilder#append(char):::Appends the string representation of the char argument to this sequence
AbstractStringBuilder#append(int):::Appends the string representation of the int argument to this sequence
AbstractStringBuilder#append(long):::Appends the string representation of the long argument to this sequence
AbstractStringBuilder#append(float):::Appends the string representation of the float argument to this sequence
AbstractStringBuilder#append(double):::Appends the string representation of the double argument to this sequence
AbstractStringBuilder#delete(int, int):::Removes the characters in a substring of this sequence
AbstractStringBuilder#appendCodePoint(int):::Appends the string representation of the codePoint argument to this sequence
AbstractStringBuilder#deleteCharAt(int):::Removes the char at the specified position in this sequence
AbstractStringBuilder#replace(int, int, String):::Replaces the characters in a substring of this sequence with characters in the specified String
AbstractStringBuilder#substring(int):::Returns a new String that contains a subsequence of characters currently contained in this character sequence
AbstractStringBuilder#subSequence(int, int):::Returns a new character sequence that is a subsequence of this sequence
AbstractStringBuilder#substring(int, int):::Returns a new String that contains a subsequence of characters currently contained in this sequence
AbstractStringBuilder#insert(int, char[], int, int):::Inserts the string representation of a subarray of the str array argument into this sequence
AbstractStringBuilder#insert(int, Object):::Inserts the string representation of the Object argument into this character sequence
AbstractStringBuilder#insert(int, String):::Inserts the string into this character sequence
AbstractStringBuilder#insert(int, char[]):::Inserts the string representation of the char array argument into this sequence
AbstractStringBuilder#insert(int, CharSequence):::Inserts the specified CharSequence into this sequence
AbstractStringBuilder#insert(int, CharSequence, int, int):::Inserts a subsequence of the specified CharSequence into this sequence
AbstractStringBuilder#insert(int, boolean):::Inserts the string representation of the boolean argument into this sequence
AbstractStringBuilder#insert(int, char):::Inserts the string representation of the char argument into this sequence
AbstractStringBuilder#insert(int, int):::Inserts the string representation of the second int argument into this sequence
AbstractStringBuilder#insert(int, long):::Inserts the string representation of the long argument into this sequence
AbstractStringBuilder#insert(int, float):::Inserts the string representation of the float argument into this sequence
AbstractStringBuilder#insert(int, double):::Inserts the string representation of the double argument into this sequence
AbstractStringBuilder#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring
AbstractStringBuilder#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
AbstractStringBuilder#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring
AbstractStringBuilder#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index
AbstractStringBuilder#reverse():::Causes this character sequence to be replaced by the reverse of the sequence
AbstractStringBuilder#toString():::Returns a string representing the data in this sequence
AbstractStringBuilder#getValue():::Needed by String for the contentEquals method.
Appendable#append(CharSequence):::Appends the specified character sequence to this Appendable
Appendable#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this Appendable
Appendable#append(char):::Appends the specified character to this Appendable.
AutoCloseable#close():::Closes this resource, relinquishing any underlying resources
Boolean#parseBoolean(String):::Parses the string argument as a boolean
Boolean#booleanValue():::Returns the value of this Boolean object as a boolean primitive.
Boolean#valueOf(boolean):::Returns a Boolean instance representing the specified boolean value
Boolean#valueOf(String):::Returns a Boolean with a value represented by the specified string
Boolean#toString(boolean):::Returns a String object representing the specified boolean
Boolean#toString():::Returns a String object representing this Boolean's value
Boolean#hashCode():::Returns a hash code for this Boolean object.
Boolean#hashCode(boolean):::Returns a hash code for a boolean value; compatible with Boolean.hashCode().
Boolean#equals(Object):::Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.
Boolean#getBoolean(String):::Returns true if and only if the system property named by the argument exists and is equal to, ignoring case, the string "true"
Boolean#compareTo(Boolean):::Compares this Boolean instance with another.
Boolean#compare(boolean, boolean):::Compares two boolean values
Boolean#logicalAnd(boolean, boolean):::Returns the result of applying the logical AND operator to the specified boolean operands.
Boolean#logicalOr(boolean, boolean):::Returns the result of applying the logical OR operator to the specified boolean operands.
Boolean#logicalXor(boolean, boolean):::Returns the result of applying the logical XOR operator to the specified boolean operands.
Byte#toString(byte):::Returns a new String object representing the specified byte
Byte#valueOf(byte):::Returns a Byte instance representing the specified byte value
Byte#parseByte(String, int):::Parses the string argument as a signed byte in the radix specified by the second argument
Byte#parseByte(String):::Parses the string argument as a signed decimal byte
Byte#valueOf(String, int):::Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument
Byte#valueOf(String):::Returns a Byte object holding the value given by the specified String
Byte#decode(String):::Decodes a String into a Byte
Byte#byteValue():::Returns the value of this Byte as a byte.
Byte#shortValue():::Returns the value of this Byte as a short after a widening primitive conversion.
Byte#intValue():::Returns the value of this Byte as an int after a widening primitive conversion.
Byte#longValue():::Returns the value of this Byte as a long after a widening primitive conversion.
Byte#floatValue():::Returns the value of this Byte as a float after a widening primitive conversion.
Byte#doubleValue():::Returns the value of this Byte as a double after a widening primitive conversion.
Byte#toString():::Returns a String object representing this Byte's value
Byte#hashCode():::Returns a hash code for this Byte; equal to the result of invoking intValue().
Byte#hashCode(byte):::Returns a hash code for a byte value; compatible with Byte.hashCode().
Byte#equals(Object):::Compares this object to the specified object
Byte#compareTo(Byte):::Compares two Byte objects numerically.
Byte#compare(byte, byte):::Compares two byte values numerically
Byte#compareUnsigned(byte, byte):::Compares two byte values numerically treating the values as unsigned.
Byte#toUnsignedInt(byte):::Converts the argument to an int by an unsigned conversion
Byte#toUnsignedLong(byte):::Converts the argument to a long by an unsigned conversion
Character.Subset#equals(Object):::Compares two Subset objects for equality
Character.Subset#hashCode():::Returns the standard hash code as defined by the Object#hashCode method
Character.Subset#toString():::Returns the name of this subset.
Character.UnicodeBlock#of(char):::Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block
Character.UnicodeBlock#of(int):::Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block.
Character.UnicodeBlock#forName(String):::Returns the UnicodeBlock with the given name
Character#valueOf(char):::Returns a Character instance representing the specified char value
Character#charValue():::Returns the value of this Character object.
Character#hashCode():::Returns a hash code for this Character; equal to the result of invoking charValue().
Character#hashCode(char):::Returns a hash code for a char value; compatible with Character.hashCode().
Character#equals(Object):::Compares this object against the specified object
Character#toString():::Returns a String object representing this Character's value
Character#toString(char):::Returns a String object representing the specified char
Character#toString(int):::Returns a String object representing the specified character (Unicode code point)
Character#isValidCodePoint(int):::Determines whether the specified code point is a valid  Unicode code point value.
Character#isBmpCodePoint(int):::Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP)
Character#isSupplementaryCodePoint(int):::Determines whether the specified character (Unicode code point) is in the supplementary character range.
Character#isHighSurrogate(char):::Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit)
Character#isLowSurrogate(char):::Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit)
Character#isSurrogate(char):::Determines if the given char value is a Unicode surrogate code unit
Character#isSurrogatePair(char, char):::Determines whether the specified pair of char values is a valid  Unicode surrogate pair
Character#charCount(int):::Determines the number of char values needed to represent the specified character (Unicode code point)
Character#toCodePoint(char, char):::Converts the specified surrogate pair to its supplementary code point value
Character#codePointAt(CharSequence, int):::Returns the code point at the given index of the CharSequence
Character#codePointAt(char[], int):::Returns the code point at the given index of the char array
Character#codePointAt(char[], int, int):::Returns the code point at the given index of the char array, where only array elements with index less than limit can be used
Character#codePointBefore(CharSequence, int):::Returns the code point preceding the given index of the CharSequence
Character#codePointBefore(char[], int):::Returns the code point preceding the given index of the char array
Character#codePointBefore(char[], int, int):::Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used
Character#highSurrogate(int):::Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding
Character#lowSurrogate(int):::Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding
Character#toChars(int, char[], int):::Converts the specified character (Unicode code point) to its UTF-16 representation
Character#toChars(int):::Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array
Character#codePointCount(CharSequence, int, int):::Returns the number of Unicode code points in the text range of the specified char sequence
Character#codePointCount(char[], int, int):::Returns the number of Unicode code points in a subarray of the char array argument
Character#offsetByCodePoints(CharSequence, int, int):::Returns the index within the given char sequence that is offset from the given index by codePointOffset code points
Character#offsetByCodePoints(char[], int, int, int, int):::Returns the index within the given char subarray that is offset from the given index by codePointOffset code points
Character#isLowerCase(char):::Determines if the specified character is a lowercase character
Character#isLowerCase(int):::Determines if the specified character (Unicode code point) is a lowercase character
Character#isUpperCase(char):::Determines if the specified character is an uppercase character
Character#isUpperCase(int):::Determines if the specified character (Unicode code point) is an uppercase character
Character#isTitleCase(char):::Determines if the specified character is a titlecase character
Character#isTitleCase(int):::Determines if the specified character (Unicode code point) is a titlecase character
Character#isDigit(char):::Determines if the specified character is a digit
Character#isDigit(int):::Determines if the specified character (Unicode code point) is a digit
Character#isDefined(char):::Determines if a character is defined in Unicode
Character#isDefined(int):::Determines if a character (Unicode code point) is defined in Unicode
Character#isLetter(char):::Determines if the specified character is a letter
Character#isLetter(int):::Determines if the specified character (Unicode code point) is a letter
Character#isLetterOrDigit(char):::Determines if the specified character is a letter or digit
Character#isLetterOrDigit(int):::Determines if the specified character (Unicode code point) is a letter or digit
Character#isJavaLetter(char):::Determines if the specified character is permissible as the first character in a Java identifier
Character#isJavaLetterOrDigit(char):::Determines if the specified character may be part of a Java identifier as other than the first character
Character#isAlphabetic(int):::Determines if the specified character (Unicode code point) is an alphabet
Character#isIdeographic(int):::Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.
Character#isJavaIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Java identifier
Character#isJavaIdentifierStart(int):::Determines if the character (Unicode code point) is permissible as the first character in a Java identifier
Character#isJavaIdentifierPart(char):::Determines if the specified character may be part of a Java identifier as other than the first character
Character#isJavaIdentifierPart(int):::Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character
Character#isUnicodeIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Unicode identifier
Character#isUnicodeIdentifierStart(int):::Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier
Character#isUnicodeIdentifierPart(char):::Determines if the specified character may be part of a Unicode identifier as other than the first character
Character#isUnicodeIdentifierPart(int):::Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character
Character#isIdentifierIgnorable(char):::Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Character#isIdentifierIgnorable(int):::Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Character#toLowerCase(char):::Converts the character argument to lowercase using case mapping information from the UnicodeData file
Character#toLowerCase(int):::Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file
Character#toUpperCase(char):::Converts the character argument to uppercase using case mapping information from the UnicodeData file
Character#toUpperCase(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file
Character#toTitleCase(char):::Converts the character argument to titlecase using case mapping information from the UnicodeData file
Character#toTitleCase(int):::Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file
Character#digit(char, int):::Returns the numeric value of the character ch in the specified radix
Character#digit(int, int):::Returns the numeric value of the specified character (Unicode code point) in the specified radix
Character#getNumericValue(char):::Returns the int value that the specified Unicode character represents
Character#getNumericValue(int):::Returns the int value that the specified character (Unicode code point) represents
Character#isSpace(char):::Determines if the specified character is ISO-LATIN-1 white space
Character#isSpaceChar(char):::Determines if the specified character is a Unicode space character
Character#isSpaceChar(int):::Determines if the specified character (Unicode code point) is a Unicode space character
Character#isWhitespace(char):::Determines if the specified character is white space according to Java
Character#isWhitespace(int):::Determines if the specified character (Unicode code point) is white space according to Java
Character#isISOControl(char):::Determines if the specified character is an ISO control character
Character#isISOControl(int):::Determines if the referenced character (Unicode code point) is an ISO control character
Character#getType(char):::Returns a value indicating a character's general category
Character#getType(int):::Returns a value indicating a character's general category.
Character#forDigit(int, int):::Determines the character representation for a specific digit in the specified radix
Character#getDirectionality(char):::Returns the Unicode directionality property for the given character
Character#getDirectionality(int):::Returns the Unicode directionality property for the given character (Unicode code point)
Character#isMirrored(char):::Determines whether the character is mirrored according to the Unicode specification
Character#isMirrored(int):::Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification
Character#compareTo(Character):::Compares two Character objects numerically.
Character#compare(char, char):::Compares two char values numerically
Character#toUpperCaseEx(int):::Converts the character (Unicode code point) argument to uppercase using information from the UnicodeData file.
Character#toUpperCaseCharArray(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the SpecialCasing file in the Unicode specification
Character#reverseBytes(char):::Returns the value obtained by reversing the order of the bytes in the specified char value.
Character#getName(int):::Returns the Unicode name of the specified character codePoint, or null if the code point is #UNASSIGNED unassigned
Character#codePointOf(String):::Returns the code point value of the Unicode character specified by the given Unicode character name
CharacterData00#findInCharMap(int):::Finds the character in the uppercase mapping table.
CharSequence#length():::Returns the length of this character sequence
CharSequence#charAt(int):::Returns the char value at the specified index
CharSequence#subSequence(int, int):::Returns a CharSequence that is a subsequence of this sequence
CharSequence#toString():::Returns a string containing the characters in this sequence in the same order as this sequence
CharSequence#chars():::Returns a stream of int zero-extending the char values from this sequence
CharSequence#codePoints():::Returns a stream of code point values from this sequence
CharSequence#compare(CharSequence, CharSequence):::Compares two CharSequence instances lexicographically
Class#toString():::Converts the object to a string
Class#toGenericString():::Returns a string describing this Class, including information about modifiers and type parameters
Class#forName(String):::Returns the Class object associated with the class or interface with the given string name
Class#forName(String, boolean, ClassLoader):::Returns the Class object associated with the class or interface with the given string name, using the given class loader
Class#forName(Module, String):::Returns the Class with the given  binary name in the given module
Class#newInstance():::Creates a new instance of the class represented by this Class object
Class#isInstance(Object):::Determines if the specified Object is assignment-compatible with the object represented by this Class
Class#isAssignableFrom(Class):::Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter
Class#isInterface():::Determines if the specified Class object represents an interface type.
Class#isArray():::Determines if this Class object represents an array class.
Class#isPrimitive():::Determines if the specified Class object represents a primitive type
Class#isAnnotation():::Returns true if this Class object represents an annotation type
Class#isSynthetic():::Returns true if this class is a synthetic class; returns false otherwise.
Class#getName():::Returns the  name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String
Class#getClassLoader():::Returns the class loader for the class
Class#getModule():::Returns the module that this class or interface is a member of
Class#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
Class#getSuperclass():::Returns the Class representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class
Class#getGenericSuperclass():::Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class
Class#getPackage():::Gets the package of this class
Class#getPackageName():::Returns the fully qualified package name
Class#getInterfaces():::Returns the interfaces directly implemented by the class or interface represented by this object
Class#getGenericInterfaces():::Returns the Types representing the interfaces directly implemented by the class or interface represented by this object
Class#getComponentType():::Returns the Class representing the component type of an array
Class#getModifiers():::Returns the Java language modifiers for this class or interface, encoded in an integer
Class#getSigners():::Gets the signers of this class.
Class#setSigners(Object[]):::Set the signers of this class.
Class#getEnclosingMethod():::If this Class object represents a local or anonymous class within a method, returns a java.lang.reflect.Method Method object representing the immediately enclosing method of the underlying class
Class#getEnclosingConstructor():::If this Class object represents a local or anonymous class within a constructor, returns a java.lang.reflect.Constructor Constructor object representing the immediately enclosing constructor of the underlying class
Class#getDeclaringClass():::If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared
Class#getEnclosingClass():::Returns the immediately enclosing class of the underlying class
Class#getSimpleName():::Returns the simple name of the underlying class as given in the source code
Class#getTypeName():::Return an informative string for the name of this type.
Class#getCanonicalName():::Returns the canonical name of the underlying class as defined by the Java Language Specification
Class#isAnonymousClass():::Returns true if and only if the underlying class is an anonymous class.
Class#isLocalClass():::Returns true if and only if the underlying class is a local class.
Class#isMemberClass():::Returns true if and only if the underlying class is a member class.
Class#getClasses():::Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object
Class#getFields():::Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object
Class#getMethods():::Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces
Class#getConstructors():::Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object
Class#getField(String):::Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object
Class#getMethod(String, Class...):::Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object
Class#getConstructor(Class...):::Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object
Class#getDeclaredClasses():::Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object
Class#getDeclaredFields():::Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object
Class#getDeclaredMethods():::Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods
Class#getDeclaredConstructors():::Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object
Class#getDeclaredField(String):::Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object
Class#getDeclaredMethod(String, Class...):::Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object
Class#getDeclaredPublicMethods(String, Class...):::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.
Class#getDeclaredConstructor(Class...):::Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object
Class#getResourceAsStream(String):::Finds a resource with a given name
Class#getResource(String):::Finds a resource with a given name
Class#getProtectionDomain():::Returns the ProtectionDomain of this class
Class#desiredAssertionStatus():::Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked
Class#isEnum():::Returns true if and only if this class was declared as an enum in the source code.
Class#getEnumConstants():::Returns the elements of this enum class or null if this Class object does not represent an enum type.
Class#getEnumConstantsShared():::Returns the elements of this enum class or null if this Class object does not represent an enum type; identical to getEnumConstants except that the result is uncloned, cached, and shared by all callers.
Class#enumConstantDirectory():::Returns a map from simple name to enum constant
Class#cast(Object):::Casts an object to the class or interface represented by this Class object.
Class#asSubclass(Class):::Casts this Class object to represent a subclass of the class represented by the specified class object
Class#getAnnotatedSuperclass():::Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object
Class#getAnnotatedInterfaces():::Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object
Class#getNestHost():::Returns the nest host of the nest to which the class or interface represented by this Class object belongs
Class#isNestmateOf(Class):::Determines if the given Class is a nestmate of the class or interface represented by this Class object
Class#getNestMembers():::Returns an array containing Class objects representing all the classes and interfaces that are members of the nest to which the class or interface represented by this Class object belongs
ClassLoader#getName():::Returns the name of this class loader or null if this class loader is not named.
ClassLoader#loadClass(String):::Loads the class with the specified binary name
ClassLoader#loadClass(String, boolean):::Loads the class with the specified binary name
ClassLoader#loadClass(Module, String):::Loads the class with the specified binary name in a module defined to this class loader
ClassLoader#getClassLoadingLock(String):::Returns the lock object for class loading operations
ClassLoader#findClass(String):::Finds the class with the specified binary name
ClassLoader#findClass(String, String):::Finds the class with the given binary name in a module defined to this class loader
ClassLoader#defineClass(byte[], int, int):::Converts an array of bytes into an instance of class Class
ClassLoader#defineClass(String, byte[], int, int):::Converts an array of bytes into an instance of class Class
ClassLoader#defineClass(String, byte[], int, int, ProtectionDomain):::Converts an array of bytes into an instance of class Class, with a given ProtectionDomain
ClassLoader#defineClass(String, java.nio.ByteBuffer, ProtectionDomain):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with the given ProtectionDomain
ClassLoader#resolveClass(Class):::Links the specified class
ClassLoader#findSystemClass(String):::Finds a class with the specified binary name, loading it if necessary
ClassLoader#findBootstrapClassOrNull(String):::Returns a class loaded by the bootstrap class loader; or return null if not found.
ClassLoader#findLoadedClass(String):::Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name
ClassLoader#setSigners(Class, Object[]):::Sets the signers of a class
ClassLoader#findResource(String, String):::Returns a URL to a resource in a module defined to this class loader
ClassLoader#getResource(String):::Finds the resource with the given name
ClassLoader#getResources(String):::Finds all the resources with the given name
ClassLoader#resources(String):::Returns a stream whose elements are the URLs of all the resources with the given name
ClassLoader#findResource(String):::Finds the resource with the given name
ClassLoader#findResources(String):::Returns an enumeration of java.net.URL URL objects representing all the resources with the given name
ClassLoader#registerAsParallelCapable():::Registers the caller as #isRegisteredAsParallelCapable() parallel capable
ClassLoader#isRegisteredAsParallelCapable():::Returns true if this class loader is registered as #registerAsParallelCapable parallel capable, otherwise false.
ClassLoader#getSystemResource(String):::Find a resource of the specified name from the search path used to load classes
ClassLoader#getSystemResources(String):::Finds all resources of the specified name from the search path used to load classes
ClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource
ClassLoader#getSystemResourceAsStream(String):::Open for reading, a resource of the specified name from the search path used to load classes
ClassLoader#getParent():::Returns the parent class loader for delegation
ClassLoader#getUnnamedModule():::Returns the unnamed Module for this class loader.
ClassLoader#getPlatformClassLoader():::Returns the platform class loader
ClassLoader#getSystemClassLoader():::Returns the system class loader
ClassLoader#definePackage(Class):::Define a Package of the given Class object
ClassLoader#definePackage(String, Module):::Defines a Package of the given name and module  This method does not throw IllegalArgumentException.
ClassLoader#definePackage(String, String, String, String, String, String, String, URL):::Defines a package by name in this ClassLoader
ClassLoader#getDefinedPackage(String):::Returns a Package of the given name that has been defined by this class loader.
ClassLoader#getDefinedPackages():::Returns all of the Packages that have been defined by this class loader
ClassLoader#getPackage(String):::Finds a package by name in this class loader and its ancestors
ClassLoader#getPackages():::Returns all of the Packages that have been defined by this class loader and its ancestors
ClassLoader#packages():::Returns a stream of Packages defined in this class loader
ClassLoader#findLibrary(String):::Returns the absolute path name of a native library
ClassLoader#setDefaultAssertionStatus(boolean):::Sets the default assertion status for this class loader
ClassLoader#setPackageAssertionStatus(String, boolean):::Sets the package default assertion status for the named package
ClassLoader#setClassAssertionStatus(String, boolean):::Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein
ClassLoader#clearAssertionStatus():::Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader
ClassLoader#desiredAssertionStatus(String):::Returns the assertion status that would be assigned to the specified class if it were to be initialized at the time this method is invoked
ClassLoader#createOrGetClassLoaderValueMap():::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with this ClassLoader, creating it if it doesn't already exist.
ClassLoaderHelper#mapAlternativeName(File):::Returns an alternate path name for the given file such that if the original pathname did not exist, then the file may be located at the alternate location
ClassNotFoundException#getException():::Returns the exception that was raised if an error occurred while attempting to load the class
ClassNotFoundException#getCause():::Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null).
ClassValue#computeValue(Class):::Computes the given class's derived value for this ClassValue
ClassValue#get(Class):::Returns the value for the given class
ClassValue#remove(Class):::Removes the associated value for the given class
ClassValue#match(Entry):::Check that e is non-null, matches this ClassValue, and is live.
ClassValue.Entry#value():::Fetch the value
ClassValue.ClassValueMap#startEntry(ClassValue):::Initiate a query
ClassValue.ClassValueMap#finishEntry(ClassValue, Entry):::Finish a query
ClassValue.ClassValueMap#removeEntry(ClassValue):::Remove an entry.
ClassValue.ClassValueMap#changeEntry(ClassValue, T):::Change the value for an entry.
ClassValue.ClassValueMap#loadFromCache(Entry[], int):::Load the cache entry at the given (hashed) location.
ClassValue.ClassValueMap#probeHomeLocation(Entry[], ClassValue):::Look in the cache, at the home location for the given ClassValue.
ClassValue.ClassValueMap#probeBackupLocations(Entry[], ClassValue):::Given that first probe was a collision, retry at nearby locations.
Comparable#compareTo(T):::Compares this object with the specified object for order
Compiler#compileClass(Class):::Compiles the specified class.
Compiler#compileClasses(String):::Compiles all classes whose name matches the specified string.
Compiler#command(Object):::Examines the argument type and its fields and perform some documented operation
Compiler#enable():::Cause the Compiler to resume operation.
Compiler#disable():::Cause the Compiler to cease operation.
Double#toString(double):::Returns a string representation of the double argument
Double#toHexString(double):::Returns a hexadecimal string representation of the double argument
Double#valueOf(String):::Returns a Double object holding the double value represented by the argument string s
Double#valueOf(double):::Returns a Double instance representing the specified double value
Double#parseDouble(String):::Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.
Double#isNaN(double):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
Double#isInfinite(double):::Returns true if the specified number is infinitely large in magnitude, false otherwise.
Double#isFinite(double):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
Double#isNaN():::Returns true if this Double value is a Not-a-Number (NaN), false otherwise.
Double#isInfinite():::Returns true if this Double value is infinitely large in magnitude, false otherwise.
Double#toString():::Returns a string representation of this Double object
Double#byteValue():::Returns the value of this Double as a byte after a narrowing primitive conversion.
Double#shortValue():::Returns the value of this Double as a short after a narrowing primitive conversion.
Double#intValue():::Returns the value of this Double as an int after a narrowing primitive conversion.
Double#longValue():::Returns the value of this Double as a long after a narrowing primitive conversion.
Double#floatValue():::Returns the value of this Double as a float after a narrowing primitive conversion.
Double#doubleValue():::Returns the double value of this Double object.
Double#hashCode():::Returns a hash code for this Double object
Double#hashCode(double):::Returns a hash code for a double value; compatible with Double.hashCode().
Double#equals(Object):::Compares this object against the specified object
Double#doubleToLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout
Double#doubleToRawLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values
Double#longBitsToDouble(long):::Returns the double value corresponding to a given bit representation
Double#compareTo(Double):::Compares two Double objects numerically
Double#compare(double, double):::Compares the two specified double values
Double#sum(double, double):::Adds two double values together as per the + operator.
Double#max(double, double):::Returns the greater of two double values as if by calling Math#max(double, double) Math.max.
Double#min(double, double):::Returns the smaller of two double values as if by calling Math#min(double, double) Math.min.
Enum#name():::Returns the name of this enum constant, exactly as declared in its enum declaration
Enum#ordinal():::Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)
Enum#toString():::Returns the name of this enum constant, as contained in the declaration
Enum#equals(Object):::Returns true if the specified object is equal to this enum constant.
Enum#hashCode():::Returns a hash code for this enum constant.
Enum#clone():::Throws CloneNotSupportedException
Enum#compareTo(E):::Compares this enum with the specified object for order
Enum#getDeclaringClass():::Returns the Class object corresponding to this enum constant's enum type
Enum#valueOf(Class, String):::Returns the enum constant of the specified enum type with the specified name
Enum#finalize():::enum classes cannot have finalize methods.
EnumConstantNotPresentException#enumType():::Returns the type of the missing enum constant.
EnumConstantNotPresentException#constantName():::Returns the name of the missing enum constant.
ExceptionInInitializerError#getException():::Returns the exception that occurred during a static initialization that caused this error to be created
ExceptionInInitializerError#getCause():::Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).
Float#toString(float):::Returns a string representation of the float argument
Float#toHexString(float):::Returns a hexadecimal string representation of the float argument
Float#valueOf(String):::Returns a Float object holding the float value represented by the argument string s
Float#valueOf(float):::Returns a Float instance representing the specified float value
Float#parseFloat(String):::Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.
Float#isNaN(float):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
Float#isInfinite(float):::Returns true if the specified number is infinitely large in magnitude, false otherwise.
Float#isFinite(float):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
Float#isNaN():::Returns true if this Float value is a Not-a-Number (NaN), false otherwise.
Float#isInfinite():::Returns true if this Float value is infinitely large in magnitude, false otherwise.
Float#toString():::Returns a string representation of this Float object
Float#byteValue():::Returns the value of this Float as a byte after a narrowing primitive conversion.
Float#shortValue():::Returns the value of this Float as a short after a narrowing primitive conversion.
Float#intValue():::Returns the value of this Float as an int after a narrowing primitive conversion.
Float#longValue():::Returns value of this Float as a long after a narrowing primitive conversion.
Float#floatValue():::Returns the float value of this Float object.
Float#doubleValue():::Returns the value of this Float as a double after a widening primitive conversion.
Float#hashCode():::Returns a hash code for this Float object
Float#hashCode(float):::Returns a hash code for a float value; compatible with Float.hashCode().
Float#equals(Object):::Compares this object against the specified object
Float#floatToIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout
Float#floatToRawIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values
Float#intBitsToFloat(int):::Returns the float value corresponding to a given bit representation
Float#compareTo(Float):::Compares two Float objects numerically
Float#compare(float, float):::Compares the two specified float values
Float#sum(float, float):::Adds two float values together as per the + operator.
Float#max(float, float):::Returns the greater of two float values as if by calling Math#max(float, float) Math.max.
Float#min(float, float):::Returns the smaller of two float values as if by calling Math#min(float, float) Math.min.
InheritableThreadLocal#childValue(T):::Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created
InheritableThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal.
InheritableThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal.
Integer#toString(int, int):::Returns a string representation of the first argument in the radix specified by the second argument
Integer#toUnsignedString(int, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
Integer#toHexString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;16
Integer#toOctalString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;8
Integer#toBinaryString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;2
Integer#formatUnsignedInt(int, int, char[], int, int):::Format an int (treated as unsigned) into a character buffer
Integer#formatUnsignedInt(int, int, byte[], int, int):::byte[]/LATIN1 version
Integer#toString(int):::Returns a String object representing the specified integer
Integer#toUnsignedString(int):::Returns a string representation of the argument as an unsigned decimal value
Integer#getChars(int, int, byte[]):::Places characters representing the integer i into the character array buf
Integer#stringSize(int):::Returns the string representation size for a given int value.
Integer#parseInt(String, int):::Parses the string argument as a signed integer in the radix specified by the second argument
Integer#parseInt(CharSequence, int, int, int):::Parses the CharSequence argument as a signed int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
Integer#parseInt(String):::Parses the string argument as a signed decimal integer
Integer#parseUnsignedInt(String, int):::Parses the string argument as an unsigned integer in the radix specified by the second argument
Integer#parseUnsignedInt(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
Integer#parseUnsignedInt(String):::Parses the string argument as an unsigned decimal integer
Integer#valueOf(String, int):::Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument
Integer#valueOf(String):::Returns an Integer object holding the value of the specified String
Integer#valueOf(int):::Returns an Integer instance representing the specified int value
Integer#byteValue():::Returns the value of this Integer as a byte after a narrowing primitive conversion.
Integer#shortValue():::Returns the value of this Integer as a short after a narrowing primitive conversion.
Integer#intValue():::Returns the value of this Integer as an int.
Integer#longValue():::Returns the value of this Integer as a long after a widening primitive conversion.
Integer#floatValue():::Returns the value of this Integer as a float after a widening primitive conversion.
Integer#doubleValue():::Returns the value of this Integer as a double after a widening primitive conversion.
Integer#toString():::Returns a String object representing this Integer's value
Integer#hashCode():::Returns a hash code for this Integer.
Integer#hashCode(int):::Returns a hash code for an int value; compatible with Integer.hashCode().
Integer#equals(Object):::Compares this object to the specified object
Integer#getInteger(String):::Determines the integer value of the system property with the specified name
Integer#getInteger(String, int):::Determines the integer value of the system property with the specified name
Integer#getInteger(String, Integer):::Returns the integer value of the system property with the specified name
Integer#decode(String):::Decodes a String into an Integer
Integer#compareTo(Integer):::Compares two Integer objects numerically.
Integer#compare(int, int):::Compares two int values numerically
Integer#compareUnsigned(int, int):::Compares two int values numerically treating the values as unsigned.
Integer#toUnsignedLong(int):::Converts the argument to a long by an unsigned conversion
Integer#divideUnsigned(int, int):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Integer#remainderUnsigned(int, int):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Integer#highestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified int value
Integer#lowestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified int value
Integer#numberOfLeadingZeros(int):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified int value
Integer#numberOfTrailingZeros(int):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified int value
Integer#bitCount(int):::Returns the number of one-bits in the two's complement binary representation of the specified int value
Integer#rotateLeft(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits
Integer#rotateRight(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits
Integer#reverse(int):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.
Integer#signum(int):::Returns the signum function of the specified int value
Integer#reverseBytes(int):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.
Integer#sum(int, int):::Adds two integers together as per the + operator.
Integer#max(int, int):::Returns the greater of two int values as if by calling Math#max(int, int) Math.max.
Integer#min(int, int):::Returns the smaller of two int values as if by calling Math#min(int, int) Math.min.
Iterable#iterator():::Returns an iterator over elements of type T.
Iterable#forEach(Consumer):::Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception
Iterable#spliterator():::Creates a Spliterator over the elements described by this Iterable.
LiveStackFrame#getMonitors():::Return the monitors held by this stack frame
LiveStackFrame#getLocals():::Gets the local variable array of this stack frame
LiveStackFrame#getStack():::Gets the operand stack of this stack frame
LiveStackFrame.PrimitiveSlot#size():::Returns the size, in bytes, of the slot.
LiveStackFrame.PrimitiveSlot#intValue():::Returns the int value if this primitive value is of size 4
LiveStackFrame.PrimitiveSlot#longValue():::Returns the long value if this primitive value is of size 8
LiveStackFrame#getStackWalker():::Gets StackWalker that can get locals and operands.
LiveStackFrame#getStackWalker(Set):::Gets a StackWalker instance with the given options specifying the stack frame information it can access, and which will traverse at most the given maxDepth number of stack frames
Long#toString(long, int):::Returns a string representation of the first argument in the radix specified by the second argument
Long#toUnsignedString(long, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
Long#toHexString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;16
Long#toOctalString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;8
Long#toBinaryString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;2
Long#toUnsignedString0(long, int):::Format a long (treated as unsigned) into a String.
Long#formatUnsignedLong0(long, int, byte[], int, int):::byte[]/LATIN1 version
Long#toString(long):::Returns a String object representing the specified long
Long#toUnsignedString(long):::Returns a string representation of the argument as an unsigned decimal value
Long#getChars(long, int, byte[]):::Places characters representing the long i into the character array buf
Long#stringSize(long):::Returns the string representation size for a given long value.
Long#parseLong(String, int):::Parses the string argument as a signed long in the radix specified by the second argument
Long#parseLong(CharSequence, int, int, int):::Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
Long#parseLong(String):::Parses the string argument as a signed decimal long
Long#parseUnsignedLong(String, int):::Parses the string argument as an unsigned long in the radix specified by the second argument
Long#parseUnsignedLong(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
Long#parseUnsignedLong(String):::Parses the string argument as an unsigned decimal long
Long#valueOf(String, int):::Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument
Long#valueOf(String):::Returns a Long object holding the value of the specified String
Long#valueOf(long):::Returns a Long instance representing the specified long value
Long#decode(String):::Decodes a String into a Long
Long#byteValue():::Returns the value of this Long as a byte after a narrowing primitive conversion.
Long#shortValue():::Returns the value of this Long as a short after a narrowing primitive conversion.
Long#intValue():::Returns the value of this Long as an int after a narrowing primitive conversion.
Long#longValue():::Returns the value of this Long as a long value.
Long#floatValue():::Returns the value of this Long as a float after a widening primitive conversion.
Long#doubleValue():::Returns the value of this Long as a double after a widening primitive conversion.
Long#toString():::Returns a String object representing this Long's value
Long#hashCode():::Returns a hash code for this Long
Long#hashCode(long):::Returns a hash code for a long value; compatible with Long.hashCode().
Long#equals(Object):::Compares this object to the specified object
Long#getLong(String):::Determines the long value of the system property with the specified name
Long#getLong(String, long):::Determines the long value of the system property with the specified name
Long#getLong(String, Long):::Returns the long value of the system property with the specified name
Long#compareTo(Long):::Compares two Long objects numerically.
Long#compare(long, long):::Compares two long values numerically
Long#compareUnsigned(long, long):::Compares two long values numerically treating the values as unsigned.
Long#divideUnsigned(long, long):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Long#remainderUnsigned(long, long):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Long#highestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified long value
Long#lowestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified long value
Long#numberOfLeadingZeros(long):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified long value
Long#numberOfTrailingZeros(long):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified long value
Long#bitCount(long):::Returns the number of one-bits in the two's complement binary representation of the specified long value
Long#rotateLeft(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits
Long#rotateRight(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits
Long#reverse(long):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.
Long#signum(long):::Returns the signum function of the specified long value
Long#reverseBytes(long):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.
Long#sum(long, long):::Adds two long values together as per the + operator.
Long#max(long, long):::Returns the greater of two long values as if by calling Math#max(long, long) Math.max.
Long#min(long, long):::Returns the smaller of two long values as if by calling Math#min(long, long) Math.min.
Math#sin(double):::Returns the trigonometric sine of an angle
Math#cos(double):::Returns the trigonometric cosine of an angle
Math#tan(double):::Returns the trigonometric tangent of an angle
Math#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2
Math#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi
Math#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2
Math#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians
Math#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees
Math#exp(double):::Returns Euler's number e raised to the power of a double value
Math#log(double):::Returns the natural logarithm (base e) of a double value
Math#log10(double):::Returns the base 10 logarithm of a double value
Math#sqrt(double):::Returns the correctly rounded positive square root of a double value
Math#cbrt(double):::Returns the cube root of a double value
Math#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
Math#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer
Math#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer
Math#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer
Math#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta)
Math#pow(double, double):::Returns the value of the first argument raised to the power of the second argument
Math#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity
Math#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity
Math#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0
Math#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.
Math#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.
Math#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.
Math#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.
Math#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.
Math#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.
Math#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.
Math#incrementExact(int):::Returns the argument incremented by one, throwing an exception if the result overflows an int.
Math#incrementExact(long):::Returns the argument incremented by one, throwing an exception if the result overflows a long.
Math#decrementExact(int):::Returns the argument decremented by one, throwing an exception if the result overflows an int.
Math#decrementExact(long):::Returns the argument decremented by one, throwing an exception if the result overflows a long.
Math#negateExact(int):::Returns the negation of the argument, throwing an exception if the result overflows an int.
Math#negateExact(long):::Returns the negation of the argument, throwing an exception if the result overflows a long.
Math#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.
Math#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.
Math#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.
Math#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient
Math#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
Math#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
Math#floorMod(int, int):::Returns the floor modulus of the int arguments
Math#floorMod(long, int):::Returns the floor modulus of the long and int arguments
Math#floorMod(long, long):::Returns the floor modulus of the long arguments
Math#abs(int):::Returns the absolute value of an int value
Math#abs(long):::Returns the absolute value of a long value
Math#abs(float):::Returns the absolute value of a float value
Math#abs(double):::Returns the absolute value of a double value
Math#max(int, int):::Returns the greater of two int values
Math#max(long, long):::Returns the greater of two long values
Math#max(float, float):::Returns the greater of two float values
Math#max(double, double):::Returns the greater of two double values
Math#min(int, int):::Returns the smaller of two int values
Math#min(long, long):::Returns the smaller of two long values
Math#min(float, float):::Returns the smaller of two float values
Math#min(double, double):::Returns the smaller of two double values
Math#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double
Math#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float
Math#ulp(double):::Returns the size of an ulp of the argument
Math#ulp(float):::Returns the size of an ulp of the argument
Math#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero
Math#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero
Math#sinh(double):::Returns the hyperbolic sine of a double value
Math#cosh(double):::Returns the hyperbolic cosine of a double value
Math#tanh(double):::Returns the hyperbolic tangent of a double value
Math#hypot(double, double):::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow
Math#expm1(double):::Returns e^x&nbsp;-1
Math#log1p(double):::Returns the natural logarithm of the sum of the argument and 1
Math#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument
Math#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument
Math#getExponent(float):::Returns the unbiased exponent used in the representation of a float
Math#getExponent(double):::Returns the unbiased exponent used in the representation of a double
Math#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument
Math#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument
Math#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity
Math#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity
Math#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity
Math#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity
Math#scalb(double, int):::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
Math#scalb(float, int):::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
Math#powerOfTwoD(int):::Returns a floating-point power of two in the normal range.
Math#powerOfTwoF(int):::Returns a floating-point power of two in the normal range.
Module#isNamed():::Returns true if this module is a named module.
Module#getName():::Returns the module name or null if this module is an unnamed module.
Module#getClassLoader():::Returns the ClassLoader for this module
Module#getDescriptor():::Returns the module descriptor for this module or null if this module is an unnamed module.
Module#getLayer():::Returns the module layer that contains this module or null if this module is not in a module layer
Module#canRead(Module):::Indicates if this module reads the given module
Module#addReads(Module):::If the caller's module is this module then update this module to read the given module
Module#implAddReads(Module):::Updates this module to read another module.
Module#implAddReadsAllUnnamed():::Updates this module to read all unnamed modules.
Module#implAddReadsNoSync(Module):::Updates this module to read another module without notifying the VM.
Module#isExported(String, Module):::Returns true if this module exports the given package to at least the given module
Module#isOpen(String, Module):::Returns true if this module has opened a package to at least the given module
Module#isExported(String):::Returns true if this module exports the given package unconditionally
Module#isOpen(String):::Returns true if this module has opened a package unconditionally
Module#isReflectivelyExported(String, Module):::Returns true if this module reflectively exports the given package to the given module.
Module#isReflectivelyOpened(String, Module):::Returns true if this module reflectively opens the given package to the given module.
Module#addExports(String, Module):::If the caller's module is this module then update this module to export the given package to the given module
Module#addOpens(String, Module):::If this module has opened a package to at least the caller module then update this module to open the package to the given module
Module#implAddExports(String):::Updates this module to export a package unconditionally.
Module#implAddExports(String, Module):::Updates this module to export a package to another module.
Module#implAddExportsToAllUnnamed(String):::Updates this module to export a package to all unnamed modules.
Module#implAddExportsNoSync(String):::Updates this export to export a package unconditionally without notifying the VM.
Module#implAddExportsNoSync(String, Module):::Updates a module to export a package to another module without notifying the VM.
Module#implAddOpens(String):::Updates this module to open a package unconditionally.
Module#implAddOpens(String, Module):::Updates this module to open a package to another module.
Module#implAddOpensToAllUnnamed(String):::Updates this module to open a package to all unnamed modules.
Module#implAddOpensToAllUnnamed(Iterator):::Updates a module to open all packages returned by the given iterator to all unnamed modules.
Module#addUses(Class):::If the caller's module is this module then update this module to add a service dependence on the given service type
Module#implAddUses(Class):::Update this module to add a service dependence on the given service type.
Module#canUse(Class):::Indicates if this module has a service dependence on the given service type
Module#getPackages():::Returns the set of package names for the packages in this module
Module#defineModules(Configuration, Function, ModuleLayer):::Defines all module in a configuration to the runtime.
Module#getAnnotation(Class):::This method returns {@code null when invoked on an unnamed module.
Module#getAnnotations()::: This method returns an empty array when invoked on an unnamed module.
Module#getDeclaredAnnotations()::: This method returns an empty array when invoked on an unnamed module.
Module#getResourceAsStream(String):::Returns an input stream for reading a resource in this module
Module#toString():::Returns the string representation of this module
ModuleLayer.Controller#layer():::Returns the layer that this object controls.
ModuleLayer.Controller#addReads(Module, Module):::Updates module source in the layer to read module target
ModuleLayer.Controller#addExports(Module, String, Module):::Updates module source in the layer to export a package to module target
ModuleLayer.Controller#addOpens(Module, String, Module):::Updates module source in the layer to open a package to module target
ModuleLayer#defineModulesWithOneLoader(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#defineModulesWithManyLoaders(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#defineModules(Configuration, Function):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#defineModulesWithOneLoader(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#defineModulesWithManyLoaders(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#defineModules(Configuration, List, Function):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
ModuleLayer#configuration():::Returns the configuration for this layer.
ModuleLayer#parents():::Returns the list of this layer's parents unless this is the #empty empty layer, which has no parents and so an empty list is returned.
ModuleLayer#layers():::Returns an ordered stream of layers
ModuleLayer#modules():::Returns the set of the modules in this layer.
ModuleLayer#findModule(String):::Returns the module with the given name in this layer, or if not in this layer, the #parents() parent layers
ModuleLayer#findLoader(String):::Returns the ClassLoader for the module with the given name
ModuleLayer#toString():::Returns a string describing this module layer.
ModuleLayer#empty():::Returns the empty layer
ModuleLayer#boot():::Returns the boot layer
ModuleLayer#getServicesCatalog():::Returns the ServicesCatalog for this Layer, creating it if not already created.
ModuleLayer#bindToLoader(ClassLoader):::Record that this layer has at least one module defined to the given class loader.
ModuleLayer#layers(ClassLoader):::Returns a stream of the layers that have at least one module defined to the given class loader.
NamedPackage#packageName():::Returns the name of this package.
NamedPackage#module():::Returns the module of this named package.
NamedPackage#location():::Returns the location of the module if this named package is in a named module; otherwise, returns null.
NamedPackage#toPackage(String, Module):::Creates a Package object of the given name and module.
Number#intValue():::Returns the value of the specified number as an int.
Number#longValue():::Returns the value of the specified number as a long.
Number#floatValue():::Returns the value of the specified number as a float.
Number#doubleValue():::Returns the value of the specified number as a double.
Number#byteValue():::Returns the value of the specified number as a byte
Number#shortValue():::Returns the value of the specified number as a short
NumberFormatException#forInputString(String):::Factory method for making a NumberFormatException given the specified input which caused the error.
NumberFormatException#forCharSequence(CharSequence, int, int, int):::Factory method for making a NumberFormatException given the specified input which caused the error.
Object#getClass():::Returns the runtime class of this Object
Object#hashCode():::Returns a hash code value for the object
Object#equals(Object):::Indicates whether some other object is "equal to" this one
Object#clone():::Creates and returns a copy of this object
Object#toString():::Returns a string representation of the object
Object#notify():::Wakes up a single thread that is waiting on this object's monitor
Object#notifyAll():::Wakes up all threads that are waiting on this object's monitor
Object#wait():::Causes the current thread to wait until it is awakened, typically by being notified or interrupted
Object#wait(long):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed
Object#wait(long, int):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed
Object#finalize():::Called by the garbage collector on an object when garbage collection determines that there are no more references to the object
Package#getName():::Return the name of this package.
Package#getSpecificationTitle():::Return the title of the specification that this package implements.
Package#getSpecificationVersion():::Returns the version number of the specification that this package implements
Package#getSpecificationVendor():::Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.
Package#getImplementationTitle():::Return the title of this package.
Package#getImplementationVersion():::Return the version of this implementation
Package#getImplementationVendor():::Returns the vendor that implemented this package, null is returned if it is not known.
Package#isSealed():::Returns true if this package is sealed.
Package#isSealed(URL):::Returns true if this package is sealed with respect to the specified code source url.
Package#isCompatibleWith(String):::Compare this package's specification version with a desired version
Package#getPackage(String):::Finds a package by name in the caller's class loader and its ancestors
Package#getPackages():::Returns all of the Packages defined by the caller's class loader and its ancestors
Package#hashCode():::Return the hash code computed from the package name.
Package#toString():::Returns the string representation of this Package
Process#getOutputStream():::Returns the output stream connected to the normal input of the process
Process#getInputStream():::Returns the input stream connected to the normal output of the process
Process#getErrorStream():::Returns the input stream connected to the error output of the process
Process#waitFor():::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated
Process#waitFor(long, TimeUnit):::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated, or the specified waiting time elapses
Process#exitValue():::Returns the exit value for the process.
Process#destroy():::Kills the process
Process#destroyForcibly():::Kills the process forcibly
Process#supportsNormalTermination():::Returns true if the implementation of #destroy is to normally terminate the process, Returns false if the implementation of destroy forcibly and immediately terminates the process
Process#isAlive():::Tests whether the process represented by this Process is alive.
Process#pid():::Returns the native process ID of the process
Process#onExit():::Returns a CompletableFuture<Process> for the termination of the Process
Process#toHandle():::Returns a ProcessHandle for the Process
Process#info():::Returns a snapshot of information about the process
Process#children():::Returns a snapshot of the direct children of the process
Process#descendants():::Returns a snapshot of the descendants of the process
ProcessBuilder#command(List):::Sets this process builder's operating system program and arguments
ProcessBuilder#command(String...):::Sets this process builder's operating system program and arguments
ProcessBuilder#command():::Returns this process builder's operating system program and arguments
ProcessBuilder#environment():::Returns a string map view of this process builder's environment
ProcessBuilder#directory():::Returns this process builder's working directory
ProcessBuilder#directory(File):::Sets this process builder's working directory
ProcessBuilder.Redirect#type():::Returns the type of this Redirect.
ProcessBuilder.Redirect#file():::Returns the File source or destination associated with this redirect, or null if there is no such file.
ProcessBuilder.Redirect#append():::When redirected to a destination file, indicates if the output is to be written to the end of the file.
ProcessBuilder.Redirect#from(File):::Returns a redirect to read from the specified file
ProcessBuilder.Redirect#to(File):::Returns a redirect to write to the specified file
ProcessBuilder.Redirect#appendTo(File):::Returns a redirect to append to the specified file
ProcessBuilder.Redirect#equals(Object):::Compares the specified object with this Redirect for equality
ProcessBuilder.Redirect#hashCode():::Returns a hash code value for this Redirect.
ProcessBuilder#redirectInput(Redirect):::Sets this process builder's standard input source
ProcessBuilder#redirectOutput(Redirect):::Sets this process builder's standard output destination
ProcessBuilder#redirectError(Redirect):::Sets this process builder's standard error destination
ProcessBuilder#redirectInput(File):::Sets this process builder's standard input source to a file
ProcessBuilder#redirectOutput(File):::Sets this process builder's standard output destination to a file
ProcessBuilder#redirectError(File):::Sets this process builder's standard error destination to a file
ProcessBuilder#redirectInput():::Returns this process builder's standard input source
ProcessBuilder#redirectOutput():::Returns this process builder's standard output destination
ProcessBuilder#redirectError():::Returns this process builder's standard error destination
ProcessBuilder#inheritIO():::Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process
ProcessBuilder#redirectErrorStream():::Tells whether this process builder merges standard error and standard output
ProcessBuilder#redirectErrorStream(boolean):::Sets this process builder's redirectErrorStream property
ProcessBuilder#start():::Starts a new process using the attributes of this process builder
ProcessBuilder#startPipeline(List):::Starts a Process for each ProcessBuilder, creating a pipeline of processes linked by their standard output and standard input streams
ProcessHandle#pid():::Returns the native process ID of the process
ProcessHandle#of(long):::Returns an Optional<ProcessHandle> for an existing native process.
ProcessHandle#current():::Returns a ProcessHandle for the current process
ProcessHandle#parent():::Returns an Optional<ProcessHandle> for the parent process
ProcessHandle#children():::Returns a snapshot of the current direct children of the process
ProcessHandle#descendants():::Returns a snapshot of the descendants of the process
ProcessHandle#allProcesses():::Returns a snapshot of all processes visible to the current process
ProcessHandle#info():::Returns a snapshot of information about the process
ProcessHandle.Info#command():::Returns the executable pathname of the process.
ProcessHandle.Info#commandLine():::Returns the command line of the process
ProcessHandle.Info#arguments():::Returns an array of Strings of the arguments of the process.
ProcessHandle.Info#startInstant():::Returns the start time of the process.
ProcessHandle.Info#totalCpuDuration():::Returns the total cputime accumulated of the process.
ProcessHandle.Info#user():::Return the user of the process.
ProcessHandle#onExit():::Returns a CompletableFuture<ProcessHandle> for the termination of the process
ProcessHandle#supportsNormalTermination():::Returns true if the implementation of #destroy normally terminates the process
ProcessHandle#destroy():::Requests the process to be killed
ProcessHandle#destroyForcibly():::Requests the process to be killed forcibly
ProcessHandle#isAlive():::Tests whether the process represented by this ProcessHandle is alive
ProcessHandle#hashCode():::Returns a hash code value for this ProcessHandle
ProcessHandle#equals(Object):::Returns true if other object is non-null, is of the same implementation, and represents the same system process; otherwise it returns false.
ProcessHandle#compareTo(ProcessHandle):::Compares this ProcessHandle with the specified ProcessHandle for order
ProcessHandleImpl#completion(long, boolean):::Returns a CompletableFuture that completes with process exit status when the process completes.
ProcessHandleImpl#get(long):::Returns a ProcessHandle for an existing native process.
ProcessHandleImpl#getInternal(long):::Returns a ProcessHandle for an existing native process known to be alive
ProcessHandleImpl#pid():::Returns the native process ID
ProcessHandleImpl#current():::Returns the ProcessHandle for the current native process.
ProcessHandleImpl#parent():::Returns a ProcessHandle for the parent process.
ProcessHandleImpl#destroyProcess(boolean):::Destroy the process for this ProcessHandle
ProcessHandleImpl#isAlive():::Tests whether the process represented by this ProcessHandle is alive.
ProcessHandleImpl#children(long):::Returns a Stream of the children of a process or all processes.
ProcessHandleImpl.Info#info(long, long):::Returns the Info object with the fields from the process
ProcessImpl#toString():::The toString method returns a string consisting of the native process ID of the process and the exit value of the process.
PublicMethods#merge(Method):::Merges new method with existing methods
PublicMethods#toArray():::Dumps methods to array.
PublicMethods.MethodList#merge(MethodList, MethodList):::This method should only be called with the head (possibly null) of a list of Method(s) that share the same (method name, parameter types) and another methodList that also contains Method(s) with the same and equal (method name, parameter types) as the 1st list
Readable#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer
Runnable#run():::When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread
Runtime#getRuntime():::Returns the runtime object associated with the current Java application
Runtime#exit(int):::Terminates the currently running Java virtual machine by initiating its shutdown sequence
Runtime#addShutdownHook(Thread):::Registers a new virtual-machine shutdown hook
Runtime#removeShutdownHook(Thread):::De-registers a previously-registered virtual-machine shutdown hook.
Runtime#halt(int):::Forcibly terminates the currently running Java virtual machine
Runtime#exec(String):::Executes the specified string command in a separate process
Runtime#exec(String, String[]):::Executes the specified string command in a separate process with the specified environment
Runtime#exec(String, String[], File):::Executes the specified string command in a separate process with the specified environment and working directory
Runtime#exec(String[]):::Executes the specified command and arguments in a separate process
Runtime#exec(String[], String[]):::Executes the specified command and arguments in a separate process with the specified environment
Runtime#exec(String[], String[], File):::Executes the specified command and arguments in a separate process with the specified environment and working directory
Runtime#availableProcessors():::Returns the number of processors available to the Java virtual machine
Runtime#freeMemory():::Returns the amount of free memory in the Java Virtual Machine
Runtime#totalMemory():::Returns the total amount of memory in the Java virtual machine
Runtime#maxMemory():::Returns the maximum amount of memory that the Java virtual machine will attempt to use
Runtime#gc():::Runs the garbage collector
Runtime#runFinalization():::Runs the finalization methods of any objects pending finalization
Runtime#traceInstructions(boolean):::Not implemented, does nothing.
Runtime#traceMethodCalls(boolean):::Not implemented, does nothing.
Runtime#load(String):::Loads the native library specified by the filename argument
Runtime#loadLibrary(String):::Loads the native library specified by the libname argument
Runtime#version():::Returns the version of the Java Runtime Environment as a Version.
Runtime.Version#parse(String):::Parses the given string as a valid version string containing a version number followed by pre-release and build information.
Runtime.Version#feature():::Returns the value of the feature element of the version number.
Runtime.Version#interim():::Returns the value of the interim element of the version number, or zero if it is absent.
Runtime.Version#update():::Returns the value of the update element of the version number, or zero if it is absent.
Runtime.Version#patch():::Returns the value of the patch element of the version number, or zero if it is absent.
Runtime.Version#major():::Returns the value of the major element of the version number.
Runtime.Version#minor():::Returns the value of the minor element of the version number, or zero if it is absent.
Runtime.Version#security():::Returns the value of the security element of the version number, or zero if it is absent.
Runtime.Version#version():::Returns an unmodifiable java.util.List List of the integers represented in the version number
Runtime.Version#pre():::Returns the optional pre-release information.
Runtime.Version#build():::Returns the build number.
Runtime.Version#optional():::Returns optional additional identifying build information.
Runtime.Version#compareTo(Version):::Compares this version to another
Runtime.Version#compareToIgnoreOptional(Version):::Compares this version to another disregarding optional build information
Runtime.Version#toString():::Returns a string representation of this version.
Runtime.Version#equals(Object):::Determines whether this Version is equal to another object
Runtime.Version#equalsIgnoreOptional(Object):::Determines whether this Version is equal to another disregarding optional build information
Runtime.Version#hashCode():::Returns the hash code of this version.
SecurityManager#getClassContext():::Returns the current execution stack as an array of classes
SecurityManager#getSecurityContext():::Creates an object that encapsulates the current execution environment
SecurityManager#checkPermission(Permission):::Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect
SecurityManager#checkPermission(Permission, Object):::Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission
SecurityManager#checkCreateClassLoader():::Throws a SecurityException if the calling thread is not allowed to create a new class loader
SecurityManager#checkAccess(Thread):::Throws a SecurityException if the calling thread is not allowed to modify the thread argument
SecurityManager#checkAccess(ThreadGroup):::Throws a SecurityException if the calling thread is not allowed to modify the thread group argument
SecurityManager#checkExit(int):::Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
SecurityManager#checkExec(String):::Throws a SecurityException if the calling thread is not allowed to create a subprocess
SecurityManager#checkLink(String):::Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file
SecurityManager#checkRead(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor
SecurityManager#checkRead(String):::Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument
SecurityManager#checkRead(String, Object):::Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument
SecurityManager#checkWrite(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor
SecurityManager#checkWrite(String):::Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument
SecurityManager#checkDelete(String):::Throws a SecurityException if the calling thread is not allowed to delete the specified file
SecurityManager#checkConnect(String, int):::Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number
SecurityManager#checkConnect(String, int, Object):::Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number
SecurityManager#checkListen(int):::Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number
SecurityManager#checkAccept(String, int):::Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number
SecurityManager#checkMulticast(InetAddress):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
SecurityManager#checkMulticast(InetAddress, byte):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
SecurityManager#checkPropertiesAccess():::Throws a SecurityException if the calling thread is not allowed to access or modify the system properties
SecurityManager#checkPropertyAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name
SecurityManager#checkPrintJobAccess():::Throws a SecurityException if the calling thread is not allowed to initiate a print job request
SecurityManager#addNonExportedPackages(ModuleLayer):::Record the non-exported packages of the modules in the given layer
SecurityManager#invalidatePackageAccessCache():::Called by java.security.Security
SecurityManager#checkPackageAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the specified package
SecurityManager#checkPackageDefinition(String):::Throws a SecurityException if the calling thread is not allowed to define classes in the specified package
SecurityManager#checkSetFactory():::Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL
SecurityManager#checkSecurityAccess(String):::Determines whether the permission with the specified permission target name should be granted or denied
SecurityManager#getThreadGroup():::Returns the thread group into which to instantiate any new thread being created at the time this is being called
Short#toString(short):::Returns a new String object representing the specified short
Short#parseShort(String, int):::Parses the string argument as a signed short in the radix specified by the second argument
Short#parseShort(String):::Parses the string argument as a signed decimal short
Short#valueOf(String, int):::Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument
Short#valueOf(String):::Returns a Short object holding the value given by the specified String
Short#valueOf(short):::Returns a Short instance representing the specified short value
Short#decode(String):::Decodes a String into a Short
Short#byteValue():::Returns the value of this Short as a byte after a narrowing primitive conversion.
Short#shortValue():::Returns the value of this Short as a short.
Short#intValue():::Returns the value of this Short as an int after a widening primitive conversion.
Short#longValue():::Returns the value of this Short as a long after a widening primitive conversion.
Short#floatValue():::Returns the value of this Short as a float after a widening primitive conversion.
Short#doubleValue():::Returns the value of this Short as a double after a widening primitive conversion.
Short#toString():::Returns a String object representing this Short's value
Short#hashCode():::Returns a hash code for this Short; equal to the result of invoking intValue().
Short#hashCode(short):::Returns a hash code for a short value; compatible with Short.hashCode().
Short#equals(Object):::Compares this object to the specified object
Short#compareTo(Short):::Compares two Short objects numerically.
Short#compare(short, short):::Compares two short values numerically
Short#compareUnsigned(short, short):::Compares two short values numerically treating the values as unsigned.
Short#reverseBytes(short):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.
Short#toUnsignedInt(short):::Converts the argument to an int by an unsigned conversion
Short#toUnsignedLong(short):::Converts the argument to a long by an unsigned conversion
Shutdown#add(int, boolean, Runnable):::Add a new system shutdown hook
StackStreamFactory#makeCallerFinder(StackWalker):::Gets a stack stream to find caller class.
StackStreamFactory.AbstractStackWalker#consumeFrames():::A callback method to consume the stack frames
StackStreamFactory.AbstractStackWalker#initFrameBuffer():::Initialize FrameBuffer
StackStreamFactory.AbstractStackWalker#batchSize(int):::Returns the suggested next batch size
StackStreamFactory.StackFrameTraverser#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames; or null if no more stack frame.
StackStreamFactory.CallerClassFinder.ClassBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames
StackStreamFactory.FrameBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames
StackStreamFactory.FrameBuffer#at(int):::Return the class at the given position in the current batch.
StackStreamFactory.FrameBuffer#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames
StackStreamFactory.FrameBuffer#next():::Gets the class at the current frame and move to the next frame.
StackStreamFactory.FrameBuffer#get():::Gets the class at the current frame.
StackTraceElement#getFileName():::Returns the name of the source file containing the execution point represented by this stack trace element
StackTraceElement#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack trace element
StackTraceElement#getModuleName():::Returns the module name of the module containing the execution point represented by this stack trace element.
StackTraceElement#getModuleVersion():::Returns the module version of the module containing the execution point represented by this stack trace element.
StackTraceElement#getClassLoaderName():::Returns the name of the class loader of the class containing the execution point represented by this stack trace element.
StackTraceElement#getClassName():::Returns the fully qualified name of the class containing the execution point represented by this stack trace element.
StackTraceElement#getMethodName():::Returns the name of the method containing the execution point represented by this stack trace element
StackTraceElement#isNativeMethod():::Returns true if the method containing the execution point represented by this stack trace element is a native method.
StackTraceElement#toString():::Returns a string representation of this stack trace element.
StackTraceElement#equals(Object):::Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance
StackTraceElement#hashCode():::Returns a hash code value for this stack trace element.
StackWalker.StackFrame#getClassName():::Gets the binary name of the declaring class of the method represented by this stack frame.
StackWalker.StackFrame#getMethodName():::Gets the name of the method represented by this stack frame.
StackWalker.StackFrame#getDeclaringClass():::Gets the declaring Class for the method represented by this stack frame.
StackWalker.StackFrame#getMethodType():::Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame.
StackWalker.StackFrame#getDescriptor():::Returns the descriptor of the method represented by this stack frame as defined by The Java Virtual Machine Specification.
StackWalker.StackFrame#getByteCodeIndex():::Returns the index to the code array of the Code attribute containing the execution point represented by this stack frame
StackWalker.StackFrame#getFileName():::Returns the name of the source file containing the execution point represented by this stack frame
StackWalker.StackFrame#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack frame
StackWalker.StackFrame#isNativeMethod():::Returns true if the method containing the execution point represented by this stack frame is a native method.
StackWalker.StackFrame#toStackTraceElement():::Gets a StackTraceElement for this stack frame.
StackWalker#getInstance():::Returns a StackWalker instance
StackWalker#getInstance(Option):::Returns a StackWalker instance with the given option specifying the stack frame information it can access
StackWalker#getInstance(Set):::Returns a StackWalker instance with the given options specifying the stack frame information it can access
StackWalker#getInstance(Set, int):::Returns a StackWalker instance with the given options specifying the stack frame information it can access
StackWalker#walk(Function, ? extends T>):::Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method
StackWalker#forEach(Consumer):::Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method
StackWalker#getCallerClass():::Gets the Class object of the caller who invoked the method that invoked getCallerClass
StrictMath#sin(double):::Returns the trigonometric sine of an angle
StrictMath#cos(double):::Returns the trigonometric cosine of an angle
StrictMath#tan(double):::Returns the trigonometric tangent of an angle
StrictMath#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2
StrictMath#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi
StrictMath#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2
StrictMath#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians
StrictMath#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees
StrictMath#exp(double):::Returns Euler's number e raised to the power of a double value
StrictMath#log(double):::Returns the natural logarithm (base e) of a double value
StrictMath#log10(double):::Returns the base 10 logarithm of a double value
StrictMath#sqrt(double):::Returns the correctly rounded positive square root of a double value
StrictMath#cbrt(double):::Returns the cube root of a double value
StrictMath#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
StrictMath#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer
StrictMath#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer
StrictMath#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer
StrictMath#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta)
StrictMath#pow(double, double):::Returns the value of the first argument raised to the power of the second argument
StrictMath#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity
StrictMath#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity
StrictMath#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0
StrictMath#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.
StrictMath#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.
StrictMath#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.
StrictMath#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.
StrictMath#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.
StrictMath#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.
StrictMath#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.
StrictMath#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.
StrictMath#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.
StrictMath#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.
StrictMath#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient
StrictMath#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
StrictMath#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
StrictMath#floorMod(int, int):::Returns the floor modulus of the int arguments
StrictMath#floorMod(long, int):::Returns the floor modulus of the long and int arguments
StrictMath#floorMod(long, long):::Returns the floor modulus of the long arguments
StrictMath#abs(int):::Returns the absolute value of an int value
StrictMath#abs(long):::Returns the absolute value of a long value
StrictMath#abs(float):::Returns the absolute value of a float value
StrictMath#abs(double):::Returns the absolute value of a double value
StrictMath#max(int, int):::Returns the greater of two int values
StrictMath#max(long, long):::Returns the greater of two long values
StrictMath#max(float, float):::Returns the greater of two float values
StrictMath#max(double, double):::Returns the greater of two double values
StrictMath#min(int, int):::Returns the smaller of two int values
StrictMath#min(long, long):::Returns the smaller of two long values
StrictMath#min(float, float):::Returns the smaller of two float values
StrictMath#min(double, double):::Returns the smaller of two double values
StrictMath#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double
StrictMath#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float
StrictMath#ulp(double):::Returns the size of an ulp of the argument
StrictMath#ulp(float):::Returns the size of an ulp of the argument
StrictMath#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero
StrictMath#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero
StrictMath#sinh(double):::Returns the hyperbolic sine of a double value
StrictMath#cosh(double):::Returns the hyperbolic cosine of a double value
StrictMath#tanh(double):::Returns the hyperbolic tangent of a double value
StrictMath#hypot(double, double):::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow
StrictMath#expm1(double):::Returns e^x&nbsp;-1
StrictMath#log1p(double):::Returns the natural logarithm of the sum of the argument and 1
StrictMath#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument
StrictMath#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument
StrictMath#getExponent(float):::Returns the unbiased exponent used in the representation of a float
StrictMath#getExponent(double):::Returns the unbiased exponent used in the representation of a double
StrictMath#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument
StrictMath#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument
StrictMath#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity
StrictMath#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity
StrictMath#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity
StrictMath#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity
StrictMath#scalb(double, int):::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
StrictMath#scalb(float, int):::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
String#length():::Returns the length of this string
String#isEmpty():::Returns true if, and only if, #length() is 0.
String#charAt(int):::Returns the char value at the specified index
String#codePointAt(int):::Returns the character (Unicode code point) at the specified index
String#codePointBefore(int):::Returns the character (Unicode code point) before the specified index
String#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this String
String#offsetByCodePoints(int, int):::Returns the index within this String that is offset from the given index by codePointOffset code points
String#getChars(int, int, char[], int):::Copies characters from this string into the destination character array
String#getBytes(int, int, byte[], int):::Copies characters from this string into the destination byte array
String#getBytes(String):::Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array
String#getBytes(Charset):::Encodes this String into a sequence of bytes using the given java.nio.charset.Charset charset, storing the result into a new byte array
String#getBytes():::Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array
String#equals(Object):::Compares this string to the specified object
String#contentEquals(StringBuffer):::Compares this string to the specified StringBuffer
String#contentEquals(CharSequence):::Compares this string to the specified CharSequence
String#equalsIgnoreCase(String):::Compares this String to another String, ignoring case considerations
String#compareTo(String):::Compares two strings lexicographically
String#compareToIgnoreCase(String):::Compares two strings lexicographically, ignoring case differences
String#regionMatches(int, String, int, int):::Tests if two string regions are equal
String#regionMatches(boolean, int, String, int, int):::Tests if two string regions are equal
String#startsWith(String, int):::Tests if the substring of this string beginning at the specified index starts with the specified prefix.
String#startsWith(String):::Tests if this string starts with the specified prefix.
String#endsWith(String):::Tests if this string ends with the specified suffix.
String#hashCode():::Returns a hash code for this string
String#indexOf(int):::Returns the index within this string of the first occurrence of the specified character
String#indexOf(int, int):::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
String#lastIndexOf(int):::Returns the index within this string of the last occurrence of the specified character
String#lastIndexOf(int, int):::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
String#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring
String#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
String#indexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches
String#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring
String#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index
String#lastIndexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches
String#substring(int):::Returns a string that is a substring of this string
String#substring(int, int):::Returns a string that is a substring of this string
String#subSequence(int, int):::Returns a character sequence that is a subsequence of this sequence
String#concat(String):::Concatenates the specified string to the end of this string
String#replace(char, char):::Returns a string resulting from replacing all occurrences of oldChar in this string with newChar
String#matches(String):::Tells whether or not this string matches the given regular expression
String#contains(CharSequence):::Returns true if and only if this string contains the specified sequence of char values.
String#replaceFirst(String, String):::Replaces the first substring of this string that matches the given regular expression with the given replacement
String#replaceAll(String, String):::Replaces each substring of this string that matches the given regular expression with the given replacement
String#replace(CharSequence, CharSequence):::Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence
String#split(String, int):::Splits this string around matches of the given regular expression
String#split(String):::Splits this string around matches of the given regular expression
String#join(CharSequence, CharSequence...):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter
String#join(CharSequence, Iterable):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter
String#toLowerCase(Locale):::Converts all of the characters in this String to lower case using the rules of the given Locale
String#toLowerCase():::Converts all of the characters in this String to lower case using the rules of the default locale
String#toUpperCase(Locale):::Converts all of the characters in this String to upper case using the rules of the given Locale
String#toUpperCase():::Converts all of the characters in this String to upper case using the rules of the default locale
String#trim():::Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character)
String#strip():::Returns a string whose value is this string, with all leading and trailing Character#isWhitespace(int) white space removed
String#stripLeading():::Returns a string whose value is this string, with all leading Character#isWhitespace(int) white space removed
String#stripTrailing():::Returns a string whose value is this string, with all trailing Character#isWhitespace(int) white space removed
String#isBlank():::Returns true if the string is empty or contains only Character#isWhitespace(int) white space codepoints, otherwise false.
String#lines():::Returns a stream of lines extracted from this string, separated by line terminators
String#toString():::This object (which is already a string!) is itself returned.
String#chars():::Returns a stream of int zero-extending the char values from this sequence
String#codePoints():::Returns a stream of code point values from this sequence
String#toCharArray():::Converts this string to a new character array.
String#format(String, Object...):::Returns a formatted string using the specified format string and arguments
String#format(Locale, String, Object...):::Returns a formatted string using the specified locale, format string, and arguments.
String#valueOf(Object):::Returns the string representation of the Object argument.
String#valueOf(char[]):::Returns the string representation of the char array argument
String#valueOf(char[], int, int):::Returns the string representation of a specific subarray of the char array argument
String#copyValueOf(char[], int, int):::Equivalent to #valueOf(char[], int, int).
String#copyValueOf(char[]):::Equivalent to #valueOf(char[]).
String#valueOf(boolean):::Returns the string representation of the boolean argument.
String#valueOf(char):::Returns the string representation of the char argument.
String#valueOf(int):::Returns the string representation of the int argument
String#valueOf(long):::Returns the string representation of the long argument
String#valueOf(float):::Returns the string representation of the float argument
String#valueOf(double):::Returns the string representation of the double argument
String#intern():::Returns a canonical representation for the string object
String#repeat(int):::Returns a string whose value is the concatenation of this string repeated count times
String#getBytes(byte[], int, byte):::Copy character bytes from this string into dst starting at dstBegin
String#valueOfCodePoint(int):::Returns the string representation of the codePoint argument.
StringBuffer#compareTo(StringBuffer):::Compares two StringBuffer instances lexicographically
StringBuffer#append(StringBuffer):::Appends the specified StringBuffer to this sequence
StringBuffer#append(CharSequence):::Appends the specified CharSequence to this sequence
StringBuilder#compareTo(StringBuilder):::Compares two StringBuilder instances lexicographically
StringBuilder#append(StringBuffer):::Appends the specified StringBuffer to this sequence
StringConcatHelper#mixLen(int, boolean):::Mix value length into current length
StringConcatHelper#mixLen(int, byte):::Mix value length into current length
StringConcatHelper#mixLen(int, char):::Mix value length into current length
StringConcatHelper#mixLen(int, short):::Mix value length into current length
StringConcatHelper#mixLen(int, int):::Mix value length into current length
StringConcatHelper#mixLen(int, long):::Mix value length into current length
StringConcatHelper#mixLen(int, String):::Mix value length into current length
StringConcatHelper#mixCoder(byte, char):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, String):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, boolean):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, byte):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, short):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, int):::Mix coder into current coder
StringConcatHelper#mixCoder(byte, long):::Mix coder into current coder
StringConcatHelper#prepend(int, byte[], byte, boolean):::Prepends the stringly representation of boolean value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, byte):::Prepends the stringly representation of byte value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, char):::Prepends the stringly representation of char value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, short):::Prepends the stringly representation of short value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, int):::Prepends the stringly representation of integer value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, long):::Prepends the stringly representation of long value into buffer, given the coder and final index
StringConcatHelper#prepend(int, byte[], byte, String):::Prepends the stringly representation of String value into buffer, given the coder and final index
StringConcatHelper#newString(byte[], int, byte):::Instantiates the String with given buffer and coder
StringConcatHelper#initialCoder():::Provides the initial coder for the String.
StringUTF16#indexOfLatin1(byte[], byte[]):::Handles indexOf Latin1 substring in UTF16 string.
StringUTF16#getChars(int, int, byte[]):::This is a variant of Integer#getChars(int, int, byte[]), but for UTF-16 coder.
StringUTF16#getChars(long, int, byte[]):::This is a variant of Long#getChars(long, int, byte[]), but for UTF-16 coder.
System#setIn(InputStream):::Reassigns the "standard" input stream
System#setOut(PrintStream):::Reassigns the "standard" output stream
System#setErr(PrintStream):::Reassigns the "standard" error output stream
System#console():::Returns the unique java.io.Console Console object associated with the current Java virtual machine, if any.
System#inheritedChannel():::Returns the channel inherited from the entity that created this Java virtual machine
System#setSecurityManager(SecurityManager):::Sets the System security
System#getSecurityManager():::Gets the system security interface.
System#currentTimeMillis():::Returns the current time in milliseconds
System#nanoTime():::Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds
System#arraycopy(Object, int, Object, int, int):::Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array
System#identityHashCode(Object):::Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode()
System#getProperties():::Determines the current system properties
System#lineSeparator():::Returns the system-dependent line separator string
System#setProperties(Properties):::Sets the system properties to the Properties argument
System#getProperty(String):::Gets the system property indicated by the specified key
System#getProperty(String, String):::Gets the system property indicated by the specified key
System#setProperty(String, String):::Sets the system property indicated by the specified key
System#clearProperty(String):::Removes the system property indicated by the specified key
System#getenv(String):::Gets the value of the specified environment variable
System#getenv():::Returns an unmodifiable string map view of the current system environment
System.Logger#getName():::Returns the name of this logger.
System.Logger#isLoggable(Level):::Checks if a message of the given level would be logged by this logger.
System.Logger#log(Level, String):::Logs a message.
System.Logger#log(Level, Supplier):::Logs a lazily supplied message
System.Logger#log(Level, Object):::Logs a message produced from the given object
System.Logger#log(Level, String, Throwable):::Logs a message associated with a given throwable.
System.Logger#log(Level, Supplier, Throwable):::Logs a lazily supplied message associated with a given throwable
System.Logger#log(Level, String, Object...):::Logs a message with an optional list of parameters.
System.Logger#log(Level, ResourceBundle, String, Throwable):::Logs a localized message associated with a given throwable
System.Logger#log(Level, ResourceBundle, String, Object...):::Logs a message with resource bundle and an optional list of parameters
System.LoggerFinder#getLogger(String, Module):::Returns an instance of Logger Logger for the given module.
System.LoggerFinder#getLocalizedLogger(String, ResourceBundle, Module):::Returns a localizable instance of Logger Logger for the given module
System.LoggerFinder#getLoggerFinder():::Returns the LoggerFinder instance
System#getLogger(String):::Returns an instance of Logger Logger for the caller's use.
System#getLogger(String, ResourceBundle):::Returns a localizable instance of Logger Logger for the caller's use
System#exit(int):::Terminates the currently running Java Virtual Machine
System#gc():::Runs the garbage collector
System#runFinalization():::Runs the finalization methods of any objects pending finalization
System#load(String):::Loads the native library specified by the filename argument
System#loadLibrary(String):::Loads the native library specified by the libname argument
System#mapLibraryName(String):::Maps a library name into a platform-specific string representing a native library.
Thread#currentThread():::Returns a reference to the currently executing thread object.
Thread#yield():::A hint to the scheduler that the current thread is willing to yield its current use of a processor
Thread#sleep(long):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers
Thread#sleep(long, int):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers
Thread#onSpinWait():::Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities
Thread#clone():::Throws CloneNotSupportedException as a Thread can not be meaningfully cloned
Thread#start():::Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread
Thread#run():::If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns
Thread#stop():::Forces the thread to stop executing
Thread#interrupt():::Interrupts this thread
Thread#interrupted():::Tests whether the current thread has been interrupted
Thread#isInterrupted():::Tests whether this thread has been interrupted
Thread#isAlive():::Tests if this thread is alive
Thread#suspend():::Suspends this thread
Thread#resume():::Resumes a suspended thread
Thread#setPriority(int):::Changes the priority of this thread
Thread#getPriority():::Returns this thread's priority.
Thread#setName(String):::Changes the name of this thread to be equal to the argument name
Thread#getName():::Returns this thread's name.
Thread#getThreadGroup():::Returns the thread group to which this thread belongs
Thread#activeCount():::Returns an estimate of the number of active threads in the current thread's java.lang.ThreadGroup thread group and its subgroups
Thread#enumerate(Thread[]):::Copies into the specified array every active thread in the current thread's thread group and its subgroups
Thread#countStackFrames():::Counts the number of stack frames in this thread
Thread#join(long):::Waits at most millis milliseconds for this thread to die
Thread#join(long, int):::Waits at most millis milliseconds plus nanos nanoseconds for this thread to die
Thread#join():::Waits for this thread to die
Thread#dumpStack():::Prints a stack trace of the current thread to the standard error stream
Thread#setDaemon(boolean):::Marks this thread as either a #isDaemon daemon thread or a user thread
Thread#isDaemon():::Tests if this thread is a daemon thread.
Thread#checkAccess():::Determines if the currently running thread has permission to modify this thread
Thread#toString():::Returns a string representation of this thread, including the thread's name, priority, and thread group.
Thread#getContextClassLoader():::Returns the context ClassLoader for this thread
Thread#setContextClassLoader(ClassLoader):::Sets the context ClassLoader for this Thread
Thread#holdsLock(Object):::Returns true if and only if the current thread holds the monitor lock on the specified object
Thread#getStackTrace():::Returns an array of stack trace elements representing the stack dump of this thread
Thread#getAllStackTraces():::Returns a map of stack traces for all live threads
Thread#getId():::Returns the identifier of this Thread
Thread#getState():::Returns the state of this thread
Thread.UncaughtExceptionHandler#uncaughtException(Thread, Throwable):::Method invoked when the given thread terminates due to the given uncaught exception
Thread#setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread
Thread#getDefaultUncaughtExceptionHandler():::Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception
Thread#getUncaughtExceptionHandler():::Returns the handler invoked when this thread abruptly terminates due to an uncaught exception
Thread#setUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the handler invoked when this thread abruptly terminates due to an uncaught exception
Thread#processQueue(ReferenceQueue>, ConcurrentMap>, ?>):::Removes from the specified map any keys that have been enqueued on the specified reference queue.
Thread.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.
Thread.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.
ThreadGroup#getName():::Returns the name of this thread group.
ThreadGroup#getParent():::Returns the parent of this thread group
ThreadGroup#getMaxPriority():::Returns the maximum priority of this thread group
ThreadGroup#isDaemon():::Tests if this thread group is a daemon thread group
ThreadGroup#isDestroyed():::Tests if this thread group has been destroyed.
ThreadGroup#setDaemon(boolean):::Changes the daemon status of this thread group
ThreadGroup#setMaxPriority(int):::Sets the maximum priority of the group
ThreadGroup#parentOf(ThreadGroup):::Tests if this thread group is either the thread group argument or one of its ancestor thread groups.
ThreadGroup#checkAccess():::Determines if the currently running thread has permission to modify this thread group
ThreadGroup#activeCount():::Returns an estimate of the number of active threads in this thread group and its subgroups
ThreadGroup#enumerate(Thread[]):::Copies into the specified array every active thread in this thread group and its subgroups
ThreadGroup#enumerate(Thread[], boolean):::Copies into the specified array every active thread in this thread group
ThreadGroup#activeGroupCount():::Returns an estimate of the number of active groups in this thread group and its subgroups
ThreadGroup#enumerate(ThreadGroup[]):::Copies into the specified array references to every active subgroup in this thread group and its subgroups
ThreadGroup#enumerate(ThreadGroup[], boolean):::Copies into the specified array references to every active subgroup in this thread group
ThreadGroup#stop():::Stops all threads in this thread group
ThreadGroup#interrupt():::Interrupts all threads in this thread group
ThreadGroup#suspend():::Suspends all threads in this thread group
ThreadGroup#resume():::Resumes all threads in this thread group
ThreadGroup#destroy():::Destroys this thread group and all of its subgroups
ThreadGroup#addUnstarted():::Increments the count of unstarted threads in the thread group
ThreadGroup#add(Thread):::Adds the specified thread to this thread group
ThreadGroup#threadStartFailed(Thread):::Notifies the group that the thread t has failed an attempt to start
ThreadGroup#threadTerminated(Thread):::Notifies the group that the thread t has terminated
ThreadGroup#list():::Prints information about this thread group to the standard output
ThreadGroup#uncaughtException(Thread, Throwable):::Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed
ThreadGroup#allowThreadSuspension(boolean):::Used by VM to control lowmem implicit suspension.
ThreadGroup#toString():::Returns a string representation of this Thread group.
ThreadLocal#initialValue():::Returns the current thread's "initial value" for this thread-local variable
ThreadLocal#withInitial(Supplier):::Creates a thread local variable
ThreadLocal#get():::Returns the value in the current thread's copy of this thread-local variable
ThreadLocal#isPresent():::Returns true if there is a value in the current thread's copy of this thread-local variable, even if that values is null.
ThreadLocal#set(T):::Sets the current thread's copy of this thread-local variable to the specified value
ThreadLocal#remove():::Removes the current thread's value for this thread-local variable
ThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal
ThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal
ThreadLocal#createInheritedMap(ThreadLocalMap):::Factory method to create map of inherited thread locals
ThreadLocal#childValue(T):::Method childValue is visibly defined in subclass InheritableThreadLocal, but is internally defined here for the sake of providing createInheritedMap factory method without needing to subclass the map class in InheritableThreadLocal
Throwable#getMessage():::Returns the detail message string of this throwable.
Throwable#getLocalizedMessage():::Creates a localized description of this throwable
Throwable#getCause():::Returns the cause of this throwable or null if the cause is nonexistent or unknown
Throwable#initCause(Throwable):::Initializes the cause of this throwable to the specified value
Throwable#toString():::Returns a short description of this throwable
Throwable#printStackTrace():::Prints this throwable and its backtrace to the standard error stream
Throwable#printStackTrace(PrintStream):::Prints this throwable and its backtrace to the specified print stream.
Throwable#printStackTrace(PrintWriter):::Prints this throwable and its backtrace to the specified print writer.
Throwable#fillInStackTrace():::Fills in the execution stack trace
Throwable#getStackTrace():::Provides programmatic access to the stack trace information printed by #printStackTrace()
Throwable#setStackTrace(StackTraceElement[]):::Sets the stack trace elements that will be returned by #getStackTrace() and printed by #printStackTrace() and related methods
Throwable#addSuppressed(Throwable):::Appends the specified exception to the exceptions that were suppressed in order to deliver this exception
Throwable#getSuppressed():::Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception
TypeNotPresentException#typeName():::Returns the fully qualified name of the unavailable type.
VersionProps#print(boolean):::In case you were wondering this method is called by java -version.
VersionProps#println(boolean):::This is the same as print except that it adds an extra line-feed at the end, typically used by the -showversion in the launcher
WeakPairMap#containsKeyPair(K1, K2):::Tests if the specified pair of keys are associated with a value in the WeakPairMap.
WeakPairMap#get(K1, K2):::Returns the value to which the specified pair of keys is mapped, or null if this WeakPairMap contains no mapping for the key pair
WeakPairMap#put(K1, K2, V):::Maps the specified key pair to the specified value in this WeakPairMap
WeakPairMap#putIfAbsent(K1, K2, V):::If the specified key pair is not already associated with a value, associates it with the given value and returns null, else does nothing and returns the currently associated value.
WeakPairMap#computeIfAbsent(K1, K2, BiFunction):::If the specified key pair is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this WeakPairMap unless null
WeakPairMap#values():::Returns a Collection view of the values contained in this WeakPairMap
AbstractConstantGroup#toString():::Produce a string using the non-resolving list view, where unresolved elements are presented as asterisks.
AbstractConstantGroup.WithCache#fillCache(int):::hook for local subclasses
AbstractValidatingLambdaMetafactory#buildCallSite():::Build the CallSite.
AbstractValidatingLambdaMetafactory#validateMetafactoryArgs():::Check the meta-factory arguments for errors
BootstrapCallInfo#bootstrapMethod():::Returns the bootstrap method for this call.
BootstrapCallInfo#invocationName():::Returns the method name or constant name for this call.
BootstrapCallInfo#invocationType():::Returns the method type or constant type for this call.
BootstrapCallInfo#makeBootstrapCallInfo(MethodHandle, String, T, ConstantGroup):::Make a new bootstrap call descriptor with the given components.
BootstrapMethodInvoker#invoke(Class, MethodHandle, String, Object, Object, Class):::Factored code for invoking a bootstrap method for invokedynamic or a dynamic constant.
BootstrapMethodInvoker#pushMePullYou(MethodHandle, boolean):::Given a push-mode BSM (taking one argument) convert it to a  pull-mode BSM (taking N pre-resolved arguments)
BoundMethodHandle#makeReinvoker(MethodHandle):::A reinvoker MH has this form: lambda (bmh, arg*) { thismh = bmh[0]; invokeBasic(thismh, arg*) }
CallSite#type():::Returns the type of this call site's target
CallSite#getTarget():::Returns the target method of the call site, according to the behavior defined by this call site's specific class
CallSite#setTarget(MethodHandle):::Updates the target method of this call site, according to the behavior defined by this call site's specific class
CallSite#dynamicInvoker():::Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
ClassSpecializer#topClass():::Return the top type mirror, for type T
ClassSpecializer#keyType():::Return the key type mirror, for type K
ClassSpecializer#metaType():::Return the species metadata type mirror, for type S
ClassSpecializer#baseConstructorType():::Report the leading arguments (if any) required by every species factory
ClassSpecializer#topSpecies():::Return the trivial species for the null sequence of arguments.
ClassSpecializer#transformMethods():::Return the list of transform methods originally given at creation of this specializer.
ClassSpecializer#factory():::Return the factory object used to build and load concrete species code.
ClassSpecializer.SpeciesData#speciesCode():::Throws NPE if this species is not yet resolved.
ClassSpecializer.SpeciesData#getter(int):::Return a MethodHandle which can get the indexed field of this species
ClassSpecializer.SpeciesData#getterFunction(int):::Return a LambdaForm.Name containing a LambdaForm.NamedFunction that represents a MH bound to a generic invoker, which in turn forwards to the corresponding getter.
ClassSpecializer.SpeciesData#deriveFieldTypes(K):::Given a key, derive the list of field types, which all instances of this species must store.
ClassSpecializer.SpeciesData#deriveTransformHelper(MemberName, int):::Given the index of a method in the transforms list, supply a factory method that takes the arguments of the transform, plus the local fields, and produce a value of the required type
ClassSpecializer.SpeciesData#deriveTransformHelperArguments(MemberName, int, List, List):::During code generation, this method is called once per transform to determine what is the mix of arguments to hand to the transform-helper
ClassSpecializer.SpeciesData#deriveClassName():::Given a key, generate the name of the class which implements the species for that key
ClassSpecializer.SpeciesData#deriveTypeString():::Default implementation collects basic type characters, plus possibly type names, if some types don't correspond to basic types.
ClassSpecializer.SpeciesData#deriveSuperClass():::Report what immediate super-class to use for the concrete class of this species
ClassSpecializer.Factory#loadSpecies(S):::Get a concrete subclass of the top class for a given combination of bound types.
ClassSpecializer.Factory#generateConcreteSpeciesCode(String, ClassSpecializer.SpeciesData):::Generate a concrete subclass of the top class for a given combination of bound types
ClassSpecializer.Factory#chooseFieldName(Class, int):::Field names in concrete species classes adhere to this pattern: type + index, where type is a single character (L, I, J, F, D)
ClassSpecializer#makeFactory():::Hook that virtualizes the Factory class, allowing subclasses to extend it.
ConstantBootstraps#nullConstant(MethodHandles.Lookup, String, Class):::Returns a null object reference for the reference type specified by type.
ConstantBootstraps#primitiveClass(MethodHandles.Lookup, String, Class):::Returns a Class mirror for the primitive type whose type descriptor is specified by name.
ConstantBootstraps#enumConstant(MethodHandles.Lookup, String, Class):::Returns an enum constant of the type specified by type with the name specified by name.
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class, Class):::Returns the value of a static final field.
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class):::Returns the value of a static final field declared in the class which is the same as the field's type (or, for primitive-valued fields, declared in the wrapper class.)  This is a simplified form of #getStaticFinal(MethodHandles.Lookup, String, Class, Class) for the case where a class declares distinguished constant instances of itself.
ConstantBootstraps#invoke(MethodHandles.Lookup, String, Class, MethodHandle, Object...):::Returns the result of invoking a method handle with the provided arguments
ConstantBootstraps#fieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for an instance field.
ConstantBootstraps#staticFieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for a static field.
ConstantBootstraps#arrayVarHandle(MethodHandles.Lookup, String, Class, Class):::Finds a VarHandle for an array type.
ConstantCallSite#getTarget():::Returns the target method of the call site, which behaves like a final field of the ConstantCallSite
ConstantCallSite#setTarget(MethodHandle):::Always throws an UnsupportedOperationException
ConstantCallSite#dynamicInvoker():::Returns this call site's permanent target
ConstantGroup#size():::Returns the number of constants in this group
ConstantGroup#get(int):::Returns the selected constant, resolving it if necessary
ConstantGroup#get(int, Object):::Returns the selected constant, or the given sentinel value if there is none available
ConstantGroup#isPresent(int):::Returns an indication of whether a constant may be available
ConstantGroup#asList():::Create a view on this group as a List view
ConstantGroup#asList(Object):::Create a view on this group as a List view
ConstantGroup#subGroup(int, int):::Create a view on a sub-sequence of this group.
ConstantGroup#copyConstants(int, int, Object[], int):::Copy a sequence of constant values into a given buffer
ConstantGroup#copyConstants(int, int, Object[], int, Object):::Copy a sequence of constant values into a given buffer
ConstantGroup#makeConstantGroup(List, Object, IntFunction):::Make a new constant group with the given constants
ConstantGroup#makeConstantGroup(List):::Make a new constant group with the given constant values
DelegatingMethodHandle#getTarget():::Define this to extract the delegated target which supplies the invocation behavior.
DelegatingMethodHandle#makeReinvokerForm(MethodHandle, int, Object, boolean, NamedFunction, NamedFunction):::Create a LF which simply reinvokes a target of the given basic type.
DirectMethodHandle#internalMemberName(Object):::Static wrapper for DirectMethodHandle.internalMemberName.
DirectMethodHandle#checkReceiver(Object):::Used for interface receiver type checks, by Interface and Special modes.
InnerClassLambdaMetafactory#buildCallSite():::Build the CallSite
InvokerBytecodeGenerator#generateCustomizedCode(LambdaForm, MethodType):::Generate customized bytecode for a given LambdaForm.
InvokerBytecodeGenerator#emitInvoke(Name):::Emit an invoke for the given name.
InvokerBytecodeGenerator#emitStaticInvoke(MemberName, Name):::Emit an invoke for the given name, using the MemberName directly.
InvokerBytecodeGenerator#generateLambdaFormInterpreterEntryPoint(MethodType):::Generate bytecode for a LambdaForm.vmentry which calls interpretWithArguments.
InvokerBytecodeGenerator#generateNamedFunctionInvoker(MethodTypeForm):::Generate bytecode for a NamedFunction invoker.
Invokers#invokeHandleForm(MethodType, boolean, int):::Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker
LambdaForm#customize(MethodHandle):::Customize LambdaForm for a particular MethodHandle
LambdaForm#uncustomize():::Get uncustomized flavor of the LambdaForm
LambdaForm#nameRefsAreLegal():::Check that all embedded Name references are localizable to this lambda, and are properly ordered after their corresponding definitions
LambdaForm#returnType():::Report the return type.
LambdaForm#parameterType(int):::Report the N-th argument type.
LambdaForm#parameter(int):::Report the N-th argument name.
LambdaForm#parameterConstraint(int):::Report the N-th argument type constraint.
LambdaForm#arity():::Report the arity.
LambdaForm#expressionCount():::Report the number of expressions (non-parameter names).
LambdaForm#methodType():::Return the method type corresponding to my basic type signature.
LambdaForm#basicTypeSignature():::Return ABC_Z, where the ABC are parameter type characters, and Z is the return type character.
LambdaForm#isSelectAlternative(int):::Check if i-th name is a call to MethodHandleImpl.selectAlternative.
LambdaForm#isGuardWithCatch(int):::Check if i-th name is a start of GuardWithCatch idiom.
LambdaForm#isTryFinally(int):::Check if i-th name is a start of the tryFinally idiom.
LambdaForm#isLoop(int):::Check if i-th name is a start of the loop idiom.
LambdaForm#prepare():::Make this LF directly executable, as part of a MethodHandle
LambdaForm#compileToBytecode():::Generate optimizable bytecode for this form.
LambdaForm#shortenSignature(String):::Hack to make signatures more readable when they show up in method names
LambdaForm.Name#replaceNames(Name[], Name[], int, int):::In the arguments of this Name, replace oldNames[i] pairwise by newNames[i]
LambdaForm.Name#isInvokeBasic():::Check if MemberName is a call to MethodHandle.invokeBasic.
LambdaForm.Name#isLinkerMethodInvoke():::Check if MemberName is a call to MethodHandle.linkToStatic, etc.
LambdaForm.Name#lastUseIndex(Name):::Return the index of the last occurrence of n in the argument array
LambdaForm.Name#useCount(Name):::Return the number of occurrences of n in the argument array
LambdaForm#lastUseIndex(Name):::Return the index of the last name which contains n as an argument
LambdaForm#useCount(Name):::Return the number of times n is used as an argument or return value.
LambdaFormBuffer#startEdit():::Create a private, writable copy of names
LambdaFormBuffer#setResult(Name):::Change the result name
LambdaFormBuffer#endEdit():::Finish a transaction.
LambdaFormBuffer#replaceFunctions(List, List, Object...):::Replace any Name whose function is in oldFns with a copy  whose function is in the corresponding position in newFns
LambdaFormBuffer#renameParameter(int, Name):::Replace a parameter by a fresh parameter.
LambdaFormBuffer#replaceParameterByNewExpression(int, Name):::Replace a parameter by a fresh expression.
LambdaFormBuffer#replaceParameterByCopy(int, int):::Replace a parameter by another parameter or expression already in the form.
LambdaFormBuffer#insertExpression(int, Name):::Insert a fresh expression.
LambdaFormBuffer#insertParameter(int, Name):::Insert a fresh parameter.
LambdaMetafactory#metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments
LambdaMetafactory#altMetafactory(MethodHandles.Lookup, String, MethodType, Object...):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments
MemberName#getDeclaringClass():::Return the declaring class of this member
MemberName#getClassLoader():::Utility method producing the class loader of the declaring class.
MemberName#getName():::Return the simple name of this member
MemberName#getMethodType():::Return the declared type of this member, which  must be a method or constructor.
MemberName#getMethodDescriptor():::Return the descriptor of this member, which  must be a method or constructor.
MemberName#getInvocationType():::Return the actual type under which this method or constructor must be invoked
MemberName#getParameterTypes():::Utility method producing the parameter types of the method type.
MemberName#getReturnType():::Utility method producing the return type of the method type.
MemberName#getFieldType():::Return the declared type of this member, which  must be a field or type
MemberName#getType():::Utility method to produce either the method type or field type of this member.
MemberName#getSignature():::Utility method to produce the signature of this member,  used within the class file format to describe its type.
MemberName#getModifiers():::Return the modifier flags of this member.
MemberName#getReferenceKind():::Return the reference kind of this member, or zero if none.
MemberName#isMethodHandleInvoke():::Utility method to query if this member is a method handle invocation (invoke or invokeExact).
MemberName#isStatic():::Utility method to query the modifier flags of this member.
MemberName#isPublic():::Utility method to query the modifier flags of this member.
MemberName#isPrivate():::Utility method to query the modifier flags of this member.
MemberName#isProtected():::Utility method to query the modifier flags of this member.
MemberName#isFinal():::Utility method to query the modifier flags of this member.
MemberName#canBeStaticallyBound():::Utility method to query whether this member or its defining class is final.
MemberName#isVolatile():::Utility method to query the modifier flags of this member.
MemberName#isAbstract():::Utility method to query the modifier flags of this member.
MemberName#isNative():::Utility method to query the modifier flags of this member.
MemberName#isBridge():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isVarargs():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isSynthetic():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isInvocable():::Utility method to query whether this member is a method or constructor.
MemberName#isFieldOrMethod():::Utility method to query whether this member is a method, constructor, or field.
MemberName#isMethod():::Query whether this member is a method.
MemberName#isConstructor():::Query whether this member is a constructor.
MemberName#isField():::Query whether this member is a field.
MemberName#isType():::Query whether this member is a type.
MemberName#isPackage():::Utility method to query whether this member is neither public, private, nor protected.
MemberName#isCallerSensitive():::Query whether this member has a CallerSensitive annotation.
MemberName#isAccessibleFrom(Class):::Utility method to query whether this member is accessible from a given lookup class.
MemberName#refersTo(Class, String):::Check if MemberName is a call to a method named name in class declaredClass.
MemberName#asConstructor():::If this MN is not REF_newInvokeSpecial, return a clone with that ref
MemberName#asNormalOriginal():::If this MN is a REF_invokeSpecial, return a clone with the "normal" kind  REF_invokeVirtual; also switch either to REF_invokeInterface if clazz.isInterface
MemberName#makeMethodHandleInvoke(String, MethodType):::Create a name for a signature-polymorphic invoker
MemberName#getDefinition():::Get the definition of this member name
MemberName#equals(MemberName):::Decide if two member names have exactly the same symbolic content
MemberName#hasReceiverTypeDispatch():::Query whether this member name is resolved to a non-static, non-final method.
MemberName#isResolved():::Query whether this member name is resolved
MemberName#toString():::Produce a string form of this member name
MemberName.Factory#resolveOrFail(byte, MemberName, Class, Class):::Produce a resolved version of the given member
MemberName.Factory#resolveOrNull(byte, MemberName, Class):::Produce a resolved version of the given member
MemberName.Factory#getMethods(Class, boolean, Class):::Return a list of all methods defined by the given class
MemberName.Factory#getMethods(Class, boolean, String, MethodType, Class):::Return a list of matching methods defined by the given class
MemberName.Factory#getConstructors(Class, Class):::Return a list of all constructors defined by the given class
MemberName.Factory#getFields(Class, boolean, Class):::Return a list of all fields defined by the given class
MemberName.Factory#getFields(Class, boolean, String, Class, Class):::Return a list of all fields defined by the given class
MemberName.Factory#getNestedTypes(Class, boolean, Class):::Return a list of all nested types defined by the given class
MethodHandle#type():::Reports the type of this method handle
MethodHandle#invokeExact(Object...):::Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match
MethodHandle#invoke(Object...):::Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values
MethodHandle#invokeBasic(Object...):::Private method for trusted invocation of a method handle respecting simplified signatures
MethodHandle#linkToVirtual(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeVirtual
MethodHandle#linkToStatic(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeStatic
MethodHandle#linkToSpecial(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeSpecial
MethodHandle#linkToInterface(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeInterface
MethodHandle#invokeWithArguments(Object...):::Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument array
MethodHandle#invokeWithArguments(java.util.List):::Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument list
MethodHandle#asType(MethodType):::Produces an adapter method handle which adapts the type of the current method handle to a new type
MethodHandle#asSpreader(Class, int):::Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments
MethodHandle#asSpreader(int, Class, int):::Makes an array-spreading method handle, which accepts an array argument at a given position and spreads its elements as positional arguments in place of the array
MethodHandle#withVarargs(boolean):::Adapts this method handle to be #asVarargsCollector variable arity if the boolean flag is true, else #asFixedArity fixed arity
MethodHandle#asCollector(Class, int):::Makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument
MethodHandle#asCollector(int, Class, int):::Makes an array-collecting method handle, which accepts a given number of positional arguments starting at a given position, and collects them into an array argument
MethodHandle#asVarargsCollector(Class):::Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument
MethodHandle#isVarargsCollector():::Determines if this method handle supports #asVarargsCollector variable arity calls
MethodHandle#asFixedArity():::Makes a fixed arity method handle which is otherwise equivalent to the current method handle
MethodHandle#bindTo(Object):::Binds a value x to the first argument of a method handle, without invoking it
MethodHandle#toString():::Returns a string representation of the method handle, starting with the string "MethodHandle" and ending with the string representation of the method handle's type
MethodHandle#debugString():::Return a string with a several lines describing the method handle structure
MethodHandle#rebind():::Require this method handle to be a BMH, or else replace it with a "wrapper" BMH
MethodHandleImpl#makePairwiseConvert(MethodHandle, MethodType, boolean, boolean):::Create a JVM-level adapter method handle to conform the given method handle to the similar newType, using only pairwise argument conversions
MethodHandleImpl#valueConversion(Class, Class, boolean, boolean):::Find a conversion function from the given source to the given destination
MethodHandleImpl#makeSpreadArguments(MethodHandle, Class, int, int):::Factory method:  Spread selected argument.
MethodHandleImpl#makeCollectArguments(MethodHandle, MethodHandle, int, boolean):::Factory method:  Collect or filter selected argument(s).
MethodHandleImpl#makeBlockInliningWrapper(MethodHandle):::Block inlining during JIT-compilation of a target method handle if it hasn't been invoked enough times
MethodHandleImpl#guardWithCatch(MethodHandle, Class, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitGuardWithCatch emitGuardWithCatch).
MethodHandleImpl#bindCaller(MethodHandle, Class):::Create an alias for the method handle which, when called, appears to be called from the same class loader and protection domain as hostClass
MethodHandleImpl#varargsArray(int):::Return a method handle that takes the indicated number of Object  arguments and returns an Object array of them, as if for varargs.
MethodHandleImpl#varargsArray(Class, int):::Return a method handle that takes the indicated number of  typed arguments and returns an array of them
MethodHandleImpl#makeLoop(Class, List>, List, List, List, List):::Assembles a loop method handle from the given handles and type information.
MethodHandleImpl#loop(BasicType[], LoopClauses, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitLoop(int)).
MethodHandleImpl#countedLoopPredicate(int, int):::This method is bound as the predicate in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops.
MethodHandleImpl#countedLoopStep(int, int):::This method is bound as the step function in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops to increment the counter.
MethodHandleImpl#initIterator(Iterable):::This is bound to initialize the loop-local iterator in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#iteratePredicate(Iterator):::This method is bound as the predicate in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#iterateNext(Iterator):::This method is bound as the step for retrieving the current value from the iterator in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#makeTryFinally(MethodHandle, MethodHandle, Class, List>):::Makes a try-finally handle that conforms to the type constraints.
MethodHandleImpl#tryFinally(MethodHandle, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitTryFinally emitTryFinally).
MethodHandleInfo#getReferenceKind():::Returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field
MethodHandleInfo#getDeclaringClass():::Returns the class in which the cracked method handle's underlying member was defined.
MethodHandleInfo#getName():::Returns the name of the cracked method handle's underlying member
MethodHandleInfo#getMethodType():::Returns the nominal type of the cracked symbolic reference, expressed as a method type
MethodHandleInfo#reflectAs(Class, Lookup):::Reflects the underlying member as a method, constructor, or field object
MethodHandleInfo#getModifiers():::Returns the access modifiers of the underlying member.
MethodHandleInfo#referenceKindToString(int):::Returns the descriptive name of the given reference kind, as defined in the table above
MethodHandleInfo#toString(int, Class, String, MethodType):::Returns a string representation for a MethodHandleInfo, given the four parts of its symbolic reference
MethodHandleNatives#setCallSiteTargetNormal(CallSite, MethodHandle):::Tell the JVM that we need to change the target of a CallSite.
MethodHandleNatives#linkCallSite(Object, int, Object, Object, Object, Object, Object[]):::The JVM is linking an invokedynamic instruction
MethodHandleNatives#staticArgumentsPulled(Object):::The JVM is requesting pull-mode bootstrap when it provides  a tuple of the form int[]{ argc, vmindex }
MethodHandleNatives#isPullModeBSM(MethodHandle):::A BSM runs in pull-mode if and only if its sole arguments are (Lookup, BootstrapCallInfo), or can be converted pairwise to those types, and it is not of variable arity
MethodHandleNatives#findMethodHandleType(Class, Class[]):::The JVM wants a pointer to a MethodType
MethodHandleNatives#linkMethod(Class, int, Class, String, Object, Object[]):::The JVM wants to link a call site that requires a dynamic type check
MethodHandleNatives#linkMethodHandleConstant(Class, int, Class, String, Object):::The JVM is resolving a CONSTANT_MethodHandle CP entry
MethodHandleNatives#mapLookupExceptionToError(ReflectiveOperationException):::Map a reflective exception to a linkage error.
MethodHandleNatives#initCauseFrom(E, Exception):::Use best possible cause for err.initCause(), substituting the cause for err itself if the cause has the same (or better) type.
MethodHandleNatives#isCallerSensitive(MemberName):::Is this method a caller-sensitive method? I.e., does it call Reflection.getCallerClass or a similar method to ask about the identity of its caller?
MethodHandleProxies#isWrapperInstance(Object):::Determines if the given object was produced by a call to #asInterfaceInstance asInterfaceInstance.
MethodHandleProxies#wrapperInstanceTarget(Object):::Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance
MethodHandleProxies#wrapperInstanceType(Object):::Recovers the unique single-method interface type for which this wrapper instance was created
MethodHandles#lookup():::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors of the caller
MethodHandles#publicLookup():::Returns a Lookup lookup object which is trusted minimally
MethodHandles#privateLookupIn(Class, Lookup):::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors, including  private access, on a target class
MethodHandles#reflectAs(Class, MethodHandle):::Performs an unchecked "crack" of a direct method handle
MethodHandles.Lookup#lookupClass():::Tells which class is performing the lookup
MethodHandles.Lookup#lookupModes():::Tells which access-protection classes of members this lookup object can produce
MethodHandles.Lookup#in(Class):::Creates a lookup on the specified new lookup class
MethodHandles.Lookup#dropLookupMode(int):::Creates a lookup on the same lookup class which this lookup object finds members, but with a lookup mode that has lost the given lookup mode
MethodHandles.Lookup#defineClass(byte[]):::Defines a class to the same class loader and in the same runtime package and java.security.ProtectionDomain protection domain as this lookup's #lookupClass() lookup class
MethodHandles.Lookup#toString():::Displays the name of the class from which lookups are to be made
MethodHandles.Lookup#findStatic(Class, String, MethodType):::Produces a method handle for a static method
MethodHandles.Lookup#findVirtual(Class, String, MethodType):::Produces a method handle for a virtual method
MethodHandles.Lookup#findConstructor(Class, MethodType):::Produces a method handle which creates an object and initializes it, using the constructor of the specified type
MethodHandles.Lookup#findClass(String):::Looks up a class by name from the lookup context defined by this Lookup object
MethodHandles.Lookup#accessClass(Class):::Determines if a class can be accessed from the lookup context defined by this Lookup object
MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class):::Produces an early-bound method handle for a virtual method
MethodHandles.Lookup#findGetter(Class, String, Class):::Produces a method handle giving read access to a non-static field
MethodHandles.Lookup#findSetter(Class, String, Class):::Produces a method handle giving write access to a non-static field
MethodHandles.Lookup#findVarHandle(Class, String, Class):::Produces a VarHandle giving access to a non-static field name of type type declared in a class of type recv
MethodHandles.Lookup#findStaticGetter(Class, String, Class):::Produces a method handle giving read access to a static field
MethodHandles.Lookup#findStaticSetter(Class, String, Class):::Produces a method handle giving write access to a static field
MethodHandles.Lookup#findStaticVarHandle(Class, String, Class):::Produces a VarHandle giving access to a static field name of type type declared in a class of type decl
MethodHandles.Lookup#bind(Object, String, MethodType):::Produces an early-bound method handle for a non-static method
MethodHandles.Lookup#unreflect(Method):::Makes a direct method handle to m, if the lookup class has permission
MethodHandles.Lookup#unreflectSpecial(Method, Class):::Produces a method handle for a reflected method
MethodHandles.Lookup#unreflectConstructor(Constructor):::Produces a method handle for a reflected constructor
MethodHandles.Lookup#unreflectGetter(Field):::Produces a method handle giving read access to a reflected field
MethodHandles.Lookup#unreflectSetter(Field):::Produces a method handle giving write access to a reflected field
MethodHandles.Lookup#unreflectVarHandle(Field):::Produces a VarHandle giving access to a reflected field f of type T declared in a class of type R
MethodHandles.Lookup#revealDirect(MethodHandle):::Cracks a direct method handle created by this lookup object or a similar one
MethodHandles.Lookup#checkMethodName(byte, String):::Check name for an illegal leading "&lt;" character.
MethodHandles.Lookup#findBoundCallerClass(MemberName):::Find my trustable caller class if m is a caller sensitive method
MethodHandles.Lookup#hasPrivateAccess():::Returns true if this lookup has PRIVATE access.
MethodHandles.Lookup#checkSecurityManager(Class, MemberName):::Perform necessary access checks
MethodHandles.Lookup#checkAccess(byte, Class, MemberName):::Check public/protected/private bits on the symbolic reference class and its member.
MethodHandles#arrayConstructor(Class):::Produces a method handle constructing arrays of a desired type, as if by the anewarray bytecode
MethodHandles#arrayLength(Class):::Produces a method handle returning the length of an array, as if by the arraylength bytecode
MethodHandles#arrayElementGetter(Class):::Produces a method handle giving read access to elements of an array, as if by the aaload bytecode
MethodHandles#arrayElementSetter(Class):::Produces a method handle giving write access to elements of an array, as if by the astore bytecode
MethodHandles#arrayElementVarHandle(Class):::Produces a VarHandle giving access to elements of an array of type arrayClass
MethodHandles#byteArrayViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a byte[] array viewed as if it were a different primitive array type, such as int[] or long[]
MethodHandles#byteBufferViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a ByteBuffer viewed as if it were an array of elements of a different primitive component type to that of byte, such as int[] or long[]
MethodHandles#spreadInvoker(MethodType, int):::Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array
MethodHandles#exactInvoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by MethodHandle#invokeExact invokeExact
MethodHandles#invoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by MethodHandle#invoke invoke
MethodHandles#varHandleExactInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type
MethodHandles#varHandleInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type
MethodHandles#explicitCastArguments(MethodHandle, MethodType):::Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion
MethodHandles#permuteArguments(MethodHandle, MethodType, int...):::Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments
MethodHandles#constant(Class, Object):::Produces a method handle of the requested return type which returns the given constant value every time it is invoked
MethodHandles#identity(Class):::Produces a method handle which returns its sole argument when invoked.
MethodHandles#zero(Class):::Produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked
MethodHandles#empty(MethodType):::Produces a method handle of the requested type which ignores any arguments, does nothing, and returns a suitable default depending on the return type
MethodHandles#insertArguments(MethodHandle, int, Object...):::Provides a target method handle with one or more bound arguments in advance of the method handle's invocation
MethodHandles#dropArguments(MethodHandle, int, List>):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
MethodHandles#dropArguments(MethodHandle, int, Class...):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
MethodHandles#dropArgumentsToMatch(MethodHandle, int, List>, int):::Adapts a target method handle to match the given parameter type list
MethodHandles#filterArguments(MethodHandle, int, MethodHandle...):::Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function
MethodHandles#collectArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle)
MethodHandles#filterReturnValue(MethodHandle, MethodHandle):::Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle)
MethodHandles#foldArguments(MethodHandle, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments
MethodHandles#foldArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments just before the folded arguments
MethodHandles#foldArguments(MethodHandle, int, MethodHandle, int...):::As foldArguments(MethodHandle, int, MethodHandle), but with the added capability of selecting the arguments from the targets parameters to call the combiner with
MethodHandles#guardWithTest(MethodHandle, MethodHandle, MethodHandle):::Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle
MethodHandles#catchException(MethodHandle, Class, MethodHandle):::Makes a method handle which adapts a target method handle, by running it inside an exception handler
MethodHandles#throwException(Class, Class):::Produces a method handle which will throw exceptions of the given exType
MethodHandles#loop(MethodHandle[]...):::Constructs a method handle representing a loop with several loop variables that are updated and checked upon each iteration
MethodHandles#whileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a while loop from an initializer, a body, and a predicate
MethodHandles#doWhileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a do-while loop from an initializer, a body, and a predicate
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that runs a given number of iterations
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that counts over a range of numbers
MethodHandles#iteratedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that ranges over the values produced by an Iterator<T>
MethodHandles#tryFinally(MethodHandle, MethodHandle):::Makes a method handle that adapts a target method handle by wrapping it in a try-finally block
MethodType#methodType(Class, Class[]):::Finds or creates an instance of the given method type.
MethodType#methodType(Class, List>):::Finds or creates a method type with the given components
MethodType#methodType(Class, Class, Class...):::Finds or creates a method type with the given components
MethodType#methodType(Class):::Finds or creates a method type with the given components
MethodType#methodType(Class, Class):::Finds or creates a method type with the given components
MethodType#methodType(Class, MethodType):::Finds or creates a method type with the given components
MethodType#genericMethodType(int, boolean):::Finds or creates a method type whose components are Object with an optional trailing Object[] array
MethodType#genericMethodType(int):::Finds or creates a method type whose components are all Object
MethodType#changeParameterType(int, Class):::Finds or creates a method type with a single different parameter type
MethodType#insertParameterTypes(int, Class...):::Finds or creates a method type with additional parameter types
MethodType#appendParameterTypes(Class...):::Finds or creates a method type with additional parameter types
MethodType#insertParameterTypes(int, List>):::Finds or creates a method type with additional parameter types
MethodType#appendParameterTypes(List>):::Finds or creates a method type with additional parameter types
MethodType#dropParameterTypes(int, int):::Finds or creates a method type with some parameter types omitted
MethodType#changeReturnType(Class):::Finds or creates a method type with a different return type
MethodType#hasPrimitives():::Reports if this type contains a primitive argument or return value
MethodType#hasWrappers():::Reports if this type contains a wrapper argument or return value
MethodType#erase():::Erases all reference types to Object
MethodType#generic():::Converts all types, both reference and primitive, to Object
MethodType#wrap():::Converts all primitive types to their corresponding wrapper types
MethodType#unwrap():::Converts all wrapper types to their corresponding primitive types
MethodType#parameterType(int):::Returns the parameter type at the specified index, within this method type.
MethodType#parameterCount():::Returns the number of parameter types in this method type.
MethodType#returnType():::Returns the return type of this method type.
MethodType#parameterList():::Presents the parameter types as a list (a convenience method)
MethodType#lastParameterType():::Returns the last parameter type of this method type
MethodType#parameterArray():::Presents the parameter types as an array (a convenience method)
MethodType#equals(Object):::Compares the specified object with this type for equality
MethodType#hashCode():::Returns the hash code value for this method type
MethodType#toString():::Returns a string representation of the method type, of the form "(PT0,PT1...)RT"
MethodType#fromMethodDescriptorString(String, ClassLoader):::Finds or creates an instance of a method type, given the spelling of its bytecode descriptor
MethodType#fromDescriptor(String, ClassLoader):::Same as #fromMethodDescriptorString(String, ClassLoader), but null ClassLoader means the bootstrap loader is used here
MethodType#toMethodDescriptorString():::Produces a bytecode descriptor representation of the method type
MethodTypeForm#erasedType():::Return the type corresponding uniquely (1-1) to this MT-form
MethodTypeForm#basicType():::Return the basic type derived from the erased type of this MT-form
MethodTypeForm#canonicalize(MethodType, int, int):::Canonicalize the types in the given method type
MethodTypeForm#canonicalize(Class, int):::Canonicalize the given return or param type
MethodTypeForm#canonicalizeAll(Class[], int):::Canonicalize each param type in the given array
MutableCallSite#getTarget():::Returns the target method of the call site, which behaves like a normal field of the MutableCallSite
MutableCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a normal variable
MutableCallSite#syncAll(MutableCallSite[]):::Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites
SerializedLambda#getCapturingClass():::Get the name of the class that captured this lambda.
SerializedLambda#getFunctionalInterfaceClass():::Get the name of the invoked type to which this lambda has been converted
SerializedLambda#getFunctionalInterfaceMethodName():::Get the name of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda#getFunctionalInterfaceMethodSignature():::Get the signature of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda#getImplClass():::Get the name of the class containing the implementation method.
SerializedLambda#getImplMethodName():::Get the name of the implementation method.
SerializedLambda#getImplMethodSignature():::Get the signature of the implementation method.
SerializedLambda#getImplMethodKind():::Get the method handle kind (see MethodHandleInfo) of the implementation method.
SerializedLambda#getInstantiatedMethodType():::Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.
SerializedLambda#getCapturedArgCount():::Get the count of dynamic arguments to the lambda capture site.
SerializedLambda#getCapturedArg(int):::Get a dynamic argument to the lambda capture site.
StringConcatFactory#makeConcat(MethodHandles.Lookup, String, MethodType):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments
StringConcatFactory#makeConcatWithConstants(MethodHandles.Lookup, String, MethodType, String, Object...):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments
SwitchPoint#hasBeenInvalidated():::Determines if this switch point has been invalidated yet
SwitchPoint#guardWithTest(MethodHandle, MethodHandle):::Returns a method handle which always delegates either to the target or the fallback
SwitchPoint#invalidateAll(SwitchPoint[]):::Sets all of the given switch points into the invalid state
TypeConvertingMethodAdapter#unbox(String, Wrapper):::Convert types by unboxing
TypeConvertingMethodAdapter#convertType(Class, Class, Class):::Convert an argument of type 'arg' to be passed to 'target' assuring that it is 'functional'
TypeConvertingMethodAdapter#iconst(int):::The following method is copied from org.objectweb.asm.commons.InstructionAdapter
VarHandle#get(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared non-volatile
VarHandle#set(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final
VarHandle#getVolatile(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared volatile
VarHandle#setVolatile(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared volatile
VarHandle#getOpaque(Object...):::Returns the value of a variable, accessed in program order, but with no assurance of memory ordering effects with respect to other threads
VarHandle#setOpaque(Object...):::Sets the value of a variable to the newValue, in program order, but with no assurance of memory ordering effects with respect to other threads
VarHandle#getAcquire(Object...):::Returns the value of a variable, and ensures that subsequent loads and stores are not reordered before this access
VarHandle#setRelease(Object...):::Sets the value of a variable to the newValue, and ensures that prior loads and stores are not reordered after this access
VarHandle#compareAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#compareAndExchange(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#compareAndExchangeAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire
VarHandle#compareAndExchangeRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#weakCompareAndSetPlain(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#weakCompareAndSet(Object...):::Possibly atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#weakCompareAndSetAcquire(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire
VarHandle#weakCompareAndSetRelease(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#getAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndSetAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndSetRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndAdd(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setVolatile, and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndAddAcquire(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #set, and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndAddRelease(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setRelease, and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseOr(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseOrAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseOrRelease(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseAnd(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseAndAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseAndRelease(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseXor(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseXorAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseXorRelease(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#varType():::Returns the variable type of variables referenced by this VarHandle.
VarHandle#coordinateTypes():::Returns the coordinate types for this VarHandle.
VarHandle#accessModeType(AccessMode):::Obtains the access mode type for this VarHandle and a given access mode
VarHandle#isAccessModeSupported(AccessMode):::Returns true if the given access mode is supported, otherwise false
VarHandle#toMethodHandle(AccessMode):::Obtains a method handle bound to this VarHandle and the given access mode.
VarHandle#fullFence():::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence.
VarHandle#acquireFence():::Ensures that loads before the fence will not be reordered with loads and stores after the fence.
VarHandle#releaseFence():::Ensures that loads and stores before the fence will not be reordered with stores after the fence.
VarHandle#loadLoadFence():::Ensures that loads before the fence will not be reordered with loads after the fence.
VarHandle#storeStoreFence():::Ensures that stores before the fence will not be reordered with stores after the fence.
VolatileCallSite#getTarget():::Returns the target method of the call site, which behaves like a volatile field of the VolatileCallSite
VolatileCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a volatile variable
Configuration#resolve(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with this configuration as its parent, to create a new configuration
Configuration#resolveAndBind(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration
Configuration#resolveAndBind(ModuleFinder, Collection, PrintStream):::Resolves a collection of root modules, with service binding, and with the empty configuration as its parent
Configuration#resolve(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules to create a configuration
Configuration#resolveAndBind(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, to create configuration
Configuration#empty():::Returns the empty configuration
Configuration#parents():::Returns an unmodifiable list of this configuration's parents, in search order
Configuration#modules():::Returns an immutable set of the resolved modules in this configuration.
Configuration#findModule(String):::Finds a resolved module in this configuration, or if not in this configuration, the #parents() parent configurations
Configuration#configurations():::Returns an ordered stream of configurations
Configuration#toString():::Returns a string describing this configuration.
ModuleDescriptor.Requires#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Requires#name():::Return the module name.
ModuleDescriptor.Requires#compiledVersion():::Returns the version of the module if recorded at compile-time.
ModuleDescriptor.Requires#rawCompiledVersion():::Returns the string with the possibly-unparseable version of the module if recorded at compile-time.
ModuleDescriptor.Requires#compareTo(Requires):::Compares this module dependence to another
ModuleDescriptor.Requires#equals(Object):::Tests this module dependence for equality with the given object
ModuleDescriptor.Requires#hashCode():::Computes a hash code for this module dependence
ModuleDescriptor.Requires#toString():::Returns a string describing this module dependence.
ModuleDescriptor.Exports#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Exports#isQualified():::Returns true if this is a qualified export.
ModuleDescriptor.Exports#source():::Returns the package name.
ModuleDescriptor.Exports#targets():::For a qualified export, returns the non-empty and immutable set of the module names to which the package is exported
ModuleDescriptor.Exports#compareTo(Exports):::Compares this module export to another
ModuleDescriptor.Exports#hashCode():::Computes a hash code for this module export
ModuleDescriptor.Exports#equals(Object):::Tests this module export for equality with the given object
ModuleDescriptor.Exports#toString():::Returns a string describing the exported package.
ModuleDescriptor.Opens#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Opens#isQualified():::Returns true if this is a qualified opens.
ModuleDescriptor.Opens#source():::Returns the package name.
ModuleDescriptor.Opens#targets():::For a qualified opens, returns the non-empty and immutable set of the module names to which the package is open
ModuleDescriptor.Opens#compareTo(Opens):::Compares this module opens to another
ModuleDescriptor.Opens#hashCode():::Computes a hash code for this module opens
ModuleDescriptor.Opens#equals(Object):::Tests this module opens for equality with the given object
ModuleDescriptor.Opens#toString():::Returns a string describing the open package.
ModuleDescriptor.Provides#service():::Returns the fully qualified class name of the service type.
ModuleDescriptor.Provides#providers():::Returns the list of the fully qualified class names of the providers or provider factories.
ModuleDescriptor.Provides#compareTo(Provides):::Compares this provides to another
ModuleDescriptor.Provides#hashCode():::Computes a hash code for this provides
ModuleDescriptor.Provides#equals(Object):::Tests this provides for equality with the given object
ModuleDescriptor.Provides#toString():::Returns a string describing this provides.
ModuleDescriptor.Version#parse(String):::Parses the given string as a version string.
ModuleDescriptor.Version#compareTo(Version):::Compares this module version to another module version
ModuleDescriptor.Version#equals(Object):::Tests this module version for equality with the given object
ModuleDescriptor.Version#hashCode():::Computes a hash code for this module version
ModuleDescriptor.Version#toString():::Returns the string from which this version was parsed.
ModuleDescriptor#name()::: Returns the module name
ModuleDescriptor#modifiers()::: Returns the set of module modifiers
ModuleDescriptor#isOpen()::: Returns true if this is an open module
ModuleDescriptor#isAutomatic()::: Returns true if this is an automatic module
ModuleDescriptor#requires()::: Returns the set of Requires objects representing the module dependences
ModuleDescriptor#exports()::: Returns the set of Exports objects representing the exported packages
ModuleDescriptor#opens()::: Returns the set of Opens objects representing the open packages
ModuleDescriptor#uses()::: Returns the set of service dependences
ModuleDescriptor#provides()::: Returns the set of Provides objects representing the services that the module provides
ModuleDescriptor#version()::: Returns the module version
ModuleDescriptor#rawVersion()::: Returns the string with the possibly-unparseable version of the module 
ModuleDescriptor#toNameAndVersion()::: Returns a string containing the module name and, if present, its version
ModuleDescriptor#mainClass()::: Returns the module main class
ModuleDescriptor#packages():::Returns the set of packages in the module
ModuleDescriptor.Builder#requires(Requires):::Adds a dependence on a module.
ModuleDescriptor.Builder#requires(Set, String, Version):::Adds a dependence on a module with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#requires(Set, String):::Adds a dependence on a module with the given (and possibly empty) set of modifiers.
ModuleDescriptor.Builder#requires(String):::Adds a dependence on a module with an empty set of modifiers.
ModuleDescriptor.Builder#exports(Exports):::Adds an exported package.
ModuleDescriptor.Builder#exports(Set, String, Set):::Adds an exported package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#exports(Set, String):::Adds an exported package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#exports(String, Set):::Adds an exported package
ModuleDescriptor.Builder#exports(String):::Adds an exported package
ModuleDescriptor.Builder#opens(Opens):::Adds an open package.
ModuleDescriptor.Builder#opens(Set, String, Set):::Adds an open package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#opens(Set, String):::Adds an open package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#opens(String, Set):::Adds an open package
ModuleDescriptor.Builder#opens(String):::Adds an open package
ModuleDescriptor.Builder#uses(String):::Adds a service dependence.
ModuleDescriptor.Builder#provides(Provides):::Provides a service with one or more implementations
ModuleDescriptor.Builder#provides(String, List):::Provides implementations of a service
ModuleDescriptor.Builder#packages(Set):::Adds packages to the module
ModuleDescriptor.Builder#version(Version):::Sets the module version.
ModuleDescriptor.Builder#version(String):::Sets the module version.
ModuleDescriptor.Builder#mainClass(String):::Sets the module main class
ModuleDescriptor.Builder#build():::Builds and returns a ModuleDescriptor from its components
ModuleDescriptor#compareTo(ModuleDescriptor):::Compares this module descriptor to another
ModuleDescriptor#equals(Object):::Tests this module descriptor for equality with the given object
ModuleDescriptor#hashCode():::Computes a hash code for this module descriptor
ModuleDescriptor#toString()::: Returns a string describing the module
ModuleDescriptor#newModule(String, Set):::Instantiates a builder to build a module descriptor.
ModuleDescriptor#newModule(String):::Instantiates a builder to build a module descriptor for a normal module
ModuleDescriptor#newOpenModule(String):::Instantiates a builder to build a module descriptor for an open module
ModuleDescriptor#newAutomaticModule(String):::Instantiates a builder to build a module descriptor for an automatic module
ModuleDescriptor#read(InputStream, Supplier>):::Reads the binary form of a module declaration from an input stream as a module descriptor
ModuleDescriptor#read(InputStream):::Reads the binary form of a module declaration from an input stream as a module descriptor
ModuleDescriptor#read(ByteBuffer, Supplier>):::Reads the binary form of a module declaration from a byte buffer as a module descriptor
ModuleDescriptor#read(ByteBuffer):::Reads the binary form of a module declaration from a byte buffer as a module descriptor
ModuleFinder#find(String):::Finds a reference to a module of a given name
ModuleFinder#findAll():::Returns the set of all module references that this finder can locate
ModuleFinder#ofSystem():::Returns a module finder that locates the system modules
ModuleFinder#of(Path...):::Returns a module finder that locates modules on the file system by searching a sequence of directories and/or packaged modules
ModuleFinder#compose(ModuleFinder...):::Returns a module finder that is composed from a sequence of zero or more module finders
ModuleReader#find(String):::Finds a resource, returning a URI to the resource in the module
ModuleReader#open(String):::Opens a resource, returning an input stream to read the resource in the module
ModuleReader#read(String):::Reads a resource, returning a byte buffer with the contents of the resource
ModuleReader#release(ByteBuffer):::Release a byte buffer
ModuleReader#list():::Lists the contents of the module, returning a stream of elements that are the names of all resources in the module
ModuleReader#close():::Closes the module reader
ModuleReference#descriptor():::Returns the module descriptor.
ModuleReference#location():::Returns the location of this module's content, if known
ModuleReference#open():::Opens the module content for reading.
ResolvedModule#configuration():::Returns the configuration that this resolved module is in.
ResolvedModule#reference():::Returns the reference to the module's content.
ResolvedModule#descriptor():::Returns the module descriptor
ResolvedModule#name():::Returns the module name
ResolvedModule#reads():::Returns the set of resolved modules that this resolved module reads.
ResolvedModule#hashCode():::Computes a hash code for this resolved module
ResolvedModule#equals(Object):::Tests this resolved module for equality with the given object
ResolvedModule#toString():::Returns a string describing this resolved module.
Resolver#resolve(Collection):::Resolves the given named modules.
Resolver#bind():::Augments the set of resolved modules with modules induced by the service-use relation.
Resolver#finish(Configuration):::Execute post-resolution checks and returns the module graph of resolved modules as a map.
Cleaner#create():::Returns a new Cleaner
Cleaner#create(ThreadFactory):::Returns a new Cleaner using a Thread from the ThreadFactory
Cleaner#register(Object, Runnable):::Registers an object and a cleaning action to run when the object becomes phantom reachable
Cleaner.Cleanable#clean():::Unregisters the cleanable and invokes the cleaning action
PhantomReference#get():::Returns this reference object's referent
Reference#get():::Returns this reference object's referent
Reference#clear():::Clears this reference object
Reference#isEnqueued():::Tells whether or not this reference object has been enqueued, either by the program or by the garbage collector
Reference#enqueue():::Clears this reference object and adds it to the queue with which it is registered, if any
Reference#clone():::Throws CloneNotSupportedException
Reference#reachabilityFence(Object):::Ensures that the object referenced by the given reference remains strongly reachable, regardless of any prior actions of the program that might otherwise cause the object to become unreachable; thus, the referenced object is not reclaimable by garbage collection at least until after the invocation of this method
ReferenceQueue#poll():::Polls this queue to see if a reference object is available
ReferenceQueue#remove(long):::Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires
ReferenceQueue#remove():::Removes the next reference object in this queue, blocking until one becomes available.
ReferenceQueue#forEach(Consumer>):::Iterate queue and invoke given action with each Reference
SoftReference#get():::Returns this reference object's referent
AccessibleObject#setAccessible(AccessibleObject[], boolean):::Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency)
AccessibleObject#setAccessible(boolean):::Set the accessible flag for this reflected object to the indicated boolean value
AccessibleObject#setAccessible0(boolean):::Sets the accessible flag and returns the new value
AccessibleObject#trySetAccessible():::Set the accessible flag for this reflected object to true if possible
AccessibleObject#checkCanSetAccessible(Class):::If the given AccessibleObject is a Constructor, Method or Field then checks that its declaring class is in a package that can be accessed by the given caller of setAccessible.
AccessibleObject#toShortString():::Returns a short descriptive string to describe this object in log messages.
AccessibleObject#isAccessible():::Get the value of the accessible flag for this reflected object.
AccessibleObject#canAccess(Object):::Test if the caller can access this reflected object
AccessibleObject#getRoot():::Returns the root AccessibleObject; or null if this object is the root
AnnotatedArrayType#getAnnotatedGenericComponentType():::Returns the potentially annotated generic component type of this array type.
AnnotatedArrayType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedElement#isAnnotationPresent(Class):::Returns true if an annotation for the specified type is present on this element, else false
AnnotatedElement#getAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is present, else null.
AnnotatedElement#getAnnotations():::Returns annotations that are present on this element
AnnotatedElement#getAnnotationsByType(Class):::Returns annotations that are associated with this element
AnnotatedElement#getDeclaredAnnotation(Class):::Returns this element's annotation for the specified type if such an annotation is directly present, else null
AnnotatedElement#getDeclaredAnnotationsByType(Class):::Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present
AnnotatedElement#getDeclaredAnnotations():::Returns annotations that are directly present on this element
AnnotatedParameterizedType#getAnnotatedActualTypeArguments():::Returns the potentially annotated actual type arguments of this parameterized type.
AnnotatedParameterizedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedType#getType():::Returns the underlying type that this annotated type represents.
AnnotatedTypeVariable#getAnnotatedBounds():::Returns the potentially annotated bounds of this type variable
AnnotatedTypeVariable#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
AnnotatedWildcardType#getAnnotatedLowerBounds():::Returns the potentially annotated lower bounds of this wildcard type
AnnotatedWildcardType#getAnnotatedUpperBounds():::Returns the potentially annotated upper bounds of this wildcard type
AnnotatedWildcardType#getAnnotatedOwnerType():::Returns the potentially annotated type that this type is a member of, if this type represents a nested type
Array#newInstance(Class, int):::Creates a new array with the specified component type and length
Array#newInstance(Class, int...):::Creates a new array with the specified component type and dimensions
Array#getLength(Object):::Returns the length of the specified array object, as an int.
Array#get(Object, int):::Returns the value of the indexed component in the specified array object
Array#getBoolean(Object, int):::Returns the value of the indexed component in the specified array object, as a boolean.
Array#getByte(Object, int):::Returns the value of the indexed component in the specified array object, as a byte.
Array#getChar(Object, int):::Returns the value of the indexed component in the specified array object, as a char.
Array#getShort(Object, int):::Returns the value of the indexed component in the specified array object, as a short.
Array#getInt(Object, int):::Returns the value of the indexed component in the specified array object, as an int.
Array#getLong(Object, int):::Returns the value of the indexed component in the specified array object, as a long.
Array#getFloat(Object, int):::Returns the value of the indexed component in the specified array object, as a float.
Array#getDouble(Object, int):::Returns the value of the indexed component in the specified array object, as a double.
Array#set(Object, int, Object):::Sets the value of the indexed component of the specified array object to the specified new value
Array#setBoolean(Object, int, boolean):::Sets the value of the indexed component of the specified array object to the specified boolean value.
Array#setByte(Object, int, byte):::Sets the value of the indexed component of the specified array object to the specified byte value.
Array#setChar(Object, int, char):::Sets the value of the indexed component of the specified array object to the specified char value.
Array#setShort(Object, int, short):::Sets the value of the indexed component of the specified array object to the specified short value.
Array#setInt(Object, int, int):::Sets the value of the indexed component of the specified array object to the specified int value.
Array#setLong(Object, int, long):::Sets the value of the indexed component of the specified array object to the specified long value.
Array#setFloat(Object, int, float):::Sets the value of the indexed component of the specified array object to the specified float value.
Array#setDouble(Object, int, double):::Sets the value of the indexed component of the specified array object to the specified double value.
Constructor#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Constructor
Constructor#setAccessible(boolean):::A {@code SecurityException is also thrown if this object is a Constructor object for the class Class and flag is true
Constructor#getDeclaringClass():::Returns the Class object representing the class that declares the constructor represented by this object.
Constructor#getName():::Returns the name of this constructor, as a string
Constructor#equals(Object):::Compares this Constructor against the specified object
Constructor#hashCode():::Returns a hashcode for this Constructor
Constructor#toString():::Returns a string describing this Constructor
Constructor#toGenericString():::Returns a string describing this Constructor, including type parameters
Constructor#newInstance(Object...):::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters
Executable#getAnnotationBytes():::Accessor method to allow code sharing
Executable#hasGenericInformation():::Does the Executable have generic information.
Executable#specificToStringHeader(StringBuilder):::Generate toString header information specific to a method or constructor.
Executable#specificToGenericStringHeader(StringBuilder):::Generate toGenericString header information specific to a method or constructor.
Executable#getDeclaringClass():::Returns the Class object representing the class or interface that declares the executable represented by this object.
Executable#getName():::Returns the name of the executable represented by this object.
Executable#getModifiers():::Returns the Java language Modifier modifiers for the executable represented by this object.
Executable#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
Executable#getParameterTypes():::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Executable#getParameterCount():::Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
Executable#getGenericParameterTypes():::Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Executable#getAllGenericParameterTypes():::Behaves like getGenericParameterTypes, but returns type information for all parameters, including synthetic parameters.
Executable#getParameters():::Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object
Executable#getExceptionTypes():::Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object
Executable#getGenericExceptionTypes():::Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object
Executable#toGenericString():::Returns a string describing this Executable, including any type parameters.
Executable#isVarArgs():::Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Executable#isSynthetic():::Returns true if this executable is a synthetic construct; returns false otherwise.
Executable#getParameterAnnotations():::Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object
Executable#getAnnotatedReturnType():::Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable
Executable#getAnnotatedReceiverType():::Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object
Executable#getAnnotatedParameterTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable
Executable#getAnnotatedExceptionTypes():::Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable
Field#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field
Field#getDeclaringClass():::Returns the Class object representing the class or interface that declares the field represented by this Field object.
Field#getName():::Returns the name of the field represented by this Field object.
Field#getModifiers():::Returns the Java language modifiers for the field represented by this Field object, as an integer
Field#isEnumConstant():::Returns true if this field represents an element of an enumerated type; returns false otherwise.
Field#isSynthetic():::Returns true if this field is a synthetic field; returns false otherwise.
Field#getType():::Returns a Class object that identifies the declared type for the field represented by this Field object.
Field#getGenericType():::Returns a Type object that represents the declared type for the field represented by this Field object
Field#equals(Object):::Compares this Field against the specified object
Field#hashCode():::Returns a hashcode for this Field
Field#toString():::Returns a string describing this Field
Field#toGenericString():::Returns a string describing this Field, including its generic type
Field#get(Object):::Returns the value of the field represented by this Field, on the specified object
Field#getBoolean(Object):::Gets the value of a static or instance boolean field.
Field#getByte(Object):::Gets the value of a static or instance byte field.
Field#getChar(Object):::Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.
Field#getShort(Object):::Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.
Field#getInt(Object):::Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.
Field#getLong(Object):::Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.
Field#getFloat(Object):::Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.
Field#getDouble(Object):::Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.
Field#set(Object, Object):::Sets the field represented by this Field object on the specified object argument to the specified new value
Field#setBoolean(Object, boolean):::Sets the value of a field as a boolean on the specified object
Field#setByte(Object, byte):::Sets the value of a field as a byte on the specified object
Field#setChar(Object, char):::Sets the value of a field as a char on the specified object
Field#setShort(Object, short):::Sets the value of a field as a short on the specified object
Field#setInt(Object, int):::Sets the value of a field as an int on the specified object
Field#setLong(Object, long):::Sets the value of a field as a long on the specified object
Field#setFloat(Object, float):::Sets the value of a field as a float on the specified object
Field#setDouble(Object, double):::Sets the value of a field as a double on the specified object
Field#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.
GenericArrayType#getGenericComponentType():::Returns a Type object representing the component type of this array
GenericDeclaration#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
InvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation on a proxy instance and returns the result
InvocationTargetException#getTargetException():::Get the thrown target exception
InvocationTargetException#getCause():::Returns the cause of this exception (the thrown target exception, which may be null).
Member#getDeclaringClass():::Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.
Member#getName():::Returns the simple name of the underlying member or constructor represented by this Member.
Member#getModifiers():::Returns the Java language modifiers for the member or constructor represented by this Member, as an integer
Member#isSynthetic():::Returns true if this member was introduced by the compiler; returns false otherwise.
Method#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method
Method#leafCopy():::Make a copy of a leaf method.
Method#getDeclaringClass():::Returns the Class object representing the class or interface that declares the method represented by this object.
Method#getName():::Returns the name of the method represented by this Method object, as a String.
Method#getReturnType():::Returns a Class object that represents the formal return type of the method represented by this Method object.
Method#getGenericReturnType():::Returns a Type object that represents the formal return type of the method represented by this Method object
Method#equals(Object):::Compares this Method against the specified object
Method#hashCode():::Returns a hashcode for this Method
Method#toString():::Returns a string describing this Method
Method#toGenericString():::Returns a string describing this Method, including type parameters
Method#invoke(Object, Object...):::Invokes the underlying method represented by this Method object, on the specified object with the specified parameters
Method#isBridge():::Returns true if this method is a bridge method; returns false otherwise.
Method#isDefault():::Returns true if this method is a default method; returns false otherwise
Method#getDefaultValue():::Returns the default value for the annotation member represented by this Method instance
Modifier#isPublic(int):::Return true if the integer argument includes the public modifier, false otherwise.
Modifier#isPrivate(int):::Return true if the integer argument includes the private modifier, false otherwise.
Modifier#isProtected(int):::Return true if the integer argument includes the protected modifier, false otherwise.
Modifier#isStatic(int):::Return true if the integer argument includes the static modifier, false otherwise.
Modifier#isFinal(int):::Return true if the integer argument includes the final modifier, false otherwise.
Modifier#isSynchronized(int):::Return true if the integer argument includes the synchronized modifier, false otherwise.
Modifier#isVolatile(int):::Return true if the integer argument includes the volatile modifier, false otherwise.
Modifier#isTransient(int):::Return true if the integer argument includes the transient modifier, false otherwise.
Modifier#isNative(int):::Return true if the integer argument includes the native modifier, false otherwise.
Modifier#isInterface(int):::Return true if the integer argument includes the interface modifier, false otherwise.
Modifier#isAbstract(int):::Return true if the integer argument includes the abstract modifier, false otherwise.
Modifier#isStrict(int):::Return true if the integer argument includes the strictfp modifier, false otherwise.
Modifier#toString(int):::Return a string describing the access modifier flags in the specified modifier
Modifier#classModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a class.
Modifier#interfaceModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to an interface.
Modifier#constructorModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a constructor.
Modifier#methodModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a method.
Modifier#fieldModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a field.
Modifier#parameterModifiers():::Return an int value OR-ing together the source language modifiers that can be applied to a parameter.
Parameter#equals(Object):::Compares based on the executable and the index.
Parameter#hashCode():::Returns a hash code based on the executable's hash code and the index.
Parameter#isNamePresent():::Returns true if the parameter has a name according to the class file; returns false otherwise
Parameter#toString():::Returns a string describing this parameter
Parameter#getDeclaringExecutable():::Return the Executable which declares this parameter.
Parameter#getModifiers():::Get the modifier flags for this the parameter represented by this Parameter object.
Parameter#getName():::Returns the name of the parameter
Parameter#getParameterizedType():::Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.
Parameter#getType():::Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.
Parameter#getAnnotatedType():::Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
Parameter#isImplicit():::Returns true if this parameter is implicitly declared in source code; returns false otherwise.
Parameter#isSynthetic():::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
Parameter#isVarArgs():::Returns true if this parameter represents a variable argument list; returns false otherwise.
ParameterizedType#getActualTypeArguments():::Returns an array of Type objects representing the actual type arguments to this type
ParameterizedType#getRawType():::Returns the Type object representing the class or interface that declared this type.
ParameterizedType#getOwnerType():::Returns a Type object representing the type that this type is a member of
Proxy#getProxyClass(ClassLoader, Class...):::Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces
Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler):::Returns a proxy instance for the specified interfaces that dispatches method invocations to the specified invocation handler
Proxy#isProxyClass(Class):::Returns true if the given class is a proxy class.
Proxy#getInvocationHandler(Object):::Returns the invocation handler for the specified proxy instance.
ProxyGenerator#generateProxyClass(String, Class[]):::Generate a public proxy class given a name and a list of proxy interfaces.
ProxyGenerator#generateProxyClass(String, Class[], int):::Generate a proxy class given a name and a list of proxy interfaces.
Type#getTypeName():::Returns a string describing this type, including information about any type parameters.
TypeVariable#getBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable
TypeVariable#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration declared this type variable.
TypeVariable#getName():::Returns the name of this type variable, as it occurs in the source code.
TypeVariable#getAnnotatedBounds():::Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable
UndeclaredThrowableException#getUndeclaredThrowable():::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null
UndeclaredThrowableException#getCause():::Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null).
WildcardType#getUpperBounds():::Returns an array of Type objects representing the  upper bound(s) of this type variable
WildcardType#getLowerBounds():::Returns an array of Type objects representing the lower bound(s) of this type variable
BigDecimal#valueOf(long, int):::Translates a long unscaled value and an int scale into a BigDecimal.
BigDecimal#valueOf(long):::Translates a long value into a BigDecimal with a scale of zero.
BigDecimal#valueOf(double):::Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double#toString(double) method.
BigDecimal#add(BigDecimal):::Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).
BigDecimal#add(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings
BigDecimal#subtract(BigDecimal):::Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).
BigDecimal#subtract(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings
BigDecimal#multiply(BigDecimal):::Returns a BigDecimal whose value is (this &times; multiplicand), and whose scale is (this.scale() + multiplicand.scale()).
BigDecimal#multiply(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this &times; multiplicand), with rounding according to the context settings.
BigDecimal#divide(BigDecimal, int, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
BigDecimal#divide(BigDecimal, int, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified
BigDecimal#divide(BigDecimal, int):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
BigDecimal#divide(BigDecimal, RoundingMode):::Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()
BigDecimal#divide(BigDecimal):::Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.
BigDecimal#divide(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.
BigDecimal#divideToIntegralValue(BigDecimal):::Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down
BigDecimal#divideToIntegralValue(BigDecimal, MathContext):::Returns a BigDecimal whose value is the integer part of (this / divisor)
BigDecimal#remainder(BigDecimal):::Returns a BigDecimal whose value is (this % divisor)
BigDecimal#remainder(BigDecimal, MathContext):::Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings
BigDecimal#divideAndRemainder(BigDecimal):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands
BigDecimal#divideAndRemainder(BigDecimal, MathContext):::Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings
BigDecimal#sqrt(MathContext):::Returns an approximation to the square root of this with rounding according to the context settings
BigDecimal#pow(int):::Returns a BigDecimal whose value is (this^n), The power is computed exactly, to unlimited precision
BigDecimal#pow(int, MathContext):::Returns a BigDecimal whose value is (this^n)
BigDecimal#abs():::Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().
BigDecimal#abs(MathContext):::Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.
BigDecimal#negate():::Returns a BigDecimal whose value is (-this), and whose scale is this.scale().
BigDecimal#negate(MathContext):::Returns a BigDecimal whose value is (-this), with rounding according to the context settings.
BigDecimal#plus():::Returns a BigDecimal whose value is (+this), and whose scale is this.scale()
BigDecimal#plus(MathContext):::Returns a BigDecimal whose value is (+this), with rounding according to the context settings
BigDecimal#signum():::Returns the signum function of this BigDecimal.
BigDecimal#scale():::Returns the scale of this BigDecimal
BigDecimal#precision():::Returns the precision of this BigDecimal
BigDecimal#unscaledValue():::Returns a BigInteger whose value is the unscaled value of this BigDecimal
BigDecimal#round(MathContext):::Returns a BigDecimal rounded according to the MathContext settings
BigDecimal#setScale(int, RoundingMode):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
BigDecimal#setScale(int, int):::Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
BigDecimal#setScale(int):::Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's
BigDecimal#movePointLeft(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left
BigDecimal#movePointRight(int):::Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right
BigDecimal#scaleByPowerOfTen(int):::Returns a BigDecimal whose numerical value is equal to (this * 10^n)
BigDecimal#stripTrailingZeros():::Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation
BigDecimal#compareTo(BigDecimal):::Compares this BigDecimal with the specified BigDecimal
BigDecimal#equals(Object):::Compares this BigDecimal with the specified Object for equality
BigDecimal#min(BigDecimal):::Returns the minimum of this BigDecimal and val.
BigDecimal#max(BigDecimal):::Returns the maximum of this BigDecimal and val.
BigDecimal#hashCode():::Returns the hash code for this BigDecimal
BigDecimal#toString():::Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed
BigDecimal#toEngineeringString():::Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed
BigDecimal#toPlainString():::Returns a string representation of this BigDecimal without an exponent field
BigDecimal#toBigInteger():::Converts this BigDecimal to a BigInteger
BigDecimal#toBigIntegerExact():::Converts this BigDecimal to a BigInteger, checking for lost information
BigDecimal#longValue():::Converts this BigDecimal to a long
BigDecimal#longValueExact():::Converts this BigDecimal to a long, checking for lost information
BigDecimal#intValue():::Converts this BigDecimal to an int
BigDecimal#intValueExact():::Converts this BigDecimal to an int, checking for lost information
BigDecimal#shortValueExact():::Converts this BigDecimal to a short, checking for lost information
BigDecimal#byteValueExact():::Converts this BigDecimal to a byte, checking for lost information
BigDecimal#floatValue():::Converts this BigDecimal to a float
BigDecimal#doubleValue():::Converts this BigDecimal to a double
BigDecimal#ulp():::Returns the size of an ulp, a unit in the last place, of this BigDecimal
BigDecimal.StringBuilderHelper#putIntCompact(long):::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.
BigDecimal#longDigitLength(long):::Returns the length of the absolute value of a long, in decimal digits.
BigInteger#probablePrime(int, Random):::Returns a positive BigInteger that is probably prime, with the specified bitLength
BigInteger#nextProbablePrime():::Returns the first integer greater than this BigInteger that is probably prime
BigInteger#primeToCertainty(int, Random):::Returns true if this BigInteger is probably prime, false if it's definitely composite
BigInteger#valueOf(long):::Returns a BigInteger whose value is equal to that of the specified long.
BigInteger#add(BigInteger):::Returns a BigInteger whose value is (this + val).
BigInteger#add(long):::Package private methods used by BigDecimal code to add a BigInteger with a long
BigInteger#subtract(BigInteger):::Returns a BigInteger whose value is (this - val).
BigInteger#multiply(BigInteger):::Returns a BigInteger whose value is (this * val).
BigInteger#multiply(long):::Package private methods used by BigDecimal code to multiply a BigInteger with a long
BigInteger#divide(BigInteger):::Returns a BigInteger whose value is (this / val).
BigInteger#divideAndRemainder(BigInteger):::Returns an array of two BigIntegers containing (this / val) followed by (this % val).
BigInteger#remainder(BigInteger):::Returns a BigInteger whose value is (this % val).
BigInteger#pow(int):::Returns a BigInteger whose value is (this^exponent)
BigInteger#sqrt():::Returns the integer square root of this BigInteger
BigInteger#sqrtAndRemainder():::Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.
BigInteger#gcd(BigInteger):::Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val)
BigInteger#bitLengthForInt(int):::Package private method to return bit length for an integer.
BigInteger#abs():::Returns a BigInteger whose value is the absolute value of this BigInteger.
BigInteger#negate():::Returns a BigInteger whose value is (-this).
BigInteger#signum():::Returns the signum function of this BigInteger.
BigInteger#mod(BigInteger):::Returns a BigInteger whose value is (this mod m)
BigInteger#modPow(BigInteger, BigInteger):::Returns a BigInteger whose value is (this^exponent mod m)
BigInteger#mulAdd(int[], int[], int, int, int):::Multiply an array by one word k and add to result, return the carry
BigInteger#addOne(int[], int, int, int):::Add one word to the number a mlen words into a
BigInteger#modInverse(BigInteger):::Returns a BigInteger whose value is (this^-1 mod m).
BigInteger#shiftLeft(int):::Returns a BigInteger whose value is (this << n)
BigInteger#shiftRight(int):::Returns a BigInteger whose value is (this >> n)
BigInteger#and(BigInteger):::Returns a BigInteger whose value is (this & val)
BigInteger#or(BigInteger):::Returns a BigInteger whose value is (this | val)
BigInteger#xor(BigInteger):::Returns a BigInteger whose value is (this ^ val)
BigInteger#not():::Returns a BigInteger whose value is (~this)
BigInteger#andNot(BigInteger):::Returns a BigInteger whose value is (this & ~val)
BigInteger#testBit(int):::Returns true if and only if the designated bit is set
BigInteger#setBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set
BigInteger#clearBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared
BigInteger#flipBit(int):::Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped
BigInteger#getLowestSetBit():::Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit)
BigInteger#bitLength():::Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit
BigInteger#bitCount():::Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit
BigInteger#isProbablePrime(int):::Returns true if this BigInteger is probably prime, false if it's definitely composite
BigInteger#compareTo(BigInteger):::Compares this BigInteger with the specified BigInteger
BigInteger#compareMagnitude(BigInteger):::Compares the magnitude array of this BigInteger with the specified BigInteger's
BigInteger#compareMagnitude(long):::Version of compareMagnitude that compares magnitude with long value
BigInteger#equals(Object):::Compares this BigInteger with the specified Object for equality.
BigInteger#min(BigInteger):::Returns the minimum of this BigInteger and val.
BigInteger#max(BigInteger):::Returns the maximum of this BigInteger and val.
BigInteger#hashCode():::Returns the hash code for this BigInteger.
BigInteger#toString(int):::Returns the String representation of this BigInteger in the given radix
BigInteger#toString():::Returns the decimal String representation of this BigInteger
BigInteger#toByteArray():::Returns a byte array containing the two's-complement representation of this BigInteger
BigInteger#intValue():::Converts this BigInteger to an int
BigInteger#longValue():::Converts this BigInteger to a long
BigInteger#floatValue():::Converts this BigInteger to a float
BigInteger#doubleValue():::Converts this BigInteger to a double
BigInteger#longValueExact():::Converts this BigInteger to a long, checking for lost information
BigInteger#intValueExact():::Converts this BigInteger to an int, checking for lost information
BigInteger#shortValueExact():::Converts this BigInteger to a short, checking for lost information
BigInteger#byteValueExact():::Converts this BigInteger to a byte, checking for lost information
BitSieve#retrieve(BigInteger, int, java.util.Random):::Test probable primes in the sieve and return successful candidates.
MathContext#getPrecision():::Returns the precision setting
MathContext#equals(Object):::Compares this MathContext with the specified Object for equality.
MathContext#hashCode():::Returns the hash code for this MathContext.
MathContext#toString():::Returns the string representation of this MathContext
MutableBigInteger#toBigInteger(int):::Convert this MutableBigInteger to a BigInteger object.
MutableBigInteger#toBigInteger():::Converts this number to a nonnegative BigInteger.
MutableBigInteger#toBigDecimal(int, int):::Convert this MutableBigInteger to BigDecimal object with the specified sign and scale.
MutableBigInteger#toCompactValue(int):::This is for internal use in converting from a MutableBigInteger object into a long value given a specified sign
MutableBigInteger#clear():::Clear out a MutableBigInteger for reuse.
MutableBigInteger#reset():::Set a MutableBigInteger to zero, removing its offset.
MutableBigInteger#compare(MutableBigInteger):::Compare the magnitude of two MutableBigIntegers
MutableBigInteger#compareHalf(MutableBigInteger):::Compare this against half of a MutableBigInteger object (Needed for remainder tests)
MutableBigInteger#normalize():::Ensure that the MutableBigInteger is in normal form, specifically making sure that there are no leading zeros, and that if the magnitude is zero, then intLen is zero.
MutableBigInteger#toIntArray():::Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.
MutableBigInteger#setInt(int, int):::Sets the int at index+offset in this MutableBigInteger to val
MutableBigInteger#setValue(int[], int):::Sets this MutableBigInteger's value array to the specified array
MutableBigInteger#copyValue(MutableBigInteger):::Sets this MutableBigInteger's value array to a copy of the specified array
MutableBigInteger#copyValue(int[]):::Sets this MutableBigInteger's value array to a copy of the specified array
MutableBigInteger#isOne():::Returns true iff this MutableBigInteger has a value of one.
MutableBigInteger#isZero():::Returns true iff this MutableBigInteger has a value of zero.
MutableBigInteger#isEven():::Returns true iff this MutableBigInteger is even.
MutableBigInteger#isOdd():::Returns true iff this MutableBigInteger is odd.
MutableBigInteger#isNormal():::Returns true iff this MutableBigInteger is in normal form
MutableBigInteger#toString():::Returns a String representation of this MutableBigInteger in radix 10.
MutableBigInteger#safeRightShift(int):::Like #rightShift(int) but n can be greater than the length of the number.
MutableBigInteger#rightShift(int):::Right shift this MutableBigInteger n bits
MutableBigInteger#safeLeftShift(int):::Like #leftShift(int) but n can be zero.
MutableBigInteger#leftShift(int):::Left shift this MutableBigInteger n bits.
MutableBigInteger#add(MutableBigInteger):::Adds the contents of two MutableBigInteger objects.The result is placed within this MutableBigInteger
MutableBigInteger#addShifted(MutableBigInteger, int):::Adds the value of addend shifted n ints to the left
MutableBigInteger#addDisjoint(MutableBigInteger, int):::Like #addShifted(MutableBigInteger, int) but this.intLen must not be greater than n
MutableBigInteger#addLower(MutableBigInteger, int):::Adds the low n ints of addend.
MutableBigInteger#subtract(MutableBigInteger):::Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger.
MutableBigInteger#multiply(MutableBigInteger, MutableBigInteger):::Multiply the contents of two MutableBigInteger objects
MutableBigInteger#mul(int, MutableBigInteger):::Multiply the contents of this MutableBigInteger by the word y
MutableBigInteger#divideOneWord(int, MutableBigInteger):::This method is used for division of an n word dividend by a one word divisor
MutableBigInteger#divide(MutableBigInteger, MutableBigInteger):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned.
MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean):::Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned
MutableBigInteger#divideAndRemainderBurnikelZiegler(MutableBigInteger, MutableBigInteger):::Computes this/b and this%b using the  Burnikel-Ziegler algorithm
MutableBigInteger#divide(long, MutableBigInteger):::Internally used  to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned.
MutableBigInteger#divWord(long, int):::This method divides a long quantity by an int to estimate qhat for two multi precision numbers
MutableBigInteger#sqrt():::Calculate the integer square root floor(sqrt(this)) where sqrt(.) denotes the mathematical square root
MutableBigInteger#hybridGCD(MutableBigInteger):::Calculate GCD of this and b
MutableBigInteger#binaryGcd(int, int):::Calculate GCD of a and b interpreted as unsigned integers.
MutableBigInteger#mutableModInverse(MutableBigInteger):::Returns the modInverse of this mod p
MutableBigInteger#inverseMod32(int):::Returns the multiplicative inverse of val mod 2^32
MutableBigInteger#inverseMod64(long):::Returns the multiplicative inverse of val mod 2^64
MutableBigInteger#modInverseBP2(MutableBigInteger, int):::Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.
MutableBigInteger#fixup(MutableBigInteger, MutableBigInteger, int):::The Fixup Algorithm Calculates X such that X = C * 2^(-k) (mod P) Assumes C<P and P is odd.
MutableBigInteger#euclidModInverse(int):::Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of 2
SignedMutableBigInteger#signedAdd(SignedMutableBigInteger):::Signed addition built upon unsigned add and subtract.
SignedMutableBigInteger#signedAdd(MutableBigInteger):::Signed addition built upon unsigned add and subtract.
SignedMutableBigInteger#signedSubtract(SignedMutableBigInteger):::Signed subtraction built upon unsigned add and subtract.
SignedMutableBigInteger#signedSubtract(MutableBigInteger):::Signed subtraction built upon unsigned add and subtract.
SignedMutableBigInteger#toString():::Print out the first intLen ints of this MutableBigInteger's value array starting at offset.
AbstractPlainDatagramSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.
AbstractPlainDatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
AbstractPlainDatagramSocketImpl#create():::Creates a datagram socket
AbstractPlainDatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port.
AbstractPlainDatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet
AbstractPlainDatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination
AbstractPlainDatagramSocketImpl#disconnect():::Disconnects a previously connected socket
AbstractPlainDatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from.
AbstractPlainDatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.
AbstractPlainDatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#getTimeToLive():::Get the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#getTTL():::Get the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#join(InetAddress):::Join the multicast group.
AbstractPlainDatagramSocketImpl#leave(InetAddress):::Leave the multicast group.
AbstractPlainDatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.
AbstractPlainDatagramSocketImpl#close():::Close the socket.
AbstractPlainSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.
AbstractPlainSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
AbstractPlainSocketImpl#create(boolean):::Creates a socket with a boolean that specifies whether this is a stream socket (true) or an unconnected UDP socket (false).
AbstractPlainSocketImpl#connect(String, int):::Creates a socket and connects it to the specified port on the specified host.
AbstractPlainSocketImpl#connect(InetAddress, int):::Creates a socket and connects it to the specified address on the specified port.
AbstractPlainSocketImpl#connect(SocketAddress, int):::Creates a socket and connects it to the specified address on the specified port.
AbstractPlainSocketImpl#bind(InetAddress, int):::Binds the socket to the specified address of the specified local port.
AbstractPlainSocketImpl#listen(int):::Listens, for a specified amount of time, for connections.
AbstractPlainSocketImpl#accept(SocketImpl):::Accepts connections.
AbstractPlainSocketImpl#getInputStream():::Gets an InputStream for this socket.
AbstractPlainSocketImpl#getOutputStream():::Gets an OutputStream for this socket.
AbstractPlainSocketImpl#available():::Returns the number of bytes that can be read without blocking.
AbstractPlainSocketImpl#close():::Closes the socket.
AbstractPlainSocketImpl#shutdownInput():::Shutdown read-half of the socket connection;
AbstractPlainSocketImpl#shutdownOutput():::Shutdown write-half of the socket connection;
Authenticator#setDefault(Authenticator):::Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication
Authenticator#getDefault():::Gets the default authenticator
Authenticator#requestPasswordAuthentication(InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(Authenticator, String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the given authenticator for a password
Authenticator#requestPasswordAuthenticationInstance(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask this authenticator for a password.
Authenticator#getRequestingHost():::Gets the hostname of the site or proxy requesting authentication, or null if not available.
Authenticator#getRequestingSite():::Gets the InetAddress of the site requesting authorization, or null if not available.
Authenticator#getRequestingPort():::Gets the port number for the requested connection.
Authenticator#getRequestingProtocol():::Give the protocol that's requesting the connection
Authenticator#getRequestingPrompt():::Gets the prompt string given by the requestor.
Authenticator#getRequestingScheme():::Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example).
Authenticator#getPasswordAuthentication():::Called when password authorization is needed
Authenticator#getRequestingURL():::Returns the URL that resulted in this request for authentication.
Authenticator#getRequestorType():::Returns whether the requestor is a Proxy or a Server.
CacheRequest#getBody():::Returns an OutputStream to which the response body can be written.
CacheRequest#abort():::Aborts the attempt to cache the response
CacheResponse#getHeaders():::Returns the response headers as a Map.
CacheResponse#getBody():::Returns the response body as an InputStream.
ContentHandler#getContent(URLConnection):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it.
ContentHandler#getContent(URLConnection, Class[]):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified
ContentHandlerFactory#createContentHandler(String):::Creates a new ContentHandler to read an object from a URLStreamHandler.
CookieHandler#getDefault():::Gets the system-wide cookie handler.
CookieHandler#setDefault(CookieHandler):::Sets (or unsets) the system-wide cookie handler
CookieHandler#get(URI, Map>):::Gets all the applicable cookies from a cookie cache for the specified uri in the request header
CookieHandler#put(URI, Map>):::Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.
CookieManager#setCookiePolicy(CookiePolicy):::To set the cookie policy of this cookie manager
CookieManager#getCookieStore():::To retrieve current cookie store.
CookiePolicy#shouldAccept(URI, HttpCookie):::Will be called to see whether or not this cookie should be accepted.
CookieStore#add(URI, HttpCookie):::Adds one HTTP cookie to the store
CookieStore#get(URI):::Retrieve cookies associated with given URI, or whose domain matches the given URI
CookieStore#getCookies():::Get all not-expired cookies in cookie store.
CookieStore#getURIs():::Get all URIs which identify the cookies in this cookie store.
CookieStore#remove(URI, HttpCookie):::Remove a cookie from store.
CookieStore#removeAll():::Remove all cookies in this cookie store.
DatagramPacket#getAddress():::Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.
DatagramPacket#getPort():::Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.
DatagramPacket#getData():::Returns the data buffer
DatagramPacket#getOffset():::Returns the offset of the data to be sent or the offset of the data received.
DatagramPacket#getLength():::Returns the length of the data to be sent or the length of the data received.
DatagramPacket#setData(byte[], int, int):::Set the data buffer for this packet
DatagramPacket#setAddress(InetAddress):::Sets the IP address of the machine to which this datagram is being sent.
DatagramPacket#setPort(int):::Sets the port number on the remote host to which this datagram is being sent.
DatagramPacket#setSocketAddress(SocketAddress):::Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.
DatagramPacket#getSocketAddress():::Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.
DatagramPacket#setData(byte[]):::Set the data buffer for this packet
DatagramPacket#setLength(int):::Set the length for this packet
DatagramSocket#getImpl():::Get the DatagramSocketImpl attached to this socket, creating it if necessary.
DatagramSocket#bind(SocketAddress):::Binds this DatagramSocket to a specific address and port
DatagramSocket#connect(InetAddress, int):::Connects the socket to a remote address for this socket
DatagramSocket#connect(SocketAddress):::Connects this socket to a remote socket address (IP address + port number)
DatagramSocket#disconnect():::Disconnects the socket
DatagramSocket#isBound():::Returns the binding state of the socket
DatagramSocket#isConnected():::Returns the connection state of the socket
DatagramSocket#getInetAddress():::Returns the address to which this socket is connected
DatagramSocket#getPort():::Returns the port number to which this socket is connected
DatagramSocket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected
DatagramSocket#send(DatagramPacket):::Sends a datagram packet from this socket
DatagramSocket#receive(DatagramPacket):::Receives a datagram packet from this socket
DatagramSocket#getLocalAddress():::Gets the local address to which the socket is bound
DatagramSocket#getLocalPort():::Returns the port number on the local host to which this socket is bound.
DatagramSocket#setSoTimeout(int):::Enable/disable SO_TIMEOUT with the specified timeout, in  milliseconds
DatagramSocket#getSoTimeout():::Retrieve setting for SO_TIMEOUT
DatagramSocket#setSendBufferSize(int):::Sets the SO_SNDBUF option to the specified value for this DatagramSocket
DatagramSocket#getSendBufferSize():::Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.
DatagramSocket#setReceiveBufferSize(int):::Sets the SO_RCVBUF option to the specified value for this DatagramSocket
DatagramSocket#getReceiveBufferSize():::Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.
DatagramSocket#setReuseAddress(boolean):::Enable/disable the SO_REUSEADDR socket option
DatagramSocket#getReuseAddress():::Tests if SO_REUSEADDR is enabled.
DatagramSocket#setBroadcast(boolean):::Enable/disable SO_BROADCAST
DatagramSocket#getBroadcast():::Tests if SO_BROADCAST is enabled.
DatagramSocket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket
DatagramSocket#getTrafficClass():::Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket
DatagramSocket#close():::Closes this datagram socket
DatagramSocket#isClosed():::Returns whether the socket is closed or not.
DatagramSocket#getChannel():::Returns the unique java.nio.channels.DatagramChannel object associated with this datagram socket, if any
DatagramSocket#setDatagramSocketImplFactory(DatagramSocketImplFactory):::Sets the datagram socket implementation factory for the application
DatagramSocket#setOption(SocketOption, T):::Sets the value of a socket option.
DatagramSocket#getOption(SocketOption):::Returns the value of a socket option.
DatagramSocket#supportedOptions():::Returns a set of the socket options supported by this socket
DatagramSocketImpl#create():::Creates a datagram socket.
DatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port and address.
DatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet
DatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination
DatagramSocketImpl#disconnect():::Disconnects a datagram socket from its remote destination.
DatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from
DatagramSocketImpl#peekData(DatagramPacket):::Peek at the packet to see who it is from
DatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.
DatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.
DatagramSocketImpl#getTTL():::Retrieve the TTL (time-to-live) option.
DatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.
DatagramSocketImpl#getTimeToLive():::Retrieve the TTL (time-to-live) option.
DatagramSocketImpl#join(InetAddress):::Join the multicast group.
DatagramSocketImpl#leave(InetAddress):::Leave the multicast group.
DatagramSocketImpl#joinGroup(SocketAddress, NetworkInterface):::Join the multicast group.
DatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.
DatagramSocketImpl#close():::Close the socket.
DatagramSocketImpl#getLocalPort():::Gets the local port.
DatagramSocketImpl#getFileDescriptor():::Gets the datagram socket file descriptor.
DatagramSocketImpl#setOption(SocketOption, T):::Called to set a socket option.
DatagramSocketImpl#getOption(SocketOption):::Called to get a socket option.
DatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (DatagramSocket or MulticastSocket)
DatagramSocketImplFactory#createDatagramSocketImpl():::Creates a new DatagramSocketImpl instance.
DefaultDatagramSocketImplFactory#createDatagramSocketImpl(boolean):::Creates a new DatagramSocketImpl instance.
FileNameMap#getContentTypeFor(String):::Gets the MIME type for the specified file name.
HostPortrange#toLowerCase(String):::Convert to lower case, and check that all chars are ascii alphanumeric, '-' or '.' only.
HostPortrange#wildcard():::returns true if the hostname part started with * hostname returns the remaining part of the host component eg "*.foo.com" -> ".foo.com" or "*" -> ""
HttpCookie#parse(String):::Constructs cookies from set-cookie or set-cookie2 header string
HttpCookie#hasExpired():::Reports whether this HTTP cookie has expired or not.
HttpCookie#setComment(String):::Specifies a comment that describes a cookie's purpose
HttpCookie#getComment():::Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.
HttpCookie#setCommentURL(String):::Specifies a comment URL that describes a cookie's purpose
HttpCookie#getCommentURL():::Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.
HttpCookie#setDiscard(boolean):::Specify whether user agent should discard the cookie unconditionally
HttpCookie#getDiscard():::Returns the discard attribute of the cookie
HttpCookie#setPortlist(String):::Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.
HttpCookie#getPortlist():::Returns the port list attribute of the cookie
HttpCookie#setDomain(String):::Specifies the domain within which this cookie should be presented
HttpCookie#getDomain():::Returns the domain name set for this cookie
HttpCookie#setMaxAge(long):::Sets the maximum age of the cookie in seconds
HttpCookie#getMaxAge():::Returns the maximum age of the cookie, specified in seconds
HttpCookie#setPath(String):::Specifies a path for the cookie to which the client should return the cookie
HttpCookie#getPath():::Returns the path on the server to which the browser returns this cookie
HttpCookie#setSecure(boolean):::Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL
HttpCookie#getSecure():::Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
HttpCookie#getName():::Returns the name of the cookie
HttpCookie#setValue(String):::Assigns a new value to a cookie after the cookie is created
HttpCookie#getValue():::Returns the value of the cookie.
HttpCookie#getVersion():::Returns the version of the protocol this cookie complies with
HttpCookie#setVersion(int):::Sets the version of the cookie protocol this cookie complies with
HttpCookie#isHttpOnly():::Returns true if this cookie contains the HttpOnly attribute
HttpCookie#setHttpOnly(boolean):::Indicates whether the cookie should be considered HTTP Only
HttpCookie#domainMatches(String, String):::The utility method to check whether a host name is in a domain or not
HttpCookie#toString():::Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading "Cookie:" token.
HttpCookie#equals(Object):::Test the equality of two HTTP cookies
HttpCookie#hashCode():::Returns the hash code of this HTTP cookie
HttpCookie#clone():::Create and return a copy of this object.
HttpRetryException#responseCode():::Returns the http response code
HttpRetryException#getReason():::Returns a string explaining why the http request could not be retried.
HttpRetryException#getLocation():::Returns the value of the Location header field if the error resulted from redirection.
HttpURLConnection#setAuthenticator(Authenticator):::Supplies an java.net.Authenticator Authenticator to be used when authentication is requested through the HTTP protocol for this HttpURLConnection
HttpURLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field
HttpURLConnection#setFixedLengthStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
HttpURLConnection#setFixedLengthStreamingMode(long):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
HttpURLConnection#setChunkedStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance
HttpURLConnection#getHeaderField(int):::Returns the value for the n^th header field
HttpURLConnection#setFollowRedirects(boolean):::Sets whether HTTP redirects  (requests with response code 3xx) should be automatically followed by this class
HttpURLConnection#getFollowRedirects():::Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.
HttpURLConnection#setInstanceFollowRedirects(boolean):::Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance
HttpURLConnection#getInstanceFollowRedirects():::Returns the value of this HttpURLConnection's instanceFollowRedirects field.
HttpURLConnection#setRequestMethod(String):::Set the method for the URL request, one of: <UL>  <LI>GET  <LI>POST  <LI>HEAD  <LI>OPTIONS  <LI>PUT  <LI>DELETE  <LI>TRACE </UL> are legal, subject to protocol restrictions
HttpURLConnection#getRequestMethod():::Get the request method.
HttpURLConnection#getResponseCode():::Gets the status code from an HTTP response message
HttpURLConnection#getResponseMessage():::Gets the HTTP response message, if any, returned along with the response code from a server
HttpURLConnection#disconnect():::Indicates that other requests to the server are unlikely in the near future
HttpURLConnection#usingProxy():::Indicates if the connection is going through a proxy.
HttpURLConnection#getPermission():::Returns a SocketPermission object representing the permission necessary to connect to the destination host and port.
HttpURLConnection#getErrorStream():::Returns the error stream if the connection failed but the server sent useful data nonetheless
IDN#toASCII(String, int):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490
IDN#toASCII(String):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490
IDN#toUnicode(String, int):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490
IDN#toUnicode(String):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490
Inet4Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address
Inet4Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
Inet4Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
Inet4Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
Inet4Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
Inet4Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.
Inet4Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
Inet4Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
Inet4Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
Inet4Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
Inet4Address#getAddress():::Returns the raw IP address of this InetAddress object
Inet4Address#getHostAddress():::Returns the IP address string in textual presentation form.
Inet4Address#hashCode():::Returns a hashcode for this IP address.
Inet4Address#equals(Object):::Compares this object against the specified object
Inet4Address#numericToTextFormat(byte[]):::Converts IPv4 binary address into a string suitable for presentation.
Inet6Address#getByAddress(String, byte[], NetworkInterface):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr
Inet6Address#getByAddress(String, byte[], int):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value
Inet6Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address
Inet6Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
Inet6Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
Inet6Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
Inet6Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
Inet6Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.
Inet6Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
Inet6Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
Inet6Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
Inet6Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
Inet6Address#getAddress():::Returns the raw IP address of this InetAddress object
Inet6Address#getScopeId():::Returns the numeric scopeId, if this instance is associated with an interface
Inet6Address#getScopedInterface():::Returns the scoped interface, if this instance was created with with a scoped interface.
Inet6Address#getHostAddress():::Returns the IP address string in textual presentation
Inet6Address#hashCode():::Returns a hashcode for this IP address.
Inet6Address#equals(Object):::Compares this object against the specified object
Inet6Address#isIPv4CompatibleAddress():::Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address.
Inet6Address#numericToTextFormat(byte[]):::Convert IPv6 binary address into presentation (printable) format.
InetAddress#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address.
InetAddress#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
InetAddress#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
InetAddress#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
InetAddress#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
InetAddress#isMCGlobal():::Utility routine to check if the multicast address has global scope.
InetAddress#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
InetAddress#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
InetAddress#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
InetAddress#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
InetAddress#isReachable(int):::Test whether that address is reachable
InetAddress#isReachable(NetworkInterface, int, int):::Test whether that address is reachable
InetAddress#getHostName():::Gets the host name for this IP address
InetAddress#getHostName(boolean):::Returns the hostname for this address
InetAddress#getCanonicalHostName():::Gets the fully qualified domain name for this IP address
InetAddress#getAddress():::Returns the raw IP address of this InetAddress object
InetAddress#getHostAddress():::Returns the IP address string in textual presentation.
InetAddress#hashCode():::Returns a hashcode for this IP address.
InetAddress#equals(Object):::Compares this object against the specified object
InetAddress#toString():::Converts this IP address to a String
InetAddress#getByAddress(String, byte[]):::Creates an InetAddress based on the provided host name and IP address
InetAddress#getByName(String):::Determines the IP address of a host, given the host's name
InetAddress#getAllByName(String):::Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system
InetAddress#getLoopbackAddress():::Returns the loopback address
InetAddress#getAllByName0(String, boolean):::package private so SocketPermission can call it
InetAddress#getByAddress(byte[]):::Returns an InetAddress object given the raw IP address 
InetAddress#getLocalHost():::Returns the address of the local host
InetSocketAddress#createUnresolved(String, int):::Creates an unresolved socket address from a hostname and a port number
InetSocketAddress#getPort():::Gets the port number.
InetSocketAddress#getAddress():::Gets the InetAddress.
InetSocketAddress#getHostName():::Gets the hostname
InetSocketAddress#getHostString():::Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal)
InetSocketAddress#isUnresolved():::Checks whether the address has been resolved or not.
InetSocketAddress#toString():::Constructs a string representation of this InetSocketAddress
InetSocketAddress#equals(Object):::Compares this object against the specified object
InetSocketAddress#hashCode():::Returns a hashcode for this socket address.
InMemoryCookieStore#add(URI, HttpCookie):::Add one cookie into cookie store.
InMemoryCookieStore#get(URI):::Get all cookies, which:  1) given uri domain-matches with, or, associated with     given uri when added to the cookie store
InMemoryCookieStore#getCookies():::Get all cookies in cookie store, except those have expired
InMemoryCookieStore#getURIs():::Get all URIs, which are associated with at least one cookie of this cookie store.
InMemoryCookieStore#remove(URI, HttpCookie):::Remove a cookie from store
InMemoryCookieStore#removeAll():::Remove all cookies in this cookie store.
InterfaceAddress#getAddress():::Returns an InetAddress for this address.
InterfaceAddress#getBroadcast():::Returns an InetAddress for the broadcast address for this InterfaceAddress
InterfaceAddress#getNetworkPrefixLength():::Returns the network prefix length for this address
InterfaceAddress#equals(Object):::Compares this object against the specified object
InterfaceAddress#hashCode():::Returns a hashcode for this Interface address.
InterfaceAddress#toString():::Converts this Interface address to a String
JarURLConnection#getJarFileURL():::Returns the URL for the Jar file for this connection.
JarURLConnection#getEntryName():::Return the entry name for this connection
JarURLConnection#getJarFile():::Return the JAR file for this connection.
JarURLConnection#getManifest():::Returns the Manifest for this connection, or null if none.
JarURLConnection#getJarEntry():::Return the JAR entry object for this connection, if any
JarURLConnection#getAttributes():::Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise.
JarURLConnection#getMainAttributes():::Returns the main Attributes for the JAR file for this connection.
JarURLConnection#getCertificates():::Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise
MulticastSocket#setTTL(byte):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
MulticastSocket#setTimeToLive(int):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
MulticastSocket#getTTL():::Get the default time-to-live for multicast packets sent out on the socket.
MulticastSocket#getTimeToLive():::Get the default time-to-live for multicast packets sent out on the socket.
MulticastSocket#joinGroup(InetAddress):::Joins a multicast group
MulticastSocket#leaveGroup(InetAddress):::Leave a multicast group
MulticastSocket#joinGroup(SocketAddress, NetworkInterface):::Joins the specified multicast group at the specified interface
MulticastSocket#leaveGroup(SocketAddress, NetworkInterface):::Leave a multicast group on a specified local interface
MulticastSocket#setInterface(InetAddress):::Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface
MulticastSocket#getInterface():::Retrieve the address of the network interface used for multicast packets.
MulticastSocket#setNetworkInterface(NetworkInterface):::Specify the network interface for outgoing multicast datagrams sent on this socket.
MulticastSocket#getNetworkInterface():::Get the multicast network interface set.
MulticastSocket#setLoopbackMode(boolean):::Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket
MulticastSocket#getLoopbackMode():::Get the setting for local loopback of multicast datagrams.
MulticastSocket#send(DatagramPacket, byte):::Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket
NetworkInterface#getName():::Get the name of this network interface.
NetworkInterface#getInetAddresses():::Get an Enumeration with all or a subset of the InetAddresses bound to this network interface
NetworkInterface#inetAddresses():::Get a Stream of all or a subset of the InetAddresses bound to this network interface
NetworkInterface#getInterfaceAddresses():::Get a List of all or a subset of the InterfaceAddresses of this network interface
NetworkInterface#getSubInterfaces():::Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface
NetworkInterface#subInterfaces():::Get a Stream of all subinterfaces (also known as virtual interfaces) attached to this network interface.
NetworkInterface#getParent():::Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.
NetworkInterface#getIndex():::Returns the index of this network interface
NetworkInterface#getDisplayName():::Get the display name of this network interface
NetworkInterface#getByName(String):::Searches for the network interface with the specified name.
NetworkInterface#getByIndex(int):::Get a network interface given its index.
NetworkInterface#getByInetAddress(InetAddress):::Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it
NetworkInterface#getNetworkInterfaces():::Returns an Enumeration of all the interfaces on this machine
NetworkInterface#networkInterfaces():::Returns a Stream of all the interfaces on this machine
NetworkInterface#getHardwareAddress():::Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges
NetworkInterface#getMTU():::Returns the Maximum Transmission Unit (MTU) of this interface.
NetworkInterface#isVirtual():::Returns whether this interface is a virtual interface (also called subinterface)
NetworkInterface#equals(Object):::Compares this object against the specified object
NetworkInterface#getDefault():::Returns the default network interface of this system
PasswordAuthentication#getUserName():::Returns the user name.
PasswordAuthentication#getPassword():::Returns the user password
ProtocolFamily#name():::Returns the name of the protocol family.
Proxy#type():::Returns the proxy type.
Proxy#address():::Returns the socket address of the proxy, or null if its a direct connection.
Proxy#toString():::Constructs a string representation of this Proxy
Proxy#equals(Object):::Compares this object against the specified object
Proxy#hashCode():::Returns a hashcode for this Proxy.
ProxySelector#getDefault():::Gets the system-wide proxy selector.
ProxySelector#setDefault(ProxySelector):::Sets (or unsets) the system-wide proxy selector
ProxySelector#select(URI):::Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at
ProxySelector#connectFailed(URI, SocketAddress, IOException):::Called to indicate that a connection could not be established to a proxy/socks server
ProxySelector#of(InetSocketAddress):::Returns a ProxySelector which uses the given proxy address for all HTTP and HTTPS requests
ResponseCache#getDefault():::Gets the system-wide response cache.
ResponseCache#setDefault(ResponseCache):::Sets (or unsets) the system-wide cache
ResponseCache#get(URI, String, Map>):::Retrieve the cached response based on the requesting uri, request method and request headers
ResponseCache#put(URI, URLConnection):::The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache
SecureCacheResponse#getCipherSuite():::Returns the cipher suite in use on the original connection that retrieved the network resource.
SecureCacheResponse#getLocalCertificateChain():::Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource
SecureCacheResponse#getServerCertificateChain():::Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache
SecureCacheResponse#getPeerPrincipal():::Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.
SecureCacheResponse#getLocalPrincipal():::Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.
ServerSocket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.
ServerSocket#createImpl():::Creates the socket implementation.
ServerSocket#bind(SocketAddress):::Binds the ServerSocket to a specific address (IP address and port number)
ServerSocket#bind(SocketAddress, int):::Binds the ServerSocket to a specific address (IP address and port number)
ServerSocket#getInetAddress():::Returns the local address of this server socket
ServerSocket#getLocalPort():::Returns the port number on which this socket is listening
ServerSocket#accept():::Listens for a connection to be made to this socket and accepts it
ServerSocket#implAccept(Socket):::Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket
ServerSocket#close():::Closes this socket
ServerSocket#getChannel():::Returns the unique java.nio.channels.ServerSocketChannel object associated with this socket, if any
ServerSocket#isBound():::Returns the binding state of the ServerSocket.
ServerSocket#isClosed():::Returns the closed state of the ServerSocket.
ServerSocket#setSoTimeout(int):::Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT with the specified timeout, in milliseconds
ServerSocket#getSoTimeout():::Retrieve setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT
ServerSocket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option
ServerSocket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.
ServerSocket#toString():::Returns the implementation address and implementation port of this socket as a String
ServerSocket#setSocketFactory(SocketImplFactory):::Sets the server socket implementation factory for the application
ServerSocket#setReceiveBufferSize(int):::Sets a default proposed value for the SocketOptions#SO_RCVBUF SO_RCVBUF option for sockets accepted from this ServerSocket
ServerSocket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket
ServerSocket#setPerformancePreferences(int, int, int):::Sets performance preferences for this ServerSocket
ServerSocket#setOption(SocketOption, T):::Sets the value of a socket option.
ServerSocket#getOption(SocketOption):::Returns the value of a socket option.
ServerSocket#supportedOptions():::Returns a set of the socket options supported by this server socket
Socket#createImpl(boolean):::Creates the socket implementation.
Socket#setImpl():::Sets impl to the system-default type of SocketImpl.
Socket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.
Socket#connect(SocketAddress):::Connects this socket to the server.
Socket#connect(SocketAddress, int):::Connects this socket to the server with a specified timeout value
Socket#bind(SocketAddress):::Binds the socket to a local address
Socket#postAccept():::set the flags after an accept() call.
Socket#getInetAddress():::Returns the address to which the socket is connected
Socket#getLocalAddress():::Gets the local address to which the socket is bound
Socket#getPort():::Returns the remote port number to which this socket is connected
Socket#getLocalPort():::Returns the local port number to which this socket is bound
Socket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected
Socket#getChannel():::Returns the unique java.nio.channels.SocketChannel SocketChannel object associated with this socket, if any
Socket#getInputStream():::Returns an input stream for this socket
Socket#getOutputStream():::Returns an output stream for this socket
Socket#setTcpNoDelay(boolean):::Enable/disable SocketOptions#TCP_NODELAY TCP_NODELAY (disable/enable Nagle's algorithm).
Socket#getTcpNoDelay():::Tests if SocketOptions#TCP_NODELAY TCP_NODELAY is enabled.
Socket#setSoLinger(boolean, int):::Enable/disable SocketOptions#SO_LINGER SO_LINGER with the specified linger time in seconds
Socket#getSoLinger():::Returns setting for SocketOptions#SO_LINGER SO_LINGER
Socket#sendUrgentData(int):::Send one byte of urgent data on the socket
Socket#setOOBInline(boolean):::Enable/disable SocketOptions#SO_OOBINLINE SO_OOBINLINE (receipt of TCP urgent data)  By default, this option is disabled and TCP urgent data received on a socket is silently discarded
Socket#getOOBInline():::Tests if SocketOptions#SO_OOBINLINE SO_OOBINLINE is enabled.
Socket#setSoTimeout(int)::: Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT  with the specified timeout, in milliseconds
Socket#getSoTimeout():::Returns setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT
Socket#setSendBufferSize(int):::Sets the SocketOptions#SO_SNDBUF SO_SNDBUF option to the specified value for this Socket
Socket#getSendBufferSize():::Get value of the SocketOptions#SO_SNDBUF SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.
Socket#setReceiveBufferSize(int):::Sets the SocketOptions#SO_RCVBUF SO_RCVBUF option to the specified value for this Socket
Socket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.
Socket#setKeepAlive(boolean):::Enable/disable SocketOptions#SO_KEEPALIVE SO_KEEPALIVE.
Socket#getKeepAlive():::Tests if SocketOptions#SO_KEEPALIVE SO_KEEPALIVE is enabled.
Socket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket
Socket#getTrafficClass():::Gets traffic class or type-of-service in the IP header for packets sent from this Socket  As the underlying network implementation may ignore the traffic class or type-of-service set using #setTrafficClass(int) this method may return a different value than was previously set using the #setTrafficClass(int) method on this Socket.
Socket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option
Socket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.
Socket#close():::Closes this socket
Socket#shutdownInput():::Places the input stream for this socket at "end of stream"
Socket#shutdownOutput():::Disables the output stream for this socket
Socket#toString():::Converts this socket to a String.
Socket#isConnected():::Returns the connection state of the socket
Socket#isBound():::Returns the binding state of the socket
Socket#isClosed():::Returns the closed state of the socket.
Socket#isInputShutdown():::Returns whether the read-half of the socket connection is closed.
Socket#isOutputShutdown():::Returns whether the write-half of the socket connection is closed.
Socket#setSocketImplFactory(SocketImplFactory):::Sets the client socket implementation factory for the application
Socket#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket
Socket#setOption(SocketOption, T):::Sets the value of a socket option.
Socket#getOption(SocketOption):::Returns the value of a socket option.
Socket#supportedOptions():::Returns a set of the socket options supported by this socket
SocketCleanable#register(FileDescriptor, boolean):::Register a socket specific Cleanable with the FileDescriptor if the FileDescriptor is non-null and the raw fd is != -1.
SocketCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.
SocketCleanable#performCleanup():::Close the native handle or fd.
SocketImpl#create(boolean):::Creates either a stream or a datagram socket.
SocketImpl#connect(String, int):::Connects this socket to the specified port on the named host.
SocketImpl#connect(InetAddress, int):::Connects this socket to the specified port number on the specified host.
SocketImpl#connect(SocketAddress, int):::Connects this socket to the specified port number on the specified host
SocketImpl#bind(InetAddress, int):::Binds this socket to the specified local IP address and port number.
SocketImpl#listen(int):::Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument
SocketImpl#accept(SocketImpl):::Accepts a connection.
SocketImpl#getInputStream():::Returns an input stream for this socket.
SocketImpl#getOutputStream():::Returns an output stream for this socket.
SocketImpl#available():::Returns the number of bytes that can be read from this socket without blocking.
SocketImpl#close():::Closes this socket.
SocketImpl#shutdownInput():::Places the input stream for this socket at "end of stream"
SocketImpl#shutdownOutput():::Disables the output stream for this socket
SocketImpl#getFileDescriptor():::Returns the value of this socket's fd field.
SocketImpl#getInetAddress():::Returns the value of this socket's address field.
SocketImpl#getPort():::Returns the value of this socket's port field.
SocketImpl#supportsUrgentData():::Returns whether or not this SocketImpl supports sending urgent data
SocketImpl#sendUrgentData(int):::Send one byte of urgent data on the socket
SocketImpl#getLocalPort():::Returns the value of this socket's localport field.
SocketImpl#toString():::Returns the address and port of this socket as a String.
SocketImpl#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket
SocketImpl#setOption(SocketOption, T):::Called to set a socket option.
SocketImpl#getOption(SocketOption):::Called to get a socket option.
SocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
SocketImplFactory#createSocketImpl():::Creates a new SocketImpl instance.
SocketInputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream.  The getChannel method of SocketInputStream returns null since it is a socket based stream.
SocketInputStream#read(byte[]):::Reads into a byte array data from the socket.
SocketInputStream#read(byte[], int, int):::Reads into a byte array b at offset off, length bytes of data.
SocketInputStream#read():::Reads a single byte from the socket.
SocketInputStream#skip(long):::Skips n bytes of input.
SocketInputStream#available():::Returns the number of bytes that can be read without blocking.
SocketInputStream#finalize():::Overrides finalize, the fd is closed by the Socket.
SocketOption#name():::Returns the name of the socket option.
SocketOption#type():::Returns the type of the socket option value.
SocketOptions#setOption(int, Object):::Enable/disable the option specified by optID
SocketOptions#getOption(int):::Fetch the value of an option
SocketOutputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream
SocketOutputStream#write(int):::Writes a byte to the socket.
SocketOutputStream#write(byte[]):::Writes the contents of the buffer b to the socket.
SocketOutputStream#write(byte[], int, int):::Writes length bytes from buffer b starting at offset len.
SocketOutputStream#finalize():::Overrides finalize, the fd is closed by the Socket.
SocketPermission#getCanonName():::attempt to get the fully qualified domain name
SocketPermission#getIP():::get IP addresses
SocketPermission#implies(Permission):::Checks if this socket permission object "implies" the specified permission
SocketPermission#impliesIgnoreMask(SocketPermission):::Checks if the incoming Permission's action are a proper subset of the this object's actions
SocketPermission#equals(Object):::Checks two SocketPermission objects for equality.
SocketPermission#hashCode():::Returns the hash code value for this object.
SocketPermission#getActions():::Returns the canonical string representation of the actions
SocketPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing SocketPermission objects
SocketPermissionCollection#add(Permission):::Adds a permission to the SocketPermissions
SocketPermissionCollection#implies(Permission):::Check and see if this collection of permissions implies the permissions expressed in "permission".
SocketPermissionCollection#elements():::Returns an enumeration of all the SocketPermission objects in the container.
SocksSocketImpl#connect(SocketAddress, int):::Connects the Socks Socket to the specified endpoint
SocksSocketImpl#socksBind(InetSocketAddress):::Sends the Bind request to the SOCKS proxy
SocksSocketImpl#acceptFrom(SocketImpl, InetSocketAddress):::Accepts a connection from a specific host.
SocksSocketImpl#getInetAddress():::Returns the value of this socket's address field.
SocksSocketImpl#getPort():::Returns the value of this socket's port field.
URI#create(String):::Creates a URI by parsing the given string
URI#parseServerAuthority():::Attempts to parse this URI's authority component, if defined, into user-information, host, and port components
URI#normalize():::Normalizes this URI's path
URI#resolve(URI):::Resolves the given URI against this URI
URI#resolve(String):::Constructs a new URI by parsing the given string and then resolving it against this URI
URI#relativize(URI):::Relativizes the given URI against this URI
URI#toURL():::Constructs a URL from this URI
URI#getScheme():::Returns the scheme component of this URI
URI#isAbsolute():::Tells whether or not this URI is absolute
URI#isOpaque():::Tells whether or not this URI is opaque
URI#getRawSchemeSpecificPart():::Returns the raw scheme-specific part of this URI
URI#getSchemeSpecificPart():::Returns the decoded scheme-specific part of this URI
URI#getRawAuthority():::Returns the raw authority component of this URI
URI#getAuthority():::Returns the decoded authority component of this URI
URI#getRawUserInfo():::Returns the raw user-information component of this URI
URI#getUserInfo():::Returns the decoded user-information component of this URI
URI#getHost():::Returns the host component of this URI
URI#getPort():::Returns the port number of this URI
URI#getRawPath():::Returns the raw path component of this URI
URI#getPath():::Returns the decoded path component of this URI
URI#getRawQuery():::Returns the raw query component of this URI
URI#getQuery():::Returns the decoded query component of this URI
URI#getRawFragment():::Returns the raw fragment component of this URI
URI#getFragment():::Returns the decoded fragment component of this URI
URI#equals(Object):::Tests this URI for equality with another object
URI#hashCode():::Returns a hash-code value for this URI
URI#compareTo(URI):::Compares this URI to another object, which must be a URI
URI#toString():::Returns the content of this URI as a string
URI#toASCIIString():::Returns the content of this URI as a US-ASCII string
URISyntaxException#getInput():::Returns the input string.
URISyntaxException#getReason():::Returns a string explaining why the input string could not be parsed.
URISyntaxException#getIndex():::Returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known.
URISyntaxException#getMessage():::Returns a string describing the parse error
URL#fromURI(URI):::Creates a URL from a URI, as if by invoking uri.toURL().
URL#set(String, String, int, String, String):::Sets the fields of the URL
URL#set(String, String, int, String, String, String, String, String):::Sets the specified 8 fields of the URL
URL#getQuery():::Gets the query part of this URL.
URL#getPath():::Gets the path part of this URL.
URL#getUserInfo():::Gets the userInfo part of this URL.
URL#getAuthority():::Gets the authority part of this URL.
URL#getPort():::Gets the port number of this URL.
URL#getDefaultPort():::Gets the default port number of the protocol associated with this URL
URL#getProtocol():::Gets the protocol name of this URL.
URL#getHost():::Gets the host name of this URL, if applicable
URL#getFile():::Gets the file name of this URL
URL#getRef():::Gets the anchor (also known as the "reference") of this URL.
URL#equals(Object):::Compares this URL for equality with another object.  If the given object is not a URL then this method immediately returns false.  Two URL objects are equal if they have the same protocol, reference equivalent hosts, have the same port number on the host, and the same file and fragment of the file.  Two hosts are considered equivalent if both host names can be resolved into the same IP addresses; else if either host name can't be resolved, the host names must be equal without regard to case; or both host names equal to null.  Since hosts comparison requires name resolution, this operation is a blocking operation
URL#hashCode():::Creates an integer suitable for hash table indexing.  The hash code is based upon all the URL components relevant for URL comparison
URL#sameFile(URL):::Compares two URLs, excluding the fragment component.  Returns true if this URL and the other argument are equal without taking the fragment component into consideration.
URL#toString():::Constructs a string representation of this URL
URL#toExternalForm():::Constructs a string representation of this URL
URL#toURI():::Returns a java.net.URI equivalent to this URL
URL#openConnection():::Returns a java.net.URLConnection URLConnection instance that represents a connection to the remote object referred to by the URL
URL#openConnection(Proxy):::Same as #openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection
URL#openStream():::Opens a connection to this URL and returns an InputStream for reading from that connection
URL#getContent():::Gets the contents of this URL
URL#getContent(Class[]):::Gets the contents of this URL
URL#setURLStreamHandlerFactory(URLStreamHandlerFactory):::Sets an application's URLStreamHandlerFactory
URL#toLowerCase(String):::Returns the protocol in lower case
URL#isOverrideable(String):::Non-overrideable protocols: "jrt" and "file"  Character-based comparison for performance reasons; also ensures case-insensitive comparison in a locale-independent fashion.
URL#getURLStreamHandler(String):::Returns the Stream Handler.
URLClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource
URLClassLoader#close():::Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader
URLClassLoader#addURL(URL):::Appends the specified URL to the list of URLs to search for classes and resources
URLClassLoader#getURLs():::Returns the search path of URLs for loading classes and resources
URLClassLoader#findClass(String):::Finds and loads the class with the specified name from the URL search path
URLClassLoader#definePackage(String, Manifest, URL):::Defines a new package by name in this URLClassLoader
URLClassLoader#findResource(String):::Finds the resource with the specified name on the URL search path.
URLClassLoader#findResources(String):::Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.
URLClassLoader#getPermissions(CodeSource):::Returns the permissions for the given codesource object
URLClassLoader#newInstance(URL[], ClassLoader):::Creates a new instance of URLClassLoader for the specified URLs and parent class loader
URLClassLoader#newInstance(URL[]):::Creates a new instance of URLClassLoader for the specified URLs and default parent class loader
URLConnection#getFileNameMap():::Loads filename map (a mimetable) from a data file
URLConnection#setFileNameMap(FileNameMap):::Sets the FileNameMap
URLConnection#connect():::Opens a communications link to the resource referenced by this URL, if such a connection has not already been established
URLConnection#setConnectTimeout(int):::Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection
URLConnection#getConnectTimeout():::Returns setting for connect timeout
URLConnection#setReadTimeout(int):::Sets the read timeout to a specified timeout, in milliseconds
URLConnection#getReadTimeout():::Returns setting for read timeout
URLConnection#getURL():::Returns the value of this URLConnection's URL field.
URLConnection#getContentLength():::Returns the value of the content-length header field
URLConnection#getContentLengthLong():::Returns the value of the content-length header field as a long.
URLConnection#getContentType():::Returns the value of the content-type header field.
URLConnection#getContentEncoding():::Returns the value of the content-encoding header field.
URLConnection#getExpiration():::Returns the value of the expires header field.
URLConnection#getDate():::Returns the value of the date header field.
URLConnection#getLastModified():::Returns the value of the last-modified header field
URLConnection#getHeaderField(String):::Returns the value of the named header field
URLConnection#getHeaderFields():::Returns an unmodifiable Map of the header fields
URLConnection#getHeaderFieldInt(String, int):::Returns the value of the named field parsed as a number
URLConnection#getHeaderFieldLong(String, long):::Returns the value of the named field parsed as a number
URLConnection#getHeaderFieldDate(String, long):::Returns the value of the named field parsed as date
URLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field
URLConnection#getHeaderField(int):::Returns the value for the n^th header field
URLConnection#getContent():::Retrieves the contents of this URL connection
URLConnection#getContent(Class[]):::Retrieves the contents of this URL connection.
URLConnection#getPermission():::Returns a permission object representing the permission necessary to make the connection represented by this object
URLConnection#getInputStream():::Returns an input stream that reads from this open connection
URLConnection#getOutputStream():::Returns an output stream that writes to this connection.
URLConnection#toString():::Returns a String representation of this URL connection.
URLConnection#setDoInput(boolean):::Sets the value of the doInput field for this URLConnection to the specified value
URLConnection#getDoInput():::Returns the value of this URLConnection's doInput flag.
URLConnection#setDoOutput(boolean):::Sets the value of the doOutput field for this URLConnection to the specified value
URLConnection#getDoOutput():::Returns the value of this URLConnection's doOutput flag.
URLConnection#setAllowUserInteraction(boolean):::Set the value of the allowUserInteraction field of this URLConnection.
URLConnection#getAllowUserInteraction():::Returns the value of the allowUserInteraction field for this object.
URLConnection#setDefaultAllowUserInteraction(boolean):::Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.
URLConnection#getDefaultAllowUserInteraction():::Returns the default value of the allowUserInteraction field
URLConnection#setUseCaches(boolean):::Sets the value of the useCaches field of this URLConnection to the specified value
URLConnection#getUseCaches():::Returns the value of this URLConnection's useCaches field.
URLConnection#setIfModifiedSince(long):::Sets the value of the ifModifiedSince field of this URLConnection to the specified value.
URLConnection#getIfModifiedSince():::Returns the value of this object's ifModifiedSince field.
URLConnection#getDefaultUseCaches():::Returns the default value of a URLConnection's useCaches flag
URLConnection#setDefaultUseCaches(boolean):::Sets the default value of the useCaches field to the specified value
URLConnection#setDefaultUseCaches(String, boolean):::Sets the default value of the useCaches field for the named protocol to the given value
URLConnection#getDefaultUseCaches(String):::Returns the default value of the useCaches flag for the given protocol
URLConnection#setRequestProperty(String, String):::Sets the general request property
URLConnection#addRequestProperty(String, String):::Adds a general request property specified by a key-value pair
URLConnection#getRequestProperty(String):::Returns the value of the named general request property for this connection.
URLConnection#getRequestProperties():::Returns an unmodifiable Map of general request properties for this connection
URLConnection#setDefaultRequestProperty(String, String):::Sets the default value of a general request property
URLConnection#getDefaultRequestProperty(String):::Returns the value of the default request property
URLConnection#setContentHandlerFactory(ContentHandlerFactory):::Sets the ContentHandlerFactory of an application
URLConnection#guessContentTypeFromName(String):::Tries to determine the content type of an object, based on the specified "file" component of a URL
URLConnection#guessContentTypeFromStream(InputStream):::Tries to determine the type of an input stream based on the characters at the beginning of the input stream
URLDecoder#decode(String):::Decodes a x-www-form-urlencoded string
URLDecoder#decode(String, String):::Decodes an application/x-www-form-urlencoded string using a specific encoding scheme
URLDecoder#decode(String, Charset):::Decodes an application/x-www-form-urlencoded string using a specific java.nio.charset.Charset Charset
URLEncoder#encode(String):::Translates a string into x-www-form-urlencoded format
URLEncoder#encode(String, String):::Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme
URLEncoder#encode(String, Charset):::Translates a string into application/x-www-form-urlencoded format using a specific java.nio.charset.Charset Charset
URLPermission#getActions():::Returns the normalized method list and request header list, in the form:       "method-names : header-names"   where method-names is the list of methods separated by commas and header-names is the list of permitted headers separated by commas
URLPermission#implies(Permission):::Checks if this URLPermission implies the given permission
URLPermission#equals(Object):::Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url
URLPermission#hashCode():::Returns a hashcode calculated from the hashcode of the actions String and the url string.
URLStreamHandler#openConnection(URL):::Opens a connection to the object referenced by the URL argument
URLStreamHandler#openConnection(URL, Proxy):::Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection
URLStreamHandler#parseURL(URL, String, int, int):::Parses the string representation of a URL into a URL object
URLStreamHandler#getDefaultPort():::Returns the default port for a URL parsed by this handler
URLStreamHandler#equals(URL, URL):::Provides the default equals calculation
URLStreamHandler#hashCode(URL):::Provides the default hash calculation
URLStreamHandler#sameFile(URL, URL):::Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path
URLStreamHandler#getHostAddress(URL):::Get the IP address of our host
URLStreamHandler#hostsEqual(URL, URL):::Compares the host components of two URLs.
URLStreamHandler#toExternalForm(URL):::Converts a URL of a specific protocol to a String.
URLStreamHandler#setURL(URL, String, String, int, String, String, String, String, String):::Sets the fields of the URL argument to the indicated values
URLStreamHandler#setURL(URL, String, String, int, String, String):::Sets the fields of the URL argument to the indicated values
URLStreamHandlerFactory#createURLStreamHandler(String):::Creates a new URLStreamHandler instance with the specified protocol.
AsynchronousByteChannel#read(ByteBuffer, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer
AsynchronousByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer
AsynchronousByteChannel#write(ByteBuffer, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer
AsynchronousByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer
AsynchronousChannel#close():::Closes this channel
AsynchronousChannelGroup#provider():::Returns the provider that created this channel group.
AsynchronousChannelGroup#withFixedThreadPool(int, ThreadFactory):::Creates an asynchronous channel group with a fixed thread pool
AsynchronousChannelGroup#withCachedThreadPool(ExecutorService, int):::Creates an asynchronous channel group with a given thread pool that creates new threads as needed
AsynchronousChannelGroup#withThreadPool(ExecutorService):::Creates an asynchronous channel group with a given thread pool
AsynchronousChannelGroup#isShutdown():::Tells whether or not this asynchronous channel group is shutdown.
AsynchronousChannelGroup#isTerminated():::Tells whether or not this group has terminated
AsynchronousChannelGroup#shutdown():::Initiates an orderly shutdown of the group
AsynchronousChannelGroup#shutdownNow():::Shuts down the group and closes all open channels in the group
AsynchronousChannelGroup#awaitTermination(long, TimeUnit):::Awaits termination of the group
AsynchronousFileChannel#open(Path, Set, ExecutorService, FileAttribute...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
AsynchronousFileChannel#open(Path, OpenOption...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
AsynchronousFileChannel#size():::Returns the current size of this channel's file.
AsynchronousFileChannel#truncate(long):::Truncates this channel's file to the given size
AsynchronousFileChannel#force(boolean):::Forces any updates to this channel's file to be written to the storage device that contains it
AsynchronousFileChannel#lock(long, long, boolean, A, CompletionHandler):::Acquires a lock on the given region of this channel's file
AsynchronousFileChannel#lock(A, CompletionHandler):::Acquires an exclusive lock on this channel's file
AsynchronousFileChannel#lock(long, long, boolean):::Acquires a lock on the given region of this channel's file
AsynchronousFileChannel#lock():::Acquires an exclusive lock on this channel's file
AsynchronousFileChannel#tryLock(long, long, boolean):::Attempts to acquire a lock on the given region of this channel's file
AsynchronousFileChannel#tryLock():::Attempts to acquire an exclusive lock on this channel's file
AsynchronousFileChannel#read(ByteBuffer, long, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
AsynchronousFileChannel#read(ByteBuffer, long):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
AsynchronousFileChannel#write(ByteBuffer, long, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
AsynchronousFileChannel#write(ByteBuffer, long):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
AsynchronousServerSocketChannel#provider():::Returns the provider that created this channel.
AsynchronousServerSocketChannel#open(AsynchronousChannelGroup):::Opens an asynchronous server-socket channel
AsynchronousServerSocketChannel#open():::Opens an asynchronous server-socket channel
AsynchronousServerSocketChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for connections
AsynchronousServerSocketChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for connections
AsynchronousServerSocketChannel#accept(A, CompletionHandler):::Accepts a connection
AsynchronousServerSocketChannel#accept():::Accepts a connection
AsynchronousServerSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed
AsynchronousSocketChannel#provider():::Returns the provider that created this channel.
AsynchronousSocketChannel#open(AsynchronousChannelGroup):::Opens an asynchronous socket channel
AsynchronousSocketChannel#open():::Opens an asynchronous socket channel
AsynchronousSocketChannel#shutdownInput():::Shutdown the connection for reading without closing the channel
AsynchronousSocketChannel#shutdownOutput():::Shutdown the connection for writing without closing the channel
AsynchronousSocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected
AsynchronousSocketChannel#connect(SocketAddress, A, CompletionHandler):::Connects this channel
AsynchronousSocketChannel#connect(SocketAddress):::Connects this channel
AsynchronousSocketChannel#read(ByteBuffer, long, TimeUnit, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer
AsynchronousSocketChannel#read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler):::Reads a sequence of bytes from this channel into a subsequence of the given buffers
AsynchronousSocketChannel#write(ByteBuffer, long, TimeUnit, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer
AsynchronousSocketChannel#write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler):::Writes a sequence of bytes to this channel from a subsequence of the given buffers
AsynchronousSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed
Channel#isOpen():::Tells whether or not this channel is open.
Channel#close():::Closes this channel
Channels#newInputStream(ReadableByteChannel):::Constructs a stream that reads bytes from the given channel
Channels#newOutputStream(WritableByteChannel):::Constructs a stream that writes bytes to the given channel
Channels#newInputStream(AsynchronousByteChannel):::Constructs a stream that reads bytes from the given channel
Channels#newOutputStream(AsynchronousByteChannel):::Constructs a stream that writes bytes to the given channel
Channels#newChannel(InputStream):::Constructs a channel that reads bytes from the given stream
Channels#newChannel(OutputStream):::Constructs a channel that writes bytes to the given stream
Channels#newReader(ReadableByteChannel, CharsetDecoder, int):::Constructs a reader that decodes bytes from the given channel using the given decoder
Channels#newReader(ReadableByteChannel, String):::Constructs a reader that decodes bytes from the given channel according to the named charset
Channels#newReader(ReadableByteChannel, Charset):::Constructs a reader that decodes bytes from the given channel according to the given charset
Channels#newWriter(WritableByteChannel, CharsetEncoder, int):::Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel
Channels#newWriter(WritableByteChannel, String):::Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel
Channels#newWriter(WritableByteChannel, Charset):::Constructs a writer that encodes characters according to the given charset and writes the resulting bytes to the given channel
CompletionHandler#completed(V, A):::Invoked when an operation has completed.
CompletionHandler#failed(Throwable, A):::Invoked when an operation fails.
DatagramChannel#open():::Opens a datagram channel
DatagramChannel#open(ProtocolFamily):::Opens a datagram channel
DatagramChannel#validOps():::Returns an operation set identifying this channel's supported operations
DatagramChannel#socket():::Retrieves a datagram socket associated with this channel
DatagramChannel#isConnected():::Tells whether or not this channel's socket is connected.
DatagramChannel#connect(SocketAddress):::Connects this channel's socket
DatagramChannel#disconnect():::Disconnects this channel's socket
DatagramChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected.
DatagramChannel#receive(ByteBuffer):::Receives a datagram via this channel
DatagramChannel#send(ByteBuffer, SocketAddress):::Sends a datagram via this channel
DatagramChannel#read(ByteBuffer):::Reads a datagram from this channel
DatagramChannel#read(ByteBuffer[], int, int):::Reads a datagram from this channel
DatagramChannel#read(ByteBuffer[]):::Reads a datagram from this channel
DatagramChannel#write(ByteBuffer):::Writes a datagram to this channel
DatagramChannel#write(ByteBuffer[], int, int):::Writes a datagram to this channel
DatagramChannel#write(ByteBuffer[]):::Writes a datagram to this channel
DatagramChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed
FileChannel#open(Path, Set, FileAttribute...):::Opens or creates a file, returning a file channel to access the file
FileChannel#open(Path, OpenOption...):::Opens or creates a file, returning a file channel to access the file
FileChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer
FileChannel#read(ByteBuffer[], int, int):::Reads a sequence of bytes from this channel into a subsequence of the given buffers
FileChannel#read(ByteBuffer[]):::Reads a sequence of bytes from this channel into the given buffers
FileChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer
FileChannel#write(ByteBuffer[], int, int):::Writes a sequence of bytes to this channel from a subsequence of the given buffers
FileChannel#write(ByteBuffer[]):::Writes a sequence of bytes to this channel from the given buffers
FileChannel#position():::Returns this channel's file position.
FileChannel#position(long):::Sets this channel's file position
FileChannel#size():::Returns the current size of this channel's file.
FileChannel#truncate(long):::Truncates this channel's file to the given size
FileChannel#force(boolean):::Forces any updates to this channel's file to be written to the storage device that contains it
FileChannel#transferTo(long, long, WritableByteChannel):::Transfers bytes from this channel's file to the given writable byte channel
FileChannel#transferFrom(ReadableByteChannel, long, long):::Transfers bytes into this channel's file from the given readable byte channel
FileChannel#read(ByteBuffer, long):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
FileChannel#write(ByteBuffer, long):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
FileChannel.MapMode#toString():::Returns a string describing this file-mapping mode.
FileChannel#map(MapMode, long, long):::Maps a region of this channel's file directly into memory
FileChannel#lock(long, long, boolean):::Acquires a lock on the given region of this channel's file
FileChannel#lock():::Acquires an exclusive lock on this channel's file
FileChannel#tryLock(long, long, boolean):::Attempts to acquire a lock on the given region of this channel's file
FileChannel#tryLock():::Attempts to acquire an exclusive lock on this channel's file
FileLock#channel():::Returns the file channel upon whose file this lock was acquired
FileLock#acquiredBy():::Returns the channel upon whose file this lock was acquired.
FileLock#position():::Returns the position within the file of the first byte of the locked region
FileLock#size():::Returns the size of the locked region in bytes
FileLock#isShared():::Tells whether this lock is shared.
FileLock#overlaps(long, long):::Tells whether or not this lock overlaps the given lock range.
FileLock#isValid():::Tells whether or not this lock is valid
FileLock#release():::Releases this lock
FileLock#close():::This method invokes the #release method
FileLock#toString():::Returns a string describing the range, type, and validity of this lock.
GatheringByteChannel#write(ByteBuffer[], int, int):::Writes a sequence of bytes to this channel from a subsequence of the given buffers
GatheringByteChannel#write(ByteBuffer[]):::Writes a sequence of bytes to this channel from the given buffers
InterruptibleChannel#close():::Closes this channel
MembershipKey#isValid():::Tells whether or not this membership is valid
MembershipKey#drop():::Drop membership
MembershipKey#block(InetAddress):::Block multicast datagrams from the given source address
MembershipKey#unblock(InetAddress):::Unblock multicast datagrams from the given source address that was previously blocked using the #block(InetAddress) block method.
MembershipKey#channel():::Returns the channel for which this membership key was created
MembershipKey#group():::Returns the multicast group for which this membership key was created
MembershipKey#networkInterface():::Returns the network interface for which this membership key was created
MembershipKey#sourceAddress():::Returns the source address if this membership key is source-specific, or null if this membership is not source-specific.
MulticastChannel#close():::Closes this channel
MulticastChannel#join(InetAddress, NetworkInterface):::Joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key
MulticastChannel#join(InetAddress, NetworkInterface, InetAddress):::Joins a multicast group to begin receiving datagrams sent to the group from a given source address
NetworkChannel#bind(SocketAddress):::Binds the channel's socket to a local address
NetworkChannel#getLocalAddress():::Returns the socket address that this channel's socket is bound to
NetworkChannel#setOption(SocketOption, T):::Sets the value of a socket option.
NetworkChannel#getOption(SocketOption):::Returns the value of a socket option.
NetworkChannel#supportedOptions():::Returns a set of the socket options supported by this channel
Pipe.SourceChannel#validOps():::Returns an operation set identifying this channel's supported operations
Pipe.SinkChannel#validOps():::Returns an operation set identifying this channel's supported operations
Pipe#source():::Returns this pipe's source channel.
Pipe#sink():::Returns this pipe's sink channel.
Pipe#open():::Opens a pipe
ReadableByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer
ScatteringByteChannel#read(ByteBuffer[], int, int):::Reads a sequence of bytes from this channel into a subsequence of the given buffers
ScatteringByteChannel#read(ByteBuffer[]):::Reads a sequence of bytes from this channel into the given buffers
SeekableByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer
SeekableByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer
SeekableByteChannel#position():::Returns this channel's position.
SeekableByteChannel#position(long):::Sets this channel's position
SeekableByteChannel#size():::Returns the current size of entity to which this channel is connected.
SeekableByteChannel#truncate(long):::Truncates the entity, to which this channel is connected, to the given size
SelectableChannel#provider():::Returns the provider that created this channel.
SelectableChannel#validOps():::Returns an operation set identifying this channel's supported operations
SelectableChannel#isRegistered():::Tells whether or not this channel is currently registered with any selectors
SelectableChannel#keyFor(Selector):::Retrieves the key representing the channel's registration with the given selector.
SelectableChannel#register(Selector, int, Object):::Registers this channel with the given selector, returning a selection key
SelectableChannel#register(Selector, int):::Registers this channel with the given selector, returning a selection key
SelectableChannel#configureBlocking(boolean):::Adjusts this channel's blocking mode
SelectableChannel#isBlocking():::Tells whether or not every I/O operation on this channel will block until it completes
SelectableChannel#blockingLock():::Retrieves the object upon which the #configureBlocking configureBlocking and #register register methods synchronize
SelectionKey#channel():::Returns the channel for which this key was created
SelectionKey#selector():::Returns the selector for which this key was created
SelectionKey#isValid():::Tells whether or not this key is valid
SelectionKey#cancel():::Requests that the registration of this key's channel with its selector be cancelled
SelectionKey#interestOps():::Retrieves this key's interest set
SelectionKey#interestOps(int):::Sets this key's interest set to the given value
SelectionKey#interestOpsOr(int):::Atomically sets this key's interest set to the bitwise union ("or") of the existing interest set and the given value
SelectionKey#interestOpsAnd(int):::Atomically sets this key's interest set to the bitwise intersection ("and") of the existing interest set and the given value
SelectionKey#readyOps():::Retrieves this key's ready-operation set
SelectionKey#isReadable():::Tests whether this key's channel is ready for reading
SelectionKey#isWritable():::Tests whether this key's channel is ready for writing
SelectionKey#isConnectable():::Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation
SelectionKey#isAcceptable():::Tests whether this key's channel is ready to accept a new socket connection
SelectionKey#attach(Object):::Attaches the given object to this key
SelectionKey#attachment():::Retrieves the current attachment.
Selector#open():::Opens a selector
Selector#isOpen():::Tells whether or not this selector is open.
Selector#provider():::Returns the provider that created this channel.
Selector#keys():::Returns this selector's key set
Selector#selectedKeys():::Returns this selector's selected-key set
Selector#selectNow():::Selects a set of keys whose corresponding channels are ready for I/O operations
Selector#select(long):::Selects a set of keys whose corresponding channels are ready for I/O operations
Selector#select():::Selects a set of keys whose corresponding channels are ready for I/O operations
Selector#select(Consumer, long):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations
Selector#select(Consumer):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations
Selector#selectNow(Consumer):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations
Selector#wakeup():::Causes the first selection operation that has not yet returned to return immediately
Selector#close():::Closes this selector
ServerSocketChannel#open():::Opens a server-socket channel
ServerSocketChannel#validOps():::Returns an operation set identifying this channel's supported operations
ServerSocketChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for connections
ServerSocketChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for connections
ServerSocketChannel#socket():::Retrieves a server socket associated with this channel
ServerSocketChannel#accept():::Accepts a connection made to this channel's socket
ServerSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed
SocketChannel#open():::Opens a socket channel
SocketChannel#open(SocketAddress):::Opens a socket channel and connects it to a remote address
SocketChannel#validOps():::Returns an operation set identifying this channel's supported operations
SocketChannel#shutdownInput():::Shutdown the connection for reading without closing the channel
SocketChannel#shutdownOutput():::Shutdown the connection for writing without closing the channel
SocketChannel#socket():::Retrieves a socket associated with this channel
SocketChannel#isConnected():::Tells whether or not this channel's network socket is connected.
SocketChannel#isConnectionPending():::Tells whether or not a connection operation is in progress on this channel.
SocketChannel#connect(SocketAddress):::Connects this channel's socket
SocketChannel#finishConnect():::Finishes the process of connecting a socket channel
SocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected
SocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed
WritableByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer
AbstractInterruptibleChannel#close():::Closes this channel
AbstractInterruptibleChannel#implCloseChannel():::Closes this channel
AbstractInterruptibleChannel#begin():::Marks the beginning of an I/O operation that might block indefinitely
AbstractInterruptibleChannel#end(boolean):::Marks the end of an I/O operation that might block indefinitely
AbstractSelectableChannel#provider():::Returns the provider that created this channel.
AbstractSelectableChannel#register(Selector, int, Object):::Registers this channel with the given selector, returning a selection key
AbstractSelectableChannel#implCloseChannel():::Closes this channel
AbstractSelectableChannel#implCloseSelectableChannel():::Closes this selectable channel
AbstractSelectableChannel#configureBlocking(boolean):::Adjusts this channel's blocking mode
AbstractSelectableChannel#implConfigureBlocking(boolean):::Adjusts this channel's blocking mode
AbstractSelectionKey#cancel():::Cancels this key
AbstractSelector#close():::Closes this selector
AbstractSelector#implCloseSelector():::Closes this selector
AbstractSelector#provider():::Returns the provider that created this channel.
AbstractSelector#cancelledKeys():::Retrieves this selector's cancelled-key set
AbstractSelector#register(AbstractSelectableChannel, int, Object):::Registers the given channel with this selector
AbstractSelector#deregister(AbstractSelectionKey):::Removes the given key from its channel's key set
AbstractSelector#begin():::Marks the beginning of an I/O operation that might block indefinitely
AbstractSelector#end():::Marks the end of an I/O operation that might block indefinitely
AsynchronousChannelProvider#provider():::Returns the system-wide default asynchronous channel provider for this invocation of the Java virtual machine
AsynchronousChannelProvider#openAsynchronousChannelGroup(int, ThreadFactory):::Constructs a new asynchronous channel group with a fixed thread pool.
AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService, int):::Constructs a new asynchronous channel group with the given thread pool.
AsynchronousChannelProvider#openAsynchronousServerSocketChannel(AsynchronousChannelGroup):::Opens an asynchronous server-socket channel.
AsynchronousChannelProvider#openAsynchronousSocketChannel(AsynchronousChannelGroup):::Opens an asynchronous socket channel.
SelectorProvider#provider():::Returns the system-wide default selector provider for this invocation of the Java virtual machine
SelectorProvider#openDatagramChannel():::Opens a datagram channel.
SelectorProvider#openDatagramChannel(ProtocolFamily):::Opens a datagram channel.
SelectorProvider#openPipe():::Opens a pipe.
SelectorProvider#openSelector():::Opens a selector.
SelectorProvider#openServerSocketChannel():::Opens a server-socket channel.
SelectorProvider#openSocketChannel():::Opens a socket channel.
SelectorProvider#inheritedChannel():::Returns the channel inherited from the entity that created this Java virtual machine
Charset#isSupported(String):::Tells whether the named charset is supported.
Charset#forName(String):::Returns a charset object for the named charset.
Charset#availableCharsets():::Constructs a sorted map from canonical charset names to charset objects
Charset#defaultCharset():::Returns the default charset of this Java virtual machine
Charset#name():::Returns this charset's canonical name.
Charset#aliases():::Returns a set containing this charset's aliases.
Charset#displayName():::Returns this charset's human-readable name for the default locale
Charset#isRegistered():::Tells whether or not this charset is registered in the IANA Charset Registry.
Charset#displayName(Locale):::Returns this charset's human-readable name for the given locale
Charset#contains(Charset):::Tells whether or not this charset contains the given charset
Charset#newDecoder():::Constructs a new decoder for this charset.
Charset#newEncoder():::Constructs a new encoder for this charset.
Charset#canEncode():::Tells whether or not this charset supports encoding
Charset#decode(ByteBuffer):::Convenience method that decodes bytes in this charset into Unicode characters
Charset#encode(CharBuffer):::Convenience method that encodes Unicode characters into bytes in this charset
Charset#encode(String):::Convenience method that encodes a string into bytes in this charset
Charset#compareTo(Charset):::Compares this charset to another
Charset#hashCode():::Computes a hashcode for this charset.
Charset#equals(Object):::Tells whether or not this object is equal to another
Charset#toString():::Returns a string describing this charset.
CharsetDecoder#charset():::Returns the charset that created this decoder.
CharsetDecoder#replacement():::Returns this decoder's replacement value.
CharsetDecoder#replaceWith(String):::Changes this decoder's replacement value
CharsetDecoder#implReplaceWith(String):::Reports a change to this decoder's replacement value
CharsetDecoder#malformedInputAction():::Returns this decoder's current action for malformed-input errors.
CharsetDecoder#onMalformedInput(CodingErrorAction):::Changes this decoder's action for malformed-input errors
CharsetDecoder#implOnMalformedInput(CodingErrorAction):::Reports a change to this decoder's malformed-input action
CharsetDecoder#unmappableCharacterAction():::Returns this decoder's current action for unmappable-character errors.
CharsetDecoder#onUnmappableCharacter(CodingErrorAction):::Changes this decoder's action for unmappable-character errors
CharsetDecoder#implOnUnmappableCharacter(CodingErrorAction):::Reports a change to this decoder's unmappable-character action
CharsetDecoder#averageCharsPerByte():::Returns the average number of characters that will be produced for each byte of input
CharsetDecoder#maxCharsPerByte():::Returns the maximum number of characters that will be produced for each byte of input
CharsetDecoder#decode(ByteBuffer, CharBuffer, boolean):::Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer
CharsetDecoder#flush(CharBuffer):::Flushes this decoder
CharsetDecoder#implFlush(CharBuffer):::Flushes this decoder
CharsetDecoder#reset():::Resets this decoder, clearing any internal state
CharsetDecoder#implReset():::Resets this decoder, clearing any charset-specific internal state
CharsetDecoder#decodeLoop(ByteBuffer, CharBuffer):::Decodes one or more bytes into one or more characters
CharsetDecoder#decode(ByteBuffer):::Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer
CharsetDecoder#isAutoDetecting():::Tells whether or not this decoder implements an auto-detecting charset
CharsetDecoder#isCharsetDetected():::Tells whether or not this decoder has yet detected a charset&nbsp;&nbsp;(optional operation)
CharsetDecoder#detectedCharset():::Retrieves the charset that was detected by this decoder&nbsp;&nbsp;(optional operation)
CharsetEncoder#charset():::Returns the charset that created this encoder.
CharsetEncoder#replacement():::Returns this encoder's replacement value.
CharsetEncoder#replaceWith(byte[]):::Changes this encoder's replacement value
CharsetEncoder#implReplaceWith(byte[]):::Reports a change to this encoder's replacement value
CharsetEncoder#isLegalReplacement(byte[]):::Tells whether or not the given byte array is a legal replacement value for this encoder
CharsetEncoder#malformedInputAction():::Returns this encoder's current action for malformed-input errors.
CharsetEncoder#onMalformedInput(CodingErrorAction):::Changes this encoder's action for malformed-input errors
CharsetEncoder#implOnMalformedInput(CodingErrorAction):::Reports a change to this encoder's malformed-input action
CharsetEncoder#unmappableCharacterAction():::Returns this encoder's current action for unmappable-character errors.
CharsetEncoder#onUnmappableCharacter(CodingErrorAction):::Changes this encoder's action for unmappable-character errors
CharsetEncoder#implOnUnmappableCharacter(CodingErrorAction):::Reports a change to this encoder's unmappable-character action
CharsetEncoder#averageBytesPerChar():::Returns the average number of bytes that will be produced for each character of input
CharsetEncoder#maxBytesPerChar():::Returns the maximum number of bytes that will be produced for each character of input
CharsetEncoder#encode(CharBuffer, ByteBuffer, boolean):::Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer
CharsetEncoder#flush(ByteBuffer):::Flushes this encoder
CharsetEncoder#implFlush(ByteBuffer):::Flushes this encoder
CharsetEncoder#reset():::Resets this encoder, clearing any internal state
CharsetEncoder#implReset():::Resets this encoder, clearing any charset-specific internal state
CharsetEncoder#encodeLoop(CharBuffer, ByteBuffer):::Encodes one or more characters into one or more bytes
CharsetEncoder#encode(CharBuffer):::Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer
CharsetEncoder#canEncode(char):::Tells whether or not this encoder can encode the given character
CharsetEncoder#canEncode(CharSequence):::Tells whether or not this encoder can encode the given character sequence
CoderResult#toString():::Returns a string describing this coder result.
CoderResult#isUnderflow():::Tells whether or not this object describes an underflow condition.
CoderResult#isOverflow():::Tells whether or not this object describes an overflow condition.
CoderResult#isError():::Tells whether or not this object describes an error condition.
CoderResult#isMalformed():::Tells whether or not this object describes a malformed-input error.
CoderResult#isUnmappable():::Tells whether or not this object describes an unmappable-character error.
CoderResult#length():::Returns the length of the erroneous input described by this object&nbsp;&nbsp;(optional operation).
CoderResult#malformedForLength(int):::Static factory method that returns the unique object describing a malformed-input error of the given length.
CoderResult#unmappableForLength(int):::Static factory method that returns the unique result object describing an unmappable-character error of the given length.
CoderResult#throwException():::Throws an exception appropriate to the result described by this object.
CodingErrorAction#toString():::Returns a string describing this action.
IllegalCharsetNameException#getCharsetName():::Retrieves the illegal charset name.
MalformedInputException#getInputLength():::Returns the length of the input.
MalformedInputException#getMessage():::Returns the message.
UnmappableCharacterException#getInputLength():::Returns the length of the input.
UnmappableCharacterException#getMessage():::Returns the message.
UnsupportedCharsetException#getCharsetName():::Retrieves the name of the unsupported charset.
CharsetProvider#charsets():::Creates an iterator that iterates over the charsets supported by this provider
CharsetProvider#charsetForName(String):::Retrieves a charset for the given charset name.
Buffer#createSameBufferException():::Returns an IllegalArgumentException indicating that the source and target are the same Buffer
Buffer#createCapacityException(int):::Verify that the capacity is nonnegative.
Buffer#capacity():::Returns this buffer's capacity.
Buffer#position():::Returns this buffer's position.
Buffer#position(int):::Sets this buffer's position
Buffer#limit():::Returns this buffer's limit.
Buffer#limit(int):::Sets this buffer's limit
Buffer#mark():::Sets this buffer's mark at its position.
Buffer#reset():::Resets this buffer's position to the previously-marked position
Buffer#clear():::Clears this buffer
Buffer#flip():::Flips this buffer
Buffer#rewind():::Rewinds this buffer
Buffer#remaining():::Returns the number of elements between the current position and the limit.
Buffer#hasRemaining():::Tells whether there are any elements between the current position and the limit.
Buffer#isReadOnly():::Tells whether or not this buffer is read-only.
Buffer#hasArray():::Tells whether or not this buffer is backed by an accessible array
Buffer#array():::Returns the array that backs this buffer&nbsp;&nbsp;(optional operation)
Buffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
Buffer#isDirect():::Tells whether or not this buffer is direct.
Buffer#slice():::Creates a new buffer whose content is a shared subsequence of this buffer's content
Buffer#duplicate():::Creates a new buffer that shares this buffer's content
Buffer#nextGetIndex():::Checks the current position against the limit, throwing a BufferUnderflowException if it is not smaller than the limit, and then increments the position.
Buffer#nextPutIndex():::Checks the current position against the limit, throwing a BufferOverflowException if it is not smaller than the limit, and then increments the position.
Buffer#checkIndex(int):::Checks the given index against the limit, throwing an IndexOutOfBoundsException if it is not smaller than the limit or is smaller than zero.
ByteBuffer#allocateDirect(int):::Allocates a new direct byte buffer
ByteBuffer#allocate(int):::Allocates a new byte buffer
ByteBuffer#wrap(byte[], int, int):::Wraps a byte array into a buffer
ByteBuffer#wrap(byte[]):::Wraps a byte array into a buffer
ByteBuffer#slice():::Creates a new byte buffer whose content is a shared subsequence of this buffer's content
ByteBuffer#duplicate():::Creates a new byte buffer that shares this buffer's content
ByteBuffer#asReadOnlyBuffer():::Creates a new, read-only byte buffer that shares this buffer's content
ByteBuffer#get():::Relative get method
ByteBuffer#put(byte):::Relative put method&nbsp;&nbsp;(optional operation)
ByteBuffer#get(int):::Absolute get method
ByteBuffer#put(int, byte):::Absolute put method&nbsp;&nbsp;(optional operation)
ByteBuffer#get(byte[], int, int):::Relative bulk get method
ByteBuffer#get(byte[]):::Relative bulk get method
ByteBuffer#put(ByteBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ByteBuffer#put(byte[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ByteBuffer#put(byte[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ByteBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible byte array
ByteBuffer#array():::Returns the byte array that backs this buffer&nbsp;&nbsp;(optional operation)
ByteBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
ByteBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
ByteBuffer#isDirect():::Tells whether or not this byte buffer is direct.
ByteBuffer#toString():::Returns a string summarizing the state of this buffer.
ByteBuffer#hashCode():::Returns the current hash code of this buffer
ByteBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
ByteBuffer#compareTo(ByteBuffer):::Compares this buffer to another
ByteBuffer#mismatch(ByteBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
ByteBuffer#order():::Retrieves this buffer's byte order
ByteBuffer#order(ByteOrder):::Modifies this buffer's byte order.
ByteBuffer#alignmentOffset(int, int):::Returns the memory address, pointing to the byte at the given index, modulus the given unit size
ByteBuffer#alignedSlice(int):::Creates a new byte buffer whose content is a shared and aligned subsequence of this buffer's content
ByteBuffer#getChar():::Relative get method for reading a char value
ByteBuffer#putChar(char):::Relative put method for writing a char value&nbsp;&nbsp;(optional operation)
ByteBuffer#getChar(int):::Absolute get method for reading a char value
ByteBuffer#putChar(int, char):::Absolute put method for writing a char value&nbsp;&nbsp;(optional operation)
ByteBuffer#asCharBuffer():::Creates a view of this byte buffer as a char buffer
ByteBuffer#getShort():::Relative get method for reading a short value
ByteBuffer#putShort(short):::Relative put method for writing a short value&nbsp;&nbsp;(optional operation)
ByteBuffer#getShort(int):::Absolute get method for reading a short value
ByteBuffer#putShort(int, short):::Absolute put method for writing a short value&nbsp;&nbsp;(optional operation)
ByteBuffer#asShortBuffer():::Creates a view of this byte buffer as a short buffer
ByteBuffer#getInt():::Relative get method for reading an int value
ByteBuffer#putInt(int):::Relative put method for writing an int value&nbsp;&nbsp;(optional operation)
ByteBuffer#getInt(int):::Absolute get method for reading an int value
ByteBuffer#putInt(int, int):::Absolute put method for writing an int value&nbsp;&nbsp;(optional operation)
ByteBuffer#asIntBuffer():::Creates a view of this byte buffer as an int buffer
ByteBuffer#getLong():::Relative get method for reading a long value
ByteBuffer#putLong(long):::Relative put method for writing a long value&nbsp;&nbsp;(optional operation)
ByteBuffer#getLong(int):::Absolute get method for reading a long value
ByteBuffer#putLong(int, long):::Absolute put method for writing a long value&nbsp;&nbsp;(optional operation)
ByteBuffer#asLongBuffer():::Creates a view of this byte buffer as a long buffer
ByteBuffer#getFloat():::Relative get method for reading a float value
ByteBuffer#putFloat(float):::Relative put method for writing a float value&nbsp;&nbsp;(optional operation)
ByteBuffer#getFloat(int):::Absolute get method for reading a float value
ByteBuffer#putFloat(int, float):::Absolute put method for writing a float value&nbsp;&nbsp;(optional operation)
ByteBuffer#asFloatBuffer():::Creates a view of this byte buffer as a float buffer
ByteBuffer#getDouble():::Relative get method for reading a double value
ByteBuffer#putDouble(double):::Relative put method for writing a double value&nbsp;&nbsp;(optional operation)
ByteBuffer#getDouble(int):::Absolute get method for reading a double value
ByteBuffer#putDouble(int, double):::Absolute put method for writing a double value&nbsp;&nbsp;(optional operation)
ByteBuffer#asDoubleBuffer():::Creates a view of this byte buffer as a double buffer
ByteOrder#nativeOrder():::Retrieves the native byte order of the underlying platform
ByteOrder#toString():::Constructs a string describing this object
CharBuffer#allocate(int):::Allocates a new char buffer
CharBuffer#wrap(char[], int, int):::Wraps a char array into a buffer
CharBuffer#wrap(char[]):::Wraps a char array into a buffer
CharBuffer#read(CharBuffer):::Attempts to read characters into the specified character buffer
CharBuffer#wrap(CharSequence, int, int):::Wraps a character sequence into a buffer
CharBuffer#wrap(CharSequence):::Wraps a character sequence into a buffer
CharBuffer#slice():::Creates a new char buffer whose content is a shared subsequence of this buffer's content
CharBuffer#duplicate():::Creates a new char buffer that shares this buffer's content
CharBuffer#asReadOnlyBuffer():::Creates a new, read-only char buffer that shares this buffer's content
CharBuffer#get():::Relative get method
CharBuffer#put(char):::Relative put method&nbsp;&nbsp;(optional operation)
CharBuffer#get(int):::Absolute get method
CharBuffer#put(int, char):::Absolute put method&nbsp;&nbsp;(optional operation)
CharBuffer#get(char[], int, int):::Relative bulk get method
CharBuffer#get(char[]):::Relative bulk get method
CharBuffer#put(CharBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
CharBuffer#put(char[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
CharBuffer#put(char[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
CharBuffer#put(String, int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
CharBuffer#put(String):::Relative bulk put method&nbsp;&nbsp;(optional operation)
CharBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible char array
CharBuffer#array():::Returns the char array that backs this buffer&nbsp;&nbsp;(optional operation)
CharBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
CharBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
CharBuffer#isDirect():::Tells whether or not this char buffer is direct.
CharBuffer#hashCode():::Returns the current hash code of this buffer
CharBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
CharBuffer#compareTo(CharBuffer):::Compares this buffer to another
CharBuffer#mismatch(CharBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
CharBuffer#toString():::Returns a string containing the characters in this buffer
CharBuffer#length():::Returns the length of this character buffer
CharBuffer#charAt(int):::Reads the character at the given index relative to the current position.
CharBuffer#subSequence(int, int):::Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position
CharBuffer#append(CharSequence):::Appends the specified character sequence  to this buffer&nbsp;&nbsp;(optional operation)
CharBuffer#append(CharSequence, int, int):::Appends a subsequence of the  specified character sequence  to this buffer&nbsp;&nbsp;(optional operation)
CharBuffer#append(char):::Appends the specified char  to this buffer&nbsp;&nbsp;(optional operation)
CharBuffer#order():::Retrieves this buffer's byte order
DoubleBuffer#allocate(int):::Allocates a new double buffer
DoubleBuffer#wrap(double[], int, int):::Wraps a double array into a buffer
DoubleBuffer#wrap(double[]):::Wraps a double array into a buffer
DoubleBuffer#slice():::Creates a new double buffer whose content is a shared subsequence of this buffer's content
DoubleBuffer#duplicate():::Creates a new double buffer that shares this buffer's content
DoubleBuffer#asReadOnlyBuffer():::Creates a new, read-only double buffer that shares this buffer's content
DoubleBuffer#get():::Relative get method
DoubleBuffer#put(double):::Relative put method&nbsp;&nbsp;(optional operation)
DoubleBuffer#get(int):::Absolute get method
DoubleBuffer#put(int, double):::Absolute put method&nbsp;&nbsp;(optional operation)
DoubleBuffer#get(double[], int, int):::Relative bulk get method
DoubleBuffer#get(double[]):::Relative bulk get method
DoubleBuffer#put(DoubleBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
DoubleBuffer#put(double[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
DoubleBuffer#put(double[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
DoubleBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible double array
DoubleBuffer#array():::Returns the double array that backs this buffer&nbsp;&nbsp;(optional operation)
DoubleBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
DoubleBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
DoubleBuffer#isDirect():::Tells whether or not this double buffer is direct.
DoubleBuffer#toString():::Returns a string summarizing the state of this buffer.
DoubleBuffer#hashCode():::Returns the current hash code of this buffer
DoubleBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
DoubleBuffer#compareTo(DoubleBuffer):::Compares this buffer to another
DoubleBuffer#mismatch(DoubleBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
DoubleBuffer#order():::Retrieves this buffer's byte order
FloatBuffer#allocate(int):::Allocates a new float buffer
FloatBuffer#wrap(float[], int, int):::Wraps a float array into a buffer
FloatBuffer#wrap(float[]):::Wraps a float array into a buffer
FloatBuffer#slice():::Creates a new float buffer whose content is a shared subsequence of this buffer's content
FloatBuffer#duplicate():::Creates a new float buffer that shares this buffer's content
FloatBuffer#asReadOnlyBuffer():::Creates a new, read-only float buffer that shares this buffer's content
FloatBuffer#get():::Relative get method
FloatBuffer#put(float):::Relative put method&nbsp;&nbsp;(optional operation)
FloatBuffer#get(int):::Absolute get method
FloatBuffer#put(int, float):::Absolute put method&nbsp;&nbsp;(optional operation)
FloatBuffer#get(float[], int, int):::Relative bulk get method
FloatBuffer#get(float[]):::Relative bulk get method
FloatBuffer#put(FloatBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
FloatBuffer#put(float[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
FloatBuffer#put(float[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
FloatBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible float array
FloatBuffer#array():::Returns the float array that backs this buffer&nbsp;&nbsp;(optional operation)
FloatBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
FloatBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
FloatBuffer#isDirect():::Tells whether or not this float buffer is direct.
FloatBuffer#toString():::Returns a string summarizing the state of this buffer.
FloatBuffer#hashCode():::Returns the current hash code of this buffer
FloatBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
FloatBuffer#compareTo(FloatBuffer):::Compares this buffer to another
FloatBuffer#mismatch(FloatBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
FloatBuffer#order():::Retrieves this buffer's byte order
IntBuffer#allocate(int):::Allocates a new int buffer
IntBuffer#wrap(int[], int, int):::Wraps an int array into a buffer
IntBuffer#wrap(int[]):::Wraps an int array into a buffer
IntBuffer#slice():::Creates a new int buffer whose content is a shared subsequence of this buffer's content
IntBuffer#duplicate():::Creates a new int buffer that shares this buffer's content
IntBuffer#asReadOnlyBuffer():::Creates a new, read-only int buffer that shares this buffer's content
IntBuffer#get():::Relative get method
IntBuffer#put(int):::Relative put method&nbsp;&nbsp;(optional operation)
IntBuffer#get(int):::Absolute get method
IntBuffer#put(int, int):::Absolute put method&nbsp;&nbsp;(optional operation)
IntBuffer#get(int[], int, int):::Relative bulk get method
IntBuffer#get(int[]):::Relative bulk get method
IntBuffer#put(IntBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
IntBuffer#put(int[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
IntBuffer#put(int[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
IntBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible int array
IntBuffer#array():::Returns the int array that backs this buffer&nbsp;&nbsp;(optional operation)
IntBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
IntBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
IntBuffer#isDirect():::Tells whether or not this int buffer is direct.
IntBuffer#toString():::Returns a string summarizing the state of this buffer.
IntBuffer#hashCode():::Returns the current hash code of this buffer
IntBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
IntBuffer#compareTo(IntBuffer):::Compares this buffer to another
IntBuffer#mismatch(IntBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
IntBuffer#order():::Retrieves this buffer's byte order
LongBuffer#allocate(int):::Allocates a new long buffer
LongBuffer#wrap(long[], int, int):::Wraps a long array into a buffer
LongBuffer#wrap(long[]):::Wraps a long array into a buffer
LongBuffer#slice():::Creates a new long buffer whose content is a shared subsequence of this buffer's content
LongBuffer#duplicate():::Creates a new long buffer that shares this buffer's content
LongBuffer#asReadOnlyBuffer():::Creates a new, read-only long buffer that shares this buffer's content
LongBuffer#get():::Relative get method
LongBuffer#put(long):::Relative put method&nbsp;&nbsp;(optional operation)
LongBuffer#get(int):::Absolute get method
LongBuffer#put(int, long):::Absolute put method&nbsp;&nbsp;(optional operation)
LongBuffer#get(long[], int, int):::Relative bulk get method
LongBuffer#get(long[]):::Relative bulk get method
LongBuffer#put(LongBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
LongBuffer#put(long[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
LongBuffer#put(long[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
LongBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible long array
LongBuffer#array():::Returns the long array that backs this buffer&nbsp;&nbsp;(optional operation)
LongBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
LongBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
LongBuffer#isDirect():::Tells whether or not this long buffer is direct.
LongBuffer#toString():::Returns a string summarizing the state of this buffer.
LongBuffer#hashCode():::Returns the current hash code of this buffer
LongBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
LongBuffer#compareTo(LongBuffer):::Compares this buffer to another
LongBuffer#mismatch(LongBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
LongBuffer#order():::Retrieves this buffer's byte order
MappedByteBuffer#isLoaded():::Tells whether or not this buffer's content is resident in physical memory
MappedByteBuffer#load():::Loads this buffer's content into physical memory
MappedByteBuffer#force():::Forces any changes made to this buffer's content to be written to the storage device containing the mapped file
ShortBuffer#allocate(int):::Allocates a new short buffer
ShortBuffer#wrap(short[], int, int):::Wraps a short array into a buffer
ShortBuffer#wrap(short[]):::Wraps a short array into a buffer
ShortBuffer#slice():::Creates a new short buffer whose content is a shared subsequence of this buffer's content
ShortBuffer#duplicate():::Creates a new short buffer that shares this buffer's content
ShortBuffer#asReadOnlyBuffer():::Creates a new, read-only short buffer that shares this buffer's content
ShortBuffer#get():::Relative get method
ShortBuffer#put(short):::Relative put method&nbsp;&nbsp;(optional operation)
ShortBuffer#get(int):::Absolute get method
ShortBuffer#put(int, short):::Absolute put method&nbsp;&nbsp;(optional operation)
ShortBuffer#get(short[], int, int):::Relative bulk get method
ShortBuffer#get(short[]):::Relative bulk get method
ShortBuffer#put(ShortBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ShortBuffer#put(short[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ShortBuffer#put(short[]):::Relative bulk put method&nbsp;&nbsp;(optional operation)
ShortBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible short array
ShortBuffer#array():::Returns the short array that backs this buffer&nbsp;&nbsp;(optional operation)
ShortBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation)
ShortBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation)
ShortBuffer#isDirect():::Tells whether or not this short buffer is direct.
ShortBuffer#toString():::Returns a string summarizing the state of this buffer.
ShortBuffer#hashCode():::Returns the current hash code of this buffer
ShortBuffer#equals(Object):::Tells whether or not this buffer is equal to another object
ShortBuffer#compareTo(ShortBuffer):::Compares this buffer to another
ShortBuffer#mismatch(ShortBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer
ShortBuffer#order():::Retrieves this buffer's byte order
AclEntry.Builder#build():::Constructs an AclEntry from the components of this builder
AclEntry.Builder#setType(AclEntryType):::Sets the type component of this builder.
AclEntry.Builder#setPrincipal(UserPrincipal):::Sets the principal component of this builder.
AclEntry.Builder#setPermissions(Set):::Sets the permissions component of this builder
AclEntry.Builder#setPermissions(AclEntryPermission...):::Sets the permissions component of this builder
AclEntry.Builder#setFlags(Set):::Sets the flags component of this builder
AclEntry.Builder#setFlags(AclEntryFlag...):::Sets the flags component of this builder
AclEntry#newBuilder():::Constructs a new builder
AclEntry#newBuilder(AclEntry):::Constructs a new builder with the components of an existing ACL entry.
AclEntry#type():::Returns the ACL entry type.
AclEntry#principal():::Returns the principal component.
AclEntry#permissions():::Returns a copy of the permissions component
AclEntry#flags():::Returns a copy of the flags component
AclEntry#equals(Object):::Compares the specified object with this ACL entry for equality
AclEntry#hashCode():::Returns the hash-code value for this ACL entry
AclEntry#toString():::Returns the string representation of this ACL entry.
AclFileAttributeView#name():::Returns the name of the attribute view
AclFileAttributeView#getAcl():::Reads the access control list
AclFileAttributeView#setAcl(List):::Updates (replace) the access control list
AttributeView#name():::Returns the name of the attribute view.
BasicFileAttributes#lastModifiedTime():::Returns the time of last modification
BasicFileAttributes#lastAccessTime():::Returns the time of last access
BasicFileAttributes#creationTime():::Returns the creation time
BasicFileAttributes#isRegularFile():::Tells whether the file is a regular file with opaque content.
BasicFileAttributes#isDirectory():::Tells whether the file is a directory.
BasicFileAttributes#isSymbolicLink():::Tells whether the file is a symbolic link.
BasicFileAttributes#isOther():::Tells whether the file is something other than a regular file, directory, or symbolic link.
BasicFileAttributes#size():::Returns the size of the file (in bytes)
BasicFileAttributes#fileKey():::Returns an object that uniquely identifies the given file, or null if a file key is not available
BasicFileAttributeView#name():::Returns the name of the attribute view
BasicFileAttributeView#readAttributes():::Reads the basic file attributes as a bulk operation
BasicFileAttributeView#setTimes(FileTime, FileTime, FileTime):::Updates any or all of the file's last modified time, last access time, and create time attributes
DosFileAttributes#isReadOnly():::Returns the value of the read-only attribute
DosFileAttributes#isHidden():::Returns the value of the hidden attribute
DosFileAttributes#isArchive():::Returns the value of the archive attribute
DosFileAttributes#isSystem():::Returns the value of the system attribute
DosFileAttributeView#name():::Returns the name of the attribute view
DosFileAttributeView#setReadOnly(boolean):::Updates the value of the read-only attribute
DosFileAttributeView#setHidden(boolean):::Updates the value of the hidden attribute
DosFileAttributeView#setSystem(boolean):::Updates the value of the system attribute
DosFileAttributeView#setArchive(boolean):::Updates the value of the archive attribute
FileAttribute#name():::Returns the attribute name.
FileAttribute#value():::Returns the attribute value.
FileOwnerAttributeView#name():::Returns the name of the attribute view
FileOwnerAttributeView#getOwner():::Read the file owner
FileOwnerAttributeView#setOwner(UserPrincipal):::Updates the file owner
FileTime#from(long, TimeUnit):::Returns a FileTime representing a value at the given unit of granularity.
FileTime#fromMillis(long):::Returns a FileTime representing the given value in milliseconds.
FileTime#from(Instant):::Returns a FileTime representing the same point of time value on the time-line as the provided Instant object.
FileTime#to(TimeUnit):::Returns the value at the given unit of granularity
FileTime#toMillis():::Returns the value in milliseconds
FileTime#toInstant():::Converts this FileTime object to an Instant
FileTime#equals(Object):::Tests this FileTime for equality with the given object
FileTime#hashCode():::Computes a hash code for this file time
FileTime#compareTo(FileTime):::Compares the value of two FileTime objects for order.
FileTime#toString():::Returns the string representation of this FileTime
PosixFileAttributes#owner():::Returns the owner of the file.
PosixFileAttributes#group():::Returns the group owner of the file.
PosixFileAttributes#permissions():::Returns the permissions of the file
PosixFileAttributeView#name():::Returns the name of the attribute view
PosixFileAttributeView#setPermissions(Set):::Updates the file permissions.
PosixFileAttributeView#setGroup(GroupPrincipal):::Updates the file group-owner.
PosixFilePermissions#toString(Set):::Returns the String representation of a set of permissions
PosixFilePermissions#fromString(String):::Returns the set of permissions corresponding to a given String representation
PosixFilePermissions#asFileAttribute(Set):::Creates a FileAttribute, encapsulating a copy of the given file permissions, suitable for passing to the java.nio.file.Files#createFile createFile or java.nio.file.Files#createDirectory createDirectory methods.
UserDefinedFileAttributeView#name():::Returns the name of this attribute view
UserDefinedFileAttributeView#list():::Returns a list containing the names of the user-defined attributes.
UserDefinedFileAttributeView#size(String):::Returns the size of the value of a user-defined attribute.
UserDefinedFileAttributeView#read(String, ByteBuffer):::Read the value of a user-defined attribute into a buffer
UserDefinedFileAttributeView#write(String, ByteBuffer):::Writes the value of a user-defined attribute from a buffer
UserDefinedFileAttributeView#delete(String):::Deletes a user-defined attribute.
UserPrincipalLookupService#lookupPrincipalByName(String):::Lookup a user principal by name.
UserPrincipalLookupService#lookupPrincipalByGroupName(String):::Lookup a group principal by group name
UserPrincipalNotFoundException#getName():::Returns the user principal name if this exception was created with the user principal name that was not found, otherwise null.
CopyMoveHelper#copyToForeignTarget(Path, Path, CopyOption...):::Simple copy for use when source and target are associated with different providers
CopyMoveHelper#moveToForeignTarget(Path, Path, CopyOption...):::Simple move implements as copy+delete for use when source and target are associated with different providers
DirectoryIteratorException#getCause():::Returns the cause of this exception.
DirectoryStream.Filter#accept(T):::Decides if the given directory entry should be accepted or filtered.
DirectoryStream#iterator():::Returns the iterator associated with this DirectoryStream.
Files#newInputStream(Path, OpenOption...):::Opens a file, returning an input stream to read from the file
Files#newOutputStream(Path, OpenOption...):::Opens or creates a file, returning an output stream that may be used to write bytes to the file
Files#newByteChannel(Path, Set, FileAttribute...):::Opens or creates a file, returning a seekable byte channel to access the file
Files#newByteChannel(Path, OpenOption...):::Opens or creates a file, returning a seekable byte channel to access the file
Files#newDirectoryStream(Path):::Opens a directory, returning a DirectoryStream to iterate over all entries in the directory
Files#newDirectoryStream(Path, String):::Opens a directory, returning a DirectoryStream to iterate over the entries in the directory
Files#newDirectoryStream(Path, DirectoryStream.Filter):::Opens a directory, returning a DirectoryStream to iterate over the entries in the directory
Files#createFile(Path, FileAttribute...):::Creates a new and empty file, failing if the file already exists
Files#createDirectory(Path, FileAttribute...):::Creates a new directory
Files#createDirectories(Path, FileAttribute...):::Creates a directory by creating all nonexistent parent directories first
Files#createTempFile(Path, String, String, FileAttribute...):::Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
Files#createTempFile(String, String, FileAttribute...):::Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
Files#createTempDirectory(Path, String, FileAttribute...):::Creates a new directory in the specified directory, using the given prefix to generate its name
Files#createTempDirectory(String, FileAttribute...):::Creates a new directory in the default temporary-file directory, using the given prefix to generate its name
Files#createSymbolicLink(Path, Path, FileAttribute...):::Creates a symbolic link to a target (optional operation)
Files#createLink(Path, Path):::Creates a new link (directory entry) for an existing file (optional operation)
Files#delete(Path):::Deletes a file
Files#deleteIfExists(Path):::Deletes a file if it exists
Files#copy(Path, Path, CopyOption...):::Copy a file to a target file
Files#move(Path, Path, CopyOption...):::Move or rename a file to a target file
Files#readSymbolicLink(Path):::Reads the target of a symbolic link (optional operation)
Files#getFileStore(Path):::Returns the FileStore representing the file store where a file is located
Files#isSameFile(Path, Path):::Tests if two paths locate the same file
Files#isHidden(Path):::Tells whether or not a file is considered hidden
Files#probeContentType(Path):::Probes the content type of a file
Files#getFileAttributeView(Path, Class, LinkOption...):::Returns a file attribute view of a given type
Files#readAttributes(Path, Class, LinkOption...):::Reads a file's attributes as a bulk operation
Files#setAttribute(Path, String, Object, LinkOption...):::Sets the value of a file attribute
Files#getAttribute(Path, String, LinkOption...):::Reads the value of a file attribute
Files#readAttributes(Path, String, LinkOption...):::Reads a set of file attributes as a bulk operation
Files#getPosixFilePermissions(Path, LinkOption...):::Returns a file's POSIX file permissions
Files#setPosixFilePermissions(Path, Set):::Sets a file's POSIX permissions
Files#getOwner(Path, LinkOption...):::Returns the owner of a file
Files#setOwner(Path, UserPrincipal):::Updates the file owner
Files#isSymbolicLink(Path):::Tests whether a file is a symbolic link
Files#isDirectory(Path, LinkOption...):::Tests whether a file is a directory
Files#isRegularFile(Path, LinkOption...):::Tests whether a file is a regular file with opaque content
Files#getLastModifiedTime(Path, LinkOption...):::Returns a file's last modified time
Files#setLastModifiedTime(Path, FileTime):::Updates a file's last modified time attribute
Files#size(Path):::Returns the size of a file (in bytes)
Files#exists(Path, LinkOption...):::Tests whether a file exists
Files#notExists(Path, LinkOption...):::Tests whether the file located by this path does not exist
Files#isReadable(Path):::Tests whether a file is readable
Files#isWritable(Path):::Tests whether a file is writable
Files#isExecutable(Path):::Tests whether a file is executable
Files#walkFileTree(Path, Set, int, FileVisitor):::Walks a file tree
Files#walkFileTree(Path, FileVisitor):::Walks a file tree
Files#newBufferedReader(Path, Charset):::Opens a file for reading, returning a BufferedReader that may be used to read text from the file in an efficient manner
Files#newBufferedReader(Path):::Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner
Files#newBufferedWriter(Path, Charset, OpenOption...):::Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner
Files#newBufferedWriter(Path, OpenOption...):::Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner
Files#copy(InputStream, Path, CopyOption...):::Copies all bytes from an input stream to a file
Files#copy(Path, OutputStream):::Copies all bytes from a file to an output stream
Files#readAllBytes(Path):::Reads all the bytes from a file
Files#readString(Path):::Reads all content from a file into a string, decoding from bytes to characters using the StandardCharsets#UTF_8 UTF-8 Charset charset
Files#readString(Path, Charset):::Reads all characters from a file into a string, decoding from bytes to characters using the specified Charset charset
Files#readAllLines(Path, Charset):::Read all lines from a file
Files#readAllLines(Path):::Read all lines from a file
Files#write(Path, byte[], OpenOption...):::Writes bytes to a file
Files#write(Path, Iterable, Charset, OpenOption...):::Write lines of text to a file
Files#write(Path, Iterable, OpenOption...):::Write lines of text to a file
Files#writeString(Path, CharSequence, OpenOption...):::Write a java.lang.CharSequence CharSequence to a file
Files#writeString(Path, CharSequence, Charset, OpenOption...):::Write a java.lang.CharSequence CharSequence to a file
Files#list(Path):::Return a lazily populated Stream, the elements of which are the entries in the directory
Files#walk(Path, int, FileVisitOption...):::Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file
Files#walk(Path, FileVisitOption...):::Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file
Files#find(Path, int, BiPredicate, FileVisitOption...):::Return a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file
Files#lines(Path, Charset):::Read all lines from a file as a Stream
Files#lines(Path):::Read all lines from a file as a Stream
FileStore#name():::Returns the name of this file store
FileStore#type():::Returns the type of this file store
FileStore#isReadOnly():::Tells whether this file store is read-only
FileStore#getTotalSpace():::Returns the size, in bytes, of the file store.
FileStore#getUsableSpace():::Returns the number of bytes available to this Java virtual machine on the file store
FileStore#getBlockSize():::Returns the number of bytes per block in this file store
FileStore#getUnallocatedSpace():::Returns the number of unallocated bytes in the file store
FileStore#supportsFileAttributeView(Class):::Tells whether or not this file store supports the file attributes identified by the given file attribute view
FileStore#supportsFileAttributeView(String):::Tells whether or not this file store supports the file attributes identified by the given file attribute view
FileStore#getFileStoreAttributeView(Class):::Returns a FileStoreAttributeView of the given type
FileStore#getAttribute(String):::Reads the value of a file store attribute
FileSystem#provider():::Returns the provider that created this file system.
FileSystem#close():::Closes this file system
FileSystem#isOpen():::Tells whether or not this file system is open
FileSystem#isReadOnly():::Tells whether or not this file system allows only read-only access to its file stores.
FileSystem#getSeparator():::Returns the name separator, represented as a string
FileSystem#getRootDirectories():::Returns an object to iterate over the paths of the root directories
FileSystem#getFileStores():::Returns an object to iterate over the underlying file stores
FileSystem#supportedFileAttributeViews():::Returns the set of the FileAttributeView#name names of the file attribute views supported by this FileSystem
FileSystem#getPath(String, String...):::Converts a path string, or a sequence of strings that when joined form a path string, to a Path
FileSystem#getPathMatcher(String):::Returns a PathMatcher that performs match operations on the String representation of Path objects by interpreting a given pattern
FileSystem#getUserPrincipalLookupService():::Returns the UserPrincipalLookupService for this file system (optional operation)
FileSystem#newWatchService():::Constructs a new WatchService (optional operation)
FileSystemException#getFile():::Returns the file used to create this exception.
FileSystemException#getOtherFile():::Returns the other file used to create this exception.
FileSystemException#getReason():::Returns the string explaining why the file system operation failed.
FileSystemException#getMessage():::Returns the detail message string.
FileSystems#getDefault():::Returns the default FileSystem
FileSystems#getFileSystem(URI):::Returns a reference to an existing FileSystem
FileSystems#newFileSystem(URI, Map):::Constructs a new file system that is identified by a URI   This method iterates over the FileSystemProvider#installedProviders() installed providers to locate the provider that is identified by the URI URI#getScheme scheme of the given URI
FileSystems#newFileSystem(URI, Map, ClassLoader):::Constructs a new file system that is identified by a URI   This method first attempts to locate an installed provider in exactly the same manner as the #newFileSystem(URI,Map) newFileSystem(URI,Map) method
FileSystems#newFileSystem(Path, ClassLoader):::Constructs a new FileSystem to access the contents of a file as a file system
FileTreeWalker#walk(Path):::Start walking from the given file.
FileTreeWalker#next():::Returns the next Event or null if there are no more events or the walker is closed.
FileTreeWalker#pop():::Pops the directory node that is the current top of the stack so that there are no more events for the directory (including no END_DIRECTORY) event
FileTreeWalker#skipRemainingSiblings():::Skips the remaining entries in the directory at the top of the stack
FileTreeWalker#isOpen():::Returns true if the walker is open.
FileTreeWalker#close():::Closes/pops all directories on the stack.
FileVisitor#preVisitDirectory(T, BasicFileAttributes):::Invoked for a directory before entries in the directory are visited
FileVisitor#visitFile(T, BasicFileAttributes):::Invoked for a file in a directory.
FileVisitor#visitFileFailed(T, IOException):::Invoked for a file that could not be visited
FileVisitor#postVisitDirectory(T, IOException):::Invoked for a directory after entries in the directory, and all of their descendants, have been visited
InvalidPathException#getInput():::Returns the input string.
InvalidPathException#getReason():::Returns a string explaining why the input string was rejected.
InvalidPathException#getIndex():::Returns an index into the input string of the position at which the error occurred, or -1 if this position is not known.
InvalidPathException#getMessage():::Returns a string describing the error
Path#of(String, String...):::Returns a Path by converting a path string, or a sequence of strings that when joined form a path string
Path#of(URI):::Returns a Path by converting a URI
Path#getFileSystem():::Returns the file system that created this object.
Path#isAbsolute():::Tells whether or not this path is absolute
Path#getRoot():::Returns the root component of this path as a Path object, or null if this path does not have a root component.
Path#getFileName():::Returns the name of the file or directory denoted by this path as a Path object
Path#getParent():::Returns the parent path, or null if this path does not have a parent
Path#getNameCount():::Returns the number of name elements in the path.
Path#getName(int):::Returns a name element of this path as a Path object
Path#subpath(int, int):::Returns a relative Path that is a subsequence of the name elements of this path
Path#startsWith(Path):::Tests if this path starts with the given path
Path#startsWith(String):::Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the #startsWith(Path) startsWith(Path) method
Path#endsWith(Path):::Tests if this path ends with the given path
Path#endsWith(String):::Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the #endsWith(Path) endsWith(Path) method
Path#normalize():::Returns a path that is this path with redundant name elements eliminated
Path#resolve(Path):::Resolve the given path against this path
Path#resolve(String):::Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the #resolve(Path) resolve method
Path#resolveSibling(Path):::Resolves the given path against this path's #getParent parent path
Path#resolveSibling(String):::Converts a given path string to a Path and resolves it against this path's #getParent parent path in exactly the manner specified by the #resolveSibling(Path) resolveSibling method.
Path#relativize(Path):::Constructs a relative path between this path and a given path
Path#toUri():::Returns a URI to represent this path
Path#toAbsolutePath():::Returns a Path object representing the absolute path of this path
Path#toRealPath(LinkOption...):::Returns the real path of an existing file
Path#toFile():::Returns a File object representing this path
Path#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...):::Registers the file located by this path with a watch service
Path#register(WatchService, WatchEvent.Kind...):::Registers the file located by this path with a watch service
Path#iterator():::Returns an iterator over the name elements of this path
Path#compareTo(Path):::Compares two abstract paths lexicographically
Path#equals(Object):::Tests this path for equality with the given object
Path#hashCode():::Computes a hash code for this path
Path#toString():::Returns the string representation of this path
PathMatcher#matches(Path):::Tells if given path matches this matcher's pattern.
Paths#get(String, String...):::Converts a path string, or a sequence of strings that when joined form a path string, to a Path.
Paths#get(URI):::Converts the given URI to a Path object.
SecureDirectoryStream#newDirectoryStream(T, LinkOption...):::Opens the directory identified by the given path, returning a SecureDirectoryStream to iterate over the entries in the directory
SecureDirectoryStream#newByteChannel(T, Set, FileAttribute...):::Opens or creates a file in this directory, returning a seekable byte channel to access the file
SecureDirectoryStream#deleteFile(T):::Deletes a file
SecureDirectoryStream#deleteDirectory(T):::Deletes a directory
SecureDirectoryStream#move(T, SecureDirectoryStream, T):::Move a file from this directory to another directory
SecureDirectoryStream#getFileAttributeView(Class):::Returns a new file attribute view to access the file attributes of this directory
SecureDirectoryStream#getFileAttributeView(T, Class, LinkOption...):::Returns a new file attribute view to access the file attributes of a file in this directory
SimpleFileVisitor#preVisitDirectory(T, BasicFileAttributes):::Invoked for a directory before entries in the directory are visited
SimpleFileVisitor#visitFile(T, BasicFileAttributes):::Invoked for a file in a directory
SimpleFileVisitor#visitFileFailed(T, IOException):::Invoked for a file that could not be visited
SimpleFileVisitor#postVisitDirectory(T, IOException):::Invoked for a directory after entries in the directory, and all of their descendants, have been visited
TempFileHelper#createTempFile(Path, String, String, FileAttribute[]):::Creates a temporary file in the given directory, or in the temporary directory if dir is null.
TempFileHelper#createTempDirectory(Path, String, FileAttribute[]):::Creates a temporary directory in the given directory, or in the temporary directory if dir is null.
Watchable#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...):::Registers an object with a watch service
Watchable#register(WatchService, WatchEvent.Kind...):::Registers an object with a watch service
WatchEvent.Kind#name():::Returns the name of the event kind.
WatchEvent.Kind#type():::Returns the type of the WatchEvent#context context value.
WatchEvent.Modifier#name():::Returns the name of the modifier.
WatchEvent#kind():::Returns the event kind.
WatchEvent#count():::Returns the event count
WatchEvent#context():::Returns the context for the event
WatchKey#isValid():::Tells whether or not this watch key is valid
WatchKey#pollEvents():::Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved
WatchKey#reset():::Resets this watch key
WatchKey#cancel():::Cancels the registration with the watch service
WatchKey#watchable():::Returns the object for which this watch key was created
WatchService#close():::Closes this watch service
WatchService#poll():::Retrieves and removes the next watch key, or null if none are present.
WatchService#poll(long, TimeUnit):::Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present.
WatchService#take():::Retrieves and removes next watch key, waiting if none are yet present.
FileSystemProvider#installedProviders():::Returns a list of the installed file system providers
FileSystemProvider#getScheme():::Returns the URI scheme that identifies this provider.
FileSystemProvider#newFileSystem(URI, Map):::Constructs a new FileSystem object identified by a URI
FileSystemProvider#getFileSystem(URI):::Returns an existing FileSystem created by this provider
FileSystemProvider#getPath(URI):::Return a Path object by converting the given URI
FileSystemProvider#newFileSystem(Path, Map):::Constructs a new FileSystem to access the contents of a file as a file system
FileSystemProvider#newInputStream(Path, OpenOption...):::Opens a file, returning an input stream to read from the file
FileSystemProvider#newOutputStream(Path, OpenOption...):::Opens or creates a file, returning an output stream that may be used to write bytes to the file
FileSystemProvider#newFileChannel(Path, Set, FileAttribute...):::Opens or creates a file for reading and/or writing, returning a file channel to access the file
FileSystemProvider#newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
FileSystemProvider#newByteChannel(Path, Set, FileAttribute...):::Opens or creates a file, returning a seekable byte channel to access the file
FileSystemProvider#newDirectoryStream(Path, DirectoryStream.Filter):::Opens a directory, returning a DirectoryStream to iterate over the entries in the directory
FileSystemProvider#createDirectory(Path, FileAttribute...):::Creates a new directory
FileSystemProvider#createSymbolicLink(Path, Path, FileAttribute...):::Creates a symbolic link to a target
FileSystemProvider#createLink(Path, Path):::Creates a new link (directory entry) for an existing file
FileSystemProvider#delete(Path):::Deletes a file
FileSystemProvider#deleteIfExists(Path):::Deletes a file if it exists
FileSystemProvider#readSymbolicLink(Path):::Reads the target of a symbolic link
FileSystemProvider#copy(Path, Path, CopyOption...):::Copy a file to a target file
FileSystemProvider#move(Path, Path, CopyOption...):::Move or rename a file to a target file
FileSystemProvider#isSameFile(Path, Path):::Tests if two paths locate the same file
FileSystemProvider#isHidden(Path):::Tells whether or not a file is considered hidden
FileSystemProvider#getFileStore(Path):::Returns the FileStore representing the file store where a file is located
FileSystemProvider#checkAccess(Path, AccessMode...):::Checks the existence, and optionally the accessibility, of a file
FileSystemProvider#getFileAttributeView(Path, Class, LinkOption...):::Returns a file attribute view of a given type
FileSystemProvider#readAttributes(Path, Class, LinkOption...):::Reads a file's attributes as a bulk operation
FileSystemProvider#readAttributes(Path, String, LinkOption...):::Reads a set of file attributes as a bulk operation
FileSystemProvider#setAttribute(Path, String, Object, LinkOption...):::Sets the value of a file attribute
FileTypeDetector#probeContentType(Path):::Probes the given file to guess its content type
Acl#setName(Principal, String):::Sets the name of this ACL.
Acl#getName():::Returns the name of this ACL.
Acl#addEntry(Principal, AclEntry):::Adds an ACL entry to this ACL
Acl#removeEntry(Principal, AclEntry):::Removes an ACL entry from this ACL.
Acl#getPermissions(Principal):::Returns an enumeration for the set of allowed permissions for the specified principal (representing an entity such as an individual or a group)
Acl#entries():::Returns an enumeration of the entries in this ACL
Acl#checkPermission(Principal, Permission):::Checks whether or not the specified principal has the specified permission
Acl#toString():::Returns a string representation of the ACL contents.
AclEntry#setPrincipal(Principal):::Specifies the principal for which permissions are granted or denied by this ACL entry
AclEntry#getPrincipal():::Returns the principal for which permissions are granted or denied by this ACL entry
AclEntry#setNegativePermissions():::Sets this ACL entry to be a negative one
AclEntry#isNegative():::Returns true if this is a negative ACL entry (one denying the associated principal the set of permissions in the entry), false otherwise.
AclEntry#addPermission(Permission):::Adds the specified permission to this ACL entry
AclEntry#removePermission(Permission):::Removes the specified permission from this ACL entry.
AclEntry#checkPermission(Permission):::Checks if the specified permission is part of the permission set in this entry.
AclEntry#permissions():::Returns an enumeration of the permissions in this ACL entry.
AclEntry#toString():::Returns a string representation of the contents of this ACL entry.
AclEntry#clone():::Clones this ACL entry.
Group#addMember(Principal):::Adds the specified member to the group.
Group#removeMember(Principal):::Removes the specified member from the group.
Group#isMember(Principal):::Returns true if the passed principal is a member of the group
Group#members():::Returns an enumeration of the members in the group
Owner#addOwner(Principal, Principal):::Adds an owner
Owner#deleteOwner(Principal, Principal):::Deletes an owner
Owner#isOwner(Principal):::Returns true if the given principal is an owner of the ACL.
Permission#equals(Object):::Returns true if the object passed matches the permission represented in this interface.
Permission#toString():::Prints a string representation of this permission.
Certificate#getType():::Returns the type of this certificate.
Certificate#equals(Object):::Compares this certificate for equality with the specified object
Certificate#hashCode():::Returns a hashcode value for this certificate from its encoded form.
Certificate#getEncoded():::Returns the encoded form of this certificate
Certificate#verify(PublicKey):::Verifies that this certificate was signed using the private key that corresponds to the specified public key.
Certificate#verify(PublicKey, String):::Verifies that this certificate was signed using the private key that corresponds to the specified public key
Certificate#verify(PublicKey, Provider):::Verifies that this certificate was signed using the private key that corresponds to the specified public key
Certificate#toString():::Returns a string representation of this certificate.
Certificate#getPublicKey():::Gets the public key from this certificate.
Certificate.CertificateRep#readResolve():::Resolve the Certificate Object.
Certificate#writeReplace():::Replace the Certificate to be serialized.
CertificateFactory#getInstance(String):::Returns a certificate factory object that implements the specified certificate type
CertificateFactory#getInstance(String, String):::Returns a certificate factory object for the specified certificate type
CertificateFactory#getInstance(String, Provider):::Returns a certificate factory object for the specified certificate type
CertificateFactory#getProvider():::Returns the provider of this certificate factory.
CertificateFactory#getType():::Returns the name of the certificate type associated with this certificate factory.
CertificateFactory#generateCertificate(InputStream):::Generates a certificate object and initializes it with the data read from the input stream inStream
CertificateFactory#getCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first
CertificateFactory#generateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream
CertificateFactory#generateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream
CertificateFactory#generateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates
CertificateFactory#generateCertificates(InputStream):::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream
CertificateFactory#generateCRL(InputStream):::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream
CertificateFactory#generateCRLs(InputStream):::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream
CertificateFactorySpi#engineGenerateCertificate(InputStream):::Generates a certificate object and initializes it with the data read from the input stream inStream
CertificateFactorySpi#engineGenerateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream
CertificateFactorySpi#engineGenerateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream
CertificateFactorySpi#engineGenerateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates
CertificateFactorySpi#engineGetCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first
CertificateFactorySpi#engineGenerateCertificates(InputStream):::Returns a (possibly empty) collection view of the certificates read from the given input stream inStream
CertificateFactorySpi#engineGenerateCRL(InputStream):::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream
CertificateFactorySpi#engineGenerateCRLs(InputStream):::Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream
CertificateRevokedException#getRevocationDate():::Returns the date on which the certificate was revoked
CertificateRevokedException#getRevocationReason():::Returns the reason the certificate was revoked.
CertificateRevokedException#getAuthorityName():::Returns the name of the authority that signed the certificate's revocation status information.
CertificateRevokedException#getInvalidityDate():::Returns the invalidity date, as specified in the Invalidity Date extension of this CertificateRevokedException
CertificateRevokedException#getExtensions():::Returns a map of X.509 extensions containing additional information about the revoked certificate, such as the Invalidity Date Extension
CertPath#getType():::Returns the type of Certificates in this certification path
CertPath#getEncodings():::Returns an iteration of the encodings supported by this certification path, with the default encoding first
CertPath#equals(Object):::Compares this certification path for equality with the specified object
CertPath#hashCode():::Returns the hashcode for this certification path
CertPath#toString():::Returns a string representation of this certification path
CertPath#getEncoded():::Returns the encoded form of this certification path, using the default encoding.
CertPath#getEncoded(String):::Returns the encoded form of this certification path, using the specified encoding.
CertPath#getCertificates():::Returns the list of certificates in this certification path
CertPath#writeReplace():::Replaces the CertPath to be serialized with a CertPathRep object.
CertPath.CertPathRep#readResolve():::Returns a CertPath constructed from the type and data.
CertPathBuilder#getInstance(String):::Returns a CertPathBuilder object that implements the specified algorithm
CertPathBuilder#getInstance(String, String):::Returns a CertPathBuilder object that implements the specified algorithm
CertPathBuilder#getInstance(String, Provider):::Returns a CertPathBuilder object that implements the specified algorithm
CertPathBuilder#getProvider():::Returns the provider of this CertPathBuilder.
CertPathBuilder#getAlgorithm():::Returns the name of the algorithm of this CertPathBuilder.
CertPathBuilder#build(CertPathParameters):::Attempts to build a certification path using the specified algorithm parameter set.
CertPathBuilder#getDefaultType():::Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string "PKIX" if no such property exists
CertPathBuilder#getRevocationChecker():::Returns a CertPathChecker that the encapsulated CertPathBuilderSpi implementation uses to check the revocation status of certificates
CertPathBuilderResult#getCertPath():::Returns the built certification path.
CertPathBuilderResult#clone():::Makes a copy of this CertPathBuilderResult
CertPathBuilderSpi#engineBuild(CertPathParameters):::Attempts to build a certification path using the specified algorithm parameter set.
CertPathBuilderSpi#engineGetRevocationChecker():::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates
CertPathChecker#init(boolean):::Initializes the internal state of this CertPathChecker
CertPathChecker#isForwardCheckingSupported():::Indicates if forward checking is supported
CertPathChecker#check(Certificate):::Performs the check(s) on the specified certificate using its internal state
CertPathHelperImpl#initialize():::Initialize the helper framework
CertPathParameters#clone():::Makes a copy of this CertPathParameters
CertPathValidator#getInstance(String):::Returns a CertPathValidator object that implements the specified algorithm
CertPathValidator#getInstance(String, String):::Returns a CertPathValidator object that implements the specified algorithm
CertPathValidator#getInstance(String, Provider):::Returns a CertPathValidator object that implements the specified algorithm
CertPathValidator#getProvider():::Returns the Provider of this CertPathValidator.
CertPathValidator#getAlgorithm():::Returns the algorithm name of this CertPathValidator.
CertPathValidator#validate(CertPath, CertPathParameters):::Validates the specified certification path using the specified algorithm parameter set
CertPathValidator#getDefaultType():::Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string "PKIX" if no such property exists
CertPathValidator#getRevocationChecker():::Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates
CertPathValidatorException#getCertPath():::Returns the certification path that was being validated when the exception was thrown.
CertPathValidatorException#getIndex():::Returns the index of the certificate in the certification path that caused the exception to be thrown
CertPathValidatorException#getReason():::Returns the reason that the validation failed
CertPathValidatorResult#clone():::Makes a copy of this CertPathValidatorResult
CertPathValidatorSpi#engineValidate(CertPath, CertPathParameters):::Validates the specified certification path using the specified algorithm parameter set
CertPathValidatorSpi#engineGetRevocationChecker():::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates
CertSelector#match(Certificate):::Decides whether a Certificate should be selected.
CertSelector#clone():::Makes a copy of this CertSelector
CertStore#getCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector
CertStore#getCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector
CertStore#getInstance(String, CertStoreParameters):::Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters
CertStore#getInstance(String, CertStoreParameters, String):::Returns a CertStore object that implements the specified CertStore type
CertStore#getInstance(String, CertStoreParameters, Provider):::Returns a CertStore object that implements the specified CertStore type
CertStore#getCertStoreParameters():::Returns the parameters used to initialize this CertStore
CertStore#getType():::Returns the type of this CertStore.
CertStore#getProvider():::Returns the provider of this CertStore.
CertStore#getDefaultType():::Returns the default CertStore type as specified by the certstore.type security property, or the string "LDAP" if no such property exists
CertStoreParameters#clone():::Makes a copy of this CertStoreParameters
CertStoreSpi#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector
CertStoreSpi#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector
CollectionCertStoreParameters#getCollection():::Returns the Collection from which Certificates and CRLs are retrieved
CollectionCertStoreParameters#clone():::Returns a copy of this object
CollectionCertStoreParameters#toString():::Returns a formatted string describing the parameters.
CRL#getType():::Returns the type of this CRL.
CRL#toString():::Returns a string representation of this CRL.
CRL#isRevoked(Certificate):::Checks whether the given certificate is on this CRL.
CRLSelector#match(CRL):::Decides whether a CRL should be selected.
CRLSelector#clone():::Makes a copy of this CRLSelector
Extension#getId():::Gets the extensions's object identifier.
Extension#isCritical():::Gets the extension's criticality setting.
Extension#getValue():::Gets the extensions's DER-encoded value
Extension#encode(OutputStream):::Generates the extension's DER encoding and writes it to the output stream.
LDAPCertStoreParameters#getServerName():::Returns the DNS name of the LDAP server.
LDAPCertStoreParameters#getPort():::Returns the port number of the LDAP server.
LDAPCertStoreParameters#clone():::Returns a copy of this object
LDAPCertStoreParameters#toString():::Returns a formatted string describing the parameters.
PKIXBuilderParameters#setMaxPathLength(int):::Sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path
PKIXBuilderParameters#getMaxPathLength():::Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path
PKIXBuilderParameters#toString():::Returns a formatted string describing the parameters.
PKIXCertPathBuilderResult#getCertPath():::Returns the built and validated certification path
PKIXCertPathBuilderResult#toString():::Return a printable representation of this PKIXCertPathBuilderResult.
PKIXCertPathChecker#init(boolean):::Initializes the internal state of this PKIXCertPathChecker
PKIXCertPathChecker#isForwardCheckingSupported():::Indicates if forward checking is supported
PKIXCertPathChecker#getSupportedExtensions():::Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e
PKIXCertPathChecker#check(Certificate, Collection):::Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions
PKIXCertPathChecker#check(Certificate):::This implementation calls {@code check(cert, java.util.Collections.<String>emptySet()).
PKIXCertPathChecker#clone():::Returns a clone of this object
PKIXCertPathValidatorResult#getTrustAnchor():::Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.
PKIXCertPathValidatorResult#getPolicyTree():::Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm
PKIXCertPathValidatorResult#getPublicKey():::Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable.
PKIXCertPathValidatorResult#clone():::Returns a copy of this object.
PKIXCertPathValidatorResult#toString():::Return a printable representation of this PKIXCertPathValidatorResult.
PKIXParameters#getTrustAnchors():::Returns an immutable Set of the most-trusted CAs.
PKIXParameters#setTrustAnchors(Set):::Sets the Set of most-trusted CAs
PKIXParameters#getInitialPolicies():::Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
PKIXParameters#setInitialPolicies(Set):::Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
PKIXParameters#setCertStores(List):::Sets the list of CertStores to be used in finding certificates and CRLs
PKIXParameters#addCertStore(CertStore):::Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs.
PKIXParameters#getCertStores():::Returns an immutable List of CertStores that are used to find certificates and CRLs.
PKIXParameters#setRevocationEnabled(boolean):::Sets the RevocationEnabled flag
PKIXParameters#isRevocationEnabled():::Checks the RevocationEnabled flag
PKIXParameters#setExplicitPolicyRequired(boolean):::Sets the ExplicitPolicyRequired flag
PKIXParameters#isExplicitPolicyRequired():::Checks if explicit policy is required
PKIXParameters#setPolicyMappingInhibited(boolean):::Sets the PolicyMappingInhibited flag
PKIXParameters#isPolicyMappingInhibited():::Checks if policy mapping is inhibited
PKIXParameters#setAnyPolicyInhibited(boolean):::Sets state to determine if the any policy OID should be processed if it is included in a certificate
PKIXParameters#isAnyPolicyInhibited():::Checks whether the any policy OID should be processed if it is included in a certificate.
PKIXParameters#setPolicyQualifiersRejected(boolean):::Sets the PolicyQualifiersRejected flag
PKIXParameters#getPolicyQualifiersRejected():::Gets the PolicyQualifiersRejected flag
PKIXParameters#getDate():::Returns the time for which the validity of the certification path should be determined
PKIXParameters#setDate(Date):::Sets the time for which the validity of the certification path should be determined
PKIXParameters#setCertPathCheckers(List):::Sets a List of additional certification path checkers
PKIXParameters#getCertPathCheckers():::Returns the List of certification path checkers
PKIXParameters#addCertPathChecker(PKIXCertPathChecker):::Adds a PKIXCertPathChecker to the list of certification path checkers
PKIXParameters#getSigProvider():::Returns the signature provider's name, or null if not set.
PKIXParameters#setSigProvider(String):::Sets the signature provider's name
PKIXParameters#getTargetCertConstraints():::Returns the required constraints on the target certificate
PKIXParameters#setTargetCertConstraints(CertSelector):::Sets the required constraints on the target certificate
PKIXParameters#clone():::Makes a copy of this PKIXParameters object
PKIXParameters#toString():::Returns a formatted string describing the parameters.
PKIXRevocationChecker#setOcspResponder(URI):::Sets the URI that identifies the location of the OCSP responder
PKIXRevocationChecker#getOcspResponder():::Gets the URI that identifies the location of the OCSP responder
PKIXRevocationChecker#setOcspResponderCert(X509Certificate):::Sets the OCSP responder's certificate
PKIXRevocationChecker#getOcspResponderCert():::Gets the OCSP responder's certificate
PKIXRevocationChecker#setOcspExtensions(List):::Sets the optional OCSP request extensions.
PKIXRevocationChecker#getOcspExtensions():::Gets the optional OCSP request extensions.
PKIXRevocationChecker#setOcspResponses(Map):::Sets the OCSP responses
PKIXRevocationChecker#getOcspResponses():::Gets the OCSP responses
PKIXRevocationChecker#setOptions(Set):::Sets the revocation options.
PKIXRevocationChecker#getOptions():::Gets the revocation options.
PKIXRevocationChecker#getSoftFailExceptions():::Returns a list containing the exceptions that are ignored by the revocation checker when the Option#SOFT_FAIL SOFT_FAIL option is set
PolicyNode#getParent():::Returns the parent of this node, or null if this is the root node.
PolicyNode#getChildren():::Returns an iterator over the children of this node
PolicyNode#getDepth():::Returns the depth of this node in the valid policy tree.
PolicyNode#getValidPolicy():::Returns the valid policy represented by this node.
PolicyNode#getPolicyQualifiers():::Returns the set of policy qualifiers associated with the valid policy represented by this node.
PolicyNode#getExpectedPolicies():::Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed.
PolicyNode#isCritical():::Returns the criticality indicator of the certificate policy extension in the most recently processed certificate.
PolicyQualifierInfo#getPolicyQualifierId():::Returns the policyQualifierId field of this PolicyQualifierInfo
PolicyQualifierInfo#getEncoded():::Returns the ASN.1 DER encoded form of this PolicyQualifierInfo.
PolicyQualifierInfo#getPolicyQualifier():::Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo.
PolicyQualifierInfo#toString():::Return a printable representation of this PolicyQualifierInfo.
TrustAnchor#getTrustedCert():::Returns the most-trusted CA certificate.
TrustAnchor#getCA():::Returns the name of the most-trusted CA as an X500Principal.
TrustAnchor#getCAName():::Returns the name of the most-trusted CA in RFC 2253 String format.
TrustAnchor#getCAPublicKey():::Returns the public key of the most-trusted CA.
TrustAnchor#getNameConstraints():::Returns the name constraints parameter
TrustAnchor#toString():::Returns a formatted string describing the TrustAnchor.
URICertStoreParameters#getURI():::Returns the URI used to construct this URICertStoreParameters object.
URICertStoreParameters#clone():::Returns a copy of this object
URICertStoreParameters#hashCode():::Returns a hash code value for this parameters object
URICertStoreParameters#equals(Object):::Compares the specified object with this parameters object for equality
URICertStoreParameters#toString():::Returns a formatted string describing the parameters including the URI used to construct this object.
X509Certificate#checkValidity():::Checks that the certificate is currently valid
X509Certificate#checkValidity(Date):::Checks that the given date is within the certificate's validity period
X509Certificate#getVersion():::Gets the version (version number) value from the certificate
X509Certificate#getSerialNumber():::Gets the serialNumber value from the certificate
X509Certificate#getIssuerDN():::Denigrated, replaced by #getIssuerX500Principal()
X509Certificate#getIssuerX500Principal():::Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal
X509Certificate#getSubjectDN():::Denigrated, replaced by #getSubjectX500Principal()
X509Certificate#getSubjectX500Principal():::Returns the subject (subject distinguished name) value from the certificate as an X500Principal
X509Certificate#getNotBefore():::Gets the notBefore date from the validity period of the certificate
X509Certificate#getNotAfter():::Gets the notAfter date from the validity period of the certificate
X509Certificate#getTBSCertificate():::Gets the DER-encoded certificate information, the tbsCertificate from this certificate
X509Certificate#getSignature():::Gets the signature value (the raw signature bits) from the certificate
X509Certificate#getSigAlgName():::Gets the signature algorithm name for the certificate signature algorithm
X509Certificate#getSigAlgOID():::Gets the signature algorithm OID string from the certificate
X509Certificate#getSigAlgParams():::Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm
X509Certificate#getIssuerUniqueID():::Gets the issuerUniqueID value from the certificate
X509Certificate#getSubjectUniqueID():::Gets the subjectUniqueID value from the certificate
X509Certificate#getKeyUsage():::Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15)
X509Certificate#getExtendedKeyUsage():::Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37)
X509Certificate#getBasicConstraints():::Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19)
X509Certificate#getSubjectAlternativeNames():::Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17)
X509Certificate#getIssuerAlternativeNames():::Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18)
X509Certificate#verify(PublicKey, Provider):::Verifies that this certificate was signed using the private key that corresponds to the specified public key
X509CertSelector#setCertificate(X509Certificate):::Sets the certificateEquals criterion
X509CertSelector#setSerialNumber(BigInteger):::Sets the serialNumber criterion
X509CertSelector#setIssuer(X500Principal):::Sets the issuer criterion
X509CertSelector#setIssuer(String):::Denigrated, use #setIssuer(X500Principal) or #setIssuer(byte[]) instead
X509CertSelector#setIssuer(byte[]):::Sets the issuer criterion
X509CertSelector#setSubject(X500Principal):::Sets the subject criterion
X509CertSelector#setSubject(String):::Denigrated, use #setSubject(X500Principal) or #setSubject(byte[]) instead
X509CertSelector#setSubject(byte[]):::Sets the subject criterion
X509CertSelector#setSubjectKeyIdentifier(byte[]):::Sets the subjectKeyIdentifier criterion
X509CertSelector#setAuthorityKeyIdentifier(byte[]):::Sets the authorityKeyIdentifier criterion
X509CertSelector#setCertificateValid(Date):::Sets the certificateValid criterion
X509CertSelector#setPrivateKeyValid(Date):::Sets the privateKeyValid criterion
X509CertSelector#setSubjectPublicKeyAlgID(String):::Sets the subjectPublicKeyAlgID criterion
X509CertSelector#setSubjectPublicKey(PublicKey):::Sets the subjectPublicKey criterion
X509CertSelector#setSubjectPublicKey(byte[]):::Sets the subjectPublicKey criterion
X509CertSelector#setKeyUsage(boolean[]):::Sets the keyUsage criterion
X509CertSelector#setExtendedKeyUsage(Set):::Sets the extendedKeyUsage criterion
X509CertSelector#setMatchAllSubjectAltNames(boolean):::Enables/disables matching all of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods
X509CertSelector#setSubjectAlternativeNames(Collection>):::Sets the subjectAlternativeNames criterion
X509CertSelector#addSubjectAlternativeName(int, String):::Adds a name to the subjectAlternativeNames criterion
X509CertSelector#addSubjectAlternativeName(int, byte[]):::Adds a name to the subjectAlternativeNames criterion
X509CertSelector#equalNames(Collection, Collection):::Compare for equality two objects of the form passed to setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames)
X509CertSelector#makeGeneralNameInterface(int, Object):::Make a GeneralNameInterface out of a name type (0-8) and an Object that may be a byte array holding the ASN.1 DER encoded name or a String form of the name
X509CertSelector#setNameConstraints(byte[]):::Sets the name constraints criterion
X509CertSelector#setBasicConstraints(int):::Sets the basic constraints constraint
X509CertSelector#setPolicy(Set):::Sets the policy constraint
X509CertSelector#setPathToNames(Collection>):::Sets the pathToNames criterion
X509CertSelector#addPathToName(int, String):::Adds a name to the pathToNames criterion
X509CertSelector#addPathToName(int, byte[]):::Adds a name to the pathToNames criterion
X509CertSelector#getCertificate():::Returns the certificateEquals criterion
X509CertSelector#getSerialNumber():::Returns the serialNumber criterion
X509CertSelector#getIssuer():::Returns the issuer criterion as an X500Principal
X509CertSelector#getIssuerAsString():::Denigrated, use #getIssuer() or #getIssuerAsBytes() instead
X509CertSelector#getIssuerAsBytes():::Returns the issuer criterion as a byte array
X509CertSelector#getSubject():::Returns the subject criterion as an X500Principal
X509CertSelector#getSubjectAsString():::Denigrated, use #getSubject() or #getSubjectAsBytes() instead
X509CertSelector#getSubjectAsBytes():::Returns the subject criterion as a byte array
X509CertSelector#getSubjectKeyIdentifier():::Returns the subjectKeyIdentifier criterion
X509CertSelector#getAuthorityKeyIdentifier():::Returns the authorityKeyIdentifier criterion
X509CertSelector#getCertificateValid():::Returns the certificateValid criterion
X509CertSelector#getPrivateKeyValid():::Returns the privateKeyValid criterion
X509CertSelector#getSubjectPublicKeyAlgID():::Returns the subjectPublicKeyAlgID criterion
X509CertSelector#getSubjectPublicKey():::Returns the subjectPublicKey criterion
X509CertSelector#getKeyUsage():::Returns the keyUsage criterion
X509CertSelector#getExtendedKeyUsage():::Returns the extendedKeyUsage criterion
X509CertSelector#getMatchAllSubjectAltNames():::Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the #setSubjectAlternativeNames setSubjectAlternativeNames or #addSubjectAlternativeName addSubjectAlternativeName methods
X509CertSelector#getSubjectAlternativeNames():::Returns a copy of the subjectAlternativeNames criterion
X509CertSelector#getNameConstraints():::Returns the name constraints criterion
X509CertSelector#getBasicConstraints():::Returns the basic constraints constraint
X509CertSelector#getPolicy():::Returns the policy criterion
X509CertSelector#getPathToNames():::Returns a copy of the pathToNames criterion
X509CertSelector#toString():::Return a printable representation of the CertSelector.
X509CertSelector#match(Certificate):::Decides whether a Certificate should be selected.
X509CertSelector#clone():::Returns a copy of this object.
X509CRL#equals(Object):::Compares this CRL for equality with the given object
X509CRL#hashCode():::Returns a hashcode value for this CRL from its encoded form.
X509CRL#getEncoded():::Returns the ASN.1 DER-encoded form of this CRL.
X509CRL#verify(PublicKey):::Verifies that this CRL was signed using the private key that corresponds to the given public key.
X509CRL#verify(PublicKey, String):::Verifies that this CRL was signed using the private key that corresponds to the given public key
X509CRL#verify(PublicKey, Provider):::Verifies that this CRL was signed using the private key that corresponds to the given public key
X509CRL#getVersion():::Gets the version (version number) value from the CRL
X509CRL#getIssuerDN():::Denigrated, replaced by #getIssuerX500Principal()
X509CRL#getIssuerX500Principal():::Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal
X509CRL#getThisUpdate():::Gets the thisUpdate date from the CRL
X509CRL#getNextUpdate():::Gets the nextUpdate date from the CRL.
X509CRL#getRevokedCertificate(BigInteger):::Gets the CRL entry, if any, with the given certificate serialNumber.
X509CRL#getRevokedCertificate(X509Certificate):::Get the CRL entry, if any, for the given certificate
X509CRL#getRevokedCertificates():::Gets all the entries from this CRL
X509CRL#getTBSCertList():::Gets the DER-encoded CRL information, the tbsCertList from this CRL
X509CRL#getSignature():::Gets the signature value (the raw signature bits) from the CRL
X509CRL#getSigAlgName():::Gets the signature algorithm name for the CRL signature algorithm
X509CRL#getSigAlgOID():::Gets the signature algorithm OID string from the CRL
X509CRL#getSigAlgParams():::Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm
X509CRLEntry#equals(Object):::Compares this CRL entry for equality with the given object
X509CRLEntry#hashCode():::Returns a hashcode value for this CRL entry from its encoded form.
X509CRLEntry#getEncoded():::Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE.
X509CRLEntry#getSerialNumber():::Gets the serial number from this X509CRLEntry, the userCertificate.
X509CRLEntry#getCertificateIssuer():::Get the issuer of the X509Certificate described by this entry
X509CRLEntry#getRevocationDate():::Gets the revocation date from this X509CRLEntry, the revocationDate.
X509CRLEntry#hasExtensions():::Returns true if this CRL entry has extensions.
X509CRLEntry#toString():::Returns a string representation of this CRL entry.
X509CRLEntry#getRevocationReason():::Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry.
X509CRLSelector#setIssuers(Collection):::Sets the issuerNames criterion
X509CRLSelector#setIssuerNames(Collection):::Note: use #setIssuers(Collection) instead or only specify the byte array form of distinguished names when using this method
X509CRLSelector#addIssuer(X500Principal):::Adds a name to the issuerNames criterion
X509CRLSelector#addIssuerName(String):::Denigrated, use #addIssuer(X500Principal) or #addIssuerName(byte[]) instead
X509CRLSelector#addIssuerName(byte[]):::Adds a name to the issuerNames criterion
X509CRLSelector#setMinCRLNumber(BigInteger):::Sets the minCRLNumber criterion
X509CRLSelector#setMaxCRLNumber(BigInteger):::Sets the maxCRLNumber criterion
X509CRLSelector#setDateAndTime(Date):::Sets the dateAndTime criterion
X509CRLSelector#setDateAndTime(Date, long):::Sets the dateAndTime criterion and allows for the specified clock skew (in milliseconds) when checking against the validity period of the CRL.
X509CRLSelector#setCertificateChecking(X509Certificate):::Sets the certificate being checked
X509CRLSelector#getIssuers():::Returns the issuerNames criterion
X509CRLSelector#getIssuerNames():::Returns a copy of the issuerNames criterion
X509CRLSelector#getMinCRL():::Returns the minCRLNumber criterion
X509CRLSelector#getMaxCRL():::Returns the maxCRLNumber criterion
X509CRLSelector#getDateAndTime():::Returns the dateAndTime criterion
X509CRLSelector#getCertificateChecking():::Returns the certificate being checked
X509CRLSelector#toString():::Returns a printable representation of the X509CRLSelector.
X509CRLSelector#match(CRL):::Decides whether a CRL should be selected.
X509CRLSelector#clone():::Returns a copy of this object.
X509Extension#hasUnsupportedCriticalExtension():::Check if there is a critical extension that is not supported.
X509Extension#getCriticalExtensionOIDs():::Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface
X509Extension#getNonCriticalExtensionOIDs():::Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface
X509Extension#getExtensionValue(String):::Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String
AccessControlContext#getContext():::Returns this context's context.
AccessControlContext#isPrivileged():::Returns true if this context is privileged.
AccessControlContext#getAssignedCombiner():::get the assigned combiner from the privileged or inherited context
AccessControlContext#getDomainCombiner():::Get the DomainCombiner associated with this AccessControlContext.
AccessControlContext#getCombiner():::package private for AccessController
AccessControlContext#checkPermission(Permission):::Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object
AccessControlContext#optimize():::Take the stack-based context (this) and combine it with the privileged or inherited context, if need be
AccessControlContext#equals(Object):::Checks two AccessControlContext objects for equality
AccessControlException#getPermission():::Gets the Permission object associated with this exception, or null if there was no corresponding Permission object.
AccessController#doPrivilegedWithCombiner(PrivilegedAction):::Performs the specified PrivilegedAction with privileges enabled
AccessController#doPrivileged(PrivilegedAction, AccessControlContext):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext
AccessController#doPrivileged(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
AccessController#doPrivilegedWithCombiner(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
AccessController#doPrivileged(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
AlgorithmConstraints#permits(Set, String, AlgorithmParameters):::Determines whether an algorithm is granted permission for the specified cryptographic primitives.
AlgorithmConstraints#permits(Set, Key):::Determines whether a key is granted permission for the specified cryptographic primitives
AlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters):::Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.
AlgorithmParameterGenerator#getAlgorithm():::Returns the standard name of the algorithm this parameter generator is associated with.
AlgorithmParameterGenerator#getInstance(String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
AlgorithmParameterGenerator#getInstance(String, String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
AlgorithmParameterGenerator#getInstance(String, Provider):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
AlgorithmParameterGenerator#getProvider():::Returns the provider of this algorithm parameter generator object.
AlgorithmParameterGenerator#init(int):::Initializes this parameter generator for a certain size
AlgorithmParameterGenerator#init(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.
AlgorithmParameterGenerator#init(AlgorithmParameterSpec):::Initializes this parameter generator with a set of algorithm-specific parameter generation values
AlgorithmParameterGenerator#init(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.
AlgorithmParameterGenerator#generateParameters():::Generates the parameters.
AlgorithmParameterGeneratorSpi#engineInit(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.
AlgorithmParameterGeneratorSpi#engineInit(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.
AlgorithmParameterGeneratorSpi#engineGenerateParameters():::Generates the parameters.
AlgorithmParameters#getAlgorithm():::Returns the name of the algorithm associated with this parameter object.
AlgorithmParameters#getInstance(String):::Returns a parameter object for the specified algorithm
AlgorithmParameters#getInstance(String, String):::Returns a parameter object for the specified algorithm
AlgorithmParameters#getInstance(String, Provider):::Returns a parameter object for the specified algorithm
AlgorithmParameters#getProvider():::Returns the provider of this parameter object.
AlgorithmParameters#init(AlgorithmParameterSpec):::Initializes this parameter object using the parameters specified in paramSpec.
AlgorithmParameters#init(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters
AlgorithmParameters#init(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding scheme
AlgorithmParameters#getParameterSpec(Class):::Returns a (transparent) specification of this parameter object
AlgorithmParameters#getEncoded():::Returns the parameters in their primary encoding format
AlgorithmParameters#getEncoded(String):::Returns the parameters encoded in the specified scheme
AlgorithmParameters#toString():::Returns a formatted string describing the parameters.
AlgorithmParametersSpi#engineInit(AlgorithmParameterSpec):::Initializes this parameters object using the parameters specified in paramSpec.
AlgorithmParametersSpi#engineInit(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters
AlgorithmParametersSpi#engineInit(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding format
AlgorithmParametersSpi#engineGetParameterSpec(Class):::Returns a (transparent) specification of this parameters object
AlgorithmParametersSpi#engineGetEncoded():::Returns the parameters in their primary encoding format
AlgorithmParametersSpi#engineGetEncoded(String):::Returns the parameters encoded in the specified format
AlgorithmParametersSpi#engineToString():::Returns a formatted string describing the parameters.
AllPermission#implies(Permission):::Checks if the specified permission is "implied" by this object
AllPermission#equals(Object):::Checks two AllPermission objects for equality
AllPermission#getActions():::Returns the canonical string representation of the actions.
AllPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing AllPermission objects.
AllPermissionCollection#elements():::Returns an enumeration of all the AllPermission objects in the container.
AuthProvider#login(Subject, CallbackHandler):::Log in to this provider
AuthProvider#logout():::Log out from this provider.
AuthProvider#setCallbackHandler(CallbackHandler):::Set a CallbackHandler
BasicPermission#implies(Permission):::Checks if the specified permission is "implied" by this object
BasicPermission#equals(Object):::Checks two BasicPermission objects for equality
BasicPermission#hashCode():::Returns the hash code value for this object
BasicPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission.
BasicPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing BasicPermission objects
BasicPermission#getCanonicalName():::Returns the canonical name of this BasicPermission
BasicPermissionCollection#add(Permission):::Adds a permission to the BasicPermissions
BasicPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
BasicPermissionCollection#elements():::Returns an enumeration of all the BasicPermission objects in the container.
Certificate#getGuarantor():::Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this certificate
Certificate#getPrincipal():::Returns the principal of the principal-key pair being guaranteed by the guarantor.
Certificate#getPublicKey():::Returns the key of the principal-key pair being guaranteed by the guarantor.
Certificate#encode(OutputStream):::Encodes the certificate to an output stream in a format that can be decoded by the decode method.
Certificate#decode(InputStream):::Decodes a certificate from an input stream
Certificate#getFormat():::Returns the name of the coding format
Certificate#toString(boolean):::Returns a string that represents the contents of the certificate.
CodeSigner#getSignerCertPath():::Returns the signer's certificate path.
CodeSigner#getTimestamp():::Returns the signature timestamp.
CodeSigner#hashCode():::Returns the hash code value for this code signer
CodeSigner#equals(Object):::Tests for equality between the specified object and this code signer
CodeSigner#toString():::Returns a string describing this code signer.
CodeSource#hashCode():::Returns the hash code value for this object.
CodeSource#equals(Object):::Tests for equality between the specified object and this object
CodeSource#getLocation():::Returns the location associated with this CodeSource.
CodeSource#getLocationNoFragString():::Returns a String form of the URL for use as a key in HashMaps/Sets.
CodeSource#getCertificates():::Returns the certificates associated with this CodeSource
CodeSource#getCodeSigners():::Returns the code signers associated with this CodeSource
CodeSource#implies(CodeSource):::Returns true if this CodeSource object "implies" the specified CodeSource
CodeSource#matchCerts(CodeSource, boolean):::Returns true if all the certs in this CodeSource are also in that.
CodeSource#toString():::Returns a string describing this CodeSource, telling its URL and certificates.
DigestInputStream#getMessageDigest():::Returns the message digest associated with this stream.
DigestInputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.
DigestInputStream#read():::Reads a byte, and updates the message digest (if the digest function is on)
DigestInputStream#read(byte[], int, int):::Reads into a byte array, and updates the message digest (if the digest function is on)
DigestInputStream#on(boolean):::Turns the digest function on or off
DigestInputStream#toString():::Prints a string representation of this digest input stream and its associated message digest object.
DigestOutputStream#getMessageDigest():::Returns the message digest associated with this stream.
DigestOutputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.
DigestOutputStream#write(int):::Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream
DigestOutputStream#write(byte[], int, int):::Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream
DigestOutputStream#on(boolean):::Turns the digest function on or off
DigestOutputStream#toString():::Prints a string representation of this digest output stream and its associated message digest object.
DomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Modify or update the provided ProtectionDomains
DomainLoadStoreParameter#getConfiguration():::Gets the identifier for the domain configuration data.
DomainLoadStoreParameter#getProtectionParams():::Gets the keystore protection parameters for keystores in this domain.
DomainLoadStoreParameter#getProtectionParameter():::Gets the keystore protection parameters for this domain
DrbgParameters.Instantiation#getStrength():::Returns the security strength in bits.
DrbgParameters.Instantiation#getCapability():::Returns the capability.
DrbgParameters.Instantiation#getPersonalizationString():::Returns the personalization string as a byte array.
DrbgParameters.Instantiation#toString():::Returns a Human-readable string representation of this Instantiation.
DrbgParameters.NextBytes#getStrength():::Returns the security strength requested in bits.
DrbgParameters.NextBytes#getPredictionResistance():::Returns whether prediction resistance is requested.
DrbgParameters.NextBytes#getAdditionalInput():::Returns the requested additional input.
DrbgParameters.Reseed#getPredictionResistance():::Returns whether prediction resistance is requested.
DrbgParameters.Reseed#getAdditionalInput():::Returns the requested additional input.
DrbgParameters#instantiation(int, Capability, byte[]):::Generates a DrbgParameters.Instantiation object.
DrbgParameters#nextBytes(int, boolean, byte[]):::Generates a NextBytes object.
DrbgParameters#reseed(boolean, byte[]):::Generates a Reseed object.
Guard#checkGuard(Object):::Determines whether or not to allow access to the guarded object object
GuardedObject#getObject():::Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.
Identity#getName():::Returns this identity's name.
Identity#getScope():::Returns this identity's scope.
Identity#getPublicKey():::Returns this identity's public key.
Identity#setInfo(String):::Specifies a general information string for this identity
Identity#getInfo():::Returns general information previously specified for this identity.
Identity#addCertificate(Certificate):::Adds a certificate for this identity
Identity#removeCertificate(Certificate):::Removes a certificate from this identity
Identity#certificates():::Returns a copy of all the certificates for this identity.
Identity#equals(Object):::Tests for equality between the specified object and this identity
Identity#identityEquals(Identity):::Tests for equality between the specified identity and this identity
Identity#fullName():::Returns a parsable name for identity: identityName.scopeName
Identity#toString():::Returns a short string describing this identity, telling its name and its scope (if any)
Identity#toString(boolean):::Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments
Identity#hashCode():::Returns a hashcode for this identity.
IdentityScope#getSystemScope():::Returns the system's identity scope.
IdentityScope#setSystemScope(IdentityScope):::Sets the system's identity scope
IdentityScope#size():::Returns the number of identities within this identity scope.
IdentityScope#getIdentity(String):::Returns the identity in this scope with the specified name (if any).
IdentityScope#getIdentity(Principal):::Retrieves the identity whose name is the same as that of the specified principal
IdentityScope#getIdentity(PublicKey):::Retrieves the identity with the specified public key.
IdentityScope#addIdentity(Identity):::Adds an identity to this identity scope.
IdentityScope#removeIdentity(Identity):::Removes an identity from this identity scope.
IdentityScope#identities():::Returns an enumeration of all identities in this identity scope.
IdentityScope#toString():::Returns a string representation of this identity scope, including its name, its scope name, and the number of identities in this identity scope.
Key#getAlgorithm():::Returns the standard algorithm name for this key
Key#getFormat():::Returns the name of the primary encoding format of this key, or null if this key does not support encoding
Key#getEncoded():::Returns the key in its primary encoding format, or null if this key does not support encoding.
KeyFactory#getInstance(String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm
KeyFactory#getInstance(String, String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm
KeyFactory#getInstance(String, Provider):::Returns a KeyFactory object that converts public/private keys of the specified algorithm
KeyFactory#getProvider():::Returns the provider of this key factory object.
KeyFactory#getAlgorithm():::Gets the name of the algorithm associated with this KeyFactory.
KeyFactory#generatePublic(KeySpec):::Generates a public key object from the provided key specification (key material).
KeyFactory#generatePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).
KeyFactory#getKeySpec(Key, Class):::Returns a specification (key material) of the given key object
KeyFactory#translateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.
KeyFactorySpi#engineGeneratePublic(KeySpec):::Generates a public key object from the provided key specification (key material).
KeyFactorySpi#engineGeneratePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).
KeyFactorySpi#engineGetKeySpec(Key, Class):::Returns a specification (key material) of the given key object
KeyFactorySpi#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.
KeyPair#getPublic():::Returns a reference to the public key component of this key pair.
KeyPair#getPrivate():::Returns a reference to the private key component of this key pair.
KeyPairGenerator#getAlgorithm():::Returns the standard name of the algorithm for this key pair generator
KeyPairGenerator#getInstance(String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
KeyPairGenerator#getInstance(String, String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
KeyPairGenerator#getInstance(String, Provider):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
KeyPairGenerator#getProvider():::Returns the provider of this key pair generator object.
KeyPairGenerator#initialize(int):::Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness
KeyPairGenerator#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).
KeyPairGenerator#initialize(AlgorithmParameterSpec):::Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness
KeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator with the given parameter set and source of randomness
KeyPairGenerator#genKeyPair():::Generates a key pair
KeyPairGenerator#generateKeyPair():::Generates a key pair
KeyPairGeneratorSpi#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize, using the default parameter set.
KeyPairGeneratorSpi#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator using the specified parameter set and user-provided source of randomness
KeyPairGeneratorSpi#generateKeyPair():::Generates a key pair
KeyRep#readResolve():::Resolve the Key object
KeyStore.LoadStoreParameter#getProtectionParameter():::Gets the parameter used to protect keystore data.
KeyStore.PasswordProtection#getProtectionAlgorithm():::Gets the name of the protection algorithm
KeyStore.PasswordProtection#getProtectionParameters():::Gets the parameters supplied for the protection algorithm.
KeyStore.PasswordProtection#getPassword():::Gets the password
KeyStore.PasswordProtection#destroy():::Clears the password.
KeyStore.PasswordProtection#isDestroyed():::Determines if password has been cleared.
KeyStore.CallbackHandlerProtection#getCallbackHandler():::Returns the CallbackHandler.
KeyStore.Entry#getAttributes():::Retrieves the attributes associated with an entry.
KeyStore.Entry.Attribute#getName():::Returns the attribute's name.
KeyStore.Entry.Attribute#getValue():::Returns the attribute's value
KeyStore.PrivateKeyEntry#getPrivateKey():::Gets the PrivateKey from this entry.
KeyStore.PrivateKeyEntry#getCertificateChain():::Gets the Certificate chain from this entry
KeyStore.PrivateKeyEntry#getCertificate():::Gets the end entity Certificate from the certificate chain in this entry.
KeyStore.PrivateKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.
KeyStore.PrivateKeyEntry#toString():::Returns a string representation of this PrivateKeyEntry.
KeyStore.SecretKeyEntry#getSecretKey():::Gets the SecretKey from this entry.
KeyStore.SecretKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.
KeyStore.SecretKeyEntry#toString():::Returns a string representation of this SecretKeyEntry.
KeyStore.TrustedCertificateEntry#getTrustedCertificate():::Gets the trusted Certficate from this entry.
KeyStore.TrustedCertificateEntry#getAttributes():::Retrieves the attributes associated with an entry.
KeyStore.TrustedCertificateEntry#toString():::Returns a string representation of this TrustedCertificateEntry.
KeyStore#getInstance(String):::Returns a keystore object of the specified type
KeyStore#getInstance(String, String):::Returns a keystore object of the specified type
KeyStore#getInstance(String, Provider):::Returns a keystore object of the specified type
KeyStore#getDefaultType():::Returns the default keystore type as specified by the keystore.type security property, or the string "jks" (acronym for "Java keystore") if no such property exists
KeyStore#getProvider():::Returns the provider of this keystore.
KeyStore#getType():::Returns the type of this keystore.
KeyStore#getKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it
KeyStore#getCertificateChain(String):::Returns the certificate chain associated with the given alias
KeyStore#getCertificate(String):::Returns the certificate associated with the given alias
KeyStore#getCreationDate(String):::Returns the creation date of the entry identified by the given alias.
KeyStore#setKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password
KeyStore#setKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias
KeyStore#setCertificateEntry(String, Certificate):::Assigns the given trusted certificate to the given alias
KeyStore#deleteEntry(String):::Deletes the entry identified by the given alias from this keystore.
KeyStore#aliases():::Lists all the alias names of this keystore.
KeyStore#containsAlias(String):::Checks if the given alias exists in this keystore.
KeyStore#size():::Retrieves the number of entries in this keystore.
KeyStore#isKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.
KeyStore#isCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.
KeyStore#getCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
KeyStore#store(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.
KeyStore#store(LoadStoreParameter):::Stores this keystore using the given LoadStoreParameter.
KeyStore#load(InputStream, char[]):::Loads this KeyStore from the given input stream
KeyStore#load(LoadStoreParameter):::Loads this keystore using the given LoadStoreParameter
KeyStore#getEntry(String, ProtectionParameter):::Gets a keystore Entry for the specified alias with the specified protection parameter.
KeyStore#setEntry(String, Entry, ProtectionParameter):::Saves a keystore Entry under the specified alias
KeyStore#entryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
KeyStore#getInstance(File, char[]):::Returns a loaded keystore object of the appropriate keystore type
KeyStore#getInstance(File, LoadStoreParameter):::Returns a loaded keystore object of the appropriate keystore type
KeyStore.Builder#getKeyStore():::Returns the KeyStore described by this object.
KeyStore.Builder#getProtectionParameter(String):::Returns the ProtectionParameters that should be used to obtain the KeyStore.Entry Entry with the given alias
KeyStore.Builder#newInstance(KeyStore, ProtectionParameter):::Returns a new Builder that encapsulates the given KeyStore
KeyStore.Builder#newInstance(String, Provider, File, ProtectionParameter):::Returns a new Builder object
KeyStore.Builder#newInstance(File, ProtectionParameter):::Returns a new Builder object
KeyStore.Builder#newInstance(String, Provider, ProtectionParameter):::Returns a new Builder object
KeyStoreSpi#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it
KeyStoreSpi#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias
KeyStoreSpi#engineGetCertificate(String):::Returns the certificate associated with the given alias
KeyStoreSpi#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.
KeyStoreSpi#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password
KeyStoreSpi#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias
KeyStoreSpi#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias
KeyStoreSpi#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.
KeyStoreSpi#engineAliases():::Lists all the alias names of this keystore.
KeyStoreSpi#engineContainsAlias(String):::Checks if the given alias exists in this keystore.
KeyStoreSpi#engineSize():::Retrieves the number of entries in this keystore.
KeyStoreSpi#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.
KeyStoreSpi#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.
KeyStoreSpi#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
KeyStoreSpi#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.
KeyStoreSpi#engineStore(KeyStore.LoadStoreParameter):::Stores this keystore using the given KeyStore.LoadStoreParmeter.
KeyStoreSpi#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream
KeyStoreSpi#engineLoad(KeyStore.LoadStoreParameter):::Loads the keystore using the given KeyStore.LoadStoreParameter
KeyStoreSpi#engineGetEntry(String, KeyStore.ProtectionParameter):::Gets a KeyStore.Entry for the specified alias with the specified protection parameter.
KeyStoreSpi#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter):::Saves a KeyStore.Entry under the specified alias
KeyStoreSpi#engineEntryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
KeyStoreSpi#engineProbe(InputStream):::Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not.
MessageDigest#getInstance(String):::Returns a MessageDigest object that implements the specified digest algorithm
MessageDigest#getInstance(String, String):::Returns a MessageDigest object that implements the specified digest algorithm
MessageDigest#getInstance(String, Provider):::Returns a MessageDigest object that implements the specified digest algorithm
MessageDigest#getProvider():::Returns the provider of this message digest object.
MessageDigest#update(byte):::Updates the digest using the specified byte.
MessageDigest#update(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.
MessageDigest#update(byte[]):::Updates the digest using the specified array of bytes.
MessageDigest#update(ByteBuffer):::Update the digest using the specified ByteBuffer
MessageDigest#digest():::Completes the hash computation by performing final operations such as padding
MessageDigest#digest(byte[], int, int):::Completes the hash computation by performing final operations such as padding
MessageDigest#digest(byte[]):::Performs a final update on the digest using the specified array of bytes, then completes the digest computation
MessageDigest#toString():::Returns a string representation of this message digest object.
MessageDigest#isEqual(byte[], byte[]):::Compares two digests for equality
MessageDigest#reset():::Resets the digest for further use.
MessageDigest#getAlgorithm():::Returns a string that identifies the algorithm, independent of implementation details
MessageDigest#getDigestLength():::Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.
MessageDigest#clone():::Returns a clone if the implementation is cloneable.
MessageDigest.Delegate#clone():::Returns a clone if the delegate is cloneable.
MessageDigestSpi#engineGetDigestLength():::Returns the digest length in bytes
MessageDigestSpi#engineUpdate(byte):::Updates the digest using the specified byte.
MessageDigestSpi#engineUpdate(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.
MessageDigestSpi#engineUpdate(ByteBuffer):::Update the digest using the specified ByteBuffer
MessageDigestSpi#engineDigest():::Completes the hash computation by performing final operations such as padding
MessageDigestSpi#engineDigest(byte[], int, int):::Completes the hash computation by performing final operations such as padding
MessageDigestSpi#engineReset():::Resets the digest for further use.
MessageDigestSpi#clone():::Returns a clone if the implementation is cloneable.
Permission#checkGuard(Object):::Implements the guard interface for a permission
Permission#toString():::Returns a string describing this Permission
PermissionCollection#add(Permission):::Adds a permission object to the current collection of permission objects.
PermissionCollection#implies(Permission):::Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.
PermissionCollection#elements():::Returns an enumeration of all the Permission objects in the collection.
PermissionCollection#elementsAsStream():::Returns a stream of all the Permission objects in the collection
PermissionCollection#setReadOnly():::Marks this PermissionCollection object as "readonly"
PermissionCollection#isReadOnly():::Returns true if this PermissionCollection object is marked as readonly
PermissionCollection#toString():::Returns a string describing this PermissionCollection object, providing information about all the permissions it contains
Permissions#add(Permission):::Adds a permission object to the PermissionCollection for the class the permission belongs to
Permissions#implies(Permission):::Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object
Permissions#elements():::Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.
PermissionsHash#add(Permission):::Adds a permission to the PermissionsHash.
PermissionsHash#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
PermissionsHash#elements():::Returns an enumeration of all the Permission objects in the container.
PKCS12Attribute#getName():::Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.
PKCS12Attribute#getValue():::Returns the attribute's ASN.1 DER-encoded value as a string
PKCS12Attribute#getEncoded():::Returns the attribute's ASN.1 DER encoding.
PKCS12Attribute#equals(Object):::Compares this PKCS12Attribute and a specified object for equality.
PKCS12Attribute#hashCode():::Returns the hashcode for this PKCS12Attribute
PKCS12Attribute#toString():::Returns a string representation of this PKCS12Attribute.
Policy#isSet():::package private for AccessControlContext and ProtectionDomain
Policy#getPolicy():::Returns the installed Policy object
Policy#getPolicyNoCheck():::Returns the installed Policy object, skipping the security check
Policy#setPolicy(Policy):::Sets the system-wide Policy object
Policy#getInstance(String, Policy.Parameters):::Returns a Policy object of the specified type
Policy#getInstance(String, Policy.Parameters, String):::Returns a Policy object of the specified type
Policy#getInstance(String, Policy.Parameters, Provider):::Returns a Policy object of the specified type
Policy#getProvider():::Return the Provider of this Policy
Policy#getType():::Return the type of this Policy
Policy#getParameters():::Return Policy parameters
Policy#getPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
Policy#getPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain
Policy#implies(ProtectionDomain, Permission):::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.
Policy#refresh():::Refreshes/reloads the policy configuration
PolicySpi#engineImplies(ProtectionDomain, Permission):::Check whether the policy has granted a Permission to a ProtectionDomain.
PolicySpi#engineRefresh():::Refreshes/reloads the policy configuration
PolicySpi#engineGetPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
PolicySpi#engineGetPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain
Principal#equals(Object):::Compares this principal to the specified object
Principal#toString():::Returns a string representation of this principal.
Principal#hashCode():::Returns a hashcode for this principal.
Principal#getName():::Returns the name of this principal.
Principal#implies(Subject):::Returns true if the specified subject is implied by this principal.
PrivilegedAction#run():::Performs the computation
PrivilegedActionException#getException():::Returns the exception thrown by the privileged computation that resulted in this PrivilegedActionException
PrivilegedActionException#getCause():::Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this PrivilegedActionException).
ProtectionDomain#getCodeSource():::Returns the CodeSource of this domain.
ProtectionDomain#getClassLoader():::Returns the ClassLoader of this domain.
ProtectionDomain#getPrincipals():::Returns an array of principals for this domain.
ProtectionDomain#getPermissions():::Returns the static permissions granted to this domain.
ProtectionDomain#staticPermissionsOnly():::Returns true if this domain contains only static permissions and does not check the current Policy at the time of permission checking.
ProtectionDomain#implies(Permission):::Check and see if this ProtectionDomain implies the permissions expressed in the Permission object
ProtectionDomain#impliesWithAltFilePerm(Permission):::This method has almost the same logic flow as #implies but it ensures some level of FilePermission compatibility after JDK-8164705
ProtectionDomain#toString():::Convert a ProtectionDomain to a String.
Provider#configure(String):::Apply the supplied configuration argument to this provider instance and return the configured provider
Provider#isConfigured():::Check if this provider instance has been configured.
Provider#getName():::Returns the name of this provider.
Provider#getVersion():::Returns the version number for this provider.
Provider#getVersionStr():::Returns the version string for this provider.
Provider#getInfo():::Returns a human-readable description of the provider and its services
Provider#toString():::Returns a string with the name and the version string of this provider.
Provider#clear():::Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider
Provider#load(InputStream):::Reads a property list (key and element pairs) from the input stream.
Provider#putAll(Map):::Copies all of the mappings from the specified Map to this provider
Provider#entrySet():::Returns an unmodifiable Set view of the property entries contained in this Provider.
Provider#keySet():::Returns an unmodifiable Set view of the property keys contained in this provider.
Provider#values():::Returns an unmodifiable Collection view of the property values contained in this provider.
Provider#put(Object, Object):::Sets the key property to have the specified value
Provider#putIfAbsent(Object, Object):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value
Provider#remove(Object):::Removes the key property (and its corresponding value)
Provider#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value
Provider#replace(Object, Object, Object):::Replaces the entry for the specified key only if currently mapped to the specified value
Provider#replace(Object, Object):::Replaces the entry for the specified key only if it is currently mapped to some value
Provider#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception
Provider#compute(Object, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
Provider#computeIfAbsent(Object, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null
Provider#computeIfPresent(Object, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value
Provider#merge(Object, Object, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given value
Provider#getService(String, String):::Get the service describing this Provider's implementation of the specified type of this algorithm or alias
Provider#getServices():::Get an unmodifiable Set of all services supported by this Provider.
Provider#putService(Service):::Add a service
Provider#removeService(Service):::Remove a service previously added using #putService putService()
Provider.Service#getType():::Get the type of this service
Provider.Service#getAlgorithm():::Return the name of the algorithm of this service
Provider.Service#getProvider():::Return the Provider of this service.
Provider.Service#getClassName():::Return the name of the class implementing this service.
Provider.Service#getAttribute(String):::Return the value of the specified attribute or null if this attribute is not set for this Service.
Provider.Service#newInstance(Object):::Return a new instance of the implementation described by this service
Provider.Service#supportsParameter(Object):::Test whether this Service can use the specified parameter
Provider.Service#toString():::Return a String representation of this service.
SecureClassLoader#defineClass(String, byte[], int, int, CodeSource):::Converts an array of bytes into an instance of class Class, with an optional CodeSource
SecureClassLoader#defineClass(String, java.nio.ByteBuffer, CodeSource):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with an optional CodeSource
SecureClassLoader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource object
SecureRandom#getInstance(String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
SecureRandom#getInstance(String, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
SecureRandom#getInstance(String, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
SecureRandom#getInstance(String, SecureRandomParameters):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
SecureRandom#getInstance(String, SecureRandomParameters, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
SecureRandom#getInstance(String, SecureRandomParameters, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
SecureRandom#getSecureRandomSpi():::Returns the SecureRandomSpi of this SecureRandom object.
SecureRandom#getProvider():::Returns the provider of this SecureRandom object.
SecureRandom#getAlgorithm():::Returns the name of the algorithm implemented by this SecureRandom object.
SecureRandom#toString():::Returns a Human-readable string representation of this SecureRandom.
SecureRandom#getParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance
SecureRandom#setSeed(byte[]):::Reseeds this random object with the given seed
SecureRandom#setSeed(long):::Reseeds this random object, using the eight bytes contained in the given long seed
SecureRandom#nextBytes(byte[]):::Generates a user-specified number of random bytes.
SecureRandom#nextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters.
SecureRandom#next(int):::Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)
SecureRandom#getSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
SecureRandom#generateSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
SecureRandom#getInstanceStrong():::Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property
SecureRandom#reseed():::Reseeds this SecureRandom with entropy input read from its entropy source.
SecureRandom#reseed(SecureRandomParameters):::Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters
SecureRandomSpi#engineSetSeed(byte[]):::Reseeds this random object with the given seed
SecureRandomSpi#engineNextBytes(byte[]):::Generates a user-specified number of random bytes
SecureRandomSpi#engineNextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters
SecureRandomSpi#engineGenerateSeed(int):::Returns the given number of seed bytes
SecureRandomSpi#engineReseed(SecureRandomParameters):::Reseeds this random object with entropy input read from its entropy source with additional parameters
SecureRandomSpi#engineGetParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance.
SecureRandomSpi#toString():::Returns a Human-readable string representation of this SecureRandom.
Security#getAlgorithmProperty(String, String):::Gets a specified property for an algorithm
Security#insertProviderAt(Provider, int):::Adds a new provider, at a specified position
Security#addProvider(Provider):::Adds a provider to the next position available
Security#removeProvider(String):::Removes the provider with the specified name
Security#getProviders():::Returns an array containing all the installed providers
Security#getProvider(String):::Returns the provider installed with the specified name, if any
Security#getProviders(String):::Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed
Security#getProviders(Map):::Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed
Security#getProperty(String):::Gets a security property value
Security#setProperty(String, String):::Sets a security property value
Security#getAlgorithms(String):::Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore)
Signature#getInstance(String):::Returns a Signature object that implements the specified signature algorithm
Signature#getInstance(String, String):::Returns a Signature object that implements the specified signature algorithm
Signature#getInstance(String, Provider):::Returns a Signature object that implements the specified signature algorithm
Signature#getProvider():::Returns the provider of this signature object.
Signature#initVerify(PublicKey):::Initializes this object for verification
Signature#initVerify(PublicKey, AlgorithmParameterSpec):::Initialize this object for verification
Signature#initVerify(Certificate):::Initializes this object for verification, using the public key from the given certificate
Signature#initVerify(Certificate, AlgorithmParameterSpec):::Initializes this object for verification, using the public key from the given certificate
Signature#initSign(PrivateKey):::Initialize this object for signing
Signature#initSign(PrivateKey, SecureRandom):::Initialize this object for signing
Signature#initSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initialize this object for signing
Signature#sign():::Returns the signature bytes of all the data updated
Signature#sign(byte[], int, int):::Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset
Signature#verify(byte[]):::Verifies the passed-in signature
Signature#verify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
Signature#update(byte):::Updates the data to be signed or verified by a byte.
Signature#update(byte[]):::Updates the data to be signed or verified, using the specified array of bytes.
Signature#update(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.
Signature#update(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer
Signature#getAlgorithm():::Returns the name of the algorithm for this signature object.
Signature#toString():::Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.
Signature#setParameter(String, Object):::Sets the specified algorithm parameter to the specified value
Signature#setParameter(AlgorithmParameterSpec):::Initializes this signature engine with the specified parameter set.
Signature#getParameters():::Returns the parameters used with this signature object
Signature#getParameter(String):::Gets the value of the specified algorithm parameter
Signature#clone():::Returns a clone if the implementation is cloneable.
SignatureSpi#engineInitVerify(PublicKey):::Initializes this signature object with the specified public key for verification operations.
SignatureSpi#engineInitVerify(PublicKey, AlgorithmParameterSpec):::Initializes this signature object with the specified public key for verification operations.
SignatureSpi#engineInitSign(PrivateKey):::Initializes this signature object with the specified private key for signing operations.
SignatureSpi#engineInitSign(PrivateKey, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations
SignatureSpi#engineInitSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations
SignatureSpi#engineUpdate(byte):::Updates the data to be signed or verified using the specified byte.
SignatureSpi#engineUpdate(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.
SignatureSpi#engineUpdate(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer
SignatureSpi#engineSign():::Returns the signature bytes of all the data updated so far
SignatureSpi#engineSign(byte[], int, int):::Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset
SignatureSpi#engineVerify(byte[]):::Verifies the passed-in signature.
SignatureSpi#engineVerify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
SignatureSpi#engineSetParameter(String, Object):::Sets the specified algorithm parameter to the specified value
SignatureSpi#engineSetParameter(AlgorithmParameterSpec):::This method is overridden by providers to initialize this signature engine with the specified parameter set.
SignatureSpi#engineGetParameters():::This method is overridden by providers to return the parameters used with this signature engine
SignatureSpi#engineGetParameter(String):::Gets the value of the specified algorithm parameter
SignatureSpi#clone():::Returns a clone if the implementation is cloneable.
SignedObject#getObject():::Retrieves the encapsulated object
SignedObject#getSignature():::Retrieves the signature on the signed object, in the form of a byte array.
SignedObject#getAlgorithm():::Retrieves the name of the signature algorithm.
SignedObject#verify(PublicKey, Signature):::Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.
Signer#getPrivateKey():::Returns this signer's private key
Signer#setKeyPair(KeyPair):::Sets the key pair (public key and private key) for this signer
Signer#toString():::Returns a string of information about the signer.
Timestamp#getTimestamp():::Returns the date and time when the timestamp was generated.
Timestamp#getSignerCertPath():::Returns the certificate path for the Timestamping Authority.
Timestamp#hashCode():::Returns the hash code value for this timestamp
Timestamp#equals(Object):::Tests for equality between the specified object and this timestamp
Timestamp#toString():::Returns a string describing this timestamp.
UnresolvedPermission#resolve(Permission, java.security.cert.Certificate[]):::try and resolve this permission using the class loader of the permission that was passed in.
UnresolvedPermission#implies(Permission):::This method always returns false for unresolved permissions
UnresolvedPermission#equals(Object):::Checks two UnresolvedPermission objects for equality
UnresolvedPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission
UnresolvedPermission#getUnresolvedType():::Get the type (class name) of the underlying permission that has not been resolved.
UnresolvedPermission#getUnresolvedName():::Get the target name of the underlying permission that has not been resolved.
UnresolvedPermission#getUnresolvedActions():::Get the actions for the underlying permission that has not been resolved.
UnresolvedPermission#getUnresolvedCerts():::Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.
UnresolvedPermission#toString():::Returns a string describing this UnresolvedPermission
UnresolvedPermissionCollection#add(Permission):::Adds a permission to this UnresolvedPermissionCollection
UnresolvedPermissionCollection#getUnresolvedPermissions(Permission):::get any unresolved permissions of the same type as p, and return the List containing them.
UnresolvedPermissionCollection#implies(Permission):::always returns false for unresolved permissions
UnresolvedPermissionCollection#elements():::Returns an enumeration of all the UnresolvedPermission lists in the container.
URIParameter#getURI():::Returns the URI.
DSAKey#getParams():::Returns the DSA-specific key parameters
DSAKeyPairGenerator#initialize(DSAParams, SecureRandom):::Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source
DSAKeyPairGenerator#initialize(int, boolean, SecureRandom):::Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source
DSAParams#getP():::Returns the prime, p.
DSAParams#getQ():::Returns the subprime, q.
DSAParams#getG():::Returns the base, g.
DSAPrivateKey#getX():::Returns the value of the private key, x.
DSAPublicKey#getY():::Returns the value of the public key, y.
ECKey#getParams():::Returns the domain parameters associated with this key
ECPrivateKey#getS():::Returns the private value S.
ECPublicKey#getW():::Returns the public point W.
RSAKey#getModulus():::Returns the modulus.
RSAKey#getParams():::Returns the parameters associated with this key
RSAMultiPrimePrivateCrtKey#getPublicExponent():::Returns the public exponent.
RSAMultiPrimePrivateCrtKey#getPrimeP():::Returns the primeP.
RSAMultiPrimePrivateCrtKey#getPrimeQ():::Returns the primeQ.
RSAMultiPrimePrivateCrtKey#getPrimeExponentP():::Returns the primeExponentP.
RSAMultiPrimePrivateCrtKey#getPrimeExponentQ():::Returns the primeExponentQ.
RSAMultiPrimePrivateCrtKey#getCrtCoefficient():::Returns the crtCoefficient.
RSAMultiPrimePrivateCrtKey#getOtherPrimeInfo():::Returns the otherPrimeInfo or null if there are only two prime factors (p and q).
RSAPrivateCrtKey#getPublicExponent():::Returns the public exponent.
RSAPrivateCrtKey#getPrimeP():::Returns the primeP.
RSAPrivateCrtKey#getPrimeQ():::Returns the primeQ.
RSAPrivateCrtKey#getPrimeExponentP():::Returns the primeExponentP.
RSAPrivateCrtKey#getPrimeExponentQ():::Returns the primeExponentQ.
RSAPrivateCrtKey#getCrtCoefficient():::Returns the crtCoefficient.
RSAPrivateKey#getPrivateExponent():::Returns the private exponent.
RSAPublicKey#getPublicExponent():::Returns the public exponent.
XECKey#getParams():::Returns the algorithm parameters associated with the key.
XECPrivateKey#getScalar():::Get the scalar value encoded as an unpruned byte array
XECPublicKey#getU():::Get the u coordinate of the point.
DSAGenParameterSpec#getPrimePLength():::Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.
DSAGenParameterSpec#getSubprimeQLength():::Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits.
DSAGenParameterSpec#getSeedLength():::Returns the desired length of the domain parameter seed in bits.
DSAParameterSpec#getP():::Returns the prime p.
DSAParameterSpec#getQ():::Returns the sub-prime q.
DSAParameterSpec#getG():::Returns the base g.
DSAPrivateKeySpec#getX():::Returns the private key x.
DSAPrivateKeySpec#getP():::Returns the prime p.
DSAPrivateKeySpec#getQ():::Returns the sub-prime q.
DSAPrivateKeySpec#getG():::Returns the base g.
DSAPublicKeySpec#getY():::Returns the public key y.
DSAPublicKeySpec#getP():::Returns the prime p.
DSAPublicKeySpec#getQ():::Returns the sub-prime q.
DSAPublicKeySpec#getG():::Returns the base g.
ECField#getFieldSize():::Returns the field size in bits
ECFieldF2m#getFieldSize():::Returns the field size in bits which is m for this characteristic 2 finite field.
ECFieldF2m#getM():::Returns the value m of this characteristic 2 finite field.
ECFieldF2m#getReductionPolynomial():::Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.
ECFieldF2m#getMidTermsOfReductionPolynomial():::Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.
ECFieldF2m#equals(Object):::Compares this finite field for equality with the specified object.
ECFieldF2m#hashCode():::Returns a hash code value for this characteristic 2 finite field.
ECFieldFp#getFieldSize():::Returns the field size in bits which is size of prime p for this prime finite field.
ECFieldFp#getP():::Returns the prime p of this prime finite field.
ECFieldFp#equals(Object):::Compares this prime finite field for equality with the specified object.
ECFieldFp#hashCode():::Returns a hash code value for this prime finite field.
ECParameterSpec#getCurve():::Returns the elliptic curve that this parameter defines.
ECParameterSpec#getGenerator():::Returns the generator which is also known as the base point.
ECParameterSpec#getOrder():::Returns the order of the generator.
ECParameterSpec#getCofactor():::Returns the cofactor.
ECPoint#getAffineX():::Returns the affine x-coordinate x
ECPoint#getAffineY():::Returns the affine y-coordinate y
ECPoint#equals(Object):::Compares this elliptic curve point for equality with the specified object.
ECPoint#hashCode():::Returns a hash code value for this elliptic curve point.
ECPrivateKeySpec#getS():::Returns the private value S.
ECPrivateKeySpec#getParams():::Returns the associated elliptic curve domain parameters.
ECPublicKeySpec#getW():::Returns the public point W.
ECPublicKeySpec#getParams():::Returns the associated elliptic curve domain parameters.
EllipticCurve#getField():::Returns the finite field field that this elliptic curve is over.
EllipticCurve#getA():::Returns the first coefficient a of the elliptic curve.
EllipticCurve#getB():::Returns the second coefficient b of the elliptic curve.
EllipticCurve#getSeed():::Returns the seeding bytes seed used during curve generation
EllipticCurve#equals(Object):::Compares this elliptic curve for equality with the specified object.
EllipticCurve#hashCode():::Returns a hash code value for this elliptic curve.
EncodedKeySpec#getAlgorithm():::Returns the name of the algorithm of the encoded key.
EncodedKeySpec#getEncoded():::Returns the encoded key.
EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification
MGF1ParameterSpec#getDigestAlgorithm():::Returns the algorithm name of the message digest used by the mask generation function.
NamedParameterSpec#getName():::Returns the standard name that determines the algorithm parameters.
PKCS8EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the PKCS #8 standard.
PKCS8EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.
PSSParameterSpec#getDigestAlgorithm():::Returns the message digest algorithm name.
PSSParameterSpec#getMGFAlgorithm():::Returns the mask generation function algorithm name.
PSSParameterSpec#getMGFParameters():::Returns the parameters for the mask generation function.
PSSParameterSpec#getSaltLength():::Returns the salt length in bytes.
PSSParameterSpec#getTrailerField():::Returns the value for the trailer field.
RSAKeyGenParameterSpec#getKeysize():::Returns the keysize.
RSAKeyGenParameterSpec#getPublicExponent():::Returns the public-exponent value.
RSAKeyGenParameterSpec#getKeyParams():::Returns the parameters to be associated with key.
RSAMultiPrimePrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.
RSAMultiPrimePrivateCrtKeySpec#getPrimeP():::Returns the primeP.
RSAMultiPrimePrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.
RSAMultiPrimePrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.
RSAMultiPrimePrivateCrtKeySpec#getOtherPrimeInfo():::Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).
RSAOtherPrimeInfo#getPrime():::Returns the prime.
RSAOtherPrimeInfo#getExponent():::Returns the prime's exponent.
RSAOtherPrimeInfo#getCrtCoefficient():::Returns the prime's crtCoefficient.
RSAPrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.
RSAPrivateCrtKeySpec#getPrimeP():::Returns the primeP.
RSAPrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.
RSAPrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.
RSAPrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.
RSAPrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.
RSAPrivateKeySpec#getModulus():::Returns the modulus.
RSAPrivateKeySpec#getPrivateExponent():::Returns the private exponent.
RSAPrivateKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.
RSAPublicKeySpec#getModulus():::Returns the modulus.
RSAPublicKeySpec#getPublicExponent():::Returns the public exponent.
RSAPublicKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.
X509EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the X.509 standard.
X509EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.
XECPrivateKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.
XECPrivateKeySpec#getScalar():::Get the scalar value encoded as an unpruned byte array
XECPublicKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.
XECPublicKeySpec#getU():::Get the u coordinate of the point.
Annotation#getValue():::Returns the value of the attribute, which may be null.
Annotation#toString():::Returns the String representation of this Annotation.
AttributedCharacterIterator.Attribute#equals(Object):::Compares two objects for equality
AttributedCharacterIterator.Attribute#hashCode():::Returns a hash code value for the object
AttributedCharacterIterator.Attribute#toString():::Returns a string representation of the object
AttributedCharacterIterator.Attribute#getName():::Returns the name of the attribute.
AttributedCharacterIterator.Attribute#readResolve():::Resolves instances being deserialized to the predefined constants.
AttributedCharacterIterator#getRunStart():::Returns the index of the first character of the run with respect to all attributes containing the current character
AttributedCharacterIterator#getRunStart(Attribute):::Returns the index of the first character of the run with respect to the given attribute containing the current character.
AttributedCharacterIterator#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.
AttributedCharacterIterator#getRunLimit():::Returns the index of the first character following the run with respect to all attributes containing the current character
AttributedCharacterIterator#getRunLimit(Attribute):::Returns the index of the first character following the run with respect to the given attribute containing the current character.
AttributedCharacterIterator#getRunLimit(Set):::Returns the index of the first character following the run with respect to the given attributes containing the current character.
AttributedCharacterIterator#getAttributes():::Returns a map with the attributes defined on the current character.
AttributedCharacterIterator#getAttribute(Attribute):::Returns the value of the named attribute for the current character
AttributedCharacterIterator#getAllAttributeKeys():::Returns the keys of all attributes defined on the iterator's text range
AttributedString#addAttribute(Attribute, Object):::Adds an attribute to the entire string.
AttributedString#addAttribute(Attribute, Object, int, int):::Adds an attribute to a subrange of the string.
AttributedString#addAttributes(Map, int, int):::Adds a set of attributes to a subrange of the string.
AttributedString#getIterator():::Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.
AttributedString#getIterator(Attribute[]):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
AttributedString#getIterator(Attribute[], int, int):::Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Bidi#createLineBidi(int, int):::Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi
Bidi#isMixed():::Return true if the line is not left-to-right or right-to-left
Bidi#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.
Bidi#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left.
Bidi#getLength():::Return the length of text in the line.
Bidi#baseIsLeftToRight():::Return true if the base direction is left-to-right.
Bidi#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).
Bidi#getLevelAt(int):::Return the resolved level of the character at offset
Bidi#getRunCount():::Return the number of level runs.
Bidi#getRunLevel(int):::Return the level of the nth logical run in this line.
Bidi#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.
Bidi#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line
Bidi#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis
Bidi#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels
Bidi#toString():::Display the bidi internal state, used in debugging.
BreakIterator#clone():::Create a copy of this iterator
BreakIterator#first():::Returns the first boundary
BreakIterator#last():::Returns the last boundary
BreakIterator#next(int):::Returns the nth boundary from the current boundary
BreakIterator#next():::Returns the boundary following the current boundary
BreakIterator#previous():::Returns the boundary preceding the current boundary
BreakIterator#following(int):::Returns the first boundary following the specified character offset
BreakIterator#preceding(int):::Returns the last boundary preceding the specified character offset
BreakIterator#isBoundary(int):::Returns true if the specified character offset is a text boundary.
BreakIterator#current():::Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)
BreakIterator#getText():::Get the text being scanned
BreakIterator#setText(String):::Set a new text string to be scanned
BreakIterator#setText(CharacterIterator):::Set a new text for scanning
BreakIterator#getWordInstance():::Returns a new BreakIterator instance for word breaks for the Locale#getDefault() default locale.
BreakIterator#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.
BreakIterator#getLineInstance():::Returns a new BreakIterator instance for line breaks for the Locale#getDefault() default locale.
BreakIterator#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.
BreakIterator#getCharacterInstance():::Returns a new BreakIterator instance for character breaks for the Locale#getDefault() default locale.
BreakIterator#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.
BreakIterator#getSentenceInstance():::Returns a new BreakIterator instance for sentence breaks for the Locale#getDefault() default locale.
BreakIterator#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.
BreakIterator#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
CharacterIterator#first():::Sets the position to getBeginIndex() and returns the character at that position.
CharacterIterator#last():::Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.
CharacterIterator#current():::Gets the character at the current position (as returned by getIndex()).
CharacterIterator#next():::Increments the iterator's index by one and returns the character at the new index
CharacterIterator#previous():::Decrements the iterator's index by one and returns the character at the new index
CharacterIterator#setIndex(int):::Sets the position to the specified position in the text and returns that character.
CharacterIterator#getBeginIndex():::Returns the start index of the text.
CharacterIterator#getEndIndex():::Returns the end index of the text
CharacterIterator#getIndex():::Returns the current index.
CharacterIterator#clone():::Create a copy of this iterator
CharacterIteratorFieldDelegate#getIterator(String):::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.
ChoiceFormat#applyPattern(String):::Sets the pattern.
ChoiceFormat#toPattern():::Gets the pattern.
ChoiceFormat#setChoices(double[], String[]):::Set the choices to be used in formatting.
ChoiceFormat#getLimits():::Get the limits passed in the constructor.
ChoiceFormat#getFormats():::Get the formats passed in the constructor.
ChoiceFormat#format(long, StringBuffer, FieldPosition):::Specialization of format
ChoiceFormat#format(double, StringBuffer, FieldPosition):::Returns pattern with formatted double.
ChoiceFormat#parse(String, ParsePosition):::Parses a Number from the input text.
ChoiceFormat#nextDouble(double):::Finds the least double greater than d
ChoiceFormat#previousDouble(double):::Finds the greatest double less than d
ChoiceFormat#clone():::Overrides Cloneable
ChoiceFormat#hashCode():::Generates a hash code for the message format object.
ChoiceFormat#equals(Object):::Equality comparison between two
ChoiceFormat#nextDouble(double, boolean):::Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false)
CollationElementIterator#reset():::Resets the cursor to the beginning of the string
CollationElementIterator#next():::Get the next collation element in the string
CollationElementIterator#previous():::Get the previous collation element in the string
CollationElementIterator#primaryOrder(int):::Return the primary component of a collation element.
CollationElementIterator#secondaryOrder(int):::Return the secondary component of a collation element.
CollationElementIterator#tertiaryOrder(int):::Return the tertiary component of a collation element.
CollationElementIterator#strengthOrder(int)::: Get the comparison order in the desired strength
CollationElementIterator#setOffset(int):::Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements)
CollationElementIterator#getOffset():::Returns the character offset in the original text corresponding to the next collation element
CollationElementIterator#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.
CollationElementIterator#setText(String):::Set a new string over which to iterate.
CollationElementIterator#setText(CharacterIterator):::Set a new string over which to iterate.
CollationElementIterator#isIgnorable(int)::: Check if a comparison order is ignorable.
CollationKey#compareTo(CollationKey):::Compare this CollationKey to the target CollationKey
CollationKey#getSourceString():::Returns the String that this CollationKey represents.
CollationKey#toByteArray():::Converts the CollationKey to a sequence of bits
Collator#getInstance():::Gets the Collator for the current default locale
Collator#getInstance(Locale):::Gets the Collator for the desired locale.
Collator#compare(String, String):::Compares the source string to the target string according to the collation rules for this Collator
Collator#compare(Object, Object):::Compares its two arguments for order
Collator#getCollationKey(String):::Transforms the String into a series of bits that can be compared bitwise to other CollationKeys
Collator#equals(String, String):::Convenience method for comparing the equality of two strings based on this Collator's collation rules.
Collator#getStrength():::Returns this Collator's strength property
Collator#setStrength(int):::Sets this Collator's strength property
Collator#getDecomposition():::Get the decomposition mode of this Collator
Collator#setDecomposition(int):::Set the decomposition mode of this Collator
Collator#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
Collator#clone():::Overrides Cloneable
Collator#equals(Object):::Compares the equality of two Collators.
Collator#hashCode():::Generates the hash code for this Collator.
DateFormat#format(Object, StringBuffer, FieldPosition):::Formats the given Object into a date-time string
DateFormat#format(Date, StringBuffer, FieldPosition):::Formats a Date into a date-time string
DateFormat#format(Date):::Formats a Date into a date-time string.
DateFormat#parse(String):::Parses text from the beginning of the given string to produce a date
DateFormat#parse(String, ParsePosition):::Parse a date/time string according to the given parse position
DateFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Date
DateFormat#getTimeInstance():::Gets the time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getTimeInstance(int):::Gets the time formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getTimeInstance(int, Locale):::Gets the time formatter with the given formatting style for the given locale.
DateFormat#getDateInstance():::Gets the date formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateInstance(int):::Gets the date formatter with the given formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateInstance(int, Locale):::Gets the date formatter with the given formatting style for the given locale.
DateFormat#getDateTimeInstance():::Gets the date/time formatter with the default formatting style for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateTimeInstance(int, int):::Gets the date/time formatter with the given date and time formatting styles for the default java.util.Locale.Category#FORMAT FORMAT locale
DateFormat#getDateTimeInstance(int, int, Locale):::Gets the date/time formatter with the given formatting styles for the given locale.
DateFormat#getInstance():::Get a default date/time formatter that uses the SHORT style for both the date and the time.
DateFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
DateFormat#setCalendar(Calendar):::Set the calendar to be used by this date format
DateFormat#getCalendar():::Gets the calendar associated with this date/time formatter.
DateFormat#setNumberFormat(NumberFormat):::Allows you to set the number formatter.
DateFormat#getNumberFormat():::Gets the number formatter which this date/time formatter uses to format and parse a time.
DateFormat#setTimeZone(TimeZone):::Sets the time zone for the calendar of this DateFormat object
DateFormat#getTimeZone():::Gets the time zone
DateFormat#setLenient(boolean):::Specify whether or not date/time parsing is to be lenient
DateFormat#isLenient():::Tell whether date/time parsing is to be lenient
DateFormat#hashCode():::Overrides hashCode
DateFormat#equals(Object):::Overrides equals
DateFormat#clone():::Overrides Cloneable
DateFormat.Field#ofCalendarField(int):::Returns the Field constant that corresponds to the Calendar constant calendarField
DateFormat.Field#getCalendarField():::Returns the Calendar field associated with this attribute
DateFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
DateFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
DateFormatSymbols#getInstance():::Gets the DateFormatSymbols instance for the default locale
DateFormatSymbols#getInstance(Locale):::Gets the DateFormatSymbols instance for the specified locale
DateFormatSymbols#getInstanceRef(Locale):::Returns a DateFormatSymbols provided by a provider or found in the cache
DateFormatSymbols#getEras():::Gets era strings
DateFormatSymbols#setEras(String[]):::Sets era strings
DateFormatSymbols#getMonths():::Gets month strings
DateFormatSymbols#setMonths(String[]):::Sets month strings
DateFormatSymbols#getShortMonths():::Gets short month strings
DateFormatSymbols#setShortMonths(String[]):::Sets short month strings
DateFormatSymbols#getWeekdays():::Gets weekday strings
DateFormatSymbols#setWeekdays(String[]):::Sets weekday strings
DateFormatSymbols#getShortWeekdays():::Gets short weekday strings
DateFormatSymbols#setShortWeekdays(String[]):::Sets short weekday strings
DateFormatSymbols#getAmPmStrings():::Gets ampm strings
DateFormatSymbols#setAmPmStrings(String[]):::Sets ampm strings
DateFormatSymbols#getZoneStrings():::Gets time zone strings
DateFormatSymbols#setZoneStrings(String[][]):::Sets time zone strings
DateFormatSymbols#getLocalPatternChars():::Gets localized date-time pattern characters
DateFormatSymbols#setLocalPatternChars(String):::Sets localized date-time pattern characters
DateFormatSymbols#clone():::Overrides Cloneable
DateFormatSymbols#hashCode():::Override hashCode
DateFormatSymbols#equals(Object):::Override equals
DateFormatSymbols#getZoneIndex(String):::Package private: used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting
DateFormatSymbols#getZoneStringsWrapper():::Wrapper method to the getZoneStrings(), which is called from inside the java.text package and not to mutate the returned arrays, so that it does not need to create a defensive copy.
DecimalFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer
DecimalFormat#format(double, StringBuffer, FieldPosition):::Formats a double to produce a string.
DecimalFormat#format(long, StringBuffer, FieldPosition):::Format a long to produce a string.
DecimalFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
DecimalFormat#fastFormat(double):::A fast-path shortcut of format(double) to be called by NumberFormat, or by format(double, ...) public methods
DecimalFormat#parse(String, ParsePosition):::Parses text from a string to produce a Number
DecimalFormat#getDecimalFormatSymbols():::Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.
DecimalFormat#setDecimalFormatSymbols(DecimalFormatSymbols):::Sets the decimal format symbols, which is generally not changed by the programmer or user.
DecimalFormat#getPositivePrefix():::Get the positive prefix
DecimalFormat#setPositivePrefix(String):::Set the positive prefix
DecimalFormat#getNegativePrefix():::Get the negative prefix
DecimalFormat#setNegativePrefix(String):::Set the negative prefix
DecimalFormat#getPositiveSuffix():::Get the positive suffix
DecimalFormat#setPositiveSuffix(String):::Set the positive suffix
DecimalFormat#getNegativeSuffix():::Get the negative suffix
DecimalFormat#setNegativeSuffix(String):::Set the negative suffix
DecimalFormat#getMultiplier():::Gets the multiplier for use in percent, per mille, and similar formats.
DecimalFormat#setMultiplier(int):::Sets the multiplier for use in percent, per mille, and similar formats
DecimalFormat#getGroupingSize():::Return the grouping size
DecimalFormat#setGroupingSize(int):::Set the grouping size
DecimalFormat#isDecimalSeparatorAlwaysShown():::Allows you to get the behavior of the decimal separator with integers
DecimalFormat#setDecimalSeparatorAlwaysShown(boolean):::Allows you to set the behavior of the decimal separator with integers
DecimalFormat#isParseBigDecimal():::Returns whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal
DecimalFormat#setParseBigDecimal(boolean):::Sets whether the #parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.
DecimalFormat#clone():::Standard override; no change in semantics.
DecimalFormat#equals(Object):::Overrides equals
DecimalFormat#hashCode():::Overrides hashCode
DecimalFormat#toPattern():::Synthesizes a pattern string that represents the current state of this Format object.
DecimalFormat#toLocalizedPattern():::Synthesizes a localized pattern string that represents the current state of this Format object.
DecimalFormat#applyPattern(String):::Apply the given pattern to this Format object
DecimalFormat#applyLocalizedPattern(String):::Apply the given pattern to this Format object
DecimalFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number
DecimalFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number
DecimalFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number
DecimalFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number
DecimalFormat#getMaximumIntegerDigits():::Gets the maximum number of digits allowed in the integer portion of a number
DecimalFormat#getMinimumIntegerDigits():::Gets the minimum number of digits allowed in the integer portion of a number
DecimalFormat#getMaximumFractionDigits():::Gets the maximum number of digits allowed in the fraction portion of a number
DecimalFormat#getMinimumFractionDigits():::Gets the minimum number of digits allowed in the fraction portion of a number
DecimalFormat#getCurrency():::Gets the currency used by this decimal format when formatting currency values
DecimalFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values
DecimalFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this DecimalFormat.
DecimalFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this DecimalFormat.
DecimalFormatSymbols#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
DecimalFormatSymbols#getInstance():::Gets the DecimalFormatSymbols instance for the default locale
DecimalFormatSymbols#getInstance(Locale):::Gets the DecimalFormatSymbols instance for the specified locale
DecimalFormatSymbols#getZeroDigit():::Gets the character used for zero
DecimalFormatSymbols#setZeroDigit(char):::Sets the character used for zero
DecimalFormatSymbols#getGroupingSeparator():::Gets the character used for thousands separator
DecimalFormatSymbols#setGroupingSeparator(char):::Sets the character used for thousands separator
DecimalFormatSymbols#getDecimalSeparator():::Gets the character used for decimal sign
DecimalFormatSymbols#setDecimalSeparator(char):::Sets the character used for decimal sign
DecimalFormatSymbols#getPerMill():::Gets the character used for per mille sign
DecimalFormatSymbols#setPerMill(char):::Sets the character used for per mille sign
DecimalFormatSymbols#getPercent():::Gets the character used for percent sign
DecimalFormatSymbols#setPercent(char):::Sets the character used for percent sign
DecimalFormatSymbols#getDigit():::Gets the character used for a digit in a pattern.
DecimalFormatSymbols#setDigit(char):::Sets the character used for a digit in a pattern.
DecimalFormatSymbols#getPatternSeparator():::Gets the character used to separate positive and negative subpatterns in a pattern.
DecimalFormatSymbols#setPatternSeparator(char):::Sets the character used to separate positive and negative subpatterns in a pattern.
DecimalFormatSymbols#getInfinity():::Gets the string used to represent infinity
DecimalFormatSymbols#setInfinity(String):::Sets the string used to represent infinity
DecimalFormatSymbols#getNaN():::Gets the string used to represent "not a number"
DecimalFormatSymbols#setNaN(String):::Sets the string used to represent "not a number"
DecimalFormatSymbols#getMinusSign():::Gets the character used to represent minus sign
DecimalFormatSymbols#setMinusSign(char):::Sets the character used to represent minus sign
DecimalFormatSymbols#getCurrencySymbol():::Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.
DecimalFormatSymbols#setCurrencySymbol(String):::Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.
DecimalFormatSymbols#getInternationalCurrencySymbol():::Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.
DecimalFormatSymbols#setInternationalCurrencySymbol(String):::Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols
DecimalFormatSymbols#getCurrency():::Gets the currency of these DecimalFormatSymbols
DecimalFormatSymbols#setCurrency(Currency):::Sets the currency of these DecimalFormatSymbols
DecimalFormatSymbols#getMonetaryDecimalSeparator():::Returns the monetary decimal separator.
DecimalFormatSymbols#setMonetaryDecimalSeparator(char):::Sets the monetary decimal separator.
DecimalFormatSymbols#getExponentialSymbol():::Returns the character used to separate the mantissa from the exponent.
DecimalFormatSymbols#getExponentSeparator():::Returns the string used to separate the mantissa from the exponent
DecimalFormatSymbols#setExponentialSymbol(char):::Sets the character used to separate the mantissa from the exponent.
DecimalFormatSymbols#setExponentSeparator(String):::Sets the string used to separate the mantissa from the exponent
DecimalFormatSymbols#clone():::Standard override.
DecimalFormatSymbols#equals(Object):::Override equals.
DecimalFormatSymbols#hashCode():::Override hashCode.
DigitList#isZero():::Return true if the represented number is zero.
DigitList#setRoundingMode(RoundingMode):::Set the rounding mode
DigitList#clear():::Clears out the digits
DigitList#append(char):::Appends a digit to the list, extending the list when necessary.
DigitList#getDouble():::Utility routine to get the value of the digit list If (count == 0) this throws a NumberFormatException, which mimics Long.parseLong().
DigitList#getLong():::Utility routine to get the value of the digit list
DigitList#fitsIntoLong(boolean, boolean):::Return true if the number represented by this object can fit into a long.
DigitList#set(boolean, double, int):::Set the digit list to a representation of the given double value
DigitList#set(boolean, double, int, boolean):::Set the digit list to a representation of the given double value
DigitList#set(boolean, long):::Utility routine to set the value of the digit list from a long
DigitList#set(boolean, long, int):::Set the digit list to a representation of the given long value.
DigitList#set(boolean, BigDecimal, int, boolean):::Set the digit list to a representation of the given BigDecimal value
DigitList#set(boolean, BigInteger, int):::Set the digit list to a representation of the given BigInteger value.
DigitList#equals(Object):::equality test between two digit lists.
DigitList#hashCode():::Generates the hash code for the digit list.
DigitList#clone():::Creates a copy of this object.
FieldPosition#getFieldAttribute():::Returns the field identifier as an attribute constant from one of the Field subclasses
FieldPosition#getField():::Retrieves the field identifier.
FieldPosition#getBeginIndex():::Retrieves the index of the first character in the requested field.
FieldPosition#getEndIndex():::Retrieves the index of the character following the last character in the requested field.
FieldPosition#setBeginIndex(int):::Sets the begin index
FieldPosition#setEndIndex(int):::Sets the end index
FieldPosition#getFieldDelegate():::Returns a Format.FieldDelegate instance that is associated with the FieldPosition
FieldPosition#equals(Object):::Overrides equals
FieldPosition#hashCode():::Returns a hash code for this FieldPosition.
FieldPosition#toString():::Return a string representation of this FieldPosition.
Format#format(Object):::Formats an object to produce a string
Format#format(Object, StringBuffer, FieldPosition):::Formats an object and appends the resulting text to a given string buffer
Format#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
Format#parseObject(String, ParsePosition):::Parses text from a string to produce an object
Format#parseObject(String):::Parses text from the beginning of the given string to produce an object
Format#clone():::Creates and returns a copy of this object.
Format#createAttributedCharacterIterator(String):::Creates an AttributedCharacterIterator for the String s.
Format#createAttributedCharacterIterator(AttributedCharacterIterator[]):::Creates an AttributedCharacterIterator containing the concatenated contents of the passed in AttributedCharacterIterators.
Format#createAttributedCharacterIterator(String, AttributedCharacterIterator.Attribute, Object):::Returns an AttributedCharacterIterator with the String string and additional key/value pair key, value.
Format#createAttributedCharacterIterator(AttributedCharacterIterator, AttributedCharacterIterator.Attribute, Object):::Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value.
Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted
Format.FieldDelegate#formatted(int, Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted.
MergeCollation#getPattern():::recovers current pattern
MergeCollation#getPattern(boolean):::recovers current pattern.
MergeCollation#emitPattern():::emits the pattern for collation builder.
MergeCollation#emitPattern(boolean):::emits the pattern for collation builder.
MergeCollation#setPattern(String):::sets the pattern.
MergeCollation#addPattern(String):::adds a pattern to the current one.
MergeCollation#getCount():::gets count of separate entries
MergeCollation#getItemAt(int):::gets count of separate entries
MessageFormat#setLocale(Locale):::Sets the locale to be used when creating or comparing subformats
MessageFormat#getLocale():::Gets the locale that's used when creating or comparing subformats.
MessageFormat#applyPattern(String):::Sets the pattern used by this message format
MessageFormat#toPattern():::Returns a pattern representing the current state of the message format
MessageFormat#setFormatsByArgumentIndex(Format[]):::Sets the formats to use for the values passed into format methods or returned from parse methods
MessageFormat#setFormats(Format[]):::Sets the formats to use for the format elements in the previously set pattern string
MessageFormat#setFormatByArgumentIndex(int, Format):::Sets the format to use for the format elements within the previously set pattern string that use the given argument index
MessageFormat#setFormat(int, Format):::Sets the format to use for the format element with the given format element index within the previously set pattern string
MessageFormat#getFormatsByArgumentIndex():::Gets the formats used for the values passed into format methods or returned from parse methods
MessageFormat#getFormats():::Gets the formats used for the format elements in the previously set pattern string
MessageFormat#format(Object[], StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
MessageFormat#format(String, Object...):::Creates a MessageFormat with the given pattern and uses it to format the given arguments
MessageFormat#format(Object, StringBuffer, FieldPosition):::Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer
MessageFormat#formatToCharacterIterator(Object):::Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator
MessageFormat#parse(String, ParsePosition):::Parses the string
MessageFormat#parse(String):::Parses text from the beginning of the given string to produce an object array
MessageFormat#parseObject(String, ParsePosition):::Parses text from a string to produce an object array
MessageFormat#clone():::Creates and returns a copy of this object.
MessageFormat#equals(Object):::Equality comparison between two message format objects
MessageFormat#hashCode():::Generates a hash code for the message format object.
MessageFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
Normalizer#normalize(CharSequence, Form):::Normalize a sequence of char values
Normalizer#isNormalized(CharSequence, Form):::Determines if the given sequence of char values is normalized.
NumberFormat#format(Object, StringBuffer, FieldPosition):::Formats a number and appends the resulting text to the given string buffer
NumberFormat#parseObject(String, ParsePosition):::Parses text from a string to produce a Number
NumberFormat#format(double):::Specialization of format.
NumberFormat#format(long):::Specialization of format.
NumberFormat#format(double, StringBuffer, FieldPosition):::Specialization of format.
NumberFormat#format(long, StringBuffer, FieldPosition):::Specialization of format.
NumberFormat#parse(String, ParsePosition):::Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double
NumberFormat#parse(String):::Parses text from the beginning of the given string to produce a number
NumberFormat#isParseIntegerOnly():::Returns true if this format will parse numbers as integers only
NumberFormat#setParseIntegerOnly(boolean):::Sets whether or not numbers should be parsed as integers only.
NumberFormat#getInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getInstance(Locale):::Returns a general-purpose number format for the specified locale
NumberFormat#getNumberInstance():::Returns a general-purpose number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getNumberInstance(Locale):::Returns a general-purpose number format for the specified locale.
NumberFormat#getIntegerInstance():::Returns an integer number format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getIntegerInstance(Locale):::Returns an integer number format for the specified locale
NumberFormat#getCurrencyInstance():::Returns a currency format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getCurrencyInstance(Locale):::Returns a currency format for the specified locale.
NumberFormat#getPercentInstance():::Returns a percentage format for the current default java.util.Locale.Category#FORMAT FORMAT locale
NumberFormat#getPercentInstance(Locale):::Returns a percentage format for the specified locale.
NumberFormat#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
NumberFormat#hashCode():::Overrides hashCode.
NumberFormat#equals(Object):::Overrides equals.
NumberFormat#clone():::Overrides Cloneable.
NumberFormat#isGroupingUsed():::Returns true if grouping is used in this format
NumberFormat#setGroupingUsed(boolean):::Set whether or not grouping will be used in this format.
NumberFormat#getMaximumIntegerDigits():::Returns the maximum number of digits allowed in the integer portion of a number.
NumberFormat#setMaximumIntegerDigits(int):::Sets the maximum number of digits allowed in the integer portion of a number
NumberFormat#getMinimumIntegerDigits():::Returns the minimum number of digits allowed in the integer portion of a number.
NumberFormat#setMinimumIntegerDigits(int):::Sets the minimum number of digits allowed in the integer portion of a number
NumberFormat#getMaximumFractionDigits():::Returns the maximum number of digits allowed in the fraction portion of a number.
NumberFormat#setMaximumFractionDigits(int):::Sets the maximum number of digits allowed in the fraction portion of a number
NumberFormat#getMinimumFractionDigits():::Returns the minimum number of digits allowed in the fraction portion of a number.
NumberFormat#setMinimumFractionDigits(int):::Sets the minimum number of digits allowed in the fraction portion of a number
NumberFormat#getCurrency():::Gets the currency used by this number format when formatting currency values
NumberFormat#setCurrency(Currency):::Sets the currency used by this number format when formatting currency values
NumberFormat#getRoundingMode():::Gets the java.math.RoundingMode used in this NumberFormat
NumberFormat#setRoundingMode(RoundingMode):::Sets the java.math.RoundingMode used in this NumberFormat
NumberFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
ParseException#getErrorOffset():::Returns the position where the error was found.
ParsePosition#getIndex():::Retrieve the current parse position
ParsePosition#setIndex(int):::Set the current parse position.
ParsePosition#setErrorIndex(int):::Set the index at which a parse error occurred
ParsePosition#getErrorIndex():::Retrieve the index at which an error occurred, or -1 if the error index has not been set.
ParsePosition#equals(Object):::Overrides equals
ParsePosition#hashCode():::Returns a hash code for this ParsePosition.
ParsePosition#toString():::Return a string representation of this ParsePosition.
PatternEntry#appendQuotedExtension(StringBuffer):::Gets the current extension, quoted
PatternEntry#appendQuotedChars(StringBuffer):::Gets the current chars, quoted
PatternEntry#equals(Object):::WARNING this is used for searching in a Vector
PatternEntry#toString():::For debugging.
PatternEntry#getStrength():::Gets the strength of the entry.
PatternEntry#getExtension():::Gets the expanding characters of the entry.
PatternEntry#getChars():::Gets the core characters of the entry.
RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short):::This function is used by RBTableBuilder to fill in all the members of this object
RBCollationTables#getRules():::Gets the table-based rules for the collation object.
RBCollationTables#getContractValues(int)::: Get the entry of hash table of the contracting string in the collation  table.
RBCollationTables#usedInContractSeq(int):::Returns true if this character appears anywhere in a contracting character sequence
RBCollationTables#getMaxExpansion(int):::Return the maximum length of any expansion sequences that end with the specified comparison order.
RBCollationTables#getExpandValueList(int):::Get the entry of hash table of the expanding string in the collation table.
RBCollationTables#getUnicodeOrder(int):::Get the comarison order of a character from the collation table.
RuleBasedCollationKey#compareTo(CollationKey):::Compare this RuleBasedCollationKey to target
RuleBasedCollationKey#equals(Object):::Compare this RuleBasedCollationKey and the target for equality
RuleBasedCollationKey#hashCode():::Creates a hash code for this RuleBasedCollationKey
RuleBasedCollationKey#toByteArray():::Converts the RuleBasedCollationKey to a sequence of bits
RuleBasedCollator#getRules():::Gets the table-based rules for the collation object.
RuleBasedCollator#getCollationElementIterator(String):::Returns a CollationElementIterator for the given String.
RuleBasedCollator#getCollationElementIterator(CharacterIterator):::Returns a CollationElementIterator for the given CharacterIterator.
RuleBasedCollator#compare(String, String):::Compares the character data stored in two different strings based on the collation rules
RuleBasedCollator#getCollationKey(String):::Transforms the string into a series of characters that can be compared with CollationKey.compareTo
RuleBasedCollator#clone():::Standard override; no change in semantics.
RuleBasedCollator#equals(Object):::Compares the equality of two collation objects.
RuleBasedCollator#hashCode():::Generates the hash code for the table-based collation object
RuleBasedCollator#getTables():::Allows CollationElementIterator access to the tables object
SimpleDateFormat#set2DigitYearStart(Date):::Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.
SimpleDateFormat#get2DigitYearStart():::Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.
SimpleDateFormat#format(Date, StringBuffer, FieldPosition):::Formats the given Date into a date/time string and appends the result to the given StringBuffer.
SimpleDateFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
SimpleDateFormat#parse(String, ParsePosition):::Parses text from a string to produce a Date
SimpleDateFormat#toPattern():::Returns a pattern string describing this date format.
SimpleDateFormat#toLocalizedPattern():::Returns a localized pattern string describing this date format.
SimpleDateFormat#applyPattern(String):::Applies the given pattern string to this date format.
SimpleDateFormat#applyLocalizedPattern(String):::Applies the given localized pattern string to this date format.
SimpleDateFormat#getDateFormatSymbols():::Gets a copy of the date and time format symbols of this date format.
SimpleDateFormat#setDateFormatSymbols(DateFormatSymbols):::Sets the date and time format symbols of this date format.
SimpleDateFormat#clone():::Creates a copy of this SimpleDateFormat
SimpleDateFormat#hashCode():::Returns the hash code value for this SimpleDateFormat object.
SimpleDateFormat#equals(Object):::Compares the given object with this SimpleDateFormat for equality.
StringCharacterIterator#setText(String):::Reset this iterator to point to a new string
StringCharacterIterator#first():::Implements CharacterIterator.first() for String.
StringCharacterIterator#last():::Implements CharacterIterator.last() for String.
StringCharacterIterator#setIndex(int):::Implements CharacterIterator.setIndex() for String.
StringCharacterIterator#current():::Implements CharacterIterator.current() for String.
StringCharacterIterator#next():::Implements CharacterIterator.next() for String.
StringCharacterIterator#previous():::Implements CharacterIterator.previous() for String.
StringCharacterIterator#getBeginIndex():::Implements CharacterIterator.getBeginIndex() for String.
StringCharacterIterator#getEndIndex():::Implements CharacterIterator.getEndIndex() for String.
StringCharacterIterator#getIndex():::Implements CharacterIterator.getIndex() for String.
StringCharacterIterator#equals(Object):::Compares the equality of two StringCharacterIterator objects.
StringCharacterIterator#hashCode():::Computes a hashcode for this iterator.
StringCharacterIterator#clone():::Creates a copy of this iterator.
BreakIteratorProvider#getWordInstance(Locale):::Returns a new BreakIterator instance for word breaks for the given locale.
BreakIteratorProvider#getLineInstance(Locale):::Returns a new BreakIterator instance for line breaks for the given locale.
BreakIteratorProvider#getCharacterInstance(Locale):::Returns a new BreakIterator instance for character breaks for the given locale.
BreakIteratorProvider#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.
CollatorProvider#getInstance(Locale):::Returns a new Collator instance for the specified locale.
DateFormatProvider#getTimeInstance(int, Locale):::Returns a new DateFormat instance which formats time with the given formatting style for the specified locale.
DateFormatProvider#getDateInstance(int, Locale):::Returns a new DateFormat instance which formats date with the given formatting style for the specified locale.
DateFormatProvider#getDateTimeInstance(int, int, Locale):::Returns a new DateFormat instance which formats date and time with the given formatting style for the specified locale.
DateFormatSymbolsProvider#getInstance(Locale):::Returns a new DateFormatSymbols instance for the specified locale.
DecimalFormatSymbolsProvider#getInstance(Locale):::Returns a new DecimalFormatSymbols instance for the specified locale.
NumberFormatProvider#getCurrencyInstance(Locale):::Returns a new NumberFormat instance which formats monetary values for the specified locale.
NumberFormatProvider#getIntegerInstance(Locale):::Returns a new NumberFormat instance which formats integer values for the specified locale
NumberFormatProvider#getNumberInstance(Locale):::Returns a new general-purpose NumberFormat instance for the specified locale.
NumberFormatProvider#getPercentInstance(Locale):::Returns a new NumberFormat instance which formats percentage values for the specified locale.
AbstractChronology#registerChrono(Chronology):::Register a Chronology by its ID and type for lookup by #of(String)
AbstractChronology#registerChrono(Chronology, String):::Register a Chronology by ID and type for lookup by #of(String)
AbstractChronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale
AbstractChronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type
AbstractChronology#getAvailableChronologies():::Returns the available chronologies
AbstractChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing
AbstractChronology#addFieldValue(Map, ChronoField, long):::Adds a field-value pair to the map, checking for conflicts
AbstractChronology#compareTo(Chronology):::Compares this chronology to another chronology
AbstractChronology#equals(Object):::Checks if this chronology is equal to another chronology
AbstractChronology#hashCode():::A hash code for this chronology
AbstractChronology#toString():::Outputs this chronology as a String, using the chronology ID.
AbstractChronology#writeReplace():::Writes the Chronology using a dedicated serialized form
ChronoLocalDate#timeLineOrder():::Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology
ChronoLocalDate#from(TemporalAccessor):::Obtains an instance of ChronoLocalDate from a temporal object
ChronoLocalDate#getChronology():::Gets the chronology of this date
ChronoLocalDate#getEra():::Gets the era, as defined by the chronology
ChronoLocalDate#isLeapYear():::Checks if the year is a leap year, as defined by the calendar system
ChronoLocalDate#lengthOfMonth():::Returns the length of the month represented by this date, as defined by the calendar system
ChronoLocalDate#lengthOfYear():::Returns the length of the year represented by this date, as defined by the calendar system
ChronoLocalDate#isSupported(TemporalField):::Checks if the specified field is supported
ChronoLocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported
ChronoLocalDate#query(TemporalQuery):::Queries this date using the specified query
ChronoLocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object
ChronoLocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit
ChronoLocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a ChronoPeriod
ChronoLocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter
ChronoLocalDate#atTime(LocalTime):::Combines this date with a time to create a ChronoLocalDateTime
ChronoLocalDate#toEpochDay():::Converts this date to the Epoch Day
ChronoLocalDate#compareTo(ChronoLocalDate):::Compares this date to another date, including the chronology
ChronoLocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date ignoring the chronology
ChronoLocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date ignoring the chronology
ChronoLocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date ignoring the chronology
ChronoLocalDate#equals(Object):::Checks if this date is equal to another date, including the chronology
ChronoLocalDate#hashCode():::A hash code for this date.
ChronoLocalDate#toString():::Outputs this date as a String
ChronoLocalDateImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDate ensuring it bas the specified chronology.
ChronoLocalDateImpl#plusYears(long):::Returns a copy of this date with the specified number of years added
ChronoLocalDateImpl#plusMonths(long):::Returns a copy of this date with the specified number of months added
ChronoLocalDateImpl#plusWeeks(long):::Returns a copy of this date with the specified number of weeks added
ChronoLocalDateImpl#plusDays(long):::Returns a copy of this date with the specified number of days added
ChronoLocalDateImpl#minusYears(long):::Returns a copy of this date with the specified number of years subtracted
ChronoLocalDateImpl#minusMonths(long):::Returns a copy of this date with the specified number of months subtracted
ChronoLocalDateImpl#minusWeeks(long):::Returns a copy of this date with the specified number of weeks subtracted
ChronoLocalDateImpl#minusDays(long):::Returns a copy of this date with the specified number of days subtracted
ChronoLocalDateTime#timeLineOrder():::Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology
ChronoLocalDateTime#from(TemporalAccessor):::Obtains an instance of ChronoLocalDateTime from a temporal object
ChronoLocalDateTime#getChronology():::Gets the chronology of this date-time
ChronoLocalDateTime#toLocalDate():::Gets the local date part of this date-time
ChronoLocalDateTime#toLocalTime():::Gets the local time part of this date-time
ChronoLocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported
ChronoLocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
ChronoLocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query
ChronoLocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object
ChronoLocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
ChronoLocalDateTime#atZone(ZoneId):::Combines this time with a time-zone to create a ChronoZonedDateTime
ChronoLocalDateTime#toInstant(ZoneOffset):::Converts this date-time to an Instant
ChronoLocalDateTime#toEpochSecond(ZoneOffset):::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
ChronoLocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time, including the chronology
ChronoLocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time ignoring the chronology
ChronoLocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time ignoring the chronology
ChronoLocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time ignoring the chronology
ChronoLocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time, including the chronology
ChronoLocalDateTime#hashCode():::A hash code for this date-time.
ChronoLocalDateTime#toString():::Outputs this date-time as a String
ChronoLocalDateTimeImpl#of(R, LocalTime):::Obtains an instance of ChronoLocalDateTime from a date and time.
ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDateTime ensuring it bas the specified chronology.
Chronology#from(TemporalAccessor):::Obtains an instance of Chronology from a temporal object
Chronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale
Chronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type
Chronology#getAvailableChronologies():::Returns the available chronologies
Chronology#getId():::Gets the ID of the chronology
Chronology#getCalendarType():::Gets the calendar type of the calendar system
Chronology#date(Era, int, int, int):::Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.
Chronology#date(int, int, int):::Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.
Chronology#dateYearDay(Era, int, int):::Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.
Chronology#dateYearDay(int, int):::Obtains a local date in this chronology from the proleptic-year and day-of-year fields.
Chronology#dateEpochDay(long):::Obtains a local date in this chronology from the epoch-day
Chronology#dateNow():::Obtains the current local date in this chronology from the system clock in the default time-zone
Chronology#dateNow(ZoneId):::Obtains the current local date in this chronology from the system clock in the specified time-zone
Chronology#dateNow(Clock):::Obtains the current local date in this chronology from the specified clock
Chronology#date(TemporalAccessor):::Obtains a local date in this chronology from another temporal object
Chronology#localDateTime(TemporalAccessor):::Obtains a local date-time in this chronology from another temporal object
Chronology#zonedDateTime(TemporalAccessor):::Obtains a ChronoZonedDateTime in this chronology from another temporal object
Chronology#zonedDateTime(Instant, ZoneId):::Obtains a ChronoZonedDateTime in this chronology from an Instant
Chronology#isLeapYear(long):::Checks if the specified year is a leap year
Chronology#prolepticYear(Era, int):::Calculates the proleptic-year given the era and year-of-era
Chronology#eraOf(int):::Creates the chronology era object from the numeric value
Chronology#eras():::Gets the list of eras for the chronology
Chronology#range(ChronoField):::Gets the range of valid values for the specified field
Chronology#getDisplayName(TextStyle, Locale):::Gets the textual representation of this chronology
Chronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing
Chronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days
Chronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
Chronology#compareTo(Chronology):::Compares this chronology to another chronology
Chronology#equals(Object):::Checks if this chronology is equal to another chronology
Chronology#hashCode():::A hash code for this chronology
Chronology#toString():::Outputs this chronology as a String
ChronoPeriod#between(ChronoLocalDate, ChronoLocalDate):::Obtains a ChronoPeriod consisting of amount of time between two dates
ChronoPeriod#get(TemporalUnit):::Gets the value of the requested unit
ChronoPeriod#getUnits():::Gets the set of units supported by this period
ChronoPeriod#getChronology():::Gets the chronology that defines the meaning of the supported units
ChronoPeriod#isZero():::Checks if all the supported units of this period are zero.
ChronoPeriod#isNegative():::Checks if any of the supported units of this period are negative.
ChronoPeriod#plus(TemporalAmount):::Returns a copy of this period with the specified period added
ChronoPeriod#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted
ChronoPeriod#multipliedBy(int):::Returns a new instance with each amount in this period in this period multiplied by the specified scalar
ChronoPeriod#negated():::Returns a new instance with each amount in this period negated
ChronoPeriod#normalized():::Returns a copy of this period with the amounts of each unit normalized
ChronoPeriod#addTo(Temporal):::Adds this period to the specified temporal object
ChronoPeriod#subtractFrom(Temporal):::Subtracts this period from the specified temporal object
ChronoPeriod#equals(Object):::Checks if this period is equal to another period, including the chronology
ChronoPeriod#hashCode():::A hash code for this period.
ChronoPeriod#toString():::Outputs this period as a String
ChronoPeriodImpl#writeReplace():::Writes the Chronology using a dedicated serialized form
ChronoZonedDateTime#timeLineOrder():::Gets a comparator that compares ChronoZonedDateTime in time-line order ignoring the chronology
ChronoZonedDateTime#from(TemporalAccessor):::Obtains an instance of ChronoZonedDateTime from a temporal object
ChronoZonedDateTime#toLocalDate():::Gets the local date part of this date-time
ChronoZonedDateTime#toLocalTime():::Gets the local time part of this date-time
ChronoZonedDateTime#toLocalDateTime():::Gets the local date-time part of this date-time
ChronoZonedDateTime#getChronology():::Gets the chronology of this date-time
ChronoZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00'
ChronoZonedDateTime#getZone():::Gets the zone ID, such as 'Europe/Paris'
ChronoZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
ChronoZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
ChronoZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
ChronoZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant
ChronoZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported
ChronoZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
ChronoZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query
ChronoZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
ChronoZonedDateTime#toInstant():::Converts this date-time to an Instant
ChronoZonedDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
ChronoZonedDateTime#compareTo(ChronoZonedDateTime):::Compares this date-time to another date-time, including the chronology
ChronoZonedDateTime#isBefore(ChronoZonedDateTime):::Checks if the instant of this date-time is before that of the specified date-time
ChronoZonedDateTime#isAfter(ChronoZonedDateTime):::Checks if the instant of this date-time is after that of the specified date-time
ChronoZonedDateTime#isEqual(ChronoZonedDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time
ChronoZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time
ChronoZonedDateTime#hashCode():::A hash code for this date-time.
ChronoZonedDateTime#toString():::Outputs this date-time as a String
ChronoZonedDateTimeImpl#ofBest(ChronoLocalDateTimeImpl, ZoneId, ZoneOffset):::Obtains an instance from a local date-time using the preferred offset if possible.
ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId):::Obtains an instance from an instant using the specified time-zone.
ChronoZonedDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoZonedDateTimeImpl ensuring it bas the specified chronology.
Era#getValue():::Gets the numeric value associated with the era as defined by the chronology
Era#isSupported(TemporalField):::Checks if the specified field is supported
Era#range(TemporalField):::Gets the range of valid values for the specified field
Era#get(TemporalField):::Gets the value of the specified field from this era as an int
Era#getLong(TemporalField):::Gets the value of the specified field from this era as a long
Era#query(TemporalQuery):::Queries this era using the specified query
Era#adjustInto(Temporal):::Adjusts the specified temporal object to have the same era as this object
Era#getDisplayName(TextStyle, Locale):::Gets the textual representation of this era
HijrahChronology#getId():::Gets the ID of the chronology
HijrahChronology#getCalendarType():::Gets the calendar type of the Islamic calendar
HijrahChronology#date(Era, int, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields.
HijrahChronology#date(int, int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.
HijrahChronology#dateYearDay(Era, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields.
HijrahChronology#dateYearDay(int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields.
HijrahChronology#dateEpochDay(long):::Obtains a local date in the Hijrah calendar system from the epoch-day.
HijrahChronology#eraOf(int):::Creates the HijrahEra object from the numeric value
HijrahChronology#checkValidYear(long):::Check the validity of a year.
HijrahChronology#getHijrahDateInfo(int):::Returns an array containing the Hijrah year, month and day computed from the epoch day.
HijrahChronology#getEpochDay(int, int, int):::Return the epoch day computed from Hijrah year, month, and day.
HijrahChronology#getDayOfYear(int, int):::Returns day of year for the year and month.
HijrahChronology#getMonthLength(int, int):::Returns month length for the year and month.
HijrahChronology#getYearLength(int):::Returns year length
HijrahChronology#getMinimumYear():::Return the minimum supported Hijrah year.
HijrahChronology#getMaximumYear():::Return the maximum supported Hijrah year.
HijrahChronology#getMaximumMonthLength():::Returns maximum day-of-month.
HijrahChronology#getMinimumMonthLength():::Returns smallest maximum day-of-month.
HijrahChronology#getMaximumDayOfYear():::Returns maximum day-of-year.
HijrahChronology#getSmallestMaximumDayOfYear():::Returns smallest maximum day-of-year.
HijrahChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
HijrahDate#of(HijrahChronology, int, int, int):::Obtains an instance of HijrahDate from the Hijrah proleptic year, month-of-year and day-of-month.
HijrahDate#ofEpochDay(HijrahChronology, long):::Returns a HijrahDate for the chronology and epochDay.
HijrahDate#now():::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone
HijrahDate#now(ZoneId):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone
HijrahDate#now(Clock):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock
HijrahDate#of(int, int, int):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields
HijrahDate#from(TemporalAccessor):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object
HijrahDate#getChronology():::Gets the chronology of this date, which is the Hijrah calendar system
HijrahDate#getEra():::Gets the era applicable at this date
HijrahDate#lengthOfMonth():::Returns the length of the month represented by this date
HijrahDate#lengthOfYear():::Returns the length of the year represented by this date
HijrahDate#withVariant(HijrahChronology):::Returns a HijrahDate with the Chronology requested
HijrahDate#isLeapYear():::Checks if the year is a leap year, according to the Hijrah calendar system rules.
HijrahDate#equals(Object):::Compares this date to another date, including the chronology
HijrahDate#hashCode():::A hash code for this date.
IsoChronology#getId():::Gets the ID of the chronology - 'ISO'
IsoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'iso8601'
IsoChronology#date(Era, int, int, int):::Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.
IsoChronology#date(int, int, int):::Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields
IsoChronology#dateYearDay(Era, int, int):::Obtains an ISO local date from the era, year-of-era and day-of-year fields.
IsoChronology#dateYearDay(int, int):::Obtains an ISO local date from the proleptic-year and day-of-year fields
IsoChronology#dateEpochDay(long):::Obtains an ISO local date from the epoch-day
IsoChronology#date(TemporalAccessor):::Obtains an ISO local date from another date-time object
IsoChronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
IsoChronology#localDateTime(TemporalAccessor):::Obtains an ISO local date-time from another date-time object
IsoChronology#zonedDateTime(TemporalAccessor):::Obtains an ISO zoned date-time from another date-time object
IsoChronology#zonedDateTime(Instant, ZoneId):::Obtains an ISO zoned date-time in this chronology from an Instant
IsoChronology#dateNow():::Obtains the current ISO local date from the system clock in the default time-zone
IsoChronology#dateNow(ZoneId):::Obtains the current ISO local date from the system clock in the specified time-zone
IsoChronology#dateNow(Clock):::Obtains the current ISO local date from the specified clock
IsoChronology#isLeapYear(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
IsoChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing
IsoChronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days
IsoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
JapaneseChronology#getId():::Gets the ID of the chronology - 'Japanese'
JapaneseChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'japanese'
JapaneseChronology#date(Era, int, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
JapaneseChronology#date(int, int, int):::Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
JapaneseChronology#dateYearDay(Era, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields
JapaneseChronology#dateYearDay(int, int):::Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields
JapaneseChronology#dateEpochDay(long):::Obtains a local date in the Japanese calendar system from the epoch-day.
JapaneseChronology#isLeapYear(long):::Checks if the specified year is a leap year
JapaneseChronology#eraOf(int):::Returns the calendar system era object from the given numeric value
JapaneseChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
JapaneseDate#now():::Obtains the current JapaneseDate from the system clock in the default time-zone
JapaneseDate#now(ZoneId):::Obtains the current JapaneseDate from the system clock in the specified time-zone
JapaneseDate#now(Clock):::Obtains the current JapaneseDate from the specified clock
JapaneseDate#of(JapaneseEra, int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
JapaneseDate#of(int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
JapaneseDate#ofYearDay(JapaneseEra, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era and day-of-year fields
JapaneseDate#from(TemporalAccessor):::Obtains a JapaneseDate from a temporal object
JapaneseDate#getChronology():::Gets the chronology of this date, which is the Japanese calendar system
JapaneseDate#getEra():::Gets the era applicable at this date
JapaneseDate#lengthOfMonth():::Returns the length of the month represented by this date
JapaneseDate#isSupported(TemporalField):::Checks if the specified field is supported
JapaneseDate#equals(Object):::Compares this date to another date, including the chronology
JapaneseDate#hashCode():::A hash code for this date.
JapaneseEra#getPrivateEra():::Returns the Sun private Era instance corresponding to this JapaneseEra.
JapaneseEra#of(int):::Obtains an instance of JapaneseEra from an int value
JapaneseEra#valueOf(String):::Returns the JapaneseEra with the name
JapaneseEra#values():::Returns an array of JapaneseEras
JapaneseEra#from(LocalDate):::Obtains an instance of JapaneseEra from a date.
JapaneseEra#getValue():::Gets the numeric era int value
JapaneseEra#range(TemporalField):::Gets the range of valid values for the specified field
MinguoChronology#getId():::Gets the ID of the chronology - 'Minguo'
MinguoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'roc'
MinguoChronology#date(Era, int, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields.
MinguoChronology#date(int, int, int):::Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields.
MinguoChronology#dateYearDay(Era, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields.
MinguoChronology#dateYearDay(int, int):::Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.
MinguoChronology#dateEpochDay(long):::Obtains a local date in the Minguo calendar system from the epoch-day.
MinguoChronology#isLeapYear(long):::Checks if the specified year is a leap year
MinguoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
MinguoDate#now():::Obtains the current MinguoDate from the system clock in the default time-zone
MinguoDate#now(ZoneId):::Obtains the current MinguoDate from the system clock in the specified time-zone
MinguoDate#now(Clock):::Obtains the current MinguoDate from the specified clock
MinguoDate#of(int, int, int):::Obtains a MinguoDate representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields
MinguoDate#from(TemporalAccessor):::Obtains a MinguoDate from a temporal object
MinguoDate#getChronology():::Gets the chronology of this date, which is the Minguo calendar system
MinguoDate#getEra():::Gets the era applicable at this date
MinguoDate#lengthOfMonth():::Returns the length of the month represented by this date
MinguoDate#equals(Object):::Compares this date to another date, including the chronology
MinguoDate#hashCode():::A hash code for this date.
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.
ThaiBuddhistChronology#getId():::Gets the ID of the chronology - 'ThaiBuddhist'
ThaiBuddhistChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'buddhist'
ThaiBuddhistChronology#date(Era, int, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields.
ThaiBuddhistChronology#date(int, int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields.
ThaiBuddhistChronology#dateYearDay(Era, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields.
ThaiBuddhistChronology#dateYearDay(int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields.
ThaiBuddhistChronology#dateEpochDay(long):::Obtains a local date in the Thai Buddhist calendar system from the epoch-day.
ThaiBuddhistChronology#isLeapYear(long):::Checks if the specified year is a leap year
ThaiBuddhistChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
ThaiBuddhistDate#now():::Obtains the current ThaiBuddhistDate from the system clock in the default time-zone
ThaiBuddhistDate#now(ZoneId):::Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone
ThaiBuddhistDate#now(Clock):::Obtains the current ThaiBuddhistDate from the specified clock
ThaiBuddhistDate#of(int, int, int):::Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields
ThaiBuddhistDate#from(TemporalAccessor):::Obtains a ThaiBuddhistDate from a temporal object
ThaiBuddhistDate#getChronology():::Gets the chronology of this date, which is the Thai Buddhist calendar system
ThaiBuddhistDate#getEra():::Gets the era applicable at this date
ThaiBuddhistDate#lengthOfMonth():::Returns the length of the month represented by this date
ThaiBuddhistDate#equals(Object):::Compares this date to another date, including the chronology
ThaiBuddhistDate#hashCode():::A hash code for this date.
Clock#systemUTC():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone
Clock#systemDefaultZone():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone
Clock#system(ZoneId):::Obtains a clock that returns the current instant using the best available system clock
Clock#tickMillis(ZoneId):::Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock
Clock#tickSeconds(ZoneId):::Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock
Clock#tickMinutes(ZoneId):::Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock
Clock#tick(Clock, Duration):::Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration
Clock#fixed(Instant, ZoneId):::Obtains a clock that always returns the same instant
Clock#offset(Clock, Duration):::Obtains a clock that returns instants from the specified clock with the specified duration added  This clock wraps another clock, returning instants that are later by the specified duration
Clock#getZone():::Gets the time-zone being used to create dates and times
Clock#withZone(ZoneId):::Returns a copy of this clock with a different time-zone
Clock#millis():::Gets the current millisecond instant of the clock
Clock#instant():::Gets the current instant of the clock
Clock#equals(Object):::Checks if this clock is equal to another clock
Clock#hashCode():::A hash code for this clock
Duration#ofDays(long):::Obtains a Duration representing a number of standard 24 hour days
Duration#ofHours(long):::Obtains a Duration representing a number of standard hours
Duration#ofMinutes(long):::Obtains a Duration representing a number of standard minutes
Duration#ofSeconds(long):::Obtains a Duration representing a number of seconds
Duration#ofSeconds(long, long):::Obtains a Duration representing a number of seconds and an adjustment in nanoseconds
Duration#ofMillis(long):::Obtains a Duration representing a number of milliseconds
Duration#ofNanos(long):::Obtains a Duration representing a number of nanoseconds
Duration#of(long, TemporalUnit):::Obtains a Duration representing an amount in the specified unit
Duration#from(TemporalAmount):::Obtains an instance of Duration from a temporal amount
Duration#parse(CharSequence):::Obtains a Duration from a text string such as PnDTnHnMn.nS
Duration#between(Temporal, Temporal):::Obtains a Duration representing the duration between two temporal objects
Duration#get(TemporalUnit):::Gets the value of the requested unit
Duration#getUnits():::Gets the set of units supported by this duration
Duration#isZero():::Checks if this duration is zero length
Duration#isNegative():::Checks if this duration is negative, excluding zero
Duration#getSeconds():::Gets the number of seconds in this duration
Duration#getNano():::Gets the number of nanoseconds within the second in this duration
Duration#withSeconds(long):::Returns a copy of this duration with the specified amount of seconds
Duration#withNanos(int):::Returns a copy of this duration with the specified nano-of-second
Duration#plus(Duration):::Returns a copy of this duration with the specified duration added
Duration#plus(long, TemporalUnit):::Returns a copy of this duration with the specified duration added
Duration#plusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days added
Duration#plusHours(long):::Returns a copy of this duration with the specified duration in hours added
Duration#plusMinutes(long):::Returns a copy of this duration with the specified duration in minutes added
Duration#plusSeconds(long):::Returns a copy of this duration with the specified duration in seconds added
Duration#plusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds added
Duration#plusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds added
Duration#minus(Duration):::Returns a copy of this duration with the specified duration subtracted
Duration#minus(long, TemporalUnit):::Returns a copy of this duration with the specified duration subtracted
Duration#minusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days subtracted
Duration#minusHours(long):::Returns a copy of this duration with the specified duration in hours subtracted
Duration#minusMinutes(long):::Returns a copy of this duration with the specified duration in minutes subtracted
Duration#minusSeconds(long):::Returns a copy of this duration with the specified duration in seconds subtracted
Duration#minusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds subtracted
Duration#minusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds subtracted
Duration#multipliedBy(long):::Returns a copy of this duration multiplied by the scalar
Duration#dividedBy(long):::Returns a copy of this duration divided by the specified value
Duration#dividedBy(Duration):::Returns number of whole times a specified Duration occurs within this Duration
Duration#negated():::Returns a copy of this duration with the length negated
Duration#abs():::Returns a copy of this duration with a positive length
Duration#addTo(Temporal):::Adds this duration to the specified temporal object
Duration#subtractFrom(Temporal):::Subtracts this duration from the specified temporal object
Duration#toDays():::Gets the number of days in this duration
Duration#toHours():::Gets the number of hours in this duration
Duration#toMinutes():::Gets the number of minutes in this duration
Duration#toSeconds():::Gets the number of seconds in this duration
Duration#toMillis():::Converts this duration to the total length in milliseconds
Duration#toNanos():::Converts this duration to the total length in nanoseconds expressed as a long
Duration#toDaysPart():::Extracts the number of days in the duration
Duration#toHoursPart():::Extracts the number of hours part in the duration
Duration#toMinutesPart():::Extracts the number of minutes part in the duration
Duration#toSecondsPart():::Extracts the number of seconds part in the duration
Duration#toMillisPart():::Extracts the number of milliseconds part of the duration
Duration#toNanosPart():::Get the nanoseconds part within seconds of the duration
Duration#truncatedTo(TemporalUnit):::Returns a copy of this Duration truncated to the specified unit
Duration#compareTo(Duration):::Compares this duration to the specified Duration
Duration#equals(Object):::Checks if this duration is equal to the specified Duration
Duration#hashCode():::A hash code for this duration.
Duration#toString():::A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S
Instant#now():::Obtains the current instant from the system clock
Instant#now(Clock):::Obtains the current instant from the specified clock
Instant#ofEpochSecond(long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z
Instant#ofEpochSecond(long, long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second
Instant#ofEpochMilli(long):::Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z
Instant#from(TemporalAccessor):::Obtains an instance of Instant from a temporal object
Instant#parse(CharSequence):::Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z
Instant#isSupported(TemporalField):::Checks if the specified field is supported
Instant#isSupported(TemporalUnit):::Checks if the specified unit is supported
Instant#range(TemporalField):::Gets the range of valid values for the specified field
Instant#get(TemporalField):::Gets the value of the specified field from this instant as an int
Instant#getLong(TemporalField):::Gets the value of the specified field from this instant as a long
Instant#getEpochSecond():::Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z
Instant#getNano():::Gets the number of nanoseconds, later along the time-line, from the start of the second
Instant#with(TemporalAdjuster):::Returns an adjusted copy of this instant
Instant#with(TemporalField, long):::Returns a copy of this instant with the specified field set to a new value
Instant#truncatedTo(TemporalUnit):::Returns a copy of this Instant truncated to the specified unit
Instant#plus(TemporalAmount):::Returns a copy of this instant with the specified amount added
Instant#plus(long, TemporalUnit):::Returns a copy of this instant with the specified amount added
Instant#plusSeconds(long):::Returns a copy of this instant with the specified duration in seconds added
Instant#plusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds added
Instant#plusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds added
Instant#minus(TemporalAmount):::Returns a copy of this instant with the specified amount subtracted
Instant#minus(long, TemporalUnit):::Returns a copy of this instant with the specified amount subtracted
Instant#minusSeconds(long):::Returns a copy of this instant with the specified duration in seconds subtracted
Instant#minusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds subtracted
Instant#minusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds subtracted
Instant#query(TemporalQuery):::Queries this instant using the specified query
Instant#adjustInto(Temporal):::Adjusts the specified temporal object to have this instant
Instant#until(Temporal, TemporalUnit):::Calculates the amount of time until another instant in terms of the specified unit
Instant#atOffset(ZoneOffset):::Combines this instant with an offset to create an OffsetDateTime
Instant#atZone(ZoneId):::Combines this instant with a time-zone to create a ZonedDateTime
Instant#toEpochMilli():::Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z
Instant#compareTo(Instant):::Compares this instant to the specified instant
Instant#isAfter(Instant):::Checks if this instant is after the specified instant
Instant#isBefore(Instant):::Checks if this instant is before the specified instant
Instant#equals(Object):::Checks if this instant is equal to the specified instant
Instant#hashCode():::Returns a hash code for this instant.
Instant#toString():::A string representation of this instant using ISO-8601 representation
LocalDate#now():::Obtains the current date from the system clock in the default time-zone
LocalDate#now(ZoneId):::Obtains the current date from the system clock in the specified time-zone
LocalDate#now(Clock):::Obtains the current date from the specified clock
LocalDate#of(int, Month, int):::Obtains an instance of LocalDate from a year, month and day
LocalDate#of(int, int, int):::Obtains an instance of LocalDate from a year, month and day
LocalDate#ofYearDay(int, int):::Obtains an instance of LocalDate from a year and day-of-year
LocalDate#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDate from an Instant and zone ID
LocalDate#ofEpochDay(long):::Obtains an instance of LocalDate from the epoch day count
LocalDate#from(TemporalAccessor):::Obtains an instance of LocalDate from a temporal object
LocalDate#parse(CharSequence):::Obtains an instance of LocalDate from a text string such as 2007-12-03
LocalDate#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDate from a text string using a specific formatter
LocalDate#isSupported(TemporalField):::Checks if the specified field is supported
LocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalDate#range(TemporalField):::Gets the range of valid values for the specified field
LocalDate#get(TemporalField):::Gets the value of the specified field from this date as an int
LocalDate#getLong(TemporalField):::Gets the value of the specified field from this date as a long
LocalDate#getChronology():::Gets the chronology of this date, which is the ISO calendar system
LocalDate#getEra():::Gets the era applicable at this date
LocalDate#getYear():::Gets the year field
LocalDate#getMonthValue():::Gets the month-of-year field from 1 to 12
LocalDate#getMonth():::Gets the month-of-year field using the Month enum
LocalDate#getDayOfMonth():::Gets the day-of-month field
LocalDate#getDayOfYear():::Gets the day-of-year field
LocalDate#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
LocalDate#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
LocalDate#lengthOfMonth():::Returns the length of the month represented by this date
LocalDate#lengthOfYear():::Returns the length of the year represented by this date
LocalDate#with(TemporalAdjuster):::Returns an adjusted copy of this date
LocalDate#with(TemporalField, long):::Returns a copy of this date with the specified field set to a new value
LocalDate#withYear(int):::Returns a copy of this LocalDate with the year altered
LocalDate#withMonth(int):::Returns a copy of this LocalDate with the month-of-year altered
LocalDate#withDayOfMonth(int):::Returns a copy of this LocalDate with the day-of-month altered
LocalDate#withDayOfYear(int):::Returns a copy of this LocalDate with the day-of-year altered
LocalDate#plus(TemporalAmount):::Returns a copy of this date with the specified amount added
LocalDate#plus(long, TemporalUnit):::Returns a copy of this date with the specified amount added
LocalDate#plusYears(long):::Returns a copy of this LocalDate with the specified number of years added
LocalDate#plusMonths(long):::Returns a copy of this LocalDate with the specified number of months added
LocalDate#plusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks added
LocalDate#plusDays(long):::Returns a copy of this LocalDate with the specified number of days added
LocalDate#minus(TemporalAmount):::Returns a copy of this date with the specified amount subtracted
LocalDate#minus(long, TemporalUnit):::Returns a copy of this date with the specified amount subtracted
LocalDate#minusYears(long):::Returns a copy of this LocalDate with the specified number of years subtracted
LocalDate#minusMonths(long):::Returns a copy of this LocalDate with the specified number of months subtracted
LocalDate#minusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks subtracted
LocalDate#minusDays(long):::Returns a copy of this LocalDate with the specified number of days subtracted
LocalDate#query(TemporalQuery):::Queries this date using the specified query
LocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object
LocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit
LocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a Period
LocalDate#datesUntil(LocalDate):::Returns a sequential ordered stream of dates
LocalDate#datesUntil(LocalDate, Period):::Returns a sequential ordered stream of dates by given incremental step
LocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter
LocalDate#atTime(LocalTime):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int, int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(OffsetTime):::Combines this date with an offset time to create an OffsetDateTime
LocalDate#atStartOfDay():::Combines this date with the time of midnight to create a LocalDateTime at the start of this date
LocalDate#atStartOfDay(ZoneId):::Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone
LocalDate#toEpochSecond(LocalTime, ZoneOffset):::Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z
LocalDate#compareTo(ChronoLocalDate):::Compares this date to another date
LocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date
LocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date
LocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date
LocalDate#equals(Object):::Checks if this date is equal to another date
LocalDate#hashCode():::A hash code for this date.
LocalDate#toString():::Outputs this date as a String, such as 2007-12-03
LocalDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
LocalDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
LocalDateTime#now(Clock):::Obtains the current date-time from the specified clock
LocalDateTime#of(int, Month, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero
LocalDateTime#of(int, Month, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero
LocalDateTime#of(int, Month, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond
LocalDateTime#of(int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero
LocalDateTime#of(int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero
LocalDateTime#of(int, int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond
LocalDateTime#of(LocalDate, LocalTime):::Obtains an instance of LocalDateTime from a date and time.
LocalDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDateTime from an Instant and zone ID
LocalDateTime#ofEpochSecond(long, int, ZoneOffset):::Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z
LocalDateTime#from(TemporalAccessor):::Obtains an instance of LocalDateTime from a temporal object
LocalDateTime#parse(CharSequence):::Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30
LocalDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDateTime from a text string using a specific formatter
LocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported
LocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalDateTime#range(TemporalField):::Gets the range of valid values for the specified field
LocalDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
LocalDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
LocalDateTime#toLocalDate():::Gets the LocalDate part of this date-time
LocalDateTime#getYear():::Gets the year field
LocalDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
LocalDateTime#getMonth():::Gets the month-of-year field using the Month enum
LocalDateTime#getDayOfMonth():::Gets the day-of-month field
LocalDateTime#getDayOfYear():::Gets the day-of-year field
LocalDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
LocalDateTime#toLocalTime():::Gets the LocalTime part of this date-time
LocalDateTime#getHour():::Gets the hour-of-day field.
LocalDateTime#getMinute():::Gets the minute-of-hour field.
LocalDateTime#getSecond():::Gets the second-of-minute field.
LocalDateTime#getNano():::Gets the nano-of-second field.
LocalDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
LocalDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
LocalDateTime#withYear(int):::Returns a copy of this LocalDateTime with the year altered
LocalDateTime#withMonth(int):::Returns a copy of this LocalDateTime with the month-of-year altered
LocalDateTime#withDayOfMonth(int):::Returns a copy of this LocalDateTime with the day-of-month altered
LocalDateTime#withDayOfYear(int):::Returns a copy of this LocalDateTime with the day-of-year altered
LocalDateTime#withHour(int):::Returns a copy of this LocalDateTime with the hour-of-day altered
LocalDateTime#withMinute(int):::Returns a copy of this LocalDateTime with the minute-of-hour altered
LocalDateTime#withSecond(int):::Returns a copy of this LocalDateTime with the second-of-minute altered
LocalDateTime#withNano(int):::Returns a copy of this LocalDateTime with the nano-of-second altered
LocalDateTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalDateTime with the time truncated
LocalDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
LocalDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
LocalDateTime#plusYears(long):::Returns a copy of this LocalDateTime with the specified number of years added
LocalDateTime#plusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months added
LocalDateTime#plusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks added
LocalDateTime#plusDays(long):::Returns a copy of this LocalDateTime with the specified number of days added
LocalDateTime#plusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours added
LocalDateTime#plusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes added
LocalDateTime#plusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds added
LocalDateTime#plusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds added
LocalDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
LocalDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
LocalDateTime#minusYears(long):::Returns a copy of this LocalDateTime with the specified number of years subtracted
LocalDateTime#minusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months subtracted
LocalDateTime#minusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks subtracted
LocalDateTime#minusDays(long):::Returns a copy of this LocalDateTime with the specified number of days subtracted
LocalDateTime#minusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours subtracted
LocalDateTime#minusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes subtracted
LocalDateTime#minusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds subtracted
LocalDateTime#minusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted
LocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query
LocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object
LocalDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
LocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
LocalDateTime#atOffset(ZoneOffset):::Combines this date-time with an offset to create an OffsetDateTime
LocalDateTime#atZone(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime
LocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time
LocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time
LocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time
LocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time
LocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time
LocalDateTime#hashCode():::A hash code for this date-time.
LocalDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30
LocalTime#now():::Obtains the current time from the system clock in the default time-zone
LocalTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone
LocalTime#now(Clock):::Obtains the current time from the specified clock
LocalTime#of(int, int):::Obtains an instance of LocalTime from an hour and minute
LocalTime#of(int, int, int):::Obtains an instance of LocalTime from an hour, minute and second
LocalTime#of(int, int, int, int):::Obtains an instance of LocalTime from an hour, minute, second and nanosecond
LocalTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalTime from an Instant and zone ID
LocalTime#ofSecondOfDay(long):::Obtains an instance of LocalTime from a second-of-day value
LocalTime#ofNanoOfDay(long):::Obtains an instance of LocalTime from a nanos-of-day value
LocalTime#from(TemporalAccessor):::Obtains an instance of LocalTime from a temporal object
LocalTime#parse(CharSequence):::Obtains an instance of LocalTime from a text string such as 10:15
LocalTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalTime from a text string using a specific formatter
LocalTime#isSupported(TemporalField):::Checks if the specified field is supported
LocalTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalTime#range(TemporalField):::Gets the range of valid values for the specified field
LocalTime#get(TemporalField):::Gets the value of the specified field from this time as an int
LocalTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long
LocalTime#getHour():::Gets the hour-of-day field.
LocalTime#getMinute():::Gets the minute-of-hour field.
LocalTime#getSecond():::Gets the second-of-minute field.
LocalTime#getNano():::Gets the nano-of-second field.
LocalTime#with(TemporalAdjuster):::Returns an adjusted copy of this time
LocalTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value
LocalTime#withHour(int):::Returns a copy of this LocalTime with the hour-of-day altered
LocalTime#withMinute(int):::Returns a copy of this LocalTime with the minute-of-hour altered
LocalTime#withSecond(int):::Returns a copy of this LocalTime with the second-of-minute altered
LocalTime#withNano(int):::Returns a copy of this LocalTime with the nano-of-second altered
LocalTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalTime with the time truncated
LocalTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added
LocalTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added
LocalTime#plusHours(long):::Returns a copy of this LocalTime with the specified number of hours added
LocalTime#plusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes added
LocalTime#plusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds added
LocalTime#plusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds added
LocalTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted
LocalTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted
LocalTime#minusHours(long):::Returns a copy of this LocalTime with the specified number of hours subtracted
LocalTime#minusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes subtracted
LocalTime#minusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds subtracted
LocalTime#minusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds subtracted
LocalTime#query(TemporalQuery):::Queries this time using the specified query
LocalTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same time as this object
LocalTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit
LocalTime#format(DateTimeFormatter):::Formats this time using the specified formatter
LocalTime#atDate(LocalDate):::Combines this time with a date to create a LocalDateTime
LocalTime#atOffset(ZoneOffset):::Combines this time with an offset to create an OffsetTime
LocalTime#toSecondOfDay():::Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.
LocalTime#toNanoOfDay():::Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.
LocalTime#toEpochSecond(LocalDate, ZoneOffset):::Converts this LocalTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z
LocalTime#compareTo(LocalTime):::Compares this time to another time
LocalTime#isAfter(LocalTime):::Checks if this time is after the specified time
LocalTime#isBefore(LocalTime):::Checks if this time is before the specified time
LocalTime#equals(Object):::Checks if this time is equal to another time
LocalTime#hashCode():::A hash code for this time.
LocalTime#toString():::Outputs this time as a String, such as 10:15
MonthDay#now():::Obtains the current month-day from the system clock in the default time-zone
MonthDay#now(ZoneId):::Obtains the current month-day from the system clock in the specified time-zone
MonthDay#now(Clock):::Obtains the current month-day from the specified clock
MonthDay#of(Month, int):::Obtains an instance of MonthDay
MonthDay#of(int, int):::Obtains an instance of MonthDay
MonthDay#from(TemporalAccessor):::Obtains an instance of MonthDay from a temporal object
MonthDay#parse(CharSequence):::Obtains an instance of MonthDay from a text string such as --12-03
MonthDay#parse(CharSequence, DateTimeFormatter):::Obtains an instance of MonthDay from a text string using a specific formatter
MonthDay#isSupported(TemporalField):::Checks if the specified field is supported
MonthDay#range(TemporalField):::Gets the range of valid values for the specified field
MonthDay#get(TemporalField):::Gets the value of the specified field from this month-day as an int
MonthDay#getLong(TemporalField):::Gets the value of the specified field from this month-day as a long
MonthDay#getMonthValue():::Gets the month-of-year field from 1 to 12
MonthDay#getMonth():::Gets the month-of-year field using the Month enum
MonthDay#getDayOfMonth():::Gets the day-of-month field
MonthDay#isValidYear(int):::Checks if the year is valid for this month-day
MonthDay#withMonth(int):::Returns a copy of this MonthDay with the month-of-year altered
MonthDay#with(Month):::Returns a copy of this MonthDay with the month-of-year altered
MonthDay#withDayOfMonth(int):::Returns a copy of this MonthDay with the day-of-month altered
MonthDay#query(TemporalQuery):::Queries this month-day using the specified query
MonthDay#adjustInto(Temporal):::Adjusts the specified temporal object to have this month-day
MonthDay#format(DateTimeFormatter):::Formats this month-day using the specified formatter
MonthDay#atYear(int):::Combines this month-day with a year to create a LocalDate
MonthDay#compareTo(MonthDay):::Compares this month-day to another month-day
MonthDay#isAfter(MonthDay):::Checks if this month-day is after the specified month-day.
MonthDay#isBefore(MonthDay):::Checks if this month-day is before the specified month-day.
MonthDay#equals(Object):::Checks if this month-day is equal to another month-day
MonthDay#hashCode():::A hash code for this month-day.
MonthDay#toString():::Outputs this month-day as a String, such as --12-03
OffsetDateTime#timeLineOrder():::Gets a comparator that compares two OffsetDateTime instances based solely on the instant
OffsetDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
OffsetDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
OffsetDateTime#now(Clock):::Obtains the current date-time from the specified clock
OffsetDateTime#of(LocalDate, LocalTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date, time and offset
OffsetDateTime#of(LocalDateTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date-time and offset
OffsetDateTime#of(int, int, int, int, int, int, int, ZoneOffset):::Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset
OffsetDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetDateTime from an Instant and zone ID
OffsetDateTime#from(TemporalAccessor):::Obtains an instance of OffsetDateTime from a temporal object
OffsetDateTime#parse(CharSequence):::Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00
OffsetDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetDateTime from a text string using a specific formatter
OffsetDateTime#isSupported(TemporalField):::Checks if the specified field is supported
OffsetDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
OffsetDateTime#range(TemporalField):::Gets the range of valid values for the specified field
OffsetDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
OffsetDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
OffsetDateTime#getOffset():::Gets the zone offset, such as '+01:00'
OffsetDateTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time
OffsetDateTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant
OffsetDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time
OffsetDateTime#toLocalDate():::Gets the LocalDate part of this date-time
OffsetDateTime#getYear():::Gets the year field
OffsetDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
OffsetDateTime#getMonth():::Gets the month-of-year field using the Month enum
OffsetDateTime#getDayOfMonth():::Gets the day-of-month field
OffsetDateTime#getDayOfYear():::Gets the day-of-year field
OffsetDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
OffsetDateTime#toLocalTime():::Gets the LocalTime part of this date-time
OffsetDateTime#getHour():::Gets the hour-of-day field.
OffsetDateTime#getMinute():::Gets the minute-of-hour field.
OffsetDateTime#getSecond():::Gets the second-of-minute field.
OffsetDateTime#getNano():::Gets the nano-of-second field.
OffsetDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
OffsetDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
OffsetDateTime#withYear(int):::Returns a copy of this OffsetDateTime with the year altered
OffsetDateTime#withMonth(int):::Returns a copy of this OffsetDateTime with the month-of-year altered
OffsetDateTime#withDayOfMonth(int):::Returns a copy of this OffsetDateTime with the day-of-month altered
OffsetDateTime#withDayOfYear(int):::Returns a copy of this OffsetDateTime with the day-of-year altered
OffsetDateTime#withHour(int):::Returns a copy of this OffsetDateTime with the hour-of-day altered
OffsetDateTime#withMinute(int):::Returns a copy of this OffsetDateTime with the minute-of-hour altered
OffsetDateTime#withSecond(int):::Returns a copy of this OffsetDateTime with the second-of-minute altered
OffsetDateTime#withNano(int):::Returns a copy of this OffsetDateTime with the nano-of-second altered
OffsetDateTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetDateTime with the time truncated
OffsetDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
OffsetDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
OffsetDateTime#plusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years added
OffsetDateTime#plusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months added
OffsetDateTime#plusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks added
OffsetDateTime#plusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days added
OffsetDateTime#plusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours added
OffsetDateTime#plusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes added
OffsetDateTime#plusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds added
OffsetDateTime#plusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds added
OffsetDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
OffsetDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
OffsetDateTime#minusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years subtracted
OffsetDateTime#minusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months subtracted
OffsetDateTime#minusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks subtracted
OffsetDateTime#minusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days subtracted
OffsetDateTime#minusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours subtracted
OffsetDateTime#minusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes subtracted
OffsetDateTime#minusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds subtracted
OffsetDateTime#minusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted
OffsetDateTime#query(TemporalQuery):::Queries this date-time using the specified query
OffsetDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset, date and time as this object
OffsetDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
OffsetDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
OffsetDateTime#atZoneSameInstant(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant
OffsetDateTime#atZoneSimilarLocal(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time
OffsetDateTime#toOffsetTime():::Converts this date-time to an OffsetTime
OffsetDateTime#toZonedDateTime():::Converts this date-time to a ZonedDateTime using the offset as the zone ID
OffsetDateTime#toInstant():::Converts this date-time to an Instant
OffsetDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
OffsetDateTime#compareTo(OffsetDateTime):::Compares this date-time to another date-time
OffsetDateTime#isAfter(OffsetDateTime):::Checks if the instant of this date-time is after that of the specified date-time
OffsetDateTime#isBefore(OffsetDateTime):::Checks if the instant of this date-time is before that of the specified date-time
OffsetDateTime#isEqual(OffsetDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time
OffsetDateTime#equals(Object):::Checks if this date-time is equal to another date-time
OffsetDateTime#hashCode():::A hash code for this date-time.
OffsetDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00
OffsetTime#now():::Obtains the current time from the system clock in the default time-zone
OffsetTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone
OffsetTime#now(Clock):::Obtains the current time from the specified clock
OffsetTime#of(LocalTime, ZoneOffset):::Obtains an instance of OffsetTime from a local time and an offset.
OffsetTime#of(int, int, int, int, ZoneOffset):::Obtains an instance of OffsetTime from an hour, minute, second and nanosecond
OffsetTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetTime from an Instant and zone ID
OffsetTime#from(TemporalAccessor):::Obtains an instance of OffsetTime from a temporal object
OffsetTime#parse(CharSequence):::Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00
OffsetTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetTime from a text string using a specific formatter
OffsetTime#isSupported(TemporalField):::Checks if the specified field is supported
OffsetTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
OffsetTime#range(TemporalField):::Gets the range of valid values for the specified field
OffsetTime#get(TemporalField):::Gets the value of the specified field from this time as an int
OffsetTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long
OffsetTime#getOffset():::Gets the zone offset, such as '+01:00'
OffsetTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time
OffsetTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day
OffsetTime#toLocalTime():::Gets the LocalTime part of this date-time
OffsetTime#getHour():::Gets the hour-of-day field.
OffsetTime#getMinute():::Gets the minute-of-hour field.
OffsetTime#getSecond():::Gets the second-of-minute field.
OffsetTime#getNano():::Gets the nano-of-second field.
OffsetTime#with(TemporalAdjuster):::Returns an adjusted copy of this time
OffsetTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value
OffsetTime#withHour(int):::Returns a copy of this OffsetTime with the hour-of-day altered
OffsetTime#withMinute(int):::Returns a copy of this OffsetTime with the minute-of-hour altered
OffsetTime#withSecond(int):::Returns a copy of this OffsetTime with the second-of-minute altered
OffsetTime#withNano(int):::Returns a copy of this OffsetTime with the nano-of-second altered
OffsetTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetTime with the time truncated
OffsetTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added
OffsetTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added
OffsetTime#plusHours(long):::Returns a copy of this OffsetTime with the specified number of hours added
OffsetTime#plusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes added
OffsetTime#plusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds added
OffsetTime#plusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds added
OffsetTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted
OffsetTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted
OffsetTime#minusHours(long):::Returns a copy of this OffsetTime with the specified number of hours subtracted
OffsetTime#minusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes subtracted
OffsetTime#minusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds subtracted
OffsetTime#minusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted
OffsetTime#query(TemporalQuery):::Queries this time using the specified query
OffsetTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset and time as this object
OffsetTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit
OffsetTime#format(DateTimeFormatter):::Formats this time using the specified formatter
OffsetTime#atDate(LocalDate):::Combines this time with a date to create an OffsetDateTime
OffsetTime#toEpochSecond(LocalDate):::Converts this OffsetTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z
OffsetTime#compareTo(OffsetTime):::Compares this OffsetTime to another time
OffsetTime#isAfter(OffsetTime):::Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date
OffsetTime#isBefore(OffsetTime):::Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date
OffsetTime#isEqual(OffsetTime):::Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date
OffsetTime#equals(Object):::Checks if this time is equal to another time
OffsetTime#hashCode():::A hash code for this time.
OffsetTime#toString():::Outputs this time as a String, such as 10:15:30+01:00
Period#ofYears(int):::Obtains a Period representing a number of years
Period#ofMonths(int):::Obtains a Period representing a number of months
Period#ofWeeks(int):::Obtains a Period representing a number of weeks
Period#ofDays(int):::Obtains a Period representing a number of days
Period#of(int, int, int):::Obtains a Period representing a number of years, months and days
Period#from(TemporalAmount):::Obtains an instance of Period from a temporal amount
Period#parse(CharSequence):::Obtains a Period from a text string such as PnYnMnD
Period#between(LocalDate, LocalDate):::Obtains a Period consisting of the number of years, months, and days between two dates
Period#get(TemporalUnit):::Gets the value of the requested unit
Period#getUnits():::Gets the set of units supported by this period
Period#getChronology():::Gets the chronology of this period, which is the ISO calendar system
Period#isZero():::Checks if all three units of this period are zero
Period#isNegative():::Checks if any of the three units of this period are negative
Period#getYears():::Gets the amount of years of this period
Period#getMonths():::Gets the amount of months of this period
Period#getDays():::Gets the amount of days of this period
Period#withYears(int):::Returns a copy of this period with the specified amount of years
Period#withMonths(int):::Returns a copy of this period with the specified amount of months
Period#withDays(int):::Returns a copy of this period with the specified amount of days
Period#plus(TemporalAmount):::Returns a copy of this period with the specified period added
Period#plusYears(long):::Returns a copy of this period with the specified years added
Period#plusMonths(long):::Returns a copy of this period with the specified months added
Period#plusDays(long):::Returns a copy of this period with the specified days added
Period#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted
Period#minusYears(long):::Returns a copy of this period with the specified years subtracted
Period#minusMonths(long):::Returns a copy of this period with the specified months subtracted
Period#minusDays(long):::Returns a copy of this period with the specified days subtracted
Period#multipliedBy(int):::Returns a new instance with each element in this period multiplied by the specified scalar
Period#negated():::Returns a new instance with each amount in this period negated
Period#normalized():::Returns a copy of this period with the years and months normalized
Period#toTotalMonths():::Gets the total number of months in this period
Period#addTo(Temporal):::Adds this period to the specified temporal object
Period#subtractFrom(Temporal):::Subtracts this period from the specified temporal object
Period#equals(Object):::Checks if this period is equal to another period
Period#hashCode():::A hash code for this period.
Period#toString():::Outputs this period as a String, such as P6Y3M1D
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.
Year#now():::Obtains the current year from the system clock in the default time-zone
Year#now(ZoneId):::Obtains the current year from the system clock in the specified time-zone
Year#now(Clock):::Obtains the current year from the specified clock
Year#of(int):::Obtains an instance of Year
Year#from(TemporalAccessor):::Obtains an instance of Year from a temporal object
Year#parse(CharSequence):::Obtains an instance of Year from a text string such as 2007
Year#parse(CharSequence, DateTimeFormatter):::Obtains an instance of Year from a text string using a specific formatter
Year#isLeap(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Year#getValue():::Gets the year value
Year#isSupported(TemporalField):::Checks if the specified field is supported
Year#isSupported(TemporalUnit):::Checks if the specified unit is supported
Year#range(TemporalField):::Gets the range of valid values for the specified field
Year#get(TemporalField):::Gets the value of the specified field from this year as an int
Year#getLong(TemporalField):::Gets the value of the specified field from this year as a long
Year#isLeap():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Year#isValidMonthDay(MonthDay):::Checks if the month-day is valid for this year
Year#length():::Gets the length of this year in days.
Year#with(TemporalAdjuster):::Returns an adjusted copy of this year
Year#with(TemporalField, long):::Returns a copy of this year with the specified field set to a new value
Year#plus(TemporalAmount):::Returns a copy of this year with the specified amount added
Year#plus(long, TemporalUnit):::Returns a copy of this year with the specified amount added
Year#plusYears(long):::Returns a copy of this Year with the specified number of years added
Year#minus(TemporalAmount):::Returns a copy of this year with the specified amount subtracted
Year#minus(long, TemporalUnit):::Returns a copy of this year with the specified amount subtracted
Year#minusYears(long):::Returns a copy of this Year with the specified number of years subtracted
Year#query(TemporalQuery):::Queries this year using the specified query
Year#adjustInto(Temporal):::Adjusts the specified temporal object to have this year
Year#until(Temporal, TemporalUnit):::Calculates the amount of time until another year in terms of the specified unit
Year#format(DateTimeFormatter):::Formats this year using the specified formatter
Year#atDay(int):::Combines this year with a day-of-year to create a LocalDate
Year#atMonth(Month):::Combines this year with a month to create a YearMonth
Year#atMonth(int):::Combines this year with a month to create a YearMonth
Year#atMonthDay(MonthDay):::Combines this year with a month-day to create a LocalDate
Year#compareTo(Year):::Compares this year to another year
Year#isAfter(Year):::Checks if this year is after the specified year.
Year#isBefore(Year):::Checks if this year is before the specified year.
Year#equals(Object):::Checks if this year is equal to another year
Year#hashCode():::A hash code for this year.
Year#toString():::Outputs this year as a String.
YearMonth#now():::Obtains the current year-month from the system clock in the default time-zone
YearMonth#now(ZoneId):::Obtains the current year-month from the system clock in the specified time-zone
YearMonth#now(Clock):::Obtains the current year-month from the specified clock
YearMonth#of(int, Month):::Obtains an instance of YearMonth from a year and month.
YearMonth#of(int, int):::Obtains an instance of YearMonth from a year and month.
YearMonth#from(TemporalAccessor):::Obtains an instance of YearMonth from a temporal object
YearMonth#parse(CharSequence):::Obtains an instance of YearMonth from a text string such as 2007-12
YearMonth#parse(CharSequence, DateTimeFormatter):::Obtains an instance of YearMonth from a text string using a specific formatter
YearMonth#isSupported(TemporalField):::Checks if the specified field is supported
YearMonth#isSupported(TemporalUnit):::Checks if the specified unit is supported
YearMonth#range(TemporalField):::Gets the range of valid values for the specified field
YearMonth#get(TemporalField):::Gets the value of the specified field from this year-month as an int
YearMonth#getLong(TemporalField):::Gets the value of the specified field from this year-month as a long
YearMonth#getYear():::Gets the year field
YearMonth#getMonthValue():::Gets the month-of-year field from 1 to 12
YearMonth#getMonth():::Gets the month-of-year field using the Month enum
YearMonth#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
YearMonth#isValidDay(int):::Checks if the day-of-month is valid for this year-month
YearMonth#lengthOfMonth():::Returns the length of the month, taking account of the year
YearMonth#lengthOfYear():::Returns the length of the year
YearMonth#with(TemporalAdjuster):::Returns an adjusted copy of this year-month
YearMonth#with(TemporalField, long):::Returns a copy of this year-month with the specified field set to a new value
YearMonth#withYear(int):::Returns a copy of this YearMonth with the year altered
YearMonth#withMonth(int):::Returns a copy of this YearMonth with the month-of-year altered
YearMonth#plus(TemporalAmount):::Returns a copy of this year-month with the specified amount added
YearMonth#plus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount added
YearMonth#plusYears(long):::Returns a copy of this YearMonth with the specified number of years added
YearMonth#plusMonths(long):::Returns a copy of this YearMonth with the specified number of months added
YearMonth#minus(TemporalAmount):::Returns a copy of this year-month with the specified amount subtracted
YearMonth#minus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount subtracted
YearMonth#minusYears(long):::Returns a copy of this YearMonth with the specified number of years subtracted
YearMonth#minusMonths(long):::Returns a copy of this YearMonth with the specified number of months subtracted
YearMonth#query(TemporalQuery):::Queries this year-month using the specified query
YearMonth#adjustInto(Temporal):::Adjusts the specified temporal object to have this year-month
YearMonth#until(Temporal, TemporalUnit):::Calculates the amount of time until another year-month in terms of the specified unit
YearMonth#format(DateTimeFormatter):::Formats this year-month using the specified formatter
YearMonth#atDay(int):::Combines this year-month with a day-of-month to create a LocalDate
YearMonth#atEndOfMonth():::Returns a LocalDate at the end of the month
YearMonth#compareTo(YearMonth):::Compares this year-month to another year-month
YearMonth#isAfter(YearMonth):::Checks if this year-month is after the specified year-month.
YearMonth#isBefore(YearMonth):::Checks if this year-month is before the specified year-month.
YearMonth#equals(Object):::Checks if this year-month is equal to another year-month
YearMonth#hashCode():::A hash code for this year-month.
YearMonth#toString():::Outputs this year-month as a String, such as 2007-12
ZonedDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
ZonedDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
ZonedDateTime#now(Clock):::Obtains the current date-time from the specified clock
ZonedDateTime#of(LocalDate, LocalTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date and time
ZonedDateTime#of(LocalDateTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date-time
ZonedDateTime#of(int, int, int, int, int, int, int, ZoneId):::Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone
ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset):::Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible
ZonedDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of ZonedDateTime from an Instant
ZonedDateTime#ofInstant(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset
ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID
ZonedDateTime#from(TemporalAccessor):::Obtains an instance of ZonedDateTime from a temporal object
ZonedDateTime#parse(CharSequence):::Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]
ZonedDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of ZonedDateTime from a text string using a specific formatter
ZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported
ZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
ZonedDateTime#range(TemporalField):::Gets the range of valid values for the specified field
ZonedDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
ZonedDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
ZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00'
ZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
ZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
ZonedDateTime#getZone():::Gets the time-zone, such as 'Europe/Paris'
ZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
ZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant
ZonedDateTime#withFixedOffsetZone():::Returns a copy of this date-time with the zone ID set to the offset
ZonedDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time
ZonedDateTime#toLocalDate():::Gets the LocalDate part of this date-time
ZonedDateTime#getYear():::Gets the year field
ZonedDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
ZonedDateTime#getMonth():::Gets the month-of-year field using the Month enum
ZonedDateTime#getDayOfMonth():::Gets the day-of-month field
ZonedDateTime#getDayOfYear():::Gets the day-of-year field
ZonedDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
ZonedDateTime#toLocalTime():::Gets the LocalTime part of this date-time
ZonedDateTime#getHour():::Gets the hour-of-day field.
ZonedDateTime#getMinute():::Gets the minute-of-hour field.
ZonedDateTime#getSecond():::Gets the second-of-minute field.
ZonedDateTime#getNano():::Gets the nano-of-second field.
ZonedDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
ZonedDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
ZonedDateTime#withYear(int):::Returns a copy of this ZonedDateTime with the year altered
ZonedDateTime#withMonth(int):::Returns a copy of this ZonedDateTime with the month-of-year altered
ZonedDateTime#withDayOfMonth(int):::Returns a copy of this ZonedDateTime with the day-of-month altered
ZonedDateTime#withDayOfYear(int):::Returns a copy of this ZonedDateTime with the day-of-year altered
ZonedDateTime#withHour(int):::Returns a copy of this ZonedDateTime with the hour-of-day altered
ZonedDateTime#withMinute(int):::Returns a copy of this ZonedDateTime with the minute-of-hour altered
ZonedDateTime#withSecond(int):::Returns a copy of this ZonedDateTime with the second-of-minute altered
ZonedDateTime#withNano(int):::Returns a copy of this ZonedDateTime with the nano-of-second altered
ZonedDateTime#truncatedTo(TemporalUnit):::Returns a copy of this ZonedDateTime with the time truncated
ZonedDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
ZonedDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
ZonedDateTime#plusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years added
ZonedDateTime#plusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months added
ZonedDateTime#plusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks added
ZonedDateTime#plusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days added
ZonedDateTime#plusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours added
ZonedDateTime#plusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes added
ZonedDateTime#plusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds added
ZonedDateTime#plusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds added
ZonedDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
ZonedDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
ZonedDateTime#minusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years subtracted
ZonedDateTime#minusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months subtracted
ZonedDateTime#minusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks subtracted
ZonedDateTime#minusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days subtracted
ZonedDateTime#minusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours subtracted
ZonedDateTime#minusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes subtracted
ZonedDateTime#minusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds subtracted
ZonedDateTime#minusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted
ZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query
ZonedDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
ZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
ZonedDateTime#toOffsetDateTime():::Converts this date-time to an OffsetDateTime
ZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time
ZonedDateTime#hashCode():::A hash code for this date-time.
ZonedDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]
ZoneId#systemDefault():::Gets the system default time-zone
ZoneId#getAvailableZoneIds():::Gets the set of available zone IDs
ZoneId#of(String, Map):::Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs
ZoneId#of(String):::Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use
ZoneId#ofOffset(String, ZoneOffset):::Obtains an instance of ZoneId wrapping an offset
ZoneId#of(String, boolean):::Parses the ID, taking a flag to indicate whether ZoneRulesException should be thrown or not, used in deserialization.
ZoneId#from(TemporalAccessor):::Obtains an instance of ZoneId from a temporal object
ZoneId#getId():::Gets the unique time-zone ID
ZoneId#getDisplayName(TextStyle, Locale):::Gets the textual representation of the zone, such as 'British Time' or '+02:00'
ZoneId#getRules():::Gets the time-zone rules for this ID allowing calculations to be performed
ZoneId#normalized():::Normalizes the time-zone ID, returning a ZoneOffset where possible
ZoneId#equals(Object):::Checks if this time-zone ID is equal to another time-zone ID
ZoneId#hashCode():::A hash code for this time-zone ID.
ZoneId#toString():::Outputs this zone as a String, using the ID.
ZoneOffset#of(String):::Obtains an instance of ZoneOffset using the ID
ZoneOffset#ofHours(int):::Obtains an instance of ZoneOffset using an offset in hours.
ZoneOffset#ofHoursMinutes(int, int):::Obtains an instance of ZoneOffset using an offset in hours and minutes
ZoneOffset#ofHoursMinutesSeconds(int, int, int):::Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds
ZoneOffset#from(TemporalAccessor):::Obtains an instance of ZoneOffset from a temporal object
ZoneOffset#ofTotalSeconds(int):::Obtains an instance of ZoneOffset specifying the total offset in seconds  The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.
ZoneOffset#getTotalSeconds():::Gets the total zone offset in seconds
ZoneOffset#getId():::Gets the normalized zone offset ID
ZoneOffset#getRules():::Gets the associated time-zone rules
ZoneOffset#isSupported(TemporalField):::Checks if the specified field is supported
ZoneOffset#range(TemporalField):::Gets the range of valid values for the specified field
ZoneOffset#get(TemporalField):::Gets the value of the specified field from this offset as an int
ZoneOffset#getLong(TemporalField):::Gets the value of the specified field from this offset as a long
ZoneOffset#query(TemporalQuery):::Queries this offset using the specified query
ZoneOffset#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset as this object
ZoneOffset#compareTo(ZoneOffset):::Compares this offset to another offset in descending order
ZoneOffset#equals(Object):::Checks if this offset is equal to another offset
ZoneOffset#hashCode():::A hash code for this offset.
ZoneOffset#toString():::Outputs this offset as a String, using the normalized ID.
ZoneRegion#ofId(String, boolean):::Obtains an instance of ZoneId from an identifier.
DateTimeFormatter#ofPattern(String):::Creates a formatter using the specified pattern
DateTimeFormatter#ofPattern(String, Locale):::Creates a formatter using the specified pattern and locale
DateTimeFormatter#ofLocalizedDate(FormatStyle):::Returns a locale specific date format for the ISO chronology
DateTimeFormatter#ofLocalizedTime(FormatStyle):::Returns a locale specific time format for the ISO chronology
DateTimeFormatter#ofLocalizedDateTime(FormatStyle):::Returns a locale specific date-time formatter for the ISO chronology
DateTimeFormatter#ofLocalizedDateTime(FormatStyle, FormatStyle):::Returns a locale specific date and time format for the ISO chronology
DateTimeFormatter#parsedExcessDays():::A query that provides access to the excess days that were parsed
DateTimeFormatter#parsedLeapSecond():::A query that provides access to whether a leap-second was parsed
DateTimeFormatter#getLocale():::Gets the locale to be used during formatting
DateTimeFormatter#withLocale(Locale):::Returns a copy of this formatter with a new locale
DateTimeFormatter#localizedBy(Locale):::Returns a copy of this formatter with localized values of the locale, calendar, region, decimal style and/or timezone, that supercede values in this formatter
DateTimeFormatter#getDecimalStyle():::Gets the DecimalStyle to be used during formatting.
DateTimeFormatter#withDecimalStyle(DecimalStyle):::Returns a copy of this formatter with a new DecimalStyle
DateTimeFormatter#getChronology():::Gets the overriding chronology to be used during formatting
DateTimeFormatter#withChronology(Chronology):::Returns a copy of this formatter with a new override chronology
DateTimeFormatter#getZone():::Gets the overriding zone to be used during formatting
DateTimeFormatter#withZone(ZoneId):::Returns a copy of this formatter with a new override zone
DateTimeFormatter#getResolverStyle():::Gets the resolver style to use during parsing
DateTimeFormatter#withResolverStyle(ResolverStyle):::Returns a copy of this formatter with a new resolver style
DateTimeFormatter#getResolverFields():::Gets the resolver fields to use during parsing
DateTimeFormatter#withResolverFields(TemporalField...):::Returns a copy of this formatter with a new set of resolver fields
DateTimeFormatter#withResolverFields(Set):::Returns a copy of this formatter with a new set of resolver fields
DateTimeFormatter#format(TemporalAccessor):::Formats a date-time object using this formatter
DateTimeFormatter#formatTo(TemporalAccessor, Appendable):::Formats a date-time object to an Appendable using this formatter
DateTimeFormatter#parse(CharSequence):::Fully parses the text producing a temporal object
DateTimeFormatter#parse(CharSequence, ParsePosition):::Parses the text using this formatter, providing control over the text position
DateTimeFormatter#parse(CharSequence, TemporalQuery):::Fully parses the text producing an object of the specified type
DateTimeFormatter#parseBest(CharSequence, TemporalQuery...):::Fully parses the text producing an object of one of the specified types
DateTimeFormatter#parseUnresolved(CharSequence, ParsePosition):::Parses the text using this formatter, without resolving the result, intended for advanced use cases
DateTimeFormatter#toPrinterParser(boolean):::Returns the formatter as a composite printer parser.
DateTimeFormatter#toFormat():::Returns this formatter as a java.text.Format instance
DateTimeFormatter#toFormat(TemporalQuery):::Returns this formatter as a java.text.Format instance that will parse using the specified query
DateTimeFormatter#toString():::Returns a description of the underlying formatters.
DateTimeFormatterBuilder#getLocalizedDateTimePattern(FormatStyle, FormatStyle, Chronology, Locale):::Gets the formatting pattern for date and time styles for a locale and chronology
DateTimeFormatterBuilder#parseCaseSensitive():::Changes the parse style to be case sensitive for the remainder of the formatter
DateTimeFormatterBuilder#parseCaseInsensitive():::Changes the parse style to be case insensitive for the remainder of the formatter
DateTimeFormatterBuilder#parseStrict():::Changes the parse style to be strict for the remainder of the formatter
DateTimeFormatterBuilder#parseLenient():::Changes the parse style to be lenient for the remainder of the formatter
DateTimeFormatterBuilder#parseDefaulting(TemporalField, long):::Appends a default value for a field to the formatter for use in parsing
DateTimeFormatterBuilder#appendValue(TemporalField):::Appends the value of a date-time field to the formatter using a normal output style
DateTimeFormatterBuilder#appendValue(TemporalField, int):::Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach
DateTimeFormatterBuilder#appendValue(TemporalField, int, int, SignStyle):::Appends the value of a date-time field to the formatter providing full control over formatting
DateTimeFormatterBuilder#appendValueReduced(TemporalField, int, int, int):::Appends the reduced value of a date-time field to the formatter
DateTimeFormatterBuilder#appendValueReduced(TemporalField, int, int, ChronoLocalDate):::Appends the reduced value of a date-time field to the formatter
DateTimeFormatterBuilder#appendFraction(TemporalField, int, int, boolean):::Appends the fractional value of a date-time field to the formatter
DateTimeFormatterBuilder#appendText(TemporalField):::Appends the text of a date-time field to the formatter using the full text style
DateTimeFormatterBuilder#appendText(TemporalField, TextStyle):::Appends the text of a date-time field to the formatter
DateTimeFormatterBuilder#appendText(TemporalField, Map):::Appends the text of a date-time field to the formatter using the specified map to supply the text
DateTimeFormatterBuilder#appendInstant():::Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three
DateTimeFormatterBuilder#appendInstant(int):::Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits
DateTimeFormatterBuilder#appendOffsetId():::Appends the zone offset, such as '+01:00', to the formatter
DateTimeFormatterBuilder#appendOffset(String, String):::Appends the zone offset, such as '+01:00', to the formatter
DateTimeFormatterBuilder#appendLocalizedOffset(TextStyle):::Appends the localized zone offset, such as 'GMT+01:00', to the formatter
DateTimeFormatterBuilder#appendZoneId():::Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter
DateTimeFormatterBuilder#appendZoneRegionId():::Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a ZoneOffset
DateTimeFormatterBuilder#appendZoneOrOffsetId():::Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID
DateTimeFormatterBuilder#appendZoneText(TextStyle):::Appends the time-zone name, such as 'British Summer Time', to the formatter
DateTimeFormatterBuilder#appendZoneText(TextStyle, Set):::Appends the time-zone name, such as 'British Summer Time', to the formatter
DateTimeFormatterBuilder#appendGenericZoneText(TextStyle):::Appends the generic time-zone name, such as 'Pacific Time', to the formatter
DateTimeFormatterBuilder#appendGenericZoneText(TextStyle, Set):::Appends the generic time-zone name, such as 'Pacific Time', to the formatter
DateTimeFormatterBuilder#appendChronologyId():::Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter
DateTimeFormatterBuilder#appendChronologyText(TextStyle):::Appends the chronology name to the formatter
DateTimeFormatterBuilder#appendLocalized(FormatStyle, FormatStyle):::Appends a localized date-time pattern to the formatter
DateTimeFormatterBuilder#appendLiteral(char):::Appends a character literal to the formatter
DateTimeFormatterBuilder#appendLiteral(String):::Appends a string literal to the formatter
DateTimeFormatterBuilder#append(DateTimeFormatter):::Appends all the elements of a formatter to the builder
DateTimeFormatterBuilder#appendOptional(DateTimeFormatter):::Appends a formatter to the builder which will optionally format/parse
DateTimeFormatterBuilder#appendPattern(String):::Appends the elements defined by the specified pattern to the builder
DateTimeFormatterBuilder#padNext(int):::Causes the next added printer/parser to pad to a fixed width using a space
DateTimeFormatterBuilder#padNext(int, char):::Causes the next added printer/parser to pad to a fixed width
DateTimeFormatterBuilder#optionalStart():::Mark the start of an optional section
DateTimeFormatterBuilder#optionalEnd():::Ends an optional section
DateTimeFormatterBuilder#toFormatter():::Completes this builder by creating the DateTimeFormatter using the default locale
DateTimeFormatterBuilder#toFormatter(Locale):::Completes this builder by creating the DateTimeFormatter using the specified locale
DateTimeFormatterBuilder#toFormatter(ResolverStyle, Chronology):::Completes this builder by creating the formatter
DateTimeFormatterBuilder.DateTimePrinterParser#format(DateTimePrintContext, StringBuilder):::Prints the date-time object to the buffer
DateTimeFormatterBuilder.DateTimePrinterParser#parse(DateTimeParseContext, CharSequence, int):::Parses text into date-time information
DateTimeFormatterBuilder.CompositePrinterParser#withOptional(boolean):::Returns a copy of this printer-parser with the optional flag changed.
DateTimeFormatterBuilder.NumberPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeFormatterBuilder.NumberPrinterParser#withSubsequentWidth(int):::Returns a new instance with an updated subsequent width.
DateTimeFormatterBuilder.NumberPrinterParser#getValue(DateTimePrintContext, long):::Gets the value to output.
DateTimeFormatterBuilder.NumberPrinterParser#isFixedWidth(DateTimeParseContext):::For NumberPrinterParser, the width is fixed depending on the minWidth, maxWidth, signStyle and whether subsequent fields are fixed.
DateTimeFormatterBuilder.NumberPrinterParser#setValue(DateTimeParseContext, long, int, int):::Stores the value.
DateTimeFormatterBuilder.ReducedPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeFormatterBuilder.ReducedPrinterParser#withSubsequentWidth(int):::Returns a new instance with an updated subsequent width.
DateTimeFormatterBuilder.ReducedPrinterParser#isFixedWidth(DateTimeParseContext):::For a ReducedPrinterParser, fixed width is false if the mode is strict, otherwise it is set as for NumberPrinterParser.
DateTimeFormatterBuilder.FractionPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeFormatterBuilder.FractionPrinterParser#withSubsequentWidth(int):::Returns a new instance with an updated subsequent width.
DateTimeFormatterBuilder.FractionPrinterParser#isFixedWidth(DateTimeParseContext):::For FractionPrinterPrinterParser, the width is fixed if context is sttrict, minWidth equal to maxWidth and decimalpoint is absent.
DateTimeFormatterBuilder.ZoneIdPrinterParser#parse(DateTimeParseContext, CharSequence, int):::This implementation looks for the longest matching string
DateTimeFormatterBuilder.PrefixTree#newTree(DateTimeParseContext):::Creates a new prefix parsing tree based on parse context.
DateTimeFormatterBuilder.PrefixTree#newTree(Set, DateTimeParseContext):::Creates a new prefix parsing tree.
DateTimeFormatterBuilder.PrefixTree#copyTree():::Clone a copy of this tree
DateTimeFormatterBuilder.PrefixTree#add(String, String):::Adds a pair of {key, value} into the prefix tree.
DateTimeFormatterBuilder.PrefixTree#match(CharSequence, int, int):::Match text with the prefix tree.
DateTimeFormatterBuilder.PrefixTree#match(CharSequence, ParsePosition):::Match text with the prefix tree.
DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#withSubsequentWidth(int):::Returns a new instance with an updated subsequent width.
DateTimeParseContext#copy():::Creates a copy of this context
DateTimeParseContext#getLocale():::Gets the locale
DateTimeParseContext#getDecimalStyle():::Gets the DecimalStyle
DateTimeParseContext#getEffectiveChronology():::Gets the effective chronology during parsing.
DateTimeParseContext#isCaseSensitive():::Checks if parsing is case sensitive.
DateTimeParseContext#setCaseSensitive(boolean):::Sets whether the parsing is case sensitive or not.
DateTimeParseContext#subSequenceEquals(CharSequence, int, CharSequence, int, int):::Helper to compare two CharSequence instances
DateTimeParseContext#charEquals(char, char):::Helper to compare two char
DateTimeParseContext#charEqualsIgnoreCase(char, char):::Compares two characters ignoring case.
DateTimeParseContext#isStrict():::Checks if parsing is strict
DateTimeParseContext#setStrict(boolean):::Sets whether parsing is strict or lenient.
DateTimeParseContext#startOptional():::Starts the parsing of an optional segment of the input.
DateTimeParseContext#endOptional(boolean):::Ends the parsing of an optional segment of the input.
DateTimeParseContext#toUnresolved():::Gets the unresolved result of the parse.
DateTimeParseContext#toResolved(ResolverStyle, Set):::Gets the resolved result of the parse.
DateTimeParseContext#getParsed(TemporalField):::Gets the first value that was parsed for the specified field
DateTimeParseContext#setParsedField(TemporalField, long, int, int):::Stores the parsed field
DateTimeParseContext#setParsed(Chronology):::Stores the parsed chronology
DateTimeParseContext#addChronoChangedListener(Consumer):::Adds a Consumer<Chronology> to the list of listeners to be notified if the Chronology changes.
DateTimeParseContext#setParsed(ZoneId):::Stores the parsed zone
DateTimeParseContext#setParsedLeapSecond():::Stores the parsed leap second.
DateTimeParseContext#toString():::Returns a string version of the context for debugging.
DateTimeParseException#getParsedString():::Returns the string that was being parsed.
DateTimeParseException#getErrorIndex():::Returns the index where the error was found.
DateTimePrintContext#getTemporal():::Gets the temporal object being output.
DateTimePrintContext#getLocale():::Gets the locale
DateTimePrintContext#getDecimalStyle():::Gets the DecimalStyle
DateTimePrintContext#startOptional():::Starts the printing of an optional segment of the input.
DateTimePrintContext#endOptional():::Ends the printing of an optional segment of the input.
DateTimePrintContext#getValue(TemporalQuery):::Gets a value using a query.
DateTimePrintContext#getValue(TemporalField):::Gets the value of the specified field
DateTimePrintContext#toString():::Returns a string version of the context for debugging.
DateTimeTextProvider#getInstance():::Gets the provider of text.
DateTimeTextProvider#getText(TemporalField, long, TextStyle, Locale):::Gets the text for the specified field, locale and style for the purpose of formatting
DateTimeTextProvider#getText(Chronology, TemporalField, long, TextStyle, Locale):::Gets the text for the specified chrono, field, locale and style for the purpose of formatting
DateTimeTextProvider#getTextIterator(TemporalField, TextStyle, Locale):::Gets an iterator of text to field for the specified field, locale and style for the purpose of parsing
DateTimeTextProvider#getTextIterator(Chronology, TemporalField, TextStyle, Locale):::Gets an iterator of text to field for the specified chrono, field, locale and style for the purpose of parsing
DateTimeTextProvider#getLocalizedResource(String, Locale):::Returns the localized resource of the given key and locale, or null if no localized resource is available.
DateTimeTextProvider.LocaleStore#getText(long, TextStyle):::Gets the text for the specified field value, locale and style for the purpose of printing.
DateTimeTextProvider.LocaleStore#getTextIterator(TextStyle):::Gets an iterator of text to field for the specified style for the purpose of parsing
DecimalStyle#getAvailableLocales():::Lists all the locales that are supported
DecimalStyle#ofDefaultLocale():::Obtains the DecimalStyle for the default java.util.Locale.Category#FORMAT FORMAT locale
DecimalStyle#of(Locale):::Obtains the DecimalStyle for the specified locale
DecimalStyle#getZeroDigit():::Gets the character that represents zero
DecimalStyle#withZeroDigit(char):::Returns a copy of the info with a new character that represents zero
DecimalStyle#getPositiveSign():::Gets the character that represents the positive sign
DecimalStyle#withPositiveSign(char):::Returns a copy of the info with a new character that represents the positive sign
DecimalStyle#getNegativeSign():::Gets the character that represents the negative sign
DecimalStyle#withNegativeSign(char):::Returns a copy of the info with a new character that represents the negative sign
DecimalStyle#getDecimalSeparator():::Gets the character that represents the decimal point
DecimalStyle#withDecimalSeparator(char):::Returns a copy of the info with a new character that represents the decimal point
DecimalStyle#convertToDigit(char):::Checks whether the character is a digit, based on the currently set zero character.
DecimalStyle#convertNumberToI18N(String):::Converts the input numeric text to the internationalized form using the zero character.
DecimalStyle#equals(Object):::Checks if this DecimalStyle is equal to another DecimalStyle.
DecimalStyle#hashCode():::A hash code for this DecimalStyle.
DecimalStyle#toString():::Returns a string describing this DecimalStyle.
Parsed#copy():::Creates a copy.
Parsed#resolve(ResolverStyle, Set):::Resolves the fields in this context.
Temporal#isSupported(TemporalUnit):::Checks if the specified unit is supported
Temporal#with(TemporalAdjuster):::Returns an adjusted object of the same type as this object with the adjustment made
Temporal#with(TemporalField, long):::Returns an object of the same type as this object with the specified field altered
Temporal#plus(TemporalAmount):::Returns an object of the same type as this object with an amount added
Temporal#plus(long, TemporalUnit):::Returns an object of the same type as this object with the specified period added
Temporal#minus(TemporalAmount):::Returns an object of the same type as this object with an amount subtracted
Temporal#minus(long, TemporalUnit):::Returns an object of the same type as this object with the specified period subtracted
Temporal#until(Temporal, TemporalUnit):::Calculates the amount of time until another temporal in terms of the specified unit
TemporalAccessor#isSupported(TemporalField):::Checks if the specified field is supported
TemporalAccessor#range(TemporalField):::Gets the range of valid values for the specified field
TemporalAccessor#get(TemporalField):::Gets the value of the specified field as an int
TemporalAccessor#getLong(TemporalField):::Gets the value of the specified field as a long
TemporalAccessor#query(TemporalQuery):::Queries this date-time
TemporalAdjuster#adjustInto(Temporal):::Adjusts the specified temporal object
TemporalAdjusters#ofDateAdjuster(UnaryOperator):::Obtains a TemporalAdjuster that wraps a date adjuster
TemporalAdjusters#firstDayOfMonth():::Returns the "first day of month" adjuster, which returns a new date set to the first day of the current month
TemporalAdjusters#lastDayOfMonth():::Returns the "last day of month" adjuster, which returns a new date set to the last day of the current month
TemporalAdjusters#firstDayOfNextMonth():::Returns the "first day of next month" adjuster, which returns a new date set to the first day of the next month
TemporalAdjusters#firstDayOfYear():::Returns the "first day of year" adjuster, which returns a new date set to the first day of the current year
TemporalAdjusters#lastDayOfYear():::Returns the "last day of year" adjuster, which returns a new date set to the last day of the current year
TemporalAdjusters#firstDayOfNextYear():::Returns the "first day of next year" adjuster, which returns a new date set to the first day of the next year
TemporalAdjusters#firstInMonth(DayOfWeek):::Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week
TemporalAdjusters#lastInMonth(DayOfWeek):::Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week
TemporalAdjusters#dayOfWeekInMonth(int, DayOfWeek):::Returns the day-of-week in month adjuster, which returns a new date with the ordinal day-of-week based on the month
TemporalAdjusters#next(DayOfWeek):::Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted
TemporalAdjusters#nextOrSame(DayOfWeek):::Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned
TemporalAdjusters#previous(DayOfWeek):::Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted
TemporalAdjusters#previousOrSame(DayOfWeek):::Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned
TemporalAmount#get(TemporalUnit):::Returns the value of the requested unit
TemporalAmount#getUnits():::Returns the list of units uniquely defining the value of this TemporalAmount
TemporalAmount#addTo(Temporal):::Adds to the specified temporal object
TemporalAmount#subtractFrom(Temporal):::Subtracts this object from the specified temporal object
TemporalField#getDisplayName(Locale):::Gets the display name for the field in the requested locale
TemporalField#getBaseUnit():::Gets the unit that the field is measured in
TemporalField#getRangeUnit():::Gets the range that the field is bound by
TemporalField#range():::Gets the range of valid values for the field
TemporalField#isDateBased():::Checks if this field represents a component of a date
TemporalField#isTimeBased():::Checks if this field represents a component of a time
TemporalField#isSupportedBy(TemporalAccessor):::Checks if this field is supported by the temporal object
TemporalField#rangeRefinedBy(TemporalAccessor):::Get the range of valid values for this field using the temporal object to refine the result
TemporalField#getFrom(TemporalAccessor):::Gets the value of this field from the specified temporal object
TemporalField#adjustInto(R, long):::Returns a copy of the specified temporal object with the value of this field set
TemporalField#resolve(Map, TemporalAccessor, ResolverStyle):::Resolves this field to provide a simpler alternative or a date
TemporalField#toString():::Gets a descriptive name for the field
TemporalQueries#zoneId():::A strict query for the ZoneId
TemporalQueries#chronology():::A query for the Chronology
TemporalQueries#precision():::A query for the smallest supported unit
TemporalQueries#zone():::A lenient query for the ZoneId, falling back to the ZoneOffset
TemporalQueries#offset():::A query for ZoneOffset returning null if not found
TemporalQueries#localDate():::A query for LocalDate returning null if not found
TemporalQueries#localTime():::A query for LocalTime returning null if not found
TemporalQuery#queryFrom(TemporalAccessor):::Queries the specified temporal object
TemporalUnit#getDuration():::Gets the duration of this unit, which may be an estimate
TemporalUnit#isDurationEstimated():::Checks if the duration of the unit is an estimate
TemporalUnit#isDateBased():::Checks if this unit represents a component of a date
TemporalUnit#isTimeBased():::Checks if this unit represents a component of a time
TemporalUnit#isSupportedBy(Temporal):::Checks if this unit is supported by the specified temporal object
TemporalUnit#addTo(R, long):::Returns a copy of the specified temporal object with the specified period added
TemporalUnit#between(Temporal, Temporal):::Calculates the amount of time between two temporal objects
TemporalUnit#toString():::Gets a descriptive name for the unit
ValueRange#of(long, long):::Obtains a fixed value range
ValueRange#of(long, long, long):::Obtains a variable value range
ValueRange#of(long, long, long, long):::Obtains a fully variable value range
ValueRange#isFixed():::Is the value range fixed and fully known
ValueRange#getMinimum():::Gets the minimum value that the field can take
ValueRange#getLargestMinimum():::Gets the largest possible minimum value that the field can take
ValueRange#getSmallestMaximum():::Gets the smallest possible maximum value that the field can take
ValueRange#getMaximum():::Gets the maximum value that the field can take
ValueRange#isIntValue():::Checks if all values in the range fit in an int
ValueRange#isValidValue(long):::Checks if the value is within the valid range
ValueRange#isValidIntValue(long):::Checks if the value is within the valid range and that all values in the range fit in an int
ValueRange#checkValidValue(long, TemporalField):::Checks that the specified value is valid
ValueRange#checkValidIntValue(long, TemporalField):::Checks that the specified value is valid and fits in an int
ValueRange#equals(Object):::Checks if this range is equal to another range
ValueRange#hashCode():::A hash code for this range.
ValueRange#toString():::Outputs this range as a String
WeekFields#of(Locale):::Obtains an instance of WeekFields appropriate for a locale
WeekFields#of(DayOfWeek, int):::Obtains an instance of WeekFields from the first day-of-week and minimal days
WeekFields#getFirstDayOfWeek():::Gets the first day-of-week
WeekFields#getMinimalDaysInFirstWeek():::Gets the minimal number of days in the first week
WeekFields#dayOfWeek():::Returns a field to access the day of week based on this WeekFields
WeekFields#weekOfMonth():::Returns a field to access the week of month based on this WeekFields
WeekFields#weekOfYear():::Returns a field to access the week of year based on this WeekFields
WeekFields#weekOfWeekBasedYear():::Returns a field to access the week of a week-based-year based on this WeekFields
WeekFields#weekBasedYear():::Returns a field to access the year of a week-based-year based on this WeekFields
WeekFields#equals(Object):::Checks if this WeekFields is equal to the specified object
WeekFields#hashCode():::A hash code for this WeekFields.
WeekFields#toString():::A string representation of this WeekFields instance.
WeekFields.ComputedDayOfField#ofDayOfWeekField(WeekFields):::Returns a field to access the day of week, computed based on a WeekFields
WeekFields.ComputedDayOfField#ofWeekOfMonthField(WeekFields):::Returns a field to access the week of month, computed based on a WeekFields.
WeekFields.ComputedDayOfField#ofWeekOfYearField(WeekFields):::Returns a field to access the week of year, computed based on a WeekFields.
WeekFields.ComputedDayOfField#ofWeekOfWeekBasedYearField(WeekFields):::Returns a field to access the week of week-based-year, computed based on a WeekFields.
WeekFields.ComputedDayOfField#ofWeekBasedYearField(WeekFields):::Returns a field to access the week of week-based-year, computed based on a WeekFields.
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.
Ser#writeOffset(ZoneOffset, DataOutput):::Writes the state to the stream.
Ser#readOffset(DataInput):::Reads the state from the stream.
Ser#writeEpochSec(long, DataOutput):::Writes the state to the stream.
Ser#readEpochSec(DataInput):::Reads the state from the stream.
ZoneOffsetTransition#of(LocalDateTime, ZoneOffset, ZoneOffset):::Obtains an instance defining a transition between two offsets
ZoneOffsetTransition#writeExternal(DataOutput):::Writes the state to the stream.
ZoneOffsetTransition#readExternal(DataInput):::Reads the state from the stream.
ZoneOffsetTransition#getInstant():::Gets the transition instant
ZoneOffsetTransition#toEpochSecond():::Gets the transition instant as an epoch second.
ZoneOffsetTransition#getDateTimeBefore():::Gets the local transition date-time, as would be expressed with the 'before' offset
ZoneOffsetTransition#getDateTimeAfter():::Gets the local transition date-time, as would be expressed with the 'after' offset
ZoneOffsetTransition#getOffsetBefore():::Gets the offset before the transition
ZoneOffsetTransition#getOffsetAfter():::Gets the offset after the transition
ZoneOffsetTransition#getDuration():::Gets the duration of the transition
ZoneOffsetTransition#isGap():::Does this transition represent a gap in the local time-line
ZoneOffsetTransition#isOverlap():::Does this transition represent an overlap in the local time-line
ZoneOffsetTransition#isValidOffset(ZoneOffset):::Checks if the specified offset is valid during this transition
ZoneOffsetTransition#getValidOffsets():::Gets the valid offsets during this transition
ZoneOffsetTransition#compareTo(ZoneOffsetTransition):::Compares this transition to another based on the transition instant
ZoneOffsetTransition#equals(Object):::Checks if this object equals another
ZoneOffsetTransition#hashCode():::Returns a suitable hash code.
ZoneOffsetTransition#toString():::Returns a string describing this object.
ZoneOffsetTransitionRule#of(Month, int, DayOfWeek, LocalTime, boolean, TimeDefinition, ZoneOffset, ZoneOffset, ZoneOffset):::Obtains an instance defining the yearly rule to create transitions between two offsets
ZoneOffsetTransitionRule#writeExternal(DataOutput):::Writes the state to the stream.
ZoneOffsetTransitionRule#readExternal(DataInput):::Reads the state from the stream.
ZoneOffsetTransitionRule#getMonth():::Gets the month of the transition
ZoneOffsetTransitionRule#getDayOfMonthIndicator():::Gets the indicator of the day-of-month of the transition
ZoneOffsetTransitionRule#getDayOfWeek():::Gets the day-of-week of the transition
ZoneOffsetTransitionRule#getLocalTime():::Gets the local time of day of the transition which must be checked with #isMidnightEndOfDay()
ZoneOffsetTransitionRule#isMidnightEndOfDay():::Is the transition local time midnight at the end of day
ZoneOffsetTransitionRule#getTimeDefinition():::Gets the time definition, specifying how to convert the time to an instant
ZoneOffsetTransitionRule#getStandardOffset():::Gets the standard offset in force at the transition.
ZoneOffsetTransitionRule#getOffsetBefore():::Gets the offset before the transition.
ZoneOffsetTransitionRule#getOffsetAfter():::Gets the offset after the transition.
ZoneOffsetTransitionRule#createTransition(int):::Creates a transition instance for the specified year
ZoneOffsetTransitionRule#equals(Object):::Checks if this object equals another
ZoneOffsetTransitionRule#hashCode():::Returns a suitable hash code.
ZoneOffsetTransitionRule#toString():::Returns a string describing this object.
ZoneRules#of(ZoneOffset, ZoneOffset, List, List, List):::Obtains an instance of a ZoneRules.
ZoneRules#of(ZoneOffset):::Obtains an instance of ZoneRules that has fixed zone rules.
ZoneRules#writeExternal(DataOutput):::Writes the state to the stream.
ZoneRules#readExternal(DataInput):::Reads the state from the stream.
ZoneRules#isFixedOffset():::Checks of the zone rules are fixed, such that the offset never varies.
ZoneRules#getOffset(Instant):::Gets the offset applicable at the specified instant in these rules
ZoneRules#getOffset(LocalDateTime):::Gets a suitable offset for the specified local date-time in these rules
ZoneRules#getValidOffsets(LocalDateTime):::Gets the offset applicable at the specified local date-time in these rules
ZoneRules#getTransition(LocalDateTime):::Gets the offset transition applicable at the specified local date-time in these rules
ZoneRules#getStandardOffset(Instant):::Gets the standard offset for the specified instant in this zone
ZoneRules#getDaylightSavings(Instant):::Gets the amount of daylight savings in use for the specified instant in this zone
ZoneRules#isDaylightSavings(Instant):::Checks if the specified instant is in daylight savings
ZoneRules#isValidOffset(LocalDateTime, ZoneOffset):::Checks if the offset date-time is valid for these rules
ZoneRules#nextTransition(Instant):::Gets the next transition after the specified instant
ZoneRules#previousTransition(Instant):::Gets the previous transition before the specified instant
ZoneRules#getTransitions():::Gets the complete list of fully defined transitions
ZoneRules#getTransitionRules():::Gets the list of transition rules for years beyond those defined in the transition list
ZoneRules#equals(Object):::Checks if this set of rules equals another
ZoneRules#hashCode():::Returns a suitable hash code given the definition of #equals.
ZoneRules#toString():::Returns a string describing this object.
ZoneRulesProvider#getAvailableZoneIds():::Gets the set of available zone IDs
ZoneRulesProvider#getRules(String, boolean):::Gets the rules for the zone ID
ZoneRulesProvider#getVersions(String):::Gets the history of rules for the zone ID
ZoneRulesProvider#registerProvider(ZoneRulesProvider):::Registers a zone rules provider
ZoneRulesProvider#refresh():::Refreshes the rules from the underlying data provider
ZoneRulesProvider#provideZoneIds():::SPI method to get the available zone IDs
ZoneRulesProvider#provideRules(String, boolean):::SPI method to get the rules for the zone ID
ZoneRulesProvider#provideVersions(String):::SPI method to get the history of rules for the zone ID
ZoneRulesProvider#provideRefresh():::SPI method to refresh the rules from the underlying data provider
AtomicBoolean#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicBoolean#compareAndSet(boolean, boolean):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicBoolean#weakCompareAndSet(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicBoolean#weakCompareAndSetPlain(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicBoolean#set(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicBoolean#lazySet(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicBoolean#getAndSet(boolean):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicBoolean#toString():::Returns the String representation of the current value.
AtomicBoolean#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicBoolean#setPlain(boolean):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicBoolean#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicBoolean#setOpaque(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicBoolean#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicBoolean#setRelease(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicBoolean#compareAndExchange(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicBoolean#compareAndExchangeAcquire(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicBoolean#compareAndExchangeRelease(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicBoolean#weakCompareAndSetVolatile(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicBoolean#weakCompareAndSetAcquire(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicBoolean#weakCompareAndSetRelease(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicInteger#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#set(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicInteger#lazySet(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicInteger#getAndSet(int):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicInteger#compareAndSet(int, int):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicInteger#weakCompareAndSet(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicInteger#weakCompareAndSetPlain(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicInteger#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#getAndAdd(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicInteger#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#addAndGet(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicInteger#getAndUpdate(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicInteger#updateAndGet(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicInteger#getAndAccumulate(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicInteger#accumulateAndGet(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicInteger#toString():::Returns the String representation of the current value.
AtomicInteger#intValue():::Returns the current value of this AtomicInteger as an int, with memory effects as specified by VarHandle#getVolatile
AtomicInteger#longValue():::Returns the current value of this AtomicInteger as a long after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#floatValue():::Returns the current value of this AtomicInteger as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#doubleValue():::Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicInteger#setPlain(int):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicInteger#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicInteger#setOpaque(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicInteger#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicInteger#setRelease(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicInteger#compareAndExchange(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicInteger#compareAndExchangeAcquire(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicInteger#compareAndExchangeRelease(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicInteger#weakCompareAndSetVolatile(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicInteger#weakCompareAndSetAcquire(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicInteger#weakCompareAndSetRelease(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicIntegerArray#length():::Returns the length of the array.
AtomicIntegerArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicIntegerArray#set(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicIntegerArray#lazySet(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicIntegerArray#getAndSet(int, int):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicIntegerArray#compareAndSet(int, int, int):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicIntegerArray#weakCompareAndSet(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicIntegerArray#weakCompareAndSetPlain(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicIntegerArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#getAndAdd(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicIntegerArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#addAndGet(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicIntegerArray#getAndUpdate(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicIntegerArray#updateAndGet(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicIntegerArray#getAndAccumulate(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicIntegerArray#accumulateAndGet(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicIntegerArray#toString():::Returns the String representation of the current values of array.
AtomicIntegerArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicIntegerArray#setPlain(int, int):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicIntegerArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicIntegerArray#setOpaque(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicIntegerArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicIntegerArray#setRelease(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicIntegerArray#compareAndExchange(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicIntegerArray#compareAndExchangeAcquire(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicIntegerArray#compareAndExchangeRelease(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicIntegerArray#weakCompareAndSetVolatile(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicIntegerArray#weakCompareAndSetAcquire(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicIntegerArray#weakCompareAndSetRelease(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicIntegerFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field
AtomicIntegerFieldUpdater#compareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicIntegerFieldUpdater#weakCompareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicIntegerFieldUpdater#set(T, int):::Sets the field of the given object managed by this updater to the given updated value
AtomicIntegerFieldUpdater#lazySet(T, int):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicIntegerFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndSet(T, int):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicIntegerFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndAdd(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#addAndGet(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndUpdate(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicIntegerFieldUpdater#updateAndGet(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicIntegerFieldUpdater#getAndAccumulate(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicIntegerFieldUpdater#accumulateAndGet(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicLong#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#set(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicLong#lazySet(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLong#getAndSet(long):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicLong#compareAndSet(long, long):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicLong#weakCompareAndSet(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLong#weakCompareAndSetPlain(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLong#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#getAndAdd(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicLong#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#addAndGet(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicLong#getAndUpdate(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicLong#updateAndGet(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicLong#getAndAccumulate(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicLong#accumulateAndGet(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicLong#toString():::Returns the String representation of the current value.
AtomicLong#intValue():::Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#longValue():::Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle#getVolatile
AtomicLong#floatValue():::Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#doubleValue():::Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicLong#setPlain(long):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicLong#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicLong#setOpaque(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicLong#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicLong#setRelease(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLong#compareAndExchange(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicLong#compareAndExchangeAcquire(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicLong#compareAndExchangeRelease(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicLong#weakCompareAndSetVolatile(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicLong#weakCompareAndSetAcquire(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicLong#weakCompareAndSetRelease(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicLongArray#length():::Returns the length of the array.
AtomicLongArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicLongArray#set(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicLongArray#lazySet(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLongArray#getAndSet(int, long):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicLongArray#compareAndSet(int, long, long):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicLongArray#weakCompareAndSet(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLongArray#weakCompareAndSetPlain(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLongArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#getAndAdd(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicLongArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#addAndGet(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicLongArray#getAndUpdate(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicLongArray#updateAndGet(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicLongArray#getAndAccumulate(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicLongArray#accumulateAndGet(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicLongArray#toString():::Returns the String representation of the current values of array.
AtomicLongArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicLongArray#setPlain(int, long):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicLongArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicLongArray#setOpaque(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicLongArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicLongArray#setRelease(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLongArray#compareAndExchange(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicLongArray#compareAndExchangeAcquire(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicLongArray#compareAndExchangeRelease(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicLongArray#weakCompareAndSetVolatile(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicLongArray#weakCompareAndSetAcquire(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicLongArray#weakCompareAndSetRelease(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicLongFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field
AtomicLongFieldUpdater#compareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicLongFieldUpdater#weakCompareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicLongFieldUpdater#set(T, long):::Sets the field of the given object managed by this updater to the given updated value
AtomicLongFieldUpdater#lazySet(T, long):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicLongFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndSet(T, long):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicLongFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndAdd(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#addAndGet(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndUpdate(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicLongFieldUpdater#updateAndGet(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicLongFieldUpdater#getAndAccumulate(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicLongFieldUpdater#accumulateAndGet(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicLongFieldUpdater#isAncestor(ClassLoader, ClassLoader):::Returns true if the second classloader can be found in the first classloader's delegation chain
AtomicLongFieldUpdater#isSamePackage(Class, Class):::Returns true if the two classes have the same class loader and package qualifier
AtomicMarkableReference#getReference():::Returns the current value of the reference.
AtomicMarkableReference#isMarked():::Returns the current value of the mark.
AtomicMarkableReference#get(boolean[]):::Returns the current values of both the reference and the mark
AtomicMarkableReference#weakCompareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark
AtomicMarkableReference#compareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
AtomicMarkableReference#set(V, boolean):::Unconditionally sets the value of both the reference and mark.
AtomicMarkableReference#attemptMark(V, boolean):::Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference
AtomicReference#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicReference#set(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicReference#lazySet(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReference#compareAndSet(V, V):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicReference#weakCompareAndSet(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReference#weakCompareAndSetPlain(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReference#getAndSet(V):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicReference#getAndUpdate(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicReference#updateAndGet(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicReference#getAndAccumulate(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicReference#accumulateAndGet(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicReference#toString():::Returns the String representation of the current value.
AtomicReference#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicReference#setPlain(V):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicReference#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicReference#setOpaque(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicReference#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicReference#setRelease(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReference#compareAndExchange(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicReference#compareAndExchangeAcquire(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicReference#compareAndExchangeRelease(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicReference#weakCompareAndSetVolatile(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicReference#weakCompareAndSetAcquire(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicReference#weakCompareAndSetRelease(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicReferenceArray#length():::Returns the length of the array.
AtomicReferenceArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicReferenceArray#set(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicReferenceArray#lazySet(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReferenceArray#getAndSet(int, E):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicReferenceArray#compareAndSet(int, E, E):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicReferenceArray#weakCompareAndSet(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReferenceArray#weakCompareAndSetPlain(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReferenceArray#getAndUpdate(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicReferenceArray#updateAndGet(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicReferenceArray#getAndAccumulate(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicReferenceArray#accumulateAndGet(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicReferenceArray#toString():::Returns the String representation of the current values of array.
AtomicReferenceArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicReferenceArray#setPlain(int, E):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicReferenceArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicReferenceArray#setOpaque(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicReferenceArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicReferenceArray#setRelease(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReferenceArray#compareAndExchange(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicReferenceArray#compareAndExchangeAcquire(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicReferenceArray#compareAndExchangeRelease(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicReferenceArray#weakCompareAndSetVolatile(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicReferenceArray#weakCompareAndSetAcquire(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicReferenceArray#weakCompareAndSetRelease(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicReferenceFieldUpdater#newUpdater(Class, Class, String):::Creates and returns an updater for objects with the given field
AtomicReferenceFieldUpdater#compareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicReferenceFieldUpdater#weakCompareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicReferenceFieldUpdater#set(T, V):::Sets the field of the given object managed by this updater to the given updated value
AtomicReferenceFieldUpdater#lazySet(T, V):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicReferenceFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicReferenceFieldUpdater#getAndSet(T, V):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicReferenceFieldUpdater#getAndUpdate(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicReferenceFieldUpdater#updateAndGet(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicReferenceFieldUpdater#getAndAccumulate(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicReferenceFieldUpdater#accumulateAndGet(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicStampedReference#getReference():::Returns the current value of the reference.
AtomicStampedReference#getStamp():::Returns the current value of the stamp.
AtomicStampedReference#get(int[]):::Returns the current values of both the reference and the stamp
AtomicStampedReference#weakCompareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp
AtomicStampedReference#compareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
AtomicStampedReference#set(V, int):::Unconditionally sets the value of both the reference and stamp.
AtomicStampedReference#attemptStamp(V, int):::Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference
DoubleAccumulator#accumulate(double):::Updates with the given value.
DoubleAccumulator#get():::Returns the current value
DoubleAccumulator#reset():::Resets variables maintaining updates to the identity value
DoubleAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset
DoubleAccumulator#toString():::Returns the String representation of the current value.
DoubleAccumulator#doubleValue():::Equivalent to #get.
DoubleAccumulator#longValue():::Returns the #get current value as a long after a narrowing primitive conversion.
DoubleAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.
DoubleAccumulator#floatValue():::Returns the #get current value as a float after a narrowing primitive conversion.
DoubleAdder#add(double):::Adds the given value.
DoubleAdder#sum():::Returns the current sum
DoubleAdder#reset():::Resets variables maintaining the sum to zero
DoubleAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset
DoubleAdder#toString():::Returns the String representation of the #sum.
DoubleAdder#doubleValue():::Equivalent to #sum.
DoubleAdder#longValue():::Returns the #sum as a long after a narrowing primitive conversion.
DoubleAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.
DoubleAdder#floatValue():::Returns the #sum as a float after a narrowing primitive conversion.
LongAccumulator#accumulate(long):::Updates with the given value.
LongAccumulator#get():::Returns the current value
LongAccumulator#reset():::Resets variables maintaining updates to the identity value
LongAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset
LongAccumulator#toString():::Returns the String representation of the current value.
LongAccumulator#longValue():::Equivalent to #get.
LongAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.
LongAccumulator#floatValue():::Returns the #get current value as a float after a widening primitive conversion.
LongAccumulator#doubleValue():::Returns the #get current value as a double after a widening primitive conversion.
LongAdder#add(long):::Adds the given value.
LongAdder#increment():::Equivalent to add(1).
LongAdder#decrement():::Equivalent to add(-1).
LongAdder#sum():::Returns the current sum
LongAdder#reset():::Resets variables maintaining the sum to zero
LongAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset
LongAdder#toString():::Returns the String representation of the #sum.
LongAdder#longValue():::Equivalent to #sum.
LongAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.
LongAdder#floatValue():::Returns the #sum as a float after a widening primitive conversion.
LongAdder#doubleValue():::Returns the #sum as a double after a widening primitive conversion.
Striped64#casBase(long, long):::CASes the base field.
Striped64#casCellsBusy():::CASes the cellsBusy field from 0 to 1 to acquire lock.
Striped64#getProbe():::Returns the probe value for the current thread
Striped64#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread
Striped64#longAccumulate(long, LongBinaryOperator, boolean):::Handles cases of updates involving initialization, resizing, creating new Cells, and/or contention
Striped64#doubleAccumulate(double, DoubleBinaryOperator, boolean):::Same as longAccumulate, but injecting long/double conversions in too many places to sensibly merge with long version, given the low-overhead requirements of this class
AbstractExecutorService#newTaskFor(Runnable, T):::Returns a RunnableFuture for the given runnable and default value.
AbstractExecutorService#newTaskFor(Callable):::Returns a RunnableFuture for the given callable task.
ArrayBlockingQueue#inc(int, int):::Increments i, mod modulus
ArrayBlockingQueue#dec(int, int):::Decrements i, mod modulus
ArrayBlockingQueue#itemAt(int):::Returns item at index i.
ArrayBlockingQueue#itemAt(Object[], int):::Returns element at array index i
ArrayBlockingQueue#removeAt(int):::Deletes item at array index removeIndex
ArrayBlockingQueue#add(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full.
ArrayBlockingQueue#offer(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full
ArrayBlockingQueue#put(E):::Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.
ArrayBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.
ArrayBlockingQueue#size():::Returns the number of elements in this queue.
ArrayBlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
ArrayBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
ArrayBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
ArrayBlockingQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
ArrayBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
ArrayBlockingQueue#clear():::Atomically removes all of the elements from this queue
ArrayBlockingQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
ArrayBlockingQueue.Itrs#doSomeSweeping(boolean):::Sweeps itrs, looking for and expunging stale iterators
ArrayBlockingQueue.Itrs#register(Itr):::Adds a new iterator to the linked list of tracked iterators.
ArrayBlockingQueue.Itrs#takeIndexWrapped():::Called whenever takeIndex wraps around to 0
ArrayBlockingQueue.Itrs#removedAt(int):::Called whenever an interior remove (not at takeIndex) occurred
ArrayBlockingQueue.Itrs#queueIsEmpty():::Called whenever the queue becomes empty
ArrayBlockingQueue.Itrs#elementDequeued():::Called whenever an element has been dequeued (at takeIndex).
ArrayBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
ArrayBlockingQueue#checkInvariants():::debugging
BlockingDeque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingDeque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingDeque#offerFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#offerLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#putFirst(E):::Inserts the specified element at the front of this deque, waiting if necessary for space to become available.
BlockingDeque#putLast(E):::Inserts the specified element at the end of this deque, waiting if necessary for space to become available.
BlockingDeque#offerFirst(E, long, TimeUnit):::Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.
BlockingDeque#offerLast(E, long, TimeUnit):::Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.
BlockingDeque#takeFirst():::Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.
BlockingDeque#takeLast():::Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available.
BlockingDeque#pollFirst(long, TimeUnit):::Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.
BlockingDeque#pollLast(long, TimeUnit):::Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.
BlockingDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
BlockingDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
BlockingDeque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
BlockingDeque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#put(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available
BlockingDeque#offer(E, long, TimeUnit):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available
BlockingDeque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
BlockingDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
BlockingDeque#take():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available
BlockingDeque#poll(long, TimeUnit):::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available
BlockingDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
BlockingDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
BlockingDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
BlockingDeque#contains(Object):::Returns true if this deque contains the specified element
BlockingDeque#size():::Returns the number of elements in this deque.
BlockingDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
BlockingDeque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
BlockingQueue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingQueue#put(E):::Inserts the specified element into this queue, waiting if necessary for space to become available.
BlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.
BlockingQueue#take():::Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
BlockingQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.
BlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit
BlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
BlockingQueue#contains(Object):::Returns true if this queue contains the specified element
BlockingQueue#drainTo(Collection):::Removes all available elements from this queue and adds them to the given collection
BlockingQueue#drainTo(Collection, int):::Removes at most the given number of available elements from this queue and adds them to the given collection
Callable#call():::Computes a result, or throws an exception if unable to do so.
CompletableFuture#tryPushStack(Completion):::Returns true if successfully pushed c onto stack.
CompletableFuture#pushStack(Completion):::Unconditionally pushes c onto stack, retrying if necessary.
CompletableFuture#completeNull():::Completes with the null value, unless already completed.
CompletableFuture#encodeValue(T):::Returns the encoding of the given non-exceptional value.
CompletableFuture#completeValue(T):::Completes with a non-exceptional result, unless already completed.
CompletableFuture#encodeThrowable(Throwable):::Returns the encoding of the given (non-null) exception as a wrapped CompletionException unless it is one already.
CompletableFuture#completeThrowable(Throwable):::Completes with an exceptional result, unless already completed.
CompletableFuture#encodeThrowable(Throwable, Object):::Returns the encoding of the given (non-null) exception as a wrapped CompletionException unless it is one already
CompletableFuture#completeThrowable(Throwable, Object):::Completes with the given (non-null) exceptional result as a wrapped CompletionException unless it is one already, unless already completed
CompletableFuture#encodeOutcome(T, Throwable):::Returns the encoding of the given arguments: if the exception is non-null, encodes as AltResult
CompletableFuture#encodeRelay(Object):::Returns the encoding of a copied outcome; if exceptional, rewraps as a CompletionException, else returns argument.
CompletableFuture#completeRelay(Object):::Completes with r or a copy of r, unless already completed
CompletableFuture#screenExecutor(Executor):::Null-checks user executor argument, and translates uses of commonPool to ASYNC_POOL in case parallelism disabled.
CompletableFuture.Completion#tryFire(int):::Performs completion action if triggered, returning a dependent that may need propagation, if one exists.
CompletableFuture.Completion#isLive():::Returns true if possibly still triggerable
CompletableFuture#postComplete():::Pops and tries to trigger all reachable dependents
CompletableFuture#cleanStack():::Traverses stack and unlinks one or more dead Completions, if found.
CompletableFuture.UniCompletion#claim():::Returns true if action can be run
CompletableFuture#unipush(Completion):::Pushes the given completion unless it completes while trying
CompletableFuture#postFire(CompletableFuture, int):::Post-processing by dependent after successful UniCompletion tryFire
CompletableFuture#bipush(CompletableFuture, BiCompletion):::Pushes completion to this and b unless both done
CompletableFuture#postFire(CompletableFuture, CompletableFuture, int):::Post-processing after successful BiCompletion tryFire.
CompletableFuture#andTree(CompletableFuture[], int, int):::Recursively constructs a tree of completions.
CompletableFuture#orpush(CompletableFuture, BiCompletion):::Pushes completion to this and b unless either done
CompletableFuture#supplyAsync(Supplier):::Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() with the value obtained by calling the given Supplier.
CompletableFuture#supplyAsync(Supplier, Executor):::Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.
CompletableFuture#runAsync(Runnable):::Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() after it runs the given action.
CompletableFuture#runAsync(Runnable, Executor):::Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.
CompletableFuture#completedFuture(U):::Returns a new CompletableFuture that is already completed with the given value.
CompletableFuture#isDone():::Returns true if completed in any fashion: normally, exceptionally, or via cancellation.
CompletableFuture#get():::Waits if necessary for this future to complete, and then returns its result.
CompletableFuture#get(long, TimeUnit):::Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.
CompletableFuture#join():::Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally
CompletableFuture#getNow(T):::Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent.
CompletableFuture#complete(T):::If not already completed, sets the value returned by #get() and related methods to the given value.
CompletableFuture#completeExceptionally(Throwable):::If not already completed, causes invocations of #get() and related methods to throw the given exception.
CompletableFuture#toCompletableFuture():::Returns this CompletableFuture.
CompletableFuture#exceptionally(Function):::Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value
CompletableFuture#allOf(CompletableFuture...):::Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete
CompletableFuture#anyOf(CompletableFuture...):::Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result
CompletableFuture#cancel(boolean):::If not already completed, completes this CompletableFuture with a CancellationException
CompletableFuture#isCancelled():::Returns true if this CompletableFuture was cancelled before it completed normally.
CompletableFuture#isCompletedExceptionally():::Returns true if this CompletableFuture completed exceptionally, in any way
CompletableFuture#obtrudeValue(T):::Forcibly sets or resets the value subsequently returned by method #get() and related methods, whether or not already completed
CompletableFuture#obtrudeException(Throwable):::Forcibly causes subsequent invocations of method #get() and related methods to throw the given exception, whether or not already completed
CompletableFuture#getNumberOfDependents():::Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture
CompletableFuture#toString():::Returns a string identifying this CompletableFuture, as well as its completion state
CompletableFuture#newIncompleteFuture():::Returns a new incomplete CompletableFuture of the type to be returned by a CompletionStage method
CompletableFuture#defaultExecutor():::Returns the default Executor used for async methods that do not specify an Executor
CompletableFuture#copy():::Returns a new CompletableFuture that is completed normally with the same value as this CompletableFuture when it completes normally
CompletableFuture#minimalCompletionStage():::Returns a new CompletionStage that is completed normally with the same value as this CompletableFuture when it completes normally, and cannot be independently completed or otherwise used in ways not defined by the methods of interface CompletionStage
CompletableFuture#completeAsync(Supplier, Executor):::Completes this CompletableFuture with the result of the given Supplier function invoked from an asynchronous task using the given executor.
CompletableFuture#completeAsync(Supplier):::Completes this CompletableFuture with the result of the given Supplier function invoked from an asynchronous task using the default executor.
CompletableFuture#orTimeout(long, TimeUnit):::Exceptionally completes this CompletableFuture with a TimeoutException if not otherwise completed before the given timeout.
CompletableFuture#completeOnTimeout(T, long, TimeUnit):::Completes this CompletableFuture with the given value if not otherwise completed before the given timeout.
CompletableFuture#delayedExecutor(long, TimeUnit, Executor):::Returns a new Executor that submits a task to the given base executor after the given delay (or no delay if non-positive)
CompletableFuture#delayedExecutor(long, TimeUnit):::Returns a new Executor that submits a task to the default executor after the given delay (or no delay if non-positive)
CompletableFuture#completedStage(U):::Returns a new CompletionStage that is already completed with the given value and supports only those methods in interface CompletionStage.
CompletableFuture#failedFuture(Throwable):::Returns a new CompletableFuture that is already completed exceptionally with the given exception.
CompletableFuture#failedStage(Throwable):::Returns a new CompletionStage that is already completed exceptionally with the given exception and supports only those methods in interface CompletionStage.
CompletionService#submit(Callable):::Submits a value-returning task for execution and returns a Future representing the pending results of the task
CompletionService#submit(Runnable, V):::Submits a Runnable task for execution and returns a Future representing that task
CompletionService#take():::Retrieves and removes the Future representing the next completed task, waiting if none are yet present.
CompletionService#poll():::Retrieves and removes the Future representing the next completed task, or null if none are present.
CompletionService#poll(long, TimeUnit):::Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.
CompletionStage#thenApply(Function):::Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function
CompletionStage#thenApplyAsync(Function):::Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function
CompletionStage#thenApplyAsync(Function, Executor):::Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function
CompletionStage#thenAccept(Consumer):::Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action
CompletionStage#thenAcceptAsync(Consumer):::Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action
CompletionStage#thenAcceptAsync(Consumer, Executor):::Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action
CompletionStage#thenRun(Runnable):::Returns a new CompletionStage that, when this stage completes normally, executes the given action
CompletionStage#thenRunAsync(Runnable):::Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#thenRunAsync(Runnable, Executor):::Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor
CompletionStage#thenCombine(CompletionStage, BiFunction):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function
CompletionStage#thenCombineAsync(CompletionStage, BiFunction):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function
CompletionStage#thenCombineAsync(CompletionStage, BiFunction, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function
CompletionStage#thenAcceptBoth(CompletionStage, BiConsumer):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action
CompletionStage#thenAcceptBothAsync(CompletionStage, BiConsumer):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action
CompletionStage#thenAcceptBothAsync(CompletionStage, BiConsumer, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied action
CompletionStage#runAfterBoth(CompletionStage, Runnable):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action
CompletionStage#runAfterBothAsync(CompletionStage, Runnable):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#runAfterBothAsync(CompletionStage, Runnable, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using the supplied executor
CompletionStage#applyToEither(CompletionStage, Function):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function
CompletionStage#applyToEitherAsync(CompletionStage, Function):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function
CompletionStage#applyToEitherAsync(CompletionStage, Function, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function
CompletionStage#acceptEither(CompletionStage, Consumer):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action
CompletionStage#acceptEitherAsync(CompletionStage, Consumer):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action
CompletionStage#acceptEitherAsync(CompletionStage, Consumer, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action
CompletionStage#runAfterEither(CompletionStage, Runnable):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action
CompletionStage#runAfterEitherAsync(CompletionStage, Runnable):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#runAfterEitherAsync(CompletionStage, Runnable, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor
CompletionStage#thenCompose(Function>):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function
CompletionStage#thenComposeAsync(Function>):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using this stage's default asynchronous execution facility
CompletionStage#thenComposeAsync(Function>, Executor):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using the supplied Executor
CompletionStage#handle(BiFunction):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function
CompletionStage#handleAsync(BiFunction):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function
CompletionStage#handleAsync(BiFunction, Executor):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function
CompletionStage#whenComplete(BiConsumer):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes
CompletionStage#whenCompleteAsync(BiConsumer):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes
CompletionStage#whenCompleteAsync(BiConsumer, Executor):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes
CompletionStage#exceptionally(Function):::Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage's exception as the argument to the supplied function
CompletionStage#toCompletableFuture():::Returns a CompletableFuture maintaining the same completion properties as this stage
ConcurrentHashMap.Node#find(int, Object):::Virtualized support for map.get(); overridden in subclasses.
ConcurrentHashMap#spread(int):::Spreads (XORs) higher bits of hash to lower and also forces top bit to 0
ConcurrentHashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.
ConcurrentHashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.
ConcurrentHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
ConcurrentHashMap#containsKey(Object):::Tests if the specified object is a key in this table.
ConcurrentHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
ConcurrentHashMap#put(K, V):::Maps the specified key to the specified value in this table
ConcurrentHashMap#putVal(K, V, boolean):::Implementation for put and putIfAbsent
ConcurrentHashMap#putAll(Map):::Copies all of the mappings from the specified map to this one
ConcurrentHashMap#remove(Object):::Removes the key (and its corresponding value) from this map
ConcurrentHashMap#replaceNode(Object, V, Object):::Implementation for the four public remove/replace methods: Replaces node value with v, conditional upon match of cv if non-null
ConcurrentHashMap#clear():::Removes all of the mappings from this map.
ConcurrentHashMap#keySet():::Returns a Set view of the keys contained in this map
ConcurrentHashMap#values():::Returns a Collection view of the values contained in this map
ConcurrentHashMap#entrySet():::Returns a Set view of the mappings contained in this map
ConcurrentHashMap#hashCode():::Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().
ConcurrentHashMap#toString():::Returns a string representation of this map
ConcurrentHashMap#equals(Object):::Compares the specified object with this map for equality
ConcurrentHashMap#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.
ConcurrentHashMap#removeEntryIf(Predicate>):::Helper method for EntrySetView.removeIf.
ConcurrentHashMap#removeValueIf(Predicate):::Helper method for ValuesView.removeIf.
ConcurrentHashMap#computeIfAbsent(K, Function):::If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null
ConcurrentHashMap#computeIfPresent(K, BiFunction):::If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
ConcurrentHashMap#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
ConcurrentHashMap#merge(K, V, BiFunction):::If the specified key is not already associated with a (non-null) value, associates it with the given value
ConcurrentHashMap#contains(Object):::Tests if some key maps into the specified value in this table
ConcurrentHashMap#keys():::Returns an enumeration of the keys in this table.
ConcurrentHashMap#elements():::Returns an enumeration of the values in this table.
ConcurrentHashMap#mappingCount():::Returns the number of mappings
ConcurrentHashMap#newKeySet():::Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap#newKeySet(int):::Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap#keySet(V):::Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection#add and Collection#addAll(Collection))
ConcurrentHashMap#resizeStamp(int):::Returns the stamp bits for resizing a table of size n
ConcurrentHashMap#helpTransfer(Node[], Node):::Helps transfer if a resize is in progress.
ConcurrentHashMap#untreeify(Node):::Returns a list of non-TreeNodes replacing those in given list.
ConcurrentHashMap.TreeNode#findTreeNode(int, Object, Class):::Returns the TreeNode (or null if not found) for the given key starting at given root.
ConcurrentHashMap.TreeBin#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable
ConcurrentHashMap.TreeBin#find(int, Object):::Returns matching node or null if none
ConcurrentHashMap.TreeBin#putTreeVal(int, K, V):::Finds or adds a node.
ConcurrentHashMap.TreeBin#removeTreeNode(TreeNode):::Removes the given node, that must be present before this call
ConcurrentHashMap.TreeBin#checkInvariants(TreeNode):::Checks invariants recursively for the tree of Nodes rooted at t.
ConcurrentHashMap.Traverser#advance():::Advances if possible, returning next valid node, or null if none.
ConcurrentHashMap.MapEntry#setValue(V):::Sets our entry's value and writes through to the map
ConcurrentHashMap#batchFor(long):::Computes initial batch value for bulk tasks
ConcurrentHashMap#forEach(long, BiConsumer):::Performs the given action for each (key, value).
ConcurrentHashMap#forEach(long, BiFunction, Consumer):::Performs the given action for each non-null transformation of each (key, value).
ConcurrentHashMap#search(long, BiFunction):::Returns a non-null result from applying the given search function on each (key, value), or null if none
ConcurrentHashMap#reduce(long, BiFunction, BiFunction):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceToDouble(long, ToDoubleBiFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceToLong(long, ToLongBiFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceToInt(long, ToIntBiFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachKey(long, Consumer):::Performs the given action for each key.
ConcurrentHashMap#forEachKey(long, Function, Consumer):::Performs the given action for each non-null transformation of each key.
ConcurrentHashMap#searchKeys(long, Function):::Returns a non-null result from applying the given search function on each key, or null if none
ConcurrentHashMap#reduceKeys(long, BiFunction):::Returns the result of accumulating all keys using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceKeys(long, Function, BiFunction):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceKeysToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceKeysToLong(long, ToLongFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceKeysToInt(long, ToIntFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachValue(long, Consumer):::Performs the given action for each value.
ConcurrentHashMap#forEachValue(long, Function, Consumer):::Performs the given action for each non-null transformation of each value.
ConcurrentHashMap#searchValues(long, Function):::Returns a non-null result from applying the given search function on each value, or null if none
ConcurrentHashMap#reduceValues(long, BiFunction):::Returns the result of accumulating all values using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceValues(long, Function, BiFunction):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceValuesToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceValuesToLong(long, ToLongFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceValuesToInt(long, ToIntFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachEntry(long, Consumer>):::Performs the given action for each entry.
ConcurrentHashMap#forEachEntry(long, Function, ? extends U>, Consumer):::Performs the given action for each non-null transformation of each entry.
ConcurrentHashMap#searchEntries(long, Function, ? extends U>):::Returns a non-null result from applying the given search function on each entry, or null if none
ConcurrentHashMap#reduceEntries(long, BiFunction, Map.Entry, ? extends Map.Entry>):::Returns the result of accumulating all entries using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceEntries(long, Function, ? extends U>, BiFunction):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceEntriesToDouble(long, ToDoubleFunction>, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceEntriesToLong(long, ToLongFunction>, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceEntriesToInt(long, ToIntFunction>, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap.CollectionView#getMap():::Returns the map backing this view.
ConcurrentHashMap.CollectionView#clear():::Removes all of the elements from this view, by removing all the mappings from the map backing this view.
ConcurrentHashMap.CollectionView#iterator():::Returns an iterator over the elements in this collection
ConcurrentHashMap.CollectionView#toString():::Returns a string representation of this collection
ConcurrentHashMap.KeySetView#getMappedValue():::Returns the default mapped value for additions, or null if additions are not supported.
ConcurrentHashMap.KeySetView#remove(Object):::Removes the key from this map view, by removing the key (and its corresponding value) from the backing map
ConcurrentHashMap.KeySetView#add(K):::Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined.
ConcurrentHashMap.KeySetView#addAll(Collection):::Adds all of the elements in the specified collection to this set, as if by calling #add on each one.
ConcurrentHashMap.BulkTask#advance():::Same as Traverser version.
ConcurrentLinkedDeque#newNode(E):::Returns a new node holding item
ConcurrentLinkedDeque#unlink(Node):::Unlinks non-null node x.
ConcurrentLinkedDeque#succ(Node):::Returns the successor of p, or the first node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedDeque#pred(Node):::Returns the predecessor of p, or the last node if p.prev has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedDeque#first():::Returns the first node, the unique node p for which:     p.prev == null && p.next != p The returned node may or may not be logically deleted
ConcurrentLinkedDeque#last():::Returns the last node, the unique node p for which:     p.next == null && p.prev != p The returned node may or may not be logically deleted
ConcurrentLinkedDeque#addFirst(E):::Inserts the specified element at the front of this deque
ConcurrentLinkedDeque#addLast(E):::Inserts the specified element at the end of this deque
ConcurrentLinkedDeque#offerFirst(E):::Inserts the specified element at the front of this deque
ConcurrentLinkedDeque#offerLast(E):::Inserts the specified element at the end of this deque
ConcurrentLinkedDeque#offer(E):::Inserts the specified element at the tail of this deque
ConcurrentLinkedDeque#add(E):::Inserts the specified element at the tail of this deque
ConcurrentLinkedDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
ConcurrentLinkedDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
ConcurrentLinkedDeque#contains(Object):::Returns true if this deque contains the specified element
ConcurrentLinkedDeque#isEmpty():::Returns true if this collection contains no elements.
ConcurrentLinkedDeque#size():::Returns the number of elements in this deque
ConcurrentLinkedDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
ConcurrentLinkedDeque#addAll(Collection):::Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator
ConcurrentLinkedDeque#clear():::Removes all of the elements from this deque.
ConcurrentLinkedDeque#toArray():::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
ConcurrentLinkedDeque#toArray(T[]):::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ConcurrentLinkedDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
ConcurrentLinkedDeque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
ConcurrentLinkedDeque#spliterator():::Returns a Spliterator over the elements in this deque
ConcurrentLinkedQueue#add(E):::Inserts the specified element at the tail of this queue
ConcurrentLinkedQueue#updateHead(Node, Node):::Tries to CAS head to p
ConcurrentLinkedQueue#succ(Node):::Returns the successor of p, or the head node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedQueue#offer(E):::Inserts the specified element at the tail of this queue
ConcurrentLinkedQueue#first():::Returns the first live (non-deleted) node on list, or null if none
ConcurrentLinkedQueue#isEmpty():::Returns true if this queue contains no elements.
ConcurrentLinkedQueue#size():::Returns the number of elements in this queue
ConcurrentLinkedQueue#contains(Object):::Returns true if this queue contains the specified element
ConcurrentLinkedQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
ConcurrentLinkedQueue#addAll(Collection):::Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator
ConcurrentLinkedQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
ConcurrentLinkedQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
ConcurrentLinkedQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
ConcurrentLinkedQueue#spliterator():::Returns a Spliterator over the elements in this queue
ConcurrentLinkedQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
ConcurrentMap#putIfAbsent(K, V):::If the specified key is not already associated with a value, associates it with the given value
ConcurrentMap#remove(Object, Object):::Removes the entry for a key only if currently mapped to a given value
ConcurrentMap#replace(K, V, V):::Replaces the entry for a key only if currently mapped to a given value
ConcurrentMap#replace(K, V):::Replaces the entry for a key only if currently mapped to some value
ConcurrentNavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map
ConcurrentNavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentNavigableMap#keySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentNavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map
ConcurrentSkipListMap#cpr(Comparator, Object, Object):::Compares using comparator or natural ordering if null
ConcurrentSkipListMap#baseHead():::Returns the header for base node list, or null if uninitialized
ConcurrentSkipListMap#unlinkNode(Node, Node):::Tries to unlink deleted node n from predecessor b (if both exist), by first splicing in a marker if not already present
ConcurrentSkipListMap#getAdderCount():::Returns element count, initializing adder if necessary.
ConcurrentSkipListMap#addIndices(Index, int, Index, Comparator):::Add indices after an insertion
ConcurrentSkipListMap#doRemove(Object, Object):::Main deletion method
ConcurrentSkipListMap#findFirst():::Gets first valid node, unlinking deleted nodes if encountered.
ConcurrentSkipListMap#findFirstEntry():::Entry snapshot version of findFirst
ConcurrentSkipListMap#findLast():::Specialized version of find to get last valid node.
ConcurrentSkipListMap#findLastEntry():::Entry version of findLast
ConcurrentSkipListMap#findNear(K, int, Comparator):::Utility for ceiling, floor, lower, higher methods.
ConcurrentSkipListMap#findNearEntry(K, int, Comparator):::Variant of findNear returning SimpleImmutableEntry
ConcurrentSkipListMap#clone():::Returns a shallow copy of this ConcurrentSkipListMap instance
ConcurrentSkipListMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
ConcurrentSkipListMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
ConcurrentSkipListMap#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key.
ConcurrentSkipListMap#put(K, V):::Associates the specified value with the specified key in this map
ConcurrentSkipListMap#remove(Object):::Removes the mapping for the specified key from this map if present.
ConcurrentSkipListMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
ConcurrentSkipListMap#clear():::Removes all of the mappings from this map.
ConcurrentSkipListMap#computeIfAbsent(K, Function):::If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null
ConcurrentSkipListMap#computeIfPresent(K, BiFunction):::If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
ConcurrentSkipListMap#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
ConcurrentSkipListMap#merge(K, V, BiFunction):::If the specified key is not already associated with a value, associates it with the given value
ConcurrentSkipListMap#keySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentSkipListMap#values():::Returns a Collection view of the values contained in this map
ConcurrentSkipListMap#entrySet():::Returns a Set view of the mappings contained in this map
ConcurrentSkipListMap#equals(Object):::Compares the specified object with this map for equality
ConcurrentSkipListMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key
ConcurrentSkipListMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key
ConcurrentSkipListMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry
ConcurrentSkipListMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key
ConcurrentSkipListMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty
ConcurrentSkipListMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty
ConcurrentSkipListMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty
ConcurrentSkipListMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty
ConcurrentSkipListMap.Iter#advance(Node):::Advances next to higher entry.
ConcurrentSkipListMap.SubMap#isBeforeEnd(ConcurrentSkipListMap.Node, Comparator):::Returns true if node key is less than upper bound of range.
ConcurrentSkipListMap.SubMap#loNode(Comparator):::Returns lowest node
ConcurrentSkipListMap.SubMap#hiNode(Comparator):::Returns highest node
ConcurrentSkipListMap.SubMap#lowestKey():::Returns lowest absolute key (ignoring directionality).
ConcurrentSkipListMap.SubMap#highestKey():::Returns highest absolute key (ignoring directionality).
ConcurrentSkipListMap.SubMap#getNearEntry(K, int):::Submap version of ConcurrentSkipListMap.findNearEntry.
ConcurrentSkipListMap.SubMap#newSubMap(K, boolean, K, boolean):::Utility to create submaps, where given bounds override unbounded(null) ones and/or are checked against bounded ones.
ConcurrentSkipListMap#removeEntryIf(Predicate>):::Helper method for EntrySet.removeIf.
ConcurrentSkipListMap#removeValueIf(Predicate):::Helper method for Values.removeIf.
ConcurrentSkipListSet#clone():::Returns a shallow copy of this ConcurrentSkipListSet instance
ConcurrentSkipListSet#size():::Returns the number of elements in this set
ConcurrentSkipListSet#isEmpty():::Returns true if this set contains no elements.
ConcurrentSkipListSet#contains(Object):::Returns true if this set contains the specified element
ConcurrentSkipListSet#add(E):::Adds the specified element to this set if it is not already present
ConcurrentSkipListSet#remove(Object):::Removes the specified element from this set if it is present
ConcurrentSkipListSet#clear():::Removes all of the elements from this set.
ConcurrentSkipListSet#iterator():::Returns an iterator over the elements in this set in ascending order.
ConcurrentSkipListSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.
ConcurrentSkipListSet#equals(Object):::Compares the specified object with this set for equality
ConcurrentSkipListSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection
ConcurrentSkipListSet#descendingSet():::Returns a reverse order view of the elements contained in this set
ConcurrentSkipListSet#spliterator():::Returns a Spliterator over the elements in this set
CopyOnWriteArrayList#getArray():::Gets the array
CopyOnWriteArrayList#setArray(Object[]):::Sets the array.
CopyOnWriteArrayList#size():::Returns the number of elements in this list.
CopyOnWriteArrayList#isEmpty():::Returns true if this list contains no elements.
CopyOnWriteArrayList#contains(Object):::Returns true if this list contains the specified element
CopyOnWriteArrayList#indexOf(E, int):::Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found
CopyOnWriteArrayList#lastIndexOf(E, int):::Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found
CopyOnWriteArrayList#clone():::Returns a shallow copy of this list
CopyOnWriteArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
CopyOnWriteArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
CopyOnWriteArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
CopyOnWriteArrayList#add(E):::Appends the specified element to the end of this list.
CopyOnWriteArrayList#add(int, E):::Inserts the specified element at the specified position in this list
CopyOnWriteArrayList#remove(int):::Removes the element at the specified position in this list
CopyOnWriteArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
CopyOnWriteArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
CopyOnWriteArrayList#addIfAbsent(E):::Appends the element, if not present.
CopyOnWriteArrayList#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.
CopyOnWriteArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection
CopyOnWriteArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection
CopyOnWriteArrayList#addAllAbsent(Collection):::Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.
CopyOnWriteArrayList#clear():::Removes all of the elements from this list
CopyOnWriteArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
CopyOnWriteArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
CopyOnWriteArrayList#toString():::Returns a string representation of this list
CopyOnWriteArrayList#equals(Object):::Compares the specified object with this list for equality
CopyOnWriteArrayList#hashCode():::Returns the hash code value for this list
CopyOnWriteArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence
CopyOnWriteArrayList#listIterator():::  The returned iterator provides a snapshot of the state of the list when the iterator was constructed
CopyOnWriteArrayList#listIterator(int):::  The returned iterator provides a snapshot of the state of the list when the iterator was constructed
CopyOnWriteArrayList#spliterator():::Returns a Spliterator over the elements in this list
CopyOnWriteArrayList.COWIterator#remove():::Not supported
CopyOnWriteArrayList.COWIterator#set(E):::Not supported
CopyOnWriteArrayList.COWIterator#add(E):::Not supported
CopyOnWriteArrayList#subList(int, int):::Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive
CopyOnWriteArraySet#size():::Returns the number of elements in this set.
CopyOnWriteArraySet#isEmpty():::Returns true if this set contains no elements.
CopyOnWriteArraySet#contains(Object):::Returns true if this set contains the specified element
CopyOnWriteArraySet#toArray():::Returns an array containing all of the elements in this set
CopyOnWriteArraySet#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
CopyOnWriteArraySet#clear():::Removes all of the elements from this set
CopyOnWriteArraySet#remove(Object):::Removes the specified element from this set if it is present
CopyOnWriteArraySet#add(E):::Adds the specified element to this set if it is not already present
CopyOnWriteArraySet#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection
CopyOnWriteArraySet#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present
CopyOnWriteArraySet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection
CopyOnWriteArraySet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection
CopyOnWriteArraySet#iterator():::Returns an iterator over the elements contained in this set in the order in which these elements were added
CopyOnWriteArraySet#equals(Object):::Compares the specified object with this set for equality
CopyOnWriteArraySet#spliterator():::Returns a Spliterator over the elements in this set in the order in which these elements were added
CountDownLatch#await():::Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt interrupted
CountDownLatch#await(long, TimeUnit):::Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt interrupted, or the specified waiting time elapses
CountDownLatch#countDown():::Decrements the count of the latch, releasing all waiting threads if the count reaches zero
CountDownLatch#getCount():::Returns the current count
CountDownLatch#toString():::Returns a string identifying this latch, as well as its state
CountedCompleter#compute():::The main computation performed by this task.
CountedCompleter#onCompletion(CountedCompleter):::Performs an action when method #tryComplete is invoked and the pending count is zero, or when the unconditional method #complete is invoked
CountedCompleter#onExceptionalCompletion(Throwable, CountedCompleter):::Performs an action when method #completeExceptionally(Throwable) is invoked or method #compute throws an exception, and this task has not already otherwise completed normally
CountedCompleter#getCompleter():::Returns the completer established in this task's constructor, or null if none.
CountedCompleter#getPendingCount():::Returns the current pending count.
CountedCompleter#setPendingCount(int):::Sets the pending count to the given value.
CountedCompleter#addToPendingCount(int):::Adds (atomically) the given value to the pending count.
CountedCompleter#compareAndSetPendingCount(int, int):::Sets (atomically) the pending count to the given count only if it currently holds the given expected value.
CountedCompleter#decrementPendingCountUnlessZero():::If the pending count is nonzero, (atomically) decrements it.
CountedCompleter#getRoot():::Returns the root of the current computation; i.e., this task if it has no completer, else its completer's root.
CountedCompleter#tryComplete():::If the pending count is nonzero, decrements the count; otherwise invokes #onCompletion(CountedCompleter) and then similarly tries to complete this task's completer, if one exists, else marks this task as complete.
CountedCompleter#propagateCompletion():::Equivalent to #tryComplete but does not invoke #onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task's completer, if one exists, else marks this task as complete
CountedCompleter#complete(T):::Regardless of pending count, invokes #onCompletion(CountedCompleter), marks this task as complete and further triggers #tryComplete on this task's completer, if one exists
CountedCompleter#firstComplete():::If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns null
CountedCompleter#nextComplete():::If this task does not have a completer, invokes ForkJoinTask#quietlyComplete and returns null
CountedCompleter#quietlyCompleteRoot():::Equivalent to getRoot().quietlyComplete().
CountedCompleter#helpComplete(int):::If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.
CountedCompleter#internalPropagateException(Throwable):::Supports ForkJoinTask exception propagation.
CountedCompleter#exec():::Implements execution conventions for CountedCompleters.
CountedCompleter#getRawResult():::Returns the result of the computation
CountedCompleter#setRawResult(T):::A method that result-bearing CountedCompleters may optionally use to help maintain result data
CyclicBarrier#getParties():::Returns the number of parties required to trip this barrier.
CyclicBarrier#await():::Waits until all #getParties parties have invoked await on this barrier
CyclicBarrier#await(long, TimeUnit):::Waits until all #getParties parties have invoked await on this barrier, or the specified waiting time elapses
CyclicBarrier#isBroken():::Queries if this barrier is in a broken state.
CyclicBarrier#reset():::Resets the barrier to its initial state
CyclicBarrier#getNumberWaiting():::Returns the number of parties currently waiting at the barrier
Delayed#getDelay(TimeUnit):::Returns the remaining delay associated with this object, in the given time unit.
DelayQueue#add(E):::Inserts the specified element into this delay queue.
DelayQueue#offer(E):::Inserts the specified element into this delay queue.
DelayQueue#put(E):::Inserts the specified element into this delay queue
DelayQueue#offer(E, long, TimeUnit):::Inserts the specified element into this delay queue
DelayQueue#poll():::Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay.
DelayQueue#take():::Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue.
DelayQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires.
DelayQueue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty
DelayQueue#clear():::Atomically removes all of the elements from this delay queue
DelayQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained.
DelayQueue#toArray():::Returns an array containing all of the elements in this queue
DelayQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
DelayQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.
DelayQueue#removeEQ(Object):::Identity-based version for use in Itr.remove.
DelayQueue#iterator():::Returns an iterator over all the elements (both expired and unexpired) in this queue
Exchanger#exchange(V):::Waits for another thread to arrive at this exchange point (unless the current thread is Thread#interrupt interrupted), and then transfers the given object to it, receiving its object in return
Exchanger#exchange(V, long, TimeUnit):::Waits for another thread to arrive at this exchange point (unless the current thread is Thread#interrupt interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return
Executor#execute(Runnable):::Executes the given command at some time in the future
Executors#newFixedThreadPool(int):::Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue
Executors#newWorkStealingPool(int):::Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention
Executors#newWorkStealingPool():::Creates a work-stealing thread pool using the number of Runtime#availableProcessors available processors as its target parallelism level.
Executors#newFixedThreadPool(int, ThreadFactory):::Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed
Executors#newSingleThreadExecutor():::Creates an Executor that uses a single worker thread operating off an unbounded queue
Executors#newSingleThreadExecutor(ThreadFactory):::Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed
Executors#newCachedThreadPool():::Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available
Executors#newCachedThreadPool(ThreadFactory):::Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.
Executors#newSingleThreadScheduledExecutor():::Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Executors#newSingleThreadScheduledExecutor(ThreadFactory):::Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Executors#newScheduledThreadPool(int):::Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
Executors#newScheduledThreadPool(int, ThreadFactory):::Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
Executors#unconfigurableExecutorService(ExecutorService):::Returns an object that delegates all defined ExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts
Executors#unconfigurableScheduledExecutorService(ScheduledExecutorService):::Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts
Executors#defaultThreadFactory():::Returns a default thread factory used to create new threads
Executors#privilegedThreadFactory():::Returns a thread factory used to create new threads that have the same permissions as the current thread
Executors#callable(Runnable, T):::Returns a Callable object that, when called, runs the given task and returns the given result
Executors#callable(Runnable):::Returns a Callable object that, when called, runs the given task and returns null.
Executors#callable(PrivilegedAction):::Returns a Callable object that, when called, runs the given privileged action and returns its result.
Executors#callable(PrivilegedExceptionAction):::Returns a Callable object that, when called, runs the given privileged exception action and returns its result.
Executors#privilegedCallable(Callable):::Returns a Callable object that will, when called, execute the given callable under the current access control context
Executors#privilegedCallableUsingCurrentClassLoader(Callable):::Returns a Callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader
ExecutorService#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ExecutorService#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ExecutorService#isShutdown():::Returns true if this executor has been shut down.
ExecutorService#isTerminated():::Returns true if all tasks have completed following shut down
ExecutorService#awaitTermination(long, TimeUnit):::Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.
ExecutorService#submit(Callable):::Submits a value-returning task for execution and returns a Future representing the pending results of the task
ExecutorService#submit(Runnable, T):::Submits a Runnable task for execution and returns a Future representing that task
ExecutorService#submit(Runnable):::Submits a Runnable task for execution and returns a Future representing that task
ExecutorService#invokeAll(Collection>):::Executes the given tasks, returning a list of Futures holding their status and results when all complete
ExecutorService#invokeAll(Collection>, long, TimeUnit):::Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first
ExecutorService#invokeAny(Collection>):::Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do
ExecutorService#invokeAny(Collection>, long, TimeUnit):::Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses
Flow.Publisher#subscribe(Subscriber):::Adds the given Subscriber if possible
Flow.Subscriber#onSubscribe(Subscription):::Method invoked prior to invoking any other Subscriber methods for the given Subscription
Flow.Subscriber#onNext(T):::Method invoked with a Subscription's next item
Flow.Subscriber#onError(Throwable):::Method invoked upon an unrecoverable error encountered by a Publisher or Subscription, after which no other Subscriber methods are invoked by the Subscription
Flow.Subscriber#onComplete():::Method invoked when it is known that no additional Subscriber method invocations will occur for a Subscription that is not already terminated by error, after which no other Subscriber methods are invoked by the Subscription
Flow.Subscription#request(long):::Adds the given number n of items to the current unfulfilled demand for this subscription
Flow.Subscription#cancel():::Causes the Subscriber to (eventually) stop receiving messages
Flow#defaultBufferSize():::Returns a default value for Publisher or Subscriber buffering, that may be used in the absence of other constraints.
ForkJoinPool.ForkJoinWorkerThreadFactory#newThread(ForkJoinPool):::Returns a new worker thread operating in the given pool
ForkJoinPool.WorkQueue#tryLockPhase():::Tries to lock shared queue by CASing phase field.
ForkJoinPool.WorkQueue#getPoolIndex():::Returns an exportable index (used by ForkJoinWorkerThread).
ForkJoinPool.WorkQueue#queueSize():::Returns the approximate number of tasks in the queue.
ForkJoinPool.WorkQueue#isEmpty():::Provides a more accurate estimate of whether this queue has any tasks than does queueSize, by checking whether a near-empty queue has at least one unclaimed task.
ForkJoinPool.WorkQueue#push(ForkJoinTask):::Pushes a task
ForkJoinPool.WorkQueue#lockedPush(ForkJoinTask):::Version of push for shared queues
ForkJoinPool.WorkQueue#growArray(boolean):::Doubles the capacity of array
ForkJoinPool.WorkQueue#poll():::Takes next task, if one exists, in FIFO order.
ForkJoinPool.WorkQueue#nextLocalTask():::Takes next task, if one exists, in order specified by mode.
ForkJoinPool.WorkQueue#peek():::Returns next task, if one exists, in order specified by mode.
ForkJoinPool.WorkQueue#tryUnpush(ForkJoinTask):::Pops the given task only if it is at the current top.
ForkJoinPool.WorkQueue#tryLockedUnpush(ForkJoinTask):::Shared version of tryUnpush.
ForkJoinPool.WorkQueue#cancelAll():::Removes and cancels all known tasks, ignoring any exceptions.
ForkJoinPool.WorkQueue#topLevelExec(ForkJoinTask, WorkQueue, int):::Runs the given (stolen) task if nonnull, as well as remaining local tasks and others available from the given queue, up to bound n (to avoid infinite unfairness).
ForkJoinPool.WorkQueue#tryRemoveAndExec(ForkJoinTask):::If present, removes task from queue and executes it.
ForkJoinPool.WorkQueue#helpCC(CountedCompleter, int, boolean):::Tries to pop and run tasks within the target's computation until done, not found, or limit exceeded.
ForkJoinPool.WorkQueue#helpAsyncBlocker(ManagedBlocker):::Tries to poll and run AsynchronousCompletionTasks until none found or blocker is released
ForkJoinPool.WorkQueue#isApparentlyUnblocked():::Returns true if owned and not known to be blocked.
ForkJoinPool#registerWorker(ForkJoinWorkerThread):::Callback from ForkJoinWorkerThread constructor to establish and record its WorkQueue.
ForkJoinPool#deregisterWorker(ForkJoinWorkerThread, Throwable):::Final callback from terminating worker, as well as upon failure to construct or start a worker
ForkJoinPool#signalWork():::Tries to create or release a worker if too few are running.
ForkJoinPool#runWorker(WorkQueue):::Top-level runloop for workers, called by ForkJoinWorkerThread.run
ForkJoinPool#awaitJoin(WorkQueue, ForkJoinTask, long):::Helps and/or blocks until the given task is done or timeout
ForkJoinPool#helpQuiescePool(WorkQueue):::Runs tasks until isQuiescent()
ForkJoinPool#nextTaskFor(WorkQueue):::Gets and removes a local or stolen task for the given worker.
ForkJoinPool#externalPush(ForkJoinTask):::Adds the given task to a submission queue at submitter's current queue, creating one if null or contended.
ForkJoinPool#commonSubmitterQueue():::Returns common pool queue for an external thread.
ForkJoinPool#tryExternalUnpush(ForkJoinTask):::Performs tryUnpush for an external submitter.
ForkJoinPool#externalHelpComplete(CountedCompleter, int):::Performs helpComplete for an external submitter.
ForkJoinPool#helpComplete(WorkQueue, CountedCompleter, int):::Tries to steal and run tasks within the target's computation
ForkJoinPool#getSurplusQueuedTaskCount():::Returns a cheap heuristic guide for task partitioning when programmers, frameworks, tools, or languages have little or no idea about task granularity
ForkJoinPool#commonPool():::Returns the common pool instance
ForkJoinPool#invoke(ForkJoinTask):::Performs the given task, returning its result upon completion
ForkJoinPool#execute(ForkJoinTask):::Arranges for (asynchronous) execution of the given task.
ForkJoinPool#submit(ForkJoinTask):::Submits a ForkJoinTask for execution.
ForkJoinPool#getFactory():::Returns the factory used for constructing new workers.
ForkJoinPool#getUncaughtExceptionHandler():::Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.
ForkJoinPool#getParallelism():::Returns the targeted parallelism level of this pool.
ForkJoinPool#getCommonPoolParallelism():::Returns the targeted parallelism level of the common pool.
ForkJoinPool#getPoolSize():::Returns the number of worker threads that have started but not yet terminated
ForkJoinPool#getAsyncMode():::Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.
ForkJoinPool#getRunningThreadCount():::Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization
ForkJoinPool#getActiveThreadCount():::Returns an estimate of the number of threads that are currently stealing or executing tasks
ForkJoinPool#isQuiescent():::Returns true if all worker threads are currently idle
ForkJoinPool#getStealCount():::Returns an estimate of the total number of tasks stolen from one thread's work queue by another
ForkJoinPool#getQueuedTaskCount():::Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing)
ForkJoinPool#getQueuedSubmissionCount():::Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing
ForkJoinPool#hasQueuedSubmissions():::Returns true if there are any tasks submitted to this pool that have not yet begun executing.
ForkJoinPool#pollSubmission():::Removes and returns the next unexecuted submission if one is available
ForkJoinPool#drainTasksTo(Collection>):::Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status
ForkJoinPool#toString():::Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.
ForkJoinPool#shutdown():::Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ForkJoinPool#shutdownNow():::Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks
ForkJoinPool#isTerminated():::Returns true if all tasks have completed following shut down.
ForkJoinPool#isTerminating():::Returns true if the process of termination has commenced but not yet completed
ForkJoinPool#isShutdown():::Returns true if this pool has been shut down.
ForkJoinPool#awaitTermination(long, TimeUnit):::Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first
ForkJoinPool#awaitQuiescence(long, TimeUnit):::If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask#helpQuiesce
ForkJoinPool#quiesceCommonPool():::Waits and/or attempts to assist performing tasks indefinitely until the #commonPool() #isQuiescent.
ForkJoinPool.ManagedBlocker#block():::Possibly blocks the current thread, for example waiting for a lock or condition.
ForkJoinPool.ManagedBlocker#isReleasable():::Returns true if blocking is unnecessary.
ForkJoinPool#managedBlock(ManagedBlocker):::Runs the given possibly blocking task
ForkJoinPool#helpAsyncBlocker(Executor, ManagedBlocker):::If the given executor is a ForkJoinPool, poll and execute AsynchronousCompletionTasks from worker's queue until none are available or blocker is released.
ForkJoinTask#doExec():::Primary execution method for stolen tasks
ForkJoinTask#internalWait(long):::If not done, sets SIGNAL status and performs Object.wait(timeout)
ForkJoinTask#recordExceptionalCompletion(Throwable):::Records exception and sets status.
ForkJoinTask#internalPropagateException(Throwable):::Hook for exception propagation support for tasks with completers.
ForkJoinTask#cancelIgnoringExceptions(ForkJoinTask):::Cancels, ignoring any exceptions thrown by cancel
ForkJoinTask#helpExpungeStaleExceptions():::If lock is available, polls stale refs and removes them
ForkJoinTask#rethrow(Throwable):::A version of "sneaky throw" to relay exceptions.
ForkJoinTask#uncheckedThrow(Throwable):::The sneaky part of sneaky throw, relying on generics limitations to evade compiler complaints about rethrowing unchecked exceptions.
ForkJoinTask#fork():::Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool#commonPool() if not #inForkJoinPool
ForkJoinTask#join():::Returns the result of the computation when it #isDone is done
ForkJoinTask#invoke():::Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so.
ForkJoinTask#invokeAll(ForkJoinTask, ForkJoinTask):::Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#invokeAll(ForkJoinTask...):::Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#invokeAll(Collection):::Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#cancel(boolean):::Attempts to cancel execution of this task
ForkJoinTask#isCompletedAbnormally():::Returns true if this task threw an exception or was cancelled.
ForkJoinTask#isCompletedNormally():::Returns true if this task completed without throwing an exception and was not cancelled.
ForkJoinTask#getException():::Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed.
ForkJoinTask#completeExceptionally(Throwable):::Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations
ForkJoinTask#complete(V):::Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations
ForkJoinTask#quietlyComplete():::Completes this task normally without setting a value
ForkJoinTask#get():::Waits if necessary for the computation to complete, and then retrieves its result.
ForkJoinTask#get(long, TimeUnit):::Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.
ForkJoinTask#quietlyJoin():::Joins this task, without returning its result or throwing its exception
ForkJoinTask#quietlyInvoke():::Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.
ForkJoinTask#helpQuiesce():::Possibly executes tasks until the pool hosting the current task ForkJoinPool#isQuiescent is quiescent
ForkJoinTask#reinitialize():::Resets the internal bookkeeping state of this task, allowing a subsequent fork
ForkJoinTask#getPool():::Returns the pool hosting the current thread, or null if the current thread is executing outside of any ForkJoinPool
ForkJoinTask#inForkJoinPool():::Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.
ForkJoinTask#tryUnfork():::Tries to unschedule this task for execution
ForkJoinTask#getQueuedTaskCount():::Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed
ForkJoinTask#getSurplusQueuedTaskCount():::Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool
ForkJoinTask#getRawResult():::Returns the result that would be returned by #join, even if this task completed abnormally, or null if this task is not known to have been completed
ForkJoinTask#setRawResult(V):::Forces the given value to be returned as a result
ForkJoinTask#exec():::Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally
ForkJoinTask#peekNextLocalTask():::Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available
ForkJoinTask#pollNextLocalTask():::Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool
ForkJoinTask#pollTask():::If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available
ForkJoinTask#pollSubmission():::If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, a task externally submitted to the pool, if one is available
ForkJoinTask#getForkJoinTaskTag():::Returns the tag for this task.
ForkJoinTask#setForkJoinTaskTag(short):::Atomically sets the tag value for this task and returns the old value.
ForkJoinTask#compareAndSetForkJoinTaskTag(short, short):::Atomically conditionally sets the tag value for this task
ForkJoinTask#adapt(Runnable):::Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon #join.
ForkJoinTask#adapt(Runnable, T):::Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon #join.
ForkJoinTask#adapt(Callable):::Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon #join, translating any checked exceptions encountered into RuntimeException.
ForkJoinWorkerThread#getPool():::Returns the pool hosting this thread.
ForkJoinWorkerThread#getPoolIndex():::Returns the unique index number of this thread in its pool
ForkJoinWorkerThread#onStart():::Initializes internal state after construction but before processing any tasks
ForkJoinWorkerThread#onTermination(Throwable):::Performs cleanup associated with termination of this worker thread
ForkJoinWorkerThread#run():::This method is required to be public, but should never be called explicitly
ForkJoinWorkerThread#afterTopLevelExec():::Non-public hook method for InnocuousForkJoinWorkerThread.
Future#cancel(boolean):::Attempts to cancel execution of this task
Future#isCancelled():::Returns true if this task was cancelled before it completed normally.
Future#isDone():::Returns true if this task completed
Future#get():::Waits if necessary for the computation to complete, and then retrieves its result.
Future#get(long, TimeUnit):::Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.
FutureTask#done():::Protected method invoked when this task transitions to state isDone (whether normally or via cancellation)
FutureTask#set(V):::Sets the result of this future to the given value unless this future has already been set or has been cancelled
FutureTask#setException(Throwable):::Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled
FutureTask#runAndReset():::Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled
FutureTask#toString():::Returns a string representation of this FutureTask.
Helpers#collectionToString(Collection):::An implementation of Collection.toString() suitable for classes with locks
Helpers#toString(Object[], int, int):::Like Arrays.toString(), but caller guarantees that size > 0, each element with index 0 <= i < size is a non-null String, and charLength is the sum of the lengths of the input Strings.
Helpers#mapEntryToString(Object, Object):::Optimized form of: key + "=" + val
LinkedBlockingDeque#unlink(Node):::Unlinks x.
LinkedBlockingDeque#add(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions
LinkedBlockingDeque#remove():::Retrieves and removes the head of the queue represented by this deque
LinkedBlockingDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque
LinkedBlockingDeque#remainingCapacity():::Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking
LinkedBlockingDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
LinkedBlockingDeque#size():::Returns the number of elements in this deque.
LinkedBlockingDeque#contains(Object):::Returns true if this deque contains the specified element
LinkedBlockingDeque#addAll(Collection):::Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator
LinkedBlockingDeque#toArray():::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
LinkedBlockingDeque#toArray(T[]):::Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedBlockingDeque#clear():::Atomically removes all of the elements from this deque
LinkedBlockingDeque#succ(Node):::Used for any element traversal that is not entirely under lock
LinkedBlockingDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
LinkedBlockingDeque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
LinkedBlockingDeque#spliterator():::Returns a Spliterator over the elements in this deque
LinkedBlockingDeque#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
LinkedBlockingQueue#fullyLock():::Locks to prevent both puts and takes.
LinkedBlockingQueue#fullyUnlock():::Unlocks to allow both puts and takes.
LinkedBlockingQueue#size():::Returns the number of elements in this queue.
LinkedBlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
LinkedBlockingQueue#put(E):::Inserts the specified element at the tail of this queue, waiting if necessary for space to become available.
LinkedBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available.
LinkedBlockingQueue#offer(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full
LinkedBlockingQueue#unlink(Node, Node):::Unlinks interior Node p with predecessor pred.
LinkedBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
LinkedBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
LinkedBlockingQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
LinkedBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedBlockingQueue#clear():::Atomically removes all of the elements from this queue
LinkedBlockingQueue#succ(Node):::Used for any element traversal that is not entirely under lock
LinkedBlockingQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
LinkedBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
LinkedBlockingQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
LinkedBlockingQueue#findPred(Node, Node):::Returns the predecessor of live node p, given a node that was once a live ancestor of p (or head); allows unlinking of p.
LinkedTransferQueue.Node#selfLink():::Links node to itself to avoid garbage retention
LinkedTransferQueue.Node#forgetContents():::Sets item (of a request node) to self and waiter to null, to avoid garbage retention after matching or cancelling
LinkedTransferQueue.Node#isMatched():::Returns true if this node has been matched, including the case of artificial matches due to cancellation.
LinkedTransferQueue.Node#tryMatch(Object, Object):::Tries to CAS-match this node; if successful, wakes waiter.
LinkedTransferQueue.Node#cannotPrecede(boolean):::Returns true if a node with the given mode cannot be appended to this node because this node is unmatched and has opposite data mode.
LinkedTransferQueue#firstDataNode():::Returns the first unmatched data node, or null if none
LinkedTransferQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
LinkedTransferQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedTransferQueue#spliterator():::Returns a Spliterator over the elements in this queue
LinkedTransferQueue#unsplice(Node, Node):::Unsplices (now or later) the given deleted/cancelled node with the given predecessor.
LinkedTransferQueue#put(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#offer(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#add(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#tryTransfer(E):::Transfers the element to a waiting consumer immediately, if possible
LinkedTransferQueue#transfer(E):::Transfers the element to a consumer, waiting if necessary to do so
LinkedTransferQueue#tryTransfer(E, long, TimeUnit):::Transfers the element to a consumer if it is possible to do so before the timeout elapses
LinkedTransferQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
LinkedTransferQueue#isEmpty():::Returns true if this queue contains no elements.
LinkedTransferQueue#size():::Returns the number of elements in this queue
LinkedTransferQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
LinkedTransferQueue#contains(Object):::Returns true if this queue contains the specified element
LinkedTransferQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a LinkedTransferQueue is not capacity constrained.
LinkedTransferQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
Phaser#register():::Adds a new unarrived party to this phaser
Phaser#bulkRegister(int):::Adds the given number of new unarrived parties to this phaser
Phaser#arrive():::Arrives at this phaser, without waiting for others to arrive
Phaser#arriveAndDeregister():::Arrives at this phaser and deregisters from it without waiting for others to arrive
Phaser#arriveAndAwaitAdvance():::Arrives at this phaser and awaits others
Phaser#awaitAdvance(int):::Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#awaitAdvanceInterruptibly(int):::Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#awaitAdvanceInterruptibly(int, long, TimeUnit):::Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#forceTermination():::Forces this phaser to enter termination state
Phaser#getPhase():::Returns the current phase number
Phaser#getRegisteredParties():::Returns the number of parties registered at this phaser.
Phaser#getArrivedParties():::Returns the number of registered parties that have arrived at the current phase of this phaser
Phaser#getUnarrivedParties():::Returns the number of registered parties that have not yet arrived at the current phase of this phaser
Phaser#getParent():::Returns the parent of this phaser, or null if none.
Phaser#getRoot():::Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent.
Phaser#isTerminated():::Returns true if this phaser has been terminated.
Phaser#onAdvance(int, int):::Overridable method to perform an action upon impending phase advance, and to control termination
Phaser#toString():::Returns a string identifying this phaser, as well as its state
PriorityBlockingQueue#add(E):::Inserts the specified element into this priority queue.
PriorityBlockingQueue#offer(E):::Inserts the specified element into this priority queue
PriorityBlockingQueue#put(E):::Inserts the specified element into this priority queue
PriorityBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element into this priority queue
PriorityBlockingQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue uses the Comparable natural ordering of its elements.
PriorityBlockingQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained.
PriorityBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
PriorityBlockingQueue#removeEq(Object):::Identity-based version for use in Itr.remove.
PriorityBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
PriorityBlockingQueue#clear():::Atomically removes all of the elements from this queue
PriorityBlockingQueue#toArray():::Returns an array containing all of the elements in this queue
PriorityBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
PriorityBlockingQueue#iterator():::Returns an iterator over the elements in this queue
PriorityBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
RecursiveAction#compute():::The main computation performed by this task.
RecursiveAction#getRawResult():::Always returns null.
RecursiveAction#setRawResult(Void):::Requires null completion value.
RecursiveAction#exec():::Implements execution conventions for RecursiveActions.
RecursiveTask#compute():::The main computation performed by this task.
RecursiveTask#exec():::Implements execution conventions for RecursiveTask.
RejectedExecutionHandler#rejectedExecution(Runnable, ThreadPoolExecutor):::Method that may be invoked by a ThreadPoolExecutor when ThreadPoolExecutor#execute execute cannot accept a task
RunnableFuture#run():::Sets this Future to the result of its computation unless it has been cancelled.
RunnableScheduledFuture#isPeriodic():::Returns true if this task is periodic
ScheduledExecutorService#schedule(Runnable, long, TimeUnit):::Submits a one-shot task that becomes enabled after the given delay.
ScheduledExecutorService#schedule(Callable, long, TimeUnit):::Submits a value-returning one-shot task that becomes enabled after the given delay.
ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on
ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
ScheduledThreadPoolExecutor#canRunInCurrentRunState(RunnableScheduledFuture):::Returns true if can run a task given current run state and run-after-shutdown parameters.
ScheduledThreadPoolExecutor#reExecutePeriodic(RunnableScheduledFuture):::Requeues a periodic task unless current run state precludes it
ScheduledThreadPoolExecutor#onShutdown():::Cancels and clears the queue of all tasks that should not be run due to shutdown policy
ScheduledThreadPoolExecutor#decorateTask(Runnable, RunnableScheduledFuture):::Modifies or replaces the task used to execute a runnable
ScheduledThreadPoolExecutor#decorateTask(Callable, RunnableScheduledFuture):::Modifies or replaces the task used to execute a callable
ScheduledThreadPoolExecutor#triggerTime(long):::Returns the nanoTime-based trigger time of a delayed action.
ScheduledThreadPoolExecutor#scheduleAtFixedRate(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on
ScheduledThreadPoolExecutor#scheduleWithFixedDelay(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
ScheduledThreadPoolExecutor#execute(Runnable):::Executes command with zero required delay
ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean):::Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy():::Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean):::Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy():::Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy(boolean):::Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy():::Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
ScheduledThreadPoolExecutor#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ScheduledThreadPoolExecutor#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ScheduledThreadPoolExecutor#getQueue():::Returns the task queue used by this executor
Semaphore#acquire():::Acquires a permit from this semaphore, blocking until one is available, or the thread is Thread#interrupt interrupted
Semaphore#acquireUninterruptibly():::Acquires a permit from this semaphore, blocking until one is available
Semaphore#tryAcquire():::Acquires a permit from this semaphore, only if one is available at the time of invocation
Semaphore#tryAcquire(long, TimeUnit):::Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been Thread#interrupt interrupted
Semaphore#release():::Releases a permit, returning it to the semaphore
Semaphore#acquire(int):::Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is Thread#interrupt interrupted
Semaphore#acquireUninterruptibly(int):::Acquires the given number of permits from this semaphore, blocking until all are available
Semaphore#tryAcquire(int):::Acquires the given number of permits from this semaphore, only if all are available at the time of invocation
Semaphore#tryAcquire(int, long, TimeUnit):::Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been Thread#interrupt interrupted
Semaphore#release(int):::Releases the given number of permits, returning them to the semaphore
Semaphore#availablePermits():::Returns the current number of permits available in this semaphore
Semaphore#drainPermits():::Acquires and returns all permits that are immediately available, or if negative permits are available, releases them
Semaphore#reducePermits(int):::Shrinks the number of available permits by the indicated reduction
Semaphore#isFair():::Returns true if this semaphore has fairness set true.
Semaphore#hasQueuedThreads():::Queries whether any threads are waiting to acquire
Semaphore#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
Semaphore#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
Semaphore#toString():::Returns a string identifying this semaphore, as well as its state
SubmissionPublisher#roundCapacity(int):::Round capacity to power of 2, at most limit.
SubmissionPublisher#subscribe(Subscriber):::Adds the given Subscriber unless already subscribed
SubmissionPublisher#submit(T):::Publishes the given item to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method, blocking uninterruptibly while resources for any subscriber are unavailable
SubmissionPublisher#offer(T, BiPredicate, ? super T>):::Publishes the given item, if possible, to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method
SubmissionPublisher#offer(T, long, TimeUnit, BiPredicate, ? super T>):::Publishes the given item, if possible, to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method, blocking while resources for any subscription are unavailable, up to the specified timeout or until the caller thread is interrupted, at which point the given handler (if non-null) is invoked, and if it returns true, retried once
SubmissionPublisher#close():::Unless already closed, issues Flow.Subscriber#onComplete() onComplete signals to current subscribers, and disallows subsequent attempts to publish
SubmissionPublisher#closeExceptionally(Throwable):::Unless already closed, issues Flow.Subscriber#onError(Throwable) onError signals to current subscribers with the given error, and disallows subsequent attempts to publish
SubmissionPublisher#isClosed():::Returns true if this publisher is not accepting submissions.
SubmissionPublisher#getClosedException():::Returns the exception associated with #closeExceptionally(Throwable) closeExceptionally, or null if not closed or if closed normally.
SubmissionPublisher#hasSubscribers():::Returns true if this publisher has any subscribers.
SubmissionPublisher#getNumberOfSubscribers():::Returns the number of current subscribers.
SubmissionPublisher#getExecutor():::Returns the Executor used for asynchronous delivery.
SubmissionPublisher#getMaxBufferCapacity():::Returns the maximum per-subscriber buffer capacity.
SubmissionPublisher#getSubscribers():::Returns a list of current subscribers for monitoring and tracking purposes, not for invoking Flow.Subscriber methods on the subscribers.
SubmissionPublisher#isSubscribed(Subscriber):::Returns true if the given Subscriber is currently subscribed.
SubmissionPublisher#estimateMinimumDemand():::Returns an estimate of the minimum number of items requested (via Flow.Subscription#request(long) request) but not yet produced, among all current subscribers.
SubmissionPublisher#estimateMaximumLag():::Returns an estimate of the maximum number of items produced but not yet consumed among all current subscribers.
SubmissionPublisher#consume(Consumer):::Processes all published items using the given Consumer function
SubmissionPublisher.BufferedSubscription#isClosed():::Returns true if closed (consumer task may still be running).
SubmissionPublisher.BufferedSubscription#estimateLag():::Returns estimated number of buffered items, or negative if closed.
SubmissionPublisher.BufferedSubscription#offer(T, boolean):::Tries to add item and start consumer task if necessary.
SubmissionPublisher.BufferedSubscription#growAndOffer(T, Object[], int):::Tries to expand buffer and add item, returning true on success
SubmissionPublisher.BufferedSubscription#retryOffer(T):::Version of offer for retries (no resize or bias)
SubmissionPublisher.BufferedSubscription#startOnOffer(int):::Tries to start consumer task after offer.
SubmissionPublisher.BufferedSubscription#tryStart():::Tries to start consumer task
SubmissionPublisher.BufferedSubscription#startOnSignal(int):::Sets the given control bits, starting task if not running or closed.
SubmissionPublisher.BufferedSubscription#consume():::Consumer loop, called from ConsumerTask, or indirectly when helping during submit.
SubmissionPublisher.BufferedSubscription#takeItems(Subscriber, long, int):::Consumes some items until unavailable or bound or error.
SubmissionPublisher.BufferedSubscription#handleOnNext(Subscriber, Throwable):::Processes exception in Subscriber.onNext.
SubmissionPublisher.BufferedSubscription#subscribeOnOpen(Subscriber):::Issues subscriber.onSubscribe if this is first signal.
SubmissionPublisher.BufferedSubscription#closeOnComplete(Subscriber):::Issues subscriber.onComplete unless already closed.
SubmissionPublisher.BufferedSubscription#closeOnError(Subscriber, Throwable):::Issues subscriber.onError, and unblocks producer if needed.
SubmissionPublisher.BufferedSubscription#signalWaiter():::Unblocks waiting producer.
SubmissionPublisher.BufferedSubscription#isReleasable():::Returns true if closed or space available
SubmissionPublisher.BufferedSubscription#awaitSpace(long):::Helps or blocks until timeout, closed, or space available.
SubmissionPublisher.BufferedSubscription#block():::Blocks until closed, space available or timeout
SynchronousQueue.Transferer#transfer(E, boolean, long):::Performs a put or take.
SynchronousQueue.TransferStack#isFulfilling(int):::Returns true if m has fulfilling bit set.
SynchronousQueue.TransferStack.SNode#tryMatch(SNode):::Tries to match node s to this node, if so, waking up thread
SynchronousQueue.TransferStack.SNode#tryCancel():::Tries to cancel a wait by matching node to itself.
SynchronousQueue.TransferStack#snode(SNode, Object, SNode, int):::Creates or resets fields of a node
SynchronousQueue.TransferStack#transfer(E, boolean, long):::Puts or takes an item.
SynchronousQueue.TransferStack#awaitFulfill(SNode, boolean, long):::Spins/blocks until node s is matched by a fulfill operation.
SynchronousQueue.TransferStack#shouldSpin(SNode):::Returns true if node s is at head or there is an active fulfiller.
SynchronousQueue.TransferStack#clean(SNode):::Unlinks s from the stack.
SynchronousQueue.TransferQueue.QNode#tryCancel(Object):::Tries to cancel by CAS'ing ref to this as item.
SynchronousQueue.TransferQueue.QNode#isOffList():::Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation.
SynchronousQueue.TransferQueue#advanceHead(QNode, QNode):::Tries to cas nh as new head; if successful, unlink old head's next node to avoid garbage retention.
SynchronousQueue.TransferQueue#advanceTail(QNode, QNode):::Tries to cas nt as new tail.
SynchronousQueue.TransferQueue#casCleanMe(QNode, QNode):::Tries to CAS cleanMe slot.
SynchronousQueue.TransferQueue#transfer(E, boolean, long):::Puts or takes an item.
SynchronousQueue.TransferQueue#awaitFulfill(QNode, E, boolean, long):::Spins/blocks until node s is fulfilled.
SynchronousQueue.TransferQueue#clean(QNode, QNode):::Gets rid of cancelled node s with original predecessor pred.
SynchronousQueue#put(E):::Adds the specified element to this queue, waiting if necessary for another thread to receive it.
SynchronousQueue#offer(E, long, TimeUnit):::Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.
SynchronousQueue#offer(E):::Inserts the specified element into this queue, if another thread is waiting to receive it.
SynchronousQueue#take():::Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.
SynchronousQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.
SynchronousQueue#poll():::Retrieves and removes the head of this queue, if another thread is currently making an element available.
SynchronousQueue#isEmpty():::Always returns true
SynchronousQueue#size():::Always returns zero
SynchronousQueue#remainingCapacity():::Always returns zero
SynchronousQueue#clear():::Does nothing
SynchronousQueue#contains(Object):::Always returns false
SynchronousQueue#remove(Object):::Always returns false
SynchronousQueue#containsAll(Collection):::Returns false unless the given collection is empty
SynchronousQueue#removeAll(Collection):::Always returns false
SynchronousQueue#retainAll(Collection):::Always returns false
SynchronousQueue#peek():::Always returns null
SynchronousQueue#iterator():::Returns an empty iterator in which hasNext always returns false.
SynchronousQueue#spliterator():::Returns an empty spliterator in which calls to Spliterator#trySplit() trySplit always return null.
SynchronousQueue#toArray():::Returns a zero-length array.
SynchronousQueue#toArray(T[]):::Sets the zeroth element of the specified array to null (if the array has non-zero length) and returns it.
SynchronousQueue#toString():::Always returns "[]".
ThreadFactory#newThread(Runnable):::Constructs a new Thread
ThreadLocalRandom#localInit():::Initialize Thread fields for the current thread
ThreadLocalRandom#current():::Returns the current thread's ThreadLocalRandom.
ThreadLocalRandom#setSeed(long):::Throws UnsupportedOperationException
ThreadLocalRandom#next(int):::Generates a pseudorandom number with the indicated number of low-order bits
ThreadLocalRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
ThreadLocalRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
ThreadLocalRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
ThreadLocalRandom#nextInt():::Returns a pseudorandom int value.
ThreadLocalRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextLong():::Returns a pseudorandom long value.
ThreadLocalRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
ThreadLocalRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
ThreadLocalRandom#nextBoolean():::Returns a pseudorandom boolean value.
ThreadLocalRandom#nextFloat():::Returns a pseudorandom float value between zero (inclusive) and one (exclusive).
ThreadLocalRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values.
ThreadLocalRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values.
ThreadLocalRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values.
ThreadLocalRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values.
ThreadLocalRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).
ThreadLocalRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).
ThreadLocalRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#getProbe():::Returns the probe value for the current thread without forcing initialization
ThreadLocalRandom#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread.
ThreadLocalRandom#nextSecondarySeed():::Returns the pseudo-randomly initialized or updated secondary seed.
ThreadLocalRandom#eraseThreadLocals(Thread):::Erases ThreadLocals by nulling out Thread maps.
ThreadPoolExecutor#tryTerminate():::Transitions to TERMINATED state if either (SHUTDOWN and pool and queue empty) or (STOP and pool empty)
ThreadPoolExecutor#reject(Runnable):::Invokes the rejected execution handler for the given command
ThreadPoolExecutor#onShutdown():::Performs any further cleanup following run state transition on invocation of shutdown
ThreadPoolExecutor#runWorker(Worker):::Main worker run loop
ThreadPoolExecutor#execute(Runnable):::Executes the given task sometime in the future
ThreadPoolExecutor#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ThreadPoolExecutor#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ThreadPoolExecutor#isStopped():::Used by ScheduledThreadPoolExecutor.
ThreadPoolExecutor#isTerminating():::Returns true if this executor is in the process of terminating after #shutdown or #shutdownNow but has not completely terminated
ThreadPoolExecutor#setThreadFactory(ThreadFactory):::Sets the thread factory used to create new threads.
ThreadPoolExecutor#getThreadFactory():::Returns the thread factory used to create new threads.
ThreadPoolExecutor#setRejectedExecutionHandler(RejectedExecutionHandler):::Sets a new handler for unexecutable tasks.
ThreadPoolExecutor#getRejectedExecutionHandler():::Returns the current handler for unexecutable tasks.
ThreadPoolExecutor#setCorePoolSize(int):::Sets the core number of threads
ThreadPoolExecutor#getCorePoolSize():::Returns the core number of threads.
ThreadPoolExecutor#prestartCoreThread():::Starts a core thread, causing it to idly wait for work
ThreadPoolExecutor#ensurePrestart():::Same as prestartCoreThread except arranges that at least one thread is started even if corePoolSize is 0.
ThreadPoolExecutor#prestartAllCoreThreads():::Starts all core threads, causing them to idly wait for work
ThreadPoolExecutor#allowsCoreThreadTimeOut():::Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive
ThreadPoolExecutor#allowCoreThreadTimeOut(boolean):::Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive
ThreadPoolExecutor#setMaximumPoolSize(int):::Sets the maximum allowed number of threads
ThreadPoolExecutor#getMaximumPoolSize():::Returns the maximum allowed number of threads.
ThreadPoolExecutor#setKeepAliveTime(long, TimeUnit):::Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated
ThreadPoolExecutor#getKeepAliveTime(TimeUnit):::Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated
ThreadPoolExecutor#getQueue():::Returns the task queue used by this executor
ThreadPoolExecutor#remove(Runnable):::Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started
ThreadPoolExecutor#purge():::Tries to remove from the work queue all Future tasks that have been cancelled
ThreadPoolExecutor#getPoolSize():::Returns the current number of threads in the pool.
ThreadPoolExecutor#getActiveCount():::Returns the approximate number of threads that are actively executing tasks.
ThreadPoolExecutor#getLargestPoolSize():::Returns the largest number of threads that have ever simultaneously been in the pool.
ThreadPoolExecutor#getTaskCount():::Returns the approximate total number of tasks that have ever been scheduled for execution
ThreadPoolExecutor#getCompletedTaskCount():::Returns the approximate total number of tasks that have completed execution
ThreadPoolExecutor#toString():::Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.
ThreadPoolExecutor#beforeExecute(Thread, Runnable):::Method invoked prior to executing the given Runnable in the given thread
ThreadPoolExecutor#afterExecute(Runnable, Throwable):::Method invoked upon completion of execution of the given Runnable
ThreadPoolExecutor#terminated():::Method invoked when the Executor has terminated
ThreadPoolExecutor.CallerRunsPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.
ThreadPoolExecutor.AbortPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Always throws RejectedExecutionException.
ThreadPoolExecutor.DiscardPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Does nothing, which has the effect of discarding task r.
ThreadPoolExecutor.DiscardOldestPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded.
TransferQueue#tryTransfer(E):::Transfers the element to a waiting consumer immediately, if possible
TransferQueue#transfer(E):::Transfers the element to a consumer, waiting if necessary to do so
TransferQueue#tryTransfer(E, long, TimeUnit):::Transfers the element to a consumer if it is possible to do so before the timeout elapses
TransferQueue#hasWaitingConsumer():::Returns true if there is at least one consumer waiting to receive an element via #take or timed #poll(long,TimeUnit) poll
TransferQueue#getWaitingConsumerCount():::Returns an estimate of the number of consumers waiting to receive elements via #take or timed #poll(long,TimeUnit) poll
AbstractOwnableSynchronizer#setExclusiveOwnerThread(Thread):::Sets the thread that currently owns exclusive access
AbstractOwnableSynchronizer#getExclusiveOwnerThread():::Returns the thread last set by setExclusiveOwnerThread, or null if never set
AbstractQueuedLongSynchronizer#getState():::Returns the current value of synchronization state
AbstractQueuedLongSynchronizer#setState(long):::Sets the value of synchronization state
AbstractQueuedLongSynchronizer#compareAndSetState(long, long):::Atomically sets synchronization state to the given updated value if the current state value equals the expected value
AbstractQueuedLongSynchronizer#selfInterrupt():::Convenience method to interrupt current thread.
AbstractQueuedLongSynchronizer#acquireQueued(Node, long):::Acquires in exclusive uninterruptible mode for thread already in queue
AbstractQueuedLongSynchronizer#tryAcquire(long):::Attempts to acquire in exclusive mode
AbstractQueuedLongSynchronizer#tryRelease(long):::Attempts to set the state to reflect a release in exclusive mode
AbstractQueuedLongSynchronizer#tryAcquireShared(long):::Attempts to acquire in shared mode
AbstractQueuedLongSynchronizer#tryReleaseShared(long):::Attempts to set the state to reflect a release in shared mode
AbstractQueuedLongSynchronizer#isHeldExclusively():::Returns true if synchronization is held exclusively with respect to the current (calling) thread
AbstractQueuedLongSynchronizer#acquire(long):::Acquires in exclusive mode, ignoring interrupts
AbstractQueuedLongSynchronizer#acquireInterruptibly(long):::Acquires in exclusive mode, aborting if interrupted
AbstractQueuedLongSynchronizer#tryAcquireNanos(long, long):::Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedLongSynchronizer#release(long):::Releases in exclusive mode
AbstractQueuedLongSynchronizer#acquireShared(long):::Acquires in shared mode, ignoring interrupts
AbstractQueuedLongSynchronizer#acquireSharedInterruptibly(long):::Acquires in shared mode, aborting if interrupted
AbstractQueuedLongSynchronizer#tryAcquireSharedNanos(long, long):::Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedLongSynchronizer#releaseShared(long):::Releases in shared mode
AbstractQueuedLongSynchronizer#hasQueuedThreads():::Queries whether any threads are waiting to acquire
AbstractQueuedLongSynchronizer#hasContended():::Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked
AbstractQueuedLongSynchronizer#getFirstQueuedThread():::Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued
AbstractQueuedLongSynchronizer#isQueued(Thread):::Returns true if the given thread is currently queued
AbstractQueuedLongSynchronizer#apparentlyFirstQueuedIsExclusive():::Returns true if the apparent first queued thread, if one exists, is waiting in exclusive mode
AbstractQueuedLongSynchronizer#hasQueuedPredecessors():::Queries whether any threads have been waiting to acquire longer than the current thread
AbstractQueuedLongSynchronizer#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
AbstractQueuedLongSynchronizer#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
AbstractQueuedLongSynchronizer#getExclusiveQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in exclusive mode
AbstractQueuedLongSynchronizer#getSharedQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in shared mode
AbstractQueuedLongSynchronizer#toString():::Returns a string identifying this synchronizer, as well as its state
AbstractQueuedLongSynchronizer#isOnSyncQueue(Node):::Returns true if a node, always one that was initially placed on a condition queue, is now waiting to reacquire on sync queue.
AbstractQueuedLongSynchronizer#transferForSignal(Node):::Transfers a node from a condition queue onto sync queue
AbstractQueuedLongSynchronizer#transferAfterCancelledWait(Node):::Transfers node, if necessary, to sync queue after a cancelled wait
AbstractQueuedLongSynchronizer#fullyRelease(Node):::Invokes release with current state value; returns saved state
AbstractQueuedLongSynchronizer#owns(ConditionObject):::Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedLongSynchronizer#hasWaiters(ConditionObject):::Queries whether any threads are waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer#getWaitQueueLength(ConditionObject):::Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer#getWaitingThreads(ConditionObject):::Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer.ConditionObject#signal():::Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedLongSynchronizer.ConditionObject#signalAll():::Moves all threads from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedLongSynchronizer.ConditionObject#awaitUninterruptibly():::Implements uninterruptible condition wait
AbstractQueuedLongSynchronizer.ConditionObject#await():::Implements interruptible condition wait
AbstractQueuedLongSynchronizer.ConditionObject#awaitNanos(long):::Implements timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#awaitUntil(Date):::Implements absolute timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#await(long, TimeUnit):::Implements timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#isOwnedBy(AbstractQueuedLongSynchronizer):::Returns true if this condition was created by the given synchronization object.
AbstractQueuedLongSynchronizer.ConditionObject#hasWaiters():::Queries whether any threads are waiting on this condition
AbstractQueuedLongSynchronizer.ConditionObject#getWaitQueueLength():::Returns an estimate of the number of threads waiting on this condition
AbstractQueuedLongSynchronizer.ConditionObject#getWaitingThreads():::Returns a collection containing those threads that may be waiting on this Condition
AbstractQueuedSynchronizer.Node#isShared():::Returns true if node is waiting in shared mode.
AbstractQueuedSynchronizer.Node#predecessor():::Returns previous node, or throws NullPointerException if null
AbstractQueuedSynchronizer.Node#compareAndSetWaitStatus(int, int):::CASes waitStatus field.
AbstractQueuedSynchronizer.Node#compareAndSetNext(Node, Node):::CASes next field.
AbstractQueuedSynchronizer#getState():::Returns the current value of synchronization state
AbstractQueuedSynchronizer#setState(int):::Sets the value of synchronization state
AbstractQueuedSynchronizer#compareAndSetState(int, int):::Atomically sets synchronization state to the given updated value if the current state value equals the expected value
AbstractQueuedSynchronizer#selfInterrupt():::Convenience method to interrupt current thread.
AbstractQueuedSynchronizer#acquireQueued(Node, int):::Acquires in exclusive uninterruptible mode for thread already in queue
AbstractQueuedSynchronizer#tryAcquire(int):::Attempts to acquire in exclusive mode
AbstractQueuedSynchronizer#tryRelease(int):::Attempts to set the state to reflect a release in exclusive mode
AbstractQueuedSynchronizer#tryAcquireShared(int):::Attempts to acquire in shared mode
AbstractQueuedSynchronizer#tryReleaseShared(int):::Attempts to set the state to reflect a release in shared mode
AbstractQueuedSynchronizer#isHeldExclusively():::Returns true if synchronization is held exclusively with respect to the current (calling) thread
AbstractQueuedSynchronizer#acquire(int):::Acquires in exclusive mode, ignoring interrupts
AbstractQueuedSynchronizer#acquireInterruptibly(int):::Acquires in exclusive mode, aborting if interrupted
AbstractQueuedSynchronizer#tryAcquireNanos(int, long):::Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedSynchronizer#release(int):::Releases in exclusive mode
AbstractQueuedSynchronizer#acquireShared(int):::Acquires in shared mode, ignoring interrupts
AbstractQueuedSynchronizer#acquireSharedInterruptibly(int):::Acquires in shared mode, aborting if interrupted
AbstractQueuedSynchronizer#tryAcquireSharedNanos(int, long):::Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedSynchronizer#releaseShared(int):::Releases in shared mode
AbstractQueuedSynchronizer#hasQueuedThreads():::Queries whether any threads are waiting to acquire
AbstractQueuedSynchronizer#hasContended():::Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked
AbstractQueuedSynchronizer#getFirstQueuedThread():::Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued
AbstractQueuedSynchronizer#isQueued(Thread):::Returns true if the given thread is currently queued
AbstractQueuedSynchronizer#apparentlyFirstQueuedIsExclusive():::Returns true if the apparent first queued thread, if one exists, is waiting in exclusive mode
AbstractQueuedSynchronizer#hasQueuedPredecessors():::Queries whether any threads have been waiting to acquire longer than the current thread
AbstractQueuedSynchronizer#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
AbstractQueuedSynchronizer#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
AbstractQueuedSynchronizer#getExclusiveQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in exclusive mode
AbstractQueuedSynchronizer#getSharedQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in shared mode
AbstractQueuedSynchronizer#toString():::Returns a string identifying this synchronizer, as well as its state
AbstractQueuedSynchronizer#isOnSyncQueue(Node):::Returns true if a node, always one that was initially placed on a condition queue, is now waiting to reacquire on sync queue.
AbstractQueuedSynchronizer#transferForSignal(Node):::Transfers a node from a condition queue onto sync queue
AbstractQueuedSynchronizer#transferAfterCancelledWait(Node):::Transfers node, if necessary, to sync queue after a cancelled wait
AbstractQueuedSynchronizer#fullyRelease(Node):::Invokes release with current state value; returns saved state
AbstractQueuedSynchronizer#owns(ConditionObject):::Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedSynchronizer#hasWaiters(ConditionObject):::Queries whether any threads are waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer#getWaitQueueLength(ConditionObject):::Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer#getWaitingThreads(ConditionObject):::Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer.ConditionObject#signal():::Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedSynchronizer.ConditionObject#signalAll():::Moves all threads from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedSynchronizer.ConditionObject#awaitUninterruptibly():::Implements uninterruptible condition wait
AbstractQueuedSynchronizer.ConditionObject#await():::Implements interruptible condition wait
AbstractQueuedSynchronizer.ConditionObject#awaitNanos(long):::Implements timed condition wait
AbstractQueuedSynchronizer.ConditionObject#awaitUntil(Date):::Implements absolute timed condition wait
AbstractQueuedSynchronizer.ConditionObject#await(long, TimeUnit):::Implements timed condition wait
AbstractQueuedSynchronizer.ConditionObject#isOwnedBy(AbstractQueuedSynchronizer):::Returns true if this condition was created by the given synchronization object.
AbstractQueuedSynchronizer.ConditionObject#hasWaiters():::Queries whether any threads are waiting on this condition
AbstractQueuedSynchronizer.ConditionObject#getWaitQueueLength():::Returns an estimate of the number of threads waiting on this condition
AbstractQueuedSynchronizer.ConditionObject#getWaitingThreads():::Returns a collection containing those threads that may be waiting on this Condition
Condition#await():::Causes the current thread to wait until it is signalled or Thread#interrupt interrupted
Condition#awaitUninterruptibly():::Causes the current thread to wait until it is signalled
Condition#awaitNanos(long):::Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Condition#await(long, TimeUnit):::Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Condition#awaitUntil(Date):::Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses
Condition#signal():::Wakes up one waiting thread
Condition#signalAll():::Wakes up all waiting threads
Lock#lock():::Acquires the lock
Lock#lockInterruptibly():::Acquires the lock unless the current thread is Thread#interrupt interrupted
Lock#tryLock():::Acquires the lock only if it is free at the time of invocation
Lock#tryLock(long, TimeUnit):::Acquires the lock if it is free within the given waiting time and the current thread has not been Thread#interrupt interrupted
Lock#unlock():::Releases the lock
Lock#newCondition():::Returns a new Condition instance that is bound to this Lock instance
LockSupport#unpark(Thread):::Makes available the permit for the given thread, if it was not already available
LockSupport#park(Object):::Disables the current thread for thread scheduling purposes unless the permit is available
LockSupport#parkNanos(Object, long):::Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
LockSupport#parkUntil(Object, long):::Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
LockSupport#getBlocker(Thread):::Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked
LockSupport#park():::Disables the current thread for thread scheduling purposes unless the permit is available
LockSupport#parkNanos(long):::Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
LockSupport#parkUntil(long):::Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
LockSupport#nextSecondarySeed():::Returns the pseudo-randomly initialized or updated secondary seed
LockSupport#getThreadId(Thread):::Returns the thread id for the given thread
ReadWriteLock#readLock():::Returns the lock used for reading.
ReadWriteLock#writeLock():::Returns the lock used for writing.
ReentrantLock.Sync#nonfairTryAcquire(int):::Performs non-fair tryLock
ReentrantLock.FairSync#tryAcquire(int):::Fair version of tryAcquire
ReentrantLock#lock():::Acquires the lock
ReentrantLock#lockInterruptibly():::Acquires the lock unless the current thread is Thread#interrupt interrupted
ReentrantLock#tryLock():::Acquires the lock only if it is not held by another thread at the time of invocation
ReentrantLock#tryLock(long, TimeUnit):::Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantLock#unlock():::Attempts to release this lock
ReentrantLock#newCondition():::Returns a Condition instance for use with this Lock instance
ReentrantLock#getHoldCount():::Queries the number of holds on this lock by the current thread
ReentrantLock#isHeldByCurrentThread():::Queries if this lock is held by the current thread
ReentrantLock#isLocked():::Queries if this lock is held by any thread
ReentrantLock#isFair():::Returns true if this lock has fairness set true.
ReentrantLock#getOwner():::Returns the thread that currently owns this lock, or null if not owned
ReentrantLock#hasQueuedThreads():::Queries whether any threads are waiting to acquire this lock
ReentrantLock#hasQueuedThread(Thread):::Queries whether the given thread is waiting to acquire this lock
ReentrantLock#getQueueLength():::Returns an estimate of the number of threads waiting to acquire this lock
ReentrantLock#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire this lock
ReentrantLock#hasWaiters(Condition):::Queries whether any threads are waiting on the given condition associated with this lock
ReentrantLock#getWaitQueueLength(Condition):::Returns an estimate of the number of threads waiting on the given condition associated with this lock
ReentrantLock#getWaitingThreads(Condition):::Returns a collection containing those threads that may be waiting on the given condition associated with this lock
ReentrantLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.Sync#sharedCount(int):::Returns the number of shared holds represented in count.
ReentrantReadWriteLock.Sync#exclusiveCount(int):::Returns the number of exclusive holds represented in count.
ReentrantReadWriteLock.Sync#readerShouldBlock():::Returns true if the current thread, when trying to acquire the read lock, and otherwise eligible to do so, should block because of policy for overtaking other waiting threads.
ReentrantReadWriteLock.Sync#writerShouldBlock():::Returns true if the current thread, when trying to acquire the write lock, and otherwise eligible to do so, should block because of policy for overtaking other waiting threads.
ReentrantReadWriteLock.Sync#fullTryAcquireShared(Thread):::Full version of acquire for reads, that handles CAS misses and reentrant reads not dealt with in tryAcquireShared.
ReentrantReadWriteLock.Sync#tryWriteLock():::Performs tryLock for write, enabling barging in both modes
ReentrantReadWriteLock.Sync#tryReadLock():::Performs tryLock for read, enabling barging in both modes
ReentrantReadWriteLock.ReadLock#lock():::Acquires the read lock
ReentrantReadWriteLock.ReadLock#lockInterruptibly():::Acquires the read lock unless the current thread is Thread#interrupt interrupted
ReentrantReadWriteLock.ReadLock#tryLock():::Acquires the read lock only if the write lock is not held by another thread at the time of invocation
ReentrantReadWriteLock.ReadLock#tryLock(long, TimeUnit):::Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantReadWriteLock.ReadLock#unlock():::Attempts to release this lock
ReentrantReadWriteLock.ReadLock#newCondition():::Throws UnsupportedOperationException because ReadLocks do not support conditions.
ReentrantReadWriteLock.ReadLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.WriteLock#lock():::Acquires the write lock
ReentrantReadWriteLock.WriteLock#lockInterruptibly():::Acquires the write lock unless the current thread is Thread#interrupt interrupted
ReentrantReadWriteLock.WriteLock#tryLock():::Acquires the write lock only if it is not held by another thread at the time of invocation
ReentrantReadWriteLock.WriteLock#tryLock(long, TimeUnit):::Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantReadWriteLock.WriteLock#unlock():::Attempts to release this lock
ReentrantReadWriteLock.WriteLock#newCondition():::Returns a Condition instance for use with this Lock instance
ReentrantReadWriteLock.WriteLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.WriteLock#isHeldByCurrentThread():::Queries if this write lock is held by the current thread
ReentrantReadWriteLock.WriteLock#getHoldCount():::Queries the number of holds on this write lock by the current thread
ReentrantReadWriteLock#isFair():::Returns true if this lock has fairness set true.
ReentrantReadWriteLock#getOwner():::Returns the thread that currently owns the write lock, or null if not owned
ReentrantReadWriteLock#getReadLockCount():::Queries the number of read locks held for this lock
ReentrantReadWriteLock#isWriteLocked():::Queries if the write lock is held by any thread
ReentrantReadWriteLock#isWriteLockedByCurrentThread():::Queries if the write lock is held by the current thread.
ReentrantReadWriteLock#getWriteHoldCount():::Queries the number of reentrant write holds on this lock by the current thread
ReentrantReadWriteLock#getReadHoldCount():::Queries the number of reentrant read holds on this lock by the current thread
ReentrantReadWriteLock#getQueuedWriterThreads():::Returns a collection containing threads that may be waiting to acquire the write lock
ReentrantReadWriteLock#getQueuedReaderThreads():::Returns a collection containing threads that may be waiting to acquire the read lock
ReentrantReadWriteLock#hasQueuedThreads():::Queries whether any threads are waiting to acquire the read or write lock
ReentrantReadWriteLock#hasQueuedThread(Thread):::Queries whether the given thread is waiting to acquire either the read or write lock
ReentrantReadWriteLock#getQueueLength():::Returns an estimate of the number of threads waiting to acquire either the read or write lock
ReentrantReadWriteLock#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire either the read or write lock
ReentrantReadWriteLock#hasWaiters(Condition):::Queries whether any threads are waiting on the given condition associated with the write lock
ReentrantReadWriteLock#getWaitQueueLength(Condition):::Returns an estimate of the number of threads waiting on the given condition associated with the write lock
ReentrantReadWriteLock#getWaitingThreads(Condition):::Returns a collection containing those threads that may be waiting on the given condition associated with the write lock
ReentrantReadWriteLock#toString():::Returns a string identifying this lock, as well as its lock state
StampedLock#writeLock():::Exclusively acquires the lock, blocking if necessary until available.
StampedLock#tryWriteLock():::Exclusively acquires the lock if it is immediately available.
StampedLock#tryWriteLock(long, TimeUnit):::Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
StampedLock#writeLockInterruptibly():::Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
StampedLock#readLock():::Non-exclusively acquires the lock, blocking if necessary until available.
StampedLock#tryReadLock():::Non-exclusively acquires the lock if it is immediately available.
StampedLock#tryReadLock(long, TimeUnit):::Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
StampedLock#readLockInterruptibly():::Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
StampedLock#tryOptimisticRead():::Returns a stamp that can later be validated, or zero if exclusively locked.
StampedLock#validate(long):::Returns true if the lock has not been exclusively acquired since issuance of the given stamp
StampedLock#unlockWrite(long):::If the lock state matches the given stamp, releases the exclusive lock.
StampedLock#unlockRead(long):::If the lock state matches the given stamp, releases the non-exclusive lock.
StampedLock#unlock(long):::If the lock state matches the given stamp, releases the corresponding mode of the lock.
StampedLock#tryConvertToWriteLock(long):::If the lock state matches the given stamp, atomically performs one of the following actions
StampedLock#tryConvertToReadLock(long):::If the lock state matches the given stamp, atomically performs one of the following actions
StampedLock#tryConvertToOptimisticRead(long):::If the lock state matches the given stamp then, atomically, if the stamp represents holding a lock, releases it and returns an observation stamp
StampedLock#tryUnlockWrite():::Releases the write lock if it is held, without requiring a stamp value
StampedLock#tryUnlockRead():::Releases one hold of the read lock if it is held, without requiring a stamp value
StampedLock#isWriteLocked():::Returns true if the lock is currently held exclusively.
StampedLock#isReadLocked():::Returns true if the lock is currently held non-exclusively.
StampedLock#isWriteLockStamp(long):::Tells whether a stamp represents holding a lock exclusively
StampedLock#isReadLockStamp(long):::Tells whether a stamp represents holding a lock non-exclusively
StampedLock#isLockStamp(long):::Tells whether a stamp represents holding a lock
StampedLock#isOptimisticReadStamp(long):::Tells whether a stamp represents a successful optimistic read.
StampedLock#getReadLockCount():::Queries the number of read locks held for this lock
StampedLock#toString():::Returns a string identifying this lock, as well as its lock state
StampedLock#asReadLock():::Returns a plain Lock view of this StampedLock in which the Lock#lock method is mapped to #readLock, and similarly for other methods
StampedLock#asWriteLock():::Returns a plain Lock view of this StampedLock in which the Lock#lock method is mapped to #writeLock, and similarly for other methods
StampedLock#asReadWriteLock():::Returns a ReadWriteLock view of this StampedLock in which the ReadWriteLock#readLock() method is mapped to #asReadLock(), and ReadWriteLock#writeLock() to #asWriteLock().
AbstractCollection#iterator():::Returns an iterator over the elements contained in this collection.
AbstractCollection#toString():::Returns a string representation of this collection
AbstractList#add(E):::Appends the specified element to the end of this list (optional operation)
AbstractList#clear():::Removes all of the elements from this list (optional operation)
AbstractList#iterator():::Returns an iterator over the elements in this list in proper sequence.
AbstractList#equals(Object):::Compares the specified object with this list for equality
AbstractList#hashCode():::Returns the hash code value for this list.
AbstractList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
AbstractMap#equals(Object):::Compares the specified object with this map for equality
AbstractMap#hashCode():::Returns the hash code value for this map
AbstractMap#toString():::Returns a string representation of this map
AbstractMap#clone():::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.
AbstractMap.SimpleEntry#getKey():::Returns the key corresponding to this entry.
AbstractMap.SimpleEntry#getValue():::Returns the value corresponding to this entry.
AbstractMap.SimpleEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value.
AbstractMap.SimpleEntry#equals(Object):::Compares the specified object with this entry for equality
AbstractMap.SimpleEntry#hashCode():::Returns the hash code value for this map entry
AbstractMap.SimpleEntry#toString():::Returns a String representation of this map entry
AbstractMap.SimpleImmutableEntry#getKey():::Returns the key corresponding to this entry.
AbstractMap.SimpleImmutableEntry#getValue():::Returns the value corresponding to this entry.
AbstractMap.SimpleImmutableEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation)
AbstractMap.SimpleImmutableEntry#equals(Object):::Compares the specified object with this entry for equality
AbstractMap.SimpleImmutableEntry#hashCode():::Returns the hash code value for this map entry
AbstractMap.SimpleImmutableEntry#toString():::Returns a String representation of this map entry
AbstractQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractQueue#remove():::Retrieves and removes the head of this queue
AbstractQueue#element():::Retrieves, but does not remove, the head of this queue
AbstractQueue#clear():::Removes all of the elements from this queue
AbstractQueue#addAll(Collection):::Adds all of the elements in the specified collection to this queue
AbstractSequentialList#get(int):::Returns the element at the specified position in this list
AbstractSequentialList#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation)
AbstractSequentialList#add(int, E):::Inserts the specified element at the specified position in this list (optional operation)
AbstractSequentialList#remove(int):::Removes the element at the specified position in this list (optional operation)
AbstractSequentialList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
AbstractSequentialList#iterator():::Returns an iterator over the elements in this list (in proper sequence).  This implementation merely returns a list iterator over the list.
AbstractSequentialList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence).
AbstractSet#equals(Object):::Compares the specified object with this set for equality
AbstractSet#hashCode():::Returns the hash code value for this set
AbstractSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation)
ArrayDeque#inc(int, int):::Circularly increments i, mod modulus
ArrayDeque#dec(int, int):::Circularly decrements i, mod modulus
ArrayDeque#inc(int, int, int):::Circularly adds the given distance to index i, mod modulus
ArrayDeque#sub(int, int, int):::Subtracts j from i, mod modulus
ArrayDeque#elementAt(Object[], int):::Returns element at array index i
ArrayDeque#nonNullElementAt(Object[], int):::A version of elementAt that checks for null elements
ArrayDeque#addFirst(E):::Inserts the specified element at the front of this deque.
ArrayDeque#addLast(E):::Inserts the specified element at the end of this deque
ArrayDeque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator.
ArrayDeque#offerFirst(E):::Inserts the specified element at the front of this deque.
ArrayDeque#offerLast(E):::Inserts the specified element at the end of this deque.
ArrayDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail)
ArrayDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail)
ArrayDeque#add(E):::Inserts the specified element at the end of this deque
ArrayDeque#offer(E):::Inserts the specified element at the end of this deque
ArrayDeque#remove():::Retrieves and removes the head of the queue represented by this deque
ArrayDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
ArrayDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque
ArrayDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty
ArrayDeque#push(E):::Pushes an element onto the stack represented by this deque
ArrayDeque#pop():::Pops an element from the stack represented by this deque
ArrayDeque#delete(int):::Removes the element at the specified position in the elements array
ArrayDeque#size():::Returns the number of elements in this deque.
ArrayDeque#isEmpty():::Returns true if this deque contains no elements.
ArrayDeque#iterator():::Returns an iterator over the elements in this deque
ArrayDeque#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this deque
ArrayDeque#contains(Object):::Returns true if this deque contains the specified element
ArrayDeque#remove(Object):::Removes a single instance of the specified element from this deque
ArrayDeque#clear():::Removes all of the elements from this deque
ArrayDeque#toArray():::Returns an array containing all of the elements in this deque in proper sequence (from first to last element)
ArrayDeque#toArray(T[]):::Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ArrayDeque#clone():::Returns a copy of this deque.
ArrayDeque#checkInvariants():::debugging
ArrayList#trimToSize():::Trims the capacity of this ArrayList instance to be the list's current size
ArrayList#ensureCapacity(int):::Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.
ArrayList#size():::Returns the number of elements in this list.
ArrayList#isEmpty():::Returns true if this list contains no elements.
ArrayList#contains(Object):::Returns true if this list contains the specified element
ArrayList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
ArrayList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
ArrayList#clone():::Returns a shallow copy of this ArrayList instance
ArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
ArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ArrayList#get(int):::Returns the element at the specified position in this list.
ArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
ArrayList#add(E):::Appends the specified element to the end of this list.
ArrayList#add(int, E):::Inserts the specified element at the specified position in this list
ArrayList#remove(int):::Removes the element at the specified position in this list
ArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
ArrayList#clear():::Removes all of the elements from this list
ArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator
ArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
ArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
ArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection.
ArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection
ArrayList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
ArrayList#listIterator():::Returns a list iterator over the elements in this list (in proper sequence)
ArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence
ArrayList#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
ArrayList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
ArrayList#removeIf(Predicate, int, int):::Removes all elements satisfying the given predicate, from index i (inclusive) to index end (exclusive).
Arrays#rangeCheck(int, int, int):::Checks that fromIndex and toIndex are in the range and throws an exception if they aren't.
Arrays#sort(int[]):::Sorts the specified array into ascending numerical order
Arrays#sort(int[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(long[]):::Sorts the specified array into ascending numerical order
Arrays#sort(long[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(short[]):::Sorts the specified array into ascending numerical order
Arrays#sort(short[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(char[]):::Sorts the specified array into ascending numerical order
Arrays#sort(char[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(byte[]):::Sorts the specified array into ascending numerical order
Arrays#sort(byte[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(float[]):::Sorts the specified array into ascending numerical order
Arrays#sort(float[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(double[]):::Sorts the specified array into ascending numerical order
Arrays#sort(double[], int, int):::Sorts the specified range of the array into ascending order
Arrays#parallelSort(byte[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(byte[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(char[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(char[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(short[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(short[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(int[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(int[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(long[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(long[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(float[]):::Sorts the specified array into ascending numerical order
Arrays#parallelSort(float[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(double[]):::Sorts the specified array into ascending numerical order
Arrays#parallelSort(double[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(T[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#parallelSort(T[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#parallelSort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator
Arrays#parallelSort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Arrays#sort(Object[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#sort(Object[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#sort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator
Arrays#sort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Arrays#parallelPrefix(T[], BinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(T[], int, int, BinaryOperator):::Performs #parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(long[], LongBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(long[], int, int, LongBinaryOperator):::Performs #parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(double[], DoubleBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(double[], int, int, DoubleBinaryOperator):::Performs #parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(int[], IntBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(int[], int, int, IntBinaryOperator):::Performs #parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.
Arrays#binarySearch(long[], long):::Searches the specified array of longs for the specified value using the binary search algorithm
Arrays#binarySearch(long[], int, int, long):::Searches a range of the specified array of longs for the specified value using the binary search algorithm
Arrays#binarySearch(int[], int):::Searches the specified array of ints for the specified value using the binary search algorithm
Arrays#binarySearch(int[], int, int, int):::Searches a range of the specified array of ints for the specified value using the binary search algorithm
Arrays#binarySearch(short[], short):::Searches the specified array of shorts for the specified value using the binary search algorithm
Arrays#binarySearch(short[], int, int, short):::Searches a range of the specified array of shorts for the specified value using the binary search algorithm
Arrays#binarySearch(char[], char):::Searches the specified array of chars for the specified value using the binary search algorithm
Arrays#binarySearch(char[], int, int, char):::Searches a range of the specified array of chars for the specified value using the binary search algorithm
Arrays#binarySearch(byte[], byte):::Searches the specified array of bytes for the specified value using the binary search algorithm
Arrays#binarySearch(byte[], int, int, byte):::Searches a range of the specified array of bytes for the specified value using the binary search algorithm
Arrays#binarySearch(double[], double):::Searches the specified array of doubles for the specified value using the binary search algorithm
Arrays#binarySearch(double[], int, int, double):::Searches a range of the specified array of doubles for the specified value using the binary search algorithm
Arrays#binarySearch(float[], float):::Searches the specified array of floats for the specified value using the binary search algorithm
Arrays#binarySearch(float[], int, int, float):::Searches a range of the specified array of floats for the specified value using the binary search algorithm
Arrays#binarySearch(Object[], Object):::Searches the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(Object[], int, int, Object):::Searches a range of the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(T[], T, Comparator):::Searches the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(T[], int, int, T, Comparator):::Searches a range of the specified array for the specified object using the binary search algorithm
Arrays#equals(long[], long[]):::Returns true if the two specified arrays of longs are equal to one another
Arrays#equals(long[], int, int, long[], int, int):::Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another
Arrays#equals(int[], int[]):::Returns true if the two specified arrays of ints are equal to one another
Arrays#equals(int[], int, int, int[], int, int):::Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another
Arrays#equals(short[], short[]):::Returns true if the two specified arrays of shorts are equal to one another
Arrays#equals(short[], int, int, short[], int, int):::Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another
Arrays#equals(char[], char[]):::Returns true if the two specified arrays of chars are equal to one another
Arrays#equals(char[], int, int, char[], int, int):::Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another
Arrays#equals(byte[], byte[]):::Returns true if the two specified arrays of bytes are equal to one another
Arrays#equals(byte[], int, int, byte[], int, int):::Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another
Arrays#equals(boolean[], boolean[]):::Returns true if the two specified arrays of booleans are equal to one another
Arrays#equals(boolean[], int, int, boolean[], int, int):::Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another
Arrays#equals(double[], double[]):::Returns true if the two specified arrays of doubles are equal to one another
Arrays#equals(double[], int, int, double[], int, int):::Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another
Arrays#equals(float[], float[]):::Returns true if the two specified arrays of floats are equal to one another
Arrays#equals(float[], int, int, float[], int, int):::Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another
Arrays#equals(Object[], Object[]):::Returns true if the two specified arrays of Objects are equal to one another
Arrays#equals(Object[], int, int, Object[], int, int):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
Arrays#equals(T[], T[], Comparator):::Returns true if the two specified arrays of Objects are equal to one another
Arrays#equals(T[], int, int, T[], int, int, Comparator):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
Arrays#fill(long[], long):::Assigns the specified long value to each element of the specified array of longs.
Arrays#fill(long[], int, int, long):::Assigns the specified long value to each element of the specified range of the specified array of longs
Arrays#fill(int[], int):::Assigns the specified int value to each element of the specified array of ints.
Arrays#fill(int[], int, int, int):::Assigns the specified int value to each element of the specified range of the specified array of ints
Arrays#fill(short[], short):::Assigns the specified short value to each element of the specified array of shorts.
Arrays#fill(short[], int, int, short):::Assigns the specified short value to each element of the specified range of the specified array of shorts
Arrays#fill(char[], char):::Assigns the specified char value to each element of the specified array of chars.
Arrays#fill(char[], int, int, char):::Assigns the specified char value to each element of the specified range of the specified array of chars
Arrays#fill(byte[], byte):::Assigns the specified byte value to each element of the specified array of bytes.
Arrays#fill(byte[], int, int, byte):::Assigns the specified byte value to each element of the specified range of the specified array of bytes
Arrays#fill(boolean[], boolean):::Assigns the specified boolean value to each element of the specified array of booleans.
Arrays#fill(boolean[], int, int, boolean):::Assigns the specified boolean value to each element of the specified range of the specified array of booleans
Arrays#fill(double[], double):::Assigns the specified double value to each element of the specified array of doubles.
Arrays#fill(double[], int, int, double):::Assigns the specified double value to each element of the specified range of the specified array of doubles
Arrays#fill(float[], float):::Assigns the specified float value to each element of the specified array of floats.
Arrays#fill(float[], int, int, float):::Assigns the specified float value to each element of the specified range of the specified array of floats
Arrays#fill(Object[], Object):::Assigns the specified Object reference to each element of the specified array of Objects.
Arrays#fill(Object[], int, int, Object):::Assigns the specified Object reference to each element of the specified range of the specified array of Objects
Arrays#copyOf(T[], int):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Arrays#copyOf(U[], int, Class):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Arrays#copyOf(byte[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(short[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(int[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(long[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(char[], int):::Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length
Arrays#copyOf(float[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(double[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(boolean[], int):::Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length
Arrays#copyOfRange(T[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(U[], int, int, Class):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(byte[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(short[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(int[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(long[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(char[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(float[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(double[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(boolean[], int, int):::Copies the specified range of the specified array into a new array
Arrays#asList(T...):::Returns a fixed-size list backed by the specified array
Arrays#hashCode(long[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(int[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(short[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(char[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(byte[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(boolean[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(float[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(double[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(Object[]):::Returns a hash code based on the contents of the specified array
Arrays#deepHashCode(Object[]):::Returns a hash code based on the "deep contents" of the specified array
Arrays#deepEquals(Object[], Object[]):::Returns true if the two specified arrays are deeply equal to one another
Arrays#toString(long[]):::Returns a string representation of the contents of the specified array
Arrays#toString(int[]):::Returns a string representation of the contents of the specified array
Arrays#toString(short[]):::Returns a string representation of the contents of the specified array
Arrays#toString(char[]):::Returns a string representation of the contents of the specified array
Arrays#toString(byte[]):::Returns a string representation of the contents of the specified array
Arrays#toString(boolean[]):::Returns a string representation of the contents of the specified array
Arrays#toString(float[]):::Returns a string representation of the contents of the specified array
Arrays#toString(double[]):::Returns a string representation of the contents of the specified array
Arrays#toString(Object[]):::Returns a string representation of the contents of the specified array
Arrays#deepToString(Object[]):::Returns a string representation of the "deep contents" of the specified array
Arrays#setAll(T[], IntFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(T[], IntFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(int[], IntUnaryOperator):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(int[], IntUnaryOperator):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(long[], IntToLongFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(long[], IntToLongFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(double[], IntToDoubleFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(double[], IntToDoubleFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#spliterator(T[]):::Returns a Spliterator covering all of the specified array
Arrays#spliterator(T[], int, int):::Returns a Spliterator covering the specified range of the specified array
Arrays#spliterator(int[]):::Returns a Spliterator.OfInt covering all of the specified array
Arrays#spliterator(int[], int, int):::Returns a Spliterator.OfInt covering the specified range of the specified array
Arrays#spliterator(long[]):::Returns a Spliterator.OfLong covering all of the specified array
Arrays#spliterator(long[], int, int):::Returns a Spliterator.OfLong covering the specified range of the specified array
Arrays#spliterator(double[]):::Returns a Spliterator.OfDouble covering all of the specified array
Arrays#spliterator(double[], int, int):::Returns a Spliterator.OfDouble covering the specified range of the specified array
Arrays#stream(T[]):::Returns a sequential Stream with the specified array as its source.
Arrays#stream(T[], int, int):::Returns a sequential Stream with the specified range of the specified array as its source.
Arrays#stream(int[]):::Returns a sequential IntStream with the specified array as its source.
Arrays#stream(int[], int, int):::Returns a sequential IntStream with the specified range of the specified array as its source.
Arrays#stream(long[]):::Returns a sequential LongStream with the specified array as its source.
Arrays#stream(long[], int, int):::Returns a sequential LongStream with the specified range of the specified array as its source.
Arrays#stream(double[]):::Returns a sequential DoubleStream with the specified array as its source.
Arrays#stream(double[], int, int):::Returns a sequential DoubleStream with the specified range of the specified array as its source.
Arrays#compare(boolean[], boolean[]):::Compares two boolean arrays lexicographically
Arrays#compare(boolean[], int, int, boolean[], int, int):::Compares two boolean arrays lexicographically over the specified ranges
Arrays#compare(byte[], byte[]):::Compares two byte arrays lexicographically
Arrays#compare(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges
Arrays#compareUnsigned(byte[], byte[]):::Compares two byte arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(short[], short[]):::Compares two short arrays lexicographically
Arrays#compare(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges
Arrays#compareUnsigned(short[], short[]):::Compares two short arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(char[], char[]):::Compares two char arrays lexicographically
Arrays#compare(char[], int, int, char[], int, int):::Compares two char arrays lexicographically over the specified ranges
Arrays#compare(int[], int[]):::Compares two int arrays lexicographically
Arrays#compare(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges
Arrays#compareUnsigned(int[], int[]):::Compares two int arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(long[], long[]):::Compares two long arrays lexicographically
Arrays#compare(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges
Arrays#compareUnsigned(long[], long[]):::Compares two long arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(float[], float[]):::Compares two float arrays lexicographically
Arrays#compare(float[], int, int, float[], int, int):::Compares two float arrays lexicographically over the specified ranges
Arrays#compare(double[], double[]):::Compares two double arrays lexicographically
Arrays#compare(double[], int, int, double[], int, int):::Compares two double arrays lexicographically over the specified ranges
Arrays#compare(T[], T[]):::Compares two Object arrays, within comparable elements, lexicographically
Arrays#compare(T[], int, int, T[], int, int):::Compares two Object arrays lexicographically over the specified ranges
Arrays#compare(T[], T[], Comparator):::Compares two Object arrays lexicographically using a specified comparator
Arrays#compare(T[], int, int, T[], int, int, Comparator):::Compares two Object arrays lexicographically over the specified ranges
Arrays#mismatch(boolean[], boolean[]):::Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(boolean[], int, int, boolean[], int, int):::Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(byte[], byte[]):::Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(byte[], int, int, byte[], int, int):::Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(char[], char[]):::Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(char[], int, int, char[], int, int):::Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(short[], short[]):::Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(short[], int, int, short[], int, int):::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(int[], int[]):::Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(int[], int, int, int[], int, int):::Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(long[], long[]):::Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(long[], int, int, long[], int, int):::Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(float[], float[]):::Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(float[], int, int, float[], int, int):::Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(double[], double[]):::Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(double[], int, int, double[], int, int):::Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(Object[], Object[]):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(Object[], int, int, Object[], int, int):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(T[], T[], Comparator):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(T[], int, int, T[], int, int, Comparator):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
Base64#getEncoder():::Returns a Encoder that encodes using the Basic type base64 encoding scheme.
Base64#getUrlEncoder():::Returns a Encoder that encodes using the URL and Filename safe type base64 encoding scheme.
Base64#getMimeEncoder():::Returns a Encoder that encodes using the MIME type base64 encoding scheme.
Base64#getMimeEncoder(int, byte[]):::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.
Base64#getDecoder():::Returns a Decoder that decodes using the Basic type base64 encoding scheme.
Base64#getUrlDecoder():::Returns a Decoder that decodes using the URL and Filename safe type base64 encoding scheme.
Base64#getMimeDecoder():::Returns a Decoder that decodes using the MIME type base64 decoding scheme.
Base64.Encoder#encode(byte[]):::Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme
Base64.Encoder#encode(byte[], byte[]):::Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0
Base64.Encoder#encodeToString(byte[]):::Encodes the specified byte array into a String using the Base64 encoding scheme
Base64.Encoder#encode(ByteBuffer):::Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme
Base64.Encoder#wrap(OutputStream):::Wraps an output stream for encoding byte data using the Base64 encoding scheme
Base64.Encoder#withoutPadding():::Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data
Base64.Decoder#decode(byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array
Base64.Decoder#decode(String):::Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme
Base64.Decoder#decode(byte[], byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0
Base64.Decoder#decode(ByteBuffer):::Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer
Base64.Decoder#wrap(InputStream):::Returns an input stream for decoding Base64 encoded byte stream
BitSet#valueOf(long[]):::Returns a new bit set containing all the bits in the given long array
BitSet#valueOf(LongBuffer):::Returns a new bit set containing all the bits in the given long buffer between its position and limit
BitSet#valueOf(byte[]):::Returns a new bit set containing all the bits in the given byte array
BitSet#valueOf(ByteBuffer):::Returns a new bit set containing all the bits in the given byte buffer between its position and limit
BitSet#toByteArray():::Returns a new byte array containing all the bits in this bit set
BitSet#toLongArray():::Returns a new long array containing all the bits in this bit set
BitSet#flip(int):::Sets the bit at the specified index to the complement of its current value.
BitSet#flip(int, int):::Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.
BitSet#set(int):::Sets the bit at the specified index to true.
BitSet#set(int, boolean):::Sets the bit at the specified index to the specified value.
BitSet#set(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.
BitSet#set(int, int, boolean):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.
BitSet#clear(int):::Sets the bit specified by the index to false.
BitSet#clear(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.
BitSet#clear():::Sets all of the bits in this BitSet to false.
BitSet#get(int):::Returns the value of the bit with the specified index
BitSet#get(int, int):::Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).
BitSet#nextSetBit(int):::Returns the index of the first bit that is set to true that occurs on or after the specified starting index
BitSet#nextClearBit(int):::Returns the index of the first bit that is set to false that occurs on or after the specified starting index.
BitSet#previousSetBit(int):::Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index
BitSet#previousClearBit(int):::Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index
BitSet#length():::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one
BitSet#isEmpty():::Returns true if this BitSet contains no bits that are set to true.
BitSet#intersects(BitSet):::Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.
BitSet#cardinality():::Returns the number of bits set to true in this BitSet.
BitSet#and(BitSet):::Performs a logical AND of this target bit set with the argument bit set
BitSet#or(BitSet):::Performs a logical OR of this bit set with the bit set argument
BitSet#xor(BitSet):::Performs a logical XOR of this bit set with the bit set argument
BitSet#andNot(BitSet):::Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.
BitSet#hashCode():::Returns the hash code value for this bit set
BitSet#size():::Returns the number of bits of space actually in use by this BitSet to represent bit values
BitSet#equals(Object):::Compares this object against the specified object
BitSet#clone():::Cloning this BitSet produces a new BitSet that is equal to it
BitSet#toString():::Returns a string representation of this bit set
BitSet#stream():::Returns a stream of indices for which this BitSet contains a bit in the set state
Calendar.Builder#setInstant(long):::Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.
Calendar.Builder#setInstant(Date):::Sets the instant parameter to the instant value given by a Date
Calendar.Builder#set(int, int):::Sets the field parameter to the given value
Calendar.Builder#setFields(int...):::Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value
Calendar.Builder#setDate(int, int, int):::Sets the date field parameters to the values given by year, month, and dayOfMonth
Calendar.Builder#setTimeOfDay(int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, and second
Calendar.Builder#setTimeOfDay(int, int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis
Calendar.Builder#setWeekDate(int, int, int):::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week
Calendar.Builder#setTimeZone(TimeZone):::Sets the time zone parameter to the given zone
Calendar.Builder#setLenient(boolean):::Sets the lenient mode parameter to the value given by lenient
Calendar.Builder#setCalendarType(String):::Sets the calendar type parameter to the given type
Calendar.Builder#setLocale(Locale):::Sets the locale parameter to the given locale
Calendar.Builder#setWeekDefinition(int, int):::Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year
Calendar.Builder#build():::Returns a Calendar built from the parameters set by the setter methods
Calendar#getInstance():::Gets a calendar using the default time zone and locale
Calendar#getInstance(TimeZone):::Gets a calendar using the specified time zone and default locale
Calendar#getInstance(Locale):::Gets a calendar using the default time zone and specified locale
Calendar#getInstance(TimeZone, Locale):::Gets a calendar with the specified time zone and locale
Calendar#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
Calendar#computeTime():::Converts the current calendar field values in #fields fields[] to the millisecond time value #time.
Calendar#computeFields():::Converts the current millisecond time value #time to calendar field values in #fields fields[]
Calendar#getTime():::Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch").
Calendar#setTime(Date):::Sets this Calendar's time with the given Date
Calendar#getTimeInMillis():::Returns this Calendar's time value in milliseconds.
Calendar#setTimeInMillis(long):::Sets this Calendar's current time from the given long value.
Calendar#get(int):::Returns the value of the given calendar field
Calendar#internalGet(int):::Returns the value of the given calendar field
Calendar#internalSet(int, int):::Sets the value of the given calendar field
Calendar#set(int, int):::Sets the given calendar field to the given value
Calendar#set(int, int, int):::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH
Calendar#set(int, int, int, int, int):::Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE
Calendar#set(int, int, int, int, int, int):::Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND
Calendar#clear():::Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined
Calendar#clear(int):::Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined
Calendar#isSet(int):::Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.
Calendar#getDisplayName(int, int, Locale):::Returns the string representation of the calendar field value in the given style and locale
Calendar#getDisplayNames(int, int, Locale):::Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values
Calendar#complete():::Fills in any unset fields in the calendar fields
Calendar#isExternallySet(int):::Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation.
Calendar#getSetStateFields():::Returns a field mask (bit mask) indicating all calendar fields that have the state of externally or internally set.
Calendar#setFieldsComputed(int):::Sets the state of the specified calendar fields to computed
Calendar#setFieldsNormalized(int):::Sets the state of the calendar fields that are not specified by fieldMask to unset
Calendar#isPartiallyNormalized():::Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet.
Calendar#isFullyNormalized():::Returns whether the calendar fields are fully in sync with the time value.
Calendar#setUnnormalized():::Marks this Calendar as not sync'd.
Calendar#isFieldSet(int, int):::Returns whether the specified field is on in the fieldMask.
Calendar#selectFields():::Returns a field mask indicating which calendar field values to be used to calculate the time value
Calendar#getAvailableCalendarTypes():::Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment
Calendar#getCalendarType():::Returns the calendar type of this Calendar
Calendar#equals(Object):::Compares this Calendar to the specified Object
Calendar#hashCode():::Returns a hash code for this calendar.
Calendar#before(Object):::Returns whether this Calendar represents a time before the time represented by the specified Object
Calendar#after(Object):::Returns whether this Calendar represents a time after the time represented by the specified Object
Calendar#compareTo(Calendar):::Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.
Calendar#add(int, int):::Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules
Calendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
Calendar#roll(int, int):::Adds the specified (signed) amount to the specified calendar field without changing larger fields
Calendar#setTimeZone(TimeZone):::Sets the time zone with the given time zone value.
Calendar#getTimeZone():::Gets the time zone.
Calendar#getZone():::Returns the time zone (without cloning).
Calendar#setZoneShared(boolean):::Sets the sharedZone flag to shared.
Calendar#setLenient(boolean):::Specifies whether or not date/time interpretation is to be lenient
Calendar#isLenient():::Tells whether date/time interpretation is to be lenient.
Calendar#setFirstDayOfWeek(int):::Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
Calendar#getFirstDayOfWeek():::Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
Calendar#setMinimalDaysInFirstWeek(int):::Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1
Calendar#getMinimalDaysInFirstWeek():::Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1
Calendar#isWeekDateSupported():::Returns whether this Calendar supports week dates
Calendar#getWeekYear():::Returns the week year represented by this Calendar
Calendar#setWeekDate(int, int, int):::Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week
Calendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this Calendar
Calendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance
Calendar#getMaximum(int):::Returns the maximum value for the given calendar field of this Calendar instance
Calendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this Calendar instance
Calendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this Calendar instance
Calendar#getActualMinimum(int):::Returns the minimum value that the specified calendar field could have, given the time value of this Calendar
Calendar#getActualMaximum(int):::Returns the maximum value that the specified calendar field could have, given the time value of this Calendar
Calendar#clone():::Creates and returns a copy of this object.
Calendar#getFieldName(int):::Returns the name of the specified calendar field.
Calendar#toString():::Return a string representation of this calendar
Calendar#toInstant():::Converts this object to an Instant
Collection#size():::Returns the number of elements in this collection
Collection#isEmpty():::Returns true if this collection contains no elements.
Collection#contains(Object):::Returns true if this collection contains the specified element
Collection#iterator():::Returns an iterator over the elements in this collection
Collection#toArray():::Returns an array containing all of the elements in this collection
Collection#toArray(T[]):::Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array
Collection#toArray(IntFunction):::Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array
Collection#add(E):::Ensures that this collection contains the specified element (optional operation)
Collection#remove(Object):::Removes a single instance of the specified element from this collection, if it is present (optional operation)
Collection#containsAll(Collection):::Returns true if this collection contains all of the elements in the specified collection.
Collection#addAll(Collection):::Adds all of the elements in the specified collection to this collection (optional operation)
Collection#removeAll(Collection):::Removes all of this collection's elements that are also contained in the specified collection (optional operation)
Collection#removeIf(Predicate):::Removes all of the elements of this collection that satisfy the given predicate
Collection#retainAll(Collection):::Retains only the elements in this collection that are contained in the specified collection (optional operation)
Collection#clear():::Removes all of the elements from this collection (optional operation)
Collection#equals(Object):::Compares the specified object with this collection for equality
Collection#hashCode():::Returns the hash code value for this collection
Collection#spliterator():::Creates a Spliterator over the elements in this collection
Collection#stream():::Returns a sequential Stream with this collection as its source
Collection#parallelStream():::Returns a possibly parallel Stream with this collection as its source
Collections#sort(List):::Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements
Collections#sort(List, Comparator):::Sorts the specified list according to the order induced by the specified comparator
Collections#binarySearch(List>, T):::Searches the specified list for the specified object using the binary search algorithm
Collections#binarySearch(List, T, Comparator):::Searches the specified list for the specified object using the binary search algorithm
Collections#reverse(List):::Reverses the order of the elements in the specified list.  This method runs in linear time.
Collections#shuffle(List):::Randomly permutes the specified list using a default source of randomness
Collections#shuffle(List, Random):::Randomly permute the specified list using the specified source of randomness
Collections#swap(List, int, int):::Swaps the elements at the specified positions in the specified list
Collections#fill(List, T):::Replaces all of the elements of the specified list with the specified element
Collections#copy(List, List):::Copies all of the elements from one list into another
Collections#min(Collection):::Returns the minimum element of the given collection, according to the natural ordering of its elements
Collections#min(Collection, Comparator):::Returns the minimum element of the given collection, according to the order induced by the specified comparator
Collections#max(Collection):::Returns the maximum element of the given collection, according to the natural ordering of its elements
Collections#max(Collection, Comparator):::Returns the maximum element of the given collection, according to the order induced by the specified comparator
Collections#rotate(List, int):::Rotates the elements in the specified list by the specified distance
Collections#replaceAll(List, T, T):::Replaces all occurrences of one specified value in a list with another
Collections#indexOfSubList(List, List):::Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Collections#lastIndexOfSubList(List, List):::Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Collections#unmodifiableCollection(Collection):::Returns an unmodifiable view of the specified collection
Collections#unmodifiableSet(Set):::Returns an unmodifiable view of the specified set
Collections#unmodifiableSortedSet(SortedSet):::Returns an unmodifiable view of the specified sorted set
Collections#unmodifiableNavigableSet(NavigableSet):::Returns an unmodifiable view of the specified navigable set
Collections#unmodifiableList(List):::Returns an unmodifiable view of the specified list
Collections#unmodifiableMap(Map):::Returns an unmodifiable view of the specified map
Collections#unmodifiableSortedMap(SortedMap):::Returns an unmodifiable view of the specified sorted map
Collections#unmodifiableNavigableMap(NavigableMap):::Returns an unmodifiable view of the specified navigable map
Collections#synchronizedCollection(Collection):::Returns a synchronized (thread-safe) collection backed by the specified collection
Collections#synchronizedSet(Set):::Returns a synchronized (thread-safe) set backed by the specified set
Collections#synchronizedSortedSet(SortedSet):::Returns a synchronized (thread-safe) sorted set backed by the specified sorted set
Collections#synchronizedNavigableSet(NavigableSet):::Returns a synchronized (thread-safe) navigable set backed by the specified navigable set
Collections#synchronizedList(List):::Returns a synchronized (thread-safe) list backed by the specified list
Collections#synchronizedMap(Map):::Returns a synchronized (thread-safe) map backed by the specified map
Collections#synchronizedSortedMap(SortedMap):::Returns a synchronized (thread-safe) sorted map backed by the specified sorted map
Collections#synchronizedNavigableMap(NavigableMap):::Returns a synchronized (thread-safe) navigable map backed by the specified navigable map
Collections#checkedCollection(Collection, Class):::Returns a dynamically typesafe view of the specified collection
Collections#checkedQueue(Queue, Class):::Returns a dynamically typesafe view of the specified queue
Collections#checkedSet(Set, Class):::Returns a dynamically typesafe view of the specified set
Collections#checkedSortedSet(SortedSet, Class):::Returns a dynamically typesafe view of the specified sorted set
Collections#checkedNavigableSet(NavigableSet, Class):::Returns a dynamically typesafe view of the specified navigable set
Collections#checkedList(List, Class):::Returns a dynamically typesafe view of the specified list
Collections#checkedMap(Map, Class, Class):::Returns a dynamically typesafe view of the specified map
Collections#checkedSortedMap(SortedMap, Class, Class):::Returns a dynamically typesafe view of the specified sorted map
Collections#checkedNavigableMap(NavigableMap, Class, Class):::Returns a dynamically typesafe view of the specified navigable map
Collections#emptyIterator():::Returns an iterator that has no elements
Collections#emptyListIterator():::Returns a list iterator that has no elements
Collections#emptyEnumeration():::Returns an enumeration that has no elements
Collections#emptySet():::Returns an empty set (immutable)
Collections#emptySortedSet():::Returns an empty sorted set (immutable)
Collections#emptyNavigableSet():::Returns an empty navigable set (immutable)
Collections#emptyList():::Returns an empty list (immutable)
Collections#emptyMap():::Returns an empty map (immutable)
Collections#emptySortedMap():::Returns an empty sorted map (immutable)
Collections#emptyNavigableMap():::Returns an empty navigable map (immutable)
Collections#singleton(T):::Returns an immutable set containing only the specified object
Collections#singletonSpliterator(T):::Creates a Spliterator with only the specified element
Collections#singletonList(T):::Returns an immutable list containing only the specified object
Collections#singletonMap(K, V):::Returns an immutable map, mapping only the specified key to the specified value
Collections#nCopies(int, T):::Returns an immutable list consisting of n copies of the specified object
Collections#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
Collections#reverseOrder(Comparator):::Returns a comparator that imposes the reverse ordering of the specified comparator
Collections#enumeration(Collection):::Returns an enumeration over the specified collection
Collections#list(Enumeration):::Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration
Collections#eq(Object, Object):::Returns true if the specified arguments are equal, or both null
Collections#frequency(Collection, Object):::Returns the number of elements in the specified collection equal to the specified object
Collections#disjoint(Collection, Collection):::Returns true if the two specified collections have no elements in common
Collections#addAll(Collection, T...):::Adds all of the specified elements to the specified collection
Collections#newSetFromMap(Map):::Returns a set backed by the specified map
Collections#asLifoQueue(Deque):::Returns a view of a Deque as a Last-in-first-out (Lifo) Queue
ComparableTimSort#sort(Object[], int, int, Object[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
Comparator#compare(T, T):::Compares its two arguments for order
Comparator#equals(Object):::Indicates whether some other object is &quot;equal to&quot; this comparator
Comparator#reversed():::Returns a comparator that imposes the reverse ordering of this comparator.
Comparator#thenComparing(Comparator):::Returns a lexicographic-order comparator with another comparator
Comparator#thenComparing(Function, Comparator):::Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.
Comparator#thenComparing(Function):::Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.
Comparator#thenComparingInt(ToIntFunction):::Returns a lexicographic-order comparator with a function that extracts an int sort key.
Comparator#thenComparingLong(ToLongFunction):::Returns a lexicographic-order comparator with a function that extracts a long sort key.
Comparator#thenComparingDouble(ToDoubleFunction):::Returns a lexicographic-order comparator with a function that extracts a double sort key.
Comparator#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering
Comparator#naturalOrder():::Returns a comparator that compares Comparable objects in natural order
Comparator#nullsFirst(Comparator):::Returns a null-friendly comparator that considers null to be less than non-null
Comparator#nullsLast(Comparator):::Returns a null-friendly comparator that considers null to be greater than non-null
Comparator#comparing(Function, Comparator):::Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator
Comparator#comparing(Function):::Accepts a function that extracts a java.lang.Comparable Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingInt(ToIntFunction):::Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingLong(ToLongFunction):::Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingDouble(ToDoubleFunction):::Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key
Currency#getInstance(String):::Returns the Currency instance for the given currency code.
Currency#getInstance(Locale):::Returns the Currency instance for the country of the given locale
Currency#getAvailableCurrencies():::Gets the set of available currencies
Currency#getCurrencyCode():::Gets the ISO 4217 currency code of this currency.
Currency#getSymbol():::Gets the symbol of this currency for the default Locale.Category#DISPLAY DISPLAY locale
Currency#getSymbol(Locale):::Gets the symbol of this currency for the specified locale
Currency#getDefaultFractionDigits():::Gets the default number of fraction digits used with this currency
Currency#getNumericCode():::Returns the ISO 4217 numeric code of this currency.
Currency#getNumericCodeAsString():::Returns the 3 digit ISO 4217 numeric code of this currency as a String
Currency#getDisplayName():::Gets the name that is suitable for displaying this currency for the default Locale.Category#DISPLAY DISPLAY locale
Currency#getDisplayName(Locale):::Gets the name that is suitable for displaying this currency for the specified locale
Currency#toString():::Returns the ISO 4217 currency code of this currency.
Date#clone():::Return a copy of this object.
Date#UTC(int, int, int, int, int, int):::Determines the date and time based on the arguments
Date#parse(String):::Attempts to interpret the string s as a representation of a date and time
Date#getYear():::Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.
Date#setYear(int):::Sets the year of this Date object to be the specified value plus 1900
Date#getMonth():::Returns a number representing the month that contains or begins with the instant in time represented by this Date object
Date#setMonth(int):::Sets the month of this date to the specified value
Date#getDate():::Returns the day of the month represented by this Date object
Date#setDate(int):::Sets the day of the month of this Date object to the specified value
Date#getDay():::Returns the day of the week represented by this date
Date#getHours():::Returns the hour represented by this Date object
Date#setHours(int):::Sets the hour of this Date object to the specified value
Date#getMinutes():::Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone
Date#setMinutes(int):::Sets the minutes of this Date object to the specified value
Date#getSeconds():::Returns the number of seconds past the minute represented by this date
Date#setSeconds(int):::Sets the seconds of this Date to the specified value
Date#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.
Date#setTime(long):::Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.
Date#before(Date):::Tests if this date is before the specified date.
Date#after(Date):::Tests if this date is after the specified date.
Date#equals(Object):::Compares two dates for equality
Date#getMillisOf(Date):::Returns the millisecond value of this Date object without affecting its internal state.
Date#compareTo(Date):::Compares two Dates for ordering.
Date#hashCode():::Returns a hash code value for this object
Date#toString():::Converts this Date object to a String of the form:  dow mon dd hh:mm:ss zzz yyyy where:<ul> <li>dow is the day of the week (Sun, Mon, Tue, Wed,     Thu, Fri, Sat)
Date#toLocaleString():::Creates a string representation of this Date object in an implementation-dependent form
Date#toGMTString():::Creates a string representation of this Date object of the form:  d mon yyyy hh:mm:ss GMT where:<ul> <li>d is the day of the month (1 through 31),     as one or two decimal digits
Date#getTimezoneOffset():::Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object
Date#from(Instant):::Obtains an instance of Date from an Instant object
Date#toInstant():::Converts this Date object to an Instant
Deque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#offerFirst(E):::Inserts the specified element at the front of this deque unless it would violate capacity restrictions
Deque#offerLast(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions
Deque#removeFirst():::Retrieves and removes the first element of this deque
Deque#removeLast():::Retrieves and removes the last element of this deque
Deque#pollFirst():::Retrieves and removes the first element of this deque, or returns null if this deque is empty.
Deque#pollLast():::Retrieves and removes the last element of this deque, or returns null if this deque is empty.
Deque#getFirst():::Retrieves, but does not remove, the first element of this deque
Deque#getLast():::Retrieves, but does not remove, the last element of this deque
Deque#peekFirst():::Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.
Deque#peekLast():::Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.
Deque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
Deque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
Deque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
Deque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
Deque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
Deque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
Deque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
Deque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
Deque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator
Deque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#pop():::Pops an element from the stack represented by this deque
Deque#remove(Object):::Removes the first occurrence of the specified element from this deque
Deque#contains(Object):::Returns true if this deque contains the specified element
Deque#size():::Returns the number of elements in this deque.
Deque#iterator():::Returns an iterator over the elements in this deque in proper sequence
Deque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
Dictionary#size():::Returns the number of entries (distinct keys) in this dictionary.
Dictionary#isEmpty():::Tests if this dictionary maps no keys to value
Dictionary#keys():::Returns an enumeration of the keys in this dictionary
Dictionary#elements():::Returns an enumeration of the values in this dictionary
Dictionary#get(Object):::Returns the value to which the key is mapped in this dictionary
Dictionary#put(K, V):::Maps the specified key to the specified value in this dictionary
Dictionary#remove(Object):::Removes the key (and its corresponding value) from this dictionary
DoubleSummaryStatistics#accept(double):::Records another value into the summary information.
DoubleSummaryStatistics#combine(DoubleSummaryStatistics):::Combines the state of another DoubleSummaryStatistics into this one.
DoubleSummaryStatistics#getCount():::Return the count of values recorded.
DoubleSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded
DoubleSummaryStatistics#getMin():::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded
DoubleSummaryStatistics#getMax():::Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded
DoubleSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded
DoubleSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
DualPivotQuicksort#sort(int[], int, int, int[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(long[], int, int, long[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(short[], int, int, short[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(char[], int, int, char[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(byte[], int, int):::Sorts the specified range of the array.
DualPivotQuicksort#sort(float[], int, int, float[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(double[], int, int, double[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DuplicateFormatFlagsException#getFlags():::Returns the set of flags which contains a duplicate flag.
Enumeration#hasMoreElements():::Tests if this enumeration contains more elements.
Enumeration#nextElement():::Returns the next element of this enumeration if this enumeration object has at least one more element to provide.
Enumeration#asIterator():::Returns an Iterator that traverses the remaining elements covered by this enumeration
EnumMap#size():::Returns the number of key-value mappings in this map.
EnumMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
EnumMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
EnumMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
EnumMap#put(K, V):::Associates the specified value with the specified key in this map
EnumMap#remove(Object):::Removes the mapping for this key from this map if present.
EnumMap#putAll(Map):::Copies all of the mappings from the specified map to this map
EnumMap#clear():::Removes all mappings from this map.
EnumMap#keySet():::Returns a Set view of the keys contained in this map
EnumMap#values():::Returns a Collection view of the values contained in this map
EnumMap#entrySet():::Returns a Set view of the mappings contained in this map
EnumMap#equals(Object):::Compares the specified object with this map for equality
EnumMap#hashCode():::Returns the hash code value for this map
EnumMap#clone():::Returns a shallow copy of this enum map
EnumSet#noneOf(Class):::Creates an empty enum set with the specified element type.
EnumSet#allOf(Class):::Creates an enum set containing all of the elements in the specified element type.
EnumSet#addAll():::Adds all of the elements from the appropriate enum type to this enum set, which is empty prior to the call.
EnumSet#copyOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any).
EnumSet#copyOf(Collection):::Creates an enum set initialized from the specified collection
EnumSet#complementOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set.
EnumSet#of(E):::Creates an enum set initially containing the specified element
EnumSet#of(E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E...):::Creates an enum set initially containing the specified elements
EnumSet#range(E, E):::Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints
EnumSet#addRange(E, E):::Adds the specified range to this enum set, which is empty prior to the call.
EnumSet#clone():::Returns a copy of this set.
EnumSet#complement():::Complements the contents of this enum set.
EnumSet#typeCheck(E):::Throws an exception if e is not of the correct type for this enum set.
EnumSet#writeReplace():::Returns a  SerializationProxy representing the state of this instance.
EventListenerProxy#getListener():::Returns the listener associated with the proxy.
EventObject#getSource():::The object on which the Event initially occurred.
EventObject#toString():::Returns a String representation of this EventObject.
FormatFlagsConversionMismatchException#getFlags():::Returns the incompatible flag.
FormatFlagsConversionMismatchException#getConversion():::Returns the incompatible conversion.
Formattable#formatTo(Formatter, int, int, int):::Formats the object using the provided Formatter formatter.
Formatter#locale():::Returns the locale set by the construction of this formatter
Formatter#out():::Returns the destination for the output.
Formatter#toString():::Returns the result of invoking toString() on the destination for the output
Formatter#flush():::Flushes this formatter
Formatter#close():::Closes this formatter
Formatter#ioException():::Returns the IOException last thrown by this formatter's Appendable
Formatter#format(String, Object...):::Writes a formatted string to this object's destination using the specified format string and arguments
Formatter#format(Locale, String, Object...):::Writes a formatted string to this object's destination using the specified locale, format string, and arguments.
GregorianCalendar#setGregorianChange(Date):::Sets the GregorianCalendar change date
GregorianCalendar#getGregorianChange():::Gets the Gregorian Calendar change date
GregorianCalendar#isLeapYear(int):::Determines if the given year is a leap year
GregorianCalendar#getCalendarType():::Returns "gregory" as the calendar type.
GregorianCalendar#equals(Object):::Compares this GregorianCalendar to the specified Object
GregorianCalendar#hashCode():::Generates the hash code for this GregorianCalendar object.
GregorianCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
GregorianCalendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
GregorianCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields
GregorianCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
GregorianCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
GregorianCalendar#isWeekDateSupported():::Returns true indicating this GregorianCalendar supports week dates.
GregorianCalendar#getWeekYear():::Returns the week year represented by this GregorianCalendar
GregorianCalendar#setWeekDate(int, int, int):::Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek
GregorianCalendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this GregorianCalendar
GregorianCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values
GregorianCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).
GregorianCalendar#toZonedDateTime():::Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar
GregorianCalendar#from(ZonedDateTime):::Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object
HashMap#hash(Object):::Computes key.hashCode() and spreads (XORs) higher bits of hash to lower
HashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.
HashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.
HashMap#tableSizeFor(int):::Returns a power of two size for the given target capacity.
HashMap#putMapEntries(Map, boolean):::Implements Map.putAll and Map constructor.
HashMap#size():::Returns the number of key-value mappings in this map.
HashMap#isEmpty():::Returns true if this map contains no key-value mappings.
HashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
HashMap#getNode(int, Object):::Implements Map.get and related methods.
HashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
HashMap#put(K, V):::Associates the specified value with the specified key in this map
HashMap#putVal(int, K, V, boolean, boolean):::Implements Map.put and related methods.
HashMap#resize():::Initializes or doubles table size
HashMap#treeifyBin(Node[], int):::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.
HashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
HashMap#remove(Object):::Removes the mapping for the specified key from this map if present.
HashMap#removeNode(int, Object, Object, boolean, boolean):::Implements Map.remove and related methods.
HashMap#clear():::Removes all of the mappings from this map
HashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
HashMap#keySet():::Returns a Set view of the keys contained in this map
HashMap#values():::Returns a Collection view of the values contained in this map
HashMap#entrySet():::Returns a Set view of the mappings contained in this map
HashMap#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the mapping function modifies this map during computation.
HashMap#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#clone():::Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.
HashMap#reinitialize():::Reset to initial default state
HashMap.TreeNode#root():::Returns root of tree containing this node.
HashMap.TreeNode#moveRootToFront(Node[], TreeNode):::Ensures that the given root is the first node of its bin.
HashMap.TreeNode#find(int, Object, Class):::Finds the node starting at root p with the given hash and key
HashMap.TreeNode#getTreeNode(int, Object):::Calls find for root node.
HashMap.TreeNode#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable
HashMap.TreeNode#treeify(Node[]):::Forms tree of the nodes linked from this node.
HashMap.TreeNode#untreeify(HashMap):::Returns a list of non-TreeNodes replacing those linked from this node.
HashMap.TreeNode#putTreeVal(HashMap, Node[], int, K, V):::Tree version of putVal.
HashMap.TreeNode#removeTreeNode(HashMap, Node[], boolean):::Removes the given node, that must be present before this call
HashMap.TreeNode#split(HashMap, Node[], int, int):::Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small
HashMap.TreeNode#checkInvariants(TreeNode):::Recursive invariant check
HashSet#iterator():::Returns an iterator over the elements in this set
HashSet#size():::Returns the number of elements in this set (its cardinality).
HashSet#isEmpty():::Returns true if this set contains no elements.
HashSet#contains(Object):::Returns true if this set contains the specified element
HashSet#add(E):::Adds the specified element to this set if it is not already present
HashSet#remove(Object):::Removes the specified element from this set if it is present
HashSet#clear():::Removes all of the elements from this set
HashSet#clone():::Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.
HashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
Hashtable#size():::Returns the number of keys in this hashtable.
Hashtable#isEmpty():::Tests if this hashtable maps no keys to values.
Hashtable#keys():::Returns an enumeration of the keys in this hashtable
Hashtable#elements():::Returns an enumeration of the values in this hashtable
Hashtable#contains(Object):::Tests if some key maps into the specified value in this hashtable
Hashtable#containsValue(Object):::Returns true if this hashtable maps one or more keys to this value
Hashtable#containsKey(Object):::Tests if the specified object is a key in this hashtable.
Hashtable#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
Hashtable#rehash():::Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently
Hashtable#put(K, V):::Maps the specified key to the specified value in this hashtable
Hashtable#remove(Object):::Removes the key (and its corresponding value) from this hashtable
Hashtable#putAll(Map):::Copies all of the mappings from the specified map to this hashtable
Hashtable#clear():::Clears this hashtable so that it contains no keys.
Hashtable#clone():::Creates a shallow copy of this hashtable
Hashtable#cloneHashtable():::Calls super.clone()
Hashtable#toString():::Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters " ,&nbsp;" (comma and space)
Hashtable#keySet():::Returns a Set view of the keys contained in this map
Hashtable#entrySet():::Returns a Set view of the mappings contained in this map
Hashtable#values():::Returns a Collection view of the values contained in this map
Hashtable#equals(Object):::Compares the specified Object with this Map for equality, as per the definition in the Map interface.
Hashtable#hashCode():::Returns the hash code value for this Map as per the definition in the Map interface.
Hashtable#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the mapping function modified this map during computation.
Hashtable#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#writeHashtable(java.io.ObjectOutputStream):::Perform serialization of the Hashtable to an ObjectOutputStream
Hashtable#defaultWriteHashtable(java.io.ObjectOutputStream, int, float):::Called by Properties to write out a simulated threshold and loadfactor.
Hashtable#readHashtable(java.io.ObjectInputStream):::Perform deserialization of the Hashtable from an ObjectInputStream
IdentityHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.
IdentityHashMap#size():::Returns the number of key-value mappings in this identity hash map.
IdentityHashMap#isEmpty():::Returns true if this identity hash map contains no key-value mappings.
IdentityHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
IdentityHashMap#containsKey(Object):::Tests whether the specified object reference is a key in this identity hash map.
IdentityHashMap#containsValue(Object):::Tests whether the specified object reference is a value in this identity hash map.
IdentityHashMap#put(K, V):::Associates the specified value with the specified key in this identity hash map
IdentityHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
IdentityHashMap#remove(Object):::Removes the mapping for this key from this map if present.
IdentityHashMap#clear():::Removes all of the mappings from this map
IdentityHashMap#equals(Object):::Compares the specified object with this map for equality
IdentityHashMap#hashCode():::Returns the hash code value for this map
IdentityHashMap#clone():::Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.
IdentityHashMap#keySet():::Returns an identity-based set view of the keys contained in this map
IdentityHashMap#values():::Returns a Collection view of the values contained in this map
IdentityHashMap#entrySet():::Returns a Set view of the mappings contained in this map
IllegalFormatCodePointException#getCodePoint():::Returns the illegal code point as defined by Character#isValidCodePoint.
IllegalFormatConversionException#getConversion():::Returns the inapplicable conversion.
IllegalFormatConversionException#getArgumentClass():::Returns the class of the mismatched argument.
IllegalFormatFlagsException#getFlags():::Returns the set of flags which contains an illegal combination.
IllegalFormatPrecisionException#getPrecision():::Returns the precision
IllegalFormatWidthException#getWidth():::Returns the width
IllformedLocaleException#getErrorIndex():::Returns the index where the error was found
ImmutableCollections.SubList#fromSubList(SubList, int, int):::Constructs a sublist of another SubList.
ImmutableCollections.SubList#fromList(List, int, int):::Constructs a sublist of an arbitrary AbstractImmutableList, which is not a SubList itself.
IntSummaryStatistics#accept(int):::Records a new value into the summary information
IntSummaryStatistics#combine(IntSummaryStatistics):::Combines the state of another IntSummaryStatistics into this one.
IntSummaryStatistics#getCount():::Returns the count of values recorded.
IntSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.
IntSummaryStatistics#getMin():::Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.
IntSummaryStatistics#getMax():::Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.
IntSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
IntSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
Iterator#hasNext():::Returns true if the iteration has more elements
Iterator#next():::Returns the next element in the iteration.
Iterator#remove():::Removes from the underlying collection the last element returned by this iterator (optional operation)
Iterator#forEachRemaining(Consumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
JapaneseImperialCalendar#getCalendarType():::Returns "japanese" as the calendar type of this JapaneseImperialCalendar.
JapaneseImperialCalendar#equals(Object):::Compares this JapaneseImperialCalendar to the specified Object
JapaneseImperialCalendar#hashCode():::Generates the hash code for this JapaneseImperialCalendar object.
JapaneseImperialCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
JapaneseImperialCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields
JapaneseImperialCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance
JapaneseImperialCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods.
JapaneseImperialCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods
JapaneseImperialCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values
JapaneseImperialCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).
JumboEnumSet#iterator():::Returns an iterator over the elements contained in this set
JumboEnumSet#size():::Returns the number of elements in this set.
JumboEnumSet#isEmpty():::Returns true if this set contains no elements.
JumboEnumSet#contains(Object):::Returns true if this set contains the specified element.
JumboEnumSet#add(E):::Adds the specified element to this set if it is not already present.
JumboEnumSet#remove(Object):::Removes the specified element from this set if it is present.
JumboEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.
JumboEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
JumboEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.
JumboEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.
JumboEnumSet#clear():::Removes all of the elements from this set.
JumboEnumSet#equals(Object):::Compares the specified object with this set for equality
KeyValueHolder#getKey():::Gets the key from this holder.
KeyValueHolder#getValue():::Gets the value from this holder.
KeyValueHolder#setValue(V):::Throws UnsupportedOperationException.
KeyValueHolder#equals(Object):::Compares the specified object with this entry for equality
KeyValueHolder#hashCode():::Returns the hash code value for this map entry
KeyValueHolder#toString():::Returns a String representation of this map entry
LinkedHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
LinkedHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
LinkedHashMap#removeEldestEntry(Map.Entry):::Returns true if this map should remove its eldest entry
LinkedHashMap#keySet():::Returns a Set view of the keys contained in this map
LinkedHashMap#values():::Returns a Collection view of the values contained in this map
LinkedHashMap#entrySet():::Returns a Set view of the mappings contained in this map
LinkedHashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
LinkedList#linkLast(E):::Links e as last element.
LinkedList#linkBefore(E, Node):::Inserts element e before non-null Node succ.
LinkedList#unlink(Node):::Unlinks non-null node x.
LinkedList#getFirst():::Returns the first element in this list.
LinkedList#getLast():::Returns the last element in this list.
LinkedList#removeFirst():::Removes and returns the first element from this list.
LinkedList#removeLast():::Removes and returns the last element from this list.
LinkedList#addFirst(E):::Inserts the specified element at the beginning of this list.
LinkedList#addLast(E):::Appends the specified element to the end of this list
LinkedList#contains(Object):::Returns true if this list contains the specified element
LinkedList#size():::Returns the number of elements in this list.
LinkedList#add(E):::Appends the specified element to the end of this list
LinkedList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
LinkedList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator
LinkedList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
LinkedList#clear():::Removes all of the elements from this list
LinkedList#get(int):::Returns the element at the specified position in this list.
LinkedList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
LinkedList#add(int, E):::Inserts the specified element at the specified position in this list
LinkedList#remove(int):::Removes the element at the specified position in this list
LinkedList#node(int):::Returns the (non-null) Node at the specified element index.
LinkedList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
LinkedList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
LinkedList#peek():::Retrieves, but does not remove, the head (first element) of this list.
LinkedList#element():::Retrieves, but does not remove, the head (first element) of this list.
LinkedList#poll():::Retrieves and removes the head (first element) of this list.
LinkedList#remove():::Retrieves and removes the head (first element) of this list.
LinkedList#offer(E):::Adds the specified element as the tail (last element) of this list.
LinkedList#offerFirst(E):::Inserts the specified element at the front of this list.
LinkedList#offerLast(E):::Inserts the specified element at the end of this list.
LinkedList#peekFirst():::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.
LinkedList#peekLast():::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
LinkedList#pollFirst():::Retrieves and removes the first element of this list, or returns null if this list is empty.
LinkedList#pollLast():::Retrieves and removes the last element of this list, or returns null if this list is empty.
LinkedList#push(E):::Pushes an element onto the stack represented by this list
LinkedList#pop():::Pops an element from the stack represented by this list
LinkedList#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail)
LinkedList#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail)
LinkedList#listIterator(int):::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list
LinkedList#clone():::Returns a shallow copy of this LinkedList
LinkedList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
LinkedList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
LinkedList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
List#size():::Returns the number of elements in this list
List#isEmpty():::Returns true if this list contains no elements.
List#contains(Object):::Returns true if this list contains the specified element
List#iterator():::Returns an iterator over the elements in this list in proper sequence.
List#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
List#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
List#add(E):::Appends the specified element to the end of this list (optional operation)
List#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present (optional operation)
List#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.
List#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)
List#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
List#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection (optional operation).
List#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection (optional operation)
List#replaceAll(UnaryOperator):::Replaces each element of this list with the result of applying the operator to that element
List#sort(Comparator):::Sorts this list according to the order induced by the specified Comparator
List#clear():::Removes all of the elements from this list (optional operation)
List#equals(Object):::Compares the specified object with this list for equality
List#hashCode():::Returns the hash code value for this list
List#get(int):::Returns the element at the specified position in this list.
List#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation).
List#add(int, E):::Inserts the specified element at the specified position in this list (optional operation)
List#remove(int):::Removes the element at the specified position in this list (optional operation)
List#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
List#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
List#listIterator():::Returns a list iterator over the elements in this list (in proper sequence).
List#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
List#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
List#spliterator():::Creates a Spliterator over the elements in this list
List#of():::Returns an unmodifiable list containing zero elements
List#of(E):::Returns an unmodifiable list containing one element
List#of(E, E):::Returns an unmodifiable list containing two elements
List#of(E, E, E):::Returns an unmodifiable list containing three elements
List#of(E, E, E, E):::Returns an unmodifiable list containing four elements
List#of(E, E, E, E, E):::Returns an unmodifiable list containing five elements
List#of(E, E, E, E, E, E):::Returns an unmodifiable list containing six elements
List#of(E, E, E, E, E, E, E):::Returns an unmodifiable list containing seven elements
List#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing eight elements
List#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing nine elements
List#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing ten elements
List#of(E...):::Returns an unmodifiable list containing an arbitrary number of elements
List#copyOf(Collection):::Returns an unmodifiable List containing the elements of the given Collection, in its iteration order
ListIterator#hasNext():::Returns true if this list iterator has more elements when traversing the list in the forward direction
ListIterator#next():::Returns the next element in the list and advances the cursor position
ListIterator#hasPrevious():::Returns true if this list iterator has more elements when traversing the list in the reverse direction
ListIterator#previous():::Returns the previous element in the list and moves the cursor position backwards
ListIterator#nextIndex():::Returns the index of the element that would be returned by a subsequent call to #next
ListIterator#previousIndex():::Returns the index of the element that would be returned by a subsequent call to #previous
ListIterator#remove():::Removes from the list the last element that was returned by #next or #previous (optional operation)
ListIterator#set(E):::Replaces the last element returned by #next or #previous with the specified element (optional operation)
ListIterator#add(E):::Inserts the specified element into the list (optional operation)
ListResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
ListResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.
ListResourceBundle#getContents():::Returns an array in which each item is a pair of objects in an Object array
Locale#getInstance(String, String, String):::Returns a Locale constructed from the given language, country and variant
Locale#getDefault():::Gets the current value of the default locale for this instance of the Java Virtual Machine
Locale#getDefault(Locale.Category):::Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine
Locale#setDefault(Locale):::Sets the default locale for this instance of the Java Virtual Machine
Locale#setDefault(Locale.Category, Locale):::Sets the default locale for the specified Category for this instance of the Java Virtual Machine
Locale#getAvailableLocales():::Returns an array of all installed locales
Locale#getISOCountries():::Returns a list of all 2-letter country codes defined in ISO 3166
Locale#getISOCountries(IsoCountryCode):::Returns a Set of ISO3166 country codes for the specified type.
Locale#getISOLanguages():::Returns a list of all 2-letter language codes defined in ISO 639
Locale#getLanguage():::Returns the language code of this Locale
Locale#getScript():::Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code
Locale#getCountry():::Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.
Locale#getVariant():::Returns the variant code for this locale.
Locale#hasExtensions():::Returns true if this Locale has any  extensions.
Locale#stripExtensions():::Returns a copy of this Locale with no  extensions
Locale#getExtension(char):::Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key
Locale#getExtensionKeys():::Returns the set of extension keys associated with this locale, or the empty set if it has no extensions
Locale#getUnicodeLocaleAttributes():::Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes
Locale#getUnicodeLocaleType(String):::Returns the Unicode locale type associated with the specified Unicode locale key for this locale
Locale#getUnicodeLocaleKeys():::Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none
Locale#getBaseLocale():::Package locale method returning the Locale's BaseLocale, used by ResourceBundle
Locale#getLocaleExtensions():::Package private method returning the Locale's LocaleExtensions, used by ResourceBundle.
Locale#toString():::Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below:  language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions   Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case
Locale#toLanguageTag():::Returns a well-formed IETF BCP 47 language tag representing this locale
Locale#forLanguageTag(String):::Returns a locale for the specified IETF BCP 47 language tag string
Locale#getISO3Language():::Returns a three-letter abbreviation of this locale's language
Locale#getISO3Country():::Returns a three-letter abbreviation for this locale's country
Locale#getDisplayLanguage():::Returns a name for the locale's language that is appropriate for display to the user
Locale#getDisplayLanguage(Locale):::Returns a name for the locale's language that is appropriate for display to the user
Locale#getDisplayScript():::Returns a name for the locale's script that is appropriate for display to the user
Locale#getDisplayScript(Locale):::Returns a name for the locale's script that is appropriate for display to the user
Locale#getDisplayCountry():::Returns a name for the locale's country that is appropriate for display to the user
Locale#getDisplayCountry(Locale):::Returns a name for the locale's country that is appropriate for display to the user
Locale#getDisplayVariant():::Returns a name for the locale's variant code that is appropriate for display to the user
Locale#getDisplayVariant(Locale):::Returns a name for the locale's variant code that is appropriate for display to the user
Locale#getDisplayName():::Returns a name for the locale that is appropriate for display to the user
Locale#getDisplayName(Locale):::Returns a name for the locale that is appropriate for display to the user
Locale#clone():::Overrides Cloneable.
Locale#hashCode():::Override hashCode
Locale#equals(Object):::Returns true if this Locale is equal to another object
Locale.Builder#setLocale(Locale):::Resets the Builder to match the provided locale
Locale.Builder#setLanguageTag(String):::Resets the Builder to match the provided IETF BCP 47 language tag
Locale.Builder#setLanguage(String):::Sets the language
Locale.Builder#setScript(String):::Sets the script
Locale.Builder#setRegion(String):::Sets the region
Locale.Builder#setVariant(String):::Sets the variant
Locale.Builder#setExtension(char, String):::Sets the extension for the given key
Locale.Builder#setUnicodeLocaleKeyword(String, String):::Sets the Unicode locale keyword type for the given key
Locale.Builder#addUnicodeLocaleAttribute(String):::Adds a unicode locale attribute, if not already present, otherwise has no effect
Locale.Builder#removeUnicodeLocaleAttribute(String):::Removes a unicode locale attribute, if present, otherwise has no effect
Locale.Builder#clear():::Resets the builder to its initial, empty state.
Locale.Builder#clearExtensions():::Resets the extensions to their initial, empty state
Locale.Builder#build():::Returns an instance of Locale created from the fields set on this builder
Locale.LanguageRange#getRange():::Returns the language range of this LanguageRange.
Locale.LanguageRange#getWeight():::Returns the weight of this LanguageRange.
Locale.LanguageRange#parse(String):::Parses the given ranges to generate a Language Priority List
Locale.LanguageRange#parse(String, Map>):::Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map
Locale.LanguageRange#mapEquivalents(List, Map>):::Generates a new customized Language Priority List using the given priorityList and map
Locale.LanguageRange#hashCode():::Returns a hash code value for the object.
Locale.LanguageRange#equals(Object):::Compares this object to the specified object
Locale.LanguageRange#toString():::Returns an informative string representation of this LanguageRange object, consisting of language range and weight if the range is weighted and the weight is less than the max weight.
Locale#filter(List, Collection, FilteringMode):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
Locale#filter(List, Collection):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
Locale#filterTags(List, Collection, FilteringMode):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Locale#filterTags(List, Collection):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Locale#lookup(List, Collection):::Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.
Locale#lookupTag(List, Collection):::Returns the best-matching language tag using the lookup mechanism defined in RFC 4647
LocaleISOData#computeISO3166_1Alpha3Countries():::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.
LongSummaryStatistics#accept(int):::Records a new int value into the summary information.
LongSummaryStatistics#accept(long):::Records a new long value into the summary information.
LongSummaryStatistics#combine(LongSummaryStatistics):::Combines the state of another LongSummaryStatistics into this one.
LongSummaryStatistics#getCount():::Returns the count of values recorded.
LongSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.
LongSummaryStatistics#getMin():::Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.
LongSummaryStatistics#getMax():::Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded
LongSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
LongSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
Map#size():::Returns the number of key-value mappings in this map
Map#isEmpty():::Returns true if this map contains no key-value mappings.
Map#containsKey(Object):::Returns true if this map contains a mapping for the specified key
Map#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
Map#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
Map#put(K, V):::Associates the specified value with the specified key in this map (optional operation)
Map#remove(Object):::Removes the mapping for a key from this map if it is present (optional operation)
Map#putAll(Map):::Copies all of the mappings from the specified map to this map (optional operation)
Map#clear():::Removes all of the mappings from this map (optional operation)
Map#keySet():::Returns a Set view of the keys contained in this map
Map#values():::Returns a Collection view of the values contained in this map
Map#entrySet():::Returns a Set view of the mappings contained in this map
Map.Entry#getKey():::Returns the key corresponding to this entry.
Map.Entry#getValue():::Returns the value corresponding to this entry
Map.Entry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation)
Map.Entry#equals(Object):::Compares the specified object with this entry for equality
Map.Entry#hashCode():::Returns the hash code value for this map entry
Map.Entry#comparingByKey():::Returns a comparator that compares Map.Entry in natural order on key
Map.Entry#comparingByValue():::Returns a comparator that compares Map.Entry in natural order on value
Map.Entry#comparingByKey(Comparator):::Returns a comparator that compares Map.Entry by key using the given Comparator
Map.Entry#comparingByValue(Comparator):::Returns a comparator that compares Map.Entry by value using the given Comparator
Map#equals(Object):::Compares the specified object with this map for equality
Map#hashCode():::Returns the hash code value for this map
Map#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
Map#forEach(BiConsumer):::Performs the given action for each entry in this map until all entries have been processed or the action throws an exception
Map#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception
Map#putIfAbsent(K, V):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.
Map#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value.
Map#replace(K, V, V):::Replaces the entry for the specified key only if currently mapped to the specified value.
Map#replace(K, V):::Replaces the entry for the specified key only if it is currently mapped to some value.
Map#computeIfAbsent(K, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null
Map#computeIfPresent(K, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value
Map#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
Map#merge(K, V, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value
Map#of():::Returns an unmodifiable map containing zero mappings
Map#ofEntries(Entry...):::Returns an unmodifiable map containing keys and values extracted from the given entries
Map#entry(K, V):::Returns an unmodifiable Entry containing the given key and value
Map#copyOf(Map):::Returns an unmodifiable Map containing the entries of the given Map
MissingFormatArgumentException#getFormatSpecifier():::Returns the unmatched format specifier.
MissingFormatWidthException#getFormatSpecifier():::Returns the format specifier which does not have a width.
MissingResourceException#getClassName():::Gets parameter passed by constructor.
MissingResourceException#getKey():::Gets parameter passed by constructor.
NavigableMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
NavigableMap#lowerKey(K):::Returns the greatest key strictly less than the given key, or null if there is no such key.
NavigableMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
NavigableMap#floorKey(K):::Returns the greatest key less than or equal to the given key, or null if there is no such key.
NavigableMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
NavigableMap#ceilingKey(K):::Returns the least key greater than or equal to the given key, or null if there is no such key.
NavigableMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
NavigableMap#higherKey(K):::Returns the least key strictly greater than the given key, or null if there is no such key.
NavigableMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
NavigableMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
NavigableMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
NavigableMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
NavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map
NavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map
NavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map
NavigableMap#subMap(K, boolean, K, boolean):::Returns a view of the portion of this map whose keys range from fromKey to toKey
NavigableMap#headMap(K, boolean):::Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey
NavigableMap#tailMap(K, boolean):::Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey
NavigableMap#subMap(K, K):::Equivalent to {@code subMap(fromKey, true, toKey, false).
NavigableMap#headMap(K):::Equivalent to {@code headMap(toKey, false).
NavigableMap#tailMap(K):::Equivalent to {@code tailMap(fromKey, true).
NavigableSet#lower(E):::Returns the greatest element in this set strictly less than the given element, or null if there is no such element.
NavigableSet#floor(E):::Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
NavigableSet#ceiling(E):::Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
NavigableSet#higher(E):::Returns the least element in this set strictly greater than the given element, or null if there is no such element.
NavigableSet#pollFirst():::Retrieves and removes the first (lowest) element, or returns null if this set is empty.
NavigableSet#pollLast():::Retrieves and removes the last (highest) element, or returns null if this set is empty.
NavigableSet#iterator():::Returns an iterator over the elements in this set, in ascending order.
NavigableSet#descendingSet():::Returns a reverse order view of the elements contained in this set
NavigableSet#descendingIterator():::Returns an iterator over the elements in this set, in descending order
NavigableSet#subSet(E, boolean, E, boolean):::Returns a view of the portion of this set whose elements range from fromElement to toElement
NavigableSet#headSet(E, boolean):::Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement
NavigableSet#tailSet(E, boolean):::Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement
NavigableSet#subSet(E, E):::Equivalent to {@code subSet(fromElement, true, toElement, false).
NavigableSet#headSet(E):::Equivalent to {@code headSet(toElement, false).
NavigableSet#tailSet(E):::Equivalent to {@code tailSet(fromElement, true).
Objects#equals(Object, Object):::Returns true if the arguments are equal to each other and false otherwise
Objects#deepEquals(Object, Object):::Returns true if the arguments are deeply equal to each other and false otherwise
Objects#hashCode(Object):::Returns the hash code of a non-null argument and 0 for a null argument.
Objects#hash(Object...):::Generates a hash code for a sequence of input values
Objects#toString(Object):::Returns the result of calling toString for a non-null argument and "null" for a null argument.
Objects#toString(Object, String):::Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.
Objects#compare(T, T, Comparator):::Returns 0 if the arguments are identical and c.compare(a, b) otherwise
Objects#requireNonNull(T):::Checks that the specified object reference is not null
Objects#requireNonNull(T, String):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
Objects#isNull(Object):::Returns true if the provided reference is null otherwise returns false.
Objects#nonNull(Object):::Returns true if the provided reference is non-null otherwise returns false.
Objects#requireNonNullElse(T, T):::Returns the first argument if it is non-null and otherwise returns the non-null second argument.
Objects#requireNonNullElseGet(T, Supplier):::Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().
Objects#requireNonNull(T, Supplier):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
Objects#checkIndex(int, int):::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)
Objects#checkFromToIndex(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
Objects#checkFromIndexSize(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
Observable#addObserver(Observer):::Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set
Observable#deleteObserver(Observer):::Deletes an observer from the set of observers of this object
Observable#notifyObservers():::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
Observable#notifyObservers(Object):::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
Observable#deleteObservers():::Clears the observer list so that this object no longer has any observers.
Observable#setChanged():::Marks this Observable object as having been changed; the hasChanged method will now return true.
Observable#clearChanged():::Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false
Observable#hasChanged():::Tests if this object has changed.
Observable#countObservers():::Returns the number of observers of this Observable object.
Observer#update(Observable, Object):::This method is called whenever the observed object is changed
Optional#empty():::Returns an empty Optional instance
Optional#of(T):::Returns an Optional describing the given non-null value.
Optional#ofNullable(T):::Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.
Optional#get():::If a value is present, returns the value, otherwise throws NoSuchElementException.
Optional#isPresent():::If a value is present, returns true, otherwise false.
Optional#isEmpty():::If a value is  not present, returns true, otherwise false.
Optional#ifPresent(Consumer):::If a value is present, performs the given action with the value, otherwise does nothing.
Optional#ifPresentOrElse(Consumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
Optional#filter(Predicate):::If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.
Optional#map(Function):::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional
Optional#flatMap(Function>):::If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional
Optional#or(Supplier>):::If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.
Optional#stream():::If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.
Optional#orElse(T):::If a value is present, returns the value, otherwise returns other.
Optional#orElseGet(Supplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
Optional#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
Optional#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
Optional#equals(Object):::Indicates whether some other object is "equal to" this Optional
Optional#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
Optional#toString():::Returns a non-empty string representation of this Optional suitable for debugging
OptionalDouble#empty():::Returns an empty OptionalDouble instance
OptionalDouble#of(double):::Returns an OptionalDouble describing the given value.
OptionalDouble#getAsDouble():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalDouble#isPresent():::If a value is present, returns true, otherwise false.
OptionalDouble#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalDouble#ifPresent(DoubleConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalDouble#ifPresentOrElse(DoubleConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalDouble#stream():::If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream.
OptionalDouble#orElse(double):::If a value is present, returns the value, otherwise returns other.
OptionalDouble#orElseGet(DoubleSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalDouble#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalDouble#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalDouble#equals(Object):::Indicates whether some other object is "equal to" this OptionalDouble
OptionalDouble#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalDouble#toString():::Returns a non-empty string representation of this OptionalDouble suitable for debugging
OptionalInt#empty():::Returns an empty OptionalInt instance
OptionalInt#of(int):::Returns an OptionalInt describing the given value.
OptionalInt#getAsInt():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalInt#isPresent():::If a value is present, returns true, otherwise false.
OptionalInt#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalInt#ifPresent(IntConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalInt#ifPresentOrElse(IntConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalInt#stream():::If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream.
OptionalInt#orElse(int):::If a value is present, returns the value, otherwise returns other.
OptionalInt#orElseGet(IntSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalInt#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalInt#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalInt#equals(Object):::Indicates whether some other object is "equal to" this OptionalInt
OptionalInt#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalInt#toString():::Returns a non-empty string representation of this OptionalInt suitable for debugging
OptionalLong#empty():::Returns an empty OptionalLong instance
OptionalLong#of(long):::Returns an OptionalLong describing the given value.
OptionalLong#getAsLong():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalLong#isPresent():::If a value is present, returns true, otherwise false.
OptionalLong#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalLong#ifPresent(LongConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalLong#ifPresentOrElse(LongConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalLong#stream():::If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream.
OptionalLong#orElse(long):::If a value is present, returns the value, otherwise returns other.
OptionalLong#orElseGet(LongSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalLong#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalLong#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalLong#equals(Object):::Indicates whether some other object is "equal to" this OptionalLong
OptionalLong#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalLong#toString():::Returns a non-empty string representation of this OptionalLong suitable for debugging
PrimitiveIterator#forEachRemaining(T_CONS):::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception
PrimitiveIterator.OfInt#nextInt():::Returns the next int element in the iteration.
PrimitiveIterator.OfInt#forEachRemaining(IntConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PrimitiveIterator.OfLong#nextLong():::Returns the next long element in the iteration.
PrimitiveIterator.OfLong#forEachRemaining(LongConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PrimitiveIterator.OfDouble#nextDouble():::Returns the next double element in the iteration.
PrimitiveIterator.OfDouble#forEachRemaining(DoubleConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PriorityQueue#add(E):::Inserts the specified element into this priority queue.
PriorityQueue#offer(E):::Inserts the specified element into this priority queue.
PriorityQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
PriorityQueue#removeEq(Object):::Identity-based version for use in Itr.remove.
PriorityQueue#contains(Object):::Returns true if this queue contains the specified element
PriorityQueue#toArray():::Returns an array containing all of the elements in this queue
PriorityQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
PriorityQueue#iterator():::Returns an iterator over the elements in this queue
PriorityQueue#clear():::Removes all of the elements from this priority queue
PriorityQueue#removeAt(int):::Removes the ith element from queue
PriorityQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the Comparable natural ordering of its elements.
PriorityQueue#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this queue
Properties#setProperty(String, String):::Calls the Hashtable method put
Properties#load(Reader):::Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format
Properties#load(InputStream):::Reads a property list (key and element pairs) from the input byte stream
Properties#save(OutputStream, String):::Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.
Properties#store(Writer, String):::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method
Properties#store(OutputStream, String):::Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the #load(InputStream) load(InputStream) method
Properties#loadFromXML(InputStream):::Loads all of the properties represented by the XML document on the specified input stream into this properties table
Properties#storeToXML(OutputStream, String):::Emits an XML document representing all of the properties contained in this table
Properties#storeToXML(OutputStream, String, String):::Emits an XML document representing all of the properties contained in this table, using the specified encoding
Properties#storeToXML(OutputStream, String, Charset):::Emits an XML document representing all of the properties contained in this table, using the specified encoding
Properties#getProperty(String):::Searches for the property with the specified key in this property list
Properties#getProperty(String, String):::Searches for the property with the specified key in this property list
Properties#propertyNames():::Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.
Properties#stringPropertyNames():::Returns an unmodifiable set of keys from this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Properties#list(PrintStream):::Prints this property list out to the specified output stream
PropertyPermission#implies(Permission):::Checks if this PropertyPermission object "implies" the specified permission
PropertyPermission#equals(Object):::Checks two PropertyPermission objects for equality
PropertyPermission#hashCode():::Returns the hash code value for this object
PropertyPermission#getActions(int):::Return the canonical string representation of the actions
PropertyPermission#getActions():::Returns the "canonical string representation" of the actions
PropertyPermission#getMask():::Return the current action mask
PropertyPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing PropertyPermission objects.
PropertyPermissionCollection#add(Permission):::Adds a permission to the PropertyPermissions
PropertyPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
PropertyPermissionCollection#elements():::Returns an enumeration of all the PropertyPermission objects in the container.
PropertyResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
PropertyResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.
Queue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
Queue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
Queue#remove():::Retrieves and removes the head of this queue
Queue#poll():::Retrieves and removes the head of this queue, or returns null if this queue is empty.
Queue#element():::Retrieves, but does not remove, the head of this queue
Queue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
Random#setSeed(long):::Sets the seed of this random number generator using a single long seed
Random#next(int):::Generates the next pseudorandom number
Random#nextBytes(byte[]):::Generates random bytes and places them into a user-supplied byte array
Random#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
Random#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
Random#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
Random#nextInt():::Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence
Random#nextInt(int):::Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence
Random#nextLong():::Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence
Random#nextBoolean():::Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence
Random#nextFloat():::Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence
Random#nextDouble():::Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence
Random#nextGaussian():::Returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence
Random#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values
Random#ints():::Returns an effectively unlimited stream of pseudorandom int values
Random#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values
Random#longs():::Returns an effectively unlimited stream of pseudorandom long values
Random#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)
Random#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)
Random#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)
Random#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
RegularEnumSet#iterator():::Returns an iterator over the elements contained in this set
RegularEnumSet#size():::Returns the number of elements in this set.
RegularEnumSet#isEmpty():::Returns true if this set contains no elements.
RegularEnumSet#contains(Object):::Returns true if this set contains the specified element.
RegularEnumSet#add(E):::Adds the specified element to this set if it is not already present.
RegularEnumSet#remove(Object):::Removes the specified element from this set if it is present.
RegularEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.
RegularEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
RegularEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.
RegularEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.
RegularEnumSet#clear():::Removes all of the elements from this set.
RegularEnumSet#equals(Object):::Compares the specified object with this set for equality
ResourceBundle#getBaseBundleName():::Returns the base name of this bundle, if known, or null if unknown
ResourceBundle#getString(String):::Gets a string for the given key from this resource bundle or one of its parents
ResourceBundle#getStringArray(String):::Gets a string array for the given key from this resource bundle or one of its parents
ResourceBundle#getObject(String):::Gets an object for the given key from this resource bundle or one of its parents
ResourceBundle#getLocale():::Returns the locale of this resource bundle
ResourceBundle#setParent(ResourceBundle):::Sets the parent bundle of this bundle
ResourceBundle#getBundle(String):::Gets a resource bundle using the specified base name, the default locale, and the caller module
ResourceBundle#getBundle(String, Control):::Returns a resource bundle using the specified base name, the default locale and the specified control
ResourceBundle#getBundle(String, Locale):::Gets a resource bundle using the specified base name and locale, and the caller module
ResourceBundle#getBundle(String, Module):::Gets a resource bundle using the specified base name and the default locale on behalf of the specified module
ResourceBundle#getBundle(String, Locale, Module):::Gets a resource bundle using the specified base name and locale on behalf of the specified module
ResourceBundle#getBundle(String, Locale, Control):::Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader
ResourceBundle#getBundle(String, Locale, ClassLoader):::Gets a resource bundle using the specified base name, locale, and class loader
ResourceBundle#getBundle(String, Locale, ClassLoader, Control):::Returns a resource bundle using the specified base name, target locale, class loader and control
ResourceBundle#clearCache():::Removes all resource bundles from the cache that have been loaded by the caller's module.
ResourceBundle#clearCache(ClassLoader):::Removes all resource bundles from the cache that have been loaded by the given class loader.
ResourceBundle#handleGetObject(String):::Gets an object for the given key from this resource bundle
ResourceBundle#getKeys():::Returns an enumeration of the keys.
ResourceBundle#containsKey(String):::Determines whether the given key is contained in this ResourceBundle or its parent bundles.
ResourceBundle#keySet():::Returns a Set of all keys contained in this ResourceBundle and its parent bundles.
ResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle
ResourceBundle.Control#getControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats
ResourceBundle.Control#getNoFallbackControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats and the Control#getFallbackLocale(String, Locale) getFallbackLocale method returns null
ResourceBundle.Control#getFormats(String):::Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
ResourceBundle.Control#getCandidateLocales(String, Locale):::Returns a List of Locales as candidate locales for baseName and locale
ResourceBundle.Control#getFallbackLocale(String, Locale):::Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method
ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean):::Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary
ResourceBundle.Control#getTimeToLive(String, Locale):::Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control
ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long):::Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
ResourceBundle.Control#toBundleName(String, Locale):::Converts the given baseName and locale to the bundle name
ResourceBundle.Control#toResourceName(String, String):::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix
Scanner#close():::Closes this scanner
Scanner#ioException():::Returns the IOException last thrown by this Scanner's underlying Readable
Scanner#delimiter():::Returns the Pattern this Scanner is currently using to match delimiters.
Scanner#useDelimiter(Pattern):::Sets this scanner's delimiting pattern to the specified pattern.
Scanner#useDelimiter(String):::Sets this scanner's delimiting pattern to a pattern constructed from the specified String
Scanner#locale():::Returns this scanner's locale
Scanner#useLocale(Locale):::Sets this scanner's locale to the specified locale
Scanner#radix():::Returns this scanner's default radix
Scanner#useRadix(int):::Sets this scanner's default radix to the specified radix
Scanner#match():::Returns the match result of the last scanning operation performed by this scanner
Scanner#toString():::Returns the string representation of this Scanner
Scanner#hasNext():::Returns true if this scanner has another token in its input
Scanner#next():::Finds and returns the next complete token from this scanner
Scanner#remove():::The remove operation is not supported by this implementation of Iterator.
Scanner#hasNext(String):::Returns true if the next token matches the pattern constructed from the specified string
Scanner#next(String):::Returns the next token if it matches the pattern constructed from the specified string
Scanner#hasNext(Pattern):::Returns true if the next complete token matches the specified pattern
Scanner#next(Pattern):::Returns the next token if it matches the specified pattern
Scanner#hasNextLine():::Returns true if there is another line in the input of this scanner
Scanner#nextLine():::Advances this scanner past the current line and returns the input that was skipped
Scanner#findInLine(String):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Scanner#findInLine(Pattern):::Attempts to find the next occurrence of the specified pattern ignoring delimiters
Scanner#findWithinHorizon(String, int):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Scanner#findWithinHorizon(Pattern, int):::Attempts to find the next occurrence of the specified pattern
Scanner#skip(Pattern):::Skips input that matches the specified pattern, ignoring delimiters
Scanner#skip(String):::Skips input that matches a pattern constructed from the specified string
Scanner#hasNextBoolean():::Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false"
Scanner#nextBoolean():::Scans the next token of the input into a boolean value and returns that value
Scanner#hasNextByte():::Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method
Scanner#hasNextByte(int):::Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method
Scanner#nextByte():::Scans the next token of the input as a byte
Scanner#nextByte(int):::Scans the next token of the input as a byte
Scanner#hasNextShort():::Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method
Scanner#hasNextShort(int):::Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method
Scanner#nextShort():::Scans the next token of the input as a short
Scanner#nextShort(int):::Scans the next token of the input as a short
Scanner#hasNextInt():::Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method
Scanner#hasNextInt(int):::Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method
Scanner#nextInt():::Scans the next token of the input as an int
Scanner#nextInt(int):::Scans the next token of the input as an int
Scanner#hasNextLong():::Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method
Scanner#hasNextLong(int):::Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method
Scanner#nextLong():::Scans the next token of the input as a long
Scanner#nextLong(int):::Scans the next token of the input as a long
Scanner#hasNextFloat():::Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method
Scanner#nextFloat():::Scans the next token of the input as a float
Scanner#hasNextDouble():::Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method
Scanner#nextDouble():::Scans the next token of the input as a double
Scanner#hasNextBigInteger():::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method
Scanner#hasNextBigInteger(int):::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method
Scanner#nextBigInteger():::Scans the next token of the input as a java.math.BigInteger BigInteger
Scanner#nextBigInteger(int):::Scans the next token of the input as a java.math.BigInteger BigInteger
Scanner#hasNextBigDecimal():::Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method
Scanner#nextBigDecimal():::Scans the next token of the input as a java.math.BigDecimal BigDecimal
Scanner#reset():::Resets this scanner
Scanner#tokens():::Returns a stream of delimiter-separated tokens from this scanner
Scanner#findAll(Pattern):::Returns a stream of match results from this scanner
Scanner#findAll(String):::Returns a stream of match results that match the provided pattern string
ServiceLoader.Provider#type():::Returns the provider type
ServiceLoader.Provider#get():::Returns an instance of the provider.
ServiceLoader#iterator():::Returns an iterator to lazily load and instantiate the available providers of this loader's service
ServiceLoader#stream():::Returns a stream to lazily load available providers of this loader's service
ServiceLoader#load(Class, ClassLoader, Module):::Creates a new service loader for the given service type, class loader, and caller.
ServiceLoader#load(Class, ClassLoader):::Creates a new service loader for the given service
ServiceLoader#load(Class):::Creates a new service loader for the given service type, using the current thread's java.lang.Thread#getContextClassLoader context class loader
ServiceLoader#loadInstalled(Class):::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader
ServiceLoader#load(ModuleLayer, Class):::Creates a new service loader for the given service type to load service providers from modules in the given module layer and its ancestors
ServiceLoader#findFirst():::Load the first available service provider of this loader's service
ServiceLoader#reload():::Clear this loader's provider cache so that all providers will be reloaded
ServiceLoader#toString():::Returns a string describing this service.
Set#size():::Returns the number of elements in this set (its cardinality)
Set#isEmpty():::Returns true if this set contains no elements.
Set#contains(Object):::Returns true if this set contains the specified element
Set#iterator():::Returns an iterator over the elements in this set
Set#toArray():::Returns an array containing all of the elements in this set
Set#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
Set#add(E):::Adds the specified element to this set if it is not already present (optional operation)
Set#remove(Object):::Removes the specified element from this set if it is present (optional operation)
Set#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection
Set#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present (optional operation)
Set#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection (optional operation)
Set#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation)
Set#clear():::Removes all of the elements from this set (optional operation)
Set#equals(Object):::Compares the specified object with this set for equality
Set#hashCode():::Returns the hash code value for this set
Set#spliterator():::Creates a Spliterator over the elements in this set
Set#of():::Returns an unmodifiable set containing zero elements
Set#of(E):::Returns an unmodifiable set containing one element
Set#of(E, E):::Returns an unmodifiable set containing two elements
Set#of(E, E, E):::Returns an unmodifiable set containing three elements
Set#of(E, E, E, E):::Returns an unmodifiable set containing four elements
Set#of(E, E, E, E, E):::Returns an unmodifiable set containing five elements
Set#of(E, E, E, E, E, E):::Returns an unmodifiable set containing six elements
Set#of(E, E, E, E, E, E, E):::Returns an unmodifiable set containing seven elements
Set#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing eight elements
Set#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing nine elements
Set#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing ten elements
Set#of(E...):::Returns an unmodifiable set containing an arbitrary number of elements
Set#copyOf(Collection):::Returns an unmodifiable Set containing the elements of the given Collection
SimpleTimeZone#setStartYear(int):::Sets the daylight saving time starting year.
SimpleTimeZone#setStartRule(int, int, int, int):::Sets the daylight saving time start rule
SimpleTimeZone#setStartRule(int, int, int):::Sets the daylight saving time start rule to a fixed date within a month
SimpleTimeZone#setStartRule(int, int, int, int, boolean):::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
SimpleTimeZone#setEndRule(int, int, int, int):::Sets the daylight saving time end rule
SimpleTimeZone#setEndRule(int, int, int):::Sets the daylight saving time end rule to a fixed date within a month
SimpleTimeZone#setEndRule(int, int, int, int, boolean):::Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
SimpleTimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the given time
SimpleTimeZone#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time
SimpleTimeZone#getRawOffset():::Gets the GMT offset for this time zone.
SimpleTimeZone#setRawOffset(int):::Sets the base time zone offset to GMT
SimpleTimeZone#setDSTSavings(int):::Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone#useDaylightTime():::Queries if this time zone uses daylight saving time.
SimpleTimeZone#observesDaylightTime():::Returns true if this SimpleTimeZone observes Daylight Saving Time
SimpleTimeZone#inDaylightTime(Date):::Queries if the given date is in daylight saving time.
SimpleTimeZone#clone():::Returns a clone of this SimpleTimeZone instance.
SimpleTimeZone#hashCode():::Generates the hash code for the SimpleDateFormat object.
SimpleTimeZone#equals(Object):::Compares the equality of two SimpleTimeZone objects.
SimpleTimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rules and offset as another zone.
SimpleTimeZone#toString():::Returns a string representation of this time zone.
SortedMap#comparator():::Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.
SortedMap#subMap(K, K):::Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive
SortedMap#headMap(K):::Returns a view of the portion of this map whose keys are strictly less than toKey
SortedMap#tailMap(K):::Returns a view of the portion of this map whose keys are greater than or equal to fromKey
SortedMap#firstKey():::Returns the first (lowest) key currently in this map.
SortedMap#lastKey():::Returns the last (highest) key currently in this map.
SortedMap#keySet():::Returns a Set view of the keys contained in this map
SortedMap#values():::Returns a Collection view of the values contained in this map
SortedMap#entrySet():::Returns a Set view of the mappings contained in this map
SortedSet#comparator():::Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.
SortedSet#subSet(E, E):::Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive
SortedSet#headSet(E):::Returns a view of the portion of this set whose elements are strictly less than toElement
SortedSet#tailSet(E):::Returns a view of the portion of this set whose elements are greater than or equal to fromElement
SortedSet#first():::Returns the first (lowest) element currently in this set.
SortedSet#last():::Returns the last (highest) element currently in this set.
SortedSet#spliterator():::Creates a Spliterator over the elements in this sorted set
Spliterator#tryAdvance(Consumer):::If a remaining element exists, performs the given action on it, returning true; else returns false
Spliterator#forEachRemaining(Consumer):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterator#trySplit():::If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator
Spliterator#estimateSize():::Returns an estimate of the number of elements that would be encountered by a #forEachRemaining traversal, or returns Long#MAX_VALUE if infinite, unknown, or too expensive to compute
Spliterator#getExactSizeIfKnown():::Convenience method that returns #estimateSize() if this Spliterator is #SIZED, else -1.
Spliterator#characteristics():::Returns a set of characteristics of this Spliterator and its elements
Spliterator#hasCharacteristics(int):::Returns true if this Spliterator's #characteristics contain all of the given characteristics.
Spliterator#getComparator():::If this Spliterator's source is #SORTED by a Comparator, returns that Comparator
Spliterator.OfPrimitive#tryAdvance(T_CONS):::If a remaining element exists, performs the given action on it, returning true; else returns false
Spliterator.OfPrimitive#forEachRemaining(T_CONS):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterators#emptySpliterator():::Creates an empty Spliterator  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyIntSpliterator():::Creates an empty Spliterator.OfInt  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyLongSpliterator():::Creates an empty Spliterator.OfLong  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyDoubleSpliterator():::Creates an empty Spliterator.OfDouble  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#spliterator(Object[], int):::Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(Object[], int, int, int):::Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(int[], int):::Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(int[], int, int, int):::Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(long[], int):::Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(long[], int, int, int):::Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(double[], int):::Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(double[], int, int, int):::Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(Collection, int):::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size
Spliterators#spliterator(Iterator, long, int):::Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(Iterator, int):::Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfInt, long, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfInt, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfLong, long, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfLong, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfDouble, long, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfDouble, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate
Spliterators#iterator(Spliterator):::Creates an Iterator from a Spliterator
Spliterators#iterator(Spliterator.OfInt):::Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt
Spliterators#iterator(Spliterator.OfLong):::Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong
Spliterators#iterator(Spliterator.OfDouble):::Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble
Spliterators.AbstractSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractIntSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractLongSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractDoubleSpliterator#trySplit():::  This implementation permits limited parallelism.
SplittableRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
SplittableRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
SplittableRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
SplittableRandom#split():::Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance
SplittableRandom#nextBytes(byte[]):::Fills a user-supplied byte array with generated pseudorandom bytes.
SplittableRandom#nextInt():::Returns a pseudorandom int value.
SplittableRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom#nextLong():::Returns a pseudorandom long value.
SplittableRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
SplittableRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
SplittableRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
SplittableRandom#nextBoolean():::Returns a pseudorandom boolean value.
SplittableRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.
SplittableRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.
SplittableRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.
SplittableRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.
SplittableRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
Stack#push(E):::Pushes an item onto the top of this stack
Stack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.
Stack#peek():::Looks at the object at the top of this stack without removing it from the stack.
Stack#empty():::Tests if this stack is empty.
Stack#search(Object):::Returns the 1-based position where an object is on this stack
StringJoiner#setEmptyValue(CharSequence):::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty
StringJoiner#toString():::Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.
StringJoiner#add(CharSequence):::Adds a copy of the given CharSequence value as the next element of the StringJoiner value
StringJoiner#merge(StringJoiner):::Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty
StringJoiner#length():::Returns the length of the String representation of this StringJoiner
StringTokenizer#hasMoreTokens():::Tests if there are more tokens available from this tokenizer's string
StringTokenizer#nextToken():::Returns the next token from this string tokenizer.
StringTokenizer#nextToken(String):::Returns the next token in this string tokenizer's string
StringTokenizer#hasMoreElements():::Returns the same value as the hasMoreTokens method
StringTokenizer#nextElement():::Returns the same value as the nextToken method, except that its declared return value is Object rather than String
StringTokenizer#countTokens():::Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception
Timer#schedule(TimerTask, long):::Schedules the specified task for execution after the specified delay.
Timer#schedule(TimerTask, Date):::Schedules the specified task for execution at the specified time
Timer#schedule(TimerTask, long, long):::Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay
Timer#schedule(TimerTask, Date, long):::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time
Timer#scheduleAtFixedRate(TimerTask, long, long):::Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay
Timer#scheduleAtFixedRate(TimerTask, Date, long):::Schedules the specified task for repeated fixed-rate execution, beginning at the specified time
Timer#cancel():::Terminates this timer, discarding any currently scheduled tasks
Timer#purge():::Removes all cancelled tasks from this timer's task queue
TaskQueue#size():::Returns the number of tasks currently on the queue.
TaskQueue#add(TimerTask):::Adds a new task to the priority queue.
TaskQueue#getMin():::Return the "head task" of the priority queue
TaskQueue#get(int):::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.
TaskQueue#removeMin():::Remove the head task from the priority queue.
TaskQueue#quickRemove(int):::Removes the ith element from queue without regard for maintaining the heap invariant
TaskQueue#rescheduleMin(long):::Sets the nextExecutionTime associated with the head task to the specified value, and adjusts priority queue accordingly.
TaskQueue#isEmpty():::Returns true if the priority queue contains no elements.
TaskQueue#clear():::Removes all elements from the priority queue.
TaskQueue#heapify():::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.
TimerTask#run():::The action to be performed by this timer task.
TimerTask#cancel():::Cancels this timer task
TimerTask#scheduledExecutionTime():::Returns the scheduled execution time of the most recent actual execution of this task
TimeZone#getOffset(int, int, int, int, int, int):::Gets the time zone offset, for current date, modified in case of daylight savings
TimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the specified date
TimeZone#getOffsets(long, int[]):::Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time.
TimeZone#setRawOffset(int):::Sets the base time zone offset to GMT
TimeZone#getRawOffset():::Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone
TimeZone#getID():::Gets the ID of this time zone.
TimeZone#setID(String):::Sets the time zone ID
TimeZone#getDisplayName():::Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale
TimeZone#getDisplayName(Locale):::Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale
TimeZone#getDisplayName(boolean, int):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale
TimeZone#getDisplayName(boolean, int, Locale):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale
TimeZone#getDSTSavings():::Returns the amount of time to be added to local standard time to get local wall clock time
TimeZone#useDaylightTime():::Queries if this TimeZone uses Daylight Saving Time
TimeZone#observesDaylightTime():::Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time
TimeZone#inDaylightTime(Date):::Queries if the given date is in Daylight Saving Time in this time zone.
TimeZone#getTimeZone(String):::Gets the TimeZone for the given ID.
TimeZone#getTimeZone(ZoneId):::Gets the TimeZone for the given zoneId.
TimeZone#toZoneId():::Converts this TimeZone object to a ZoneId.
TimeZone#getAvailableIDs(int):::Gets the available IDs according to the given time zone offset in milliseconds.
TimeZone#getAvailableIDs():::Gets all the available IDs supported.
TimeZone#getDefault():::Gets the default TimeZone of the Java virtual machine
TimeZone#getDefaultRef():::Returns the reference to the default TimeZone object
TimeZone#setDefault(TimeZone):::Sets the TimeZone that is returned by the getDefault method
TimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rule and offset as another zone
TimeZone#clone():::Creates a copy of this TimeZone.
TimSort#sort(T[], int, int, Comparator, T[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
TreeMap#size():::Returns the number of key-value mappings in this map.
TreeMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
TreeMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
TreeMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
TreeMap#putAll(Map):::Copies all of the mappings from the specified map to this map
TreeMap#getEntry(Object):::Returns this map's entry for the given key, or null if the map does not contain an entry for the key.
TreeMap#getEntryUsingComparator(Object):::Version of getEntry using comparator
TreeMap#getCeilingEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists (i.e., the greatest key in the Tree is less than the specified key), returns null.
TreeMap#getFloorEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the greatest key less than the specified key; if no such entry exists, returns null.
TreeMap#getHigherEntry(K):::Gets the entry for the least key greater than the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists returns null.
TreeMap#getLowerEntry(K):::Returns the entry for the greatest key less than the specified key; if no such entry exists (i.e., the least key in the Tree is greater than the specified key), returns null.
TreeMap#put(K, V):::Associates the specified value with the specified key in this map
TreeMap#remove(Object):::Removes the mapping for this key from this TreeMap if present.
TreeMap#clear():::Removes all of the mappings from this map
TreeMap#clone():::Returns a shallow copy of this TreeMap instance
TreeMap#keySet():::Returns a Set view of the keys contained in this map
TreeMap#values():::Returns a Collection view of the values contained in this map
TreeMap#entrySet():::Returns a Set view of the mappings contained in this map
TreeMap#compare(Object, Object):::Compares two keys using the correct comparison method for this TreeMap.
TreeMap#valEquals(Object, Object):::Test two values for equality
TreeMap#exportEntry(TreeMap.Entry):::Return SimpleImmutableEntry for entry, or null if null
TreeMap#keyOrNull(TreeMap.Entry):::Return key for entry, or null if null
TreeMap#key(Entry):::Returns the key corresponding to the specified Entry.
TreeMap.NavigableSubMap#absHighFence():::Returns the absolute high fence for ascending traversal
TreeMap.NavigableSubMap#absLowFence():::Return the absolute low fence for descending traversal
TreeMap.NavigableSubMap#keyIterator():::Returns ascending iterator from the perspective of this submap
TreeMap.NavigableSubMap#descendingKeyIterator():::Returns descending iterator from the perspective of this submap
TreeMap.Entry#getKey():::Returns the key.
TreeMap.Entry#getValue():::Returns the value associated with the key.
TreeMap.Entry#setValue(V):::Replaces the value currently associated with the key with the given value.
TreeMap#getFirstEntry():::Returns the first Entry in the TreeMap (according to the TreeMap's key-sort function)
TreeMap#getLastEntry():::Returns the last Entry in the TreeMap (according to the TreeMap's key-sort function)
TreeMap#successor(Entry):::Returns the successor of the specified Entry, or null if no such.
TreeMap#predecessor(Entry):::Returns the predecessor of the specified Entry, or null if no such.
TreeMap#readTreeSet(int, java.io.ObjectInputStream, V):::Intended to be called only from TreeSet.readObject
TreeMap#addAllForTreeSet(SortedSet, V):::Intended to be called only from TreeSet.addAll
TreeMap#keySpliteratorFor(NavigableMap):::Currently, we support Spliterator-based versions only for the full map, in either plain of descending form, otherwise relying on defaults because size estimation for submaps would dominate costs
TreeSet#iterator():::Returns an iterator over the elements in this set in ascending order.
TreeSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.
TreeSet#size():::Returns the number of elements in this set (its cardinality).
TreeSet#isEmpty():::Returns true if this set contains no elements.
TreeSet#contains(Object):::Returns true if this set contains the specified element
TreeSet#add(E):::Adds the specified element to this set if it is not already present
TreeSet#remove(Object):::Removes the specified element from this set if it is present
TreeSet#clear():::Removes all of the elements from this set
TreeSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
TreeSet#clone():::Returns a shallow copy of this TreeSet instance
TreeSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
UnknownFormatConversionException#getConversion():::Returns the unknown conversion.
UnknownFormatFlagsException#getFlags():::Returns the set of flags which contains an unknown flag.
UUID#randomUUID():::Static factory to retrieve a type 4 (pseudo randomly generated) UUID
UUID#nameUUIDFromBytes(byte[]):::Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.
UUID#fromString(String):::Creates a UUID from the string standard representation as described in the #toString method.
UUID#getLeastSignificantBits():::Returns the least significant 64 bits of this UUID's 128 bit value.
UUID#getMostSignificantBits():::Returns the most significant 64 bits of this UUID's 128 bit value.
UUID#version():::The version number associated with this UUID
UUID#variant():::The variant number associated with this UUID
UUID#timestamp():::The timestamp value associated with this UUID
UUID#clockSequence():::The clock sequence value associated with this UUID
UUID#node():::The node value associated with this UUID
UUID#toString():::Returns a String object representing this UUID
UUID#hashCode():::Returns a hash code for this UUID.
UUID#equals(Object):::Compares this object to the specified object
UUID#compareTo(UUID):::Compares this UUID with the specified UUID
Vector#copyInto(Object[]):::Copies the components of this vector into the specified array
Vector#trimToSize():::Trims the capacity of this vector to be the vector's current size
Vector#ensureCapacity(int):::Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument
Vector#setSize(int):::Sets the size of this vector
Vector#capacity():::Returns the current capacity of this vector.
Vector#size():::Returns the number of components in this vector.
Vector#isEmpty():::Tests if this vector has no components.
Vector#elements():::Returns an enumeration of the components of this vector
Vector#contains(Object):::Returns true if this vector contains the specified element
Vector#indexOf(Object):::Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Vector#indexOf(Object, int):::Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found
Vector#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Vector#lastIndexOf(Object, int):::Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found
Vector#elementAt(int):::Returns the component at the specified index
Vector#firstElement():::Returns the first component (the item at index 0) of this vector.
Vector#lastElement():::Returns the last component of the vector.
Vector#setElementAt(E, int):::Sets the component at the specified index of this vector to be the specified object
Vector#removeElementAt(int):::Deletes the component at the specified index
Vector#insertElementAt(E, int):::Inserts the specified object as a component in this vector at the specified index
Vector#addElement(E):::Adds the specified component to the end of this vector, increasing its size by one
Vector#removeElement(Object):::Removes the first (lowest-indexed) occurrence of the argument from this vector
Vector#removeAllElements():::Removes all components from this vector and sets its size to zero
Vector#clone():::Returns a clone of this vector
Vector#toArray():::Returns an array containing all of the elements in this Vector in the correct order.
Vector#toArray(T[]):::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array
Vector#get(int):::Returns the element at the specified position in this Vector.
Vector#set(int, E):::Replaces the element at the specified position in this Vector with the specified element.
Vector#add(E):::Appends the specified element to the end of this Vector.
Vector#remove(Object):::Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged
Vector#add(int, E):::Inserts the specified element at the specified position in this Vector
Vector#remove(int):::Removes the element at the specified position in this Vector
Vector#clear():::Removes all of the elements from this Vector
Vector#containsAll(Collection):::Returns true if this Vector contains all of the elements in the specified Collection.
Vector#addAll(Collection):::Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator
Vector#removeAll(Collection):::Removes from this Vector all of its elements that are contained in the specified Collection.
Vector#retainAll(Collection):::Retains only the elements in this Vector that are contained in the specified Collection
Vector#addAll(int, Collection):::Inserts all of the elements in the specified Collection into this Vector at the specified position
Vector#equals(Object):::Compares the specified Object with this Vector for equality
Vector#hashCode():::Returns the hash code value for this Vector.
Vector#toString():::Returns a string representation of this Vector, containing the String representation of each element.
Vector#subList(int, int):::Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive
Vector#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
Vector#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Vector#listIterator():::Returns a list iterator over the elements in this list (in proper sequence)
Vector#iterator():::Returns an iterator over the elements in this list in proper sequence
Vector#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
WeakHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.
WeakHashMap#hash(Object):::Retrieve object hash code and applies a supplemental hash function to the result hash, which defends against poor quality hash functions
WeakHashMap#size():::Returns the number of key-value mappings in this map
WeakHashMap#isEmpty():::Returns true if this map contains no key-value mappings
WeakHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
WeakHashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
WeakHashMap#getEntry(Object):::Returns the entry associated with the specified key in this map
WeakHashMap#put(K, V):::Associates the specified value with the specified key in this map
WeakHashMap#resize(int):::Rehashes the contents of this map into a new array with a larger capacity
WeakHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
WeakHashMap#remove(Object):::Removes the mapping for a key from this weak hash map if it is present
WeakHashMap#removeMapping(Object):::Special version of remove needed by Entry set
WeakHashMap#clear():::Removes all of the mappings from this map
WeakHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
WeakHashMap#keySet():::Returns a Set view of the keys contained in this map
WeakHashMap#values():::Returns a Collection view of the values contained in this map
WeakHashMap#entrySet():::Returns a Set view of the mappings contained in this map
BiConsumer#accept(T, U):::Performs this operation on the given arguments.
BiConsumer#andThen(BiConsumer):::Returns a composed BiConsumer that performs, in sequence, this operation followed by the after operation
BiFunction#apply(T, U):::Applies this function to the given arguments.
BiFunction#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
BinaryOperator#minBy(Comparator):::Returns a BinaryOperator which returns the lesser of two elements according to the specified Comparator.
BinaryOperator#maxBy(Comparator):::Returns a BinaryOperator which returns the greater of two elements according to the specified Comparator.
BiPredicate#test(T, U):::Evaluates this predicate on the given arguments.
BiPredicate#and(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
BiPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
BiPredicate#or(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
BooleanSupplier#getAsBoolean():::Gets a result.
Consumer#accept(T):::Performs this operation on the given argument.
Consumer#andThen(Consumer):::Returns a composed Consumer that performs, in sequence, this operation followed by the after operation
DoubleBinaryOperator#applyAsDouble(double, double):::Applies this operator to the given operands.
DoubleConsumer#accept(double):::Performs this operation on the given argument.
DoubleConsumer#andThen(DoubleConsumer):::Returns a composed DoubleConsumer that performs, in sequence, this operation followed by the after operation
DoubleFunction#apply(double):::Applies this function to the given argument.
DoublePredicate#test(double):::Evaluates this predicate on the given argument.
DoublePredicate#and(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
DoublePredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
DoublePredicate#or(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
DoubleSupplier#getAsDouble():::Gets a result.
DoubleToIntFunction#applyAsInt(double):::Applies this function to the given argument.
DoubleToLongFunction#applyAsLong(double):::Applies this function to the given argument.
DoubleUnaryOperator#applyAsDouble(double):::Applies this operator to the given operand.
DoubleUnaryOperator#compose(DoubleUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
DoubleUnaryOperator#andThen(DoubleUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
DoubleUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
Function#apply(T):::Applies this function to the given argument.
Function#compose(Function):::Returns a composed function that first applies the before function to its input, and then applies this function to the result
Function#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
Function#identity():::Returns a function that always returns its input argument.
IntBinaryOperator#applyAsInt(int, int):::Applies this operator to the given operands.
IntConsumer#accept(int):::Performs this operation on the given argument.
IntConsumer#andThen(IntConsumer):::Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation
IntFunction#apply(int):::Applies this function to the given argument.
IntPredicate#test(int):::Evaluates this predicate on the given argument.
IntPredicate#and(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
IntPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
IntPredicate#or(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
IntSupplier#getAsInt():::Gets a result.
IntToDoubleFunction#applyAsDouble(int):::Applies this function to the given argument.
IntToLongFunction#applyAsLong(int):::Applies this function to the given argument.
IntUnaryOperator#applyAsInt(int):::Applies this operator to the given operand.
IntUnaryOperator#compose(IntUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
IntUnaryOperator#andThen(IntUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
IntUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
LongBinaryOperator#applyAsLong(long, long):::Applies this operator to the given operands.
LongConsumer#accept(long):::Performs this operation on the given argument.
LongConsumer#andThen(LongConsumer):::Returns a composed LongConsumer that performs, in sequence, this operation followed by the after operation
LongFunction#apply(long):::Applies this function to the given argument.
LongPredicate#test(long):::Evaluates this predicate on the given argument.
LongPredicate#and(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
LongPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
LongPredicate#or(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
LongSupplier#getAsLong():::Gets a result.
LongToDoubleFunction#applyAsDouble(long):::Applies this function to the given argument.
LongToIntFunction#applyAsInt(long):::Applies this function to the given argument.
LongUnaryOperator#applyAsLong(long):::Applies this operator to the given operand.
LongUnaryOperator#compose(LongUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
LongUnaryOperator#andThen(LongUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
LongUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
ObjDoubleConsumer#accept(T, double):::Performs this operation on the given arguments.
ObjIntConsumer#accept(T, int):::Performs this operation on the given arguments.
ObjLongConsumer#accept(T, long):::Performs this operation on the given arguments.
Predicate#test(T):::Evaluates this predicate on the given argument.
Predicate#and(Predicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Predicate#negate():::Returns a predicate that represents the logical negation of this predicate.
Predicate#or(Predicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Predicate#isEqual(Object):::Returns a predicate that tests if two arguments are equal according to Objects#equals(Object, Object).
Predicate#not(Predicate):::Returns a predicate that is the negation of the supplied predicate
Supplier#get():::Gets a result.
ToDoubleBiFunction#applyAsDouble(T, U):::Applies this function to the given arguments.
ToDoubleFunction#applyAsDouble(T):::Applies this function to the given argument.
ToIntBiFunction#applyAsInt(T, U):::Applies this function to the given arguments.
ToIntFunction#applyAsInt(T):::Applies this function to the given argument.
ToLongBiFunction#applyAsLong(T, U):::Applies this function to the given arguments.
ToLongFunction#applyAsLong(T):::Applies this function to the given argument.
UnaryOperator#identity():::Returns a unary operator that always returns its input argument.
Attributes#get(Object):::Returns the value of the specified attribute name, or null if the attribute name was not found.
Attributes#getValue(String):::Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found
Attributes#getValue(Name):::Returns the value of the specified Attributes.Name, or null if the attribute was not found
Attributes#put(Object, Object):::Associates the specified value with the specified attribute name (key) in this Map
Attributes#putValue(String, String):::Associates the specified value with the specified attribute name, specified as a String
Attributes#remove(Object):::Removes the attribute with the specified name (key) from this Map
Attributes#containsValue(Object):::Returns true if this Map maps one or more attribute names (keys) to the specified value.
Attributes#containsKey(Object):::Returns true if this Map contains the specified attribute name (key).
Attributes#putAll(Map):::Copies all of the attribute name-value mappings from the specified Attributes to this Map
Attributes#clear():::Removes all attributes from this Map.
Attributes#size():::Returns the number of attributes in this Map.
Attributes#isEmpty():::Returns true if this Map contains no attributes.
Attributes#keySet():::Returns a Set view of the attribute names (keys) contained in this Map.
Attributes#values():::Returns a Collection view of the attribute values contained in this Map.
Attributes#entrySet():::Returns a Collection view of the attribute name-value mappings contained in this Map.
Attributes#equals(Object):::Compares the specified Attributes object with this Map for equality
Attributes#hashCode():::Returns the hash code value for this Map.
Attributes#clone():::Returns a copy of the Attributes, implemented as follows:      public Object clone() { return new Attributes(this); }  Since the attribute names and values are themselves immutable, the Attributes returned can be safely modified without affecting the original.
Attributes.Name#equals(Object):::Compares this attribute name to another for equality.
Attributes.Name#hashCode():::Computes the hash value for this attribute name.
Attributes.Name#toString():::Returns the attribute name as a String.
JarEntry#getAttributes():::Returns the Manifest Attributes for this entry, or null if none.
JarEntry#getCertificates():::Returns the Certificate objects for this entry, or null if none
JarEntry#getCodeSigners():::Returns the CodeSigner objects for this entry, or null if none
JarEntry#getRealName():::Returns the real name of this JarEntry
JarFile#baseVersion():::Returns the version that represents the unversioned configuration of a multi-release jar file.
JarFile#runtimeVersion():::Returns the version that represents the effective runtime versioned configuration of a multi-release jar file
JarFile#getVersion():::Returns the maximum version used when searching for versioned entries
JarFile#isMultiRelease():::Indicates whether or not this jar file is a multi-release jar file.
JarFile#getManifest():::Returns the jar file manifest, or null if none.
JarFile#getJarEntry(String):::Returns the JarEntry for the given base entry name or null if not found
JarFile#getEntry(String):::Returns the ZipEntry for the given base entry name or null if not found
JarFile#entries():::Returns an enumeration of the jar file entries.
JarFile#stream():::Returns an ordered Stream over the jar file entries
JarFile#versionedStream():::Returns a Stream of the versioned jar file entries
JarFile#getInputStream(ZipEntry):::Returns an input stream for reading the contents of the specified zip file entry.
JarFile#hasClassPathAttribute():::Returns true iff this JAR file has a manifest with the Class-Path attribute
JarFile#entries2():::Returns an enumeration of the zip file entries excluding internal JAR mechanism entries and including signed entries missing from the ZIP directory.
JarInputStream#getManifest():::Returns the Manifest for this JAR file, or null if none.
JarInputStream#getNextEntry():::Reads the next ZIP file entry and positions the stream at the beginning of the entry data
JarInputStream#getNextJarEntry():::Reads the next JAR file entry and positions the stream at the beginning of the entry data
JarInputStream#read(byte[], int, int):::Reads from the current JAR file entry into an array of bytes
JarInputStream#createZipEntry(String):::Creates a new JarEntry (ZipEntry) for the specified JAR file entry name
JarOutputStream#putNextEntry(ZipEntry):::Begins writing a new JAR file entry and positions the stream to the start of the entry data
JarVerifier#beginEntry(JarEntry, ManifestEntryVerifier):::This method scans to see which entry we're parsing and keeps various state information depending on what type of file is being parsed.
JarVerifier#getCerts(String):::Return an array of java.security.cert.Certificate objects for the given file in the jar.
JarVerifier#getCodeSigners(String):::return an array of CodeSigner objects for the given file in the jar
JarVerifier#nothingToVerify():::returns true if there no files to verify
JarVerifier#doneWithMeta():::called to let us know we have processed all the META-INF entries, and if we re-read one of them, don't re-process it
JarVerifier#isTrustedManifestEntry(String):::Returns whether the name is trusted
Manifest#getMainAttributes():::Returns the main Attributes for the Manifest.
Manifest#getEntries():::Returns a Map of the entries contained in this Manifest
Manifest#getAttributes(String):::Returns the Attributes for the specified entry name
Manifest#getTrustedAttributes(String):::Returns the Attributes for the specified entry name, if trusted.
Manifest#clear():::Clears the main Attributes as well as the entries in this Manifest.
Manifest#write(OutputStream):::Writes the Manifest to the specified OutputStream
Manifest#make72Safe(StringBuffer):::Adds line breaks to enforce a maximum 72 bytes per line.
Manifest#read(InputStream):::Reads the Manifest from the specified InputStream
Manifest#equals(Object):::Returns true if the specified Object is also a Manifest and has the same main Attributes and entries.
Manifest#hashCode():::Returns the hash code for this Manifest.
Manifest#clone():::Returns a shallow copy of this Manifest
Pack200#newPacker():::Obtain new instance of a class that implements Packer
Pack200.Packer#properties():::Get the set of this engine's properties
Pack200.Packer#pack(JarFile, OutputStream):::Takes a JarFile and converts it into a Pack200 archive
Pack200.Packer#pack(JarInputStream, OutputStream):::Takes a JarInputStream and converts it into a Pack200 archive
Pack200.Unpacker#properties():::Get the set of this engine's properties
Pack200.Unpacker#unpack(InputStream, JarOutputStream):::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream
Pack200.Unpacker#unpack(File, JarOutputStream):::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream
CharPredicates#forUnicodeScript(String):::Returns a predicate matching all characters belong to a named UnicodeScript.
CharPredicates#forUnicodeBlock(String):::Returns a predicate matching all characters in a UnicodeBlock.
CharPredicates#ASCII_DIGIT():::Posix ASCII variants, not in the lookup map
Grapheme#isBoundary(int, int):::Determines if there is an extended  grapheme cluster boundary between two continuing characters cp1 and cp2
Matcher#pattern():::Returns the pattern that is interpreted by this matcher.
Matcher#toMatchResult():::Returns the match state of this matcher as a MatchResult
Matcher#usePattern(Pattern):::Changes the Pattern that this Matcher uses to find matches with
Matcher#reset():::Resets this matcher
Matcher#reset(CharSequence):::Resets this matcher with a new input sequence
Matcher#start():::Returns the start index of the previous match.
Matcher#start(int):::Returns the start index of the subsequence captured by the given group during the previous match operation
Matcher#start(String):::Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation.
Matcher#end():::Returns the offset after the last character matched.
Matcher#end(int):::Returns the offset after the last character of the subsequence captured by the given group during the previous match operation
Matcher#end(String):::Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation.
Matcher#group():::Returns the input subsequence matched by the previous match
Matcher#group(int):::Returns the input subsequence captured by the given group during the previous match operation
Matcher#group(String):::Returns the input subsequence captured by the given named-capturing group during the previous match operation
Matcher#groupCount():::Returns the number of capturing groups in this matcher's pattern
Matcher#matches():::Attempts to match the entire region against the pattern
Matcher#find():::Attempts to find the next subsequence of the input sequence that matches the pattern
Matcher#find(int):::Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index
Matcher#lookingAt():::Attempts to match the input sequence, starting at the beginning of the region, against the pattern
Matcher#quoteReplacement(String):::Returns a literal replacement String for the specified String
Matcher#appendReplacement(StringBuffer, String):::Implements a non-terminal append-and-replace step
Matcher#appendReplacement(StringBuilder, String):::Implements a non-terminal append-and-replace step
Matcher#appendTail(StringBuffer):::Implements a terminal append-and-replace step
Matcher#appendTail(StringBuilder):::Implements a terminal append-and-replace step
Matcher#replaceAll(String):::Replaces every subsequence of the input sequence that matches the pattern with the given replacement string
Matcher#replaceAll(Function):::Replaces every subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence
Matcher#results():::Returns a stream of match results for each subsequence of the input sequence that matches the pattern
Matcher#replaceFirst(String):::Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string
Matcher#replaceFirst(Function):::Replaces the first subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence
Matcher#region(int, int):::Sets the limits of this matcher's region
Matcher#regionStart():::Reports the start index of this matcher's region
Matcher#regionEnd():::Reports the end index (exclusive) of this matcher's region
Matcher#hasTransparentBounds():::Queries the transparency of region bounds for this matcher
Matcher#useTransparentBounds(boolean):::Sets the transparency of region bounds for this matcher
Matcher#hasAnchoringBounds():::Queries the anchoring of region bounds for this matcher
Matcher#useAnchoringBounds(boolean):::Sets the anchoring of region bounds for this matcher
Matcher#toString():::Returns the string representation of this matcher
Matcher#hitEnd():::Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher
Matcher#requireEnd():::Returns true if more input could change a positive match into a negative one
Matcher#search(int):::Initiates a search to find a Pattern within the given bounds
Matcher#match(int, int):::Initiates a search for an anchored match to a Pattern within the given bounds
Matcher#getTextLength():::Returns the end index of the text.
Matcher#getSubSequence(int, int):::Generates a String from this matcher's input in the specified range.
Matcher#charAt(int):::Returns this matcher's input character at index i.
Matcher#getMatchedGroupIndex(String):::Returns the group index of the matched capturing group.
MatchResult#start():::Returns the start index of the match.
MatchResult#start(int):::Returns the start index of the subsequence captured by the given group during this match
MatchResult#end():::Returns the offset after the last character matched.
MatchResult#end(int):::Returns the offset after the last character of the subsequence captured by the given group during this match
MatchResult#group():::Returns the input subsequence matched by the previous match
MatchResult#group(int):::Returns the input subsequence captured by the given group during the previous match operation
MatchResult#groupCount():::Returns the number of capturing groups in this match result's pattern
Pattern#compile(String):::Compiles the given regular expression into a pattern.
Pattern#compile(String, int):::Compiles the given regular expression into a pattern with the given flags.
Pattern#pattern():::Returns the regular expression from which this pattern was compiled.
Pattern#toString():::Returns the string representation of this pattern
Pattern#matcher(CharSequence):::Creates a matcher that will match the given input against this pattern.
Pattern#flags():::Returns this pattern's match flags.
Pattern#matches(String, CharSequence):::Compiles the given regular expression and attempts to match the given input against it
Pattern#split(CharSequence, int):::Splits the given input sequence around matches of this pattern
Pattern#split(CharSequence):::Splits the given input sequence around matches of this pattern
Pattern#quote(String):::Returns a literal pattern String for the specified String
Pattern.Node#match(Matcher, int, CharSequence):::This method implements the classic accept node.
Pattern.Node#study(TreeInfo):::This method is good for all zero length assertions.
Pattern.LastNode#match(Matcher, int, CharSequence):::This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input.
Pattern.BnM#optimize(Node):::Pre calculates arrays needed to generate the bad character shift and the good suffix shift
Pattern#VertWS():::matches a Perl vertical whitespace
Pattern#HorizWS():::matches a Perl horizontal whitespace
Pattern#ALL()::: for the Unicode category ALL and the dot metacharacter when  in dotall mode.
Pattern#DOT():::for the dot metacharacter when dotall is not enabled.
Pattern#UNIXDOT()::: the dot metacharacter when dotall is not enabled but UNIX_LINES is enabled.
Pattern#SingleS(int):::Indicate that matches a Supplementary Unicode character
Pattern#Single(int):::A bmp/optimized predicate of single
Pattern#SingleI(int, int):::Case insensitive matches a given BMP character
Pattern#SingleU(int):::Unicode case insensitive matches a given Unicode character
Pattern#Range(int, int):::Charactrs within a explicit value range
Pattern#CIRange(int, int):::Charactrs within a explicit value range in a case insensitive manner.
Pattern#asPredicate():::Creates a predicate that tests if this pattern is found in a given input string.
Pattern#asMatchPredicate():::Creates a predicate that tests if this pattern matches a given input string.
Pattern#splitAsStream(CharSequence):::Creates a stream from the given input sequence around matches of this pattern
PatternSyntaxException#getIndex():::Retrieves the error index.
PatternSyntaxException#getDescription():::Retrieves the description of the error.
PatternSyntaxException#getPattern():::Retrieves the erroneous regular-expression pattern.
PatternSyntaxException#getMessage():::Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.
AbstractResourceBundleProvider#toBundleName(String, Locale):::Returns the bundle name for the given baseName and locale that this provider provides.
AbstractResourceBundleProvider#getBundle(String, Locale):::Returns a ResourceBundle for the given baseName and locale.
CalendarDataProvider#getFirstDayOfWeek(Locale):::Returns the first day of a week in the given locale
CalendarDataProvider#getMinimalDaysInFirstWeek(Locale):::Returns the minimal number of days required in the first week of a year
CalendarNameProvider#getDisplayName(String, int, int, int, Locale):::Returns the string representation (display name) of the calendar field value in the given style and locale
CalendarNameProvider#getDisplayNames(String, int, int, Locale):::Returns a Map containing all string representations (display names) of the Calendar field in the given style and locale and their corresponding field values
CurrencyNameProvider#getSymbol(String, Locale):::Gets the symbol of the given currency code for the specified locale
CurrencyNameProvider#getDisplayName(String, Locale):::Returns a name for the currency that is appropriate for display to the user
LocaleNameProvider#getDisplayLanguage(String, Locale):::Returns a localized name for the given  IETF BCP47 language code and the given locale that is appropriate for display to the user
LocaleNameProvider#getDisplayScript(String, Locale):::Returns a localized name for the given  IETF BCP47 script code and the given locale that is appropriate for display to the user
LocaleNameProvider#getDisplayCountry(String, Locale):::Returns a localized name for the given  IETF BCP47 region code (either ISO 3166 country code or UN M.49 area codes) and the given locale that is appropriate for display to the user
LocaleNameProvider#getDisplayVariant(String, Locale):::Returns a localized name for the given variant code and the given locale that is appropriate for display to the user
LocaleNameProvider#getDisplayUnicodeExtensionKey(String, Locale):::Returns a localized name for the given Unicode extension key, and the given locale that is appropriate for display to the user
LocaleNameProvider#getDisplayUnicodeExtensionType(String, String, Locale):::Returns a localized name for the given Unicode extension type, and the given locale that is appropriate for display to the user
LocaleServiceProvider#getAvailableLocales():::Returns an array of all locales for which this locale service provider can provide localized objects or names
LocaleServiceProvider#isSupportedLocale(Locale):::Returns true if the given locale is supported by this locale service provider
ResourceBundleControlProvider#getControl(String):::Returns a ResourceBundle.Control instance that is used to handle resource bundle loading for the given baseName
ResourceBundleProvider#getBundle(String, Locale):::Returns a ResourceBundle for the given bundle name and locale
TimeZoneNameProvider#getDisplayName(String, boolean, int, Locale):::Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale
TimeZoneNameProvider#getGenericDisplayName(String, int, Locale):::Returns a generic name for the given time zone ID that's suitable for presentation to the user in the specified locale
ToolProvider#name():::Returns the name of this tool provider.
ToolProvider#run(PrintWriter, PrintWriter, String...):::Runs an instance of the tool, returning zero for a successful run
ToolProvider#run(PrintStream, PrintStream, String...):::Runs an instance of the tool, returning zero for a successful run
ToolProvider#findFirst(String):::Returns the first instance of a ToolProvider with the given name, as loaded by ServiceLoader using the system class loader.
AbstractPipeline#evaluate(TerminalOp):::Evaluate the pipeline with a terminal operation to produce a result.
AbstractPipeline#evaluateToArrayNode(IntFunction):::Collect the elements output from the pipeline stage.
AbstractPipeline#sourceStageSpliterator():::Gets the source stage spliterator if this pipeline stage is the source stage
AbstractPipeline#getStreamFlags():::Returns the composition of stream flags of the stream source and all intermediate operations.
AbstractPipeline#getOutputShape():::Get the output shape of the pipeline
AbstractPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction):::Collect elements output from a pipeline into a Node that holds elements of this shape.
AbstractPipeline#wrap(PipelineHelper, Supplier>, boolean):::Create a spliterator that wraps a source spliterator, compatible with this stream shape, and operations associated with a PipelineHelper.
AbstractPipeline#lazySpliterator(Supplier>):::Create a lazy spliterator that wraps and obtains the supplied the spliterator when a method is invoked on the lazy spliterator.
AbstractPipeline#forEachWithCancel(Spliterator, Sink):::Traverse the elements of a spliterator compatible with this stream shape, pushing those elements into a sink
AbstractPipeline#makeNodeBuilder(long, IntFunction):::Make a node builder compatible with this stream shape.
AbstractPipeline#opIsStateful():::Returns whether this operation is stateful or not
AbstractPipeline#opWrapSink(int, Sink):::Accepts a Sink which will receive the results of this operation, and return a Sink which accepts elements of the input type of this operation and which performs the operation, passing the results to the provided Sink.
AbstractPipeline#opEvaluateParallel(PipelineHelper, Spliterator, IntFunction):::Performs a parallel evaluation of the operation using the specified PipelineHelper which describes the upstream intermediate operations
AbstractPipeline#opEvaluateParallelLazy(PipelineHelper, Spliterator):::Returns a Spliterator describing a parallel evaluation of the operation, using the specified PipelineHelper which describes the upstream intermediate operations
AbstractShortCircuitTask#getEmptyResult():::Returns the value indicating the computation completed with no task finding a short-circuitable result
AbstractShortCircuitTask#compute():::Overrides AbstractTask version to include checks for early exits while splitting or computing.
AbstractShortCircuitTask#shortCircuit(R):::Declares that a globally valid result has been found
AbstractShortCircuitTask#setLocalResult(R):::Sets a local result for this task
AbstractShortCircuitTask#getRawResult():::Retrieves the local result for this task
AbstractShortCircuitTask#getLocalResult():::Retrieves the local result for this task
AbstractShortCircuitTask#cancel():::Mark this task as canceled
AbstractShortCircuitTask#taskCanceled():::Queries whether this task is canceled
AbstractShortCircuitTask#cancelLaterNodes():::Cancels all tasks which succeed this one in the encounter order
AbstractSpinedBuffer#isEmpty():::Is the buffer currently empty?
AbstractSpinedBuffer#count():::How many elements are currently in the buffer?
AbstractSpinedBuffer#chunkSize(int):::How big should the nth chunk be?
AbstractSpinedBuffer#clear():::Remove all data from the buffer
AbstractTask#getLeafTarget():::Default target of leaf tasks for parallel decomposition
AbstractTask#makeChild(Spliterator):::Constructs a new node of type T whose parent is the receiver; must call the AbstractTask(T, Spliterator) constructor with the receiver and the provided Spliterator.
AbstractTask#doLeaf():::Computes the result associated with a leaf node
AbstractTask#suggestTargetSize(long):::Returns a suggested target leaf size based on the initial size estimate.
AbstractTask#getTargetSize(long):::Returns the targetSize, initializing it via the supplied size estimate if not already initialized.
AbstractTask#getRawResult():::Returns the local result, if any
AbstractTask#setRawResult(R):::Does nothing; instead, subclasses should use #setLocalResult(Object)} to manage results.
AbstractTask#getLocalResult():::Retrieves a result previously stored with #setLocalResult
AbstractTask#setLocalResult(R):::Associates the result with the task, can be retrieved with #getLocalResult
AbstractTask#isLeaf():::Indicates whether this task is a leaf node
AbstractTask#isRoot():::Indicates whether this task is the root node
AbstractTask#getParent():::Returns the parent of this task, or null if this task is the root
AbstractTask#compute():::Decides whether or not to split a task further or compute it directly
AbstractTask#isLeftmostNode():::Returns whether this node is a "leftmost" node -- whether the path from the root to this node involves only traversing leftmost child links
BaseStream#iterator():::Returns an iterator for the elements of this stream
BaseStream#spliterator():::Returns a spliterator for the elements of this stream
BaseStream#isParallel():::Returns whether this stream, if a terminal operation were to be executed, would execute in parallel
BaseStream#sequential():::Returns an equivalent stream that is sequential
BaseStream#parallel():::Returns an equivalent stream that is parallel
BaseStream#unordered():::Returns an equivalent stream that is unordered
BaseStream#onClose(Runnable):::Returns an equivalent stream with an additional close handler
BaseStream#close():::Closes this stream, causing all close handlers for this stream pipeline to be called.
Collector#supplier():::A function that creates and returns a new mutable result container.
Collector#accumulator():::A function that folds a value into a mutable result container.
Collector#combiner():::A function that accepts two partial results and merges them
Collector#finisher():::Perform the final transformation from the intermediate accumulation type A to the final result type R
Collector#characteristics():::Returns a Set of Collector.Characteristics indicating the characteristics of this Collector
Collector#of(Supplier, BiConsumer, BinaryOperator, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, and combiner functions
Collector#of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...):::Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.
Collectors#toCollection(Supplier):::Returns a Collector that accumulates the input elements into a new Collection, in encounter order
Collectors#toList():::Returns a Collector that accumulates the input elements into a new List
Collectors#toUnmodifiableList():::Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order
Collectors#toSet():::Returns a Collector that accumulates the input elements into a new Set
Collectors#toUnmodifiableSet():::Returns a Collector that accumulates the input elements into an unmodifiable Set
Collectors#joining():::Returns a Collector that concatenates the input elements into a String, in encounter order.
Collectors#joining(CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order.
Collectors#joining(CharSequence, CharSequence, CharSequence):::Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order.
Collectors#mapping(Function, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.
Collectors#flatMapping(Function>, Collector):::Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation
Collectors#filtering(Predicate, Collector):::Adapts a Collector to one accepting elements of the same type T by applying the predicate to each input element and only accumulating if the predicate returns true.
Collectors#collectingAndThen(Collector, Function):::Adapts a Collector to perform an additional finishing transformation
Collectors#counting():::Returns a Collector accepting elements of type T that counts the number of input elements
Collectors#minBy(Comparator):::Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.
Collectors#maxBy(Comparator):::Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.
Collectors#summingInt(ToIntFunction):::Returns a Collector that produces the sum of a integer-valued function applied to the input elements
Collectors#summingLong(ToLongFunction):::Returns a Collector that produces the sum of a long-valued function applied to the input elements
Collectors#summingDouble(ToDoubleFunction):::Returns a Collector that produces the sum of a double-valued function applied to the input elements
Collectors#sumWithCompensation(double[], double):::Incorporate a new double value using Kahan summation / compensation summation
Collectors#computeFinalSum(double[]):::If the compensated sum is spuriously NaN from accumulating one or more same-signed infinite values, return the correctly-signed infinity stored in the simple sum.
Collectors#averagingInt(ToIntFunction):::Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements
Collectors#averagingLong(ToLongFunction):::Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements
Collectors#averagingDouble(ToDoubleFunction):::Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements
Collectors#reducing(T, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.
Collectors#reducing(BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator
Collectors#reducing(U, Function, BinaryOperator):::Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator
Collectors#groupingBy(Function):::Returns a Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map
Collectors#groupingBy(Function, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingBy(Function, Supplier, Collector):::Returns a Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingByConcurrent(Function):::Returns a concurrent Collector implementing a "group by" operation on input elements of type T, grouping elements according to a classification function
Collectors#groupingByConcurrent(Function, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#groupingByConcurrent(Function, Supplier, Collector):::Returns a concurrent Collector implementing a cascaded "group by" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector
Collectors#partitioningBy(Predicate):::Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>
Collectors#partitioningBy(Predicate, Collector):::Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction
Collectors#toMap(Function, Function):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toUnmodifiableMap(Function, Function):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toUnmodifiableMap(Function, Function, BinaryOperator):::Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toMap(Function, Function, BinaryOperator, Supplier):::Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function, BinaryOperator):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#toConcurrentMap(Function, Function, BinaryOperator, Supplier):::Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements
Collectors#summarizingInt(ToIntFunction):::Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.
Collectors#summarizingLong(ToLongFunction):::Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.
Collectors#summarizingDouble(ToDoubleFunction):::Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values.
DistinctOps#makeRef(AbstractPipeline):::Appends a "distinct" operation to the provided stream, and returns the new stream.
DoubleStream#filter(DoublePredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
DoubleStream#map(DoubleUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToObj(DoubleFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToInt(DoubleToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
DoubleStream#mapToLong(DoubleToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
DoubleStream#flatMap(DoubleFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
DoubleStream#distinct():::Returns a stream consisting of the distinct elements of this stream
DoubleStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
DoubleStream#peek(DoubleConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
DoubleStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
DoubleStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
DoubleStream#takeWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
DoubleStream#dropWhile(DoublePredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
DoubleStream#forEach(DoubleConsumer):::Performs an action for each element of this stream
DoubleStream#forEachOrdered(DoubleConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
DoubleStream#toArray():::Returns an array containing the elements of this stream
DoubleStream#reduce(double, DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
DoubleStream#reduce(DoubleBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalDouble describing the reduced value, if any
DoubleStream#collect(Supplier, ObjDoubleConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
DoubleStream#sum():::Returns the sum of elements in this stream
DoubleStream#min():::Returns an OptionalDouble describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty
DoubleStream#max():::Returns an OptionalDouble describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty
DoubleStream#count():::Returns the count of elements in this stream
DoubleStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
DoubleStream#summaryStatistics():::Returns a DoubleSummaryStatistics describing various summary data about the elements of this stream
DoubleStream#anyMatch(DoublePredicate):::Returns whether any elements of this stream match the provided predicate
DoubleStream#allMatch(DoublePredicate):::Returns whether all elements of this stream match the provided predicate
DoubleStream#noneMatch(DoublePredicate):::Returns whether no elements of this stream match the provided predicate
DoubleStream#findFirst():::Returns an OptionalDouble describing the first element of this stream, or an empty OptionalDouble if the stream is empty
DoubleStream#findAny():::Returns an OptionalDouble describing some element of the stream, or an empty OptionalDouble if the stream is empty
DoubleStream#boxed():::Returns a Stream consisting of the elements of this stream, boxed to Double
DoubleStream#builder():::Returns a builder for a DoubleStream.
DoubleStream#empty():::Returns an empty sequential DoubleStream.
DoubleStream#of(double):::Returns a sequential DoubleStream containing a single element.
DoubleStream#of(double...):::Returns a sequential ordered stream whose elements are the specified values.
DoubleStream#iterate(double, DoubleUnaryOperator):::Returns an infinite sequential ordered DoubleStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
DoubleStream#iterate(double, DoublePredicate, DoubleUnaryOperator):::Returns a sequential ordered DoubleStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
DoubleStream#generate(DoubleSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided DoubleSupplier
DoubleStream#concat(DoubleStream, DoubleStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
DoubleStream.Builder#accept(double):::Adds an element to the stream being built.
DoubleStream.Builder#add(double):::Adds an element to the stream being built.
DoubleStream.Builder#build():::Builds the stream, transitioning this builder to the built state
FindOps#makeRef(boolean):::Constructs a TerminalOp for streams of objects.
FindOps#makeInt(boolean):::Constructs a TerminalOp for streams of ints.
FindOps#makeLong(boolean):::Constructs a TerminalOp for streams of longs.
FindOps#makeDouble(boolean):::Constructs a FindOp for streams of doubles.
ForEachOps#makeRef(Consumer, boolean):::Constructs a TerminalOp that perform an action for every element of a stream.
ForEachOps#makeInt(IntConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of an IntStream.
ForEachOps#makeLong(LongConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a LongStream.
ForEachOps#makeDouble(DoubleConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a DoubleStream.
IntStream#filter(IntPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
IntStream#map(IntUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToObj(IntFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToLong(IntToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
IntStream#mapToDouble(IntToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
IntStream#flatMap(IntFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
IntStream#distinct():::Returns a stream consisting of the distinct elements of this stream
IntStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
IntStream#peek(IntConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
IntStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
IntStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
IntStream#takeWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
IntStream#dropWhile(IntPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
IntStream#forEach(IntConsumer):::Performs an action for each element of this stream
IntStream#forEachOrdered(IntConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
IntStream#toArray():::Returns an array containing the elements of this stream
IntStream#reduce(int, IntBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
IntStream#reduce(IntBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any
IntStream#collect(Supplier, ObjIntConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
IntStream#sum():::Returns the sum of elements in this stream
IntStream#min():::Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty
IntStream#max():::Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty
IntStream#count():::Returns the count of elements in this stream
IntStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
IntStream#summaryStatistics():::Returns an IntSummaryStatistics describing various summary data about the elements of this stream
IntStream#anyMatch(IntPredicate):::Returns whether any elements of this stream match the provided predicate
IntStream#allMatch(IntPredicate):::Returns whether all elements of this stream match the provided predicate
IntStream#noneMatch(IntPredicate):::Returns whether no elements of this stream match the provided predicate
IntStream#findFirst():::Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty
IntStream#findAny():::Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty
IntStream#asLongStream():::Returns a LongStream consisting of the elements of this stream, converted to long
IntStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double
IntStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to an Integer
IntStream#builder():::Returns a builder for an IntStream.
IntStream#empty():::Returns an empty sequential IntStream.
IntStream#of(int):::Returns a sequential IntStream containing a single element.
IntStream#of(int...):::Returns a sequential ordered stream whose elements are the specified values.
IntStream#iterate(int, IntUnaryOperator):::Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
IntStream#iterate(int, IntPredicate, IntUnaryOperator):::Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
IntStream#generate(IntSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier
IntStream#range(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
IntStream#rangeClosed(int, int):::Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
IntStream#concat(IntStream, IntStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
IntStream.Builder#accept(int):::Adds an element to the stream being built.
IntStream.Builder#add(int):::Adds an element to the stream being built.
IntStream.Builder#build():::Builds the stream, transitioning this builder to the built state
LongStream#filter(LongPredicate):::Returns a stream consisting of the elements of this stream that match the given predicate
LongStream#map(LongUnaryOperator):::Returns a stream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToObj(LongFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToInt(LongToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
LongStream#mapToDouble(LongToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
LongStream#flatMap(LongFunction):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
LongStream#distinct():::Returns a stream consisting of the distinct elements of this stream
LongStream#sorted():::Returns a stream consisting of the elements of this stream in sorted order
LongStream#peek(LongConsumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
LongStream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
LongStream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
LongStream#takeWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
LongStream#dropWhile(LongPredicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
LongStream#forEach(LongConsumer):::Performs an action for each element of this stream
LongStream#forEachOrdered(LongConsumer):::Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
LongStream#toArray():::Returns an array containing the elements of this stream
LongStream#reduce(long, LongBinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
LongStream#reduce(LongBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalLong describing the reduced value, if any
LongStream#collect(Supplier, ObjLongConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
LongStream#sum():::Returns the sum of elements in this stream
LongStream#min():::Returns an OptionalLong describing the minimum element of this stream, or an empty optional if this stream is empty
LongStream#max():::Returns an OptionalLong describing the maximum element of this stream, or an empty optional if this stream is empty
LongStream#count():::Returns the count of elements in this stream
LongStream#average():::Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
LongStream#summaryStatistics():::Returns a LongSummaryStatistics describing various summary data about the elements of this stream
LongStream#anyMatch(LongPredicate):::Returns whether any elements of this stream match the provided predicate
LongStream#allMatch(LongPredicate):::Returns whether all elements of this stream match the provided predicate
LongStream#noneMatch(LongPredicate):::Returns whether no elements of this stream match the provided predicate
LongStream#findFirst():::Returns an OptionalLong describing the first element of this stream, or an empty OptionalLong if the stream is empty
LongStream#findAny():::Returns an OptionalLong describing some element of the stream, or an empty OptionalLong if the stream is empty
LongStream#asDoubleStream():::Returns a DoubleStream consisting of the elements of this stream, converted to double
LongStream#boxed():::Returns a Stream consisting of the elements of this stream, each boxed to a Long
LongStream#builder():::Returns a builder for a LongStream.
LongStream#empty():::Returns an empty sequential LongStream.
LongStream#of(long):::Returns a sequential LongStream containing a single element.
LongStream#of(long...):::Returns a sequential ordered stream whose elements are the specified values.
LongStream#iterate(long, LongUnaryOperator):::Returns an infinite sequential ordered LongStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
LongStream#iterate(long, LongPredicate, LongUnaryOperator):::Returns a sequential ordered LongStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
LongStream#generate(LongSupplier):::Returns an infinite sequential unordered stream where each element is generated by the provided LongSupplier
LongStream#range(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.
LongStream#rangeClosed(long, long):::Returns a sequential ordered LongStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.
LongStream#concat(LongStream, LongStream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
LongStream.Builder#accept(long):::Adds an element to the stream being built.
LongStream.Builder#add(long):::Adds an element to the stream being built.
LongStream.Builder#build():::Builds the stream, transitioning this builder to the built state
MatchOps#makeRef(Predicate, MatchKind):::Constructs a quantified predicate matcher for a Stream.
MatchOps#makeInt(IntPredicate, MatchKind):::Constructs a quantified predicate matcher for an IntStream.
MatchOps#makeLong(LongPredicate, MatchKind):::Constructs a quantified predicate matcher for a LongStream.
MatchOps#makeDouble(DoublePredicate, MatchKind):::Constructs a quantified predicate matcher for a DoubleStream.
Node#spliterator():::Returns a Spliterator describing the elements contained in this Node.
Node#forEach(Consumer):::Traverses the elements of this node, and invoke the provided Consumer with each element
Node#getChildCount():::Returns the number of child nodes of this node.
Node#getChild(int):::Retrieves the child Node at a given index.
Node#truncate(long, long, IntFunction):::Return a node describing a subsequence of the elements of this node, starting at the given inclusive start offset and ending at the given exclusive end offset.
Node#asArray(IntFunction):::Provides an array view of the contents of this node
Node#copyInto(T[], int):::Copies the content of this Node into an array, starting at a given offset into the array
Node#getShape():::Gets the StreamShape associated with this Node.
Node#count():::Returns the number of elements contained in this node.
Node.Builder#build():::Builds the node
Node.OfPrimitive#forEach(T_CONS):::Traverses the elements of this node, and invoke the provided action with each element.
Node.OfPrimitive#asPrimitiveArray():::Views this node as a primitive array
Node.OfPrimitive#newArray(int):::Creates a new primitive array.
Node.OfPrimitive#copyInto(T_ARR, int):::Copies the content of this Node into a primitive array, starting at a given offset into the array
Nodes#emptyNode(StreamShape):::Produces an empty node whose count is zero, has no children and no content.
Nodes#conc(StreamShape, Node, Node):::Produces a concatenated Node that has two or more children
Nodes#node(T[]):::Produces a Node describing an array
Nodes#node(Collection):::Produces a Node describing a Collection
Nodes#builder(long, IntFunction):::Produces a Node.Builder.
Nodes#builder():::Produces a variable size @{link Node.Builder}.
Nodes#node(int[]):::Produces a Node.OfInt describing an int[] array
Nodes#intBuilder(long):::Produces a Node.Builder.OfInt.
Nodes#intBuilder():::Produces a variable size @{link Node.Builder.OfInt}.
Nodes#node(long[]):::Produces a Node.OfLong describing a long[] array
Nodes#longBuilder(long):::Produces a Node.Builder.OfLong.
Nodes#longBuilder():::Produces a variable size @{link Node.Builder.OfLong}.
Nodes#node(double[]):::Produces a Node.OfDouble describing a double[] array
Nodes#doubleBuilder(long):::Produces a Node.Builder.OfDouble.
Nodes#doubleBuilder():::Produces a variable size @{link Node.Builder.OfDouble}.
Nodes#collect(PipelineHelper, Spliterator, boolean, IntFunction):::Collect, in parallel, elements output from a pipeline and describe those elements with a Node.
Nodes#collectInt(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from an int-valued pipeline and describe those elements with a Node.OfInt.
Nodes#collectLong(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from a long-valued pipeline and describe those elements with a Node.OfLong.
Nodes#collectDouble(PipelineHelper, Spliterator, boolean):::Collect, in parallel, elements output from n double-valued pipeline and describe those elements with a Node.OfDouble.
Nodes#flatten(Node, IntFunction):::Flatten, in parallel, a Node
Nodes#flattenInt(Node.OfInt):::Flatten, in parallel, a Node.OfInt
Nodes#flattenLong(Node.OfLong):::Flatten, in parallel, a Node.OfLong
Nodes#flattenDouble(Node.OfDouble):::Flatten, in parallel, a Node.OfDouble
PipelineHelper#getSourceShape():::Gets the stream shape for the source of the pipeline segment.
PipelineHelper#getStreamAndOpFlags():::Gets the combined stream and operation flags for the output of the described pipeline
PipelineHelper#exactOutputSizeIfKnown(Spliterator):::Returns the exact output size of the portion of the output resulting from applying the pipeline stages described by this PipelineHelper to the portion of the input described by the provided Spliterator, if known
PipelineHelper#wrapAndCopyInto(S, Spliterator):::Applies the pipeline stages described by this PipelineHelper to the provided Spliterator and send the results to the provided Sink.
PipelineHelper#copyInto(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink
PipelineHelper#copyIntoWithCancel(Sink, Spliterator):::Pushes elements obtained from the Spliterator into the provided Sink, checking Sink#cancellationRequested() after each element, and stopping if cancellation is requested.
PipelineHelper#wrapSink(Sink):::Takes a Sink that accepts elements of the output type of the PipelineHelper, and wrap it with a Sink that accepts elements of the input type and implements all the intermediate operations described by this PipelineHelper, delivering the result into the provided Sink.
PipelineHelper#makeNodeBuilder(long, IntFunction):::Constructs a @{link Node.Builder} compatible with the output shape of this PipelineHelper.
PipelineHelper#evaluate(Spliterator, boolean, IntFunction):::Collects all output elements resulting from applying the pipeline stages to the source Spliterator into a Node.
ReduceOps#makeRef(U, BiFunction, BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values.
ReduceOps#makeRef(BinaryOperator):::Constructs a TerminalOp that implements a functional reduce on reference values producing an optional reference result.
ReduceOps#makeRef(Collector):::Constructs a TerminalOp that implements a mutable reduce on reference values.
ReduceOps#makeRef(Supplier, BiConsumer, BiConsumer):::Constructs a TerminalOp that implements a mutable reduce on reference values.
ReduceOps#makeRefCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeInt(int, IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values.
ReduceOps#makeInt(IntBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on int values, producing an optional integer result.
ReduceOps#makeInt(Supplier, ObjIntConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on int values.
ReduceOps#makeIntCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeLong(long, LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values.
ReduceOps#makeLong(LongBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on long values, producing an optional long result.
ReduceOps#makeLong(Supplier, ObjLongConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on long values.
ReduceOps#makeLongCounting():::Constructs a TerminalOp that counts the number of stream elements
ReduceOps#makeDouble(double, DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values.
ReduceOps#makeDouble(DoubleBinaryOperator):::Constructs a TerminalOp that implements a functional reduce on double values, producing an optional double result.
ReduceOps#makeDouble(Supplier, ObjDoubleConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on double values.
ReduceOps#makeDoubleCounting():::Constructs a TerminalOp that counts the number of stream elements
Sink#begin(long):::Resets the sink state to receive a fresh data set
Sink#end():::Indicates that all elements have been pushed
Sink#cancellationRequested():::Indicates that this Sink does not wish to receive any more data.
Sink#accept(int):::Accepts an int value.
Sink#accept(long):::Accepts a long value.
Sink#accept(double):::Accepts a double value.
SliceOps#makeRef(AbstractPipeline, long, long):::Appends a "slice" operation to the provided stream
SliceOps#makeInt(AbstractPipeline, long, long):::Appends a "slice" operation to the provided IntStream
SliceOps#makeLong(AbstractPipeline, long, long):::Appends a "slice" operation to the provided LongStream
SliceOps#makeDouble(AbstractPipeline, long, long):::Appends a "slice" operation to the provided DoubleStream
SortedOps#makeRef(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeRef(AbstractPipeline, Comparator):::Appends a "sorted" operation to the provided stream.
SortedOps#makeInt(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeLong(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SortedOps#makeDouble(AbstractPipeline):::Appends a "sorted" operation to the provided stream.
SpinedBuffer#capacity():::Returns the current capacity of the buffer
SpinedBuffer#ensureCapacity(long):::Ensure that the buffer has at least capacity to hold the target size
SpinedBuffer#increaseCapacity():::Force the buffer to increase its capacity.
SpinedBuffer#get(long):::Retrieve the element at the specified index.
SpinedBuffer#copyInto(E[], int):::Copy the elements, starting at the specified offset, into the specified array.
SpinedBuffer#asArray(IntFunction):::Create a new array using the specified array factory, and copy the elements into it.
SpinedBuffer#spliterator():::Return a Spliterator describing the contents of the buffer.
SpinedBuffer.OfPrimitive#newArrayArray(int):::Create a new array-of-array of the proper type and size
SpinedBuffer.OfPrimitive#newArray(int):::Create a new array of the proper type and size
SpinedBuffer.OfPrimitive#arrayLength(T_ARR):::Get the length of an array
SpinedBuffer.OfPrimitive#arrayForEach(T_ARR, int, int, T_CONS):::Iterate an array with the provided consumer
Stream#filter(Predicate):::Returns a stream consisting of the elements of this stream that match the given predicate
Stream#map(Function):::Returns a stream consisting of the results of applying the given function to the elements of this stream
Stream#mapToInt(ToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
Stream#mapToLong(ToLongFunction):::Returns a LongStream consisting of the results of applying the given function to the elements of this stream
Stream#mapToDouble(ToDoubleFunction):::Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream
Stream#flatMap(Function>):::Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToInt(Function):::Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToLong(Function):::Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#flatMapToDouble(Function):::Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Stream#distinct():::Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream
Stream#sorted():::Returns a stream consisting of the elements of this stream, sorted according to natural order
Stream#sorted(Comparator):::Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator
Stream#peek(Consumer):::Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Stream#limit(long):::Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length
Stream#skip(long):::Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream
Stream#takeWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate
Stream#dropWhile(Predicate):::Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate
Stream#forEach(Consumer):::Performs an action for each element of this stream
Stream#forEachOrdered(Consumer):::Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order
Stream#toArray():::Returns an array containing the elements of this stream
Stream#toArray(IntFunction):::Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing
Stream#reduce(T, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value
Stream#reduce(BinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any
Stream#reduce(U, BiFunction, BinaryOperator):::Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions
Stream#collect(Supplier, BiConsumer, BiConsumer):::Performs a mutable reduction operation on the elements of this stream
Stream#collect(Collector):::Performs a mutable reduction operation on the elements of this stream using a Collector
Stream#min(Comparator):::Returns the minimum element of this stream according to the provided Comparator
Stream#max(Comparator):::Returns the maximum element of this stream according to the provided Comparator
Stream#count():::Returns the count of elements in this stream
Stream#anyMatch(Predicate):::Returns whether any elements of this stream match the provided predicate
Stream#allMatch(Predicate):::Returns whether all elements of this stream match the provided predicate
Stream#noneMatch(Predicate):::Returns whether no elements of this stream match the provided predicate
Stream#findFirst():::Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty
Stream#findAny():::Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty
Stream#builder():::Returns a builder for a Stream.
Stream#empty():::Returns an empty sequential Stream.
Stream#of(T):::Returns a sequential Stream containing a single element.
Stream#ofNullable(T):::Returns a sequential Stream containing a single element, if non-null, otherwise returns an empty Stream.
Stream#of(T...):::Returns a sequential ordered stream whose elements are the specified values.
Stream#iterate(T, UnaryOperator):::Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc
Stream#iterate(T, Predicate, UnaryOperator):::Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate
Stream#generate(Supplier):::Returns an infinite sequential unordered stream where each element is generated by the provided Supplier
Stream#concat(Stream, Stream):::Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Stream.Builder#accept(T):::Adds an element to the stream being built.
Stream.Builder#add(T):::Adds an element to the stream being built.
Stream.Builder#build():::Builds the stream, transitioning this builder to the built state
Streams#composeWithExceptions(Runnable, Runnable):::Given two Runnables, return a Runnable that executes both in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
Streams#composedClose(BaseStream, BaseStream):::Given two streams, return a Runnable that executes both of their BaseStream#close methods in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
StreamSpliterators.UnorderedSliceSpliterator#acquirePermits(long):::Acquire permission to skip or process elements
StreamSpliterators.UnorderedSliceSpliterator#permitStatus():::Call to check if permits might be available before acquiring data
StreamSupport#stream(Spliterator, boolean):::Creates a new sequential or parallel Stream from a Spliterator
StreamSupport#stream(Supplier>, int, boolean):::Creates a new sequential or parallel Stream from a Supplier of Spliterator
StreamSupport#intStream(Spliterator.OfInt, boolean):::Creates a new sequential or parallel IntStream from a Spliterator.OfInt
StreamSupport#intStream(Supplier, int, boolean):::Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt
StreamSupport#longStream(Spliterator.OfLong, boolean):::Creates a new sequential or parallel LongStream from a Spliterator.OfLong
StreamSupport#longStream(Supplier, int, boolean):::Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong
StreamSupport#doubleStream(Spliterator.OfDouble, boolean):::Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble
StreamSupport#doubleStream(Supplier, int, boolean):::Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble
TerminalOp#inputShape():::Gets the shape of the input type of this operation.
TerminalOp#getOpFlags():::Gets the stream flags of the operation
TerminalOp#evaluateParallel(PipelineHelper, Spliterator):::Performs a parallel evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
TerminalOp#evaluateSequential(PipelineHelper, Spliterator):::Performs a sequential evaluation of the operation using the specified PipelineHelper, which describes the upstream intermediate operations.
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
WhileOps#makeTakeWhileRef(AbstractPipeline, Predicate):::Appends a "takeWhile" operation to the provided Stream.
WhileOps#makeTakeWhileInt(AbstractPipeline, IntPredicate):::Appends a "takeWhile" operation to the provided IntStream.
WhileOps#makeTakeWhileLong(AbstractPipeline, LongPredicate):::Appends a "takeWhile" operation to the provided LongStream.
WhileOps#makeTakeWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "takeWhile" operation to the provided DoubleStream.
WhileOps.DropWhileOp#opWrapSink(Sink, boolean):::Accepts a Sink which will receive the results of this dropWhile operation, and return a DropWhileSink which accepts elements and which performs the dropWhile operation passing the results to the provided Sink.
WhileOps#makeDropWhileRef(AbstractPipeline, Predicate):::Appends a "dropWhile" operation to the provided Stream.
WhileOps#makeDropWhileInt(AbstractPipeline, IntPredicate):::Appends a "dropWhile" operation to the provided IntStream.
WhileOps#makeDropWhileLong(AbstractPipeline, LongPredicate):::Appends a "dropWhile" operation to the provided LongStream.
WhileOps#makeDropWhileDouble(AbstractPipeline, DoublePredicate):::Appends a "dropWhile" operation to the provided DoubleStream.
Adler32#update(int):::Updates the checksum with the specified byte (the low eight bits of the argument b).
Adler32#update(byte[], int, int):::Updates the checksum with the specified array of bytes.
Adler32#update(ByteBuffer):::Updates the checksum with the bytes from the specified buffer
Adler32#reset():::Resets the checksum to initial value.
Adler32#getValue():::Returns the checksum value.
CheckedInputStream#read():::Reads a byte
CheckedInputStream#read(byte[], int, int):::Reads into an array of bytes
CheckedInputStream#skip(long):::Skips specified number of bytes of input.
CheckedInputStream#getChecksum():::Returns the Checksum for this input stream.
CheckedOutputStream#write(int):::Writes a byte
CheckedOutputStream#write(byte[], int, int):::Writes an array of bytes
CheckedOutputStream#getChecksum():::Returns the Checksum for this output stream.
Checksum#update(int):::Updates the current checksum with the specified byte.
Checksum#update(byte[]):::Updates the current checksum with the specified array of bytes.
Checksum#update(byte[], int, int):::Updates the current checksum with the specified array of bytes.
Checksum#update(ByteBuffer):::Updates the current checksum with the bytes from the specified buffer
Checksum#getValue():::Returns the current checksum value.
Checksum#reset():::Resets the checksum to its initial value.
CRC32#update(int):::Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).
CRC32#update(byte[], int, int):::Updates the CRC-32 checksum with the specified array of bytes.
CRC32#update(ByteBuffer):::Updates the CRC-32 checksum with the bytes from the specified buffer
CRC32#reset():::Resets CRC-32 to initial value.
CRC32#getValue():::Returns CRC-32 value.
CRC32C#update(int):::Updates the CRC-32C checksum with the specified byte (the low eight bits of the argument b).
CRC32C#update(byte[], int, int):::Updates the CRC-32C checksum with the specified array of bytes.
CRC32C#update(ByteBuffer):::Updates the CRC-32C checksum with the bytes from the specified buffer
CRC32C#reset():::Resets CRC-32C to initial value.
CRC32C#getValue():::Returns CRC-32C value.
Deflater#setInput(byte[], int, int):::Sets input data for compression
Deflater#setInput(byte[]):::Sets input data for compression
Deflater#setInput(ByteBuffer):::Sets input data for compression
Deflater#setDictionary(byte[], int, int):::Sets preset dictionary for compression
Deflater#setDictionary(byte[]):::Sets preset dictionary for compression
Deflater#setDictionary(ByteBuffer):::Sets preset dictionary for compression
Deflater#setStrategy(int):::Sets the compression strategy to the specified value
Deflater#setLevel(int):::Sets the compression level to the specified value
Deflater#needsInput():::Returns true if no data remains in the input buffer
Deflater#finish():::When called, indicates that compression should end with the current contents of the input buffer.
Deflater#finished():::Returns true if the end of the compressed data output stream has been reached.
Deflater#deflate(byte[], int, int):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(byte[]):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(ByteBuffer):::Compresses the input data and fills specified buffer with compressed data
Deflater#deflate(byte[], int, int, int):::Compresses the input data and fills the specified buffer with compressed data
Deflater#deflate(ByteBuffer, int):::Compresses the input data and fills the specified buffer with compressed data
Deflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.
Deflater#getTotalIn():::Returns the total number of uncompressed bytes input so far
Deflater#getBytesRead():::Returns the total number of uncompressed bytes input so far.
Deflater#getTotalOut():::Returns the total number of compressed bytes output so far
Deflater#getBytesWritten():::Returns the total number of compressed bytes output so far.
Deflater#reset():::Resets deflater so that a new set of input data can be processed
Deflater#end():::Closes the compressor and discards any unprocessed input
Deflater#finalize():::Closes the compressor when garbage is collected.
DeflaterInputStream#close():::Closes this input stream and its underlying input stream, discarding any pending uncompressed data.
DeflaterInputStream#read():::Reads a single byte of compressed data from the input stream
DeflaterInputStream#read(byte[], int, int):::Reads compressed data into a byte array
DeflaterInputStream#skip(long):::Skips over and discards data from the input stream
DeflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1
DeflaterInputStream#markSupported():::Always returns false because this input stream does not support the #mark mark() and #reset reset() methods.
DeflaterInputStream#mark(int):::This operation is not supported.
DeflaterInputStream#reset():::This operation is not supported.
DeflaterOutputStream#write(int):::Writes a byte to the compressed output stream
DeflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the compressed output stream
DeflaterOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream
DeflaterOutputStream#close():::Writes remaining compressed data to the output stream and closes the underlying stream.
DeflaterOutputStream#deflate():::Writes next block of compressed data to the output stream.
DeflaterOutputStream#flush():::Flushes the compressed output stream
GZIPInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes
GZIPInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
GZIPOutputStream#write(byte[], int, int):::Writes array of bytes to the compressed output stream
GZIPOutputStream#finish():::Finishes writing compressed data to the output stream without closing the underlying stream
Inflater#setInput(byte[], int, int):::Sets input data for decompression
Inflater#setInput(byte[]):::Sets input data for decompression
Inflater#setInput(ByteBuffer):::Sets input data for decompression
Inflater#setDictionary(byte[], int, int):::Sets the preset dictionary to the given array of bytes
Inflater#setDictionary(byte[]):::Sets the preset dictionary to the given array of bytes
Inflater#setDictionary(ByteBuffer):::Sets the preset dictionary to the bytes in the given buffer
Inflater#getRemaining():::Returns the total number of bytes remaining in the input buffer
Inflater#needsInput():::Returns true if no data remains in the input buffer
Inflater#needsDictionary():::Returns true if a preset dictionary is needed for decompression.
Inflater#finished():::Returns true if the end of the compressed data stream has been reached.
Inflater#inflate(byte[], int, int):::Uncompresses bytes into specified buffer
Inflater#inflate(byte[]):::Uncompresses bytes into specified buffer
Inflater#inflate(ByteBuffer):::Uncompresses bytes into specified buffer
Inflater#getAdler():::Returns the ADLER-32 value of the uncompressed data.
Inflater#getTotalIn():::Returns the total number of compressed bytes input so far
Inflater#getBytesRead():::Returns the total number of compressed bytes input so far.
Inflater#getTotalOut():::Returns the total number of uncompressed bytes output so far
Inflater#getBytesWritten():::Returns the total number of uncompressed bytes output so far.
Inflater#reset():::Resets inflater so that a new set of input data can be processed.
Inflater#end():::Closes the decompressor and discards any unprocessed input
Inflater#finalize():::Closes the decompressor when garbage is collected.
InflaterInputStream#read():::Reads a byte of uncompressed data
InflaterInputStream#read(byte[], int, int):::Reads uncompressed data into an array of bytes
InflaterInputStream#available():::Returns 0 after EOF has been reached, otherwise always return 1
InflaterInputStream#skip(long):::Skips specified number of bytes of uncompressed data.
InflaterInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
InflaterInputStream#fill():::Fills input buffer with more data to decompress.
InflaterInputStream#markSupported():::Tests if this input stream supports the mark and reset methods
InflaterInputStream#mark(int):::Marks the current position in this input stream
InflaterInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
InflaterOutputStream#close():::Writes any remaining uncompressed data to the output stream and closes the underlying output stream.
InflaterOutputStream#flush():::Flushes this output stream, forcing any pending buffered output bytes to be written.
InflaterOutputStream#finish():::Finishes writing uncompressed data to the output stream without closing the underlying stream
InflaterOutputStream#write(int):::Writes a byte to the uncompressed output stream.
InflaterOutputStream#write(byte[], int, int):::Writes an array of bytes to the uncompressed output stream.
ZipEntry#getName():::Returns the name of the entry.
ZipEntry#setTime(long):::Sets the last modification time of the entry
ZipEntry#getTime():::Returns the last modification time of the entry
ZipEntry#setTimeLocal(LocalDateTime):::Sets the last modification time of the entry in local date-time
ZipEntry#getTimeLocal():::Returns the last modification time of the entry in local date-time
ZipEntry#setLastModifiedTime(FileTime):::Sets the last modification time of the entry
ZipEntry#getLastModifiedTime():::Returns the last modification time of the entry
ZipEntry#setLastAccessTime(FileTime):::Sets the last access time of the entry
ZipEntry#getLastAccessTime():::Returns the last access time of the entry
ZipEntry#setCreationTime(FileTime):::Sets the creation time of the entry
ZipEntry#getCreationTime():::Returns the creation time of the entry
ZipEntry#setSize(long):::Sets the uncompressed size of the entry data.
ZipEntry#getSize():::Returns the uncompressed size of the entry data.
ZipEntry#getCompressedSize():::Returns the size of the compressed entry data
ZipEntry#setCompressedSize(long):::Sets the size of the compressed entry data.
ZipEntry#setCrc(long):::Sets the CRC-32 checksum of the uncompressed entry data.
ZipEntry#getCrc():::Returns the CRC-32 checksum of the uncompressed entry data.
ZipEntry#setMethod(int):::Sets the compression method for the entry.
ZipEntry#getMethod():::Returns the compression method of the entry.
ZipEntry#setExtra(byte[]):::Sets the optional extra field data for the entry
ZipEntry#setExtra0(byte[], boolean):::Sets the optional extra field data for the entry.
ZipEntry#getExtra():::Returns the extra field data for the entry.
ZipEntry#setComment(String):::Sets the optional comment string for the entry
ZipEntry#getComment():::Returns the comment string for the entry.
ZipEntry#isDirectory():::Returns true if this is a directory entry
ZipEntry#toString():::Returns a string representation of the ZIP entry.
ZipEntry#hashCode():::Returns the hash code value for this entry.
ZipEntry#clone():::Returns a copy of this entry.
ZipFile#getComment():::Returns the zip file comment, or null if none.
ZipFile#getEntry(String):::Returns the zip file entry for the specified name, or null if not found.
ZipFile#getInputStream(ZipEntry):::Returns an input stream for reading the contents of the specified zip file entry
ZipFile#getName():::Returns the path name of the ZIP file.
ZipFile#entries():::Returns an enumeration of the ZIP file entries.
ZipFile#stream():::Returns an ordered Stream over the ZIP file entries
ZipFile#size():::Returns the number of entries in the ZIP file.
ZipFile#close():::Closes the ZIP file
ZipFile#finalize():::Ensures that the system resources held by this ZipFile object are released when there are no more references to it.
ZipInputStream#getNextEntry():::Reads the next ZIP file entry and positions the stream at the beginning of the entry data.
ZipInputStream#closeEntry():::Closes the current ZIP entry and positions the stream for reading the next entry.
ZipInputStream#available():::Returns 0 after EOF has reached for the current entry data, otherwise always return 1
ZipInputStream#read(byte[], int, int):::Reads from the current ZIP entry into an array of bytes
ZipInputStream#skip(long):::Skips specified number of bytes in the current ZIP entry.
ZipInputStream#close():::Closes this input stream and releases any system resources associated with the stream.
ZipInputStream#createZipEntry(String):::Creates a new ZipEntry object for the specified entry name.
ZipOutputStream#setComment(String):::Sets the ZIP file comment.
ZipOutputStream#setMethod(int):::Sets the default compression method for subsequent entries
ZipOutputStream#setLevel(int):::Sets the compression level for subsequent entries which are DEFLATED
ZipOutputStream#putNextEntry(ZipEntry):::Begins writing a new ZIP file entry and positions the stream to the start of the entry data
ZipOutputStream#closeEntry():::Closes the current ZIP entry and positions the stream for writing the next entry.
ZipOutputStream#write(byte[], int, int):::Writes an array of bytes to the current ZIP entry data
ZipOutputStream#finish():::Finishes writing the contents of the ZIP output stream without closing the underlying stream
ZipOutputStream#close():::Closes the ZIP output stream as well as the stream being filtered.
ZipUtils#winTimeToFileTime(long):::Converts Windows time (in microseconds, UTC/GMT) time to FileTime.
ZipUtils#fileTimeToWinTime(FileTime):::Converts FileTime to Windows time.
ZipUtils#unixTimeToFileTime(long):::Converts "standard Unix time"(in seconds, UTC/GMT) to FileTime
ZipUtils#fileTimeToUnixTime(FileTime):::Converts FileTime to "standard Unix time".
ZipUtils#dosToJavaTime(long):::Converts DOS time to Java time (number of milliseconds since epoch).
ZipUtils#extendedDosToJavaTime(long):::Converts extended DOS time to Java time, where up to 1999 milliseconds might be encoded into the upper half of the returned long.
ZipUtils#javaToExtendedDosTime(long):::Converts Java time to DOS time, encoding any milliseconds lost in the conversion into the upper half of the returned long.
ZipUtils#get16(byte[], int):::Fetches unsigned 16-bit value from byte array at specified offset
ZipUtils#get32(byte[], int):::Fetches unsigned 32-bit value from byte array at specified offset
ZipUtils#get64(byte[], int):::Fetches signed 64-bit value from byte array at specified offset
ZipUtils#get32S(byte[], int):::Fetches signed 32-bit value from byte array at specified offset
ZipUtils#loadLibrary():::Loads zip native library, if not already laoded
